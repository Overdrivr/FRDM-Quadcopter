
FSFK_KL46Z.elf:     file format elf32-littlearm
FSFK_KL46Z.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000471

Program Header:
    LOAD off    0x00008000 vaddr 0x00000000 paddr 0x00000000 align 2**15
         filesz 0x000000c0 memsz 0x000000c0 flags r--
    LOAD off    0x00008400 vaddr 0x00000400 paddr 0x00000400 align 2**15
         filesz 0x00000010 memsz 0x00000010 flags r--
    LOAD off    0x00008410 vaddr 0x00000410 paddr 0x00000410 align 2**15
         filesz 0x00014bf4 memsz 0x00014bf4 flags rwx
    LOAD off    0x0001e000 vaddr 0x1fffe000 paddr 0x00015004 align 2**15
         filesz 0x0000008c memsz 0x00005bbc flags rw-
    LOAD off    0x00023bbc vaddr 0x20003bbc paddr 0x00015090 align 2**15
         filesz 0x00000018 memsz 0x00000418 flags rw-
private flags = 5000202: [Version5 EABI] [soft-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .interrupts   000000c0  00000000  00000000  00008000  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .cfmprotect   00000010  00000400  00000400  00008400  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00014bec  00000410  00000410  00008410  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000004  00014ffc  00014ffc  0001cffc  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  00015000  00015000  0001d000  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .mtb          00000000  1fffe000  1fffe000  00023bd4  2**0  CONTENTS
  6 .data         0000008c  1fffe000  00015004  0001e000  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005b30  1fffe08c  00015090  0001e08c  2**2  ALLOC
  8 .romp         00000018  20003bbc  00015090  00023bbc  2**0  CONTENTS, ALLOC, LOAD, DATA
  9 ._user_heap_stack 00000400  20003bd4  000150a8  00023bd4  2**0  ALLOC
 10 .ARM.attributes 00000028  00000000  00000000  00023bd4  2**0  CONTENTS, READONLY
 11 .debug_info   00021bd6  00000000  00000000  00023bfc  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005968  00000000  00000000  000457d2  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000215f2  00000000  00000000  0004b13a  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f00  00000000  00000000  0006c730  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002748  00000000  00000000  0006d630  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000ad05  00000000  00000000  0006fd78  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004cb6  00000000  00000000  0007aa7d  2**0  CONTENTS, READONLY, DEBUGGING
 18 .comment      00000070  00000000  00000000  0007f733  2**0  CONTENTS, READONLY
 19 .debug_frame  00002f74  00000000  00000000  0007f7a4  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .interrupts	00000000 .interrupts
00000400 l    d  .cfmprotect	00000000 .cfmprotect
00000410 l    d  .text	00000000 .text
00014ffc l    d  .init_array	00000000 .init_array
00015000 l    d  .fini_array	00000000 .fini_array
1fffe000 l    d  .mtb	00000000 .mtb
1fffe000 l    d  .data	00000000 .data
1fffe08c l    d  .bss	00000000 .bss
20003bbc l    d  .romp	00000000 .romp
20003bd4 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 Vectors.c
00000000 l    df *ABS*	00000000 Cpu.c
00000000 l    df *ABS*	00000000 crtstuff.c
00014d6c l     O .text	00000000 __EH_FRAME_BEGIN__
00000410 l     F .text	00000000 __do_global_dtors_aux
1fffe08c l       .bss	00000000 completed.8122
00015000 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
00000438 l     F .text	00000000 frame_dummy
1fffe090 l       .bss	00000000 object.8127
00014ffc l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 ./MQXLITE/psp/cortex_m/core/M0/boot.o
00000000 l       *ABS*	00000000 TD_TD_NEXT
00000004 l       *ABS*	00000000 TD_TD_PREV
00000008 l       *ABS*	00000000 TD_STATE
0000000c l       *ABS*	00000000 TD_TASK_ID
00000010 l       *ABS*	00000000 TD_STACK_BASE
00000014 l       *ABS*	00000000 TD_STACK_PTR
00000018 l       *ABS*	00000000 TD_STACK_LIMIT
0000001c l       *ABS*	00000000 TD_MY_QUEUE
00000020 l       *ABS*	00000000 TD_HOME_QUEUE
00000024 l       *ABS*	00000000 TD_TASK_SR
00000026 l       *ABS*	00000000 TD_RESERVED_1
00000028 l       *ABS*	00000000 TD_FLAGS
00000034 l       *ABS*	00000000 TD_FLOAT_CONTEXT_PTR
00000000 l       *ABS*	00000000 RQ_HEAD_READY_Q
00000004 l       *ABS*	00000000 RQ_TAIL_READY_Q
00000008 l       *ABS*	00000000 RQ_NEXT_Q
0000000c l       *ABS*	00000000 RQ_ENABLE_SR
0000000e l       *ABS*	00000000 RQ_PRIORITY
00000000 l       *ABS*	00000000 IT_APP_ISR
00000004 l       *ABS*	00000000 IT_APP_ISR_EXCEPTION_HANDLER
00000008 l       *ABS*	00000000 IT_APP_ISR_DATA
00000000 l       *ABS*	00000000 HASH_ISR_NUM
00000004 l       *ABS*	00000000 HASH_ISR_ADDR
00000008 l       *ABS*	00000000 HASH_ISR_EXCEPT_HNDL
0000000c l       *ABS*	00000000 HASH_ISR_DATA
00000010 l       *ABS*	00000000 HASH_ISR_NEXT
00000000 l       *ABS*	00000000 KD_ADDRESSING_CAPABILITY
00000004 l       *ABS*	00000000 KD_ENDIANESS
00000008 l       *ABS*	00000000 KD_CPU_TYPE
0000000a l       *ABS*	00000000 KD_PSP_CFG_MEMORY_ALIGNMENT
0000000c l       *ABS*	00000000 KD_PSP_CFG_STACK_ALIGNMENT
0000000e l       *ABS*	00000000 KD_PSP_CFG_MEM_STOREBLOCK_ALIGNMENT
00000010 l       *ABS*	00000000 KD_CONFIG1
00000012 l       *ABS*	00000000 KD_CONFIG2
00000014 l       *ABS*	00000000 KD_FLAGS
00000016 l       *ABS*	00000000 KD_DISABLE_SR
00000018 l       *ABS*	00000000 KD_IN_ISR
0000001a l       *ABS*	00000000 KD_ACTIVE_SR
0000001c l       *ABS*	00000000 KD_ACTIVE_PTR
00000020 l       *ABS*	00000000 KD_READY_Q_LIST
00000024 l       *ABS*	00000000 KD_CURRENT_READY_Q
00000028 l       *ABS*	00000000 KD_DEFAULT_ISR
0000002c l       *ABS*	00000000 KD_FIRST_USER_ISR_VECTOR
00000030 l       *ABS*	00000000 KD_LAST_USER_ISR_VECTOR
00000034 l       *ABS*	00000000 KD_INTERRUPT_CONTEXT_PTR
00000038 l       *ABS*	00000000 KD_INTERRUPT_TABLE_PTR
0000003c l       *ABS*	00000000 KD_INTERRUPT_STACK_PTR
00000040 l       *ABS*	00000000 KD_LOG_CONTROL
00000044 l       *ABS*	00000000 KD_LOG_OLD_TD
00000048 l       *ABS*	00000000 KD_FP_ACTIVE_PTR
0000004c l       *ABS*	00000000 KD_DSP_ACTIVE_PTR
00000050 l       *ABS*	00000000 KD_SYSTEM_TD
00008000 l       *ABS*	00000000 PSP_CNFG_MQX_KERNEL_LOGGING
00004000 l       *ABS*	00000000 PSP_CNFG_FP_REGISTERS_EXIST
00000000 l       *ABS*	00000000 PSP_CNFG
00000002 l       *ABS*	00000000 FP_TASK_MASK
00000200 l       *ABS*	00000000 FP_CONTEXT_SAVED_MASK
0000fdff l       *ABS*	00000000 FP_CONTEXT_CLEAR_MASK
00001000 l       *ABS*	00000000 PREEMPTION_DISABLED
00000000 l       *ABS*	00000000 STORE_ALL_REGISTERS
e000e180 l       *ABS*	00000000 NVIC_ICER
e000e280 l       *ABS*	00000000 NVIC_ICPR
00000000 l    df *ABS*	00000000 _udivsi3.o
000004a4 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _divsi3.o
000005c4 l       .text	00000000 .divsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_cmpsf2.o
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 _clzsi2.o
00000000 l    df *ABS*	00000000 Events.c
00000000 l    df *ABS*	00000000 approximations.c
00000000 l    df *ABS*	00000000 drivers.c
00000000 l    df *ABS*	00000000 fusion.c
00000000 l    df *ABS*	00000000 magnetic.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 matrix.c
00000000 l    df *ABS*	00000000 mqx_tasks.c
00000000 l    df *ABS*	00000000 orientation.c
00000000 l    df *ABS*	00000000 tasks.c
1fffe0a8 l     O .bss	00000001 iCounter.8936
00000000 l    df *ABS*	00000000 user_tasks.c
1fffe0ac l     O .bss	0000000c deviceData
1fffe0b8 l     O .bss	00000004 send_variables_counter.7649
1fffe0bc l     O .bss	00000004 counter_float
1fffe0c0 l     O .bss	0000000c gyro_data
1fffe0cc l     O .bss	00000004 alive_counter.7648
1fffe0d0 l     O .bss	0000000c acc_data
1fffe0dc l     O .bss	00000004 counter
00000000 l    df *ABS*	00000000 functions.c
00000000 l    df *ABS*	00000000 protocol.c
1fffe0e0 l     O .bss	00000004 on_decoding_done
1fffe0e4 l     O .bss	00000100 decodingBuffer.4046
1fffe1e4 l     O .bss	00000004 on_encoding_done
1fffe1e8 l     O .bss	00000082 encodingBuffer.4037
00000000 l    df *ABS*	00000000 startup.c
0000fcd2 l       .text	00000000 skip_sp
1fffe26c l     O .bss	00000028 argv
00000000 l    df *ABS*	00000000 int_inst.c
00000000 l    df *ABS*	00000000 int_vtab.c
00000000 l    df *ABS*	00000000 mem_zero.c
00000000 l    df *ABS*	00000000 psp_iinit.c
00000000 l    df *ABS*	00000000 psp_tiad.c
00000000 l    df *ABS*	00000000 psp_tinm.c
00000000 l    df *ABS*	00000000 sc_irdyq.c
00000000 l    df *ABS*	00000000 stack_bu.c
00000000 l    df *ABS*	00000000 stack_de.c
00000000 l    df *ABS*	00000000 idletask.c
00000000 l    df *ABS*	00000000 int.c
00000000 l    df *ABS*	00000000 lwevent.c
00000000 l    df *ABS*	00000000 lwsem.c
00000000 l    df *ABS*	00000000 mqx_utils.c
00000000 l    df *ABS*	00000000 mqxlite.c
00000000 l    df *ABS*	00000000 task.c
00000000 l    df *ABS*	00000000 time_ticks.c
00000000 l    df *ABS*	00000000 FTM.c
1fffe298 l     O .bss	0000000c DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 I2C.c
1fffe2a4 l     O .bss	00000024 DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 LED_BLUE.c
1fffe2c8 l     O .bss	00000004 DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 LED_GREEN.c
1fffe2cc l     O .bss	00000004 DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 LED_RED.c
1fffe2d0 l     O .bss	00000004 DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 MQX1.c
1fffe2d4 l     O .bss	00000004 SystemTimerDeviceDataPtr
00000000 l    df *ABS*	00000000 RNG1.c
1fffe2fc l     O .bss	00000001 RNG1_inIdx
1fffe300 l     O .bss	00000040 RNG1_buffer
1fffe340 l     O .bss	00000001 RNG1_inSize
1fffe341 l     O .bss	00000001 RNG1_outIdx
00000000 l    df *ABS*	00000000 SystemTimer1.c
1fffe344 l     O .bss	0000000c DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 TestPin_KF_Time.c
1fffe350 l     O .bss	00000004 DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 TestPin_MagCal_Time.c
1fffe354 l     O .bss	00000004 DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 UART.c
1fffe358 l     O .bss	00000020 DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 crc.c
00000000 l    df *ABS*	00000000 distantio.c
1fffe378 l     O .bss	0000000e buffer.4400
1fffe018 l     O .data	0000000e buffer.4459
1fffe388 l     O .bss	00002084 Log
2000040c l     O .bss	0000000e buffer.4387
2000041c l     O .bss	0000000e buffer.4447
00000000 l    df *ABS*	00000000 sf_sin.c
00000000 l    df *ABS*	00000000 wf_acos.c
00000000 l    df *ABS*	00000000 wf_pow.c
00000000 l    df *ABS*	00000000 wf_sqrt.c
00000000 l    df *ABS*	00000000 ef_acos.c
00000000 l    df *ABS*	00000000 ef_pow.c
00014910 l     O .text	00000008 dp_h
00014918 l     O .text	00000008 dp_l
00014920 l     O .text	00000008 bp
00000000 l    df *ABS*	00000000 ef_rem_pio2.c
00014928 l     O .text	00000080 npio2_hw
000149a8 l     O .text	00000318 two_over_pi
00000000 l    df *ABS*	00000000 ef_sqrt.c
00000000 l    df *ABS*	00000000 kf_cos.c
00000000 l    df *ABS*	00000000 kf_rem_pio2.c
00014cc0 l     O .text	0000000c init_jk
00014ccc l     O .text	0000002c PIo2
00000000 l    df *ABS*	00000000 kf_sin.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
00014cf8 l     O .text	00000010 TWO52
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 sf_finite.c
00000000 l    df *ABS*	00000000 sf_floor.c
00000000 l    df *ABS*	00000000 sf_fpclassify.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 sf_copysign.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 task_template_list.c
00000000 l    df *ABS*	00000000 impure.c
1fffe028 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 c:/freescale/kds_3.0.0/toolchain/bin/../lib/gcc/arm-none-eabi/4.9.3/armv6-m/crti.o
00000000 l    df *ABS*	00000000 c:/freescale/kds_3.0.0/toolchain/bin/../lib/gcc/arm-none-eabi/4.9.3/armv6-m/crtn.o
00000000 l    df *ABS*	00000000 ./MQXLITE/psp/cortex_m/core/M0/dispatch.o
00000000 l       *ABS*	00000000 TD_TD_NEXT
00000004 l       *ABS*	00000000 TD_TD_PREV
00000008 l       *ABS*	00000000 TD_STATE
0000000c l       *ABS*	00000000 TD_TASK_ID
00000010 l       *ABS*	00000000 TD_STACK_BASE
00000014 l       *ABS*	00000000 TD_STACK_PTR
00000018 l       *ABS*	00000000 TD_STACK_LIMIT
0000001c l       *ABS*	00000000 TD_MY_QUEUE
00000020 l       *ABS*	00000000 TD_HOME_QUEUE
00000024 l       *ABS*	00000000 TD_TASK_SR
00000026 l       *ABS*	00000000 TD_RESERVED_1
00000028 l       *ABS*	00000000 TD_FLAGS
00000034 l       *ABS*	00000000 TD_FLOAT_CONTEXT_PTR
00000000 l       *ABS*	00000000 RQ_HEAD_READY_Q
00000004 l       *ABS*	00000000 RQ_TAIL_READY_Q
00000008 l       *ABS*	00000000 RQ_NEXT_Q
0000000c l       *ABS*	00000000 RQ_ENABLE_SR
0000000e l       *ABS*	00000000 RQ_PRIORITY
00000000 l       *ABS*	00000000 IT_APP_ISR
00000004 l       *ABS*	00000000 IT_APP_ISR_EXCEPTION_HANDLER
00000008 l       *ABS*	00000000 IT_APP_ISR_DATA
00000000 l       *ABS*	00000000 HASH_ISR_NUM
00000004 l       *ABS*	00000000 HASH_ISR_ADDR
00000008 l       *ABS*	00000000 HASH_ISR_EXCEPT_HNDL
0000000c l       *ABS*	00000000 HASH_ISR_DATA
00000010 l       *ABS*	00000000 HASH_ISR_NEXT
00000000 l       *ABS*	00000000 KD_ADDRESSING_CAPABILITY
00000004 l       *ABS*	00000000 KD_ENDIANESS
00000008 l       *ABS*	00000000 KD_CPU_TYPE
0000000a l       *ABS*	00000000 KD_PSP_CFG_MEMORY_ALIGNMENT
0000000c l       *ABS*	00000000 KD_PSP_CFG_STACK_ALIGNMENT
0000000e l       *ABS*	00000000 KD_PSP_CFG_MEM_STOREBLOCK_ALIGNMENT
00000010 l       *ABS*	00000000 KD_CONFIG1
00000012 l       *ABS*	00000000 KD_CONFIG2
00000014 l       *ABS*	00000000 KD_FLAGS
00000016 l       *ABS*	00000000 KD_DISABLE_SR
00000018 l       *ABS*	00000000 KD_IN_ISR
0000001a l       *ABS*	00000000 KD_ACTIVE_SR
0000001c l       *ABS*	00000000 KD_ACTIVE_PTR
00000020 l       *ABS*	00000000 KD_READY_Q_LIST
00000024 l       *ABS*	00000000 KD_CURRENT_READY_Q
00000028 l       *ABS*	00000000 KD_DEFAULT_ISR
0000002c l       *ABS*	00000000 KD_FIRST_USER_ISR_VECTOR
00000030 l       *ABS*	00000000 KD_LAST_USER_ISR_VECTOR
00000034 l       *ABS*	00000000 KD_INTERRUPT_CONTEXT_PTR
00000038 l       *ABS*	00000000 KD_INTERRUPT_TABLE_PTR
0000003c l       *ABS*	00000000 KD_INTERRUPT_STACK_PTR
00000040 l       *ABS*	00000000 KD_LOG_CONTROL
00000044 l       *ABS*	00000000 KD_LOG_OLD_TD
00000048 l       *ABS*	00000000 KD_FP_ACTIVE_PTR
0000004c l       *ABS*	00000000 KD_DSP_ACTIVE_PTR
00000050 l       *ABS*	00000000 KD_SYSTEM_TD
00008000 l       *ABS*	00000000 PSP_CNFG_MQX_KERNEL_LOGGING
00004000 l       *ABS*	00000000 PSP_CNFG_FP_REGISTERS_EXIST
00000000 l       *ABS*	00000000 PSP_CNFG
00000002 l       *ABS*	00000000 FP_TASK_MASK
00000200 l       *ABS*	00000000 FP_CONTEXT_SAVED_MASK
0000fdff l       *ABS*	00000000 FP_CONTEXT_CLEAR_MASK
00001000 l       *ABS*	00000000 PREEMPTION_DISABLED
00000000 l       *ABS*	00000000 STORE_ALL_REGISTERS
000000aa l       *ABS*	00000000 SVC_MQX_FN
00014dde l       .text	00000000 sched_internal
00014da6 l       .text	00000000 _sched_check_scheduler_internal_end
00014de0 l       .text	00000000 find_noempty_que
00014df6 l       .text	00000000 switch_task
00014dec l       .text	00000000 no_one_to_run
00014e34 l       .text	00000000 rest_of_stack_frame_restore
00014e24 l       .text	00000000 return_from_interrupt
00014e58 l       .text	00000000 move_pc_at_the_start_of_stackframe
00014e70 l       .text	00000000 _mqx_api_call_end
00014eea l       .text	00000000 _isr_skip_run_default1
00014f60 l       .text	00000000 _isr_run_default
00014ef4 l       .text	00000000 _int_kernel_isr_vect_ok
00014f00 l       .text	00000000 _isr_execute
00014f06 l       .text	00000000 _int_kernel_isr_epilog
00014f0a l       .text	00000000 _int_kernel_isr_return_internal
00014f58 l       .text	00000000 _isr_return_end
00014fae l       .text	00000000 _mem_test_and_set_0x80
00014fb0 l       .text	00000000 _mem_test_and_set_pop
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 PE_LDD.c
00000000 l    df *ABS*	00000000 
00000400 l       *ABS*	00000000 __stack_size
00000000 l       *UND*	00000000 _fstat
1fffe08c l       .bss	00000000 __bss_start__
1fffe000 l       .data	00000000 _sdata
00000000 l       *UND*	00000000 _isatty
00000000 l       *UND*	00000000 __libc_fini_array
00015004 l       .fini_array	00000000 ___ROM_AT
00000000 l       *ABS*	00000000 __heap_size
00000000 l       *UND*	00000000 _printf_float
20003bbc l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 __call_exitprocs
00000000 l       *UND*	00000000 _lseek
00000000 l       *UND*	00000000 software_init_hook
00015000 l       .init_array	00000000 __init_array_end
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 atexit
00014ffc l       .init_array	00000000 __preinit_array_end
20006000 l       *ABS*	00000000 _estack
20006000 l       *ABS*	00000000 __stack
00000000 l       *UND*	00000000 _write
1fffe08c l       .data	00000000 _edata
20003bd4 l       ._user_heap_stack	00000000 _end
00000000 l       *UND*	00000000 _read
00014ffc l       .init_array	00000000 __init_array_start
00000000 l       *UND*	00000000 _exit
00014ffc l       .init_array	00000000 __preinit_array_start
00000000 l       *UND*	00000000 _close
0000fba0 g     F .text	00000094 decode
20003bd4 g       ._user_heap_stack	00000000 __HeapBase
000007e8 g     F .text	00000012 .hidden __aeabi_dcmple
0001459e g     F .text	00000010 strcpy
2000042c g     O .bss	00000010 I2C_Buf
00010b30 g     F .text	00000038 _task_set_error
20003bb8 g     O .bss	00000004 tmp
00010b68 g     F .text	00000220 _task_init_internal
0001472c g     O .text	00000004 _mqxlite_version_number
0001041c g     F .text	00000064 _lwsem_create
0000223c g     F .text	00000088 .hidden __eqdf2
00014f64 g     F .text	00000000 _psp_exception_return
200005ec g     O .bss	00000018 thisSV_1DOF_P_BASIC
200025bc g     O .bss	0000028c Main_task_stack
0000b5e0 g     F .text	00000608 fUpdateCalibration7EIG
0000c808 g     F .text	000000a0 f3x3matrixDetA
00014ffc g       .text	00000000 __exception_table_end__
0001196c g     F .text	00000054 system_timer_init
00010124 g     F .text	0000004c _int_init
0000d000 g     F .text	000000d8 Main_task
00011410 g     F .text	00000168 I2C_Interrupt
0000f9f8 g     F .text	00000002 UserHighFrequencyTaskRun
00010480 g     F .text	000000b4 _lwsem_post
20003bd4 g       ._user_heap_stack	00000000 __heap_addr
00002d9c g     F .text	00000014 I2C_OnMasterBlockReceived
1fffe294 g     O .bss	00000001 SR_lock
00012018 g     F .text	00000098 init_distantio
0001245c g     F .text	00000110 send_variables
0000fd5c g     F .text	000000f0 _mem_zero
00014fca g     F .text	00000000 __enable_interrupt
0000ffa8 g     F .text	00000044 _psp_build_stack_frame
00011954 g     F .text	00000010 LED_RED_SetVal
0000d6ac g     F .text	0000006c f3DOFMagnetometerMatrixWin8
0000f9f4 g     F .text	00000002 UserMediumFrequencyTaskInit
000126bc g     F .text	00000350 powf
00014ffc g       .init_array	00000000 __exidx_end
000022c4 g     F .text	000000e0 .hidden __gtdf2
00014570 g     F .text	0000000c __errno
00004ac0 g     F .text	000001a8 fRun_6DOF_GB_BASIC
20000604 g     O .bss	00000034 thisAccel
0000e028 g     F .text	000000f4 fNEDAnglesDegFromRotationMatrix
000134c8 g     F .text	00000314 __ieee754_rem_pio2f
20002848 g     O .bss	0000048c RdSensData_task_stack
00014ffc g       .text	00000000 _etext
0000d5d4 g     F .text	0000006c f3DOFMagnetometerMatrixNED
000007b8 g     F .text	00000010 .hidden __aeabi_cdcmple
00000898 g     F .text	000002f8 .hidden __aeabi_fadd
00011d70 g     F .text	00000108 UART_Init
00010534 g     F .text	00000098 _lwsem_wait
20000638 g     O .bss	000000a4 thisSV_3DOF_B_BASIC
00000000 g     O .interrupts	000000c0 __vect_table
00011164 g     F .text	00000010 _time_set_hwticks_per_tick
0000f128 g     F .text	0000006c Fusion_Init
00012a0c g     F .text	000000ac sqrtf
2000043c g     O .bss	00000004 iCommand
00011820 g     F .text	0000001a I2C_GetError
20002cd4 g     O .bss	00000254 _mqx_kernel_data_struct
0001457c g     F .text	00000012 memcpy
0000c650 g     F .text	0000003e f3x3matrixAeqMinusA
000007a8 g     F .text	00000020 .hidden __aeabi_cdrcmple
00011ea4 g     F .text	0000004c UART_SendBlock
00003f64 g     F .text	000006e8 fInit_9DOF_GBY_KALMAN
00000870 g     F .text	00000012 .hidden __aeabi_fcmpgt
00014f9c g     F .text	00000000 _mem_test_and_set
000119d4 g     F .text	0000007c RNG1_Put
000023a4 g     F .text	000000cc .hidden __ltdf2
00000000 g       .interrupts	00000000 __VECTOR_TABLE_START
00014ffc g       .init_array	00000000 __DTOR_END__
000038ac g     F .text	000000d4 FXAS21000_Init
20000440 g     O .bss	00000100 sUARTOutputBuf
20002f28 g     O .bss	00000110 mqx_interrupt_stack
00003a10 g     F .text	0000012c FXOS8700_ReadData
0000fd48 g     F .text	00000014 _int_set_vector_table
000004a4 g     F .text	0000010a .hidden __udivsi3
1fffe08c g       .bss	00000000 __START_BSS
00001514 g     F .text	00000090 .hidden __aeabi_i2f
0000fe4c g     F .text	00000012 _psp_int_init
00000ee8 g     F .text	0000008a .hidden __lesf2
0000e78c g     F .text	000000b8 fRotationVectorDegFromQuaternion
0001135c g     F .text	00000018 FTM_Interrupt
20003bd4 g       ._user_heap_stack	00000000 __HeapLimit
00014450 g     F .text	00000040 __fpclassifyf
00011944 g     F .text	00000010 LED_RED_ClrVal
0000f4e0 g     F .text	000002e0 Fusion_Run
000105cc g     F .text	0000000c _mqx_set_cpu_type
00010f4c g     F .text	000000cc _time_delay_for
00000470 g     F .text	00000000 __boot
000143a0 g     F .text	00000014 finitef
0001004c g     F .text	00000018 _int_disable
0000fd34 g     F .text	00000014 _psp_int_install
0000ed40 g     F .text	0000002a fLPFScalar
00011c2c g     F .text	00000048 TestPin_MagCal_Time_Init
0000f194 g     F .text	0000034c RdSensData_Run
00014398 g     F .text	00000006 fabsf
00014ffc g       .text	00000000 __exception_table_start__
000007d4 g     F .text	00000012 .hidden __aeabi_dcmplt
00010794 g     F .text	00000098 _mqxlite
000032d0 g     F .text	00000384 fatan2_deg
000100c0 g     F .text	00000064 _int_install_isr
000118e8 g     F .text	0000000c LED_GREEN_SetVal
000106d4 g     F .text	000000c0 _mqxlite_init
00001bf4 g     F .text	00000648 .hidden __aeabi_ddiv
0000fcb4 g     F .text	00000080 __thumb_startup
00000e00 g     F .text	00000054 .hidden __nesf2
00014ffc g       .init_array	00000000 __exidx_start
00011640 g     F .text	000000bc I2C_MasterSendBlock
00010064 g     F .text	0000001c _int_enable
00014fda g     F .text	00000000 __get_CONTROL
1fffe026 g     O .data	00000001 __fdlib_version
00014150 g     F .text	000000f4 __kernel_sinf
00014730 g     O .text	00000004 _mqx_version_number
0000da18 g     F .text	00000304 feCompassAndroid
0000fcb0  w    F .text	00000002 __init_user
000118f4 g     F .text	0000000c LED_GREEN_NegVal
200006dc g     O .bss	00000b58 thisMagBuffer
000120b0 g     F .text	0000006c register_var
00011900 g     F .text	00000044 LED_RED_Init
200025ac g     O .bss	00000002 decodingIndex
00012ab8 g     F .text	000002d0 __ieee754_acosf
00014d84 g     F .text	00000000 _sched_start_internal
00014d6c g     F .text	00000000 _init
00011578 g     F .text	000000c8 I2C_Init
00002c0c g     F .text	00000120 .hidden __aeabi_d2f
00011bc4 g     F .text	00000048 TestPin_KF_Time_Init
1fffe004 g     O .data	00000014 mqx_task_stack_pointers
000011d8 g     F .text	000002fc .hidden __aeabi_fsub
00014fb2 g     F .text	00000000 __get_PSP
00011178 g     F .text	00000124 __init_hardware
00014728 g     O .text	00000004 _mqx_vendor
00014254 g     F .text	00000144 rint
00002d68 g     F .text	0000001c FTM_OnCounterRestart
0000fab8 g     F .text	00000014 sendBytes
00014fd2 g     F .text	00000000 __get_LR
0000ed6c g     F .text	00000148 qAeqBxC
000105d8 g     F .text	000000fc _mqx_init_kernel_data_internal
00000884 g     F .text	00000012 .hidden __aeabi_fcmpge
200025ae g     O .bss	00000001 protocol_state
00014fd6 g     F .text	00000000 __get_PC
000113f0 g     F .text	00000020 FTM_SetPeriodTicks
0000efec g     F .text	000000d4 fqAeqNormqA
00011a50 g     F .text	00000084 RNG1_Get
00013894 g     F .text	00000194 __kernel_cosf
000047d4 g     F .text	00000160 fRun_3DOF_B_BASIC
000031b0 g     F .text	00000120 fatan_deg
0000cd40 g     F .text	000002be fmatrixAeqInvA
00011af0 g     F .text	0000001c RNG1_Init
00000e54 g     F .text	00000092 .hidden __gtsf2
000148c0 g     O .text	00000024 MQX_init_struct
0000fb18 g     F .text	00000088 encode
20000540 g     O .bss	00000020 sUARTInputBuf
000015a4 g     F .text	00000650 .hidden __aeabi_dadd
20001234 g     O .bss	000000a4 thisSV_3DOF_G_BASIC
000023a4 g     F .text	000000cc .hidden __ledf2
200025af g     O .bss	00000001 escape_state
0000085c g     F .text	00000012 .hidden __aeabi_fcmple
0000bbe8 g     F .text	000009cc fUpdateCalibration10EIG
000101f4 g     F .text	00000134 _lwevent_set
00014d4c g     O .text	00000020 __sf_fake_stderr
00011018 g     F .text	00000138 _time_notify_kernel
0000fff0 g     F .text	00000010 _mqx_idle_task
200012d8 g     O .bss	0000001c thisPressure
00000000  w      *UND*	00000000 __deregister_frame_info
00011c74 g     F .text	00000010 TestPin_MagCal_Time_ClrVal
00014da8 g     F .text	00000000 _sched_execute_scheduler_internal
000005c4 g     F .text	00000000 .hidden __aeabi_idiv
0000f904 g     F .text	00000018 on_protocol_encoded_frame
0000a79c g     F .text	00000478 iUpdateMagnetometerBuffer
0001211c g     F .text	0000002c start_group
0000c8a8 g     F .text	00000498 eigencompute
00014ffc g       .init_array	00000000 __CTOR_LIST__
00003b3c g     F .text	000000f0 FXAS21000_ReadData
000007fc g     F .text	00000012 .hidden __aeabi_dcmpgt
00002d2c g     F .text	0000003c .hidden __clzsi2
00010080 g     F .text	00000040 _int_get_isr_data
0000d454 g     F .text	00000180 f3DOFTiltWin8
0000d640 g     F .text	0000006c f3DOFMagnetometerMatrixAndroid
00000810 g     F .text	00000012 .hidden __aeabi_dcmpge
00011ae0 g     F .text	00000010 RNG1_NofFreeElements
1fffe000 g     O .data	00000004 _mqx_kernel_data
0000eeb4 g     F .text	00000138 qAeqAxB
200025b4 g     O .bss	00000004 _tad_task_at_flag
00002470 g     F .text	000006f4 .hidden __aeabi_dsub
00011854 g     F .text	00000044 LED_BLUE_Init
00010328 g     F .text	000000f4 _lwevent_wait_for
20000560 g     O .bss	0000007c mqxglobals
00011b0c g     F .text	0000001c SystemTimer1_Interrupt
00011b9c g     F .text	00000008 SystemTimer1_GetInputFrequency
00000400 g     O .cfmprotect	00000010 _cfm
200025b0 g     O .bss	00000001 ESC_
200025b1 g     O .bss	00000001 EOF_
00010170 g     F .text	00000084 _lwevent_create
00011f04 g     F .text	00000114 crc16
00000000 g       .interrupts	00000000 __vector_table
000014d4 g     F .text	00000040 .hidden __aeabi_f2iz
00014d90 g     F .text	00000000 _sched_check_scheduler_internal
00000e00 g     F .text	00000054 .hidden __eqsf2
00011374 g     F .text	0000007c FTM_Init
20006000 g       *ABS*	00000000 __SP_INIT
0000d31c g     F .text	00000138 f3DOFTiltAndroid
00011964 g     F .text	00000008 SystemTimer1_OnCounterRestart
00002d84 g     F .text	00000002 UART_OnBlockSent
20003038 g     O .bss	000000d0 mqx_static_ready_queue
00011150 g     F .text	00000014 _time_set_hwtick_function
00000b90 g     F .text	00000270 .hidden __aeabi_fdiv
00011e78 g     F .text	0000002c UART_ReceiveBlock
0000f7c0 g     F .text	0000013c MagCal_Run
0000adac g     F .text	00000834 fUpdateCalibration4INV
0001129c g     F .text	000000c0 PE_low_level_init
200012f4 g     O .bss	000000ac thisSV_6DOF_GB_BASIC
000007a4  w    F .text	00000002 .hidden __aeabi_ldiv0
0000a6c0 g     F .text	000000dc fInitMagCalibration
0000fc34 g     F .text	00000078 __copy_rom_sections_to_ram
0000facc g     F .text	0000004c init_protocol
0000fedc g     F .text	0000006c _psp_set_kernel_disable_level
0000e210 g     F .text	00000184 fWin8AnglesDegFromRotationMatrix
00012d88 g     F .text	00000740 __ieee754_powf
20003108 g     O .bss	00000168 mqx_static_isr_table
0000f9f0 g     F .text	00000002 UserHighFrequencyTaskInit
00011ba4 g     F .text	00000014 SystemTimer1_GetPeriodTicks
200025b2 g     O .bss	00000001 SOF_
200013a0 g     O .bss	00000418 thisMagCal
00014498 g     F .text	000000cc scalbnf
00014d0c g     O .text	00000020 __sf_fake_stdin
0000e394 g     F .text	00000194 fQuaternionFromRotationVectorDeg
200025b8 g     O .bss	00000001 SR_reg
0001458e g     F .text	00000010 memset
000137dc g     F .text	000000b8 __ieee754_sqrtf
0000ac14 g     F .text	00000198 fInvertMagCal
0000c5b4 g     F .text	0000000c main
0000c5f0 g     F .text	00000060 f3x3matrixAeqAxScalar
0000e528 g     F .text	00000144 fQuaternionFromRotationMatrix
00014d8a g     F .text	00000000 _sched_run_internal
00014fc4 g     F .text	00000000 __get_PSR
00000ee8 g     F .text	0000008a .hidden __ltsf2
000004a4 g     F .text	00000000 .hidden __aeabi_uidiv
0000c5c0 g     F .text	0000001a f3x3matrixAeqI
00014244 g     F .text	00000004 matherr
00011174 g     F .text	00000004 Cpu_Interrupt
00002db4 g     F .text	00000016 UART_OnBlockReceived
00010f3c g     F .text	00000010 _task_set_error_td_internal
00011c1c g     F .text	00000010 TestPin_KF_Time_SetVal
1fffe2d8 g     O .bss	00000024 PE_LDD_DeviceDataList
0000ffec g     F .text	00000002 _psp_destroy_stack_frame
20003270 g     O .bss	00000130 mqx_idle_task_stack
00010f00 g     F .text	00000014 _task_fill_stack_internal
200017b8 g     O .bss	00000054 thisGyro
00010d88 g     F .text	00000178 _task_create_at
0000082c g     F .text	00000010 .hidden __aeabi_cfcmple
000005c4 g     F .text	000001cc .hidden __divsi3
0001183c g     F .text	00000018 I2C_CheckBus
00014ffc g       .init_array	00000000 __CTOR_END__
00011ad4 g     F .text	0000000c RNG1_NofElements
200033a0 g     O .bss	0000048c Fusion_task_stack
00014fb8 g     F .text	00000000 __get_MSP
00011b88 g     F .text	00000014 SystemTimer1_Enable
00014ffc g       .init_array	00000000 __DTOR_LIST__
0000d718 g     F .text	000002fe feCompassNED
20003bbc g       .bss	00000000 __END_BSS
00002db0 g     F .text	00000002 UART_OnTxComplete
00004690 g     F .text	00000144 fRun_3DOF_G_BASIC
0000223c g     F .text	00000088 .hidden __nedf2
0000f0c0 g     F .text	00000010 fqAeq1
00012618 g     F .text	000000a4 acosf
00014d78 g     F .text	00000000 _fini
000119c0 g     F .text	00000014 system_timer_start
00014564 g     F .text	0000000c copysignf
00015090 g       .fini_array	00000000 _romp_at
00000e54 g     F .text	00000092 .hidden __gesf2
0000e11c g     F .text	000000f4 fAndroidAnglesDegFromRotationMatrix
00010834 g     F .text	00000140 _task_exit_function_internal
00014490 g     F .text	00000008 nanf
1fffe088 g     O .data	00000004 _impure_ptr
200005dc g     O .bss	00000010 globals
0000083c g     F .text	0000000c .hidden __aeabi_fcmpeq
00011c84 g     F .text	00000010 TestPin_MagCal_Time_SetVal
00011c94 g     F .text	000000dc UART_Interrupt
00000f74 g     F .text	00000264 .hidden __aeabi_fmul
1fffe000 g       .mtb	00000000 _mtb_end
00000824 g     F .text	00000018 .hidden __aeabi_cfrcmple
00014ffc g       .text	00000000 __sinit__
0000f9fc g     F .text	000000bc UserMediumFrequencyTaskRun
00014fbe g     F .text	00000000 __set_MSP
000116fc g     F .text	000000b8 I2C_MasterReceiveBlock
00003980 g     F .text	00000090 MPL3115_ReadData
00012594 g     F .text	00000084 sinf
00014e72 g     F .text	00000000 _task_block
00014248 g     F .text	0000000c nan
0000e66c g     F .text	0000011e fRotationMatrixFromQuaternion
00000848 g     F .text	00000012 .hidden __aeabi_fcmplt
00015090 g       .fini_array	00000000 __S_romp
00011ef0 g     F .text	00000014 UART_GetTxCompleteStatus
00012148 g     F .text	00000314 distantio_decode
000005b0 g     F .text	00000012 .hidden __aeabi_uidivmod
0000d0d8 g     F .text	00000040 RdSensData_task
000007c8 g     F .text	0000000c .hidden __aeabi_dcmpeq
0000f8fc g     F .text	00000008 on_protocol_decoded_frame
00004c68 g     F .text	000010a2 fRun_6DOF_GY_KALMAN
00011b28 g     F .text	00000060 SystemTimer1_Init
00003654 g     F .text	000000d4 MPL3115_Init
0000d1ec g     F .text	00000130 f3DOFTiltNED
0000dd1c g     F .text	0000030c feCompassWin8
0000c5dc g     F .text	00000014 f3x3matrixAeqScalar
00003728 g     F .text	00000184 FXOS8700_Init
00002d88 g     F .text	00000014 I2C_OnMasterBlockSent
00014fce g     F .text	00000000 __disable_interrupt
00014724 g     O .text	00000004 _mqx_path
00010974 g     F .text	000001bc _task_destroy
00004934 g     F .text	0000018c fRun_3DOF_Y_BASIC
00002dcc g     F .text	00000158 fasin_deg
0000fea0 g     F .text	0000003c _psp_normalize_ticks
0000fcac  w    F .text	00000002 __init_registers
0000082c g     F .text	00000010 .hidden __aeabi_cfcmpeq
1fffe000 g       .mtb	00000000 _mtb_start
00014d2c g     O .text	00000020 __sf_fake_stdout
0000c690 g     F .text	00000176 f3x3matrixAeqInvSymB
00011bb8 g     F .text	0000000c SystemTimer1_GetCounterValue
00011c0c g     F .text	00000010 TestPin_KF_Time_ClrVal
000007a4  w    F .text	00000002 .hidden __aeabi_idiv0
0000f91c g     F .text	000000d4 UserStartup
0001082c g     F .text	00000008 _mqx_exit
2000382c g     O .bss	0000038c MagCal_task_stack
0000e844 g     F .text	000004fc fLPFOrientationQuaternion
0000d118 g     F .text	00000090 Fusion_task
00013a28 g     F .text	00000728 __kernel_rem_pio2f
0000d1a8 g     F .text	00000044 MagCal_task
00014eba g     F .text	00000000 _int_kernel_isr
000145ae g     F .text	0000000e strlen
000007b8 g     F .text	00000010 .hidden __aeabi_cdcmpeq
000022c4 g     F .text	000000e0 .hidden __gedf2
00005d0c g     F .text	000049b4 fRun_9DOF_GBY_KALMAN
00003c2c g     F .text	00000338 fInit_6DOF_GY_KALMAN
0000f0d0 g     F .text	00000058 RdSensData_Init
000143b4 g     F .text	0000009c floorf
00002b64 g     F .text	000000a8 .hidden __aeabi_f2d
2000180c g     O .bss	00000838 thisSV_9DOF_GBY_KALMAN
000117b4 g     F .text	0000006c I2C_SelectSlaveDevice
00011898 g     F .text	00000010 LED_BLUE_SetVal
00000000  w      *UND*	00000000 _Jv_RegisterClasses
20002044 g     O .bss	00000490 thisSV_6DOF_GY_KALMAN
0000464c g     F .text	00000044 fRun_1DOF_P_BASIC
0000ff48 g     F .text	00000060 _psp_init_readyqs
0000fe60 g     F .text	00000040 _psp_add_ticks
00010000 g     F .text	0000004c _int_default_isr
00002f24 g     F .text	0000028c facos_deg
00010f14 g     F .text	00000028 _task_ready_internal
00000790 g     F .text	00000012 .hidden __aeabi_idivmod
000118a8 g     F .text	00000040 LED_GREEN_Init
0000008c g       *ABS*	00000000 ___data_size
200024d4 g     O .bss	00000058 thisMag
00000000  w      *UND*	00000000 __register_frame_info
0001256c g     F .text	00000028 send_alive
2000252c g     O .bss	00000080 thisSV_3DOF_Y_BASIC
00014e70 g     F .text	00000000 _mqx_api_call
00014834 g     O .text	0000008c MQX_template_list



Disassembly of section .text:

00000410 <__do_global_dtors_aux>:
$t():
     410:	b510      	push	{r4, lr}
     412:	4c06      	ldr	r4, [pc, #24]	; (42c <__do_global_dtors_aux+0x1c>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	2b00      	cmp	r3, #0
     418:	d107      	bne.n	42a <__do_global_dtors_aux+0x1a>
     41a:	4b05      	ldr	r3, [pc, #20]	; (430 <__do_global_dtors_aux+0x20>)
     41c:	2b00      	cmp	r3, #0
     41e:	d002      	beq.n	426 <__do_global_dtors_aux+0x16>
     420:	4804      	ldr	r0, [pc, #16]	; (434 <__do_global_dtors_aux+0x24>)
     422:	e000      	b.n	426 <__do_global_dtors_aux+0x16>
     424:	bf00      	nop
     426:	2301      	movs	r3, #1
     428:	7023      	strb	r3, [r4, #0]
     42a:	bd10      	pop	{r4, pc}
$d():
     42c:	1fffe08c 	.word	0x1fffe08c
     430:	00000000 	.word	0x00000000
     434:	00014d6c 	.word	0x00014d6c

00000438 <frame_dummy>:
$t():
     438:	b508      	push	{r3, lr}
     43a:	4b08      	ldr	r3, [pc, #32]	; (45c <frame_dummy+0x24>)
     43c:	2b00      	cmp	r3, #0
     43e:	d003      	beq.n	448 <frame_dummy+0x10>
     440:	4807      	ldr	r0, [pc, #28]	; (460 <frame_dummy+0x28>)
     442:	4908      	ldr	r1, [pc, #32]	; (464 <frame_dummy+0x2c>)
     444:	e000      	b.n	448 <frame_dummy+0x10>
     446:	bf00      	nop
     448:	4807      	ldr	r0, [pc, #28]	; (468 <frame_dummy+0x30>)
     44a:	6803      	ldr	r3, [r0, #0]
     44c:	2b00      	cmp	r3, #0
     44e:	d100      	bne.n	452 <frame_dummy+0x1a>
     450:	bd08      	pop	{r3, pc}
     452:	4b06      	ldr	r3, [pc, #24]	; (46c <frame_dummy+0x34>)
     454:	2b00      	cmp	r3, #0
     456:	d0fb      	beq.n	450 <frame_dummy+0x18>
     458:	4798      	blx	r3
     45a:	e7f9      	b.n	450 <frame_dummy+0x18>
$d():
     45c:	00000000 	.word	0x00000000
     460:	00014d6c 	.word	0x00014d6c
     464:	1fffe090 	.word	0x1fffe090
     468:	1fffe08c 	.word	0x1fffe08c
     46c:	00000000 	.word	0x00000000

00000470 <__boot>:
$t():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:72

 ASM_PUBLIC_BEGIN(__boot)
 ASM_PUBLIC_FUNC(__boot)
ASM_LABEL(__boot)
/* Disable interrupts and clear pending flags */
        ldr r0, =0xFFFFFFFF
     470:	4809      	ldr	r0, [pc, #36]	; (498 <__boot+0x28>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:74
        /* NVIC_ICER - Interrupt Clear-Enable Register     */
        ldr r1, =NVIC_ICER
     472:	490a      	ldr	r1, [pc, #40]	; (49c <__boot+0x2c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:75
        str r0, [r1]
     474:	6008      	str	r0, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:77
        /* NVIC_ICPR - Interrupt Clear-Pending Register */
        ldr r1, =NVIC_ICPR
     476:	490a      	ldr	r1, [pc, #40]	; (4a0 <__boot+0x30>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:78
        str r0, [r1]
     478:	6008      	str	r0, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:81

/* Prepare process stack pointer */
        mrs r0, MSP
     47a:	f3ef 8008 	mrs	r0, MSP
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:82
        msr PSP, r0
     47e:	f380 8809 	msr	PSP, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:85

/* Switch to proccess stack (PSP) */
        mrs r0, CONTROL
     482:	f3ef 8014 	mrs	r0, CONTROL
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:86
        movs r1, #0x2
     486:	2102      	movs	r1, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:87
        orrs r0, r0, r1
     488:	4308      	orrs	r0, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:88
        msr CONTROL, r0
     48a:	f380 8814 	msr	CONTROL, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:89
        isb
     48e:	f3bf 8f6f 	isb	sy
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:95


#if defined(__CODEWARRIOR__) || defined(__GNUC__)
        /* call startup from EWL library */
        ASM_EXTERN(__thumb_startup)
        bl ASM_PREFIX(__thumb_startup)
     492:	f00f fc0f 	bl	fcb4 <__thumb_startup>
     496:	46c0      	nop			; (mov r8, r8)
$d():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:72

 ASM_PUBLIC_BEGIN(__boot)
 ASM_PUBLIC_FUNC(__boot)
ASM_LABEL(__boot)
/* Disable interrupts and clear pending flags */
        ldr r0, =0xFFFFFFFF
     498:	ffffffff 	.word	0xffffffff
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:74
        /* NVIC_ICER - Interrupt Clear-Enable Register     */
        ldr r1, =NVIC_ICER
     49c:	e000e180 	.word	0xe000e180
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:77
        str r0, [r1]
        /* NVIC_ICPR - Interrupt Clear-Pending Register */
        ldr r1, =NVIC_ICPR
     4a0:	e000e280 	.word	0xe000e280

000004a4 <__aeabi_uidiv>:
__udivsi3():
     4a4:	2200      	movs	r2, #0
     4a6:	0843      	lsrs	r3, r0, #1
     4a8:	428b      	cmp	r3, r1
     4aa:	d374      	bcc.n	596 <__aeabi_uidiv+0xf2>
     4ac:	0903      	lsrs	r3, r0, #4
     4ae:	428b      	cmp	r3, r1
     4b0:	d35f      	bcc.n	572 <__aeabi_uidiv+0xce>
     4b2:	0a03      	lsrs	r3, r0, #8
     4b4:	428b      	cmp	r3, r1
     4b6:	d344      	bcc.n	542 <__aeabi_uidiv+0x9e>
     4b8:	0b03      	lsrs	r3, r0, #12
     4ba:	428b      	cmp	r3, r1
     4bc:	d328      	bcc.n	510 <__aeabi_uidiv+0x6c>
     4be:	0c03      	lsrs	r3, r0, #16
     4c0:	428b      	cmp	r3, r1
     4c2:	d30d      	bcc.n	4e0 <__aeabi_uidiv+0x3c>
     4c4:	22ff      	movs	r2, #255	; 0xff
     4c6:	0209      	lsls	r1, r1, #8
     4c8:	ba12      	rev	r2, r2
     4ca:	0c03      	lsrs	r3, r0, #16
     4cc:	428b      	cmp	r3, r1
     4ce:	d302      	bcc.n	4d6 <__aeabi_uidiv+0x32>
     4d0:	1212      	asrs	r2, r2, #8
     4d2:	0209      	lsls	r1, r1, #8
     4d4:	d065      	beq.n	5a2 <__aeabi_uidiv+0xfe>
     4d6:	0b03      	lsrs	r3, r0, #12
     4d8:	428b      	cmp	r3, r1
     4da:	d319      	bcc.n	510 <__aeabi_uidiv+0x6c>
     4dc:	e000      	b.n	4e0 <__aeabi_uidiv+0x3c>
     4de:	0a09      	lsrs	r1, r1, #8
     4e0:	0bc3      	lsrs	r3, r0, #15
     4e2:	428b      	cmp	r3, r1
     4e4:	d301      	bcc.n	4ea <__aeabi_uidiv+0x46>
     4e6:	03cb      	lsls	r3, r1, #15
     4e8:	1ac0      	subs	r0, r0, r3
     4ea:	4152      	adcs	r2, r2
     4ec:	0b83      	lsrs	r3, r0, #14
     4ee:	428b      	cmp	r3, r1
     4f0:	d301      	bcc.n	4f6 <__aeabi_uidiv+0x52>
     4f2:	038b      	lsls	r3, r1, #14
     4f4:	1ac0      	subs	r0, r0, r3
     4f6:	4152      	adcs	r2, r2
     4f8:	0b43      	lsrs	r3, r0, #13
     4fa:	428b      	cmp	r3, r1
     4fc:	d301      	bcc.n	502 <__aeabi_uidiv+0x5e>
     4fe:	034b      	lsls	r3, r1, #13
     500:	1ac0      	subs	r0, r0, r3
     502:	4152      	adcs	r2, r2
     504:	0b03      	lsrs	r3, r0, #12
     506:	428b      	cmp	r3, r1
     508:	d301      	bcc.n	50e <__aeabi_uidiv+0x6a>
     50a:	030b      	lsls	r3, r1, #12
     50c:	1ac0      	subs	r0, r0, r3
     50e:	4152      	adcs	r2, r2
     510:	0ac3      	lsrs	r3, r0, #11
     512:	428b      	cmp	r3, r1
     514:	d301      	bcc.n	51a <__aeabi_uidiv+0x76>
     516:	02cb      	lsls	r3, r1, #11
     518:	1ac0      	subs	r0, r0, r3
     51a:	4152      	adcs	r2, r2
     51c:	0a83      	lsrs	r3, r0, #10
     51e:	428b      	cmp	r3, r1
     520:	d301      	bcc.n	526 <__aeabi_uidiv+0x82>
     522:	028b      	lsls	r3, r1, #10
     524:	1ac0      	subs	r0, r0, r3
     526:	4152      	adcs	r2, r2
     528:	0a43      	lsrs	r3, r0, #9
     52a:	428b      	cmp	r3, r1
     52c:	d301      	bcc.n	532 <__aeabi_uidiv+0x8e>
     52e:	024b      	lsls	r3, r1, #9
     530:	1ac0      	subs	r0, r0, r3
     532:	4152      	adcs	r2, r2
     534:	0a03      	lsrs	r3, r0, #8
     536:	428b      	cmp	r3, r1
     538:	d301      	bcc.n	53e <__aeabi_uidiv+0x9a>
     53a:	020b      	lsls	r3, r1, #8
     53c:	1ac0      	subs	r0, r0, r3
     53e:	4152      	adcs	r2, r2
     540:	d2cd      	bcs.n	4de <__aeabi_uidiv+0x3a>
     542:	09c3      	lsrs	r3, r0, #7
     544:	428b      	cmp	r3, r1
     546:	d301      	bcc.n	54c <__aeabi_uidiv+0xa8>
     548:	01cb      	lsls	r3, r1, #7
     54a:	1ac0      	subs	r0, r0, r3
     54c:	4152      	adcs	r2, r2
     54e:	0983      	lsrs	r3, r0, #6
     550:	428b      	cmp	r3, r1
     552:	d301      	bcc.n	558 <__aeabi_uidiv+0xb4>
     554:	018b      	lsls	r3, r1, #6
     556:	1ac0      	subs	r0, r0, r3
     558:	4152      	adcs	r2, r2
     55a:	0943      	lsrs	r3, r0, #5
     55c:	428b      	cmp	r3, r1
     55e:	d301      	bcc.n	564 <__aeabi_uidiv+0xc0>
     560:	014b      	lsls	r3, r1, #5
     562:	1ac0      	subs	r0, r0, r3
     564:	4152      	adcs	r2, r2
     566:	0903      	lsrs	r3, r0, #4
     568:	428b      	cmp	r3, r1
     56a:	d301      	bcc.n	570 <__aeabi_uidiv+0xcc>
     56c:	010b      	lsls	r3, r1, #4
     56e:	1ac0      	subs	r0, r0, r3
     570:	4152      	adcs	r2, r2
     572:	08c3      	lsrs	r3, r0, #3
     574:	428b      	cmp	r3, r1
     576:	d301      	bcc.n	57c <__aeabi_uidiv+0xd8>
     578:	00cb      	lsls	r3, r1, #3
     57a:	1ac0      	subs	r0, r0, r3
     57c:	4152      	adcs	r2, r2
     57e:	0883      	lsrs	r3, r0, #2
     580:	428b      	cmp	r3, r1
     582:	d301      	bcc.n	588 <__aeabi_uidiv+0xe4>
     584:	008b      	lsls	r3, r1, #2
     586:	1ac0      	subs	r0, r0, r3
     588:	4152      	adcs	r2, r2
     58a:	0843      	lsrs	r3, r0, #1
     58c:	428b      	cmp	r3, r1
     58e:	d301      	bcc.n	594 <__aeabi_uidiv+0xf0>
     590:	004b      	lsls	r3, r1, #1
     592:	1ac0      	subs	r0, r0, r3
     594:	4152      	adcs	r2, r2
     596:	1a41      	subs	r1, r0, r1
     598:	d200      	bcs.n	59c <__aeabi_uidiv+0xf8>
     59a:	4601      	mov	r1, r0
     59c:	4152      	adcs	r2, r2
     59e:	4610      	mov	r0, r2
     5a0:	4770      	bx	lr
     5a2:	e7ff      	b.n	5a4 <__aeabi_uidiv+0x100>
     5a4:	b501      	push	{r0, lr}
     5a6:	2000      	movs	r0, #0
     5a8:	f000 f8fc 	bl	7a4 <__aeabi_idiv0>
     5ac:	bd02      	pop	{r1, pc}
     5ae:	46c0      	nop			; (mov r8, r8)

000005b0 <__aeabi_uidivmod>:
__aeabi_uidivmod():
     5b0:	2900      	cmp	r1, #0
     5b2:	d0f7      	beq.n	5a4 <__aeabi_uidiv+0x100>
     5b4:	b503      	push	{r0, r1, lr}
     5b6:	f7ff ff75 	bl	4a4 <__aeabi_uidiv>
     5ba:	bc0e      	pop	{r1, r2, r3}
     5bc:	4342      	muls	r2, r0
     5be:	1a89      	subs	r1, r1, r2
     5c0:	4718      	bx	r3
     5c2:	46c0      	nop			; (mov r8, r8)

000005c4 <__aeabi_idiv>:
__divsi3():
     5c4:	4603      	mov	r3, r0
     5c6:	430b      	orrs	r3, r1
     5c8:	d47f      	bmi.n	6ca <__aeabi_idiv+0x106>
     5ca:	2200      	movs	r2, #0
     5cc:	0843      	lsrs	r3, r0, #1
     5ce:	428b      	cmp	r3, r1
     5d0:	d374      	bcc.n	6bc <__aeabi_idiv+0xf8>
     5d2:	0903      	lsrs	r3, r0, #4
     5d4:	428b      	cmp	r3, r1
     5d6:	d35f      	bcc.n	698 <__aeabi_idiv+0xd4>
     5d8:	0a03      	lsrs	r3, r0, #8
     5da:	428b      	cmp	r3, r1
     5dc:	d344      	bcc.n	668 <__aeabi_idiv+0xa4>
     5de:	0b03      	lsrs	r3, r0, #12
     5e0:	428b      	cmp	r3, r1
     5e2:	d328      	bcc.n	636 <__aeabi_idiv+0x72>
     5e4:	0c03      	lsrs	r3, r0, #16
     5e6:	428b      	cmp	r3, r1
     5e8:	d30d      	bcc.n	606 <__aeabi_idiv+0x42>
     5ea:	22ff      	movs	r2, #255	; 0xff
     5ec:	0209      	lsls	r1, r1, #8
     5ee:	ba12      	rev	r2, r2
     5f0:	0c03      	lsrs	r3, r0, #16
     5f2:	428b      	cmp	r3, r1
     5f4:	d302      	bcc.n	5fc <__aeabi_idiv+0x38>
     5f6:	1212      	asrs	r2, r2, #8
     5f8:	0209      	lsls	r1, r1, #8
     5fa:	d065      	beq.n	6c8 <__aeabi_idiv+0x104>
     5fc:	0b03      	lsrs	r3, r0, #12
     5fe:	428b      	cmp	r3, r1
     600:	d319      	bcc.n	636 <__aeabi_idiv+0x72>
     602:	e000      	b.n	606 <__aeabi_idiv+0x42>
     604:	0a09      	lsrs	r1, r1, #8
     606:	0bc3      	lsrs	r3, r0, #15
     608:	428b      	cmp	r3, r1
     60a:	d301      	bcc.n	610 <__aeabi_idiv+0x4c>
     60c:	03cb      	lsls	r3, r1, #15
     60e:	1ac0      	subs	r0, r0, r3
     610:	4152      	adcs	r2, r2
     612:	0b83      	lsrs	r3, r0, #14
     614:	428b      	cmp	r3, r1
     616:	d301      	bcc.n	61c <__aeabi_idiv+0x58>
     618:	038b      	lsls	r3, r1, #14
     61a:	1ac0      	subs	r0, r0, r3
     61c:	4152      	adcs	r2, r2
     61e:	0b43      	lsrs	r3, r0, #13
     620:	428b      	cmp	r3, r1
     622:	d301      	bcc.n	628 <__aeabi_idiv+0x64>
     624:	034b      	lsls	r3, r1, #13
     626:	1ac0      	subs	r0, r0, r3
     628:	4152      	adcs	r2, r2
     62a:	0b03      	lsrs	r3, r0, #12
     62c:	428b      	cmp	r3, r1
     62e:	d301      	bcc.n	634 <__aeabi_idiv+0x70>
     630:	030b      	lsls	r3, r1, #12
     632:	1ac0      	subs	r0, r0, r3
     634:	4152      	adcs	r2, r2
     636:	0ac3      	lsrs	r3, r0, #11
     638:	428b      	cmp	r3, r1
     63a:	d301      	bcc.n	640 <__aeabi_idiv+0x7c>
     63c:	02cb      	lsls	r3, r1, #11
     63e:	1ac0      	subs	r0, r0, r3
     640:	4152      	adcs	r2, r2
     642:	0a83      	lsrs	r3, r0, #10
     644:	428b      	cmp	r3, r1
     646:	d301      	bcc.n	64c <__aeabi_idiv+0x88>
     648:	028b      	lsls	r3, r1, #10
     64a:	1ac0      	subs	r0, r0, r3
     64c:	4152      	adcs	r2, r2
     64e:	0a43      	lsrs	r3, r0, #9
     650:	428b      	cmp	r3, r1
     652:	d301      	bcc.n	658 <__aeabi_idiv+0x94>
     654:	024b      	lsls	r3, r1, #9
     656:	1ac0      	subs	r0, r0, r3
     658:	4152      	adcs	r2, r2
     65a:	0a03      	lsrs	r3, r0, #8
     65c:	428b      	cmp	r3, r1
     65e:	d301      	bcc.n	664 <__aeabi_idiv+0xa0>
     660:	020b      	lsls	r3, r1, #8
     662:	1ac0      	subs	r0, r0, r3
     664:	4152      	adcs	r2, r2
     666:	d2cd      	bcs.n	604 <__aeabi_idiv+0x40>
     668:	09c3      	lsrs	r3, r0, #7
     66a:	428b      	cmp	r3, r1
     66c:	d301      	bcc.n	672 <__aeabi_idiv+0xae>
     66e:	01cb      	lsls	r3, r1, #7
     670:	1ac0      	subs	r0, r0, r3
     672:	4152      	adcs	r2, r2
     674:	0983      	lsrs	r3, r0, #6
     676:	428b      	cmp	r3, r1
     678:	d301      	bcc.n	67e <__aeabi_idiv+0xba>
     67a:	018b      	lsls	r3, r1, #6
     67c:	1ac0      	subs	r0, r0, r3
     67e:	4152      	adcs	r2, r2
     680:	0943      	lsrs	r3, r0, #5
     682:	428b      	cmp	r3, r1
     684:	d301      	bcc.n	68a <__aeabi_idiv+0xc6>
     686:	014b      	lsls	r3, r1, #5
     688:	1ac0      	subs	r0, r0, r3
     68a:	4152      	adcs	r2, r2
     68c:	0903      	lsrs	r3, r0, #4
     68e:	428b      	cmp	r3, r1
     690:	d301      	bcc.n	696 <__aeabi_idiv+0xd2>
     692:	010b      	lsls	r3, r1, #4
     694:	1ac0      	subs	r0, r0, r3
     696:	4152      	adcs	r2, r2
     698:	08c3      	lsrs	r3, r0, #3
     69a:	428b      	cmp	r3, r1
     69c:	d301      	bcc.n	6a2 <__aeabi_idiv+0xde>
     69e:	00cb      	lsls	r3, r1, #3
     6a0:	1ac0      	subs	r0, r0, r3
     6a2:	4152      	adcs	r2, r2
     6a4:	0883      	lsrs	r3, r0, #2
     6a6:	428b      	cmp	r3, r1
     6a8:	d301      	bcc.n	6ae <__aeabi_idiv+0xea>
     6aa:	008b      	lsls	r3, r1, #2
     6ac:	1ac0      	subs	r0, r0, r3
     6ae:	4152      	adcs	r2, r2
     6b0:	0843      	lsrs	r3, r0, #1
     6b2:	428b      	cmp	r3, r1
     6b4:	d301      	bcc.n	6ba <__aeabi_idiv+0xf6>
     6b6:	004b      	lsls	r3, r1, #1
     6b8:	1ac0      	subs	r0, r0, r3
     6ba:	4152      	adcs	r2, r2
     6bc:	1a41      	subs	r1, r0, r1
     6be:	d200      	bcs.n	6c2 <__aeabi_idiv+0xfe>
     6c0:	4601      	mov	r1, r0
     6c2:	4152      	adcs	r2, r2
     6c4:	4610      	mov	r0, r2
     6c6:	4770      	bx	lr
     6c8:	e05d      	b.n	786 <__aeabi_idiv+0x1c2>
     6ca:	0fca      	lsrs	r2, r1, #31
     6cc:	d000      	beq.n	6d0 <__aeabi_idiv+0x10c>
     6ce:	4249      	negs	r1, r1
     6d0:	1003      	asrs	r3, r0, #32
     6d2:	d300      	bcc.n	6d6 <__aeabi_idiv+0x112>
     6d4:	4240      	negs	r0, r0
     6d6:	4053      	eors	r3, r2
     6d8:	2200      	movs	r2, #0
     6da:	469c      	mov	ip, r3
     6dc:	0903      	lsrs	r3, r0, #4
     6de:	428b      	cmp	r3, r1
     6e0:	d32d      	bcc.n	73e <__aeabi_idiv+0x17a>
     6e2:	0a03      	lsrs	r3, r0, #8
     6e4:	428b      	cmp	r3, r1
     6e6:	d312      	bcc.n	70e <__aeabi_idiv+0x14a>
     6e8:	22fc      	movs	r2, #252	; 0xfc
     6ea:	0189      	lsls	r1, r1, #6
     6ec:	ba12      	rev	r2, r2
     6ee:	0a03      	lsrs	r3, r0, #8
     6f0:	428b      	cmp	r3, r1
     6f2:	d30c      	bcc.n	70e <__aeabi_idiv+0x14a>
     6f4:	0189      	lsls	r1, r1, #6
     6f6:	1192      	asrs	r2, r2, #6
     6f8:	428b      	cmp	r3, r1
     6fa:	d308      	bcc.n	70e <__aeabi_idiv+0x14a>
     6fc:	0189      	lsls	r1, r1, #6
     6fe:	1192      	asrs	r2, r2, #6
     700:	428b      	cmp	r3, r1
     702:	d304      	bcc.n	70e <__aeabi_idiv+0x14a>
     704:	0189      	lsls	r1, r1, #6
     706:	d03a      	beq.n	77e <__aeabi_idiv+0x1ba>
     708:	1192      	asrs	r2, r2, #6
     70a:	e000      	b.n	70e <__aeabi_idiv+0x14a>
     70c:	0989      	lsrs	r1, r1, #6
     70e:	09c3      	lsrs	r3, r0, #7
     710:	428b      	cmp	r3, r1
     712:	d301      	bcc.n	718 <__aeabi_idiv+0x154>
     714:	01cb      	lsls	r3, r1, #7
     716:	1ac0      	subs	r0, r0, r3
     718:	4152      	adcs	r2, r2
     71a:	0983      	lsrs	r3, r0, #6
     71c:	428b      	cmp	r3, r1
     71e:	d301      	bcc.n	724 <__aeabi_idiv+0x160>
     720:	018b      	lsls	r3, r1, #6
     722:	1ac0      	subs	r0, r0, r3
     724:	4152      	adcs	r2, r2
     726:	0943      	lsrs	r3, r0, #5
     728:	428b      	cmp	r3, r1
     72a:	d301      	bcc.n	730 <__aeabi_idiv+0x16c>
     72c:	014b      	lsls	r3, r1, #5
     72e:	1ac0      	subs	r0, r0, r3
     730:	4152      	adcs	r2, r2
     732:	0903      	lsrs	r3, r0, #4
     734:	428b      	cmp	r3, r1
     736:	d301      	bcc.n	73c <__aeabi_idiv+0x178>
     738:	010b      	lsls	r3, r1, #4
     73a:	1ac0      	subs	r0, r0, r3
     73c:	4152      	adcs	r2, r2
     73e:	08c3      	lsrs	r3, r0, #3
     740:	428b      	cmp	r3, r1
     742:	d301      	bcc.n	748 <__aeabi_idiv+0x184>
     744:	00cb      	lsls	r3, r1, #3
     746:	1ac0      	subs	r0, r0, r3
     748:	4152      	adcs	r2, r2
     74a:	0883      	lsrs	r3, r0, #2
     74c:	428b      	cmp	r3, r1
     74e:	d301      	bcc.n	754 <__aeabi_idiv+0x190>
     750:	008b      	lsls	r3, r1, #2
     752:	1ac0      	subs	r0, r0, r3
     754:	4152      	adcs	r2, r2
     756:	d2d9      	bcs.n	70c <__aeabi_idiv+0x148>
     758:	0843      	lsrs	r3, r0, #1
     75a:	428b      	cmp	r3, r1
     75c:	d301      	bcc.n	762 <__aeabi_idiv+0x19e>
     75e:	004b      	lsls	r3, r1, #1
     760:	1ac0      	subs	r0, r0, r3
     762:	4152      	adcs	r2, r2
     764:	1a41      	subs	r1, r0, r1
     766:	d200      	bcs.n	76a <__aeabi_idiv+0x1a6>
     768:	4601      	mov	r1, r0
     76a:	4663      	mov	r3, ip
     76c:	4152      	adcs	r2, r2
     76e:	105b      	asrs	r3, r3, #1
     770:	4610      	mov	r0, r2
     772:	d301      	bcc.n	778 <__aeabi_idiv+0x1b4>
     774:	4240      	negs	r0, r0
     776:	2b00      	cmp	r3, #0
     778:	d500      	bpl.n	77c <__aeabi_idiv+0x1b8>
     77a:	4249      	negs	r1, r1
     77c:	4770      	bx	lr
     77e:	4663      	mov	r3, ip
     780:	105b      	asrs	r3, r3, #1
     782:	d300      	bcc.n	786 <__aeabi_idiv+0x1c2>
     784:	4240      	negs	r0, r0
     786:	b501      	push	{r0, lr}
     788:	2000      	movs	r0, #0
     78a:	f000 f80b 	bl	7a4 <__aeabi_idiv0>
     78e:	bd02      	pop	{r1, pc}

00000790 <__aeabi_idivmod>:
__aeabi_idivmod():
     790:	2900      	cmp	r1, #0
     792:	d0f8      	beq.n	786 <__aeabi_idiv+0x1c2>
     794:	b503      	push	{r0, r1, lr}
     796:	f7ff ff15 	bl	5c4 <__aeabi_idiv>
     79a:	bc0e      	pop	{r1, r2, r3}
     79c:	4342      	muls	r2, r0
     79e:	1a89      	subs	r1, r1, r2
     7a0:	4718      	bx	r3
     7a2:	46c0      	nop			; (mov r8, r8)

000007a4 <__aeabi_idiv0>:
__aeabi_ldiv0():
     7a4:	4770      	bx	lr
     7a6:	46c0      	nop			; (mov r8, r8)

000007a8 <__aeabi_cdrcmple>:
__aeabi_cdrcmple():
     7a8:	4684      	mov	ip, r0
     7aa:	1c10      	adds	r0, r2, #0
     7ac:	4662      	mov	r2, ip
     7ae:	468c      	mov	ip, r1
     7b0:	1c19      	adds	r1, r3, #0
     7b2:	4663      	mov	r3, ip
     7b4:	e000      	b.n	7b8 <__aeabi_cdcmpeq>
     7b6:	46c0      	nop			; (mov r8, r8)

000007b8 <__aeabi_cdcmpeq>:
     7b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     7ba:	f001 fdf3 	bl	23a4 <__ledf2>
     7be:	2800      	cmp	r0, #0
     7c0:	d401      	bmi.n	7c6 <__aeabi_cdcmpeq+0xe>
     7c2:	2100      	movs	r1, #0
     7c4:	42c8      	cmn	r0, r1
     7c6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000007c8 <__aeabi_dcmpeq>:
__aeabi_dcmpeq():
     7c8:	b510      	push	{r4, lr}
     7ca:	f001 fd37 	bl	223c <__eqdf2>
     7ce:	4240      	negs	r0, r0
     7d0:	3001      	adds	r0, #1
     7d2:	bd10      	pop	{r4, pc}

000007d4 <__aeabi_dcmplt>:
__aeabi_dcmplt():
     7d4:	b510      	push	{r4, lr}
     7d6:	f001 fde5 	bl	23a4 <__ledf2>
     7da:	2800      	cmp	r0, #0
     7dc:	db01      	blt.n	7e2 <__aeabi_dcmplt+0xe>
     7de:	2000      	movs	r0, #0
     7e0:	bd10      	pop	{r4, pc}
     7e2:	2001      	movs	r0, #1
     7e4:	bd10      	pop	{r4, pc}
     7e6:	46c0      	nop			; (mov r8, r8)

000007e8 <__aeabi_dcmple>:
__aeabi_dcmple():
     7e8:	b510      	push	{r4, lr}
     7ea:	f001 fddb 	bl	23a4 <__ledf2>
     7ee:	2800      	cmp	r0, #0
     7f0:	dd01      	ble.n	7f6 <__aeabi_dcmple+0xe>
     7f2:	2000      	movs	r0, #0
     7f4:	bd10      	pop	{r4, pc}
     7f6:	2001      	movs	r0, #1
     7f8:	bd10      	pop	{r4, pc}
     7fa:	46c0      	nop			; (mov r8, r8)

000007fc <__aeabi_dcmpgt>:
__aeabi_dcmpgt():
     7fc:	b510      	push	{r4, lr}
     7fe:	f001 fd61 	bl	22c4 <__gedf2>
     802:	2800      	cmp	r0, #0
     804:	dc01      	bgt.n	80a <__aeabi_dcmpgt+0xe>
     806:	2000      	movs	r0, #0
     808:	bd10      	pop	{r4, pc}
     80a:	2001      	movs	r0, #1
     80c:	bd10      	pop	{r4, pc}
     80e:	46c0      	nop			; (mov r8, r8)

00000810 <__aeabi_dcmpge>:
__aeabi_dcmpge():
     810:	b510      	push	{r4, lr}
     812:	f001 fd57 	bl	22c4 <__gedf2>
     816:	2800      	cmp	r0, #0
     818:	da01      	bge.n	81e <__aeabi_dcmpge+0xe>
     81a:	2000      	movs	r0, #0
     81c:	bd10      	pop	{r4, pc}
     81e:	2001      	movs	r0, #1
     820:	bd10      	pop	{r4, pc}
     822:	46c0      	nop			; (mov r8, r8)

00000824 <__aeabi_cfrcmple>:
__aeabi_cfrcmple():
     824:	4684      	mov	ip, r0
     826:	1c08      	adds	r0, r1, #0
     828:	4661      	mov	r1, ip
     82a:	e7ff      	b.n	82c <__aeabi_cfcmpeq>

0000082c <__aeabi_cfcmpeq>:
     82c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     82e:	f000 fb5b 	bl	ee8 <__lesf2>
     832:	2800      	cmp	r0, #0
     834:	d401      	bmi.n	83a <__aeabi_cfcmpeq+0xe>
     836:	2100      	movs	r1, #0
     838:	42c8      	cmn	r0, r1
     83a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000083c <__aeabi_fcmpeq>:
__aeabi_fcmpeq():
     83c:	b510      	push	{r4, lr}
     83e:	f000 fadf 	bl	e00 <__eqsf2>
     842:	4240      	negs	r0, r0
     844:	3001      	adds	r0, #1
     846:	bd10      	pop	{r4, pc}

00000848 <__aeabi_fcmplt>:
__aeabi_fcmplt():
     848:	b510      	push	{r4, lr}
     84a:	f000 fb4d 	bl	ee8 <__lesf2>
     84e:	2800      	cmp	r0, #0
     850:	db01      	blt.n	856 <__aeabi_fcmplt+0xe>
     852:	2000      	movs	r0, #0
     854:	bd10      	pop	{r4, pc}
     856:	2001      	movs	r0, #1
     858:	bd10      	pop	{r4, pc}
     85a:	46c0      	nop			; (mov r8, r8)

0000085c <__aeabi_fcmple>:
__aeabi_fcmple():
     85c:	b510      	push	{r4, lr}
     85e:	f000 fb43 	bl	ee8 <__lesf2>
     862:	2800      	cmp	r0, #0
     864:	dd01      	ble.n	86a <__aeabi_fcmple+0xe>
     866:	2000      	movs	r0, #0
     868:	bd10      	pop	{r4, pc}
     86a:	2001      	movs	r0, #1
     86c:	bd10      	pop	{r4, pc}
     86e:	46c0      	nop			; (mov r8, r8)

00000870 <__aeabi_fcmpgt>:
__aeabi_fcmpgt():
     870:	b510      	push	{r4, lr}
     872:	f000 faef 	bl	e54 <__gesf2>
     876:	2800      	cmp	r0, #0
     878:	dc01      	bgt.n	87e <__aeabi_fcmpgt+0xe>
     87a:	2000      	movs	r0, #0
     87c:	bd10      	pop	{r4, pc}
     87e:	2001      	movs	r0, #1
     880:	bd10      	pop	{r4, pc}
     882:	46c0      	nop			; (mov r8, r8)

00000884 <__aeabi_fcmpge>:
__aeabi_fcmpge():
     884:	b510      	push	{r4, lr}
     886:	f000 fae5 	bl	e54 <__gesf2>
     88a:	2800      	cmp	r0, #0
     88c:	da01      	bge.n	892 <__aeabi_fcmpge+0xe>
     88e:	2000      	movs	r0, #0
     890:	bd10      	pop	{r4, pc}
     892:	2001      	movs	r0, #1
     894:	bd10      	pop	{r4, pc}
     896:	46c0      	nop			; (mov r8, r8)

00000898 <__aeabi_fadd>:
__aeabi_fadd():
     898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     89a:	004a      	lsls	r2, r1, #1
     89c:	0243      	lsls	r3, r0, #9
     89e:	0044      	lsls	r4, r0, #1
     8a0:	024e      	lsls	r6, r1, #9
     8a2:	0fc5      	lsrs	r5, r0, #31
     8a4:	0e24      	lsrs	r4, r4, #24
     8a6:	1c28      	adds	r0, r5, #0
     8a8:	099b      	lsrs	r3, r3, #6
     8aa:	0e12      	lsrs	r2, r2, #24
     8ac:	0fc9      	lsrs	r1, r1, #31
     8ae:	09b7      	lsrs	r7, r6, #6
     8b0:	428d      	cmp	r5, r1
     8b2:	d040      	beq.n	936 <__aeabi_fadd+0x9e>
     8b4:	1aa0      	subs	r0, r4, r2
     8b6:	2800      	cmp	r0, #0
     8b8:	dc00      	bgt.n	8bc <__aeabi_fadd+0x24>
     8ba:	e084      	b.n	9c6 <__aeabi_fadd+0x12e>
     8bc:	2a00      	cmp	r2, #0
     8be:	d11c      	bne.n	8fa <__aeabi_fadd+0x62>
     8c0:	2f00      	cmp	r7, #0
     8c2:	d15c      	bne.n	97e <__aeabi_fadd+0xe6>
     8c4:	075a      	lsls	r2, r3, #29
     8c6:	d004      	beq.n	8d2 <__aeabi_fadd+0x3a>
     8c8:	220f      	movs	r2, #15
     8ca:	401a      	ands	r2, r3
     8cc:	2a04      	cmp	r2, #4
     8ce:	d000      	beq.n	8d2 <__aeabi_fadd+0x3a>
     8d0:	3304      	adds	r3, #4
     8d2:	2280      	movs	r2, #128	; 0x80
     8d4:	04d2      	lsls	r2, r2, #19
     8d6:	401a      	ands	r2, r3
     8d8:	1c28      	adds	r0, r5, #0
     8da:	2a00      	cmp	r2, #0
     8dc:	d024      	beq.n	928 <__aeabi_fadd+0x90>
     8de:	3401      	adds	r4, #1
     8e0:	2cff      	cmp	r4, #255	; 0xff
     8e2:	d100      	bne.n	8e6 <__aeabi_fadd+0x4e>
     8e4:	e07b      	b.n	9de <__aeabi_fadd+0x146>
     8e6:	019b      	lsls	r3, r3, #6
     8e8:	0a5b      	lsrs	r3, r3, #9
     8ea:	b2e4      	uxtb	r4, r4
     8ec:	025b      	lsls	r3, r3, #9
     8ee:	05e4      	lsls	r4, r4, #23
     8f0:	0a5b      	lsrs	r3, r3, #9
     8f2:	4323      	orrs	r3, r4
     8f4:	07c0      	lsls	r0, r0, #31
     8f6:	4318      	orrs	r0, r3
     8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     8fa:	2cff      	cmp	r4, #255	; 0xff
     8fc:	d0e2      	beq.n	8c4 <__aeabi_fadd+0x2c>
     8fe:	2280      	movs	r2, #128	; 0x80
     900:	04d2      	lsls	r2, r2, #19
     902:	4317      	orrs	r7, r2
     904:	2601      	movs	r6, #1
     906:	281b      	cmp	r0, #27
     908:	dc08      	bgt.n	91c <__aeabi_fadd+0x84>
     90a:	1c39      	adds	r1, r7, #0
     90c:	2220      	movs	r2, #32
     90e:	1c3e      	adds	r6, r7, #0
     910:	40c1      	lsrs	r1, r0
     912:	1a10      	subs	r0, r2, r0
     914:	4086      	lsls	r6, r0
     916:	1e77      	subs	r7, r6, #1
     918:	41be      	sbcs	r6, r7
     91a:	430e      	orrs	r6, r1
     91c:	1b9b      	subs	r3, r3, r6
     91e:	015a      	lsls	r2, r3, #5
     920:	d433      	bmi.n	98a <__aeabi_fadd+0xf2>
     922:	1c28      	adds	r0, r5, #0
     924:	075a      	lsls	r2, r3, #29
     926:	d1cf      	bne.n	8c8 <__aeabi_fadd+0x30>
     928:	08db      	lsrs	r3, r3, #3
     92a:	2cff      	cmp	r4, #255	; 0xff
     92c:	d01e      	beq.n	96c <__aeabi_fadd+0xd4>
     92e:	025b      	lsls	r3, r3, #9
     930:	0a5b      	lsrs	r3, r3, #9
     932:	b2e4      	uxtb	r4, r4
     934:	e7da      	b.n	8ec <__aeabi_fadd+0x54>
     936:	1aa1      	subs	r1, r4, r2
     938:	2900      	cmp	r1, #0
     93a:	dd57      	ble.n	9ec <__aeabi_fadd+0x154>
     93c:	2a00      	cmp	r2, #0
     93e:	d03a      	beq.n	9b6 <__aeabi_fadd+0x11e>
     940:	2cff      	cmp	r4, #255	; 0xff
     942:	d0bf      	beq.n	8c4 <__aeabi_fadd+0x2c>
     944:	2280      	movs	r2, #128	; 0x80
     946:	04d2      	lsls	r2, r2, #19
     948:	4317      	orrs	r7, r2
     94a:	2601      	movs	r6, #1
     94c:	291b      	cmp	r1, #27
     94e:	dd72      	ble.n	a36 <__aeabi_fadd+0x19e>
     950:	199b      	adds	r3, r3, r6
     952:	015a      	lsls	r2, r3, #5
     954:	d5e5      	bpl.n	922 <__aeabi_fadd+0x8a>
     956:	3401      	adds	r4, #1
     958:	2cff      	cmp	r4, #255	; 0xff
     95a:	d100      	bne.n	95e <__aeabi_fadd+0xc6>
     95c:	e087      	b.n	a6e <__aeabi_fadd+0x1d6>
     95e:	2101      	movs	r1, #1
     960:	4a8a      	ldr	r2, [pc, #552]	; (b8c <__aeabi_fadd+0x2f4>)
     962:	4019      	ands	r1, r3
     964:	4013      	ands	r3, r2
     966:	085b      	lsrs	r3, r3, #1
     968:	430b      	orrs	r3, r1
     96a:	e7ab      	b.n	8c4 <__aeabi_fadd+0x2c>
     96c:	2b00      	cmp	r3, #0
     96e:	d036      	beq.n	9de <__aeabi_fadd+0x146>
     970:	2280      	movs	r2, #128	; 0x80
     972:	03d2      	lsls	r2, r2, #15
     974:	4313      	orrs	r3, r2
     976:	025b      	lsls	r3, r3, #9
     978:	0a5b      	lsrs	r3, r3, #9
     97a:	24ff      	movs	r4, #255	; 0xff
     97c:	e7b6      	b.n	8ec <__aeabi_fadd+0x54>
     97e:	3801      	subs	r0, #1
     980:	2800      	cmp	r0, #0
     982:	d13f      	bne.n	a04 <__aeabi_fadd+0x16c>
     984:	1bdb      	subs	r3, r3, r7
     986:	015a      	lsls	r2, r3, #5
     988:	d5cb      	bpl.n	922 <__aeabi_fadd+0x8a>
     98a:	019b      	lsls	r3, r3, #6
     98c:	099e      	lsrs	r6, r3, #6
     98e:	1c30      	adds	r0, r6, #0
     990:	f002 f9cc 	bl	2d2c <__clzsi2>
     994:	3805      	subs	r0, #5
     996:	4086      	lsls	r6, r0
     998:	4284      	cmp	r4, r0
     99a:	dc23      	bgt.n	9e4 <__aeabi_fadd+0x14c>
     99c:	1b00      	subs	r0, r0, r4
     99e:	241f      	movs	r4, #31
     9a0:	1c32      	adds	r2, r6, #0
     9a2:	1c43      	adds	r3, r0, #1
     9a4:	1a20      	subs	r0, r4, r0
     9a6:	40da      	lsrs	r2, r3
     9a8:	4086      	lsls	r6, r0
     9aa:	1c13      	adds	r3, r2, #0
     9ac:	1e74      	subs	r4, r6, #1
     9ae:	41a6      	sbcs	r6, r4
     9b0:	2400      	movs	r4, #0
     9b2:	4333      	orrs	r3, r6
     9b4:	e786      	b.n	8c4 <__aeabi_fadd+0x2c>
     9b6:	2f00      	cmp	r7, #0
     9b8:	d100      	bne.n	9bc <__aeabi_fadd+0x124>
     9ba:	e783      	b.n	8c4 <__aeabi_fadd+0x2c>
     9bc:	3901      	subs	r1, #1
     9be:	2900      	cmp	r1, #0
     9c0:	d150      	bne.n	a64 <__aeabi_fadd+0x1cc>
     9c2:	19db      	adds	r3, r3, r7
     9c4:	e7c5      	b.n	952 <__aeabi_fadd+0xba>
     9c6:	2800      	cmp	r0, #0
     9c8:	d120      	bne.n	a0c <__aeabi_fadd+0x174>
     9ca:	1c62      	adds	r2, r4, #1
     9cc:	b2d2      	uxtb	r2, r2
     9ce:	2a01      	cmp	r2, #1
     9d0:	dd5e      	ble.n	a90 <__aeabi_fadd+0x1f8>
     9d2:	1bde      	subs	r6, r3, r7
     9d4:	0172      	lsls	r2, r6, #5
     9d6:	d528      	bpl.n	a2a <__aeabi_fadd+0x192>
     9d8:	1afe      	subs	r6, r7, r3
     9da:	1c0d      	adds	r5, r1, #0
     9dc:	e7d7      	b.n	98e <__aeabi_fadd+0xf6>
     9de:	24ff      	movs	r4, #255	; 0xff
     9e0:	2300      	movs	r3, #0
     9e2:	e783      	b.n	8ec <__aeabi_fadd+0x54>
     9e4:	4b69      	ldr	r3, [pc, #420]	; (b8c <__aeabi_fadd+0x2f4>)
     9e6:	1a24      	subs	r4, r4, r0
     9e8:	4033      	ands	r3, r6
     9ea:	e76b      	b.n	8c4 <__aeabi_fadd+0x2c>
     9ec:	2900      	cmp	r1, #0
     9ee:	d158      	bne.n	aa2 <__aeabi_fadd+0x20a>
     9f0:	1c62      	adds	r2, r4, #1
     9f2:	b2d1      	uxtb	r1, r2
     9f4:	2901      	cmp	r1, #1
     9f6:	dd3c      	ble.n	a72 <__aeabi_fadd+0x1da>
     9f8:	2aff      	cmp	r2, #255	; 0xff
     9fa:	d037      	beq.n	a6c <__aeabi_fadd+0x1d4>
     9fc:	18fb      	adds	r3, r7, r3
     9fe:	085b      	lsrs	r3, r3, #1
     a00:	1c14      	adds	r4, r2, #0
     a02:	e75f      	b.n	8c4 <__aeabi_fadd+0x2c>
     a04:	2cff      	cmp	r4, #255	; 0xff
     a06:	d000      	beq.n	a0a <__aeabi_fadd+0x172>
     a08:	e77c      	b.n	904 <__aeabi_fadd+0x6c>
     a0a:	e75b      	b.n	8c4 <__aeabi_fadd+0x2c>
     a0c:	2c00      	cmp	r4, #0
     a0e:	d01e      	beq.n	a4e <__aeabi_fadd+0x1b6>
     a10:	2aff      	cmp	r2, #255	; 0xff
     a12:	d023      	beq.n	a5c <__aeabi_fadd+0x1c4>
     a14:	2480      	movs	r4, #128	; 0x80
     a16:	04e4      	lsls	r4, r4, #19
     a18:	4240      	negs	r0, r0
     a1a:	4323      	orrs	r3, r4
     a1c:	281b      	cmp	r0, #27
     a1e:	dd5b      	ble.n	ad8 <__aeabi_fadd+0x240>
     a20:	2301      	movs	r3, #1
     a22:	1afb      	subs	r3, r7, r3
     a24:	1c14      	adds	r4, r2, #0
     a26:	1c0d      	adds	r5, r1, #0
     a28:	e7ad      	b.n	986 <__aeabi_fadd+0xee>
     a2a:	2e00      	cmp	r6, #0
     a2c:	d1af      	bne.n	98e <__aeabi_fadd+0xf6>
     a2e:	2300      	movs	r3, #0
     a30:	2000      	movs	r0, #0
     a32:	2400      	movs	r4, #0
     a34:	e778      	b.n	928 <__aeabi_fadd+0x90>
     a36:	1c3a      	adds	r2, r7, #0
     a38:	40ca      	lsrs	r2, r1
     a3a:	4694      	mov	ip, r2
     a3c:	2220      	movs	r2, #32
     a3e:	1c3e      	adds	r6, r7, #0
     a40:	1a51      	subs	r1, r2, r1
     a42:	408e      	lsls	r6, r1
     a44:	4662      	mov	r2, ip
     a46:	1e77      	subs	r7, r6, #1
     a48:	41be      	sbcs	r6, r7
     a4a:	4316      	orrs	r6, r2
     a4c:	e780      	b.n	950 <__aeabi_fadd+0xb8>
     a4e:	2b00      	cmp	r3, #0
     a50:	d03e      	beq.n	ad0 <__aeabi_fadd+0x238>
     a52:	43c0      	mvns	r0, r0
     a54:	2800      	cmp	r0, #0
     a56:	d0e4      	beq.n	a22 <__aeabi_fadd+0x18a>
     a58:	2aff      	cmp	r2, #255	; 0xff
     a5a:	d1df      	bne.n	a1c <__aeabi_fadd+0x184>
     a5c:	1c3b      	adds	r3, r7, #0
     a5e:	24ff      	movs	r4, #255	; 0xff
     a60:	1c0d      	adds	r5, r1, #0
     a62:	e72f      	b.n	8c4 <__aeabi_fadd+0x2c>
     a64:	2cff      	cmp	r4, #255	; 0xff
     a66:	d000      	beq.n	a6a <__aeabi_fadd+0x1d2>
     a68:	e76f      	b.n	94a <__aeabi_fadd+0xb2>
     a6a:	e72b      	b.n	8c4 <__aeabi_fadd+0x2c>
     a6c:	24ff      	movs	r4, #255	; 0xff
     a6e:	2300      	movs	r3, #0
     a70:	e75a      	b.n	928 <__aeabi_fadd+0x90>
     a72:	2c00      	cmp	r4, #0
     a74:	d15a      	bne.n	b2c <__aeabi_fadd+0x294>
     a76:	2b00      	cmp	r3, #0
     a78:	d07f      	beq.n	b7a <__aeabi_fadd+0x2e2>
     a7a:	2f00      	cmp	r7, #0
     a7c:	d100      	bne.n	a80 <__aeabi_fadd+0x1e8>
     a7e:	e721      	b.n	8c4 <__aeabi_fadd+0x2c>
     a80:	19db      	adds	r3, r3, r7
     a82:	015a      	lsls	r2, r3, #5
     a84:	d400      	bmi.n	a88 <__aeabi_fadd+0x1f0>
     a86:	e74c      	b.n	922 <__aeabi_fadd+0x8a>
     a88:	4a40      	ldr	r2, [pc, #256]	; (b8c <__aeabi_fadd+0x2f4>)
     a8a:	3401      	adds	r4, #1
     a8c:	4013      	ands	r3, r2
     a8e:	e719      	b.n	8c4 <__aeabi_fadd+0x2c>
     a90:	2c00      	cmp	r4, #0
     a92:	d115      	bne.n	ac0 <__aeabi_fadd+0x228>
     a94:	2b00      	cmp	r3, #0
     a96:	d12f      	bne.n	af8 <__aeabi_fadd+0x260>
     a98:	2f00      	cmp	r7, #0
     a9a:	d05d      	beq.n	b58 <__aeabi_fadd+0x2c0>
     a9c:	1c3b      	adds	r3, r7, #0
     a9e:	1c0d      	adds	r5, r1, #0
     aa0:	e710      	b.n	8c4 <__aeabi_fadd+0x2c>
     aa2:	2c00      	cmp	r4, #0
     aa4:	d121      	bne.n	aea <__aeabi_fadd+0x252>
     aa6:	2b00      	cmp	r3, #0
     aa8:	d053      	beq.n	b52 <__aeabi_fadd+0x2ba>
     aaa:	43c9      	mvns	r1, r1
     aac:	2900      	cmp	r1, #0
     aae:	d004      	beq.n	aba <__aeabi_fadd+0x222>
     ab0:	2aff      	cmp	r2, #255	; 0xff
     ab2:	d04b      	beq.n	b4c <__aeabi_fadd+0x2b4>
     ab4:	291b      	cmp	r1, #27
     ab6:	dd57      	ble.n	b68 <__aeabi_fadd+0x2d0>
     ab8:	2301      	movs	r3, #1
     aba:	19db      	adds	r3, r3, r7
     abc:	1c14      	adds	r4, r2, #0
     abe:	e748      	b.n	952 <__aeabi_fadd+0xba>
     ac0:	2b00      	cmp	r3, #0
     ac2:	d122      	bne.n	b0a <__aeabi_fadd+0x272>
     ac4:	2f00      	cmp	r7, #0
     ac6:	d04a      	beq.n	b5e <__aeabi_fadd+0x2c6>
     ac8:	1c3b      	adds	r3, r7, #0
     aca:	1c0d      	adds	r5, r1, #0
     acc:	24ff      	movs	r4, #255	; 0xff
     ace:	e6f9      	b.n	8c4 <__aeabi_fadd+0x2c>
     ad0:	1c3b      	adds	r3, r7, #0
     ad2:	1c14      	adds	r4, r2, #0
     ad4:	1c0d      	adds	r5, r1, #0
     ad6:	e6f5      	b.n	8c4 <__aeabi_fadd+0x2c>
     ad8:	1c1d      	adds	r5, r3, #0
     ada:	2420      	movs	r4, #32
     adc:	40c5      	lsrs	r5, r0
     ade:	1a20      	subs	r0, r4, r0
     ae0:	4083      	lsls	r3, r0
     ae2:	1e58      	subs	r0, r3, #1
     ae4:	4183      	sbcs	r3, r0
     ae6:	432b      	orrs	r3, r5
     ae8:	e79b      	b.n	a22 <__aeabi_fadd+0x18a>
     aea:	2aff      	cmp	r2, #255	; 0xff
     aec:	d02e      	beq.n	b4c <__aeabi_fadd+0x2b4>
     aee:	2480      	movs	r4, #128	; 0x80
     af0:	04e4      	lsls	r4, r4, #19
     af2:	4249      	negs	r1, r1
     af4:	4323      	orrs	r3, r4
     af6:	e7dd      	b.n	ab4 <__aeabi_fadd+0x21c>
     af8:	2f00      	cmp	r7, #0
     afa:	d100      	bne.n	afe <__aeabi_fadd+0x266>
     afc:	e6e2      	b.n	8c4 <__aeabi_fadd+0x2c>
     afe:	1bda      	subs	r2, r3, r7
     b00:	0150      	lsls	r0, r2, #5
     b02:	d53c      	bpl.n	b7e <__aeabi_fadd+0x2e6>
     b04:	1afb      	subs	r3, r7, r3
     b06:	1c0d      	adds	r5, r1, #0
     b08:	e6dc      	b.n	8c4 <__aeabi_fadd+0x2c>
     b0a:	24ff      	movs	r4, #255	; 0xff
     b0c:	2f00      	cmp	r7, #0
     b0e:	d100      	bne.n	b12 <__aeabi_fadd+0x27a>
     b10:	e6d8      	b.n	8c4 <__aeabi_fadd+0x2c>
     b12:	2280      	movs	r2, #128	; 0x80
     b14:	08db      	lsrs	r3, r3, #3
     b16:	03d2      	lsls	r2, r2, #15
     b18:	4213      	tst	r3, r2
     b1a:	d004      	beq.n	b26 <__aeabi_fadd+0x28e>
     b1c:	08fe      	lsrs	r6, r7, #3
     b1e:	4216      	tst	r6, r2
     b20:	d101      	bne.n	b26 <__aeabi_fadd+0x28e>
     b22:	1c33      	adds	r3, r6, #0
     b24:	1c0d      	adds	r5, r1, #0
     b26:	00db      	lsls	r3, r3, #3
     b28:	24ff      	movs	r4, #255	; 0xff
     b2a:	e6cb      	b.n	8c4 <__aeabi_fadd+0x2c>
     b2c:	2b00      	cmp	r3, #0
     b2e:	d00d      	beq.n	b4c <__aeabi_fadd+0x2b4>
     b30:	24ff      	movs	r4, #255	; 0xff
     b32:	2f00      	cmp	r7, #0
     b34:	d100      	bne.n	b38 <__aeabi_fadd+0x2a0>
     b36:	e6c5      	b.n	8c4 <__aeabi_fadd+0x2c>
     b38:	2280      	movs	r2, #128	; 0x80
     b3a:	08db      	lsrs	r3, r3, #3
     b3c:	03d2      	lsls	r2, r2, #15
     b3e:	4213      	tst	r3, r2
     b40:	d0f1      	beq.n	b26 <__aeabi_fadd+0x28e>
     b42:	08fe      	lsrs	r6, r7, #3
     b44:	4216      	tst	r6, r2
     b46:	d1ee      	bne.n	b26 <__aeabi_fadd+0x28e>
     b48:	1c33      	adds	r3, r6, #0
     b4a:	e7ec      	b.n	b26 <__aeabi_fadd+0x28e>
     b4c:	1c3b      	adds	r3, r7, #0
     b4e:	24ff      	movs	r4, #255	; 0xff
     b50:	e6b8      	b.n	8c4 <__aeabi_fadd+0x2c>
     b52:	1c3b      	adds	r3, r7, #0
     b54:	1c14      	adds	r4, r2, #0
     b56:	e6b5      	b.n	8c4 <__aeabi_fadd+0x2c>
     b58:	1c23      	adds	r3, r4, #0
     b5a:	2000      	movs	r0, #0
     b5c:	e6e4      	b.n	928 <__aeabi_fadd+0x90>
     b5e:	2380      	movs	r3, #128	; 0x80
     b60:	2000      	movs	r0, #0
     b62:	049b      	lsls	r3, r3, #18
     b64:	24ff      	movs	r4, #255	; 0xff
     b66:	e6df      	b.n	928 <__aeabi_fadd+0x90>
     b68:	1c1e      	adds	r6, r3, #0
     b6a:	2420      	movs	r4, #32
     b6c:	40ce      	lsrs	r6, r1
     b6e:	1a61      	subs	r1, r4, r1
     b70:	408b      	lsls	r3, r1
     b72:	1e59      	subs	r1, r3, #1
     b74:	418b      	sbcs	r3, r1
     b76:	4333      	orrs	r3, r6
     b78:	e79f      	b.n	aba <__aeabi_fadd+0x222>
     b7a:	1c3b      	adds	r3, r7, #0
     b7c:	e6a2      	b.n	8c4 <__aeabi_fadd+0x2c>
     b7e:	1e13      	subs	r3, r2, #0
     b80:	d000      	beq.n	b84 <__aeabi_fadd+0x2ec>
     b82:	e6ce      	b.n	922 <__aeabi_fadd+0x8a>
     b84:	2300      	movs	r3, #0
     b86:	2000      	movs	r0, #0
     b88:	e6ce      	b.n	928 <__aeabi_fadd+0x90>
     b8a:	46c0      	nop			; (mov r8, r8)
     b8c:	fbffffff 	.word	0xfbffffff

00000b90 <__aeabi_fdiv>:
__aeabi_fdiv():
     b90:	b5f0      	push	{r4, r5, r6, r7, lr}
     b92:	4656      	mov	r6, sl
     b94:	464d      	mov	r5, r9
     b96:	465f      	mov	r7, fp
     b98:	4644      	mov	r4, r8
     b9a:	b4f0      	push	{r4, r5, r6, r7}
     b9c:	0243      	lsls	r3, r0, #9
     b9e:	0045      	lsls	r5, r0, #1
     ba0:	0fc7      	lsrs	r7, r0, #31
     ba2:	b083      	sub	sp, #12
     ba4:	468a      	mov	sl, r1
     ba6:	0a5c      	lsrs	r4, r3, #9
     ba8:	0e2e      	lsrs	r6, r5, #24
     baa:	46b9      	mov	r9, r7
     bac:	d041      	beq.n	c32 <__aeabi_fdiv+0xa2>
     bae:	2eff      	cmp	r6, #255	; 0xff
     bb0:	d026      	beq.n	c00 <__aeabi_fdiv+0x70>
     bb2:	2380      	movs	r3, #128	; 0x80
     bb4:	041b      	lsls	r3, r3, #16
     bb6:	4323      	orrs	r3, r4
     bb8:	00dc      	lsls	r4, r3, #3
     bba:	2300      	movs	r3, #0
     bbc:	4698      	mov	r8, r3
     bbe:	469b      	mov	fp, r3
     bc0:	3e7f      	subs	r6, #127	; 0x7f
     bc2:	4653      	mov	r3, sl
     bc4:	025b      	lsls	r3, r3, #9
     bc6:	0a5d      	lsrs	r5, r3, #9
     bc8:	4653      	mov	r3, sl
     bca:	005a      	lsls	r2, r3, #1
     bcc:	0fdb      	lsrs	r3, r3, #31
     bce:	0e12      	lsrs	r2, r2, #24
     bd0:	469a      	mov	sl, r3
     bd2:	d039      	beq.n	c48 <__aeabi_fdiv+0xb8>
     bd4:	2aff      	cmp	r2, #255	; 0xff
     bd6:	d033      	beq.n	c40 <__aeabi_fdiv+0xb0>
     bd8:	2380      	movs	r3, #128	; 0x80
     bda:	041b      	lsls	r3, r3, #16
     bdc:	432b      	orrs	r3, r5
     bde:	00dd      	lsls	r5, r3, #3
     be0:	2300      	movs	r3, #0
     be2:	3a7f      	subs	r2, #127	; 0x7f
     be4:	4651      	mov	r1, sl
     be6:	1ab2      	subs	r2, r6, r2
     be8:	4646      	mov	r6, r8
     bea:	4079      	eors	r1, r7
     bec:	1c08      	adds	r0, r1, #0
     bee:	9201      	str	r2, [sp, #4]
     bf0:	431e      	orrs	r6, r3
     bf2:	2e0f      	cmp	r6, #15
     bf4:	d900      	bls.n	bf8 <__aeabi_fdiv+0x68>
     bf6:	e076      	b.n	ce6 <__aeabi_fdiv+0x156>
     bf8:	4a7e      	ldr	r2, [pc, #504]	; (df4 <__aeabi_fdiv+0x264>)
     bfa:	00b6      	lsls	r6, r6, #2
     bfc:	5996      	ldr	r6, [r2, r6]
     bfe:	46b7      	mov	pc, r6
     c00:	2c00      	cmp	r4, #0
     c02:	d130      	bne.n	c66 <__aeabi_fdiv+0xd6>
     c04:	2308      	movs	r3, #8
     c06:	4698      	mov	r8, r3
     c08:	3b06      	subs	r3, #6
     c0a:	469b      	mov	fp, r3
     c0c:	e7d9      	b.n	bc2 <__aeabi_fdiv+0x32>
     c0e:	2380      	movs	r3, #128	; 0x80
     c10:	2100      	movs	r1, #0
     c12:	03db      	lsls	r3, r3, #15
     c14:	24ff      	movs	r4, #255	; 0xff
     c16:	025b      	lsls	r3, r3, #9
     c18:	05e4      	lsls	r4, r4, #23
     c1a:	0a5b      	lsrs	r3, r3, #9
     c1c:	07c9      	lsls	r1, r1, #31
     c1e:	4323      	orrs	r3, r4
     c20:	430b      	orrs	r3, r1
     c22:	1c18      	adds	r0, r3, #0
     c24:	b003      	add	sp, #12
     c26:	bc3c      	pop	{r2, r3, r4, r5}
     c28:	4690      	mov	r8, r2
     c2a:	4699      	mov	r9, r3
     c2c:	46a2      	mov	sl, r4
     c2e:	46ab      	mov	fp, r5
     c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c32:	2c00      	cmp	r4, #0
     c34:	d128      	bne.n	c88 <__aeabi_fdiv+0xf8>
     c36:	2304      	movs	r3, #4
     c38:	4698      	mov	r8, r3
     c3a:	3b03      	subs	r3, #3
     c3c:	469b      	mov	fp, r3
     c3e:	e7c0      	b.n	bc2 <__aeabi_fdiv+0x32>
     c40:	2d00      	cmp	r5, #0
     c42:	d11f      	bne.n	c84 <__aeabi_fdiv+0xf4>
     c44:	2302      	movs	r3, #2
     c46:	e002      	b.n	c4e <__aeabi_fdiv+0xbe>
     c48:	2d00      	cmp	r5, #0
     c4a:	d111      	bne.n	c70 <__aeabi_fdiv+0xe0>
     c4c:	2301      	movs	r3, #1
     c4e:	1ab2      	subs	r2, r6, r2
     c50:	4650      	mov	r0, sl
     c52:	4646      	mov	r6, r8
     c54:	4078      	eors	r0, r7
     c56:	9201      	str	r2, [sp, #4]
     c58:	431e      	orrs	r6, r3
     c5a:	2e0f      	cmp	r6, #15
     c5c:	d827      	bhi.n	cae <__aeabi_fdiv+0x11e>
     c5e:	4966      	ldr	r1, [pc, #408]	; (df8 <__aeabi_fdiv+0x268>)
     c60:	00b6      	lsls	r6, r6, #2
     c62:	5989      	ldr	r1, [r1, r6]
     c64:	468f      	mov	pc, r1
     c66:	230c      	movs	r3, #12
     c68:	4698      	mov	r8, r3
     c6a:	3b09      	subs	r3, #9
     c6c:	469b      	mov	fp, r3
     c6e:	e7a8      	b.n	bc2 <__aeabi_fdiv+0x32>
     c70:	1c28      	adds	r0, r5, #0
     c72:	f002 f85b 	bl	2d2c <__clzsi2>
     c76:	2276      	movs	r2, #118	; 0x76
     c78:	1f43      	subs	r3, r0, #5
     c7a:	4252      	negs	r2, r2
     c7c:	409d      	lsls	r5, r3
     c7e:	1a12      	subs	r2, r2, r0
     c80:	2300      	movs	r3, #0
     c82:	e7af      	b.n	be4 <__aeabi_fdiv+0x54>
     c84:	2303      	movs	r3, #3
     c86:	e7ad      	b.n	be4 <__aeabi_fdiv+0x54>
     c88:	1c20      	adds	r0, r4, #0
     c8a:	f002 f84f 	bl	2d2c <__clzsi2>
     c8e:	1f43      	subs	r3, r0, #5
     c90:	409c      	lsls	r4, r3
     c92:	2376      	movs	r3, #118	; 0x76
     c94:	425b      	negs	r3, r3
     c96:	1a1e      	subs	r6, r3, r0
     c98:	2300      	movs	r3, #0
     c9a:	4698      	mov	r8, r3
     c9c:	469b      	mov	fp, r3
     c9e:	e790      	b.n	bc2 <__aeabi_fdiv+0x32>
     ca0:	2500      	movs	r5, #0
     ca2:	46d1      	mov	r9, sl
     ca4:	469b      	mov	fp, r3
     ca6:	465b      	mov	r3, fp
     ca8:	4648      	mov	r0, r9
     caa:	2b02      	cmp	r3, #2
     cac:	d16f      	bne.n	d8e <__aeabi_fdiv+0x1fe>
     cae:	2101      	movs	r1, #1
     cb0:	24ff      	movs	r4, #255	; 0xff
     cb2:	4001      	ands	r1, r0
     cb4:	2300      	movs	r3, #0
     cb6:	e7ae      	b.n	c16 <__aeabi_fdiv+0x86>
     cb8:	237e      	movs	r3, #126	; 0x7e
     cba:	9a01      	ldr	r2, [sp, #4]
     cbc:	425b      	negs	r3, r3
     cbe:	1a9b      	subs	r3, r3, r2
     cc0:	2b1b      	cmp	r3, #27
     cc2:	dd6d      	ble.n	da0 <__aeabi_fdiv+0x210>
     cc4:	2101      	movs	r1, #1
     cc6:	464b      	mov	r3, r9
     cc8:	4019      	ands	r1, r3
     cca:	2400      	movs	r4, #0
     ccc:	2300      	movs	r3, #0
     cce:	e7a2      	b.n	c16 <__aeabi_fdiv+0x86>
     cd0:	2380      	movs	r3, #128	; 0x80
     cd2:	03db      	lsls	r3, r3, #15
     cd4:	421c      	tst	r4, r3
     cd6:	d149      	bne.n	d6c <__aeabi_fdiv+0x1dc>
     cd8:	2380      	movs	r3, #128	; 0x80
     cda:	03db      	lsls	r3, r3, #15
     cdc:	4323      	orrs	r3, r4
     cde:	025b      	lsls	r3, r3, #9
     ce0:	0a5b      	lsrs	r3, r3, #9
     ce2:	1c39      	adds	r1, r7, #0
     ce4:	e796      	b.n	c14 <__aeabi_fdiv+0x84>
     ce6:	0163      	lsls	r3, r4, #5
     ce8:	016d      	lsls	r5, r5, #5
     cea:	42ab      	cmp	r3, r5
     cec:	d337      	bcc.n	d5e <__aeabi_fdiv+0x1ce>
     cee:	4689      	mov	r9, r1
     cf0:	201a      	movs	r0, #26
     cf2:	2101      	movs	r1, #1
     cf4:	1b5b      	subs	r3, r3, r5
     cf6:	2401      	movs	r4, #1
     cf8:	1c1e      	adds	r6, r3, #0
     cfa:	0049      	lsls	r1, r1, #1
     cfc:	005b      	lsls	r3, r3, #1
     cfe:	2e00      	cmp	r6, #0
     d00:	db01      	blt.n	d06 <__aeabi_fdiv+0x176>
     d02:	42ab      	cmp	r3, r5
     d04:	d301      	bcc.n	d0a <__aeabi_fdiv+0x17a>
     d06:	1b5b      	subs	r3, r3, r5
     d08:	4321      	orrs	r1, r4
     d0a:	3801      	subs	r0, #1
     d0c:	2800      	cmp	r0, #0
     d0e:	d1f3      	bne.n	cf8 <__aeabi_fdiv+0x168>
     d10:	1e58      	subs	r0, r3, #1
     d12:	4183      	sbcs	r3, r0
     d14:	430b      	orrs	r3, r1
     d16:	1c1d      	adds	r5, r3, #0
     d18:	9c01      	ldr	r4, [sp, #4]
     d1a:	347f      	adds	r4, #127	; 0x7f
     d1c:	2c00      	cmp	r4, #0
     d1e:	ddcb      	ble.n	cb8 <__aeabi_fdiv+0x128>
     d20:	076b      	lsls	r3, r5, #29
     d22:	d004      	beq.n	d2e <__aeabi_fdiv+0x19e>
     d24:	230f      	movs	r3, #15
     d26:	402b      	ands	r3, r5
     d28:	2b04      	cmp	r3, #4
     d2a:	d000      	beq.n	d2e <__aeabi_fdiv+0x19e>
     d2c:	3504      	adds	r5, #4
     d2e:	012b      	lsls	r3, r5, #4
     d30:	d504      	bpl.n	d3c <__aeabi_fdiv+0x1ac>
     d32:	9a01      	ldr	r2, [sp, #4]
     d34:	4b31      	ldr	r3, [pc, #196]	; (dfc <__aeabi_fdiv+0x26c>)
     d36:	3280      	adds	r2, #128	; 0x80
     d38:	1c14      	adds	r4, r2, #0
     d3a:	401d      	ands	r5, r3
     d3c:	2cfe      	cmp	r4, #254	; 0xfe
     d3e:	dd07      	ble.n	d50 <__aeabi_fdiv+0x1c0>
     d40:	464b      	mov	r3, r9
     d42:	2101      	movs	r1, #1
     d44:	24ff      	movs	r4, #255	; 0xff
     d46:	4019      	ands	r1, r3
     d48:	2300      	movs	r3, #0
     d4a:	e764      	b.n	c16 <__aeabi_fdiv+0x86>
     d4c:	1c25      	adds	r5, r4, #0
     d4e:	e7aa      	b.n	ca6 <__aeabi_fdiv+0x116>
     d50:	2101      	movs	r1, #1
     d52:	464a      	mov	r2, r9
     d54:	01ab      	lsls	r3, r5, #6
     d56:	0a5b      	lsrs	r3, r3, #9
     d58:	b2e4      	uxtb	r4, r4
     d5a:	4011      	ands	r1, r2
     d5c:	e75b      	b.n	c16 <__aeabi_fdiv+0x86>
     d5e:	9a01      	ldr	r2, [sp, #4]
     d60:	4689      	mov	r9, r1
     d62:	3a01      	subs	r2, #1
     d64:	9201      	str	r2, [sp, #4]
     d66:	201b      	movs	r0, #27
     d68:	2100      	movs	r1, #0
     d6a:	e7c4      	b.n	cf6 <__aeabi_fdiv+0x166>
     d6c:	421d      	tst	r5, r3
     d6e:	d007      	beq.n	d80 <__aeabi_fdiv+0x1f0>
     d70:	4323      	orrs	r3, r4
     d72:	025b      	lsls	r3, r3, #9
     d74:	0a5b      	lsrs	r3, r3, #9
     d76:	1c39      	adds	r1, r7, #0
     d78:	e74c      	b.n	c14 <__aeabi_fdiv+0x84>
     d7a:	2500      	movs	r5, #0
     d7c:	0263      	lsls	r3, r4, #9
     d7e:	d5ab      	bpl.n	cd8 <__aeabi_fdiv+0x148>
     d80:	2380      	movs	r3, #128	; 0x80
     d82:	03db      	lsls	r3, r3, #15
     d84:	432b      	orrs	r3, r5
     d86:	025b      	lsls	r3, r3, #9
     d88:	0a5b      	lsrs	r3, r3, #9
     d8a:	4651      	mov	r1, sl
     d8c:	e742      	b.n	c14 <__aeabi_fdiv+0x84>
     d8e:	2b03      	cmp	r3, #3
     d90:	d025      	beq.n	dde <__aeabi_fdiv+0x24e>
     d92:	2b01      	cmp	r3, #1
     d94:	d1c0      	bne.n	d18 <__aeabi_fdiv+0x188>
     d96:	2101      	movs	r1, #1
     d98:	2400      	movs	r4, #0
     d9a:	4001      	ands	r1, r0
     d9c:	2300      	movs	r3, #0
     d9e:	e73a      	b.n	c16 <__aeabi_fdiv+0x86>
     da0:	1c29      	adds	r1, r5, #0
     da2:	40d9      	lsrs	r1, r3
     da4:	1c2b      	adds	r3, r5, #0
     da6:	9a01      	ldr	r2, [sp, #4]
     da8:	329e      	adds	r2, #158	; 0x9e
     daa:	4093      	lsls	r3, r2
     dac:	1e5d      	subs	r5, r3, #1
     dae:	41ab      	sbcs	r3, r5
     db0:	430b      	orrs	r3, r1
     db2:	075a      	lsls	r2, r3, #29
     db4:	d004      	beq.n	dc0 <__aeabi_fdiv+0x230>
     db6:	220f      	movs	r2, #15
     db8:	401a      	ands	r2, r3
     dba:	2a04      	cmp	r2, #4
     dbc:	d000      	beq.n	dc0 <__aeabi_fdiv+0x230>
     dbe:	3304      	adds	r3, #4
     dc0:	015a      	lsls	r2, r3, #5
     dc2:	d505      	bpl.n	dd0 <__aeabi_fdiv+0x240>
     dc4:	464b      	mov	r3, r9
     dc6:	2101      	movs	r1, #1
     dc8:	2401      	movs	r4, #1
     dca:	4019      	ands	r1, r3
     dcc:	2300      	movs	r3, #0
     dce:	e722      	b.n	c16 <__aeabi_fdiv+0x86>
     dd0:	2101      	movs	r1, #1
     dd2:	464a      	mov	r2, r9
     dd4:	019b      	lsls	r3, r3, #6
     dd6:	0a5b      	lsrs	r3, r3, #9
     dd8:	4011      	ands	r1, r2
     dda:	2400      	movs	r4, #0
     ddc:	e71b      	b.n	c16 <__aeabi_fdiv+0x86>
     dde:	2380      	movs	r3, #128	; 0x80
     de0:	2101      	movs	r1, #1
     de2:	464a      	mov	r2, r9
     de4:	03db      	lsls	r3, r3, #15
     de6:	432b      	orrs	r3, r5
     de8:	025b      	lsls	r3, r3, #9
     dea:	400a      	ands	r2, r1
     dec:	0a5b      	lsrs	r3, r3, #9
     dee:	1c11      	adds	r1, r2, #0
     df0:	e710      	b.n	c14 <__aeabi_fdiv+0x84>
     df2:	46c0      	nop			; (mov r8, r8)
     df4:	000145bc 	.word	0x000145bc
     df8:	000145fc 	.word	0x000145fc
     dfc:	f7ffffff 	.word	0xf7ffffff

00000e00 <__eqsf2>:
__nesf2():
     e00:	0243      	lsls	r3, r0, #9
     e02:	b570      	push	{r4, r5, r6, lr}
     e04:	0042      	lsls	r2, r0, #1
     e06:	004c      	lsls	r4, r1, #1
     e08:	0a5d      	lsrs	r5, r3, #9
     e0a:	0fc3      	lsrs	r3, r0, #31
     e0c:	0248      	lsls	r0, r1, #9
     e0e:	0e12      	lsrs	r2, r2, #24
     e10:	0a46      	lsrs	r6, r0, #9
     e12:	0e24      	lsrs	r4, r4, #24
     e14:	0fc9      	lsrs	r1, r1, #31
     e16:	2aff      	cmp	r2, #255	; 0xff
     e18:	d005      	beq.n	e26 <__eqsf2+0x26>
     e1a:	2cff      	cmp	r4, #255	; 0xff
     e1c:	d008      	beq.n	e30 <__eqsf2+0x30>
     e1e:	2001      	movs	r0, #1
     e20:	42a2      	cmp	r2, r4
     e22:	d00b      	beq.n	e3c <__eqsf2+0x3c>
     e24:	bd70      	pop	{r4, r5, r6, pc}
     e26:	2001      	movs	r0, #1
     e28:	2d00      	cmp	r5, #0
     e2a:	d1fb      	bne.n	e24 <__eqsf2+0x24>
     e2c:	2cff      	cmp	r4, #255	; 0xff
     e2e:	d1f6      	bne.n	e1e <__eqsf2+0x1e>
     e30:	2001      	movs	r0, #1
     e32:	2e00      	cmp	r6, #0
     e34:	d1f6      	bne.n	e24 <__eqsf2+0x24>
     e36:	2001      	movs	r0, #1
     e38:	42a2      	cmp	r2, r4
     e3a:	d1f3      	bne.n	e24 <__eqsf2+0x24>
     e3c:	42b5      	cmp	r5, r6
     e3e:	d1f1      	bne.n	e24 <__eqsf2+0x24>
     e40:	428b      	cmp	r3, r1
     e42:	d005      	beq.n	e50 <__eqsf2+0x50>
     e44:	2a00      	cmp	r2, #0
     e46:	d1ed      	bne.n	e24 <__eqsf2+0x24>
     e48:	1c28      	adds	r0, r5, #0
     e4a:	1e43      	subs	r3, r0, #1
     e4c:	4198      	sbcs	r0, r3
     e4e:	e7e9      	b.n	e24 <__eqsf2+0x24>
     e50:	2000      	movs	r0, #0
     e52:	e7e7      	b.n	e24 <__eqsf2+0x24>

00000e54 <__gesf2>:
__gtsf2():
     e54:	b5f0      	push	{r4, r5, r6, r7, lr}
     e56:	0243      	lsls	r3, r0, #9
     e58:	024d      	lsls	r5, r1, #9
     e5a:	004a      	lsls	r2, r1, #1
     e5c:	0044      	lsls	r4, r0, #1
     e5e:	0a5e      	lsrs	r6, r3, #9
     e60:	0e24      	lsrs	r4, r4, #24
     e62:	0fc3      	lsrs	r3, r0, #31
     e64:	0a6d      	lsrs	r5, r5, #9
     e66:	0e12      	lsrs	r2, r2, #24
     e68:	0fc9      	lsrs	r1, r1, #31
     e6a:	2cff      	cmp	r4, #255	; 0xff
     e6c:	d00d      	beq.n	e8a <__gesf2+0x36>
     e6e:	2aff      	cmp	r2, #255	; 0xff
     e70:	d031      	beq.n	ed6 <__gesf2+0x82>
     e72:	2c00      	cmp	r4, #0
     e74:	d10d      	bne.n	e92 <__gesf2+0x3e>
     e76:	4277      	negs	r7, r6
     e78:	4177      	adcs	r7, r6
     e7a:	2a00      	cmp	r2, #0
     e7c:	d123      	bne.n	ec6 <__gesf2+0x72>
     e7e:	2d00      	cmp	r5, #0
     e80:	d121      	bne.n	ec6 <__gesf2+0x72>
     e82:	2000      	movs	r0, #0
     e84:	2f00      	cmp	r7, #0
     e86:	d10b      	bne.n	ea0 <__gesf2+0x4c>
     e88:	e007      	b.n	e9a <__gesf2+0x46>
     e8a:	2e00      	cmp	r6, #0
     e8c:	d128      	bne.n	ee0 <__gesf2+0x8c>
     e8e:	2aff      	cmp	r2, #255	; 0xff
     e90:	d021      	beq.n	ed6 <__gesf2+0x82>
     e92:	2a00      	cmp	r2, #0
     e94:	d005      	beq.n	ea2 <__gesf2+0x4e>
     e96:	428b      	cmp	r3, r1
     e98:	d007      	beq.n	eaa <__gesf2+0x56>
     e9a:	4258      	negs	r0, r3
     e9c:	2301      	movs	r3, #1
     e9e:	4318      	orrs	r0, r3
     ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ea2:	2d00      	cmp	r5, #0
     ea4:	d0f9      	beq.n	e9a <__gesf2+0x46>
     ea6:	428b      	cmp	r3, r1
     ea8:	d1f7      	bne.n	e9a <__gesf2+0x46>
     eaa:	4294      	cmp	r4, r2
     eac:	dcf5      	bgt.n	e9a <__gesf2+0x46>
     eae:	db04      	blt.n	eba <__gesf2+0x66>
     eb0:	42ae      	cmp	r6, r5
     eb2:	d8f2      	bhi.n	e9a <__gesf2+0x46>
     eb4:	2000      	movs	r0, #0
     eb6:	42ae      	cmp	r6, r5
     eb8:	d2f2      	bcs.n	ea0 <__gesf2+0x4c>
     eba:	4258      	negs	r0, r3
     ebc:	4143      	adcs	r3, r0
     ebe:	2001      	movs	r0, #1
     ec0:	425b      	negs	r3, r3
     ec2:	4318      	orrs	r0, r3
     ec4:	e7ec      	b.n	ea0 <__gesf2+0x4c>
     ec6:	2f00      	cmp	r7, #0
     ec8:	d0e5      	beq.n	e96 <__gesf2+0x42>
     eca:	4248      	negs	r0, r1
     ecc:	4141      	adcs	r1, r0
     ece:	2001      	movs	r0, #1
     ed0:	4249      	negs	r1, r1
     ed2:	4308      	orrs	r0, r1
     ed4:	e7e4      	b.n	ea0 <__gesf2+0x4c>
     ed6:	2d00      	cmp	r5, #0
     ed8:	d102      	bne.n	ee0 <__gesf2+0x8c>
     eda:	2c00      	cmp	r4, #0
     edc:	d0cb      	beq.n	e76 <__gesf2+0x22>
     ede:	e7da      	b.n	e96 <__gesf2+0x42>
     ee0:	2002      	movs	r0, #2
     ee2:	4240      	negs	r0, r0
     ee4:	e7dc      	b.n	ea0 <__gesf2+0x4c>
     ee6:	46c0      	nop			; (mov r8, r8)

00000ee8 <__lesf2>:
__lesf2():
     ee8:	0243      	lsls	r3, r0, #9
     eea:	b5f0      	push	{r4, r5, r6, r7, lr}
     eec:	0042      	lsls	r2, r0, #1
     eee:	004c      	lsls	r4, r1, #1
     ef0:	0a5e      	lsrs	r6, r3, #9
     ef2:	0fc3      	lsrs	r3, r0, #31
     ef4:	0248      	lsls	r0, r1, #9
     ef6:	0e12      	lsrs	r2, r2, #24
     ef8:	0a45      	lsrs	r5, r0, #9
     efa:	0e24      	lsrs	r4, r4, #24
     efc:	0fc9      	lsrs	r1, r1, #31
     efe:	2aff      	cmp	r2, #255	; 0xff
     f00:	d00f      	beq.n	f22 <__lesf2+0x3a>
     f02:	2cff      	cmp	r4, #255	; 0xff
     f04:	d01a      	beq.n	f3c <__lesf2+0x54>
     f06:	2a00      	cmp	r2, #0
     f08:	d110      	bne.n	f2c <__lesf2+0x44>
     f0a:	4277      	negs	r7, r6
     f0c:	4177      	adcs	r7, r6
     f0e:	2c00      	cmp	r4, #0
     f10:	d029      	beq.n	f66 <__lesf2+0x7e>
     f12:	2f00      	cmp	r7, #0
     f14:	d017      	beq.n	f46 <__lesf2+0x5e>
     f16:	4248      	negs	r0, r1
     f18:	4141      	adcs	r1, r0
     f1a:	2001      	movs	r0, #1
     f1c:	4249      	negs	r1, r1
     f1e:	4308      	orrs	r0, r1
     f20:	e00b      	b.n	f3a <__lesf2+0x52>
     f22:	2002      	movs	r0, #2
     f24:	2e00      	cmp	r6, #0
     f26:	d108      	bne.n	f3a <__lesf2+0x52>
     f28:	2cff      	cmp	r4, #255	; 0xff
     f2a:	d007      	beq.n	f3c <__lesf2+0x54>
     f2c:	2c00      	cmp	r4, #0
     f2e:	d10a      	bne.n	f46 <__lesf2+0x5e>
     f30:	2d00      	cmp	r5, #0
     f32:	d108      	bne.n	f46 <__lesf2+0x5e>
     f34:	4258      	negs	r0, r3
     f36:	2301      	movs	r3, #1
     f38:	4318      	orrs	r0, r3
     f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f3c:	2002      	movs	r0, #2
     f3e:	2d00      	cmp	r5, #0
     f40:	d1fb      	bne.n	f3a <__lesf2+0x52>
     f42:	2a00      	cmp	r2, #0
     f44:	d0e1      	beq.n	f0a <__lesf2+0x22>
     f46:	428b      	cmp	r3, r1
     f48:	d1f4      	bne.n	f34 <__lesf2+0x4c>
     f4a:	42a2      	cmp	r2, r4
     f4c:	dcf2      	bgt.n	f34 <__lesf2+0x4c>
     f4e:	db04      	blt.n	f5a <__lesf2+0x72>
     f50:	42ae      	cmp	r6, r5
     f52:	d8ef      	bhi.n	f34 <__lesf2+0x4c>
     f54:	2000      	movs	r0, #0
     f56:	42ae      	cmp	r6, r5
     f58:	d2ef      	bcs.n	f3a <__lesf2+0x52>
     f5a:	4258      	negs	r0, r3
     f5c:	4143      	adcs	r3, r0
     f5e:	2001      	movs	r0, #1
     f60:	425b      	negs	r3, r3
     f62:	4318      	orrs	r0, r3
     f64:	e7e9      	b.n	f3a <__lesf2+0x52>
     f66:	2d00      	cmp	r5, #0
     f68:	d1d3      	bne.n	f12 <__lesf2+0x2a>
     f6a:	2000      	movs	r0, #0
     f6c:	2f00      	cmp	r7, #0
     f6e:	d1e4      	bne.n	f3a <__lesf2+0x52>
     f70:	e7e0      	b.n	f34 <__lesf2+0x4c>
     f72:	46c0      	nop			; (mov r8, r8)

00000f74 <__aeabi_fmul>:
__aeabi_fmul():
     f74:	b5f0      	push	{r4, r5, r6, r7, lr}
     f76:	465f      	mov	r7, fp
     f78:	4656      	mov	r6, sl
     f7a:	464d      	mov	r5, r9
     f7c:	4644      	mov	r4, r8
     f7e:	b4f0      	push	{r4, r5, r6, r7}
     f80:	0245      	lsls	r5, r0, #9
     f82:	0046      	lsls	r6, r0, #1
     f84:	0fc4      	lsrs	r4, r0, #31
     f86:	b083      	sub	sp, #12
     f88:	1c0f      	adds	r7, r1, #0
     f8a:	0a6d      	lsrs	r5, r5, #9
     f8c:	0e36      	lsrs	r6, r6, #24
     f8e:	46a3      	mov	fp, r4
     f90:	d045      	beq.n	101e <PREEMPTION_DISABLED+0x1e>
     f92:	2eff      	cmp	r6, #255	; 0xff
     f94:	d025      	beq.n	fe2 <__aeabi_fmul+0x6e>
     f96:	2380      	movs	r3, #128	; 0x80
     f98:	041b      	lsls	r3, r3, #16
     f9a:	431d      	orrs	r5, r3
     f9c:	2300      	movs	r3, #0
     f9e:	469a      	mov	sl, r3
     fa0:	00ed      	lsls	r5, r5, #3
     fa2:	3e7f      	subs	r6, #127	; 0x7f
     fa4:	9301      	str	r3, [sp, #4]
     fa6:	027b      	lsls	r3, r7, #9
     fa8:	0a5b      	lsrs	r3, r3, #9
     faa:	4698      	mov	r8, r3
     fac:	0078      	lsls	r0, r7, #1
     fae:	0ffb      	lsrs	r3, r7, #31
     fb0:	0e00      	lsrs	r0, r0, #24
     fb2:	4699      	mov	r9, r3
     fb4:	d040      	beq.n	1038 <PREEMPTION_DISABLED+0x38>
     fb6:	28ff      	cmp	r0, #255	; 0xff
     fb8:	d038      	beq.n	102c <PREEMPTION_DISABLED+0x2c>
     fba:	2380      	movs	r3, #128	; 0x80
     fbc:	4642      	mov	r2, r8
     fbe:	041b      	lsls	r3, r3, #16
     fc0:	4313      	orrs	r3, r2
     fc2:	00db      	lsls	r3, r3, #3
     fc4:	4698      	mov	r8, r3
     fc6:	2300      	movs	r3, #0
     fc8:	387f      	subs	r0, #127	; 0x7f
     fca:	464a      	mov	r2, r9
     fcc:	9f01      	ldr	r7, [sp, #4]
     fce:	1830      	adds	r0, r6, r0
     fd0:	4062      	eors	r2, r4
     fd2:	1c41      	adds	r1, r0, #1
     fd4:	431f      	orrs	r7, r3
     fd6:	2f0f      	cmp	r7, #15
     fd8:	d869      	bhi.n	10ae <PREEMPTION_DISABLED+0xae>
     fda:	4e7d      	ldr	r6, [pc, #500]	; (11d0 <PREEMPTION_DISABLED+0x1d0>)
     fdc:	00bf      	lsls	r7, r7, #2
     fde:	59f6      	ldr	r6, [r6, r7]
     fe0:	46b7      	mov	pc, r6
     fe2:	2d00      	cmp	r5, #0
     fe4:	d145      	bne.n	1072 <PREEMPTION_DISABLED+0x72>
     fe6:	2308      	movs	r3, #8
     fe8:	9301      	str	r3, [sp, #4]
     fea:	3b06      	subs	r3, #6
     fec:	469a      	mov	sl, r3
     fee:	e7da      	b.n	fa6 <__aeabi_fmul+0x32>
     ff0:	4693      	mov	fp, r2
     ff2:	4653      	mov	r3, sl
     ff4:	2b02      	cmp	r3, #2
     ff6:	d12f      	bne.n	1058 <PREEMPTION_DISABLED+0x58>
     ff8:	465b      	mov	r3, fp
     ffa:	2401      	movs	r4, #1
     ffc:	2500      	movs	r5, #0
     ffe:	401c      	ands	r4, r3
    1000:	23ff      	movs	r3, #255	; 0xff
    1002:	026d      	lsls	r5, r5, #9
    1004:	05db      	lsls	r3, r3, #23
    1006:	0a6d      	lsrs	r5, r5, #9
    1008:	07e4      	lsls	r4, r4, #31
    100a:	431d      	orrs	r5, r3
    100c:	4325      	orrs	r5, r4
    100e:	1c28      	adds	r0, r5, #0
    1010:	b003      	add	sp, #12
    1012:	bc3c      	pop	{r2, r3, r4, r5}
    1014:	4690      	mov	r8, r2
    1016:	4699      	mov	r9, r3
    1018:	46a2      	mov	sl, r4
    101a:	46ab      	mov	fp, r5
    101c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    101e:	2d00      	cmp	r5, #0
    1020:	d12c      	bne.n	107c <PREEMPTION_DISABLED+0x7c>
    1022:	2304      	movs	r3, #4
    1024:	9301      	str	r3, [sp, #4]
    1026:	3b03      	subs	r3, #3
    1028:	469a      	mov	sl, r3
    102a:	e7bc      	b.n	fa6 <__aeabi_fmul+0x32>
    102c:	4643      	mov	r3, r8
    102e:	425a      	negs	r2, r3
    1030:	4153      	adcs	r3, r2
    1032:	2203      	movs	r2, #3
    1034:	1ad3      	subs	r3, r2, r3
    1036:	e7c8      	b.n	fca <__aeabi_fmul+0x56>
    1038:	4642      	mov	r2, r8
    103a:	2301      	movs	r3, #1
    103c:	2a00      	cmp	r2, #0
    103e:	d0c4      	beq.n	fca <__aeabi_fmul+0x56>
    1040:	4640      	mov	r0, r8
    1042:	f001 fe73 	bl	2d2c <__clzsi2>
    1046:	4642      	mov	r2, r8
    1048:	1f43      	subs	r3, r0, #5
    104a:	409a      	lsls	r2, r3
    104c:	2376      	movs	r3, #118	; 0x76
    104e:	425b      	negs	r3, r3
    1050:	1a18      	subs	r0, r3, r0
    1052:	4690      	mov	r8, r2
    1054:	2300      	movs	r3, #0
    1056:	e7b8      	b.n	fca <__aeabi_fmul+0x56>
    1058:	2b03      	cmp	r3, #3
    105a:	d100      	bne.n	105e <PREEMPTION_DISABLED+0x5e>
    105c:	e0ad      	b.n	11ba <PREEMPTION_DISABLED+0x1ba>
    105e:	2b01      	cmp	r3, #1
    1060:	d000      	beq.n	1064 <PREEMPTION_DISABLED+0x64>
    1062:	e08c      	b.n	117e <PREEMPTION_DISABLED+0x17e>
    1064:	465b      	mov	r3, fp
    1066:	4654      	mov	r4, sl
    1068:	401c      	ands	r4, r3
    106a:	b2e4      	uxtb	r4, r4
    106c:	2300      	movs	r3, #0
    106e:	2500      	movs	r5, #0
    1070:	e7c7      	b.n	1002 <PREEMPTION_DISABLED+0x2>
    1072:	230c      	movs	r3, #12
    1074:	9301      	str	r3, [sp, #4]
    1076:	3b09      	subs	r3, #9
    1078:	469a      	mov	sl, r3
    107a:	e794      	b.n	fa6 <__aeabi_fmul+0x32>
    107c:	1c28      	adds	r0, r5, #0
    107e:	f001 fe55 	bl	2d2c <__clzsi2>
    1082:	2676      	movs	r6, #118	; 0x76
    1084:	1f43      	subs	r3, r0, #5
    1086:	409d      	lsls	r5, r3
    1088:	2300      	movs	r3, #0
    108a:	4276      	negs	r6, r6
    108c:	1a36      	subs	r6, r6, r0
    108e:	9301      	str	r3, [sp, #4]
    1090:	469a      	mov	sl, r3
    1092:	e788      	b.n	fa6 <__aeabi_fmul+0x32>
    1094:	2580      	movs	r5, #128	; 0x80
    1096:	2400      	movs	r4, #0
    1098:	03ed      	lsls	r5, r5, #15
    109a:	23ff      	movs	r3, #255	; 0xff
    109c:	e7b1      	b.n	1002 <PREEMPTION_DISABLED+0x2>
    109e:	4645      	mov	r5, r8
    10a0:	46cb      	mov	fp, r9
    10a2:	469a      	mov	sl, r3
    10a4:	e7a5      	b.n	ff2 <__aeabi_fmul+0x7e>
    10a6:	4645      	mov	r5, r8
    10a8:	4693      	mov	fp, r2
    10aa:	469a      	mov	sl, r3
    10ac:	e7a1      	b.n	ff2 <__aeabi_fmul+0x7e>
    10ae:	4643      	mov	r3, r8
    10b0:	042c      	lsls	r4, r5, #16
    10b2:	0c1b      	lsrs	r3, r3, #16
    10b4:	469c      	mov	ip, r3
    10b6:	0c23      	lsrs	r3, r4, #16
    10b8:	4644      	mov	r4, r8
    10ba:	0426      	lsls	r6, r4, #16
    10bc:	1c1c      	adds	r4, r3, #0
    10be:	0c36      	lsrs	r6, r6, #16
    10c0:	0c2f      	lsrs	r7, r5, #16
    10c2:	4374      	muls	r4, r6
    10c4:	1c35      	adds	r5, r6, #0
    10c6:	4666      	mov	r6, ip
    10c8:	437d      	muls	r5, r7
    10ca:	4373      	muls	r3, r6
    10cc:	4377      	muls	r7, r6
    10ce:	18eb      	adds	r3, r5, r3
    10d0:	0c26      	lsrs	r6, r4, #16
    10d2:	199e      	adds	r6, r3, r6
    10d4:	42b5      	cmp	r5, r6
    10d6:	d903      	bls.n	10e0 <PREEMPTION_DISABLED+0xe0>
    10d8:	2380      	movs	r3, #128	; 0x80
    10da:	025b      	lsls	r3, r3, #9
    10dc:	469c      	mov	ip, r3
    10de:	4467      	add	r7, ip
    10e0:	0424      	lsls	r4, r4, #16
    10e2:	0433      	lsls	r3, r6, #16
    10e4:	0c24      	lsrs	r4, r4, #16
    10e6:	191b      	adds	r3, r3, r4
    10e8:	019d      	lsls	r5, r3, #6
    10ea:	1e6c      	subs	r4, r5, #1
    10ec:	41a5      	sbcs	r5, r4
    10ee:	0e9b      	lsrs	r3, r3, #26
    10f0:	0c36      	lsrs	r6, r6, #16
    10f2:	432b      	orrs	r3, r5
    10f4:	19bd      	adds	r5, r7, r6
    10f6:	01ad      	lsls	r5, r5, #6
    10f8:	431d      	orrs	r5, r3
    10fa:	012b      	lsls	r3, r5, #4
    10fc:	d504      	bpl.n	1108 <PREEMPTION_DISABLED+0x108>
    10fe:	2301      	movs	r3, #1
    1100:	0868      	lsrs	r0, r5, #1
    1102:	401d      	ands	r5, r3
    1104:	4305      	orrs	r5, r0
    1106:	1c08      	adds	r0, r1, #0
    1108:	1c03      	adds	r3, r0, #0
    110a:	337f      	adds	r3, #127	; 0x7f
    110c:	2b00      	cmp	r3, #0
    110e:	dd2c      	ble.n	116a <PREEMPTION_DISABLED+0x16a>
    1110:	0769      	lsls	r1, r5, #29
    1112:	d004      	beq.n	111e <PREEMPTION_DISABLED+0x11e>
    1114:	210f      	movs	r1, #15
    1116:	4029      	ands	r1, r5
    1118:	2904      	cmp	r1, #4
    111a:	d000      	beq.n	111e <PREEMPTION_DISABLED+0x11e>
    111c:	3504      	adds	r5, #4
    111e:	0129      	lsls	r1, r5, #4
    1120:	d503      	bpl.n	112a <PREEMPTION_DISABLED+0x12a>
    1122:	4b2c      	ldr	r3, [pc, #176]	; (11d4 <PREEMPTION_DISABLED+0x1d4>)
    1124:	401d      	ands	r5, r3
    1126:	1c03      	adds	r3, r0, #0
    1128:	3380      	adds	r3, #128	; 0x80
    112a:	2bfe      	cmp	r3, #254	; 0xfe
    112c:	dd17      	ble.n	115e <PREEMPTION_DISABLED+0x15e>
    112e:	2401      	movs	r4, #1
    1130:	23ff      	movs	r3, #255	; 0xff
    1132:	4014      	ands	r4, r2
    1134:	2500      	movs	r5, #0
    1136:	e764      	b.n	1002 <PREEMPTION_DISABLED+0x2>
    1138:	2080      	movs	r0, #128	; 0x80
    113a:	03c0      	lsls	r0, r0, #15
    113c:	4205      	tst	r5, r0
    113e:	d009      	beq.n	1154 <PREEMPTION_DISABLED+0x154>
    1140:	4643      	mov	r3, r8
    1142:	4203      	tst	r3, r0
    1144:	d106      	bne.n	1154 <PREEMPTION_DISABLED+0x154>
    1146:	4645      	mov	r5, r8
    1148:	4305      	orrs	r5, r0
    114a:	026d      	lsls	r5, r5, #9
    114c:	0a6d      	lsrs	r5, r5, #9
    114e:	464c      	mov	r4, r9
    1150:	23ff      	movs	r3, #255	; 0xff
    1152:	e756      	b.n	1002 <PREEMPTION_DISABLED+0x2>
    1154:	4305      	orrs	r5, r0
    1156:	026d      	lsls	r5, r5, #9
    1158:	0a6d      	lsrs	r5, r5, #9
    115a:	23ff      	movs	r3, #255	; 0xff
    115c:	e751      	b.n	1002 <PREEMPTION_DISABLED+0x2>
    115e:	2401      	movs	r4, #1
    1160:	01ad      	lsls	r5, r5, #6
    1162:	0a6d      	lsrs	r5, r5, #9
    1164:	b2db      	uxtb	r3, r3
    1166:	4014      	ands	r4, r2
    1168:	e74b      	b.n	1002 <PREEMPTION_DISABLED+0x2>
    116a:	237e      	movs	r3, #126	; 0x7e
    116c:	425b      	negs	r3, r3
    116e:	1a1b      	subs	r3, r3, r0
    1170:	2b1b      	cmp	r3, #27
    1172:	dd07      	ble.n	1184 <PREEMPTION_DISABLED+0x184>
    1174:	2401      	movs	r4, #1
    1176:	2300      	movs	r3, #0
    1178:	4014      	ands	r4, r2
    117a:	2500      	movs	r5, #0
    117c:	e741      	b.n	1002 <PREEMPTION_DISABLED+0x2>
    117e:	1c08      	adds	r0, r1, #0
    1180:	465a      	mov	r2, fp
    1182:	e7c1      	b.n	1108 <PREEMPTION_DISABLED+0x108>
    1184:	309e      	adds	r0, #158	; 0x9e
    1186:	1c29      	adds	r1, r5, #0
    1188:	4085      	lsls	r5, r0
    118a:	40d9      	lsrs	r1, r3
    118c:	1e68      	subs	r0, r5, #1
    118e:	4185      	sbcs	r5, r0
    1190:	430d      	orrs	r5, r1
    1192:	076b      	lsls	r3, r5, #29
    1194:	d004      	beq.n	11a0 <PREEMPTION_DISABLED+0x1a0>
    1196:	230f      	movs	r3, #15
    1198:	402b      	ands	r3, r5
    119a:	2b04      	cmp	r3, #4
    119c:	d000      	beq.n	11a0 <PREEMPTION_DISABLED+0x1a0>
    119e:	3504      	adds	r5, #4
    11a0:	016b      	lsls	r3, r5, #5
    11a2:	d504      	bpl.n	11ae <PREEMPTION_DISABLED+0x1ae>
    11a4:	2401      	movs	r4, #1
    11a6:	2301      	movs	r3, #1
    11a8:	4014      	ands	r4, r2
    11aa:	2500      	movs	r5, #0
    11ac:	e729      	b.n	1002 <PREEMPTION_DISABLED+0x2>
    11ae:	2401      	movs	r4, #1
    11b0:	01ad      	lsls	r5, r5, #6
    11b2:	0a6d      	lsrs	r5, r5, #9
    11b4:	4014      	ands	r4, r2
    11b6:	2300      	movs	r3, #0
    11b8:	e723      	b.n	1002 <PREEMPTION_DISABLED+0x2>
    11ba:	2380      	movs	r3, #128	; 0x80
    11bc:	03db      	lsls	r3, r3, #15
    11be:	431d      	orrs	r5, r3
    11c0:	2401      	movs	r4, #1
    11c2:	465b      	mov	r3, fp
    11c4:	026d      	lsls	r5, r5, #9
    11c6:	4023      	ands	r3, r4
    11c8:	1c1c      	adds	r4, r3, #0
    11ca:	0a6d      	lsrs	r5, r5, #9
    11cc:	23ff      	movs	r3, #255	; 0xff
    11ce:	e718      	b.n	1002 <PREEMPTION_DISABLED+0x2>
    11d0:	0001463c 	.word	0x0001463c
    11d4:	f7ffffff 	.word	0xf7ffffff

000011d8 <__aeabi_fsub>:
__aeabi_fsub():
    11d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11da:	004a      	lsls	r2, r1, #1
    11dc:	0243      	lsls	r3, r0, #9
    11de:	0044      	lsls	r4, r0, #1
    11e0:	024d      	lsls	r5, r1, #9
    11e2:	0fc0      	lsrs	r0, r0, #31
    11e4:	0e24      	lsrs	r4, r4, #24
    11e6:	1c06      	adds	r6, r0, #0
    11e8:	099b      	lsrs	r3, r3, #6
    11ea:	0e12      	lsrs	r2, r2, #24
    11ec:	0fc9      	lsrs	r1, r1, #31
    11ee:	09ad      	lsrs	r5, r5, #6
    11f0:	2aff      	cmp	r2, #255	; 0xff
    11f2:	d100      	bne.n	11f6 <__aeabi_fsub+0x1e>
    11f4:	e075      	b.n	12e2 <__aeabi_fsub+0x10a>
    11f6:	2701      	movs	r7, #1
    11f8:	4079      	eors	r1, r7
    11fa:	4288      	cmp	r0, r1
    11fc:	d050      	beq.n	12a0 <__aeabi_fsub+0xc8>
    11fe:	1aa0      	subs	r0, r4, r2
    1200:	2800      	cmp	r0, #0
    1202:	dc00      	bgt.n	1206 <__aeabi_fsub+0x2e>
    1204:	e08f      	b.n	1326 <__aeabi_fsub+0x14e>
    1206:	2a00      	cmp	r2, #0
    1208:	d11e      	bne.n	1248 <__aeabi_fsub+0x70>
    120a:	2d00      	cmp	r5, #0
    120c:	d000      	beq.n	1210 <__aeabi_fsub+0x38>
    120e:	e075      	b.n	12fc <__aeabi_fsub+0x124>
    1210:	075a      	lsls	r2, r3, #29
    1212:	d004      	beq.n	121e <__aeabi_fsub+0x46>
    1214:	220f      	movs	r2, #15
    1216:	401a      	ands	r2, r3
    1218:	2a04      	cmp	r2, #4
    121a:	d000      	beq.n	121e <__aeabi_fsub+0x46>
    121c:	3304      	adds	r3, #4
    121e:	2280      	movs	r2, #128	; 0x80
    1220:	2001      	movs	r0, #1
    1222:	04d2      	lsls	r2, r2, #19
    1224:	401a      	ands	r2, r3
    1226:	4030      	ands	r0, r6
    1228:	2a00      	cmp	r2, #0
    122a:	d032      	beq.n	1292 <__aeabi_fsub+0xba>
    122c:	3401      	adds	r4, #1
    122e:	2cff      	cmp	r4, #255	; 0xff
    1230:	d100      	bne.n	1234 <__aeabi_fsub+0x5c>
    1232:	e084      	b.n	133e <__aeabi_fsub+0x166>
    1234:	019b      	lsls	r3, r3, #6
    1236:	0a5b      	lsrs	r3, r3, #9
    1238:	b2e4      	uxtb	r4, r4
    123a:	025b      	lsls	r3, r3, #9
    123c:	05e4      	lsls	r4, r4, #23
    123e:	0a5b      	lsrs	r3, r3, #9
    1240:	4323      	orrs	r3, r4
    1242:	07c0      	lsls	r0, r0, #31
    1244:	4318      	orrs	r0, r3
    1246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1248:	2cff      	cmp	r4, #255	; 0xff
    124a:	d0e1      	beq.n	1210 <__aeabi_fsub+0x38>
    124c:	2280      	movs	r2, #128	; 0x80
    124e:	04d2      	lsls	r2, r2, #19
    1250:	4315      	orrs	r5, r2
    1252:	281b      	cmp	r0, #27
    1254:	dd7a      	ble.n	134c <__aeabi_fsub+0x174>
    1256:	2501      	movs	r5, #1
    1258:	1b5b      	subs	r3, r3, r5
    125a:	015a      	lsls	r2, r3, #5
    125c:	d55d      	bpl.n	131a <__aeabi_fsub+0x142>
    125e:	019b      	lsls	r3, r3, #6
    1260:	099f      	lsrs	r7, r3, #6
    1262:	1c38      	adds	r0, r7, #0
    1264:	f001 fd62 	bl	2d2c <__clzsi2>
    1268:	3805      	subs	r0, #5
    126a:	4087      	lsls	r7, r0
    126c:	4284      	cmp	r4, r0
    126e:	dc69      	bgt.n	1344 <__aeabi_fsub+0x16c>
    1270:	1b00      	subs	r0, r0, r4
    1272:	241f      	movs	r4, #31
    1274:	1c3a      	adds	r2, r7, #0
    1276:	1c43      	adds	r3, r0, #1
    1278:	1a20      	subs	r0, r4, r0
    127a:	40da      	lsrs	r2, r3
    127c:	4087      	lsls	r7, r0
    127e:	1c13      	adds	r3, r2, #0
    1280:	1e7c      	subs	r4, r7, #1
    1282:	41a7      	sbcs	r7, r4
    1284:	2400      	movs	r4, #0
    1286:	433b      	orrs	r3, r7
    1288:	e7c2      	b.n	1210 <__aeabi_fsub+0x38>
    128a:	1e13      	subs	r3, r2, #0
    128c:	d145      	bne.n	131a <__aeabi_fsub+0x142>
    128e:	2300      	movs	r3, #0
    1290:	2000      	movs	r0, #0
    1292:	08db      	lsrs	r3, r3, #3
    1294:	2cff      	cmp	r4, #255	; 0xff
    1296:	d028      	beq.n	12ea <__aeabi_fsub+0x112>
    1298:	025b      	lsls	r3, r3, #9
    129a:	0a5b      	lsrs	r3, r3, #9
    129c:	b2e4      	uxtb	r4, r4
    129e:	e7cc      	b.n	123a <__aeabi_fsub+0x62>
    12a0:	1aa1      	subs	r1, r4, r2
    12a2:	2900      	cmp	r1, #0
    12a4:	dd5b      	ble.n	135e <__aeabi_fsub+0x186>
    12a6:	2a00      	cmp	r2, #0
    12a8:	d02e      	beq.n	1308 <__aeabi_fsub+0x130>
    12aa:	2cff      	cmp	r4, #255	; 0xff
    12ac:	d0b0      	beq.n	1210 <__aeabi_fsub+0x38>
    12ae:	2280      	movs	r2, #128	; 0x80
    12b0:	04d2      	lsls	r2, r2, #19
    12b2:	4315      	orrs	r5, r2
    12b4:	291b      	cmp	r1, #27
    12b6:	dc74      	bgt.n	13a2 <__aeabi_fsub+0x1ca>
    12b8:	1c2f      	adds	r7, r5, #0
    12ba:	2220      	movs	r2, #32
    12bc:	40cf      	lsrs	r7, r1
    12be:	1a51      	subs	r1, r2, r1
    12c0:	408d      	lsls	r5, r1
    12c2:	1e69      	subs	r1, r5, #1
    12c4:	418d      	sbcs	r5, r1
    12c6:	433d      	orrs	r5, r7
    12c8:	195b      	adds	r3, r3, r5
    12ca:	015a      	lsls	r2, r3, #5
    12cc:	d525      	bpl.n	131a <__aeabi_fsub+0x142>
    12ce:	3401      	adds	r4, #1
    12d0:	2cff      	cmp	r4, #255	; 0xff
    12d2:	d074      	beq.n	13be <__aeabi_fsub+0x1e6>
    12d4:	2101      	movs	r1, #1
    12d6:	4a7e      	ldr	r2, [pc, #504]	; (14d0 <__aeabi_fsub+0x2f8>)
    12d8:	4019      	ands	r1, r3
    12da:	4013      	ands	r3, r2
    12dc:	085b      	lsrs	r3, r3, #1
    12de:	430b      	orrs	r3, r1
    12e0:	e796      	b.n	1210 <__aeabi_fsub+0x38>
    12e2:	2d00      	cmp	r5, #0
    12e4:	d000      	beq.n	12e8 <__aeabi_fsub+0x110>
    12e6:	e788      	b.n	11fa <__aeabi_fsub+0x22>
    12e8:	e785      	b.n	11f6 <__aeabi_fsub+0x1e>
    12ea:	2b00      	cmp	r3, #0
    12ec:	d027      	beq.n	133e <__aeabi_fsub+0x166>
    12ee:	2280      	movs	r2, #128	; 0x80
    12f0:	03d2      	lsls	r2, r2, #15
    12f2:	4313      	orrs	r3, r2
    12f4:	025b      	lsls	r3, r3, #9
    12f6:	0a5b      	lsrs	r3, r3, #9
    12f8:	24ff      	movs	r4, #255	; 0xff
    12fa:	e79e      	b.n	123a <__aeabi_fsub+0x62>
    12fc:	3801      	subs	r0, #1
    12fe:	2800      	cmp	r0, #0
    1300:	d0aa      	beq.n	1258 <__aeabi_fsub+0x80>
    1302:	2cff      	cmp	r4, #255	; 0xff
    1304:	d1a5      	bne.n	1252 <__aeabi_fsub+0x7a>
    1306:	e783      	b.n	1210 <__aeabi_fsub+0x38>
    1308:	2d00      	cmp	r5, #0
    130a:	d100      	bne.n	130e <__aeabi_fsub+0x136>
    130c:	e780      	b.n	1210 <__aeabi_fsub+0x38>
    130e:	3901      	subs	r1, #1
    1310:	2900      	cmp	r1, #0
    1312:	d0d9      	beq.n	12c8 <__aeabi_fsub+0xf0>
    1314:	2cff      	cmp	r4, #255	; 0xff
    1316:	d1cd      	bne.n	12b4 <__aeabi_fsub+0xdc>
    1318:	e77a      	b.n	1210 <__aeabi_fsub+0x38>
    131a:	075a      	lsls	r2, r3, #29
    131c:	d000      	beq.n	1320 <__aeabi_fsub+0x148>
    131e:	e779      	b.n	1214 <__aeabi_fsub+0x3c>
    1320:	2001      	movs	r0, #1
    1322:	4030      	ands	r0, r6
    1324:	e7b5      	b.n	1292 <__aeabi_fsub+0xba>
    1326:	2800      	cmp	r0, #0
    1328:	d125      	bne.n	1376 <__aeabi_fsub+0x19e>
    132a:	1c62      	adds	r2, r4, #1
    132c:	b2d2      	uxtb	r2, r2
    132e:	2a01      	cmp	r2, #1
    1330:	dd55      	ble.n	13de <__aeabi_fsub+0x206>
    1332:	1b5f      	subs	r7, r3, r5
    1334:	017a      	lsls	r2, r7, #5
    1336:	d52d      	bpl.n	1394 <__aeabi_fsub+0x1bc>
    1338:	1aef      	subs	r7, r5, r3
    133a:	1c0e      	adds	r6, r1, #0
    133c:	e791      	b.n	1262 <__aeabi_fsub+0x8a>
    133e:	24ff      	movs	r4, #255	; 0xff
    1340:	2300      	movs	r3, #0
    1342:	e77a      	b.n	123a <__aeabi_fsub+0x62>
    1344:	4b62      	ldr	r3, [pc, #392]	; (14d0 <__aeabi_fsub+0x2f8>)
    1346:	1a24      	subs	r4, r4, r0
    1348:	403b      	ands	r3, r7
    134a:	e761      	b.n	1210 <__aeabi_fsub+0x38>
    134c:	1c29      	adds	r1, r5, #0
    134e:	2220      	movs	r2, #32
    1350:	40c1      	lsrs	r1, r0
    1352:	1a10      	subs	r0, r2, r0
    1354:	4085      	lsls	r5, r0
    1356:	1e68      	subs	r0, r5, #1
    1358:	4185      	sbcs	r5, r0
    135a:	430d      	orrs	r5, r1
    135c:	e77c      	b.n	1258 <__aeabi_fsub+0x80>
    135e:	2900      	cmp	r1, #0
    1360:	d146      	bne.n	13f0 <__aeabi_fsub+0x218>
    1362:	1c62      	adds	r2, r4, #1
    1364:	b2d1      	uxtb	r1, r2
    1366:	2901      	cmp	r1, #1
    1368:	dd2b      	ble.n	13c2 <__aeabi_fsub+0x1ea>
    136a:	2aff      	cmp	r2, #255	; 0xff
    136c:	d026      	beq.n	13bc <__aeabi_fsub+0x1e4>
    136e:	18eb      	adds	r3, r5, r3
    1370:	085b      	lsrs	r3, r3, #1
    1372:	1c14      	adds	r4, r2, #0
    1374:	e74c      	b.n	1210 <__aeabi_fsub+0x38>
    1376:	2c00      	cmp	r4, #0
    1378:	d015      	beq.n	13a6 <__aeabi_fsub+0x1ce>
    137a:	2aff      	cmp	r2, #255	; 0xff
    137c:	d01a      	beq.n	13b4 <__aeabi_fsub+0x1dc>
    137e:	2480      	movs	r4, #128	; 0x80
    1380:	04e4      	lsls	r4, r4, #19
    1382:	4240      	negs	r0, r0
    1384:	4323      	orrs	r3, r4
    1386:	281b      	cmp	r0, #27
    1388:	dd4d      	ble.n	1426 <__aeabi_fsub+0x24e>
    138a:	2301      	movs	r3, #1
    138c:	1aeb      	subs	r3, r5, r3
    138e:	1c14      	adds	r4, r2, #0
    1390:	1c0e      	adds	r6, r1, #0
    1392:	e762      	b.n	125a <__aeabi_fsub+0x82>
    1394:	2f00      	cmp	r7, #0
    1396:	d000      	beq.n	139a <__aeabi_fsub+0x1c2>
    1398:	e763      	b.n	1262 <__aeabi_fsub+0x8a>
    139a:	2300      	movs	r3, #0
    139c:	2000      	movs	r0, #0
    139e:	2400      	movs	r4, #0
    13a0:	e777      	b.n	1292 <__aeabi_fsub+0xba>
    13a2:	2501      	movs	r5, #1
    13a4:	e790      	b.n	12c8 <__aeabi_fsub+0xf0>
    13a6:	2b00      	cmp	r3, #0
    13a8:	d039      	beq.n	141e <__aeabi_fsub+0x246>
    13aa:	43c0      	mvns	r0, r0
    13ac:	2800      	cmp	r0, #0
    13ae:	d0ed      	beq.n	138c <__aeabi_fsub+0x1b4>
    13b0:	2aff      	cmp	r2, #255	; 0xff
    13b2:	d1e8      	bne.n	1386 <__aeabi_fsub+0x1ae>
    13b4:	1c2b      	adds	r3, r5, #0
    13b6:	24ff      	movs	r4, #255	; 0xff
    13b8:	1c0e      	adds	r6, r1, #0
    13ba:	e729      	b.n	1210 <__aeabi_fsub+0x38>
    13bc:	24ff      	movs	r4, #255	; 0xff
    13be:	2300      	movs	r3, #0
    13c0:	e767      	b.n	1292 <__aeabi_fsub+0xba>
    13c2:	2c00      	cmp	r4, #0
    13c4:	d15a      	bne.n	147c <__aeabi_fsub+0x2a4>
    13c6:	2b00      	cmp	r3, #0
    13c8:	d07f      	beq.n	14ca <__aeabi_fsub+0x2f2>
    13ca:	2d00      	cmp	r5, #0
    13cc:	d100      	bne.n	13d0 <__aeabi_fsub+0x1f8>
    13ce:	e71f      	b.n	1210 <__aeabi_fsub+0x38>
    13d0:	195b      	adds	r3, r3, r5
    13d2:	015a      	lsls	r2, r3, #5
    13d4:	d5a1      	bpl.n	131a <__aeabi_fsub+0x142>
    13d6:	4a3e      	ldr	r2, [pc, #248]	; (14d0 <__aeabi_fsub+0x2f8>)
    13d8:	3401      	adds	r4, #1
    13da:	4013      	ands	r3, r2
    13dc:	e718      	b.n	1210 <__aeabi_fsub+0x38>
    13de:	2c00      	cmp	r4, #0
    13e0:	d115      	bne.n	140e <__aeabi_fsub+0x236>
    13e2:	2b00      	cmp	r3, #0
    13e4:	d12f      	bne.n	1446 <__aeabi_fsub+0x26e>
    13e6:	2d00      	cmp	r5, #0
    13e8:	d05e      	beq.n	14a8 <__aeabi_fsub+0x2d0>
    13ea:	1c2b      	adds	r3, r5, #0
    13ec:	1c0e      	adds	r6, r1, #0
    13ee:	e70f      	b.n	1210 <__aeabi_fsub+0x38>
    13f0:	2c00      	cmp	r4, #0
    13f2:	d121      	bne.n	1438 <__aeabi_fsub+0x260>
    13f4:	2b00      	cmp	r3, #0
    13f6:	d054      	beq.n	14a2 <__aeabi_fsub+0x2ca>
    13f8:	43c9      	mvns	r1, r1
    13fa:	2900      	cmp	r1, #0
    13fc:	d004      	beq.n	1408 <__aeabi_fsub+0x230>
    13fe:	2aff      	cmp	r2, #255	; 0xff
    1400:	d04c      	beq.n	149c <__aeabi_fsub+0x2c4>
    1402:	291b      	cmp	r1, #27
    1404:	dd58      	ble.n	14b8 <__aeabi_fsub+0x2e0>
    1406:	2301      	movs	r3, #1
    1408:	195b      	adds	r3, r3, r5
    140a:	1c14      	adds	r4, r2, #0
    140c:	e75d      	b.n	12ca <__aeabi_fsub+0xf2>
    140e:	2b00      	cmp	r3, #0
    1410:	d123      	bne.n	145a <__aeabi_fsub+0x282>
    1412:	2d00      	cmp	r5, #0
    1414:	d04b      	beq.n	14ae <__aeabi_fsub+0x2d6>
    1416:	1c2b      	adds	r3, r5, #0
    1418:	1c0e      	adds	r6, r1, #0
    141a:	24ff      	movs	r4, #255	; 0xff
    141c:	e6f8      	b.n	1210 <__aeabi_fsub+0x38>
    141e:	1c2b      	adds	r3, r5, #0
    1420:	1c14      	adds	r4, r2, #0
    1422:	1c0e      	adds	r6, r1, #0
    1424:	e6f4      	b.n	1210 <__aeabi_fsub+0x38>
    1426:	1c1e      	adds	r6, r3, #0
    1428:	2420      	movs	r4, #32
    142a:	40c6      	lsrs	r6, r0
    142c:	1a20      	subs	r0, r4, r0
    142e:	4083      	lsls	r3, r0
    1430:	1e58      	subs	r0, r3, #1
    1432:	4183      	sbcs	r3, r0
    1434:	4333      	orrs	r3, r6
    1436:	e7a9      	b.n	138c <__aeabi_fsub+0x1b4>
    1438:	2aff      	cmp	r2, #255	; 0xff
    143a:	d02f      	beq.n	149c <__aeabi_fsub+0x2c4>
    143c:	2480      	movs	r4, #128	; 0x80
    143e:	04e4      	lsls	r4, r4, #19
    1440:	4249      	negs	r1, r1
    1442:	4323      	orrs	r3, r4
    1444:	e7dd      	b.n	1402 <__aeabi_fsub+0x22a>
    1446:	2d00      	cmp	r5, #0
    1448:	d100      	bne.n	144c <__aeabi_fsub+0x274>
    144a:	e6e1      	b.n	1210 <__aeabi_fsub+0x38>
    144c:	1b5a      	subs	r2, r3, r5
    144e:	0150      	lsls	r0, r2, #5
    1450:	d400      	bmi.n	1454 <__aeabi_fsub+0x27c>
    1452:	e71a      	b.n	128a <__aeabi_fsub+0xb2>
    1454:	1aeb      	subs	r3, r5, r3
    1456:	1c0e      	adds	r6, r1, #0
    1458:	e6da      	b.n	1210 <__aeabi_fsub+0x38>
    145a:	24ff      	movs	r4, #255	; 0xff
    145c:	2d00      	cmp	r5, #0
    145e:	d100      	bne.n	1462 <__aeabi_fsub+0x28a>
    1460:	e6d6      	b.n	1210 <__aeabi_fsub+0x38>
    1462:	2280      	movs	r2, #128	; 0x80
    1464:	08db      	lsrs	r3, r3, #3
    1466:	03d2      	lsls	r2, r2, #15
    1468:	4213      	tst	r3, r2
    146a:	d004      	beq.n	1476 <__aeabi_fsub+0x29e>
    146c:	08ed      	lsrs	r5, r5, #3
    146e:	4215      	tst	r5, r2
    1470:	d101      	bne.n	1476 <__aeabi_fsub+0x29e>
    1472:	1c2b      	adds	r3, r5, #0
    1474:	1c0e      	adds	r6, r1, #0
    1476:	00db      	lsls	r3, r3, #3
    1478:	24ff      	movs	r4, #255	; 0xff
    147a:	e6c9      	b.n	1210 <__aeabi_fsub+0x38>
    147c:	2b00      	cmp	r3, #0
    147e:	d00d      	beq.n	149c <__aeabi_fsub+0x2c4>
    1480:	24ff      	movs	r4, #255	; 0xff
    1482:	2d00      	cmp	r5, #0
    1484:	d100      	bne.n	1488 <__aeabi_fsub+0x2b0>
    1486:	e6c3      	b.n	1210 <__aeabi_fsub+0x38>
    1488:	2280      	movs	r2, #128	; 0x80
    148a:	08db      	lsrs	r3, r3, #3
    148c:	03d2      	lsls	r2, r2, #15
    148e:	4213      	tst	r3, r2
    1490:	d0f1      	beq.n	1476 <__aeabi_fsub+0x29e>
    1492:	08ed      	lsrs	r5, r5, #3
    1494:	4215      	tst	r5, r2
    1496:	d1ee      	bne.n	1476 <__aeabi_fsub+0x29e>
    1498:	1c2b      	adds	r3, r5, #0
    149a:	e7ec      	b.n	1476 <__aeabi_fsub+0x29e>
    149c:	1c2b      	adds	r3, r5, #0
    149e:	24ff      	movs	r4, #255	; 0xff
    14a0:	e6b6      	b.n	1210 <__aeabi_fsub+0x38>
    14a2:	1c2b      	adds	r3, r5, #0
    14a4:	1c14      	adds	r4, r2, #0
    14a6:	e6b3      	b.n	1210 <__aeabi_fsub+0x38>
    14a8:	1c23      	adds	r3, r4, #0
    14aa:	2000      	movs	r0, #0
    14ac:	e6f1      	b.n	1292 <__aeabi_fsub+0xba>
    14ae:	2380      	movs	r3, #128	; 0x80
    14b0:	2000      	movs	r0, #0
    14b2:	049b      	lsls	r3, r3, #18
    14b4:	24ff      	movs	r4, #255	; 0xff
    14b6:	e6ec      	b.n	1292 <__aeabi_fsub+0xba>
    14b8:	1c1f      	adds	r7, r3, #0
    14ba:	2420      	movs	r4, #32
    14bc:	40cf      	lsrs	r7, r1
    14be:	1a61      	subs	r1, r4, r1
    14c0:	408b      	lsls	r3, r1
    14c2:	1e59      	subs	r1, r3, #1
    14c4:	418b      	sbcs	r3, r1
    14c6:	433b      	orrs	r3, r7
    14c8:	e79e      	b.n	1408 <__aeabi_fsub+0x230>
    14ca:	1c2b      	adds	r3, r5, #0
    14cc:	e6a0      	b.n	1210 <__aeabi_fsub+0x38>
    14ce:	46c0      	nop			; (mov r8, r8)
    14d0:	fbffffff 	.word	0xfbffffff

000014d4 <__aeabi_f2iz>:
__aeabi_f2iz():
    14d4:	0242      	lsls	r2, r0, #9
    14d6:	0a51      	lsrs	r1, r2, #9
    14d8:	0042      	lsls	r2, r0, #1
    14da:	0fc3      	lsrs	r3, r0, #31
    14dc:	0e12      	lsrs	r2, r2, #24
    14de:	2000      	movs	r0, #0
    14e0:	2a7e      	cmp	r2, #126	; 0x7e
    14e2:	dd0d      	ble.n	1500 <__aeabi_f2iz+0x2c>
    14e4:	2a9d      	cmp	r2, #157	; 0x9d
    14e6:	dc0c      	bgt.n	1502 <__aeabi_f2iz+0x2e>
    14e8:	2080      	movs	r0, #128	; 0x80
    14ea:	0400      	lsls	r0, r0, #16
    14ec:	4301      	orrs	r1, r0
    14ee:	2a95      	cmp	r2, #149	; 0x95
    14f0:	dc0a      	bgt.n	1508 <__aeabi_f2iz+0x34>
    14f2:	2096      	movs	r0, #150	; 0x96
    14f4:	1a82      	subs	r2, r0, r2
    14f6:	40d1      	lsrs	r1, r2
    14f8:	1c0a      	adds	r2, r1, #0
    14fa:	4258      	negs	r0, r3
    14fc:	4042      	eors	r2, r0
    14fe:	18d0      	adds	r0, r2, r3
    1500:	4770      	bx	lr
    1502:	4a03      	ldr	r2, [pc, #12]	; (1510 <__aeabi_f2iz+0x3c>)
    1504:	1898      	adds	r0, r3, r2
    1506:	e7fb      	b.n	1500 <__aeabi_f2iz+0x2c>
    1508:	3a96      	subs	r2, #150	; 0x96
    150a:	4091      	lsls	r1, r2
    150c:	1c0a      	adds	r2, r1, #0
    150e:	e7f4      	b.n	14fa <__aeabi_f2iz+0x26>
    1510:	7fffffff 	.word	0x7fffffff

00001514 <__aeabi_i2f>:
__aeabi_i2f():
    1514:	b570      	push	{r4, r5, r6, lr}
    1516:	1e04      	subs	r4, r0, #0
    1518:	d039      	beq.n	158e <__aeabi_i2f+0x7a>
    151a:	0fc5      	lsrs	r5, r0, #31
    151c:	d000      	beq.n	1520 <__aeabi_i2f+0xc>
    151e:	4244      	negs	r4, r0
    1520:	1c20      	adds	r0, r4, #0
    1522:	f001 fc03 	bl	2d2c <__clzsi2>
    1526:	239e      	movs	r3, #158	; 0x9e
    1528:	1c26      	adds	r6, r4, #0
    152a:	1a1b      	subs	r3, r3, r0
    152c:	2b96      	cmp	r3, #150	; 0x96
    152e:	dc07      	bgt.n	1540 <__aeabi_i2f+0x2c>
    1530:	2808      	cmp	r0, #8
    1532:	dd01      	ble.n	1538 <__aeabi_i2f+0x24>
    1534:	3808      	subs	r0, #8
    1536:	4084      	lsls	r4, r0
    1538:	0264      	lsls	r4, r4, #9
    153a:	0a64      	lsrs	r4, r4, #9
    153c:	b2d8      	uxtb	r0, r3
    153e:	e01e      	b.n	157e <__aeabi_i2f+0x6a>
    1540:	2b99      	cmp	r3, #153	; 0x99
    1542:	dd0a      	ble.n	155a <__aeabi_i2f+0x46>
    1544:	2205      	movs	r2, #5
    1546:	1c21      	adds	r1, r4, #0
    1548:	1a12      	subs	r2, r2, r0
    154a:	40d1      	lsrs	r1, r2
    154c:	1c0a      	adds	r2, r1, #0
    154e:	1c01      	adds	r1, r0, #0
    1550:	311b      	adds	r1, #27
    1552:	408e      	lsls	r6, r1
    1554:	1e71      	subs	r1, r6, #1
    1556:	418e      	sbcs	r6, r1
    1558:	4316      	orrs	r6, r2
    155a:	2805      	cmp	r0, #5
    155c:	dd01      	ble.n	1562 <__aeabi_i2f+0x4e>
    155e:	1f42      	subs	r2, r0, #5
    1560:	4096      	lsls	r6, r2
    1562:	4c0f      	ldr	r4, [pc, #60]	; (15a0 <__aeabi_i2f+0x8c>)
    1564:	4034      	ands	r4, r6
    1566:	0772      	lsls	r2, r6, #29
    1568:	d004      	beq.n	1574 <__aeabi_i2f+0x60>
    156a:	220f      	movs	r2, #15
    156c:	4016      	ands	r6, r2
    156e:	2e04      	cmp	r6, #4
    1570:	d000      	beq.n	1574 <__aeabi_i2f+0x60>
    1572:	3404      	adds	r4, #4
    1574:	0162      	lsls	r2, r4, #5
    1576:	d40e      	bmi.n	1596 <__aeabi_i2f+0x82>
    1578:	01a4      	lsls	r4, r4, #6
    157a:	0a64      	lsrs	r4, r4, #9
    157c:	b2d8      	uxtb	r0, r3
    157e:	0264      	lsls	r4, r4, #9
    1580:	05c0      	lsls	r0, r0, #23
    1582:	0a64      	lsrs	r4, r4, #9
    1584:	07ed      	lsls	r5, r5, #31
    1586:	4304      	orrs	r4, r0
    1588:	432c      	orrs	r4, r5
    158a:	1c20      	adds	r0, r4, #0
    158c:	bd70      	pop	{r4, r5, r6, pc}
    158e:	2500      	movs	r5, #0
    1590:	2000      	movs	r0, #0
    1592:	2400      	movs	r4, #0
    1594:	e7f3      	b.n	157e <__aeabi_i2f+0x6a>
    1596:	4b02      	ldr	r3, [pc, #8]	; (15a0 <__aeabi_i2f+0x8c>)
    1598:	401c      	ands	r4, r3
    159a:	239f      	movs	r3, #159	; 0x9f
    159c:	1a1b      	subs	r3, r3, r0
    159e:	e7eb      	b.n	1578 <__aeabi_i2f+0x64>
    15a0:	fbffffff 	.word	0xfbffffff

000015a4 <__aeabi_dadd>:
__aeabi_dadd():
    15a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    15a6:	4645      	mov	r5, r8
    15a8:	4657      	mov	r7, sl
    15aa:	464e      	mov	r6, r9
    15ac:	4694      	mov	ip, r2
    15ae:	004c      	lsls	r4, r1, #1
    15b0:	030a      	lsls	r2, r1, #12
    15b2:	0fc9      	lsrs	r1, r1, #31
    15b4:	b4e0      	push	{r5, r6, r7}
    15b6:	4688      	mov	r8, r1
    15b8:	1c0e      	adds	r6, r1, #0
    15ba:	0319      	lsls	r1, r3, #12
    15bc:	0f47      	lsrs	r7, r0, #29
    15be:	00c5      	lsls	r5, r0, #3
    15c0:	0a48      	lsrs	r0, r1, #9
    15c2:	4661      	mov	r1, ip
    15c4:	0f49      	lsrs	r1, r1, #29
    15c6:	4301      	orrs	r1, r0
    15c8:	4660      	mov	r0, ip
    15ca:	0a52      	lsrs	r2, r2, #9
    15cc:	4317      	orrs	r7, r2
    15ce:	00c0      	lsls	r0, r0, #3
    15d0:	005a      	lsls	r2, r3, #1
    15d2:	0d64      	lsrs	r4, r4, #21
    15d4:	0d52      	lsrs	r2, r2, #21
    15d6:	0fdb      	lsrs	r3, r3, #31
    15d8:	4684      	mov	ip, r0
    15da:	4598      	cmp	r8, r3
    15dc:	d100      	bne.n	15e0 <__aeabi_dadd+0x3c>
    15de:	e0a7      	b.n	1730 <__aeabi_dadd+0x18c>
    15e0:	1aa0      	subs	r0, r4, r2
    15e2:	2800      	cmp	r0, #0
    15e4:	dc00      	bgt.n	15e8 <__aeabi_dadd+0x44>
    15e6:	e101      	b.n	17ec <__aeabi_dadd+0x248>
    15e8:	2a00      	cmp	r2, #0
    15ea:	d13d      	bne.n	1668 <__aeabi_dadd+0xc4>
    15ec:	4663      	mov	r3, ip
    15ee:	430b      	orrs	r3, r1
    15f0:	d000      	beq.n	15f4 <__aeabi_dadd+0x50>
    15f2:	e0d4      	b.n	179e <__aeabi_dadd+0x1fa>
    15f4:	076b      	lsls	r3, r5, #29
    15f6:	d100      	bne.n	15fa <__aeabi_dadd+0x56>
    15f8:	e088      	b.n	170c <__aeabi_dadd+0x168>
    15fa:	230f      	movs	r3, #15
    15fc:	402b      	ands	r3, r5
    15fe:	2b04      	cmp	r3, #4
    1600:	d100      	bne.n	1604 <__aeabi_dadd+0x60>
    1602:	e083      	b.n	170c <__aeabi_dadd+0x168>
    1604:	1d2a      	adds	r2, r5, #4
    1606:	42aa      	cmp	r2, r5
    1608:	41ad      	sbcs	r5, r5
    160a:	2380      	movs	r3, #128	; 0x80
    160c:	426d      	negs	r5, r5
    160e:	197f      	adds	r7, r7, r5
    1610:	041b      	lsls	r3, r3, #16
    1612:	403b      	ands	r3, r7
    1614:	4646      	mov	r6, r8
    1616:	1c15      	adds	r5, r2, #0
    1618:	2b00      	cmp	r3, #0
    161a:	d100      	bne.n	161e <__aeabi_dadd+0x7a>
    161c:	e07c      	b.n	1718 <__aeabi_dadd+0x174>
    161e:	4bcc      	ldr	r3, [pc, #816]	; (1950 <__aeabi_dadd+0x3ac>)
    1620:	3401      	adds	r4, #1
    1622:	429c      	cmp	r4, r3
    1624:	d100      	bne.n	1628 <__aeabi_dadd+0x84>
    1626:	e0fd      	b.n	1824 <__aeabi_dadd+0x280>
    1628:	1c3a      	adds	r2, r7, #0
    162a:	4bca      	ldr	r3, [pc, #808]	; (1954 <__aeabi_dadd+0x3b0>)
    162c:	08ed      	lsrs	r5, r5, #3
    162e:	401a      	ands	r2, r3
    1630:	0750      	lsls	r0, r2, #29
    1632:	0564      	lsls	r4, r4, #21
    1634:	0252      	lsls	r2, r2, #9
    1636:	4305      	orrs	r5, r0
    1638:	0b12      	lsrs	r2, r2, #12
    163a:	0d64      	lsrs	r4, r4, #21
    163c:	2100      	movs	r1, #0
    163e:	0312      	lsls	r2, r2, #12
    1640:	0d0b      	lsrs	r3, r1, #20
    1642:	051b      	lsls	r3, r3, #20
    1644:	0564      	lsls	r4, r4, #21
    1646:	0b12      	lsrs	r2, r2, #12
    1648:	431a      	orrs	r2, r3
    164a:	0863      	lsrs	r3, r4, #1
    164c:	4cc2      	ldr	r4, [pc, #776]	; (1958 <__aeabi_dadd+0x3b4>)
    164e:	07f6      	lsls	r6, r6, #31
    1650:	4014      	ands	r4, r2
    1652:	431c      	orrs	r4, r3
    1654:	0064      	lsls	r4, r4, #1
    1656:	0864      	lsrs	r4, r4, #1
    1658:	4334      	orrs	r4, r6
    165a:	1c28      	adds	r0, r5, #0
    165c:	1c21      	adds	r1, r4, #0
    165e:	bc1c      	pop	{r2, r3, r4}
    1660:	4690      	mov	r8, r2
    1662:	4699      	mov	r9, r3
    1664:	46a2      	mov	sl, r4
    1666:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1668:	4bb9      	ldr	r3, [pc, #740]	; (1950 <__aeabi_dadd+0x3ac>)
    166a:	429c      	cmp	r4, r3
    166c:	d0c2      	beq.n	15f4 <__aeabi_dadd+0x50>
    166e:	2380      	movs	r3, #128	; 0x80
    1670:	041b      	lsls	r3, r3, #16
    1672:	4319      	orrs	r1, r3
    1674:	2838      	cmp	r0, #56	; 0x38
    1676:	dd00      	ble.n	167a <__aeabi_dadd+0xd6>
    1678:	e0ec      	b.n	1854 <__aeabi_dadd+0x2b0>
    167a:	281f      	cmp	r0, #31
    167c:	dd00      	ble.n	1680 <__aeabi_dadd+0xdc>
    167e:	e121      	b.n	18c4 <__aeabi_dadd+0x320>
    1680:	2220      	movs	r2, #32
    1682:	1c0e      	adds	r6, r1, #0
    1684:	4663      	mov	r3, ip
    1686:	1a12      	subs	r2, r2, r0
    1688:	4096      	lsls	r6, r2
    168a:	40c3      	lsrs	r3, r0
    168c:	4333      	orrs	r3, r6
    168e:	4666      	mov	r6, ip
    1690:	4096      	lsls	r6, r2
    1692:	1c32      	adds	r2, r6, #0
    1694:	1e56      	subs	r6, r2, #1
    1696:	41b2      	sbcs	r2, r6
    1698:	4313      	orrs	r3, r2
    169a:	1c0a      	adds	r2, r1, #0
    169c:	40c2      	lsrs	r2, r0
    169e:	1aeb      	subs	r3, r5, r3
    16a0:	429d      	cmp	r5, r3
    16a2:	41b6      	sbcs	r6, r6
    16a4:	1c1d      	adds	r5, r3, #0
    16a6:	1aba      	subs	r2, r7, r2
    16a8:	4276      	negs	r6, r6
    16aa:	1b97      	subs	r7, r2, r6
    16ac:	023b      	lsls	r3, r7, #8
    16ae:	d400      	bmi.n	16b2 <__aeabi_dadd+0x10e>
    16b0:	e097      	b.n	17e2 <__aeabi_dadd+0x23e>
    16b2:	027a      	lsls	r2, r7, #9
    16b4:	0a56      	lsrs	r6, r2, #9
    16b6:	2e00      	cmp	r6, #0
    16b8:	d100      	bne.n	16bc <__aeabi_dadd+0x118>
    16ba:	e0b6      	b.n	182a <__aeabi_dadd+0x286>
    16bc:	1c30      	adds	r0, r6, #0
    16be:	f001 fb35 	bl	2d2c <__clzsi2>
    16c2:	1c03      	adds	r3, r0, #0
    16c4:	3b08      	subs	r3, #8
    16c6:	2b1f      	cmp	r3, #31
    16c8:	dd00      	ble.n	16cc <__aeabi_dadd+0x128>
    16ca:	e0b7      	b.n	183c <__aeabi_dadd+0x298>
    16cc:	409e      	lsls	r6, r3
    16ce:	1c37      	adds	r7, r6, #0
    16d0:	2628      	movs	r6, #40	; 0x28
    16d2:	1c2a      	adds	r2, r5, #0
    16d4:	1a36      	subs	r6, r6, r0
    16d6:	40f2      	lsrs	r2, r6
    16d8:	1c16      	adds	r6, r2, #0
    16da:	409d      	lsls	r5, r3
    16dc:	433e      	orrs	r6, r7
    16de:	429c      	cmp	r4, r3
    16e0:	dd00      	ble.n	16e4 <__aeabi_dadd+0x140>
    16e2:	e0b2      	b.n	184a <__aeabi_dadd+0x2a6>
    16e4:	1b1c      	subs	r4, r3, r4
    16e6:	1c62      	adds	r2, r4, #1
    16e8:	2a1f      	cmp	r2, #31
    16ea:	dd00      	ble.n	16ee <__aeabi_dadd+0x14a>
    16ec:	e0d8      	b.n	18a0 <__aeabi_dadd+0x2fc>
    16ee:	231f      	movs	r3, #31
    16f0:	1c29      	adds	r1, r5, #0
    16f2:	1b1c      	subs	r4, r3, r4
    16f4:	1c33      	adds	r3, r6, #0
    16f6:	40a5      	lsls	r5, r4
    16f8:	40a3      	lsls	r3, r4
    16fa:	40d1      	lsrs	r1, r2
    16fc:	1e6c      	subs	r4, r5, #1
    16fe:	41a5      	sbcs	r5, r4
    1700:	40d6      	lsrs	r6, r2
    1702:	4319      	orrs	r1, r3
    1704:	430d      	orrs	r5, r1
    1706:	1c37      	adds	r7, r6, #0
    1708:	2400      	movs	r4, #0
    170a:	e773      	b.n	15f4 <__aeabi_dadd+0x50>
    170c:	2380      	movs	r3, #128	; 0x80
    170e:	041b      	lsls	r3, r3, #16
    1710:	403b      	ands	r3, r7
    1712:	4646      	mov	r6, r8
    1714:	d000      	beq.n	1718 <__aeabi_dadd+0x174>
    1716:	e782      	b.n	161e <__aeabi_dadd+0x7a>
    1718:	4b8d      	ldr	r3, [pc, #564]	; (1950 <__aeabi_dadd+0x3ac>)
    171a:	08ed      	lsrs	r5, r5, #3
    171c:	0778      	lsls	r0, r7, #29
    171e:	4305      	orrs	r5, r0
    1720:	08fa      	lsrs	r2, r7, #3
    1722:	429c      	cmp	r4, r3
    1724:	d032      	beq.n	178c <__aeabi_dadd+0x1e8>
    1726:	0312      	lsls	r2, r2, #12
    1728:	0564      	lsls	r4, r4, #21
    172a:	0b12      	lsrs	r2, r2, #12
    172c:	0d64      	lsrs	r4, r4, #21
    172e:	e785      	b.n	163c <__aeabi_dadd+0x98>
    1730:	1aa3      	subs	r3, r4, r2
    1732:	2b00      	cmp	r3, #0
    1734:	dc00      	bgt.n	1738 <__aeabi_dadd+0x194>
    1736:	e094      	b.n	1862 <__aeabi_dadd+0x2be>
    1738:	2a00      	cmp	r2, #0
    173a:	d03c      	beq.n	17b6 <__aeabi_dadd+0x212>
    173c:	4a84      	ldr	r2, [pc, #528]	; (1950 <__aeabi_dadd+0x3ac>)
    173e:	4294      	cmp	r4, r2
    1740:	d100      	bne.n	1744 <__aeabi_dadd+0x1a0>
    1742:	e757      	b.n	15f4 <__aeabi_dadd+0x50>
    1744:	2280      	movs	r2, #128	; 0x80
    1746:	0412      	lsls	r2, r2, #16
    1748:	4311      	orrs	r1, r2
    174a:	2b38      	cmp	r3, #56	; 0x38
    174c:	dc00      	bgt.n	1750 <__aeabi_dadd+0x1ac>
    174e:	e105      	b.n	195c <__aeabi_dadd+0x3b8>
    1750:	4663      	mov	r3, ip
    1752:	4319      	orrs	r1, r3
    1754:	1e48      	subs	r0, r1, #1
    1756:	4181      	sbcs	r1, r0
    1758:	2200      	movs	r2, #0
    175a:	b2c8      	uxtb	r0, r1
    175c:	1940      	adds	r0, r0, r5
    175e:	42a8      	cmp	r0, r5
    1760:	419b      	sbcs	r3, r3
    1762:	1c05      	adds	r5, r0, #0
    1764:	19d2      	adds	r2, r2, r7
    1766:	425b      	negs	r3, r3
    1768:	18d7      	adds	r7, r2, r3
    176a:	023b      	lsls	r3, r7, #8
    176c:	d539      	bpl.n	17e2 <__aeabi_dadd+0x23e>
    176e:	4b78      	ldr	r3, [pc, #480]	; (1950 <__aeabi_dadd+0x3ac>)
    1770:	3401      	adds	r4, #1
    1772:	429c      	cmp	r4, r3
    1774:	d100      	bne.n	1778 <__aeabi_dadd+0x1d4>
    1776:	e14c      	b.n	1a12 <__aeabi_dadd+0x46e>
    1778:	2001      	movs	r0, #1
    177a:	4a76      	ldr	r2, [pc, #472]	; (1954 <__aeabi_dadd+0x3b0>)
    177c:	086b      	lsrs	r3, r5, #1
    177e:	403a      	ands	r2, r7
    1780:	4028      	ands	r0, r5
    1782:	4318      	orrs	r0, r3
    1784:	07d5      	lsls	r5, r2, #31
    1786:	4305      	orrs	r5, r0
    1788:	0857      	lsrs	r7, r2, #1
    178a:	e733      	b.n	15f4 <__aeabi_dadd+0x50>
    178c:	1c2b      	adds	r3, r5, #0
    178e:	4313      	orrs	r3, r2
    1790:	d048      	beq.n	1824 <__aeabi_dadd+0x280>
    1792:	2380      	movs	r3, #128	; 0x80
    1794:	031b      	lsls	r3, r3, #12
    1796:	431a      	orrs	r2, r3
    1798:	0312      	lsls	r2, r2, #12
    179a:	0b12      	lsrs	r2, r2, #12
    179c:	e74e      	b.n	163c <__aeabi_dadd+0x98>
    179e:	3801      	subs	r0, #1
    17a0:	2800      	cmp	r0, #0
    17a2:	d178      	bne.n	1896 <__aeabi_dadd+0x2f2>
    17a4:	4663      	mov	r3, ip
    17a6:	1aee      	subs	r6, r5, r3
    17a8:	42b5      	cmp	r5, r6
    17aa:	419b      	sbcs	r3, r3
    17ac:	1a7a      	subs	r2, r7, r1
    17ae:	425b      	negs	r3, r3
    17b0:	1ad7      	subs	r7, r2, r3
    17b2:	1c35      	adds	r5, r6, #0
    17b4:	e77a      	b.n	16ac <__aeabi_dadd+0x108>
    17b6:	1c02      	adds	r2, r0, #0
    17b8:	430a      	orrs	r2, r1
    17ba:	d100      	bne.n	17be <__aeabi_dadd+0x21a>
    17bc:	e71a      	b.n	15f4 <__aeabi_dadd+0x50>
    17be:	3b01      	subs	r3, #1
    17c0:	2b00      	cmp	r3, #0
    17c2:	d000      	beq.n	17c6 <__aeabi_dadd+0x222>
    17c4:	e0f2      	b.n	19ac <__aeabi_dadd+0x408>
    17c6:	1940      	adds	r0, r0, r5
    17c8:	42a8      	cmp	r0, r5
    17ca:	419b      	sbcs	r3, r3
    17cc:	19ca      	adds	r2, r1, r7
    17ce:	425b      	negs	r3, r3
    17d0:	18d7      	adds	r7, r2, r3
    17d2:	1c05      	adds	r5, r0, #0
    17d4:	e7c9      	b.n	176a <__aeabi_dadd+0x1c6>
    17d6:	1c13      	adds	r3, r2, #0
    17d8:	4333      	orrs	r3, r6
    17da:	d100      	bne.n	17de <__aeabi_dadd+0x23a>
    17dc:	e118      	b.n	1a10 <__aeabi_dadd+0x46c>
    17de:	1c17      	adds	r7, r2, #0
    17e0:	1c35      	adds	r5, r6, #0
    17e2:	4646      	mov	r6, r8
    17e4:	076b      	lsls	r3, r5, #29
    17e6:	d000      	beq.n	17ea <__aeabi_dadd+0x246>
    17e8:	e707      	b.n	15fa <__aeabi_dadd+0x56>
    17ea:	e795      	b.n	1718 <__aeabi_dadd+0x174>
    17ec:	2800      	cmp	r0, #0
    17ee:	d17a      	bne.n	18e6 <__aeabi_dadd+0x342>
    17f0:	1c62      	adds	r2, r4, #1
    17f2:	0552      	lsls	r2, r2, #21
    17f4:	0d52      	lsrs	r2, r2, #21
    17f6:	2a01      	cmp	r2, #1
    17f8:	dc00      	bgt.n	17fc <__aeabi_dadd+0x258>
    17fa:	e0fb      	b.n	19f4 <__aeabi_dadd+0x450>
    17fc:	4662      	mov	r2, ip
    17fe:	1aaa      	subs	r2, r5, r2
    1800:	4295      	cmp	r5, r2
    1802:	41b6      	sbcs	r6, r6
    1804:	4691      	mov	r9, r2
    1806:	1a78      	subs	r0, r7, r1
    1808:	4272      	negs	r2, r6
    180a:	1a86      	subs	r6, r0, r2
    180c:	0232      	lsls	r2, r6, #8
    180e:	d400      	bmi.n	1812 <__aeabi_dadd+0x26e>
    1810:	e093      	b.n	193a <__aeabi_dadd+0x396>
    1812:	4662      	mov	r2, ip
    1814:	1b55      	subs	r5, r2, r5
    1816:	45ac      	cmp	ip, r5
    1818:	4180      	sbcs	r0, r0
    181a:	1bcf      	subs	r7, r1, r7
    181c:	4240      	negs	r0, r0
    181e:	1a3e      	subs	r6, r7, r0
    1820:	4698      	mov	r8, r3
    1822:	e748      	b.n	16b6 <__aeabi_dadd+0x112>
    1824:	2200      	movs	r2, #0
    1826:	2500      	movs	r5, #0
    1828:	e708      	b.n	163c <__aeabi_dadd+0x98>
    182a:	1c28      	adds	r0, r5, #0
    182c:	f001 fa7e 	bl	2d2c <__clzsi2>
    1830:	3020      	adds	r0, #32
    1832:	1c03      	adds	r3, r0, #0
    1834:	3b08      	subs	r3, #8
    1836:	2b1f      	cmp	r3, #31
    1838:	dc00      	bgt.n	183c <__aeabi_dadd+0x298>
    183a:	e747      	b.n	16cc <__aeabi_dadd+0x128>
    183c:	3828      	subs	r0, #40	; 0x28
    183e:	4085      	lsls	r5, r0
    1840:	1c2e      	adds	r6, r5, #0
    1842:	2500      	movs	r5, #0
    1844:	429c      	cmp	r4, r3
    1846:	dc00      	bgt.n	184a <__aeabi_dadd+0x2a6>
    1848:	e74c      	b.n	16e4 <__aeabi_dadd+0x140>
    184a:	4a42      	ldr	r2, [pc, #264]	; (1954 <__aeabi_dadd+0x3b0>)
    184c:	1ae4      	subs	r4, r4, r3
    184e:	4016      	ands	r6, r2
    1850:	1c37      	adds	r7, r6, #0
    1852:	e6cf      	b.n	15f4 <__aeabi_dadd+0x50>
    1854:	4663      	mov	r3, ip
    1856:	4319      	orrs	r1, r3
    1858:	1e4b      	subs	r3, r1, #1
    185a:	4199      	sbcs	r1, r3
    185c:	2200      	movs	r2, #0
    185e:	b2cb      	uxtb	r3, r1
    1860:	e71d      	b.n	169e <__aeabi_dadd+0xfa>
    1862:	2b00      	cmp	r3, #0
    1864:	d000      	beq.n	1868 <__aeabi_dadd+0x2c4>
    1866:	e0f2      	b.n	1a4e <__aeabi_dadd+0x4aa>
    1868:	1c60      	adds	r0, r4, #1
    186a:	0543      	lsls	r3, r0, #21
    186c:	0d5b      	lsrs	r3, r3, #21
    186e:	2b01      	cmp	r3, #1
    1870:	dc00      	bgt.n	1874 <__aeabi_dadd+0x2d0>
    1872:	e0a4      	b.n	19be <__aeabi_dadd+0x41a>
    1874:	4b36      	ldr	r3, [pc, #216]	; (1950 <__aeabi_dadd+0x3ac>)
    1876:	4298      	cmp	r0, r3
    1878:	d100      	bne.n	187c <__aeabi_dadd+0x2d8>
    187a:	e121      	b.n	1ac0 <__aeabi_dadd+0x51c>
    187c:	4663      	mov	r3, ip
    187e:	195c      	adds	r4, r3, r5
    1880:	42ac      	cmp	r4, r5
    1882:	419b      	sbcs	r3, r3
    1884:	19cf      	adds	r7, r1, r7
    1886:	425b      	negs	r3, r3
    1888:	18fa      	adds	r2, r7, r3
    188a:	0864      	lsrs	r4, r4, #1
    188c:	07d5      	lsls	r5, r2, #31
    188e:	4325      	orrs	r5, r4
    1890:	0857      	lsrs	r7, r2, #1
    1892:	1c04      	adds	r4, r0, #0
    1894:	e6ae      	b.n	15f4 <__aeabi_dadd+0x50>
    1896:	4b2e      	ldr	r3, [pc, #184]	; (1950 <__aeabi_dadd+0x3ac>)
    1898:	429c      	cmp	r4, r3
    189a:	d000      	beq.n	189e <__aeabi_dadd+0x2fa>
    189c:	e6ea      	b.n	1674 <__aeabi_dadd+0xd0>
    189e:	e6a9      	b.n	15f4 <__aeabi_dadd+0x50>
    18a0:	1c21      	adds	r1, r4, #0
    18a2:	1c33      	adds	r3, r6, #0
    18a4:	391f      	subs	r1, #31
    18a6:	40cb      	lsrs	r3, r1
    18a8:	1c19      	adds	r1, r3, #0
    18aa:	2a20      	cmp	r2, #32
    18ac:	d100      	bne.n	18b0 <__aeabi_dadd+0x30c>
    18ae:	e082      	b.n	19b6 <__aeabi_dadd+0x412>
    18b0:	233f      	movs	r3, #63	; 0x3f
    18b2:	1b1c      	subs	r4, r3, r4
    18b4:	40a6      	lsls	r6, r4
    18b6:	4335      	orrs	r5, r6
    18b8:	1e6e      	subs	r6, r5, #1
    18ba:	41b5      	sbcs	r5, r6
    18bc:	2700      	movs	r7, #0
    18be:	430d      	orrs	r5, r1
    18c0:	2400      	movs	r4, #0
    18c2:	e78e      	b.n	17e2 <__aeabi_dadd+0x23e>
    18c4:	1c03      	adds	r3, r0, #0
    18c6:	1c0e      	adds	r6, r1, #0
    18c8:	3b20      	subs	r3, #32
    18ca:	40de      	lsrs	r6, r3
    18cc:	2820      	cmp	r0, #32
    18ce:	d074      	beq.n	19ba <__aeabi_dadd+0x416>
    18d0:	2340      	movs	r3, #64	; 0x40
    18d2:	1a1b      	subs	r3, r3, r0
    18d4:	4099      	lsls	r1, r3
    18d6:	1c0b      	adds	r3, r1, #0
    18d8:	4662      	mov	r2, ip
    18da:	4313      	orrs	r3, r2
    18dc:	1e59      	subs	r1, r3, #1
    18de:	418b      	sbcs	r3, r1
    18e0:	2200      	movs	r2, #0
    18e2:	4333      	orrs	r3, r6
    18e4:	e6db      	b.n	169e <__aeabi_dadd+0xfa>
    18e6:	2c00      	cmp	r4, #0
    18e8:	d050      	beq.n	198c <__aeabi_dadd+0x3e8>
    18ea:	4c19      	ldr	r4, [pc, #100]	; (1950 <__aeabi_dadd+0x3ac>)
    18ec:	42a2      	cmp	r2, r4
    18ee:	d100      	bne.n	18f2 <__aeabi_dadd+0x34e>
    18f0:	e0a8      	b.n	1a44 <__aeabi_dadd+0x4a0>
    18f2:	2480      	movs	r4, #128	; 0x80
    18f4:	0424      	lsls	r4, r4, #16
    18f6:	4240      	negs	r0, r0
    18f8:	4327      	orrs	r7, r4
    18fa:	2838      	cmp	r0, #56	; 0x38
    18fc:	dd00      	ble.n	1900 <__aeabi_dadd+0x35c>
    18fe:	e0d9      	b.n	1ab4 <__aeabi_dadd+0x510>
    1900:	281f      	cmp	r0, #31
    1902:	dd00      	ble.n	1906 <__aeabi_dadd+0x362>
    1904:	e139      	b.n	1b7a <__aeabi_dadd+0x5d6>
    1906:	2420      	movs	r4, #32
    1908:	1c3e      	adds	r6, r7, #0
    190a:	1a24      	subs	r4, r4, r0
    190c:	40a6      	lsls	r6, r4
    190e:	46b0      	mov	r8, r6
    1910:	1c2e      	adds	r6, r5, #0
    1912:	46a1      	mov	r9, r4
    1914:	40c6      	lsrs	r6, r0
    1916:	4644      	mov	r4, r8
    1918:	4326      	orrs	r6, r4
    191a:	464c      	mov	r4, r9
    191c:	40a5      	lsls	r5, r4
    191e:	1e6c      	subs	r4, r5, #1
    1920:	41a5      	sbcs	r5, r4
    1922:	40c7      	lsrs	r7, r0
    1924:	4335      	orrs	r5, r6
    1926:	4660      	mov	r0, ip
    1928:	1b45      	subs	r5, r0, r5
    192a:	1bcf      	subs	r7, r1, r7
    192c:	45ac      	cmp	ip, r5
    192e:	4189      	sbcs	r1, r1
    1930:	4249      	negs	r1, r1
    1932:	1a7f      	subs	r7, r7, r1
    1934:	1c14      	adds	r4, r2, #0
    1936:	4698      	mov	r8, r3
    1938:	e6b8      	b.n	16ac <__aeabi_dadd+0x108>
    193a:	464b      	mov	r3, r9
    193c:	464d      	mov	r5, r9
    193e:	4333      	orrs	r3, r6
    1940:	d000      	beq.n	1944 <__aeabi_dadd+0x3a0>
    1942:	e6b8      	b.n	16b6 <__aeabi_dadd+0x112>
    1944:	2600      	movs	r6, #0
    1946:	2700      	movs	r7, #0
    1948:	2400      	movs	r4, #0
    194a:	2500      	movs	r5, #0
    194c:	e6e4      	b.n	1718 <__aeabi_dadd+0x174>
    194e:	46c0      	nop			; (mov r8, r8)
    1950:	000007ff 	.word	0x000007ff
    1954:	ff7fffff 	.word	0xff7fffff
    1958:	800fffff 	.word	0x800fffff
    195c:	2b1f      	cmp	r3, #31
    195e:	dc5b      	bgt.n	1a18 <__aeabi_dadd+0x474>
    1960:	2220      	movs	r2, #32
    1962:	1c08      	adds	r0, r1, #0
    1964:	1ad2      	subs	r2, r2, r3
    1966:	4090      	lsls	r0, r2
    1968:	4681      	mov	r9, r0
    196a:	4660      	mov	r0, ip
    196c:	4692      	mov	sl, r2
    196e:	40d8      	lsrs	r0, r3
    1970:	464a      	mov	r2, r9
    1972:	4310      	orrs	r0, r2
    1974:	4681      	mov	r9, r0
    1976:	4652      	mov	r2, sl
    1978:	4660      	mov	r0, ip
    197a:	4090      	lsls	r0, r2
    197c:	1c02      	adds	r2, r0, #0
    197e:	1e50      	subs	r0, r2, #1
    1980:	4182      	sbcs	r2, r0
    1982:	4648      	mov	r0, r9
    1984:	4310      	orrs	r0, r2
    1986:	1c0a      	adds	r2, r1, #0
    1988:	40da      	lsrs	r2, r3
    198a:	e6e7      	b.n	175c <__aeabi_dadd+0x1b8>
    198c:	1c3c      	adds	r4, r7, #0
    198e:	432c      	orrs	r4, r5
    1990:	d058      	beq.n	1a44 <__aeabi_dadd+0x4a0>
    1992:	43c0      	mvns	r0, r0
    1994:	2800      	cmp	r0, #0
    1996:	d151      	bne.n	1a3c <__aeabi_dadd+0x498>
    1998:	4660      	mov	r0, ip
    199a:	1b45      	subs	r5, r0, r5
    199c:	45ac      	cmp	ip, r5
    199e:	4180      	sbcs	r0, r0
    19a0:	1bcf      	subs	r7, r1, r7
    19a2:	4240      	negs	r0, r0
    19a4:	1a3f      	subs	r7, r7, r0
    19a6:	1c14      	adds	r4, r2, #0
    19a8:	4698      	mov	r8, r3
    19aa:	e67f      	b.n	16ac <__aeabi_dadd+0x108>
    19ac:	4a8f      	ldr	r2, [pc, #572]	; (1bec <__aeabi_dadd+0x648>)
    19ae:	4294      	cmp	r4, r2
    19b0:	d000      	beq.n	19b4 <__aeabi_dadd+0x410>
    19b2:	e6ca      	b.n	174a <__aeabi_dadd+0x1a6>
    19b4:	e61e      	b.n	15f4 <__aeabi_dadd+0x50>
    19b6:	2600      	movs	r6, #0
    19b8:	e77d      	b.n	18b6 <__aeabi_dadd+0x312>
    19ba:	2300      	movs	r3, #0
    19bc:	e78c      	b.n	18d8 <__aeabi_dadd+0x334>
    19be:	1c3b      	adds	r3, r7, #0
    19c0:	432b      	orrs	r3, r5
    19c2:	2c00      	cmp	r4, #0
    19c4:	d000      	beq.n	19c8 <__aeabi_dadd+0x424>
    19c6:	e0bd      	b.n	1b44 <__aeabi_dadd+0x5a0>
    19c8:	2b00      	cmp	r3, #0
    19ca:	d100      	bne.n	19ce <__aeabi_dadd+0x42a>
    19cc:	e0f5      	b.n	1bba <__aeabi_dadd+0x616>
    19ce:	4663      	mov	r3, ip
    19d0:	430b      	orrs	r3, r1
    19d2:	d100      	bne.n	19d6 <__aeabi_dadd+0x432>
    19d4:	e60e      	b.n	15f4 <__aeabi_dadd+0x50>
    19d6:	4663      	mov	r3, ip
    19d8:	195b      	adds	r3, r3, r5
    19da:	42ab      	cmp	r3, r5
    19dc:	4180      	sbcs	r0, r0
    19de:	19ca      	adds	r2, r1, r7
    19e0:	4240      	negs	r0, r0
    19e2:	1817      	adds	r7, r2, r0
    19e4:	023a      	lsls	r2, r7, #8
    19e6:	d400      	bmi.n	19ea <__aeabi_dadd+0x446>
    19e8:	e0fc      	b.n	1be4 <__aeabi_dadd+0x640>
    19ea:	4a81      	ldr	r2, [pc, #516]	; (1bf0 <__aeabi_dadd+0x64c>)
    19ec:	1c1d      	adds	r5, r3, #0
    19ee:	4017      	ands	r7, r2
    19f0:	3401      	adds	r4, #1
    19f2:	e5ff      	b.n	15f4 <__aeabi_dadd+0x50>
    19f4:	1c3a      	adds	r2, r7, #0
    19f6:	432a      	orrs	r2, r5
    19f8:	2c00      	cmp	r4, #0
    19fa:	d151      	bne.n	1aa0 <__aeabi_dadd+0x4fc>
    19fc:	2a00      	cmp	r2, #0
    19fe:	d000      	beq.n	1a02 <__aeabi_dadd+0x45e>
    1a00:	e085      	b.n	1b0e <__aeabi_dadd+0x56a>
    1a02:	4662      	mov	r2, ip
    1a04:	430a      	orrs	r2, r1
    1a06:	d003      	beq.n	1a10 <__aeabi_dadd+0x46c>
    1a08:	1c0f      	adds	r7, r1, #0
    1a0a:	4665      	mov	r5, ip
    1a0c:	4698      	mov	r8, r3
    1a0e:	e5f1      	b.n	15f4 <__aeabi_dadd+0x50>
    1a10:	2600      	movs	r6, #0
    1a12:	2700      	movs	r7, #0
    1a14:	2500      	movs	r5, #0
    1a16:	e67f      	b.n	1718 <__aeabi_dadd+0x174>
    1a18:	1c18      	adds	r0, r3, #0
    1a1a:	1c0a      	adds	r2, r1, #0
    1a1c:	3820      	subs	r0, #32
    1a1e:	40c2      	lsrs	r2, r0
    1a20:	2b20      	cmp	r3, #32
    1a22:	d100      	bne.n	1a26 <__aeabi_dadd+0x482>
    1a24:	e0a7      	b.n	1b76 <__aeabi_dadd+0x5d2>
    1a26:	2040      	movs	r0, #64	; 0x40
    1a28:	1ac0      	subs	r0, r0, r3
    1a2a:	4081      	lsls	r1, r0
    1a2c:	1c08      	adds	r0, r1, #0
    1a2e:	4663      	mov	r3, ip
    1a30:	4318      	orrs	r0, r3
    1a32:	1e41      	subs	r1, r0, #1
    1a34:	4188      	sbcs	r0, r1
    1a36:	4310      	orrs	r0, r2
    1a38:	2200      	movs	r2, #0
    1a3a:	e68f      	b.n	175c <__aeabi_dadd+0x1b8>
    1a3c:	4c6b      	ldr	r4, [pc, #428]	; (1bec <__aeabi_dadd+0x648>)
    1a3e:	42a2      	cmp	r2, r4
    1a40:	d000      	beq.n	1a44 <__aeabi_dadd+0x4a0>
    1a42:	e75a      	b.n	18fa <__aeabi_dadd+0x356>
    1a44:	1c0f      	adds	r7, r1, #0
    1a46:	4665      	mov	r5, ip
    1a48:	1c14      	adds	r4, r2, #0
    1a4a:	4698      	mov	r8, r3
    1a4c:	e5d2      	b.n	15f4 <__aeabi_dadd+0x50>
    1a4e:	2c00      	cmp	r4, #0
    1a50:	d13a      	bne.n	1ac8 <__aeabi_dadd+0x524>
    1a52:	1c38      	adds	r0, r7, #0
    1a54:	4328      	orrs	r0, r5
    1a56:	d071      	beq.n	1b3c <__aeabi_dadd+0x598>
    1a58:	43db      	mvns	r3, r3
    1a5a:	2b00      	cmp	r3, #0
    1a5c:	d018      	beq.n	1a90 <__aeabi_dadd+0x4ec>
    1a5e:	4863      	ldr	r0, [pc, #396]	; (1bec <__aeabi_dadd+0x648>)
    1a60:	4282      	cmp	r2, r0
    1a62:	d06b      	beq.n	1b3c <__aeabi_dadd+0x598>
    1a64:	2b38      	cmp	r3, #56	; 0x38
    1a66:	dd00      	ble.n	1a6a <__aeabi_dadd+0x4c6>
    1a68:	e09d      	b.n	1ba6 <__aeabi_dadd+0x602>
    1a6a:	2b1f      	cmp	r3, #31
    1a6c:	dd00      	ble.n	1a70 <__aeabi_dadd+0x4cc>
    1a6e:	e0a7      	b.n	1bc0 <__aeabi_dadd+0x61c>
    1a70:	2020      	movs	r0, #32
    1a72:	1c3c      	adds	r4, r7, #0
    1a74:	1ac0      	subs	r0, r0, r3
    1a76:	4084      	lsls	r4, r0
    1a78:	46a1      	mov	r9, r4
    1a7a:	1c2c      	adds	r4, r5, #0
    1a7c:	4682      	mov	sl, r0
    1a7e:	40dc      	lsrs	r4, r3
    1a80:	4648      	mov	r0, r9
    1a82:	4304      	orrs	r4, r0
    1a84:	4650      	mov	r0, sl
    1a86:	4085      	lsls	r5, r0
    1a88:	1e68      	subs	r0, r5, #1
    1a8a:	4185      	sbcs	r5, r0
    1a8c:	40df      	lsrs	r7, r3
    1a8e:	4325      	orrs	r5, r4
    1a90:	4465      	add	r5, ip
    1a92:	4565      	cmp	r5, ip
    1a94:	419b      	sbcs	r3, r3
    1a96:	187f      	adds	r7, r7, r1
    1a98:	425b      	negs	r3, r3
    1a9a:	18ff      	adds	r7, r7, r3
    1a9c:	1c14      	adds	r4, r2, #0
    1a9e:	e664      	b.n	176a <__aeabi_dadd+0x1c6>
    1aa0:	2a00      	cmp	r2, #0
    1aa2:	d119      	bne.n	1ad8 <__aeabi_dadd+0x534>
    1aa4:	4662      	mov	r2, ip
    1aa6:	430a      	orrs	r2, r1
    1aa8:	d077      	beq.n	1b9a <__aeabi_dadd+0x5f6>
    1aaa:	1c0f      	adds	r7, r1, #0
    1aac:	4665      	mov	r5, ip
    1aae:	4698      	mov	r8, r3
    1ab0:	4c4e      	ldr	r4, [pc, #312]	; (1bec <__aeabi_dadd+0x648>)
    1ab2:	e59f      	b.n	15f4 <__aeabi_dadd+0x50>
    1ab4:	433d      	orrs	r5, r7
    1ab6:	1e6f      	subs	r7, r5, #1
    1ab8:	41bd      	sbcs	r5, r7
    1aba:	2700      	movs	r7, #0
    1abc:	b2ed      	uxtb	r5, r5
    1abe:	e732      	b.n	1926 <__aeabi_dadd+0x382>
    1ac0:	1c04      	adds	r4, r0, #0
    1ac2:	2700      	movs	r7, #0
    1ac4:	2500      	movs	r5, #0
    1ac6:	e627      	b.n	1718 <__aeabi_dadd+0x174>
    1ac8:	4848      	ldr	r0, [pc, #288]	; (1bec <__aeabi_dadd+0x648>)
    1aca:	4282      	cmp	r2, r0
    1acc:	d036      	beq.n	1b3c <__aeabi_dadd+0x598>
    1ace:	2080      	movs	r0, #128	; 0x80
    1ad0:	0400      	lsls	r0, r0, #16
    1ad2:	425b      	negs	r3, r3
    1ad4:	4307      	orrs	r7, r0
    1ad6:	e7c5      	b.n	1a64 <__aeabi_dadd+0x4c0>
    1ad8:	4662      	mov	r2, ip
    1ada:	430a      	orrs	r2, r1
    1adc:	d049      	beq.n	1b72 <__aeabi_dadd+0x5ce>
    1ade:	2480      	movs	r4, #128	; 0x80
    1ae0:	08ed      	lsrs	r5, r5, #3
    1ae2:	0778      	lsls	r0, r7, #29
    1ae4:	08fa      	lsrs	r2, r7, #3
    1ae6:	0324      	lsls	r4, r4, #12
    1ae8:	4328      	orrs	r0, r5
    1aea:	4222      	tst	r2, r4
    1aec:	d009      	beq.n	1b02 <__aeabi_dadd+0x55e>
    1aee:	08ce      	lsrs	r6, r1, #3
    1af0:	4226      	tst	r6, r4
    1af2:	d106      	bne.n	1b02 <__aeabi_dadd+0x55e>
    1af4:	4662      	mov	r2, ip
    1af6:	074f      	lsls	r7, r1, #29
    1af8:	1c38      	adds	r0, r7, #0
    1afa:	08d2      	lsrs	r2, r2, #3
    1afc:	4310      	orrs	r0, r2
    1afe:	4698      	mov	r8, r3
    1b00:	1c32      	adds	r2, r6, #0
    1b02:	00d2      	lsls	r2, r2, #3
    1b04:	0f47      	lsrs	r7, r0, #29
    1b06:	4317      	orrs	r7, r2
    1b08:	00c5      	lsls	r5, r0, #3
    1b0a:	4c38      	ldr	r4, [pc, #224]	; (1bec <__aeabi_dadd+0x648>)
    1b0c:	e572      	b.n	15f4 <__aeabi_dadd+0x50>
    1b0e:	4662      	mov	r2, ip
    1b10:	430a      	orrs	r2, r1
    1b12:	d100      	bne.n	1b16 <__aeabi_dadd+0x572>
    1b14:	e56e      	b.n	15f4 <__aeabi_dadd+0x50>
    1b16:	4662      	mov	r2, ip
    1b18:	1aae      	subs	r6, r5, r2
    1b1a:	42b5      	cmp	r5, r6
    1b1c:	4192      	sbcs	r2, r2
    1b1e:	1a78      	subs	r0, r7, r1
    1b20:	4252      	negs	r2, r2
    1b22:	1a82      	subs	r2, r0, r2
    1b24:	0210      	lsls	r0, r2, #8
    1b26:	d400      	bmi.n	1b2a <__aeabi_dadd+0x586>
    1b28:	e655      	b.n	17d6 <__aeabi_dadd+0x232>
    1b2a:	4662      	mov	r2, ip
    1b2c:	1b55      	subs	r5, r2, r5
    1b2e:	45ac      	cmp	ip, r5
    1b30:	4180      	sbcs	r0, r0
    1b32:	1bca      	subs	r2, r1, r7
    1b34:	4240      	negs	r0, r0
    1b36:	1a17      	subs	r7, r2, r0
    1b38:	4698      	mov	r8, r3
    1b3a:	e55b      	b.n	15f4 <__aeabi_dadd+0x50>
    1b3c:	1c0f      	adds	r7, r1, #0
    1b3e:	4665      	mov	r5, ip
    1b40:	1c14      	adds	r4, r2, #0
    1b42:	e557      	b.n	15f4 <__aeabi_dadd+0x50>
    1b44:	2b00      	cmp	r3, #0
    1b46:	d034      	beq.n	1bb2 <__aeabi_dadd+0x60e>
    1b48:	4663      	mov	r3, ip
    1b4a:	430b      	orrs	r3, r1
    1b4c:	d011      	beq.n	1b72 <__aeabi_dadd+0x5ce>
    1b4e:	2480      	movs	r4, #128	; 0x80
    1b50:	08ed      	lsrs	r5, r5, #3
    1b52:	0778      	lsls	r0, r7, #29
    1b54:	08fa      	lsrs	r2, r7, #3
    1b56:	0324      	lsls	r4, r4, #12
    1b58:	4328      	orrs	r0, r5
    1b5a:	4222      	tst	r2, r4
    1b5c:	d0d1      	beq.n	1b02 <__aeabi_dadd+0x55e>
    1b5e:	08cb      	lsrs	r3, r1, #3
    1b60:	4223      	tst	r3, r4
    1b62:	d1ce      	bne.n	1b02 <__aeabi_dadd+0x55e>
    1b64:	4662      	mov	r2, ip
    1b66:	074f      	lsls	r7, r1, #29
    1b68:	1c38      	adds	r0, r7, #0
    1b6a:	08d2      	lsrs	r2, r2, #3
    1b6c:	4310      	orrs	r0, r2
    1b6e:	1c1a      	adds	r2, r3, #0
    1b70:	e7c7      	b.n	1b02 <__aeabi_dadd+0x55e>
    1b72:	4c1e      	ldr	r4, [pc, #120]	; (1bec <__aeabi_dadd+0x648>)
    1b74:	e53e      	b.n	15f4 <__aeabi_dadd+0x50>
    1b76:	2000      	movs	r0, #0
    1b78:	e759      	b.n	1a2e <__aeabi_dadd+0x48a>
    1b7a:	1c04      	adds	r4, r0, #0
    1b7c:	1c3e      	adds	r6, r7, #0
    1b7e:	3c20      	subs	r4, #32
    1b80:	40e6      	lsrs	r6, r4
    1b82:	1c34      	adds	r4, r6, #0
    1b84:	2820      	cmp	r0, #32
    1b86:	d02b      	beq.n	1be0 <__aeabi_dadd+0x63c>
    1b88:	2640      	movs	r6, #64	; 0x40
    1b8a:	1a30      	subs	r0, r6, r0
    1b8c:	4087      	lsls	r7, r0
    1b8e:	433d      	orrs	r5, r7
    1b90:	1e6f      	subs	r7, r5, #1
    1b92:	41bd      	sbcs	r5, r7
    1b94:	2700      	movs	r7, #0
    1b96:	4325      	orrs	r5, r4
    1b98:	e6c5      	b.n	1926 <__aeabi_dadd+0x382>
    1b9a:	2780      	movs	r7, #128	; 0x80
    1b9c:	2600      	movs	r6, #0
    1b9e:	03ff      	lsls	r7, r7, #15
    1ba0:	4c12      	ldr	r4, [pc, #72]	; (1bec <__aeabi_dadd+0x648>)
    1ba2:	2500      	movs	r5, #0
    1ba4:	e5b8      	b.n	1718 <__aeabi_dadd+0x174>
    1ba6:	433d      	orrs	r5, r7
    1ba8:	1e6f      	subs	r7, r5, #1
    1baa:	41bd      	sbcs	r5, r7
    1bac:	2700      	movs	r7, #0
    1bae:	b2ed      	uxtb	r5, r5
    1bb0:	e76e      	b.n	1a90 <__aeabi_dadd+0x4ec>
    1bb2:	1c0f      	adds	r7, r1, #0
    1bb4:	4665      	mov	r5, ip
    1bb6:	4c0d      	ldr	r4, [pc, #52]	; (1bec <__aeabi_dadd+0x648>)
    1bb8:	e51c      	b.n	15f4 <__aeabi_dadd+0x50>
    1bba:	1c0f      	adds	r7, r1, #0
    1bbc:	4665      	mov	r5, ip
    1bbe:	e519      	b.n	15f4 <__aeabi_dadd+0x50>
    1bc0:	1c1c      	adds	r4, r3, #0
    1bc2:	1c38      	adds	r0, r7, #0
    1bc4:	3c20      	subs	r4, #32
    1bc6:	40e0      	lsrs	r0, r4
    1bc8:	1c04      	adds	r4, r0, #0
    1bca:	2b20      	cmp	r3, #32
    1bcc:	d00c      	beq.n	1be8 <__aeabi_dadd+0x644>
    1bce:	2040      	movs	r0, #64	; 0x40
    1bd0:	1ac3      	subs	r3, r0, r3
    1bd2:	409f      	lsls	r7, r3
    1bd4:	433d      	orrs	r5, r7
    1bd6:	1e6f      	subs	r7, r5, #1
    1bd8:	41bd      	sbcs	r5, r7
    1bda:	2700      	movs	r7, #0
    1bdc:	4325      	orrs	r5, r4
    1bde:	e757      	b.n	1a90 <__aeabi_dadd+0x4ec>
    1be0:	2700      	movs	r7, #0
    1be2:	e7d4      	b.n	1b8e <__aeabi_dadd+0x5ea>
    1be4:	1c1d      	adds	r5, r3, #0
    1be6:	e5fc      	b.n	17e2 <__aeabi_dadd+0x23e>
    1be8:	2700      	movs	r7, #0
    1bea:	e7f3      	b.n	1bd4 <__aeabi_dadd+0x630>
    1bec:	000007ff 	.word	0x000007ff
    1bf0:	ff7fffff 	.word	0xff7fffff

00001bf4 <__aeabi_ddiv>:
__aeabi_ddiv():
    1bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bf6:	465f      	mov	r7, fp
    1bf8:	4656      	mov	r6, sl
    1bfa:	464d      	mov	r5, r9
    1bfc:	4644      	mov	r4, r8
    1bfe:	b4f0      	push	{r4, r5, r6, r7}
    1c00:	030f      	lsls	r7, r1, #12
    1c02:	b087      	sub	sp, #28
    1c04:	4698      	mov	r8, r3
    1c06:	004d      	lsls	r5, r1, #1
    1c08:	0b3b      	lsrs	r3, r7, #12
    1c0a:	0fcc      	lsrs	r4, r1, #31
    1c0c:	1c06      	adds	r6, r0, #0
    1c0e:	4692      	mov	sl, r2
    1c10:	4681      	mov	r9, r0
    1c12:	469b      	mov	fp, r3
    1c14:	0d6d      	lsrs	r5, r5, #21
    1c16:	9401      	str	r4, [sp, #4]
    1c18:	d06b      	beq.n	1cf2 <__aeabi_ddiv+0xfe>
    1c1a:	4b66      	ldr	r3, [pc, #408]	; (1db4 <__aeabi_ddiv+0x1c0>)
    1c1c:	429d      	cmp	r5, r3
    1c1e:	d035      	beq.n	1c8c <__aeabi_ddiv+0x98>
    1c20:	2780      	movs	r7, #128	; 0x80
    1c22:	465b      	mov	r3, fp
    1c24:	037f      	lsls	r7, r7, #13
    1c26:	431f      	orrs	r7, r3
    1c28:	00f3      	lsls	r3, r6, #3
    1c2a:	4699      	mov	r9, r3
    1c2c:	4b62      	ldr	r3, [pc, #392]	; (1db8 <__aeabi_ddiv+0x1c4>)
    1c2e:	00ff      	lsls	r7, r7, #3
    1c30:	0f40      	lsrs	r0, r0, #29
    1c32:	469c      	mov	ip, r3
    1c34:	4307      	orrs	r7, r0
    1c36:	2300      	movs	r3, #0
    1c38:	46bb      	mov	fp, r7
    1c3a:	2600      	movs	r6, #0
    1c3c:	4465      	add	r5, ip
    1c3e:	9300      	str	r3, [sp, #0]
    1c40:	4642      	mov	r2, r8
    1c42:	0317      	lsls	r7, r2, #12
    1c44:	0050      	lsls	r0, r2, #1
    1c46:	0fd2      	lsrs	r2, r2, #31
    1c48:	4653      	mov	r3, sl
    1c4a:	0b3f      	lsrs	r7, r7, #12
    1c4c:	0d40      	lsrs	r0, r0, #21
    1c4e:	4690      	mov	r8, r2
    1c50:	d100      	bne.n	1c54 <__aeabi_ddiv+0x60>
    1c52:	e072      	b.n	1d3a <__aeabi_ddiv+0x146>
    1c54:	4a57      	ldr	r2, [pc, #348]	; (1db4 <__aeabi_ddiv+0x1c0>)
    1c56:	4290      	cmp	r0, r2
    1c58:	d067      	beq.n	1d2a <__aeabi_ddiv+0x136>
    1c5a:	2380      	movs	r3, #128	; 0x80
    1c5c:	035b      	lsls	r3, r3, #13
    1c5e:	431f      	orrs	r7, r3
    1c60:	4653      	mov	r3, sl
    1c62:	4a55      	ldr	r2, [pc, #340]	; (1db8 <__aeabi_ddiv+0x1c4>)
    1c64:	0f5b      	lsrs	r3, r3, #29
    1c66:	00ff      	lsls	r7, r7, #3
    1c68:	431f      	orrs	r7, r3
    1c6a:	4694      	mov	ip, r2
    1c6c:	4653      	mov	r3, sl
    1c6e:	2100      	movs	r1, #0
    1c70:	00db      	lsls	r3, r3, #3
    1c72:	4460      	add	r0, ip
    1c74:	4642      	mov	r2, r8
    1c76:	4062      	eors	r2, r4
    1c78:	4692      	mov	sl, r2
    1c7a:	1a2d      	subs	r5, r5, r0
    1c7c:	430e      	orrs	r6, r1
    1c7e:	2e0f      	cmp	r6, #15
    1c80:	d900      	bls.n	1c84 <__aeabi_ddiv+0x90>
    1c82:	e0a1      	b.n	1dc8 <__aeabi_ddiv+0x1d4>
    1c84:	484d      	ldr	r0, [pc, #308]	; (1dbc <__aeabi_ddiv+0x1c8>)
    1c86:	00b6      	lsls	r6, r6, #2
    1c88:	5980      	ldr	r0, [r0, r6]
    1c8a:	4687      	mov	pc, r0
    1c8c:	465b      	mov	r3, fp
    1c8e:	431e      	orrs	r6, r3
    1c90:	d000      	beq.n	1c94 <__aeabi_ddiv+0xa0>
    1c92:	e076      	b.n	1d82 <__aeabi_ddiv+0x18e>
    1c94:	2300      	movs	r3, #0
    1c96:	469b      	mov	fp, r3
    1c98:	4699      	mov	r9, r3
    1c9a:	3302      	adds	r3, #2
    1c9c:	2608      	movs	r6, #8
    1c9e:	9300      	str	r3, [sp, #0]
    1ca0:	e7ce      	b.n	1c40 <__aeabi_ddiv+0x4c>
    1ca2:	4699      	mov	r9, r3
    1ca4:	4643      	mov	r3, r8
    1ca6:	46bb      	mov	fp, r7
    1ca8:	9301      	str	r3, [sp, #4]
    1caa:	9100      	str	r1, [sp, #0]
    1cac:	9b00      	ldr	r3, [sp, #0]
    1cae:	2b02      	cmp	r3, #2
    1cb0:	d16b      	bne.n	1d8a <__aeabi_ddiv+0x196>
    1cb2:	9b01      	ldr	r3, [sp, #4]
    1cb4:	469a      	mov	sl, r3
    1cb6:	2100      	movs	r1, #0
    1cb8:	4653      	mov	r3, sl
    1cba:	2201      	movs	r2, #1
    1cbc:	2700      	movs	r7, #0
    1cbe:	4689      	mov	r9, r1
    1cc0:	401a      	ands	r2, r3
    1cc2:	4b3c      	ldr	r3, [pc, #240]	; (1db4 <__aeabi_ddiv+0x1c0>)
    1cc4:	2100      	movs	r1, #0
    1cc6:	033f      	lsls	r7, r7, #12
    1cc8:	0d0c      	lsrs	r4, r1, #20
    1cca:	0524      	lsls	r4, r4, #20
    1ccc:	0b3f      	lsrs	r7, r7, #12
    1cce:	4327      	orrs	r7, r4
    1cd0:	4c3b      	ldr	r4, [pc, #236]	; (1dc0 <__aeabi_ddiv+0x1cc>)
    1cd2:	051b      	lsls	r3, r3, #20
    1cd4:	4027      	ands	r7, r4
    1cd6:	431f      	orrs	r7, r3
    1cd8:	007f      	lsls	r7, r7, #1
    1cda:	07d2      	lsls	r2, r2, #31
    1cdc:	087f      	lsrs	r7, r7, #1
    1cde:	4317      	orrs	r7, r2
    1ce0:	4648      	mov	r0, r9
    1ce2:	1c39      	adds	r1, r7, #0
    1ce4:	b007      	add	sp, #28
    1ce6:	bc3c      	pop	{r2, r3, r4, r5}
    1ce8:	4690      	mov	r8, r2
    1cea:	4699      	mov	r9, r3
    1cec:	46a2      	mov	sl, r4
    1cee:	46ab      	mov	fp, r5
    1cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cf2:	4303      	orrs	r3, r0
    1cf4:	d03e      	beq.n	1d74 <__aeabi_ddiv+0x180>
    1cf6:	465b      	mov	r3, fp
    1cf8:	2b00      	cmp	r3, #0
    1cfa:	d100      	bne.n	1cfe <__aeabi_ddiv+0x10a>
    1cfc:	e19c      	b.n	2038 <__aeabi_ddiv+0x444>
    1cfe:	4658      	mov	r0, fp
    1d00:	f001 f814 	bl	2d2c <__clzsi2>
    1d04:	2328      	movs	r3, #40	; 0x28
    1d06:	1c31      	adds	r1, r6, #0
    1d08:	1a1b      	subs	r3, r3, r0
    1d0a:	1c02      	adds	r2, r0, #0
    1d0c:	465f      	mov	r7, fp
    1d0e:	40d9      	lsrs	r1, r3
    1d10:	3a08      	subs	r2, #8
    1d12:	4097      	lsls	r7, r2
    1d14:	1c0b      	adds	r3, r1, #0
    1d16:	4096      	lsls	r6, r2
    1d18:	433b      	orrs	r3, r7
    1d1a:	469b      	mov	fp, r3
    1d1c:	46b1      	mov	r9, r6
    1d1e:	2300      	movs	r3, #0
    1d20:	4d28      	ldr	r5, [pc, #160]	; (1dc4 <__aeabi_ddiv+0x1d0>)
    1d22:	2600      	movs	r6, #0
    1d24:	1a2d      	subs	r5, r5, r0
    1d26:	9300      	str	r3, [sp, #0]
    1d28:	e78a      	b.n	1c40 <__aeabi_ddiv+0x4c>
    1d2a:	4652      	mov	r2, sl
    1d2c:	2103      	movs	r1, #3
    1d2e:	433a      	orrs	r2, r7
    1d30:	d1a0      	bne.n	1c74 <__aeabi_ddiv+0x80>
    1d32:	2700      	movs	r7, #0
    1d34:	2300      	movs	r3, #0
    1d36:	2102      	movs	r1, #2
    1d38:	e79c      	b.n	1c74 <__aeabi_ddiv+0x80>
    1d3a:	4652      	mov	r2, sl
    1d3c:	433a      	orrs	r2, r7
    1d3e:	d015      	beq.n	1d6c <__aeabi_ddiv+0x178>
    1d40:	2f00      	cmp	r7, #0
    1d42:	d100      	bne.n	1d46 <__aeabi_ddiv+0x152>
    1d44:	e185      	b.n	2052 <__aeabi_ddiv+0x45e>
    1d46:	1c38      	adds	r0, r7, #0
    1d48:	f000 fff0 	bl	2d2c <__clzsi2>
    1d4c:	1c02      	adds	r2, r0, #0
    1d4e:	2128      	movs	r1, #40	; 0x28
    1d50:	4650      	mov	r0, sl
    1d52:	1a89      	subs	r1, r1, r2
    1d54:	1c13      	adds	r3, r2, #0
    1d56:	40c8      	lsrs	r0, r1
    1d58:	4651      	mov	r1, sl
    1d5a:	3b08      	subs	r3, #8
    1d5c:	4099      	lsls	r1, r3
    1d5e:	409f      	lsls	r7, r3
    1d60:	1c0b      	adds	r3, r1, #0
    1d62:	4307      	orrs	r7, r0
    1d64:	4817      	ldr	r0, [pc, #92]	; (1dc4 <__aeabi_ddiv+0x1d0>)
    1d66:	2100      	movs	r1, #0
    1d68:	1a80      	subs	r0, r0, r2
    1d6a:	e783      	b.n	1c74 <__aeabi_ddiv+0x80>
    1d6c:	2700      	movs	r7, #0
    1d6e:	2300      	movs	r3, #0
    1d70:	2101      	movs	r1, #1
    1d72:	e77f      	b.n	1c74 <__aeabi_ddiv+0x80>
    1d74:	2300      	movs	r3, #0
    1d76:	469b      	mov	fp, r3
    1d78:	4699      	mov	r9, r3
    1d7a:	3301      	adds	r3, #1
    1d7c:	2604      	movs	r6, #4
    1d7e:	9300      	str	r3, [sp, #0]
    1d80:	e75e      	b.n	1c40 <__aeabi_ddiv+0x4c>
    1d82:	2303      	movs	r3, #3
    1d84:	260c      	movs	r6, #12
    1d86:	9300      	str	r3, [sp, #0]
    1d88:	e75a      	b.n	1c40 <__aeabi_ddiv+0x4c>
    1d8a:	2b03      	cmp	r3, #3
    1d8c:	d100      	bne.n	1d90 <__aeabi_ddiv+0x19c>
    1d8e:	e23c      	b.n	220a <__aeabi_ddiv+0x616>
    1d90:	2b01      	cmp	r3, #1
    1d92:	d000      	beq.n	1d96 <__aeabi_ddiv+0x1a2>
    1d94:	e1bf      	b.n	2116 <__aeabi_ddiv+0x522>
    1d96:	1c1a      	adds	r2, r3, #0
    1d98:	9b01      	ldr	r3, [sp, #4]
    1d9a:	401a      	ands	r2, r3
    1d9c:	2100      	movs	r1, #0
    1d9e:	2300      	movs	r3, #0
    1da0:	2700      	movs	r7, #0
    1da2:	4689      	mov	r9, r1
    1da4:	e78e      	b.n	1cc4 <__aeabi_ddiv+0xd0>
    1da6:	2300      	movs	r3, #0
    1da8:	2780      	movs	r7, #128	; 0x80
    1daa:	4699      	mov	r9, r3
    1dac:	2200      	movs	r2, #0
    1dae:	033f      	lsls	r7, r7, #12
    1db0:	4b00      	ldr	r3, [pc, #0]	; (1db4 <__aeabi_ddiv+0x1c0>)
    1db2:	e787      	b.n	1cc4 <__aeabi_ddiv+0xd0>
    1db4:	000007ff 	.word	0x000007ff
    1db8:	fffffc01 	.word	0xfffffc01
    1dbc:	0001467c 	.word	0x0001467c
    1dc0:	800fffff 	.word	0x800fffff
    1dc4:	fffffc0d 	.word	0xfffffc0d
    1dc8:	45bb      	cmp	fp, r7
    1dca:	d900      	bls.n	1dce <__aeabi_ddiv+0x1da>
    1dcc:	e151      	b.n	2072 <__aeabi_ddiv+0x47e>
    1dce:	d100      	bne.n	1dd2 <__aeabi_ddiv+0x1de>
    1dd0:	e14c      	b.n	206c <__aeabi_ddiv+0x478>
    1dd2:	464a      	mov	r2, r9
    1dd4:	9203      	str	r2, [sp, #12]
    1dd6:	2200      	movs	r2, #0
    1dd8:	465c      	mov	r4, fp
    1dda:	4690      	mov	r8, r2
    1ddc:	3d01      	subs	r5, #1
    1dde:	0e18      	lsrs	r0, r3, #24
    1de0:	023f      	lsls	r7, r7, #8
    1de2:	4338      	orrs	r0, r7
    1de4:	021b      	lsls	r3, r3, #8
    1de6:	9301      	str	r3, [sp, #4]
    1de8:	0c03      	lsrs	r3, r0, #16
    1dea:	4699      	mov	r9, r3
    1dec:	0403      	lsls	r3, r0, #16
    1dee:	0c1b      	lsrs	r3, r3, #16
    1df0:	4649      	mov	r1, r9
    1df2:	1c06      	adds	r6, r0, #0
    1df4:	1c20      	adds	r0, r4, #0
    1df6:	1c1f      	adds	r7, r3, #0
    1df8:	9300      	str	r3, [sp, #0]
    1dfa:	f7fe fb53 	bl	4a4 <__aeabi_uidiv>
    1dfe:	1c02      	adds	r2, r0, #0
    1e00:	437a      	muls	r2, r7
    1e02:	9002      	str	r0, [sp, #8]
    1e04:	4649      	mov	r1, r9
    1e06:	1c20      	adds	r0, r4, #0
    1e08:	1c17      	adds	r7, r2, #0
    1e0a:	f7fe fbd1 	bl	5b0 <__aeabi_uidivmod>
    1e0e:	9b03      	ldr	r3, [sp, #12]
    1e10:	0409      	lsls	r1, r1, #16
    1e12:	0c1b      	lsrs	r3, r3, #16
    1e14:	4319      	orrs	r1, r3
    1e16:	428f      	cmp	r7, r1
    1e18:	d90c      	bls.n	1e34 <__aeabi_ddiv+0x240>
    1e1a:	9b02      	ldr	r3, [sp, #8]
    1e1c:	1989      	adds	r1, r1, r6
    1e1e:	3b01      	subs	r3, #1
    1e20:	428e      	cmp	r6, r1
    1e22:	d900      	bls.n	1e26 <__aeabi_ddiv+0x232>
    1e24:	e152      	b.n	20cc <__aeabi_ddiv+0x4d8>
    1e26:	428f      	cmp	r7, r1
    1e28:	d800      	bhi.n	1e2c <__aeabi_ddiv+0x238>
    1e2a:	e14f      	b.n	20cc <__aeabi_ddiv+0x4d8>
    1e2c:	9b02      	ldr	r3, [sp, #8]
    1e2e:	1989      	adds	r1, r1, r6
    1e30:	3b02      	subs	r3, #2
    1e32:	9302      	str	r3, [sp, #8]
    1e34:	1bcc      	subs	r4, r1, r7
    1e36:	1c20      	adds	r0, r4, #0
    1e38:	4649      	mov	r1, r9
    1e3a:	f7fe fb33 	bl	4a4 <__aeabi_uidiv>
    1e3e:	9f00      	ldr	r7, [sp, #0]
    1e40:	4683      	mov	fp, r0
    1e42:	4347      	muls	r7, r0
    1e44:	4649      	mov	r1, r9
    1e46:	1c20      	adds	r0, r4, #0
    1e48:	f7fe fbb2 	bl	5b0 <__aeabi_uidivmod>
    1e4c:	9a03      	ldr	r2, [sp, #12]
    1e4e:	040b      	lsls	r3, r1, #16
    1e50:	0414      	lsls	r4, r2, #16
    1e52:	0c24      	lsrs	r4, r4, #16
    1e54:	4323      	orrs	r3, r4
    1e56:	429f      	cmp	r7, r3
    1e58:	d90d      	bls.n	1e76 <__aeabi_ddiv+0x282>
    1e5a:	465a      	mov	r2, fp
    1e5c:	199b      	adds	r3, r3, r6
    1e5e:	3a01      	subs	r2, #1
    1e60:	429e      	cmp	r6, r3
    1e62:	d900      	bls.n	1e66 <__aeabi_ddiv+0x272>
    1e64:	e130      	b.n	20c8 <__aeabi_ddiv+0x4d4>
    1e66:	429f      	cmp	r7, r3
    1e68:	d800      	bhi.n	1e6c <__aeabi_ddiv+0x278>
    1e6a:	e12d      	b.n	20c8 <__aeabi_ddiv+0x4d4>
    1e6c:	2202      	movs	r2, #2
    1e6e:	4252      	negs	r2, r2
    1e70:	4694      	mov	ip, r2
    1e72:	199b      	adds	r3, r3, r6
    1e74:	44e3      	add	fp, ip
    1e76:	9a02      	ldr	r2, [sp, #8]
    1e78:	1bdb      	subs	r3, r3, r7
    1e7a:	0417      	lsls	r7, r2, #16
    1e7c:	465a      	mov	r2, fp
    1e7e:	433a      	orrs	r2, r7
    1e80:	4693      	mov	fp, r2
    1e82:	9c01      	ldr	r4, [sp, #4]
    1e84:	0c17      	lsrs	r7, r2, #16
    1e86:	0c22      	lsrs	r2, r4, #16
    1e88:	1c10      	adds	r0, r2, #0
    1e8a:	9204      	str	r2, [sp, #16]
    1e8c:	465a      	mov	r2, fp
    1e8e:	0411      	lsls	r1, r2, #16
    1e90:	0422      	lsls	r2, r4, #16
    1e92:	0c12      	lsrs	r2, r2, #16
    1e94:	1c14      	adds	r4, r2, #0
    1e96:	0c09      	lsrs	r1, r1, #16
    1e98:	437c      	muls	r4, r7
    1e9a:	9205      	str	r2, [sp, #20]
    1e9c:	434a      	muls	r2, r1
    1e9e:	4341      	muls	r1, r0
    1ea0:	4347      	muls	r7, r0
    1ea2:	1861      	adds	r1, r4, r1
    1ea4:	0c10      	lsrs	r0, r2, #16
    1ea6:	1809      	adds	r1, r1, r0
    1ea8:	428c      	cmp	r4, r1
    1eaa:	d903      	bls.n	1eb4 <__aeabi_ddiv+0x2c0>
    1eac:	2080      	movs	r0, #128	; 0x80
    1eae:	0240      	lsls	r0, r0, #9
    1eb0:	4684      	mov	ip, r0
    1eb2:	4467      	add	r7, ip
    1eb4:	0c0c      	lsrs	r4, r1, #16
    1eb6:	0412      	lsls	r2, r2, #16
    1eb8:	0408      	lsls	r0, r1, #16
    1eba:	0c12      	lsrs	r2, r2, #16
    1ebc:	193c      	adds	r4, r7, r4
    1ebe:	1881      	adds	r1, r0, r2
    1ec0:	42a3      	cmp	r3, r4
    1ec2:	d200      	bcs.n	1ec6 <__aeabi_ddiv+0x2d2>
    1ec4:	e0e5      	b.n	2092 <__aeabi_ddiv+0x49e>
    1ec6:	d100      	bne.n	1eca <__aeabi_ddiv+0x2d6>
    1ec8:	e0df      	b.n	208a <__aeabi_ddiv+0x496>
    1eca:	1b1f      	subs	r7, r3, r4
    1ecc:	4643      	mov	r3, r8
    1ece:	1a5c      	subs	r4, r3, r1
    1ed0:	45a0      	cmp	r8, r4
    1ed2:	4192      	sbcs	r2, r2
    1ed4:	4252      	negs	r2, r2
    1ed6:	1abf      	subs	r7, r7, r2
    1ed8:	42b7      	cmp	r7, r6
    1eda:	d100      	bne.n	1ede <__aeabi_ddiv+0x2ea>
    1edc:	e10e      	b.n	20fc <__aeabi_ddiv+0x508>
    1ede:	1c38      	adds	r0, r7, #0
    1ee0:	4649      	mov	r1, r9
    1ee2:	f7fe fadf 	bl	4a4 <__aeabi_uidiv>
    1ee6:	9b00      	ldr	r3, [sp, #0]
    1ee8:	9002      	str	r0, [sp, #8]
    1eea:	4343      	muls	r3, r0
    1eec:	4649      	mov	r1, r9
    1eee:	1c38      	adds	r0, r7, #0
    1ef0:	4698      	mov	r8, r3
    1ef2:	f7fe fb5d 	bl	5b0 <__aeabi_uidivmod>
    1ef6:	0c23      	lsrs	r3, r4, #16
    1ef8:	040f      	lsls	r7, r1, #16
    1efa:	431f      	orrs	r7, r3
    1efc:	45b8      	cmp	r8, r7
    1efe:	d90c      	bls.n	1f1a <__aeabi_ddiv+0x326>
    1f00:	9b02      	ldr	r3, [sp, #8]
    1f02:	19bf      	adds	r7, r7, r6
    1f04:	3b01      	subs	r3, #1
    1f06:	42be      	cmp	r6, r7
    1f08:	d900      	bls.n	1f0c <__aeabi_ddiv+0x318>
    1f0a:	e0fb      	b.n	2104 <__aeabi_ddiv+0x510>
    1f0c:	45b8      	cmp	r8, r7
    1f0e:	d800      	bhi.n	1f12 <__aeabi_ddiv+0x31e>
    1f10:	e0f8      	b.n	2104 <__aeabi_ddiv+0x510>
    1f12:	9b02      	ldr	r3, [sp, #8]
    1f14:	19bf      	adds	r7, r7, r6
    1f16:	3b02      	subs	r3, #2
    1f18:	9302      	str	r3, [sp, #8]
    1f1a:	4643      	mov	r3, r8
    1f1c:	1aff      	subs	r7, r7, r3
    1f1e:	4649      	mov	r1, r9
    1f20:	1c38      	adds	r0, r7, #0
    1f22:	f7fe fabf 	bl	4a4 <__aeabi_uidiv>
    1f26:	9b00      	ldr	r3, [sp, #0]
    1f28:	9003      	str	r0, [sp, #12]
    1f2a:	4343      	muls	r3, r0
    1f2c:	4649      	mov	r1, r9
    1f2e:	1c38      	adds	r0, r7, #0
    1f30:	4698      	mov	r8, r3
    1f32:	f7fe fb3d 	bl	5b0 <__aeabi_uidivmod>
    1f36:	0424      	lsls	r4, r4, #16
    1f38:	0409      	lsls	r1, r1, #16
    1f3a:	0c24      	lsrs	r4, r4, #16
    1f3c:	4321      	orrs	r1, r4
    1f3e:	4588      	cmp	r8, r1
    1f40:	d90c      	bls.n	1f5c <__aeabi_ddiv+0x368>
    1f42:	9b03      	ldr	r3, [sp, #12]
    1f44:	1989      	adds	r1, r1, r6
    1f46:	3b01      	subs	r3, #1
    1f48:	428e      	cmp	r6, r1
    1f4a:	d900      	bls.n	1f4e <__aeabi_ddiv+0x35a>
    1f4c:	e0dc      	b.n	2108 <__aeabi_ddiv+0x514>
    1f4e:	4588      	cmp	r8, r1
    1f50:	d800      	bhi.n	1f54 <__aeabi_ddiv+0x360>
    1f52:	e0d9      	b.n	2108 <__aeabi_ddiv+0x514>
    1f54:	9b03      	ldr	r3, [sp, #12]
    1f56:	1989      	adds	r1, r1, r6
    1f58:	3b02      	subs	r3, #2
    1f5a:	9303      	str	r3, [sp, #12]
    1f5c:	4643      	mov	r3, r8
    1f5e:	1ac9      	subs	r1, r1, r3
    1f60:	9b02      	ldr	r3, [sp, #8]
    1f62:	9a03      	ldr	r2, [sp, #12]
    1f64:	041b      	lsls	r3, r3, #16
    1f66:	9c05      	ldr	r4, [sp, #20]
    1f68:	431a      	orrs	r2, r3
    1f6a:	0c10      	lsrs	r0, r2, #16
    1f6c:	0413      	lsls	r3, r2, #16
    1f6e:	4691      	mov	r9, r2
    1f70:	1c22      	adds	r2, r4, #0
    1f72:	9f04      	ldr	r7, [sp, #16]
    1f74:	0c1b      	lsrs	r3, r3, #16
    1f76:	435a      	muls	r2, r3
    1f78:	4344      	muls	r4, r0
    1f7a:	437b      	muls	r3, r7
    1f7c:	4378      	muls	r0, r7
    1f7e:	18e3      	adds	r3, r4, r3
    1f80:	0c17      	lsrs	r7, r2, #16
    1f82:	19db      	adds	r3, r3, r7
    1f84:	429c      	cmp	r4, r3
    1f86:	d903      	bls.n	1f90 <__aeabi_ddiv+0x39c>
    1f88:	2480      	movs	r4, #128	; 0x80
    1f8a:	0264      	lsls	r4, r4, #9
    1f8c:	46a4      	mov	ip, r4
    1f8e:	4460      	add	r0, ip
    1f90:	0c1c      	lsrs	r4, r3, #16
    1f92:	0412      	lsls	r2, r2, #16
    1f94:	041b      	lsls	r3, r3, #16
    1f96:	0c12      	lsrs	r2, r2, #16
    1f98:	1900      	adds	r0, r0, r4
    1f9a:	189b      	adds	r3, r3, r2
    1f9c:	4281      	cmp	r1, r0
    1f9e:	d200      	bcs.n	1fa2 <__aeabi_ddiv+0x3ae>
    1fa0:	e096      	b.n	20d0 <__aeabi_ddiv+0x4dc>
    1fa2:	d100      	bne.n	1fa6 <__aeabi_ddiv+0x3b2>
    1fa4:	e0fc      	b.n	21a0 <__aeabi_ddiv+0x5ac>
    1fa6:	464a      	mov	r2, r9
    1fa8:	2301      	movs	r3, #1
    1faa:	431a      	orrs	r2, r3
    1fac:	4691      	mov	r9, r2
    1fae:	4b9b      	ldr	r3, [pc, #620]	; (221c <__aeabi_ddiv+0x628>)
    1fb0:	18eb      	adds	r3, r5, r3
    1fb2:	2b00      	cmp	r3, #0
    1fb4:	dc00      	bgt.n	1fb8 <__aeabi_ddiv+0x3c4>
    1fb6:	e099      	b.n	20ec <__aeabi_ddiv+0x4f8>
    1fb8:	464a      	mov	r2, r9
    1fba:	0752      	lsls	r2, r2, #29
    1fbc:	d00a      	beq.n	1fd4 <__aeabi_ddiv+0x3e0>
    1fbe:	220f      	movs	r2, #15
    1fc0:	4649      	mov	r1, r9
    1fc2:	400a      	ands	r2, r1
    1fc4:	2a04      	cmp	r2, #4
    1fc6:	d005      	beq.n	1fd4 <__aeabi_ddiv+0x3e0>
    1fc8:	3104      	adds	r1, #4
    1fca:	4549      	cmp	r1, r9
    1fcc:	4192      	sbcs	r2, r2
    1fce:	4689      	mov	r9, r1
    1fd0:	4252      	negs	r2, r2
    1fd2:	4493      	add	fp, r2
    1fd4:	465a      	mov	r2, fp
    1fd6:	01d2      	lsls	r2, r2, #7
    1fd8:	d506      	bpl.n	1fe8 <__aeabi_ddiv+0x3f4>
    1fda:	465a      	mov	r2, fp
    1fdc:	4b90      	ldr	r3, [pc, #576]	; (2220 <__aeabi_ddiv+0x62c>)
    1fde:	401a      	ands	r2, r3
    1fe0:	2380      	movs	r3, #128	; 0x80
    1fe2:	4693      	mov	fp, r2
    1fe4:	00db      	lsls	r3, r3, #3
    1fe6:	18eb      	adds	r3, r5, r3
    1fe8:	4a8e      	ldr	r2, [pc, #568]	; (2224 <__aeabi_ddiv+0x630>)
    1fea:	4293      	cmp	r3, r2
    1fec:	dd00      	ble.n	1ff0 <__aeabi_ddiv+0x3fc>
    1fee:	e662      	b.n	1cb6 <__aeabi_ddiv+0xc2>
    1ff0:	464a      	mov	r2, r9
    1ff2:	4659      	mov	r1, fp
    1ff4:	08d2      	lsrs	r2, r2, #3
    1ff6:	0749      	lsls	r1, r1, #29
    1ff8:	4311      	orrs	r1, r2
    1ffa:	465a      	mov	r2, fp
    1ffc:	4689      	mov	r9, r1
    1ffe:	0257      	lsls	r7, r2, #9
    2000:	4651      	mov	r1, sl
    2002:	2201      	movs	r2, #1
    2004:	055b      	lsls	r3, r3, #21
    2006:	0b3f      	lsrs	r7, r7, #12
    2008:	0d5b      	lsrs	r3, r3, #21
    200a:	400a      	ands	r2, r1
    200c:	e65a      	b.n	1cc4 <__aeabi_ddiv+0xd0>
    200e:	2080      	movs	r0, #128	; 0x80
    2010:	465a      	mov	r2, fp
    2012:	0300      	lsls	r0, r0, #12
    2014:	4202      	tst	r2, r0
    2016:	d008      	beq.n	202a <__aeabi_ddiv+0x436>
    2018:	4207      	tst	r7, r0
    201a:	d106      	bne.n	202a <__aeabi_ddiv+0x436>
    201c:	4307      	orrs	r7, r0
    201e:	033f      	lsls	r7, r7, #12
    2020:	4699      	mov	r9, r3
    2022:	0b3f      	lsrs	r7, r7, #12
    2024:	4642      	mov	r2, r8
    2026:	4b80      	ldr	r3, [pc, #512]	; (2228 <__aeabi_ddiv+0x634>)
    2028:	e64c      	b.n	1cc4 <__aeabi_ddiv+0xd0>
    202a:	465f      	mov	r7, fp
    202c:	4307      	orrs	r7, r0
    202e:	033f      	lsls	r7, r7, #12
    2030:	0b3f      	lsrs	r7, r7, #12
    2032:	1c22      	adds	r2, r4, #0
    2034:	4b7c      	ldr	r3, [pc, #496]	; (2228 <__aeabi_ddiv+0x634>)
    2036:	e645      	b.n	1cc4 <__aeabi_ddiv+0xd0>
    2038:	f000 fe78 	bl	2d2c <__clzsi2>
    203c:	1c03      	adds	r3, r0, #0
    203e:	3020      	adds	r0, #32
    2040:	2827      	cmp	r0, #39	; 0x27
    2042:	dc00      	bgt.n	2046 <__aeabi_ddiv+0x452>
    2044:	e65e      	b.n	1d04 <__aeabi_ddiv+0x110>
    2046:	3b08      	subs	r3, #8
    2048:	409e      	lsls	r6, r3
    204a:	2300      	movs	r3, #0
    204c:	46b3      	mov	fp, r6
    204e:	4699      	mov	r9, r3
    2050:	e665      	b.n	1d1e <__aeabi_ddiv+0x12a>
    2052:	4650      	mov	r0, sl
    2054:	f000 fe6a 	bl	2d2c <__clzsi2>
    2058:	1c02      	adds	r2, r0, #0
    205a:	3220      	adds	r2, #32
    205c:	2a27      	cmp	r2, #39	; 0x27
    205e:	dc00      	bgt.n	2062 <__aeabi_ddiv+0x46e>
    2060:	e675      	b.n	1d4e <__aeabi_ddiv+0x15a>
    2062:	4657      	mov	r7, sl
    2064:	3808      	subs	r0, #8
    2066:	4087      	lsls	r7, r0
    2068:	2300      	movs	r3, #0
    206a:	e67b      	b.n	1d64 <__aeabi_ddiv+0x170>
    206c:	4599      	cmp	r9, r3
    206e:	d200      	bcs.n	2072 <__aeabi_ddiv+0x47e>
    2070:	e6af      	b.n	1dd2 <__aeabi_ddiv+0x1de>
    2072:	465a      	mov	r2, fp
    2074:	4659      	mov	r1, fp
    2076:	0854      	lsrs	r4, r2, #1
    2078:	464a      	mov	r2, r9
    207a:	07c8      	lsls	r0, r1, #31
    207c:	0852      	lsrs	r2, r2, #1
    207e:	4302      	orrs	r2, r0
    2080:	9203      	str	r2, [sp, #12]
    2082:	464a      	mov	r2, r9
    2084:	07d2      	lsls	r2, r2, #31
    2086:	4690      	mov	r8, r2
    2088:	e6a9      	b.n	1dde <__aeabi_ddiv+0x1ea>
    208a:	2700      	movs	r7, #0
    208c:	4588      	cmp	r8, r1
    208e:	d300      	bcc.n	2092 <__aeabi_ddiv+0x49e>
    2090:	e71c      	b.n	1ecc <__aeabi_ddiv+0x2d8>
    2092:	9f01      	ldr	r7, [sp, #4]
    2094:	465a      	mov	r2, fp
    2096:	46bc      	mov	ip, r7
    2098:	44e0      	add	r8, ip
    209a:	45b8      	cmp	r8, r7
    209c:	41bf      	sbcs	r7, r7
    209e:	427f      	negs	r7, r7
    20a0:	19bf      	adds	r7, r7, r6
    20a2:	18ff      	adds	r7, r7, r3
    20a4:	3a01      	subs	r2, #1
    20a6:	42be      	cmp	r6, r7
    20a8:	d206      	bcs.n	20b8 <__aeabi_ddiv+0x4c4>
    20aa:	42bc      	cmp	r4, r7
    20ac:	d85f      	bhi.n	216e <__aeabi_ddiv+0x57a>
    20ae:	d100      	bne.n	20b2 <__aeabi_ddiv+0x4be>
    20b0:	e09f      	b.n	21f2 <__aeabi_ddiv+0x5fe>
    20b2:	1b3f      	subs	r7, r7, r4
    20b4:	4693      	mov	fp, r2
    20b6:	e709      	b.n	1ecc <__aeabi_ddiv+0x2d8>
    20b8:	42b7      	cmp	r7, r6
    20ba:	d1fa      	bne.n	20b2 <__aeabi_ddiv+0x4be>
    20bc:	9b01      	ldr	r3, [sp, #4]
    20be:	4543      	cmp	r3, r8
    20c0:	d9f3      	bls.n	20aa <__aeabi_ddiv+0x4b6>
    20c2:	1b37      	subs	r7, r6, r4
    20c4:	4693      	mov	fp, r2
    20c6:	e701      	b.n	1ecc <__aeabi_ddiv+0x2d8>
    20c8:	4693      	mov	fp, r2
    20ca:	e6d4      	b.n	1e76 <__aeabi_ddiv+0x282>
    20cc:	9302      	str	r3, [sp, #8]
    20ce:	e6b1      	b.n	1e34 <__aeabi_ddiv+0x240>
    20d0:	464a      	mov	r2, r9
    20d2:	1989      	adds	r1, r1, r6
    20d4:	3a01      	subs	r2, #1
    20d6:	428e      	cmp	r6, r1
    20d8:	d918      	bls.n	210c <__aeabi_ddiv+0x518>
    20da:	4691      	mov	r9, r2
    20dc:	4281      	cmp	r1, r0
    20de:	d000      	beq.n	20e2 <__aeabi_ddiv+0x4ee>
    20e0:	e761      	b.n	1fa6 <__aeabi_ddiv+0x3b2>
    20e2:	9a01      	ldr	r2, [sp, #4]
    20e4:	429a      	cmp	r2, r3
    20e6:	d000      	beq.n	20ea <__aeabi_ddiv+0x4f6>
    20e8:	e75d      	b.n	1fa6 <__aeabi_ddiv+0x3b2>
    20ea:	e760      	b.n	1fae <__aeabi_ddiv+0x3ba>
    20ec:	4f4f      	ldr	r7, [pc, #316]	; (222c <__aeabi_ddiv+0x638>)
    20ee:	1b7f      	subs	r7, r7, r5
    20f0:	2f38      	cmp	r7, #56	; 0x38
    20f2:	dd13      	ble.n	211c <__aeabi_ddiv+0x528>
    20f4:	2201      	movs	r2, #1
    20f6:	4653      	mov	r3, sl
    20f8:	401a      	ands	r2, r3
    20fa:	e64f      	b.n	1d9c <__aeabi_ddiv+0x1a8>
    20fc:	2301      	movs	r3, #1
    20fe:	425b      	negs	r3, r3
    2100:	4699      	mov	r9, r3
    2102:	e754      	b.n	1fae <__aeabi_ddiv+0x3ba>
    2104:	9302      	str	r3, [sp, #8]
    2106:	e708      	b.n	1f1a <__aeabi_ddiv+0x326>
    2108:	9303      	str	r3, [sp, #12]
    210a:	e727      	b.n	1f5c <__aeabi_ddiv+0x368>
    210c:	4288      	cmp	r0, r1
    210e:	d83c      	bhi.n	218a <__aeabi_ddiv+0x596>
    2110:	d074      	beq.n	21fc <__aeabi_ddiv+0x608>
    2112:	4691      	mov	r9, r2
    2114:	e747      	b.n	1fa6 <__aeabi_ddiv+0x3b2>
    2116:	9b01      	ldr	r3, [sp, #4]
    2118:	469a      	mov	sl, r3
    211a:	e748      	b.n	1fae <__aeabi_ddiv+0x3ba>
    211c:	2f1f      	cmp	r7, #31
    211e:	dc44      	bgt.n	21aa <__aeabi_ddiv+0x5b6>
    2120:	4b43      	ldr	r3, [pc, #268]	; (2230 <__aeabi_ddiv+0x63c>)
    2122:	464a      	mov	r2, r9
    2124:	469c      	mov	ip, r3
    2126:	465b      	mov	r3, fp
    2128:	4465      	add	r5, ip
    212a:	40fa      	lsrs	r2, r7
    212c:	40ab      	lsls	r3, r5
    212e:	4313      	orrs	r3, r2
    2130:	464a      	mov	r2, r9
    2132:	40aa      	lsls	r2, r5
    2134:	1c15      	adds	r5, r2, #0
    2136:	1e6a      	subs	r2, r5, #1
    2138:	4195      	sbcs	r5, r2
    213a:	465a      	mov	r2, fp
    213c:	40fa      	lsrs	r2, r7
    213e:	432b      	orrs	r3, r5
    2140:	1c17      	adds	r7, r2, #0
    2142:	075a      	lsls	r2, r3, #29
    2144:	d009      	beq.n	215a <__aeabi_ddiv+0x566>
    2146:	220f      	movs	r2, #15
    2148:	401a      	ands	r2, r3
    214a:	2a04      	cmp	r2, #4
    214c:	d005      	beq.n	215a <__aeabi_ddiv+0x566>
    214e:	1d1a      	adds	r2, r3, #4
    2150:	429a      	cmp	r2, r3
    2152:	419b      	sbcs	r3, r3
    2154:	425b      	negs	r3, r3
    2156:	18ff      	adds	r7, r7, r3
    2158:	1c13      	adds	r3, r2, #0
    215a:	023a      	lsls	r2, r7, #8
    215c:	d53e      	bpl.n	21dc <__aeabi_ddiv+0x5e8>
    215e:	4653      	mov	r3, sl
    2160:	2201      	movs	r2, #1
    2162:	2100      	movs	r1, #0
    2164:	401a      	ands	r2, r3
    2166:	2700      	movs	r7, #0
    2168:	2301      	movs	r3, #1
    216a:	4689      	mov	r9, r1
    216c:	e5aa      	b.n	1cc4 <__aeabi_ddiv+0xd0>
    216e:	2302      	movs	r3, #2
    2170:	425b      	negs	r3, r3
    2172:	469c      	mov	ip, r3
    2174:	9a01      	ldr	r2, [sp, #4]
    2176:	44e3      	add	fp, ip
    2178:	4694      	mov	ip, r2
    217a:	44e0      	add	r8, ip
    217c:	4590      	cmp	r8, r2
    217e:	419b      	sbcs	r3, r3
    2180:	425b      	negs	r3, r3
    2182:	199b      	adds	r3, r3, r6
    2184:	19df      	adds	r7, r3, r7
    2186:	1b3f      	subs	r7, r7, r4
    2188:	e6a0      	b.n	1ecc <__aeabi_ddiv+0x2d8>
    218a:	9f01      	ldr	r7, [sp, #4]
    218c:	464a      	mov	r2, r9
    218e:	007c      	lsls	r4, r7, #1
    2190:	42bc      	cmp	r4, r7
    2192:	41bf      	sbcs	r7, r7
    2194:	427f      	negs	r7, r7
    2196:	19bf      	adds	r7, r7, r6
    2198:	3a02      	subs	r2, #2
    219a:	19c9      	adds	r1, r1, r7
    219c:	9401      	str	r4, [sp, #4]
    219e:	e79c      	b.n	20da <__aeabi_ddiv+0x4e6>
    21a0:	2b00      	cmp	r3, #0
    21a2:	d195      	bne.n	20d0 <__aeabi_ddiv+0x4dc>
    21a4:	2200      	movs	r2, #0
    21a6:	9201      	str	r2, [sp, #4]
    21a8:	e79b      	b.n	20e2 <__aeabi_ddiv+0x4ee>
    21aa:	465a      	mov	r2, fp
    21ac:	4b21      	ldr	r3, [pc, #132]	; (2234 <__aeabi_ddiv+0x640>)
    21ae:	1b5b      	subs	r3, r3, r5
    21b0:	40da      	lsrs	r2, r3
    21b2:	2f20      	cmp	r7, #32
    21b4:	d027      	beq.n	2206 <__aeabi_ddiv+0x612>
    21b6:	4b20      	ldr	r3, [pc, #128]	; (2238 <__aeabi_ddiv+0x644>)
    21b8:	469c      	mov	ip, r3
    21ba:	465b      	mov	r3, fp
    21bc:	4465      	add	r5, ip
    21be:	40ab      	lsls	r3, r5
    21c0:	4649      	mov	r1, r9
    21c2:	430b      	orrs	r3, r1
    21c4:	1e59      	subs	r1, r3, #1
    21c6:	418b      	sbcs	r3, r1
    21c8:	4313      	orrs	r3, r2
    21ca:	2207      	movs	r2, #7
    21cc:	2700      	movs	r7, #0
    21ce:	401a      	ands	r2, r3
    21d0:	d007      	beq.n	21e2 <__aeabi_ddiv+0x5ee>
    21d2:	220f      	movs	r2, #15
    21d4:	2700      	movs	r7, #0
    21d6:	401a      	ands	r2, r3
    21d8:	2a04      	cmp	r2, #4
    21da:	d1b8      	bne.n	214e <__aeabi_ddiv+0x55a>
    21dc:	077a      	lsls	r2, r7, #29
    21de:	027f      	lsls	r7, r7, #9
    21e0:	0b3f      	lsrs	r7, r7, #12
    21e2:	08db      	lsrs	r3, r3, #3
    21e4:	4313      	orrs	r3, r2
    21e6:	4699      	mov	r9, r3
    21e8:	2201      	movs	r2, #1
    21ea:	4653      	mov	r3, sl
    21ec:	401a      	ands	r2, r3
    21ee:	2300      	movs	r3, #0
    21f0:	e568      	b.n	1cc4 <__aeabi_ddiv+0xd0>
    21f2:	4541      	cmp	r1, r8
    21f4:	d8bb      	bhi.n	216e <__aeabi_ddiv+0x57a>
    21f6:	4693      	mov	fp, r2
    21f8:	2700      	movs	r7, #0
    21fa:	e667      	b.n	1ecc <__aeabi_ddiv+0x2d8>
    21fc:	9c01      	ldr	r4, [sp, #4]
    21fe:	429c      	cmp	r4, r3
    2200:	d3c3      	bcc.n	218a <__aeabi_ddiv+0x596>
    2202:	4691      	mov	r9, r2
    2204:	e76d      	b.n	20e2 <__aeabi_ddiv+0x4ee>
    2206:	2300      	movs	r3, #0
    2208:	e7da      	b.n	21c0 <__aeabi_ddiv+0x5cc>
    220a:	2780      	movs	r7, #128	; 0x80
    220c:	465b      	mov	r3, fp
    220e:	033f      	lsls	r7, r7, #12
    2210:	431f      	orrs	r7, r3
    2212:	033f      	lsls	r7, r7, #12
    2214:	0b3f      	lsrs	r7, r7, #12
    2216:	9a01      	ldr	r2, [sp, #4]
    2218:	4b03      	ldr	r3, [pc, #12]	; (2228 <__aeabi_ddiv+0x634>)
    221a:	e553      	b.n	1cc4 <__aeabi_ddiv+0xd0>
    221c:	000003ff 	.word	0x000003ff
    2220:	feffffff 	.word	0xfeffffff
    2224:	000007fe 	.word	0x000007fe
    2228:	000007ff 	.word	0x000007ff
    222c:	fffffc02 	.word	0xfffffc02
    2230:	0000041e 	.word	0x0000041e
    2234:	fffffbe2 	.word	0xfffffbe2
    2238:	0000043e 	.word	0x0000043e

0000223c <__eqdf2>:
__eqdf2():
    223c:	b5f0      	push	{r4, r5, r6, r7, lr}
    223e:	465f      	mov	r7, fp
    2240:	464d      	mov	r5, r9
    2242:	4644      	mov	r4, r8
    2244:	4656      	mov	r6, sl
    2246:	b4f0      	push	{r4, r5, r6, r7}
    2248:	031f      	lsls	r7, r3, #12
    224a:	005c      	lsls	r4, r3, #1
    224c:	0fdb      	lsrs	r3, r3, #31
    224e:	4699      	mov	r9, r3
    2250:	4b1b      	ldr	r3, [pc, #108]	; (22c0 <__eqdf2+0x84>)
    2252:	030e      	lsls	r6, r1, #12
    2254:	004d      	lsls	r5, r1, #1
    2256:	0fc9      	lsrs	r1, r1, #31
    2258:	4684      	mov	ip, r0
    225a:	0b36      	lsrs	r6, r6, #12
    225c:	0d6d      	lsrs	r5, r5, #21
    225e:	468b      	mov	fp, r1
    2260:	4690      	mov	r8, r2
    2262:	0b3f      	lsrs	r7, r7, #12
    2264:	0d64      	lsrs	r4, r4, #21
    2266:	429d      	cmp	r5, r3
    2268:	d00c      	beq.n	2284 <__eqdf2+0x48>
    226a:	4b15      	ldr	r3, [pc, #84]	; (22c0 <__eqdf2+0x84>)
    226c:	429c      	cmp	r4, r3
    226e:	d010      	beq.n	2292 <__eqdf2+0x56>
    2270:	2301      	movs	r3, #1
    2272:	42a5      	cmp	r5, r4
    2274:	d014      	beq.n	22a0 <__eqdf2+0x64>
    2276:	1c18      	adds	r0, r3, #0
    2278:	bc3c      	pop	{r2, r3, r4, r5}
    227a:	4690      	mov	r8, r2
    227c:	4699      	mov	r9, r3
    227e:	46a2      	mov	sl, r4
    2280:	46ab      	mov	fp, r5
    2282:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2284:	1c31      	adds	r1, r6, #0
    2286:	2301      	movs	r3, #1
    2288:	4301      	orrs	r1, r0
    228a:	d1f4      	bne.n	2276 <__eqdf2+0x3a>
    228c:	4b0c      	ldr	r3, [pc, #48]	; (22c0 <__eqdf2+0x84>)
    228e:	429c      	cmp	r4, r3
    2290:	d1ee      	bne.n	2270 <__eqdf2+0x34>
    2292:	433a      	orrs	r2, r7
    2294:	2301      	movs	r3, #1
    2296:	2a00      	cmp	r2, #0
    2298:	d1ed      	bne.n	2276 <__eqdf2+0x3a>
    229a:	2301      	movs	r3, #1
    229c:	42a5      	cmp	r5, r4
    229e:	d1ea      	bne.n	2276 <__eqdf2+0x3a>
    22a0:	42be      	cmp	r6, r7
    22a2:	d1e8      	bne.n	2276 <__eqdf2+0x3a>
    22a4:	45c4      	cmp	ip, r8
    22a6:	d1e6      	bne.n	2276 <__eqdf2+0x3a>
    22a8:	45cb      	cmp	fp, r9
    22aa:	d006      	beq.n	22ba <__eqdf2+0x7e>
    22ac:	2d00      	cmp	r5, #0
    22ae:	d1e2      	bne.n	2276 <__eqdf2+0x3a>
    22b0:	4330      	orrs	r0, r6
    22b2:	1c03      	adds	r3, r0, #0
    22b4:	1e58      	subs	r0, r3, #1
    22b6:	4183      	sbcs	r3, r0
    22b8:	e7dd      	b.n	2276 <__eqdf2+0x3a>
    22ba:	2300      	movs	r3, #0
    22bc:	e7db      	b.n	2276 <__eqdf2+0x3a>
    22be:	46c0      	nop			; (mov r8, r8)
    22c0:	000007ff 	.word	0x000007ff

000022c4 <__gedf2>:
__gtdf2():
    22c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    22c6:	4657      	mov	r7, sl
    22c8:	4645      	mov	r5, r8
    22ca:	464e      	mov	r6, r9
    22cc:	b4e0      	push	{r5, r6, r7}
    22ce:	030f      	lsls	r7, r1, #12
    22d0:	004e      	lsls	r6, r1, #1
    22d2:	0fc9      	lsrs	r1, r1, #31
    22d4:	468a      	mov	sl, r1
    22d6:	4932      	ldr	r1, [pc, #200]	; (23a0 <__gedf2+0xdc>)
    22d8:	031d      	lsls	r5, r3, #12
    22da:	005c      	lsls	r4, r3, #1
    22dc:	4684      	mov	ip, r0
    22de:	0b3f      	lsrs	r7, r7, #12
    22e0:	0d76      	lsrs	r6, r6, #21
    22e2:	4690      	mov	r8, r2
    22e4:	0b2d      	lsrs	r5, r5, #12
    22e6:	0d64      	lsrs	r4, r4, #21
    22e8:	0fdb      	lsrs	r3, r3, #31
    22ea:	428e      	cmp	r6, r1
    22ec:	d00f      	beq.n	230e <__gedf2+0x4a>
    22ee:	428c      	cmp	r4, r1
    22f0:	d039      	beq.n	2366 <__gedf2+0xa2>
    22f2:	2e00      	cmp	r6, #0
    22f4:	d110      	bne.n	2318 <__gedf2+0x54>
    22f6:	4338      	orrs	r0, r7
    22f8:	4241      	negs	r1, r0
    22fa:	4141      	adcs	r1, r0
    22fc:	4689      	mov	r9, r1
    22fe:	2c00      	cmp	r4, #0
    2300:	d127      	bne.n	2352 <__gedf2+0x8e>
    2302:	432a      	orrs	r2, r5
    2304:	d125      	bne.n	2352 <__gedf2+0x8e>
    2306:	2000      	movs	r0, #0
    2308:	2900      	cmp	r1, #0
    230a:	d10e      	bne.n	232a <__gedf2+0x66>
    230c:	e008      	b.n	2320 <__gedf2+0x5c>
    230e:	1c39      	adds	r1, r7, #0
    2310:	4301      	orrs	r1, r0
    2312:	d12e      	bne.n	2372 <__gedf2+0xae>
    2314:	42b4      	cmp	r4, r6
    2316:	d026      	beq.n	2366 <__gedf2+0xa2>
    2318:	2c00      	cmp	r4, #0
    231a:	d00b      	beq.n	2334 <__gedf2+0x70>
    231c:	459a      	cmp	sl, r3
    231e:	d00d      	beq.n	233c <__gedf2+0x78>
    2320:	4653      	mov	r3, sl
    2322:	4259      	negs	r1, r3
    2324:	2301      	movs	r3, #1
    2326:	4319      	orrs	r1, r3
    2328:	1c08      	adds	r0, r1, #0
    232a:	bc1c      	pop	{r2, r3, r4}
    232c:	4690      	mov	r8, r2
    232e:	4699      	mov	r9, r3
    2330:	46a2      	mov	sl, r4
    2332:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2334:	432a      	orrs	r2, r5
    2336:	d0f3      	beq.n	2320 <__gedf2+0x5c>
    2338:	459a      	cmp	sl, r3
    233a:	d1f1      	bne.n	2320 <__gedf2+0x5c>
    233c:	42a6      	cmp	r6, r4
    233e:	dcef      	bgt.n	2320 <__gedf2+0x5c>
    2340:	da1a      	bge.n	2378 <__gedf2+0xb4>
    2342:	4650      	mov	r0, sl
    2344:	4241      	negs	r1, r0
    2346:	4148      	adcs	r0, r1
    2348:	2301      	movs	r3, #1
    234a:	4241      	negs	r1, r0
    234c:	4319      	orrs	r1, r3
    234e:	1c08      	adds	r0, r1, #0
    2350:	e7eb      	b.n	232a <__gedf2+0x66>
    2352:	464a      	mov	r2, r9
    2354:	2a00      	cmp	r2, #0
    2356:	d0e1      	beq.n	231c <__gedf2+0x58>
    2358:	4258      	negs	r0, r3
    235a:	4158      	adcs	r0, r3
    235c:	2201      	movs	r2, #1
    235e:	4241      	negs	r1, r0
    2360:	4311      	orrs	r1, r2
    2362:	1c08      	adds	r0, r1, #0
    2364:	e7e1      	b.n	232a <__gedf2+0x66>
    2366:	1c29      	adds	r1, r5, #0
    2368:	4311      	orrs	r1, r2
    236a:	d102      	bne.n	2372 <__gedf2+0xae>
    236c:	2e00      	cmp	r6, #0
    236e:	d0c2      	beq.n	22f6 <__gedf2+0x32>
    2370:	e7d4      	b.n	231c <__gedf2+0x58>
    2372:	2002      	movs	r0, #2
    2374:	4240      	negs	r0, r0
    2376:	e7d8      	b.n	232a <__gedf2+0x66>
    2378:	42af      	cmp	r7, r5
    237a:	d8d1      	bhi.n	2320 <__gedf2+0x5c>
    237c:	d009      	beq.n	2392 <__gedf2+0xce>
    237e:	2000      	movs	r0, #0
    2380:	42af      	cmp	r7, r5
    2382:	d2d2      	bcs.n	232a <__gedf2+0x66>
    2384:	4650      	mov	r0, sl
    2386:	4241      	negs	r1, r0
    2388:	4148      	adcs	r0, r1
    238a:	2301      	movs	r3, #1
    238c:	4240      	negs	r0, r0
    238e:	4318      	orrs	r0, r3
    2390:	e7cb      	b.n	232a <__gedf2+0x66>
    2392:	45c4      	cmp	ip, r8
    2394:	d8c4      	bhi.n	2320 <__gedf2+0x5c>
    2396:	2000      	movs	r0, #0
    2398:	45c4      	cmp	ip, r8
    239a:	d3f3      	bcc.n	2384 <__gedf2+0xc0>
    239c:	e7c5      	b.n	232a <__gedf2+0x66>
    239e:	46c0      	nop			; (mov r8, r8)
    23a0:	000007ff 	.word	0x000007ff

000023a4 <__ledf2>:
__ltdf2():
    23a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    23a6:	465f      	mov	r7, fp
    23a8:	464d      	mov	r5, r9
    23aa:	4644      	mov	r4, r8
    23ac:	4656      	mov	r6, sl
    23ae:	4680      	mov	r8, r0
    23b0:	b4f0      	push	{r4, r5, r6, r7}
    23b2:	1c06      	adds	r6, r0, #0
    23b4:	0308      	lsls	r0, r1, #12
    23b6:	0b00      	lsrs	r0, r0, #12
    23b8:	4684      	mov	ip, r0
    23ba:	482c      	ldr	r0, [pc, #176]	; (246c <__ledf2+0xc8>)
    23bc:	004c      	lsls	r4, r1, #1
    23be:	031f      	lsls	r7, r3, #12
    23c0:	005d      	lsls	r5, r3, #1
    23c2:	0fc9      	lsrs	r1, r1, #31
    23c4:	0d64      	lsrs	r4, r4, #21
    23c6:	468b      	mov	fp, r1
    23c8:	4691      	mov	r9, r2
    23ca:	0b3f      	lsrs	r7, r7, #12
    23cc:	0d6d      	lsrs	r5, r5, #21
    23ce:	0fdb      	lsrs	r3, r3, #31
    23d0:	4284      	cmp	r4, r0
    23d2:	d012      	beq.n	23fa <__ledf2+0x56>
    23d4:	4285      	cmp	r5, r0
    23d6:	d025      	beq.n	2424 <__ledf2+0x80>
    23d8:	2c00      	cmp	r4, #0
    23da:	d114      	bne.n	2406 <__ledf2+0x62>
    23dc:	4661      	mov	r1, ip
    23de:	430e      	orrs	r6, r1
    23e0:	4270      	negs	r0, r6
    23e2:	4146      	adcs	r6, r0
    23e4:	2d00      	cmp	r5, #0
    23e6:	d035      	beq.n	2454 <__ledf2+0xb0>
    23e8:	2e00      	cmp	r6, #0
    23ea:	d021      	beq.n	2430 <__ledf2+0x8c>
    23ec:	4258      	negs	r0, r3
    23ee:	4158      	adcs	r0, r3
    23f0:	2101      	movs	r1, #1
    23f2:	4243      	negs	r3, r0
    23f4:	430b      	orrs	r3, r1
    23f6:	1c18      	adds	r0, r3, #0
    23f8:	e00e      	b.n	2418 <__ledf2+0x74>
    23fa:	4661      	mov	r1, ip
    23fc:	2002      	movs	r0, #2
    23fe:	4331      	orrs	r1, r6
    2400:	d10a      	bne.n	2418 <__ledf2+0x74>
    2402:	42a5      	cmp	r5, r4
    2404:	d00e      	beq.n	2424 <__ledf2+0x80>
    2406:	2d00      	cmp	r5, #0
    2408:	d112      	bne.n	2430 <__ledf2+0x8c>
    240a:	433a      	orrs	r2, r7
    240c:	d110      	bne.n	2430 <__ledf2+0x8c>
    240e:	465b      	mov	r3, fp
    2410:	4259      	negs	r1, r3
    2412:	2301      	movs	r3, #1
    2414:	4319      	orrs	r1, r3
    2416:	1c08      	adds	r0, r1, #0
    2418:	bc3c      	pop	{r2, r3, r4, r5}
    241a:	4690      	mov	r8, r2
    241c:	4699      	mov	r9, r3
    241e:	46a2      	mov	sl, r4
    2420:	46ab      	mov	fp, r5
    2422:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2424:	1c39      	adds	r1, r7, #0
    2426:	2002      	movs	r0, #2
    2428:	4311      	orrs	r1, r2
    242a:	d1f5      	bne.n	2418 <__ledf2+0x74>
    242c:	2c00      	cmp	r4, #0
    242e:	d0d5      	beq.n	23dc <__ledf2+0x38>
    2430:	459b      	cmp	fp, r3
    2432:	d1ec      	bne.n	240e <__ledf2+0x6a>
    2434:	42ac      	cmp	r4, r5
    2436:	dcea      	bgt.n	240e <__ledf2+0x6a>
    2438:	db05      	blt.n	2446 <__ledf2+0xa2>
    243a:	45bc      	cmp	ip, r7
    243c:	d8e7      	bhi.n	240e <__ledf2+0x6a>
    243e:	d00f      	beq.n	2460 <__ledf2+0xbc>
    2440:	2000      	movs	r0, #0
    2442:	45bc      	cmp	ip, r7
    2444:	d2e8      	bcs.n	2418 <__ledf2+0x74>
    2446:	4658      	mov	r0, fp
    2448:	4241      	negs	r1, r0
    244a:	4148      	adcs	r0, r1
    244c:	4241      	negs	r1, r0
    244e:	2001      	movs	r0, #1
    2450:	4308      	orrs	r0, r1
    2452:	e7e1      	b.n	2418 <__ledf2+0x74>
    2454:	433a      	orrs	r2, r7
    2456:	d1c7      	bne.n	23e8 <__ledf2+0x44>
    2458:	2000      	movs	r0, #0
    245a:	2e00      	cmp	r6, #0
    245c:	d1dc      	bne.n	2418 <__ledf2+0x74>
    245e:	e7d6      	b.n	240e <__ledf2+0x6a>
    2460:	45c8      	cmp	r8, r9
    2462:	d8d4      	bhi.n	240e <__ledf2+0x6a>
    2464:	2000      	movs	r0, #0
    2466:	45c8      	cmp	r8, r9
    2468:	d3ed      	bcc.n	2446 <__ledf2+0xa2>
    246a:	e7d5      	b.n	2418 <__ledf2+0x74>
    246c:	000007ff 	.word	0x000007ff

00002470 <__aeabi_dsub>:
__aeabi_dsub():
    2470:	b5f0      	push	{r4, r5, r6, r7, lr}
    2472:	464d      	mov	r5, r9
    2474:	4644      	mov	r4, r8
    2476:	465f      	mov	r7, fp
    2478:	4656      	mov	r6, sl
    247a:	b4f0      	push	{r4, r5, r6, r7}
    247c:	1c0e      	adds	r6, r1, #0
    247e:	1c11      	adds	r1, r2, #0
    2480:	0332      	lsls	r2, r6, #12
    2482:	0a52      	lsrs	r2, r2, #9
    2484:	0f47      	lsrs	r7, r0, #29
    2486:	4317      	orrs	r7, r2
    2488:	00c5      	lsls	r5, r0, #3
    248a:	031a      	lsls	r2, r3, #12
    248c:	0058      	lsls	r0, r3, #1
    248e:	0fdb      	lsrs	r3, r3, #31
    2490:	4699      	mov	r9, r3
    2492:	0a52      	lsrs	r2, r2, #9
    2494:	0f4b      	lsrs	r3, r1, #29
    2496:	b083      	sub	sp, #12
    2498:	431a      	orrs	r2, r3
    249a:	00cb      	lsls	r3, r1, #3
    249c:	9301      	str	r3, [sp, #4]
    249e:	4bcf      	ldr	r3, [pc, #828]	; (27dc <__aeabi_dsub+0x36c>)
    24a0:	0074      	lsls	r4, r6, #1
    24a2:	0ff6      	lsrs	r6, r6, #31
    24a4:	0d64      	lsrs	r4, r4, #21
    24a6:	46b0      	mov	r8, r6
    24a8:	0d40      	lsrs	r0, r0, #21
    24aa:	4298      	cmp	r0, r3
    24ac:	d100      	bne.n	24b0 <__aeabi_dsub+0x40>
    24ae:	e0e8      	b.n	2682 <__aeabi_dsub+0x212>
    24b0:	2301      	movs	r3, #1
    24b2:	4649      	mov	r1, r9
    24b4:	4059      	eors	r1, r3
    24b6:	1c0b      	adds	r3, r1, #0
    24b8:	429e      	cmp	r6, r3
    24ba:	d100      	bne.n	24be <__aeabi_dsub+0x4e>
    24bc:	e0b1      	b.n	2622 <__aeabi_dsub+0x1b2>
    24be:	1a26      	subs	r6, r4, r0
    24c0:	2e00      	cmp	r6, #0
    24c2:	dc00      	bgt.n	24c6 <__aeabi_dsub+0x56>
    24c4:	e11c      	b.n	2700 <__aeabi_dsub+0x290>
    24c6:	2800      	cmp	r0, #0
    24c8:	d142      	bne.n	2550 <__aeabi_dsub+0xe0>
    24ca:	1c13      	adds	r3, r2, #0
    24cc:	9901      	ldr	r1, [sp, #4]
    24ce:	430b      	orrs	r3, r1
    24d0:	d000      	beq.n	24d4 <__aeabi_dsub+0x64>
    24d2:	e0e6      	b.n	26a2 <__aeabi_dsub+0x232>
    24d4:	076b      	lsls	r3, r5, #29
    24d6:	d100      	bne.n	24da <__aeabi_dsub+0x6a>
    24d8:	e08e      	b.n	25f8 <__aeabi_dsub+0x188>
    24da:	230f      	movs	r3, #15
    24dc:	402b      	ands	r3, r5
    24de:	2b04      	cmp	r3, #4
    24e0:	d100      	bne.n	24e4 <__aeabi_dsub+0x74>
    24e2:	e089      	b.n	25f8 <__aeabi_dsub+0x188>
    24e4:	1d2a      	adds	r2, r5, #4
    24e6:	42aa      	cmp	r2, r5
    24e8:	41ad      	sbcs	r5, r5
    24ea:	2380      	movs	r3, #128	; 0x80
    24ec:	2601      	movs	r6, #1
    24ee:	4641      	mov	r1, r8
    24f0:	426d      	negs	r5, r5
    24f2:	197f      	adds	r7, r7, r5
    24f4:	041b      	lsls	r3, r3, #16
    24f6:	403b      	ands	r3, r7
    24f8:	400e      	ands	r6, r1
    24fa:	1c15      	adds	r5, r2, #0
    24fc:	2b00      	cmp	r3, #0
    24fe:	d100      	bne.n	2502 <__aeabi_dsub+0x92>
    2500:	e083      	b.n	260a <__aeabi_dsub+0x19a>
    2502:	4bb6      	ldr	r3, [pc, #728]	; (27dc <__aeabi_dsub+0x36c>)
    2504:	3401      	adds	r4, #1
    2506:	429c      	cmp	r4, r3
    2508:	d100      	bne.n	250c <__aeabi_dsub+0x9c>
    250a:	e116      	b.n	273a <__aeabi_dsub+0x2ca>
    250c:	1c3a      	adds	r2, r7, #0
    250e:	4bb4      	ldr	r3, [pc, #720]	; (27e0 <__aeabi_dsub+0x370>)
    2510:	08ed      	lsrs	r5, r5, #3
    2512:	401a      	ands	r2, r3
    2514:	0750      	lsls	r0, r2, #29
    2516:	0564      	lsls	r4, r4, #21
    2518:	0252      	lsls	r2, r2, #9
    251a:	4305      	orrs	r5, r0
    251c:	0b12      	lsrs	r2, r2, #12
    251e:	0d64      	lsrs	r4, r4, #21
    2520:	2100      	movs	r1, #0
    2522:	0312      	lsls	r2, r2, #12
    2524:	0d0b      	lsrs	r3, r1, #20
    2526:	051b      	lsls	r3, r3, #20
    2528:	0564      	lsls	r4, r4, #21
    252a:	0b12      	lsrs	r2, r2, #12
    252c:	431a      	orrs	r2, r3
    252e:	0863      	lsrs	r3, r4, #1
    2530:	4cac      	ldr	r4, [pc, #688]	; (27e4 <__aeabi_dsub+0x374>)
    2532:	07f6      	lsls	r6, r6, #31
    2534:	4014      	ands	r4, r2
    2536:	431c      	orrs	r4, r3
    2538:	0064      	lsls	r4, r4, #1
    253a:	0864      	lsrs	r4, r4, #1
    253c:	4334      	orrs	r4, r6
    253e:	1c28      	adds	r0, r5, #0
    2540:	1c21      	adds	r1, r4, #0
    2542:	b003      	add	sp, #12
    2544:	bc3c      	pop	{r2, r3, r4, r5}
    2546:	4690      	mov	r8, r2
    2548:	4699      	mov	r9, r3
    254a:	46a2      	mov	sl, r4
    254c:	46ab      	mov	fp, r5
    254e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2550:	4ba2      	ldr	r3, [pc, #648]	; (27dc <__aeabi_dsub+0x36c>)
    2552:	429c      	cmp	r4, r3
    2554:	d0be      	beq.n	24d4 <__aeabi_dsub+0x64>
    2556:	2380      	movs	r3, #128	; 0x80
    2558:	041b      	lsls	r3, r3, #16
    255a:	431a      	orrs	r2, r3
    255c:	2e38      	cmp	r6, #56	; 0x38
    255e:	dd00      	ble.n	2562 <__aeabi_dsub+0xf2>
    2560:	e103      	b.n	276a <__aeabi_dsub+0x2fa>
    2562:	2e1f      	cmp	r6, #31
    2564:	dd00      	ble.n	2568 <__aeabi_dsub+0xf8>
    2566:	e13f      	b.n	27e8 <__aeabi_dsub+0x378>
    2568:	2020      	movs	r0, #32
    256a:	1b83      	subs	r3, r0, r6
    256c:	4699      	mov	r9, r3
    256e:	1c13      	adds	r3, r2, #0
    2570:	4649      	mov	r1, r9
    2572:	408b      	lsls	r3, r1
    2574:	469c      	mov	ip, r3
    2576:	9b01      	ldr	r3, [sp, #4]
    2578:	4660      	mov	r0, ip
    257a:	40f3      	lsrs	r3, r6
    257c:	4303      	orrs	r3, r0
    257e:	9801      	ldr	r0, [sp, #4]
    2580:	40f2      	lsrs	r2, r6
    2582:	4088      	lsls	r0, r1
    2584:	1c01      	adds	r1, r0, #0
    2586:	1e48      	subs	r0, r1, #1
    2588:	4181      	sbcs	r1, r0
    258a:	430b      	orrs	r3, r1
    258c:	1aeb      	subs	r3, r5, r3
    258e:	429d      	cmp	r5, r3
    2590:	4180      	sbcs	r0, r0
    2592:	1c1d      	adds	r5, r3, #0
    2594:	1aba      	subs	r2, r7, r2
    2596:	4240      	negs	r0, r0
    2598:	1a17      	subs	r7, r2, r0
    259a:	023b      	lsls	r3, r7, #8
    259c:	d400      	bmi.n	25a0 <__aeabi_dsub+0x130>
    259e:	e0a8      	b.n	26f2 <__aeabi_dsub+0x282>
    25a0:	027a      	lsls	r2, r7, #9
    25a2:	0a56      	lsrs	r6, r2, #9
    25a4:	2e00      	cmp	r6, #0
    25a6:	d100      	bne.n	25aa <__aeabi_dsub+0x13a>
    25a8:	e0ca      	b.n	2740 <__aeabi_dsub+0x2d0>
    25aa:	1c30      	adds	r0, r6, #0
    25ac:	f000 fbbe 	bl	2d2c <__clzsi2>
    25b0:	1c03      	adds	r3, r0, #0
    25b2:	3b08      	subs	r3, #8
    25b4:	2b1f      	cmp	r3, #31
    25b6:	dd00      	ble.n	25ba <__aeabi_dsub+0x14a>
    25b8:	e0cb      	b.n	2752 <__aeabi_dsub+0x2e2>
    25ba:	2228      	movs	r2, #40	; 0x28
    25bc:	1c29      	adds	r1, r5, #0
    25be:	1a12      	subs	r2, r2, r0
    25c0:	40d1      	lsrs	r1, r2
    25c2:	409e      	lsls	r6, r3
    25c4:	1c0a      	adds	r2, r1, #0
    25c6:	409d      	lsls	r5, r3
    25c8:	4332      	orrs	r2, r6
    25ca:	429c      	cmp	r4, r3
    25cc:	dd00      	ble.n	25d0 <__aeabi_dsub+0x160>
    25ce:	e0c8      	b.n	2762 <__aeabi_dsub+0x2f2>
    25d0:	1b1c      	subs	r4, r3, r4
    25d2:	1c67      	adds	r7, r4, #1
    25d4:	2f1f      	cmp	r7, #31
    25d6:	dd00      	ble.n	25da <__aeabi_dsub+0x16a>
    25d8:	e0ed      	b.n	27b6 <__aeabi_dsub+0x346>
    25da:	231f      	movs	r3, #31
    25dc:	1c29      	adds	r1, r5, #0
    25de:	1b1c      	subs	r4, r3, r4
    25e0:	1c13      	adds	r3, r2, #0
    25e2:	40a5      	lsls	r5, r4
    25e4:	40a3      	lsls	r3, r4
    25e6:	40f9      	lsrs	r1, r7
    25e8:	1e6c      	subs	r4, r5, #1
    25ea:	41a5      	sbcs	r5, r4
    25ec:	40fa      	lsrs	r2, r7
    25ee:	4319      	orrs	r1, r3
    25f0:	430d      	orrs	r5, r1
    25f2:	1c17      	adds	r7, r2, #0
    25f4:	2400      	movs	r4, #0
    25f6:	e76d      	b.n	24d4 <__aeabi_dsub+0x64>
    25f8:	2380      	movs	r3, #128	; 0x80
    25fa:	2601      	movs	r6, #1
    25fc:	4642      	mov	r2, r8
    25fe:	041b      	lsls	r3, r3, #16
    2600:	403b      	ands	r3, r7
    2602:	4016      	ands	r6, r2
    2604:	2b00      	cmp	r3, #0
    2606:	d000      	beq.n	260a <__aeabi_dsub+0x19a>
    2608:	e77b      	b.n	2502 <__aeabi_dsub+0x92>
    260a:	4b74      	ldr	r3, [pc, #464]	; (27dc <__aeabi_dsub+0x36c>)
    260c:	08ed      	lsrs	r5, r5, #3
    260e:	0778      	lsls	r0, r7, #29
    2610:	4305      	orrs	r5, r0
    2612:	08fa      	lsrs	r2, r7, #3
    2614:	429c      	cmp	r4, r3
    2616:	d03b      	beq.n	2690 <__aeabi_dsub+0x220>
    2618:	0312      	lsls	r2, r2, #12
    261a:	0564      	lsls	r4, r4, #21
    261c:	0b12      	lsrs	r2, r2, #12
    261e:	0d64      	lsrs	r4, r4, #21
    2620:	e77e      	b.n	2520 <__aeabi_dsub+0xb0>
    2622:	1a23      	subs	r3, r4, r0
    2624:	469a      	mov	sl, r3
    2626:	2b00      	cmp	r3, #0
    2628:	dc00      	bgt.n	262c <__aeabi_dsub+0x1bc>
    262a:	e0a5      	b.n	2778 <__aeabi_dsub+0x308>
    262c:	2800      	cmp	r0, #0
    262e:	d044      	beq.n	26ba <__aeabi_dsub+0x24a>
    2630:	486a      	ldr	r0, [pc, #424]	; (27dc <__aeabi_dsub+0x36c>)
    2632:	4284      	cmp	r4, r0
    2634:	d100      	bne.n	2638 <__aeabi_dsub+0x1c8>
    2636:	e74d      	b.n	24d4 <__aeabi_dsub+0x64>
    2638:	2080      	movs	r0, #128	; 0x80
    263a:	0400      	lsls	r0, r0, #16
    263c:	4302      	orrs	r2, r0
    263e:	4653      	mov	r3, sl
    2640:	2b38      	cmp	r3, #56	; 0x38
    2642:	dc00      	bgt.n	2646 <__aeabi_dsub+0x1d6>
    2644:	e11c      	b.n	2880 <__aeabi_dsub+0x410>
    2646:	9b01      	ldr	r3, [sp, #4]
    2648:	431a      	orrs	r2, r3
    264a:	1e51      	subs	r1, r2, #1
    264c:	418a      	sbcs	r2, r1
    264e:	b2d1      	uxtb	r1, r2
    2650:	2200      	movs	r2, #0
    2652:	1949      	adds	r1, r1, r5
    2654:	42a9      	cmp	r1, r5
    2656:	4180      	sbcs	r0, r0
    2658:	1c0d      	adds	r5, r1, #0
    265a:	19d2      	adds	r2, r2, r7
    265c:	4240      	negs	r0, r0
    265e:	1817      	adds	r7, r2, r0
    2660:	023b      	lsls	r3, r7, #8
    2662:	d546      	bpl.n	26f2 <__aeabi_dsub+0x282>
    2664:	4b5d      	ldr	r3, [pc, #372]	; (27dc <__aeabi_dsub+0x36c>)
    2666:	3401      	adds	r4, #1
    2668:	429c      	cmp	r4, r3
    266a:	d100      	bne.n	266e <__aeabi_dsub+0x1fe>
    266c:	e169      	b.n	2942 <__aeabi_dsub+0x4d2>
    266e:	2001      	movs	r0, #1
    2670:	4a5b      	ldr	r2, [pc, #364]	; (27e0 <__aeabi_dsub+0x370>)
    2672:	086b      	lsrs	r3, r5, #1
    2674:	403a      	ands	r2, r7
    2676:	4028      	ands	r0, r5
    2678:	4318      	orrs	r0, r3
    267a:	07d5      	lsls	r5, r2, #31
    267c:	4305      	orrs	r5, r0
    267e:	0857      	lsrs	r7, r2, #1
    2680:	e728      	b.n	24d4 <__aeabi_dsub+0x64>
    2682:	1c13      	adds	r3, r2, #0
    2684:	9901      	ldr	r1, [sp, #4]
    2686:	430b      	orrs	r3, r1
    2688:	d100      	bne.n	268c <__aeabi_dsub+0x21c>
    268a:	e711      	b.n	24b0 <__aeabi_dsub+0x40>
    268c:	464b      	mov	r3, r9
    268e:	e713      	b.n	24b8 <__aeabi_dsub+0x48>
    2690:	1c2b      	adds	r3, r5, #0
    2692:	4313      	orrs	r3, r2
    2694:	d051      	beq.n	273a <__aeabi_dsub+0x2ca>
    2696:	2380      	movs	r3, #128	; 0x80
    2698:	031b      	lsls	r3, r3, #12
    269a:	431a      	orrs	r2, r3
    269c:	0312      	lsls	r2, r2, #12
    269e:	0b12      	lsrs	r2, r2, #12
    26a0:	e73e      	b.n	2520 <__aeabi_dsub+0xb0>
    26a2:	3e01      	subs	r6, #1
    26a4:	2e00      	cmp	r6, #0
    26a6:	d000      	beq.n	26aa <__aeabi_dsub+0x23a>
    26a8:	e080      	b.n	27ac <__aeabi_dsub+0x33c>
    26aa:	1a69      	subs	r1, r5, r1
    26ac:	428d      	cmp	r5, r1
    26ae:	419b      	sbcs	r3, r3
    26b0:	1aba      	subs	r2, r7, r2
    26b2:	425b      	negs	r3, r3
    26b4:	1ad7      	subs	r7, r2, r3
    26b6:	1c0d      	adds	r5, r1, #0
    26b8:	e76f      	b.n	259a <__aeabi_dsub+0x12a>
    26ba:	1c10      	adds	r0, r2, #0
    26bc:	9b01      	ldr	r3, [sp, #4]
    26be:	4318      	orrs	r0, r3
    26c0:	d100      	bne.n	26c4 <__aeabi_dsub+0x254>
    26c2:	e707      	b.n	24d4 <__aeabi_dsub+0x64>
    26c4:	2301      	movs	r3, #1
    26c6:	425b      	negs	r3, r3
    26c8:	469c      	mov	ip, r3
    26ca:	44e2      	add	sl, ip
    26cc:	4653      	mov	r3, sl
    26ce:	2b00      	cmp	r3, #0
    26d0:	d000      	beq.n	26d4 <__aeabi_dsub+0x264>
    26d2:	e102      	b.n	28da <__aeabi_dsub+0x46a>
    26d4:	9b01      	ldr	r3, [sp, #4]
    26d6:	19d2      	adds	r2, r2, r7
    26d8:	1959      	adds	r1, r3, r5
    26da:	42a9      	cmp	r1, r5
    26dc:	419b      	sbcs	r3, r3
    26de:	425b      	negs	r3, r3
    26e0:	18d7      	adds	r7, r2, r3
    26e2:	1c0d      	adds	r5, r1, #0
    26e4:	e7bc      	b.n	2660 <__aeabi_dsub+0x1f0>
    26e6:	4663      	mov	r3, ip
    26e8:	4303      	orrs	r3, r0
    26ea:	d100      	bne.n	26ee <__aeabi_dsub+0x27e>
    26ec:	e128      	b.n	2940 <__aeabi_dsub+0x4d0>
    26ee:	1c07      	adds	r7, r0, #0
    26f0:	4665      	mov	r5, ip
    26f2:	076b      	lsls	r3, r5, #29
    26f4:	d000      	beq.n	26f8 <__aeabi_dsub+0x288>
    26f6:	e6f0      	b.n	24da <__aeabi_dsub+0x6a>
    26f8:	2601      	movs	r6, #1
    26fa:	4643      	mov	r3, r8
    26fc:	401e      	ands	r6, r3
    26fe:	e784      	b.n	260a <__aeabi_dsub+0x19a>
    2700:	2e00      	cmp	r6, #0
    2702:	d000      	beq.n	2706 <__aeabi_dsub+0x296>
    2704:	e081      	b.n	280a <__aeabi_dsub+0x39a>
    2706:	1c60      	adds	r0, r4, #1
    2708:	0540      	lsls	r0, r0, #21
    270a:	0d40      	lsrs	r0, r0, #21
    270c:	2801      	cmp	r0, #1
    270e:	dc00      	bgt.n	2712 <__aeabi_dsub+0x2a2>
    2710:	e107      	b.n	2922 <__aeabi_dsub+0x4b2>
    2712:	9901      	ldr	r1, [sp, #4]
    2714:	1a68      	subs	r0, r5, r1
    2716:	4684      	mov	ip, r0
    2718:	4565      	cmp	r5, ip
    271a:	41b6      	sbcs	r6, r6
    271c:	1ab8      	subs	r0, r7, r2
    271e:	4276      	negs	r6, r6
    2720:	1b86      	subs	r6, r0, r6
    2722:	0230      	lsls	r0, r6, #8
    2724:	d400      	bmi.n	2728 <__aeabi_dsub+0x2b8>
    2726:	e0a1      	b.n	286c <__aeabi_dsub+0x3fc>
    2728:	468c      	mov	ip, r1
    272a:	1b4d      	subs	r5, r1, r5
    272c:	45ac      	cmp	ip, r5
    272e:	4189      	sbcs	r1, r1
    2730:	1bd2      	subs	r2, r2, r7
    2732:	4249      	negs	r1, r1
    2734:	1a56      	subs	r6, r2, r1
    2736:	4698      	mov	r8, r3
    2738:	e734      	b.n	25a4 <__aeabi_dsub+0x134>
    273a:	2200      	movs	r2, #0
    273c:	2500      	movs	r5, #0
    273e:	e6ef      	b.n	2520 <__aeabi_dsub+0xb0>
    2740:	1c28      	adds	r0, r5, #0
    2742:	f000 faf3 	bl	2d2c <__clzsi2>
    2746:	3020      	adds	r0, #32
    2748:	1c03      	adds	r3, r0, #0
    274a:	3b08      	subs	r3, #8
    274c:	2b1f      	cmp	r3, #31
    274e:	dc00      	bgt.n	2752 <__aeabi_dsub+0x2e2>
    2750:	e733      	b.n	25ba <__aeabi_dsub+0x14a>
    2752:	1c02      	adds	r2, r0, #0
    2754:	3a28      	subs	r2, #40	; 0x28
    2756:	4095      	lsls	r5, r2
    2758:	1c2a      	adds	r2, r5, #0
    275a:	2500      	movs	r5, #0
    275c:	429c      	cmp	r4, r3
    275e:	dc00      	bgt.n	2762 <__aeabi_dsub+0x2f2>
    2760:	e736      	b.n	25d0 <__aeabi_dsub+0x160>
    2762:	4f1f      	ldr	r7, [pc, #124]	; (27e0 <__aeabi_dsub+0x370>)
    2764:	1ae4      	subs	r4, r4, r3
    2766:	4017      	ands	r7, r2
    2768:	e6b4      	b.n	24d4 <__aeabi_dsub+0x64>
    276a:	9b01      	ldr	r3, [sp, #4]
    276c:	431a      	orrs	r2, r3
    276e:	1e51      	subs	r1, r2, #1
    2770:	418a      	sbcs	r2, r1
    2772:	b2d3      	uxtb	r3, r2
    2774:	2200      	movs	r2, #0
    2776:	e709      	b.n	258c <__aeabi_dsub+0x11c>
    2778:	2b00      	cmp	r3, #0
    277a:	d000      	beq.n	277e <__aeabi_dsub+0x30e>
    277c:	e101      	b.n	2982 <__aeabi_dsub+0x512>
    277e:	1c60      	adds	r0, r4, #1
    2780:	0543      	lsls	r3, r0, #21
    2782:	0d5b      	lsrs	r3, r3, #21
    2784:	2b01      	cmp	r3, #1
    2786:	dc00      	bgt.n	278a <__aeabi_dsub+0x31a>
    2788:	e0b0      	b.n	28ec <__aeabi_dsub+0x47c>
    278a:	4b14      	ldr	r3, [pc, #80]	; (27dc <__aeabi_dsub+0x36c>)
    278c:	4298      	cmp	r0, r3
    278e:	d100      	bne.n	2792 <__aeabi_dsub+0x322>
    2790:	e11e      	b.n	29d0 <__aeabi_dsub+0x560>
    2792:	9b01      	ldr	r3, [sp, #4]
    2794:	19d2      	adds	r2, r2, r7
    2796:	1959      	adds	r1, r3, r5
    2798:	42a9      	cmp	r1, r5
    279a:	419b      	sbcs	r3, r3
    279c:	425b      	negs	r3, r3
    279e:	18d2      	adds	r2, r2, r3
    27a0:	0849      	lsrs	r1, r1, #1
    27a2:	07d5      	lsls	r5, r2, #31
    27a4:	430d      	orrs	r5, r1
    27a6:	0857      	lsrs	r7, r2, #1
    27a8:	1c04      	adds	r4, r0, #0
    27aa:	e693      	b.n	24d4 <__aeabi_dsub+0x64>
    27ac:	4b0b      	ldr	r3, [pc, #44]	; (27dc <__aeabi_dsub+0x36c>)
    27ae:	429c      	cmp	r4, r3
    27b0:	d000      	beq.n	27b4 <__aeabi_dsub+0x344>
    27b2:	e6d3      	b.n	255c <__aeabi_dsub+0xec>
    27b4:	e68e      	b.n	24d4 <__aeabi_dsub+0x64>
    27b6:	1c21      	adds	r1, r4, #0
    27b8:	1c13      	adds	r3, r2, #0
    27ba:	391f      	subs	r1, #31
    27bc:	40cb      	lsrs	r3, r1
    27be:	1c19      	adds	r1, r3, #0
    27c0:	2f20      	cmp	r7, #32
    27c2:	d100      	bne.n	27c6 <__aeabi_dsub+0x356>
    27c4:	e08e      	b.n	28e4 <__aeabi_dsub+0x474>
    27c6:	233f      	movs	r3, #63	; 0x3f
    27c8:	1b1c      	subs	r4, r3, r4
    27ca:	40a2      	lsls	r2, r4
    27cc:	4315      	orrs	r5, r2
    27ce:	1e6a      	subs	r2, r5, #1
    27d0:	4195      	sbcs	r5, r2
    27d2:	2700      	movs	r7, #0
    27d4:	430d      	orrs	r5, r1
    27d6:	2400      	movs	r4, #0
    27d8:	e78b      	b.n	26f2 <__aeabi_dsub+0x282>
    27da:	46c0      	nop			; (mov r8, r8)
    27dc:	000007ff 	.word	0x000007ff
    27e0:	ff7fffff 	.word	0xff7fffff
    27e4:	800fffff 	.word	0x800fffff
    27e8:	1c33      	adds	r3, r6, #0
    27ea:	1c10      	adds	r0, r2, #0
    27ec:	3b20      	subs	r3, #32
    27ee:	40d8      	lsrs	r0, r3
    27f0:	2e20      	cmp	r6, #32
    27f2:	d079      	beq.n	28e8 <__aeabi_dsub+0x478>
    27f4:	2340      	movs	r3, #64	; 0x40
    27f6:	1b9b      	subs	r3, r3, r6
    27f8:	409a      	lsls	r2, r3
    27fa:	1c13      	adds	r3, r2, #0
    27fc:	9a01      	ldr	r2, [sp, #4]
    27fe:	4313      	orrs	r3, r2
    2800:	1e59      	subs	r1, r3, #1
    2802:	418b      	sbcs	r3, r1
    2804:	2200      	movs	r2, #0
    2806:	4303      	orrs	r3, r0
    2808:	e6c0      	b.n	258c <__aeabi_dsub+0x11c>
    280a:	2c00      	cmp	r4, #0
    280c:	d053      	beq.n	28b6 <__aeabi_dsub+0x446>
    280e:	4cc7      	ldr	r4, [pc, #796]	; (2b2c <__aeabi_dsub+0x6bc>)
    2810:	42a0      	cmp	r0, r4
    2812:	d100      	bne.n	2816 <__aeabi_dsub+0x3a6>
    2814:	e0b0      	b.n	2978 <__aeabi_dsub+0x508>
    2816:	2480      	movs	r4, #128	; 0x80
    2818:	4271      	negs	r1, r6
    281a:	4689      	mov	r9, r1
    281c:	0424      	lsls	r4, r4, #16
    281e:	4327      	orrs	r7, r4
    2820:	4649      	mov	r1, r9
    2822:	2938      	cmp	r1, #56	; 0x38
    2824:	dd00      	ble.n	2828 <__aeabi_dsub+0x3b8>
    2826:	e0cd      	b.n	29c4 <__aeabi_dsub+0x554>
    2828:	291f      	cmp	r1, #31
    282a:	dd00      	ble.n	282e <__aeabi_dsub+0x3be>
    282c:	e159      	b.n	2ae2 <__aeabi_dsub+0x672>
    282e:	2420      	movs	r4, #32
    2830:	1c3e      	adds	r6, r7, #0
    2832:	1a61      	subs	r1, r4, r1
    2834:	408e      	lsls	r6, r1
    2836:	468a      	mov	sl, r1
    2838:	46b0      	mov	r8, r6
    283a:	4649      	mov	r1, r9
    283c:	1c2e      	adds	r6, r5, #0
    283e:	40ce      	lsrs	r6, r1
    2840:	4651      	mov	r1, sl
    2842:	46b4      	mov	ip, r6
    2844:	408d      	lsls	r5, r1
    2846:	4664      	mov	r4, ip
    2848:	4646      	mov	r6, r8
    284a:	4649      	mov	r1, r9
    284c:	4326      	orrs	r6, r4
    284e:	1e6c      	subs	r4, r5, #1
    2850:	41a5      	sbcs	r5, r4
    2852:	40cf      	lsrs	r7, r1
    2854:	4335      	orrs	r5, r6
    2856:	9901      	ldr	r1, [sp, #4]
    2858:	1bd7      	subs	r7, r2, r7
    285a:	468c      	mov	ip, r1
    285c:	1b4d      	subs	r5, r1, r5
    285e:	45ac      	cmp	ip, r5
    2860:	4192      	sbcs	r2, r2
    2862:	4252      	negs	r2, r2
    2864:	1abf      	subs	r7, r7, r2
    2866:	1c04      	adds	r4, r0, #0
    2868:	4698      	mov	r8, r3
    286a:	e696      	b.n	259a <__aeabi_dsub+0x12a>
    286c:	4663      	mov	r3, ip
    286e:	4665      	mov	r5, ip
    2870:	4333      	orrs	r3, r6
    2872:	d000      	beq.n	2876 <__aeabi_dsub+0x406>
    2874:	e696      	b.n	25a4 <__aeabi_dsub+0x134>
    2876:	2600      	movs	r6, #0
    2878:	2700      	movs	r7, #0
    287a:	2400      	movs	r4, #0
    287c:	2500      	movs	r5, #0
    287e:	e6c4      	b.n	260a <__aeabi_dsub+0x19a>
    2880:	2b1f      	cmp	r3, #31
    2882:	dc61      	bgt.n	2948 <__aeabi_dsub+0x4d8>
    2884:	2020      	movs	r0, #32
    2886:	1ac3      	subs	r3, r0, r3
    2888:	469b      	mov	fp, r3
    288a:	1c13      	adds	r3, r2, #0
    288c:	4659      	mov	r1, fp
    288e:	408b      	lsls	r3, r1
    2890:	4651      	mov	r1, sl
    2892:	4699      	mov	r9, r3
    2894:	9b01      	ldr	r3, [sp, #4]
    2896:	40cb      	lsrs	r3, r1
    2898:	469c      	mov	ip, r3
    289a:	464b      	mov	r3, r9
    289c:	4660      	mov	r0, ip
    289e:	4303      	orrs	r3, r0
    28a0:	469c      	mov	ip, r3
    28a2:	465b      	mov	r3, fp
    28a4:	9901      	ldr	r1, [sp, #4]
    28a6:	4099      	lsls	r1, r3
    28a8:	4663      	mov	r3, ip
    28aa:	1e48      	subs	r0, r1, #1
    28ac:	4181      	sbcs	r1, r0
    28ae:	4319      	orrs	r1, r3
    28b0:	4653      	mov	r3, sl
    28b2:	40da      	lsrs	r2, r3
    28b4:	e6cd      	b.n	2652 <__aeabi_dsub+0x1e2>
    28b6:	1c3c      	adds	r4, r7, #0
    28b8:	432c      	orrs	r4, r5
    28ba:	d05d      	beq.n	2978 <__aeabi_dsub+0x508>
    28bc:	43f1      	mvns	r1, r6
    28be:	4689      	mov	r9, r1
    28c0:	2900      	cmp	r1, #0
    28c2:	d155      	bne.n	2970 <__aeabi_dsub+0x500>
    28c4:	9901      	ldr	r1, [sp, #4]
    28c6:	1bd2      	subs	r2, r2, r7
    28c8:	468c      	mov	ip, r1
    28ca:	1b4d      	subs	r5, r1, r5
    28cc:	45ac      	cmp	ip, r5
    28ce:	4189      	sbcs	r1, r1
    28d0:	4249      	negs	r1, r1
    28d2:	1a57      	subs	r7, r2, r1
    28d4:	1c04      	adds	r4, r0, #0
    28d6:	4698      	mov	r8, r3
    28d8:	e65f      	b.n	259a <__aeabi_dsub+0x12a>
    28da:	4894      	ldr	r0, [pc, #592]	; (2b2c <__aeabi_dsub+0x6bc>)
    28dc:	4284      	cmp	r4, r0
    28de:	d000      	beq.n	28e2 <__aeabi_dsub+0x472>
    28e0:	e6ad      	b.n	263e <__aeabi_dsub+0x1ce>
    28e2:	e5f7      	b.n	24d4 <__aeabi_dsub+0x64>
    28e4:	2200      	movs	r2, #0
    28e6:	e771      	b.n	27cc <__aeabi_dsub+0x35c>
    28e8:	2300      	movs	r3, #0
    28ea:	e787      	b.n	27fc <__aeabi_dsub+0x38c>
    28ec:	1c3b      	adds	r3, r7, #0
    28ee:	432b      	orrs	r3, r5
    28f0:	2c00      	cmp	r4, #0
    28f2:	d000      	beq.n	28f6 <__aeabi_dsub+0x486>
    28f4:	e0da      	b.n	2aac <__aeabi_dsub+0x63c>
    28f6:	2b00      	cmp	r3, #0
    28f8:	d100      	bne.n	28fc <__aeabi_dsub+0x48c>
    28fa:	e113      	b.n	2b24 <__aeabi_dsub+0x6b4>
    28fc:	1c13      	adds	r3, r2, #0
    28fe:	9901      	ldr	r1, [sp, #4]
    2900:	430b      	orrs	r3, r1
    2902:	d100      	bne.n	2906 <__aeabi_dsub+0x496>
    2904:	e5e6      	b.n	24d4 <__aeabi_dsub+0x64>
    2906:	1949      	adds	r1, r1, r5
    2908:	42a9      	cmp	r1, r5
    290a:	419b      	sbcs	r3, r3
    290c:	19d2      	adds	r2, r2, r7
    290e:	425b      	negs	r3, r3
    2910:	18d7      	adds	r7, r2, r3
    2912:	023b      	lsls	r3, r7, #8
    2914:	d400      	bmi.n	2918 <__aeabi_dsub+0x4a8>
    2916:	e121      	b.n	2b5c <__aeabi_dsub+0x6ec>
    2918:	4b85      	ldr	r3, [pc, #532]	; (2b30 <__aeabi_dsub+0x6c0>)
    291a:	1c0d      	adds	r5, r1, #0
    291c:	401f      	ands	r7, r3
    291e:	1c04      	adds	r4, r0, #0
    2920:	e5d8      	b.n	24d4 <__aeabi_dsub+0x64>
    2922:	1c38      	adds	r0, r7, #0
    2924:	4328      	orrs	r0, r5
    2926:	2c00      	cmp	r4, #0
    2928:	d140      	bne.n	29ac <__aeabi_dsub+0x53c>
    292a:	2800      	cmp	r0, #0
    292c:	d000      	beq.n	2930 <__aeabi_dsub+0x4c0>
    292e:	e083      	b.n	2a38 <__aeabi_dsub+0x5c8>
    2930:	1c10      	adds	r0, r2, #0
    2932:	9901      	ldr	r1, [sp, #4]
    2934:	4308      	orrs	r0, r1
    2936:	d003      	beq.n	2940 <__aeabi_dsub+0x4d0>
    2938:	1c17      	adds	r7, r2, #0
    293a:	1c0d      	adds	r5, r1, #0
    293c:	4698      	mov	r8, r3
    293e:	e5c9      	b.n	24d4 <__aeabi_dsub+0x64>
    2940:	2600      	movs	r6, #0
    2942:	2700      	movs	r7, #0
    2944:	2500      	movs	r5, #0
    2946:	e660      	b.n	260a <__aeabi_dsub+0x19a>
    2948:	4650      	mov	r0, sl
    294a:	1c13      	adds	r3, r2, #0
    294c:	3820      	subs	r0, #32
    294e:	40c3      	lsrs	r3, r0
    2950:	1c18      	adds	r0, r3, #0
    2952:	4653      	mov	r3, sl
    2954:	2b20      	cmp	r3, #32
    2956:	d100      	bne.n	295a <__aeabi_dsub+0x4ea>
    2958:	e0c1      	b.n	2ade <__aeabi_dsub+0x66e>
    295a:	2340      	movs	r3, #64	; 0x40
    295c:	4651      	mov	r1, sl
    295e:	1a5b      	subs	r3, r3, r1
    2960:	409a      	lsls	r2, r3
    2962:	9901      	ldr	r1, [sp, #4]
    2964:	4311      	orrs	r1, r2
    2966:	1e4a      	subs	r2, r1, #1
    2968:	4191      	sbcs	r1, r2
    296a:	2200      	movs	r2, #0
    296c:	4301      	orrs	r1, r0
    296e:	e670      	b.n	2652 <__aeabi_dsub+0x1e2>
    2970:	4c6e      	ldr	r4, [pc, #440]	; (2b2c <__aeabi_dsub+0x6bc>)
    2972:	42a0      	cmp	r0, r4
    2974:	d000      	beq.n	2978 <__aeabi_dsub+0x508>
    2976:	e753      	b.n	2820 <__aeabi_dsub+0x3b0>
    2978:	1c17      	adds	r7, r2, #0
    297a:	9d01      	ldr	r5, [sp, #4]
    297c:	1c04      	adds	r4, r0, #0
    297e:	4698      	mov	r8, r3
    2980:	e5a8      	b.n	24d4 <__aeabi_dsub+0x64>
    2982:	2c00      	cmp	r4, #0
    2984:	d128      	bne.n	29d8 <__aeabi_dsub+0x568>
    2986:	1c3c      	adds	r4, r7, #0
    2988:	432c      	orrs	r4, r5
    298a:	d100      	bne.n	298e <__aeabi_dsub+0x51e>
    298c:	e08a      	b.n	2aa4 <__aeabi_dsub+0x634>
    298e:	43db      	mvns	r3, r3
    2990:	469a      	mov	sl, r3
    2992:	2b00      	cmp	r3, #0
    2994:	d000      	beq.n	2998 <__aeabi_dsub+0x528>
    2996:	e082      	b.n	2a9e <__aeabi_dsub+0x62e>
    2998:	9b01      	ldr	r3, [sp, #4]
    299a:	19d2      	adds	r2, r2, r7
    299c:	469c      	mov	ip, r3
    299e:	4465      	add	r5, ip
    29a0:	429d      	cmp	r5, r3
    29a2:	4189      	sbcs	r1, r1
    29a4:	4249      	negs	r1, r1
    29a6:	1857      	adds	r7, r2, r1
    29a8:	1c04      	adds	r4, r0, #0
    29aa:	e659      	b.n	2660 <__aeabi_dsub+0x1f0>
    29ac:	2800      	cmp	r0, #0
    29ae:	d15b      	bne.n	2a68 <__aeabi_dsub+0x5f8>
    29b0:	1c10      	adds	r0, r2, #0
    29b2:	9901      	ldr	r1, [sp, #4]
    29b4:	4308      	orrs	r0, r1
    29b6:	d100      	bne.n	29ba <__aeabi_dsub+0x54a>
    29b8:	e0a4      	b.n	2b04 <__aeabi_dsub+0x694>
    29ba:	1c17      	adds	r7, r2, #0
    29bc:	1c0d      	adds	r5, r1, #0
    29be:	4698      	mov	r8, r3
    29c0:	4c5a      	ldr	r4, [pc, #360]	; (2b2c <__aeabi_dsub+0x6bc>)
    29c2:	e587      	b.n	24d4 <__aeabi_dsub+0x64>
    29c4:	433d      	orrs	r5, r7
    29c6:	1e6f      	subs	r7, r5, #1
    29c8:	41bd      	sbcs	r5, r7
    29ca:	2700      	movs	r7, #0
    29cc:	b2ed      	uxtb	r5, r5
    29ce:	e742      	b.n	2856 <__aeabi_dsub+0x3e6>
    29d0:	1c04      	adds	r4, r0, #0
    29d2:	2700      	movs	r7, #0
    29d4:	2500      	movs	r5, #0
    29d6:	e618      	b.n	260a <__aeabi_dsub+0x19a>
    29d8:	4c54      	ldr	r4, [pc, #336]	; (2b2c <__aeabi_dsub+0x6bc>)
    29da:	42a0      	cmp	r0, r4
    29dc:	d062      	beq.n	2aa4 <__aeabi_dsub+0x634>
    29de:	4653      	mov	r3, sl
    29e0:	2480      	movs	r4, #128	; 0x80
    29e2:	425b      	negs	r3, r3
    29e4:	469a      	mov	sl, r3
    29e6:	0424      	lsls	r4, r4, #16
    29e8:	4327      	orrs	r7, r4
    29ea:	4653      	mov	r3, sl
    29ec:	2b38      	cmp	r3, #56	; 0x38
    29ee:	dd00      	ble.n	29f2 <__aeabi_dsub+0x582>
    29f0:	e08e      	b.n	2b10 <__aeabi_dsub+0x6a0>
    29f2:	2b1f      	cmp	r3, #31
    29f4:	dd00      	ble.n	29f8 <__aeabi_dsub+0x588>
    29f6:	e09d      	b.n	2b34 <__aeabi_dsub+0x6c4>
    29f8:	2420      	movs	r4, #32
    29fa:	1ae3      	subs	r3, r4, r3
    29fc:	469b      	mov	fp, r3
    29fe:	1c3b      	adds	r3, r7, #0
    2a00:	4659      	mov	r1, fp
    2a02:	408b      	lsls	r3, r1
    2a04:	4651      	mov	r1, sl
    2a06:	4699      	mov	r9, r3
    2a08:	1c2b      	adds	r3, r5, #0
    2a0a:	40cb      	lsrs	r3, r1
    2a0c:	469c      	mov	ip, r3
    2a0e:	464b      	mov	r3, r9
    2a10:	4664      	mov	r4, ip
    2a12:	4323      	orrs	r3, r4
    2a14:	469c      	mov	ip, r3
    2a16:	465b      	mov	r3, fp
    2a18:	409d      	lsls	r5, r3
    2a1a:	4663      	mov	r3, ip
    2a1c:	1e6c      	subs	r4, r5, #1
    2a1e:	41a5      	sbcs	r5, r4
    2a20:	40cf      	lsrs	r7, r1
    2a22:	431d      	orrs	r5, r3
    2a24:	9b01      	ldr	r3, [sp, #4]
    2a26:	18bf      	adds	r7, r7, r2
    2a28:	469c      	mov	ip, r3
    2a2a:	4465      	add	r5, ip
    2a2c:	429d      	cmp	r5, r3
    2a2e:	4192      	sbcs	r2, r2
    2a30:	4252      	negs	r2, r2
    2a32:	18bf      	adds	r7, r7, r2
    2a34:	1c04      	adds	r4, r0, #0
    2a36:	e613      	b.n	2660 <__aeabi_dsub+0x1f0>
    2a38:	1c10      	adds	r0, r2, #0
    2a3a:	9901      	ldr	r1, [sp, #4]
    2a3c:	4308      	orrs	r0, r1
    2a3e:	d100      	bne.n	2a42 <__aeabi_dsub+0x5d2>
    2a40:	e548      	b.n	24d4 <__aeabi_dsub+0x64>
    2a42:	1a68      	subs	r0, r5, r1
    2a44:	4684      	mov	ip, r0
    2a46:	4285      	cmp	r5, r0
    2a48:	4180      	sbcs	r0, r0
    2a4a:	1abe      	subs	r6, r7, r2
    2a4c:	4240      	negs	r0, r0
    2a4e:	1a30      	subs	r0, r6, r0
    2a50:	0206      	lsls	r6, r0, #8
    2a52:	d400      	bmi.n	2a56 <__aeabi_dsub+0x5e6>
    2a54:	e647      	b.n	26e6 <__aeabi_dsub+0x276>
    2a56:	468c      	mov	ip, r1
    2a58:	1b4d      	subs	r5, r1, r5
    2a5a:	45ac      	cmp	ip, r5
    2a5c:	4189      	sbcs	r1, r1
    2a5e:	1bd2      	subs	r2, r2, r7
    2a60:	4249      	negs	r1, r1
    2a62:	1a57      	subs	r7, r2, r1
    2a64:	4698      	mov	r8, r3
    2a66:	e535      	b.n	24d4 <__aeabi_dsub+0x64>
    2a68:	1c10      	adds	r0, r2, #0
    2a6a:	9901      	ldr	r1, [sp, #4]
    2a6c:	4308      	orrs	r0, r1
    2a6e:	d034      	beq.n	2ada <__aeabi_dsub+0x66a>
    2a70:	2480      	movs	r4, #128	; 0x80
    2a72:	0778      	lsls	r0, r7, #29
    2a74:	08ed      	lsrs	r5, r5, #3
    2a76:	08ff      	lsrs	r7, r7, #3
    2a78:	0324      	lsls	r4, r4, #12
    2a7a:	4328      	orrs	r0, r5
    2a7c:	4227      	tst	r7, r4
    2a7e:	d008      	beq.n	2a92 <__aeabi_dsub+0x622>
    2a80:	08d6      	lsrs	r6, r2, #3
    2a82:	4226      	tst	r6, r4
    2a84:	d105      	bne.n	2a92 <__aeabi_dsub+0x622>
    2a86:	08c9      	lsrs	r1, r1, #3
    2a88:	0752      	lsls	r2, r2, #29
    2a8a:	430a      	orrs	r2, r1
    2a8c:	1c10      	adds	r0, r2, #0
    2a8e:	1c37      	adds	r7, r6, #0
    2a90:	4698      	mov	r8, r3
    2a92:	00ff      	lsls	r7, r7, #3
    2a94:	0f42      	lsrs	r2, r0, #29
    2a96:	4317      	orrs	r7, r2
    2a98:	00c5      	lsls	r5, r0, #3
    2a9a:	4c24      	ldr	r4, [pc, #144]	; (2b2c <__aeabi_dsub+0x6bc>)
    2a9c:	e51a      	b.n	24d4 <__aeabi_dsub+0x64>
    2a9e:	4c23      	ldr	r4, [pc, #140]	; (2b2c <__aeabi_dsub+0x6bc>)
    2aa0:	42a0      	cmp	r0, r4
    2aa2:	d1a2      	bne.n	29ea <__aeabi_dsub+0x57a>
    2aa4:	1c17      	adds	r7, r2, #0
    2aa6:	9d01      	ldr	r5, [sp, #4]
    2aa8:	1c04      	adds	r4, r0, #0
    2aaa:	e513      	b.n	24d4 <__aeabi_dsub+0x64>
    2aac:	2b00      	cmp	r3, #0
    2aae:	d035      	beq.n	2b1c <__aeabi_dsub+0x6ac>
    2ab0:	1c13      	adds	r3, r2, #0
    2ab2:	9901      	ldr	r1, [sp, #4]
    2ab4:	430b      	orrs	r3, r1
    2ab6:	d010      	beq.n	2ada <__aeabi_dsub+0x66a>
    2ab8:	2480      	movs	r4, #128	; 0x80
    2aba:	0778      	lsls	r0, r7, #29
    2abc:	08ed      	lsrs	r5, r5, #3
    2abe:	08ff      	lsrs	r7, r7, #3
    2ac0:	0324      	lsls	r4, r4, #12
    2ac2:	4328      	orrs	r0, r5
    2ac4:	4227      	tst	r7, r4
    2ac6:	d0e4      	beq.n	2a92 <__aeabi_dsub+0x622>
    2ac8:	08d3      	lsrs	r3, r2, #3
    2aca:	4223      	tst	r3, r4
    2acc:	d1e1      	bne.n	2a92 <__aeabi_dsub+0x622>
    2ace:	08c9      	lsrs	r1, r1, #3
    2ad0:	0752      	lsls	r2, r2, #29
    2ad2:	430a      	orrs	r2, r1
    2ad4:	1c10      	adds	r0, r2, #0
    2ad6:	1c1f      	adds	r7, r3, #0
    2ad8:	e7db      	b.n	2a92 <__aeabi_dsub+0x622>
    2ada:	4c14      	ldr	r4, [pc, #80]	; (2b2c <__aeabi_dsub+0x6bc>)
    2adc:	e4fa      	b.n	24d4 <__aeabi_dsub+0x64>
    2ade:	2200      	movs	r2, #0
    2ae0:	e73f      	b.n	2962 <__aeabi_dsub+0x4f2>
    2ae2:	464c      	mov	r4, r9
    2ae4:	1c3e      	adds	r6, r7, #0
    2ae6:	3c20      	subs	r4, #32
    2ae8:	40e6      	lsrs	r6, r4
    2aea:	4649      	mov	r1, r9
    2aec:	1c34      	adds	r4, r6, #0
    2aee:	2920      	cmp	r1, #32
    2af0:	d032      	beq.n	2b58 <__aeabi_dsub+0x6e8>
    2af2:	2640      	movs	r6, #64	; 0x40
    2af4:	1a76      	subs	r6, r6, r1
    2af6:	40b7      	lsls	r7, r6
    2af8:	433d      	orrs	r5, r7
    2afa:	1e6f      	subs	r7, r5, #1
    2afc:	41bd      	sbcs	r5, r7
    2afe:	2700      	movs	r7, #0
    2b00:	4325      	orrs	r5, r4
    2b02:	e6a8      	b.n	2856 <__aeabi_dsub+0x3e6>
    2b04:	2780      	movs	r7, #128	; 0x80
    2b06:	2600      	movs	r6, #0
    2b08:	03ff      	lsls	r7, r7, #15
    2b0a:	4c08      	ldr	r4, [pc, #32]	; (2b2c <__aeabi_dsub+0x6bc>)
    2b0c:	2500      	movs	r5, #0
    2b0e:	e57c      	b.n	260a <__aeabi_dsub+0x19a>
    2b10:	433d      	orrs	r5, r7
    2b12:	1e6f      	subs	r7, r5, #1
    2b14:	41bd      	sbcs	r5, r7
    2b16:	2700      	movs	r7, #0
    2b18:	b2ed      	uxtb	r5, r5
    2b1a:	e783      	b.n	2a24 <__aeabi_dsub+0x5b4>
    2b1c:	1c17      	adds	r7, r2, #0
    2b1e:	9d01      	ldr	r5, [sp, #4]
    2b20:	4c02      	ldr	r4, [pc, #8]	; (2b2c <__aeabi_dsub+0x6bc>)
    2b22:	e4d7      	b.n	24d4 <__aeabi_dsub+0x64>
    2b24:	1c17      	adds	r7, r2, #0
    2b26:	9d01      	ldr	r5, [sp, #4]
    2b28:	e4d4      	b.n	24d4 <__aeabi_dsub+0x64>
    2b2a:	46c0      	nop			; (mov r8, r8)
    2b2c:	000007ff 	.word	0x000007ff
    2b30:	ff7fffff 	.word	0xff7fffff
    2b34:	4654      	mov	r4, sl
    2b36:	1c3b      	adds	r3, r7, #0
    2b38:	3c20      	subs	r4, #32
    2b3a:	40e3      	lsrs	r3, r4
    2b3c:	1c1c      	adds	r4, r3, #0
    2b3e:	4653      	mov	r3, sl
    2b40:	2b20      	cmp	r3, #32
    2b42:	d00d      	beq.n	2b60 <__aeabi_dsub+0x6f0>
    2b44:	2340      	movs	r3, #64	; 0x40
    2b46:	4651      	mov	r1, sl
    2b48:	1a5b      	subs	r3, r3, r1
    2b4a:	409f      	lsls	r7, r3
    2b4c:	433d      	orrs	r5, r7
    2b4e:	1e6f      	subs	r7, r5, #1
    2b50:	41bd      	sbcs	r5, r7
    2b52:	2700      	movs	r7, #0
    2b54:	4325      	orrs	r5, r4
    2b56:	e765      	b.n	2a24 <__aeabi_dsub+0x5b4>
    2b58:	2700      	movs	r7, #0
    2b5a:	e7cd      	b.n	2af8 <__aeabi_dsub+0x688>
    2b5c:	1c0d      	adds	r5, r1, #0
    2b5e:	e5c8      	b.n	26f2 <__aeabi_dsub+0x282>
    2b60:	2700      	movs	r7, #0
    2b62:	e7f3      	b.n	2b4c <__aeabi_dsub+0x6dc>

00002b64 <__aeabi_f2d>:
__aeabi_f2d():
    2b64:	0042      	lsls	r2, r0, #1
    2b66:	0e12      	lsrs	r2, r2, #24
    2b68:	1c51      	adds	r1, r2, #1
    2b6a:	b538      	push	{r3, r4, r5, lr}
    2b6c:	b2c9      	uxtb	r1, r1
    2b6e:	0243      	lsls	r3, r0, #9
    2b70:	0a5d      	lsrs	r5, r3, #9
    2b72:	0fc4      	lsrs	r4, r0, #31
    2b74:	2901      	cmp	r1, #1
    2b76:	dd15      	ble.n	2ba4 <__aeabi_f2d+0x40>
    2b78:	21e0      	movs	r1, #224	; 0xe0
    2b7a:	0089      	lsls	r1, r1, #2
    2b7c:	468c      	mov	ip, r1
    2b7e:	076d      	lsls	r5, r5, #29
    2b80:	0b1b      	lsrs	r3, r3, #12
    2b82:	4462      	add	r2, ip
    2b84:	2100      	movs	r1, #0
    2b86:	1c28      	adds	r0, r5, #0
    2b88:	0d0d      	lsrs	r5, r1, #20
    2b8a:	052d      	lsls	r5, r5, #20
    2b8c:	432b      	orrs	r3, r5
    2b8e:	4d1c      	ldr	r5, [pc, #112]	; (2c00 <__aeabi_f2d+0x9c>)
    2b90:	0552      	lsls	r2, r2, #21
    2b92:	402b      	ands	r3, r5
    2b94:	0852      	lsrs	r2, r2, #1
    2b96:	4313      	orrs	r3, r2
    2b98:	005b      	lsls	r3, r3, #1
    2b9a:	07e4      	lsls	r4, r4, #31
    2b9c:	085b      	lsrs	r3, r3, #1
    2b9e:	4323      	orrs	r3, r4
    2ba0:	1c19      	adds	r1, r3, #0
    2ba2:	bd38      	pop	{r3, r4, r5, pc}
    2ba4:	2a00      	cmp	r2, #0
    2ba6:	d115      	bne.n	2bd4 <__aeabi_f2d+0x70>
    2ba8:	2d00      	cmp	r5, #0
    2baa:	d01f      	beq.n	2bec <__aeabi_f2d+0x88>
    2bac:	1c28      	adds	r0, r5, #0
    2bae:	f000 f8bd 	bl	2d2c <__clzsi2>
    2bb2:	280a      	cmp	r0, #10
    2bb4:	dc1d      	bgt.n	2bf2 <__aeabi_f2d+0x8e>
    2bb6:	230b      	movs	r3, #11
    2bb8:	1c2a      	adds	r2, r5, #0
    2bba:	1a1b      	subs	r3, r3, r0
    2bbc:	40da      	lsrs	r2, r3
    2bbe:	1c13      	adds	r3, r2, #0
    2bc0:	1c02      	adds	r2, r0, #0
    2bc2:	3215      	adds	r2, #21
    2bc4:	4095      	lsls	r5, r2
    2bc6:	4a0f      	ldr	r2, [pc, #60]	; (2c04 <__aeabi_f2d+0xa0>)
    2bc8:	031b      	lsls	r3, r3, #12
    2bca:	1a12      	subs	r2, r2, r0
    2bcc:	0552      	lsls	r2, r2, #21
    2bce:	0b1b      	lsrs	r3, r3, #12
    2bd0:	0d52      	lsrs	r2, r2, #21
    2bd2:	e7d7      	b.n	2b84 <__aeabi_f2d+0x20>
    2bd4:	2d00      	cmp	r5, #0
    2bd6:	d006      	beq.n	2be6 <__aeabi_f2d+0x82>
    2bd8:	2280      	movs	r2, #128	; 0x80
    2bda:	0b1b      	lsrs	r3, r3, #12
    2bdc:	0312      	lsls	r2, r2, #12
    2bde:	4313      	orrs	r3, r2
    2be0:	076d      	lsls	r5, r5, #29
    2be2:	4a09      	ldr	r2, [pc, #36]	; (2c08 <__aeabi_f2d+0xa4>)
    2be4:	e7ce      	b.n	2b84 <__aeabi_f2d+0x20>
    2be6:	4a08      	ldr	r2, [pc, #32]	; (2c08 <__aeabi_f2d+0xa4>)
    2be8:	2300      	movs	r3, #0
    2bea:	e7cb      	b.n	2b84 <__aeabi_f2d+0x20>
    2bec:	2200      	movs	r2, #0
    2bee:	2300      	movs	r3, #0
    2bf0:	e7c8      	b.n	2b84 <__aeabi_f2d+0x20>
    2bf2:	1c03      	adds	r3, r0, #0
    2bf4:	3b0b      	subs	r3, #11
    2bf6:	409d      	lsls	r5, r3
    2bf8:	1c2b      	adds	r3, r5, #0
    2bfa:	2500      	movs	r5, #0
    2bfc:	e7e3      	b.n	2bc6 <__aeabi_f2d+0x62>
    2bfe:	46c0      	nop			; (mov r8, r8)
    2c00:	800fffff 	.word	0x800fffff
    2c04:	00000389 	.word	0x00000389
    2c08:	000007ff 	.word	0x000007ff

00002c0c <__aeabi_d2f>:
__aeabi_d2f():
    2c0c:	b570      	push	{r4, r5, r6, lr}
    2c0e:	030b      	lsls	r3, r1, #12
    2c10:	004d      	lsls	r5, r1, #1
    2c12:	0f44      	lsrs	r4, r0, #29
    2c14:	0d6d      	lsrs	r5, r5, #21
    2c16:	0a5b      	lsrs	r3, r3, #9
    2c18:	4323      	orrs	r3, r4
    2c1a:	1c6c      	adds	r4, r5, #1
    2c1c:	0564      	lsls	r4, r4, #21
    2c1e:	0fc9      	lsrs	r1, r1, #31
    2c20:	00c2      	lsls	r2, r0, #3
    2c22:	0d64      	lsrs	r4, r4, #21
    2c24:	2c01      	cmp	r4, #1
    2c26:	dd2a      	ble.n	2c7e <__aeabi_d2f+0x72>
    2c28:	4c3b      	ldr	r4, [pc, #236]	; (2d18 <__aeabi_d2f+0x10c>)
    2c2a:	192c      	adds	r4, r5, r4
    2c2c:	2cfe      	cmp	r4, #254	; 0xfe
    2c2e:	dc1a      	bgt.n	2c66 <__aeabi_d2f+0x5a>
    2c30:	2c00      	cmp	r4, #0
    2c32:	dd35      	ble.n	2ca0 <__aeabi_d2f+0x94>
    2c34:	0180      	lsls	r0, r0, #6
    2c36:	1e45      	subs	r5, r0, #1
    2c38:	41a8      	sbcs	r0, r5
    2c3a:	00db      	lsls	r3, r3, #3
    2c3c:	4303      	orrs	r3, r0
    2c3e:	0f52      	lsrs	r2, r2, #29
    2c40:	4313      	orrs	r3, r2
    2c42:	075a      	lsls	r2, r3, #29
    2c44:	d004      	beq.n	2c50 <__aeabi_d2f+0x44>
    2c46:	220f      	movs	r2, #15
    2c48:	401a      	ands	r2, r3
    2c4a:	2a04      	cmp	r2, #4
    2c4c:	d000      	beq.n	2c50 <__aeabi_d2f+0x44>
    2c4e:	3304      	adds	r3, #4
    2c50:	2280      	movs	r2, #128	; 0x80
    2c52:	04d2      	lsls	r2, r2, #19
    2c54:	401a      	ands	r2, r3
    2c56:	d027      	beq.n	2ca8 <__aeabi_d2f+0x9c>
    2c58:	3401      	adds	r4, #1
    2c5a:	2cff      	cmp	r4, #255	; 0xff
    2c5c:	d003      	beq.n	2c66 <__aeabi_d2f+0x5a>
    2c5e:	019b      	lsls	r3, r3, #6
    2c60:	0a5b      	lsrs	r3, r3, #9
    2c62:	b2e4      	uxtb	r4, r4
    2c64:	e001      	b.n	2c6a <__aeabi_d2f+0x5e>
    2c66:	24ff      	movs	r4, #255	; 0xff
    2c68:	2300      	movs	r3, #0
    2c6a:	025b      	lsls	r3, r3, #9
    2c6c:	05e4      	lsls	r4, r4, #23
    2c6e:	0a5b      	lsrs	r3, r3, #9
    2c70:	4323      	orrs	r3, r4
    2c72:	005b      	lsls	r3, r3, #1
    2c74:	07c9      	lsls	r1, r1, #31
    2c76:	085b      	lsrs	r3, r3, #1
    2c78:	430b      	orrs	r3, r1
    2c7a:	1c18      	adds	r0, r3, #0
    2c7c:	bd70      	pop	{r4, r5, r6, pc}
    2c7e:	2d00      	cmp	r5, #0
    2c80:	d106      	bne.n	2c90 <__aeabi_d2f+0x84>
    2c82:	4313      	orrs	r3, r2
    2c84:	d10e      	bne.n	2ca4 <__aeabi_d2f+0x98>
    2c86:	2400      	movs	r4, #0
    2c88:	025b      	lsls	r3, r3, #9
    2c8a:	0a5b      	lsrs	r3, r3, #9
    2c8c:	b2e4      	uxtb	r4, r4
    2c8e:	e7ec      	b.n	2c6a <__aeabi_d2f+0x5e>
    2c90:	431a      	orrs	r2, r3
    2c92:	d0e8      	beq.n	2c66 <__aeabi_d2f+0x5a>
    2c94:	2080      	movs	r0, #128	; 0x80
    2c96:	00db      	lsls	r3, r3, #3
    2c98:	0480      	lsls	r0, r0, #18
    2c9a:	4303      	orrs	r3, r0
    2c9c:	24ff      	movs	r4, #255	; 0xff
    2c9e:	e7d0      	b.n	2c42 <__aeabi_d2f+0x36>
    2ca0:	3417      	adds	r4, #23
    2ca2:	da0c      	bge.n	2cbe <__aeabi_d2f+0xb2>
    2ca4:	2305      	movs	r3, #5
    2ca6:	2400      	movs	r4, #0
    2ca8:	08db      	lsrs	r3, r3, #3
    2caa:	2cff      	cmp	r4, #255	; 0xff
    2cac:	d1ec      	bne.n	2c88 <__aeabi_d2f+0x7c>
    2cae:	2b00      	cmp	r3, #0
    2cb0:	d02d      	beq.n	2d0e <__aeabi_d2f+0x102>
    2cb2:	2280      	movs	r2, #128	; 0x80
    2cb4:	03d2      	lsls	r2, r2, #15
    2cb6:	4313      	orrs	r3, r2
    2cb8:	025b      	lsls	r3, r3, #9
    2cba:	0a5b      	lsrs	r3, r3, #9
    2cbc:	e7d5      	b.n	2c6a <__aeabi_d2f+0x5e>
    2cbe:	2480      	movs	r4, #128	; 0x80
    2cc0:	4816      	ldr	r0, [pc, #88]	; (2d1c <__aeabi_d2f+0x110>)
    2cc2:	0424      	lsls	r4, r4, #16
    2cc4:	4323      	orrs	r3, r4
    2cc6:	1b40      	subs	r0, r0, r5
    2cc8:	281f      	cmp	r0, #31
    2cca:	dc0d      	bgt.n	2ce8 <__aeabi_d2f+0xdc>
    2ccc:	4c14      	ldr	r4, [pc, #80]	; (2d20 <__aeabi_d2f+0x114>)
    2cce:	46a4      	mov	ip, r4
    2cd0:	4465      	add	r5, ip
    2cd2:	40ab      	lsls	r3, r5
    2cd4:	1c1c      	adds	r4, r3, #0
    2cd6:	1c13      	adds	r3, r2, #0
    2cd8:	40ab      	lsls	r3, r5
    2cda:	1e5d      	subs	r5, r3, #1
    2cdc:	41ab      	sbcs	r3, r5
    2cde:	40c2      	lsrs	r2, r0
    2ce0:	4323      	orrs	r3, r4
    2ce2:	4313      	orrs	r3, r2
    2ce4:	2400      	movs	r4, #0
    2ce6:	e7ac      	b.n	2c42 <__aeabi_d2f+0x36>
    2ce8:	1c1e      	adds	r6, r3, #0
    2cea:	4c0e      	ldr	r4, [pc, #56]	; (2d24 <__aeabi_d2f+0x118>)
    2cec:	1b64      	subs	r4, r4, r5
    2cee:	40e6      	lsrs	r6, r4
    2cf0:	1c34      	adds	r4, r6, #0
    2cf2:	2820      	cmp	r0, #32
    2cf4:	d00d      	beq.n	2d12 <__aeabi_d2f+0x106>
    2cf6:	480c      	ldr	r0, [pc, #48]	; (2d28 <__aeabi_d2f+0x11c>)
    2cf8:	4684      	mov	ip, r0
    2cfa:	4465      	add	r5, ip
    2cfc:	40ab      	lsls	r3, r5
    2cfe:	1c1d      	adds	r5, r3, #0
    2d00:	432a      	orrs	r2, r5
    2d02:	1e53      	subs	r3, r2, #1
    2d04:	419a      	sbcs	r2, r3
    2d06:	1c13      	adds	r3, r2, #0
    2d08:	4323      	orrs	r3, r4
    2d0a:	2400      	movs	r4, #0
    2d0c:	e799      	b.n	2c42 <__aeabi_d2f+0x36>
    2d0e:	2300      	movs	r3, #0
    2d10:	e7ab      	b.n	2c6a <__aeabi_d2f+0x5e>
    2d12:	2500      	movs	r5, #0
    2d14:	e7f4      	b.n	2d00 <__aeabi_d2f+0xf4>
    2d16:	46c0      	nop			; (mov r8, r8)
    2d18:	fffffc80 	.word	0xfffffc80
    2d1c:	0000039e 	.word	0x0000039e
    2d20:	fffffc82 	.word	0xfffffc82
    2d24:	0000037e 	.word	0x0000037e
    2d28:	fffffca2 	.word	0xfffffca2

00002d2c <__clzsi2>:
__clzsi2():
    2d2c:	211c      	movs	r1, #28
    2d2e:	2301      	movs	r3, #1
    2d30:	041b      	lsls	r3, r3, #16
    2d32:	4298      	cmp	r0, r3
    2d34:	d301      	bcc.n	2d3a <__clzsi2+0xe>
    2d36:	0c00      	lsrs	r0, r0, #16
    2d38:	3910      	subs	r1, #16
    2d3a:	0a1b      	lsrs	r3, r3, #8
    2d3c:	4298      	cmp	r0, r3
    2d3e:	d301      	bcc.n	2d44 <__clzsi2+0x18>
    2d40:	0a00      	lsrs	r0, r0, #8
    2d42:	3908      	subs	r1, #8
    2d44:	091b      	lsrs	r3, r3, #4
    2d46:	4298      	cmp	r0, r3
    2d48:	d301      	bcc.n	2d4e <__clzsi2+0x22>
    2d4a:	0900      	lsrs	r0, r0, #4
    2d4c:	3904      	subs	r1, #4
    2d4e:	a202      	add	r2, pc, #8	; (adr r2, 2d58 <__clzsi2+0x2c>)
    2d50:	5c10      	ldrb	r0, [r2, r0]
    2d52:	1840      	adds	r0, r0, r1
    2d54:	4770      	bx	lr
    2d56:	46c0      	nop			; (mov r8, r8)
    2d58:	02020304 	.word	0x02020304
    2d5c:	01010101 	.word	0x01010101
	...

00002d68 <FTM_OnCounterRestart>:
FTM_OnCounterRestart():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:60
	// read function and indirectly the fusion and magnetic calibration functions which
	// are software locked to the sensor read process

	// always enable the sensor read task
	// update time stamp counter
	mqxglobals.FTMTimestamp += (uint32)mqxglobals.FTMReload;
    2d68:	4805      	ldr	r0, [pc, #20]	; (2d80 <FTM_OnCounterRestart+0x18>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:53
    PORTA_PCR4 |= PORT_PCR_MUX(01) | PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;
	return;
}

void FTM_OnCounterRestart(LDD_TUserData *UserDataPtr)
{
    2d6a:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:60
	// read function and indirectly the fusion and magnetic calibration functions which
	// are software locked to the sensor read process

	// always enable the sensor read task
	// update time stamp counter
	mqxglobals.FTMTimestamp += (uint32)mqxglobals.FTMReload;
    2d6c:	6f02      	ldr	r2, [r0, #112]	; 0x70
    2d6e:	236c      	movs	r3, #108	; 0x6c
    2d70:	4694      	mov	ip, r2
    2d72:	5ac3      	ldrh	r3, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:63
	// enable the (typically 200Hz) sensor read event FSL_SAMPLING_EVENT
	// with a mask of 1 (least significant bit set)
	_lwevent_set(&(mqxglobals.SamplingEventStruct), 1);
    2d74:	2101      	movs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:60
	// read function and indirectly the fusion and magnetic calibration functions which
	// are software locked to the sensor read process

	// always enable the sensor read task
	// update time stamp counter
	mqxglobals.FTMTimestamp += (uint32)mqxglobals.FTMReload;
    2d76:	4463      	add	r3, ip
    2d78:	6703      	str	r3, [r0, #112]	; 0x70
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:63
	// enable the (typically 200Hz) sensor read event FSL_SAMPLING_EVENT
	// with a mask of 1 (least significant bit set)
	_lwevent_set(&(mqxglobals.SamplingEventStruct), 1);
    2d7a:	f00d fa3b 	bl	101f4 <_lwevent_set>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:66

	return;
}
    2d7e:	bd08      	pop	{r3, pc}
    2d80:	20000560 	.word	0x20000560

00002d84 <UART_OnBlockSent>:
UART_OnBlockSent():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:73

void UART_OnBlockSent(LDD_TUserData *UserDataPtr)
{
	// return with no action
	return;
}
    2d84:	4770      	bx	lr
    2d86:	46c0      	nop			; (mov r8, r8)

00002d88 <I2C_OnMasterBlockSent>:
I2C_OnMasterBlockSent():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:78

void I2C_OnMasterBlockSent(LDD_TUserData *UserDataPtr)
{
	// set the I2C data sent flag
	mqxglobals.I2C_Status |= I2C_SENT_FLAG;
    2d88:	2274      	movs	r2, #116	; 0x74
    2d8a:	2301      	movs	r3, #1
    2d8c:	4902      	ldr	r1, [pc, #8]	; (2d98 <I2C_OnMasterBlockSent+0x10>)
    2d8e:	5c88      	ldrb	r0, [r1, r2]
    2d90:	4303      	orrs	r3, r0
    2d92:	548b      	strb	r3, [r1, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:81

	return;
}
    2d94:	4770      	bx	lr
    2d96:	46c0      	nop			; (mov r8, r8)
    2d98:	20000560 	.word	0x20000560

00002d9c <I2C_OnMasterBlockReceived>:
I2C_OnMasterBlockReceived():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:87


void I2C_OnMasterBlockReceived(LDD_TUserData *UserDataPtr)
{
	// set the I2C data received flag
	mqxglobals.I2C_Status |= I2C_RCVD_FLAG;
    2d9c:	2274      	movs	r2, #116	; 0x74
    2d9e:	2302      	movs	r3, #2
    2da0:	4902      	ldr	r1, [pc, #8]	; (2dac <I2C_OnMasterBlockReceived+0x10>)
    2da2:	5c88      	ldrb	r0, [r1, r2]
    2da4:	4303      	orrs	r3, r0
    2da6:	548b      	strb	r3, [r1, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:90

	return;
}
    2da8:	4770      	bx	lr
    2daa:	46c0      	nop			; (mov r8, r8)
    2dac:	20000560 	.word	0x20000560

00002db0 <UART_OnTxComplete>:
UART_OnTxComplete():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:104
{
#ifdef DEEPSLEEP
	SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK; // Enable full STOP mode
#endif
	return;
}
    2db0:	4770      	bx	lr
    2db2:	46c0      	nop			; (mov r8, r8)

00002db4 <UART_OnBlockReceived>:
UART_OnBlockReceived():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:107

void UART_OnBlockReceived(LDD_TUserData *UserDataPtr)
{
    2db4:	b510      	push	{r4, lr}
    2db6:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:109
	UART_Desc *ptr = (UART_Desc*)UserDataPtr;
	RNG1_Put(ptr->rxChar);
    2db8:	7900      	ldrb	r0, [r0, #4]
    2dba:	f00e fe0b 	bl	119d4 <RNG1_Put>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:110
	UART_ReceiveBlock(ptr->handle, (LDD_TData *)&(ptr->rxChar), sizeof(ptr->rxChar));
    2dbe:	1c21      	adds	r1, r4, #0
    2dc0:	2201      	movs	r2, #1
    2dc2:	c901      	ldmia	r1!, {r0}
    2dc4:	f00f f858 	bl	11e78 <UART_ReceiveBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:111
}
    2dc8:	bd10      	pop	{r4, pc}
    2dca:	46c0      	nop			; (mov r8, r8)

00002dcc <fasin_deg>:
fasin_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:43
// and returns -90 <= angle <= 90 deg
// maximum error is 10.29E-6 deg
float fasin_deg(float x)
{
	// for robustness, check for invalid argument
	if (x >= 1.0F) return 90.0F;
    2dcc:	21fe      	movs	r1, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:41

// function returns an approximation to angle(deg)=asin(x) for x in the range -1 <= x <= 1
// and returns -90 <= angle <= 90 deg
// maximum error is 10.29E-6 deg
float fasin_deg(float x)
{
    2dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:43
	// for robustness, check for invalid argument
	if (x >= 1.0F) return 90.0F;
    2dd0:	0589      	lsls	r1, r1, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:41

// function returns an approximation to angle(deg)=asin(x) for x in the range -1 <= x <= 1
// and returns -90 <= angle <= 90 deg
// maximum error is 10.29E-6 deg
float fasin_deg(float x)
{
    2dd2:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:43
	// for robustness, check for invalid argument
	if (x >= 1.0F) return 90.0F;
    2dd4:	f7fd fd56 	bl	884 <__aeabi_fcmpge>
    2dd8:	2800      	cmp	r0, #0
    2dda:	d001      	beq.n	2de0 <fasin_deg+0x14>
    2ddc:	4848      	ldr	r0, [pc, #288]	; (2f00 <fasin_deg+0x134>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:49
	if (x <= -1.0F) return -90.0F;

	// call the atan which will return an angle in the correct range -90 to 90 deg
	// this line cannot fail from division by zero or negative square root since |x| < 1
	return (fatan_deg(x / sqrtf(1.0F - x * x)));
}
    2dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:44
// maximum error is 10.29E-6 deg
float fasin_deg(float x)
{
	// for robustness, check for invalid argument
	if (x >= 1.0F) return 90.0F;
	if (x <= -1.0F) return -90.0F;
    2de0:	1c20      	adds	r0, r4, #0
    2de2:	4948      	ldr	r1, [pc, #288]	; (2f04 <fasin_deg+0x138>)
    2de4:	f7fd fd3a 	bl	85c <__aeabi_fcmple>
    2de8:	2800      	cmp	r0, #0
    2dea:	d16c      	bne.n	2ec6 <fasin_deg+0xfa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:48

	// call the atan which will return an angle in the correct range -90 to 90 deg
	// this line cannot fail from division by zero or negative square root since |x| < 1
	return (fatan_deg(x / sqrtf(1.0F - x * x)));
    2dec:	1c21      	adds	r1, r4, #0
    2dee:	1c20      	adds	r0, r4, #0
    2df0:	f7fe f8c0 	bl	f74 <__aeabi_fmul>
    2df4:	1c01      	adds	r1, r0, #0
    2df6:	20fe      	movs	r0, #254	; 0xfe
    2df8:	0580      	lsls	r0, r0, #22
    2dfa:	f7fe f9ed 	bl	11d8 <__aeabi_fsub>
    2dfe:	f00f fe05 	bl	12a0c <sqrtf>
    2e02:	1c01      	adds	r1, r0, #0
    2e04:	1c20      	adds	r0, r4, #0
    2e06:	f7fd fec3 	bl	b90 <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2e0a:	2100      	movs	r1, #0
fasin_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:48
	if (x >= 1.0F) return 90.0F;
	if (x <= -1.0F) return -90.0F;

	// call the atan which will return an angle in the correct range -90 to 90 deg
	// this line cannot fail from division by zero or negative square root since |x| < 1
	return (fatan_deg(x / sqrtf(1.0F - x * x)));
    2e0c:	1c04      	adds	r4, r0, #0
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2e0e:	f7fd fd1b 	bl	848 <__aeabi_fcmplt>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    2e12:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2e14:	2800      	cmp	r0, #0
    2e16:	d14e      	bne.n	2eb6 <fasin_deg+0xea>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
		x = -x;
		ixisnegative = 1;
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    2e18:	21fe      	movs	r1, #254	; 0xfe
    2e1a:	1c20      	adds	r0, r4, #0
    2e1c:	0589      	lsls	r1, r1, #22
    2e1e:	f7fd fd27 	bl	870 <__aeabi_fcmpgt>
    2e22:	2800      	cmp	r0, #0
    2e24:	d04d      	beq.n	2ec2 <fasin_deg+0xf6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	{
		x = 1.0F / x;
    2e26:	20fe      	movs	r0, #254	; 0xfe
    2e28:	1c21      	adds	r1, r4, #0
    2e2a:	0580      	lsls	r0, r0, #22
    2e2c:	f7fd feb0 	bl	b90 <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:93
		ixexceeds1 = 1;
    2e30:	2501      	movs	r5, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
	{
		x = 1.0F / x;
    2e32:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:101
	// at this point, x is in the range 0 to 1 inclusive
	// map argument onto range -tan(15 deg) to tan(15 deg)
	// using tan(angle-30deg) = (tan(angle)-tan(30deg)) / (1 + tan(angle)tan(30deg))
	// tan(15deg) maps to tan(-15 deg) = -tan(15 deg)
	// 1. maps to (sqrt(3) - 1) / (sqrt(3) + 1) = 2 - sqrt(3) = tan(15 deg)
	if (x > TAN15DEG)
    2e34:	1c20      	adds	r0, r4, #0
    2e36:	4934      	ldr	r1, [pc, #208]	; (2f08 <fasin_deg+0x13c>)
    2e38:	f7fd fd1a 	bl	870 <__aeabi_fcmpgt>
    2e3c:	2800      	cmp	r0, #0
    2e3e:	d044      	beq.n	2eca <fasin_deg+0xfe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:103
	{
		x = (x - TAN30DEG)/(1.0F + TAN30DEG * x);
    2e40:	1c20      	adds	r0, r4, #0
    2e42:	4932      	ldr	r1, [pc, #200]	; (2f0c <fasin_deg+0x140>)
    2e44:	f7fe f9c8 	bl	11d8 <__aeabi_fsub>
    2e48:	4930      	ldr	r1, [pc, #192]	; (2f0c <fasin_deg+0x140>)
    2e4a:	1c07      	adds	r7, r0, #0
    2e4c:	1c20      	adds	r0, r4, #0
    2e4e:	f7fe f891 	bl	f74 <__aeabi_fmul>
    2e52:	21fe      	movs	r1, #254	; 0xfe
    2e54:	0589      	lsls	r1, r1, #22
    2e56:	f7fd fd1f 	bl	898 <__aeabi_fadd>
    2e5a:	1c01      	adds	r1, r0, #0
    2e5c:	1c38      	adds	r0, r7, #0
    2e5e:	f7fd fe97 	bl	b90 <__aeabi_fdiv>
    2e62:	1c04      	adds	r4, r0, #0
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    2e64:	1c21      	adds	r1, r4, #0
    2e66:	f7fe f885 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    2e6a:	4929      	ldr	r1, [pc, #164]	; (2f10 <fasin_deg+0x144>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    2e6c:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    2e6e:	f7fe f881 	bl	f74 <__aeabi_fmul>
    2e72:	4928      	ldr	r1, [pc, #160]	; (2f14 <fasin_deg+0x148>)
    2e74:	f7fd fd10 	bl	898 <__aeabi_fadd>
    2e78:	1c01      	adds	r1, r0, #0
    2e7a:	1c20      	adds	r0, r4, #0
    2e7c:	f7fe f87a 	bl	f74 <__aeabi_fmul>
    2e80:	4925      	ldr	r1, [pc, #148]	; (2f18 <fasin_deg+0x14c>)
    2e82:	1c04      	adds	r4, r0, #0
    2e84:	1c38      	adds	r0, r7, #0
    2e86:	f7fd fd07 	bl	898 <__aeabi_fadd>
    2e8a:	1c01      	adds	r1, r0, #0
    2e8c:	1c20      	adds	r0, r4, #0
    2e8e:	f7fd fe7f 	bl	b90 <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:111

	// call the atan estimator to obtain -15 deg <= angle <= 15 deg
	fangledeg = fatan_15deg(x);

	// undo the distortions applied earlier to obtain -90 deg <= angle <= 90 deg
	if (ixmapped) fangledeg += 30.0F;
    2e92:	4922      	ldr	r1, [pc, #136]	; (2f1c <fasin_deg+0x150>)
    2e94:	f7fd fd00 	bl	898 <__aeabi_fadd>
    2e98:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:112
	if (ixexceeds1) fangledeg = 90.0F - fangledeg;
    2e9a:	2d00      	cmp	r5, #0
    2e9c:	d003      	beq.n	2ea6 <fasin_deg+0xda>
    2e9e:	4818      	ldr	r0, [pc, #96]	; (2f00 <fasin_deg+0x134>)
    2ea0:	f7fe f99a 	bl	11d8 <__aeabi_fsub>
    2ea4:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:113
	if (ixisnegative) fangledeg = -fangledeg;
    2ea6:	1c08      	adds	r0, r1, #0
    2ea8:	2e00      	cmp	r6, #0
    2eaa:	d098      	beq.n	2dde <fasin_deg+0x12>
    2eac:	2380      	movs	r3, #128	; 0x80
    2eae:	061b      	lsls	r3, r3, #24
    2eb0:	469c      	mov	ip, r3
    2eb2:	4460      	add	r0, ip
    2eb4:	e793      	b.n	2dde <fasin_deg+0x12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    2eb6:	2380      	movs	r3, #128	; 0x80
    2eb8:	061b      	lsls	r3, r3, #24
    2eba:	469c      	mov	ip, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:86
		ixisnegative = 1;
    2ebc:	2601      	movs	r6, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    2ebe:	4464      	add	r4, ip
    2ec0:	e7aa      	b.n	2e18 <fasin_deg+0x4c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    2ec2:	2500      	movs	r5, #0
    2ec4:	e7b6      	b.n	2e34 <fasin_deg+0x68>
fasin_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:44
// maximum error is 10.29E-6 deg
float fasin_deg(float x)
{
	// for robustness, check for invalid argument
	if (x >= 1.0F) return 90.0F;
	if (x <= -1.0F) return -90.0F;
    2ec6:	4816      	ldr	r0, [pc, #88]	; (2f20 <fasin_deg+0x154>)
    2ec8:	e789      	b.n	2dde <fasin_deg+0x12>
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    2eca:	1c21      	adds	r1, r4, #0
    2ecc:	1c20      	adds	r0, r4, #0
    2ece:	f7fe f851 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    2ed2:	490f      	ldr	r1, [pc, #60]	; (2f10 <fasin_deg+0x144>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    2ed4:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    2ed6:	f7fe f84d 	bl	f74 <__aeabi_fmul>
    2eda:	490e      	ldr	r1, [pc, #56]	; (2f14 <fasin_deg+0x148>)
    2edc:	f7fd fcdc 	bl	898 <__aeabi_fadd>
    2ee0:	1c01      	adds	r1, r0, #0
    2ee2:	1c20      	adds	r0, r4, #0
    2ee4:	f7fe f846 	bl	f74 <__aeabi_fmul>
    2ee8:	490b      	ldr	r1, [pc, #44]	; (2f18 <fasin_deg+0x14c>)
    2eea:	1c04      	adds	r4, r0, #0
    2eec:	1c38      	adds	r0, r7, #0
    2eee:	f7fd fcd3 	bl	898 <__aeabi_fadd>
    2ef2:	1c01      	adds	r1, r0, #0
    2ef4:	1c20      	adds	r0, r4, #0
    2ef6:	f7fd fe4b 	bl	b90 <__aeabi_fdiv>
    2efa:	1c01      	adds	r1, r0, #0
    2efc:	e7cd      	b.n	2e9a <fasin_deg+0xce>
    2efe:	46c0      	nop			; (mov r8, r8)
    2f00:	42b40000 	.word	0x42b40000
    2f04:	bf800000 	.word	0xbf800000
    2f08:	3e8930a3 	.word	0x3e8930a3
    2f0c:	3f13cd3a 	.word	0x3f13cd3a
    2f10:	41c8b20e 	.word	0x41c8b20e
    2f14:	42c149ee 	.word	0x42c149ee
    2f18:	3fd7e7dc 	.word	0x3fd7e7dc
    2f1c:	41f00000 	.word	0x41f00000
    2f20:	c2b40000 	.word	0xc2b40000

00002f24 <facos_deg>:
facos_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:57
// and returns 0 <= angle <= 180 deg
// maximum error is 14.67E-6 deg
float facos_deg(float x)
{
	// for robustness, check for invalid arguments
	if (x >= 1.0F) return 0.0F;
    2f24:	21fe      	movs	r1, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:55

// function returns an approximation to angle(deg)=acos(x) for x in the range -1 <= x <= 1
// and returns 0 <= angle <= 180 deg
// maximum error is 14.67E-6 deg
float facos_deg(float x)
{
    2f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:57
	// for robustness, check for invalid arguments
	if (x >= 1.0F) return 0.0F;
    2f28:	0589      	lsls	r1, r1, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:55

// function returns an approximation to angle(deg)=acos(x) for x in the range -1 <= x <= 1
// and returns 0 <= angle <= 180 deg
// maximum error is 14.67E-6 deg
float facos_deg(float x)
{
    2f2a:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:57
	// for robustness, check for invalid arguments
	if (x >= 1.0F) return 0.0F;
    2f2c:	f7fd fcaa 	bl	884 <__aeabi_fcmpge>
    2f30:	2800      	cmp	r0, #0
    2f32:	d001      	beq.n	2f38 <facos_deg+0x14>
    2f34:	2000      	movs	r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:65
	// call the atan which will return an angle in the incorrect range -90 to 90 deg
	// these lines cannot fail from division by zero or negative square root
	if (x == 0.0F) return 90.0F;
	if (x > 0.0F) return fatan_deg((sqrtf(1.0F - x * x) / x));
	return 180.0F + fatan_deg((sqrtf(1.0F - x * x) / x));
}
    2f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:58
// maximum error is 14.67E-6 deg
float facos_deg(float x)
{
	// for robustness, check for invalid arguments
	if (x >= 1.0F) return 0.0F;
	if (x <= -1.0F) return 180.0F;
    2f38:	1c20      	adds	r0, r4, #0
    2f3a:	4994      	ldr	r1, [pc, #592]	; (318c <facos_deg+0x268>)
    2f3c:	f7fd fc8e 	bl	85c <__aeabi_fcmple>
    2f40:	2800      	cmp	r0, #0
    2f42:	d175      	bne.n	3030 <facos_deg+0x10c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:62

	// call the atan which will return an angle in the incorrect range -90 to 90 deg
	// these lines cannot fail from division by zero or negative square root
	if (x == 0.0F) return 90.0F;
    2f44:	1c20      	adds	r0, r4, #0
    2f46:	2100      	movs	r1, #0
    2f48:	f7fd fc78 	bl	83c <__aeabi_fcmpeq>
    2f4c:	2800      	cmp	r0, #0
    2f4e:	d16d      	bne.n	302c <facos_deg+0x108>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:63
	if (x > 0.0F) return fatan_deg((sqrtf(1.0F - x * x) / x));
    2f50:	1c20      	adds	r0, r4, #0
    2f52:	2100      	movs	r1, #0
    2f54:	f7fd fc8c 	bl	870 <__aeabi_fcmpgt>
    2f58:	2800      	cmp	r0, #0
    2f5a:	d06b      	beq.n	3034 <facos_deg+0x110>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:63 (discriminator 1)
    2f5c:	1c21      	adds	r1, r4, #0
    2f5e:	1c20      	adds	r0, r4, #0
    2f60:	f7fe f808 	bl	f74 <__aeabi_fmul>
    2f64:	1c01      	adds	r1, r0, #0
    2f66:	20fe      	movs	r0, #254	; 0xfe
    2f68:	0580      	lsls	r0, r0, #22
    2f6a:	f7fe f935 	bl	11d8 <__aeabi_fsub>
    2f6e:	f00f fd4d 	bl	12a0c <sqrtf>
    2f72:	1c21      	adds	r1, r4, #0
    2f74:	f7fd fe0c 	bl	b90 <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 1)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2f78:	2100      	movs	r1, #0
facos_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:63 (discriminator 1)
	if (x <= -1.0F) return 180.0F;

	// call the atan which will return an angle in the incorrect range -90 to 90 deg
	// these lines cannot fail from division by zero or negative square root
	if (x == 0.0F) return 90.0F;
	if (x > 0.0F) return fatan_deg((sqrtf(1.0F - x * x) / x));
    2f7a:	1c04      	adds	r4, r0, #0
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 1)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2f7c:	f7fd fc64 	bl	848 <__aeabi_fcmplt>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80 (discriminator 1)

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    2f80:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 1)
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2f82:	2800      	cmp	r0, #0
    2f84:	d000      	beq.n	2f88 <facos_deg+0x64>
    2f86:	e0f8      	b.n	317a <facos_deg+0x256>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
		x = -x;
		ixisnegative = 1;
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    2f88:	21fe      	movs	r1, #254	; 0xfe
    2f8a:	1c20      	adds	r0, r4, #0
    2f8c:	0589      	lsls	r1, r1, #22
    2f8e:	f7fd fc6f 	bl	870 <__aeabi_fcmpgt>
    2f92:	2800      	cmp	r0, #0
    2f94:	d100      	bne.n	2f98 <facos_deg+0x74>
    2f96:	e0f6      	b.n	3186 <facos_deg+0x262>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	{
		x = 1.0F / x;
    2f98:	20fe      	movs	r0, #254	; 0xfe
    2f9a:	1c21      	adds	r1, r4, #0
    2f9c:	0580      	lsls	r0, r0, #22
    2f9e:	f7fd fdf7 	bl	b90 <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:93
		ixexceeds1 = 1;
    2fa2:	2501      	movs	r5, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
	{
		x = 1.0F / x;
    2fa4:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:101
	// at this point, x is in the range 0 to 1 inclusive
	// map argument onto range -tan(15 deg) to tan(15 deg)
	// using tan(angle-30deg) = (tan(angle)-tan(30deg)) / (1 + tan(angle)tan(30deg))
	// tan(15deg) maps to tan(-15 deg) = -tan(15 deg)
	// 1. maps to (sqrt(3) - 1) / (sqrt(3) + 1) = 2 - sqrt(3) = tan(15 deg)
	if (x > TAN15DEG)
    2fa6:	1c20      	adds	r0, r4, #0
    2fa8:	4979      	ldr	r1, [pc, #484]	; (3190 <facos_deg+0x26c>)
    2faa:	f7fd fc61 	bl	870 <__aeabi_fcmpgt>
    2fae:	2800      	cmp	r0, #0
    2fb0:	d100      	bne.n	2fb4 <facos_deg+0x90>
    2fb2:	e0a6      	b.n	3102 <facos_deg+0x1de>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:103
	{
		x = (x - TAN30DEG)/(1.0F + TAN30DEG * x);
    2fb4:	1c20      	adds	r0, r4, #0
    2fb6:	4977      	ldr	r1, [pc, #476]	; (3194 <facos_deg+0x270>)
    2fb8:	f7fe f90e 	bl	11d8 <__aeabi_fsub>
    2fbc:	4975      	ldr	r1, [pc, #468]	; (3194 <facos_deg+0x270>)
    2fbe:	1c07      	adds	r7, r0, #0
    2fc0:	1c20      	adds	r0, r4, #0
    2fc2:	f7fd ffd7 	bl	f74 <__aeabi_fmul>
    2fc6:	21fe      	movs	r1, #254	; 0xfe
    2fc8:	0589      	lsls	r1, r1, #22
    2fca:	f7fd fc65 	bl	898 <__aeabi_fadd>
    2fce:	1c01      	adds	r1, r0, #0
    2fd0:	1c38      	adds	r0, r7, #0
    2fd2:	f7fd fddd 	bl	b90 <__aeabi_fdiv>
    2fd6:	1c04      	adds	r4, r0, #0
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    2fd8:	1c21      	adds	r1, r4, #0
    2fda:	f7fd ffcb 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    2fde:	496e      	ldr	r1, [pc, #440]	; (3198 <facos_deg+0x274>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    2fe0:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    2fe2:	f7fd ffc7 	bl	f74 <__aeabi_fmul>
    2fe6:	496d      	ldr	r1, [pc, #436]	; (319c <facos_deg+0x278>)
    2fe8:	f7fd fc56 	bl	898 <__aeabi_fadd>
    2fec:	1c01      	adds	r1, r0, #0
    2fee:	1c20      	adds	r0, r4, #0
    2ff0:	f7fd ffc0 	bl	f74 <__aeabi_fmul>
    2ff4:	496a      	ldr	r1, [pc, #424]	; (31a0 <facos_deg+0x27c>)
    2ff6:	1c04      	adds	r4, r0, #0
    2ff8:	1c38      	adds	r0, r7, #0
    2ffa:	f7fd fc4d 	bl	898 <__aeabi_fadd>
    2ffe:	1c01      	adds	r1, r0, #0
    3000:	1c20      	adds	r0, r4, #0
    3002:	f7fd fdc5 	bl	b90 <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:111

	// call the atan estimator to obtain -15 deg <= angle <= 15 deg
	fangledeg = fatan_15deg(x);

	// undo the distortions applied earlier to obtain -90 deg <= angle <= 90 deg
	if (ixmapped) fangledeg += 30.0F;
    3006:	4967      	ldr	r1, [pc, #412]	; (31a4 <facos_deg+0x280>)
    3008:	f7fd fc46 	bl	898 <__aeabi_fadd>
    300c:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:112
	if (ixexceeds1) fangledeg = 90.0F - fangledeg;
    300e:	2d00      	cmp	r5, #0
    3010:	d003      	beq.n	301a <facos_deg+0xf6>
    3012:	4865      	ldr	r0, [pc, #404]	; (31a8 <facos_deg+0x284>)
    3014:	f7fe f8e0 	bl	11d8 <__aeabi_fsub>
    3018:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:113
	if (ixisnegative) fangledeg = -fangledeg;
    301a:	1c08      	adds	r0, r1, #0
    301c:	2e00      	cmp	r6, #0
    301e:	d100      	bne.n	3022 <facos_deg+0xfe>
    3020:	e789      	b.n	2f36 <facos_deg+0x12>
    3022:	2380      	movs	r3, #128	; 0x80
    3024:	061b      	lsls	r3, r3, #24
    3026:	469c      	mov	ip, r3
    3028:	4460      	add	r0, ip
    302a:	e784      	b.n	2f36 <facos_deg+0x12>
facos_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:62
	if (x >= 1.0F) return 0.0F;
	if (x <= -1.0F) return 180.0F;

	// call the atan which will return an angle in the incorrect range -90 to 90 deg
	// these lines cannot fail from division by zero or negative square root
	if (x == 0.0F) return 90.0F;
    302c:	485e      	ldr	r0, [pc, #376]	; (31a8 <facos_deg+0x284>)
    302e:	e782      	b.n	2f36 <facos_deg+0x12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:58
// maximum error is 14.67E-6 deg
float facos_deg(float x)
{
	// for robustness, check for invalid arguments
	if (x >= 1.0F) return 0.0F;
	if (x <= -1.0F) return 180.0F;
    3030:	485e      	ldr	r0, [pc, #376]	; (31ac <facos_deg+0x288>)
    3032:	e780      	b.n	2f36 <facos_deg+0x12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:64

	// call the atan which will return an angle in the incorrect range -90 to 90 deg
	// these lines cannot fail from division by zero or negative square root
	if (x == 0.0F) return 90.0F;
	if (x > 0.0F) return fatan_deg((sqrtf(1.0F - x * x) / x));
	return 180.0F + fatan_deg((sqrtf(1.0F - x * x) / x));
    3034:	1c21      	adds	r1, r4, #0
    3036:	1c20      	adds	r0, r4, #0
    3038:	f7fd ff9c 	bl	f74 <__aeabi_fmul>
    303c:	1c01      	adds	r1, r0, #0
    303e:	20fe      	movs	r0, #254	; 0xfe
    3040:	0580      	lsls	r0, r0, #22
    3042:	f7fe f8c9 	bl	11d8 <__aeabi_fsub>
    3046:	f00f fce1 	bl	12a0c <sqrtf>
    304a:	1c21      	adds	r1, r4, #0
    304c:	f7fd fda0 	bl	b90 <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    3050:	2100      	movs	r1, #0
facos_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:64

	// call the atan which will return an angle in the incorrect range -90 to 90 deg
	// these lines cannot fail from division by zero or negative square root
	if (x == 0.0F) return 90.0F;
	if (x > 0.0F) return fatan_deg((sqrtf(1.0F - x * x) / x));
	return 180.0F + fatan_deg((sqrtf(1.0F - x * x) / x));
    3052:	1c04      	adds	r4, r0, #0
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    3054:	f7fd fbf8 	bl	848 <__aeabi_fcmplt>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    3058:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    305a:	2800      	cmp	r0, #0
    305c:	d16b      	bne.n	3136 <facos_deg+0x212>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
		x = -x;
		ixisnegative = 1;
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    305e:	21fe      	movs	r1, #254	; 0xfe
    3060:	1c20      	adds	r0, r4, #0
    3062:	0589      	lsls	r1, r1, #22
    3064:	f7fd fc04 	bl	870 <__aeabi_fcmpgt>
    3068:	2800      	cmp	r0, #0
    306a:	d06a      	beq.n	3142 <facos_deg+0x21e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	{
		x = 1.0F / x;
    306c:	20fe      	movs	r0, #254	; 0xfe
    306e:	1c21      	adds	r1, r4, #0
    3070:	0580      	lsls	r0, r0, #22
    3072:	f7fd fd8d 	bl	b90 <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:93
		ixexceeds1 = 1;
    3076:	2501      	movs	r5, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
	{
		x = 1.0F / x;
    3078:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:101
	// at this point, x is in the range 0 to 1 inclusive
	// map argument onto range -tan(15 deg) to tan(15 deg)
	// using tan(angle-30deg) = (tan(angle)-tan(30deg)) / (1 + tan(angle)tan(30deg))
	// tan(15deg) maps to tan(-15 deg) = -tan(15 deg)
	// 1. maps to (sqrt(3) - 1) / (sqrt(3) + 1) = 2 - sqrt(3) = tan(15 deg)
	if (x > TAN15DEG)
    307a:	1c20      	adds	r0, r4, #0
    307c:	4944      	ldr	r1, [pc, #272]	; (3190 <facos_deg+0x26c>)
    307e:	f7fd fbf7 	bl	870 <__aeabi_fcmpgt>
    3082:	2800      	cmp	r0, #0
    3084:	d05f      	beq.n	3146 <facos_deg+0x222>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:103
	{
		x = (x - TAN30DEG)/(1.0F + TAN30DEG * x);
    3086:	1c20      	adds	r0, r4, #0
    3088:	4942      	ldr	r1, [pc, #264]	; (3194 <facos_deg+0x270>)
    308a:	f7fe f8a5 	bl	11d8 <__aeabi_fsub>
    308e:	4941      	ldr	r1, [pc, #260]	; (3194 <facos_deg+0x270>)
    3090:	1c07      	adds	r7, r0, #0
    3092:	1c20      	adds	r0, r4, #0
    3094:	f7fd ff6e 	bl	f74 <__aeabi_fmul>
    3098:	21fe      	movs	r1, #254	; 0xfe
    309a:	0589      	lsls	r1, r1, #22
    309c:	f7fd fbfc 	bl	898 <__aeabi_fadd>
    30a0:	1c01      	adds	r1, r0, #0
    30a2:	1c38      	adds	r0, r7, #0
    30a4:	f7fd fd74 	bl	b90 <__aeabi_fdiv>
    30a8:	1c04      	adds	r4, r0, #0
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    30aa:	1c21      	adds	r1, r4, #0
    30ac:	f7fd ff62 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    30b0:	4939      	ldr	r1, [pc, #228]	; (3198 <facos_deg+0x274>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    30b2:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    30b4:	f7fd ff5e 	bl	f74 <__aeabi_fmul>
    30b8:	4938      	ldr	r1, [pc, #224]	; (319c <facos_deg+0x278>)
    30ba:	f7fd fbed 	bl	898 <__aeabi_fadd>
    30be:	1c01      	adds	r1, r0, #0
    30c0:	1c20      	adds	r0, r4, #0
    30c2:	f7fd ff57 	bl	f74 <__aeabi_fmul>
    30c6:	4936      	ldr	r1, [pc, #216]	; (31a0 <facos_deg+0x27c>)
    30c8:	1c04      	adds	r4, r0, #0
    30ca:	1c38      	adds	r0, r7, #0
    30cc:	f7fd fbe4 	bl	898 <__aeabi_fadd>
    30d0:	1c01      	adds	r1, r0, #0
    30d2:	1c20      	adds	r0, r4, #0
    30d4:	f7fd fd5c 	bl	b90 <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:111

	// call the atan estimator to obtain -15 deg <= angle <= 15 deg
	fangledeg = fatan_15deg(x);

	// undo the distortions applied earlier to obtain -90 deg <= angle <= 90 deg
	if (ixmapped) fangledeg += 30.0F;
    30d8:	4932      	ldr	r1, [pc, #200]	; (31a4 <facos_deg+0x280>)
    30da:	f7fd fbdd 	bl	898 <__aeabi_fadd>
    30de:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:112
	if (ixexceeds1) fangledeg = 90.0F - fangledeg;
    30e0:	2d00      	cmp	r5, #0
    30e2:	d003      	beq.n	30ec <facos_deg+0x1c8>
    30e4:	4830      	ldr	r0, [pc, #192]	; (31a8 <facos_deg+0x284>)
    30e6:	f7fe f877 	bl	11d8 <__aeabi_fsub>
    30ea:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:113
	if (ixisnegative) fangledeg = -fangledeg;
    30ec:	2e00      	cmp	r6, #0
    30ee:	d003      	beq.n	30f8 <facos_deg+0x1d4>
    30f0:	2380      	movs	r3, #128	; 0x80
    30f2:	061b      	lsls	r3, r3, #24
    30f4:	469c      	mov	ip, r3
    30f6:	4461      	add	r1, ip
facos_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:64

	// call the atan which will return an angle in the incorrect range -90 to 90 deg
	// these lines cannot fail from division by zero or negative square root
	if (x == 0.0F) return 90.0F;
	if (x > 0.0F) return fatan_deg((sqrtf(1.0F - x * x) / x));
	return 180.0F + fatan_deg((sqrtf(1.0F - x * x) / x));
    30f8:	1c08      	adds	r0, r1, #0
    30fa:	492c      	ldr	r1, [pc, #176]	; (31ac <facos_deg+0x288>)
    30fc:	f7fd fbcc 	bl	898 <__aeabi_fadd>
    3100:	e719      	b.n	2f36 <facos_deg+0x12>
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    3102:	1c21      	adds	r1, r4, #0
    3104:	1c20      	adds	r0, r4, #0
    3106:	f7fd ff35 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    310a:	4923      	ldr	r1, [pc, #140]	; (3198 <facos_deg+0x274>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    310c:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    310e:	f7fd ff31 	bl	f74 <__aeabi_fmul>
    3112:	4922      	ldr	r1, [pc, #136]	; (319c <facos_deg+0x278>)
    3114:	f7fd fbc0 	bl	898 <__aeabi_fadd>
    3118:	1c01      	adds	r1, r0, #0
    311a:	1c20      	adds	r0, r4, #0
    311c:	f7fd ff2a 	bl	f74 <__aeabi_fmul>
    3120:	491f      	ldr	r1, [pc, #124]	; (31a0 <facos_deg+0x27c>)
    3122:	1c04      	adds	r4, r0, #0
    3124:	1c38      	adds	r0, r7, #0
    3126:	f7fd fbb7 	bl	898 <__aeabi_fadd>
    312a:	1c01      	adds	r1, r0, #0
    312c:	1c20      	adds	r0, r4, #0
    312e:	f7fd fd2f 	bl	b90 <__aeabi_fdiv>
    3132:	1c01      	adds	r1, r0, #0
    3134:	e76b      	b.n	300e <facos_deg+0xea>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    3136:	2380      	movs	r3, #128	; 0x80
    3138:	061b      	lsls	r3, r3, #24
    313a:	469c      	mov	ip, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:86
		ixisnegative = 1;
    313c:	2601      	movs	r6, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    313e:	4464      	add	r4, ip
    3140:	e78d      	b.n	305e <facos_deg+0x13a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    3142:	2500      	movs	r5, #0
    3144:	e799      	b.n	307a <facos_deg+0x156>
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    3146:	1c21      	adds	r1, r4, #0
    3148:	1c20      	adds	r0, r4, #0
    314a:	f7fd ff13 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    314e:	4912      	ldr	r1, [pc, #72]	; (3198 <facos_deg+0x274>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    3150:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    3152:	f7fd ff0f 	bl	f74 <__aeabi_fmul>
    3156:	4911      	ldr	r1, [pc, #68]	; (319c <facos_deg+0x278>)
    3158:	f7fd fb9e 	bl	898 <__aeabi_fadd>
    315c:	1c01      	adds	r1, r0, #0
    315e:	1c20      	adds	r0, r4, #0
    3160:	f7fd ff08 	bl	f74 <__aeabi_fmul>
    3164:	490e      	ldr	r1, [pc, #56]	; (31a0 <facos_deg+0x27c>)
    3166:	1c04      	adds	r4, r0, #0
    3168:	1c38      	adds	r0, r7, #0
    316a:	f7fd fb95 	bl	898 <__aeabi_fadd>
    316e:	1c01      	adds	r1, r0, #0
    3170:	1c20      	adds	r0, r4, #0
    3172:	f7fd fd0d 	bl	b90 <__aeabi_fdiv>
    3176:	1c01      	adds	r1, r0, #0
    3178:	e7b2      	b.n	30e0 <facos_deg+0x1bc>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    317a:	2380      	movs	r3, #128	; 0x80
    317c:	061b      	lsls	r3, r3, #24
    317e:	469c      	mov	ip, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:86
		ixisnegative = 1;
    3180:	2601      	movs	r6, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    3182:	4464      	add	r4, ip
    3184:	e700      	b.n	2f88 <facos_deg+0x64>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    3186:	2500      	movs	r5, #0
    3188:	e70d      	b.n	2fa6 <facos_deg+0x82>
    318a:	46c0      	nop			; (mov r8, r8)
    318c:	bf800000 	.word	0xbf800000
    3190:	3e8930a3 	.word	0x3e8930a3
    3194:	3f13cd3a 	.word	0x3f13cd3a
    3198:	41c8b20e 	.word	0x41c8b20e
    319c:	42c149ee 	.word	0x42c149ee
    31a0:	3fd7e7dc 	.word	0x3fd7e7dc
    31a4:	41f00000 	.word	0x41f00000
    31a8:	42b40000 	.word	0x42b40000
    31ac:	43340000 	.word	0x43340000

000031b0 <fatan_deg>:
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:70
}

// function returns angle in range -90 to 90 deg
// maximum error is 9.84E-6 deg
float fatan_deg(float x)
{
    31b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    31b2:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:70
}

// function returns angle in range -90 to 90 deg
// maximum error is 9.84E-6 deg
float fatan_deg(float x)
{
    31b4:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    31b6:	f7fd fb47 	bl	848 <__aeabi_fcmplt>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    31ba:	2500      	movs	r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    31bc:	2800      	cmp	r0, #0
    31be:	d169      	bne.n	3294 <fatan_deg+0xe4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
		x = -x;
		ixisnegative = 1;
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    31c0:	21fe      	movs	r1, #254	; 0xfe
    31c2:	1c20      	adds	r0, r4, #0
    31c4:	0589      	lsls	r1, r1, #22
    31c6:	f7fd fb53 	bl	870 <__aeabi_fcmpgt>
    31ca:	2800      	cmp	r0, #0
    31cc:	d100      	bne.n	31d0 <fatan_deg+0x20>
    31ce:	e06e      	b.n	32ae <fatan_deg+0xfe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	{
		x = 1.0F / x;
    31d0:	20fe      	movs	r0, #254	; 0xfe
    31d2:	1c21      	adds	r1, r4, #0
    31d4:	0580      	lsls	r0, r0, #22
    31d6:	f7fd fcdb 	bl	b90 <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:93
		ixexceeds1 = 1;
    31da:	2601      	movs	r6, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
	{
		x = 1.0F / x;
    31dc:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:101
	// at this point, x is in the range 0 to 1 inclusive
	// map argument onto range -tan(15 deg) to tan(15 deg)
	// using tan(angle-30deg) = (tan(angle)-tan(30deg)) / (1 + tan(angle)tan(30deg))
	// tan(15deg) maps to tan(-15 deg) = -tan(15 deg)
	// 1. maps to (sqrt(3) - 1) / (sqrt(3) + 1) = 2 - sqrt(3) = tan(15 deg)
	if (x > TAN15DEG)
    31de:	1c20      	adds	r0, r4, #0
    31e0:	4934      	ldr	r1, [pc, #208]	; (32b4 <fatan_deg+0x104>)
    31e2:	f7fd fb45 	bl	870 <__aeabi_fcmpgt>
    31e6:	2800      	cmp	r0, #0
    31e8:	d03a      	beq.n	3260 <fatan_deg+0xb0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:103
	{
		x = (x - TAN30DEG)/(1.0F + TAN30DEG * x);
    31ea:	1c20      	adds	r0, r4, #0
    31ec:	4932      	ldr	r1, [pc, #200]	; (32b8 <fatan_deg+0x108>)
    31ee:	f7fd fff3 	bl	11d8 <__aeabi_fsub>
    31f2:	4931      	ldr	r1, [pc, #196]	; (32b8 <fatan_deg+0x108>)
    31f4:	1c07      	adds	r7, r0, #0
    31f6:	1c20      	adds	r0, r4, #0
    31f8:	f7fd febc 	bl	f74 <__aeabi_fmul>
    31fc:	21fe      	movs	r1, #254	; 0xfe
    31fe:	0589      	lsls	r1, r1, #22
    3200:	f7fd fb4a 	bl	898 <__aeabi_fadd>
    3204:	1c01      	adds	r1, r0, #0
    3206:	1c38      	adds	r0, r7, #0
    3208:	f7fd fcc2 	bl	b90 <__aeabi_fdiv>
    320c:	1c04      	adds	r4, r0, #0
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    320e:	1c21      	adds	r1, r4, #0
    3210:	f7fd feb0 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    3214:	4929      	ldr	r1, [pc, #164]	; (32bc <fatan_deg+0x10c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    3216:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    3218:	f7fd feac 	bl	f74 <__aeabi_fmul>
    321c:	4928      	ldr	r1, [pc, #160]	; (32c0 <fatan_deg+0x110>)
    321e:	f7fd fb3b 	bl	898 <__aeabi_fadd>
    3222:	1c01      	adds	r1, r0, #0
    3224:	1c20      	adds	r0, r4, #0
    3226:	f7fd fea5 	bl	f74 <__aeabi_fmul>
    322a:	4926      	ldr	r1, [pc, #152]	; (32c4 <fatan_deg+0x114>)
    322c:	1c04      	adds	r4, r0, #0
    322e:	1c38      	adds	r0, r7, #0
    3230:	f7fd fb32 	bl	898 <__aeabi_fadd>
    3234:	1c01      	adds	r1, r0, #0
    3236:	1c20      	adds	r0, r4, #0
    3238:	f7fd fcaa 	bl	b90 <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:111

	// call the atan estimator to obtain -15 deg <= angle <= 15 deg
	fangledeg = fatan_15deg(x);

	// undo the distortions applied earlier to obtain -90 deg <= angle <= 90 deg
	if (ixmapped) fangledeg += 30.0F;
    323c:	4922      	ldr	r1, [pc, #136]	; (32c8 <fatan_deg+0x118>)
    323e:	f7fd fb2b 	bl	898 <__aeabi_fadd>
    3242:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:112
	if (ixexceeds1) fangledeg = 90.0F - fangledeg;
    3244:	2e00      	cmp	r6, #0
    3246:	d003      	beq.n	3250 <fatan_deg+0xa0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:112 (discriminator 1)
    3248:	4820      	ldr	r0, [pc, #128]	; (32cc <fatan_deg+0x11c>)
    324a:	f7fd ffc5 	bl	11d8 <__aeabi_fsub>
    324e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:113
	if (ixisnegative) fangledeg = -fangledeg;
    3250:	2d00      	cmp	r5, #0
    3252:	d003      	beq.n	325c <fatan_deg+0xac>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:113 (discriminator 1)
    3254:	2380      	movs	r3, #128	; 0x80
    3256:	061b      	lsls	r3, r3, #24
    3258:	469c      	mov	ip, r3
    325a:	4461      	add	r1, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:116
	
	return (fangledeg);
}
    325c:	1c08      	adds	r0, r1, #0
    325e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    3260:	1c21      	adds	r1, r4, #0
    3262:	1c20      	adds	r0, r4, #0
    3264:	f7fd fe86 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    3268:	4914      	ldr	r1, [pc, #80]	; (32bc <fatan_deg+0x10c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    326a:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    326c:	f7fd fe82 	bl	f74 <__aeabi_fmul>
    3270:	4913      	ldr	r1, [pc, #76]	; (32c0 <fatan_deg+0x110>)
    3272:	f7fd fb11 	bl	898 <__aeabi_fadd>
    3276:	1c01      	adds	r1, r0, #0
    3278:	1c20      	adds	r0, r4, #0
    327a:	f7fd fe7b 	bl	f74 <__aeabi_fmul>
    327e:	4911      	ldr	r1, [pc, #68]	; (32c4 <fatan_deg+0x114>)
    3280:	1c04      	adds	r4, r0, #0
    3282:	1c38      	adds	r0, r7, #0
    3284:	f7fd fb08 	bl	898 <__aeabi_fadd>
    3288:	1c01      	adds	r1, r0, #0
    328a:	1c20      	adds	r0, r4, #0
    328c:	f7fd fc80 	bl	b90 <__aeabi_fdiv>
    3290:	1c01      	adds	r1, r0, #0
    3292:	e7d7      	b.n	3244 <fatan_deg+0x94>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    3294:	2380      	movs	r3, #128	; 0x80
    3296:	061b      	lsls	r3, r3, #24
    3298:	469c      	mov	ip, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
		ixisnegative = 1;
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    329a:	21fe      	movs	r1, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    329c:	4464      	add	r4, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
		ixisnegative = 1;
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    329e:	1c20      	adds	r0, r4, #0
    32a0:	0589      	lsls	r1, r1, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:86
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
		ixisnegative = 1;
    32a2:	2501      	movs	r5, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    32a4:	f7fd fae4 	bl	870 <__aeabi_fcmpgt>
    32a8:	2800      	cmp	r0, #0
    32aa:	d000      	beq.n	32ae <fatan_deg+0xfe>
    32ac:	e790      	b.n	31d0 <fatan_deg+0x20>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    32ae:	2600      	movs	r6, #0
    32b0:	e795      	b.n	31de <fatan_deg+0x2e>
    32b2:	46c0      	nop			; (mov r8, r8)
    32b4:	3e8930a3 	.word	0x3e8930a3
    32b8:	3f13cd3a 	.word	0x3f13cd3a
    32bc:	41c8b20e 	.word	0x41c8b20e
    32c0:	42c149ee 	.word	0x42c149ee
    32c4:	3fd7e7dc 	.word	0x3fd7e7dc
    32c8:	41f00000 	.word	0x41f00000
    32cc:	42b40000 	.word	0x42b40000

000032d0 <fatan2_deg>:
fatan2_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:121
}

// function returns approximate atan2 angle in range -180 to 180 deg
// maximum error is 14.58E-6 deg
float fatan2_deg(float y, float x)
{
    32d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32d2:	1c05      	adds	r5, r0, #0
    32d4:	1c0c      	adds	r4, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:123
	// check for zero x to avoid division by zero
	if (x == 0.0F)
    32d6:	1c08      	adds	r0, r1, #0
    32d8:	2100      	movs	r1, #0
    32da:	f7fd faaf 	bl	83c <__aeabi_fcmpeq>
    32de:	2800      	cmp	r0, #0
    32e0:	d008      	beq.n	32f4 <fatan2_deg+0x24>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:126
	{
		// return 90 deg for positive y
		if (y > 0.0F) return 90.0F;
    32e2:	1c28      	adds	r0, r5, #0
    32e4:	2100      	movs	r1, #0
    32e6:	f7fd fac3 	bl	870 <__aeabi_fcmpgt>
    32ea:	2800      	cmp	r0, #0
    32ec:	d100      	bne.n	32f0 <fatan2_deg+0x20>
    32ee:	e0b6      	b.n	345e <fatan2_deg+0x18e>
    32f0:	48cf      	ldr	r0, [pc, #828]	; (3630 <fatan2_deg+0x360>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:141
	// compute atan2 for quadrant 2 (90 to 180 deg)
	if ((x < 0.0F) && (y > 0.0F)) return (180.0F + fatan_deg(y / x));
	// compute atan2 for quadrant 3 (-180 to -90 deg)
	return (-180.0F + fatan_deg(y / x));

}
    32f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:135
		return 0.0F;
	}
	
	// from here onwards, x is guaranteed to be non-zero
	// compute atan2 for quadrant 1 (0 to 90 deg) and quadrant 4 (-90 to 0 deg)
	if (x > 0.0F) return (fatan_deg(y / x));
    32f4:	1c20      	adds	r0, r4, #0
    32f6:	2100      	movs	r1, #0
    32f8:	f7fd faba 	bl	870 <__aeabi_fcmpgt>
    32fc:	2800      	cmp	r0, #0
    32fe:	d048      	beq.n	3392 <fatan2_deg+0xc2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:135 (discriminator 1)
    3300:	1c21      	adds	r1, r4, #0
    3302:	1c28      	adds	r0, r5, #0
    3304:	f7fd fc44 	bl	b90 <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 1)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    3308:	2100      	movs	r1, #0
fatan2_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:135 (discriminator 1)
		return 0.0F;
	}
	
	// from here onwards, x is guaranteed to be non-zero
	// compute atan2 for quadrant 1 (0 to 90 deg) and quadrant 4 (-90 to 0 deg)
	if (x > 0.0F) return (fatan_deg(y / x));
    330a:	1c04      	adds	r4, r0, #0
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 1)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    330c:	f7fd fa9c 	bl	848 <__aeabi_fcmplt>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80 (discriminator 1)

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    3310:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 1)
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    3312:	2800      	cmp	r0, #0
    3314:	d000      	beq.n	3318 <fatan2_deg+0x48>
    3316:	e0db      	b.n	34d0 <fatan2_deg+0x200>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
		x = -x;
		ixisnegative = 1;
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    3318:	21fe      	movs	r1, #254	; 0xfe
    331a:	1c20      	adds	r0, r4, #0
    331c:	0589      	lsls	r1, r1, #22
    331e:	f7fd faa7 	bl	870 <__aeabi_fcmpgt>
    3322:	2800      	cmp	r0, #0
    3324:	d100      	bne.n	3328 <fatan2_deg+0x58>
    3326:	e0d1      	b.n	34cc <fatan2_deg+0x1fc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	{
		x = 1.0F / x;
    3328:	20fe      	movs	r0, #254	; 0xfe
    332a:	1c21      	adds	r1, r4, #0
    332c:	0580      	lsls	r0, r0, #22
    332e:	f7fd fc2f 	bl	b90 <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:93
		ixexceeds1 = 1;
    3332:	2501      	movs	r5, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
	{
		x = 1.0F / x;
    3334:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:101
	// at this point, x is in the range 0 to 1 inclusive
	// map argument onto range -tan(15 deg) to tan(15 deg)
	// using tan(angle-30deg) = (tan(angle)-tan(30deg)) / (1 + tan(angle)tan(30deg))
	// tan(15deg) maps to tan(-15 deg) = -tan(15 deg)
	// 1. maps to (sqrt(3) - 1) / (sqrt(3) + 1) = 2 - sqrt(3) = tan(15 deg)
	if (x > TAN15DEG)
    3336:	1c20      	adds	r0, r4, #0
    3338:	49be      	ldr	r1, [pc, #760]	; (3634 <fatan2_deg+0x364>)
    333a:	f7fd fa99 	bl	870 <__aeabi_fcmpgt>
    333e:	2800      	cmp	r0, #0
    3340:	d000      	beq.n	3344 <fatan2_deg+0x74>
    3342:	e095      	b.n	3470 <fatan2_deg+0x1a0>
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    3344:	1c21      	adds	r1, r4, #0
    3346:	1c20      	adds	r0, r4, #0
    3348:	f7fd fe14 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    334c:	49ba      	ldr	r1, [pc, #744]	; (3638 <fatan2_deg+0x368>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    334e:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    3350:	f7fd fe10 	bl	f74 <__aeabi_fmul>
    3354:	49b9      	ldr	r1, [pc, #740]	; (363c <fatan2_deg+0x36c>)
    3356:	f7fd fa9f 	bl	898 <__aeabi_fadd>
    335a:	1c01      	adds	r1, r0, #0
    335c:	1c20      	adds	r0, r4, #0
    335e:	f7fd fe09 	bl	f74 <__aeabi_fmul>
    3362:	49b7      	ldr	r1, [pc, #732]	; (3640 <fatan2_deg+0x370>)
    3364:	1c04      	adds	r4, r0, #0
    3366:	1c38      	adds	r0, r7, #0
    3368:	f7fd fa96 	bl	898 <__aeabi_fadd>
    336c:	1c01      	adds	r1, r0, #0
    336e:	1c20      	adds	r0, r4, #0
    3370:	f7fd fc0e 	bl	b90 <__aeabi_fdiv>
    3374:	1c01      	adds	r1, r0, #0
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:112
	// call the atan estimator to obtain -15 deg <= angle <= 15 deg
	fangledeg = fatan_15deg(x);

	// undo the distortions applied earlier to obtain -90 deg <= angle <= 90 deg
	if (ixmapped) fangledeg += 30.0F;
	if (ixexceeds1) fangledeg = 90.0F - fangledeg;
    3376:	2d00      	cmp	r5, #0
    3378:	d003      	beq.n	3382 <fatan2_deg+0xb2>
    337a:	48ad      	ldr	r0, [pc, #692]	; (3630 <fatan2_deg+0x360>)
    337c:	f7fd ff2c 	bl	11d8 <__aeabi_fsub>
    3380:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:113
	if (ixisnegative) fangledeg = -fangledeg;
    3382:	1c08      	adds	r0, r1, #0
    3384:	2e00      	cmp	r6, #0
    3386:	d0b4      	beq.n	32f2 <fatan2_deg+0x22>
    3388:	2380      	movs	r3, #128	; 0x80
    338a:	061b      	lsls	r3, r3, #24
    338c:	469c      	mov	ip, r3
    338e:	4460      	add	r0, ip
    3390:	e7af      	b.n	32f2 <fatan2_deg+0x22>
fatan2_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:137
	
	// from here onwards, x is guaranteed to be non-zero
	// compute atan2 for quadrant 1 (0 to 90 deg) and quadrant 4 (-90 to 0 deg)
	if (x > 0.0F) return (fatan_deg(y / x));
	// compute atan2 for quadrant 2 (90 to 180 deg)
	if ((x < 0.0F) && (y > 0.0F)) return (180.0F + fatan_deg(y / x));
    3392:	1c20      	adds	r0, r4, #0
    3394:	2100      	movs	r1, #0
    3396:	f7fd fa57 	bl	848 <__aeabi_fcmplt>
    339a:	2800      	cmp	r0, #0
    339c:	d000      	beq.n	33a0 <fatan2_deg+0xd0>
    339e:	e0b7      	b.n	3510 <fatan2_deg+0x240>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:139
	// compute atan2 for quadrant 3 (-180 to -90 deg)
	return (-180.0F + fatan_deg(y / x));
    33a0:	1c21      	adds	r1, r4, #0
    33a2:	1c28      	adds	r0, r5, #0
    33a4:	f7fd fbf4 	bl	b90 <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    33a8:	2100      	movs	r1, #0
fatan2_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:139
	// compute atan2 for quadrant 1 (0 to 90 deg) and quadrant 4 (-90 to 0 deg)
	if (x > 0.0F) return (fatan_deg(y / x));
	// compute atan2 for quadrant 2 (90 to 180 deg)
	if ((x < 0.0F) && (y > 0.0F)) return (180.0F + fatan_deg(y / x));
	// compute atan2 for quadrant 3 (-180 to -90 deg)
	return (-180.0F + fatan_deg(y / x));
    33aa:	1c04      	adds	r4, r0, #0
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    33ac:	f7fd fa4c 	bl	848 <__aeabi_fcmplt>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    33b0:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    33b2:	2800      	cmp	r0, #0
    33b4:	d000      	beq.n	33b8 <fatan2_deg+0xe8>
    33b6:	e113      	b.n	35e0 <fatan2_deg+0x310>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
		x = -x;
		ixisnegative = 1;
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    33b8:	21fe      	movs	r1, #254	; 0xfe
    33ba:	1c20      	adds	r0, r4, #0
    33bc:	0589      	lsls	r1, r1, #22
    33be:	f7fd fa57 	bl	870 <__aeabi_fcmpgt>
    33c2:	2800      	cmp	r0, #0
    33c4:	d100      	bne.n	33c8 <fatan2_deg+0xf8>
    33c6:	e109      	b.n	35dc <fatan2_deg+0x30c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	{
		x = 1.0F / x;
    33c8:	20fe      	movs	r0, #254	; 0xfe
    33ca:	1c21      	adds	r1, r4, #0
    33cc:	0580      	lsls	r0, r0, #22
    33ce:	f7fd fbdf 	bl	b90 <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:93
		ixexceeds1 = 1;
    33d2:	2501      	movs	r5, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
	{
		x = 1.0F / x;
    33d4:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:101
	// at this point, x is in the range 0 to 1 inclusive
	// map argument onto range -tan(15 deg) to tan(15 deg)
	// using tan(angle-30deg) = (tan(angle)-tan(30deg)) / (1 + tan(angle)tan(30deg))
	// tan(15deg) maps to tan(-15 deg) = -tan(15 deg)
	// 1. maps to (sqrt(3) - 1) / (sqrt(3) + 1) = 2 - sqrt(3) = tan(15 deg)
	if (x > TAN15DEG)
    33d6:	1c20      	adds	r0, r4, #0
    33d8:	4996      	ldr	r1, [pc, #600]	; (3634 <fatan2_deg+0x364>)
    33da:	f7fd fa49 	bl	870 <__aeabi_fcmpgt>
    33de:	2800      	cmp	r0, #0
    33e0:	d07c      	beq.n	34dc <fatan2_deg+0x20c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:103
	{
		x = (x - TAN30DEG)/(1.0F + TAN30DEG * x);
    33e2:	1c20      	adds	r0, r4, #0
    33e4:	4997      	ldr	r1, [pc, #604]	; (3644 <fatan2_deg+0x374>)
    33e6:	f7fd fef7 	bl	11d8 <__aeabi_fsub>
    33ea:	4996      	ldr	r1, [pc, #600]	; (3644 <fatan2_deg+0x374>)
    33ec:	1c07      	adds	r7, r0, #0
    33ee:	1c20      	adds	r0, r4, #0
    33f0:	f7fd fdc0 	bl	f74 <__aeabi_fmul>
    33f4:	21fe      	movs	r1, #254	; 0xfe
    33f6:	0589      	lsls	r1, r1, #22
    33f8:	f7fd fa4e 	bl	898 <__aeabi_fadd>
    33fc:	1c01      	adds	r1, r0, #0
    33fe:	1c38      	adds	r0, r7, #0
    3400:	f7fd fbc6 	bl	b90 <__aeabi_fdiv>
    3404:	1c04      	adds	r4, r0, #0
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    3406:	1c21      	adds	r1, r4, #0
    3408:	f7fd fdb4 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    340c:	498a      	ldr	r1, [pc, #552]	; (3638 <fatan2_deg+0x368>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    340e:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    3410:	f7fd fdb0 	bl	f74 <__aeabi_fmul>
    3414:	4989      	ldr	r1, [pc, #548]	; (363c <fatan2_deg+0x36c>)
    3416:	f7fd fa3f 	bl	898 <__aeabi_fadd>
    341a:	1c01      	adds	r1, r0, #0
    341c:	1c20      	adds	r0, r4, #0
    341e:	f7fd fda9 	bl	f74 <__aeabi_fmul>
    3422:	4987      	ldr	r1, [pc, #540]	; (3640 <fatan2_deg+0x370>)
    3424:	1c04      	adds	r4, r0, #0
    3426:	1c38      	adds	r0, r7, #0
    3428:	f7fd fa36 	bl	898 <__aeabi_fadd>
    342c:	1c01      	adds	r1, r0, #0
    342e:	1c20      	adds	r0, r4, #0
    3430:	f7fd fbae 	bl	b90 <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:111

	// call the atan estimator to obtain -15 deg <= angle <= 15 deg
	fangledeg = fatan_15deg(x);

	// undo the distortions applied earlier to obtain -90 deg <= angle <= 90 deg
	if (ixmapped) fangledeg += 30.0F;
    3434:	4984      	ldr	r1, [pc, #528]	; (3648 <fatan2_deg+0x378>)
    3436:	f7fd fa2f 	bl	898 <__aeabi_fadd>
    343a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:112
	if (ixexceeds1) fangledeg = 90.0F - fangledeg;
    343c:	2d00      	cmp	r5, #0
    343e:	d003      	beq.n	3448 <fatan2_deg+0x178>
    3440:	487b      	ldr	r0, [pc, #492]	; (3630 <fatan2_deg+0x360>)
    3442:	f7fd fec9 	bl	11d8 <__aeabi_fsub>
    3446:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:113
	if (ixisnegative) fangledeg = -fangledeg;
    3448:	2e00      	cmp	r6, #0
    344a:	d003      	beq.n	3454 <fatan2_deg+0x184>
    344c:	2380      	movs	r3, #128	; 0x80
    344e:	061b      	lsls	r3, r3, #24
    3450:	469c      	mov	ip, r3
    3452:	4461      	add	r1, ip
fatan2_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:139
	// compute atan2 for quadrant 1 (0 to 90 deg) and quadrant 4 (-90 to 0 deg)
	if (x > 0.0F) return (fatan_deg(y / x));
	// compute atan2 for quadrant 2 (90 to 180 deg)
	if ((x < 0.0F) && (y > 0.0F)) return (180.0F + fatan_deg(y / x));
	// compute atan2 for quadrant 3 (-180 to -90 deg)
	return (-180.0F + fatan_deg(y / x));
    3454:	1c08      	adds	r0, r1, #0
    3456:	497d      	ldr	r1, [pc, #500]	; (364c <fatan2_deg+0x37c>)
    3458:	f7fd febe 	bl	11d8 <__aeabi_fsub>
    345c:	e749      	b.n	32f2 <fatan2_deg+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:128
	if (x == 0.0F)
	{
		// return 90 deg for positive y
		if (y > 0.0F) return 90.0F;
		// return -90 deg for negative y
		if (y < 0.0F) return -90.0F;
    345e:	1c28      	adds	r0, r5, #0
    3460:	2100      	movs	r1, #0
    3462:	f7fd f9f1 	bl	848 <__aeabi_fcmplt>
    3466:	2800      	cmp	r0, #0
    3468:	d000      	beq.n	346c <fatan2_deg+0x19c>
    346a:	e0b5      	b.n	35d8 <fatan2_deg+0x308>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:130
		// otherwise y= 0.0 and return 0 deg (invalid arguments)
		return 0.0F;
    346c:	2000      	movs	r0, #0
    346e:	e740      	b.n	32f2 <fatan2_deg+0x22>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:103
	// using tan(angle-30deg) = (tan(angle)-tan(30deg)) / (1 + tan(angle)tan(30deg))
	// tan(15deg) maps to tan(-15 deg) = -tan(15 deg)
	// 1. maps to (sqrt(3) - 1) / (sqrt(3) + 1) = 2 - sqrt(3) = tan(15 deg)
	if (x > TAN15DEG)
	{
		x = (x - TAN30DEG)/(1.0F + TAN30DEG * x);
    3470:	1c20      	adds	r0, r4, #0
    3472:	4974      	ldr	r1, [pc, #464]	; (3644 <fatan2_deg+0x374>)
    3474:	f7fd feb0 	bl	11d8 <__aeabi_fsub>
    3478:	4972      	ldr	r1, [pc, #456]	; (3644 <fatan2_deg+0x374>)
    347a:	1c07      	adds	r7, r0, #0
    347c:	1c20      	adds	r0, r4, #0
    347e:	f7fd fd79 	bl	f74 <__aeabi_fmul>
    3482:	21fe      	movs	r1, #254	; 0xfe
    3484:	0589      	lsls	r1, r1, #22
    3486:	f7fd fa07 	bl	898 <__aeabi_fadd>
    348a:	1c01      	adds	r1, r0, #0
    348c:	1c38      	adds	r0, r7, #0
    348e:	f7fd fb7f 	bl	b90 <__aeabi_fdiv>
    3492:	1c04      	adds	r4, r0, #0
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    3494:	1c21      	adds	r1, r4, #0
    3496:	f7fd fd6d 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    349a:	4967      	ldr	r1, [pc, #412]	; (3638 <fatan2_deg+0x368>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    349c:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    349e:	f7fd fd69 	bl	f74 <__aeabi_fmul>
    34a2:	4966      	ldr	r1, [pc, #408]	; (363c <fatan2_deg+0x36c>)
    34a4:	f7fd f9f8 	bl	898 <__aeabi_fadd>
    34a8:	1c01      	adds	r1, r0, #0
    34aa:	1c20      	adds	r0, r4, #0
    34ac:	f7fd fd62 	bl	f74 <__aeabi_fmul>
    34b0:	4963      	ldr	r1, [pc, #396]	; (3640 <fatan2_deg+0x370>)
    34b2:	1c04      	adds	r4, r0, #0
    34b4:	1c38      	adds	r0, r7, #0
    34b6:	f7fd f9ef 	bl	898 <__aeabi_fadd>
    34ba:	1c01      	adds	r1, r0, #0
    34bc:	1c20      	adds	r0, r4, #0
    34be:	f7fd fb67 	bl	b90 <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:111

	// call the atan estimator to obtain -15 deg <= angle <= 15 deg
	fangledeg = fatan_15deg(x);

	// undo the distortions applied earlier to obtain -90 deg <= angle <= 90 deg
	if (ixmapped) fangledeg += 30.0F;
    34c2:	4961      	ldr	r1, [pc, #388]	; (3648 <fatan2_deg+0x378>)
    34c4:	f7fd f9e8 	bl	898 <__aeabi_fadd>
    34c8:	1c01      	adds	r1, r0, #0
    34ca:	e754      	b.n	3376 <fatan2_deg+0xa6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    34cc:	2500      	movs	r5, #0
    34ce:	e732      	b.n	3336 <fatan2_deg+0x66>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    34d0:	2380      	movs	r3, #128	; 0x80
    34d2:	061b      	lsls	r3, r3, #24
    34d4:	469c      	mov	ip, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:86
		ixisnegative = 1;
    34d6:	2601      	movs	r6, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    34d8:	4464      	add	r4, ip
    34da:	e71d      	b.n	3318 <fatan2_deg+0x48>
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    34dc:	1c21      	adds	r1, r4, #0
    34de:	1c20      	adds	r0, r4, #0
    34e0:	f7fd fd48 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    34e4:	4954      	ldr	r1, [pc, #336]	; (3638 <fatan2_deg+0x368>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    34e6:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    34e8:	f7fd fd44 	bl	f74 <__aeabi_fmul>
    34ec:	4953      	ldr	r1, [pc, #332]	; (363c <fatan2_deg+0x36c>)
    34ee:	f7fd f9d3 	bl	898 <__aeabi_fadd>
    34f2:	1c01      	adds	r1, r0, #0
    34f4:	1c20      	adds	r0, r4, #0
    34f6:	f7fd fd3d 	bl	f74 <__aeabi_fmul>
    34fa:	4951      	ldr	r1, [pc, #324]	; (3640 <fatan2_deg+0x370>)
    34fc:	1c04      	adds	r4, r0, #0
    34fe:	1c38      	adds	r0, r7, #0
    3500:	f7fd f9ca 	bl	898 <__aeabi_fadd>
    3504:	1c01      	adds	r1, r0, #0
    3506:	1c20      	adds	r0, r4, #0
    3508:	f7fd fb42 	bl	b90 <__aeabi_fdiv>
    350c:	1c01      	adds	r1, r0, #0
    350e:	e795      	b.n	343c <fatan2_deg+0x16c>
fatan2_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:137 (discriminator 1)
	
	// from here onwards, x is guaranteed to be non-zero
	// compute atan2 for quadrant 1 (0 to 90 deg) and quadrant 4 (-90 to 0 deg)
	if (x > 0.0F) return (fatan_deg(y / x));
	// compute atan2 for quadrant 2 (90 to 180 deg)
	if ((x < 0.0F) && (y > 0.0F)) return (180.0F + fatan_deg(y / x));
    3510:	1c28      	adds	r0, r5, #0
    3512:	2100      	movs	r1, #0
    3514:	f7fd f9ac 	bl	870 <__aeabi_fcmpgt>
    3518:	2800      	cmp	r0, #0
    351a:	d100      	bne.n	351e <fatan2_deg+0x24e>
    351c:	e740      	b.n	33a0 <fatan2_deg+0xd0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:137 (discriminator 2)
    351e:	1c21      	adds	r1, r4, #0
    3520:	1c28      	adds	r0, r5, #0
    3522:	f7fd fb35 	bl	b90 <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 2)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    3526:	2100      	movs	r1, #0
fatan2_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:137 (discriminator 2)
	
	// from here onwards, x is guaranteed to be non-zero
	// compute atan2 for quadrant 1 (0 to 90 deg) and quadrant 4 (-90 to 0 deg)
	if (x > 0.0F) return (fatan_deg(y / x));
	// compute atan2 for quadrant 2 (90 to 180 deg)
	if ((x < 0.0F) && (y > 0.0F)) return (180.0F + fatan_deg(y / x));
    3528:	1c04      	adds	r4, r0, #0
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 2)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    352a:	f7fd f98d 	bl	848 <__aeabi_fcmplt>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80 (discriminator 2)

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    352e:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 2)
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    3530:	2800      	cmp	r0, #0
    3532:	d175      	bne.n	3620 <fatan2_deg+0x350>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
		x = -x;
		ixisnegative = 1;
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    3534:	21fe      	movs	r1, #254	; 0xfe
    3536:	1c20      	adds	r0, r4, #0
    3538:	0589      	lsls	r1, r1, #22
    353a:	f7fd f999 	bl	870 <__aeabi_fcmpgt>
    353e:	2800      	cmp	r0, #0
    3540:	d074      	beq.n	362c <fatan2_deg+0x35c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	{
		x = 1.0F / x;
    3542:	20fe      	movs	r0, #254	; 0xfe
    3544:	1c21      	adds	r1, r4, #0
    3546:	0580      	lsls	r0, r0, #22
    3548:	f7fd fb22 	bl	b90 <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:93
		ixexceeds1 = 1;
    354c:	2501      	movs	r5, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
	{
		x = 1.0F / x;
    354e:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:101
	// at this point, x is in the range 0 to 1 inclusive
	// map argument onto range -tan(15 deg) to tan(15 deg)
	// using tan(angle-30deg) = (tan(angle)-tan(30deg)) / (1 + tan(angle)tan(30deg))
	// tan(15deg) maps to tan(-15 deg) = -tan(15 deg)
	// 1. maps to (sqrt(3) - 1) / (sqrt(3) + 1) = 2 - sqrt(3) = tan(15 deg)
	if (x > TAN15DEG)
    3550:	1c20      	adds	r0, r4, #0
    3552:	4938      	ldr	r1, [pc, #224]	; (3634 <fatan2_deg+0x364>)
    3554:	f7fd f98c 	bl	870 <__aeabi_fcmpgt>
    3558:	2800      	cmp	r0, #0
    355a:	d047      	beq.n	35ec <fatan2_deg+0x31c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:103
	{
		x = (x - TAN30DEG)/(1.0F + TAN30DEG * x);
    355c:	1c20      	adds	r0, r4, #0
    355e:	4939      	ldr	r1, [pc, #228]	; (3644 <fatan2_deg+0x374>)
    3560:	f7fd fe3a 	bl	11d8 <__aeabi_fsub>
    3564:	4937      	ldr	r1, [pc, #220]	; (3644 <fatan2_deg+0x374>)
    3566:	1c07      	adds	r7, r0, #0
    3568:	1c20      	adds	r0, r4, #0
    356a:	f7fd fd03 	bl	f74 <__aeabi_fmul>
    356e:	21fe      	movs	r1, #254	; 0xfe
    3570:	0589      	lsls	r1, r1, #22
    3572:	f7fd f991 	bl	898 <__aeabi_fadd>
    3576:	1c01      	adds	r1, r0, #0
    3578:	1c38      	adds	r0, r7, #0
    357a:	f7fd fb09 	bl	b90 <__aeabi_fdiv>
    357e:	1c04      	adds	r4, r0, #0
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    3580:	1c21      	adds	r1, r4, #0
    3582:	f7fd fcf7 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    3586:	492c      	ldr	r1, [pc, #176]	; (3638 <fatan2_deg+0x368>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    3588:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    358a:	f7fd fcf3 	bl	f74 <__aeabi_fmul>
    358e:	492b      	ldr	r1, [pc, #172]	; (363c <fatan2_deg+0x36c>)
    3590:	f7fd f982 	bl	898 <__aeabi_fadd>
    3594:	1c01      	adds	r1, r0, #0
    3596:	1c20      	adds	r0, r4, #0
    3598:	f7fd fcec 	bl	f74 <__aeabi_fmul>
    359c:	4928      	ldr	r1, [pc, #160]	; (3640 <fatan2_deg+0x370>)
    359e:	1c04      	adds	r4, r0, #0
    35a0:	1c38      	adds	r0, r7, #0
    35a2:	f7fd f979 	bl	898 <__aeabi_fadd>
    35a6:	1c01      	adds	r1, r0, #0
    35a8:	1c20      	adds	r0, r4, #0
    35aa:	f7fd faf1 	bl	b90 <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:111

	// call the atan estimator to obtain -15 deg <= angle <= 15 deg
	fangledeg = fatan_15deg(x);

	// undo the distortions applied earlier to obtain -90 deg <= angle <= 90 deg
	if (ixmapped) fangledeg += 30.0F;
    35ae:	4926      	ldr	r1, [pc, #152]	; (3648 <fatan2_deg+0x378>)
    35b0:	f7fd f972 	bl	898 <__aeabi_fadd>
    35b4:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:112
	if (ixexceeds1) fangledeg = 90.0F - fangledeg;
    35b6:	2d00      	cmp	r5, #0
    35b8:	d003      	beq.n	35c2 <fatan2_deg+0x2f2>
    35ba:	481d      	ldr	r0, [pc, #116]	; (3630 <fatan2_deg+0x360>)
    35bc:	f7fd fe0c 	bl	11d8 <__aeabi_fsub>
    35c0:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:113
	if (ixisnegative) fangledeg = -fangledeg;
    35c2:	2e00      	cmp	r6, #0
    35c4:	d003      	beq.n	35ce <fatan2_deg+0x2fe>
    35c6:	2380      	movs	r3, #128	; 0x80
    35c8:	061b      	lsls	r3, r3, #24
    35ca:	469c      	mov	ip, r3
    35cc:	4461      	add	r1, ip
fatan2_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:137
	
	// from here onwards, x is guaranteed to be non-zero
	// compute atan2 for quadrant 1 (0 to 90 deg) and quadrant 4 (-90 to 0 deg)
	if (x > 0.0F) return (fatan_deg(y / x));
	// compute atan2 for quadrant 2 (90 to 180 deg)
	if ((x < 0.0F) && (y > 0.0F)) return (180.0F + fatan_deg(y / x));
    35ce:	1c08      	adds	r0, r1, #0
    35d0:	491e      	ldr	r1, [pc, #120]	; (364c <fatan2_deg+0x37c>)
    35d2:	f7fd f961 	bl	898 <__aeabi_fadd>
    35d6:	e68c      	b.n	32f2 <fatan2_deg+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:128
	if (x == 0.0F)
	{
		// return 90 deg for positive y
		if (y > 0.0F) return 90.0F;
		// return -90 deg for negative y
		if (y < 0.0F) return -90.0F;
    35d8:	481d      	ldr	r0, [pc, #116]	; (3650 <fatan2_deg+0x380>)
    35da:	e68a      	b.n	32f2 <fatan2_deg+0x22>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    35dc:	2500      	movs	r5, #0
    35de:	e6fa      	b.n	33d6 <fatan2_deg+0x106>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    35e0:	2380      	movs	r3, #128	; 0x80
    35e2:	061b      	lsls	r3, r3, #24
    35e4:	469c      	mov	ip, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:86
		ixisnegative = 1;
    35e6:	2601      	movs	r6, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    35e8:	4464      	add	r4, ip
    35ea:	e6e5      	b.n	33b8 <fatan2_deg+0xe8>
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    35ec:	1c21      	adds	r1, r4, #0
    35ee:	1c20      	adds	r0, r4, #0
    35f0:	f7fd fcc0 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    35f4:	4910      	ldr	r1, [pc, #64]	; (3638 <fatan2_deg+0x368>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    35f6:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    35f8:	f7fd fcbc 	bl	f74 <__aeabi_fmul>
    35fc:	490f      	ldr	r1, [pc, #60]	; (363c <fatan2_deg+0x36c>)
    35fe:	f7fd f94b 	bl	898 <__aeabi_fadd>
    3602:	1c01      	adds	r1, r0, #0
    3604:	1c20      	adds	r0, r4, #0
    3606:	f7fd fcb5 	bl	f74 <__aeabi_fmul>
    360a:	490d      	ldr	r1, [pc, #52]	; (3640 <fatan2_deg+0x370>)
    360c:	1c04      	adds	r4, r0, #0
    360e:	1c38      	adds	r0, r7, #0
    3610:	f7fd f942 	bl	898 <__aeabi_fadd>
    3614:	1c01      	adds	r1, r0, #0
    3616:	1c20      	adds	r0, r4, #0
    3618:	f7fd faba 	bl	b90 <__aeabi_fdiv>
    361c:	1c01      	adds	r1, r0, #0
    361e:	e7ca      	b.n	35b6 <fatan2_deg+0x2e6>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    3620:	2380      	movs	r3, #128	; 0x80
    3622:	061b      	lsls	r3, r3, #24
    3624:	469c      	mov	ip, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:86
		ixisnegative = 1;
    3626:	2601      	movs	r6, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    3628:	4464      	add	r4, ip
    362a:	e783      	b.n	3534 <fatan2_deg+0x264>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    362c:	2500      	movs	r5, #0
    362e:	e78f      	b.n	3550 <fatan2_deg+0x280>
    3630:	42b40000 	.word	0x42b40000
    3634:	3e8930a3 	.word	0x3e8930a3
    3638:	41c8b20e 	.word	0x41c8b20e
    363c:	42c149ee 	.word	0x42c149ee
    3640:	3fd7e7dc 	.word	0x3fd7e7dc
    3644:	3f13cd3a 	.word	0x3f13cd3a
    3648:	41f00000 	.word	0x41f00000
    364c:	43340000 	.word	0x43340000
    3650:	c2b40000 	.word	0xc2b40000

00003654 <MPL3115_Init>:
MPL3115_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:104
#define MAG3110_CTRL_REG2         		0x11
#define MAG3110_WHO_AM_I_VALUE     		0xC4

// initialize MPL3115 pressure and temperature sensor
int8 MPL3115_Init(LDD_TDeviceData *DeviceDataPtr, struct PressureSensor *pthisPressure)
{
    3654:	b5f0      	push	{r4, r5, r6, r7, lr}
    3656:	4657      	mov	r7, sl
    3658:	464e      	mov	r6, r9
    365a:	4645      	mov	r5, r8
    365c:	b4e0      	push	{r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:109
	LDD_I2C_TBusState BusState;		// I2C bus state
	LDD_I2C_TErrorMask  MPL3115_I2C_Error;

	// set up the MPL3115 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, MPL3115_I2C_ADDR);
    365e:	2260      	movs	r2, #96	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:104
#define MAG3110_CTRL_REG2         		0x11
#define MAG3110_WHO_AM_I_VALUE     		0xC4

// initialize MPL3115 pressure and temperature sensor
int8 MPL3115_Init(LDD_TDeviceData *DeviceDataPtr, struct PressureSensor *pthisPressure)
{
    3660:	b082      	sub	sp, #8
    3662:	4689      	mov	r9, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:109
	LDD_I2C_TBusState BusState;		// I2C bus state
	LDD_I2C_TErrorMask  MPL3115_I2C_Error;

	// set up the MPL3115 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, MPL3115_I2C_ADDR);
    3664:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:104
#define MAG3110_CTRL_REG2         		0x11
#define MAG3110_WHO_AM_I_VALUE     		0xC4

// initialize MPL3115 pressure and temperature sensor
int8 MPL3115_Init(LDD_TDeviceData *DeviceDataPtr, struct PressureSensor *pthisPressure)
{
    3666:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:109
	LDD_I2C_TBusState BusState;		// I2C bus state
	LDD_I2C_TErrorMask  MPL3115_I2C_Error;

	// set up the MPL3115 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, MPL3115_I2C_ADDR);
    3668:	f00e f8a4 	bl	117b4 <I2C_SelectSlaveDevice>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:118
	// [6]: RAW=0 
	// [5-3]: OS=000 
	// [2]: RST=0
	// [1]: OST=0
	// [0]: SBYB=0 to enter standby
	I2C_Buf[0] = MPL3115_CTRL_REG1;		// byte 0 is the destination register
    366c:	4b2c      	ldr	r3, [pc, #176]	; (3720 <MPL3115_Init+0xcc>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:120
	I2C_Buf[1] = 0x00;						// byte 1 is the data to write
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;			// reset the I2C sent flag
    366e:	2101      	movs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:118
	// [6]: RAW=0 
	// [5-3]: OS=000 
	// [2]: RST=0
	// [1]: OST=0
	// [0]: SBYB=0 to enter standby
	I2C_Buf[0] = MPL3115_CTRL_REG1;		// byte 0 is the destination register
    3670:	4698      	mov	r8, r3
    3672:	2326      	movs	r3, #38	; 0x26
    3674:	4642      	mov	r2, r8
    3676:	7013      	strb	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:119
	I2C_Buf[1] = 0x00;						// byte 1 is the data to write
    3678:	2300      	movs	r3, #0
    367a:	7053      	strb	r3, [r2, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:120
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;			// reset the I2C sent flag
    367c:	2274      	movs	r2, #116	; 0x74
    367e:	4e29      	ldr	r6, [pc, #164]	; (3724 <MPL3115_Init+0xd0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:123

	// transmit the bytes
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    3680:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:120
	// [2]: RST=0
	// [1]: OST=0
	// [0]: SBYB=0 to enter standby
	I2C_Buf[0] = MPL3115_CTRL_REG1;		// byte 0 is the destination register
	I2C_Buf[1] = 0x00;						// byte 1 is the data to write
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;			// reset the I2C sent flag
    3682:	5cb3      	ldrb	r3, [r6, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:134
		// ERR_OK = 0x00: device is present
		// ERR_DISABLED = 0x07: device is disabled
		// ERR_SPEED = 0x01: device does not work in the active speed mode
		I2C_GetError(DeviceDataPtr, &MPL3115_I2C_Error);
	}
	while ((!MPL3115_I2C_Error) && !(mqxglobals.I2C_Status & I2C_SENT_FLAG));
    3684:	2701      	movs	r7, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:120
	// [2]: RST=0
	// [1]: OST=0
	// [0]: SBYB=0 to enter standby
	I2C_Buf[0] = MPL3115_CTRL_REG1;		// byte 0 is the destination register
	I2C_Buf[1] = 0x00;						// byte 1 is the data to write
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;			// reset the I2C sent flag
    3686:	438b      	bics	r3, r1
    3688:	54b3      	strb	r3, [r6, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:123

	// transmit the bytes
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    368a:	4641      	mov	r1, r8
    368c:	2301      	movs	r3, #1
    368e:	3a72      	subs	r2, #114	; 0x72
    3690:	f00d ffd6 	bl	11640 <I2C_MasterSendBlock>
    3694:	466b      	mov	r3, sp
    3696:	1d9d      	adds	r5, r3, #6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:134
		// ERR_OK = 0x00: device is present
		// ERR_DISABLED = 0x07: device is disabled
		// ERR_SPEED = 0x01: device does not work in the active speed mode
		I2C_GetError(DeviceDataPtr, &MPL3115_I2C_Error);
	}
	while ((!MPL3115_I2C_Error) && !(mqxglobals.I2C_Status & I2C_SENT_FLAG));
    3698:	2374      	movs	r3, #116	; 0x74
    369a:	469a      	mov	sl, r3
    369c:	e003      	b.n	36a6 <MPL3115_Init+0x52>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:134 (discriminator 1)
    369e:	4653      	mov	r3, sl
    36a0:	5cf3      	ldrb	r3, [r6, r3]
    36a2:	421f      	tst	r7, r3
    36a4:	d10e      	bne.n	36c4 <MPL3115_Init+0x70>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:132 (discriminator 2)
	{
		// read the error flag
		// ERR_OK = 0x00: device is present
		// ERR_DISABLED = 0x07: device is disabled
		// ERR_SPEED = 0x01: device does not work in the active speed mode
		I2C_GetError(DeviceDataPtr, &MPL3115_I2C_Error);
    36a6:	1c20      	adds	r0, r4, #0
    36a8:	1c29      	adds	r1, r5, #0
    36aa:	f00e f8b9 	bl	11820 <I2C_GetError>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:134 (discriminator 2)
	}
	while ((!MPL3115_I2C_Error) && !(mqxglobals.I2C_Status & I2C_SENT_FLAG));
    36ae:	882b      	ldrh	r3, [r5, #0]
    36b0:	2b00      	cmp	r3, #0
    36b2:	d0f4      	beq.n	369e <MPL3115_Init+0x4a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:138

	// return immediately with error condition if MPL3115 is not present
	if (MPL3115_I2C_Error)
		return false;
    36b4:	2000      	movs	r0, #0
    36b6:	b240      	sxtb	r0, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:176
#define MPL3115_CPERCPOUNT 0.00390625F				// 1/256 fixed range for MPL3115
	pthisPressure->fmPerCount = MPL3115_MPERCOUNT;
	pthisPressure->fCPerCount = MPL3115_CPERCPOUNT;

	return (true);
}
    36b8:	b002      	add	sp, #8
    36ba:	bc1c      	pop	{r2, r3, r4}
    36bc:	4690      	mov	r8, r2
    36be:	4699      	mov	r9, r3
    36c0:	46a2      	mov	sl, r4
    36c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36c4:	466b      	mov	r3, sp
    36c6:	1d5d      	adds	r5, r3, #5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:143 (discriminator 1)
		return false;

	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    36c8:	1c20      	adds	r0, r4, #0
    36ca:	1c29      	adds	r1, r5, #0
    36cc:	f00e f8b6 	bl	1183c <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:144 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    36d0:	782b      	ldrb	r3, [r5, #0]
    36d2:	2b01      	cmp	r3, #1
    36d4:	d1f8      	bne.n	36c8 <MPL3115_Init+0x74>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:157
	// [6]: RAW=0 to disable raw measurements
	// [5-3]: OS=111 for OS ratio=128 for maximum internal averaging with 512ms output interval
	// [2]: RST=0 do not enter reset
	// [1]: OST=0 do not initiate a reading
	// [0]: SBYB=1 to enter active mode
	I2C_Buf[0] = MPL3115_CTRL_REG1;
    36d6:	4641      	mov	r1, r8
    36d8:	2226      	movs	r2, #38	; 0x26
    36da:	700a      	strb	r2, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:158
	I2C_Buf[1] = 0xB9;
    36dc:	3293      	adds	r2, #147	; 0x93
    36de:	704a      	strb	r2, [r1, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:159
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    36e0:	2174      	movs	r1, #116	; 0x74
    36e2:	5c72      	ldrb	r2, [r6, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:160
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    36e4:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:159
	// [2]: RST=0 do not enter reset
	// [1]: OST=0 do not initiate a reading
	// [0]: SBYB=1 to enter active mode
	I2C_Buf[0] = MPL3115_CTRL_REG1;
	I2C_Buf[1] = 0xB9;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    36e6:	439a      	bics	r2, r3
    36e8:	5472      	strb	r2, [r6, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:160
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    36ea:	2301      	movs	r3, #1
    36ec:	4641      	mov	r1, r8
    36ee:	2202      	movs	r2, #2
    36f0:	f00d ffa6 	bl	11640 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:162
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    36f4:	2174      	movs	r1, #116	; 0x74
    36f6:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:162 (discriminator 1)
    36f8:	5c73      	ldrb	r3, [r6, r1]
    36fa:	421a      	tst	r2, r3
    36fc:	d0fc      	beq.n	36f8 <MPL3115_Init+0xa4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:166 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    36fe:	1c20      	adds	r0, r4, #0
    3700:	1c29      	adds	r1, r5, #0
    3702:	f00e f89b 	bl	1183c <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:167 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    3706:	782b      	ldrb	r3, [r5, #0]
    3708:	2b01      	cmp	r3, #1
    370a:	d1f8      	bne.n	36fe <MPL3115_Init+0xaa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:172

	// store the gain terms in the pressure structure
#define MPL3115_MPERCOUNT 0.0000152587890625F		// 1/65536 fixed range for MPL3115	
#define MPL3115_CPERCPOUNT 0.00390625F				// 1/256 fixed range for MPL3115
	pthisPressure->fmPerCount = MPL3115_MPERCOUNT;
    370c:	23de      	movs	r3, #222	; 0xde
    370e:	464a      	mov	r2, r9
    3710:	059b      	lsls	r3, r3, #22
    3712:	6113      	str	r3, [r2, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:173
	pthisPressure->fCPerCount = MPL3115_CPERCPOUNT;
    3714:	23ee      	movs	r3, #238	; 0xee
    3716:	059b      	lsls	r3, r3, #22
    3718:	6153      	str	r3, [r2, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:175

	return (true);
    371a:	2001      	movs	r0, #1
    371c:	e7cb      	b.n	36b6 <MPL3115_Init+0x62>
    371e:	46c0      	nop			; (mov r8, r8)
    3720:	2000042c 	.word	0x2000042c
    3724:	20000560 	.word	0x20000560

00003728 <FXOS8700_Init>:
FXOS8700_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:180
}

// initialize FXOS8700 accelerometer plus magnetometer sensor
void FXOS8700_Init(LDD_TDeviceData *DeviceDataPtr, struct AccelSensor *pthisAccel, struct MagSensor *pthisMag)
{
    3728:	b5f0      	push	{r4, r5, r6, r7, lr}
    372a:	464f      	mov	r7, r9
    372c:	4646      	mov	r6, r8
    372e:	b4c0      	push	{r6, r7}
    3730:	4689      	mov	r9, r1
    3732:	b083      	sub	sp, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:184
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXOS8700 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXOS8700_I2C_ADDR);
    3734:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:180
	return (true);
}

// initialize FXOS8700 accelerometer plus magnetometer sensor
void FXOS8700_Init(LDD_TDeviceData *DeviceDataPtr, struct AccelSensor *pthisAccel, struct MagSensor *pthisMag)
{
    3736:	4690      	mov	r8, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:184
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXOS8700 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXOS8700_I2C_ADDR);
    3738:	221e      	movs	r2, #30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:180
	return (true);
}

// initialize FXOS8700 accelerometer plus magnetometer sensor
void FXOS8700_Init(LDD_TDeviceData *DeviceDataPtr, struct AccelSensor *pthisAccel, struct MagSensor *pthisMag)
{
    373a:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:184
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXOS8700 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXOS8700_I2C_ADDR);
    373c:	f00e f83a 	bl	117b4 <I2C_SelectSlaveDevice>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:189

	// write 0000 0000 = 0x00 to CTRL_REG1 to place FXOS8700 into standby
	// [7-1] = 0000 000
	// [0]: active=0
	I2C_Buf[0] = FXOS8700_CTRL_REG1;
    3740:	232a      	movs	r3, #42	; 0x2a
    3742:	4f56      	ldr	r7, [pc, #344]	; (389c <FXOS8700_Init+0x174>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:191
	I2C_Buf[1] = 0x00;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3744:	2274      	movs	r2, #116	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:189
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXOS8700_I2C_ADDR);

	// write 0000 0000 = 0x00 to CTRL_REG1 to place FXOS8700 into standby
	// [7-1] = 0000 000
	// [0]: active=0
	I2C_Buf[0] = FXOS8700_CTRL_REG1;
    3746:	703b      	strb	r3, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:190
	I2C_Buf[1] = 0x00;
    3748:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:191
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    374a:	2101      	movs	r1, #1
    374c:	4d54      	ldr	r5, [pc, #336]	; (38a0 <FXOS8700_Init+0x178>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:190

	// write 0000 0000 = 0x00 to CTRL_REG1 to place FXOS8700 into standby
	// [7-1] = 0000 000
	// [0]: active=0
	I2C_Buf[0] = FXOS8700_CTRL_REG1;
	I2C_Buf[1] = 0x00;
    374e:	707b      	strb	r3, [r7, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:191
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3750:	5cab      	ldrb	r3, [r5, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:192
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    3752:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:191
	// write 0000 0000 = 0x00 to CTRL_REG1 to place FXOS8700 into standby
	// [7-1] = 0000 000
	// [0]: active=0
	I2C_Buf[0] = FXOS8700_CTRL_REG1;
	I2C_Buf[1] = 0x00;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3754:	438b      	bics	r3, r1
    3756:	54ab      	strb	r3, [r5, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:192
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    3758:	1c39      	adds	r1, r7, #0
    375a:	3a72      	subs	r2, #114	; 0x72
    375c:	2301      	movs	r3, #1
    375e:	f00d ff6f 	bl	11640 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:194
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    3762:	2174      	movs	r1, #116	; 0x74
    3764:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:194 (discriminator 1)
    3766:	5c6b      	ldrb	r3, [r5, r1]
    3768:	421a      	tst	r2, r3
    376a:	d0fc      	beq.n	3766 <FXOS8700_Init+0x3e>
    376c:	466b      	mov	r3, sp
    376e:	1ddc      	adds	r4, r3, #7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:198 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    3770:	1c30      	adds	r0, r6, #0
    3772:	1c21      	adds	r1, r4, #0
    3774:	f00e f862 	bl	1183c <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:199 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    3778:	7823      	ldrb	r3, [r4, #0]
    377a:	2b01      	cmp	r3, #1
    377c:	d1f8      	bne.n	3770 <FXOS8700_Init+0x48>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:207
	// [7]: m_acal=0: auto calibration disabled
	// [6]: m_rst=0: one-shot magnetic reset disabled
	// [5]: m_ost=0: one-shot magnetic measurement disabled
	// [4-2]: m_os=111=7: 8x oversampling (for 200Hz) to reduce magnetometer noise
	// [1-0]: m_hms=11=3: select hybrid mode with accel and magnetometer active
	I2C_Buf[0] = FXOS8700_M_CTRL_REG1;
    377e:	225b      	movs	r2, #91	; 0x5b
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:209
	I2C_Buf[1] = 0x1F;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3780:	2174      	movs	r1, #116	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:207
	// [7]: m_acal=0: auto calibration disabled
	// [6]: m_rst=0: one-shot magnetic reset disabled
	// [5]: m_ost=0: one-shot magnetic measurement disabled
	// [4-2]: m_os=111=7: 8x oversampling (for 200Hz) to reduce magnetometer noise
	// [1-0]: m_hms=11=3: select hybrid mode with accel and magnetometer active
	I2C_Buf[0] = FXOS8700_M_CTRL_REG1;
    3782:	703a      	strb	r2, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:208
	I2C_Buf[1] = 0x1F;
    3784:	3a3c      	subs	r2, #60	; 0x3c
    3786:	707a      	strb	r2, [r7, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:209
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3788:	5c6a      	ldrb	r2, [r5, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:210
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    378a:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:209
	// [5]: m_ost=0: one-shot magnetic measurement disabled
	// [4-2]: m_os=111=7: 8x oversampling (for 200Hz) to reduce magnetometer noise
	// [1-0]: m_hms=11=3: select hybrid mode with accel and magnetometer active
	I2C_Buf[0] = FXOS8700_M_CTRL_REG1;
	I2C_Buf[1] = 0x1F;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    378c:	439a      	bics	r2, r3
    378e:	546a      	strb	r2, [r5, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:210
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    3790:	2301      	movs	r3, #1
    3792:	1c39      	adds	r1, r7, #0
    3794:	2202      	movs	r2, #2
    3796:	f00d ff53 	bl	11640 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:212
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    379a:	2174      	movs	r1, #116	; 0x74
    379c:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:212 (discriminator 1)
    379e:	5c6b      	ldrb	r3, [r5, r1]
    37a0:	421a      	tst	r2, r3
    37a2:	d0fc      	beq.n	379e <FXOS8700_Init+0x76>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:216 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    37a4:	1c30      	adds	r0, r6, #0
    37a6:	1c21      	adds	r1, r4, #0
    37a8:	f00e f848 	bl	1183c <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:217 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    37ac:	7823      	ldrb	r3, [r4, #0]
    37ae:	2b01      	cmp	r3, #1
    37b0:	d1f8      	bne.n	37a4 <FXOS8700_Init+0x7c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:227
	// [5]: hyb_autoinc_mode=1 to map the magnetometer registers to follow the accelerometer registers
	// [4]: m_maxmin_dis=0 to retain default min/max latching even though not used
	// [3]: m_maxmin_dis_ths=0
	// [2]: m_maxmin_rst=0
	// [1-0]: m_rst_cnt=00 to enable magnetic reset each cycle
	I2C_Buf[0] = FXOS8700_M_CTRL_REG2;
    37b2:	225c      	movs	r2, #92	; 0x5c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:229
	I2C_Buf[1] = 0x20;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    37b4:	2174      	movs	r1, #116	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:227
	// [5]: hyb_autoinc_mode=1 to map the magnetometer registers to follow the accelerometer registers
	// [4]: m_maxmin_dis=0 to retain default min/max latching even though not used
	// [3]: m_maxmin_dis_ths=0
	// [2]: m_maxmin_rst=0
	// [1-0]: m_rst_cnt=00 to enable magnetic reset each cycle
	I2C_Buf[0] = FXOS8700_M_CTRL_REG2;
    37b6:	703a      	strb	r2, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:228
	I2C_Buf[1] = 0x20;
    37b8:	3a3c      	subs	r2, #60	; 0x3c
    37ba:	707a      	strb	r2, [r7, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:229
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    37bc:	5c6a      	ldrb	r2, [r5, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:230
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    37be:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:229
	// [3]: m_maxmin_dis_ths=0
	// [2]: m_maxmin_rst=0
	// [1-0]: m_rst_cnt=00 to enable magnetic reset each cycle
	I2C_Buf[0] = FXOS8700_M_CTRL_REG2;
	I2C_Buf[1] = 0x20;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    37c0:	439a      	bics	r2, r3
    37c2:	546a      	strb	r2, [r5, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:230
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    37c4:	2301      	movs	r3, #1
    37c6:	1c39      	adds	r1, r7, #0
    37c8:	2202      	movs	r2, #2
    37ca:	f00d ff39 	bl	11640 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:232
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    37ce:	2174      	movs	r1, #116	; 0x74
    37d0:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:232 (discriminator 1)
    37d2:	5c6b      	ldrb	r3, [r5, r1]
    37d4:	421a      	tst	r2, r3
    37d6:	d0fc      	beq.n	37d2 <FXOS8700_Init+0xaa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:236 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    37d8:	1c30      	adds	r0, r6, #0
    37da:	1c21      	adds	r1, r4, #0
    37dc:	f00e f82e 	bl	1183c <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:237 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    37e0:	7823      	ldrb	r3, [r4, #0]
    37e2:	2b01      	cmp	r3, #1
    37e4:	d1f8      	bne.n	37d8 <FXOS8700_Init+0xb0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:247
	// [5]: reserved
	// [4]: hpf_out=0
	// [3]: reserved
	// [2]: reserved
	// [1-0]: fs=01 for 4g mode: 2048 counts / g = 8192 counts / g after 2 bit left shift
	I2C_Buf[0] = FXOS8700_XYZ_DATA_CFG;
    37e6:	220e      	movs	r2, #14
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:249
	I2C_Buf[1] = 0x01;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    37e8:	2174      	movs	r1, #116	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:248
	// [4]: hpf_out=0
	// [3]: reserved
	// [2]: reserved
	// [1-0]: fs=01 for 4g mode: 2048 counts / g = 8192 counts / g after 2 bit left shift
	I2C_Buf[0] = FXOS8700_XYZ_DATA_CFG;
	I2C_Buf[1] = 0x01;
    37ea:	707b      	strb	r3, [r7, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:247
	// [5]: reserved
	// [4]: hpf_out=0
	// [3]: reserved
	// [2]: reserved
	// [1-0]: fs=01 for 4g mode: 2048 counts / g = 8192 counts / g after 2 bit left shift
	I2C_Buf[0] = FXOS8700_XYZ_DATA_CFG;
    37ec:	703a      	strb	r2, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:249
	I2C_Buf[1] = 0x01;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    37ee:	5c6a      	ldrb	r2, [r5, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:250
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    37f0:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:249
	// [3]: reserved
	// [2]: reserved
	// [1-0]: fs=01 for 4g mode: 2048 counts / g = 8192 counts / g after 2 bit left shift
	I2C_Buf[0] = FXOS8700_XYZ_DATA_CFG;
	I2C_Buf[1] = 0x01;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    37f2:	439a      	bics	r2, r3
    37f4:	546a      	strb	r2, [r5, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:250
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    37f6:	2301      	movs	r3, #1
    37f8:	1c39      	adds	r1, r7, #0
    37fa:	2202      	movs	r2, #2
    37fc:	f00d ff20 	bl	11640 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:252
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    3800:	2174      	movs	r1, #116	; 0x74
    3802:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:252 (discriminator 1)
    3804:	5c6b      	ldrb	r3, [r5, r1]
    3806:	421a      	tst	r2, r3
    3808:	d0fc      	beq.n	3804 <FXOS8700_Init+0xdc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:256 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    380a:	1c30      	adds	r0, r6, #0
    380c:	1c21      	adds	r1, r4, #0
    380e:	f00e f815 	bl	1183c <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:257 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    3812:	7823      	ldrb	r3, [r4, #0]
    3814:	2b01      	cmp	r3, #1
    3816:	d1f8      	bne.n	380a <FXOS8700_Init+0xe2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:266
	// [6]: rst=0: reset disabled
	// [5]: unused
	// [4-3]: smods=00
	// [2]: slpe=0: auto sleep disabled
	// [1-0]: mods=10 for high resolution (maximum over sampling)
	I2C_Buf[0] = FXOS8700_CTRL_REG2;
    3818:	222b      	movs	r2, #43	; 0x2b
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:268
	I2C_Buf[1] = 0x02;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    381a:	2174      	movs	r1, #116	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:266
	// [6]: rst=0: reset disabled
	// [5]: unused
	// [4-3]: smods=00
	// [2]: slpe=0: auto sleep disabled
	// [1-0]: mods=10 for high resolution (maximum over sampling)
	I2C_Buf[0] = FXOS8700_CTRL_REG2;
    381c:	703a      	strb	r2, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:267
	I2C_Buf[1] = 0x02;
    381e:	3a29      	subs	r2, #41	; 0x29
    3820:	707a      	strb	r2, [r7, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:268
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3822:	5c6a      	ldrb	r2, [r5, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:269
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    3824:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:268
	// [4-3]: smods=00
	// [2]: slpe=0: auto sleep disabled
	// [1-0]: mods=10 for high resolution (maximum over sampling)
	I2C_Buf[0] = FXOS8700_CTRL_REG2;
	I2C_Buf[1] = 0x02;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3826:	439a      	bics	r2, r3
    3828:	546a      	strb	r2, [r5, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:269
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    382a:	2301      	movs	r3, #1
    382c:	1c39      	adds	r1, r7, #0
    382e:	2202      	movs	r2, #2
    3830:	f00d ff06 	bl	11640 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:271
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    3834:	2174      	movs	r1, #116	; 0x74
    3836:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:271 (discriminator 1)
    3838:	5c6b      	ldrb	r3, [r5, r1]
    383a:	421a      	tst	r2, r3
    383c:	d0fc      	beq.n	3838 <FXOS8700_Init+0x110>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:275 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    383e:	1c30      	adds	r0, r6, #0
    3840:	1c21      	adds	r1, r4, #0
    3842:	f00d fffb 	bl	1183c <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:276 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    3846:	7823      	ldrb	r3, [r4, #0]
    3848:	2b01      	cmp	r3, #1
    384a:	d1f8      	bne.n	383e <FXOS8700_Init+0x116>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:284
	// [7-6]: aslp_rate=00
	// [5-3]: dr=001=1 for 200Hz data rate (when in hybrid mode)
	// [2]: lnoise=1 for low noise mode (since we're in 4g mode)
	// [1]: f_read=0 for normal 16 bit reads
	// [0]: active=1 to take the part out of standby and enable sampling
	I2C_Buf[0] = FXOS8700_CTRL_REG1;
    384c:	222a      	movs	r2, #42	; 0x2a
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:286
	I2C_Buf[1] = 0x0D;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    384e:	2174      	movs	r1, #116	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:284
	// [7-6]: aslp_rate=00
	// [5-3]: dr=001=1 for 200Hz data rate (when in hybrid mode)
	// [2]: lnoise=1 for low noise mode (since we're in 4g mode)
	// [1]: f_read=0 for normal 16 bit reads
	// [0]: active=1 to take the part out of standby and enable sampling
	I2C_Buf[0] = FXOS8700_CTRL_REG1;
    3850:	703a      	strb	r2, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:285
	I2C_Buf[1] = 0x0D;
    3852:	3a1d      	subs	r2, #29
    3854:	707a      	strb	r2, [r7, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:286
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3856:	5c6a      	ldrb	r2, [r5, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:287
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    3858:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:286
	// [2]: lnoise=1 for low noise mode (since we're in 4g mode)
	// [1]: f_read=0 for normal 16 bit reads
	// [0]: active=1 to take the part out of standby and enable sampling
	I2C_Buf[0] = FXOS8700_CTRL_REG1;
	I2C_Buf[1] = 0x0D;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    385a:	439a      	bics	r2, r3
    385c:	546a      	strb	r2, [r5, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:287
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    385e:	2301      	movs	r3, #1
    3860:	1c39      	adds	r1, r7, #0
    3862:	2202      	movs	r2, #2
    3864:	f00d feec 	bl	11640 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:289
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    3868:	2174      	movs	r1, #116	; 0x74
    386a:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:289 (discriminator 1)
    386c:	5c6b      	ldrb	r3, [r5, r1]
    386e:	421a      	tst	r2, r3
    3870:	d0fc      	beq.n	386c <FXOS8700_Init+0x144>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:293 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    3872:	1c30      	adds	r0, r6, #0
    3874:	1c21      	adds	r1, r4, #0
    3876:	f00d ffe1 	bl	1183c <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:294 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    387a:	7823      	ldrb	r3, [r4, #0]
    387c:	2b01      	cmp	r3, #1
    387e:	d1f8      	bne.n	3872 <FXOS8700_Init+0x14a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:300

	// store the gain terms in the accelerometer and magnetometer sensor structures
#define FXOS8700_UTPERCOUNT 0.1F      				// fixed range for FXOS8700 magnetometer
#define FXOS8700_COUNTSPERUT 10.0F					// must be reciprocal of FUTPERCOUNT
#define FXOS8700_GPERCOUNT 0.0001220703125F			// equal to 1/8192
	pthisAccel->fgPerCount = FXOS8700_GPERCOUNT;
    3880:	23e4      	movs	r3, #228	; 0xe4
    3882:	464a      	mov	r2, r9
    3884:	059b      	lsls	r3, r3, #22
    3886:	6253      	str	r3, [r2, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:301
	pthisMag->fuTPerCount = FXOS8700_UTPERCOUNT;
    3888:	4642      	mov	r2, r8
    388a:	4b06      	ldr	r3, [pc, #24]	; (38a4 <FXOS8700_Init+0x17c>)
    388c:	63d3      	str	r3, [r2, #60]	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:302
	pthisMag->fCountsPeruT = FXOS8700_COUNTSPERUT;
    388e:	4b06      	ldr	r3, [pc, #24]	; (38a8 <FXOS8700_Init+0x180>)
    3890:	6413      	str	r3, [r2, #64]	; 0x40
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:305

	return;
}
    3892:	b003      	add	sp, #12
    3894:	bc0c      	pop	{r2, r3}
    3896:	4690      	mov	r8, r2
    3898:	4699      	mov	r9, r3
    389a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    389c:	2000042c 	.word	0x2000042c
    38a0:	20000560 	.word	0x20000560
    38a4:	3dcccccd 	.word	0x3dcccccd
    38a8:	41200000 	.word	0x41200000

000038ac <FXAS21000_Init>:
FXAS21000_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:309

// initialize FXAS21000 gyroscope sensor
void FXAS21000_Init(LDD_TDeviceData *DeviceDataPtr, struct GyroSensor *pthisGyro)
{
    38ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    38ae:	4647      	mov	r7, r8
    38b0:	b480      	push	{r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:313
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXAS21000 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXAS21000_I2C_ADDR);
    38b2:	2220      	movs	r2, #32
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:309
	return;
}

// initialize FXAS21000 gyroscope sensor
void FXAS21000_Init(LDD_TDeviceData *DeviceDataPtr, struct GyroSensor *pthisGyro)
{
    38b4:	b082      	sub	sp, #8
    38b6:	4688      	mov	r8, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:313
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXAS21000 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXAS21000_I2C_ADDR);
    38b8:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:309
	return;
}

// initialize FXAS21000 gyroscope sensor
void FXAS21000_Init(LDD_TDeviceData *DeviceDataPtr, struct GyroSensor *pthisGyro)
{
    38ba:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:313
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXAS21000 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXAS21000_I2C_ADDR);
    38bc:	f00d ff7a 	bl	117b4 <I2C_SelectSlaveDevice>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:321
	// [7]: ZR_cond=0
	// [6]: RST=0
	// [5]: ST=0 self test disabled
	// [4-2]: DR[2-0]=000 for 200Hz ODR
	// [1-0]: Active=0, Ready=0 for Standby mode
	I2C_Buf[0] = FXAS21000_CTRL_REG1;
    38c0:	2313      	movs	r3, #19
    38c2:	4f2c      	ldr	r7, [pc, #176]	; (3974 <FXAS21000_Init+0xc8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:323
	I2C_Buf[1] = 0x00;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    38c4:	2274      	movs	r2, #116	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:321
	// [7]: ZR_cond=0
	// [6]: RST=0
	// [5]: ST=0 self test disabled
	// [4-2]: DR[2-0]=000 for 200Hz ODR
	// [1-0]: Active=0, Ready=0 for Standby mode
	I2C_Buf[0] = FXAS21000_CTRL_REG1;
    38c6:	703b      	strb	r3, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:322
	I2C_Buf[1] = 0x00;
    38c8:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:323
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    38ca:	2101      	movs	r1, #1
    38cc:	4d2a      	ldr	r5, [pc, #168]	; (3978 <FXAS21000_Init+0xcc>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:322
	// [6]: RST=0
	// [5]: ST=0 self test disabled
	// [4-2]: DR[2-0]=000 for 200Hz ODR
	// [1-0]: Active=0, Ready=0 for Standby mode
	I2C_Buf[0] = FXAS21000_CTRL_REG1;
	I2C_Buf[1] = 0x00;
    38ce:	707b      	strb	r3, [r7, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:323
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    38d0:	5cab      	ldrb	r3, [r5, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:324
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    38d2:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:323
	// [5]: ST=0 self test disabled
	// [4-2]: DR[2-0]=000 for 200Hz ODR
	// [1-0]: Active=0, Ready=0 for Standby mode
	I2C_Buf[0] = FXAS21000_CTRL_REG1;
	I2C_Buf[1] = 0x00;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    38d4:	438b      	bics	r3, r1
    38d6:	54ab      	strb	r3, [r5, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:324
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    38d8:	1c39      	adds	r1, r7, #0
    38da:	3a72      	subs	r2, #114	; 0x72
    38dc:	2301      	movs	r3, #1
    38de:	f00d feaf 	bl	11640 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:326
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    38e2:	2174      	movs	r1, #116	; 0x74
    38e4:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:326 (discriminator 1)
    38e6:	5c6b      	ldrb	r3, [r5, r1]
    38e8:	421a      	tst	r2, r3
    38ea:	d0fc      	beq.n	38e6 <FXAS21000_Init+0x3a>
    38ec:	466b      	mov	r3, sp
    38ee:	1ddc      	adds	r4, r3, #7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:330 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    38f0:	1c30      	adds	r0, r6, #0
    38f2:	1c21      	adds	r1, r4, #0
    38f4:	f00d ffa2 	bl	1183c <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:331 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    38f8:	7823      	ldrb	r3, [r4, #0]
    38fa:	2b01      	cmp	r3, #1
    38fc:	d1f8      	bne.n	38f0 <FXAS21000_Init+0x44>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:339
	// [7-6]: unused=00
	// [5]: SPIW=0 4 wire SPI (irrelevant)
	// [4-3]: SEL[1-0]=00 for 10Hz HPF at 200Hz ODR
	// [2]: HPF_EN=0 disable HPF
	// [1-0]: FS[1-0]=00 for 1600dps
	I2C_Buf[0] = FXAS21000_CTRL_REG0;
    38fe:	220d      	movs	r2, #13
    3900:	703a      	strb	r2, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:340
	I2C_Buf[1] = 0x00;
    3902:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:341
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3904:	2174      	movs	r1, #116	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:340
	// [5]: SPIW=0 4 wire SPI (irrelevant)
	// [4-3]: SEL[1-0]=00 for 10Hz HPF at 200Hz ODR
	// [2]: HPF_EN=0 disable HPF
	// [1-0]: FS[1-0]=00 for 1600dps
	I2C_Buf[0] = FXAS21000_CTRL_REG0;
	I2C_Buf[1] = 0x00;
    3906:	707a      	strb	r2, [r7, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:341
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3908:	5c6a      	ldrb	r2, [r5, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:342
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    390a:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:341
	// [4-3]: SEL[1-0]=00 for 10Hz HPF at 200Hz ODR
	// [2]: HPF_EN=0 disable HPF
	// [1-0]: FS[1-0]=00 for 1600dps
	I2C_Buf[0] = FXAS21000_CTRL_REG0;
	I2C_Buf[1] = 0x00;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    390c:	439a      	bics	r2, r3
    390e:	546a      	strb	r2, [r5, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:342
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    3910:	2301      	movs	r3, #1
    3912:	1c39      	adds	r1, r7, #0
    3914:	2202      	movs	r2, #2
    3916:	f00d fe93 	bl	11640 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:344
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    391a:	2174      	movs	r1, #116	; 0x74
    391c:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:344 (discriminator 1)
    391e:	5c6b      	ldrb	r3, [r5, r1]
    3920:	421a      	tst	r2, r3
    3922:	d0fc      	beq.n	391e <FXAS21000_Init+0x72>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:348 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    3924:	1c30      	adds	r0, r6, #0
    3926:	1c21      	adds	r1, r4, #0
    3928:	f00d ff88 	bl	1183c <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:349 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    392c:	7823      	ldrb	r3, [r4, #0]
    392e:	2b01      	cmp	r3, #1
    3930:	d1f8      	bne.n	3924 <FXAS21000_Init+0x78>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:357
	// [7]: ZR_cond=0
	// [6]: RST=0
	// [5]: ST=0 self test disabled
	// [4-2]: DR[2-0]=000 for 200Hz ODR
	// [1-0]: Active=1, Ready=0 for Active mode
	I2C_Buf[0] = FXAS21000_CTRL_REG1;
    3932:	2213      	movs	r2, #19
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:359
	I2C_Buf[1] = 0x02;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3934:	2174      	movs	r1, #116	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:357
	// [7]: ZR_cond=0
	// [6]: RST=0
	// [5]: ST=0 self test disabled
	// [4-2]: DR[2-0]=000 for 200Hz ODR
	// [1-0]: Active=1, Ready=0 for Active mode
	I2C_Buf[0] = FXAS21000_CTRL_REG1;
    3936:	703a      	strb	r2, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:358
	I2C_Buf[1] = 0x02;
    3938:	3a11      	subs	r2, #17
    393a:	707a      	strb	r2, [r7, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:359
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    393c:	5c6a      	ldrb	r2, [r5, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:360
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    393e:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:359
	// [5]: ST=0 self test disabled
	// [4-2]: DR[2-0]=000 for 200Hz ODR
	// [1-0]: Active=1, Ready=0 for Active mode
	I2C_Buf[0] = FXAS21000_CTRL_REG1;
	I2C_Buf[1] = 0x02;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3940:	439a      	bics	r2, r3
    3942:	546a      	strb	r2, [r5, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:360
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    3944:	2301      	movs	r3, #1
    3946:	1c39      	adds	r1, r7, #0
    3948:	2202      	movs	r2, #2
    394a:	f00d fe79 	bl	11640 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:362
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    394e:	2174      	movs	r1, #116	; 0x74
    3950:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:362 (discriminator 1)
    3952:	5c6b      	ldrb	r3, [r5, r1]
    3954:	421a      	tst	r2, r3
    3956:	d0fc      	beq.n	3952 <FXAS21000_Init+0xa6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:366 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    3958:	1c30      	adds	r0, r6, #0
    395a:	1c21      	adds	r1, r4, #0
    395c:	f00d ff6e 	bl	1183c <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:367 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    3960:	7823      	ldrb	r3, [r4, #0]
    3962:	2b01      	cmp	r3, #1
    3964:	d1f8      	bne.n	3958 <FXAS21000_Init+0xac>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:377
	// 16 bit scaling is 0.05, 0.025, 0.0125, 0.00625dps/count for 1600, 800, 400, 200dps ranges
	// 16 bit scaling is 20, 40, 80, 160 counts/dps for 1600, 800, 400, 200dps ranges
	// our I2C driver reads 16 bit data left shifted two bits from FXAS21000
#define FXAS21000_COUNTSPERDEGPERSEC 20.0F     		// 1600dps range
#define FXAS21000_DEGPERSECPERCOUNT 0.05F			// must be reciprocal of FCOUNTSPERDEGPERSEC
	pthisGyro->fDegPerSecPerCount = FXAS21000_DEGPERSECPERCOUNT;
    3966:	4642      	mov	r2, r8
    3968:	4b04      	ldr	r3, [pc, #16]	; (397c <FXAS21000_Init+0xd0>)
    396a:	6193      	str	r3, [r2, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:380

	return;
}
    396c:	b002      	add	sp, #8
    396e:	bc04      	pop	{r2}
    3970:	4690      	mov	r8, r2
    3972:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3974:	2000042c 	.word	0x2000042c
    3978:	20000560 	.word	0x20000560
    397c:	3d4ccccd 	.word	0x3d4ccccd

00003980 <MPL3115_ReadData>:
MPL3115_ReadData():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:606
	return;
}

// read MPL3115 pressure sensor over I2C
void MPL3115_ReadData(LDD_TDeviceData *DeviceDataPtr, struct PressureSensor *pthisPressure)
{
    3980:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:610
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the MPL3115 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, MPL3115_I2C_ADDR);
    3982:	2260      	movs	r2, #96	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:606
	return;
}

// read MPL3115 pressure sensor over I2C
void MPL3115_ReadData(LDD_TDeviceData *DeviceDataPtr, struct PressureSensor *pthisPressure)
{
    3984:	b083      	sub	sp, #12
    3986:	1c0f      	adds	r7, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:610
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the MPL3115 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, MPL3115_I2C_ADDR);
    3988:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:606
	return;
}

// read MPL3115 pressure sensor over I2C
void MPL3115_ReadData(LDD_TDeviceData *DeviceDataPtr, struct PressureSensor *pthisPressure)
{
    398a:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:610
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the MPL3115 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, MPL3115_I2C_ADDR);
    398c:	f00d ff12 	bl	117b4 <I2C_SelectSlaveDevice>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:613

	// set up the address of the first data register
	I2C_Buf[0] = MPL3115_OUT_P_MSB;
    3990:	2101      	movs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:614
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3992:	2274      	movs	r2, #116	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:613

	// set up the MPL3115 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, MPL3115_I2C_ADDR);

	// set up the address of the first data register
	I2C_Buf[0] = MPL3115_OUT_P_MSB;
    3994:	4e1c      	ldr	r6, [pc, #112]	; (3a08 <MPL3115_ReadData+0x88>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:614
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3996:	4c1d      	ldr	r4, [pc, #116]	; (3a0c <MPL3115_ReadData+0x8c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:613

	// set up the MPL3115 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, MPL3115_I2C_ADDR);

	// set up the address of the first data register
	I2C_Buf[0] = MPL3115_OUT_P_MSB;
    3998:	7031      	strb	r1, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:614
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    399a:	5ca3      	ldrb	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:615
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 1, LDD_I2C_NO_SEND_STOP);
    399c:	1c28      	adds	r0, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:614
	// set up the MPL3115 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, MPL3115_I2C_ADDR);

	// set up the address of the first data register
	I2C_Buf[0] = MPL3115_OUT_P_MSB;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    399e:	438b      	bics	r3, r1
    39a0:	54a3      	strb	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:615
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 1, LDD_I2C_NO_SEND_STOP);
    39a2:	1c31      	adds	r1, r6, #0
    39a4:	3a73      	subs	r2, #115	; 0x73
    39a6:	2300      	movs	r3, #0
    39a8:	f00d fe4a 	bl	11640 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:617
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    39ac:	2074      	movs	r0, #116	; 0x74
    39ae:	2101      	movs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:617 (discriminator 1)
    39b0:	5c23      	ldrb	r3, [r4, r0]
    39b2:	2274      	movs	r2, #116	; 0x74
    39b4:	4219      	tst	r1, r3
    39b6:	d0fb      	beq.n	39b0 <MPL3115_ReadData+0x30>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:620

	// read the 5 bytes of sequential sensor data
	mqxglobals.I2C_Status &= ~I2C_RCVD_FLAG;
    39b8:	2102      	movs	r1, #2
    39ba:	5ca3      	ldrb	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:621
	I2C_MasterReceiveBlock(DeviceDataPtr, I2C_Buf, 5, LDD_I2C_SEND_STOP);
    39bc:	1c28      	adds	r0, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:620
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 1, LDD_I2C_NO_SEND_STOP);
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);

	// read the 5 bytes of sequential sensor data
	mqxglobals.I2C_Status &= ~I2C_RCVD_FLAG;
    39be:	438b      	bics	r3, r1
    39c0:	54a3      	strb	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:621
	I2C_MasterReceiveBlock(DeviceDataPtr, I2C_Buf, 5, LDD_I2C_SEND_STOP);
    39c2:	1c31      	adds	r1, r6, #0
    39c4:	3a6f      	subs	r2, #111	; 0x6f
    39c6:	2301      	movs	r3, #1
    39c8:	f00d fe98 	bl	116fc <I2C_MasterReceiveBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:623
	// wait until the I2C received callback function sets the received flag
	while ((mqxglobals.I2C_Status & I2C_RCVD_FLAG) == 0);
    39cc:	2174      	movs	r1, #116	; 0x74
    39ce:	2202      	movs	r2, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:623 (discriminator 1)
    39d0:	5c63      	ldrb	r3, [r4, r1]
    39d2:	421a      	tst	r2, r3
    39d4:	d0fc      	beq.n	39d0 <MPL3115_ReadData+0x50>
    39d6:	466b      	mov	r3, sp
    39d8:	1ddc      	adds	r4, r3, #7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:627 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    39da:	1c28      	adds	r0, r5, #0
    39dc:	1c21      	adds	r1, r4, #0
    39de:	f00d ff2d 	bl	1183c <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:628 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    39e2:	7823      	ldrb	r3, [r4, #0]
    39e4:	2b01      	cmp	r3, #1
    39e6:	d1f8      	bne.n	39da <MPL3115_ReadData+0x5a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:631

	// place the read buffer into the 32 bit altitude and 16 bit temperature
	pthisPressure->iHpFast = (I2C_Buf[0] << 24) | (I2C_Buf[1] << 16) | (I2C_Buf[2] << 8);
    39e8:	7873      	ldrb	r3, [r6, #1]
    39ea:	041a      	lsls	r2, r3, #16
    39ec:	7833      	ldrb	r3, [r6, #0]
    39ee:	061b      	lsls	r3, r3, #24
    39f0:	4313      	orrs	r3, r2
    39f2:	78b2      	ldrb	r2, [r6, #2]
    39f4:	0212      	lsls	r2, r2, #8
    39f6:	4313      	orrs	r3, r2
    39f8:	603b      	str	r3, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:632
	pthisPressure->iTpFast = (I2C_Buf[3] << 8) | I2C_Buf[4];
    39fa:	78f3      	ldrb	r3, [r6, #3]
    39fc:	7932      	ldrb	r2, [r6, #4]
    39fe:	021b      	lsls	r3, r3, #8
    3a00:	4313      	orrs	r3, r2
    3a02:	837b      	strh	r3, [r7, #26]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:638

	// use this line if the MPL3115 is to be used in pressure mode
	//pthisPressure->iPpFast = (I2C_Buf[0] << 16) | (I2C_Buf[1] << 8) | (I2C_Buf[2] << 0);

	return;
}
    3a04:	b003      	add	sp, #12
    3a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a08:	2000042c 	.word	0x2000042c
    3a0c:	20000560 	.word	0x20000560

00003a10 <FXOS8700_ReadData>:
FXOS8700_ReadData():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:642

// read FXOS8700 accelerometer and magnetometer data over I2C
void FXOS8700_ReadData(LDD_TDeviceData *DeviceDataPtr, struct AccelSensor *pthisAccel, struct MagSensor *pthisMag)
{
    3a10:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a12:	4647      	mov	r7, r8
    3a14:	b480      	push	{r7}
    3a16:	4688      	mov	r8, r1
    3a18:	b082      	sub	sp, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:646
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXOS8700 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXOS8700_I2C_ADDR);
    3a1a:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:642
	return;
}

// read FXOS8700 accelerometer and magnetometer data over I2C
void FXOS8700_ReadData(LDD_TDeviceData *DeviceDataPtr, struct AccelSensor *pthisAccel, struct MagSensor *pthisMag)
{
    3a1c:	1c17      	adds	r7, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:646
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXOS8700 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXOS8700_I2C_ADDR);
    3a1e:	221e      	movs	r2, #30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:642
	return;
}

// read FXOS8700 accelerometer and magnetometer data over I2C
void FXOS8700_ReadData(LDD_TDeviceData *DeviceDataPtr, struct AccelSensor *pthisAccel, struct MagSensor *pthisMag)
{
    3a20:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:646
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXOS8700 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXOS8700_I2C_ADDR);
    3a22:	f00d fec7 	bl	117b4 <I2C_SelectSlaveDevice>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:648
	// set up the address of the first output register
	I2C_Buf[0] = FXOS8700_OUT_X_MSB;
    3a26:	2101      	movs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:649
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3a28:	2274      	movs	r2, #116	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:648
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXOS8700 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXOS8700_I2C_ADDR);
	// set up the address of the first output register
	I2C_Buf[0] = FXOS8700_OUT_X_MSB;
    3a2a:	4d40      	ldr	r5, [pc, #256]	; (3b2c <FXOS8700_ReadData+0x11c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:649
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3a2c:	4c40      	ldr	r4, [pc, #256]	; (3b30 <FXOS8700_ReadData+0x120>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:648
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXOS8700 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXOS8700_I2C_ADDR);
	// set up the address of the first output register
	I2C_Buf[0] = FXOS8700_OUT_X_MSB;
    3a2e:	7029      	strb	r1, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:649
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3a30:	5ca3      	ldrb	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:650
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 1, LDD_I2C_NO_SEND_STOP);
    3a32:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:649

	// set up the FXOS8700 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXOS8700_I2C_ADDR);
	// set up the address of the first output register
	I2C_Buf[0] = FXOS8700_OUT_X_MSB;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3a34:	438b      	bics	r3, r1
    3a36:	54a3      	strb	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:650
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 1, LDD_I2C_NO_SEND_STOP);
    3a38:	1c29      	adds	r1, r5, #0
    3a3a:	3a73      	subs	r2, #115	; 0x73
    3a3c:	2300      	movs	r3, #0
    3a3e:	f00d fdff 	bl	11640 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:652
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    3a42:	2074      	movs	r0, #116	; 0x74
    3a44:	2101      	movs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:652 (discriminator 1)
    3a46:	5c23      	ldrb	r3, [r4, r0]
    3a48:	2274      	movs	r2, #116	; 0x74
    3a4a:	4219      	tst	r1, r3
    3a4c:	d0fb      	beq.n	3a46 <FXOS8700_ReadData+0x36>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:655

	// read the 12 bytes of sequential sensor data
	mqxglobals.I2C_Status &= ~I2C_RCVD_FLAG;
    3a4e:	2102      	movs	r1, #2
    3a50:	5ca3      	ldrb	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:656
	I2C_MasterReceiveBlock(DeviceDataPtr, I2C_Buf, 12, LDD_I2C_SEND_STOP);
    3a52:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:655
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 1, LDD_I2C_NO_SEND_STOP);
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);

	// read the 12 bytes of sequential sensor data
	mqxglobals.I2C_Status &= ~I2C_RCVD_FLAG;
    3a54:	438b      	bics	r3, r1
    3a56:	54a3      	strb	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:656
	I2C_MasterReceiveBlock(DeviceDataPtr, I2C_Buf, 12, LDD_I2C_SEND_STOP);
    3a58:	1c29      	adds	r1, r5, #0
    3a5a:	3a68      	subs	r2, #104	; 0x68
    3a5c:	2301      	movs	r3, #1
    3a5e:	f00d fe4d 	bl	116fc <I2C_MasterReceiveBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:658
	// wait until the I2C received callback function sets the received flag
	while ((mqxglobals.I2C_Status & I2C_RCVD_FLAG) == 0);
    3a62:	2174      	movs	r1, #116	; 0x74
    3a64:	2202      	movs	r2, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:658 (discriminator 1)
    3a66:	5c63      	ldrb	r3, [r4, r1]
    3a68:	421a      	tst	r2, r3
    3a6a:	d0fc      	beq.n	3a66 <FXOS8700_ReadData+0x56>
    3a6c:	466b      	mov	r3, sp
    3a6e:	1ddc      	adds	r4, r3, #7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:662 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    3a70:	1c30      	adds	r0, r6, #0
    3a72:	1c21      	adds	r1, r4, #0
    3a74:	f00d fee2 	bl	1183c <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:663 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    3a78:	7823      	ldrb	r3, [r4, #0]
    3a7a:	2b01      	cmp	r3, #1
    3a7c:	d1f8      	bne.n	3a70 <FXOS8700_ReadData+0x60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:666

	// place the 12 bytes read into the 16 bit accelerometer and magnetometer structures
	pthisAccel->iGpFast[X] = (I2C_Buf[0] << 8) | I2C_Buf[1];
    3a7e:	782e      	ldrb	r6, [r5, #0]
    3a80:	786b      	ldrb	r3, [r5, #1]
    3a82:	0236      	lsls	r6, r6, #8
    3a84:	431e      	orrs	r6, r3
    3a86:	4643      	mov	r3, r8
    3a88:	851e      	strh	r6, [r3, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:667
	pthisAccel->iGpFast[Y] = (I2C_Buf[2] << 8) | I2C_Buf[3];
    3a8a:	78ac      	ldrb	r4, [r5, #2]
    3a8c:	78eb      	ldrb	r3, [r5, #3]
    3a8e:	0224      	lsls	r4, r4, #8
    3a90:	431c      	orrs	r4, r3
    3a92:	4643      	mov	r3, r8
    3a94:	855c      	strh	r4, [r3, #42]	; 0x2a
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:668
	pthisAccel->iGpFast[Z] = (I2C_Buf[4] << 8) | I2C_Buf[5];
    3a96:	7928      	ldrb	r0, [r5, #4]
    3a98:	796b      	ldrb	r3, [r5, #5]
    3a9a:	0200      	lsls	r0, r0, #8
    3a9c:	4318      	orrs	r0, r3
    3a9e:	4643      	mov	r3, r8
    3aa0:	8598      	strh	r0, [r3, #44]	; 0x2c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:669
	pthisMag->iBpFast[X] = (I2C_Buf[6] << 8) | I2C_Buf[7];
    3aa2:	79a9      	ldrb	r1, [r5, #6]
    3aa4:	79eb      	ldrb	r3, [r5, #7]
    3aa6:	0209      	lsls	r1, r1, #8
    3aa8:	4319      	orrs	r1, r3
    3aaa:	2344      	movs	r3, #68	; 0x44
    3aac:	52f9      	strh	r1, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:670
	pthisMag->iBpFast[Y] = (I2C_Buf[8] << 8) | I2C_Buf[9];
    3aae:	7a2a      	ldrb	r2, [r5, #8]
    3ab0:	7a6b      	ldrb	r3, [r5, #9]
    3ab2:	0212      	lsls	r2, r2, #8
    3ab4:	431a      	orrs	r2, r3
    3ab6:	2346      	movs	r3, #70	; 0x46
    3ab8:	52fa      	strh	r2, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:671
	pthisMag->iBpFast[Z] = (I2C_Buf[10] << 8) | I2C_Buf[11];
    3aba:	7aab      	ldrb	r3, [r5, #10]
    3abc:	7aed      	ldrb	r5, [r5, #11]
    3abe:	021b      	lsls	r3, r3, #8
    3ac0:	432b      	orrs	r3, r5
    3ac2:	2548      	movs	r5, #72	; 0x48
    3ac4:	537b      	strh	r3, [r7, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:675

	// finally check for -32768 in the accelerometer and magnetometer data since
	// this value cannot be negated in a later HAL operation
	if (pthisAccel->iGpFast[X] == -32768) pthisAccel->iGpFast[X]++;
    3ac6:	b235      	sxth	r5, r6
    3ac8:	4e1a      	ldr	r6, [pc, #104]	; (3b34 <FXOS8700_ReadData+0x124>)
    3aca:	42b5      	cmp	r5, r6
    3acc:	d02a      	beq.n	3b24 <FXOS8700_ReadData+0x114>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:676
	if (pthisAccel->iGpFast[Y] == -32768) pthisAccel->iGpFast[Y]++;
    3ace:	4d19      	ldr	r5, [pc, #100]	; (3b34 <FXOS8700_ReadData+0x124>)
    3ad0:	b224      	sxth	r4, r4
    3ad2:	42ac      	cmp	r4, r5
    3ad4:	d022      	beq.n	3b1c <FXOS8700_ReadData+0x10c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:677
	if (pthisAccel->iGpFast[Z] == -32768) pthisAccel->iGpFast[Z]++;
    3ad6:	4c17      	ldr	r4, [pc, #92]	; (3b34 <FXOS8700_ReadData+0x124>)
    3ad8:	b200      	sxth	r0, r0
    3ada:	42a0      	cmp	r0, r4
    3adc:	d01a      	beq.n	3b14 <FXOS8700_ReadData+0x104>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:678
	if (pthisMag->iBpFast[X] == -32768) pthisMag->iBpFast[X]++;
    3ade:	4815      	ldr	r0, [pc, #84]	; (3b34 <FXOS8700_ReadData+0x124>)
    3ae0:	b209      	sxth	r1, r1
    3ae2:	4281      	cmp	r1, r0
    3ae4:	d012      	beq.n	3b0c <FXOS8700_ReadData+0xfc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:679
	if (pthisMag->iBpFast[Y] == -32768) pthisMag->iBpFast[Y]++;
    3ae6:	4913      	ldr	r1, [pc, #76]	; (3b34 <FXOS8700_ReadData+0x124>)
    3ae8:	b212      	sxth	r2, r2
    3aea:	428a      	cmp	r2, r1
    3aec:	d00a      	beq.n	3b04 <FXOS8700_ReadData+0xf4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:680
	if (pthisMag->iBpFast[Z] == -32768) pthisMag->iBpFast[Z]++;
    3aee:	4a11      	ldr	r2, [pc, #68]	; (3b34 <FXOS8700_ReadData+0x124>)
    3af0:	b21b      	sxth	r3, r3
    3af2:	4293      	cmp	r3, r2
    3af4:	d102      	bne.n	3afc <FXOS8700_ReadData+0xec>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:680 (discriminator 1)
    3af6:	2348      	movs	r3, #72	; 0x48
    3af8:	4a0f      	ldr	r2, [pc, #60]	; (3b38 <FXOS8700_ReadData+0x128>)
    3afa:	52fa      	strh	r2, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:683

	return;
}
    3afc:	b002      	add	sp, #8
    3afe:	bc04      	pop	{r2}
    3b00:	4690      	mov	r8, r2
    3b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:679 (discriminator 1)
	// this value cannot be negated in a later HAL operation
	if (pthisAccel->iGpFast[X] == -32768) pthisAccel->iGpFast[X]++;
	if (pthisAccel->iGpFast[Y] == -32768) pthisAccel->iGpFast[Y]++;
	if (pthisAccel->iGpFast[Z] == -32768) pthisAccel->iGpFast[Z]++;
	if (pthisMag->iBpFast[X] == -32768) pthisMag->iBpFast[X]++;
	if (pthisMag->iBpFast[Y] == -32768) pthisMag->iBpFast[Y]++;
    3b04:	2246      	movs	r2, #70	; 0x46
    3b06:	490c      	ldr	r1, [pc, #48]	; (3b38 <FXOS8700_ReadData+0x128>)
    3b08:	52b9      	strh	r1, [r7, r2]
    3b0a:	e7f0      	b.n	3aee <FXOS8700_ReadData+0xde>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:678 (discriminator 1)
	// finally check for -32768 in the accelerometer and magnetometer data since
	// this value cannot be negated in a later HAL operation
	if (pthisAccel->iGpFast[X] == -32768) pthisAccel->iGpFast[X]++;
	if (pthisAccel->iGpFast[Y] == -32768) pthisAccel->iGpFast[Y]++;
	if (pthisAccel->iGpFast[Z] == -32768) pthisAccel->iGpFast[Z]++;
	if (pthisMag->iBpFast[X] == -32768) pthisMag->iBpFast[X]++;
    3b0c:	2144      	movs	r1, #68	; 0x44
    3b0e:	480a      	ldr	r0, [pc, #40]	; (3b38 <FXOS8700_ReadData+0x128>)
    3b10:	5278      	strh	r0, [r7, r1]
    3b12:	e7e8      	b.n	3ae6 <FXOS8700_ReadData+0xd6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:677 (discriminator 1)

	// finally check for -32768 in the accelerometer and magnetometer data since
	// this value cannot be negated in a later HAL operation
	if (pthisAccel->iGpFast[X] == -32768) pthisAccel->iGpFast[X]++;
	if (pthisAccel->iGpFast[Y] == -32768) pthisAccel->iGpFast[Y]++;
	if (pthisAccel->iGpFast[Z] == -32768) pthisAccel->iGpFast[Z]++;
    3b14:	4644      	mov	r4, r8
    3b16:	4808      	ldr	r0, [pc, #32]	; (3b38 <FXOS8700_ReadData+0x128>)
    3b18:	85a0      	strh	r0, [r4, #44]	; 0x2c
    3b1a:	e7e0      	b.n	3ade <FXOS8700_ReadData+0xce>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:676 (discriminator 1)
	pthisMag->iBpFast[Z] = (I2C_Buf[10] << 8) | I2C_Buf[11];

	// finally check for -32768 in the accelerometer and magnetometer data since
	// this value cannot be negated in a later HAL operation
	if (pthisAccel->iGpFast[X] == -32768) pthisAccel->iGpFast[X]++;
	if (pthisAccel->iGpFast[Y] == -32768) pthisAccel->iGpFast[Y]++;
    3b1c:	4645      	mov	r5, r8
    3b1e:	4c06      	ldr	r4, [pc, #24]	; (3b38 <FXOS8700_ReadData+0x128>)
    3b20:	856c      	strh	r4, [r5, #42]	; 0x2a
    3b22:	e7d8      	b.n	3ad6 <FXOS8700_ReadData+0xc6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:675 (discriminator 1)
	pthisMag->iBpFast[Y] = (I2C_Buf[8] << 8) | I2C_Buf[9];
	pthisMag->iBpFast[Z] = (I2C_Buf[10] << 8) | I2C_Buf[11];

	// finally check for -32768 in the accelerometer and magnetometer data since
	// this value cannot be negated in a later HAL operation
	if (pthisAccel->iGpFast[X] == -32768) pthisAccel->iGpFast[X]++;
    3b24:	4646      	mov	r6, r8
    3b26:	4d04      	ldr	r5, [pc, #16]	; (3b38 <FXOS8700_ReadData+0x128>)
    3b28:	8535      	strh	r5, [r6, #40]	; 0x28
    3b2a:	e7d0      	b.n	3ace <FXOS8700_ReadData+0xbe>
    3b2c:	2000042c 	.word	0x2000042c
    3b30:	20000560 	.word	0x20000560
    3b34:	ffff8000 	.word	0xffff8000
    3b38:	ffff8001 	.word	0xffff8001

00003b3c <FXAS21000_ReadData>:
FXAS21000_ReadData():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:687
	return;
}

// read FXAS21000 gyro data over I2C
void FXAS21000_ReadData(LDD_TDeviceData *DeviceDataPtr, struct GyroSensor *pthisGyro, int16 irow)
{
    3b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b3e:	4647      	mov	r7, r8
    3b40:	b480      	push	{r7}
    3b42:	4688      	mov	r8, r1
    3b44:	b082      	sub	sp, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:691
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXAS21000 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXAS21000_I2C_ADDR);
    3b46:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:687
	return;
}

// read FXAS21000 gyro data over I2C
void FXAS21000_ReadData(LDD_TDeviceData *DeviceDataPtr, struct GyroSensor *pthisGyro, int16 irow)
{
    3b48:	1c16      	adds	r6, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:691
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXAS21000 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXAS21000_I2C_ADDR);
    3b4a:	2220      	movs	r2, #32
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:687
	return;
}

// read FXAS21000 gyro data over I2C
void FXAS21000_ReadData(LDD_TDeviceData *DeviceDataPtr, struct GyroSensor *pthisGyro, int16 irow)
{
    3b4c:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:691
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXAS21000 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXAS21000_I2C_ADDR);
    3b4e:	f00d fe31 	bl	117b4 <I2C_SelectSlaveDevice>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:694

	// set up the address of the first output register
	I2C_Buf[0] = FXAS21000_DATA_REG;
    3b52:	2101      	movs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:695
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3b54:	2274      	movs	r2, #116	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:694

	// set up the FXAS21000 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXAS21000_I2C_ADDR);

	// set up the address of the first output register
	I2C_Buf[0] = FXAS21000_DATA_REG;
    3b56:	4f31      	ldr	r7, [pc, #196]	; (3c1c <FXAS21000_ReadData+0xe0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:695
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3b58:	4c31      	ldr	r4, [pc, #196]	; (3c20 <FXAS21000_ReadData+0xe4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:694

	// set up the FXAS21000 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXAS21000_I2C_ADDR);

	// set up the address of the first output register
	I2C_Buf[0] = FXAS21000_DATA_REG;
    3b5a:	7039      	strb	r1, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:695
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3b5c:	5ca3      	ldrb	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:696
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 1, LDD_I2C_NO_SEND_STOP);
    3b5e:	1c28      	adds	r0, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:695
	// set up the FXAS21000 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXAS21000_I2C_ADDR);

	// set up the address of the first output register
	I2C_Buf[0] = FXAS21000_DATA_REG;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3b60:	438b      	bics	r3, r1
    3b62:	54a3      	strb	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:696
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 1, LDD_I2C_NO_SEND_STOP);
    3b64:	1c39      	adds	r1, r7, #0
    3b66:	3a73      	subs	r2, #115	; 0x73
    3b68:	2300      	movs	r3, #0
    3b6a:	f00d fd69 	bl	11640 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:698
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    3b6e:	2074      	movs	r0, #116	; 0x74
    3b70:	2101      	movs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:698 (discriminator 1)
    3b72:	5c23      	ldrb	r3, [r4, r0]
    3b74:	2274      	movs	r2, #116	; 0x74
    3b76:	4219      	tst	r1, r3
    3b78:	d0fb      	beq.n	3b72 <FXAS21000_ReadData+0x36>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:701

	// read the 6 bytes of sequential sensor data
	mqxglobals.I2C_Status &= ~I2C_RCVD_FLAG;
    3b7a:	2102      	movs	r1, #2
    3b7c:	5ca3      	ldrb	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:702
	I2C_MasterReceiveBlock(DeviceDataPtr, I2C_Buf, 6, LDD_I2C_SEND_STOP);
    3b7e:	1c28      	adds	r0, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:701
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 1, LDD_I2C_NO_SEND_STOP);
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);

	// read the 6 bytes of sequential sensor data
	mqxglobals.I2C_Status &= ~I2C_RCVD_FLAG;
    3b80:	438b      	bics	r3, r1
    3b82:	54a3      	strb	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:702
	I2C_MasterReceiveBlock(DeviceDataPtr, I2C_Buf, 6, LDD_I2C_SEND_STOP);
    3b84:	1c39      	adds	r1, r7, #0
    3b86:	3a6e      	subs	r2, #110	; 0x6e
    3b88:	2301      	movs	r3, #1
    3b8a:	f00d fdb7 	bl	116fc <I2C_MasterReceiveBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:704
	// wait until the I2C received callback function sets the received flag
	while ((mqxglobals.I2C_Status & I2C_RCVD_FLAG) == 0);
    3b8e:	2174      	movs	r1, #116	; 0x74
    3b90:	2202      	movs	r2, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:704 (discriminator 1)
    3b92:	5c63      	ldrb	r3, [r4, r1]
    3b94:	421a      	tst	r2, r3
    3b96:	d0fc      	beq.n	3b92 <FXAS21000_ReadData+0x56>
    3b98:	466b      	mov	r3, sp
    3b9a:	1ddc      	adds	r4, r3, #7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:708 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    3b9c:	1c28      	adds	r0, r5, #0
    3b9e:	1c21      	adds	r1, r4, #0
    3ba0:	f00d fe4c 	bl	1183c <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:709 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    3ba4:	7823      	ldrb	r3, [r4, #0]
    3ba6:	2b01      	cmp	r3, #1
    3ba8:	d1f8      	bne.n	3b9c <FXAS21000_ReadData+0x60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:712

	// place the read buffer into the 16 bit gyro structure
	pthisGyro->iYpFast[irow][X] = (I2C_Buf[0] << 8) | I2C_Buf[1];
    3baa:	0071      	lsls	r1, r6, #1
    3bac:	198b      	adds	r3, r1, r6
    3bae:	005b      	lsls	r3, r3, #1
    3bb0:	4443      	add	r3, r8
    3bb2:	1c18      	adds	r0, r3, #0
    3bb4:	783a      	ldrb	r2, [r7, #0]
    3bb6:	787c      	ldrb	r4, [r7, #1]
    3bb8:	0212      	lsls	r2, r2, #8
    3bba:	4322      	orrs	r2, r4
    3bbc:	839a      	strh	r2, [r3, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:713
	pthisGyro->iYpFast[irow][Y] = (I2C_Buf[2] << 8) | I2C_Buf[3];
    3bbe:	78ba      	ldrb	r2, [r7, #2]
    3bc0:	78fc      	ldrb	r4, [r7, #3]
    3bc2:	0212      	lsls	r2, r2, #8
    3bc4:	4322      	orrs	r2, r4
    3bc6:	83da      	strh	r2, [r3, #30]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:714
	pthisGyro->iYpFast[irow][Z] = (I2C_Buf[4] << 8) | I2C_Buf[5];
    3bc8:	793a      	ldrb	r2, [r7, #4]
    3bca:	797c      	ldrb	r4, [r7, #5]
    3bcc:	0212      	lsls	r2, r2, #8
    3bce:	4322      	orrs	r2, r4
    3bd0:	841a      	strh	r2, [r3, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:718

	// finally check for -32768 which cannot be negated in a later HAL operation
	// this value can be obtained during clipping in rapid rotation
	if (pthisGyro->iYpFast[irow][X] == -32768) pthisGyro->iYpFast[irow][X]++;
    3bd2:	231c      	movs	r3, #28
    3bd4:	5ec2      	ldrsh	r2, [r0, r3]
    3bd6:	4b13      	ldr	r3, [pc, #76]	; (3c24 <FXAS21000_ReadData+0xe8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:712
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
	} while (BusState != LDD_I2C_IDLE);

	// place the read buffer into the 16 bit gyro structure
	pthisGyro->iYpFast[irow][X] = (I2C_Buf[0] << 8) | I2C_Buf[1];
    3bd8:	3018      	adds	r0, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:718
	pthisGyro->iYpFast[irow][Y] = (I2C_Buf[2] << 8) | I2C_Buf[3];
	pthisGyro->iYpFast[irow][Z] = (I2C_Buf[4] << 8) | I2C_Buf[5];

	// finally check for -32768 which cannot be negated in a later HAL operation
	// this value can be obtained during clipping in rapid rotation
	if (pthisGyro->iYpFast[irow][X] == -32768) pthisGyro->iYpFast[irow][X]++;
    3bda:	429a      	cmp	r2, r3
    3bdc:	d01a      	beq.n	3c14 <FXAS21000_ReadData+0xd8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:719
	if (pthisGyro->iYpFast[irow][Y] == -32768) pthisGyro->iYpFast[irow][Y]++;
    3bde:	198b      	adds	r3, r1, r6
    3be0:	005b      	lsls	r3, r3, #1
    3be2:	4443      	add	r3, r8
    3be4:	221e      	movs	r2, #30
    3be6:	5e98      	ldrsh	r0, [r3, r2]
    3be8:	4a0e      	ldr	r2, [pc, #56]	; (3c24 <FXAS21000_ReadData+0xe8>)
    3bea:	331a      	adds	r3, #26
    3bec:	4290      	cmp	r0, r2
    3bee:	d00e      	beq.n	3c0e <FXAS21000_ReadData+0xd2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:720
	if (pthisGyro->iYpFast[irow][Z] == -32768) pthisGyro->iYpFast[irow][Z]++;
    3bf0:	198e      	adds	r6, r1, r6
    3bf2:	0076      	lsls	r6, r6, #1
    3bf4:	4446      	add	r6, r8
    3bf6:	2320      	movs	r3, #32
    3bf8:	5ef2      	ldrsh	r2, [r6, r3]
    3bfa:	4b0a      	ldr	r3, [pc, #40]	; (3c24 <FXAS21000_ReadData+0xe8>)
    3bfc:	361c      	adds	r6, #28
    3bfe:	429a      	cmp	r2, r3
    3c00:	d101      	bne.n	3c06 <FXAS21000_ReadData+0xca>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:720 (discriminator 1)
    3c02:	4b09      	ldr	r3, [pc, #36]	; (3c28 <FXAS21000_ReadData+0xec>)
    3c04:	80b3      	strh	r3, [r6, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:723

	return;
}
    3c06:	b002      	add	sp, #8
    3c08:	bc04      	pop	{r2}
    3c0a:	4690      	mov	r8, r2
    3c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:719 (discriminator 1)
	pthisGyro->iYpFast[irow][Z] = (I2C_Buf[4] << 8) | I2C_Buf[5];

	// finally check for -32768 which cannot be negated in a later HAL operation
	// this value can be obtained during clipping in rapid rotation
	if (pthisGyro->iYpFast[irow][X] == -32768) pthisGyro->iYpFast[irow][X]++;
	if (pthisGyro->iYpFast[irow][Y] == -32768) pthisGyro->iYpFast[irow][Y]++;
    3c0e:	4a06      	ldr	r2, [pc, #24]	; (3c28 <FXAS21000_ReadData+0xec>)
    3c10:	809a      	strh	r2, [r3, #4]
    3c12:	e7ed      	b.n	3bf0 <FXAS21000_ReadData+0xb4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:718 (discriminator 1)
	pthisGyro->iYpFast[irow][Y] = (I2C_Buf[2] << 8) | I2C_Buf[3];
	pthisGyro->iYpFast[irow][Z] = (I2C_Buf[4] << 8) | I2C_Buf[5];

	// finally check for -32768 which cannot be negated in a later HAL operation
	// this value can be obtained during clipping in rapid rotation
	if (pthisGyro->iYpFast[irow][X] == -32768) pthisGyro->iYpFast[irow][X]++;
    3c14:	4b04      	ldr	r3, [pc, #16]	; (3c28 <FXAS21000_ReadData+0xec>)
    3c16:	8083      	strh	r3, [r0, #4]
    3c18:	e7e1      	b.n	3bde <FXAS21000_ReadData+0xa2>
    3c1a:	46c0      	nop			; (mov r8, r8)
    3c1c:	2000042c 	.word	0x2000042c
    3c20:	20000560 	.word	0x20000560
    3c24:	ffff8000 	.word	0xffff8000
    3c28:	ffff8001 	.word	0xffff8001

00003c2c <fInit_6DOF_GY_KALMAN>:
fInit_6DOF_GY_KALMAN():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:140
	return;
} // end fInit_6DOF_GB_BASIC

// function initalizes the 6DOF accel + gyro Kalman filter algorithm
void fInit_6DOF_GY_KALMAN(struct SV_6DOF_GY_KALMAN *pthisSV, int16 iSensorFS, int16 iOverSampleRatio)
{
    3c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c2e:	464f      	mov	r7, r9
    3c30:	4646      	mov	r6, r8
    3c32:	b4c0      	push	{r6, r7}
    3c34:	1c17      	adds	r7, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:144
	int8 i, j;				// loop counters

	// reset the flag denoting that a first 6DOF orientation lock has been achieved
	pthisSV->iFirstOrientationLock = 0;
    3c36:	2200      	movs	r2, #0
    3c38:	4bb1      	ldr	r3, [pc, #708]	; (3f00 <fInit_6DOF_GY_KALMAN+0x2d4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:140
	return;
} // end fInit_6DOF_GB_BASIC

// function initalizes the 6DOF accel + gyro Kalman filter algorithm
void fInit_6DOF_GY_KALMAN(struct SV_6DOF_GY_KALMAN *pthisSV, int16 iSensorFS, int16 iOverSampleRatio)
{
    3c3a:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:144
	int8 i, j;				// loop counters

	// reset the flag denoting that a first 6DOF orientation lock has been achieved
	pthisSV->iFirstOrientationLock = 0;
    3c3c:	52c2      	strh	r2, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:147

	// compute and store useful product terms to save floating point calculations later
	pthisSV->fFastdeltat = 1.0F / (float) iSensorFS;
    3c3e:	1c08      	adds	r0, r1, #0
    3c40:	f7fd fc68 	bl	1514 <__aeabi_i2f>
    3c44:	1c01      	adds	r1, r0, #0
    3c46:	20fe      	movs	r0, #254	; 0xfe
    3c48:	0580      	lsls	r0, r0, #22
    3c4a:	f7fc ffa1 	bl	b90 <__aeabi_fdiv>
    3c4e:	4bad      	ldr	r3, [pc, #692]	; (3f04 <fInit_6DOF_GY_KALMAN+0x2d8>)
    3c50:	1c05      	adds	r5, r0, #0
    3c52:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:148
	pthisSV->fdeltat = (float) iOverSampleRatio * pthisSV->fFastdeltat;
    3c54:	1c38      	adds	r0, r7, #0
    3c56:	f7fd fc5d 	bl	1514 <__aeabi_i2f>
    3c5a:	1c01      	adds	r1, r0, #0
    3c5c:	1c28      	adds	r0, r5, #0
    3c5e:	f7fd f989 	bl	f74 <__aeabi_fmul>
    3c62:	2390      	movs	r3, #144	; 0x90
    3c64:	00db      	lsls	r3, r3, #3
    3c66:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:149
	pthisSV->fdeltatsq = pthisSV->fdeltat * pthisSV->fdeltat;
    3c68:	4ba7      	ldr	r3, [pc, #668]	; (3f08 <fInit_6DOF_GY_KALMAN+0x2dc>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:148
	// reset the flag denoting that a first 6DOF orientation lock has been achieved
	pthisSV->iFirstOrientationLock = 0;

	// compute and store useful product terms to save floating point calculations later
	pthisSV->fFastdeltat = 1.0F / (float) iSensorFS;
	pthisSV->fdeltat = (float) iOverSampleRatio * pthisSV->fFastdeltat;
    3c6a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:149
	pthisSV->fdeltatsq = pthisSV->fdeltat * pthisSV->fdeltat;
    3c6c:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:150
	pthisSV->fcasq = FCA_6DOF_GY_KALMAN * FCA_6DOF_GY_KALMAN;
    3c6e:	27fa      	movs	r7, #250	; 0xfa
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:149
	pthisSV->iFirstOrientationLock = 0;

	// compute and store useful product terms to save floating point calculations later
	pthisSV->fFastdeltat = 1.0F / (float) iSensorFS;
	pthisSV->fdeltat = (float) iOverSampleRatio * pthisSV->fFastdeltat;
	pthisSV->fdeltatsq = pthisSV->fdeltat * pthisSV->fdeltat;
    3c70:	f7fd f980 	bl	f74 <__aeabi_fmul>
    3c74:	464b      	mov	r3, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:150
	pthisSV->fcasq = FCA_6DOF_GY_KALMAN * FCA_6DOF_GY_KALMAN;
    3c76:	05bf      	lsls	r7, r7, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:149
	pthisSV->iFirstOrientationLock = 0;

	// compute and store useful product terms to save floating point calculations later
	pthisSV->fFastdeltat = 1.0F / (float) iSensorFS;
	pthisSV->fdeltat = (float) iOverSampleRatio * pthisSV->fFastdeltat;
	pthisSV->fdeltatsq = pthisSV->fdeltat * pthisSV->fdeltat;
    3c78:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:150
	pthisSV->fcasq = FCA_6DOF_GY_KALMAN * FCA_6DOF_GY_KALMAN;
    3c7a:	3b0c      	subs	r3, #12
    3c7c:	50e7      	str	r7, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:151
	pthisSV->fQwbplusQvG = FQWB_6DOF_GY_KALMAN + FQVG_6DOF_GY_KALMAN;
    3c7e:	4ba3      	ldr	r3, [pc, #652]	; (3f0c <fInit_6DOF_GY_KALMAN+0x2e0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:158
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fC3x9[i][j]= 0.0F;
    3c80:	2500      	movs	r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:151
	// compute and store useful product terms to save floating point calculations later
	pthisSV->fFastdeltat = 1.0F / (float) iSensorFS;
	pthisSV->fdeltat = (float) iOverSampleRatio * pthisSV->fFastdeltat;
	pthisSV->fdeltatsq = pthisSV->fdeltat * pthisSV->fdeltat;
	pthisSV->fcasq = FCA_6DOF_GY_KALMAN * FCA_6DOF_GY_KALMAN;
	pthisSV->fQwbplusQvG = FQWB_6DOF_GY_KALMAN + FQVG_6DOF_GY_KALMAN;
    3c82:	4698      	mov	r8, r3
    3c84:	2391      	movs	r3, #145	; 0x91
    3c86:	4642      	mov	r2, r8
    3c88:	00db      	lsls	r3, r3, #3
    3c8a:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:158
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fC3x9[i][j]= 0.0F;
    3c8c:	4ba0      	ldr	r3, [pc, #640]	; (3f10 <fInit_6DOF_GY_KALMAN+0x2e4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:164
		}
	}
	pthisSV->fC3x9[0][6] = pthisSV->fC3x9[1][7] = pthisSV->fC3x9[2][8] = 1.0F;

	// zero a posteriori orientation, error vector xe+ (thetae+, be+, ae+) and b+
	f3x3matrixAeqI(pthisSV->fRPl);
    3c8e:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:158
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fC3x9[i][j]= 0.0F;
    3c90:	50e5      	str	r5, [r4, r3]
    3c92:	3304      	adds	r3, #4
    3c94:	50e5      	str	r5, [r4, r3]
    3c96:	4b9f      	ldr	r3, [pc, #636]	; (3f14 <fInit_6DOF_GY_KALMAN+0x2e8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:161
		}
	}
	pthisSV->fC3x9[0][6] = pthisSV->fC3x9[1][7] = pthisSV->fC3x9[2][8] = 1.0F;
    3c98:	4a9f      	ldr	r2, [pc, #636]	; (3f18 <fInit_6DOF_GY_KALMAN+0x2ec>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:158
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fC3x9[i][j]= 0.0F;
    3c9a:	50e5      	str	r5, [r4, r3]
    3c9c:	3304      	adds	r3, #4
    3c9e:	50e5      	str	r5, [r4, r3]
    3ca0:	4b9e      	ldr	r3, [pc, #632]	; (3f1c <fInit_6DOF_GY_KALMAN+0x2f0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:164
		}
	}
	pthisSV->fC3x9[0][6] = pthisSV->fC3x9[1][7] = pthisSV->fC3x9[2][8] = 1.0F;

	// zero a posteriori orientation, error vector xe+ (thetae+, be+, ae+) and b+
	f3x3matrixAeqI(pthisSV->fRPl);
    3ca2:	3014      	adds	r0, #20
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:158
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fC3x9[i][j]= 0.0F;
    3ca4:	50e5      	str	r5, [r4, r3]
    3ca6:	3304      	adds	r3, #4
    3ca8:	50e5      	str	r5, [r4, r3]
    3caa:	3308      	adds	r3, #8
    3cac:	50e5      	str	r5, [r4, r3]
    3cae:	4b9c      	ldr	r3, [pc, #624]	; (3f20 <fInit_6DOF_GY_KALMAN+0x2f4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:144
void fInit_6DOF_GY_KALMAN(struct SV_6DOF_GY_KALMAN *pthisSV, int16 iSensorFS, int16 iOverSampleRatio)
{
	int8 i, j;				// loop counters

	// reset the flag denoting that a first 6DOF orientation lock has been achieved
	pthisSV->iFirstOrientationLock = 0;
    3cb0:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:158
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fC3x9[i][j]= 0.0F;
    3cb2:	50e5      	str	r5, [r4, r3]
    3cb4:	3304      	adds	r3, #4
    3cb6:	50e5      	str	r5, [r4, r3]
    3cb8:	4b9a      	ldr	r3, [pc, #616]	; (3f24 <fInit_6DOF_GY_KALMAN+0x2f8>)
    3cba:	50e5      	str	r5, [r4, r3]
    3cbc:	3304      	adds	r3, #4
    3cbe:	50e5      	str	r5, [r4, r3]
    3cc0:	4b99      	ldr	r3, [pc, #612]	; (3f28 <fInit_6DOF_GY_KALMAN+0x2fc>)
    3cc2:	50e5      	str	r5, [r4, r3]
    3cc4:	3304      	adds	r3, #4
    3cc6:	50e5      	str	r5, [r4, r3]
    3cc8:	4b98      	ldr	r3, [pc, #608]	; (3f2c <fInit_6DOF_GY_KALMAN+0x300>)
    3cca:	50e5      	str	r5, [r4, r3]
    3ccc:	3304      	adds	r3, #4
    3cce:	50e5      	str	r5, [r4, r3]
    3cd0:	3308      	adds	r3, #8
    3cd2:	50e5      	str	r5, [r4, r3]
    3cd4:	4b96      	ldr	r3, [pc, #600]	; (3f30 <fInit_6DOF_GY_KALMAN+0x304>)
    3cd6:	50e5      	str	r5, [r4, r3]
    3cd8:	3304      	adds	r3, #4
    3cda:	50e5      	str	r5, [r4, r3]
    3cdc:	4b95      	ldr	r3, [pc, #596]	; (3f34 <fInit_6DOF_GY_KALMAN+0x308>)
    3cde:	50e5      	str	r5, [r4, r3]
    3ce0:	3304      	adds	r3, #4
    3ce2:	50e5      	str	r5, [r4, r3]
    3ce4:	4b94      	ldr	r3, [pc, #592]	; (3f38 <fInit_6DOF_GY_KALMAN+0x30c>)
    3ce6:	50e5      	str	r5, [r4, r3]
    3ce8:	3304      	adds	r3, #4
    3cea:	50e5      	str	r5, [r4, r3]
    3cec:	4b93      	ldr	r3, [pc, #588]	; (3f3c <fInit_6DOF_GY_KALMAN+0x310>)
    3cee:	50e5      	str	r5, [r4, r3]
    3cf0:	3304      	adds	r3, #4
    3cf2:	50e5      	str	r5, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:161
		}
	}
	pthisSV->fC3x9[0][6] = pthisSV->fC3x9[1][7] = pthisSV->fC3x9[2][8] = 1.0F;
    3cf4:	23fe      	movs	r3, #254	; 0xfe
    3cf6:	059b      	lsls	r3, r3, #22
    3cf8:	50a3      	str	r3, [r4, r2]
    3cfa:	4a91      	ldr	r2, [pc, #580]	; (3f40 <fInit_6DOF_GY_KALMAN+0x314>)
    3cfc:	50a3      	str	r3, [r4, r2]
    3cfe:	4a91      	ldr	r2, [pc, #580]	; (3f44 <fInit_6DOF_GY_KALMAN+0x318>)
    3d00:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:164

	// zero a posteriori orientation, error vector xe+ (thetae+, be+, ae+) and b+
	f3x3matrixAeqI(pthisSV->fRPl);
    3d02:	f008 fc5d 	bl	c5c0 <f3x3matrixAeqI>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:165
	fqAeq1(&(pthisSV->fqPl));
    3d06:	1c20      	adds	r0, r4, #0
    3d08:	3038      	adds	r0, #56	; 0x38
    3d0a:	f00b f9d9 	bl	f0c0 <fqAeq1>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:168
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = pthisSV->fbPl[i] = 0.0F;
    3d0e:	1c23      	adds	r3, r4, #0
    3d10:	3364      	adds	r3, #100	; 0x64
    3d12:	701e      	strb	r6, [r3, #0]
    3d14:	705e      	strb	r6, [r3, #1]
    3d16:	709e      	strb	r6, [r3, #2]
    3d18:	70de      	strb	r6, [r3, #3]
    3d1a:	711e      	strb	r6, [r3, #4]
    3d1c:	715e      	strb	r6, [r3, #5]
    3d1e:	719e      	strb	r6, [r3, #6]
    3d20:	71de      	strb	r6, [r3, #7]
    3d22:	721e      	strb	r6, [r3, #8]
    3d24:	725e      	strb	r6, [r3, #9]
    3d26:	729e      	strb	r6, [r3, #10]
    3d28:	72de      	strb	r6, [r3, #11]
    3d2a:	3380      	adds	r3, #128	; 0x80
    3d2c:	701e      	strb	r6, [r3, #0]
    3d2e:	705e      	strb	r6, [r3, #1]
    3d30:	709e      	strb	r6, [r3, #2]
    3d32:	70de      	strb	r6, [r3, #3]
    3d34:	711e      	strb	r6, [r3, #4]
    3d36:	715e      	strb	r6, [r3, #5]
    3d38:	719e      	strb	r6, [r3, #6]
    3d3a:	71de      	strb	r6, [r3, #7]
    3d3c:	721e      	strb	r6, [r3, #8]
    3d3e:	725e      	strb	r6, [r3, #9]
    3d40:	729e      	strb	r6, [r3, #10]
    3d42:	72de      	strb	r6, [r3, #11]
    3d44:	3b68      	subs	r3, #104	; 0x68
    3d46:	701e      	strb	r6, [r3, #0]
    3d48:	705e      	strb	r6, [r3, #1]
    3d4a:	709e      	strb	r6, [r3, #2]
    3d4c:	70de      	strb	r6, [r3, #3]
    3d4e:	711e      	strb	r6, [r3, #4]
    3d50:	715e      	strb	r6, [r3, #5]
    3d52:	719e      	strb	r6, [r3, #6]
    3d54:	71de      	strb	r6, [r3, #7]
    3d56:	721e      	strb	r6, [r3, #8]
    3d58:	725e      	strb	r6, [r3, #9]
    3d5a:	729e      	strb	r6, [r3, #10]
    3d5c:	72de      	strb	r6, [r3, #11]
    3d5e:	3b0c      	subs	r3, #12
    3d60:	701e      	strb	r6, [r3, #0]
    3d62:	705e      	strb	r6, [r3, #1]
    3d64:	709e      	strb	r6, [r3, #2]
    3d66:	70de      	strb	r6, [r3, #3]
    3d68:	711e      	strb	r6, [r3, #4]
    3d6a:	715e      	strb	r6, [r3, #5]
    3d6c:	719e      	strb	r6, [r3, #6]
    3d6e:	71de      	strb	r6, [r3, #7]
    3d70:	721e      	strb	r6, [r3, #8]
    3d72:	725e      	strb	r6, [r3, #9]
    3d74:	729e      	strb	r6, [r3, #10]
    3d76:	72de      	strb	r6, [r3, #11]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:173
	}

	// initialize noise variance for Qv and Qw matrix updates
	pthisSV->fQvAA = FQVA_6DOF_GY_KALMAN + FQWA_6DOF_GY_KALMAN + 
			FDEGTORAD * FDEGTORAD * pthisSV->fdeltatsq * (FQWB_6DOF_GY_KALMAN + FQVG_6DOF_GY_KALMAN);
    3d78:	464b      	mov	r3, r9
    3d7a:	4973      	ldr	r1, [pc, #460]	; (3f48 <fInit_6DOF_GY_KALMAN+0x31c>)
    3d7c:	58e0      	ldr	r0, [r4, r3]
    3d7e:	f7fd f8f9 	bl	f74 <__aeabi_fmul>
    3d82:	4641      	mov	r1, r8
    3d84:	f7fd f8f6 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:172
	{
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = pthisSV->fbPl[i] = 0.0F;
	}

	// initialize noise variance for Qv and Qw matrix updates
	pthisSV->fQvAA = FQVA_6DOF_GY_KALMAN + FQWA_6DOF_GY_KALMAN + 
    3d88:	4970      	ldr	r1, [pc, #448]	; (3f4c <fInit_6DOF_GY_KALMAN+0x320>)
    3d8a:	f7fc fd85 	bl	898 <__aeabi_fadd>
    3d8e:	238a      	movs	r3, #138	; 0x8a
    3d90:	005b      	lsls	r3, r3, #1
    3d92:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:182
	// zero the matrix Qw
	for (i = 0; i < 9; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fQw9x9[i][j] = 0.0F;
    3d94:	33b9      	adds	r3, #185	; 0xb9
    3d96:	33ff      	adds	r3, #255	; 0xff
    3d98:	50e5      	str	r5, [r4, r3]
    3d9a:	3304      	adds	r3, #4
    3d9c:	50e5      	str	r5, [r4, r3]
    3d9e:	3308      	adds	r3, #8
    3da0:	50e5      	str	r5, [r4, r3]
    3da2:	3304      	adds	r3, #4
    3da4:	50e5      	str	r5, [r4, r3]
    3da6:	3304      	adds	r3, #4
    3da8:	50e5      	str	r5, [r4, r3]
    3daa:	3304      	adds	r3, #4
    3dac:	50e5      	str	r5, [r4, r3]
    3dae:	3304      	adds	r3, #4
    3db0:	50e5      	str	r5, [r4, r3]
    3db2:	3304      	adds	r3, #4
    3db4:	50e5      	str	r5, [r4, r3]
    3db6:	3308      	adds	r3, #8
    3db8:	50e5      	str	r5, [r4, r3]
    3dba:	3304      	adds	r3, #4
    3dbc:	50e5      	str	r5, [r4, r3]
    3dbe:	3308      	adds	r3, #8
    3dc0:	50e5      	str	r5, [r4, r3]
    3dc2:	3304      	adds	r3, #4
    3dc4:	50e5      	str	r5, [r4, r3]
    3dc6:	3304      	adds	r3, #4
    3dc8:	50e5      	str	r5, [r4, r3]
    3dca:	3304      	adds	r3, #4
    3dcc:	50e5      	str	r5, [r4, r3]
    3dce:	3304      	adds	r3, #4
    3dd0:	50e5      	str	r5, [r4, r3]
    3dd2:	3304      	adds	r3, #4
    3dd4:	50e5      	str	r5, [r4, r3]
    3dd6:	3308      	adds	r3, #8
    3dd8:	50e5      	str	r5, [r4, r3]
    3dda:	3304      	adds	r3, #4
    3ddc:	50e5      	str	r5, [r4, r3]
    3dde:	3308      	adds	r3, #8
    3de0:	50e5      	str	r5, [r4, r3]
    3de2:	3304      	adds	r3, #4
    3de4:	50e5      	str	r5, [r4, r3]
    3de6:	3304      	adds	r3, #4
    3de8:	50e5      	str	r5, [r4, r3]
    3dea:	3308      	adds	r3, #8
    3dec:	50e5      	str	r5, [r4, r3]
    3dee:	3304      	adds	r3, #4
    3df0:	50e5      	str	r5, [r4, r3]
    3df2:	3308      	adds	r3, #8
    3df4:	50e5      	str	r5, [r4, r3]
    3df6:	3304      	adds	r3, #4
    3df8:	50e5      	str	r5, [r4, r3]
    3dfa:	3304      	adds	r3, #4
    3dfc:	50e5      	str	r5, [r4, r3]
    3dfe:	3304      	adds	r3, #4
    3e00:	50e5      	str	r5, [r4, r3]
    3e02:	3304      	adds	r3, #4
    3e04:	50e5      	str	r5, [r4, r3]
    3e06:	3304      	adds	r3, #4
    3e08:	50e5      	str	r5, [r4, r3]
    3e0a:	3308      	adds	r3, #8
    3e0c:	50e5      	str	r5, [r4, r3]
    3e0e:	3304      	adds	r3, #4
    3e10:	50e5      	str	r5, [r4, r3]
    3e12:	3308      	adds	r3, #8
    3e14:	50e5      	str	r5, [r4, r3]
    3e16:	3304      	adds	r3, #4
    3e18:	50e5      	str	r5, [r4, r3]
    3e1a:	3304      	adds	r3, #4
    3e1c:	50e5      	str	r5, [r4, r3]
    3e1e:	3304      	adds	r3, #4
    3e20:	50e5      	str	r5, [r4, r3]
    3e22:	3304      	adds	r3, #4
    3e24:	50e5      	str	r5, [r4, r3]
    3e26:	3304      	adds	r3, #4
    3e28:	50e5      	str	r5, [r4, r3]
    3e2a:	3308      	adds	r3, #8
    3e2c:	50e5      	str	r5, [r4, r3]
    3e2e:	3304      	adds	r3, #4
    3e30:	50e5      	str	r5, [r4, r3]
    3e32:	3308      	adds	r3, #8
    3e34:	50e5      	str	r5, [r4, r3]
    3e36:	3304      	adds	r3, #4
    3e38:	50e5      	str	r5, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:195
		// b_e * b_e terms
		pthisSV->fQw9x9[i + 3][i + 3] = FQWINITBB_6DOF_GY_KALMAN;
		// th_e * b_e terms
		pthisSV->fQw9x9[i][i + 3] = pthisSV->fQw9x9[i + 3][i] = FQWINITTHB_6DOF_GY_KALMAN;
		// a_e * a_e terms
		pthisSV->fQw9x9[i + 6][i + 6] = FQWINITAA_6DOF_GY_KALMAN;
    3e3a:	21ee      	movs	r1, #238	; 0xee
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:182
	// zero the matrix Qw
	for (i = 0; i < 9; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fQw9x9[i][j] = 0.0F;
    3e3c:	3304      	adds	r3, #4
    3e3e:	50e5      	str	r5, [r4, r3]
    3e40:	3304      	adds	r3, #4
    3e42:	50e5      	str	r5, [r4, r3]
    3e44:	3304      	adds	r3, #4
    3e46:	50e5      	str	r5, [r4, r3]
    3e48:	3304      	adds	r3, #4
    3e4a:	50e5      	str	r5, [r4, r3]
    3e4c:	3304      	adds	r3, #4
    3e4e:	50e5      	str	r5, [r4, r3]
    3e50:	3304      	adds	r3, #4
    3e52:	50e5      	str	r5, [r4, r3]
    3e54:	3304      	adds	r3, #4
    3e56:	50e5      	str	r5, [r4, r3]
    3e58:	3308      	adds	r3, #8
    3e5a:	50e5      	str	r5, [r4, r3]
    3e5c:	3304      	adds	r3, #4
    3e5e:	50e5      	str	r5, [r4, r3]
    3e60:	3304      	adds	r3, #4
    3e62:	50e5      	str	r5, [r4, r3]
    3e64:	3304      	adds	r3, #4
    3e66:	50e5      	str	r5, [r4, r3]
    3e68:	3304      	adds	r3, #4
    3e6a:	50e5      	str	r5, [r4, r3]
    3e6c:	3304      	adds	r3, #4
    3e6e:	50e5      	str	r5, [r4, r3]
    3e70:	3304      	adds	r3, #4
    3e72:	50e5      	str	r5, [r4, r3]
    3e74:	3304      	adds	r3, #4
    3e76:	50e5      	str	r5, [r4, r3]
    3e78:	3304      	adds	r3, #4
    3e7a:	50e5      	str	r5, [r4, r3]
    3e7c:	3308      	adds	r3, #8
    3e7e:	50e5      	str	r5, [r4, r3]
    3e80:	3304      	adds	r3, #4
    3e82:	50e5      	str	r5, [r4, r3]
    3e84:	3304      	adds	r3, #4
    3e86:	50e5      	str	r5, [r4, r3]
    3e88:	3304      	adds	r3, #4
    3e8a:	50e5      	str	r5, [r4, r3]
    3e8c:	3304      	adds	r3, #4
    3e8e:	50e5      	str	r5, [r4, r3]
    3e90:	3304      	adds	r3, #4
    3e92:	50e5      	str	r5, [r4, r3]
    3e94:	3304      	adds	r3, #4
    3e96:	50e5      	str	r5, [r4, r3]
    3e98:	3304      	adds	r3, #4
    3e9a:	50e5      	str	r5, [r4, r3]
    3e9c:	4b2c      	ldr	r3, [pc, #176]	; (3f50 <fInit_6DOF_GY_KALMAN+0x324>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:189
	}
	// loop over non-zero values
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw9x9[i][i] = FQWINITTHTH_6DOF_GY_KALMAN;
    3e9e:	4a2d      	ldr	r2, [pc, #180]	; (3f54 <fInit_6DOF_GY_KALMAN+0x328>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:182
	// zero the matrix Qw
	for (i = 0; i < 9; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fQw9x9[i][j] = 0.0F;
    3ea0:	50e5      	str	r5, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:189
	}
	// loop over non-zero values
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw9x9[i][i] = FQWINITTHTH_6DOF_GY_KALMAN;
    3ea2:	3b3d      	subs	r3, #61	; 0x3d
    3ea4:	3bff      	subs	r3, #255	; 0xff
    3ea6:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:191
		// b_e * b_e terms
		pthisSV->fQw9x9[i + 3][i + 3] = FQWINITBB_6DOF_GY_KALMAN;
    3ea8:	3378      	adds	r3, #120	; 0x78
    3eaa:	50e7      	str	r7, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:193
		// th_e * b_e terms
		pthisSV->fQw9x9[i][i + 3] = pthisSV->fQw9x9[i + 3][i] = FQWINITTHB_6DOF_GY_KALMAN;
    3eac:	3b0c      	subs	r3, #12
    3eae:	50e5      	str	r5, [r4, r3]
    3eb0:	3b60      	subs	r3, #96	; 0x60
    3eb2:	50e5      	str	r5, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:195
		// a_e * a_e terms
		pthisSV->fQw9x9[i + 6][i + 6] = FQWINITAA_6DOF_GY_KALMAN;
    3eb4:	4b28      	ldr	r3, [pc, #160]	; (3f58 <fInit_6DOF_GY_KALMAN+0x32c>)
    3eb6:	0089      	lsls	r1, r1, #2
    3eb8:	5063      	str	r3, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:189
	}
	// loop over non-zero values
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw9x9[i][i] = FQWINITTHTH_6DOF_GY_KALMAN;
    3eba:	39c8      	subs	r1, #200	; 0xc8
    3ebc:	5062      	str	r2, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:191
		// b_e * b_e terms
		pthisSV->fQw9x9[i + 3][i + 3] = FQWINITBB_6DOF_GY_KALMAN;
    3ebe:	3178      	adds	r1, #120	; 0x78
    3ec0:	5067      	str	r7, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:193
		// th_e * b_e terms
		pthisSV->fQw9x9[i][i + 3] = pthisSV->fQw9x9[i + 3][i] = FQWINITTHB_6DOF_GY_KALMAN;
    3ec2:	390c      	subs	r1, #12
    3ec4:	5065      	str	r5, [r4, r1]
    3ec6:	3960      	subs	r1, #96	; 0x60
    3ec8:	5065      	str	r5, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:195
		// a_e * a_e terms
		pthisSV->fQw9x9[i + 6][i + 6] = FQWINITAA_6DOF_GY_KALMAN;
    3eca:	31e4      	adds	r1, #228	; 0xe4
    3ecc:	5063      	str	r3, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:189
	}
	// loop over non-zero values
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw9x9[i][i] = FQWINITTHTH_6DOF_GY_KALMAN;
    3ece:	39c8      	subs	r1, #200	; 0xc8
    3ed0:	5062      	str	r2, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:191
		// b_e * b_e terms
		pthisSV->fQw9x9[i + 3][i + 3] = FQWINITBB_6DOF_GY_KALMAN;
    3ed2:	22e4      	movs	r2, #228	; 0xe4
    3ed4:	0092      	lsls	r2, r2, #2
    3ed6:	50a7      	str	r7, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:193
		// th_e * b_e terms
		pthisSV->fQw9x9[i][i + 3] = pthisSV->fQw9x9[i + 3][i] = FQWINITTHB_6DOF_GY_KALMAN;
    3ed8:	3a0c      	subs	r2, #12
    3eda:	50a5      	str	r5, [r4, r2]
    3edc:	3a60      	subs	r2, #96	; 0x60
    3ede:	50a5      	str	r5, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:195
		// a_e * a_e terms
		pthisSV->fQw9x9[i + 6][i + 6] = FQWINITAA_6DOF_GY_KALMAN;
    3ee0:	32e4      	adds	r2, #228	; 0xe4
    3ee2:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:199
	}

	// update the default quaternion type supported to the most sophisticated
	if (globals.DefaultQuaternionPacketType < Q6AG)
    3ee4:	4b1d      	ldr	r3, [pc, #116]	; (3f5c <fInit_6DOF_GY_KALMAN+0x330>)
    3ee6:	795a      	ldrb	r2, [r3, #5]
    3ee8:	2a03      	cmp	r2, #3
    3eea:	d802      	bhi.n	3ef2 <fInit_6DOF_GY_KALMAN+0x2c6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:200
		globals.QuaternionPacketType = globals.DefaultQuaternionPacketType = Q6AG; 
    3eec:	2204      	movs	r2, #4
    3eee:	715a      	strb	r2, [r3, #5]
    3ef0:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:203

	// clear the reset flag
	pthisSV->resetflag = false;
    3ef2:	2200      	movs	r2, #0
    3ef4:	4b1a      	ldr	r3, [pc, #104]	; (3f60 <fInit_6DOF_GY_KALMAN+0x334>)
    3ef6:	54e2      	strb	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:206

	return;
} // end fInit_6DOF_GY_KALMAN
    3ef8:	bc0c      	pop	{r2, r3}
    3efa:	4690      	mov	r8, r2
    3efc:	4699      	mov	r9, r3
    3efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f00:	0000048c 	.word	0x0000048c
    3f04:	0000047c 	.word	0x0000047c
    3f08:	00000484 	.word	0x00000484
    3f0c:	3e99999a 	.word	0x3e99999a
    3f10:	0000040c 	.word	0x0000040c
    3f14:	00000414 	.word	0x00000414
    3f18:	00000474 	.word	0x00000474
    3f1c:	0000041c 	.word	0x0000041c
    3f20:	0000042c 	.word	0x0000042c
    3f24:	00000434 	.word	0x00000434
    3f28:	0000043c 	.word	0x0000043c
    3f2c:	00000444 	.word	0x00000444
    3f30:	00000454 	.word	0x00000454
    3f34:	0000045c 	.word	0x0000045c
    3f38:	00000464 	.word	0x00000464
    3f3c:	0000046c 	.word	0x0000046c
    3f40:	0000044c 	.word	0x0000044c
    3f44:	00000424 	.word	0x00000424
    3f48:	399fb50f 	.word	0x399fb50f
    3f4c:	38d5e8d5 	.word	0x38d5e8d5
    3f50:	00000404 	.word	0x00000404
    3f54:	3ca3d70a 	.word	0x3ca3d70a
    3f58:	38d1b717 	.word	0x38d1b717
    3f5c:	200005dc 	.word	0x200005dc
    3f60:	0000048e 	.word	0x0000048e

00003f64 <fInit_9DOF_GBY_KALMAN>:
fInit_9DOF_GBY_KALMAN():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:210

// function initializes the 9DOF Kalman filter
void fInit_9DOF_GBY_KALMAN(struct SV_9DOF_GBY_KALMAN *pthisSV, int16 ithisCoordSystem, int16 iSensorFS, int16 iOverSampleRatio)
{
    3f64:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f66:	4647      	mov	r7, r8
    3f68:	b480      	push	{r7}
    3f6a:	1c0f      	adds	r7, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:214
	int8 i, j;				// loop counters

	// reset the flag denoting that a first 9DOF orientation lock has been achieved
	pthisSV->iFirstOrientationLock = 0;
    3f6c:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:210
	return;
} // end fInit_6DOF_GY_KALMAN

// function initializes the 9DOF Kalman filter
void fInit_9DOF_GBY_KALMAN(struct SV_9DOF_GBY_KALMAN *pthisSV, int16 ithisCoordSystem, int16 iSensorFS, int16 iOverSampleRatio)
{
    3f6e:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:214
	int8 i, j;				// loop counters

	// reset the flag denoting that a first 9DOF orientation lock has been achieved
	pthisSV->iFirstOrientationLock = 0;
    3f70:	4bfd      	ldr	r3, [pc, #1012]	; (4368 <PSP_CNFG_FP_REGISTERS_EXIST+0x368>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:210
	return;
} // end fInit_6DOF_GY_KALMAN

// function initializes the 9DOF Kalman filter
void fInit_9DOF_GBY_KALMAN(struct SV_9DOF_GBY_KALMAN *pthisSV, int16 ithisCoordSystem, int16 iSensorFS, int16 iOverSampleRatio)
{
    3f72:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:214
	int8 i, j;				// loop counters

	// reset the flag denoting that a first 9DOF orientation lock has been achieved
	pthisSV->iFirstOrientationLock = 0;
    3f74:	52c1      	strh	r1, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:217

	// compute and store useful product terms to save floating point calculations later
	pthisSV->fFastdeltat = 1.0F / (float) iSensorFS;
    3f76:	1c10      	adds	r0, r2, #0
    3f78:	f7fd facc 	bl	1514 <__aeabi_i2f>
    3f7c:	1c01      	adds	r1, r0, #0
    3f7e:	20fe      	movs	r0, #254	; 0xfe
    3f80:	0580      	lsls	r0, r0, #22
    3f82:	f7fc fe05 	bl	b90 <__aeabi_fdiv>
    3f86:	4bf9      	ldr	r3, [pc, #996]	; (436c <PSP_CNFG_FP_REGISTERS_EXIST+0x36c>)
    3f88:	1c05      	adds	r5, r0, #0
    3f8a:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:218
	pthisSV->fdeltat = (float) iOverSampleRatio * pthisSV->fFastdeltat;
    3f8c:	4640      	mov	r0, r8
    3f8e:	f7fd fac1 	bl	1514 <__aeabi_i2f>
    3f92:	1c01      	adds	r1, r0, #0
    3f94:	1c28      	adds	r0, r5, #0
    3f96:	f7fc ffed 	bl	f74 <__aeabi_fmul>
    3f9a:	4bf5      	ldr	r3, [pc, #980]	; (4370 <PSP_CNFG_FP_REGISTERS_EXIST+0x370>)
    3f9c:	1c01      	adds	r1, r0, #0
    3f9e:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:219
	pthisSV->fdeltatsq = pthisSV->fdeltat * pthisSV->fdeltat;
    3fa0:	f7fc ffe8 	bl	f74 <__aeabi_fmul>
    3fa4:	4bf3      	ldr	r3, [pc, #972]	; (4374 <PSP_CNFG_FP_REGISTERS_EXIST+0x374>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:220
	pthisSV->fcasq = FCA_9DOF_GBY_KALMAN * FCA_9DOF_GBY_KALMAN;
    3fa6:	4af4      	ldr	r2, [pc, #976]	; (4378 <PSP_CNFG_FP_REGISTERS_EXIST+0x378>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:219
	pthisSV->iFirstOrientationLock = 0;

	// compute and store useful product terms to save floating point calculations later
	pthisSV->fFastdeltat = 1.0F / (float) iSensorFS;
	pthisSV->fdeltat = (float) iOverSampleRatio * pthisSV->fFastdeltat;
	pthisSV->fdeltatsq = pthisSV->fdeltat * pthisSV->fdeltat;
    3fa8:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:220
	pthisSV->fcasq = FCA_9DOF_GBY_KALMAN * FCA_9DOF_GBY_KALMAN;
    3faa:	23fa      	movs	r3, #250	; 0xfa
    3fac:	059b      	lsls	r3, r3, #22
    3fae:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:221
	pthisSV->fcdsq = FCD_9DOF_GBY_KALMAN * FCD_9DOF_GBY_KALMAN;
    3fb0:	3204      	adds	r2, #4
    3fb2:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:222
	pthisSV->fQwbplusQvG = FQWB_9DOF_GBY_KALMAN + FQVG_9DOF_GBY_KALMAN;
    3fb4:	2383      	movs	r3, #131	; 0x83
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:229
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 6; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fC6x12[i][j]= 0.0F;
    3fb6:	2500      	movs	r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:222
	pthisSV->fFastdeltat = 1.0F / (float) iSensorFS;
	pthisSV->fdeltat = (float) iOverSampleRatio * pthisSV->fFastdeltat;
	pthisSV->fdeltatsq = pthisSV->fdeltat * pthisSV->fdeltat;
	pthisSV->fcasq = FCA_9DOF_GBY_KALMAN * FCA_9DOF_GBY_KALMAN;
	pthisSV->fcdsq = FCD_9DOF_GBY_KALMAN * FCD_9DOF_GBY_KALMAN;
	pthisSV->fQwbplusQvG = FQWB_9DOF_GBY_KALMAN + FQVG_9DOF_GBY_KALMAN;
    3fb8:	4af0      	ldr	r2, [pc, #960]	; (437c <PSP_CNFG_FP_REGISTERS_EXIST+0x37c>)
    3fba:	011b      	lsls	r3, r3, #4
    3fbc:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:229
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 6; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fC6x12[i][j]= 0.0F;
    3fbe:	3b79      	subs	r3, #121	; 0x79
    3fc0:	3bff      	subs	r3, #255	; 0xff
    3fc2:	50e5      	str	r5, [r4, r3]
    3fc4:	4bee      	ldr	r3, [pc, #952]	; (4380 <PSP_CNFG_FP_REGISTERS_EXIST+0x380>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:232
		}
	}
	pthisSV->fC6x12[0][6] = pthisSV->fC6x12[1][7] = pthisSV->fC6x12[2][8] = 1.0F; 
    3fc6:	22e7      	movs	r2, #231	; 0xe7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:229
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 6; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fC6x12[i][j]= 0.0F;
    3fc8:	50e5      	str	r5, [r4, r3]
    3fca:	3304      	adds	r3, #4
    3fcc:	50e5      	str	r5, [r4, r3]
    3fce:	4bed      	ldr	r3, [pc, #948]	; (4384 <PSP_CNFG_FP_REGISTERS_EXIST+0x384>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:236
	}
	pthisSV->fC6x12[0][6] = pthisSV->fC6x12[1][7] = pthisSV->fC6x12[2][8] = 1.0F; 
	pthisSV->fC6x12[3][9] = pthisSV->fC6x12[4][10] = pthisSV->fC6x12[5][11] = -1.0F; 

	// zero a posteriori orientation, error vector xe+ (thetae+, be+, de+, ae+) and b+ and inertial
	f3x3matrixAeqI(pthisSV->fRPl);
    3fd0:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:229
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 6; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fC6x12[i][j]= 0.0F;
    3fd2:	50e5      	str	r5, [r4, r3]
    3fd4:	3304      	adds	r3, #4
    3fd6:	50e5      	str	r5, [r4, r3]
    3fd8:	4beb      	ldr	r3, [pc, #940]	; (4388 <PSP_CNFG_FP_REGISTERS_EXIST+0x388>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:232
		}
	}
	pthisSV->fC6x12[0][6] = pthisSV->fC6x12[1][7] = pthisSV->fC6x12[2][8] = 1.0F; 
    3fda:	00d2      	lsls	r2, r2, #3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:229
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 6; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fC6x12[i][j]= 0.0F;
    3fdc:	50e5      	str	r5, [r4, r3]
    3fde:	4beb      	ldr	r3, [pc, #940]	; (438c <PSP_CNFG_FP_REGISTERS_EXIST+0x38c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:236
	}
	pthisSV->fC6x12[0][6] = pthisSV->fC6x12[1][7] = pthisSV->fC6x12[2][8] = 1.0F; 
	pthisSV->fC6x12[3][9] = pthisSV->fC6x12[4][10] = pthisSV->fC6x12[5][11] = -1.0F; 

	// zero a posteriori orientation, error vector xe+ (thetae+, be+, de+, ae+) and b+ and inertial
	f3x3matrixAeqI(pthisSV->fRPl);
    3fe0:	3014      	adds	r0, #20
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:229
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 6; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fC6x12[i][j]= 0.0F;
    3fe2:	50e5      	str	r5, [r4, r3]
    3fe4:	3304      	adds	r3, #4
    3fe6:	50e5      	str	r5, [r4, r3]
    3fe8:	4be9      	ldr	r3, [pc, #932]	; (4390 <PSP_CNFG_FP_REGISTERS_EXIST+0x390>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:214
void fInit_9DOF_GBY_KALMAN(struct SV_9DOF_GBY_KALMAN *pthisSV, int16 ithisCoordSystem, int16 iSensorFS, int16 iOverSampleRatio)
{
	int8 i, j;				// loop counters

	// reset the flag denoting that a first 9DOF orientation lock has been achieved
	pthisSV->iFirstOrientationLock = 0;
    3fea:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:229
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 6; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fC6x12[i][j]= 0.0F;
    3fec:	50e5      	str	r5, [r4, r3]
    3fee:	3304      	adds	r3, #4
    3ff0:	50e5      	str	r5, [r4, r3]
    3ff2:	4be8      	ldr	r3, [pc, #928]	; (4394 <PSP_CNFG_FP_REGISTERS_EXIST+0x394>)
    3ff4:	50e5      	str	r5, [r4, r3]
    3ff6:	3304      	adds	r3, #4
    3ff8:	50e5      	str	r5, [r4, r3]
    3ffa:	4be7      	ldr	r3, [pc, #924]	; (4398 <PSP_CNFG_FP_REGISTERS_EXIST+0x398>)
    3ffc:	50e5      	str	r5, [r4, r3]
    3ffe:	3304      	adds	r3, #4
    4000:	50e5      	str	r5, [r4, r3]
    4002:	4be6      	ldr	r3, [pc, #920]	; (439c <PSP_CNFG_FP_REGISTERS_EXIST+0x39c>)
    4004:	50e5      	str	r5, [r4, r3]
    4006:	3304      	adds	r3, #4
    4008:	50e5      	str	r5, [r4, r3]
    400a:	4be5      	ldr	r3, [pc, #916]	; (43a0 <PSP_CNFG_FP_REGISTERS_EXIST+0x3a0>)
    400c:	50e5      	str	r5, [r4, r3]
    400e:	3304      	adds	r3, #4
    4010:	50e5      	str	r5, [r4, r3]
    4012:	3308      	adds	r3, #8
    4014:	50e5      	str	r5, [r4, r3]
    4016:	4be3      	ldr	r3, [pc, #908]	; (43a4 <PSP_CNFG_FP_REGISTERS_EXIST+0x3a4>)
    4018:	50e5      	str	r5, [r4, r3]
    401a:	3304      	adds	r3, #4
    401c:	50e5      	str	r5, [r4, r3]
    401e:	4be2      	ldr	r3, [pc, #904]	; (43a8 <PSP_CNFG_FP_REGISTERS_EXIST+0x3a8>)
    4020:	50e5      	str	r5, [r4, r3]
    4022:	3304      	adds	r3, #4
    4024:	50e5      	str	r5, [r4, r3]
    4026:	4be1      	ldr	r3, [pc, #900]	; (43ac <PSP_CNFG_FP_REGISTERS_EXIST+0x3ac>)
    4028:	50e5      	str	r5, [r4, r3]
    402a:	3304      	adds	r3, #4
    402c:	50e5      	str	r5, [r4, r3]
    402e:	4be0      	ldr	r3, [pc, #896]	; (43b0 <PSP_CNFG_FP_REGISTERS_EXIST+0x3b0>)
    4030:	50e5      	str	r5, [r4, r3]
    4032:	3304      	adds	r3, #4
    4034:	50e5      	str	r5, [r4, r3]
    4036:	4bdf      	ldr	r3, [pc, #892]	; (43b4 <PSP_CNFG_FP_REGISTERS_EXIST+0x3b4>)
    4038:	50e5      	str	r5, [r4, r3]
    403a:	3304      	adds	r3, #4
    403c:	50e5      	str	r5, [r4, r3]
    403e:	4bde      	ldr	r3, [pc, #888]	; (43b8 <PSP_CNFG_FP_REGISTERS_EXIST+0x3b8>)
    4040:	50e5      	str	r5, [r4, r3]
    4042:	4bde      	ldr	r3, [pc, #888]	; (43bc <PSP_CNFG_FP_REGISTERS_EXIST+0x3bc>)
    4044:	50e5      	str	r5, [r4, r3]
    4046:	3304      	adds	r3, #4
    4048:	50e5      	str	r5, [r4, r3]
    404a:	4bdd      	ldr	r3, [pc, #884]	; (43c0 <PSP_CNFG_FP_REGISTERS_EXIST+0x3c0>)
    404c:	50e5      	str	r5, [r4, r3]
    404e:	3304      	adds	r3, #4
    4050:	50e5      	str	r5, [r4, r3]
    4052:	4bdc      	ldr	r3, [pc, #880]	; (43c4 <PSP_CNFG_FP_REGISTERS_EXIST+0x3c4>)
    4054:	50e5      	str	r5, [r4, r3]
    4056:	3304      	adds	r3, #4
    4058:	50e5      	str	r5, [r4, r3]
    405a:	4bdb      	ldr	r3, [pc, #876]	; (43c8 <PSP_CNFG_FP_REGISTERS_EXIST+0x3c8>)
    405c:	50e5      	str	r5, [r4, r3]
    405e:	3304      	adds	r3, #4
    4060:	50e5      	str	r5, [r4, r3]
    4062:	4bda      	ldr	r3, [pc, #872]	; (43cc <PSP_CNFG_FP_REGISTERS_EXIST+0x3cc>)
    4064:	50e5      	str	r5, [r4, r3]
    4066:	3304      	adds	r3, #4
    4068:	50e5      	str	r5, [r4, r3]
    406a:	4bd9      	ldr	r3, [pc, #868]	; (43d0 <PSP_CNFG_FP_REGISTERS_EXIST+0x3d0>)
    406c:	50e5      	str	r5, [r4, r3]
    406e:	3304      	adds	r3, #4
    4070:	50e5      	str	r5, [r4, r3]
    4072:	3308      	adds	r3, #8
    4074:	50e5      	str	r5, [r4, r3]
    4076:	4bd7      	ldr	r3, [pc, #860]	; (43d4 <PSP_CNFG_FP_REGISTERS_EXIST+0x3d4>)
    4078:	50e5      	str	r5, [r4, r3]
    407a:	3304      	adds	r3, #4
    407c:	50e5      	str	r5, [r4, r3]
    407e:	4bd6      	ldr	r3, [pc, #856]	; (43d8 <PSP_CNFG_FP_REGISTERS_EXIST+0x3d8>)
    4080:	50e5      	str	r5, [r4, r3]
    4082:	3304      	adds	r3, #4
    4084:	50e5      	str	r5, [r4, r3]
    4086:	4bd5      	ldr	r3, [pc, #852]	; (43dc <PSP_CNFG_FP_REGISTERS_EXIST+0x3dc>)
    4088:	50e5      	str	r5, [r4, r3]
    408a:	3304      	adds	r3, #4
    408c:	50e5      	str	r5, [r4, r3]
    408e:	4bd4      	ldr	r3, [pc, #848]	; (43e0 <PSP_CNFG_FP_REGISTERS_EXIST+0x3e0>)
    4090:	50e5      	str	r5, [r4, r3]
    4092:	3304      	adds	r3, #4
    4094:	50e5      	str	r5, [r4, r3]
    4096:	4bd3      	ldr	r3, [pc, #844]	; (43e4 <PSP_CNFG_FP_REGISTERS_EXIST+0x3e4>)
    4098:	50e5      	str	r5, [r4, r3]
    409a:	3304      	adds	r3, #4
    409c:	50e5      	str	r5, [r4, r3]
    409e:	4bd2      	ldr	r3, [pc, #840]	; (43e8 <PSP_CNFG_FP_REGISTERS_EXIST+0x3e8>)
    40a0:	50e5      	str	r5, [r4, r3]
    40a2:	4bd2      	ldr	r3, [pc, #840]	; (43ec <PSP_CNFG_FP_REGISTERS_EXIST+0x3ec>)
    40a4:	50e5      	str	r5, [r4, r3]
    40a6:	3304      	adds	r3, #4
    40a8:	50e5      	str	r5, [r4, r3]
    40aa:	4bd1      	ldr	r3, [pc, #836]	; (43f0 <PSP_CNFG_FP_REGISTERS_EXIST+0x3f0>)
    40ac:	50e5      	str	r5, [r4, r3]
    40ae:	3304      	adds	r3, #4
    40b0:	50e5      	str	r5, [r4, r3]
    40b2:	4bd0      	ldr	r3, [pc, #832]	; (43f4 <PSP_CNFG_FP_REGISTERS_EXIST+0x3f4>)
    40b4:	50e5      	str	r5, [r4, r3]
    40b6:	3304      	adds	r3, #4
    40b8:	50e5      	str	r5, [r4, r3]
    40ba:	4bcf      	ldr	r3, [pc, #828]	; (43f8 <PSP_CNFG_FP_REGISTERS_EXIST+0x3f8>)
    40bc:	50e5      	str	r5, [r4, r3]
    40be:	3304      	adds	r3, #4
    40c0:	50e5      	str	r5, [r4, r3]
    40c2:	4bce      	ldr	r3, [pc, #824]	; (43fc <PSP_CNFG_FP_REGISTERS_EXIST+0x3fc>)
    40c4:	50e5      	str	r5, [r4, r3]
    40c6:	3304      	adds	r3, #4
    40c8:	50e5      	str	r5, [r4, r3]
    40ca:	4bcd      	ldr	r3, [pc, #820]	; (4400 <PSP_CNFG_FP_REGISTERS_EXIST+0x400>)
    40cc:	50e5      	str	r5, [r4, r3]
    40ce:	3304      	adds	r3, #4
    40d0:	50e5      	str	r5, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:232
		}
	}
	pthisSV->fC6x12[0][6] = pthisSV->fC6x12[1][7] = pthisSV->fC6x12[2][8] = 1.0F; 
    40d2:	23fe      	movs	r3, #254	; 0xfe
    40d4:	059b      	lsls	r3, r3, #22
    40d6:	50a3      	str	r3, [r4, r2]
    40d8:	4aca      	ldr	r2, [pc, #808]	; (4404 <PSP_CNFG_FP_REGISTERS_EXIST+0x404>)
    40da:	50a3      	str	r3, [r4, r2]
    40dc:	3a34      	subs	r2, #52	; 0x34
    40de:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:233
	pthisSV->fC6x12[3][9] = pthisSV->fC6x12[4][10] = pthisSV->fC6x12[5][11] = -1.0F; 
    40e0:	4bc9      	ldr	r3, [pc, #804]	; (4408 <PSP_CNFG_FP_REGISTERS_EXIST+0x408>)
    40e2:	4aca      	ldr	r2, [pc, #808]	; (440c <PSP_CNFG_FP_REGISTERS_EXIST+0x40c>)
    40e4:	50a3      	str	r3, [r4, r2]
    40e6:	3a34      	subs	r2, #52	; 0x34
    40e8:	50a3      	str	r3, [r4, r2]
    40ea:	4ac9      	ldr	r2, [pc, #804]	; (4410 <PSP_CNFG_FP_REGISTERS_EXIST+0x410>)
    40ec:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:236

	// zero a posteriori orientation, error vector xe+ (thetae+, be+, de+, ae+) and b+ and inertial
	f3x3matrixAeqI(pthisSV->fRPl);
    40ee:	f008 fa67 	bl	c5c0 <f3x3matrixAeqI>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:237
	fqAeq1(&(pthisSV->fqPl));
    40f2:	1c20      	adds	r0, r4, #0
    40f4:	3038      	adds	r0, #56	; 0x38
    40f6:	f00a ffe3 	bl	f0c0 <fqAeq1>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:240
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = pthisSV->fdErrSePl[i] = pthisSV->fbPl[i] = 0.0F;
    40fa:	1c23      	adds	r3, r4, #0
    40fc:	3364      	adds	r3, #100	; 0x64
    40fe:	701e      	strb	r6, [r3, #0]
    4100:	705e      	strb	r6, [r3, #1]
    4102:	709e      	strb	r6, [r3, #2]
    4104:	70de      	strb	r6, [r3, #3]
    4106:	711e      	strb	r6, [r3, #4]
    4108:	715e      	strb	r6, [r3, #5]
    410a:	719e      	strb	r6, [r3, #6]
    410c:	71de      	strb	r6, [r3, #7]
    410e:	721e      	strb	r6, [r3, #8]
    4110:	725e      	strb	r6, [r3, #9]
    4112:	729e      	strb	r6, [r3, #10]
    4114:	72de      	strb	r6, [r3, #11]
    4116:	3330      	adds	r3, #48	; 0x30
    4118:	701e      	strb	r6, [r3, #0]
    411a:	705e      	strb	r6, [r3, #1]
    411c:	709e      	strb	r6, [r3, #2]
    411e:	70de      	strb	r6, [r3, #3]
    4120:	711e      	strb	r6, [r3, #4]
    4122:	715e      	strb	r6, [r3, #5]
    4124:	719e      	strb	r6, [r3, #6]
    4126:	71de      	strb	r6, [r3, #7]
    4128:	721e      	strb	r6, [r3, #8]
    412a:	725e      	strb	r6, [r3, #9]
    412c:	729e      	strb	r6, [r3, #10]
    412e:	72de      	strb	r6, [r3, #11]
    4130:	731e      	strb	r6, [r3, #12]
    4132:	735e      	strb	r6, [r3, #13]
    4134:	739e      	strb	r6, [r3, #14]
    4136:	73de      	strb	r6, [r3, #15]
    4138:	741e      	strb	r6, [r3, #16]
    413a:	745e      	strb	r6, [r3, #17]
    413c:	749e      	strb	r6, [r3, #18]
    413e:	74de      	strb	r6, [r3, #19]
    4140:	751e      	strb	r6, [r3, #20]
    4142:	755e      	strb	r6, [r3, #21]
    4144:	759e      	strb	r6, [r3, #22]
    4146:	75de      	strb	r6, [r3, #23]
    4148:	3b18      	subs	r3, #24
    414a:	701e      	strb	r6, [r3, #0]
    414c:	705e      	strb	r6, [r3, #1]
    414e:	709e      	strb	r6, [r3, #2]
    4150:	70de      	strb	r6, [r3, #3]
    4152:	711e      	strb	r6, [r3, #4]
    4154:	715e      	strb	r6, [r3, #5]
    4156:	719e      	strb	r6, [r3, #6]
    4158:	71de      	strb	r6, [r3, #7]
    415a:	721e      	strb	r6, [r3, #8]
    415c:	725e      	strb	r6, [r3, #9]
    415e:	729e      	strb	r6, [r3, #10]
    4160:	72de      	strb	r6, [r3, #11]
    4162:	3b0c      	subs	r3, #12
    4164:	701e      	strb	r6, [r3, #0]
    4166:	705e      	strb	r6, [r3, #1]
    4168:	709e      	strb	r6, [r3, #2]
    416a:	70de      	strb	r6, [r3, #3]
    416c:	711e      	strb	r6, [r3, #4]
    416e:	715e      	strb	r6, [r3, #5]
    4170:	719e      	strb	r6, [r3, #6]
    4172:	71de      	strb	r6, [r3, #7]
    4174:	721e      	strb	r6, [r3, #8]
    4176:	725e      	strb	r6, [r3, #9]
    4178:	729e      	strb	r6, [r3, #10]
    417a:	72de      	strb	r6, [r3, #11]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:244
	}

	// initialize the reference geomagnetic vector (uT, global frame)
	pthisSV->fDeltaPl = 0.0F;
    417c:	23b8      	movs	r3, #184	; 0xb8
    417e:	50e5      	str	r5, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:245
	if (ithisCoordSystem == NED)
    4180:	2f00      	cmp	r7, #0
    4182:	d000      	beq.n	4186 <PSP_CNFG_FP_REGISTERS_EXIST+0x186>
    4184:	e224      	b.n	45d0 <PSP_CNFG_FP_REGISTERS_EXIST+0x5d0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:248
	{
		// initialize NED geomagnetic vector to zero degrees inclination
		pthisSV->fmGl[X] = DEFAULTB;
    4186:	4aa3      	ldr	r2, [pc, #652]	; (4414 <PSP_CNFG_FP_REGISTERS_EXIST+0x414>)
    4188:	334c      	adds	r3, #76	; 0x4c
    418a:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:249
		pthisSV->fmGl[Y] = 0.0F;
    418c:	3304      	adds	r3, #4
    418e:	50e5      	str	r5, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:250
		pthisSV->fmGl[Z] = 0.0F;
    4190:	3304      	adds	r3, #4
    4192:	50e5      	str	r5, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:261
		pthisSV->fmGl[Y] = DEFAULTB;
		pthisSV->fmGl[Z] = 0.0F;
	}

	// initialize noise variances for Qv and Qw matrix updates
	pthisSV->fQvAA = FQVA_9DOF_GBY_KALMAN + FQWA_9DOF_GBY_KALMAN + FDEGTORAD * FDEGTORAD * pthisSV->fdeltatsq * (FQWB_9DOF_GBY_KALMAN + FQVG_9DOF_GBY_KALMAN);
    4194:	4b77      	ldr	r3, [pc, #476]	; (4374 <PSP_CNFG_FP_REGISTERS_EXIST+0x374>)
    4196:	49a0      	ldr	r1, [pc, #640]	; (4418 <PSP_CNFG_FP_REGISTERS_EXIST+0x418>)
    4198:	58e0      	ldr	r0, [r4, r3]
    419a:	f7fc feeb 	bl	f74 <__aeabi_fmul>
    419e:	4977      	ldr	r1, [pc, #476]	; (437c <PSP_CNFG_FP_REGISTERS_EXIST+0x37c>)
    41a0:	1c05      	adds	r5, r0, #0
    41a2:	f7fc fee7 	bl	f74 <__aeabi_fmul>
    41a6:	499d      	ldr	r1, [pc, #628]	; (441c <PSP_CNFG_FP_REGISTERS_EXIST+0x41c>)
    41a8:	f7fc fb76 	bl	898 <__aeabi_fadd>
    41ac:	2388      	movs	r3, #136	; 0x88
    41ae:	005b      	lsls	r3, r3, #1
    41b0:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:262
	pthisSV->fQvMM = FQVM_9DOF_GBY_KALMAN + FQWD_9DOF_GBY_KALMAN + FDEGTORAD * FDEGTORAD * pthisSV->fdeltatsq * DEFAULTB * DEFAULTB * (FQWB_9DOF_GBY_KALMAN + FQVG_9DOF_GBY_KALMAN);
    41b2:	4998      	ldr	r1, [pc, #608]	; (4414 <PSP_CNFG_FP_REGISTERS_EXIST+0x414>)
    41b4:	1c28      	adds	r0, r5, #0
    41b6:	f7fc fedd 	bl	f74 <__aeabi_fmul>
    41ba:	4996      	ldr	r1, [pc, #600]	; (4414 <PSP_CNFG_FP_REGISTERS_EXIST+0x414>)
    41bc:	f7fc feda 	bl	f74 <__aeabi_fmul>
    41c0:	496e      	ldr	r1, [pc, #440]	; (437c <PSP_CNFG_FP_REGISTERS_EXIST+0x37c>)
    41c2:	f7fc fed7 	bl	f74 <__aeabi_fmul>
    41c6:	4996      	ldr	r1, [pc, #600]	; (4420 <PSP_CNFG_FP_REGISTERS_EXIST+0x420>)
    41c8:	f7fc fb66 	bl	898 <__aeabi_fadd>
    41cc:	238a      	movs	r3, #138	; 0x8a
    41ce:	005b      	lsls	r3, r3, #1
    41d0:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:271
	// zero the matrix Qw
	for (i = 0; i < 12; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fQw12x12[i][j] = 0.0F;
    41d2:	2300      	movs	r3, #0
    41d4:	4a93      	ldr	r2, [pc, #588]	; (4424 <PSP_CNFG_FP_REGISTERS_EXIST+0x424>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:280
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw12x12[i][i] = FQWINITTHTH_9DOF_GBY_KALMAN;
		// b_e * b_e terms
		pthisSV->fQw12x12[i + 3][i + 3] = FQWINITBB_9DOF_GBY_KALMAN;
    41d6:	20fa      	movs	r0, #250	; 0xfa
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:271
	// zero the matrix Qw
	for (i = 0; i < 12; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fQw12x12[i][j] = 0.0F;
    41d8:	50a3      	str	r3, [r4, r2]
    41da:	3204      	adds	r2, #4
    41dc:	50a3      	str	r3, [r4, r2]
    41de:	3208      	adds	r2, #8
    41e0:	50a3      	str	r3, [r4, r2]
    41e2:	4a91      	ldr	r2, [pc, #580]	; (4428 <PSP_CNFG_FP_REGISTERS_EXIST+0x428>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:278
	}
	// loop over non-zero values
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw12x12[i][i] = FQWINITTHTH_9DOF_GBY_KALMAN;
    41e4:	4d91      	ldr	r5, [pc, #580]	; (442c <PSP_CNFG_FP_REGISTERS_EXIST+0x42c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:271
	// zero the matrix Qw
	for (i = 0; i < 12; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fQw12x12[i][j] = 0.0F;
    41e6:	50a3      	str	r3, [r4, r2]
    41e8:	3204      	adds	r2, #4
    41ea:	50a3      	str	r3, [r4, r2]
    41ec:	4a90      	ldr	r2, [pc, #576]	; (4430 <PSP_CNFG_FP_REGISTERS_EXIST+0x430>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:280
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw12x12[i][i] = FQWINITTHTH_9DOF_GBY_KALMAN;
		// b_e * b_e terms
		pthisSV->fQw12x12[i + 3][i + 3] = FQWINITBB_9DOF_GBY_KALMAN;
    41ee:	0580      	lsls	r0, r0, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:271
	// zero the matrix Qw
	for (i = 0; i < 12; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fQw12x12[i][j] = 0.0F;
    41f0:	50a3      	str	r3, [r4, r2]
    41f2:	3204      	adds	r2, #4
    41f4:	50a3      	str	r3, [r4, r2]
    41f6:	4a8f      	ldr	r2, [pc, #572]	; (4434 <PSP_CNFG_FP_REGISTERS_EXIST+0x434>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:284
		// b_e * b_e terms
		pthisSV->fQw12x12[i + 3][i + 3] = FQWINITBB_9DOF_GBY_KALMAN;
		// th_e * b_e terms
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = FQWINITTHB_9DOF_GBY_KALMAN;
		// a_e * a_e terms
		pthisSV->fQw12x12[i + 6][i + 6] = FQWINITAA_9DOF_GBY_KALMAN;
    41f8:	498f      	ldr	r1, [pc, #572]	; (4438 <PSP_CNFG_FP_REGISTERS_EXIST+0x438>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:271
	// zero the matrix Qw
	for (i = 0; i < 12; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fQw12x12[i][j] = 0.0F;
    41fa:	50a3      	str	r3, [r4, r2]
    41fc:	3204      	adds	r2, #4
    41fe:	50a3      	str	r3, [r4, r2]
    4200:	4a8e      	ldr	r2, [pc, #568]	; (443c <PSP_CNFG_FP_REGISTERS_EXIST+0x43c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:286
		// th_e * b_e terms
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = FQWINITTHB_9DOF_GBY_KALMAN;
		// a_e * a_e terms
		pthisSV->fQw12x12[i + 6][i + 6] = FQWINITAA_9DOF_GBY_KALMAN;
		// d_e * d_e terms
		pthisSV->fQw12x12[i + 9][i + 9] = FQWINITDD_9DOF_GBY_KALMAN;
    4202:	4e8f      	ldr	r6, [pc, #572]	; (4440 <PSP_CNFG_FP_REGISTERS_EXIST+0x440>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:271
	// zero the matrix Qw
	for (i = 0; i < 12; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fQw12x12[i][j] = 0.0F;
    4204:	50a3      	str	r3, [r4, r2]
    4206:	3204      	adds	r2, #4
    4208:	50a3      	str	r3, [r4, r2]
    420a:	3208      	adds	r2, #8
    420c:	50a3      	str	r3, [r4, r2]
    420e:	4a8d      	ldr	r2, [pc, #564]	; (4444 <PSP_CNFG_FP_REGISTERS_EXIST+0x444>)
    4210:	50a3      	str	r3, [r4, r2]
    4212:	4a8d      	ldr	r2, [pc, #564]	; (4448 <PSP_CNFG_FP_REGISTERS_EXIST+0x448>)
    4214:	50a3      	str	r3, [r4, r2]
    4216:	3204      	adds	r2, #4
    4218:	50a3      	str	r3, [r4, r2]
    421a:	4a8c      	ldr	r2, [pc, #560]	; (444c <PSP_CNFG_FP_REGISTERS_EXIST+0x44c>)
    421c:	50a3      	str	r3, [r4, r2]
    421e:	3204      	adds	r2, #4
    4220:	50a3      	str	r3, [r4, r2]
    4222:	4a8b      	ldr	r2, [pc, #556]	; (4450 <PSP_CNFG_FP_REGISTERS_EXIST+0x450>)
    4224:	50a3      	str	r3, [r4, r2]
    4226:	3204      	adds	r2, #4
    4228:	50a3      	str	r3, [r4, r2]
    422a:	4a8a      	ldr	r2, [pc, #552]	; (4454 <PSP_CNFG_FP_REGISTERS_EXIST+0x454>)
    422c:	50a3      	str	r3, [r4, r2]
    422e:	3204      	adds	r2, #4
    4230:	50a3      	str	r3, [r4, r2]
    4232:	4a89      	ldr	r2, [pc, #548]	; (4458 <PSP_CNFG_FP_REGISTERS_EXIST+0x458>)
    4234:	50a3      	str	r3, [r4, r2]
    4236:	4a89      	ldr	r2, [pc, #548]	; (445c <PSP_CNFG_FP_REGISTERS_EXIST+0x45c>)
    4238:	50a3      	str	r3, [r4, r2]
    423a:	3204      	adds	r2, #4
    423c:	50a3      	str	r3, [r4, r2]
    423e:	3208      	adds	r2, #8
    4240:	50a3      	str	r3, [r4, r2]
    4242:	4a87      	ldr	r2, [pc, #540]	; (4460 <PSP_CNFG_FP_REGISTERS_EXIST+0x460>)
    4244:	50a3      	str	r3, [r4, r2]
    4246:	3204      	adds	r2, #4
    4248:	50a3      	str	r3, [r4, r2]
    424a:	4a86      	ldr	r2, [pc, #536]	; (4464 <PSP_CNFG_FP_REGISTERS_EXIST+0x464>)
    424c:	50a3      	str	r3, [r4, r2]
    424e:	3204      	adds	r2, #4
    4250:	50a3      	str	r3, [r4, r2]
    4252:	4a85      	ldr	r2, [pc, #532]	; (4468 <PSP_CNFG_FP_REGISTERS_EXIST+0x468>)
    4254:	50a3      	str	r3, [r4, r2]
    4256:	4a85      	ldr	r2, [pc, #532]	; (446c <PSP_CNFG_FP_REGISTERS_EXIST+0x46c>)
    4258:	50a3      	str	r3, [r4, r2]
    425a:	3204      	adds	r2, #4
    425c:	50a3      	str	r3, [r4, r2]
    425e:	3208      	adds	r2, #8
    4260:	50a3      	str	r3, [r4, r2]
    4262:	4a83      	ldr	r2, [pc, #524]	; (4470 <PSP_CNFG_FP_REGISTERS_EXIST+0x470>)
    4264:	50a3      	str	r3, [r4, r2]
    4266:	3204      	adds	r2, #4
    4268:	50a3      	str	r3, [r4, r2]
    426a:	4a82      	ldr	r2, [pc, #520]	; (4474 <PSP_CNFG_FP_REGISTERS_EXIST+0x474>)
    426c:	50a3      	str	r3, [r4, r2]
    426e:	3204      	adds	r2, #4
    4270:	50a3      	str	r3, [r4, r2]
    4272:	4a81      	ldr	r2, [pc, #516]	; (4478 <PSP_CNFG_FP_REGISTERS_EXIST+0x478>)
    4274:	50a3      	str	r3, [r4, r2]
    4276:	3204      	adds	r2, #4
    4278:	50a3      	str	r3, [r4, r2]
    427a:	4a80      	ldr	r2, [pc, #512]	; (447c <PSP_CNFG_FP_REGISTERS_EXIST+0x47c>)
    427c:	50a3      	str	r3, [r4, r2]
    427e:	3204      	adds	r2, #4
    4280:	50a3      	str	r3, [r4, r2]
    4282:	3208      	adds	r2, #8
    4284:	50a3      	str	r3, [r4, r2]
    4286:	4a7e      	ldr	r2, [pc, #504]	; (4480 <PSP_CNFG_FP_REGISTERS_EXIST+0x480>)
    4288:	50a3      	str	r3, [r4, r2]
    428a:	4a7e      	ldr	r2, [pc, #504]	; (4484 <PSP_CNFG_FP_REGISTERS_EXIST+0x484>)
    428c:	50a3      	str	r3, [r4, r2]
    428e:	3204      	adds	r2, #4
    4290:	50a3      	str	r3, [r4, r2]
    4292:	4a7d      	ldr	r2, [pc, #500]	; (4488 <PSP_CNFG_FP_REGISTERS_EXIST+0x488>)
    4294:	50a3      	str	r3, [r4, r2]
    4296:	3204      	adds	r2, #4
    4298:	50a3      	str	r3, [r4, r2]
    429a:	4a7c      	ldr	r2, [pc, #496]	; (448c <PSP_CNFG_FP_REGISTERS_EXIST+0x48c>)
    429c:	50a3      	str	r3, [r4, r2]
    429e:	3204      	adds	r2, #4
    42a0:	50a3      	str	r3, [r4, r2]
    42a2:	4a7b      	ldr	r2, [pc, #492]	; (4490 <PSP_CNFG_FP_REGISTERS_EXIST+0x490>)
    42a4:	50a3      	str	r3, [r4, r2]
    42a6:	3204      	adds	r2, #4
    42a8:	50a3      	str	r3, [r4, r2]
    42aa:	4a7a      	ldr	r2, [pc, #488]	; (4494 <PSP_CNFG_FP_REGISTERS_EXIST+0x494>)
    42ac:	50a3      	str	r3, [r4, r2]
    42ae:	4a7a      	ldr	r2, [pc, #488]	; (4498 <PSP_CNFG_FP_REGISTERS_EXIST+0x498>)
    42b0:	50a3      	str	r3, [r4, r2]
    42b2:	3204      	adds	r2, #4
    42b4:	50a3      	str	r3, [r4, r2]
    42b6:	3208      	adds	r2, #8
    42b8:	50a3      	str	r3, [r4, r2]
    42ba:	4a78      	ldr	r2, [pc, #480]	; (449c <PSP_CNFG_FP_REGISTERS_EXIST+0x49c>)
    42bc:	50a3      	str	r3, [r4, r2]
    42be:	3204      	adds	r2, #4
    42c0:	50a3      	str	r3, [r4, r2]
    42c2:	4a77      	ldr	r2, [pc, #476]	; (44a0 <PSP_CNFG_FP_REGISTERS_EXIST+0x4a0>)
    42c4:	50a3      	str	r3, [r4, r2]
    42c6:	3204      	adds	r2, #4
    42c8:	50a3      	str	r3, [r4, r2]
    42ca:	4a76      	ldr	r2, [pc, #472]	; (44a4 <PSP_CNFG_FP_REGISTERS_EXIST+0x4a4>)
    42cc:	50a3      	str	r3, [r4, r2]
    42ce:	3204      	adds	r2, #4
    42d0:	50a3      	str	r3, [r4, r2]
    42d2:	4a75      	ldr	r2, [pc, #468]	; (44a8 <PSP_CNFG_FP_REGISTERS_EXIST+0x4a8>)
    42d4:	50a3      	str	r3, [r4, r2]
    42d6:	3204      	adds	r2, #4
    42d8:	50a3      	str	r3, [r4, r2]
    42da:	4a74      	ldr	r2, [pc, #464]	; (44ac <PSP_CNFG_FP_REGISTERS_EXIST+0x4ac>)
    42dc:	50a3      	str	r3, [r4, r2]
    42de:	3204      	adds	r2, #4
    42e0:	50a3      	str	r3, [r4, r2]
    42e2:	4a73      	ldr	r2, [pc, #460]	; (44b0 <PSP_CNFG_FP_REGISTERS_EXIST+0x4b0>)
    42e4:	50a3      	str	r3, [r4, r2]
    42e6:	4a73      	ldr	r2, [pc, #460]	; (44b4 <PSP_CNFG_FP_REGISTERS_EXIST+0x4b4>)
    42e8:	50a3      	str	r3, [r4, r2]
    42ea:	3204      	adds	r2, #4
    42ec:	50a3      	str	r3, [r4, r2]
    42ee:	4a72      	ldr	r2, [pc, #456]	; (44b8 <PSP_CNFG_FP_REGISTERS_EXIST+0x4b8>)
    42f0:	50a3      	str	r3, [r4, r2]
    42f2:	3204      	adds	r2, #4
    42f4:	50a3      	str	r3, [r4, r2]
    42f6:	4a71      	ldr	r2, [pc, #452]	; (44bc <PSP_CNFG_FP_REGISTERS_EXIST+0x4bc>)
    42f8:	50a3      	str	r3, [r4, r2]
    42fa:	3204      	adds	r2, #4
    42fc:	50a3      	str	r3, [r4, r2]
    42fe:	4a70      	ldr	r2, [pc, #448]	; (44c0 <PSP_CNFG_FP_REGISTERS_EXIST+0x4c0>)
    4300:	50a3      	str	r3, [r4, r2]
    4302:	3204      	adds	r2, #4
    4304:	50a3      	str	r3, [r4, r2]
    4306:	4a6f      	ldr	r2, [pc, #444]	; (44c4 <PSP_CNFG_FP_REGISTERS_EXIST+0x4c4>)
    4308:	50a3      	str	r3, [r4, r2]
    430a:	3204      	adds	r2, #4
    430c:	50a3      	str	r3, [r4, r2]
    430e:	4a6e      	ldr	r2, [pc, #440]	; (44c8 <PSP_CNFG_FP_REGISTERS_EXIST+0x4c8>)
    4310:	50a3      	str	r3, [r4, r2]
    4312:	3204      	adds	r2, #4
    4314:	50a3      	str	r3, [r4, r2]
    4316:	3208      	adds	r2, #8
    4318:	50a3      	str	r3, [r4, r2]
    431a:	4a6c      	ldr	r2, [pc, #432]	; (44cc <PSP_CNFG_FP_REGISTERS_EXIST+0x4cc>)
    431c:	50a3      	str	r3, [r4, r2]
    431e:	3204      	adds	r2, #4
    4320:	50a3      	str	r3, [r4, r2]
    4322:	4a6b      	ldr	r2, [pc, #428]	; (44d0 <PSP_CNFG_FP_REGISTERS_EXIST+0x4d0>)
    4324:	50a3      	str	r3, [r4, r2]
    4326:	3204      	adds	r2, #4
    4328:	50a3      	str	r3, [r4, r2]
    432a:	4a6a      	ldr	r2, [pc, #424]	; (44d4 <PSP_CNFG_FP_REGISTERS_EXIST+0x4d4>)
    432c:	50a3      	str	r3, [r4, r2]
    432e:	3204      	adds	r2, #4
    4330:	50a3      	str	r3, [r4, r2]
    4332:	4a69      	ldr	r2, [pc, #420]	; (44d8 <PSP_CNFG_FP_REGISTERS_EXIST+0x4d8>)
    4334:	50a3      	str	r3, [r4, r2]
    4336:	3204      	adds	r2, #4
    4338:	50a3      	str	r3, [r4, r2]
    433a:	4a68      	ldr	r2, [pc, #416]	; (44dc <PSP_CNFG_FP_REGISTERS_EXIST+0x4dc>)
    433c:	50a3      	str	r3, [r4, r2]
    433e:	3204      	adds	r2, #4
    4340:	50a3      	str	r3, [r4, r2]
    4342:	4a67      	ldr	r2, [pc, #412]	; (44e0 <PSP_CNFG_FP_REGISTERS_EXIST+0x4e0>)
    4344:	50a3      	str	r3, [r4, r2]
    4346:	4a67      	ldr	r2, [pc, #412]	; (44e4 <PSP_CNFG_FP_REGISTERS_EXIST+0x4e4>)
    4348:	50a3      	str	r3, [r4, r2]
    434a:	3204      	adds	r2, #4
    434c:	50a3      	str	r3, [r4, r2]
    434e:	4a66      	ldr	r2, [pc, #408]	; (44e8 <PSP_CNFG_FP_REGISTERS_EXIST+0x4e8>)
    4350:	50a3      	str	r3, [r4, r2]
    4352:	3204      	adds	r2, #4
    4354:	50a3      	str	r3, [r4, r2]
    4356:	4a65      	ldr	r2, [pc, #404]	; (44ec <PSP_CNFG_FP_REGISTERS_EXIST+0x4ec>)
    4358:	50a3      	str	r3, [r4, r2]
    435a:	3204      	adds	r2, #4
    435c:	50a3      	str	r3, [r4, r2]
    435e:	4a64      	ldr	r2, [pc, #400]	; (44f0 <PSP_CNFG_FP_REGISTERS_EXIST+0x4f0>)
    4360:	50a3      	str	r3, [r4, r2]
    4362:	3204      	adds	r2, #4
    4364:	50a3      	str	r3, [r4, r2]
    4366:	e0c5      	b.n	44f4 <PSP_CNFG_FP_REGISTERS_EXIST+0x4f4>
    4368:	00000834 	.word	0x00000834
    436c:	00000824 	.word	0x00000824
    4370:	00000828 	.word	0x00000828
    4374:	0000082c 	.word	0x0000082c
    4378:	0000081c 	.word	0x0000081c
    437c:	3e99999a 	.word	0x3e99999a
    4380:	000006bc 	.word	0x000006bc
    4384:	000006c4 	.word	0x000006c4
    4388:	000006cc 	.word	0x000006cc
    438c:	000006d4 	.word	0x000006d4
    4390:	000006dc 	.word	0x000006dc
    4394:	000006e4 	.word	0x000006e4
    4398:	000006ec 	.word	0x000006ec
    439c:	000006f4 	.word	0x000006f4
    43a0:	000006fc 	.word	0x000006fc
    43a4:	0000070c 	.word	0x0000070c
    43a8:	00000714 	.word	0x00000714
    43ac:	0000071c 	.word	0x0000071c
    43b0:	00000724 	.word	0x00000724
    43b4:	0000072c 	.word	0x0000072c
    43b8:	00000734 	.word	0x00000734
    43bc:	0000073c 	.word	0x0000073c
    43c0:	00000744 	.word	0x00000744
    43c4:	0000074c 	.word	0x0000074c
    43c8:	00000754 	.word	0x00000754
    43cc:	0000075c 	.word	0x0000075c
    43d0:	00000764 	.word	0x00000764
    43d4:	00000774 	.word	0x00000774
    43d8:	0000077c 	.word	0x0000077c
    43dc:	00000784 	.word	0x00000784
    43e0:	0000078c 	.word	0x0000078c
    43e4:	00000794 	.word	0x00000794
    43e8:	0000079c 	.word	0x0000079c
    43ec:	000007a4 	.word	0x000007a4
    43f0:	000007ac 	.word	0x000007ac
    43f4:	000007b4 	.word	0x000007b4
    43f8:	000007bc 	.word	0x000007bc
    43fc:	000007c4 	.word	0x000007c4
    4400:	000007cc 	.word	0x000007cc
    4404:	00000704 	.word	0x00000704
    4408:	bf800000 	.word	0xbf800000
    440c:	000007d4 	.word	0x000007d4
    4410:	0000076c 	.word	0x0000076c
    4414:	42480000 	.word	0x42480000
    4418:	399fb50f 	.word	0x399fb50f
    441c:	38d5e8d5 	.word	0x38d5e8d5
    4420:	3f19999a 	.word	0x3f19999a
    4424:	0000047c 	.word	0x0000047c
    4428:	0000048c 	.word	0x0000048c
    442c:	3ca3d70a 	.word	0x3ca3d70a
    4430:	00000494 	.word	0x00000494
    4434:	0000049c 	.word	0x0000049c
    4438:	38d1b717 	.word	0x38d1b717
    443c:	000004a4 	.word	0x000004a4
    4440:	0000064c 	.word	0x0000064c
    4444:	000004b4 	.word	0x000004b4
    4448:	000004bc 	.word	0x000004bc
    444c:	000004c4 	.word	0x000004c4
    4450:	000004cc 	.word	0x000004cc
    4454:	000004d4 	.word	0x000004d4
    4458:	000004dc 	.word	0x000004dc
    445c:	000004e4 	.word	0x000004e4
    4460:	000004f4 	.word	0x000004f4
    4464:	000004fc 	.word	0x000004fc
    4468:	00000504 	.word	0x00000504
    446c:	0000050c 	.word	0x0000050c
    4470:	0000051c 	.word	0x0000051c
    4474:	00000524 	.word	0x00000524
    4478:	0000052c 	.word	0x0000052c
    447c:	00000534 	.word	0x00000534
    4480:	00000544 	.word	0x00000544
    4484:	0000054c 	.word	0x0000054c
    4488:	00000554 	.word	0x00000554
    448c:	0000055c 	.word	0x0000055c
    4490:	00000564 	.word	0x00000564
    4494:	0000056c 	.word	0x0000056c
    4498:	00000574 	.word	0x00000574
    449c:	00000584 	.word	0x00000584
    44a0:	0000058c 	.word	0x0000058c
    44a4:	00000594 	.word	0x00000594
    44a8:	0000059c 	.word	0x0000059c
    44ac:	000005a4 	.word	0x000005a4
    44b0:	000005ac 	.word	0x000005ac
    44b4:	000005b4 	.word	0x000005b4
    44b8:	000005bc 	.word	0x000005bc
    44bc:	000005c4 	.word	0x000005c4
    44c0:	000005cc 	.word	0x000005cc
    44c4:	000005d4 	.word	0x000005d4
    44c8:	000005dc 	.word	0x000005dc
    44cc:	000005ec 	.word	0x000005ec
    44d0:	000005f4 	.word	0x000005f4
    44d4:	000005fc 	.word	0x000005fc
    44d8:	00000604 	.word	0x00000604
    44dc:	0000060c 	.word	0x0000060c
    44e0:	00000614 	.word	0x00000614
    44e4:	0000061c 	.word	0x0000061c
    44e8:	00000624 	.word	0x00000624
    44ec:	0000062c 	.word	0x0000062c
    44f0:	00000634 	.word	0x00000634
    44f4:	4a3b      	ldr	r2, [pc, #236]	; (45e4 <PSP_CNFG_FP_REGISTERS_EXIST+0x5e4>)
    44f6:	50a3      	str	r3, [r4, r2]
    44f8:	3204      	adds	r2, #4
    44fa:	50a3      	str	r3, [r4, r2]
    44fc:	4a3a      	ldr	r2, [pc, #232]	; (45e8 <PSP_CNFG_FP_REGISTERS_EXIST+0x5e8>)
    44fe:	50a3      	str	r3, [r4, r2]
    4500:	3204      	adds	r2, #4
    4502:	50a3      	str	r3, [r4, r2]
    4504:	3208      	adds	r2, #8
    4506:	50a3      	str	r3, [r4, r2]
    4508:	4a38      	ldr	r2, [pc, #224]	; (45ec <PSP_CNFG_FP_REGISTERS_EXIST+0x5ec>)
    450a:	50a3      	str	r3, [r4, r2]
    450c:	3204      	adds	r2, #4
    450e:	50a3      	str	r3, [r4, r2]
    4510:	4a37      	ldr	r2, [pc, #220]	; (45f0 <PSP_CNFG_FP_REGISTERS_EXIST+0x5f0>)
    4512:	50a3      	str	r3, [r4, r2]
    4514:	3204      	adds	r2, #4
    4516:	50a3      	str	r3, [r4, r2]
    4518:	4a36      	ldr	r2, [pc, #216]	; (45f4 <PSP_CNFG_FP_REGISTERS_EXIST+0x5f4>)
    451a:	50a3      	str	r3, [r4, r2]
    451c:	3204      	adds	r2, #4
    451e:	50a3      	str	r3, [r4, r2]
    4520:	4a35      	ldr	r2, [pc, #212]	; (45f8 <PSP_CNFG_FP_REGISTERS_EXIST+0x5f8>)
    4522:	50a3      	str	r3, [r4, r2]
    4524:	3204      	adds	r2, #4
    4526:	50a3      	str	r3, [r4, r2]
    4528:	4a34      	ldr	r2, [pc, #208]	; (45fc <PSP_CNFG_FP_REGISTERS_EXIST+0x5fc>)
    452a:	50a3      	str	r3, [r4, r2]
    452c:	3204      	adds	r2, #4
    452e:	50a3      	str	r3, [r4, r2]
    4530:	4a33      	ldr	r2, [pc, #204]	; (4600 <PSP_CNFG_FP_REGISTERS_EXIST+0x600>)
    4532:	50a3      	str	r3, [r4, r2]
    4534:	4a33      	ldr	r2, [pc, #204]	; (4604 <PSP_CNFG_FP_REGISTERS_EXIST+0x604>)
    4536:	50a3      	str	r3, [r4, r2]
    4538:	3204      	adds	r2, #4
    453a:	50a3      	str	r3, [r4, r2]
    453c:	4a32      	ldr	r2, [pc, #200]	; (4608 <PSP_CNFG_FP_REGISTERS_EXIST+0x608>)
    453e:	50a3      	str	r3, [r4, r2]
    4540:	3204      	adds	r2, #4
    4542:	50a3      	str	r3, [r4, r2]
    4544:	4a31      	ldr	r2, [pc, #196]	; (460c <PSP_CNFG_FP_REGISTERS_EXIST+0x60c>)
    4546:	50a3      	str	r3, [r4, r2]
    4548:	3204      	adds	r2, #4
    454a:	50a3      	str	r3, [r4, r2]
    454c:	4a30      	ldr	r2, [pc, #192]	; (4610 <PSP_CNFG_FP_REGISTERS_EXIST+0x610>)
    454e:	50a3      	str	r3, [r4, r2]
    4550:	3204      	adds	r2, #4
    4552:	50a3      	str	r3, [r4, r2]
    4554:	4a2f      	ldr	r2, [pc, #188]	; (4614 <PSP_CNFG_FP_REGISTERS_EXIST+0x614>)
    4556:	50a3      	str	r3, [r4, r2]
    4558:	3204      	adds	r2, #4
    455a:	50a3      	str	r3, [r4, r2]
    455c:	4a2e      	ldr	r2, [pc, #184]	; (4618 <PSP_CNFG_FP_REGISTERS_EXIST+0x618>)
    455e:	50a3      	str	r3, [r4, r2]
    4560:	3204      	adds	r2, #4
    4562:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:278
	}
	// loop over non-zero values
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw12x12[i][i] = FQWINITTHTH_9DOF_GBY_KALMAN;
    4564:	228f      	movs	r2, #143	; 0x8f
    4566:	00d2      	lsls	r2, r2, #3
    4568:	50a5      	str	r5, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:280
		// b_e * b_e terms
		pthisSV->fQw12x12[i + 3][i + 3] = FQWINITBB_9DOF_GBY_KALMAN;
    456a:	4a2c      	ldr	r2, [pc, #176]	; (461c <PSP_CNFG_FP_REGISTERS_EXIST+0x61c>)
    456c:	50a0      	str	r0, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:282
		// th_e * b_e terms
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = FQWINITTHB_9DOF_GBY_KALMAN;
    456e:	3a0c      	subs	r2, #12
    4570:	50a3      	str	r3, [r4, r2]
    4572:	4a2b      	ldr	r2, [pc, #172]	; (4620 <PSP_CNFG_FP_REGISTERS_EXIST+0x620>)
    4574:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:284
		// a_e * a_e terms
		pthisSV->fQw12x12[i + 6][i + 6] = FQWINITAA_9DOF_GBY_KALMAN;
    4576:	322d      	adds	r2, #45	; 0x2d
    4578:	32ff      	adds	r2, #255	; 0xff
    457a:	50a1      	str	r1, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:286
		// d_e * d_e terms
		pthisSV->fQw12x12[i + 9][i + 9] = FQWINITDD_9DOF_GBY_KALMAN;
    457c:	4a29      	ldr	r2, [pc, #164]	; (4624 <PSP_CNFG_FP_REGISTERS_EXIST+0x624>)
    457e:	51a2      	str	r2, [r4, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:278
	}
	// loop over non-zero values
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw12x12[i][i] = FQWINITTHTH_9DOF_GBY_KALMAN;
    4580:	4e29      	ldr	r6, [pc, #164]	; (4628 <PSP_CNFG_FP_REGISTERS_EXIST+0x628>)
    4582:	51a5      	str	r5, [r4, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:280
		// b_e * b_e terms
		pthisSV->fQw12x12[i + 3][i + 3] = FQWINITBB_9DOF_GBY_KALMAN;
    4584:	369c      	adds	r6, #156	; 0x9c
    4586:	51a0      	str	r0, [r4, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:282
		// th_e * b_e terms
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = FQWINITTHB_9DOF_GBY_KALMAN;
    4588:	4e28      	ldr	r6, [pc, #160]	; (462c <PSP_CNFG_FP_REGISTERS_EXIST+0x62c>)
    458a:	51a3      	str	r3, [r4, r6]
    458c:	3e84      	subs	r6, #132	; 0x84
    458e:	51a3      	str	r3, [r4, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:284
		// a_e * a_e terms
		pthisSV->fQw12x12[i + 6][i + 6] = FQWINITAA_9DOF_GBY_KALMAN;
    4590:	4e27      	ldr	r6, [pc, #156]	; (4630 <PSP_CNFG_FP_REGISTERS_EXIST+0x630>)
    4592:	51a1      	str	r1, [r4, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:286
		// d_e * d_e terms
		pthisSV->fQw12x12[i + 9][i + 9] = FQWINITDD_9DOF_GBY_KALMAN;
    4594:	369c      	adds	r6, #156	; 0x9c
    4596:	51a2      	str	r2, [r4, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:278
	}
	// loop over non-zero values
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw12x12[i][i] = FQWINITTHTH_9DOF_GBY_KALMAN;
    4598:	3ea1      	subs	r6, #161	; 0xa1
    459a:	3eff      	subs	r6, #255	; 0xff
    459c:	51a5      	str	r5, [r4, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:280
		// b_e * b_e terms
		pthisSV->fQw12x12[i + 3][i + 3] = FQWINITBB_9DOF_GBY_KALMAN;
    459e:	4d25      	ldr	r5, [pc, #148]	; (4634 <PSP_CNFG_FP_REGISTERS_EXIST+0x634>)
    45a0:	5160      	str	r0, [r4, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:282
		// th_e * b_e terms
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = FQWINITTHB_9DOF_GBY_KALMAN;
    45a2:	20ae      	movs	r0, #174	; 0xae
    45a4:	00c0      	lsls	r0, r0, #3
    45a6:	5023      	str	r3, [r4, r0]
    45a8:	4823      	ldr	r0, [pc, #140]	; (4638 <PSP_CNFG_FP_REGISTERS_EXIST+0x638>)
    45aa:	5023      	str	r3, [r4, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:284
		// a_e * a_e terms
		pthisSV->fQw12x12[i + 6][i + 6] = FQWINITAA_9DOF_GBY_KALMAN;
    45ac:	23c3      	movs	r3, #195	; 0xc3
    45ae:	00db      	lsls	r3, r3, #3
    45b0:	50e1      	str	r1, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:286
		// d_e * d_e terms
		pthisSV->fQw12x12[i + 9][i + 9] = FQWINITDD_9DOF_GBY_KALMAN;
    45b2:	4b22      	ldr	r3, [pc, #136]	; (463c <PSP_CNFG_FP_REGISTERS_EXIST+0x63c>)
    45b4:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:290
	}

	// update the default quaternion type supported to the most sophisticated
	if (globals.DefaultQuaternionPacketType < Q9)
    45b6:	4b22      	ldr	r3, [pc, #136]	; (4640 <PSP_CNFG_FP_REGISTERS_EXIST+0x640>)
    45b8:	795a      	ldrb	r2, [r3, #5]
    45ba:	2a04      	cmp	r2, #4
    45bc:	d802      	bhi.n	45c4 <PSP_CNFG_FP_REGISTERS_EXIST+0x5c4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:291
		globals.QuaternionPacketType = globals.DefaultQuaternionPacketType = Q9; 
    45be:	2205      	movs	r2, #5
    45c0:	715a      	strb	r2, [r3, #5]
    45c2:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:294

	// clear the reset flag
	pthisSV->resetflag = false;
    45c4:	2200      	movs	r2, #0
    45c6:	4b1f      	ldr	r3, [pc, #124]	; (4644 <PSP_CNFG_FP_REGISTERS_EXIST+0x644>)
    45c8:	54e2      	strb	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:297

	return;
} // end fInit_9DOF_GBY_KALMAN
    45ca:	bc04      	pop	{r2}
    45cc:	4690      	mov	r8, r2
    45ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:255
		pthisSV->fmGl[Z] = 0.0F;
	}
	else
	{
		// initialize Android and Win8 geomagnetic vector to zero degrees inclination
		pthisSV->fmGl[X] = 0.0F;
    45d0:	2382      	movs	r3, #130	; 0x82
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:256
		pthisSV->fmGl[Y] = DEFAULTB;
    45d2:	4a1d      	ldr	r2, [pc, #116]	; (4648 <PSP_CNFG_FP_REGISTERS_EXIST+0x648>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:255
		pthisSV->fmGl[Z] = 0.0F;
	}
	else
	{
		// initialize Android and Win8 geomagnetic vector to zero degrees inclination
		pthisSV->fmGl[X] = 0.0F;
    45d4:	005b      	lsls	r3, r3, #1
    45d6:	50e5      	str	r5, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:256
		pthisSV->fmGl[Y] = DEFAULTB;
    45d8:	3304      	adds	r3, #4
    45da:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:257
		pthisSV->fmGl[Z] = 0.0F;
    45dc:	3304      	adds	r3, #4
    45de:	50e5      	str	r5, [r4, r3]
    45e0:	e5d8      	b.n	4194 <PSP_CNFG_FP_REGISTERS_EXIST+0x194>
    45e2:	46c0      	nop			; (mov r8, r8)
    45e4:	0000063c 	.word	0x0000063c
    45e8:	00000644 	.word	0x00000644
    45ec:	00000654 	.word	0x00000654
    45f0:	0000065c 	.word	0x0000065c
    45f4:	00000664 	.word	0x00000664
    45f8:	0000066c 	.word	0x0000066c
    45fc:	00000674 	.word	0x00000674
    4600:	0000067c 	.word	0x0000067c
    4604:	00000684 	.word	0x00000684
    4608:	0000068c 	.word	0x0000068c
    460c:	00000694 	.word	0x00000694
    4610:	0000069c 	.word	0x0000069c
    4614:	000006a4 	.word	0x000006a4
    4618:	000006ac 	.word	0x000006ac
    461c:	00000514 	.word	0x00000514
    4620:	00000484 	.word	0x00000484
    4624:	3f19999a 	.word	0x3f19999a
    4628:	000004ac 	.word	0x000004ac
    462c:	0000053c 	.word	0x0000053c
    4630:	000005e4 	.word	0x000005e4
    4634:	0000057c 	.word	0x0000057c
    4638:	000004ec 	.word	0x000004ec
    463c:	000006b4 	.word	0x000006b4
    4640:	200005dc 	.word	0x200005dc
    4644:	00000836 	.word	0x00000836
    4648:	42480000 	.word	0x42480000

0000464c <fRun_1DOF_P_BASIC>:
fRun_1DOF_P_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:301
	return;
} // end fInit_9DOF_GBY_KALMAN

// 1DOF pressure function
void fRun_1DOF_P_BASIC(struct SV_1DOF_P_BASIC *pthisSV, struct PressureSensor *pthisPressure, int32 loopcounter)
{
    464c:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:303
	// do a reset and return if requested
	if (pthisSV->resetflag)
    464e:	2414      	movs	r4, #20
    4650:	5704      	ldrsb	r4, [r0, r4]
    4652:	2c00      	cmp	r4, #0
    4654:	d006      	beq.n	4664 <fRun_1DOF_P_BASIC+0x18>
fInit_1DOF_P_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:42
#include "string.h"

void fInit_1DOF_P_BASIC(struct SV_1DOF_P_BASIC *pthisSV, float flpftimesecs, int16 iSensorFS, int16 iOverSampleRatio)
{
	// set algorithm sampling interval (typically 25Hz) and low pass filter
	pthisSV->fdeltat = (float) iOverSampleRatio / (float) iSensorFS;
    4656:	4b0c      	ldr	r3, [pc, #48]	; (4688 <fRun_1DOF_P_BASIC+0x3c>)
    4658:	6083      	str	r3, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:43
	pthisSV->flpf = pthisSV->fdeltat / flpftimesecs;
    465a:	4b0c      	ldr	r3, [pc, #48]	; (468c <fRun_1DOF_P_BASIC+0x40>)
    465c:	60c3      	str	r3, [r0, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:50
	{
		pthisSV->flpf = 1.0F;
	}

	// clear the reset flag
	pthisSV->resetflag = false;
    465e:	2300      	movs	r3, #0
    4660:	7503      	strb	r3, [r0, #20]
fRun_1DOF_P_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:314
	// low pass filter the block averaged (typically 25Hz) height and temperature readings
	fLPFScalar(&(pthisPressure->fHp), &(pthisSV->fLPHp), pthisSV->flpf, loopcounter);
	fLPFScalar(&(pthisPressure->fTp), &(pthisSV->fLPTp), pthisSV->flpf, loopcounter);

	return;
} // end fRun_1DOF_P_BASIC
    4662:	bd70      	pop	{r4, r5, r6, pc}
    4664:	1c04      	adds	r4, r0, #0
    4666:	1c16      	adds	r6, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:310
		fInit_1DOF_P_BASIC(pthisSV, 1.5F, SENSORFS, OVERSAMPLE_RATIO);
		return;
	}

	// low pass filter the block averaged (typically 25Hz) height and temperature readings
	fLPFScalar(&(pthisPressure->fHp), &(pthisSV->fLPHp), pthisSV->flpf, loopcounter);
    4668:	1c08      	adds	r0, r1, #0
    466a:	1c0d      	adds	r5, r1, #0
    466c:	68e2      	ldr	r2, [r4, #12]
    466e:	1c21      	adds	r1, r4, #0
    4670:	1c33      	adds	r3, r6, #0
    4672:	3008      	adds	r0, #8
    4674:	f00a fb64 	bl	ed40 <fLPFScalar>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:311
	fLPFScalar(&(pthisPressure->fTp), &(pthisSV->fLPTp), pthisSV->flpf, loopcounter);
    4678:	1c28      	adds	r0, r5, #0
    467a:	1d21      	adds	r1, r4, #4
    467c:	300c      	adds	r0, #12
    467e:	68e2      	ldr	r2, [r4, #12]
    4680:	1c33      	adds	r3, r6, #0
    4682:	f00a fb5d 	bl	ed40 <fLPFScalar>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:313

	return;
    4686:	e7ec      	b.n	4662 <fRun_1DOF_P_BASIC+0x16>
    4688:	3d23d70a 	.word	0x3d23d70a
    468c:	3cda740d 	.word	0x3cda740d

00004690 <fRun_3DOF_G_BASIC>:
fRun_3DOF_G_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:318
} // end fRun_1DOF_P_BASIC

// 3DOF orientation function which calls tilt functions and implements low pass filters
void fRun_3DOF_G_BASIC(struct SV_3DOF_G_BASIC *pthisSV, struct AccelSensor *pthisAccel, int32 loopcounter, int16 ithisCoordSystem)
{
    4690:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:320
	// do a reset and return if requested
	if (pthisSV->resetflag)
    4692:	24a0      	movs	r4, #160	; 0xa0
    4694:	5706      	ldrsb	r6, [r0, r4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:318
	return;
} // end fRun_1DOF_P_BASIC

// 3DOF orientation function which calls tilt functions and implements low pass filters
void fRun_3DOF_G_BASIC(struct SV_3DOF_G_BASIC *pthisSV, struct AccelSensor *pthisAccel, int32 loopcounter, int16 ithisCoordSystem)
{
    4696:	b082      	sub	sp, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:320
	// do a reset and return if requested
	if (pthisSV->resetflag)
    4698:	2e00      	cmp	r6, #0
    469a:	d138      	bne.n	470e <fRun_3DOF_G_BASIC+0x7e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:330

	// apply the tilt estimation algorithm to get the instantaneous orientation matrix
	if (ithisCoordSystem == NED)
	{
		// call NED tilt function
		f3DOFTiltNED(pthisSV->fR, pthisAccel->fGp);
    469c:	1c06      	adds	r6, r0, #0
    469e:	3664      	adds	r6, #100	; 0x64
    46a0:	1c04      	adds	r4, r0, #0
    46a2:	1c15      	adds	r5, r2, #0
    46a4:	3118      	adds	r1, #24
    46a6:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:327
		fInit_3DOF_G_BASIC(pthisSV, 0.2F, SENSORFS, OVERSAMPLE_RATIO);
		return;
	}

	// apply the tilt estimation algorithm to get the instantaneous orientation matrix
	if (ithisCoordSystem == NED)
    46a8:	2b00      	cmp	r3, #0
    46aa:	d039      	beq.n	4720 <fRun_3DOF_G_BASIC+0x90>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:332
	{
		// call NED tilt function
		f3DOFTiltNED(pthisSV->fR, pthisAccel->fGp);
	}
	else if (ithisCoordSystem == ANDROID)
    46ac:	2b01      	cmp	r3, #1
    46ae:	d062      	beq.n	4776 <fRun_3DOF_G_BASIC+0xe6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:340
		f3DOFTiltAndroid(pthisSV->fR, pthisAccel->fGp);
	}
	else
	{
		// call Windows 8 tilt function
		f3DOFTiltWin8(pthisSV->fR, pthisAccel->fGp);
    46b0:	f008 fed0 	bl	d454 <f3DOFTiltWin8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:344
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    46b4:	1c30      	adds	r0, r6, #0
    46b6:	3624      	adds	r6, #36	; 0x24
    46b8:	1c31      	adds	r1, r6, #0
    46ba:	f009 ff35 	bl	e528 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:347

	// low pass filter the orientation quaternion 
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    46be:	239c      	movs	r3, #156	; 0x9c
    46c0:	58e2      	ldr	r2, [r4, r3]
    46c2:	3b04      	subs	r3, #4
    46c4:	58e3      	ldr	r3, [r4, r3]
    46c6:	1c21      	adds	r1, r4, #0
    46c8:	9501      	str	r5, [sp, #4]
    46ca:	1c25      	adds	r5, r4, #0
    46cc:	3154      	adds	r1, #84	; 0x54
    46ce:	3538      	adds	r5, #56	; 0x38
    46d0:	1c30      	adds	r0, r6, #0
    46d2:	9100      	str	r1, [sp, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:350

	// compute the low pass rotation matrix and rotation vector
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    46d4:	3e74      	subs	r6, #116	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:347

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion 
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    46d6:	1c29      	adds	r1, r5, #0
    46d8:	f00a f8b4 	bl	e844 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:350

	// compute the low pass rotation matrix and rotation vector
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    46dc:	1c30      	adds	r0, r6, #0
    46de:	1c29      	adds	r1, r5, #0
    46e0:	f009 ffc4 	bl	e66c <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:351
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    46e4:	1c21      	adds	r1, r4, #0
    46e6:	1c28      	adds	r0, r5, #0
    46e8:	3148      	adds	r1, #72	; 0x48
    46ea:	f00a f84f 	bl	e78c <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:369
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}
	else
	{
		// calculate Windows 8 Euler angles
		fWin8AnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    46ee:	1c23      	adds	r3, r4, #0
    46f0:	330c      	adds	r3, #12
    46f2:	9300      	str	r3, [sp, #0]
    46f4:	3304      	adds	r3, #4
    46f6:	9301      	str	r3, [sp, #4]
    46f8:	1d22      	adds	r2, r4, #4
    46fa:	1c30      	adds	r0, r6, #0
    46fc:	1c21      	adds	r1, r4, #0
    46fe:	3b08      	subs	r3, #8
    4700:	f009 fd86 	bl	e210 <fWin8AnglesDegFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:374
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}

	// force the yaw and compass angles to zero
	pthisSV->fLPPsi = pthisSV->fLPRho = 0.0F;
    4704:	2300      	movs	r3, #0
    4706:	60e3      	str	r3, [r4, #12]
    4708:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:377

	return;
} // end fRun_3DOF_G_BASIC
    470a:	b002      	add	sp, #8
    470c:	bd70      	pop	{r4, r5, r6, pc}
fInit_3DOF_G_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:58
} // end fInit_1DOF_P_BASIC

void fInit_3DOF_G_BASIC(struct SV_3DOF_G_BASIC *pthisSV, float flpftimesecs, int16 iSensorFS, int16 iOverSampleRatio)
{
	// set algorithm sampling interval (typically 25Hz)
	pthisSV->fdeltat = (float) iOverSampleRatio / (float) iSensorFS;
    470e:	2398      	movs	r3, #152	; 0x98
    4710:	4a2e      	ldr	r2, [pc, #184]	; (47cc <fRun_3DOF_G_BASIC+0x13c>)
    4712:	50c2      	str	r2, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:62

	// set low pass filter constant with maximum value 1.0 (all pass) decreasing to 0.0 (increasing low pass)
	if (flpftimesecs > pthisSV->fdeltat)
		pthisSV->flpf = pthisSV->fdeltat / flpftimesecs;
    4714:	4a2e      	ldr	r2, [pc, #184]	; (47d0 <fRun_3DOF_G_BASIC+0x140>)
    4716:	3304      	adds	r3, #4
    4718:	50c2      	str	r2, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:71
	// update the default quaternion type supported to the most sophisticated
	if (globals.DefaultQuaternionPacketType < Q3)
		globals.QuaternionPacketType = globals.DefaultQuaternionPacketType = Q3; 

	// clear the reset flag
	pthisSV->resetflag = false;
    471a:	2300      	movs	r3, #0
    471c:	5503      	strb	r3, [r0, r4]
    471e:	e7f4      	b.n	470a <fRun_3DOF_G_BASIC+0x7a>
fRun_3DOF_G_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:330

	// apply the tilt estimation algorithm to get the instantaneous orientation matrix
	if (ithisCoordSystem == NED)
	{
		// call NED tilt function
		f3DOFTiltNED(pthisSV->fR, pthisAccel->fGp);
    4720:	f008 fd64 	bl	d1ec <f3DOFTiltNED>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:344
		// call Windows 8 tilt function
		f3DOFTiltWin8(pthisSV->fR, pthisAccel->fGp);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    4724:	1c30      	adds	r0, r6, #0
    4726:	3624      	adds	r6, #36	; 0x24
    4728:	1c31      	adds	r1, r6, #0
    472a:	f009 fefd 	bl	e528 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:347

	// low pass filter the orientation quaternion 
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    472e:	239c      	movs	r3, #156	; 0x9c
    4730:	58e2      	ldr	r2, [r4, r3]
    4732:	3b04      	subs	r3, #4
    4734:	58e3      	ldr	r3, [r4, r3]
    4736:	1c21      	adds	r1, r4, #0
    4738:	9501      	str	r5, [sp, #4]
    473a:	1c25      	adds	r5, r4, #0
    473c:	3154      	adds	r1, #84	; 0x54
    473e:	3538      	adds	r5, #56	; 0x38
    4740:	9100      	str	r1, [sp, #0]
    4742:	1c30      	adds	r0, r6, #0
    4744:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:350

	// compute the low pass rotation matrix and rotation vector
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    4746:	3e74      	subs	r6, #116	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:347

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion 
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    4748:	f00a f87c 	bl	e844 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:350

	// compute the low pass rotation matrix and rotation vector
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    474c:	1c30      	adds	r0, r6, #0
    474e:	1c29      	adds	r1, r5, #0
    4750:	f009 ff8c 	bl	e66c <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:351
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    4754:	1c21      	adds	r1, r4, #0
    4756:	1c28      	adds	r0, r5, #0
    4758:	3148      	adds	r1, #72	; 0x48
    475a:	f00a f817 	bl	e78c <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:357

	// calculate the Euler angles from the low pass orientation matrix
	if (ithisCoordSystem == NED)
	{
		// calculate NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    475e:	1c23      	adds	r3, r4, #0
    4760:	330c      	adds	r3, #12
    4762:	9300      	str	r3, [sp, #0]
    4764:	3304      	adds	r3, #4
    4766:	9301      	str	r3, [sp, #4]
    4768:	1d22      	adds	r2, r4, #4
    476a:	1c30      	adds	r0, r6, #0
    476c:	1c21      	adds	r1, r4, #0
    476e:	3b08      	subs	r3, #8
    4770:	f009 fc5a 	bl	e028 <fNEDAnglesDegFromRotationMatrix>
    4774:	e7c6      	b.n	4704 <fRun_3DOF_G_BASIC+0x74>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:335
		f3DOFTiltNED(pthisSV->fR, pthisAccel->fGp);
	}
	else if (ithisCoordSystem == ANDROID)
	{
		// call Android tilt function
		f3DOFTiltAndroid(pthisSV->fR, pthisAccel->fGp);
    4776:	f008 fdd1 	bl	d31c <f3DOFTiltAndroid>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:344
		// call Windows 8 tilt function
		f3DOFTiltWin8(pthisSV->fR, pthisAccel->fGp);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    477a:	1c30      	adds	r0, r6, #0
    477c:	3624      	adds	r6, #36	; 0x24
    477e:	1c31      	adds	r1, r6, #0
    4780:	f009 fed2 	bl	e528 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:347

	// low pass filter the orientation quaternion 
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    4784:	239c      	movs	r3, #156	; 0x9c
    4786:	58e2      	ldr	r2, [r4, r3]
    4788:	3b04      	subs	r3, #4
    478a:	58e3      	ldr	r3, [r4, r3]
    478c:	1c21      	adds	r1, r4, #0
    478e:	9501      	str	r5, [sp, #4]
    4790:	1c25      	adds	r5, r4, #0
    4792:	3154      	adds	r1, #84	; 0x54
    4794:	3538      	adds	r5, #56	; 0x38
    4796:	9100      	str	r1, [sp, #0]
    4798:	1c30      	adds	r0, r6, #0
    479a:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:350

	// compute the low pass rotation matrix and rotation vector
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    479c:	3e74      	subs	r6, #116	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:347

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion 
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    479e:	f00a f851 	bl	e844 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:350

	// compute the low pass rotation matrix and rotation vector
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    47a2:	1c30      	adds	r0, r6, #0
    47a4:	1c29      	adds	r1, r5, #0
    47a6:	f009 ff61 	bl	e66c <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:351
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    47aa:	1c21      	adds	r1, r4, #0
    47ac:	1c28      	adds	r0, r5, #0
    47ae:	3148      	adds	r1, #72	; 0x48
    47b0:	f009 ffec 	bl	e78c <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:363
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}
	else if (ithisCoordSystem == ANDROID)
	{
		// calculate Android Euler angles
		fAndroidAnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    47b4:	1c23      	adds	r3, r4, #0
    47b6:	330c      	adds	r3, #12
    47b8:	9300      	str	r3, [sp, #0]
    47ba:	3304      	adds	r3, #4
    47bc:	9301      	str	r3, [sp, #4]
    47be:	1d22      	adds	r2, r4, #4
    47c0:	1c30      	adds	r0, r6, #0
    47c2:	1c21      	adds	r1, r4, #0
    47c4:	3b08      	subs	r3, #8
    47c6:	f009 fca9 	bl	e11c <fAndroidAnglesDegFromRotationMatrix>
    47ca:	e79b      	b.n	4704 <fRun_3DOF_G_BASIC+0x74>
    47cc:	3d23d70a 	.word	0x3d23d70a
    47d0:	3e4ccccc 	.word	0x3e4ccccc

000047d4 <fRun_3DOF_B_BASIC>:
fRun_3DOF_B_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:381
	return;
} // end fRun_3DOF_G_BASIC

// 2D automobile eCompass
void fRun_3DOF_B_BASIC(struct SV_3DOF_B_BASIC *pthisSV, struct MagSensor *pthisMag, int32 loopcounter, int16 ithisCoordSystem)
{
    47d4:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:383
	// do a reset and return if requested
	if (pthisSV->resetflag)
    47d6:	24a0      	movs	r4, #160	; 0xa0
    47d8:	5704      	ldrsb	r4, [r0, r4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:381
	return;
} // end fRun_3DOF_G_BASIC

// 2D automobile eCompass
void fRun_3DOF_B_BASIC(struct SV_3DOF_B_BASIC *pthisSV, struct MagSensor *pthisMag, int32 loopcounter, int16 ithisCoordSystem)
{
    47da:	b083      	sub	sp, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:383
	// do a reset and return if requested
	if (pthisSV->resetflag)
    47dc:	2c00      	cmp	r4, #0
    47de:	d011      	beq.n	4804 <fRun_3DOF_B_BASIC+0x30>
fInit_3DOF_B_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:79
} // end fInit_3DOF_G_BASIC

void fInit_3DOF_B_BASIC(struct SV_3DOF_B_BASIC *pthisSV, float flpftimesecs, int16 iSensorFS, int16 iOverSampleRatio)
{
	// set algorithm sampling interval (typically 25Hz)
	pthisSV->fdeltat = (float) iOverSampleRatio / (float) iSensorFS;
    47e0:	2398      	movs	r3, #152	; 0x98
    47e2:	4a51      	ldr	r2, [pc, #324]	; (4928 <fRun_3DOF_B_BASIC+0x154>)
    47e4:	50c2      	str	r2, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:83

	// set low pass filter constant with maximum value 1.0 (all pass) decreasing to 0.0 (increasing low pass)
	if (flpftimesecs > pthisSV->fdeltat)
		pthisSV->flpf = pthisSV->fdeltat / flpftimesecs;
    47e6:	4a51      	ldr	r2, [pc, #324]	; (492c <fRun_3DOF_B_BASIC+0x158>)
    47e8:	3304      	adds	r3, #4
    47ea:	50c2      	str	r2, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:88
	else
		pthisSV->flpf = 1.0F;

	// update the default quaternion type supported to the most sophisticated
	if (globals.DefaultQuaternionPacketType < Q3M)
    47ec:	4b50      	ldr	r3, [pc, #320]	; (4930 <fRun_3DOF_B_BASIC+0x15c>)
    47ee:	795a      	ldrb	r2, [r3, #5]
    47f0:	2a00      	cmp	r2, #0
    47f2:	d102      	bne.n	47fa <fRun_3DOF_B_BASIC+0x26>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:89
		globals.QuaternionPacketType = globals.DefaultQuaternionPacketType = Q3M; 
    47f4:	3201      	adds	r2, #1
    47f6:	715a      	strb	r2, [r3, #5]
    47f8:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:92

	// clear the reset flag
	pthisSV->resetflag = false;
    47fa:	2200      	movs	r2, #0
    47fc:	23a0      	movs	r3, #160	; 0xa0
    47fe:	54c2      	strb	r2, [r0, r3]
fRun_3DOF_B_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:435
		fWin8AnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}

	return;
}
    4800:	b003      	add	sp, #12
    4802:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:393

	// calculate the 3DOF magnetometer orientation matrix from fBc
	if (ithisCoordSystem == NED)
	{
		// call NED magnetic rotation matrix function
		f3DOFMagnetometerMatrixNED(pthisSV->fR, pthisMag->fBc);
    4804:	1c06      	adds	r6, r0, #0
    4806:	3664      	adds	r6, #100	; 0x64
    4808:	1c04      	adds	r4, r0, #0
    480a:	1c15      	adds	r5, r2, #0
    480c:	3130      	adds	r1, #48	; 0x30
    480e:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:390
		fInit_3DOF_B_BASIC(pthisSV, 0.6F, SENSORFS, OVERSAMPLE_RATIO);
		return;
	}

	// calculate the 3DOF magnetometer orientation matrix from fBc
	if (ithisCoordSystem == NED)
    4810:	2b00      	cmp	r3, #0
    4812:	d02e      	beq.n	4872 <fRun_3DOF_B_BASIC+0x9e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:395
	{
		// call NED magnetic rotation matrix function
		f3DOFMagnetometerMatrixNED(pthisSV->fR, pthisMag->fBc);
	}
	else if (ithisCoordSystem == ANDROID)
    4814:	2b01      	cmp	r3, #1
    4816:	d059      	beq.n	48cc <fRun_3DOF_B_BASIC+0xf8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:407
		// call Windows 8 magnetic rotation matrix function
		f3DOFMagnetometerMatrixWin8(pthisSV->fR, pthisMag->fBc);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    4818:	1c27      	adds	r7, r4, #0
    481a:	3788      	adds	r7, #136	; 0x88
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:403
		f3DOFMagnetometerMatrixAndroid(pthisSV->fR, pthisMag->fBc);
	}
	else
	{
		// call Windows 8 magnetic rotation matrix function
		f3DOFMagnetometerMatrixWin8(pthisSV->fR, pthisMag->fBc);
    481c:	f008 ff46 	bl	d6ac <f3DOFMagnetometerMatrixWin8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:407
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    4820:	1c30      	adds	r0, r6, #0
    4822:	1c39      	adds	r1, r7, #0
    4824:	f009 fe80 	bl	e528 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    4828:	239c      	movs	r3, #156	; 0x9c
    482a:	1c21      	adds	r1, r4, #0
    482c:	58e2      	ldr	r2, [r4, r3]
    482e:	3b04      	subs	r3, #4
    4830:	58e3      	ldr	r3, [r4, r3]
    4832:	9501      	str	r5, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    4834:	1c25      	adds	r5, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    4836:	3e2c      	subs	r6, #44	; 0x2c
    4838:	3154      	adds	r1, #84	; 0x54
    483a:	9100      	str	r1, [sp, #0]
    483c:	1c38      	adds	r0, r7, #0
    483e:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    4840:	3514      	adds	r5, #20
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    4842:	f009 ffff 	bl	e844 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    4846:	1c28      	adds	r0, r5, #0
    4848:	1c31      	adds	r1, r6, #0
    484a:	f009 ff0f 	bl	e66c <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:412
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    484e:	1c21      	adds	r1, r4, #0
    4850:	1c30      	adds	r0, r6, #0
    4852:	3148      	adds	r1, #72	; 0x48
    4854:	f009 ff9a 	bl	e78c <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:430
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}
	else
	{
		// calculate Windows 8 Euler angles
		fWin8AnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    4858:	1c21      	adds	r1, r4, #0
    485a:	1c23      	adds	r3, r4, #0
    485c:	310c      	adds	r1, #12
    485e:	9100      	str	r1, [sp, #0]
    4860:	3104      	adds	r1, #4
    4862:	9101      	str	r1, [sp, #4]
    4864:	1d22      	adds	r2, r4, #4
    4866:	3308      	adds	r3, #8
    4868:	1c28      	adds	r0, r5, #0
    486a:	1c21      	adds	r1, r4, #0
    486c:	f009 fcd0 	bl	e210 <fWin8AnglesDegFromRotationMatrix>
    4870:	e7c6      	b.n	4800 <fRun_3DOF_B_BASIC+0x2c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:407
		// call Windows 8 magnetic rotation matrix function
		f3DOFMagnetometerMatrixWin8(pthisSV->fR, pthisMag->fBc);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    4872:	1c27      	adds	r7, r4, #0
    4874:	3788      	adds	r7, #136	; 0x88
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:393

	// calculate the 3DOF magnetometer orientation matrix from fBc
	if (ithisCoordSystem == NED)
	{
		// call NED magnetic rotation matrix function
		f3DOFMagnetometerMatrixNED(pthisSV->fR, pthisMag->fBc);
    4876:	f008 fead 	bl	d5d4 <f3DOFMagnetometerMatrixNED>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:407
		// call Windows 8 magnetic rotation matrix function
		f3DOFMagnetometerMatrixWin8(pthisSV->fR, pthisMag->fBc);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    487a:	1c30      	adds	r0, r6, #0
    487c:	1c39      	adds	r1, r7, #0
    487e:	f009 fe53 	bl	e528 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    4882:	239c      	movs	r3, #156	; 0x9c
    4884:	1c21      	adds	r1, r4, #0
    4886:	58e2      	ldr	r2, [r4, r3]
    4888:	3b04      	subs	r3, #4
    488a:	58e3      	ldr	r3, [r4, r3]
    488c:	9501      	str	r5, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    488e:	1c25      	adds	r5, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    4890:	3e2c      	subs	r6, #44	; 0x2c
    4892:	3154      	adds	r1, #84	; 0x54
    4894:	9100      	str	r1, [sp, #0]
    4896:	1c38      	adds	r0, r7, #0
    4898:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    489a:	3514      	adds	r5, #20
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    489c:	f009 ffd2 	bl	e844 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    48a0:	1c28      	adds	r0, r5, #0
    48a2:	1c31      	adds	r1, r6, #0
    48a4:	f009 fee2 	bl	e66c <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:412
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    48a8:	1c21      	adds	r1, r4, #0
    48aa:	1c30      	adds	r0, r6, #0
    48ac:	3148      	adds	r1, #72	; 0x48
    48ae:	f009 ff6d 	bl	e78c <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:418

	// calculate the Euler angles from the low pass orientation matrix
	if (ithisCoordSystem == NED)
	{
		// calculate NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    48b2:	1c21      	adds	r1, r4, #0
    48b4:	1c23      	adds	r3, r4, #0
    48b6:	310c      	adds	r1, #12
    48b8:	9100      	str	r1, [sp, #0]
    48ba:	3104      	adds	r1, #4
    48bc:	9101      	str	r1, [sp, #4]
    48be:	1d22      	adds	r2, r4, #4
    48c0:	3308      	adds	r3, #8
    48c2:	1c28      	adds	r0, r5, #0
    48c4:	1c21      	adds	r1, r4, #0
    48c6:	f009 fbaf 	bl	e028 <fNEDAnglesDegFromRotationMatrix>
    48ca:	e799      	b.n	4800 <fRun_3DOF_B_BASIC+0x2c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:407
		// call Windows 8 magnetic rotation matrix function
		f3DOFMagnetometerMatrixWin8(pthisSV->fR, pthisMag->fBc);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    48cc:	1c27      	adds	r7, r4, #0
    48ce:	3788      	adds	r7, #136	; 0x88
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:398
		f3DOFMagnetometerMatrixNED(pthisSV->fR, pthisMag->fBc);
	}
	else if (ithisCoordSystem == ANDROID)
	{
		// call Android magnetic rotation matrix function
		f3DOFMagnetometerMatrixAndroid(pthisSV->fR, pthisMag->fBc);
    48d0:	f008 feb6 	bl	d640 <f3DOFMagnetometerMatrixAndroid>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:407
		// call Windows 8 magnetic rotation matrix function
		f3DOFMagnetometerMatrixWin8(pthisSV->fR, pthisMag->fBc);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    48d4:	1c30      	adds	r0, r6, #0
    48d6:	1c39      	adds	r1, r7, #0
    48d8:	f009 fe26 	bl	e528 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    48dc:	239c      	movs	r3, #156	; 0x9c
    48de:	1c21      	adds	r1, r4, #0
    48e0:	58e2      	ldr	r2, [r4, r3]
    48e2:	3b04      	subs	r3, #4
    48e4:	58e3      	ldr	r3, [r4, r3]
    48e6:	9501      	str	r5, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    48e8:	1c25      	adds	r5, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    48ea:	3e2c      	subs	r6, #44	; 0x2c
    48ec:	3154      	adds	r1, #84	; 0x54
    48ee:	9100      	str	r1, [sp, #0]
    48f0:	1c38      	adds	r0, r7, #0
    48f2:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    48f4:	3514      	adds	r5, #20
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    48f6:	f009 ffa5 	bl	e844 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    48fa:	1c28      	adds	r0, r5, #0
    48fc:	1c31      	adds	r1, r6, #0
    48fe:	f009 feb5 	bl	e66c <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:412
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    4902:	1c21      	adds	r1, r4, #0
    4904:	1c30      	adds	r0, r6, #0
    4906:	3148      	adds	r1, #72	; 0x48
    4908:	f009 ff40 	bl	e78c <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:424
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}
	else if (ithisCoordSystem == ANDROID)
	{
		// calculate Android Euler angles
		fAndroidAnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    490c:	1c21      	adds	r1, r4, #0
    490e:	1c23      	adds	r3, r4, #0
    4910:	310c      	adds	r1, #12
    4912:	9100      	str	r1, [sp, #0]
    4914:	3104      	adds	r1, #4
    4916:	9101      	str	r1, [sp, #4]
    4918:	1d22      	adds	r2, r4, #4
    491a:	3308      	adds	r3, #8
    491c:	1c28      	adds	r0, r5, #0
    491e:	1c21      	adds	r1, r4, #0
    4920:	f009 fbfc 	bl	e11c <fAndroidAnglesDegFromRotationMatrix>
    4924:	e76c      	b.n	4800 <fRun_3DOF_B_BASIC+0x2c>
    4926:	46c0      	nop			; (mov r8, r8)
    4928:	3d23d70a 	.word	0x3d23d70a
    492c:	3d888888 	.word	0x3d888888
    4930:	200005dc 	.word	0x200005dc

00004934 <fRun_3DOF_Y_BASIC>:
fRun_3DOF_Y_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:439
	return;
}

// basic gyro integration function
void fRun_3DOF_Y_BASIC(struct SV_3DOF_Y_BASIC *pthisSV, struct GyroSensor *pthisGyro, int32 loopcounter, int16 ithisCoordSystem, int16 iOverSampleRatio)
{
    4934:	b5f0      	push	{r4, r5, r6, r7, lr}
    4936:	464d      	mov	r5, r9
    4938:	4644      	mov	r4, r8
    493a:	465f      	mov	r7, fp
    493c:	4656      	mov	r6, sl
    493e:	b4f0      	push	{r4, r5, r6, r7}
    4940:	b089      	sub	sp, #36	; 0x24
    4942:	9303      	str	r3, [sp, #12]
    4944:	ab12      	add	r3, sp, #72	; 0x48
    4946:	2200      	movs	r2, #0
    4948:	5e9b      	ldrsh	r3, [r3, r2]
    494a:	4680      	mov	r8, r0
    494c:	9302      	str	r3, [sp, #8]
    494e:	1c1a      	adds	r2, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:444
	float rvec[3];							// rotation vector
	int8 i, j;								// loop counters

	// do a reset and return if requested
	if (pthisSV->resetflag)
    4950:	237c      	movs	r3, #124	; 0x7c
    4952:	56c3      	ldrsb	r3, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:439
	return;
}

// basic gyro integration function
void fRun_3DOF_Y_BASIC(struct SV_3DOF_Y_BASIC *pthisSV, struct GyroSensor *pthisGyro, int32 loopcounter, int16 ithisCoordSystem, int16 iOverSampleRatio)
{
    4954:	4689      	mov	r9, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:444
	float rvec[3];							// rotation vector
	int8 i, j;								// loop counters

	// do a reset and return if requested
	if (pthisSV->resetflag)
    4956:	2b00      	cmp	r3, #0
    4958:	d000      	beq.n	495c <fRun_3DOF_Y_BASIC+0x28>
    495a:	e075      	b.n	4a48 <fRun_3DOF_Y_BASIC+0x114>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:453 (discriminator 1)
	}

	// set the angular velocity to the raw gyro reading: omega[k] = yG[k]
	for (i = X; i <= Z; i++)
	{
		pthisSV->fOmega[i] = pthisGyro->fYp[i];
    495c:	4649      	mov	r1, r9
    495e:	68c9      	ldr	r1, [r1, #12]
    4960:	6541      	str	r1, [r0, #84]	; 0x54
    4962:	4649      	mov	r1, r9
    4964:	6909      	ldr	r1, [r1, #16]
    4966:	6581      	str	r1, [r0, #88]	; 0x58
    4968:	4649      	mov	r1, r9
    496a:	6949      	ldr	r1, [r1, #20]
    496c:	65c1      	str	r1, [r0, #92]	; 0x5c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:457 (discriminator 1)
	}

	// integrate the buffered high frequency (typically 200Hz) gyro readings
	for (j = 0; j < iOverSampleRatio; j++)
    496e:	2a00      	cmp	r2, #0
    4970:	dc00      	bgt.n	4974 <fRun_3DOF_Y_BASIC+0x40>
    4972:	e09b      	b.n	4aac <fRun_3DOF_Y_BASIC+0x178>
    4974:	2364      	movs	r3, #100	; 0x64
    4976:	4443      	add	r3, r8
    4978:	469a      	mov	sl, r3
    497a:	2338      	movs	r3, #56	; 0x38
    497c:	4443      	add	r3, r8
    497e:	469b      	mov	fp, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:457
    4980:	2500      	movs	r5, #0
    4982:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:462 (discriminator 1)
	{
		// compute the incremental fast (typically 200Hz) rotation vector rvec (deg)
		for (i = X; i <= Z; i++)
		{
			rvec[i] = ((float)pthisGyro->iYpFast[j][i] * pthisGyro->fDegPerSecPerCount) * pthisSV->fFastdeltat;
    4984:	464a      	mov	r2, r9
    4986:	005c      	lsls	r4, r3, #1
    4988:	18e3      	adds	r3, r4, r3
    498a:	005b      	lsls	r3, r3, #1
    498c:	444b      	add	r3, r9
    498e:	1c1c      	adds	r4, r3, #0
    4990:	6997      	ldr	r7, [r2, #24]
    4992:	4642      	mov	r2, r8
    4994:	231c      	movs	r3, #28
    4996:	5ee0      	ldrsh	r0, [r4, r3]
    4998:	6f56      	ldr	r6, [r2, #116]	; 0x74
    499a:	f7fc fdbb 	bl	1514 <__aeabi_i2f>
    499e:	1c39      	adds	r1, r7, #0
    49a0:	f7fc fae8 	bl	f74 <__aeabi_fmul>
    49a4:	1c31      	adds	r1, r6, #0
    49a6:	f7fc fae5 	bl	f74 <__aeabi_fmul>
    49aa:	9005      	str	r0, [sp, #20]
    49ac:	231e      	movs	r3, #30
    49ae:	5ee0      	ldrsh	r0, [r4, r3]
    49b0:	f7fc fdb0 	bl	1514 <__aeabi_i2f>
    49b4:	1c39      	adds	r1, r7, #0
    49b6:	f7fc fadd 	bl	f74 <__aeabi_fmul>
    49ba:	1c31      	adds	r1, r6, #0
    49bc:	f7fc fada 	bl	f74 <__aeabi_fmul>
    49c0:	9006      	str	r0, [sp, #24]
    49c2:	2320      	movs	r3, #32
    49c4:	5ee0      	ldrsh	r0, [r4, r3]
    49c6:	f7fc fda5 	bl	1514 <__aeabi_i2f>
    49ca:	1c01      	adds	r1, r0, #0
    49cc:	1c38      	adds	r0, r7, #0
    49ce:	f7fc fad1 	bl	f74 <__aeabi_fmul>
    49d2:	1c01      	adds	r1, r0, #0
    49d4:	1c30      	adds	r0, r6, #0
    49d6:	f7fc facd 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:466 (discriminator 1)
		}

		// compute the incremental quaternion fDeltaq from the rotation vector
		fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), rvec, 1.0F);
    49da:	22fe      	movs	r2, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:462 (discriminator 1)
	for (j = 0; j < iOverSampleRatio; j++)
	{
		// compute the incremental fast (typically 200Hz) rotation vector rvec (deg)
		for (i = X; i <= Z; i++)
		{
			rvec[i] = ((float)pthisGyro->iYpFast[j][i] * pthisGyro->fDegPerSecPerCount) * pthisSV->fFastdeltat;
    49dc:	9007      	str	r0, [sp, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:466 (discriminator 1)
		}

		// compute the incremental quaternion fDeltaq from the rotation vector
		fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), rvec, 1.0F);
    49de:	0592      	lsls	r2, r2, #22
    49e0:	4650      	mov	r0, sl
    49e2:	a905      	add	r1, sp, #20
    49e4:	f009 fcd6 	bl	e394 <fQuaternionFromRotationVectorDeg>
    49e8:	3501      	adds	r5, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:469 (discriminator 1)

		// incrementally rotate the orientation quaternion fq
		qAeqAxB(&(pthisSV->fq), &(pthisSV->fDeltaq));
    49ea:	4658      	mov	r0, fp
    49ec:	4651      	mov	r1, sl
    49ee:	f00a fa61 	bl	eeb4 <qAeqAxB>
    49f2:	b2ed      	uxtb	r5, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:457 (discriminator 1)
	{
		pthisSV->fOmega[i] = pthisGyro->fYp[i];
	}

	// integrate the buffered high frequency (typically 200Hz) gyro readings
	for (j = 0; j < iOverSampleRatio; j++)
    49f4:	9a02      	ldr	r2, [sp, #8]
    49f6:	b26b      	sxtb	r3, r5
    49f8:	4293      	cmp	r3, r2
    49fa:	dbc3      	blt.n	4984 <fRun_3DOF_Y_BASIC+0x50>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:477
	// re-normalize the orientation quaternion to stop error propagation
	// the renormalization function ensures that the scalar component q0 is non-negative
	fqAeqNormqA(&(pthisSV->fq));

	// get the rotation matrix from the quaternion
	fRotationMatrixFromQuaternion(pthisSV->fR, &(pthisSV->fq));
    49fc:	4644      	mov	r4, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:474
		qAeqAxB(&(pthisSV->fq), &(pthisSV->fDeltaq));
	}

	// re-normalize the orientation quaternion to stop error propagation
	// the renormalization function ensures that the scalar component q0 is non-negative
	fqAeqNormqA(&(pthisSV->fq));
    49fe:	4658      	mov	r0, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:477

	// get the rotation matrix from the quaternion
	fRotationMatrixFromQuaternion(pthisSV->fR, &(pthisSV->fq));
    4a00:	3414      	adds	r4, #20
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:474
		qAeqAxB(&(pthisSV->fq), &(pthisSV->fDeltaq));
	}

	// re-normalize the orientation quaternion to stop error propagation
	// the renormalization function ensures that the scalar component q0 is non-negative
	fqAeqNormqA(&(pthisSV->fq));
    4a02:	f00a faf3 	bl	efec <fqAeqNormqA>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:477

	// get the rotation matrix from the quaternion
	fRotationMatrixFromQuaternion(pthisSV->fR, &(pthisSV->fq));
    4a06:	1c20      	adds	r0, r4, #0
    4a08:	4659      	mov	r1, fp
    4a0a:	f009 fe2f 	bl	e66c <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:480

	// compute the rotation vector from the a posteriori quaternion
	fRotationVectorDegFromQuaternion(&(pthisSV->fq), pthisSV->fRVec);
    4a0e:	4641      	mov	r1, r8
    4a10:	4658      	mov	r0, fp
    4a12:	3148      	adds	r1, #72	; 0x48
    4a14:	f009 feba 	bl	e78c <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:486

	// *********************************************************************************
	// compute the Euler angles from the orientation matrix
	// *********************************************************************************

	if (ithisCoordSystem == NED)
    4a18:	9b03      	ldr	r3, [sp, #12]
    4a1a:	2b00      	cmp	r3, #0
    4a1c:	d02c      	beq.n	4a78 <fRun_3DOF_Y_BASIC+0x144>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:492
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fR, &(pthisSV->fPhi), &(pthisSV->fThe), &(pthisSV->fPsi),
				&(pthisSV->fRho), &(pthisSV->fChi));
	}
	else if (ithisCoordSystem == ANDROID)
    4a1e:	2b01      	cmp	r3, #1
    4a20:	d037      	beq.n	4a92 <fRun_3DOF_Y_BASIC+0x15e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:501
				&(pthisSV->fRho), &(pthisSV->fChi));
	}
	else
	{
		// calculate Win8 Euler angles
		fWin8AnglesDegFromRotationMatrix(pthisSV->fR, &(pthisSV->fPhi), &(pthisSV->fThe), &(pthisSV->fPsi),
    4a22:	4641      	mov	r1, r8
    4a24:	4643      	mov	r3, r8
    4a26:	310c      	adds	r1, #12
    4a28:	9100      	str	r1, [sp, #0]
    4a2a:	3104      	adds	r1, #4
    4a2c:	1d1a      	adds	r2, r3, #4
    4a2e:	9101      	str	r1, [sp, #4]
    4a30:	3308      	adds	r3, #8
    4a32:	1c20      	adds	r0, r4, #0
    4a34:	4641      	mov	r1, r8
    4a36:	f009 fbeb 	bl	e210 <fWin8AnglesDegFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:506
				&(pthisSV->fRho), &(pthisSV->fChi));
	}

	return;
} // end fRun_3DOF_Y_BASIC
    4a3a:	b009      	add	sp, #36	; 0x24
    4a3c:	bc3c      	pop	{r2, r3, r4, r5}
    4a3e:	4690      	mov	r8, r2
    4a40:	4699      	mov	r9, r3
    4a42:	46a2      	mov	sl, r4
    4a44:	46ab      	mov	fp, r5
    4a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
fInit_3DOF_Y_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:100
} // end fInit_3DOF_B_BASIC

void fInit_3DOF_Y_BASIC(struct SV_3DOF_Y_BASIC *pthisSV, int16 iSensorFS, int16 iOverSampleRatio)
{
	// compute the sampling time intervals (secs)
	pthisSV->fFastdeltat = 1.0F / (float) iSensorFS;
    4a48:	4b1a      	ldr	r3, [pc, #104]	; (4ab4 <fRun_3DOF_Y_BASIC+0x180>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:104
	pthisSV->fdeltat = (float) iOverSampleRatio * pthisSV->fFastdeltat;

	// initialize orientation estimates
	f3x3matrixAeqI(pthisSV->fR);
    4a4a:	3014      	adds	r0, #20
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:100
} // end fInit_3DOF_B_BASIC

void fInit_3DOF_Y_BASIC(struct SV_3DOF_Y_BASIC *pthisSV, int16 iSensorFS, int16 iOverSampleRatio)
{
	// compute the sampling time intervals (secs)
	pthisSV->fFastdeltat = 1.0F / (float) iSensorFS;
    4a4c:	6603      	str	r3, [r0, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:101
	pthisSV->fdeltat = (float) iOverSampleRatio * pthisSV->fFastdeltat;
    4a4e:	4b1a      	ldr	r3, [pc, #104]	; (4ab8 <fRun_3DOF_Y_BASIC+0x184>)
    4a50:	6643      	str	r3, [r0, #100]	; 0x64
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:104

	// initialize orientation estimates
	f3x3matrixAeqI(pthisSV->fR);
    4a52:	f007 fdb5 	bl	c5c0 <f3x3matrixAeqI>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:105
	fqAeq1(&(pthisSV->fq));
    4a56:	4640      	mov	r0, r8
    4a58:	3038      	adds	r0, #56	; 0x38
    4a5a:	f00a fb31 	bl	f0c0 <fqAeq1>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:108

	// update the default quaternion type supported to the most sophisticated
	if (globals.DefaultQuaternionPacketType < Q3G)
    4a5e:	4b17      	ldr	r3, [pc, #92]	; (4abc <fRun_3DOF_Y_BASIC+0x188>)
    4a60:	795a      	ldrb	r2, [r3, #5]
    4a62:	2a01      	cmp	r2, #1
    4a64:	d904      	bls.n	4a70 <fRun_3DOF_Y_BASIC+0x13c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:112
		globals.QuaternionPacketType = globals.DefaultQuaternionPacketType = Q3G; 

	// clear the reset flag
	pthisSV->resetflag = false;
    4a66:	2200      	movs	r2, #0
    4a68:	237c      	movs	r3, #124	; 0x7c
    4a6a:	4641      	mov	r1, r8
    4a6c:	54ca      	strb	r2, [r1, r3]
    4a6e:	e7e4      	b.n	4a3a <fRun_3DOF_Y_BASIC+0x106>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:109
	f3x3matrixAeqI(pthisSV->fR);
	fqAeq1(&(pthisSV->fq));

	// update the default quaternion type supported to the most sophisticated
	if (globals.DefaultQuaternionPacketType < Q3G)
		globals.QuaternionPacketType = globals.DefaultQuaternionPacketType = Q3G; 
    4a70:	2202      	movs	r2, #2
    4a72:	715a      	strb	r2, [r3, #5]
    4a74:	711a      	strb	r2, [r3, #4]
    4a76:	e7f6      	b.n	4a66 <fRun_3DOF_Y_BASIC+0x132>
fRun_3DOF_Y_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:489
	// *********************************************************************************

	if (ithisCoordSystem == NED)
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fR, &(pthisSV->fPhi), &(pthisSV->fThe), &(pthisSV->fPsi),
    4a78:	4641      	mov	r1, r8
    4a7a:	4643      	mov	r3, r8
    4a7c:	310c      	adds	r1, #12
    4a7e:	9100      	str	r1, [sp, #0]
    4a80:	3104      	adds	r1, #4
    4a82:	1d1a      	adds	r2, r3, #4
    4a84:	9101      	str	r1, [sp, #4]
    4a86:	3308      	adds	r3, #8
    4a88:	1c20      	adds	r0, r4, #0
    4a8a:	4641      	mov	r1, r8
    4a8c:	f009 facc 	bl	e028 <fNEDAnglesDegFromRotationMatrix>
    4a90:	e7d3      	b.n	4a3a <fRun_3DOF_Y_BASIC+0x106>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:495
				&(pthisSV->fRho), &(pthisSV->fChi));
	}
	else if (ithisCoordSystem == ANDROID)
	{
		// calculate the Android Euler angles
		fAndroidAnglesDegFromRotationMatrix(pthisSV->fR, &(pthisSV->fPhi), &(pthisSV->fThe), &(pthisSV->fPsi),
    4a92:	4641      	mov	r1, r8
    4a94:	4643      	mov	r3, r8
    4a96:	310c      	adds	r1, #12
    4a98:	9100      	str	r1, [sp, #0]
    4a9a:	3104      	adds	r1, #4
    4a9c:	1d1a      	adds	r2, r3, #4
    4a9e:	9101      	str	r1, [sp, #4]
    4aa0:	3308      	adds	r3, #8
    4aa2:	1c20      	adds	r0, r4, #0
    4aa4:	4641      	mov	r1, r8
    4aa6:	f009 fb39 	bl	e11c <fAndroidAnglesDegFromRotationMatrix>
    4aaa:	e7c6      	b.n	4a3a <fRun_3DOF_Y_BASIC+0x106>
    4aac:	2338      	movs	r3, #56	; 0x38
    4aae:	4443      	add	r3, r8
    4ab0:	469b      	mov	fp, r3
    4ab2:	e7a3      	b.n	49fc <fRun_3DOF_Y_BASIC+0xc8>
    4ab4:	3ba3d70a 	.word	0x3ba3d70a
    4ab8:	3d23d70a 	.word	0x3d23d70a
    4abc:	200005dc 	.word	0x200005dc

00004ac0 <fRun_6DOF_GB_BASIC>:
fRun_6DOF_GB_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:510
	return;
} // end fRun_3DOF_Y_BASIC

// 6DOF orientation function which calls ecompass and implements low pass filters
void fRun_6DOF_GB_BASIC(struct SV_6DOF_GB_BASIC *pthisSV, struct MagSensor *pthisMag, struct AccelSensor *pthisAccel, int32 loopcounter, int16 ithisCoordSystem)
{
    4ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ac2:	4647      	mov	r7, r8
    4ac4:	b480      	push	{r7}
    4ac6:	b082      	sub	sp, #8
    4ac8:	ac08      	add	r4, sp, #32
    4aca:	2600      	movs	r6, #0
    4acc:	5fa6      	ldrsh	r6, [r4, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:512
	// do a reset and return if requested
	if (pthisSV->resetflag)
    4ace:	24a8      	movs	r4, #168	; 0xa8
    4ad0:	5704      	ldrsb	r4, [r0, r4]
    4ad2:	2c00      	cmp	r4, #0
    4ad4:	d013      	beq.n	4afe <fRun_6DOF_GB_BASIC+0x3e>
fInit_6DOF_GB_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:120
} // end fInit_3DOF_Y_BASIC

void fInit_6DOF_GB_BASIC(struct SV_6DOF_GB_BASIC *pthisSV, float flpftimesecs, int16 iSensorFS, int16 iOverSampleRatio)
{
	// set algorithm sampling interval (typically 25Hz)
	pthisSV->fdeltat = (float) iOverSampleRatio / (float) iSensorFS;
    4ad6:	23a0      	movs	r3, #160	; 0xa0
    4ad8:	4a60      	ldr	r2, [pc, #384]	; (4c5c <fRun_6DOF_GB_BASIC+0x19c>)
    4ada:	50c2      	str	r2, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:124

	// set low pass filter constant with maximum value 1.0 (all pass) decreasing to 0.0 (increasing low pass)
	if (flpftimesecs > pthisSV->fdeltat)
		pthisSV->flpf = pthisSV->fdeltat / flpftimesecs;
    4adc:	4a60      	ldr	r2, [pc, #384]	; (4c60 <fRun_6DOF_GB_BASIC+0x1a0>)
    4ade:	3304      	adds	r3, #4
    4ae0:	50c2      	str	r2, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:129
	else
		pthisSV->flpf = 1.0F;

	// update the default quaternion type supported to the most sophisticated
	if (globals.DefaultQuaternionPacketType < Q6MA)
    4ae2:	4b60      	ldr	r3, [pc, #384]	; (4c64 <fRun_6DOF_GB_BASIC+0x1a4>)
    4ae4:	795a      	ldrb	r2, [r3, #5]
    4ae6:	2a02      	cmp	r2, #2
    4ae8:	d802      	bhi.n	4af0 <fRun_6DOF_GB_BASIC+0x30>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:130
		globals.QuaternionPacketType = globals.DefaultQuaternionPacketType = Q6MA; 
    4aea:	2203      	movs	r2, #3
    4aec:	715a      	strb	r2, [r3, #5]
    4aee:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:133

	// clear the reset flag
	pthisSV->resetflag = false;
    4af0:	2200      	movs	r2, #0
    4af2:	23a8      	movs	r3, #168	; 0xa8
    4af4:	54c2      	strb	r2, [r0, r3]
fRun_6DOF_GB_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:567

	// low pass filter the geomagnetic inclination angle with a simple exponential filter
	fLPFScalar(&(pthisSV->fDelta), &(pthisSV->fLPDelta), pthisSV->flpf, loopcounter);

	return;
}  // end fRun_6DOF_GB_BASIC
    4af6:	b002      	add	sp, #8
    4af8:	bc04      	pop	{r2}
    4afa:	4690      	mov	r8, r2
    4afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4afe:	1c1d      	adds	r5, r3, #0
    4b00:	1c04      	adds	r4, r0, #0
    4b02:	1c13      	adds	r3, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:519
		fInit_6DOF_GB_BASIC(pthisSV, 0.6F, SENSORFS, OVERSAMPLE_RATIO);
		return;
	}

	// call the eCompass algorithm to get the instantaneous orientation matrix and inclination angle
	if (ithisCoordSystem == NED)
    4b04:	2e00      	cmp	r6, #0
    4b06:	d03e      	beq.n	4b86 <fRun_6DOF_GB_BASIC+0xc6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:524
	{
		// call the NED eCompass
		feCompassNED(pthisSV->fR, &(pthisSV->fDelta), pthisMag->fBc, pthisAccel->fGp);
	}
	else if  (ithisCoordSystem == ANDROID)
    4b08:	2e01      	cmp	r6, #1
    4b0a:	d071      	beq.n	4bf0 <fRun_6DOF_GB_BASIC+0x130>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:532
		feCompassAndroid(pthisSV->fR, &(pthisSV->fDelta), pthisMag->fBc, pthisAccel->fGp);
	}
	else
	{
		// call the Win8 eCompass
		feCompassWin8(pthisSV->fR, &(pthisSV->fDelta), pthisMag->fBc, pthisAccel->fGp);
    4b0c:	1c06      	adds	r6, r0, #0
    4b0e:	1c07      	adds	r7, r0, #0
    4b10:	1c0a      	adds	r2, r1, #0
    4b12:	3764      	adds	r7, #100	; 0x64
    4b14:	3698      	adds	r6, #152	; 0x98
    4b16:	3230      	adds	r2, #48	; 0x30
    4b18:	3318      	adds	r3, #24
    4b1a:	1c38      	adds	r0, r7, #0
    4b1c:	1c31      	adds	r1, r6, #0
    4b1e:	f009 f8fd 	bl	dd1c <feCompassWin8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:536
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    4b22:	1c38      	adds	r0, r7, #0
    4b24:	3724      	adds	r7, #36	; 0x24
    4b26:	1c39      	adds	r1, r7, #0
    4b28:	f009 fcfe 	bl	e528 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:539

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    4b2c:	23a4      	movs	r3, #164	; 0xa4
    4b2e:	1c21      	adds	r1, r4, #0
    4b30:	58e2      	ldr	r2, [r4, r3]
    4b32:	1c38      	adds	r0, r7, #0
    4b34:	3154      	adds	r1, #84	; 0x54
    4b36:	3f50      	subs	r7, #80	; 0x50
    4b38:	3b04      	subs	r3, #4
    4b3a:	58e3      	ldr	r3, [r4, r3]
    4b3c:	9100      	str	r1, [sp, #0]
    4b3e:	9501      	str	r5, [sp, #4]
    4b40:	1c39      	adds	r1, r7, #0
    4b42:	f009 fe7f 	bl	e844 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:540
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    4b46:	2314      	movs	r3, #20
    4b48:	4698      	mov	r8, r3
    4b4a:	44a0      	add	r8, r4
    4b4c:	4640      	mov	r0, r8
    4b4e:	1c39      	adds	r1, r7, #0
    4b50:	f009 fd8c 	bl	e66c <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:541
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    4b54:	1c21      	adds	r1, r4, #0
    4b56:	1c38      	adds	r0, r7, #0
    4b58:	3148      	adds	r1, #72	; 0x48
    4b5a:	f009 fe17 	bl	e78c <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:559
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}
	else
	{
		// calculate the Windows 8 Euler angles
		fWin8AnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    4b5e:	1c23      	adds	r3, r4, #0
    4b60:	330c      	adds	r3, #12
    4b62:	9300      	str	r3, [sp, #0]
    4b64:	3304      	adds	r3, #4
    4b66:	9301      	str	r3, [sp, #4]
    4b68:	1d22      	adds	r2, r4, #4
    4b6a:	4640      	mov	r0, r8
    4b6c:	1c21      	adds	r1, r4, #0
    4b6e:	3b08      	subs	r3, #8
    4b70:	f009 fb4e 	bl	e210 <fWin8AnglesDegFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:564
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}

	// low pass filter the geomagnetic inclination angle with a simple exponential filter
	fLPFScalar(&(pthisSV->fDelta), &(pthisSV->fLPDelta), pthisSV->flpf, loopcounter);
    4b74:	1c21      	adds	r1, r4, #0
    4b76:	23a4      	movs	r3, #164	; 0xa4
    4b78:	319c      	adds	r1, #156	; 0x9c
    4b7a:	58e2      	ldr	r2, [r4, r3]
    4b7c:	1c30      	adds	r0, r6, #0
    4b7e:	1c2b      	adds	r3, r5, #0
    4b80:	f00a f8de 	bl	ed40 <fLPFScalar>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:566

	return;
    4b84:	e7b7      	b.n	4af6 <fRun_6DOF_GB_BASIC+0x36>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:522

	// call the eCompass algorithm to get the instantaneous orientation matrix and inclination angle
	if (ithisCoordSystem == NED)
	{
		// call the NED eCompass
		feCompassNED(pthisSV->fR, &(pthisSV->fDelta), pthisMag->fBc, pthisAccel->fGp);
    4b86:	1c06      	adds	r6, r0, #0
    4b88:	1c07      	adds	r7, r0, #0
    4b8a:	1c0a      	adds	r2, r1, #0
    4b8c:	3764      	adds	r7, #100	; 0x64
    4b8e:	3698      	adds	r6, #152	; 0x98
    4b90:	3230      	adds	r2, #48	; 0x30
    4b92:	3318      	adds	r3, #24
    4b94:	1c38      	adds	r0, r7, #0
    4b96:	1c31      	adds	r1, r6, #0
    4b98:	f008 fdbe 	bl	d718 <feCompassNED>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:536
		// call the Win8 eCompass
		feCompassWin8(pthisSV->fR, &(pthisSV->fDelta), pthisMag->fBc, pthisAccel->fGp);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    4b9c:	1c38      	adds	r0, r7, #0
    4b9e:	3724      	adds	r7, #36	; 0x24
    4ba0:	1c39      	adds	r1, r7, #0
    4ba2:	f009 fcc1 	bl	e528 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:539

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    4ba6:	23a4      	movs	r3, #164	; 0xa4
    4ba8:	1c21      	adds	r1, r4, #0
    4baa:	58e2      	ldr	r2, [r4, r3]
    4bac:	1c38      	adds	r0, r7, #0
    4bae:	3154      	adds	r1, #84	; 0x54
    4bb0:	3f50      	subs	r7, #80	; 0x50
    4bb2:	3b04      	subs	r3, #4
    4bb4:	58e3      	ldr	r3, [r4, r3]
    4bb6:	9100      	str	r1, [sp, #0]
    4bb8:	9501      	str	r5, [sp, #4]
    4bba:	1c39      	adds	r1, r7, #0
    4bbc:	f009 fe42 	bl	e844 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:540
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    4bc0:	2314      	movs	r3, #20
    4bc2:	4698      	mov	r8, r3
    4bc4:	44a0      	add	r8, r4
    4bc6:	4640      	mov	r0, r8
    4bc8:	1c39      	adds	r1, r7, #0
    4bca:	f009 fd4f 	bl	e66c <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:541
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    4bce:	1c21      	adds	r1, r4, #0
    4bd0:	1c38      	adds	r0, r7, #0
    4bd2:	3148      	adds	r1, #72	; 0x48
    4bd4:	f009 fdda 	bl	e78c <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:547

	// compute the low pass filtered Euler angles
	if (ithisCoordSystem == NED)
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    4bd8:	1c23      	adds	r3, r4, #0
    4bda:	330c      	adds	r3, #12
    4bdc:	9300      	str	r3, [sp, #0]
    4bde:	3304      	adds	r3, #4
    4be0:	9301      	str	r3, [sp, #4]
    4be2:	1d22      	adds	r2, r4, #4
    4be4:	4640      	mov	r0, r8
    4be6:	1c21      	adds	r1, r4, #0
    4be8:	3b08      	subs	r3, #8
    4bea:	f009 fa1d 	bl	e028 <fNEDAnglesDegFromRotationMatrix>
    4bee:	e7c1      	b.n	4b74 <fRun_6DOF_GB_BASIC+0xb4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:527
		feCompassNED(pthisSV->fR, &(pthisSV->fDelta), pthisMag->fBc, pthisAccel->fGp);
	}
	else if  (ithisCoordSystem == ANDROID)
	{
		// call the Android eCompass
		feCompassAndroid(pthisSV->fR, &(pthisSV->fDelta), pthisMag->fBc, pthisAccel->fGp);
    4bf0:	1c06      	adds	r6, r0, #0
    4bf2:	1c07      	adds	r7, r0, #0
    4bf4:	1c0a      	adds	r2, r1, #0
    4bf6:	3764      	adds	r7, #100	; 0x64
    4bf8:	3698      	adds	r6, #152	; 0x98
    4bfa:	3230      	adds	r2, #48	; 0x30
    4bfc:	3318      	adds	r3, #24
    4bfe:	1c38      	adds	r0, r7, #0
    4c00:	1c31      	adds	r1, r6, #0
    4c02:	f008 ff09 	bl	da18 <feCompassAndroid>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:536
		// call the Win8 eCompass
		feCompassWin8(pthisSV->fR, &(pthisSV->fDelta), pthisMag->fBc, pthisAccel->fGp);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    4c06:	1c38      	adds	r0, r7, #0
    4c08:	3724      	adds	r7, #36	; 0x24
    4c0a:	1c39      	adds	r1, r7, #0
    4c0c:	f009 fc8c 	bl	e528 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:539

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    4c10:	23a4      	movs	r3, #164	; 0xa4
    4c12:	1c21      	adds	r1, r4, #0
    4c14:	58e2      	ldr	r2, [r4, r3]
    4c16:	1c38      	adds	r0, r7, #0
    4c18:	3154      	adds	r1, #84	; 0x54
    4c1a:	3f50      	subs	r7, #80	; 0x50
    4c1c:	3b04      	subs	r3, #4
    4c1e:	58e3      	ldr	r3, [r4, r3]
    4c20:	9100      	str	r1, [sp, #0]
    4c22:	9501      	str	r5, [sp, #4]
    4c24:	1c39      	adds	r1, r7, #0
    4c26:	f009 fe0d 	bl	e844 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:540
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    4c2a:	2314      	movs	r3, #20
    4c2c:	4698      	mov	r8, r3
    4c2e:	44a0      	add	r8, r4
    4c30:	4640      	mov	r0, r8
    4c32:	1c39      	adds	r1, r7, #0
    4c34:	f009 fd1a 	bl	e66c <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:541
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    4c38:	1c21      	adds	r1, r4, #0
    4c3a:	1c38      	adds	r0, r7, #0
    4c3c:	3148      	adds	r1, #72	; 0x48
    4c3e:	f009 fda5 	bl	e78c <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:553
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}
	else if (ithisCoordSystem == ANDROID)
	{
		// calculate the Android Euler angles
		fAndroidAnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    4c42:	1c23      	adds	r3, r4, #0
    4c44:	330c      	adds	r3, #12
    4c46:	9300      	str	r3, [sp, #0]
    4c48:	3304      	adds	r3, #4
    4c4a:	9301      	str	r3, [sp, #4]
    4c4c:	1d22      	adds	r2, r4, #4
    4c4e:	4640      	mov	r0, r8
    4c50:	1c21      	adds	r1, r4, #0
    4c52:	3b08      	subs	r3, #8
    4c54:	f009 fa62 	bl	e11c <fAndroidAnglesDegFromRotationMatrix>
    4c58:	e78c      	b.n	4b74 <fRun_6DOF_GB_BASIC+0xb4>
    4c5a:	46c0      	nop			; (mov r8, r8)
    4c5c:	3d23d70a 	.word	0x3d23d70a
    4c60:	3d888888 	.word	0x3d888888
    4c64:	200005dc 	.word	0x200005dc

00004c68 <fRun_6DOF_GY_KALMAN>:
fRun_6DOF_GY_KALMAN():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:572
}  // end fRun_6DOF_GB_BASIC

// 6DOF accel + gyro Kalman filter algorithm 
void fRun_6DOF_GY_KALMAN(struct SV_6DOF_GY_KALMAN *pthisSV, struct AccelSensor *pthisAccel, struct GyroSensor *pthisGyro,
		int16 ithisCoordSystem, int16 iOverSampleRatio)
{	
    4c68:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c6a:	465f      	mov	r7, fp
    4c6c:	4656      	mov	r6, sl
    4c6e:	464d      	mov	r5, r9
    4c70:	4644      	mov	r4, r8
    4c72:	b4f0      	push	{r4, r5, r6, r7}
    4c74:	b0b7      	sub	sp, #220	; 0xdc
    4c76:	930b      	str	r3, [sp, #44]	; 0x2c
    4c78:	ab40      	add	r3, sp, #256	; 0x100
    4c7a:	4690      	mov	r8, r2
    4c7c:	2200      	movs	r2, #0
    4c7e:	5e9b      	ldrsh	r3, [r3, r2]
    4c80:	4683      	mov	fp, r0
    4c82:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:600
	int8 iColInd[3];
	int8 iRowInd[3];
	int8 iPivot[3];

	// do a reset and return if requested
	if (pthisSV->resetflag)
    4c84:	4bef      	ldr	r3, [pc, #956]	; (5044 <fRun_6DOF_GY_KALMAN+0x3dc>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:572
}  // end fRun_6DOF_GB_BASIC

// 6DOF accel + gyro Kalman filter algorithm 
void fRun_6DOF_GY_KALMAN(struct SV_6DOF_GY_KALMAN *pthisSV, struct AccelSensor *pthisAccel, struct GyroSensor *pthisGyro,
		int16 ithisCoordSystem, int16 iOverSampleRatio)
{	
    4c86:	468a      	mov	sl, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:600
	int8 iColInd[3];
	int8 iRowInd[3];
	int8 iPivot[3];

	// do a reset and return if requested
	if (pthisSV->resetflag)
    4c88:	56c3      	ldrsb	r3, [r0, r3]
    4c8a:	2b00      	cmp	r3, #0
    4c8c:	d001      	beq.n	4c92 <fRun_6DOF_GY_KALMAN+0x2a>
    4c8e:	f000 ffc1 	bl	5c14 <fRun_6DOF_GY_KALMAN+0xfac>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:607
		fInit_6DOF_GY_KALMAN(pthisSV, SENSORFS, OVERSAMPLE_RATIO);
		return;
	}

	// do a once-only orientation lock to accelerometer tilt 
	if (!pthisSV->iFirstOrientationLock)
    4c92:	1c02      	adds	r2, r0, #0
    4c94:	4bec      	ldr	r3, [pc, #944]	; (5048 <fRun_6DOF_GY_KALMAN+0x3e0>)
    4c96:	5ed3      	ldrsh	r3, [r2, r3]
    4c98:	2b00      	cmp	r3, #0
    4c9a:	d11b      	bne.n	4cd4 <fRun_6DOF_GY_KALMAN+0x6c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:610
	{
		// get the 3DOF orientation matrix and initial inclination angle
		if (ithisCoordSystem == NED)
    4c9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4c9e:	2b00      	cmp	r3, #0
    4ca0:	d101      	bne.n	4ca6 <fRun_6DOF_GY_KALMAN+0x3e>
    4ca2:	f000 ffc8 	bl	5c36 <fRun_6DOF_GY_KALMAN+0xfce>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:615
		{
			// call NED tilt function
			f3DOFTiltNED(pthisSV->fRPl, pthisAccel->fGpFast);
		}
		else if (ithisCoordSystem == ANDROID)
    4ca6:	2b01      	cmp	r3, #1
    4ca8:	d101      	bne.n	4cae <fRun_6DOF_GY_KALMAN+0x46>
    4caa:	f001 f820 	bl	5cee <fRun_6DOF_GY_KALMAN+0x1086>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:623
			f3DOFTiltAndroid(pthisSV->fRPl, pthisAccel->fGpFast);
		}
		else
		{
			// call Windows 8 tilt function
			f3DOFTiltWin8(pthisSV->fRPl, pthisAccel->fGpFast);
    4cae:	2314      	movs	r3, #20
    4cb0:	445b      	add	r3, fp
    4cb2:	1c18      	adds	r0, r3, #0
    4cb4:	310c      	adds	r1, #12
    4cb6:	930c      	str	r3, [sp, #48]	; 0x30
    4cb8:	f008 fbcc 	bl	d454 <f3DOFTiltWin8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:627
		}

		// get the orientation quaternion from the orientation matrix
		fQuaternionFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fqPl));
    4cbc:	2338      	movs	r3, #56	; 0x38
    4cbe:	445b      	add	r3, fp
    4cc0:	1c19      	adds	r1, r3, #0
    4cc2:	980c      	ldr	r0, [sp, #48]	; 0x30
    4cc4:	930e      	str	r3, [sp, #56]	; 0x38
    4cc6:	f009 fc2f 	bl	e528 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:630

		// set the orientation lock flag so this initial alignment is only performed once
		pthisSV->iFirstOrientationLock = 1;
    4cca:	2201      	movs	r2, #1
    4ccc:	4659      	mov	r1, fp
    4cce:	4bde      	ldr	r3, [pc, #888]	; (5048 <fRun_6DOF_GY_KALMAN+0x3e0>)
    4cd0:	52ca      	strh	r2, [r1, r3]
    4cd2:	e005      	b.n	4ce0 <fRun_6DOF_GY_KALMAN+0x78>
    4cd4:	2314      	movs	r3, #20
    4cd6:	445b      	add	r3, fp
    4cd8:	930c      	str	r3, [sp, #48]	; 0x30
    4cda:	2338      	movs	r3, #56	; 0x38
    4cdc:	445b      	add	r3, fp
    4cde:	930e      	str	r3, [sp, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:643 (discriminator 1)
	// omega[k] = yG[k] - b-[k] = yG[k] - b+[k-1] (deg/s)
	// this involves a small angle approximation but the resulting angular velocity is
	// only computed for transmission over bluetooth and not used for orientation determination.
	for (i = X; i <= Z; i++)
	{
		pthisSV->fOmega[i] = pthisGyro->fYp[i] - pthisSV->fbPl[i];
    4ce0:	4643      	mov	r3, r8
    4ce2:	68d8      	ldr	r0, [r3, #12]
    4ce4:	465b      	mov	r3, fp
    4ce6:	6e59      	ldr	r1, [r3, #100]	; 0x64
    4ce8:	f7fc fa76 	bl	11d8 <__aeabi_fsub>
    4cec:	465b      	mov	r3, fp
    4cee:	6558      	str	r0, [r3, #84]	; 0x54
    4cf0:	4643      	mov	r3, r8
    4cf2:	6918      	ldr	r0, [r3, #16]
    4cf4:	465b      	mov	r3, fp
    4cf6:	6e99      	ldr	r1, [r3, #104]	; 0x68
    4cf8:	f7fc fa6e 	bl	11d8 <__aeabi_fsub>
    4cfc:	465b      	mov	r3, fp
    4cfe:	6598      	str	r0, [r3, #88]	; 0x58
    4d00:	4643      	mov	r3, r8
    4d02:	6958      	ldr	r0, [r3, #20]
    4d04:	465b      	mov	r3, fp
    4d06:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
    4d08:	f7fc fa66 	bl	11d8 <__aeabi_fsub>
    4d0c:	465b      	mov	r3, fp
    4d0e:	65d8      	str	r0, [r3, #92]	; 0x5c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:647 (discriminator 1)
	}

	// initialize the a priori orientation quaternion to the a posteriori orientation estimate
	pthisSV->fqMi = pthisSV->fqPl;
    4d10:	23b8      	movs	r3, #184	; 0xb8
    4d12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4d14:	445b      	add	r3, fp
    4d16:	9304      	str	r3, [sp, #16]
    4d18:	ca13      	ldmia	r2!, {r0, r1, r4}
    4d1a:	c313      	stmia	r3!, {r0, r1, r4}
    4d1c:	6812      	ldr	r2, [r2, #0]
    4d1e:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:650 (discriminator 1)

	// integrate the buffered high frequency (typically 200Hz) gyro readings
	for (j = 0; j < iOverSampleRatio; j++)
    4d20:	464b      	mov	r3, r9
    4d22:	2b00      	cmp	r3, #0
    4d24:	dc01      	bgt.n	4d2a <fRun_6DOF_GY_KALMAN+0xc2>
    4d26:	f000 ffeb 	bl	5d00 <fRun_6DOF_GY_KALMAN+0x1098>
    4d2a:	23c8      	movs	r3, #200	; 0xc8
    4d2c:	445b      	add	r3, fp
    4d2e:	1c1a      	adds	r2, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:655
	{
		// compute the incremental fast (typically 200Hz) rotation vector rvec (deg)
		for (i = X; i <= Z; i++)
		{
			rvec[i] = (((float)pthisGyro->iYpFast[j][i] * pthisGyro->fDegPerSecPerCount) - pthisSV->fbPl[i]) * pthisSV->fFastdeltat;
    4d30:	4651      	mov	r1, sl
    4d32:	930f      	str	r3, [sp, #60]	; 0x3c
    4d34:	465e      	mov	r6, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:650

	// initialize the a priori orientation quaternion to the a posteriori orientation estimate
	pthisSV->fqMi = pthisSV->fqPl;

	// integrate the buffered high frequency (typically 200Hz) gyro readings
	for (j = 0; j < iOverSampleRatio; j++)
    4d36:	2500      	movs	r5, #0
    4d38:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:655
	{
		// compute the incremental fast (typically 200Hz) rotation vector rvec (deg)
		for (i = X; i <= Z; i++)
		{
			rvec[i] = (((float)pthisGyro->iYpFast[j][i] * pthisGyro->fDegPerSecPerCount) - pthisSV->fbPl[i]) * pthisSV->fFastdeltat;
    4d3a:	4693      	mov	fp, r2
    4d3c:	9102      	str	r1, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:655 (discriminator 1)
    4d3e:	4642      	mov	r2, r8
    4d40:	005c      	lsls	r4, r3, #1
    4d42:	18e3      	adds	r3, r4, r3
    4d44:	005b      	lsls	r3, r3, #1
    4d46:	4443      	add	r3, r8
    4d48:	6992      	ldr	r2, [r2, #24]
    4d4a:	1c1c      	adds	r4, r3, #0
    4d4c:	4692      	mov	sl, r2
    4d4e:	4abf      	ldr	r2, [pc, #764]	; (504c <fRun_6DOF_GY_KALMAN+0x3e4>)
    4d50:	231c      	movs	r3, #28
    4d52:	5ee0      	ldrsh	r0, [r4, r3]
    4d54:	58b7      	ldr	r7, [r6, r2]
    4d56:	f7fc fbdd 	bl	1514 <__aeabi_i2f>
    4d5a:	4651      	mov	r1, sl
    4d5c:	f7fc f90a 	bl	f74 <__aeabi_fmul>
    4d60:	6e71      	ldr	r1, [r6, #100]	; 0x64
    4d62:	f7fc fa39 	bl	11d8 <__aeabi_fsub>
    4d66:	1c39      	adds	r1, r7, #0
    4d68:	f7fc f904 	bl	f74 <__aeabi_fmul>
    4d6c:	9015      	str	r0, [sp, #84]	; 0x54
    4d6e:	231e      	movs	r3, #30
    4d70:	5ee0      	ldrsh	r0, [r4, r3]
    4d72:	f7fc fbcf 	bl	1514 <__aeabi_i2f>
    4d76:	4651      	mov	r1, sl
    4d78:	f7fc f8fc 	bl	f74 <__aeabi_fmul>
    4d7c:	6eb1      	ldr	r1, [r6, #104]	; 0x68
    4d7e:	f7fc fa2b 	bl	11d8 <__aeabi_fsub>
    4d82:	1c39      	adds	r1, r7, #0
    4d84:	f7fc f8f6 	bl	f74 <__aeabi_fmul>
    4d88:	9016      	str	r0, [sp, #88]	; 0x58
    4d8a:	2320      	movs	r3, #32
    4d8c:	5ee0      	ldrsh	r0, [r4, r3]
    4d8e:	f7fc fbc1 	bl	1514 <__aeabi_i2f>
    4d92:	1c01      	adds	r1, r0, #0
    4d94:	4650      	mov	r0, sl
    4d96:	f7fc f8ed 	bl	f74 <__aeabi_fmul>
    4d9a:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
    4d9c:	f7fc fa1c 	bl	11d8 <__aeabi_fsub>
    4da0:	1c01      	adds	r1, r0, #0
    4da2:	1c38      	adds	r0, r7, #0
    4da4:	f7fc f8e6 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:659 (discriminator 1)
		}

		// compute the incremental quaternion fDeltaq from the rotation vector
		fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), rvec, 1.0F);
    4da8:	22fe      	movs	r2, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:655 (discriminator 1)
	for (j = 0; j < iOverSampleRatio; j++)
	{
		// compute the incremental fast (typically 200Hz) rotation vector rvec (deg)
		for (i = X; i <= Z; i++)
		{
			rvec[i] = (((float)pthisGyro->iYpFast[j][i] * pthisGyro->fDegPerSecPerCount) - pthisSV->fbPl[i]) * pthisSV->fFastdeltat;
    4daa:	9017      	str	r0, [sp, #92]	; 0x5c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:659 (discriminator 1)
		}

		// compute the incremental quaternion fDeltaq from the rotation vector
		fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), rvec, 1.0F);
    4dac:	a915      	add	r1, sp, #84	; 0x54
    4dae:	4658      	mov	r0, fp
    4db0:	0592      	lsls	r2, r2, #22
    4db2:	3501      	adds	r5, #1
    4db4:	f009 faee 	bl	e394 <fQuaternionFromRotationVectorDeg>
    4db8:	b2ed      	uxtb	r5, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:663 (discriminator 1)

		// incrementally rotate the a priori orientation quaternion fqMi
		// the a posteriori orientation is re-normalized later so this update is stable
		qAeqAxB(&(pthisSV->fqMi), &(pthisSV->fDeltaq));
    4dba:	9804      	ldr	r0, [sp, #16]
    4dbc:	4659      	mov	r1, fp
    4dbe:	f00a f879 	bl	eeb4 <qAeqAxB>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:650 (discriminator 1)

	// initialize the a priori orientation quaternion to the a posteriori orientation estimate
	pthisSV->fqMi = pthisSV->fqPl;

	// integrate the buffered high frequency (typically 200Hz) gyro readings
	for (j = 0; j < iOverSampleRatio; j++)
    4dc2:	b26b      	sxtb	r3, r5
    4dc4:	454b      	cmp	r3, r9
    4dc6:	dbba      	blt.n	4d3e <fRun_6DOF_GY_KALMAN+0xd6>
    4dc8:	9b02      	ldr	r3, [sp, #8]
    4dca:	46b3      	mov	fp, r6
    4dcc:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:667
		// the a posteriori orientation is re-normalized later so this update is stable
		qAeqAxB(&(pthisSV->fqMi), &(pthisSV->fDeltaq));
	}

	// get the a priori rotation matrix from the a priori quaternion
	fRotationMatrixFromQuaternion(pthisSV->fRMi, &(pthisSV->fqMi));
    4dce:	4658      	mov	r0, fp
    4dd0:	9904      	ldr	r1, [sp, #16]
    4dd2:	3094      	adds	r0, #148	; 0x94
    4dd4:	f009 fc4a 	bl	e66c <fRotationMatrixFromQuaternion>
    4dd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4dda:	2b00      	cmp	r3, #0
    4ddc:	d101      	bne.n	4de2 <fRun_6DOF_GY_KALMAN+0x17a>
    4dde:	f000 fec2 	bl	5b66 <fRun_6DOF_GY_KALMAN+0xefe>
    4de2:	2b02      	cmp	r3, #2
    4de4:	d101      	bne.n	4dea <fRun_6DOF_GY_KALMAN+0x182>
    4de6:	f000 ff2f 	bl	5c48 <fRun_6DOF_GY_KALMAN+0xfe0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:686
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    4dea:	239c      	movs	r3, #156	; 0x9c
    4dec:	465a      	mov	r2, fp
    4dee:	58d4      	ldr	r4, [r2, r3]
    4df0:	2380      	movs	r3, #128	; 0x80
    4df2:	061b      	lsls	r3, r3, #24
    4df4:	18e2      	adds	r2, r4, r3
    4df6:	4659      	mov	r1, fp
    4df8:	23fc      	movs	r3, #252	; 0xfc
    4dfa:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    4dfc:	3b24      	subs	r3, #36	; 0x24
    4dfe:	58c8      	ldr	r0, [r1, r3]
    4e00:	21fc      	movs	r1, #252	; 0xfc
    4e02:	0589      	lsls	r1, r1, #22
    4e04:	f7fc f8b6 	bl	f74 <__aeabi_fmul>
    4e08:	2384      	movs	r3, #132	; 0x84
    4e0a:	465a      	mov	r2, fp
    4e0c:	005b      	lsls	r3, r3, #1
    4e0e:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:701
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
		}
		else
		{
			// Android has negative sign for gravity: y = a - g, g = -y + a
			pthisSV->fgErrSeMi[i] = -pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    4e10:	4653      	mov	r3, sl
    4e12:	68d9      	ldr	r1, [r3, #12]
    4e14:	f7fc f9e0 	bl	11d8 <__aeabi_fsub>
    4e18:	1c21      	adds	r1, r4, #0
    4e1a:	f7fb fd3d 	bl	898 <__aeabi_fadd>
    4e1e:	465a      	mov	r2, fp
    4e20:	23f0      	movs	r3, #240	; 0xf0
    4e22:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:686
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    4e24:	3b48      	subs	r3, #72	; 0x48
    4e26:	58d4      	ldr	r4, [r2, r3]
    4e28:	2380      	movs	r3, #128	; 0x80
    4e2a:	061b      	lsls	r3, r3, #24
    4e2c:	18e2      	adds	r2, r4, r3
    4e2e:	2380      	movs	r3, #128	; 0x80
    4e30:	4659      	mov	r1, fp
    4e32:	005b      	lsls	r3, r3, #1
    4e34:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    4e36:	3b24      	subs	r3, #36	; 0x24
    4e38:	58c8      	ldr	r0, [r1, r3]
    4e3a:	21fc      	movs	r1, #252	; 0xfc
    4e3c:	0589      	lsls	r1, r1, #22
    4e3e:	f7fc f899 	bl	f74 <__aeabi_fmul>
    4e42:	2386      	movs	r3, #134	; 0x86
    4e44:	465a      	mov	r2, fp
    4e46:	005b      	lsls	r3, r3, #1
    4e48:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:701
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
		}
		else
		{
			// Android has negative sign for gravity: y = a - g, g = -y + a
			pthisSV->fgErrSeMi[i] = -pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    4e4a:	4653      	mov	r3, sl
    4e4c:	6919      	ldr	r1, [r3, #16]
    4e4e:	f7fc f9c3 	bl	11d8 <__aeabi_fsub>
    4e52:	1c21      	adds	r1, r4, #0
    4e54:	f7fb fd20 	bl	898 <__aeabi_fadd>
    4e58:	465a      	mov	r2, fp
    4e5a:	23f4      	movs	r3, #244	; 0xf4
    4e5c:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:686
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    4e5e:	3b40      	subs	r3, #64	; 0x40
    4e60:	58d4      	ldr	r4, [r2, r3]
    4e62:	2380      	movs	r3, #128	; 0x80
    4e64:	061b      	lsls	r3, r3, #24
    4e66:	18e2      	adds	r2, r4, r3
    4e68:	2382      	movs	r3, #130	; 0x82
    4e6a:	4659      	mov	r1, fp
    4e6c:	005b      	lsls	r3, r3, #1
    4e6e:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    4e70:	3b24      	subs	r3, #36	; 0x24
    4e72:	58c8      	ldr	r0, [r1, r3]
    4e74:	21fc      	movs	r1, #252	; 0xfc
    4e76:	0589      	lsls	r1, r1, #22
    4e78:	f7fc f87c 	bl	f74 <__aeabi_fmul>
    4e7c:	2388      	movs	r3, #136	; 0x88
    4e7e:	465a      	mov	r2, fp
    4e80:	005b      	lsls	r3, r3, #1
    4e82:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:701
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
		}
		else
		{
			// Android has negative sign for gravity: y = a - g, g = -y + a
			pthisSV->fgErrSeMi[i] = -pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    4e84:	4653      	mov	r3, sl
    4e86:	6959      	ldr	r1, [r3, #20]
    4e88:	f7fc f9a6 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    4e8c:	1c21      	adds	r1, r4, #0
    4e8e:	f7fb fd03 	bl	898 <__aeabi_fadd>
    4e92:	23f8      	movs	r3, #248	; 0xf8
    4e94:	465a      	mov	r2, fp
    4e96:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:710
	// *********************************************************************************
	// update variable elements of measurement matrix C
	// *********************************************************************************

	// update measurement matrix C (3x9) with -alpha(g-)x from gyro (g, sensor frame)
	pthisSV->fC3x9[0][1] = FDEGTORAD * pthisSV->fgSeGyMi[Z];
    4e98:	2382      	movs	r3, #130	; 0x82
    4e9a:	465a      	mov	r2, fp
    4e9c:	005b      	lsls	r3, r3, #1
    4e9e:	58d0      	ldr	r0, [r2, r3]
    4ea0:	496b      	ldr	r1, [pc, #428]	; (5050 <fRun_6DOF_GY_KALMAN+0x3e8>)
    4ea2:	f7fc f867 	bl	f74 <__aeabi_fmul>
    4ea6:	2382      	movs	r3, #130	; 0x82
    4ea8:	465a      	mov	r2, fp
    4eaa:	00db      	lsls	r3, r3, #3
    4eac:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:711
	pthisSV->fC3x9[0][2] = -FDEGTORAD * pthisSV->fgSeGyMi[Y];
    4eae:	2380      	movs	r3, #128	; 0x80
    4eb0:	005b      	lsls	r3, r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:710
	// *********************************************************************************
	// update variable elements of measurement matrix C
	// *********************************************************************************

	// update measurement matrix C (3x9) with -alpha(g-)x from gyro (g, sensor frame)
	pthisSV->fC3x9[0][1] = FDEGTORAD * pthisSV->fgSeGyMi[Z];
    4eb2:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:711
	pthisSV->fC3x9[0][2] = -FDEGTORAD * pthisSV->fgSeGyMi[Y];
    4eb4:	4967      	ldr	r1, [pc, #412]	; (5054 <fRun_6DOF_GY_KALMAN+0x3ec>)
    4eb6:	58d0      	ldr	r0, [r2, r3]
    4eb8:	f7fc f85c 	bl	f74 <__aeabi_fmul>
    4ebc:	465a      	mov	r2, fp
    4ebe:	4b66      	ldr	r3, [pc, #408]	; (5058 <fRun_6DOF_GY_KALMAN+0x3f0>)
    4ec0:	1c05      	adds	r5, r0, #0
    4ec2:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:712
	pthisSV->fC3x9[1][2] = FDEGTORAD * pthisSV->fgSeGyMi[X];
    4ec4:	23fc      	movs	r3, #252	; 0xfc
    4ec6:	4962      	ldr	r1, [pc, #392]	; (5050 <fRun_6DOF_GY_KALMAN+0x3e8>)
    4ec8:	58d0      	ldr	r0, [r2, r3]
    4eca:	f7fc f853 	bl	f74 <__aeabi_fmul>
    4ece:	2387      	movs	r3, #135	; 0x87
    4ed0:	465a      	mov	r2, fp
    4ed2:	00db      	lsls	r3, r3, #3
    4ed4:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:713
	pthisSV->fC3x9[1][0] = -pthisSV->fC3x9[0][1];
    4ed6:	2380      	movs	r3, #128	; 0x80
    4ed8:	061b      	lsls	r3, r3, #24
    4eda:	18f2      	adds	r2, r6, r3
    4edc:	2386      	movs	r3, #134	; 0x86
    4ede:	4659      	mov	r1, fp
    4ee0:	00db      	lsls	r3, r3, #3
    4ee2:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:714
	pthisSV->fC3x9[2][0] = -pthisSV->fC3x9[0][2];
    4ee4:	2380      	movs	r3, #128	; 0x80
    4ee6:	061b      	lsls	r3, r3, #24
    4ee8:	18ea      	adds	r2, r5, r3
    4eea:	4b5c      	ldr	r3, [pc, #368]	; (505c <fRun_6DOF_GY_KALMAN+0x3f4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:712
	// *********************************************************************************

	// update measurement matrix C (3x9) with -alpha(g-)x from gyro (g, sensor frame)
	pthisSV->fC3x9[0][1] = FDEGTORAD * pthisSV->fgSeGyMi[Z];
	pthisSV->fC3x9[0][2] = -FDEGTORAD * pthisSV->fgSeGyMi[Y];
	pthisSV->fC3x9[1][2] = FDEGTORAD * pthisSV->fgSeGyMi[X];
    4eec:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:714
	pthisSV->fC3x9[1][0] = -pthisSV->fC3x9[0][1];
	pthisSV->fC3x9[2][0] = -pthisSV->fC3x9[0][2];
    4eee:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:715
	pthisSV->fC3x9[2][1] = -pthisSV->fC3x9[1][2];
    4ef0:	2380      	movs	r3, #128	; 0x80
    4ef2:	061b      	lsls	r3, r3, #24
    4ef4:	18c2      	adds	r2, r0, r3
    4ef6:	238b      	movs	r3, #139	; 0x8b
    4ef8:	00db      	lsls	r3, r3, #3
    4efa:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:716
	pthisSV->fC3x9[0][4] = -pthisSV->fdeltat * pthisSV->fC3x9[0][1];
    4efc:	3328      	adds	r3, #40	; 0x28
    4efe:	58cc      	ldr	r4, [r1, r3]
    4f00:	2380      	movs	r3, #128	; 0x80
    4f02:	061b      	lsls	r3, r3, #24
    4f04:	469c      	mov	ip, r3
    4f06:	4464      	add	r4, ip
    4f08:	1c30      	adds	r0, r6, #0
    4f0a:	1c21      	adds	r1, r4, #0
    4f0c:	f7fc f832 	bl	f74 <__aeabi_fmul>
    4f10:	465a      	mov	r2, fp
    4f12:	4b53      	ldr	r3, [pc, #332]	; (5060 <fRun_6DOF_GY_KALMAN+0x3f8>)
    4f14:	1c06      	adds	r6, r0, #0
    4f16:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:717
	pthisSV->fC3x9[0][5] = -pthisSV->fdeltat * pthisSV->fC3x9[0][2];
    4f18:	1c21      	adds	r1, r4, #0
    4f1a:	1c28      	adds	r0, r5, #0
    4f1c:	f7fc f82a 	bl	f74 <__aeabi_fmul>
    4f20:	2384      	movs	r3, #132	; 0x84
    4f22:	465a      	mov	r2, fp
    4f24:	00db      	lsls	r3, r3, #3
    4f26:	50d0      	str	r0, [r2, r3]
    4f28:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:718
	pthisSV->fC3x9[1][5] = -pthisSV->fdeltat * pthisSV->fC3x9[1][2];
    4f2a:	1c21      	adds	r1, r4, #0
    4f2c:	1c38      	adds	r0, r7, #0
    4f2e:	f7fc f821 	bl	f74 <__aeabi_fmul>
    4f32:	465a      	mov	r2, fp
    4f34:	4b4b      	ldr	r3, [pc, #300]	; (5064 <fRun_6DOF_GY_KALMAN+0x3fc>)
    4f36:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:719
	pthisSV->fC3x9[1][3]= -pthisSV->fC3x9[0][4];
    4f38:	2380      	movs	r3, #128	; 0x80
    4f3a:	061b      	lsls	r3, r3, #24
    4f3c:	469c      	mov	ip, r3
    4f3e:	4b4a      	ldr	r3, [pc, #296]	; (5068 <fRun_6DOF_GY_KALMAN+0x400>)
    4f40:	4466      	add	r6, ip
    4f42:	50d6      	str	r6, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:720
	pthisSV->fC3x9[2][3]= -pthisSV->fC3x9[0][5];
    4f44:	238c      	movs	r3, #140	; 0x8c
    4f46:	4465      	add	r5, ip
    4f48:	00db      	lsls	r3, r3, #3
    4f4a:	50d5      	str	r5, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:721
	pthisSV->fC3x9[2][4]= -pthisSV->fC3x9[1][5];
    4f4c:	4b47      	ldr	r3, [pc, #284]	; (506c <fRun_6DOF_GY_KALMAN+0x404>)
    4f4e:	4460      	add	r0, ip
    4f50:	50d0      	str	r0, [r2, r3]
    4f52:	ab1b      	add	r3, sp, #108	; 0x6c
    4f54:	9310      	str	r3, [sp, #64]	; 0x40
    4f56:	23b2      	movs	r3, #178	; 0xb2
    4f58:	009b      	lsls	r3, r3, #2
    4f5a:	445b      	add	r3, fp
    4f5c:	4a44      	ldr	r2, [pc, #272]	; (5070 <fRun_6DOF_GY_KALMAN+0x408>)
    4f5e:	9303      	str	r3, [sp, #12]
    4f60:	1c1f      	adds	r7, r3, #0
    4f62:	ab1b      	add	r3, sp, #108	; 0x6c
    4f64:	445a      	add	r2, fp
    4f66:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:741
		pftmpA9x3ij = ftmpA9x3[i];

		for (j = 0; j < 3; j++) // loop over columns of ftmpA9x3
		{
			// zero ftmpA9x3[i][j]
			*pftmpA9x3ij = 0.0F;
    4f68:	465b      	mov	r3, fp
    4f6a:	4693      	mov	fp, r2
    4f6c:	9302      	str	r3, [sp, #8]
    4f6e:	230c      	movs	r3, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:736
	// C also has a significant number of +1 and -1 entries
	// ftmpA9x3 is also sparse but not symmetric
	for (i = 0; i < 9; i++) // loop over rows of ftmpA9x3
	{
		// initialize pftmpA9x3ij for current i, j=0
		pftmpA9x3ij = ftmpA9x3[i];
    4f70:	46d0      	mov	r8, sl
    4f72:	469c      	mov	ip, r3
    4f74:	46d9      	mov	r9, fp
    4f76:	4646      	mov	r6, r8
    4f78:	44e2      	add	sl, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:741

		for (j = 0; j < 3; j++) // loop over columns of ftmpA9x3
		{
			// zero ftmpA9x3[i][j]
			*pftmpA9x3ij = 0.0F;
    4f7a:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:744

			// initialize pfC3x9jk for current j, k=0
			pfC3x9jk = pthisSV->fC3x9[j];
    4f7c:	46b0      	mov	r8, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:741
		pftmpA9x3ij = ftmpA9x3[i];

		for (j = 0; j < 3; j++) // loop over columns of ftmpA9x3
		{
			// zero ftmpA9x3[i][j]
			*pftmpA9x3ij = 0.0F;
    4f7e:	6033      	str	r3, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:744

			// initialize pfC3x9jk for current j, k=0
			pfC3x9jk = pthisSV->fC3x9[j];
    4f80:	2400      	movs	r4, #0
    4f82:	464e      	mov	r6, r9
    4f84:	e009      	b.n	4f9a <fRun_6DOF_GY_KALMAN+0x332>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:755
			for (k = 0; k < 9; k++)
			{
				if ((*pfQw9x9ik != 0.0F) && (*pfC3x9jk != 0.0F))
				{
					if (*pfC3x9jk == 1.0F)
						*pftmpA9x3ij += *pfQw9x9ik;
    4f86:	4643      	mov	r3, r8
    4f88:	1c29      	adds	r1, r5, #0
    4f8a:	6818      	ldr	r0, [r3, #0]
    4f8c:	f7fb fc84 	bl	898 <__aeabi_fadd>
    4f90:	4643      	mov	r3, r8
    4f92:	6018      	str	r0, [r3, #0]
    4f94:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:750 (discriminator 2)

			// initialize pfQw9x9ik for current i, k=0
			pfQw9x9ik = pthisSV->fQw9x9[i];

			// sum matrix products over inner loop over k
			for (k = 0; k < 9; k++)
    4f96:	2c24      	cmp	r4, #36	; 0x24
    4f98:	d026      	beq.n	4fe8 <fRun_6DOF_GY_KALMAN+0x380>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:752
			{
				if ((*pfQw9x9ik != 0.0F) && (*pfC3x9jk != 0.0F))
    4f9a:	593d      	ldr	r5, [r7, r4]
    4f9c:	2100      	movs	r1, #0
    4f9e:	1c28      	adds	r0, r5, #0
    4fa0:	f7fb fc4c 	bl	83c <__aeabi_fcmpeq>
    4fa4:	2800      	cmp	r0, #0
    4fa6:	d1f5      	bne.n	4f94 <fRun_6DOF_GY_KALMAN+0x32c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:752 (discriminator 1)
    4fa8:	5933      	ldr	r3, [r6, r4]
    4faa:	2100      	movs	r1, #0
    4fac:	1c18      	adds	r0, r3, #0
    4fae:	4699      	mov	r9, r3
    4fb0:	f7fb fc44 	bl	83c <__aeabi_fcmpeq>
    4fb4:	2800      	cmp	r0, #0
    4fb6:	d1ed      	bne.n	4f94 <fRun_6DOF_GY_KALMAN+0x32c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:754
				{
					if (*pfC3x9jk == 1.0F)
    4fb8:	21fe      	movs	r1, #254	; 0xfe
    4fba:	4648      	mov	r0, r9
    4fbc:	0589      	lsls	r1, r1, #22
    4fbe:	f7fb fc3d 	bl	83c <__aeabi_fcmpeq>
    4fc2:	2800      	cmp	r0, #0
    4fc4:	d1df      	bne.n	4f86 <fRun_6DOF_GY_KALMAN+0x31e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:756
						*pftmpA9x3ij += *pfQw9x9ik;
					else if (*pfC3x9jk == -1.0F)
    4fc6:	4648      	mov	r0, r9
    4fc8:	492a      	ldr	r1, [pc, #168]	; (5074 <fRun_6DOF_GY_KALMAN+0x40c>)
    4fca:	f7fb fc37 	bl	83c <__aeabi_fcmpeq>
    4fce:	2800      	cmp	r0, #0
    4fd0:	d100      	bne.n	4fd4 <fRun_6DOF_GY_KALMAN+0x36c>
    4fd2:	e1bd      	b.n	5350 <fRun_6DOF_GY_KALMAN+0x6e8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:757
						*pftmpA9x3ij -= *pfQw9x9ik;
    4fd4:	4643      	mov	r3, r8
    4fd6:	1c29      	adds	r1, r5, #0
    4fd8:	6818      	ldr	r0, [r3, #0]
    4fda:	f7fc f8fd 	bl	11d8 <__aeabi_fsub>
    4fde:	4643      	mov	r3, r8
    4fe0:	3404      	adds	r4, #4
    4fe2:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:750

			// initialize pfQw9x9ik for current i, k=0
			pfQw9x9ik = pthisSV->fQw9x9[i];

			// sum matrix products over inner loop over k
			for (k = 0; k < 9; k++)
    4fe4:	2c24      	cmp	r4, #36	; 0x24
    4fe6:	d1d8      	bne.n	4f9a <fRun_6DOF_GY_KALMAN+0x332>
    4fe8:	2324      	movs	r3, #36	; 0x24
    4fea:	46b1      	mov	r9, r6
    4fec:	4646      	mov	r6, r8
    4fee:	469c      	mov	ip, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:769 (discriminator 2)
				pfQw9x9ik++;

			} // end of loop over k

			// increment pftmpA9x3ij for next iteration of j
			pftmpA9x3ij++;
    4ff0:	3604      	adds	r6, #4
    4ff2:	44e1      	add	r9, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:738 (discriminator 2)
	for (i = 0; i < 9; i++) // loop over rows of ftmpA9x3
	{
		// initialize pftmpA9x3ij for current i, j=0
		pftmpA9x3ij = ftmpA9x3[i];

		for (j = 0; j < 3; j++) // loop over columns of ftmpA9x3
    4ff4:	4556      	cmp	r6, sl
    4ff6:	d1c0      	bne.n	4f7a <fRun_6DOF_GY_KALMAN+0x312>
    4ff8:	3724      	adds	r7, #36	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:733 (discriminator 2)
	// *********************************************************************************

	// set ftmpA9x3 = P- * C^T = Qw * C^T where Qw and C are both sparse
	// C also has a significant number of +1 and -1 entries
	// ftmpA9x3 is also sparse but not symmetric
	for (i = 0; i < 9; i++) // loop over rows of ftmpA9x3
    4ffa:	455f      	cmp	r7, fp
    4ffc:	d1b7      	bne.n	4f6e <fRun_6DOF_GY_KALMAN+0x306>
    4ffe:	9b02      	ldr	r3, [sp, #8]
    5000:	469b      	mov	fp, r3
    5002:	2386      	movs	r3, #134	; 0x86
    5004:	00db      	lsls	r3, r3, #3
    5006:	445b      	add	r3, fp
    5008:	4698      	mov	r8, r3
    500a:	238c      	movs	r3, #140	; 0x8c
    500c:	005b      	lsls	r3, r3, #1
    500e:	445b      	add	r3, fp
    5010:	9306      	str	r3, [sp, #24]
    5012:	930d      	str	r3, [sp, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:733
    5014:	2300      	movs	r3, #0
    5016:	9305      	str	r3, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:785
		pfPPlus9x9ij = pthisSV->fPPlus9x9[i] + i;

		for (j = i; j < 3; j++) // loop over above diagonal columns of P+
		{
			// zero P+[i][j] 
			*pfPPlus9x9ij = 0.0F;
    5018:	465b      	mov	r3, fp
    501a:	9307      	str	r3, [sp, #28]
    501c:	9b06      	ldr	r3, [sp, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:780
	// = C * (Qw * C^T) + Qv = C * ftmpA9x3 + Qv
	// both C and ftmpA9x3 are sparse but not symmetric
	for (i = 0; i < 3; i++) // loop over rows of P+
	{
		// initialize pfPPlus9x9ij for current i, j=i
		pfPPlus9x9ij = pthisSV->fPPlus9x9[i] + i;
    501e:	4699      	mov	r9, r3
    5020:	2324      	movs	r3, #36	; 0x24
    5022:	9a05      	ldr	r2, [sp, #20]
    5024:	425b      	negs	r3, r3
    5026:	4443      	add	r3, r8
    5028:	469b      	mov	fp, r3
    502a:	4692      	mov	sl, r2
    502c:	4647      	mov	r7, r8
    502e:	b255      	sxtb	r5, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:785

		for (j = i; j < 3; j++) // loop over above diagonal columns of P+
		{
			// zero P+[i][j] 
			*pfPPlus9x9ij = 0.0F;
    5030:	464b      	mov	r3, r9
    5032:	2200      	movs	r2, #0
    5034:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:791

			// initialize pfC3x9ik for current i, k=0
			pfC3x9ik = pthisSV->fC3x9[i];

			// initialize pftmpA9x3kj for current j, k=0
			pftmpA9x3kj = *ftmpA9x3 + j;
    5036:	ab1b      	add	r3, sp, #108	; 0x6c
    5038:	469c      	mov	ip, r3
    503a:	00ad      	lsls	r5, r5, #2
    503c:	4465      	add	r5, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:788
		{
			// zero P+[i][j] 
			*pfPPlus9x9ij = 0.0F;

			// initialize pfC3x9ik for current i, k=0
			pfC3x9ik = pthisSV->fC3x9[i];
    503e:	465c      	mov	r4, fp
    5040:	e025      	b.n	508e <fRun_6DOF_GY_KALMAN+0x426>
    5042:	46c0      	nop			; (mov r8, r8)
    5044:	0000048e 	.word	0x0000048e
    5048:	0000048c 	.word	0x0000048c
    504c:	0000047c 	.word	0x0000047c
    5050:	3c8efa35 	.word	0x3c8efa35
    5054:	bc8efa35 	.word	0xbc8efa35
    5058:	00000414 	.word	0x00000414
    505c:	00000454 	.word	0x00000454
    5060:	0000041c 	.word	0x0000041c
    5064:	00000444 	.word	0x00000444
    5068:	0000043c 	.word	0x0000043c
    506c:	00000464 	.word	0x00000464
    5070:	0000040c 	.word	0x0000040c
    5074:	bf800000 	.word	0xbf800000
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:799
			for (k = 0; k < 9; k++)
			{
				if ((*pfC3x9ik != 0.0F) && (*pftmpA9x3kj != 0.0F))
				{
					if (*pfC3x9ik == 1.0F)
						*pfPPlus9x9ij += *pftmpA9x3kj;
    5078:	464b      	mov	r3, r9
    507a:	4641      	mov	r1, r8
    507c:	6818      	ldr	r0, [r3, #0]
    507e:	f7fb fc0b 	bl	898 <__aeabi_fadd>
    5082:	464b      	mov	r3, r9
    5084:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:807 (discriminator 2)
					else
						*pfPPlus9x9ij += *pfC3x9ik * *pftmpA9x3kj;
				}

				// update pfC3x9ik and pftmpA9x3kj for next iteration of k
				pfC3x9ik++;						
    5086:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:808 (discriminator 2)
				pftmpA9x3kj += 3;
    5088:	350c      	adds	r5, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:794 (discriminator 2)

			// initialize pftmpA9x3kj for current j, k=0
			pftmpA9x3kj = *ftmpA9x3 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 9; k++)
    508a:	42bc      	cmp	r4, r7
    508c:	d027      	beq.n	50de <fRun_6DOF_GY_KALMAN+0x476>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:796
			{
				if ((*pfC3x9ik != 0.0F) && (*pftmpA9x3kj != 0.0F))
    508e:	6826      	ldr	r6, [r4, #0]
    5090:	2100      	movs	r1, #0
    5092:	1c30      	adds	r0, r6, #0
    5094:	f7fb fbd2 	bl	83c <__aeabi_fcmpeq>
    5098:	2800      	cmp	r0, #0
    509a:	d1f4      	bne.n	5086 <fRun_6DOF_GY_KALMAN+0x41e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:796 (discriminator 1)
    509c:	682b      	ldr	r3, [r5, #0]
    509e:	2100      	movs	r1, #0
    50a0:	1c18      	adds	r0, r3, #0
    50a2:	4698      	mov	r8, r3
    50a4:	f7fb fbca 	bl	83c <__aeabi_fcmpeq>
    50a8:	2800      	cmp	r0, #0
    50aa:	d1ec      	bne.n	5086 <fRun_6DOF_GY_KALMAN+0x41e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:798
				{
					if (*pfC3x9ik == 1.0F)
    50ac:	21fe      	movs	r1, #254	; 0xfe
    50ae:	1c30      	adds	r0, r6, #0
    50b0:	0589      	lsls	r1, r1, #22
    50b2:	f7fb fbc3 	bl	83c <__aeabi_fcmpeq>
    50b6:	2800      	cmp	r0, #0
    50b8:	d1de      	bne.n	5078 <fRun_6DOF_GY_KALMAN+0x410>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:800
						*pfPPlus9x9ij += *pftmpA9x3kj;
					else if (*pfC3x9ik == -1.0F)
    50ba:	1c30      	adds	r0, r6, #0
    50bc:	49ad      	ldr	r1, [pc, #692]	; (5374 <fRun_6DOF_GY_KALMAN+0x70c>)
    50be:	f7fb fbbd 	bl	83c <__aeabi_fcmpeq>
    50c2:	2800      	cmp	r0, #0
    50c4:	d100      	bne.n	50c8 <fRun_6DOF_GY_KALMAN+0x460>
    50c6:	e137      	b.n	5338 <fRun_6DOF_GY_KALMAN+0x6d0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:801
						*pfPPlus9x9ij -= *pftmpA9x3kj;
    50c8:	464b      	mov	r3, r9
    50ca:	4641      	mov	r1, r8
    50cc:	6818      	ldr	r0, [r3, #0]
    50ce:	f7fc f883 	bl	11d8 <__aeabi_fsub>
    50d2:	464b      	mov	r3, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:807
					else
						*pfPPlus9x9ij += *pfC3x9ik * *pftmpA9x3kj;
				}

				// update pfC3x9ik and pftmpA9x3kj for next iteration of k
				pfC3x9ik++;						
    50d4:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:801
				if ((*pfC3x9ik != 0.0F) && (*pftmpA9x3kj != 0.0F))
				{
					if (*pfC3x9ik == 1.0F)
						*pfPPlus9x9ij += *pftmpA9x3kj;
					else if (*pfC3x9ik == -1.0F)
						*pfPPlus9x9ij -= *pftmpA9x3kj;
    50d6:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:808
						*pfPPlus9x9ij += *pfC3x9ik * *pftmpA9x3kj;
				}

				// update pfC3x9ik and pftmpA9x3kj for next iteration of k
				pfC3x9ik++;						
				pftmpA9x3kj += 3;
    50d8:	350c      	adds	r5, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:794

			// initialize pftmpA9x3kj for current j, k=0
			pftmpA9x3kj = *ftmpA9x3 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 9; k++)
    50da:	42bc      	cmp	r4, r7
    50dc:	d1d7      	bne.n	508e <fRun_6DOF_GY_KALMAN+0x426>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:813 (discriminator 2)
				pftmpA9x3kj += 3;

			} // end of loop over k

			// increment pfPPlus9x9ij for next iteration of j
			pfPPlus9x9ij++;
    50de:	2304      	movs	r3, #4
    50e0:	469c      	mov	ip, r3
    50e2:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:782 (discriminator 2)
	for (i = 0; i < 3; i++) // loop over rows of P+
	{
		// initialize pfPPlus9x9ij for current i, j=i
		pfPPlus9x9ij = pthisSV->fPPlus9x9[i] + i;

		for (j = i; j < 3; j++) // loop over above diagonal columns of P+
    50e4:	466a      	mov	r2, sp
    50e6:	2508      	movs	r5, #8
    50e8:	3301      	adds	r3, #1
    50ea:	b2db      	uxtb	r3, r3
    50ec:	7213      	strb	r3, [r2, #8]
    50ee:	5755      	ldrsb	r5, [r2, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:813 (discriminator 2)
				pftmpA9x3kj += 3;

			} // end of loop over k

			// increment pfPPlus9x9ij for next iteration of j
			pfPPlus9x9ij++;
    50f0:	44e1      	add	r9, ip
    50f2:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:782 (discriminator 2)
	for (i = 0; i < 3; i++) // loop over rows of P+
	{
		// initialize pfPPlus9x9ij for current i, j=i
		pfPPlus9x9ij = pthisSV->fPPlus9x9[i] + i;

		for (j = i; j < 3; j++) // loop over above diagonal columns of P+
    50f4:	2d02      	cmp	r5, #2
    50f6:	dd9b      	ble.n	5030 <fRun_6DOF_GY_KALMAN+0x3c8>
    50f8:	9d05      	ldr	r5, [sp, #20]
    50fa:	3501      	adds	r5, #1
    50fc:	b2ed      	uxtb	r5, r5
    50fe:	b2eb      	uxtb	r3, r5
    5100:	9305      	str	r3, [sp, #20]
    5102:	2324      	movs	r3, #36	; 0x24
    5104:	4698      	mov	r8, r3
    5106:	9b06      	ldr	r3, [sp, #24]
    5108:	44a0      	add	r8, r4
    510a:	3328      	adds	r3, #40	; 0x28
    510c:	9306      	str	r3, [sp, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:777 (discriminator 2)
	} // end of loop over i

	// set symmetric P+ (3x3 scratch sub-matrix) to C * P- * C^T + Qv
	// = C * (Qw * C^T) + Qv = C * ftmpA9x3 + Qv
	// both C and ftmpA9x3 are sparse but not symmetric
	for (i = 0; i < 3; i++) // loop over rows of P+
    510e:	2d03      	cmp	r5, #3
    5110:	d185      	bne.n	501e <fRun_6DOF_GY_KALMAN+0x3b6>
    5112:	9b07      	ldr	r3, [sp, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:821
	} // end of loop over i

	// add in noise covariance terms to the diagonal
	pthisSV->fPPlus9x9[0][0] +=  pthisSV->fQvAA;
	pthisSV->fPPlus9x9[1][1] +=  pthisSV->fQvAA;
	pthisSV->fPPlus9x9[2][2] +=  pthisSV->fQvAA;
    5114:	26b4      	movs	r6, #180	; 0xb4
    5116:	469b      	mov	fp, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:819

		} // end of loop over j
	} // end of loop over i

	// add in noise covariance terms to the diagonal
	pthisSV->fPPlus9x9[0][0] +=  pthisSV->fQvAA;
    5118:	238a      	movs	r3, #138	; 0x8a
    511a:	465a      	mov	r2, fp
    511c:	005b      	lsls	r3, r3, #1
    511e:	58d4      	ldr	r4, [r2, r3]
    5120:	228c      	movs	r2, #140	; 0x8c
    5122:	465b      	mov	r3, fp
    5124:	0052      	lsls	r2, r2, #1
    5126:	5898      	ldr	r0, [r3, r2]
    5128:	1c21      	adds	r1, r4, #0
    512a:	f7fb fbb5 	bl	898 <__aeabi_fadd>
    512e:	228c      	movs	r2, #140	; 0x8c
    5130:	465b      	mov	r3, fp
    5132:	0052      	lsls	r2, r2, #1
    5134:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:820
	pthisSV->fPPlus9x9[1][1] +=  pthisSV->fQvAA;
    5136:	23a0      	movs	r3, #160	; 0xa0
    5138:	005b      	lsls	r3, r3, #1
    513a:	4698      	mov	r8, r3
    513c:	465b      	mov	r3, fp
    513e:	4642      	mov	r2, r8
    5140:	1c20      	adds	r0, r4, #0
    5142:	5899      	ldr	r1, [r3, r2]
    5144:	f7fb fba8 	bl	898 <__aeabi_fadd>
    5148:	465b      	mov	r3, fp
    514a:	4642      	mov	r2, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:821
	pthisSV->fPPlus9x9[2][2] +=  pthisSV->fQvAA;
    514c:	0076      	lsls	r6, r6, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:820
		} // end of loop over j
	} // end of loop over i

	// add in noise covariance terms to the diagonal
	pthisSV->fPPlus9x9[0][0] +=  pthisSV->fQvAA;
	pthisSV->fPPlus9x9[1][1] +=  pthisSV->fQvAA;
    514e:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:821
	pthisSV->fPPlus9x9[2][2] +=  pthisSV->fQvAA;
    5150:	5999      	ldr	r1, [r3, r6]
    5152:	1c20      	adds	r0, r4, #0
    5154:	f7fb fba0 	bl	898 <__aeabi_fadd>
    5158:	465b      	mov	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:824

	// copy above diagonal terms of P+ (3x3 scratch sub-matrix) to below diagonal terms
	pthisSV->fPPlus9x9[1][0] = pthisSV->fPPlus9x9[0][1];
    515a:	229e      	movs	r2, #158	; 0x9e
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:825
	pthisSV->fPPlus9x9[2][0] = pthisSV->fPPlus9x9[0][2];
    515c:	2790      	movs	r7, #144	; 0x90
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:821
	} // end of loop over i

	// add in noise covariance terms to the diagonal
	pthisSV->fPPlus9x9[0][0] +=  pthisSV->fQvAA;
	pthisSV->fPPlus9x9[1][1] +=  pthisSV->fQvAA;
	pthisSV->fPPlus9x9[2][2] +=  pthisSV->fQvAA;
    515e:	5198      	str	r0, [r3, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:824

	// copy above diagonal terms of P+ (3x3 scratch sub-matrix) to below diagonal terms
	pthisSV->fPPlus9x9[1][0] = pthisSV->fPPlus9x9[0][1];
    5160:	3e4c      	subs	r6, #76	; 0x4c
    5162:	5999      	ldr	r1, [r3, r6]
    5164:	0052      	lsls	r2, r2, #1
    5166:	5099      	str	r1, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:825
	pthisSV->fPPlus9x9[2][0] = pthisSV->fPPlus9x9[0][2];
    5168:	007f      	lsls	r7, r7, #1
    516a:	59d9      	ldr	r1, [r3, r7]
    516c:	3224      	adds	r2, #36	; 0x24
    516e:	5099      	str	r1, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:826
	pthisSV->fPPlus9x9[2][1] = pthisSV->fPPlus9x9[1][2];
    5170:	23a2      	movs	r3, #162	; 0xa2
    5172:	465a      	mov	r2, fp
    5174:	005b      	lsls	r3, r3, #1
    5176:	58d3      	ldr	r3, [r2, r3]
    5178:	22b2      	movs	r2, #178	; 0xb2
    517a:	9302      	str	r3, [sp, #8]
    517c:	465b      	mov	r3, fp
    517e:	9902      	ldr	r1, [sp, #8]
    5180:	0052      	lsls	r2, r2, #1
    5182:	5099      	str	r1, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:831

	// calculate inverse of P+ (3x3 scratch sub-matrix) = inv(C * P- * C^T + Qv) = inv(C * Qw * C^T + Qv)
	for (i = 0; i < 3; i++)
	{
		pfRows[i] = pthisSV->fPPlus9x9[i];
    5184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:833
	}
	fmatrixAeqInvA(pfRows, iColInd, iRowInd, iPivot, 3);
    5186:	9500      	str	r5, [sp, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:831
	pthisSV->fPPlus9x9[2][1] = pthisSV->fPPlus9x9[1][2];

	// calculate inverse of P+ (3x3 scratch sub-matrix) = inv(C * P- * C^T + Qv) = inv(C * Qw * C^T + Qv)
	for (i = 0; i < 3; i++)
	{
		pfRows[i] = pthisSV->fPPlus9x9[i];
    5188:	9318      	str	r3, [sp, #96]	; 0x60
    518a:	239e      	movs	r3, #158	; 0x9e
    518c:	005b      	lsls	r3, r3, #1
    518e:	445b      	add	r3, fp
    5190:	9311      	str	r3, [sp, #68]	; 0x44
    5192:	9319      	str	r3, [sp, #100]	; 0x64
    5194:	3324      	adds	r3, #36	; 0x24
    5196:	931a      	str	r3, [sp, #104]	; 0x68
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:833
	}
	fmatrixAeqInvA(pfRows, iColInd, iRowInd, iPivot, 3);
    5198:	a818      	add	r0, sp, #96	; 0x60
    519a:	ab14      	add	r3, sp, #80	; 0x50
    519c:	a912      	add	r1, sp, #72	; 0x48
    519e:	aa13      	add	r2, sp, #76	; 0x4c
    51a0:	f007 fdce 	bl	cd40 <fmatrixAeqInvA>
    51a4:	2397      	movs	r3, #151	; 0x97
    51a6:	009b      	lsls	r3, r3, #2
    51a8:	445b      	add	r3, fp
    51aa:	1c1c      	adds	r4, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:847
		pfK9x3ij = pthisSV->fK9x3[i];

		for (j = 0; j < 3; j++) // loop over columns of K9x3
		{
			// zero the matrix element fK9x3[i][j]
			*pfK9x3ij = 0.0F;
    51ac:	2300      	movs	r3, #0
    51ae:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    51b0:	238c      	movs	r3, #140	; 0x8c
    51b2:	005b      	lsls	r3, r3, #1
    51b4:	9302      	str	r3, [sp, #8]
    51b6:	3324      	adds	r3, #36	; 0x24
    51b8:	9305      	str	r3, [sp, #20]
    51ba:	3324      	adds	r3, #36	; 0x24
    51bc:	9306      	str	r3, [sp, #24]
    51be:	4643      	mov	r3, r8
    51c0:	9308      	str	r3, [sp, #32]
    51c2:	3324      	adds	r3, #36	; 0x24
    51c4:	9309      	str	r3, [sp, #36]	; 0x24
    51c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    51c8:	9607      	str	r6, [sp, #28]
    51ca:	970a      	str	r7, [sp, #40]	; 0x28
    51cc:	4698      	mov	r8, r3
    51ce:	9410      	str	r4, [sp, #64]	; 0x40
    51d0:	e0a4      	b.n	531c <fRun_6DOF_GY_KALMAN+0x6b4>
    51d2:	465b      	mov	r3, fp
    51d4:	9a02      	ldr	r2, [sp, #8]
    51d6:	1c38      	adds	r0, r7, #0
    51d8:	5899      	ldr	r1, [r3, r2]
    51da:	f7fb fecb 	bl	f74 <__aeabi_fmul>
    51de:	2100      	movs	r1, #0
    51e0:	f7fb fb5a 	bl	898 <__aeabi_fadd>
    51e4:	4682      	mov	sl, r0
    51e6:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    51e8:	4643      	mov	r3, r8
    51ea:	685e      	ldr	r6, [r3, #4]
    51ec:	2100      	movs	r1, #0
    51ee:	1c30      	adds	r0, r6, #0
    51f0:	f7fb fb24 	bl	83c <__aeabi_fcmpeq>
    51f4:	2800      	cmp	r0, #0
    51f6:	d10b      	bne.n	5210 <fRun_6DOF_GY_KALMAN+0x5a8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    51f8:	465b      	mov	r3, fp
    51fa:	9a05      	ldr	r2, [sp, #20]
    51fc:	1c30      	adds	r0, r6, #0
    51fe:	5899      	ldr	r1, [r3, r2]
    5200:	f7fb feb8 	bl	f74 <__aeabi_fmul>
    5204:	1c01      	adds	r1, r0, #0
    5206:	4650      	mov	r0, sl
    5208:	f7fb fb46 	bl	898 <__aeabi_fadd>
    520c:	4682      	mov	sl, r0
    520e:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    5210:	4643      	mov	r3, r8
    5212:	689d      	ldr	r5, [r3, #8]
    5214:	2100      	movs	r1, #0
    5216:	1c28      	adds	r0, r5, #0
    5218:	f7fb fb10 	bl	83c <__aeabi_fcmpeq>
    521c:	2800      	cmp	r0, #0
    521e:	d109      	bne.n	5234 <fRun_6DOF_GY_KALMAN+0x5cc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    5220:	465b      	mov	r3, fp
    5222:	9a06      	ldr	r2, [sp, #24]
    5224:	1c28      	adds	r0, r5, #0
    5226:	5899      	ldr	r1, [r3, r2]
    5228:	f7fb fea4 	bl	f74 <__aeabi_fmul>
    522c:	4651      	mov	r1, sl
    522e:	f7fb fb33 	bl	898 <__aeabi_fadd>
    5232:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:847
		pfK9x3ij = pthisSV->fK9x3[i];

		for (j = 0; j < 3; j++) // loop over columns of K9x3
		{
			// zero the matrix element fK9x3[i][j]
			*pfK9x3ij = 0.0F;
    5234:	464b      	mov	r3, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    5236:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:847
		pfK9x3ij = pthisSV->fK9x3[i];

		for (j = 0; j < 3; j++) // loop over columns of K9x3
		{
			// zero the matrix element fK9x3[i][j]
			*pfK9x3ij = 0.0F;
    5238:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    523a:	2100      	movs	r1, #0
    523c:	f7fb fafe 	bl	83c <__aeabi_fcmpeq>
    5240:	2800      	cmp	r0, #0
    5242:	d000      	beq.n	5246 <fRun_6DOF_GY_KALMAN+0x5de>
    5244:	e090      	b.n	5368 <fRun_6DOF_GY_KALMAN+0x700>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    5246:	465b      	mov	r3, fp
    5248:	9a07      	ldr	r2, [sp, #28]
    524a:	1c38      	adds	r0, r7, #0
    524c:	5899      	ldr	r1, [r3, r2]
    524e:	f7fb fe91 	bl	f74 <__aeabi_fmul>
    5252:	2100      	movs	r1, #0
    5254:	f7fb fb20 	bl	898 <__aeabi_fadd>
    5258:	4682      	mov	sl, r0
    525a:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    525c:	1c30      	adds	r0, r6, #0
    525e:	2100      	movs	r1, #0
    5260:	f7fb faec 	bl	83c <__aeabi_fcmpeq>
    5264:	2800      	cmp	r0, #0
    5266:	d10b      	bne.n	5280 <fRun_6DOF_GY_KALMAN+0x618>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    5268:	465b      	mov	r3, fp
    526a:	9a08      	ldr	r2, [sp, #32]
    526c:	1c30      	adds	r0, r6, #0
    526e:	5899      	ldr	r1, [r3, r2]
    5270:	f7fb fe80 	bl	f74 <__aeabi_fmul>
    5274:	1c01      	adds	r1, r0, #0
    5276:	4650      	mov	r0, sl
    5278:	f7fb fb0e 	bl	898 <__aeabi_fadd>
    527c:	4682      	mov	sl, r0
    527e:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    5280:	1c28      	adds	r0, r5, #0
    5282:	2100      	movs	r1, #0
    5284:	f7fb fada 	bl	83c <__aeabi_fcmpeq>
    5288:	2800      	cmp	r0, #0
    528a:	d109      	bne.n	52a0 <fRun_6DOF_GY_KALMAN+0x638>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    528c:	465b      	mov	r3, fp
    528e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5290:	1c28      	adds	r0, r5, #0
    5292:	5899      	ldr	r1, [r3, r2]
    5294:	f7fb fe6e 	bl	f74 <__aeabi_fmul>
    5298:	4651      	mov	r1, sl
    529a:	f7fb fafd 	bl	898 <__aeabi_fadd>
    529e:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:847
		pfK9x3ij = pthisSV->fK9x3[i];

		for (j = 0; j < 3; j++) // loop over columns of K9x3
		{
			// zero the matrix element fK9x3[i][j]
			*pfK9x3ij = 0.0F;
    52a0:	464b      	mov	r3, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    52a2:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:847
		pfK9x3ij = pthisSV->fK9x3[i];

		for (j = 0; j < 3; j++) // loop over columns of K9x3
		{
			// zero the matrix element fK9x3[i][j]
			*pfK9x3ij = 0.0F;
    52a4:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    52a6:	2100      	movs	r1, #0
    52a8:	f7fb fac8 	bl	83c <__aeabi_fcmpeq>
    52ac:	2800      	cmp	r0, #0
    52ae:	d15e      	bne.n	536e <fRun_6DOF_GY_KALMAN+0x706>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    52b0:	465b      	mov	r3, fp
    52b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    52b4:	1c38      	adds	r0, r7, #0
    52b6:	5899      	ldr	r1, [r3, r2]
    52b8:	f7fb fe5c 	bl	f74 <__aeabi_fmul>
    52bc:	2100      	movs	r1, #0
    52be:	f7fb faeb 	bl	898 <__aeabi_fadd>
    52c2:	1c07      	adds	r7, r0, #0
    52c4:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    52c6:	1c30      	adds	r0, r6, #0
    52c8:	2100      	movs	r1, #0
    52ca:	f7fb fab7 	bl	83c <__aeabi_fcmpeq>
    52ce:	2800      	cmp	r0, #0
    52d0:	d10c      	bne.n	52ec <fRun_6DOF_GY_KALMAN+0x684>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    52d2:	23a2      	movs	r3, #162	; 0xa2
    52d4:	465a      	mov	r2, fp
    52d6:	005b      	lsls	r3, r3, #1
    52d8:	58d1      	ldr	r1, [r2, r3]
    52da:	1c30      	adds	r0, r6, #0
    52dc:	f7fb fe4a 	bl	f74 <__aeabi_fmul>
    52e0:	1c01      	adds	r1, r0, #0
    52e2:	1c38      	adds	r0, r7, #0
    52e4:	f7fb fad8 	bl	898 <__aeabi_fadd>
    52e8:	1c07      	adds	r7, r0, #0
    52ea:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    52ec:	1c28      	adds	r0, r5, #0
    52ee:	2100      	movs	r1, #0
    52f0:	f7fb faa4 	bl	83c <__aeabi_fcmpeq>
    52f4:	2800      	cmp	r0, #0
    52f6:	d10a      	bne.n	530e <fRun_6DOF_GY_KALMAN+0x6a6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    52f8:	23b4      	movs	r3, #180	; 0xb4
    52fa:	465a      	mov	r2, fp
    52fc:	005b      	lsls	r3, r3, #1
    52fe:	58d1      	ldr	r1, [r2, r3]
    5300:	1c28      	adds	r0, r5, #0
    5302:	f7fb fe37 	bl	f74 <__aeabi_fmul>
    5306:	1c39      	adds	r1, r7, #0
    5308:	f7fb fac6 	bl	898 <__aeabi_fadd>
    530c:	60a0      	str	r0, [r4, #8]
    530e:	230c      	movs	r3, #12
    5310:	469c      	mov	ip, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:839

	// set K = P- * C^T * inv(C * P- * C^T + Qv) = Qw * C^T * inv(C * Qw * C^T + Qv)
	// = ftmpA9x3 * P+ (3x3 sub-matrix)
	// ftmpA9x3 = Qw * C^T is sparse but P+ (3x3 sub-matrix) is not
	// K is not symmetric because C is not symmetric
	for (i = 0; i < 9; i++) // loop over rows of K9x3
    5312:	9b03      	ldr	r3, [sp, #12]
    5314:	340c      	adds	r4, #12
    5316:	44e0      	add	r8, ip
    5318:	42a3      	cmp	r3, r4
    531a:	d02d      	beq.n	5378 <fRun_6DOF_GY_KALMAN+0x710>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:847
		pfK9x3ij = pthisSV->fK9x3[i];

		for (j = 0; j < 3; j++) // loop over columns of K9x3
		{
			// zero the matrix element fK9x3[i][j]
			*pfK9x3ij = 0.0F;
    531c:	464b      	mov	r3, r9
    531e:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    5320:	4643      	mov	r3, r8
    5322:	681f      	ldr	r7, [r3, #0]
    5324:	2100      	movs	r1, #0
    5326:	1c38      	adds	r0, r7, #0
    5328:	f7fb fa88 	bl	83c <__aeabi_fcmpeq>
    532c:	2800      	cmp	r0, #0
    532e:	d100      	bne.n	5332 <fRun_6DOF_GY_KALMAN+0x6ca>
    5330:	e74f      	b.n	51d2 <fRun_6DOF_GY_KALMAN+0x56a>
    5332:	2300      	movs	r3, #0
    5334:	469a      	mov	sl, r3
    5336:	e757      	b.n	51e8 <fRun_6DOF_GY_KALMAN+0x580>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:803
					if (*pfC3x9ik == 1.0F)
						*pfPPlus9x9ij += *pftmpA9x3kj;
					else if (*pfC3x9ik == -1.0F)
						*pfPPlus9x9ij -= *pftmpA9x3kj;
					else
						*pfPPlus9x9ij += *pfC3x9ik * *pftmpA9x3kj;
    5338:	4641      	mov	r1, r8
    533a:	1c30      	adds	r0, r6, #0
    533c:	f7fb fe1a 	bl	f74 <__aeabi_fmul>
    5340:	464b      	mov	r3, r9
    5342:	1c01      	adds	r1, r0, #0
    5344:	6818      	ldr	r0, [r3, #0]
    5346:	f7fb faa7 	bl	898 <__aeabi_fadd>
    534a:	464b      	mov	r3, r9
    534c:	6018      	str	r0, [r3, #0]
    534e:	e69a      	b.n	5086 <fRun_6DOF_GY_KALMAN+0x41e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:759
					if (*pfC3x9jk == 1.0F)
						*pftmpA9x3ij += *pfQw9x9ik;
					else if (*pfC3x9jk == -1.0F)
						*pftmpA9x3ij -= *pfQw9x9ik;
					else
						*pftmpA9x3ij += *pfQw9x9ik * *pfC3x9jk;
    5350:	4649      	mov	r1, r9
    5352:	1c28      	adds	r0, r5, #0
    5354:	f7fb fe0e 	bl	f74 <__aeabi_fmul>
    5358:	4643      	mov	r3, r8
    535a:	1c01      	adds	r1, r0, #0
    535c:	6818      	ldr	r0, [r3, #0]
    535e:	f7fb fa9b 	bl	898 <__aeabi_fadd>
    5362:	4643      	mov	r3, r8
    5364:	6018      	str	r0, [r3, #0]
    5366:	e615      	b.n	4f94 <fRun_6DOF_GY_KALMAN+0x32c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    5368:	2300      	movs	r3, #0
    536a:	469a      	mov	sl, r3
    536c:	e776      	b.n	525c <fRun_6DOF_GY_KALMAN+0x5f4>
    536e:	2700      	movs	r7, #0
    5370:	e7a9      	b.n	52c6 <fRun_6DOF_GY_KALMAN+0x65e>
    5372:	46c0      	nop			; (mov r8, r8)
    5374:	bf800000 	.word	0xbf800000
    5378:	9b10      	ldr	r3, [sp, #64]	; 0x40
    537a:	465a      	mov	r2, fp
    537c:	469a      	mov	sl, r3
    537e:	23f0      	movs	r3, #240	; 0xf0
    5380:	58d4      	ldr	r4, [r2, r3]
    5382:	3304      	adds	r3, #4
    5384:	58d6      	ldr	r6, [r2, r3]
    5386:	3304      	adds	r3, #4
    5388:	58d7      	ldr	r7, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:889

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    538a:	3389      	adds	r3, #137	; 0x89
    538c:	33ff      	adds	r3, #255	; 0xff
    538e:	58d1      	ldr	r1, [r2, r3]
    5390:	1c20      	adds	r0, r4, #0
    5392:	f7fb fdef 	bl	f74 <__aeabi_fmul>
    5396:	2100      	movs	r1, #0
    5398:	f7fb fa7e 	bl	898 <__aeabi_fadd>
    539c:	23a1      	movs	r3, #161	; 0xa1
    539e:	465a      	mov	r2, fp
    53a0:	009b      	lsls	r3, r3, #2
    53a2:	58d1      	ldr	r1, [r2, r3]
    53a4:	1c05      	adds	r5, r0, #0
    53a6:	1c30      	adds	r0, r6, #0
    53a8:	f7fb fde4 	bl	f74 <__aeabi_fmul>
    53ac:	1c01      	adds	r1, r0, #0
    53ae:	1c28      	adds	r0, r5, #0
    53b0:	f7fb fa72 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    53b4:	23a9      	movs	r3, #169	; 0xa9
    53b6:	465a      	mov	r2, fp
    53b8:	009b      	lsls	r3, r3, #2
    53ba:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:889

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    53bc:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    53be:	1c20      	adds	r0, r4, #0
    53c0:	f7fb fdd8 	bl	f74 <__aeabi_fmul>
    53c4:	2100      	movs	r1, #0
    53c6:	f7fb fa67 	bl	898 <__aeabi_fadd>
    53ca:	23aa      	movs	r3, #170	; 0xaa
    53cc:	465a      	mov	r2, fp
    53ce:	009b      	lsls	r3, r3, #2
    53d0:	58d1      	ldr	r1, [r2, r3]
    53d2:	1c05      	adds	r5, r0, #0
    53d4:	1c30      	adds	r0, r6, #0
    53d6:	f7fb fdcd 	bl	f74 <__aeabi_fmul>
    53da:	1c01      	adds	r1, r0, #0
    53dc:	1c28      	adds	r0, r5, #0
    53de:	f7fb fa5b 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:888
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = 0.0F;

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
    53e2:	2397      	movs	r3, #151	; 0x97
    53e4:	465a      	mov	r2, fp
    53e6:	009b      	lsls	r3, r3, #2
    53e8:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    53ea:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:888
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = 0.0F;

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
    53ec:	1c20      	adds	r0, r4, #0
    53ee:	f7fb fdc1 	bl	f74 <__aeabi_fmul>
    53f2:	2100      	movs	r1, #0
    53f4:	f7fb fa50 	bl	898 <__aeabi_fadd>
    53f8:	2398      	movs	r3, #152	; 0x98
    53fa:	465a      	mov	r2, fp
    53fc:	009b      	lsls	r3, r3, #2
    53fe:	58d1      	ldr	r1, [r2, r3]
    5400:	1c05      	adds	r5, r0, #0
    5402:	1c30      	adds	r0, r6, #0
    5404:	f7fb fdb6 	bl	f74 <__aeabi_fmul>
    5408:	1c01      	adds	r1, r0, #0
    540a:	1c28      	adds	r0, r5, #0
    540c:	f7fb fa44 	bl	898 <__aeabi_fadd>
    5410:	2399      	movs	r3, #153	; 0x99
    5412:	465a      	mov	r2, fp
    5414:	009b      	lsls	r3, r3, #2
    5416:	58d1      	ldr	r1, [r2, r3]
    5418:	1c05      	adds	r5, r0, #0
    541a:	1c38      	adds	r0, r7, #0
    541c:	f7fb fdaa 	bl	f74 <__aeabi_fmul>
    5420:	1c01      	adds	r1, r0, #0
    5422:	1c28      	adds	r0, r5, #0
    5424:	f7fb fa38 	bl	898 <__aeabi_fadd>
    5428:	465b      	mov	r3, fp
    542a:	6718      	str	r0, [r3, #112]	; 0x70
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:889
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    542c:	23a2      	movs	r3, #162	; 0xa2
    542e:	465a      	mov	r2, fp
    5430:	009b      	lsls	r3, r3, #2
    5432:	58d1      	ldr	r1, [r2, r3]
    5434:	1c38      	adds	r0, r7, #0
    5436:	f7fb fd9d 	bl	f74 <__aeabi_fmul>
    543a:	1c01      	adds	r1, r0, #0
    543c:	4640      	mov	r0, r8
    543e:	f7fb fa2b 	bl	898 <__aeabi_fadd>
    5442:	465b      	mov	r3, fp
    5444:	67d8      	str	r0, [r3, #124]	; 0x7c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    5446:	23ab      	movs	r3, #171	; 0xab
    5448:	465a      	mov	r2, fp
    544a:	009b      	lsls	r3, r3, #2
    544c:	58d1      	ldr	r1, [r2, r3]
    544e:	1c38      	adds	r0, r7, #0
    5450:	f7fb fd90 	bl	f74 <__aeabi_fmul>
    5454:	1c01      	adds	r1, r0, #0
    5456:	4648      	mov	r0, r9
    5458:	f7fb fa1e 	bl	898 <__aeabi_fadd>
    545c:	465b      	mov	r3, fp
    545e:	22e4      	movs	r2, #228	; 0xe4
    5460:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:889

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    5462:	23a3      	movs	r3, #163	; 0xa3
    5464:	465a      	mov	r2, fp
    5466:	009b      	lsls	r3, r3, #2
    5468:	58d1      	ldr	r1, [r2, r3]
    546a:	1c20      	adds	r0, r4, #0
    546c:	f7fb fd82 	bl	f74 <__aeabi_fmul>
    5470:	2100      	movs	r1, #0
    5472:	f7fb fa11 	bl	898 <__aeabi_fadd>
    5476:	23a4      	movs	r3, #164	; 0xa4
    5478:	465a      	mov	r2, fp
    547a:	009b      	lsls	r3, r3, #2
    547c:	58d1      	ldr	r1, [r2, r3]
    547e:	1c05      	adds	r5, r0, #0
    5480:	1c30      	adds	r0, r6, #0
    5482:	f7fb fd77 	bl	f74 <__aeabi_fmul>
    5486:	1c01      	adds	r1, r0, #0
    5488:	1c28      	adds	r0, r5, #0
    548a:	f7fb fa05 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    548e:	23ac      	movs	r3, #172	; 0xac
    5490:	465a      	mov	r2, fp
    5492:	009b      	lsls	r3, r3, #2
    5494:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:889

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    5496:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    5498:	1c20      	adds	r0, r4, #0
    549a:	f7fb fd6b 	bl	f74 <__aeabi_fmul>
    549e:	2100      	movs	r1, #0
    54a0:	f7fb f9fa 	bl	898 <__aeabi_fadd>
    54a4:	23ad      	movs	r3, #173	; 0xad
    54a6:	465a      	mov	r2, fp
    54a8:	009b      	lsls	r3, r3, #2
    54aa:	58d1      	ldr	r1, [r2, r3]
    54ac:	1c05      	adds	r5, r0, #0
    54ae:	1c30      	adds	r0, r6, #0
    54b0:	f7fb fd60 	bl	f74 <__aeabi_fmul>
    54b4:	1c01      	adds	r1, r0, #0
    54b6:	1c28      	adds	r0, r5, #0
    54b8:	f7fb f9ee 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:888
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = 0.0F;

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
    54bc:	239a      	movs	r3, #154	; 0x9a
    54be:	465a      	mov	r2, fp
    54c0:	009b      	lsls	r3, r3, #2
    54c2:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    54c4:	9002      	str	r0, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:888
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = 0.0F;

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
    54c6:	1c20      	adds	r0, r4, #0
    54c8:	f7fb fd54 	bl	f74 <__aeabi_fmul>
    54cc:	2100      	movs	r1, #0
    54ce:	f7fb f9e3 	bl	898 <__aeabi_fadd>
    54d2:	239b      	movs	r3, #155	; 0x9b
    54d4:	465a      	mov	r2, fp
    54d6:	009b      	lsls	r3, r3, #2
    54d8:	58d1      	ldr	r1, [r2, r3]
    54da:	1c05      	adds	r5, r0, #0
    54dc:	1c30      	adds	r0, r6, #0
    54de:	f7fb fd49 	bl	f74 <__aeabi_fmul>
    54e2:	1c01      	adds	r1, r0, #0
    54e4:	1c28      	adds	r0, r5, #0
    54e6:	f7fb f9d7 	bl	898 <__aeabi_fadd>
    54ea:	239c      	movs	r3, #156	; 0x9c
    54ec:	465a      	mov	r2, fp
    54ee:	009b      	lsls	r3, r3, #2
    54f0:	58d1      	ldr	r1, [r2, r3]
    54f2:	1c05      	adds	r5, r0, #0
    54f4:	1c38      	adds	r0, r7, #0
    54f6:	f7fb fd3d 	bl	f74 <__aeabi_fmul>
    54fa:	1c01      	adds	r1, r0, #0
    54fc:	1c28      	adds	r0, r5, #0
    54fe:	f7fb f9cb 	bl	898 <__aeabi_fadd>
    5502:	465b      	mov	r3, fp
    5504:	6758      	str	r0, [r3, #116]	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:889
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    5506:	2380      	movs	r3, #128	; 0x80
    5508:	4699      	mov	r9, r3
    550a:	23a5      	movs	r3, #165	; 0xa5
    550c:	465a      	mov	r2, fp
    550e:	009b      	lsls	r3, r3, #2
    5510:	58d1      	ldr	r1, [r2, r3]
    5512:	1c38      	adds	r0, r7, #0
    5514:	f7fb fd2e 	bl	f74 <__aeabi_fmul>
    5518:	1c01      	adds	r1, r0, #0
    551a:	4640      	mov	r0, r8
    551c:	f7fb f9bc 	bl	898 <__aeabi_fadd>
    5520:	465b      	mov	r3, fp
    5522:	464a      	mov	r2, r9
    5524:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    5526:	23e8      	movs	r3, #232	; 0xe8
    5528:	465a      	mov	r2, fp
    552a:	4698      	mov	r8, r3
    552c:	33d1      	adds	r3, #209	; 0xd1
    552e:	33ff      	adds	r3, #255	; 0xff
    5530:	58d1      	ldr	r1, [r2, r3]
    5532:	1c38      	adds	r0, r7, #0
    5534:	f7fb fd1e 	bl	f74 <__aeabi_fmul>
    5538:	1c01      	adds	r1, r0, #0
    553a:	9802      	ldr	r0, [sp, #8]
    553c:	f7fb f9ac 	bl	898 <__aeabi_fadd>
    5540:	465b      	mov	r3, fp
    5542:	4642      	mov	r2, r8
    5544:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:889

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    5546:	23a6      	movs	r3, #166	; 0xa6
    5548:	465a      	mov	r2, fp
    554a:	009b      	lsls	r3, r3, #2
    554c:	58d1      	ldr	r1, [r2, r3]
    554e:	1c20      	adds	r0, r4, #0
    5550:	f7fb fd10 	bl	f74 <__aeabi_fmul>
    5554:	2100      	movs	r1, #0
    5556:	f7fb f99f 	bl	898 <__aeabi_fadd>
    555a:	23a7      	movs	r3, #167	; 0xa7
    555c:	465a      	mov	r2, fp
    555e:	009b      	lsls	r3, r3, #2
    5560:	58d1      	ldr	r1, [r2, r3]
    5562:	1c05      	adds	r5, r0, #0
    5564:	1c30      	adds	r0, r6, #0
    5566:	f7fb fd05 	bl	f74 <__aeabi_fmul>
    556a:	1c01      	adds	r1, r0, #0
    556c:	1c28      	adds	r0, r5, #0
    556e:	f7fb f993 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    5572:	23af      	movs	r3, #175	; 0xaf
    5574:	465a      	mov	r2, fp
    5576:	009b      	lsls	r3, r3, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:889

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    5578:	9002      	str	r0, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    557a:	58d1      	ldr	r1, [r2, r3]
    557c:	1c20      	adds	r0, r4, #0
    557e:	f7fb fcf9 	bl	f74 <__aeabi_fmul>
    5582:	2100      	movs	r1, #0
    5584:	f7fb f988 	bl	898 <__aeabi_fadd>
    5588:	23b0      	movs	r3, #176	; 0xb0
    558a:	465a      	mov	r2, fp
    558c:	009b      	lsls	r3, r3, #2
    558e:	58d1      	ldr	r1, [r2, r3]
    5590:	1c05      	adds	r5, r0, #0
    5592:	1c30      	adds	r0, r6, #0
    5594:	f7fb fcee 	bl	f74 <__aeabi_fmul>
    5598:	1c01      	adds	r1, r0, #0
    559a:	1c28      	adds	r0, r5, #0
    559c:	f7fb f97c 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:888
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = 0.0F;

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
    55a0:	239d      	movs	r3, #157	; 0x9d
    55a2:	465a      	mov	r2, fp
    55a4:	009b      	lsls	r3, r3, #2
    55a6:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    55a8:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:888
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = 0.0F;

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
    55aa:	1c20      	adds	r0, r4, #0
    55ac:	f7fb fce2 	bl	f74 <__aeabi_fmul>
    55b0:	2100      	movs	r1, #0
    55b2:	f7fb f971 	bl	898 <__aeabi_fadd>
    55b6:	239e      	movs	r3, #158	; 0x9e
    55b8:	465a      	mov	r2, fp
    55ba:	009b      	lsls	r3, r3, #2
    55bc:	58d1      	ldr	r1, [r2, r3]
    55be:	1c04      	adds	r4, r0, #0
    55c0:	1c30      	adds	r0, r6, #0
    55c2:	f7fb fcd7 	bl	f74 <__aeabi_fmul>
    55c6:	1c01      	adds	r1, r0, #0
    55c8:	1c20      	adds	r0, r4, #0
    55ca:	f7fb f965 	bl	898 <__aeabi_fadd>
    55ce:	239f      	movs	r3, #159	; 0x9f
    55d0:	465a      	mov	r2, fp
    55d2:	009b      	lsls	r3, r3, #2
    55d4:	58d1      	ldr	r1, [r2, r3]
    55d6:	1c04      	adds	r4, r0, #0
    55d8:	1c38      	adds	r0, r7, #0
    55da:	f7fb fccb 	bl	f74 <__aeabi_fmul>
    55de:	1c01      	adds	r1, r0, #0
    55e0:	1c20      	adds	r0, r4, #0
    55e2:	f7fb f959 	bl	898 <__aeabi_fadd>
    55e6:	465b      	mov	r3, fp
    55e8:	6798      	str	r0, [r3, #120]	; 0x78
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:889
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    55ea:	23a8      	movs	r3, #168	; 0xa8
    55ec:	465a      	mov	r2, fp
    55ee:	009b      	lsls	r3, r3, #2
    55f0:	58d1      	ldr	r1, [r2, r3]
    55f2:	1c38      	adds	r0, r7, #0
    55f4:	f7fb fcbe 	bl	f74 <__aeabi_fmul>
    55f8:	1c01      	adds	r1, r0, #0
    55fa:	9802      	ldr	r0, [sp, #8]
    55fc:	f7fb f94c 	bl	898 <__aeabi_fadd>
    5600:	2484      	movs	r4, #132	; 0x84
    5602:	465b      	mov	r3, fp
    5604:	5118      	str	r0, [r3, r4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    5606:	23b1      	movs	r3, #177	; 0xb1
    5608:	465a      	mov	r2, fp
    560a:	009b      	lsls	r3, r3, #2
    560c:	58d1      	ldr	r1, [r2, r3]
    560e:	1c38      	adds	r0, r7, #0
    5610:	f7fb fcb0 	bl	f74 <__aeabi_fmul>
    5614:	1c01      	adds	r1, r0, #0
    5616:	1c28      	adds	r0, r5, #0
    5618:	f7fb f93e 	bl	898 <__aeabi_fadd>
    561c:	26ec      	movs	r6, #236	; 0xec
    561e:	465b      	mov	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:899
	// *********************************************************************************
	// apply the a posteriori error corrections to the a posteriori state vector
	// *********************************************************************************

	// get the a posteriori delta quaternion
	fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), pthisSV->fThErrPl, -1.0F);
    5620:	4659      	mov	r1, fp
    5622:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    5624:	5198      	str	r0, [r3, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:899
	// *********************************************************************************
	// apply the a posteriori error corrections to the a posteriori state vector
	// *********************************************************************************

	// get the a posteriori delta quaternion
	fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), pthisSV->fThErrPl, -1.0F);
    5626:	3170      	adds	r1, #112	; 0x70
    5628:	1c38      	adds	r0, r7, #0
    562a:	4a3f      	ldr	r2, [pc, #252]	; (5728 <fRun_6DOF_GY_KALMAN+0xac0>)
    562c:	f008 feb2 	bl	e394 <fQuaternionFromRotationVectorDeg>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:903

	// compute the a posteriori orientation quaternion fqPl = fqMi * Deltaq(-thetae+)
	// the resulting quaternion may have negative scalar component q0
	qAeqBxC(&(pthisSV->fqPl), &(pthisSV->fqMi), &(pthisSV->fDeltaq));
    5630:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    5632:	1c3a      	adds	r2, r7, #0
    5634:	9904      	ldr	r1, [sp, #16]
    5636:	1c28      	adds	r0, r5, #0
    5638:	f009 fb98 	bl	ed6c <qAeqBxC>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:907

	// normalize the a posteriori orientation quaternion to stop error propagation 
	// the renormalization function ensures that the scalar component q0 is non-negative
	fqAeqNormqA(&(pthisSV->fqPl));
    563c:	1c28      	adds	r0, r5, #0
    563e:	f009 fcd5 	bl	efec <fqAeqNormqA>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:910

	// compute the a posteriori rotation matrix from the a posteriori quaternion
	fRotationMatrixFromQuaternion(pthisSV->fRPl, &(pthisSV->fqPl));
    5642:	980c      	ldr	r0, [sp, #48]	; 0x30
    5644:	1c29      	adds	r1, r5, #0
    5646:	f009 f811 	bl	e66c <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:913

	// compute the rotation vector from the a posteriori quaternion
	fRotationVectorDegFromQuaternion(&(pthisSV->fqPl), pthisSV->fRVecPl);
    564a:	4659      	mov	r1, fp
    564c:	1c28      	adds	r0, r5, #0
    564e:	3148      	adds	r1, #72	; 0x48
    5650:	f009 f89c 	bl	e78c <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:919

	// update the a posteriori gyro offset vector b+ and linear acceleration vector a+ (sensor frame)
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    5654:	465b      	mov	r3, fp
    5656:	6e58      	ldr	r0, [r3, #100]	; 0x64
    5658:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
    565a:	f7fb fdbd 	bl	11d8 <__aeabi_fsub>
    565e:	465b      	mov	r3, fp
    5660:	6658      	str	r0, [r3, #100]	; 0x64
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:921
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    5662:	2384      	movs	r3, #132	; 0x84
    5664:	465a      	mov	r2, fp
    5666:	005b      	lsls	r3, r3, #1
    5668:	58d0      	ldr	r0, [r2, r3]
    566a:	465b      	mov	r3, fp
    566c:	22e4      	movs	r2, #228	; 0xe4
    566e:	5899      	ldr	r1, [r3, r2]
    5670:	f7fb fdb2 	bl	11d8 <__aeabi_fsub>
    5674:	465a      	mov	r2, fp
    5676:	23d8      	movs	r3, #216	; 0xd8
    5678:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:919

	// update the a posteriori gyro offset vector b+ and linear acceleration vector a+ (sensor frame)
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    567a:	6e90      	ldr	r0, [r2, #104]	; 0x68
    567c:	465b      	mov	r3, fp
    567e:	464a      	mov	r2, r9
    5680:	5899      	ldr	r1, [r3, r2]
    5682:	f7fb fda9 	bl	11d8 <__aeabi_fsub>
    5686:	465b      	mov	r3, fp
    5688:	6698      	str	r0, [r3, #104]	; 0x68
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:921
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    568a:	2386      	movs	r3, #134	; 0x86
    568c:	465a      	mov	r2, fp
    568e:	005b      	lsls	r3, r3, #1
    5690:	58d0      	ldr	r0, [r2, r3]
    5692:	465b      	mov	r3, fp
    5694:	4642      	mov	r2, r8
    5696:	5899      	ldr	r1, [r3, r2]
    5698:	f7fb fd9e 	bl	11d8 <__aeabi_fsub>
    569c:	465a      	mov	r2, fp
    569e:	23dc      	movs	r3, #220	; 0xdc
    56a0:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:919

	// update the a posteriori gyro offset vector b+ and linear acceleration vector a+ (sensor frame)
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    56a2:	5911      	ldr	r1, [r2, r4]
    56a4:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    56a6:	f7fb fd97 	bl	11d8 <__aeabi_fsub>
    56aa:	465b      	mov	r3, fp
    56ac:	66d8      	str	r0, [r3, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:921
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    56ae:	2388      	movs	r3, #136	; 0x88
    56b0:	465a      	mov	r2, fp
    56b2:	005b      	lsls	r3, r3, #1
    56b4:	58d0      	ldr	r0, [r2, r3]
    56b6:	5991      	ldr	r1, [r2, r6]
    56b8:	f7fb fd8e 	bl	11d8 <__aeabi_fsub>
    56bc:	23e0      	movs	r3, #224	; 0xe0
    56be:	465a      	mov	r2, fp
    56c0:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:928

	// *********************************************************************************
	// compute the a posteriori Euler angles from the orientation matrix
	// *********************************************************************************

	if (ithisCoordSystem == NED)
    56c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    56c4:	2b00      	cmp	r3, #0
    56c6:	d100      	bne.n	56ca <fRun_6DOF_GY_KALMAN+0xa62>
    56c8:	e298      	b.n	5bfc <fRun_6DOF_GY_KALMAN+0xf94>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:934
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
				&(pthisSV->fRhoPl), &(pthisSV->fChiPl));
	}
	else if (ithisCoordSystem == ANDROID)
    56ca:	2b01      	cmp	r3, #1
    56cc:	d100      	bne.n	56d0 <fRun_6DOF_GY_KALMAN+0xa68>
    56ce:	e2a6      	b.n	5c1e <fRun_6DOF_GY_KALMAN+0xfb6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:943
				&(pthisSV->fRhoPl), &(pthisSV->fChiPl));
	}
	else
	{
		// calculate Win8 Euler angles
		fWin8AnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
    56d0:	465b      	mov	r3, fp
    56d2:	330c      	adds	r3, #12
    56d4:	9300      	str	r3, [sp, #0]
    56d6:	3304      	adds	r3, #4
    56d8:	9301      	str	r3, [sp, #4]
    56da:	3204      	adds	r2, #4
    56dc:	980c      	ldr	r0, [sp, #48]	; 0x30
    56de:	4659      	mov	r1, fp
    56e0:	3b08      	subs	r3, #8
    56e2:	f008 fd95 	bl	e210 <fWin8AnglesDegFromRotationMatrix>
    56e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    56e8:	1c1a      	adds	r2, r3, #0
    56ea:	23d4      	movs	r3, #212	; 0xd4
    56ec:	005b      	lsls	r3, r3, #1
    56ee:	445b      	add	r3, fp
    56f0:	9304      	str	r3, [sp, #16]
    56f2:	4653      	mov	r3, sl
    56f4:	9305      	str	r3, [sp, #20]
    56f6:	465b      	mov	r3, fp
    56f8:	4693      	mov	fp, r2
    56fa:	9306      	str	r3, [sp, #24]
    56fc:	2324      	movs	r3, #36	; 0x24
    56fe:	425b      	negs	r3, r3
    5700:	445b      	add	r3, fp
    5702:	4699      	mov	r9, r3
    5704:	23b4      	movs	r3, #180	; 0xb4
    5706:	009b      	lsls	r3, r3, #2
    5708:	445b      	add	r3, fp
    570a:	9302      	str	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    570c:	9b03      	ldr	r3, [sp, #12]
    570e:	469a      	mov	sl, r3
    5710:	23bd      	movs	r3, #189	; 0xbd
    5712:	009b      	lsls	r3, r3, #2
    5714:	445b      	add	r3, fp
    5716:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:965
		pfPPlus9x9ij = pthisSV->fPPlus9x9[i];

		for (j = 0; j < 9; j++) // loop over the columns of P+
		{
			// zero P+[i][j] 
			*pfPPlus9x9ij = 0.0F;
    5718:	464b      	mov	r3, r9
    571a:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:971

			// initialize pfC3x9ik for current i, k=0
			pfC3x9ik = pthisSV->fC3x9[i];

			// initialize pfQw9x9kj for current j, k=0
			pfQw9x9kj = &pthisSV->fQw9x9[0][j];
    571c:	4655      	mov	r5, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:965
		pfPPlus9x9ij = pthisSV->fPPlus9x9[i];

		for (j = 0; j < 9; j++) // loop over the columns of P+
		{
			// zero P+[i][j] 
			*pfPPlus9x9ij = 0.0F;
    571e:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:968

			// initialize pfC3x9ik for current i, k=0
			pfC3x9ik = pthisSV->fC3x9[i];
    5720:	9c02      	ldr	r4, [sp, #8]
    5722:	4647      	mov	r7, r8
    5724:	e00d      	b.n	5742 <fRun_6DOF_GY_KALMAN+0xada>
    5726:	46c0      	nop			; (mov r8, r8)
    5728:	bf800000 	.word	0xbf800000
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:979
			for (k = 0; k < 9; k++)
			{
				if ((*pfC3x9ik != 0.0F) && (*pfQw9x9kj != 0.0F))
				{
					if (*pfC3x9ik == 1.0F)
						*pfPPlus9x9ij += *pfQw9x9kj;
    572c:	464b      	mov	r3, r9
    572e:	4641      	mov	r1, r8
    5730:	6818      	ldr	r0, [r3, #0]
    5732:	f7fb f8b1 	bl	898 <__aeabi_fadd>
    5736:	464b      	mov	r3, r9
    5738:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:987 (discriminator 2)
					else
						*pfPPlus9x9ij += *pfC3x9ik * *pfQw9x9kj;
				}

				// update pfC3x9ik and pfQw9x9kj for next iteration of k
				pfC3x9ik++;
    573a:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:988 (discriminator 2)
				pfQw9x9kj += 9;
    573c:	3524      	adds	r5, #36	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:974 (discriminator 2)

			// initialize pfQw9x9kj for current j, k=0
			pfQw9x9kj = &pthisSV->fQw9x9[0][j];

			// sum matrix products over inner loop over k
			for (k = 0; k < 9; k++)
    573e:	42a7      	cmp	r7, r4
    5740:	d027      	beq.n	5792 <fRun_6DOF_GY_KALMAN+0xb2a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:976
			{
				if ((*pfC3x9ik != 0.0F) && (*pfQw9x9kj != 0.0F))
    5742:	6826      	ldr	r6, [r4, #0]
    5744:	2100      	movs	r1, #0
    5746:	1c30      	adds	r0, r6, #0
    5748:	f7fb f878 	bl	83c <__aeabi_fcmpeq>
    574c:	2800      	cmp	r0, #0
    574e:	d1f4      	bne.n	573a <fRun_6DOF_GY_KALMAN+0xad2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:976 (discriminator 1)
    5750:	682b      	ldr	r3, [r5, #0]
    5752:	2100      	movs	r1, #0
    5754:	1c18      	adds	r0, r3, #0
    5756:	4698      	mov	r8, r3
    5758:	f7fb f870 	bl	83c <__aeabi_fcmpeq>
    575c:	2800      	cmp	r0, #0
    575e:	d1ec      	bne.n	573a <fRun_6DOF_GY_KALMAN+0xad2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:978
				{
					if (*pfC3x9ik == 1.0F)
    5760:	21fe      	movs	r1, #254	; 0xfe
    5762:	1c30      	adds	r0, r6, #0
    5764:	0589      	lsls	r1, r1, #22
    5766:	f7fb f869 	bl	83c <__aeabi_fcmpeq>
    576a:	2800      	cmp	r0, #0
    576c:	d1de      	bne.n	572c <fRun_6DOF_GY_KALMAN+0xac4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:980
						*pfPPlus9x9ij += *pfQw9x9kj;
					else if (*pfC3x9ik == -1.0F)
    576e:	1c30      	adds	r0, r6, #0
    5770:	49ee      	ldr	r1, [pc, #952]	; (5b2c <fRun_6DOF_GY_KALMAN+0xec4>)
    5772:	f7fb f863 	bl	83c <__aeabi_fcmpeq>
    5776:	2800      	cmp	r0, #0
    5778:	d100      	bne.n	577c <fRun_6DOF_GY_KALMAN+0xb14>
    577a:	e1e8      	b.n	5b4e <fRun_6DOF_GY_KALMAN+0xee6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:981
						*pfPPlus9x9ij -= *pfQw9x9kj;
    577c:	464b      	mov	r3, r9
    577e:	4641      	mov	r1, r8
    5780:	6818      	ldr	r0, [r3, #0]
    5782:	f7fb fd29 	bl	11d8 <__aeabi_fsub>
    5786:	464b      	mov	r3, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:987
					else
						*pfPPlus9x9ij += *pfC3x9ik * *pfQw9x9kj;
				}

				// update pfC3x9ik and pfQw9x9kj for next iteration of k
				pfC3x9ik++;
    5788:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:981
				if ((*pfC3x9ik != 0.0F) && (*pfQw9x9kj != 0.0F))
				{
					if (*pfC3x9ik == 1.0F)
						*pfPPlus9x9ij += *pfQw9x9kj;
					else if (*pfC3x9ik == -1.0F)
						*pfPPlus9x9ij -= *pfQw9x9kj;
    578a:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:988
						*pfPPlus9x9ij += *pfC3x9ik * *pfQw9x9kj;
				}

				// update pfC3x9ik and pfQw9x9kj for next iteration of k
				pfC3x9ik++;
				pfQw9x9kj += 9;
    578c:	3524      	adds	r5, #36	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:974

			// initialize pfQw9x9kj for current j, k=0
			pfQw9x9kj = &pthisSV->fQw9x9[0][j];

			// sum matrix products over inner loop over k
			for (k = 0; k < 9; k++)
    578e:	42a7      	cmp	r7, r4
    5790:	d1d7      	bne.n	5742 <fRun_6DOF_GY_KALMAN+0xada>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:993 (discriminator 2)
				pfQw9x9kj += 9;

			} // end of loop over k

			// increment pfPPlus9x9ij for next iteration of j
			pfPPlus9x9ij++;
    5792:	2304      	movs	r3, #4
    5794:	469c      	mov	ip, r3
    5796:	44e1      	add	r9, ip
    5798:	46b8      	mov	r8, r7
    579a:	44e2      	add	sl, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:962 (discriminator 2)
	for (i = 0; i < 3; i++) // loop over the rows of P+
	{
		// initialize pfPPlus9x9ij for current i, j=0
		pfPPlus9x9ij = pthisSV->fPPlus9x9[i];

		for (j = 0; j < 9; j++) // loop over the columns of P+
    579c:	45d9      	cmp	r9, fp
    579e:	d1bb      	bne.n	5718 <fRun_6DOF_GY_KALMAN+0xab0>
    57a0:	3320      	adds	r3, #32
    57a2:	444b      	add	r3, r9
    57a4:	469b      	mov	fp, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:957 (discriminator 2)
	// ***********************************************************************************

	// set P+ (3x9 scratch sub-matrix) to the product C (3x9) * Qw (9x9)
	// where both C and Qw are sparse and C has a significant number of +1 entries
	// the resulting matrix is sparse but not symmetric
	for (i = 0; i < 3; i++) // loop over the rows of P+
    57a6:	9b04      	ldr	r3, [sp, #16]
    57a8:	459b      	cmp	fp, r3
    57aa:	d1a7      	bne.n	56fc <fRun_6DOF_GY_KALMAN+0xa94>
    57ac:	9b05      	ldr	r3, [sp, #20]
    57ae:	469a      	mov	sl, r3
    57b0:	9b06      	ldr	r3, [sp, #24]
    57b2:	469b      	mov	fp, r3
    57b4:	2300      	movs	r3, #0
    57b6:	4698      	mov	r8, r3
    57b8:	465b      	mov	r3, fp
    57ba:	9304      	str	r3, [sp, #16]
    57bc:	9b03      	ldr	r3, [sp, #12]
    57be:	469b      	mov	fp, r3
    57c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    57c2:	4699      	mov	r9, r3
    57c4:	466a      	mov	r2, sp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1005
	// where working array P+ (6x12 sub-matrix) is sparse but K is not sparse
	// only on and above diagonal terms of P+ are computed since P+ is symmetric
	for (i = 0; i < 9; i++)
	{
		// initialize pfQw9x9ij for i, j=i
		pfQw9x9ij = pthisSV->fQw9x9[i] + i;
    57c6:	4645      	mov	r5, r8
    57c8:	2408      	movs	r4, #8
    57ca:	465e      	mov	r6, fp
    57cc:	7215      	strb	r5, [r2, #8]
    57ce:	5714      	ldrsb	r4, [r2, r4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1013
		{
			// initialize pfK9x3ik for i, k=0
			pfK9x3ik = pthisSV->fK9x3[i];

			// initialize pfPPlus9x9kj for j, k=0
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;
    57d0:	00a4      	lsls	r4, r4, #2
    57d2:	444c      	add	r4, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1019

			// compute on and above diagonal matrix entry
			for (k = 0; k < 3; k++)
			{
				// check for non-zero values since P+ (3x9 scratch sub-matrix) is sparse
				if (*pfPPlus9x9kj != 0.0F)
    57d4:	6827      	ldr	r7, [r4, #0]
    57d6:	2100      	movs	r1, #0
    57d8:	1c38      	adds	r0, r7, #0
    57da:	f7fb f82f 	bl	83c <__aeabi_fcmpeq>
    57de:	2800      	cmp	r0, #0
    57e0:	d109      	bne.n	57f6 <fRun_6DOF_GY_KALMAN+0xb8e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1021
				{
					*pfQw9x9ij -= *pfK9x3ik * *pfPPlus9x9kj;
    57e2:	4653      	mov	r3, sl
    57e4:	1c38      	adds	r0, r7, #0
    57e6:	6819      	ldr	r1, [r3, #0]
    57e8:	f7fb fbc4 	bl	f74 <__aeabi_fmul>
    57ec:	1c01      	adds	r1, r0, #0
    57ee:	6830      	ldr	r0, [r6, #0]
    57f0:	f7fb fcf2 	bl	11d8 <__aeabi_fsub>
    57f4:	6030      	str	r0, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1019

			// compute on and above diagonal matrix entry
			for (k = 0; k < 3; k++)
			{
				// check for non-zero values since P+ (3x9 scratch sub-matrix) is sparse
				if (*pfPPlus9x9kj != 0.0F)
    57f6:	6a67      	ldr	r7, [r4, #36]	; 0x24
    57f8:	2100      	movs	r1, #0
    57fa:	1c38      	adds	r0, r7, #0
    57fc:	f7fb f81e 	bl	83c <__aeabi_fcmpeq>
    5800:	2800      	cmp	r0, #0
    5802:	d109      	bne.n	5818 <fRun_6DOF_GY_KALMAN+0xbb0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1021
				{
					*pfQw9x9ij -= *pfK9x3ik * *pfPPlus9x9kj;
    5804:	4653      	mov	r3, sl
    5806:	1c38      	adds	r0, r7, #0
    5808:	6859      	ldr	r1, [r3, #4]
    580a:	f7fb fbb3 	bl	f74 <__aeabi_fmul>
    580e:	1c01      	adds	r1, r0, #0
    5810:	6830      	ldr	r0, [r6, #0]
    5812:	f7fb fce1 	bl	11d8 <__aeabi_fsub>
    5816:	6030      	str	r0, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1019

			// compute on and above diagonal matrix entry
			for (k = 0; k < 3; k++)
			{
				// check for non-zero values since P+ (3x9 scratch sub-matrix) is sparse
				if (*pfPPlus9x9kj != 0.0F)
    5818:	6ca4      	ldr	r4, [r4, #72]	; 0x48
    581a:	2100      	movs	r1, #0
    581c:	1c20      	adds	r0, r4, #0
    581e:	f7fb f80d 	bl	83c <__aeabi_fcmpeq>
    5822:	2800      	cmp	r0, #0
    5824:	d109      	bne.n	583a <fRun_6DOF_GY_KALMAN+0xbd2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1021
				{
					*pfQw9x9ij -= *pfK9x3ik * *pfPPlus9x9kj;
    5826:	4653      	mov	r3, sl
    5828:	1c20      	adds	r0, r4, #0
    582a:	6899      	ldr	r1, [r3, #8]
    582c:	f7fb fba2 	bl	f74 <__aeabi_fmul>
    5830:	1c01      	adds	r1, r0, #0
    5832:	6830      	ldr	r0, [r6, #0]
    5834:	f7fb fcd0 	bl	11d8 <__aeabi_fsub>
    5838:	6030      	str	r0, [r6, #0]
    583a:	3501      	adds	r5, #1
    583c:	b2ed      	uxtb	r5, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1007
	for (i = 0; i < 9; i++)
	{
		// initialize pfQw9x9ij for i, j=i
		pfQw9x9ij = pthisSV->fQw9x9[i] + i;

		for (j = i; j < 9; j++)
    583e:	b26c      	sxtb	r4, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1031
				pfPPlus9x9kj += 9;

			} // end of loop over k

			// increment pfQw9x9ij for next iteration of j
			pfQw9x9ij++;
    5840:	3604      	adds	r6, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1007
	for (i = 0; i < 9; i++)
	{
		// initialize pfQw9x9ij for i, j=i
		pfQw9x9ij = pthisSV->fQw9x9[i] + i;

		for (j = i; j < 9; j++)
    5842:	2c08      	cmp	r4, #8
    5844:	ddc4      	ble.n	57d0 <fRun_6DOF_GY_KALMAN+0xb68>
    5846:	4643      	mov	r3, r8
    5848:	3301      	adds	r3, #1
    584a:	b2db      	uxtb	r3, r3
    584c:	b2da      	uxtb	r2, r3
    584e:	4690      	mov	r8, r2
    5850:	2228      	movs	r2, #40	; 0x28
    5852:	4694      	mov	ip, r2
    5854:	3a1c      	subs	r2, #28
    5856:	44e3      	add	fp, ip
    5858:	4694      	mov	ip, r2
    585a:	44e2      	add	sl, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1002 (discriminator 2)

	// compute P+ = (I9 - K * C) * Qw = Qw - K * (C * Qw) = Qw - K * P+ (3x9 sub-matrix)
	// storing result P+ in Qw and over-writing Qw which is OK since Qw is later computed from P+
	// where working array P+ (6x12 sub-matrix) is sparse but K is not sparse
	// only on and above diagonal terms of P+ are computed since P+ is symmetric
	for (i = 0; i < 9; i++)
    585c:	2b09      	cmp	r3, #9
    585e:	d1b1      	bne.n	57c4 <fRun_6DOF_GY_KALMAN+0xb5c>
    5860:	9b04      	ldr	r3, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1002
    5862:	2600      	movs	r6, #0
    5864:	469b      	mov	fp, r3
    5866:	238e      	movs	r3, #142	; 0x8e
    5868:	005b      	lsls	r3, r3, #1
    586a:	445b      	add	r3, fp
    586c:	469c      	mov	ip, r3
    586e:	2500      	movs	r5, #0
    5870:	46b1      	mov	r9, r6
    5872:	465f      	mov	r7, fp
    5874:	4663      	mov	r3, ip
    5876:	33ad      	adds	r3, #173	; 0xad
    5878:	33ff      	adds	r3, #255	; 0xff
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1046
		// initialize pfPPlus9x9ij and pfQw9x9ij for i, j=i
		pfPPlus9x9ij = pthisSV->fPPlus9x9[i] + i;
		pfQw9x9ij = pthisSV->fQw9x9[i] + i;

		// copy the on-diagonal elements and increment pointers to enter loop at j=i+1
		*(pfPPlus9x9ij++) = *(pfQw9x9ij++);
    587a:	681a      	ldr	r2, [r3, #0]
    587c:	4663      	mov	r3, ip
    587e:	464e      	mov	r6, r9
    5880:	3b04      	subs	r3, #4
    5882:	601a      	str	r2, [r3, #0]
    5884:	466a      	mov	r2, sp
    5886:	3601      	adds	r6, #1
    5888:	b2f3      	uxtb	r3, r6
    588a:	7213      	strb	r3, [r2, #8]
    588c:	4698      	mov	r8, r3
    588e:	7a13      	ldrb	r3, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1049

		// loop over above diagonal columns j copying to below-diagonal elements
		for (j = i + 1; j < 9; j++)
    5890:	7213      	strb	r3, [r2, #8]
    5892:	4699      	mov	r9, r3
    5894:	7a13      	ldrb	r3, [r2, #8]
    5896:	b25b      	sxtb	r3, r3
    5898:	2b09      	cmp	r3, #9
    589a:	d011      	beq.n	58c0 <fRun_6DOF_GY_KALMAN+0xc58>
    589c:	4664      	mov	r4, ip
    589e:	4660      	mov	r0, ip
    58a0:	464a      	mov	r2, r9
    58a2:	34b1      	adds	r4, #177	; 0xb1
    58a4:	34ff      	adds	r4, #255	; 0xff
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1051 (discriminator 3)
		{
			*(pfPPlus9x9ij++)= pthisSV->fPPlus9x9[j][i] = *(pfQw9x9ij++);
    58a6:	00de      	lsls	r6, r3, #3
    58a8:	18f3      	adds	r3, r6, r3
    58aa:	195b      	adds	r3, r3, r5
    58ac:	cc02      	ldmia	r4!, {r1}
    58ae:	3346      	adds	r3, #70	; 0x46
    58b0:	3201      	adds	r2, #1
    58b2:	009b      	lsls	r3, r3, #2
    58b4:	b2d2      	uxtb	r2, r2
    58b6:	51d9      	str	r1, [r3, r7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1049 (discriminator 3)

		// copy the on-diagonal elements and increment pointers to enter loop at j=i+1
		*(pfPPlus9x9ij++) = *(pfQw9x9ij++);

		// loop over above diagonal columns j copying to below-diagonal elements
		for (j = i + 1; j < 9; j++)
    58b8:	b253      	sxtb	r3, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1051 (discriminator 3)
		{
			*(pfPPlus9x9ij++)= pthisSV->fPPlus9x9[j][i] = *(pfQw9x9ij++);
    58ba:	c002      	stmia	r0!, {r1}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1049 (discriminator 3)

		// copy the on-diagonal elements and increment pointers to enter loop at j=i+1
		*(pfPPlus9x9ij++) = *(pfQw9x9ij++);

		// loop over above diagonal columns j copying to below-diagonal elements
		for (j = i + 1; j < 9; j++)
    58bc:	2b09      	cmp	r3, #9
    58be:	d1f2      	bne.n	58a6 <fRun_6DOF_GY_KALMAN+0xc3e>
    58c0:	2328      	movs	r3, #40	; 0x28
    58c2:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1039
	} // end of loop over i

	// Qw now holds the on and above diagonal elements of P+ (9x9)
	// so perform a simple copy to the all elements of P+
	// after execution of this code P+ is valid but Qw remains invalid
	for (i = 0; i < 9; i++)
    58c4:	4643      	mov	r3, r8
    58c6:	3501      	adds	r5, #1
    58c8:	44d4      	add	ip, sl
    58ca:	2b09      	cmp	r3, #9
    58cc:	d1d2      	bne.n	5874 <fRun_6DOF_GY_KALMAN+0xc0c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1066
	// zero the matrix Qw (9x9)
	for (i = 0; i < 9; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fQw9x9[i][j] = 0.0F;
    58ce:	22b3      	movs	r2, #179	; 0xb3
    58d0:	2300      	movs	r3, #0
    58d2:	0092      	lsls	r2, r2, #2
    58d4:	50bb      	str	r3, [r7, r2]
    58d6:	3204      	adds	r2, #4
    58d8:	50bb      	str	r3, [r7, r2]
    58da:	3208      	adds	r2, #8
    58dc:	50bb      	str	r3, [r7, r2]
    58de:	3204      	adds	r2, #4
    58e0:	50bb      	str	r3, [r7, r2]
    58e2:	3204      	adds	r2, #4
    58e4:	50bb      	str	r3, [r7, r2]
    58e6:	3204      	adds	r2, #4
    58e8:	50bb      	str	r3, [r7, r2]
    58ea:	3204      	adds	r2, #4
    58ec:	50bb      	str	r3, [r7, r2]
    58ee:	3204      	adds	r2, #4
    58f0:	50bb      	str	r3, [r7, r2]
    58f2:	3208      	adds	r2, #8
    58f4:	50bb      	str	r3, [r7, r2]
    58f6:	3204      	adds	r2, #4
    58f8:	50bb      	str	r3, [r7, r2]
    58fa:	3208      	adds	r2, #8
    58fc:	50bb      	str	r3, [r7, r2]
    58fe:	3204      	adds	r2, #4
    5900:	50bb      	str	r3, [r7, r2]
    5902:	3204      	adds	r2, #4
    5904:	50bb      	str	r3, [r7, r2]
    5906:	3204      	adds	r2, #4
    5908:	50bb      	str	r3, [r7, r2]
    590a:	3204      	adds	r2, #4
    590c:	50bb      	str	r3, [r7, r2]
    590e:	3204      	adds	r2, #4
    5910:	50bb      	str	r3, [r7, r2]
    5912:	3208      	adds	r2, #8
    5914:	50bb      	str	r3, [r7, r2]
    5916:	3204      	adds	r2, #4
    5918:	50bb      	str	r3, [r7, r2]
    591a:	3208      	adds	r2, #8
    591c:	50bb      	str	r3, [r7, r2]
    591e:	3204      	adds	r2, #4
    5920:	50bb      	str	r3, [r7, r2]
    5922:	3204      	adds	r2, #4
    5924:	50bb      	str	r3, [r7, r2]
    5926:	3208      	adds	r2, #8
    5928:	50bb      	str	r3, [r7, r2]
    592a:	3204      	adds	r2, #4
    592c:	50bb      	str	r3, [r7, r2]
    592e:	3208      	adds	r2, #8
    5930:	50bb      	str	r3, [r7, r2]
    5932:	3204      	adds	r2, #4
    5934:	50bb      	str	r3, [r7, r2]
    5936:	3204      	adds	r2, #4
    5938:	50bb      	str	r3, [r7, r2]
    593a:	3204      	adds	r2, #4
    593c:	50bb      	str	r3, [r7, r2]
    593e:	3204      	adds	r2, #4
    5940:	50bb      	str	r3, [r7, r2]
    5942:	3204      	adds	r2, #4
    5944:	50bb      	str	r3, [r7, r2]
    5946:	3208      	adds	r2, #8
    5948:	50bb      	str	r3, [r7, r2]
    594a:	3204      	adds	r2, #4
    594c:	50bb      	str	r3, [r7, r2]
    594e:	3208      	adds	r2, #8
    5950:	50bb      	str	r3, [r7, r2]
    5952:	3204      	adds	r2, #4
    5954:	50bb      	str	r3, [r7, r2]
    5956:	3204      	adds	r2, #4
    5958:	50bb      	str	r3, [r7, r2]
    595a:	3204      	adds	r2, #4
    595c:	50bb      	str	r3, [r7, r2]
    595e:	3204      	adds	r2, #4
    5960:	50bb      	str	r3, [r7, r2]
    5962:	3204      	adds	r2, #4
    5964:	50bb      	str	r3, [r7, r2]
    5966:	3208      	adds	r2, #8
    5968:	50bb      	str	r3, [r7, r2]
    596a:	3204      	adds	r2, #4
    596c:	50bb      	str	r3, [r7, r2]
    596e:	1c39      	adds	r1, r7, #0
    5970:	3208      	adds	r2, #8
    5972:	50bb      	str	r3, [r7, r2]
    5974:	3204      	adds	r2, #4
    5976:	50bb      	str	r3, [r7, r2]
    5978:	3204      	adds	r2, #4
    597a:	50bb      	str	r3, [r7, r2]
    597c:	3204      	adds	r2, #4
    597e:	50bb      	str	r3, [r7, r2]
    5980:	3204      	adds	r2, #4
    5982:	50bb      	str	r3, [r7, r2]
    5984:	3204      	adds	r2, #4
    5986:	50bb      	str	r3, [r7, r2]
    5988:	3204      	adds	r2, #4
    598a:	50bb      	str	r3, [r7, r2]
    598c:	3204      	adds	r2, #4
    598e:	50bb      	str	r3, [r7, r2]
    5990:	3204      	adds	r2, #4
    5992:	50bb      	str	r3, [r7, r2]
    5994:	3208      	adds	r2, #8
    5996:	50bb      	str	r3, [r7, r2]
    5998:	3204      	adds	r2, #4
    599a:	50bb      	str	r3, [r7, r2]
    599c:	3204      	adds	r2, #4
    599e:	50bb      	str	r3, [r7, r2]
    59a0:	3204      	adds	r2, #4
    59a2:	50bb      	str	r3, [r7, r2]
    59a4:	3204      	adds	r2, #4
    59a6:	50bb      	str	r3, [r7, r2]
    59a8:	3204      	adds	r2, #4
    59aa:	50bb      	str	r3, [r7, r2]
    59ac:	3204      	adds	r2, #4
    59ae:	50bb      	str	r3, [r7, r2]
    59b0:	3204      	adds	r2, #4
    59b2:	50bb      	str	r3, [r7, r2]
    59b4:	3204      	adds	r2, #4
    59b6:	50bb      	str	r3, [r7, r2]
    59b8:	3208      	adds	r2, #8
    59ba:	50bb      	str	r3, [r7, r2]
    59bc:	3204      	adds	r2, #4
    59be:	50bb      	str	r3, [r7, r2]
    59c0:	3204      	adds	r2, #4
    59c2:	50bb      	str	r3, [r7, r2]
    59c4:	3204      	adds	r2, #4
    59c6:	50bb      	str	r3, [r7, r2]
    59c8:	3204      	adds	r2, #4
    59ca:	50bb      	str	r3, [r7, r2]
    59cc:	3204      	adds	r2, #4
    59ce:	50bb      	str	r3, [r7, r2]
    59d0:	3204      	adds	r2, #4
    59d2:	50bb      	str	r3, [r7, r2]
    59d4:	3204      	adds	r2, #4
    59d6:	50bb      	str	r3, [r7, r2]
    59d8:	4a55      	ldr	r2, [pc, #340]	; (5b30 <fRun_6DOF_GY_KALMAN+0xec8>)
    59da:	46bb      	mov	fp, r7
    59dc:	50bb      	str	r3, [r7, r2]
    59de:	4b55      	ldr	r3, [pc, #340]	; (5b34 <fRun_6DOF_GY_KALMAN+0xecc>)
    59e0:	58fe      	ldr	r6, [r7, r3]
    59e2:	3304      	adds	r3, #4
    59e4:	58ff      	ldr	r7, [r7, r3]
    59e6:	3b08      	subs	r3, #8
    59e8:	58cc      	ldr	r4, [r1, r3]
    59ea:	2380      	movs	r3, #128	; 0x80
    59ec:	061b      	lsls	r3, r3, #24
    59ee:	469c      	mov	ip, r3
    59f0:	238f      	movs	r3, #143	; 0x8f
    59f2:	00db      	lsls	r3, r3, #3
    59f4:	58cd      	ldr	r5, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1074

	// update the covariance matrix components
	for (i = 0; i < 3; i++)
	{
		// Qw[th-th-] = Qw[0-2][0-2] = E[th-(th-)^T] = Q[th+th+] + deltat^2 * (Q[b+b+] + (Qwb + QvG) * I)
		pthisSV->fQw9x9[i][i] = pthisSV->fPPlus9x9[i][i] + pthisSV->fdeltatsq * (pthisSV->fPPlus9x9[i + 3][i + 3] + pthisSV->fQwbplusQvG);
    59f6:	23c8      	movs	r3, #200	; 0xc8
    59f8:	005b      	lsls	r3, r3, #1
    59fa:	58cb      	ldr	r3, [r1, r3]
    59fc:	1c39      	adds	r1, r7, #0
    59fe:	1c18      	adds	r0, r3, #0
    5a00:	4464      	add	r4, ip
    5a02:	4698      	mov	r8, r3
    5a04:	f7fa ff48 	bl	898 <__aeabi_fadd>
    5a08:	1c31      	adds	r1, r6, #0
    5a0a:	f7fb fab3 	bl	f74 <__aeabi_fmul>
    5a0e:	238c      	movs	r3, #140	; 0x8c
    5a10:	465a      	mov	r2, fp
    5a12:	005b      	lsls	r3, r3, #1
    5a14:	1c01      	adds	r1, r0, #0
    5a16:	58d0      	ldr	r0, [r2, r3]
    5a18:	f7fa ff3e 	bl	898 <__aeabi_fadd>
    5a1c:	23b2      	movs	r3, #178	; 0xb2
    5a1e:	465a      	mov	r2, fp
    5a20:	009b      	lsls	r3, r3, #2
    5a22:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1077

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw9x9[i + 3][i + 3] = pthisSV->fPPlus9x9[i + 3][i + 3] + FQWB_6DOF_GY_KALMAN;
    5a24:	4944      	ldr	r1, [pc, #272]	; (5b38 <fRun_6DOF_GY_KALMAN+0xed0>)
    5a26:	4640      	mov	r0, r8
    5a28:	f7fa ff36 	bl	898 <__aeabi_fadd>
    5a2c:	23d0      	movs	r3, #208	; 0xd0
    5a2e:	465a      	mov	r2, fp
    5a30:	009b      	lsls	r3, r3, #2
    5a32:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1080

		// Qw[th-b-] = Qw[0-2][3-5] = E[th-(b-)^T] = -deltat * (Q[b+b+] + Qwb * I) = -deltat * Qw[b-b-]
		pthisSV->fQw9x9[i][i + 3] = pthisSV->fQw9x9[i + 3][i] = -pthisSV->fdeltat * pthisSV->fQw9x9[i + 3][i + 3];
    5a34:	1c21      	adds	r1, r4, #0
    5a36:	f7fb fa9d 	bl	f74 <__aeabi_fmul>
    5a3a:	23cd      	movs	r3, #205	; 0xcd
    5a3c:	465a      	mov	r2, fp
    5a3e:	009b      	lsls	r3, r3, #2
    5a40:	50d0      	str	r0, [r2, r3]
    5a42:	3b60      	subs	r3, #96	; 0x60
    5a44:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1083

		// Qw[a-a-] = Qw[6-8][6-8] = E[a-(a-)^T] = ca^2 * Q[a+a+] + Qwa * I
		pthisSV->fQw9x9[i + 6][i + 6] = pthisSV->fcasq * pthisSV->fPPlus9x9[i + 6][i + 6] + FQWA_6DOF_GY_KALMAN;
    5a46:	3bcc      	subs	r3, #204	; 0xcc
    5a48:	58d1      	ldr	r1, [r2, r3]
    5a4a:	1c28      	adds	r0, r5, #0
    5a4c:	f7fb fa92 	bl	f74 <__aeabi_fmul>
    5a50:	493a      	ldr	r1, [pc, #232]	; (5b3c <fRun_6DOF_GY_KALMAN+0xed4>)
    5a52:	f7fa ff21 	bl	898 <__aeabi_fadd>
    5a56:	23ee      	movs	r3, #238	; 0xee
    5a58:	465a      	mov	r2, fp
    5a5a:	009b      	lsls	r3, r3, #2
    5a5c:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1074

	// update the covariance matrix components
	for (i = 0; i < 3; i++)
	{
		// Qw[th-th-] = Qw[0-2][0-2] = E[th-(th-)^T] = Q[th+th+] + deltat^2 * (Q[b+b+] + (Qwb + QvG) * I)
		pthisSV->fQw9x9[i][i] = pthisSV->fPPlus9x9[i][i] + pthisSV->fdeltatsq * (pthisSV->fPPlus9x9[i + 3][i + 3] + pthisSV->fQwbplusQvG);
    5a5e:	23dc      	movs	r3, #220	; 0xdc
    5a60:	005b      	lsls	r3, r3, #1
    5a62:	58d3      	ldr	r3, [r2, r3]
    5a64:	1c39      	adds	r1, r7, #0
    5a66:	1c18      	adds	r0, r3, #0
    5a68:	4698      	mov	r8, r3
    5a6a:	f7fa ff15 	bl	898 <__aeabi_fadd>
    5a6e:	1c31      	adds	r1, r6, #0
    5a70:	f7fb fa80 	bl	f74 <__aeabi_fmul>
    5a74:	23a0      	movs	r3, #160	; 0xa0
    5a76:	465a      	mov	r2, fp
    5a78:	005b      	lsls	r3, r3, #1
    5a7a:	1c01      	adds	r1, r0, #0
    5a7c:	58d0      	ldr	r0, [r2, r3]
    5a7e:	f7fa ff0b 	bl	898 <__aeabi_fadd>
    5a82:	23bc      	movs	r3, #188	; 0xbc
    5a84:	465a      	mov	r2, fp
    5a86:	009b      	lsls	r3, r3, #2
    5a88:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1077

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw9x9[i + 3][i + 3] = pthisSV->fPPlus9x9[i + 3][i + 3] + FQWB_6DOF_GY_KALMAN;
    5a8a:	492b      	ldr	r1, [pc, #172]	; (5b38 <fRun_6DOF_GY_KALMAN+0xed0>)
    5a8c:	4640      	mov	r0, r8
    5a8e:	f7fa ff03 	bl	898 <__aeabi_fadd>
    5a92:	23da      	movs	r3, #218	; 0xda
    5a94:	465a      	mov	r2, fp
    5a96:	009b      	lsls	r3, r3, #2
    5a98:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1080

		// Qw[th-b-] = Qw[0-2][3-5] = E[th-(b-)^T] = -deltat * (Q[b+b+] + Qwb * I) = -deltat * Qw[b-b-]
		pthisSV->fQw9x9[i][i + 3] = pthisSV->fQw9x9[i + 3][i] = -pthisSV->fdeltat * pthisSV->fQw9x9[i + 3][i + 3];
    5a9a:	1c21      	adds	r1, r4, #0
    5a9c:	f7fb fa6a 	bl	f74 <__aeabi_fmul>
    5aa0:	23d7      	movs	r3, #215	; 0xd7
    5aa2:	465a      	mov	r2, fp
    5aa4:	009b      	lsls	r3, r3, #2
    5aa6:	50d0      	str	r0, [r2, r3]
    5aa8:	3b60      	subs	r3, #96	; 0x60
    5aaa:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1083

		// Qw[a-a-] = Qw[6-8][6-8] = E[a-(a-)^T] = ca^2 * Q[a+a+] + Qwa * I
		pthisSV->fQw9x9[i + 6][i + 6] = pthisSV->fcasq * pthisSV->fPPlus9x9[i + 6][i + 6] + FQWA_6DOF_GY_KALMAN;
    5aac:	3bcc      	subs	r3, #204	; 0xcc
    5aae:	58d1      	ldr	r1, [r2, r3]
    5ab0:	1c28      	adds	r0, r5, #0
    5ab2:	f7fb fa5f 	bl	f74 <__aeabi_fmul>
    5ab6:	4921      	ldr	r1, [pc, #132]	; (5b3c <fRun_6DOF_GY_KALMAN+0xed4>)
    5ab8:	f7fa feee 	bl	898 <__aeabi_fadd>
    5abc:	23f8      	movs	r3, #248	; 0xf8
    5abe:	465a      	mov	r2, fp
    5ac0:	009b      	lsls	r3, r3, #2
    5ac2:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1074

	// update the covariance matrix components
	for (i = 0; i < 3; i++)
	{
		// Qw[th-th-] = Qw[0-2][0-2] = E[th-(th-)^T] = Q[th+th+] + deltat^2 * (Q[b+b+] + (Qwb + QvG) * I)
		pthisSV->fQw9x9[i][i] = pthisSV->fPPlus9x9[i][i] + pthisSV->fdeltatsq * (pthisSV->fPPlus9x9[i + 3][i + 3] + pthisSV->fQwbplusQvG);
    5ac4:	23f0      	movs	r3, #240	; 0xf0
    5ac6:	005b      	lsls	r3, r3, #1
    5ac8:	58d3      	ldr	r3, [r2, r3]
    5aca:	1c39      	adds	r1, r7, #0
    5acc:	1c18      	adds	r0, r3, #0
    5ace:	4698      	mov	r8, r3
    5ad0:	f7fa fee2 	bl	898 <__aeabi_fadd>
    5ad4:	1c31      	adds	r1, r6, #0
    5ad6:	f7fb fa4d 	bl	f74 <__aeabi_fmul>
    5ada:	23b4      	movs	r3, #180	; 0xb4
    5adc:	465a      	mov	r2, fp
    5ade:	005b      	lsls	r3, r3, #1
    5ae0:	1c01      	adds	r1, r0, #0
    5ae2:	58d0      	ldr	r0, [r2, r3]
    5ae4:	f7fa fed8 	bl	898 <__aeabi_fadd>
    5ae8:	23c6      	movs	r3, #198	; 0xc6
    5aea:	465a      	mov	r2, fp
    5aec:	009b      	lsls	r3, r3, #2
    5aee:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1077

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw9x9[i + 3][i + 3] = pthisSV->fPPlus9x9[i + 3][i + 3] + FQWB_6DOF_GY_KALMAN;
    5af0:	4911      	ldr	r1, [pc, #68]	; (5b38 <fRun_6DOF_GY_KALMAN+0xed0>)
    5af2:	4640      	mov	r0, r8
    5af4:	f7fa fed0 	bl	898 <__aeabi_fadd>
    5af8:	23e4      	movs	r3, #228	; 0xe4
    5afa:	465a      	mov	r2, fp
    5afc:	009b      	lsls	r3, r3, #2
    5afe:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1080

		// Qw[th-b-] = Qw[0-2][3-5] = E[th-(b-)^T] = -deltat * (Q[b+b+] + Qwb * I) = -deltat * Qw[b-b-]
		pthisSV->fQw9x9[i][i + 3] = pthisSV->fQw9x9[i + 3][i] = -pthisSV->fdeltat * pthisSV->fQw9x9[i + 3][i + 3];
    5b00:	1c21      	adds	r1, r4, #0
    5b02:	f7fb fa37 	bl	f74 <__aeabi_fmul>
    5b06:	23e1      	movs	r3, #225	; 0xe1
    5b08:	465a      	mov	r2, fp
    5b0a:	009b      	lsls	r3, r3, #2
    5b0c:	50d0      	str	r0, [r2, r3]
    5b0e:	3b60      	subs	r3, #96	; 0x60
    5b10:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1083

		// Qw[a-a-] = Qw[6-8][6-8] = E[a-(a-)^T] = ca^2 * Q[a+a+] + Qwa * I
		pthisSV->fQw9x9[i + 6][i + 6] = pthisSV->fcasq * pthisSV->fPPlus9x9[i + 6][i + 6] + FQWA_6DOF_GY_KALMAN;
    5b12:	3bcc      	subs	r3, #204	; 0xcc
    5b14:	58d1      	ldr	r1, [r2, r3]
    5b16:	1c28      	adds	r0, r5, #0
    5b18:	f7fb fa2c 	bl	f74 <__aeabi_fmul>
    5b1c:	4907      	ldr	r1, [pc, #28]	; (5b3c <fRun_6DOF_GY_KALMAN+0xed4>)
    5b1e:	f7fa febb 	bl	898 <__aeabi_fadd>
    5b22:	2381      	movs	r3, #129	; 0x81
    5b24:	465a      	mov	r2, fp
    5b26:	00db      	lsls	r3, r3, #3
    5b28:	50d0      	str	r0, [r2, r3]
    5b2a:	e009      	b.n	5b40 <fRun_6DOF_GY_KALMAN+0xed8>
    5b2c:	bf800000 	.word	0xbf800000
    5b30:	00000404 	.word	0x00000404
    5b34:	00000484 	.word	0x00000484
    5b38:	3089705f 	.word	0x3089705f
    5b3c:	38d1b717 	.word	0x38d1b717
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1087
	}

	return;
} // end fRun_6DOF_GY_KALMAN
    5b40:	b037      	add	sp, #220	; 0xdc
    5b42:	bc3c      	pop	{r2, r3, r4, r5}
    5b44:	4690      	mov	r8, r2
    5b46:	4699      	mov	r9, r3
    5b48:	46a2      	mov	sl, r4
    5b4a:	46ab      	mov	fp, r5
    5b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:983
					if (*pfC3x9ik == 1.0F)
						*pfPPlus9x9ij += *pfQw9x9kj;
					else if (*pfC3x9ik == -1.0F)
						*pfPPlus9x9ij -= *pfQw9x9kj;
					else
						*pfPPlus9x9ij += *pfC3x9ik * *pfQw9x9kj;
    5b4e:	4641      	mov	r1, r8
    5b50:	1c30      	adds	r0, r6, #0
    5b52:	f7fb fa0f 	bl	f74 <__aeabi_fmul>
    5b56:	464b      	mov	r3, r9
    5b58:	1c01      	adds	r1, r0, #0
    5b5a:	6818      	ldr	r0, [r3, #0]
    5b5c:	f7fa fe9c 	bl	898 <__aeabi_fadd>
    5b60:	464b      	mov	r3, r9
    5b62:	6018      	str	r0, [r3, #0]
    5b64:	e5e9      	b.n	573a <fRun_6DOF_GY_KALMAN+0xad2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:681
	for (i = X; i <= Z; i++)
	{
		if (ithisCoordSystem == NED)
		{
			// NED gravity is along positive z axis
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
    5b66:	465a      	mov	r2, fp
    5b68:	239c      	movs	r3, #156	; 0x9c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    5b6a:	21fc      	movs	r1, #252	; 0xfc
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:681
	for (i = X; i <= Z; i++)
	{
		if (ithisCoordSystem == NED)
		{
			// NED gravity is along positive z axis
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
    5b6c:	58d4      	ldr	r4, [r2, r3]
    5b6e:	3360      	adds	r3, #96	; 0x60
    5b70:	50d4      	str	r4, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    5b72:	3b24      	subs	r3, #36	; 0x24
    5b74:	58d0      	ldr	r0, [r2, r3]
    5b76:	0589      	lsls	r1, r1, #22
    5b78:	f7fb f9fc 	bl	f74 <__aeabi_fmul>
    5b7c:	2384      	movs	r3, #132	; 0x84
    5b7e:	465a      	mov	r2, fp
    5b80:	005b      	lsls	r3, r3, #1
    5b82:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5b84:	4653      	mov	r3, sl
    5b86:	68d9      	ldr	r1, [r3, #12]
    5b88:	f7fa fe86 	bl	898 <__aeabi_fadd>
    5b8c:	1c21      	adds	r1, r4, #0
    5b8e:	f7fb fb23 	bl	11d8 <__aeabi_fsub>
    5b92:	465a      	mov	r2, fp
    5b94:	23f0      	movs	r3, #240	; 0xf0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    5b96:	21fc      	movs	r1, #252	; 0xfc
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5b98:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:681
	for (i = X; i <= Z; i++)
	{
		if (ithisCoordSystem == NED)
		{
			// NED gravity is along positive z axis
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
    5b9a:	3b48      	subs	r3, #72	; 0x48
    5b9c:	58d4      	ldr	r4, [r2, r3]
    5b9e:	3358      	adds	r3, #88	; 0x58
    5ba0:	50d4      	str	r4, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    5ba2:	3b24      	subs	r3, #36	; 0x24
    5ba4:	58d0      	ldr	r0, [r2, r3]
    5ba6:	0589      	lsls	r1, r1, #22
    5ba8:	f7fb f9e4 	bl	f74 <__aeabi_fmul>
    5bac:	2386      	movs	r3, #134	; 0x86
    5bae:	465a      	mov	r2, fp
    5bb0:	005b      	lsls	r3, r3, #1
    5bb2:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5bb4:	4653      	mov	r3, sl
    5bb6:	6919      	ldr	r1, [r3, #16]
    5bb8:	f7fa fe6e 	bl	898 <__aeabi_fadd>
    5bbc:	1c21      	adds	r1, r4, #0
    5bbe:	f7fb fb0b 	bl	11d8 <__aeabi_fsub>
    5bc2:	465a      	mov	r2, fp
    5bc4:	23f4      	movs	r3, #244	; 0xf4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    5bc6:	21fc      	movs	r1, #252	; 0xfc
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5bc8:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:681
	for (i = X; i <= Z; i++)
	{
		if (ithisCoordSystem == NED)
		{
			// NED gravity is along positive z axis
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
    5bca:	3b40      	subs	r3, #64	; 0x40
    5bcc:	58d4      	ldr	r4, [r2, r3]
    5bce:	3350      	adds	r3, #80	; 0x50
    5bd0:	50d4      	str	r4, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    5bd2:	3b24      	subs	r3, #36	; 0x24
    5bd4:	58d0      	ldr	r0, [r2, r3]
    5bd6:	0589      	lsls	r1, r1, #22
    5bd8:	f7fb f9cc 	bl	f74 <__aeabi_fmul>
    5bdc:	2388      	movs	r3, #136	; 0x88
    5bde:	465a      	mov	r2, fp
    5be0:	005b      	lsls	r3, r3, #1
    5be2:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5be4:	4653      	mov	r3, sl
    5be6:	6959      	ldr	r1, [r3, #20]
    5be8:	f7fa fe56 	bl	898 <__aeabi_fadd>
    5bec:	1c21      	adds	r1, r4, #0
    5bee:	f7fb faf3 	bl	11d8 <__aeabi_fsub>
    5bf2:	23f8      	movs	r3, #248	; 0xf8
    5bf4:	465a      	mov	r2, fp
    5bf6:	50d0      	str	r0, [r2, r3]
    5bf8:	f7ff f94e 	bl	4e98 <fRun_6DOF_GY_KALMAN+0x230>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:931
	// *********************************************************************************

	if (ithisCoordSystem == NED)
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
    5bfc:	465b      	mov	r3, fp
    5bfe:	330c      	adds	r3, #12
    5c00:	9300      	str	r3, [sp, #0]
    5c02:	3304      	adds	r3, #4
    5c04:	9301      	str	r3, [sp, #4]
    5c06:	3204      	adds	r2, #4
    5c08:	980c      	ldr	r0, [sp, #48]	; 0x30
    5c0a:	4659      	mov	r1, fp
    5c0c:	3b08      	subs	r3, #8
    5c0e:	f008 fa0b 	bl	e028 <fNEDAnglesDegFromRotationMatrix>
    5c12:	e568      	b.n	56e6 <fRun_6DOF_GY_KALMAN+0xa7e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:602
	int8 iPivot[3];

	// do a reset and return if requested
	if (pthisSV->resetflag)
	{
		fInit_6DOF_GY_KALMAN(pthisSV, SENSORFS, OVERSAMPLE_RATIO);
    5c14:	21c8      	movs	r1, #200	; 0xc8
    5c16:	2208      	movs	r2, #8
    5c18:	f7fe f808 	bl	3c2c <fInit_6DOF_GY_KALMAN>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:603
		return;
    5c1c:	e790      	b.n	5b40 <fRun_6DOF_GY_KALMAN+0xed8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:937
				&(pthisSV->fRhoPl), &(pthisSV->fChiPl));
	}
	else if (ithisCoordSystem == ANDROID)
	{
		// calculate the Android Euler angles
		fAndroidAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
    5c1e:	465b      	mov	r3, fp
    5c20:	330c      	adds	r3, #12
    5c22:	9300      	str	r3, [sp, #0]
    5c24:	3304      	adds	r3, #4
    5c26:	9301      	str	r3, [sp, #4]
    5c28:	3204      	adds	r2, #4
    5c2a:	980c      	ldr	r0, [sp, #48]	; 0x30
    5c2c:	4659      	mov	r1, fp
    5c2e:	3b08      	subs	r3, #8
    5c30:	f008 fa74 	bl	e11c <fAndroidAnglesDegFromRotationMatrix>
    5c34:	e557      	b.n	56e6 <fRun_6DOF_GY_KALMAN+0xa7e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:613
	{
		// get the 3DOF orientation matrix and initial inclination angle
		if (ithisCoordSystem == NED)
		{
			// call NED tilt function
			f3DOFTiltNED(pthisSV->fRPl, pthisAccel->fGpFast);
    5c36:	3314      	adds	r3, #20
    5c38:	445b      	add	r3, fp
    5c3a:	1c18      	adds	r0, r3, #0
    5c3c:	310c      	adds	r1, #12
    5c3e:	930c      	str	r3, [sp, #48]	; 0x30
    5c40:	f007 fad4 	bl	d1ec <f3DOFTiltNED>
    5c44:	f7ff f83a 	bl	4cbc <fRun_6DOF_GY_KALMAN+0x54>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:686
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    5c48:	465a      	mov	r2, fp
    5c4a:	239c      	movs	r3, #156	; 0x9c
    5c4c:	58d4      	ldr	r4, [r2, r3]
    5c4e:	2380      	movs	r3, #128	; 0x80
    5c50:	061b      	lsls	r3, r3, #24
    5c52:	18e2      	adds	r2, r4, r3
    5c54:	4659      	mov	r1, fp
    5c56:	23fc      	movs	r3, #252	; 0xfc
    5c58:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    5c5a:	3b24      	subs	r3, #36	; 0x24
    5c5c:	58c8      	ldr	r0, [r1, r3]
    5c5e:	21fc      	movs	r1, #252	; 0xfc
    5c60:	0589      	lsls	r1, r1, #22
    5c62:	f7fb f987 	bl	f74 <__aeabi_fmul>
    5c66:	2384      	movs	r3, #132	; 0x84
    5c68:	465a      	mov	r2, fp
    5c6a:	005b      	lsls	r3, r3, #1
    5c6c:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5c6e:	4653      	mov	r3, sl
    5c70:	68d9      	ldr	r1, [r3, #12]
    5c72:	f7fa fe11 	bl	898 <__aeabi_fadd>
    5c76:	1c21      	adds	r1, r4, #0
    5c78:	f7fa fe0e 	bl	898 <__aeabi_fadd>
    5c7c:	465a      	mov	r2, fp
    5c7e:	23f0      	movs	r3, #240	; 0xf0
    5c80:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:686
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    5c82:	3b48      	subs	r3, #72	; 0x48
    5c84:	58d4      	ldr	r4, [r2, r3]
    5c86:	2380      	movs	r3, #128	; 0x80
    5c88:	061b      	lsls	r3, r3, #24
    5c8a:	18e2      	adds	r2, r4, r3
    5c8c:	2380      	movs	r3, #128	; 0x80
    5c8e:	4659      	mov	r1, fp
    5c90:	005b      	lsls	r3, r3, #1
    5c92:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    5c94:	3b24      	subs	r3, #36	; 0x24
    5c96:	58c8      	ldr	r0, [r1, r3]
    5c98:	21fc      	movs	r1, #252	; 0xfc
    5c9a:	0589      	lsls	r1, r1, #22
    5c9c:	f7fb f96a 	bl	f74 <__aeabi_fmul>
    5ca0:	2386      	movs	r3, #134	; 0x86
    5ca2:	465a      	mov	r2, fp
    5ca4:	005b      	lsls	r3, r3, #1
    5ca6:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5ca8:	4653      	mov	r3, sl
    5caa:	6919      	ldr	r1, [r3, #16]
    5cac:	f7fa fdf4 	bl	898 <__aeabi_fadd>
    5cb0:	1c21      	adds	r1, r4, #0
    5cb2:	f7fa fdf1 	bl	898 <__aeabi_fadd>
    5cb6:	465a      	mov	r2, fp
    5cb8:	23f4      	movs	r3, #244	; 0xf4
    5cba:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:686
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    5cbc:	3b40      	subs	r3, #64	; 0x40
    5cbe:	58d4      	ldr	r4, [r2, r3]
    5cc0:	2380      	movs	r3, #128	; 0x80
    5cc2:	061b      	lsls	r3, r3, #24
    5cc4:	18e2      	adds	r2, r4, r3
    5cc6:	2382      	movs	r3, #130	; 0x82
    5cc8:	4659      	mov	r1, fp
    5cca:	005b      	lsls	r3, r3, #1
    5ccc:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    5cce:	3b24      	subs	r3, #36	; 0x24
    5cd0:	58c8      	ldr	r0, [r1, r3]
    5cd2:	21fc      	movs	r1, #252	; 0xfc
    5cd4:	0589      	lsls	r1, r1, #22
    5cd6:	f7fb f94d 	bl	f74 <__aeabi_fmul>
    5cda:	2388      	movs	r3, #136	; 0x88
    5cdc:	465a      	mov	r2, fp
    5cde:	005b      	lsls	r3, r3, #1
    5ce0:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5ce2:	4653      	mov	r3, sl
    5ce4:	6959      	ldr	r1, [r3, #20]
    5ce6:	f7fa fdd7 	bl	898 <__aeabi_fadd>
    5cea:	f7ff f8cf 	bl	4e8c <fRun_6DOF_GY_KALMAN+0x224>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:618
			f3DOFTiltNED(pthisSV->fRPl, pthisAccel->fGpFast);
		}
		else if (ithisCoordSystem == ANDROID)
		{
			// call Android tilt function
			f3DOFTiltAndroid(pthisSV->fRPl, pthisAccel->fGpFast);
    5cee:	3313      	adds	r3, #19
    5cf0:	445b      	add	r3, fp
    5cf2:	1c18      	adds	r0, r3, #0
    5cf4:	310c      	adds	r1, #12
    5cf6:	930c      	str	r3, [sp, #48]	; 0x30
    5cf8:	f007 fb10 	bl	d31c <f3DOFTiltAndroid>
    5cfc:	f7fe ffde 	bl	4cbc <fRun_6DOF_GY_KALMAN+0x54>
    5d00:	23c8      	movs	r3, #200	; 0xc8
    5d02:	445b      	add	r3, fp
    5d04:	930f      	str	r3, [sp, #60]	; 0x3c
    5d06:	f7ff f862 	bl	4dce <fRun_6DOF_GY_KALMAN+0x166>
$t():
    5d0a:	46c0      	nop			; (mov r8, r8)

00005d0c <fRun_9DOF_GBY_KALMAN>:
fRun_9DOF_GBY_KALMAN():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1092
} // end fRun_6DOF_GY_KALMAN

// 9DOF orientation function implemented using a 12 element Kalman filter
void fRun_9DOF_GBY_KALMAN(struct SV_9DOF_GBY_KALMAN *pthisSV, struct AccelSensor *pthisAccel, struct MagSensor *pthisMag, struct GyroSensor *pthisGyro,
		struct MagCalibration *pthisMagCal, int16 ithisCoordSystem, int16 iOverSampleRatio)
{	
    5d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d0e:	465f      	mov	r7, fp
    5d10:	464d      	mov	r5, r9
    5d12:	4644      	mov	r4, r8
    5d14:	4656      	mov	r6, sl
    5d16:	b4f0      	push	{r4, r5, r6, r7}
    5d18:	b0f3      	sub	sp, #460	; 0x1cc
    5d1a:	4698      	mov	r8, r3
    5d1c:	ab7c      	add	r3, sp, #496	; 0x1f0
    5d1e:	4691      	mov	r9, r2
    5d20:	cb04      	ldmia	r3!, {r2}
    5d22:	9108      	str	r1, [sp, #32]
    5d24:	2200      	movs	r2, #0
    5d26:	5e9b      	ldrsh	r3, [r3, r2]
    5d28:	4683      	mov	fp, r0
    5d2a:	930b      	str	r3, [sp, #44]	; 0x2c
    5d2c:	ab7e      	add	r3, sp, #504	; 0x1f8
    5d2e:	2200      	movs	r2, #0
    5d30:	5e9b      	ldrsh	r3, [r3, r2]
    5d32:	9305      	str	r3, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1123
	int8 iColInd[6];
	int8 iRowInd[6];
	int8 iPivot[6];

	// do a reset and return if requested
	if (pthisSV->resetflag)
    5d34:	4bb2      	ldr	r3, [pc, #712]	; (6000 <fRun_9DOF_GBY_KALMAN+0x2f4>)
    5d36:	56c3      	ldrsb	r3, [r0, r3]
    5d38:	2b00      	cmp	r3, #0
    5d3a:	d001      	beq.n	5d40 <fRun_9DOF_GBY_KALMAN+0x34>
    5d3c:	f004 fc66 	bl	a60c <PSP_CNFG_MQX_KERNEL_LOGGING+0x260c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1134
	// *********************************************************************************
	// initial orientation lock to accelerometer and magnetometer eCompass orientation
	// *********************************************************************************

	// do a once-only orientation lock after the first valid magnetic calibration 
	if (pthisMagCal->iValidMagCal && !pthisSV->iFirstOrientationLock)
    5d40:	4bb0      	ldr	r3, [pc, #704]	; (6004 <fRun_9DOF_GBY_KALMAN+0x2f8>)
    5d42:	9a7c      	ldr	r2, [sp, #496]	; 0x1f0
    5d44:	56d3      	ldrsb	r3, [r2, r3]
    5d46:	2b00      	cmp	r3, #0
    5d48:	d020      	beq.n	5d8c <fRun_9DOF_GBY_KALMAN+0x80>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1134 (discriminator 1)
    5d4a:	1c02      	adds	r2, r0, #0
    5d4c:	4bae      	ldr	r3, [pc, #696]	; (6008 <fRun_9DOF_GBY_KALMAN+0x2fc>)
    5d4e:	5ed3      	ldrsh	r3, [r2, r3]
    5d50:	2b00      	cmp	r3, #0
    5d52:	d11b      	bne.n	5d8c <fRun_9DOF_GBY_KALMAN+0x80>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1137
	{
		// get the 6DOF orientation matrix and initial inclination angle
		if (ithisCoordSystem == NED)
    5d54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5d56:	2b00      	cmp	r3, #0
    5d58:	d101      	bne.n	5d5e <fRun_9DOF_GBY_KALMAN+0x52>
    5d5a:	f004 fc67 	bl	a62c <PSP_CNFG_MQX_KERNEL_LOGGING+0x262c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1141
		{
			feCompassNED(pthisSV->fRPl, &(pthisSV->fDeltaPl), pthisMag->fBcFast, pthisAccel->fGpFast);
		}
		else if (ithisCoordSystem == ANDROID)
    5d5e:	2b01      	cmp	r3, #1
    5d60:	d101      	bne.n	5d66 <fRun_9DOF_GBY_KALMAN+0x5a>
    5d62:	f004 fc76 	bl	a652 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2652>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1145
		{
			feCompassAndroid(pthisSV->fRPl, &(pthisSV->fDeltaPl), pthisMag->fBcFast, pthisAccel->fGpFast);
		}
		else if (ithisCoordSystem == WIN8)
    5d66:	2b02      	cmp	r3, #2
    5d68:	d101      	bne.n	5d6e <fRun_9DOF_GBY_KALMAN+0x62>
    5d6a:	f004 fc91 	bl	a690 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2690>
    5d6e:	2314      	movs	r3, #20
    5d70:	445b      	add	r3, fp
    5d72:	1c18      	adds	r0, r3, #0
    5d74:	930a      	str	r3, [sp, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1151
		{
			feCompassWin8(pthisSV->fRPl, &(pthisSV->fDeltaPl), pthisMag->fBcFast, pthisAccel->fGpFast);
		}

		// get the orientation quaternion from the orientation matrix
		fQuaternionFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fqPl));
    5d76:	2338      	movs	r3, #56	; 0x38
    5d78:	445b      	add	r3, fp
    5d7a:	1c19      	adds	r1, r3, #0
    5d7c:	9316      	str	r3, [sp, #88]	; 0x58
    5d7e:	f008 fbd3 	bl	e528 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1154

		// set the orientation lock flag so this initial alignment is only performed once
		pthisSV->iFirstOrientationLock = 1;
    5d82:	2201      	movs	r2, #1
    5d84:	4659      	mov	r1, fp
    5d86:	4ba0      	ldr	r3, [pc, #640]	; (6008 <fRun_9DOF_GBY_KALMAN+0x2fc>)
    5d88:	52ca      	strh	r2, [r1, r3]
    5d8a:	e005      	b.n	5d98 <fRun_9DOF_GBY_KALMAN+0x8c>
    5d8c:	2314      	movs	r3, #20
    5d8e:	445b      	add	r3, fp
    5d90:	930a      	str	r3, [sp, #40]	; 0x28
    5d92:	2338      	movs	r3, #56	; 0x38
    5d94:	445b      	add	r3, fp
    5d96:	9316      	str	r3, [sp, #88]	; 0x58
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1163
	// calculate a priori rotation matrix
	// *********************************************************************************

	// compute the angular velocity from the averaged high frequency gyro reading.
	// omega[k] = yG[k] - b-[k] = yG[k] - b+[k-1] (deg/s)
	pthisSV->fOmega[X] = pthisGyro->fYp[X] - pthisSV->fbPl[X];
    5d98:	465b      	mov	r3, fp
    5d9a:	4642      	mov	r2, r8
    5d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    5d9e:	68d0      	ldr	r0, [r2, #12]
    5da0:	1c19      	adds	r1, r3, #0
    5da2:	9302      	str	r3, [sp, #8]
    5da4:	f7fb fa18 	bl	11d8 <__aeabi_fsub>
    5da8:	465b      	mov	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1164
	pthisSV->fOmega[Y] = pthisGyro->fYp[Y] - pthisSV->fbPl[Y];
    5daa:	4642      	mov	r2, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1163
	// calculate a priori rotation matrix
	// *********************************************************************************

	// compute the angular velocity from the averaged high frequency gyro reading.
	// omega[k] = yG[k] - b-[k] = yG[k] - b+[k-1] (deg/s)
	pthisSV->fOmega[X] = pthisGyro->fYp[X] - pthisSV->fbPl[X];
    5dac:	6558      	str	r0, [r3, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1164
	pthisSV->fOmega[Y] = pthisGyro->fYp[Y] - pthisSV->fbPl[Y];
    5dae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    5db0:	6910      	ldr	r0, [r2, #16]
    5db2:	1c19      	adds	r1, r3, #0
    5db4:	9303      	str	r3, [sp, #12]
    5db6:	f7fb fa0f 	bl	11d8 <__aeabi_fsub>
    5dba:	465b      	mov	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1165
	pthisSV->fOmega[Z] = pthisGyro->fYp[Z] - pthisSV->fbPl[Z];
    5dbc:	4642      	mov	r2, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1164
	// *********************************************************************************

	// compute the angular velocity from the averaged high frequency gyro reading.
	// omega[k] = yG[k] - b-[k] = yG[k] - b+[k-1] (deg/s)
	pthisSV->fOmega[X] = pthisGyro->fYp[X] - pthisSV->fbPl[X];
	pthisSV->fOmega[Y] = pthisGyro->fYp[Y] - pthisSV->fbPl[Y];
    5dbe:	6598      	str	r0, [r3, #88]	; 0x58
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1165
	pthisSV->fOmega[Z] = pthisGyro->fYp[Z] - pthisSV->fbPl[Z];
    5dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    5dc2:	6950      	ldr	r0, [r2, #20]
    5dc4:	1c19      	adds	r1, r3, #0
    5dc6:	9304      	str	r3, [sp, #16]
    5dc8:	f7fb fa06 	bl	11d8 <__aeabi_fsub>
    5dcc:	465b      	mov	r3, fp
    5dce:	65d8      	str	r0, [r3, #92]	; 0x5c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1168

	// initialize the a priori orientation quaternion to the previous a posteriori estimate
	pthisSV->fqMi = pthisSV->fqPl;
    5dd0:	4b8e      	ldr	r3, [pc, #568]	; (600c <fRun_9DOF_GBY_KALMAN+0x300>)
    5dd2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    5dd4:	445b      	add	r3, fp
    5dd6:	9309      	str	r3, [sp, #36]	; 0x24
    5dd8:	ca13      	ldmia	r2!, {r0, r1, r4}
    5dda:	c313      	stmia	r3!, {r0, r1, r4}
    5ddc:	6812      	ldr	r2, [r2, #0]
    5dde:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1171

	// integrate the buffered high frequency (typically 200Hz) gyro readings
	for (j = 0; j < iOverSampleRatio; j++)
    5de0:	9b05      	ldr	r3, [sp, #20]
    5de2:	2b00      	cmp	r3, #0
    5de4:	dc01      	bgt.n	5dea <fRun_9DOF_GBY_KALMAN+0xde>
    5de6:	f004 fc18 	bl	a61a <PSP_CNFG_MQX_KERNEL_LOGGING+0x261a>
    5dea:	4b89      	ldr	r3, [pc, #548]	; (6010 <fRun_9DOF_GBY_KALMAN+0x304>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1180
		{
			rvec[i] = (((float)pthisGyro->iYpFast[j][i] * pthisGyro->fDegPerSecPerCount) - pthisSV->fbPl[i]) * pthisSV->fFastdeltat;
		}

		// compute the incremental quaternion fDeltaq from the rotation vector
		fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), rvec, 1.0F);
    5dec:	4649      	mov	r1, r9
    5dee:	445b      	add	r3, fp
    5df0:	1c1a      	adds	r2, r3, #0
    5df2:	9317      	str	r3, [sp, #92]	; 0x5c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1171

	// initialize the a priori orientation quaternion to the previous a posteriori estimate
	pthisSV->fqMi = pthisSV->fqPl;

	// integrate the buffered high frequency (typically 200Hz) gyro readings
	for (j = 0; j < iOverSampleRatio; j++)
    5df4:	2300      	movs	r3, #0
    5df6:	ad21      	add	r5, sp, #132	; 0x84
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1180
		{
			rvec[i] = (((float)pthisGyro->iYpFast[j][i] * pthisGyro->fDegPerSecPerCount) - pthisSV->fbPl[i]) * pthisSV->fFastdeltat;
		}

		// compute the incremental quaternion fDeltaq from the rotation vector
		fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), rvec, 1.0F);
    5df8:	1c1e      	adds	r6, r3, #0
    5dfa:	9106      	str	r1, [sp, #24]
    5dfc:	46c1      	mov	r9, r8
    5dfe:	4692      	mov	sl, r2
    5e00:	e008      	b.n	5e14 <fRun_9DOF_GBY_KALMAN+0x108>
    5e02:	465a      	mov	r2, fp
    5e04:	6e52      	ldr	r2, [r2, #100]	; 0x64
    5e06:	9202      	str	r2, [sp, #8]
    5e08:	465a      	mov	r2, fp
    5e0a:	6e92      	ldr	r2, [r2, #104]	; 0x68
    5e0c:	9203      	str	r2, [sp, #12]
    5e0e:	465a      	mov	r2, fp
    5e10:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
    5e12:	9204      	str	r2, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1176 (discriminator 1)
	for (j = 0; j < iOverSampleRatio; j++)
	{
		// compute the incremental fast (typically 200Hz) rotation vector rvec (deg)
		for (i = X; i <= Z; i++)
		{
			rvec[i] = (((float)pthisGyro->iYpFast[j][i] * pthisGyro->fDegPerSecPerCount) - pthisSV->fbPl[i]) * pthisSV->fFastdeltat;
    5e14:	464a      	mov	r2, r9
    5e16:	005c      	lsls	r4, r3, #1
    5e18:	18e3      	adds	r3, r4, r3
    5e1a:	005b      	lsls	r3, r3, #1
    5e1c:	444b      	add	r3, r9
    5e1e:	6992      	ldr	r2, [r2, #24]
    5e20:	1c1c      	adds	r4, r3, #0
    5e22:	4690      	mov	r8, r2
    5e24:	465a      	mov	r2, fp
    5e26:	497b      	ldr	r1, [pc, #492]	; (6014 <fRun_9DOF_GBY_KALMAN+0x308>)
    5e28:	231c      	movs	r3, #28
    5e2a:	5ee0      	ldrsh	r0, [r4, r3]
    5e2c:	5857      	ldr	r7, [r2, r1]
    5e2e:	f7fb fb71 	bl	1514 <__aeabi_i2f>
    5e32:	4641      	mov	r1, r8
    5e34:	f7fb f89e 	bl	f74 <__aeabi_fmul>
    5e38:	9902      	ldr	r1, [sp, #8]
    5e3a:	f7fb f9cd 	bl	11d8 <__aeabi_fsub>
    5e3e:	1c39      	adds	r1, r7, #0
    5e40:	f7fb f898 	bl	f74 <__aeabi_fmul>
    5e44:	6028      	str	r0, [r5, #0]
    5e46:	231e      	movs	r3, #30
    5e48:	5ee0      	ldrsh	r0, [r4, r3]
    5e4a:	f7fb fb63 	bl	1514 <__aeabi_i2f>
    5e4e:	4641      	mov	r1, r8
    5e50:	f7fb f890 	bl	f74 <__aeabi_fmul>
    5e54:	9903      	ldr	r1, [sp, #12]
    5e56:	f7fb f9bf 	bl	11d8 <__aeabi_fsub>
    5e5a:	1c39      	adds	r1, r7, #0
    5e5c:	f7fb f88a 	bl	f74 <__aeabi_fmul>
    5e60:	6068      	str	r0, [r5, #4]
    5e62:	2320      	movs	r3, #32
    5e64:	5ee0      	ldrsh	r0, [r4, r3]
    5e66:	f7fb fb55 	bl	1514 <__aeabi_i2f>
    5e6a:	1c01      	adds	r1, r0, #0
    5e6c:	4640      	mov	r0, r8
    5e6e:	f7fb f881 	bl	f74 <__aeabi_fmul>
    5e72:	9904      	ldr	r1, [sp, #16]
    5e74:	f7fb f9b0 	bl	11d8 <__aeabi_fsub>
    5e78:	1c01      	adds	r1, r0, #0
    5e7a:	1c38      	adds	r0, r7, #0
    5e7c:	f7fb f87a 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1180 (discriminator 1)
		}

		// compute the incremental quaternion fDeltaq from the rotation vector
		fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), rvec, 1.0F);
    5e80:	22fe      	movs	r2, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1176 (discriminator 1)
	for (j = 0; j < iOverSampleRatio; j++)
	{
		// compute the incremental fast (typically 200Hz) rotation vector rvec (deg)
		for (i = X; i <= Z; i++)
		{
			rvec[i] = (((float)pthisGyro->iYpFast[j][i] * pthisGyro->fDegPerSecPerCount) - pthisSV->fbPl[i]) * pthisSV->fFastdeltat;
    5e82:	60a8      	str	r0, [r5, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1180 (discriminator 1)
		}

		// compute the incremental quaternion fDeltaq from the rotation vector
		fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), rvec, 1.0F);
    5e84:	ad21      	add	r5, sp, #132	; 0x84
    5e86:	0592      	lsls	r2, r2, #22
    5e88:	4650      	mov	r0, sl
    5e8a:	1c29      	adds	r1, r5, #0
    5e8c:	f008 fa82 	bl	e394 <fQuaternionFromRotationVectorDeg>
    5e90:	3601      	adds	r6, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1184 (discriminator 1)

		// incrementally rotate the a priori orientation quaternion fqMi
		// the a posteriori quaternion fqPl is re-normalized later so this update is stable
		qAeqAxB(&(pthisSV->fqMi), &(pthisSV->fDeltaq));
    5e92:	9809      	ldr	r0, [sp, #36]	; 0x24
    5e94:	4651      	mov	r1, sl
    5e96:	f009 f80d 	bl	eeb4 <qAeqAxB>
    5e9a:	b2f6      	uxtb	r6, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1171 (discriminator 1)

	// initialize the a priori orientation quaternion to the previous a posteriori estimate
	pthisSV->fqMi = pthisSV->fqPl;

	// integrate the buffered high frequency (typically 200Hz) gyro readings
	for (j = 0; j < iOverSampleRatio; j++)
    5e9c:	9a05      	ldr	r2, [sp, #20]
    5e9e:	b273      	sxtb	r3, r6
    5ea0:	4293      	cmp	r3, r2
    5ea2:	dbae      	blt.n	5e02 <fRun_9DOF_GBY_KALMAN+0xf6>
    5ea4:	9b06      	ldr	r3, [sp, #24]
    5ea6:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1188
		// the a posteriori quaternion fqPl is re-normalized later so this update is stable
		qAeqAxB(&(pthisSV->fqMi), &(pthisSV->fDeltaq));
	}

	// get the a priori rotation matrix from the a priori quaternion
	fRotationMatrixFromQuaternion(pthisSV->fRMi, &(pthisSV->fqMi));
    5ea8:	20fb      	movs	r0, #251	; 0xfb
    5eaa:	00c0      	lsls	r0, r0, #3
    5eac:	4458      	add	r0, fp
    5eae:	9909      	ldr	r1, [sp, #36]	; 0x24
    5eb0:	f008 fbdc 	bl	e66c <fRotationMatrixFromQuaternion>
    5eb4:	2386      	movs	r3, #134	; 0x86
    5eb6:	465a      	mov	r2, fp
    5eb8:	005b      	lsls	r3, r3, #1
    5eba:	58d7      	ldr	r7, [r2, r3]
    5ebc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5ebe:	2b00      	cmp	r3, #0
    5ec0:	d100      	bne.n	5ec4 <fRun_9DOF_GBY_KALMAN+0x1b8>
    5ec2:	e0af      	b.n	6024 <fRun_9DOF_GBY_KALMAN+0x318>
    5ec4:	2b02      	cmp	r3, #2
    5ec6:	d101      	bne.n	5ecc <fRun_9DOF_GBY_KALMAN+0x1c0>
    5ec8:	f003 fb60 	bl	958c <PSP_CNFG_MQX_KERNEL_LOGGING+0x158c>
    5ecc:	2384      	movs	r3, #132	; 0x84
    5ece:	005b      	lsls	r3, r3, #1
    5ed0:	58d6      	ldr	r6, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1208
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    5ed2:	23fc      	movs	r3, #252	; 0xfc
    5ed4:	00db      	lsls	r3, r3, #3
    5ed6:	58d4      	ldr	r4, [r2, r3]
    5ed8:	2380      	movs	r3, #128	; 0x80
    5eda:	061b      	lsls	r3, r3, #24
    5edc:	18e2      	adds	r2, r4, r3
    5ede:	4659      	mov	r1, fp
    5ee0:	23ec      	movs	r3, #236	; 0xec
    5ee2:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    5ee4:	3b30      	subs	r3, #48	; 0x30
    5ee6:	58c8      	ldr	r0, [r1, r3]
    5ee8:	21fc      	movs	r1, #252	; 0xfc
    5eea:	0589      	lsls	r1, r1, #22
    5eec:	f7fb f842 	bl	f74 <__aeabi_fmul>
    5ef0:	465a      	mov	r2, fp
    5ef2:	23ac      	movs	r3, #172	; 0xac
    5ef4:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1223
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
		}
		else
		{
			// Android has negative sign for gravity: y = a - g, g = -y + a
			pthisSV->fgErrSeMi[i] = -pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5ef6:	9b08      	ldr	r3, [sp, #32]
    5ef8:	68d9      	ldr	r1, [r3, #12]
    5efa:	f7fb f96d 	bl	11d8 <__aeabi_fsub>
    5efe:	1c01      	adds	r1, r0, #0
    5f00:	1c20      	adds	r0, r4, #0
    5f02:	f7fa fcc9 	bl	898 <__aeabi_fadd>
    5f06:	465a      	mov	r2, fp
    5f08:	23d4      	movs	r3, #212	; 0xd4
    5f0a:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    5f0c:	4b42      	ldr	r3, [pc, #264]	; (6018 <fRun_9DOF_GBY_KALMAN+0x30c>)
    5f0e:	1c30      	adds	r0, r6, #0
    5f10:	58d1      	ldr	r1, [r2, r3]
    5f12:	f7fb f82f 	bl	f74 <__aeabi_fmul>
    5f16:	1c39      	adds	r1, r7, #0
    5f18:	1c05      	adds	r5, r0, #0
    5f1a:	1c20      	adds	r0, r4, #0
    5f1c:	f7fb f82a 	bl	f74 <__aeabi_fmul>
    5f20:	1c01      	adds	r1, r0, #0
    5f22:	1c28      	adds	r0, r5, #0
    5f24:	f7fa fcb8 	bl	898 <__aeabi_fadd>
    5f28:	23f8      	movs	r3, #248	; 0xf8
    5f2a:	465a      	mov	r2, fp
    5f2c:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    5f2e:	464a      	mov	r2, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    5f30:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    5f32:	6a50      	ldr	r0, [r2, #36]	; 0x24
    5f34:	f7fb f950 	bl	11d8 <__aeabi_fsub>
    5f38:	465a      	mov	r2, fp
    5f3a:	23e0      	movs	r3, #224	; 0xe0
    5f3c:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1208
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    5f3e:	4b37      	ldr	r3, [pc, #220]	; (601c <fRun_9DOF_GBY_KALMAN+0x310>)
    5f40:	4659      	mov	r1, fp
    5f42:	58d4      	ldr	r4, [r2, r3]
    5f44:	2280      	movs	r2, #128	; 0x80
    5f46:	23f0      	movs	r3, #240	; 0xf0
    5f48:	0612      	lsls	r2, r2, #24
    5f4a:	18a2      	adds	r2, r4, r2
    5f4c:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    5f4e:	3b30      	subs	r3, #48	; 0x30
    5f50:	58c8      	ldr	r0, [r1, r3]
    5f52:	21fc      	movs	r1, #252	; 0xfc
    5f54:	0589      	lsls	r1, r1, #22
    5f56:	f7fb f80d 	bl	f74 <__aeabi_fmul>
    5f5a:	465a      	mov	r2, fp
    5f5c:	23b0      	movs	r3, #176	; 0xb0
    5f5e:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1223
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
		}
		else
		{
			// Android has negative sign for gravity: y = a - g, g = -y + a
			pthisSV->fgErrSeMi[i] = -pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5f60:	9b08      	ldr	r3, [sp, #32]
    5f62:	6919      	ldr	r1, [r3, #16]
    5f64:	f7fb f938 	bl	11d8 <__aeabi_fsub>
    5f68:	1c01      	adds	r1, r0, #0
    5f6a:	1c20      	adds	r0, r4, #0
    5f6c:	f7fa fc94 	bl	898 <__aeabi_fadd>
    5f70:	465a      	mov	r2, fp
    5f72:	23d8      	movs	r3, #216	; 0xd8
    5f74:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    5f76:	23fd      	movs	r3, #253	; 0xfd
    5f78:	00db      	lsls	r3, r3, #3
    5f7a:	58d1      	ldr	r1, [r2, r3]
    5f7c:	1c30      	adds	r0, r6, #0
    5f7e:	f7fa fff9 	bl	f74 <__aeabi_fmul>
    5f82:	1c39      	adds	r1, r7, #0
    5f84:	1c05      	adds	r5, r0, #0
    5f86:	1c20      	adds	r0, r4, #0
    5f88:	f7fa fff4 	bl	f74 <__aeabi_fmul>
    5f8c:	1c01      	adds	r1, r0, #0
    5f8e:	1c28      	adds	r0, r5, #0
    5f90:	f7fa fc82 	bl	898 <__aeabi_fadd>
    5f94:	23fc      	movs	r3, #252	; 0xfc
    5f96:	465a      	mov	r2, fp
    5f98:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    5f9a:	464a      	mov	r2, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    5f9c:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    5f9e:	6a90      	ldr	r0, [r2, #40]	; 0x28
    5fa0:	f7fb f91a 	bl	11d8 <__aeabi_fsub>
    5fa4:	465a      	mov	r2, fp
    5fa6:	23e4      	movs	r3, #228	; 0xe4
    5fa8:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1208
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    5faa:	23ff      	movs	r3, #255	; 0xff
    5fac:	00db      	lsls	r3, r3, #3
    5fae:	58d4      	ldr	r4, [r2, r3]
    5fb0:	2280      	movs	r2, #128	; 0x80
    5fb2:	4659      	mov	r1, fp
    5fb4:	23f4      	movs	r3, #244	; 0xf4
    5fb6:	0612      	lsls	r2, r2, #24
    5fb8:	18a2      	adds	r2, r4, r2
    5fba:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    5fbc:	3b30      	subs	r3, #48	; 0x30
    5fbe:	58c8      	ldr	r0, [r1, r3]
    5fc0:	21fc      	movs	r1, #252	; 0xfc
    5fc2:	0589      	lsls	r1, r1, #22
    5fc4:	f7fa ffd6 	bl	f74 <__aeabi_fmul>
    5fc8:	23b4      	movs	r3, #180	; 0xb4
    5fca:	465a      	mov	r2, fp
    5fcc:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1223
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
		}
		else
		{
			// Android has negative sign for gravity: y = a - g, g = -y + a
			pthisSV->fgErrSeMi[i] = -pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5fce:	9b08      	ldr	r3, [sp, #32]
    5fd0:	6959      	ldr	r1, [r3, #20]
    5fd2:	f7fb f901 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5fd6:	1c01      	adds	r1, r0, #0
    5fd8:	1c20      	adds	r0, r4, #0
    5fda:	f7fa fc5d 	bl	898 <__aeabi_fadd>
    5fde:	465a      	mov	r2, fp
    5fe0:	23dc      	movs	r3, #220	; 0xdc
    5fe2:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    5fe4:	4b0e      	ldr	r3, [pc, #56]	; (6020 <fRun_9DOF_GBY_KALMAN+0x314>)
    5fe6:	1c30      	adds	r0, r6, #0
    5fe8:	58d1      	ldr	r1, [r2, r3]
    5fea:	f7fa ffc3 	bl	f74 <__aeabi_fmul>
    5fee:	1c39      	adds	r1, r7, #0
    5ff0:	1c05      	adds	r5, r0, #0
    5ff2:	1c20      	adds	r0, r4, #0
    5ff4:	f7fa ffbe 	bl	f74 <__aeabi_fmul>
    5ff8:	1c01      	adds	r1, r0, #0
    5ffa:	1c28      	adds	r0, r5, #0
    5ffc:	e09d      	b.n	613a <fRun_9DOF_GBY_KALMAN+0x42e>
    5ffe:	46c0      	nop			; (mov r8, r8)
    6000:	00000836 	.word	0x00000836
    6004:	00000416 	.word	0x00000416
    6008:	00000834 	.word	0x00000834
    600c:	0000080c 	.word	0x0000080c
    6010:	000007fc 	.word	0x000007fc
    6014:	00000824 	.word	0x00000824
    6018:	000007dc 	.word	0x000007dc
    601c:	000007ec 	.word	0x000007ec
    6020:	000007f4 	.word	0x000007f4
    6024:	2382      	movs	r3, #130	; 0x82
    6026:	465a      	mov	r2, fp
    6028:	005b      	lsls	r3, r3, #1
    602a:	58d4      	ldr	r4, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1203
		// compute the a priori gyro estimate of the gravitational vector (g, sensor frame)
		// using an absolute rotation of the global frame gravity vector (with magnitude 1g)
		if (ithisCoordSystem == NED)
		{
			// NED gravity is along positive z axis
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
    602c:	23fc      	movs	r3, #252	; 0xfc
    602e:	00db      	lsls	r3, r3, #3
    6030:	58d5      	ldr	r5, [r2, r3]
    6032:	23ec      	movs	r3, #236	; 0xec
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    6034:	21fc      	movs	r1, #252	; 0xfc
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1203
		// compute the a priori gyro estimate of the gravitational vector (g, sensor frame)
		// using an absolute rotation of the global frame gravity vector (with magnitude 1g)
		if (ithisCoordSystem == NED)
		{
			// NED gravity is along positive z axis
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
    6036:	50d5      	str	r5, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    6038:	3b30      	subs	r3, #48	; 0x30
    603a:	58d0      	ldr	r0, [r2, r3]
    603c:	0589      	lsls	r1, r1, #22
    603e:	f7fa ff99 	bl	f74 <__aeabi_fmul>
    6042:	465a      	mov	r2, fp
    6044:	23ac      	movs	r3, #172	; 0xac
    6046:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    6048:	9b08      	ldr	r3, [sp, #32]
    604a:	68d9      	ldr	r1, [r3, #12]
    604c:	f7fa fc24 	bl	898 <__aeabi_fadd>
    6050:	1c29      	adds	r1, r5, #0
    6052:	f7fb f8c1 	bl	11d8 <__aeabi_fsub>
    6056:	465a      	mov	r2, fp
    6058:	23d4      	movs	r3, #212	; 0xd4
    605a:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1231
		// compute the a priori gyro estimate of the geomagnetic vector (uT, sensor frame)
		// using an absolute rotation of the global frame geomagnetic vector (with magnitude B uT)
		if (ithisCoordSystem == NED)
		{
			// NED y component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    605c:	23fb      	movs	r3, #251	; 0xfb
    605e:	00db      	lsls	r3, r3, #3
    6060:	58d1      	ldr	r1, [r2, r3]
    6062:	1c20      	adds	r0, r4, #0
    6064:	f7fa ff86 	bl	f74 <__aeabi_fmul>
    6068:	1c39      	adds	r1, r7, #0
    606a:	1c06      	adds	r6, r0, #0
    606c:	1c28      	adds	r0, r5, #0
    606e:	f7fa ff81 	bl	f74 <__aeabi_fmul>
    6072:	1c01      	adds	r1, r0, #0
    6074:	1c30      	adds	r0, r6, #0
    6076:	f7fa fc0f 	bl	898 <__aeabi_fadd>
    607a:	23f8      	movs	r3, #248	; 0xf8
    607c:	465a      	mov	r2, fp
    607e:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    6080:	464a      	mov	r2, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1231
		// compute the a priori gyro estimate of the geomagnetic vector (uT, sensor frame)
		// using an absolute rotation of the global frame geomagnetic vector (with magnitude B uT)
		if (ithisCoordSystem == NED)
		{
			// NED y component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    6082:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    6084:	6a50      	ldr	r0, [r2, #36]	; 0x24
    6086:	f7fb f8a7 	bl	11d8 <__aeabi_fsub>
    608a:	465a      	mov	r2, fp
    608c:	23e0      	movs	r3, #224	; 0xe0
    608e:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1203
		// compute the a priori gyro estimate of the gravitational vector (g, sensor frame)
		// using an absolute rotation of the global frame gravity vector (with magnitude 1g)
		if (ithisCoordSystem == NED)
		{
			// NED gravity is along positive z axis
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
    6090:	4bc7      	ldr	r3, [pc, #796]	; (63b0 <fRun_9DOF_GBY_KALMAN+0x6a4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    6092:	21fc      	movs	r1, #252	; 0xfc
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1203
		// compute the a priori gyro estimate of the gravitational vector (g, sensor frame)
		// using an absolute rotation of the global frame gravity vector (with magnitude 1g)
		if (ithisCoordSystem == NED)
		{
			// NED gravity is along positive z axis
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
    6094:	58d5      	ldr	r5, [r2, r3]
    6096:	23f0      	movs	r3, #240	; 0xf0
    6098:	50d5      	str	r5, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    609a:	3b30      	subs	r3, #48	; 0x30
    609c:	58d0      	ldr	r0, [r2, r3]
    609e:	0589      	lsls	r1, r1, #22
    60a0:	f7fa ff68 	bl	f74 <__aeabi_fmul>
    60a4:	465a      	mov	r2, fp
    60a6:	23b0      	movs	r3, #176	; 0xb0
    60a8:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    60aa:	9b08      	ldr	r3, [sp, #32]
    60ac:	6919      	ldr	r1, [r3, #16]
    60ae:	f7fa fbf3 	bl	898 <__aeabi_fadd>
    60b2:	1c29      	adds	r1, r5, #0
    60b4:	f7fb f890 	bl	11d8 <__aeabi_fsub>
    60b8:	465a      	mov	r2, fp
    60ba:	23d8      	movs	r3, #216	; 0xd8
    60bc:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1231
		// compute the a priori gyro estimate of the geomagnetic vector (uT, sensor frame)
		// using an absolute rotation of the global frame geomagnetic vector (with magnitude B uT)
		if (ithisCoordSystem == NED)
		{
			// NED y component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    60be:	4bbd      	ldr	r3, [pc, #756]	; (63b4 <fRun_9DOF_GBY_KALMAN+0x6a8>)
    60c0:	1c20      	adds	r0, r4, #0
    60c2:	58d1      	ldr	r1, [r2, r3]
    60c4:	f7fa ff56 	bl	f74 <__aeabi_fmul>
    60c8:	1c39      	adds	r1, r7, #0
    60ca:	1c06      	adds	r6, r0, #0
    60cc:	1c28      	adds	r0, r5, #0
    60ce:	f7fa ff51 	bl	f74 <__aeabi_fmul>
    60d2:	1c01      	adds	r1, r0, #0
    60d4:	1c30      	adds	r0, r6, #0
    60d6:	f7fa fbdf 	bl	898 <__aeabi_fadd>
    60da:	23fc      	movs	r3, #252	; 0xfc
    60dc:	465a      	mov	r2, fp
    60de:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    60e0:	464a      	mov	r2, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1231
		// compute the a priori gyro estimate of the geomagnetic vector (uT, sensor frame)
		// using an absolute rotation of the global frame geomagnetic vector (with magnitude B uT)
		if (ithisCoordSystem == NED)
		{
			// NED y component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    60e2:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    60e4:	6a90      	ldr	r0, [r2, #40]	; 0x28
    60e6:	f7fb f877 	bl	11d8 <__aeabi_fsub>
    60ea:	465a      	mov	r2, fp
    60ec:	23e4      	movs	r3, #228	; 0xe4
    60ee:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1203
		// compute the a priori gyro estimate of the gravitational vector (g, sensor frame)
		// using an absolute rotation of the global frame gravity vector (with magnitude 1g)
		if (ithisCoordSystem == NED)
		{
			// NED gravity is along positive z axis
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
    60f0:	23ff      	movs	r3, #255	; 0xff
    60f2:	00db      	lsls	r3, r3, #3
    60f4:	58d5      	ldr	r5, [r2, r3]
    60f6:	23f4      	movs	r3, #244	; 0xf4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    60f8:	21fc      	movs	r1, #252	; 0xfc
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1203
		// compute the a priori gyro estimate of the gravitational vector (g, sensor frame)
		// using an absolute rotation of the global frame gravity vector (with magnitude 1g)
		if (ithisCoordSystem == NED)
		{
			// NED gravity is along positive z axis
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
    60fa:	50d5      	str	r5, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    60fc:	3b30      	subs	r3, #48	; 0x30
    60fe:	58d0      	ldr	r0, [r2, r3]
    6100:	0589      	lsls	r1, r1, #22
    6102:	f7fa ff37 	bl	f74 <__aeabi_fmul>
    6106:	465a      	mov	r2, fp
    6108:	23b4      	movs	r3, #180	; 0xb4
    610a:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    610c:	9b08      	ldr	r3, [sp, #32]
    610e:	6959      	ldr	r1, [r3, #20]
    6110:	f7fa fbc2 	bl	898 <__aeabi_fadd>
    6114:	1c29      	adds	r1, r5, #0
    6116:	f7fb f85f 	bl	11d8 <__aeabi_fsub>
    611a:	465a      	mov	r2, fp
    611c:	23dc      	movs	r3, #220	; 0xdc
    611e:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1231
		// compute the a priori gyro estimate of the geomagnetic vector (uT, sensor frame)
		// using an absolute rotation of the global frame geomagnetic vector (with magnitude B uT)
		if (ithisCoordSystem == NED)
		{
			// NED y component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    6120:	23fe      	movs	r3, #254	; 0xfe
    6122:	00db      	lsls	r3, r3, #3
    6124:	58d1      	ldr	r1, [r2, r3]
    6126:	1c20      	adds	r0, r4, #0
    6128:	f7fa ff24 	bl	f74 <__aeabi_fmul>
    612c:	1c39      	adds	r1, r7, #0
    612e:	1c04      	adds	r4, r0, #0
    6130:	1c28      	adds	r0, r5, #0
    6132:	f7fa ff1f 	bl	f74 <__aeabi_fmul>
    6136:	1c01      	adds	r1, r0, #0
    6138:	1c20      	adds	r0, r4, #0
    613a:	f7fa fbad 	bl	898 <__aeabi_fadd>
    613e:	2380      	movs	r3, #128	; 0x80
    6140:	465a      	mov	r2, fp
    6142:	005b      	lsls	r3, r3, #1
    6144:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    6146:	464b      	mov	r3, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1231
		// compute the a priori gyro estimate of the geomagnetic vector (uT, sensor frame)
		// using an absolute rotation of the global frame geomagnetic vector (with magnitude B uT)
		if (ithisCoordSystem == NED)
		{
			// NED y component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    6148:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    614a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    614c:	f7fb f844 	bl	11d8 <__aeabi_fsub>
    6150:	465a      	mov	r2, fp
    6152:	23e8      	movs	r3, #232	; 0xe8
    6154:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1248
	// *********************************************************************************
	// update variable elements of measurement matrix C
	// *********************************************************************************

	// update measurement matrix C with -alpha(g-)x and -alpha(m-)x from gyro (g, uT, sensor frame)
	pthisSV->fC6x12[0][1] = FDEGTORAD * pthisSV->fgSeGyMi[Z];
    6156:	465a      	mov	r2, fp
    6158:	23f4      	movs	r3, #244	; 0xf4
    615a:	4997      	ldr	r1, [pc, #604]	; (63b8 <fRun_9DOF_GBY_KALMAN+0x6ac>)
    615c:	58d0      	ldr	r0, [r2, r3]
    615e:	f7fa ff09 	bl	f74 <__aeabi_fmul>
    6162:	465a      	mov	r2, fp
    6164:	4b95      	ldr	r3, [pc, #596]	; (63bc <fRun_9DOF_GBY_KALMAN+0x6b0>)
    6166:	1c05      	adds	r5, r0, #0
    6168:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1249
	pthisSV->fC6x12[0][2] = -FDEGTORAD * pthisSV->fgSeGyMi[Y];
    616a:	23f0      	movs	r3, #240	; 0xf0
    616c:	4994      	ldr	r1, [pc, #592]	; (63c0 <fRun_9DOF_GBY_KALMAN+0x6b4>)
    616e:	58d0      	ldr	r0, [r2, r3]
    6170:	f7fa ff00 	bl	f74 <__aeabi_fmul>
    6174:	23d8      	movs	r3, #216	; 0xd8
    6176:	465a      	mov	r2, fp
    6178:	00db      	lsls	r3, r3, #3
    617a:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1250
	pthisSV->fC6x12[1][2] = FDEGTORAD * pthisSV->fgSeGyMi[X];
    617c:	23ec      	movs	r3, #236	; 0xec
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1249
	// update variable elements of measurement matrix C
	// *********************************************************************************

	// update measurement matrix C with -alpha(g-)x and -alpha(m-)x from gyro (g, uT, sensor frame)
	pthisSV->fC6x12[0][1] = FDEGTORAD * pthisSV->fgSeGyMi[Z];
	pthisSV->fC6x12[0][2] = -FDEGTORAD * pthisSV->fgSeGyMi[Y];
    617e:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1250
	pthisSV->fC6x12[1][2] = FDEGTORAD * pthisSV->fgSeGyMi[X];
    6180:	498d      	ldr	r1, [pc, #564]	; (63b8 <fRun_9DOF_GBY_KALMAN+0x6ac>)
    6182:	58d0      	ldr	r0, [r2, r3]
    6184:	f7fa fef6 	bl	f74 <__aeabi_fmul>
    6188:	23de      	movs	r3, #222	; 0xde
    618a:	465a      	mov	r2, fp
    618c:	00db      	lsls	r3, r3, #3
    618e:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1251
	pthisSV->fC6x12[1][0] = -pthisSV->fC6x12[0][1];
    6190:	2380      	movs	r3, #128	; 0x80
    6192:	061b      	lsls	r3, r3, #24
    6194:	18ea      	adds	r2, r5, r3
    6196:	23dd      	movs	r3, #221	; 0xdd
    6198:	4659      	mov	r1, fp
    619a:	00db      	lsls	r3, r3, #3
    619c:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1252
	pthisSV->fC6x12[2][0] = -pthisSV->fC6x12[0][2];
    619e:	2380      	movs	r3, #128	; 0x80
    61a0:	061b      	lsls	r3, r3, #24
    61a2:	18fa      	adds	r2, r7, r3
    61a4:	23e3      	movs	r3, #227	; 0xe3
    61a6:	00db      	lsls	r3, r3, #3
    61a8:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1253
	pthisSV->fC6x12[2][1] = -pthisSV->fC6x12[1][2];
    61aa:	2380      	movs	r3, #128	; 0x80
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1250
	// *********************************************************************************

	// update measurement matrix C with -alpha(g-)x and -alpha(m-)x from gyro (g, uT, sensor frame)
	pthisSV->fC6x12[0][1] = FDEGTORAD * pthisSV->fgSeGyMi[Z];
	pthisSV->fC6x12[0][2] = -FDEGTORAD * pthisSV->fgSeGyMi[Y];
	pthisSV->fC6x12[1][2] = FDEGTORAD * pthisSV->fgSeGyMi[X];
    61ac:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1253
	pthisSV->fC6x12[1][0] = -pthisSV->fC6x12[0][1];
	pthisSV->fC6x12[2][0] = -pthisSV->fC6x12[0][2];
	pthisSV->fC6x12[2][1] = -pthisSV->fC6x12[1][2];
    61ae:	061b      	lsls	r3, r3, #24
    61b0:	4443      	add	r3, r8
    61b2:	1c1a      	adds	r2, r3, #0
    61b4:	4b83      	ldr	r3, [pc, #524]	; (63c4 <fRun_9DOF_GBY_KALMAN+0x6b8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1256
	pthisSV->fC6x12[3][1] = FDEGTORAD * pthisSV->fmSeGyMi[Z];
	pthisSV->fC6x12[3][2] = -FDEGTORAD * pthisSV->fmSeGyMi[Y];
	pthisSV->fC6x12[4][2] = FDEGTORAD * pthisSV->fmSeGyMi[X];
    61b6:	465c      	mov	r4, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1253
	pthisSV->fC6x12[0][1] = FDEGTORAD * pthisSV->fgSeGyMi[Z];
	pthisSV->fC6x12[0][2] = -FDEGTORAD * pthisSV->fgSeGyMi[Y];
	pthisSV->fC6x12[1][2] = FDEGTORAD * pthisSV->fgSeGyMi[X];
	pthisSV->fC6x12[1][0] = -pthisSV->fC6x12[0][1];
	pthisSV->fC6x12[2][0] = -pthisSV->fC6x12[0][2];
	pthisSV->fC6x12[2][1] = -pthisSV->fC6x12[1][2];
    61b8:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1254
	pthisSV->fC6x12[3][1] = FDEGTORAD * pthisSV->fmSeGyMi[Z];
    61ba:	2380      	movs	r3, #128	; 0x80
    61bc:	005b      	lsls	r3, r3, #1
    61be:	58c8      	ldr	r0, [r1, r3]
    61c0:	497d      	ldr	r1, [pc, #500]	; (63b8 <fRun_9DOF_GBY_KALMAN+0x6ac>)
    61c2:	f7fa fed7 	bl	f74 <__aeabi_fmul>
    61c6:	465a      	mov	r2, fp
    61c8:	4b7f      	ldr	r3, [pc, #508]	; (63c8 <fRun_9DOF_GBY_KALMAN+0x6bc>)
    61ca:	4681      	mov	r9, r0
    61cc:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1255
	pthisSV->fC6x12[3][2] = -FDEGTORAD * pthisSV->fmSeGyMi[Y];
    61ce:	23fc      	movs	r3, #252	; 0xfc
    61d0:	497b      	ldr	r1, [pc, #492]	; (63c0 <fRun_9DOF_GBY_KALMAN+0x6b4>)
    61d2:	58d0      	ldr	r0, [r2, r3]
    61d4:	f7fa fece 	bl	f74 <__aeabi_fmul>
    61d8:	23ea      	movs	r3, #234	; 0xea
    61da:	465a      	mov	r2, fp
    61dc:	00db      	lsls	r3, r3, #3
    61de:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1256
	pthisSV->fC6x12[4][2] = FDEGTORAD * pthisSV->fmSeGyMi[X];
    61e0:	23f8      	movs	r3, #248	; 0xf8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1255
	pthisSV->fC6x12[1][2] = FDEGTORAD * pthisSV->fgSeGyMi[X];
	pthisSV->fC6x12[1][0] = -pthisSV->fC6x12[0][1];
	pthisSV->fC6x12[2][0] = -pthisSV->fC6x12[0][2];
	pthisSV->fC6x12[2][1] = -pthisSV->fC6x12[1][2];
	pthisSV->fC6x12[3][1] = FDEGTORAD * pthisSV->fmSeGyMi[Z];
	pthisSV->fC6x12[3][2] = -FDEGTORAD * pthisSV->fmSeGyMi[Y];
    61e2:	4682      	mov	sl, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1256
	pthisSV->fC6x12[4][2] = FDEGTORAD * pthisSV->fmSeGyMi[X];
    61e4:	4974      	ldr	r1, [pc, #464]	; (63b8 <fRun_9DOF_GBY_KALMAN+0x6ac>)
    61e6:	58d0      	ldr	r0, [r2, r3]
    61e8:	f7fa fec4 	bl	f74 <__aeabi_fmul>
    61ec:	23f0      	movs	r3, #240	; 0xf0
    61ee:	00db      	lsls	r3, r3, #3
    61f0:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1257
	pthisSV->fC6x12[4][0] = -pthisSV->fC6x12[3][1];
    61f2:	2380      	movs	r3, #128	; 0x80
    61f4:	061b      	lsls	r3, r3, #24
    61f6:	444b      	add	r3, r9
    61f8:	1c1a      	adds	r2, r3, #0
    61fa:	23ef      	movs	r3, #239	; 0xef
    61fc:	00db      	lsls	r3, r3, #3
    61fe:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1258
	pthisSV->fC6x12[5][0] = -pthisSV->fC6x12[3][2];
    6200:	2380      	movs	r3, #128	; 0x80
    6202:	061b      	lsls	r3, r3, #24
    6204:	4453      	add	r3, sl
    6206:	1c1a      	adds	r2, r3, #0
    6208:	23f5      	movs	r3, #245	; 0xf5
    620a:	00db      	lsls	r3, r3, #3
    620c:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1256
	pthisSV->fC6x12[1][0] = -pthisSV->fC6x12[0][1];
	pthisSV->fC6x12[2][0] = -pthisSV->fC6x12[0][2];
	pthisSV->fC6x12[2][1] = -pthisSV->fC6x12[1][2];
	pthisSV->fC6x12[3][1] = FDEGTORAD * pthisSV->fmSeGyMi[Z];
	pthisSV->fC6x12[3][2] = -FDEGTORAD * pthisSV->fmSeGyMi[Y];
	pthisSV->fC6x12[4][2] = FDEGTORAD * pthisSV->fmSeGyMi[X];
    620e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1259
	pthisSV->fC6x12[4][0] = -pthisSV->fC6x12[3][1];
	pthisSV->fC6x12[5][0] = -pthisSV->fC6x12[3][2];
	pthisSV->fC6x12[5][1] = -pthisSV->fC6x12[4][2];
    6210:	2380      	movs	r3, #128	; 0x80
    6212:	468c      	mov	ip, r1
    6214:	061b      	lsls	r3, r3, #24
    6216:	4463      	add	r3, ip
    6218:	1c1a      	adds	r2, r3, #0
    621a:	4b6c      	ldr	r3, [pc, #432]	; (63cc <fRun_9DOF_GBY_KALMAN+0x6c0>)
    621c:	9102      	str	r1, [sp, #8]
    621e:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1260
	pthisSV->fC6x12[0][4] = -pthisSV->fdeltat * pthisSV->fC6x12[0][1];
    6220:	4b6b      	ldr	r3, [pc, #428]	; (63d0 <fRun_9DOF_GBY_KALMAN+0x6c4>)
    6222:	1c28      	adds	r0, r5, #0
    6224:	58e4      	ldr	r4, [r4, r3]
    6226:	2380      	movs	r3, #128	; 0x80
    6228:	061b      	lsls	r3, r3, #24
    622a:	469c      	mov	ip, r3
    622c:	4464      	add	r4, ip
    622e:	1c21      	adds	r1, r4, #0
    6230:	f7fa fea0 	bl	f74 <__aeabi_fmul>
    6234:	23d9      	movs	r3, #217	; 0xd9
    6236:	4659      	mov	r1, fp
    6238:	00db      	lsls	r3, r3, #3
    623a:	50c8      	str	r0, [r1, r3]
    623c:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1261
	pthisSV->fC6x12[0][5] = -pthisSV->fdeltat * pthisSV->fC6x12[0][2];
    623e:	1c21      	adds	r1, r4, #0
    6240:	1c38      	adds	r0, r7, #0
    6242:	f7fa fe97 	bl	f74 <__aeabi_fmul>
    6246:	4659      	mov	r1, fp
    6248:	4b62      	ldr	r3, [pc, #392]	; (63d4 <fRun_9DOF_GBY_KALMAN+0x6c8>)
    624a:	1c05      	adds	r5, r0, #0
    624c:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1262
	pthisSV->fC6x12[1][5] = -pthisSV->fdeltat * pthisSV->fC6x12[1][2];
    624e:	1c21      	adds	r1, r4, #0
    6250:	4640      	mov	r0, r8
    6252:	f7fa fe8f 	bl	f74 <__aeabi_fmul>
    6256:	4659      	mov	r1, fp
    6258:	4b5f      	ldr	r3, [pc, #380]	; (63d8 <fRun_9DOF_GBY_KALMAN+0x6cc>)
    625a:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1263
	pthisSV->fC6x12[1][3]= -pthisSV->fC6x12[0][4];
    625c:	2380      	movs	r3, #128	; 0x80
    625e:	061b      	lsls	r3, r3, #24
    6260:	469c      	mov	ip, r3
    6262:	4b5e      	ldr	r3, [pc, #376]	; (63dc <fRun_9DOF_GBY_KALMAN+0x6d0>)
    6264:	4466      	add	r6, ip
    6266:	50ce      	str	r6, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1264
	pthisSV->fC6x12[2][3]= -pthisSV->fC6x12[0][5];
    6268:	4b5d      	ldr	r3, [pc, #372]	; (63e0 <fRun_9DOF_GBY_KALMAN+0x6d4>)
    626a:	4465      	add	r5, ip
    626c:	50cd      	str	r5, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1265
	pthisSV->fC6x12[2][4]= -pthisSV->fC6x12[1][5];
    626e:	23e5      	movs	r3, #229	; 0xe5
    6270:	4460      	add	r0, ip
    6272:	00db      	lsls	r3, r3, #3
    6274:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1266
	pthisSV->fC6x12[3][4] = -pthisSV->fdeltat * pthisSV->fC6x12[3][1];
    6276:	1c21      	adds	r1, r4, #0
    6278:	4648      	mov	r0, r9
    627a:	f7fa fe7b 	bl	f74 <__aeabi_fmul>
    627e:	23eb      	movs	r3, #235	; 0xeb
    6280:	4659      	mov	r1, fp
    6282:	00db      	lsls	r3, r3, #3
    6284:	50c8      	str	r0, [r1, r3]
    6286:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1267
	pthisSV->fC6x12[3][5] = -pthisSV->fdeltat * pthisSV->fC6x12[3][2];
    6288:	1c21      	adds	r1, r4, #0
    628a:	4650      	mov	r0, sl
    628c:	f7fa fe72 	bl	f74 <__aeabi_fmul>
    6290:	4659      	mov	r1, fp
    6292:	4b54      	ldr	r3, [pc, #336]	; (63e4 <fRun_9DOF_GBY_KALMAN+0x6d8>)
    6294:	1c05      	adds	r5, r0, #0
    6296:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1268
	pthisSV->fC6x12[4][5] = -pthisSV->fdeltat * pthisSV->fC6x12[4][2];
    6298:	9802      	ldr	r0, [sp, #8]
    629a:	1c21      	adds	r1, r4, #0
    629c:	f7fa fe6a 	bl	f74 <__aeabi_fmul>
    62a0:	465a      	mov	r2, fp
    62a2:	4b51      	ldr	r3, [pc, #324]	; (63e8 <fRun_9DOF_GBY_KALMAN+0x6dc>)
    62a4:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1269
	pthisSV->fC6x12[4][3] = -pthisSV->fC6x12[3][4];
    62a6:	2380      	movs	r3, #128	; 0x80
    62a8:	061b      	lsls	r3, r3, #24
    62aa:	469c      	mov	ip, r3
    62ac:	4b4f      	ldr	r3, [pc, #316]	; (63ec <fRun_9DOF_GBY_KALMAN+0x6e0>)
    62ae:	4466      	add	r6, ip
    62b0:	50d6      	str	r6, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1270
	pthisSV->fC6x12[5][3] = -pthisSV->fC6x12[3][5];
    62b2:	4b4f      	ldr	r3, [pc, #316]	; (63f0 <fRun_9DOF_GBY_KALMAN+0x6e4>)
    62b4:	4465      	add	r5, ip
    62b6:	50d5      	str	r5, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1271
	pthisSV->fC6x12[5][4] = -pthisSV->fC6x12[4][5];
    62b8:	23f7      	movs	r3, #247	; 0xf7
    62ba:	4460      	add	r0, ip
    62bc:	00db      	lsls	r3, r3, #3
    62be:	50d0      	str	r0, [r2, r3]
    62c0:	ab2a      	add	r3, sp, #168	; 0xa8
    62c2:	469a      	mov	sl, r3
    62c4:	238f      	movs	r3, #143	; 0x8f
    62c6:	22d7      	movs	r2, #215	; 0xd7
    62c8:	00db      	lsls	r3, r3, #3
    62ca:	445b      	add	r3, fp
    62cc:	00d2      	lsls	r2, r2, #3
    62ce:	9305      	str	r3, [sp, #20]
    62d0:	445a      	add	r2, fp
    62d2:	1c1f      	adds	r7, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1291
		pftmpA12x6ij = ftmpA12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of ftmpA12x6
		{
			// zero ftmpA12x6[i][j]
			*pftmpA12x6ij = 0.0F;
    62d4:	465b      	mov	r3, fp
    62d6:	4693      	mov	fp, r2
    62d8:	9302      	str	r3, [sp, #8]
    62da:	2318      	movs	r3, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1286
	// C also has a significant number of +1 and -1 entries
	// ftmpA12x6 is also sparse but not symmetric
	for (i = 0; i < 12; i++) // loop over rows of ftmpA12x6
	{
		// initialize pftmpA12x6ij for current i, j=0
		pftmpA12x6ij = ftmpA12x6[i];
    62dc:	46d0      	mov	r8, sl
    62de:	469c      	mov	ip, r3
    62e0:	46d9      	mov	r9, fp
    62e2:	4646      	mov	r6, r8
    62e4:	44e2      	add	sl, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1291

		for (j = 0; j < 6; j++) // loop over columns of ftmpA12x6
		{
			// zero ftmpA12x6[i][j]
			*pftmpA12x6ij = 0.0F;
    62e6:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1294

			// initialize pfC6x12jk for current j, k=0
			pfC6x12jk = pthisSV->fC6x12[j];
    62e8:	46b0      	mov	r8, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1291
		pftmpA12x6ij = ftmpA12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of ftmpA12x6
		{
			// zero ftmpA12x6[i][j]
			*pftmpA12x6ij = 0.0F;
    62ea:	6033      	str	r3, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1294

			// initialize pfC6x12jk for current j, k=0
			pfC6x12jk = pthisSV->fC6x12[j];
    62ec:	2400      	movs	r4, #0
    62ee:	464e      	mov	r6, r9
    62f0:	e009      	b.n	6306 <fRun_9DOF_GBY_KALMAN+0x5fa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1305
			for (k = 0; k < 12; k++)
			{
				if ((*pfQw12x12ik != 0.0F) && (*pfC6x12jk != 0.0F))
				{
					if (*pfC6x12jk == 1.0F)
						*pftmpA12x6ij += *pfQw12x12ik;
    62f2:	4643      	mov	r3, r8
    62f4:	1c29      	adds	r1, r5, #0
    62f6:	6818      	ldr	r0, [r3, #0]
    62f8:	f7fa face 	bl	898 <__aeabi_fadd>
    62fc:	4643      	mov	r3, r8
    62fe:	6018      	str	r0, [r3, #0]
    6300:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1300 (discriminator 2)

			// initialize pfQw12x12ik for current i, k=0
			pfQw12x12ik = pthisSV->fQw12x12[i];

			// sum matrix products over inner loop over k
			for (k = 0; k < 12; k++)
    6302:	2c30      	cmp	r4, #48	; 0x30
    6304:	d026      	beq.n	6354 <fRun_9DOF_GBY_KALMAN+0x648>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1302
			{
				if ((*pfQw12x12ik != 0.0F) && (*pfC6x12jk != 0.0F))
    6306:	593d      	ldr	r5, [r7, r4]
    6308:	2100      	movs	r1, #0
    630a:	1c28      	adds	r0, r5, #0
    630c:	f7fa fa96 	bl	83c <__aeabi_fcmpeq>
    6310:	2800      	cmp	r0, #0
    6312:	d1f5      	bne.n	6300 <fRun_9DOF_GBY_KALMAN+0x5f4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1302 (discriminator 1)
    6314:	5933      	ldr	r3, [r6, r4]
    6316:	2100      	movs	r1, #0
    6318:	1c18      	adds	r0, r3, #0
    631a:	4699      	mov	r9, r3
    631c:	f7fa fa8e 	bl	83c <__aeabi_fcmpeq>
    6320:	2800      	cmp	r0, #0
    6322:	d1ed      	bne.n	6300 <fRun_9DOF_GBY_KALMAN+0x5f4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1304
				{
					if (*pfC6x12jk == 1.0F)
    6324:	21fe      	movs	r1, #254	; 0xfe
    6326:	4648      	mov	r0, r9
    6328:	0589      	lsls	r1, r1, #22
    632a:	f7fa fa87 	bl	83c <__aeabi_fcmpeq>
    632e:	2800      	cmp	r0, #0
    6330:	d1df      	bne.n	62f2 <fRun_9DOF_GBY_KALMAN+0x5e6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1306
						*pftmpA12x6ij += *pfQw12x12ik;
					else if (*pfC6x12jk == -1.0F)
    6332:	4648      	mov	r0, r9
    6334:	492f      	ldr	r1, [pc, #188]	; (63f4 <fRun_9DOF_GBY_KALMAN+0x6e8>)
    6336:	f7fa fa81 	bl	83c <__aeabi_fcmpeq>
    633a:	2800      	cmp	r0, #0
    633c:	d100      	bne.n	6340 <fRun_9DOF_GBY_KALMAN+0x634>
    633e:	e1d2      	b.n	66e6 <fRun_9DOF_GBY_KALMAN+0x9da>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1307
						*pftmpA12x6ij -= *pfQw12x12ik;
    6340:	4643      	mov	r3, r8
    6342:	1c29      	adds	r1, r5, #0
    6344:	6818      	ldr	r0, [r3, #0]
    6346:	f7fa ff47 	bl	11d8 <__aeabi_fsub>
    634a:	4643      	mov	r3, r8
    634c:	3404      	adds	r4, #4
    634e:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1300

			// initialize pfQw12x12ik for current i, k=0
			pfQw12x12ik = pthisSV->fQw12x12[i];

			// sum matrix products over inner loop over k
			for (k = 0; k < 12; k++)
    6350:	2c30      	cmp	r4, #48	; 0x30
    6352:	d1d8      	bne.n	6306 <fRun_9DOF_GBY_KALMAN+0x5fa>
    6354:	2330      	movs	r3, #48	; 0x30
    6356:	46b1      	mov	r9, r6
    6358:	4646      	mov	r6, r8
    635a:	469c      	mov	ip, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1319 (discriminator 2)
				pfQw12x12ik++;

			} // end of loop over k

			// increment pftmpA12x6ij for next iteration of j
			pftmpA12x6ij++;
    635c:	3604      	adds	r6, #4
    635e:	44e1      	add	r9, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1288 (discriminator 2)
	for (i = 0; i < 12; i++) // loop over rows of ftmpA12x6
	{
		// initialize pftmpA12x6ij for current i, j=0
		pftmpA12x6ij = ftmpA12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of ftmpA12x6
    6360:	4556      	cmp	r6, sl
    6362:	d1c0      	bne.n	62e6 <fRun_9DOF_GBY_KALMAN+0x5da>
    6364:	3730      	adds	r7, #48	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1283 (discriminator 2)
	// *********************************************************************************

	// set ftmpA12x6 = P- * C^T = Qw * C^T where Qw and C are both sparse
	// C also has a significant number of +1 and -1 entries
	// ftmpA12x6 is also sparse but not symmetric
	for (i = 0; i < 12; i++) // loop over rows of ftmpA12x6
    6366:	455f      	cmp	r7, fp
    6368:	d1b7      	bne.n	62da <fRun_9DOF_GBY_KALMAN+0x5ce>
    636a:	9b02      	ldr	r3, [sp, #8]
    636c:	469b      	mov	fp, r3
    636e:	23dd      	movs	r3, #221	; 0xdd
    6370:	00db      	lsls	r3, r3, #3
    6372:	445b      	add	r3, fp
    6374:	4698      	mov	r8, r3
    6376:	238c      	movs	r3, #140	; 0x8c
    6378:	005b      	lsls	r3, r3, #1
    637a:	445b      	add	r3, fp
    637c:	930c      	str	r3, [sp, #48]	; 0x30
    637e:	9303      	str	r3, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1283
    6380:	2300      	movs	r3, #0
    6382:	9304      	str	r3, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1335
		pfPPlus12x12ij = pthisSV->fPPlus12x12[i] + i;

		for (j = i; j < 6; j++) // loop over above diagonal columns of P+
		{
			// zero P+[i][j] 
			*pfPPlus12x12ij = 0.0F;
    6384:	465b      	mov	r3, fp
    6386:	9306      	str	r3, [sp, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1330
	// = C * (Qw * C^T) + Qv = C * ftmpA12x6 + Qv
	// both C and ftmpA12x6 are sparse but not symmetric
	for (i = 0; i < 6; i++) // loop over rows of P+
	{
		// initialize pfPPlus12x12ij for current i, j=i
		pfPPlus12x12ij = pthisSV->fPPlus12x12[i] + i;
    6388:	9b03      	ldr	r3, [sp, #12]
    638a:	9a04      	ldr	r2, [sp, #16]
    638c:	4699      	mov	r9, r3
    638e:	2330      	movs	r3, #48	; 0x30
    6390:	425b      	negs	r3, r3
    6392:	4443      	add	r3, r8
    6394:	469b      	mov	fp, r3
    6396:	4692      	mov	sl, r2
    6398:	4647      	mov	r7, r8
    639a:	b255      	sxtb	r5, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1335

		for (j = i; j < 6; j++) // loop over above diagonal columns of P+
		{
			// zero P+[i][j] 
			*pfPPlus12x12ij = 0.0F;
    639c:	464b      	mov	r3, r9
    639e:	2200      	movs	r2, #0
    63a0:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1341

			// initialize pfC6x12ik for current i, k=0
			pfC6x12ik = pthisSV->fC6x12[i];

			// initialize pftmpA12x6kj for current j, k=0
			pftmpA12x6kj = *ftmpA12x6 + j;
    63a2:	ab2a      	add	r3, sp, #168	; 0xa8
    63a4:	469c      	mov	ip, r3
    63a6:	00ad      	lsls	r5, r5, #2
    63a8:	4465      	add	r5, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1338
		{
			// zero P+[i][j] 
			*pfPPlus12x12ij = 0.0F;

			// initialize pfC6x12ik for current i, k=0
			pfC6x12ik = pthisSV->fC6x12[i];
    63aa:	465c      	mov	r4, fp
    63ac:	e02f      	b.n	640e <fRun_9DOF_GBY_KALMAN+0x702>
    63ae:	46c0      	nop			; (mov r8, r8)
    63b0:	000007ec 	.word	0x000007ec
    63b4:	000007e4 	.word	0x000007e4
    63b8:	3c8efa35 	.word	0x3c8efa35
    63bc:	000006bc 	.word	0x000006bc
    63c0:	bc8efa35 	.word	0xbc8efa35
    63c4:	0000071c 	.word	0x0000071c
    63c8:	0000074c 	.word	0x0000074c
    63cc:	000007ac 	.word	0x000007ac
    63d0:	00000828 	.word	0x00000828
    63d4:	000006cc 	.word	0x000006cc
    63d8:	000006fc 	.word	0x000006fc
    63dc:	000006f4 	.word	0x000006f4
    63e0:	00000724 	.word	0x00000724
    63e4:	0000075c 	.word	0x0000075c
    63e8:	0000078c 	.word	0x0000078c
    63ec:	00000784 	.word	0x00000784
    63f0:	000007b4 	.word	0x000007b4
    63f4:	bf800000 	.word	0xbf800000
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1349
			for (k = 0; k < 12; k++)
			{
				if ((*pfC6x12ik != 0.0F) && (*pftmpA12x6kj != 0.0F))
				{
					if (*pfC6x12ik == 1.0F)
						*pfPPlus12x12ij += *pftmpA12x6kj;
    63f8:	464b      	mov	r3, r9
    63fa:	4641      	mov	r1, r8
    63fc:	6818      	ldr	r0, [r3, #0]
    63fe:	f7fa fa4b 	bl	898 <__aeabi_fadd>
    6402:	464b      	mov	r3, r9
    6404:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1357 (discriminator 2)
					else
						*pfPPlus12x12ij += *pfC6x12ik * *pftmpA12x6kj;
				}

				// update pfC6x12ik and pftmpA12x6kj for next iteration of k
				pfC6x12ik++;						
    6406:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1358 (discriminator 2)
				pftmpA12x6kj += 6;
    6408:	3518      	adds	r5, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1344 (discriminator 2)

			// initialize pftmpA12x6kj for current j, k=0
			pftmpA12x6kj = *ftmpA12x6 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 12; k++)
    640a:	42bc      	cmp	r4, r7
    640c:	d027      	beq.n	645e <fRun_9DOF_GBY_KALMAN+0x752>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1346
			{
				if ((*pfC6x12ik != 0.0F) && (*pftmpA12x6kj != 0.0F))
    640e:	6826      	ldr	r6, [r4, #0]
    6410:	2100      	movs	r1, #0
    6412:	1c30      	adds	r0, r6, #0
    6414:	f7fa fa12 	bl	83c <__aeabi_fcmpeq>
    6418:	2800      	cmp	r0, #0
    641a:	d1f4      	bne.n	6406 <fRun_9DOF_GBY_KALMAN+0x6fa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1346 (discriminator 1)
    641c:	682b      	ldr	r3, [r5, #0]
    641e:	2100      	movs	r1, #0
    6420:	1c18      	adds	r0, r3, #0
    6422:	4698      	mov	r8, r3
    6424:	f7fa fa0a 	bl	83c <__aeabi_fcmpeq>
    6428:	2800      	cmp	r0, #0
    642a:	d1ec      	bne.n	6406 <fRun_9DOF_GBY_KALMAN+0x6fa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1348
				{
					if (*pfC6x12ik == 1.0F)
    642c:	21fe      	movs	r1, #254	; 0xfe
    642e:	1c30      	adds	r0, r6, #0
    6430:	0589      	lsls	r1, r1, #22
    6432:	f7fa fa03 	bl	83c <__aeabi_fcmpeq>
    6436:	2800      	cmp	r0, #0
    6438:	d1de      	bne.n	63f8 <fRun_9DOF_GBY_KALMAN+0x6ec>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1350
						*pfPPlus12x12ij += *pftmpA12x6kj;
					else if (*pfC6x12ik == -1.0F)
    643a:	1c30      	adds	r0, r6, #0
    643c:	49f5      	ldr	r1, [pc, #980]	; (6814 <fRun_9DOF_GBY_KALMAN+0xb08>)
    643e:	f7fa f9fd 	bl	83c <__aeabi_fcmpeq>
    6442:	2800      	cmp	r0, #0
    6444:	d100      	bne.n	6448 <fRun_9DOF_GBY_KALMAN+0x73c>
    6446:	e15a      	b.n	66fe <fRun_9DOF_GBY_KALMAN+0x9f2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1351
						*pfPPlus12x12ij -= *pftmpA12x6kj;
    6448:	464b      	mov	r3, r9
    644a:	4641      	mov	r1, r8
    644c:	6818      	ldr	r0, [r3, #0]
    644e:	f7fa fec3 	bl	11d8 <__aeabi_fsub>
    6452:	464b      	mov	r3, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1357
					else
						*pfPPlus12x12ij += *pfC6x12ik * *pftmpA12x6kj;
				}

				// update pfC6x12ik and pftmpA12x6kj for next iteration of k
				pfC6x12ik++;						
    6454:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1351
				if ((*pfC6x12ik != 0.0F) && (*pftmpA12x6kj != 0.0F))
				{
					if (*pfC6x12ik == 1.0F)
						*pfPPlus12x12ij += *pftmpA12x6kj;
					else if (*pfC6x12ik == -1.0F)
						*pfPPlus12x12ij -= *pftmpA12x6kj;
    6456:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1358
						*pfPPlus12x12ij += *pfC6x12ik * *pftmpA12x6kj;
				}

				// update pfC6x12ik and pftmpA12x6kj for next iteration of k
				pfC6x12ik++;						
				pftmpA12x6kj += 6;
    6458:	3518      	adds	r5, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1344

			// initialize pftmpA12x6kj for current j, k=0
			pftmpA12x6kj = *ftmpA12x6 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 12; k++)
    645a:	42bc      	cmp	r4, r7
    645c:	d1d7      	bne.n	640e <fRun_9DOF_GBY_KALMAN+0x702>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1363 (discriminator 2)
				pftmpA12x6kj += 6;

			} // end of loop over k

			// increment pfPPlus12x12ij for next iteration of j
			pfPPlus12x12ij++;
    645e:	2304      	movs	r3, #4
    6460:	469c      	mov	ip, r3
    6462:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1332 (discriminator 2)
	for (i = 0; i < 6; i++) // loop over rows of P+
	{
		// initialize pfPPlus12x12ij for current i, j=i
		pfPPlus12x12ij = pthisSV->fPPlus12x12[i] + i;

		for (j = i; j < 6; j++) // loop over above diagonal columns of P+
    6464:	466a      	mov	r2, sp
    6466:	2508      	movs	r5, #8
    6468:	3301      	adds	r3, #1
    646a:	b2db      	uxtb	r3, r3
    646c:	7213      	strb	r3, [r2, #8]
    646e:	5755      	ldrsb	r5, [r2, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1363 (discriminator 2)
				pftmpA12x6kj += 6;

			} // end of loop over k

			// increment pfPPlus12x12ij for next iteration of j
			pfPPlus12x12ij++;
    6470:	44e1      	add	r9, ip
    6472:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1332 (discriminator 2)
	for (i = 0; i < 6; i++) // loop over rows of P+
	{
		// initialize pfPPlus12x12ij for current i, j=i
		pfPPlus12x12ij = pthisSV->fPPlus12x12[i] + i;

		for (j = i; j < 6; j++) // loop over above diagonal columns of P+
    6474:	2d05      	cmp	r5, #5
    6476:	dd91      	ble.n	639c <fRun_9DOF_GBY_KALMAN+0x690>
    6478:	9b04      	ldr	r3, [sp, #16]
    647a:	3301      	adds	r3, #1
    647c:	b2db      	uxtb	r3, r3
    647e:	b2da      	uxtb	r2, r3
    6480:	9204      	str	r2, [sp, #16]
    6482:	2230      	movs	r2, #48	; 0x30
    6484:	4690      	mov	r8, r2
    6486:	9a03      	ldr	r2, [sp, #12]
    6488:	44a0      	add	r8, r4
    648a:	3234      	adds	r2, #52	; 0x34
    648c:	9203      	str	r2, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1327 (discriminator 2)
	} // end of loop over i

	// set symmetric P+ (6x6 scratch sub-matrix) to C * P- * C^T + Qv
	// = C * (Qw * C^T) + Qv = C * ftmpA12x6 + Qv
	// both C and ftmpA12x6 are sparse but not symmetric
	for (i = 0; i < 6; i++) // loop over rows of P+
    648e:	2b06      	cmp	r3, #6
    6490:	d000      	beq.n	6494 <fRun_9DOF_GBY_KALMAN+0x788>
    6492:	e779      	b.n	6388 <fRun_9DOF_GBY_KALMAN+0x67c>
    6494:	9b06      	ldr	r3, [sp, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1369

		} // end of loop over j
	} // end of loop over i

	// add in noise covariance terms to the diagonal
	pthisSV->fPPlus12x12[0][0] +=  pthisSV->fQvAA;
    6496:	268c      	movs	r6, #140	; 0x8c
    6498:	469b      	mov	fp, r3
    649a:	2388      	movs	r3, #136	; 0x88
    649c:	465a      	mov	r2, fp
    649e:	005b      	lsls	r3, r3, #1
    64a0:	58d4      	ldr	r4, [r2, r3]
    64a2:	0076      	lsls	r6, r6, #1
    64a4:	5990      	ldr	r0, [r2, r6]
    64a6:	1c21      	adds	r1, r4, #0
    64a8:	f7fa f9f6 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1370
	pthisSV->fPPlus12x12[1][1] +=  pthisSV->fQvAA;
    64ac:	25a6      	movs	r5, #166	; 0xa6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1369

		} // end of loop over j
	} // end of loop over i

	// add in noise covariance terms to the diagonal
	pthisSV->fPPlus12x12[0][0] +=  pthisSV->fQvAA;
    64ae:	465b      	mov	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1370
	pthisSV->fPPlus12x12[1][1] +=  pthisSV->fQvAA;
    64b0:	006d      	lsls	r5, r5, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1369

		} // end of loop over j
	} // end of loop over i

	// add in noise covariance terms to the diagonal
	pthisSV->fPPlus12x12[0][0] +=  pthisSV->fQvAA;
    64b2:	5198      	str	r0, [r3, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1370
	pthisSV->fPPlus12x12[1][1] +=  pthisSV->fQvAA;
    64b4:	5959      	ldr	r1, [r3, r5]
    64b6:	1c20      	adds	r0, r4, #0
    64b8:	f7fa f9ee 	bl	898 <__aeabi_fadd>
    64bc:	465b      	mov	r3, fp
    64be:	5158      	str	r0, [r3, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1371
	pthisSV->fPPlus12x12[2][2] +=  pthisSV->fQvAA;
    64c0:	3534      	adds	r5, #52	; 0x34
    64c2:	5959      	ldr	r1, [r3, r5]
    64c4:	1c20      	adds	r0, r4, #0
    64c6:	f7fa f9e7 	bl	898 <__aeabi_fadd>
    64ca:	465b      	mov	r3, fp
    64cc:	5158      	str	r0, [r3, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1372
	pthisSV->fPPlus12x12[3][3] +=  pthisSV->fQvMM;
    64ce:	238a      	movs	r3, #138	; 0x8a
    64d0:	465a      	mov	r2, fp
    64d2:	005b      	lsls	r3, r3, #1
    64d4:	58d4      	ldr	r4, [r2, r3]
    64d6:	3534      	adds	r5, #52	; 0x34
    64d8:	5950      	ldr	r0, [r2, r5]
    64da:	1c21      	adds	r1, r4, #0
    64dc:	f7fa f9dc 	bl	898 <__aeabi_fadd>
    64e0:	465b      	mov	r3, fp
    64e2:	5158      	str	r0, [r3, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1373
	pthisSV->fPPlus12x12[4][4] +=  pthisSV->fQvMM;
    64e4:	3534      	adds	r5, #52	; 0x34
    64e6:	5959      	ldr	r1, [r3, r5]
    64e8:	1c20      	adds	r0, r4, #0
    64ea:	f7fa f9d5 	bl	898 <__aeabi_fadd>
    64ee:	465b      	mov	r3, fp
    64f0:	5158      	str	r0, [r3, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1374
	pthisSV->fPPlus12x12[5][5] +=  pthisSV->fQvMM;
    64f2:	3534      	adds	r5, #52	; 0x34
    64f4:	5959      	ldr	r1, [r3, r5]
    64f6:	1c20      	adds	r0, r4, #0
    64f8:	f7fa f9ce 	bl	898 <__aeabi_fadd>
    64fc:	465b      	mov	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1379

	// copy above diagonal elements of P+ (6x6 scratch sub-matrix) to below diagonal
	for (i = 1; i < 6; i++) 	
		for (j = 0; j < i; j++) 
			pthisSV->fPPlus12x12[i][j] = pthisSV->fPPlus12x12[j][i];
    64fe:	248e      	movs	r4, #142	; 0x8e
    6500:	465a      	mov	r2, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1374
	pthisSV->fPPlus12x12[0][0] +=  pthisSV->fQvAA;
	pthisSV->fPPlus12x12[1][1] +=  pthisSV->fQvAA;
	pthisSV->fPPlus12x12[2][2] +=  pthisSV->fQvAA;
	pthisSV->fPPlus12x12[3][3] +=  pthisSV->fQvMM;
	pthisSV->fPPlus12x12[4][4] +=  pthisSV->fQvMM;
	pthisSV->fPPlus12x12[5][5] +=  pthisSV->fQvMM;
    6502:	5158      	str	r0, [r3, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1379

	// copy above diagonal elements of P+ (6x6 scratch sub-matrix) to below diagonal
	for (i = 1; i < 6; i++) 	
		for (j = 0; j < i; j++) 
			pthisSV->fPPlus12x12[i][j] = pthisSV->fPPlus12x12[j][i];
    6504:	23a4      	movs	r3, #164	; 0xa4
    6506:	0064      	lsls	r4, r4, #1
    6508:	5911      	ldr	r1, [r2, r4]
    650a:	005b      	lsls	r3, r3, #1
    650c:	50d1      	str	r1, [r2, r3]
    650e:	3dfc      	subs	r5, #252	; 0xfc
    6510:	5951      	ldr	r1, [r2, r5]
    6512:	3330      	adds	r3, #48	; 0x30
    6514:	50d1      	str	r1, [r2, r3]
    6516:	4659      	mov	r1, fp
    6518:	3b28      	subs	r3, #40	; 0x28
    651a:	2792      	movs	r7, #146	; 0x92
    651c:	58d2      	ldr	r2, [r2, r3]
    651e:	332c      	adds	r3, #44	; 0x2c
    6520:	50ca      	str	r2, [r1, r3]
    6522:	465a      	mov	r2, fp
    6524:	007f      	lsls	r7, r7, #1
    6526:	59c9      	ldr	r1, [r1, r7]
    6528:	332c      	adds	r3, #44	; 0x2c
    652a:	50d1      	str	r1, [r2, r3]
    652c:	4659      	mov	r1, fp
    652e:	3b54      	subs	r3, #84	; 0x54
    6530:	58d2      	ldr	r2, [r2, r3]
    6532:	3358      	adds	r3, #88	; 0x58
    6534:	50ca      	str	r2, [r1, r3]
    6536:	3b28      	subs	r3, #40	; 0x28
    6538:	58ca      	ldr	r2, [r1, r3]
    653a:	332c      	adds	r3, #44	; 0x2c
    653c:	50ca      	str	r2, [r1, r3]
    653e:	3b88      	subs	r3, #136	; 0x88
    6540:	58ca      	ldr	r2, [r1, r3]
    6542:	33b0      	adds	r3, #176	; 0xb0
    6544:	50ca      	str	r2, [r1, r3]
    6546:	3b80      	subs	r3, #128	; 0x80
    6548:	58ca      	ldr	r2, [r1, r3]
    654a:	3384      	adds	r3, #132	; 0x84
    654c:	50ca      	str	r2, [r1, r3]
    654e:	3b54      	subs	r3, #84	; 0x54
    6550:	58ca      	ldr	r2, [r1, r3]
    6552:	3358      	adds	r3, #88	; 0x58
    6554:	50ca      	str	r2, [r1, r3]
    6556:	3b28      	subs	r3, #40	; 0x28
    6558:	58ca      	ldr	r2, [r1, r3]
    655a:	332c      	adds	r3, #44	; 0x2c
    655c:	50ca      	str	r2, [r1, r3]
    655e:	3324      	adds	r3, #36	; 0x24
    6560:	4698      	mov	r8, r3
    6562:	465a      	mov	r2, fp
    6564:	4641      	mov	r1, r8
    6566:	3bdc      	subs	r3, #220	; 0xdc
    6568:	58d3      	ldr	r3, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1386
	// calculate inverse of P+ (6x6 scratch sub-matrix) = inv(C * P- * C^T + Qv) = inv(C * Qw * C^T + Qv)
	for (i = 0; i < 6; i++)
	{
		pfRows[i] = pthisSV->fPPlus12x12[i];
	}
	fmatrixAeqInvA(pfRows, iColInd, iRowInd, iPivot, 3);
    656a:	a824      	add	r0, sp, #144	; 0x90
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1379
	pthisSV->fPPlus12x12[5][5] +=  pthisSV->fQvMM;

	// copy above diagonal elements of P+ (6x6 scratch sub-matrix) to below diagonal
	for (i = 1; i < 6; i++) 	
		for (j = 0; j < i; j++) 
			pthisSV->fPPlus12x12[i][j] = pthisSV->fPPlus12x12[j][i];
    656c:	5053      	str	r3, [r2, r1]
    656e:	2383      	movs	r3, #131	; 0x83
    6570:	009b      	lsls	r3, r3, #2
    6572:	4699      	mov	r9, r3
    6574:	4649      	mov	r1, r9
    6576:	3bb0      	subs	r3, #176	; 0xb0
    6578:	58d3      	ldr	r3, [r2, r3]
    657a:	5053      	str	r3, [r2, r1]
    657c:	2384      	movs	r3, #132	; 0x84
    657e:	009b      	lsls	r3, r3, #2
    6580:	469a      	mov	sl, r3
    6582:	4651      	mov	r1, sl
    6584:	3b84      	subs	r3, #132	; 0x84
    6586:	58d3      	ldr	r3, [r2, r3]
    6588:	5053      	str	r3, [r2, r1]
    658a:	23de      	movs	r3, #222	; 0xde
    658c:	4659      	mov	r1, fp
    658e:	005b      	lsls	r3, r3, #1
    6590:	58d2      	ldr	r2, [r2, r3]
    6592:	3358      	adds	r3, #88	; 0x58
    6594:	50ca      	str	r2, [r1, r3]
    6596:	3b28      	subs	r3, #40	; 0x28
    6598:	58ca      	ldr	r2, [r1, r3]
    659a:	332c      	adds	r3, #44	; 0x2c
    659c:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1384

	// calculate inverse of P+ (6x6 scratch sub-matrix) = inv(C * P- * C^T + Qv) = inv(C * Qw * C^T + Qv)
	for (i = 0; i < 6; i++)
	{
		pfRows[i] = pthisSV->fPPlus12x12[i];
    659e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1386
	}
	fmatrixAeqInvA(pfRows, iColInd, iRowInd, iPivot, 3);
    65a0:	a91b      	add	r1, sp, #108	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1384
			pthisSV->fPPlus12x12[i][j] = pthisSV->fPPlus12x12[j][i];

	// calculate inverse of P+ (6x6 scratch sub-matrix) = inv(C * P- * C^T + Qv) = inv(C * Qw * C^T + Qv)
	for (i = 0; i < 6; i++)
	{
		pfRows[i] = pthisSV->fPPlus12x12[i];
    65a2:	9324      	str	r3, [sp, #144]	; 0x90
    65a4:	23a4      	movs	r3, #164	; 0xa4
    65a6:	005b      	lsls	r3, r3, #1
    65a8:	445b      	add	r3, fp
    65aa:	9318      	str	r3, [sp, #96]	; 0x60
    65ac:	9325      	str	r3, [sp, #148]	; 0x94
    65ae:	3330      	adds	r3, #48	; 0x30
    65b0:	9326      	str	r3, [sp, #152]	; 0x98
    65b2:	23d4      	movs	r3, #212	; 0xd4
    65b4:	005b      	lsls	r3, r3, #1
    65b6:	445b      	add	r3, fp
    65b8:	9312      	str	r3, [sp, #72]	; 0x48
    65ba:	9327      	str	r3, [sp, #156]	; 0x9c
    65bc:	23ec      	movs	r3, #236	; 0xec
    65be:	005b      	lsls	r3, r3, #1
    65c0:	445b      	add	r3, fp
    65c2:	9319      	str	r3, [sp, #100]	; 0x64
    65c4:	9328      	str	r3, [sp, #160]	; 0xa0
    65c6:	4643      	mov	r3, r8
    65c8:	445b      	add	r3, fp
    65ca:	9329      	str	r3, [sp, #164]	; 0xa4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1386
	}
	fmatrixAeqInvA(pfRows, iColInd, iRowInd, iPivot, 3);
    65cc:	2303      	movs	r3, #3
    65ce:	aa1d      	add	r2, sp, #116	; 0x74
    65d0:	9300      	str	r3, [sp, #0]
    65d2:	ab1f      	add	r3, sp, #124	; 0x7c
    65d4:	f006 fbb4 	bl	cd40 <fmatrixAeqInvA>
    65d8:	230c      	movs	r3, #12
    65da:	9307      	str	r3, [sp, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1392

	// set K = P- * C^T * inv(C * P- * C^T + Qv) = Qw * C^T * inv(C * Qw * C^T + Qv)
	// = ftmpA12x6 * P+ (6x6 sub-matrix)
	// ftmpA12x6 = Qw * C^T is sparse but P+ (6x6 sub-matrix) is not
	// K is not symmetric because C is not symmetric
	for (i = 0; i < 12; i++) // loop over rows of K12x6
    65dc:	2300      	movs	r3, #0
    65de:	9306      	str	r3, [sp, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    65e0:	4643      	mov	r3, r8
    65e2:	930d      	str	r3, [sp, #52]	; 0x34
    65e4:	464b      	mov	r3, r9
    65e6:	9314      	str	r3, [sp, #80]	; 0x50
    65e8:	4653      	mov	r3, sl
    65ea:	950f      	str	r5, [sp, #60]	; 0x3c
    65ec:	465d      	mov	r5, fp
    65ee:	9613      	str	r6, [sp, #76]	; 0x4c
    65f0:	940e      	str	r4, [sp, #56]	; 0x38
    65f2:	9315      	str	r3, [sp, #84]	; 0x54
    65f4:	9710      	str	r7, [sp, #64]	; 0x40
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1395
	// ftmpA12x6 = Qw * C^T is sparse but P+ (6x6 sub-matrix) is not
	// K is not symmetric because C is not symmetric
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];
    65f6:	466b      	mov	r3, sp
    65f8:	7e1b      	ldrb	r3, [r3, #24]
    65fa:	2100      	movs	r1, #0
    65fc:	b25b      	sxtb	r3, r3
    65fe:	005a      	lsls	r2, r3, #1
    6600:	18d3      	adds	r3, r2, r3
    6602:	22d6      	movs	r2, #214	; 0xd6
    6604:	00db      	lsls	r3, r3, #3
    6606:	0092      	lsls	r2, r2, #2
    6608:	189c      	adds	r4, r3, r2
    660a:	aa2a      	add	r2, sp, #168	; 0xa8
    660c:	4694      	mov	ip, r2
    660e:	4463      	add	r3, ip
    6610:	681a      	ldr	r2, [r3, #0]
    6612:	685f      	ldr	r7, [r3, #4]
    6614:	4690      	mov	r8, r2
    6616:	68da      	ldr	r2, [r3, #12]
    6618:	689e      	ldr	r6, [r3, #8]
    661a:	9204      	str	r2, [sp, #16]
    661c:	691a      	ldr	r2, [r3, #16]
    661e:	695b      	ldr	r3, [r3, #20]
    6620:	4640      	mov	r0, r8
    6622:	192c      	adds	r4, r5, r4
    6624:	9202      	str	r2, [sp, #8]
    6626:	9303      	str	r3, [sp, #12]
    6628:	f7fa f908 	bl	83c <__aeabi_fcmpeq>
    662c:	2800      	cmp	r0, #0
    662e:	d072      	beq.n	6716 <fRun_9DOF_GBY_KALMAN+0xa0a>
    6630:	9803      	ldr	r0, [sp, #12]
    6632:	2100      	movs	r1, #0
    6634:	f7fa f902 	bl	83c <__aeabi_fcmpeq>
    6638:	2800      	cmp	r0, #0
    663a:	d100      	bne.n	663e <fRun_9DOF_GBY_KALMAN+0x932>
    663c:	e0ec      	b.n	6818 <fRun_9DOF_GBY_KALMAN+0xb0c>
    663e:	9802      	ldr	r0, [sp, #8]
    6640:	2100      	movs	r1, #0
    6642:	f7fa f8fb 	bl	83c <__aeabi_fcmpeq>
    6646:	2800      	cmp	r0, #0
    6648:	d101      	bne.n	664e <fRun_9DOF_GBY_KALMAN+0x942>
    664a:	f001 fb5e 	bl	7d0a <fRun_9DOF_GBY_KALMAN+0x1ffe>
    664e:	9804      	ldr	r0, [sp, #16]
    6650:	2100      	movs	r1, #0
    6652:	f7fa f8f3 	bl	83c <__aeabi_fcmpeq>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    6656:	2300      	movs	r3, #0
    6658:	6023      	str	r3, [r4, #0]
    665a:	2800      	cmp	r0, #0
    665c:	d101      	bne.n	6662 <fRun_9DOF_GBY_KALMAN+0x956>
    665e:	f001 feb4 	bl	83ca <PSP_CNFG_MQX_KERNEL_LOGGING+0x3ca>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6662:	1c38      	adds	r0, r7, #0
    6664:	1c19      	adds	r1, r3, #0
    6666:	f7fa f8e9 	bl	83c <__aeabi_fcmpeq>
    666a:	2800      	cmp	r0, #0
    666c:	d001      	beq.n	6672 <fRun_9DOF_GBY_KALMAN+0x966>
    666e:	f002 fe8c 	bl	938a <PSP_CNFG_MQX_KERNEL_LOGGING+0x138a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6672:	23a4      	movs	r3, #164	; 0xa4
    6674:	005b      	lsls	r3, r3, #1
    6676:	58e9      	ldr	r1, [r5, r3]
    6678:	1c38      	adds	r0, r7, #0
    667a:	f7fa fc7b 	bl	f74 <__aeabi_fmul>
    667e:	2100      	movs	r1, #0
    6680:	f7fa f90a 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6684:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6686:	4680      	mov	r8, r0
    6688:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    668a:	1c30      	adds	r0, r6, #0
    668c:	f7fa f8d6 	bl	83c <__aeabi_fcmpeq>
    6690:	2800      	cmp	r0, #0
    6692:	d101      	bne.n	6698 <fRun_9DOF_GBY_KALMAN+0x98c>
    6694:	f003 ff9e 	bl	a5d4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x25d4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    6698:	1d23      	adds	r3, r4, #4
    669a:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    669c:	2300      	movs	r3, #0
    669e:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    66a0:	238e      	movs	r3, #142	; 0x8e
    66a2:	005b      	lsls	r3, r3, #1
    66a4:	4698      	mov	r8, r3
    66a6:	44a8      	add	r8, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    66a8:	4643      	mov	r3, r8
    66aa:	1c38      	adds	r0, r7, #0
    66ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
    66ae:	f7fa fc61 	bl	f74 <__aeabi_fmul>
    66b2:	2100      	movs	r1, #0
    66b4:	f7fa f8f0 	bl	898 <__aeabi_fadd>
    66b8:	464b      	mov	r3, r9
    66ba:	1c04      	adds	r4, r0, #0
    66bc:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    66be:	2100      	movs	r1, #0
    66c0:	1c30      	adds	r0, r6, #0
    66c2:	f7fa f8bb 	bl	83c <__aeabi_fcmpeq>
    66c6:	2800      	cmp	r0, #0
    66c8:	d101      	bne.n	66ce <fRun_9DOF_GBY_KALMAN+0x9c2>
    66ca:	f002 fe77 	bl	93bc <PSP_CNFG_MQX_KERNEL_LOGGING+0x13bc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    66ce:	2304      	movs	r3, #4
    66d0:	444b      	add	r3, r9
    66d2:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    66d4:	2200      	movs	r2, #0
    66d6:	464b      	mov	r3, r9
    66d8:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    66da:	2390      	movs	r3, #144	; 0x90
    66dc:	005b      	lsls	r3, r3, #1
    66de:	4699      	mov	r9, r3
    66e0:	44a9      	add	r9, r5
    66e2:	f003 fba3 	bl	9e2c <PSP_CNFG_MQX_KERNEL_LOGGING+0x1e2c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1309
					if (*pfC6x12jk == 1.0F)
						*pftmpA12x6ij += *pfQw12x12ik;
					else if (*pfC6x12jk == -1.0F)
						*pftmpA12x6ij -= *pfQw12x12ik;
					else
						*pftmpA12x6ij += *pfQw12x12ik * *pfC6x12jk;
    66e6:	4649      	mov	r1, r9
    66e8:	1c28      	adds	r0, r5, #0
    66ea:	f7fa fc43 	bl	f74 <__aeabi_fmul>
    66ee:	4643      	mov	r3, r8
    66f0:	1c01      	adds	r1, r0, #0
    66f2:	6818      	ldr	r0, [r3, #0]
    66f4:	f7fa f8d0 	bl	898 <__aeabi_fadd>
    66f8:	4643      	mov	r3, r8
    66fa:	6018      	str	r0, [r3, #0]
    66fc:	e600      	b.n	6300 <fRun_9DOF_GBY_KALMAN+0x5f4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1353
					if (*pfC6x12ik == 1.0F)
						*pfPPlus12x12ij += *pftmpA12x6kj;
					else if (*pfC6x12ik == -1.0F)
						*pfPPlus12x12ij -= *pftmpA12x6kj;
					else
						*pfPPlus12x12ij += *pfC6x12ik * *pftmpA12x6kj;
    66fe:	4641      	mov	r1, r8
    6700:	1c30      	adds	r0, r6, #0
    6702:	f7fa fc37 	bl	f74 <__aeabi_fmul>
    6706:	464b      	mov	r3, r9
    6708:	1c01      	adds	r1, r0, #0
    670a:	6818      	ldr	r0, [r3, #0]
    670c:	f7fa f8c4 	bl	898 <__aeabi_fadd>
    6710:	464b      	mov	r3, r9
    6712:	6018      	str	r0, [r3, #0]
    6714:	e677      	b.n	6406 <fRun_9DOF_GBY_KALMAN+0x6fa>
    6716:	9803      	ldr	r0, [sp, #12]
    6718:	2100      	movs	r1, #0
    671a:	f7fa f88f 	bl	83c <__aeabi_fcmpeq>
    671e:	2800      	cmp	r0, #0
    6720:	d100      	bne.n	6724 <fRun_9DOF_GBY_KALMAN+0xa18>
    6722:	e0e3      	b.n	68ec <fRun_9DOF_GBY_KALMAN+0xbe0>
    6724:	9802      	ldr	r0, [sp, #8]
    6726:	2100      	movs	r1, #0
    6728:	f7fa f888 	bl	83c <__aeabi_fcmpeq>
    672c:	2800      	cmp	r0, #0
    672e:	d101      	bne.n	6734 <fRun_9DOF_GBY_KALMAN+0xa28>
    6730:	f001 f98a 	bl	7a48 <fRun_9DOF_GBY_KALMAN+0x1d3c>
    6734:	9804      	ldr	r0, [sp, #16]
    6736:	2100      	movs	r1, #0
    6738:	f7fa f880 	bl	83c <__aeabi_fcmpeq>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    673c:	2300      	movs	r3, #0
    673e:	6023      	str	r3, [r4, #0]
    6740:	2800      	cmp	r0, #0
    6742:	d101      	bne.n	6748 <fRun_9DOF_GBY_KALMAN+0xa3c>
    6744:	f002 f9d8 	bl	8af8 <PSP_CNFG_MQX_KERNEL_LOGGING+0xaf8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6748:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    674a:	4640      	mov	r0, r8
    674c:	58e9      	ldr	r1, [r5, r3]
    674e:	f7fa fc11 	bl	f74 <__aeabi_fmul>
    6752:	2100      	movs	r1, #0
    6754:	f7fa f8a0 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6758:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    675a:	4681      	mov	r9, r0
    675c:	4682      	mov	sl, r0
    675e:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6760:	1c38      	adds	r0, r7, #0
    6762:	f7fa f86b 	bl	83c <__aeabi_fcmpeq>
    6766:	2800      	cmp	r0, #0
    6768:	d001      	beq.n	676e <fRun_9DOF_GBY_KALMAN+0xa62>
    676a:	f002 fea3 	bl	94b4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x14b4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    676e:	23a4      	movs	r3, #164	; 0xa4
    6770:	005b      	lsls	r3, r3, #1
    6772:	58e9      	ldr	r1, [r5, r3]
    6774:	1c38      	adds	r0, r7, #0
    6776:	f7fa fbfd 	bl	f74 <__aeabi_fmul>
    677a:	1c01      	adds	r1, r0, #0
    677c:	4648      	mov	r0, r9
    677e:	f7fa f88b 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6782:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6784:	4682      	mov	sl, r0
    6786:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6788:	1c30      	adds	r0, r6, #0
    678a:	f7fa f857 	bl	83c <__aeabi_fcmpeq>
    678e:	2800      	cmp	r0, #0
    6790:	d101      	bne.n	6796 <fRun_9DOF_GBY_KALMAN+0xa8a>
    6792:	f003 fde1 	bl	a358 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2358>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    6796:	1d23      	adds	r3, r4, #4
    6798:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    679a:	2300      	movs	r3, #0
    679c:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    679e:	238e      	movs	r3, #142	; 0x8e
    67a0:	005b      	lsls	r3, r3, #1
    67a2:	469b      	mov	fp, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    67a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    67a6:	4640      	mov	r0, r8
    67a8:	58e9      	ldr	r1, [r5, r3]
    67aa:	f7fa fbe3 	bl	f74 <__aeabi_fmul>
    67ae:	2100      	movs	r1, #0
    67b0:	f7fa f872 	bl	898 <__aeabi_fadd>
    67b4:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    67b6:	44ab      	add	fp, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    67b8:	6060      	str	r0, [r4, #4]
    67ba:	465b      	mov	r3, fp
    67bc:	1c38      	adds	r0, r7, #0
    67be:	6b19      	ldr	r1, [r3, #48]	; 0x30
    67c0:	f7fa fbd8 	bl	f74 <__aeabi_fmul>
    67c4:	1c01      	adds	r1, r0, #0
    67c6:	4648      	mov	r0, r9
    67c8:	f7fa f866 	bl	898 <__aeabi_fadd>
    67cc:	4653      	mov	r3, sl
    67ce:	4681      	mov	r9, r0
    67d0:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    67d2:	2100      	movs	r1, #0
    67d4:	1c30      	adds	r0, r6, #0
    67d6:	f7fa f831 	bl	83c <__aeabi_fcmpeq>
    67da:	2800      	cmp	r0, #0
    67dc:	d101      	bne.n	67e2 <fRun_9DOF_GBY_KALMAN+0xad6>
    67de:	f003 fddf 	bl	a3a0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x23a0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    67e2:	2304      	movs	r3, #4
    67e4:	4453      	add	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    67e6:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    67e8:	469b      	mov	fp, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    67ea:	4653      	mov	r3, sl
    67ec:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    67ee:	2390      	movs	r3, #144	; 0x90
    67f0:	005b      	lsls	r3, r3, #1
    67f2:	469c      	mov	ip, r3
    67f4:	44ac      	add	ip, r5
    67f6:	4663      	mov	r3, ip
    67f8:	9302      	str	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    67fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    67fc:	4640      	mov	r0, r8
    67fe:	58e9      	ldr	r1, [r5, r3]
    6800:	f7fa fbb8 	bl	f74 <__aeabi_fmul>
    6804:	2100      	movs	r1, #0
    6806:	f7fa f847 	bl	898 <__aeabi_fadd>
    680a:	4653      	mov	r3, sl
    680c:	4681      	mov	r9, r0
    680e:	6058      	str	r0, [r3, #4]
    6810:	f002 fe8f 	bl	9532 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1532>
    6814:	bf800000 	.word	0xbf800000
    6818:	9802      	ldr	r0, [sp, #8]
    681a:	2100      	movs	r1, #0
    681c:	f7fa f80e 	bl	83c <__aeabi_fcmpeq>
    6820:	2800      	cmp	r0, #0
    6822:	d101      	bne.n	6828 <fRun_9DOF_GBY_KALMAN+0xb1c>
    6824:	f001 fad3 	bl	7dce <fRun_9DOF_GBY_KALMAN+0x20c2>
    6828:	9804      	ldr	r0, [sp, #16]
    682a:	2100      	movs	r1, #0
    682c:	f7fa f806 	bl	83c <__aeabi_fcmpeq>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    6830:	2300      	movs	r3, #0
    6832:	6023      	str	r3, [r4, #0]
    6834:	2800      	cmp	r0, #0
    6836:	d101      	bne.n	683c <fRun_9DOF_GBY_KALMAN+0xb30>
    6838:	f001 fe50 	bl	84dc <PSP_CNFG_MQX_KERNEL_LOGGING+0x4dc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    683c:	1c38      	adds	r0, r7, #0
    683e:	1c19      	adds	r1, r3, #0
    6840:	f7f9 fffc 	bl	83c <__aeabi_fcmpeq>
    6844:	2800      	cmp	r0, #0
    6846:	d001      	beq.n	684c <fRun_9DOF_GBY_KALMAN+0xb40>
    6848:	f002 fd3a 	bl	92c0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x12c0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    684c:	23a4      	movs	r3, #164	; 0xa4
    684e:	005b      	lsls	r3, r3, #1
    6850:	58e9      	ldr	r1, [r5, r3]
    6852:	1c38      	adds	r0, r7, #0
    6854:	f7fa fb8e 	bl	f74 <__aeabi_fmul>
    6858:	2100      	movs	r1, #0
    685a:	f7fa f81d 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    685e:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6860:	4680      	mov	r8, r0
    6862:	4681      	mov	r9, r0
    6864:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6866:	1c30      	adds	r0, r6, #0
    6868:	f7f9 ffe8 	bl	83c <__aeabi_fcmpeq>
    686c:	2800      	cmp	r0, #0
    686e:	d101      	bne.n	6874 <fRun_9DOF_GBY_KALMAN+0xb68>
    6870:	f003 fbf9 	bl	a066 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2066>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6876:	9803      	ldr	r0, [sp, #12]
    6878:	58e9      	ldr	r1, [r5, r3]
    687a:	f7fa fb7b 	bl	f74 <__aeabi_fmul>
    687e:	1c01      	adds	r1, r0, #0
    6880:	4640      	mov	r0, r8
    6882:	f7fa f809 	bl	898 <__aeabi_fadd>
    6886:	1c23      	adds	r3, r4, #0
    6888:	c301      	stmia	r3!, {r0}
    688a:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    688c:	2300      	movs	r3, #0
    688e:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    6890:	238e      	movs	r3, #142	; 0x8e
    6892:	005b      	lsls	r3, r3, #1
    6894:	469a      	mov	sl, r3
    6896:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6898:	4653      	mov	r3, sl
    689a:	1c38      	adds	r0, r7, #0
    689c:	6b19      	ldr	r1, [r3, #48]	; 0x30
    689e:	f7fa fb69 	bl	f74 <__aeabi_fmul>
    68a2:	2100      	movs	r1, #0
    68a4:	f7f9 fff8 	bl	898 <__aeabi_fadd>
    68a8:	4643      	mov	r3, r8
    68aa:	1c04      	adds	r4, r0, #0
    68ac:	4681      	mov	r9, r0
    68ae:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    68b0:	2100      	movs	r1, #0
    68b2:	1c30      	adds	r0, r6, #0
    68b4:	f7f9 ffc2 	bl	83c <__aeabi_fcmpeq>
    68b8:	2800      	cmp	r0, #0
    68ba:	d101      	bne.n	68c0 <fRun_9DOF_GBY_KALMAN+0xbb4>
    68bc:	f003 fbfa 	bl	a0b4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x20b4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    68c0:	4652      	mov	r2, sl
    68c2:	23f0      	movs	r3, #240	; 0xf0
    68c4:	9803      	ldr	r0, [sp, #12]
    68c6:	58d1      	ldr	r1, [r2, r3]
    68c8:	f7fa fb54 	bl	f74 <__aeabi_fmul>
    68cc:	1c01      	adds	r1, r0, #0
    68ce:	1c20      	adds	r0, r4, #0
    68d0:	f7f9 ffe2 	bl	898 <__aeabi_fadd>
    68d4:	4643      	mov	r3, r8
    68d6:	c301      	stmia	r3!, {r0}
    68d8:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    68da:	2200      	movs	r2, #0
    68dc:	4643      	mov	r3, r8
    68de:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    68e0:	2390      	movs	r3, #144	; 0x90
    68e2:	005b      	lsls	r3, r3, #1
    68e4:	469a      	mov	sl, r3
    68e6:	44aa      	add	sl, r5
    68e8:	f002 fd25 	bl	9336 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1336>
    68ec:	9802      	ldr	r0, [sp, #8]
    68ee:	2100      	movs	r1, #0
    68f0:	f7f9 ffa4 	bl	83c <__aeabi_fcmpeq>
    68f4:	2800      	cmp	r0, #0
    68f6:	d101      	bne.n	68fc <fRun_9DOF_GBY_KALMAN+0xbf0>
    68f8:	f001 f82d 	bl	7956 <fRun_9DOF_GBY_KALMAN+0x1c4a>
    68fc:	9804      	ldr	r0, [sp, #16]
    68fe:	2100      	movs	r1, #0
    6900:	f7f9 ff9c 	bl	83c <__aeabi_fcmpeq>
    6904:	2800      	cmp	r0, #0
    6906:	d101      	bne.n	690c <fRun_9DOF_GBY_KALMAN+0xc00>
    6908:	f002 fa4d 	bl	8da6 <PSP_CNFG_MQX_KERNEL_LOGGING+0xda6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    690c:	2300      	movs	r3, #0
    690e:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6910:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6912:	4640      	mov	r0, r8
    6914:	58e9      	ldr	r1, [r5, r3]
    6916:	f7fa fb2d 	bl	f74 <__aeabi_fmul>
    691a:	2100      	movs	r1, #0
    691c:	f7f9 ffbc 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6920:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6922:	4681      	mov	r9, r0
    6924:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6926:	1c38      	adds	r0, r7, #0
    6928:	f7f9 ff88 	bl	83c <__aeabi_fcmpeq>
    692c:	2800      	cmp	r0, #0
    692e:	d10b      	bne.n	6948 <fRun_9DOF_GBY_KALMAN+0xc3c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6930:	23a4      	movs	r3, #164	; 0xa4
    6932:	005b      	lsls	r3, r3, #1
    6934:	58e9      	ldr	r1, [r5, r3]
    6936:	1c38      	adds	r0, r7, #0
    6938:	f7fa fb1c 	bl	f74 <__aeabi_fmul>
    693c:	1c01      	adds	r1, r0, #0
    693e:	4648      	mov	r0, r9
    6940:	f7f9 ffaa 	bl	898 <__aeabi_fadd>
    6944:	4681      	mov	r9, r0
    6946:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6948:	1c30      	adds	r0, r6, #0
    694a:	2100      	movs	r1, #0
    694c:	f7f9 ff76 	bl	83c <__aeabi_fcmpeq>
    6950:	2800      	cmp	r0, #0
    6952:	d10b      	bne.n	696c <fRun_9DOF_GBY_KALMAN+0xc60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6954:	23bc      	movs	r3, #188	; 0xbc
    6956:	005b      	lsls	r3, r3, #1
    6958:	58e9      	ldr	r1, [r5, r3]
    695a:	1c30      	adds	r0, r6, #0
    695c:	f7fa fb0a 	bl	f74 <__aeabi_fmul>
    6960:	1c01      	adds	r1, r0, #0
    6962:	4648      	mov	r0, r9
    6964:	f7f9 ff98 	bl	898 <__aeabi_fadd>
    6968:	4681      	mov	r9, r0
    696a:	6020      	str	r0, [r4, #0]
    696c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    696e:	9803      	ldr	r0, [sp, #12]
    6970:	58e9      	ldr	r1, [r5, r3]
    6972:	f7fa faff 	bl	f74 <__aeabi_fmul>
    6976:	4649      	mov	r1, r9
    6978:	f7f9 ff8e 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    697c:	2300      	movs	r3, #0
    697e:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6980:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6982:	6020      	str	r0, [r4, #0]
    6984:	58e9      	ldr	r1, [r5, r3]
    6986:	4640      	mov	r0, r8
    6988:	f7fa faf4 	bl	f74 <__aeabi_fmul>
    698c:	2100      	movs	r1, #0
    698e:	f7f9 ff83 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6992:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6994:	4681      	mov	r9, r0
    6996:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6998:	1c38      	adds	r0, r7, #0
    699a:	f7f9 ff4f 	bl	83c <__aeabi_fcmpeq>
    699e:	2800      	cmp	r0, #0
    69a0:	d10b      	bne.n	69ba <fRun_9DOF_GBY_KALMAN+0xcae>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    69a2:	23a6      	movs	r3, #166	; 0xa6
    69a4:	005b      	lsls	r3, r3, #1
    69a6:	58e9      	ldr	r1, [r5, r3]
    69a8:	1c38      	adds	r0, r7, #0
    69aa:	f7fa fae3 	bl	f74 <__aeabi_fmul>
    69ae:	1c01      	adds	r1, r0, #0
    69b0:	4648      	mov	r0, r9
    69b2:	f7f9 ff71 	bl	898 <__aeabi_fadd>
    69b6:	4681      	mov	r9, r0
    69b8:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    69ba:	1c30      	adds	r0, r6, #0
    69bc:	2100      	movs	r1, #0
    69be:	f7f9 ff3d 	bl	83c <__aeabi_fcmpeq>
    69c2:	2800      	cmp	r0, #0
    69c4:	d10b      	bne.n	69de <fRun_9DOF_GBY_KALMAN+0xcd2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    69c6:	23be      	movs	r3, #190	; 0xbe
    69c8:	005b      	lsls	r3, r3, #1
    69ca:	58e9      	ldr	r1, [r5, r3]
    69cc:	1c30      	adds	r0, r6, #0
    69ce:	f7fa fad1 	bl	f74 <__aeabi_fmul>
    69d2:	1c01      	adds	r1, r0, #0
    69d4:	4648      	mov	r0, r9
    69d6:	f7f9 ff5f 	bl	898 <__aeabi_fadd>
    69da:	4681      	mov	r9, r0
    69dc:	6060      	str	r0, [r4, #4]
    69de:	9b14      	ldr	r3, [sp, #80]	; 0x50
    69e0:	9803      	ldr	r0, [sp, #12]
    69e2:	58e9      	ldr	r1, [r5, r3]
    69e4:	f7fa fac6 	bl	f74 <__aeabi_fmul>
    69e8:	4649      	mov	r1, r9
    69ea:	f7f9 ff55 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    69ee:	2300      	movs	r3, #0
    69f0:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    69f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    69f4:	6060      	str	r0, [r4, #4]
    69f6:	58e9      	ldr	r1, [r5, r3]
    69f8:	4640      	mov	r0, r8
    69fa:	f7fa fabb 	bl	f74 <__aeabi_fmul>
    69fe:	2100      	movs	r1, #0
    6a00:	f7f9 ff4a 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6a04:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6a06:	4681      	mov	r9, r0
    6a08:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6a0a:	1c38      	adds	r0, r7, #0
    6a0c:	f7f9 ff16 	bl	83c <__aeabi_fcmpeq>
    6a10:	2800      	cmp	r0, #0
    6a12:	d10b      	bne.n	6a2c <fRun_9DOF_GBY_KALMAN+0xd20>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6a14:	23a8      	movs	r3, #168	; 0xa8
    6a16:	005b      	lsls	r3, r3, #1
    6a18:	58e9      	ldr	r1, [r5, r3]
    6a1a:	1c38      	adds	r0, r7, #0
    6a1c:	f7fa faaa 	bl	f74 <__aeabi_fmul>
    6a20:	1c01      	adds	r1, r0, #0
    6a22:	4648      	mov	r0, r9
    6a24:	f7f9 ff38 	bl	898 <__aeabi_fadd>
    6a28:	4681      	mov	r9, r0
    6a2a:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6a2c:	1c30      	adds	r0, r6, #0
    6a2e:	2100      	movs	r1, #0
    6a30:	f7f9 ff04 	bl	83c <__aeabi_fcmpeq>
    6a34:	2800      	cmp	r0, #0
    6a36:	d10b      	bne.n	6a50 <fRun_9DOF_GBY_KALMAN+0xd44>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6a38:	23c0      	movs	r3, #192	; 0xc0
    6a3a:	005b      	lsls	r3, r3, #1
    6a3c:	58e9      	ldr	r1, [r5, r3]
    6a3e:	1c30      	adds	r0, r6, #0
    6a40:	f7fa fa98 	bl	f74 <__aeabi_fmul>
    6a44:	1c01      	adds	r1, r0, #0
    6a46:	4648      	mov	r0, r9
    6a48:	f7f9 ff26 	bl	898 <__aeabi_fadd>
    6a4c:	4681      	mov	r9, r0
    6a4e:	60a0      	str	r0, [r4, #8]
    6a50:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6a52:	9803      	ldr	r0, [sp, #12]
    6a54:	58e9      	ldr	r1, [r5, r3]
    6a56:	f7fa fa8d 	bl	f74 <__aeabi_fmul>
    6a5a:	4649      	mov	r1, r9
    6a5c:	f7f9 ff1c 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    6a60:	2300      	movs	r3, #0
    6a62:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6a64:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6a66:	60a0      	str	r0, [r4, #8]
    6a68:	58e9      	ldr	r1, [r5, r3]
    6a6a:	4640      	mov	r0, r8
    6a6c:	f7fa fa82 	bl	f74 <__aeabi_fmul>
    6a70:	2100      	movs	r1, #0
    6a72:	f7f9 ff11 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6a76:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6a78:	4681      	mov	r9, r0
    6a7a:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6a7c:	1c38      	adds	r0, r7, #0
    6a7e:	f7f9 fedd 	bl	83c <__aeabi_fcmpeq>
    6a82:	2800      	cmp	r0, #0
    6a84:	d10b      	bne.n	6a9e <fRun_9DOF_GBY_KALMAN+0xd92>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6a86:	23aa      	movs	r3, #170	; 0xaa
    6a88:	005b      	lsls	r3, r3, #1
    6a8a:	58e9      	ldr	r1, [r5, r3]
    6a8c:	1c38      	adds	r0, r7, #0
    6a8e:	f7fa fa71 	bl	f74 <__aeabi_fmul>
    6a92:	1c01      	adds	r1, r0, #0
    6a94:	4648      	mov	r0, r9
    6a96:	f7f9 feff 	bl	898 <__aeabi_fadd>
    6a9a:	4681      	mov	r9, r0
    6a9c:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6a9e:	1c30      	adds	r0, r6, #0
    6aa0:	2100      	movs	r1, #0
    6aa2:	f7f9 fecb 	bl	83c <__aeabi_fcmpeq>
    6aa6:	2800      	cmp	r0, #0
    6aa8:	d10b      	bne.n	6ac2 <fRun_9DOF_GBY_KALMAN+0xdb6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6aaa:	23c2      	movs	r3, #194	; 0xc2
    6aac:	005b      	lsls	r3, r3, #1
    6aae:	58e9      	ldr	r1, [r5, r3]
    6ab0:	1c30      	adds	r0, r6, #0
    6ab2:	f7fa fa5f 	bl	f74 <__aeabi_fmul>
    6ab6:	1c01      	adds	r1, r0, #0
    6ab8:	4648      	mov	r0, r9
    6aba:	f7f9 feed 	bl	898 <__aeabi_fadd>
    6abe:	4681      	mov	r9, r0
    6ac0:	60e0      	str	r0, [r4, #12]
    6ac2:	2385      	movs	r3, #133	; 0x85
    6ac4:	009b      	lsls	r3, r3, #2
    6ac6:	58e9      	ldr	r1, [r5, r3]
    6ac8:	9803      	ldr	r0, [sp, #12]
    6aca:	f7fa fa53 	bl	f74 <__aeabi_fmul>
    6ace:	4649      	mov	r1, r9
    6ad0:	f7f9 fee2 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    6ad4:	2300      	movs	r3, #0
    6ad6:	6123      	str	r3, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6ad8:	2394      	movs	r3, #148	; 0x94
    6ada:	60e0      	str	r0, [r4, #12]
    6adc:	005b      	lsls	r3, r3, #1
    6ade:	58e9      	ldr	r1, [r5, r3]
    6ae0:	4640      	mov	r0, r8
    6ae2:	f7fa fa47 	bl	f74 <__aeabi_fmul>
    6ae6:	2100      	movs	r1, #0
    6ae8:	f7f9 fed6 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6aec:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6aee:	4681      	mov	r9, r0
    6af0:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6af2:	1c38      	adds	r0, r7, #0
    6af4:	f7f9 fea2 	bl	83c <__aeabi_fcmpeq>
    6af8:	2800      	cmp	r0, #0
    6afa:	d10b      	bne.n	6b14 <fRun_9DOF_GBY_KALMAN+0xe08>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6afc:	23ac      	movs	r3, #172	; 0xac
    6afe:	005b      	lsls	r3, r3, #1
    6b00:	58e9      	ldr	r1, [r5, r3]
    6b02:	1c38      	adds	r0, r7, #0
    6b04:	f7fa fa36 	bl	f74 <__aeabi_fmul>
    6b08:	1c01      	adds	r1, r0, #0
    6b0a:	4648      	mov	r0, r9
    6b0c:	f7f9 fec4 	bl	898 <__aeabi_fadd>
    6b10:	4681      	mov	r9, r0
    6b12:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6b14:	1c30      	adds	r0, r6, #0
    6b16:	2100      	movs	r1, #0
    6b18:	f7f9 fe90 	bl	83c <__aeabi_fcmpeq>
    6b1c:	2800      	cmp	r0, #0
    6b1e:	d10b      	bne.n	6b38 <fRun_9DOF_GBY_KALMAN+0xe2c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6b20:	23c4      	movs	r3, #196	; 0xc4
    6b22:	005b      	lsls	r3, r3, #1
    6b24:	58e9      	ldr	r1, [r5, r3]
    6b26:	1c30      	adds	r0, r6, #0
    6b28:	f7fa fa24 	bl	f74 <__aeabi_fmul>
    6b2c:	1c01      	adds	r1, r0, #0
    6b2e:	4648      	mov	r0, r9
    6b30:	f7f9 feb2 	bl	898 <__aeabi_fadd>
    6b34:	4681      	mov	r9, r0
    6b36:	6120      	str	r0, [r4, #16]
    6b38:	2386      	movs	r3, #134	; 0x86
    6b3a:	009b      	lsls	r3, r3, #2
    6b3c:	58e9      	ldr	r1, [r5, r3]
    6b3e:	9803      	ldr	r0, [sp, #12]
    6b40:	f7fa fa18 	bl	f74 <__aeabi_fmul>
    6b44:	4649      	mov	r1, r9
    6b46:	f7f9 fea7 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    6b4a:	2300      	movs	r3, #0
    6b4c:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6b4e:	2396      	movs	r3, #150	; 0x96
    6b50:	6120      	str	r0, [r4, #16]
    6b52:	005b      	lsls	r3, r3, #1
    6b54:	58e9      	ldr	r1, [r5, r3]
    6b56:	4640      	mov	r0, r8
    6b58:	f7fa fa0c 	bl	f74 <__aeabi_fmul>
    6b5c:	2100      	movs	r1, #0
    6b5e:	f7f9 fe9b 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6b62:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6b64:	4680      	mov	r8, r0
    6b66:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6b68:	1c38      	adds	r0, r7, #0
    6b6a:	f7f9 fe67 	bl	83c <__aeabi_fcmpeq>
    6b6e:	2800      	cmp	r0, #0
    6b70:	d10b      	bne.n	6b8a <fRun_9DOF_GBY_KALMAN+0xe7e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6b72:	23ae      	movs	r3, #174	; 0xae
    6b74:	005b      	lsls	r3, r3, #1
    6b76:	58e9      	ldr	r1, [r5, r3]
    6b78:	1c38      	adds	r0, r7, #0
    6b7a:	f7fa f9fb 	bl	f74 <__aeabi_fmul>
    6b7e:	1c01      	adds	r1, r0, #0
    6b80:	4640      	mov	r0, r8
    6b82:	f7f9 fe89 	bl	898 <__aeabi_fadd>
    6b86:	4680      	mov	r8, r0
    6b88:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6b8a:	1c30      	adds	r0, r6, #0
    6b8c:	2100      	movs	r1, #0
    6b8e:	f7f9 fe55 	bl	83c <__aeabi_fcmpeq>
    6b92:	2800      	cmp	r0, #0
    6b94:	d101      	bne.n	6b9a <fRun_9DOF_GBY_KALMAN+0xe8e>
    6b96:	f002 fb85 	bl	92a4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x12a4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6b9a:	2387      	movs	r3, #135	; 0x87
    6b9c:	9803      	ldr	r0, [sp, #12]
    6b9e:	009b      	lsls	r3, r3, #2
    6ba0:	58e9      	ldr	r1, [r5, r3]
    6ba2:	f7fa f9e7 	bl	f74 <__aeabi_fmul>
    6ba6:	4641      	mov	r1, r8
    6ba8:	f7f9 fe76 	bl	898 <__aeabi_fadd>
    6bac:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1392 (discriminator 2)

	// set K = P- * C^T * inv(C * P- * C^T + Qv) = Qw * C^T * inv(C * Qw * C^T + Qv)
	// = ftmpA12x6 * P+ (6x6 sub-matrix)
	// ftmpA12x6 = Qw * C^T is sparse but P+ (6x6 sub-matrix) is not
	// K is not symmetric because C is not symmetric
	for (i = 0; i < 12; i++) // loop over rows of K12x6
    6bae:	9b06      	ldr	r3, [sp, #24]
    6bb0:	3301      	adds	r3, #1
    6bb2:	b2db      	uxtb	r3, r3
    6bb4:	9306      	str	r3, [sp, #24]
    6bb6:	9b07      	ldr	r3, [sp, #28]
    6bb8:	3b01      	subs	r3, #1
    6bba:	b2db      	uxtb	r3, r3
    6bbc:	9307      	str	r3, [sp, #28]
    6bbe:	2b00      	cmp	r3, #0
    6bc0:	d000      	beq.n	6bc4 <fRun_9DOF_GBY_KALMAN+0xeb8>
    6bc2:	e518      	b.n	65f6 <fRun_9DOF_GBY_KALMAN+0x8ea>
    6bc4:	1c2a      	adds	r2, r5, #0
    6bc6:	33d4      	adds	r3, #212	; 0xd4
    6bc8:	46ab      	mov	fp, r5
    6bca:	58ed      	ldr	r5, [r5, r3]
    6bcc:	3304      	adds	r3, #4
    6bce:	58d4      	ldr	r4, [r2, r3]
    6bd0:	3304      	adds	r3, #4
    6bd2:	58d7      	ldr	r7, [r2, r3]
    6bd4:	3304      	adds	r3, #4
    6bd6:	58d3      	ldr	r3, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    6bd8:	1c28      	adds	r0, r5, #0
    6bda:	4698      	mov	r8, r3
    6bdc:	23e4      	movs	r3, #228	; 0xe4
    6bde:	58d3      	ldr	r3, [r2, r3]
    6be0:	4699      	mov	r9, r3
    6be2:	23e8      	movs	r3, #232	; 0xe8
    6be4:	58d3      	ldr	r3, [r2, r3]
    6be6:	469a      	mov	sl, r3
    6be8:	23d6      	movs	r3, #214	; 0xd6
    6bea:	009b      	lsls	r3, r3, #2
    6bec:	58d1      	ldr	r1, [r2, r3]
    6bee:	f7fa f9c1 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    6bf2:	23d7      	movs	r3, #215	; 0xd7
    6bf4:	465a      	mov	r2, fp
    6bf6:	009b      	lsls	r3, r3, #2
    6bf8:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    6bfa:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    6bfc:	1c20      	adds	r0, r4, #0
    6bfe:	f7fa f9b9 	bl	f74 <__aeabi_fmul>
    6c02:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    6c04:	1c30      	adds	r0, r6, #0
    6c06:	f7f9 fe47 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1438
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
    6c0a:	23d8      	movs	r3, #216	; 0xd8
    6c0c:	465a      	mov	r2, fp
    6c0e:	009b      	lsls	r3, r3, #2
    6c10:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    6c12:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1438
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
    6c14:	1c38      	adds	r0, r7, #0
    6c16:	f7fa f9ad 	bl	f74 <__aeabi_fmul>
    6c1a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    6c1c:	1c30      	adds	r0, r6, #0
    6c1e:	f7f9 fe3b 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    6c22:	465b      	mov	r3, fp
    6c24:	6718      	str	r0, [r3, #112]	; 0x70
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    6c26:	23e8      	movs	r3, #232	; 0xe8
    6c28:	465a      	mov	r2, fp
    6c2a:	009b      	lsls	r3, r3, #2
    6c2c:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    6c2e:	9002      	str	r0, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    6c30:	1c28      	adds	r0, r5, #0
    6c32:	f7fa f99f 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    6c36:	23e9      	movs	r3, #233	; 0xe9
    6c38:	465a      	mov	r2, fp
    6c3a:	009b      	lsls	r3, r3, #2
    6c3c:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    6c3e:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    6c40:	1c20      	adds	r0, r4, #0
    6c42:	f7fa f997 	bl	f74 <__aeabi_fmul>
    6c46:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    6c48:	1c30      	adds	r0, r6, #0
    6c4a:	f7f9 fe25 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1441
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
    6c4e:	23ea      	movs	r3, #234	; 0xea
    6c50:	465a      	mov	r2, fp
    6c52:	009b      	lsls	r3, r3, #2
    6c54:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    6c56:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1441
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
    6c58:	1c38      	adds	r0, r7, #0
    6c5a:	f7fa f98b 	bl	f74 <__aeabi_fmul>
    6c5e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    6c60:	1c30      	adds	r0, r6, #0
    6c62:	f7f9 fe19 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    6c66:	465b      	mov	r3, fp
    6c68:	67d8      	str	r0, [r3, #124]	; 0x7c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    6c6a:	23fa      	movs	r3, #250	; 0xfa
    6c6c:	465a      	mov	r2, fp
    6c6e:	009b      	lsls	r3, r3, #2
    6c70:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    6c72:	9003      	str	r0, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    6c74:	1c28      	adds	r0, r5, #0
    6c76:	f7fa f97d 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    6c7a:	23fb      	movs	r3, #251	; 0xfb
    6c7c:	465a      	mov	r2, fp
    6c7e:	009b      	lsls	r3, r3, #2
    6c80:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    6c82:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    6c84:	1c20      	adds	r0, r4, #0
    6c86:	f7fa f975 	bl	f74 <__aeabi_fmul>
    6c8a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    6c8c:	1c30      	adds	r0, r6, #0
    6c8e:	f7f9 fe03 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1444
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
    6c92:	23fc      	movs	r3, #252	; 0xfc
    6c94:	465a      	mov	r2, fp
    6c96:	009b      	lsls	r3, r3, #2
    6c98:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    6c9a:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1444
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
    6c9c:	1c38      	adds	r0, r7, #0
    6c9e:	f7fa f969 	bl	f74 <__aeabi_fmul>
    6ca2:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    6ca4:	1c30      	adds	r0, r6, #0
    6ca6:	f7f9 fdf7 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    6caa:	465b      	mov	r3, fp
    6cac:	22a0      	movs	r2, #160	; 0xa0
    6cae:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6cb0:	2386      	movs	r3, #134	; 0x86
    6cb2:	465a      	mov	r2, fp
    6cb4:	00db      	lsls	r3, r3, #3
    6cb6:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    6cb8:	9004      	str	r0, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6cba:	1c28      	adds	r0, r5, #0
    6cbc:	f7fa f95a 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    6cc0:	465a      	mov	r2, fp
    6cc2:	4bfe      	ldr	r3, [pc, #1016]	; (70bc <fRun_9DOF_GBY_KALMAN+0x13b0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6cc4:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    6cc6:	58d1      	ldr	r1, [r2, r3]
    6cc8:	1c20      	adds	r0, r4, #0
    6cca:	f7fa f953 	bl	f74 <__aeabi_fmul>
    6cce:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6cd0:	1c30      	adds	r0, r6, #0
    6cd2:	f7f9 fde1 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    6cd6:	2387      	movs	r3, #135	; 0x87
    6cd8:	465a      	mov	r2, fp
    6cda:	00db      	lsls	r3, r3, #3
    6cdc:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6cde:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    6ce0:	1c38      	adds	r0, r7, #0
    6ce2:	f7fa f947 	bl	f74 <__aeabi_fmul>
    6ce6:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    6ce8:	1c30      	adds	r0, r6, #0
    6cea:	f7f9 fdd5 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    6cee:	465a      	mov	r2, fp
    6cf0:	4bf3      	ldr	r3, [pc, #972]	; (70c0 <fRun_9DOF_GBY_KALMAN+0x13b4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    6cf2:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    6cf4:	58d1      	ldr	r1, [r2, r3]
    6cf6:	4640      	mov	r0, r8
    6cf8:	f7fa f93c 	bl	f74 <__aeabi_fmul>
    6cfc:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    6cfe:	1c30      	adds	r0, r6, #0
    6d00:	f7f9 fdca 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    6d04:	2388      	movs	r3, #136	; 0x88
    6d06:	465a      	mov	r2, fp
    6d08:	00db      	lsls	r3, r3, #3
    6d0a:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    6d0c:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    6d0e:	4648      	mov	r0, r9
    6d10:	f7fa f930 	bl	f74 <__aeabi_fmul>
    6d14:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    6d16:	1c30      	adds	r0, r6, #0
    6d18:	f7f9 fdbe 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1450
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
    6d1c:	465a      	mov	r2, fp
    6d1e:	4be9      	ldr	r3, [pc, #932]	; (70c4 <fRun_9DOF_GBY_KALMAN+0x13b8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    6d20:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1450
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
    6d22:	58d1      	ldr	r1, [r2, r3]
    6d24:	4650      	mov	r0, sl
    6d26:	f7fa f925 	bl	f74 <__aeabi_fmul>
    6d2a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    6d2c:	1c30      	adds	r0, r6, #0
    6d2e:	f7f9 fdb3 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6d32:	465a      	mov	r2, fp
    6d34:	2394      	movs	r3, #148	; 0x94
    6d36:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    6d38:	23dc      	movs	r3, #220	; 0xdc
    6d3a:	009b      	lsls	r3, r3, #2
    6d3c:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    6d3e:	9006      	str	r0, [sp, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    6d40:	1c28      	adds	r0, r5, #0
    6d42:	f7fa f917 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    6d46:	23dd      	movs	r3, #221	; 0xdd
    6d48:	465a      	mov	r2, fp
    6d4a:	009b      	lsls	r3, r3, #2
    6d4c:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    6d4e:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    6d50:	1c20      	adds	r0, r4, #0
    6d52:	f7fa f90f 	bl	f74 <__aeabi_fmul>
    6d56:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    6d58:	1c30      	adds	r0, r6, #0
    6d5a:	f7f9 fd9d 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1438
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
    6d5e:	23de      	movs	r3, #222	; 0xde
    6d60:	465a      	mov	r2, fp
    6d62:	009b      	lsls	r3, r3, #2
    6d64:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    6d66:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1438
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
    6d68:	1c38      	adds	r0, r7, #0
    6d6a:	f7fa f903 	bl	f74 <__aeabi_fmul>
    6d6e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    6d70:	1c30      	adds	r0, r6, #0
    6d72:	f7f9 fd91 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    6d76:	465b      	mov	r3, fp
    6d78:	6758      	str	r0, [r3, #116]	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    6d7a:	23ee      	movs	r3, #238	; 0xee
    6d7c:	465a      	mov	r2, fp
    6d7e:	009b      	lsls	r3, r3, #2
    6d80:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    6d82:	9007      	str	r0, [sp, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    6d84:	1c28      	adds	r0, r5, #0
    6d86:	f7fa f8f5 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    6d8a:	23ef      	movs	r3, #239	; 0xef
    6d8c:	465a      	mov	r2, fp
    6d8e:	009b      	lsls	r3, r3, #2
    6d90:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    6d92:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    6d94:	1c20      	adds	r0, r4, #0
    6d96:	f7fa f8ed 	bl	f74 <__aeabi_fmul>
    6d9a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    6d9c:	1c30      	adds	r0, r6, #0
    6d9e:	f7f9 fd7b 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1441
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
    6da2:	23f0      	movs	r3, #240	; 0xf0
    6da4:	465a      	mov	r2, fp
    6da6:	009b      	lsls	r3, r3, #2
    6da8:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    6daa:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1441
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
    6dac:	1c38      	adds	r0, r7, #0
    6dae:	f7fa f8e1 	bl	f74 <__aeabi_fmul>
    6db2:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    6db4:	1c30      	adds	r0, r6, #0
    6db6:	f7f9 fd6f 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    6dba:	465b      	mov	r3, fp
    6dbc:	2280      	movs	r2, #128	; 0x80
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    6dbe:	900d      	str	r0, [sp, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    6dc0:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    6dc2:	2380      	movs	r3, #128	; 0x80
    6dc4:	465a      	mov	r2, fp
    6dc6:	00db      	lsls	r3, r3, #3
    6dc8:	58d1      	ldr	r1, [r2, r3]
    6dca:	1c28      	adds	r0, r5, #0
    6dcc:	f7fa f8d2 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    6dd0:	465a      	mov	r2, fp
    6dd2:	4bbd      	ldr	r3, [pc, #756]	; (70c8 <fRun_9DOF_GBY_KALMAN+0x13bc>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    6dd4:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    6dd6:	58d1      	ldr	r1, [r2, r3]
    6dd8:	1c20      	adds	r0, r4, #0
    6dda:	f7fa f8cb 	bl	f74 <__aeabi_fmul>
    6dde:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    6de0:	1c30      	adds	r0, r6, #0
    6de2:	f7f9 fd59 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1444
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
    6de6:	2381      	movs	r3, #129	; 0x81
    6de8:	465a      	mov	r2, fp
    6dea:	00db      	lsls	r3, r3, #3
    6dec:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    6dee:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1444
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
    6df0:	1c38      	adds	r0, r7, #0
    6df2:	f7fa f8bf 	bl	f74 <__aeabi_fmul>
    6df6:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    6df8:	1c30      	adds	r0, r6, #0
    6dfa:	f7f9 fd4d 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    6dfe:	465b      	mov	r3, fp
    6e00:	22a4      	movs	r2, #164	; 0xa4
    6e02:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6e04:	2389      	movs	r3, #137	; 0x89
    6e06:	465a      	mov	r2, fp
    6e08:	00db      	lsls	r3, r3, #3
    6e0a:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    6e0c:	900e      	str	r0, [sp, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6e0e:	1c28      	adds	r0, r5, #0
    6e10:	f7fa f8b0 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    6e14:	465a      	mov	r2, fp
    6e16:	4bad      	ldr	r3, [pc, #692]	; (70cc <fRun_9DOF_GBY_KALMAN+0x13c0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6e18:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    6e1a:	58d1      	ldr	r1, [r2, r3]
    6e1c:	1c20      	adds	r0, r4, #0
    6e1e:	f7fa f8a9 	bl	f74 <__aeabi_fmul>
    6e22:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6e24:	1c30      	adds	r0, r6, #0
    6e26:	f7f9 fd37 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    6e2a:	238a      	movs	r3, #138	; 0x8a
    6e2c:	465a      	mov	r2, fp
    6e2e:	00db      	lsls	r3, r3, #3
    6e30:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6e32:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    6e34:	1c38      	adds	r0, r7, #0
    6e36:	f7fa f89d 	bl	f74 <__aeabi_fmul>
    6e3a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    6e3c:	1c30      	adds	r0, r6, #0
    6e3e:	f7f9 fd2b 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    6e42:	465a      	mov	r2, fp
    6e44:	4ba2      	ldr	r3, [pc, #648]	; (70d0 <fRun_9DOF_GBY_KALMAN+0x13c4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    6e46:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    6e48:	58d1      	ldr	r1, [r2, r3]
    6e4a:	4640      	mov	r0, r8
    6e4c:	f7fa f892 	bl	f74 <__aeabi_fmul>
    6e50:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    6e52:	1c30      	adds	r0, r6, #0
    6e54:	f7f9 fd20 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    6e58:	238b      	movs	r3, #139	; 0x8b
    6e5a:	465a      	mov	r2, fp
    6e5c:	00db      	lsls	r3, r3, #3
    6e5e:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    6e60:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    6e62:	4648      	mov	r0, r9
    6e64:	f7fa f886 	bl	f74 <__aeabi_fmul>
    6e68:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    6e6a:	1c30      	adds	r0, r6, #0
    6e6c:	f7f9 fd14 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1450
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
    6e70:	465a      	mov	r2, fp
    6e72:	4b98      	ldr	r3, [pc, #608]	; (70d4 <fRun_9DOF_GBY_KALMAN+0x13c8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    6e74:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1450
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
    6e76:	58d1      	ldr	r1, [r2, r3]
    6e78:	4650      	mov	r0, sl
    6e7a:	f7fa f87b 	bl	f74 <__aeabi_fmul>
    6e7e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    6e80:	1c30      	adds	r0, r6, #0
    6e82:	f7f9 fd09 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6e86:	465a      	mov	r2, fp
    6e88:	2398      	movs	r3, #152	; 0x98
    6e8a:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    6e8c:	23e2      	movs	r3, #226	; 0xe2
    6e8e:	009b      	lsls	r3, r3, #2
    6e90:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    6e92:	900f      	str	r0, [sp, #60]	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    6e94:	1c28      	adds	r0, r5, #0
    6e96:	f7fa f86d 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    6e9a:	23e3      	movs	r3, #227	; 0xe3
    6e9c:	465a      	mov	r2, fp
    6e9e:	009b      	lsls	r3, r3, #2
    6ea0:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    6ea2:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    6ea4:	1c20      	adds	r0, r4, #0
    6ea6:	f7fa f865 	bl	f74 <__aeabi_fmul>
    6eaa:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    6eac:	1c30      	adds	r0, r6, #0
    6eae:	f7f9 fcf3 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1438
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
    6eb2:	23e4      	movs	r3, #228	; 0xe4
    6eb4:	465a      	mov	r2, fp
    6eb6:	009b      	lsls	r3, r3, #2
    6eb8:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    6eba:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1438
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
    6ebc:	1c38      	adds	r0, r7, #0
    6ebe:	f7fa f859 	bl	f74 <__aeabi_fmul>
    6ec2:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    6ec4:	1c30      	adds	r0, r6, #0
    6ec6:	f7f9 fce7 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    6eca:	465b      	mov	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    6ecc:	9010      	str	r0, [sp, #64]	; 0x40
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    6ece:	6798      	str	r0, [r3, #120]	; 0x78
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    6ed0:	23f4      	movs	r3, #244	; 0xf4
    6ed2:	465a      	mov	r2, fp
    6ed4:	009b      	lsls	r3, r3, #2
    6ed6:	58d1      	ldr	r1, [r2, r3]
    6ed8:	1c28      	adds	r0, r5, #0
    6eda:	f7fa f84b 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    6ede:	23f5      	movs	r3, #245	; 0xf5
    6ee0:	465a      	mov	r2, fp
    6ee2:	009b      	lsls	r3, r3, #2
    6ee4:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    6ee6:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    6ee8:	1c20      	adds	r0, r4, #0
    6eea:	f7fa f843 	bl	f74 <__aeabi_fmul>
    6eee:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    6ef0:	1c30      	adds	r0, r6, #0
    6ef2:	f7f9 fcd1 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1441
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
    6ef6:	23f6      	movs	r3, #246	; 0xf6
    6ef8:	465a      	mov	r2, fp
    6efa:	009b      	lsls	r3, r3, #2
    6efc:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    6efe:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1441
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
    6f00:	1c38      	adds	r0, r7, #0
    6f02:	f7fa f837 	bl	f74 <__aeabi_fmul>
    6f06:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    6f08:	1c30      	adds	r0, r6, #0
    6f0a:	f7f9 fcc5 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    6f0e:	465b      	mov	r3, fp
    6f10:	2284      	movs	r2, #132	; 0x84
    6f12:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    6f14:	2383      	movs	r3, #131	; 0x83
    6f16:	465a      	mov	r2, fp
    6f18:	00db      	lsls	r3, r3, #3
    6f1a:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    6f1c:	9011      	str	r0, [sp, #68]	; 0x44
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    6f1e:	1c28      	adds	r0, r5, #0
    6f20:	f7fa f828 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    6f24:	465a      	mov	r2, fp
    6f26:	4b6c      	ldr	r3, [pc, #432]	; (70d8 <fRun_9DOF_GBY_KALMAN+0x13cc>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    6f28:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    6f2a:	58d1      	ldr	r1, [r2, r3]
    6f2c:	1c20      	adds	r0, r4, #0
    6f2e:	f7fa f821 	bl	f74 <__aeabi_fmul>
    6f32:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    6f34:	1c30      	adds	r0, r6, #0
    6f36:	f7f9 fcaf 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1444
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
    6f3a:	2384      	movs	r3, #132	; 0x84
    6f3c:	465a      	mov	r2, fp
    6f3e:	00db      	lsls	r3, r3, #3
    6f40:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    6f42:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1444
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
    6f44:	1c38      	adds	r0, r7, #0
    6f46:	f7fa f815 	bl	f74 <__aeabi_fmul>
    6f4a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    6f4c:	1c30      	adds	r0, r6, #0
    6f4e:	f7f9 fca3 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    6f52:	465b      	mov	r3, fp
    6f54:	22a8      	movs	r2, #168	; 0xa8
    6f56:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6f58:	238c      	movs	r3, #140	; 0x8c
    6f5a:	465a      	mov	r2, fp
    6f5c:	00db      	lsls	r3, r3, #3
    6f5e:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    6f60:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6f62:	1c28      	adds	r0, r5, #0
    6f64:	f7fa f806 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    6f68:	465a      	mov	r2, fp
    6f6a:	4b5c      	ldr	r3, [pc, #368]	; (70dc <fRun_9DOF_GBY_KALMAN+0x13d0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6f6c:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    6f6e:	58d1      	ldr	r1, [r2, r3]
    6f70:	1c20      	adds	r0, r4, #0
    6f72:	f7f9 ffff 	bl	f74 <__aeabi_fmul>
    6f76:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6f78:	1c28      	adds	r0, r5, #0
    6f7a:	f7f9 fc8d 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    6f7e:	238d      	movs	r3, #141	; 0x8d
    6f80:	465a      	mov	r2, fp
    6f82:	00db      	lsls	r3, r3, #3
    6f84:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6f86:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    6f88:	1c38      	adds	r0, r7, #0
    6f8a:	f7f9 fff3 	bl	f74 <__aeabi_fmul>
    6f8e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    6f90:	1c20      	adds	r0, r4, #0
    6f92:	f7f9 fc81 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    6f96:	465a      	mov	r2, fp
    6f98:	4b51      	ldr	r3, [pc, #324]	; (70e0 <fRun_9DOF_GBY_KALMAN+0x13d4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    6f9a:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    6f9c:	58d1      	ldr	r1, [r2, r3]
    6f9e:	4640      	mov	r0, r8
    6fa0:	f7f9 ffe8 	bl	f74 <__aeabi_fmul>
    6fa4:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    6fa6:	1c20      	adds	r0, r4, #0
    6fa8:	f7f9 fc76 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    6fac:	238e      	movs	r3, #142	; 0x8e
    6fae:	465a      	mov	r2, fp
    6fb0:	00db      	lsls	r3, r3, #3
    6fb2:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    6fb4:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    6fb6:	4648      	mov	r0, r9
    6fb8:	f7f9 ffdc 	bl	f74 <__aeabi_fmul>
    6fbc:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    6fbe:	1c20      	adds	r0, r4, #0
    6fc0:	f7f9 fc6a 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1450
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
    6fc4:	465a      	mov	r2, fp
    6fc6:	4b47      	ldr	r3, [pc, #284]	; (70e4 <fRun_9DOF_GBY_KALMAN+0x13d8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    6fc8:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1450
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
    6fca:	58d1      	ldr	r1, [r2, r3]
    6fcc:	4650      	mov	r0, sl
    6fce:	f7f9 ffd1 	bl	f74 <__aeabi_fmul>
    6fd2:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    6fd4:	1c20      	adds	r0, r4, #0
    6fd6:	f7f9 fc5f 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6fda:	239c      	movs	r3, #156	; 0x9c
    6fdc:	465a      	mov	r2, fp
    6fde:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1456
	}

	// set the magnetic jamming flag if there is a significant magnetic error power after calibration
	ftmp = pthisSV->fdErrSePl[X] * pthisSV->fdErrSePl[X] + pthisSV->fdErrSePl[Y] * pthisSV->fdErrSePl[Y] +
			pthisSV->fdErrSePl[Z] * pthisSV->fdErrSePl[Z];
	iMagJamming = (pthisMagCal->iValidMagCal) && (ftmp > pthisMagCal->fFourBsq);
    6fe0:	4b41      	ldr	r3, [pc, #260]	; (70e8 <fRun_9DOF_GBY_KALMAN+0x13dc>)
    6fe2:	9a7c      	ldr	r2, [sp, #496]	; 0x1f0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    6fe4:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1456
	}

	// set the magnetic jamming flag if there is a significant magnetic error power after calibration
	ftmp = pthisSV->fdErrSePl[X] * pthisSV->fdErrSePl[X] + pthisSV->fdErrSePl[Y] * pthisSV->fdErrSePl[Y] +
			pthisSV->fdErrSePl[Z] * pthisSV->fdErrSePl[Z];
	iMagJamming = (pthisMagCal->iValidMagCal) && (ftmp > pthisMagCal->fFourBsq);
    6fe6:	56d3      	ldrsb	r3, [r2, r3]
    6fe8:	2b00      	cmp	r3, #0
    6fea:	d101      	bne.n	6ff0 <fRun_9DOF_GBY_KALMAN+0x12e4>
    6fec:	f001 f998 	bl	8320 <PSP_CNFG_MQX_KERNEL_LOGGING+0x320>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1454 (discriminator 1)
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
	}

	// set the magnetic jamming flag if there is a significant magnetic error power after calibration
	ftmp = pthisSV->fdErrSePl[X] * pthisSV->fdErrSePl[X] + pthisSV->fdErrSePl[Y] * pthisSV->fdErrSePl[Y] +
    6ff0:	9906      	ldr	r1, [sp, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1456 (discriminator 1)
			pthisSV->fdErrSePl[Z] * pthisSV->fdErrSePl[Z];
	iMagJamming = (pthisMagCal->iValidMagCal) && (ftmp > pthisMagCal->fFourBsq);
    6ff2:	2701      	movs	r7, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1454 (discriminator 1)
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
	}

	// set the magnetic jamming flag if there is a significant magnetic error power after calibration
	ftmp = pthisSV->fdErrSePl[X] * pthisSV->fdErrSePl[X] + pthisSV->fdErrSePl[Y] * pthisSV->fdErrSePl[Y] +
    6ff4:	1c08      	adds	r0, r1, #0
    6ff6:	f7f9 ffbd 	bl	f74 <__aeabi_fmul>
    6ffa:	990f      	ldr	r1, [sp, #60]	; 0x3c
    6ffc:	1c05      	adds	r5, r0, #0
    6ffe:	1c08      	adds	r0, r1, #0
    7000:	f7f9 ffb8 	bl	f74 <__aeabi_fmul>
    7004:	1c01      	adds	r1, r0, #0
    7006:	1c28      	adds	r0, r5, #0
    7008:	f7f9 fc46 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1455 (discriminator 1)
			pthisSV->fdErrSePl[Z] * pthisSV->fdErrSePl[Z];
    700c:	1c21      	adds	r1, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1454 (discriminator 1)
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
	}

	// set the magnetic jamming flag if there is a significant magnetic error power after calibration
	ftmp = pthisSV->fdErrSePl[X] * pthisSV->fdErrSePl[X] + pthisSV->fdErrSePl[Y] * pthisSV->fdErrSePl[Y] +
    700e:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1455 (discriminator 1)
			pthisSV->fdErrSePl[Z] * pthisSV->fdErrSePl[Z];
    7010:	1c20      	adds	r0, r4, #0
    7012:	f7f9 ffaf 	bl	f74 <__aeabi_fmul>
    7016:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1454 (discriminator 1)
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
	}

	// set the magnetic jamming flag if there is a significant magnetic error power after calibration
	ftmp = pthisSV->fdErrSePl[X] * pthisSV->fdErrSePl[X] + pthisSV->fdErrSePl[Y] * pthisSV->fdErrSePl[Y] +
    7018:	1c28      	adds	r0, r5, #0
    701a:	f7f9 fc3d 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1456 (discriminator 1)
			pthisSV->fdErrSePl[Z] * pthisSV->fdErrSePl[Z];
	iMagJamming = (pthisMagCal->iValidMagCal) && (ftmp > pthisMagCal->fFourBsq);
    701e:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
    7020:	6b59      	ldr	r1, [r3, #52]	; 0x34
    7022:	f7f9 fc25 	bl	870 <__aeabi_fcmpgt>
    7026:	2800      	cmp	r0, #0
    7028:	d101      	bne.n	702e <fRun_9DOF_GBY_KALMAN+0x1322>
    702a:	f001 f82b 	bl	8084 <PSP_CNFG_MQX_KERNEL_LOGGING+0x84>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1480
	// *********************************************************************************
	// apply the a posteriori error corrections to the a posteriori state vector
	// *********************************************************************************

	// get the a posteriori delta quaternion
	fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), pthisSV->fThErrPl, -1.0F);
    702e:	4659      	mov	r1, fp
    7030:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    7032:	3170      	adds	r1, #112	; 0x70
    7034:	1c28      	adds	r0, r5, #0
    7036:	4a2d      	ldr	r2, [pc, #180]	; (70ec <fRun_9DOF_GBY_KALMAN+0x13e0>)
    7038:	f007 f9ac 	bl	e394 <fQuaternionFromRotationVectorDeg>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1484

	// compute the a posteriori orientation quaternion fqPl = fqMi * Deltaq(-thetae+)
	// the resulting quaternion may have negative scalar component q0
	qAeqBxC(&(pthisSV->fqPl), &(pthisSV->fqMi), &(pthisSV->fDeltaq));
    703c:	9c16      	ldr	r4, [sp, #88]	; 0x58
    703e:	1c2a      	adds	r2, r5, #0
    7040:	1c20      	adds	r0, r4, #0
    7042:	9909      	ldr	r1, [sp, #36]	; 0x24
    7044:	f007 fe92 	bl	ed6c <qAeqBxC>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1488

	// normalize the a posteriori orientation quaternion to stop error propagation 
	// the renormalization function ensures that the scalar component q0 is non-negative
	fqAeqNormqA(&(pthisSV->fqPl));
    7048:	1c20      	adds	r0, r4, #0
    704a:	f007 ffcf 	bl	efec <fqAeqNormqA>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1491

	// compute the a posteriori rotation matrix from the a posteriori quaternion
	fRotationMatrixFromQuaternion(pthisSV->fRPl, &(pthisSV->fqPl));
    704e:	1c21      	adds	r1, r4, #0
    7050:	980a      	ldr	r0, [sp, #40]	; 0x28
    7052:	f007 fb0b 	bl	e66c <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1494

	// compute the rotation vector from the a posteriori quaternion
	fRotationVectorDegFromQuaternion(&(pthisSV->fqPl), pthisSV->fRVecPl);
    7056:	4659      	mov	r1, fp
    7058:	1c20      	adds	r0, r4, #0
    705a:	3148      	adds	r1, #72	; 0x48
    705c:	f007 fb96 	bl	e78c <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1501
	// update the a posteriori gyro offset vector b+ and
	// assign the entire linear acceleration error vector to update the linear acceleration
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    7060:	465b      	mov	r3, fp
    7062:	6e58      	ldr	r0, [r3, #100]	; 0x64
    7064:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
    7066:	f7fa f8b7 	bl	11d8 <__aeabi_fsub>
    706a:	465b      	mov	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1503
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    706c:	465a      	mov	r2, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1501
	// update the a posteriori gyro offset vector b+ and
	// assign the entire linear acceleration error vector to update the linear acceleration
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    706e:	6658      	str	r0, [r3, #100]	; 0x64
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1503
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    7070:	23ac      	movs	r3, #172	; 0xac
    7072:	58d0      	ldr	r0, [r2, r3]
    7074:	3b0c      	subs	r3, #12
    7076:	58d1      	ldr	r1, [r2, r3]
    7078:	f7fa f8ae 	bl	11d8 <__aeabi_fsub>
    707c:	465a      	mov	r2, fp
    707e:	23bc      	movs	r3, #188	; 0xbc
    7080:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1501
	// update the a posteriori gyro offset vector b+ and
	// assign the entire linear acceleration error vector to update the linear acceleration
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    7082:	2380      	movs	r3, #128	; 0x80
    7084:	6e90      	ldr	r0, [r2, #104]	; 0x68
    7086:	58d1      	ldr	r1, [r2, r3]
    7088:	f7fa f8a6 	bl	11d8 <__aeabi_fsub>
    708c:	465b      	mov	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1503
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    708e:	465a      	mov	r2, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1501
	// update the a posteriori gyro offset vector b+ and
	// assign the entire linear acceleration error vector to update the linear acceleration
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    7090:	6698      	str	r0, [r3, #104]	; 0x68
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1503
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    7092:	23b0      	movs	r3, #176	; 0xb0
    7094:	58d0      	ldr	r0, [r2, r3]
    7096:	3b0c      	subs	r3, #12
    7098:	58d1      	ldr	r1, [r2, r3]
    709a:	f7fa f89d 	bl	11d8 <__aeabi_fsub>
    709e:	465a      	mov	r2, fp
    70a0:	23c0      	movs	r3, #192	; 0xc0
    70a2:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1501
	// update the a posteriori gyro offset vector b+ and
	// assign the entire linear acceleration error vector to update the linear acceleration
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    70a4:	2384      	movs	r3, #132	; 0x84
    70a6:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    70a8:	58d1      	ldr	r1, [r2, r3]
    70aa:	f7fa f895 	bl	11d8 <__aeabi_fsub>
    70ae:	465b      	mov	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1503
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    70b0:	465a      	mov	r2, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1501
	// update the a posteriori gyro offset vector b+ and
	// assign the entire linear acceleration error vector to update the linear acceleration
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    70b2:	66d8      	str	r0, [r3, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1503
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    70b4:	23b4      	movs	r3, #180	; 0xb4
    70b6:	58d0      	ldr	r0, [r2, r3]
    70b8:	e01a      	b.n	70f0 <fRun_9DOF_GBY_KALMAN+0x13e4>
    70ba:	46c0      	nop			; (mov r8, r8)
    70bc:	00000434 	.word	0x00000434
    70c0:	0000043c 	.word	0x0000043c
    70c4:	00000444 	.word	0x00000444
    70c8:	00000404 	.word	0x00000404
    70cc:	0000044c 	.word	0x0000044c
    70d0:	00000454 	.word	0x00000454
    70d4:	0000045c 	.word	0x0000045c
    70d8:	0000041c 	.word	0x0000041c
    70dc:	00000464 	.word	0x00000464
    70e0:	0000046c 	.word	0x0000046c
    70e4:	00000474 	.word	0x00000474
    70e8:	00000416 	.word	0x00000416
    70ec:	bf800000 	.word	0xbf800000
    70f0:	3b0c      	subs	r3, #12
    70f2:	58d1      	ldr	r1, [r2, r3]
    70f4:	f7fa f870 	bl	11d8 <__aeabi_fsub>
    70f8:	465a      	mov	r2, fp
    70fa:	23c4      	movs	r3, #196	; 0xc4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1509
	}

	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
    70fc:	4659      	mov	r1, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1503
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    70fe:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1509
	}

	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
    7100:	6953      	ldr	r3, [r2, #20]
    7102:	6a09      	ldr	r1, [r1, #32]
    7104:	1c1a      	adds	r2, r3, #0
    7106:	9307      	str	r3, [sp, #28]
    7108:	9b08      	ldr	r3, [sp, #32]
    710a:	1c0e      	adds	r6, r1, #0
    710c:	9108      	str	r1, [sp, #32]
    710e:	6919      	ldr	r1, [r3, #16]
    7110:	68dc      	ldr	r4, [r3, #12]
    7112:	4689      	mov	r9, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1510
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
    7114:	4659      	mov	r1, fp
    7116:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    7118:	695b      	ldr	r3, [r3, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1509
	}

	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
    711a:	1c10      	adds	r0, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1510
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
    711c:	9103      	str	r1, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1509
	}

	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
    711e:	1c21      	adds	r1, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1510
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
    7120:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1509
	}

	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
    7122:	f7f9 ff27 	bl	f74 <__aeabi_fmul>
    7126:	4649      	mov	r1, r9
    7128:	1c05      	adds	r5, r0, #0
    712a:	1c30      	adds	r0, r6, #0
    712c:	f7f9 ff22 	bl	f74 <__aeabi_fmul>
    7130:	1c01      	adds	r1, r0, #0
    7132:	1c28      	adds	r0, r5, #0
    7134:	f7f9 fbb0 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1510
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
    7138:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1509
	}

	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
    713a:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1510
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
    713c:	9803      	ldr	r0, [sp, #12]
    713e:	f7f9 ff19 	bl	f74 <__aeabi_fmul>
    7142:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1509
	}

	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
    7144:	1c28      	adds	r0, r5, #0
    7146:	f7f9 fba7 	bl	898 <__aeabi_fadd>
    714a:	465b      	mov	r3, fp
    714c:	22c8      	movs	r2, #200	; 0xc8
    714e:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1511
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
    7150:	465a      	mov	r2, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1509
	}

	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
    7152:	9006      	str	r0, [sp, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1511
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
    7154:	699b      	ldr	r3, [r3, #24]
    7156:	6a52      	ldr	r2, [r2, #36]	; 0x24
    7158:	1c19      	adds	r1, r3, #0
    715a:	1c16      	adds	r6, r2, #0
    715c:	920d      	str	r2, [sp, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1512
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
    715e:	465a      	mov	r2, fp
    7160:	6b12      	ldr	r2, [r2, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1511
	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
    7162:	1c20      	adds	r0, r4, #0
    7164:	9309      	str	r3, [sp, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1512
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
    7166:	9204      	str	r2, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1511
	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
    7168:	f7f9 ff04 	bl	f74 <__aeabi_fmul>
    716c:	1c31      	adds	r1, r6, #0
    716e:	1c05      	adds	r5, r0, #0
    7170:	4648      	mov	r0, r9
    7172:	f7f9 feff 	bl	f74 <__aeabi_fmul>
    7176:	1c01      	adds	r1, r0, #0
    7178:	1c28      	adds	r0, r5, #0
    717a:	f7f9 fb8d 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1512
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
    717e:	9904      	ldr	r1, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1511
	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
    7180:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1512
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
    7182:	4650      	mov	r0, sl
    7184:	f7f9 fef6 	bl	f74 <__aeabi_fmul>
    7188:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1511
	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
    718a:	1c28      	adds	r0, r5, #0
    718c:	f7f9 fb84 	bl	898 <__aeabi_fadd>
    7190:	465b      	mov	r3, fp
    7192:	22cc      	movs	r2, #204	; 0xcc
    7194:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1513
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Z] = pthisSV->fRPl[X][Z] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Z] * pthisAccel->fGpFast[Y] +
    7196:	69db      	ldr	r3, [r3, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1514
			pthisSV->fRPl[Z][Z] * pthisAccel->fGpFast[Z];
    7198:	465a      	mov	r2, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1513
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Z] = pthisSV->fRPl[X][Z] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Z] * pthisAccel->fGpFast[Y] +
    719a:	4698      	mov	r8, r3
    719c:	465b      	mov	r3, fp
    719e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    71a0:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1511
	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
    71a2:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1513
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Z] = pthisSV->fRPl[X][Z] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Z] * pthisAccel->fGpFast[Y] +
    71a4:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1514
			pthisSV->fRPl[Z][Z] * pthisAccel->fGpFast[Z];
    71a6:	6b56      	ldr	r6, [r2, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1513
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Z] = pthisSV->fRPl[X][Z] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Z] * pthisAccel->fGpFast[Y] +
    71a8:	9302      	str	r3, [sp, #8]
    71aa:	f7f9 fee3 	bl	f74 <__aeabi_fmul>
    71ae:	9902      	ldr	r1, [sp, #8]
    71b0:	1c04      	adds	r4, r0, #0
    71b2:	4648      	mov	r0, r9
    71b4:	f7f9 fede 	bl	f74 <__aeabi_fmul>
    71b8:	1c01      	adds	r1, r0, #0
    71ba:	1c20      	adds	r0, r4, #0
    71bc:	f7f9 fb6c 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1514
			pthisSV->fRPl[Z][Z] * pthisAccel->fGpFast[Z];
    71c0:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1513
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Z] = pthisSV->fRPl[X][Z] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Z] * pthisAccel->fGpFast[Y] +
    71c2:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1514
			pthisSV->fRPl[Z][Z] * pthisAccel->fGpFast[Z];
    71c4:	4650      	mov	r0, sl
    71c6:	f7f9 fed5 	bl	f74 <__aeabi_fmul>
    71ca:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1513
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Z] = pthisSV->fRPl[X][Z] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Z] * pthisAccel->fGpFast[Y] +
    71cc:	1c20      	adds	r0, r4, #0
    71ce:	f7f9 fb63 	bl	898 <__aeabi_fadd>
    71d2:	24d0      	movs	r4, #208	; 0xd0
    71d4:	465b      	mov	r3, fp
    71d6:	5118      	str	r0, [r3, r4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1516
			pthisSV->fRPl[Z][Z] * pthisAccel->fGpFast[Z];
	// remove gravity and correct the sign if the coordinate system is gravity positive / acceleration negative 
	switch (ithisCoordSystem)
    71d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    71da:	2b00      	cmp	r3, #0
    71dc:	d101      	bne.n	71e2 <fRun_9DOF_GBY_KALMAN+0x14d6>
    71de:	f002 fb1a 	bl	9816 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1816>
    71e2:	2b01      	cmp	r3, #1
    71e4:	d101      	bne.n	71ea <fRun_9DOF_GBY_KALMAN+0x14de>
    71e6:	f001 ff9a 	bl	911e <PSP_CNFG_MQX_KERNEL_LOGGING+0x111e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1533
		pthisSV->faGlPl[Z] = pthisSV->faGlPl[Z] - 1.0F;
		break;
	case WIN8:
	default:
		// gravity positive ENU
		pthisSV->faGlPl[X] = -pthisSV->faGlPl[X];
    71ea:	2280      	movs	r2, #128	; 0x80
    71ec:	0612      	lsls	r2, r2, #24
    71ee:	4694      	mov	ip, r2
    71f0:	21c8      	movs	r1, #200	; 0xc8
    71f2:	465a      	mov	r2, fp
    71f4:	9b06      	ldr	r3, [sp, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1534
		pthisSV->faGlPl[Y] = -pthisSV->faGlPl[Y];
    71f6:	4465      	add	r5, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1533
		pthisSV->faGlPl[Z] = pthisSV->faGlPl[Z] - 1.0F;
		break;
	case WIN8:
	default:
		// gravity positive ENU
		pthisSV->faGlPl[X] = -pthisSV->faGlPl[X];
    71f8:	4463      	add	r3, ip
    71fa:	5053      	str	r3, [r2, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1534
		pthisSV->faGlPl[Y] = -pthisSV->faGlPl[Y];
    71fc:	465b      	mov	r3, fp
    71fe:	22cc      	movs	r2, #204	; 0xcc
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1535
		pthisSV->faGlPl[Z] = -(pthisSV->faGlPl[Z] + 1.0F);
    7200:	21fe      	movs	r1, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1534
		break;
	case WIN8:
	default:
		// gravity positive ENU
		pthisSV->faGlPl[X] = -pthisSV->faGlPl[X];
		pthisSV->faGlPl[Y] = -pthisSV->faGlPl[Y];
    7202:	509d      	str	r5, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1535
		pthisSV->faGlPl[Z] = -(pthisSV->faGlPl[Z] + 1.0F);
    7204:	0589      	lsls	r1, r1, #22
    7206:	f7f9 fb47 	bl	898 <__aeabi_fadd>
    720a:	2380      	movs	r3, #128	; 0x80
    720c:	061b      	lsls	r3, r3, #24
    720e:	469c      	mov	ip, r3
    7210:	465b      	mov	r3, fp
    7212:	4460      	add	r0, ip
    7214:	5118      	str	r0, [r3, r4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1540
		break;
	}

	// update the reference geomagnetic vector using magnetic disturbance error if valid calibration and no jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
    7216:	9a7c      	ldr	r2, [sp, #496]	; 0x1f0
    7218:	4b1c      	ldr	r3, [pc, #112]	; (728c <fRun_9DOF_GBY_KALMAN+0x1580>)
    721a:	56d3      	ldrsb	r3, [r2, r3]
    721c:	2b00      	cmp	r3, #0
    721e:	d001      	beq.n	7224 <fRun_9DOF_GBY_KALMAN+0x1518>
    7220:	f002 fa49 	bl	96b6 <PSP_CNFG_MQX_KERNEL_LOGGING+0x16b6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1638

	// *********************************************************************************
	// compute the a posteriori Euler angles from the orientation matrix
	// *********************************************************************************

	if (ithisCoordSystem == NED)
    7224:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7226:	2b00      	cmp	r3, #0
    7228:	d101      	bne.n	722e <fRun_9DOF_GBY_KALMAN+0x1522>
    722a:	f002 fae7 	bl	97fc <PSP_CNFG_MQX_KERNEL_LOGGING+0x17fc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1644
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
				&(pthisSV->fRhoPl), &(pthisSV->fChiPl));
	}
	else if (ithisCoordSystem == ANDROID)
    722e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7230:	2b01      	cmp	r3, #1
    7232:	d101      	bne.n	7238 <fRun_9DOF_GBY_KALMAN+0x152c>
    7234:	f002 f829 	bl	928a <PSP_CNFG_MQX_KERNEL_LOGGING+0x128a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1653
				&(pthisSV->fRhoPl), &(pthisSV->fChiPl));
	}
	else
	{
		// calculate Win8 Euler angles
		fWin8AnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
    7238:	465b      	mov	r3, fp
    723a:	1d1a      	adds	r2, r3, #4
    723c:	330c      	adds	r3, #12
    723e:	9300      	str	r3, [sp, #0]
    7240:	3304      	adds	r3, #4
    7242:	9301      	str	r3, [sp, #4]
    7244:	980a      	ldr	r0, [sp, #40]	; 0x28
    7246:	4659      	mov	r1, fp
    7248:	3b08      	subs	r3, #8
    724a:	f006 ffe1 	bl	e210 <fWin8AnglesDegFromRotationMatrix>
    724e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7250:	1c1a      	adds	r2, r3, #0
    7252:	239a      	movs	r3, #154	; 0x9a
    7254:	009b      	lsls	r3, r3, #2
    7256:	445b      	add	r3, fp
    7258:	9303      	str	r3, [sp, #12]
    725a:	465b      	mov	r3, fp
    725c:	4693      	mov	fp, r2
    725e:	9304      	str	r3, [sp, #16]
    7260:	2330      	movs	r3, #48	; 0x30
    7262:	425b      	negs	r3, r3
    7264:	445b      	add	r3, fp
    7266:	4699      	mov	r9, r3
    7268:	23ae      	movs	r3, #174	; 0xae
    726a:	00db      	lsls	r3, r3, #3
    726c:	445b      	add	r3, fp
    726e:	9302      	str	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1622
					fsindelta = SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
				}
				else if (fsindelta < -SINDELTAMAX)
				{
					fsindelta = -SINDELTAMAX;
    7270:	9b05      	ldr	r3, [sp, #20]
    7272:	469a      	mov	sl, r3
    7274:	23b4      	movs	r3, #180	; 0xb4
    7276:	00db      	lsls	r3, r3, #3
    7278:	445b      	add	r3, fp
    727a:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1675
		pfPPlus12x12ij = pthisSV->fPPlus12x12[i];

		for (j = 0; j < 12; j++)
		{
			// zero P+[i][j] 
			*pfPPlus12x12ij = 0.0F;
    727c:	464b      	mov	r3, r9
    727e:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1681

			// initialize pfC6x12ik for current i, k=0
			pfC6x12ik = pthisSV->fC6x12[i];

			// initialize pfQw12x12kj for current j, k=0
			pfQw12x12kj = &pthisSV->fQw12x12[0][j];
    7280:	4655      	mov	r5, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1675
		pfPPlus12x12ij = pthisSV->fPPlus12x12[i];

		for (j = 0; j < 12; j++)
		{
			// zero P+[i][j] 
			*pfPPlus12x12ij = 0.0F;
    7282:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1678

			// initialize pfC6x12ik for current i, k=0
			pfC6x12ik = pthisSV->fC6x12[i];
    7284:	9c02      	ldr	r4, [sp, #8]
    7286:	4647      	mov	r7, r8
    7288:	e00d      	b.n	72a6 <fRun_9DOF_GBY_KALMAN+0x159a>
    728a:	46c0      	nop			; (mov r8, r8)
    728c:	00000416 	.word	0x00000416
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1689
			for (k = 0; k < 12; k++)
			{
				if ((*pfC6x12ik != 0.0F) && (*pfQw12x12kj != 0.0F))
				{
					if (*pfC6x12ik == 1.0F)
						*pfPPlus12x12ij += *pfQw12x12kj;
    7290:	464b      	mov	r3, r9
    7292:	4641      	mov	r1, r8
    7294:	6818      	ldr	r0, [r3, #0]
    7296:	f7f9 faff 	bl	898 <__aeabi_fadd>
    729a:	464b      	mov	r3, r9
    729c:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1697 (discriminator 2)
					else
						*pfPPlus12x12ij += *pfC6x12ik * *pfQw12x12kj;
				}

				// update pfC6x12ik and pfQw12x12kj for next iteration of k
				pfC6x12ik++;
    729e:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1698 (discriminator 2)
				pfQw12x12kj += 12;
    72a0:	3530      	adds	r5, #48	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1684 (discriminator 2)

			// initialize pfQw12x12kj for current j, k=0
			pfQw12x12kj = &pthisSV->fQw12x12[0][j];

			// sum matrix products over inner loop over k
			for (k = 0; k < 12; k++)
    72a2:	42bc      	cmp	r4, r7
    72a4:	d028      	beq.n	72f8 <fRun_9DOF_GBY_KALMAN+0x15ec>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1686
			{
				if ((*pfC6x12ik != 0.0F) && (*pfQw12x12kj != 0.0F))
    72a6:	6826      	ldr	r6, [r4, #0]
    72a8:	2100      	movs	r1, #0
    72aa:	1c30      	adds	r0, r6, #0
    72ac:	f7f9 fac6 	bl	83c <__aeabi_fcmpeq>
    72b0:	2800      	cmp	r0, #0
    72b2:	d1f4      	bne.n	729e <fRun_9DOF_GBY_KALMAN+0x1592>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1686 (discriminator 1)
    72b4:	682b      	ldr	r3, [r5, #0]
    72b6:	2100      	movs	r1, #0
    72b8:	1c18      	adds	r0, r3, #0
    72ba:	4698      	mov	r8, r3
    72bc:	f7f9 fabe 	bl	83c <__aeabi_fcmpeq>
    72c0:	2800      	cmp	r0, #0
    72c2:	d1ec      	bne.n	729e <fRun_9DOF_GBY_KALMAN+0x1592>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1688
				{
					if (*pfC6x12ik == 1.0F)
    72c4:	21fe      	movs	r1, #254	; 0xfe
    72c6:	1c30      	adds	r0, r6, #0
    72c8:	0589      	lsls	r1, r1, #22
    72ca:	f7f9 fab7 	bl	83c <__aeabi_fcmpeq>
    72ce:	2800      	cmp	r0, #0
    72d0:	d1de      	bne.n	7290 <fRun_9DOF_GBY_KALMAN+0x1584>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1690
						*pfPPlus12x12ij += *pfQw12x12kj;
					else if (*pfC6x12ik == -1.0F)
    72d2:	1c30      	adds	r0, r6, #0
    72d4:	49ef      	ldr	r1, [pc, #956]	; (7694 <fRun_9DOF_GBY_KALMAN+0x1988>)
    72d6:	f7f9 fab1 	bl	83c <__aeabi_fcmpeq>
    72da:	2800      	cmp	r0, #0
    72dc:	d101      	bne.n	72e2 <fRun_9DOF_GBY_KALMAN+0x15d6>
    72de:	f002 f9dd 	bl	969c <PSP_CNFG_MQX_KERNEL_LOGGING+0x169c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1691
						*pfPPlus12x12ij -= *pfQw12x12kj;
    72e2:	464b      	mov	r3, r9
    72e4:	4641      	mov	r1, r8
    72e6:	6818      	ldr	r0, [r3, #0]
    72e8:	f7f9 ff76 	bl	11d8 <__aeabi_fsub>
    72ec:	464b      	mov	r3, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1697
					else
						*pfPPlus12x12ij += *pfC6x12ik * *pfQw12x12kj;
				}

				// update pfC6x12ik and pfQw12x12kj for next iteration of k
				pfC6x12ik++;
    72ee:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1691
				if ((*pfC6x12ik != 0.0F) && (*pfQw12x12kj != 0.0F))
				{
					if (*pfC6x12ik == 1.0F)
						*pfPPlus12x12ij += *pfQw12x12kj;
					else if (*pfC6x12ik == -1.0F)
						*pfPPlus12x12ij -= *pfQw12x12kj;
    72f0:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1698
						*pfPPlus12x12ij += *pfC6x12ik * *pfQw12x12kj;
				}

				// update pfC6x12ik and pfQw12x12kj for next iteration of k
				pfC6x12ik++;
				pfQw12x12kj += 12;
    72f2:	3530      	adds	r5, #48	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1684

			// initialize pfQw12x12kj for current j, k=0
			pfQw12x12kj = &pthisSV->fQw12x12[0][j];

			// sum matrix products over inner loop over k
			for (k = 0; k < 12; k++)
    72f4:	42bc      	cmp	r4, r7
    72f6:	d1d6      	bne.n	72a6 <fRun_9DOF_GBY_KALMAN+0x159a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1703 (discriminator 2)
				pfQw12x12kj += 12;

			} // end of loop over k

			// increment pfPPlus12x12ij for next iteration of j
			pfPPlus12x12ij++;
    72f8:	2304      	movs	r3, #4
    72fa:	469c      	mov	ip, r3
    72fc:	44e1      	add	r9, ip
    72fe:	46b8      	mov	r8, r7
    7300:	44e2      	add	sl, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1672 (discriminator 2)
	for (i = 0; i < 6; i++)
	{
		// initialize pfPPlus12x12ij for current i, j=0
		pfPPlus12x12ij = pthisSV->fPPlus12x12[i];

		for (j = 0; j < 12; j++)
    7302:	45d9      	cmp	r9, fp
    7304:	d1ba      	bne.n	727c <fRun_9DOF_GBY_KALMAN+0x1570>
    7306:	332c      	adds	r3, #44	; 0x2c
    7308:	444b      	add	r3, r9
    730a:	469b      	mov	fp, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1667 (discriminator 2)
	// ***********************************************************************************

	// set P+ (6x12 scratch sub-matrix) to the product C (6x12) * Qw (12x12)
	// where both C and Qw are sparse and C has a significant number of +1 and -1 entries
	// the resulting matrix is sparse but not symmetric
	for (i = 0; i < 6; i++)
    730c:	9b03      	ldr	r3, [sp, #12]
    730e:	459b      	cmp	fp, r3
    7310:	d1a6      	bne.n	7260 <fRun_9DOF_GBY_KALMAN+0x1554>
    7312:	9b04      	ldr	r3, [sp, #16]
    7314:	27d6      	movs	r7, #214	; 0xd6
    7316:	469b      	mov	fp, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1667
    7318:	2300      	movs	r3, #0
    731a:	9302      	str	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1729

			// compute on and above diagonal matrix entry
			for (k = 0; k < 6; k++)
			{
				// check for non-zero values since P+ (6x12 scratch sub-matrix) is sparse
				if (*pfPPlus12x12kj != 0.0F)
    731c:	33c0      	adds	r3, #192	; 0xc0
    731e:	469a      	mov	sl, r3
    7320:	3330      	adds	r3, #48	; 0x30
    7322:	4699      	mov	r9, r3
    7324:	465b      	mov	r3, fp
    7326:	9303      	str	r3, [sp, #12]
    7328:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    732a:	00bf      	lsls	r7, r7, #2
    732c:	445f      	add	r7, fp
    732e:	469b      	mov	fp, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1715
	// where working array P+ (6x12 sub-matrix) is sparse but K is not sparse
	// only on and above diagonal terms of P+ are computed since P+ is symmetric
	for (i = 0; i < 12; i++)
	{
		// initialize pfQw12x12ij for current i, j=i
		pfQw12x12ij = pthisSV->fQw12x12[i] + i;
    7330:	9b02      	ldr	r3, [sp, #8]
    7332:	9d05      	ldr	r5, [sp, #20]
    7334:	1c1e      	adds	r6, r3, #0
    7336:	b25c      	sxtb	r4, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1723
		{
			// initialize pfK12x6ik for current i, k=0
			pfK12x6ik = pthisSV->fK12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    7338:	00a4      	lsls	r4, r4, #2
    733a:	445c      	add	r4, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1729

			// compute on and above diagonal matrix entry
			for (k = 0; k < 6; k++)
			{
				// check for non-zero values since P+ (6x12 scratch sub-matrix) is sparse
				if (*pfPPlus12x12kj != 0.0F)
    733c:	6823      	ldr	r3, [r4, #0]
    733e:	2100      	movs	r1, #0
    7340:	1c18      	adds	r0, r3, #0
    7342:	4698      	mov	r8, r3
    7344:	f7f9 fa7a 	bl	83c <__aeabi_fcmpeq>
    7348:	2800      	cmp	r0, #0
    734a:	d108      	bne.n	735e <fRun_9DOF_GBY_KALMAN+0x1652>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1731
				{
					*pfQw12x12ij -= *pfK12x6ik * *pfPPlus12x12kj;
    734c:	6839      	ldr	r1, [r7, #0]
    734e:	4640      	mov	r0, r8
    7350:	f7f9 fe10 	bl	f74 <__aeabi_fmul>
    7354:	1c01      	adds	r1, r0, #0
    7356:	6828      	ldr	r0, [r5, #0]
    7358:	f7f9 ff3e 	bl	11d8 <__aeabi_fsub>
    735c:	6028      	str	r0, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1729

			// compute on and above diagonal matrix entry
			for (k = 0; k < 6; k++)
			{
				// check for non-zero values since P+ (6x12 scratch sub-matrix) is sparse
				if (*pfPPlus12x12kj != 0.0F)
    735e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7360:	2100      	movs	r1, #0
    7362:	1c18      	adds	r0, r3, #0
    7364:	4698      	mov	r8, r3
    7366:	f7f9 fa69 	bl	83c <__aeabi_fcmpeq>
    736a:	2800      	cmp	r0, #0
    736c:	d108      	bne.n	7380 <fRun_9DOF_GBY_KALMAN+0x1674>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1731
				{
					*pfQw12x12ij -= *pfK12x6ik * *pfPPlus12x12kj;
    736e:	6879      	ldr	r1, [r7, #4]
    7370:	4640      	mov	r0, r8
    7372:	f7f9 fdff 	bl	f74 <__aeabi_fmul>
    7376:	1c01      	adds	r1, r0, #0
    7378:	6828      	ldr	r0, [r5, #0]
    737a:	f7f9 ff2d 	bl	11d8 <__aeabi_fsub>
    737e:	6028      	str	r0, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1729

			// compute on and above diagonal matrix entry
			for (k = 0; k < 6; k++)
			{
				// check for non-zero values since P+ (6x12 scratch sub-matrix) is sparse
				if (*pfPPlus12x12kj != 0.0F)
    7380:	6e23      	ldr	r3, [r4, #96]	; 0x60
    7382:	2100      	movs	r1, #0
    7384:	1c18      	adds	r0, r3, #0
    7386:	4698      	mov	r8, r3
    7388:	f7f9 fa58 	bl	83c <__aeabi_fcmpeq>
    738c:	2800      	cmp	r0, #0
    738e:	d108      	bne.n	73a2 <fRun_9DOF_GBY_KALMAN+0x1696>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1731
				{
					*pfQw12x12ij -= *pfK12x6ik * *pfPPlus12x12kj;
    7390:	68b9      	ldr	r1, [r7, #8]
    7392:	4640      	mov	r0, r8
    7394:	f7f9 fdee 	bl	f74 <__aeabi_fmul>
    7398:	1c01      	adds	r1, r0, #0
    739a:	6828      	ldr	r0, [r5, #0]
    739c:	f7f9 ff1c 	bl	11d8 <__aeabi_fsub>
    73a0:	6028      	str	r0, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1729

			// compute on and above diagonal matrix entry
			for (k = 0; k < 6; k++)
			{
				// check for non-zero values since P+ (6x12 scratch sub-matrix) is sparse
				if (*pfPPlus12x12kj != 0.0F)
    73a2:	2390      	movs	r3, #144	; 0x90
    73a4:	58e3      	ldr	r3, [r4, r3]
    73a6:	2100      	movs	r1, #0
    73a8:	1c18      	adds	r0, r3, #0
    73aa:	4698      	mov	r8, r3
    73ac:	f7f9 fa46 	bl	83c <__aeabi_fcmpeq>
    73b0:	2800      	cmp	r0, #0
    73b2:	d108      	bne.n	73c6 <fRun_9DOF_GBY_KALMAN+0x16ba>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1731
				{
					*pfQw12x12ij -= *pfK12x6ik * *pfPPlus12x12kj;
    73b4:	68f9      	ldr	r1, [r7, #12]
    73b6:	4640      	mov	r0, r8
    73b8:	f7f9 fddc 	bl	f74 <__aeabi_fmul>
    73bc:	1c01      	adds	r1, r0, #0
    73be:	6828      	ldr	r0, [r5, #0]
    73c0:	f7f9 ff0a 	bl	11d8 <__aeabi_fsub>
    73c4:	6028      	str	r0, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1729

			// compute on and above diagonal matrix entry
			for (k = 0; k < 6; k++)
			{
				// check for non-zero values since P+ (6x12 scratch sub-matrix) is sparse
				if (*pfPPlus12x12kj != 0.0F)
    73c6:	4653      	mov	r3, sl
    73c8:	58e3      	ldr	r3, [r4, r3]
    73ca:	2100      	movs	r1, #0
    73cc:	1c18      	adds	r0, r3, #0
    73ce:	4698      	mov	r8, r3
    73d0:	f7f9 fa34 	bl	83c <__aeabi_fcmpeq>
    73d4:	2800      	cmp	r0, #0
    73d6:	d108      	bne.n	73ea <fRun_9DOF_GBY_KALMAN+0x16de>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1731
				{
					*pfQw12x12ij -= *pfK12x6ik * *pfPPlus12x12kj;
    73d8:	6939      	ldr	r1, [r7, #16]
    73da:	4640      	mov	r0, r8
    73dc:	f7f9 fdca 	bl	f74 <__aeabi_fmul>
    73e0:	1c01      	adds	r1, r0, #0
    73e2:	6828      	ldr	r0, [r5, #0]
    73e4:	f7f9 fef8 	bl	11d8 <__aeabi_fsub>
    73e8:	6028      	str	r0, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1729

			// compute on and above diagonal matrix entry
			for (k = 0; k < 6; k++)
			{
				// check for non-zero values since P+ (6x12 scratch sub-matrix) is sparse
				if (*pfPPlus12x12kj != 0.0F)
    73ea:	464b      	mov	r3, r9
    73ec:	58e4      	ldr	r4, [r4, r3]
    73ee:	2100      	movs	r1, #0
    73f0:	1c20      	adds	r0, r4, #0
    73f2:	f7f9 fa23 	bl	83c <__aeabi_fcmpeq>
    73f6:	2800      	cmp	r0, #0
    73f8:	d108      	bne.n	740c <fRun_9DOF_GBY_KALMAN+0x1700>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1731
				{
					*pfQw12x12ij -= *pfK12x6ik * *pfPPlus12x12kj;
    73fa:	6979      	ldr	r1, [r7, #20]
    73fc:	1c20      	adds	r0, r4, #0
    73fe:	f7f9 fdb9 	bl	f74 <__aeabi_fmul>
    7402:	1c01      	adds	r1, r0, #0
    7404:	6828      	ldr	r0, [r5, #0]
    7406:	f7f9 fee7 	bl	11d8 <__aeabi_fsub>
    740a:	6028      	str	r0, [r5, #0]
    740c:	3601      	adds	r6, #1
    740e:	b2f6      	uxtb	r6, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1717
	for (i = 0; i < 12; i++)
	{
		// initialize pfQw12x12ij for current i, j=i
		pfQw12x12ij = pthisSV->fQw12x12[i] + i;

		for (j = i; j < 12; j++)
    7410:	b274      	sxtb	r4, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1741
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfQw12x12ij for next iteration of j
			pfQw12x12ij++;
    7412:	3504      	adds	r5, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1717
	for (i = 0; i < 12; i++)
	{
		// initialize pfQw12x12ij for current i, j=i
		pfQw12x12ij = pthisSV->fQw12x12[i] + i;

		for (j = i; j < 12; j++)
    7414:	2c0b      	cmp	r4, #11
    7416:	dd8f      	ble.n	7338 <fRun_9DOF_GBY_KALMAN+0x162c>
    7418:	9b02      	ldr	r3, [sp, #8]
    741a:	3718      	adds	r7, #24
    741c:	3301      	adds	r3, #1
    741e:	b2db      	uxtb	r3, r3
    7420:	b2da      	uxtb	r2, r3
    7422:	9202      	str	r2, [sp, #8]
    7424:	9a05      	ldr	r2, [sp, #20]
    7426:	3234      	adds	r2, #52	; 0x34
    7428:	9205      	str	r2, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1712 (discriminator 2)

	// compute P+ = (I12 - K * C) * Qw = Qw - K * (C * Qw) = Qw - K * P+ (6x12 sub-matrix)
	// storing result P+ in Qw and over-writing Qw which is OK since Qw is later computed from P+
	// where working array P+ (6x12 sub-matrix) is sparse but K is not sparse
	// only on and above diagonal terms of P+ are computed since P+ is symmetric
	for (i = 0; i < 12; i++)
    742a:	2b0c      	cmp	r3, #12
    742c:	d180      	bne.n	7330 <fRun_9DOF_GBY_KALMAN+0x1624>
    742e:	9b03      	ldr	r3, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1712
    7430:	2600      	movs	r6, #0
    7432:	469b      	mov	fp, r3
    7434:	4b98      	ldr	r3, [pc, #608]	; (7698 <fRun_9DOF_GBY_KALMAN+0x198c>)
    7436:	2500      	movs	r5, #0
    7438:	445b      	add	r3, fp
    743a:	469c      	mov	ip, r3
    743c:	46b1      	mov	r9, r6
    743e:	465f      	mov	r7, fp
    7440:	4663      	mov	r3, ip
    7442:	3b04      	subs	r3, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1756
		// initialize pfPPlus12x12ij and pfQw12x12ij for current i, j=i
		pfPPlus12x12ij = pthisSV->fPPlus12x12[i] + i;
		pfQw12x12ij = pthisSV->fQw12x12[i] + i;

		// copy the on-diagonal elements and increment pointers to enter loop at j=i+1
		*(pfPPlus12x12ij++) = *(pfQw12x12ij++);
    7444:	681a      	ldr	r2, [r3, #0]
    7446:	4b95      	ldr	r3, [pc, #596]	; (769c <fRun_9DOF_GBY_KALMAN+0x1990>)
    7448:	464e      	mov	r6, r9
    744a:	4463      	add	r3, ip
    744c:	601a      	str	r2, [r3, #0]
    744e:	466a      	mov	r2, sp
    7450:	3601      	adds	r6, #1
    7452:	b2f3      	uxtb	r3, r6
    7454:	7213      	strb	r3, [r2, #8]
    7456:	4698      	mov	r8, r3
    7458:	7a13      	ldrb	r3, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1759

		// loop over above diagonal columns j copying to below-diagonal elements
		for (j = i + 1; j < 12; j++)
    745a:	7213      	strb	r3, [r2, #8]
    745c:	4699      	mov	r9, r3
    745e:	7a13      	ldrb	r3, [r2, #8]
    7460:	b25b      	sxtb	r3, r3
    7462:	2b0c      	cmp	r3, #12
    7464:	d011      	beq.n	748a <fRun_9DOF_GBY_KALMAN+0x177e>
    7466:	4660      	mov	r0, ip
    7468:	464a      	mov	r2, r9
    746a:	4c8d      	ldr	r4, [pc, #564]	; (76a0 <fRun_9DOF_GBY_KALMAN+0x1994>)
    746c:	4464      	add	r4, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1761 (discriminator 3)
		{
			*(pfPPlus12x12ij++)= pthisSV->fPPlus12x12[j][i] = *(pfQw12x12ij++);
    746e:	005e      	lsls	r6, r3, #1
    7470:	18f3      	adds	r3, r6, r3
    7472:	009b      	lsls	r3, r3, #2
    7474:	195b      	adds	r3, r3, r5
    7476:	c802      	ldmia	r0!, {r1}
    7478:	3346      	adds	r3, #70	; 0x46
    747a:	3201      	adds	r2, #1
    747c:	009b      	lsls	r3, r3, #2
    747e:	b2d2      	uxtb	r2, r2
    7480:	51d9      	str	r1, [r3, r7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1759 (discriminator 3)

		// copy the on-diagonal elements and increment pointers to enter loop at j=i+1
		*(pfPPlus12x12ij++) = *(pfQw12x12ij++);

		// loop over above diagonal columns j copying to below-diagonal elements
		for (j = i + 1; j < 12; j++)
    7482:	b253      	sxtb	r3, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1761 (discriminator 3)
		{
			*(pfPPlus12x12ij++)= pthisSV->fPPlus12x12[j][i] = *(pfQw12x12ij++);
    7484:	c402      	stmia	r4!, {r1}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1759 (discriminator 3)

		// copy the on-diagonal elements and increment pointers to enter loop at j=i+1
		*(pfPPlus12x12ij++) = *(pfQw12x12ij++);

		// loop over above diagonal columns j copying to below-diagonal elements
		for (j = i + 1; j < 12; j++)
    7486:	2b0c      	cmp	r3, #12
    7488:	d1f1      	bne.n	746e <fRun_9DOF_GBY_KALMAN+0x1762>
    748a:	2334      	movs	r3, #52	; 0x34
    748c:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1749
	} // end of loop over i

	// Qw now holds the on and above diagonal elements of P+
	// so perform a simple copy to the all elements of P+
	// after execution of this code P+ is valid but Qw remains invalid
	for (i = 0; i < 12; i++)
    748e:	4643      	mov	r3, r8
    7490:	3501      	adds	r5, #1
    7492:	44d4      	add	ip, sl
    7494:	2b0c      	cmp	r3, #12
    7496:	d1d3      	bne.n	7440 <fRun_9DOF_GBY_KALMAN+0x1734>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1776
	// zero the matrix Qw
	for (i = 0; i < 12; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fQw12x12[i][j] = 0.0F;
    7498:	2300      	movs	r3, #0
    749a:	4a7f      	ldr	r2, [pc, #508]	; (7698 <fRun_9DOF_GBY_KALMAN+0x198c>)
    749c:	46bb      	mov	fp, r7
    749e:	50bb      	str	r3, [r7, r2]
    74a0:	3204      	adds	r2, #4
    74a2:	50bb      	str	r3, [r7, r2]
    74a4:	4a7f      	ldr	r2, [pc, #508]	; (76a4 <fRun_9DOF_GBY_KALMAN+0x1998>)
    74a6:	4691      	mov	r9, r2
    74a8:	2291      	movs	r2, #145	; 0x91
    74aa:	4649      	mov	r1, r9
    74ac:	00d2      	lsls	r2, r2, #3
    74ae:	507b      	str	r3, [r7, r1]
    74b0:	50bb      	str	r3, [r7, r2]
    74b2:	4a7d      	ldr	r2, [pc, #500]	; (76a8 <fRun_9DOF_GBY_KALMAN+0x199c>)
    74b4:	1c39      	adds	r1, r7, #0
    74b6:	50bb      	str	r3, [r7, r2]
    74b8:	3204      	adds	r2, #4
    74ba:	50bb      	str	r3, [r7, r2]
    74bc:	4a7b      	ldr	r2, [pc, #492]	; (76ac <fRun_9DOF_GBY_KALMAN+0x19a0>)
    74be:	50bb      	str	r3, [r7, r2]
    74c0:	3204      	adds	r2, #4
    74c2:	50bb      	str	r3, [r7, r2]
    74c4:	4a7a      	ldr	r2, [pc, #488]	; (76b0 <fRun_9DOF_GBY_KALMAN+0x19a4>)
    74c6:	50bb      	str	r3, [r7, r2]
    74c8:	3204      	adds	r2, #4
    74ca:	50bb      	str	r3, [r7, r2]
    74cc:	4a79      	ldr	r2, [pc, #484]	; (76b4 <fRun_9DOF_GBY_KALMAN+0x19a8>)
    74ce:	50bb      	str	r3, [r7, r2]
    74d0:	3204      	adds	r2, #4
    74d2:	50bb      	str	r3, [r7, r2]
    74d4:	3208      	adds	r2, #8
    74d6:	50bb      	str	r3, [r7, r2]
    74d8:	4a77      	ldr	r2, [pc, #476]	; (76b8 <fRun_9DOF_GBY_KALMAN+0x19ac>)
    74da:	50bb      	str	r3, [r7, r2]
    74dc:	4a77      	ldr	r2, [pc, #476]	; (76bc <fRun_9DOF_GBY_KALMAN+0x19b0>)
    74de:	50bb      	str	r3, [r7, r2]
    74e0:	3204      	adds	r2, #4
    74e2:	50bb      	str	r3, [r7, r2]
    74e4:	4a76      	ldr	r2, [pc, #472]	; (76c0 <fRun_9DOF_GBY_KALMAN+0x19b4>)
    74e6:	50bb      	str	r3, [r7, r2]
    74e8:	3204      	adds	r2, #4
    74ea:	50bb      	str	r3, [r7, r2]
    74ec:	4a75      	ldr	r2, [pc, #468]	; (76c4 <fRun_9DOF_GBY_KALMAN+0x19b8>)
    74ee:	50bb      	str	r3, [r7, r2]
    74f0:	3204      	adds	r2, #4
    74f2:	50bb      	str	r3, [r7, r2]
    74f4:	4a74      	ldr	r2, [pc, #464]	; (76c8 <fRun_9DOF_GBY_KALMAN+0x19bc>)
    74f6:	50bb      	str	r3, [r7, r2]
    74f8:	3204      	adds	r2, #4
    74fa:	50bb      	str	r3, [r7, r2]
    74fc:	4a73      	ldr	r2, [pc, #460]	; (76cc <fRun_9DOF_GBY_KALMAN+0x19c0>)
    74fe:	50bb      	str	r3, [r7, r2]
    7500:	4a73      	ldr	r2, [pc, #460]	; (76d0 <fRun_9DOF_GBY_KALMAN+0x19c4>)
    7502:	50bb      	str	r3, [r7, r2]
    7504:	3204      	adds	r2, #4
    7506:	50bb      	str	r3, [r7, r2]
    7508:	3208      	adds	r2, #8
    750a:	50bb      	str	r3, [r7, r2]
    750c:	4a71      	ldr	r2, [pc, #452]	; (76d4 <fRun_9DOF_GBY_KALMAN+0x19c8>)
    750e:	50bb      	str	r3, [r7, r2]
    7510:	3204      	adds	r2, #4
    7512:	50bb      	str	r3, [r7, r2]
    7514:	4a70      	ldr	r2, [pc, #448]	; (76d8 <fRun_9DOF_GBY_KALMAN+0x19cc>)
    7516:	50bb      	str	r3, [r7, r2]
    7518:	3204      	adds	r2, #4
    751a:	50bb      	str	r3, [r7, r2]
    751c:	4a6f      	ldr	r2, [pc, #444]	; (76dc <fRun_9DOF_GBY_KALMAN+0x19d0>)
    751e:	50bb      	str	r3, [r7, r2]
    7520:	4a6f      	ldr	r2, [pc, #444]	; (76e0 <fRun_9DOF_GBY_KALMAN+0x19d4>)
    7522:	50bb      	str	r3, [r7, r2]
    7524:	3204      	adds	r2, #4
    7526:	50bb      	str	r3, [r7, r2]
    7528:	3208      	adds	r2, #8
    752a:	50bb      	str	r3, [r7, r2]
    752c:	4a6d      	ldr	r2, [pc, #436]	; (76e4 <fRun_9DOF_GBY_KALMAN+0x19d8>)
    752e:	50bb      	str	r3, [r7, r2]
    7530:	3204      	adds	r2, #4
    7532:	50bb      	str	r3, [r7, r2]
    7534:	4a6c      	ldr	r2, [pc, #432]	; (76e8 <fRun_9DOF_GBY_KALMAN+0x19dc>)
    7536:	50bb      	str	r3, [r7, r2]
    7538:	3204      	adds	r2, #4
    753a:	50bb      	str	r3, [r7, r2]
    753c:	4a6b      	ldr	r2, [pc, #428]	; (76ec <fRun_9DOF_GBY_KALMAN+0x19e0>)
    753e:	50bb      	str	r3, [r7, r2]
    7540:	3204      	adds	r2, #4
    7542:	50bb      	str	r3, [r7, r2]
    7544:	4a6a      	ldr	r2, [pc, #424]	; (76f0 <fRun_9DOF_GBY_KALMAN+0x19e4>)
    7546:	50bb      	str	r3, [r7, r2]
    7548:	3204      	adds	r2, #4
    754a:	50bb      	str	r3, [r7, r2]
    754c:	3208      	adds	r2, #8
    754e:	50bb      	str	r3, [r7, r2]
    7550:	4a68      	ldr	r2, [pc, #416]	; (76f4 <fRun_9DOF_GBY_KALMAN+0x19e8>)
    7552:	50bb      	str	r3, [r7, r2]
    7554:	4a68      	ldr	r2, [pc, #416]	; (76f8 <fRun_9DOF_GBY_KALMAN+0x19ec>)
    7556:	50bb      	str	r3, [r7, r2]
    7558:	3204      	adds	r2, #4
    755a:	50bb      	str	r3, [r7, r2]
    755c:	4a67      	ldr	r2, [pc, #412]	; (76fc <fRun_9DOF_GBY_KALMAN+0x19f0>)
    755e:	50bb      	str	r3, [r7, r2]
    7560:	3204      	adds	r2, #4
    7562:	50bb      	str	r3, [r7, r2]
    7564:	4a66      	ldr	r2, [pc, #408]	; (7700 <fRun_9DOF_GBY_KALMAN+0x19f4>)
    7566:	50bb      	str	r3, [r7, r2]
    7568:	3204      	adds	r2, #4
    756a:	50bb      	str	r3, [r7, r2]
    756c:	4a65      	ldr	r2, [pc, #404]	; (7704 <fRun_9DOF_GBY_KALMAN+0x19f8>)
    756e:	50bb      	str	r3, [r7, r2]
    7570:	3204      	adds	r2, #4
    7572:	50bb      	str	r3, [r7, r2]
    7574:	4a64      	ldr	r2, [pc, #400]	; (7708 <fRun_9DOF_GBY_KALMAN+0x19fc>)
    7576:	50bb      	str	r3, [r7, r2]
    7578:	4a64      	ldr	r2, [pc, #400]	; (770c <fRun_9DOF_GBY_KALMAN+0x1a00>)
    757a:	50bb      	str	r3, [r7, r2]
    757c:	3204      	adds	r2, #4
    757e:	50bb      	str	r3, [r7, r2]
    7580:	3208      	adds	r2, #8
    7582:	50bb      	str	r3, [r7, r2]
    7584:	4a62      	ldr	r2, [pc, #392]	; (7710 <fRun_9DOF_GBY_KALMAN+0x1a04>)
    7586:	50bb      	str	r3, [r7, r2]
    7588:	3204      	adds	r2, #4
    758a:	50bb      	str	r3, [r7, r2]
    758c:	4a61      	ldr	r2, [pc, #388]	; (7714 <fRun_9DOF_GBY_KALMAN+0x1a08>)
    758e:	50bb      	str	r3, [r7, r2]
    7590:	3204      	adds	r2, #4
    7592:	50bb      	str	r3, [r7, r2]
    7594:	4a60      	ldr	r2, [pc, #384]	; (7718 <fRun_9DOF_GBY_KALMAN+0x1a0c>)
    7596:	50bb      	str	r3, [r7, r2]
    7598:	3204      	adds	r2, #4
    759a:	50bb      	str	r3, [r7, r2]
    759c:	4a5f      	ldr	r2, [pc, #380]	; (771c <fRun_9DOF_GBY_KALMAN+0x1a10>)
    759e:	50bb      	str	r3, [r7, r2]
    75a0:	3204      	adds	r2, #4
    75a2:	50bb      	str	r3, [r7, r2]
    75a4:	4a5e      	ldr	r2, [pc, #376]	; (7720 <fRun_9DOF_GBY_KALMAN+0x1a14>)
    75a6:	50bb      	str	r3, [r7, r2]
    75a8:	3204      	adds	r2, #4
    75aa:	50bb      	str	r3, [r7, r2]
    75ac:	4a5d      	ldr	r2, [pc, #372]	; (7724 <fRun_9DOF_GBY_KALMAN+0x1a18>)
    75ae:	50bb      	str	r3, [r7, r2]
    75b0:	4a5d      	ldr	r2, [pc, #372]	; (7728 <fRun_9DOF_GBY_KALMAN+0x1a1c>)
    75b2:	50bb      	str	r3, [r7, r2]
    75b4:	3204      	adds	r2, #4
    75b6:	50bb      	str	r3, [r7, r2]
    75b8:	4a5c      	ldr	r2, [pc, #368]	; (772c <fRun_9DOF_GBY_KALMAN+0x1a20>)
    75ba:	50bb      	str	r3, [r7, r2]
    75bc:	3204      	adds	r2, #4
    75be:	50bb      	str	r3, [r7, r2]
    75c0:	4a5b      	ldr	r2, [pc, #364]	; (7730 <fRun_9DOF_GBY_KALMAN+0x1a24>)
    75c2:	50bb      	str	r3, [r7, r2]
    75c4:	3204      	adds	r2, #4
    75c6:	50bb      	str	r3, [r7, r2]
    75c8:	4a5a      	ldr	r2, [pc, #360]	; (7734 <fRun_9DOF_GBY_KALMAN+0x1a28>)
    75ca:	50bb      	str	r3, [r7, r2]
    75cc:	3204      	adds	r2, #4
    75ce:	50bb      	str	r3, [r7, r2]
    75d0:	4a59      	ldr	r2, [pc, #356]	; (7738 <fRun_9DOF_GBY_KALMAN+0x1a2c>)
    75d2:	50bb      	str	r3, [r7, r2]
    75d4:	3204      	adds	r2, #4
    75d6:	50bb      	str	r3, [r7, r2]
    75d8:	4a58      	ldr	r2, [pc, #352]	; (773c <fRun_9DOF_GBY_KALMAN+0x1a30>)
    75da:	50bb      	str	r3, [r7, r2]
    75dc:	3204      	adds	r2, #4
    75de:	50bb      	str	r3, [r7, r2]
    75e0:	3208      	adds	r2, #8
    75e2:	50bb      	str	r3, [r7, r2]
    75e4:	4a56      	ldr	r2, [pc, #344]	; (7740 <fRun_9DOF_GBY_KALMAN+0x1a34>)
    75e6:	50bb      	str	r3, [r7, r2]
    75e8:	3204      	adds	r2, #4
    75ea:	50bb      	str	r3, [r7, r2]
    75ec:	4a55      	ldr	r2, [pc, #340]	; (7744 <fRun_9DOF_GBY_KALMAN+0x1a38>)
    75ee:	50bb      	str	r3, [r7, r2]
    75f0:	3204      	adds	r2, #4
    75f2:	50bb      	str	r3, [r7, r2]
    75f4:	4a54      	ldr	r2, [pc, #336]	; (7748 <fRun_9DOF_GBY_KALMAN+0x1a3c>)
    75f6:	50bb      	str	r3, [r7, r2]
    75f8:	3204      	adds	r2, #4
    75fa:	50bb      	str	r3, [r7, r2]
    75fc:	4a53      	ldr	r2, [pc, #332]	; (774c <fRun_9DOF_GBY_KALMAN+0x1a40>)
    75fe:	50bb      	str	r3, [r7, r2]
    7600:	3204      	adds	r2, #4
    7602:	50bb      	str	r3, [r7, r2]
    7604:	4a52      	ldr	r2, [pc, #328]	; (7750 <fRun_9DOF_GBY_KALMAN+0x1a44>)
    7606:	50bb      	str	r3, [r7, r2]
    7608:	3204      	adds	r2, #4
    760a:	50bb      	str	r3, [r7, r2]
    760c:	4a51      	ldr	r2, [pc, #324]	; (7754 <fRun_9DOF_GBY_KALMAN+0x1a48>)
    760e:	50bb      	str	r3, [r7, r2]
    7610:	4a51      	ldr	r2, [pc, #324]	; (7758 <fRun_9DOF_GBY_KALMAN+0x1a4c>)
    7612:	50bb      	str	r3, [r7, r2]
    7614:	3204      	adds	r2, #4
    7616:	50bb      	str	r3, [r7, r2]
    7618:	4a50      	ldr	r2, [pc, #320]	; (775c <fRun_9DOF_GBY_KALMAN+0x1a50>)
    761a:	50bb      	str	r3, [r7, r2]
    761c:	3204      	adds	r2, #4
    761e:	50bb      	str	r3, [r7, r2]
    7620:	4a4f      	ldr	r2, [pc, #316]	; (7760 <fRun_9DOF_GBY_KALMAN+0x1a54>)
    7622:	50bb      	str	r3, [r7, r2]
    7624:	3204      	adds	r2, #4
    7626:	50bb      	str	r3, [r7, r2]
    7628:	4a4e      	ldr	r2, [pc, #312]	; (7764 <fRun_9DOF_GBY_KALMAN+0x1a58>)
    762a:	50bb      	str	r3, [r7, r2]
    762c:	3204      	adds	r2, #4
    762e:	50bb      	str	r3, [r7, r2]
    7630:	4a4d      	ldr	r2, [pc, #308]	; (7768 <fRun_9DOF_GBY_KALMAN+0x1a5c>)
    7632:	50bb      	str	r3, [r7, r2]
    7634:	3204      	adds	r2, #4
    7636:	50bb      	str	r3, [r7, r2]
    7638:	4a4c      	ldr	r2, [pc, #304]	; (776c <fRun_9DOF_GBY_KALMAN+0x1a60>)
    763a:	50bb      	str	r3, [r7, r2]
    763c:	3204      	adds	r2, #4
    763e:	50bb      	str	r3, [r7, r2]
    7640:	3208      	adds	r2, #8
    7642:	50bb      	str	r3, [r7, r2]
    7644:	4a4a      	ldr	r2, [pc, #296]	; (7770 <fRun_9DOF_GBY_KALMAN+0x1a64>)
    7646:	50bb      	str	r3, [r7, r2]
    7648:	3204      	adds	r2, #4
    764a:	50bb      	str	r3, [r7, r2]
    764c:	4a49      	ldr	r2, [pc, #292]	; (7774 <fRun_9DOF_GBY_KALMAN+0x1a68>)
    764e:	50bb      	str	r3, [r7, r2]
    7650:	3204      	adds	r2, #4
    7652:	50bb      	str	r3, [r7, r2]
    7654:	4a48      	ldr	r2, [pc, #288]	; (7778 <fRun_9DOF_GBY_KALMAN+0x1a6c>)
    7656:	50bb      	str	r3, [r7, r2]
    7658:	3204      	adds	r2, #4
    765a:	50bb      	str	r3, [r7, r2]
    765c:	4a47      	ldr	r2, [pc, #284]	; (777c <fRun_9DOF_GBY_KALMAN+0x1a70>)
    765e:	50bb      	str	r3, [r7, r2]
    7660:	3204      	adds	r2, #4
    7662:	50bb      	str	r3, [r7, r2]
    7664:	4a46      	ldr	r2, [pc, #280]	; (7780 <fRun_9DOF_GBY_KALMAN+0x1a74>)
    7666:	50bb      	str	r3, [r7, r2]
    7668:	3204      	adds	r2, #4
    766a:	50bb      	str	r3, [r7, r2]
    766c:	4a45      	ldr	r2, [pc, #276]	; (7784 <fRun_9DOF_GBY_KALMAN+0x1a78>)
    766e:	50bb      	str	r3, [r7, r2]
    7670:	4a45      	ldr	r2, [pc, #276]	; (7788 <fRun_9DOF_GBY_KALMAN+0x1a7c>)
    7672:	50bb      	str	r3, [r7, r2]
    7674:	3204      	adds	r2, #4
    7676:	50bb      	str	r3, [r7, r2]
    7678:	4a44      	ldr	r2, [pc, #272]	; (778c <fRun_9DOF_GBY_KALMAN+0x1a80>)
    767a:	50bb      	str	r3, [r7, r2]
    767c:	3204      	adds	r2, #4
    767e:	50bb      	str	r3, [r7, r2]
    7680:	4a43      	ldr	r2, [pc, #268]	; (7790 <fRun_9DOF_GBY_KALMAN+0x1a84>)
    7682:	50bb      	str	r3, [r7, r2]
    7684:	3204      	adds	r2, #4
    7686:	50bb      	str	r3, [r7, r2]
    7688:	4a42      	ldr	r2, [pc, #264]	; (7794 <fRun_9DOF_GBY_KALMAN+0x1a88>)
    768a:	50bb      	str	r3, [r7, r2]
    768c:	3204      	adds	r2, #4
    768e:	50bb      	str	r3, [r7, r2]
    7690:	e082      	b.n	7798 <fRun_9DOF_GBY_KALMAN+0x1a8c>
    7692:	46c0      	nop			; (mov r8, r8)
    7694:	bf800000 	.word	0xbf800000
    7698:	0000047c 	.word	0x0000047c
    769c:	fffffc9c 	.word	0xfffffc9c
    76a0:	fffffca0 	.word	0xfffffca0
    76a4:	00000484 	.word	0x00000484
    76a8:	0000048c 	.word	0x0000048c
    76ac:	00000494 	.word	0x00000494
    76b0:	0000049c 	.word	0x0000049c
    76b4:	000004a4 	.word	0x000004a4
    76b8:	000004b4 	.word	0x000004b4
    76bc:	000004bc 	.word	0x000004bc
    76c0:	000004c4 	.word	0x000004c4
    76c4:	000004cc 	.word	0x000004cc
    76c8:	000004d4 	.word	0x000004d4
    76cc:	000004dc 	.word	0x000004dc
    76d0:	000004e4 	.word	0x000004e4
    76d4:	000004f4 	.word	0x000004f4
    76d8:	000004fc 	.word	0x000004fc
    76dc:	00000504 	.word	0x00000504
    76e0:	0000050c 	.word	0x0000050c
    76e4:	0000051c 	.word	0x0000051c
    76e8:	00000524 	.word	0x00000524
    76ec:	0000052c 	.word	0x0000052c
    76f0:	00000534 	.word	0x00000534
    76f4:	00000544 	.word	0x00000544
    76f8:	0000054c 	.word	0x0000054c
    76fc:	00000554 	.word	0x00000554
    7700:	0000055c 	.word	0x0000055c
    7704:	00000564 	.word	0x00000564
    7708:	0000056c 	.word	0x0000056c
    770c:	00000574 	.word	0x00000574
    7710:	00000584 	.word	0x00000584
    7714:	0000058c 	.word	0x0000058c
    7718:	00000594 	.word	0x00000594
    771c:	0000059c 	.word	0x0000059c
    7720:	000005a4 	.word	0x000005a4
    7724:	000005ac 	.word	0x000005ac
    7728:	000005b4 	.word	0x000005b4
    772c:	000005bc 	.word	0x000005bc
    7730:	000005c4 	.word	0x000005c4
    7734:	000005cc 	.word	0x000005cc
    7738:	000005d4 	.word	0x000005d4
    773c:	000005dc 	.word	0x000005dc
    7740:	000005ec 	.word	0x000005ec
    7744:	000005f4 	.word	0x000005f4
    7748:	000005fc 	.word	0x000005fc
    774c:	00000604 	.word	0x00000604
    7750:	0000060c 	.word	0x0000060c
    7754:	00000614 	.word	0x00000614
    7758:	0000061c 	.word	0x0000061c
    775c:	00000624 	.word	0x00000624
    7760:	0000062c 	.word	0x0000062c
    7764:	00000634 	.word	0x00000634
    7768:	0000063c 	.word	0x0000063c
    776c:	00000644 	.word	0x00000644
    7770:	00000654 	.word	0x00000654
    7774:	0000065c 	.word	0x0000065c
    7778:	00000664 	.word	0x00000664
    777c:	0000066c 	.word	0x0000066c
    7780:	00000674 	.word	0x00000674
    7784:	0000067c 	.word	0x0000067c
    7788:	00000684 	.word	0x00000684
    778c:	0000068c 	.word	0x0000068c
    7790:	00000694 	.word	0x00000694
    7794:	0000069c 	.word	0x0000069c
    7798:	4a9c      	ldr	r2, [pc, #624]	; (7a0c <fRun_9DOF_GBY_KALMAN+0x1d00>)
    779a:	50bb      	str	r3, [r7, r2]
    779c:	3204      	adds	r2, #4
    779e:	50bb      	str	r3, [r7, r2]
    77a0:	4a9b      	ldr	r2, [pc, #620]	; (7a10 <fRun_9DOF_GBY_KALMAN+0x1d04>)
    77a2:	50bb      	str	r3, [r7, r2]
    77a4:	3204      	adds	r2, #4
    77a6:	50bb      	str	r3, [r7, r2]
    77a8:	4b9a      	ldr	r3, [pc, #616]	; (7a14 <fRun_9DOF_GBY_KALMAN+0x1d08>)
    77aa:	58ff      	ldr	r7, [r7, r3]
    77ac:	3304      	adds	r3, #4
    77ae:	58cb      	ldr	r3, [r1, r3]
    77b0:	4698      	mov	r8, r3
    77b2:	4b99      	ldr	r3, [pc, #612]	; (7a18 <fRun_9DOF_GBY_KALMAN+0x1d0c>)
    77b4:	58cc      	ldr	r4, [r1, r3]
    77b6:	2380      	movs	r3, #128	; 0x80
    77b8:	061b      	lsls	r3, r3, #24
    77ba:	469c      	mov	ip, r3
    77bc:	4b97      	ldr	r3, [pc, #604]	; (7a1c <fRun_9DOF_GBY_KALMAN+0x1d10>)
    77be:	4464      	add	r4, ip
    77c0:	58ce      	ldr	r6, [r1, r3]
    77c2:	3304      	adds	r3, #4
    77c4:	58cd      	ldr	r5, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1784

	// update the covariance matrix components
	for (i = 0; i < 3; i++)
	{
		// Qw[th-th-] = Qw[0-2][0-2] = E[th-(th-)^T] = Q[th+th+] + deltat^2 * (Q[b+b+] + (Qwb + QvG) * I)
		pthisSV->fQw12x12[i][i] = pthisSV->fPPlus12x12[i][i] + pthisSV->fdeltatsq * (pthisSV->fPPlus12x12[i + 3][i + 3] + pthisSV->fQwbplusQvG);
    77c6:	23da      	movs	r3, #218	; 0xda
    77c8:	005b      	lsls	r3, r3, #1
    77ca:	58cb      	ldr	r3, [r1, r3]
    77cc:	4641      	mov	r1, r8
    77ce:	1c18      	adds	r0, r3, #0
    77d0:	469a      	mov	sl, r3
    77d2:	f7f9 f861 	bl	898 <__aeabi_fadd>
    77d6:	1c39      	adds	r1, r7, #0
    77d8:	f7f9 fbcc 	bl	f74 <__aeabi_fmul>
    77dc:	238c      	movs	r3, #140	; 0x8c
    77de:	465a      	mov	r2, fp
    77e0:	005b      	lsls	r3, r3, #1
    77e2:	1c01      	adds	r1, r0, #0
    77e4:	58d0      	ldr	r0, [r2, r3]
    77e6:	f7f9 f857 	bl	898 <__aeabi_fadd>
    77ea:	238f      	movs	r3, #143	; 0x8f
    77ec:	465a      	mov	r2, fp
    77ee:	00db      	lsls	r3, r3, #3
    77f0:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1787

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw12x12[i + 3][i + 3] = pthisSV->fPPlus12x12[i + 3][i + 3] + FQWB_9DOF_GBY_KALMAN;
    77f2:	498b      	ldr	r1, [pc, #556]	; (7a20 <fRun_9DOF_GBY_KALMAN+0x1d14>)
    77f4:	4650      	mov	r0, sl
    77f6:	f7f9 f84f 	bl	898 <__aeabi_fadd>
    77fa:	465a      	mov	r2, fp
    77fc:	4b89      	ldr	r3, [pc, #548]	; (7a24 <fRun_9DOF_GBY_KALMAN+0x1d18>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1790

		// Qw[th-b-] = Qw[0-2][3-5] = E[th-(b-)^T] = -deltat * (Q[b+b+] + Qwb * I) = -deltat * Qw[b-b-]
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = -pthisSV->fdeltat * pthisSV->fQw12x12[i + 3][i + 3];
    77fe:	1c21      	adds	r1, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1787
	{
		// Qw[th-th-] = Qw[0-2][0-2] = E[th-(th-)^T] = Q[th+th+] + deltat^2 * (Q[b+b+] + (Qwb + QvG) * I)
		pthisSV->fQw12x12[i][i] = pthisSV->fPPlus12x12[i][i] + pthisSV->fdeltatsq * (pthisSV->fPPlus12x12[i + 3][i + 3] + pthisSV->fQwbplusQvG);

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw12x12[i + 3][i + 3] = pthisSV->fPPlus12x12[i + 3][i + 3] + FQWB_9DOF_GBY_KALMAN;
    7800:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1790

		// Qw[th-b-] = Qw[0-2][3-5] = E[th-(b-)^T] = -deltat * (Q[b+b+] + Qwb * I) = -deltat * Qw[b-b-]
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = -pthisSV->fdeltat * pthisSV->fQw12x12[i + 3][i + 3];
    7802:	f7f9 fbb7 	bl	f74 <__aeabi_fmul>
    7806:	23a1      	movs	r3, #161	; 0xa1
    7808:	465a      	mov	r2, fp
    780a:	00db      	lsls	r3, r3, #3
    780c:	50d0      	str	r0, [r2, r3]
    780e:	464a      	mov	r2, r9
    7810:	465b      	mov	r3, fp
    7812:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1793

		// Qw[a-a-] = Qw[6-8][6-8] = E[a-(a-)^T] = ca^2 * Q[a+a+] + Qwa * I
		pthisSV->fQw12x12[i + 6][i + 6] = pthisSV->fcasq * pthisSV->fPPlus12x12[i + 6][i + 6] + FQWA_9DOF_GBY_KALMAN;
    7814:	2394      	movs	r3, #148	; 0x94
    7816:	465a      	mov	r2, fp
    7818:	009b      	lsls	r3, r3, #2
    781a:	58d1      	ldr	r1, [r2, r3]
    781c:	1c30      	adds	r0, r6, #0
    781e:	f7f9 fba9 	bl	f74 <__aeabi_fmul>
    7822:	4981      	ldr	r1, [pc, #516]	; (7a28 <fRun_9DOF_GBY_KALMAN+0x1d1c>)
    7824:	f7f9 f838 	bl	898 <__aeabi_fadd>
    7828:	23b6      	movs	r3, #182	; 0xb6
    782a:	465a      	mov	r2, fp
    782c:	00db      	lsls	r3, r3, #3
    782e:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1796

		// Qw[d-d-] = Qw[9-11][9-11] = E[d-(d-)^T] = cd^2 * Q[d+d+] + Qwd * I
		pthisSV->fQw12x12[i + 9][i + 9] = pthisSV->fcdsq * pthisSV->fPPlus12x12[i + 9][i + 9] + FQWD_9DOF_GBY_KALMAN;
    7830:	23bb      	movs	r3, #187	; 0xbb
    7832:	009b      	lsls	r3, r3, #2
    7834:	58d1      	ldr	r1, [r2, r3]
    7836:	1c28      	adds	r0, r5, #0
    7838:	f7f9 fb9c 	bl	f74 <__aeabi_fmul>
    783c:	21fc      	movs	r1, #252	; 0xfc
    783e:	0589      	lsls	r1, r1, #22
    7840:	f7f9 f82a 	bl	898 <__aeabi_fadd>
    7844:	465a      	mov	r2, fp
    7846:	4b79      	ldr	r3, [pc, #484]	; (7a2c <fRun_9DOF_GBY_KALMAN+0x1d20>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1784

	// update the covariance matrix components
	for (i = 0; i < 3; i++)
	{
		// Qw[th-th-] = Qw[0-2][0-2] = E[th-(th-)^T] = Q[th+th+] + deltat^2 * (Q[b+b+] + (Qwb + QvG) * I)
		pthisSV->fQw12x12[i][i] = pthisSV->fPPlus12x12[i][i] + pthisSV->fdeltatsq * (pthisSV->fPPlus12x12[i + 3][i + 3] + pthisSV->fQwbplusQvG);
    7848:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1796

		// Qw[a-a-] = Qw[6-8][6-8] = E[a-(a-)^T] = ca^2 * Q[a+a+] + Qwa * I
		pthisSV->fQw12x12[i + 6][i + 6] = pthisSV->fcasq * pthisSV->fPPlus12x12[i + 6][i + 6] + FQWA_9DOF_GBY_KALMAN;

		// Qw[d-d-] = Qw[9-11][9-11] = E[d-(d-)^T] = cd^2 * Q[d+d+] + Qwd * I
		pthisSV->fQw12x12[i + 9][i + 9] = pthisSV->fcdsq * pthisSV->fPPlus12x12[i + 9][i + 9] + FQWD_9DOF_GBY_KALMAN;
    784a:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1784

	// update the covariance matrix components
	for (i = 0; i < 3; i++)
	{
		// Qw[th-th-] = Qw[0-2][0-2] = E[th-(th-)^T] = Q[th+th+] + deltat^2 * (Q[b+b+] + (Qwb + QvG) * I)
		pthisSV->fQw12x12[i][i] = pthisSV->fPPlus12x12[i][i] + pthisSV->fdeltatsq * (pthisSV->fPPlus12x12[i + 3][i + 3] + pthisSV->fQwbplusQvG);
    784c:	23f4      	movs	r3, #244	; 0xf4
    784e:	005b      	lsls	r3, r3, #1
    7850:	58d3      	ldr	r3, [r2, r3]
    7852:	1c18      	adds	r0, r3, #0
    7854:	4699      	mov	r9, r3
    7856:	f7f9 f81f 	bl	898 <__aeabi_fadd>
    785a:	1c39      	adds	r1, r7, #0
    785c:	f7f9 fb8a 	bl	f74 <__aeabi_fmul>
    7860:	23a6      	movs	r3, #166	; 0xa6
    7862:	465a      	mov	r2, fp
    7864:	005b      	lsls	r3, r3, #1
    7866:	1c01      	adds	r1, r0, #0
    7868:	58d0      	ldr	r0, [r2, r3]
    786a:	f7f9 f815 	bl	898 <__aeabi_fadd>
    786e:	465a      	mov	r2, fp
    7870:	4b6f      	ldr	r3, [pc, #444]	; (7a30 <fRun_9DOF_GBY_KALMAN+0x1d24>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1787

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw12x12[i + 3][i + 3] = pthisSV->fPPlus12x12[i + 3][i + 3] + FQWB_9DOF_GBY_KALMAN;
    7872:	496b      	ldr	r1, [pc, #428]	; (7a20 <fRun_9DOF_GBY_KALMAN+0x1d14>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1784

	// update the covariance matrix components
	for (i = 0; i < 3; i++)
	{
		// Qw[th-th-] = Qw[0-2][0-2] = E[th-(th-)^T] = Q[th+th+] + deltat^2 * (Q[b+b+] + (Qwb + QvG) * I)
		pthisSV->fQw12x12[i][i] = pthisSV->fPPlus12x12[i][i] + pthisSV->fdeltatsq * (pthisSV->fPPlus12x12[i + 3][i + 3] + pthisSV->fQwbplusQvG);
    7874:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1787

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw12x12[i + 3][i + 3] = pthisSV->fPPlus12x12[i + 3][i + 3] + FQWB_9DOF_GBY_KALMAN;
    7876:	4648      	mov	r0, r9
    7878:	f7f9 f80e 	bl	898 <__aeabi_fadd>
    787c:	23a9      	movs	r3, #169	; 0xa9
    787e:	465a      	mov	r2, fp
    7880:	00db      	lsls	r3, r3, #3
    7882:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1790

		// Qw[th-b-] = Qw[0-2][3-5] = E[th-(b-)^T] = -deltat * (Q[b+b+] + Qwb * I) = -deltat * Qw[b-b-]
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = -pthisSV->fdeltat * pthisSV->fQw12x12[i + 3][i + 3];
    7884:	1c21      	adds	r1, r4, #0
    7886:	f7f9 fb75 	bl	f74 <__aeabi_fmul>
    788a:	465a      	mov	r2, fp
    788c:	4b69      	ldr	r3, [pc, #420]	; (7a34 <fRun_9DOF_GBY_KALMAN+0x1d28>)
    788e:	50d0      	str	r0, [r2, r3]
    7890:	3b84      	subs	r3, #132	; 0x84
    7892:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1793

		// Qw[a-a-] = Qw[6-8][6-8] = E[a-(a-)^T] = ca^2 * Q[a+a+] + Qwa * I
		pthisSV->fQw12x12[i + 6][i + 6] = pthisSV->fcasq * pthisSV->fPPlus12x12[i + 6][i + 6] + FQWA_9DOF_GBY_KALMAN;
    7894:	23a1      	movs	r3, #161	; 0xa1
    7896:	009b      	lsls	r3, r3, #2
    7898:	58d1      	ldr	r1, [r2, r3]
    789a:	1c30      	adds	r0, r6, #0
    789c:	f7f9 fb6a 	bl	f74 <__aeabi_fmul>
    78a0:	4961      	ldr	r1, [pc, #388]	; (7a28 <fRun_9DOF_GBY_KALMAN+0x1d1c>)
    78a2:	f7f8 fff9 	bl	898 <__aeabi_fadd>
    78a6:	465a      	mov	r2, fp
    78a8:	4b63      	ldr	r3, [pc, #396]	; (7a38 <fRun_9DOF_GBY_KALMAN+0x1d2c>)
    78aa:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1796

		// Qw[d-d-] = Qw[9-11][9-11] = E[d-(d-)^T] = cd^2 * Q[d+d+] + Qwd * I
		pthisSV->fQw12x12[i + 9][i + 9] = pthisSV->fcdsq * pthisSV->fPPlus12x12[i + 9][i + 9] + FQWD_9DOF_GBY_KALMAN;
    78ac:	23c8      	movs	r3, #200	; 0xc8
    78ae:	009b      	lsls	r3, r3, #2
    78b0:	58d1      	ldr	r1, [r2, r3]
    78b2:	1c28      	adds	r0, r5, #0
    78b4:	f7f9 fb5e 	bl	f74 <__aeabi_fmul>
    78b8:	21fc      	movs	r1, #252	; 0xfc
    78ba:	0589      	lsls	r1, r1, #22
    78bc:	f7f8 ffec 	bl	898 <__aeabi_fadd>
    78c0:	23d0      	movs	r3, #208	; 0xd0
    78c2:	465a      	mov	r2, fp
    78c4:	00db      	lsls	r3, r3, #3
    78c6:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1784

	// update the covariance matrix components
	for (i = 0; i < 3; i++)
	{
		// Qw[th-th-] = Qw[0-2][0-2] = E[th-(th-)^T] = Q[th+th+] + deltat^2 * (Q[b+b+] + (Qwb + QvG) * I)
		pthisSV->fQw12x12[i][i] = pthisSV->fPPlus12x12[i][i] + pthisSV->fdeltatsq * (pthisSV->fPPlus12x12[i + 3][i + 3] + pthisSV->fQwbplusQvG);
    78c8:	2387      	movs	r3, #135	; 0x87
    78ca:	009b      	lsls	r3, r3, #2
    78cc:	58d3      	ldr	r3, [r2, r3]
    78ce:	4641      	mov	r1, r8
    78d0:	1c18      	adds	r0, r3, #0
    78d2:	4699      	mov	r9, r3
    78d4:	f7f8 ffe0 	bl	898 <__aeabi_fadd>
    78d8:	1c39      	adds	r1, r7, #0
    78da:	f7f9 fb4b 	bl	f74 <__aeabi_fmul>
    78de:	23c0      	movs	r3, #192	; 0xc0
    78e0:	465a      	mov	r2, fp
    78e2:	005b      	lsls	r3, r3, #1
    78e4:	1c01      	adds	r1, r0, #0
    78e6:	58d0      	ldr	r0, [r2, r3]
    78e8:	f7f8 ffd6 	bl	898 <__aeabi_fadd>
    78ec:	239c      	movs	r3, #156	; 0x9c
    78ee:	465a      	mov	r2, fp
    78f0:	00db      	lsls	r3, r3, #3
    78f2:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1787

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw12x12[i + 3][i + 3] = pthisSV->fPPlus12x12[i + 3][i + 3] + FQWB_9DOF_GBY_KALMAN;
    78f4:	494a      	ldr	r1, [pc, #296]	; (7a20 <fRun_9DOF_GBY_KALMAN+0x1d14>)
    78f6:	4648      	mov	r0, r9
    78f8:	f7f8 ffce 	bl	898 <__aeabi_fadd>
    78fc:	465a      	mov	r2, fp
    78fe:	4b4f      	ldr	r3, [pc, #316]	; (7a3c <fRun_9DOF_GBY_KALMAN+0x1d30>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1790

		// Qw[th-b-] = Qw[0-2][3-5] = E[th-(b-)^T] = -deltat * (Q[b+b+] + Qwb * I) = -deltat * Qw[b-b-]
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = -pthisSV->fdeltat * pthisSV->fQw12x12[i + 3][i + 3];
    7900:	1c21      	adds	r1, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1787
	{
		// Qw[th-th-] = Qw[0-2][0-2] = E[th-(th-)^T] = Q[th+th+] + deltat^2 * (Q[b+b+] + (Qwb + QvG) * I)
		pthisSV->fQw12x12[i][i] = pthisSV->fPPlus12x12[i][i] + pthisSV->fdeltatsq * (pthisSV->fPPlus12x12[i + 3][i + 3] + pthisSV->fQwbplusQvG);

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw12x12[i + 3][i + 3] = pthisSV->fPPlus12x12[i + 3][i + 3] + FQWB_9DOF_GBY_KALMAN;
    7902:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1790

		// Qw[th-b-] = Qw[0-2][3-5] = E[th-(b-)^T] = -deltat * (Q[b+b+] + Qwb * I) = -deltat * Qw[b-b-]
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = -pthisSV->fdeltat * pthisSV->fQw12x12[i + 3][i + 3];
    7904:	f7f9 fb36 	bl	f74 <__aeabi_fmul>
    7908:	23ae      	movs	r3, #174	; 0xae
    790a:	465a      	mov	r2, fp
    790c:	00db      	lsls	r3, r3, #3
    790e:	50d0      	str	r0, [r2, r3]
    7910:	4b4b      	ldr	r3, [pc, #300]	; (7a40 <fRun_9DOF_GBY_KALMAN+0x1d34>)
    7912:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1793

		// Qw[a-a-] = Qw[6-8][6-8] = E[a-(a-)^T] = ca^2 * Q[a+a+] + Qwa * I
		pthisSV->fQw12x12[i + 6][i + 6] = pthisSV->fcasq * pthisSV->fPPlus12x12[i + 6][i + 6] + FQWA_9DOF_GBY_KALMAN;
    7914:	23ae      	movs	r3, #174	; 0xae
    7916:	009b      	lsls	r3, r3, #2
    7918:	58d1      	ldr	r1, [r2, r3]
    791a:	1c30      	adds	r0, r6, #0
    791c:	f7f9 fb2a 	bl	f74 <__aeabi_fmul>
    7920:	4941      	ldr	r1, [pc, #260]	; (7a28 <fRun_9DOF_GBY_KALMAN+0x1d1c>)
    7922:	f7f8 ffb9 	bl	898 <__aeabi_fadd>
    7926:	23c3      	movs	r3, #195	; 0xc3
    7928:	465a      	mov	r2, fp
    792a:	00db      	lsls	r3, r3, #3
    792c:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1796

		// Qw[d-d-] = Qw[9-11][9-11] = E[d-(d-)^T] = cd^2 * Q[d+d+] + Qwd * I
		pthisSV->fQw12x12[i + 9][i + 9] = pthisSV->fcdsq * pthisSV->fPPlus12x12[i + 9][i + 9] + FQWD_9DOF_GBY_KALMAN;
    792e:	23d5      	movs	r3, #213	; 0xd5
    7930:	009b      	lsls	r3, r3, #2
    7932:	58d1      	ldr	r1, [r2, r3]
    7934:	1c28      	adds	r0, r5, #0
    7936:	f7f9 fb1d 	bl	f74 <__aeabi_fmul>
    793a:	21fc      	movs	r1, #252	; 0xfc
    793c:	0589      	lsls	r1, r1, #22
    793e:	f7f8 ffab 	bl	898 <__aeabi_fadd>
    7942:	465a      	mov	r2, fp
    7944:	4b3f      	ldr	r3, [pc, #252]	; (7a44 <fRun_9DOF_GBY_KALMAN+0x1d38>)
    7946:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1800
	}

	return;
}  // end fRun_9DOF_GBY_KALMAN
    7948:	b073      	add	sp, #460	; 0x1cc
    794a:	bc3c      	pop	{r2, r3, r4, r5}
    794c:	4690      	mov	r8, r2
    794e:	4699      	mov	r9, r3
    7950:	46a2      	mov	sl, r4
    7952:	46ab      	mov	fp, r5
    7954:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7956:	9804      	ldr	r0, [sp, #16]
    7958:	2100      	movs	r1, #0
    795a:	f7f8 ff6f 	bl	83c <__aeabi_fcmpeq>
    795e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7960:	469b      	mov	fp, r3
    7962:	2800      	cmp	r0, #0
    7964:	d101      	bne.n	796a <fRun_9DOF_GBY_KALMAN+0x1c5e>
    7966:	f001 f86b 	bl	8a40 <PSP_CNFG_MQX_KERNEL_LOGGING+0xa40>
    796a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    796c:	46b9      	mov	r9, r7
    796e:	469a      	mov	sl, r3
    7970:	2318      	movs	r3, #24
    7972:	469c      	mov	ip, r3
    7974:	44a4      	add	ip, r4
    7976:	4663      	mov	r3, ip
    7978:	9304      	str	r3, [sp, #16]
    797a:	1c33      	adds	r3, r6, #0
    797c:	465f      	mov	r7, fp
    797e:	4656      	mov	r6, sl
    7980:	46ab      	mov	fp, r5
    7982:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7984:	2300      	movs	r3, #0
    7986:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7988:	6839      	ldr	r1, [r7, #0]
    798a:	4640      	mov	r0, r8
    798c:	f7f9 faf2 	bl	f74 <__aeabi_fmul>
    7990:	2100      	movs	r1, #0
    7992:	f7f8 ff81 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7996:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7998:	1c05      	adds	r5, r0, #0
    799a:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    799c:	4648      	mov	r0, r9
    799e:	f7f8 ff4d 	bl	83c <__aeabi_fcmpeq>
    79a2:	2800      	cmp	r0, #0
    79a4:	d109      	bne.n	79ba <fRun_9DOF_GBY_KALMAN+0x1cae>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    79a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
    79a8:	4648      	mov	r0, r9
    79aa:	f7f9 fae3 	bl	f74 <__aeabi_fmul>
    79ae:	1c01      	adds	r1, r0, #0
    79b0:	1c28      	adds	r0, r5, #0
    79b2:	f7f8 ff71 	bl	898 <__aeabi_fadd>
    79b6:	1c05      	adds	r5, r0, #0
    79b8:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    79ba:	4650      	mov	r0, sl
    79bc:	2100      	movs	r1, #0
    79be:	f7f8 ff3d 	bl	83c <__aeabi_fcmpeq>
    79c2:	2800      	cmp	r0, #0
    79c4:	d109      	bne.n	79da <fRun_9DOF_GBY_KALMAN+0x1cce>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    79c6:	6e39      	ldr	r1, [r7, #96]	; 0x60
    79c8:	4650      	mov	r0, sl
    79ca:	f7f9 fad3 	bl	f74 <__aeabi_fmul>
    79ce:	1c01      	adds	r1, r0, #0
    79d0:	1c28      	adds	r0, r5, #0
    79d2:	f7f8 ff61 	bl	898 <__aeabi_fadd>
    79d6:	1c05      	adds	r5, r0, #0
    79d8:	6020      	str	r0, [r4, #0]
    79da:	6831      	ldr	r1, [r6, #0]
    79dc:	9802      	ldr	r0, [sp, #8]
    79de:	f7f9 fac9 	bl	f74 <__aeabi_fmul>
    79e2:	1c29      	adds	r1, r5, #0
    79e4:	f7f8 ff58 	bl	898 <__aeabi_fadd>
    79e8:	6020      	str	r0, [r4, #0]
    79ea:	6b31      	ldr	r1, [r6, #48]	; 0x30
    79ec:	1c05      	adds	r5, r0, #0
    79ee:	9803      	ldr	r0, [sp, #12]
    79f0:	f7f9 fac0 	bl	f74 <__aeabi_fmul>
    79f4:	1c29      	adds	r1, r5, #0
    79f6:	f7f8 ff4f 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1397
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
    79fa:	9b04      	ldr	r3, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    79fc:	c401      	stmia	r4!, {r0}
    79fe:	3704      	adds	r7, #4
    7a00:	3604      	adds	r6, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1397
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
    7a02:	429c      	cmp	r4, r3
    7a04:	d1be      	bne.n	7984 <fRun_9DOF_GBY_KALMAN+0x1c78>
    7a06:	465d      	mov	r5, fp
    7a08:	f7ff f8d1 	bl	6bae <fRun_9DOF_GBY_KALMAN+0xea2>
    7a0c:	000006a4 	.word	0x000006a4
    7a10:	000006ac 	.word	0x000006ac
    7a14:	0000082c 	.word	0x0000082c
    7a18:	00000828 	.word	0x00000828
    7a1c:	0000081c 	.word	0x0000081c
    7a20:	3089705f 	.word	0x3089705f
    7a24:	00000514 	.word	0x00000514
    7a28:	38d1b717 	.word	0x38d1b717
    7a2c:	0000064c 	.word	0x0000064c
    7a30:	000004ac 	.word	0x000004ac
    7a34:	0000053c 	.word	0x0000053c
    7a38:	000005e4 	.word	0x000005e4
    7a3c:	0000057c 	.word	0x0000057c
    7a40:	000004ec 	.word	0x000004ec
    7a44:	000006b4 	.word	0x000006b4
    7a48:	9804      	ldr	r0, [sp, #16]
    7a4a:	2100      	movs	r1, #0
    7a4c:	f7f8 fef6 	bl	83c <__aeabi_fcmpeq>
    7a50:	2800      	cmp	r0, #0
    7a52:	d101      	bne.n	7a58 <fRun_9DOF_GBY_KALMAN+0x1d4c>
    7a54:	f000 fc67 	bl	8326 <PSP_CNFG_MQX_KERNEL_LOGGING+0x326>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7a58:	2300      	movs	r3, #0
    7a5a:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7a5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7a5e:	4640      	mov	r0, r8
    7a60:	58e9      	ldr	r1, [r5, r3]
    7a62:	f7f9 fa87 	bl	f74 <__aeabi_fmul>
    7a66:	2100      	movs	r1, #0
    7a68:	f7f8 ff16 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7a6c:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7a6e:	4681      	mov	r9, r0
    7a70:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7a72:	1c38      	adds	r0, r7, #0
    7a74:	f7f8 fee2 	bl	83c <__aeabi_fcmpeq>
    7a78:	2800      	cmp	r0, #0
    7a7a:	d10b      	bne.n	7a94 <fRun_9DOF_GBY_KALMAN+0x1d88>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7a7c:	23a4      	movs	r3, #164	; 0xa4
    7a7e:	005b      	lsls	r3, r3, #1
    7a80:	58e9      	ldr	r1, [r5, r3]
    7a82:	1c38      	adds	r0, r7, #0
    7a84:	f7f9 fa76 	bl	f74 <__aeabi_fmul>
    7a88:	1c01      	adds	r1, r0, #0
    7a8a:	4648      	mov	r0, r9
    7a8c:	f7f8 ff04 	bl	898 <__aeabi_fadd>
    7a90:	4681      	mov	r9, r0
    7a92:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7a94:	1c30      	adds	r0, r6, #0
    7a96:	2100      	movs	r1, #0
    7a98:	f7f8 fed0 	bl	83c <__aeabi_fcmpeq>
    7a9c:	2800      	cmp	r0, #0
    7a9e:	d10b      	bne.n	7ab8 <fRun_9DOF_GBY_KALMAN+0x1dac>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7aa0:	23bc      	movs	r3, #188	; 0xbc
    7aa2:	005b      	lsls	r3, r3, #1
    7aa4:	58e9      	ldr	r1, [r5, r3]
    7aa6:	1c30      	adds	r0, r6, #0
    7aa8:	f7f9 fa64 	bl	f74 <__aeabi_fmul>
    7aac:	1c01      	adds	r1, r0, #0
    7aae:	4648      	mov	r0, r9
    7ab0:	f7f8 fef2 	bl	898 <__aeabi_fadd>
    7ab4:	4681      	mov	r9, r0
    7ab6:	6020      	str	r0, [r4, #0]
    7ab8:	23ec      	movs	r3, #236	; 0xec
    7aba:	005b      	lsls	r3, r3, #1
    7abc:	58e9      	ldr	r1, [r5, r3]
    7abe:	9802      	ldr	r0, [sp, #8]
    7ac0:	f7f9 fa58 	bl	f74 <__aeabi_fmul>
    7ac4:	4649      	mov	r1, r9
    7ac6:	f7f8 fee7 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7aca:	2300      	movs	r3, #0
    7acc:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7ace:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7ad0:	6020      	str	r0, [r4, #0]
    7ad2:	58e9      	ldr	r1, [r5, r3]
    7ad4:	4640      	mov	r0, r8
    7ad6:	f7f9 fa4d 	bl	f74 <__aeabi_fmul>
    7ada:	2100      	movs	r1, #0
    7adc:	f7f8 fedc 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7ae0:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7ae2:	4681      	mov	r9, r0
    7ae4:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7ae6:	1c38      	adds	r0, r7, #0
    7ae8:	f7f8 fea8 	bl	83c <__aeabi_fcmpeq>
    7aec:	2800      	cmp	r0, #0
    7aee:	d10b      	bne.n	7b08 <fRun_9DOF_GBY_KALMAN+0x1dfc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7af0:	23a6      	movs	r3, #166	; 0xa6
    7af2:	005b      	lsls	r3, r3, #1
    7af4:	58e9      	ldr	r1, [r5, r3]
    7af6:	1c38      	adds	r0, r7, #0
    7af8:	f7f9 fa3c 	bl	f74 <__aeabi_fmul>
    7afc:	1c01      	adds	r1, r0, #0
    7afe:	4648      	mov	r0, r9
    7b00:	f7f8 feca 	bl	898 <__aeabi_fadd>
    7b04:	4681      	mov	r9, r0
    7b06:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7b08:	1c30      	adds	r0, r6, #0
    7b0a:	2100      	movs	r1, #0
    7b0c:	f7f8 fe96 	bl	83c <__aeabi_fcmpeq>
    7b10:	2800      	cmp	r0, #0
    7b12:	d10b      	bne.n	7b2c <fRun_9DOF_GBY_KALMAN+0x1e20>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7b14:	23be      	movs	r3, #190	; 0xbe
    7b16:	005b      	lsls	r3, r3, #1
    7b18:	58e9      	ldr	r1, [r5, r3]
    7b1a:	1c30      	adds	r0, r6, #0
    7b1c:	f7f9 fa2a 	bl	f74 <__aeabi_fmul>
    7b20:	1c01      	adds	r1, r0, #0
    7b22:	4648      	mov	r0, r9
    7b24:	f7f8 feb8 	bl	898 <__aeabi_fadd>
    7b28:	4681      	mov	r9, r0
    7b2a:	6060      	str	r0, [r4, #4]
    7b2c:	23ee      	movs	r3, #238	; 0xee
    7b2e:	005b      	lsls	r3, r3, #1
    7b30:	58e9      	ldr	r1, [r5, r3]
    7b32:	9802      	ldr	r0, [sp, #8]
    7b34:	f7f9 fa1e 	bl	f74 <__aeabi_fmul>
    7b38:	4649      	mov	r1, r9
    7b3a:	f7f8 fead 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7b3e:	2300      	movs	r3, #0
    7b40:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7b42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7b44:	6060      	str	r0, [r4, #4]
    7b46:	58e9      	ldr	r1, [r5, r3]
    7b48:	4640      	mov	r0, r8
    7b4a:	f7f9 fa13 	bl	f74 <__aeabi_fmul>
    7b4e:	2100      	movs	r1, #0
    7b50:	f7f8 fea2 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7b54:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7b56:	4681      	mov	r9, r0
    7b58:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7b5a:	1c38      	adds	r0, r7, #0
    7b5c:	f7f8 fe6e 	bl	83c <__aeabi_fcmpeq>
    7b60:	2800      	cmp	r0, #0
    7b62:	d10b      	bne.n	7b7c <fRun_9DOF_GBY_KALMAN+0x1e70>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7b64:	23a8      	movs	r3, #168	; 0xa8
    7b66:	005b      	lsls	r3, r3, #1
    7b68:	58e9      	ldr	r1, [r5, r3]
    7b6a:	1c38      	adds	r0, r7, #0
    7b6c:	f7f9 fa02 	bl	f74 <__aeabi_fmul>
    7b70:	1c01      	adds	r1, r0, #0
    7b72:	4648      	mov	r0, r9
    7b74:	f7f8 fe90 	bl	898 <__aeabi_fadd>
    7b78:	4681      	mov	r9, r0
    7b7a:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7b7c:	1c30      	adds	r0, r6, #0
    7b7e:	2100      	movs	r1, #0
    7b80:	f7f8 fe5c 	bl	83c <__aeabi_fcmpeq>
    7b84:	2800      	cmp	r0, #0
    7b86:	d10b      	bne.n	7ba0 <fRun_9DOF_GBY_KALMAN+0x1e94>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7b88:	23c0      	movs	r3, #192	; 0xc0
    7b8a:	005b      	lsls	r3, r3, #1
    7b8c:	58e9      	ldr	r1, [r5, r3]
    7b8e:	1c30      	adds	r0, r6, #0
    7b90:	f7f9 f9f0 	bl	f74 <__aeabi_fmul>
    7b94:	1c01      	adds	r1, r0, #0
    7b96:	4648      	mov	r0, r9
    7b98:	f7f8 fe7e 	bl	898 <__aeabi_fadd>
    7b9c:	4681      	mov	r9, r0
    7b9e:	60a0      	str	r0, [r4, #8]
    7ba0:	23f0      	movs	r3, #240	; 0xf0
    7ba2:	005b      	lsls	r3, r3, #1
    7ba4:	58e9      	ldr	r1, [r5, r3]
    7ba6:	9802      	ldr	r0, [sp, #8]
    7ba8:	f7f9 f9e4 	bl	f74 <__aeabi_fmul>
    7bac:	4649      	mov	r1, r9
    7bae:	f7f8 fe73 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7bb2:	2300      	movs	r3, #0
    7bb4:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7bb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7bb8:	60a0      	str	r0, [r4, #8]
    7bba:	58e9      	ldr	r1, [r5, r3]
    7bbc:	4640      	mov	r0, r8
    7bbe:	f7f9 f9d9 	bl	f74 <__aeabi_fmul>
    7bc2:	2100      	movs	r1, #0
    7bc4:	f7f8 fe68 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7bc8:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7bca:	4681      	mov	r9, r0
    7bcc:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7bce:	1c38      	adds	r0, r7, #0
    7bd0:	f7f8 fe34 	bl	83c <__aeabi_fcmpeq>
    7bd4:	2800      	cmp	r0, #0
    7bd6:	d10b      	bne.n	7bf0 <fRun_9DOF_GBY_KALMAN+0x1ee4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7bd8:	23aa      	movs	r3, #170	; 0xaa
    7bda:	005b      	lsls	r3, r3, #1
    7bdc:	58e9      	ldr	r1, [r5, r3]
    7bde:	1c38      	adds	r0, r7, #0
    7be0:	f7f9 f9c8 	bl	f74 <__aeabi_fmul>
    7be4:	1c01      	adds	r1, r0, #0
    7be6:	4648      	mov	r0, r9
    7be8:	f7f8 fe56 	bl	898 <__aeabi_fadd>
    7bec:	4681      	mov	r9, r0
    7bee:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7bf0:	1c30      	adds	r0, r6, #0
    7bf2:	2100      	movs	r1, #0
    7bf4:	f7f8 fe22 	bl	83c <__aeabi_fcmpeq>
    7bf8:	2800      	cmp	r0, #0
    7bfa:	d10b      	bne.n	7c14 <fRun_9DOF_GBY_KALMAN+0x1f08>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7bfc:	23c2      	movs	r3, #194	; 0xc2
    7bfe:	005b      	lsls	r3, r3, #1
    7c00:	58e9      	ldr	r1, [r5, r3]
    7c02:	1c30      	adds	r0, r6, #0
    7c04:	f7f9 f9b6 	bl	f74 <__aeabi_fmul>
    7c08:	1c01      	adds	r1, r0, #0
    7c0a:	4648      	mov	r0, r9
    7c0c:	f7f8 fe44 	bl	898 <__aeabi_fadd>
    7c10:	4681      	mov	r9, r0
    7c12:	60e0      	str	r0, [r4, #12]
    7c14:	23f2      	movs	r3, #242	; 0xf2
    7c16:	005b      	lsls	r3, r3, #1
    7c18:	58e9      	ldr	r1, [r5, r3]
    7c1a:	9802      	ldr	r0, [sp, #8]
    7c1c:	f7f9 f9aa 	bl	f74 <__aeabi_fmul>
    7c20:	4649      	mov	r1, r9
    7c22:	f7f8 fe39 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7c26:	2300      	movs	r3, #0
    7c28:	6123      	str	r3, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7c2a:	2394      	movs	r3, #148	; 0x94
    7c2c:	60e0      	str	r0, [r4, #12]
    7c2e:	005b      	lsls	r3, r3, #1
    7c30:	58e9      	ldr	r1, [r5, r3]
    7c32:	4640      	mov	r0, r8
    7c34:	f7f9 f99e 	bl	f74 <__aeabi_fmul>
    7c38:	2100      	movs	r1, #0
    7c3a:	f7f8 fe2d 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7c3e:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7c40:	4681      	mov	r9, r0
    7c42:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7c44:	1c38      	adds	r0, r7, #0
    7c46:	f7f8 fdf9 	bl	83c <__aeabi_fcmpeq>
    7c4a:	2800      	cmp	r0, #0
    7c4c:	d10b      	bne.n	7c66 <fRun_9DOF_GBY_KALMAN+0x1f5a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7c4e:	23ac      	movs	r3, #172	; 0xac
    7c50:	005b      	lsls	r3, r3, #1
    7c52:	58e9      	ldr	r1, [r5, r3]
    7c54:	1c38      	adds	r0, r7, #0
    7c56:	f7f9 f98d 	bl	f74 <__aeabi_fmul>
    7c5a:	1c01      	adds	r1, r0, #0
    7c5c:	4648      	mov	r0, r9
    7c5e:	f7f8 fe1b 	bl	898 <__aeabi_fadd>
    7c62:	4681      	mov	r9, r0
    7c64:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7c66:	1c30      	adds	r0, r6, #0
    7c68:	2100      	movs	r1, #0
    7c6a:	f7f8 fde7 	bl	83c <__aeabi_fcmpeq>
    7c6e:	2800      	cmp	r0, #0
    7c70:	d10b      	bne.n	7c8a <fRun_9DOF_GBY_KALMAN+0x1f7e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7c72:	23c4      	movs	r3, #196	; 0xc4
    7c74:	005b      	lsls	r3, r3, #1
    7c76:	58e9      	ldr	r1, [r5, r3]
    7c78:	1c30      	adds	r0, r6, #0
    7c7a:	f7f9 f97b 	bl	f74 <__aeabi_fmul>
    7c7e:	1c01      	adds	r1, r0, #0
    7c80:	4648      	mov	r0, r9
    7c82:	f7f8 fe09 	bl	898 <__aeabi_fadd>
    7c86:	4681      	mov	r9, r0
    7c88:	6120      	str	r0, [r4, #16]
    7c8a:	23f4      	movs	r3, #244	; 0xf4
    7c8c:	005b      	lsls	r3, r3, #1
    7c8e:	58e9      	ldr	r1, [r5, r3]
    7c90:	9802      	ldr	r0, [sp, #8]
    7c92:	f7f9 f96f 	bl	f74 <__aeabi_fmul>
    7c96:	4649      	mov	r1, r9
    7c98:	f7f8 fdfe 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7c9c:	2300      	movs	r3, #0
    7c9e:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7ca0:	2396      	movs	r3, #150	; 0x96
    7ca2:	6120      	str	r0, [r4, #16]
    7ca4:	005b      	lsls	r3, r3, #1
    7ca6:	58e9      	ldr	r1, [r5, r3]
    7ca8:	4640      	mov	r0, r8
    7caa:	f7f9 f963 	bl	f74 <__aeabi_fmul>
    7cae:	2100      	movs	r1, #0
    7cb0:	f7f8 fdf2 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7cb4:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7cb6:	4680      	mov	r8, r0
    7cb8:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7cba:	1c38      	adds	r0, r7, #0
    7cbc:	f7f8 fdbe 	bl	83c <__aeabi_fcmpeq>
    7cc0:	2800      	cmp	r0, #0
    7cc2:	d10b      	bne.n	7cdc <fRun_9DOF_GBY_KALMAN+0x1fd0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7cc4:	23ae      	movs	r3, #174	; 0xae
    7cc6:	005b      	lsls	r3, r3, #1
    7cc8:	58e9      	ldr	r1, [r5, r3]
    7cca:	1c38      	adds	r0, r7, #0
    7ccc:	f7f9 f952 	bl	f74 <__aeabi_fmul>
    7cd0:	1c01      	adds	r1, r0, #0
    7cd2:	4640      	mov	r0, r8
    7cd4:	f7f8 fde0 	bl	898 <__aeabi_fadd>
    7cd8:	4680      	mov	r8, r0
    7cda:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7cdc:	1c30      	adds	r0, r6, #0
    7cde:	2100      	movs	r1, #0
    7ce0:	f7f8 fdac 	bl	83c <__aeabi_fcmpeq>
    7ce4:	2800      	cmp	r0, #0
    7ce6:	d10b      	bne.n	7d00 <fRun_9DOF_GBY_KALMAN+0x1ff4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7ce8:	23c6      	movs	r3, #198	; 0xc6
    7cea:	005b      	lsls	r3, r3, #1
    7cec:	58e9      	ldr	r1, [r5, r3]
    7cee:	1c30      	adds	r0, r6, #0
    7cf0:	f7f9 f940 	bl	f74 <__aeabi_fmul>
    7cf4:	1c01      	adds	r1, r0, #0
    7cf6:	4640      	mov	r0, r8
    7cf8:	f7f8 fdce 	bl	898 <__aeabi_fadd>
    7cfc:	4680      	mov	r8, r0
    7cfe:	6160      	str	r0, [r4, #20]
    7d00:	23f6      	movs	r3, #246	; 0xf6
    7d02:	9802      	ldr	r0, [sp, #8]
    7d04:	005b      	lsls	r3, r3, #1
    7d06:	f7fe ff4b 	bl	6ba0 <fRun_9DOF_GBY_KALMAN+0xe94>
    7d0a:	9804      	ldr	r0, [sp, #16]
    7d0c:	2100      	movs	r1, #0
    7d0e:	f7f8 fd95 	bl	83c <__aeabi_fcmpeq>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7d12:	2300      	movs	r3, #0
    7d14:	6023      	str	r3, [r4, #0]
    7d16:	2800      	cmp	r0, #0
    7d18:	d101      	bne.n	7d1e <fRun_9DOF_GBY_KALMAN+0x2012>
    7d1a:	f000 fd33 	bl	8784 <PSP_CNFG_MQX_KERNEL_LOGGING+0x784>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7d1e:	1c38      	adds	r0, r7, #0
    7d20:	1c19      	adds	r1, r3, #0
    7d22:	f7f8 fd8b 	bl	83c <__aeabi_fcmpeq>
    7d26:	2800      	cmp	r0, #0
    7d28:	d001      	beq.n	7d2e <fRun_9DOF_GBY_KALMAN+0x2022>
    7d2a:	f001 f990 	bl	904e <PSP_CNFG_MQX_KERNEL_LOGGING+0x104e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7d2e:	23a4      	movs	r3, #164	; 0xa4
    7d30:	005b      	lsls	r3, r3, #1
    7d32:	58e9      	ldr	r1, [r5, r3]
    7d34:	1c38      	adds	r0, r7, #0
    7d36:	f7f9 f91d 	bl	f74 <__aeabi_fmul>
    7d3a:	2100      	movs	r1, #0
    7d3c:	f7f8 fdac 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7d40:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7d42:	4680      	mov	r8, r0
    7d44:	4681      	mov	r9, r0
    7d46:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7d48:	1c30      	adds	r0, r6, #0
    7d4a:	f7f8 fd77 	bl	83c <__aeabi_fcmpeq>
    7d4e:	2800      	cmp	r0, #0
    7d50:	d101      	bne.n	7d56 <fRun_9DOF_GBY_KALMAN+0x204a>
    7d52:	f001 fe03 	bl	995c <PSP_CNFG_MQX_KERNEL_LOGGING+0x195c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7d56:	23ec      	movs	r3, #236	; 0xec
    7d58:	005b      	lsls	r3, r3, #1
    7d5a:	58e9      	ldr	r1, [r5, r3]
    7d5c:	9802      	ldr	r0, [sp, #8]
    7d5e:	f7f9 f909 	bl	f74 <__aeabi_fmul>
    7d62:	1c01      	adds	r1, r0, #0
    7d64:	4640      	mov	r0, r8
    7d66:	f7f8 fd97 	bl	898 <__aeabi_fadd>
    7d6a:	1c23      	adds	r3, r4, #0
    7d6c:	c301      	stmia	r3!, {r0}
    7d6e:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7d70:	2300      	movs	r3, #0
    7d72:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    7d74:	238e      	movs	r3, #142	; 0x8e
    7d76:	005b      	lsls	r3, r3, #1
    7d78:	469a      	mov	sl, r3
    7d7a:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7d7c:	4653      	mov	r3, sl
    7d7e:	1c38      	adds	r0, r7, #0
    7d80:	6b19      	ldr	r1, [r3, #48]	; 0x30
    7d82:	f7f9 f8f7 	bl	f74 <__aeabi_fmul>
    7d86:	2100      	movs	r1, #0
    7d88:	f7f8 fd86 	bl	898 <__aeabi_fadd>
    7d8c:	4643      	mov	r3, r8
    7d8e:	1c04      	adds	r4, r0, #0
    7d90:	4681      	mov	r9, r0
    7d92:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7d94:	2100      	movs	r1, #0
    7d96:	1c30      	adds	r0, r6, #0
    7d98:	f7f8 fd50 	bl	83c <__aeabi_fcmpeq>
    7d9c:	2800      	cmp	r0, #0
    7d9e:	d101      	bne.n	7da4 <fRun_9DOF_GBY_KALMAN+0x2098>
    7da0:	f001 fe03 	bl	99aa <PSP_CNFG_MQX_KERNEL_LOGGING+0x19aa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7da4:	4652      	mov	r2, sl
    7da6:	23c0      	movs	r3, #192	; 0xc0
    7da8:	9802      	ldr	r0, [sp, #8]
    7daa:	58d1      	ldr	r1, [r2, r3]
    7dac:	f7f9 f8e2 	bl	f74 <__aeabi_fmul>
    7db0:	1c21      	adds	r1, r4, #0
    7db2:	f7f8 fd71 	bl	898 <__aeabi_fadd>
    7db6:	4643      	mov	r3, r8
    7db8:	c301      	stmia	r3!, {r0}
    7dba:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7dbc:	2200      	movs	r2, #0
    7dbe:	4643      	mov	r3, r8
    7dc0:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    7dc2:	2390      	movs	r3, #144	; 0x90
    7dc4:	005b      	lsls	r3, r3, #1
    7dc6:	469a      	mov	sl, r3
    7dc8:	44aa      	add	sl, r5
    7dca:	f001 f97c 	bl	90c6 <PSP_CNFG_MQX_KERNEL_LOGGING+0x10c6>
    7dce:	9804      	ldr	r0, [sp, #16]
    7dd0:	2100      	movs	r1, #0
    7dd2:	f7f8 fd33 	bl	83c <__aeabi_fcmpeq>
    7dd6:	2800      	cmp	r0, #0
    7dd8:	d101      	bne.n	7dde <fRun_9DOF_GBY_KALMAN+0x20d2>
    7dda:	f001 f837 	bl	8e4c <PSP_CNFG_MQX_KERNEL_LOGGING+0xe4c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7dde:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7de0:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7de2:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7de4:	1c19      	adds	r1, r3, #0
    7de6:	f7f8 fd29 	bl	83c <__aeabi_fcmpeq>
    7dea:	2800      	cmp	r0, #0
    7dec:	d001      	beq.n	7df2 <fRun_9DOF_GBY_KALMAN+0x20e6>
    7dee:	f001 f992 	bl	9116 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1116>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7df2:	23a4      	movs	r3, #164	; 0xa4
    7df4:	005b      	lsls	r3, r3, #1
    7df6:	58e9      	ldr	r1, [r5, r3]
    7df8:	1c38      	adds	r0, r7, #0
    7dfa:	f7f9 f8bb 	bl	f74 <__aeabi_fmul>
    7dfe:	2100      	movs	r1, #0
    7e00:	f7f8 fd4a 	bl	898 <__aeabi_fadd>
    7e04:	4680      	mov	r8, r0
    7e06:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7e08:	1c30      	adds	r0, r6, #0
    7e0a:	2100      	movs	r1, #0
    7e0c:	f7f8 fd16 	bl	83c <__aeabi_fcmpeq>
    7e10:	2800      	cmp	r0, #0
    7e12:	d10b      	bne.n	7e2c <fRun_9DOF_GBY_KALMAN+0x2120>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7e14:	23bc      	movs	r3, #188	; 0xbc
    7e16:	005b      	lsls	r3, r3, #1
    7e18:	58e9      	ldr	r1, [r5, r3]
    7e1a:	1c30      	adds	r0, r6, #0
    7e1c:	f7f9 f8aa 	bl	f74 <__aeabi_fmul>
    7e20:	1c01      	adds	r1, r0, #0
    7e22:	4640      	mov	r0, r8
    7e24:	f7f8 fd38 	bl	898 <__aeabi_fadd>
    7e28:	4680      	mov	r8, r0
    7e2a:	6020      	str	r0, [r4, #0]
    7e2c:	23ec      	movs	r3, #236	; 0xec
    7e2e:	005b      	lsls	r3, r3, #1
    7e30:	58e9      	ldr	r1, [r5, r3]
    7e32:	9802      	ldr	r0, [sp, #8]
    7e34:	f7f9 f89e 	bl	f74 <__aeabi_fmul>
    7e38:	4641      	mov	r1, r8
    7e3a:	f7f8 fd2d 	bl	898 <__aeabi_fadd>
    7e3e:	4680      	mov	r8, r0
    7e40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7e42:	6020      	str	r0, [r4, #0]
    7e44:	58e9      	ldr	r1, [r5, r3]
    7e46:	9803      	ldr	r0, [sp, #12]
    7e48:	f7f9 f894 	bl	f74 <__aeabi_fmul>
    7e4c:	4641      	mov	r1, r8
    7e4e:	f7f8 fd23 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7e52:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7e54:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7e56:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7e58:	1c38      	adds	r0, r7, #0
    7e5a:	1c19      	adds	r1, r3, #0
    7e5c:	f7f8 fcee 	bl	83c <__aeabi_fcmpeq>
    7e60:	2800      	cmp	r0, #0
    7e62:	d001      	beq.n	7e68 <fRun_9DOF_GBY_KALMAN+0x215c>
    7e64:	f002 fa0d 	bl	a282 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2282>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7e68:	23a6      	movs	r3, #166	; 0xa6
    7e6a:	005b      	lsls	r3, r3, #1
    7e6c:	58e9      	ldr	r1, [r5, r3]
    7e6e:	1c38      	adds	r0, r7, #0
    7e70:	f7f9 f880 	bl	f74 <__aeabi_fmul>
    7e74:	2100      	movs	r1, #0
    7e76:	f7f8 fd0f 	bl	898 <__aeabi_fadd>
    7e7a:	4680      	mov	r8, r0
    7e7c:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7e7e:	1c30      	adds	r0, r6, #0
    7e80:	2100      	movs	r1, #0
    7e82:	f7f8 fcdb 	bl	83c <__aeabi_fcmpeq>
    7e86:	2800      	cmp	r0, #0
    7e88:	d10b      	bne.n	7ea2 <fRun_9DOF_GBY_KALMAN+0x2196>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7e8a:	23be      	movs	r3, #190	; 0xbe
    7e8c:	005b      	lsls	r3, r3, #1
    7e8e:	58e9      	ldr	r1, [r5, r3]
    7e90:	1c30      	adds	r0, r6, #0
    7e92:	f7f9 f86f 	bl	f74 <__aeabi_fmul>
    7e96:	1c01      	adds	r1, r0, #0
    7e98:	4640      	mov	r0, r8
    7e9a:	f7f8 fcfd 	bl	898 <__aeabi_fadd>
    7e9e:	4680      	mov	r8, r0
    7ea0:	6060      	str	r0, [r4, #4]
    7ea2:	23ee      	movs	r3, #238	; 0xee
    7ea4:	005b      	lsls	r3, r3, #1
    7ea6:	58e9      	ldr	r1, [r5, r3]
    7ea8:	9802      	ldr	r0, [sp, #8]
    7eaa:	f7f9 f863 	bl	f74 <__aeabi_fmul>
    7eae:	4641      	mov	r1, r8
    7eb0:	f7f8 fcf2 	bl	898 <__aeabi_fadd>
    7eb4:	4680      	mov	r8, r0
    7eb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    7eb8:	6060      	str	r0, [r4, #4]
    7eba:	58e9      	ldr	r1, [r5, r3]
    7ebc:	9803      	ldr	r0, [sp, #12]
    7ebe:	f7f9 f859 	bl	f74 <__aeabi_fmul>
    7ec2:	4641      	mov	r1, r8
    7ec4:	f7f8 fce8 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7ec8:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7eca:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7ecc:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7ece:	1c38      	adds	r0, r7, #0
    7ed0:	1c19      	adds	r1, r3, #0
    7ed2:	f7f8 fcb3 	bl	83c <__aeabi_fcmpeq>
    7ed6:	2800      	cmp	r0, #0
    7ed8:	d001      	beq.n	7ede <fRun_9DOF_GBY_KALMAN+0x21d2>
    7eda:	f002 f9ed 	bl	a2b8 <PSP_CNFG_MQX_KERNEL_LOGGING+0x22b8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7ede:	23a8      	movs	r3, #168	; 0xa8
    7ee0:	005b      	lsls	r3, r3, #1
    7ee2:	58e9      	ldr	r1, [r5, r3]
    7ee4:	1c38      	adds	r0, r7, #0
    7ee6:	f7f9 f845 	bl	f74 <__aeabi_fmul>
    7eea:	2100      	movs	r1, #0
    7eec:	f7f8 fcd4 	bl	898 <__aeabi_fadd>
    7ef0:	4680      	mov	r8, r0
    7ef2:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7ef4:	1c30      	adds	r0, r6, #0
    7ef6:	2100      	movs	r1, #0
    7ef8:	f7f8 fca0 	bl	83c <__aeabi_fcmpeq>
    7efc:	2800      	cmp	r0, #0
    7efe:	d10b      	bne.n	7f18 <fRun_9DOF_GBY_KALMAN+0x220c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7f00:	23c0      	movs	r3, #192	; 0xc0
    7f02:	005b      	lsls	r3, r3, #1
    7f04:	58e9      	ldr	r1, [r5, r3]
    7f06:	1c30      	adds	r0, r6, #0
    7f08:	f7f9 f834 	bl	f74 <__aeabi_fmul>
    7f0c:	1c01      	adds	r1, r0, #0
    7f0e:	4640      	mov	r0, r8
    7f10:	f7f8 fcc2 	bl	898 <__aeabi_fadd>
    7f14:	4680      	mov	r8, r0
    7f16:	60a0      	str	r0, [r4, #8]
    7f18:	23f0      	movs	r3, #240	; 0xf0
    7f1a:	005b      	lsls	r3, r3, #1
    7f1c:	58e9      	ldr	r1, [r5, r3]
    7f1e:	9802      	ldr	r0, [sp, #8]
    7f20:	f7f9 f828 	bl	f74 <__aeabi_fmul>
    7f24:	4641      	mov	r1, r8
    7f26:	f7f8 fcb7 	bl	898 <__aeabi_fadd>
    7f2a:	4680      	mov	r8, r0
    7f2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7f2e:	60a0      	str	r0, [r4, #8]
    7f30:	58e9      	ldr	r1, [r5, r3]
    7f32:	9803      	ldr	r0, [sp, #12]
    7f34:	f7f9 f81e 	bl	f74 <__aeabi_fmul>
    7f38:	4641      	mov	r1, r8
    7f3a:	f7f8 fcad 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7f3e:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7f40:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7f42:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7f44:	1c38      	adds	r0, r7, #0
    7f46:	1c19      	adds	r1, r3, #0
    7f48:	f7f8 fc78 	bl	83c <__aeabi_fcmpeq>
    7f4c:	2800      	cmp	r0, #0
    7f4e:	d001      	beq.n	7f54 <fRun_9DOF_GBY_KALMAN+0x2248>
    7f50:	f002 f9ae 	bl	a2b0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x22b0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7f54:	23aa      	movs	r3, #170	; 0xaa
    7f56:	005b      	lsls	r3, r3, #1
    7f58:	58e9      	ldr	r1, [r5, r3]
    7f5a:	1c38      	adds	r0, r7, #0
    7f5c:	f7f9 f80a 	bl	f74 <__aeabi_fmul>
    7f60:	2100      	movs	r1, #0
    7f62:	f7f8 fc99 	bl	898 <__aeabi_fadd>
    7f66:	4680      	mov	r8, r0
    7f68:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7f6a:	1c30      	adds	r0, r6, #0
    7f6c:	2100      	movs	r1, #0
    7f6e:	f7f8 fc65 	bl	83c <__aeabi_fcmpeq>
    7f72:	2800      	cmp	r0, #0
    7f74:	d10b      	bne.n	7f8e <fRun_9DOF_GBY_KALMAN+0x2282>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7f76:	23c2      	movs	r3, #194	; 0xc2
    7f78:	005b      	lsls	r3, r3, #1
    7f7a:	58e9      	ldr	r1, [r5, r3]
    7f7c:	1c30      	adds	r0, r6, #0
    7f7e:	f7f8 fff9 	bl	f74 <__aeabi_fmul>
    7f82:	1c01      	adds	r1, r0, #0
    7f84:	4640      	mov	r0, r8
    7f86:	f7f8 fc87 	bl	898 <__aeabi_fadd>
    7f8a:	4680      	mov	r8, r0
    7f8c:	60e0      	str	r0, [r4, #12]
    7f8e:	23f2      	movs	r3, #242	; 0xf2
    7f90:	005b      	lsls	r3, r3, #1
    7f92:	58e9      	ldr	r1, [r5, r3]
    7f94:	9802      	ldr	r0, [sp, #8]
    7f96:	f7f8 ffed 	bl	f74 <__aeabi_fmul>
    7f9a:	4641      	mov	r1, r8
    7f9c:	f7f8 fc7c 	bl	898 <__aeabi_fadd>
    7fa0:	2385      	movs	r3, #133	; 0x85
    7fa2:	4680      	mov	r8, r0
    7fa4:	009b      	lsls	r3, r3, #2
    7fa6:	60e0      	str	r0, [r4, #12]
    7fa8:	58e9      	ldr	r1, [r5, r3]
    7faa:	9803      	ldr	r0, [sp, #12]
    7fac:	f7f8 ffe2 	bl	f74 <__aeabi_fmul>
    7fb0:	4641      	mov	r1, r8
    7fb2:	f7f8 fc71 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7fb6:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7fb8:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7fba:	6123      	str	r3, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7fbc:	1c38      	adds	r0, r7, #0
    7fbe:	1c19      	adds	r1, r3, #0
    7fc0:	f7f8 fc3c 	bl	83c <__aeabi_fcmpeq>
    7fc4:	2800      	cmp	r0, #0
    7fc6:	d001      	beq.n	7fcc <fRun_9DOF_GBY_KALMAN+0x22c0>
    7fc8:	f002 f97a 	bl	a2c0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x22c0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7fcc:	23ac      	movs	r3, #172	; 0xac
    7fce:	005b      	lsls	r3, r3, #1
    7fd0:	58e9      	ldr	r1, [r5, r3]
    7fd2:	1c38      	adds	r0, r7, #0
    7fd4:	f7f8 ffce 	bl	f74 <__aeabi_fmul>
    7fd8:	2100      	movs	r1, #0
    7fda:	f7f8 fc5d 	bl	898 <__aeabi_fadd>
    7fde:	4680      	mov	r8, r0
    7fe0:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7fe2:	1c30      	adds	r0, r6, #0
    7fe4:	2100      	movs	r1, #0
    7fe6:	f7f8 fc29 	bl	83c <__aeabi_fcmpeq>
    7fea:	2800      	cmp	r0, #0
    7fec:	d10b      	bne.n	8006 <PSP_CNFG_MQX_KERNEL_LOGGING+0x6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7fee:	23c4      	movs	r3, #196	; 0xc4
    7ff0:	005b      	lsls	r3, r3, #1
    7ff2:	58e9      	ldr	r1, [r5, r3]
    7ff4:	1c30      	adds	r0, r6, #0
    7ff6:	f7f8 ffbd 	bl	f74 <__aeabi_fmul>
    7ffa:	1c01      	adds	r1, r0, #0
    7ffc:	4640      	mov	r0, r8
    7ffe:	f7f8 fc4b 	bl	898 <__aeabi_fadd>
    8002:	4680      	mov	r8, r0
    8004:	6120      	str	r0, [r4, #16]
    8006:	23f4      	movs	r3, #244	; 0xf4
    8008:	005b      	lsls	r3, r3, #1
    800a:	58e9      	ldr	r1, [r5, r3]
    800c:	9802      	ldr	r0, [sp, #8]
    800e:	f7f8 ffb1 	bl	f74 <__aeabi_fmul>
    8012:	4641      	mov	r1, r8
    8014:	f7f8 fc40 	bl	898 <__aeabi_fadd>
    8018:	2386      	movs	r3, #134	; 0x86
    801a:	4680      	mov	r8, r0
    801c:	009b      	lsls	r3, r3, #2
    801e:	6120      	str	r0, [r4, #16]
    8020:	58e9      	ldr	r1, [r5, r3]
    8022:	9803      	ldr	r0, [sp, #12]
    8024:	f7f8 ffa6 	bl	f74 <__aeabi_fmul>
    8028:	4641      	mov	r1, r8
    802a:	f7f8 fc35 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    802e:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8030:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8032:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8034:	1c38      	adds	r0, r7, #0
    8036:	1c19      	adds	r1, r3, #0
    8038:	f7f8 fc00 	bl	83c <__aeabi_fcmpeq>
    803c:	2800      	cmp	r0, #0
    803e:	d001      	beq.n	8044 <PSP_CNFG_MQX_KERNEL_LOGGING+0x44>
    8040:	f002 f923 	bl	a28a <PSP_CNFG_MQX_KERNEL_LOGGING+0x228a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8044:	23ae      	movs	r3, #174	; 0xae
    8046:	005b      	lsls	r3, r3, #1
    8048:	58e9      	ldr	r1, [r5, r3]
    804a:	1c38      	adds	r0, r7, #0
    804c:	f7f8 ff92 	bl	f74 <__aeabi_fmul>
    8050:	2100      	movs	r1, #0
    8052:	f7f8 fc21 	bl	898 <__aeabi_fadd>
    8056:	1c07      	adds	r7, r0, #0
    8058:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    805a:	1c30      	adds	r0, r6, #0
    805c:	2100      	movs	r1, #0
    805e:	f7f8 fbed 	bl	83c <__aeabi_fcmpeq>
    8062:	2800      	cmp	r0, #0
    8064:	d10b      	bne.n	807e <PSP_CNFG_MQX_KERNEL_LOGGING+0x7e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8066:	23c6      	movs	r3, #198	; 0xc6
    8068:	005b      	lsls	r3, r3, #1
    806a:	58e9      	ldr	r1, [r5, r3]
    806c:	1c30      	adds	r0, r6, #0
    806e:	f7f8 ff81 	bl	f74 <__aeabi_fmul>
    8072:	1c01      	adds	r1, r0, #0
    8074:	1c38      	adds	r0, r7, #0
    8076:	f7f8 fc0f 	bl	898 <__aeabi_fadd>
    807a:	1c07      	adds	r7, r0, #0
    807c:	6160      	str	r0, [r4, #20]
    807e:	9802      	ldr	r0, [sp, #8]
    8080:	23f6      	movs	r3, #246	; 0xf6
    8082:	e372      	b.n	876a <PSP_CNFG_MQX_KERNEL_LOGGING+0x76a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    8084:	23d9      	movs	r3, #217	; 0xd9
    8086:	465a      	mov	r2, fp
    8088:	009b      	lsls	r3, r3, #2
    808a:	58d1      	ldr	r1, [r2, r3]
    808c:	4640      	mov	r0, r8
    808e:	f7f8 ff71 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    8092:	23da      	movs	r3, #218	; 0xda
    8094:	465a      	mov	r2, fp
    8096:	009b      	lsls	r3, r3, #2
    8098:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    809a:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    809c:	4648      	mov	r0, r9
    809e:	f7f8 ff69 	bl	f74 <__aeabi_fmul>
    80a2:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    80a4:	1c20      	adds	r0, r4, #0
    80a6:	f7f8 fbf7 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1465
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
    80aa:	23db      	movs	r3, #219	; 0xdb
    80ac:	465a      	mov	r2, fp
    80ae:	009b      	lsls	r3, r3, #2
    80b0:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    80b2:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1465
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
    80b4:	4650      	mov	r0, sl
    80b6:	f7f8 ff5d 	bl	f74 <__aeabi_fmul>
    80ba:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    80bc:	1c20      	adds	r0, r4, #0
    80be:	f7f8 fbeb 	bl	898 <__aeabi_fadd>
    80c2:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    80c4:	9802      	ldr	r0, [sp, #8]
    80c6:	f7f8 fbe7 	bl	898 <__aeabi_fadd>
    80ca:	465b      	mov	r3, fp
    80cc:	6718      	str	r0, [r3, #112]	; 0x70
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    80ce:	23eb      	movs	r3, #235	; 0xeb
    80d0:	465a      	mov	r2, fp
    80d2:	009b      	lsls	r3, r3, #2
    80d4:	58d1      	ldr	r1, [r2, r3]
    80d6:	4640      	mov	r0, r8
    80d8:	f7f8 ff4c 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    80dc:	23ec      	movs	r3, #236	; 0xec
    80de:	465a      	mov	r2, fp
    80e0:	009b      	lsls	r3, r3, #2
    80e2:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    80e4:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    80e6:	4648      	mov	r0, r9
    80e8:	f7f8 ff44 	bl	f74 <__aeabi_fmul>
    80ec:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    80ee:	1c20      	adds	r0, r4, #0
    80f0:	f7f8 fbd2 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1468
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
    80f4:	23ed      	movs	r3, #237	; 0xed
    80f6:	465a      	mov	r2, fp
    80f8:	009b      	lsls	r3, r3, #2
    80fa:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    80fc:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1468
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
    80fe:	4650      	mov	r0, sl
    8100:	f7f8 ff38 	bl	f74 <__aeabi_fmul>
    8104:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    8106:	1c20      	adds	r0, r4, #0
    8108:	f7f8 fbc6 	bl	898 <__aeabi_fadd>
    810c:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    810e:	9803      	ldr	r0, [sp, #12]
    8110:	f7f8 fbc2 	bl	898 <__aeabi_fadd>
    8114:	465b      	mov	r3, fp
    8116:	67d8      	str	r0, [r3, #124]	; 0x7c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    8118:	23fd      	movs	r3, #253	; 0xfd
    811a:	465a      	mov	r2, fp
    811c:	009b      	lsls	r3, r3, #2
    811e:	58d1      	ldr	r1, [r2, r3]
    8120:	4640      	mov	r0, r8
    8122:	f7f8 ff27 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    8126:	23fe      	movs	r3, #254	; 0xfe
    8128:	465a      	mov	r2, fp
    812a:	009b      	lsls	r3, r3, #2
    812c:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    812e:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    8130:	4648      	mov	r0, r9
    8132:	f7f8 ff1f 	bl	f74 <__aeabi_fmul>
    8136:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    8138:	1c20      	adds	r0, r4, #0
    813a:	f7f8 fbad 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1471
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 6][5] * pthisSV->fmErrSeMi[Z]; 
    813e:	23ff      	movs	r3, #255	; 0xff
    8140:	465a      	mov	r2, fp
    8142:	009b      	lsls	r3, r3, #2
    8144:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    8146:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1471
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 6][5] * pthisSV->fmErrSeMi[Z]; 
    8148:	4650      	mov	r0, sl
    814a:	f7f8 ff13 	bl	f74 <__aeabi_fmul>
    814e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    8150:	1c20      	adds	r0, r4, #0
    8152:	f7f8 fba1 	bl	898 <__aeabi_fadd>
    8156:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    8158:	9804      	ldr	r0, [sp, #16]
    815a:	f7f8 fb9d 	bl	898 <__aeabi_fadd>
    815e:	465b      	mov	r3, fp
    8160:	22a0      	movs	r2, #160	; 0xa0
    8162:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    8164:	23df      	movs	r3, #223	; 0xdf
    8166:	465a      	mov	r2, fp
    8168:	009b      	lsls	r3, r3, #2
    816a:	58d1      	ldr	r1, [r2, r3]
    816c:	4640      	mov	r0, r8
    816e:	f7f8 ff01 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    8172:	23e0      	movs	r3, #224	; 0xe0
    8174:	465a      	mov	r2, fp
    8176:	009b      	lsls	r3, r3, #2
    8178:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    817a:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    817c:	4648      	mov	r0, r9
    817e:	f7f8 fef9 	bl	f74 <__aeabi_fmul>
    8182:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    8184:	1c20      	adds	r0, r4, #0
    8186:	f7f8 fb87 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1465
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
    818a:	23e1      	movs	r3, #225	; 0xe1
    818c:	465a      	mov	r2, fp
    818e:	009b      	lsls	r3, r3, #2
    8190:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    8192:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1465
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
    8194:	4650      	mov	r0, sl
    8196:	f7f8 feed 	bl	f74 <__aeabi_fmul>
    819a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    819c:	1c20      	adds	r0, r4, #0
    819e:	f7f8 fb7b 	bl	898 <__aeabi_fadd>
    81a2:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    81a4:	9807      	ldr	r0, [sp, #28]
    81a6:	f7f8 fb77 	bl	898 <__aeabi_fadd>
    81aa:	465b      	mov	r3, fp
    81ac:	6758      	str	r0, [r3, #116]	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    81ae:	23f1      	movs	r3, #241	; 0xf1
    81b0:	465a      	mov	r2, fp
    81b2:	009b      	lsls	r3, r3, #2
    81b4:	58d1      	ldr	r1, [r2, r3]
    81b6:	4640      	mov	r0, r8
    81b8:	f7f8 fedc 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    81bc:	23f2      	movs	r3, #242	; 0xf2
    81be:	465a      	mov	r2, fp
    81c0:	009b      	lsls	r3, r3, #2
    81c2:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    81c4:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    81c6:	4648      	mov	r0, r9
    81c8:	f7f8 fed4 	bl	f74 <__aeabi_fmul>
    81cc:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    81ce:	1c20      	adds	r0, r4, #0
    81d0:	f7f8 fb62 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1468
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
    81d4:	23f3      	movs	r3, #243	; 0xf3
    81d6:	465a      	mov	r2, fp
    81d8:	009b      	lsls	r3, r3, #2
    81da:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    81dc:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1468
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
    81de:	4650      	mov	r0, sl
    81e0:	f7f8 fec8 	bl	f74 <__aeabi_fmul>
    81e4:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    81e6:	1c20      	adds	r0, r4, #0
    81e8:	f7f8 fb56 	bl	898 <__aeabi_fadd>
    81ec:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    81ee:	980d      	ldr	r0, [sp, #52]	; 0x34
    81f0:	f7f8 fb52 	bl	898 <__aeabi_fadd>
    81f4:	465b      	mov	r3, fp
    81f6:	2280      	movs	r2, #128	; 0x80
    81f8:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    81fa:	465a      	mov	r2, fp
    81fc:	4bb3      	ldr	r3, [pc, #716]	; (84cc <PSP_CNFG_MQX_KERNEL_LOGGING+0x4cc>)
    81fe:	4640      	mov	r0, r8
    8200:	58d1      	ldr	r1, [r2, r3]
    8202:	f7f8 feb7 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    8206:	2382      	movs	r3, #130	; 0x82
    8208:	465a      	mov	r2, fp
    820a:	00db      	lsls	r3, r3, #3
    820c:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    820e:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    8210:	4648      	mov	r0, r9
    8212:	f7f8 feaf 	bl	f74 <__aeabi_fmul>
    8216:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    8218:	1c20      	adds	r0, r4, #0
    821a:	f7f8 fb3d 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1471
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 6][5] * pthisSV->fmErrSeMi[Z]; 
    821e:	465a      	mov	r2, fp
    8220:	4bab      	ldr	r3, [pc, #684]	; (84d0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x4d0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    8222:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1471
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 6][5] * pthisSV->fmErrSeMi[Z]; 
    8224:	58d1      	ldr	r1, [r2, r3]
    8226:	4650      	mov	r0, sl
    8228:	f7f8 fea4 	bl	f74 <__aeabi_fmul>
    822c:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    822e:	1c20      	adds	r0, r4, #0
    8230:	f7f8 fb32 	bl	898 <__aeabi_fadd>
    8234:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    8236:	980e      	ldr	r0, [sp, #56]	; 0x38
    8238:	f7f8 fb2e 	bl	898 <__aeabi_fadd>
    823c:	465b      	mov	r3, fp
    823e:	22a4      	movs	r2, #164	; 0xa4
    8240:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    8242:	23e5      	movs	r3, #229	; 0xe5
    8244:	465a      	mov	r2, fp
    8246:	009b      	lsls	r3, r3, #2
    8248:	58d1      	ldr	r1, [r2, r3]
    824a:	4640      	mov	r0, r8
    824c:	f7f8 fe92 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    8250:	23e6      	movs	r3, #230	; 0xe6
    8252:	465a      	mov	r2, fp
    8254:	009b      	lsls	r3, r3, #2
    8256:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    8258:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    825a:	4648      	mov	r0, r9
    825c:	f7f8 fe8a 	bl	f74 <__aeabi_fmul>
    8260:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    8262:	1c20      	adds	r0, r4, #0
    8264:	f7f8 fb18 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1465
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
    8268:	23e7      	movs	r3, #231	; 0xe7
    826a:	465a      	mov	r2, fp
    826c:	009b      	lsls	r3, r3, #2
    826e:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    8270:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1465
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
    8272:	4650      	mov	r0, sl
    8274:	f7f8 fe7e 	bl	f74 <__aeabi_fmul>
    8278:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    827a:	1c20      	adds	r0, r4, #0
    827c:	f7f8 fb0c 	bl	898 <__aeabi_fadd>
    8280:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    8282:	9810      	ldr	r0, [sp, #64]	; 0x40
    8284:	f7f8 fb08 	bl	898 <__aeabi_fadd>
    8288:	465b      	mov	r3, fp
    828a:	6798      	str	r0, [r3, #120]	; 0x78
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    828c:	23f7      	movs	r3, #247	; 0xf7
    828e:	465a      	mov	r2, fp
    8290:	009b      	lsls	r3, r3, #2
    8292:	58d1      	ldr	r1, [r2, r3]
    8294:	4640      	mov	r0, r8
    8296:	f7f8 fe6d 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    829a:	23f8      	movs	r3, #248	; 0xf8
    829c:	465a      	mov	r2, fp
    829e:	009b      	lsls	r3, r3, #2
    82a0:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    82a2:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    82a4:	4648      	mov	r0, r9
    82a6:	f7f8 fe65 	bl	f74 <__aeabi_fmul>
    82aa:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    82ac:	1c20      	adds	r0, r4, #0
    82ae:	f7f8 faf3 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1468
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
    82b2:	23f9      	movs	r3, #249	; 0xf9
    82b4:	465a      	mov	r2, fp
    82b6:	009b      	lsls	r3, r3, #2
    82b8:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    82ba:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1468
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
    82bc:	4650      	mov	r0, sl
    82be:	f7f8 fe59 	bl	f74 <__aeabi_fmul>
    82c2:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    82c4:	1c20      	adds	r0, r4, #0
    82c6:	f7f8 fae7 	bl	898 <__aeabi_fadd>
    82ca:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    82cc:	9811      	ldr	r0, [sp, #68]	; 0x44
    82ce:	f7f8 fae3 	bl	898 <__aeabi_fadd>
    82d2:	465b      	mov	r3, fp
    82d4:	2284      	movs	r2, #132	; 0x84
    82d6:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    82d8:	465a      	mov	r2, fp
    82da:	4b7e      	ldr	r3, [pc, #504]	; (84d4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x4d4>)
    82dc:	4640      	mov	r0, r8
    82de:	58d1      	ldr	r1, [r2, r3]
    82e0:	f7f8 fe48 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    82e4:	2385      	movs	r3, #133	; 0x85
    82e6:	465a      	mov	r2, fp
    82e8:	00db      	lsls	r3, r3, #3
    82ea:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    82ec:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    82ee:	4648      	mov	r0, r9
    82f0:	f7f8 fe40 	bl	f74 <__aeabi_fmul>
    82f4:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    82f6:	1c20      	adds	r0, r4, #0
    82f8:	f7f8 face 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1471
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 6][5] * pthisSV->fmErrSeMi[Z]; 
    82fc:	465a      	mov	r2, fp
    82fe:	4b76      	ldr	r3, [pc, #472]	; (84d8 <PSP_CNFG_MQX_KERNEL_LOGGING+0x4d8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    8300:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1471
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 6][5] * pthisSV->fmErrSeMi[Z]; 
    8302:	58d1      	ldr	r1, [r2, r3]
    8304:	4650      	mov	r0, sl
    8306:	f7f8 fe35 	bl	f74 <__aeabi_fmul>
    830a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    830c:	1c20      	adds	r0, r4, #0
    830e:	f7f8 fac3 	bl	898 <__aeabi_fadd>
    8312:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    8314:	1c30      	adds	r0, r6, #0
    8316:	f7f8 fabf 	bl	898 <__aeabi_fadd>
    831a:	465b      	mov	r3, fp
    831c:	22a8      	movs	r2, #168	; 0xa8
    831e:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8320:	2700      	movs	r7, #0
    8322:	f7fe fe84 	bl	702e <fRun_9DOF_GBY_KALMAN+0x1322>
    8326:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8328:	46b9      	mov	r9, r7
    832a:	469b      	mov	fp, r3
    832c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    832e:	469a      	mov	sl, r3
    8330:	2318      	movs	r3, #24
    8332:	469c      	mov	ip, r3
    8334:	44a4      	add	ip, r4
    8336:	4663      	mov	r3, ip
    8338:	4657      	mov	r7, sl
    833a:	46b2      	mov	sl, r6
    833c:	465e      	mov	r6, fp
    833e:	46ab      	mov	fp, r5
    8340:	9303      	str	r3, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8342:	2300      	movs	r3, #0
    8344:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8346:	6831      	ldr	r1, [r6, #0]
    8348:	4640      	mov	r0, r8
    834a:	f7f8 fe13 	bl	f74 <__aeabi_fmul>
    834e:	2100      	movs	r1, #0
    8350:	f7f8 faa2 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8354:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8356:	1c05      	adds	r5, r0, #0
    8358:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    835a:	4648      	mov	r0, r9
    835c:	f7f8 fa6e 	bl	83c <__aeabi_fcmpeq>
    8360:	2800      	cmp	r0, #0
    8362:	d109      	bne.n	8378 <PSP_CNFG_MQX_KERNEL_LOGGING+0x378>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8364:	6b31      	ldr	r1, [r6, #48]	; 0x30
    8366:	4648      	mov	r0, r9
    8368:	f7f8 fe04 	bl	f74 <__aeabi_fmul>
    836c:	1c01      	adds	r1, r0, #0
    836e:	1c28      	adds	r0, r5, #0
    8370:	f7f8 fa92 	bl	898 <__aeabi_fadd>
    8374:	1c05      	adds	r5, r0, #0
    8376:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8378:	4650      	mov	r0, sl
    837a:	2100      	movs	r1, #0
    837c:	f7f8 fa5e 	bl	83c <__aeabi_fcmpeq>
    8380:	2800      	cmp	r0, #0
    8382:	d109      	bne.n	8398 <PSP_CNFG_MQX_KERNEL_LOGGING+0x398>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8384:	6e31      	ldr	r1, [r6, #96]	; 0x60
    8386:	4650      	mov	r0, sl
    8388:	f7f8 fdf4 	bl	f74 <__aeabi_fmul>
    838c:	1c01      	adds	r1, r0, #0
    838e:	1c28      	adds	r0, r5, #0
    8390:	f7f8 fa82 	bl	898 <__aeabi_fadd>
    8394:	1c05      	adds	r5, r0, #0
    8396:	6020      	str	r0, [r4, #0]
    8398:	6839      	ldr	r1, [r7, #0]
    839a:	9804      	ldr	r0, [sp, #16]
    839c:	f7f8 fdea 	bl	f74 <__aeabi_fmul>
    83a0:	1c29      	adds	r1, r5, #0
    83a2:	f7f8 fa79 	bl	898 <__aeabi_fadd>
    83a6:	6020      	str	r0, [r4, #0]
    83a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
    83aa:	1c05      	adds	r5, r0, #0
    83ac:	9802      	ldr	r0, [sp, #8]
    83ae:	f7f8 fde1 	bl	f74 <__aeabi_fmul>
    83b2:	1c29      	adds	r1, r5, #0
    83b4:	f7f8 fa70 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1397
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
    83b8:	9b03      	ldr	r3, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    83ba:	c401      	stmia	r4!, {r0}
    83bc:	3604      	adds	r6, #4
    83be:	3704      	adds	r7, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1397
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
    83c0:	429c      	cmp	r4, r3
    83c2:	d1be      	bne.n	8342 <PSP_CNFG_MQX_KERNEL_LOGGING+0x342>
    83c4:	465d      	mov	r5, fp
    83c6:	f7fe fbf2 	bl	6bae <fRun_9DOF_GBY_KALMAN+0xea2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    83ca:	1c38      	adds	r0, r7, #0
    83cc:	1c19      	adds	r1, r3, #0
    83ce:	f7f8 fa35 	bl	83c <__aeabi_fcmpeq>
    83d2:	2800      	cmp	r0, #0
    83d4:	d001      	beq.n	83da <PSP_CNFG_MQX_KERNEL_LOGGING+0x3da>
    83d6:	f000 fda2 	bl	8f1e <PSP_CNFG_MQX_KERNEL_LOGGING+0xf1e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    83da:	23a4      	movs	r3, #164	; 0xa4
    83dc:	005b      	lsls	r3, r3, #1
    83de:	58e9      	ldr	r1, [r5, r3]
    83e0:	1c38      	adds	r0, r7, #0
    83e2:	f7f8 fdc7 	bl	f74 <__aeabi_fmul>
    83e6:	2100      	movs	r1, #0
    83e8:	f7f8 fa56 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    83ec:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    83ee:	4680      	mov	r8, r0
    83f0:	4681      	mov	r9, r0
    83f2:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    83f4:	1c30      	adds	r0, r6, #0
    83f6:	f7f8 fa21 	bl	83c <__aeabi_fcmpeq>
    83fa:	2800      	cmp	r0, #0
    83fc:	d101      	bne.n	8402 <PSP_CNFG_MQX_KERNEL_LOGGING+0x402>
    83fe:	f001 fbda 	bl	9bb6 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1bb6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8402:	23d4      	movs	r3, #212	; 0xd4
    8404:	005b      	lsls	r3, r3, #1
    8406:	58e9      	ldr	r1, [r5, r3]
    8408:	9804      	ldr	r0, [sp, #16]
    840a:	f7f8 fdb3 	bl	f74 <__aeabi_fmul>
    840e:	1c01      	adds	r1, r0, #0
    8410:	4640      	mov	r0, r8
    8412:	f7f8 fa41 	bl	898 <__aeabi_fadd>
    8416:	1c23      	adds	r3, r4, #0
    8418:	c301      	stmia	r3!, {r0}
    841a:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    841c:	2300      	movs	r3, #0
    841e:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    8420:	238e      	movs	r3, #142	; 0x8e
    8422:	005b      	lsls	r3, r3, #1
    8424:	469a      	mov	sl, r3
    8426:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8428:	4653      	mov	r3, sl
    842a:	1c38      	adds	r0, r7, #0
    842c:	6b19      	ldr	r1, [r3, #48]	; 0x30
    842e:	f7f8 fda1 	bl	f74 <__aeabi_fmul>
    8432:	2100      	movs	r1, #0
    8434:	f7f8 fa30 	bl	898 <__aeabi_fadd>
    8438:	4643      	mov	r3, r8
    843a:	1c04      	adds	r4, r0, #0
    843c:	4681      	mov	r9, r0
    843e:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8440:	2100      	movs	r1, #0
    8442:	1c30      	adds	r0, r6, #0
    8444:	f7f8 f9fa 	bl	83c <__aeabi_fcmpeq>
    8448:	2800      	cmp	r0, #0
    844a:	d101      	bne.n	8450 <PSP_CNFG_MQX_KERNEL_LOGGING+0x450>
    844c:	f001 fbda 	bl	9c04 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1c04>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8450:	4652      	mov	r2, sl
    8452:	2390      	movs	r3, #144	; 0x90
    8454:	9804      	ldr	r0, [sp, #16]
    8456:	58d1      	ldr	r1, [r2, r3]
    8458:	f7f8 fd8c 	bl	f74 <__aeabi_fmul>
    845c:	1c01      	adds	r1, r0, #0
    845e:	1c20      	adds	r0, r4, #0
    8460:	f7f8 fa1a 	bl	898 <__aeabi_fadd>
    8464:	4643      	mov	r3, r8
    8466:	c301      	stmia	r3!, {r0}
    8468:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    846a:	2200      	movs	r2, #0
    846c:	4643      	mov	r3, r8
    846e:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    8470:	2390      	movs	r3, #144	; 0x90
    8472:	005b      	lsls	r3, r3, #1
    8474:	469a      	mov	sl, r3
    8476:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8478:	4653      	mov	r3, sl
    847a:	1c38      	adds	r0, r7, #0
    847c:	6b19      	ldr	r1, [r3, #48]	; 0x30
    847e:	f7f8 fd79 	bl	f74 <__aeabi_fmul>
    8482:	2100      	movs	r1, #0
    8484:	f7f8 fa08 	bl	898 <__aeabi_fadd>
    8488:	464b      	mov	r3, r9
    848a:	1c04      	adds	r4, r0, #0
    848c:	4680      	mov	r8, r0
    848e:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8490:	2100      	movs	r1, #0
    8492:	1c30      	adds	r0, r6, #0
    8494:	f7f8 f9d2 	bl	83c <__aeabi_fcmpeq>
    8498:	2800      	cmp	r0, #0
    849a:	d101      	bne.n	84a0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x4a0>
    849c:	f001 fbdb 	bl	9c56 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1c56>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    84a0:	4652      	mov	r2, sl
    84a2:	2390      	movs	r3, #144	; 0x90
    84a4:	9804      	ldr	r0, [sp, #16]
    84a6:	58d1      	ldr	r1, [r2, r3]
    84a8:	f7f8 fd64 	bl	f74 <__aeabi_fmul>
    84ac:	1c01      	adds	r1, r0, #0
    84ae:	1c20      	adds	r0, r4, #0
    84b0:	f7f8 f9f2 	bl	898 <__aeabi_fadd>
    84b4:	464b      	mov	r3, r9
    84b6:	c301      	stmia	r3!, {r0}
    84b8:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    84ba:	2200      	movs	r2, #0
    84bc:	464b      	mov	r3, r9
    84be:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    84c0:	2392      	movs	r3, #146	; 0x92
    84c2:	005b      	lsls	r3, r3, #1
    84c4:	4699      	mov	r9, r3
    84c6:	44a9      	add	r9, r5
    84c8:	f001 fbea 	bl	9ca0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1ca0>
    84cc:	0000040c 	.word	0x0000040c
    84d0:	00000414 	.word	0x00000414
    84d4:	00000424 	.word	0x00000424
    84d8:	0000042c 	.word	0x0000042c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    84dc:	1c38      	adds	r0, r7, #0
    84de:	1c19      	adds	r1, r3, #0
    84e0:	f7f8 f9ac 	bl	83c <__aeabi_fcmpeq>
    84e4:	2800      	cmp	r0, #0
    84e6:	d101      	bne.n	84ec <PSP_CNFG_MQX_KERNEL_LOGGING+0x4ec>
    84e8:	f000 fd0c 	bl	8f04 <PSP_CNFG_MQX_KERNEL_LOGGING+0xf04>
    84ec:	2300      	movs	r3, #0
    84ee:	4698      	mov	r8, r3
    84f0:	1c30      	adds	r0, r6, #0
    84f2:	2100      	movs	r1, #0
    84f4:	f7f8 f9a2 	bl	83c <__aeabi_fcmpeq>
    84f8:	2800      	cmp	r0, #0
    84fa:	d10b      	bne.n	8514 <PSP_CNFG_MQX_KERNEL_LOGGING+0x514>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    84fc:	23bc      	movs	r3, #188	; 0xbc
    84fe:	005b      	lsls	r3, r3, #1
    8500:	58e9      	ldr	r1, [r5, r3]
    8502:	1c30      	adds	r0, r6, #0
    8504:	f7f8 fd36 	bl	f74 <__aeabi_fmul>
    8508:	1c01      	adds	r1, r0, #0
    850a:	4640      	mov	r0, r8
    850c:	f7f8 f9c4 	bl	898 <__aeabi_fadd>
    8510:	4680      	mov	r8, r0
    8512:	6020      	str	r0, [r4, #0]
    8514:	23d4      	movs	r3, #212	; 0xd4
    8516:	005b      	lsls	r3, r3, #1
    8518:	58e9      	ldr	r1, [r5, r3]
    851a:	9804      	ldr	r0, [sp, #16]
    851c:	f7f8 fd2a 	bl	f74 <__aeabi_fmul>
    8520:	4641      	mov	r1, r8
    8522:	f7f8 f9b9 	bl	898 <__aeabi_fadd>
    8526:	4680      	mov	r8, r0
    8528:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    852a:	6020      	str	r0, [r4, #0]
    852c:	58e9      	ldr	r1, [r5, r3]
    852e:	9803      	ldr	r0, [sp, #12]
    8530:	f7f8 fd20 	bl	f74 <__aeabi_fmul>
    8534:	4641      	mov	r1, r8
    8536:	f7f8 f9af 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    853a:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    853c:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    853e:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8540:	1c38      	adds	r0, r7, #0
    8542:	1c19      	adds	r1, r3, #0
    8544:	f7f8 f97a 	bl	83c <__aeabi_fcmpeq>
    8548:	2800      	cmp	r0, #0
    854a:	d001      	beq.n	8550 <PSP_CNFG_MQX_KERNEL_LOGGING+0x550>
    854c:	f001 fb2a 	bl	9ba4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1ba4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8550:	23a6      	movs	r3, #166	; 0xa6
    8552:	005b      	lsls	r3, r3, #1
    8554:	58e9      	ldr	r1, [r5, r3]
    8556:	1c38      	adds	r0, r7, #0
    8558:	f7f8 fd0c 	bl	f74 <__aeabi_fmul>
    855c:	2100      	movs	r1, #0
    855e:	f7f8 f99b 	bl	898 <__aeabi_fadd>
    8562:	4680      	mov	r8, r0
    8564:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8566:	1c30      	adds	r0, r6, #0
    8568:	2100      	movs	r1, #0
    856a:	f7f8 f967 	bl	83c <__aeabi_fcmpeq>
    856e:	2800      	cmp	r0, #0
    8570:	d10b      	bne.n	858a <PSP_CNFG_MQX_KERNEL_LOGGING+0x58a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8572:	23be      	movs	r3, #190	; 0xbe
    8574:	005b      	lsls	r3, r3, #1
    8576:	58e9      	ldr	r1, [r5, r3]
    8578:	1c30      	adds	r0, r6, #0
    857a:	f7f8 fcfb 	bl	f74 <__aeabi_fmul>
    857e:	1c01      	adds	r1, r0, #0
    8580:	4640      	mov	r0, r8
    8582:	f7f8 f989 	bl	898 <__aeabi_fadd>
    8586:	4680      	mov	r8, r0
    8588:	6060      	str	r0, [r4, #4]
    858a:	23d6      	movs	r3, #214	; 0xd6
    858c:	005b      	lsls	r3, r3, #1
    858e:	58e9      	ldr	r1, [r5, r3]
    8590:	9804      	ldr	r0, [sp, #16]
    8592:	f7f8 fcef 	bl	f74 <__aeabi_fmul>
    8596:	4641      	mov	r1, r8
    8598:	f7f8 f97e 	bl	898 <__aeabi_fadd>
    859c:	4680      	mov	r8, r0
    859e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    85a0:	6060      	str	r0, [r4, #4]
    85a2:	58e9      	ldr	r1, [r5, r3]
    85a4:	9803      	ldr	r0, [sp, #12]
    85a6:	f7f8 fce5 	bl	f74 <__aeabi_fmul>
    85aa:	4641      	mov	r1, r8
    85ac:	f7f8 f974 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    85b0:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    85b2:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    85b4:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    85b6:	1c38      	adds	r0, r7, #0
    85b8:	1c19      	adds	r1, r3, #0
    85ba:	f7f8 f93f 	bl	83c <__aeabi_fcmpeq>
    85be:	2800      	cmp	r0, #0
    85c0:	d001      	beq.n	85c6 <PSP_CNFG_MQX_KERNEL_LOGGING+0x5c6>
    85c2:	f001 faeb 	bl	9b9c <PSP_CNFG_MQX_KERNEL_LOGGING+0x1b9c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    85c6:	23a8      	movs	r3, #168	; 0xa8
    85c8:	005b      	lsls	r3, r3, #1
    85ca:	58e9      	ldr	r1, [r5, r3]
    85cc:	1c38      	adds	r0, r7, #0
    85ce:	f7f8 fcd1 	bl	f74 <__aeabi_fmul>
    85d2:	2100      	movs	r1, #0
    85d4:	f7f8 f960 	bl	898 <__aeabi_fadd>
    85d8:	4680      	mov	r8, r0
    85da:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    85dc:	1c30      	adds	r0, r6, #0
    85de:	2100      	movs	r1, #0
    85e0:	f7f8 f92c 	bl	83c <__aeabi_fcmpeq>
    85e4:	2800      	cmp	r0, #0
    85e6:	d10b      	bne.n	8600 <PSP_CNFG_MQX_KERNEL_LOGGING+0x600>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    85e8:	23c0      	movs	r3, #192	; 0xc0
    85ea:	005b      	lsls	r3, r3, #1
    85ec:	58e9      	ldr	r1, [r5, r3]
    85ee:	1c30      	adds	r0, r6, #0
    85f0:	f7f8 fcc0 	bl	f74 <__aeabi_fmul>
    85f4:	1c01      	adds	r1, r0, #0
    85f6:	4640      	mov	r0, r8
    85f8:	f7f8 f94e 	bl	898 <__aeabi_fadd>
    85fc:	4680      	mov	r8, r0
    85fe:	60a0      	str	r0, [r4, #8]
    8600:	23d8      	movs	r3, #216	; 0xd8
    8602:	005b      	lsls	r3, r3, #1
    8604:	58e9      	ldr	r1, [r5, r3]
    8606:	9804      	ldr	r0, [sp, #16]
    8608:	f7f8 fcb4 	bl	f74 <__aeabi_fmul>
    860c:	4641      	mov	r1, r8
    860e:	f7f8 f943 	bl	898 <__aeabi_fadd>
    8612:	4680      	mov	r8, r0
    8614:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8616:	60a0      	str	r0, [r4, #8]
    8618:	58e9      	ldr	r1, [r5, r3]
    861a:	9803      	ldr	r0, [sp, #12]
    861c:	f7f8 fcaa 	bl	f74 <__aeabi_fmul>
    8620:	4641      	mov	r1, r8
    8622:	f7f8 f939 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8626:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8628:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    862a:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    862c:	1c38      	adds	r0, r7, #0
    862e:	1c19      	adds	r1, r3, #0
    8630:	f7f8 f904 	bl	83c <__aeabi_fcmpeq>
    8634:	2800      	cmp	r0, #0
    8636:	d001      	beq.n	863c <PSP_CNFG_MQX_KERNEL_LOGGING+0x63c>
    8638:	f001 faac 	bl	9b94 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1b94>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    863c:	23aa      	movs	r3, #170	; 0xaa
    863e:	005b      	lsls	r3, r3, #1
    8640:	58e9      	ldr	r1, [r5, r3]
    8642:	1c38      	adds	r0, r7, #0
    8644:	f7f8 fc96 	bl	f74 <__aeabi_fmul>
    8648:	2100      	movs	r1, #0
    864a:	f7f8 f925 	bl	898 <__aeabi_fadd>
    864e:	4680      	mov	r8, r0
    8650:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8652:	1c30      	adds	r0, r6, #0
    8654:	2100      	movs	r1, #0
    8656:	f7f8 f8f1 	bl	83c <__aeabi_fcmpeq>
    865a:	2800      	cmp	r0, #0
    865c:	d10b      	bne.n	8676 <PSP_CNFG_MQX_KERNEL_LOGGING+0x676>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    865e:	23c2      	movs	r3, #194	; 0xc2
    8660:	005b      	lsls	r3, r3, #1
    8662:	58e9      	ldr	r1, [r5, r3]
    8664:	1c30      	adds	r0, r6, #0
    8666:	f7f8 fc85 	bl	f74 <__aeabi_fmul>
    866a:	1c01      	adds	r1, r0, #0
    866c:	4640      	mov	r0, r8
    866e:	f7f8 f913 	bl	898 <__aeabi_fadd>
    8672:	4680      	mov	r8, r0
    8674:	60e0      	str	r0, [r4, #12]
    8676:	23da      	movs	r3, #218	; 0xda
    8678:	005b      	lsls	r3, r3, #1
    867a:	58e9      	ldr	r1, [r5, r3]
    867c:	9804      	ldr	r0, [sp, #16]
    867e:	f7f8 fc79 	bl	f74 <__aeabi_fmul>
    8682:	4641      	mov	r1, r8
    8684:	f7f8 f908 	bl	898 <__aeabi_fadd>
    8688:	2385      	movs	r3, #133	; 0x85
    868a:	4680      	mov	r8, r0
    868c:	009b      	lsls	r3, r3, #2
    868e:	60e0      	str	r0, [r4, #12]
    8690:	58e9      	ldr	r1, [r5, r3]
    8692:	9803      	ldr	r0, [sp, #12]
    8694:	f7f8 fc6e 	bl	f74 <__aeabi_fmul>
    8698:	4641      	mov	r1, r8
    869a:	f7f8 f8fd 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    869e:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    86a0:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    86a2:	6123      	str	r3, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    86a4:	1c38      	adds	r0, r7, #0
    86a6:	1c19      	adds	r1, r3, #0
    86a8:	f7f8 f8c8 	bl	83c <__aeabi_fcmpeq>
    86ac:	2800      	cmp	r0, #0
    86ae:	d001      	beq.n	86b4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x6b4>
    86b0:	f001 fa6c 	bl	9b8c <PSP_CNFG_MQX_KERNEL_LOGGING+0x1b8c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    86b4:	23ac      	movs	r3, #172	; 0xac
    86b6:	005b      	lsls	r3, r3, #1
    86b8:	58e9      	ldr	r1, [r5, r3]
    86ba:	1c38      	adds	r0, r7, #0
    86bc:	f7f8 fc5a 	bl	f74 <__aeabi_fmul>
    86c0:	2100      	movs	r1, #0
    86c2:	f7f8 f8e9 	bl	898 <__aeabi_fadd>
    86c6:	4680      	mov	r8, r0
    86c8:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    86ca:	1c30      	adds	r0, r6, #0
    86cc:	2100      	movs	r1, #0
    86ce:	f7f8 f8b5 	bl	83c <__aeabi_fcmpeq>
    86d2:	2800      	cmp	r0, #0
    86d4:	d10b      	bne.n	86ee <PSP_CNFG_MQX_KERNEL_LOGGING+0x6ee>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    86d6:	23c4      	movs	r3, #196	; 0xc4
    86d8:	005b      	lsls	r3, r3, #1
    86da:	58e9      	ldr	r1, [r5, r3]
    86dc:	1c30      	adds	r0, r6, #0
    86de:	f7f8 fc49 	bl	f74 <__aeabi_fmul>
    86e2:	1c01      	adds	r1, r0, #0
    86e4:	4640      	mov	r0, r8
    86e6:	f7f8 f8d7 	bl	898 <__aeabi_fadd>
    86ea:	4680      	mov	r8, r0
    86ec:	6120      	str	r0, [r4, #16]
    86ee:	23dc      	movs	r3, #220	; 0xdc
    86f0:	005b      	lsls	r3, r3, #1
    86f2:	58e9      	ldr	r1, [r5, r3]
    86f4:	9804      	ldr	r0, [sp, #16]
    86f6:	f7f8 fc3d 	bl	f74 <__aeabi_fmul>
    86fa:	4641      	mov	r1, r8
    86fc:	f7f8 f8cc 	bl	898 <__aeabi_fadd>
    8700:	2386      	movs	r3, #134	; 0x86
    8702:	4680      	mov	r8, r0
    8704:	009b      	lsls	r3, r3, #2
    8706:	6120      	str	r0, [r4, #16]
    8708:	58e9      	ldr	r1, [r5, r3]
    870a:	9803      	ldr	r0, [sp, #12]
    870c:	f7f8 fc32 	bl	f74 <__aeabi_fmul>
    8710:	4641      	mov	r1, r8
    8712:	f7f8 f8c1 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8716:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8718:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    871a:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    871c:	1c38      	adds	r0, r7, #0
    871e:	1c19      	adds	r1, r3, #0
    8720:	f7f8 f88c 	bl	83c <__aeabi_fcmpeq>
    8724:	2800      	cmp	r0, #0
    8726:	d001      	beq.n	872c <PSP_CNFG_MQX_KERNEL_LOGGING+0x72c>
    8728:	f001 fa2d 	bl	9b86 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1b86>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    872c:	23ae      	movs	r3, #174	; 0xae
    872e:	005b      	lsls	r3, r3, #1
    8730:	58e9      	ldr	r1, [r5, r3]
    8732:	1c38      	adds	r0, r7, #0
    8734:	f7f8 fc1e 	bl	f74 <__aeabi_fmul>
    8738:	2100      	movs	r1, #0
    873a:	f7f8 f8ad 	bl	898 <__aeabi_fadd>
    873e:	1c07      	adds	r7, r0, #0
    8740:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8742:	1c30      	adds	r0, r6, #0
    8744:	2100      	movs	r1, #0
    8746:	f7f8 f879 	bl	83c <__aeabi_fcmpeq>
    874a:	2800      	cmp	r0, #0
    874c:	d10b      	bne.n	8766 <PSP_CNFG_MQX_KERNEL_LOGGING+0x766>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    874e:	23c6      	movs	r3, #198	; 0xc6
    8750:	005b      	lsls	r3, r3, #1
    8752:	58e9      	ldr	r1, [r5, r3]
    8754:	1c30      	adds	r0, r6, #0
    8756:	f7f8 fc0d 	bl	f74 <__aeabi_fmul>
    875a:	1c01      	adds	r1, r0, #0
    875c:	1c38      	adds	r0, r7, #0
    875e:	f7f8 f89b 	bl	898 <__aeabi_fadd>
    8762:	1c07      	adds	r7, r0, #0
    8764:	6160      	str	r0, [r4, #20]
    8766:	23de      	movs	r3, #222	; 0xde
    8768:	9804      	ldr	r0, [sp, #16]
    876a:	005b      	lsls	r3, r3, #1
    876c:	58e9      	ldr	r1, [r5, r3]
    876e:	f7f8 fc01 	bl	f74 <__aeabi_fmul>
    8772:	1c39      	adds	r1, r7, #0
    8774:	f7f8 f890 	bl	898 <__aeabi_fadd>
    8778:	2387      	movs	r3, #135	; 0x87
    877a:	1c06      	adds	r6, r0, #0
    877c:	6160      	str	r0, [r4, #20]
    877e:	009b      	lsls	r3, r3, #2
    8780:	9803      	ldr	r0, [sp, #12]
    8782:	e154      	b.n	8a2e <PSP_CNFG_MQX_KERNEL_LOGGING+0xa2e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8784:	1c38      	adds	r0, r7, #0
    8786:	1c19      	adds	r1, r3, #0
    8788:	f7f8 f858 	bl	83c <__aeabi_fcmpeq>
    878c:	2800      	cmp	r0, #0
    878e:	d100      	bne.n	8792 <PSP_CNFG_MQX_KERNEL_LOGGING+0x792>
    8790:	e3ac      	b.n	8eec <PSP_CNFG_MQX_KERNEL_LOGGING+0xeec>
    8792:	2300      	movs	r3, #0
    8794:	4698      	mov	r8, r3
    8796:	1c30      	adds	r0, r6, #0
    8798:	2100      	movs	r1, #0
    879a:	f7f8 f84f 	bl	83c <__aeabi_fcmpeq>
    879e:	2800      	cmp	r0, #0
    87a0:	d10b      	bne.n	87ba <PSP_CNFG_MQX_KERNEL_LOGGING+0x7ba>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    87a2:	23bc      	movs	r3, #188	; 0xbc
    87a4:	005b      	lsls	r3, r3, #1
    87a6:	58e9      	ldr	r1, [r5, r3]
    87a8:	1c30      	adds	r0, r6, #0
    87aa:	f7f8 fbe3 	bl	f74 <__aeabi_fmul>
    87ae:	1c01      	adds	r1, r0, #0
    87b0:	4640      	mov	r0, r8
    87b2:	f7f8 f871 	bl	898 <__aeabi_fadd>
    87b6:	4680      	mov	r8, r0
    87b8:	6020      	str	r0, [r4, #0]
    87ba:	23d4      	movs	r3, #212	; 0xd4
    87bc:	005b      	lsls	r3, r3, #1
    87be:	58e9      	ldr	r1, [r5, r3]
    87c0:	9804      	ldr	r0, [sp, #16]
    87c2:	f7f8 fbd7 	bl	f74 <__aeabi_fmul>
    87c6:	4641      	mov	r1, r8
    87c8:	f7f8 f866 	bl	898 <__aeabi_fadd>
    87cc:	23ec      	movs	r3, #236	; 0xec
    87ce:	4680      	mov	r8, r0
    87d0:	005b      	lsls	r3, r3, #1
    87d2:	6020      	str	r0, [r4, #0]
    87d4:	58e9      	ldr	r1, [r5, r3]
    87d6:	9802      	ldr	r0, [sp, #8]
    87d8:	f7f8 fbcc 	bl	f74 <__aeabi_fmul>
    87dc:	4641      	mov	r1, r8
    87de:	f7f8 f85b 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    87e2:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    87e4:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    87e6:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    87e8:	1c38      	adds	r0, r7, #0
    87ea:	1c19      	adds	r1, r3, #0
    87ec:	f7f8 f826 	bl	83c <__aeabi_fcmpeq>
    87f0:	2800      	cmp	r0, #0
    87f2:	d001      	beq.n	87f8 <PSP_CNFG_MQX_KERNEL_LOGGING+0x7f8>
    87f4:	f001 fd58 	bl	a2a8 <PSP_CNFG_MQX_KERNEL_LOGGING+0x22a8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    87f8:	23a6      	movs	r3, #166	; 0xa6
    87fa:	005b      	lsls	r3, r3, #1
    87fc:	58e9      	ldr	r1, [r5, r3]
    87fe:	1c38      	adds	r0, r7, #0
    8800:	f7f8 fbb8 	bl	f74 <__aeabi_fmul>
    8804:	2100      	movs	r1, #0
    8806:	f7f8 f847 	bl	898 <__aeabi_fadd>
    880a:	4680      	mov	r8, r0
    880c:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    880e:	1c30      	adds	r0, r6, #0
    8810:	2100      	movs	r1, #0
    8812:	f7f8 f813 	bl	83c <__aeabi_fcmpeq>
    8816:	2800      	cmp	r0, #0
    8818:	d10b      	bne.n	8832 <PSP_CNFG_MQX_KERNEL_LOGGING+0x832>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    881a:	23be      	movs	r3, #190	; 0xbe
    881c:	005b      	lsls	r3, r3, #1
    881e:	58e9      	ldr	r1, [r5, r3]
    8820:	1c30      	adds	r0, r6, #0
    8822:	f7f8 fba7 	bl	f74 <__aeabi_fmul>
    8826:	1c01      	adds	r1, r0, #0
    8828:	4640      	mov	r0, r8
    882a:	f7f8 f835 	bl	898 <__aeabi_fadd>
    882e:	4680      	mov	r8, r0
    8830:	6060      	str	r0, [r4, #4]
    8832:	23d6      	movs	r3, #214	; 0xd6
    8834:	005b      	lsls	r3, r3, #1
    8836:	58e9      	ldr	r1, [r5, r3]
    8838:	9804      	ldr	r0, [sp, #16]
    883a:	f7f8 fb9b 	bl	f74 <__aeabi_fmul>
    883e:	4641      	mov	r1, r8
    8840:	f7f8 f82a 	bl	898 <__aeabi_fadd>
    8844:	23ee      	movs	r3, #238	; 0xee
    8846:	4680      	mov	r8, r0
    8848:	005b      	lsls	r3, r3, #1
    884a:	6060      	str	r0, [r4, #4]
    884c:	58e9      	ldr	r1, [r5, r3]
    884e:	9802      	ldr	r0, [sp, #8]
    8850:	f7f8 fb90 	bl	f74 <__aeabi_fmul>
    8854:	4641      	mov	r1, r8
    8856:	f7f8 f81f 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    885a:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    885c:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    885e:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8860:	1c38      	adds	r0, r7, #0
    8862:	1c19      	adds	r1, r3, #0
    8864:	f7f7 ffea 	bl	83c <__aeabi_fcmpeq>
    8868:	2800      	cmp	r0, #0
    886a:	d001      	beq.n	8870 <PSP_CNFG_MQX_KERNEL_LOGGING+0x870>
    886c:	f001 fd18 	bl	a2a0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x22a0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8870:	23a8      	movs	r3, #168	; 0xa8
    8872:	005b      	lsls	r3, r3, #1
    8874:	58e9      	ldr	r1, [r5, r3]
    8876:	1c38      	adds	r0, r7, #0
    8878:	f7f8 fb7c 	bl	f74 <__aeabi_fmul>
    887c:	2100      	movs	r1, #0
    887e:	f7f8 f80b 	bl	898 <__aeabi_fadd>
    8882:	4680      	mov	r8, r0
    8884:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8886:	1c30      	adds	r0, r6, #0
    8888:	2100      	movs	r1, #0
    888a:	f7f7 ffd7 	bl	83c <__aeabi_fcmpeq>
    888e:	2800      	cmp	r0, #0
    8890:	d10b      	bne.n	88aa <PSP_CNFG_MQX_KERNEL_LOGGING+0x8aa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8892:	23c0      	movs	r3, #192	; 0xc0
    8894:	005b      	lsls	r3, r3, #1
    8896:	58e9      	ldr	r1, [r5, r3]
    8898:	1c30      	adds	r0, r6, #0
    889a:	f7f8 fb6b 	bl	f74 <__aeabi_fmul>
    889e:	1c01      	adds	r1, r0, #0
    88a0:	4640      	mov	r0, r8
    88a2:	f7f7 fff9 	bl	898 <__aeabi_fadd>
    88a6:	4680      	mov	r8, r0
    88a8:	60a0      	str	r0, [r4, #8]
    88aa:	23d8      	movs	r3, #216	; 0xd8
    88ac:	005b      	lsls	r3, r3, #1
    88ae:	58e9      	ldr	r1, [r5, r3]
    88b0:	9804      	ldr	r0, [sp, #16]
    88b2:	f7f8 fb5f 	bl	f74 <__aeabi_fmul>
    88b6:	4641      	mov	r1, r8
    88b8:	f7f7 ffee 	bl	898 <__aeabi_fadd>
    88bc:	23f0      	movs	r3, #240	; 0xf0
    88be:	4680      	mov	r8, r0
    88c0:	005b      	lsls	r3, r3, #1
    88c2:	60a0      	str	r0, [r4, #8]
    88c4:	58e9      	ldr	r1, [r5, r3]
    88c6:	9802      	ldr	r0, [sp, #8]
    88c8:	f7f8 fb54 	bl	f74 <__aeabi_fmul>
    88cc:	4641      	mov	r1, r8
    88ce:	f7f7 ffe3 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    88d2:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    88d4:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    88d6:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    88d8:	1c38      	adds	r0, r7, #0
    88da:	1c19      	adds	r1, r3, #0
    88dc:	f7f7 ffae 	bl	83c <__aeabi_fcmpeq>
    88e0:	2800      	cmp	r0, #0
    88e2:	d001      	beq.n	88e8 <PSP_CNFG_MQX_KERNEL_LOGGING+0x8e8>
    88e4:	f001 fcd8 	bl	a298 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2298>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    88e8:	23aa      	movs	r3, #170	; 0xaa
    88ea:	005b      	lsls	r3, r3, #1
    88ec:	58e9      	ldr	r1, [r5, r3]
    88ee:	1c38      	adds	r0, r7, #0
    88f0:	f7f8 fb40 	bl	f74 <__aeabi_fmul>
    88f4:	2100      	movs	r1, #0
    88f6:	f7f7 ffcf 	bl	898 <__aeabi_fadd>
    88fa:	4680      	mov	r8, r0
    88fc:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    88fe:	1c30      	adds	r0, r6, #0
    8900:	2100      	movs	r1, #0
    8902:	f7f7 ff9b 	bl	83c <__aeabi_fcmpeq>
    8906:	2800      	cmp	r0, #0
    8908:	d10b      	bne.n	8922 <PSP_CNFG_MQX_KERNEL_LOGGING+0x922>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    890a:	23c2      	movs	r3, #194	; 0xc2
    890c:	005b      	lsls	r3, r3, #1
    890e:	58e9      	ldr	r1, [r5, r3]
    8910:	1c30      	adds	r0, r6, #0
    8912:	f7f8 fb2f 	bl	f74 <__aeabi_fmul>
    8916:	1c01      	adds	r1, r0, #0
    8918:	4640      	mov	r0, r8
    891a:	f7f7 ffbd 	bl	898 <__aeabi_fadd>
    891e:	4680      	mov	r8, r0
    8920:	60e0      	str	r0, [r4, #12]
    8922:	23da      	movs	r3, #218	; 0xda
    8924:	005b      	lsls	r3, r3, #1
    8926:	58e9      	ldr	r1, [r5, r3]
    8928:	9804      	ldr	r0, [sp, #16]
    892a:	f7f8 fb23 	bl	f74 <__aeabi_fmul>
    892e:	4641      	mov	r1, r8
    8930:	f7f7 ffb2 	bl	898 <__aeabi_fadd>
    8934:	23f2      	movs	r3, #242	; 0xf2
    8936:	4680      	mov	r8, r0
    8938:	005b      	lsls	r3, r3, #1
    893a:	60e0      	str	r0, [r4, #12]
    893c:	58e9      	ldr	r1, [r5, r3]
    893e:	9802      	ldr	r0, [sp, #8]
    8940:	f7f8 fb18 	bl	f74 <__aeabi_fmul>
    8944:	4641      	mov	r1, r8
    8946:	f7f7 ffa7 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    894a:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    894c:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    894e:	6123      	str	r3, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8950:	1c38      	adds	r0, r7, #0
    8952:	1c19      	adds	r1, r3, #0
    8954:	f7f7 ff72 	bl	83c <__aeabi_fcmpeq>
    8958:	2800      	cmp	r0, #0
    895a:	d001      	beq.n	8960 <PSP_CNFG_MQX_KERNEL_LOGGING+0x960>
    895c:	f001 fc98 	bl	a290 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2290>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8960:	23ac      	movs	r3, #172	; 0xac
    8962:	005b      	lsls	r3, r3, #1
    8964:	58e9      	ldr	r1, [r5, r3]
    8966:	1c38      	adds	r0, r7, #0
    8968:	f7f8 fb04 	bl	f74 <__aeabi_fmul>
    896c:	2100      	movs	r1, #0
    896e:	f7f7 ff93 	bl	898 <__aeabi_fadd>
    8972:	4680      	mov	r8, r0
    8974:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8976:	1c30      	adds	r0, r6, #0
    8978:	2100      	movs	r1, #0
    897a:	f7f7 ff5f 	bl	83c <__aeabi_fcmpeq>
    897e:	2800      	cmp	r0, #0
    8980:	d10b      	bne.n	899a <PSP_CNFG_MQX_KERNEL_LOGGING+0x99a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8982:	23c4      	movs	r3, #196	; 0xc4
    8984:	005b      	lsls	r3, r3, #1
    8986:	58e9      	ldr	r1, [r5, r3]
    8988:	1c30      	adds	r0, r6, #0
    898a:	f7f8 faf3 	bl	f74 <__aeabi_fmul>
    898e:	1c01      	adds	r1, r0, #0
    8990:	4640      	mov	r0, r8
    8992:	f7f7 ff81 	bl	898 <__aeabi_fadd>
    8996:	4680      	mov	r8, r0
    8998:	6120      	str	r0, [r4, #16]
    899a:	23dc      	movs	r3, #220	; 0xdc
    899c:	005b      	lsls	r3, r3, #1
    899e:	58e9      	ldr	r1, [r5, r3]
    89a0:	9804      	ldr	r0, [sp, #16]
    89a2:	f7f8 fae7 	bl	f74 <__aeabi_fmul>
    89a6:	4641      	mov	r1, r8
    89a8:	f7f7 ff76 	bl	898 <__aeabi_fadd>
    89ac:	23f4      	movs	r3, #244	; 0xf4
    89ae:	4680      	mov	r8, r0
    89b0:	005b      	lsls	r3, r3, #1
    89b2:	6120      	str	r0, [r4, #16]
    89b4:	58e9      	ldr	r1, [r5, r3]
    89b6:	9802      	ldr	r0, [sp, #8]
    89b8:	f7f8 fadc 	bl	f74 <__aeabi_fmul>
    89bc:	4641      	mov	r1, r8
    89be:	f7f7 ff6b 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    89c2:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    89c4:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    89c6:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    89c8:	1c38      	adds	r0, r7, #0
    89ca:	1c19      	adds	r1, r3, #0
    89cc:	f7f7 ff36 	bl	83c <__aeabi_fcmpeq>
    89d0:	2800      	cmp	r0, #0
    89d2:	d001      	beq.n	89d8 <PSP_CNFG_MQX_KERNEL_LOGGING+0x9d8>
    89d4:	f001 f8ea 	bl	9bac <PSP_CNFG_MQX_KERNEL_LOGGING+0x1bac>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    89d8:	23ae      	movs	r3, #174	; 0xae
    89da:	005b      	lsls	r3, r3, #1
    89dc:	58e9      	ldr	r1, [r5, r3]
    89de:	1c38      	adds	r0, r7, #0
    89e0:	f7f8 fac8 	bl	f74 <__aeabi_fmul>
    89e4:	2100      	movs	r1, #0
    89e6:	f7f7 ff57 	bl	898 <__aeabi_fadd>
    89ea:	1c07      	adds	r7, r0, #0
    89ec:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    89ee:	1c30      	adds	r0, r6, #0
    89f0:	2100      	movs	r1, #0
    89f2:	f7f7 ff23 	bl	83c <__aeabi_fcmpeq>
    89f6:	2800      	cmp	r0, #0
    89f8:	d10b      	bne.n	8a12 <PSP_CNFG_MQX_KERNEL_LOGGING+0xa12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    89fa:	23c6      	movs	r3, #198	; 0xc6
    89fc:	005b      	lsls	r3, r3, #1
    89fe:	58e9      	ldr	r1, [r5, r3]
    8a00:	1c30      	adds	r0, r6, #0
    8a02:	f7f8 fab7 	bl	f74 <__aeabi_fmul>
    8a06:	1c01      	adds	r1, r0, #0
    8a08:	1c38      	adds	r0, r7, #0
    8a0a:	f7f7 ff45 	bl	898 <__aeabi_fadd>
    8a0e:	1c07      	adds	r7, r0, #0
    8a10:	6160      	str	r0, [r4, #20]
    8a12:	23de      	movs	r3, #222	; 0xde
    8a14:	005b      	lsls	r3, r3, #1
    8a16:	58e9      	ldr	r1, [r5, r3]
    8a18:	9804      	ldr	r0, [sp, #16]
    8a1a:	f7f8 faab 	bl	f74 <__aeabi_fmul>
    8a1e:	1c39      	adds	r1, r7, #0
    8a20:	f7f7 ff3a 	bl	898 <__aeabi_fadd>
    8a24:	23f6      	movs	r3, #246	; 0xf6
    8a26:	1c06      	adds	r6, r0, #0
    8a28:	6160      	str	r0, [r4, #20]
    8a2a:	9802      	ldr	r0, [sp, #8]
    8a2c:	005b      	lsls	r3, r3, #1
    8a2e:	58e9      	ldr	r1, [r5, r3]
    8a30:	f7f8 faa0 	bl	f74 <__aeabi_fmul>
    8a34:	1c31      	adds	r1, r6, #0
    8a36:	f7f7 ff2f 	bl	898 <__aeabi_fadd>
    8a3a:	6160      	str	r0, [r4, #20]
    8a3c:	f7fe f8b7 	bl	6bae <fRun_9DOF_GBY_KALMAN+0xea2>
    8a40:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8a42:	46b9      	mov	r9, r7
    8a44:	469a      	mov	sl, r3
    8a46:	2318      	movs	r3, #24
    8a48:	469c      	mov	ip, r3
    8a4a:	44a4      	add	ip, r4
    8a4c:	4663      	mov	r3, ip
    8a4e:	9311      	str	r3, [sp, #68]	; 0x44
    8a50:	1c33      	adds	r3, r6, #0
    8a52:	465f      	mov	r7, fp
    8a54:	4656      	mov	r6, sl
    8a56:	46ab      	mov	fp, r5
    8a58:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8a5a:	2300      	movs	r3, #0
    8a5c:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8a5e:	6839      	ldr	r1, [r7, #0]
    8a60:	4640      	mov	r0, r8
    8a62:	f7f8 fa87 	bl	f74 <__aeabi_fmul>
    8a66:	2100      	movs	r1, #0
    8a68:	f7f7 ff16 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8a6c:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8a6e:	1c05      	adds	r5, r0, #0
    8a70:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8a72:	4648      	mov	r0, r9
    8a74:	f7f7 fee2 	bl	83c <__aeabi_fcmpeq>
    8a78:	2800      	cmp	r0, #0
    8a7a:	d109      	bne.n	8a90 <PSP_CNFG_MQX_KERNEL_LOGGING+0xa90>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8a7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    8a7e:	4648      	mov	r0, r9
    8a80:	f7f8 fa78 	bl	f74 <__aeabi_fmul>
    8a84:	1c01      	adds	r1, r0, #0
    8a86:	1c28      	adds	r0, r5, #0
    8a88:	f7f7 ff06 	bl	898 <__aeabi_fadd>
    8a8c:	1c05      	adds	r5, r0, #0
    8a8e:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8a90:	4650      	mov	r0, sl
    8a92:	2100      	movs	r1, #0
    8a94:	f7f7 fed2 	bl	83c <__aeabi_fcmpeq>
    8a98:	2800      	cmp	r0, #0
    8a9a:	d109      	bne.n	8ab0 <PSP_CNFG_MQX_KERNEL_LOGGING+0xab0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8a9c:	6e39      	ldr	r1, [r7, #96]	; 0x60
    8a9e:	4650      	mov	r0, sl
    8aa0:	f7f8 fa68 	bl	f74 <__aeabi_fmul>
    8aa4:	1c01      	adds	r1, r0, #0
    8aa6:	1c28      	adds	r0, r5, #0
    8aa8:	f7f7 fef6 	bl	898 <__aeabi_fadd>
    8aac:	1c05      	adds	r5, r0, #0
    8aae:	6020      	str	r0, [r4, #0]
    8ab0:	6831      	ldr	r1, [r6, #0]
    8ab2:	9804      	ldr	r0, [sp, #16]
    8ab4:	f7f8 fa5e 	bl	f74 <__aeabi_fmul>
    8ab8:	1c29      	adds	r1, r5, #0
    8aba:	f7f7 feed 	bl	898 <__aeabi_fadd>
    8abe:	6020      	str	r0, [r4, #0]
    8ac0:	6b31      	ldr	r1, [r6, #48]	; 0x30
    8ac2:	1c05      	adds	r5, r0, #0
    8ac4:	9802      	ldr	r0, [sp, #8]
    8ac6:	f7f8 fa55 	bl	f74 <__aeabi_fmul>
    8aca:	1c01      	adds	r1, r0, #0
    8acc:	1c28      	adds	r0, r5, #0
    8ace:	f7f7 fee3 	bl	898 <__aeabi_fadd>
    8ad2:	6020      	str	r0, [r4, #0]
    8ad4:	6e31      	ldr	r1, [r6, #96]	; 0x60
    8ad6:	1c05      	adds	r5, r0, #0
    8ad8:	9803      	ldr	r0, [sp, #12]
    8ada:	f7f8 fa4b 	bl	f74 <__aeabi_fmul>
    8ade:	1c01      	adds	r1, r0, #0
    8ae0:	1c28      	adds	r0, r5, #0
    8ae2:	f7f7 fed9 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1397
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
    8ae6:	9b11      	ldr	r3, [sp, #68]	; 0x44
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8ae8:	c401      	stmia	r4!, {r0}
    8aea:	3704      	adds	r7, #4
    8aec:	3604      	adds	r6, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1397
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
    8aee:	429c      	cmp	r4, r3
    8af0:	d1b3      	bne.n	8a5a <PSP_CNFG_MQX_KERNEL_LOGGING+0xa5a>
    8af2:	465d      	mov	r5, fp
    8af4:	f7fe f85b 	bl	6bae <fRun_9DOF_GBY_KALMAN+0xea2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8af8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8afa:	4640      	mov	r0, r8
    8afc:	58e9      	ldr	r1, [r5, r3]
    8afe:	f7f8 fa39 	bl	f74 <__aeabi_fmul>
    8b02:	2100      	movs	r1, #0
    8b04:	f7f7 fec8 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8b08:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8b0a:	4681      	mov	r9, r0
    8b0c:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8b0e:	1c38      	adds	r0, r7, #0
    8b10:	f7f7 fe94 	bl	83c <__aeabi_fcmpeq>
    8b14:	2800      	cmp	r0, #0
    8b16:	d10b      	bne.n	8b30 <PSP_CNFG_MQX_KERNEL_LOGGING+0xb30>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8b18:	23a4      	movs	r3, #164	; 0xa4
    8b1a:	005b      	lsls	r3, r3, #1
    8b1c:	58e9      	ldr	r1, [r5, r3]
    8b1e:	1c38      	adds	r0, r7, #0
    8b20:	f7f8 fa28 	bl	f74 <__aeabi_fmul>
    8b24:	1c01      	adds	r1, r0, #0
    8b26:	4648      	mov	r0, r9
    8b28:	f7f7 feb6 	bl	898 <__aeabi_fadd>
    8b2c:	4681      	mov	r9, r0
    8b2e:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8b30:	1c30      	adds	r0, r6, #0
    8b32:	2100      	movs	r1, #0
    8b34:	f7f7 fe82 	bl	83c <__aeabi_fcmpeq>
    8b38:	2800      	cmp	r0, #0
    8b3a:	d10b      	bne.n	8b54 <PSP_CNFG_MQX_KERNEL_LOGGING+0xb54>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8b3c:	23bc      	movs	r3, #188	; 0xbc
    8b3e:	005b      	lsls	r3, r3, #1
    8b40:	58e9      	ldr	r1, [r5, r3]
    8b42:	1c30      	adds	r0, r6, #0
    8b44:	f7f8 fa16 	bl	f74 <__aeabi_fmul>
    8b48:	1c01      	adds	r1, r0, #0
    8b4a:	4648      	mov	r0, r9
    8b4c:	f7f7 fea4 	bl	898 <__aeabi_fadd>
    8b50:	4681      	mov	r9, r0
    8b52:	6020      	str	r0, [r4, #0]
    8b54:	23d4      	movs	r3, #212	; 0xd4
    8b56:	005b      	lsls	r3, r3, #1
    8b58:	58e9      	ldr	r1, [r5, r3]
    8b5a:	9804      	ldr	r0, [sp, #16]
    8b5c:	f7f8 fa0a 	bl	f74 <__aeabi_fmul>
    8b60:	4649      	mov	r1, r9
    8b62:	f7f7 fe99 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8b66:	2300      	movs	r3, #0
    8b68:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8b6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8b6c:	6020      	str	r0, [r4, #0]
    8b6e:	58e9      	ldr	r1, [r5, r3]
    8b70:	4640      	mov	r0, r8
    8b72:	f7f8 f9ff 	bl	f74 <__aeabi_fmul>
    8b76:	2100      	movs	r1, #0
    8b78:	f7f7 fe8e 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8b7c:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8b7e:	4681      	mov	r9, r0
    8b80:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8b82:	1c38      	adds	r0, r7, #0
    8b84:	f7f7 fe5a 	bl	83c <__aeabi_fcmpeq>
    8b88:	2800      	cmp	r0, #0
    8b8a:	d10b      	bne.n	8ba4 <PSP_CNFG_MQX_KERNEL_LOGGING+0xba4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8b8c:	23a6      	movs	r3, #166	; 0xa6
    8b8e:	005b      	lsls	r3, r3, #1
    8b90:	58e9      	ldr	r1, [r5, r3]
    8b92:	1c38      	adds	r0, r7, #0
    8b94:	f7f8 f9ee 	bl	f74 <__aeabi_fmul>
    8b98:	1c01      	adds	r1, r0, #0
    8b9a:	4648      	mov	r0, r9
    8b9c:	f7f7 fe7c 	bl	898 <__aeabi_fadd>
    8ba0:	4681      	mov	r9, r0
    8ba2:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8ba4:	1c30      	adds	r0, r6, #0
    8ba6:	2100      	movs	r1, #0
    8ba8:	f7f7 fe48 	bl	83c <__aeabi_fcmpeq>
    8bac:	2800      	cmp	r0, #0
    8bae:	d10b      	bne.n	8bc8 <PSP_CNFG_MQX_KERNEL_LOGGING+0xbc8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8bb0:	23be      	movs	r3, #190	; 0xbe
    8bb2:	005b      	lsls	r3, r3, #1
    8bb4:	58e9      	ldr	r1, [r5, r3]
    8bb6:	1c30      	adds	r0, r6, #0
    8bb8:	f7f8 f9dc 	bl	f74 <__aeabi_fmul>
    8bbc:	1c01      	adds	r1, r0, #0
    8bbe:	4648      	mov	r0, r9
    8bc0:	f7f7 fe6a 	bl	898 <__aeabi_fadd>
    8bc4:	4681      	mov	r9, r0
    8bc6:	6060      	str	r0, [r4, #4]
    8bc8:	23d6      	movs	r3, #214	; 0xd6
    8bca:	005b      	lsls	r3, r3, #1
    8bcc:	58e9      	ldr	r1, [r5, r3]
    8bce:	9804      	ldr	r0, [sp, #16]
    8bd0:	f7f8 f9d0 	bl	f74 <__aeabi_fmul>
    8bd4:	4649      	mov	r1, r9
    8bd6:	f7f7 fe5f 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8bda:	2300      	movs	r3, #0
    8bdc:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8bde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8be0:	6060      	str	r0, [r4, #4]
    8be2:	58e9      	ldr	r1, [r5, r3]
    8be4:	4640      	mov	r0, r8
    8be6:	f7f8 f9c5 	bl	f74 <__aeabi_fmul>
    8bea:	2100      	movs	r1, #0
    8bec:	f7f7 fe54 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8bf0:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8bf2:	4681      	mov	r9, r0
    8bf4:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8bf6:	1c38      	adds	r0, r7, #0
    8bf8:	f7f7 fe20 	bl	83c <__aeabi_fcmpeq>
    8bfc:	2800      	cmp	r0, #0
    8bfe:	d10b      	bne.n	8c18 <PSP_CNFG_MQX_KERNEL_LOGGING+0xc18>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8c00:	23a8      	movs	r3, #168	; 0xa8
    8c02:	005b      	lsls	r3, r3, #1
    8c04:	58e9      	ldr	r1, [r5, r3]
    8c06:	1c38      	adds	r0, r7, #0
    8c08:	f7f8 f9b4 	bl	f74 <__aeabi_fmul>
    8c0c:	1c01      	adds	r1, r0, #0
    8c0e:	4648      	mov	r0, r9
    8c10:	f7f7 fe42 	bl	898 <__aeabi_fadd>
    8c14:	4681      	mov	r9, r0
    8c16:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8c18:	1c30      	adds	r0, r6, #0
    8c1a:	2100      	movs	r1, #0
    8c1c:	f7f7 fe0e 	bl	83c <__aeabi_fcmpeq>
    8c20:	2800      	cmp	r0, #0
    8c22:	d10b      	bne.n	8c3c <PSP_CNFG_MQX_KERNEL_LOGGING+0xc3c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8c24:	23c0      	movs	r3, #192	; 0xc0
    8c26:	005b      	lsls	r3, r3, #1
    8c28:	58e9      	ldr	r1, [r5, r3]
    8c2a:	1c30      	adds	r0, r6, #0
    8c2c:	f7f8 f9a2 	bl	f74 <__aeabi_fmul>
    8c30:	1c01      	adds	r1, r0, #0
    8c32:	4648      	mov	r0, r9
    8c34:	f7f7 fe30 	bl	898 <__aeabi_fadd>
    8c38:	4681      	mov	r9, r0
    8c3a:	60a0      	str	r0, [r4, #8]
    8c3c:	23d8      	movs	r3, #216	; 0xd8
    8c3e:	005b      	lsls	r3, r3, #1
    8c40:	58e9      	ldr	r1, [r5, r3]
    8c42:	9804      	ldr	r0, [sp, #16]
    8c44:	f7f8 f996 	bl	f74 <__aeabi_fmul>
    8c48:	4649      	mov	r1, r9
    8c4a:	f7f7 fe25 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8c4e:	2300      	movs	r3, #0
    8c50:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8c52:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8c54:	60a0      	str	r0, [r4, #8]
    8c56:	58e9      	ldr	r1, [r5, r3]
    8c58:	4640      	mov	r0, r8
    8c5a:	f7f8 f98b 	bl	f74 <__aeabi_fmul>
    8c5e:	2100      	movs	r1, #0
    8c60:	f7f7 fe1a 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8c64:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8c66:	4681      	mov	r9, r0
    8c68:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8c6a:	1c38      	adds	r0, r7, #0
    8c6c:	f7f7 fde6 	bl	83c <__aeabi_fcmpeq>
    8c70:	2800      	cmp	r0, #0
    8c72:	d10b      	bne.n	8c8c <PSP_CNFG_MQX_KERNEL_LOGGING+0xc8c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8c74:	23aa      	movs	r3, #170	; 0xaa
    8c76:	005b      	lsls	r3, r3, #1
    8c78:	58e9      	ldr	r1, [r5, r3]
    8c7a:	1c38      	adds	r0, r7, #0
    8c7c:	f7f8 f97a 	bl	f74 <__aeabi_fmul>
    8c80:	1c01      	adds	r1, r0, #0
    8c82:	4648      	mov	r0, r9
    8c84:	f7f7 fe08 	bl	898 <__aeabi_fadd>
    8c88:	4681      	mov	r9, r0
    8c8a:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8c8c:	1c30      	adds	r0, r6, #0
    8c8e:	2100      	movs	r1, #0
    8c90:	f7f7 fdd4 	bl	83c <__aeabi_fcmpeq>
    8c94:	2800      	cmp	r0, #0
    8c96:	d10b      	bne.n	8cb0 <PSP_CNFG_MQX_KERNEL_LOGGING+0xcb0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8c98:	23c2      	movs	r3, #194	; 0xc2
    8c9a:	005b      	lsls	r3, r3, #1
    8c9c:	58e9      	ldr	r1, [r5, r3]
    8c9e:	1c30      	adds	r0, r6, #0
    8ca0:	f7f8 f968 	bl	f74 <__aeabi_fmul>
    8ca4:	1c01      	adds	r1, r0, #0
    8ca6:	4648      	mov	r0, r9
    8ca8:	f7f7 fdf6 	bl	898 <__aeabi_fadd>
    8cac:	4681      	mov	r9, r0
    8cae:	60e0      	str	r0, [r4, #12]
    8cb0:	23da      	movs	r3, #218	; 0xda
    8cb2:	005b      	lsls	r3, r3, #1
    8cb4:	58e9      	ldr	r1, [r5, r3]
    8cb6:	9804      	ldr	r0, [sp, #16]
    8cb8:	f7f8 f95c 	bl	f74 <__aeabi_fmul>
    8cbc:	4649      	mov	r1, r9
    8cbe:	f7f7 fdeb 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8cc2:	2300      	movs	r3, #0
    8cc4:	6123      	str	r3, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8cc6:	2394      	movs	r3, #148	; 0x94
    8cc8:	60e0      	str	r0, [r4, #12]
    8cca:	005b      	lsls	r3, r3, #1
    8ccc:	58e9      	ldr	r1, [r5, r3]
    8cce:	4640      	mov	r0, r8
    8cd0:	f7f8 f950 	bl	f74 <__aeabi_fmul>
    8cd4:	2100      	movs	r1, #0
    8cd6:	f7f7 fddf 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8cda:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8cdc:	4681      	mov	r9, r0
    8cde:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8ce0:	1c38      	adds	r0, r7, #0
    8ce2:	f7f7 fdab 	bl	83c <__aeabi_fcmpeq>
    8ce6:	2800      	cmp	r0, #0
    8ce8:	d10b      	bne.n	8d02 <PSP_CNFG_MQX_KERNEL_LOGGING+0xd02>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8cea:	23ac      	movs	r3, #172	; 0xac
    8cec:	005b      	lsls	r3, r3, #1
    8cee:	58e9      	ldr	r1, [r5, r3]
    8cf0:	1c38      	adds	r0, r7, #0
    8cf2:	f7f8 f93f 	bl	f74 <__aeabi_fmul>
    8cf6:	1c01      	adds	r1, r0, #0
    8cf8:	4648      	mov	r0, r9
    8cfa:	f7f7 fdcd 	bl	898 <__aeabi_fadd>
    8cfe:	4681      	mov	r9, r0
    8d00:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8d02:	1c30      	adds	r0, r6, #0
    8d04:	2100      	movs	r1, #0
    8d06:	f7f7 fd99 	bl	83c <__aeabi_fcmpeq>
    8d0a:	2800      	cmp	r0, #0
    8d0c:	d10b      	bne.n	8d26 <PSP_CNFG_MQX_KERNEL_LOGGING+0xd26>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8d0e:	23c4      	movs	r3, #196	; 0xc4
    8d10:	005b      	lsls	r3, r3, #1
    8d12:	58e9      	ldr	r1, [r5, r3]
    8d14:	1c30      	adds	r0, r6, #0
    8d16:	f7f8 f92d 	bl	f74 <__aeabi_fmul>
    8d1a:	1c01      	adds	r1, r0, #0
    8d1c:	4648      	mov	r0, r9
    8d1e:	f7f7 fdbb 	bl	898 <__aeabi_fadd>
    8d22:	4681      	mov	r9, r0
    8d24:	6120      	str	r0, [r4, #16]
    8d26:	23dc      	movs	r3, #220	; 0xdc
    8d28:	005b      	lsls	r3, r3, #1
    8d2a:	58e9      	ldr	r1, [r5, r3]
    8d2c:	9804      	ldr	r0, [sp, #16]
    8d2e:	f7f8 f921 	bl	f74 <__aeabi_fmul>
    8d32:	4649      	mov	r1, r9
    8d34:	f7f7 fdb0 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8d38:	2300      	movs	r3, #0
    8d3a:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8d3c:	2396      	movs	r3, #150	; 0x96
    8d3e:	6120      	str	r0, [r4, #16]
    8d40:	005b      	lsls	r3, r3, #1
    8d42:	58e9      	ldr	r1, [r5, r3]
    8d44:	4640      	mov	r0, r8
    8d46:	f7f8 f915 	bl	f74 <__aeabi_fmul>
    8d4a:	2100      	movs	r1, #0
    8d4c:	f7f7 fda4 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8d50:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8d52:	4680      	mov	r8, r0
    8d54:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8d56:	1c38      	adds	r0, r7, #0
    8d58:	f7f7 fd70 	bl	83c <__aeabi_fcmpeq>
    8d5c:	2800      	cmp	r0, #0
    8d5e:	d10b      	bne.n	8d78 <PSP_CNFG_MQX_KERNEL_LOGGING+0xd78>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8d60:	23ae      	movs	r3, #174	; 0xae
    8d62:	005b      	lsls	r3, r3, #1
    8d64:	58e9      	ldr	r1, [r5, r3]
    8d66:	1c38      	adds	r0, r7, #0
    8d68:	f7f8 f904 	bl	f74 <__aeabi_fmul>
    8d6c:	1c01      	adds	r1, r0, #0
    8d6e:	4640      	mov	r0, r8
    8d70:	f7f7 fd92 	bl	898 <__aeabi_fadd>
    8d74:	4680      	mov	r8, r0
    8d76:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8d78:	1c30      	adds	r0, r6, #0
    8d7a:	2100      	movs	r1, #0
    8d7c:	f7f7 fd5e 	bl	83c <__aeabi_fcmpeq>
    8d80:	2800      	cmp	r0, #0
    8d82:	d10b      	bne.n	8d9c <PSP_CNFG_MQX_KERNEL_LOGGING+0xd9c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8d84:	23c6      	movs	r3, #198	; 0xc6
    8d86:	005b      	lsls	r3, r3, #1
    8d88:	58e9      	ldr	r1, [r5, r3]
    8d8a:	1c30      	adds	r0, r6, #0
    8d8c:	f7f8 f8f2 	bl	f74 <__aeabi_fmul>
    8d90:	1c01      	adds	r1, r0, #0
    8d92:	4640      	mov	r0, r8
    8d94:	f7f7 fd80 	bl	898 <__aeabi_fadd>
    8d98:	4680      	mov	r8, r0
    8d9a:	6160      	str	r0, [r4, #20]
    8d9c:	23de      	movs	r3, #222	; 0xde
    8d9e:	9804      	ldr	r0, [sp, #16]
    8da0:	005b      	lsls	r3, r3, #1
    8da2:	f7fd fefd 	bl	6ba0 <fRun_9DOF_GBY_KALMAN+0xe94>
    8da6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8da8:	46b9      	mov	r9, r7
    8daa:	469b      	mov	fp, r3
    8dac:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8dae:	465f      	mov	r7, fp
    8db0:	469a      	mov	sl, r3
    8db2:	2318      	movs	r3, #24
    8db4:	469c      	mov	ip, r3
    8db6:	44a4      	add	ip, r4
    8db8:	4663      	mov	r3, ip
    8dba:	9302      	str	r3, [sp, #8]
    8dbc:	1c33      	adds	r3, r6, #0
    8dbe:	46ab      	mov	fp, r5
    8dc0:	4656      	mov	r6, sl
    8dc2:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8dc4:	2300      	movs	r3, #0
    8dc6:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8dc8:	6839      	ldr	r1, [r7, #0]
    8dca:	4640      	mov	r0, r8
    8dcc:	f7f8 f8d2 	bl	f74 <__aeabi_fmul>
    8dd0:	2100      	movs	r1, #0
    8dd2:	f7f7 fd61 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8dd6:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8dd8:	1c05      	adds	r5, r0, #0
    8dda:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8ddc:	4648      	mov	r0, r9
    8dde:	f7f7 fd2d 	bl	83c <__aeabi_fcmpeq>
    8de2:	2800      	cmp	r0, #0
    8de4:	d109      	bne.n	8dfa <PSP_CNFG_MQX_KERNEL_LOGGING+0xdfa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8de6:	6b39      	ldr	r1, [r7, #48]	; 0x30
    8de8:	4648      	mov	r0, r9
    8dea:	f7f8 f8c3 	bl	f74 <__aeabi_fmul>
    8dee:	1c01      	adds	r1, r0, #0
    8df0:	1c28      	adds	r0, r5, #0
    8df2:	f7f7 fd51 	bl	898 <__aeabi_fadd>
    8df6:	1c05      	adds	r5, r0, #0
    8df8:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8dfa:	4650      	mov	r0, sl
    8dfc:	2100      	movs	r1, #0
    8dfe:	f7f7 fd1d 	bl	83c <__aeabi_fcmpeq>
    8e02:	2800      	cmp	r0, #0
    8e04:	d109      	bne.n	8e1a <PSP_CNFG_MQX_KERNEL_LOGGING+0xe1a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8e06:	6e39      	ldr	r1, [r7, #96]	; 0x60
    8e08:	4650      	mov	r0, sl
    8e0a:	f7f8 f8b3 	bl	f74 <__aeabi_fmul>
    8e0e:	1c01      	adds	r1, r0, #0
    8e10:	1c28      	adds	r0, r5, #0
    8e12:	f7f7 fd41 	bl	898 <__aeabi_fadd>
    8e16:	1c05      	adds	r5, r0, #0
    8e18:	6020      	str	r0, [r4, #0]
    8e1a:	6831      	ldr	r1, [r6, #0]
    8e1c:	9804      	ldr	r0, [sp, #16]
    8e1e:	f7f8 f8a9 	bl	f74 <__aeabi_fmul>
    8e22:	1c29      	adds	r1, r5, #0
    8e24:	f7f7 fd38 	bl	898 <__aeabi_fadd>
    8e28:	6020      	str	r0, [r4, #0]
    8e2a:	6e31      	ldr	r1, [r6, #96]	; 0x60
    8e2c:	1c05      	adds	r5, r0, #0
    8e2e:	9803      	ldr	r0, [sp, #12]
    8e30:	f7f8 f8a0 	bl	f74 <__aeabi_fmul>
    8e34:	1c29      	adds	r1, r5, #0
    8e36:	f7f7 fd2f 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1397
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
    8e3a:	9b02      	ldr	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8e3c:	c401      	stmia	r4!, {r0}
    8e3e:	3704      	adds	r7, #4
    8e40:	3604      	adds	r6, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1397
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
    8e42:	429c      	cmp	r4, r3
    8e44:	d1be      	bne.n	8dc4 <PSP_CNFG_MQX_KERNEL_LOGGING+0xdc4>
    8e46:	465d      	mov	r5, fp
    8e48:	f7fd feb1 	bl	6bae <fRun_9DOF_GBY_KALMAN+0xea2>
    8e4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e4e:	46b1      	mov	r9, r6
    8e50:	4698      	mov	r8, r3
    8e52:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8e54:	469a      	mov	sl, r3
    8e56:	2318      	movs	r3, #24
    8e58:	469b      	mov	fp, r3
    8e5a:	1c2b      	adds	r3, r5, #0
    8e5c:	4645      	mov	r5, r8
    8e5e:	46b8      	mov	r8, r7
    8e60:	4657      	mov	r7, sl
    8e62:	469a      	mov	sl, r3
    8e64:	44a3      	add	fp, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8e66:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8e68:	4640      	mov	r0, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8e6a:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8e6c:	1c19      	adds	r1, r3, #0
    8e6e:	f7f7 fce5 	bl	83c <__aeabi_fcmpeq>
    8e72:	2600      	movs	r6, #0
    8e74:	2800      	cmp	r0, #0
    8e76:	d108      	bne.n	8e8a <PSP_CNFG_MQX_KERNEL_LOGGING+0xe8a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8e78:	6839      	ldr	r1, [r7, #0]
    8e7a:	4640      	mov	r0, r8
    8e7c:	f7f8 f87a 	bl	f74 <__aeabi_fmul>
    8e80:	2100      	movs	r1, #0
    8e82:	f7f7 fd09 	bl	898 <__aeabi_fadd>
    8e86:	1c06      	adds	r6, r0, #0
    8e88:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8e8a:	4648      	mov	r0, r9
    8e8c:	2100      	movs	r1, #0
    8e8e:	f7f7 fcd5 	bl	83c <__aeabi_fcmpeq>
    8e92:	2800      	cmp	r0, #0
    8e94:	d109      	bne.n	8eaa <PSP_CNFG_MQX_KERNEL_LOGGING+0xeaa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8e96:	6b39      	ldr	r1, [r7, #48]	; 0x30
    8e98:	4648      	mov	r0, r9
    8e9a:	f7f8 f86b 	bl	f74 <__aeabi_fmul>
    8e9e:	1c01      	adds	r1, r0, #0
    8ea0:	1c30      	adds	r0, r6, #0
    8ea2:	f7f7 fcf9 	bl	898 <__aeabi_fadd>
    8ea6:	1c06      	adds	r6, r0, #0
    8ea8:	6020      	str	r0, [r4, #0]
    8eaa:	6829      	ldr	r1, [r5, #0]
    8eac:	9804      	ldr	r0, [sp, #16]
    8eae:	f7f8 f861 	bl	f74 <__aeabi_fmul>
    8eb2:	1c31      	adds	r1, r6, #0
    8eb4:	f7f7 fcf0 	bl	898 <__aeabi_fadd>
    8eb8:	6020      	str	r0, [r4, #0]
    8eba:	6b29      	ldr	r1, [r5, #48]	; 0x30
    8ebc:	1c06      	adds	r6, r0, #0
    8ebe:	9802      	ldr	r0, [sp, #8]
    8ec0:	f7f8 f858 	bl	f74 <__aeabi_fmul>
    8ec4:	1c31      	adds	r1, r6, #0
    8ec6:	f7f7 fce7 	bl	898 <__aeabi_fadd>
    8eca:	6020      	str	r0, [r4, #0]
    8ecc:	6e29      	ldr	r1, [r5, #96]	; 0x60
    8ece:	1c06      	adds	r6, r0, #0
    8ed0:	9803      	ldr	r0, [sp, #12]
    8ed2:	f7f8 f84f 	bl	f74 <__aeabi_fmul>
    8ed6:	1c31      	adds	r1, r6, #0
    8ed8:	f7f7 fcde 	bl	898 <__aeabi_fadd>
    8edc:	c401      	stmia	r4!, {r0}
    8ede:	3504      	adds	r5, #4
    8ee0:	3704      	adds	r7, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1397
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
    8ee2:	455c      	cmp	r4, fp
    8ee4:	d1bf      	bne.n	8e66 <PSP_CNFG_MQX_KERNEL_LOGGING+0xe66>
    8ee6:	4655      	mov	r5, sl
    8ee8:	f7fd fe61 	bl	6bae <fRun_9DOF_GBY_KALMAN+0xea2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8eec:	23a4      	movs	r3, #164	; 0xa4
    8eee:	005b      	lsls	r3, r3, #1
    8ef0:	58e9      	ldr	r1, [r5, r3]
    8ef2:	1c38      	adds	r0, r7, #0
    8ef4:	f7f8 f83e 	bl	f74 <__aeabi_fmul>
    8ef8:	2100      	movs	r1, #0
    8efa:	f7f7 fccd 	bl	898 <__aeabi_fadd>
    8efe:	4680      	mov	r8, r0
    8f00:	6020      	str	r0, [r4, #0]
    8f02:	e448      	b.n	8796 <PSP_CNFG_MQX_KERNEL_LOGGING+0x796>
    8f04:	23a4      	movs	r3, #164	; 0xa4
    8f06:	005b      	lsls	r3, r3, #1
    8f08:	58e9      	ldr	r1, [r5, r3]
    8f0a:	1c38      	adds	r0, r7, #0
    8f0c:	f7f8 f832 	bl	f74 <__aeabi_fmul>
    8f10:	2100      	movs	r1, #0
    8f12:	f7f7 fcc1 	bl	898 <__aeabi_fadd>
    8f16:	4680      	mov	r8, r0
    8f18:	6020      	str	r0, [r4, #0]
    8f1a:	f7ff fae9 	bl	84f0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x4f0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8f1e:	1c30      	adds	r0, r6, #0
    8f20:	2100      	movs	r1, #0
    8f22:	f7f7 fc8b 	bl	83c <__aeabi_fcmpeq>
    8f26:	2800      	cmp	r0, #0
    8f28:	d101      	bne.n	8f2e <PSP_CNFG_MQX_KERNEL_LOGGING+0xf2e>
    8f2a:	f000 fe42 	bl	9bb2 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1bb2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8f2e:	23d4      	movs	r3, #212	; 0xd4
    8f30:	005b      	lsls	r3, r3, #1
    8f32:	58e9      	ldr	r1, [r5, r3]
    8f34:	9804      	ldr	r0, [sp, #16]
    8f36:	f7f8 f81d 	bl	f74 <__aeabi_fmul>
    8f3a:	2100      	movs	r1, #0
    8f3c:	f7f7 fcac 	bl	898 <__aeabi_fadd>
    8f40:	1c23      	adds	r3, r4, #0
    8f42:	c301      	stmia	r3!, {r0}
    8f44:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8f46:	2300      	movs	r3, #0
    8f48:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    8f4a:	238e      	movs	r3, #142	; 0x8e
    8f4c:	005b      	lsls	r3, r3, #1
    8f4e:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8f50:	1c30      	adds	r0, r6, #0
    8f52:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    8f54:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8f56:	f7f7 fc71 	bl	83c <__aeabi_fcmpeq>
    8f5a:	2800      	cmp	r0, #0
    8f5c:	d101      	bne.n	8f62 <PSP_CNFG_MQX_KERNEL_LOGGING+0xf62>
    8f5e:	f000 fe4f 	bl	9c00 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1c00>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8f62:	23d6      	movs	r3, #214	; 0xd6
    8f64:	005b      	lsls	r3, r3, #1
    8f66:	58e9      	ldr	r1, [r5, r3]
    8f68:	9804      	ldr	r0, [sp, #16]
    8f6a:	f7f8 f803 	bl	f74 <__aeabi_fmul>
    8f6e:	2100      	movs	r1, #0
    8f70:	f7f7 fc92 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    8f74:	2308      	movs	r3, #8
    8f76:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8f78:	2300      	movs	r3, #0
    8f7a:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    8f7c:	2390      	movs	r3, #144	; 0x90
    8f7e:	005b      	lsls	r3, r3, #1
    8f80:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8f82:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8f84:	2100      	movs	r1, #0
    8f86:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    8f88:	44a1      	add	r9, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    8f8a:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8f8c:	f7f7 fc56 	bl	83c <__aeabi_fcmpeq>
    8f90:	2800      	cmp	r0, #0
    8f92:	d101      	bne.n	8f98 <PSP_CNFG_MQX_KERNEL_LOGGING+0xf98>
    8f94:	f7ff fa70 	bl	8478 <PSP_CNFG_MQX_KERNEL_LOGGING+0x478>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8f98:	23d8      	movs	r3, #216	; 0xd8
    8f9a:	005b      	lsls	r3, r3, #1
    8f9c:	58e9      	ldr	r1, [r5, r3]
    8f9e:	9804      	ldr	r0, [sp, #16]
    8fa0:	f7f7 ffe8 	bl	f74 <__aeabi_fmul>
    8fa4:	2100      	movs	r1, #0
    8fa6:	f7f7 fc77 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    8faa:	230c      	movs	r3, #12
    8fac:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8fae:	2300      	movs	r3, #0
    8fb0:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    8fb2:	2392      	movs	r3, #146	; 0x92
    8fb4:	005b      	lsls	r3, r3, #1
    8fb6:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8fb8:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8fba:	2100      	movs	r1, #0
    8fbc:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    8fbe:	44a2      	add	sl, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    8fc0:	44a9      	add	r9, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8fc2:	f7f7 fc3b 	bl	83c <__aeabi_fcmpeq>
    8fc6:	2800      	cmp	r0, #0
    8fc8:	d101      	bne.n	8fce <PSP_CNFG_MQX_KERNEL_LOGGING+0xfce>
    8fca:	f000 fe69 	bl	9ca0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1ca0>
    8fce:	1c30      	adds	r0, r6, #0
    8fd0:	2100      	movs	r1, #0
    8fd2:	f7f7 fc33 	bl	83c <__aeabi_fcmpeq>
    8fd6:	2800      	cmp	r0, #0
    8fd8:	d101      	bne.n	8fde <PSP_CNFG_MQX_KERNEL_LOGGING+0xfde>
    8fda:	f000 febc 	bl	9d56 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1d56>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8fde:	23da      	movs	r3, #218	; 0xda
    8fe0:	005b      	lsls	r3, r3, #1
    8fe2:	58e9      	ldr	r1, [r5, r3]
    8fe4:	9804      	ldr	r0, [sp, #16]
    8fe6:	f7f7 ffc5 	bl	f74 <__aeabi_fmul>
    8fea:	2100      	movs	r1, #0
    8fec:	f7f7 fc54 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    8ff0:	2310      	movs	r3, #16
    8ff2:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8ff4:	2300      	movs	r3, #0
    8ff6:	6123      	str	r3, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    8ff8:	2394      	movs	r3, #148	; 0x94
    8ffa:	005b      	lsls	r3, r3, #1
    8ffc:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8ffe:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9000:	2100      	movs	r1, #0
    9002:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    9004:	44a1      	add	r9, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9006:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9008:	f7f7 fc18 	bl	83c <__aeabi_fcmpeq>
    900c:	2800      	cmp	r0, #0
    900e:	d101      	bne.n	9014 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1014>
    9010:	f000 fec8 	bl	9da4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1da4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9014:	23dc      	movs	r3, #220	; 0xdc
    9016:	005b      	lsls	r3, r3, #1
    9018:	58e9      	ldr	r1, [r5, r3]
    901a:	9804      	ldr	r0, [sp, #16]
    901c:	f7f7 ffaa 	bl	f74 <__aeabi_fmul>
    9020:	2100      	movs	r1, #0
    9022:	f7f7 fc39 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    9026:	2314      	movs	r3, #20
    9028:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    902a:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    902c:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    902e:	44a0      	add	r8, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9030:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9032:	1c2c      	adds	r4, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9034:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9036:	342d      	adds	r4, #45	; 0x2d
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9038:	1c19      	adds	r1, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    903a:	34ff      	adds	r4, #255	; 0xff
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    903c:	f7f7 fbfe 	bl	83c <__aeabi_fcmpeq>
    9040:	2800      	cmp	r0, #0
    9042:	d101      	bne.n	9048 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1048>
    9044:	f000 fe76 	bl	9d34 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1d34>
    9048:	2700      	movs	r7, #0
    904a:	f000 fedd 	bl	9e08 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1e08>
    904e:	1c30      	adds	r0, r6, #0
    9050:	2100      	movs	r1, #0
    9052:	f7f7 fbf3 	bl	83c <__aeabi_fcmpeq>
    9056:	2800      	cmp	r0, #0
    9058:	d101      	bne.n	905e <PSP_CNFG_MQX_KERNEL_LOGGING+0x105e>
    905a:	f000 fc7d 	bl	9958 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1958>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    905e:	23ec      	movs	r3, #236	; 0xec
    9060:	005b      	lsls	r3, r3, #1
    9062:	58e9      	ldr	r1, [r5, r3]
    9064:	9802      	ldr	r0, [sp, #8]
    9066:	f7f7 ff85 	bl	f74 <__aeabi_fmul>
    906a:	2100      	movs	r1, #0
    906c:	f7f7 fc14 	bl	898 <__aeabi_fadd>
    9070:	1c23      	adds	r3, r4, #0
    9072:	c301      	stmia	r3!, {r0}
    9074:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9076:	2300      	movs	r3, #0
    9078:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    907a:	238e      	movs	r3, #142	; 0x8e
    907c:	005b      	lsls	r3, r3, #1
    907e:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9080:	1c30      	adds	r0, r6, #0
    9082:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9084:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9086:	f7f7 fbd9 	bl	83c <__aeabi_fcmpeq>
    908a:	2800      	cmp	r0, #0
    908c:	d101      	bne.n	9092 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1092>
    908e:	f000 fc8a 	bl	99a6 <PSP_CNFG_MQX_KERNEL_LOGGING+0x19a6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9092:	23ee      	movs	r3, #238	; 0xee
    9094:	005b      	lsls	r3, r3, #1
    9096:	58e9      	ldr	r1, [r5, r3]
    9098:	9802      	ldr	r0, [sp, #8]
    909a:	f7f7 ff6b 	bl	f74 <__aeabi_fmul>
    909e:	2100      	movs	r1, #0
    90a0:	f7f7 fbfa 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    90a4:	2308      	movs	r3, #8
    90a6:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    90a8:	2300      	movs	r3, #0
    90aa:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    90ac:	2390      	movs	r3, #144	; 0x90
    90ae:	005b      	lsls	r3, r3, #1
    90b0:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    90b2:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    90b4:	2100      	movs	r1, #0
    90b6:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    90b8:	44a1      	add	r9, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    90ba:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    90bc:	f7f7 fbbe 	bl	83c <__aeabi_fcmpeq>
    90c0:	2800      	cmp	r0, #0
    90c2:	d000      	beq.n	90c6 <PSP_CNFG_MQX_KERNEL_LOGGING+0x10c6>
    90c4:	e3c6      	b.n	9854 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1854>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    90c6:	4653      	mov	r3, sl
    90c8:	1c38      	adds	r0, r7, #0
    90ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
    90cc:	f7f7 ff52 	bl	f74 <__aeabi_fmul>
    90d0:	2100      	movs	r1, #0
    90d2:	f7f7 fbe1 	bl	898 <__aeabi_fadd>
    90d6:	464b      	mov	r3, r9
    90d8:	1c04      	adds	r4, r0, #0
    90da:	4680      	mov	r8, r0
    90dc:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    90de:	2100      	movs	r1, #0
    90e0:	1c30      	adds	r0, r6, #0
    90e2:	f7f7 fbab 	bl	83c <__aeabi_fcmpeq>
    90e6:	2800      	cmp	r0, #0
    90e8:	d101      	bne.n	90ee <PSP_CNFG_MQX_KERNEL_LOGGING+0x10ee>
    90ea:	f000 fc86 	bl	99fa <PSP_CNFG_MQX_KERNEL_LOGGING+0x19fa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    90ee:	4652      	mov	r2, sl
    90f0:	23c0      	movs	r3, #192	; 0xc0
    90f2:	9802      	ldr	r0, [sp, #8]
    90f4:	58d1      	ldr	r1, [r2, r3]
    90f6:	f7f7 ff3d 	bl	f74 <__aeabi_fmul>
    90fa:	1c21      	adds	r1, r4, #0
    90fc:	f7f7 fbcc 	bl	898 <__aeabi_fadd>
    9100:	464b      	mov	r3, r9
    9102:	c301      	stmia	r3!, {r0}
    9104:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9106:	2200      	movs	r2, #0
    9108:	464b      	mov	r3, r9
    910a:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    910c:	2392      	movs	r3, #146	; 0x92
    910e:	005b      	lsls	r3, r3, #1
    9110:	4699      	mov	r9, r3
    9112:	44a9      	add	r9, r5
    9114:	e3b8      	b.n	9888 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1888>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9116:	2300      	movs	r3, #0
    9118:	4698      	mov	r8, r3
    911a:	f7fe fe75 	bl	7e08 <fRun_9DOF_GBY_KALMAN+0x20fc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1528
		break;
	case ANDROID:
		// acceleration positive ENU
		pthisSV->faGlPl[X] = pthisSV->faGlPl[X];
		pthisSV->faGlPl[Y] = pthisSV->faGlPl[Y];
		pthisSV->faGlPl[Z] = pthisSV->faGlPl[Z] - 1.0F;
    911e:	21fe      	movs	r1, #254	; 0xfe
    9120:	0589      	lsls	r1, r1, #22
    9122:	f7f8 f859 	bl	11d8 <__aeabi_fsub>
    9126:	465b      	mov	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1540
		pthisSV->faGlPl[Z] = -(pthisSV->faGlPl[Z] + 1.0F);
		break;
	}

	// update the reference geomagnetic vector using magnetic disturbance error if valid calibration and no jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
    9128:	9a7c      	ldr	r2, [sp, #496]	; 0x1f0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1528
		break;
	case ANDROID:
		// acceleration positive ENU
		pthisSV->faGlPl[X] = pthisSV->faGlPl[X];
		pthisSV->faGlPl[Y] = pthisSV->faGlPl[Y];
		pthisSV->faGlPl[Z] = pthisSV->faGlPl[Z] - 1.0F;
    912a:	5118      	str	r0, [r3, r4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1540
		pthisSV->faGlPl[Z] = -(pthisSV->faGlPl[Z] + 1.0F);
		break;
	}

	// update the reference geomagnetic vector using magnetic disturbance error if valid calibration and no jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
    912c:	4bde      	ldr	r3, [pc, #888]	; (94a8 <PSP_CNFG_MQX_KERNEL_LOGGING+0x14a8>)
    912e:	56d3      	ldrsb	r3, [r2, r3]
    9130:	2b00      	cmp	r3, #0
    9132:	d100      	bne.n	9136 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1136>
    9134:	e0a9      	b.n	928a <PSP_CNFG_MQX_KERNEL_LOGGING+0x128a>
    9136:	2f00      	cmp	r7, #0
    9138:	d000      	beq.n	913c <PSP_CNFG_MQX_KERNEL_LOGGING+0x113c>
    913a:	e0a6      	b.n	928a <PSP_CNFG_MQX_KERNEL_LOGGING+0x128a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1591
		} // end NED
		else
		{
			// de-rotate the Android and Windows 8 magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[Y] = pthisSV->fRPl[X][Y] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Y] * pthisSV->fdErrSePl[Y] +
    913c:	465a      	mov	r2, fp
    913e:	2394      	movs	r3, #148	; 0x94
    9140:	58d3      	ldr	r3, [r2, r3]
    9142:	9809      	ldr	r0, [sp, #36]	; 0x24
    9144:	4699      	mov	r9, r3
    9146:	2398      	movs	r3, #152	; 0x98
    9148:	58d3      	ldr	r3, [r2, r3]
    914a:	4649      	mov	r1, r9
    914c:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1592
					pthisSV->fRPl[Z][Y] * pthisSV->fdErrSePl[Z];
    914e:	239c      	movs	r3, #156	; 0x9c
    9150:	58d7      	ldr	r7, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1591
		} // end NED
		else
		{
			// de-rotate the Android and Windows 8 magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[Y] = pthisSV->fRPl[X][Y] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Y] * pthisSV->fdErrSePl[Y] +
    9152:	f7f7 ff0f 	bl	f74 <__aeabi_fmul>
    9156:	4651      	mov	r1, sl
    9158:	1c04      	adds	r4, r0, #0
    915a:	980d      	ldr	r0, [sp, #52]	; 0x34
    915c:	f7f7 ff0a 	bl	f74 <__aeabi_fmul>
    9160:	1c01      	adds	r1, r0, #0
    9162:	1c20      	adds	r0, r4, #0
    9164:	f7f7 fb98 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1592
					pthisSV->fRPl[Z][Y] * pthisSV->fdErrSePl[Z];
    9168:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1591
		} // end NED
		else
		{
			// de-rotate the Android and Windows 8 magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[Y] = pthisSV->fRPl[X][Y] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Y] * pthisSV->fdErrSePl[Y] +
    916a:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1592
					pthisSV->fRPl[Z][Y] * pthisSV->fdErrSePl[Z];
    916c:	9804      	ldr	r0, [sp, #16]
    916e:	f7f7 ff01 	bl	f74 <__aeabi_fmul>
    9172:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1591
		} // end NED
		else
		{
			// de-rotate the Android and Windows 8 magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[Y] = pthisSV->fRPl[X][Y] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Y] * pthisSV->fdErrSePl[Y] +
    9174:	1c20      	adds	r0, r4, #0
    9176:	f7f7 fb8f 	bl	898 <__aeabi_fadd>
    917a:	238c      	movs	r3, #140	; 0x8c
    917c:	465a      	mov	r2, fp
    917e:	1c05      	adds	r5, r0, #0
    9180:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1593
					pthisSV->fRPl[Z][Y] * pthisSV->fdErrSePl[Z];
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
    9182:	4649      	mov	r1, r9
    9184:	4640      	mov	r0, r8
    9186:	f7f7 fef5 	bl	f74 <__aeabi_fmul>
    918a:	4651      	mov	r1, sl
    918c:	1c04      	adds	r4, r0, #0
    918e:	9802      	ldr	r0, [sp, #8]
    9190:	f7f7 fef0 	bl	f74 <__aeabi_fmul>
    9194:	1c01      	adds	r1, r0, #0
    9196:	1c20      	adds	r0, r4, #0
    9198:	f7f7 fb7e 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1594
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];
    919c:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1593
		{
			// de-rotate the Android and Windows 8 magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[Y] = pthisSV->fRPl[X][Y] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Y] * pthisSV->fdErrSePl[Y] +
					pthisSV->fRPl[Z][Y] * pthisSV->fdErrSePl[Z];
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
    919e:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1594
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];
    91a0:	1c30      	adds	r0, r6, #0
    91a2:	f7f7 fee7 	bl	f74 <__aeabi_fmul>
    91a6:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1593
		{
			// de-rotate the Android and Windows 8 magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[Y] = pthisSV->fRPl[X][Y] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Y] * pthisSV->fdErrSePl[Y] +
					pthisSV->fRPl[Z][Y] * pthisSV->fdErrSePl[Z];
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
    91a8:	1c20      	adds	r0, r4, #0
    91aa:	f7f7 fb75 	bl	898 <__aeabi_fadd>
    91ae:	465a      	mov	r2, fp
    91b0:	2390      	movs	r3, #144	; 0x90
    91b2:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1598
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];

			// compute components of the new geomagnetic vector
			// the north pointing component fadj must always be non-negative
			fopp = -(pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z]);
    91b4:	337c      	adds	r3, #124	; 0x7c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1593
		{
			// de-rotate the Android and Windows 8 magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[Y] = pthisSV->fRPl[X][Y] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Y] * pthisSV->fdErrSePl[Y] +
					pthisSV->fRPl[Z][Y] * pthisSV->fdErrSePl[Z];
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
    91b6:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1598
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];

			// compute components of the new geomagnetic vector
			// the north pointing component fadj must always be non-negative
			fopp = -(pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z]);
    91b8:	58d0      	ldr	r0, [r2, r3]
    91ba:	f7f8 f80d 	bl	11d8 <__aeabi_fsub>
    91be:	2380      	movs	r3, #128	; 0x80
    91c0:	061b      	lsls	r3, r3, #24
    91c2:	18c4      	adds	r4, r0, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1599
			fadj = pthisSV->fmGl[Y] - pthisSV->fdErrGlPl[Y];
    91c4:	2384      	movs	r3, #132	; 0x84
    91c6:	465a      	mov	r2, fp
    91c8:	005b      	lsls	r3, r3, #1
    91ca:	1c29      	adds	r1, r5, #0
    91cc:	58d0      	ldr	r0, [r2, r3]
    91ce:	f7f8 f803 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1600
			if (fadj < 0.0F)
    91d2:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1599
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];

			// compute components of the new geomagnetic vector
			// the north pointing component fadj must always be non-negative
			fopp = -(pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z]);
			fadj = pthisSV->fmGl[Y] - pthisSV->fdErrGlPl[Y];
    91d4:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1600
			if (fadj < 0.0F)
    91d6:	f7f7 fb37 	bl	848 <__aeabi_fcmplt>
    91da:	2800      	cmp	r0, #0
    91dc:	d001      	beq.n	91e2 <PSP_CNFG_MQX_KERNEL_LOGGING+0x11e2>
    91de:	f001 fa4f 	bl	a680 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2680>
    91e2:	1c28      	adds	r0, r5, #0
    91e4:	1c29      	adds	r1, r5, #0
    91e6:	f7f7 fec5 	bl	f74 <__aeabi_fmul>
    91ea:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1604
			{
				fadj = 0.0F;
			}
			fhyp = sqrtf(fopp * fopp + fadj * fadj);
    91ec:	1c21      	adds	r1, r4, #0
    91ee:	1c20      	adds	r0, r4, #0
    91f0:	f7f7 fec0 	bl	f74 <__aeabi_fmul>
    91f4:	1c31      	adds	r1, r6, #0
    91f6:	f7f7 fb4f 	bl	898 <__aeabi_fadd>
    91fa:	f009 fc07 	bl	12a0c <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1607

			// check for the pathological condition of zero geomagnetic field
			if (fhyp != 0.0F)
    91fe:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1604
			fadj = pthisSV->fmGl[Y] - pthisSV->fdErrGlPl[Y];
			if (fadj < 0.0F)
			{
				fadj = 0.0F;
			}
			fhyp = sqrtf(fopp * fopp + fadj * fadj);
    9200:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1607

			// check for the pathological condition of zero geomagnetic field
			if (fhyp != 0.0F)
    9202:	f7f7 fb1b 	bl	83c <__aeabi_fcmpeq>
    9206:	2800      	cmp	r0, #0
    9208:	d001      	beq.n	920e <PSP_CNFG_MQX_KERNEL_LOGGING+0x120e>
    920a:	f7fe f810 	bl	722e <fRun_9DOF_GBY_KALMAN+0x1522>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1610
			{
				// compute the sine and cosine of the new geomagnetic vector
				ftmp = 1.0F / fhyp;
    920e:	20fe      	movs	r0, #254	; 0xfe
    9210:	1c31      	adds	r1, r6, #0
    9212:	0580      	lsls	r0, r0, #22
    9214:	f7f7 fcbc 	bl	b90 <__aeabi_fdiv>
    9218:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1611
				fsindelta = fopp * ftmp;
    921a:	1c31      	adds	r1, r6, #0
    921c:	1c20      	adds	r0, r4, #0
    921e:	f7f7 fea9 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1615
				fcosdelta = fadj * ftmp;

				// limit the inclination angle between limits to prevent runaway
				if (fsindelta > SINDELTAMAX)
    9222:	49a2      	ldr	r1, [pc, #648]	; (94ac <PSP_CNFG_MQX_KERNEL_LOGGING+0x14ac>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1611
			// check for the pathological condition of zero geomagnetic field
			if (fhyp != 0.0F)
			{
				// compute the sine and cosine of the new geomagnetic vector
				ftmp = 1.0F / fhyp;
				fsindelta = fopp * ftmp;
    9224:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1615
				fcosdelta = fadj * ftmp;

				// limit the inclination angle between limits to prevent runaway
				if (fsindelta > SINDELTAMAX)
    9226:	f7f7 fb23 	bl	870 <__aeabi_fcmpgt>
    922a:	2800      	cmp	r0, #0
    922c:	d001      	beq.n	9232 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1232>
    922e:	f001 f9f9 	bl	a624 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2624>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1620
				{
					fsindelta = SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
				}
				else if (fsindelta < -SINDELTAMAX)
    9232:	1c20      	adds	r0, r4, #0
    9234:	499e      	ldr	r1, [pc, #632]	; (94b0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x14b0>)
    9236:	f7f7 fb07 	bl	848 <__aeabi_fcmplt>
    923a:	2800      	cmp	r0, #0
    923c:	d001      	beq.n	9242 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1242>
    923e:	f001 fa1b 	bl	a678 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2678>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1612
			if (fhyp != 0.0F)
			{
				// compute the sine and cosine of the new geomagnetic vector
				ftmp = 1.0F / fhyp;
				fsindelta = fopp * ftmp;
				fcosdelta = fadj * ftmp;
    9242:	1c28      	adds	r0, r5, #0
    9244:	1c31      	adds	r1, r6, #0
    9246:	f7f7 fe95 	bl	f74 <__aeabi_fmul>
    924a:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1627
					fsindelta = -SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
				}

				// compute the new geomagnetic vector (always north pointing)
				pthisSV->fDeltaPl = fasin_deg(fsindelta);
    924c:	1c20      	adds	r0, r4, #0
    924e:	f7f9 fdbd 	bl	2dcc <fasin_deg>
    9252:	465a      	mov	r2, fp
    9254:	23b8      	movs	r3, #184	; 0xb8
    9256:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1628
				pthisSV->fmGl[Y] = pthisMagCal->fB * fcosdelta;
    9258:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
    925a:	1c29      	adds	r1, r5, #0
    925c:	6b1e      	ldr	r6, [r3, #48]	; 0x30
    925e:	1c30      	adds	r0, r6, #0
    9260:	f7f7 fe88 	bl	f74 <__aeabi_fmul>
    9264:	2384      	movs	r3, #132	; 0x84
    9266:	465a      	mov	r2, fp
    9268:	005b      	lsls	r3, r3, #1
    926a:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1629
				pthisSV->fmGl[Z] = -pthisMagCal->fB * fsindelta;
    926c:	2380      	movs	r3, #128	; 0x80
    926e:	061b      	lsls	r3, r3, #24
    9270:	18f0      	adds	r0, r6, r3
    9272:	1c21      	adds	r1, r4, #0
    9274:	f7f7 fe7e 	bl	f74 <__aeabi_fmul>
    9278:	2386      	movs	r3, #134	; 0x86
    927a:	465a      	mov	r2, fp
    927c:	005b      	lsls	r3, r3, #1
    927e:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1644
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
				&(pthisSV->fRhoPl), &(pthisSV->fChiPl));
	}
	else if (ithisCoordSystem == ANDROID)
    9280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9282:	2b01      	cmp	r3, #1
    9284:	d001      	beq.n	928a <PSP_CNFG_MQX_KERNEL_LOGGING+0x128a>
    9286:	f7fd ffd7 	bl	7238 <fRun_9DOF_GBY_KALMAN+0x152c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1647
	{
		// calculate the Android Euler angles
		fAndroidAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
    928a:	465b      	mov	r3, fp
    928c:	1d1a      	adds	r2, r3, #4
    928e:	330c      	adds	r3, #12
    9290:	9300      	str	r3, [sp, #0]
    9292:	3304      	adds	r3, #4
    9294:	9301      	str	r3, [sp, #4]
    9296:	980a      	ldr	r0, [sp, #40]	; 0x28
    9298:	4659      	mov	r1, fp
    929a:	3b08      	subs	r3, #8
    929c:	f004 ff3e 	bl	e11c <fAndroidAnglesDegFromRotationMatrix>
    92a0:	f7fd ffd5 	bl	724e <fRun_9DOF_GBY_KALMAN+0x1542>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    92a4:	23c6      	movs	r3, #198	; 0xc6
    92a6:	005b      	lsls	r3, r3, #1
    92a8:	58e9      	ldr	r1, [r5, r3]
    92aa:	1c30      	adds	r0, r6, #0
    92ac:	f7f7 fe62 	bl	f74 <__aeabi_fmul>
    92b0:	1c01      	adds	r1, r0, #0
    92b2:	4640      	mov	r0, r8
    92b4:	f7f7 faf0 	bl	898 <__aeabi_fadd>
    92b8:	4680      	mov	r8, r0
    92ba:	6160      	str	r0, [r4, #20]
    92bc:	f7fd fc6d 	bl	6b9a <fRun_9DOF_GBY_KALMAN+0xe8e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    92c0:	1c30      	adds	r0, r6, #0
    92c2:	2100      	movs	r1, #0
    92c4:	f7f7 faba 	bl	83c <__aeabi_fcmpeq>
    92c8:	2800      	cmp	r0, #0
    92ca:	d101      	bne.n	92d0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x12d0>
    92cc:	f000 fec9 	bl	a062 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2062>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    92d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    92d2:	9803      	ldr	r0, [sp, #12]
    92d4:	58e9      	ldr	r1, [r5, r3]
    92d6:	f7f7 fe4d 	bl	f74 <__aeabi_fmul>
    92da:	2100      	movs	r1, #0
    92dc:	f7f7 fadc 	bl	898 <__aeabi_fadd>
    92e0:	1c23      	adds	r3, r4, #0
    92e2:	c301      	stmia	r3!, {r0}
    92e4:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    92e6:	2300      	movs	r3, #0
    92e8:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    92ea:	238e      	movs	r3, #142	; 0x8e
    92ec:	005b      	lsls	r3, r3, #1
    92ee:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    92f0:	1c30      	adds	r0, r6, #0
    92f2:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    92f4:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    92f6:	f7f7 faa1 	bl	83c <__aeabi_fcmpeq>
    92fa:	2800      	cmp	r0, #0
    92fc:	d101      	bne.n	9302 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1302>
    92fe:	f000 fed7 	bl	a0b0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x20b0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9302:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9304:	9803      	ldr	r0, [sp, #12]
    9306:	58e9      	ldr	r1, [r5, r3]
    9308:	f7f7 fe34 	bl	f74 <__aeabi_fmul>
    930c:	2100      	movs	r1, #0
    930e:	f7f7 fac3 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    9312:	2308      	movs	r3, #8
    9314:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9316:	2300      	movs	r3, #0
    9318:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    931a:	2390      	movs	r3, #144	; 0x90
    931c:	005b      	lsls	r3, r3, #1
    931e:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9320:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9322:	2100      	movs	r1, #0
    9324:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    9326:	44a1      	add	r9, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9328:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    932a:	f7f7 fa87 	bl	83c <__aeabi_fcmpeq>
    932e:	2800      	cmp	r0, #0
    9330:	d001      	beq.n	9336 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1336>
    9332:	f000 fe1e 	bl	9f72 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1f72>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9336:	4653      	mov	r3, sl
    9338:	1c38      	adds	r0, r7, #0
    933a:	6b19      	ldr	r1, [r3, #48]	; 0x30
    933c:	f7f7 fe1a 	bl	f74 <__aeabi_fmul>
    9340:	2100      	movs	r1, #0
    9342:	f7f7 faa9 	bl	898 <__aeabi_fadd>
    9346:	464b      	mov	r3, r9
    9348:	1c04      	adds	r4, r0, #0
    934a:	4680      	mov	r8, r0
    934c:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    934e:	2100      	movs	r1, #0
    9350:	1c30      	adds	r0, r6, #0
    9352:	f7f7 fa73 	bl	83c <__aeabi_fcmpeq>
    9356:	2800      	cmp	r0, #0
    9358:	d101      	bne.n	935e <PSP_CNFG_MQX_KERNEL_LOGGING+0x135e>
    935a:	f000 fed4 	bl	a106 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2106>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    935e:	4652      	mov	r2, sl
    9360:	23f0      	movs	r3, #240	; 0xf0
    9362:	9803      	ldr	r0, [sp, #12]
    9364:	58d1      	ldr	r1, [r2, r3]
    9366:	f7f7 fe05 	bl	f74 <__aeabi_fmul>
    936a:	1c01      	adds	r1, r0, #0
    936c:	1c20      	adds	r0, r4, #0
    936e:	f7f7 fa93 	bl	898 <__aeabi_fadd>
    9372:	464b      	mov	r3, r9
    9374:	c301      	stmia	r3!, {r0}
    9376:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9378:	2200      	movs	r2, #0
    937a:	464b      	mov	r3, r9
    937c:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    937e:	2392      	movs	r3, #146	; 0x92
    9380:	005b      	lsls	r3, r3, #1
    9382:	4699      	mov	r9, r3
    9384:	44a9      	add	r9, r5
    9386:	f000 fe0d 	bl	9fa4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1fa4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    938a:	1c30      	adds	r0, r6, #0
    938c:	2100      	movs	r1, #0
    938e:	f7f7 fa55 	bl	83c <__aeabi_fcmpeq>
    9392:	2800      	cmp	r0, #0
    9394:	d101      	bne.n	939a <PSP_CNFG_MQX_KERNEL_LOGGING+0x139a>
    9396:	f001 f91b 	bl	a5d0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x25d0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    939a:	1d23      	adds	r3, r4, #4
    939c:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    939e:	2300      	movs	r3, #0
    93a0:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    93a2:	238e      	movs	r3, #142	; 0x8e
    93a4:	005b      	lsls	r3, r3, #1
    93a6:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    93a8:	1c30      	adds	r0, r6, #0
    93aa:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    93ac:	44a8      	add	r8, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    93ae:	f7f7 fa45 	bl	83c <__aeabi_fcmpeq>
    93b2:	2800      	cmp	r0, #0
    93b4:	d001      	beq.n	93ba <PSP_CNFG_MQX_KERNEL_LOGGING+0x13ba>
    93b6:	f000 fd2a 	bl	9e0e <PSP_CNFG_MQX_KERNEL_LOGGING+0x1e0e>
    93ba:	2400      	movs	r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    93bc:	4643      	mov	r3, r8
    93be:	1c30      	adds	r0, r6, #0
    93c0:	6e19      	ldr	r1, [r3, #96]	; 0x60
    93c2:	f7f7 fdd7 	bl	f74 <__aeabi_fmul>
    93c6:	1c21      	adds	r1, r4, #0
    93c8:	f7f7 fa66 	bl	898 <__aeabi_fadd>
    93cc:	464b      	mov	r3, r9
    93ce:	c301      	stmia	r3!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    93d0:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    93d2:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    93d4:	464b      	mov	r3, r9
    93d6:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    93d8:	2390      	movs	r3, #144	; 0x90
    93da:	005b      	lsls	r3, r3, #1
    93dc:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    93de:	1c38      	adds	r0, r7, #0
    93e0:	1c11      	adds	r1, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    93e2:	44a9      	add	r9, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    93e4:	f7f7 fa2a 	bl	83c <__aeabi_fcmpeq>
    93e8:	2800      	cmp	r0, #0
    93ea:	d101      	bne.n	93f0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x13f0>
    93ec:	f000 fd1e 	bl	9e2c <PSP_CNFG_MQX_KERNEL_LOGGING+0x1e2c>
    93f0:	2400      	movs	r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    93f2:	464b      	mov	r3, r9
    93f4:	1c30      	adds	r0, r6, #0
    93f6:	6e19      	ldr	r1, [r3, #96]	; 0x60
    93f8:	f7f7 fdbc 	bl	f74 <__aeabi_fmul>
    93fc:	1c21      	adds	r1, r4, #0
    93fe:	f7f7 fa4b 	bl	898 <__aeabi_fadd>
    9402:	4643      	mov	r3, r8
    9404:	c301      	stmia	r3!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9406:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9408:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    940a:	4643      	mov	r3, r8
    940c:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    940e:	2392      	movs	r3, #146	; 0x92
    9410:	005b      	lsls	r3, r3, #1
    9412:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9414:	1c38      	adds	r0, r7, #0
    9416:	1c11      	adds	r1, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9418:	44a8      	add	r8, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    941a:	f7f7 fa0f 	bl	83c <__aeabi_fcmpeq>
    941e:	2800      	cmp	r0, #0
    9420:	d101      	bne.n	9426 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1426>
    9422:	f000 fd30 	bl	9e86 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1e86>
    9426:	2400      	movs	r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9428:	4643      	mov	r3, r8
    942a:	1c30      	adds	r0, r6, #0
    942c:	6e19      	ldr	r1, [r3, #96]	; 0x60
    942e:	f7f7 fda1 	bl	f74 <__aeabi_fmul>
    9432:	1c21      	adds	r1, r4, #0
    9434:	f7f7 fa30 	bl	898 <__aeabi_fadd>
    9438:	464b      	mov	r3, r9
    943a:	c301      	stmia	r3!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    943c:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    943e:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9440:	464b      	mov	r3, r9
    9442:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9444:	2394      	movs	r3, #148	; 0x94
    9446:	005b      	lsls	r3, r3, #1
    9448:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    944a:	1c38      	adds	r0, r7, #0
    944c:	1c11      	adds	r1, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    944e:	44a9      	add	r9, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9450:	f7f7 f9f4 	bl	83c <__aeabi_fcmpeq>
    9454:	2800      	cmp	r0, #0
    9456:	d101      	bne.n	945c <PSP_CNFG_MQX_KERNEL_LOGGING+0x145c>
    9458:	f000 fd32 	bl	9ec0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1ec0>
    945c:	2400      	movs	r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    945e:	464b      	mov	r3, r9
    9460:	1c30      	adds	r0, r6, #0
    9462:	6e19      	ldr	r1, [r3, #96]	; 0x60
    9464:	f7f7 fd86 	bl	f74 <__aeabi_fmul>
    9468:	1c21      	adds	r1, r4, #0
    946a:	f7f7 fa15 	bl	898 <__aeabi_fadd>
    946e:	4643      	mov	r3, r8
    9470:	c301      	stmia	r3!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9472:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9474:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9476:	1c2c      	adds	r4, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9478:	4643      	mov	r3, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    947a:	342d      	adds	r4, #45	; 0x2d
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    947c:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    947e:	1c38      	adds	r0, r7, #0
    9480:	1c11      	adds	r1, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9482:	34ff      	adds	r4, #255	; 0xff
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9484:	f7f7 f9da 	bl	83c <__aeabi_fcmpeq>
    9488:	2800      	cmp	r0, #0
    948a:	d101      	bne.n	9490 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1490>
    948c:	f000 fd34 	bl	9ef8 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1ef8>
    9490:	2700      	movs	r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9492:	6e21      	ldr	r1, [r4, #96]	; 0x60
    9494:	1c30      	adds	r0, r6, #0
    9496:	f7f7 fd6d 	bl	f74 <__aeabi_fmul>
    949a:	1c39      	adds	r1, r7, #0
    949c:	f7f7 f9fc 	bl	898 <__aeabi_fadd>
    94a0:	464b      	mov	r3, r9
    94a2:	6018      	str	r0, [r3, #0]
    94a4:	f7fd fb83 	bl	6bae <fRun_9DOF_GBY_KALMAN+0xea2>
    94a8:	00000416 	.word	0x00000416
    94ac:	3f6803ca 	.word	0x3f6803ca
    94b0:	bf6803ca 	.word	0xbf6803ca
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    94b4:	1c30      	addvs	r0, r6, #0
    94b6:	2100      	movs	r1, #0
    94b8:	f7f7 f9c0 	bl	83c <__aeabi_fcmpeq>
    94bc:	2800      	cmp	r0, #0
    94be:	d101      	bne.n	94c4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x14c4>
    94c0:	f000 ff4a 	bl	a358 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2358>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    94c4:	1d23      	adds	r3, r4, #4
    94c6:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    94c8:	2300      	movs	r3, #0
    94ca:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    94cc:	238e      	movs	r3, #142	; 0x8e
    94ce:	005b      	lsls	r3, r3, #1
    94d0:	469b      	mov	fp, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    94d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    94d4:	4640      	mov	r0, r8
    94d6:	58e9      	ldr	r1, [r5, r3]
    94d8:	f7f7 fd4c 	bl	f74 <__aeabi_fmul>
    94dc:	2100      	movs	r1, #0
    94de:	f7f7 f9db 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    94e2:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    94e4:	4681      	mov	r9, r0
    94e6:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    94e8:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    94ea:	44ab      	add	fp, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    94ec:	f7f7 f9a6 	bl	83c <__aeabi_fcmpeq>
    94f0:	2800      	cmp	r0, #0
    94f2:	d101      	bne.n	94f8 <PSP_CNFG_MQX_KERNEL_LOGGING+0x14f8>
    94f4:	f000 ff54 	bl	a3a0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x23a0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    94f8:	2308      	movs	r3, #8
    94fa:	469b      	mov	fp, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    94fc:	2300      	movs	r3, #0
    94fe:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9500:	2390      	movs	r3, #144	; 0x90
    9502:	005b      	lsls	r3, r3, #1
    9504:	469c      	mov	ip, r3
    9506:	44ac      	add	ip, r5
    9508:	4663      	mov	r3, ip
    950a:	9302      	str	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    950c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    950e:	4640      	mov	r0, r8
    9510:	58e9      	ldr	r1, [r5, r3]
    9512:	f7f7 fd2f 	bl	f74 <__aeabi_fmul>
    9516:	2100      	movs	r1, #0
    9518:	f7f7 f9be 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    951c:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    951e:	4681      	mov	r9, r0
    9520:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9522:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    9524:	44a3      	add	fp, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9526:	f7f7 f989 	bl	83c <__aeabi_fcmpeq>
    952a:	2800      	cmp	r0, #0
    952c:	d001      	beq.n	9532 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1532>
    952e:	f000 fecb 	bl	a2c8 <PSP_CNFG_MQX_KERNEL_LOGGING+0x22c8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9532:	9b02      	ldr	r3, [sp, #8]
    9534:	1c38      	adds	r0, r7, #0
    9536:	6b19      	ldr	r1, [r3, #48]	; 0x30
    9538:	f7f7 fd1c 	bl	f74 <__aeabi_fmul>
    953c:	1c01      	adds	r1, r0, #0
    953e:	4648      	mov	r0, r9
    9540:	f7f7 f9aa 	bl	898 <__aeabi_fadd>
    9544:	465b      	mov	r3, fp
    9546:	4681      	mov	r9, r0
    9548:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    954a:	2100      	movs	r1, #0
    954c:	1c30      	adds	r0, r6, #0
    954e:	f7f7 f975 	bl	83c <__aeabi_fcmpeq>
    9552:	2800      	cmp	r0, #0
    9554:	d101      	bne.n	955a <PSP_CNFG_MQX_KERNEL_LOGGING+0x155a>
    9556:	f000 ff4a 	bl	a3ee <PSP_CNFG_MQX_KERNEL_LOGGING+0x23ee>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    955a:	2304      	movs	r3, #4
    955c:	445b      	add	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    955e:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    9560:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9562:	465b      	mov	r3, fp
    9564:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9566:	2392      	movs	r3, #146	; 0x92
    9568:	005b      	lsls	r3, r3, #1
    956a:	469c      	mov	ip, r3
    956c:	44ac      	add	ip, r5
    956e:	4663      	mov	r3, ip
    9570:	9302      	str	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9572:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9574:	4640      	mov	r0, r8
    9576:	58e9      	ldr	r1, [r5, r3]
    9578:	f7f7 fcfc 	bl	f74 <__aeabi_fmul>
    957c:	2100      	movs	r1, #0
    957e:	f7f7 f98b 	bl	898 <__aeabi_fadd>
    9582:	465b      	mov	r3, fp
    9584:	4681      	mov	r9, r0
    9586:	6058      	str	r0, [r3, #4]
    9588:	f000 feba 	bl	a300 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2300>
    958c:	2384      	movs	r3, #132	; 0x84
    958e:	465a      	mov	r2, fp
    9590:	005b      	lsls	r3, r3, #1
    9592:	58d6      	ldr	r6, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1208
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    9594:	23fc      	movs	r3, #252	; 0xfc
    9596:	00db      	lsls	r3, r3, #3
    9598:	58d4      	ldr	r4, [r2, r3]
    959a:	2380      	movs	r3, #128	; 0x80
    959c:	061b      	lsls	r3, r3, #24
    959e:	18e2      	adds	r2, r4, r3
    95a0:	4659      	mov	r1, fp
    95a2:	23ec      	movs	r3, #236	; 0xec
    95a4:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    95a6:	3b30      	subs	r3, #48	; 0x30
    95a8:	58c8      	ldr	r0, [r1, r3]
    95aa:	21fc      	movs	r1, #252	; 0xfc
    95ac:	0589      	lsls	r1, r1, #22
    95ae:	f7f7 fce1 	bl	f74 <__aeabi_fmul>
    95b2:	465a      	mov	r2, fp
    95b4:	23ac      	movs	r3, #172	; 0xac
    95b6:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    95b8:	9b08      	ldr	r3, [sp, #32]
    95ba:	68d9      	ldr	r1, [r3, #12]
    95bc:	f7f7 f96c 	bl	898 <__aeabi_fadd>
    95c0:	1c01      	adds	r1, r0, #0
    95c2:	1c20      	adds	r0, r4, #0
    95c4:	f7f7 f968 	bl	898 <__aeabi_fadd>
    95c8:	465a      	mov	r2, fp
    95ca:	23d4      	movs	r3, #212	; 0xd4
    95cc:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    95ce:	4bdd      	ldr	r3, [pc, #884]	; (9944 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1944>)
    95d0:	1c30      	adds	r0, r6, #0
    95d2:	58d1      	ldr	r1, [r2, r3]
    95d4:	f7f7 fcce 	bl	f74 <__aeabi_fmul>
    95d8:	1c39      	adds	r1, r7, #0
    95da:	1c05      	adds	r5, r0, #0
    95dc:	1c20      	adds	r0, r4, #0
    95de:	f7f7 fcc9 	bl	f74 <__aeabi_fmul>
    95e2:	1c01      	adds	r1, r0, #0
    95e4:	1c28      	adds	r0, r5, #0
    95e6:	f7f7 f957 	bl	898 <__aeabi_fadd>
    95ea:	23f8      	movs	r3, #248	; 0xf8
    95ec:	465a      	mov	r2, fp
    95ee:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    95f0:	464a      	mov	r2, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    95f2:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    95f4:	6a50      	ldr	r0, [r2, #36]	; 0x24
    95f6:	f7f7 fdef 	bl	11d8 <__aeabi_fsub>
    95fa:	465a      	mov	r2, fp
    95fc:	23e0      	movs	r3, #224	; 0xe0
    95fe:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1208
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    9600:	4bd1      	ldr	r3, [pc, #836]	; (9948 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1948>)
    9602:	4659      	mov	r1, fp
    9604:	58d4      	ldr	r4, [r2, r3]
    9606:	2280      	movs	r2, #128	; 0x80
    9608:	23f0      	movs	r3, #240	; 0xf0
    960a:	0612      	lsls	r2, r2, #24
    960c:	18a2      	adds	r2, r4, r2
    960e:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    9610:	3b30      	subs	r3, #48	; 0x30
    9612:	58c8      	ldr	r0, [r1, r3]
    9614:	21fc      	movs	r1, #252	; 0xfc
    9616:	0589      	lsls	r1, r1, #22
    9618:	f7f7 fcac 	bl	f74 <__aeabi_fmul>
    961c:	465a      	mov	r2, fp
    961e:	23b0      	movs	r3, #176	; 0xb0
    9620:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    9622:	9b08      	ldr	r3, [sp, #32]
    9624:	6919      	ldr	r1, [r3, #16]
    9626:	f7f7 f937 	bl	898 <__aeabi_fadd>
    962a:	1c01      	adds	r1, r0, #0
    962c:	1c20      	adds	r0, r4, #0
    962e:	f7f7 f933 	bl	898 <__aeabi_fadd>
    9632:	465a      	mov	r2, fp
    9634:	23d8      	movs	r3, #216	; 0xd8
    9636:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    9638:	23fd      	movs	r3, #253	; 0xfd
    963a:	00db      	lsls	r3, r3, #3
    963c:	58d1      	ldr	r1, [r2, r3]
    963e:	1c30      	adds	r0, r6, #0
    9640:	f7f7 fc98 	bl	f74 <__aeabi_fmul>
    9644:	1c39      	adds	r1, r7, #0
    9646:	1c05      	adds	r5, r0, #0
    9648:	1c20      	adds	r0, r4, #0
    964a:	f7f7 fc93 	bl	f74 <__aeabi_fmul>
    964e:	1c01      	adds	r1, r0, #0
    9650:	1c28      	adds	r0, r5, #0
    9652:	f7f7 f921 	bl	898 <__aeabi_fadd>
    9656:	23fc      	movs	r3, #252	; 0xfc
    9658:	465a      	mov	r2, fp
    965a:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    965c:	464a      	mov	r2, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    965e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    9660:	6a90      	ldr	r0, [r2, #40]	; 0x28
    9662:	f7f7 fdb9 	bl	11d8 <__aeabi_fsub>
    9666:	465a      	mov	r2, fp
    9668:	23e4      	movs	r3, #228	; 0xe4
    966a:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1208
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    966c:	23ff      	movs	r3, #255	; 0xff
    966e:	00db      	lsls	r3, r3, #3
    9670:	58d4      	ldr	r4, [r2, r3]
    9672:	2280      	movs	r2, #128	; 0x80
    9674:	4659      	mov	r1, fp
    9676:	23f4      	movs	r3, #244	; 0xf4
    9678:	0612      	lsls	r2, r2, #24
    967a:	18a2      	adds	r2, r4, r2
    967c:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    967e:	3b30      	subs	r3, #48	; 0x30
    9680:	58c8      	ldr	r0, [r1, r3]
    9682:	21fc      	movs	r1, #252	; 0xfc
    9684:	0589      	lsls	r1, r1, #22
    9686:	f7f7 fc75 	bl	f74 <__aeabi_fmul>
    968a:	23b4      	movs	r3, #180	; 0xb4
    968c:	465a      	mov	r2, fp
    968e:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    9690:	9b08      	ldr	r3, [sp, #32]
    9692:	6959      	ldr	r1, [r3, #20]
    9694:	f7f7 f900 	bl	898 <__aeabi_fadd>
    9698:	f7fc fc9d 	bl	5fd6 <fRun_9DOF_GBY_KALMAN+0x2ca>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1693
					if (*pfC6x12ik == 1.0F)
						*pfPPlus12x12ij += *pfQw12x12kj;
					else if (*pfC6x12ik == -1.0F)
						*pfPPlus12x12ij -= *pfQw12x12kj;
					else
						*pfPPlus12x12ij += *pfC6x12ik * *pfQw12x12kj;
    969c:	4641      	mov	r1, r8
    969e:	1c30      	adds	r0, r6, #0
    96a0:	f7f7 fc68 	bl	f74 <__aeabi_fmul>
    96a4:	464b      	mov	r3, r9
    96a6:	1c01      	adds	r1, r0, #0
    96a8:	6818      	ldr	r0, [r3, #0]
    96aa:	f7f7 f8f5 	bl	898 <__aeabi_fadd>
    96ae:	464b      	mov	r3, r9
    96b0:	6018      	str	r0, [r3, #0]
    96b2:	f7fd fdf4 	bl	729e <fRun_9DOF_GBY_KALMAN+0x1592>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1540 (discriminator 1)
		pthisSV->faGlPl[Z] = -(pthisSV->faGlPl[Z] + 1.0F);
		break;
	}

	// update the reference geomagnetic vector using magnetic disturbance error if valid calibration and no jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
    96b6:	2f00      	cmp	r7, #0
    96b8:	d001      	beq.n	96be <PSP_CNFG_MQX_KERNEL_LOGGING+0x16be>
    96ba:	f7fd fdb3 	bl	7224 <fRun_9DOF_GBY_KALMAN+0x1518>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1542
	{
		if (ithisCoordSystem == NED)
    96be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    96c0:	2b00      	cmp	r3, #0
    96c2:	d000      	beq.n	96c6 <PSP_CNFG_MQX_KERNEL_LOGGING+0x16c6>
    96c4:	e53a      	b.n	913c <PSP_CNFG_MQX_KERNEL_LOGGING+0x113c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1546
		{
			// de-rotate the NED magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[X] = pthisSV->fRPl[X][X] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][X] * pthisSV->fdErrSePl[Y] +
    96c6:	465a      	mov	r2, fp
    96c8:	2394      	movs	r3, #148	; 0x94
    96ca:	58d5      	ldr	r5, [r2, r3]
    96cc:	3304      	adds	r3, #4
    96ce:	58d3      	ldr	r3, [r2, r3]
    96d0:	1c29      	adds	r1, r5, #0
    96d2:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1547
					pthisSV->fRPl[Z][X] * pthisSV->fdErrSePl[Z];
    96d4:	239c      	movs	r3, #156	; 0x9c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1546
	{
		if (ithisCoordSystem == NED)
		{
			// de-rotate the NED magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[X] = pthisSV->fRPl[X][X] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][X] * pthisSV->fdErrSePl[Y] +
    96d6:	9807      	ldr	r0, [sp, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1547
					pthisSV->fRPl[Z][X] * pthisSV->fdErrSePl[Z];
    96d8:	58d7      	ldr	r7, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1546
	{
		if (ithisCoordSystem == NED)
		{
			// de-rotate the NED magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[X] = pthisSV->fRPl[X][X] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][X] * pthisSV->fdErrSePl[Y] +
    96da:	f7f7 fc4b 	bl	f74 <__aeabi_fmul>
    96de:	4649      	mov	r1, r9
    96e0:	1c04      	adds	r4, r0, #0
    96e2:	9808      	ldr	r0, [sp, #32]
    96e4:	f7f7 fc46 	bl	f74 <__aeabi_fmul>
    96e8:	1c01      	adds	r1, r0, #0
    96ea:	1c20      	adds	r0, r4, #0
    96ec:	f7f7 f8d4 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1547
					pthisSV->fRPl[Z][X] * pthisSV->fdErrSePl[Z];
    96f0:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1546
	{
		if (ithisCoordSystem == NED)
		{
			// de-rotate the NED magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[X] = pthisSV->fRPl[X][X] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][X] * pthisSV->fdErrSePl[Y] +
    96f2:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1547
					pthisSV->fRPl[Z][X] * pthisSV->fdErrSePl[Z];
    96f4:	9803      	ldr	r0, [sp, #12]
    96f6:	f7f7 fc3d 	bl	f74 <__aeabi_fmul>
    96fa:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1546
	{
		if (ithisCoordSystem == NED)
		{
			// de-rotate the NED magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[X] = pthisSV->fRPl[X][X] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][X] * pthisSV->fdErrSePl[Y] +
    96fc:	1c20      	adds	r0, r4, #0
    96fe:	f7f7 f8cb 	bl	898 <__aeabi_fadd>
    9702:	2388      	movs	r3, #136	; 0x88
    9704:	465a      	mov	r2, fp
    9706:	1c04      	adds	r4, r0, #0
    9708:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1548
					pthisSV->fRPl[Z][X] * pthisSV->fdErrSePl[Z];
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
    970a:	1c29      	adds	r1, r5, #0
    970c:	4640      	mov	r0, r8
    970e:	f7f7 fc31 	bl	f74 <__aeabi_fmul>
    9712:	4649      	mov	r1, r9
    9714:	1c05      	adds	r5, r0, #0
    9716:	9802      	ldr	r0, [sp, #8]
    9718:	f7f7 fc2c 	bl	f74 <__aeabi_fmul>
    971c:	1c01      	adds	r1, r0, #0
    971e:	1c28      	adds	r0, r5, #0
    9720:	f7f7 f8ba 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1549
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];
    9724:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1548
		{
			// de-rotate the NED magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[X] = pthisSV->fRPl[X][X] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][X] * pthisSV->fdErrSePl[Y] +
					pthisSV->fRPl[Z][X] * pthisSV->fdErrSePl[Z];
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
    9726:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1549
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];
    9728:	1c30      	adds	r0, r6, #0
    972a:	f7f7 fc23 	bl	f74 <__aeabi_fmul>
    972e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1548
		{
			// de-rotate the NED magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[X] = pthisSV->fRPl[X][X] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][X] * pthisSV->fdErrSePl[Y] +
					pthisSV->fRPl[Z][X] * pthisSV->fdErrSePl[Z];
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
    9730:	1c28      	adds	r0, r5, #0
    9732:	f7f7 f8b1 	bl	898 <__aeabi_fadd>
    9736:	465a      	mov	r2, fp
    9738:	2390      	movs	r3, #144	; 0x90
    973a:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1553
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];

			// compute components of the new geomagnetic vector
			// the north pointing component fadj must always be non-negative
			fopp = pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z];
    973c:	337c      	adds	r3, #124	; 0x7c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1548
		{
			// de-rotate the NED magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[X] = pthisSV->fRPl[X][X] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][X] * pthisSV->fdErrSePl[Y] +
					pthisSV->fRPl[Z][X] * pthisSV->fdErrSePl[Z];
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
    973e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1553
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];

			// compute components of the new geomagnetic vector
			// the north pointing component fadj must always be non-negative
			fopp = pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z];
    9740:	58d0      	ldr	r0, [r2, r3]
    9742:	f7f7 fd49 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1554
			fadj = pthisSV->fmGl[X] - pthisSV->fdErrGlPl[X];
    9746:	2382      	movs	r3, #130	; 0x82
    9748:	465a      	mov	r2, fp
    974a:	005b      	lsls	r3, r3, #1
    974c:	1c21      	adds	r1, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1553
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];

			// compute components of the new geomagnetic vector
			// the north pointing component fadj must always be non-negative
			fopp = pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z];
    974e:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1554
			fadj = pthisSV->fmGl[X] - pthisSV->fdErrGlPl[X];
    9750:	58d0      	ldr	r0, [r2, r3]
    9752:	f7f7 fd41 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1555
			if (fadj < 0.0F)
    9756:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1554
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];

			// compute components of the new geomagnetic vector
			// the north pointing component fadj must always be non-negative
			fopp = pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z];
			fadj = pthisSV->fmGl[X] - pthisSV->fdErrGlPl[X];
    9758:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1555
			if (fadj < 0.0F)
    975a:	f7f7 f875 	bl	848 <__aeabi_fcmplt>
    975e:	2800      	cmp	r0, #0
    9760:	d001      	beq.n	9766 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1766>
    9762:	f000 ff91 	bl	a688 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2688>
    9766:	1c20      	adds	r0, r4, #0
    9768:	1c21      	adds	r1, r4, #0
    976a:	f7f7 fc03 	bl	f74 <__aeabi_fmul>
    976e:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1559
			{
				fadj = 0.0F;
			}
			fhyp = sqrtf(fopp * fopp + fadj * fadj);
    9770:	1c29      	adds	r1, r5, #0
    9772:	1c28      	adds	r0, r5, #0
    9774:	f7f7 fbfe 	bl	f74 <__aeabi_fmul>
    9778:	1c31      	adds	r1, r6, #0
    977a:	f7f7 f88d 	bl	898 <__aeabi_fadd>
    977e:	f009 f945 	bl	12a0c <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1562

			// check for the pathological condition of zero geomagnetic field
			if (fhyp != 0.0F)
    9782:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1559
			fadj = pthisSV->fmGl[X] - pthisSV->fdErrGlPl[X];
			if (fadj < 0.0F)
			{
				fadj = 0.0F;
			}
			fhyp = sqrtf(fopp * fopp + fadj * fadj);
    9784:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1562

			// check for the pathological condition of zero geomagnetic field
			if (fhyp != 0.0F)
    9786:	f7f7 f859 	bl	83c <__aeabi_fcmpeq>
    978a:	2800      	cmp	r0, #0
    978c:	d136      	bne.n	97fc <PSP_CNFG_MQX_KERNEL_LOGGING+0x17fc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1565
			{
				// compute the sine and cosine of the new geomagnetic vector
				ftmp = 1.0F / fhyp;
    978e:	20fe      	movs	r0, #254	; 0xfe
    9790:	1c31      	adds	r1, r6, #0
    9792:	0580      	lsls	r0, r0, #22
    9794:	f7f7 f9fc 	bl	b90 <__aeabi_fdiv>
    9798:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1566
				fsindelta = fopp * ftmp;
    979a:	1c31      	adds	r1, r6, #0
    979c:	1c28      	adds	r0, r5, #0
    979e:	f7f7 fbe9 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1570
				fcosdelta = fadj * ftmp;

				// limit the inclination angle between limits to prevent runaway
				if (fsindelta > SINDELTAMAX)
    97a2:	496a      	ldr	r1, [pc, #424]	; (994c <PSP_CNFG_MQX_KERNEL_LOGGING+0x194c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1566
			// check for the pathological condition of zero geomagnetic field
			if (fhyp != 0.0F)
			{
				// compute the sine and cosine of the new geomagnetic vector
				ftmp = 1.0F / fhyp;
				fsindelta = fopp * ftmp;
    97a4:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1570
				fcosdelta = fadj * ftmp;

				// limit the inclination angle between limits to prevent runaway
				if (fsindelta > SINDELTAMAX)
    97a6:	f7f7 f863 	bl	870 <__aeabi_fcmpgt>
    97aa:	2800      	cmp	r0, #0
    97ac:	d001      	beq.n	97b2 <PSP_CNFG_MQX_KERNEL_LOGGING+0x17b2>
    97ae:	f000 ff4c 	bl	a64a <PSP_CNFG_MQX_KERNEL_LOGGING+0x264a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1575
				{
					fsindelta = SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
				}
				else if (fsindelta < -SINDELTAMAX)
    97b2:	1c28      	adds	r0, r5, #0
    97b4:	4966      	ldr	r1, [pc, #408]	; (9950 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1950>)
    97b6:	f7f7 f847 	bl	848 <__aeabi_fcmplt>
    97ba:	2800      	cmp	r0, #0
    97bc:	d001      	beq.n	97c2 <PSP_CNFG_MQX_KERNEL_LOGGING+0x17c2>
    97be:	f000 ff57 	bl	a670 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2670>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1567
			if (fhyp != 0.0F)
			{
				// compute the sine and cosine of the new geomagnetic vector
				ftmp = 1.0F / fhyp;
				fsindelta = fopp * ftmp;
				fcosdelta = fadj * ftmp;
    97c2:	1c20      	adds	r0, r4, #0
    97c4:	1c31      	adds	r1, r6, #0
    97c6:	f7f7 fbd5 	bl	f74 <__aeabi_fmul>
    97ca:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1582
					fsindelta = -SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
				}

				// compute the new geomagnetic vector (always north pointing)
				pthisSV->fDeltaPl = fasin_deg(fsindelta);
    97cc:	1c28      	adds	r0, r5, #0
    97ce:	f7f9 fafd 	bl	2dcc <fasin_deg>
    97d2:	465a      	mov	r2, fp
    97d4:	23b8      	movs	r3, #184	; 0xb8
    97d6:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1583
				pthisSV->fmGl[X] = pthisMagCal->fB * fcosdelta;
    97d8:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
    97da:	1c21      	adds	r1, r4, #0
    97dc:	6b1e      	ldr	r6, [r3, #48]	; 0x30
    97de:	1c30      	adds	r0, r6, #0
    97e0:	f7f7 fbc8 	bl	f74 <__aeabi_fmul>
    97e4:	2382      	movs	r3, #130	; 0x82
    97e6:	465a      	mov	r2, fp
    97e8:	005b      	lsls	r3, r3, #1
    97ea:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1584
				pthisSV->fmGl[Z] = pthisMagCal->fB * fsindelta;
    97ec:	1c31      	adds	r1, r6, #0
    97ee:	1c28      	adds	r0, r5, #0
    97f0:	f7f7 fbc0 	bl	f74 <__aeabi_fmul>
    97f4:	2386      	movs	r3, #134	; 0x86
    97f6:	465a      	mov	r2, fp
    97f8:	005b      	lsls	r3, r3, #1
    97fa:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1641
	// *********************************************************************************

	if (ithisCoordSystem == NED)
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
    97fc:	465b      	mov	r3, fp
    97fe:	1d1a      	adds	r2, r3, #4
    9800:	330c      	adds	r3, #12
    9802:	9300      	str	r3, [sp, #0]
    9804:	3304      	adds	r3, #4
    9806:	9301      	str	r3, [sp, #4]
    9808:	980a      	ldr	r0, [sp, #40]	; 0x28
    980a:	4659      	mov	r1, fp
    980c:	3b08      	subs	r3, #8
    980e:	f004 fc0b 	bl	e028 <fNEDAnglesDegFromRotationMatrix>
    9812:	f7fd fd1c 	bl	724e <fRun_9DOF_GBY_KALMAN+0x1542>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1520
	// remove gravity and correct the sign if the coordinate system is gravity positive / acceleration negative 
	switch (ithisCoordSystem)
	{
	case NED:
		// gravity positive NED
		pthisSV->faGlPl[X] = -pthisSV->faGlPl[X];
    9816:	2280      	movs	r2, #128	; 0x80
    9818:	0612      	lsls	r2, r2, #24
    981a:	4694      	mov	ip, r2
    981c:	21c8      	movs	r1, #200	; 0xc8
    981e:	465a      	mov	r2, fp
    9820:	9b06      	ldr	r3, [sp, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1521
		pthisSV->faGlPl[Y] = -pthisSV->faGlPl[Y];
    9822:	4465      	add	r5, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1520
	// remove gravity and correct the sign if the coordinate system is gravity positive / acceleration negative 
	switch (ithisCoordSystem)
	{
	case NED:
		// gravity positive NED
		pthisSV->faGlPl[X] = -pthisSV->faGlPl[X];
    9824:	4463      	add	r3, ip
    9826:	5053      	str	r3, [r2, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1521
		pthisSV->faGlPl[Y] = -pthisSV->faGlPl[Y];
    9828:	465b      	mov	r3, fp
    982a:	22cc      	movs	r2, #204	; 0xcc
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1522
		pthisSV->faGlPl[Z] = -(pthisSV->faGlPl[Z] - 1.0F);
    982c:	21fe      	movs	r1, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1521
	switch (ithisCoordSystem)
	{
	case NED:
		// gravity positive NED
		pthisSV->faGlPl[X] = -pthisSV->faGlPl[X];
		pthisSV->faGlPl[Y] = -pthisSV->faGlPl[Y];
    982e:	509d      	str	r5, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1522
		pthisSV->faGlPl[Z] = -(pthisSV->faGlPl[Z] - 1.0F);
    9830:	0589      	lsls	r1, r1, #22
    9832:	f7f7 fcd1 	bl	11d8 <__aeabi_fsub>
    9836:	2380      	movs	r3, #128	; 0x80
    9838:	061b      	lsls	r3, r3, #24
    983a:	469c      	mov	ip, r3
    983c:	465b      	mov	r3, fp
    983e:	4460      	add	r0, ip
    9840:	5118      	str	r0, [r3, r4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1540
		pthisSV->faGlPl[Z] = -(pthisSV->faGlPl[Z] + 1.0F);
		break;
	}

	// update the reference geomagnetic vector using magnetic disturbance error if valid calibration and no jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
    9842:	9a7c      	ldr	r2, [sp, #496]	; 0x1f0
    9844:	4b43      	ldr	r3, [pc, #268]	; (9954 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1954>)
    9846:	56d3      	ldrsb	r3, [r2, r3]
    9848:	2b00      	cmp	r3, #0
    984a:	d0d7      	beq.n	97fc <PSP_CNFG_MQX_KERNEL_LOGGING+0x17fc>
    984c:	2f00      	cmp	r7, #0
    984e:	d100      	bne.n	9852 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1852>
    9850:	e739      	b.n	96c6 <PSP_CNFG_MQX_KERNEL_LOGGING+0x16c6>
    9852:	e7d3      	b.n	97fc <PSP_CNFG_MQX_KERNEL_LOGGING+0x17fc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9854:	23f0      	movs	r3, #240	; 0xf0
    9856:	005b      	lsls	r3, r3, #1
    9858:	58e9      	ldr	r1, [r5, r3]
    985a:	9802      	ldr	r0, [sp, #8]
    985c:	f7f7 fb8a 	bl	f74 <__aeabi_fmul>
    9860:	2100      	movs	r1, #0
    9862:	f7f7 f819 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    9866:	230c      	movs	r3, #12
    9868:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    986a:	2300      	movs	r3, #0
    986c:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    986e:	2392      	movs	r3, #146	; 0x92
    9870:	005b      	lsls	r3, r3, #1
    9872:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9874:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9876:	2100      	movs	r1, #0
    9878:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    987a:	44a2      	add	sl, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    987c:	44a9      	add	r9, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    987e:	f7f6 ffdd 	bl	83c <__aeabi_fcmpeq>
    9882:	2800      	cmp	r0, #0
    9884:	d000      	beq.n	9888 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1888>
    9886:	e144      	b.n	9b12 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1b12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9888:	464b      	mov	r3, r9
    988a:	1c38      	adds	r0, r7, #0
    988c:	6b19      	ldr	r1, [r3, #48]	; 0x30
    988e:	f7f7 fb71 	bl	f74 <__aeabi_fmul>
    9892:	2100      	movs	r1, #0
    9894:	f7f7 f800 	bl	898 <__aeabi_fadd>
    9898:	4653      	mov	r3, sl
    989a:	1c04      	adds	r4, r0, #0
    989c:	4680      	mov	r8, r0
    989e:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    98a0:	2100      	movs	r1, #0
    98a2:	1c30      	adds	r0, r6, #0
    98a4:	f7f6 ffca 	bl	83c <__aeabi_fcmpeq>
    98a8:	2800      	cmp	r0, #0
    98aa:	d100      	bne.n	98ae <PSP_CNFG_MQX_KERNEL_LOGGING+0x18ae>
    98ac:	e0cc      	b.n	9a48 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1a48>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    98ae:	464a      	mov	r2, r9
    98b0:	23c0      	movs	r3, #192	; 0xc0
    98b2:	9802      	ldr	r0, [sp, #8]
    98b4:	58d1      	ldr	r1, [r2, r3]
    98b6:	f7f7 fb5d 	bl	f74 <__aeabi_fmul>
    98ba:	1c21      	adds	r1, r4, #0
    98bc:	f7f6 ffec 	bl	898 <__aeabi_fadd>
    98c0:	4653      	mov	r3, sl
    98c2:	c301      	stmia	r3!, {r0}
    98c4:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    98c6:	2200      	movs	r2, #0
    98c8:	4653      	mov	r3, sl
    98ca:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    98cc:	2394      	movs	r3, #148	; 0x94
    98ce:	005b      	lsls	r3, r3, #1
    98d0:	469a      	mov	sl, r3
    98d2:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    98d4:	4653      	mov	r3, sl
    98d6:	1c38      	adds	r0, r7, #0
    98d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
    98da:	f7f7 fb4b 	bl	f74 <__aeabi_fmul>
    98de:	2100      	movs	r1, #0
    98e0:	f7f6 ffda 	bl	898 <__aeabi_fadd>
    98e4:	464b      	mov	r3, r9
    98e6:	1c04      	adds	r4, r0, #0
    98e8:	4680      	mov	r8, r0
    98ea:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    98ec:	2100      	movs	r1, #0
    98ee:	1c30      	adds	r0, r6, #0
    98f0:	f7f6 ffa4 	bl	83c <__aeabi_fcmpeq>
    98f4:	2800      	cmp	r0, #0
    98f6:	d100      	bne.n	98fa <PSP_CNFG_MQX_KERNEL_LOGGING+0x18fa>
    98f8:	e0ce      	b.n	9a98 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1a98>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    98fa:	23c0      	movs	r3, #192	; 0xc0
    98fc:	4652      	mov	r2, sl
    98fe:	9802      	ldr	r0, [sp, #8]
    9900:	58d1      	ldr	r1, [r2, r3]
    9902:	f7f7 fb37 	bl	f74 <__aeabi_fmul>
    9906:	1c01      	adds	r1, r0, #0
    9908:	1c20      	adds	r0, r4, #0
    990a:	f7f6 ffc5 	bl	898 <__aeabi_fadd>
    990e:	464b      	mov	r3, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9910:	1c2c      	adds	r4, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9912:	c301      	stmia	r3!, {r0}
    9914:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9916:	2200      	movs	r2, #0
    9918:	464b      	mov	r3, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    991a:	342d      	adds	r4, #45	; 0x2d
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    991c:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    991e:	34ff      	adds	r4, #255	; 0xff
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9920:	6b21      	ldr	r1, [r4, #48]	; 0x30
    9922:	1c38      	adds	r0, r7, #0
    9924:	f7f7 fb26 	bl	f74 <__aeabi_fmul>
    9928:	2100      	movs	r1, #0
    992a:	f7f6 ffb5 	bl	898 <__aeabi_fadd>
    992e:	4643      	mov	r3, r8
    9930:	1c07      	adds	r7, r0, #0
    9932:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9934:	2100      	movs	r1, #0
    9936:	1c30      	adds	r0, r6, #0
    9938:	f7f6 ff80 	bl	83c <__aeabi_fcmpeq>
    993c:	2800      	cmp	r0, #0
    993e:	d100      	bne.n	9942 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1942>
    9940:	e0d0      	b.n	9ae4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1ae4>
    9942:	e0da      	b.n	9afa <PSP_CNFG_MQX_KERNEL_LOGGING+0x1afa>
    9944:	000007dc 	.word	0x000007dc
    9948:	000007ec 	.word	0x000007ec
    994c:	3f6803ca 	.word	0x3f6803ca
    9950:	bf6803ca 	.word	0xbf6803ca
    9954:	00000416 	.word	0x00000416
    9958:	2300      	movs	r3, #0
    995a:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    995c:	23bc      	movs	r3, #188	; 0xbc
    995e:	005b      	lsls	r3, r3, #1
    9960:	58e9      	ldr	r1, [r5, r3]
    9962:	1c30      	adds	r0, r6, #0
    9964:	f7f7 fb06 	bl	f74 <__aeabi_fmul>
    9968:	4649      	mov	r1, r9
    996a:	f7f6 ff95 	bl	898 <__aeabi_fadd>
    996e:	23ec      	movs	r3, #236	; 0xec
    9970:	4680      	mov	r8, r0
    9972:	005b      	lsls	r3, r3, #1
    9974:	6020      	str	r0, [r4, #0]
    9976:	58e9      	ldr	r1, [r5, r3]
    9978:	9802      	ldr	r0, [sp, #8]
    997a:	f7f7 fafb 	bl	f74 <__aeabi_fmul>
    997e:	4641      	mov	r1, r8
    9980:	f7f6 ff8a 	bl	898 <__aeabi_fadd>
    9984:	1c23      	adds	r3, r4, #0
    9986:	c301      	stmia	r3!, {r0}
    9988:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    998a:	2300      	movs	r3, #0
    998c:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    998e:	238e      	movs	r3, #142	; 0x8e
    9990:	005b      	lsls	r3, r3, #1
    9992:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9994:	1c38      	adds	r0, r7, #0
    9996:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9998:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    999a:	f7f6 ff4f 	bl	83c <__aeabi_fcmpeq>
    999e:	2800      	cmp	r0, #0
    99a0:	d101      	bne.n	99a6 <PSP_CNFG_MQX_KERNEL_LOGGING+0x19a6>
    99a2:	f7fe f9eb 	bl	7d7c <fRun_9DOF_GBY_KALMAN+0x2070>
    99a6:	2300      	movs	r3, #0
    99a8:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    99aa:	4653      	mov	r3, sl
    99ac:	1c30      	adds	r0, r6, #0
    99ae:	6e19      	ldr	r1, [r3, #96]	; 0x60
    99b0:	f7f7 fae0 	bl	f74 <__aeabi_fmul>
    99b4:	4649      	mov	r1, r9
    99b6:	f7f6 ff6f 	bl	898 <__aeabi_fadd>
    99ba:	4643      	mov	r3, r8
    99bc:	4652      	mov	r2, sl
    99be:	6018      	str	r0, [r3, #0]
    99c0:	23c0      	movs	r3, #192	; 0xc0
    99c2:	1c04      	adds	r4, r0, #0
    99c4:	58d1      	ldr	r1, [r2, r3]
    99c6:	9802      	ldr	r0, [sp, #8]
    99c8:	f7f7 fad4 	bl	f74 <__aeabi_fmul>
    99cc:	1c21      	adds	r1, r4, #0
    99ce:	f7f6 ff63 	bl	898 <__aeabi_fadd>
    99d2:	4643      	mov	r3, r8
    99d4:	c301      	stmia	r3!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    99d6:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    99d8:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    99da:	4643      	mov	r3, r8
    99dc:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    99de:	2390      	movs	r3, #144	; 0x90
    99e0:	005b      	lsls	r3, r3, #1
    99e2:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    99e4:	1c38      	adds	r0, r7, #0
    99e6:	1c11      	adds	r1, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    99e8:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    99ea:	f7f6 ff27 	bl	83c <__aeabi_fcmpeq>
    99ee:	2800      	cmp	r0, #0
    99f0:	d101      	bne.n	99f6 <PSP_CNFG_MQX_KERNEL_LOGGING+0x19f6>
    99f2:	f7ff fb68 	bl	90c6 <PSP_CNFG_MQX_KERNEL_LOGGING+0x10c6>
    99f6:	2300      	movs	r3, #0
    99f8:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    99fa:	4653      	mov	r3, sl
    99fc:	1c30      	adds	r0, r6, #0
    99fe:	6e19      	ldr	r1, [r3, #96]	; 0x60
    9a00:	f7f7 fab8 	bl	f74 <__aeabi_fmul>
    9a04:	4641      	mov	r1, r8
    9a06:	f7f6 ff47 	bl	898 <__aeabi_fadd>
    9a0a:	464b      	mov	r3, r9
    9a0c:	4652      	mov	r2, sl
    9a0e:	6018      	str	r0, [r3, #0]
    9a10:	23c0      	movs	r3, #192	; 0xc0
    9a12:	1c04      	adds	r4, r0, #0
    9a14:	58d1      	ldr	r1, [r2, r3]
    9a16:	9802      	ldr	r0, [sp, #8]
    9a18:	f7f7 faac 	bl	f74 <__aeabi_fmul>
    9a1c:	1c21      	adds	r1, r4, #0
    9a1e:	f7f6 ff3b 	bl	898 <__aeabi_fadd>
    9a22:	464b      	mov	r3, r9
    9a24:	c301      	stmia	r3!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9a26:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9a28:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9a2a:	464b      	mov	r3, r9
    9a2c:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9a2e:	2392      	movs	r3, #146	; 0x92
    9a30:	005b      	lsls	r3, r3, #1
    9a32:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9a34:	1c38      	adds	r0, r7, #0
    9a36:	1c11      	adds	r1, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9a38:	44a9      	add	r9, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9a3a:	f7f6 feff 	bl	83c <__aeabi_fcmpeq>
    9a3e:	2800      	cmp	r0, #0
    9a40:	d100      	bne.n	9a44 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1a44>
    9a42:	e721      	b.n	9888 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1888>
    9a44:	2300      	movs	r3, #0
    9a46:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9a48:	464b      	mov	r3, r9
    9a4a:	1c30      	adds	r0, r6, #0
    9a4c:	6e19      	ldr	r1, [r3, #96]	; 0x60
    9a4e:	f7f7 fa91 	bl	f74 <__aeabi_fmul>
    9a52:	4641      	mov	r1, r8
    9a54:	f7f6 ff20 	bl	898 <__aeabi_fadd>
    9a58:	4653      	mov	r3, sl
    9a5a:	464a      	mov	r2, r9
    9a5c:	6018      	str	r0, [r3, #0]
    9a5e:	23c0      	movs	r3, #192	; 0xc0
    9a60:	1c04      	adds	r4, r0, #0
    9a62:	58d1      	ldr	r1, [r2, r3]
    9a64:	9802      	ldr	r0, [sp, #8]
    9a66:	f7f7 fa85 	bl	f74 <__aeabi_fmul>
    9a6a:	1c01      	adds	r1, r0, #0
    9a6c:	1c20      	adds	r0, r4, #0
    9a6e:	f7f6 ff13 	bl	898 <__aeabi_fadd>
    9a72:	4653      	mov	r3, sl
    9a74:	c301      	stmia	r3!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9a76:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9a78:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9a7a:	4653      	mov	r3, sl
    9a7c:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9a7e:	2394      	movs	r3, #148	; 0x94
    9a80:	005b      	lsls	r3, r3, #1
    9a82:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9a84:	1c38      	adds	r0, r7, #0
    9a86:	1c11      	adds	r1, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9a88:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9a8a:	f7f6 fed7 	bl	83c <__aeabi_fcmpeq>
    9a8e:	2800      	cmp	r0, #0
    9a90:	d100      	bne.n	9a94 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1a94>
    9a92:	e71f      	b.n	98d4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x18d4>
    9a94:	2300      	movs	r3, #0
    9a96:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9a98:	4653      	mov	r3, sl
    9a9a:	1c30      	adds	r0, r6, #0
    9a9c:	6e19      	ldr	r1, [r3, #96]	; 0x60
    9a9e:	f7f7 fa69 	bl	f74 <__aeabi_fmul>
    9aa2:	4641      	mov	r1, r8
    9aa4:	f7f6 fef8 	bl	898 <__aeabi_fadd>
    9aa8:	464b      	mov	r3, r9
    9aaa:	4652      	mov	r2, sl
    9aac:	6018      	str	r0, [r3, #0]
    9aae:	23c0      	movs	r3, #192	; 0xc0
    9ab0:	1c04      	adds	r4, r0, #0
    9ab2:	58d1      	ldr	r1, [r2, r3]
    9ab4:	9802      	ldr	r0, [sp, #8]
    9ab6:	f7f7 fa5d 	bl	f74 <__aeabi_fmul>
    9aba:	1c01      	adds	r1, r0, #0
    9abc:	1c20      	adds	r0, r4, #0
    9abe:	f7f6 feeb 	bl	898 <__aeabi_fadd>
    9ac2:	464b      	mov	r3, r9
    9ac4:	c301      	stmia	r3!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9ac6:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9ac8:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9aca:	1c2c      	adds	r4, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9acc:	464b      	mov	r3, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9ace:	342d      	adds	r4, #45	; 0x2d
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9ad0:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9ad2:	1c38      	adds	r0, r7, #0
    9ad4:	1c11      	adds	r1, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9ad6:	34ff      	adds	r4, #255	; 0xff
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9ad8:	f7f6 feb0 	bl	83c <__aeabi_fcmpeq>
    9adc:	2800      	cmp	r0, #0
    9ade:	d100      	bne.n	9ae2 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1ae2>
    9ae0:	e71e      	b.n	9920 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1920>
    9ae2:	2700      	movs	r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9ae4:	6e21      	ldr	r1, [r4, #96]	; 0x60
    9ae6:	1c30      	adds	r0, r6, #0
    9ae8:	f7f7 fa44 	bl	f74 <__aeabi_fmul>
    9aec:	1c01      	adds	r1, r0, #0
    9aee:	1c38      	adds	r0, r7, #0
    9af0:	f7f6 fed2 	bl	898 <__aeabi_fadd>
    9af4:	4643      	mov	r3, r8
    9af6:	1c07      	adds	r7, r0, #0
    9af8:	6018      	str	r0, [r3, #0]
    9afa:	23c0      	movs	r3, #192	; 0xc0
    9afc:	9802      	ldr	r0, [sp, #8]
    9afe:	58e1      	ldr	r1, [r4, r3]
    9b00:	f7f7 fa38 	bl	f74 <__aeabi_fmul>
    9b04:	1c39      	adds	r1, r7, #0
    9b06:	f7f6 fec7 	bl	898 <__aeabi_fadd>
    9b0a:	4643      	mov	r3, r8
    9b0c:	6018      	str	r0, [r3, #0]
    9b0e:	f7fd f84e 	bl	6bae <fRun_9DOF_GBY_KALMAN+0xea2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9b12:	1c30      	adds	r0, r6, #0
    9b14:	2100      	movs	r1, #0
    9b16:	f7f6 fe91 	bl	83c <__aeabi_fcmpeq>
    9b1a:	2800      	cmp	r0, #0
    9b1c:	d092      	beq.n	9a44 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1a44>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9b1e:	23f2      	movs	r3, #242	; 0xf2
    9b20:	005b      	lsls	r3, r3, #1
    9b22:	58e9      	ldr	r1, [r5, r3]
    9b24:	9802      	ldr	r0, [sp, #8]
    9b26:	f7f7 fa25 	bl	f74 <__aeabi_fmul>
    9b2a:	2100      	movs	r1, #0
    9b2c:	f7f6 feb4 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    9b30:	2310      	movs	r3, #16
    9b32:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9b34:	2300      	movs	r3, #0
    9b36:	6123      	str	r3, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9b38:	2394      	movs	r3, #148	; 0x94
    9b3a:	005b      	lsls	r3, r3, #1
    9b3c:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9b3e:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9b40:	2100      	movs	r1, #0
    9b42:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    9b44:	44a1      	add	r9, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9b46:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9b48:	f7f6 fe78 	bl	83c <__aeabi_fcmpeq>
    9b4c:	2800      	cmp	r0, #0
    9b4e:	d0a1      	beq.n	9a94 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1a94>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9b50:	23f4      	movs	r3, #244	; 0xf4
    9b52:	005b      	lsls	r3, r3, #1
    9b54:	58e9      	ldr	r1, [r5, r3]
    9b56:	9802      	ldr	r0, [sp, #8]
    9b58:	f7f7 fa0c 	bl	f74 <__aeabi_fmul>
    9b5c:	2100      	movs	r1, #0
    9b5e:	f7f6 fe9b 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    9b62:	2314      	movs	r3, #20
    9b64:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9b66:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9b68:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    9b6a:	44a0      	add	r8, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9b6c:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9b6e:	1c2c      	adds	r4, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9b70:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9b72:	342d      	adds	r4, #45	; 0x2d
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9b74:	1c19      	adds	r1, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9b76:	34ff      	adds	r4, #255	; 0xff
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9b78:	f7f6 fe60 	bl	83c <__aeabi_fcmpeq>
    9b7c:	2800      	cmp	r0, #0
    9b7e:	d100      	bne.n	9b82 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1b82>
    9b80:	e6ce      	b.n	9920 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1920>
    9b82:	2700      	movs	r7, #0
    9b84:	e7b9      	b.n	9afa <PSP_CNFG_MQX_KERNEL_LOGGING+0x1afa>
    9b86:	2700      	movs	r7, #0
    9b88:	f7fe fddb 	bl	8742 <PSP_CNFG_MQX_KERNEL_LOGGING+0x742>
    9b8c:	2300      	movs	r3, #0
    9b8e:	4698      	mov	r8, r3
    9b90:	f7fe fd9b 	bl	86ca <PSP_CNFG_MQX_KERNEL_LOGGING+0x6ca>
    9b94:	2300      	movs	r3, #0
    9b96:	4698      	mov	r8, r3
    9b98:	f7fe fd5b 	bl	8652 <PSP_CNFG_MQX_KERNEL_LOGGING+0x652>
    9b9c:	2300      	movs	r3, #0
    9b9e:	4698      	mov	r8, r3
    9ba0:	f7fe fd1c 	bl	85dc <PSP_CNFG_MQX_KERNEL_LOGGING+0x5dc>
    9ba4:	2300      	movs	r3, #0
    9ba6:	4698      	mov	r8, r3
    9ba8:	f7fe fcdd 	bl	8566 <PSP_CNFG_MQX_KERNEL_LOGGING+0x566>
    9bac:	2700      	movs	r7, #0
    9bae:	f7fe ff1e 	bl	89ee <PSP_CNFG_MQX_KERNEL_LOGGING+0x9ee>
    9bb2:	2300      	movs	r3, #0
    9bb4:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9bb6:	23bc      	movs	r3, #188	; 0xbc
    9bb8:	005b      	lsls	r3, r3, #1
    9bba:	58e9      	ldr	r1, [r5, r3]
    9bbc:	1c30      	adds	r0, r6, #0
    9bbe:	f7f7 f9d9 	bl	f74 <__aeabi_fmul>
    9bc2:	4649      	mov	r1, r9
    9bc4:	f7f6 fe68 	bl	898 <__aeabi_fadd>
    9bc8:	23d4      	movs	r3, #212	; 0xd4
    9bca:	4680      	mov	r8, r0
    9bcc:	005b      	lsls	r3, r3, #1
    9bce:	6020      	str	r0, [r4, #0]
    9bd0:	58e9      	ldr	r1, [r5, r3]
    9bd2:	9804      	ldr	r0, [sp, #16]
    9bd4:	f7f7 f9ce 	bl	f74 <__aeabi_fmul>
    9bd8:	4641      	mov	r1, r8
    9bda:	f7f6 fe5d 	bl	898 <__aeabi_fadd>
    9bde:	1c23      	adds	r3, r4, #0
    9be0:	c301      	stmia	r3!, {r0}
    9be2:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9be4:	2300      	movs	r3, #0
    9be6:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9be8:	238e      	movs	r3, #142	; 0x8e
    9bea:	005b      	lsls	r3, r3, #1
    9bec:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9bee:	1c38      	adds	r0, r7, #0
    9bf0:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9bf2:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9bf4:	f7f6 fe22 	bl	83c <__aeabi_fcmpeq>
    9bf8:	2800      	cmp	r0, #0
    9bfa:	d101      	bne.n	9c00 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1c00>
    9bfc:	f7fe fc14 	bl	8428 <PSP_CNFG_MQX_KERNEL_LOGGING+0x428>
    9c00:	2300      	movs	r3, #0
    9c02:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9c04:	4653      	mov	r3, sl
    9c06:	1c30      	adds	r0, r6, #0
    9c08:	6e19      	ldr	r1, [r3, #96]	; 0x60
    9c0a:	f7f7 f9b3 	bl	f74 <__aeabi_fmul>
    9c0e:	4649      	mov	r1, r9
    9c10:	f7f6 fe42 	bl	898 <__aeabi_fadd>
    9c14:	4643      	mov	r3, r8
    9c16:	4652      	mov	r2, sl
    9c18:	6018      	str	r0, [r3, #0]
    9c1a:	2390      	movs	r3, #144	; 0x90
    9c1c:	1c04      	adds	r4, r0, #0
    9c1e:	58d1      	ldr	r1, [r2, r3]
    9c20:	9804      	ldr	r0, [sp, #16]
    9c22:	f7f7 f9a7 	bl	f74 <__aeabi_fmul>
    9c26:	1c01      	adds	r1, r0, #0
    9c28:	1c20      	adds	r0, r4, #0
    9c2a:	f7f6 fe35 	bl	898 <__aeabi_fadd>
    9c2e:	4643      	mov	r3, r8
    9c30:	c301      	stmia	r3!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9c32:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9c34:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9c36:	4643      	mov	r3, r8
    9c38:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9c3a:	2390      	movs	r3, #144	; 0x90
    9c3c:	005b      	lsls	r3, r3, #1
    9c3e:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9c40:	1c38      	adds	r0, r7, #0
    9c42:	1c11      	adds	r1, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9c44:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9c46:	f7f6 fdf9 	bl	83c <__aeabi_fcmpeq>
    9c4a:	2800      	cmp	r0, #0
    9c4c:	d101      	bne.n	9c52 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1c52>
    9c4e:	f7fe fc13 	bl	8478 <PSP_CNFG_MQX_KERNEL_LOGGING+0x478>
    9c52:	2300      	movs	r3, #0
    9c54:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9c56:	4653      	mov	r3, sl
    9c58:	1c30      	adds	r0, r6, #0
    9c5a:	6e19      	ldr	r1, [r3, #96]	; 0x60
    9c5c:	f7f7 f98a 	bl	f74 <__aeabi_fmul>
    9c60:	4641      	mov	r1, r8
    9c62:	f7f6 fe19 	bl	898 <__aeabi_fadd>
    9c66:	464b      	mov	r3, r9
    9c68:	4652      	mov	r2, sl
    9c6a:	6018      	str	r0, [r3, #0]
    9c6c:	2390      	movs	r3, #144	; 0x90
    9c6e:	1c04      	adds	r4, r0, #0
    9c70:	58d1      	ldr	r1, [r2, r3]
    9c72:	9804      	ldr	r0, [sp, #16]
    9c74:	f7f7 f97e 	bl	f74 <__aeabi_fmul>
    9c78:	1c01      	adds	r1, r0, #0
    9c7a:	1c20      	adds	r0, r4, #0
    9c7c:	f7f6 fe0c 	bl	898 <__aeabi_fadd>
    9c80:	464b      	mov	r3, r9
    9c82:	c301      	stmia	r3!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9c84:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9c86:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9c88:	464b      	mov	r3, r9
    9c8a:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9c8c:	2392      	movs	r3, #146	; 0x92
    9c8e:	005b      	lsls	r3, r3, #1
    9c90:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9c92:	1c38      	adds	r0, r7, #0
    9c94:	1c11      	adds	r1, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9c96:	44a9      	add	r9, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9c98:	f7f6 fdd0 	bl	83c <__aeabi_fcmpeq>
    9c9c:	2800      	cmp	r0, #0
    9c9e:	d15a      	bne.n	9d56 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1d56>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9ca0:	464b      	mov	r3, r9
    9ca2:	1c38      	adds	r0, r7, #0
    9ca4:	6b19      	ldr	r1, [r3, #48]	; 0x30
    9ca6:	f7f7 f965 	bl	f74 <__aeabi_fmul>
    9caa:	2100      	movs	r1, #0
    9cac:	f7f6 fdf4 	bl	898 <__aeabi_fadd>
    9cb0:	4653      	mov	r3, sl
    9cb2:	1c04      	adds	r4, r0, #0
    9cb4:	4680      	mov	r8, r0
    9cb6:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9cb8:	2100      	movs	r1, #0
    9cba:	1c30      	adds	r0, r6, #0
    9cbc:	f7f6 fdbe 	bl	83c <__aeabi_fcmpeq>
    9cc0:	2800      	cmp	r0, #0
    9cc2:	d04a      	beq.n	9d5a <PSP_CNFG_MQX_KERNEL_LOGGING+0x1d5a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9cc4:	464a      	mov	r2, r9
    9cc6:	2390      	movs	r3, #144	; 0x90
    9cc8:	9804      	ldr	r0, [sp, #16]
    9cca:	58d1      	ldr	r1, [r2, r3]
    9ccc:	f7f7 f952 	bl	f74 <__aeabi_fmul>
    9cd0:	1c01      	adds	r1, r0, #0
    9cd2:	1c20      	adds	r0, r4, #0
    9cd4:	f7f6 fde0 	bl	898 <__aeabi_fadd>
    9cd8:	4653      	mov	r3, sl
    9cda:	c301      	stmia	r3!, {r0}
    9cdc:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9cde:	2200      	movs	r2, #0
    9ce0:	4653      	mov	r3, sl
    9ce2:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9ce4:	2394      	movs	r3, #148	; 0x94
    9ce6:	005b      	lsls	r3, r3, #1
    9ce8:	469a      	mov	sl, r3
    9cea:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9cec:	4653      	mov	r3, sl
    9cee:	1c38      	adds	r0, r7, #0
    9cf0:	6b19      	ldr	r1, [r3, #48]	; 0x30
    9cf2:	f7f7 f93f 	bl	f74 <__aeabi_fmul>
    9cf6:	2100      	movs	r1, #0
    9cf8:	f7f6 fdce 	bl	898 <__aeabi_fadd>
    9cfc:	464b      	mov	r3, r9
    9cfe:	1c04      	adds	r4, r0, #0
    9d00:	4680      	mov	r8, r0
    9d02:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9d04:	2100      	movs	r1, #0
    9d06:	1c30      	adds	r0, r6, #0
    9d08:	f7f6 fd98 	bl	83c <__aeabi_fcmpeq>
    9d0c:	2800      	cmp	r0, #0
    9d0e:	d04b      	beq.n	9da8 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1da8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9d10:	2390      	movs	r3, #144	; 0x90
    9d12:	4652      	mov	r2, sl
    9d14:	9804      	ldr	r0, [sp, #16]
    9d16:	58d1      	ldr	r1, [r2, r3]
    9d18:	f7f7 f92c 	bl	f74 <__aeabi_fmul>
    9d1c:	1c21      	adds	r1, r4, #0
    9d1e:	f7f6 fdbb 	bl	898 <__aeabi_fadd>
    9d22:	464b      	mov	r3, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9d24:	1c2c      	adds	r4, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9d26:	c301      	stmia	r3!, {r0}
    9d28:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9d2a:	2200      	movs	r2, #0
    9d2c:	464b      	mov	r3, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9d2e:	342d      	adds	r4, #45	; 0x2d
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9d30:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9d32:	34ff      	adds	r4, #255	; 0xff
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9d34:	6b21      	ldr	r1, [r4, #48]	; 0x30
    9d36:	1c38      	adds	r0, r7, #0
    9d38:	f7f7 f91c 	bl	f74 <__aeabi_fmul>
    9d3c:	2100      	movs	r1, #0
    9d3e:	f7f6 fdab 	bl	898 <__aeabi_fadd>
    9d42:	4643      	mov	r3, r8
    9d44:	1c07      	adds	r7, r0, #0
    9d46:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9d48:	2100      	movs	r1, #0
    9d4a:	1c30      	adds	r0, r6, #0
    9d4c:	f7f6 fd76 	bl	83c <__aeabi_fcmpeq>
    9d50:	2800      	cmp	r0, #0
    9d52:	d04e      	beq.n	9df2 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1df2>
    9d54:	e058      	b.n	9e08 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1e08>
    9d56:	2300      	movs	r3, #0
    9d58:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9d5a:	464b      	mov	r3, r9
    9d5c:	1c30      	adds	r0, r6, #0
    9d5e:	6e19      	ldr	r1, [r3, #96]	; 0x60
    9d60:	f7f7 f908 	bl	f74 <__aeabi_fmul>
    9d64:	4641      	mov	r1, r8
    9d66:	f7f6 fd97 	bl	898 <__aeabi_fadd>
    9d6a:	4653      	mov	r3, sl
    9d6c:	464a      	mov	r2, r9
    9d6e:	6018      	str	r0, [r3, #0]
    9d70:	2390      	movs	r3, #144	; 0x90
    9d72:	1c04      	adds	r4, r0, #0
    9d74:	58d1      	ldr	r1, [r2, r3]
    9d76:	9804      	ldr	r0, [sp, #16]
    9d78:	f7f7 f8fc 	bl	f74 <__aeabi_fmul>
    9d7c:	1c01      	adds	r1, r0, #0
    9d7e:	1c20      	adds	r0, r4, #0
    9d80:	f7f6 fd8a 	bl	898 <__aeabi_fadd>
    9d84:	4653      	mov	r3, sl
    9d86:	c301      	stmia	r3!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9d88:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9d8a:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9d8c:	4653      	mov	r3, sl
    9d8e:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9d90:	2394      	movs	r3, #148	; 0x94
    9d92:	005b      	lsls	r3, r3, #1
    9d94:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9d96:	1c38      	adds	r0, r7, #0
    9d98:	1c11      	adds	r1, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9d9a:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9d9c:	f7f6 fd4e 	bl	83c <__aeabi_fcmpeq>
    9da0:	2800      	cmp	r0, #0
    9da2:	d0a3      	beq.n	9cec <PSP_CNFG_MQX_KERNEL_LOGGING+0x1cec>
    9da4:	2300      	movs	r3, #0
    9da6:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9da8:	4653      	mov	r3, sl
    9daa:	1c30      	adds	r0, r6, #0
    9dac:	6e19      	ldr	r1, [r3, #96]	; 0x60
    9dae:	f7f7 f8e1 	bl	f74 <__aeabi_fmul>
    9db2:	4641      	mov	r1, r8
    9db4:	f7f6 fd70 	bl	898 <__aeabi_fadd>
    9db8:	464b      	mov	r3, r9
    9dba:	4652      	mov	r2, sl
    9dbc:	6018      	str	r0, [r3, #0]
    9dbe:	2390      	movs	r3, #144	; 0x90
    9dc0:	1c04      	adds	r4, r0, #0
    9dc2:	58d1      	ldr	r1, [r2, r3]
    9dc4:	9804      	ldr	r0, [sp, #16]
    9dc6:	f7f7 f8d5 	bl	f74 <__aeabi_fmul>
    9dca:	1c01      	adds	r1, r0, #0
    9dcc:	1c20      	adds	r0, r4, #0
    9dce:	f7f6 fd63 	bl	898 <__aeabi_fadd>
    9dd2:	464b      	mov	r3, r9
    9dd4:	c301      	stmia	r3!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9dd6:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9dd8:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9dda:	1c2c      	adds	r4, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9ddc:	464b      	mov	r3, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9dde:	342d      	adds	r4, #45	; 0x2d
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9de0:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9de2:	1c38      	adds	r0, r7, #0
    9de4:	1c11      	adds	r1, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9de6:	34ff      	adds	r4, #255	; 0xff
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9de8:	f7f6 fd28 	bl	83c <__aeabi_fcmpeq>
    9dec:	2800      	cmp	r0, #0
    9dee:	d0a1      	beq.n	9d34 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1d34>
    9df0:	2700      	movs	r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9df2:	6e21      	ldr	r1, [r4, #96]	; 0x60
    9df4:	1c30      	adds	r0, r6, #0
    9df6:	f7f7 f8bd 	bl	f74 <__aeabi_fmul>
    9dfa:	1c01      	adds	r1, r0, #0
    9dfc:	1c38      	adds	r0, r7, #0
    9dfe:	f7f6 fd4b 	bl	898 <__aeabi_fadd>
    9e02:	4643      	mov	r3, r8
    9e04:	1c07      	adds	r7, r0, #0
    9e06:	6018      	str	r0, [r3, #0]
    9e08:	9804      	ldr	r0, [sp, #16]
    9e0a:	2390      	movs	r3, #144	; 0x90
    9e0c:	e677      	b.n	9afe <PSP_CNFG_MQX_KERNEL_LOGGING+0x1afe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    9e0e:	2308      	movs	r3, #8
    9e10:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9e12:	2300      	movs	r3, #0
    9e14:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9e16:	2390      	movs	r3, #144	; 0x90
    9e18:	005b      	lsls	r3, r3, #1
    9e1a:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9e1c:	1c38      	adds	r0, r7, #0
    9e1e:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    9e20:	44a0      	add	r8, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9e22:	44a9      	add	r9, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9e24:	f7f6 fd0a 	bl	83c <__aeabi_fcmpeq>
    9e28:	2800      	cmp	r0, #0
    9e2a:	d11d      	bne.n	9e68 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1e68>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9e2c:	464b      	mov	r3, r9
    9e2e:	1c38      	adds	r0, r7, #0
    9e30:	6b19      	ldr	r1, [r3, #48]	; 0x30
    9e32:	f7f7 f89f 	bl	f74 <__aeabi_fmul>
    9e36:	2100      	movs	r1, #0
    9e38:	f7f6 fd2e 	bl	898 <__aeabi_fadd>
    9e3c:	4643      	mov	r3, r8
    9e3e:	1c04      	adds	r4, r0, #0
    9e40:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9e42:	2100      	movs	r1, #0
    9e44:	1c30      	adds	r0, r6, #0
    9e46:	f7f6 fcf9 	bl	83c <__aeabi_fcmpeq>
    9e4a:	2800      	cmp	r0, #0
    9e4c:	d101      	bne.n	9e52 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1e52>
    9e4e:	f7ff fad0 	bl	93f2 <PSP_CNFG_MQX_KERNEL_LOGGING+0x13f2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    9e52:	2304      	movs	r3, #4
    9e54:	4443      	add	r3, r8
    9e56:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9e58:	2200      	movs	r2, #0
    9e5a:	4643      	mov	r3, r8
    9e5c:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9e5e:	2392      	movs	r3, #146	; 0x92
    9e60:	005b      	lsls	r3, r3, #1
    9e62:	4698      	mov	r8, r3
    9e64:	44a8      	add	r8, r5
    9e66:	e00e      	b.n	9e86 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1e86>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    9e68:	230c      	movs	r3, #12
    9e6a:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9e6c:	2300      	movs	r3, #0
    9e6e:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9e70:	2392      	movs	r3, #146	; 0x92
    9e72:	005b      	lsls	r3, r3, #1
    9e74:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9e76:	1c38      	adds	r0, r7, #0
    9e78:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    9e7a:	44a1      	add	r9, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9e7c:	44a8      	add	r8, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9e7e:	f7f6 fcdd 	bl	83c <__aeabi_fcmpeq>
    9e82:	2800      	cmp	r0, #0
    9e84:	d14c      	bne.n	9f20 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1f20>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9e86:	4643      	mov	r3, r8
    9e88:	1c38      	adds	r0, r7, #0
    9e8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
    9e8c:	f7f7 f872 	bl	f74 <__aeabi_fmul>
    9e90:	2100      	movs	r1, #0
    9e92:	f7f6 fd01 	bl	898 <__aeabi_fadd>
    9e96:	464b      	mov	r3, r9
    9e98:	1c04      	adds	r4, r0, #0
    9e9a:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9e9c:	2100      	movs	r1, #0
    9e9e:	1c30      	adds	r0, r6, #0
    9ea0:	f7f6 fccc 	bl	83c <__aeabi_fcmpeq>
    9ea4:	2800      	cmp	r0, #0
    9ea6:	d101      	bne.n	9eac <PSP_CNFG_MQX_KERNEL_LOGGING+0x1eac>
    9ea8:	f7ff fabe 	bl	9428 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1428>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    9eac:	2304      	movs	r3, #4
    9eae:	444b      	add	r3, r9
    9eb0:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9eb2:	2200      	movs	r2, #0
    9eb4:	464b      	mov	r3, r9
    9eb6:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9eb8:	2394      	movs	r3, #148	; 0x94
    9eba:	005b      	lsls	r3, r3, #1
    9ebc:	4699      	mov	r9, r3
    9ebe:	44a9      	add	r9, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9ec0:	464b      	mov	r3, r9
    9ec2:	1c38      	adds	r0, r7, #0
    9ec4:	6b19      	ldr	r1, [r3, #48]	; 0x30
    9ec6:	f7f7 f855 	bl	f74 <__aeabi_fmul>
    9eca:	2100      	movs	r1, #0
    9ecc:	f7f6 fce4 	bl	898 <__aeabi_fadd>
    9ed0:	4643      	mov	r3, r8
    9ed2:	1c04      	adds	r4, r0, #0
    9ed4:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9ed6:	2100      	movs	r1, #0
    9ed8:	1c30      	adds	r0, r6, #0
    9eda:	f7f6 fcaf 	bl	83c <__aeabi_fcmpeq>
    9ede:	2800      	cmp	r0, #0
    9ee0:	d101      	bne.n	9ee6 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1ee6>
    9ee2:	f7ff fabc 	bl	945e <PSP_CNFG_MQX_KERNEL_LOGGING+0x145e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    9ee6:	2304      	movs	r3, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9ee8:	1c2c      	adds	r4, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    9eea:	4443      	add	r3, r8
    9eec:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9eee:	2200      	movs	r2, #0
    9ef0:	4643      	mov	r3, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9ef2:	342d      	adds	r4, #45	; 0x2d
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9ef4:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9ef6:	34ff      	adds	r4, #255	; 0xff
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9ef8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    9efa:	1c38      	adds	r0, r7, #0
    9efc:	f7f7 f83a 	bl	f74 <__aeabi_fmul>
    9f00:	2100      	movs	r1, #0
    9f02:	f7f6 fcc9 	bl	898 <__aeabi_fadd>
    9f06:	464b      	mov	r3, r9
    9f08:	1c07      	adds	r7, r0, #0
    9f0a:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9f0c:	2100      	movs	r1, #0
    9f0e:	1c30      	adds	r0, r6, #0
    9f10:	f7f6 fc94 	bl	83c <__aeabi_fcmpeq>
    9f14:	2800      	cmp	r0, #0
    9f16:	d101      	bne.n	9f1c <PSP_CNFG_MQX_KERNEL_LOGGING+0x1f1c>
    9f18:	f7ff fabb 	bl	9492 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1492>
    9f1c:	f7fc fe47 	bl	6bae <fRun_9DOF_GBY_KALMAN+0xea2>
    9f20:	1c30      	adds	r0, r6, #0
    9f22:	2100      	movs	r1, #0
    9f24:	f7f6 fc8a 	bl	83c <__aeabi_fcmpeq>
    9f28:	2800      	cmp	r0, #0
    9f2a:	d101      	bne.n	9f30 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1f30>
    9f2c:	f7ff fa7b 	bl	9426 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1426>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    9f30:	2310      	movs	r3, #16
    9f32:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9f34:	2300      	movs	r3, #0
    9f36:	6123      	str	r3, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9f38:	2394      	movs	r3, #148	; 0x94
    9f3a:	005b      	lsls	r3, r3, #1
    9f3c:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9f3e:	1c30      	adds	r0, r6, #0
    9f40:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    9f42:	44a0      	add	r8, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9f44:	44a9      	add	r9, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9f46:	f7f6 fc79 	bl	83c <__aeabi_fcmpeq>
    9f4a:	2800      	cmp	r0, #0
    9f4c:	d101      	bne.n	9f52 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1f52>
    9f4e:	f7ff fa85 	bl	945c <PSP_CNFG_MQX_KERNEL_LOGGING+0x145c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    9f52:	2314      	movs	r3, #20
    9f54:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9f56:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    9f58:	44a1      	add	r9, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9f5a:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9f5c:	1c2c      	adds	r4, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9f5e:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9f60:	342d      	adds	r4, #45	; 0x2d
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9f62:	1c19      	adds	r1, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9f64:	34ff      	adds	r4, #255	; 0xff
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9f66:	f7f6 fc69 	bl	83c <__aeabi_fcmpeq>
    9f6a:	2800      	cmp	r0, #0
    9f6c:	d0c4      	beq.n	9ef8 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1ef8>
    9f6e:	f7fc fe1e 	bl	6bae <fRun_9DOF_GBY_KALMAN+0xea2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9f72:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9f74:	9803      	ldr	r0, [sp, #12]
    9f76:	58e9      	ldr	r1, [r5, r3]
    9f78:	f7f6 fffc 	bl	f74 <__aeabi_fmul>
    9f7c:	2100      	movs	r1, #0
    9f7e:	f7f6 fc8b 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    9f82:	230c      	movs	r3, #12
    9f84:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9f86:	2300      	movs	r3, #0
    9f88:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9f8a:	2392      	movs	r3, #146	; 0x92
    9f8c:	005b      	lsls	r3, r3, #1
    9f8e:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9f90:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9f92:	2100      	movs	r1, #0
    9f94:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    9f96:	44a2      	add	sl, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9f98:	44a9      	add	r9, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9f9a:	f7f6 fc4f 	bl	83c <__aeabi_fcmpeq>
    9f9e:	2800      	cmp	r0, #0
    9fa0:	d000      	beq.n	9fa4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1fa4>
    9fa2:	e134      	b.n	a20e <PSP_CNFG_MQX_KERNEL_LOGGING+0x220e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9fa4:	464b      	mov	r3, r9
    9fa6:	1c38      	adds	r0, r7, #0
    9fa8:	6b19      	ldr	r1, [r3, #48]	; 0x30
    9faa:	f7f6 ffe3 	bl	f74 <__aeabi_fmul>
    9fae:	2100      	movs	r1, #0
    9fb0:	f7f6 fc72 	bl	898 <__aeabi_fadd>
    9fb4:	4653      	mov	r3, sl
    9fb6:	1c04      	adds	r4, r0, #0
    9fb8:	4680      	mov	r8, r0
    9fba:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9fbc:	2100      	movs	r1, #0
    9fbe:	1c30      	adds	r0, r6, #0
    9fc0:	f7f6 fc3c 	bl	83c <__aeabi_fcmpeq>
    9fc4:	2800      	cmp	r0, #0
    9fc6:	d100      	bne.n	9fca <PSP_CNFG_MQX_KERNEL_LOGGING+0x1fca>
    9fc8:	e0c5      	b.n	a156 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2156>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9fca:	464a      	mov	r2, r9
    9fcc:	23f0      	movs	r3, #240	; 0xf0
    9fce:	9803      	ldr	r0, [sp, #12]
    9fd0:	58d1      	ldr	r1, [r2, r3]
    9fd2:	f7f6 ffcf 	bl	f74 <__aeabi_fmul>
    9fd6:	1c01      	adds	r1, r0, #0
    9fd8:	1c20      	adds	r0, r4, #0
    9fda:	f7f6 fc5d 	bl	898 <__aeabi_fadd>
    9fde:	4653      	mov	r3, sl
    9fe0:	c301      	stmia	r3!, {r0}
    9fe2:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9fe4:	2200      	movs	r2, #0
    9fe6:	4653      	mov	r3, sl
    9fe8:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    9fea:	2394      	movs	r3, #148	; 0x94
    9fec:	005b      	lsls	r3, r3, #1
    9fee:	469a      	mov	sl, r3
    9ff0:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9ff2:	4653      	mov	r3, sl
    9ff4:	1c38      	adds	r0, r7, #0
    9ff6:	6b19      	ldr	r1, [r3, #48]	; 0x30
    9ff8:	f7f6 ffbc 	bl	f74 <__aeabi_fmul>
    9ffc:	2100      	movs	r1, #0
    9ffe:	f7f6 fc4b 	bl	898 <__aeabi_fadd>
    a002:	464b      	mov	r3, r9
    a004:	1c04      	adds	r4, r0, #0
    a006:	4680      	mov	r8, r0
    a008:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a00a:	2100      	movs	r1, #0
    a00c:	1c30      	adds	r0, r6, #0
    a00e:	f7f6 fc15 	bl	83c <__aeabi_fcmpeq>
    a012:	2800      	cmp	r0, #0
    a014:	d100      	bne.n	a018 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2018>
    a016:	e0c6      	b.n	a1a6 <PSP_CNFG_MQX_KERNEL_LOGGING+0x21a6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a018:	23f0      	movs	r3, #240	; 0xf0
    a01a:	4652      	mov	r2, sl
    a01c:	9803      	ldr	r0, [sp, #12]
    a01e:	58d1      	ldr	r1, [r2, r3]
    a020:	f7f6 ffa8 	bl	f74 <__aeabi_fmul>
    a024:	1c01      	adds	r1, r0, #0
    a026:	1c20      	adds	r0, r4, #0
    a028:	f7f6 fc36 	bl	898 <__aeabi_fadd>
    a02c:	464b      	mov	r3, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a02e:	1c2c      	adds	r4, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a030:	c301      	stmia	r3!, {r0}
    a032:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a034:	2200      	movs	r2, #0
    a036:	464b      	mov	r3, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a038:	342d      	adds	r4, #45	; 0x2d
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a03a:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a03c:	34ff      	adds	r4, #255	; 0xff
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a03e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    a040:	1c38      	adds	r0, r7, #0
    a042:	f7f6 ff97 	bl	f74 <__aeabi_fmul>
    a046:	2100      	movs	r1, #0
    a048:	f7f6 fc26 	bl	898 <__aeabi_fadd>
    a04c:	4643      	mov	r3, r8
    a04e:	1c07      	adds	r7, r0, #0
    a050:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a052:	2100      	movs	r1, #0
    a054:	1c30      	adds	r0, r6, #0
    a056:	f7f6 fbf1 	bl	83c <__aeabi_fcmpeq>
    a05a:	2800      	cmp	r0, #0
    a05c:	d100      	bne.n	a060 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2060>
    a05e:	e0c8      	b.n	a1f2 <PSP_CNFG_MQX_KERNEL_LOGGING+0x21f2>
    a060:	e0d2      	b.n	a208 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2208>
    a062:	2300      	movs	r3, #0
    a064:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a066:	23bc      	movs	r3, #188	; 0xbc
    a068:	005b      	lsls	r3, r3, #1
    a06a:	58e9      	ldr	r1, [r5, r3]
    a06c:	1c30      	adds	r0, r6, #0
    a06e:	f7f6 ff81 	bl	f74 <__aeabi_fmul>
    a072:	4649      	mov	r1, r9
    a074:	f7f6 fc10 	bl	898 <__aeabi_fadd>
    a078:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a07a:	6020      	str	r0, [r4, #0]
    a07c:	58e9      	ldr	r1, [r5, r3]
    a07e:	4680      	mov	r8, r0
    a080:	9803      	ldr	r0, [sp, #12]
    a082:	f7f6 ff77 	bl	f74 <__aeabi_fmul>
    a086:	1c01      	adds	r1, r0, #0
    a088:	4640      	mov	r0, r8
    a08a:	f7f6 fc05 	bl	898 <__aeabi_fadd>
    a08e:	1c23      	adds	r3, r4, #0
    a090:	c301      	stmia	r3!, {r0}
    a092:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a094:	2300      	movs	r3, #0
    a096:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a098:	238e      	movs	r3, #142	; 0x8e
    a09a:	005b      	lsls	r3, r3, #1
    a09c:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a09e:	1c38      	adds	r0, r7, #0
    a0a0:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a0a2:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a0a4:	f7f6 fbca 	bl	83c <__aeabi_fcmpeq>
    a0a8:	2800      	cmp	r0, #0
    a0aa:	d101      	bne.n	a0b0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x20b0>
    a0ac:	f7fc fbf4 	bl	6898 <fRun_9DOF_GBY_KALMAN+0xb8c>
    a0b0:	2300      	movs	r3, #0
    a0b2:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a0b4:	4653      	mov	r3, sl
    a0b6:	1c30      	adds	r0, r6, #0
    a0b8:	6e19      	ldr	r1, [r3, #96]	; 0x60
    a0ba:	f7f6 ff5b 	bl	f74 <__aeabi_fmul>
    a0be:	4649      	mov	r1, r9
    a0c0:	f7f6 fbea 	bl	898 <__aeabi_fadd>
    a0c4:	4643      	mov	r3, r8
    a0c6:	4652      	mov	r2, sl
    a0c8:	6018      	str	r0, [r3, #0]
    a0ca:	23f0      	movs	r3, #240	; 0xf0
    a0cc:	1c04      	adds	r4, r0, #0
    a0ce:	58d1      	ldr	r1, [r2, r3]
    a0d0:	9803      	ldr	r0, [sp, #12]
    a0d2:	f7f6 ff4f 	bl	f74 <__aeabi_fmul>
    a0d6:	1c01      	adds	r1, r0, #0
    a0d8:	1c20      	adds	r0, r4, #0
    a0da:	f7f6 fbdd 	bl	898 <__aeabi_fadd>
    a0de:	4643      	mov	r3, r8
    a0e0:	c301      	stmia	r3!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a0e2:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a0e4:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a0e6:	4643      	mov	r3, r8
    a0e8:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a0ea:	2390      	movs	r3, #144	; 0x90
    a0ec:	005b      	lsls	r3, r3, #1
    a0ee:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a0f0:	1c38      	adds	r0, r7, #0
    a0f2:	1c11      	adds	r1, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a0f4:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a0f6:	f7f6 fba1 	bl	83c <__aeabi_fcmpeq>
    a0fa:	2800      	cmp	r0, #0
    a0fc:	d101      	bne.n	a102 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2102>
    a0fe:	f7ff f91a 	bl	9336 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1336>
    a102:	2300      	movs	r3, #0
    a104:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a106:	4653      	mov	r3, sl
    a108:	1c30      	adds	r0, r6, #0
    a10a:	6e19      	ldr	r1, [r3, #96]	; 0x60
    a10c:	f7f6 ff32 	bl	f74 <__aeabi_fmul>
    a110:	4641      	mov	r1, r8
    a112:	f7f6 fbc1 	bl	898 <__aeabi_fadd>
    a116:	464b      	mov	r3, r9
    a118:	4652      	mov	r2, sl
    a11a:	6018      	str	r0, [r3, #0]
    a11c:	23f0      	movs	r3, #240	; 0xf0
    a11e:	1c04      	adds	r4, r0, #0
    a120:	58d1      	ldr	r1, [r2, r3]
    a122:	9803      	ldr	r0, [sp, #12]
    a124:	f7f6 ff26 	bl	f74 <__aeabi_fmul>
    a128:	1c01      	adds	r1, r0, #0
    a12a:	1c20      	adds	r0, r4, #0
    a12c:	f7f6 fbb4 	bl	898 <__aeabi_fadd>
    a130:	464b      	mov	r3, r9
    a132:	c301      	stmia	r3!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a134:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a136:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a138:	464b      	mov	r3, r9
    a13a:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a13c:	2392      	movs	r3, #146	; 0x92
    a13e:	005b      	lsls	r3, r3, #1
    a140:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a142:	1c38      	adds	r0, r7, #0
    a144:	1c11      	adds	r1, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a146:	44a9      	add	r9, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a148:	f7f6 fb78 	bl	83c <__aeabi_fcmpeq>
    a14c:	2800      	cmp	r0, #0
    a14e:	d100      	bne.n	a152 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2152>
    a150:	e728      	b.n	9fa4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1fa4>
    a152:	2300      	movs	r3, #0
    a154:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a156:	464b      	mov	r3, r9
    a158:	1c30      	adds	r0, r6, #0
    a15a:	6e19      	ldr	r1, [r3, #96]	; 0x60
    a15c:	f7f6 ff0a 	bl	f74 <__aeabi_fmul>
    a160:	4641      	mov	r1, r8
    a162:	f7f6 fb99 	bl	898 <__aeabi_fadd>
    a166:	4653      	mov	r3, sl
    a168:	464a      	mov	r2, r9
    a16a:	6018      	str	r0, [r3, #0]
    a16c:	23f0      	movs	r3, #240	; 0xf0
    a16e:	1c04      	adds	r4, r0, #0
    a170:	58d1      	ldr	r1, [r2, r3]
    a172:	9803      	ldr	r0, [sp, #12]
    a174:	f7f6 fefe 	bl	f74 <__aeabi_fmul>
    a178:	1c01      	adds	r1, r0, #0
    a17a:	1c20      	adds	r0, r4, #0
    a17c:	f7f6 fb8c 	bl	898 <__aeabi_fadd>
    a180:	4653      	mov	r3, sl
    a182:	c301      	stmia	r3!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a184:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a186:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a188:	4653      	mov	r3, sl
    a18a:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a18c:	2394      	movs	r3, #148	; 0x94
    a18e:	005b      	lsls	r3, r3, #1
    a190:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a192:	1c38      	adds	r0, r7, #0
    a194:	1c11      	adds	r1, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a196:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a198:	f7f6 fb50 	bl	83c <__aeabi_fcmpeq>
    a19c:	2800      	cmp	r0, #0
    a19e:	d100      	bne.n	a1a2 <PSP_CNFG_MQX_KERNEL_LOGGING+0x21a2>
    a1a0:	e727      	b.n	9ff2 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1ff2>
    a1a2:	2300      	movs	r3, #0
    a1a4:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a1a6:	4653      	mov	r3, sl
    a1a8:	1c30      	adds	r0, r6, #0
    a1aa:	6e19      	ldr	r1, [r3, #96]	; 0x60
    a1ac:	f7f6 fee2 	bl	f74 <__aeabi_fmul>
    a1b0:	4641      	mov	r1, r8
    a1b2:	f7f6 fb71 	bl	898 <__aeabi_fadd>
    a1b6:	464b      	mov	r3, r9
    a1b8:	4652      	mov	r2, sl
    a1ba:	6018      	str	r0, [r3, #0]
    a1bc:	23f0      	movs	r3, #240	; 0xf0
    a1be:	1c04      	adds	r4, r0, #0
    a1c0:	58d1      	ldr	r1, [r2, r3]
    a1c2:	9803      	ldr	r0, [sp, #12]
    a1c4:	f7f6 fed6 	bl	f74 <__aeabi_fmul>
    a1c8:	1c01      	adds	r1, r0, #0
    a1ca:	1c20      	adds	r0, r4, #0
    a1cc:	f7f6 fb64 	bl	898 <__aeabi_fadd>
    a1d0:	464b      	mov	r3, r9
    a1d2:	c301      	stmia	r3!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a1d4:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a1d6:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a1d8:	1c2c      	adds	r4, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a1da:	464b      	mov	r3, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a1dc:	342d      	adds	r4, #45	; 0x2d
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a1de:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a1e0:	1c38      	adds	r0, r7, #0
    a1e2:	1c11      	adds	r1, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a1e4:	34ff      	adds	r4, #255	; 0xff
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a1e6:	f7f6 fb29 	bl	83c <__aeabi_fcmpeq>
    a1ea:	2800      	cmp	r0, #0
    a1ec:	d100      	bne.n	a1f0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x21f0>
    a1ee:	e726      	b.n	a03e <PSP_CNFG_MQX_KERNEL_LOGGING+0x203e>
    a1f0:	2700      	movs	r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a1f2:	6e21      	ldr	r1, [r4, #96]	; 0x60
    a1f4:	1c30      	adds	r0, r6, #0
    a1f6:	f7f6 febd 	bl	f74 <__aeabi_fmul>
    a1fa:	1c01      	adds	r1, r0, #0
    a1fc:	1c38      	adds	r0, r7, #0
    a1fe:	f7f6 fb4b 	bl	898 <__aeabi_fadd>
    a202:	4643      	mov	r3, r8
    a204:	1c07      	adds	r7, r0, #0
    a206:	6018      	str	r0, [r3, #0]
    a208:	9803      	ldr	r0, [sp, #12]
    a20a:	23f0      	movs	r3, #240	; 0xf0
    a20c:	e477      	b.n	9afe <PSP_CNFG_MQX_KERNEL_LOGGING+0x1afe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a20e:	1c30      	adds	r0, r6, #0
    a210:	2100      	movs	r1, #0
    a212:	f7f6 fb13 	bl	83c <__aeabi_fcmpeq>
    a216:	2800      	cmp	r0, #0
    a218:	d09b      	beq.n	a152 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2152>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a21a:	2385      	movs	r3, #133	; 0x85
    a21c:	009b      	lsls	r3, r3, #2
    a21e:	58e9      	ldr	r1, [r5, r3]
    a220:	9803      	ldr	r0, [sp, #12]
    a222:	f7f6 fea7 	bl	f74 <__aeabi_fmul>
    a226:	2100      	movs	r1, #0
    a228:	f7f6 fb36 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    a22c:	2310      	movs	r3, #16
    a22e:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a230:	2300      	movs	r3, #0
    a232:	6123      	str	r3, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a234:	2394      	movs	r3, #148	; 0x94
    a236:	005b      	lsls	r3, r3, #1
    a238:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a23a:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a23c:	2100      	movs	r1, #0
    a23e:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    a240:	44a1      	add	r9, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a242:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a244:	f7f6 fafa 	bl	83c <__aeabi_fcmpeq>
    a248:	2800      	cmp	r0, #0
    a24a:	d0aa      	beq.n	a1a2 <PSP_CNFG_MQX_KERNEL_LOGGING+0x21a2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a24c:	2386      	movs	r3, #134	; 0x86
    a24e:	009b      	lsls	r3, r3, #2
    a250:	58e9      	ldr	r1, [r5, r3]
    a252:	9803      	ldr	r0, [sp, #12]
    a254:	f7f6 fe8e 	bl	f74 <__aeabi_fmul>
    a258:	2100      	movs	r1, #0
    a25a:	f7f6 fb1d 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    a25e:	2314      	movs	r3, #20
    a260:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a262:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a264:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    a266:	44a0      	add	r8, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a268:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a26a:	1c2c      	adds	r4, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a26c:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a26e:	342d      	adds	r4, #45	; 0x2d
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a270:	1c19      	adds	r1, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a272:	34ff      	adds	r4, #255	; 0xff
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a274:	f7f6 fae2 	bl	83c <__aeabi_fcmpeq>
    a278:	2800      	cmp	r0, #0
    a27a:	d100      	bne.n	a27e <PSP_CNFG_MQX_KERNEL_LOGGING+0x227e>
    a27c:	e6df      	b.n	a03e <PSP_CNFG_MQX_KERNEL_LOGGING+0x203e>
    a27e:	2700      	movs	r7, #0
    a280:	e7c2      	b.n	a208 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2208>
    a282:	2300      	movs	r3, #0
    a284:	4698      	mov	r8, r3
    a286:	f7fd fdfa 	bl	7e7e <fRun_9DOF_GBY_KALMAN+0x2172>
    a28a:	2700      	movs	r7, #0
    a28c:	f7fd fee5 	bl	805a <PSP_CNFG_MQX_KERNEL_LOGGING+0x5a>
    a290:	2300      	movs	r3, #0
    a292:	4698      	mov	r8, r3
    a294:	f7fe fb6f 	bl	8976 <PSP_CNFG_MQX_KERNEL_LOGGING+0x976>
    a298:	2300      	movs	r3, #0
    a29a:	4698      	mov	r8, r3
    a29c:	f7fe fb2f 	bl	88fe <PSP_CNFG_MQX_KERNEL_LOGGING+0x8fe>
    a2a0:	2300      	movs	r3, #0
    a2a2:	4698      	mov	r8, r3
    a2a4:	f7fe faef 	bl	8886 <PSP_CNFG_MQX_KERNEL_LOGGING+0x886>
    a2a8:	2300      	movs	r3, #0
    a2aa:	4698      	mov	r8, r3
    a2ac:	f7fe faaf 	bl	880e <PSP_CNFG_MQX_KERNEL_LOGGING+0x80e>
    a2b0:	2300      	movs	r3, #0
    a2b2:	4698      	mov	r8, r3
    a2b4:	f7fd fe59 	bl	7f6a <fRun_9DOF_GBY_KALMAN+0x225e>
    a2b8:	2300      	movs	r3, #0
    a2ba:	4698      	mov	r8, r3
    a2bc:	f7fd fe1a 	bl	7ef4 <fRun_9DOF_GBY_KALMAN+0x21e8>
    a2c0:	2300      	movs	r3, #0
    a2c2:	4698      	mov	r8, r3
    a2c4:	f7fd fe8d 	bl	7fe2 <fRun_9DOF_GBY_KALMAN+0x22d6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    a2c8:	230c      	movs	r3, #12
    a2ca:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a2cc:	2300      	movs	r3, #0
    a2ce:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a2d0:	2392      	movs	r3, #146	; 0x92
    a2d2:	005b      	lsls	r3, r3, #1
    a2d4:	469c      	mov	ip, r3
    a2d6:	44ac      	add	ip, r5
    a2d8:	4663      	mov	r3, ip
    a2da:	9302      	str	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a2dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a2de:	4640      	mov	r0, r8
    a2e0:	58e9      	ldr	r1, [r5, r3]
    a2e2:	f7f6 fe47 	bl	f74 <__aeabi_fmul>
    a2e6:	2100      	movs	r1, #0
    a2e8:	f7f6 fad6 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a2ec:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a2ee:	4681      	mov	r9, r0
    a2f0:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a2f2:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    a2f4:	44a2      	add	sl, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a2f6:	f7f6 faa1 	bl	83c <__aeabi_fcmpeq>
    a2fa:	2800      	cmp	r0, #0
    a2fc:	d000      	beq.n	a300 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2300>
    a2fe:	e0e9      	b.n	a4d4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x24d4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a300:	9b02      	ldr	r3, [sp, #8]
    a302:	1c38      	adds	r0, r7, #0
    a304:	6b19      	ldr	r1, [r3, #48]	; 0x30
    a306:	f7f6 fe35 	bl	f74 <__aeabi_fmul>
    a30a:	1c01      	adds	r1, r0, #0
    a30c:	4648      	mov	r0, r9
    a30e:	f7f6 fac3 	bl	898 <__aeabi_fadd>
    a312:	4653      	mov	r3, sl
    a314:	4681      	mov	r9, r0
    a316:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a318:	2100      	movs	r1, #0
    a31a:	1c30      	adds	r0, r6, #0
    a31c:	f7f6 fa8e 	bl	83c <__aeabi_fcmpeq>
    a320:	2800      	cmp	r0, #0
    a322:	d100      	bne.n	a326 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2326>
    a324:	e089      	b.n	a43a <PSP_CNFG_MQX_KERNEL_LOGGING+0x243a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    a326:	2304      	movs	r3, #4
    a328:	4453      	add	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a32a:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    a32c:	469b      	mov	fp, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a32e:	4653      	mov	r3, sl
    a330:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a332:	2394      	movs	r3, #148	; 0x94
    a334:	005b      	lsls	r3, r3, #1
    a336:	469c      	mov	ip, r3
    a338:	44ac      	add	ip, r5
    a33a:	4663      	mov	r3, ip
    a33c:	9302      	str	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a33e:	2394      	movs	r3, #148	; 0x94
    a340:	005b      	lsls	r3, r3, #1
    a342:	58e9      	ldr	r1, [r5, r3]
    a344:	4640      	mov	r0, r8
    a346:	f7f6 fe15 	bl	f74 <__aeabi_fmul>
    a34a:	2100      	movs	r1, #0
    a34c:	f7f6 faa4 	bl	898 <__aeabi_fadd>
    a350:	4653      	mov	r3, sl
    a352:	4681      	mov	r9, r0
    a354:	6058      	str	r0, [r3, #4]
    a356:	e096      	b.n	a486 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2486>
    a358:	23bc      	movs	r3, #188	; 0xbc
    a35a:	005b      	lsls	r3, r3, #1
    a35c:	58e9      	ldr	r1, [r5, r3]
    a35e:	1c30      	adds	r0, r6, #0
    a360:	f7f6 fe08 	bl	f74 <__aeabi_fmul>
    a364:	4651      	mov	r1, sl
    a366:	f7f6 fa97 	bl	898 <__aeabi_fadd>
    a36a:	1c23      	adds	r3, r4, #0
    a36c:	c301      	stmia	r3!, {r0}
    a36e:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a370:	2300      	movs	r3, #0
    a372:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a374:	238e      	movs	r3, #142	; 0x8e
    a376:	005b      	lsls	r3, r3, #1
    a378:	469b      	mov	fp, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a37a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a37c:	4640      	mov	r0, r8
    a37e:	58e9      	ldr	r1, [r5, r3]
    a380:	f7f6 fdf8 	bl	f74 <__aeabi_fmul>
    a384:	2100      	movs	r1, #0
    a386:	f7f6 fa87 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a38a:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a38c:	4681      	mov	r9, r0
    a38e:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a390:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a392:	44ab      	add	fp, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a394:	f7f6 fa52 	bl	83c <__aeabi_fcmpeq>
    a398:	2800      	cmp	r0, #0
    a39a:	d101      	bne.n	a3a0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x23a0>
    a39c:	f7fc fa0d 	bl	67ba <fRun_9DOF_GBY_KALMAN+0xaae>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a3a0:	465b      	mov	r3, fp
    a3a2:	1c30      	adds	r0, r6, #0
    a3a4:	6e19      	ldr	r1, [r3, #96]	; 0x60
    a3a6:	f7f6 fde5 	bl	f74 <__aeabi_fmul>
    a3aa:	4649      	mov	r1, r9
    a3ac:	f7f6 fa74 	bl	898 <__aeabi_fadd>
    a3b0:	4653      	mov	r3, sl
    a3b2:	c301      	stmia	r3!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a3b4:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a3b6:	469b      	mov	fp, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a3b8:	4653      	mov	r3, sl
    a3ba:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a3bc:	2390      	movs	r3, #144	; 0x90
    a3be:	005b      	lsls	r3, r3, #1
    a3c0:	469c      	mov	ip, r3
    a3c2:	44ac      	add	ip, r5
    a3c4:	4663      	mov	r3, ip
    a3c6:	9302      	str	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a3c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a3ca:	4640      	mov	r0, r8
    a3cc:	58e9      	ldr	r1, [r5, r3]
    a3ce:	f7f6 fdd1 	bl	f74 <__aeabi_fmul>
    a3d2:	2100      	movs	r1, #0
    a3d4:	f7f6 fa60 	bl	898 <__aeabi_fadd>
    a3d8:	4653      	mov	r3, sl
    a3da:	4681      	mov	r9, r0
    a3dc:	6058      	str	r0, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a3de:	2100      	movs	r1, #0
    a3e0:	1c38      	adds	r0, r7, #0
    a3e2:	f7f6 fa2b 	bl	83c <__aeabi_fcmpeq>
    a3e6:	2800      	cmp	r0, #0
    a3e8:	d101      	bne.n	a3ee <PSP_CNFG_MQX_KERNEL_LOGGING+0x23ee>
    a3ea:	f7ff f8a2 	bl	9532 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1532>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a3ee:	9b02      	ldr	r3, [sp, #8]
    a3f0:	1c30      	adds	r0, r6, #0
    a3f2:	6e19      	ldr	r1, [r3, #96]	; 0x60
    a3f4:	f7f6 fdbe 	bl	f74 <__aeabi_fmul>
    a3f8:	4649      	mov	r1, r9
    a3fa:	f7f6 fa4d 	bl	898 <__aeabi_fadd>
    a3fe:	465b      	mov	r3, fp
    a400:	c301      	stmia	r3!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a402:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a404:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a406:	465b      	mov	r3, fp
    a408:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a40a:	2392      	movs	r3, #146	; 0x92
    a40c:	005b      	lsls	r3, r3, #1
    a40e:	469c      	mov	ip, r3
    a410:	44ac      	add	ip, r5
    a412:	4663      	mov	r3, ip
    a414:	9302      	str	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a416:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a418:	4640      	mov	r0, r8
    a41a:	58e9      	ldr	r1, [r5, r3]
    a41c:	f7f6 fdaa 	bl	f74 <__aeabi_fmul>
    a420:	2100      	movs	r1, #0
    a422:	f7f6 fa39 	bl	898 <__aeabi_fadd>
    a426:	465b      	mov	r3, fp
    a428:	4681      	mov	r9, r0
    a42a:	6058      	str	r0, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a42c:	2100      	movs	r1, #0
    a42e:	1c38      	adds	r0, r7, #0
    a430:	f7f6 fa04 	bl	83c <__aeabi_fcmpeq>
    a434:	2800      	cmp	r0, #0
    a436:	d100      	bne.n	a43a <PSP_CNFG_MQX_KERNEL_LOGGING+0x243a>
    a438:	e762      	b.n	a300 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2300>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a43a:	9b02      	ldr	r3, [sp, #8]
    a43c:	1c30      	adds	r0, r6, #0
    a43e:	6e19      	ldr	r1, [r3, #96]	; 0x60
    a440:	f7f6 fd98 	bl	f74 <__aeabi_fmul>
    a444:	4649      	mov	r1, r9
    a446:	f7f6 fa27 	bl	898 <__aeabi_fadd>
    a44a:	4653      	mov	r3, sl
    a44c:	c301      	stmia	r3!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a44e:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a450:	469b      	mov	fp, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a452:	4653      	mov	r3, sl
    a454:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a456:	2394      	movs	r3, #148	; 0x94
    a458:	005b      	lsls	r3, r3, #1
    a45a:	469c      	mov	ip, r3
    a45c:	44ac      	add	ip, r5
    a45e:	4663      	mov	r3, ip
    a460:	9302      	str	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a462:	2394      	movs	r3, #148	; 0x94
    a464:	005b      	lsls	r3, r3, #1
    a466:	58e9      	ldr	r1, [r5, r3]
    a468:	4640      	mov	r0, r8
    a46a:	f7f6 fd83 	bl	f74 <__aeabi_fmul>
    a46e:	2100      	movs	r1, #0
    a470:	f7f6 fa12 	bl	898 <__aeabi_fadd>
    a474:	4653      	mov	r3, sl
    a476:	4681      	mov	r9, r0
    a478:	6058      	str	r0, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a47a:	2100      	movs	r1, #0
    a47c:	1c38      	adds	r0, r7, #0
    a47e:	f7f6 f9dd 	bl	83c <__aeabi_fcmpeq>
    a482:	2800      	cmp	r0, #0
    a484:	d148      	bne.n	a518 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2518>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a486:	9b02      	ldr	r3, [sp, #8]
    a488:	1c38      	adds	r0, r7, #0
    a48a:	6b19      	ldr	r1, [r3, #48]	; 0x30
    a48c:	f7f6 fd72 	bl	f74 <__aeabi_fmul>
    a490:	1c01      	adds	r1, r0, #0
    a492:	4648      	mov	r0, r9
    a494:	f7f6 fa00 	bl	898 <__aeabi_fadd>
    a498:	465b      	mov	r3, fp
    a49a:	4681      	mov	r9, r0
    a49c:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a49e:	2100      	movs	r1, #0
    a4a0:	1c30      	adds	r0, r6, #0
    a4a2:	f7f6 f9cb 	bl	83c <__aeabi_fcmpeq>
    a4a6:	2800      	cmp	r0, #0
    a4a8:	d036      	beq.n	a518 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2518>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    a4aa:	2304      	movs	r3, #4
    a4ac:	445b      	add	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a4ae:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    a4b0:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a4b2:	465b      	mov	r3, fp
    a4b4:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a4b6:	2396      	movs	r3, #150	; 0x96
    a4b8:	005b      	lsls	r3, r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a4ba:	58e9      	ldr	r1, [r5, r3]
    a4bc:	4640      	mov	r0, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a4be:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a4c0:	f7f6 fd58 	bl	f74 <__aeabi_fmul>
    a4c4:	2100      	movs	r1, #0
    a4c6:	f7f6 f9e7 	bl	898 <__aeabi_fadd>
    a4ca:	465b      	mov	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a4cc:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a4ce:	4680      	mov	r8, r0
    a4d0:	6058      	str	r0, [r3, #4]
    a4d2:	e043      	b.n	a55c <PSP_CNFG_MQX_KERNEL_LOGGING+0x255c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a4d4:	1c30      	adds	r0, r6, #0
    a4d6:	2100      	movs	r1, #0
    a4d8:	f7f6 f9b0 	bl	83c <__aeabi_fcmpeq>
    a4dc:	2800      	cmp	r0, #0
    a4de:	d0ac      	beq.n	a43a <PSP_CNFG_MQX_KERNEL_LOGGING+0x243a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    a4e0:	2310      	movs	r3, #16
    a4e2:	469b      	mov	fp, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a4e4:	2300      	movs	r3, #0
    a4e6:	6123      	str	r3, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a4e8:	2394      	movs	r3, #148	; 0x94
    a4ea:	005b      	lsls	r3, r3, #1
    a4ec:	469c      	mov	ip, r3
    a4ee:	44ac      	add	ip, r5
    a4f0:	4663      	mov	r3, ip
    a4f2:	9302      	str	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a4f4:	2394      	movs	r3, #148	; 0x94
    a4f6:	005b      	lsls	r3, r3, #1
    a4f8:	58e9      	ldr	r1, [r5, r3]
    a4fa:	4640      	mov	r0, r8
    a4fc:	f7f6 fd3a 	bl	f74 <__aeabi_fmul>
    a500:	2100      	movs	r1, #0
    a502:	f7f6 f9c9 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a506:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a508:	4681      	mov	r9, r0
    a50a:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a50c:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    a50e:	44a3      	add	fp, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a510:	f7f6 f994 	bl	83c <__aeabi_fcmpeq>
    a514:	2800      	cmp	r0, #0
    a516:	d141      	bne.n	a59c <PSP_CNFG_MQX_KERNEL_LOGGING+0x259c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a518:	9b02      	ldr	r3, [sp, #8]
    a51a:	1c30      	adds	r0, r6, #0
    a51c:	6e19      	ldr	r1, [r3, #96]	; 0x60
    a51e:	f7f6 fd29 	bl	f74 <__aeabi_fmul>
    a522:	4649      	mov	r1, r9
    a524:	f7f6 f9b8 	bl	898 <__aeabi_fadd>
    a528:	465b      	mov	r3, fp
    a52a:	c301      	stmia	r3!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a52c:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a52e:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a530:	465b      	mov	r3, fp
    a532:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a534:	2396      	movs	r3, #150	; 0x96
    a536:	005b      	lsls	r3, r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a538:	58e9      	ldr	r1, [r5, r3]
    a53a:	4640      	mov	r0, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a53c:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a53e:	f7f6 fd19 	bl	f74 <__aeabi_fmul>
    a542:	2100      	movs	r1, #0
    a544:	f7f6 f9a8 	bl	898 <__aeabi_fadd>
    a548:	465b      	mov	r3, fp
    a54a:	4680      	mov	r8, r0
    a54c:	6058      	str	r0, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a54e:	2100      	movs	r1, #0
    a550:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a552:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a554:	f7f6 f972 	bl	83c <__aeabi_fcmpeq>
    a558:	2800      	cmp	r0, #0
    a55a:	d113      	bne.n	a584 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2584>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a55c:	4653      	mov	r3, sl
    a55e:	1c38      	adds	r0, r7, #0
    a560:	6b19      	ldr	r1, [r3, #48]	; 0x30
    a562:	f7f6 fd07 	bl	f74 <__aeabi_fmul>
    a566:	1c01      	adds	r1, r0, #0
    a568:	4640      	mov	r0, r8
    a56a:	f7f6 f995 	bl	898 <__aeabi_fadd>
    a56e:	464b      	mov	r3, r9
    a570:	4680      	mov	r8, r0
    a572:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a574:	2100      	movs	r1, #0
    a576:	1c30      	adds	r0, r6, #0
    a578:	f7f6 f960 	bl	83c <__aeabi_fcmpeq>
    a57c:	2800      	cmp	r0, #0
    a57e:	d001      	beq.n	a584 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2584>
    a580:	f7fc fb15 	bl	6bae <fRun_9DOF_GBY_KALMAN+0xea2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a584:	4653      	mov	r3, sl
    a586:	1c30      	adds	r0, r6, #0
    a588:	6e19      	ldr	r1, [r3, #96]	; 0x60
    a58a:	f7f6 fcf3 	bl	f74 <__aeabi_fmul>
    a58e:	4641      	mov	r1, r8
    a590:	f7f6 f982 	bl	898 <__aeabi_fadd>
    a594:	464b      	mov	r3, r9
    a596:	6018      	str	r0, [r3, #0]
    a598:	f7fc fb09 	bl	6bae <fRun_9DOF_GBY_KALMAN+0xea2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    a59c:	2314      	movs	r3, #20
    a59e:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a5a0:	2300      	movs	r3, #0
    a5a2:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a5a4:	2396      	movs	r3, #150	; 0x96
    a5a6:	005b      	lsls	r3, r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a5a8:	58e9      	ldr	r1, [r5, r3]
    a5aa:	4640      	mov	r0, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a5ac:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a5ae:	f7f6 fce1 	bl	f74 <__aeabi_fmul>
    a5b2:	2100      	movs	r1, #0
    a5b4:	f7f6 f970 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a5b8:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a5ba:	4680      	mov	r8, r0
    a5bc:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a5be:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1423
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfK12x6ij for the next iteration of j
			pfK12x6ij++;
    a5c0:	44a1      	add	r9, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a5c2:	44aa      	add	sl, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a5c4:	f7f6 f93a 	bl	83c <__aeabi_fcmpeq>
    a5c8:	2800      	cmp	r0, #0
    a5ca:	d0c7      	beq.n	a55c <PSP_CNFG_MQX_KERNEL_LOGGING+0x255c>
    a5cc:	f7fc faef 	bl	6bae <fRun_9DOF_GBY_KALMAN+0xea2>
    a5d0:	2300      	movs	r3, #0
    a5d2:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a5d4:	23bc      	movs	r3, #188	; 0xbc
    a5d6:	005b      	lsls	r3, r3, #1
    a5d8:	58e9      	ldr	r1, [r5, r3]
    a5da:	1c30      	adds	r0, r6, #0
    a5dc:	f7f6 fcca 	bl	f74 <__aeabi_fmul>
    a5e0:	4641      	mov	r1, r8
    a5e2:	f7f6 f959 	bl	898 <__aeabi_fadd>
    a5e6:	1c23      	adds	r3, r4, #0
    a5e8:	c301      	stmia	r3!, {r0}
    a5ea:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a5ec:	2300      	movs	r3, #0
    a5ee:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a5f0:	238e      	movs	r3, #142	; 0x8e
    a5f2:	005b      	lsls	r3, r3, #1
    a5f4:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a5f6:	1c38      	adds	r0, r7, #0
    a5f8:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1406

			// initialize pftmpA12x6ik for current i, k=0
			pftmpA12x6ik = ftmpA12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    a5fa:	44a8      	add	r8, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a5fc:	f7f6 f91e 	bl	83c <__aeabi_fcmpeq>
    a600:	2800      	cmp	r0, #0
    a602:	d001      	beq.n	a608 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2608>
    a604:	f7fe fed9 	bl	93ba <PSP_CNFG_MQX_KERNEL_LOGGING+0x13ba>
    a608:	f7fc f84e 	bl	66a8 <fRun_9DOF_GBY_KALMAN+0x99c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1125
	int8 iPivot[6];

	// do a reset and return if requested
	if (pthisSV->resetflag)
	{
		fInit_9DOF_GBY_KALMAN(pthisSV, THISCOORDSYSTEM, SENSORFS, OVERSAMPLE_RATIO);
    a60c:	2101      	movs	r1, #1
    a60e:	22c8      	movs	r2, #200	; 0xc8
    a610:	2308      	movs	r3, #8
    a612:	f7f9 fca7 	bl	3f64 <fInit_9DOF_GBY_KALMAN>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1126
		return;
    a616:	f7fd f997 	bl	7948 <fRun_9DOF_GBY_KALMAN+0x1c3c>
    a61a:	4b25      	ldr	r3, [pc, #148]	; (a6b0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x26b0>)
    a61c:	445b      	add	r3, fp
    a61e:	9317      	str	r3, [sp, #92]	; 0x5c
    a620:	f7fb fc42 	bl	5ea8 <fRun_9DOF_GBY_KALMAN+0x19c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1618

				// limit the inclination angle between limits to prevent runaway
				if (fsindelta > SINDELTAMAX)
				{
					fsindelta = SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
    a624:	4d23      	ldr	r5, [pc, #140]	; (a6b4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x26b4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1617
				fcosdelta = fadj * ftmp;

				// limit the inclination angle between limits to prevent runaway
				if (fsindelta > SINDELTAMAX)
				{
					fsindelta = SINDELTAMAX;
    a626:	4c24      	ldr	r4, [pc, #144]	; (a6b8 <PSP_CNFG_MQX_KERNEL_LOGGING+0x26b8>)
    a628:	f7fe fe10 	bl	924c <PSP_CNFG_MQX_KERNEL_LOGGING+0x124c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1139
	if (pthisMagCal->iValidMagCal && !pthisSV->iFirstOrientationLock)
	{
		// get the 6DOF orientation matrix and initial inclination angle
		if (ithisCoordSystem == NED)
		{
			feCompassNED(pthisSV->fRPl, &(pthisSV->fDeltaPl), pthisMag->fBcFast, pthisAccel->fGpFast);
    a62c:	4659      	mov	r1, fp
    a62e:	464a      	mov	r2, r9
    a630:	3314      	adds	r3, #20
    a632:	445b      	add	r3, fp
    a634:	1c18      	adds	r0, r3, #0
    a636:	930a      	str	r3, [sp, #40]	; 0x28
    a638:	9b08      	ldr	r3, [sp, #32]
    a63a:	31b8      	adds	r1, #184	; 0xb8
    a63c:	3224      	adds	r2, #36	; 0x24
    a63e:	330c      	adds	r3, #12
    a640:	f003 f86a 	bl	d718 <feCompassNED>
    a644:	980a      	ldr	r0, [sp, #40]	; 0x28
    a646:	f7fb fb96 	bl	5d76 <fRun_9DOF_GBY_KALMAN+0x6a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1573

				// limit the inclination angle between limits to prevent runaway
				if (fsindelta > SINDELTAMAX)
				{
					fsindelta = SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
    a64a:	4c1a      	ldr	r4, [pc, #104]	; (a6b4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x26b4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1572
				fcosdelta = fadj * ftmp;

				// limit the inclination angle between limits to prevent runaway
				if (fsindelta > SINDELTAMAX)
				{
					fsindelta = SINDELTAMAX;
    a64c:	4d1a      	ldr	r5, [pc, #104]	; (a6b8 <PSP_CNFG_MQX_KERNEL_LOGGING+0x26b8>)
    a64e:	f7ff f8bd 	bl	97cc <PSP_CNFG_MQX_KERNEL_LOGGING+0x17cc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1143
		{
			feCompassNED(pthisSV->fRPl, &(pthisSV->fDeltaPl), pthisMag->fBcFast, pthisAccel->fGpFast);
		}
		else if (ithisCoordSystem == ANDROID)
		{
			feCompassAndroid(pthisSV->fRPl, &(pthisSV->fDeltaPl), pthisMag->fBcFast, pthisAccel->fGpFast);
    a652:	4659      	mov	r1, fp
    a654:	464a      	mov	r2, r9
    a656:	3313      	adds	r3, #19
    a658:	445b      	add	r3, fp
    a65a:	1c18      	adds	r0, r3, #0
    a65c:	930a      	str	r3, [sp, #40]	; 0x28
    a65e:	9b08      	ldr	r3, [sp, #32]
    a660:	31b8      	adds	r1, #184	; 0xb8
    a662:	3224      	adds	r2, #36	; 0x24
    a664:	330c      	adds	r3, #12
    a666:	f003 f9d7 	bl	da18 <feCompassAndroid>
    a66a:	980a      	ldr	r0, [sp, #40]	; 0x28
    a66c:	f7fb fb83 	bl	5d76 <fRun_9DOF_GBY_KALMAN+0x6a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1578
					fcosdelta = COSDELTAMAX;
				}
				else if (fsindelta < -SINDELTAMAX)
				{
					fsindelta = -SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
    a670:	4c10      	ldr	r4, [pc, #64]	; (a6b4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x26b4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1577
					fsindelta = SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
				}
				else if (fsindelta < -SINDELTAMAX)
				{
					fsindelta = -SINDELTAMAX;
    a672:	4d12      	ldr	r5, [pc, #72]	; (a6bc <PSP_CNFG_MQX_KERNEL_LOGGING+0x26bc>)
    a674:	f7ff f8aa 	bl	97cc <PSP_CNFG_MQX_KERNEL_LOGGING+0x17cc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1623
					fcosdelta = COSDELTAMAX;
				}
				else if (fsindelta < -SINDELTAMAX)
				{
					fsindelta = -SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
    a678:	4d0e      	ldr	r5, [pc, #56]	; (a6b4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x26b4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1622
					fsindelta = SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
				}
				else if (fsindelta < -SINDELTAMAX)
				{
					fsindelta = -SINDELTAMAX;
    a67a:	4c10      	ldr	r4, [pc, #64]	; (a6bc <PSP_CNFG_MQX_KERNEL_LOGGING+0x26bc>)
    a67c:	f7fe fde6 	bl	924c <PSP_CNFG_MQX_KERNEL_LOGGING+0x124c>
    a680:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1602
			// the north pointing component fadj must always be non-negative
			fopp = -(pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z]);
			fadj = pthisSV->fmGl[Y] - pthisSV->fdErrGlPl[Y];
			if (fadj < 0.0F)
			{
				fadj = 0.0F;
    a682:	1c35      	adds	r5, r6, #0
    a684:	f7fe fdb2 	bl	91ec <PSP_CNFG_MQX_KERNEL_LOGGING+0x11ec>
    a688:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1557
			// the north pointing component fadj must always be non-negative
			fopp = pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z];
			fadj = pthisSV->fmGl[X] - pthisSV->fdErrGlPl[X];
			if (fadj < 0.0F)
			{
				fadj = 0.0F;
    a68a:	1c34      	adds	r4, r6, #0
    a68c:	f7ff f870 	bl	9770 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1770>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1147
		{
			feCompassAndroid(pthisSV->fRPl, &(pthisSV->fDeltaPl), pthisMag->fBcFast, pthisAccel->fGpFast);
		}
		else if (ithisCoordSystem == WIN8)
		{
			feCompassWin8(pthisSV->fRPl, &(pthisSV->fDeltaPl), pthisMag->fBcFast, pthisAccel->fGpFast);
    a690:	2314      	movs	r3, #20
    a692:	4659      	mov	r1, fp
    a694:	464a      	mov	r2, r9
    a696:	445b      	add	r3, fp
    a698:	1c18      	adds	r0, r3, #0
    a69a:	930a      	str	r3, [sp, #40]	; 0x28
    a69c:	9b08      	ldr	r3, [sp, #32]
    a69e:	31b8      	adds	r1, #184	; 0xb8
    a6a0:	3224      	adds	r2, #36	; 0x24
    a6a2:	330c      	adds	r3, #12
    a6a4:	f003 fb3a 	bl	dd1c <feCompassWin8>
    a6a8:	980a      	ldr	r0, [sp, #40]	; 0x28
    a6aa:	f7fb fb64 	bl	5d76 <fRun_9DOF_GBY_KALMAN+0x6a>
    a6ae:	46c0      	nop			; (mov r8, r8)
    a6b0:	000007fc 	.word	0x000007fc
    a6b4:	3ed8616d 	.word	0x3ed8616d
    a6b8:	3f6803ca 	.word	0x3f6803ca
    a6bc:	bf6803ca 	.word	0xbf6803ca

0000a6c0 <fInitMagCalibration>:
fInitMagCalibration():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:41
#include "string.h"
#include "include_all.h"

// function resets the magnetometer buffer and magnetic calibration
void fInitMagCalibration(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer)
{
    a6c0:	b570      	push	{r4, r5, r6, lr}
    a6c2:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:45
	int8 j, k;   // loop counters

	// initialize the calibration hard and soft iron estimate to null
	f3x3matrixAeqI(pthisMagCal->finvW);
    a6c4:	300c      	adds	r0, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:41
#include "string.h"
#include "include_all.h"

// function resets the magnetometer buffer and magnetic calibration
void fInitMagCalibration(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer)
{
    a6c6:	1c0d      	adds	r5, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:45
	int8 j, k;   // loop counters

	// initialize the calibration hard and soft iron estimate to null
	f3x3matrixAeqI(pthisMagCal->finvW);
    a6c8:	f001 ff7a 	bl	c5c0 <f3x3matrixAeqI>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:46
	pthisMagCal->fV[X] = pthisMagCal->fV[Y] = pthisMagCal->fV[Z] = 0.0F;
    a6cc:	2300      	movs	r3, #0
    a6ce:	60a3      	str	r3, [r4, #8]
    a6d0:	6063      	str	r3, [r4, #4]
    a6d2:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:47
	pthisMagCal->fB = DEFAULTB;
    a6d4:	4b20      	ldr	r3, [pc, #128]	; (a758 <fInitMagCalibration+0x98>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:50
	pthisMagCal->fFourBsq = 4.0F * pthisMagCal->fB * pthisMagCal->fB;
	pthisMagCal->fFitErrorpc = 1000.0F;
	pthisMagCal->iValidMagCal = 0;
    a6d6:	4a21      	ldr	r2, [pc, #132]	; (a75c <fInitMagCalibration+0x9c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:47
	int8 j, k;   // loop counters

	// initialize the calibration hard and soft iron estimate to null
	f3x3matrixAeqI(pthisMagCal->finvW);
	pthisMagCal->fV[X] = pthisMagCal->fV[Y] = pthisMagCal->fV[Z] = 0.0F;
	pthisMagCal->fB = DEFAULTB;
    a6d8:	6323      	str	r3, [r4, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:48
	pthisMagCal->fFourBsq = 4.0F * pthisMagCal->fB * pthisMagCal->fB;
    a6da:	4b21      	ldr	r3, [pc, #132]	; (a760 <fInitMagCalibration+0xa0>)
    a6dc:	6363      	str	r3, [r4, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:49
	pthisMagCal->fFitErrorpc = 1000.0F;
    a6de:	4b21      	ldr	r3, [pc, #132]	; (a764 <fInitMagCalibration+0xa4>)
    a6e0:	63a3      	str	r3, [r4, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:50
	pthisMagCal->iValidMagCal = 0;
    a6e2:	2300      	movs	r3, #0
    a6e4:	54a3      	strb	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:51
	pthisMagCal->iCalInProgress = 0;
    a6e6:	4a20      	ldr	r2, [pc, #128]	; (a768 <fInitMagCalibration+0xa8>)
    a6e8:	54a3      	strb	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:52
	pthisMagCal->iMagCalHasRun = 0;
    a6ea:	4a20      	ldr	r2, [pc, #128]	; (a76c <fInitMagCalibration+0xac>)
    a6ec:	54a3      	strb	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:55

	// set magnetic buffer index to invalid value -1 to denote invalid
	pthisMagBuffer->iMagBufferCount = 0;
    a6ee:	4a20      	ldr	r2, [pc, #128]	; (a770 <fInitMagCalibration+0xb0>)
    a6f0:	52ab      	strh	r3, [r5, r2]
    a6f2:	23d8      	movs	r3, #216	; 0xd8
    a6f4:	00db      	lsls	r3, r3, #3
    a6f6:	18ec      	adds	r4, r5, r3
    a6f8:	23b4      	movs	r3, #180	; 0xb4
    a6fa:	011b      	lsls	r3, r3, #4
    a6fc:	18ee      	adds	r6, r5, r3
    a6fe:	1c20      	adds	r0, r4, #0
    a700:	21ff      	movs	r1, #255	; 0xff
    a702:	2260      	movs	r2, #96	; 0x60
    a704:	3460      	adds	r4, #96	; 0x60
    a706:	f009 ff42 	bl	1458e <memset>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:56
	for (j = 0; j < MAGBUFFSIZEX; j++)
    a70a:	42b4      	cmp	r4, r6
    a70c:	d1f7      	bne.n	a6fe <fInitMagCalibration+0x3e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:70
	// entries cover the range 100 * tan(-PI/2 + PI/MAGBUFFSIZEX), 100 * tan(-PI/2 + 2*PI/MAGBUFFSIZEX) to
	// 100 * tan(-PI/2 + (MAGBUFFSIZEX - 1) * PI/MAGBUFFSIZEX).
	// for MAGBUFFSIZEX=12, the entries range in value from -373 to +373
	for (j = 0; j < (MAGBUFFSIZEX - 1); j++)
	{
		pthisMagBuffer->tanarray[j] = (int16) (100.0F * tanf(PI * (-0.5F + (float) (j + 1) / MAGBUFFSIZEX)));
    a70e:	23b4      	movs	r3, #180	; 0xb4
    a710:	4a18      	ldr	r2, [pc, #96]	; (a774 <fInitMagCalibration+0xb4>)
    a712:	011b      	lsls	r3, r3, #4
    a714:	52ea      	strh	r2, [r5, r3]
    a716:	4b18      	ldr	r3, [pc, #96]	; (a778 <fInitMagCalibration+0xb8>)
    a718:	32c8      	adds	r2, #200	; 0xc8
    a71a:	52ea      	strh	r2, [r5, r3]
    a71c:	4b17      	ldr	r3, [pc, #92]	; (a77c <fInitMagCalibration+0xbc>)
    a71e:	3249      	adds	r2, #73	; 0x49
    a720:	52ea      	strh	r2, [r5, r3]
    a722:	4b17      	ldr	r3, [pc, #92]	; (a780 <fInitMagCalibration+0xc0>)
    a724:	322b      	adds	r2, #43	; 0x2b
    a726:	52ea      	strh	r2, [r5, r3]
    a728:	4b16      	ldr	r3, [pc, #88]	; (a784 <fInitMagCalibration+0xc4>)
    a72a:	321f      	adds	r2, #31
    a72c:	52ea      	strh	r2, [r5, r3]
    a72e:	2200      	movs	r2, #0
    a730:	4b15      	ldr	r3, [pc, #84]	; (a788 <fInitMagCalibration+0xc8>)
    a732:	52ea      	strh	r2, [r5, r3]
    a734:	4b15      	ldr	r3, [pc, #84]	; (a78c <fInitMagCalibration+0xcc>)
    a736:	321a      	adds	r2, #26
    a738:	52ea      	strh	r2, [r5, r3]
    a73a:	4b15      	ldr	r3, [pc, #84]	; (a790 <fInitMagCalibration+0xd0>)
    a73c:	321f      	adds	r2, #31
    a73e:	52ea      	strh	r2, [r5, r3]
    a740:	322b      	adds	r2, #43	; 0x2b
    a742:	3302      	adds	r3, #2
    a744:	52ea      	strh	r2, [r5, r3]
    a746:	4b13      	ldr	r3, [pc, #76]	; (a794 <fInitMagCalibration+0xd4>)
    a748:	3249      	adds	r2, #73	; 0x49
    a74a:	52ea      	strh	r2, [r5, r3]
    a74c:	2276      	movs	r2, #118	; 0x76
    a74e:	4b12      	ldr	r3, [pc, #72]	; (a798 <fInitMagCalibration+0xd8>)
    a750:	32ff      	adds	r2, #255	; 0xff
    a752:	52ea      	strh	r2, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:74
	}

	return;
}
    a754:	bd70      	pop	{r4, r5, r6, pc}
    a756:	46c0      	nop			; (mov r8, r8)
    a758:	42480000 	.word	0x42480000
    a75c:	00000416 	.word	0x00000416
    a760:	461c4000 	.word	0x461c4000
    a764:	447a0000 	.word	0x447a0000
    a768:	00000414 	.word	0x00000414
    a76c:	00000415 	.word	0x00000415
    a770:	00000b56 	.word	0x00000b56
    a774:	fffffe8b 	.word	0xfffffe8b
    a778:	00000b42 	.word	0x00000b42
    a77c:	00000b44 	.word	0x00000b44
    a780:	00000b46 	.word	0x00000b46
    a784:	00000b48 	.word	0x00000b48
    a788:	00000b4a 	.word	0x00000b4a
    a78c:	00000b4c 	.word	0x00000b4c
    a790:	00000b4e 	.word	0x00000b4e
    a794:	00000b52 	.word	0x00000b52
    a798:	00000b54 	.word	0x00000b54

0000a79c <iUpdateMagnetometerBuffer>:
iUpdateMagnetometerBuffer():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:79

// function updates the magnetic measurement buffer with most recent magnetic data (typically 25Hz)
void iUpdateMagnetometerBuffer(struct MagneticBuffer *pthisMagBuffer, struct AccelSensor *pthisAccel,
		struct MagSensor *pthisMag, int32 loopcounter)
{
    a79c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a79e:	465f      	mov	r7, fp
    a7a0:	4656      	mov	r6, sl
    a7a2:	464d      	mov	r5, r9
    a7a4:	4644      	mov	r4, r8
    a7a6:	b4f0      	push	{r4, r5, r6, r7}
    a7a8:	b089      	sub	sp, #36	; 0x24
    a7aa:	9301      	str	r3, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:88
	int16 itanj, itank;				// indexing accelerometer ratios
	int8 j, k, l, m;				// counters
	int8 itooclose;					// flag denoting measurement is too close to existing ones

	// calculate the magnetometer buffer bins from the accelerometer tangent ratios
	if (pthisAccel->iGp[X] == 0) return;
    a7ac:	8dcf      	ldrh	r7, [r1, #46]	; 0x2e
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:79
}

// function updates the magnetic measurement buffer with most recent magnetic data (typically 25Hz)
void iUpdateMagnetometerBuffer(struct MagneticBuffer *pthisMagBuffer, struct AccelSensor *pthisAccel,
		struct MagSensor *pthisMag, int32 loopcounter)
{
    a7ae:	1c06      	adds	r6, r0, #0
    a7b0:	4689      	mov	r9, r1
    a7b2:	1c14      	adds	r4, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:88
	int16 itanj, itank;				// indexing accelerometer ratios
	int8 j, k, l, m;				// counters
	int8 itooclose;					// flag denoting measurement is too close to existing ones

	// calculate the magnetometer buffer bins from the accelerometer tangent ratios
	if (pthisAccel->iGp[X] == 0) return;
    a7b4:	1c0b      	adds	r3, r1, #0
    a7b6:	2f00      	cmp	r7, #0
    a7b8:	d100      	bne.n	a7bc <iUpdateMagnetometerBuffer+0x20>
    a7ba:	e15d      	b.n	aa78 <iUpdateMagnetometerBuffer+0x2dc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:89
	itanj = (100 * (int32)pthisAccel->iGp[Y]) / ((int32)pthisAccel->iGp[X]);
    a7bc:	2030      	movs	r0, #48	; 0x30
    a7be:	5e18      	ldrsh	r0, [r3, r0]
    a7c0:	2364      	movs	r3, #100	; 0x64
    a7c2:	b23f      	sxth	r7, r7
    a7c4:	4358      	muls	r0, r3
    a7c6:	1c39      	adds	r1, r7, #0
    a7c8:	469a      	mov	sl, r3
    a7ca:	f7f5 fefb 	bl	5c4 <__aeabi_idiv>
    a7ce:	b283      	uxth	r3, r0
    a7d0:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:90
	itank = (100 * (int32)pthisAccel->iGp[Z]) / ((int32)pthisAccel->iGp[X]);
    a7d2:	464b      	mov	r3, r9
    a7d4:	2032      	movs	r0, #50	; 0x32
    a7d6:	5e18      	ldrsh	r0, [r3, r0]
    a7d8:	4653      	mov	r3, sl
    a7da:	1c39      	adds	r1, r7, #0
    a7dc:	4358      	muls	r0, r3
    a7de:	f7f5 fef1 	bl	5c4 <__aeabi_idiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:95
	// map tangent ratios to bins j and k using equal angle bins: C guarantees left to right execution of the test
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
    a7e2:	21b4      	movs	r1, #180	; 0xb4
    a7e4:	4642      	mov	r2, r8
    a7e6:	0109      	lsls	r1, r1, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:90
	int8 itooclose;					// flag denoting measurement is too close to existing ones

	// calculate the magnetometer buffer bins from the accelerometer tangent ratios
	if (pthisAccel->iGp[X] == 0) return;
	itanj = (100 * (int32)pthisAccel->iGp[Y]) / ((int32)pthisAccel->iGp[X]);
	itank = (100 * (int32)pthisAccel->iGp[Z]) / ((int32)pthisAccel->iGp[X]);
    a7e8:	b283      	uxth	r3, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:95
	// map tangent ratios to bins j and k using equal angle bins: C guarantees left to right execution of the test
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
    a7ea:	5e70      	ldrsh	r0, [r6, r1]
    a7ec:	b212      	sxth	r2, r2
    a7ee:	4282      	cmp	r2, r0
    a7f0:	da00      	bge.n	a7f4 <iUpdateMagnetometerBuffer+0x58>
    a7f2:	e1ed      	b.n	abd0 <iUpdateMagnetometerBuffer+0x434>
    a7f4:	49c0      	ldr	r1, [pc, #768]	; (aaf8 <iUpdateMagnetometerBuffer+0x35c>)
    a7f6:	5e71      	ldrsh	r1, [r6, r1]
    a7f8:	4291      	cmp	r1, r2
    a7fa:	dd00      	ble.n	a7fe <iUpdateMagnetometerBuffer+0x62>
    a7fc:	e1e6      	b.n	abcc <iUpdateMagnetometerBuffer+0x430>
    a7fe:	49bf      	ldr	r1, [pc, #764]	; (aafc <iUpdateMagnetometerBuffer+0x360>)
    a800:	5e71      	ldrsh	r1, [r6, r1]
    a802:	4291      	cmp	r1, r2
    a804:	dd00      	ble.n	a808 <iUpdateMagnetometerBuffer+0x6c>
    a806:	e1e5      	b.n	abd4 <iUpdateMagnetometerBuffer+0x438>
    a808:	49bd      	ldr	r1, [pc, #756]	; (ab00 <iUpdateMagnetometerBuffer+0x364>)
    a80a:	5e71      	ldrsh	r1, [r6, r1]
    a80c:	4291      	cmp	r1, r2
    a80e:	dd00      	ble.n	a812 <iUpdateMagnetometerBuffer+0x76>
    a810:	e1e4      	b.n	abdc <iUpdateMagnetometerBuffer+0x440>
    a812:	49bc      	ldr	r1, [pc, #752]	; (ab04 <iUpdateMagnetometerBuffer+0x368>)
    a814:	5e71      	ldrsh	r1, [r6, r1]
    a816:	4291      	cmp	r1, r2
    a818:	dd00      	ble.n	a81c <iUpdateMagnetometerBuffer+0x80>
    a81a:	e1d1      	b.n	abc0 <iUpdateMagnetometerBuffer+0x424>
    a81c:	49ba      	ldr	r1, [pc, #744]	; (ab08 <iUpdateMagnetometerBuffer+0x36c>)
    a81e:	5e71      	ldrsh	r1, [r6, r1]
    a820:	4291      	cmp	r1, r2
    a822:	dd00      	ble.n	a826 <iUpdateMagnetometerBuffer+0x8a>
    a824:	e1e0      	b.n	abe8 <iUpdateMagnetometerBuffer+0x44c>
    a826:	49b9      	ldr	r1, [pc, #740]	; (ab0c <iUpdateMagnetometerBuffer+0x370>)
    a828:	5e71      	ldrsh	r1, [r6, r1]
    a82a:	4291      	cmp	r1, r2
    a82c:	dd00      	ble.n	a830 <iUpdateMagnetometerBuffer+0x94>
    a82e:	e1e7      	b.n	ac00 <iUpdateMagnetometerBuffer+0x464>
    a830:	49b7      	ldr	r1, [pc, #732]	; (ab10 <iUpdateMagnetometerBuffer+0x374>)
    a832:	5e71      	ldrsh	r1, [r6, r1]
    a834:	4291      	cmp	r1, r2
    a836:	dd00      	ble.n	a83a <iUpdateMagnetometerBuffer+0x9e>
    a838:	e1e4      	b.n	ac04 <iUpdateMagnetometerBuffer+0x468>
    a83a:	21b5      	movs	r1, #181	; 0xb5
    a83c:	0109      	lsls	r1, r1, #4
    a83e:	5e71      	ldrsh	r1, [r6, r1]
    a840:	4291      	cmp	r1, r2
    a842:	dd00      	ble.n	a846 <iUpdateMagnetometerBuffer+0xaa>
    a844:	e1d6      	b.n	abf4 <iUpdateMagnetometerBuffer+0x458>
    a846:	49b3      	ldr	r1, [pc, #716]	; (ab14 <iUpdateMagnetometerBuffer+0x378>)
    a848:	5e71      	ldrsh	r1, [r6, r1]
    a84a:	4291      	cmp	r1, r2
    a84c:	dd00      	ble.n	a850 <iUpdateMagnetometerBuffer+0xb4>
    a84e:	e1db      	b.n	ac08 <iUpdateMagnetometerBuffer+0x46c>
    a850:	49b1      	ldr	r1, [pc, #708]	; (ab18 <iUpdateMagnetometerBuffer+0x37c>)
    a852:	5e71      	ldrsh	r1, [r6, r1]
    a854:	4291      	cmp	r1, r2
    a856:	dd00      	ble.n	a85a <iUpdateMagnetometerBuffer+0xbe>
    a858:	e1da      	b.n	ac10 <iUpdateMagnetometerBuffer+0x474>
    a85a:	210b      	movs	r1, #11
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:96 (discriminator 1)
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
    a85c:	b21b      	sxth	r3, r3
    a85e:	4283      	cmp	r3, r0
    a860:	da00      	bge.n	a864 <iUpdateMagnetometerBuffer+0xc8>
    a862:	e1af      	b.n	abc4 <iUpdateMagnetometerBuffer+0x428>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:96
    a864:	4aa4      	ldr	r2, [pc, #656]	; (aaf8 <iUpdateMagnetometerBuffer+0x35c>)
    a866:	5eb2      	ldrsh	r2, [r6, r2]
    a868:	429a      	cmp	r2, r3
    a86a:	dd00      	ble.n	a86e <iUpdateMagnetometerBuffer+0xd2>
    a86c:	e1ac      	b.n	abc8 <iUpdateMagnetometerBuffer+0x42c>
    a86e:	4aa3      	ldr	r2, [pc, #652]	; (aafc <iUpdateMagnetometerBuffer+0x360>)
    a870:	5eb2      	ldrsh	r2, [r6, r2]
    a872:	429a      	cmp	r2, r3
    a874:	dd00      	ble.n	a878 <iUpdateMagnetometerBuffer+0xdc>
    a876:	e1b3      	b.n	abe0 <iUpdateMagnetometerBuffer+0x444>
    a878:	4aa1      	ldr	r2, [pc, #644]	; (ab00 <iUpdateMagnetometerBuffer+0x364>)
    a87a:	5eb2      	ldrsh	r2, [r6, r2]
    a87c:	429a      	cmp	r2, r3
    a87e:	dd00      	ble.n	a882 <iUpdateMagnetometerBuffer+0xe6>
    a880:	e1aa      	b.n	abd8 <iUpdateMagnetometerBuffer+0x43c>
    a882:	4aa0      	ldr	r2, [pc, #640]	; (ab04 <iUpdateMagnetometerBuffer+0x368>)
    a884:	5eb2      	ldrsh	r2, [r6, r2]
    a886:	429a      	cmp	r2, r3
    a888:	dd00      	ble.n	a88c <iUpdateMagnetometerBuffer+0xf0>
    a88a:	e1af      	b.n	abec <iUpdateMagnetometerBuffer+0x450>
    a88c:	4a9e      	ldr	r2, [pc, #632]	; (ab08 <iUpdateMagnetometerBuffer+0x36c>)
    a88e:	5eb2      	ldrsh	r2, [r6, r2]
    a890:	429a      	cmp	r2, r3
    a892:	dd00      	ble.n	a896 <iUpdateMagnetometerBuffer+0xfa>
    a894:	e1a6      	b.n	abe4 <iUpdateMagnetometerBuffer+0x448>
    a896:	4a9d      	ldr	r2, [pc, #628]	; (ab0c <iUpdateMagnetometerBuffer+0x370>)
    a898:	5eb2      	ldrsh	r2, [r6, r2]
    a89a:	429a      	cmp	r2, r3
    a89c:	dd00      	ble.n	a8a0 <iUpdateMagnetometerBuffer+0x104>
    a89e:	e1a7      	b.n	abf0 <iUpdateMagnetometerBuffer+0x454>
    a8a0:	4a9b      	ldr	r2, [pc, #620]	; (ab10 <iUpdateMagnetometerBuffer+0x374>)
    a8a2:	5eb2      	ldrsh	r2, [r6, r2]
    a8a4:	429a      	cmp	r2, r3
    a8a6:	dd00      	ble.n	a8aa <iUpdateMagnetometerBuffer+0x10e>
    a8a8:	e1a6      	b.n	abf8 <iUpdateMagnetometerBuffer+0x45c>
    a8aa:	22b5      	movs	r2, #181	; 0xb5
    a8ac:	0112      	lsls	r2, r2, #4
    a8ae:	5eb2      	ldrsh	r2, [r6, r2]
    a8b0:	429a      	cmp	r2, r3
    a8b2:	dd00      	ble.n	a8b6 <iUpdateMagnetometerBuffer+0x11a>
    a8b4:	e1a2      	b.n	abfc <iUpdateMagnetometerBuffer+0x460>
    a8b6:	4a97      	ldr	r2, [pc, #604]	; (ab14 <iUpdateMagnetometerBuffer+0x378>)
    a8b8:	5eb2      	ldrsh	r2, [r6, r2]
    a8ba:	429a      	cmp	r2, r3
    a8bc:	dd00      	ble.n	a8c0 <iUpdateMagnetometerBuffer+0x124>
    a8be:	e1a5      	b.n	ac0c <iUpdateMagnetometerBuffer+0x470>
    a8c0:	4a95      	ldr	r2, [pc, #596]	; (ab18 <iUpdateMagnetometerBuffer+0x37c>)
    a8c2:	5eb0      	ldrsh	r0, [r6, r2]
    a8c4:	0fc2      	lsrs	r2, r0, #31
    a8c6:	4694      	mov	ip, r2
    a8c8:	4665      	mov	r5, ip
    a8ca:	17da      	asrs	r2, r3, #31
    a8cc:	4283      	cmp	r3, r0
    a8ce:	4155      	adcs	r5, r2
    a8d0:	1c2b      	adds	r3, r5, #0
    a8d2:	330a      	adds	r3, #10
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:97
	if (pthisAccel->iGp[X] < 0) k += MAGBUFFSIZEX;
    a8d4:	2f00      	cmp	r7, #0
    a8d6:	da00      	bge.n	a8da <iUpdateMagnetometerBuffer+0x13e>
    a8d8:	e10b      	b.n	aaf2 <iUpdateMagnetometerBuffer+0x356>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:101

	// case 1: buffer is full and this bin has a measurement: over-write without increasing number of measurements
	// this is the most common option at run time
	if ((pthisMagBuffer->iMagBufferCount == MAXMEASUREMENTS) && (pthisMagBuffer->index[j][k] != -1))
    a8da:	4890      	ldr	r0, [pc, #576]	; (ab1c <iUpdateMagnetometerBuffer+0x380>)
    a8dc:	5a32      	ldrh	r2, [r6, r0]
    a8de:	9203      	str	r2, [sp, #12]
    a8e0:	b212      	sxth	r2, r2
    a8e2:	2af0      	cmp	r2, #240	; 0xf0
    a8e4:	d100      	bne.n	a8e8 <iUpdateMagnetometerBuffer+0x14c>
    a8e6:	e0e5      	b.n	aab4 <iUpdateMagnetometerBuffer+0x318>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:152
		pthisMagBuffer->index[l][m] = -1;
		return;
	} // end case 2

	// case 3: buffer is not full and this bin is empty: store and increment number of measurements
	if ((pthisMagBuffer->iMagBufferCount < MAXMEASUREMENTS) && (pthisMagBuffer->index[j][k] == -1))
    a8e8:	2aef      	cmp	r2, #239	; 0xef
    a8ea:	dd00      	ble.n	a8ee <iUpdateMagnetometerBuffer+0x152>
    a8ec:	e0c4      	b.n	aa78 <iUpdateMagnetometerBuffer+0x2dc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:152 (discriminator 1)
    a8ee:	b25a      	sxtb	r2, r3
    a8f0:	004b      	lsls	r3, r1, #1
    a8f2:	1859      	adds	r1, r3, r1
    a8f4:	00c9      	lsls	r1, r1, #3
    a8f6:	188b      	adds	r3, r1, r2
    a8f8:	22d8      	movs	r2, #216	; 0xd8
    a8fa:	0099      	lsls	r1, r3, #2
    a8fc:	00d2      	lsls	r2, r2, #3
    a8fe:	1871      	adds	r1, r6, r1
    a900:	4694      	mov	ip, r2
    a902:	588a      	ldr	r2, [r1, r2]
    a904:	3201      	adds	r2, #1
    a906:	d100      	bne.n	a90a <iUpdateMagnetometerBuffer+0x16e>
    a908:	e0bd      	b.n	aa86 <iUpdateMagnetometerBuffer+0x2ea>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:172
	{
		// calculate the vector difference between current measurement and the buffer entry
		idelta = 0;
		for (i = X; i <= Z; i++)
		{
			idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
    a90a:	2246      	movs	r2, #70	; 0x46
    a90c:	4691      	mov	r9, r2
    a90e:	5ea2      	ldrsh	r2, [r4, r2]
    a910:	1c18      	adds	r0, r3, #0
    a912:	3021      	adds	r0, #33	; 0x21
    a914:	30ff      	adds	r0, #255	; 0xff
    a916:	0040      	lsls	r0, r0, #1
    a918:	5f80      	ldrsh	r0, [r0, r6]
    a91a:	005f      	lsls	r7, r3, #1
    a91c:	1a12      	subs	r2, r2, r0
    a91e:	17d5      	asrs	r5, r2, #31
    a920:	1950      	adds	r0, r2, r5
    a922:	2244      	movs	r2, #68	; 0x44
    a924:	4068      	eors	r0, r5
    a926:	4692      	mov	sl, r2
    a928:	5ea2      	ldrsh	r2, [r4, r2]
    a92a:	4693      	mov	fp, r2
    a92c:	5fbd      	ldrsh	r5, [r7, r6]
    a92e:	465a      	mov	r2, fp
    a930:	1b52      	subs	r2, r2, r5
    a932:	17d5      	asrs	r5, r2, #31
    a934:	1952      	adds	r2, r2, r5
    a936:	406a      	eors	r2, r5
    a938:	1882      	adds	r2, r0, r2
    a93a:	2048      	movs	r0, #72	; 0x48
    a93c:	4680      	mov	r8, r0
    a93e:	5e20      	ldrsh	r0, [r4, r0]
    a940:	2590      	movs	r5, #144	; 0x90
    a942:	00ad      	lsls	r5, r5, #2
    a944:	46ab      	mov	fp, r5
    a946:	445b      	add	r3, fp
    a948:	005b      	lsls	r3, r3, #1
    a94a:	5f9b      	ldrsh	r3, [r3, r6]
    a94c:	1ac0      	subs	r0, r0, r3
    a94e:	17c3      	asrs	r3, r0, #31
    a950:	18c0      	adds	r0, r0, r3
    a952:	4058      	eors	r0, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:180
		if (idelta < MESHDELTACOUNTS)
		{
			// simply over-write the measurement and return
			for (i = X; i <= Z; i++)
			{
				pthisMagBuffer->iBpFast[i][j][k] = pthisMag->iBpFast[i];
    a954:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:172
	{
		// calculate the vector difference between current measurement and the buffer entry
		idelta = 0;
		for (i = X; i <= Z; i++)
		{
			idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
    a956:	1882      	adds	r2, r0, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:180
		if (idelta < MESHDELTACOUNTS)
		{
			// simply over-write the measurement and return
			for (i = X; i <= Z; i++)
			{
				pthisMagBuffer->iBpFast[i][j][k] = pthisMag->iBpFast[i];
    a958:	5ae3      	ldrh	r3, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:175
		for (i = X; i <= Z; i++)
		{
			idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
		}
		// check to see if the current reading is close to this existing magnetic buffer entry
		if (idelta < MESHDELTACOUNTS)
    a95a:	2a31      	cmp	r2, #49	; 0x31
    a95c:	dc00      	bgt.n	a960 <iUpdateMagnetometerBuffer+0x1c4>
    a95e:	e11f      	b.n	aba0 <iUpdateMagnetometerBuffer+0x404>
    a960:	20d8      	movs	r0, #216	; 0xd8
    a962:	464a      	mov	r2, r9
    a964:	00c0      	lsls	r0, r0, #3
    a966:	4684      	mov	ip, r0
    a968:	4641      	mov	r1, r8
    a96a:	9304      	str	r3, [sp, #16]
    a96c:	5aa2      	ldrh	r2, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:205
					{
						// calculate the vector difference between current measurement and the buffer entry
						idelta = 0;
						for (i = X; i <= Z; i++)
						{
							idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
    a96e:	b21b      	sxth	r3, r3
    a970:	44b4      	add	ip, r6
    a972:	4698      	mov	r8, r3
    a974:	9205      	str	r2, [sp, #20]
    a976:	b213      	sxth	r3, r2
    a978:	5a61      	ldrh	r1, [r4, r1]
    a97a:	4660      	mov	r0, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:175
		for (i = X; i <= Z; i++)
		{
			idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
		}
		// check to see if the current reading is close to this existing magnetic buffer entry
		if (idelta < MESHDELTACOUNTS)
    a97c:	2400      	movs	r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:205
					{
						// calculate the vector difference between current measurement and the buffer entry
						idelta = 0;
						for (i = X; i <= Z; i++)
						{
							idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
    a97e:	469c      	mov	ip, r3
    a980:	9600      	str	r6, [sp, #0]
    a982:	9b00      	ldr	r3, [sp, #0]
    a984:	9607      	str	r6, [sp, #28]
    a986:	4645      	mov	r5, r8
    a988:	4666      	mov	r6, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:175
		for (i = X; i <= Z; i++)
		{
			idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
		}
		// check to see if the current reading is close to this existing magnetic buffer entry
		if (idelta < MESHDELTACOUNTS)
    a98a:	46a1      	mov	r9, r4
    a98c:	46a3      	mov	fp, r4
    a98e:	4680      	mov	r8, r0
    a990:	469c      	mov	ip, r3
    a992:	9106      	str	r1, [sp, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:205
					{
						// calculate the vector difference between current measurement and the buffer entry
						idelta = 0;
						for (i = X; i <= Z; i++)
						{
							idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
    a994:	b20f      	sxth	r7, r1
    a996:	9402      	str	r4, [sp, #8]
    a998:	9b02      	ldr	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:126
		pthisMagBuffer->index[j][k] = loopcounter;

		// set l and m to the oldest active entry and disable it
		i = loopcounter;
		l = m = 0; // to avoid compiler complaint
		for (j = 0; j < MAGBUFFSIZEX; j++)
    a99a:	4660      	mov	r0, ip
    a99c:	4644      	mov	r4, r8
    a99e:	2101      	movs	r1, #1
    a9a0:	469a      	mov	sl, r3
    a9a2:	9500      	str	r5, [sp, #0]
    a9a4:	e022      	b.n	a9ec <iUpdateMagnetometerBuffer+0x250>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:205
					{
						// calculate the vector difference between current measurement and the buffer entry
						idelta = 0;
						for (i = X; i <= Z; i++)
						{
							idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
    a9a6:	2200      	movs	r2, #0
    a9a8:	5e83      	ldrsh	r3, [r0, r2]
    a9aa:	9a00      	ldr	r2, [sp, #0]
    a9ac:	1ad3      	subs	r3, r2, r3
    a9ae:	17dd      	asrs	r5, r3, #31
    a9b0:	195a      	adds	r2, r3, r5
    a9b2:	2390      	movs	r3, #144	; 0x90
    a9b4:	009b      	lsls	r3, r3, #2
    a9b6:	18c3      	adds	r3, r0, r3
    a9b8:	406a      	eors	r2, r5
    a9ba:	2500      	movs	r5, #0
    a9bc:	5f5b      	ldrsh	r3, [r3, r5]
    a9be:	1af3      	subs	r3, r6, r3
    a9c0:	17dd      	asrs	r5, r3, #31
    a9c2:	195b      	adds	r3, r3, r5
    a9c4:	406b      	eors	r3, r5
    a9c6:	18d2      	adds	r2, r2, r3
    a9c8:	2390      	movs	r3, #144	; 0x90
    a9ca:	00db      	lsls	r3, r3, #3
    a9cc:	18c3      	adds	r3, r0, r3
    a9ce:	2500      	movs	r5, #0
    a9d0:	5f5b      	ldrsh	r3, [r3, r5]
    a9d2:	1afb      	subs	r3, r7, r3
    a9d4:	17dd      	asrs	r5, r3, #31
    a9d6:	195b      	adds	r3, r3, r5
    a9d8:	406b      	eors	r3, r5
    a9da:	18d3      	adds	r3, r2, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:196
			j = 0;
			while (!itooclose && (j < MAGBUFFSIZEX))
			{
				// loop over the buffer k from 0 potentially up to MAGBUFFSIZEY - 1 
				k = 0;
				while (!itooclose && (k < MAGBUFFSIZEY))
    a9dc:	2b31      	cmp	r3, #49	; 0x31
    a9de:	dd4b      	ble.n	aa78 <iUpdateMagnetometerBuffer+0x2dc>
    a9e0:	3101      	adds	r1, #1
    a9e2:	b2c9      	uxtb	r1, r1
    a9e4:	3404      	adds	r4, #4
    a9e6:	3002      	adds	r0, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:196 (discriminator 1)
    a9e8:	2919      	cmp	r1, #25
    a9ea:	d00c      	beq.n	aa06 <iUpdateMagnetometerBuffer+0x26a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:199
				{
					// check whether this buffer entry already has a measurement or not
					if (pthisMagBuffer->index[j][k] != -1)
    a9ec:	6822      	ldr	r2, [r4, #0]
    a9ee:	1e4b      	subs	r3, r1, #1
    a9f0:	b2db      	uxtb	r3, r3
    a9f2:	3201      	adds	r2, #1
    a9f4:	d1d7      	bne.n	a9a6 <iUpdateMagnetometerBuffer+0x20a>
    a9f6:	3101      	adds	r1, #1
    a9f8:	b2c9      	uxtb	r1, r1
    a9fa:	469a      	mov	sl, r3
    a9fc:	46cb      	mov	fp, r9
    a9fe:	3404      	adds	r4, #4
    aa00:	3002      	adds	r0, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:196
			j = 0;
			while (!itooclose && (j < MAGBUFFSIZEX))
			{
				// loop over the buffer k from 0 potentially up to MAGBUFFSIZEY - 1 
				k = 0;
				while (!itooclose && (k < MAGBUFFSIZEY))
    aa02:	2919      	cmp	r1, #25
    aa04:	d1f2      	bne.n	a9ec <iUpdateMagnetometerBuffer+0x250>
    aa06:	4653      	mov	r3, sl
    aa08:	9302      	str	r3, [sp, #8]
    aa0a:	464b      	mov	r3, r9
    aa0c:	3301      	adds	r3, #1
    aa0e:	b2db      	uxtb	r3, r3
    aa10:	b2da      	uxtb	r2, r3
    aa12:	4691      	mov	r9, r2
    aa14:	2260      	movs	r2, #96	; 0x60
    aa16:	4692      	mov	sl, r2
    aa18:	3a30      	subs	r2, #48	; 0x30
    aa1a:	44d0      	add	r8, sl
    aa1c:	4692      	mov	sl, r2
    aa1e:	9d00      	ldr	r5, [sp, #0]
    aa20:	44d4      	add	ip, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:192
			itooclose = 0;
			// to avoid compiler warning
			l = m = 0;
			// loop over the buffer j from 0 potentially up to MAGBUFFSIZEX - 1 
			j = 0;
			while (!itooclose && (j < MAGBUFFSIZEX))
    aa22:	2b0c      	cmp	r3, #12
    aa24:	d1b8      	bne.n	a998 <iUpdateMagnetometerBuffer+0x1fc>
    aa26:	9b02      	ldr	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:231
			// l and m are guaranteed to be set if no entries too close are detected
			if (!itooclose)
			{
				for (i = X; i <= Z; i++)
				{
					pthisMagBuffer->iBpFast[i][l][m] = pthisMag->iBpFast[i];
    aa28:	466a      	mov	r2, sp
    aa2a:	469a      	mov	sl, r3
    aa2c:	465b      	mov	r3, fp
    aa2e:	7013      	strb	r3, [r2, #0]
    aa30:	7813      	ldrb	r3, [r2, #0]
    aa32:	4669      	mov	r1, sp
    aa34:	4652      	mov	r2, sl
    aa36:	b25b      	sxtb	r3, r3
    aa38:	700a      	strb	r2, [r1, #0]
    aa3a:	780a      	ldrb	r2, [r1, #0]
    aa3c:	0059      	lsls	r1, r3, #1
    aa3e:	18cb      	adds	r3, r1, r3
    aa40:	4669      	mov	r1, sp
    aa42:	b252      	sxtb	r2, r2
    aa44:	00db      	lsls	r3, r3, #3
    aa46:	9e07      	ldr	r6, [sp, #28]
    aa48:	189b      	adds	r3, r3, r2
    aa4a:	8a09      	ldrh	r1, [r1, #16]
    aa4c:	005a      	lsls	r2, r3, #1
    aa4e:	4668      	mov	r0, sp
    aa50:	5391      	strh	r1, [r2, r6]
    aa52:	2190      	movs	r1, #144	; 0x90
    aa54:	8a80      	ldrh	r0, [r0, #20]
    aa56:	18b2      	adds	r2, r6, r2
    aa58:	0089      	lsls	r1, r1, #2
    aa5a:	5250      	strh	r0, [r2, r1]
    aa5c:	4668      	mov	r0, sp
    aa5e:	2190      	movs	r1, #144	; 0x90
    aa60:	8b00      	ldrh	r0, [r0, #24]
    aa62:	00c9      	lsls	r1, r1, #3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:233
				}
				pthisMagBuffer->index[l][m] = loopcounter;
    aa64:	33b1      	adds	r3, #177	; 0xb1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:231
			// l and m are guaranteed to be set if no entries too close are detected
			if (!itooclose)
			{
				for (i = X; i <= Z; i++)
				{
					pthisMagBuffer->iBpFast[i][l][m] = pthisMag->iBpFast[i];
    aa66:	5250      	strh	r0, [r2, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:233
				}
				pthisMagBuffer->index[l][m] = loopcounter;
    aa68:	33ff      	adds	r3, #255	; 0xff
    aa6a:	9a01      	ldr	r2, [sp, #4]
    aa6c:	009b      	lsls	r3, r3, #2
    aa6e:	519a      	str	r2, [r3, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:234
				(pthisMagBuffer->iMagBufferCount)++;
    aa70:	9a03      	ldr	r2, [sp, #12]
    aa72:	4b2a      	ldr	r3, [pc, #168]	; (ab1c <iUpdateMagnetometerBuffer+0x380>)
    aa74:	3201      	adds	r2, #1
    aa76:	52f2      	strh	r2, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:242
		return;
	} // end case 4

	// this line should be unreachable
	return;
}
    aa78:	b009      	add	sp, #36	; 0x24
    aa7a:	bc3c      	pop	{r2, r3, r4, r5}
    aa7c:	4690      	mov	r8, r2
    aa7e:	4699      	mov	r9, r3
    aa80:	46a2      	mov	sl, r4
    aa82:	46ab      	mov	fp, r5
    aa84:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:157 (discriminator 1)
	if ((pthisMagBuffer->iMagBufferCount < MAXMEASUREMENTS) && (pthisMagBuffer->index[j][k] == -1))
	{
		// store the fast (unaveraged at typically 200Hz) integer magnetometer reading into the buffer bin j, k
		for (i = X; i <= Z; i++)
		{
			pthisMagBuffer->iBpFast[i][j][k] = pthisMag->iBpFast[i];
    aa86:	2244      	movs	r2, #68	; 0x44
    aa88:	5aa2      	ldrh	r2, [r4, r2]
    aa8a:	005b      	lsls	r3, r3, #1
    aa8c:	539a      	strh	r2, [r3, r6]
    aa8e:	2246      	movs	r2, #70	; 0x46
    aa90:	5aa7      	ldrh	r7, [r4, r2]
    aa92:	32fb      	adds	r2, #251	; 0xfb
    aa94:	18f3      	adds	r3, r6, r3
    aa96:	32ff      	adds	r2, #255	; 0xff
    aa98:	529f      	strh	r7, [r3, r2]
    aa9a:	3af9      	subs	r2, #249	; 0xf9
    aa9c:	3aff      	subs	r2, #255	; 0xff
    aa9e:	5aa4      	ldrh	r4, [r4, r2]
    aaa0:	2290      	movs	r2, #144	; 0x90
    aaa2:	00d2      	lsls	r2, r2, #3
    aaa4:	529c      	strh	r4, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:159 (discriminator 1)
		}
		pthisMagBuffer->index[j][k] = loopcounter;
    aaa6:	4663      	mov	r3, ip
    aaa8:	9a01      	ldr	r2, [sp, #4]
    aaaa:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:160 (discriminator 1)
		(pthisMagBuffer->iMagBufferCount)++;
    aaac:	9b03      	ldr	r3, [sp, #12]
    aaae:	3301      	adds	r3, #1
    aab0:	5233      	strh	r3, [r6, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:161 (discriminator 1)
		return;
    aab2:	e7e1      	b.n	aa78 <iUpdateMagnetometerBuffer+0x2dc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:101 (discriminator 1)
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
	if (pthisAccel->iGp[X] < 0) k += MAGBUFFSIZEX;

	// case 1: buffer is full and this bin has a measurement: over-write without increasing number of measurements
	// this is the most common option at run time
	if ((pthisMagBuffer->iMagBufferCount == MAXMEASUREMENTS) && (pthisMagBuffer->index[j][k] != -1))
    aab4:	b25a      	sxtb	r2, r3
    aab6:	004b      	lsls	r3, r1, #1
    aab8:	1859      	adds	r1, r3, r1
    aaba:	00c9      	lsls	r1, r1, #3
    aabc:	188b      	adds	r3, r1, r2
    aabe:	21d8      	movs	r1, #216	; 0xd8
    aac0:	009a      	lsls	r2, r3, #2
    aac2:	18b2      	adds	r2, r6, r2
    aac4:	00c9      	lsls	r1, r1, #3
    aac6:	5850      	ldr	r0, [r2, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:106 (discriminator 1)
	{
		// store the fast (unaveraged at typically 200Hz) integer magnetometer reading into the buffer bin j, k
		for (i = X; i <= Z; i++)
		{
			pthisMagBuffer->iBpFast[i][j][k] = pthisMag->iBpFast[i];
    aac8:	005b      	lsls	r3, r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:101 (discriminator 1)
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
	if (pthisAccel->iGp[X] < 0) k += MAGBUFFSIZEX;

	// case 1: buffer is full and this bin has a measurement: over-write without increasing number of measurements
	// this is the most common option at run time
	if ((pthisMagBuffer->iMagBufferCount == MAXMEASUREMENTS) && (pthisMagBuffer->index[j][k] != -1))
    aaca:	3001      	adds	r0, #1
    aacc:	d028      	beq.n	ab20 <iUpdateMagnetometerBuffer+0x384>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:106 (discriminator 1)
	{
		// store the fast (unaveraged at typically 200Hz) integer magnetometer reading into the buffer bin j, k
		for (i = X; i <= Z; i++)
		{
			pthisMagBuffer->iBpFast[i][j][k] = pthisMag->iBpFast[i];
    aace:	2044      	movs	r0, #68	; 0x44
    aad0:	5a20      	ldrh	r0, [r4, r0]
    aad2:	5398      	strh	r0, [r3, r6]
    aad4:	18f6      	adds	r6, r6, r3
    aad6:	2346      	movs	r3, #70	; 0x46
    aad8:	5ae0      	ldrh	r0, [r4, r3]
    aada:	33fb      	adds	r3, #251	; 0xfb
    aadc:	33ff      	adds	r3, #255	; 0xff
    aade:	52f0      	strh	r0, [r6, r3]
    aae0:	3bf9      	subs	r3, #249	; 0xf9
    aae2:	3bff      	subs	r3, #255	; 0xff
    aae4:	5ae0      	ldrh	r0, [r4, r3]
    aae6:	2390      	movs	r3, #144	; 0x90
    aae8:	00db      	lsls	r3, r3, #3
    aaea:	52f0      	strh	r0, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:108 (discriminator 1)
		}
		pthisMagBuffer->index[j][k] = loopcounter;
    aaec:	9b01      	ldr	r3, [sp, #4]
    aaee:	5053      	str	r3, [r2, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:109 (discriminator 1)
		return;
    aaf0:	e7c2      	b.n	aa78 <iUpdateMagnetometerBuffer+0x2dc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:97 (discriminator 1)
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
	if (pthisAccel->iGp[X] < 0) k += MAGBUFFSIZEX;
    aaf2:	330c      	adds	r3, #12
    aaf4:	b2db      	uxtb	r3, r3
    aaf6:	e6f0      	b.n	a8da <iUpdateMagnetometerBuffer+0x13e>
    aaf8:	00000b42 	.word	0x00000b42
    aafc:	00000b44 	.word	0x00000b44
    ab00:	00000b46 	.word	0x00000b46
    ab04:	00000b48 	.word	0x00000b48
    ab08:	00000b4a 	.word	0x00000b4a
    ab0c:	00000b4c 	.word	0x00000b4c
    ab10:	00000b4e 	.word	0x00000b4e
    ab14:	00000b52 	.word	0x00000b52
    ab18:	00000b54 	.word	0x00000b54
    ab1c:	00000b56 	.word	0x00000b56
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:119 (discriminator 1)
	if ((pthisMagBuffer->iMagBufferCount == MAXMEASUREMENTS) && (pthisMagBuffer->index[j][k] == -1))
	{		
		// store the fast (unaveraged at typically 200Hz) integer magnetometer reading into the buffer bin j, k
		for (i = X; i <= Z; i++)
		{
			pthisMagBuffer->iBpFast[i][j][k] = pthisMag->iBpFast[i];
    ab20:	2044      	movs	r0, #68	; 0x44
    ab22:	5a20      	ldrh	r0, [r4, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:121 (discriminator 1)
		}
		pthisMagBuffer->index[j][k] = loopcounter;
    ab24:	9d01      	ldr	r5, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:119 (discriminator 1)
	if ((pthisMagBuffer->iMagBufferCount == MAXMEASUREMENTS) && (pthisMagBuffer->index[j][k] == -1))
	{		
		// store the fast (unaveraged at typically 200Hz) integer magnetometer reading into the buffer bin j, k
		for (i = X; i <= Z; i++)
		{
			pthisMagBuffer->iBpFast[i][j][k] = pthisMag->iBpFast[i];
    ab26:	5398      	strh	r0, [r3, r6]
    ab28:	2046      	movs	r0, #70	; 0x46
    ab2a:	5a27      	ldrh	r7, [r4, r0]
    ab2c:	30fb      	adds	r0, #251	; 0xfb
    ab2e:	18f3      	adds	r3, r6, r3
    ab30:	30ff      	adds	r0, #255	; 0xff
    ab32:	521f      	strh	r7, [r3, r0]
    ab34:	38f9      	subs	r0, #249	; 0xf9
    ab36:	38ff      	subs	r0, #255	; 0xff
    ab38:	5a24      	ldrh	r4, [r4, r0]
    ab3a:	2090      	movs	r0, #144	; 0x90
    ab3c:	00c0      	lsls	r0, r0, #3
    ab3e:	521c      	strh	r4, [r3, r0]
    ab40:	23d8      	movs	r3, #216	; 0xd8
    ab42:	00db      	lsls	r3, r3, #3
    ab44:	469c      	mov	ip, r3
    ab46:	44b4      	add	ip, r6
    ab48:	46e0      	mov	r8, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:125 (discriminator 1)
		}
		pthisMagBuffer->index[j][k] = loopcounter;

		// set l and m to the oldest active entry and disable it
		i = loopcounter;
		l = m = 0; // to avoid compiler complaint
    ab4a:	2400      	movs	r4, #0
    ab4c:	2700      	movs	r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:126 (discriminator 1)
		for (j = 0; j < MAGBUFFSIZEX; j++)
    ab4e:	2000      	movs	r0, #0
    ab50:	46b4      	mov	ip, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:121 (discriminator 1)
		// store the fast (unaveraged at typically 200Hz) integer magnetometer reading into the buffer bin j, k
		for (i = X; i <= Z; i++)
		{
			pthisMagBuffer->iBpFast[i][j][k] = pthisMag->iBpFast[i];
		}
		pthisMagBuffer->index[j][k] = loopcounter;
    ab52:	5055      	str	r5, [r2, r1]
    ab54:	4642      	mov	r2, r8
    ab56:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:131
		for (j = 0; j < MAGBUFFSIZEX; j++)
		{
			for (k = 0; k < MAGBUFFSIZEY; k++)
			{
				// check if the time stamp is older than the oldest found so far (normally fails this test)
				if (pthisMagBuffer->index[j][k] < i)
    ab58:	6811      	ldr	r1, [r2, #0]
    ab5a:	42a9      	cmp	r1, r5
    ab5c:	da04      	bge.n	ab68 <iUpdateMagnetometerBuffer+0x3cc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:134
				{
					// check if this bin is active (normally passes this test)
					if (pthisMagBuffer->index[j][k] != -1)
    ab5e:	1c4e      	adds	r6, r1, #1
    ab60:	d002      	beq.n	ab68 <iUpdateMagnetometerBuffer+0x3cc>
    ab62:	1c1c      	adds	r4, r3, #0
    ab64:	1c07      	adds	r7, r0, #0
    ab66:	1c0d      	adds	r5, r1, #0
    ab68:	3301      	adds	r3, #1
    ab6a:	b2d9      	uxtb	r1, r3
    ab6c:	b2cb      	uxtb	r3, r1
    ab6e:	3204      	adds	r2, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:128 (discriminator 2)
		// set l and m to the oldest active entry and disable it
		i = loopcounter;
		l = m = 0; // to avoid compiler complaint
		for (j = 0; j < MAGBUFFSIZEX; j++)
		{
			for (k = 0; k < MAGBUFFSIZEY; k++)
    ab70:	2918      	cmp	r1, #24
    ab72:	d1f1      	bne.n	ab58 <iUpdateMagnetometerBuffer+0x3bc>
    ab74:	2260      	movs	r2, #96	; 0x60
    ab76:	4691      	mov	r9, r2
    ab78:	3001      	adds	r0, #1
    ab7a:	b2c3      	uxtb	r3, r0
    ab7c:	b2d8      	uxtb	r0, r3
    ab7e:	44c8      	add	r8, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:126 (discriminator 2)
		pthisMagBuffer->index[j][k] = loopcounter;

		// set l and m to the oldest active entry and disable it
		i = loopcounter;
		l = m = 0; // to avoid compiler complaint
		for (j = 0; j < MAGBUFFSIZEX; j++)
    ab80:	2b0c      	cmp	r3, #12
    ab82:	d1e7      	bne.n	ab54 <iUpdateMagnetometerBuffer+0x3b8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:147
				} // end of test for older
			} // end of loop over k
		} // end of loop over j

		// deactivate the oldest measurement (no need to zero the measurement data)
		pthisMagBuffer->index[l][m] = -1;
    ab84:	2201      	movs	r2, #1
    ab86:	4666      	mov	r6, ip
    ab88:	b27f      	sxtb	r7, r7
    ab8a:	007b      	lsls	r3, r7, #1
    ab8c:	19db      	adds	r3, r3, r7
    ab8e:	b264      	sxtb	r4, r4
    ab90:	00db      	lsls	r3, r3, #3
    ab92:	191b      	adds	r3, r3, r4
    ab94:	33b1      	adds	r3, #177	; 0xb1
    ab96:	33ff      	adds	r3, #255	; 0xff
    ab98:	009b      	lsls	r3, r3, #2
    ab9a:	4252      	negs	r2, r2
    ab9c:	519a      	str	r2, [r3, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:148
		return;
    ab9e:	e76b      	b.n	aa78 <iUpdateMagnetometerBuffer+0x2dc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:180 (discriminator 1)
		if (idelta < MESHDELTACOUNTS)
		{
			// simply over-write the measurement and return
			for (i = X; i <= Z; i++)
			{
				pthisMagBuffer->iBpFast[i][j][k] = pthisMag->iBpFast[i];
    aba0:	53bb      	strh	r3, [r7, r6]
    aba2:	464b      	mov	r3, r9
    aba4:	5ae2      	ldrh	r2, [r4, r3]
    aba6:	2390      	movs	r3, #144	; 0x90
    aba8:	19f6      	adds	r6, r6, r7
    abaa:	009b      	lsls	r3, r3, #2
    abac:	52f2      	strh	r2, [r6, r3]
    abae:	4643      	mov	r3, r8
    abb0:	5ae2      	ldrh	r2, [r4, r3]
    abb2:	2390      	movs	r3, #144	; 0x90
    abb4:	00db      	lsls	r3, r3, #3
    abb6:	52f2      	strh	r2, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:182 (discriminator 1)
			}
			pthisMagBuffer->index[j][k] = loopcounter;
    abb8:	4663      	mov	r3, ip
    abba:	9a01      	ldr	r2, [sp, #4]
    abbc:	50ca      	str	r2, [r1, r3]
    abbe:	e75b      	b.n	aa78 <iUpdateMagnetometerBuffer+0x2dc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:95
	itank = (100 * (int32)pthisAccel->iGp[Z]) / ((int32)pthisAccel->iGp[X]);
	// map tangent ratios to bins j and k using equal angle bins: C guarantees left to right execution of the test
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
    abc0:	2104      	movs	r1, #4
    abc2:	e64b      	b.n	a85c <iUpdateMagnetometerBuffer+0xc0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:96
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
    abc4:	2300      	movs	r3, #0
    abc6:	e685      	b.n	a8d4 <iUpdateMagnetometerBuffer+0x138>
    abc8:	2301      	movs	r3, #1
    abca:	e683      	b.n	a8d4 <iUpdateMagnetometerBuffer+0x138>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:95
	itank = (100 * (int32)pthisAccel->iGp[Z]) / ((int32)pthisAccel->iGp[X]);
	// map tangent ratios to bins j and k using equal angle bins: C guarantees left to right execution of the test
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
    abcc:	2101      	movs	r1, #1
    abce:	e645      	b.n	a85c <iUpdateMagnetometerBuffer+0xc0>
    abd0:	2100      	movs	r1, #0
    abd2:	e643      	b.n	a85c <iUpdateMagnetometerBuffer+0xc0>
    abd4:	2102      	movs	r1, #2
    abd6:	e641      	b.n	a85c <iUpdateMagnetometerBuffer+0xc0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:96
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
    abd8:	2303      	movs	r3, #3
    abda:	e67b      	b.n	a8d4 <iUpdateMagnetometerBuffer+0x138>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:95
	itank = (100 * (int32)pthisAccel->iGp[Z]) / ((int32)pthisAccel->iGp[X]);
	// map tangent ratios to bins j and k using equal angle bins: C guarantees left to right execution of the test
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
    abdc:	2103      	movs	r1, #3
    abde:	e63d      	b.n	a85c <iUpdateMagnetometerBuffer+0xc0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:96
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
    abe0:	2302      	movs	r3, #2
    abe2:	e677      	b.n	a8d4 <iUpdateMagnetometerBuffer+0x138>
    abe4:	2305      	movs	r3, #5
    abe6:	e675      	b.n	a8d4 <iUpdateMagnetometerBuffer+0x138>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:95
	itank = (100 * (int32)pthisAccel->iGp[Z]) / ((int32)pthisAccel->iGp[X]);
	// map tangent ratios to bins j and k using equal angle bins: C guarantees left to right execution of the test
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
    abe8:	2105      	movs	r1, #5
    abea:	e637      	b.n	a85c <iUpdateMagnetometerBuffer+0xc0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:96
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
    abec:	2304      	movs	r3, #4
    abee:	e671      	b.n	a8d4 <iUpdateMagnetometerBuffer+0x138>
    abf0:	2306      	movs	r3, #6
    abf2:	e66f      	b.n	a8d4 <iUpdateMagnetometerBuffer+0x138>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:95
	itank = (100 * (int32)pthisAccel->iGp[Z]) / ((int32)pthisAccel->iGp[X]);
	// map tangent ratios to bins j and k using equal angle bins: C guarantees left to right execution of the test
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
    abf4:	2108      	movs	r1, #8
    abf6:	e631      	b.n	a85c <iUpdateMagnetometerBuffer+0xc0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:96
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
    abf8:	2307      	movs	r3, #7
    abfa:	e66b      	b.n	a8d4 <iUpdateMagnetometerBuffer+0x138>
    abfc:	2308      	movs	r3, #8
    abfe:	e669      	b.n	a8d4 <iUpdateMagnetometerBuffer+0x138>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:95
	itank = (100 * (int32)pthisAccel->iGp[Z]) / ((int32)pthisAccel->iGp[X]);
	// map tangent ratios to bins j and k using equal angle bins: C guarantees left to right execution of the test
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
    ac00:	2106      	movs	r1, #6
    ac02:	e62b      	b.n	a85c <iUpdateMagnetometerBuffer+0xc0>
    ac04:	2107      	movs	r1, #7
    ac06:	e629      	b.n	a85c <iUpdateMagnetometerBuffer+0xc0>
    ac08:	2109      	movs	r1, #9
    ac0a:	e627      	b.n	a85c <iUpdateMagnetometerBuffer+0xc0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:96
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
    ac0c:	2309      	movs	r3, #9
    ac0e:	e661      	b.n	a8d4 <iUpdateMagnetometerBuffer+0x138>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:95
	itank = (100 * (int32)pthisAccel->iGp[Z]) / ((int32)pthisAccel->iGp[X]);
	// map tangent ratios to bins j and k using equal angle bins: C guarantees left to right execution of the test
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
    ac10:	210a      	movs	r1, #10
    ac12:	e623      	b.n	a85c <iUpdateMagnetometerBuffer+0xc0>

0000ac14 <fInvertMagCal>:
fInvertMagCal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:246
	return;
}

// function maps the uncalibrated magnetometer data Bp (uT) onto calibrated data Bc (uT)
void fInvertMagCal(struct MagSensor *pthisMag, struct MagCalibration *pthisMagCal)
{
    ac14:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac16:	4657      	mov	r7, sl
    ac18:	464e      	mov	r6, r9
    ac1a:	4645      	mov	r5, r8
    ac1c:	b4e0      	push	{r5, r6, r7}
    ac1e:	1c0c      	adds	r4, r1, #0
    ac20:	b084      	sub	sp, #16
    ac22:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:255

	// calculate fBc and iBc for the 6DOF eCompass algorithms
	// remove the computed hard iron offsets (uT): ftmp[]=fBp[]-V[]
	for (i = X; i <= Z; i++)
	{
		ftmp[i] = pthisMag->fBp[i] - pthisMagCal->fV[i];
    ac24:	6809      	ldr	r1, [r1, #0]
    ac26:	6980      	ldr	r0, [r0, #24]
    ac28:	f7f6 fad6 	bl	11d8 <__aeabi_fsub>
    ac2c:	6861      	ldr	r1, [r4, #4]
    ac2e:	4681      	mov	r9, r0
    ac30:	69e8      	ldr	r0, [r5, #28]
    ac32:	f7f6 fad1 	bl	11d8 <__aeabi_fsub>
    ac36:	68a1      	ldr	r1, [r4, #8]
    ac38:	4680      	mov	r8, r0
    ac3a:	6a28      	ldr	r0, [r5, #32]
    ac3c:	f7f6 facc 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:260
	}
	// remove the computed soft iron offsets (uT and counts): fBc=inv(W)*(fBp[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBc[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
    ac40:	68e1      	ldr	r1, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:255

	// calculate fBc and iBc for the 6DOF eCompass algorithms
	// remove the computed hard iron offsets (uT): ftmp[]=fBp[]-V[]
	for (i = X; i <= Z; i++)
	{
		ftmp[i] = pthisMag->fBp[i] - pthisMagCal->fV[i];
    ac42:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:260
	}
	// remove the computed soft iron offsets (uT and counts): fBc=inv(W)*(fBp[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBc[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
    ac44:	4648      	mov	r0, r9
    ac46:	f7f6 f995 	bl	f74 <__aeabi_fmul>
    ac4a:	6921      	ldr	r1, [r4, #16]
    ac4c:	4682      	mov	sl, r0
    ac4e:	4640      	mov	r0, r8
    ac50:	f7f6 f990 	bl	f74 <__aeabi_fmul>
    ac54:	1c01      	adds	r1, r0, #0
    ac56:	4650      	mov	r0, sl
    ac58:	f7f5 fe1e 	bl	898 <__aeabi_fadd>
    ac5c:	6961      	ldr	r1, [r4, #20]
    ac5e:	4682      	mov	sl, r0
    ac60:	1c38      	adds	r0, r7, #0
    ac62:	f7f6 f987 	bl	f74 <__aeabi_fmul>
    ac66:	1c01      	adds	r1, r0, #0
    ac68:	4650      	mov	r0, sl
    ac6a:	f7f5 fe15 	bl	898 <__aeabi_fadd>
    ac6e:	6c2e      	ldr	r6, [r5, #64]	; 0x40
    ac70:	6328      	str	r0, [r5, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:261
		pthisMag->iBc[i] = (int16) (pthisMag->fBc[i] * pthisMag->fCountsPeruT);
    ac72:	1c31      	adds	r1, r6, #0
    ac74:	f7f6 f97e 	bl	f74 <__aeabi_fmul>
    ac78:	f7f6 fc2c 	bl	14d4 <__aeabi_f2iz>
    ac7c:	2350      	movs	r3, #80	; 0x50
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:260
		ftmp[i] = pthisMag->fBp[i] - pthisMagCal->fV[i];
	}
	// remove the computed soft iron offsets (uT and counts): fBc=inv(W)*(fBp[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBc[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
    ac7e:	69a1      	ldr	r1, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:261
		pthisMag->iBc[i] = (int16) (pthisMag->fBc[i] * pthisMag->fCountsPeruT);
    ac80:	52e8      	strh	r0, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:260
		ftmp[i] = pthisMag->fBp[i] - pthisMagCal->fV[i];
	}
	// remove the computed soft iron offsets (uT and counts): fBc=inv(W)*(fBp[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBc[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
    ac82:	4648      	mov	r0, r9
    ac84:	f7f6 f976 	bl	f74 <__aeabi_fmul>
    ac88:	69e1      	ldr	r1, [r4, #28]
    ac8a:	4682      	mov	sl, r0
    ac8c:	4640      	mov	r0, r8
    ac8e:	f7f6 f971 	bl	f74 <__aeabi_fmul>
    ac92:	1c01      	adds	r1, r0, #0
    ac94:	4650      	mov	r0, sl
    ac96:	f7f5 fdff 	bl	898 <__aeabi_fadd>
    ac9a:	6a21      	ldr	r1, [r4, #32]
    ac9c:	4682      	mov	sl, r0
    ac9e:	1c38      	adds	r0, r7, #0
    aca0:	f7f6 f968 	bl	f74 <__aeabi_fmul>
    aca4:	1c01      	adds	r1, r0, #0
    aca6:	4650      	mov	r0, sl
    aca8:	f7f5 fdf6 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:261
		pthisMag->iBc[i] = (int16) (pthisMag->fBc[i] * pthisMag->fCountsPeruT);
    acac:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:260
		ftmp[i] = pthisMag->fBp[i] - pthisMagCal->fV[i];
	}
	// remove the computed soft iron offsets (uT and counts): fBc=inv(W)*(fBp[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBc[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
    acae:	6368      	str	r0, [r5, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:261
		pthisMag->iBc[i] = (int16) (pthisMag->fBc[i] * pthisMag->fCountsPeruT);
    acb0:	f7f6 f960 	bl	f74 <__aeabi_fmul>
    acb4:	f7f6 fc0e 	bl	14d4 <__aeabi_f2iz>
    acb8:	2352      	movs	r3, #82	; 0x52
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:260
		ftmp[i] = pthisMag->fBp[i] - pthisMagCal->fV[i];
	}
	// remove the computed soft iron offsets (uT and counts): fBc=inv(W)*(fBp[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBc[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
    acba:	6a61      	ldr	r1, [r4, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:261
		pthisMag->iBc[i] = (int16) (pthisMag->fBc[i] * pthisMag->fCountsPeruT);
    acbc:	52e8      	strh	r0, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:260
		ftmp[i] = pthisMag->fBp[i] - pthisMagCal->fV[i];
	}
	// remove the computed soft iron offsets (uT and counts): fBc=inv(W)*(fBp[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBc[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
    acbe:	4648      	mov	r0, r9
    acc0:	f7f6 f958 	bl	f74 <__aeabi_fmul>
    acc4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    acc6:	4681      	mov	r9, r0
    acc8:	4640      	mov	r0, r8
    acca:	f7f6 f953 	bl	f74 <__aeabi_fmul>
    acce:	1c01      	adds	r1, r0, #0
    acd0:	4648      	mov	r0, r9
    acd2:	f7f5 fde1 	bl	898 <__aeabi_fadd>
    acd6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    acd8:	4680      	mov	r8, r0
    acda:	1c38      	adds	r0, r7, #0
    acdc:	f7f6 f94a 	bl	f74 <__aeabi_fmul>
    ace0:	1c01      	adds	r1, r0, #0
    ace2:	4640      	mov	r0, r8
    ace4:	f7f5 fdd8 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:261
		pthisMag->iBc[i] = (int16) (pthisMag->fBc[i] * pthisMag->fCountsPeruT);
    ace8:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:260
		ftmp[i] = pthisMag->fBp[i] - pthisMagCal->fV[i];
	}
	// remove the computed soft iron offsets (uT and counts): fBc=inv(W)*(fBp[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBc[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
    acea:	63a8      	str	r0, [r5, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:261
		pthisMag->iBc[i] = (int16) (pthisMag->fBc[i] * pthisMag->fCountsPeruT);
    acec:	f7f6 f942 	bl	f74 <__aeabi_fmul>
    acf0:	f7f6 fbf0 	bl	14d4 <__aeabi_f2iz>
    acf4:	2354      	movs	r3, #84	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:268
	
	// calculate fBcFast for the Kalman filter algorithms
	// remove the computed hard iron offsets (uT): ftmp[]=fBpFast[]-V[]
	for (i = X; i <= Z; i++)
	{
		ftmp[i] = pthisMag->fBpFast[i] - pthisMagCal->fV[i];
    acf6:	6821      	ldr	r1, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:261
	}
	// remove the computed soft iron offsets (uT and counts): fBc=inv(W)*(fBp[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBc[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
		pthisMag->iBc[i] = (int16) (pthisMag->fBc[i] * pthisMag->fCountsPeruT);
    acf8:	52e8      	strh	r0, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:268
	
	// calculate fBcFast for the Kalman filter algorithms
	// remove the computed hard iron offsets (uT): ftmp[]=fBpFast[]-V[]
	for (i = X; i <= Z; i++)
	{
		ftmp[i] = pthisMag->fBpFast[i] - pthisMagCal->fV[i];
    acfa:	68e8      	ldr	r0, [r5, #12]
    acfc:	f7f6 fa6c 	bl	11d8 <__aeabi_fsub>
    ad00:	6861      	ldr	r1, [r4, #4]
    ad02:	4680      	mov	r8, r0
    ad04:	6928      	ldr	r0, [r5, #16]
    ad06:	f7f6 fa67 	bl	11d8 <__aeabi_fsub>
    ad0a:	68a1      	ldr	r1, [r4, #8]
    ad0c:	1c07      	adds	r7, r0, #0
    ad0e:	6968      	ldr	r0, [r5, #20]
    ad10:	f7f6 fa62 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:273
	}
	// remove the computed soft iron offsets (uT and counts): fBcFast=inv(W)*(fBpFast[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBcFast[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
    ad14:	68e1      	ldr	r1, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:268
	
	// calculate fBcFast for the Kalman filter algorithms
	// remove the computed hard iron offsets (uT): ftmp[]=fBpFast[]-V[]
	for (i = X; i <= Z; i++)
	{
		ftmp[i] = pthisMag->fBpFast[i] - pthisMagCal->fV[i];
    ad16:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:273
	}
	// remove the computed soft iron offsets (uT and counts): fBcFast=inv(W)*(fBpFast[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBcFast[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
    ad18:	4640      	mov	r0, r8
    ad1a:	f7f6 f92b 	bl	f74 <__aeabi_fmul>
    ad1e:	6921      	ldr	r1, [r4, #16]
    ad20:	4681      	mov	r9, r0
    ad22:	1c38      	adds	r0, r7, #0
    ad24:	f7f6 f926 	bl	f74 <__aeabi_fmul>
    ad28:	1c01      	adds	r1, r0, #0
    ad2a:	4648      	mov	r0, r9
    ad2c:	f7f5 fdb4 	bl	898 <__aeabi_fadd>
    ad30:	6961      	ldr	r1, [r4, #20]
    ad32:	4681      	mov	r9, r0
    ad34:	1c30      	adds	r0, r6, #0
    ad36:	f7f6 f91d 	bl	f74 <__aeabi_fmul>
    ad3a:	1c01      	adds	r1, r0, #0
    ad3c:	4648      	mov	r0, r9
    ad3e:	f7f5 fdab 	bl	898 <__aeabi_fadd>
    ad42:	69a1      	ldr	r1, [r4, #24]
    ad44:	6268      	str	r0, [r5, #36]	; 0x24
    ad46:	4640      	mov	r0, r8
    ad48:	f7f6 f914 	bl	f74 <__aeabi_fmul>
    ad4c:	69e1      	ldr	r1, [r4, #28]
    ad4e:	4681      	mov	r9, r0
    ad50:	1c38      	adds	r0, r7, #0
    ad52:	f7f6 f90f 	bl	f74 <__aeabi_fmul>
    ad56:	1c01      	adds	r1, r0, #0
    ad58:	4648      	mov	r0, r9
    ad5a:	f7f5 fd9d 	bl	898 <__aeabi_fadd>
    ad5e:	6a21      	ldr	r1, [r4, #32]
    ad60:	4681      	mov	r9, r0
    ad62:	1c30      	adds	r0, r6, #0
    ad64:	f7f6 f906 	bl	f74 <__aeabi_fmul>
    ad68:	1c01      	adds	r1, r0, #0
    ad6a:	4648      	mov	r0, r9
    ad6c:	f7f5 fd94 	bl	898 <__aeabi_fadd>
    ad70:	62a8      	str	r0, [r5, #40]	; 0x28
    ad72:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ad74:	4640      	mov	r0, r8
    ad76:	f7f6 f8fd 	bl	f74 <__aeabi_fmul>
    ad7a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    ad7c:	4680      	mov	r8, r0
    ad7e:	1c38      	adds	r0, r7, #0
    ad80:	f7f6 f8f8 	bl	f74 <__aeabi_fmul>
    ad84:	1c01      	adds	r1, r0, #0
    ad86:	4640      	mov	r0, r8
    ad88:	f7f5 fd86 	bl	898 <__aeabi_fadd>
    ad8c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ad8e:	1c07      	adds	r7, r0, #0
    ad90:	1c30      	adds	r0, r6, #0
    ad92:	f7f6 f8ef 	bl	f74 <__aeabi_fmul>
    ad96:	1c01      	adds	r1, r0, #0
    ad98:	1c38      	adds	r0, r7, #0
    ad9a:	f7f5 fd7d 	bl	898 <__aeabi_fadd>
    ad9e:	62e8      	str	r0, [r5, #44]	; 0x2c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:277
	}

	return;
}
    ada0:	b004      	add	sp, #16
    ada2:	bc1c      	pop	{r2, r3, r4}
    ada4:	4690      	mov	r8, r2
    ada6:	4699      	mov	r9, r3
    ada8:	46a2      	mov	sl, r4
    adaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000adac <fUpdateCalibration4INV>:
fUpdateCalibration4INV():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:281

// 4 element calibration using 4x4 matrix inverse
void fUpdateCalibration4INV(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer, struct MagSensor *pthisMag)
{
    adac:	b5f0      	push	{r4, r5, r6, r7, lr}
    adae:	465f      	mov	r7, fp
    adb0:	464d      	mov	r5, r9
    adb2:	4644      	mov	r4, r8
    adb4:	4656      	mov	r6, sl
    adb6:	b4f0      	push	{r4, r5, r6, r7}
    adb8:	b09d      	sub	sp, #116	; 0x74
    adba:	1c07      	adds	r7, r0, #0
    adbc:	9110      	str	r1, [sp, #64]	; 0x40
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:298
	int8 iColInd[4];
	int8 iRowInd[4];
	int8 iPivot[4];

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;
    adbe:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    adc0:	49a7      	ldr	r1, [pc, #668]	; (b060 <fUpdateCalibration4INV+0x2b4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:281
	return;
}

// 4 element calibration using 4x4 matrix inverse
void fUpdateCalibration4INV(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer, struct MagSensor *pthisMag)
{
    adc2:	9211      	str	r2, [sp, #68]	; 0x44
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:298
	int8 iColInd[4];
	int8 iRowInd[4];
	int8 iPivot[4];

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;
    adc4:	f7f5 fee4 	bl	b90 <__aeabi_fdiv>
    adc8:	900d      	str	r0, [sp, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:301

	// the trial inverse soft iron matrix invW always equals the identity matrix for 4 element calibration
	f3x3matrixAeqI(pthisMagCal->ftrinvW);
    adca:	1c38      	adds	r0, r7, #0
    adcc:	3048      	adds	r0, #72	; 0x48
    adce:	f001 fbf7 	bl	c5c0 <f3x3matrixAeqI>
    add2:	2400      	movs	r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:307

	// zero fSumBp4=Y^T.Y, fvecB=X^T.Y (4x1) and on and above diagonal elements of fmatA=X^T*X (4x4)
	fSumBp4 = 0.0F;
	for (i = 0; i < 4; i++)
	{
		pthisMagCal->fvecB[i] = 0.0F;
    add4:	2000      	movs	r0, #0
    add6:	4ba3      	ldr	r3, [pc, #652]	; (b064 <fUpdateCalibration4INV+0x2b8>)
    add8:	18fd      	adds	r5, r7, r3
    adda:	00a1      	lsls	r1, r4, #2
    addc:	b2e2      	uxtb	r2, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:310
		for (j = i; j < 4; j++)
		{
			pthisMagCal->fmatA[i][j] = 0.0F;
    adde:	1909      	adds	r1, r1, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:307

	// zero fSumBp4=Y^T.Y, fvecB=X^T.Y (4x1) and on and above diagonal elements of fmatA=X^T*X (4x4)
	fSumBp4 = 0.0F;
	for (i = 0; i < 4; i++)
	{
		pthisMagCal->fvecB[i] = 0.0F;
    ade0:	6028      	str	r0, [r5, #0]
    ade2:	b253      	sxtb	r3, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:310
		for (j = i; j < 4; j++)
		{
			pthisMagCal->fmatA[i][j] = 0.0F;
    ade4:	0049      	lsls	r1, r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:310 (discriminator 3)
    ade6:	18cb      	adds	r3, r1, r3
    ade8:	332e      	adds	r3, #46	; 0x2e
    adea:	009b      	lsls	r3, r3, #2
    adec:	3201      	adds	r2, #1
    adee:	18fb      	adds	r3, r7, r3
    adf0:	b2d2      	uxtb	r2, r2
    adf2:	6058      	str	r0, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:308 (discriminator 3)
	// zero fSumBp4=Y^T.Y, fvecB=X^T.Y (4x1) and on and above diagonal elements of fmatA=X^T*X (4x4)
	fSumBp4 = 0.0F;
	for (i = 0; i < 4; i++)
	{
		pthisMagCal->fvecB[i] = 0.0F;
		for (j = i; j < 4; j++)
    adf4:	b253      	sxtb	r3, r2
    adf6:	2b03      	cmp	r3, #3
    adf8:	ddf5      	ble.n	ade6 <fUpdateCalibration4INV+0x3a>
    adfa:	3401      	adds	r4, #1
    adfc:	3504      	adds	r5, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:305 (discriminator 2)
	// the trial inverse soft iron matrix invW always equals the identity matrix for 4 element calibration
	f3x3matrixAeqI(pthisMagCal->ftrinvW);

	// zero fSumBp4=Y^T.Y, fvecB=X^T.Y (4x1) and on and above diagonal elements of fmatA=X^T*X (4x4)
	fSumBp4 = 0.0F;
	for (i = 0; i < 4; i++)
    adfe:	2c04      	cmp	r4, #4
    ae00:	d1eb      	bne.n	adda <fUpdateCalibration4INV+0x2e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:315
			pthisMagCal->fmatA[i][j] = 0.0F;
		}
	}

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
    ae02:	2300      	movs	r3, #0
    ae04:	aa10      	add	r2, sp, #64	; 0x40
    ae06:	8393      	strh	r3, [r2, #28]
    ae08:	8353      	strh	r3, [r2, #26]
    ae0a:	33bc      	adds	r3, #188	; 0xbc
    ae0c:	58fb      	ldr	r3, [r7, r3]
    ae0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ae10:	9306      	str	r3, [sp, #24]
    ae12:	2300      	movs	r3, #0
    ae14:	21d8      	movs	r1, #216	; 0xd8
    ae16:	930c      	str	r3, [sp, #48]	; 0x30
    ae18:	930b      	str	r3, [sp, #44]	; 0x2c
    ae1a:	1c13      	adds	r3, r2, #0
    ae1c:	00c9      	lsls	r1, r1, #3
    ae1e:	3330      	adds	r3, #48	; 0x30
    ae20:	9309      	str	r3, [sp, #36]	; 0x24
    ae22:	468c      	mov	ip, r1
    ae24:	1c13      	adds	r3, r2, #0
    ae26:	4463      	add	r3, ip
    ae28:	930e      	str	r3, [sp, #56]	; 0x38
    ae2a:	1c13      	adds	r3, r2, #0
    ae2c:	229c      	movs	r2, #156	; 0x9c
    ae2e:	0092      	lsls	r2, r2, #2
    ae30:	4694      	mov	ip, r2
    ae32:	4463      	add	r3, ip
    ae34:	930f      	str	r3, [sp, #60]	; 0x3c
    ae36:	2300      	movs	r3, #0
    ae38:	930a      	str	r3, [sp, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:318

	// use from MINEQUATIONS up to MAXEQUATIONS entries from magnetic buffer to compute matrices
	iCount = 0;
    ae3a:	9303      	str	r3, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:304

	// the trial inverse soft iron matrix invW always equals the identity matrix for 4 element calibration
	f3x3matrixAeqI(pthisMagCal->ftrinvW);

	// zero fSumBp4=Y^T.Y, fvecB=X^T.Y (4x1) and on and above diagonal elements of fmatA=X^T*X (4x4)
	fSumBp4 = 0.0F;
    ae3c:	2300      	movs	r3, #0
    ae3e:	1c3c      	adds	r4, r7, #0
    ae40:	9305      	str	r3, [sp, #20]
    ae42:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ae44:	2230      	movs	r2, #48	; 0x30
    ae46:	4252      	negs	r2, r2
    ae48:	4694      	mov	ip, r2
    ae4a:	4463      	add	r3, ip
    ae4c:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:301

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;

	// the trial inverse soft iron matrix invW always equals the identity matrix for 4 element calibration
	f3x3matrixAeqI(pthisMagCal->ftrinvW);
    ae4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ae50:	46ca      	mov	sl, r9
    ae52:	4699      	mov	r9, r3
    ae54:	e0eb      	b.n	b02e <fUpdateCalibration4INV+0x282>
    ae56:	4653      	mov	r3, sl
    ae58:	2200      	movs	r2, #0
    ae5a:	5e9b      	ldrsh	r3, [r3, r2]
    ae5c:	466a      	mov	r2, sp
    ae5e:	2028      	movs	r0, #40	; 0x28
    ae60:	5e10      	ldrsh	r0, [r2, r0]
    ae62:	1a18      	subs	r0, r3, r0
    ae64:	f7f6 fb56 	bl	1514 <__aeabi_i2f>
    ae68:	2390      	movs	r3, #144	; 0x90
    ae6a:	009b      	lsls	r3, r3, #2
    ae6c:	4453      	add	r3, sl
    ae6e:	2200      	movs	r2, #0
    ae70:	5e9b      	ldrsh	r3, [r3, r2]
    ae72:	466a      	mov	r2, sp
    ae74:	1c07      	adds	r7, r0, #0
    ae76:	2030      	movs	r0, #48	; 0x30
    ae78:	5e10      	ldrsh	r0, [r2, r0]
    ae7a:	1a18      	subs	r0, r3, r0
    ae7c:	f7f6 fb4a 	bl	1514 <__aeabi_i2f>
    ae80:	2390      	movs	r3, #144	; 0x90
    ae82:	00db      	lsls	r3, r3, #3
    ae84:	4453      	add	r3, sl
    ae86:	2200      	movs	r2, #0
    ae88:	5e9b      	ldrsh	r3, [r3, r2]
    ae8a:	466a      	mov	r2, sp
    ae8c:	1c06      	adds	r6, r0, #0
    ae8e:	202c      	movs	r0, #44	; 0x2c
    ae90:	5e10      	ldrsh	r0, [r2, r0]
    ae92:	1a18      	subs	r0, r3, r0
    ae94:	f7f6 fb3e 	bl	1514 <__aeabi_i2f>
    ae98:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:337 (discriminator 1)
				}

				// store scaled and offset fBp[XYZ] in fvecA[0-2] and fBp[XYZ]^2 in fvecA[3-5]
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    ae9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ae9c:	1c39      	adds	r1, r7, #0
    ae9e:	1c18      	adds	r0, r3, #0
    aea0:	4698      	mov	r8, r3
    aea2:	f7f6 f867 	bl	f74 <__aeabi_fmul>
    aea6:	23f7      	movs	r3, #247	; 0xf7
    aea8:	1c07      	adds	r7, r0, #0
    aeaa:	009b      	lsls	r3, r3, #2
    aeac:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:338 (discriminator 1)
					pthisMagCal->fvecA[l + 3] = pthisMagCal->fvecA[l] * pthisMagCal->fvecA[l];
    aeae:	1c39      	adds	r1, r7, #0
    aeb0:	f7f6 f860 	bl	f74 <__aeabi_fmul>
    aeb4:	22fa      	movs	r2, #250	; 0xfa
    aeb6:	0092      	lsls	r2, r2, #2
    aeb8:	50a0      	str	r0, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:337 (discriminator 1)
				}

				// store scaled and offset fBp[XYZ] in fvecA[0-2] and fBp[XYZ]^2 in fvecA[3-5]
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    aeba:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:338 (discriminator 1)
					pthisMagCal->fvecA[l + 3] = pthisMagCal->fvecA[l] * pthisMagCal->fvecA[l];
    aebc:	9004      	str	r0, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:337 (discriminator 1)
				}

				// store scaled and offset fBp[XYZ] in fvecA[0-2] and fBp[XYZ]^2 in fvecA[3-5]
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    aebe:	4640      	mov	r0, r8
    aec0:	f7f6 f858 	bl	f74 <__aeabi_fmul>
    aec4:	22f8      	movs	r2, #248	; 0xf8
    aec6:	1c06      	adds	r6, r0, #0
    aec8:	0092      	lsls	r2, r2, #2
    aeca:	50a0      	str	r0, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:338 (discriminator 1)
					pthisMagCal->fvecA[l + 3] = pthisMagCal->fvecA[l] * pthisMagCal->fvecA[l];
    aecc:	1c31      	adds	r1, r6, #0
    aece:	f7f6 f851 	bl	f74 <__aeabi_fmul>
    aed2:	21fb      	movs	r1, #251	; 0xfb
    aed4:	0089      	lsls	r1, r1, #2
    aed6:	4683      	mov	fp, r0
    aed8:	5060      	str	r0, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:337 (discriminator 1)
				}

				// store scaled and offset fBp[XYZ] in fvecA[0-2] and fBp[XYZ]^2 in fvecA[3-5]
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    aeda:	1c29      	adds	r1, r5, #0
    aedc:	4640      	mov	r0, r8
    aede:	f7f6 f849 	bl	f74 <__aeabi_fmul>
    aee2:	21f9      	movs	r1, #249	; 0xf9
    aee4:	1c05      	adds	r5, r0, #0
    aee6:	0089      	lsls	r1, r1, #2
    aee8:	5060      	str	r0, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:338 (discriminator 1)
					pthisMagCal->fvecA[l + 3] = pthisMagCal->fvecA[l] * pthisMagCal->fvecA[l];
    aeea:	1c29      	adds	r1, r5, #0
    aeec:	f7f6 f842 	bl	f74 <__aeabi_fmul>
    aef0:	23fc      	movs	r3, #252	; 0xfc
    aef2:	009b      	lsls	r3, r3, #2
    aef4:	4680      	mov	r8, r0
    aef6:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:342 (discriminator 1)
				}

				// calculate fBp2 = fBp[X]^2 + fBp[Y]^2 + fBp[Z]^2 (scaled uT^2) 
				fBp2 = pthisMagCal->fvecA[3] + pthisMagCal->fvecA[4] + pthisMagCal->fvecA[5];
    aef8:	465b      	mov	r3, fp
    aefa:	4659      	mov	r1, fp
    aefc:	9804      	ldr	r0, [sp, #16]
    aefe:	9307      	str	r3, [sp, #28]
    af00:	f7f5 fcca 	bl	898 <__aeabi_fadd>
    af04:	4643      	mov	r3, r8
    af06:	4641      	mov	r1, r8
    af08:	9308      	str	r3, [sp, #32]
    af0a:	f7f5 fcc5 	bl	898 <__aeabi_fadd>
    af0e:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:345 (discriminator 1)

				// accumulate fBp^4 over all measurements into fSumBp4=Y^T.Y
				fSumBp4 += fBp2 * fBp2;
    af10:	4641      	mov	r1, r8
    af12:	f7f6 f82f 	bl	f74 <__aeabi_fmul>
    af16:	1c01      	adds	r1, r0, #0
    af18:	9805      	ldr	r0, [sp, #20]
    af1a:	f7f5 fcbd 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:350 (discriminator 1)

				// now we have fBp2, accumulate fvecB[0-2] = X^T.Y =sum(fBp2.fBp[XYZ])
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecB[l] += pthisMagCal->fvecA[l] * fBp2;
    af1e:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:345 (discriminator 1)

				// calculate fBp2 = fBp[X]^2 + fBp[Y]^2 + fBp[Z]^2 (scaled uT^2) 
				fBp2 = pthisMagCal->fvecA[3] + pthisMagCal->fvecA[4] + pthisMagCal->fvecA[5];

				// accumulate fBp^4 over all measurements into fSumBp4=Y^T.Y
				fSumBp4 += fBp2 * fBp2;
    af20:	9005      	str	r0, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:350 (discriminator 1)

				// now we have fBp2, accumulate fvecB[0-2] = X^T.Y =sum(fBp2.fBp[XYZ])
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecB[l] += pthisMagCal->fvecA[l] * fBp2;
    af22:	4640      	mov	r0, r8
    af24:	f7f6 f826 	bl	f74 <__aeabi_fmul>
    af28:	1c01      	adds	r1, r0, #0
    af2a:	484e      	ldr	r0, [pc, #312]	; (b064 <fUpdateCalibration4INV+0x2b8>)
    af2c:	5820      	ldr	r0, [r4, r0]
    af2e:	f7f5 fcb3 	bl	898 <__aeabi_fadd>
    af32:	4b4c      	ldr	r3, [pc, #304]	; (b064 <fUpdateCalibration4INV+0x2b8>)
    af34:	1c31      	adds	r1, r6, #0
    af36:	50e0      	str	r0, [r4, r3]
    af38:	4640      	mov	r0, r8
    af3a:	f7f6 f81b 	bl	f74 <__aeabi_fmul>
    af3e:	1c01      	adds	r1, r0, #0
    af40:	2081      	movs	r0, #129	; 0x81
    af42:	00c0      	lsls	r0, r0, #3
    af44:	5820      	ldr	r0, [r4, r0]
    af46:	f7f5 fca7 	bl	898 <__aeabi_fadd>
    af4a:	2381      	movs	r3, #129	; 0x81
    af4c:	00db      	lsls	r3, r3, #3
    af4e:	50e0      	str	r0, [r4, r3]
    af50:	4845      	ldr	r0, [pc, #276]	; (b068 <fUpdateCalibration4INV+0x2bc>)
    af52:	1c29      	adds	r1, r5, #0
    af54:	4683      	mov	fp, r0
    af56:	4640      	mov	r0, r8
    af58:	f7f6 f80c 	bl	f74 <__aeabi_fmul>
    af5c:	1c01      	adds	r1, r0, #0
    af5e:	4658      	mov	r0, fp
    af60:	5820      	ldr	r0, [r4, r0]
    af62:	f7f5 fc99 	bl	898 <__aeabi_fadd>
    af66:	465b      	mov	r3, fp
    af68:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:354 (discriminator 1)
				}

				//accumulate fvecB[3] = X^T.Y =sum(fBp2)
				pthisMagCal->fvecB[3] += fBp2;
    af6a:	2082      	movs	r0, #130	; 0x82
    af6c:	00c0      	lsls	r0, r0, #3
    af6e:	4683      	mov	fp, r0
    af70:	4641      	mov	r1, r8
    af72:	5820      	ldr	r0, [r4, r0]
    af74:	f7f5 fc90 	bl	898 <__aeabi_fadd>
    af78:	465b      	mov	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:357 (discriminator 1)

				// accumulate on and above-diagonal terms of fmatA = X^T.X ignoring fmatA[3][3]
				pthisMagCal->fmatA[0][0] += pthisMagCal->fvecA[X + 3];
    af7a:	9904      	ldr	r1, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:354 (discriminator 1)
				{
					pthisMagCal->fvecB[l] += pthisMagCal->fvecA[l] * fBp2;
				}

				//accumulate fvecB[3] = X^T.Y =sum(fBp2)
				pthisMagCal->fvecB[3] += fBp2;
    af7c:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:357 (discriminator 1)

				// accumulate on and above-diagonal terms of fmatA = X^T.X ignoring fmatA[3][3]
				pthisMagCal->fmatA[0][0] += pthisMagCal->fvecA[X + 3];
    af7e:	9806      	ldr	r0, [sp, #24]
    af80:	f7f5 fc8a 	bl	898 <__aeabi_fadd>
    af84:	23bc      	movs	r3, #188	; 0xbc
    af86:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:358 (discriminator 1)
				pthisMagCal->fmatA[0][1] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Y];
    af88:	3304      	adds	r3, #4
    af8a:	4698      	mov	r8, r3
    af8c:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:357 (discriminator 1)

				//accumulate fvecB[3] = X^T.Y =sum(fBp2)
				pthisMagCal->fvecB[3] += fBp2;

				// accumulate on and above-diagonal terms of fmatA = X^T.X ignoring fmatA[3][3]
				pthisMagCal->fmatA[0][0] += pthisMagCal->fvecA[X + 3];
    af8e:	9006      	str	r0, [sp, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:358 (discriminator 1)
				pthisMagCal->fmatA[0][1] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Y];
    af90:	1c38      	adds	r0, r7, #0
    af92:	f7f5 ffef 	bl	f74 <__aeabi_fmul>
    af96:	4643      	mov	r3, r8
    af98:	1c01      	adds	r1, r0, #0
    af9a:	58e0      	ldr	r0, [r4, r3]
    af9c:	f7f5 fc7c 	bl	898 <__aeabi_fadd>
    afa0:	4643      	mov	r3, r8
    afa2:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:359 (discriminator 1)
				pthisMagCal->fmatA[0][2] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Z];
    afa4:	3304      	adds	r3, #4
    afa6:	4698      	mov	r8, r3
    afa8:	1c38      	adds	r0, r7, #0
    afaa:	1c29      	adds	r1, r5, #0
    afac:	f7f5 ffe2 	bl	f74 <__aeabi_fmul>
    afb0:	4643      	mov	r3, r8
    afb2:	1c01      	adds	r1, r0, #0
    afb4:	58e0      	ldr	r0, [r4, r3]
    afb6:	f7f5 fc6f 	bl	898 <__aeabi_fadd>
    afba:	4643      	mov	r3, r8
    afbc:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:360 (discriminator 1)
				pthisMagCal->fmatA[0][3] += pthisMagCal->fvecA[X];
    afbe:	3304      	adds	r3, #4
    afc0:	4698      	mov	r8, r3
    afc2:	58e0      	ldr	r0, [r4, r3]
    afc4:	1c39      	adds	r1, r7, #0
    afc6:	f7f5 fc67 	bl	898 <__aeabi_fadd>
    afca:	4643      	mov	r3, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:361 (discriminator 1)
				pthisMagCal->fmatA[1][1] += pthisMagCal->fvecA[Y + 3];
    afcc:	27e8      	movs	r7, #232	; 0xe8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:360 (discriminator 1)

				// accumulate on and above-diagonal terms of fmatA = X^T.X ignoring fmatA[3][3]
				pthisMagCal->fmatA[0][0] += pthisMagCal->fvecA[X + 3];
				pthisMagCal->fmatA[0][1] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Y];
				pthisMagCal->fmatA[0][2] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Z];
				pthisMagCal->fmatA[0][3] += pthisMagCal->fvecA[X];
    afce:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:361 (discriminator 1)
				pthisMagCal->fmatA[1][1] += pthisMagCal->fvecA[Y + 3];
    afd0:	59e0      	ldr	r0, [r4, r7]
    afd2:	9907      	ldr	r1, [sp, #28]
    afd4:	f7f5 fc60 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:362 (discriminator 1)
				pthisMagCal->fmatA[1][2] += pthisMagCal->fvecA[Y] * pthisMagCal->fvecA[Z];
    afd8:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:361 (discriminator 1)
				// accumulate on and above-diagonal terms of fmatA = X^T.X ignoring fmatA[3][3]
				pthisMagCal->fmatA[0][0] += pthisMagCal->fvecA[X + 3];
				pthisMagCal->fmatA[0][1] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Y];
				pthisMagCal->fmatA[0][2] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Z];
				pthisMagCal->fmatA[0][3] += pthisMagCal->fvecA[X];
				pthisMagCal->fmatA[1][1] += pthisMagCal->fvecA[Y + 3];
    afda:	51e0      	str	r0, [r4, r7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:362 (discriminator 1)
				pthisMagCal->fmatA[1][2] += pthisMagCal->fvecA[Y] * pthisMagCal->fvecA[Z];
    afdc:	1c30      	adds	r0, r6, #0
    afde:	f7f5 ffc9 	bl	f74 <__aeabi_fmul>
    afe2:	3704      	adds	r7, #4
    afe4:	1c01      	adds	r1, r0, #0
    afe6:	59e0      	ldr	r0, [r4, r7]
    afe8:	f7f5 fc56 	bl	898 <__aeabi_fadd>
    afec:	51e0      	str	r0, [r4, r7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:363 (discriminator 1)
				pthisMagCal->fmatA[1][3] += pthisMagCal->fvecA[Y];
    afee:	3704      	adds	r7, #4
    aff0:	59e0      	ldr	r0, [r4, r7]
    aff2:	1c31      	adds	r1, r6, #0
    aff4:	f7f5 fc50 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:364 (discriminator 1)
				pthisMagCal->fmatA[2][2] += pthisMagCal->fvecA[Z + 3];
    aff8:	268a      	movs	r6, #138	; 0x8a
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:363 (discriminator 1)
				pthisMagCal->fmatA[0][1] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Y];
				pthisMagCal->fmatA[0][2] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Z];
				pthisMagCal->fmatA[0][3] += pthisMagCal->fvecA[X];
				pthisMagCal->fmatA[1][1] += pthisMagCal->fvecA[Y + 3];
				pthisMagCal->fmatA[1][2] += pthisMagCal->fvecA[Y] * pthisMagCal->fvecA[Z];
				pthisMagCal->fmatA[1][3] += pthisMagCal->fvecA[Y];
    affa:	51e0      	str	r0, [r4, r7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:364 (discriminator 1)
				pthisMagCal->fmatA[2][2] += pthisMagCal->fvecA[Z + 3];
    affc:	0076      	lsls	r6, r6, #1
    affe:	59a0      	ldr	r0, [r4, r6]
    b000:	9908      	ldr	r1, [sp, #32]
    b002:	f7f5 fc49 	bl	898 <__aeabi_fadd>
    b006:	51a0      	str	r0, [r4, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:365 (discriminator 1)
				pthisMagCal->fmatA[2][3] += pthisMagCal->fvecA[Z];
    b008:	3604      	adds	r6, #4
    b00a:	59a0      	ldr	r0, [r4, r6]
    b00c:	1c29      	adds	r1, r5, #0
    b00e:	f7f5 fc43 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:368 (discriminator 1)

				// increment the counter for next iteration
				iCount++;
    b012:	9b03      	ldr	r3, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:365 (discriminator 1)
				pthisMagCal->fmatA[0][3] += pthisMagCal->fvecA[X];
				pthisMagCal->fmatA[1][1] += pthisMagCal->fvecA[Y + 3];
				pthisMagCal->fmatA[1][2] += pthisMagCal->fvecA[Y] * pthisMagCal->fvecA[Z];
				pthisMagCal->fmatA[1][3] += pthisMagCal->fvecA[Y];
				pthisMagCal->fmatA[2][2] += pthisMagCal->fvecA[Z + 3];
				pthisMagCal->fmatA[2][3] += pthisMagCal->fvecA[Z];
    b014:	51a0      	str	r0, [r4, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:368 (discriminator 1)

				// increment the counter for next iteration
				iCount++;
    b016:	3301      	adds	r3, #1
    b018:	b29b      	uxth	r3, r3
    b01a:	9303      	str	r3, [sp, #12]
    b01c:	2304      	movs	r3, #4
    b01e:	469c      	mov	ip, r3
    b020:	3b02      	subs	r3, #2
    b022:	44e1      	add	r9, ip
    b024:	469c      	mov	ip, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:321 (discriminator 2)

	// use from MINEQUATIONS up to MAXEQUATIONS entries from magnetic buffer to compute matrices
	iCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
	{
		for (k = 0; k < MAGBUFFSIZEY; k++)
    b026:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b028:	44e2      	add	sl, ip
    b02a:	459a      	cmp	sl, r3
    b02c:	d01e      	beq.n	b06c <fUpdateCalibration4INV+0x2c0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:323
		{
			if (pthisMagBuffer->index[j][k] != -1)
    b02e:	464b      	mov	r3, r9
    b030:	681b      	ldr	r3, [r3, #0]
    b032:	3301      	adds	r3, #1
    b034:	d0f2      	beq.n	b01c <fUpdateCalibration4INV+0x270>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:326
			{
				// use first valid magnetic buffer entry as estimate (in counts) for offset
				if (iCount == 0)
    b036:	9b03      	ldr	r3, [sp, #12]
    b038:	2b00      	cmp	r3, #0
    b03a:	d000      	beq.n	b03e <fUpdateCalibration4INV+0x292>
    b03c:	e70b      	b.n	ae56 <fUpdateCalibration4INV+0xaa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:330 (discriminator 1)
				{
					for (l = X; l <= Z; l++)
					{
						iOffset[l] = pthisMagBuffer->iBpFast[l][j][k];
    b03e:	4653      	mov	r3, sl
    b040:	881b      	ldrh	r3, [r3, #0]
    b042:	2500      	movs	r5, #0
    b044:	930a      	str	r3, [sp, #40]	; 0x28
    b046:	2390      	movs	r3, #144	; 0x90
    b048:	009b      	lsls	r3, r3, #2
    b04a:	4453      	add	r3, sl
    b04c:	881b      	ldrh	r3, [r3, #0]
    b04e:	1c2e      	adds	r6, r5, #0
    b050:	930c      	str	r3, [sp, #48]	; 0x30
    b052:	2390      	movs	r3, #144	; 0x90
    b054:	00db      	lsls	r3, r3, #3
    b056:	4453      	add	r3, sl
    b058:	881b      	ldrh	r3, [r3, #0]
    b05a:	1c2f      	adds	r7, r5, #0
    b05c:	930b      	str	r3, [sp, #44]	; 0x2c
    b05e:	e71c      	b.n	ae9a <fUpdateCalibration4INV+0xee>
    b060:	42480000 	.word	0x42480000
    b064:	00000404 	.word	0x00000404
    b068:	0000040c 	.word	0x0000040c
    b06c:	4653      	mov	r3, sl
    b06e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b070:	3330      	adds	r3, #48	; 0x30
    b072:	3260      	adds	r2, #96	; 0x60
    b074:	920e      	str	r2, [sp, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:319 (discriminator 2)
	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;

	// use from MINEQUATIONS up to MAXEQUATIONS entries from magnetic buffer to compute matrices
	iCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
    b076:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b078:	9309      	str	r3, [sp, #36]	; 0x24
    b07a:	4293      	cmp	r3, r2
    b07c:	d000      	beq.n	b080 <fUpdateCalibration4INV+0x2d4>
    b07e:	e6e1      	b.n	ae44 <fUpdateCalibration4INV+0x98>
    b080:	466a      	mov	r2, sp
    b082:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    b084:	ab10      	add	r3, sp, #64	; 0x40
    b086:	831a      	strh	r2, [r3, #24]
    b088:	466a      	mov	r2, sp
    b08a:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    b08c:	1c27      	adds	r7, r4, #0
    b08e:	835a      	strh	r2, [r3, #26]
    b090:	466a      	mov	r2, sp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:374
			}
		}
	}

	// set the last element of the measurement matrix to the number of buffer elements used
	pthisMagCal->fmatA[3][3] = (float) iCount;
    b092:	9c03      	ldr	r4, [sp, #12]
    b094:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
    b096:	b220      	sxth	r0, r4
    b098:	839a      	strh	r2, [r3, #28]
    b09a:	f7f6 fa3b 	bl	1514 <__aeabi_i2f>
    b09e:	23a0      	movs	r3, #160	; 0xa0
    b0a0:	005b      	lsls	r3, r3, #1
    b0a2:	50f8      	str	r0, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:377

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;
    b0a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b0a6:	4bfc      	ldr	r3, [pc, #1008]	; (b498 <fUpdateCalibration4INV+0x6ec>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:384
	// use above diagonal elements of symmetric fmatA to set both fmatB and fmatA to X^T.X
	for (i = 0; i < 4; i++)
	{
		for (j = i; j < 4; j++)
		{
			pthisMagCal->fmatB[i][j] = pthisMagCal->fmatB[j][i] = pthisMagCal->fmatA[j][i] = pthisMagCal->fmatA[i][j];
    b0a8:	2593      	movs	r5, #147	; 0x93
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:377

	// set the last element of the measurement matrix to the number of buffer elements used
	pthisMagCal->fmatA[3][3] = (float) iCount;

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;
    b0aa:	52d4      	strh	r4, [r2, r3]
    b0ac:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:384
	// use above diagonal elements of symmetric fmatA to set both fmatB and fmatA to X^T.X
	for (i = 0; i < 4; i++)
	{
		for (j = i; j < 4; j++)
		{
			pthisMagCal->fmatB[i][j] = pthisMagCal->fmatB[j][i] = pthisMagCal->fmatA[j][i] = pthisMagCal->fmatA[i][j];
    b0ae:	26bc      	movs	r6, #188	; 0xbc
    b0b0:	1c1c      	adds	r4, r3, #0
    b0b2:	00ad      	lsls	r5, r5, #2
    b0b4:	00a2      	lsls	r2, r4, #2
    b0b6:	1912      	adds	r2, r2, r4
    b0b8:	0052      	lsls	r2, r2, #1
    b0ba:	4694      	mov	ip, r2
    b0bc:	46a1      	mov	r9, r4
    b0be:	b2e1      	uxtb	r1, r4
    b0c0:	b24b      	sxtb	r3, r1
    b0c2:	009c      	lsls	r4, r3, #2
    b0c4:	4662      	mov	r2, ip
    b0c6:	46a0      	mov	r8, r4
    b0c8:	18d2      	adds	r2, r2, r3
    b0ca:	4443      	add	r3, r8
    b0cc:	0092      	lsls	r2, r2, #2
    b0ce:	005b      	lsls	r3, r3, #1
    b0d0:	18ba      	adds	r2, r7, r2
    b0d2:	444b      	add	r3, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:384 (discriminator 3)
    b0d4:	5990      	ldr	r0, [r2, r6]
    b0d6:	009b      	lsls	r3, r3, #2
    b0d8:	3101      	adds	r1, #1
    b0da:	18fb      	adds	r3, r7, r3
    b0dc:	b2c9      	uxtb	r1, r1
    b0de:	5198      	str	r0, [r3, r6]
    b0e0:	5158      	str	r0, [r3, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:382 (discriminator 3)
	pthisMagBuffer->iMagBufferCount = iCount;

	// use above diagonal elements of symmetric fmatA to set both fmatB and fmatA to X^T.X
	for (i = 0; i < 4; i++)
	{
		for (j = i; j < 4; j++)
    b0e2:	b24b      	sxtb	r3, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:384 (discriminator 3)
		{
			pthisMagCal->fmatB[i][j] = pthisMagCal->fmatB[j][i] = pthisMagCal->fmatA[j][i] = pthisMagCal->fmatA[i][j];
    b0e4:	5150      	str	r0, [r2, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:382 (discriminator 3)
	pthisMagBuffer->iMagBufferCount = iCount;

	// use above diagonal elements of symmetric fmatA to set both fmatB and fmatA to X^T.X
	for (i = 0; i < 4; i++)
	{
		for (j = i; j < 4; j++)
    b0e6:	2b03      	cmp	r3, #3
    b0e8:	ddeb      	ble.n	b0c2 <fUpdateCalibration4INV+0x316>
    b0ea:	464c      	mov	r4, r9
    b0ec:	3401      	adds	r4, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:380 (discriminator 2)

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;

	// use above diagonal elements of symmetric fmatA to set both fmatB and fmatA to X^T.X
	for (i = 0; i < 4; i++)
    b0ee:	2c04      	cmp	r4, #4
    b0f0:	d1e0      	bne.n	b0b4 <fUpdateCalibration4INV+0x308>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:391 (discriminator 1)
	}

	// calculate in situ inverse of fmatB = inv(X^T.X) (4x4) while fmatA still holds X^T.X
	for (i = 0; i < 4; i++)
	{
		pfRows[i] = pthisMagCal->fmatB[i];
    b0f2:	2393      	movs	r3, #147	; 0x93
    b0f4:	009b      	lsls	r3, r3, #2
    b0f6:	18fb      	adds	r3, r7, r3
    b0f8:	9318      	str	r3, [sp, #96]	; 0x60
    b0fa:	239d      	movs	r3, #157	; 0x9d
    b0fc:	009b      	lsls	r3, r3, #2
    b0fe:	18fb      	adds	r3, r7, r3
    b100:	9319      	str	r3, [sp, #100]	; 0x64
    b102:	23a7      	movs	r3, #167	; 0xa7
    b104:	009b      	lsls	r3, r3, #2
    b106:	18fb      	adds	r3, r7, r3
    b108:	931a      	str	r3, [sp, #104]	; 0x68
    b10a:	23b1      	movs	r3, #177	; 0xb1
    b10c:	009b      	lsls	r3, r3, #2
    b10e:	18fb      	adds	r3, r7, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:393 (discriminator 1)
	}
	fmatrixAeqInvA(pfRows, iColInd, iRowInd, iPivot, 4);
    b110:	aa14      	add	r2, sp, #80	; 0x50
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:391 (discriminator 1)
	}

	// calculate in situ inverse of fmatB = inv(X^T.X) (4x4) while fmatA still holds X^T.X
	for (i = 0; i < 4; i++)
	{
		pfRows[i] = pthisMagCal->fmatB[i];
    b112:	931b      	str	r3, [sp, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:393 (discriminator 1)
	}
	fmatrixAeqInvA(pfRows, iColInd, iRowInd, iPivot, 4);
    b114:	9400      	str	r4, [sp, #0]
    b116:	a818      	add	r0, sp, #96	; 0x60
    b118:	a913      	add	r1, sp, #76	; 0x4c
    b11a:	ab15      	add	r3, sp, #84	; 0x54
    b11c:	f001 fe10 	bl	cd40 <fmatrixAeqInvA>
    b120:	4bde      	ldr	r3, [pc, #888]	; (b49c <fUpdateCalibration4INV+0x6f0>)
    b122:	58fb      	ldr	r3, [r7, r3]
    b124:	4698      	mov	r8, r3
    b126:	2381      	movs	r3, #129	; 0x81
    b128:	00db      	lsls	r3, r3, #3
    b12a:	58fb      	ldr	r3, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:401 (discriminator 1)
	for (i = 0; i < 4; i++)
	{
		pthisMagCal->fvecA[i] = 0.0F;
		for (k = 0; k < 4; k++)
		{
			pthisMagCal->fvecA[i] += pthisMagCal->fmatB[i][k] * pthisMagCal->fvecB[k];
    b12c:	4640      	mov	r0, r8
    b12e:	4699      	mov	r9, r3
    b130:	4bdb      	ldr	r3, [pc, #876]	; (b4a0 <fUpdateCalibration4INV+0x6f4>)
    b132:	58fb      	ldr	r3, [r7, r3]
    b134:	469a      	mov	sl, r3
    b136:	2382      	movs	r3, #130	; 0x82
    b138:	00db      	lsls	r3, r3, #3
    b13a:	58fb      	ldr	r3, [r7, r3]
    b13c:	469b      	mov	fp, r3
    b13e:	2393      	movs	r3, #147	; 0x93
    b140:	009b      	lsls	r3, r3, #2
    b142:	58f9      	ldr	r1, [r7, r3]
    b144:	f7f5 ff16 	bl	f74 <__aeabi_fmul>
    b148:	2100      	movs	r1, #0
    b14a:	f7f5 fba5 	bl	898 <__aeabi_fadd>
    b14e:	2394      	movs	r3, #148	; 0x94
    b150:	009b      	lsls	r3, r3, #2
    b152:	58f9      	ldr	r1, [r7, r3]
    b154:	1c04      	adds	r4, r0, #0
    b156:	4648      	mov	r0, r9
    b158:	f7f5 ff0c 	bl	f74 <__aeabi_fmul>
    b15c:	1c01      	adds	r1, r0, #0
    b15e:	1c20      	adds	r0, r4, #0
    b160:	f7f5 fb9a 	bl	898 <__aeabi_fadd>
    b164:	2395      	movs	r3, #149	; 0x95
    b166:	009b      	lsls	r3, r3, #2
    b168:	58f9      	ldr	r1, [r7, r3]
    b16a:	1c04      	adds	r4, r0, #0
    b16c:	4650      	mov	r0, sl
    b16e:	f7f5 ff01 	bl	f74 <__aeabi_fmul>
    b172:	1c01      	adds	r1, r0, #0
    b174:	1c20      	adds	r0, r4, #0
    b176:	f7f5 fb8f 	bl	898 <__aeabi_fadd>
    b17a:	2396      	movs	r3, #150	; 0x96
    b17c:	009b      	lsls	r3, r3, #2
    b17e:	58f9      	ldr	r1, [r7, r3]
    b180:	1c04      	adds	r4, r0, #0
    b182:	4658      	mov	r0, fp
    b184:	f7f5 fef6 	bl	f74 <__aeabi_fmul>
    b188:	1c01      	adds	r1, r0, #0
    b18a:	1c20      	adds	r0, r4, #0
    b18c:	f7f5 fb84 	bl	898 <__aeabi_fadd>
    b190:	23f7      	movs	r3, #247	; 0xf7
    b192:	009b      	lsls	r3, r3, #2
    b194:	50f8      	str	r0, [r7, r3]
    b196:	3b69      	subs	r3, #105	; 0x69
    b198:	3bff      	subs	r3, #255	; 0xff
    b19a:	58f9      	ldr	r1, [r7, r3]
    b19c:	9003      	str	r0, [sp, #12]
    b19e:	4640      	mov	r0, r8
    b1a0:	f7f5 fee8 	bl	f74 <__aeabi_fmul>
    b1a4:	2100      	movs	r1, #0
    b1a6:	f7f5 fb77 	bl	898 <__aeabi_fadd>
    b1aa:	239e      	movs	r3, #158	; 0x9e
    b1ac:	009b      	lsls	r3, r3, #2
    b1ae:	58f9      	ldr	r1, [r7, r3]
    b1b0:	1c04      	adds	r4, r0, #0
    b1b2:	4648      	mov	r0, r9
    b1b4:	f7f5 fede 	bl	f74 <__aeabi_fmul>
    b1b8:	1c01      	adds	r1, r0, #0
    b1ba:	1c20      	adds	r0, r4, #0
    b1bc:	f7f5 fb6c 	bl	898 <__aeabi_fadd>
    b1c0:	239f      	movs	r3, #159	; 0x9f
    b1c2:	009b      	lsls	r3, r3, #2
    b1c4:	58f9      	ldr	r1, [r7, r3]
    b1c6:	1c04      	adds	r4, r0, #0
    b1c8:	4650      	mov	r0, sl
    b1ca:	f7f5 fed3 	bl	f74 <__aeabi_fmul>
    b1ce:	1c01      	adds	r1, r0, #0
    b1d0:	1c20      	adds	r0, r4, #0
    b1d2:	f7f5 fb61 	bl	898 <__aeabi_fadd>
    b1d6:	23a0      	movs	r3, #160	; 0xa0
    b1d8:	009b      	lsls	r3, r3, #2
    b1da:	58f9      	ldr	r1, [r7, r3]
    b1dc:	1c04      	adds	r4, r0, #0
    b1de:	4658      	mov	r0, fp
    b1e0:	f7f5 fec8 	bl	f74 <__aeabi_fmul>
    b1e4:	1c01      	adds	r1, r0, #0
    b1e6:	1c20      	adds	r0, r4, #0
    b1e8:	f7f5 fb56 	bl	898 <__aeabi_fadd>
    b1ec:	23f8      	movs	r3, #248	; 0xf8
    b1ee:	009b      	lsls	r3, r3, #2
    b1f0:	50f8      	str	r0, [r7, r3]
    b1f2:	3b45      	subs	r3, #69	; 0x45
    b1f4:	3bff      	subs	r3, #255	; 0xff
    b1f6:	1c06      	adds	r6, r0, #0
    b1f8:	58f9      	ldr	r1, [r7, r3]
    b1fa:	4640      	mov	r0, r8
    b1fc:	f7f5 feba 	bl	f74 <__aeabi_fmul>
    b200:	2100      	movs	r1, #0
    b202:	f7f5 fb49 	bl	898 <__aeabi_fadd>
    b206:	23a8      	movs	r3, #168	; 0xa8
    b208:	009b      	lsls	r3, r3, #2
    b20a:	58f9      	ldr	r1, [r7, r3]
    b20c:	1c04      	adds	r4, r0, #0
    b20e:	4648      	mov	r0, r9
    b210:	f7f5 feb0 	bl	f74 <__aeabi_fmul>
    b214:	1c01      	adds	r1, r0, #0
    b216:	1c20      	adds	r0, r4, #0
    b218:	f7f5 fb3e 	bl	898 <__aeabi_fadd>
    b21c:	23a9      	movs	r3, #169	; 0xa9
    b21e:	009b      	lsls	r3, r3, #2
    b220:	58f9      	ldr	r1, [r7, r3]
    b222:	1c04      	adds	r4, r0, #0
    b224:	4650      	mov	r0, sl
    b226:	f7f5 fea5 	bl	f74 <__aeabi_fmul>
    b22a:	1c01      	adds	r1, r0, #0
    b22c:	1c20      	adds	r0, r4, #0
    b22e:	f7f5 fb33 	bl	898 <__aeabi_fadd>
    b232:	23aa      	movs	r3, #170	; 0xaa
    b234:	009b      	lsls	r3, r3, #2
    b236:	58f9      	ldr	r1, [r7, r3]
    b238:	1c04      	adds	r4, r0, #0
    b23a:	4658      	mov	r0, fp
    b23c:	f7f5 fe9a 	bl	f74 <__aeabi_fmul>
    b240:	1c01      	adds	r1, r0, #0
    b242:	1c20      	adds	r0, r4, #0
    b244:	f7f5 fb28 	bl	898 <__aeabi_fadd>
    b248:	23f9      	movs	r3, #249	; 0xf9
    b24a:	009b      	lsls	r3, r3, #2
    b24c:	50f8      	str	r0, [r7, r3]
    b24e:	3b21      	subs	r3, #33	; 0x21
    b250:	3bff      	subs	r3, #255	; 0xff
    b252:	1c05      	adds	r5, r0, #0
    b254:	58f9      	ldr	r1, [r7, r3]
    b256:	4640      	mov	r0, r8
    b258:	f7f5 fe8c 	bl	f74 <__aeabi_fmul>
    b25c:	2100      	movs	r1, #0
    b25e:	f7f5 fb1b 	bl	898 <__aeabi_fadd>
    b262:	23b2      	movs	r3, #178	; 0xb2
    b264:	009b      	lsls	r3, r3, #2
    b266:	58f9      	ldr	r1, [r7, r3]
    b268:	1c04      	adds	r4, r0, #0
    b26a:	4648      	mov	r0, r9
    b26c:	f7f5 fe82 	bl	f74 <__aeabi_fmul>
    b270:	1c01      	adds	r1, r0, #0
    b272:	1c20      	adds	r0, r4, #0
    b274:	f7f5 fb10 	bl	898 <__aeabi_fadd>
    b278:	23b3      	movs	r3, #179	; 0xb3
    b27a:	009b      	lsls	r3, r3, #2
    b27c:	58f9      	ldr	r1, [r7, r3]
    b27e:	1c04      	adds	r4, r0, #0
    b280:	4650      	mov	r0, sl
    b282:	f7f5 fe77 	bl	f74 <__aeabi_fmul>
    b286:	1c01      	adds	r1, r0, #0
    b288:	1c20      	adds	r0, r4, #0
    b28a:	f7f5 fb05 	bl	898 <__aeabi_fadd>
    b28e:	23b4      	movs	r3, #180	; 0xb4
    b290:	009b      	lsls	r3, r3, #2
    b292:	58f9      	ldr	r1, [r7, r3]
    b294:	1c04      	adds	r4, r0, #0
    b296:	4658      	mov	r0, fp
    b298:	f7f5 fe6c 	bl	f74 <__aeabi_fmul>
    b29c:	1c01      	adds	r1, r0, #0
    b29e:	1c20      	adds	r0, r4, #0
    b2a0:	f7f5 fafa 	bl	898 <__aeabi_fadd>
    b2a4:	23fa      	movs	r3, #250	; 0xfa
    b2a6:	009b      	lsls	r3, r3, #2
    b2a8:	50f8      	str	r0, [r7, r3]
    b2aa:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:411 (discriminator 1)
	// = fSumBp4 - 2 * fvecA^T.fvecB + fvecA^T.fmatA.fvecA
	// first set P = Y^T.Y - 2 * beta^T.(X^T.Y) = fSumBp4 - 2 * fvecA^T.fvecB
	fE = 0.0F;
	for (i = 0; i < 4; i++)
	{
		fE += pthisMagCal->fvecA[i] * pthisMagCal->fvecB[i];
    b2ac:	4641      	mov	r1, r8
    b2ae:	9803      	ldr	r0, [sp, #12]
    b2b0:	f7f5 fe60 	bl	f74 <__aeabi_fmul>
    b2b4:	2100      	movs	r1, #0
    b2b6:	f7f5 faef 	bl	898 <__aeabi_fadd>
    b2ba:	4680      	mov	r8, r0
    b2bc:	4649      	mov	r1, r9
    b2be:	1c30      	adds	r0, r6, #0
    b2c0:	f7f5 fe58 	bl	f74 <__aeabi_fmul>
    b2c4:	4641      	mov	r1, r8
    b2c6:	f7f5 fae7 	bl	898 <__aeabi_fadd>
    b2ca:	4680      	mov	r8, r0
    b2cc:	4651      	mov	r1, sl
    b2ce:	1c28      	adds	r0, r5, #0
    b2d0:	f7f5 fe50 	bl	f74 <__aeabi_fmul>
    b2d4:	4641      	mov	r1, r8
    b2d6:	f7f5 fadf 	bl	898 <__aeabi_fadd>
    b2da:	4659      	mov	r1, fp
    b2dc:	4680      	mov	r8, r0
    b2de:	1c20      	adds	r0, r4, #0
    b2e0:	f7f5 fe48 	bl	f74 <__aeabi_fmul>
    b2e4:	1c01      	adds	r1, r0, #0
    b2e6:	4640      	mov	r0, r8
    b2e8:	f7f5 fad6 	bl	898 <__aeabi_fadd>
    b2ec:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:413 (discriminator 1)
	}
	fE = fSumBp4 - 2.0F * fE;
    b2ee:	f7f5 fad3 	bl	898 <__aeabi_fadd>
    b2f2:	1c01      	adds	r1, r0, #0
    b2f4:	9805      	ldr	r0, [sp, #20]
    b2f6:	f7f5 ff6f 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:421 (discriminator 1)
	for (i = 0; i < 4; i++)
	{
		pthisMagCal->fvecB[i] = 0.0F;
		for (k = 0; k < 4; k++)
		{
			pthisMagCal->fvecB[i] += pthisMagCal->fmatA[i][k] * pthisMagCal->fvecA[k];
    b2fa:	9b03      	ldr	r3, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:413 (discriminator 1)
	fE = 0.0F;
	for (i = 0; i < 4; i++)
	{
		fE += pthisMagCal->fvecA[i] * pthisMagCal->fvecB[i];
	}
	fE = fSumBp4 - 2.0F * fE;
    b2fc:	9004      	str	r0, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:421 (discriminator 1)
	for (i = 0; i < 4; i++)
	{
		pthisMagCal->fvecB[i] = 0.0F;
		for (k = 0; k < 4; k++)
		{
			pthisMagCal->fvecB[i] += pthisMagCal->fmatA[i][k] * pthisMagCal->fvecA[k];
    b2fe:	469b      	mov	fp, r3
    b300:	1c18      	adds	r0, r3, #0
    b302:	23bc      	movs	r3, #188	; 0xbc
    b304:	58f9      	ldr	r1, [r7, r3]
    b306:	f7f5 fe35 	bl	f74 <__aeabi_fmul>
    b30a:	2100      	movs	r1, #0
    b30c:	f7f5 fac4 	bl	898 <__aeabi_fadd>
    b310:	23c0      	movs	r3, #192	; 0xc0
    b312:	4680      	mov	r8, r0
    b314:	58f9      	ldr	r1, [r7, r3]
    b316:	1c30      	adds	r0, r6, #0
    b318:	f7f5 fe2c 	bl	f74 <__aeabi_fmul>
    b31c:	1c01      	adds	r1, r0, #0
    b31e:	4640      	mov	r0, r8
    b320:	f7f5 faba 	bl	898 <__aeabi_fadd>
    b324:	23c4      	movs	r3, #196	; 0xc4
    b326:	4680      	mov	r8, r0
    b328:	58f9      	ldr	r1, [r7, r3]
    b32a:	1c28      	adds	r0, r5, #0
    b32c:	f7f5 fe22 	bl	f74 <__aeabi_fmul>
    b330:	1c01      	adds	r1, r0, #0
    b332:	4640      	mov	r0, r8
    b334:	f7f5 fab0 	bl	898 <__aeabi_fadd>
    b338:	23c8      	movs	r3, #200	; 0xc8
    b33a:	4680      	mov	r8, r0
    b33c:	58f9      	ldr	r1, [r7, r3]
    b33e:	1c20      	adds	r0, r4, #0
    b340:	f7f5 fe18 	bl	f74 <__aeabi_fmul>
    b344:	1c01      	adds	r1, r0, #0
    b346:	4640      	mov	r0, r8
    b348:	f7f5 faa6 	bl	898 <__aeabi_fadd>
    b34c:	4b53      	ldr	r3, [pc, #332]	; (b49c <fUpdateCalibration4INV+0x6f0>)
    b34e:	4681      	mov	r9, r0
    b350:	50f8      	str	r0, [r7, r3]
    b352:	23e4      	movs	r3, #228	; 0xe4
    b354:	4658      	mov	r0, fp
    b356:	58f9      	ldr	r1, [r7, r3]
    b358:	f7f5 fe0c 	bl	f74 <__aeabi_fmul>
    b35c:	2100      	movs	r1, #0
    b35e:	f7f5 fa9b 	bl	898 <__aeabi_fadd>
    b362:	23e8      	movs	r3, #232	; 0xe8
    b364:	4680      	mov	r8, r0
    b366:	58f9      	ldr	r1, [r7, r3]
    b368:	1c30      	adds	r0, r6, #0
    b36a:	f7f5 fe03 	bl	f74 <__aeabi_fmul>
    b36e:	1c01      	adds	r1, r0, #0
    b370:	4640      	mov	r0, r8
    b372:	f7f5 fa91 	bl	898 <__aeabi_fadd>
    b376:	23ec      	movs	r3, #236	; 0xec
    b378:	4680      	mov	r8, r0
    b37a:	58f9      	ldr	r1, [r7, r3]
    b37c:	1c28      	adds	r0, r5, #0
    b37e:	f7f5 fdf9 	bl	f74 <__aeabi_fmul>
    b382:	1c01      	adds	r1, r0, #0
    b384:	4640      	mov	r0, r8
    b386:	f7f5 fa87 	bl	898 <__aeabi_fadd>
    b38a:	23f0      	movs	r3, #240	; 0xf0
    b38c:	4680      	mov	r8, r0
    b38e:	58f9      	ldr	r1, [r7, r3]
    b390:	1c20      	adds	r0, r4, #0
    b392:	f7f5 fdef 	bl	f74 <__aeabi_fmul>
    b396:	1c01      	adds	r1, r0, #0
    b398:	4640      	mov	r0, r8
    b39a:	f7f5 fa7d 	bl	898 <__aeabi_fadd>
    b39e:	2381      	movs	r3, #129	; 0x81
    b3a0:	00db      	lsls	r3, r3, #3
    b3a2:	50f8      	str	r0, [r7, r3]
    b3a4:	465b      	mov	r3, fp
    b3a6:	9303      	str	r3, [sp, #12]
    b3a8:	2386      	movs	r3, #134	; 0x86
    b3aa:	005b      	lsls	r3, r3, #1
    b3ac:	58f9      	ldr	r1, [r7, r3]
    b3ae:	4682      	mov	sl, r0
    b3b0:	4658      	mov	r0, fp
    b3b2:	f7f5 fddf 	bl	f74 <__aeabi_fmul>
    b3b6:	2100      	movs	r1, #0
    b3b8:	f7f5 fa6e 	bl	898 <__aeabi_fadd>
    b3bc:	2388      	movs	r3, #136	; 0x88
    b3be:	005b      	lsls	r3, r3, #1
    b3c0:	58f9      	ldr	r1, [r7, r3]
    b3c2:	4680      	mov	r8, r0
    b3c4:	1c30      	adds	r0, r6, #0
    b3c6:	f7f5 fdd5 	bl	f74 <__aeabi_fmul>
    b3ca:	1c01      	adds	r1, r0, #0
    b3cc:	4640      	mov	r0, r8
    b3ce:	f7f5 fa63 	bl	898 <__aeabi_fadd>
    b3d2:	238a      	movs	r3, #138	; 0x8a
    b3d4:	005b      	lsls	r3, r3, #1
    b3d6:	58f9      	ldr	r1, [r7, r3]
    b3d8:	4680      	mov	r8, r0
    b3da:	1c28      	adds	r0, r5, #0
    b3dc:	f7f5 fdca 	bl	f74 <__aeabi_fmul>
    b3e0:	1c01      	adds	r1, r0, #0
    b3e2:	4640      	mov	r0, r8
    b3e4:	f7f5 fa58 	bl	898 <__aeabi_fadd>
    b3e8:	238c      	movs	r3, #140	; 0x8c
    b3ea:	005b      	lsls	r3, r3, #1
    b3ec:	58f9      	ldr	r1, [r7, r3]
    b3ee:	4680      	mov	r8, r0
    b3f0:	1c20      	adds	r0, r4, #0
    b3f2:	f7f5 fdbf 	bl	f74 <__aeabi_fmul>
    b3f6:	1c01      	adds	r1, r0, #0
    b3f8:	4640      	mov	r0, r8
    b3fa:	f7f5 fa4d 	bl	898 <__aeabi_fadd>
    b3fe:	4b28      	ldr	r3, [pc, #160]	; (b4a0 <fUpdateCalibration4INV+0x6f4>)
    b400:	4683      	mov	fp, r0
    b402:	50f8      	str	r0, [r7, r3]
    b404:	239a      	movs	r3, #154	; 0x9a
    b406:	005b      	lsls	r3, r3, #1
    b408:	58f9      	ldr	r1, [r7, r3]
    b40a:	9803      	ldr	r0, [sp, #12]
    b40c:	f7f5 fdb2 	bl	f74 <__aeabi_fmul>
    b410:	2100      	movs	r1, #0
    b412:	f7f5 fa41 	bl	898 <__aeabi_fadd>
    b416:	239c      	movs	r3, #156	; 0x9c
    b418:	005b      	lsls	r3, r3, #1
    b41a:	58f9      	ldr	r1, [r7, r3]
    b41c:	4680      	mov	r8, r0
    b41e:	1c30      	adds	r0, r6, #0
    b420:	f7f5 fda8 	bl	f74 <__aeabi_fmul>
    b424:	1c01      	adds	r1, r0, #0
    b426:	4640      	mov	r0, r8
    b428:	f7f5 fa36 	bl	898 <__aeabi_fadd>
    b42c:	239e      	movs	r3, #158	; 0x9e
    b42e:	005b      	lsls	r3, r3, #1
    b430:	58f9      	ldr	r1, [r7, r3]
    b432:	4680      	mov	r8, r0
    b434:	1c28      	adds	r0, r5, #0
    b436:	f7f5 fd9d 	bl	f74 <__aeabi_fmul>
    b43a:	1c01      	adds	r1, r0, #0
    b43c:	4640      	mov	r0, r8
    b43e:	f7f5 fa2b 	bl	898 <__aeabi_fadd>
    b442:	23a0      	movs	r3, #160	; 0xa0
    b444:	005b      	lsls	r3, r3, #1
    b446:	58f9      	ldr	r1, [r7, r3]
    b448:	4680      	mov	r8, r0
    b44a:	1c20      	adds	r0, r4, #0
    b44c:	f7f5 fd92 	bl	f74 <__aeabi_fmul>
    b450:	1c01      	adds	r1, r0, #0
    b452:	4640      	mov	r0, r8
    b454:	f7f5 fa20 	bl	898 <__aeabi_fadd>
    b458:	2382      	movs	r3, #130	; 0x82
    b45a:	00db      	lsls	r3, r3, #3
    b45c:	50f8      	str	r0, [r7, r3]
    b45e:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:428 (discriminator 1)
	} 

	// complete calculation of P by adding beta^T.(X^T.X).beta = fvecA^T * fvecB
	for (i = 0; i < 4; i++)
	{
		fE += pthisMagCal->fvecB[i] * pthisMagCal->fvecA[i];
    b460:	4649      	mov	r1, r9
    b462:	9803      	ldr	r0, [sp, #12]
    b464:	f7f5 fd86 	bl	f74 <__aeabi_fmul>
    b468:	1c01      	adds	r1, r0, #0
    b46a:	9804      	ldr	r0, [sp, #16]
    b46c:	f7f5 fa14 	bl	898 <__aeabi_fadd>
    b470:	4681      	mov	r9, r0
    b472:	1c31      	adds	r1, r6, #0
    b474:	4650      	mov	r0, sl
    b476:	f7f5 fd7d 	bl	f74 <__aeabi_fmul>
    b47a:	4649      	mov	r1, r9
    b47c:	f7f5 fa0c 	bl	898 <__aeabi_fadd>
    b480:	4681      	mov	r9, r0
    b482:	1c29      	adds	r1, r5, #0
    b484:	4658      	mov	r0, fp
    b486:	f7f5 fd75 	bl	f74 <__aeabi_fmul>
    b48a:	4649      	mov	r1, r9
    b48c:	f7f5 fa04 	bl	898 <__aeabi_fadd>
    b490:	4681      	mov	r9, r0
    b492:	1c21      	adds	r1, r4, #0
    b494:	4640      	mov	r0, r8
    b496:	e005      	b.n	b4a4 <fUpdateCalibration4INV+0x6f8>
    b498:	00000b56 	.word	0x00000b56
    b49c:	00000404 	.word	0x00000404
    b4a0:	0000040c 	.word	0x0000040c
    b4a4:	f7f5 fd66 	bl	f74 <__aeabi_fmul>
    b4a8:	4649      	mov	r1, r9
    b4aa:	f7f5 f9f5 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:434 (discriminator 1)
	}

	// compute the hard iron vector (in uT but offset and scaled by FMATRIXSCALING)
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = 0.5F * pthisMagCal->fvecA[l];
    b4ae:	21fc      	movs	r1, #252	; 0xfc
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:428 (discriminator 1)
	} 

	// complete calculation of P by adding beta^T.(X^T.X).beta = fvecA^T * fvecB
	for (i = 0; i < 4; i++)
	{
		fE += pthisMagCal->fvecB[i] * pthisMagCal->fvecA[i];
    b4b0:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:434 (discriminator 1)
	}

	// compute the hard iron vector (in uT but offset and scaled by FMATRIXSCALING)
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = 0.5F * pthisMagCal->fvecA[l];
    b4b2:	0589      	lsls	r1, r1, #22
    b4b4:	9803      	ldr	r0, [sp, #12]
    b4b6:	f7f5 fd5d 	bl	f74 <__aeabi_fmul>
    b4ba:	21fc      	movs	r1, #252	; 0xfc
    b4bc:	4681      	mov	r9, r0
    b4be:	63f8      	str	r0, [r7, #60]	; 0x3c
    b4c0:	0589      	lsls	r1, r1, #22
    b4c2:	1c30      	adds	r0, r6, #0
    b4c4:	f7f5 fd56 	bl	f74 <__aeabi_fmul>
    b4c8:	21fc      	movs	r1, #252	; 0xfc
    b4ca:	1c06      	adds	r6, r0, #0
    b4cc:	6438      	str	r0, [r7, #64]	; 0x40
    b4ce:	0589      	lsls	r1, r1, #22
    b4d0:	1c28      	adds	r0, r5, #0
    b4d2:	f7f5 fd4f 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:438 (discriminator 1)
	}

	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    b4d6:	4649      	mov	r1, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:434 (discriminator 1)
	}

	// compute the hard iron vector (in uT but offset and scaled by FMATRIXSCALING)
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = 0.5F * pthisMagCal->fvecA[l];
    b4d8:	1c05      	adds	r5, r0, #0
    b4da:	6478      	str	r0, [r7, #68]	; 0x44
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:438 (discriminator 1)
	}

	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    b4dc:	4648      	mov	r0, r9
    b4de:	f7f5 fd49 	bl	f74 <__aeabi_fmul>
    b4e2:	1c21      	adds	r1, r4, #0
    b4e4:	f7f5 f9d8 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:439 (discriminator 1)
			pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] + pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z]);
    b4e8:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:438 (discriminator 1)
	{
		pthisMagCal->ftrV[l] = 0.5F * pthisMagCal->fvecA[l];
	}

	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    b4ea:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:439 (discriminator 1)
			pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] + pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z]);
    b4ec:	1c30      	adds	r0, r6, #0
    b4ee:	f7f5 fd41 	bl	f74 <__aeabi_fmul>
    b4f2:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:438 (discriminator 1)
	{
		pthisMagCal->ftrV[l] = 0.5F * pthisMagCal->fvecA[l];
	}

	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    b4f4:	1c20      	adds	r0, r4, #0
    b4f6:	f7f5 f9cf 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:439 (discriminator 1)
			pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] + pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z]);
    b4fa:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:438 (discriminator 1)
	{
		pthisMagCal->ftrV[l] = 0.5F * pthisMagCal->fvecA[l];
	}

	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    b4fc:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:439 (discriminator 1)
			pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] + pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z]);
    b4fe:	1c28      	adds	r0, r5, #0
    b500:	f7f5 fd38 	bl	f74 <__aeabi_fmul>
    b504:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:438 (discriminator 1)
	{
		pthisMagCal->ftrV[l] = 0.5F * pthisMagCal->fvecA[l];
	}

	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    b506:	1c20      	adds	r0, r4, #0
    b508:	f7f5 f9c6 	bl	898 <__aeabi_fadd>
    b50c:	f007 fa7e 	bl	12a0c <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:442 (discriminator 1)
			pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] + pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z]);

	// calculate the trial fit error (percent) normalized to number of measurements and scaled geomagnetic field strength
	pthisMagCal->ftrFitErrorpc = sqrtf(fE / (float) pthisMagBuffer->iMagBufferCount) * 100.0F /
    b510:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b512:	4b30      	ldr	r3, [pc, #192]	; (b5d4 <fUpdateCalibration4INV+0x828>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:438 (discriminator 1)
	{
		pthisMagCal->ftrV[l] = 0.5F * pthisMagCal->fvecA[l];
	}

	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    b514:	66f8      	str	r0, [r7, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:442 (discriminator 1)
			pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] + pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z]);

	// calculate the trial fit error (percent) normalized to number of measurements and scaled geomagnetic field strength
	pthisMagCal->ftrFitErrorpc = sqrtf(fE / (float) pthisMagBuffer->iMagBufferCount) * 100.0F /
    b516:	5ed0      	ldrsh	r0, [r2, r3]
    b518:	f7f5 fffc 	bl	1514 <__aeabi_i2f>
    b51c:	1c01      	adds	r1, r0, #0
    b51e:	4640      	mov	r0, r8
    b520:	f7f5 fb36 	bl	b90 <__aeabi_fdiv>
    b524:	f007 fa72 	bl	12a0c <sqrtf>
    b528:	492b      	ldr	r1, [pc, #172]	; (b5d8 <fUpdateCalibration4INV+0x82c>)
    b52a:	f7f5 fd23 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:443 (discriminator 1)
			(2.0F * pthisMagCal->ftrB * pthisMagCal->ftrB);
    b52e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:442 (discriminator 1)
	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] + pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z]);

	// calculate the trial fit error (percent) normalized to number of measurements and scaled geomagnetic field strength
	pthisMagCal->ftrFitErrorpc = sqrtf(fE / (float) pthisMagBuffer->iMagBufferCount) * 100.0F /
    b530:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:443 (discriminator 1)
			(2.0F * pthisMagCal->ftrB * pthisMagCal->ftrB);
    b532:	1c21      	adds	r1, r4, #0
    b534:	1c20      	adds	r0, r4, #0
    b536:	f7f5 f9af 	bl	898 <__aeabi_fadd>
    b53a:	1c01      	adds	r1, r0, #0
    b53c:	1c20      	adds	r0, r4, #0
    b53e:	f7f5 fd19 	bl	f74 <__aeabi_fmul>
    b542:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:442 (discriminator 1)
	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] + pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z]);

	// calculate the trial fit error (percent) normalized to number of measurements and scaled geomagnetic field strength
	pthisMagCal->ftrFitErrorpc = sqrtf(fE / (float) pthisMagBuffer->iMagBufferCount) * 100.0F /
    b544:	1c28      	adds	r0, r5, #0
    b546:	f7f5 fb23 	bl	b90 <__aeabi_fdiv>
    b54a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b54c:	6738      	str	r0, [r7, #112]	; 0x70
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:448 (discriminator 1)
			(2.0F * pthisMagCal->ftrB * pthisMagCal->ftrB);

	// correct the hard iron estimate for FMATRIXSCALING and the offsets applied (result in uT)
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = pthisMagCal->ftrV[l] * DEFAULTB + (float)iOffset[l] * pthisMag->fuTPerCount;
    b54e:	4923      	ldr	r1, [pc, #140]	; (b5dc <fUpdateCalibration4INV+0x830>)
    b550:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b552:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    b554:	f7f5 fd0e 	bl	f74 <__aeabi_fmul>
    b558:	ab10      	add	r3, sp, #64	; 0x40
    b55a:	1c06      	adds	r6, r0, #0
    b55c:	2018      	movs	r0, #24
    b55e:	5e18      	ldrsh	r0, [r3, r0]
    b560:	f7f5 ffd8 	bl	1514 <__aeabi_i2f>
    b564:	1c29      	adds	r1, r5, #0
    b566:	f7f5 fd05 	bl	f74 <__aeabi_fmul>
    b56a:	1c01      	adds	r1, r0, #0
    b56c:	1c30      	adds	r0, r6, #0
    b56e:	f7f5 f993 	bl	898 <__aeabi_fadd>
    b572:	491a      	ldr	r1, [pc, #104]	; (b5dc <fUpdateCalibration4INV+0x830>)
    b574:	63f8      	str	r0, [r7, #60]	; 0x3c
    b576:	6c38      	ldr	r0, [r7, #64]	; 0x40
    b578:	f7f5 fcfc 	bl	f74 <__aeabi_fmul>
    b57c:	ab10      	add	r3, sp, #64	; 0x40
    b57e:	1c06      	adds	r6, r0, #0
    b580:	201a      	movs	r0, #26
    b582:	5e18      	ldrsh	r0, [r3, r0]
    b584:	f7f5 ffc6 	bl	1514 <__aeabi_i2f>
    b588:	1c29      	adds	r1, r5, #0
    b58a:	f7f5 fcf3 	bl	f74 <__aeabi_fmul>
    b58e:	1c01      	adds	r1, r0, #0
    b590:	1c30      	adds	r0, r6, #0
    b592:	f7f5 f981 	bl	898 <__aeabi_fadd>
    b596:	4911      	ldr	r1, [pc, #68]	; (b5dc <fUpdateCalibration4INV+0x830>)
    b598:	6438      	str	r0, [r7, #64]	; 0x40
    b59a:	6c78      	ldr	r0, [r7, #68]	; 0x44
    b59c:	f7f5 fcea 	bl	f74 <__aeabi_fmul>
    b5a0:	ab10      	add	r3, sp, #64	; 0x40
    b5a2:	1c06      	adds	r6, r0, #0
    b5a4:	201c      	movs	r0, #28
    b5a6:	5e18      	ldrsh	r0, [r3, r0]
    b5a8:	f7f5 ffb4 	bl	1514 <__aeabi_i2f>
    b5ac:	1c29      	adds	r1, r5, #0
    b5ae:	f7f5 fce1 	bl	f74 <__aeabi_fmul>
    b5b2:	1c01      	adds	r1, r0, #0
    b5b4:	1c30      	adds	r0, r6, #0
    b5b6:	f7f5 f96f 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:452 (discriminator 1)
	}

	// correct the geomagnetic field strength B to correct scaling (result in uT)
	pthisMagCal->ftrB *= DEFAULTB;
    b5ba:	4908      	ldr	r1, [pc, #32]	; (b5dc <fUpdateCalibration4INV+0x830>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:448 (discriminator 1)
			(2.0F * pthisMagCal->ftrB * pthisMagCal->ftrB);

	// correct the hard iron estimate for FMATRIXSCALING and the offsets applied (result in uT)
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = pthisMagCal->ftrV[l] * DEFAULTB + (float)iOffset[l] * pthisMag->fuTPerCount;
    b5bc:	6478      	str	r0, [r7, #68]	; 0x44
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:452 (discriminator 1)
	}

	// correct the geomagnetic field strength B to correct scaling (result in uT)
	pthisMagCal->ftrB *= DEFAULTB;
    b5be:	1c20      	adds	r0, r4, #0
    b5c0:	f7f5 fcd8 	bl	f74 <__aeabi_fmul>
    b5c4:	66f8      	str	r0, [r7, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:455 (discriminator 1)

	return;
}
    b5c6:	b01d      	add	sp, #116	; 0x74
    b5c8:	bc3c      	pop	{r2, r3, r4, r5}
    b5ca:	4690      	mov	r8, r2
    b5cc:	4699      	mov	r9, r3
    b5ce:	46a2      	mov	sl, r4
    b5d0:	46ab      	mov	fp, r5
    b5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b5d4:	00000b56 	.word	0x00000b56
    b5d8:	42c80000 	.word	0x42c80000
    b5dc:	42480000 	.word	0x42480000

0000b5e0 <fUpdateCalibration7EIG>:
fUpdateCalibration7EIG():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:459

// 7 element calibration using direct eigen-decomposition
void fUpdateCalibration7EIG(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer, struct MagSensor *pthisMag)
{
    b5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b5e2:	465f      	mov	r7, fp
    b5e4:	464d      	mov	r5, r9
    b5e6:	4644      	mov	r4, r8
    b5e8:	4656      	mov	r6, sl
    b5ea:	b4f0      	push	{r4, r5, r6, r7}
    b5ec:	b093      	sub	sp, #76	; 0x4c
    b5ee:	4683      	mov	fp, r0
    b5f0:	910d      	str	r1, [sp, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:469
	int16 iOffset[3];						// offset to remove large DC hard iron bias
	int16 iCount;							// number of measurements counted
	int8 i, j, k, l, m, n;					// loop counters

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;
    b5f2:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    b5f4:	4973      	ldr	r1, [pc, #460]	; (b7c4 <fUpdateCalibration7EIG+0x1e4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:459
	return;
}

// 7 element calibration using direct eigen-decomposition
void fUpdateCalibration7EIG(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer, struct MagSensor *pthisMag)
{
    b5f6:	920f      	str	r2, [sp, #60]	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:469
	int16 iOffset[3];						// offset to remove large DC hard iron bias
	int16 iCount;							// number of measurements counted
	int8 i, j, k, l, m, n;					// loop counters

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;
    b5f8:	f7f5 faca 	bl	b90 <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:472

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
    b5fc:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:469
	int16 iOffset[3];						// offset to remove large DC hard iron bias
	int16 iCount;							// number of measurements counted
	int8 i, j, k, l, m, n;					// loop counters

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;
    b5fe:	9008      	str	r0, [sp, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:479
	// zero the on and above diagonal elements of the 7x7 symmetric measurement matrix fmatA
	for (m = 0; m < 7; m++)
	{
		for (n = m; n < 7; n++)
		{
			pthisMagCal->fmatA[m][n] = 0.0F;
    b600:	2400      	movs	r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:472

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
    b602:	2000      	movs	r0, #0
    b604:	465d      	mov	r5, fp
    b606:	aa10      	add	r2, sp, #64	; 0x40
    b608:	8093      	strh	r3, [r2, #4]
    b60a:	8053      	strh	r3, [r2, #2]
    b60c:	8013      	strh	r3, [r2, #0]
    b60e:	0081      	lsls	r1, r0, #2
    b610:	b2c2      	uxtb	r2, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:479
	// zero the on and above diagonal elements of the 7x7 symmetric measurement matrix fmatA
	for (m = 0; m < 7; m++)
	{
		for (n = m; n < 7; n++)
		{
			pthisMagCal->fmatA[m][n] = 0.0F;
    b612:	1809      	adds	r1, r1, r0
    b614:	b253      	sxtb	r3, r2
    b616:	0049      	lsls	r1, r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:479 (discriminator 3)
    b618:	18cb      	adds	r3, r1, r3
    b61a:	332e      	adds	r3, #46	; 0x2e
    b61c:	009b      	lsls	r3, r3, #2
    b61e:	3201      	adds	r2, #1
    b620:	18eb      	adds	r3, r5, r3
    b622:	b2d2      	uxtb	r2, r2
    b624:	605c      	str	r4, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:477 (discriminator 3)
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;

	// zero the on and above diagonal elements of the 7x7 symmetric measurement matrix fmatA
	for (m = 0; m < 7; m++)
	{
		for (n = m; n < 7; n++)
    b626:	b253      	sxtb	r3, r2
    b628:	2b06      	cmp	r3, #6
    b62a:	ddf5      	ble.n	b618 <fUpdateCalibration7EIG+0x38>
    b62c:	3001      	adds	r0, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:475 (discriminator 2)

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;

	// zero the on and above diagonal elements of the 7x7 symmetric measurement matrix fmatA
	for (m = 0; m < 7; m++)
    b62e:	2807      	cmp	r0, #7
    b630:	d1ed      	bne.n	b60e <fUpdateCalibration7EIG+0x2e>
    b632:	ab10      	add	r3, sp, #64	; 0x40
    b634:	881b      	ldrh	r3, [r3, #0]
    b636:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b638:	9309      	str	r3, [sp, #36]	; 0x24
    b63a:	ab10      	add	r3, sp, #64	; 0x40
    b63c:	885b      	ldrh	r3, [r3, #2]
    b63e:	21d8      	movs	r1, #216	; 0xd8
    b640:	930b      	str	r3, [sp, #44]	; 0x2c
    b642:	ab10      	add	r3, sp, #64	; 0x40
    b644:	889b      	ldrh	r3, [r3, #4]
    b646:	00c9      	lsls	r1, r1, #3
    b648:	930a      	str	r3, [sp, #40]	; 0x28
    b64a:	1c13      	adds	r3, r2, #0
    b64c:	3330      	adds	r3, #48	; 0x30
    b64e:	9306      	str	r3, [sp, #24]
    b650:	468c      	mov	ip, r1
    b652:	1c13      	adds	r3, r2, #0
    b654:	4463      	add	r3, ip
    b656:	930c      	str	r3, [sp, #48]	; 0x30
    b658:	1c13      	adds	r3, r2, #0
    b65a:	229c      	movs	r2, #156	; 0x9c
    b65c:	0092      	lsls	r2, r2, #2
    b65e:	4694      	mov	ip, r2
    b660:	4463      	add	r3, ip
    b662:	930e      	str	r3, [sp, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:475
    b664:	2300      	movs	r3, #0
    b666:	9305      	str	r3, [sp, #20]
    b668:	23f7      	movs	r3, #247	; 0xf7
    b66a:	46ab      	mov	fp, r5
    b66c:	009b      	lsls	r3, r3, #2
    b66e:	445b      	add	r3, fp
    b670:	9307      	str	r3, [sp, #28]
    b672:	9b06      	ldr	r3, [sp, #24]
    b674:	465e      	mov	r6, fp
    b676:	3b30      	subs	r3, #48	; 0x30
    b678:	9304      	str	r3, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:472

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
    b67a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b67c:	9303      	str	r3, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:489
	iCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
	{
		for (k = 0; k < MAGBUFFSIZEY; k++)
		{
			if (pthisMagBuffer->index[j][k] != -1)
    b67e:	9b03      	ldr	r3, [sp, #12]
    b680:	681b      	ldr	r3, [r3, #0]
    b682:	9301      	str	r3, [sp, #4]
    b684:	3301      	adds	r3, #1
    b686:	d100      	bne.n	b68a <fUpdateCalibration7EIG+0xaa>
    b688:	e0c0      	b.n	b80c <fUpdateCalibration7EIG+0x22c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:492
			{
				// use first valid magnetic buffer entry as offset estimate (bit counts)
				if (iCount == 0)
    b68a:	9b05      	ldr	r3, [sp, #20]
    b68c:	2b00      	cmp	r3, #0
    b68e:	d100      	bne.n	b692 <fUpdateCalibration7EIG+0xb2>
    b690:	e277      	b.n	bb82 <fUpdateCalibration7EIG+0x5a2>
    b692:	9c04      	ldr	r4, [sp, #16]
    b694:	2200      	movs	r2, #0
    b696:	5ea3      	ldrsh	r3, [r4, r2]
    b698:	466a      	mov	r2, sp
    b69a:	2024      	movs	r0, #36	; 0x24
    b69c:	5e10      	ldrsh	r0, [r2, r0]
    b69e:	1a18      	subs	r0, r3, r0
    b6a0:	f7f5 ff38 	bl	1514 <__aeabi_i2f>
    b6a4:	2390      	movs	r3, #144	; 0x90
    b6a6:	46a4      	mov	ip, r4
    b6a8:	009b      	lsls	r3, r3, #2
    b6aa:	4463      	add	r3, ip
    b6ac:	2200      	movs	r2, #0
    b6ae:	5e9b      	ldrsh	r3, [r3, r2]
    b6b0:	466a      	mov	r2, sp
    b6b2:	1c07      	adds	r7, r0, #0
    b6b4:	202c      	movs	r0, #44	; 0x2c
    b6b6:	5e10      	ldrsh	r0, [r2, r0]
    b6b8:	1a18      	subs	r0, r3, r0
    b6ba:	f7f5 ff2b 	bl	1514 <__aeabi_i2f>
    b6be:	2390      	movs	r3, #144	; 0x90
    b6c0:	46a4      	mov	ip, r4
    b6c2:	00db      	lsls	r3, r3, #3
    b6c4:	4463      	add	r3, ip
    b6c6:	2200      	movs	r2, #0
    b6c8:	5e9b      	ldrsh	r3, [r3, r2]
    b6ca:	466a      	mov	r2, sp
    b6cc:	1c05      	adds	r5, r0, #0
    b6ce:	2028      	movs	r0, #40	; 0x28
    b6d0:	5e10      	ldrsh	r0, [r2, r0]
    b6d2:	1a18      	subs	r0, r3, r0
    b6d4:	f7f5 ff1e 	bl	1514 <__aeabi_i2f>
    b6d8:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:503 (discriminator 1)
				}

				// apply the offset and scaling and store in fvecA
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l + 3] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    b6da:	9b08      	ldr	r3, [sp, #32]
    b6dc:	1c39      	adds	r1, r7, #0
    b6de:	1c18      	adds	r0, r3, #0
    b6e0:	4698      	mov	r8, r3
    b6e2:	f7f5 fc47 	bl	f74 <__aeabi_fmul>
    b6e6:	23fa      	movs	r3, #250	; 0xfa
    b6e8:	1c07      	adds	r7, r0, #0
    b6ea:	009b      	lsls	r3, r3, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:504 (discriminator 1)
					pthisMagCal->fvecA[l] = pthisMagCal->fvecA[l + 3] * pthisMagCal->fvecA[l + 3];
    b6ec:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:503 (discriminator 1)
				}

				// apply the offset and scaling and store in fvecA
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l + 3] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    b6ee:	50f0      	str	r0, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:504 (discriminator 1)
					pthisMagCal->fvecA[l] = pthisMagCal->fvecA[l + 3] * pthisMagCal->fvecA[l + 3];
    b6f0:	f7f5 fc40 	bl	f74 <__aeabi_fmul>
    b6f4:	23f7      	movs	r3, #247	; 0xf7
    b6f6:	009b      	lsls	r3, r3, #2
    b6f8:	4682      	mov	sl, r0
    b6fa:	50f0      	str	r0, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:503 (discriminator 1)
				}

				// apply the offset and scaling and store in fvecA
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l + 3] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    b6fc:	1c29      	adds	r1, r5, #0
    b6fe:	4640      	mov	r0, r8
    b700:	f7f5 fc38 	bl	f74 <__aeabi_fmul>
    b704:	23fb      	movs	r3, #251	; 0xfb
    b706:	1c05      	adds	r5, r0, #0
    b708:	009b      	lsls	r3, r3, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:504 (discriminator 1)
					pthisMagCal->fvecA[l] = pthisMagCal->fvecA[l + 3] * pthisMagCal->fvecA[l + 3];
    b70a:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:503 (discriminator 1)
				}

				// apply the offset and scaling and store in fvecA
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l + 3] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    b70c:	50f0      	str	r0, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:504 (discriminator 1)
					pthisMagCal->fvecA[l] = pthisMagCal->fvecA[l + 3] * pthisMagCal->fvecA[l + 3];
    b70e:	f7f5 fc31 	bl	f74 <__aeabi_fmul>
    b712:	23f8      	movs	r3, #248	; 0xf8
    b714:	009b      	lsls	r3, r3, #2
    b716:	4681      	mov	r9, r0
    b718:	50f0      	str	r0, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:503 (discriminator 1)
				}

				// apply the offset and scaling and store in fvecA
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l + 3] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    b71a:	1c21      	adds	r1, r4, #0
    b71c:	4640      	mov	r0, r8
    b71e:	f7f5 fc29 	bl	f74 <__aeabi_fmul>
    b722:	23fc      	movs	r3, #252	; 0xfc
    b724:	1c04      	adds	r4, r0, #0
    b726:	009b      	lsls	r3, r3, #2
    b728:	50f0      	str	r0, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:504 (discriminator 1)
					pthisMagCal->fvecA[l] = pthisMagCal->fvecA[l + 3] * pthisMagCal->fvecA[l + 3];
    b72a:	1c21      	adds	r1, r4, #0
    b72c:	f7f5 fc22 	bl	f74 <__aeabi_fmul>
    b730:	23f9      	movs	r3, #249	; 0xf9
    b732:	009b      	lsls	r3, r3, #2
    b734:	50f0      	str	r0, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:513 (discriminator 1)
				// with the exception of fmatA[6][6] which will sum to the number of measurements
				// and remembering that fvecA[6] equals 1.0F
				// update the right hand column [6] of fmatA except for fmatA[6][6]
				for (m = 0; m < 6; m++)
				{
					pthisMagCal->fmatA[m][6] += pthisMagCal->fvecA[m];
    b736:	23d4      	movs	r3, #212	; 0xd4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:504 (discriminator 1)

				// apply the offset and scaling and store in fvecA
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l + 3] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
					pthisMagCal->fvecA[l] = pthisMagCal->fvecA[l + 3] * pthisMagCal->fvecA[l + 3];
    b738:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:513 (discriminator 1)
				// with the exception of fmatA[6][6] which will sum to the number of measurements
				// and remembering that fvecA[6] equals 1.0F
				// update the right hand column [6] of fmatA except for fmatA[6][6]
				for (m = 0; m < 6; m++)
				{
					pthisMagCal->fmatA[m][6] += pthisMagCal->fvecA[m];
    b73a:	4651      	mov	r1, sl
    b73c:	58f0      	ldr	r0, [r6, r3]
    b73e:	f7f5 f8ab 	bl	898 <__aeabi_fadd>
    b742:	23d4      	movs	r3, #212	; 0xd4
    b744:	50f0      	str	r0, [r6, r3]
    b746:	3328      	adds	r3, #40	; 0x28
    b748:	58f0      	ldr	r0, [r6, r3]
    b74a:	4649      	mov	r1, r9
    b74c:	f7f5 f8a4 	bl	898 <__aeabi_fadd>
    b750:	23fc      	movs	r3, #252	; 0xfc
    b752:	50f0      	str	r0, [r6, r3]
    b754:	3328      	adds	r3, #40	; 0x28
    b756:	4699      	mov	r9, r3
    b758:	58f0      	ldr	r0, [r6, r3]
    b75a:	4641      	mov	r1, r8
    b75c:	f7f5 f89c 	bl	898 <__aeabi_fadd>
    b760:	464b      	mov	r3, r9
    b762:	50f0      	str	r0, [r6, r3]
    b764:	3328      	adds	r3, #40	; 0x28
    b766:	4698      	mov	r8, r3
    b768:	58f0      	ldr	r0, [r6, r3]
    b76a:	1c39      	adds	r1, r7, #0
    b76c:	f7f5 f894 	bl	898 <__aeabi_fadd>
    b770:	27ba      	movs	r7, #186	; 0xba
    b772:	4643      	mov	r3, r8
    b774:	007f      	lsls	r7, r7, #1
    b776:	50f0      	str	r0, [r6, r3]
    b778:	59f0      	ldr	r0, [r6, r7]
    b77a:	1c29      	adds	r1, r5, #0
    b77c:	f7f5 f88c 	bl	898 <__aeabi_fadd>
    b780:	25ce      	movs	r5, #206	; 0xce
    b782:	51f0      	str	r0, [r6, r7]
    b784:	006d      	lsls	r5, r5, #1
    b786:	5970      	ldr	r0, [r6, r5]
    b788:	1c21      	adds	r1, r4, #0
    b78a:	f7f5 f885 	bl	898 <__aeabi_fadd>
    b78e:	9b07      	ldr	r3, [sp, #28]
    b790:	5170      	str	r0, [r6, r5]
    b792:	469b      	mov	fp, r3
    b794:	23fd      	movs	r3, #253	; 0xfd
    b796:	009b      	lsls	r3, r3, #2
    b798:	469c      	mov	ip, r3
    b79a:	44b4      	add	ip, r6
    b79c:	4663      	mov	r3, ip
    b79e:	9302      	str	r3, [sp, #8]
    b7a0:	2300      	movs	r3, #0
    b7a2:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:520 (discriminator 1)
				// update the on and above diagonal terms except for right hand column 6
				for (m = 0; m < 6; m++)
				{
					for (n = m; n < 6; n++)
					{
						pthisMagCal->fmatA[m][n] += pthisMagCal->fvecA[m] * pthisMagCal->fvecA[n];
    b7a4:	3fb8      	subs	r7, #184	; 0xb8
    b7a6:	4653      	mov	r3, sl
    b7a8:	466a      	mov	r2, sp
    b7aa:	7113      	strb	r3, [r2, #4]
    b7ac:	465b      	mov	r3, fp
    b7ae:	681b      	ldr	r3, [r3, #0]
    b7b0:	7915      	ldrb	r5, [r2, #4]
    b7b2:	4699      	mov	r9, r3
    b7b4:	1c19      	adds	r1, r3, #0
    b7b6:	4653      	mov	r3, sl
    b7b8:	009b      	lsls	r3, r3, #2
    b7ba:	4453      	add	r3, sl
    b7bc:	005b      	lsls	r3, r3, #1
    b7be:	b26c      	sxtb	r4, r5
    b7c0:	4698      	mov	r8, r3
    b7c2:	e006      	b.n	b7d2 <fUpdateCalibration7EIG+0x1f2>
    b7c4:	42480000 	.word	0x42480000
    b7c8:	1c23      	adds	r3, r4, #0
    b7ca:	33f6      	adds	r3, #246	; 0xf6
    b7cc:	009b      	lsls	r3, r3, #2
    b7ce:	18f3      	adds	r3, r6, r3
    b7d0:	6859      	ldr	r1, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:520 (discriminator 3)
    b7d2:	4648      	mov	r0, r9
    b7d4:	f7f5 fbce 	bl	f74 <__aeabi_fmul>
    b7d8:	4444      	add	r4, r8
    b7da:	00a4      	lsls	r4, r4, #2
    b7dc:	1934      	adds	r4, r6, r4
    b7de:	1c01      	adds	r1, r0, #0
    b7e0:	59e0      	ldr	r0, [r4, r7]
    b7e2:	f7f5 f859 	bl	898 <__aeabi_fadd>
    b7e6:	3501      	adds	r5, #1
    b7e8:	b2ed      	uxtb	r5, r5
    b7ea:	51e0      	str	r0, [r4, r7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:518 (discriminator 3)
					pthisMagCal->fmatA[m][6] += pthisMagCal->fvecA[m];
				}
				// update the on and above diagonal terms except for right hand column 6
				for (m = 0; m < 6; m++)
				{
					for (n = m; n < 6; n++)
    b7ec:	b26c      	sxtb	r4, r5
    b7ee:	2c05      	cmp	r4, #5
    b7f0:	ddea      	ble.n	b7c8 <fUpdateCalibration7EIG+0x1e8>
    b7f2:	2301      	movs	r3, #1
    b7f4:	469c      	mov	ip, r3
    b7f6:	3303      	adds	r3, #3
    b7f8:	44e2      	add	sl, ip
    b7fa:	469c      	mov	ip, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:516 (discriminator 2)
				for (m = 0; m < 6; m++)
				{
					pthisMagCal->fmatA[m][6] += pthisMagCal->fvecA[m];
				}
				// update the on and above diagonal terms except for right hand column 6
				for (m = 0; m < 6; m++)
    b7fc:	9b02      	ldr	r3, [sp, #8]
    b7fe:	44e3      	add	fp, ip
    b800:	459b      	cmp	fp, r3
    b802:	d1d0      	bne.n	b7a6 <fUpdateCalibration7EIG+0x1c6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:525
						pthisMagCal->fmatA[m][n] += pthisMagCal->fvecA[m] * pthisMagCal->fvecA[n];
					}
				}

				// increment the measurement counter for the next iteration
				iCount++;
    b804:	9b05      	ldr	r3, [sp, #20]
    b806:	3301      	adds	r3, #1
    b808:	b29b      	uxth	r3, r3
    b80a:	9305      	str	r3, [sp, #20]
    b80c:	9b03      	ldr	r3, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:487 (discriminator 2)

	// place from MINEQUATIONS to MAXEQUATIONS entries into product matrix fmatA
	iCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
	{
		for (k = 0; k < MAGBUFFSIZEY; k++)
    b80e:	9a06      	ldr	r2, [sp, #24]
    b810:	3304      	adds	r3, #4
    b812:	9303      	str	r3, [sp, #12]
    b814:	9b04      	ldr	r3, [sp, #16]
    b816:	3302      	adds	r3, #2
    b818:	9304      	str	r3, [sp, #16]
    b81a:	429a      	cmp	r2, r3
    b81c:	d000      	beq.n	b820 <fUpdateCalibration7EIG+0x240>
    b81e:	e72e      	b.n	b67e <fUpdateCalibration7EIG+0x9e>
    b820:	1c13      	adds	r3, r2, #0
    b822:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b824:	3330      	adds	r3, #48	; 0x30
    b826:	3260      	adds	r2, #96	; 0x60
    b828:	920c      	str	r2, [sp, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:485 (discriminator 2)
		}
	}

	// place from MINEQUATIONS to MAXEQUATIONS entries into product matrix fmatA
	iCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
    b82a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b82c:	46b3      	mov	fp, r6
    b82e:	9306      	str	r3, [sp, #24]
    b830:	4293      	cmp	r3, r2
    b832:	d000      	beq.n	b836 <fUpdateCalibration7EIG+0x256>
    b834:	e71e      	b.n	b674 <fUpdateCalibration7EIG+0x94>
    b836:	466a      	mov	r2, sp
    b838:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    b83a:	ab10      	add	r3, sp, #64	; 0x40
    b83c:	801a      	strh	r2, [r3, #0]
    b83e:	466a      	mov	r2, sp
    b840:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:531
			}
		}
	}

	// finally set the last element fmatA[6][6] to the number of measurements
	pthisMagCal->fmatA[6][6] = (float) iCount;
    b842:	9c05      	ldr	r4, [sp, #20]
    b844:	805a      	strh	r2, [r3, #2]
    b846:	466a      	mov	r2, sp
    b848:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    b84a:	b220      	sxth	r0, r4
    b84c:	809a      	strh	r2, [r3, #4]
    b84e:	f7f5 fe61 	bl	1514 <__aeabi_i2f>
    b852:	23e2      	movs	r3, #226	; 0xe2
    b854:	005b      	lsls	r3, r3, #1
    b856:	50f0      	str	r0, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:534

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;
    b858:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b85a:	4bdf      	ldr	r3, [pc, #892]	; (bbd8 <fUpdateCalibration7EIG+0x5f8>)
    b85c:	1c31      	adds	r1, r6, #0
    b85e:	52d4      	strh	r4, [r2, r3]
    b860:	1c32      	adds	r2, r6, #0
    b862:	2301      	movs	r3, #1
    b864:	2402      	movs	r4, #2
    b866:	31c0      	adds	r1, #192	; 0xc0
    b868:	32e4      	adds	r2, #228	; 0xe4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:541
	// copy the above diagonal elements of fmatA to below the diagonal
	for (m = 1; m < 7; m++)
	{
		for (n = 0; n < m; n++)
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    b86a:	6808      	ldr	r0, [r1, #0]
    b86c:	6010      	str	r0, [r2, #0]
    b86e:	b2d8      	uxtb	r0, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:539
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of fmatA to below the diagonal
	for (m = 1; m < 7; m++)
	{
		for (n = 0; n < m; n++)
    b870:	2b01      	cmp	r3, #1
    b872:	d100      	bne.n	b876 <fUpdateCalibration7EIG+0x296>
    b874:	e19a      	b.n	bbac <fUpdateCalibration7EIG+0x5cc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:541
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    b876:	6a8d      	ldr	r5, [r1, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:539
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of fmatA to below the diagonal
	for (m = 1; m < 7; m++)
	{
		for (n = 0; n < m; n++)
    b878:	b240      	sxtb	r0, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:541
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    b87a:	6055      	str	r5, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:539
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of fmatA to below the diagonal
	for (m = 1; m < 7; m++)
	{
		for (n = 0; n < m; n++)
    b87c:	2802      	cmp	r0, #2
    b87e:	d100      	bne.n	b882 <fUpdateCalibration7EIG+0x2a2>
    b880:	e194      	b.n	bbac <fUpdateCalibration7EIG+0x5cc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:541
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    b882:	6d0d      	ldr	r5, [r1, #80]	; 0x50
    b884:	6095      	str	r5, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:539
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of fmatA to below the diagonal
	for (m = 1; m < 7; m++)
	{
		for (n = 0; n < m; n++)
    b886:	2803      	cmp	r0, #3
    b888:	d100      	bne.n	b88c <fUpdateCalibration7EIG+0x2ac>
    b88a:	e18f      	b.n	bbac <fUpdateCalibration7EIG+0x5cc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:541
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    b88c:	6f8d      	ldr	r5, [r1, #120]	; 0x78
    b88e:	60d5      	str	r5, [r2, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:539
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of fmatA to below the diagonal
	for (m = 1; m < 7; m++)
	{
		for (n = 0; n < m; n++)
    b890:	2804      	cmp	r0, #4
    b892:	d100      	bne.n	b896 <fUpdateCalibration7EIG+0x2b6>
    b894:	e18a      	b.n	bbac <fUpdateCalibration7EIG+0x5cc>
    b896:	1c0d      	adds	r5, r1, #0
    b898:	35a0      	adds	r5, #160	; 0xa0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:541
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    b89a:	682d      	ldr	r5, [r5, #0]
    b89c:	6115      	str	r5, [r2, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:539
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of fmatA to below the diagonal
	for (m = 1; m < 7; m++)
	{
		for (n = 0; n < m; n++)
    b89e:	2806      	cmp	r0, #6
    b8a0:	d000      	beq.n	b8a4 <fUpdateCalibration7EIG+0x2c4>
    b8a2:	e180      	b.n	bba6 <fUpdateCalibration7EIG+0x5c6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:541
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    b8a4:	1c1a      	adds	r2, r3, #0
    b8a6:	0099      	lsls	r1, r3, #2
    b8a8:	3260      	adds	r2, #96	; 0x60
    b8aa:	0092      	lsls	r2, r2, #2
    b8ac:	18cb      	adds	r3, r1, r3
    b8ae:	445a      	add	r2, fp
    b8b0:	00db      	lsls	r3, r3, #3
    b8b2:	6852      	ldr	r2, [r2, #4]
    b8b4:	445b      	add	r3, fp
    b8b6:	33cc      	adds	r3, #204	; 0xcc
    b8b8:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:546
		}
	}

	// set tmpA7x1 to the unsorted eigenvalues and fmatB to the unsorted eigenvectors of fmatA
	eigencompute(pthisMagCal->fmatA, pthisMagCal->fvecA, pthisMagCal->fmatB, 7);
    b8ba:	2293      	movs	r2, #147	; 0x93
    b8bc:	4658      	mov	r0, fp
    b8be:	0092      	lsls	r2, r2, #2
    b8c0:	30bc      	adds	r0, #188	; 0xbc
    b8c2:	9907      	ldr	r1, [sp, #28]
    b8c4:	445a      	add	r2, fp
    b8c6:	2307      	movs	r3, #7
    b8c8:	f000 ffee 	bl	c8a8 <eigencompute>
    b8cc:	23f7      	movs	r3, #247	; 0xf7
    b8ce:	465a      	mov	r2, fp
    b8d0:	009b      	lsls	r3, r3, #2
    b8d2:	58d5      	ldr	r5, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:552

	// find the smallest eigenvalue
	j = 0;
	for (i = 1; i < 7; i++)
	{
		if (pthisMagCal->fvecA[i] < pthisMagCal->fvecA[j])
    b8d4:	3304      	adds	r3, #4
    b8d6:	58d4      	ldr	r4, [r2, r3]
    b8d8:	1c29      	adds	r1, r5, #0
    b8da:	1c20      	adds	r0, r4, #0
    b8dc:	f7f4 ffb4 	bl	848 <__aeabi_fcmplt>
    b8e0:	1c07      	adds	r7, r0, #0
    b8e2:	1e7b      	subs	r3, r7, #1
    b8e4:	419f      	sbcs	r7, r3
    b8e6:	2800      	cmp	r0, #0
    b8e8:	d100      	bne.n	b8ec <fUpdateCalibration7EIG+0x30c>
    b8ea:	1c2c      	adds	r4, r5, #0
    b8ec:	23f9      	movs	r3, #249	; 0xf9
    b8ee:	465a      	mov	r2, fp
    b8f0:	009b      	lsls	r3, r3, #2
    b8f2:	58d5      	ldr	r5, [r2, r3]
    b8f4:	1c21      	adds	r1, r4, #0
    b8f6:	1c28      	adds	r0, r5, #0
    b8f8:	f7f4 ffa6 	bl	848 <__aeabi_fcmplt>
    b8fc:	2602      	movs	r6, #2
    b8fe:	2800      	cmp	r0, #0
    b900:	d100      	bne.n	b904 <fUpdateCalibration7EIG+0x324>
    b902:	1c3e      	adds	r6, r7, #0
    b904:	b2f3      	uxtb	r3, r6
    b906:	1c28      	adds	r0, r5, #0
    b908:	1c21      	adds	r1, r4, #0
    b90a:	4698      	mov	r8, r3
    b90c:	f7f4 ff9c 	bl	848 <__aeabi_fcmplt>
    b910:	1c2e      	adds	r6, r5, #0
    b912:	2800      	cmp	r0, #0
    b914:	d100      	bne.n	b918 <fUpdateCalibration7EIG+0x338>
    b916:	1c26      	adds	r6, r4, #0
    b918:	23fa      	movs	r3, #250	; 0xfa
    b91a:	465a      	mov	r2, fp
    b91c:	009b      	lsls	r3, r3, #2
    b91e:	58d7      	ldr	r7, [r2, r3]
    b920:	1c31      	adds	r1, r6, #0
    b922:	1c38      	adds	r0, r7, #0
    b924:	f7f4 ff90 	bl	848 <__aeabi_fcmplt>
    b928:	2503      	movs	r5, #3
    b92a:	2800      	cmp	r0, #0
    b92c:	d100      	bne.n	b930 <fUpdateCalibration7EIG+0x350>
    b92e:	4645      	mov	r5, r8
    b930:	1c38      	adds	r0, r7, #0
    b932:	1c31      	adds	r1, r6, #0
    b934:	b2ed      	uxtb	r5, r5
    b936:	f7f4 ff87 	bl	848 <__aeabi_fcmplt>
    b93a:	2800      	cmp	r0, #0
    b93c:	d100      	bne.n	b940 <fUpdateCalibration7EIG+0x360>
    b93e:	1c37      	adds	r7, r6, #0
    b940:	23fb      	movs	r3, #251	; 0xfb
    b942:	465a      	mov	r2, fp
    b944:	009b      	lsls	r3, r3, #2
    b946:	58d4      	ldr	r4, [r2, r3]
    b948:	1c39      	adds	r1, r7, #0
    b94a:	1c20      	adds	r0, r4, #0
    b94c:	f7f4 ff7c 	bl	848 <__aeabi_fcmplt>
    b950:	2604      	movs	r6, #4
    b952:	2800      	cmp	r0, #0
    b954:	d100      	bne.n	b958 <fUpdateCalibration7EIG+0x378>
    b956:	1c2e      	adds	r6, r5, #0
    b958:	1c20      	adds	r0, r4, #0
    b95a:	1c39      	adds	r1, r7, #0
    b95c:	b2f6      	uxtb	r6, r6
    b95e:	f7f4 ff73 	bl	848 <__aeabi_fcmplt>
    b962:	2800      	cmp	r0, #0
    b964:	d100      	bne.n	b968 <fUpdateCalibration7EIG+0x388>
    b966:	1c3c      	adds	r4, r7, #0
    b968:	23fc      	movs	r3, #252	; 0xfc
    b96a:	465a      	mov	r2, fp
    b96c:	009b      	lsls	r3, r3, #2
    b96e:	58d5      	ldr	r5, [r2, r3]
    b970:	1c21      	adds	r1, r4, #0
    b972:	1c28      	adds	r0, r5, #0
    b974:	f7f4 ff68 	bl	848 <__aeabi_fcmplt>
    b978:	1c29      	adds	r1, r5, #0
    b97a:	2800      	cmp	r0, #0
    b97c:	d100      	bne.n	b980 <fUpdateCalibration7EIG+0x3a0>
    b97e:	1c21      	adds	r1, r4, #0
    b980:	23fd      	movs	r3, #253	; 0xfd
    b982:	465a      	mov	r2, fp
    b984:	009b      	lsls	r3, r3, #2
    b986:	58d0      	ldr	r0, [r2, r3]
    b988:	f7f4 ff5e 	bl	848 <__aeabi_fcmplt>
    b98c:	2706      	movs	r7, #6
    b98e:	2800      	cmp	r0, #0
    b990:	d108      	bne.n	b9a4 <fUpdateCalibration7EIG+0x3c4>
    b992:	1c28      	adds	r0, r5, #0
    b994:	1c21      	adds	r1, r4, #0
    b996:	f7f4 ff57 	bl	848 <__aeabi_fcmplt>
    b99a:	2305      	movs	r3, #5
    b99c:	2800      	cmp	r0, #0
    b99e:	d100      	bne.n	b9a2 <fUpdateCalibration7EIG+0x3c2>
    b9a0:	1c33      	adds	r3, r6, #0
    b9a2:	b25f      	sxtb	r7, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:560
		}
	}

	// set ellipsoid matrix A to the solution vector with smallest eigenvalue, compute its determinant
	// and the hard iron offset (scaled and offset)
	f3x3matrixAeqScalar(pthisMagCal->fA, 0.0F);
    b9a4:	465e      	mov	r6, fp
    b9a6:	3674      	adds	r6, #116	; 0x74
    b9a8:	1c30      	adds	r0, r6, #0
    b9aa:	2100      	movs	r1, #0
    b9ac:	f000 fe16 	bl	c5dc <f3x3matrixAeqScalar>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:564
	det = 1.0F;
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->fA[l][l] = pthisMagCal->fmatB[l][j];
    b9b0:	1c3b      	adds	r3, r7, #0
    b9b2:	3392      	adds	r3, #146	; 0x92
    b9b4:	009b      	lsls	r3, r3, #2
    b9b6:	445b      	add	r3, fp
    b9b8:	685c      	ldr	r4, [r3, #4]
    b9ba:	465b      	mov	r3, fp
    b9bc:	675c      	str	r4, [r3, #116]	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:566
		det *= pthisMagCal->fA[l][l];
		pthisMagCal->ftrV[l] = -0.5F * pthisMagCal->fmatB[l + 3][j] / pthisMagCal->fA[l][l];
    b9be:	1c3b      	adds	r3, r7, #0
    b9c0:	21bf      	movs	r1, #191	; 0xbf
    b9c2:	33b0      	adds	r3, #176	; 0xb0
    b9c4:	009b      	lsls	r3, r3, #2
    b9c6:	445b      	add	r3, fp
    b9c8:	6858      	ldr	r0, [r3, #4]
    b9ca:	0609      	lsls	r1, r1, #24
    b9cc:	f7f5 fad2 	bl	f74 <__aeabi_fmul>
    b9d0:	1c21      	adds	r1, r4, #0
    b9d2:	f7f5 f8dd 	bl	b90 <__aeabi_fdiv>
    b9d6:	465b      	mov	r3, fp
    b9d8:	63d8      	str	r0, [r3, #60]	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:564
	// and the hard iron offset (scaled and offset)
	f3x3matrixAeqScalar(pthisMagCal->fA, 0.0F);
	det = 1.0F;
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->fA[l][l] = pthisMagCal->fmatB[l][j];
    b9da:	1c3b      	adds	r3, r7, #0
    b9dc:	339c      	adds	r3, #156	; 0x9c
    b9de:	009b      	lsls	r3, r3, #2
    b9e0:	445b      	add	r3, fp
    b9e2:	685d      	ldr	r5, [r3, #4]
    b9e4:	465a      	mov	r2, fp
    b9e6:	2384      	movs	r3, #132	; 0x84
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:565
		det *= pthisMagCal->fA[l][l];
    b9e8:	1c21      	adds	r1, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:564
	// and the hard iron offset (scaled and offset)
	f3x3matrixAeqScalar(pthisMagCal->fA, 0.0F);
	det = 1.0F;
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->fA[l][l] = pthisMagCal->fmatB[l][j];
    b9ea:	50d5      	str	r5, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:565
		det *= pthisMagCal->fA[l][l];
    b9ec:	1c28      	adds	r0, r5, #0
    b9ee:	f7f5 fac1 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:566
		pthisMagCal->ftrV[l] = -0.5F * pthisMagCal->fmatB[l + 3][j] / pthisMagCal->fA[l][l];
    b9f2:	1c3b      	adds	r3, r7, #0
    b9f4:	21bf      	movs	r1, #191	; 0xbf
    b9f6:	33ba      	adds	r3, #186	; 0xba
    b9f8:	009b      	lsls	r3, r3, #2
    b9fa:	445b      	add	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:565
	f3x3matrixAeqScalar(pthisMagCal->fA, 0.0F);
	det = 1.0F;
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->fA[l][l] = pthisMagCal->fmatB[l][j];
		det *= pthisMagCal->fA[l][l];
    b9fc:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:566
		pthisMagCal->ftrV[l] = -0.5F * pthisMagCal->fmatB[l + 3][j] / pthisMagCal->fA[l][l];
    b9fe:	0609      	lsls	r1, r1, #24
    ba00:	6858      	ldr	r0, [r3, #4]
    ba02:	f7f5 fab7 	bl	f74 <__aeabi_fmul>
    ba06:	1c29      	adds	r1, r5, #0
    ba08:	f7f5 f8c2 	bl	b90 <__aeabi_fdiv>
    ba0c:	465b      	mov	r3, fp
    ba0e:	6418      	str	r0, [r3, #64]	; 0x40
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:564
	// and the hard iron offset (scaled and offset)
	f3x3matrixAeqScalar(pthisMagCal->fA, 0.0F);
	det = 1.0F;
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->fA[l][l] = pthisMagCal->fmatB[l][j];
    ba10:	1c3b      	adds	r3, r7, #0
    ba12:	33a6      	adds	r3, #166	; 0xa6
    ba14:	009b      	lsls	r3, r3, #2
    ba16:	445b      	add	r3, fp
    ba18:	685d      	ldr	r5, [r3, #4]
    ba1a:	465a      	mov	r2, fp
    ba1c:	2394      	movs	r3, #148	; 0x94
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:565
		det *= pthisMagCal->fA[l][l];
    ba1e:	1c21      	adds	r1, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:564
	// and the hard iron offset (scaled and offset)
	f3x3matrixAeqScalar(pthisMagCal->fA, 0.0F);
	det = 1.0F;
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->fA[l][l] = pthisMagCal->fmatB[l][j];
    ba20:	50d5      	str	r5, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:565
		det *= pthisMagCal->fA[l][l];
    ba22:	1c28      	adds	r0, r5, #0
    ba24:	f7f5 faa6 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:566
		pthisMagCal->ftrV[l] = -0.5F * pthisMagCal->fmatB[l + 3][j] / pthisMagCal->fA[l][l];
    ba28:	1c3b      	adds	r3, r7, #0
    ba2a:	21bf      	movs	r1, #191	; 0xbf
    ba2c:	33c4      	adds	r3, #196	; 0xc4
    ba2e:	009b      	lsls	r3, r3, #2
    ba30:	445b      	add	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:565
	f3x3matrixAeqScalar(pthisMagCal->fA, 0.0F);
	det = 1.0F;
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->fA[l][l] = pthisMagCal->fmatB[l][j];
		det *= pthisMagCal->fA[l][l];
    ba32:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:566
		pthisMagCal->ftrV[l] = -0.5F * pthisMagCal->fmatB[l + 3][j] / pthisMagCal->fA[l][l];
    ba34:	0609      	lsls	r1, r1, #24
    ba36:	6858      	ldr	r0, [r3, #4]
    ba38:	f7f5 fa9c 	bl	f74 <__aeabi_fmul>
    ba3c:	1c29      	adds	r1, r5, #0
    ba3e:	f7f5 f8a7 	bl	b90 <__aeabi_fdiv>
    ba42:	465b      	mov	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:570
	}

	// negate A if it has negative determinant
	if (det < 0.0F)
    ba44:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:566
	det = 1.0F;
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->fA[l][l] = pthisMagCal->fmatB[l][j];
		det *= pthisMagCal->fA[l][l];
		pthisMagCal->ftrV[l] = -0.5F * pthisMagCal->fmatB[l + 3][j] / pthisMagCal->fA[l][l];
    ba46:	6458      	str	r0, [r3, #68]	; 0x44
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:570
	}

	// negate A if it has negative determinant
	if (det < 0.0F)
    ba48:	1c20      	adds	r0, r4, #0
    ba4a:	f7f4 fefd 	bl	848 <__aeabi_fcmplt>
    ba4e:	2800      	cmp	r0, #0
    ba50:	d000      	beq.n	ba54 <fUpdateCalibration7EIG+0x474>
    ba52:	e0b1      	b.n	bbb8 <fUpdateCalibration7EIG+0x5d8>
    ba54:	1c3b      	adds	r3, r7, #0
    ba56:	33ce      	adds	r3, #206	; 0xce
    ba58:	009b      	lsls	r3, r3, #2
    ba5a:	445b      	add	r3, fp
    ba5c:	685d      	ldr	r5, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:581

	// set ftmp to the square of the trial geomagnetic field strength B (counts times FMATRIXSCALING)
	ftmp = -pthisMagCal->fmatB[6][j];
	for (l = X; l <= Z; l++)
	{
		ftmp += pthisMagCal->fA[l][l] * pthisMagCal->ftrV[l] * pthisMagCal->ftrV[l];
    ba5e:	465b      	mov	r3, fp
    ba60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    ba62:	4698      	mov	r8, r3
    ba64:	1c18      	adds	r0, r3, #0
    ba66:	465b      	mov	r3, fp
    ba68:	6f59      	ldr	r1, [r3, #116]	; 0x74
    ba6a:	f7f5 fa83 	bl	f74 <__aeabi_fmul>
    ba6e:	1c01      	adds	r1, r0, #0
    ba70:	4640      	mov	r0, r8
    ba72:	f7f5 fa7f 	bl	f74 <__aeabi_fmul>
    ba76:	1c29      	adds	r1, r5, #0
    ba78:	f7f5 fbae 	bl	11d8 <__aeabi_fsub>
    ba7c:	465b      	mov	r3, fp
    ba7e:	465a      	mov	r2, fp
    ba80:	6c1d      	ldr	r5, [r3, #64]	; 0x40
    ba82:	2384      	movs	r3, #132	; 0x84
    ba84:	4680      	mov	r8, r0
    ba86:	58d1      	ldr	r1, [r2, r3]
    ba88:	1c28      	adds	r0, r5, #0
    ba8a:	f7f5 fa73 	bl	f74 <__aeabi_fmul>
    ba8e:	1c01      	adds	r1, r0, #0
    ba90:	1c28      	adds	r0, r5, #0
    ba92:	f7f5 fa6f 	bl	f74 <__aeabi_fmul>
    ba96:	1c01      	adds	r1, r0, #0
    ba98:	4640      	mov	r0, r8
    ba9a:	f7f4 fefd 	bl	898 <__aeabi_fadd>
    ba9e:	465b      	mov	r3, fp
    baa0:	465a      	mov	r2, fp
    baa2:	6c5d      	ldr	r5, [r3, #68]	; 0x44
    baa4:	2394      	movs	r3, #148	; 0x94
    baa6:	4680      	mov	r8, r0
    baa8:	58d1      	ldr	r1, [r2, r3]
    baaa:	1c28      	adds	r0, r5, #0
    baac:	f7f5 fa62 	bl	f74 <__aeabi_fmul>
    bab0:	1c01      	adds	r1, r0, #0
    bab2:	1c28      	adds	r0, r5, #0
    bab4:	f7f5 fa5e 	bl	f74 <__aeabi_fmul>
    bab8:	4641      	mov	r1, r8
    baba:	f7f4 feed 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:585
	}

	// calculate the trial normalized fit error as a percentage
	pthisMagCal->ftrFitErrorpc = 50.0F * sqrtf(fabs(pthisMagCal->fvecA[j]) / (float) pthisMagBuffer->iMagBufferCount) / fabs(ftmp);
    babe:	1c3b      	adds	r3, r7, #0
    bac0:	33f6      	adds	r3, #246	; 0xf6
    bac2:	009b      	lsls	r3, r3, #2
    bac4:	445b      	add	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:581

	// set ftmp to the square of the trial geomagnetic field strength B (counts times FMATRIXSCALING)
	ftmp = -pthisMagCal->fmatB[6][j];
	for (l = X; l <= Z; l++)
	{
		ftmp += pthisMagCal->fA[l][l] * pthisMagCal->ftrV[l] * pthisMagCal->ftrV[l];
    bac6:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:585
	}

	// calculate the trial normalized fit error as a percentage
	pthisMagCal->ftrFitErrorpc = 50.0F * sqrtf(fabs(pthisMagCal->fvecA[j]) / (float) pthisMagBuffer->iMagBufferCount) / fabs(ftmp);
    bac8:	6858      	ldr	r0, [r3, #4]
    baca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bacc:	4b42      	ldr	r3, [pc, #264]	; (bbd8 <fUpdateCalibration7EIG+0x5f8>)
    bace:	0040      	lsls	r0, r0, #1
    bad0:	0847      	lsrs	r7, r0, #1
    bad2:	5ed0      	ldrsh	r0, [r2, r3]
    bad4:	f7f5 fd1e 	bl	1514 <__aeabi_i2f>
    bad8:	1c01      	adds	r1, r0, #0
    bada:	1c38      	adds	r0, r7, #0
    badc:	f7f5 f858 	bl	b90 <__aeabi_fdiv>
    bae0:	006d      	lsls	r5, r5, #1
    bae2:	f006 ff93 	bl	12a0c <sqrtf>
    bae6:	086d      	lsrs	r5, r5, #1
    bae8:	493c      	ldr	r1, [pc, #240]	; (bbdc <fUpdateCalibration7EIG+0x5fc>)
    baea:	f7f5 fa43 	bl	f74 <__aeabi_fmul>
    baee:	1c29      	adds	r1, r5, #0
    baf0:	f7f5 f84e 	bl	b90 <__aeabi_fdiv>
    baf4:	465b      	mov	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:588

	// normalize the ellipsoid matrix A to unit determinant
	f3x3matrixAeqAxScalar(pthisMagCal->fA, powf(det, -(ONETHIRD)));
    baf6:	493a      	ldr	r1, [pc, #232]	; (bbe0 <fUpdateCalibration7EIG+0x600>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:585
	{
		ftmp += pthisMagCal->fA[l][l] * pthisMagCal->ftrV[l] * pthisMagCal->ftrV[l];
	}

	// calculate the trial normalized fit error as a percentage
	pthisMagCal->ftrFitErrorpc = 50.0F * sqrtf(fabs(pthisMagCal->fvecA[j]) / (float) pthisMagBuffer->iMagBufferCount) / fabs(ftmp);
    baf8:	6718      	str	r0, [r3, #112]	; 0x70
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:588

	// normalize the ellipsoid matrix A to unit determinant
	f3x3matrixAeqAxScalar(pthisMagCal->fA, powf(det, -(ONETHIRD)));
    bafa:	1c20      	adds	r0, r4, #0
    bafc:	f006 fdde 	bl	126bc <powf>
    bb00:	1c01      	adds	r1, r0, #0
    bb02:	1c30      	adds	r0, r6, #0
    bb04:	f000 fd74 	bl	c5f0 <f3x3matrixAeqAxScalar>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:591

	// convert the geomagnetic field strength B into uT for normalized soft iron matrix A and normalize
	pthisMagCal->ftrB = sqrtf(fabs(ftmp)) * DEFAULTB * powf(det, -(ONESIXTH));
    bb08:	1c28      	adds	r0, r5, #0
    bb0a:	f006 ff7f 	bl	12a0c <sqrtf>
    bb0e:	4935      	ldr	r1, [pc, #212]	; (bbe4 <fUpdateCalibration7EIG+0x604>)
    bb10:	1c05      	adds	r5, r0, #0
    bb12:	1c20      	adds	r0, r4, #0
    bb14:	f006 fdd2 	bl	126bc <powf>
    bb18:	4930      	ldr	r1, [pc, #192]	; (bbdc <fUpdateCalibration7EIG+0x5fc>)
    bb1a:	1c04      	adds	r4, r0, #0
    bb1c:	1c28      	adds	r0, r5, #0
    bb1e:	f7f5 fa29 	bl	f74 <__aeabi_fmul>
    bb22:	1c21      	adds	r1, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:594

	// compute trial invW from the square root of A also with normalized determinant and hard iron offset in uT
	f3x3matrixAeqI(pthisMagCal->ftrinvW);
    bb24:	465c      	mov	r4, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:591

	// normalize the ellipsoid matrix A to unit determinant
	f3x3matrixAeqAxScalar(pthisMagCal->fA, powf(det, -(ONETHIRD)));

	// convert the geomagnetic field strength B into uT for normalized soft iron matrix A and normalize
	pthisMagCal->ftrB = sqrtf(fabs(ftmp)) * DEFAULTB * powf(det, -(ONESIXTH));
    bb26:	f7f5 fa25 	bl	f74 <__aeabi_fmul>
    bb2a:	465b      	mov	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:594

	// compute trial invW from the square root of A also with normalized determinant and hard iron offset in uT
	f3x3matrixAeqI(pthisMagCal->ftrinvW);
    bb2c:	3448      	adds	r4, #72	; 0x48
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:591

	// normalize the ellipsoid matrix A to unit determinant
	f3x3matrixAeqAxScalar(pthisMagCal->fA, powf(det, -(ONETHIRD)));

	// convert the geomagnetic field strength B into uT for normalized soft iron matrix A and normalize
	pthisMagCal->ftrB = sqrtf(fabs(ftmp)) * DEFAULTB * powf(det, -(ONESIXTH));
    bb2e:	66d8      	str	r0, [r3, #108]	; 0x6c
    bb30:	465e      	mov	r6, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:594

	// compute trial invW from the square root of A also with normalized determinant and hard iron offset in uT
	f3x3matrixAeqI(pthisMagCal->ftrinvW);
    bb32:	1c20      	adds	r0, r4, #0
    bb34:	f000 fd44 	bl	c5c0 <f3x3matrixAeqI>
    bb38:	2500      	movs	r5, #0
    bb3a:	363c      	adds	r6, #60	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:597 (discriminator 3)
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrinvW[l][l] = sqrtf(fabs(pthisMagCal->fA[l][l]));
    bb3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    bb3e:	0058      	lsls	r0, r3, #1
    bb40:	0840      	lsrs	r0, r0, #1
    bb42:	f006 ff63 	bl	12a0c <sqrtf>
    bb46:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:598 (discriminator 3)
		pthisMagCal->ftrV[l] = pthisMagCal->ftrV[l] * DEFAULTB + (float)iOffset[l] * pthisMag->fuTPerCount;
    bb48:	4924      	ldr	r1, [pc, #144]	; (bbdc <fUpdateCalibration7EIG+0x5fc>)
    bb4a:	6830      	ldr	r0, [r6, #0]
    bb4c:	f7f5 fa12 	bl	f74 <__aeabi_fmul>
    bb50:	ab10      	add	r3, sp, #64	; 0x40
    bb52:	1c07      	adds	r7, r0, #0
    bb54:	5f58      	ldrsh	r0, [r3, r5]
    bb56:	f7f5 fcdd 	bl	1514 <__aeabi_i2f>
    bb5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    bb5c:	3502      	adds	r5, #2
    bb5e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    bb60:	f7f5 fa08 	bl	f74 <__aeabi_fmul>
    bb64:	1c01      	adds	r1, r0, #0
    bb66:	1c38      	adds	r0, r7, #0
    bb68:	f7f4 fe96 	bl	898 <__aeabi_fadd>
    bb6c:	3410      	adds	r4, #16
    bb6e:	c601      	stmia	r6!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:595 (discriminator 3)
	// convert the geomagnetic field strength B into uT for normalized soft iron matrix A and normalize
	pthisMagCal->ftrB = sqrtf(fabs(ftmp)) * DEFAULTB * powf(det, -(ONESIXTH));

	// compute trial invW from the square root of A also with normalized determinant and hard iron offset in uT
	f3x3matrixAeqI(pthisMagCal->ftrinvW);
	for (l = X; l <= Z; l++)
    bb70:	2d06      	cmp	r5, #6
    bb72:	d1e3      	bne.n	bb3c <fUpdateCalibration7EIG+0x55c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:602
		pthisMagCal->ftrinvW[l][l] = sqrtf(fabs(pthisMagCal->fA[l][l]));
		pthisMagCal->ftrV[l] = pthisMagCal->ftrV[l] * DEFAULTB + (float)iOffset[l] * pthisMag->fuTPerCount;
	}

	return;
}
    bb74:	b013      	add	sp, #76	; 0x4c
    bb76:	bc3c      	pop	{r2, r3, r4, r5}
    bb78:	4690      	mov	r8, r2
    bb7a:	4699      	mov	r9, r3
    bb7c:	46a2      	mov	sl, r4
    bb7e:	46ab      	mov	fp, r5
    bb80:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:496 (discriminator 1)
				// use first valid magnetic buffer entry as offset estimate (bit counts)
				if (iCount == 0)
				{
					for (l = X; l <= Z; l++)
					{
						iOffset[l] = pthisMagBuffer->iBpFast[l][j][k];
    bb82:	9904      	ldr	r1, [sp, #16]
    bb84:	2400      	movs	r4, #0
    bb86:	880b      	ldrh	r3, [r1, #0]
    bb88:	468c      	mov	ip, r1
    bb8a:	9309      	str	r3, [sp, #36]	; 0x24
    bb8c:	2390      	movs	r3, #144	; 0x90
    bb8e:	009b      	lsls	r3, r3, #2
    bb90:	4463      	add	r3, ip
    bb92:	881b      	ldrh	r3, [r3, #0]
    bb94:	1c25      	adds	r5, r4, #0
    bb96:	930b      	str	r3, [sp, #44]	; 0x2c
    bb98:	2390      	movs	r3, #144	; 0x90
    bb9a:	00db      	lsls	r3, r3, #3
    bb9c:	4463      	add	r3, ip
    bb9e:	881b      	ldrh	r3, [r3, #0]
    bba0:	1c27      	adds	r7, r4, #0
    bba2:	930a      	str	r3, [sp, #40]	; 0x28
    bba4:	e599      	b.n	b6da <fUpdateCalibration7EIG+0xfa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:537 (discriminator 2)

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of fmatA to below the diagonal
	for (m = 1; m < 7; m++)
    bba6:	2c07      	cmp	r4, #7
    bba8:	d100      	bne.n	bbac <fUpdateCalibration7EIG+0x5cc>
    bbaa:	e686      	b.n	b8ba <fUpdateCalibration7EIG+0x2da>
    bbac:	3401      	adds	r4, #1
    bbae:	3104      	adds	r1, #4
    bbb0:	3228      	adds	r2, #40	; 0x28
    bbb2:	b2e4      	uxtb	r4, r4
    bbb4:	3301      	adds	r3, #1
    bbb6:	e658      	b.n	b86a <fUpdateCalibration7EIG+0x28a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:572
	}

	// negate A if it has negative determinant
	if (det < 0.0F)
	{
		f3x3matrixAeqMinusA(pthisMagCal->fA);
    bbb8:	1c30      	adds	r0, r6, #0
    bbba:	f000 fd49 	bl	c650 <f3x3matrixAeqMinusA>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:573
		pthisMagCal->fmatB[6][j] = -pthisMagCal->fmatB[6][j];
    bbbe:	2080      	movs	r0, #128	; 0x80
    bbc0:	22cf      	movs	r2, #207	; 0xcf
    bbc2:	0600      	lsls	r0, r0, #24
    bbc4:	4684      	mov	ip, r0
    bbc6:	00bb      	lsls	r3, r7, #2
    bbc8:	445b      	add	r3, fp
    bbca:	0092      	lsls	r2, r2, #2
    bbcc:	5899      	ldr	r1, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:574
		det = -det;
    bbce:	4464      	add	r4, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:573

	// negate A if it has negative determinant
	if (det < 0.0F)
	{
		f3x3matrixAeqMinusA(pthisMagCal->fA);
		pthisMagCal->fmatB[6][j] = -pthisMagCal->fmatB[6][j];
    bbd0:	4461      	add	r1, ip
    bbd2:	1c0d      	adds	r5, r1, #0
    bbd4:	5099      	str	r1, [r3, r2]
    bbd6:	e742      	b.n	ba5e <fUpdateCalibration7EIG+0x47e>
    bbd8:	00000b56 	.word	0x00000b56
    bbdc:	42480000 	.word	0x42480000
    bbe0:	beaaaaab 	.word	0xbeaaaaab
    bbe4:	be2aaaab 	.word	0xbe2aaaab

0000bbe8 <fUpdateCalibration10EIG>:
fUpdateCalibration10EIG():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:606
	return;
}

// 10 element calibration using direct eigen-decomposition
void fUpdateCalibration10EIG(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer, struct MagSensor *pthisMag)
{
    bbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    bbea:	465f      	mov	r7, fp
    bbec:	464d      	mov	r5, r9
    bbee:	4644      	mov	r4, r8
    bbf0:	4656      	mov	r6, sl
    bbf2:	b4f0      	push	{r4, r5, r6, r7}
    bbf4:	b093      	sub	sp, #76	; 0x4c
    bbf6:	4683      	mov	fp, r0
    bbf8:	910d      	str	r1, [sp, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:616
	int16 iOffset[3];						// offset to remove large DC hard iron bias in matrix
	int16 iCount;							// number of measurements counted
	int8 i, j, k, l, m, n;					// loop counters

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;
    bbfa:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    bbfc:	498d      	ldr	r1, [pc, #564]	; (be34 <fUpdateCalibration10EIG+0x24c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:606
	return;
}

// 10 element calibration using direct eigen-decomposition
void fUpdateCalibration10EIG(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer, struct MagSensor *pthisMag)
{
    bbfe:	920f      	str	r2, [sp, #60]	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:616
	int16 iOffset[3];						// offset to remove large DC hard iron bias in matrix
	int16 iCount;							// number of measurements counted
	int8 i, j, k, l, m, n;					// loop counters

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;
    bc00:	f7f4 ffc6 	bl	b90 <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:619

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
    bc04:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:616
	int16 iOffset[3];						// offset to remove large DC hard iron bias in matrix
	int16 iCount;							// number of measurements counted
	int8 i, j, k, l, m, n;					// loop counters

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;
    bc06:	900b      	str	r0, [sp, #44]	; 0x2c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:626
	// zero the on and above diagonal elements of the 10x10 symmetric measurement matrix fmatA
	for (m = 0; m < 10; m++)
	{
		for (n = m; n < 10; n++)
		{
			pthisMagCal->fmatA[m][n] = 0.0F;
    bc08:	2400      	movs	r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:619

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
    bc0a:	2000      	movs	r0, #0
    bc0c:	465d      	mov	r5, fp
    bc0e:	aa10      	add	r2, sp, #64	; 0x40
    bc10:	8093      	strh	r3, [r2, #4]
    bc12:	8053      	strh	r3, [r2, #2]
    bc14:	8013      	strh	r3, [r2, #0]
    bc16:	0081      	lsls	r1, r0, #2
    bc18:	b2c2      	uxtb	r2, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:626
	// zero the on and above diagonal elements of the 10x10 symmetric measurement matrix fmatA
	for (m = 0; m < 10; m++)
	{
		for (n = m; n < 10; n++)
		{
			pthisMagCal->fmatA[m][n] = 0.0F;
    bc1a:	1809      	adds	r1, r1, r0
    bc1c:	b253      	sxtb	r3, r2
    bc1e:	0049      	lsls	r1, r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:626 (discriminator 3)
    bc20:	18cb      	adds	r3, r1, r3
    bc22:	332e      	adds	r3, #46	; 0x2e
    bc24:	009b      	lsls	r3, r3, #2
    bc26:	3201      	adds	r2, #1
    bc28:	18eb      	adds	r3, r5, r3
    bc2a:	b2d2      	uxtb	r2, r2
    bc2c:	605c      	str	r4, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:624 (discriminator 3)
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;

	// zero the on and above diagonal elements of the 10x10 symmetric measurement matrix fmatA
	for (m = 0; m < 10; m++)
	{
		for (n = m; n < 10; n++)
    bc2e:	b253      	sxtb	r3, r2
    bc30:	2b09      	cmp	r3, #9
    bc32:	ddf5      	ble.n	bc20 <fUpdateCalibration10EIG+0x38>
    bc34:	3001      	adds	r0, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:622 (discriminator 2)

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;

	// zero the on and above diagonal elements of the 10x10 symmetric measurement matrix fmatA
	for (m = 0; m < 10; m++)
    bc36:	280a      	cmp	r0, #10
    bc38:	d1ed      	bne.n	bc16 <fUpdateCalibration10EIG+0x2e>
    bc3a:	ab10      	add	r3, sp, #64	; 0x40
    bc3c:	881b      	ldrh	r3, [r3, #0]
    bc3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bc40:	9309      	str	r3, [sp, #36]	; 0x24
    bc42:	ab10      	add	r3, sp, #64	; 0x40
    bc44:	885b      	ldrh	r3, [r3, #2]
    bc46:	21d8      	movs	r1, #216	; 0xd8
    bc48:	930a      	str	r3, [sp, #40]	; 0x28
    bc4a:	ab10      	add	r3, sp, #64	; 0x40
    bc4c:	889b      	ldrh	r3, [r3, #4]
    bc4e:	00c9      	lsls	r1, r1, #3
    bc50:	9308      	str	r3, [sp, #32]
    bc52:	1c13      	adds	r3, r2, #0
    bc54:	3330      	adds	r3, #48	; 0x30
    bc56:	9306      	str	r3, [sp, #24]
    bc58:	468c      	mov	ip, r1
    bc5a:	1c13      	adds	r3, r2, #0
    bc5c:	4463      	add	r3, ip
    bc5e:	930c      	str	r3, [sp, #48]	; 0x30
    bc60:	1c13      	adds	r3, r2, #0
    bc62:	229c      	movs	r2, #156	; 0x9c
    bc64:	0092      	lsls	r2, r2, #2
    bc66:	4694      	mov	ip, r2
    bc68:	4463      	add	r3, ip
    bc6a:	930e      	str	r3, [sp, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:622
    bc6c:	2300      	movs	r3, #0
    bc6e:	9303      	str	r3, [sp, #12]
    bc70:	23f7      	movs	r3, #247	; 0xf7
    bc72:	46ab      	mov	fp, r5
    bc74:	009b      	lsls	r3, r3, #2
    bc76:	445b      	add	r3, fp
    bc78:	9307      	str	r3, [sp, #28]
    bc7a:	9b06      	ldr	r3, [sp, #24]
    bc7c:	465c      	mov	r4, fp
    bc7e:	3b30      	subs	r3, #48	; 0x30
    bc80:	9302      	str	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:619

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
    bc82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bc84:	9301      	str	r3, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:636
	iCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
	{
		for (k = 0; k < MAGBUFFSIZEY; k++)
		{
			if (pthisMagBuffer->index[j][k] != -1)
    bc86:	9b01      	ldr	r3, [sp, #4]
    bc88:	681b      	ldr	r3, [r3, #0]
    bc8a:	9300      	str	r3, [sp, #0]
    bc8c:	3301      	adds	r3, #1
    bc8e:	d100      	bne.n	bc92 <fUpdateCalibration10EIG+0xaa>
    bc90:	e0f4      	b.n	be7c <fUpdateCalibration10EIG+0x294>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:639
			{
				// use first valid magnetic buffer entry as estimate for offset to help solution (bit counts)
				if (iCount == 0)
    bc92:	9b03      	ldr	r3, [sp, #12]
    bc94:	2b00      	cmp	r3, #0
    bc96:	d101      	bne.n	bc9c <fUpdateCalibration10EIG+0xb4>
    bc98:	f000 fc66 	bl	c568 <fUpdateCalibration10EIG+0x980>
    bc9c:	9d02      	ldr	r5, [sp, #8]
    bc9e:	2200      	movs	r2, #0
    bca0:	5eab      	ldrsh	r3, [r5, r2]
    bca2:	466a      	mov	r2, sp
    bca4:	2024      	movs	r0, #36	; 0x24
    bca6:	5e10      	ldrsh	r0, [r2, r0]
    bca8:	1a18      	subs	r0, r3, r0
    bcaa:	f7f5 fc33 	bl	1514 <__aeabi_i2f>
    bcae:	2390      	movs	r3, #144	; 0x90
    bcb0:	46ac      	mov	ip, r5
    bcb2:	009b      	lsls	r3, r3, #2
    bcb4:	4463      	add	r3, ip
    bcb6:	2200      	movs	r2, #0
    bcb8:	5e9b      	ldrsh	r3, [r3, r2]
    bcba:	466a      	mov	r2, sp
    bcbc:	1c07      	adds	r7, r0, #0
    bcbe:	2028      	movs	r0, #40	; 0x28
    bcc0:	5e10      	ldrsh	r0, [r2, r0]
    bcc2:	1a18      	subs	r0, r3, r0
    bcc4:	f7f5 fc26 	bl	1514 <__aeabi_i2f>
    bcc8:	2390      	movs	r3, #144	; 0x90
    bcca:	46ac      	mov	ip, r5
    bccc:	00db      	lsls	r3, r3, #3
    bcce:	4463      	add	r3, ip
    bcd0:	2200      	movs	r2, #0
    bcd2:	5e9b      	ldrsh	r3, [r3, r2]
    bcd4:	466a      	mov	r2, sp
    bcd6:	1c06      	adds	r6, r0, #0
    bcd8:	2020      	movs	r0, #32
    bcda:	5e10      	ldrsh	r0, [r2, r0]
    bcdc:	1a18      	subs	r0, r3, r0
    bcde:	f7f5 fc19 	bl	1514 <__aeabi_i2f>
    bce2:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:650 (discriminator 1)
				}

				// apply the fixed offset and scaling and enter into fvecA[6-8]
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l + 6] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    bce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bce6:	1c39      	adds	r1, r7, #0
    bce8:	1c18      	adds	r0, r3, #0
    bcea:	4698      	mov	r8, r3
    bcec:	f7f5 f942 	bl	f74 <__aeabi_fmul>
    bcf0:	23fd      	movs	r3, #253	; 0xfd
    bcf2:	009b      	lsls	r3, r3, #2
    bcf4:	1c07      	adds	r7, r0, #0
    bcf6:	50e0      	str	r0, [r4, r3]
    bcf8:	1c31      	adds	r1, r6, #0
    bcfa:	4640      	mov	r0, r8
    bcfc:	f7f5 f93a 	bl	f74 <__aeabi_fmul>
    bd00:	23fe      	movs	r3, #254	; 0xfe
    bd02:	009b      	lsls	r3, r3, #2
    bd04:	1c06      	adds	r6, r0, #0
    bd06:	50e0      	str	r0, [r4, r3]
    bd08:	1c29      	adds	r1, r5, #0
    bd0a:	4640      	mov	r0, r8
    bd0c:	f7f5 f932 	bl	f74 <__aeabi_fmul>
    bd10:	23ff      	movs	r3, #255	; 0xff
    bd12:	009b      	lsls	r3, r3, #2
    bd14:	50e0      	str	r0, [r4, r3]
    bd16:	4683      	mov	fp, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:654 (discriminator 1)
				}

				// compute measurement vector elements fvecA[0-5] from fvecA[6-8]
				pthisMagCal->fvecA[0] = pthisMagCal->fvecA[6] * pthisMagCal->fvecA[6];
    bd18:	1c39      	adds	r1, r7, #0
    bd1a:	1c38      	adds	r0, r7, #0
    bd1c:	f7f5 f92a 	bl	f74 <__aeabi_fmul>
    bd20:	22f7      	movs	r2, #247	; 0xf7
    bd22:	0092      	lsls	r2, r2, #2
    bd24:	50a0      	str	r0, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:655 (discriminator 1)
				pthisMagCal->fvecA[1] = 2.0F * pthisMagCal->fvecA[6] * pthisMagCal->fvecA[7];
    bd26:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:654 (discriminator 1)
				{
					pthisMagCal->fvecA[l + 6] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
				}

				// compute measurement vector elements fvecA[0-5] from fvecA[6-8]
				pthisMagCal->fvecA[0] = pthisMagCal->fvecA[6] * pthisMagCal->fvecA[6];
    bd28:	9000      	str	r0, [sp, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:655 (discriminator 1)
				pthisMagCal->fvecA[1] = 2.0F * pthisMagCal->fvecA[6] * pthisMagCal->fvecA[7];
    bd2a:	1c38      	adds	r0, r7, #0
    bd2c:	f7f4 fdb4 	bl	898 <__aeabi_fadd>
    bd30:	1c31      	adds	r1, r6, #0
    bd32:	1c05      	adds	r5, r0, #0
    bd34:	f7f5 f91e 	bl	f74 <__aeabi_fmul>
    bd38:	22f8      	movs	r2, #248	; 0xf8
    bd3a:	0092      	lsls	r2, r2, #2
    bd3c:	4681      	mov	r9, r0
    bd3e:	50a0      	str	r0, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:656 (discriminator 1)
				pthisMagCal->fvecA[2] = 2.0F * pthisMagCal->fvecA[6] * pthisMagCal->fvecA[8];
    bd40:	4659      	mov	r1, fp
    bd42:	1c28      	adds	r0, r5, #0
    bd44:	f7f5 f916 	bl	f74 <__aeabi_fmul>
    bd48:	22f9      	movs	r2, #249	; 0xf9
    bd4a:	0092      	lsls	r2, r2, #2
    bd4c:	50a0      	str	r0, [r4, r2]
    bd4e:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:657 (discriminator 1)
				pthisMagCal->fvecA[3] = pthisMagCal->fvecA[7] * pthisMagCal->fvecA[7];
    bd50:	1c31      	adds	r1, r6, #0
    bd52:	1c30      	adds	r0, r6, #0
    bd54:	f7f5 f90e 	bl	f74 <__aeabi_fmul>
    bd58:	21fa      	movs	r1, #250	; 0xfa
    bd5a:	0089      	lsls	r1, r1, #2
    bd5c:	5060      	str	r0, [r4, r1]
    bd5e:	9004      	str	r0, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:658 (discriminator 1)
				pthisMagCal->fvecA[4] = 2.0F * pthisMagCal->fvecA[7] * pthisMagCal->fvecA[8];
    bd60:	1c31      	adds	r1, r6, #0
    bd62:	1c30      	adds	r0, r6, #0
    bd64:	f7f4 fd98 	bl	898 <__aeabi_fadd>
    bd68:	25fb      	movs	r5, #251	; 0xfb
    bd6a:	4659      	mov	r1, fp
    bd6c:	f7f5 f902 	bl	f74 <__aeabi_fmul>
    bd70:	00ad      	lsls	r5, r5, #2
    bd72:	5160      	str	r0, [r4, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:659 (discriminator 1)
				pthisMagCal->fvecA[5] = pthisMagCal->fvecA[8] * pthisMagCal->fvecA[8];
    bd74:	4659      	mov	r1, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:658 (discriminator 1)
				// compute measurement vector elements fvecA[0-5] from fvecA[6-8]
				pthisMagCal->fvecA[0] = pthisMagCal->fvecA[6] * pthisMagCal->fvecA[6];
				pthisMagCal->fvecA[1] = 2.0F * pthisMagCal->fvecA[6] * pthisMagCal->fvecA[7];
				pthisMagCal->fvecA[2] = 2.0F * pthisMagCal->fvecA[6] * pthisMagCal->fvecA[8];
				pthisMagCal->fvecA[3] = pthisMagCal->fvecA[7] * pthisMagCal->fvecA[7];
				pthisMagCal->fvecA[4] = 2.0F * pthisMagCal->fvecA[7] * pthisMagCal->fvecA[8];
    bd76:	9005      	str	r0, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:659 (discriminator 1)
				pthisMagCal->fvecA[5] = pthisMagCal->fvecA[8] * pthisMagCal->fvecA[8];
    bd78:	4658      	mov	r0, fp
    bd7a:	f7f5 f8fb 	bl	f74 <__aeabi_fmul>
    bd7e:	23fc      	movs	r3, #252	; 0xfc
    bd80:	009b      	lsls	r3, r3, #2
    bd82:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:666 (discriminator 1)
				// accumulate the on-and above-diagonal terms of fmatA=Sigma{fvecA^T * fvecA}
				// with the exception of fmatA[9][9] which equals the number of measurements
				// update the right hand column [9] of fmatA[0-8][9] ignoring fmatA[9][9]
				for (m = 0; m < 9; m++)
				{
					pthisMagCal->fmatA[m][9] += pthisMagCal->fvecA[m];
    bd84:	23e0      	movs	r3, #224	; 0xe0
    bd86:	469a      	mov	sl, r3
    bd88:	58e1      	ldr	r1, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:659 (discriminator 1)
				pthisMagCal->fvecA[0] = pthisMagCal->fvecA[6] * pthisMagCal->fvecA[6];
				pthisMagCal->fvecA[1] = 2.0F * pthisMagCal->fvecA[6] * pthisMagCal->fvecA[7];
				pthisMagCal->fvecA[2] = 2.0F * pthisMagCal->fvecA[6] * pthisMagCal->fvecA[8];
				pthisMagCal->fvecA[3] = pthisMagCal->fvecA[7] * pthisMagCal->fvecA[7];
				pthisMagCal->fvecA[4] = 2.0F * pthisMagCal->fvecA[7] * pthisMagCal->fvecA[8];
				pthisMagCal->fvecA[5] = pthisMagCal->fvecA[8] * pthisMagCal->fvecA[8];
    bd8a:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:666 (discriminator 1)
				// accumulate the on-and above-diagonal terms of fmatA=Sigma{fvecA^T * fvecA}
				// with the exception of fmatA[9][9] which equals the number of measurements
				// update the right hand column [9] of fmatA[0-8][9] ignoring fmatA[9][9]
				for (m = 0; m < 9; m++)
				{
					pthisMagCal->fmatA[m][9] += pthisMagCal->fvecA[m];
    bd8c:	9800      	ldr	r0, [sp, #0]
    bd8e:	f7f4 fd83 	bl	898 <__aeabi_fadd>
    bd92:	4653      	mov	r3, sl
    bd94:	50e0      	str	r0, [r4, r3]
    bd96:	3328      	adds	r3, #40	; 0x28
    bd98:	469a      	mov	sl, r3
    bd9a:	58e1      	ldr	r1, [r4, r3]
    bd9c:	4648      	mov	r0, r9
    bd9e:	f7f4 fd7b 	bl	898 <__aeabi_fadd>
    bda2:	4653      	mov	r3, sl
    bda4:	50e0      	str	r0, [r4, r3]
    bda6:	3328      	adds	r3, #40	; 0x28
    bda8:	4699      	mov	r9, r3
    bdaa:	58e1      	ldr	r1, [r4, r3]
    bdac:	4640      	mov	r0, r8
    bdae:	f7f4 fd73 	bl	898 <__aeabi_fadd>
    bdb2:	464b      	mov	r3, r9
    bdb4:	50e0      	str	r0, [r4, r3]
    bdb6:	3328      	adds	r3, #40	; 0x28
    bdb8:	4698      	mov	r8, r3
    bdba:	58e1      	ldr	r1, [r4, r3]
    bdbc:	9804      	ldr	r0, [sp, #16]
    bdbe:	f7f4 fd6b 	bl	898 <__aeabi_fadd>
    bdc2:	4643      	mov	r3, r8
    bdc4:	50e0      	str	r0, [r4, r3]
    bdc6:	3328      	adds	r3, #40	; 0x28
    bdc8:	4698      	mov	r8, r3
    bdca:	58e1      	ldr	r1, [r4, r3]
    bdcc:	9805      	ldr	r0, [sp, #20]
    bdce:	f7f4 fd63 	bl	898 <__aeabi_fadd>
    bdd2:	4643      	mov	r3, r8
    bdd4:	50e0      	str	r0, [r4, r3]
    bdd6:	3328      	adds	r3, #40	; 0x28
    bdd8:	4698      	mov	r8, r3
    bdda:	58e1      	ldr	r1, [r4, r3]
    bddc:	1c28      	adds	r0, r5, #0
    bdde:	f7f4 fd5b 	bl	898 <__aeabi_fadd>
    bde2:	25e8      	movs	r5, #232	; 0xe8
    bde4:	4643      	mov	r3, r8
    bde6:	006d      	lsls	r5, r5, #1
    bde8:	50e0      	str	r0, [r4, r3]
    bdea:	5960      	ldr	r0, [r4, r5]
    bdec:	1c39      	adds	r1, r7, #0
    bdee:	f7f4 fd53 	bl	898 <__aeabi_fadd>
    bdf2:	5160      	str	r0, [r4, r5]
    bdf4:	3528      	adds	r5, #40	; 0x28
    bdf6:	5960      	ldr	r0, [r4, r5]
    bdf8:	1c31      	adds	r1, r6, #0
    bdfa:	f7f4 fd4d 	bl	898 <__aeabi_fadd>
    bdfe:	5160      	str	r0, [r4, r5]
    be00:	3528      	adds	r5, #40	; 0x28
    be02:	4659      	mov	r1, fp
    be04:	5960      	ldr	r0, [r4, r5]
    be06:	f7f4 fd47 	bl	898 <__aeabi_fadd>
    be0a:	9b07      	ldr	r3, [sp, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:673 (discriminator 1)
				// update the on and above diagonal terms of fmatA ignoring right hand column 9
				for (m = 0; m < 9; m++)
				{
					for (n = m; n < 9; n++)
					{
						pthisMagCal->fmatA[m][n] += pthisMagCal->fvecA[m] * pthisMagCal->fvecA[n];
    be0c:	27bc      	movs	r7, #188	; 0xbc
    be0e:	469b      	mov	fp, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:666 (discriminator 1)
				// accumulate the on-and above-diagonal terms of fmatA=Sigma{fvecA^T * fvecA}
				// with the exception of fmatA[9][9] which equals the number of measurements
				// update the right hand column [9] of fmatA[0-8][9] ignoring fmatA[9][9]
				for (m = 0; m < 9; m++)
				{
					pthisMagCal->fmatA[m][9] += pthisMagCal->fvecA[m];
    be10:	2300      	movs	r3, #0
    be12:	469a      	mov	sl, r3
    be14:	5160      	str	r0, [r4, r5]
    be16:	466a      	mov	r2, sp
    be18:	4653      	mov	r3, sl
    be1a:	7013      	strb	r3, [r2, #0]
    be1c:	7815      	ldrb	r5, [r2, #0]
    be1e:	4652      	mov	r2, sl
    be20:	465b      	mov	r3, fp
    be22:	0096      	lsls	r6, r2, #2
    be24:	681b      	ldr	r3, [r3, #0]
    be26:	4456      	add	r6, sl
    be28:	0072      	lsls	r2, r6, #1
    be2a:	4698      	mov	r8, r3
    be2c:	1c18      	adds	r0, r3, #0
    be2e:	4691      	mov	r9, r2
    be30:	b26b      	sxtb	r3, r5
    be32:	e006      	b.n	be42 <fUpdateCalibration10EIG+0x25a>
    be34:	42480000 	.word	0x42480000
    be38:	1c1a      	adds	r2, r3, #0
    be3a:	32f6      	adds	r2, #246	; 0xf6
    be3c:	0092      	lsls	r2, r2, #2
    be3e:	18a2      	adds	r2, r4, r2
    be40:	6850      	ldr	r0, [r2, #4]
    be42:	444b      	add	r3, r9
    be44:	009b      	lsls	r3, r3, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:673 (discriminator 3)
				// update the on and above diagonal terms of fmatA ignoring right hand column 9
				for (m = 0; m < 9; m++)
				{
					for (n = m; n < 9; n++)
					{
						pthisMagCal->fmatA[m][n] += pthisMagCal->fvecA[m] * pthisMagCal->fvecA[n];
    be46:	4641      	mov	r1, r8
    be48:	18e6      	adds	r6, r4, r3
    be4a:	f7f5 f893 	bl	f74 <__aeabi_fmul>
    be4e:	1c01      	adds	r1, r0, #0
    be50:	59f0      	ldr	r0, [r6, r7]
    be52:	f7f4 fd21 	bl	898 <__aeabi_fadd>
    be56:	3501      	adds	r5, #1
    be58:	b2ed      	uxtb	r5, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:671 (discriminator 3)
					pthisMagCal->fmatA[m][9] += pthisMagCal->fvecA[m];
				}
				// update the on and above diagonal terms of fmatA ignoring right hand column 9
				for (m = 0; m < 9; m++)
				{
					for (n = m; n < 9; n++)
    be5a:	b26b      	sxtb	r3, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:673 (discriminator 3)
					{
						pthisMagCal->fmatA[m][n] += pthisMagCal->fvecA[m] * pthisMagCal->fvecA[n];
    be5c:	51f0      	str	r0, [r6, r7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:671 (discriminator 3)
					pthisMagCal->fmatA[m][9] += pthisMagCal->fvecA[m];
				}
				// update the on and above diagonal terms of fmatA ignoring right hand column 9
				for (m = 0; m < 9; m++)
				{
					for (n = m; n < 9; n++)
    be5e:	2b08      	cmp	r3, #8
    be60:	ddea      	ble.n	be38 <fUpdateCalibration10EIG+0x250>
    be62:	2301      	movs	r3, #1
    be64:	469c      	mov	ip, r3
    be66:	3303      	adds	r3, #3
    be68:	44e2      	add	sl, ip
    be6a:	469c      	mov	ip, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:669 (discriminator 2)
				for (m = 0; m < 9; m++)
				{
					pthisMagCal->fmatA[m][9] += pthisMagCal->fvecA[m];
				}
				// update the on and above diagonal terms of fmatA ignoring right hand column 9
				for (m = 0; m < 9; m++)
    be6c:	4653      	mov	r3, sl
    be6e:	44e3      	add	fp, ip
    be70:	2b09      	cmp	r3, #9
    be72:	d1d0      	bne.n	be16 <fUpdateCalibration10EIG+0x22e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:678
						pthisMagCal->fmatA[m][n] += pthisMagCal->fvecA[m] * pthisMagCal->fvecA[n];
					}
				}

				// increment the measurement counter for the next iteration
				iCount++;
    be74:	9b03      	ldr	r3, [sp, #12]
    be76:	3301      	adds	r3, #1
    be78:	b29b      	uxth	r3, r3
    be7a:	9303      	str	r3, [sp, #12]
    be7c:	9b01      	ldr	r3, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:634 (discriminator 2)

	// sum between MINEQUATIONS to MAXEQUATIONS entries into the 10x10 product matrix fmatA
	iCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
	{
		for (k = 0; k < MAGBUFFSIZEY; k++)
    be7e:	9a06      	ldr	r2, [sp, #24]
    be80:	3304      	adds	r3, #4
    be82:	9301      	str	r3, [sp, #4]
    be84:	9b02      	ldr	r3, [sp, #8]
    be86:	3302      	adds	r3, #2
    be88:	9302      	str	r3, [sp, #8]
    be8a:	429a      	cmp	r2, r3
    be8c:	d000      	beq.n	be90 <fUpdateCalibration10EIG+0x2a8>
    be8e:	e6fa      	b.n	bc86 <fUpdateCalibration10EIG+0x9e>
    be90:	1c13      	adds	r3, r2, #0
    be92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    be94:	3330      	adds	r3, #48	; 0x30
    be96:	3260      	adds	r2, #96	; 0x60
    be98:	920c      	str	r2, [sp, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:632 (discriminator 2)
		}
	}

	// sum between MINEQUATIONS to MAXEQUATIONS entries into the 10x10 product matrix fmatA
	iCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
    be9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    be9c:	46a3      	mov	fp, r4
    be9e:	9306      	str	r3, [sp, #24]
    bea0:	4293      	cmp	r3, r2
    bea2:	d000      	beq.n	bea6 <fUpdateCalibration10EIG+0x2be>
    bea4:	e6ea      	b.n	bc7c <fUpdateCalibration10EIG+0x94>
    bea6:	466a      	mov	r2, sp
    bea8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    beaa:	ab10      	add	r3, sp, #64	; 0x40
    beac:	801a      	strh	r2, [r3, #0]
    beae:	466a      	mov	r2, sp
    beb0:	8d12      	ldrh	r2, [r2, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:684
			}
		}
	}

	// set the last element fmatA[9][9] to the number of measurements
	pthisMagCal->fmatA[9][9] = (float) iCount;
    beb2:	9c03      	ldr	r4, [sp, #12]
    beb4:	805a      	strh	r2, [r3, #2]
    beb6:	466a      	mov	r2, sp
    beb8:	8c12      	ldrh	r2, [r2, #32]
    beba:	b220      	sxth	r0, r4
    bebc:	809a      	strh	r2, [r3, #4]
    bebe:	f7f5 fb29 	bl	1514 <__aeabi_i2f>
    bec2:	2392      	movs	r3, #146	; 0x92
    bec4:	465a      	mov	r2, fp
    bec6:	009b      	lsls	r3, r3, #2
    bec8:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:687

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;
    beca:	4ba0      	ldr	r3, [pc, #640]	; (c14c <fUpdateCalibration10EIG+0x564>)
    becc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bece:	4658      	mov	r0, fp
    bed0:	52d4      	strh	r4, [r2, r3]
    bed2:	465c      	mov	r4, fp
    bed4:	465a      	mov	r2, fp
    bed6:	2301      	movs	r3, #1
    bed8:	2502      	movs	r5, #2
    beda:	3061      	adds	r0, #97	; 0x61
    bedc:	34c0      	adds	r4, #192	; 0xc0
    bede:	32e4      	adds	r2, #228	; 0xe4
    bee0:	30ff      	adds	r0, #255	; 0xff
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    bee2:	6821      	ldr	r1, [r4, #0]
    bee4:	6011      	str	r1, [r2, #0]
    bee6:	b2d9      	uxtb	r1, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:692
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
    bee8:	2b01      	cmp	r3, #1
    beea:	d100      	bne.n	beee <fUpdateCalibration10EIG+0x306>
    beec:	e352      	b.n	c594 <fUpdateCalibration10EIG+0x9ac>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    beee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:692
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
    bef0:	b249      	sxtb	r1, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    bef2:	6056      	str	r6, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:692
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
    bef4:	2902      	cmp	r1, #2
    bef6:	d100      	bne.n	befa <fUpdateCalibration10EIG+0x312>
    bef8:	e34c      	b.n	c594 <fUpdateCalibration10EIG+0x9ac>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    befa:	6d26      	ldr	r6, [r4, #80]	; 0x50
    befc:	6096      	str	r6, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:692
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
    befe:	2903      	cmp	r1, #3
    bf00:	d100      	bne.n	bf04 <fUpdateCalibration10EIG+0x31c>
    bf02:	e347      	b.n	c594 <fUpdateCalibration10EIG+0x9ac>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    bf04:	6fa6      	ldr	r6, [r4, #120]	; 0x78
    bf06:	60d6      	str	r6, [r2, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:692
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
    bf08:	2904      	cmp	r1, #4
    bf0a:	d100      	bne.n	bf0e <fUpdateCalibration10EIG+0x326>
    bf0c:	e342      	b.n	c594 <fUpdateCalibration10EIG+0x9ac>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    bf0e:	6806      	ldr	r6, [r0, #0]
    bf10:	6116      	str	r6, [r2, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:692
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
    bf12:	2905      	cmp	r1, #5
    bf14:	d100      	bne.n	bf18 <fUpdateCalibration10EIG+0x330>
    bf16:	e33d      	b.n	c594 <fUpdateCalibration10EIG+0x9ac>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    bf18:	6a86      	ldr	r6, [r0, #40]	; 0x28
    bf1a:	6156      	str	r6, [r2, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:692
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
    bf1c:	2906      	cmp	r1, #6
    bf1e:	d100      	bne.n	bf22 <fUpdateCalibration10EIG+0x33a>
    bf20:	e338      	b.n	c594 <fUpdateCalibration10EIG+0x9ac>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    bf22:	6d06      	ldr	r6, [r0, #80]	; 0x50
    bf24:	6196      	str	r6, [r2, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:692
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
    bf26:	2907      	cmp	r1, #7
    bf28:	d100      	bne.n	bf2c <fUpdateCalibration10EIG+0x344>
    bf2a:	e333      	b.n	c594 <fUpdateCalibration10EIG+0x9ac>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    bf2c:	6f86      	ldr	r6, [r0, #120]	; 0x78
    bf2e:	61d6      	str	r6, [r2, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:692
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
    bf30:	2909      	cmp	r1, #9
    bf32:	d000      	beq.n	bf36 <fUpdateCalibration10EIG+0x34e>
    bf34:	e32b      	b.n	c58e <fUpdateCalibration10EIG+0x9a6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    bf36:	1c1a      	adds	r2, r3, #0
    bf38:	0099      	lsls	r1, r3, #2
    bf3a:	327e      	adds	r2, #126	; 0x7e
    bf3c:	0092      	lsls	r2, r2, #2
    bf3e:	18cb      	adds	r3, r1, r3
    bf40:	445a      	add	r2, fp
    bf42:	00db      	lsls	r3, r3, #3
    bf44:	6852      	ldr	r2, [r2, #4]
    bf46:	445b      	add	r3, fp
    bf48:	33d8      	adds	r3, #216	; 0xd8
    bf4a:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:699
		}
	}

	// set pthisMagCal->fvecA to the unsorted eigenvalues and fmatB to the unsorted normalized eigenvectors of fmatA
	eigencompute(pthisMagCal->fmatA, pthisMagCal->fvecA, pthisMagCal->fmatB, 10);
    bf4c:	23bc      	movs	r3, #188	; 0xbc
    bf4e:	2293      	movs	r2, #147	; 0x93
    bf50:	445b      	add	r3, fp
    bf52:	0092      	lsls	r2, r2, #2
    bf54:	445a      	add	r2, fp
    bf56:	1c18      	adds	r0, r3, #0
    bf58:	9301      	str	r3, [sp, #4]
    bf5a:	9907      	ldr	r1, [sp, #28]
    bf5c:	230a      	movs	r3, #10
    bf5e:	9205      	str	r2, [sp, #20]
    bf60:	f000 fca2 	bl	c8a8 <eigencompute>
    bf64:	23f7      	movs	r3, #247	; 0xf7
    bf66:	465a      	mov	r2, fp
    bf68:	009b      	lsls	r3, r3, #2
    bf6a:	58d5      	ldr	r5, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:705

	// set ellipsoid matrix A from elements of the solution vector column j with smallest eigenvalue
	j = 0;
	for (i = 1; i < 10; i++)
	{
		if (pthisMagCal->fvecA[i] < pthisMagCal->fvecA[j])
    bf6c:	3304      	adds	r3, #4
    bf6e:	58d4      	ldr	r4, [r2, r3]
    bf70:	1c28      	adds	r0, r5, #0
    bf72:	1c21      	adds	r1, r4, #0
    bf74:	f7f4 fc7c 	bl	870 <__aeabi_fcmpgt>
    bf78:	1c07      	adds	r7, r0, #0
    bf7a:	1e7b      	subs	r3, r7, #1
    bf7c:	419f      	sbcs	r7, r3
    bf7e:	2800      	cmp	r0, #0
    bf80:	d100      	bne.n	bf84 <fUpdateCalibration10EIG+0x39c>
    bf82:	1c2c      	adds	r4, r5, #0
    bf84:	23f9      	movs	r3, #249	; 0xf9
    bf86:	465a      	mov	r2, fp
    bf88:	009b      	lsls	r3, r3, #2
    bf8a:	58d5      	ldr	r5, [r2, r3]
    bf8c:	1c21      	adds	r1, r4, #0
    bf8e:	1c28      	adds	r0, r5, #0
    bf90:	f7f4 fc5a 	bl	848 <__aeabi_fcmplt>
    bf94:	2602      	movs	r6, #2
    bf96:	2800      	cmp	r0, #0
    bf98:	d100      	bne.n	bf9c <fUpdateCalibration10EIG+0x3b4>
    bf9a:	1c3e      	adds	r6, r7, #0
    bf9c:	1c28      	adds	r0, r5, #0
    bf9e:	1c21      	adds	r1, r4, #0
    bfa0:	b2f6      	uxtb	r6, r6
    bfa2:	f7f4 fc51 	bl	848 <__aeabi_fcmplt>
    bfa6:	2800      	cmp	r0, #0
    bfa8:	d100      	bne.n	bfac <fUpdateCalibration10EIG+0x3c4>
    bfaa:	1c25      	adds	r5, r4, #0
    bfac:	23fa      	movs	r3, #250	; 0xfa
    bfae:	465a      	mov	r2, fp
    bfb0:	009b      	lsls	r3, r3, #2
    bfb2:	58d4      	ldr	r4, [r2, r3]
    bfb4:	1c29      	adds	r1, r5, #0
    bfb6:	1c20      	adds	r0, r4, #0
    bfb8:	f7f4 fc46 	bl	848 <__aeabi_fcmplt>
    bfbc:	2703      	movs	r7, #3
    bfbe:	2800      	cmp	r0, #0
    bfc0:	d100      	bne.n	bfc4 <fUpdateCalibration10EIG+0x3dc>
    bfc2:	1c37      	adds	r7, r6, #0
    bfc4:	1c20      	adds	r0, r4, #0
    bfc6:	1c29      	adds	r1, r5, #0
    bfc8:	b2ff      	uxtb	r7, r7
    bfca:	f7f4 fc3d 	bl	848 <__aeabi_fcmplt>
    bfce:	2800      	cmp	r0, #0
    bfd0:	d100      	bne.n	bfd4 <fUpdateCalibration10EIG+0x3ec>
    bfd2:	1c2c      	adds	r4, r5, #0
    bfd4:	23fb      	movs	r3, #251	; 0xfb
    bfd6:	465a      	mov	r2, fp
    bfd8:	009b      	lsls	r3, r3, #2
    bfda:	58d5      	ldr	r5, [r2, r3]
    bfdc:	1c21      	adds	r1, r4, #0
    bfde:	1c28      	adds	r0, r5, #0
    bfe0:	f7f4 fc32 	bl	848 <__aeabi_fcmplt>
    bfe4:	2604      	movs	r6, #4
    bfe6:	2800      	cmp	r0, #0
    bfe8:	d100      	bne.n	bfec <fUpdateCalibration10EIG+0x404>
    bfea:	1c3e      	adds	r6, r7, #0
    bfec:	1c28      	adds	r0, r5, #0
    bfee:	1c21      	adds	r1, r4, #0
    bff0:	b2f6      	uxtb	r6, r6
    bff2:	f7f4 fc29 	bl	848 <__aeabi_fcmplt>
    bff6:	2800      	cmp	r0, #0
    bff8:	d100      	bne.n	bffc <fUpdateCalibration10EIG+0x414>
    bffa:	1c25      	adds	r5, r4, #0
    bffc:	23fc      	movs	r3, #252	; 0xfc
    bffe:	465a      	mov	r2, fp
    c000:	009b      	lsls	r3, r3, #2
    c002:	58d4      	ldr	r4, [r2, r3]
    c004:	1c29      	adds	r1, r5, #0
    c006:	1c20      	adds	r0, r4, #0
    c008:	f7f4 fc1e 	bl	848 <__aeabi_fcmplt>
    c00c:	2705      	movs	r7, #5
    c00e:	2800      	cmp	r0, #0
    c010:	d100      	bne.n	c014 <fUpdateCalibration10EIG+0x42c>
    c012:	1c37      	adds	r7, r6, #0
    c014:	1c20      	adds	r0, r4, #0
    c016:	1c29      	adds	r1, r5, #0
    c018:	b2ff      	uxtb	r7, r7
    c01a:	f7f4 fc15 	bl	848 <__aeabi_fcmplt>
    c01e:	2800      	cmp	r0, #0
    c020:	d100      	bne.n	c024 <fUpdateCalibration10EIG+0x43c>
    c022:	1c2c      	adds	r4, r5, #0
    c024:	23fd      	movs	r3, #253	; 0xfd
    c026:	465a      	mov	r2, fp
    c028:	009b      	lsls	r3, r3, #2
    c02a:	58d5      	ldr	r5, [r2, r3]
    c02c:	1c21      	adds	r1, r4, #0
    c02e:	1c28      	adds	r0, r5, #0
    c030:	f7f4 fc0a 	bl	848 <__aeabi_fcmplt>
    c034:	2606      	movs	r6, #6
    c036:	2800      	cmp	r0, #0
    c038:	d100      	bne.n	c03c <fUpdateCalibration10EIG+0x454>
    c03a:	1c3e      	adds	r6, r7, #0
    c03c:	1c28      	adds	r0, r5, #0
    c03e:	1c21      	adds	r1, r4, #0
    c040:	b2f6      	uxtb	r6, r6
    c042:	f7f4 fc01 	bl	848 <__aeabi_fcmplt>
    c046:	2800      	cmp	r0, #0
    c048:	d100      	bne.n	c04c <fUpdateCalibration10EIG+0x464>
    c04a:	1c25      	adds	r5, r4, #0
    c04c:	23fe      	movs	r3, #254	; 0xfe
    c04e:	465a      	mov	r2, fp
    c050:	009b      	lsls	r3, r3, #2
    c052:	58d4      	ldr	r4, [r2, r3]
    c054:	1c29      	adds	r1, r5, #0
    c056:	1c20      	adds	r0, r4, #0
    c058:	f7f4 fbf6 	bl	848 <__aeabi_fcmplt>
    c05c:	2307      	movs	r3, #7
    c05e:	2800      	cmp	r0, #0
    c060:	d100      	bne.n	c064 <fUpdateCalibration10EIG+0x47c>
    c062:	1c33      	adds	r3, r6, #0
    c064:	1c20      	adds	r0, r4, #0
    c066:	1c29      	adds	r1, r5, #0
    c068:	b2de      	uxtb	r6, r3
    c06a:	f7f4 fbed 	bl	848 <__aeabi_fcmplt>
    c06e:	2800      	cmp	r0, #0
    c070:	d100      	bne.n	c074 <fUpdateCalibration10EIG+0x48c>
    c072:	1c2c      	adds	r4, r5, #0
    c074:	23ff      	movs	r3, #255	; 0xff
    c076:	465a      	mov	r2, fp
    c078:	009b      	lsls	r3, r3, #2
    c07a:	58d5      	ldr	r5, [r2, r3]
    c07c:	1c21      	adds	r1, r4, #0
    c07e:	1c28      	adds	r0, r5, #0
    c080:	f7f4 fbe2 	bl	848 <__aeabi_fcmplt>
    c084:	1c2b      	adds	r3, r5, #0
    c086:	2800      	cmp	r0, #0
    c088:	d100      	bne.n	c08c <fUpdateCalibration10EIG+0x4a4>
    c08a:	1c23      	adds	r3, r4, #0
    c08c:	1c18      	adds	r0, r3, #0
    c08e:	2380      	movs	r3, #128	; 0x80
    c090:	465a      	mov	r2, fp
    c092:	00db      	lsls	r3, r3, #3
    c094:	58d1      	ldr	r1, [r2, r3]
    c096:	f7f4 fbeb 	bl	870 <__aeabi_fcmpgt>
    c09a:	2309      	movs	r3, #9
    c09c:	2800      	cmp	r0, #0
    c09e:	d108      	bne.n	c0b2 <fUpdateCalibration10EIG+0x4ca>
    c0a0:	1c28      	adds	r0, r5, #0
    c0a2:	1c21      	adds	r1, r4, #0
    c0a4:	f7f4 fbd0 	bl	848 <__aeabi_fcmplt>
    c0a8:	2308      	movs	r3, #8
    c0aa:	2800      	cmp	r0, #0
    c0ac:	d100      	bne.n	c0b0 <fUpdateCalibration10EIG+0x4c8>
    c0ae:	1c33      	adds	r3, r6, #0
    c0b0:	b25b      	sxtb	r3, r3
    c0b2:	009c      	lsls	r4, r3, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:710
		{
			j = i;
		}
	}
	pthisMagCal->fA[0][0] = pthisMagCal->fmatB[0][j];
    c0b4:	2393      	movs	r3, #147	; 0x93
    c0b6:	465a      	mov	r2, fp
    c0b8:	445c      	add	r4, fp
    c0ba:	009b      	lsls	r3, r3, #2
    c0bc:	58e3      	ldr	r3, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:711
	pthisMagCal->fA[0][1] = pthisMagCal->fA[1][0] = pthisMagCal->fmatB[1][j];
    c0be:	4659      	mov	r1, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:710
		if (pthisMagCal->fvecA[i] < pthisMagCal->fvecA[j])
		{
			j = i;
		}
	}
	pthisMagCal->fA[0][0] = pthisMagCal->fmatB[0][j];
    c0c0:	6753      	str	r3, [r2, #116]	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:711
	pthisMagCal->fA[0][1] = pthisMagCal->fA[1][0] = pthisMagCal->fmatB[1][j];
    c0c2:	239d      	movs	r3, #157	; 0x9d
    c0c4:	2280      	movs	r2, #128	; 0x80
    c0c6:	009b      	lsls	r3, r3, #2
    c0c8:	58e3      	ldr	r3, [r4, r3]
    c0ca:	508b      	str	r3, [r1, r2]
    c0cc:	678b      	str	r3, [r1, #120]	; 0x78
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:712
	pthisMagCal->fA[0][2] = pthisMagCal->fA[2][0] = pthisMagCal->fmatB[2][j];
    c0ce:	23a7      	movs	r3, #167	; 0xa7
    c0d0:	228c      	movs	r2, #140	; 0x8c
    c0d2:	009b      	lsls	r3, r3, #2
    c0d4:	58e3      	ldr	r3, [r4, r3]
    c0d6:	508b      	str	r3, [r1, r2]
    c0d8:	67cb      	str	r3, [r1, #124]	; 0x7c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:713
	pthisMagCal->fA[1][1] = pthisMagCal->fmatB[3][j];
    c0da:	23b1      	movs	r3, #177	; 0xb1
    c0dc:	009b      	lsls	r3, r3, #2
    c0de:	58e2      	ldr	r2, [r4, r3]
    c0e0:	2384      	movs	r3, #132	; 0x84
    c0e2:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:714
	pthisMagCal->fA[1][2] = pthisMagCal->fA[2][1] = pthisMagCal->fmatB[4][j];
    c0e4:	23bb      	movs	r3, #187	; 0xbb
    c0e6:	2290      	movs	r2, #144	; 0x90
    c0e8:	009b      	lsls	r3, r3, #2
    c0ea:	58e3      	ldr	r3, [r4, r3]
    c0ec:	508b      	str	r3, [r1, r2]
    c0ee:	3a08      	subs	r2, #8
    c0f0:	508b      	str	r3, [r1, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:715
	pthisMagCal->fA[2][2] = pthisMagCal->fmatB[5][j];
    c0f2:	23c5      	movs	r3, #197	; 0xc5
    c0f4:	009b      	lsls	r3, r3, #2
    c0f6:	58e2      	ldr	r2, [r4, r3]
    c0f8:	2394      	movs	r3, #148	; 0x94
    c0fa:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:718

	// negate entire solution if A has negative determinant
	det = f3x3matrixDetA(pthisMagCal->fA);
    c0fc:	3b20      	subs	r3, #32
    c0fe:	445b      	add	r3, fp
    c100:	1c18      	adds	r0, r3, #0
    c102:	9300      	str	r3, [sp, #0]
    c104:	f000 fb80 	bl	c808 <f3x3matrixDetA>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:719
	if (det < 0.0F)
    c108:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:718
	pthisMagCal->fA[1][1] = pthisMagCal->fmatB[3][j];
	pthisMagCal->fA[1][2] = pthisMagCal->fA[2][1] = pthisMagCal->fmatB[4][j];
	pthisMagCal->fA[2][2] = pthisMagCal->fmatB[5][j];

	// negate entire solution if A has negative determinant
	det = f3x3matrixDetA(pthisMagCal->fA);
    c10a:	4682      	mov	sl, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:719
	if (det < 0.0F)
    c10c:	f7f4 fb9c 	bl	848 <__aeabi_fcmplt>
    c110:	2800      	cmp	r0, #0
    c112:	d01d      	beq.n	c150 <fUpdateCalibration10EIG+0x568>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:721
	{
		f3x3matrixAeqMinusA(pthisMagCal->fA);
    c114:	9800      	ldr	r0, [sp, #0]
    c116:	f000 fa9b 	bl	c650 <f3x3matrixAeqMinusA>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:722
		pthisMagCal->fmatB[6][j] = -pthisMagCal->fmatB[6][j];
    c11a:	2180      	movs	r1, #128	; 0x80
    c11c:	22cf      	movs	r2, #207	; 0xcf
    c11e:	0609      	lsls	r1, r1, #24
    c120:	468c      	mov	ip, r1
    c122:	0092      	lsls	r2, r2, #2
    c124:	58a3      	ldr	r3, [r4, r2]
    c126:	4463      	add	r3, ip
    c128:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:723
		pthisMagCal->fmatB[7][j] = -pthisMagCal->fmatB[7][j];
    c12a:	3228      	adds	r2, #40	; 0x28
    c12c:	58a3      	ldr	r3, [r4, r2]
    c12e:	4463      	add	r3, ip
    c130:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:724
		pthisMagCal->fmatB[8][j] = -pthisMagCal->fmatB[8][j];
    c132:	3228      	adds	r2, #40	; 0x28
    c134:	58a3      	ldr	r3, [r4, r2]
    c136:	4463      	add	r3, ip
    c138:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:725
		pthisMagCal->fmatB[9][j] = -pthisMagCal->fmatB[9][j];
    c13a:	3228      	adds	r2, #40	; 0x28
    c13c:	58a3      	ldr	r3, [r4, r2]
    c13e:	4463      	add	r3, ip
    c140:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:726
		det = -det;
    c142:	1c0b      	adds	r3, r1, #0
    c144:	4453      	add	r3, sl
    c146:	469a      	mov	sl, r3
    c148:	e002      	b.n	c150 <fUpdateCalibration10EIG+0x568>
    c14a:	46c0      	nop			; (mov r8, r8)
    c14c:	00000b56 	.word	0x00000b56
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:730
	}

	// compute the inverse of the ellipsoid matrix
	f3x3matrixAeqInvSymB(pthisMagCal->finvA, pthisMagCal->fA);
    c150:	4658      	mov	r0, fp
    c152:	9900      	ldr	r1, [sp, #0]
    c154:	3098      	adds	r0, #152	; 0x98
    c156:	f000 fa9b 	bl	c690 <f3x3matrixAeqInvSymB>
    c15a:	23cf      	movs	r3, #207	; 0xcf
    c15c:	009b      	lsls	r3, r3, #2
    c15e:	58e3      	ldr	r3, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:738
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = 0.0F;
		for (m = X; m <= Z; m++)
		{
			pthisMagCal->ftrV[l] += pthisMagCal->finvA[l][m] * pthisMagCal->fmatB[m + 6][j];
    c160:	465a      	mov	r2, fp
    c162:	4698      	mov	r8, r3
    c164:	23d9      	movs	r3, #217	; 0xd9
    c166:	009b      	lsls	r3, r3, #2
    c168:	58e3      	ldr	r3, [r4, r3]
    c16a:	4640      	mov	r0, r8
    c16c:	4699      	mov	r9, r3
    c16e:	23e3      	movs	r3, #227	; 0xe3
    c170:	009b      	lsls	r3, r3, #2
    c172:	58e3      	ldr	r3, [r4, r3]
    c174:	1c1e      	adds	r6, r3, #0
    c176:	2398      	movs	r3, #152	; 0x98
    c178:	58d1      	ldr	r1, [r2, r3]
    c17a:	f7f4 fefb 	bl	f74 <__aeabi_fmul>
    c17e:	2100      	movs	r1, #0
    c180:	f7f4 fb8a 	bl	898 <__aeabi_fadd>
    c184:	239c      	movs	r3, #156	; 0x9c
    c186:	465a      	mov	r2, fp
    c188:	1c05      	adds	r5, r0, #0
    c18a:	58d1      	ldr	r1, [r2, r3]
    c18c:	4648      	mov	r0, r9
    c18e:	f7f4 fef1 	bl	f74 <__aeabi_fmul>
    c192:	1c01      	adds	r1, r0, #0
    c194:	1c28      	adds	r0, r5, #0
    c196:	f7f4 fb7f 	bl	898 <__aeabi_fadd>
    c19a:	23a0      	movs	r3, #160	; 0xa0
    c19c:	465a      	mov	r2, fp
    c19e:	1c05      	adds	r5, r0, #0
    c1a0:	58d1      	ldr	r1, [r2, r3]
    c1a2:	1c30      	adds	r0, r6, #0
    c1a4:	f7f4 fee6 	bl	f74 <__aeabi_fmul>
    c1a8:	1c01      	adds	r1, r0, #0
    c1aa:	1c28      	adds	r0, r5, #0
    c1ac:	f7f4 fb74 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:740
		}
		pthisMagCal->ftrV[l] *= -0.5F;
    c1b0:	21bf      	movs	r1, #191	; 0xbf
    c1b2:	0609      	lsls	r1, r1, #24
    c1b4:	f7f4 fede 	bl	f74 <__aeabi_fmul>
    c1b8:	465a      	mov	r2, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:738
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = 0.0F;
		for (m = X; m <= Z; m++)
		{
			pthisMagCal->ftrV[l] += pthisMagCal->finvA[l][m] * pthisMagCal->fmatB[m + 6][j];
    c1ba:	23a4      	movs	r3, #164	; 0xa4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:740
		}
		pthisMagCal->ftrV[l] *= -0.5F;
    c1bc:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:738
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = 0.0F;
		for (m = X; m <= Z; m++)
		{
			pthisMagCal->ftrV[l] += pthisMagCal->finvA[l][m] * pthisMagCal->fmatB[m + 6][j];
    c1be:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:740
		}
		pthisMagCal->ftrV[l] *= -0.5F;
    c1c0:	63d0      	str	r0, [r2, #60]	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:738
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = 0.0F;
		for (m = X; m <= Z; m++)
		{
			pthisMagCal->ftrV[l] += pthisMagCal->finvA[l][m] * pthisMagCal->fmatB[m + 6][j];
    c1c2:	4640      	mov	r0, r8
    c1c4:	f7f4 fed6 	bl	f74 <__aeabi_fmul>
    c1c8:	2100      	movs	r1, #0
    c1ca:	f7f4 fb65 	bl	898 <__aeabi_fadd>
    c1ce:	23a8      	movs	r3, #168	; 0xa8
    c1d0:	465a      	mov	r2, fp
    c1d2:	1c05      	adds	r5, r0, #0
    c1d4:	58d1      	ldr	r1, [r2, r3]
    c1d6:	4648      	mov	r0, r9
    c1d8:	f7f4 fecc 	bl	f74 <__aeabi_fmul>
    c1dc:	1c01      	adds	r1, r0, #0
    c1de:	1c28      	adds	r0, r5, #0
    c1e0:	f7f4 fb5a 	bl	898 <__aeabi_fadd>
    c1e4:	23ac      	movs	r3, #172	; 0xac
    c1e6:	465a      	mov	r2, fp
    c1e8:	1c05      	adds	r5, r0, #0
    c1ea:	58d1      	ldr	r1, [r2, r3]
    c1ec:	1c30      	adds	r0, r6, #0
    c1ee:	9602      	str	r6, [sp, #8]
    c1f0:	f7f4 fec0 	bl	f74 <__aeabi_fmul>
    c1f4:	1c01      	adds	r1, r0, #0
    c1f6:	1c28      	adds	r0, r5, #0
    c1f8:	f7f4 fb4e 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:740
		}
		pthisMagCal->ftrV[l] *= -0.5F;
    c1fc:	21bf      	movs	r1, #191	; 0xbf
    c1fe:	0609      	lsls	r1, r1, #24
    c200:	f7f4 feb8 	bl	f74 <__aeabi_fmul>
    c204:	465a      	mov	r2, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:738
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = 0.0F;
		for (m = X; m <= Z; m++)
		{
			pthisMagCal->ftrV[l] += pthisMagCal->finvA[l][m] * pthisMagCal->fmatB[m + 6][j];
    c206:	23b0      	movs	r3, #176	; 0xb0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:740
		}
		pthisMagCal->ftrV[l] *= -0.5F;
    c208:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:738
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = 0.0F;
		for (m = X; m <= Z; m++)
		{
			pthisMagCal->ftrV[l] += pthisMagCal->finvA[l][m] * pthisMagCal->fmatB[m + 6][j];
    c20a:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:740
		}
		pthisMagCal->ftrV[l] *= -0.5F;
    c20c:	6410      	str	r0, [r2, #64]	; 0x40
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:738
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = 0.0F;
		for (m = X; m <= Z; m++)
		{
			pthisMagCal->ftrV[l] += pthisMagCal->finvA[l][m] * pthisMagCal->fmatB[m + 6][j];
    c20e:	4640      	mov	r0, r8
    c210:	f7f4 feb0 	bl	f74 <__aeabi_fmul>
    c214:	2100      	movs	r1, #0
    c216:	f7f4 fb3f 	bl	898 <__aeabi_fadd>
    c21a:	23b4      	movs	r3, #180	; 0xb4
    c21c:	465a      	mov	r2, fp
    c21e:	1c05      	adds	r5, r0, #0
    c220:	58d1      	ldr	r1, [r2, r3]
    c222:	4648      	mov	r0, r9
    c224:	f7f4 fea6 	bl	f74 <__aeabi_fmul>
    c228:	1c01      	adds	r1, r0, #0
    c22a:	1c28      	adds	r0, r5, #0
    c22c:	f7f4 fb34 	bl	898 <__aeabi_fadd>
    c230:	465a      	mov	r2, fp
    c232:	23b8      	movs	r3, #184	; 0xb8
    c234:	1c05      	adds	r5, r0, #0
    c236:	58d1      	ldr	r1, [r2, r3]
    c238:	9802      	ldr	r0, [sp, #8]
    c23a:	f7f4 fe9b 	bl	f74 <__aeabi_fmul>
    c23e:	1c01      	adds	r1, r0, #0
    c240:	1c28      	adds	r0, r5, #0
    c242:	f7f4 fb29 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:740
		}
		pthisMagCal->ftrV[l] *= -0.5F;
    c246:	21bf      	movs	r1, #191	; 0xbf
    c248:	0609      	lsls	r1, r1, #24
    c24a:	f7f4 fe93 	bl	f74 <__aeabi_fmul>
    c24e:	465b      	mov	r3, fp
    c250:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:744
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    c252:	6f59      	ldr	r1, [r3, #116]	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:740
		pthisMagCal->ftrV[l] = 0.0F;
		for (m = X; m <= Z; m++)
		{
			pthisMagCal->ftrV[l] += pthisMagCal->finvA[l][m] * pthisMagCal->fmatB[m + 6][j];
		}
		pthisMagCal->ftrV[l] *= -0.5F;
    c254:	6458      	str	r0, [r3, #68]	; 0x44
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:744
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    c256:	1c38      	adds	r0, r7, #0
    c258:	f7f4 fe8c 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:745
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
    c25c:	465b      	mov	r3, fp
    c25e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:748
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
    c260:	465a      	mov	r2, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:745
		pthisMagCal->ftrV[l] *= -0.5F;
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
    c262:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:746
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
    c264:	465b      	mov	r3, fp
    c266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:744
		}
		pthisMagCal->ftrV[l] *= -0.5F;
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    c268:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:746
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
    c26a:	9302      	str	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:748
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
    c26c:	2388      	movs	r3, #136	; 0x88
    c26e:	58d2      	ldr	r2, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:744
		}
		pthisMagCal->ftrV[l] *= -0.5F;
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    c270:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:749
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[2][2] * pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z] - pthisMagCal->fmatB[9][j]));
    c272:	330c      	adds	r3, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:748
	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
    c274:	9203      	str	r2, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:749
			pthisMagCal->fA[2][2] * pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z] - pthisMagCal->fmatB[9][j]));
    c276:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:744
		}
		pthisMagCal->ftrV[l] *= -0.5F;
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    c278:	f7f4 fe7c 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:745
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
    c27c:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:744
		}
		pthisMagCal->ftrV[l] *= -0.5F;
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    c27e:	9004      	str	r0, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:745
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
    c280:	4640      	mov	r0, r8
    c282:	f7f4 fb09 	bl	898 <__aeabi_fadd>
    c286:	1c01      	adds	r1, r0, #0
    c288:	1c38      	adds	r0, r7, #0
    c28a:	f7f4 fe73 	bl	f74 <__aeabi_fmul>
    c28e:	1c31      	adds	r1, r6, #0
    c290:	f7f4 fe70 	bl	f74 <__aeabi_fmul>
    c294:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:744
		}
		pthisMagCal->ftrV[l] *= -0.5F;
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    c296:	9804      	ldr	r0, [sp, #16]
    c298:	f7f4 fafe 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:746
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
    c29c:	9b02      	ldr	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:744
		}
		pthisMagCal->ftrV[l] *= -0.5F;
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    c29e:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:746
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
    c2a0:	1c19      	adds	r1, r3, #0
    c2a2:	1c18      	adds	r0, r3, #0
    c2a4:	f7f4 faf8 	bl	898 <__aeabi_fadd>
    c2a8:	1c01      	adds	r1, r0, #0
    c2aa:	1c38      	adds	r0, r7, #0
    c2ac:	f7f4 fe62 	bl	f74 <__aeabi_fmul>
    c2b0:	1c01      	adds	r1, r0, #0
    c2b2:	1c28      	adds	r0, r5, #0
    c2b4:	f7f4 fe5e 	bl	f74 <__aeabi_fmul>
    c2b8:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:745
		pthisMagCal->ftrV[l] *= -0.5F;
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
    c2ba:	4640      	mov	r0, r8
    c2bc:	f7f4 faec 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:747
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
    c2c0:	465b      	mov	r3, fp
    c2c2:	2184      	movs	r1, #132	; 0x84
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:745
		pthisMagCal->ftrV[l] *= -0.5F;
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
    c2c4:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:747
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
    c2c6:	5859      	ldr	r1, [r3, r1]
    c2c8:	1c30      	adds	r0, r6, #0
    c2ca:	f7f4 fe53 	bl	f74 <__aeabi_fmul>
    c2ce:	1c01      	adds	r1, r0, #0
    c2d0:	1c30      	adds	r0, r6, #0
    c2d2:	f7f4 fe4f 	bl	f74 <__aeabi_fmul>
    c2d6:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:746
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
    c2d8:	1c38      	adds	r0, r7, #0
    c2da:	f7f4 fadd 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:748
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
    c2de:	9a03      	ldr	r2, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:746
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
    c2e0:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:748
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
    c2e2:	1c11      	adds	r1, r2, #0
    c2e4:	1c10      	adds	r0, r2, #0
    c2e6:	f7f4 fad7 	bl	898 <__aeabi_fadd>
    c2ea:	1c01      	adds	r1, r0, #0
    c2ec:	1c30      	adds	r0, r6, #0
    c2ee:	f7f4 fe41 	bl	f74 <__aeabi_fmul>
    c2f2:	1c01      	adds	r1, r0, #0
    c2f4:	1c28      	adds	r0, r5, #0
    c2f6:	f7f4 fe3d 	bl	f74 <__aeabi_fmul>
    c2fa:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:747

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
    c2fc:	1c38      	adds	r0, r7, #0
    c2fe:	f7f4 facb 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:749
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[2][2] * pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z] - pthisMagCal->fmatB[9][j]));
    c302:	464a      	mov	r2, r9
    c304:	465b      	mov	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:747

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
    c306:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:749
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[2][2] * pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z] - pthisMagCal->fmatB[9][j]));
    c308:	5899      	ldr	r1, [r3, r2]
    c30a:	1c28      	adds	r0, r5, #0
    c30c:	f7f4 fe32 	bl	f74 <__aeabi_fmul>
    c310:	1c01      	adds	r1, r0, #0
    c312:	1c28      	adds	r0, r5, #0
    c314:	f7f4 fe2e 	bl	f74 <__aeabi_fmul>
    c318:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:748
	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
    c31a:	1c30      	adds	r0, r6, #0
    c31c:	f7f4 fabc 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:749
			pthisMagCal->fA[2][2] * pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z] - pthisMagCal->fmatB[9][j]));
    c320:	23ed      	movs	r3, #237	; 0xed
    c322:	009b      	lsls	r3, r3, #2
    c324:	58e1      	ldr	r1, [r4, r3]
    c326:	f7f4 ff57 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:744
		}
		pthisMagCal->ftrV[l] *= -0.5F;
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    c32a:	0040      	lsls	r0, r0, #1
    c32c:	0840      	lsrs	r0, r0, #1
    c32e:	f006 fb6d 	bl	12a0c <sqrtf>
    c332:	465b      	mov	r3, fp
    c334:	66d8      	str	r0, [r3, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:752
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[2][2] * pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z] - pthisMagCal->fmatB[9][j]));

	// calculate the trial normalized fit error as a percentage
	pthisMagCal->ftrFitErrorpc = 50.0F * sqrtf(fabs(pthisMagCal->fvecA[j]) / (float) pthisMagBuffer->iMagBufferCount) /
    c336:	23f7      	movs	r3, #247	; 0xf7
    c338:	009b      	lsls	r3, r3, #2
    c33a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c33c:	58e4      	ldr	r4, [r4, r3]
    c33e:	4b99      	ldr	r3, [pc, #612]	; (c5a4 <fUpdateCalibration10EIG+0x9bc>)
    c340:	0064      	lsls	r4, r4, #1
    c342:	5ed0      	ldrsh	r0, [r2, r3]
    c344:	f7f5 f8e6 	bl	1514 <__aeabi_i2f>
    c348:	0864      	lsrs	r4, r4, #1
    c34a:	1c01      	adds	r1, r0, #0
    c34c:	1c20      	adds	r0, r4, #0
    c34e:	f7f4 fc1f 	bl	b90 <__aeabi_fdiv>
    c352:	f006 fb5b 	bl	12a0c <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:753
			(pthisMagCal->ftrB * pthisMagCal->ftrB);
    c356:	465b      	mov	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:752
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[2][2] * pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z] - pthisMagCal->fmatB[9][j]));

	// calculate the trial normalized fit error as a percentage
	pthisMagCal->ftrFitErrorpc = 50.0F * sqrtf(fabs(pthisMagCal->fvecA[j]) / (float) pthisMagBuffer->iMagBufferCount) /
    c358:	4993      	ldr	r1, [pc, #588]	; (c5a8 <fUpdateCalibration10EIG+0x9c0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:753
			(pthisMagCal->ftrB * pthisMagCal->ftrB);
    c35a:	6edc      	ldr	r4, [r3, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:752
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[2][2] * pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z] - pthisMagCal->fmatB[9][j]));

	// calculate the trial normalized fit error as a percentage
	pthisMagCal->ftrFitErrorpc = 50.0F * sqrtf(fabs(pthisMagCal->fvecA[j]) / (float) pthisMagBuffer->iMagBufferCount) /
    c35c:	f7f4 fe0a 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:753
			(pthisMagCal->ftrB * pthisMagCal->ftrB);
    c360:	1c21      	adds	r1, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:752
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[2][2] * pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z] - pthisMagCal->fmatB[9][j]));

	// calculate the trial normalized fit error as a percentage
	pthisMagCal->ftrFitErrorpc = 50.0F * sqrtf(fabs(pthisMagCal->fvecA[j]) / (float) pthisMagBuffer->iMagBufferCount) /
    c362:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:753
			(pthisMagCal->ftrB * pthisMagCal->ftrB);
    c364:	1c20      	adds	r0, r4, #0
    c366:	f7f4 fe05 	bl	f74 <__aeabi_fmul>
    c36a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:752
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[2][2] * pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z] - pthisMagCal->fmatB[9][j]));

	// calculate the trial normalized fit error as a percentage
	pthisMagCal->ftrFitErrorpc = 50.0F * sqrtf(fabs(pthisMagCal->fvecA[j]) / (float) pthisMagBuffer->iMagBufferCount) /
    c36c:	1c28      	adds	r0, r5, #0
    c36e:	f7f4 fc0f 	bl	b90 <__aeabi_fdiv>
    c372:	465b      	mov	r3, fp
    c374:	6718      	str	r0, [r3, #112]	; 0x70
    c376:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:758
			(pthisMagCal->ftrB * pthisMagCal->ftrB);

	// correct for the measurement matrix offset and scaling and get the computed hard iron offset in uT
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = pthisMagCal->ftrV[l] * DEFAULTB + (float)iOffset[l] * pthisMag->fuTPerCount;
    c378:	498b      	ldr	r1, [pc, #556]	; (c5a8 <fUpdateCalibration10EIG+0x9c0>)
    c37a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    c37c:	465b      	mov	r3, fp
    c37e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    c380:	f7f4 fdf8 	bl	f74 <__aeabi_fmul>
    c384:	ab10      	add	r3, sp, #64	; 0x40
    c386:	1c06      	adds	r6, r0, #0
    c388:	2000      	movs	r0, #0
    c38a:	5e18      	ldrsh	r0, [r3, r0]
    c38c:	f7f5 f8c2 	bl	1514 <__aeabi_i2f>
    c390:	1c29      	adds	r1, r5, #0
    c392:	f7f4 fdef 	bl	f74 <__aeabi_fmul>
    c396:	1c01      	adds	r1, r0, #0
    c398:	1c30      	adds	r0, r6, #0
    c39a:	f7f4 fa7d 	bl	898 <__aeabi_fadd>
    c39e:	465b      	mov	r3, fp
    c3a0:	4981      	ldr	r1, [pc, #516]	; (c5a8 <fUpdateCalibration10EIG+0x9c0>)
    c3a2:	63d8      	str	r0, [r3, #60]	; 0x3c
    c3a4:	6c18      	ldr	r0, [r3, #64]	; 0x40
    c3a6:	f7f4 fde5 	bl	f74 <__aeabi_fmul>
    c3aa:	ab10      	add	r3, sp, #64	; 0x40
    c3ac:	1c06      	adds	r6, r0, #0
    c3ae:	2002      	movs	r0, #2
    c3b0:	5e18      	ldrsh	r0, [r3, r0]
    c3b2:	f7f5 f8af 	bl	1514 <__aeabi_i2f>
    c3b6:	1c29      	adds	r1, r5, #0
    c3b8:	f7f4 fddc 	bl	f74 <__aeabi_fmul>
    c3bc:	1c01      	adds	r1, r0, #0
    c3be:	1c30      	adds	r0, r6, #0
    c3c0:	f7f4 fa6a 	bl	898 <__aeabi_fadd>
    c3c4:	465b      	mov	r3, fp
    c3c6:	4978      	ldr	r1, [pc, #480]	; (c5a8 <fUpdateCalibration10EIG+0x9c0>)
    c3c8:	6418      	str	r0, [r3, #64]	; 0x40
    c3ca:	6c58      	ldr	r0, [r3, #68]	; 0x44
    c3cc:	f7f4 fdd2 	bl	f74 <__aeabi_fmul>
    c3d0:	ab10      	add	r3, sp, #64	; 0x40
    c3d2:	1c06      	adds	r6, r0, #0
    c3d4:	2004      	movs	r0, #4
    c3d6:	5e18      	ldrsh	r0, [r3, r0]
    c3d8:	f7f5 f89c 	bl	1514 <__aeabi_i2f>
    c3dc:	1c29      	adds	r1, r5, #0
    c3de:	f7f4 fdc9 	bl	f74 <__aeabi_fmul>
    c3e2:	1c01      	adds	r1, r0, #0
    c3e4:	1c30      	adds	r0, r6, #0
    c3e6:	f7f4 fa57 	bl	898 <__aeabi_fadd>
    c3ea:	465b      	mov	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:762
	}

	// convert the trial geomagnetic field strength B into uT for un-normalized soft iron matrix A
	pthisMagCal->ftrB *= DEFAULTB;
    c3ec:	496e      	ldr	r1, [pc, #440]	; (c5a8 <fUpdateCalibration10EIG+0x9c0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:758
			(pthisMagCal->ftrB * pthisMagCal->ftrB);

	// correct for the measurement matrix offset and scaling and get the computed hard iron offset in uT
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = pthisMagCal->ftrV[l] * DEFAULTB + (float)iOffset[l] * pthisMag->fuTPerCount;
    c3ee:	6458      	str	r0, [r3, #68]	; 0x44
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:762
	}

	// convert the trial geomagnetic field strength B into uT for un-normalized soft iron matrix A
	pthisMagCal->ftrB *= DEFAULTB;
    c3f0:	1c20      	adds	r0, r4, #0
    c3f2:	f7f4 fdbf 	bl	f74 <__aeabi_fmul>
    c3f6:	465b      	mov	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:765

	// normalize the ellipsoid matrix A to unit determinant and correct B by root of this multiplicative factor
	f3x3matrixAeqAxScalar(pthisMagCal->fA, powf(det, -(ONETHIRD)));
    c3f8:	496c      	ldr	r1, [pc, #432]	; (c5ac <fUpdateCalibration10EIG+0x9c4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:762
	{
		pthisMagCal->ftrV[l] = pthisMagCal->ftrV[l] * DEFAULTB + (float)iOffset[l] * pthisMag->fuTPerCount;
	}

	// convert the trial geomagnetic field strength B into uT for un-normalized soft iron matrix A
	pthisMagCal->ftrB *= DEFAULTB;
    c3fa:	66d8      	str	r0, [r3, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:765

	// normalize the ellipsoid matrix A to unit determinant and correct B by root of this multiplicative factor
	f3x3matrixAeqAxScalar(pthisMagCal->fA, powf(det, -(ONETHIRD)));
    c3fc:	4650      	mov	r0, sl
    c3fe:	f006 f95d 	bl	126bc <powf>
    c402:	1c01      	adds	r1, r0, #0
    c404:	9800      	ldr	r0, [sp, #0]
    c406:	f000 f8f3 	bl	c5f0 <f3x3matrixAeqAxScalar>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:766
	pthisMagCal->ftrB *= powf(det, -(ONESIXTH));
    c40a:	4969      	ldr	r1, [pc, #420]	; (c5b0 <fUpdateCalibration10EIG+0x9c8>)
    c40c:	4650      	mov	r0, sl
    c40e:	f006 f955 	bl	126bc <powf>
    c412:	465b      	mov	r3, fp
    c414:	1c01      	adds	r1, r0, #0
    c416:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    c418:	f7f4 fdac 	bl	f74 <__aeabi_fmul>
    c41c:	465b      	mov	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:775
	// where fmatA holds the 3x3 matrix fA in its top left elements
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			pthisMagCal->fmatA[i][j] = pthisMagCal->fA[i][j];
    c41e:	465a      	mov	r2, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:766
	// convert the trial geomagnetic field strength B into uT for un-normalized soft iron matrix A
	pthisMagCal->ftrB *= DEFAULTB;

	// normalize the ellipsoid matrix A to unit determinant and correct B by root of this multiplicative factor
	f3x3matrixAeqAxScalar(pthisMagCal->fA, powf(det, -(ONETHIRD)));
	pthisMagCal->ftrB *= powf(det, -(ONESIXTH));
    c420:	66d8      	str	r0, [r3, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:775
	// where fmatA holds the 3x3 matrix fA in its top left elements
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			pthisMagCal->fmatA[i][j] = pthisMagCal->fA[i][j];
    c422:	23bc      	movs	r3, #188	; 0xbc
    c424:	6f51      	ldr	r1, [r2, #116]	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:778
		}
	}
	eigencompute(pthisMagCal->fmatA, pthisMagCal->fvecA, pthisMagCal->fmatB, 3);
    c426:	9d05      	ldr	r5, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:775
	// where fmatA holds the 3x3 matrix fA in its top left elements
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			pthisMagCal->fmatA[i][j] = pthisMagCal->fA[i][j];
    c428:	50d1      	str	r1, [r2, r3]
    c42a:	6f91      	ldr	r1, [r2, #120]	; 0x78
    c42c:	3304      	adds	r3, #4
    c42e:	50d1      	str	r1, [r2, r3]
    c430:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
    c432:	3304      	adds	r3, #4
    c434:	50d1      	str	r1, [r2, r3]
    c436:	4659      	mov	r1, fp
    c438:	3b44      	subs	r3, #68	; 0x44
    c43a:	58d2      	ldr	r2, [r2, r3]
    c43c:	3364      	adds	r3, #100	; 0x64
    c43e:	50ca      	str	r2, [r1, r3]
    c440:	2284      	movs	r2, #132	; 0x84
    c442:	23e8      	movs	r3, #232	; 0xe8
    c444:	588a      	ldr	r2, [r1, r2]
    c446:	2796      	movs	r7, #150	; 0x96
    c448:	50ca      	str	r2, [r1, r3]
    c44a:	2288      	movs	r2, #136	; 0x88
    c44c:	23ec      	movs	r3, #236	; 0xec
    c44e:	588a      	ldr	r2, [r1, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:778
		}
	}
	eigencompute(pthisMagCal->fmatA, pthisMagCal->fvecA, pthisMagCal->fmatB, 3);
    c450:	9801      	ldr	r0, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:775
	// where fmatA holds the 3x3 matrix fA in its top left elements
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			pthisMagCal->fmatA[i][j] = pthisMagCal->fA[i][j];
    c452:	50ca      	str	r2, [r1, r3]
    c454:	3b60      	subs	r3, #96	; 0x60
    c456:	58ca      	ldr	r2, [r1, r3]
    c458:	3380      	adds	r3, #128	; 0x80
    c45a:	50ca      	str	r2, [r1, r3]
    c45c:	3b7c      	subs	r3, #124	; 0x7c
    c45e:	58ca      	ldr	r2, [r1, r3]
    c460:	3380      	adds	r3, #128	; 0x80
    c462:	50ca      	str	r2, [r1, r3]
    c464:	464a      	mov	r2, r9
    c466:	238a      	movs	r3, #138	; 0x8a
    c468:	588a      	ldr	r2, [r1, r2]
    c46a:	005b      	lsls	r3, r3, #1
    c46c:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:778
		}
	}
	eigencompute(pthisMagCal->fmatA, pthisMagCal->fvecA, pthisMagCal->fmatB, 3);
    c46e:	3b12      	subs	r3, #18
    c470:	9907      	ldr	r1, [sp, #28]
    c472:	1c2a      	adds	r2, r5, #0
    c474:	3bff      	subs	r3, #255	; 0xff
    c476:	f000 fa17 	bl	c8a8 <eigencompute>
    c47a:	1c2c      	adds	r4, r5, #0
    c47c:	00bf      	lsls	r7, r7, #2
    c47e:	445f      	add	r7, fp
    c480:	1c23      	adds	r3, r4, #0
    c482:	3391      	adds	r3, #145	; 0x91
    c484:	33ff      	adds	r3, #255	; 0xff
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:783

	// set pthisMagCal->fmatB to be eigenvectors . diag(sqrt(sqrt(eigenvalues))) = fmatB . diag(sqrt(sqrt(fvecA))
	for (j = 0; j < 3; j++) // loop over columns j
	{
		ftmp = sqrtf(sqrtf(fabs(pthisMagCal->fvecA[j])));
    c486:	6818      	ldr	r0, [r3, #0]
    c488:	0040      	lsls	r0, r0, #1
    c48a:	0840      	lsrs	r0, r0, #1
    c48c:	f006 fabe 	bl	12a0c <sqrtf>
    c490:	f006 fabc 	bl	12a0c <sqrtf>
    c494:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:786
		for (i = 0; i < 3; i++) // loop over rows i
		{
			pthisMagCal->fmatB[i][j] *= ftmp;
    c496:	1c31      	adds	r1, r6, #0
    c498:	6820      	ldr	r0, [r4, #0]
    c49a:	f7f4 fd6b 	bl	f74 <__aeabi_fmul>
    c49e:	1c31      	adds	r1, r6, #0
    c4a0:	6020      	str	r0, [r4, #0]
    c4a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c4a4:	f7f4 fd66 	bl	f74 <__aeabi_fmul>
    c4a8:	1c31      	adds	r1, r6, #0
    c4aa:	62a0      	str	r0, [r4, #40]	; 0x28
    c4ac:	6d20      	ldr	r0, [r4, #80]	; 0x50
    c4ae:	f7f4 fd61 	bl	f74 <__aeabi_fmul>
    c4b2:	3404      	adds	r4, #4
    c4b4:	64e0      	str	r0, [r4, #76]	; 0x4c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:781
		}
	}
	eigencompute(pthisMagCal->fmatA, pthisMagCal->fvecA, pthisMagCal->fmatB, 3);

	// set pthisMagCal->fmatB to be eigenvectors . diag(sqrt(sqrt(eigenvalues))) = fmatB . diag(sqrt(sqrt(fvecA))
	for (j = 0; j < 3; j++) // loop over columns j
    c4b6:	42bc      	cmp	r4, r7
    c4b8:	d1e2      	bne.n	c480 <fUpdateCalibration10EIG+0x898>
    c4ba:	2600      	movs	r6, #0
    c4bc:	682b      	ldr	r3, [r5, #0]
    c4be:	68aa      	ldr	r2, [r5, #8]
    c4c0:	469a      	mov	sl, r3
    c4c2:	686b      	ldr	r3, [r5, #4]
    c4c4:	b2f7      	uxtb	r7, r6
    c4c6:	9301      	str	r3, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:778
		for (j = 0; j < 3; j++)
		{
			pthisMagCal->fmatA[i][j] = pthisMagCal->fA[i][j];
		}
	}
	eigencompute(pthisMagCal->fmatA, pthisMagCal->fvecA, pthisMagCal->fmatB, 3);
    c4c8:	4698      	mov	r8, r3
    c4ca:	0073      	lsls	r3, r6, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:802
		{
			pthisMagCal->ftrinvW[i][j] = 0.0F;
			// accumulate the matrix product
			for (k = 0; k < 3; k++)
			{
				pthisMagCal->ftrinvW[i][j] += pthisMagCal->fmatB[i][k] * pthisMagCal->fmatB[j][k];
    c4cc:	199b      	adds	r3, r3, r6
    c4ce:	9200      	str	r2, [sp, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:778
		for (j = 0; j < 3; j++)
		{
			pthisMagCal->fmatA[i][j] = pthisMagCal->fA[i][j];
		}
	}
	eigencompute(pthisMagCal->fmatA, pthisMagCal->fvecA, pthisMagCal->fmatB, 3);
    c4d0:	4691      	mov	r9, r2
    c4d2:	4650      	mov	r0, sl
    c4d4:	b27c      	sxtb	r4, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:802
		{
			pthisMagCal->ftrinvW[i][j] = 0.0F;
			// accumulate the matrix product
			for (k = 0; k < 3; k++)
			{
				pthisMagCal->ftrinvW[i][j] += pthisMagCal->fmatB[i][k] * pthisMagCal->fmatB[j][k];
    c4d6:	9303      	str	r3, [sp, #12]
    c4d8:	e012      	b.n	c500 <fUpdateCalibration10EIG+0x918>
    c4da:	2292      	movs	r2, #146	; 0x92
    c4dc:	00a3      	lsls	r3, r4, #2
    c4de:	191b      	adds	r3, r3, r4
    c4e0:	00db      	lsls	r3, r3, #3
    c4e2:	445b      	add	r3, fp
    c4e4:	0092      	lsls	r2, r2, #2
    c4e6:	189a      	adds	r2, r3, r2
    c4e8:	6850      	ldr	r0, [r2, #4]
    c4ea:	2293      	movs	r2, #147	; 0x93
    c4ec:	0092      	lsls	r2, r2, #2
    c4ee:	189a      	adds	r2, r3, r2
    c4f0:	6852      	ldr	r2, [r2, #4]
    c4f2:	4690      	mov	r8, r2
    c4f4:	2294      	movs	r2, #148	; 0x94
    c4f6:	0092      	lsls	r2, r2, #2
    c4f8:	4694      	mov	ip, r2
    c4fa:	4463      	add	r3, ip
    c4fc:	685b      	ldr	r3, [r3, #4]
    c4fe:	4699      	mov	r9, r3
    c500:	4651      	mov	r1, sl
    c502:	f7f4 fd37 	bl	f74 <__aeabi_fmul>
    c506:	2100      	movs	r1, #0
    c508:	f7f4 f9c6 	bl	898 <__aeabi_fadd>
    c50c:	9901      	ldr	r1, [sp, #4]
    c50e:	9002      	str	r0, [sp, #8]
    c510:	4640      	mov	r0, r8
    c512:	f7f4 fd2f 	bl	f74 <__aeabi_fmul>
    c516:	1c01      	adds	r1, r0, #0
    c518:	9802      	ldr	r0, [sp, #8]
    c51a:	f7f4 f9bd 	bl	898 <__aeabi_fadd>
    c51e:	9900      	ldr	r1, [sp, #0]
    c520:	4680      	mov	r8, r0
    c522:	4648      	mov	r0, r9
    c524:	f7f4 fd26 	bl	f74 <__aeabi_fmul>
    c528:	1c01      	adds	r1, r0, #0
    c52a:	4640      	mov	r0, r8
    c52c:	f7f4 f9b4 	bl	898 <__aeabi_fadd>
    c530:	465a      	mov	r2, fp
    c532:	9b03      	ldr	r3, [sp, #12]
    c534:	3701      	adds	r7, #1
    c536:	191b      	adds	r3, r3, r4
    c538:	3312      	adds	r3, #18
    c53a:	009b      	lsls	r3, r3, #2
    c53c:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:805
			}
			// copy to below diagonal element
			pthisMagCal->ftrinvW[j][i] = pthisMagCal->ftrinvW[i][j];
    c53e:	0063      	lsls	r3, r4, #1
    c540:	191b      	adds	r3, r3, r4
    c542:	199b      	adds	r3, r3, r6
    c544:	3312      	adds	r3, #18
    c546:	b2ff      	uxtb	r7, r7
    c548:	009b      	lsls	r3, r3, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:796
	// = fmatB * fmatB^T = sqrt(fA) (guaranteed symmetric)
	// loop over rows
	for (i = 0; i < 3; i++)
	{
		// loop over on and above diagonal columns
		for (j = i; j < 3; j++)
    c54a:	b27c      	sxtb	r4, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:805
			for (k = 0; k < 3; k++)
			{
				pthisMagCal->ftrinvW[i][j] += pthisMagCal->fmatB[i][k] * pthisMagCal->fmatB[j][k];
			}
			// copy to below diagonal element
			pthisMagCal->ftrinvW[j][i] = pthisMagCal->ftrinvW[i][j];
    c54c:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:796
	// = fmatB * fmatB^T = sqrt(fA) (guaranteed symmetric)
	// loop over rows
	for (i = 0; i < 3; i++)
	{
		// loop over on and above diagonal columns
		for (j = i; j < 3; j++)
    c54e:	2c02      	cmp	r4, #2
    c550:	ddc3      	ble.n	c4da <fUpdateCalibration10EIG+0x8f2>
    c552:	3601      	adds	r6, #1
    c554:	3528      	adds	r5, #40	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:793 (discriminator 2)
	}

	// set ftrinvW to eigenvectors * diag(sqrt(eigenvalues)) * eigenvectors^T
	// = fmatB * fmatB^T = sqrt(fA) (guaranteed symmetric)
	// loop over rows
	for (i = 0; i < 3; i++)
    c556:	2e03      	cmp	r6, #3
    c558:	d1b0      	bne.n	c4bc <fUpdateCalibration10EIG+0x8d4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:810
			pthisMagCal->ftrinvW[j][i] = pthisMagCal->ftrinvW[i][j];
		}
	}

	return;
}
    c55a:	b013      	add	sp, #76	; 0x4c
    c55c:	bc3c      	pop	{r2, r3, r4, r5}
    c55e:	4690      	mov	r8, r2
    c560:	4699      	mov	r9, r3
    c562:	46a2      	mov	sl, r4
    c564:	46ab      	mov	fp, r5
    c566:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:643 (discriminator 1)
				// use first valid magnetic buffer entry as estimate for offset to help solution (bit counts)
				if (iCount == 0)
				{
					for (l = X; l <= Z; l++)
					{
						iOffset[l] = pthisMagBuffer->iBpFast[l][j][k];
    c568:	9902      	ldr	r1, [sp, #8]
    c56a:	2500      	movs	r5, #0
    c56c:	880b      	ldrh	r3, [r1, #0]
    c56e:	468c      	mov	ip, r1
    c570:	9309      	str	r3, [sp, #36]	; 0x24
    c572:	2390      	movs	r3, #144	; 0x90
    c574:	009b      	lsls	r3, r3, #2
    c576:	4463      	add	r3, ip
    c578:	881b      	ldrh	r3, [r3, #0]
    c57a:	1c2e      	adds	r6, r5, #0
    c57c:	930a      	str	r3, [sp, #40]	; 0x28
    c57e:	2390      	movs	r3, #144	; 0x90
    c580:	00db      	lsls	r3, r3, #3
    c582:	4463      	add	r3, ip
    c584:	881b      	ldrh	r3, [r3, #0]
    c586:	1c2f      	adds	r7, r5, #0
    c588:	9308      	str	r3, [sp, #32]
    c58a:	f7ff fbab 	bl	bce4 <fUpdateCalibration10EIG+0xfc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:690 (discriminator 2)

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
    c58e:	2d0a      	cmp	r5, #10
    c590:	d100      	bne.n	c594 <fUpdateCalibration10EIG+0x9ac>
    c592:	e4db      	b.n	bf4c <fUpdateCalibration10EIG+0x364>
    c594:	3501      	adds	r5, #1
    c596:	3404      	adds	r4, #4
    c598:	3228      	adds	r2, #40	; 0x28
    c59a:	b2ed      	uxtb	r5, r5
    c59c:	3004      	adds	r0, #4
    c59e:	3301      	adds	r3, #1
    c5a0:	e49f      	b.n	bee2 <fUpdateCalibration10EIG+0x2fa>
    c5a2:	46c0      	nop			; (mov r8, r8)
    c5a4:	00000b56 	.word	0x00000b56
    c5a8:	42480000 	.word	0x42480000
    c5ac:	beaaaaab 	.word	0xbeaaaaab
    c5b0:	be2aaaab 	.word	0xbe2aaaab

0000c5b4 <main>:
main():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/main.c:67
/* User includes (#include below this line is not maintained by Processor Expert) */

/*lint -save  -e970 Disable MISRA rule (6.3) checking. */
int main(void)
/*lint -restore Enable MISRA rule (6.3) checking. */
{
    c5b4:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/main.c:71
  /* Write your local variable definition here */

  /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
  PE_low_level_init();
    c5b6:	f004 fe71 	bl	1129c <PE_low_level_init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/main.c:80
  /* For example: for(;;) { } */

  /*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
    c5ba:	f004 f8eb 	bl	10794 <_mqxlite>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/main.c:84 (discriminator 1)
  #endif
  /*** End of RTOS startup code.  ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;){}
    c5be:	e7fe      	b.n	c5be <main+0xa>

0000c5c0 <f3x3matrixAeqI>:
f3x3matrixAeqI():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
		}
		A[i][i] = 1.0F;
    c5c0:	22fe      	movs	r2, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:51
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
    c5c2:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		}
		A[i][i] = 1.0F;
    c5c4:	0592      	lsls	r2, r2, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:51
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
    c5c6:	6043      	str	r3, [r0, #4]
    c5c8:	6083      	str	r3, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		}
		A[i][i] = 1.0F;
    c5ca:	6002      	str	r2, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:51
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
    c5cc:	60c3      	str	r3, [r0, #12]
    c5ce:	6143      	str	r3, [r0, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		}
		A[i][i] = 1.0F;
    c5d0:	6102      	str	r2, [r0, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:51
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
    c5d2:	6183      	str	r3, [r0, #24]
    c5d4:	61c3      	str	r3, [r0, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		}
		A[i][i] = 1.0F;
    c5d6:	6202      	str	r2, [r0, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:56
	}
	return;
}
    c5d8:	4770      	bx	lr
    c5da:	46c0      	nop			; (mov r8, r8)

0000c5dc <f3x3matrixAeqScalar>:
f3x3matrixAeqScalar():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:91
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = Scalar;
    c5dc:	6001      	str	r1, [r0, #0]
    c5de:	6041      	str	r1, [r0, #4]
    c5e0:	6081      	str	r1, [r0, #8]
    c5e2:	60c1      	str	r1, [r0, #12]
    c5e4:	6101      	str	r1, [r0, #16]
    c5e6:	6141      	str	r1, [r0, #20]
    c5e8:	6181      	str	r1, [r0, #24]
    c5ea:	61c1      	str	r1, [r0, #28]
    c5ec:	6201      	str	r1, [r0, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:95
		}
	}
	return;
}
    c5ee:	4770      	bx	lr

0000c5f0 <f3x3matrixAeqAxScalar>:
f3x3matrixAeqAxScalar():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:99

// function multiplies all elements of 3x3 matrix A by the specified scalar
void f3x3matrixAeqAxScalar(float A[][3], float Scalar)
{
    c5f0:	b538      	push	{r3, r4, r5, lr}
    c5f2:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:109
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) *= Scalar;
    c5f4:	6800      	ldr	r0, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:99
	return;
}

// function multiplies all elements of 3x3 matrix A by the specified scalar
void f3x3matrixAeqAxScalar(float A[][3], float Scalar)
{
    c5f6:	1c0d      	adds	r5, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:109
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) *= Scalar;
    c5f8:	f7f4 fcbc 	bl	f74 <__aeabi_fmul>
    c5fc:	1c29      	adds	r1, r5, #0
    c5fe:	6020      	str	r0, [r4, #0]
    c600:	6860      	ldr	r0, [r4, #4]
    c602:	f7f4 fcb7 	bl	f74 <__aeabi_fmul>
    c606:	1c29      	adds	r1, r5, #0
    c608:	6060      	str	r0, [r4, #4]
    c60a:	68a0      	ldr	r0, [r4, #8]
    c60c:	f7f4 fcb2 	bl	f74 <__aeabi_fmul>
    c610:	1c29      	adds	r1, r5, #0
    c612:	60a0      	str	r0, [r4, #8]
    c614:	68e0      	ldr	r0, [r4, #12]
    c616:	f7f4 fcad 	bl	f74 <__aeabi_fmul>
    c61a:	1c29      	adds	r1, r5, #0
    c61c:	60e0      	str	r0, [r4, #12]
    c61e:	6920      	ldr	r0, [r4, #16]
    c620:	f7f4 fca8 	bl	f74 <__aeabi_fmul>
    c624:	1c29      	adds	r1, r5, #0
    c626:	6120      	str	r0, [r4, #16]
    c628:	6960      	ldr	r0, [r4, #20]
    c62a:	f7f4 fca3 	bl	f74 <__aeabi_fmul>
    c62e:	1c29      	adds	r1, r5, #0
    c630:	6160      	str	r0, [r4, #20]
    c632:	69a0      	ldr	r0, [r4, #24]
    c634:	f7f4 fc9e 	bl	f74 <__aeabi_fmul>
    c638:	1c29      	adds	r1, r5, #0
    c63a:	61a0      	str	r0, [r4, #24]
    c63c:	69e0      	ldr	r0, [r4, #28]
    c63e:	f7f4 fc99 	bl	f74 <__aeabi_fmul>
    c642:	1c29      	adds	r1, r5, #0
    c644:	61e0      	str	r0, [r4, #28]
    c646:	6a20      	ldr	r0, [r4, #32]
    c648:	f7f4 fc94 	bl	f74 <__aeabi_fmul>
    c64c:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:114
		}
	}

	return;
}
    c64e:	bd38      	pop	{r3, r4, r5, pc}

0000c650 <f3x3matrixAeqMinusA>:
f3x3matrixAeqMinusA():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:128
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*pAij = -*pAij;
    c650:	2280      	movs	r2, #128	; 0x80
    c652:	0612      	lsls	r2, r2, #24
    c654:	4694      	mov	ip, r2
    c656:	6803      	ldr	r3, [r0, #0]
    c658:	4463      	add	r3, ip
    c65a:	6003      	str	r3, [r0, #0]
    c65c:	6843      	ldr	r3, [r0, #4]
    c65e:	4463      	add	r3, ip
    c660:	6043      	str	r3, [r0, #4]
    c662:	6883      	ldr	r3, [r0, #8]
    c664:	4463      	add	r3, ip
    c666:	6083      	str	r3, [r0, #8]
    c668:	68c3      	ldr	r3, [r0, #12]
    c66a:	4463      	add	r3, ip
    c66c:	60c3      	str	r3, [r0, #12]
    c66e:	6903      	ldr	r3, [r0, #16]
    c670:	4463      	add	r3, ip
    c672:	6103      	str	r3, [r0, #16]
    c674:	6943      	ldr	r3, [r0, #20]
    c676:	4463      	add	r3, ip
    c678:	6143      	str	r3, [r0, #20]
    c67a:	6983      	ldr	r3, [r0, #24]
    c67c:	4463      	add	r3, ip
    c67e:	6183      	str	r3, [r0, #24]
    c680:	69c3      	ldr	r3, [r0, #28]
    c682:	4463      	add	r3, ip
    c684:	61c3      	str	r3, [r0, #28]
    c686:	6a03      	ldr	r3, [r0, #32]
    c688:	4463      	add	r3, ip
    c68a:	6203      	str	r3, [r0, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:134
			pAij++;
		}
	}

	return;
}
    c68c:	4770      	bx	lr
    c68e:	46c0      	nop			; (mov r8, r8)

0000c690 <f3x3matrixAeqInvSymB>:
f3x3matrixAeqInvSymB():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:139

// function directly calculates the symmetric inverse of a symmetric 3x3 matrix
// only the on and above diagonal terms in B are used and need to be specified
void f3x3matrixAeqInvSymB(float A[][3], float B[][3])
{
    c690:	b5f0      	push	{r4, r5, r6, r7, lr}
    c692:	465f      	mov	r7, fp
    c694:	4656      	mov	r6, sl
    c696:	464d      	mov	r5, r9
    c698:	4644      	mov	r4, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:146
	float fB12B02mB01B22;	// B[1][2] * B[0][2] - B[0][1] * B[2][2]
	float fB01B12mB11B02;	// B[0][1] * B[1][2] - B[1][1] * B[0][2]
	float ftmp;				// determinant and then reciprocal

	// calculate useful products
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
    c69a:	690b      	ldr	r3, [r1, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:139
}

// function directly calculates the symmetric inverse of a symmetric 3x3 matrix
// only the on and above diagonal terms in B are used and need to be specified
void f3x3matrixAeqInvSymB(float A[][3], float B[][3])
{
    c69c:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:146
	float fB12B02mB01B22;	// B[1][2] * B[0][2] - B[0][1] * B[2][2]
	float fB01B12mB11B02;	// B[0][1] * B[1][2] - B[1][1] * B[0][2]
	float ftmp;				// determinant and then reciprocal

	// calculate useful products
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
    c69e:	4699      	mov	r9, r3
    c6a0:	6a0b      	ldr	r3, [r1, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:139
}

// function directly calculates the symmetric inverse of a symmetric 3x3 matrix
// only the on and above diagonal terms in B are used and need to be specified
void f3x3matrixAeqInvSymB(float A[][3], float B[][3])
{
    c6a2:	b083      	sub	sp, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:146
	float fB12B02mB01B22;	// B[1][2] * B[0][2] - B[0][1] * B[2][2]
	float fB01B12mB11B02;	// B[0][1] * B[1][2] - B[1][1] * B[0][2]
	float ftmp;				// determinant and then reciprocal

	// calculate useful products
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
    c6a4:	694e      	ldr	r6, [r1, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:139
}

// function directly calculates the symmetric inverse of a symmetric 3x3 matrix
// only the on and above diagonal terms in B are used and need to be specified
void f3x3matrixAeqInvSymB(float A[][3], float B[][3])
{
    c6a6:	1c0d      	adds	r5, r1, #0
    c6a8:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:146
	float fB12B02mB01B22;	// B[1][2] * B[0][2] - B[0][1] * B[2][2]
	float fB01B12mB11B02;	// B[0][1] * B[1][2] - B[1][1] * B[0][2]
	float ftmp;				// determinant and then reciprocal

	// calculate useful products
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
    c6aa:	1c19      	adds	r1, r3, #0
    c6ac:	4648      	mov	r0, r9
    c6ae:	469a      	mov	sl, r3
    c6b0:	f7f4 fc60 	bl	f74 <__aeabi_fmul>
    c6b4:	1c31      	adds	r1, r6, #0
    c6b6:	1c07      	adds	r7, r0, #0
    c6b8:	1c30      	adds	r0, r6, #0
    c6ba:	f7f4 fc5b 	bl	f74 <__aeabi_fmul>
    c6be:	1c01      	adds	r1, r0, #0
    c6c0:	1c38      	adds	r0, r7, #0
    c6c2:	f7f4 fd89 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:147
	fB12B02mB01B22 = B[1][2] * B[0][2] - B[0][1] * B[2][2];
    c6c6:	68af      	ldr	r7, [r5, #8]
    c6c8:	686b      	ldr	r3, [r5, #4]
    c6ca:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:146
	float fB12B02mB01B22;	// B[1][2] * B[0][2] - B[0][1] * B[2][2]
	float fB01B12mB11B02;	// B[0][1] * B[1][2] - B[1][1] * B[0][2]
	float ftmp;				// determinant and then reciprocal

	// calculate useful products
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
    c6cc:	4683      	mov	fp, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:147
	fB12B02mB01B22 = B[1][2] * B[0][2] - B[0][1] * B[2][2];
    c6ce:	1c30      	adds	r0, r6, #0
    c6d0:	4698      	mov	r8, r3
    c6d2:	f7f4 fc4f 	bl	f74 <__aeabi_fmul>
    c6d6:	4641      	mov	r1, r8
    c6d8:	9001      	str	r0, [sp, #4]
    c6da:	4650      	mov	r0, sl
    c6dc:	f7f4 fc4a 	bl	f74 <__aeabi_fmul>
    c6e0:	1c01      	adds	r1, r0, #0
    c6e2:	9801      	ldr	r0, [sp, #4]
    c6e4:	f7f4 fd78 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:148
	fB01B12mB11B02 = B[0][1] * B[1][2] - B[1][1] * B[0][2];
    c6e8:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:147
	float fB01B12mB11B02;	// B[0][1] * B[1][2] - B[1][1] * B[0][2]
	float ftmp;				// determinant and then reciprocal

	// calculate useful products
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
	fB12B02mB01B22 = B[1][2] * B[0][2] - B[0][1] * B[2][2];
    c6ea:	4682      	mov	sl, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:148
	fB01B12mB11B02 = B[0][1] * B[1][2] - B[1][1] * B[0][2];
    c6ec:	1c30      	adds	r0, r6, #0
    c6ee:	f7f4 fc41 	bl	f74 <__aeabi_fmul>
    c6f2:	1c39      	adds	r1, r7, #0
    c6f4:	1c06      	adds	r6, r0, #0
    c6f6:	4648      	mov	r0, r9
    c6f8:	f7f4 fc3c 	bl	f74 <__aeabi_fmul>
    c6fc:	1c01      	adds	r1, r0, #0
    c6fe:	1c30      	adds	r0, r6, #0
    c700:	f7f4 fd6a 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:151

	// set ftmp to the determinant of the input matrix B
	ftmp = B[0][0] * fB11B22mB12B12 + B[0][1] * fB12B02mB01B22 + B[0][2] * fB01B12mB11B02;
    c704:	6829      	ldr	r1, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:148
	float ftmp;				// determinant and then reciprocal

	// calculate useful products
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
	fB12B02mB01B22 = B[1][2] * B[0][2] - B[0][1] * B[2][2];
	fB01B12mB11B02 = B[0][1] * B[1][2] - B[1][1] * B[0][2];
    c706:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:151

	// set ftmp to the determinant of the input matrix B
	ftmp = B[0][0] * fB11B22mB12B12 + B[0][1] * fB12B02mB01B22 + B[0][2] * fB01B12mB11B02;
    c708:	4658      	mov	r0, fp
    c70a:	f7f4 fc33 	bl	f74 <__aeabi_fmul>
    c70e:	4651      	mov	r1, sl
    c710:	1c06      	adds	r6, r0, #0
    c712:	4640      	mov	r0, r8
    c714:	f7f4 fc2e 	bl	f74 <__aeabi_fmul>
    c718:	1c01      	adds	r1, r0, #0
    c71a:	1c30      	adds	r0, r6, #0
    c71c:	f7f4 f8bc 	bl	898 <__aeabi_fadd>
    c720:	4649      	mov	r1, r9
    c722:	1c06      	adds	r6, r0, #0
    c724:	1c38      	adds	r0, r7, #0
    c726:	f7f4 fc25 	bl	f74 <__aeabi_fmul>
    c72a:	1c01      	adds	r1, r0, #0
    c72c:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:154

	// set A to the inverse of B for any determinant except zero
	if (ftmp != 0.0F)
    c72e:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:151
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
	fB12B02mB01B22 = B[1][2] * B[0][2] - B[0][1] * B[2][2];
	fB01B12mB11B02 = B[0][1] * B[1][2] - B[1][1] * B[0][2];

	// set ftmp to the determinant of the input matrix B
	ftmp = B[0][0] * fB11B22mB12B12 + B[0][1] * fB12B02mB01B22 + B[0][2] * fB01B12mB11B02;
    c730:	f7f4 f8b2 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:154

	// set A to the inverse of B for any determinant except zero
	if (ftmp != 0.0F)
    c734:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:151
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
	fB12B02mB01B22 = B[1][2] * B[0][2] - B[0][1] * B[2][2];
	fB01B12mB11B02 = B[0][1] * B[1][2] - B[1][1] * B[0][2];

	// set ftmp to the determinant of the input matrix B
	ftmp = B[0][0] * fB11B22mB12B12 + B[0][1] * fB12B02mB01B22 + B[0][2] * fB01B12mB11B02;
    c736:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:154

	// set A to the inverse of B for any determinant except zero
	if (ftmp != 0.0F)
    c738:	f7f4 f880 	bl	83c <__aeabi_fcmpeq>
    c73c:	2800      	cmp	r0, #0
    c73e:	d011      	beq.n	c764 <f3x3matrixAeqInvSymB+0xd4>
f3x3matrixAeqI():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
		}
		A[i][i] = 1.0F;
    c740:	23fe      	movs	r3, #254	; 0xfe
    c742:	059b      	lsls	r3, r3, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:51
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
    c744:	6066      	str	r6, [r4, #4]
    c746:	60a6      	str	r6, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		}
		A[i][i] = 1.0F;
    c748:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:51
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
    c74a:	60e6      	str	r6, [r4, #12]
    c74c:	6166      	str	r6, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		}
		A[i][i] = 1.0F;
    c74e:	6123      	str	r3, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:51
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
    c750:	61a6      	str	r6, [r4, #24]
    c752:	61e6      	str	r6, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		}
		A[i][i] = 1.0F;
    c754:	6223      	str	r3, [r4, #32]
f3x3matrixAeqInvSymB():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:170
	{
		// provide the identity matrix if the determinant is zero
		f3x3matrixAeqI(A);
	}
	return;
}
    c756:	b003      	add	sp, #12
    c758:	bc3c      	pop	{r2, r3, r4, r5}
    c75a:	4690      	mov	r8, r2
    c75c:	4699      	mov	r9, r3
    c75e:	46a2      	mov	sl, r4
    c760:	46ab      	mov	fp, r5
    c762:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:156
	ftmp = B[0][0] * fB11B22mB12B12 + B[0][1] * fB12B02mB01B22 + B[0][2] * fB01B12mB11B02;

	// set A to the inverse of B for any determinant except zero
	if (ftmp != 0.0F)
	{
		ftmp = 1.0F / ftmp;
    c764:	20fe      	movs	r0, #254	; 0xfe
    c766:	1c39      	adds	r1, r7, #0
    c768:	0580      	lsls	r0, r0, #22
    c76a:	f7f4 fa11 	bl	b90 <__aeabi_fdiv>
    c76e:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:157
		A[0][0] = fB11B22mB12B12 * ftmp;
    c770:	1c31      	adds	r1, r6, #0
    c772:	4658      	mov	r0, fp
    c774:	f7f4 fbfe 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:158
		A[1][0] = A[0][1] = fB12B02mB01B22 * ftmp;
    c778:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:157

	// set A to the inverse of B for any determinant except zero
	if (ftmp != 0.0F)
	{
		ftmp = 1.0F / ftmp;
		A[0][0] = fB11B22mB12B12 * ftmp;
    c77a:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:158
		A[1][0] = A[0][1] = fB12B02mB01B22 * ftmp;
    c77c:	4650      	mov	r0, sl
    c77e:	f7f4 fbf9 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:159
		A[2][0] = A[0][2] = fB01B12mB11B02 * ftmp;
    c782:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:158
	// set A to the inverse of B for any determinant except zero
	if (ftmp != 0.0F)
	{
		ftmp = 1.0F / ftmp;
		A[0][0] = fB11B22mB12B12 * ftmp;
		A[1][0] = A[0][1] = fB12B02mB01B22 * ftmp;
    c784:	6060      	str	r0, [r4, #4]
    c786:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:159
		A[2][0] = A[0][2] = fB01B12mB11B02 * ftmp;
    c788:	4648      	mov	r0, r9
    c78a:	f7f4 fbf3 	bl	f74 <__aeabi_fmul>
    c78e:	60a0      	str	r0, [r4, #8]
    c790:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:160
		A[1][1] = (B[0][0] * B[2][2] - B[0][2] * B[0][2]) * ftmp;
    c792:	682f      	ldr	r7, [r5, #0]
    c794:	68ab      	ldr	r3, [r5, #8]
    c796:	6a29      	ldr	r1, [r5, #32]
    c798:	1c38      	adds	r0, r7, #0
    c79a:	4698      	mov	r8, r3
    c79c:	f7f4 fbea 	bl	f74 <__aeabi_fmul>
    c7a0:	4641      	mov	r1, r8
    c7a2:	4681      	mov	r9, r0
    c7a4:	4640      	mov	r0, r8
    c7a6:	f7f4 fbe5 	bl	f74 <__aeabi_fmul>
    c7aa:	1c01      	adds	r1, r0, #0
    c7ac:	4648      	mov	r0, r9
    c7ae:	f7f4 fd13 	bl	11d8 <__aeabi_fsub>
    c7b2:	1c31      	adds	r1, r6, #0
    c7b4:	f7f4 fbde 	bl	f74 <__aeabi_fmul>
    c7b8:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:161
		A[2][1] = A[1][2] = (B[0][2] * B[0][1] - B[0][0] * B[1][2]) * ftmp;
    c7ba:	6869      	ldr	r1, [r5, #4]
    c7bc:	4640      	mov	r0, r8
    c7be:	f7f4 fbd9 	bl	f74 <__aeabi_fmul>
    c7c2:	6969      	ldr	r1, [r5, #20]
    c7c4:	4680      	mov	r8, r0
    c7c6:	1c38      	adds	r0, r7, #0
    c7c8:	f7f4 fbd4 	bl	f74 <__aeabi_fmul>
    c7cc:	1c01      	adds	r1, r0, #0
    c7ce:	4640      	mov	r0, r8
    c7d0:	f7f4 fd02 	bl	11d8 <__aeabi_fsub>
    c7d4:	1c31      	adds	r1, r6, #0
    c7d6:	f7f4 fbcd 	bl	f74 <__aeabi_fmul>
    c7da:	6160      	str	r0, [r4, #20]
    c7dc:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:162
		A[2][2] = (B[0][0] * B[1][1] - B[0][1] * B[0][1]) * ftmp;
    c7de:	686b      	ldr	r3, [r5, #4]
    c7e0:	6929      	ldr	r1, [r5, #16]
    c7e2:	1c38      	adds	r0, r7, #0
    c7e4:	4698      	mov	r8, r3
    c7e6:	f7f4 fbc5 	bl	f74 <__aeabi_fmul>
    c7ea:	4641      	mov	r1, r8
    c7ec:	1c05      	adds	r5, r0, #0
    c7ee:	4640      	mov	r0, r8
    c7f0:	f7f4 fbc0 	bl	f74 <__aeabi_fmul>
    c7f4:	1c01      	adds	r1, r0, #0
    c7f6:	1c28      	adds	r0, r5, #0
    c7f8:	f7f4 fcee 	bl	11d8 <__aeabi_fsub>
    c7fc:	1c31      	adds	r1, r6, #0
    c7fe:	f7f4 fbb9 	bl	f74 <__aeabi_fmul>
    c802:	6220      	str	r0, [r4, #32]
    c804:	e7a7      	b.n	c756 <f3x3matrixAeqInvSymB+0xc6>
    c806:	46c0      	nop			; (mov r8, r8)

0000c808 <f3x3matrixDetA>:
f3x3matrixDetA():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:174
	return;
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
    c808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:175
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
    c80a:	6a03      	ldr	r3, [r0, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:174
	return;
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
    c80c:	465f      	mov	r7, fp
    c80e:	4656      	mov	r6, sl
    c810:	464d      	mov	r5, r9
    c812:	4644      	mov	r4, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:175
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
    c814:	4699      	mov	r9, r3
    c816:	6943      	ldr	r3, [r0, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:174
	return;
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
    c818:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:175
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
    c81a:	6906      	ldr	r6, [r0, #16]
    c81c:	469a      	mov	sl, r3
    c81e:	69c3      	ldr	r3, [r0, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:174
	return;
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
    c820:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:176
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
			A[X][Y] * (A[Y][Z] * A[Z][X] - A[Y][X] * A[Z][Z]) +
    c822:	6985      	ldr	r5, [r0, #24]
    c824:	68c7      	ldr	r7, [r0, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:175
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
    c826:	4649      	mov	r1, r9
    c828:	1c30      	adds	r0, r6, #0
    c82a:	4698      	mov	r8, r3
    c82c:	f7f4 fba2 	bl	f74 <__aeabi_fmul>
    c830:	4641      	mov	r1, r8
    c832:	4683      	mov	fp, r0
    c834:	4650      	mov	r0, sl
    c836:	f7f4 fb9d 	bl	f74 <__aeabi_fmul>
    c83a:	1c01      	adds	r1, r0, #0
    c83c:	4658      	mov	r0, fp
    c83e:	f7f4 fccb 	bl	11d8 <__aeabi_fsub>
    c842:	6821      	ldr	r1, [r4, #0]
    c844:	f7f4 fb96 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:176
			A[X][Y] * (A[Y][Z] * A[Z][X] - A[Y][X] * A[Z][Z]) +
    c848:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:175
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
    c84a:	4683      	mov	fp, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:176
			A[X][Y] * (A[Y][Z] * A[Z][X] - A[Y][X] * A[Z][Z]) +
    c84c:	4650      	mov	r0, sl
    c84e:	f7f4 fb91 	bl	f74 <__aeabi_fmul>
    c852:	1c39      	adds	r1, r7, #0
    c854:	4682      	mov	sl, r0
    c856:	4648      	mov	r0, r9
    c858:	f7f4 fb8c 	bl	f74 <__aeabi_fmul>
    c85c:	1c01      	adds	r1, r0, #0
    c85e:	4650      	mov	r0, sl
    c860:	f7f4 fcba 	bl	11d8 <__aeabi_fsub>
    c864:	6861      	ldr	r1, [r4, #4]
    c866:	f7f4 fb85 	bl	f74 <__aeabi_fmul>
    c86a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:175
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
    c86c:	4658      	mov	r0, fp
    c86e:	f7f4 f813 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:177
			A[X][Y] * (A[Y][Z] * A[Z][X] - A[Y][X] * A[Z][Z]) +
			A[X][Z] * (A[Y][X] * A[Z][Y] - A[Y][Y] * A[Z][X]));
    c872:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:175
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
    c874:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:177
			A[X][Y] * (A[Y][Z] * A[Z][X] - A[Y][X] * A[Z][Z]) +
			A[X][Z] * (A[Y][X] * A[Z][Y] - A[Y][Y] * A[Z][X]));
    c876:	4640      	mov	r0, r8
    c878:	f7f4 fb7c 	bl	f74 <__aeabi_fmul>
    c87c:	1c29      	adds	r1, r5, #0
    c87e:	1c07      	adds	r7, r0, #0
    c880:	1c30      	adds	r0, r6, #0
    c882:	f7f4 fb77 	bl	f74 <__aeabi_fmul>
    c886:	1c01      	adds	r1, r0, #0
    c888:	1c38      	adds	r0, r7, #0
    c88a:	f7f4 fca5 	bl	11d8 <__aeabi_fsub>
    c88e:	68a1      	ldr	r1, [r4, #8]
    c890:	f7f4 fb70 	bl	f74 <__aeabi_fmul>
    c894:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:175
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
    c896:	4648      	mov	r0, r9
    c898:	f7f3 fffe 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:178
			A[X][Y] * (A[Y][Z] * A[Z][X] - A[Y][X] * A[Z][Z]) +
			A[X][Z] * (A[Y][X] * A[Z][Y] - A[Y][Y] * A[Z][X]));
}
    c89c:	bc3c      	pop	{r2, r3, r4, r5}
    c89e:	4690      	mov	r8, r2
    c8a0:	4699      	mov	r9, r3
    c8a2:	46a2      	mov	sl, r4
    c8a4:	46ab      	mov	fp, r5
    c8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c8a8 <eigencompute>:
eigencompute():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:187
// A[][] is changed on output.
// eigval[0..n-1] returns the eigenvalues of A[][].
// eigvec[0..n-1][0..n-1] returns the normalized eigenvectors of A[][]
// the eigenvectors are not sorted by value
void eigencompute(float A[][10], float eigval[], float eigvec[][10], int8 n)
{
    c8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c8aa:	465f      	mov	r7, fp
    c8ac:	4656      	mov	r6, sl
    c8ae:	464d      	mov	r5, r9
    c8b0:	4644      	mov	r4, r8
    c8b2:	b4f0      	push	{r4, r5, r6, r7}
    c8b4:	b095      	sub	sp, #84	; 0x54
    c8b6:	9002      	str	r0, [sp, #8]
    c8b8:	910b      	str	r1, [sp, #44]	; 0x2c
    c8ba:	920f      	str	r2, [sp, #60]	; 0x3c
    c8bc:	9304      	str	r3, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:205
	int8 j;
	// timeout ctr for number of passes of the algorithm
	int8 ctr;

	// initialize eigenvectors matrix and eigenvalues array
	for (ir = 0; ir < n; ir++)
    c8be:	2b00      	cmp	r3, #0
    c8c0:	dc00      	bgt.n	c8c4 <eigencompute+0x1c>
    c8c2:	e237      	b.n	cd34 <eigencompute+0x48c>
    c8c4:	9b04      	ldr	r3, [sp, #16]
    c8c6:	272c      	movs	r7, #44	; 0x2c
    c8c8:	3b01      	subs	r3, #1
    c8ca:	b2dd      	uxtb	r5, r3
    c8cc:	9310      	str	r3, [sp, #64]	; 0x40
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:215
			// set on diagonal and off-diagonal elements to zero
			eigvec[ir][ic] = 0.0F;
		}

		// correct the diagonal elements to 1.0
		eigvec[ir][ir] = 1.0F;
    c8ce:	23fe      	movs	r3, #254	; 0xfe
    c8d0:	3501      	adds	r5, #1
    c8d2:	436f      	muls	r7, r5
    c8d4:	059b      	lsls	r3, r3, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:211
	{
		// loop over all columns
		for (ic = 0; ic < n; ic++)
		{
			// set on diagonal and off-diagonal elements to zero
			eigvec[ir][ic] = 0.0F;
    c8d6:	00ad      	lsls	r5, r5, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:215
		}

		// correct the diagonal elements to 1.0
		eigvec[ir][ir] = 1.0F;
    c8d8:	46b8      	mov	r8, r7
    c8da:	1c16      	adds	r6, r2, #0
    c8dc:	1c2f      	adds	r7, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:211
	{
		// loop over all columns
		for (ic = 0; ic < n; ic++)
		{
			// set on diagonal and off-diagonal elements to zero
			eigvec[ir][ic] = 0.0F;
    c8de:	2400      	movs	r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:215
		}

		// correct the diagonal elements to 1.0
		eigvec[ir][ir] = 1.0F;
    c8e0:	4699      	mov	r9, r3
    c8e2:	1c0d      	adds	r5, r1, #0
    c8e4:	1c30      	adds	r0, r6, #0
    c8e6:	1c3a      	adds	r2, r7, #0
    c8e8:	2100      	movs	r1, #0
    c8ea:	f007 fe50 	bl	1458e <memset>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:215 (discriminator 1)
    c8ee:	464a      	mov	r2, r9
    c8f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c8f2:	3628      	adds	r6, #40	; 0x28
    c8f4:	511a      	str	r2, [r3, r4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:218 (discriminator 1)

		// initialize the array of eigenvalues to the diagonal elements of m
		eigval[ir] = A[ir][ir];
    c8f6:	9b02      	ldr	r3, [sp, #8]
    c8f8:	591b      	ldr	r3, [r3, r4]
    c8fa:	342c      	adds	r4, #44	; 0x2c
    c8fc:	9301      	str	r3, [sp, #4]
    c8fe:	c508      	stmia	r5!, {r3}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:205 (discriminator 1)
	int8 j;
	// timeout ctr for number of passes of the algorithm
	int8 ctr;

	// initialize eigenvectors matrix and eigenvalues array
	for (ir = 0; ir < n; ir++)
    c900:	4544      	cmp	r4, r8
    c902:	d1ef      	bne.n	c8e4 <eigencompute+0x3c>
    c904:	2240      	movs	r2, #64	; 0x40
    c906:	466b      	mov	r3, sp
    c908:	189b      	adds	r3, r3, r2
    c90a:	781b      	ldrb	r3, [r3, #0]
    c90c:	009a      	lsls	r2, r3, #2
    c90e:	18d3      	adds	r3, r2, r3
    c910:	005b      	lsls	r3, r3, #1
    c912:	9311      	str	r3, [sp, #68]	; 0x44
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:211
	{
		// loop over all columns
		for (ic = 0; ic < n; ic++)
		{
			// set on diagonal and off-diagonal elements to zero
			eigvec[ir][ic] = 0.0F;
    c914:	2310      	movs	r3, #16
    c916:	9312      	str	r3, [sp, #72]	; 0x48
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:226
	// initialize the counter and loop until converged or NITERATIONS reached
	ctr = 0;
	do
	{
		// compute the absolute value of the above diagonal elements as exit criterion
		residue = 0.0F;
    c918:	2300      	movs	r3, #0
    c91a:	1c18      	adds	r0, r3, #0
    c91c:	9b02      	ldr	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:228
		// loop over rows excluding last row
		for (ir = 0; ir < n - 1; ir++)
    c91e:	2600      	movs	r6, #0
    c920:	4699      	mov	r9, r3
    c922:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c924:	9f04      	ldr	r7, [sp, #16]
    c926:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:228 (discriminator 1)
    c928:	b272      	sxtb	r2, r6
    c92a:	4542      	cmp	r2, r8
    c92c:	da18      	bge.n	c960 <eigencompute+0xb8>
    c92e:	3601      	adds	r6, #1
    c930:	b2f6      	uxtb	r6, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:231
		{
			// loop over above diagonal columns
			for (ic = ir + 1; ic < n; ic++)
    c932:	b273      	sxtb	r3, r6
    c934:	429f      	cmp	r7, r3
    c936:	ddf7      	ble.n	c928 <eigencompute+0x80>
    c938:	0095      	lsls	r5, r2, #2
    c93a:	18aa      	adds	r2, r5, r2
    c93c:	00d2      	lsls	r2, r2, #3
    c93e:	444a      	add	r2, r9
    c940:	1c15      	adds	r5, r2, #0
    c942:	1c34      	adds	r4, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:234 (discriminator 3)
			{
				// accumulate the residual off diagonal terms which are being driven to zero
				residue += fabs(A[ir][ic]);
    c944:	009b      	lsls	r3, r3, #2
    c946:	5959      	ldr	r1, [r3, r5]
    c948:	3401      	adds	r4, #1
    c94a:	0049      	lsls	r1, r1, #1
    c94c:	0849      	lsrs	r1, r1, #1
    c94e:	b2e4      	uxtb	r4, r4
    c950:	f7f3 ffa2 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:231 (discriminator 3)
		residue = 0.0F;
		// loop over rows excluding last row
		for (ir = 0; ir < n - 1; ir++)
		{
			// loop over above diagonal columns
			for (ic = ir + 1; ic < n; ic++)
    c954:	b263      	sxtb	r3, r4
    c956:	429f      	cmp	r7, r3
    c958:	dcf4      	bgt.n	c944 <eigencompute+0x9c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:228
	do
	{
		// compute the absolute value of the above diagonal elements as exit criterion
		residue = 0.0F;
		// loop over rows excluding last row
		for (ir = 0; ir < n - 1; ir++)
    c95a:	b272      	sxtb	r2, r6
    c95c:	4542      	cmp	r2, r8
    c95e:	dbe6      	blt.n	c92e <eigencompute+0x86>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:239
				residue += fabs(A[ir][ic]);
			}
		}

		// check if we still have work to do
		if (residue > 0.0F)
    c960:	2100      	movs	r1, #0
    c962:	9013      	str	r0, [sp, #76]	; 0x4c
    c964:	f7f3 ff84 	bl	870 <__aeabi_fcmpgt>
    c968:	2300      	movs	r3, #0
    c96a:	2800      	cmp	r0, #0
    c96c:	d100      	bne.n	c970 <eigencompute+0xc8>
    c96e:	e1c8      	b.n	cd02 <eigencompute+0x45a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:242 (discriminator 1)
		{
			// loop over all rows with the exception of the last row (since only rotating above diagonal elements)
			for (ir = 0; ir < n - 1; ir++)
    c970:	9910      	ldr	r1, [sp, #64]	; 0x40
    c972:	b25a      	sxtb	r2, r3
    c974:	428a      	cmp	r2, r1
    c976:	db00      	blt.n	c97a <eigencompute+0xd2>
    c978:	e1c3      	b.n	cd02 <eigencompute+0x45a>
    c97a:	3301      	adds	r3, #1
    c97c:	b2db      	uxtb	r3, r3
    c97e:	b2d9      	uxtb	r1, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:245
			{
				// loop over columns ic (where ic is always greater than ir since above diagonal)
				for (ic = ir + 1; ic < n; ic++)
    c980:	9804      	ldr	r0, [sp, #16]
    c982:	9109      	str	r1, [sp, #36]	; 0x24
    c984:	b249      	sxtb	r1, r1
    c986:	910a      	str	r1, [sp, #40]	; 0x28
    c988:	4288      	cmp	r0, r1
    c98a:	dc00      	bgt.n	c98e <eigencompute+0xe6>
    c98c:	e1b3      	b.n	ccf6 <eigencompute+0x44e>
    c98e:	0091      	lsls	r1, r2, #2
    c990:	468b      	mov	fp, r1
    c992:	9902      	ldr	r1, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:291
							// eigvec[j][ic] = eigvec[j][ic] + sin(phi) * (eigvec[j][ir] - tan(phi/2) * eigvec[j][ic])
							eigvec[j][ic] = eigvec[j][ic] + sinphi * (ftmp - tanhalfphi * eigvec[j][ic]);
						}

						// apply the jacobi rotation only to those elements of matrix m that can change
						for (j = 0; j <= ir - 1; j++)
    c994:	465f      	mov	r7, fp
    c996:	468c      	mov	ip, r1
    c998:	445a      	add	r2, fp
    c99a:	00d2      	lsls	r2, r2, #3
    c99c:	4462      	add	r2, ip
    c99e:	9201      	str	r2, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:251
				{
					// only continue with this element if the element is non-zero
					if (fabs(A[ir][ic]) > 0.0F)
					{
						// calculate cot(2*phi) where phi is the Jacobi rotation angle
						cot2phi = 0.5F * (eigval[ic] - eigval[ir]) / (A[ir][ic]);
    c9a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c9a2:	445a      	add	r2, fp
    c9a4:	9207      	str	r2, [sp, #28]
    c9a6:	1e5a      	subs	r2, r3, #1
    c9a8:	3b02      	subs	r3, #2
    c9aa:	b2db      	uxtb	r3, r3
    c9ac:	0099      	lsls	r1, r3, #2
    c9ae:	18cb      	adds	r3, r1, r3
    c9b0:	005b      	lsls	r3, r3, #1
    c9b2:	930d      	str	r3, [sp, #52]	; 0x34
    c9b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c9b6:	9306      	str	r3, [sp, #24]
    c9b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c9ba:	9305      	str	r3, [sp, #20]
    c9bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c9be:	330a      	adds	r3, #10
    c9c0:	930e      	str	r3, [sp, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:291
							// eigvec[j][ic] = eigvec[j][ic] + sin(phi) * (eigvec[j][ir] - tan(phi/2) * eigvec[j][ic])
							eigvec[j][ic] = eigvec[j][ic] + sinphi * (ftmp - tanhalfphi * eigvec[j][ic]);
						}

						// apply the jacobi rotation only to those elements of matrix m that can change
						for (j = 0; j <= ir - 1; j++)
    c9c2:	b253      	sxtb	r3, r2
    c9c4:	930c      	str	r3, [sp, #48]	; 0x30
    c9c6:	9b05      	ldr	r3, [sp, #20]
    c9c8:	9a01      	ldr	r2, [sp, #4]
    c9ca:	9308      	str	r3, [sp, #32]
    c9cc:	009b      	lsls	r3, r3, #2
    c9ce:	1c16      	adds	r6, r2, #0
    c9d0:	469c      	mov	ip, r3
    c9d2:	4466      	add	r6, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:248
			{
				// loop over columns ic (where ic is always greater than ir since above diagonal)
				for (ic = ir + 1; ic < n; ic++)
				{
					// only continue with this element if the element is non-zero
					if (fabs(A[ir][ic]) > 0.0F)
    c9d4:	6834      	ldr	r4, [r6, #0]
    c9d6:	2100      	movs	r1, #0
    c9d8:	0060      	lsls	r0, r4, #1
    c9da:	0840      	lsrs	r0, r0, #1
    c9dc:	1c1d      	adds	r5, r3, #0
    c9de:	9303      	str	r3, [sp, #12]
    c9e0:	f7f3 ff46 	bl	870 <__aeabi_fcmpgt>
    c9e4:	2800      	cmp	r0, #0
    c9e6:	d100      	bne.n	c9ea <eigencompute+0x142>
    c9e8:	e17b      	b.n	cce2 <eigencompute+0x43a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:251
					{
						// calculate cot(2*phi) where phi is the Jacobi rotation angle
						cot2phi = 0.5F * (eigval[ic] - eigval[ir]) / (A[ir][ic]);
    c9ea:	46ac      	mov	ip, r5
    c9ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9ee:	4463      	add	r3, ip
    c9f0:	6818      	ldr	r0, [r3, #0]
    c9f2:	4698      	mov	r8, r3
    c9f4:	9b07      	ldr	r3, [sp, #28]
    c9f6:	6819      	ldr	r1, [r3, #0]
    c9f8:	f7f4 fbee 	bl	11d8 <__aeabi_fsub>
    c9fc:	21fc      	movs	r1, #252	; 0xfc
    c9fe:	0589      	lsls	r1, r1, #22
    ca00:	f7f4 fab8 	bl	f74 <__aeabi_fmul>
    ca04:	1c21      	adds	r1, r4, #0
    ca06:	f7f4 f8c3 	bl	b90 <__aeabi_fdiv>
    ca0a:	4682      	mov	sl, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:254

						// calculate tan(phi) correcting sign to ensure the smaller solution is used
						tanphi = 1.0F / (fabs(cot2phi) + sqrtf(1.0F + cot2phi * cot2phi));
    ca0c:	4651      	mov	r1, sl
    ca0e:	f7f4 fab1 	bl	f74 <__aeabi_fmul>
    ca12:	21fe      	movs	r1, #254	; 0xfe
    ca14:	0589      	lsls	r1, r1, #22
    ca16:	f7f3 ff3f 	bl	898 <__aeabi_fadd>
    ca1a:	f005 fff7 	bl	12a0c <sqrtf>
    ca1e:	4653      	mov	r3, sl
    ca20:	4681      	mov	r9, r0
    ca22:	0058      	lsls	r0, r3, #1
    ca24:	0840      	lsrs	r0, r0, #1
    ca26:	f7f6 f89d 	bl	2b64 <__aeabi_f2d>
    ca2a:	1c04      	adds	r4, r0, #0
    ca2c:	4648      	mov	r0, r9
    ca2e:	1c0d      	adds	r5, r1, #0
    ca30:	f7f6 f898 	bl	2b64 <__aeabi_f2d>
    ca34:	1c02      	adds	r2, r0, #0
    ca36:	1c0b      	adds	r3, r1, #0
    ca38:	1c20      	adds	r0, r4, #0
    ca3a:	1c29      	adds	r1, r5, #0
    ca3c:	f7f4 fdb2 	bl	15a4 <__aeabi_dadd>
    ca40:	1c02      	adds	r2, r0, #0
    ca42:	1c0b      	adds	r3, r1, #0
    ca44:	2000      	movs	r0, #0
    ca46:	49bd      	ldr	r1, [pc, #756]	; (cd3c <eigencompute+0x494>)
    ca48:	f7f5 f8d4 	bl	1bf4 <__aeabi_ddiv>
    ca4c:	f7f6 f8de 	bl	2c0c <__aeabi_d2f>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:255
						if (cot2phi < 0.0F)
    ca50:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:254
					{
						// calculate cot(2*phi) where phi is the Jacobi rotation angle
						cot2phi = 0.5F * (eigval[ic] - eigval[ir]) / (A[ir][ic]);

						// calculate tan(phi) correcting sign to ensure the smaller solution is used
						tanphi = 1.0F / (fabs(cot2phi) + sqrtf(1.0F + cot2phi * cot2phi));
    ca52:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:255
						if (cot2phi < 0.0F)
    ca54:	4650      	mov	r0, sl
    ca56:	f7f3 fef7 	bl	848 <__aeabi_fcmplt>
    ca5a:	2800      	cmp	r0, #0
    ca5c:	d000      	beq.n	ca60 <eigencompute+0x1b8>
    ca5e:	e164      	b.n	cd2a <eigencompute+0x482>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:261
						{
							tanphi = -tanphi;
						}

						// calculate the sine and cosine of the Jacobi rotation angle phi
						cosphi = 1.0F / sqrtf(1.0F + tanphi * tanphi);
    ca60:	4649      	mov	r1, r9
    ca62:	4648      	mov	r0, r9
    ca64:	f7f4 fa86 	bl	f74 <__aeabi_fmul>
    ca68:	21fe      	movs	r1, #254	; 0xfe
    ca6a:	0589      	lsls	r1, r1, #22
    ca6c:	f7f3 ff14 	bl	898 <__aeabi_fadd>
    ca70:	f005 ffcc 	bl	12a0c <sqrtf>
    ca74:	1c01      	adds	r1, r0, #0
    ca76:	20fe      	movs	r0, #254	; 0xfe
    ca78:	0580      	lsls	r0, r0, #22
    ca7a:	f7f4 f889 	bl	b90 <__aeabi_fdiv>
    ca7e:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:262
						sinphi = tanphi * cosphi;
    ca80:	1c29      	adds	r1, r5, #0
    ca82:	4648      	mov	r0, r9
    ca84:	f7f4 fa76 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:265

						// calculate tan(phi/2)
						tanhalfphi = sinphi / (1.0F + cosphi);
    ca88:	21fe      	movs	r1, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:262
							tanphi = -tanphi;
						}

						// calculate the sine and cosine of the Jacobi rotation angle phi
						cosphi = 1.0F / sqrtf(1.0F + tanphi * tanphi);
						sinphi = tanphi * cosphi;
    ca8a:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:265

						// calculate tan(phi/2)
						tanhalfphi = sinphi / (1.0F + cosphi);
    ca8c:	0589      	lsls	r1, r1, #22
    ca8e:	1c28      	adds	r0, r5, #0
    ca90:	f7f3 ff02 	bl	898 <__aeabi_fadd>
    ca94:	1c01      	adds	r1, r0, #0
    ca96:	1c20      	adds	r0, r4, #0
    ca98:	f7f4 f87a 	bl	b90 <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:268

						// set tmp = tan(phi) times current matrix element used in update of leading diagonal elements
						ftmp = tanphi * A[ir][ic];
    ca9c:	6831      	ldr	r1, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:265
						// calculate the sine and cosine of the Jacobi rotation angle phi
						cosphi = 1.0F / sqrtf(1.0F + tanphi * tanphi);
						sinphi = tanphi * cosphi;

						// calculate tan(phi/2)
						tanhalfphi = sinphi / (1.0F + cosphi);
    ca9e:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:268

						// set tmp = tan(phi) times current matrix element used in update of leading diagonal elements
						ftmp = tanphi * A[ir][ic];
    caa0:	4648      	mov	r0, r9
    caa2:	f7f4 fa67 	bl	f74 <__aeabi_fmul>
    caa6:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:272

						// apply the jacobi rotation to diagonal elements [ir][ir] and [ic][ic] stored in the eigenvalue array
						// eigval[ir] = eigval[ir] - tan(phi) *  A[ir][ic]
						eigval[ir] -= ftmp;
    caa8:	9b07      	ldr	r3, [sp, #28]
    caaa:	4649      	mov	r1, r9
    caac:	6818      	ldr	r0, [r3, #0]
    caae:	f7f4 fb93 	bl	11d8 <__aeabi_fsub>
    cab2:	9b07      	ldr	r3, [sp, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:274
						// eigval[ic] = eigval[ic] + tan(phi) * A[ir][ic]
						eigval[ic] += ftmp;
    cab4:	4649      	mov	r1, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:272
						// set tmp = tan(phi) times current matrix element used in update of leading diagonal elements
						ftmp = tanphi * A[ir][ic];

						// apply the jacobi rotation to diagonal elements [ir][ir] and [ic][ic] stored in the eigenvalue array
						// eigval[ir] = eigval[ir] - tan(phi) *  A[ir][ic]
						eigval[ir] -= ftmp;
    cab6:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:274
						// eigval[ic] = eigval[ic] + tan(phi) * A[ir][ic]
						eigval[ic] += ftmp;
    cab8:	4643      	mov	r3, r8
    caba:	6818      	ldr	r0, [r3, #0]
    cabc:	f7f3 feec 	bl	898 <__aeabi_fadd>
    cac0:	4643      	mov	r3, r8
    cac2:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:277

						// by definition, applying the jacobi rotation on element ir, ic results in 0.0
						A[ir][ic] = 0.0F;
    cac4:	2300      	movs	r3, #0
    cac6:	6033      	str	r3, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:280

						// apply the jacobi rotation to all elements of the eigenvector matrix
						for (j = 0; j < n; j++)
    cac8:	9b04      	ldr	r3, [sp, #16]
    caca:	2b00      	cmp	r3, #0
    cacc:	dd3e      	ble.n	cb4c <eigencompute+0x2a4>
    cace:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    cad0:	9903      	ldr	r1, [sp, #12]
    cad2:	1c13      	adds	r3, r2, #0
    cad4:	468c      	mov	ip, r1
    cad6:	980e      	ldr	r0, [sp, #56]	; 0x38
    cad8:	9905      	ldr	r1, [sp, #20]
    cada:	4463      	add	r3, ip
    cadc:	1c1e      	adds	r6, r3, #0
    cade:	4684      	mov	ip, r0
    cae0:	1c0b      	adds	r3, r1, #0
    cae2:	4692      	mov	sl, r2
    cae4:	4463      	add	r3, ip
    cae6:	009b      	lsls	r3, r3, #2
    cae8:	449a      	add	sl, r3
    caea:	008b      	lsls	r3, r1, #2
    caec:	425b      	negs	r3, r3
    caee:	469b      	mov	fp, r3
    caf0:	46a8      	mov	r8, r5
    caf2:	46b9      	mov	r9, r7
    caf4:	1c27      	adds	r7, r4, #0
    caf6:	465b      	mov	r3, fp
    caf8:	18f5      	adds	r5, r6, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:283 (discriminator 3)
						{
							// store eigvec[j][ir]
							ftmp = eigvec[j][ir];
    cafa:	464b      	mov	r3, r9
    cafc:	58ec      	ldr	r4, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:285 (discriminator 3)
							// eigvec[j][ir] = eigvec[j][ir] - sin(phi) * (eigvec[j][ic] + tan(phi/2) * eigvec[j][ir])
							eigvec[j][ir] = ftmp - sinphi * (eigvec[j][ic] + tanhalfphi * ftmp);
    cafe:	4640      	mov	r0, r8
    cb00:	1c21      	adds	r1, r4, #0
    cb02:	f7f4 fa37 	bl	f74 <__aeabi_fmul>
    cb06:	6831      	ldr	r1, [r6, #0]
    cb08:	f7f3 fec6 	bl	898 <__aeabi_fadd>
    cb0c:	1c39      	adds	r1, r7, #0
    cb0e:	f7f4 fa31 	bl	f74 <__aeabi_fmul>
    cb12:	1c01      	adds	r1, r0, #0
    cb14:	1c20      	adds	r0, r4, #0
    cb16:	f7f4 fb5f 	bl	11d8 <__aeabi_fsub>
    cb1a:	464b      	mov	r3, r9
    cb1c:	50e8      	str	r0, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:287 (discriminator 3)
							// eigvec[j][ic] = eigvec[j][ic] + sin(phi) * (eigvec[j][ir] - tan(phi/2) * eigvec[j][ic])
							eigvec[j][ic] = eigvec[j][ic] + sinphi * (ftmp - tanhalfphi * eigvec[j][ic]);
    cb1e:	6835      	ldr	r5, [r6, #0]
    cb20:	4641      	mov	r1, r8
    cb22:	1c28      	adds	r0, r5, #0
    cb24:	f7f4 fa26 	bl	f74 <__aeabi_fmul>
    cb28:	1c01      	adds	r1, r0, #0
    cb2a:	1c20      	adds	r0, r4, #0
    cb2c:	f7f4 fb54 	bl	11d8 <__aeabi_fsub>
    cb30:	1c39      	adds	r1, r7, #0
    cb32:	f7f4 fa1f 	bl	f74 <__aeabi_fmul>
    cb36:	1c01      	adds	r1, r0, #0
    cb38:	1c28      	adds	r0, r5, #0
    cb3a:	f7f3 fead 	bl	898 <__aeabi_fadd>
    cb3e:	6030      	str	r0, [r6, #0]
    cb40:	3628      	adds	r6, #40	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:280 (discriminator 3)

						// by definition, applying the jacobi rotation on element ir, ic results in 0.0
						A[ir][ic] = 0.0F;

						// apply the jacobi rotation to all elements of the eigenvector matrix
						for (j = 0; j < n; j++)
    cb42:	4556      	cmp	r6, sl
    cb44:	d1d7      	bne.n	caf6 <eigencompute+0x24e>
    cb46:	1c3c      	adds	r4, r7, #0
    cb48:	4645      	mov	r5, r8
    cb4a:	464f      	mov	r7, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:291
							// eigvec[j][ic] = eigvec[j][ic] + sin(phi) * (eigvec[j][ir] - tan(phi/2) * eigvec[j][ic])
							eigvec[j][ic] = eigvec[j][ic] + sinphi * (ftmp - tanhalfphi * eigvec[j][ic]);
						}

						// apply the jacobi rotation only to those elements of matrix m that can change
						for (j = 0; j <= ir - 1; j++)
    cb4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cb4e:	2b00      	cmp	r3, #0
    cb50:	dd3e      	ble.n	cbd0 <eigencompute+0x328>
    cb52:	9a02      	ldr	r2, [sp, #8]
    cb54:	9903      	ldr	r1, [sp, #12]
    cb56:	1c13      	adds	r3, r2, #0
    cb58:	468c      	mov	ip, r1
    cb5a:	9805      	ldr	r0, [sp, #20]
    cb5c:	4463      	add	r3, ip
    cb5e:	4684      	mov	ip, r0
    cb60:	4692      	mov	sl, r2
    cb62:	1c1e      	adds	r6, r3, #0
    cb64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cb66:	46a8      	mov	r8, r5
    cb68:	330a      	adds	r3, #10
    cb6a:	4463      	add	r3, ip
    cb6c:	009b      	lsls	r3, r3, #2
    cb6e:	449a      	add	sl, r3
    cb70:	0083      	lsls	r3, r0, #2
    cb72:	425b      	negs	r3, r3
    cb74:	469b      	mov	fp, r3
    cb76:	46b9      	mov	r9, r7
    cb78:	1c27      	adds	r7, r4, #0
    cb7a:	465b      	mov	r3, fp
    cb7c:	18f5      	adds	r5, r6, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:294 (discriminator 3)
						{
							// store A[j][ir]
							ftmp = A[j][ir];
    cb7e:	464b      	mov	r3, r9
    cb80:	58ec      	ldr	r4, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:296 (discriminator 3)
							// A[j][ir] = A[j][ir] - sin(phi) * (A[j][ic] + tan(phi/2) * A[j][ir])
							A[j][ir] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
    cb82:	4640      	mov	r0, r8
    cb84:	1c21      	adds	r1, r4, #0
    cb86:	f7f4 f9f5 	bl	f74 <__aeabi_fmul>
    cb8a:	6831      	ldr	r1, [r6, #0]
    cb8c:	f7f3 fe84 	bl	898 <__aeabi_fadd>
    cb90:	1c39      	adds	r1, r7, #0
    cb92:	f7f4 f9ef 	bl	f74 <__aeabi_fmul>
    cb96:	1c01      	adds	r1, r0, #0
    cb98:	1c20      	adds	r0, r4, #0
    cb9a:	f7f4 fb1d 	bl	11d8 <__aeabi_fsub>
    cb9e:	464b      	mov	r3, r9
    cba0:	50e8      	str	r0, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:298 (discriminator 3)
							// A[j][ic] = A[j][ic] + sin(phi) * (A[j][ir] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
    cba2:	6835      	ldr	r5, [r6, #0]
    cba4:	4641      	mov	r1, r8
    cba6:	1c28      	adds	r0, r5, #0
    cba8:	f7f4 f9e4 	bl	f74 <__aeabi_fmul>
    cbac:	1c01      	adds	r1, r0, #0
    cbae:	1c20      	adds	r0, r4, #0
    cbb0:	f7f4 fb12 	bl	11d8 <__aeabi_fsub>
    cbb4:	1c39      	adds	r1, r7, #0
    cbb6:	f7f4 f9dd 	bl	f74 <__aeabi_fmul>
    cbba:	1c01      	adds	r1, r0, #0
    cbbc:	1c28      	adds	r0, r5, #0
    cbbe:	f7f3 fe6b 	bl	898 <__aeabi_fadd>
    cbc2:	6030      	str	r0, [r6, #0]
    cbc4:	3628      	adds	r6, #40	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:291 (discriminator 3)
							// eigvec[j][ic] = eigvec[j][ic] + sin(phi) * (eigvec[j][ir] - tan(phi/2) * eigvec[j][ic])
							eigvec[j][ic] = eigvec[j][ic] + sinphi * (ftmp - tanhalfphi * eigvec[j][ic]);
						}

						// apply the jacobi rotation only to those elements of matrix m that can change
						for (j = 0; j <= ir - 1; j++)
    cbc6:	4556      	cmp	r6, sl
    cbc8:	d1d7      	bne.n	cb7a <eigencompute+0x2d2>
    cbca:	1c3c      	adds	r4, r7, #0
    cbcc:	4645      	mov	r5, r8
    cbce:	464f      	mov	r7, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:300
							// A[j][ir] = A[j][ir] - sin(phi) * (A[j][ic] + tan(phi/2) * A[j][ir])
							A[j][ir] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
							// A[j][ic] = A[j][ic] + sin(phi) * (A[j][ir] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
						}
						for (j = ir + 1; j <= ic - 1; j++)
    cbd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cbd2:	9a05      	ldr	r2, [sp, #20]
    cbd4:	4293      	cmp	r3, r2
    cbd6:	da3c      	bge.n	cc52 <eigencompute+0x3aa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:300 (discriminator 3)
    cbd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cbda:	1c21      	adds	r1, r4, #0
    cbdc:	b253      	sxtb	r3, r2
    cbde:	1c14      	adds	r4, r2, #0
    cbe0:	9a05      	ldr	r2, [sp, #20]
    cbe2:	46a9      	mov	r9, r5
    cbe4:	46bb      	mov	fp, r7
    cbe6:	4692      	mov	sl, r2
    cbe8:	4688      	mov	r8, r1
    cbea:	9a01      	ldr	r2, [sp, #4]
    cbec:	009e      	lsls	r6, r3, #2
    cbee:	1997      	adds	r7, r2, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:305 (discriminator 3)
						{
							// store A[ir][j]
							ftmp = A[ir][j];
							// A[ir][j] = A[ir][j] - sin(phi) * (A[j][ic] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
    cbf0:	18f6      	adds	r6, r6, r3
    cbf2:	9b03      	ldr	r3, [sp, #12]
    cbf4:	00f6      	lsls	r6, r6, #3
    cbf6:	469c      	mov	ip, r3
    cbf8:	9b02      	ldr	r3, [sp, #8]
    cbfa:	4466      	add	r6, ip
    cbfc:	469c      	mov	ip, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:303 (discriminator 3)
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
						}
						for (j = ir + 1; j <= ic - 1; j++)
						{
							// store A[ir][j]
							ftmp = A[ir][j];
    cbfe:	683d      	ldr	r5, [r7, #0]
    cc00:	4466      	add	r6, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:305 (discriminator 3)
							// A[ir][j] = A[ir][j] - sin(phi) * (A[j][ic] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
    cc02:	1c29      	adds	r1, r5, #0
    cc04:	4648      	mov	r0, r9
    cc06:	f7f4 f9b5 	bl	f74 <__aeabi_fmul>
    cc0a:	6831      	ldr	r1, [r6, #0]
    cc0c:	f7f3 fe44 	bl	898 <__aeabi_fadd>
    cc10:	4641      	mov	r1, r8
    cc12:	f7f4 f9af 	bl	f74 <__aeabi_fmul>
    cc16:	1c01      	adds	r1, r0, #0
    cc18:	1c28      	adds	r0, r5, #0
    cc1a:	f7f4 fadd 	bl	11d8 <__aeabi_fsub>
    cc1e:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:307 (discriminator 3)
							// A[j][ic] = A[j][ic] + sin(phi) * (A[ir][j] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
    cc20:	6837      	ldr	r7, [r6, #0]
    cc22:	4649      	mov	r1, r9
    cc24:	1c38      	adds	r0, r7, #0
    cc26:	f7f4 f9a5 	bl	f74 <__aeabi_fmul>
    cc2a:	1c01      	adds	r1, r0, #0
    cc2c:	1c28      	adds	r0, r5, #0
    cc2e:	f7f4 fad3 	bl	11d8 <__aeabi_fsub>
    cc32:	4641      	mov	r1, r8
    cc34:	f7f4 f99e 	bl	f74 <__aeabi_fmul>
    cc38:	1c01      	adds	r1, r0, #0
    cc3a:	1c38      	adds	r0, r7, #0
    cc3c:	f7f3 fe2c 	bl	898 <__aeabi_fadd>
    cc40:	3401      	adds	r4, #1
    cc42:	b2e4      	uxtb	r4, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:300 (discriminator 3)
							// A[j][ir] = A[j][ir] - sin(phi) * (A[j][ic] + tan(phi/2) * A[j][ir])
							A[j][ir] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
							// A[j][ic] = A[j][ic] + sin(phi) * (A[j][ir] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
						}
						for (j = ir + 1; j <= ic - 1; j++)
    cc44:	b263      	sxtb	r3, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:307 (discriminator 3)
							// store A[ir][j]
							ftmp = A[ir][j];
							// A[ir][j] = A[ir][j] - sin(phi) * (A[j][ic] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
							// A[j][ic] = A[j][ic] + sin(phi) * (A[ir][j] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
    cc46:	6030      	str	r0, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:300 (discriminator 3)
							// A[j][ir] = A[j][ir] - sin(phi) * (A[j][ic] + tan(phi/2) * A[j][ir])
							A[j][ir] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
							// A[j][ic] = A[j][ic] + sin(phi) * (A[j][ir] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
						}
						for (j = ir + 1; j <= ic - 1; j++)
    cc48:	4553      	cmp	r3, sl
    cc4a:	dbce      	blt.n	cbea <eigencompute+0x342>
    cc4c:	4644      	mov	r4, r8
    cc4e:	464d      	mov	r5, r9
    cc50:	465f      	mov	r7, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:309
							// A[ir][j] = A[ir][j] - sin(phi) * (A[j][ic] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
							// A[j][ic] = A[j][ic] + sin(phi) * (A[ir][j] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
						}
						for (j = ic + 1; j < n; j++)
    cc52:	9b06      	ldr	r3, [sp, #24]
    cc54:	9a04      	ldr	r2, [sp, #16]
    cc56:	3301      	adds	r3, #1
    cc58:	b2db      	uxtb	r3, r3
    cc5a:	9306      	str	r3, [sp, #24]
    cc5c:	b25b      	sxtb	r3, r3
    cc5e:	9305      	str	r3, [sp, #20]
    cc60:	429a      	cmp	r2, r3
    cc62:	dd48      	ble.n	ccf6 <eigencompute+0x44e>
    cc64:	9a08      	ldr	r2, [sp, #32]
    cc66:	1c1e      	adds	r6, r3, #0
    cc68:	4694      	mov	ip, r2
    cc6a:	9b03      	ldr	r3, [sp, #12]
    cc6c:	46a9      	mov	r9, r5
    cc6e:	4463      	add	r3, ip
    cc70:	00db      	lsls	r3, r3, #3
    cc72:	469b      	mov	fp, r3
    cc74:	9b06      	ldr	r3, [sp, #24]
    cc76:	46ba      	mov	sl, r7
    cc78:	4698      	mov	r8, r3
    cc7a:	1c23      	adds	r3, r4, #0
    cc7c:	4644      	mov	r4, r8
    cc7e:	4698      	mov	r8, r3
    cc80:	9b01      	ldr	r3, [sp, #4]
    cc82:	00b6      	lsls	r6, r6, #2
    cc84:	199f      	adds	r7, r3, r6
    cc86:	9b02      	ldr	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:312 (discriminator 3)
						{
							// store A[ir][j]
							ftmp = A[ir][j];
    cc88:	683d      	ldr	r5, [r7, #0]
    cc8a:	469c      	mov	ip, r3
    cc8c:	445e      	add	r6, fp
    cc8e:	4466      	add	r6, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:314 (discriminator 3)
							// A[ir][j] = A[ir][j] - sin(phi) * (A[ic][j] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[ic][j] + tanhalfphi * ftmp);
    cc90:	1c29      	adds	r1, r5, #0
    cc92:	4648      	mov	r0, r9
    cc94:	f7f4 f96e 	bl	f74 <__aeabi_fmul>
    cc98:	6831      	ldr	r1, [r6, #0]
    cc9a:	f7f3 fdfd 	bl	898 <__aeabi_fadd>
    cc9e:	4641      	mov	r1, r8
    cca0:	f7f4 f968 	bl	f74 <__aeabi_fmul>
    cca4:	1c01      	adds	r1, r0, #0
    cca6:	1c28      	adds	r0, r5, #0
    cca8:	f7f4 fa96 	bl	11d8 <__aeabi_fsub>
    ccac:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:316 (discriminator 3)
							// A[ic][j] = A[ic][j] + sin(phi) * (A[ir][j] - tan(phi/2) * A[ic][j])
							A[ic][j] = A[ic][j] + sinphi * (ftmp - tanhalfphi * A[ic][j]);
    ccae:	6837      	ldr	r7, [r6, #0]
    ccb0:	4649      	mov	r1, r9
    ccb2:	1c38      	adds	r0, r7, #0
    ccb4:	f7f4 f95e 	bl	f74 <__aeabi_fmul>
    ccb8:	1c01      	adds	r1, r0, #0
    ccba:	1c28      	adds	r0, r5, #0
    ccbc:	f7f4 fa8c 	bl	11d8 <__aeabi_fsub>
    ccc0:	4641      	mov	r1, r8
    ccc2:	f7f4 f957 	bl	f74 <__aeabi_fmul>
    ccc6:	1c01      	adds	r1, r0, #0
    ccc8:	1c38      	adds	r0, r7, #0
    ccca:	f7f3 fde5 	bl	898 <__aeabi_fadd>
    ccce:	3401      	adds	r4, #1
    ccd0:	b2e4      	uxtb	r4, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:309 (discriminator 3)
							// A[ir][j] = A[ir][j] - sin(phi) * (A[j][ic] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
							// A[j][ic] = A[j][ic] + sin(phi) * (A[ir][j] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
						}
						for (j = ic + 1; j < n; j++)
    ccd2:	9b04      	ldr	r3, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:316 (discriminator 3)
							// store A[ir][j]
							ftmp = A[ir][j];
							// A[ir][j] = A[ir][j] - sin(phi) * (A[ic][j] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[ic][j] + tanhalfphi * ftmp);
							// A[ic][j] = A[ic][j] + sin(phi) * (A[ir][j] - tan(phi/2) * A[ic][j])
							A[ic][j] = A[ic][j] + sinphi * (ftmp - tanhalfphi * A[ic][j]);
    ccd4:	6030      	str	r0, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:309 (discriminator 3)
							// A[ir][j] = A[ir][j] - sin(phi) * (A[j][ic] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
							// A[j][ic] = A[j][ic] + sin(phi) * (A[ir][j] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
						}
						for (j = ic + 1; j < n; j++)
    ccd6:	b266      	sxtb	r6, r4
    ccd8:	42b3      	cmp	r3, r6
    ccda:	dcd1      	bgt.n	cc80 <eigencompute+0x3d8>
    ccdc:	4657      	mov	r7, sl
    ccde:	9b05      	ldr	r3, [sp, #20]
    cce0:	e672      	b.n	c9c8 <eigencompute+0x120>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:245 (discriminator 2)
		{
			// loop over all rows with the exception of the last row (since only rotating above diagonal elements)
			for (ir = 0; ir < n - 1; ir++)
			{
				// loop over columns ic (where ic is always greater than ir since above diagonal)
				for (ic = ir + 1; ic < n; ic++)
    cce2:	9b06      	ldr	r3, [sp, #24]
    cce4:	9a04      	ldr	r2, [sp, #16]
    cce6:	3301      	adds	r3, #1
    cce8:	b2db      	uxtb	r3, r3
    ccea:	9306      	str	r3, [sp, #24]
    ccec:	b25b      	sxtb	r3, r3
    ccee:	9305      	str	r3, [sp, #20]
    ccf0:	429a      	cmp	r2, r3
    ccf2:	dd00      	ble.n	ccf6 <eigencompute+0x44e>
    ccf4:	e668      	b.n	c9c8 <eigencompute+0x120>
    ccf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:242

		// check if we still have work to do
		if (residue > 0.0F)
		{
			// loop over all rows with the exception of the last row (since only rotating above diagonal elements)
			for (ir = 0; ir < n - 1; ir++)
    ccf8:	9910      	ldr	r1, [sp, #64]	; 0x40
    ccfa:	b25a      	sxtb	r2, r3
    ccfc:	428a      	cmp	r2, r1
    ccfe:	da00      	bge.n	cd02 <eigencompute+0x45a>
    cd00:	e63b      	b.n	c97a <eigencompute+0xd2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:322
						}
					}   // end of test for matrix element already zero
				}   // end of loop over columns
			}   // end of loop over rows
		}  // end of test for non-zero residue
	} while ((residue > 0.0F) && (ctr++ < NITERATIONS)); // end of main loop
    cd02:	9813      	ldr	r0, [sp, #76]	; 0x4c
    cd04:	2100      	movs	r1, #0
    cd06:	f7f3 fdb3 	bl	870 <__aeabi_fcmpgt>
    cd0a:	2800      	cmp	r0, #0
    cd0c:	d006      	beq.n	cd1c <eigencompute+0x474>
    cd0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    cd10:	3b01      	subs	r3, #1
    cd12:	b2db      	uxtb	r3, r3
    cd14:	9312      	str	r3, [sp, #72]	; 0x48
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:322 (discriminator 1)
    cd16:	2b00      	cmp	r3, #0
    cd18:	d000      	beq.n	cd1c <eigencompute+0x474>
    cd1a:	e5fd      	b.n	c918 <eigencompute+0x70>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:325

	return;
}
    cd1c:	b015      	add	sp, #84	; 0x54
    cd1e:	bc3c      	pop	{r2, r3, r4, r5}
    cd20:	4690      	mov	r8, r2
    cd22:	4699      	mov	r9, r3
    cd24:	46a2      	mov	sl, r4
    cd26:	46ab      	mov	fp, r5
    cd28:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:257

						// calculate tan(phi) correcting sign to ensure the smaller solution is used
						tanphi = 1.0F / (fabs(cot2phi) + sqrtf(1.0F + cot2phi * cot2phi));
						if (cot2phi < 0.0F)
						{
							tanphi = -tanphi;
    cd2a:	2380      	movs	r3, #128	; 0x80
    cd2c:	061b      	lsls	r3, r3, #24
    cd2e:	444b      	add	r3, r9
    cd30:	4699      	mov	r9, r3
    cd32:	e695      	b.n	ca60 <eigencompute+0x1b8>
    cd34:	3b01      	subs	r3, #1
    cd36:	9310      	str	r3, [sp, #64]	; 0x40
    cd38:	e5e4      	b.n	c904 <eigencompute+0x5c>
    cd3a:	46c0      	nop			; (mov r8, r8)
    cd3c:	3ff00000 	.word	0x3ff00000

0000cd40 <fmatrixAeqInvA>:
fmatrixAeqInvA():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:330
}

// function uses Gauss-Jordan elimination to compute the inverse of matrix A in situ
// on exit, A is replaced with its inverse
void fmatrixAeqInvA(float *A[], int8 iColInd[], int8 iRowInd[], int8 iPivot[], int8 isize)
{
    cd40:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd42:	4656      	mov	r6, sl
    cd44:	464d      	mov	r5, r9
    cd46:	465f      	mov	r7, fp
    cd48:	4644      	mov	r4, r8
    cd4a:	b4f0      	push	{r4, r5, r6, r7}
    cd4c:	b08d      	sub	sp, #52	; 0x34
    cd4e:	469a      	mov	sl, r3
    cd50:	ab16      	add	r3, sp, #88	; 0x58
    cd52:	781b      	ldrb	r3, [r3, #0]
    cd54:	9003      	str	r0, [sp, #12]
    cd56:	b25b      	sxtb	r3, r3
    cd58:	9106      	str	r1, [sp, #24]
    cd5a:	9207      	str	r2, [sp, #28]
    cd5c:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:342

	// to avoid compiler warnings
	iPivotRow = iPivotCol = 0;

	// initialize the pivot array to 0
	for (j = 0; j < isize; j++)
    cd5e:	2b00      	cmp	r3, #0
    cd60:	dc00      	bgt.n	cd64 <fmatrixAeqInvA+0x24>
    cd62:	e0f8      	b.n	cf56 <fmatrixAeqInvA+0x216>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:344
	{
		iPivot[j] = 0;
    cd64:	3b01      	subs	r3, #1
    cd66:	b2dc      	uxtb	r4, r3
    cd68:	3401      	adds	r4, #1
    cd6a:	4650      	mov	r0, sl
    cd6c:	2100      	movs	r1, #0
    cd6e:	1c22      	adds	r2, r4, #0
    cd70:	930a      	str	r3, [sp, #40]	; 0x28
    cd72:	f007 fc0c 	bl	1458e <memset>
    cd76:	00a3      	lsls	r3, r4, #2
    cd78:	469b      	mov	fp, r3
    cd7a:	2300      	movs	r3, #0
    cd7c:	464f      	mov	r7, r9
    cd7e:	9309      	str	r3, [sp, #36]	; 0x24
    cd80:	9301      	str	r3, [sp, #4]
    cd82:	9300      	str	r3, [sp, #0]
    cd84:	9b03      	ldr	r3, [sp, #12]
    cd86:	9308      	str	r3, [sp, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:330 (discriminator 1)
}

// function uses Gauss-Jordan elimination to compute the inverse of matrix A in situ
// on exit, A is replaced with its inverse
void fmatrixAeqInvA(float *A[], int8 iColInd[], int8 iRowInd[], int8 iPivot[], int8 isize)
{
    cd88:	4699      	mov	r9, r3
    cd8a:	2300      	movs	r3, #0
    cd8c:	9302      	str	r3, [sp, #8]
    cd8e:	2300      	movs	r3, #0
    cd90:	4698      	mov	r8, r3
    cd92:	465b      	mov	r3, fp
    cd94:	9304      	str	r3, [sp, #16]
    cd96:	1c3b      	adds	r3, r7, #0
    cd98:	4657      	mov	r7, sl
    cd9a:	469a      	mov	sl, r3
    cd9c:	9a02      	ldr	r2, [sp, #8]
    cd9e:	b2d3      	uxtb	r3, r2
    cda0:	469b      	mov	fp, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:356
		largest = 0.0F;
		// loop over candidate rows j
		for (j = 0; j < isize; j++)
		{
			// check if row j has been previously pivoted
			if (iPivot[j] != 1)
    cda2:	56bb      	ldrsb	r3, [r7, r2]
    cda4:	2b01      	cmp	r3, #1
    cda6:	d03e      	beq.n	ce26 <fmatrixAeqInvA+0xe6>
    cda8:	2400      	movs	r4, #0
    cdaa:	e013      	b.n	cdd4 <fmatrixAeqInvA+0x94>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:365
				{
					// check if column k has previously been pivoted
					if (iPivot[k] == 0)
					{
						// check if the pivot element is the largest found so far
						if (fabs(A[j][k]) >= largest)
    cdac:	464a      	mov	r2, r9
    cdae:	6812      	ldr	r2, [r2, #0]
    cdb0:	00a3      	lsls	r3, r4, #2
    cdb2:	589d      	ldr	r5, [r3, r2]
    cdb4:	4641      	mov	r1, r8
    cdb6:	006d      	lsls	r5, r5, #1
    cdb8:	086d      	lsrs	r5, r5, #1
    cdba:	1c28      	adds	r0, r5, #0
    cdbc:	f7f3 fd62 	bl	884 <__aeabi_fcmpge>
    cdc0:	2800      	cmp	r0, #0
    cdc2:	d003      	beq.n	cdcc <fmatrixAeqInvA+0x8c>
    cdc4:	465b      	mov	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:370
						{
							// and store this location as the current best candidate for pivoting
							iPivotRow = j;
							iPivotCol = k;
							largest = (float) fabs(A[iPivotRow][iPivotCol]);
    cdc6:	46a8      	mov	r8, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:365
				{
					// check if column k has previously been pivoted
					if (iPivot[k] == 0)
					{
						// check if the pivot element is the largest found so far
						if (fabs(A[j][k]) >= largest)
    cdc8:	9601      	str	r6, [sp, #4]
    cdca:	9300      	str	r3, [sp, #0]
    cdcc:	3401      	adds	r4, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:359 (discriminator 2)
		{
			// check if row j has been previously pivoted
			if (iPivot[j] != 1)
			{
				// loop over candidate columns k
				for (k = 0; k < isize; k++)
    cdce:	b263      	sxtb	r3, r4
    cdd0:	459a      	cmp	sl, r3
    cdd2:	dd28      	ble.n	ce26 <fmatrixAeqInvA+0xe6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:362
				{
					// check if column k has previously been pivoted
					if (iPivot[k] == 0)
    cdd4:	5d3b      	ldrb	r3, [r7, r4]
    cdd6:	b2e6      	uxtb	r6, r4
    cdd8:	2b00      	cmp	r3, #0
    cdda:	d0e7      	beq.n	cdac <fmatrixAeqInvA+0x6c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:373
							iPivotRow = j;
							iPivotCol = k;
							largest = (float) fabs(A[iPivotRow][iPivotCol]);
						}
					}
					else if (iPivot[k] > 1)
    cddc:	b25b      	sxtb	r3, r3
    cdde:	2b01      	cmp	r3, #1
    cde0:	ddf4      	ble.n	cdcc <fmatrixAeqInvA+0x8c>
fmatrixAeqI():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:74
		pAij = A[i];
		for (j = 0; j < rc; j++)
		{
			*(pAij++) = 0.0F;
		}
		A[i][i] = 1.0F;
    cde2:	22fe      	movs	r2, #254	; 0xfe
    cde4:	0592      	lsls	r2, r2, #22
    cde6:	4694      	mov	ip, r2
    cde8:	9a03      	ldr	r2, [sp, #12]
fmatrixAeqInvA():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:376
						}
					}
					else if (iPivot[k] > 1)
					{
						// zero determinant situation: exit with identity matrix
						fmatrixAeqI(A, isize);
    cdea:	2600      	movs	r6, #0
    cdec:	2300      	movs	r3, #0
    cdee:	4650      	mov	r0, sl
fmatrixAeqI():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:72
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < rc; j++)
		{
			*(pAij++) = 0.0F;
    cdf0:	2400      	movs	r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:74
		}
		A[i][i] = 1.0F;
    cdf2:	4690      	mov	r8, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:69
	int8 i, j;		// loop counters

	for (i = 0; i < rc; i++)
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
    cdf4:	4642      	mov	r2, r8
    cdf6:	009b      	lsls	r3, r3, #2
    cdf8:	58d7      	ldr	r7, [r2, r3]
    cdfa:	2200      	movs	r2, #0
    cdfc:	1c39      	adds	r1, r7, #0
    cdfe:	3201      	adds	r2, #1
    ce00:	b2d2      	uxtb	r2, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:70
		for (j = 0; j < rc; j++)
    ce02:	b255      	sxtb	r5, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:72
		{
			*(pAij++) = 0.0F;
    ce04:	c110      	stmia	r1!, {r4}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:70

	for (i = 0; i < rc; i++)
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < rc; j++)
    ce06:	4285      	cmp	r5, r0
    ce08:	dbf9      	blt.n	cdfe <fmatrixAeqInvA+0xbe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:74
		{
			*(pAij++) = 0.0F;
		}
		A[i][i] = 1.0F;
    ce0a:	4662      	mov	r2, ip
    ce0c:	3601      	adds	r6, #1
    ce0e:	b2f6      	uxtb	r6, r6
    ce10:	50fa      	str	r2, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:66
	// rc = rows and columns in A

	float *pAij;	// pointer to A[i][j]
	int8 i, j;		// loop counters

	for (i = 0; i < rc; i++)
    ce12:	b273      	sxtb	r3, r6
    ce14:	4283      	cmp	r3, r0
    ce16:	dbed      	blt.n	cdf4 <fmatrixAeqInvA+0xb4>
fmatrixAeqInvA():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:459
			}
		}
	}

	return;
}
    ce18:	b00d      	add	sp, #52	; 0x34
    ce1a:	bc3c      	pop	{r2, r3, r4, r5}
    ce1c:	4690      	mov	r8, r2
    ce1e:	4699      	mov	r9, r3
    ce20:	46a2      	mov	sl, r4
    ce22:	46ab      	mov	fp, r5
    ce24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ce26:	2204      	movs	r2, #4
    ce28:	4694      	mov	ip, r2
    ce2a:	9b02      	ldr	r3, [sp, #8]
    ce2c:	44e1      	add	r9, ip
    ce2e:	3301      	adds	r3, #1
    ce30:	9302      	str	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:353 (discriminator 2)
	for (i = 0; i < isize; i++)
	{
		// zero the largest element found for pivoting
		largest = 0.0F;
		// loop over candidate rows j
		for (j = 0; j < isize; j++)
    ce32:	b25b      	sxtb	r3, r3
    ce34:	459a      	cmp	sl, r3
    ce36:	dcb1      	bgt.n	cd9c <fmatrixAeqInvA+0x5c>
    ce38:	9b04      	ldr	r3, [sp, #16]
    ce3a:	469b      	mov	fp, r3
    ce3c:	4653      	mov	r3, sl
    ce3e:	46ba      	mov	sl, r7
    ce40:	1c1f      	adds	r7, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:383
					}
				}
			}
		}
		// increment the entry in iPivot to denote it has been selected for pivoting
		iPivot[iPivotCol]++;
    ce42:	466b      	mov	r3, sp
    ce44:	791b      	ldrb	r3, [r3, #4]
    ce46:	b25b      	sxtb	r3, r3
    ce48:	1c19      	adds	r1, r3, #0
    ce4a:	9305      	str	r3, [sp, #20]
    ce4c:	4453      	add	r3, sl
    ce4e:	1c1a      	adds	r2, r3, #0
    ce50:	781b      	ldrb	r3, [r3, #0]
    ce52:	3301      	adds	r3, #1
    ce54:	7013      	strb	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:386

		// check the pivot rows iPivotRow and iPivotCol are not the same before swapping
		if (iPivotRow != iPivotCol)
    ce56:	466b      	mov	r3, sp
    ce58:	781b      	ldrb	r3, [r3, #0]
    ce5a:	b25b      	sxtb	r3, r3
    ce5c:	4299      	cmp	r1, r3
    ce5e:	d100      	bne.n	ce62 <fmatrixAeqInvA+0x122>
    ce60:	e0ab      	b.n	cfba <fmatrixAeqInvA+0x27a>
    ce62:	9a03      	ldr	r2, [sp, #12]
    ce64:	009b      	lsls	r3, r3, #2
    ce66:	5899      	ldr	r1, [r3, r2]
    ce68:	9b05      	ldr	r3, [sp, #20]
    ce6a:	465d      	mov	r5, fp
    ce6c:	009b      	lsls	r3, r3, #2
    ce6e:	469c      	mov	ip, r3
    ce70:	9304      	str	r3, [sp, #16]
    ce72:	2300      	movs	r3, #0
    ce74:	4462      	add	r2, ip
    ce76:	1c14      	adds	r4, r2, #0
    ce78:	6812      	ldr	r2, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:392 (discriminator 3)
		{
			// loop over columns l
			for (l = 0; l < isize; l++)
			{
				// and swap all elements of rows iPivotRow and iPivotCol
				ftmp = A[iPivotRow][l];
    ce7a:	58c8      	ldr	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:393 (discriminator 3)
				A[iPivotRow][l] = A[iPivotCol][l];
    ce7c:	58d6      	ldr	r6, [r2, r3]
    ce7e:	50ce      	str	r6, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:394 (discriminator 3)
				A[iPivotCol][l] = ftmp;
    ce80:	50d0      	str	r0, [r2, r3]
    ce82:	3304      	adds	r3, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:389 (discriminator 3)

		// check the pivot rows iPivotRow and iPivotCol are not the same before swapping
		if (iPivotRow != iPivotCol)
		{
			// loop over columns l
			for (l = 0; l < isize; l++)
    ce84:	42ab      	cmp	r3, r5
    ce86:	d1f8      	bne.n	ce7a <fmatrixAeqInvA+0x13a>
    ce88:	46ab      	mov	fp, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:399
				A[iPivotCol][l] = ftmp;
			}
		}

		// record that on the i-th iteration rows iPivotRow and iPivotCol were swapped
		iRowInd[i] = iPivotRow;
    ce8a:	4669      	mov	r1, sp
    ce8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ce8e:	9a07      	ldr	r2, [sp, #28]
    ce90:	7809      	ldrb	r1, [r1, #0]
    ce92:	54d1      	strb	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:400
		iColInd[i] = iPivotCol;
    ce94:	4669      	mov	r1, sp
    ce96:	9a06      	ldr	r2, [sp, #24]
    ce98:	7909      	ldrb	r1, [r1, #4]
    ce9a:	54d1      	strb	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:403

		// check for zero on-diagonal element (singular matrix) and return with identity matrix if detected
		if (A[iPivotCol][iPivotCol] == 0.0F)
    ce9c:	6823      	ldr	r3, [r4, #0]
    ce9e:	2100      	movs	r1, #0
    cea0:	4698      	mov	r8, r3
    cea2:	9b04      	ldr	r3, [sp, #16]
    cea4:	4443      	add	r3, r8
    cea6:	681c      	ldr	r4, [r3, #0]
    cea8:	1c1d      	adds	r5, r3, #0
    ceaa:	1c20      	adds	r0, r4, #0
    ceac:	f7f3 fcc6 	bl	83c <__aeabi_fcmpeq>
    ceb0:	2800      	cmp	r0, #0
    ceb2:	d000      	beq.n	ceb6 <fmatrixAeqInvA+0x176>
    ceb4:	e089      	b.n	cfca <fmatrixAeqInvA+0x28a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:411
			fmatrixAeqI(A, isize);
			return;
		}

		// calculate the reciprocal of the pivot element knowing it's non-zero
		recippiv = 1.0F / A[iPivotCol][iPivotCol];
    ceb6:	20fe      	movs	r0, #254	; 0xfe
    ceb8:	1c21      	adds	r1, r4, #0
    ceba:	0580      	lsls	r0, r0, #22
    cebc:	f7f3 fe68 	bl	b90 <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:413
		// by definition, the diagonal element normalizes to 1
		A[iPivotCol][iPivotCol] = 1.0F;
    cec0:	23fe      	movs	r3, #254	; 0xfe
    cec2:	059b      	lsls	r3, r3, #22
    cec4:	602b      	str	r3, [r5, #0]
    cec6:	4645      	mov	r5, r8
    cec8:	4644      	mov	r4, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:411
			fmatrixAeqI(A, isize);
			return;
		}

		// calculate the reciprocal of the pivot element knowing it's non-zero
		recippiv = 1.0F / A[iPivotCol][iPivotCol];
    ceca:	1c06      	adds	r6, r0, #0
    cecc:	445d      	add	r5, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:418 (discriminator 3)
		A[iPivotCol][iPivotCol] = 1.0F;
		// multiply all of row iPivotCol by the reciprocal of the pivot element including the diagonal element
		// the diagonal element A[iPivotCol][iPivotCol] now has value equal to the reciprocal of its previous value
		for (l = 0; l < isize; l++)
		{
			A[iPivotCol][l] *= recippiv;
    cece:	6820      	ldr	r0, [r4, #0]
    ced0:	1c31      	adds	r1, r6, #0
    ced2:	f7f4 f84f 	bl	f74 <__aeabi_fmul>
    ced6:	c401      	stmia	r4!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:416 (discriminator 3)
		recippiv = 1.0F / A[iPivotCol][iPivotCol];
		// by definition, the diagonal element normalizes to 1
		A[iPivotCol][iPivotCol] = 1.0F;
		// multiply all of row iPivotCol by the reciprocal of the pivot element including the diagonal element
		// the diagonal element A[iPivotCol][iPivotCol] now has value equal to the reciprocal of its previous value
		for (l = 0; l < isize; l++)
    ced8:	42ac      	cmp	r4, r5
    ceda:	d1f8      	bne.n	cece <fmatrixAeqInvA+0x18e>
    cedc:	4652      	mov	r2, sl
    cede:	2300      	movs	r3, #0
    cee0:	920b      	str	r2, [sp, #44]	; 0x2c
    cee2:	9a08      	ldr	r2, [sp, #32]
    cee4:	46ba      	mov	sl, r7
    cee6:	4699      	mov	r9, r3
    cee8:	4647      	mov	r7, r8
    ceea:	4690      	mov	r8, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:423
			A[iPivotCol][l] *= recippiv;
		}
		// loop over all rows m of A
		for (m = 0; m < isize; m++)
		{
			if (m != iPivotCol)
    ceec:	9a05      	ldr	r2, [sp, #20]
    ceee:	4293      	cmp	r3, r2
    cef0:	d017      	beq.n	cf22 <fmatrixAeqInvA+0x1e2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:426
			{
				// scaling factor for this row m is in column iPivotCol
				scaling = A[m][iPivotCol];
    cef2:	4643      	mov	r3, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:428
				// zero this element
				A[m][iPivotCol] = 0.0F;
    cef4:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:426
		for (m = 0; m < isize; m++)
		{
			if (m != iPivotCol)
			{
				// scaling factor for this row m is in column iPivotCol
				scaling = A[m][iPivotCol];
    cef6:	681d      	ldr	r5, [r3, #0]
    cef8:	9b04      	ldr	r3, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:428
				// zero this element
				A[m][iPivotCol] = 0.0F;
    cefa:	2400      	movs	r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:426
		for (m = 0; m < isize; m++)
		{
			if (m != iPivotCol)
			{
				// scaling factor for this row m is in column iPivotCol
				scaling = A[m][iPivotCol];
    cefc:	18eb      	adds	r3, r5, r3
    cefe:	681e      	ldr	r6, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:428
				// zero this element
				A[m][iPivotCol] = 0.0F;
    cf00:	601a      	str	r2, [r3, #0]
    cf02:	1c33      	adds	r3, r6, #0
    cf04:	465e      	mov	r6, fp
    cf06:	469b      	mov	fp, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:432 (discriminator 3)
				// loop over all columns l of A and perform elimination
				for (l = 0; l < isize; l++)
				{
					A[m][l] -= A[iPivotCol][l] * scaling;
    cf08:	5939      	ldr	r1, [r7, r4]
    cf0a:	4658      	mov	r0, fp
    cf0c:	f7f4 f832 	bl	f74 <__aeabi_fmul>
    cf10:	1c01      	adds	r1, r0, #0
    cf12:	5928      	ldr	r0, [r5, r4]
    cf14:	f7f4 f960 	bl	11d8 <__aeabi_fsub>
    cf18:	5128      	str	r0, [r5, r4]
    cf1a:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:430 (discriminator 3)
				// scaling factor for this row m is in column iPivotCol
				scaling = A[m][iPivotCol];
				// zero this element
				A[m][iPivotCol] = 0.0F;
				// loop over all columns l of A and perform elimination
				for (l = 0; l < isize; l++)
    cf1c:	42a6      	cmp	r6, r4
    cf1e:	d1f3      	bne.n	cf08 <fmatrixAeqInvA+0x1c8>
    cf20:	46b3      	mov	fp, r6
    cf22:	464b      	mov	r3, r9
    cf24:	3301      	adds	r3, #1
    cf26:	b2db      	uxtb	r3, r3
    cf28:	4699      	mov	r9, r3
    cf2a:	2304      	movs	r3, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:421
		for (l = 0; l < isize; l++)
		{
			A[iPivotCol][l] *= recippiv;
		}
		// loop over all rows m of A
		for (m = 0; m < isize; m++)
    cf2c:	466a      	mov	r2, sp
    cf2e:	469c      	mov	ip, r3
    cf30:	464b      	mov	r3, r9
    cf32:	7213      	strb	r3, [r2, #8]
    cf34:	7a13      	ldrb	r3, [r2, #8]
    cf36:	44e0      	add	r8, ip
    cf38:	b25b      	sxtb	r3, r3
    cf3a:	459a      	cmp	sl, r3
    cf3c:	d1d6      	bne.n	ceec <fmatrixAeqInvA+0x1ac>
    cf3e:	4657      	mov	r7, sl
    cf40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf42:	469a      	mov	sl, r3
    cf44:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cf46:	3301      	adds	r3, #1
    cf48:	9309      	str	r3, [sp, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:348
	{
		iPivot[j] = 0;
	}

	// main loop i over the dimensions of the square matrix A
	for (i = 0; i < isize; i++)
    cf4a:	b25b      	sxtb	r3, r3
    cf4c:	429f      	cmp	r7, r3
    cf4e:	dd00      	ble.n	cf52 <fmatrixAeqInvA+0x212>
    cf50:	e718      	b.n	cd84 <fmatrixAeqInvA+0x44>
    cf52:	46b9      	mov	r9, r7
    cf54:	e001      	b.n	cf5a <fmatrixAeqInvA+0x21a>
    cf56:	3b01      	subs	r3, #1
    cf58:	930a      	str	r3, [sp, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:439
			}
		}
	} // end of loop i over the matrix dimensions

	// finally, loop in inverse order to apply the missing column swaps
	for (l = isize - 1; l >= 0; l--)
    cf5a:	2228      	movs	r2, #40	; 0x28
    cf5c:	466b      	mov	r3, sp
    cf5e:	189b      	adds	r3, r3, r2
    cf60:	781b      	ldrb	r3, [r3, #0]
    cf62:	b2df      	uxtb	r7, r3
    cf64:	b27a      	sxtb	r2, r7
    cf66:	2a00      	cmp	r2, #0
    cf68:	da00      	bge.n	cf6c <fmatrixAeqInvA+0x22c>
    cf6a:	e755      	b.n	ce18 <fmatrixAeqInvA+0xd8>
    cf6c:	1c58      	adds	r0, r3, #1
    cf6e:	9b03      	ldr	r3, [sp, #12]
    cf70:	0080      	lsls	r0, r0, #2
    cf72:	469c      	mov	ip, r3
    cf74:	4460      	add	r0, ip
    cf76:	46bc      	mov	ip, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:446
		// set i and j to the two columns to be swapped
		i = iRowInd[l];
		j = iColInd[l];

		// check that the two columns i and j to be swapped are not the same
		if (i != j)
    cf78:	9b07      	ldr	r3, [sp, #28]
    cf7a:	569e      	ldrsb	r6, [r3, r2]
    cf7c:	9b06      	ldr	r3, [sp, #24]
    cf7e:	569d      	ldrsb	r5, [r3, r2]
    cf80:	42ae      	cmp	r6, r5
    cf82:	d00e      	beq.n	cfa2 <fmatrixAeqInvA+0x262>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:449 (discriminator 1)
		{
			// loop over all rows k to swap columns i and j of A
			for (k = 0; k < isize; k++)
    cf84:	464b      	mov	r3, r9
    cf86:	2b00      	cmp	r3, #0
    cf88:	dd0b      	ble.n	cfa2 <fmatrixAeqInvA+0x262>
    cf8a:	9a03      	ldr	r2, [sp, #12]
    cf8c:	00b6      	lsls	r6, r6, #2
    cf8e:	00ad      	lsls	r5, r5, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:451 (discriminator 3)
			{
				ftmp = A[k][i];
    cf90:	ca08      	ldmia	r2!, {r3}
    cf92:	1999      	adds	r1, r3, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:452 (discriminator 3)
				A[k][i] = A[k][j];
    cf94:	195b      	adds	r3, r3, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:451 (discriminator 3)
		if (i != j)
		{
			// loop over all rows k to swap columns i and j of A
			for (k = 0; k < isize; k++)
			{
				ftmp = A[k][i];
    cf96:	680c      	ldr	r4, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:452 (discriminator 3)
				A[k][i] = A[k][j];
    cf98:	681f      	ldr	r7, [r3, #0]
    cf9a:	600f      	str	r7, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:453 (discriminator 3)
				A[k][j] = ftmp;
    cf9c:	601c      	str	r4, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:449 (discriminator 3)

		// check that the two columns i and j to be swapped are not the same
		if (i != j)
		{
			// loop over all rows k to swap columns i and j of A
			for (k = 0; k < isize; k++)
    cf9e:	4282      	cmp	r2, r0
    cfa0:	d1f6      	bne.n	cf90 <fmatrixAeqInvA+0x250>
    cfa2:	4667      	mov	r7, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:439
			}
		}
	} // end of loop i over the matrix dimensions

	// finally, loop in inverse order to apply the missing column swaps
	for (l = isize - 1; l >= 0; l--)
    cfa4:	466a      	mov	r2, sp
    cfa6:	3f01      	subs	r7, #1
    cfa8:	b2fb      	uxtb	r3, r7
    cfaa:	7013      	strb	r3, [r2, #0]
    cfac:	469c      	mov	ip, r3
    cfae:	2200      	movs	r2, #0
    cfb0:	466b      	mov	r3, sp
    cfb2:	569a      	ldrsb	r2, [r3, r2]
    cfb4:	1c53      	adds	r3, r2, #1
    cfb6:	d1df      	bne.n	cf78 <fmatrixAeqInvA+0x238>
    cfb8:	e72e      	b.n	ce18 <fmatrixAeqInvA+0xd8>
    cfba:	9b05      	ldr	r3, [sp, #20]
    cfbc:	9a03      	ldr	r2, [sp, #12]
    cfbe:	009b      	lsls	r3, r3, #2
    cfc0:	469c      	mov	ip, r3
    cfc2:	4462      	add	r2, ip
    cfc4:	9304      	str	r3, [sp, #16]
    cfc6:	1c14      	adds	r4, r2, #0
    cfc8:	e75f      	b.n	ce8a <fmatrixAeqInvA+0x14a>
fmatrixAeqI():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:74
		pAij = A[i];
		for (j = 0; j < rc; j++)
		{
			*(pAij++) = 0.0F;
		}
		A[i][i] = 1.0F;
    cfca:	22fe      	movs	r2, #254	; 0xfe
    cfcc:	0592      	lsls	r2, r2, #22
fmatrixAeqInvA():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:406

		// check for zero on-diagonal element (singular matrix) and return with identity matrix if detected
		if (A[iPivotCol][iPivotCol] == 0.0F)
		{
			// zero determinant situation: exit with identity matrix
			fmatrixAeqI(A, isize);
    cfce:	2600      	movs	r6, #0
    cfd0:	2300      	movs	r3, #0
    cfd2:	1c38      	adds	r0, r7, #0
fmatrixAeqI():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:72
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < rc; j++)
		{
			*(pAij++) = 0.0F;
    cfd4:	2500      	movs	r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:74
		}
		A[i][i] = 1.0F;
    cfd6:	4694      	mov	ip, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:69
	int8 i, j;		// loop counters

	for (i = 0; i < rc; i++)
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
    cfd8:	009c      	lsls	r4, r3, #2
    cfda:	9b03      	ldr	r3, [sp, #12]
    cfdc:	591f      	ldr	r7, [r3, r4]
    cfde:	2300      	movs	r3, #0
    cfe0:	1c3a      	adds	r2, r7, #0
    cfe2:	3301      	adds	r3, #1
    cfe4:	b2db      	uxtb	r3, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:70
		for (j = 0; j < rc; j++)
    cfe6:	b259      	sxtb	r1, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:72
		{
			*(pAij++) = 0.0F;
    cfe8:	c220      	stmia	r2!, {r5}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:70

	for (i = 0; i < rc; i++)
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < rc; j++)
    cfea:	4281      	cmp	r1, r0
    cfec:	dbf9      	blt.n	cfe2 <fmatrixAeqInvA+0x2a2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:74
		{
			*(pAij++) = 0.0F;
		}
		A[i][i] = 1.0F;
    cfee:	4663      	mov	r3, ip
    cff0:	3601      	adds	r6, #1
    cff2:	b2f6      	uxtb	r6, r6
    cff4:	513b      	str	r3, [r7, r4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:66
	// rc = rows and columns in A

	float *pAij;	// pointer to A[i][j]
	int8 i, j;		// loop counters

	for (i = 0; i < rc; i++)
    cff6:	b273      	sxtb	r3, r6
    cff8:	4283      	cmp	r3, r0
    cffa:	dbed      	blt.n	cfd8 <fmatrixAeqInvA+0x298>
    cffc:	e70c      	b.n	ce18 <fmatrixAeqInvA+0xd8>
fmatrixAeqInvA():
    cffe:	46c0      	nop			; (mov r8, r8)

0000d000 <Main_task>:
Main_task():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:55
struct ProjectGlobals globals;
struct MQXLiteGlobals mqxglobals;

// Main task
void Main_task(uint32_t task_init_data)
{
    d000:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:57
	// switch the red LED on (line low sets LED on)
	LED_RED_ClrVal(NULL);
    d002:	2000      	movs	r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:55
struct ProjectGlobals globals;
struct MQXLiteGlobals mqxglobals;

// Main task
void Main_task(uint32_t task_init_data)
{
    d004:	b082      	sub	sp, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:57
	// switch the red LED on (line low sets LED on)
	LED_RED_ClrVal(NULL);
    d006:	f004 fc9d 	bl	11944 <LED_RED_ClrVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:58
	LED_GREEN_SetVal(NULL);
    d00a:	2000      	movs	r0, #0
    d00c:	f004 fc6c 	bl	118e8 <LED_GREEN_SetVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:59
	LED_BLUE_SetVal(NULL);
    d010:	2000      	movs	r0, #0
    d012:	f004 fc41 	bl	11898 <LED_BLUE_SetVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:62

	// create the sensor sampling event (typically 200Hz)
	_lwevent_create(&(mqxglobals.SamplingEventStruct), LWEVENT_AUTO_CLEAR);
    d016:	4c26      	ldr	r4, [pc, #152]	; (d0b0 <Main_task+0xb0>)
    d018:	2101      	movs	r1, #1
    d01a:	1c20      	adds	r0, r4, #0
    d01c:	f003 f8a8 	bl	10170 <_lwevent_create>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:64
	// create the Kalman filter sensor fusion event (typically 25Hz)
	_lwevent_create(&(mqxglobals.RunKFEventStruct), LWEVENT_AUTO_CLEAR);
    d020:	1c20      	adds	r0, r4, #0
    d022:	2101      	movs	r1, #1
    d024:	3024      	adds	r0, #36	; 0x24
    d026:	f003 f8a3 	bl	10170 <_lwevent_create>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:66
	// create the magnetic calibration event (typically once per minute)
	_lwevent_create(&(mqxglobals.MagCalEventStruct), LWEVENT_AUTO_CLEAR);
    d02a:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:69

	// create the sensor read task (controlled by sensor sampling event SamplingEventStruct)	
	_task_create_at(0, RDSENSDATA_TASK, 0, RdSensData_task_stack, RDSENSDATA_TASK_STACK_SIZE);
    d02c:	4d21      	ldr	r5, [pc, #132]	; (d0b4 <Main_task+0xb4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:66
	// create the sensor sampling event (typically 200Hz)
	_lwevent_create(&(mqxglobals.SamplingEventStruct), LWEVENT_AUTO_CLEAR);
	// create the Kalman filter sensor fusion event (typically 25Hz)
	_lwevent_create(&(mqxglobals.RunKFEventStruct), LWEVENT_AUTO_CLEAR);
	// create the magnetic calibration event (typically once per minute)
	_lwevent_create(&(mqxglobals.MagCalEventStruct), LWEVENT_AUTO_CLEAR);
    d02e:	2101      	movs	r1, #1
    d030:	3048      	adds	r0, #72	; 0x48
    d032:	f003 f89d 	bl	10170 <_lwevent_create>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:69

	// create the sensor read task (controlled by sensor sampling event SamplingEventStruct)	
	_task_create_at(0, RDSENSDATA_TASK, 0, RdSensData_task_stack, RDSENSDATA_TASK_STACK_SIZE);
    d036:	9500      	str	r5, [sp, #0]
    d038:	2102      	movs	r1, #2
    d03a:	2200      	movs	r2, #0
    d03c:	4b1e      	ldr	r3, [pc, #120]	; (d0b8 <Main_task+0xb8>)
    d03e:	2000      	movs	r0, #0
    d040:	f003 fea2 	bl	10d88 <_task_create_at>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:71
	// create the sensor fusion task (controlled by sensor fusion event RunKFEventStruct)	
	_task_create_at(0, FUSION_TASK, 0, Fusion_task_stack, FUSION_TASK_STACK_SIZE);
    d044:	9500      	str	r5, [sp, #0]
    d046:	2103      	movs	r1, #3
    d048:	2200      	movs	r2, #0
    d04a:	4b1c      	ldr	r3, [pc, #112]	; (d0bc <Main_task+0xbc>)
    d04c:	2000      	movs	r0, #0
    d04e:	f003 fe9b 	bl	10d88 <_task_create_at>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:73
	// create the magnetic calibration task (controlled by MagCalEventStruct)	
	_task_create_at(0, MAGCAL_TASK, 0, MagCal_task_stack, MAGCAL_TASK_STACK_SIZE);
    d052:	23e3      	movs	r3, #227	; 0xe3
    d054:	009b      	lsls	r3, r3, #2
    d056:	9300      	str	r3, [sp, #0]
    d058:	2200      	movs	r2, #0
    d05a:	4b19      	ldr	r3, [pc, #100]	; (d0c0 <Main_task+0xc0>)
    d05c:	2104      	movs	r1, #4
    d05e:	2000      	movs	r0, #0
    d060:	f003 fe92 	bl	10d88 <_task_create_at>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:78
	// and this main task uses about 512 bytes stack for a grand total of 3K task stack space

	// set the sensor sampling frequency (typically 200Hz)
	// this is set to 200Hz by default in PE but we want to set it using value in proj_config.h 
	FTM_SetPeriodTicks(FTM_DeviceData, (uint16) (FTM_INCLK_HZ / SENSORFS));
    d064:	4e17      	ldr	r6, [pc, #92]	; (d0c4 <Main_task+0xc4>)
    d066:	4d18      	ldr	r5, [pc, #96]	; (d0c8 <Main_task+0xc8>)
    d068:	1c31      	adds	r1, r6, #0
    d06a:	6928      	ldr	r0, [r5, #16]
    d06c:	f004 f9c0 	bl	113f0 <FTM_SetPeriodTicks>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:81
	
	// initialize globals
	mqxglobals.FTMReload = (uint16)(FTM_INCLK_HZ / SENSORFS);
    d070:	236c      	movs	r3, #108	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:82
	mqxglobals.FTMTimestamp = 0;
    d072:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:84
	globals.iPacketNumber = 0;
	globals.AngularVelocityPacketOn = true;
    d074:	2101      	movs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:81
	// set the sensor sampling frequency (typically 200Hz)
	// this is set to 200Hz by default in PE but we want to set it using value in proj_config.h 
	FTM_SetPeriodTicks(FTM_DeviceData, (uint16) (FTM_INCLK_HZ / SENSORFS));
	
	// initialize globals
	mqxglobals.FTMReload = (uint16)(FTM_INCLK_HZ / SENSORFS);
    d076:	52e6      	strh	r6, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:83
	mqxglobals.FTMTimestamp = 0;
	globals.iPacketNumber = 0;
    d078:	4b14      	ldr	r3, [pc, #80]	; (d0cc <Main_task+0xcc>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:82
	// this is set to 200Hz by default in PE but we want to set it using value in proj_config.h 
	FTM_SetPeriodTicks(FTM_DeviceData, (uint16) (FTM_INCLK_HZ / SENSORFS));
	
	// initialize globals
	mqxglobals.FTMReload = (uint16)(FTM_INCLK_HZ / SENSORFS);
	mqxglobals.FTMTimestamp = 0;
    d07a:	6722      	str	r2, [r4, #112]	; 0x70
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:83
	globals.iPacketNumber = 0;
    d07c:	721a      	strb	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:84
	globals.AngularVelocityPacketOn = true;
    d07e:	7019      	strb	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:85
	globals.DebugPacketOn = true;
    d080:	7059      	strb	r1, [r3, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:86
	globals.RPCPacketOn = true;
    d082:	7099      	strb	r1, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:87
	globals.AltPacketOn = true;
    d084:	70d9      	strb	r1, [r3, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:88
	globals.iMPL3115Found = false;
    d086:	725a      	strb	r2, [r3, #9]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:89
	globals.MagneticPacketID = 0;
    d088:	80da      	strh	r2, [r3, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:92

	// initialize the BlueRadios Bluetooth module and other user tasks
	UserStartup();
    d08a:	f002 fc47 	bl	f91c <UserStartup>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:96
	
	// initialize the incoming command buffer to all '~' = 0x7E and trigger a callback 
	// when any single command character is received into the UART buffer
	iCommand[0] = iCommand[1] = iCommand[2] = iCommand[3] = '~';
    d08e:	227e      	movs	r2, #126	; 0x7e
    d090:	4b0f      	ldr	r3, [pc, #60]	; (d0d0 <Main_task+0xd0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:97
	UART_ReceiveBlock(UART_DeviceData, sUARTInputBuf, 1);
    d092:	4910      	ldr	r1, [pc, #64]	; (d0d4 <Main_task+0xd4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:96
	// initialize the BlueRadios Bluetooth module and other user tasks
	UserStartup();
	
	// initialize the incoming command buffer to all '~' = 0x7E and trigger a callback 
	// when any single command character is received into the UART buffer
	iCommand[0] = iCommand[1] = iCommand[2] = iCommand[3] = '~';
    d094:	70da      	strb	r2, [r3, #3]
    d096:	709a      	strb	r2, [r3, #2]
    d098:	705a      	strb	r2, [r3, #1]
    d09a:	701a      	strb	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:97
	UART_ReceiveBlock(UART_DeviceData, sUARTInputBuf, 1);
    d09c:	6968      	ldr	r0, [r5, #20]
    d09e:	3a7d      	subs	r2, #125	; 0x7d
    d0a0:	f004 feea 	bl	11e78 <UART_ReceiveBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:100

	// destroy this task (main task) now that the three new tasks are created
	_task_destroy(MQX_NULL_TASK_ID);
    d0a4:	2000      	movs	r0, #0
    d0a6:	f003 fc65 	bl	10974 <_task_destroy>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:103

	return;
}
    d0aa:	b002      	add	sp, #8
    d0ac:	bd70      	pop	{r4, r5, r6, pc}
    d0ae:	46c0      	nop			; (mov r8, r8)
    d0b0:	20000560 	.word	0x20000560
    d0b4:	0000048c 	.word	0x0000048c
    d0b8:	20002848 	.word	0x20002848
    d0bc:	200033a0 	.word	0x200033a0
    d0c0:	2000382c 	.word	0x2000382c
    d0c4:	00001388 	.word	0x00001388
    d0c8:	1fffe2d8 	.word	0x1fffe2d8
    d0cc:	200005dc 	.word	0x200005dc
    d0d0:	2000043c 	.word	0x2000043c
    d0d4:	20000540 	.word	0x20000540

0000d0d8 <RdSensData_task>:
RdSensData_task():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:107

// sensor read task
void RdSensData_task(uint32_t task_init_data)
{
    d0d8:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:109
	// initialize the physical sensors over I2C and the sensor data structures
	RdSensData_Init();
    d0da:	f001 fff9 	bl	f0d0 <RdSensData_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:112

	// initialize the user high frequency (typically 200Hz) task
	UserHighFrequencyTaskInit();
    d0de:	f002 fc87 	bl	f9f0 <UserHighFrequencyTaskInit>
    d0e2:	4c0c      	ldr	r4, [pc, #48]	; (d114 <RdSensData_task+0x3c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:124
		// FALSE means any bit (of the 1 bit enabled by the mask) unblocks
		// and NULL means timeout is infinite
		_lwevent_wait_for(&(mqxglobals.SamplingEventStruct), 1, FALSE, NULL);

		// reset the Kalman filter task flag
		mqxglobals.RunKF_Event_Flag = 0;
    d0e4:	2576      	movs	r5, #118	; 0x76
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:133
		UserHighFrequencyTaskRun();

		// use the Kalman filter flag set by the sensor read task (typically every 8 iterations)
		// with a mask of 1 (least significant bit set) to enable the Kalman filter task to run
		if (mqxglobals.RunKF_Event_Flag)
			_lwevent_set(&(mqxglobals.RunKFEventStruct), 1);
    d0e6:	1c26      	adds	r6, r4, #0
    d0e8:	3624      	adds	r6, #36	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:121
	{
		// wait here for the sampling event (hardware clock, typically at 200Hz)
		// the Kalman filter and magnetic fusion tasks execute while this task is blocked here
		// FALSE means any bit (of the 1 bit enabled by the mask) unblocks
		// and NULL means timeout is infinite
		_lwevent_wait_for(&(mqxglobals.SamplingEventStruct), 1, FALSE, NULL);
    d0ea:	2101      	movs	r1, #1
    d0ec:	2200      	movs	r2, #0
    d0ee:	2300      	movs	r3, #0
    d0f0:	1c20      	adds	r0, r4, #0
    d0f2:	f003 f919 	bl	10328 <_lwevent_wait_for>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:124

		// reset the Kalman filter task flag
		mqxglobals.RunKF_Event_Flag = 0;
    d0f6:	2300      	movs	r3, #0
    d0f8:	5363      	strh	r3, [r4, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:126
		// read the sensors
		RdSensData_Run();
    d0fa:	f002 f84b 	bl	f194 <RdSensData_Run>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:128
		// run the user high frequency task
		UserHighFrequencyTaskRun();
    d0fe:	f002 fc7b 	bl	f9f8 <UserHighFrequencyTaskRun>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:132

		// use the Kalman filter flag set by the sensor read task (typically every 8 iterations)
		// with a mask of 1 (least significant bit set) to enable the Kalman filter task to run
		if (mqxglobals.RunKF_Event_Flag)
    d102:	5b63      	ldrh	r3, [r4, r5]
    d104:	2b00      	cmp	r3, #0
    d106:	d0f0      	beq.n	d0ea <RdSensData_task+0x12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:133
			_lwevent_set(&(mqxglobals.RunKFEventStruct), 1);
    d108:	1c30      	adds	r0, r6, #0
    d10a:	2101      	movs	r1, #1
    d10c:	f003 f872 	bl	101f4 <_lwevent_set>
    d110:	e7eb      	b.n	d0ea <RdSensData_task+0x12>
    d112:	46c0      	nop			; (mov r8, r8)
    d114:	20000560 	.word	0x20000560

0000d118 <Fusion_task>:
Fusion_task():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:140
	}  // end of infinite loop
}

// Kalman filter sensor fusion task
void Fusion_task(uint32_t task_init_data)
{
    d118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d11a:	464f      	mov	r7, r9
    d11c:	4646      	mov	r6, r8
    d11e:	b4c0      	push	{r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:144
	uint16_t LedGreenCounter = 0;

	// initialize the sensor fusion algorithms
	Fusion_Init();
    d120:	f002 f802 	bl	f128 <Fusion_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:147

	// initialize the user medium frequency (typically 25Hz) task
	UserMediumFrequencyTaskInit();
    d124:	f002 fc66 	bl	f9f4 <UserMediumFrequencyTaskInit>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:153

	// infinite loop controlled by MQX-Lite events
	while(1)
	{
		// ensure the red LED (power up check) is off (line high)
		LED_RED_SetVal(NULL);
    d128:	2000      	movs	r0, #0
    d12a:	f004 fc13 	bl	11954 <LED_RED_SetVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:156
		
		// set the output test pin to zero (for timing measurements)
		TestPin_KF_Time_ClrVal(NULL);
    d12e:	2000      	movs	r0, #0
    d130:	f004 fd6c 	bl	11c0c <TestPin_KF_Time_ClrVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:161

		// wait for the sensor fusion event to occur
		// FALSE means any bit (of the 1 bit enabled by the mask) unblocks
		// and NULL means timeout is infinite
		_lwevent_wait_for(&(mqxglobals.RunKFEventStruct), 1, FALSE, NULL);
    d134:	4f1b      	ldr	r7, [pc, #108]	; (d1a4 <Fusion_task+0x8c>)
    d136:	2300      	movs	r3, #0
    d138:	2101      	movs	r1, #1
    d13a:	2200      	movs	r2, #0
    d13c:	1c38      	adds	r0, r7, #0
    d13e:	f003 f8f3 	bl	10328 <_lwevent_wait_for>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:164

		// set the output test pin to high to denote sensor fusion running
		TestPin_KF_Time_SetVal(NULL);
    d142:	2000      	movs	r0, #0
    d144:	f004 fd6a 	bl	11c1c <TestPin_KF_Time_SetVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:174
			LED_GREEN_NegVal(NULL);
			LedGreenCounter = 0;
		}

		// reset the magnetic calibration flag (this is set by the fusion algorithm)
		mqxglobals.MagCal_Event_Flag = 0;
    d148:	2300      	movs	r3, #0
    d14a:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:186
		// enable the magnetic calibration event if the flag for a new magnetic calibration
		// with a mask of 1 (least significant bit set)
		// was set by the sensor fusion algorithms
		if (mqxglobals.MagCal_Event_Flag)
		{
			_lwevent_set(&(mqxglobals.MagCalEventStruct), 1);
    d14c:	2324      	movs	r3, #36	; 0x24
    d14e:	1c3e      	adds	r6, r7, #0
    d150:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:167

		// set the output test pin to high to denote sensor fusion running
		TestPin_KF_Time_SetVal(NULL);

		// flash the green LED to denote the sensor fusion is running
		if (++LedGreenCounter >= 5)
    d152:	2401      	movs	r4, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:174
			LED_GREEN_NegVal(NULL);
			LedGreenCounter = 0;
		}

		// reset the magnetic calibration flag (this is set by the fusion algorithm)
		mqxglobals.MagCal_Event_Flag = 0;
    d154:	2578      	movs	r5, #120	; 0x78
    d156:	3e24      	subs	r6, #36	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:186
		// enable the magnetic calibration event if the flag for a new magnetic calibration
		// with a mask of 1 (least significant bit set)
		// was set by the sensor fusion algorithms
		if (mqxglobals.MagCal_Event_Flag)
		{
			_lwevent_set(&(mqxglobals.MagCalEventStruct), 1);
    d158:	44b9      	add	r9, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:174
			LED_GREEN_NegVal(NULL);
			LedGreenCounter = 0;
		}

		// reset the magnetic calibration flag (this is set by the fusion algorithm)
		mqxglobals.MagCal_Event_Flag = 0;
    d15a:	4643      	mov	r3, r8
    d15c:	5373      	strh	r3, [r6, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:176
		// call the sensor fusion algorithms
		Fusion_Run();
    d15e:	f002 f9bf 	bl	f4e0 <Fusion_Run>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:179

		// run the user medium frequency (typically 25Hz) user task
		UserMediumFrequencyTaskRun();
    d162:	f002 fc4b 	bl	f9fc <UserMediumFrequencyTaskRun>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:184

		// enable the magnetic calibration event if the flag for a new magnetic calibration
		// with a mask of 1 (least significant bit set)
		// was set by the sensor fusion algorithms
		if (mqxglobals.MagCal_Event_Flag)
    d166:	5b73      	ldrh	r3, [r6, r5]
    d168:	2b00      	cmp	r3, #0
    d16a:	d003      	beq.n	d174 <Fusion_task+0x5c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:186
		{
			_lwevent_set(&(mqxglobals.MagCalEventStruct), 1);
    d16c:	4648      	mov	r0, r9
    d16e:	2101      	movs	r1, #1
    d170:	f003 f840 	bl	101f4 <_lwevent_set>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:153

	// infinite loop controlled by MQX-Lite events
	while(1)
	{
		// ensure the red LED (power up check) is off (line high)
		LED_RED_SetVal(NULL);
    d174:	2000      	movs	r0, #0
    d176:	f004 fbed 	bl	11954 <LED_RED_SetVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:156
		
		// set the output test pin to zero (for timing measurements)
		TestPin_KF_Time_ClrVal(NULL);
    d17a:	2000      	movs	r0, #0
    d17c:	f004 fd46 	bl	11c0c <TestPin_KF_Time_ClrVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:167

		// set the output test pin to high to denote sensor fusion running
		TestPin_KF_Time_SetVal(NULL);

		// flash the green LED to denote the sensor fusion is running
		if (++LedGreenCounter >= 5)
    d180:	3401      	adds	r4, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:161
		TestPin_KF_Time_ClrVal(NULL);

		// wait for the sensor fusion event to occur
		// FALSE means any bit (of the 1 bit enabled by the mask) unblocks
		// and NULL means timeout is infinite
		_lwevent_wait_for(&(mqxglobals.RunKFEventStruct), 1, FALSE, NULL);
    d182:	2101      	movs	r1, #1
    d184:	2200      	movs	r2, #0
    d186:	2300      	movs	r3, #0
    d188:	1c38      	adds	r0, r7, #0
    d18a:	f003 f8cd 	bl	10328 <_lwevent_wait_for>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:167

		// set the output test pin to high to denote sensor fusion running
		TestPin_KF_Time_SetVal(NULL);

		// flash the green LED to denote the sensor fusion is running
		if (++LedGreenCounter >= 5)
    d18e:	b2a4      	uxth	r4, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:164
		// FALSE means any bit (of the 1 bit enabled by the mask) unblocks
		// and NULL means timeout is infinite
		_lwevent_wait_for(&(mqxglobals.RunKFEventStruct), 1, FALSE, NULL);

		// set the output test pin to high to denote sensor fusion running
		TestPin_KF_Time_SetVal(NULL);
    d190:	2000      	movs	r0, #0
    d192:	f004 fd43 	bl	11c1c <TestPin_KF_Time_SetVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:167

		// flash the green LED to denote the sensor fusion is running
		if (++LedGreenCounter >= 5)
    d196:	2c04      	cmp	r4, #4
    d198:	d9df      	bls.n	d15a <Fusion_task+0x42>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:169
		{
			LED_GREEN_NegVal(NULL);
    d19a:	2000      	movs	r0, #0
    d19c:	f004 fbaa 	bl	118f4 <LED_GREEN_NegVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:170
			LedGreenCounter = 0;
    d1a0:	2400      	movs	r4, #0
    d1a2:	e7da      	b.n	d15a <Fusion_task+0x42>
    d1a4:	20000584 	.word	0x20000584

0000d1a8 <MagCal_task>:
MagCal_task():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:196
	return;
}

// magnetic calibration task
void MagCal_task(uint32_t task_init_data)
{
    d1a8:	b570      	push	{r4, r5, r6, lr}
    d1aa:	4e0d      	ldr	r6, [pc, #52]	; (d1e0 <MagCal_task+0x38>)
    d1ac:	4d0d      	ldr	r5, [pc, #52]	; (d1e4 <MagCal_task+0x3c>)
    d1ae:	4c0e      	ldr	r4, [pc, #56]	; (d1e8 <MagCal_task+0x40>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:200 (discriminator 1)
	while(1)
	{
		// set the RED LED off and set test pin off ready for magnetic calibration to run
		LED_RED_SetVal(NULL);           
    d1b0:	2000      	movs	r0, #0
    d1b2:	f004 fbcf 	bl	11954 <LED_RED_SetVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:201 (discriminator 1)
		TestPin_MagCal_Time_ClrVal(NULL);  
    d1b6:	2000      	movs	r0, #0
    d1b8:	f004 fd5c 	bl	11c74 <TestPin_MagCal_Time_ClrVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:207 (discriminator 1)

		// wait for the magnetic calibration event
		// this event will never be enabled for build options which don't require magnetic calibration
		// FALSE means any bit (of the 1 bit enabled by the mask) unblocks
		// and NULL means timeout is infinite
		_lwevent_wait_for(&(mqxglobals.MagCalEventStruct), 1, FALSE, NULL);
    d1bc:	2101      	movs	r1, #1
    d1be:	2200      	movs	r2, #0
    d1c0:	2300      	movs	r3, #0
    d1c2:	1c30      	adds	r0, r6, #0
    d1c4:	f003 f8b0 	bl	10328 <_lwevent_wait_for>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:210 (discriminator 1)

		// set the red LED on and test pin pin on
		LED_RED_ClrVal(NULL);            
    d1c8:	2000      	movs	r0, #0
    d1ca:	f004 fbbb 	bl	11944 <LED_RED_ClrVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:211 (discriminator 1)
		TestPin_MagCal_Time_SetVal(NULL);  
    d1ce:	2000      	movs	r0, #0
    d1d0:	f004 fd58 	bl	11c84 <TestPin_MagCal_Time_SetVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:216 (discriminator 1)

		// prevent compilation errors when magnetic calibration is not required
#if defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
		// and run the magnetic calibration
		MagCal_Run(&thisMagCal, &thisMagBuffer);
    d1d4:	1c28      	adds	r0, r5, #0
    d1d6:	1c21      	adds	r1, r4, #0
    d1d8:	f002 faf2 	bl	f7c0 <MagCal_Run>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:219 (discriminator 1)
#endif

	} // end of infinite loop
    d1dc:	e7e8      	b.n	d1b0 <MagCal_task+0x8>
    d1de:	46c0      	nop			; (mov r8, r8)
    d1e0:	200005a8 	.word	0x200005a8
    d1e4:	200013a0 	.word	0x200013a0
    d1e8:	200006dc 	.word	0x200006dc

0000d1ec <f3DOFTiltNED>:
f3DOFTiltNED():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:46
#define CORRUPTQUAT 0.001F	// threshold for deciding rotation quaternion is corrupt
#define SMALLMODULUS 0.01F	// limit where rounding errors may appear

// Aerospace NED accelerometer 3DOF tilt function computing rotation matrix fR
void f3DOFTiltNED(float fR[][3], float fGp[])
{
    d1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d1ee:	4644      	mov	r4, r8
    d1f0:	465f      	mov	r7, fp
    d1f2:	4656      	mov	r6, sl
    d1f4:	464d      	mov	r5, r9
    d1f6:	b4f0      	push	{r4, r5, r6, r7}
    d1f8:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:57
	float fmodGyz;			// modulus of the y, z accelerometer readings
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable

	// compute the accelerometer squared magnitudes
	fmodGyz = fGp[Y] * fGp[Y] + fGp[Z] * fGp[Z];
    d1fa:	6848      	ldr	r0, [r1, #4]
    d1fc:	688e      	ldr	r6, [r1, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:46
#define CORRUPTQUAT 0.001F	// threshold for deciding rotation quaternion is corrupt
#define SMALLMODULUS 0.01F	// limit where rounding errors may appear

// Aerospace NED accelerometer 3DOF tilt function computing rotation matrix fR
void f3DOFTiltNED(float fR[][3], float fGp[])
{
    d1fe:	1c0d      	adds	r5, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:57
	float fmodGyz;			// modulus of the y, z accelerometer readings
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable

	// compute the accelerometer squared magnitudes
	fmodGyz = fGp[Y] * fGp[Y] + fGp[Z] * fGp[Z];
    d200:	1c01      	adds	r1, r0, #0
    d202:	f7f3 feb7 	bl	f74 <__aeabi_fmul>
    d206:	1c31      	adds	r1, r6, #0
    d208:	1c07      	adds	r7, r0, #0
    d20a:	1c30      	adds	r0, r6, #0
    d20c:	f7f3 feb2 	bl	f74 <__aeabi_fmul>
    d210:	1c01      	adds	r1, r0, #0
    d212:	1c38      	adds	r0, r7, #0
    d214:	f7f3 fb40 	bl	898 <__aeabi_fadd>
    d218:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:58
	fmodGxyz = fmodGyz + fGp[X] * fGp[X];
    d21a:	6828      	ldr	r0, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:61

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
    d21c:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:58
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable

	// compute the accelerometer squared magnitudes
	fmodGyz = fGp[Y] * fGp[Y] + fGp[Z] * fGp[Z];
	fmodGxyz = fmodGyz + fGp[X] * fGp[X];
    d21e:	1c01      	adds	r1, r0, #0
    d220:	f7f3 fea8 	bl	f74 <__aeabi_fmul>
    d224:	1c39      	adds	r1, r7, #0
    d226:	f7f3 fb37 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:61

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
    d22a:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:58
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable

	// compute the accelerometer squared magnitudes
	fmodGyz = fGp[Y] * fGp[Y] + fGp[Z] * fGp[Z];
	fmodGxyz = fmodGyz + fGp[X] * fGp[X];
    d22c:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:61

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
    d22e:	f7f3 fb05 	bl	83c <__aeabi_fcmpeq>
    d232:	2800      	cmp	r0, #0
    d234:	d168      	bne.n	d308 <f3DOFTiltNED+0x11c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:68
		f3x3matrixAeqI(fR);
		return;
	}

	// check for vertical up or down gimbal lock case
	if (fmodGyz == 0.0F)
    d236:	1c38      	adds	r0, r7, #0
    d238:	1c31      	adds	r1, r6, #0
    d23a:	f7f3 faff 	bl	83c <__aeabi_fcmpeq>
    d23e:	2800      	cmp	r0, #0
    d240:	d010      	beq.n	d264 <f3DOFTiltNED+0x78>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:71
	{
		f3x3matrixAeqScalar(fR, 0.0F);
		fR[Y][Y] = 1.0F;
    d242:	27fe      	movs	r7, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:70
	}

	// check for vertical up or down gimbal lock case
	if (fmodGyz == 0.0F)
	{
		f3x3matrixAeqScalar(fR, 0.0F);
    d244:	1c20      	adds	r0, r4, #0
    d246:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:71
		fR[Y][Y] = 1.0F;
    d248:	05bf      	lsls	r7, r7, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:70
	}

	// check for vertical up or down gimbal lock case
	if (fmodGyz == 0.0F)
	{
		f3x3matrixAeqScalar(fR, 0.0F);
    d24a:	f7ff f9c7 	bl	c5dc <f3x3matrixAeqScalar>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:71
		fR[Y][Y] = 1.0F;
    d24e:	6127      	str	r7, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:72
		if (fGp[X] >= 0.0F)
    d250:	6828      	ldr	r0, [r5, #0]
    d252:	1c31      	adds	r1, r6, #0
    d254:	f7f3 fb16 	bl	884 <__aeabi_fcmpge>
    d258:	2800      	cmp	r0, #0
    d25a:	d059      	beq.n	d310 <f3DOFTiltNED+0x124>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:75
		{
			fR[X][Z] = 1.0F;
			fR[Z][X] = -1.0F;
    d25c:	4b2e      	ldr	r3, [pc, #184]	; (d318 <f3DOFTiltNED+0x12c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:74
	{
		f3x3matrixAeqScalar(fR, 0.0F);
		fR[Y][Y] = 1.0F;
		if (fGp[X] >= 0.0F)
		{
			fR[X][Z] = 1.0F;
    d25e:	60a7      	str	r7, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:75
			fR[Z][X] = -1.0F;
    d260:	61a3      	str	r3, [r4, #24]
    d262:	e04b      	b.n	d2fc <f3DOFTiltNED+0x110>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:86
		}
		return;
	}

	// compute moduli for the general case
	fmodGyz = sqrtf(fmodGyz);
    d264:	1c38      	adds	r0, r7, #0
    d266:	f005 fbd1 	bl	12a0c <sqrtf>
    d26a:	4682      	mov	sl, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:87
	fmodGxyz = sqrtf(fmodGxyz);
    d26c:	4640      	mov	r0, r8
    d26e:	f005 fbcd 	bl	12a0c <sqrtf>
    d272:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:88
	frecipmodGxyz = 1.0F / fmodGxyz;
    d274:	20fe      	movs	r0, #254	; 0xfe
    d276:	1c39      	adds	r1, r7, #0
    d278:	0580      	lsls	r0, r0, #22
    d27a:	f7f3 fc89 	bl	b90 <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:89
	ftmp = fmodGxyz / fmodGyz;
    d27e:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:88
	}

	// compute moduli for the general case
	fmodGyz = sqrtf(fmodGyz);
	fmodGxyz = sqrtf(fmodGxyz);
	frecipmodGxyz = 1.0F / fmodGxyz;
    d280:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:89
	ftmp = fmodGxyz / fmodGyz;
    d282:	1c38      	adds	r0, r7, #0
    d284:	f7f3 fc84 	bl	b90 <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:94

	// normalize the accelerometer reading into the z column
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i] * frecipmodGxyz;
    d288:	4649      	mov	r1, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:89

	// compute moduli for the general case
	fmodGyz = sqrtf(fmodGyz);
	fmodGxyz = sqrtf(fmodGxyz);
	frecipmodGxyz = 1.0F / fmodGxyz;
	ftmp = fmodGxyz / fmodGyz;
    d28a:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:94

	// normalize the accelerometer reading into the z column
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i] * frecipmodGxyz;
    d28c:	6828      	ldr	r0, [r5, #0]
    d28e:	f7f3 fe71 	bl	f74 <__aeabi_fmul>
    d292:	60a0      	str	r0, [r4, #8]
    d294:	6868      	ldr	r0, [r5, #4]
    d296:	4649      	mov	r1, r9
    d298:	f7f3 fe6c 	bl	f74 <__aeabi_fmul>
    d29c:	6160      	str	r0, [r4, #20]
    d29e:	1c07      	adds	r7, r0, #0
    d2a0:	4649      	mov	r1, r9
    d2a2:	68a8      	ldr	r0, [r5, #8]
    d2a4:	f7f3 fe66 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:98
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
    d2a8:	4649      	mov	r1, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:94
	ftmp = fmodGxyz / fmodGyz;

	// normalize the accelerometer reading into the z column
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i] * frecipmodGxyz;
    d2aa:	4683      	mov	fp, r0
    d2ac:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:98
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
    d2ae:	4650      	mov	r0, sl
    d2b0:	f7f3 fe60 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:99
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
    d2b4:	2280      	movs	r2, #128	; 0x80
    d2b6:	0612      	lsls	r2, r2, #24
    d2b8:	4694      	mov	ip, r2
    d2ba:	68a3      	ldr	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:98
	{
		fR[i][Z] = fGp[i] * frecipmodGxyz;
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
    d2bc:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:99
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
    d2be:	4463      	add	r3, ip
    d2c0:	1c18      	adds	r0, r3, #0
    d2c2:	1c39      	adds	r1, r7, #0
    d2c4:	1c1d      	adds	r5, r3, #0
    d2c6:	f7f3 fe55 	bl	f74 <__aeabi_fmul>
    d2ca:	4641      	mov	r1, r8
    d2cc:	f7f3 fe52 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:100
	fR[Z][X] = -fR[X][Z] * fR[Z][Z] * ftmp;
    d2d0:	4659      	mov	r1, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:99
		fR[i][Z] = fGp[i] * frecipmodGxyz;
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
    d2d2:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:100
	fR[Z][X] = -fR[X][Z] * fR[Z][Z] * ftmp;
    d2d4:	1c28      	adds	r0, r5, #0
    d2d6:	f7f3 fe4d 	bl	f74 <__aeabi_fmul>
    d2da:	4641      	mov	r1, r8
    d2dc:	f7f3 fe4a 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:104

	// // construct y column of orientation matrix
	fR[X][Y] = 0.0F;
	fR[Y][Y] = fR[Z][Z] * ftmp;
    d2e0:	4659      	mov	r1, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:100
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
	fR[Z][X] = -fR[X][Z] * fR[Z][Z] * ftmp;
    d2e2:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:103

	// // construct y column of orientation matrix
	fR[X][Y] = 0.0F;
    d2e4:	6066      	str	r6, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:104
	fR[Y][Y] = fR[Z][Z] * ftmp;
    d2e6:	4640      	mov	r0, r8
    d2e8:	f7f3 fe44 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:105
	fR[Z][Y] = -fR[Y][Z] * ftmp;
    d2ec:	2380      	movs	r3, #128	; 0x80
    d2ee:	061b      	lsls	r3, r3, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:104
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
	fR[Z][X] = -fR[X][Z] * fR[Z][Z] * ftmp;

	// // construct y column of orientation matrix
	fR[X][Y] = 0.0F;
	fR[Y][Y] = fR[Z][Z] * ftmp;
    d2f0:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:105
	fR[Z][Y] = -fR[Y][Z] * ftmp;
    d2f2:	4641      	mov	r1, r8
    d2f4:	18f8      	adds	r0, r7, r3
    d2f6:	f7f3 fe3d 	bl	f74 <__aeabi_fmul>
    d2fa:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:108

	return;
}
    d2fc:	bc3c      	pop	{r2, r3, r4, r5}
    d2fe:	4690      	mov	r8, r2
    d300:	4699      	mov	r9, r3
    d302:	46a2      	mov	sl, r4
    d304:	46ab      	mov	fp, r5
    d306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:63
	fmodGxyz = fmodGyz + fGp[X] * fGp[X];

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
	{
		f3x3matrixAeqI(fR);
    d308:	1c20      	adds	r0, r4, #0
    d30a:	f7ff f959 	bl	c5c0 <f3x3matrixAeqI>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:64
		return;
    d30e:	e7f5      	b.n	d2fc <f3DOFTiltNED+0x110>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:79
			fR[X][Z] = 1.0F;
			fR[Z][X] = -1.0F;
		}
		else
		{
			fR[X][Z] = -1.0F;
    d310:	4b01      	ldr	r3, [pc, #4]	; (d318 <f3DOFTiltNED+0x12c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:80
			fR[Z][X] = 1.0F;
    d312:	61a7      	str	r7, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:79
			fR[X][Z] = 1.0F;
			fR[Z][X] = -1.0F;
		}
		else
		{
			fR[X][Z] = -1.0F;
    d314:	60a3      	str	r3, [r4, #8]
    d316:	e7f1      	b.n	d2fc <f3DOFTiltNED+0x110>
    d318:	bf800000 	.word	0xbf800000

0000d31c <f3DOFTiltAndroid>:
f3DOFTiltAndroid():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:112
	return;
}

// Android accelerometer 3DOF tilt function computing rotation matrix fR
void f3DOFTiltAndroid(float fR[][3], float fGp[])
{
    d31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d31e:	4644      	mov	r4, r8
    d320:	465f      	mov	r7, fp
    d322:	4656      	mov	r6, sl
    d324:	464d      	mov	r5, r9
    d326:	b4f0      	push	{r4, r5, r6, r7}
    d328:	1c04      	adds	r4, r0, #0
f3DOFTiltNED():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:57
	float fmodGyz;			// modulus of the y, z accelerometer readings
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable

	// compute the accelerometer squared magnitudes
	fmodGyz = fGp[Y] * fGp[Y] + fGp[Z] * fGp[Z];
    d32a:	6848      	ldr	r0, [r1, #4]
    d32c:	688e      	ldr	r6, [r1, #8]
f3DOFTiltAndroid():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:112
	return;
}

// Android accelerometer 3DOF tilt function computing rotation matrix fR
void f3DOFTiltAndroid(float fR[][3], float fGp[])
{
    d32e:	1c0d      	adds	r5, r1, #0
f3DOFTiltNED():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:57
	float fmodGyz;			// modulus of the y, z accelerometer readings
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable

	// compute the accelerometer squared magnitudes
	fmodGyz = fGp[Y] * fGp[Y] + fGp[Z] * fGp[Z];
    d330:	1c01      	adds	r1, r0, #0
    d332:	f7f3 fe1f 	bl	f74 <__aeabi_fmul>
    d336:	1c31      	adds	r1, r6, #0
    d338:	1c07      	adds	r7, r0, #0
    d33a:	1c30      	adds	r0, r6, #0
    d33c:	f7f3 fe1a 	bl	f74 <__aeabi_fmul>
    d340:	1c01      	adds	r1, r0, #0
    d342:	1c38      	adds	r0, r7, #0
    d344:	f7f3 faa8 	bl	898 <__aeabi_fadd>
    d348:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:58
	fmodGxyz = fmodGyz + fGp[X] * fGp[X];
    d34a:	6828      	ldr	r0, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:61

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
    d34c:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:58
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable

	// compute the accelerometer squared magnitudes
	fmodGyz = fGp[Y] * fGp[Y] + fGp[Z] * fGp[Z];
	fmodGxyz = fmodGyz + fGp[X] * fGp[X];
    d34e:	1c01      	adds	r1, r0, #0
    d350:	f7f3 fe10 	bl	f74 <__aeabi_fmul>
    d354:	1c01      	adds	r1, r0, #0
    d356:	1c38      	adds	r0, r7, #0
    d358:	f7f3 fa9e 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:61

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
    d35c:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:58
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable

	// compute the accelerometer squared magnitudes
	fmodGyz = fGp[Y] * fGp[Y] + fGp[Z] * fGp[Z];
	fmodGxyz = fmodGyz + fGp[X] * fGp[X];
    d35e:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:61

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
    d360:	f7f3 fa6c 	bl	83c <__aeabi_fcmpeq>
    d364:	2800      	cmp	r0, #0
    d366:	d16a      	bne.n	d43e <f3DOFTiltAndroid+0x122>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:68
		f3x3matrixAeqI(fR);
		return;
	}

	// check for vertical up or down gimbal lock case
	if (fmodGyz == 0.0F)
    d368:	1c38      	adds	r0, r7, #0
    d36a:	1c31      	adds	r1, r6, #0
    d36c:	f7f3 fa66 	bl	83c <__aeabi_fcmpeq>
    d370:	2800      	cmp	r0, #0
    d372:	d010      	beq.n	d396 <f3DOFTiltAndroid+0x7a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:71
	{
		f3x3matrixAeqScalar(fR, 0.0F);
		fR[Y][Y] = 1.0F;
    d374:	27fe      	movs	r7, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:70
	}

	// check for vertical up or down gimbal lock case
	if (fmodGyz == 0.0F)
	{
		f3x3matrixAeqScalar(fR, 0.0F);
    d376:	1c20      	adds	r0, r4, #0
    d378:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:71
		fR[Y][Y] = 1.0F;
    d37a:	05bf      	lsls	r7, r7, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:70
	}

	// check for vertical up or down gimbal lock case
	if (fmodGyz == 0.0F)
	{
		f3x3matrixAeqScalar(fR, 0.0F);
    d37c:	f7ff f92e 	bl	c5dc <f3x3matrixAeqScalar>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:71
		fR[Y][Y] = 1.0F;
    d380:	6127      	str	r7, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:72
		if (fGp[X] >= 0.0F)
    d382:	6828      	ldr	r0, [r5, #0]
    d384:	1c31      	adds	r1, r6, #0
    d386:	f7f3 fa7d 	bl	884 <__aeabi_fcmpge>
    d38a:	2800      	cmp	r0, #0
    d38c:	d05b      	beq.n	d446 <f3DOFTiltAndroid+0x12a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:75
		{
			fR[X][Z] = 1.0F;
			fR[Z][X] = -1.0F;
    d38e:	4b30      	ldr	r3, [pc, #192]	; (d450 <f3DOFTiltAndroid+0x134>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:74
	{
		f3x3matrixAeqScalar(fR, 0.0F);
		fR[Y][Y] = 1.0F;
		if (fGp[X] >= 0.0F)
		{
			fR[X][Z] = 1.0F;
    d390:	60a7      	str	r7, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:75
			fR[Z][X] = -1.0F;
    d392:	61a3      	str	r3, [r4, #24]
    d394:	e04d      	b.n	d432 <f3DOFTiltAndroid+0x116>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:86
		}
		return;
	}

	// compute moduli for the general case
	fmodGyz = sqrtf(fmodGyz);
    d396:	1c38      	adds	r0, r7, #0
    d398:	f005 fb38 	bl	12a0c <sqrtf>
    d39c:	4682      	mov	sl, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:87
	fmodGxyz = sqrtf(fmodGxyz);
    d39e:	4640      	mov	r0, r8
    d3a0:	f005 fb34 	bl	12a0c <sqrtf>
    d3a4:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:88
	frecipmodGxyz = 1.0F / fmodGxyz;
    d3a6:	20fe      	movs	r0, #254	; 0xfe
    d3a8:	1c39      	adds	r1, r7, #0
    d3aa:	0580      	lsls	r0, r0, #22
    d3ac:	f7f3 fbf0 	bl	b90 <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:89
	ftmp = fmodGxyz / fmodGyz;
    d3b0:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:88
	}

	// compute moduli for the general case
	fmodGyz = sqrtf(fmodGyz);
	fmodGxyz = sqrtf(fmodGxyz);
	frecipmodGxyz = 1.0F / fmodGxyz;
    d3b2:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:89
	ftmp = fmodGxyz / fmodGyz;
    d3b4:	1c38      	adds	r0, r7, #0
    d3b6:	f7f3 fbeb 	bl	b90 <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:94

	// normalize the accelerometer reading into the z column
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i] * frecipmodGxyz;
    d3ba:	6829      	ldr	r1, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:89

	// compute moduli for the general case
	fmodGyz = sqrtf(fmodGyz);
	fmodGxyz = sqrtf(fmodGxyz);
	frecipmodGxyz = 1.0F / fmodGxyz;
	ftmp = fmodGxyz / fmodGyz;
    d3bc:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:94

	// normalize the accelerometer reading into the z column
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i] * frecipmodGxyz;
    d3be:	4648      	mov	r0, r9
    d3c0:	f7f3 fdd8 	bl	f74 <__aeabi_fmul>
    d3c4:	60a0      	str	r0, [r4, #8]
    d3c6:	6869      	ldr	r1, [r5, #4]
    d3c8:	4648      	mov	r0, r9
    d3ca:	f7f3 fdd3 	bl	f74 <__aeabi_fmul>
    d3ce:	6160      	str	r0, [r4, #20]
    d3d0:	68a9      	ldr	r1, [r5, #8]
    d3d2:	1c07      	adds	r7, r0, #0
    d3d4:	4648      	mov	r0, r9
    d3d6:	f7f3 fdcd 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:98
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
    d3da:	4649      	mov	r1, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:94
	ftmp = fmodGxyz / fmodGyz;

	// normalize the accelerometer reading into the z column
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i] * frecipmodGxyz;
    d3dc:	4683      	mov	fp, r0
    d3de:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:98
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
    d3e0:	4650      	mov	r0, sl
    d3e2:	f7f3 fdc7 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:99
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
    d3e6:	2280      	movs	r2, #128	; 0x80
    d3e8:	0612      	lsls	r2, r2, #24
    d3ea:	4694      	mov	ip, r2
    d3ec:	68a3      	ldr	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:98
	{
		fR[i][Z] = fGp[i] * frecipmodGxyz;
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
    d3ee:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:99
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
    d3f0:	4463      	add	r3, ip
    d3f2:	1c18      	adds	r0, r3, #0
    d3f4:	1c39      	adds	r1, r7, #0
    d3f6:	1c1d      	adds	r5, r3, #0
    d3f8:	f7f3 fdbc 	bl	f74 <__aeabi_fmul>
    d3fc:	1c01      	adds	r1, r0, #0
    d3fe:	4640      	mov	r0, r8
    d400:	f7f3 fdb8 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:100
	fR[Z][X] = -fR[X][Z] * fR[Z][Z] * ftmp;
    d404:	4659      	mov	r1, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:99
		fR[i][Z] = fGp[i] * frecipmodGxyz;
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
    d406:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:100
	fR[Z][X] = -fR[X][Z] * fR[Z][Z] * ftmp;
    d408:	1c28      	adds	r0, r5, #0
    d40a:	f7f3 fdb3 	bl	f74 <__aeabi_fmul>
    d40e:	1c01      	adds	r1, r0, #0
    d410:	4640      	mov	r0, r8
    d412:	f7f3 fdaf 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:104

	// // construct y column of orientation matrix
	fR[X][Y] = 0.0F;
	fR[Y][Y] = fR[Z][Z] * ftmp;
    d416:	4659      	mov	r1, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:100
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
	fR[Z][X] = -fR[X][Z] * fR[Z][Z] * ftmp;
    d418:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:103

	// // construct y column of orientation matrix
	fR[X][Y] = 0.0F;
    d41a:	6066      	str	r6, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:104
	fR[Y][Y] = fR[Z][Z] * ftmp;
    d41c:	4640      	mov	r0, r8
    d41e:	f7f3 fda9 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:105
	fR[Z][Y] = -fR[Y][Z] * ftmp;
    d422:	2380      	movs	r3, #128	; 0x80
    d424:	061b      	lsls	r3, r3, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:104
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
	fR[Z][X] = -fR[X][Z] * fR[Z][Z] * ftmp;

	// // construct y column of orientation matrix
	fR[X][Y] = 0.0F;
	fR[Y][Y] = fR[Z][Z] * ftmp;
    d426:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:105
	fR[Z][Y] = -fR[Y][Z] * ftmp;
    d428:	18f9      	adds	r1, r7, r3
    d42a:	4640      	mov	r0, r8
    d42c:	f7f3 fda2 	bl	f74 <__aeabi_fmul>
    d430:	61e0      	str	r0, [r4, #28]
f3DOFTiltAndroid():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:117
{
	// the Android tilt matrix is mathematically identical to the NED tilt matrix
	// the Android self-consistency twist occurs at 90 deg roll
	f3DOFTiltNED(fR, fGp);
	return;
}
    d432:	bc3c      	pop	{r2, r3, r4, r5}
    d434:	4690      	mov	r8, r2
    d436:	4699      	mov	r9, r3
    d438:	46a2      	mov	sl, r4
    d43a:	46ab      	mov	fp, r5
    d43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
f3DOFTiltNED():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:63
	fmodGxyz = fmodGyz + fGp[X] * fGp[X];

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
	{
		f3x3matrixAeqI(fR);
    d43e:	1c20      	adds	r0, r4, #0
    d440:	f7ff f8be 	bl	c5c0 <f3x3matrixAeqI>
    d444:	e7f5      	b.n	d432 <f3DOFTiltAndroid+0x116>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:79
			fR[X][Z] = 1.0F;
			fR[Z][X] = -1.0F;
		}
		else
		{
			fR[X][Z] = -1.0F;
    d446:	4b02      	ldr	r3, [pc, #8]	; (d450 <f3DOFTiltAndroid+0x134>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:80
			fR[Z][X] = 1.0F;
    d448:	61a7      	str	r7, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:79
			fR[X][Z] = 1.0F;
			fR[Z][X] = -1.0F;
		}
		else
		{
			fR[X][Z] = -1.0F;
    d44a:	60a3      	str	r3, [r4, #8]
    d44c:	e7f1      	b.n	d432 <f3DOFTiltAndroid+0x116>
    d44e:	46c0      	nop			; (mov r8, r8)
    d450:	bf800000 	.word	0xbf800000

0000d454 <f3DOFTiltWin8>:
f3DOFTiltWin8():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:121
	return;
}

// Windows 8 accelerometer 3DOF tilt function computing rotation matrix fR
void f3DOFTiltWin8(float fR[][3], float fGp[])
{
    d454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d456:	465f      	mov	r7, fp
    d458:	4656      	mov	r6, sl
    d45a:	464d      	mov	r5, r9
    d45c:	4644      	mov	r4, r8
    d45e:	b4f0      	push	{r4, r5, r6, r7}
    d460:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:132
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable
	int8 i;					// counter

	// compute the accelerometer squared magnitudes
	fmodGxz = fGp[X] * fGp[X] + fGp[Z] * fGp[Z];
    d462:	6808      	ldr	r0, [r1, #0]
    d464:	688e      	ldr	r6, [r1, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:121
	return;
}

// Windows 8 accelerometer 3DOF tilt function computing rotation matrix fR
void f3DOFTiltWin8(float fR[][3], float fGp[])
{
    d466:	1c0d      	adds	r5, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:132
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable
	int8 i;					// counter

	// compute the accelerometer squared magnitudes
	fmodGxz = fGp[X] * fGp[X] + fGp[Z] * fGp[Z];
    d468:	1c01      	adds	r1, r0, #0
    d46a:	f7f3 fd83 	bl	f74 <__aeabi_fmul>
    d46e:	1c31      	adds	r1, r6, #0
    d470:	1c07      	adds	r7, r0, #0
    d472:	1c30      	adds	r0, r6, #0
    d474:	f7f3 fd7e 	bl	f74 <__aeabi_fmul>
    d478:	1c01      	adds	r1, r0, #0
    d47a:	1c38      	adds	r0, r7, #0
    d47c:	f7f3 fa0c 	bl	898 <__aeabi_fadd>
    d480:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:133
	fmodGxyz = fmodGxz + fGp[Y] * fGp[Y];
    d482:	6868      	ldr	r0, [r5, #4]
    d484:	1c01      	adds	r1, r0, #0
    d486:	f7f3 fd75 	bl	f74 <__aeabi_fmul>
    d48a:	1c31      	adds	r1, r6, #0
    d48c:	f7f3 fa04 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:136

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
    d490:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:133
	float ftmp;				// scratch variable
	int8 i;					// counter

	// compute the accelerometer squared magnitudes
	fmodGxz = fGp[X] * fGp[X] + fGp[Z] * fGp[Z];
	fmodGxyz = fmodGxz + fGp[Y] * fGp[Y];
    d492:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:136

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
    d494:	f7f3 f9d2 	bl	83c <__aeabi_fcmpeq>
    d498:	2800      	cmp	r0, #0
    d49a:	d000      	beq.n	d49e <f3DOFTiltWin8+0x4a>
    d49c:	e084      	b.n	d5a8 <f3DOFTiltWin8+0x154>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:143
		f3x3matrixAeqI(fR);
		return;
	}

	// check for vertical up or down gimbal lock case
	if (fmodGxz == 0.0F)
    d49e:	1c30      	adds	r0, r6, #0
    d4a0:	2100      	movs	r1, #0
    d4a2:	f7f3 f9cb 	bl	83c <__aeabi_fcmpeq>
    d4a6:	2800      	cmp	r0, #0
    d4a8:	d16d      	bne.n	d586 <f3DOFTiltWin8+0x132>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:161
		}
		return;
	}

	// compute moduli for the general case
	fmodGxz = sqrtf(fmodGxz);
    d4aa:	1c30      	adds	r0, r6, #0
    d4ac:	f005 faae 	bl	12a0c <sqrtf>
    d4b0:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:162
	fmodGxyz = sqrtf(fmodGxyz);
    d4b2:	1c38      	adds	r0, r7, #0
    d4b4:	f005 faaa 	bl	12a0c <sqrtf>
    d4b8:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:163
	frecipmodGxyz = 1.0F / fmodGxyz;
    d4ba:	20fe      	movs	r0, #254	; 0xfe
    d4bc:	1c31      	adds	r1, r6, #0
    d4be:	0580      	lsls	r0, r0, #22
    d4c0:	f7f3 fb66 	bl	b90 <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:164
	ftmp = fmodGxyz / fmodGxz;
    d4c4:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:163
	}

	// compute moduli for the general case
	fmodGxz = sqrtf(fmodGxz);
	fmodGxyz = sqrtf(fmodGxyz);
	frecipmodGxyz = 1.0F / fmodGxyz;
    d4c6:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:164
	ftmp = fmodGxyz / fmodGxz;
    d4c8:	1c30      	adds	r0, r6, #0
    d4ca:	f7f3 fb61 	bl	b90 <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:165
	if (fGp[Z] < 0.0F)
    d4ce:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:164

	// compute moduli for the general case
	fmodGxz = sqrtf(fmodGxz);
	fmodGxyz = sqrtf(fmodGxyz);
	frecipmodGxyz = 1.0F / fmodGxyz;
	ftmp = fmodGxyz / fmodGxz;
    d4d0:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:165
	if (fGp[Z] < 0.0F)
    d4d2:	68a8      	ldr	r0, [r5, #8]
    d4d4:	f7f3 f9b8 	bl	848 <__aeabi_fcmplt>
    d4d8:	2800      	cmp	r0, #0
    d4da:	d169      	bne.n	d5b0 <f3DOFTiltWin8+0x15c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:173
	}

	// normalize the negated accelerometer reading into the z column
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i] * frecipmodGxyz;
    d4dc:	2280      	movs	r2, #128	; 0x80
    d4de:	0612      	lsls	r2, r2, #24
    d4e0:	4694      	mov	ip, r2
    d4e2:	682b      	ldr	r3, [r5, #0]
    d4e4:	1c39      	adds	r1, r7, #0
    d4e6:	4463      	add	r3, ip
    d4e8:	1c18      	adds	r0, r3, #0
    d4ea:	f7f3 fd43 	bl	f74 <__aeabi_fmul>
    d4ee:	2280      	movs	r2, #128	; 0x80
    d4f0:	0612      	lsls	r2, r2, #24
    d4f2:	4694      	mov	ip, r2
    d4f4:	60a0      	str	r0, [r4, #8]
    d4f6:	686b      	ldr	r3, [r5, #4]
    d4f8:	4683      	mov	fp, r0
    d4fa:	4463      	add	r3, ip
    d4fc:	1c39      	adds	r1, r7, #0
    d4fe:	1c18      	adds	r0, r3, #0
    d500:	f7f3 fd38 	bl	f74 <__aeabi_fmul>
    d504:	2280      	movs	r2, #128	; 0x80
    d506:	0612      	lsls	r2, r2, #24
    d508:	4694      	mov	ip, r2
    d50a:	6160      	str	r0, [r4, #20]
    d50c:	68ab      	ldr	r3, [r5, #8]
    d50e:	1c39      	adds	r1, r7, #0
    d510:	4463      	add	r3, ip
    d512:	4681      	mov	r9, r0
    d514:	1c18      	adds	r0, r3, #0
    d516:	f7f3 fd2d 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:177
	}

	// construct x column of orientation matrix
	fR[X][X] = -fR[Z][Z] * ftmp;
    d51a:	2380      	movs	r3, #128	; 0x80
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:173
	}

	// normalize the negated accelerometer reading into the z column
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i] * frecipmodGxyz;
    d51c:	4682      	mov	sl, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:177
	}

	// construct x column of orientation matrix
	fR[X][X] = -fR[Z][Z] * ftmp;
    d51e:	061b      	lsls	r3, r3, #24
    d520:	4453      	add	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:173
	}

	// normalize the negated accelerometer reading into the z column
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i] * frecipmodGxyz;
    d522:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:177
	}

	// construct x column of orientation matrix
	fR[X][X] = -fR[Z][Z] * ftmp;
    d524:	1c31      	adds	r1, r6, #0
    d526:	1c18      	adds	r0, r3, #0
    d528:	f7f3 fd24 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:178
	fR[Y][X] = 0.0F;
    d52c:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:177
	{
		fR[i][Z] = -fGp[i] * frecipmodGxyz;
	}

	// construct x column of orientation matrix
	fR[X][X] = -fR[Z][Z] * ftmp;
    d52e:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:178
	fR[Y][X] = 0.0F;
    d530:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:179
	fR[Z][X] = fR[X][Z] * ftmp;;
    d532:	1c31      	adds	r1, r6, #0
    d534:	4658      	mov	r0, fp
    d536:	f7f3 fd1d 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:182

	// // construct y column of orientation matrix
	fR[X][Y] = fR[X][Z] * fR[Y][Z] * ftmp;
    d53a:	4649      	mov	r1, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:179
	}

	// construct x column of orientation matrix
	fR[X][X] = -fR[Z][Z] * ftmp;
	fR[Y][X] = 0.0F;
	fR[Z][X] = fR[X][Z] * ftmp;;
    d53c:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:182

	// // construct y column of orientation matrix
	fR[X][Y] = fR[X][Z] * fR[Y][Z] * ftmp;
    d53e:	4658      	mov	r0, fp
    d540:	f7f3 fd18 	bl	f74 <__aeabi_fmul>
    d544:	1c31      	adds	r1, r6, #0
    d546:	f7f3 fd15 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:183
	fR[Y][Y] = -fmodGxz * frecipmodGxyz;
    d54a:	2380      	movs	r3, #128	; 0x80
    d54c:	061b      	lsls	r3, r3, #24
    d54e:	4443      	add	r3, r8
    d550:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:182
	fR[X][X] = -fR[Z][Z] * ftmp;
	fR[Y][X] = 0.0F;
	fR[Z][X] = fR[X][Z] * ftmp;;

	// // construct y column of orientation matrix
	fR[X][Y] = fR[X][Z] * fR[Y][Z] * ftmp;
    d552:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:183
	fR[Y][Y] = -fmodGxz * frecipmodGxyz;
    d554:	1c18      	adds	r0, r3, #0
    d556:	f7f3 fd0d 	bl	f74 <__aeabi_fmul>
    d55a:	6120      	str	r0, [r4, #16]
    d55c:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:184
	if (fGp[Z] < 0.0F)
    d55e:	2100      	movs	r1, #0
    d560:	68a8      	ldr	r0, [r5, #8]
    d562:	f7f3 f971 	bl	848 <__aeabi_fcmplt>
    d566:	2800      	cmp	r0, #0
    d568:	d12b      	bne.n	d5c2 <f3DOFTiltWin8+0x16e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:188
	{
		fR[Y][Y] = -fR[Y][Y];
	}	
	fR[Z][Y] = fR[Y][Z] * fR[Z][Z] * ftmp;
    d56a:	4649      	mov	r1, r9
    d56c:	4650      	mov	r0, sl
    d56e:	f7f3 fd01 	bl	f74 <__aeabi_fmul>
    d572:	1c31      	adds	r1, r6, #0
    d574:	f7f3 fcfe 	bl	f74 <__aeabi_fmul>
    d578:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:191

	return;
}
    d57a:	bc3c      	pop	{r2, r3, r4, r5}
    d57c:	4690      	mov	r8, r2
    d57e:	4699      	mov	r9, r3
    d580:	46a2      	mov	sl, r4
    d582:	46ab      	mov	fp, r5
    d584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:146

	// check for vertical up or down gimbal lock case
	if (fmodGxz == 0.0F)
	{
		f3x3matrixAeqScalar(fR, 0.0F);
		fR[X][X] = 1.0F;
    d586:	26fe      	movs	r6, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:145
	}

	// check for vertical up or down gimbal lock case
	if (fmodGxz == 0.0F)
	{
		f3x3matrixAeqScalar(fR, 0.0F);
    d588:	1c20      	adds	r0, r4, #0
    d58a:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:146
		fR[X][X] = 1.0F;
    d58c:	05b6      	lsls	r6, r6, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:145
	}

	// check for vertical up or down gimbal lock case
	if (fmodGxz == 0.0F)
	{
		f3x3matrixAeqScalar(fR, 0.0F);
    d58e:	f7ff f825 	bl	c5dc <f3x3matrixAeqScalar>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:146
		fR[X][X] = 1.0F;
    d592:	6026      	str	r6, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:147
		if (fGp[Y] >= 0.0F)
    d594:	6868      	ldr	r0, [r5, #4]
    d596:	2100      	movs	r1, #0
    d598:	f7f3 f974 	bl	884 <__aeabi_fcmpge>
    d59c:	2800      	cmp	r0, #0
    d59e:	d00c      	beq.n	d5ba <f3DOFTiltWin8+0x166>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:149
		{
			fR[Y][Z] = -1.0F;
    d5a0:	4b0b      	ldr	r3, [pc, #44]	; (d5d0 <f3DOFTiltWin8+0x17c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:150
			fR[Z][Y] = 1.0F;
    d5a2:	61e6      	str	r6, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:149
	{
		f3x3matrixAeqScalar(fR, 0.0F);
		fR[X][X] = 1.0F;
		if (fGp[Y] >= 0.0F)
		{
			fR[Y][Z] = -1.0F;
    d5a4:	6163      	str	r3, [r4, #20]
    d5a6:	e7e8      	b.n	d57a <f3DOFTiltWin8+0x126>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:138
	fmodGxyz = fmodGxz + fGp[Y] * fGp[Y];

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
	{
		f3x3matrixAeqI(fR);
    d5a8:	1c20      	adds	r0, r4, #0
    d5aa:	f7ff f809 	bl	c5c0 <f3x3matrixAeqI>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:139
		return;
    d5ae:	e7e4      	b.n	d57a <f3DOFTiltWin8+0x126>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:167
	fmodGxyz = sqrtf(fmodGxyz);
	frecipmodGxyz = 1.0F / fmodGxyz;
	ftmp = fmodGxyz / fmodGxz;
	if (fGp[Z] < 0.0F)
	{
		ftmp = -ftmp;
    d5b0:	2380      	movs	r3, #128	; 0x80
    d5b2:	061b      	lsls	r3, r3, #24
    d5b4:	469c      	mov	ip, r3
    d5b6:	4466      	add	r6, ip
    d5b8:	e790      	b.n	d4dc <f3DOFTiltWin8+0x88>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:155
			fR[Z][Y] = 1.0F;
		}
		else
		{
			fR[Y][Z] = 1.0F;
			fR[Z][Y] = -1.0F;
    d5ba:	4b05      	ldr	r3, [pc, #20]	; (d5d0 <f3DOFTiltWin8+0x17c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:154
			fR[Y][Z] = -1.0F;
			fR[Z][Y] = 1.0F;
		}
		else
		{
			fR[Y][Z] = 1.0F;
    d5bc:	6166      	str	r6, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:155
			fR[Z][Y] = -1.0F;
    d5be:	61e3      	str	r3, [r4, #28]
    d5c0:	e7db      	b.n	d57a <f3DOFTiltWin8+0x126>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:186
	// // construct y column of orientation matrix
	fR[X][Y] = fR[X][Z] * fR[Y][Z] * ftmp;
	fR[Y][Y] = -fmodGxz * frecipmodGxyz;
	if (fGp[Z] < 0.0F)
	{
		fR[Y][Y] = -fR[Y][Y];
    d5c2:	2380      	movs	r3, #128	; 0x80
    d5c4:	061b      	lsls	r3, r3, #24
    d5c6:	469c      	mov	ip, r3
    d5c8:	4467      	add	r7, ip
    d5ca:	6127      	str	r7, [r4, #16]
    d5cc:	e7cd      	b.n	d56a <f3DOFTiltWin8+0x116>
    d5ce:	46c0      	nop			; (mov r8, r8)
    d5d0:	bf800000 	.word	0xbf800000

0000d5d4 <f3DOFMagnetometerMatrixNED>:
f3DOFMagnetometerMatrixNED():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:195
	return;
}

// Aerospace NED magnetometer 3DOF flat eCompass function computing rotation matrix fR
void f3DOFMagnetometerMatrixNED(float fR[][3], float fBc[])
{	
    d5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d5d6:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:200
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    d5d8:	6808      	ldr	r0, [r1, #0]
    d5da:	684d      	ldr	r5, [r1, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:195
	return;
}

// Aerospace NED magnetometer 3DOF flat eCompass function computing rotation matrix fR
void f3DOFMagnetometerMatrixNED(float fR[][3], float fBc[])
{	
    d5dc:	1c0e      	adds	r6, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:200
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    d5de:	1c01      	adds	r1, r0, #0
    d5e0:	f7f3 fcc8 	bl	f74 <__aeabi_fmul>
    d5e4:	1c29      	adds	r1, r5, #0
    d5e6:	1c07      	adds	r7, r0, #0
    d5e8:	1c28      	adds	r0, r5, #0
    d5ea:	f7f3 fcc3 	bl	f74 <__aeabi_fmul>
    d5ee:	1c01      	adds	r1, r0, #0
    d5f0:	1c38      	adds	r0, r7, #0
    d5f2:	f7f3 f951 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:203

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
    d5f6:	2500      	movs	r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:200
{	
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    d5f8:	f005 fa08 	bl	12a0c <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:203

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
    d5fc:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:200
{	
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    d5fe:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:203

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
    d600:	f7f3 f91c 	bl	83c <__aeabi_fcmpeq>
    d604:	2800      	cmp	r0, #0
    d606:	d117      	bne.n	d638 <f3DOFMagnetometerMatrixNED+0x64>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:211
		return;
	}

	// define the fixed entries in the z row and column
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
	fR[Z][Z] = 1.0F;
    d608:	23fe      	movs	r3, #254	; 0xfe
    d60a:	059b      	lsls	r3, r3, #22
    d60c:	6223      	str	r3, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:210
		f3x3matrixAeqI(fR);
		return;
	}

	// define the fixed entries in the z row and column
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
    d60e:	6165      	str	r5, [r4, #20]
    d610:	60a5      	str	r5, [r4, #8]
    d612:	61e5      	str	r5, [r4, #28]
    d614:	61a5      	str	r5, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:214
	fR[Z][Z] = 1.0F;
	
	// define the remaining entries
	fR[X][X] = fR[Y][Y] = fBc[X] / fmodBxy;
    d616:	6830      	ldr	r0, [r6, #0]
    d618:	1c39      	adds	r1, r7, #0
    d61a:	f7f3 fab9 	bl	b90 <__aeabi_fdiv>
    d61e:	6120      	str	r0, [r4, #16]
    d620:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:215
	fR[Y][X] = fBc[Y] / fmodBxy;
    d622:	6870      	ldr	r0, [r6, #4]
    d624:	1c39      	adds	r1, r7, #0
    d626:	f7f3 fab3 	bl	b90 <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:216
	fR[X][Y] = -fR[Y][X];
    d62a:	2380      	movs	r3, #128	; 0x80
    d62c:	061b      	lsls	r3, r3, #24
    d62e:	469c      	mov	ip, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:215
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
	fR[Z][Z] = 1.0F;
	
	// define the remaining entries
	fR[X][X] = fR[Y][Y] = fBc[X] / fmodBxy;
	fR[Y][X] = fBc[Y] / fmodBxy;
    d630:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:216
	fR[X][Y] = -fR[Y][X];
    d632:	4460      	add	r0, ip
    d634:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:219

	return;
}
    d636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:205
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
	{
		f3x3matrixAeqI(fR);
    d638:	1c20      	adds	r0, r4, #0
    d63a:	f7fe ffc1 	bl	c5c0 <f3x3matrixAeqI>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:206
		return;
    d63e:	e7fa      	b.n	d636 <f3DOFMagnetometerMatrixNED+0x62>

0000d640 <f3DOFMagnetometerMatrixAndroid>:
f3DOFMagnetometerMatrixAndroid():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:223
	return;
}

// Android magnetometer 3DOF flat eCompass function computing rotation matrix fR
void f3DOFMagnetometerMatrixAndroid(float fR[][3], float fBc[])
{	
    d640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d642:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:228
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    d644:	6808      	ldr	r0, [r1, #0]
    d646:	684d      	ldr	r5, [r1, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:223
	return;
}

// Android magnetometer 3DOF flat eCompass function computing rotation matrix fR
void f3DOFMagnetometerMatrixAndroid(float fR[][3], float fBc[])
{	
    d648:	1c0e      	adds	r6, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:228
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    d64a:	1c01      	adds	r1, r0, #0
    d64c:	f7f3 fc92 	bl	f74 <__aeabi_fmul>
    d650:	1c29      	adds	r1, r5, #0
    d652:	1c07      	adds	r7, r0, #0
    d654:	1c28      	adds	r0, r5, #0
    d656:	f7f3 fc8d 	bl	f74 <__aeabi_fmul>
    d65a:	1c01      	adds	r1, r0, #0
    d65c:	1c38      	adds	r0, r7, #0
    d65e:	f7f3 f91b 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:231

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
    d662:	2500      	movs	r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:228
{	
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    d664:	f005 f9d2 	bl	12a0c <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:231

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
    d668:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:228
{	
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    d66a:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:231

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
    d66c:	f7f3 f8e6 	bl	83c <__aeabi_fcmpeq>
    d670:	2800      	cmp	r0, #0
    d672:	d117      	bne.n	d6a4 <f3DOFMagnetometerMatrixAndroid+0x64>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:239
		return;
	}

	// define the fixed entries in the z row and column
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
	fR[Z][Z] = 1.0F;
    d674:	23fe      	movs	r3, #254	; 0xfe
    d676:	059b      	lsls	r3, r3, #22
    d678:	6223      	str	r3, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:238
		f3x3matrixAeqI(fR);
		return;
	}

	// define the fixed entries in the z row and column
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
    d67a:	6165      	str	r5, [r4, #20]
    d67c:	60a5      	str	r5, [r4, #8]
    d67e:	61e5      	str	r5, [r4, #28]
    d680:	61a5      	str	r5, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:242
	fR[Z][Z] = 1.0F;
	
	// define the remaining entries
	fR[X][X] = fR[Y][Y] = fBc[Y] / fmodBxy;
    d682:	6870      	ldr	r0, [r6, #4]
    d684:	1c39      	adds	r1, r7, #0
    d686:	f7f3 fa83 	bl	b90 <__aeabi_fdiv>
    d68a:	6120      	str	r0, [r4, #16]
    d68c:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:243
	fR[X][Y] = fBc[X] / fmodBxy;
    d68e:	6830      	ldr	r0, [r6, #0]
    d690:	1c39      	adds	r1, r7, #0
    d692:	f7f3 fa7d 	bl	b90 <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:244
	fR[Y][X] = -fR[X][Y];
    d696:	2380      	movs	r3, #128	; 0x80
    d698:	061b      	lsls	r3, r3, #24
    d69a:	469c      	mov	ip, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:243
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
	fR[Z][Z] = 1.0F;
	
	// define the remaining entries
	fR[X][X] = fR[Y][Y] = fBc[Y] / fmodBxy;
	fR[X][Y] = fBc[X] / fmodBxy;
    d69c:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:244
	fR[Y][X] = -fR[X][Y];
    d69e:	4460      	add	r0, ip
    d6a0:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:247

	return;
}
    d6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:233
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
	{
		f3x3matrixAeqI(fR);
    d6a4:	1c20      	adds	r0, r4, #0
    d6a6:	f7fe ff8b 	bl	c5c0 <f3x3matrixAeqI>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:234
		return;
    d6aa:	e7fa      	b.n	d6a2 <f3DOFMagnetometerMatrixAndroid+0x62>

0000d6ac <f3DOFMagnetometerMatrixWin8>:
f3DOFMagnetometerMatrixWin8():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:251
	return;
}

// Windows 8 magnetometer 3DOF flat eCompass function computing rotation matrix fR
void f3DOFMagnetometerMatrixWin8(float fR[][3], float fBc[])
{	
    d6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d6ae:	1c04      	adds	r4, r0, #0
f3DOFMagnetometerMatrixAndroid():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:228
{	
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    d6b0:	6808      	ldr	r0, [r1, #0]
    d6b2:	684d      	ldr	r5, [r1, #4]
f3DOFMagnetometerMatrixWin8():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:251
	return;
}

// Windows 8 magnetometer 3DOF flat eCompass function computing rotation matrix fR
void f3DOFMagnetometerMatrixWin8(float fR[][3], float fBc[])
{	
    d6b4:	1c0e      	adds	r6, r1, #0
f3DOFMagnetometerMatrixAndroid():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:228
{	
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    d6b6:	1c01      	adds	r1, r0, #0
    d6b8:	f7f3 fc5c 	bl	f74 <__aeabi_fmul>
    d6bc:	1c29      	adds	r1, r5, #0
    d6be:	1c07      	adds	r7, r0, #0
    d6c0:	1c28      	adds	r0, r5, #0
    d6c2:	f7f3 fc57 	bl	f74 <__aeabi_fmul>
    d6c6:	1c01      	adds	r1, r0, #0
    d6c8:	1c38      	adds	r0, r7, #0
    d6ca:	f7f3 f8e5 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:231

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
    d6ce:	2500      	movs	r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:228
{	
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    d6d0:	f005 f99c 	bl	12a0c <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:231

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
    d6d4:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:228
{	
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    d6d6:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:231

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
    d6d8:	f7f3 f8b0 	bl	83c <__aeabi_fcmpeq>
    d6dc:	2800      	cmp	r0, #0
    d6de:	d117      	bne.n	d710 <f3DOFMagnetometerMatrixWin8+0x64>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:239
		return;
	}

	// define the fixed entries in the z row and column
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
	fR[Z][Z] = 1.0F;
    d6e0:	23fe      	movs	r3, #254	; 0xfe
    d6e2:	059b      	lsls	r3, r3, #22
    d6e4:	6223      	str	r3, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:238
		f3x3matrixAeqI(fR);
		return;
	}

	// define the fixed entries in the z row and column
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
    d6e6:	6165      	str	r5, [r4, #20]
    d6e8:	60a5      	str	r5, [r4, #8]
    d6ea:	61e5      	str	r5, [r4, #28]
    d6ec:	61a5      	str	r5, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:242
	fR[Z][Z] = 1.0F;
	
	// define the remaining entries
	fR[X][X] = fR[Y][Y] = fBc[Y] / fmodBxy;
    d6ee:	6870      	ldr	r0, [r6, #4]
    d6f0:	1c39      	adds	r1, r7, #0
    d6f2:	f7f3 fa4d 	bl	b90 <__aeabi_fdiv>
    d6f6:	6120      	str	r0, [r4, #16]
    d6f8:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:243
	fR[X][Y] = fBc[X] / fmodBxy;
    d6fa:	6830      	ldr	r0, [r6, #0]
    d6fc:	1c39      	adds	r1, r7, #0
    d6fe:	f7f3 fa47 	bl	b90 <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:244
	fR[Y][X] = -fR[X][Y];
    d702:	2380      	movs	r3, #128	; 0x80
    d704:	061b      	lsls	r3, r3, #24
    d706:	469c      	mov	ip, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:243
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
	fR[Z][Z] = 1.0F;
	
	// define the remaining entries
	fR[X][X] = fR[Y][Y] = fBc[Y] / fmodBxy;
	fR[X][Y] = fBc[X] / fmodBxy;
    d708:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:244
	fR[Y][X] = -fR[X][Y];
    d70a:	4460      	add	r0, ip
    d70c:	60e0      	str	r0, [r4, #12]
f3DOFMagnetometerMatrixWin8():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:256
{	
	// call the Android function since it is identical to the Windows 8 matrix
	f3DOFMagnetometerMatrixAndroid(fR, fBc);

	return;
}
    d70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
f3DOFMagnetometerMatrixAndroid():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:233
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
	{
		f3x3matrixAeqI(fR);
    d710:	1c20      	adds	r0, r4, #0
    d712:	f7fe ff55 	bl	c5c0 <f3x3matrixAeqI>
    d716:	e7fa      	b.n	d70e <f3DOFMagnetometerMatrixWin8+0x62>

0000d718 <feCompassNED>:
feCompassNED():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:260
	return;
}

// NED: 6DOF e-Compass function computing rotation matrix fR
void feCompassNED(float fR[][3], float *pfDelta, float fBc[], float fGp[])
{
    d718:	b5f0      	push	{r4, r5, r6, r7, lr}
    d71a:	465f      	mov	r7, fp
    d71c:	4656      	mov	r6, sl
    d71e:	464d      	mov	r5, r9
    d720:	4644      	mov	r4, r8
    d722:	4698      	mov	r8, r3
    d724:	b4f0      	push	{r4, r5, r6, r7}
    d726:	1c17      	adds	r7, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:269
	float fGdotBc;					// dot product of vectors G.Bc
	float ftmp;						// scratch variable
	int8 i, j;						// loop counters

	// set the inclination angle to zero in case it is not computed later
	*pfDelta = 0.0F;
    d728:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:274

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    d72a:	4643      	mov	r3, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:269
	float fGdotBc;					// dot product of vectors G.Bc
	float ftmp;						// scratch variable
	int8 i, j;						// loop counters

	// set the inclination angle to zero in case it is not computed later
	*pfDelta = 0.0F;
    d72c:	600a      	str	r2, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:274

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    d72e:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:260
	return;
}

// NED: 6DOF e-Compass function computing rotation matrix fR
void feCompassNED(float fR[][3], float *pfDelta, float fBc[], float fGp[])
{
    d730:	b089      	sub	sp, #36	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:274
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    d732:	6083      	str	r3, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:275
		fR[i][X] = fBc[i];
    d734:	683a      	ldr	r2, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:260
	return;
}

// NED: 6DOF e-Compass function computing rotation matrix fR
void feCompassNED(float fR[][3], float *pfDelta, float fBc[], float fGp[])
{
    d736:	9103      	str	r1, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:275

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
		fR[i][X] = fBc[i];
    d738:	6002      	str	r2, [r0, #0]
    d73a:	4693      	mov	fp, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:274
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    d73c:	4642      	mov	r2, r8
    d73e:	4641      	mov	r1, r8
    d740:	6855      	ldr	r5, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:260
	return;
}

// NED: 6DOF e-Compass function computing rotation matrix fR
void feCompassNED(float fR[][3], float *pfDelta, float fBc[], float fGp[])
{
    d742:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:274
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    d744:	6145      	str	r5, [r0, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:275
		fR[i][X] = fBc[i];
    d746:	687a      	ldr	r2, [r7, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:274
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    d748:	9300      	str	r3, [sp, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:275
		fR[i][X] = fBc[i];
    d74a:	60c2      	str	r2, [r0, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:274
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    d74c:	688e      	ldr	r6, [r1, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:275
		fR[i][X] = fBc[i];
    d74e:	9201      	str	r2, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:274
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    d750:	6206      	str	r6, [r0, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:275
		fR[i][X] = fBc[i];
    d752:	68b9      	ldr	r1, [r7, #8]
    d754:	6181      	str	r1, [r0, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:279
	}

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    d756:	1c28      	adds	r0, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:275

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
		fR[i][X] = fBc[i];
    d758:	4689      	mov	r9, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:279
	}

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    d75a:	f7f3 fc0b 	bl	f74 <__aeabi_fmul>
    d75e:	9901      	ldr	r1, [sp, #4]
    d760:	4682      	mov	sl, r0
    d762:	1c30      	adds	r0, r6, #0
    d764:	f7f3 fc06 	bl	f74 <__aeabi_fmul>
    d768:	1c01      	adds	r1, r0, #0
    d76a:	4650      	mov	r0, sl
    d76c:	f7f3 fd34 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:280
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    d770:	4659      	mov	r1, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:279
		fR[i][Z] = fGp[i];
		fR[i][X] = fBc[i];
	}

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    d772:	9002      	str	r0, [sp, #8]
    d774:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:280
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    d776:	1c30      	adds	r0, r6, #0
    d778:	f7f3 fbfc 	bl	f74 <__aeabi_fmul>
    d77c:	9b00      	ldr	r3, [sp, #0]
    d77e:	4682      	mov	sl, r0
    d780:	1c19      	adds	r1, r3, #0
    d782:	4648      	mov	r0, r9
    d784:	4699      	mov	r9, r3
    d786:	f7f3 fbf5 	bl	f74 <__aeabi_fmul>
    d78a:	1c01      	adds	r1, r0, #0
    d78c:	4650      	mov	r0, sl
    d78e:	f7f3 fd23 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:281
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    d792:	464b      	mov	r3, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:280
		fR[i][X] = fBc[i];
	}

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    d794:	4682      	mov	sl, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:281
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    d796:	4649      	mov	r1, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:280
		fR[i][X] = fBc[i];
	}

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    d798:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:281
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    d79a:	9801      	ldr	r0, [sp, #4]
    d79c:	9300      	str	r3, [sp, #0]
    d79e:	f7f3 fbe9 	bl	f74 <__aeabi_fmul>
    d7a2:	4659      	mov	r1, fp
    d7a4:	4681      	mov	r9, r0
    d7a6:	1c28      	adds	r0, r5, #0
    d7a8:	f7f3 fbe4 	bl	f74 <__aeabi_fmul>
    d7ac:	1c01      	adds	r1, r0, #0
    d7ae:	4648      	mov	r0, r9
    d7b0:	f7f3 fd12 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:284

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
    d7b4:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:281
	}

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    d7b6:	4683      	mov	fp, r0
    d7b8:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:284

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
    d7ba:	1c30      	adds	r0, r6, #0
    d7bc:	f7f3 fbda 	bl	f74 <__aeabi_fmul>
    d7c0:	4659      	mov	r1, fp
    d7c2:	4681      	mov	r9, r0
    d7c4:	1c28      	adds	r0, r5, #0
    d7c6:	f7f3 fbd5 	bl	f74 <__aeabi_fmul>
    d7ca:	1c01      	adds	r1, r0, #0
    d7cc:	4648      	mov	r0, r9
    d7ce:	f7f3 fd03 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:285
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    d7d2:	4659      	mov	r1, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:284
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
    d7d4:	4681      	mov	r9, r0
    d7d6:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:285
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    d7d8:	9800      	ldr	r0, [sp, #0]
    d7da:	f7f3 fbcb 	bl	f74 <__aeabi_fmul>
    d7de:	9902      	ldr	r1, [sp, #8]
    d7e0:	4683      	mov	fp, r0
    d7e2:	1c30      	adds	r0, r6, #0
    d7e4:	f7f3 fbc6 	bl	f74 <__aeabi_fmul>
    d7e8:	1c01      	adds	r1, r0, #0
    d7ea:	4658      	mov	r0, fp
    d7ec:	f7f3 fcf4 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:286
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    d7f0:	9902      	ldr	r1, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:285
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    d7f2:	1c06      	adds	r6, r0, #0
    d7f4:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:286
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    d7f6:	1c28      	adds	r0, r5, #0
    d7f8:	f7f3 fbbc 	bl	f74 <__aeabi_fmul>
    d7fc:	4651      	mov	r1, sl
    d7fe:	1c05      	adds	r5, r0, #0
    d800:	9800      	ldr	r0, [sp, #0]
    d802:	f7f3 fbb7 	bl	f74 <__aeabi_fmul>
    d806:	1c01      	adds	r1, r0, #0
    d808:	1c28      	adds	r0, r5, #0
    d80a:	f7f3 fce5 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:289

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
    d80e:	4649      	mov	r1, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:286
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    d810:	1c05      	adds	r5, r0, #0
    d812:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:289

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
    d814:	4648      	mov	r0, r9
    d816:	f7f3 fbad 	bl	f74 <__aeabi_fmul>
    d81a:	1c31      	adds	r1, r6, #0
    d81c:	4681      	mov	r9, r0
    d81e:	1c30      	adds	r0, r6, #0
    d820:	f7f3 fba8 	bl	f74 <__aeabi_fmul>
    d824:	1c01      	adds	r1, r0, #0
    d826:	4648      	mov	r0, r9
    d828:	f7f3 f836 	bl	898 <__aeabi_fadd>
    d82c:	1c29      	adds	r1, r5, #0
    d82e:	1c06      	adds	r6, r0, #0
    d830:	1c28      	adds	r0, r5, #0
    d832:	f7f3 fb9f 	bl	f74 <__aeabi_fmul>
    d836:	1c01      	adds	r1, r0, #0
    d838:	1c30      	adds	r0, r6, #0
    d83a:	f7f3 f82d 	bl	898 <__aeabi_fadd>
    d83e:	f005 f8e5 	bl	12a0c <sqrtf>
    d842:	1c05      	adds	r5, r0, #0
    d844:	9005      	str	r0, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:290
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
    d846:	6860      	ldr	r0, [r4, #4]
    d848:	6923      	ldr	r3, [r4, #16]
    d84a:	1c01      	adds	r1, r0, #0
    d84c:	4699      	mov	r9, r3
    d84e:	f7f3 fb91 	bl	f74 <__aeabi_fmul>
    d852:	4649      	mov	r1, r9
    d854:	4682      	mov	sl, r0
    d856:	4648      	mov	r0, r9
    d858:	f7f3 fb8c 	bl	f74 <__aeabi_fmul>
    d85c:	1c01      	adds	r1, r0, #0
    d85e:	4650      	mov	r0, sl
    d860:	f7f3 f81a 	bl	898 <__aeabi_fadd>
    d864:	69e6      	ldr	r6, [r4, #28]
    d866:	4681      	mov	r9, r0
    d868:	1c31      	adds	r1, r6, #0
    d86a:	1c30      	adds	r0, r6, #0
    d86c:	f7f3 fb82 	bl	f74 <__aeabi_fmul>
    d870:	1c01      	adds	r1, r0, #0
    d872:	4648      	mov	r0, r9
    d874:	f7f3 f810 	bl	898 <__aeabi_fadd>
    d878:	f005 f8c8 	bl	12a0c <sqrtf>
    d87c:	9006      	str	r0, [sp, #24]
    d87e:	4682      	mov	sl, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:291
	fmod[Z] = sqrtf(fR[X][Z] * fR[X][Z] + fR[Y][Z] * fR[Y][Z] + fR[Z][Z] * fR[Z][Z]);
    d880:	68a0      	ldr	r0, [r4, #8]
    d882:	6963      	ldr	r3, [r4, #20]
    d884:	1c01      	adds	r1, r0, #0
    d886:	4699      	mov	r9, r3
    d888:	f7f3 fb74 	bl	f74 <__aeabi_fmul>
    d88c:	4649      	mov	r1, r9
    d88e:	4683      	mov	fp, r0
    d890:	4648      	mov	r0, r9
    d892:	f7f3 fb6f 	bl	f74 <__aeabi_fmul>
    d896:	1c01      	adds	r1, r0, #0
    d898:	4658      	mov	r0, fp
    d89a:	f7f2 fffd 	bl	898 <__aeabi_fadd>
    d89e:	6a26      	ldr	r6, [r4, #32]
    d8a0:	4681      	mov	r9, r0
    d8a2:	1c31      	adds	r1, r6, #0
    d8a4:	1c30      	adds	r0, r6, #0
    d8a6:	f7f3 fb65 	bl	f74 <__aeabi_fmul>
    d8aa:	1c01      	adds	r1, r0, #0
    d8ac:	4648      	mov	r0, r9
    d8ae:	f7f2 fff3 	bl	898 <__aeabi_fadd>
    d8b2:	f005 f8ab 	bl	12a0c <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:294

	// normalize the rotation matrix columns
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
    d8b6:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:291
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
	fmod[Z] = sqrtf(fR[X][Z] * fR[X][Z] + fR[Y][Z] * fR[Y][Z] + fR[Z][Z] * fR[Z][Z]);
    d8b8:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:294

	// normalize the rotation matrix columns
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
    d8ba:	1c28      	adds	r0, r5, #0
    d8bc:	f7f2 ffbe 	bl	83c <__aeabi_fcmpeq>
    d8c0:	2800      	cmp	r0, #0
    d8c2:	d000      	beq.n	d8c6 <feCompassNED+0x1ae>
    d8c4:	e09d      	b.n	da02 <feCompassNED+0x2ea>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:294 (discriminator 1)
    d8c6:	4650      	mov	r0, sl
    d8c8:	2100      	movs	r1, #0
    d8ca:	f7f2 ffb7 	bl	83c <__aeabi_fcmpeq>
    d8ce:	2800      	cmp	r0, #0
    d8d0:	d000      	beq.n	d8d4 <feCompassNED+0x1bc>
    d8d2:	e096      	b.n	da02 <feCompassNED+0x2ea>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:294 (discriminator 2)
    d8d4:	1c30      	adds	r0, r6, #0
    d8d6:	2100      	movs	r1, #0
    d8d8:	f7f2 ffb0 	bl	83c <__aeabi_fcmpeq>
    d8dc:	2800      	cmp	r0, #0
    d8de:	d000      	beq.n	d8e2 <feCompassNED+0x1ca>
    d8e0:	e08f      	b.n	da02 <feCompassNED+0x2ea>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:299
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    d8e2:	20fe      	movs	r0, #254	; 0xfe
    d8e4:	9905      	ldr	r1, [sp, #20]
    d8e6:	0580      	lsls	r0, r0, #22
    d8e8:	f7f3 f952 	bl	b90 <__aeabi_fdiv>
    d8ec:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:304
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    d8ee:	1c29      	adds	r1, r5, #0
    d8f0:	6820      	ldr	r0, [r4, #0]
    d8f2:	f7f3 fb3f 	bl	f74 <__aeabi_fmul>
    d8f6:	1c29      	adds	r1, r5, #0
    d8f8:	6020      	str	r0, [r4, #0]
    d8fa:	68e0      	ldr	r0, [r4, #12]
    d8fc:	f7f3 fb3a 	bl	f74 <__aeabi_fmul>
    d900:	1c29      	adds	r1, r5, #0
    d902:	60e0      	str	r0, [r4, #12]
    d904:	69a0      	ldr	r0, [r4, #24]
    d906:	f7f3 fb35 	bl	f74 <__aeabi_fmul>
    d90a:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:299
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    d90c:	20fe      	movs	r0, #254	; 0xfe
    d90e:	9906      	ldr	r1, [sp, #24]
    d910:	0580      	lsls	r0, r0, #22
    d912:	f7f3 f93d 	bl	b90 <__aeabi_fdiv>
    d916:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:304
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    d918:	1c29      	adds	r1, r5, #0
    d91a:	6860      	ldr	r0, [r4, #4]
    d91c:	f7f3 fb2a 	bl	f74 <__aeabi_fmul>
    d920:	1c29      	adds	r1, r5, #0
    d922:	6060      	str	r0, [r4, #4]
    d924:	6920      	ldr	r0, [r4, #16]
    d926:	f7f3 fb25 	bl	f74 <__aeabi_fmul>
    d92a:	1c29      	adds	r1, r5, #0
    d92c:	6120      	str	r0, [r4, #16]
    d92e:	69e0      	ldr	r0, [r4, #28]
    d930:	f7f3 fb20 	bl	f74 <__aeabi_fmul>
    d934:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:299
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    d936:	20fe      	movs	r0, #254	; 0xfe
    d938:	1c31      	adds	r1, r6, #0
    d93a:	0580      	lsls	r0, r0, #22
    d93c:	f7f3 f928 	bl	b90 <__aeabi_fdiv>
    d940:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:304
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    d942:	1c29      	adds	r1, r5, #0
    d944:	68a0      	ldr	r0, [r4, #8]
    d946:	f7f3 fb15 	bl	f74 <__aeabi_fmul>
    d94a:	1c29      	adds	r1, r5, #0
    d94c:	60a0      	str	r0, [r4, #8]
    d94e:	6960      	ldr	r0, [r4, #20]
    d950:	f7f3 fb10 	bl	f74 <__aeabi_fmul>
    d954:	1c29      	adds	r1, r5, #0
    d956:	6160      	str	r0, [r4, #20]
    d958:	6a20      	ldr	r0, [r4, #32]
    d95a:	f7f3 fb0b 	bl	f74 <__aeabi_fmul>
    d95e:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:316
		f3x3matrixAeqI(fR);
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
    d960:	6838      	ldr	r0, [r7, #0]
    d962:	687d      	ldr	r5, [r7, #4]
    d964:	1c01      	adds	r1, r0, #0
    d966:	f7f3 fb05 	bl	f74 <__aeabi_fmul>
    d96a:	1c29      	adds	r1, r5, #0
    d96c:	4681      	mov	r9, r0
    d96e:	1c28      	adds	r0, r5, #0
    d970:	f7f3 fb00 	bl	f74 <__aeabi_fmul>
    d974:	1c01      	adds	r1, r0, #0
    d976:	4648      	mov	r0, r9
    d978:	f7f2 ff8e 	bl	898 <__aeabi_fadd>
    d97c:	68bc      	ldr	r4, [r7, #8]
    d97e:	1c05      	adds	r5, r0, #0
    d980:	1c21      	adds	r1, r4, #0
    d982:	1c20      	adds	r0, r4, #0
    d984:	f7f3 faf6 	bl	f74 <__aeabi_fmul>
    d988:	1c01      	adds	r1, r0, #0
    d98a:	1c28      	adds	r0, r5, #0
    d98c:	f7f2 ff84 	bl	898 <__aeabi_fadd>
    d990:	f005 f83c 	bl	12a0c <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:317
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    d994:	4643      	mov	r3, r8
    d996:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:318
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
    d998:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:317
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    d99a:	4699      	mov	r9, r3
    d99c:	4643      	mov	r3, r8
    d99e:	685b      	ldr	r3, [r3, #4]
    d9a0:	683d      	ldr	r5, [r7, #0]
    d9a2:	469a      	mov	sl, r3
    d9a4:	687b      	ldr	r3, [r7, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:316
		f3x3matrixAeqI(fR);
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
    d9a6:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:317
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    d9a8:	469b      	mov	fp, r3
    d9aa:	4643      	mov	r3, r8
    d9ac:	689b      	ldr	r3, [r3, #8]
    d9ae:	68bf      	ldr	r7, [r7, #8]
    d9b0:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:318
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
    d9b2:	f7f2 ff43 	bl	83c <__aeabi_fcmpeq>
    d9b6:	2800      	cmp	r0, #0
    d9b8:	d126      	bne.n	da08 <feCompassNED+0x2f0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:317
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    d9ba:	1c29      	adds	r1, r5, #0
    d9bc:	4648      	mov	r0, r9
    d9be:	f7f3 fad9 	bl	f74 <__aeabi_fmul>
    d9c2:	4659      	mov	r1, fp
    d9c4:	1c05      	adds	r5, r0, #0
    d9c6:	4650      	mov	r0, sl
    d9c8:	f7f3 fad4 	bl	f74 <__aeabi_fmul>
    d9cc:	1c01      	adds	r1, r0, #0
    d9ce:	1c28      	adds	r0, r5, #0
    d9d0:	f7f2 ff62 	bl	898 <__aeabi_fadd>
    d9d4:	1c39      	adds	r1, r7, #0
    d9d6:	1c05      	adds	r5, r0, #0
    d9d8:	4640      	mov	r0, r8
    d9da:	f7f3 facb 	bl	f74 <__aeabi_fmul>
    d9de:	1c01      	adds	r1, r0, #0
    d9e0:	1c28      	adds	r0, r5, #0
    d9e2:	f7f2 ff59 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:320
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
	{
		*pfDelta = fasin_deg(fGdotBc / (fmod[Z] * fmodBc));
    d9e6:	1c21      	adds	r1, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:317
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    d9e8:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:320
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
	{
		*pfDelta = fasin_deg(fGdotBc / (fmod[Z] * fmodBc));
    d9ea:	1c30      	adds	r0, r6, #0
    d9ec:	f7f3 fac2 	bl	f74 <__aeabi_fmul>
    d9f0:	1c01      	adds	r1, r0, #0
    d9f2:	1c28      	adds	r0, r5, #0
    d9f4:	f7f3 f8cc 	bl	b90 <__aeabi_fdiv>
    d9f8:	f7f5 f9e8 	bl	2dcc <fasin_deg>
    d9fc:	9b03      	ldr	r3, [sp, #12]
    d9fe:	6018      	str	r0, [r3, #0]
    da00:	e002      	b.n	da08 <feCompassNED+0x2f0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:311
		}
	}
	else
	{
		// no solution is possible to set rotation to identity matrix
		f3x3matrixAeqI(fR);
    da02:	1c20      	adds	r0, r4, #0
    da04:	f7fe fddc 	bl	c5c0 <f3x3matrixAeqI>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:324
	{
		*pfDelta = fasin_deg(fGdotBc / (fmod[Z] * fmodBc));
	}

	return;
}
    da08:	b009      	add	sp, #36	; 0x24
    da0a:	bc3c      	pop	{r2, r3, r4, r5}
    da0c:	4690      	mov	r8, r2
    da0e:	4699      	mov	r9, r3
    da10:	46a2      	mov	sl, r4
    da12:	46ab      	mov	fp, r5
    da14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    da16:	46c0      	nop			; (mov r8, r8)

0000da18 <feCompassAndroid>:
feCompassAndroid():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:328

// Android: 6DOF e-Compass function computing rotation matrix fR
void feCompassAndroid(float fR[][3],  float *pfDelta, float fBc[], float fGp[])
{
    da18:	b5f0      	push	{r4, r5, r6, r7, lr}
    da1a:	4656      	mov	r6, sl
    da1c:	469a      	mov	sl, r3
    da1e:	465f      	mov	r7, fp
    da20:	464d      	mov	r5, r9
    da22:	4644      	mov	r4, r8
    da24:	4691      	mov	r9, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:337
	float fGdotBc;					// dot product of vectors G.Bc
	float ftmp;						// scratch variable
	int8 i, j;						// loop counters

	// set the inclination angle to zero in case it is not computed later
	*pfDelta = 0.0F;
    da26:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:342

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    da28:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:328
	return;
}

// Android: 6DOF e-Compass function computing rotation matrix fR
void feCompassAndroid(float fR[][3],  float *pfDelta, float fBc[], float fGp[])
{
    da2a:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:337
	float fGdotBc;					// dot product of vectors G.Bc
	float ftmp;						// scratch variable
	int8 i, j;						// loop counters

	// set the inclination angle to zero in case it is not computed later
	*pfDelta = 0.0F;
    da2c:	600a      	str	r2, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:343

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
		fR[i][Y] = fBc[i];
    da2e:	464a      	mov	r2, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:342
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    da30:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:328
	return;
}

// Android: 6DOF e-Compass function computing rotation matrix fR
void feCompassAndroid(float fR[][3],  float *pfDelta, float fBc[], float fGp[])
{
    da32:	b089      	sub	sp, #36	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:342
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    da34:	6083      	str	r3, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:343
		fR[i][Y] = fBc[i];
    da36:	6815      	ldr	r5, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:342
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    da38:	4652      	mov	r2, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:328
	return;
}

// Android: 6DOF e-Compass function computing rotation matrix fR
void feCompassAndroid(float fR[][3],  float *pfDelta, float fBc[], float fGp[])
{
    da3a:	9103      	str	r1, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:343

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
		fR[i][Y] = fBc[i];
    da3c:	4649      	mov	r1, r9
    da3e:	6045      	str	r5, [r0, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:342
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    da40:	6852      	ldr	r2, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:328
	return;
}

// Android: 6DOF e-Compass function computing rotation matrix fR
void feCompassAndroid(float fR[][3],  float *pfDelta, float fBc[], float fGp[])
{
    da42:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:342
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    da44:	6142      	str	r2, [r0, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:343
		fR[i][Y] = fBc[i];
    da46:	6849      	ldr	r1, [r1, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:342
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    da48:	9201      	str	r2, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:343
		fR[i][Y] = fBc[i];
    da4a:	6101      	str	r1, [r0, #16]
    da4c:	468b      	mov	fp, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:342
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    da4e:	4651      	mov	r1, sl
    da50:	6889      	ldr	r1, [r1, #8]
    da52:	9302      	str	r3, [sp, #8]
    da54:	4688      	mov	r8, r1
    da56:	6201      	str	r1, [r0, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:343
		fR[i][Y] = fBc[i];
    da58:	4649      	mov	r1, r9
    da5a:	688e      	ldr	r6, [r1, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:347
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
    da5c:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:343

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
		fR[i][Y] = fBc[i];
    da5e:	61c6      	str	r6, [r0, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:347
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
    da60:	4658      	mov	r0, fp
    da62:	f7f3 fa87 	bl	f74 <__aeabi_fmul>
    da66:	9901      	ldr	r1, [sp, #4]
    da68:	1c07      	adds	r7, r0, #0
    da6a:	1c30      	adds	r0, r6, #0
    da6c:	f7f3 fa82 	bl	f74 <__aeabi_fmul>
    da70:	1c01      	adds	r1, r0, #0
    da72:	1c38      	adds	r0, r7, #0
    da74:	f7f3 fbb0 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:348
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    da78:	9902      	ldr	r1, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:347
		fR[i][Z] = fGp[i];
		fR[i][Y] = fBc[i];
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
    da7a:	1c07      	adds	r7, r0, #0
    da7c:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:348
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    da7e:	1c30      	adds	r0, r6, #0
    da80:	f7f3 fa78 	bl	f74 <__aeabi_fmul>
    da84:	1c29      	adds	r1, r5, #0
    da86:	1c06      	adds	r6, r0, #0
    da88:	4640      	mov	r0, r8
    da8a:	f7f3 fa73 	bl	f74 <__aeabi_fmul>
    da8e:	1c01      	adds	r1, r0, #0
    da90:	1c30      	adds	r0, r6, #0
    da92:	f7f3 fba1 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:349
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    da96:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:348
		fR[i][Y] = fBc[i];
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    da98:	1c06      	adds	r6, r0, #0
    da9a:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:349
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    da9c:	9801      	ldr	r0, [sp, #4]
    da9e:	f7f3 fa69 	bl	f74 <__aeabi_fmul>
    daa2:	9902      	ldr	r1, [sp, #8]
    daa4:	1c05      	adds	r5, r0, #0
    daa6:	4658      	mov	r0, fp
    daa8:	f7f3 fa64 	bl	f74 <__aeabi_fmul>
    daac:	1c01      	adds	r1, r0, #0
    daae:	1c28      	adds	r0, r5, #0
    dab0:	f7f3 fb92 	bl	11d8 <__aeabi_fsub>
    dab4:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:352

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    dab6:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:349
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    dab8:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:352

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    daba:	9801      	ldr	r0, [sp, #4]
    dabc:	f7f3 fa5a 	bl	f74 <__aeabi_fmul>
    dac0:	1c31      	adds	r1, r6, #0
    dac2:	4683      	mov	fp, r0
    dac4:	4640      	mov	r0, r8
    dac6:	f7f3 fa55 	bl	f74 <__aeabi_fmul>
    daca:	1c01      	adds	r1, r0, #0
    dacc:	4658      	mov	r0, fp
    dace:	f7f3 fb83 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:353
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    dad2:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:352
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    dad4:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:353
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    dad6:	4640      	mov	r0, r8
    dad8:	f7f3 fa4c 	bl	f74 <__aeabi_fmul>
    dadc:	9b02      	ldr	r3, [sp, #8]
    dade:	4680      	mov	r8, r0
    dae0:	1c29      	adds	r1, r5, #0
    dae2:	1c18      	adds	r0, r3, #0
    dae4:	469b      	mov	fp, r3
    dae6:	f7f3 fa45 	bl	f74 <__aeabi_fmul>
    daea:	1c01      	adds	r1, r0, #0
    daec:	4640      	mov	r0, r8
    daee:	f7f3 fb73 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:354
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    daf2:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:353
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    daf4:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:354
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    daf6:	4658      	mov	r0, fp
    daf8:	f7f3 fa3c 	bl	f74 <__aeabi_fmul>
    dafc:	1c39      	adds	r1, r7, #0
    dafe:	4680      	mov	r8, r0
    db00:	9801      	ldr	r0, [sp, #4]
    db02:	f7f3 fa37 	bl	f74 <__aeabi_fmul>
    db06:	1c01      	adds	r1, r0, #0
    db08:	4640      	mov	r0, r8
    db0a:	f7f3 fb65 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:357

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
    db0e:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:354
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    db10:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:357

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
    db12:	1c38      	adds	r0, r7, #0
    db14:	f7f3 fa2e 	bl	f74 <__aeabi_fmul>
    db18:	1c31      	adds	r1, r6, #0
    db1a:	1c07      	adds	r7, r0, #0
    db1c:	1c30      	adds	r0, r6, #0
    db1e:	f7f3 fa29 	bl	f74 <__aeabi_fmul>
    db22:	1c01      	adds	r1, r0, #0
    db24:	1c38      	adds	r0, r7, #0
    db26:	f7f2 feb7 	bl	898 <__aeabi_fadd>
    db2a:	1c29      	adds	r1, r5, #0
    db2c:	1c06      	adds	r6, r0, #0
    db2e:	1c28      	adds	r0, r5, #0
    db30:	f7f3 fa20 	bl	f74 <__aeabi_fmul>
    db34:	1c01      	adds	r1, r0, #0
    db36:	1c30      	adds	r0, r6, #0
    db38:	f7f2 feae 	bl	898 <__aeabi_fadd>
    db3c:	f004 ff66 	bl	12a0c <sqrtf>
    db40:	1c05      	adds	r5, r0, #0
    db42:	9005      	str	r0, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:358
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
    db44:	6860      	ldr	r0, [r4, #4]
    db46:	6927      	ldr	r7, [r4, #16]
    db48:	1c01      	adds	r1, r0, #0
    db4a:	f7f3 fa13 	bl	f74 <__aeabi_fmul>
    db4e:	1c39      	adds	r1, r7, #0
    db50:	4680      	mov	r8, r0
    db52:	1c38      	adds	r0, r7, #0
    db54:	f7f3 fa0e 	bl	f74 <__aeabi_fmul>
    db58:	1c01      	adds	r1, r0, #0
    db5a:	4640      	mov	r0, r8
    db5c:	f7f2 fe9c 	bl	898 <__aeabi_fadd>
    db60:	69e6      	ldr	r6, [r4, #28]
    db62:	1c07      	adds	r7, r0, #0
    db64:	1c31      	adds	r1, r6, #0
    db66:	1c30      	adds	r0, r6, #0
    db68:	f7f3 fa04 	bl	f74 <__aeabi_fmul>
    db6c:	1c01      	adds	r1, r0, #0
    db6e:	1c38      	adds	r0, r7, #0
    db70:	f7f2 fe92 	bl	898 <__aeabi_fadd>
    db74:	f004 ff4a 	bl	12a0c <sqrtf>
    db78:	9006      	str	r0, [sp, #24]
    db7a:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:359
	fmod[Z] = sqrtf(fR[X][Z] * fR[X][Z] + fR[Y][Z] * fR[Y][Z] + fR[Z][Z] * fR[Z][Z]);
    db7c:	68a0      	ldr	r0, [r4, #8]
    db7e:	6967      	ldr	r7, [r4, #20]
    db80:	1c01      	adds	r1, r0, #0
    db82:	f7f3 f9f7 	bl	f74 <__aeabi_fmul>
    db86:	1c39      	adds	r1, r7, #0
    db88:	4683      	mov	fp, r0
    db8a:	1c38      	adds	r0, r7, #0
    db8c:	f7f3 f9f2 	bl	f74 <__aeabi_fmul>
    db90:	1c01      	adds	r1, r0, #0
    db92:	4658      	mov	r0, fp
    db94:	f7f2 fe80 	bl	898 <__aeabi_fadd>
    db98:	6a26      	ldr	r6, [r4, #32]
    db9a:	1c07      	adds	r7, r0, #0
    db9c:	1c31      	adds	r1, r6, #0
    db9e:	1c30      	adds	r0, r6, #0
    dba0:	f7f3 f9e8 	bl	f74 <__aeabi_fmul>
    dba4:	1c01      	adds	r1, r0, #0
    dba6:	1c38      	adds	r0, r7, #0
    dba8:	f7f2 fe76 	bl	898 <__aeabi_fadd>
    dbac:	f004 ff2e 	bl	12a0c <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:362

	// normalize the rotation matrix columns
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
    dbb0:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:359
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
	fmod[Z] = sqrtf(fR[X][Z] * fR[X][Z] + fR[Y][Z] * fR[Y][Z] + fR[Z][Z] * fR[Z][Z]);
    dbb2:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:362

	// normalize the rotation matrix columns
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
    dbb4:	1c28      	adds	r0, r5, #0
    dbb6:	f7f2 fe41 	bl	83c <__aeabi_fcmpeq>
    dbba:	2800      	cmp	r0, #0
    dbbc:	d000      	beq.n	dbc0 <feCompassAndroid+0x1a8>
    dbbe:	e0a3      	b.n	dd08 <feCompassAndroid+0x2f0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:362 (discriminator 1)
    dbc0:	4640      	mov	r0, r8
    dbc2:	2100      	movs	r1, #0
    dbc4:	f7f2 fe3a 	bl	83c <__aeabi_fcmpeq>
    dbc8:	2800      	cmp	r0, #0
    dbca:	d000      	beq.n	dbce <feCompassAndroid+0x1b6>
    dbcc:	e09c      	b.n	dd08 <feCompassAndroid+0x2f0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:362 (discriminator 2)
    dbce:	1c30      	adds	r0, r6, #0
    dbd0:	2100      	movs	r1, #0
    dbd2:	f7f2 fe33 	bl	83c <__aeabi_fcmpeq>
    dbd6:	2800      	cmp	r0, #0
    dbd8:	d000      	beq.n	dbdc <feCompassAndroid+0x1c4>
    dbda:	e095      	b.n	dd08 <feCompassAndroid+0x2f0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:367
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    dbdc:	20fe      	movs	r0, #254	; 0xfe
    dbde:	9905      	ldr	r1, [sp, #20]
    dbe0:	0580      	lsls	r0, r0, #22
    dbe2:	f7f2 ffd5 	bl	b90 <__aeabi_fdiv>
    dbe6:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:372
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    dbe8:	1c29      	adds	r1, r5, #0
    dbea:	6820      	ldr	r0, [r4, #0]
    dbec:	f7f3 f9c2 	bl	f74 <__aeabi_fmul>
    dbf0:	1c29      	adds	r1, r5, #0
    dbf2:	6020      	str	r0, [r4, #0]
    dbf4:	68e0      	ldr	r0, [r4, #12]
    dbf6:	f7f3 f9bd 	bl	f74 <__aeabi_fmul>
    dbfa:	1c29      	adds	r1, r5, #0
    dbfc:	60e0      	str	r0, [r4, #12]
    dbfe:	69a0      	ldr	r0, [r4, #24]
    dc00:	f7f3 f9b8 	bl	f74 <__aeabi_fmul>
    dc04:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:367
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    dc06:	20fe      	movs	r0, #254	; 0xfe
    dc08:	9906      	ldr	r1, [sp, #24]
    dc0a:	0580      	lsls	r0, r0, #22
    dc0c:	f7f2 ffc0 	bl	b90 <__aeabi_fdiv>
    dc10:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:372
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    dc12:	1c29      	adds	r1, r5, #0
    dc14:	6860      	ldr	r0, [r4, #4]
    dc16:	f7f3 f9ad 	bl	f74 <__aeabi_fmul>
    dc1a:	1c29      	adds	r1, r5, #0
    dc1c:	6060      	str	r0, [r4, #4]
    dc1e:	6920      	ldr	r0, [r4, #16]
    dc20:	f7f3 f9a8 	bl	f74 <__aeabi_fmul>
    dc24:	1c29      	adds	r1, r5, #0
    dc26:	6120      	str	r0, [r4, #16]
    dc28:	69e0      	ldr	r0, [r4, #28]
    dc2a:	f7f3 f9a3 	bl	f74 <__aeabi_fmul>
    dc2e:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:367
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    dc30:	20fe      	movs	r0, #254	; 0xfe
    dc32:	1c31      	adds	r1, r6, #0
    dc34:	0580      	lsls	r0, r0, #22
    dc36:	f7f2 ffab 	bl	b90 <__aeabi_fdiv>
    dc3a:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:372
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    dc3c:	1c29      	adds	r1, r5, #0
    dc3e:	68a0      	ldr	r0, [r4, #8]
    dc40:	f7f3 f998 	bl	f74 <__aeabi_fmul>
    dc44:	1c29      	adds	r1, r5, #0
    dc46:	60a0      	str	r0, [r4, #8]
    dc48:	6960      	ldr	r0, [r4, #20]
    dc4a:	f7f3 f993 	bl	f74 <__aeabi_fmul>
    dc4e:	1c29      	adds	r1, r5, #0
    dc50:	6160      	str	r0, [r4, #20]
    dc52:	6a20      	ldr	r0, [r4, #32]
    dc54:	f7f3 f98e 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:384
		f3x3matrixAeqI(fR);
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
    dc58:	464b      	mov	r3, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:372
			ftmp = 1.0F / fmod[j];
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    dc5a:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:384
		f3x3matrixAeqI(fR);
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
    dc5c:	6818      	ldr	r0, [r3, #0]
    dc5e:	685d      	ldr	r5, [r3, #4]
    dc60:	1c01      	adds	r1, r0, #0
    dc62:	689c      	ldr	r4, [r3, #8]
    dc64:	f7f3 f986 	bl	f74 <__aeabi_fmul>
    dc68:	1c29      	adds	r1, r5, #0
    dc6a:	1c07      	adds	r7, r0, #0
    dc6c:	1c28      	adds	r0, r5, #0
    dc6e:	f7f3 f981 	bl	f74 <__aeabi_fmul>
    dc72:	1c01      	adds	r1, r0, #0
    dc74:	1c38      	adds	r0, r7, #0
    dc76:	f7f2 fe0f 	bl	898 <__aeabi_fadd>
    dc7a:	1c21      	adds	r1, r4, #0
    dc7c:	1c05      	adds	r5, r0, #0
    dc7e:	1c20      	adds	r0, r4, #0
    dc80:	f7f3 f978 	bl	f74 <__aeabi_fmul>
    dc84:	1c01      	adds	r1, r0, #0
    dc86:	1c28      	adds	r0, r5, #0
    dc88:	f7f2 fe06 	bl	898 <__aeabi_fadd>
    dc8c:	f004 febe 	bl	12a0c <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:385
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    dc90:	4653      	mov	r3, sl
    dc92:	681f      	ldr	r7, [r3, #0]
    dc94:	464b      	mov	r3, r9
    dc96:	681d      	ldr	r5, [r3, #0]
    dc98:	4653      	mov	r3, sl
    dc9a:	685b      	ldr	r3, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:386
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
    dc9c:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:385
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    dc9e:	4698      	mov	r8, r3
    dca0:	464b      	mov	r3, r9
    dca2:	685b      	ldr	r3, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:384
		f3x3matrixAeqI(fR);
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
    dca4:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:385
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    dca6:	469b      	mov	fp, r3
    dca8:	4653      	mov	r3, sl
    dcaa:	689b      	ldr	r3, [r3, #8]
    dcac:	469a      	mov	sl, r3
    dcae:	464b      	mov	r3, r9
    dcb0:	689b      	ldr	r3, [r3, #8]
    dcb2:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:386
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
    dcb4:	f7f2 fdc2 	bl	83c <__aeabi_fcmpeq>
    dcb8:	2800      	cmp	r0, #0
    dcba:	d128      	bne.n	dd0e <feCompassAndroid+0x2f6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:385
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    dcbc:	1c29      	adds	r1, r5, #0
    dcbe:	1c38      	adds	r0, r7, #0
    dcc0:	f7f3 f958 	bl	f74 <__aeabi_fmul>
    dcc4:	4659      	mov	r1, fp
    dcc6:	1c05      	adds	r5, r0, #0
    dcc8:	4640      	mov	r0, r8
    dcca:	f7f3 f953 	bl	f74 <__aeabi_fmul>
    dcce:	1c01      	adds	r1, r0, #0
    dcd0:	1c28      	adds	r0, r5, #0
    dcd2:	f7f2 fde1 	bl	898 <__aeabi_fadd>
    dcd6:	4649      	mov	r1, r9
    dcd8:	1c05      	adds	r5, r0, #0
    dcda:	4650      	mov	r0, sl
    dcdc:	f7f3 f94a 	bl	f74 <__aeabi_fmul>
    dce0:	1c01      	adds	r1, r0, #0
    dce2:	1c28      	adds	r0, r5, #0
    dce4:	f7f2 fdd8 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:388
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
	{
		*pfDelta = fasin_deg(-fGdotBc / (fmod[Z] * fmodBc));
    dce8:	2380      	movs	r3, #128	; 0x80
    dcea:	061b      	lsls	r3, r3, #24
    dcec:	18c5      	adds	r5, r0, r3
    dcee:	1c21      	adds	r1, r4, #0
    dcf0:	1c30      	adds	r0, r6, #0
    dcf2:	f7f3 f93f 	bl	f74 <__aeabi_fmul>
    dcf6:	1c01      	adds	r1, r0, #0
    dcf8:	1c28      	adds	r0, r5, #0
    dcfa:	f7f2 ff49 	bl	b90 <__aeabi_fdiv>
    dcfe:	f7f5 f865 	bl	2dcc <fasin_deg>
    dd02:	9b03      	ldr	r3, [sp, #12]
    dd04:	6018      	str	r0, [r3, #0]
    dd06:	e002      	b.n	dd0e <feCompassAndroid+0x2f6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:379
		}
	}
	else
	{
		// no solution is possible to set rotation to identity matrix
		f3x3matrixAeqI(fR);
    dd08:	1c20      	adds	r0, r4, #0
    dd0a:	f7fe fc59 	bl	c5c0 <f3x3matrixAeqI>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:392
	{
		*pfDelta = fasin_deg(-fGdotBc / (fmod[Z] * fmodBc));
	}

	return;
}
    dd0e:	b009      	add	sp, #36	; 0x24
    dd10:	bc3c      	pop	{r2, r3, r4, r5}
    dd12:	4690      	mov	r8, r2
    dd14:	4699      	mov	r9, r3
    dd16:	46a2      	mov	sl, r4
    dd18:	46ab      	mov	fp, r5
    dd1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000dd1c <feCompassWin8>:
feCompassWin8():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:396

// Win8: 6DOF e-Compass function computing rotation matrix fR
void feCompassWin8(float fR[][3],  float *pfDelta, float fBc[], float fGp[])
{
    dd1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd1e:	465f      	mov	r7, fp
    dd20:	4656      	mov	r6, sl
    dd22:	464d      	mov	r5, r9
    dd24:	4644      	mov	r4, r8
    dd26:	4691      	mov	r9, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:405
	float fGdotBc;					// dot product of vectors G.Bc
	float ftmp;						// scratch variable
	int8 i, j;						// loop counters

	// set the inclination angle to zero in case it is not computed later
	*pfDelta = 0.0F;
    dd28:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:396
	return;
}

// Win8: 6DOF e-Compass function computing rotation matrix fR
void feCompassWin8(float fR[][3],  float *pfDelta, float fBc[], float fGp[])
{
    dd2a:	469a      	mov	sl, r3
    dd2c:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:405
	float fGdotBc;					// dot product of vectors G.Bc
	float ftmp;						// scratch variable
	int8 i, j;						// loop counters

	// set the inclination angle to zero in case it is not computed later
	*pfDelta = 0.0F;
    dd2e:	600a      	str	r2, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:410

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
    dd30:	2280      	movs	r2, #128	; 0x80
    dd32:	4653      	mov	r3, sl
    dd34:	0612      	lsls	r2, r2, #24
    dd36:	4694      	mov	ip, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:411
		fR[i][Y] = fBc[i];
    dd38:	464a      	mov	r2, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:410
	*pfDelta = 0.0F;

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
    dd3a:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:396
	return;
}

// Win8: 6DOF e-Compass function computing rotation matrix fR
void feCompassWin8(float fR[][3],  float *pfDelta, float fBc[], float fGp[])
{
    dd3c:	b089      	sub	sp, #36	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:410
	*pfDelta = 0.0F;

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
    dd3e:	4463      	add	r3, ip
    dd40:	6083      	str	r3, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:411
		fR[i][Y] = fBc[i];
    dd42:	6816      	ldr	r6, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:410
	*pfDelta = 0.0F;

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
    dd44:	4652      	mov	r2, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:396
	return;
}

// Win8: 6DOF e-Compass function computing rotation matrix fR
void feCompassWin8(float fR[][3],  float *pfDelta, float fBc[], float fGp[])
{
    dd46:	9103      	str	r1, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:411

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
		fR[i][Y] = fBc[i];
    dd48:	4649      	mov	r1, r9
    dd4a:	6046      	str	r6, [r0, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:410
	*pfDelta = 0.0F;

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
    dd4c:	6852      	ldr	r2, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:396
	return;
}

// Win8: 6DOF e-Compass function computing rotation matrix fR
void feCompassWin8(float fR[][3],  float *pfDelta, float fBc[], float fGp[])
{
    dd4e:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:410
	*pfDelta = 0.0F;

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
    dd50:	4462      	add	r2, ip
    dd52:	6142      	str	r2, [r0, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:411
		fR[i][Y] = fBc[i];
    dd54:	6849      	ldr	r1, [r1, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:410
	*pfDelta = 0.0F;

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
    dd56:	9201      	str	r2, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:411
		fR[i][Y] = fBc[i];
    dd58:	6101      	str	r1, [r0, #16]
    dd5a:	468b      	mov	fp, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:410
	*pfDelta = 0.0F;

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
    dd5c:	4651      	mov	r1, sl
    dd5e:	6889      	ldr	r1, [r1, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:415
		fR[i][Y] = fBc[i];
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
    dd60:	4658      	mov	r0, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:410
	*pfDelta = 0.0F;

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
    dd62:	4461      	add	r1, ip
    dd64:	1c0d      	adds	r5, r1, #0
    dd66:	6221      	str	r1, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:411
		fR[i][Y] = fBc[i];
    dd68:	4649      	mov	r1, r9
    dd6a:	688f      	ldr	r7, [r1, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:415
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
    dd6c:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:411

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
		fR[i][Y] = fBc[i];
    dd6e:	61e7      	str	r7, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:410
	*pfDelta = 0.0F;

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
    dd70:	9302      	str	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:415
		fR[i][Y] = fBc[i];
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
    dd72:	f7f3 f8ff 	bl	f74 <__aeabi_fmul>
    dd76:	9901      	ldr	r1, [sp, #4]
    dd78:	4680      	mov	r8, r0
    dd7a:	1c38      	adds	r0, r7, #0
    dd7c:	f7f3 f8fa 	bl	f74 <__aeabi_fmul>
    dd80:	1c01      	adds	r1, r0, #0
    dd82:	4640      	mov	r0, r8
    dd84:	f7f3 fa28 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:416
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    dd88:	9902      	ldr	r1, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:415
		fR[i][Z] = -fGp[i];
		fR[i][Y] = fBc[i];
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
    dd8a:	4680      	mov	r8, r0
    dd8c:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:416
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    dd8e:	1c38      	adds	r0, r7, #0
    dd90:	f7f3 f8f0 	bl	f74 <__aeabi_fmul>
    dd94:	1c31      	adds	r1, r6, #0
    dd96:	1c07      	adds	r7, r0, #0
    dd98:	1c28      	adds	r0, r5, #0
    dd9a:	f7f3 f8eb 	bl	f74 <__aeabi_fmul>
    dd9e:	1c01      	adds	r1, r0, #0
    dda0:	1c38      	adds	r0, r7, #0
    dda2:	f7f3 fa19 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:417
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    dda6:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:416
		fR[i][Y] = fBc[i];
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    dda8:	1c07      	adds	r7, r0, #0
    ddaa:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:417
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    ddac:	9801      	ldr	r0, [sp, #4]
    ddae:	f7f3 f8e1 	bl	f74 <__aeabi_fmul>
    ddb2:	9902      	ldr	r1, [sp, #8]
    ddb4:	1c06      	adds	r6, r0, #0
    ddb6:	4658      	mov	r0, fp
    ddb8:	f7f3 f8dc 	bl	f74 <__aeabi_fmul>
    ddbc:	1c01      	adds	r1, r0, #0
    ddbe:	1c30      	adds	r0, r6, #0
    ddc0:	f7f3 fa0a 	bl	11d8 <__aeabi_fsub>
    ddc4:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:420

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    ddc6:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:417
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    ddc8:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:420

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    ddca:	9801      	ldr	r0, [sp, #4]
    ddcc:	f7f3 f8d2 	bl	f74 <__aeabi_fmul>
    ddd0:	1c39      	adds	r1, r7, #0
    ddd2:	4683      	mov	fp, r0
    ddd4:	1c28      	adds	r0, r5, #0
    ddd6:	f7f3 f8cd 	bl	f74 <__aeabi_fmul>
    ddda:	1c01      	adds	r1, r0, #0
    dddc:	4658      	mov	r0, fp
    ddde:	f7f3 f9fb 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:421
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    dde2:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:420
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    dde4:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:421
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    dde6:	1c28      	adds	r0, r5, #0
    dde8:	f7f3 f8c4 	bl	f74 <__aeabi_fmul>
    ddec:	9b02      	ldr	r3, [sp, #8]
    ddee:	1c05      	adds	r5, r0, #0
    ddf0:	1c31      	adds	r1, r6, #0
    ddf2:	1c18      	adds	r0, r3, #0
    ddf4:	469b      	mov	fp, r3
    ddf6:	f7f3 f8bd 	bl	f74 <__aeabi_fmul>
    ddfa:	1c01      	adds	r1, r0, #0
    ddfc:	1c28      	adds	r0, r5, #0
    ddfe:	f7f3 f9eb 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:422
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    de02:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:421
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    de04:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:422
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    de06:	4658      	mov	r0, fp
    de08:	f7f3 f8b4 	bl	f74 <__aeabi_fmul>
    de0c:	4641      	mov	r1, r8
    de0e:	1c05      	adds	r5, r0, #0
    de10:	9801      	ldr	r0, [sp, #4]
    de12:	f7f3 f8af 	bl	f74 <__aeabi_fmul>
    de16:	1c01      	adds	r1, r0, #0
    de18:	1c28      	adds	r0, r5, #0
    de1a:	f7f3 f9dd 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:425

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
    de1e:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:422
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    de20:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:425

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
    de22:	4640      	mov	r0, r8
    de24:	f7f3 f8a6 	bl	f74 <__aeabi_fmul>
    de28:	1c39      	adds	r1, r7, #0
    de2a:	1c05      	adds	r5, r0, #0
    de2c:	1c38      	adds	r0, r7, #0
    de2e:	f7f3 f8a1 	bl	f74 <__aeabi_fmul>
    de32:	1c01      	adds	r1, r0, #0
    de34:	1c28      	adds	r0, r5, #0
    de36:	f7f2 fd2f 	bl	898 <__aeabi_fadd>
    de3a:	1c31      	adds	r1, r6, #0
    de3c:	1c05      	adds	r5, r0, #0
    de3e:	1c30      	adds	r0, r6, #0
    de40:	f7f3 f898 	bl	f74 <__aeabi_fmul>
    de44:	1c01      	adds	r1, r0, #0
    de46:	1c28      	adds	r0, r5, #0
    de48:	f7f2 fd26 	bl	898 <__aeabi_fadd>
    de4c:	f004 fdde 	bl	12a0c <sqrtf>
    de50:	1c05      	adds	r5, r0, #0
    de52:	9005      	str	r0, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:426
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
    de54:	6860      	ldr	r0, [r4, #4]
    de56:	6927      	ldr	r7, [r4, #16]
    de58:	1c01      	adds	r1, r0, #0
    de5a:	f7f3 f88b 	bl	f74 <__aeabi_fmul>
    de5e:	1c39      	adds	r1, r7, #0
    de60:	4680      	mov	r8, r0
    de62:	1c38      	adds	r0, r7, #0
    de64:	f7f3 f886 	bl	f74 <__aeabi_fmul>
    de68:	1c01      	adds	r1, r0, #0
    de6a:	4640      	mov	r0, r8
    de6c:	f7f2 fd14 	bl	898 <__aeabi_fadd>
    de70:	69e6      	ldr	r6, [r4, #28]
    de72:	1c07      	adds	r7, r0, #0
    de74:	1c31      	adds	r1, r6, #0
    de76:	1c30      	adds	r0, r6, #0
    de78:	f7f3 f87c 	bl	f74 <__aeabi_fmul>
    de7c:	1c01      	adds	r1, r0, #0
    de7e:	1c38      	adds	r0, r7, #0
    de80:	f7f2 fd0a 	bl	898 <__aeabi_fadd>
    de84:	f004 fdc2 	bl	12a0c <sqrtf>
    de88:	9006      	str	r0, [sp, #24]
    de8a:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:427
	fmod[Z] = sqrtf(fR[X][Z] * fR[X][Z] + fR[Y][Z] * fR[Y][Z] + fR[Z][Z] * fR[Z][Z]);
    de8c:	68a0      	ldr	r0, [r4, #8]
    de8e:	6967      	ldr	r7, [r4, #20]
    de90:	1c01      	adds	r1, r0, #0
    de92:	f7f3 f86f 	bl	f74 <__aeabi_fmul>
    de96:	1c39      	adds	r1, r7, #0
    de98:	4683      	mov	fp, r0
    de9a:	1c38      	adds	r0, r7, #0
    de9c:	f7f3 f86a 	bl	f74 <__aeabi_fmul>
    dea0:	1c01      	adds	r1, r0, #0
    dea2:	4658      	mov	r0, fp
    dea4:	f7f2 fcf8 	bl	898 <__aeabi_fadd>
    dea8:	6a26      	ldr	r6, [r4, #32]
    deaa:	1c07      	adds	r7, r0, #0
    deac:	1c31      	adds	r1, r6, #0
    deae:	1c30      	adds	r0, r6, #0
    deb0:	f7f3 f860 	bl	f74 <__aeabi_fmul>
    deb4:	1c01      	adds	r1, r0, #0
    deb6:	1c38      	adds	r0, r7, #0
    deb8:	f7f2 fcee 	bl	898 <__aeabi_fadd>
    debc:	f004 fda6 	bl	12a0c <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:430

	// normalize the rotation matrix columns
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
    dec0:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:427
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
	fmod[Z] = sqrtf(fR[X][Z] * fR[X][Z] + fR[Y][Z] * fR[Y][Z] + fR[Z][Z] * fR[Z][Z]);
    dec2:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:430

	// normalize the rotation matrix columns
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
    dec4:	1c28      	adds	r0, r5, #0
    dec6:	f7f2 fcb9 	bl	83c <__aeabi_fcmpeq>
    deca:	2800      	cmp	r0, #0
    decc:	d000      	beq.n	ded0 <feCompassWin8+0x1b4>
    dece:	e0a1      	b.n	e014 <feCompassWin8+0x2f8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:430 (discriminator 1)
    ded0:	4640      	mov	r0, r8
    ded2:	2100      	movs	r1, #0
    ded4:	f7f2 fcb2 	bl	83c <__aeabi_fcmpeq>
    ded8:	2800      	cmp	r0, #0
    deda:	d000      	beq.n	dede <feCompassWin8+0x1c2>
    dedc:	e09a      	b.n	e014 <feCompassWin8+0x2f8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:430 (discriminator 2)
    dede:	1c30      	adds	r0, r6, #0
    dee0:	2100      	movs	r1, #0
    dee2:	f7f2 fcab 	bl	83c <__aeabi_fcmpeq>
    dee6:	2800      	cmp	r0, #0
    dee8:	d000      	beq.n	deec <feCompassWin8+0x1d0>
    deea:	e093      	b.n	e014 <feCompassWin8+0x2f8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:435
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    deec:	20fe      	movs	r0, #254	; 0xfe
    deee:	9905      	ldr	r1, [sp, #20]
    def0:	0580      	lsls	r0, r0, #22
    def2:	f7f2 fe4d 	bl	b90 <__aeabi_fdiv>
    def6:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:440
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    def8:	1c29      	adds	r1, r5, #0
    defa:	6820      	ldr	r0, [r4, #0]
    defc:	f7f3 f83a 	bl	f74 <__aeabi_fmul>
    df00:	1c29      	adds	r1, r5, #0
    df02:	6020      	str	r0, [r4, #0]
    df04:	68e0      	ldr	r0, [r4, #12]
    df06:	f7f3 f835 	bl	f74 <__aeabi_fmul>
    df0a:	1c29      	adds	r1, r5, #0
    df0c:	60e0      	str	r0, [r4, #12]
    df0e:	69a0      	ldr	r0, [r4, #24]
    df10:	f7f3 f830 	bl	f74 <__aeabi_fmul>
    df14:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:435
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    df16:	20fe      	movs	r0, #254	; 0xfe
    df18:	9906      	ldr	r1, [sp, #24]
    df1a:	0580      	lsls	r0, r0, #22
    df1c:	f7f2 fe38 	bl	b90 <__aeabi_fdiv>
    df20:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:440
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    df22:	1c29      	adds	r1, r5, #0
    df24:	6860      	ldr	r0, [r4, #4]
    df26:	f7f3 f825 	bl	f74 <__aeabi_fmul>
    df2a:	1c29      	adds	r1, r5, #0
    df2c:	6060      	str	r0, [r4, #4]
    df2e:	6920      	ldr	r0, [r4, #16]
    df30:	f7f3 f820 	bl	f74 <__aeabi_fmul>
    df34:	1c29      	adds	r1, r5, #0
    df36:	6120      	str	r0, [r4, #16]
    df38:	69e0      	ldr	r0, [r4, #28]
    df3a:	f7f3 f81b 	bl	f74 <__aeabi_fmul>
    df3e:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:435
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    df40:	20fe      	movs	r0, #254	; 0xfe
    df42:	1c31      	adds	r1, r6, #0
    df44:	0580      	lsls	r0, r0, #22
    df46:	f7f2 fe23 	bl	b90 <__aeabi_fdiv>
    df4a:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:440
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    df4c:	1c29      	adds	r1, r5, #0
    df4e:	68a0      	ldr	r0, [r4, #8]
    df50:	f7f3 f810 	bl	f74 <__aeabi_fmul>
    df54:	1c29      	adds	r1, r5, #0
    df56:	60a0      	str	r0, [r4, #8]
    df58:	6960      	ldr	r0, [r4, #20]
    df5a:	f7f3 f80b 	bl	f74 <__aeabi_fmul>
    df5e:	1c29      	adds	r1, r5, #0
    df60:	6160      	str	r0, [r4, #20]
    df62:	6a20      	ldr	r0, [r4, #32]
    df64:	f7f3 f806 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:452
		f3x3matrixAeqI(fR);
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
    df68:	464b      	mov	r3, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:440
			ftmp = 1.0F / fmod[j];
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    df6a:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:452
		f3x3matrixAeqI(fR);
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
    df6c:	6818      	ldr	r0, [r3, #0]
    df6e:	685d      	ldr	r5, [r3, #4]
    df70:	1c01      	adds	r1, r0, #0
    df72:	689c      	ldr	r4, [r3, #8]
    df74:	f7f2 fffe 	bl	f74 <__aeabi_fmul>
    df78:	1c29      	adds	r1, r5, #0
    df7a:	1c07      	adds	r7, r0, #0
    df7c:	1c28      	adds	r0, r5, #0
    df7e:	f7f2 fff9 	bl	f74 <__aeabi_fmul>
    df82:	1c01      	adds	r1, r0, #0
    df84:	1c38      	adds	r0, r7, #0
    df86:	f7f2 fc87 	bl	898 <__aeabi_fadd>
    df8a:	1c21      	adds	r1, r4, #0
    df8c:	1c05      	adds	r5, r0, #0
    df8e:	1c20      	adds	r0, r4, #0
    df90:	f7f2 fff0 	bl	f74 <__aeabi_fmul>
    df94:	1c01      	adds	r1, r0, #0
    df96:	1c28      	adds	r0, r5, #0
    df98:	f7f2 fc7e 	bl	898 <__aeabi_fadd>
    df9c:	f004 fd36 	bl	12a0c <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:453
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    dfa0:	4653      	mov	r3, sl
    dfa2:	681f      	ldr	r7, [r3, #0]
    dfa4:	464b      	mov	r3, r9
    dfa6:	681d      	ldr	r5, [r3, #0]
    dfa8:	4653      	mov	r3, sl
    dfaa:	685b      	ldr	r3, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:454
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
    dfac:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:453
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    dfae:	4698      	mov	r8, r3
    dfb0:	464b      	mov	r3, r9
    dfb2:	685b      	ldr	r3, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:452
		f3x3matrixAeqI(fR);
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
    dfb4:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:453
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    dfb6:	469b      	mov	fp, r3
    dfb8:	4653      	mov	r3, sl
    dfba:	689b      	ldr	r3, [r3, #8]
    dfbc:	469a      	mov	sl, r3
    dfbe:	464b      	mov	r3, r9
    dfc0:	689b      	ldr	r3, [r3, #8]
    dfc2:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:454
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
    dfc4:	f7f2 fc3a 	bl	83c <__aeabi_fcmpeq>
    dfc8:	2800      	cmp	r0, #0
    dfca:	d126      	bne.n	e01a <feCompassWin8+0x2fe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:453
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    dfcc:	1c29      	adds	r1, r5, #0
    dfce:	1c38      	adds	r0, r7, #0
    dfd0:	f7f2 ffd0 	bl	f74 <__aeabi_fmul>
    dfd4:	4659      	mov	r1, fp
    dfd6:	1c05      	adds	r5, r0, #0
    dfd8:	4640      	mov	r0, r8
    dfda:	f7f2 ffcb 	bl	f74 <__aeabi_fmul>
    dfde:	1c01      	adds	r1, r0, #0
    dfe0:	1c28      	adds	r0, r5, #0
    dfe2:	f7f2 fc59 	bl	898 <__aeabi_fadd>
    dfe6:	4649      	mov	r1, r9
    dfe8:	1c05      	adds	r5, r0, #0
    dfea:	4650      	mov	r0, sl
    dfec:	f7f2 ffc2 	bl	f74 <__aeabi_fmul>
    dff0:	1c01      	adds	r1, r0, #0
    dff2:	1c28      	adds	r0, r5, #0
    dff4:	f7f2 fc50 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:456
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
	{
		*pfDelta = fasin_deg(fGdotBc / (fmod[Z] * fmodBc));
    dff8:	1c21      	adds	r1, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:453
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    dffa:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:456
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
	{
		*pfDelta = fasin_deg(fGdotBc / (fmod[Z] * fmodBc));
    dffc:	1c30      	adds	r0, r6, #0
    dffe:	f7f2 ffb9 	bl	f74 <__aeabi_fmul>
    e002:	1c01      	adds	r1, r0, #0
    e004:	1c28      	adds	r0, r5, #0
    e006:	f7f2 fdc3 	bl	b90 <__aeabi_fdiv>
    e00a:	f7f4 fedf 	bl	2dcc <fasin_deg>
    e00e:	9b03      	ldr	r3, [sp, #12]
    e010:	6018      	str	r0, [r3, #0]
    e012:	e002      	b.n	e01a <feCompassWin8+0x2fe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:447
		}
	}
	else
	{
		// no solution is possible to set rotation to identity matrix
		f3x3matrixAeqI(fR);
    e014:	1c20      	adds	r0, r4, #0
    e016:	f7fe fad3 	bl	c5c0 <f3x3matrixAeqI>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:460
	{
		*pfDelta = fasin_deg(fGdotBc / (fmod[Z] * fmodBc));
	}

	return;
}
    e01a:	b009      	add	sp, #36	; 0x24
    e01c:	bc3c      	pop	{r2, r3, r4, r5}
    e01e:	4690      	mov	r8, r2
    e020:	4699      	mov	r9, r3
    e022:	46a2      	mov	sl, r4
    e024:	46ab      	mov	fp, r5
    e026:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e028 <fNEDAnglesDegFromRotationMatrix>:
fNEDAnglesDegFromRotationMatrix():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:465

// extract the NED angles in degrees from the NED rotation matrix
void fNEDAnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
    e028:	b5f0      	push	{r4, r5, r6, r7, lr}
    e02a:	1c16      	adds	r6, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:467
	// calculate the pitch angle -90.0 <= Theta <= 90.0 deg
	*pfTheDeg = fasin_deg(-R[X][Z]);
    e02c:	2280      	movs	r2, #128	; 0x80
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:465
}

// extract the NED angles in degrees from the NED rotation matrix
void fNEDAnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
    e02e:	4647      	mov	r7, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:467
	// calculate the pitch angle -90.0 <= Theta <= 90.0 deg
	*pfTheDeg = fasin_deg(-R[X][Z]);
    e030:	0612      	lsls	r2, r2, #24
    e032:	4694      	mov	ip, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:465
}

// extract the NED angles in degrees from the NED rotation matrix
void fNEDAnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
    e034:	b480      	push	{r7}
    e036:	1c1f      	adds	r7, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:467
	// calculate the pitch angle -90.0 <= Theta <= 90.0 deg
	*pfTheDeg = fasin_deg(-R[X][Z]);
    e038:	6883      	ldr	r3, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:465
}

// extract the NED angles in degrees from the NED rotation matrix
void fNEDAnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
    e03a:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:467
	// calculate the pitch angle -90.0 <= Theta <= 90.0 deg
	*pfTheDeg = fasin_deg(-R[X][Z]);
    e03c:	4463      	add	r3, ip
    e03e:	1c18      	adds	r0, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:465
}

// extract the NED angles in degrees from the NED rotation matrix
void fNEDAnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
    e040:	4688      	mov	r8, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:467
	// calculate the pitch angle -90.0 <= Theta <= 90.0 deg
	*pfTheDeg = fasin_deg(-R[X][Z]);
    e042:	f7f4 fec3 	bl	2dcc <fasin_deg>
    e046:	6030      	str	r0, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:470

	// calculate the roll angle range -180.0 <= Phi < 180.0 deg
	*pfPhiDeg = fatan2_deg(R[Y][Z], R[Z][Z]);
    e048:	6a29      	ldr	r1, [r5, #32]
    e04a:	6968      	ldr	r0, [r5, #20]
    e04c:	f7f5 f940 	bl	32d0 <fatan2_deg>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:473

	// map +180 roll onto the functionally equivalent -180 deg roll
	if (*pfPhiDeg == 180.0F)
    e050:	492d      	ldr	r1, [pc, #180]	; (e108 <fNEDAnglesDegFromRotationMatrix+0xe0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:470
{
	// calculate the pitch angle -90.0 <= Theta <= 90.0 deg
	*pfTheDeg = fasin_deg(-R[X][Z]);

	// calculate the roll angle range -180.0 <= Phi < 180.0 deg
	*pfPhiDeg = fatan2_deg(R[Y][Z], R[Z][Z]);
    e052:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:473

	// map +180 roll onto the functionally equivalent -180 deg roll
	if (*pfPhiDeg == 180.0F)
    e054:	f7f2 fbf2 	bl	83c <__aeabi_fcmpeq>
    e058:	2800      	cmp	r0, #0
    e05a:	d000      	beq.n	e05e <fNEDAnglesDegFromRotationMatrix+0x36>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:475
	{
		*pfPhiDeg = -180.0F;
    e05c:	4c2b      	ldr	r4, [pc, #172]	; (e10c <fNEDAnglesDegFromRotationMatrix+0xe4>)
    e05e:	4643      	mov	r3, r8
    e060:	601c      	str	r4, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:479
	}

	// calculate the yaw (compass) angle 0.0 <= Psi < 360.0 deg
	if (*pfTheDeg == 90.0F)
    e062:	6834      	ldr	r4, [r6, #0]
    e064:	492a      	ldr	r1, [pc, #168]	; (e110 <fNEDAnglesDegFromRotationMatrix+0xe8>)
    e066:	1c20      	adds	r0, r4, #0
    e068:	f7f2 fbe8 	bl	83c <__aeabi_fcmpeq>
    e06c:	2800      	cmp	r0, #0
    e06e:	d13f      	bne.n	e0f0 <fNEDAnglesDegFromRotationMatrix+0xc8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:484
	{
		// vertical upwards gimbal lock case
		*pfPsiDeg = fatan2_deg(R[Z][Y], R[Y][Y]) + *pfPhiDeg;
	}
	else if (*pfTheDeg == -90.0F)
    e070:	1c20      	adds	r0, r4, #0
    e072:	4928      	ldr	r1, [pc, #160]	; (e114 <fNEDAnglesDegFromRotationMatrix+0xec>)
    e074:	f7f2 fbe2 	bl	83c <__aeabi_fcmpeq>
    e078:	2800      	cmp	r0, #0
    e07a:	d11d      	bne.n	e0b8 <fNEDAnglesDegFromRotationMatrix+0x90>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:492
		*pfPsiDeg = fatan2_deg(-R[Z][Y], R[Y][Y]) - *pfPhiDeg;
	}
	else
	{
		// general case
		*pfPsiDeg = fatan2_deg(R[X][Y], R[X][X]);
    e07c:	6868      	ldr	r0, [r5, #4]
    e07e:	6829      	ldr	r1, [r5, #0]
    e080:	f7f5 f926 	bl	32d0 <fatan2_deg>
    e084:	1c04      	adds	r4, r0, #0
    e086:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:496
	}

	// map yaw angle Psi onto range 0.0 <= Psi < 360.0 deg
	if (*pfPsiDeg < 0.0F)
    e088:	1c20      	adds	r0, r4, #0
    e08a:	2100      	movs	r1, #0
    e08c:	f7f2 fbdc 	bl	848 <__aeabi_fcmplt>
    e090:	2800      	cmp	r0, #0
    e092:	d126      	bne.n	e0e2 <fNEDAnglesDegFromRotationMatrix+0xba>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:502
	{
		*pfPsiDeg += 360.0F;
	}

	// check for rounding errors mapping small negative angle to 360 deg
	if (*pfPsiDeg >= 360.0F)
    e094:	1c20      	adds	r0, r4, #0
    e096:	4920      	ldr	r1, [pc, #128]	; (e118 <fNEDAnglesDegFromRotationMatrix+0xf0>)
    e098:	f7f2 fbf4 	bl	884 <__aeabi_fcmpge>
    e09c:	2800      	cmp	r0, #0
    e09e:	d001      	beq.n	e0a4 <fNEDAnglesDegFromRotationMatrix+0x7c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:504
	{
		*pfPsiDeg = 0.0F;
    e0a0:	2400      	movs	r4, #0
    e0a2:	603c      	str	r4, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:508
	}

	// for NED, the compass heading Rho equals the yaw angle Psi
	*pfRhoDeg = *pfPsiDeg;
    e0a4:	9b06      	ldr	r3, [sp, #24]
    e0a6:	601c      	str	r4, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:511

	// calculate the tilt angle from vertical Chi (0 <= Chi <= 180 deg) 
	*pfChiDeg = facos_deg(R[Z][Z]);
    e0a8:	6a28      	ldr	r0, [r5, #32]
    e0aa:	f7f4 ff3b 	bl	2f24 <facos_deg>
    e0ae:	9b07      	ldr	r3, [sp, #28]
    e0b0:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:514

	return;
}
    e0b2:	bc04      	pop	{r2}
    e0b4:	4690      	mov	r8, r2
    e0b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:487
		*pfPsiDeg = fatan2_deg(R[Z][Y], R[Y][Y]) + *pfPhiDeg;
	}
	else if (*pfTheDeg == -90.0F)
	{
		// vertical downwards gimbal lock case
		*pfPsiDeg = fatan2_deg(-R[Z][Y], R[Y][Y]) - *pfPhiDeg;
    e0b8:	2280      	movs	r2, #128	; 0x80
    e0ba:	0612      	lsls	r2, r2, #24
    e0bc:	4694      	mov	ip, r2
    e0be:	69eb      	ldr	r3, [r5, #28]
    e0c0:	6929      	ldr	r1, [r5, #16]
    e0c2:	4463      	add	r3, ip
    e0c4:	1c18      	adds	r0, r3, #0
    e0c6:	f7f5 f903 	bl	32d0 <fatan2_deg>
    e0ca:	4643      	mov	r3, r8
    e0cc:	6819      	ldr	r1, [r3, #0]
    e0ce:	f7f3 f883 	bl	11d8 <__aeabi_fsub>
    e0d2:	1c04      	adds	r4, r0, #0
    e0d4:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:496
		// general case
		*pfPsiDeg = fatan2_deg(R[X][Y], R[X][X]);
	}

	// map yaw angle Psi onto range 0.0 <= Psi < 360.0 deg
	if (*pfPsiDeg < 0.0F)
    e0d6:	2100      	movs	r1, #0
    e0d8:	1c20      	adds	r0, r4, #0
    e0da:	f7f2 fbb5 	bl	848 <__aeabi_fcmplt>
    e0de:	2800      	cmp	r0, #0
    e0e0:	d0d8      	beq.n	e094 <fNEDAnglesDegFromRotationMatrix+0x6c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:498
	{
		*pfPsiDeg += 360.0F;
    e0e2:	1c20      	adds	r0, r4, #0
    e0e4:	490c      	ldr	r1, [pc, #48]	; (e118 <fNEDAnglesDegFromRotationMatrix+0xf0>)
    e0e6:	f7f2 fbd7 	bl	898 <__aeabi_fadd>
    e0ea:	1c04      	adds	r4, r0, #0
    e0ec:	6038      	str	r0, [r7, #0]
    e0ee:	e7d1      	b.n	e094 <fNEDAnglesDegFromRotationMatrix+0x6c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:482

	// calculate the yaw (compass) angle 0.0 <= Psi < 360.0 deg
	if (*pfTheDeg == 90.0F)
	{
		// vertical upwards gimbal lock case
		*pfPsiDeg = fatan2_deg(R[Z][Y], R[Y][Y]) + *pfPhiDeg;
    e0f0:	6929      	ldr	r1, [r5, #16]
    e0f2:	69e8      	ldr	r0, [r5, #28]
    e0f4:	f7f5 f8ec 	bl	32d0 <fatan2_deg>
    e0f8:	4643      	mov	r3, r8
    e0fa:	6819      	ldr	r1, [r3, #0]
    e0fc:	f7f2 fbcc 	bl	898 <__aeabi_fadd>
    e100:	1c04      	adds	r4, r0, #0
    e102:	6038      	str	r0, [r7, #0]
    e104:	e7c0      	b.n	e088 <fNEDAnglesDegFromRotationMatrix+0x60>
    e106:	46c0      	nop			; (mov r8, r8)
    e108:	43340000 	.word	0x43340000
    e10c:	c3340000 	.word	0xc3340000
    e110:	42b40000 	.word	0x42b40000
    e114:	c2b40000 	.word	0xc2b40000
    e118:	43b40000 	.word	0x43b40000

0000e11c <fAndroidAnglesDegFromRotationMatrix>:
fAndroidAnglesDegFromRotationMatrix():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:519
}

// extract the Android angles in degrees from the Android rotation matrix
void fAndroidAnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
    e11c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e11e:	4647      	mov	r7, r8
    e120:	1c05      	adds	r5, r0, #0
    e122:	b480      	push	{r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:521
	// calculate the roll angle -90.0 <= Phi <= 90.0 deg
	*pfPhiDeg = fasin_deg(R[X][Z]);
    e124:	6880      	ldr	r0, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:519
}

// extract the Android angles in degrees from the Android rotation matrix
void fAndroidAnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
    e126:	1c0e      	adds	r6, r1, #0
    e128:	4690      	mov	r8, r2
    e12a:	1c1f      	adds	r7, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:521
	// calculate the roll angle -90.0 <= Phi <= 90.0 deg
	*pfPhiDeg = fasin_deg(R[X][Z]);
    e12c:	f7f4 fe4e 	bl	2dcc <fasin_deg>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:524

	// calculate the pitch angle -180.0 <= The < 180.0 deg
	*pfTheDeg = fatan2_deg(-R[Y][Z], R[Z][Z]);
    e130:	2280      	movs	r2, #128	; 0x80
    e132:	0612      	lsls	r2, r2, #24
    e134:	4694      	mov	ip, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:521
// extract the Android angles in degrees from the Android rotation matrix
void fAndroidAnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
	// calculate the roll angle -90.0 <= Phi <= 90.0 deg
	*pfPhiDeg = fasin_deg(R[X][Z]);
    e136:	6030      	str	r0, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:524

	// calculate the pitch angle -180.0 <= The < 180.0 deg
	*pfTheDeg = fatan2_deg(-R[Y][Z], R[Z][Z]);
    e138:	696b      	ldr	r3, [r5, #20]
    e13a:	6a29      	ldr	r1, [r5, #32]
    e13c:	4463      	add	r3, ip
    e13e:	1c18      	adds	r0, r3, #0
    e140:	f7f5 f8c6 	bl	32d0 <fatan2_deg>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:527

	// map +180 pitch onto the functionally equivalent -180 deg pitch
	if (*pfTheDeg == 180.0F)
    e144:	492d      	ldr	r1, [pc, #180]	; (e1fc <fAndroidAnglesDegFromRotationMatrix+0xe0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:524
{
	// calculate the roll angle -90.0 <= Phi <= 90.0 deg
	*pfPhiDeg = fasin_deg(R[X][Z]);

	// calculate the pitch angle -180.0 <= The < 180.0 deg
	*pfTheDeg = fatan2_deg(-R[Y][Z], R[Z][Z]);
    e146:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:527

	// map +180 pitch onto the functionally equivalent -180 deg pitch
	if (*pfTheDeg == 180.0F)
    e148:	f7f2 fb78 	bl	83c <__aeabi_fcmpeq>
    e14c:	2800      	cmp	r0, #0
    e14e:	d000      	beq.n	e152 <fAndroidAnglesDegFromRotationMatrix+0x36>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:529
	{
		*pfTheDeg = -180.0F;
    e150:	4c2b      	ldr	r4, [pc, #172]	; (e200 <fAndroidAnglesDegFromRotationMatrix+0xe4>)
    e152:	4643      	mov	r3, r8
    e154:	601c      	str	r4, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:533
	}

	// calculate the yaw (compass) angle 0.0 <= Psi < 360.0 deg
	if (*pfPhiDeg == 90.0F)
    e156:	6834      	ldr	r4, [r6, #0]
    e158:	492a      	ldr	r1, [pc, #168]	; (e204 <fAndroidAnglesDegFromRotationMatrix+0xe8>)
    e15a:	1c20      	adds	r0, r4, #0
    e15c:	f7f2 fb6e 	bl	83c <__aeabi_fcmpeq>
    e160:	2800      	cmp	r0, #0
    e162:	d13f      	bne.n	e1e4 <fAndroidAnglesDegFromRotationMatrix+0xc8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:538
	{
		// vertical downwards gimbal lock case
		*pfPsiDeg = fatan2_deg(R[Y][X], R[Y][Y]) - *pfTheDeg;
	}
	else if (*pfPhiDeg == -90.0F)
    e164:	1c20      	adds	r0, r4, #0
    e166:	4928      	ldr	r1, [pc, #160]	; (e208 <fAndroidAnglesDegFromRotationMatrix+0xec>)
    e168:	f7f2 fb68 	bl	83c <__aeabi_fcmpeq>
    e16c:	2800      	cmp	r0, #0
    e16e:	d122      	bne.n	e1b6 <fAndroidAnglesDegFromRotationMatrix+0x9a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:546
		*pfPsiDeg = fatan2_deg(R[Y][X], R[Y][Y]) + *pfTheDeg;
	}
	else
	{
		// // general case
		*pfPsiDeg = fatan2_deg(-R[X][Y], R[X][X]);
    e170:	2280      	movs	r2, #128	; 0x80
    e172:	0612      	lsls	r2, r2, #24
    e174:	4694      	mov	ip, r2
    e176:	686b      	ldr	r3, [r5, #4]
    e178:	6829      	ldr	r1, [r5, #0]
    e17a:	4463      	add	r3, ip
    e17c:	1c18      	adds	r0, r3, #0
    e17e:	f7f5 f8a7 	bl	32d0 <fatan2_deg>
    e182:	1c04      	adds	r4, r0, #0
    e184:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:550
	}

	// map yaw angle Psi onto range 0.0 <= Psi < 360.0 deg
	if (*pfPsiDeg < 0.0F)
    e186:	1c20      	adds	r0, r4, #0
    e188:	2100      	movs	r1, #0
    e18a:	f7f2 fb5d 	bl	848 <__aeabi_fcmplt>
    e18e:	2800      	cmp	r0, #0
    e190:	d121      	bne.n	e1d6 <fAndroidAnglesDegFromRotationMatrix+0xba>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:556
	{
		*pfPsiDeg += 360.0F;
	}

	// check for rounding errors mapping small negative angle to 360 deg
	if (*pfPsiDeg >= 360.0F)
    e192:	1c20      	adds	r0, r4, #0
    e194:	491d      	ldr	r1, [pc, #116]	; (e20c <fAndroidAnglesDegFromRotationMatrix+0xf0>)
    e196:	f7f2 fb75 	bl	884 <__aeabi_fcmpge>
    e19a:	2800      	cmp	r0, #0
    e19c:	d001      	beq.n	e1a2 <fAndroidAnglesDegFromRotationMatrix+0x86>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:558
	{
		*pfPsiDeg = 0.0F;
    e19e:	2400      	movs	r4, #0
    e1a0:	603c      	str	r4, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:563
	}

	// the compass heading angle Rho equals the yaw angle Psi
	// this definition is compliant with Motorola Xoom tablet behavior
	*pfRhoDeg = *pfPsiDeg;
    e1a2:	9b06      	ldr	r3, [sp, #24]
    e1a4:	601c      	str	r4, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:566

	// calculate the tilt angle from vertical Chi (0 <= Chi <= 180 deg) 
	*pfChiDeg = facos_deg(R[Z][Z]);
    e1a6:	6a28      	ldr	r0, [r5, #32]
    e1a8:	f7f4 febc 	bl	2f24 <facos_deg>
    e1ac:	9b07      	ldr	r3, [sp, #28]
    e1ae:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:569

	return;
}
    e1b0:	bc04      	pop	{r2}
    e1b2:	4690      	mov	r8, r2
    e1b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:541
		*pfPsiDeg = fatan2_deg(R[Y][X], R[Y][Y]) - *pfTheDeg;
	}
	else if (*pfPhiDeg == -90.0F)
	{
		// vertical upwards gimbal lock case
		*pfPsiDeg = fatan2_deg(R[Y][X], R[Y][Y]) + *pfTheDeg;
    e1b6:	6929      	ldr	r1, [r5, #16]
    e1b8:	68e8      	ldr	r0, [r5, #12]
    e1ba:	f7f5 f889 	bl	32d0 <fatan2_deg>
    e1be:	4643      	mov	r3, r8
    e1c0:	6819      	ldr	r1, [r3, #0]
    e1c2:	f7f2 fb69 	bl	898 <__aeabi_fadd>
    e1c6:	1c04      	adds	r4, r0, #0
    e1c8:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:550
		// // general case
		*pfPsiDeg = fatan2_deg(-R[X][Y], R[X][X]);
	}

	// map yaw angle Psi onto range 0.0 <= Psi < 360.0 deg
	if (*pfPsiDeg < 0.0F)
    e1ca:	2100      	movs	r1, #0
    e1cc:	1c20      	adds	r0, r4, #0
    e1ce:	f7f2 fb3b 	bl	848 <__aeabi_fcmplt>
    e1d2:	2800      	cmp	r0, #0
    e1d4:	d0dd      	beq.n	e192 <fAndroidAnglesDegFromRotationMatrix+0x76>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:552
	{
		*pfPsiDeg += 360.0F;
    e1d6:	1c20      	adds	r0, r4, #0
    e1d8:	490c      	ldr	r1, [pc, #48]	; (e20c <fAndroidAnglesDegFromRotationMatrix+0xf0>)
    e1da:	f7f2 fb5d 	bl	898 <__aeabi_fadd>
    e1de:	1c04      	adds	r4, r0, #0
    e1e0:	6038      	str	r0, [r7, #0]
    e1e2:	e7d6      	b.n	e192 <fAndroidAnglesDegFromRotationMatrix+0x76>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:536

	// calculate the yaw (compass) angle 0.0 <= Psi < 360.0 deg
	if (*pfPhiDeg == 90.0F)
	{
		// vertical downwards gimbal lock case
		*pfPsiDeg = fatan2_deg(R[Y][X], R[Y][Y]) - *pfTheDeg;
    e1e4:	6929      	ldr	r1, [r5, #16]
    e1e6:	68e8      	ldr	r0, [r5, #12]
    e1e8:	f7f5 f872 	bl	32d0 <fatan2_deg>
    e1ec:	4643      	mov	r3, r8
    e1ee:	6819      	ldr	r1, [r3, #0]
    e1f0:	f7f2 fff2 	bl	11d8 <__aeabi_fsub>
    e1f4:	1c04      	adds	r4, r0, #0
    e1f6:	6038      	str	r0, [r7, #0]
    e1f8:	e7c5      	b.n	e186 <fAndroidAnglesDegFromRotationMatrix+0x6a>
    e1fa:	46c0      	nop			; (mov r8, r8)
    e1fc:	43340000 	.word	0x43340000
    e200:	c3340000 	.word	0xc3340000
    e204:	42b40000 	.word	0x42b40000
    e208:	c2b40000 	.word	0xc2b40000
    e20c:	43b40000 	.word	0x43b40000

0000e210 <fWin8AnglesDegFromRotationMatrix>:
fWin8AnglesDegFromRotationMatrix():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:574
}

// extract the Windows 8 angles in degrees from the Windows 8 rotation matrix
void fWin8AnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
    e210:	b5f0      	push	{r4, r5, r6, r7, lr}
    e212:	4647      	mov	r7, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:576
	// calculate the roll angle -90.0 <= Phi <= 90.0 deg
	if (R[Z][Z] == 0.0F)
    e214:	6a05      	ldr	r5, [r0, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:574
}

// extract the Windows 8 angles in degrees from the Windows 8 rotation matrix
void fWin8AnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
    e216:	b480      	push	{r7}
    e218:	1c04      	adds	r4, r0, #0
    e21a:	4688      	mov	r8, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:576
	// calculate the roll angle -90.0 <= Phi <= 90.0 deg
	if (R[Z][Z] == 0.0F)
    e21c:	1c28      	adds	r0, r5, #0
    e21e:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:574
}

// extract the Windows 8 angles in degrees from the Windows 8 rotation matrix
void fWin8AnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
    e220:	1c16      	adds	r6, r2, #0
    e222:	1c1f      	adds	r7, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:576
	// calculate the roll angle -90.0 <= Phi <= 90.0 deg
	if (R[Z][Z] == 0.0F)
    e224:	f7f2 fb0a 	bl	83c <__aeabi_fcmpeq>
    e228:	2800      	cmp	r0, #0
    e22a:	d100      	bne.n	e22e <fWin8AnglesDegFromRotationMatrix+0x1e>
    e22c:	e091      	b.n	e352 <fWin8AnglesDegFromRotationMatrix+0x142>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:578
	{
		if (R[X][Z] >= 0.0F)
    e22e:	68a0      	ldr	r0, [r4, #8]
    e230:	2100      	movs	r1, #0
    e232:	f7f2 fb27 	bl	884 <__aeabi_fcmpge>
    e236:	2800      	cmp	r0, #0
    e238:	d100      	bne.n	e23c <fWin8AnglesDegFromRotationMatrix+0x2c>
    e23a:	e09f      	b.n	e37c <fWin8AnglesDegFromRotationMatrix+0x16c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:581
		{
			// tan(phi) is -infinity
			*pfPhiDeg = -90.0F;
    e23c:	4642      	mov	r2, r8
    e23e:	4b51      	ldr	r3, [pc, #324]	; (e384 <fWin8AnglesDegFromRotationMatrix+0x174>)
    e240:	6013      	str	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:596
		// general case
		*pfPhiDeg = fatan_deg(-R[X][Z] / R[Z][Z]);
	}

	// first calculate the pitch angle The in the range -90.0 <= The <= 90.0 deg
	*pfTheDeg = fasin_deg(R[Y][Z]);
    e242:	6960      	ldr	r0, [r4, #20]
    e244:	f7f4 fdc2 	bl	2dcc <fasin_deg>
    e248:	6030      	str	r0, [r6, #0]
    e24a:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:600

	// use R[Z][Z]=cos(Phi)*cos(The) to correct the quadrant of The remembering
	// cos(Phi) is non-negative so that cos(The) has the same sign as R[Z][Z].
	if (R[Z][Z] < 0.0F)
    e24c:	2100      	movs	r1, #0
    e24e:	6a20      	ldr	r0, [r4, #32]
    e250:	f7f2 fafa 	bl	848 <__aeabi_fcmplt>
    e254:	2800      	cmp	r0, #0
    e256:	d000      	beq.n	e25a <fWin8AnglesDegFromRotationMatrix+0x4a>
    e258:	e089      	b.n	e36e <fWin8AnglesDegFromRotationMatrix+0x15e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:607
		// wrap The around +90 deg and -90 deg giving result 90 to 270 deg
		*pfTheDeg = 180.0F - *pfTheDeg;
	}

	// map the pitch angle The to the range -180.0 <= The < 180.0 deg
	if (*pfTheDeg >= 180.0F)
    e25a:	1c28      	adds	r0, r5, #0
    e25c:	494a      	ldr	r1, [pc, #296]	; (e388 <fWin8AnglesDegFromRotationMatrix+0x178>)
    e25e:	f7f2 fb11 	bl	884 <__aeabi_fcmpge>
    e262:	2800      	cmp	r0, #0
    e264:	d005      	beq.n	e272 <fWin8AnglesDegFromRotationMatrix+0x62>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:609
	{
		*pfTheDeg -= 360.0F;
    e266:	1c28      	adds	r0, r5, #0
    e268:	4948      	ldr	r1, [pc, #288]	; (e38c <fWin8AnglesDegFromRotationMatrix+0x17c>)
    e26a:	f7f2 ffb5 	bl	11d8 <__aeabi_fsub>
    e26e:	1c05      	adds	r5, r0, #0
    e270:	6030      	str	r0, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:613
	}

	// calculate the yaw angle Psi
	if (*pfTheDeg == 90.0F)
    e272:	1c28      	adds	r0, r5, #0
    e274:	4946      	ldr	r1, [pc, #280]	; (e390 <fWin8AnglesDegFromRotationMatrix+0x180>)
    e276:	f7f2 fae1 	bl	83c <__aeabi_fcmpeq>
    e27a:	2800      	cmp	r0, #0
    e27c:	d15e      	bne.n	e33c <fWin8AnglesDegFromRotationMatrix+0x12c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:618
	{
		// vertical upwards gimbal lock case: -270 <= Psi < 90 deg
		*pfPsiDeg = fatan2_deg(R[X][Y], R[X][X]) - *pfPhiDeg;
	}
	else if (*pfTheDeg == -90.0F)
    e27e:	1c28      	adds	r0, r5, #0
    e280:	4940      	ldr	r1, [pc, #256]	; (e384 <fWin8AnglesDegFromRotationMatrix+0x174>)
    e282:	f7f2 fadb 	bl	83c <__aeabi_fcmpeq>
    e286:	2800      	cmp	r0, #0
    e288:	d021      	beq.n	e2ce <fWin8AnglesDegFromRotationMatrix+0xbe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:621
	{
		// vertical downwards gimbal lock case: -270 <= Psi < 90 deg
		*pfPsiDeg = fatan2_deg(R[X][Y], R[X][X]) + *pfPhiDeg;
    e28a:	6821      	ldr	r1, [r4, #0]
    e28c:	6860      	ldr	r0, [r4, #4]
    e28e:	f7f5 f81f 	bl	32d0 <fatan2_deg>
    e292:	4643      	mov	r3, r8
    e294:	6819      	ldr	r1, [r3, #0]
    e296:	f7f2 faff 	bl	898 <__aeabi_fadd>
    e29a:	1c05      	adds	r5, r0, #0
    e29c:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:636
			*pfPsiDeg += 180.0F;
		}
	}

	// map yaw angle Psi onto range 0.0 <= Psi < 360.0 deg
	if (*pfPsiDeg < 0.0F)
    e29e:	1c28      	adds	r0, r5, #0
    e2a0:	2100      	movs	r1, #0
    e2a2:	f7f2 fad1 	bl	848 <__aeabi_fcmplt>
    e2a6:	2800      	cmp	r0, #0
    e2a8:	d130      	bne.n	e30c <fWin8AnglesDegFromRotationMatrix+0xfc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:642
	{
		*pfPsiDeg += 360.0F;
	}

	// check for any rounding error mapping small negative angle to 360 deg
	if (*pfPsiDeg >= 360.0F)
    e2aa:	1c28      	adds	r0, r5, #0
    e2ac:	4937      	ldr	r1, [pc, #220]	; (e38c <fWin8AnglesDegFromRotationMatrix+0x17c>)
    e2ae:	f7f2 fae9 	bl	884 <__aeabi_fcmpge>
    e2b2:	2800      	cmp	r0, #0
    e2b4:	d036      	beq.n	e324 <fWin8AnglesDegFromRotationMatrix+0x114>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:644
	{
		*pfPsiDeg = 0.0F;
    e2b6:	2500      	movs	r5, #0
    e2b8:	603d      	str	r5, [r7, #0]
    e2ba:	9b06      	ldr	r3, [sp, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:660

	// calculate the tilt angle from vertical Chi (0 <= Chi <= 180 deg) 
	*pfChiDeg = facos_deg(R[Z][Z]);

	return;
}
    e2bc:	601d      	str	r5, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:657
	{
		*pfRhoDeg = 0.0F;
	}

	// calculate the tilt angle from vertical Chi (0 <= Chi <= 180 deg) 
	*pfChiDeg = facos_deg(R[Z][Z]);
    e2be:	6a20      	ldr	r0, [r4, #32]
    e2c0:	f7f4 fe30 	bl	2f24 <facos_deg>
    e2c4:	9b07      	ldr	r3, [sp, #28]
    e2c6:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:660

	return;
}
    e2c8:	bc04      	pop	{r2}
    e2ca:	4690      	mov	r8, r2
    e2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:626
		*pfPsiDeg = fatan2_deg(R[X][Y], R[X][X]) + *pfPhiDeg;
	}
	else
	{
		// general case: -180 <= Psi < 180 deg
		*pfPsiDeg = fatan2_deg(-R[Y][X], R[Y][Y]);
    e2ce:	2280      	movs	r2, #128	; 0x80
    e2d0:	0612      	lsls	r2, r2, #24
    e2d2:	4694      	mov	ip, r2
    e2d4:	68e3      	ldr	r3, [r4, #12]
    e2d6:	6921      	ldr	r1, [r4, #16]
    e2d8:	4463      	add	r3, ip
    e2da:	1c18      	adds	r0, r3, #0
    e2dc:	f7f4 fff8 	bl	32d0 <fatan2_deg>
    e2e0:	6038      	str	r0, [r7, #0]
    e2e2:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:629

		// correct the quadrant for Psi using the value of The (deg) to give -180 <= Psi < 380 deg
		if (fabs(*pfTheDeg) >= 90.0F)
    e2e4:	6830      	ldr	r0, [r6, #0]
    e2e6:	492a      	ldr	r1, [pc, #168]	; (e390 <fWin8AnglesDegFromRotationMatrix+0x180>)
    e2e8:	0040      	lsls	r0, r0, #1
    e2ea:	0840      	lsrs	r0, r0, #1
    e2ec:	f7f2 faca 	bl	884 <__aeabi_fcmpge>
    e2f0:	2800      	cmp	r0, #0
    e2f2:	d0d4      	beq.n	e29e <fWin8AnglesDegFromRotationMatrix+0x8e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:631
		{
			*pfPsiDeg += 180.0F;
    e2f4:	1c28      	adds	r0, r5, #0
    e2f6:	4924      	ldr	r1, [pc, #144]	; (e388 <fWin8AnglesDegFromRotationMatrix+0x178>)
    e2f8:	f7f2 face 	bl	898 <__aeabi_fadd>
    e2fc:	1c05      	adds	r5, r0, #0
    e2fe:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:636
		}
	}

	// map yaw angle Psi onto range 0.0 <= Psi < 360.0 deg
	if (*pfPsiDeg < 0.0F)
    e300:	2100      	movs	r1, #0
    e302:	1c28      	adds	r0, r5, #0
    e304:	f7f2 faa0 	bl	848 <__aeabi_fcmplt>
    e308:	2800      	cmp	r0, #0
    e30a:	d0ce      	beq.n	e2aa <fWin8AnglesDegFromRotationMatrix+0x9a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:638
	{
		*pfPsiDeg += 360.0F;
    e30c:	1c28      	adds	r0, r5, #0
    e30e:	491f      	ldr	r1, [pc, #124]	; (e38c <fWin8AnglesDegFromRotationMatrix+0x17c>)
    e310:	f7f2 fac2 	bl	898 <__aeabi_fadd>
    e314:	1c05      	adds	r5, r0, #0
    e316:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:642
	}

	// check for any rounding error mapping small negative angle to 360 deg
	if (*pfPsiDeg >= 360.0F)
    e318:	491c      	ldr	r1, [pc, #112]	; (e38c <fWin8AnglesDegFromRotationMatrix+0x17c>)
    e31a:	1c28      	adds	r0, r5, #0
    e31c:	f7f2 fab2 	bl	884 <__aeabi_fcmpge>
    e320:	2800      	cmp	r0, #0
    e322:	d1c8      	bne.n	e2b6 <fWin8AnglesDegFromRotationMatrix+0xa6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:648
	{
		*pfPsiDeg = 0.0F;
	}

	// compute the compass angle Rho = 360 - Psi
	*pfRhoDeg = 360.0F - *pfPsiDeg;
    e324:	1c29      	adds	r1, r5, #0
    e326:	4819      	ldr	r0, [pc, #100]	; (e38c <fWin8AnglesDegFromRotationMatrix+0x17c>)
    e328:	f7f2 ff56 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:651

	// check for rounding errors mapping small negative angle to 360 deg and zero degree case
	if (*pfRhoDeg >= 360.0F)
    e32c:	4917      	ldr	r1, [pc, #92]	; (e38c <fWin8AnglesDegFromRotationMatrix+0x17c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:648
	{
		*pfPsiDeg = 0.0F;
	}

	// compute the compass angle Rho = 360 - Psi
	*pfRhoDeg = 360.0F - *pfPsiDeg;
    e32e:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:651

	// check for rounding errors mapping small negative angle to 360 deg and zero degree case
	if (*pfRhoDeg >= 360.0F)
    e330:	f7f2 faa8 	bl	884 <__aeabi_fcmpge>
    e334:	2800      	cmp	r0, #0
    e336:	d0c0      	beq.n	e2ba <fWin8AnglesDegFromRotationMatrix+0xaa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:653
	{
		*pfRhoDeg = 0.0F;
    e338:	2500      	movs	r5, #0
    e33a:	e7be      	b.n	e2ba <fWin8AnglesDegFromRotationMatrix+0xaa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:616

	// calculate the yaw angle Psi
	if (*pfTheDeg == 90.0F)
	{
		// vertical upwards gimbal lock case: -270 <= Psi < 90 deg
		*pfPsiDeg = fatan2_deg(R[X][Y], R[X][X]) - *pfPhiDeg;
    e33c:	6821      	ldr	r1, [r4, #0]
    e33e:	6860      	ldr	r0, [r4, #4]
    e340:	f7f4 ffc6 	bl	32d0 <fatan2_deg>
    e344:	4643      	mov	r3, r8
    e346:	6819      	ldr	r1, [r3, #0]
    e348:	f7f2 ff46 	bl	11d8 <__aeabi_fsub>
    e34c:	1c05      	adds	r5, r0, #0
    e34e:	6038      	str	r0, [r7, #0]
    e350:	e7a5      	b.n	e29e <fWin8AnglesDegFromRotationMatrix+0x8e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:592
		}
	}
	else
	{
		// general case
		*pfPhiDeg = fatan_deg(-R[X][Z] / R[Z][Z]);
    e352:	2280      	movs	r2, #128	; 0x80
    e354:	0612      	lsls	r2, r2, #24
    e356:	4694      	mov	ip, r2
    e358:	68a3      	ldr	r3, [r4, #8]
    e35a:	1c29      	adds	r1, r5, #0
    e35c:	4463      	add	r3, ip
    e35e:	1c18      	adds	r0, r3, #0
    e360:	f7f2 fc16 	bl	b90 <__aeabi_fdiv>
    e364:	f7f4 ff24 	bl	31b0 <fatan_deg>
    e368:	4643      	mov	r3, r8
    e36a:	6018      	str	r0, [r3, #0]
    e36c:	e769      	b.n	e242 <fWin8AnglesDegFromRotationMatrix+0x32>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:603
	// use R[Z][Z]=cos(Phi)*cos(The) to correct the quadrant of The remembering
	// cos(Phi) is non-negative so that cos(The) has the same sign as R[Z][Z].
	if (R[Z][Z] < 0.0F)
	{
		// wrap The around +90 deg and -90 deg giving result 90 to 270 deg
		*pfTheDeg = 180.0F - *pfTheDeg;
    e36e:	1c29      	adds	r1, r5, #0
    e370:	4805      	ldr	r0, [pc, #20]	; (e388 <fWin8AnglesDegFromRotationMatrix+0x178>)
    e372:	f7f2 ff31 	bl	11d8 <__aeabi_fsub>
    e376:	1c05      	adds	r5, r0, #0
    e378:	6030      	str	r0, [r6, #0]
    e37a:	e76e      	b.n	e25a <fWin8AnglesDegFromRotationMatrix+0x4a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:586
			*pfPhiDeg = -90.0F;
		}
		else
		{
			// tan(phi) is +infinity
			*pfPhiDeg = 90.0F;
    e37c:	4642      	mov	r2, r8
    e37e:	4b04      	ldr	r3, [pc, #16]	; (e390 <fWin8AnglesDegFromRotationMatrix+0x180>)
    e380:	6013      	str	r3, [r2, #0]
    e382:	e75e      	b.n	e242 <fWin8AnglesDegFromRotationMatrix+0x32>
    e384:	c2b40000 	.word	0xc2b40000
    e388:	43340000 	.word	0x43340000
    e38c:	43b40000 	.word	0x43b40000
    e390:	42b40000 	.word	0x42b40000

0000e394 <fQuaternionFromRotationVectorDeg>:
fQuaternionFromRotationVectorDeg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:664
	return;
}

// computes normalized rotation quaternion from a rotation vector (deg)
void fQuaternionFromRotationVectorDeg(struct fquaternion *pq, const float rvecdeg[], float fscaling)
{
    e394:	b5f0      	push	{r4, r5, r6, r7, lr}
    e396:	464e      	mov	r6, r9
    e398:	4645      	mov	r5, r8
    e39a:	4657      	mov	r7, sl
    e39c:	b4e0      	push	{r5, r6, r7}
    e39e:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:674
	float sinhalfeta;		// sin(eta/2)
	float fvecsq;			// q1^2+q2^2+q3^2
	float ftmp;				// scratch variable

	// compute the scaled rotation angle eta (deg) which can be both positve or negative
	fetadeg = fscaling * sqrtf(rvecdeg[X] * rvecdeg[X] + rvecdeg[Y] * rvecdeg[Y] + rvecdeg[Z] * rvecdeg[Z]);
    e3a0:	6808      	ldr	r0, [r1, #0]
    e3a2:	684f      	ldr	r7, [r1, #4]
    e3a4:	688e      	ldr	r6, [r1, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:664
	return;
}

// computes normalized rotation quaternion from a rotation vector (deg)
void fQuaternionFromRotationVectorDeg(struct fquaternion *pq, const float rvecdeg[], float fscaling)
{
    e3a6:	1c0c      	adds	r4, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:674
	float sinhalfeta;		// sin(eta/2)
	float fvecsq;			// q1^2+q2^2+q3^2
	float ftmp;				// scratch variable

	// compute the scaled rotation angle eta (deg) which can be both positve or negative
	fetadeg = fscaling * sqrtf(rvecdeg[X] * rvecdeg[X] + rvecdeg[Y] * rvecdeg[Y] + rvecdeg[Z] * rvecdeg[Z]);
    e3a8:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:664
	return;
}

// computes normalized rotation quaternion from a rotation vector (deg)
void fQuaternionFromRotationVectorDeg(struct fquaternion *pq, const float rvecdeg[], float fscaling)
{
    e3aa:	4691      	mov	r9, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:674
	float sinhalfeta;		// sin(eta/2)
	float fvecsq;			// q1^2+q2^2+q3^2
	float ftmp;				// scratch variable

	// compute the scaled rotation angle eta (deg) which can be both positve or negative
	fetadeg = fscaling * sqrtf(rvecdeg[X] * rvecdeg[X] + rvecdeg[Y] * rvecdeg[Y] + rvecdeg[Z] * rvecdeg[Z]);
    e3ac:	f7f2 fde2 	bl	f74 <__aeabi_fmul>
    e3b0:	1c39      	adds	r1, r7, #0
    e3b2:	4680      	mov	r8, r0
    e3b4:	1c38      	adds	r0, r7, #0
    e3b6:	f7f2 fddd 	bl	f74 <__aeabi_fmul>
    e3ba:	1c01      	adds	r1, r0, #0
    e3bc:	4640      	mov	r0, r8
    e3be:	f7f2 fa6b 	bl	898 <__aeabi_fadd>
    e3c2:	1c31      	adds	r1, r6, #0
    e3c4:	1c07      	adds	r7, r0, #0
    e3c6:	1c30      	adds	r0, r6, #0
    e3c8:	f7f2 fdd4 	bl	f74 <__aeabi_fmul>
    e3cc:	1c01      	adds	r1, r0, #0
    e3ce:	1c38      	adds	r0, r7, #0
    e3d0:	f7f2 fa62 	bl	898 <__aeabi_fadd>
    e3d4:	f004 fb1a 	bl	12a0c <sqrtf>
    e3d8:	4649      	mov	r1, r9
    e3da:	f7f2 fdcb 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:675
	fetarad = fetadeg * FDEGTORAD;
    e3de:	494d      	ldr	r1, [pc, #308]	; (e514 <fQuaternionFromRotationVectorDeg+0x180>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:674
	float sinhalfeta;		// sin(eta/2)
	float fvecsq;			// q1^2+q2^2+q3^2
	float ftmp;				// scratch variable

	// compute the scaled rotation angle eta (deg) which can be both positve or negative
	fetadeg = fscaling * sqrtf(rvecdeg[X] * rvecdeg[X] + rvecdeg[Y] * rvecdeg[Y] + rvecdeg[Z] * rvecdeg[Z]);
    e3e0:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:675
	fetarad = fetadeg * FDEGTORAD;
    e3e2:	f7f2 fdc7 	bl	f74 <__aeabi_fmul>
    e3e6:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:676
	fetarad2 = fetarad * fetarad;
    e3e8:	1c31      	adds	r1, r6, #0
    e3ea:	f7f2 fdc3 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:680

	// calculate the sine and cosine using small angle approximations or exact
	// angles under sqrt(0.02)=0.141 rad is 8.1 deg and 1620 deg/s (=936deg/s in 3 axes) at 200Hz and 405 deg/s at 50Hz
	if (fetarad2 <= 0.02F)
    e3ee:	494a      	ldr	r1, [pc, #296]	; (e518 <fQuaternionFromRotationVectorDeg+0x184>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:676
	float ftmp;				// scratch variable

	// compute the scaled rotation angle eta (deg) which can be both positve or negative
	fetadeg = fscaling * sqrtf(rvecdeg[X] * rvecdeg[X] + rvecdeg[Y] * rvecdeg[Y] + rvecdeg[Z] * rvecdeg[Z]);
	fetarad = fetadeg * FDEGTORAD;
	fetarad2 = fetarad * fetarad;
    e3f0:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:680

	// calculate the sine and cosine using small angle approximations or exact
	// angles under sqrt(0.02)=0.141 rad is 8.1 deg and 1620 deg/s (=936deg/s in 3 axes) at 200Hz and 405 deg/s at 50Hz
	if (fetarad2 <= 0.02F)
    e3f2:	f7f2 fa33 	bl	85c <__aeabi_fcmple>
    e3f6:	2800      	cmp	r0, #0
    e3f8:	d04f      	beq.n	e49a <fQuaternionFromRotationVectorDeg+0x106>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:683
	{
		// use MacLaurin series up to and including third order
		sinhalfeta = fetarad * (0.5F - ONEOVER48 * fetarad2);
    e3fa:	1c38      	adds	r0, r7, #0
    e3fc:	4947      	ldr	r1, [pc, #284]	; (e51c <fQuaternionFromRotationVectorDeg+0x188>)
    e3fe:	f7f2 fdb9 	bl	f74 <__aeabi_fmul>
    e402:	1c01      	adds	r1, r0, #0
    e404:	20fc      	movs	r0, #252	; 0xfc
    e406:	0580      	lsls	r0, r0, #22
    e408:	f7f2 fee6 	bl	11d8 <__aeabi_fsub>
    e40c:	1c31      	adds	r1, r6, #0
    e40e:	f7f2 fdb1 	bl	f74 <__aeabi_fmul>
    e412:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:699
		// use exact calculation
		sinhalfeta = (float)sinf(0.5F * fetarad);
	}

	// compute the vector quaternion components q1, q2, q3
	if (fetadeg != 0.0F)
    e414:	2600      	movs	r6, #0
    e416:	4640      	mov	r0, r8
    e418:	1c31      	adds	r1, r6, #0
    e41a:	f7f2 fa0f 	bl	83c <__aeabi_fcmpeq>
    e41e:	2800      	cmp	r0, #0
    e420:	d161      	bne.n	e4e6 <fQuaternionFromRotationVectorDeg+0x152>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:702
	{
		// general case with non-zero rotation angle
		ftmp = fscaling * sinhalfeta / fetadeg;
    e422:	1c39      	adds	r1, r7, #0
    e424:	4648      	mov	r0, r9
    e426:	f7f2 fda5 	bl	f74 <__aeabi_fmul>
    e42a:	4641      	mov	r1, r8
    e42c:	f7f2 fbb0 	bl	b90 <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:703
		pq->q1 = rvecdeg[X] * ftmp;		// q1 = nx * sin(eta/2)
    e430:	6821      	ldr	r1, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:702

	// compute the vector quaternion components q1, q2, q3
	if (fetadeg != 0.0F)
	{
		// general case with non-zero rotation angle
		ftmp = fscaling * sinhalfeta / fetadeg;
    e432:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:703
		pq->q1 = rvecdeg[X] * ftmp;		// q1 = nx * sin(eta/2)
    e434:	f7f2 fd9e 	bl	f74 <__aeabi_fmul>
    e438:	6068      	str	r0, [r5, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:704
		pq->q2 = rvecdeg[Y] * ftmp;		// q2 = ny * sin(eta/2)
    e43a:	6861      	ldr	r1, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:703
	// compute the vector quaternion components q1, q2, q3
	if (fetadeg != 0.0F)
	{
		// general case with non-zero rotation angle
		ftmp = fscaling * sinhalfeta / fetadeg;
		pq->q1 = rvecdeg[X] * ftmp;		// q1 = nx * sin(eta/2)
    e43c:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:704
		pq->q2 = rvecdeg[Y] * ftmp;		// q2 = ny * sin(eta/2)
    e43e:	4648      	mov	r0, r9
    e440:	f7f2 fd98 	bl	f74 <__aeabi_fmul>
    e444:	60a8      	str	r0, [r5, #8]
    e446:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:705
		pq->q3 = rvecdeg[Z] * ftmp;		// q3 = nz * sin(eta/2)
    e448:	68a1      	ldr	r1, [r4, #8]
    e44a:	4648      	mov	r0, r9
    e44c:	f7f2 fd92 	bl	f74 <__aeabi_fmul>
    e450:	4641      	mov	r1, r8
    e452:	1c04      	adds	r4, r0, #0
    e454:	60e8      	str	r0, [r5, #12]
    e456:	4640      	mov	r0, r8
    e458:	f7f2 fd8c 	bl	f74 <__aeabi_fmul>
    e45c:	1c39      	adds	r1, r7, #0
    e45e:	4680      	mov	r8, r0
    e460:	1c38      	adds	r0, r7, #0
    e462:	f7f2 fd87 	bl	f74 <__aeabi_fmul>
    e466:	1c01      	adds	r1, r0, #0
    e468:	4640      	mov	r0, r8
    e46a:	f7f2 fa15 	bl	898 <__aeabi_fadd>
    e46e:	1c21      	adds	r1, r4, #0
    e470:	1c07      	adds	r7, r0, #0
    e472:	1c20      	adds	r0, r4, #0
    e474:	f7f2 fd7e 	bl	f74 <__aeabi_fmul>
    e478:	1c01      	adds	r1, r0, #0
    e47a:	1c38      	adds	r0, r7, #0
    e47c:	f7f2 fa0c 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:716
	}

	// compute the scalar quaternion component q0 by explicit normalization
	// taking care to avoid rounding errors giving negative operand to sqrt
	fvecsq = pq->q1 * pq->q1 + pq->q2 * pq->q2 + pq->q3 * pq->q3;
	if (fvecsq <= 1.0F)
    e480:	21fe      	movs	r1, #254	; 0xfe
    e482:	0589      	lsls	r1, r1, #22
    e484:	1c04      	adds	r4, r0, #0
    e486:	f7f2 f9e9 	bl	85c <__aeabi_fcmple>
    e48a:	2800      	cmp	r0, #0
    e48c:	d12f      	bne.n	e4ee <fQuaternionFromRotationVectorDeg+0x15a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:724
		pq->q0 = sqrtf(1.0F - fvecsq);
	}
	else
	{
		// rounding errors are present
		pq->q0 = 0.0F;
    e48e:	602e      	str	r6, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:728
	}

	return;
}
    e490:	bc1c      	pop	{r2, r3, r4}
    e492:	4690      	mov	r8, r2
    e494:	4699      	mov	r9, r3
    e496:	46a2      	mov	sl, r4
    e498:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:685
	if (fetarad2 <= 0.02F)
	{
		// use MacLaurin series up to and including third order
		sinhalfeta = fetarad * (0.5F - ONEOVER48 * fetarad2);
	}
	else if  (fetarad2 <= 0.06F)
    e49a:	1c38      	adds	r0, r7, #0
    e49c:	4920      	ldr	r1, [pc, #128]	; (e520 <fQuaternionFromRotationVectorDeg+0x18c>)
    e49e:	f7f2 f9dd 	bl	85c <__aeabi_fcmple>
    e4a2:	2800      	cmp	r0, #0
    e4a4:	d02c      	beq.n	e500 <fQuaternionFromRotationVectorDeg+0x16c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:690
	{
		// use MacLaurin series up to and including fifth order
		// angles under sqrt(0.06)=0.245 rad is 14.0 deg and 2807 deg/s (=1623deg/s in 3 axes) at 200Hz and 703 deg/s at 50Hz
		fetarad4 = fetarad2 * fetarad2;
		sinhalfeta = fetarad * (0.5F - ONEOVER48 * fetarad2 + ONEOVER3840 * fetarad4);
    e4a6:	1c38      	adds	r0, r7, #0
    e4a8:	491c      	ldr	r1, [pc, #112]	; (e51c <fQuaternionFromRotationVectorDeg+0x188>)
    e4aa:	f7f2 fd63 	bl	f74 <__aeabi_fmul>
    e4ae:	1c01      	adds	r1, r0, #0
    e4b0:	20fc      	movs	r0, #252	; 0xfc
    e4b2:	0580      	lsls	r0, r0, #22
    e4b4:	f7f2 fe90 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:689
	}
	else if  (fetarad2 <= 0.06F)
	{
		// use MacLaurin series up to and including fifth order
		// angles under sqrt(0.06)=0.245 rad is 14.0 deg and 2807 deg/s (=1623deg/s in 3 axes) at 200Hz and 703 deg/s at 50Hz
		fetarad4 = fetarad2 * fetarad2;
    e4b8:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:690
		sinhalfeta = fetarad * (0.5F - ONEOVER48 * fetarad2 + ONEOVER3840 * fetarad4);
    e4ba:	4682      	mov	sl, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:689
	}
	else if  (fetarad2 <= 0.06F)
	{
		// use MacLaurin series up to and including fifth order
		// angles under sqrt(0.06)=0.245 rad is 14.0 deg and 2807 deg/s (=1623deg/s in 3 axes) at 200Hz and 703 deg/s at 50Hz
		fetarad4 = fetarad2 * fetarad2;
    e4bc:	1c38      	adds	r0, r7, #0
    e4be:	f7f2 fd59 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:690
		sinhalfeta = fetarad * (0.5F - ONEOVER48 * fetarad2 + ONEOVER3840 * fetarad4);
    e4c2:	4918      	ldr	r1, [pc, #96]	; (e524 <fQuaternionFromRotationVectorDeg+0x190>)
    e4c4:	f7f2 fd56 	bl	f74 <__aeabi_fmul>
    e4c8:	1c01      	adds	r1, r0, #0
    e4ca:	4650      	mov	r0, sl
    e4cc:	f7f2 f9e4 	bl	898 <__aeabi_fadd>
    e4d0:	1c31      	adds	r1, r6, #0
    e4d2:	f7f2 fd4f 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:699
		// use exact calculation
		sinhalfeta = (float)sinf(0.5F * fetarad);
	}

	// compute the vector quaternion components q1, q2, q3
	if (fetadeg != 0.0F)
    e4d6:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:690
	else if  (fetarad2 <= 0.06F)
	{
		// use MacLaurin series up to and including fifth order
		// angles under sqrt(0.06)=0.245 rad is 14.0 deg and 2807 deg/s (=1623deg/s in 3 axes) at 200Hz and 703 deg/s at 50Hz
		fetarad4 = fetarad2 * fetarad2;
		sinhalfeta = fetarad * (0.5F - ONEOVER48 * fetarad2 + ONEOVER3840 * fetarad4);
    e4d8:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:699
		// use exact calculation
		sinhalfeta = (float)sinf(0.5F * fetarad);
	}

	// compute the vector quaternion components q1, q2, q3
	if (fetadeg != 0.0F)
    e4da:	1c31      	adds	r1, r6, #0
    e4dc:	4640      	mov	r0, r8
    e4de:	f7f2 f9ad 	bl	83c <__aeabi_fcmpeq>
    e4e2:	2800      	cmp	r0, #0
    e4e4:	d09d      	beq.n	e422 <fQuaternionFromRotationVectorDeg+0x8e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:710
		pq->q3 = rvecdeg[Z] * ftmp;		// q3 = nz * sin(eta/2)
	}
	else
	{
		// zero rotation angle giving zero vector component
		pq->q1 = pq->q2 = pq->q3 = 0.0F;
    e4e6:	60ee      	str	r6, [r5, #12]
    e4e8:	60ae      	str	r6, [r5, #8]
    e4ea:	606e      	str	r6, [r5, #4]
    e4ec:	1c34      	adds	r4, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:719
	// taking care to avoid rounding errors giving negative operand to sqrt
	fvecsq = pq->q1 * pq->q1 + pq->q2 * pq->q2 + pq->q3 * pq->q3;
	if (fvecsq <= 1.0F)
	{
		// normal case
		pq->q0 = sqrtf(1.0F - fvecsq);
    e4ee:	20fe      	movs	r0, #254	; 0xfe
    e4f0:	1c21      	adds	r1, r4, #0
    e4f2:	0580      	lsls	r0, r0, #22
    e4f4:	f7f2 fe70 	bl	11d8 <__aeabi_fsub>
    e4f8:	f004 fa88 	bl	12a0c <sqrtf>
    e4fc:	6028      	str	r0, [r5, #0]
    e4fe:	e7c7      	b.n	e490 <fQuaternionFromRotationVectorDeg+0xfc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:695
		sinhalfeta = fetarad * (0.5F - ONEOVER48 * fetarad2 + ONEOVER3840 * fetarad4);
	}
	else
	{
		// use exact calculation
		sinhalfeta = (float)sinf(0.5F * fetarad);
    e500:	21fc      	movs	r1, #252	; 0xfc
    e502:	1c30      	adds	r0, r6, #0
    e504:	0589      	lsls	r1, r1, #22
    e506:	f7f2 fd35 	bl	f74 <__aeabi_fmul>
    e50a:	f004 f843 	bl	12594 <sinf>
    e50e:	1c07      	adds	r7, r0, #0
    e510:	e780      	b.n	e414 <fQuaternionFromRotationVectorDeg+0x80>
    e512:	46c0      	nop			; (mov r8, r8)
    e514:	3c8efa35 	.word	0x3c8efa35
    e518:	3ca3d70a 	.word	0x3ca3d70a
    e51c:	3caaaaab 	.word	0x3caaaaab
    e520:	3d75c28f 	.word	0x3d75c28f
    e524:	39888889 	.word	0x39888889

0000e528 <fQuaternionFromRotationMatrix>:
fQuaternionFromRotationMatrix():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:732
	return;
}

// compute the orientation quaternion from a 3x3 rotation matrix
void fQuaternionFromRotationMatrix(float R[][3], struct fquaternion *pq)
{
    e528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e52a:	1c0d      	adds	r5, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:741
	// the quaternion is not explicitly normalized in this function on the assumption that it
	// is supplied with a normalized rotation matrix. if the rotation matrix is normalized then
	// the quaternion will also be normalized even if the case of small q0

	// get q0^2 and q0
	fq0sq = 0.25F * (1.0F + R[X][X] + R[Y][Y] + R[Z][Z]);
    e52c:	21fe      	movs	r1, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:732
	return;
}

// compute the orientation quaternion from a 3x3 rotation matrix
void fQuaternionFromRotationMatrix(float R[][3], struct fquaternion *pq)
{
    e52e:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:741
	// the quaternion is not explicitly normalized in this function on the assumption that it
	// is supplied with a normalized rotation matrix. if the rotation matrix is normalized then
	// the quaternion will also be normalized even if the case of small q0

	// get q0^2 and q0
	fq0sq = 0.25F * (1.0F + R[X][X] + R[Y][Y] + R[Z][Z]);
    e530:	0589      	lsls	r1, r1, #22
    e532:	6800      	ldr	r0, [r0, #0]
    e534:	f7f2 f9b0 	bl	898 <__aeabi_fadd>
    e538:	6921      	ldr	r1, [r4, #16]
    e53a:	f7f2 f9ad 	bl	898 <__aeabi_fadd>
    e53e:	6a21      	ldr	r1, [r4, #32]
    e540:	f7f2 f9aa 	bl	898 <__aeabi_fadd>
    e544:	21fa      	movs	r1, #250	; 0xfa
    e546:	0589      	lsls	r1, r1, #22
    e548:	f7f2 fd14 	bl	f74 <__aeabi_fmul>
    e54c:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:742
	pq->q0 = sqrtf(fabs(fq0sq));
    e54e:	0040      	lsls	r0, r0, #1
    e550:	0840      	lsrs	r0, r0, #1
    e552:	f004 fa5b 	bl	12a0c <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:745

	// normal case when q0 is not small meaning rotation angle not near 180 deg
	if (pq->q0 > SMALLQ0)
    e556:	4944      	ldr	r1, [pc, #272]	; (e668 <fQuaternionFromRotationMatrix+0x140>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:742
	// is supplied with a normalized rotation matrix. if the rotation matrix is normalized then
	// the quaternion will also be normalized even if the case of small q0

	// get q0^2 and q0
	fq0sq = 0.25F * (1.0F + R[X][X] + R[Y][Y] + R[Z][Z]);
	pq->q0 = sqrtf(fabs(fq0sq));
    e558:	6028      	str	r0, [r5, #0]
    e55a:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:745

	// normal case when q0 is not small meaning rotation angle not near 180 deg
	if (pq->q0 > SMALLQ0)
    e55c:	f7f2 f988 	bl	870 <__aeabi_fcmpgt>
    e560:	2800      	cmp	r0, #0
    e562:	d01e      	beq.n	e5a2 <fQuaternionFromRotationMatrix+0x7a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:748
	{
		// calculate q1 to q3
		recip4q0 = 0.25F / pq->q0;
    e564:	20fa      	movs	r0, #250	; 0xfa
    e566:	1c31      	adds	r1, r6, #0
    e568:	0580      	lsls	r0, r0, #22
    e56a:	f7f2 fb11 	bl	b90 <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:749
		pq->q1 = recip4q0 * (R[Y][Z] - R[Z][Y]);
    e56e:	69e1      	ldr	r1, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:748

	// normal case when q0 is not small meaning rotation angle not near 180 deg
	if (pq->q0 > SMALLQ0)
	{
		// calculate q1 to q3
		recip4q0 = 0.25F / pq->q0;
    e570:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:749
		pq->q1 = recip4q0 * (R[Y][Z] - R[Z][Y]);
    e572:	6960      	ldr	r0, [r4, #20]
    e574:	f7f2 fe30 	bl	11d8 <__aeabi_fsub>
    e578:	1c31      	adds	r1, r6, #0
    e57a:	f7f2 fcfb 	bl	f74 <__aeabi_fmul>
    e57e:	6068      	str	r0, [r5, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:750
		pq->q2 = recip4q0 * (R[Z][X] - R[X][Z]);
    e580:	68a1      	ldr	r1, [r4, #8]
    e582:	69a0      	ldr	r0, [r4, #24]
    e584:	f7f2 fe28 	bl	11d8 <__aeabi_fsub>
    e588:	1c31      	adds	r1, r6, #0
    e58a:	f7f2 fcf3 	bl	f74 <__aeabi_fmul>
    e58e:	60a8      	str	r0, [r5, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:751
		pq->q3 = recip4q0 * (R[X][Y] - R[Y][X]);
    e590:	68e1      	ldr	r1, [r4, #12]
    e592:	6860      	ldr	r0, [r4, #4]
    e594:	f7f2 fe20 	bl	11d8 <__aeabi_fsub>
    e598:	1c31      	adds	r1, r6, #0
    e59a:	f7f2 fceb 	bl	f74 <__aeabi_fmul>
    e59e:	60e8      	str	r0, [r5, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:769
		if ((R[Z][X] - R[X][Z]) < 0.0F) pq->q2 = -pq->q2;
		if ((R[X][Y] - R[Y][X]) < 0.0F) pq->q3 = -pq->q3;
	} // end of special case

	return;
}
    e5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:758
	else
	{
		// special case of near 180 deg corresponds to nearly symmetric matrix
		// which is not numerically well conditioned for division by small q0
		// instead get absolute values of q1 to q3 from leading diagonal
		pq->q1 = sqrtf(fabs(0.5F * (1.0F + R[X][X]) - fq0sq));
    e5a2:	21fe      	movs	r1, #254	; 0xfe
    e5a4:	6820      	ldr	r0, [r4, #0]
    e5a6:	0589      	lsls	r1, r1, #22
    e5a8:	f7f2 f976 	bl	898 <__aeabi_fadd>
    e5ac:	21fc      	movs	r1, #252	; 0xfc
    e5ae:	0589      	lsls	r1, r1, #22
    e5b0:	f7f2 fce0 	bl	f74 <__aeabi_fmul>
    e5b4:	1c39      	adds	r1, r7, #0
    e5b6:	f7f2 fe0f 	bl	11d8 <__aeabi_fsub>
    e5ba:	0040      	lsls	r0, r0, #1
    e5bc:	0840      	lsrs	r0, r0, #1
    e5be:	f004 fa25 	bl	12a0c <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:759
		pq->q2 = sqrtf(fabs(0.5F * (1.0F + R[Y][Y]) - fq0sq));
    e5c2:	21fe      	movs	r1, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:758
	else
	{
		// special case of near 180 deg corresponds to nearly symmetric matrix
		// which is not numerically well conditioned for division by small q0
		// instead get absolute values of q1 to q3 from leading diagonal
		pq->q1 = sqrtf(fabs(0.5F * (1.0F + R[X][X]) - fq0sq));
    e5c4:	6068      	str	r0, [r5, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:759
		pq->q2 = sqrtf(fabs(0.5F * (1.0F + R[Y][Y]) - fq0sq));
    e5c6:	6920      	ldr	r0, [r4, #16]
    e5c8:	0589      	lsls	r1, r1, #22
    e5ca:	f7f2 f965 	bl	898 <__aeabi_fadd>
    e5ce:	21fc      	movs	r1, #252	; 0xfc
    e5d0:	0589      	lsls	r1, r1, #22
    e5d2:	f7f2 fccf 	bl	f74 <__aeabi_fmul>
    e5d6:	1c39      	adds	r1, r7, #0
    e5d8:	f7f2 fdfe 	bl	11d8 <__aeabi_fsub>
    e5dc:	0040      	lsls	r0, r0, #1
    e5de:	0840      	lsrs	r0, r0, #1
    e5e0:	f004 fa14 	bl	12a0c <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:760
		pq->q3 = sqrtf(fabs(0.5F * (1.0F + R[Z][Z]) - fq0sq));
    e5e4:	21fe      	movs	r1, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:759
	{
		// special case of near 180 deg corresponds to nearly symmetric matrix
		// which is not numerically well conditioned for division by small q0
		// instead get absolute values of q1 to q3 from leading diagonal
		pq->q1 = sqrtf(fabs(0.5F * (1.0F + R[X][X]) - fq0sq));
		pq->q2 = sqrtf(fabs(0.5F * (1.0F + R[Y][Y]) - fq0sq));
    e5e6:	60a8      	str	r0, [r5, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:760
		pq->q3 = sqrtf(fabs(0.5F * (1.0F + R[Z][Z]) - fq0sq));
    e5e8:	6a20      	ldr	r0, [r4, #32]
    e5ea:	0589      	lsls	r1, r1, #22
    e5ec:	f7f2 f954 	bl	898 <__aeabi_fadd>
    e5f0:	21fc      	movs	r1, #252	; 0xfc
    e5f2:	0589      	lsls	r1, r1, #22
    e5f4:	f7f2 fcbe 	bl	f74 <__aeabi_fmul>
    e5f8:	1c39      	adds	r1, r7, #0
    e5fa:	f7f2 fded 	bl	11d8 <__aeabi_fsub>
    e5fe:	0040      	lsls	r0, r0, #1
    e600:	0840      	lsrs	r0, r0, #1
    e602:	f004 fa03 	bl	12a0c <sqrtf>
    e606:	60e8      	str	r0, [r5, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:763

		// correct the signs of q1 to q3 by examining the signs of differenced off-diagonal terms
		if ((R[Y][Z] - R[Z][Y]) < 0.0F) pq->q1 = -pq->q1;
    e608:	69e1      	ldr	r1, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:760
		// special case of near 180 deg corresponds to nearly symmetric matrix
		// which is not numerically well conditioned for division by small q0
		// instead get absolute values of q1 to q3 from leading diagonal
		pq->q1 = sqrtf(fabs(0.5F * (1.0F + R[X][X]) - fq0sq));
		pq->q2 = sqrtf(fabs(0.5F * (1.0F + R[Y][Y]) - fq0sq));
		pq->q3 = sqrtf(fabs(0.5F * (1.0F + R[Z][Z]) - fq0sq));
    e60a:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:763

		// correct the signs of q1 to q3 by examining the signs of differenced off-diagonal terms
		if ((R[Y][Z] - R[Z][Y]) < 0.0F) pq->q1 = -pq->q1;
    e60c:	6960      	ldr	r0, [r4, #20]
    e60e:	f7f2 fde3 	bl	11d8 <__aeabi_fsub>
    e612:	2100      	movs	r1, #0
    e614:	f7f2 f918 	bl	848 <__aeabi_fcmplt>
    e618:	2800      	cmp	r0, #0
    e61a:	d11e      	bne.n	e65a <fQuaternionFromRotationMatrix+0x132>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:764
		if ((R[Z][X] - R[X][Z]) < 0.0F) pq->q2 = -pq->q2;
    e61c:	68a1      	ldr	r1, [r4, #8]
    e61e:	69a0      	ldr	r0, [r4, #24]
    e620:	f7f2 fdda 	bl	11d8 <__aeabi_fsub>
    e624:	2100      	movs	r1, #0
    e626:	f7f2 f90f 	bl	848 <__aeabi_fcmplt>
    e62a:	2800      	cmp	r0, #0
    e62c:	d10e      	bne.n	e64c <fQuaternionFromRotationMatrix+0x124>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:765
		if ((R[X][Y] - R[Y][X]) < 0.0F) pq->q3 = -pq->q3;
    e62e:	68e1      	ldr	r1, [r4, #12]
    e630:	6860      	ldr	r0, [r4, #4]
    e632:	f7f2 fdd1 	bl	11d8 <__aeabi_fsub>
    e636:	2100      	movs	r1, #0
    e638:	f7f2 f906 	bl	848 <__aeabi_fcmplt>
    e63c:	2800      	cmp	r0, #0
    e63e:	d0af      	beq.n	e5a0 <fQuaternionFromRotationMatrix+0x78>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:765 (discriminator 1)
    e640:	2380      	movs	r3, #128	; 0x80
    e642:	061b      	lsls	r3, r3, #24
    e644:	469c      	mov	ip, r3
    e646:	4466      	add	r6, ip
    e648:	60ee      	str	r6, [r5, #12]
    e64a:	e7a9      	b.n	e5a0 <fQuaternionFromRotationMatrix+0x78>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:764 (discriminator 1)
		pq->q2 = sqrtf(fabs(0.5F * (1.0F + R[Y][Y]) - fq0sq));
		pq->q3 = sqrtf(fabs(0.5F * (1.0F + R[Z][Z]) - fq0sq));

		// correct the signs of q1 to q3 by examining the signs of differenced off-diagonal terms
		if ((R[Y][Z] - R[Z][Y]) < 0.0F) pq->q1 = -pq->q1;
		if ((R[Z][X] - R[X][Z]) < 0.0F) pq->q2 = -pq->q2;
    e64c:	2280      	movs	r2, #128	; 0x80
    e64e:	0612      	lsls	r2, r2, #24
    e650:	4694      	mov	ip, r2
    e652:	68ab      	ldr	r3, [r5, #8]
    e654:	4463      	add	r3, ip
    e656:	60ab      	str	r3, [r5, #8]
    e658:	e7e9      	b.n	e62e <fQuaternionFromRotationMatrix+0x106>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:763 (discriminator 1)
		pq->q1 = sqrtf(fabs(0.5F * (1.0F + R[X][X]) - fq0sq));
		pq->q2 = sqrtf(fabs(0.5F * (1.0F + R[Y][Y]) - fq0sq));
		pq->q3 = sqrtf(fabs(0.5F * (1.0F + R[Z][Z]) - fq0sq));

		// correct the signs of q1 to q3 by examining the signs of differenced off-diagonal terms
		if ((R[Y][Z] - R[Z][Y]) < 0.0F) pq->q1 = -pq->q1;
    e65a:	2280      	movs	r2, #128	; 0x80
    e65c:	0612      	lsls	r2, r2, #24
    e65e:	4694      	mov	ip, r2
    e660:	686b      	ldr	r3, [r5, #4]
    e662:	4463      	add	r3, ip
    e664:	606b      	str	r3, [r5, #4]
    e666:	e7d9      	b.n	e61c <fQuaternionFromRotationMatrix+0xf4>
    e668:	3c23d70a 	.word	0x3c23d70a

0000e66c <fRotationMatrixFromQuaternion>:
fRotationMatrixFromQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:773
	return;
}

// compute the rotation matrix from an orientation quaternion
void fRotationMatrixFromQuaternion(float R[][3], const struct fquaternion *pq)
{
    e66c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e66e:	465f      	mov	r7, fp
    e670:	4656      	mov	r6, sl
    e672:	464d      	mov	r5, r9
    e674:	4644      	mov	r4, r8
    e676:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:781
	float f2q1q1, f2q1q2, f2q1q3;
	float f2q2q2, f2q2q3;
	float f2q3q3;

	// calculate products
	f2q = 2.0F * pq->q0;
    e678:	680e      	ldr	r6, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:773
	return;
}

// compute the rotation matrix from an orientation quaternion
void fRotationMatrixFromQuaternion(float R[][3], const struct fquaternion *pq)
{
    e67a:	b087      	sub	sp, #28
    e67c:	1c04      	adds	r4, r0, #0
    e67e:	1c0d      	adds	r5, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:781
	float f2q1q1, f2q1q2, f2q1q3;
	float f2q2q2, f2q2q3;
	float f2q3q3;

	// calculate products
	f2q = 2.0F * pq->q0;
    e680:	1c30      	adds	r0, r6, #0
    e682:	1c31      	adds	r1, r6, #0
    e684:	f7f2 f908 	bl	898 <__aeabi_fadd>
    e688:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:782
	f2q0q0 = f2q * pq->q0;
    e68a:	1c30      	adds	r0, r6, #0
    e68c:	4649      	mov	r1, r9
    e68e:	f7f2 fc71 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:783
	f2q0q1 = f2q * pq->q1;
    e692:	686f      	ldr	r7, [r5, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:782
	float f2q2q2, f2q2q3;
	float f2q3q3;

	// calculate products
	f2q = 2.0F * pq->q0;
	f2q0q0 = f2q * pq->q0;
    e694:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:783
	f2q0q1 = f2q * pq->q1;
    e696:	4649      	mov	r1, r9
    e698:	1c38      	adds	r0, r7, #0
    e69a:	f7f2 fc6b 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:784
	f2q0q2 = f2q * pq->q2;
    e69e:	68ae      	ldr	r6, [r5, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:783
	float f2q3q3;

	// calculate products
	f2q = 2.0F * pq->q0;
	f2q0q0 = f2q * pq->q0;
	f2q0q1 = f2q * pq->q1;
    e6a0:	9001      	str	r0, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:784
	f2q0q2 = f2q * pq->q2;
    e6a2:	4649      	mov	r1, r9
    e6a4:	1c30      	adds	r0, r6, #0
    e6a6:	f7f2 fc65 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:785
	f2q0q3 = f2q * pq->q3;
    e6aa:	68ed      	ldr	r5, [r5, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:784

	// calculate products
	f2q = 2.0F * pq->q0;
	f2q0q0 = f2q * pq->q0;
	f2q0q1 = f2q * pq->q1;
	f2q0q2 = f2q * pq->q2;
    e6ac:	9002      	str	r0, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:785
	f2q0q3 = f2q * pq->q3;
    e6ae:	4649      	mov	r1, r9
    e6b0:	1c28      	adds	r0, r5, #0
    e6b2:	f7f2 fc5f 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:786
	f2q = 2.0F * pq->q1;
    e6b6:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:785
	// calculate products
	f2q = 2.0F * pq->q0;
	f2q0q0 = f2q * pq->q0;
	f2q0q1 = f2q * pq->q1;
	f2q0q2 = f2q * pq->q2;
	f2q0q3 = f2q * pq->q3;
    e6b8:	9003      	str	r0, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:786
	f2q = 2.0F * pq->q1;
    e6ba:	1c38      	adds	r0, r7, #0
    e6bc:	f7f2 f8ec 	bl	898 <__aeabi_fadd>
    e6c0:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:788
	f2q1q1 = f2q * pq->q1;
	f2q1q2 = f2q * pq->q2;
    e6c2:	1c30      	adds	r0, r6, #0
    e6c4:	4649      	mov	r1, r9
    e6c6:	f7f2 fc55 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:789
	f2q1q3 = f2q * pq->q3;
    e6ca:	4649      	mov	r1, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:788
	f2q0q1 = f2q * pq->q1;
	f2q0q2 = f2q * pq->q2;
	f2q0q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q1;
	f2q1q1 = f2q * pq->q1;
	f2q1q2 = f2q * pq->q2;
    e6cc:	4683      	mov	fp, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:789
	f2q1q3 = f2q * pq->q3;
    e6ce:	1c28      	adds	r0, r5, #0
    e6d0:	f7f2 fc50 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:790
	f2q = 2.0F * pq->q2;
    e6d4:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:789
	f2q0q2 = f2q * pq->q2;
	f2q0q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q1;
	f2q1q1 = f2q * pq->q1;
	f2q1q2 = f2q * pq->q2;
	f2q1q3 = f2q * pq->q3;
    e6d6:	9004      	str	r0, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:790
	f2q = 2.0F * pq->q2;
    e6d8:	1c30      	adds	r0, r6, #0
    e6da:	f7f2 f8dd 	bl	898 <__aeabi_fadd>
    e6de:	9005      	str	r0, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:792
	f2q2q2 = f2q * pq->q2;
	f2q2q3 = f2q * pq->q3;
    e6e0:	9905      	ldr	r1, [sp, #20]
    e6e2:	1c28      	adds	r0, r5, #0
    e6e4:	f7f2 fc46 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:787
	f2q0q0 = f2q * pq->q0;
	f2q0q1 = f2q * pq->q1;
	f2q0q2 = f2q * pq->q2;
	f2q0q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q1;
	f2q1q1 = f2q * pq->q1;
    e6e8:	4649      	mov	r1, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:792
	f2q1q2 = f2q * pq->q2;
	f2q1q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q2;
	f2q2q2 = f2q * pq->q2;
	f2q2q3 = f2q * pq->q3;
    e6ea:	4682      	mov	sl, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:787
	f2q0q0 = f2q * pq->q0;
	f2q0q1 = f2q * pq->q1;
	f2q0q2 = f2q * pq->q2;
	f2q0q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q1;
	f2q1q1 = f2q * pq->q1;
    e6ec:	1c38      	adds	r0, r7, #0
    e6ee:	f7f2 fc41 	bl	f74 <__aeabi_fmul>
    e6f2:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:796
	f2q2q2 = f2q * pq->q2;
	f2q2q3 = f2q * pq->q3;
	f2q3q3 = 2.0F * pq->q3 * pq->q3;

	// calculate the rotation matrix assuming the quaternion is normalized
	R[X][X] = f2q0q0 + f2q1q1 - 1.0F;
    e6f4:	4640      	mov	r0, r8
    e6f6:	f7f2 f8cf 	bl	898 <__aeabi_fadd>
    e6fa:	21fe      	movs	r1, #254	; 0xfe
    e6fc:	0589      	lsls	r1, r1, #22
    e6fe:	f7f2 fd6b 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:797
	R[X][Y] = f2q1q2 + f2q0q3;
    e702:	9903      	ldr	r1, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:796
	f2q2q2 = f2q * pq->q2;
	f2q2q3 = f2q * pq->q3;
	f2q3q3 = 2.0F * pq->q3 * pq->q3;

	// calculate the rotation matrix assuming the quaternion is normalized
	R[X][X] = f2q0q0 + f2q1q1 - 1.0F;
    e704:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:797
	R[X][Y] = f2q1q2 + f2q0q3;
    e706:	4658      	mov	r0, fp
    e708:	f7f2 f8c6 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:798
	R[X][Z] = f2q1q3 - f2q0q2;
    e70c:	9902      	ldr	r1, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:797
	f2q2q3 = f2q * pq->q3;
	f2q3q3 = 2.0F * pq->q3 * pq->q3;

	// calculate the rotation matrix assuming the quaternion is normalized
	R[X][X] = f2q0q0 + f2q1q1 - 1.0F;
	R[X][Y] = f2q1q2 + f2q0q3;
    e70e:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:798
	R[X][Z] = f2q1q3 - f2q0q2;
    e710:	9804      	ldr	r0, [sp, #16]
    e712:	f7f2 fd61 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:799
	R[Y][X] = f2q1q2 - f2q0q3;
    e716:	9903      	ldr	r1, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:798
	f2q3q3 = 2.0F * pq->q3 * pq->q3;

	// calculate the rotation matrix assuming the quaternion is normalized
	R[X][X] = f2q0q0 + f2q1q1 - 1.0F;
	R[X][Y] = f2q1q2 + f2q0q3;
	R[X][Z] = f2q1q3 - f2q0q2;
    e718:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:799
	R[Y][X] = f2q1q2 - f2q0q3;
    e71a:	4658      	mov	r0, fp
    e71c:	f7f2 fd5c 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:791
	f2q = 2.0F * pq->q1;
	f2q1q1 = f2q * pq->q1;
	f2q1q2 = f2q * pq->q2;
	f2q1q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q2;
	f2q2q2 = f2q * pq->q2;
    e720:	9905      	ldr	r1, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:799

	// calculate the rotation matrix assuming the quaternion is normalized
	R[X][X] = f2q0q0 + f2q1q1 - 1.0F;
	R[X][Y] = f2q1q2 + f2q0q3;
	R[X][Z] = f2q1q3 - f2q0q2;
	R[Y][X] = f2q1q2 - f2q0q3;
    e722:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:791
	f2q = 2.0F * pq->q1;
	f2q1q1 = f2q * pq->q1;
	f2q1q2 = f2q * pq->q2;
	f2q1q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q2;
	f2q2q2 = f2q * pq->q2;
    e724:	1c30      	adds	r0, r6, #0
    e726:	f7f2 fc25 	bl	f74 <__aeabi_fmul>
    e72a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:800
	// calculate the rotation matrix assuming the quaternion is normalized
	R[X][X] = f2q0q0 + f2q1q1 - 1.0F;
	R[X][Y] = f2q1q2 + f2q0q3;
	R[X][Z] = f2q1q3 - f2q0q2;
	R[Y][X] = f2q1q2 - f2q0q3;
	R[Y][Y] = f2q0q0 + f2q2q2 - 1.0F;
    e72c:	4640      	mov	r0, r8
    e72e:	f7f2 f8b3 	bl	898 <__aeabi_fadd>
    e732:	21fe      	movs	r1, #254	; 0xfe
    e734:	0589      	lsls	r1, r1, #22
    e736:	f7f2 fd4f 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:801
	R[Y][Z] = f2q2q3 + f2q0q1;
    e73a:	9901      	ldr	r1, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:800
	// calculate the rotation matrix assuming the quaternion is normalized
	R[X][X] = f2q0q0 + f2q1q1 - 1.0F;
	R[X][Y] = f2q1q2 + f2q0q3;
	R[X][Z] = f2q1q3 - f2q0q2;
	R[Y][X] = f2q1q2 - f2q0q3;
	R[Y][Y] = f2q0q0 + f2q2q2 - 1.0F;
    e73c:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:801
	R[Y][Z] = f2q2q3 + f2q0q1;
    e73e:	4650      	mov	r0, sl
    e740:	f7f2 f8aa 	bl	898 <__aeabi_fadd>
    e744:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:802
	R[Z][X] = f2q1q3 + f2q0q2;
    e746:	9804      	ldr	r0, [sp, #16]
    e748:	9902      	ldr	r1, [sp, #8]
    e74a:	f7f2 f8a5 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:803
	R[Z][Y] = f2q2q3 - f2q0q1;
    e74e:	9901      	ldr	r1, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:802
	R[X][Y] = f2q1q2 + f2q0q3;
	R[X][Z] = f2q1q3 - f2q0q2;
	R[Y][X] = f2q1q2 - f2q0q3;
	R[Y][Y] = f2q0q0 + f2q2q2 - 1.0F;
	R[Y][Z] = f2q2q3 + f2q0q1;
	R[Z][X] = f2q1q3 + f2q0q2;
    e750:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:803
	R[Z][Y] = f2q2q3 - f2q0q1;
    e752:	4650      	mov	r0, sl
    e754:	f7f2 fd40 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:793
	f2q1q2 = f2q * pq->q2;
	f2q1q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q2;
	f2q2q2 = f2q * pq->q2;
	f2q2q3 = f2q * pq->q3;
	f2q3q3 = 2.0F * pq->q3 * pq->q3;
    e758:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:803
	R[X][Z] = f2q1q3 - f2q0q2;
	R[Y][X] = f2q1q2 - f2q0q3;
	R[Y][Y] = f2q0q0 + f2q2q2 - 1.0F;
	R[Y][Z] = f2q2q3 + f2q0q1;
	R[Z][X] = f2q1q3 + f2q0q2;
	R[Z][Y] = f2q2q3 - f2q0q1;
    e75a:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:793
	f2q1q2 = f2q * pq->q2;
	f2q1q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q2;
	f2q2q2 = f2q * pq->q2;
	f2q2q3 = f2q * pq->q3;
	f2q3q3 = 2.0F * pq->q3 * pq->q3;
    e75c:	1c28      	adds	r0, r5, #0
    e75e:	f7f2 f89b 	bl	898 <__aeabi_fadd>
    e762:	1c01      	adds	r1, r0, #0
    e764:	1c28      	adds	r0, r5, #0
    e766:	f7f2 fc05 	bl	f74 <__aeabi_fmul>
    e76a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:804
	R[Y][X] = f2q1q2 - f2q0q3;
	R[Y][Y] = f2q0q0 + f2q2q2 - 1.0F;
	R[Y][Z] = f2q2q3 + f2q0q1;
	R[Z][X] = f2q1q3 + f2q0q2;
	R[Z][Y] = f2q2q3 - f2q0q1;
	R[Z][Z] = f2q0q0 + f2q3q3 - 1.0F;
    e76c:	4640      	mov	r0, r8
    e76e:	f7f2 f893 	bl	898 <__aeabi_fadd>
    e772:	21fe      	movs	r1, #254	; 0xfe
    e774:	0589      	lsls	r1, r1, #22
    e776:	f7f2 fd2f 	bl	11d8 <__aeabi_fsub>
    e77a:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:807

	return;
}
    e77c:	b007      	add	sp, #28
    e77e:	bc3c      	pop	{r2, r3, r4, r5}
    e780:	4690      	mov	r8, r2
    e782:	4699      	mov	r9, r3
    e784:	46a2      	mov	sl, r4
    e786:	46ab      	mov	fp, r5
    e788:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e78a:	46c0      	nop			; (mov r8, r8)

0000e78c <fRotationVectorDegFromQuaternion>:
fRotationVectorDegFromQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:880
	return;
}

// computes rotation vector (deg) from rotation quaternion
void fRotationVectorDegFromQuaternion(struct fquaternion *pq, float rvecdeg[])
{
    e78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e78e:	1c0c      	adds	r4, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:887
	float fetadeg;			// rotation angle (deg)
	float sinhalfeta;		// sin(eta/2)
	float ftmp;				// scratch variable

	// calculate the rotation angle in the range 0 <= eta < 360 deg
	if ((pq->q0 >= 1.0F) || (pq->q0 <= -1.0F))
    e790:	21fe      	movs	r1, #254	; 0xfe
    e792:	6806      	ldr	r6, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:880
	return;
}

// computes rotation vector (deg) from rotation quaternion
void fRotationVectorDegFromQuaternion(struct fquaternion *pq, float rvecdeg[])
{
    e794:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:887
	float fetadeg;			// rotation angle (deg)
	float sinhalfeta;		// sin(eta/2)
	float ftmp;				// scratch variable

	// calculate the rotation angle in the range 0 <= eta < 360 deg
	if ((pq->q0 >= 1.0F) || (pq->q0 <= -1.0F))
    e796:	0589      	lsls	r1, r1, #22
    e798:	1c30      	adds	r0, r6, #0
    e79a:	f7f2 f873 	bl	884 <__aeabi_fcmpge>
    e79e:	2800      	cmp	r0, #0
    e7a0:	d004      	beq.n	e7ac <fRotationVectorDegFromQuaternion+0x20>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:914

	// calculate the rotation vector (deg)
	if (sinhalfeta == 0.0F)
	{
		// the rotation angle eta is zero and the axis is irrelevant 
		rvecdeg[X] = rvecdeg[Y] = rvecdeg[Z] = 0.0F;
    e7a2:	2300      	movs	r3, #0
    e7a4:	60a3      	str	r3, [r4, #8]
    e7a6:	6063      	str	r3, [r4, #4]
    e7a8:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:926
		rvecdeg[Y] = pq->q2 * ftmp;
		rvecdeg[Z] = pq->q3 * ftmp;
	}

	return;
}
    e7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:887 (discriminator 1)
	float fetadeg;			// rotation angle (deg)
	float sinhalfeta;		// sin(eta/2)
	float ftmp;				// scratch variable

	// calculate the rotation angle in the range 0 <= eta < 360 deg
	if ((pq->q0 >= 1.0F) || (pq->q0 <= -1.0F))
    e7ac:	1c30      	adds	r0, r6, #0
    e7ae:	4920      	ldr	r1, [pc, #128]	; (e830 <fRotationVectorDegFromQuaternion+0xa4>)
    e7b0:	f7f2 f854 	bl	85c <__aeabi_fcmple>
    e7b4:	2800      	cmp	r0, #0
    e7b6:	d1f4      	bne.n	e7a2 <fRotationVectorDegFromQuaternion+0x16>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:896
		fetadeg = 0.0F;
	}
	else
	{
		// general case returning 0 < eta < 360 deg 
		fetarad = 2.0F * acosf(pq->q0); 
    e7b8:	1c30      	adds	r0, r6, #0
    e7ba:	f003 ff2d 	bl	12618 <acosf>
    e7be:	1c01      	adds	r1, r0, #0
    e7c0:	f7f2 f86a 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:897
		fetadeg = fetarad * FRADTODEG;
    e7c4:	491b      	ldr	r1, [pc, #108]	; (e834 <fRotationVectorDegFromQuaternion+0xa8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:896
		fetadeg = 0.0F;
	}
	else
	{
		// general case returning 0 < eta < 360 deg 
		fetarad = 2.0F * acosf(pq->q0); 
    e7c6:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:897
		fetadeg = fetarad * FRADTODEG;
    e7c8:	f7f2 fbd4 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:901
	}

	// map the rotation angle onto the range -180 deg <= eta < 180 deg 
	if (fetadeg >= 180.0F)
    e7cc:	491a      	ldr	r1, [pc, #104]	; (e838 <fRotationVectorDegFromQuaternion+0xac>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:897
	}
	else
	{
		// general case returning 0 < eta < 360 deg 
		fetarad = 2.0F * acosf(pq->q0); 
		fetadeg = fetarad * FRADTODEG;
    e7ce:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:901
	}

	// map the rotation angle onto the range -180 deg <= eta < 180 deg 
	if (fetadeg >= 180.0F)
    e7d0:	f7f2 f858 	bl	884 <__aeabi_fcmpge>
    e7d4:	2800      	cmp	r0, #0
    e7d6:	d028      	beq.n	e82a <fRotationVectorDegFromQuaternion+0x9e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:903
	{
		fetadeg -= 360.0F;
    e7d8:	1c30      	adds	r0, r6, #0
    e7da:	4918      	ldr	r1, [pc, #96]	; (e83c <fRotationVectorDegFromQuaternion+0xb0>)
    e7dc:	f7f2 fcfc 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:904
		fetarad = fetadeg * FDEGTORAD;
    e7e0:	4917      	ldr	r1, [pc, #92]	; (e840 <fRotationVectorDegFromQuaternion+0xb4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:903
	}

	// map the rotation angle onto the range -180 deg <= eta < 180 deg 
	if (fetadeg >= 180.0F)
	{
		fetadeg -= 360.0F;
    e7e2:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:904
		fetarad = fetadeg * FDEGTORAD;
    e7e4:	f7f2 fbc6 	bl	f74 <__aeabi_fmul>
    e7e8:	21fc      	movs	r1, #252	; 0xfc
    e7ea:	0589      	lsls	r1, r1, #22
    e7ec:	f7f2 fbc2 	bl	f74 <__aeabi_fmul>
    e7f0:	f003 fed0 	bl	12594 <sinf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:911

	// calculate sin(eta/2) which will be in the range -1 to +1
	sinhalfeta = (float)sinf(0.5F * fetarad);

	// calculate the rotation vector (deg)
	if (sinhalfeta == 0.0F)
    e7f4:	2100      	movs	r1, #0
    e7f6:	1c07      	adds	r7, r0, #0
    e7f8:	f7f2 f820 	bl	83c <__aeabi_fcmpeq>
    e7fc:	2800      	cmp	r0, #0
    e7fe:	d1d0      	bne.n	e7a2 <fRotationVectorDegFromQuaternion+0x16>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:919
		rvecdeg[X] = rvecdeg[Y] = rvecdeg[Z] = 0.0F;
	}
	else
	{
		// general case with non-zero rotation angle
		ftmp = fetadeg / sinhalfeta;
    e800:	1c30      	adds	r0, r6, #0
    e802:	1c39      	adds	r1, r7, #0
    e804:	f7f2 f9c4 	bl	b90 <__aeabi_fdiv>
    e808:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:920
		rvecdeg[X] = pq->q1 * ftmp;
    e80a:	1c31      	adds	r1, r6, #0
    e80c:	6868      	ldr	r0, [r5, #4]
    e80e:	f7f2 fbb1 	bl	f74 <__aeabi_fmul>
    e812:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:921
		rvecdeg[Y] = pq->q2 * ftmp;
    e814:	68a8      	ldr	r0, [r5, #8]
    e816:	1c31      	adds	r1, r6, #0
    e818:	f7f2 fbac 	bl	f74 <__aeabi_fmul>
    e81c:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:922
		rvecdeg[Z] = pq->q3 * ftmp;
    e81e:	68e8      	ldr	r0, [r5, #12]
    e820:	1c31      	adds	r1, r6, #0
    e822:	f7f2 fba7 	bl	f74 <__aeabi_fmul>
    e826:	60a0      	str	r0, [r4, #8]
    e828:	e7bf      	b.n	e7aa <fRotationVectorDegFromQuaternion+0x1e>
    e82a:	1c38      	adds	r0, r7, #0
    e82c:	e7dc      	b.n	e7e8 <fRotationVectorDegFromQuaternion+0x5c>
    e82e:	46c0      	nop			; (mov r8, r8)
    e830:	bf800000 	.word	0xbf800000
    e834:	42652ee1 	.word	0x42652ee1
    e838:	43340000 	.word	0x43340000
    e83c:	43b40000 	.word	0x43b40000
    e840:	3c8efa35 	.word	0x3c8efa35

0000e844 <fLPFOrientationQuaternion>:
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:931
}

// function low pass filters an orientation quaternion and computes virtual gyro rotation rate
void fLPFOrientationQuaternion(struct fquaternion *pq, struct fquaternion *pLPq, float flpf, float fdeltat,
		float fOmega[], int32 loopcounter)
{
    e844:	b5f0      	push	{r4, r5, r6, r7, lr}
    e846:	4656      	mov	r6, sl
    e848:	465f      	mov	r7, fp
    e84a:	464d      	mov	r5, r9
    e84c:	4644      	mov	r4, r8
    e84e:	b4f0      	push	{r4, r5, r6, r7}
    e850:	b087      	sub	sp, #28
    e852:	9305      	str	r3, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:938
	struct fquaternion fdeltaq;			// delta rotation quaternion
	float rvecdeg[3];					// rotation vector (deg)
	float ftmp;							// scratch variable

	// initialize delay line on first pass: LPq[n]=q[n]
	if (loopcounter == 0)
    e854:	9b11      	ldr	r3, [sp, #68]	; 0x44
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:931
}

// function low pass filters an orientation quaternion and computes virtual gyro rotation rate
void fLPFOrientationQuaternion(struct fquaternion *pq, struct fquaternion *pLPq, float flpf, float fdeltat,
		float fOmega[], int32 loopcounter)
{
    e856:	468a      	mov	sl, r1
    e858:	9204      	str	r2, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:938
	struct fquaternion fdeltaq;			// delta rotation quaternion
	float rvecdeg[3];					// rotation vector (deg)
	float ftmp;							// scratch variable

	// initialize delay line on first pass: LPq[n]=q[n]
	if (loopcounter == 0)
    e85a:	2b00      	cmp	r3, #0
    e85c:	d105      	bne.n	e86a <fLPFOrientationQuaternion+0x26>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:940
	{
		*pLPq = *pq;
    e85e:	1c0b      	adds	r3, r1, #0
    e860:	1c02      	adds	r2, r0, #0
    e862:	ca32      	ldmia	r2!, {r1, r4, r5}
    e864:	c332      	stmia	r3!, {r1, r4, r5}
    e866:	6812      	ldr	r2, [r2, #0]
    e868:	601a      	str	r2, [r3, #0]
qconjgAxB():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1044
// function compute the quaternion product conjg(qA) * qB
struct fquaternion qconjgAxB(const struct fquaternion *pqA, const struct fquaternion *pqB)
{
	struct fquaternion qProd;

	qProd.q0 = pqA->q0 * pqB->q0 + pqA->q1 * pqB->q1 + pqA->q2 * pqB->q2 + pqA->q3 * pqB->q3;
    e86a:	4653      	mov	r3, sl
    e86c:	681b      	ldr	r3, [r3, #0]
    e86e:	4651      	mov	r1, sl
    e870:	4698      	mov	r8, r3
    e872:	4652      	mov	r2, sl
    e874:	4653      	mov	r3, sl
    e876:	6804      	ldr	r4, [r0, #0]
    e878:	68c9      	ldr	r1, [r1, #12]
    e87a:	6892      	ldr	r2, [r2, #8]
    e87c:	685e      	ldr	r6, [r3, #4]
    e87e:	6843      	ldr	r3, [r0, #4]
    e880:	6885      	ldr	r5, [r0, #8]
    e882:	68c7      	ldr	r7, [r0, #12]
    e884:	468b      	mov	fp, r1
    e886:	4640      	mov	r0, r8
    e888:	1c21      	adds	r1, r4, #0
    e88a:	9300      	str	r3, [sp, #0]
    e88c:	9201      	str	r2, [sp, #4]
    e88e:	f7f2 fb71 	bl	f74 <__aeabi_fmul>
    e892:	9900      	ldr	r1, [sp, #0]
    e894:	4681      	mov	r9, r0
    e896:	1c30      	adds	r0, r6, #0
    e898:	f7f2 fb6c 	bl	f74 <__aeabi_fmul>
    e89c:	1c01      	adds	r1, r0, #0
    e89e:	4648      	mov	r0, r9
    e8a0:	f7f1 fffa 	bl	898 <__aeabi_fadd>
    e8a4:	1c29      	adds	r1, r5, #0
    e8a6:	4681      	mov	r9, r0
    e8a8:	9801      	ldr	r0, [sp, #4]
    e8aa:	f7f2 fb63 	bl	f74 <__aeabi_fmul>
    e8ae:	1c01      	adds	r1, r0, #0
    e8b0:	4648      	mov	r0, r9
    e8b2:	f7f1 fff1 	bl	898 <__aeabi_fadd>
    e8b6:	1c39      	adds	r1, r7, #0
    e8b8:	4681      	mov	r9, r0
    e8ba:	4658      	mov	r0, fp
    e8bc:	f7f2 fb5a 	bl	f74 <__aeabi_fmul>
    e8c0:	1c01      	adds	r1, r0, #0
    e8c2:	4648      	mov	r0, r9
    e8c4:	f7f1 ffe8 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1045
	qProd.q1 = pqA->q0 * pqB->q1 - pqA->q1 * pqB->q0 - pqA->q2 * pqB->q3 + pqA->q3 * pqB->q2;
    e8c8:	9900      	ldr	r1, [sp, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1044
// function compute the quaternion product conjg(qA) * qB
struct fquaternion qconjgAxB(const struct fquaternion *pqA, const struct fquaternion *pqB)
{
	struct fquaternion qProd;

	qProd.q0 = pqA->q0 * pqB->q0 + pqA->q1 * pqB->q1 + pqA->q2 * pqB->q2 + pqA->q3 * pqB->q3;
    e8ca:	9002      	str	r0, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1045
	qProd.q1 = pqA->q0 * pqB->q1 - pqA->q1 * pqB->q0 - pqA->q2 * pqB->q3 + pqA->q3 * pqB->q2;
    e8cc:	4640      	mov	r0, r8
    e8ce:	f7f2 fb51 	bl	f74 <__aeabi_fmul>
    e8d2:	1c31      	adds	r1, r6, #0
    e8d4:	4681      	mov	r9, r0
    e8d6:	1c20      	adds	r0, r4, #0
    e8d8:	f7f2 fb4c 	bl	f74 <__aeabi_fmul>
    e8dc:	1c01      	adds	r1, r0, #0
    e8de:	4648      	mov	r0, r9
    e8e0:	f7f2 fc7a 	bl	11d8 <__aeabi_fsub>
    e8e4:	1c39      	adds	r1, r7, #0
    e8e6:	4681      	mov	r9, r0
    e8e8:	9801      	ldr	r0, [sp, #4]
    e8ea:	f7f2 fb43 	bl	f74 <__aeabi_fmul>
    e8ee:	1c01      	adds	r1, r0, #0
    e8f0:	4648      	mov	r0, r9
    e8f2:	f7f2 fc71 	bl	11d8 <__aeabi_fsub>
    e8f6:	4659      	mov	r1, fp
    e8f8:	4681      	mov	r9, r0
    e8fa:	1c28      	adds	r0, r5, #0
    e8fc:	f7f2 fb3a 	bl	f74 <__aeabi_fmul>
    e900:	1c01      	adds	r1, r0, #0
    e902:	4648      	mov	r0, r9
    e904:	f7f1 ffc8 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1046
	qProd.q2 = pqA->q0 * pqB->q2 + pqA->q1 * pqB->q3 - pqA->q2 * pqB->q0 - pqA->q3 * pqB->q1;
    e908:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1045
struct fquaternion qconjgAxB(const struct fquaternion *pqA, const struct fquaternion *pqB)
{
	struct fquaternion qProd;

	qProd.q0 = pqA->q0 * pqB->q0 + pqA->q1 * pqB->q1 + pqA->q2 * pqB->q2 + pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 - pqA->q1 * pqB->q0 - pqA->q2 * pqB->q3 + pqA->q3 * pqB->q2;
    e90a:	9003      	str	r0, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1046
	qProd.q2 = pqA->q0 * pqB->q2 + pqA->q1 * pqB->q3 - pqA->q2 * pqB->q0 - pqA->q3 * pqB->q1;
    e90c:	4640      	mov	r0, r8
    e90e:	f7f2 fb31 	bl	f74 <__aeabi_fmul>
    e912:	1c39      	adds	r1, r7, #0
    e914:	4681      	mov	r9, r0
    e916:	1c30      	adds	r0, r6, #0
    e918:	f7f2 fb2c 	bl	f74 <__aeabi_fmul>
    e91c:	1c01      	adds	r1, r0, #0
    e91e:	4648      	mov	r0, r9
    e920:	f7f1 ffba 	bl	898 <__aeabi_fadd>
    e924:	9901      	ldr	r1, [sp, #4]
    e926:	4681      	mov	r9, r0
    e928:	1c20      	adds	r0, r4, #0
    e92a:	f7f2 fb23 	bl	f74 <__aeabi_fmul>
    e92e:	1c01      	adds	r1, r0, #0
    e930:	4648      	mov	r0, r9
    e932:	f7f2 fc51 	bl	11d8 <__aeabi_fsub>
    e936:	4659      	mov	r1, fp
    e938:	4681      	mov	r9, r0
    e93a:	9800      	ldr	r0, [sp, #0]
    e93c:	f7f2 fb1a 	bl	f74 <__aeabi_fmul>
    e940:	1c01      	adds	r1, r0, #0
    e942:	4648      	mov	r0, r9
    e944:	f7f2 fc48 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1047
	qProd.q3 = pqA->q0 * pqB->q3 - pqA->q1 * pqB->q2 + pqA->q2 * pqB->q1 - pqA->q3 * pqB->q0;
    e948:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1046
{
	struct fquaternion qProd;

	qProd.q0 = pqA->q0 * pqB->q0 + pqA->q1 * pqB->q1 + pqA->q2 * pqB->q2 + pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 - pqA->q1 * pqB->q0 - pqA->q2 * pqB->q3 + pqA->q3 * pqB->q2;
	qProd.q2 = pqA->q0 * pqB->q2 + pqA->q1 * pqB->q3 - pqA->q2 * pqB->q0 - pqA->q3 * pqB->q1;
    e94a:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1047
	qProd.q3 = pqA->q0 * pqB->q3 - pqA->q1 * pqB->q2 + pqA->q2 * pqB->q1 - pqA->q3 * pqB->q0;
    e94c:	4640      	mov	r0, r8
    e94e:	f7f2 fb11 	bl	f74 <__aeabi_fmul>
    e952:	1c29      	adds	r1, r5, #0
    e954:	1c07      	adds	r7, r0, #0
    e956:	1c30      	adds	r0, r6, #0
    e958:	f7f2 fb0c 	bl	f74 <__aeabi_fmul>
    e95c:	1c01      	adds	r1, r0, #0
    e95e:	1c38      	adds	r0, r7, #0
    e960:	f7f2 fc3a 	bl	11d8 <__aeabi_fsub>
    e964:	9901      	ldr	r1, [sp, #4]
    e966:	1c05      	adds	r5, r0, #0
    e968:	9800      	ldr	r0, [sp, #0]
    e96a:	f7f2 fb03 	bl	f74 <__aeabi_fmul>
    e96e:	1c01      	adds	r1, r0, #0
    e970:	1c28      	adds	r0, r5, #0
    e972:	f7f1 ff91 	bl	898 <__aeabi_fadd>
    e976:	4659      	mov	r1, fp
    e978:	1c05      	adds	r5, r0, #0
    e97a:	1c20      	adds	r0, r4, #0
    e97c:	f7f2 fafa 	bl	f74 <__aeabi_fmul>
    e980:	1c01      	adds	r1, r0, #0
    e982:	1c28      	adds	r0, r5, #0
    e984:	f7f2 fc28 	bl	11d8 <__aeabi_fsub>
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:945
		*pLPq = *pq;
	}

	// set fdeltaqn to the delta rotation quaternion conjg(fLPq[n-1) . fqn
	fdeltaq = qconjgAxB(pLPq, pq);
	if (fdeltaq.q0 < 0.0F)
    e988:	2100      	movs	r1, #0
qconjgAxB():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1047
	struct fquaternion qProd;

	qProd.q0 = pqA->q0 * pqB->q0 + pqA->q1 * pqB->q1 + pqA->q2 * pqB->q2 + pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 - pqA->q1 * pqB->q0 - pqA->q2 * pqB->q3 + pqA->q3 * pqB->q2;
	qProd.q2 = pqA->q0 * pqB->q2 + pqA->q1 * pqB->q3 - pqA->q2 * pqB->q0 - pqA->q3 * pqB->q1;
	qProd.q3 = pqA->q0 * pqB->q3 - pqA->q1 * pqB->q2 + pqA->q2 * pqB->q1 - pqA->q3 * pqB->q0;
    e98a:	1c06      	adds	r6, r0, #0
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:945
		*pLPq = *pq;
	}

	// set fdeltaqn to the delta rotation quaternion conjg(fLPq[n-1) . fqn
	fdeltaq = qconjgAxB(pLPq, pq);
	if (fdeltaq.q0 < 0.0F)
    e98c:	9802      	ldr	r0, [sp, #8]
    e98e:	f7f1 ff5b 	bl	848 <__aeabi_fcmplt>
    e992:	2800      	cmp	r0, #0
    e994:	d000      	beq.n	e998 <fLPFOrientationQuaternion+0x154>
    e996:	e19e      	b.n	ecd6 <fLPFOrientationQuaternion+0x492>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:955
		fdeltaq.q3 = -fdeltaq.q3;
	}

	// set ftmp to a scaled lpf value which equals flpf in the limit of small rotations (q0=1)
	// but which rises as the delta rotation angle increases (q0 tends to zero)
	ftmp = flpf + 0.75F * (1.0F - fdeltaq.q0);
    e998:	20fe      	movs	r0, #254	; 0xfe
    e99a:	9902      	ldr	r1, [sp, #8]
    e99c:	0580      	lsls	r0, r0, #22
    e99e:	f7f2 fc1b 	bl	11d8 <__aeabi_fsub>
    e9a2:	21fd      	movs	r1, #253	; 0xfd
    e9a4:	0589      	lsls	r1, r1, #22
    e9a6:	f7f2 fae5 	bl	f74 <__aeabi_fmul>
    e9aa:	9904      	ldr	r1, [sp, #16]
    e9ac:	f7f1 ff74 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:956
	if (ftmp > 1.0F)
    e9b0:	21fe      	movs	r1, #254	; 0xfe
    e9b2:	0589      	lsls	r1, r1, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:955
		fdeltaq.q3 = -fdeltaq.q3;
	}

	// set ftmp to a scaled lpf value which equals flpf in the limit of small rotations (q0=1)
	// but which rises as the delta rotation angle increases (q0 tends to zero)
	ftmp = flpf + 0.75F * (1.0F - fdeltaq.q0);
    e9b4:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:956
	if (ftmp > 1.0F)
    e9b6:	f7f1 ff5b 	bl	870 <__aeabi_fcmpgt>
    e9ba:	2800      	cmp	r0, #0
    e9bc:	d001      	beq.n	e9c2 <fLPFOrientationQuaternion+0x17e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:958
	{
		ftmp = 1.0F;
    e9be:	27fe      	movs	r7, #254	; 0xfe
    e9c0:	05bf      	lsls	r7, r7, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:962
	}

	// scale the delta rotation by the corrected lpf value
	fdeltaq.q1 *= ftmp;
    e9c2:	1c38      	adds	r0, r7, #0
    e9c4:	9903      	ldr	r1, [sp, #12]
    e9c6:	f7f2 fad5 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:963
	fdeltaq.q2 *= ftmp;
    e9ca:	4649      	mov	r1, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:962
	{
		ftmp = 1.0F;
	}

	// scale the delta rotation by the corrected lpf value
	fdeltaq.q1 *= ftmp;
    e9cc:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:963
	fdeltaq.q2 *= ftmp;
    e9ce:	1c38      	adds	r0, r7, #0
    e9d0:	f7f2 fad0 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:964
	fdeltaq.q3 *= ftmp;
    e9d4:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:963
		ftmp = 1.0F;
	}

	// scale the delta rotation by the corrected lpf value
	fdeltaq.q1 *= ftmp;
	fdeltaq.q2 *= ftmp;
    e9d6:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:964
	fdeltaq.q3 *= ftmp;
    e9d8:	1c38      	adds	r0, r7, #0
    e9da:	f7f2 facb 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:967

	// compute the scalar component q0
	ftmp = fdeltaq.q1 * fdeltaq.q1 + fdeltaq.q2 * fdeltaq.q2 + fdeltaq.q3 * fdeltaq.q3;
    e9de:	1c21      	adds	r1, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:964
	}

	// scale the delta rotation by the corrected lpf value
	fdeltaq.q1 *= ftmp;
	fdeltaq.q2 *= ftmp;
	fdeltaq.q3 *= ftmp;
    e9e0:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:967

	// compute the scalar component q0
	ftmp = fdeltaq.q1 * fdeltaq.q1 + fdeltaq.q2 * fdeltaq.q2 + fdeltaq.q3 * fdeltaq.q3;
    e9e2:	1c20      	adds	r0, r4, #0
    e9e4:	f7f2 fac6 	bl	f74 <__aeabi_fmul>
    e9e8:	1c29      	adds	r1, r5, #0
    e9ea:	1c07      	adds	r7, r0, #0
    e9ec:	1c28      	adds	r0, r5, #0
    e9ee:	f7f2 fac1 	bl	f74 <__aeabi_fmul>
    e9f2:	1c01      	adds	r1, r0, #0
    e9f4:	1c38      	adds	r0, r7, #0
    e9f6:	f7f1 ff4f 	bl	898 <__aeabi_fadd>
    e9fa:	1c31      	adds	r1, r6, #0
    e9fc:	1c07      	adds	r7, r0, #0
    e9fe:	1c30      	adds	r0, r6, #0
    ea00:	f7f2 fab8 	bl	f74 <__aeabi_fmul>
    ea04:	1c01      	adds	r1, r0, #0
    ea06:	1c38      	adds	r0, r7, #0
    ea08:	f7f1 ff46 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:968
	if (ftmp <= 1.0F)
    ea0c:	21fe      	movs	r1, #254	; 0xfe
    ea0e:	0589      	lsls	r1, r1, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:967
	fdeltaq.q1 *= ftmp;
	fdeltaq.q2 *= ftmp;
	fdeltaq.q3 *= ftmp;

	// compute the scalar component q0
	ftmp = fdeltaq.q1 * fdeltaq.q1 + fdeltaq.q2 * fdeltaq.q2 + fdeltaq.q3 * fdeltaq.q3;
    ea10:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:968
	if (ftmp <= 1.0F)
    ea12:	f7f1 ff23 	bl	85c <__aeabi_fcmple>
    ea16:	2800      	cmp	r0, #0
    ea18:	d000      	beq.n	ea1c <fLPFOrientationQuaternion+0x1d8>
    ea1a:	e149      	b.n	ecb0 <fLPFOrientationQuaternion+0x46c>
fRotationVectorDegFromQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:897
	}
	else
	{
		// general case returning 0 < eta < 360 deg 
		fetarad = 2.0F * acosf(pq->q0); 
		fetadeg = fetarad * FRADTODEG;
    ea1c:	48c1      	ldr	r0, [pc, #772]	; (ed24 <fLPFOrientationQuaternion+0x4e0>)
    ea1e:	49c2      	ldr	r1, [pc, #776]	; (ed28 <fLPFOrientationQuaternion+0x4e4>)
    ea20:	f7f2 faa8 	bl	f74 <__aeabi_fmul>
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:976
		fdeltaq.q0 = sqrtf(1.0F - ftmp);
	}
	else
	{
		// rounding errors present so simply set scalar component to 0
		fdeltaq.q0 = 0.0F;
    ea24:	2700      	movs	r7, #0
fRotationVectorDegFromQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:897
	}
	else
	{
		// general case returning 0 < eta < 360 deg 
		fetarad = 2.0F * acosf(pq->q0); 
		fetadeg = fetarad * FRADTODEG;
    ea26:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:903
	}

	// map the rotation angle onto the range -180 deg <= eta < 180 deg 
	if (fetadeg >= 180.0F)
	{
		fetadeg -= 360.0F;
    ea28:	4640      	mov	r0, r8
    ea2a:	49c0      	ldr	r1, [pc, #768]	; (ed2c <fLPFOrientationQuaternion+0x4e8>)
    ea2c:	f7f2 fbd4 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:904
		fetarad = fetadeg * FDEGTORAD;
    ea30:	49bf      	ldr	r1, [pc, #764]	; (ed30 <fLPFOrientationQuaternion+0x4ec>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:903
	}

	// map the rotation angle onto the range -180 deg <= eta < 180 deg 
	if (fetadeg >= 180.0F)
	{
		fetadeg -= 360.0F;
    ea32:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:904
		fetarad = fetadeg * FDEGTORAD;
    ea34:	f7f2 fa9e 	bl	f74 <__aeabi_fmul>
    ea38:	21fc      	movs	r1, #252	; 0xfc
    ea3a:	0589      	lsls	r1, r1, #22
    ea3c:	f7f2 fa9a 	bl	f74 <__aeabi_fmul>
    ea40:	f003 fda8 	bl	12594 <sinf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:911

	// calculate sin(eta/2) which will be in the range -1 to +1
	sinhalfeta = (float)sinf(0.5F * fetarad);

	// calculate the rotation vector (deg)
	if (sinhalfeta == 0.0F)
    ea44:	2100      	movs	r1, #0
    ea46:	4681      	mov	r9, r0
    ea48:	f7f1 fef8 	bl	83c <__aeabi_fcmpeq>
    ea4c:	2800      	cmp	r0, #0
    ea4e:	d000      	beq.n	ea52 <fLPFOrientationQuaternion+0x20e>
    ea50:	e13c      	b.n	eccc <fLPFOrientationQuaternion+0x488>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:919
		rvecdeg[X] = rvecdeg[Y] = rvecdeg[Z] = 0.0F;
	}
	else
	{
		// general case with non-zero rotation angle
		ftmp = fetadeg / sinhalfeta;
    ea52:	4649      	mov	r1, r9
    ea54:	4640      	mov	r0, r8
    ea56:	f7f2 f89b 	bl	b90 <__aeabi_fdiv>
    ea5a:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:920
		rvecdeg[X] = pq->q1 * ftmp;
    ea5c:	1c20      	adds	r0, r4, #0
    ea5e:	4641      	mov	r1, r8
    ea60:	f7f2 fa88 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:921
		rvecdeg[Y] = pq->q2 * ftmp;
    ea64:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:920
	}
	else
	{
		// general case with non-zero rotation angle
		ftmp = fetadeg / sinhalfeta;
		rvecdeg[X] = pq->q1 * ftmp;
    ea66:	4683      	mov	fp, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:921
		rvecdeg[Y] = pq->q2 * ftmp;
    ea68:	1c28      	adds	r0, r5, #0
    ea6a:	f7f2 fa83 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:922
		rvecdeg[Z] = pq->q3 * ftmp;
    ea6e:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:921
	else
	{
		// general case with non-zero rotation angle
		ftmp = fetadeg / sinhalfeta;
		rvecdeg[X] = pq->q1 * ftmp;
		rvecdeg[Y] = pq->q2 * ftmp;
    ea70:	9000      	str	r0, [sp, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:922
		rvecdeg[Z] = pq->q3 * ftmp;
    ea72:	1c30      	adds	r0, r6, #0
    ea74:	f7f2 fa7e 	bl	f74 <__aeabi_fmul>
    ea78:	4681      	mov	r9, r0
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:981
		fdeltaq.q0 = 0.0F;
	}

	// calculate the delta rotation vector from fdeltaqn and the virtual gyro angular velocity (deg/s)
	fRotationVectorDegFromQuaternion(&fdeltaq, rvecdeg);
	ftmp = 1.0F / fdeltat;
    ea7a:	20fe      	movs	r0, #254	; 0xfe
    ea7c:	9905      	ldr	r1, [sp, #20]
    ea7e:	0580      	lsls	r0, r0, #22
    ea80:	f7f2 f886 	bl	b90 <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:982
	fOmega[X] = rvecdeg[X] * ftmp;
    ea84:	4659      	mov	r1, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:981
		fdeltaq.q0 = 0.0F;
	}

	// calculate the delta rotation vector from fdeltaqn and the virtual gyro angular velocity (deg/s)
	fRotationVectorDegFromQuaternion(&fdeltaq, rvecdeg);
	ftmp = 1.0F / fdeltat;
    ea86:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:982
	fOmega[X] = rvecdeg[X] * ftmp;
    ea88:	f7f2 fa74 	bl	f74 <__aeabi_fmul>
    ea8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:983
	fOmega[Y] = rvecdeg[Y] * ftmp;
    ea8e:	9900      	ldr	r1, [sp, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:982
	}

	// calculate the delta rotation vector from fdeltaqn and the virtual gyro angular velocity (deg/s)
	fRotationVectorDegFromQuaternion(&fdeltaq, rvecdeg);
	ftmp = 1.0F / fdeltat;
	fOmega[X] = rvecdeg[X] * ftmp;
    ea90:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:983
	fOmega[Y] = rvecdeg[Y] * ftmp;
    ea92:	4640      	mov	r0, r8
    ea94:	f7f2 fa6e 	bl	f74 <__aeabi_fmul>
    ea98:	9b10      	ldr	r3, [sp, #64]	; 0x40
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:984
	fOmega[Z] = rvecdeg[Z] * ftmp;
    ea9a:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:983

	// calculate the delta rotation vector from fdeltaqn and the virtual gyro angular velocity (deg/s)
	fRotationVectorDegFromQuaternion(&fdeltaq, rvecdeg);
	ftmp = 1.0F / fdeltat;
	fOmega[X] = rvecdeg[X] * ftmp;
	fOmega[Y] = rvecdeg[Y] * ftmp;
    ea9c:	6058      	str	r0, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:984
	fOmega[Z] = rvecdeg[Z] * ftmp;
    ea9e:	4648      	mov	r0, r9
    eaa0:	f7f2 fa68 	bl	f74 <__aeabi_fmul>
qAeqAxB():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1028
void qAeqAxB(struct fquaternion *pqA, const struct fquaternion *pqB)
{
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
    eaa4:	4652      	mov	r2, sl
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:984
	// calculate the delta rotation vector from fdeltaqn and the virtual gyro angular velocity (deg/s)
	fRotationVectorDegFromQuaternion(&fdeltaq, rvecdeg);
	ftmp = 1.0F / fdeltat;
	fOmega[X] = rvecdeg[X] * ftmp;
	fOmega[Y] = rvecdeg[Y] * ftmp;
	fOmega[Z] = rvecdeg[Z] * ftmp;
    eaa6:	9b10      	ldr	r3, [sp, #64]	; 0x40
qAeqAxB():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1028
void qAeqAxB(struct fquaternion *pqA, const struct fquaternion *pqB)
{
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
    eaa8:	1c39      	adds	r1, r7, #0
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:984
	// calculate the delta rotation vector from fdeltaqn and the virtual gyro angular velocity (deg/s)
	fRotationVectorDegFromQuaternion(&fdeltaq, rvecdeg);
	ftmp = 1.0F / fdeltat;
	fOmega[X] = rvecdeg[X] * ftmp;
	fOmega[Y] = rvecdeg[Y] * ftmp;
	fOmega[Z] = rvecdeg[Z] * ftmp;
    eaaa:	6098      	str	r0, [r3, #8]
qAeqAxB():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1028
void qAeqAxB(struct fquaternion *pqA, const struct fquaternion *pqB)
{
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
    eaac:	6852      	ldr	r2, [r2, #4]
    eaae:	4653      	mov	r3, sl
    eab0:	4691      	mov	r9, r2
    eab2:	4652      	mov	r2, sl
    eab4:	6892      	ldr	r2, [r2, #8]
    eab6:	681b      	ldr	r3, [r3, #0]
    eab8:	4690      	mov	r8, r2
    eaba:	4652      	mov	r2, sl
    eabc:	68d2      	ldr	r2, [r2, #12]
    eabe:	1c18      	adds	r0, r3, #0
    eac0:	9200      	str	r2, [sp, #0]
    eac2:	9301      	str	r3, [sp, #4]
    eac4:	f7f2 fa56 	bl	f74 <__aeabi_fmul>
    eac8:	4649      	mov	r1, r9
    eaca:	4683      	mov	fp, r0
    eacc:	1c20      	adds	r0, r4, #0
    eace:	f7f2 fa51 	bl	f74 <__aeabi_fmul>
    ead2:	1c01      	adds	r1, r0, #0
    ead4:	4658      	mov	r0, fp
    ead6:	f7f2 fb7f 	bl	11d8 <__aeabi_fsub>
    eada:	4641      	mov	r1, r8
    eadc:	4683      	mov	fp, r0
    eade:	1c28      	adds	r0, r5, #0
    eae0:	f7f2 fa48 	bl	f74 <__aeabi_fmul>
    eae4:	1c01      	adds	r1, r0, #0
    eae6:	4658      	mov	r0, fp
    eae8:	f7f2 fb76 	bl	11d8 <__aeabi_fsub>
    eaec:	9900      	ldr	r1, [sp, #0]
    eaee:	4683      	mov	fp, r0
    eaf0:	1c30      	adds	r0, r6, #0
    eaf2:	f7f2 fa3f 	bl	f74 <__aeabi_fmul>
    eaf6:	1c01      	adds	r1, r0, #0
    eaf8:	4658      	mov	r0, fp
    eafa:	f7f2 fb6d 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1029
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
    eafe:	9901      	ldr	r1, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1028
void qAeqAxB(struct fquaternion *pqA, const struct fquaternion *pqB)
{
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
    eb00:	9002      	str	r0, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1029
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
    eb02:	1c20      	adds	r0, r4, #0
    eb04:	f7f2 fa36 	bl	f74 <__aeabi_fmul>
    eb08:	1c39      	adds	r1, r7, #0
    eb0a:	4683      	mov	fp, r0
    eb0c:	4648      	mov	r0, r9
    eb0e:	f7f2 fa31 	bl	f74 <__aeabi_fmul>
    eb12:	1c01      	adds	r1, r0, #0
    eb14:	4658      	mov	r0, fp
    eb16:	f7f1 febf 	bl	898 <__aeabi_fadd>
    eb1a:	4641      	mov	r1, r8
    eb1c:	4683      	mov	fp, r0
    eb1e:	1c30      	adds	r0, r6, #0
    eb20:	f7f2 fa28 	bl	f74 <__aeabi_fmul>
    eb24:	1c01      	adds	r1, r0, #0
    eb26:	4658      	mov	r0, fp
    eb28:	f7f1 feb6 	bl	898 <__aeabi_fadd>
    eb2c:	9900      	ldr	r1, [sp, #0]
    eb2e:	4683      	mov	fp, r0
    eb30:	1c28      	adds	r0, r5, #0
    eb32:	f7f2 fa1f 	bl	f74 <__aeabi_fmul>
    eb36:	1c01      	adds	r1, r0, #0
    eb38:	4658      	mov	r0, fp
    eb3a:	f7f2 fb4d 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1030
	qProd.q2 = pqA->q0 * pqB->q2 - pqA->q1 * pqB->q3 + pqA->q2 * pqB->q0 + pqA->q3 * pqB->q1;
    eb3e:	9901      	ldr	r1, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1029
{
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
    eb40:	9003      	str	r0, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1030
	qProd.q2 = pqA->q0 * pqB->q2 - pqA->q1 * pqB->q3 + pqA->q2 * pqB->q0 + pqA->q3 * pqB->q1;
    eb42:	1c28      	adds	r0, r5, #0
    eb44:	f7f2 fa16 	bl	f74 <__aeabi_fmul>
    eb48:	4649      	mov	r1, r9
    eb4a:	4683      	mov	fp, r0
    eb4c:	1c30      	adds	r0, r6, #0
    eb4e:	f7f2 fa11 	bl	f74 <__aeabi_fmul>
    eb52:	1c01      	adds	r1, r0, #0
    eb54:	4658      	mov	r0, fp
    eb56:	f7f2 fb3f 	bl	11d8 <__aeabi_fsub>
    eb5a:	1c39      	adds	r1, r7, #0
    eb5c:	4683      	mov	fp, r0
    eb5e:	4640      	mov	r0, r8
    eb60:	f7f2 fa08 	bl	f74 <__aeabi_fmul>
    eb64:	1c01      	adds	r1, r0, #0
    eb66:	4658      	mov	r0, fp
    eb68:	f7f1 fe96 	bl	898 <__aeabi_fadd>
    eb6c:	9900      	ldr	r1, [sp, #0]
    eb6e:	4683      	mov	fp, r0
    eb70:	1c20      	adds	r0, r4, #0
    eb72:	f7f2 f9ff 	bl	f74 <__aeabi_fmul>
    eb76:	1c01      	adds	r1, r0, #0
    eb78:	4658      	mov	r0, fp
    eb7a:	f7f1 fe8d 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1031
	qProd.q3 = pqA->q0 * pqB->q3 + pqA->q1 * pqB->q2 - pqA->q2 * pqB->q1 + pqA->q3 * pqB->q0;
    eb7e:	9901      	ldr	r1, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1030
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
	qProd.q2 = pqA->q0 * pqB->q2 - pqA->q1 * pqB->q3 + pqA->q2 * pqB->q0 + pqA->q3 * pqB->q1;
    eb80:	4683      	mov	fp, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1031
	qProd.q3 = pqA->q0 * pqB->q3 + pqA->q1 * pqB->q2 - pqA->q2 * pqB->q1 + pqA->q3 * pqB->q0;
    eb82:	1c30      	adds	r0, r6, #0
    eb84:	f7f2 f9f6 	bl	f74 <__aeabi_fmul>
    eb88:	4649      	mov	r1, r9
    eb8a:	1c06      	adds	r6, r0, #0
    eb8c:	1c28      	adds	r0, r5, #0
    eb8e:	f7f2 f9f1 	bl	f74 <__aeabi_fmul>
    eb92:	1c01      	adds	r1, r0, #0
    eb94:	1c30      	adds	r0, r6, #0
    eb96:	f7f1 fe7f 	bl	898 <__aeabi_fadd>
    eb9a:	4641      	mov	r1, r8
    eb9c:	1c05      	adds	r5, r0, #0
    eb9e:	1c20      	adds	r0, r4, #0
    eba0:	f7f2 f9e8 	bl	f74 <__aeabi_fmul>
    eba4:	1c01      	adds	r1, r0, #0
    eba6:	1c28      	adds	r0, r5, #0
    eba8:	f7f2 fb16 	bl	11d8 <__aeabi_fsub>
    ebac:	1c39      	adds	r1, r7, #0
    ebae:	1c04      	adds	r4, r0, #0
    ebb0:	9800      	ldr	r0, [sp, #0]
    ebb2:	f7f2 f9df 	bl	f74 <__aeabi_fmul>
    ebb6:	1c01      	adds	r1, r0, #0
    ebb8:	1c20      	adds	r0, r4, #0
    ebba:	f7f1 fe6d 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1034

	// copy the result back into qA
	*pqA = qProd;
    ebbe:	4652      	mov	r2, sl
    ebc0:	4651      	mov	r1, sl
    ebc2:	9b02      	ldr	r3, [sp, #8]
    ebc4:	9e03      	ldr	r6, [sp, #12]
    ebc6:	6013      	str	r3, [r2, #0]
    ebc8:	4652      	mov	r2, sl
    ebca:	604e      	str	r6, [r1, #4]
    ebcc:	4659      	mov	r1, fp
    ebce:	60d0      	str	r0, [r2, #12]
    ebd0:	6091      	str	r1, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1031

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
	qProd.q2 = pqA->q0 * pqB->q2 - pqA->q1 * pqB->q3 + pqA->q2 * pqB->q0 + pqA->q3 * pqB->q1;
	qProd.q3 = pqA->q0 * pqB->q3 + pqA->q1 * pqB->q2 - pqA->q2 * pqB->q1 + pqA->q3 * pqB->q0;
    ebd2:	1c04      	adds	r4, r0, #0
fqAeqNormqA():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1058
void fqAeqNormqA(struct fquaternion *pqA)
{
	float fNorm;					// quaternion Norm

	// calculate the quaternion Norm
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
    ebd4:	1c19      	adds	r1, r3, #0
    ebd6:	1c18      	adds	r0, r3, #0
    ebd8:	f7f2 f9cc 	bl	f74 <__aeabi_fmul>
    ebdc:	1c31      	adds	r1, r6, #0
    ebde:	1c05      	adds	r5, r0, #0
    ebe0:	1c30      	adds	r0, r6, #0
    ebe2:	f7f2 f9c7 	bl	f74 <__aeabi_fmul>
    ebe6:	1c01      	adds	r1, r0, #0
    ebe8:	1c28      	adds	r0, r5, #0
    ebea:	f7f1 fe55 	bl	898 <__aeabi_fadd>
    ebee:	4659      	mov	r1, fp
    ebf0:	1c05      	adds	r5, r0, #0
    ebf2:	4658      	mov	r0, fp
    ebf4:	f7f2 f9be 	bl	f74 <__aeabi_fmul>
    ebf8:	1c01      	adds	r1, r0, #0
    ebfa:	1c28      	adds	r0, r5, #0
    ebfc:	f7f1 fe4c 	bl	898 <__aeabi_fadd>
    ec00:	1c21      	adds	r1, r4, #0
    ec02:	1c05      	adds	r5, r0, #0
    ec04:	1c20      	adds	r0, r4, #0
    ec06:	f7f2 f9b5 	bl	f74 <__aeabi_fmul>
    ec0a:	1c01      	adds	r1, r0, #0
    ec0c:	1c28      	adds	r0, r5, #0
    ec0e:	f7f1 fe43 	bl	898 <__aeabi_fadd>
    ec12:	f003 fefb 	bl	12a0c <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1059
	if (fNorm > CORRUPTQUAT)
    ec16:	4947      	ldr	r1, [pc, #284]	; (ed34 <fLPFOrientationQuaternion+0x4f0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1058
void fqAeqNormqA(struct fquaternion *pqA)
{
	float fNorm;					// quaternion Norm

	// calculate the quaternion Norm
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
    ec18:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1059
	if (fNorm > CORRUPTQUAT)
    ec1a:	f7f1 fe29 	bl	870 <__aeabi_fcmpgt>
    ec1e:	2800      	cmp	r0, #0
    ec20:	d03d      	beq.n	ec9e <fLPFOrientationQuaternion+0x45a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1062
	{
		// general case
		fNorm = 1.0F / fNorm;
    ec22:	20fe      	movs	r0, #254	; 0xfe
    ec24:	1c21      	adds	r1, r4, #0
    ec26:	0580      	lsls	r0, r0, #22
    ec28:	f7f1 ffb2 	bl	b90 <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1063
		pqA->q0 *= fNorm;
    ec2c:	4653      	mov	r3, sl
    ec2e:	6819      	ldr	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1062
	// calculate the quaternion Norm
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
	if (fNorm > CORRUPTQUAT)
	{
		// general case
		fNorm = 1.0F / fNorm;
    ec30:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1063
		pqA->q0 *= fNorm;
    ec32:	f7f2 f99f 	bl	f74 <__aeabi_fmul>
    ec36:	4653      	mov	r3, sl
    ec38:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1064
		pqA->q1 *= fNorm;
    ec3a:	6859      	ldr	r1, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1063
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
	if (fNorm > CORRUPTQUAT)
	{
		// general case
		fNorm = 1.0F / fNorm;
		pqA->q0 *= fNorm;
    ec3c:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1064
		pqA->q1 *= fNorm;
    ec3e:	1c28      	adds	r0, r5, #0
    ec40:	f7f2 f998 	bl	f74 <__aeabi_fmul>
    ec44:	4653      	mov	r3, sl
    ec46:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1065
		pqA->q2 *= fNorm;
    ec48:	6899      	ldr	r1, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1064
	if (fNorm > CORRUPTQUAT)
	{
		// general case
		fNorm = 1.0F / fNorm;
		pqA->q0 *= fNorm;
		pqA->q1 *= fNorm;
    ec4a:	6058      	str	r0, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1065
		pqA->q2 *= fNorm;
    ec4c:	1c28      	adds	r0, r5, #0
    ec4e:	f7f2 f991 	bl	f74 <__aeabi_fmul>
    ec52:	4653      	mov	r3, sl
    ec54:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1066
		pqA->q3 *= fNorm;
    ec56:	68d9      	ldr	r1, [r3, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1065
	{
		// general case
		fNorm = 1.0F / fNorm;
		pqA->q0 *= fNorm;
		pqA->q1 *= fNorm;
		pqA->q2 *= fNorm;
    ec58:	6098      	str	r0, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1066
		pqA->q3 *= fNorm;
    ec5a:	1c28      	adds	r0, r5, #0
    ec5c:	f7f2 f98a 	bl	f74 <__aeabi_fmul>
    ec60:	4653      	mov	r3, sl
    ec62:	1c05      	adds	r5, r0, #0
    ec64:	60d8      	str	r0, [r3, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1076
		pqA->q0 = 1.0F;
		pqA->q1 = pqA->q2 = pqA->q3 = 0.0F;
	}

	// correct a negative scalar component if the function was called with negative q0
	if (pqA->q0 < 0.0F)
    ec66:	2100      	movs	r1, #0
    ec68:	1c20      	adds	r0, r4, #0
    ec6a:	f7f1 fded 	bl	848 <__aeabi_fcmplt>
    ec6e:	2800      	cmp	r0, #0
    ec70:	d00e      	beq.n	ec90 <fLPFOrientationQuaternion+0x44c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1078
	{
		pqA->q0 = -pqA->q0;
    ec72:	2380      	movs	r3, #128	; 0x80
    ec74:	061b      	lsls	r3, r3, #24
    ec76:	469c      	mov	ip, r3
    ec78:	4653      	mov	r3, sl
    ec7a:	4464      	add	r4, ip
    ec7c:	601c      	str	r4, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1079
		pqA->q1 = -pqA->q1;
    ec7e:	4653      	mov	r3, sl
    ec80:	4467      	add	r7, ip
    ec82:	605f      	str	r7, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1080
		pqA->q2 = -pqA->q2;
    ec84:	4653      	mov	r3, sl
    ec86:	4466      	add	r6, ip
    ec88:	609e      	str	r6, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1081
		pqA->q3 = -pqA->q3;
    ec8a:	4653      	mov	r3, sl
    ec8c:	4465      	add	r5, ip
    ec8e:	60dd      	str	r5, [r3, #12]
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:994
	// renormalize the low pass filtered quaternion to prevent error accumulation
	// the renormalization function ensures that q0 is non-negative
	fqAeqNormqA(pLPq);

	return;
}
    ec90:	b007      	add	sp, #28
    ec92:	bc3c      	pop	{r2, r3, r4, r5}
    ec94:	4690      	mov	r8, r2
    ec96:	4699      	mov	r9, r3
    ec98:	46a2      	mov	sl, r4
    ec9a:	46ab      	mov	fp, r5
    ec9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
fqAeqNormqA():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1071
		pqA->q3 *= fNorm;
	}
	else
	{
		// return with identity quaternion since the quaternion is corrupted
		pqA->q0 = 1.0F;
    ec9e:	23fe      	movs	r3, #254	; 0xfe
    eca0:	4652      	mov	r2, sl
    eca2:	059b      	lsls	r3, r3, #22
    eca4:	6013      	str	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1072
		pqA->q1 = pqA->q2 = pqA->q3 = 0.0F;
    eca6:	2300      	movs	r3, #0
    eca8:	60d3      	str	r3, [r2, #12]
    ecaa:	6093      	str	r3, [r2, #8]
    ecac:	6053      	str	r3, [r2, #4]
    ecae:	e7ef      	b.n	ec90 <fLPFOrientationQuaternion+0x44c>
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:971
	// compute the scalar component q0
	ftmp = fdeltaq.q1 * fdeltaq.q1 + fdeltaq.q2 * fdeltaq.q2 + fdeltaq.q3 * fdeltaq.q3;
	if (ftmp <= 1.0F)
	{
		// normal case
		fdeltaq.q0 = sqrtf(1.0F - ftmp);
    ecb0:	20fe      	movs	r0, #254	; 0xfe
    ecb2:	1c39      	adds	r1, r7, #0
    ecb4:	0580      	lsls	r0, r0, #22
    ecb6:	f7f2 fa8f 	bl	11d8 <__aeabi_fsub>
    ecba:	f003 fea7 	bl	12a0c <sqrtf>
fRotationVectorDegFromQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:887
	float fetadeg;			// rotation angle (deg)
	float sinhalfeta;		// sin(eta/2)
	float ftmp;				// scratch variable

	// calculate the rotation angle in the range 0 <= eta < 360 deg
	if ((pq->q0 >= 1.0F) || (pq->q0 <= -1.0F))
    ecbe:	21fe      	movs	r1, #254	; 0xfe
    ecc0:	0589      	lsls	r1, r1, #22
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:971
	// compute the scalar component q0
	ftmp = fdeltaq.q1 * fdeltaq.q1 + fdeltaq.q2 * fdeltaq.q2 + fdeltaq.q3 * fdeltaq.q3;
	if (ftmp <= 1.0F)
	{
		// normal case
		fdeltaq.q0 = sqrtf(1.0F - ftmp);
    ecc2:	1c07      	adds	r7, r0, #0
fRotationVectorDegFromQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:887
	float fetadeg;			// rotation angle (deg)
	float sinhalfeta;		// sin(eta/2)
	float ftmp;				// scratch variable

	// calculate the rotation angle in the range 0 <= eta < 360 deg
	if ((pq->q0 >= 1.0F) || (pq->q0 <= -1.0F))
    ecc4:	f7f1 fdde 	bl	884 <__aeabi_fcmpge>
    ecc8:	2800      	cmp	r0, #0
    ecca:	d012      	beq.n	ecf2 <fLPFOrientationQuaternion+0x4ae>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:914

	// calculate the rotation vector (deg)
	if (sinhalfeta == 0.0F)
	{
		// the rotation angle eta is zero and the axis is irrelevant 
		rvecdeg[X] = rvecdeg[Y] = rvecdeg[Z] = 0.0F;
    eccc:	2300      	movs	r3, #0
    ecce:	4699      	mov	r9, r3
    ecd0:	9300      	str	r3, [sp, #0]
    ecd2:	469b      	mov	fp, r3
    ecd4:	e6d1      	b.n	ea7a <fLPFOrientationQuaternion+0x236>
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:947

	// set fdeltaqn to the delta rotation quaternion conjg(fLPq[n-1) . fqn
	fdeltaq = qconjgAxB(pLPq, pq);
	if (fdeltaq.q0 < 0.0F)
	{
		fdeltaq.q0 = -fdeltaq.q0;
    ecd6:	2280      	movs	r2, #128	; 0x80
    ecd8:	0612      	lsls	r2, r2, #24
    ecda:	4694      	mov	ip, r2
    ecdc:	9b02      	ldr	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:950
		fdeltaq.q1 = -fdeltaq.q1;
		fdeltaq.q2 = -fdeltaq.q2;
		fdeltaq.q3 = -fdeltaq.q3;
    ecde:	4466      	add	r6, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:947

	// set fdeltaqn to the delta rotation quaternion conjg(fLPq[n-1) . fqn
	fdeltaq = qconjgAxB(pLPq, pq);
	if (fdeltaq.q0 < 0.0F)
	{
		fdeltaq.q0 = -fdeltaq.q0;
    ece0:	4463      	add	r3, ip
    ece2:	9302      	str	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:948
		fdeltaq.q1 = -fdeltaq.q1;
    ece4:	9b03      	ldr	r3, [sp, #12]
    ece6:	4463      	add	r3, ip
    ece8:	9303      	str	r3, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:949
		fdeltaq.q2 = -fdeltaq.q2;
    ecea:	1c13      	adds	r3, r2, #0
    ecec:	444b      	add	r3, r9
    ecee:	4699      	mov	r9, r3
    ecf0:	e652      	b.n	e998 <fLPFOrientationQuaternion+0x154>
fRotationVectorDegFromQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:887
	float fetadeg;			// rotation angle (deg)
	float sinhalfeta;		// sin(eta/2)
	float ftmp;				// scratch variable

	// calculate the rotation angle in the range 0 <= eta < 360 deg
	if ((pq->q0 >= 1.0F) || (pq->q0 <= -1.0F))
    ecf2:	1c38      	adds	r0, r7, #0
    ecf4:	4910      	ldr	r1, [pc, #64]	; (ed38 <fLPFOrientationQuaternion+0x4f4>)
    ecf6:	f7f1 fdb1 	bl	85c <__aeabi_fcmple>
    ecfa:	2800      	cmp	r0, #0
    ecfc:	d1e6      	bne.n	eccc <fLPFOrientationQuaternion+0x488>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:896
		fetadeg = 0.0F;
	}
	else
	{
		// general case returning 0 < eta < 360 deg 
		fetarad = 2.0F * acosf(pq->q0); 
    ecfe:	1c38      	adds	r0, r7, #0
    ed00:	f003 fc8a 	bl	12618 <acosf>
    ed04:	1c01      	adds	r1, r0, #0
    ed06:	f7f1 fdc7 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:897
		fetadeg = fetarad * FRADTODEG;
    ed0a:	4907      	ldr	r1, [pc, #28]	; (ed28 <fLPFOrientationQuaternion+0x4e4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:896
		fetadeg = 0.0F;
	}
	else
	{
		// general case returning 0 < eta < 360 deg 
		fetarad = 2.0F * acosf(pq->q0); 
    ed0c:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:897
		fetadeg = fetarad * FRADTODEG;
    ed0e:	f7f2 f931 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:901
	}

	// map the rotation angle onto the range -180 deg <= eta < 180 deg 
	if (fetadeg >= 180.0F)
    ed12:	490a      	ldr	r1, [pc, #40]	; (ed3c <fLPFOrientationQuaternion+0x4f8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:897
	}
	else
	{
		// general case returning 0 < eta < 360 deg 
		fetarad = 2.0F * acosf(pq->q0); 
		fetadeg = fetarad * FRADTODEG;
    ed14:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:901
	}

	// map the rotation angle onto the range -180 deg <= eta < 180 deg 
	if (fetadeg >= 180.0F)
    ed16:	f7f1 fdb5 	bl	884 <__aeabi_fcmpge>
    ed1a:	2800      	cmp	r0, #0
    ed1c:	d000      	beq.n	ed20 <fLPFOrientationQuaternion+0x4dc>
    ed1e:	e683      	b.n	ea28 <fLPFOrientationQuaternion+0x1e4>
    ed20:	4648      	mov	r0, r9
    ed22:	e689      	b.n	ea38 <fLPFOrientationQuaternion+0x1f4>
    ed24:	40490fdb 	.word	0x40490fdb
    ed28:	42652ee1 	.word	0x42652ee1
    ed2c:	43b40000 	.word	0x43b40000
    ed30:	3c8efa35 	.word	0x3c8efa35
    ed34:	3a83126f 	.word	0x3a83126f
    ed38:	bf800000 	.word	0xbf800000
    ed3c:	43340000 	.word	0x43340000

0000ed40 <fLPFScalar>:
fLPFScalar():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:998
	return;
}

// function low pass filters a scalar
void fLPFScalar(float *pfS, float *pfLPS, float flpf, int32 loopcounter)
{
    ed40:	b570      	push	{r4, r5, r6, lr}
    ed42:	1c0d      	adds	r5, r1, #0
    ed44:	1c16      	adds	r6, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1000
	// set S[LP,n]=S[n] on first pass
	if (loopcounter == 0)
    ed46:	2b00      	cmp	r3, #0
    ed48:	d10d      	bne.n	ed66 <fLPFScalar+0x26>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1002
	{
		*pfLPS = *pfS;
    ed4a:	6804      	ldr	r4, [r0, #0]
    ed4c:	600c      	str	r4, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1006
	}

	// apply the exponential low pass filter
	*pfLPS += flpf * (*pfS - *pfLPS);
    ed4e:	6800      	ldr	r0, [r0, #0]
    ed50:	1c21      	adds	r1, r4, #0
    ed52:	f7f2 fa41 	bl	11d8 <__aeabi_fsub>
    ed56:	1c31      	adds	r1, r6, #0
    ed58:	f7f2 f90c 	bl	f74 <__aeabi_fmul>
    ed5c:	1c21      	adds	r1, r4, #0
    ed5e:	f7f1 fd9b 	bl	898 <__aeabi_fadd>
    ed62:	6028      	str	r0, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1009

	return;
}
    ed64:	bd70      	pop	{r4, r5, r6, pc}
    ed66:	680c      	ldr	r4, [r1, #0]
    ed68:	e7f1      	b.n	ed4e <fLPFScalar+0xe>
    ed6a:	46c0      	nop			; (mov r8, r8)

0000ed6c <qAeqBxC>:
qAeqBxC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1013

// function compute the quaternion product qA * qB
void qAeqBxC(struct fquaternion *pqA, const struct fquaternion *pqB, const struct fquaternion *pqC)
{
    ed6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed6e:	465f      	mov	r7, fp
    ed70:	4656      	mov	r6, sl
    ed72:	464d      	mov	r5, r9
    ed74:	4644      	mov	r4, r8
    ed76:	b4f0      	push	{r4, r5, r6, r7}
    ed78:	1c15      	adds	r5, r2, #0
    ed7a:	1c0c      	adds	r4, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1014
	pqA->q0 = pqB->q0 * pqC->q0 - pqB->q1 * pqC->q1 - pqB->q2 * pqC->q2 - pqB->q3 * pqC->q3;
    ed7c:	684b      	ldr	r3, [r1, #4]
    ed7e:	6889      	ldr	r1, [r1, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1013
	return;
}

// function compute the quaternion product qA * qB
void qAeqBxC(struct fquaternion *pqA, const struct fquaternion *pqB, const struct fquaternion *pqC)
{
    ed80:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1014
	pqA->q0 = pqB->q0 * pqC->q0 - pqB->q1 * pqC->q1 - pqB->q2 * pqC->q2 - pqB->q3 * pqC->q3;
    ed82:	468b      	mov	fp, r1
    ed84:	68e8      	ldr	r0, [r5, #12]
    ed86:	68a9      	ldr	r1, [r5, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1013
	return;
}

// function compute the quaternion product qA * qB
void qAeqBxC(struct fquaternion *pqA, const struct fquaternion *pqB, const struct fquaternion *pqC)
{
    ed88:	b085      	sub	sp, #20
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1014
	pqA->q0 = pqB->q0 * pqC->q0 - pqB->q1 * pqC->q1 - pqB->q2 * pqC->q2 - pqB->q3 * pqC->q3;
    ed8a:	6852      	ldr	r2, [r2, #4]
    ed8c:	4680      	mov	r8, r0
    ed8e:	9101      	str	r1, [sp, #4]
    ed90:	6820      	ldr	r0, [r4, #0]
    ed92:	6829      	ldr	r1, [r5, #0]
    ed94:	9203      	str	r2, [sp, #12]
    ed96:	9302      	str	r3, [sp, #8]
    ed98:	f7f2 f8ec 	bl	f74 <__aeabi_fmul>
    ed9c:	9903      	ldr	r1, [sp, #12]
    ed9e:	4681      	mov	r9, r0
    eda0:	9802      	ldr	r0, [sp, #8]
    eda2:	f7f2 f8e7 	bl	f74 <__aeabi_fmul>
    eda6:	1c01      	adds	r1, r0, #0
    eda8:	4648      	mov	r0, r9
    edaa:	f7f2 fa15 	bl	11d8 <__aeabi_fsub>
    edae:	9901      	ldr	r1, [sp, #4]
    edb0:	4681      	mov	r9, r0
    edb2:	4658      	mov	r0, fp
    edb4:	f7f2 f8de 	bl	f74 <__aeabi_fmul>
    edb8:	1c01      	adds	r1, r0, #0
    edba:	4648      	mov	r0, r9
    edbc:	f7f2 fa0c 	bl	11d8 <__aeabi_fsub>
    edc0:	68e7      	ldr	r7, [r4, #12]
    edc2:	4681      	mov	r9, r0
    edc4:	4641      	mov	r1, r8
    edc6:	1c38      	adds	r0, r7, #0
    edc8:	f7f2 f8d4 	bl	f74 <__aeabi_fmul>
    edcc:	1c01      	adds	r1, r0, #0
    edce:	4648      	mov	r0, r9
    edd0:	f7f2 fa02 	bl	11d8 <__aeabi_fsub>
    edd4:	6030      	str	r0, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1015
	pqA->q1 = pqB->q0 * pqC->q1 + pqB->q1 * pqC->q0 + pqB->q2 * pqC->q3 - pqB->q3 * pqC->q2;
    edd6:	6823      	ldr	r3, [r4, #0]
    edd8:	9803      	ldr	r0, [sp, #12]
    edda:	469a      	mov	sl, r3
    eddc:	682b      	ldr	r3, [r5, #0]
    edde:	4651      	mov	r1, sl
    ede0:	4699      	mov	r9, r3
    ede2:	f7f2 f8c7 	bl	f74 <__aeabi_fmul>
    ede6:	4649      	mov	r1, r9
    ede8:	9003      	str	r0, [sp, #12]
    edea:	9802      	ldr	r0, [sp, #8]
    edec:	f7f2 f8c2 	bl	f74 <__aeabi_fmul>
    edf0:	1c01      	adds	r1, r0, #0
    edf2:	9803      	ldr	r0, [sp, #12]
    edf4:	f7f1 fd50 	bl	898 <__aeabi_fadd>
    edf8:	4641      	mov	r1, r8
    edfa:	9002      	str	r0, [sp, #8]
    edfc:	4658      	mov	r0, fp
    edfe:	f7f2 f8b9 	bl	f74 <__aeabi_fmul>
    ee02:	1c01      	adds	r1, r0, #0
    ee04:	9802      	ldr	r0, [sp, #8]
    ee06:	f7f1 fd47 	bl	898 <__aeabi_fadd>
    ee0a:	1c39      	adds	r1, r7, #0
    ee0c:	9002      	str	r0, [sp, #8]
    ee0e:	9801      	ldr	r0, [sp, #4]
    ee10:	f7f2 f8b0 	bl	f74 <__aeabi_fmul>
    ee14:	1c01      	adds	r1, r0, #0
    ee16:	9802      	ldr	r0, [sp, #8]
    ee18:	f7f2 f9de 	bl	11d8 <__aeabi_fsub>
    ee1c:	6070      	str	r0, [r6, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1016
	pqA->q2 = pqB->q0 * pqC->q2 - pqB->q1 * pqC->q3 + pqB->q2 * pqC->q0 + pqB->q3 * pqC->q1;
    ee1e:	6863      	ldr	r3, [r4, #4]
    ee20:	686a      	ldr	r2, [r5, #4]
    ee22:	9801      	ldr	r0, [sp, #4]
    ee24:	4651      	mov	r1, sl
    ee26:	9302      	str	r3, [sp, #8]
    ee28:	9203      	str	r2, [sp, #12]
    ee2a:	f7f2 f8a3 	bl	f74 <__aeabi_fmul>
    ee2e:	9902      	ldr	r1, [sp, #8]
    ee30:	9001      	str	r0, [sp, #4]
    ee32:	4640      	mov	r0, r8
    ee34:	f7f2 f89e 	bl	f74 <__aeabi_fmul>
    ee38:	1c01      	adds	r1, r0, #0
    ee3a:	9801      	ldr	r0, [sp, #4]
    ee3c:	f7f2 f9cc 	bl	11d8 <__aeabi_fsub>
    ee40:	4649      	mov	r1, r9
    ee42:	9001      	str	r0, [sp, #4]
    ee44:	4658      	mov	r0, fp
    ee46:	f7f2 f895 	bl	f74 <__aeabi_fmul>
    ee4a:	1c01      	adds	r1, r0, #0
    ee4c:	9801      	ldr	r0, [sp, #4]
    ee4e:	f7f1 fd23 	bl	898 <__aeabi_fadd>
    ee52:	9903      	ldr	r1, [sp, #12]
    ee54:	4683      	mov	fp, r0
    ee56:	1c38      	adds	r0, r7, #0
    ee58:	f7f2 f88c 	bl	f74 <__aeabi_fmul>
    ee5c:	1c01      	adds	r1, r0, #0
    ee5e:	4658      	mov	r0, fp
    ee60:	f7f1 fd1a 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1017
	pqA->q3 = pqB->q0 * pqC->q3 + pqB->q1 * pqC->q2 - pqB->q2 * pqC->q1 + pqB->q3 * pqC->q0;
    ee64:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1016
// function compute the quaternion product qA * qB
void qAeqBxC(struct fquaternion *pqA, const struct fquaternion *pqB, const struct fquaternion *pqC)
{
	pqA->q0 = pqB->q0 * pqC->q0 - pqB->q1 * pqC->q1 - pqB->q2 * pqC->q2 - pqB->q3 * pqC->q3;
	pqA->q1 = pqB->q0 * pqC->q1 + pqB->q1 * pqC->q0 + pqB->q2 * pqC->q3 - pqB->q3 * pqC->q2;
	pqA->q2 = pqB->q0 * pqC->q2 - pqB->q1 * pqC->q3 + pqB->q2 * pqC->q0 + pqB->q3 * pqC->q1;
    ee66:	60b0      	str	r0, [r6, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1017
	pqA->q3 = pqB->q0 * pqC->q3 + pqB->q1 * pqC->q2 - pqB->q2 * pqC->q1 + pqB->q3 * pqC->q0;
    ee68:	4640      	mov	r0, r8
    ee6a:	f7f2 f883 	bl	f74 <__aeabi_fmul>
    ee6e:	68a9      	ldr	r1, [r5, #8]
    ee70:	4680      	mov	r8, r0
    ee72:	9802      	ldr	r0, [sp, #8]
    ee74:	f7f2 f87e 	bl	f74 <__aeabi_fmul>
    ee78:	1c01      	adds	r1, r0, #0
    ee7a:	4640      	mov	r0, r8
    ee7c:	f7f1 fd0c 	bl	898 <__aeabi_fadd>
    ee80:	68a1      	ldr	r1, [r4, #8]
    ee82:	1c05      	adds	r5, r0, #0
    ee84:	9803      	ldr	r0, [sp, #12]
    ee86:	f7f2 f875 	bl	f74 <__aeabi_fmul>
    ee8a:	1c01      	adds	r1, r0, #0
    ee8c:	1c28      	adds	r0, r5, #0
    ee8e:	f7f2 f9a3 	bl	11d8 <__aeabi_fsub>
    ee92:	4649      	mov	r1, r9
    ee94:	1c04      	adds	r4, r0, #0
    ee96:	1c38      	adds	r0, r7, #0
    ee98:	f7f2 f86c 	bl	f74 <__aeabi_fmul>
    ee9c:	1c01      	adds	r1, r0, #0
    ee9e:	1c20      	adds	r0, r4, #0
    eea0:	f7f1 fcfa 	bl	898 <__aeabi_fadd>
    eea4:	60f0      	str	r0, [r6, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1020

	return;
}
    eea6:	b005      	add	sp, #20
    eea8:	bc3c      	pop	{r2, r3, r4, r5}
    eeaa:	4690      	mov	r8, r2
    eeac:	4699      	mov	r9, r3
    eeae:	46a2      	mov	sl, r4
    eeb0:	46ab      	mov	fp, r5
    eeb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000eeb4 <qAeqAxB>:
qAeqAxB():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1024

// function compute the quaternion product qA = qA * qB
void qAeqAxB(struct fquaternion *pqA, const struct fquaternion *pqB)
{
    eeb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    eeb6:	465f      	mov	r7, fp
    eeb8:	4656      	mov	r6, sl
    eeba:	464d      	mov	r5, r9
    eebc:	4644      	mov	r4, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1028
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
    eebe:	6803      	ldr	r3, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1024
	return;
}

// function compute the quaternion product qA = qA * qB
void qAeqAxB(struct fquaternion *pqA, const struct fquaternion *pqB)
{
    eec0:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1028
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
    eec2:	469b      	mov	fp, r3
    eec4:	688a      	ldr	r2, [r1, #8]
    eec6:	6843      	ldr	r3, [r0, #4]
    eec8:	680e      	ldr	r6, [r1, #0]
    eeca:	4699      	mov	r9, r3
    eecc:	4690      	mov	r8, r2
    eece:	6883      	ldr	r3, [r0, #8]
    eed0:	68ca      	ldr	r2, [r1, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1024
	return;
}

// function compute the quaternion product qA = qA * qB
void qAeqAxB(struct fquaternion *pqA, const struct fquaternion *pqB)
{
    eed2:	b083      	sub	sp, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1028
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
    eed4:	684f      	ldr	r7, [r1, #4]
    eed6:	68c5      	ldr	r5, [r0, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1024
	return;
}

// function compute the quaternion product qA = qA * qB
void qAeqAxB(struct fquaternion *pqA, const struct fquaternion *pqB)
{
    eed8:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1028
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
    eeda:	1c31      	adds	r1, r6, #0
    eedc:	4658      	mov	r0, fp
    eede:	4692      	mov	sl, r2
    eee0:	9300      	str	r3, [sp, #0]
    eee2:	f7f2 f847 	bl	f74 <__aeabi_fmul>
    eee6:	1c39      	adds	r1, r7, #0
    eee8:	9001      	str	r0, [sp, #4]
    eeea:	4648      	mov	r0, r9
    eeec:	f7f2 f842 	bl	f74 <__aeabi_fmul>
    eef0:	1c01      	adds	r1, r0, #0
    eef2:	9801      	ldr	r0, [sp, #4]
    eef4:	f7f2 f970 	bl	11d8 <__aeabi_fsub>
    eef8:	4641      	mov	r1, r8
    eefa:	9001      	str	r0, [sp, #4]
    eefc:	9800      	ldr	r0, [sp, #0]
    eefe:	f7f2 f839 	bl	f74 <__aeabi_fmul>
    ef02:	1c01      	adds	r1, r0, #0
    ef04:	9801      	ldr	r0, [sp, #4]
    ef06:	f7f2 f967 	bl	11d8 <__aeabi_fsub>
    ef0a:	4651      	mov	r1, sl
    ef0c:	9001      	str	r0, [sp, #4]
    ef0e:	1c28      	adds	r0, r5, #0
    ef10:	f7f2 f830 	bl	f74 <__aeabi_fmul>
    ef14:	1c01      	adds	r1, r0, #0
    ef16:	9801      	ldr	r0, [sp, #4]
    ef18:	f7f2 f95e 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1029
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
    ef1c:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1034
	qProd.q2 = pqA->q0 * pqB->q2 - pqA->q1 * pqB->q3 + pqA->q2 * pqB->q0 + pqA->q3 * pqB->q1;
	qProd.q3 = pqA->q0 * pqB->q3 + pqA->q1 * pqB->q2 - pqA->q2 * pqB->q1 + pqA->q3 * pqB->q0;

	// copy the result back into qA
	*pqA = qProd;
    ef1e:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1029
{
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
    ef20:	4658      	mov	r0, fp
    ef22:	f7f2 f827 	bl	f74 <__aeabi_fmul>
    ef26:	4649      	mov	r1, r9
    ef28:	9001      	str	r0, [sp, #4]
    ef2a:	1c30      	adds	r0, r6, #0
    ef2c:	f7f2 f822 	bl	f74 <__aeabi_fmul>
    ef30:	1c01      	adds	r1, r0, #0
    ef32:	9801      	ldr	r0, [sp, #4]
    ef34:	f7f1 fcb0 	bl	898 <__aeabi_fadd>
    ef38:	4651      	mov	r1, sl
    ef3a:	9001      	str	r0, [sp, #4]
    ef3c:	9800      	ldr	r0, [sp, #0]
    ef3e:	f7f2 f819 	bl	f74 <__aeabi_fmul>
    ef42:	1c01      	adds	r1, r0, #0
    ef44:	9801      	ldr	r0, [sp, #4]
    ef46:	f7f1 fca7 	bl	898 <__aeabi_fadd>
    ef4a:	1c29      	adds	r1, r5, #0
    ef4c:	9001      	str	r0, [sp, #4]
    ef4e:	4640      	mov	r0, r8
    ef50:	f7f2 f810 	bl	f74 <__aeabi_fmul>
    ef54:	1c01      	adds	r1, r0, #0
    ef56:	9801      	ldr	r0, [sp, #4]
    ef58:	f7f2 f93e 	bl	11d8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1030
	qProd.q2 = pqA->q0 * pqB->q2 - pqA->q1 * pqB->q3 + pqA->q2 * pqB->q0 + pqA->q3 * pqB->q1;
    ef5c:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1034
	qProd.q3 = pqA->q0 * pqB->q3 + pqA->q1 * pqB->q2 - pqA->q2 * pqB->q1 + pqA->q3 * pqB->q0;

	// copy the result back into qA
	*pqA = qProd;
    ef5e:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1030
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
	qProd.q2 = pqA->q0 * pqB->q2 - pqA->q1 * pqB->q3 + pqA->q2 * pqB->q0 + pqA->q3 * pqB->q1;
    ef60:	4658      	mov	r0, fp
    ef62:	f7f2 f807 	bl	f74 <__aeabi_fmul>
    ef66:	4651      	mov	r1, sl
    ef68:	9001      	str	r0, [sp, #4]
    ef6a:	4648      	mov	r0, r9
    ef6c:	f7f2 f802 	bl	f74 <__aeabi_fmul>
    ef70:	1c01      	adds	r1, r0, #0
    ef72:	9801      	ldr	r0, [sp, #4]
    ef74:	f7f2 f930 	bl	11d8 <__aeabi_fsub>
    ef78:	9900      	ldr	r1, [sp, #0]
    ef7a:	9001      	str	r0, [sp, #4]
    ef7c:	1c30      	adds	r0, r6, #0
    ef7e:	f7f1 fff9 	bl	f74 <__aeabi_fmul>
    ef82:	1c01      	adds	r1, r0, #0
    ef84:	9801      	ldr	r0, [sp, #4]
    ef86:	f7f1 fc87 	bl	898 <__aeabi_fadd>
    ef8a:	1c29      	adds	r1, r5, #0
    ef8c:	9001      	str	r0, [sp, #4]
    ef8e:	1c38      	adds	r0, r7, #0
    ef90:	f7f1 fff0 	bl	f74 <__aeabi_fmul>
    ef94:	1c01      	adds	r1, r0, #0
    ef96:	9801      	ldr	r0, [sp, #4]
    ef98:	f7f1 fc7e 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1031
	qProd.q3 = pqA->q0 * pqB->q3 + pqA->q1 * pqB->q2 - pqA->q2 * pqB->q1 + pqA->q3 * pqB->q0;
    ef9c:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1034

	// copy the result back into qA
	*pqA = qProd;
    ef9e:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1031

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
	qProd.q2 = pqA->q0 * pqB->q2 - pqA->q1 * pqB->q3 + pqA->q2 * pqB->q0 + pqA->q3 * pqB->q1;
	qProd.q3 = pqA->q0 * pqB->q3 + pqA->q1 * pqB->q2 - pqA->q2 * pqB->q1 + pqA->q3 * pqB->q0;
    efa0:	4658      	mov	r0, fp
    efa2:	f7f1 ffe7 	bl	f74 <__aeabi_fmul>
    efa6:	4641      	mov	r1, r8
    efa8:	4682      	mov	sl, r0
    efaa:	4648      	mov	r0, r9
    efac:	f7f1 ffe2 	bl	f74 <__aeabi_fmul>
    efb0:	1c01      	adds	r1, r0, #0
    efb2:	4650      	mov	r0, sl
    efb4:	f7f1 fc70 	bl	898 <__aeabi_fadd>
    efb8:	9900      	ldr	r1, [sp, #0]
    efba:	4680      	mov	r8, r0
    efbc:	1c38      	adds	r0, r7, #0
    efbe:	f7f1 ffd9 	bl	f74 <__aeabi_fmul>
    efc2:	1c01      	adds	r1, r0, #0
    efc4:	4640      	mov	r0, r8
    efc6:	f7f2 f907 	bl	11d8 <__aeabi_fsub>
    efca:	1c29      	adds	r1, r5, #0
    efcc:	1c07      	adds	r7, r0, #0
    efce:	1c30      	adds	r0, r6, #0
    efd0:	f7f1 ffd0 	bl	f74 <__aeabi_fmul>
    efd4:	1c01      	adds	r1, r0, #0
    efd6:	1c38      	adds	r0, r7, #0
    efd8:	f7f1 fc5e 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1034

	// copy the result back into qA
	*pqA = qProd;
    efdc:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1037

	return;
}
    efde:	b003      	add	sp, #12
    efe0:	bc3c      	pop	{r2, r3, r4, r5}
    efe2:	4690      	mov	r8, r2
    efe4:	4699      	mov	r9, r3
    efe6:	46a2      	mov	sl, r4
    efe8:	46ab      	mov	fp, r5
    efea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000efec <fqAeqNormqA>:
fqAeqNormqA():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1054
	return qProd;
}

// function normalizes a rotation quaternion and ensures q0 is non-negative
void fqAeqNormqA(struct fquaternion *pqA)
{
    efec:	b5f0      	push	{r4, r5, r6, r7, lr}
    efee:	4647      	mov	r7, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1058
	float fNorm;					// quaternion Norm

	// calculate the quaternion Norm
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
    eff0:	6886      	ldr	r6, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1054
	return qProd;
}

// function normalizes a rotation quaternion and ensures q0 is non-negative
void fqAeqNormqA(struct fquaternion *pqA)
{
    eff2:	b480      	push	{r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1058
	float fNorm;					// quaternion Norm

	// calculate the quaternion Norm
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
    eff4:	68c5      	ldr	r5, [r0, #12]
    eff6:	6847      	ldr	r7, [r0, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1054
	return qProd;
}

// function normalizes a rotation quaternion and ensures q0 is non-negative
void fqAeqNormqA(struct fquaternion *pqA)
{
    eff8:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1058
	float fNorm;					// quaternion Norm

	// calculate the quaternion Norm
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
    effa:	6800      	ldr	r0, [r0, #0]
    effc:	1c01      	adds	r1, r0, #0
    effe:	f7f1 ffb9 	bl	f74 <__aeabi_fmul>
    f002:	1c39      	adds	r1, r7, #0
    f004:	4680      	mov	r8, r0
    f006:	1c38      	adds	r0, r7, #0
    f008:	f7f1 ffb4 	bl	f74 <__aeabi_fmul>
    f00c:	1c01      	adds	r1, r0, #0
    f00e:	4640      	mov	r0, r8
    f010:	f7f1 fc42 	bl	898 <__aeabi_fadd>
    f014:	1c31      	adds	r1, r6, #0
    f016:	1c07      	adds	r7, r0, #0
    f018:	1c30      	adds	r0, r6, #0
    f01a:	f7f1 ffab 	bl	f74 <__aeabi_fmul>
    f01e:	1c01      	adds	r1, r0, #0
    f020:	1c38      	adds	r0, r7, #0
    f022:	f7f1 fc39 	bl	898 <__aeabi_fadd>
    f026:	1c29      	adds	r1, r5, #0
    f028:	1c06      	adds	r6, r0, #0
    f02a:	1c28      	adds	r0, r5, #0
    f02c:	f7f1 ffa2 	bl	f74 <__aeabi_fmul>
    f030:	1c01      	adds	r1, r0, #0
    f032:	1c30      	adds	r0, r6, #0
    f034:	f7f1 fc30 	bl	898 <__aeabi_fadd>
    f038:	f003 fce8 	bl	12a0c <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1059
	if (fNorm > CORRUPTQUAT)
    f03c:	491f      	ldr	r1, [pc, #124]	; (f0bc <fqAeqNormqA+0xd0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1058
void fqAeqNormqA(struct fquaternion *pqA)
{
	float fNorm;					// quaternion Norm

	// calculate the quaternion Norm
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
    f03e:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1059
	if (fNorm > CORRUPTQUAT)
    f040:	f7f1 fc16 	bl	870 <__aeabi_fcmpgt>
    f044:	2800      	cmp	r0, #0
    f046:	d030      	beq.n	f0aa <fqAeqNormqA+0xbe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1062
	{
		// general case
		fNorm = 1.0F / fNorm;
    f048:	20fe      	movs	r0, #254	; 0xfe
    f04a:	1c29      	adds	r1, r5, #0
    f04c:	0580      	lsls	r0, r0, #22
    f04e:	f7f1 fd9f 	bl	b90 <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1063
		pqA->q0 *= fNorm;
    f052:	6821      	ldr	r1, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1062
	// calculate the quaternion Norm
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
	if (fNorm > CORRUPTQUAT)
	{
		// general case
		fNorm = 1.0F / fNorm;
    f054:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1063
		pqA->q0 *= fNorm;
    f056:	f7f1 ff8d 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1064
		pqA->q1 *= fNorm;
    f05a:	6861      	ldr	r1, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1063
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
	if (fNorm > CORRUPTQUAT)
	{
		// general case
		fNorm = 1.0F / fNorm;
		pqA->q0 *= fNorm;
    f05c:	1c05      	adds	r5, r0, #0
    f05e:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1064
		pqA->q1 *= fNorm;
    f060:	1c30      	adds	r0, r6, #0
    f062:	f7f1 ff87 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1065
		pqA->q2 *= fNorm;
    f066:	68a1      	ldr	r1, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1064
	if (fNorm > CORRUPTQUAT)
	{
		// general case
		fNorm = 1.0F / fNorm;
		pqA->q0 *= fNorm;
		pqA->q1 *= fNorm;
    f068:	6060      	str	r0, [r4, #4]
    f06a:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1065
		pqA->q2 *= fNorm;
    f06c:	1c30      	adds	r0, r6, #0
    f06e:	f7f1 ff81 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1066
		pqA->q3 *= fNorm;
    f072:	68e1      	ldr	r1, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1065
	{
		// general case
		fNorm = 1.0F / fNorm;
		pqA->q0 *= fNorm;
		pqA->q1 *= fNorm;
		pqA->q2 *= fNorm;
    f074:	60a0      	str	r0, [r4, #8]
    f076:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1066
		pqA->q3 *= fNorm;
    f078:	1c30      	adds	r0, r6, #0
    f07a:	f7f1 ff7b 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1076
		pqA->q0 = 1.0F;
		pqA->q1 = pqA->q2 = pqA->q3 = 0.0F;
	}

	// correct a negative scalar component if the function was called with negative q0
	if (pqA->q0 < 0.0F)
    f07e:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1066
		// general case
		fNorm = 1.0F / fNorm;
		pqA->q0 *= fNorm;
		pqA->q1 *= fNorm;
		pqA->q2 *= fNorm;
		pqA->q3 *= fNorm;
    f080:	1c06      	adds	r6, r0, #0
    f082:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1076
		pqA->q0 = 1.0F;
		pqA->q1 = pqA->q2 = pqA->q3 = 0.0F;
	}

	// correct a negative scalar component if the function was called with negative q0
	if (pqA->q0 < 0.0F)
    f084:	1c28      	adds	r0, r5, #0
    f086:	f7f1 fbdf 	bl	848 <__aeabi_fcmplt>
    f08a:	2800      	cmp	r0, #0
    f08c:	d00a      	beq.n	f0a4 <fqAeqNormqA+0xb8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1078
	{
		pqA->q0 = -pqA->q0;
    f08e:	2380      	movs	r3, #128	; 0x80
    f090:	061b      	lsls	r3, r3, #24
    f092:	469c      	mov	ip, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1079
		pqA->q1 = -pqA->q1;
    f094:	4443      	add	r3, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1078
	}

	// correct a negative scalar component if the function was called with negative q0
	if (pqA->q0 < 0.0F)
	{
		pqA->q0 = -pqA->q0;
    f096:	4465      	add	r5, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1080
		pqA->q1 = -pqA->q1;
		pqA->q2 = -pqA->q2;
    f098:	4467      	add	r7, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1081
		pqA->q3 = -pqA->q3;
    f09a:	4466      	add	r6, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1078
	}

	// correct a negative scalar component if the function was called with negative q0
	if (pqA->q0 < 0.0F)
	{
		pqA->q0 = -pqA->q0;
    f09c:	6025      	str	r5, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1079
		pqA->q1 = -pqA->q1;
    f09e:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1080
		pqA->q2 = -pqA->q2;
    f0a0:	60a7      	str	r7, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1081
		pqA->q3 = -pqA->q3;
    f0a2:	60e6      	str	r6, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1085
	}

	return;
}
    f0a4:	bc04      	pop	{r2}
    f0a6:	4690      	mov	r8, r2
    f0a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1071
		pqA->q3 *= fNorm;
	}
	else
	{
		// return with identity quaternion since the quaternion is corrupted
		pqA->q0 = 1.0F;
    f0aa:	23fe      	movs	r3, #254	; 0xfe
    f0ac:	059b      	lsls	r3, r3, #22
    f0ae:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1072
		pqA->q1 = pqA->q2 = pqA->q3 = 0.0F;
    f0b0:	2300      	movs	r3, #0
    f0b2:	60e3      	str	r3, [r4, #12]
    f0b4:	60a3      	str	r3, [r4, #8]
    f0b6:	6063      	str	r3, [r4, #4]
    f0b8:	e7f4      	b.n	f0a4 <fqAeqNormqA+0xb8>
    f0ba:	46c0      	nop			; (mov r8, r8)
    f0bc:	3a83126f 	.word	0x3a83126f

0000f0c0 <fqAeq1>:
fqAeq1():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1090
}

// set a quaternion to the unit quaternion
void fqAeq1(struct fquaternion *pqA)
{
	pqA->q0 = 1.0F;
    f0c0:	23fe      	movs	r3, #254	; 0xfe
    f0c2:	059b      	lsls	r3, r3, #22
    f0c4:	6003      	str	r3, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1091
	pqA->q1 = pqA->q2 = pqA->q3 = 0.0F;
    f0c6:	2300      	movs	r3, #0
    f0c8:	60c3      	str	r3, [r0, #12]
    f0ca:	6083      	str	r3, [r0, #8]
    f0cc:	6043      	str	r3, [r0, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1094

	return;
}
    f0ce:	4770      	bx	lr

0000f0d0 <RdSensData_Init>:
RdSensData_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:99
struct SV_9DOF_GBY_KALMAN thisSV_9DOF_GBY_KALMAN;
#endif

// function initializes the sensors and the sensor data structures
void RdSensData_Init(void)
{
    f0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f0d2:	2300      	movs	r3, #0
    f0d4:	4e0e      	ldr	r6, [pc, #56]	; (f110 <RdSensData_Init+0x40>)
    f0d6:	4d0f      	ldr	r5, [pc, #60]	; (f114 <RdSensData_Init+0x44>)
    f0d8:	4c0f      	ldr	r4, [pc, #60]	; (f118 <RdSensData_Init+0x48>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:118
#endif
	}

	// initialize the physical sensors over I2C
#if defined USE_MPL3115
	globals.iMPL3115Found = MPL3115_Init(I2C_DeviceData, &thisPressure);
    f0da:	4f10      	ldr	r7, [pc, #64]	; (f11c <RdSensData_Init+0x4c>)
    f0dc:	6033      	str	r3, [r6, #0]
    f0de:	6073      	str	r3, [r6, #4]
    f0e0:	60b3      	str	r3, [r6, #8]
    f0e2:	602b      	str	r3, [r5, #0]
    f0e4:	606b      	str	r3, [r5, #4]
    f0e6:	60ab      	str	r3, [r5, #8]
    f0e8:	6023      	str	r3, [r4, #0]
    f0ea:	6063      	str	r3, [r4, #4]
    f0ec:	60a3      	str	r3, [r4, #8]
    f0ee:	69b8      	ldr	r0, [r7, #24]
    f0f0:	490b      	ldr	r1, [pc, #44]	; (f120 <RdSensData_Init+0x50>)
    f0f2:	f7f4 faaf 	bl	3654 <MPL3115_Init>
    f0f6:	4b0b      	ldr	r3, [pc, #44]	; (f124 <RdSensData_Init+0x54>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:121
#endif
#if defined USE_FXOS8700
	FXOS8700_Init(I2C_DeviceData, &thisAccel, &thisMag);
    f0f8:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:118
#endif
	}

	// initialize the physical sensors over I2C
#if defined USE_MPL3115
	globals.iMPL3115Found = MPL3115_Init(I2C_DeviceData, &thisPressure);
    f0fa:	7258      	strb	r0, [r3, #9]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:121
#endif
#if defined USE_FXOS8700
	FXOS8700_Init(I2C_DeviceData, &thisAccel, &thisMag);
    f0fc:	1c2a      	adds	r2, r5, #0
    f0fe:	69b8      	ldr	r0, [r7, #24]
    f100:	f7f4 fb12 	bl	3728 <FXOS8700_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:124
#endif
#if defined USE_FXAS21000
	FXAS21000_Init(I2C_DeviceData, &thisGyro);
    f104:	69b8      	ldr	r0, [r7, #24]
    f106:	1c21      	adds	r1, r4, #0
    f108:	f7f4 fbd0 	bl	38ac <FXAS21000_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:137
#if defined USE_MAG3110
	MAG3110_Init(I2C_DeviceData, &thisMag);
#endif

	return;
}
    f10c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f10e:	46c0      	nop			; (mov r8, r8)
    f110:	20000604 	.word	0x20000604
    f114:	200024d4 	.word	0x200024d4
    f118:	200017b8 	.word	0x200017b8
    f11c:	1fffe2d8 	.word	0x1fffe2d8
    f120:	200012d8 	.word	0x200012d8
    f124:	200005dc 	.word	0x200005dc

0000f128 <Fusion_Init>:
Fusion_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:141

// function initializes the sensor fusion and magnetic calibration and sets loopcounter to zero
void Fusion_Init(void)
{
    f128:	b510      	push	{r4, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:144
	// magnetic DOF: reset magnetic calibration and magnetometer data buffer (not needed for 3DOF)
#if defined COMPUTE_3DOF_B_BASIC || defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
	fInitMagCalibration(&thisMagCal, &thisMagBuffer);
    f12a:	480e      	ldr	r0, [pc, #56]	; (f164 <Fusion_Init+0x3c>)
    f12c:	490e      	ldr	r1, [pc, #56]	; (f168 <Fusion_Init+0x40>)
    f12e:	f7fb fac7 	bl	a6c0 <fInitMagCalibration>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:154
	
	// force a reset of all the algorithms next time they execute
	// the initialization will result in the default and current quaternion being set to the most sophisticated
	// algorithm supported by the build
#if defined COMPUTE_1DOF_P_BASIC
	thisSV_1DOF_P_BASIC.resetflag = true;					
    f132:	2301      	movs	r3, #1
    f134:	480d      	ldr	r0, [pc, #52]	; (f16c <Fusion_Init+0x44>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:148
#if defined COMPUTE_3DOF_B_BASIC || defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
	fInitMagCalibration(&thisMagCal, &thisMagBuffer);
#endif

	// reset the default quaternion type to the simplest Q3 (it will be updated during the initializations)
	globals.DefaultQuaternionPacketType = Q3;
    f136:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:154
	
	// force a reset of all the algorithms next time they execute
	// the initialization will result in the default and current quaternion being set to the most sophisticated
	// algorithm supported by the build
#if defined COMPUTE_1DOF_P_BASIC
	thisSV_1DOF_P_BASIC.resetflag = true;					
    f138:	7503      	strb	r3, [r0, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:157
#endif
#if defined COMPUTE_3DOF_G_BASIC
	thisSV_3DOF_G_BASIC.resetflag = true;				
    f13a:	20a0      	movs	r0, #160	; 0xa0
    f13c:	4c0c      	ldr	r4, [pc, #48]	; (f170 <Fusion_Init+0x48>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:148
#if defined COMPUTE_3DOF_B_BASIC || defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
	fInitMagCalibration(&thisMagCal, &thisMagBuffer);
#endif

	// reset the default quaternion type to the simplest Q3 (it will be updated during the initializations)
	globals.DefaultQuaternionPacketType = Q3;
    f13e:	4a0d      	ldr	r2, [pc, #52]	; (f174 <Fusion_Init+0x4c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:157
	// algorithm supported by the build
#if defined COMPUTE_1DOF_P_BASIC
	thisSV_1DOF_P_BASIC.resetflag = true;					
#endif
#if defined COMPUTE_3DOF_G_BASIC
	thisSV_3DOF_G_BASIC.resetflag = true;				
    f140:	5423      	strb	r3, [r4, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:160
#endif
#if defined COMPUTE_3DOF_B_BASIC
	thisSV_3DOF_B_BASIC.resetflag = true;	
    f142:	4c0d      	ldr	r4, [pc, #52]	; (f178 <Fusion_Init+0x50>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:148
#if defined COMPUTE_3DOF_B_BASIC || defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
	fInitMagCalibration(&thisMagCal, &thisMagBuffer);
#endif

	// reset the default quaternion type to the simplest Q3 (it will be updated during the initializations)
	globals.DefaultQuaternionPacketType = Q3;
    f144:	7151      	strb	r1, [r2, #5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:160
#endif
#if defined COMPUTE_3DOF_G_BASIC
	thisSV_3DOF_G_BASIC.resetflag = true;				
#endif
#if defined COMPUTE_3DOF_B_BASIC
	thisSV_3DOF_B_BASIC.resetflag = true;	
    f146:	5423      	strb	r3, [r4, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:163
#endif
#if defined COMPUTE_3DOF_Y_BASIC
	thisSV_3DOF_Y_BASIC.resetflag = true;				
    f148:	4c0c      	ldr	r4, [pc, #48]	; (f17c <Fusion_Init+0x54>)
    f14a:	3824      	subs	r0, #36	; 0x24
    f14c:	5423      	strb	r3, [r4, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:166
#endif
#if defined COMPUTE_6DOF_GB_BASIC
	thisSV_6DOF_GB_BASIC.resetflag = true;				
    f14e:	4c0c      	ldr	r4, [pc, #48]	; (f180 <Fusion_Init+0x58>)
    f150:	302c      	adds	r0, #44	; 0x2c
    f152:	5423      	strb	r3, [r4, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:169
#endif
#if defined COMPUTE_6DOF_GY_KALMAN
	thisSV_6DOF_GY_KALMAN.resetflag = true;
    f154:	4c0b      	ldr	r4, [pc, #44]	; (f184 <Fusion_Init+0x5c>)
    f156:	480c      	ldr	r0, [pc, #48]	; (f188 <Fusion_Init+0x60>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:176
#if defined COMPUTE_9DOF_GBY_KALMAN
	thisSV_9DOF_GBY_KALMAN.resetflag = true;
#endif

	// reset the loop counter to zero for first iteration
	globals.loopcounter = 0;
    f158:	60d1      	str	r1, [r2, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:169
#endif
#if defined COMPUTE_6DOF_GB_BASIC
	thisSV_6DOF_GB_BASIC.resetflag = true;				
#endif
#if defined COMPUTE_6DOF_GY_KALMAN
	thisSV_6DOF_GY_KALMAN.resetflag = true;
    f15a:	5423      	strb	r3, [r4, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:172
#endif
#if defined COMPUTE_9DOF_GBY_KALMAN
	thisSV_9DOF_GBY_KALMAN.resetflag = true;
    f15c:	480b      	ldr	r0, [pc, #44]	; (f18c <Fusion_Init+0x64>)
    f15e:	4c0c      	ldr	r4, [pc, #48]	; (f190 <Fusion_Init+0x68>)
    f160:	5423      	strb	r3, [r4, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:179

	// reset the loop counter to zero for first iteration
	globals.loopcounter = 0;

	return;
}
    f162:	bd10      	pop	{r4, pc}
    f164:	200013a0 	.word	0x200013a0
    f168:	200006dc 	.word	0x200006dc
    f16c:	200005ec 	.word	0x200005ec
    f170:	20001234 	.word	0x20001234
    f174:	200005dc 	.word	0x200005dc
    f178:	20000638 	.word	0x20000638
    f17c:	2000252c 	.word	0x2000252c
    f180:	200012f4 	.word	0x200012f4
    f184:	20002044 	.word	0x20002044
    f188:	0000048e 	.word	0x0000048e
    f18c:	00000836 	.word	0x00000836
    f190:	2000180c 	.word	0x2000180c

0000f194 <RdSensData_Run>:
RdSensData_Run():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:183

// this function is called at (typically 200Hz) by MQX to read sensor data
void RdSensData_Run(void)
{
    f194:	b5f0      	push	{r4, r5, r6, r7, lr}
    f196:	4656      	mov	r6, sl
    f198:	465f      	mov	r7, fp
    f19a:	464d      	mov	r5, r9
    f19c:	4644      	mov	r4, r8
    f19e:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:189
	static int8 iCounter = 0;		// the number of gyro readings summed
	int8 i;							// loop counter

	// read the 200Hz sensor data and apply the HAL
#if defined USE_MPL3115
	if (globals.iMPL3115Found)
    f1a0:	4bc7      	ldr	r3, [pc, #796]	; (f4c0 <RdSensData_Run+0x32c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:183
	return;
}

// this function is called at (typically 200Hz) by MQX to read sensor data
void RdSensData_Run(void)
{
    f1a2:	b08f      	sub	sp, #60	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:189
	static int8 iCounter = 0;		// the number of gyro readings summed
	int8 i;							// loop counter

	// read the 200Hz sensor data and apply the HAL
#if defined USE_MPL3115
	if (globals.iMPL3115Found)
    f1a4:	7a5b      	ldrb	r3, [r3, #9]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:191
	{
		MPL3115_ReadData(I2C_DeviceData, &thisPressure);
    f1a6:	4ec7      	ldr	r6, [pc, #796]	; (f4c4 <RdSensData_Run+0x330>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:189
	static int8 iCounter = 0;		// the number of gyro readings summed
	int8 i;							// loop counter

	// read the 200Hz sensor data and apply the HAL
#if defined USE_MPL3115
	if (globals.iMPL3115Found)
    f1a8:	b25b      	sxtb	r3, r3
    f1aa:	2b00      	cmp	r3, #0
    f1ac:	d000      	beq.n	f1b0 <RdSensData_Run+0x1c>
    f1ae:	e182      	b.n	f4b6 <RdSensData_Run+0x322>
ApplyMagHAL():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:521
	thisMag.iBpFast[X] = -thisMag.iBpFast[Y];
	thisMag.iBpFast[Y] = -itmp16;
	thisMag.iBpFast[Z] = -thisMag.iBpFast[Z];
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisMag.iBpFast[X] = -thisMag.iBpFast[X];
    f1b0:	2744      	movs	r7, #68	; 0x44
RdSensData_Run():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:195
	{
		MPL3115_ReadData(I2C_DeviceData, &thisPressure);
	}
#endif
#if defined USE_FXOS8700
	FXOS8700_ReadData(I2C_DeviceData, &thisAccel, &thisMag);
    f1b2:	4dc5      	ldr	r5, [pc, #788]	; (f4c8 <RdSensData_Run+0x334>)
    f1b4:	4cc5      	ldr	r4, [pc, #788]	; (f4cc <RdSensData_Run+0x338>)
    f1b6:	69b0      	ldr	r0, [r6, #24]
    f1b8:	1c29      	adds	r1, r5, #0
    f1ba:	1c22      	adds	r2, r4, #0
    f1bc:	f7f4 fc28 	bl	3a10 <FXOS8700_ReadData>
ApplyAccelHAL():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:500
	itmp16 = thisAccel.iGpFast[X];
	thisAccel.iGpFast[X] = thisAccel.iGpFast[Y];
	thisAccel.iGpFast[Y] = itmp16;
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisAccel.iGpFast[X] = -thisAccel.iGpFast[X];
    f1c0:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
RdSensData_Run():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:200
	FXOS8700_ReadData(I2C_DeviceData, &thisAccel, &thisMag);
	ApplyAccelHAL(&thisAccel);
	ApplyMagHAL(&thisMag);
#endif
#if defined USE_FXAS21000
	FXAS21000_ReadData(I2C_DeviceData, &thisGyro, iCounter);
    f1c2:	69b0      	ldr	r0, [r6, #24]
ApplyAccelHAL():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:500
	itmp16 = thisAccel.iGpFast[X];
	thisAccel.iGpFast[X] = thisAccel.iGpFast[Y];
	thisAccel.iGpFast[Y] = itmp16;
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisAccel.iGpFast[X] = -thisAccel.iGpFast[X];
    f1c4:	425b      	negs	r3, r3
    f1c6:	852b      	strh	r3, [r5, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:501
	thisAccel.iGpFast[Y] = -thisAccel.iGpFast[Y];
    f1c8:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
RdSensData_Run():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:200
	FXOS8700_ReadData(I2C_DeviceData, &thisAccel, &thisMag);
	ApplyAccelHAL(&thisAccel);
	ApplyMagHAL(&thisMag);
#endif
#if defined USE_FXAS21000
	FXAS21000_ReadData(I2C_DeviceData, &thisGyro, iCounter);
    f1ca:	4ec1      	ldr	r6, [pc, #772]	; (f4d0 <RdSensData_Run+0x33c>)
ApplyAccelHAL():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:501
	thisAccel.iGpFast[X] = thisAccel.iGpFast[Y];
	thisAccel.iGpFast[Y] = itmp16;
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisAccel.iGpFast[X] = -thisAccel.iGpFast[X];
	thisAccel.iGpFast[Y] = -thisAccel.iGpFast[Y];
    f1cc:	425b      	negs	r3, r3
    f1ce:	856b      	strh	r3, [r5, #42]	; 0x2a
ApplyMagHAL():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:521
	thisMag.iBpFast[X] = -thisMag.iBpFast[Y];
	thisMag.iBpFast[Y] = -itmp16;
	thisMag.iBpFast[Z] = -thisMag.iBpFast[Z];
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisMag.iBpFast[X] = -thisMag.iBpFast[X];
    f1d0:	5be3      	ldrh	r3, [r4, r7]
RdSensData_Run():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:200
	FXOS8700_ReadData(I2C_DeviceData, &thisAccel, &thisMag);
	ApplyAccelHAL(&thisAccel);
	ApplyMagHAL(&thisMag);
#endif
#if defined USE_FXAS21000
	FXAS21000_ReadData(I2C_DeviceData, &thisGyro, iCounter);
    f1d2:	1c31      	adds	r1, r6, #0
ApplyMagHAL():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:521
	thisMag.iBpFast[X] = -thisMag.iBpFast[Y];
	thisMag.iBpFast[Y] = -itmp16;
	thisMag.iBpFast[Z] = -thisMag.iBpFast[Z];
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisMag.iBpFast[X] = -thisMag.iBpFast[X];
    f1d4:	425b      	negs	r3, r3
    f1d6:	53e3      	strh	r3, [r4, r7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:522
	thisMag.iBpFast[Y] = -thisMag.iBpFast[Y];	
    f1d8:	2346      	movs	r3, #70	; 0x46
    f1da:	4699      	mov	r9, r3
    f1dc:	464a      	mov	r2, r9
    f1de:	5ae3      	ldrh	r3, [r4, r3]
    f1e0:	425b      	negs	r3, r3
    f1e2:	52a3      	strh	r3, [r4, r2]
RdSensData_Run():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:200
	FXOS8700_ReadData(I2C_DeviceData, &thisAccel, &thisMag);
	ApplyAccelHAL(&thisAccel);
	ApplyMagHAL(&thisMag);
#endif
#if defined USE_FXAS21000
	FXAS21000_ReadData(I2C_DeviceData, &thisGyro, iCounter);
    f1e4:	4bbb      	ldr	r3, [pc, #748]	; (f4d4 <RdSensData_Run+0x340>)
    f1e6:	2200      	movs	r2, #0
    f1e8:	469a      	mov	sl, r3
    f1ea:	569a      	ldrsb	r2, [r3, r2]
    f1ec:	f7f4 fca6 	bl	3b3c <FXAS21000_ReadData>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:201
	ApplyGyroHAL(&thisGyro, iCounter);
    f1f0:	4653      	mov	r3, sl
ApplyGyroHAL():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:548
	thisGyro.iYpFast[irow][X] = -thisGyro.iYpFast[irow][Y];
	thisGyro.iYpFast[irow][Y] = -itmp16;
	thisGyro.iYpFast[irow][Z] = -thisGyro.iYpFast[irow][Z];
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisGyro.iYpFast[irow][X] = -thisGyro.iYpFast[irow][X];
    f1f2:	466a      	mov	r2, sp
RdSensData_Run():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:201
	ApplyAccelHAL(&thisAccel);
	ApplyMagHAL(&thisMag);
#endif
#if defined USE_FXAS21000
	FXAS21000_ReadData(I2C_DeviceData, &thisGyro, iCounter);
	ApplyGyroHAL(&thisGyro, iCounter);
    f1f4:	781b      	ldrb	r3, [r3, #0]
ApplyGyroHAL():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:548
	thisGyro.iYpFast[irow][X] = -thisGyro.iYpFast[irow][Y];
	thisGyro.iYpFast[irow][Y] = -itmp16;
	thisGyro.iYpFast[irow][Z] = -thisGyro.iYpFast[irow][Z];
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisGyro.iYpFast[irow][X] = -thisGyro.iYpFast[irow][X];
    f1f6:	7013      	strb	r3, [r2, #0]
RdSensData_Run():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:201
	ApplyAccelHAL(&thisAccel);
	ApplyMagHAL(&thisMag);
#endif
#if defined USE_FXAS21000
	FXAS21000_ReadData(I2C_DeviceData, &thisGyro, iCounter);
	ApplyGyroHAL(&thisGyro, iCounter);
    f1f8:	469b      	mov	fp, r3
ApplyGyroHAL():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:548
	thisGyro.iYpFast[irow][X] = -thisGyro.iYpFast[irow][Y];
	thisGyro.iYpFast[irow][Y] = -itmp16;
	thisGyro.iYpFast[irow][Z] = -thisGyro.iYpFast[irow][Z];
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisGyro.iYpFast[irow][X] = -thisGyro.iYpFast[irow][X];
    f1fa:	2200      	movs	r2, #0
    f1fc:	466b      	mov	r3, sp
    f1fe:	569a      	ldrsb	r2, [r3, r2]
    f200:	0053      	lsls	r3, r2, #1
    f202:	189a      	adds	r2, r3, r2
    f204:	0052      	lsls	r2, r2, #1
    f206:	18b3      	adds	r3, r6, r2
    f208:	8b9a      	ldrh	r2, [r3, #28]
    f20a:	4252      	negs	r2, r2
    f20c:	9200      	str	r2, [sp, #0]
    f20e:	839a      	strh	r2, [r3, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:549
	thisGyro.iYpFast[irow][Y] = -thisGyro.iYpFast[irow][Y];
    f210:	8bda      	ldrh	r2, [r3, #30]
    f212:	4252      	negs	r2, r2
    f214:	83da      	strh	r2, [r3, #30]
RdSensData_Run():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:220

	// sum the 200Hz HAL-aligned sensor data
	for (i = X; i <= Z; i++)
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] += (int32) thisAccel.iGpFast[i];
    f216:	2128      	movs	r1, #40	; 0x28
    f218:	5e6a      	ldrsh	r2, [r5, r1]
    f21a:	6829      	ldr	r1, [r5, #0]
    f21c:	4694      	mov	ip, r2
    f21e:	4461      	add	r1, ip
    f220:	920b      	str	r2, [sp, #44]	; 0x2c
    f222:	6029      	str	r1, [r5, #0]
    f224:	4688      	mov	r8, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:223
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
		thisMag.iSumBpFast[i] += (int32) thisMag.iBpFast[i];
    f226:	5fe2      	ldrsh	r2, [r4, r7]
    f228:	6821      	ldr	r1, [r4, #0]
    f22a:	4694      	mov	ip, r2
    f22c:	9209      	str	r2, [sp, #36]	; 0x24
    f22e:	4461      	add	r1, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:226
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
		thisGyro.iSumYpFast[i] += (int32) thisGyro.iYpFast[iCounter][i];
    f230:	466a      	mov	r2, sp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:223
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] += (int32) thisAccel.iGpFast[i];
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
		thisMag.iSumBpFast[i] += (int32) thisMag.iBpFast[i];
    f232:	6021      	str	r1, [r4, #0]
    f234:	1c0f      	adds	r7, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:226
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
		thisGyro.iSumYpFast[i] += (int32) thisGyro.iYpFast[iCounter][i];
    f236:	6831      	ldr	r1, [r6, #0]
    f238:	8812      	ldrh	r2, [r2, #0]
    f23a:	468c      	mov	ip, r1
    f23c:	b212      	sxth	r2, r2
    f23e:	4462      	add	r2, ip
    f240:	9201      	str	r2, [sp, #4]
    f242:	6032      	str	r2, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:220

	// sum the 200Hz HAL-aligned sensor data
	for (i = X; i <= Z; i++)
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] += (int32) thisAccel.iGpFast[i];
    f244:	212a      	movs	r1, #42	; 0x2a
    f246:	5e6a      	ldrsh	r2, [r5, r1]
    f248:	6869      	ldr	r1, [r5, #4]
    f24a:	4694      	mov	ip, r2
    f24c:	920c      	str	r2, [sp, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:223
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
		thisMag.iSumBpFast[i] += (int32) thisMag.iBpFast[i];
    f24e:	464a      	mov	r2, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:220

	// sum the 200Hz HAL-aligned sensor data
	for (i = X; i <= Z; i++)
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] += (int32) thisAccel.iGpFast[i];
    f250:	4461      	add	r1, ip
    f252:	9102      	str	r1, [sp, #8]
    f254:	6069      	str	r1, [r5, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:223
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
		thisMag.iSumBpFast[i] += (int32) thisMag.iBpFast[i];
    f256:	5ea2      	ldrsh	r2, [r4, r2]
    f258:	6861      	ldr	r1, [r4, #4]
    f25a:	4694      	mov	ip, r2
    f25c:	4461      	add	r1, ip
    f25e:	9103      	str	r1, [sp, #12]
    f260:	6061      	str	r1, [r4, #4]
    f262:	920a      	str	r2, [sp, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:226
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
		thisGyro.iSumYpFast[i] += (int32) thisGyro.iYpFast[iCounter][i];
    f264:	211e      	movs	r1, #30
    f266:	5e5a      	ldrsh	r2, [r3, r1]
    f268:	6871      	ldr	r1, [r6, #4]
    f26a:	468c      	mov	ip, r1
    f26c:	4462      	add	r2, ip
    f26e:	9204      	str	r2, [sp, #16]
    f270:	6072      	str	r2, [r6, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:220

	// sum the 200Hz HAL-aligned sensor data
	for (i = X; i <= Z; i++)
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] += (int32) thisAccel.iGpFast[i];
    f272:	212c      	movs	r1, #44	; 0x2c
    f274:	5e6a      	ldrsh	r2, [r5, r1]
    f276:	68a9      	ldr	r1, [r5, #8]
    f278:	4694      	mov	ip, r2
    f27a:	920d      	str	r2, [sp, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:223
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
		thisMag.iSumBpFast[i] += (int32) thisMag.iBpFast[i];
    f27c:	2248      	movs	r2, #72	; 0x48
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:220

	// sum the 200Hz HAL-aligned sensor data
	for (i = X; i <= Z; i++)
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] += (int32) thisAccel.iGpFast[i];
    f27e:	4461      	add	r1, ip
    f280:	9105      	str	r1, [sp, #20]
    f282:	60a9      	str	r1, [r5, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:223
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
		thisMag.iSumBpFast[i] += (int32) thisMag.iBpFast[i];
    f284:	5ea2      	ldrsh	r2, [r4, r2]
    f286:	68a1      	ldr	r1, [r4, #8]
    f288:	4694      	mov	ip, r2
    f28a:	4461      	add	r1, ip
    f28c:	9208      	str	r2, [sp, #32]
    f28e:	9106      	str	r1, [sp, #24]
    f290:	60a1      	str	r1, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:226
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
		thisGyro.iSumYpFast[i] += (int32) thisGyro.iYpFast[iCounter][i];
    f292:	2220      	movs	r2, #32
    f294:	5e9b      	ldrsh	r3, [r3, r2]
    f296:	68b2      	ldr	r2, [r6, #8]
    f298:	4694      	mov	ip, r2
    f29a:	4463      	add	r3, ip
    f29c:	9307      	str	r3, [sp, #28]
    f29e:	60b3      	str	r3, [r6, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:231
#endif
	}

	// increment the decimation counter for the next iteration
	iCounter++;
    f2a0:	465b      	mov	r3, fp
    f2a2:	4652      	mov	r2, sl
    f2a4:	3301      	adds	r3, #1
    f2a6:	b2db      	uxtb	r3, r3
    f2a8:	7013      	strb	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:234

	// every OVERSAMPLE_RATIO iterations process the summed over-sampled readings
	if (iCounter == OVERSAMPLE_RATIO)
    f2aa:	2b08      	cmp	r3, #8
    f2ac:	d000      	beq.n	f2b0 <RdSensData_Run+0x11c>
    f2ae:	e0fb      	b.n	f4a8 <RdSensData_Run+0x314>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:239
	{
#if defined USE_MPL3115
		// for pressure and temperature, use the most recent measurement in preference to averaging
		// since the MPL3115 is configured for maximum 512 sample over-sampling already
		thisPressure.iHp = thisPressure.iHpFast;;
    f2b0:	4b89      	ldr	r3, [pc, #548]	; (f4d8 <RdSensData_Run+0x344>)
    f2b2:	681a      	ldr	r2, [r3, #0]
    f2b4:	4699      	mov	r9, r3
    f2b6:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:240
		thisPressure.iTp = thisPressure.iTpFast;
    f2b8:	8b5b      	ldrh	r3, [r3, #26]
    f2ba:	469b      	mov	fp, r3
    f2bc:	464b      	mov	r3, r9
    f2be:	465a      	mov	r2, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:241
		thisPressure.fHp = (float) thisPressure.iHp * thisPressure.fmPerCount;
    f2c0:	6818      	ldr	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:240
	{
#if defined USE_MPL3115
		// for pressure and temperature, use the most recent measurement in preference to averaging
		// since the MPL3115 is configured for maximum 512 sample over-sampling already
		thisPressure.iHp = thisPressure.iHpFast;;
		thisPressure.iTp = thisPressure.iTpFast;
    f2c2:	831a      	strh	r2, [r3, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:241
		thisPressure.fHp = (float) thisPressure.iHp * thisPressure.fmPerCount;
    f2c4:	f7f2 f926 	bl	1514 <__aeabi_i2f>
    f2c8:	464b      	mov	r3, r9
    f2ca:	6919      	ldr	r1, [r3, #16]
    f2cc:	f7f1 fe52 	bl	f74 <__aeabi_fmul>
    f2d0:	464b      	mov	r3, r9
    f2d2:	6098      	str	r0, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:242
		thisPressure.fTp = (float) thisPressure.iTp * thisPressure.fCPerCount;
    f2d4:	465b      	mov	r3, fp
    f2d6:	b218      	sxth	r0, r3
    f2d8:	f7f2 f91c 	bl	1514 <__aeabi_i2f>
    f2dc:	464b      	mov	r3, r9
    f2de:	6959      	ldr	r1, [r3, #20]
    f2e0:	f7f1 fe48 	bl	f74 <__aeabi_fmul>
    f2e4:	464b      	mov	r3, r9
    f2e6:	60d8      	str	r0, [r3, #12]
    f2e8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:250
		// process the HAL-aligned sensor measurements prior to calling the sensor fusion
		for (i = X; i <= Z; i++)
		{
#if defined USE_FXOS8700 || defined USE_MMA8652
			// calculate the fast accelerometer reading for the Kalman filters (to reduce phase errors)
			thisAccel.fGpFast[i] = (float) thisAccel.iGpFast[i] * thisAccel.fgPerCount;
    f2ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f2ec:	469b      	mov	fp, r3
    f2ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    f2f0:	4699      	mov	r9, r3
    f2f2:	69b3      	ldr	r3, [r6, #24]
    f2f4:	9300      	str	r3, [sp, #0]
    f2f6:	f7f2 f90d 	bl	1514 <__aeabi_i2f>
    f2fa:	4659      	mov	r1, fp
    f2fc:	f7f1 fe3a 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:252
			// calculate the average (typically 25Hz) accelerometer reading
			thisAccel.iGp[i] = (int16)(thisAccel.iSumGpFast[i] / OVERSAMPLE_RATIO);
    f300:	4642      	mov	r2, r8
    f302:	17d3      	asrs	r3, r2, #31
    f304:	0f5b      	lsrs	r3, r3, #29
    f306:	4443      	add	r3, r8
    f308:	10db      	asrs	r3, r3, #3
    f30a:	85eb      	strh	r3, [r5, #46]	; 0x2e
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:250
		// process the HAL-aligned sensor measurements prior to calling the sensor fusion
		for (i = X; i <= Z; i++)
		{
#if defined USE_FXOS8700 || defined USE_MMA8652
			// calculate the fast accelerometer reading for the Kalman filters (to reduce phase errors)
			thisAccel.fGpFast[i] = (float) thisAccel.iGpFast[i] * thisAccel.fgPerCount;
    f30c:	60e8      	str	r0, [r5, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:253
			// calculate the average (typically 25Hz) accelerometer reading
			thisAccel.iGp[i] = (int16)(thisAccel.iSumGpFast[i] / OVERSAMPLE_RATIO);
			thisAccel.fGp[i] = (float) thisAccel.iSumGpFast[i] * thisAccel.fgPerCount / (float) OVERSAMPLE_RATIO;
    f30e:	4640      	mov	r0, r8
    f310:	f7f2 f900 	bl	1514 <__aeabi_i2f>
    f314:	4659      	mov	r1, fp
    f316:	f7f1 fe2d 	bl	f74 <__aeabi_fmul>
    f31a:	21f8      	movs	r1, #248	; 0xf8
    f31c:	0589      	lsls	r1, r1, #22
    f31e:	f7f1 fe29 	bl	f74 <__aeabi_fmul>
    f322:	61a8      	str	r0, [r5, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:257
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
			// calculate the fast magnetometer reading for the Kalman filters (to reduce phase errors)
			thisMag.fBpFast[i] = (float) thisMag.iBpFast[i] * thisMag.fuTPerCount;
    f324:	9809      	ldr	r0, [sp, #36]	; 0x24
    f326:	f7f2 f8f5 	bl	1514 <__aeabi_i2f>
    f32a:	4649      	mov	r1, r9
    f32c:	f7f1 fe22 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:259
			// calculate the average (typically 25Hz) magnetometer reading
			thisMag.iBp[i] = (int16)(thisMag.iSumBpFast[i] / OVERSAMPLE_RATIO);
    f330:	224a      	movs	r2, #74	; 0x4a
    f332:	17fb      	asrs	r3, r7, #31
    f334:	0f5b      	lsrs	r3, r3, #29
    f336:	19db      	adds	r3, r3, r7
    f338:	10db      	asrs	r3, r3, #3
    f33a:	52a3      	strh	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:257
			thisAccel.iGp[i] = (int16)(thisAccel.iSumGpFast[i] / OVERSAMPLE_RATIO);
			thisAccel.fGp[i] = (float) thisAccel.iSumGpFast[i] * thisAccel.fgPerCount / (float) OVERSAMPLE_RATIO;
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
			// calculate the fast magnetometer reading for the Kalman filters (to reduce phase errors)
			thisMag.fBpFast[i] = (float) thisMag.iBpFast[i] * thisMag.fuTPerCount;
    f33c:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:260
			// calculate the average (typically 25Hz) magnetometer reading
			thisMag.iBp[i] = (int16)(thisMag.iSumBpFast[i] / OVERSAMPLE_RATIO);
			thisMag.fBp[i] = (float) thisMag.iSumBpFast[i] * thisMag.fuTPerCount / (float) OVERSAMPLE_RATIO;
    f33e:	1c38      	adds	r0, r7, #0
    f340:	f7f2 f8e8 	bl	1514 <__aeabi_i2f>
    f344:	4649      	mov	r1, r9
    f346:	f7f1 fe15 	bl	f74 <__aeabi_fmul>
    f34a:	21f8      	movs	r1, #248	; 0xf8
    f34c:	0589      	lsls	r1, r1, #22
    f34e:	f7f1 fe11 	bl	f74 <__aeabi_fmul>
    f352:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:264
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			// calculate the average (typically 25Hz) gyro reading
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
    f354:	9801      	ldr	r0, [sp, #4]
    f356:	224c      	movs	r2, #76	; 0x4c
    f358:	4684      	mov	ip, r0
    f35a:	17c3      	asrs	r3, r0, #31
    f35c:	0f5b      	lsrs	r3, r3, #29
    f35e:	4463      	add	r3, ip
    f360:	10db      	asrs	r3, r3, #3
    f362:	52b3      	strh	r3, [r6, r2]
    f364:	4690      	mov	r8, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:265
			thisGyro.fYp[i] = (float) thisGyro.iSumYpFast[i] * thisGyro.fDegPerSecPerCount / (float) OVERSAMPLE_RATIO;
    f366:	f7f2 f8d5 	bl	1514 <__aeabi_i2f>
    f36a:	9900      	ldr	r1, [sp, #0]
    f36c:	f7f1 fe02 	bl	f74 <__aeabi_fmul>
    f370:	21f8      	movs	r1, #248	; 0xf8
    f372:	0589      	lsls	r1, r1, #22
    f374:	f7f1 fdfe 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:269
#endif
			// zero the sensor sums for the next iteration
#if defined USE_FXOS8700 || defined USE_MMA8652
			thisAccel.iSumGpFast[i] = 0;
    f378:	2700      	movs	r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:265
			thisMag.fBp[i] = (float) thisMag.iSumBpFast[i] * thisMag.fuTPerCount / (float) OVERSAMPLE_RATIO;
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			// calculate the average (typically 25Hz) gyro reading
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
			thisGyro.fYp[i] = (float) thisGyro.iSumYpFast[i] * thisGyro.fDegPerSecPerCount / (float) OVERSAMPLE_RATIO;
    f37a:	60f0      	str	r0, [r6, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:269
#endif
			// zero the sensor sums for the next iteration
#if defined USE_FXOS8700 || defined USE_MMA8652
			thisAccel.iSumGpFast[i] = 0;
    f37c:	602f      	str	r7, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:272
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
			thisMag.iSumBpFast[i] = 0;
    f37e:	6027      	str	r7, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:275
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			thisGyro.iSumYpFast[i] = 0;
    f380:	6037      	str	r7, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:250
		// process the HAL-aligned sensor measurements prior to calling the sensor fusion
		for (i = X; i <= Z; i++)
		{
#if defined USE_FXOS8700 || defined USE_MMA8652
			// calculate the fast accelerometer reading for the Kalman filters (to reduce phase errors)
			thisAccel.fGpFast[i] = (float) thisAccel.iGpFast[i] * thisAccel.fgPerCount;
    f382:	980c      	ldr	r0, [sp, #48]	; 0x30
    f384:	f7f2 f8c6 	bl	1514 <__aeabi_i2f>
    f388:	4659      	mov	r1, fp
    f38a:	f7f1 fdf3 	bl	f74 <__aeabi_fmul>
    f38e:	6128      	str	r0, [r5, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:252
			// calculate the average (typically 25Hz) accelerometer reading
			thisAccel.iGp[i] = (int16)(thisAccel.iSumGpFast[i] / OVERSAMPLE_RATIO);
    f390:	9802      	ldr	r0, [sp, #8]
    f392:	4684      	mov	ip, r0
    f394:	17c3      	asrs	r3, r0, #31
    f396:	0f5b      	lsrs	r3, r3, #29
    f398:	4463      	add	r3, ip
    f39a:	10db      	asrs	r3, r3, #3
    f39c:	862b      	strh	r3, [r5, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:253
			thisAccel.fGp[i] = (float) thisAccel.iSumGpFast[i] * thisAccel.fgPerCount / (float) OVERSAMPLE_RATIO;
    f39e:	f7f2 f8b9 	bl	1514 <__aeabi_i2f>
    f3a2:	4659      	mov	r1, fp
    f3a4:	f7f1 fde6 	bl	f74 <__aeabi_fmul>
    f3a8:	21f8      	movs	r1, #248	; 0xf8
    f3aa:	0589      	lsls	r1, r1, #22
    f3ac:	f7f1 fde2 	bl	f74 <__aeabi_fmul>
    f3b0:	61e8      	str	r0, [r5, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:257
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
			// calculate the fast magnetometer reading for the Kalman filters (to reduce phase errors)
			thisMag.fBpFast[i] = (float) thisMag.iBpFast[i] * thisMag.fuTPerCount;
    f3b2:	980a      	ldr	r0, [sp, #40]	; 0x28
    f3b4:	f7f2 f8ae 	bl	1514 <__aeabi_i2f>
    f3b8:	4649      	mov	r1, r9
    f3ba:	f7f1 fddb 	bl	f74 <__aeabi_fmul>
    f3be:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:259
			// calculate the average (typically 25Hz) magnetometer reading
			thisMag.iBp[i] = (int16)(thisMag.iSumBpFast[i] / OVERSAMPLE_RATIO);
    f3c0:	9803      	ldr	r0, [sp, #12]
    f3c2:	4642      	mov	r2, r8
    f3c4:	4684      	mov	ip, r0
    f3c6:	17c3      	asrs	r3, r0, #31
    f3c8:	0f5b      	lsrs	r3, r3, #29
    f3ca:	4463      	add	r3, ip
    f3cc:	10db      	asrs	r3, r3, #3
    f3ce:	52a3      	strh	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:260
			thisMag.fBp[i] = (float) thisMag.iSumBpFast[i] * thisMag.fuTPerCount / (float) OVERSAMPLE_RATIO;
    f3d0:	f7f2 f8a0 	bl	1514 <__aeabi_i2f>
    f3d4:	4649      	mov	r1, r9
    f3d6:	f7f1 fdcd 	bl	f74 <__aeabi_fmul>
    f3da:	21f8      	movs	r1, #248	; 0xf8
    f3dc:	0589      	lsls	r1, r1, #22
    f3de:	f7f1 fdc9 	bl	f74 <__aeabi_fmul>
    f3e2:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:264
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			// calculate the average (typically 25Hz) gyro reading
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
    f3e4:	9804      	ldr	r0, [sp, #16]
    f3e6:	224e      	movs	r2, #78	; 0x4e
    f3e8:	4684      	mov	ip, r0
    f3ea:	17c3      	asrs	r3, r0, #31
    f3ec:	0f5b      	lsrs	r3, r3, #29
    f3ee:	4463      	add	r3, ip
    f3f0:	10db      	asrs	r3, r3, #3
    f3f2:	52b3      	strh	r3, [r6, r2]
    f3f4:	4690      	mov	r8, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:265
			thisGyro.fYp[i] = (float) thisGyro.iSumYpFast[i] * thisGyro.fDegPerSecPerCount / (float) OVERSAMPLE_RATIO;
    f3f6:	f7f2 f88d 	bl	1514 <__aeabi_i2f>
    f3fa:	9900      	ldr	r1, [sp, #0]
    f3fc:	f7f1 fdba 	bl	f74 <__aeabi_fmul>
    f400:	21f8      	movs	r1, #248	; 0xf8
    f402:	0589      	lsls	r1, r1, #22
    f404:	f7f1 fdb6 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:269
#endif
			// zero the sensor sums for the next iteration
#if defined USE_FXOS8700 || defined USE_MMA8652
			thisAccel.iSumGpFast[i] = 0;
    f408:	606f      	str	r7, [r5, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:265
			thisMag.fBp[i] = (float) thisMag.iSumBpFast[i] * thisMag.fuTPerCount / (float) OVERSAMPLE_RATIO;
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			// calculate the average (typically 25Hz) gyro reading
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
			thisGyro.fYp[i] = (float) thisGyro.iSumYpFast[i] * thisGyro.fDegPerSecPerCount / (float) OVERSAMPLE_RATIO;
    f40a:	6130      	str	r0, [r6, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:272
			// zero the sensor sums for the next iteration
#if defined USE_FXOS8700 || defined USE_MMA8652
			thisAccel.iSumGpFast[i] = 0;
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
			thisMag.iSumBpFast[i] = 0;
    f40c:	6067      	str	r7, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:250
		// process the HAL-aligned sensor measurements prior to calling the sensor fusion
		for (i = X; i <= Z; i++)
		{
#if defined USE_FXOS8700 || defined USE_MMA8652
			// calculate the fast accelerometer reading for the Kalman filters (to reduce phase errors)
			thisAccel.fGpFast[i] = (float) thisAccel.iGpFast[i] * thisAccel.fgPerCount;
    f40e:	980d      	ldr	r0, [sp, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:275
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
			thisMag.iSumBpFast[i] = 0;
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			thisGyro.iSumYpFast[i] = 0;
    f410:	6077      	str	r7, [r6, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:250
		// process the HAL-aligned sensor measurements prior to calling the sensor fusion
		for (i = X; i <= Z; i++)
		{
#if defined USE_FXOS8700 || defined USE_MMA8652
			// calculate the fast accelerometer reading for the Kalman filters (to reduce phase errors)
			thisAccel.fGpFast[i] = (float) thisAccel.iGpFast[i] * thisAccel.fgPerCount;
    f412:	f7f2 f87f 	bl	1514 <__aeabi_i2f>
    f416:	4659      	mov	r1, fp
    f418:	f7f1 fdac 	bl	f74 <__aeabi_fmul>
    f41c:	6168      	str	r0, [r5, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:252
			// calculate the average (typically 25Hz) accelerometer reading
			thisAccel.iGp[i] = (int16)(thisAccel.iSumGpFast[i] / OVERSAMPLE_RATIO);
    f41e:	9805      	ldr	r0, [sp, #20]
    f420:	4684      	mov	ip, r0
    f422:	17c3      	asrs	r3, r0, #31
    f424:	0f5b      	lsrs	r3, r3, #29
    f426:	4463      	add	r3, ip
    f428:	10db      	asrs	r3, r3, #3
    f42a:	866b      	strh	r3, [r5, #50]	; 0x32
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:253
			thisAccel.fGp[i] = (float) thisAccel.iSumGpFast[i] * thisAccel.fgPerCount / (float) OVERSAMPLE_RATIO;
    f42c:	f7f2 f872 	bl	1514 <__aeabi_i2f>
    f430:	4659      	mov	r1, fp
    f432:	f7f1 fd9f 	bl	f74 <__aeabi_fmul>
    f436:	21f8      	movs	r1, #248	; 0xf8
    f438:	0589      	lsls	r1, r1, #22
    f43a:	f7f1 fd9b 	bl	f74 <__aeabi_fmul>
    f43e:	6228      	str	r0, [r5, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:257
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
			// calculate the fast magnetometer reading for the Kalman filters (to reduce phase errors)
			thisMag.fBpFast[i] = (float) thisMag.iBpFast[i] * thisMag.fuTPerCount;
    f440:	9808      	ldr	r0, [sp, #32]
    f442:	f7f2 f867 	bl	1514 <__aeabi_i2f>
    f446:	4649      	mov	r1, r9
    f448:	f7f1 fd94 	bl	f74 <__aeabi_fmul>
    f44c:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:259
			// calculate the average (typically 25Hz) magnetometer reading
			thisMag.iBp[i] = (int16)(thisMag.iSumBpFast[i] / OVERSAMPLE_RATIO);
    f44e:	9806      	ldr	r0, [sp, #24]
    f450:	4642      	mov	r2, r8
    f452:	4684      	mov	ip, r0
    f454:	17c3      	asrs	r3, r0, #31
    f456:	0f5b      	lsrs	r3, r3, #29
    f458:	4463      	add	r3, ip
    f45a:	10db      	asrs	r3, r3, #3
    f45c:	52a3      	strh	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:260
			thisMag.fBp[i] = (float) thisMag.iSumBpFast[i] * thisMag.fuTPerCount / (float) OVERSAMPLE_RATIO;
    f45e:	f7f2 f859 	bl	1514 <__aeabi_i2f>
    f462:	4649      	mov	r1, r9
    f464:	f7f1 fd86 	bl	f74 <__aeabi_fmul>
    f468:	21f8      	movs	r1, #248	; 0xf8
    f46a:	0589      	lsls	r1, r1, #22
    f46c:	f7f1 fd82 	bl	f74 <__aeabi_fmul>
    f470:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:264
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			// calculate the average (typically 25Hz) gyro reading
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
    f472:	9807      	ldr	r0, [sp, #28]
    f474:	2250      	movs	r2, #80	; 0x50
    f476:	4684      	mov	ip, r0
    f478:	17c3      	asrs	r3, r0, #31
    f47a:	0f5b      	lsrs	r3, r3, #29
    f47c:	4463      	add	r3, ip
    f47e:	10db      	asrs	r3, r3, #3
    f480:	52b3      	strh	r3, [r6, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:265
			thisGyro.fYp[i] = (float) thisGyro.iSumYpFast[i] * thisGyro.fDegPerSecPerCount / (float) OVERSAMPLE_RATIO;
    f482:	f7f2 f847 	bl	1514 <__aeabi_i2f>
    f486:	9900      	ldr	r1, [sp, #0]
    f488:	f7f1 fd74 	bl	f74 <__aeabi_fmul>
    f48c:	21f8      	movs	r1, #248	; 0xf8
    f48e:	0589      	lsls	r1, r1, #22
    f490:	f7f1 fd70 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:280
			thisGyro.iSumYpFast[i] = 0;
#endif
		}

		// zero the counter and set the event flag to start the sensor fusion task
		iCounter = 0;
    f494:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:281
		mqxglobals.RunKF_Event_Flag = 1;
    f496:	2101      	movs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:280
			thisGyro.iSumYpFast[i] = 0;
#endif
		}

		// zero the counter and set the event flag to start the sensor fusion task
		iCounter = 0;
    f498:	701f      	strb	r7, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:281
		mqxglobals.RunKF_Event_Flag = 1;
    f49a:	2376      	movs	r3, #118	; 0x76
    f49c:	4a0f      	ldr	r2, [pc, #60]	; (f4dc <RdSensData_Run+0x348>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:265
			thisMag.fBp[i] = (float) thisMag.iSumBpFast[i] * thisMag.fuTPerCount / (float) OVERSAMPLE_RATIO;
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			// calculate the average (typically 25Hz) gyro reading
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
			thisGyro.fYp[i] = (float) thisGyro.iSumYpFast[i] * thisGyro.fDegPerSecPerCount / (float) OVERSAMPLE_RATIO;
    f49e:	6170      	str	r0, [r6, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:269
#endif
			// zero the sensor sums for the next iteration
#if defined USE_FXOS8700 || defined USE_MMA8652
			thisAccel.iSumGpFast[i] = 0;
    f4a0:	60af      	str	r7, [r5, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:272
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
			thisMag.iSumBpFast[i] = 0;
    f4a2:	60a7      	str	r7, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:275
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			thisGyro.iSumYpFast[i] = 0;
    f4a4:	60b7      	str	r7, [r6, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:281
#endif
		}

		// zero the counter and set the event flag to start the sensor fusion task
		iCounter = 0;
		mqxglobals.RunKF_Event_Flag = 1;
    f4a6:	52d1      	strh	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:284

	} // end of over-sampling test
}
    f4a8:	b00f      	add	sp, #60	; 0x3c
    f4aa:	bc3c      	pop	{r2, r3, r4, r5}
    f4ac:	4690      	mov	r8, r2
    f4ae:	4699      	mov	r9, r3
    f4b0:	46a2      	mov	sl, r4
    f4b2:	46ab      	mov	fp, r5
    f4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:191

	// read the 200Hz sensor data and apply the HAL
#if defined USE_MPL3115
	if (globals.iMPL3115Found)
	{
		MPL3115_ReadData(I2C_DeviceData, &thisPressure);
    f4b6:	69b0      	ldr	r0, [r6, #24]
    f4b8:	4907      	ldr	r1, [pc, #28]	; (f4d8 <RdSensData_Run+0x344>)
    f4ba:	f7f4 fa61 	bl	3980 <MPL3115_ReadData>
    f4be:	e677      	b.n	f1b0 <RdSensData_Run+0x1c>
    f4c0:	200005dc 	.word	0x200005dc
    f4c4:	1fffe2d8 	.word	0x1fffe2d8
    f4c8:	20000604 	.word	0x20000604
    f4cc:	200024d4 	.word	0x200024d4
    f4d0:	200017b8 	.word	0x200017b8
    f4d4:	1fffe0a8 	.word	0x1fffe0a8
    f4d8:	200012d8 	.word	0x200012d8
    f4dc:	20000560 	.word	0x20000560

0000f4e0 <Fusion_Run>:
Fusion_Run():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:288
	} // end of over-sampling test
}

// function runs the sensor fusion algorithms
void Fusion_Run(void)
{
    f4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f4e2:	464e      	mov	r6, r9
    f4e4:	4645      	mov	r5, r8
    f4e6:	4657      	mov	r7, sl
    f4e8:	b4e0      	push	{r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:293
	int8 initiatemagcal;				// flag to initiate a new magnetic calibration

#if defined COMPUTE_3DOF_B_BASIC || defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
	// magnetic DOF: remove hard and soft iron terms from Bp (uT) to get calibrated data Bc (uT)
	fInvertMagCal(&thisMag, &thisMagCal);
    f4ea:	4ea1      	ldr	r6, [pc, #644]	; (f770 <Fusion_Run+0x290>)
    f4ec:	4da1      	ldr	r5, [pc, #644]	; (f774 <Fusion_Run+0x294>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:288
	} // end of over-sampling test
}

// function runs the sensor fusion algorithms
void Fusion_Run(void)
{
    f4ee:	b086      	sub	sp, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:293
	int8 initiatemagcal;				// flag to initiate a new magnetic calibration

#if defined COMPUTE_3DOF_B_BASIC || defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
	// magnetic DOF: remove hard and soft iron terms from Bp (uT) to get calibrated data Bc (uT)
	fInvertMagCal(&thisMag, &thisMagCal);
    f4f0:	1c30      	adds	r0, r6, #0
    f4f2:	1c29      	adds	r1, r5, #0
    f4f4:	f7fb fb8e 	bl	ac14 <fInvertMagCal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:297

	// update magnetic buffer checking for i) absence of first all-zero magnetometer output and ii) no calibration in progress
	// an all zero magnetometer reading can occur after power-on at rare intervals but it simply won't be used in the buffer
	if (!((globals.loopcounter < 100) && (thisMag.iBpFast[X] == 0) && (thisMag.iBpFast[Y] == 0) && (thisMag.iBpFast[Z] == 0)) && !thisMagCal.iCalInProgress)
    f4f8:	4c9f      	ldr	r4, [pc, #636]	; (f778 <Fusion_Run+0x298>)
    f4fa:	68e3      	ldr	r3, [r4, #12]
    f4fc:	2b63      	cmp	r3, #99	; 0x63
    f4fe:	dc03      	bgt.n	f508 <Fusion_Run+0x28>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:297 (discriminator 2)
    f500:	6c72      	ldr	r2, [r6, #68]	; 0x44
    f502:	2a00      	cmp	r2, #0
    f504:	d100      	bne.n	f508 <Fusion_Run+0x28>
    f506:	e0ea      	b.n	f6de <Fusion_Run+0x1fe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:297 (discriminator 5)
    f508:	4a9c      	ldr	r2, [pc, #624]	; (f77c <Fusion_Run+0x29c>)
    f50a:	56aa      	ldrsb	r2, [r5, r2]
    f50c:	2a00      	cmp	r2, #0
    f50e:	d100      	bne.n	f512 <Fusion_Run+0x32>
    f510:	e0ef      	b.n	f6f2 <Fusion_Run+0x212>
    f512:	4a9b      	ldr	r2, [pc, #620]	; (f780 <Fusion_Run+0x2a0>)
    f514:	4691      	mov	r9, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:306
	}
#endif

	// 1DOF Pressure low pass filter algorithm
#if defined COMPUTE_1DOF_P_BASIC
	thisSV_1DOF_P_BASIC.systick = SYST_CVR & 0x00FFFFFF;
    f516:	4a9b      	ldr	r2, [pc, #620]	; (f784 <Fusion_Run+0x2a4>)
    f518:	4f9b      	ldr	r7, [pc, #620]	; (f788 <Fusion_Run+0x2a8>)
    f51a:	4690      	mov	r8, r2
    f51c:	6892      	ldr	r2, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:307
	fRun_1DOF_P_BASIC(&thisSV_1DOF_P_BASIC, &thisPressure, globals.loopcounter);
    f51e:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:306
	}
#endif

	// 1DOF Pressure low pass filter algorithm
#if defined COMPUTE_1DOF_P_BASIC
	thisSV_1DOF_P_BASIC.systick = SYST_CVR & 0x00FFFFFF;
    f520:	0212      	lsls	r2, r2, #8
    f522:	0a12      	lsrs	r2, r2, #8
    f524:	613a      	str	r2, [r7, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:307
	fRun_1DOF_P_BASIC(&thisSV_1DOF_P_BASIC, &thisPressure, globals.loopcounter);
    f526:	4999      	ldr	r1, [pc, #612]	; (f78c <Fusion_Run+0x2ac>)
    f528:	1c1a      	adds	r2, r3, #0
    f52a:	f7f5 f88f 	bl	464c <fRun_1DOF_P_BASIC>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:308
	thisSV_1DOF_P_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
    f52e:	4643      	mov	r3, r8
    f530:	689b      	ldr	r3, [r3, #8]
    f532:	693a      	ldr	r2, [r7, #16]
    f534:	021b      	lsls	r3, r3, #8
    f536:	0a1b      	lsrs	r3, r3, #8
    f538:	1ad3      	subs	r3, r2, r3
    f53a:	613b      	str	r3, [r7, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:309
	if (thisSV_1DOF_P_BASIC.systick < 0) thisSV_1DOF_P_BASIC.systick += SYST_RVR;	
    f53c:	d500      	bpl.n	f540 <Fusion_Run+0x60>
    f53e:	e0fb      	b.n	f738 <Fusion_Run+0x258>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:316

	// 3DOF Accel Basic: call the tilt algorithm, low pass filters and Euler angle calculation
#if defined COMPUTE_3DOF_G_BASIC
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q3))
	{
		thisSV_3DOF_G_BASIC.systick = SYST_CVR & 0x00FFFFFF;		
    f540:	4b90      	ldr	r3, [pc, #576]	; (f784 <Fusion_Run+0x2a4>)
    f542:	4f93      	ldr	r7, [pc, #588]	; (f790 <Fusion_Run+0x2b0>)
    f544:	4698      	mov	r8, r3
    f546:	689b      	ldr	r3, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:317
		fRun_3DOF_G_BASIC(&thisSV_3DOF_G_BASIC, &thisAccel, globals.loopcounter, THISCOORDSYSTEM);
    f548:	68e2      	ldr	r2, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:316

	// 3DOF Accel Basic: call the tilt algorithm, low pass filters and Euler angle calculation
#if defined COMPUTE_3DOF_G_BASIC
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q3))
	{
		thisSV_3DOF_G_BASIC.systick = SYST_CVR & 0x00FFFFFF;		
    f54a:	021b      	lsls	r3, r3, #8
    f54c:	0a1b      	lsrs	r3, r3, #8
    f54e:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:317
		fRun_3DOF_G_BASIC(&thisSV_3DOF_G_BASIC, &thisAccel, globals.loopcounter, THISCOORDSYSTEM);
    f550:	1c38      	adds	r0, r7, #0
    f552:	2301      	movs	r3, #1
    f554:	4649      	mov	r1, r9
    f556:	f7f5 f89b 	bl	4690 <fRun_3DOF_G_BASIC>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:318
		thisSV_3DOF_G_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
    f55a:	4643      	mov	r3, r8
    f55c:	689b      	ldr	r3, [r3, #8]
    f55e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    f560:	021b      	lsls	r3, r3, #8
    f562:	0a1b      	lsrs	r3, r3, #8
    f564:	1ad3      	subs	r3, r2, r3
    f566:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:319
		if (thisSV_3DOF_G_BASIC.systick < 0) thisSV_3DOF_G_BASIC.systick += SYST_RVR;
    f568:	d500      	bpl.n	f56c <Fusion_Run+0x8c>
    f56a:	e0e0      	b.n	f72e <Fusion_Run+0x24e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:327

	// 3DOF Magnetometer Basic: call the 2D vehicle compass algorithm
#if defined COMPUTE_3DOF_B_BASIC
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q3M))
	{
		thisSV_3DOF_B_BASIC.systick = SYST_CVR & 0x00FFFFFF;
    f56c:	4b85      	ldr	r3, [pc, #532]	; (f784 <Fusion_Run+0x2a4>)
    f56e:	4f89      	ldr	r7, [pc, #548]	; (f794 <Fusion_Run+0x2b4>)
    f570:	4698      	mov	r8, r3
    f572:	689b      	ldr	r3, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:328
		fRun_3DOF_B_BASIC(&thisSV_3DOF_B_BASIC, &thisMag, globals.loopcounter, THISCOORDSYSTEM);
    f574:	68e2      	ldr	r2, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:327

	// 3DOF Magnetometer Basic: call the 2D vehicle compass algorithm
#if defined COMPUTE_3DOF_B_BASIC
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q3M))
	{
		thisSV_3DOF_B_BASIC.systick = SYST_CVR & 0x00FFFFFF;
    f576:	021b      	lsls	r3, r3, #8
    f578:	0a1b      	lsrs	r3, r3, #8
    f57a:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:328
		fRun_3DOF_B_BASIC(&thisSV_3DOF_B_BASIC, &thisMag, globals.loopcounter, THISCOORDSYSTEM);
    f57c:	1c38      	adds	r0, r7, #0
    f57e:	2301      	movs	r3, #1
    f580:	1c31      	adds	r1, r6, #0
    f582:	f7f5 f927 	bl	47d4 <fRun_3DOF_B_BASIC>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:329
		thisSV_3DOF_B_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
    f586:	4643      	mov	r3, r8
    f588:	689b      	ldr	r3, [r3, #8]
    f58a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    f58c:	021b      	lsls	r3, r3, #8
    f58e:	0a1b      	lsrs	r3, r3, #8
    f590:	1ad3      	subs	r3, r2, r3
    f592:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:330
		if (thisSV_3DOF_B_BASIC.systick < 0) thisSV_3DOF_B_BASIC.systick += SYST_RVR;
    f594:	d500      	bpl.n	f598 <Fusion_Run+0xb8>
    f596:	e0e3      	b.n	f760 <Fusion_Run+0x280>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:338

	// 3DOF Gyro Basic: call the gyro integration algorithm
#if defined COMPUTE_3DOF_Y_BASIC
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q3G))
	{
		thisSV_3DOF_Y_BASIC.systick = SYST_CVR & 0x00FFFFFF;
    f598:	4b7a      	ldr	r3, [pc, #488]	; (f784 <Fusion_Run+0x2a4>)
    f59a:	4f7f      	ldr	r7, [pc, #508]	; (f798 <Fusion_Run+0x2b8>)
    f59c:	4698      	mov	r8, r3
    f59e:	689b      	ldr	r3, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:339
		fRun_3DOF_Y_BASIC(&thisSV_3DOF_Y_BASIC, &thisGyro, globals.loopcounter, THISCOORDSYSTEM,
    f5a0:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:338

	// 3DOF Gyro Basic: call the gyro integration algorithm
#if defined COMPUTE_3DOF_Y_BASIC
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q3G))
	{
		thisSV_3DOF_Y_BASIC.systick = SYST_CVR & 0x00FFFFFF;
    f5a2:	021b      	lsls	r3, r3, #8
    f5a4:	0a1b      	lsrs	r3, r3, #8
    f5a6:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:339
		fRun_3DOF_Y_BASIC(&thisSV_3DOF_Y_BASIC, &thisGyro, globals.loopcounter, THISCOORDSYSTEM,
    f5a8:	4b7c      	ldr	r3, [pc, #496]	; (f79c <Fusion_Run+0x2bc>)
    f5aa:	469a      	mov	sl, r3
    f5ac:	2308      	movs	r3, #8
    f5ae:	9300      	str	r3, [sp, #0]
    f5b0:	68e2      	ldr	r2, [r4, #12]
    f5b2:	3b07      	subs	r3, #7
    f5b4:	4651      	mov	r1, sl
    f5b6:	f7f5 f9bd 	bl	4934 <fRun_3DOF_Y_BASIC>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:341
				OVERSAMPLE_RATIO);
		thisSV_3DOF_Y_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
    f5ba:	4643      	mov	r3, r8
    f5bc:	689b      	ldr	r3, [r3, #8]
    f5be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    f5c0:	021b      	lsls	r3, r3, #8
    f5c2:	0a1b      	lsrs	r3, r3, #8
    f5c4:	1ad3      	subs	r3, r2, r3
    f5c6:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:342
		if (thisSV_3DOF_Y_BASIC.systick < 0) thisSV_3DOF_Y_BASIC.systick += SYST_RVR;
    f5c8:	d500      	bpl.n	f5cc <Fusion_Run+0xec>
    f5ca:	e0c4      	b.n	f756 <Fusion_Run+0x276>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:350

	// 6DOF Accel / Mag: Basic: call the eCompass orientation algorithm, low pass filters and Euler angle calculation
#if defined COMPUTE_6DOF_GB_BASIC
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q6MA))
	{
		thisSV_6DOF_GB_BASIC.systick = SYST_CVR & 0x00FFFFFF;
    f5cc:	4b6d      	ldr	r3, [pc, #436]	; (f784 <Fusion_Run+0x2a4>)
    f5ce:	4f74      	ldr	r7, [pc, #464]	; (f7a0 <Fusion_Run+0x2c0>)
    f5d0:	4698      	mov	r8, r3
    f5d2:	689b      	ldr	r3, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:351
		fRun_6DOF_GB_BASIC(&thisSV_6DOF_GB_BASIC, &thisMag, &thisAccel, globals.loopcounter, THISCOORDSYSTEM);
    f5d4:	464a      	mov	r2, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:350

	// 6DOF Accel / Mag: Basic: call the eCompass orientation algorithm, low pass filters and Euler angle calculation
#if defined COMPUTE_6DOF_GB_BASIC
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q6MA))
	{
		thisSV_6DOF_GB_BASIC.systick = SYST_CVR & 0x00FFFFFF;
    f5d6:	021b      	lsls	r3, r3, #8
    f5d8:	0a1b      	lsrs	r3, r3, #8
    f5da:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:351
		fRun_6DOF_GB_BASIC(&thisSV_6DOF_GB_BASIC, &thisMag, &thisAccel, globals.loopcounter, THISCOORDSYSTEM);
    f5dc:	2301      	movs	r3, #1
    f5de:	9300      	str	r3, [sp, #0]
    f5e0:	68e3      	ldr	r3, [r4, #12]
    f5e2:	1c38      	adds	r0, r7, #0
    f5e4:	1c31      	adds	r1, r6, #0
    f5e6:	f7f5 fa6b 	bl	4ac0 <fRun_6DOF_GB_BASIC>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:352
		thisSV_6DOF_GB_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
    f5ea:	4643      	mov	r3, r8
    f5ec:	689b      	ldr	r3, [r3, #8]
    f5ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    f5f0:	021b      	lsls	r3, r3, #8
    f5f2:	0a1b      	lsrs	r3, r3, #8
    f5f4:	1ad3      	subs	r3, r2, r3
    f5f6:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:353
		if (thisSV_6DOF_GB_BASIC.systick < 0) thisSV_6DOF_GB_BASIC.systick += SYST_RVR;
    f5f8:	d500      	bpl.n	f5fc <Fusion_Run+0x11c>
    f5fa:	e0a7      	b.n	f74c <Fusion_Run+0x26c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:361

	// 6DOF Accel / Gyro: call the Kalman orientation algorithm
#if defined COMPUTE_6DOF_GY_KALMAN
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q6AG))
	{
		thisSV_6DOF_GY_KALMAN.systick = SYST_CVR & 0x00FFFFFF;
    f5fc:	4b61      	ldr	r3, [pc, #388]	; (f784 <Fusion_Run+0x2a4>)
    f5fe:	4f69      	ldr	r7, [pc, #420]	; (f7a4 <Fusion_Run+0x2c4>)
    f600:	4698      	mov	r8, r3
    f602:	689b      	ldr	r3, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:362
		fRun_6DOF_GY_KALMAN(&thisSV_6DOF_GY_KALMAN, &thisAccel,  &thisGyro, THISCOORDSYSTEM, OVERSAMPLE_RATIO);
    f604:	4652      	mov	r2, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:361

	// 6DOF Accel / Gyro: call the Kalman orientation algorithm
#if defined COMPUTE_6DOF_GY_KALMAN
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q6AG))
	{
		thisSV_6DOF_GY_KALMAN.systick = SYST_CVR & 0x00FFFFFF;
    f606:	021b      	lsls	r3, r3, #8
    f608:	0a1b      	lsrs	r3, r3, #8
    f60a:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:362
		fRun_6DOF_GY_KALMAN(&thisSV_6DOF_GY_KALMAN, &thisAccel,  &thisGyro, THISCOORDSYSTEM, OVERSAMPLE_RATIO);
    f60c:	2308      	movs	r3, #8
    f60e:	1c38      	adds	r0, r7, #0
    f610:	9300      	str	r3, [sp, #0]
    f612:	4649      	mov	r1, r9
    f614:	3b07      	subs	r3, #7
    f616:	f7f5 fb27 	bl	4c68 <fRun_6DOF_GY_KALMAN>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:363
		thisSV_6DOF_GY_KALMAN.systick -= SYST_CVR & 0x00FFFFFF;
    f61a:	4643      	mov	r3, r8
    f61c:	689b      	ldr	r3, [r3, #8]
    f61e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    f620:	021b      	lsls	r3, r3, #8
    f622:	0a1b      	lsrs	r3, r3, #8
    f624:	1ad3      	subs	r3, r2, r3
    f626:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:364
		if (thisSV_6DOF_GY_KALMAN.systick < 0) thisSV_6DOF_GY_KALMAN.systick += SYST_RVR;
    f628:	d500      	bpl.n	f62c <Fusion_Run+0x14c>
    f62a:	e08a      	b.n	f742 <Fusion_Run+0x262>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:372

	// 9DOF Accel / Mag / Gyro: apply the Kalman filter
#if defined COMPUTE_9DOF_GBY_KALMAN
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q9))
	{
		thisSV_9DOF_GBY_KALMAN.systick = SYST_CVR & 0x00FFFFFF;
    f62c:	4b55      	ldr	r3, [pc, #340]	; (f784 <Fusion_Run+0x2a4>)
    f62e:	4f5e      	ldr	r7, [pc, #376]	; (f7a8 <Fusion_Run+0x2c8>)
    f630:	4698      	mov	r8, r3
    f632:	689b      	ldr	r3, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:373
		fRun_9DOF_GBY_KALMAN(&thisSV_9DOF_GBY_KALMAN, &thisAccel, &thisMag, &thisGyro, &thisMagCal, THISCOORDSYSTEM, OVERSAMPLE_RATIO);
    f634:	1c32      	adds	r2, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:372

	// 9DOF Accel / Mag / Gyro: apply the Kalman filter
#if defined COMPUTE_9DOF_GBY_KALMAN
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q9))
	{
		thisSV_9DOF_GBY_KALMAN.systick = SYST_CVR & 0x00FFFFFF;
    f636:	021b      	lsls	r3, r3, #8
    f638:	0a1b      	lsrs	r3, r3, #8
    f63a:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:373
		fRun_9DOF_GBY_KALMAN(&thisSV_9DOF_GBY_KALMAN, &thisAccel, &thisMag, &thisGyro, &thisMagCal, THISCOORDSYSTEM, OVERSAMPLE_RATIO);
    f63c:	2301      	movs	r3, #1
    f63e:	9301      	str	r3, [sp, #4]
    f640:	3307      	adds	r3, #7
    f642:	9302      	str	r3, [sp, #8]
    f644:	9500      	str	r5, [sp, #0]
    f646:	4653      	mov	r3, sl
    f648:	1c38      	adds	r0, r7, #0
    f64a:	4649      	mov	r1, r9
    f64c:	f7f6 fb5e 	bl	5d0c <fRun_9DOF_GBY_KALMAN>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:374
		thisSV_9DOF_GBY_KALMAN.systick -= SYST_CVR & 0x00FFFFFF;		
    f650:	4643      	mov	r3, r8
    f652:	689b      	ldr	r3, [r3, #8]
    f654:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    f656:	021b      	lsls	r3, r3, #8
    f658:	0a1b      	lsrs	r3, r3, #8
    f65a:	1ad3      	subs	r3, r2, r3
    f65c:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:375
		if (thisSV_9DOF_GBY_KALMAN.systick < 0) thisSV_9DOF_GBY_KALMAN.systick += SYST_RVR;
    f65e:	d461      	bmi.n	f724 <Fusion_Run+0x244>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:382
#endif // COMPUTE_9DOF_GBY_KALMAN

	// 6DOF and 9DOF: decide whether to initiate a magnetic calibration
#if defined COMPUTE_3DOF_B_BASIC || defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
	// check no magnetic calibration is in progress
	if (!thisMagCal.iCalInProgress)
    f660:	4b46      	ldr	r3, [pc, #280]	; (f77c <Fusion_Run+0x29c>)
    f662:	5ceb      	ldrb	r3, [r5, r3]
    f664:	4699      	mov	r9, r3
    f666:	2b00      	cmp	r3, #0
    f668:	d15a      	bne.n	f720 <Fusion_Run+0x240>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:385
	{
		// do the first 4 element calibration immediately there are a minimum of MINMEASUREMENTS4CAL
		initiatemagcal = (!thisMagCal.iMagCalHasRun && (thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS4CAL));
    f66a:	4b50      	ldr	r3, [pc, #320]	; (f7ac <Fusion_Run+0x2cc>)
    f66c:	56eb      	ldrsb	r3, [r5, r3]
    f66e:	2b00      	cmp	r3, #0
    f670:	d02b      	beq.n	f6ca <Fusion_Run+0x1ea>
    f672:	4b4f      	ldr	r3, [pc, #316]	; (f7b0 <Fusion_Run+0x2d0>)
    f674:	4a4f      	ldr	r2, [pc, #316]	; (f7b4 <Fusion_Run+0x2d4>)
    f676:	5ad3      	ldrh	r3, [r2, r3]
    f678:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:388 (discriminator 6)

		// otherwise initiate a calibration at intervals depending on the number of measurements available
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS4CAL) && 
    f67a:	4643      	mov	r3, r8
    f67c:	466a      	mov	r2, sp
    f67e:	82d3      	strh	r3, [r2, #22]
    f680:	8ad7      	ldrh	r7, [r2, #22]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:390 (discriminator 6)
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS7CAL) &&
				!(globals.loopcounter % INTERVAL4CAL));
    f682:	68e6      	ldr	r6, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:389 (discriminator 6)
		// do the first 4 element calibration immediately there are a minimum of MINMEASUREMENTS4CAL
		initiatemagcal = (!thisMagCal.iMagCalHasRun && (thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS4CAL));

		// otherwise initiate a calibration at intervals depending on the number of measurements available
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS4CAL) && 
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS7CAL) &&
    f684:	1c3b      	adds	r3, r7, #0
    f686:	3b28      	subs	r3, #40	; 0x28
    f688:	2b3b      	cmp	r3, #59	; 0x3b
    f68a:	d805      	bhi.n	f698 <Fusion_Run+0x1b8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:390 (discriminator 1)
				!(globals.loopcounter % INTERVAL4CAL));
    f68c:	1c30      	adds	r0, r6, #0
    f68e:	214b      	movs	r1, #75	; 0x4b
    f690:	f7f1 f87e 	bl	790 <__aeabi_idivmod>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:389 (discriminator 1)
		// do the first 4 element calibration immediately there are a minimum of MINMEASUREMENTS4CAL
		initiatemagcal = (!thisMagCal.iMagCalHasRun && (thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS4CAL));

		// otherwise initiate a calibration at intervals depending on the number of measurements available
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS4CAL) && 
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS7CAL) &&
    f694:	2900      	cmp	r1, #0
    f696:	d068      	beq.n	f76a <Fusion_Run+0x28a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:392
				!(globals.loopcounter % INTERVAL4CAL));
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS7CAL) &&
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS10CAL) &&
    f698:	3f64      	subs	r7, #100	; 0x64
    f69a:	2f31      	cmp	r7, #49	; 0x31
    f69c:	d832      	bhi.n	f704 <Fusion_Run+0x224>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:393 (discriminator 1)
				!(globals.loopcounter % INTERVAL7CAL));
    f69e:	1c30      	adds	r0, r6, #0
    f6a0:	21fa      	movs	r1, #250	; 0xfa
    f6a2:	f7f1 f875 	bl	790 <__aeabi_idivmod>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:392 (discriminator 1)
		// otherwise initiate a calibration at intervals depending on the number of measurements available
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS4CAL) && 
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS7CAL) &&
				!(globals.loopcounter % INTERVAL4CAL));
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS7CAL) &&
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS10CAL) &&
    f6a6:	2900      	cmp	r1, #0
    f6a8:	d136      	bne.n	f718 <Fusion_Run+0x238>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:401

		// initiate the magnetic calibration if any of the conditions are met
		if (initiatemagcal)
		{
			// set the flags denoting that a calibration is in progress
			thisMagCal.iCalInProgress = 1;
    f6aa:	2301      	movs	r3, #1
    f6ac:	4a33      	ldr	r2, [pc, #204]	; (f77c <Fusion_Run+0x29c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:405
			thisMagCal.iMagCalHasRun = 1;

			// enable the magnetic calibration task to run
			mqxglobals.MagCal_Event_Flag = 1;
    f6ae:	4942      	ldr	r1, [pc, #264]	; (f7b8 <Fusion_Run+0x2d8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:401

		// initiate the magnetic calibration if any of the conditions are met
		if (initiatemagcal)
		{
			// set the flags denoting that a calibration is in progress
			thisMagCal.iCalInProgress = 1;
    f6b0:	54ab      	strb	r3, [r5, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:402
			thisMagCal.iMagCalHasRun = 1;
    f6b2:	4a3e      	ldr	r2, [pc, #248]	; (f7ac <Fusion_Run+0x2cc>)
    f6b4:	54ab      	strb	r3, [r5, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:405

			// enable the magnetic calibration task to run
			mqxglobals.MagCal_Event_Flag = 1;
    f6b6:	2278      	movs	r2, #120	; 0x78
    f6b8:	528b      	strh	r3, [r1, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:411
		} // end of test whether to call calibration functions
	} // end of test that no calibration is already in progress
#endif

	// increment the loopcounter (used for time stamping magnetic data)
	globals.loopcounter++;
    f6ba:	3601      	adds	r6, #1
    f6bc:	60e6      	str	r6, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:414

	return;
}
    f6be:	b006      	add	sp, #24
    f6c0:	bc1c      	pop	{r2, r3, r4}
    f6c2:	4690      	mov	r8, r2
    f6c4:	4699      	mov	r9, r3
    f6c6:	46a2      	mov	sl, r4
    f6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:385 (discriminator 1)
#if defined COMPUTE_3DOF_B_BASIC || defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
	// check no magnetic calibration is in progress
	if (!thisMagCal.iCalInProgress)
	{
		// do the first 4 element calibration immediately there are a minimum of MINMEASUREMENTS4CAL
		initiatemagcal = (!thisMagCal.iMagCalHasRun && (thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS4CAL));
    f6ca:	4b39      	ldr	r3, [pc, #228]	; (f7b0 <Fusion_Run+0x2d0>)
    f6cc:	4a39      	ldr	r2, [pc, #228]	; (f7b4 <Fusion_Run+0x2d4>)
    f6ce:	5ad3      	ldrh	r3, [r2, r3]
    f6d0:	4698      	mov	r8, r3
    f6d2:	b21b      	sxth	r3, r3
    f6d4:	2b27      	cmp	r3, #39	; 0x27
    f6d6:	ddd0      	ble.n	f67a <Fusion_Run+0x19a>
    f6d8:	2301      	movs	r3, #1
    f6da:	4699      	mov	r9, r3
    f6dc:	e7cd      	b.n	f67a <Fusion_Run+0x19a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:297 (discriminator 4)
	// magnetic DOF: remove hard and soft iron terms from Bp (uT) to get calibrated data Bc (uT)
	fInvertMagCal(&thisMag, &thisMagCal);

	// update magnetic buffer checking for i) absence of first all-zero magnetometer output and ii) no calibration in progress
	// an all zero magnetometer reading can occur after power-on at rare intervals but it simply won't be used in the buffer
	if (!((globals.loopcounter < 100) && (thisMag.iBpFast[X] == 0) && (thisMag.iBpFast[Y] == 0) && (thisMag.iBpFast[Z] == 0)) && !thisMagCal.iCalInProgress)
    f6de:	3248      	adds	r2, #72	; 0x48
    f6e0:	5eb2      	ldrsh	r2, [r6, r2]
    f6e2:	2a00      	cmp	r2, #0
    f6e4:	d100      	bne.n	f6e8 <Fusion_Run+0x208>
    f6e6:	e714      	b.n	f512 <Fusion_Run+0x32>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:297
    f6e8:	4a24      	ldr	r2, [pc, #144]	; (f77c <Fusion_Run+0x29c>)
    f6ea:	56aa      	ldrsb	r2, [r5, r2]
    f6ec:	2a00      	cmp	r2, #0
    f6ee:	d000      	beq.n	f6f2 <Fusion_Run+0x212>
    f6f0:	e70f      	b.n	f512 <Fusion_Run+0x32>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:300
	{
		// update the magnetometer measurement buffer integer magnetometer data (typically at 25Hz)
		iUpdateMagnetometerBuffer(&thisMagBuffer, &thisAccel, &thisMag, globals.loopcounter);
    f6f2:	4a23      	ldr	r2, [pc, #140]	; (f780 <Fusion_Run+0x2a0>)
    f6f4:	482f      	ldr	r0, [pc, #188]	; (f7b4 <Fusion_Run+0x2d4>)
    f6f6:	1c11      	adds	r1, r2, #0
    f6f8:	4691      	mov	r9, r2
    f6fa:	1c32      	adds	r2, r6, #0
    f6fc:	f7fb f84e 	bl	a79c <iUpdateMagnetometerBuffer>
    f700:	68e3      	ldr	r3, [r4, #12]
    f702:	e708      	b.n	f516 <Fusion_Run+0x36>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:394
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS7CAL) &&
				!(globals.loopcounter % INTERVAL4CAL));
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS7CAL) &&
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS10CAL) &&
				!(globals.loopcounter % INTERVAL7CAL));
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS10CAL) &&
    f704:	4643      	mov	r3, r8
    f706:	b21b      	sxth	r3, r3
    f708:	2b95      	cmp	r3, #149	; 0x95
    f70a:	dd05      	ble.n	f718 <Fusion_Run+0x238>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:395 (discriminator 1)
				!(globals.loopcounter % INTERVAL10CAL));
    f70c:	1c30      	adds	r0, r6, #0
    f70e:	492b      	ldr	r1, [pc, #172]	; (f7bc <Fusion_Run+0x2dc>)
    f710:	f7f1 f83e 	bl	790 <__aeabi_idivmod>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:394 (discriminator 1)
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS7CAL) &&
				!(globals.loopcounter % INTERVAL4CAL));
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS7CAL) &&
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS10CAL) &&
				!(globals.loopcounter % INTERVAL7CAL));
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS10CAL) &&
    f714:	2900      	cmp	r1, #0
    f716:	d0c8      	beq.n	f6aa <Fusion_Run+0x1ca>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:398 (discriminator 6)
				!(globals.loopcounter % INTERVAL10CAL));

		// initiate the magnetic calibration if any of the conditions are met
		if (initiatemagcal)
    f718:	464b      	mov	r3, r9
    f71a:	2b00      	cmp	r3, #0
    f71c:	d0cd      	beq.n	f6ba <Fusion_Run+0x1da>
    f71e:	e7c4      	b.n	f6aa <Fusion_Run+0x1ca>
    f720:	68e6      	ldr	r6, [r4, #12]
    f722:	e7ca      	b.n	f6ba <Fusion_Run+0x1da>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:375 (discriminator 1)
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q9))
	{
		thisSV_9DOF_GBY_KALMAN.systick = SYST_CVR & 0x00FFFFFF;
		fRun_9DOF_GBY_KALMAN(&thisSV_9DOF_GBY_KALMAN, &thisAccel, &thisMag, &thisGyro, &thisMagCal, THISCOORDSYSTEM, OVERSAMPLE_RATIO);
		thisSV_9DOF_GBY_KALMAN.systick -= SYST_CVR & 0x00FFFFFF;		
		if (thisSV_9DOF_GBY_KALMAN.systick < 0) thisSV_9DOF_GBY_KALMAN.systick += SYST_RVR;
    f724:	4642      	mov	r2, r8
    f726:	6852      	ldr	r2, [r2, #4]
    f728:	189b      	adds	r3, r3, r2
    f72a:	663b      	str	r3, [r7, #96]	; 0x60
    f72c:	e798      	b.n	f660 <Fusion_Run+0x180>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:319 (discriminator 1)
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q3))
	{
		thisSV_3DOF_G_BASIC.systick = SYST_CVR & 0x00FFFFFF;		
		fRun_3DOF_G_BASIC(&thisSV_3DOF_G_BASIC, &thisAccel, globals.loopcounter, THISCOORDSYSTEM);
		thisSV_3DOF_G_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
		if (thisSV_3DOF_G_BASIC.systick < 0) thisSV_3DOF_G_BASIC.systick += SYST_RVR;
    f72e:	4642      	mov	r2, r8
    f730:	6852      	ldr	r2, [r2, #4]
    f732:	189b      	adds	r3, r3, r2
    f734:	663b      	str	r3, [r7, #96]	; 0x60
    f736:	e719      	b.n	f56c <Fusion_Run+0x8c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:309 (discriminator 1)
	// 1DOF Pressure low pass filter algorithm
#if defined COMPUTE_1DOF_P_BASIC
	thisSV_1DOF_P_BASIC.systick = SYST_CVR & 0x00FFFFFF;
	fRun_1DOF_P_BASIC(&thisSV_1DOF_P_BASIC, &thisPressure, globals.loopcounter);
	thisSV_1DOF_P_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
	if (thisSV_1DOF_P_BASIC.systick < 0) thisSV_1DOF_P_BASIC.systick += SYST_RVR;	
    f738:	4642      	mov	r2, r8
    f73a:	6852      	ldr	r2, [r2, #4]
    f73c:	189b      	adds	r3, r3, r2
    f73e:	613b      	str	r3, [r7, #16]
    f740:	e6fe      	b.n	f540 <Fusion_Run+0x60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:364 (discriminator 1)
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q6AG))
	{
		thisSV_6DOF_GY_KALMAN.systick = SYST_CVR & 0x00FFFFFF;
		fRun_6DOF_GY_KALMAN(&thisSV_6DOF_GY_KALMAN, &thisAccel,  &thisGyro, THISCOORDSYSTEM, OVERSAMPLE_RATIO);
		thisSV_6DOF_GY_KALMAN.systick -= SYST_CVR & 0x00FFFFFF;
		if (thisSV_6DOF_GY_KALMAN.systick < 0) thisSV_6DOF_GY_KALMAN.systick += SYST_RVR;
    f742:	4642      	mov	r2, r8
    f744:	6852      	ldr	r2, [r2, #4]
    f746:	189b      	adds	r3, r3, r2
    f748:	663b      	str	r3, [r7, #96]	; 0x60
    f74a:	e76f      	b.n	f62c <Fusion_Run+0x14c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:353 (discriminator 1)
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q6MA))
	{
		thisSV_6DOF_GB_BASIC.systick = SYST_CVR & 0x00FFFFFF;
		fRun_6DOF_GB_BASIC(&thisSV_6DOF_GB_BASIC, &thisMag, &thisAccel, globals.loopcounter, THISCOORDSYSTEM);
		thisSV_6DOF_GB_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
		if (thisSV_6DOF_GB_BASIC.systick < 0) thisSV_6DOF_GB_BASIC.systick += SYST_RVR;
    f74c:	4642      	mov	r2, r8
    f74e:	6852      	ldr	r2, [r2, #4]
    f750:	189b      	adds	r3, r3, r2
    f752:	663b      	str	r3, [r7, #96]	; 0x60
    f754:	e752      	b.n	f5fc <Fusion_Run+0x11c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:342 (discriminator 1)
	{
		thisSV_3DOF_Y_BASIC.systick = SYST_CVR & 0x00FFFFFF;
		fRun_3DOF_Y_BASIC(&thisSV_3DOF_Y_BASIC, &thisGyro, globals.loopcounter, THISCOORDSYSTEM,
				OVERSAMPLE_RATIO);
		thisSV_3DOF_Y_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
		if (thisSV_3DOF_Y_BASIC.systick < 0) thisSV_3DOF_Y_BASIC.systick += SYST_RVR;
    f756:	4642      	mov	r2, r8
    f758:	6852      	ldr	r2, [r2, #4]
    f75a:	189b      	adds	r3, r3, r2
    f75c:	663b      	str	r3, [r7, #96]	; 0x60
    f75e:	e735      	b.n	f5cc <Fusion_Run+0xec>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:330 (discriminator 1)
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q3M))
	{
		thisSV_3DOF_B_BASIC.systick = SYST_CVR & 0x00FFFFFF;
		fRun_3DOF_B_BASIC(&thisSV_3DOF_B_BASIC, &thisMag, globals.loopcounter, THISCOORDSYSTEM);
		thisSV_3DOF_B_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
		if (thisSV_3DOF_B_BASIC.systick < 0) thisSV_3DOF_B_BASIC.systick += SYST_RVR;
    f760:	4642      	mov	r2, r8
    f762:	6852      	ldr	r2, [r2, #4]
    f764:	189b      	adds	r3, r3, r2
    f766:	663b      	str	r3, [r7, #96]	; 0x60
    f768:	e716      	b.n	f598 <Fusion_Run+0xb8>
    f76a:	2301      	movs	r3, #1
    f76c:	4699      	mov	r9, r3
    f76e:	e793      	b.n	f698 <Fusion_Run+0x1b8>
    f770:	200024d4 	.word	0x200024d4
    f774:	200013a0 	.word	0x200013a0
    f778:	200005dc 	.word	0x200005dc
    f77c:	00000414 	.word	0x00000414
    f780:	20000604 	.word	0x20000604
    f784:	e000e010 	.word	0xe000e010
    f788:	200005ec 	.word	0x200005ec
    f78c:	200012d8 	.word	0x200012d8
    f790:	20001234 	.word	0x20001234
    f794:	20000638 	.word	0x20000638
    f798:	2000252c 	.word	0x2000252c
    f79c:	200017b8 	.word	0x200017b8
    f7a0:	200012f4 	.word	0x200012f4
    f7a4:	20002044 	.word	0x20002044
    f7a8:	2000180c 	.word	0x2000180c
    f7ac:	00000415 	.word	0x00000415
    f7b0:	00000b56 	.word	0x00000b56
    f7b4:	200006dc 	.word	0x200006dc
    f7b8:	20000560 	.word	0x20000560
    f7bc:	000002ee 	.word	0x000002ee

0000f7c0 <MagCal_Run>:
MagCal_Run():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:418
	return;
}

// function runs the magnetic calibration
void MagCal_Run(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer)
{
    f7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f7c2:	4647      	mov	r7, r8
    f7c4:	b480      	push	{r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:423
	int8 i, j;			// loop counters
	int8 isolver;		// magnetic solver used

	// 4 element calibration case
	if (pthisMagBuffer->iMagBufferCount < MINMEASUREMENTS7CAL)
    f7c6:	4b44      	ldr	r3, [pc, #272]	; (f8d8 <MagCal_Run+0x118>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:418
	return;
}

// function runs the magnetic calibration
void MagCal_Run(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer)
{
    f7c8:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:423
	int8 i, j;			// loop counters
	int8 isolver;		// magnetic solver used

	// 4 element calibration case
	if (pthisMagBuffer->iMagBufferCount < MINMEASUREMENTS7CAL)
    f7ca:	5ecb      	ldrsh	r3, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:418
	return;
}

// function runs the magnetic calibration
void MagCal_Run(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer)
{
    f7cc:	1c0d      	adds	r5, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:423
	int8 i, j;			// loop counters
	int8 isolver;		// magnetic solver used

	// 4 element calibration case
	if (pthisMagBuffer->iMagBufferCount < MINMEASUREMENTS7CAL)
    f7ce:	2b63      	cmp	r3, #99	; 0x63
    f7d0:	dc59      	bgt.n	f886 <MagCal_Run+0xc6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:426
	{
		// age the existing fit error to avoid one good calibration locking out future updates
		if (pthisMagCal->iValidMagCal)
    f7d2:	4b42      	ldr	r3, [pc, #264]	; (f8dc <MagCal_Run+0x11c>)
    f7d4:	56c3      	ldrsb	r3, [r0, r3]
    f7d6:	2b00      	cmp	r3, #0
    f7d8:	d167      	bne.n	f8aa <MagCal_Run+0xea>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:432
		{
			pthisMagCal->fFitErrorpc *= (1.0F + (float) INTERVAL4CAL * (float) OVERSAMPLE_RATIO / ((float) SENSORFS * FITERRORAGINGSECS));	
		}
		// call the 4 element matrix inversion calibration
		isolver = 4;
		fUpdateCalibration4INV(pthisMagCal, pthisMagBuffer, &thisMag);
    f7da:	1c20      	adds	r0, r4, #0
    f7dc:	1c29      	adds	r1, r5, #0
    f7de:	4a40      	ldr	r2, [pc, #256]	; (f8e0 <MagCal_Run+0x120>)
    f7e0:	f7fb fae4 	bl	adac <fUpdateCalibration4INV>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:431
		if (pthisMagCal->iValidMagCal)
		{
			pthisMagCal->fFitErrorpc *= (1.0F + (float) INTERVAL4CAL * (float) OVERSAMPLE_RATIO / ((float) SENSORFS * FITERRORAGINGSECS));	
		}
		// call the 4 element matrix inversion calibration
		isolver = 4;
    f7e4:	2604      	movs	r6, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:460
		isolver = 10;
		fUpdateCalibration10EIG(pthisMagCal, pthisMagBuffer, &thisMag);
	}

	// the trial geomagnetic field must be in range (earth is 22uT to 67uT)
	if ((pthisMagCal->ftrB >= MINBFITUT) && (pthisMagCal->ftrB <= MAXBFITUT))		
    f7e6:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
    f7e8:	493e      	ldr	r1, [pc, #248]	; (f8e4 <MagCal_Run+0x124>)
    f7ea:	1c28      	adds	r0, r5, #0
    f7ec:	f7f1 f84a 	bl	884 <__aeabi_fcmpge>
    f7f0:	2800      	cmp	r0, #0
    f7f2:	d042      	beq.n	f87a <MagCal_Run+0xba>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:460 (discriminator 1)
    f7f4:	1c28      	adds	r0, r5, #0
    f7f6:	493c      	ldr	r1, [pc, #240]	; (f8e8 <MagCal_Run+0x128>)
    f7f8:	f7f1 f830 	bl	85c <__aeabi_fcmple>
    f7fc:	2800      	cmp	r0, #0
    f7fe:	d03c      	beq.n	f87a <MagCal_Run+0xba>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:464
	{
		// always accept the calibration if i) no previous calibration exists ii) the calibration fit is reduced or
		// an improved solver was used giving a good trial calibration (4% or under)
		if ((pthisMagCal->iValidMagCal == 0) ||
    f800:	4b36      	ldr	r3, [pc, #216]	; (f8dc <MagCal_Run+0x11c>)
    f802:	5ce7      	ldrb	r7, [r4, r3]
    f804:	6f23      	ldr	r3, [r4, #112]	; 0x70
    f806:	4698      	mov	r8, r3
    f808:	2f00      	cmp	r7, #0
    f80a:	d00f      	beq.n	f82c <MagCal_Run+0x6c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:464 (discriminator 1)
    f80c:	1c18      	adds	r0, r3, #0
    f80e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    f810:	f7f1 f824 	bl	85c <__aeabi_fcmple>
    f814:	2800      	cmp	r0, #0
    f816:	d109      	bne.n	f82c <MagCal_Run+0x6c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:465
				(pthisMagCal->ftrFitErrorpc <= pthisMagCal->fFitErrorpc) ||
    f818:	b27f      	sxtb	r7, r7
    f81a:	42be      	cmp	r6, r7
    f81c:	dd2d      	ble.n	f87a <MagCal_Run+0xba>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:466
				((isolver > pthisMagCal->iValidMagCal) && (pthisMagCal->ftrFitErrorpc <= 4.0F)))
    f81e:	2181      	movs	r1, #129	; 0x81
    f820:	4640      	mov	r0, r8
    f822:	05c9      	lsls	r1, r1, #23
    f824:	f7f1 f81a 	bl	85c <__aeabi_fcmple>
    f828:	2800      	cmp	r0, #0
    f82a:	d026      	beq.n	f87a <MagCal_Run+0xba>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:469
		{
			// accept the new calibration solution
			pthisMagCal->iValidMagCal = isolver;
    f82c:	4b2b      	ldr	r3, [pc, #172]	; (f8dc <MagCal_Run+0x11c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:472
			pthisMagCal->fFitErrorpc = pthisMagCal->ftrFitErrorpc;
			pthisMagCal->fB = pthisMagCal->ftrB;
			pthisMagCal->fFourBsq = 4.0F * pthisMagCal->ftrB * pthisMagCal->ftrB;
    f82e:	2181      	movs	r1, #129	; 0x81
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:469
		if ((pthisMagCal->iValidMagCal == 0) ||
				(pthisMagCal->ftrFitErrorpc <= pthisMagCal->fFitErrorpc) ||
				((isolver > pthisMagCal->iValidMagCal) && (pthisMagCal->ftrFitErrorpc <= 4.0F)))
		{
			// accept the new calibration solution
			pthisMagCal->iValidMagCal = isolver;
    f830:	54e6      	strb	r6, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:470
			pthisMagCal->fFitErrorpc = pthisMagCal->ftrFitErrorpc;
    f832:	4643      	mov	r3, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:472
			pthisMagCal->fB = pthisMagCal->ftrB;
			pthisMagCal->fFourBsq = 4.0F * pthisMagCal->ftrB * pthisMagCal->ftrB;
    f834:	05c9      	lsls	r1, r1, #23
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:470
				(pthisMagCal->ftrFitErrorpc <= pthisMagCal->fFitErrorpc) ||
				((isolver > pthisMagCal->iValidMagCal) && (pthisMagCal->ftrFitErrorpc <= 4.0F)))
		{
			// accept the new calibration solution
			pthisMagCal->iValidMagCal = isolver;
			pthisMagCal->fFitErrorpc = pthisMagCal->ftrFitErrorpc;
    f836:	63a3      	str	r3, [r4, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:471
			pthisMagCal->fB = pthisMagCal->ftrB;
    f838:	6325      	str	r5, [r4, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:472
			pthisMagCal->fFourBsq = 4.0F * pthisMagCal->ftrB * pthisMagCal->ftrB;
    f83a:	1c28      	adds	r0, r5, #0
    f83c:	f7f1 fb9a 	bl	f74 <__aeabi_fmul>
    f840:	1c01      	adds	r1, r0, #0
    f842:	1c28      	adds	r0, r5, #0
    f844:	f7f1 fb96 	bl	f74 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:475
			for (i = X; i <= Z; i++)
			{
				pthisMagCal->fV[i] = pthisMagCal->ftrV[i];
    f848:	6be3      	ldr	r3, [r4, #60]	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:472
		{
			// accept the new calibration solution
			pthisMagCal->iValidMagCal = isolver;
			pthisMagCal->fFitErrorpc = pthisMagCal->ftrFitErrorpc;
			pthisMagCal->fB = pthisMagCal->ftrB;
			pthisMagCal->fFourBsq = 4.0F * pthisMagCal->ftrB * pthisMagCal->ftrB;
    f84a:	6360      	str	r0, [r4, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:475
			for (i = X; i <= Z; i++)
			{
				pthisMagCal->fV[i] = pthisMagCal->ftrV[i];
    f84c:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:478
				for (j = X; j <= Z; j++)
				{
					pthisMagCal->finvW[i][j] = pthisMagCal->ftrinvW[i][j];
    f84e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    f850:	60e3      	str	r3, [r4, #12]
    f852:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    f854:	6123      	str	r3, [r4, #16]
    f856:	6d23      	ldr	r3, [r4, #80]	; 0x50
    f858:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:475
			pthisMagCal->fFitErrorpc = pthisMagCal->ftrFitErrorpc;
			pthisMagCal->fB = pthisMagCal->ftrB;
			pthisMagCal->fFourBsq = 4.0F * pthisMagCal->ftrB * pthisMagCal->ftrB;
			for (i = X; i <= Z; i++)
			{
				pthisMagCal->fV[i] = pthisMagCal->ftrV[i];
    f85a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    f85c:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:478
				for (j = X; j <= Z; j++)
				{
					pthisMagCal->finvW[i][j] = pthisMagCal->ftrinvW[i][j];
    f85e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    f860:	61a3      	str	r3, [r4, #24]
    f862:	6da3      	ldr	r3, [r4, #88]	; 0x58
    f864:	61e3      	str	r3, [r4, #28]
    f866:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    f868:	6223      	str	r3, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:475
			pthisMagCal->fFitErrorpc = pthisMagCal->ftrFitErrorpc;
			pthisMagCal->fB = pthisMagCal->ftrB;
			pthisMagCal->fFourBsq = 4.0F * pthisMagCal->ftrB * pthisMagCal->ftrB;
			for (i = X; i <= Z; i++)
			{
				pthisMagCal->fV[i] = pthisMagCal->ftrV[i];
    f86a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    f86c:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:478
				for (j = X; j <= Z; j++)
				{
					pthisMagCal->finvW[i][j] = pthisMagCal->ftrinvW[i][j];
    f86e:	6e23      	ldr	r3, [r4, #96]	; 0x60
    f870:	6263      	str	r3, [r4, #36]	; 0x24
    f872:	6e63      	ldr	r3, [r4, #100]	; 0x64
    f874:	62a3      	str	r3, [r4, #40]	; 0x28
    f876:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    f878:	62e3      	str	r3, [r4, #44]	; 0x2c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:485
			}
		} // end of test to accept the new calibration 
	} // end of test for geomagenetic field strength in range

	// reset the calibration in progress flag to allow writing to the magnetic buffer
	pthisMagCal->iCalInProgress = 0;
    f87a:	2200      	movs	r2, #0
    f87c:	4b1b      	ldr	r3, [pc, #108]	; (f8ec <MagCal_Run+0x12c>)
    f87e:	54e2      	strb	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:488

	return;
}
    f880:	bc04      	pop	{r2}
    f882:	4690      	mov	r8, r2
    f884:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:435
		// call the 4 element matrix inversion calibration
		isolver = 4;
		fUpdateCalibration4INV(pthisMagCal, pthisMagBuffer, &thisMag);
	}
	// 7 element calibration case
	else if (pthisMagBuffer->iMagBufferCount < MINMEASUREMENTS10CAL)
    f886:	2b95      	cmp	r3, #149	; 0x95
    f888:	dc15      	bgt.n	f8b6 <MagCal_Run+0xf6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:438
	{
		// age the existing fit error to avoid one good calibration locking out future updates
		if (pthisMagCal->iValidMagCal)
    f88a:	4b14      	ldr	r3, [pc, #80]	; (f8dc <MagCal_Run+0x11c>)
    f88c:	56c3      	ldrsb	r3, [r0, r3]
    f88e:	2b00      	cmp	r3, #0
    f890:	d004      	beq.n	f89c <MagCal_Run+0xdc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:440
		{
			pthisMagCal->fFitErrorpc *= (1.0F + (float) INTERVAL7CAL * (float) OVERSAMPLE_RATIO / ((float) SENSORFS * FITERRORAGINGSECS));	
    f892:	6b80      	ldr	r0, [r0, #56]	; 0x38
    f894:	4916      	ldr	r1, [pc, #88]	; (f8f0 <MagCal_Run+0x130>)
    f896:	f7f1 fb6d 	bl	f74 <__aeabi_fmul>
    f89a:	63a0      	str	r0, [r4, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:444
		}
		// call the 7 element eigenpair calibration
		isolver = 7;
		fUpdateCalibration7EIG(pthisMagCal, pthisMagBuffer, &thisMag);
    f89c:	1c20      	adds	r0, r4, #0
    f89e:	1c29      	adds	r1, r5, #0
    f8a0:	4a0f      	ldr	r2, [pc, #60]	; (f8e0 <MagCal_Run+0x120>)
    f8a2:	f7fb fe9d 	bl	b5e0 <fUpdateCalibration7EIG>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:443
		if (pthisMagCal->iValidMagCal)
		{
			pthisMagCal->fFitErrorpc *= (1.0F + (float) INTERVAL7CAL * (float) OVERSAMPLE_RATIO / ((float) SENSORFS * FITERRORAGINGSECS));	
		}
		// call the 7 element eigenpair calibration
		isolver = 7;
    f8a6:	2607      	movs	r6, #7
    f8a8:	e79d      	b.n	f7e6 <MagCal_Run+0x26>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:428
	if (pthisMagBuffer->iMagBufferCount < MINMEASUREMENTS7CAL)
	{
		// age the existing fit error to avoid one good calibration locking out future updates
		if (pthisMagCal->iValidMagCal)
		{
			pthisMagCal->fFitErrorpc *= (1.0F + (float) INTERVAL4CAL * (float) OVERSAMPLE_RATIO / ((float) SENSORFS * FITERRORAGINGSECS));	
    f8aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
    f8ac:	4911      	ldr	r1, [pc, #68]	; (f8f4 <MagCal_Run+0x134>)
    f8ae:	f7f1 fb61 	bl	f74 <__aeabi_fmul>
    f8b2:	63a0      	str	r0, [r4, #56]	; 0x38
    f8b4:	e791      	b.n	f7da <MagCal_Run+0x1a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:450
	}
	// 10 element calibration case
	else
	{
		// age the existing fit error to avoid one good calibration locking out future updates
		if (pthisMagCal->iValidMagCal)
    f8b6:	4b09      	ldr	r3, [pc, #36]	; (f8dc <MagCal_Run+0x11c>)
    f8b8:	56c3      	ldrsb	r3, [r0, r3]
    f8ba:	2b00      	cmp	r3, #0
    f8bc:	d004      	beq.n	f8c8 <MagCal_Run+0x108>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:452
		{
			pthisMagCal->fFitErrorpc *= (1.0F + (float) INTERVAL10CAL * (float) OVERSAMPLE_RATIO / ((float) SENSORFS * FITERRORAGINGSECS));	
    f8be:	6b80      	ldr	r0, [r0, #56]	; 0x38
    f8c0:	490d      	ldr	r1, [pc, #52]	; (f8f8 <MagCal_Run+0x138>)
    f8c2:	f7f1 fb57 	bl	f74 <__aeabi_fmul>
    f8c6:	63a0      	str	r0, [r4, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:456
		}
		// call the 10 element eigenpair calibration
		isolver = 10;
		fUpdateCalibration10EIG(pthisMagCal, pthisMagBuffer, &thisMag);
    f8c8:	1c20      	adds	r0, r4, #0
    f8ca:	1c29      	adds	r1, r5, #0
    f8cc:	4a04      	ldr	r2, [pc, #16]	; (f8e0 <MagCal_Run+0x120>)
    f8ce:	f7fc f98b 	bl	bbe8 <fUpdateCalibration10EIG>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:455
		if (pthisMagCal->iValidMagCal)
		{
			pthisMagCal->fFitErrorpc *= (1.0F + (float) INTERVAL10CAL * (float) OVERSAMPLE_RATIO / ((float) SENSORFS * FITERRORAGINGSECS));	
		}
		// call the 10 element eigenpair calibration
		isolver = 10;
    f8d2:	260a      	movs	r6, #10
    f8d4:	e787      	b.n	f7e6 <MagCal_Run+0x26>
    f8d6:	46c0      	nop			; (mov r8, r8)
    f8d8:	00000b56 	.word	0x00000b56
    f8dc:	00000416 	.word	0x00000416
    f8e0:	200024d4 	.word	0x200024d4
    f8e4:	41200000 	.word	0x41200000
    f8e8:	42b40000 	.word	0x42b40000
    f8ec:	00000414 	.word	0x00000414
    f8f0:	3f802d83 	.word	0x3f802d83
    f8f4:	3f800da7 	.word	0x3f800da7
    f8f8:	3f808889 	.word	0x3f808889

0000f8fc <on_protocol_decoded_frame>:
on_protocol_decoded_frame():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:181
		}
	}
}

void on_protocol_decoded_frame(uint8_t* data, uint16_t datasize)
{
    f8fc:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:182
	distantio_decode(data,datasize);
    f8fe:	f002 fc23 	bl	12148 <distantio_decode>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:183
}
    f902:	bd08      	pop	{r3, pc}

0000f904 <on_protocol_encoded_frame>:
on_protocol_encoded_frame():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:186

void on_protocol_encoded_frame(uint8_t* data, uint16_t datasize)
{
    f904:	b508      	push	{r3, lr}
    f906:	1c03      	adds	r3, r0, #0
    f908:	1c0a      	adds	r2, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:187
	sendBytes(deviceData.handle,data,datasize);
    f90a:	4903      	ldr	r1, [pc, #12]	; (f918 <on_protocol_encoded_frame+0x14>)
    f90c:	6808      	ldr	r0, [r1, #0]
    f90e:	1c19      	adds	r1, r3, #0
    f910:	f000 f8d2 	bl	fab8 <sendBytes>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:188
}
    f914:	bd08      	pop	{r3, pc}
    f916:	46c0      	nop			; (mov r8, r8)
    f918:	1fffe0ac 	.word	0x1fffe0ac

0000f91c <UserStartup>:
UserStartup():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:72
  heap_end += delta;
  return (void *) prev_heap_end;
}

void UserStartup(void)
{
    f91c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f91e:	b083      	sub	sp, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:74
	// Init serial
	RNG1_Init();
    f920:	f002 f8e6 	bl	11af0 <RNG1_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:76

	deviceData.handle = UART_Init(&deviceData);
    f924:	4c26      	ldr	r4, [pc, #152]	; (f9c0 <UserStartup+0xa4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:77
	deviceData.rxChar = '\0';
    f926:	2500      	movs	r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:76
void UserStartup(void)
{
	// Init serial
	RNG1_Init();

	deviceData.handle = UART_Init(&deviceData);
    f928:	1c20      	adds	r0, r4, #0
    f92a:	f002 fa21 	bl	11d70 <UART_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:78
	deviceData.rxChar = '\0';
	deviceData.rxCallback = RNG1_Put;
    f92e:	4b25      	ldr	r3, [pc, #148]	; (f9c4 <UserStartup+0xa8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:81

	// Configure receive function
	UART_ReceiveBlock(deviceData.handle, (LDD_TData *)&(deviceData.rxChar), sizeof(deviceData.rxChar));
    f930:	2201      	movs	r2, #1
    f932:	1d21      	adds	r1, r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:78
	// Init serial
	RNG1_Init();

	deviceData.handle = UART_Init(&deviceData);
	deviceData.rxChar = '\0';
	deviceData.rxCallback = RNG1_Put;
    f934:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:77
{
	// Init serial
	RNG1_Init();

	deviceData.handle = UART_Init(&deviceData);
	deviceData.rxChar = '\0';
    f936:	7125      	strb	r5, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:76
void UserStartup(void)
{
	// Init serial
	RNG1_Init();

	deviceData.handle = UART_Init(&deviceData);
    f938:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:81
	deviceData.rxChar = '\0';
	deviceData.rxCallback = RNG1_Put;

	// Configure receive function
	UART_ReceiveBlock(deviceData.handle, (LDD_TData *)&(deviceData.rxChar), sizeof(deviceData.rxChar));
    f93a:	f002 fa9d 	bl	11e78 <UART_ReceiveBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:84

	// Init serial protocol and distant io
	init_protocol(on_protocol_encoded_frame,on_protocol_decoded_frame);
    f93e:	4922      	ldr	r1, [pc, #136]	; (f9c8 <UserStartup+0xac>)
    f940:	4822      	ldr	r0, [pc, #136]	; (f9cc <UserStartup+0xb0>)
    f942:	f000 f8c3 	bl	facc <init_protocol>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:85
	init_distantio();
    f946:	f002 fb67 	bl	12018 <init_distantio>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:86
	counter = 0;
    f94a:	4b21      	ldr	r3, [pc, #132]	; (f9d0 <UserStartup+0xb4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:89

	// Register variables
	start_group("ACC");
    f94c:	4821      	ldr	r0, [pc, #132]	; (f9d4 <UserStartup+0xb8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:86
	UART_ReceiveBlock(deviceData.handle, (LDD_TData *)&(deviceData.rxChar), sizeof(deviceData.rxChar));

	// Init serial protocol and distant io
	init_protocol(on_protocol_encoded_frame,on_protocol_decoded_frame);
	init_distantio();
	counter = 0;
    f94e:	601d      	str	r5, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:89

	// Register variables
	start_group("ACC");
    f950:	f002 fbe4 	bl	1211c <start_group>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:90
	register_var((void*)&acc_data[0], sizeof(acc_data[0]), dio_type_FLOAT, 0, "x");
    f954:	4c20      	ldr	r4, [pc, #128]	; (f9d8 <UserStartup+0xbc>)
    f956:	4f21      	ldr	r7, [pc, #132]	; (f9dc <UserStartup+0xc0>)
    f958:	1c20      	adds	r0, r4, #0
    f95a:	9700      	str	r7, [sp, #0]
    f95c:	2104      	movs	r1, #4
    f95e:	2200      	movs	r2, #0
    f960:	2300      	movs	r3, #0
    f962:	f002 fba5 	bl	120b0 <register_var>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:91
	register_var((void*)&acc_data[1], sizeof(acc_data[1]), dio_type_FLOAT, 0, "y");
    f966:	4e1e      	ldr	r6, [pc, #120]	; (f9e0 <UserStartup+0xc4>)
    f968:	1d20      	adds	r0, r4, #4
    f96a:	9600      	str	r6, [sp, #0]
    f96c:	2104      	movs	r1, #4
    f96e:	2200      	movs	r2, #0
    f970:	2300      	movs	r3, #0
    f972:	f002 fb9d 	bl	120b0 <register_var>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:92
	register_var((void*)&acc_data[2], sizeof(acc_data[2]), dio_type_FLOAT, 0, "z");
    f976:	1c20      	adds	r0, r4, #0
    f978:	4d1a      	ldr	r5, [pc, #104]	; (f9e4 <UserStartup+0xc8>)
    f97a:	2104      	movs	r1, #4
    f97c:	2200      	movs	r2, #0
    f97e:	2300      	movs	r3, #0
    f980:	9500      	str	r5, [sp, #0]
    f982:	3008      	adds	r0, #8
    f984:	f002 fb94 	bl	120b0 <register_var>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:93
	start_group("GYRO");
    f988:	4817      	ldr	r0, [pc, #92]	; (f9e8 <UserStartup+0xcc>)
    f98a:	f002 fbc7 	bl	1211c <start_group>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:94
	register_var((void*)&gyro_data[0], sizeof(gyro_data[0]), dio_type_FLOAT, 0, "x");
    f98e:	4c17      	ldr	r4, [pc, #92]	; (f9ec <UserStartup+0xd0>)
    f990:	9700      	str	r7, [sp, #0]
    f992:	1c20      	adds	r0, r4, #0
    f994:	2104      	movs	r1, #4
    f996:	2200      	movs	r2, #0
    f998:	2300      	movs	r3, #0
    f99a:	f002 fb89 	bl	120b0 <register_var>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:95
	register_var((void*)&gyro_data[1], sizeof(gyro_data[1]), dio_type_FLOAT, 0, "y");
    f99e:	1d20      	adds	r0, r4, #4
    f9a0:	9600      	str	r6, [sp, #0]
    f9a2:	2104      	movs	r1, #4
    f9a4:	2200      	movs	r2, #0
    f9a6:	2300      	movs	r3, #0
    f9a8:	f002 fb82 	bl	120b0 <register_var>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:96
	register_var((void*)&gyro_data[2], sizeof(gyro_data[2]), dio_type_FLOAT, 0, "z");
    f9ac:	1c20      	adds	r0, r4, #0
    f9ae:	9500      	str	r5, [sp, #0]
    f9b0:	2104      	movs	r1, #4
    f9b2:	2200      	movs	r2, #0
    f9b4:	2300      	movs	r3, #0
    f9b6:	3008      	adds	r0, #8
    f9b8:	f002 fb7a 	bl	120b0 <register_var>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:99


}
    f9bc:	b003      	add	sp, #12
    f9be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f9c0:	1fffe0ac 	.word	0x1fffe0ac
    f9c4:	000119d5 	.word	0x000119d5
    f9c8:	0000f8fd 	.word	0x0000f8fd
    f9cc:	0000f905 	.word	0x0000f905
    f9d0:	1fffe0dc 	.word	0x1fffe0dc
    f9d4:	000146bc 	.word	0x000146bc
    f9d8:	1fffe0d0 	.word	0x1fffe0d0
    f9dc:	000146c0 	.word	0x000146c0
    f9e0:	000146c4 	.word	0x000146c4
    f9e4:	000146c8 	.word	0x000146c8
    f9e8:	000146cc 	.word	0x000146cc
    f9ec:	1fffe0c0 	.word	0x1fffe0c0

0000f9f0 <UserHighFrequencyTaskInit>:
UserHighFrequencyTaskInit():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:108
	// User code to be executed ONE TIME the first time the high frequency task is run.
	//
	// PUT YOUR CODE HERE
	//
	return;
}
    f9f0:	4770      	bx	lr
    f9f2:	46c0      	nop			; (mov r8, r8)

0000f9f4 <UserMediumFrequencyTaskInit>:
UserMediumFrequencyTaskInit():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:117
	// User code to be executed ONE TIME the first time the medium frequency task is run
	//
	// PUT YOUR CODE HERE
	//
	return;
}
    f9f4:	4770      	bx	lr
    f9f6:	46c0      	nop			; (mov r8, r8)

0000f9f8 <UserHighFrequencyTaskRun>:
UserHighFrequencyTaskRun():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:130
	// The high frequency task also has highest priority.
	//
	// PUT YOUR CODE HERE
	//
	return;
}
    f9f8:	4770      	bx	lr
    f9fa:	46c0      	nop			; (mov r8, r8)

0000f9fc <UserMediumFrequencyTaskRun>:
UserMediumFrequencyTaskRun():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:133

void UserMediumFrequencyTaskRun(void)
{
    f9fc:	b530      	push	{r4, r5, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:138
	static uint32_t alive_counter = 0;
	static uint32_t send_variables_counter = 0;

	// Send alive signal
	if(alive_counter >= 15)
    f9fe:	4c25      	ldr	r4, [pc, #148]	; (fa94 <UserMediumFrequencyTaskRun+0x98>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:133
	//
	return;
}

void UserMediumFrequencyTaskRun(void)
{
    fa00:	b083      	sub	sp, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:138
	static uint32_t alive_counter = 0;
	static uint32_t send_variables_counter = 0;

	// Send alive signal
	if(alive_counter >= 15)
    fa02:	6823      	ldr	r3, [r4, #0]
    fa04:	2b0e      	cmp	r3, #14
    fa06:	d83c      	bhi.n	fa82 <UserMediumFrequencyTaskRun+0x86>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:145
		counter++;
		send_alive();
		alive_counter = 0;
	}
	else
		alive_counter++;
    fa08:	3301      	adds	r3, #1
    fa0a:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:148


	acc_data[0] = thisAccel.fGp[0];
    fa0c:	4a22      	ldr	r2, [pc, #136]	; (fa98 <UserMediumFrequencyTaskRun+0x9c>)
    fa0e:	4b23      	ldr	r3, [pc, #140]	; (fa9c <UserMediumFrequencyTaskRun+0xa0>)
    fa10:	6991      	ldr	r1, [r2, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:152
	acc_data[1] = thisAccel.fGp[1];
	acc_data[2] = thisAccel.fGp[2];

	gyro_data[0] = thisGyro.iYp[0];
    fa12:	4d23      	ldr	r5, [pc, #140]	; (faa0 <UserMediumFrequencyTaskRun+0xa4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:148
	}
	else
		alive_counter++;


	acc_data[0] = thisAccel.fGp[0];
    fa14:	6019      	str	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:149
	acc_data[1] = thisAccel.fGp[1];
    fa16:	69d1      	ldr	r1, [r2, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:150
	acc_data[2] = thisAccel.fGp[2];
    fa18:	6a12      	ldr	r2, [r2, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:149
	else
		alive_counter++;


	acc_data[0] = thisAccel.fGp[0];
	acc_data[1] = thisAccel.fGp[1];
    fa1a:	6059      	str	r1, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:150
	acc_data[2] = thisAccel.fGp[2];
    fa1c:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:152

	gyro_data[0] = thisGyro.iYp[0];
    fa1e:	234c      	movs	r3, #76	; 0x4c
    fa20:	5ee8      	ldrsh	r0, [r5, r3]
    fa22:	f7f1 fd77 	bl	1514 <__aeabi_i2f>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:153
	gyro_data[1] = thisGyro.iYp[1];
    fa26:	234e      	movs	r3, #78	; 0x4e
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:152

	acc_data[0] = thisAccel.fGp[0];
	acc_data[1] = thisAccel.fGp[1];
	acc_data[2] = thisAccel.fGp[2];

	gyro_data[0] = thisGyro.iYp[0];
    fa28:	4c1e      	ldr	r4, [pc, #120]	; (faa4 <UserMediumFrequencyTaskRun+0xa8>)
    fa2a:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:153
	gyro_data[1] = thisGyro.iYp[1];
    fa2c:	5ee8      	ldrsh	r0, [r5, r3]
    fa2e:	f7f1 fd71 	bl	1514 <__aeabi_i2f>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:154
	gyro_data[2] = thisGyro.iYp[2];
    fa32:	2350      	movs	r3, #80	; 0x50
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:153
	acc_data[0] = thisAccel.fGp[0];
	acc_data[1] = thisAccel.fGp[1];
	acc_data[2] = thisAccel.fGp[2];

	gyro_data[0] = thisGyro.iYp[0];
	gyro_data[1] = thisGyro.iYp[1];
    fa34:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:154
	gyro_data[2] = thisGyro.iYp[2];
    fa36:	5ee8      	ldrsh	r0, [r5, r3]
    fa38:	f7f1 fd6c 	bl	1514 <__aeabi_i2f>
    fa3c:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:156

	send_variables();
    fa3e:	f002 fd0d 	bl	1245c <send_variables>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:159

	// Send variables
	if(send_variables_counter >= 5)
    fa42:	4c19      	ldr	r4, [pc, #100]	; (faa8 <UserMediumFrequencyTaskRun+0xac>)
    fa44:	6823      	ldr	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:165
	{
		counter_float += 0.3f;
		send_variables_counter = 0;
	}
	else
		send_variables_counter++;
    fa46:	1c5a      	adds	r2, r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:159
	gyro_data[2] = thisGyro.iYp[2];

	send_variables();

	// Send variables
	if(send_variables_counter >= 5)
    fa48:	2b04      	cmp	r3, #4
    fa4a:	d906      	bls.n	fa5a <UserMediumFrequencyTaskRun+0x5e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:161
	{
		counter_float += 0.3f;
    fa4c:	4d17      	ldr	r5, [pc, #92]	; (faac <UserMediumFrequencyTaskRun+0xb0>)
    fa4e:	4918      	ldr	r1, [pc, #96]	; (fab0 <UserMediumFrequencyTaskRun+0xb4>)
    fa50:	6828      	ldr	r0, [r5, #0]
    fa52:	f7f0 ff21 	bl	898 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:162
		send_variables_counter = 0;
    fa56:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:161
	send_variables();

	// Send variables
	if(send_variables_counter >= 5)
	{
		counter_float += 0.3f;
    fa58:	6028      	str	r0, [r5, #0]
    fa5a:	6022      	str	r2, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:169
	else
		send_variables_counter++;


	// Process RX data
	if(RNG1_NofFreeElements() > 0)
    fa5c:	f002 f840 	bl	11ae0 <RNG1_NofFreeElements>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:174
	{
		while (RNG1_NofElements()!=0)
		{
		  unsigned char ch;
		  RNG1_Get(&ch);
    fa60:	466b      	mov	r3, sp
    fa62:	1ddc      	adds	r4, r3, #7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:169
	else
		send_variables_counter++;


	// Process RX data
	if(RNG1_NofFreeElements() > 0)
    fa64:	2800      	cmp	r0, #0
    fa66:	d106      	bne.n	fa76 <UserMediumFrequencyTaskRun+0x7a>
    fa68:	e009      	b.n	fa7e <UserMediumFrequencyTaskRun+0x82>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:174
	{
		while (RNG1_NofElements()!=0)
		{
		  unsigned char ch;
		  RNG1_Get(&ch);
    fa6a:	1c20      	adds	r0, r4, #0
    fa6c:	f001 fff0 	bl	11a50 <RNG1_Get>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:175
		  decode(ch);
    fa70:	7820      	ldrb	r0, [r4, #0]
    fa72:	f000 f895 	bl	fba0 <decode>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:171


	// Process RX data
	if(RNG1_NofFreeElements() > 0)
	{
		while (RNG1_NofElements()!=0)
    fa76:	f002 f82d 	bl	11ad4 <RNG1_NofElements>
    fa7a:	2800      	cmp	r0, #0
    fa7c:	d1f5      	bne.n	fa6a <UserMediumFrequencyTaskRun+0x6e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:178
		  unsigned char ch;
		  RNG1_Get(&ch);
		  decode(ch);
		}
	}
}
    fa7e:	b003      	add	sp, #12
    fa80:	bd30      	pop	{r4, r5, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:140
	static uint32_t send_variables_counter = 0;

	// Send alive signal
	if(alive_counter >= 15)
	{
		counter++;
    fa82:	4a0c      	ldr	r2, [pc, #48]	; (fab4 <UserMediumFrequencyTaskRun+0xb8>)
    fa84:	6813      	ldr	r3, [r2, #0]
    fa86:	3301      	adds	r3, #1
    fa88:	6013      	str	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:141
		send_alive();
    fa8a:	f002 fd6f 	bl	1256c <send_alive>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:142
		alive_counter = 0;
    fa8e:	2300      	movs	r3, #0
    fa90:	6023      	str	r3, [r4, #0]
    fa92:	e7bb      	b.n	fa0c <UserMediumFrequencyTaskRun+0x10>
    fa94:	1fffe0cc 	.word	0x1fffe0cc
    fa98:	20000604 	.word	0x20000604
    fa9c:	1fffe0d0 	.word	0x1fffe0d0
    faa0:	200017b8 	.word	0x200017b8
    faa4:	1fffe0c0 	.word	0x1fffe0c0
    faa8:	1fffe0b8 	.word	0x1fffe0b8
    faac:	1fffe0bc 	.word	0x1fffe0bc
    fab0:	3e99999a 	.word	0x3e99999a
    fab4:	1fffe0dc 	.word	0x1fffe0dc

0000fab8 <sendBytes>:
sendBytes():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/functions.c:18
	UART_SendBlock(handle, ch, 1);
	while(! UART_GetTxCompleteStatus(handle));
}

void sendBytes(LDD_TDeviceData *handle, uint8_t* data, uint16_t size)
{
    fab8:	b510      	push	{r4, lr}
    faba:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/functions.c:19
	UART_SendBlock(handle, data, size);
    fabc:	f002 f9f2 	bl	11ea4 <UART_SendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/functions.c:20 (discriminator 1)
	while(! UART_GetTxCompleteStatus(handle));
    fac0:	1c20      	adds	r0, r4, #0
    fac2:	f002 fa15 	bl	11ef0 <UART_GetTxCompleteStatus>
    fac6:	2800      	cmp	r0, #0
    fac8:	d0fa      	beq.n	fac0 <sendBytes+0x8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/functions.c:21
}
    faca:	bd10      	pop	{r4, pc}

0000facc <init_protocol>:
init_protocol():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:39
static void (*on_decoding_done)(uint8_t* data, uint16_t size);


void init_protocol(void (*encoding_done_callback)(uint8_t*,uint16_t),void (*decoding_done_callback)(uint8_t*,uint16_t))
{
	protocol_state = IDLE;
    facc:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:38
static void (*on_encoding_done)(uint8_t* data, uint16_t size);
static void (*on_decoding_done)(uint8_t* data, uint16_t size);


void init_protocol(void (*encoding_done_callback)(uint8_t*,uint16_t),void (*decoding_done_callback)(uint8_t*,uint16_t))
{
    face:	b510      	push	{r4, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:42
	protocol_state = IDLE;
	escape_state = NONE;
	
	SOF_ = 0xF7;
    fad0:	24f7      	movs	r4, #247	; 0xf7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:39
static void (*on_decoding_done)(uint8_t* data, uint16_t size);


void init_protocol(void (*encoding_done_callback)(uint8_t*,uint16_t),void (*decoding_done_callback)(uint8_t*,uint16_t))
{
	protocol_state = IDLE;
    fad2:	4a09      	ldr	r2, [pc, #36]	; (faf8 <init_protocol+0x2c>)
    fad4:	7013      	strb	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:40
	escape_state = NONE;
    fad6:	4a09      	ldr	r2, [pc, #36]	; (fafc <init_protocol+0x30>)
    fad8:	7013      	strb	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:42
	
	SOF_ = 0xF7;
    fada:	4a09      	ldr	r2, [pc, #36]	; (fb00 <init_protocol+0x34>)
    fadc:	7014      	strb	r4, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:43
	EOF_ = 0x7F;
    fade:	4a09      	ldr	r2, [pc, #36]	; (fb04 <init_protocol+0x38>)
    fae0:	3c78      	subs	r4, #120	; 0x78
    fae2:	7014      	strb	r4, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:44
	ESC_ = 0x7D;
    fae4:	4a08      	ldr	r2, [pc, #32]	; (fb08 <init_protocol+0x3c>)
    fae6:	3c02      	subs	r4, #2
    fae8:	7014      	strb	r4, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:46

	decodingIndex = 0;
    faea:	4a08      	ldr	r2, [pc, #32]	; (fb0c <init_protocol+0x40>)
    faec:	8013      	strh	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:48
	
	on_encoding_done = encoding_done_callback;
    faee:	4b08      	ldr	r3, [pc, #32]	; (fb10 <init_protocol+0x44>)
    faf0:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:49
	on_decoding_done = decoding_done_callback;
    faf2:	4b08      	ldr	r3, [pc, #32]	; (fb14 <init_protocol+0x48>)
    faf4:	6019      	str	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:50
}
    faf6:	bd10      	pop	{r4, pc}
    faf8:	200025ae 	.word	0x200025ae
    fafc:	200025af 	.word	0x200025af
    fb00:	200025b2 	.word	0x200025b2
    fb04:	200025b1 	.word	0x200025b1
    fb08:	200025b0 	.word	0x200025b0
    fb0c:	200025ac 	.word	0x200025ac
    fb10:	1fffe1e4 	.word	0x1fffe1e4
    fb14:	1fffe0e0 	.word	0x1fffe0e0

0000fb18 <encode>:
encode():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:53

void encode(uint8_t* framedata, uint16_t framesize)
{
    fb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb1a:	1c02      	adds	r2, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:55
	// If frame size is superior than maximum allowed, abort
	if(framesize > ENCODING_BUFFER_SIZE)
    fb1c:	2940      	cmp	r1, #64	; 0x40
    fb1e:	d82f      	bhi.n	fb80 <encode+0x68>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:64
	static uint8_t encodingBuffer[ENCODING_BUFFER_SIZE * 2 + 2];

	uint16_t index = 0, i = 0;
	
	//Write start of frame / end of frame byte
	encodingBuffer[index++] = SOF_;
    fb20:	4b1a      	ldr	r3, [pc, #104]	; (fb8c <encode+0x74>)
    fb22:	4e1b      	ldr	r6, [pc, #108]	; (fb90 <encode+0x78>)
    fb24:	781b      	ldrb	r3, [r3, #0]
    fb26:	469c      	mov	ip, r3
    fb28:	7033      	strb	r3, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:67
	
	//Write data
	for(i = 0 ; i < framesize ; i++)
    fb2a:	2900      	cmp	r1, #0
    fb2c:	d029      	beq.n	fb82 <encode+0x6a>
    fb2e:	4b19      	ldr	r3, [pc, #100]	; (fb94 <encode+0x7c>)
    fb30:	1e4d      	subs	r5, r1, #1
    fb32:	781f      	ldrb	r7, [r3, #0]
    fb34:	b2ad      	uxth	r5, r5
    fb36:	4b18      	ldr	r3, [pc, #96]	; (fb98 <encode+0x80>)
    fb38:	3501      	adds	r5, #1
    fb3a:	7818      	ldrb	r0, [r3, #0]
    fb3c:	1955      	adds	r5, r2, r5
    fb3e:	2301      	movs	r3, #1
    fb40:	e00a      	b.n	fb58 <encode+0x40>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:70 (discriminator 1)
	{
		//See serial_protocols_definition.xlsx
		if(*(framedata + i) == SOF_ ||
    fb42:	4281      	cmp	r1, r0
    fb44:	d00b      	beq.n	fb5e <encode+0x46>
    fb46:	1c1c      	adds	r4, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:71
		   *(framedata + i) == EOF_ ||
    fb48:	42b9      	cmp	r1, r7
    fb4a:	d008      	beq.n	fb5e <encode+0x46>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:77 (discriminator 2)
		   *(framedata + i) == ESC_)
		{
			//If data contains one of the flags, we escape it before
			encodingBuffer[index++] = ESC_;
		}
		encodingBuffer[index++] = framedata[i];
    fb4c:	1c63      	adds	r3, r4, #1
    fb4e:	3201      	adds	r2, #1
    fb50:	b29b      	uxth	r3, r3
    fb52:	5531      	strb	r1, [r6, r4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:67 (discriminator 2)
	
	//Write start of frame / end of frame byte
	encodingBuffer[index++] = SOF_;
	
	//Write data
	for(i = 0 ; i < framesize ; i++)
    fb54:	42aa      	cmp	r2, r5
    fb56:	d00c      	beq.n	fb72 <encode+0x5a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:70
	{
		//See serial_protocols_definition.xlsx
		if(*(framedata + i) == SOF_ ||
    fb58:	7811      	ldrb	r1, [r2, #0]
    fb5a:	458c      	cmp	ip, r1
    fb5c:	d1f1      	bne.n	fb42 <encode+0x2a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:75
		   *(framedata + i) == EOF_ ||
		   *(framedata + i) == ESC_)
		{
			//If data contains one of the flags, we escape it before
			encodingBuffer[index++] = ESC_;
    fb5e:	54f7      	strb	r7, [r6, r3]
    fb60:	1c5c      	adds	r4, r3, #1
    fb62:	b2a4      	uxth	r4, r4
    fb64:	7811      	ldrb	r1, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:77
		}
		encodingBuffer[index++] = framedata[i];
    fb66:	1c63      	adds	r3, r4, #1
    fb68:	3201      	adds	r2, #1
    fb6a:	b29b      	uxth	r3, r3
    fb6c:	5531      	strb	r1, [r6, r4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:67
	
	//Write start of frame / end of frame byte
	encodingBuffer[index++] = SOF_;
	
	//Write data
	for(i = 0 ; i < framesize ; i++)
    fb6e:	42aa      	cmp	r2, r5
    fb70:	d1f2      	bne.n	fb58 <encode+0x40>
    fb72:	1c59      	adds	r1, r3, #1
    fb74:	b289      	uxth	r1, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:80
			encodingBuffer[index++] = ESC_;
		}
		encodingBuffer[index++] = framedata[i];
	}
	
	encodingBuffer[index++] = EOF_;
    fb76:	54f0      	strb	r0, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:83

	// Operation is done, call function callback
	on_encoding_done(encodingBuffer,index);
    fb78:	4b08      	ldr	r3, [pc, #32]	; (fb9c <encode+0x84>)
    fb7a:	1c30      	adds	r0, r6, #0
    fb7c:	681b      	ldr	r3, [r3, #0]
    fb7e:	4798      	blx	r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:84
}
    fb80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fb82:	4b05      	ldr	r3, [pc, #20]	; (fb98 <encode+0x80>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:67
	
	//Write start of frame / end of frame byte
	encodingBuffer[index++] = SOF_;
	
	//Write data
	for(i = 0 ; i < framesize ; i++)
    fb84:	3102      	adds	r1, #2
    fb86:	7818      	ldrb	r0, [r3, #0]
    fb88:	2301      	movs	r3, #1
    fb8a:	e7f4      	b.n	fb76 <encode+0x5e>
    fb8c:	200025b2 	.word	0x200025b2
    fb90:	1fffe1e8 	.word	0x1fffe1e8
    fb94:	200025b0 	.word	0x200025b0
    fb98:	200025b1 	.word	0x200025b1
    fb9c:	1fffe1e4 	.word	0x1fffe1e4

0000fba0 <decode>:
decode():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:91
void decode(uint8_t received_byte)
{
	static uint8_t decodingBuffer[DECODING_BUFFER_SIZE];

	// If a reception was in process
	if(protocol_state == IN_PROCESS)
    fba0:	4b1c      	ldr	r3, [pc, #112]	; (fc14 <decode+0x74>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:87
	// Operation is done, call function callback
	on_encoding_done(encodingBuffer,index);
}

void decode(uint8_t received_byte)
{
    fba2:	b510      	push	{r4, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:91
	static uint8_t decodingBuffer[DECODING_BUFFER_SIZE];

	// If a reception was in process
	if(protocol_state == IN_PROCESS)
    fba4:	781a      	ldrb	r2, [r3, #0]
    fba6:	2a01      	cmp	r2, #1
    fba8:	d00c      	beq.n	fbc4 <decode+0x24>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:141
			}
		}
	}
	else
	{
		if(received_byte == SOF_)
    fbaa:	4a1b      	ldr	r2, [pc, #108]	; (fc18 <decode+0x78>)
    fbac:	7812      	ldrb	r2, [r2, #0]
    fbae:	4282      	cmp	r2, r0
    fbb0:	d000      	beq.n	fbb4 <decode+0x14>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:152
		else
		{
			//Received character outside a valid frame, ignore it
		}
	}
}
    fbb2:	bd10      	pop	{r4, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:143
	}
	else
	{
		if(received_byte == SOF_)
		{
			protocol_state = IN_PROCESS;
    fbb4:	2201      	movs	r2, #1
    fbb6:	701a      	strb	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:144
			decodingIndex = 0;
    fbb8:	2200      	movs	r2, #0
    fbba:	4b18      	ldr	r3, [pc, #96]	; (fc1c <decode+0x7c>)
    fbbc:	801a      	strh	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:145
			escape_state = NONE;
    fbbe:	4b18      	ldr	r3, [pc, #96]	; (fc20 <decode+0x80>)
    fbc0:	701a      	strb	r2, [r3, #0]
    fbc2:	e7f6      	b.n	fbb2 <decode+0x12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:94

	// If a reception was in process
	if(protocol_state == IN_PROCESS)
	{
		// If the character was previously marked as pure data
		if(escape_state == NEXT)
    fbc4:	4916      	ldr	r1, [pc, #88]	; (fc20 <decode+0x80>)
    fbc6:	780c      	ldrb	r4, [r1, #0]
    fbc8:	2c01      	cmp	r4, #1
    fbca:	d007      	beq.n	fbdc <decode+0x3c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:112
			}
		}
		else
		{
			// End of frame
			if(received_byte == EOF_)
    fbcc:	4c15      	ldr	r4, [pc, #84]	; (fc24 <decode+0x84>)
    fbce:	7824      	ldrb	r4, [r4, #0]
    fbd0:	4284      	cmp	r4, r0
    fbd2:	d016      	beq.n	fc02 <decode+0x62>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:118
			{
				protocol_state = IDLE;
				// Call the function callback for end of frame
				on_decoding_done(decodingBuffer,decodingIndex);
			}
			else if(received_byte == ESC_)
    fbd4:	4c14      	ldr	r4, [pc, #80]	; (fc28 <decode+0x88>)
    fbd6:	7824      	ldrb	r4, [r4, #0]
    fbd8:	4284      	cmp	r4, r0
    fbda:	d010      	beq.n	fbfe <decode+0x5e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:97
	{
		// If the character was previously marked as pure data
		if(escape_state == NEXT)
		{
			// If max buffer size was reached, cancel reception to avoid overflowing buffer
			if(decodingIndex + 1 >= DECODING_BUFFER_SIZE)
    fbdc:	4a0f      	ldr	r2, [pc, #60]	; (fc1c <decode+0x7c>)
    fbde:	8814      	ldrh	r4, [r2, #0]
    fbe0:	2cfe      	cmp	r4, #254	; 0xfe
    fbe2:	dd05      	ble.n	fbf0 <decode+0x50>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:99
			{
				decodingIndex = 0;
    fbe4:	2000      	movs	r0, #0
    fbe6:	2400      	movs	r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:100
				protocol_state = IDLE;
    fbe8:	7018      	strb	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:99
		if(escape_state == NEXT)
		{
			// If max buffer size was reached, cancel reception to avoid overflowing buffer
			if(decodingIndex + 1 >= DECODING_BUFFER_SIZE)
			{
				decodingIndex = 0;
    fbea:	8014      	strh	r4, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:101
				protocol_state = IDLE;
				escape_state = NONE;
    fbec:	7008      	strb	r0, [r1, #0]
    fbee:	e7e0      	b.n	fbb2 <decode+0x12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:133
					protocol_state = IDLE;
					escape_state = NONE;
				}
				else
				{
					decodingBuffer[decodingIndex++] = received_byte;
    fbf0:	1c63      	adds	r3, r4, #1
    fbf2:	8013      	strh	r3, [r2, #0]
    fbf4:	4b0d      	ldr	r3, [pc, #52]	; (fc2c <decode+0x8c>)
    fbf6:	5518      	strb	r0, [r3, r4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:134
					escape_state = NONE;
    fbf8:	2300      	movs	r3, #0
    fbfa:	700b      	strb	r3, [r1, #0]
    fbfc:	e7d9      	b.n	fbb2 <decode+0x12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:120
				// Call the function callback for end of frame
				on_decoding_done(decodingBuffer,decodingIndex);
			}
			else if(received_byte == ESC_)
			{
				escape_state = NEXT;
    fbfe:	700a      	strb	r2, [r1, #0]
    fc00:	e7d7      	b.n	fbb2 <decode+0x12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:114
		else
		{
			// End of frame
			if(received_byte == EOF_)
			{
				protocol_state = IDLE;
    fc02:	2200      	movs	r2, #0
    fc04:	701a      	strb	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:116
				// Call the function callback for end of frame
				on_decoding_done(decodingBuffer,decodingIndex);
    fc06:	4b05      	ldr	r3, [pc, #20]	; (fc1c <decode+0x7c>)
    fc08:	4808      	ldr	r0, [pc, #32]	; (fc2c <decode+0x8c>)
    fc0a:	8819      	ldrh	r1, [r3, #0]
    fc0c:	4b08      	ldr	r3, [pc, #32]	; (fc30 <decode+0x90>)
    fc0e:	681b      	ldr	r3, [r3, #0]
    fc10:	4798      	blx	r3
    fc12:	e7ce      	b.n	fbb2 <decode+0x12>
    fc14:	200025ae 	.word	0x200025ae
    fc18:	200025b2 	.word	0x200025b2
    fc1c:	200025ac 	.word	0x200025ac
    fc20:	200025af 	.word	0x200025af
    fc24:	200025b1 	.word	0x200025b1
    fc28:	200025b0 	.word	0x200025b0
    fc2c:	1fffe0e4 	.word	0x1fffe0e4
    fc30:	1fffe0e0 	.word	0x1fffe0e0

0000fc34 <__copy_rom_sections_to_ram>:
__copy_rom_sections_to_ram():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:112
 *  It is a table of RomInfo
 *	structures.  The final entry in the table has all-zero
 *	fields.
 */
void __copy_rom_sections_to_ram(void)
{
    fc34:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:116

	int				index;

	if (__S_romp == 0L) return;
    fc36:	4c1c      	ldr	r4, [pc, #112]	; (fca8 <__copy_rom_sections_to_ram+0x74>)
    fc38:	2c00      	cmp	r4, #0
    fc3a:	d016      	beq.n	fc6a <__copy_rom_sections_to_ram+0x36>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:122

	/*
	 *	Go through the entire table, copying sections from ROM to RAM.
	 */
	for (index = 0;
		 __S_romp[index].Source != 0 ||
    fc3c:	6823      	ldr	r3, [r4, #0]
    fc3e:	2503      	movs	r5, #3
    fc40:	2601      	movs	r6, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:127
		 __S_romp[index].Target != 0 ||
		 __S_romp[index].Size != 0;
		 ++index)
	{
		__copy_rom_section( __S_romp[index].Target,
    fc42:	6862      	ldr	r2, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:121
	if (__S_romp == 0L) return;

	/*
	 *	Go through the entire table, copying sections from ROM to RAM.
	 */
	for (index = 0;
    fc44:	2b00      	cmp	r3, #0
    fc46:	d109      	bne.n	fc5c <__copy_rom_sections_to_ram+0x28>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:122
		 __S_romp[index].Source != 0 ||
    fc48:	2a00      	cmp	r2, #0
    fc4a:	d12a      	bne.n	fca2 <__copy_rom_sections_to_ram+0x6e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:123
		 __S_romp[index].Target != 0 ||
    fc4c:	68a3      	ldr	r3, [r4, #8]
    fc4e:	2b00      	cmp	r3, #0
    fc50:	d00b      	beq.n	fc6a <__copy_rom_sections_to_ram+0x36>
    fc52:	340c      	adds	r4, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:122

	/*
	 *	Go through the entire table, copying sections from ROM to RAM.
	 */
	for (index = 0;
		 __S_romp[index].Source != 0 ||
    fc54:	6823      	ldr	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:127
		 __S_romp[index].Target != 0 ||
		 __S_romp[index].Size != 0;
		 ++index)
	{
		__copy_rom_section( __S_romp[index].Target,
    fc56:	6862      	ldr	r2, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:121
	if (__S_romp == 0L) return;

	/*
	 *	Go through the entire table, copying sections from ROM to RAM.
	 */
	for (index = 0;
    fc58:	2b00      	cmp	r3, #0
    fc5a:	d0f5      	beq.n	fc48 <__copy_rom_sections_to_ram+0x14>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:127
		 __S_romp[index].Source != 0 ||
		 __S_romp[index].Target != 0 ||
		 __S_romp[index].Size != 0;
		 ++index)
	{
		__copy_rom_section( __S_romp[index].Target,
    fc5c:	68a1      	ldr	r1, [r4, #8]
__copy_rom_section():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:69
	const int size_short = sizeof(short);
	const int mask_short = sizeof(short)-1;

	const int size_char = sizeof(char);

	if( dst == src || size == 0)
    fc5e:	4293      	cmp	r3, r2
    fc60:	d0f7      	beq.n	fc52 <__copy_rom_sections_to_ram+0x1e>
    fc62:	2900      	cmp	r1, #0
    fc64:	d109      	bne.n	fc7a <__copy_rom_sections_to_ram+0x46>
    fc66:	340c      	adds	r4, #12
    fc68:	e7f4      	b.n	fc54 <__copy_rom_sections_to_ram+0x20>
__copy_rom_sections_to_ram():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:135

		__flush_cache( __S_romp[index].Target, __S_romp[index].Size);


	}
}
    fc6a:	bd70      	pop	{r4, r5, r6, pc}
__copy_rom_section():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:78


	while( len > 0)
	{

		if( !(src & mask_int) && !(dst & mask_int) && len >= size_int)
    fc6c:	2903      	cmp	r1, #3
    fc6e:	d908      	bls.n	fc82 <__copy_rom_sections_to_ram+0x4e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:80
		{
			*((int *)dst)  = *((int*)src);
    fc70:	cb01      	ldmia	r3!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:83
			dst += size_int;
			src += size_int;
			len -= size_int;
    fc72:	3904      	subs	r1, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:80
	while( len > 0)
	{

		if( !(src & mask_int) && !(dst & mask_int) && len >= size_int)
		{
			*((int *)dst)  = *((int*)src);
    fc74:	c201      	stmia	r2!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:75
	{
		return;
	}


	while( len > 0)
    fc76:	2900      	cmp	r1, #0
    fc78:	d0eb      	beq.n	fc52 <__copy_rom_sections_to_ram+0x1e>
    fc7a:	1c18      	adds	r0, r3, #0
    fc7c:	4310      	orrs	r0, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:78
	{

		if( !(src & mask_int) && !(dst & mask_int) && len >= size_int)
    fc7e:	4205      	tst	r5, r0
    fc80:	d0f4      	beq.n	fc6c <__copy_rom_sections_to_ram+0x38>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:85
			*((int *)dst)  = *((int*)src);
			dst += size_int;
			src += size_int;
			len -= size_int;
		}
		else if( !(src & mask_short) && !(dst & mask_short) && len >= size_short)
    fc82:	4206      	tst	r6, r0
    fc84:	d107      	bne.n	fc96 <__copy_rom_sections_to_ram+0x62>
    fc86:	2901      	cmp	r1, #1
    fc88:	d905      	bls.n	fc96 <__copy_rom_sections_to_ram+0x62>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:87
		{
			*((short *)dst)  = *((short*)src);
    fc8a:	8818      	ldrh	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:90
			dst += size_short;
			src += size_short;
			len -= size_short;
    fc8c:	3902      	subs	r1, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:87
			src += size_int;
			len -= size_int;
		}
		else if( !(src & mask_short) && !(dst & mask_short) && len >= size_short)
		{
			*((short *)dst)  = *((short*)src);
    fc8e:	8010      	strh	r0, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:89
			dst += size_short;
			src += size_short;
    fc90:	3302      	adds	r3, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:88
			len -= size_int;
		}
		else if( !(src & mask_short) && !(dst & mask_short) && len >= size_short)
		{
			*((short *)dst)  = *((short*)src);
			dst += size_short;
    fc92:	3202      	adds	r2, #2
    fc94:	e7ef      	b.n	fc76 <__copy_rom_sections_to_ram+0x42>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:94
			src += size_short;
			len -= size_short;
		}
		else
		{
			*((char *)dst)  = *((char*)src);
    fc96:	7818      	ldrb	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:97
			dst += size_char;
			src += size_char;
			len -= size_char;
    fc98:	3901      	subs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:94
			src += size_short;
			len -= size_short;
		}
		else
		{
			*((char *)dst)  = *((char*)src);
    fc9a:	7010      	strb	r0, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:96
			dst += size_char;
			src += size_char;
    fc9c:	3301      	adds	r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:95
			len -= size_short;
		}
		else
		{
			*((char *)dst)  = *((char*)src);
			dst += size_char;
    fc9e:	3201      	adds	r2, #1
    fca0:	e7e9      	b.n	fc76 <__copy_rom_sections_to_ram+0x42>
__copy_rom_sections_to_ram():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:127
		 __S_romp[index].Source != 0 ||
		 __S_romp[index].Target != 0 ||
		 __S_romp[index].Size != 0;
		 ++index)
	{
		__copy_rom_section( __S_romp[index].Target,
    fca2:	68a1      	ldr	r1, [r4, #8]
    fca4:	e7dd      	b.n	fc62 <__copy_rom_sections_to_ram+0x2e>
    fca6:	46c0      	nop			; (mov r8, r8)
    fca8:	00015090 	.word	0x00015090

0000fcac <__init_registers>:
__init_registers():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:189

// __init_registers, __init_hardware, __init_user suggested by Kobler
void __attribute__ ((weak)) __init_registers(void)
{

}
    fcac:	4770      	bx	lr
    fcae:	46c0      	nop			; (mov r8, r8)

0000fcb0 <__init_user>:
__init_user():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:199
}

void __attribute__ ((weak)) __init_user(void)
{

}
    fcb0:	4770      	bx	lr
    fcb2:	46c0      	nop			; (mov r8, r8)

0000fcb4 <__thumb_startup>:
__thumb_startup():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:211
{
	__thumb_startup();
}

void __thumb_startup(void)
{
    fcb4:	b538      	push	{r3, r4, r5, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:215
int addr = (int)__SP_INIT;

		// Setup registers
		__init_registers();
    fcb6:	f7ff fff9 	bl	fcac <__init_registers>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:218

		// setup hardware
		__init_hardware();
    fcba:	f001 fa5d 	bl	11178 <__init_hardware>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:223

		// setup the stack before we attempt anything else
		// skip stack setup if __SP_INIT is 0
		// assume sp is already setup.
		__asm (
    fcbe:	4b19      	ldr	r3, [pc, #100]	; (fd24 <skip_sp+0x52>)
    fcc0:	1c18      	adds	r0, r3, #0
    fcc2:	2800      	cmp	r0, #0
    fcc4:	d005      	beq.n	fcd2 <skip_sp>
    fcc6:	4685      	mov	sp, r0
    fcc8:	b081      	sub	sp, #4
    fcca:	2000      	movs	r0, #0
    fccc:	43c0      	mvns	r0, r0
    fcce:	9000      	str	r0, [sp, #0]
    fcd0:	b001      	add	sp, #4

0000fcd2 <skip_sp>:
zero_fill_bss():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:143
static void zero_fill_bss(void)
{
	extern char __START_BSS[];
	extern char __END_BSS[];

	unsigned long len = __END_BSS - __START_BSS;
    fcd2:	4b15      	ldr	r3, [pc, #84]	; (fd28 <skip_sp+0x56>)
    fcd4:	4a15      	ldr	r2, [pc, #84]	; (fd2c <skip_sp+0x5a>)
    fcd6:	1ad2      	subs	r2, r2, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:154
	const int size_short = sizeof(short);
	const int mask_short = sizeof(short)-1;

	const int size_char = sizeof(char);

	if( len == 0)
    fcd8:	d016      	beq.n	fd08 <skip_sp+0x36>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:163


	while( len > 0)
	{

		if( !(dst & mask_int) && len >= size_int)
    fcda:	2503      	movs	r5, #3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:169
		{
			*((int *)dst)  = 0;
			dst += size_int;
			len -= size_int;
		}
		else if( !(dst & mask_short) && len >= size_short)
    fcdc:	2401      	movs	r4, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:177
			dst += size_short;
			len -= size_short;
		}
		else
		{
			*((char *)dst)  = 0;
    fcde:	2000      	movs	r0, #0
    fce0:	e005      	b.n	fcee <skip_sp+0x1c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:163


	while( len > 0)
	{

		if( !(dst & mask_int) && len >= size_int)
    fce2:	2a03      	cmp	r2, #3
    fce4:	d906      	bls.n	fcf4 <skip_sp+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:165
		{
			*((int *)dst)  = 0;
    fce6:	c302      	stmia	r3!, {r1}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:167
			dst += size_int;
			len -= size_int;
    fce8:	3a04      	subs	r2, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:160
	{
		return;
	}


	while( len > 0)
    fcea:	2a00      	cmp	r2, #0
    fcec:	d00c      	beq.n	fd08 <skip_sp+0x36>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:163
	{

		if( !(dst & mask_int) && len >= size_int)
    fcee:	1c29      	adds	r1, r5, #0
    fcf0:	4019      	ands	r1, r3
    fcf2:	d0f6      	beq.n	fce2 <skip_sp+0x10>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:169
		{
			*((int *)dst)  = 0;
			dst += size_int;
			len -= size_int;
		}
		else if( !(dst & mask_short) && len >= size_short)
    fcf4:	1c21      	adds	r1, r4, #0
    fcf6:	4019      	ands	r1, r3
    fcf8:	d10f      	bne.n	fd1a <skip_sp+0x48>
    fcfa:	2a01      	cmp	r2, #1
    fcfc:	d00d      	beq.n	fd1a <skip_sp+0x48>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:173
		{
			*((short *)dst)  = 0;
			dst += size_short;
			len -= size_short;
    fcfe:	3a02      	subs	r2, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:171
			dst += size_int;
			len -= size_int;
		}
		else if( !(dst & mask_short) && len >= size_short)
		{
			*((short *)dst)  = 0;
    fd00:	8019      	strh	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:172
			dst += size_short;
    fd02:	3302      	adds	r3, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:160
	{
		return;
	}


	while( len > 0)
    fd04:	2a00      	cmp	r2, #0
    fd06:	d1f2      	bne.n	fcee <skip_sp+0x1c>
__thumb_startup():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:241

		//	zero-fill the .bss section
		zero_fill_bss();

    // SUPPORT_ROM_TO_RAM
			__copy_rom_sections_to_ram();
    fd08:	f7ff ff94 	bl	fc34 <__copy_rom_sections_to_ram>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:247

		//	call C++ static initializers
    //  __call_static_initializers();

		// initializations before main, user specific
		__init_user();
    fd0c:	f7ff ffd0 	bl	fcb0 <__init_user>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:249

		main(0, argv);
    fd10:	2000      	movs	r0, #0
    fd12:	4907      	ldr	r1, [pc, #28]	; (fd30 <skip_sp+0x5e>)
    fd14:	f7fc fc4e 	bl	c5b4 <main>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:254 (discriminator 1)



		//	should never get here
		while (1);
    fd18:	e7fe      	b.n	fd18 <skip_sp+0x46>
zero_fill_bss():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:177
			dst += size_short;
			len -= size_short;
		}
		else
		{
			*((char *)dst)  = 0;
    fd1a:	7018      	strb	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:179
			dst += size_char;
			len -= size_char;
    fd1c:	3a01      	subs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:178
			len -= size_short;
		}
		else
		{
			*((char *)dst)  = 0;
			dst += size_char;
    fd1e:	3301      	adds	r3, #1
    fd20:	e7e3      	b.n	fcea <skip_sp+0x18>
    fd22:	46c0      	nop			; (mov r8, r8)
    fd24:	20006000 	.word	0x20006000
    fd28:	1fffe08c 	.word	0x1fffe08c
    fd2c:	20003bbc 	.word	0x20003bbc
    fd30:	1fffe26c 	.word	0x1fffe26c

0000fd34 <_psp_int_install>:
_psp_int_install():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/int_inst.c:41
 * \brief This function initializes kernel interrupt tables.
 */
#if MQX_USE_INTERRUPTS

void _psp_int_install(void)
{
    fd34:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/int_inst.c:45
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);
    __set_MSP((uint_32)kernel_data->INTERRUPT_STACK_PTR);
    fd36:	4b03      	ldr	r3, [pc, #12]	; (fd44 <_psp_int_install+0x10>)
    fd38:	681b      	ldr	r3, [r3, #0]
    fd3a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    fd3c:	f005 f93f 	bl	14fbe <__set_MSP>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/int_inst.c:61
        for (i = 16; i < PSP_MAXIMUM_INTERRUPT_VECTORS; i++) {
            ptr[i] = (uint_32)_int_kernel_isr;
        }
    }
#endif
}
    fd40:	bd08      	pop	{r3, pc}
    fd42:	46c0      	nop			; (mov r8, r8)
    fd44:	1fffe000 	.word	0x1fffe000

0000fd48 <_int_set_vector_table>:
_int_set_vector_table():

   _GET_KERNEL_DATA(kernel_data);
   kernel_data->USERS_VBR = addr;
#endif

   old = _PSP_GET_VTOR();
    fd48:	22e0      	movs	r2, #224	; 0xe0
    fd4a:	4b03      	ldr	r3, [pc, #12]	; (fd58 <_int_set_vector_table+0x10>)
    fd4c:	0612      	lsls	r2, r2, #24
    fd4e:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/int_vtab.c:62
   _PSP_SET_VTOR(addr);
    fd50:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/int_vtab.c:66

   return (old);

} /* Endbody */
    fd52:	1c08      	adds	r0, r1, #0
    fd54:	4770      	bx	lr
    fd56:	46c0      	nop			; (mov r8, r8)
    fd58:	0000ed08 	.word	0x0000ed08

0000fd5c <_mem_zero>:
_mem_zero():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:56
      register pointer from_ptr,

      /* [IN] the number of bytes to zero */
      register _mem_size number_of_bytes
   )
{ /* Body */
    fd5c:	b530      	push	{r4, r5, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:71
   uint_8_ptr from8_ptr = (uint_8_ptr) from_ptr;
   uint_16_ptr from16_ptr = (uint_16_ptr) from_ptr;
   register uint_32_ptr from32_ptr = (uint_32_ptr) from_ptr;
   register uint_32 loops;

   if (number_of_bytes > 3) {
    fd5e:	2903      	cmp	r1, #3
    fd60:	d95a      	bls.n	fe18 <FP_CONTEXT_CLEAR_MASK+0x19>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:74

      /* Try to align source on word */
      if ((uint_32)from_ptr & 1) {
    fd62:	1c03      	adds	r3, r0, #0
    fd64:	07c2      	lsls	r2, r0, #31
    fd66:	d504      	bpl.n	fd72 <_mem_zero+0x16>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:76
         from8_ptr = (uint_8_ptr) from_ptr;
         *from8_ptr++ = 0;
    fd68:	2300      	movs	r3, #0
    fd6a:	7003      	strb	r3, [r0, #0]
    fd6c:	3001      	adds	r0, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:78

         from_ptr = from8_ptr;
    fd6e:	1c03      	adds	r3, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:79
         --number_of_bytes;
    fd70:	3901      	subs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:83
      } /* Endif */

      /* Try to align source on longword */
      if ((uint_32)from_ptr & 2) {
    fd72:	079b      	lsls	r3, r3, #30
    fd74:	d503      	bpl.n	fd7e <_mem_zero+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:86
         from16_ptr = (uint_16_ptr) from_ptr;

         *from16_ptr++ = 0;
    fd76:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:89

         from_ptr = from16_ptr;
         number_of_bytes -= 2;
    fd78:	3902      	subs	r1, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:86

      /* Try to align source on longword */
      if ((uint_32)from_ptr & 2) {
         from16_ptr = (uint_16_ptr) from_ptr;

         *from16_ptr++ = 0;
    fd7a:	8003      	strh	r3, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:88

         from_ptr = from16_ptr;
    fd7c:	3002      	adds	r0, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:99
      /*
      ** so lets copy longwords...
      ** to increase performance, we will do 64 bytes (16 * longwords) at once and after that jumping
      ** This consumes more RAM, more flash, but gets less instruction cycles.
      */
      for (loops = number_of_bytes >> 6; loops != 0; loops--) {
    fd7e:	098d      	lsrs	r5, r1, #6
    fd80:	d018      	beq.n	fdb4 <_mem_zero+0x58>
    fd82:	1c03      	adds	r3, r0, #0
    fd84:	1c2c      	adds	r4, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:101
         /* copy 16 longwords */
         *from32_ptr++ = 0;
    fd86:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:99 (discriminator 3)
      /*
      ** so lets copy longwords...
      ** to increase performance, we will do 64 bytes (16 * longwords) at once and after that jumping
      ** This consumes more RAM, more flash, but gets less instruction cycles.
      */
      for (loops = number_of_bytes >> 6; loops != 0; loops--) {
    fd88:	3c01      	subs	r4, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:101 (discriminator 3)
         /* copy 16 longwords */
         *from32_ptr++ = 0;
    fd8a:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:102 (discriminator 3)
         *from32_ptr++ = 0;
    fd8c:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:103 (discriminator 3)
         *from32_ptr++ = 0;
    fd8e:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:104 (discriminator 3)
         *from32_ptr++ = 0;
    fd90:	60da      	str	r2, [r3, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:105 (discriminator 3)
         *from32_ptr++ = 0;
    fd92:	611a      	str	r2, [r3, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:106 (discriminator 3)
         *from32_ptr++ = 0;
    fd94:	615a      	str	r2, [r3, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:107 (discriminator 3)
         *from32_ptr++ = 0;
    fd96:	619a      	str	r2, [r3, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:108 (discriminator 3)
         *from32_ptr++ = 0;
    fd98:	61da      	str	r2, [r3, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:109 (discriminator 3)
         *from32_ptr++ = 0;
    fd9a:	621a      	str	r2, [r3, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:110 (discriminator 3)
         *from32_ptr++ = 0;
    fd9c:	625a      	str	r2, [r3, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:111 (discriminator 3)
         *from32_ptr++ = 0;
    fd9e:	629a      	str	r2, [r3, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:112 (discriminator 3)
         *from32_ptr++ = 0;
    fda0:	62da      	str	r2, [r3, #44]	; 0x2c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:113 (discriminator 3)
         *from32_ptr++ = 0;
    fda2:	631a      	str	r2, [r3, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:114 (discriminator 3)
         *from32_ptr++ = 0;
    fda4:	635a      	str	r2, [r3, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:115 (discriminator 3)
         *from32_ptr++ = 0;
    fda6:	639a      	str	r2, [r3, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:116 (discriminator 3)
         *from32_ptr++ = 0;
    fda8:	63da      	str	r2, [r3, #60]	; 0x3c
    fdaa:	3340      	adds	r3, #64	; 0x40
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:99 (discriminator 3)
      /*
      ** so lets copy longwords...
      ** to increase performance, we will do 64 bytes (16 * longwords) at once and after that jumping
      ** This consumes more RAM, more flash, but gets less instruction cycles.
      */
      for (loops = number_of_bytes >> 6; loops != 0; loops--) {
    fdac:	2c00      	cmp	r4, #0
    fdae:	d1eb      	bne.n	fd88 <_mem_zero+0x2c>
    fdb0:	01ad      	lsls	r5, r5, #6
    fdb2:	1940      	adds	r0, r0, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:120
         *from32_ptr++ = 0;
         *from32_ptr++ = 0;
      } /* Endwhile */

      /* Now, write the rest of bytes */
      switch ((number_of_bytes >> 2) & 0xF) {
    fdb4:	233c      	movs	r3, #60	; 0x3c
    fdb6:	4a24      	ldr	r2, [pc, #144]	; (fe48 <FP_CONTEXT_CLEAR_MASK+0x49>)
    fdb8:	400b      	ands	r3, r1
    fdba:	58d3      	ldr	r3, [r2, r3]
    fdbc:	469f      	mov	pc, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:121
         case 15: *from32_ptr++ = 0;
    fdbe:	2300      	movs	r3, #0
    fdc0:	6003      	str	r3, [r0, #0]
    fdc2:	3004      	adds	r0, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:122
         case 14: *from32_ptr++ = 0;
    fdc4:	2300      	movs	r3, #0
    fdc6:	6003      	str	r3, [r0, #0]
    fdc8:	3004      	adds	r0, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:123
         case 13: *from32_ptr++ = 0;
    fdca:	2200      	movs	r2, #0
    fdcc:	1d03      	adds	r3, r0, #4
    fdce:	6002      	str	r2, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:124
         case 12: *from32_ptr++ = 0;
    fdd0:	2200      	movs	r2, #0
    fdd2:	1d18      	adds	r0, r3, #4
    fdd4:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:125
         case 11: *from32_ptr++ = 0;
    fdd6:	2200      	movs	r2, #0
    fdd8:	1d03      	adds	r3, r0, #4
    fdda:	6002      	str	r2, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:126
         case 10: *from32_ptr++ = 0;
    fddc:	2200      	movs	r2, #0
    fdde:	1d18      	adds	r0, r3, #4
    fde0:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:127
         case 9:  *from32_ptr++ = 0;
    fde2:	2200      	movs	r2, #0
    fde4:	1d03      	adds	r3, r0, #4
    fde6:	6002      	str	r2, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:128
         case 8:  *from32_ptr++ = 0;
    fde8:	2200      	movs	r2, #0
    fdea:	1d18      	adds	r0, r3, #4
    fdec:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:129
         case 7:  *from32_ptr++ = 0;
    fdee:	2200      	movs	r2, #0
    fdf0:	1d03      	adds	r3, r0, #4
    fdf2:	6002      	str	r2, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:130
         case 6:  *from32_ptr++ = 0;
    fdf4:	2200      	movs	r2, #0
    fdf6:	1d18      	adds	r0, r3, #4
    fdf8:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:131
         case 5:  *from32_ptr++ = 0;
    fdfa:	2200      	movs	r2, #0
    fdfc:	1d03      	adds	r3, r0, #4
    fdfe:	6002      	str	r2, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:132
         case 4:  *from32_ptr++ = 0;
    fe00:	2200      	movs	r2, #0
    fe02:	1d18      	adds	r0, r3, #4
    fe04:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:133
         case 3:  *from32_ptr++ = 0;
    fe06:	2300      	movs	r3, #0
    fe08:	1d02      	adds	r2, r0, #4
    fe0a:	6003      	str	r3, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:134
         case 2:  *from32_ptr++ = 0;
    fe0c:	2000      	movs	r0, #0
    fe0e:	1d13      	adds	r3, r2, #4
    fe10:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:135
         case 1:  *from32_ptr++ = 0;
    fe12:	2200      	movs	r2, #0
    fe14:	1d18      	adds	r0, r3, #4
    fe16:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:147
#endif /* MQX_USE_BLOCK_MEM_ZERO */
      from_ptr = from32_ptr;
   } /* Endif */

   /* Copy all remaining bytes */
   if (number_of_bytes & 2) {
    fe18:	078b      	lsls	r3, r1, #30
    fe1a:	d502      	bpl.n	fe22 <FP_CONTEXT_CLEAR_MASK+0x23>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:150
      from16_ptr = (uint_16_ptr) from_ptr;

      *from16_ptr++ = 0;
    fe1c:	2300      	movs	r3, #0
    fe1e:	8003      	strh	r3, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:152

      from_ptr = from16_ptr;
    fe20:	3002      	adds	r0, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:154
   } /* Endif */
   if (number_of_bytes & 1) {
    fe22:	07cb      	lsls	r3, r1, #31
    fe24:	d501      	bpl.n	fe2a <FP_CONTEXT_CLEAR_MASK+0x2b>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:155
      * (uint_8_ptr) from_ptr = 0;
    fe26:	2300      	movs	r3, #0
    fe28:	7003      	strb	r3, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:158
   } /* Endif */
#endif
} /* Endbody */
    fe2a:	bd30      	pop	{r4, r5, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:120
         *from32_ptr++ = 0;
         *from32_ptr++ = 0;
      } /* Endwhile */

      /* Now, write the rest of bytes */
      switch ((number_of_bytes >> 2) & 0xF) {
    fe2c:	1c03      	adds	r3, r0, #0
    fe2e:	e7f0      	b.n	fe12 <FP_CONTEXT_CLEAR_MASK+0x13>
    fe30:	1c03      	adds	r3, r0, #0
    fe32:	e7df      	b.n	fdf4 <_mem_zero+0x98>
    fe34:	1c03      	adds	r3, r0, #0
    fe36:	e7d7      	b.n	fde8 <_mem_zero+0x8c>
    fe38:	1c03      	adds	r3, r0, #0
    fe3a:	e7e1      	b.n	fe00 <FP_CONTEXT_CLEAR_MASK+0x1>
    fe3c:	1c02      	adds	r2, r0, #0
    fe3e:	e7e5      	b.n	fe0c <FP_CONTEXT_CLEAR_MASK+0xd>
    fe40:	1c03      	adds	r3, r0, #0
    fe42:	e7cb      	b.n	fddc <_mem_zero+0x80>
    fe44:	1c03      	adds	r3, r0, #0
    fe46:	e7c3      	b.n	fdd0 <_mem_zero+0x74>
    fe48:	000146d4 	.word	0x000146d4

0000fe4c <_psp_int_init>:
_psp_int_init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_iinit.c:53
      _mqx_uint       first_user_isr_vector_number,

      /* [IN] the last user ISR vector number */
      _mqx_uint       last_user_isr_vector_number
   )
{ /* Body */
    fe4c:	b510      	push	{r4, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_iinit.c:57
   uint_32            error;

   /* Install kernel interrupt services */
   error = _int_init(first_user_isr_vector_number, last_user_isr_vector_number);
    fe4e:	f000 f969 	bl	10124 <_int_init>
    fe52:	1e04      	subs	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_iinit.c:60

   /* Install PSP interrupt services */
   if (error == MQX_OK) {
    fe54:	d101      	bne.n	fe5a <_psp_int_init+0xe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_iinit.c:61
      _psp_int_install();
    fe56:	f7ff ff6d 	bl	fd34 <_psp_int_install>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_iinit.c:66
   } /* Endif */

   return error;

} /* Endbody */
    fe5a:	1c20      	adds	r0, r4, #0
    fe5c:	bd10      	pop	{r4, pc}
    fe5e:	46c0      	nop			; (mov r8, r8)

0000fe60 <_psp_add_ticks>:
_psp_add_ticks():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:61
   register uint_32       hwtpt;

   r_ptr->TICKS[0] = a_ptr->TICKS[0] + b_ptr->TICKS[0];

   a_hw_ticks  = a_ptr->HW_TICKS[0];
   b_hw_ticks  = b_ptr->HW_TICKS[0];
    fe60:	688b      	ldr	r3, [r1, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:53
       PSP_TICK_STRUCT_PTR b_ptr,

       /* [OUT] The result of the addition */
       PSP_TICK_STRUCT_PTR r_ptr
   )
{ /* Body */
    fe62:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:58
   register uint_32       a_hw_ticks;
   register uint_32       b_hw_ticks;
   register uint_32       hwtpt;

   r_ptr->TICKS[0] = a_ptr->TICKS[0] + b_ptr->TICKS[0];
    fe64:	680c      	ldr	r4, [r1, #0]
    fe66:	684d      	ldr	r5, [r1, #4]
    fe68:	6806      	ldr	r6, [r0, #0]
    fe6a:	6847      	ldr	r7, [r0, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:63

   a_hw_ticks  = a_ptr->HW_TICKS[0];
   b_hw_ticks  = b_ptr->HW_TICKS[0];

   hwtpt = _mqx_kernel_data->HW_TICKS_PER_TICK;
    fe6c:	490b      	ldr	r1, [pc, #44]	; (fe9c <_psp_add_ticks+0x3c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:58
{ /* Body */
   register uint_32       a_hw_ticks;
   register uint_32       b_hw_ticks;
   register uint_32       hwtpt;

   r_ptr->TICKS[0] = a_ptr->TICKS[0] + b_ptr->TICKS[0];
    fe6e:	19a4      	adds	r4, r4, r6
    fe70:	417d      	adcs	r5, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:63

   a_hw_ticks  = a_ptr->HW_TICKS[0];
   b_hw_ticks  = b_ptr->HW_TICKS[0];

   hwtpt = _mqx_kernel_data->HW_TICKS_PER_TICK;
    fe72:	680e      	ldr	r6, [r1, #0]
    fe74:	21a8      	movs	r1, #168	; 0xa8
    fe76:	0049      	lsls	r1, r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:60
   register uint_32       b_hw_ticks;
   register uint_32       hwtpt;

   r_ptr->TICKS[0] = a_ptr->TICKS[0] + b_ptr->TICKS[0];

   a_hw_ticks  = a_ptr->HW_TICKS[0];
    fe78:	6880      	ldr	r0, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:63
   b_hw_ticks  = b_ptr->HW_TICKS[0];

   hwtpt = _mqx_kernel_data->HW_TICKS_PER_TICK;
    fe7a:	5876      	ldr	r6, [r6, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:58
{ /* Body */
   register uint_32       a_hw_ticks;
   register uint_32       b_hw_ticks;
   register uint_32       hwtpt;

   r_ptr->TICKS[0] = a_ptr->TICKS[0] + b_ptr->TICKS[0];
    fe7c:	6014      	str	r4, [r2, #0]
    fe7e:	6055      	str	r5, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:65
   a_hw_ticks  = a_ptr->HW_TICKS[0];
   b_hw_ticks  = b_ptr->HW_TICKS[0];

   hwtpt = _mqx_kernel_data->HW_TICKS_PER_TICK;

   if ( a_hw_ticks >= (hwtpt - b_hw_ticks)) {
    fe80:	1af1      	subs	r1, r6, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:69
      r_ptr->TICKS[0]++;
      r_ptr->HW_TICKS[0] = a_hw_ticks + (b_hw_ticks - hwtpt);
   } else {
      r_ptr->HW_TICKS[0] = a_hw_ticks + b_hw_ticks;
    fe82:	181b      	adds	r3, r3, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:65
   a_hw_ticks  = a_ptr->HW_TICKS[0];
   b_hw_ticks  = b_ptr->HW_TICKS[0];

   hwtpt = _mqx_kernel_data->HW_TICKS_PER_TICK;

   if ( a_hw_ticks >= (hwtpt - b_hw_ticks)) {
    fe84:	4288      	cmp	r0, r1
    fe86:	d306      	bcc.n	fe96 <_psp_add_ticks+0x36>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:66
      r_ptr->TICKS[0]++;
    fe88:	2001      	movs	r0, #1
    fe8a:	2100      	movs	r1, #0
    fe8c:	1824      	adds	r4, r4, r0
    fe8e:	414d      	adcs	r5, r1
    fe90:	6014      	str	r4, [r2, #0]
    fe92:	6055      	str	r5, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:67
      r_ptr->HW_TICKS[0] = a_hw_ticks + (b_hw_ticks - hwtpt);
    fe94:	1b9b      	subs	r3, r3, r6
    fe96:	6093      	str	r3, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:72
   } else {
      r_ptr->HW_TICKS[0] = a_hw_ticks + b_hw_ticks;
   } /* Endif */

} /* Endbody */
    fe98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fe9a:	46c0      	nop			; (mov r8, r8)
    fe9c:	1fffe000 	.word	0x1fffe000

0000fea0 <_psp_normalize_ticks>:
_psp_normalize_ticks():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:53
   KERNEL_DATA_STRUCT_PTR  kernel_data;
   register uint_32        ticks_per_tick;

   _GET_KERNEL_DATA(kernel_data);

   ticks_per_tick = kernel_data->HW_TICKS_PER_TICK;
    fea0:	4b0d      	ldr	r3, [pc, #52]	; (fed8 <_psp_normalize_ticks+0x38>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:47
void _psp_normalize_ticks
   (
       /* [IN/OUT] Tick structure to be normalized */
       PSP_TICK_STRUCT_PTR tick_ptr
   )
{ /* Body */
    fea2:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:53
   KERNEL_DATA_STRUCT_PTR  kernel_data;
   register uint_32        ticks_per_tick;

   _GET_KERNEL_DATA(kernel_data);

   ticks_per_tick = kernel_data->HW_TICKS_PER_TICK;
    fea4:	681a      	ldr	r2, [r3, #0]
    fea6:	23a8      	movs	r3, #168	; 0xa8
    fea8:	005b      	lsls	r3, r3, #1
    feaa:	58d6      	ldr	r6, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:55

   if (tick_ptr->HW_TICKS[0] >= ticks_per_tick) {
    feac:	6885      	ldr	r5, [r0, #8]
    feae:	42ae      	cmp	r6, r5
    feb0:	d811      	bhi.n	fed6 <_psp_normalize_ticks+0x36>
    feb2:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:56
      register uint_32 t = tick_ptr->HW_TICKS[0] / ticks_per_tick;
    feb4:	1c31      	adds	r1, r6, #0
    feb6:	1c28      	adds	r0, r5, #0
    feb8:	f7f0 faf4 	bl	4a4 <__aeabi_uidiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:57
      tick_ptr->TICKS[0] += t;
    febc:	2300      	movs	r3, #0
    febe:	1c02      	adds	r2, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:56
   _GET_KERNEL_DATA(kernel_data);

   ticks_per_tick = kernel_data->HW_TICKS_PER_TICK;

   if (tick_ptr->HW_TICKS[0] >= ticks_per_tick) {
      register uint_32 t = tick_ptr->HW_TICKS[0] / ticks_per_tick;
    fec0:	4684      	mov	ip, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:57
      tick_ptr->TICKS[0] += t;
    fec2:	6820      	ldr	r0, [r4, #0]
    fec4:	6861      	ldr	r1, [r4, #4]
    fec6:	1812      	adds	r2, r2, r0
    fec8:	414b      	adcs	r3, r1
    feca:	6022      	str	r2, [r4, #0]
    fecc:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:58
      tick_ptr->HW_TICKS[0] -= t * ticks_per_tick;
    fece:	4663      	mov	r3, ip
    fed0:	435e      	muls	r6, r3
    fed2:	1bad      	subs	r5, r5, r6
    fed4:	60a5      	str	r5, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:61
   } /* Endif */

} /* Endbody */
    fed6:	bd70      	pop	{r4, r5, r6, pc}
    fed8:	1fffe000 	.word	0x1fffe000

0000fedc <_psp_set_kernel_disable_level>:
_psp_set_kernel_disable_level():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:52
    KERNEL_DATA_STRUCT_PTR          kernel_data;
    MQX_INITIALIZATION_STRUCT_PTR   init_ptr;
    uint_32 temp;
    _mqx_int i;

    _GET_KERNEL_DATA(kernel_data);
    fedc:	4b16      	ldr	r3, [pc, #88]	; (ff38 <_psp_set_kernel_disable_level+0x5c>)
    fede:	681a      	ldr	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:57

    init_ptr = &kernel_data->INIT;

    /* Calculate the enable and disable interrupt values for the kernel. */
    temp = init_ptr->MQX_HARDWARE_INTERRUPT_LEVEL_MAX;
    fee0:	1c11      	adds	r1, r2, #0
    fee2:	315d      	adds	r1, #93	; 0x5d
    fee4:	31ff      	adds	r1, #255	; 0xff
    fee6:	68cb      	ldr	r3, [r1, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:58
    if (temp > 7) {
    fee8:	2b07      	cmp	r3, #7
    feea:	d91b      	bls.n	ff24 <_psp_set_kernel_disable_level+0x48>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:60
        temp = 7;
        init_ptr->MQX_HARDWARE_INTERRUPT_LEVEL_MAX = 7;
    feec:	2307      	movs	r3, #7
    feee:	60cb      	str	r3, [r1, #12]
    fef0:	3379      	adds	r3, #121	; 0x79
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:70

    kernel_data->DISABLE_SR = CORTEX_PRIOR(temp);

    /* Set all (till now unused) interrupts level to the disable level */
    for (i = 0; i < sizeof(NVIC_BASE_PTR->IP) / sizeof(NVIC_BASE_PTR->IP[0]); i++)
        NVIC_BASE_PTR->IP[i] = CORTEX_PRIOR((1 << CORTEX_PRIOR_IMPL) - 2);
    fef2:	21c0      	movs	r1, #192	; 0xc0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:66
    } else if (temp == 0) {
        temp = 1;
        init_ptr->MQX_HARDWARE_INTERRUPT_LEVEL_MAX = 1;
    }

    kernel_data->DISABLE_SR = CORTEX_PRIOR(temp);
    fef4:	82d3      	strh	r3, [r2, #22]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:70

    /* Set all (till now unused) interrupts level to the disable level */
    for (i = 0; i < sizeof(NVIC_BASE_PTR->IP) / sizeof(NVIC_BASE_PTR->IP[0]); i++)
        NVIC_BASE_PTR->IP[i] = CORTEX_PRIOR((1 << CORTEX_PRIOR_IMPL) - 2);
    fef6:	2300      	movs	r3, #0
    fef8:	4a10      	ldr	r2, [pc, #64]	; (ff3c <_psp_set_kernel_disable_level+0x60>)
    fefa:	0089      	lsls	r1, r1, #2
    fefc:	5053      	str	r3, [r2, r1]
    fefe:	4a10      	ldr	r2, [pc, #64]	; (ff40 <_psp_set_kernel_disable_level+0x64>)
    ff00:	5053      	str	r3, [r2, r1]
    ff02:	3104      	adds	r1, #4
    ff04:	5053      	str	r3, [r2, r1]
    ff06:	3104      	adds	r1, #4
    ff08:	5053      	str	r3, [r2, r1]
    ff0a:	3104      	adds	r1, #4
    ff0c:	5053      	str	r3, [r2, r1]
    ff0e:	3104      	adds	r1, #4
    ff10:	5053      	str	r3, [r2, r1]
    ff12:	3104      	adds	r1, #4
    ff14:	5053      	str	r3, [r2, r1]
    ff16:	3104      	adds	r1, #4
    ff18:	5053      	str	r3, [r2, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:79
    {
        uint32_t * icer_ptr = (uint32_t *)&NVIC_BASE_PTR->ICER;

        for (i = 0; i < sizeof(NVIC_BASE_PTR->ICER) / sizeof(uint32_t); i++)    {
            /* Disable 32 interrupts in a row */
            *(icer_ptr + i) = 0xFFFFFFFF;
    ff1a:	2201      	movs	r2, #1
    ff1c:	4b09      	ldr	r3, [pc, #36]	; (ff44 <_psp_set_kernel_disable_level+0x68>)
    ff1e:	4252      	negs	r2, r2
    ff20:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:82
        }
    }
}
    ff22:	4770      	bx	lr
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:61
    /* Calculate the enable and disable interrupt values for the kernel. */
    temp = init_ptr->MQX_HARDWARE_INTERRUPT_LEVEL_MAX;
    if (temp > 7) {
        temp = 7;
        init_ptr->MQX_HARDWARE_INTERRUPT_LEVEL_MAX = 7;
    } else if (temp == 0) {
    ff24:	2b00      	cmp	r3, #0
    ff26:	d103      	bne.n	ff30 <_psp_set_kernel_disable_level+0x54>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:63
        temp = 1;
        init_ptr->MQX_HARDWARE_INTERRUPT_LEVEL_MAX = 1;
    ff28:	3301      	adds	r3, #1
    ff2a:	60cb      	str	r3, [r1, #12]
    ff2c:	337f      	adds	r3, #127	; 0x7f
    ff2e:	e7e0      	b.n	fef2 <_psp_set_kernel_disable_level+0x16>
    ff30:	21ff      	movs	r1, #255	; 0xff
    ff32:	01db      	lsls	r3, r3, #7
    ff34:	400b      	ands	r3, r1
    ff36:	e7dc      	b.n	fef2 <_psp_set_kernel_disable_level+0x16>
    ff38:	1fffe000 	.word	0x1fffe000
    ff3c:	e000e100 	.word	0xe000e100
    ff40:	e000e104 	.word	0xe000e104
    ff44:	e000e180 	.word	0xe000e180

0000ff48 <_psp_init_readyqs>:
_psp_init_readyqs():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:104
   KERNEL_DATA_STRUCT_PTR kernel_data;
   READY_Q_STRUCT_PTR     q_ptr;
   uint_32                priority_levels;
   uint_32                n;

    _GET_KERNEL_DATA(kernel_data);
    ff48:	4b15      	ldr	r3, [pc, #84]	; (ffa0 <_psp_init_readyqs+0x58>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:98

uint_32 _psp_init_readyqs
    (
        void
    )
{ /* Body */
    ff4a:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:104
   KERNEL_DATA_STRUCT_PTR kernel_data;
   READY_Q_STRUCT_PTR     q_ptr;
   uint_32                priority_levels;
   uint_32                n;

    _GET_KERNEL_DATA(kernel_data);
    ff4c:	681f      	ldr	r7, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:105
    kernel_data->READY_Q_LIST = (READY_Q_STRUCT_PTR) NULL;
    ff4e:	2300      	movs	r3, #0
    ff50:	623b      	str	r3, [r7, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:106
    priority_levels = kernel_data->LOWEST_TASK_PRIORITY + 2;
    ff52:	33d0      	adds	r3, #208	; 0xd0
    ff54:	58fb      	ldr	r3, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:121
    #endif /* MQX_CHECK_MEMORY_ALLOCATION_ERRORS */
    _mem_set_type(q_ptr, MEM_TYPE_READYQ);
#endif /* MQX_LITE_VERSION_NUMBER */

    n = priority_levels;
    while (n--) {
    ff56:	1c5a      	adds	r2, r3, #1
    ff58:	3302      	adds	r3, #2
    ff5a:	d01f      	beq.n	ff9c <_psp_init_readyqs+0x54>
    ff5c:	23b4      	movs	r3, #180	; 0xb4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:127
        q_ptr->HEAD_READY_Q  = (TD_STRUCT_PTR)q_ptr;
        q_ptr->TAIL_READY_Q  = (TD_STRUCT_PTR)q_ptr;
        q_ptr->PRIORITY      = (uint_16)n;

        if (n + kernel_data->INIT.MQX_HARDWARE_INTERRUPT_LEVEL_MAX < ((1 << CORTEX_PRIOR_IMPL) - 1))
            q_ptr->ENABLE_SR   = CORTEX_PRIOR(n + kernel_data->INIT.MQX_HARDWARE_INTERRUPT_LEVEL_MAX);
    ff5e:	21ff      	movs	r1, #255	; 0xff
    ff60:	005b      	lsls	r3, r3, #1
    ff62:	58fe      	ldr	r6, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:121
    #endif /* MQX_CHECK_MEMORY_ALLOCATION_ERRORS */
    _mem_set_type(q_ptr, MEM_TYPE_READYQ);
#endif /* MQX_LITE_VERSION_NUMBER */

    n = priority_levels;
    while (n--) {
    ff64:	2500      	movs	r5, #0
    ff66:	4b0f      	ldr	r3, [pc, #60]	; (ffa4 <_psp_init_readyqs+0x5c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:127
        q_ptr->HEAD_READY_Q  = (TD_STRUCT_PTR)q_ptr;
        q_ptr->TAIL_READY_Q  = (TD_STRUCT_PTR)q_ptr;
        q_ptr->PRIORITY      = (uint_16)n;

        if (n + kernel_data->INIT.MQX_HARDWARE_INTERRUPT_LEVEL_MAX < ((1 << CORTEX_PRIOR_IMPL) - 1))
            q_ptr->ENABLE_SR   = CORTEX_PRIOR(n + kernel_data->INIT.MQX_HARDWARE_INTERRUPT_LEVEL_MAX);
    ff68:	468c      	mov	ip, r1
    ff6a:	e000      	b.n	ff6e <_psp_init_readyqs+0x26>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:132
        else
            q_ptr->ENABLE_SR   = CORTEX_PRIOR((1 << CORTEX_PRIOR_IMPL) - 2);

        q_ptr->NEXT_Q        = kernel_data->READY_Q_LIST;
        kernel_data->READY_Q_LIST = q_ptr++;
    ff6c:	1c0b      	adds	r3, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:124

    n = priority_levels;
    while (n--) {
        q_ptr->HEAD_READY_Q  = (TD_STRUCT_PTR)q_ptr;
        q_ptr->TAIL_READY_Q  = (TD_STRUCT_PTR)q_ptr;
        q_ptr->PRIORITY      = (uint_16)n;
    ff6e:	b294      	uxth	r4, r2
    ff70:	1990      	adds	r0, r2, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:122
    _mem_set_type(q_ptr, MEM_TYPE_READYQ);
#endif /* MQX_LITE_VERSION_NUMBER */

    n = priority_levels;
    while (n--) {
        q_ptr->HEAD_READY_Q  = (TD_STRUCT_PTR)q_ptr;
    ff72:	601b      	str	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:123
        q_ptr->TAIL_READY_Q  = (TD_STRUCT_PTR)q_ptr;
    ff74:	605b      	str	r3, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:124
        q_ptr->PRIORITY      = (uint_16)n;
    ff76:	81dc      	strh	r4, [r3, #14]
    ff78:	2100      	movs	r1, #0
    ff7a:	2800      	cmp	r0, #0
    ff7c:	d103      	bne.n	ff86 <_psp_init_readyqs+0x3e>
    ff7e:	4660      	mov	r0, ip
    ff80:	19a1      	adds	r1, r4, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:127

        if (n + kernel_data->INIT.MQX_HARDWARE_INTERRUPT_LEVEL_MAX < ((1 << CORTEX_PRIOR_IMPL) - 1))
            q_ptr->ENABLE_SR   = CORTEX_PRIOR(n + kernel_data->INIT.MQX_HARDWARE_INTERRUPT_LEVEL_MAX);
    ff82:	01c9      	lsls	r1, r1, #7
    ff84:	4001      	ands	r1, r0
    ff86:	8199      	strh	r1, [r3, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:132
        else
            q_ptr->ENABLE_SR   = CORTEX_PRIOR((1 << CORTEX_PRIOR_IMPL) - 2);

        q_ptr->NEXT_Q        = kernel_data->READY_Q_LIST;
        kernel_data->READY_Q_LIST = q_ptr++;
    ff88:	1c19      	adds	r1, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:131
        if (n + kernel_data->INIT.MQX_HARDWARE_INTERRUPT_LEVEL_MAX < ((1 << CORTEX_PRIOR_IMPL) - 1))
            q_ptr->ENABLE_SR   = CORTEX_PRIOR(n + kernel_data->INIT.MQX_HARDWARE_INTERRUPT_LEVEL_MAX);
        else
            q_ptr->ENABLE_SR   = CORTEX_PRIOR((1 << CORTEX_PRIOR_IMPL) - 2);

        q_ptr->NEXT_Q        = kernel_data->READY_Q_LIST;
    ff8a:	609d      	str	r5, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:132
        kernel_data->READY_Q_LIST = q_ptr++;
    ff8c:	3110      	adds	r1, #16
    ff8e:	1c1d      	adds	r5, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:121
    #endif /* MQX_CHECK_MEMORY_ALLOCATION_ERRORS */
    _mem_set_type(q_ptr, MEM_TYPE_READYQ);
#endif /* MQX_LITE_VERSION_NUMBER */

    n = priority_levels;
    while (n--) {
    ff90:	3a01      	subs	r2, #1
    ff92:	d2eb      	bcs.n	ff6c <_psp_init_readyqs+0x24>
    ff94:	623b      	str	r3, [r7, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:140

    /*
    ** Set the current ready q (where the ready queue searches start) to
    ** the head of the list of ready queues.
    */
    kernel_data->CURRENT_READY_Q = kernel_data->READY_Q_LIST;
    ff96:	627b      	str	r3, [r7, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:158
    }
#endif

    return MQX_OK;

} /* Endbody */
    ff98:	2000      	movs	r0, #0
    ff9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:121
    #endif /* MQX_CHECK_MEMORY_ALLOCATION_ERRORS */
    _mem_set_type(q_ptr, MEM_TYPE_READYQ);
#endif /* MQX_LITE_VERSION_NUMBER */

    n = priority_levels;
    while (n--) {
    ff9c:	2300      	movs	r3, #0
    ff9e:	e7fa      	b.n	ff96 <_psp_init_readyqs+0x4e>
    ffa0:	1fffe000 	.word	0x1fffe000
    ffa4:	20003038 	.word	0x20003038

0000ffa8 <_psp_build_stack_frame>:
_psp_build_stack_frame():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:64
      _mqx_uint        status_register,

      /* [IN] the task creation parameter */
      uint_32          create_parameter
   )
{
    ffa8:	b570      	push	{r4, r5, r6, lr}
    ffaa:	1c1e      	adds	r6, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:69
   uchar_ptr stack_base_ptr;
   PSP_STACK_START_STRUCT_PTR stack_start_ptr;
   boolean res = TRUE;

   stack_base_ptr  = (uchar_ptr)_GET_STACK_BASE(stack_ptr, stack_size);
    ffac:	230f      	movs	r3, #15
    ffae:	3a01      	subs	r2, #1
    ffb0:	188a      	adds	r2, r1, r2
    ffb2:	439a      	bics	r2, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:70
   stack_start_ptr = (PSP_STACK_START_STRUCT_PTR)(stack_base_ptr - sizeof(PSP_STACK_START_STRUCT));
    ffb4:	1c15      	adds	r5, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:73

   td_ptr->STACK_BASE  = (pointer)stack_base_ptr;
   td_ptr->STACK_LIMIT = _GET_STACK_LIMIT(stack_ptr, stack_size);
    ffb6:	310f      	adds	r1, #15
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:70
   uchar_ptr stack_base_ptr;
   PSP_STACK_START_STRUCT_PTR stack_start_ptr;
   boolean res = TRUE;

   stack_base_ptr  = (uchar_ptr)_GET_STACK_BASE(stack_ptr, stack_size);
   stack_start_ptr = (PSP_STACK_START_STRUCT_PTR)(stack_base_ptr - sizeof(PSP_STACK_START_STRUCT));
    ffb8:	3d5c      	subs	r5, #92	; 0x5c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:73

   td_ptr->STACK_BASE  = (pointer)stack_base_ptr;
   td_ptr->STACK_LIMIT = _GET_STACK_LIMIT(stack_ptr, stack_size);
    ffba:	4399      	bics	r1, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:74
   td_ptr->STACK_PTR   = stack_start_ptr;
    ffbc:	6145      	str	r5, [r0, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:72
   boolean res = TRUE;

   stack_base_ptr  = (uchar_ptr)_GET_STACK_BASE(stack_ptr, stack_size);
   stack_start_ptr = (PSP_STACK_START_STRUCT_PTR)(stack_base_ptr - sizeof(PSP_STACK_START_STRUCT));

   td_ptr->STACK_BASE  = (pointer)stack_base_ptr;
    ffbe:	6102      	str	r2, [r0, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:73
   td_ptr->STACK_LIMIT = _GET_STACK_LIMIT(stack_ptr, stack_size);
    ffc0:	6181      	str	r1, [r0, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:81
   /*
   ** Build the task's initial stack frame. This contains the initialized
   ** registers, and an exception frame which will cause the task to
   ** "return" to the start of the task when it is dispatched.
   */
   _mem_zero(stack_start_ptr, (_mem_size)sizeof(PSP_STACK_START_STRUCT));
    ffc2:	1c28      	adds	r0, r5, #0
    ffc4:	215c      	movs	r1, #92	; 0x5c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:64
      _mqx_uint        status_register,

      /* [IN] the task creation parameter */
      uint_32          create_parameter
   )
{
    ffc6:	9c05      	ldr	r4, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:81
   /*
   ** Build the task's initial stack frame. This contains the initialized
   ** registers, and an exception frame which will cause the task to
   ** "return" to the start of the task when it is dispatched.
   */
   _mem_zero(stack_start_ptr, (_mem_size)sizeof(PSP_STACK_START_STRUCT));
    ffc8:	f7ff fec8 	bl	fd5c <_mem_zero>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:82
   stack_start_ptr->INITIAL_CONTEXT.LR = (uint_32)_task_exit_function_internal;
    ffcc:	4b06      	ldr	r3, [pc, #24]	; (ffe8 <_psp_build_stack_frame+0x40>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:84
   stack_start_ptr->INITIAL_CONTEXT.R0 = (uint_32)create_parameter;
   stack_start_ptr->INITIAL_CONTEXT.PC = (uint_32)(template_ptr->TASK_ADDRESS) | 1;
    ffce:	6872      	ldr	r2, [r6, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:82
   ** Build the task's initial stack frame. This contains the initialized
   ** registers, and an exception frame which will cause the task to
   ** "return" to the start of the task when it is dispatched.
   */
   _mem_zero(stack_start_ptr, (_mem_size)sizeof(PSP_STACK_START_STRUCT));
   stack_start_ptr->INITIAL_CONTEXT.LR = (uint_32)_task_exit_function_internal;
    ffd0:	63ab      	str	r3, [r5, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:84
   stack_start_ptr->INITIAL_CONTEXT.R0 = (uint_32)create_parameter;
   stack_start_ptr->INITIAL_CONTEXT.PC = (uint_32)(template_ptr->TASK_ADDRESS) | 1;
    ffd2:	2301      	movs	r3, #1
    ffd4:	4313      	orrs	r3, r2
    ffd6:	63eb      	str	r3, [r5, #60]	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:85
   stack_start_ptr->INITIAL_CONTEXT.PSR = 0x01000000;
    ffd8:	2380      	movs	r3, #128	; 0x80
    ffda:	045b      	lsls	r3, r3, #17
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:83
   ** registers, and an exception frame which will cause the task to
   ** "return" to the start of the task when it is dispatched.
   */
   _mem_zero(stack_start_ptr, (_mem_size)sizeof(PSP_STACK_START_STRUCT));
   stack_start_ptr->INITIAL_CONTEXT.LR = (uint_32)_task_exit_function_internal;
   stack_start_ptr->INITIAL_CONTEXT.R0 = (uint_32)create_parameter;
    ffdc:	626c      	str	r4, [r5, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:85
   stack_start_ptr->INITIAL_CONTEXT.PC = (uint_32)(template_ptr->TASK_ADDRESS) | 1;
   stack_start_ptr->INITIAL_CONTEXT.PSR = 0x01000000;
    ffde:	642b      	str	r3, [r5, #64]	; 0x40
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:86
   stack_start_ptr->PARAMETER = create_parameter;
    ffe0:	652c      	str	r4, [r5, #80]	; 0x50
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:101
      res = _psp_build_float_context(td_ptr);
   }
#endif /* MQXCFG_ENABLE_FP && PSP_HAS_FPU */

   return res;
}
    ffe2:	2001      	movs	r0, #1
    ffe4:	bd70      	pop	{r4, r5, r6, pc}
    ffe6:	46c0      	nop			; (mov r8, r8)
    ffe8:	00010835 	.word	0x00010835

0000ffec <_psp_destroy_stack_frame>:
_psp_destroy_stack_frame():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_de.c:54
   )
{/* Body */

   /* Nothing to do for this CPU */

}/* Endbody */
    ffec:	4770      	bx	lr
    ffee:	46c0      	nop			; (mov r8, r8)

0000fff0 <_mqx_idle_task>:
_mqx_idle_task():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/idletask.c:59
        uint_32 parameter
    )
{ /* Body */
    volatile KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);
    fff0:	4b02      	ldr	r3, [pc, #8]	; (fffc <_mqx_idle_task+0xc>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/idletask.c:56
 */
void _mqx_idle_task
    (
        uint_32 parameter
    )
{ /* Body */
    fff2:	b082      	sub	sp, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/idletask.c:59
    volatile KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);
    fff4:	681b      	ldr	r3, [r3, #0]
    fff6:	9301      	str	r3, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/idletask.c:78 (discriminator 1)
        {
            _ASM_SLEEP();
        }
#endif

    } /* Endwhile */
    fff8:	e7fe      	b.n	fff8 <_mqx_idle_task+0x8>
    fffa:	46c0      	nop			; (mov r8, r8)
    fffc:	1fffe000 	.word	0x1fffe000

00010000 <_int_default_isr>:
_int_default_isr():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:62
 */
void _int_default_isr
(
    pointer vector_number
)
{ /* Body */
   10000:	b538      	push	{r3, r4, r5, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:66
    KERNEL_DATA_STRUCT_PTR kernel_data;
    TD_STRUCT_PTR          td_ptr;

    _GET_KERNEL_DATA(kernel_data);
   10002:	4d11      	ldr	r5, [pc, #68]	; (10048 <_int_default_isr+0x48>)
   10004:	682a      	ldr	r2, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:68

    td_ptr = kernel_data->ACTIVE_PTR;
   10006:	69d4      	ldr	r4, [r2, #28]
_int_disable():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:106
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    _INT_DISABLE_CODE();
   10008:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1000a:	2b00      	cmp	r3, #0
   1000c:	d100      	bne.n	10010 <_int_default_isr+0x10>
   1000e:	b672      	cpsid	i
_int_default_isr():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:73
    td_ptr = kernel_data->ACTIVE_PTR;
    _KLOGE5(KLOG_int_default_isr, td_ptr, vector_number,
                    &vector_number, vector_number);

    _int_disable();
    if (td_ptr->STATE != UNHANDLED_INT_BLOCKED)
   10010:	68a1      	ldr	r1, [r4, #8]
_int_disable():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:106
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    _INT_DISABLE_CODE();
   10012:	3301      	adds	r3, #1
   10014:	6563      	str	r3, [r4, #84]	; 0x54
_int_default_isr():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:73
    td_ptr = kernel_data->ACTIVE_PTR;
    _KLOGE5(KLOG_int_default_isr, td_ptr, vector_number,
                    &vector_number, vector_number);

    _int_disable();
    if (td_ptr->STATE != UNHANDLED_INT_BLOCKED)
   10016:	290b      	cmp	r1, #11
   10018:	d00d      	beq.n	10036 <_int_default_isr+0x36>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:75
    {
        td_ptr->STATE = UNHANDLED_INT_BLOCKED;
   1001a:	230b      	movs	r3, #11
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:76
        td_ptr->INFO = (_mqx_uint) vector_number;
   1001c:	63a0      	str	r0, [r4, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:75
                    &vector_number, vector_number);

    _int_disable();
    if (td_ptr->STATE != UNHANDLED_INT_BLOCKED)
    {
        td_ptr->STATE = UNHANDLED_INT_BLOCKED;
   1001e:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:77
        td_ptr->INFO = (_mqx_uint) vector_number;
        _task_set_error_td_internal(td_ptr, MQX_UNHANDLED_INTERRUPT);
   10020:	1c20      	adds	r0, r4, #0
   10022:	2141      	movs	r1, #65	; 0x41
   10024:	f000 ff8a 	bl	10f3c <_task_set_error_td_internal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:78
        _QUEUE_UNLINK(td_ptr);
   10028:	6862      	ldr	r2, [r4, #4]
   1002a:	6823      	ldr	r3, [r4, #0]
   1002c:	6013      	str	r3, [r2, #0]
   1002e:	605a      	str	r2, [r3, #4]
   10030:	682a      	ldr	r2, [r5, #0]
   10032:	69d4      	ldr	r4, [r2, #28]
   10034:	6d63      	ldr	r3, [r4, #84]	; 0x54
_int_enable():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:129
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    _INT_ENABLE_CODE();
   10036:	2b00      	cmp	r3, #0
   10038:	d004      	beq.n	10044 <_int_default_isr+0x44>
   1003a:	3b01      	subs	r3, #1
   1003c:	6563      	str	r3, [r4, #84]	; 0x54
   1003e:	2b00      	cmp	r3, #0
   10040:	d100      	bne.n	10044 <_int_default_isr+0x44>
   10042:	b662      	cpsie	i
_int_default_isr():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:82
        _task_set_error_td_internal(td_ptr, MQX_UNHANDLED_INTERRUPT);
        _QUEUE_UNLINK(td_ptr);
    } /* Endif */
    _int_enable();

} /* Endbody */
   10044:	bd38      	pop	{r3, r4, r5, pc}
   10046:	46c0      	nop			; (mov r8, r8)
   10048:	1fffe000 	.word	0x1fffe000

0001004c <_int_disable>:
_int_disable():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:106
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    _INT_DISABLE_CODE();
   1004c:	4b04      	ldr	r3, [pc, #16]	; (10060 <_int_disable+0x14>)
   1004e:	681b      	ldr	r3, [r3, #0]
   10050:	69da      	ldr	r2, [r3, #28]
   10052:	6d53      	ldr	r3, [r2, #84]	; 0x54
   10054:	2b00      	cmp	r3, #0
   10056:	d100      	bne.n	1005a <_int_disable+0xe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:106 (discriminator 1)
   10058:	b672      	cpsid	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:106 (discriminator 3)
   1005a:	3301      	adds	r3, #1
   1005c:	6553      	str	r3, [r2, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:108 (discriminator 3)

} /* Endbody */
   1005e:	4770      	bx	lr
   10060:	1fffe000 	.word	0x1fffe000

00010064 <_int_enable>:
_int_enable():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:127
 */
void _int_enable(void)
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);
   10064:	4b05      	ldr	r3, [pc, #20]	; (1007c <_int_enable+0x18>)
   10066:	6819      	ldr	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:129

    _INT_ENABLE_CODE();
   10068:	69ca      	ldr	r2, [r1, #28]
   1006a:	6d53      	ldr	r3, [r2, #84]	; 0x54
   1006c:	2b00      	cmp	r3, #0
   1006e:	d004      	beq.n	1007a <_int_enable+0x16>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:129 (discriminator 1)
   10070:	3b01      	subs	r3, #1
   10072:	6553      	str	r3, [r2, #84]	; 0x54
   10074:	2b00      	cmp	r3, #0
   10076:	d100      	bne.n	1007a <_int_enable+0x16>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:129 (discriminator 2)
   10078:	b662      	cpsie	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:131

} /* Endbody */
   1007a:	4770      	bx	lr
   1007c:	1fffe000 	.word	0x1fffe000

00010080 <_int_get_isr_data>:
_int_get_isr_data():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:329

pointer _int_get_isr_data
(
    _mqx_uint vector
)
{ /* Body */
   10080:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:332
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);
   10082:	4b0e      	ldr	r3, [pc, #56]	; (100bc <_int_get_isr_data+0x3c>)
   10084:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:334
#if MQX_CHECK_ERRORS
    if ( kernel_data->INTERRUPT_TABLE_PTR == NULL )
   10086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   10088:	2a00      	cmp	r2, #0
   1008a:	d011      	beq.n	100b0 <_int_get_isr_data+0x30>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:339
    {
        _task_set_error(MQX_COMPONENT_DOES_NOT_EXIST);
        return(NULL);
    } /* Endif */
    if ((vector < kernel_data->FIRST_USER_ISR_VECTOR) ||
   1008c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1008e:	4281      	cmp	r1, r0
   10090:	d809      	bhi.n	100a6 <_int_get_isr_data+0x26>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:339 (discriminator 1)
   10092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10094:	4298      	cmp	r0, r3
   10096:	d806      	bhi.n	100a6 <_int_get_isr_data+0x26>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:347
        _task_set_error(MQX_INVALID_VECTORED_INTERRUPT);
        return(NULL);
    }/* Endif */
#endif

    vector -= kernel_data->FIRST_USER_ISR_VECTOR;
   10098:	1a40      	subs	r0, r0, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:348
    return(kernel_data->INTERRUPT_TABLE_PTR[vector].APP_ISR_DATA);
   1009a:	0043      	lsls	r3, r0, #1
   1009c:	1818      	adds	r0, r3, r0
   1009e:	0080      	lsls	r0, r0, #2
   100a0:	1810      	adds	r0, r2, r0
   100a2:	6880      	ldr	r0, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:350

} /* Endbody */
   100a4:	bd08      	pop	{r3, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:342
        return(NULL);
    } /* Endif */
    if ((vector < kernel_data->FIRST_USER_ISR_VECTOR) ||
        (vector > kernel_data->LAST_USER_ISR_VECTOR))
    {
        _task_set_error(MQX_INVALID_VECTORED_INTERRUPT);
   100a6:	2014      	movs	r0, #20
   100a8:	f000 fd42 	bl	10b30 <_task_set_error>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:343
        return(NULL);
   100ac:	2000      	movs	r0, #0
   100ae:	e7f9      	b.n	100a4 <_int_get_isr_data+0x24>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:336

    _GET_KERNEL_DATA(kernel_data);
#if MQX_CHECK_ERRORS
    if ( kernel_data->INTERRUPT_TABLE_PTR == NULL )
    {
        _task_set_error(MQX_COMPONENT_DOES_NOT_EXIST);
   100b0:	2018      	movs	r0, #24
   100b2:	f000 fd3d 	bl	10b30 <_task_set_error>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:337
        return(NULL);
   100b6:	2000      	movs	r0, #0
   100b8:	e7f4      	b.n	100a4 <_int_get_isr_data+0x24>
   100ba:	46c0      	nop			; (mov r8, r8)
   100bc:	1fffe000 	.word	0x1fffe000

000100c0 <_int_install_isr>:
_int_install_isr():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:558
{ /* Body */
    KERNEL_DATA_STRUCT_PTR     kernel_data;
    INTERRUPT_TABLE_STRUCT_PTR table_ptr;
    INT_ISR_FPTR               old_isr_ptr;

    _GET_KERNEL_DATA(kernel_data);
   100c0:	4b17      	ldr	r3, [pc, #92]	; (10120 <_int_install_isr+0x60>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:553
(
    _mqx_uint        vector,
    INT_ISR_FPTR     isr_ptr,
    pointer          isr_data
)
{ /* Body */
   100c2:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:558
    KERNEL_DATA_STRUCT_PTR     kernel_data;
    INTERRUPT_TABLE_STRUCT_PTR table_ptr;
    INT_ISR_FPTR               old_isr_ptr;

    _GET_KERNEL_DATA(kernel_data);
   100c4:	681c      	ldr	r4, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:563

    _KLOGE4(KLOG_int_install_isr, vector, isr_ptr, isr_data);

#if MQX_CHECK_ERRORS
    if ( kernel_data->INTERRUPT_TABLE_PTR == NULL )
   100c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   100c8:	2b00      	cmp	r3, #0
   100ca:	d023      	beq.n	10114 <_int_install_isr+0x54>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:568
    {
        _task_set_error(MQX_COMPONENT_DOES_NOT_EXIST);
        return(NULL);
    } /* Endif */
    if ((vector < kernel_data->FIRST_USER_ISR_VECTOR) ||
   100cc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   100ce:	4285      	cmp	r5, r0
   100d0:	d81b      	bhi.n	1010a <_int_install_isr+0x4a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:568 (discriminator 1)
   100d2:	6b26      	ldr	r6, [r4, #48]	; 0x30
   100d4:	42b0      	cmp	r0, r6
   100d6:	d818      	bhi.n	1010a <_int_install_isr+0x4a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:577
        _KLOGX2(KLOG_int_install_isr, NULL);
        return(NULL);
    }/* Endif */
#endif

    table_ptr = &kernel_data->INTERRUPT_TABLE_PTR[vector -
   100d8:	1b40      	subs	r0, r0, r5
   100da:	0045      	lsls	r5, r0, #1
   100dc:	1828      	adds	r0, r5, r0
_int_disable():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:106
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    _INT_DISABLE_CODE();
   100de:	69e5      	ldr	r5, [r4, #28]
_int_install_isr():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:577
        _KLOGX2(KLOG_int_install_isr, NULL);
        return(NULL);
    }/* Endif */
#endif

    table_ptr = &kernel_data->INTERRUPT_TABLE_PTR[vector -
   100e0:	0080      	lsls	r0, r0, #2
_int_disable():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:106
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    _INT_DISABLE_CODE();
   100e2:	6d6e      	ldr	r6, [r5, #84]	; 0x54
_int_install_isr():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:577
        _KLOGX2(KLOG_int_install_isr, NULL);
        return(NULL);
    }/* Endif */
#endif

    table_ptr = &kernel_data->INTERRUPT_TABLE_PTR[vector -
   100e4:	181b      	adds	r3, r3, r0
_int_disable():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:106
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    _INT_DISABLE_CODE();
   100e6:	2e00      	cmp	r6, #0
   100e8:	d106      	bne.n	100f8 <_int_install_isr+0x38>
   100ea:	b672      	cpsid	i
_int_install_isr():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:581

    table_ptr = &kernel_data->INTERRUPT_TABLE_PTR[vector -
                                                  kernel_data->FIRST_USER_ISR_VECTOR];

    _int_disable();
    old_isr_ptr = table_ptr->APP_ISR;
   100ec:	6818      	ldr	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:583
    table_ptr->APP_ISR  = isr_ptr;
    table_ptr->APP_ISR_DATA = isr_data;
   100ee:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:582
    table_ptr = &kernel_data->INTERRUPT_TABLE_PTR[vector -
                                                  kernel_data->FIRST_USER_ISR_VECTOR];

    _int_disable();
    old_isr_ptr = table_ptr->APP_ISR;
    table_ptr->APP_ISR  = isr_ptr;
   100f0:	6019      	str	r1, [r3, #0]
_int_enable():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:129
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    _INT_ENABLE_CODE();
   100f2:	656e      	str	r6, [r5, #84]	; 0x54
   100f4:	b662      	cpsie	i
_int_install_isr():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:590

    _KLOGX2(KLOG_int_install_isr, old_isr_ptr);

    return (old_isr_ptr);

} /* Endbody */
   100f6:	bd70      	pop	{r4, r5, r6, pc}
_int_disable():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:106
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    _INT_DISABLE_CODE();
   100f8:	1c74      	adds	r4, r6, #1
   100fa:	656c      	str	r4, [r5, #84]	; 0x54
_int_install_isr():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:581

    table_ptr = &kernel_data->INTERRUPT_TABLE_PTR[vector -
                                                  kernel_data->FIRST_USER_ISR_VECTOR];

    _int_disable();
    old_isr_ptr = table_ptr->APP_ISR;
   100fc:	6818      	ldr	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:583
    table_ptr->APP_ISR  = isr_ptr;
    table_ptr->APP_ISR_DATA = isr_data;
   100fe:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:582
    table_ptr = &kernel_data->INTERRUPT_TABLE_PTR[vector -
                                                  kernel_data->FIRST_USER_ISR_VECTOR];

    _int_disable();
    old_isr_ptr = table_ptr->APP_ISR;
    table_ptr->APP_ISR  = isr_ptr;
   10100:	6019      	str	r1, [r3, #0]
_int_enable():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:129
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    _INT_ENABLE_CODE();
   10102:	2c00      	cmp	r4, #0
   10104:	d0f7      	beq.n	100f6 <_int_install_isr+0x36>
   10106:	656e      	str	r6, [r5, #84]	; 0x54
   10108:	e7f5      	b.n	100f6 <_int_install_isr+0x36>
_int_install_isr():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:571
        return(NULL);
    } /* Endif */
    if ((vector < kernel_data->FIRST_USER_ISR_VECTOR) ||
        (vector > kernel_data->LAST_USER_ISR_VECTOR))
    {
        _task_set_error(MQX_INVALID_VECTORED_INTERRUPT);
   1010a:	2014      	movs	r0, #20
   1010c:	f000 fd10 	bl	10b30 <_task_set_error>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:573
        _KLOGX2(KLOG_int_install_isr, NULL);
        return(NULL);
   10110:	2000      	movs	r0, #0
   10112:	e7f0      	b.n	100f6 <_int_install_isr+0x36>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:565
    _KLOGE4(KLOG_int_install_isr, vector, isr_ptr, isr_data);

#if MQX_CHECK_ERRORS
    if ( kernel_data->INTERRUPT_TABLE_PTR == NULL )
    {
        _task_set_error(MQX_COMPONENT_DOES_NOT_EXIST);
   10114:	2018      	movs	r0, #24
   10116:	f000 fd0b 	bl	10b30 <_task_set_error>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:566
        return(NULL);
   1011a:	2000      	movs	r0, #0
   1011c:	e7eb      	b.n	100f6 <_int_install_isr+0x36>
   1011e:	46c0      	nop			; (mov r8, r8)
   10120:	1fffe000 	.word	0x1fffe000

00010124 <_int_init>:
_int_init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:971
_mqx_uint _int_init
(
    _mqx_uint          first_user_isr_vector_number,
    _mqx_uint          last_user_isr_vector_number
)
{ /* Body */
   10124:	b530      	push	{r4, r5, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:979
    _mqx_uint                  number;

#if MQX_CHECK_ERRORS
    if (last_user_isr_vector_number < first_user_isr_vector_number)
    {
        return MQX_INVALID_PARAMETER;
   10126:	230c      	movs	r3, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:977
    KERNEL_DATA_STRUCT_PTR     kernel_data;
    INTERRUPT_TABLE_STRUCT_PTR int_table_ptr;
    _mqx_uint                  number;

#if MQX_CHECK_ERRORS
    if (last_user_isr_vector_number < first_user_isr_vector_number)
   10128:	4281      	cmp	r1, r0
   1012a:	d201      	bcs.n	10130 <_int_init+0xc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1036

#endif /* MQX_SPARSE_ISR_TABLE */

    return MQX_OK;

} /* Endbody */
   1012c:	1c18      	adds	r0, r3, #0
   1012e:	bd30      	pop	{r4, r5, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:983
    {
        return MQX_INVALID_PARAMETER;
    } /* Endif */
#endif

    _GET_KERNEL_DATA(kernel_data);
   10130:	4b0b      	ldr	r3, [pc, #44]	; (10160 <_int_init+0x3c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:984
    kernel_data->INT_KERNEL_ISR_ADDR = _int_kernel_isr;
   10132:	4a0c      	ldr	r2, [pc, #48]	; (10164 <_int_init+0x40>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:983
    {
        return MQX_INVALID_PARAMETER;
    } /* Endif */
#endif

    _GET_KERNEL_DATA(kernel_data);
   10134:	681d      	ldr	r5, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:984
    kernel_data->INT_KERNEL_ISR_ADDR = _int_kernel_isr;
   10136:	23c4      	movs	r3, #196	; 0xc4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:989

    /* Set the current default ISR for MQX that is called whenever an
     * unhandled interrupt occurs
     */
    kernel_data->DEFAULT_ISR = _int_default_isr;
   10138:	4c0b      	ldr	r4, [pc, #44]	; (10168 <_int_init+0x44>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:984
        return MQX_INVALID_PARAMETER;
    } /* Endif */
#endif

    _GET_KERNEL_DATA(kernel_data);
    kernel_data->INT_KERNEL_ISR_ADDR = _int_kernel_isr;
   1013a:	50ea      	str	r2, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1011
#endif /* MQX_CHECK_MEMORY_ALLOCATION_ERRORS */

    _mem_set_type(int_table_ptr, MEM_TYPE_INTERRUPT_TABLE);
#endif /* MQX_LITE_VERSION_NUMBER */

    kernel_data->INTERRUPT_TABLE_PTR   = int_table_ptr;
   1013c:	4b0b      	ldr	r3, [pc, #44]	; (1016c <_int_init+0x48>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:992
     * unhandled interrupt occurs
     */
    kernel_data->DEFAULT_ISR = _int_default_isr;

#if !MQX_SPARSE_ISR_TABLE
    number = last_user_isr_vector_number - first_user_isr_vector_number + 1;
   1013e:	1a0a      	subs	r2, r1, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:989
    kernel_data->INT_KERNEL_ISR_ADDR = _int_kernel_isr;

    /* Set the current default ISR for MQX that is called whenever an
     * unhandled interrupt occurs
     */
    kernel_data->DEFAULT_ISR = _int_default_isr;
   10140:	62ac      	str	r4, [r5, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1011
#endif /* MQX_CHECK_MEMORY_ALLOCATION_ERRORS */

    _mem_set_type(int_table_ptr, MEM_TYPE_INTERRUPT_TABLE);
#endif /* MQX_LITE_VERSION_NUMBER */

    kernel_data->INTERRUPT_TABLE_PTR   = int_table_ptr;
   10142:	63ab      	str	r3, [r5, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1012
    kernel_data->FIRST_USER_ISR_VECTOR = first_user_isr_vector_number;
   10144:	62e8      	str	r0, [r5, #44]	; 0x2c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1013
    kernel_data->LAST_USER_ISR_VECTOR  = last_user_isr_vector_number;
   10146:	6329      	str	r1, [r5, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1016

#if !MQX_SPARSE_ISR_TABLE
    while (number--)
   10148:	1c51      	adds	r1, r2, #1
   1014a:	d007      	beq.n	1015c <_int_init+0x38>
   1014c:	1c41      	adds	r1, r0, #1
   1014e:	188a      	adds	r2, r1, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1019
    {
        int_table_ptr->APP_ISR      = _int_default_isr;
        int_table_ptr->APP_ISR_DATA = (pointer)(first_user_isr_vector_number++);
   10150:	6098      	str	r0, [r3, #8]
   10152:	3001      	adds	r0, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1018
    kernel_data->LAST_USER_ISR_VECTOR  = last_user_isr_vector_number;

#if !MQX_SPARSE_ISR_TABLE
    while (number--)
    {
        int_table_ptr->APP_ISR      = _int_default_isr;
   10154:	601c      	str	r4, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1020
        int_table_ptr->APP_ISR_DATA = (pointer)(first_user_isr_vector_number++);
        ++int_table_ptr;
   10156:	330c      	adds	r3, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1016
    kernel_data->INTERRUPT_TABLE_PTR   = int_table_ptr;
    kernel_data->FIRST_USER_ISR_VECTOR = first_user_isr_vector_number;
    kernel_data->LAST_USER_ISR_VECTOR  = last_user_isr_vector_number;

#if !MQX_SPARSE_ISR_TABLE
    while (number--)
   10158:	4290      	cmp	r0, r2
   1015a:	d1f9      	bne.n	10150 <_int_init+0x2c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1034
        int_table_ptr[number] = NULL;
    }

#endif /* MQX_SPARSE_ISR_TABLE */

    return MQX_OK;
   1015c:	2300      	movs	r3, #0
   1015e:	e7e5      	b.n	1012c <_int_init+0x8>
   10160:	1fffe000 	.word	0x1fffe000
   10164:	00014ebb 	.word	0x00014ebb
   10168:	00010001 	.word	0x00010001
   1016c:	20003108 	.word	0x20003108

00010170 <_lwevent_create>:
_lwevent_create():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:198
_mqx_uint _lwevent_create
(
    LWEVENT_STRUCT_PTR  event_ptr,
    _mqx_uint           flags
)
{
   10170:	b538      	push	{r3, r4, r5, lr}
_lwevent_create_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:78
    {
        return MQX_LWEVENT_INVALID;
    }
#endif

    _GET_KERNEL_DATA(kernel_data);
   10172:	4b1e      	ldr	r3, [pc, #120]	; (101ec <_lwevent_create+0x7c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:84

    _KLOGE2(KLOG_lwevent_create, event_ptr);

    _QUEUE_INIT(&event_ptr->WAITING_TASKS, 0);
    event_ptr->VALUE = 0;
    event_ptr->FLAGS = flags;
   10174:	61c1      	str	r1, [r0, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:78
    {
        return MQX_LWEVENT_INVALID;
    }
#endif

    _GET_KERNEL_DATA(kernel_data);
   10176:	681d      	ldr	r5, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:82

    _KLOGE2(KLOG_lwevent_create, event_ptr);

    _QUEUE_INIT(&event_ptr->WAITING_TASKS, 0);
   10178:	1c03      	adds	r3, r0, #0
   1017a:	3308      	adds	r3, #8
   1017c:	6083      	str	r3, [r0, #8]
   1017e:	60c3      	str	r3, [r0, #12]
   10180:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:86
    event_ptr->VALUE = 0;
    event_ptr->FLAGS = flags;

    if (flags & LWEVENT_AUTO_CLEAR)
   10182:	07c9      	lsls	r1, r1, #31
   10184:	17c9      	asrs	r1, r1, #31
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:82

    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_lwevent_create, event_ptr);

    _QUEUE_INIT(&event_ptr->WAITING_TASKS, 0);
   10186:	8203      	strh	r3, [r0, #16]
   10188:	8243      	strh	r3, [r0, #18]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:83
    event_ptr->VALUE = 0;
   1018a:	6183      	str	r3, [r0, #24]
   1018c:	6201      	str	r1, [r0, #32]
_lwevent_create():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:198
_mqx_uint _lwevent_create
(
    LWEVENT_STRUCT_PTR  event_ptr,
    _mqx_uint           flags
)
{
   1018e:	1c04      	adds	r4, r0, #0
_lwevent_create_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:91
    if (flags & LWEVENT_AUTO_CLEAR)
        event_ptr->AUTO = ~0;
    else
        event_ptr->AUTO = 0;

    _int_disable();
   10190:	f7ff ff5c 	bl	1004c <_int_disable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:105
        }
    }
    else
#endif
    {
        if (kernel_data->LWEVENTS.NEXT == NULL)
   10194:	218e      	movs	r1, #142	; 0x8e
   10196:	0089      	lsls	r1, r1, #2
   10198:	586b      	ldr	r3, [r5, r1]
   1019a:	2b00      	cmp	r3, #0
   1019c:	d00f      	beq.n	101be <_lwevent_create+0x4e>
   1019e:	186a      	adds	r2, r5, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:112
            /* Initialize the light weight event queue */
            _QUEUE_INIT(&kernel_data->LWEVENTS, 0);
        }
    }

    event_ptr->VALID = LWEVENT_VALID;
   101a0:	4913      	ldr	r1, [pc, #76]	; (101f0 <_lwevent_create+0x80>)
   101a2:	6161      	str	r1, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:135
    }
    else
#endif
    {
        event_chk_ptr = (LWEVENT_STRUCT_PTR) ((pointer) kernel_data->LWEVENTS.NEXT);
        while (event_chk_ptr != (LWEVENT_STRUCT_PTR) ((pointer) &kernel_data->LWEVENTS))
   101a4:	4293      	cmp	r3, r2
   101a6:	d103      	bne.n	101b0 <_lwevent_create+0x40>
   101a8:	e012      	b.n	101d0 <_lwevent_create+0x60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:143
            {
                _int_enable();
                _KLOGX2(KLOG_lwevent_create, MQX_EINVAL);
                return (MQX_EINVAL);
            }
            event_chk_ptr = (LWEVENT_STRUCT_PTR) ((pointer) event_chk_ptr->LINK.NEXT);
   101aa:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:135
    }
    else
#endif
    {
        event_chk_ptr = (LWEVENT_STRUCT_PTR) ((pointer) kernel_data->LWEVENTS.NEXT);
        while (event_chk_ptr != (LWEVENT_STRUCT_PTR) ((pointer) &kernel_data->LWEVENTS))
   101ac:	4293      	cmp	r3, r2
   101ae:	d00f      	beq.n	101d0 <_lwevent_create+0x60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:137
        {
            if (event_chk_ptr == event_ptr)
   101b0:	429c      	cmp	r4, r3
   101b2:	d1fa      	bne.n	101aa <_lwevent_create+0x3a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:139
            {
                _int_enable();
   101b4:	f7ff ff56 	bl	10064 <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:141
                _KLOGX2(KLOG_lwevent_create, MQX_EINVAL);
                return (MQX_EINVAL);
   101b8:	2082      	movs	r0, #130	; 0x82
   101ba:	00c0      	lsls	r0, r0, #3
   101bc:	e014      	b.n	101e8 <_lwevent_create+0x78>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:108
#endif
    {
        if (kernel_data->LWEVENTS.NEXT == NULL)
        {
            /* Initialize the light weight event queue */
            _QUEUE_INIT(&kernel_data->LWEVENTS, 0);
   101be:	228e      	movs	r2, #142	; 0x8e
   101c0:	0092      	lsls	r2, r2, #2
   101c2:	18aa      	adds	r2, r5, r2
   101c4:	506a      	str	r2, [r5, r1]
   101c6:	8113      	strh	r3, [r2, #8]
   101c8:	8153      	strh	r3, [r2, #10]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:112
        }
    }

    event_ptr->VALID = LWEVENT_VALID;
   101ca:	4b09      	ldr	r3, [pc, #36]	; (101f0 <_lwevent_create+0x80>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:108
#endif
    {
        if (kernel_data->LWEVENTS.NEXT == NULL)
        {
            /* Initialize the light weight event queue */
            _QUEUE_INIT(&kernel_data->LWEVENTS, 0);
   101cc:	6052      	str	r2, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:112
        }
    }

    event_ptr->VALID = LWEVENT_VALID;
   101ce:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:156
        _QUEUE_ENQUEUE(&kernel_data->USR_LWEVENTS, &event_ptr->LINK);
    }
    else
#endif
    {
        _QUEUE_ENQUEUE(&kernel_data->LWEVENTS, &event_ptr->LINK);
   101d0:	6853      	ldr	r3, [r2, #4]
   101d2:	6819      	ldr	r1, [r3, #0]
   101d4:	6021      	str	r1, [r4, #0]
   101d6:	601c      	str	r4, [r3, #0]
   101d8:	6063      	str	r3, [r4, #4]
   101da:	604c      	str	r4, [r1, #4]
   101dc:	8913      	ldrh	r3, [r2, #8]
   101de:	3301      	adds	r3, #1
   101e0:	8113      	strh	r3, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:159
    }

    _int_enable();
   101e2:	f7ff ff3f 	bl	10064 <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:162

    _KLOGX2(KLOG_lwevent_create, MQX_OK);
    return (MQX_OK);
   101e6:	2000      	movs	r0, #0
_lwevent_create():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:207
        return _usr_lwevent_create(event_ptr, flags);
    }
#endif

    return _lwevent_create_internal(event_ptr, flags, FALSE);
}
   101e8:	bd38      	pop	{r3, r4, r5, pc}
   101ea:	46c0      	nop			; (mov r8, r8)
   101ec:	1fffe000 	.word	0x1fffe000
   101f0:	6c65766e 	.word	0x6c65766e

000101f4 <_lwevent_set>:
_lwevent_set():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:734
_mqx_uint _lwevent_set
(
    LWEVENT_STRUCT_PTR  event_ptr,
    _mqx_uint           bit_mask
)
{
   101f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   101f6:	4656      	mov	r6, sl
   101f8:	464d      	mov	r5, r9
   101fa:	465f      	mov	r7, fp
   101fc:	4644      	mov	r4, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:748
    {
        return _usr_lwevent_set(event_ptr, bit_mask);
    }
#endif

    _GET_KERNEL_DATA(kernel_data);
   101fe:	4b47      	ldr	r3, [pc, #284]	; (1031c <_lwevent_set+0x128>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:734
_mqx_uint _lwevent_set
(
    LWEVENT_STRUCT_PTR  event_ptr,
    _mqx_uint           bit_mask
)
{
   10200:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:748
    {
        return _usr_lwevent_set(event_ptr, bit_mask);
    }
#endif

    _GET_KERNEL_DATA(kernel_data);
   10202:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:734
_mqx_uint _lwevent_set
(
    LWEVENT_STRUCT_PTR  event_ptr,
    _mqx_uint           bit_mask
)
{
   10204:	b085      	sub	sp, #20
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:752

    _GET_KERNEL_DATA(kernel_data);

    _KLOGE3(KLOG_lwevent_set, event_ptr, bit_mask);

    _INT_DISABLE();
   10206:	69de      	ldr	r6, [r3, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:748
    {
        return _usr_lwevent_set(event_ptr, bit_mask);
    }
#endif

    _GET_KERNEL_DATA(kernel_data);
   10208:	469c      	mov	ip, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:752

    _KLOGE3(KLOG_lwevent_set, event_ptr, bit_mask);

    _INT_DISABLE();
   1020a:	6d75      	ldr	r5, [r6, #84]	; 0x54
   1020c:	2d00      	cmp	r5, #0
   1020e:	d100      	bne.n	10212 <_lwevent_set+0x1e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:752 (discriminator 1)
   10210:	b672      	cpsid	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:752 (discriminator 3)
   10212:	1c6b      	adds	r3, r5, #1
   10214:	4698      	mov	r8, r3
   10216:	6573      	str	r3, [r6, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:754 (discriminator 3)
#if MQX_CHECK_VALIDITY
    if (event_ptr->VALID != LWEVENT_VALID)
   10218:	6942      	ldr	r2, [r0, #20]
   1021a:	4b41      	ldr	r3, [pc, #260]	; (10320 <_lwevent_set+0x12c>)
   1021c:	429a      	cmp	r2, r3
   1021e:	d009      	beq.n	10234 <_lwevent_set+0x40>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:756
    {
        _int_enable();
   10220:	f7ff ff20 	bl	10064 <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:758
        _KLOGX2(KLOG_lwevent_set, MQX_LWEVENT_INVALID);
        return (MQX_LWEVENT_INVALID);
   10224:	2039      	movs	r0, #57	; 0x39
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:801
    _CHECK_RUN_SCHEDULER();

    _KLOGX2(KLOG_lwevent_set, MQX_OK);
    return (MQX_OK);

}
   10226:	b005      	add	sp, #20
   10228:	bc3c      	pop	{r2, r3, r4, r5}
   1022a:	4690      	mov	r8, r2
   1022c:	4699      	mov	r9, r3
   1022e:	46a2      	mov	sl, r4
   10230:	46ab      	mov	fp, r5
   10232:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:762
        _KLOGX2(KLOG_lwevent_set, MQX_LWEVENT_INVALID);
        return (MQX_LWEVENT_INVALID);
    } /* Endif */
#endif

    set_bits = event_ptr->VALUE | bit_mask;
   10234:	6983      	ldr	r3, [r0, #24]
   10236:	4319      	orrs	r1, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:764

    if (_QUEUE_GET_SIZE(&event_ptr->WAITING_TASKS))
   10238:	8a03      	ldrh	r3, [r0, #16]
   1023a:	2b00      	cmp	r3, #0
   1023c:	d05b      	beq.n	102f6 <_lwevent_set+0x102>
   1023e:	2308      	movs	r3, #8
   10240:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:774
        while (q_ptr != (QUEUE_ELEMENT_STRUCT_PTR) ((pointer) &event_ptr->WAITING_TASKS))
        {
            td_ptr = (pointer) q_ptr;
            _BACKUP_POINTER(td_ptr, TD_STRUCT, AUX_QUEUE);
            next_q_ptr = q_ptr->NEXT;
            if (((td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED) && ((td_ptr->LWEVENT_BITS & set_bits)
   10242:	3378      	adds	r3, #120	; 0x78
   10244:	469b      	mov	fp, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:779
                            == td_ptr->LWEVENT_BITS)) || ((!(td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED))
                            && (td_ptr->LWEVENT_BITS & set_bits)))
            {
                _QUEUE_REMOVE(&event_ptr->WAITING_TASKS, q_ptr);
                _TIME_DEQUEUE(td_ptr, kernel_data);
   10246:	33b4      	adds	r3, #180	; 0xb4
   10248:	4463      	add	r3, ip
   1024a:	9302      	str	r3, [sp, #8]
   1024c:	4643      	mov	r3, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:768

    if (_QUEUE_GET_SIZE(&event_ptr->WAITING_TASKS))
    {
        /* Schedule waiting task(s) to run if bits ok */

        q_ptr = event_ptr->WAITING_TASKS.NEXT;
   1024e:	6887      	ldr	r7, [r0, #8]
   10250:	4481      	add	r9, r0
   10252:	46b2      	mov	sl, r6
   10254:	9303      	str	r3, [sp, #12]
   10256:	1e3e      	subs	r6, r7, #0
   10258:	4663      	mov	r3, ip
   1025a:	464f      	mov	r7, r9
   1025c:	9300      	str	r3, [sp, #0]
   1025e:	46a9      	mov	r9, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:769
        while (q_ptr != (QUEUE_ELEMENT_STRUCT_PTR) ((pointer) &event_ptr->WAITING_TASKS))
   10260:	42be      	cmp	r6, r7
   10262:	d044      	beq.n	102ee <_lwevent_set+0xfa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:774
        {
            td_ptr = (pointer) q_ptr;
            _BACKUP_POINTER(td_ptr, TD_STRUCT, AUX_QUEUE);
            next_q_ptr = q_ptr->NEXT;
            if (((td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED) && ((td_ptr->LWEVENT_BITS & set_bits)
   10264:	1c33      	adds	r3, r6, #0
   10266:	465d      	mov	r5, fp
   10268:	3b3c      	subs	r3, #60	; 0x3c
   1026a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:773
        q_ptr = event_ptr->WAITING_TASKS.NEXT;
        while (q_ptr != (QUEUE_ELEMENT_STRUCT_PTR) ((pointer) &event_ptr->WAITING_TASKS))
        {
            td_ptr = (pointer) q_ptr;
            _BACKUP_POINTER(td_ptr, TD_STRUCT, AUX_QUEUE);
            next_q_ptr = q_ptr->NEXT;
   1026c:	6834      	ldr	r4, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:774
            if (((td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED) && ((td_ptr->LWEVENT_BITS & set_bits)
   1026e:	422a      	tst	r2, r5
   10270:	d14d      	bne.n	1030e <_lwevent_set+0x11a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:776
                            == td_ptr->LWEVENT_BITS)) || ((!(td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED))
                            && (td_ptr->LWEVENT_BITS & set_bits)))
   10272:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   10274:	400a      	ands	r2, r1
   10276:	d037      	beq.n	102e8 <_lwevent_set+0xf4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:779
            {
                _QUEUE_REMOVE(&event_ptr->WAITING_TASKS, q_ptr);
                _TIME_DEQUEUE(td_ptr, kernel_data);
   10278:	2580      	movs	r5, #128	; 0x80
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:778
            next_q_ptr = q_ptr->NEXT;
            if (((td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED) && ((td_ptr->LWEVENT_BITS & set_bits)
                            == td_ptr->LWEVENT_BITS)) || ((!(td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED))
                            && (td_ptr->LWEVENT_BITS & set_bits)))
            {
                _QUEUE_REMOVE(&event_ptr->WAITING_TASKS, q_ptr);
   1027a:	6876      	ldr	r6, [r6, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:779
                _TIME_DEQUEUE(td_ptr, kernel_data);
   1027c:	006d      	lsls	r5, r5, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:778
            next_q_ptr = q_ptr->NEXT;
            if (((td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED) && ((td_ptr->LWEVENT_BITS & set_bits)
                            == td_ptr->LWEVENT_BITS)) || ((!(td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED))
                            && (td_ptr->LWEVENT_BITS & set_bits)))
            {
                _QUEUE_REMOVE(&event_ptr->WAITING_TASKS, q_ptr);
   1027e:	6034      	str	r4, [r6, #0]
   10280:	6066      	str	r6, [r4, #4]
   10282:	8a06      	ldrh	r6, [r0, #16]
   10284:	3e01      	subs	r6, #1
   10286:	8206      	strh	r6, [r0, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:779
                _TIME_DEQUEUE(td_ptr, kernel_data);
   10288:	689e      	ldr	r6, [r3, #8]
   1028a:	9601      	str	r6, [sp, #4]
   1028c:	422e      	tst	r6, r5
   1028e:	d013      	beq.n	102b8 <_lwevent_set+0xc4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:779 (discriminator 1)
   10290:	685d      	ldr	r5, [r3, #4]
   10292:	681e      	ldr	r6, [r3, #0]
   10294:	602e      	str	r6, [r5, #0]
   10296:	6075      	str	r5, [r6, #4]
   10298:	9d02      	ldr	r5, [sp, #8]
   1029a:	892e      	ldrh	r6, [r5, #8]
   1029c:	46b4      	mov	ip, r6
   1029e:	2601      	movs	r6, #1
   102a0:	4276      	negs	r6, r6
   102a2:	46b0      	mov	r8, r6
   102a4:	44c4      	add	ip, r8
   102a6:	4666      	mov	r6, ip
   102a8:	812e      	strh	r6, [r5, #8]
   102aa:	4d1e      	ldr	r5, [pc, #120]	; (10324 <_lwevent_set+0x130>)
   102ac:	9e01      	ldr	r6, [sp, #4]
   102ae:	402e      	ands	r6, r5
   102b0:	3505      	adds	r5, #5
   102b2:	35ff      	adds	r5, #255	; 0xff
   102b4:	432e      	orrs	r6, r5
   102b6:	609e      	str	r6, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:780
                td_ptr->INFO = 0;
   102b8:	2500      	movs	r5, #0
   102ba:	639d      	str	r5, [r3, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:781
                _TASK_READY(td_ptr, kernel_data);
   102bc:	9d00      	ldr	r5, [sp, #0]
   102be:	69de      	ldr	r6, [r3, #28]
   102c0:	6a6d      	ldr	r5, [r5, #36]	; 0x24
   102c2:	42ae      	cmp	r6, r5
   102c4:	d901      	bls.n	102ca <_lwevent_set+0xd6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:781 (discriminator 1)
   102c6:	9d00      	ldr	r5, [sp, #0]
   102c8:	626e      	str	r6, [r5, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:781 (discriminator 3)
   102ca:	2502      	movs	r5, #2
   102cc:	609d      	str	r5, [r3, #8]
   102ce:	69dd      	ldr	r5, [r3, #28]
   102d0:	46ac      	mov	ip, r5
   102d2:	686e      	ldr	r6, [r5, #4]
   102d4:	6835      	ldr	r5, [r6, #0]
   102d6:	605e      	str	r6, [r3, #4]
   102d8:	601d      	str	r5, [r3, #0]
   102da:	4665      	mov	r5, ip
   102dc:	6033      	str	r3, [r6, #0]
   102de:	606b      	str	r3, [r5, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:784 (discriminator 3)

                /* store information about which bits caused task to be unblocked */
                td_ptr->LWEVENT_BITS &= set_bits;
   102e0:	679a      	str	r2, [r3, #120]	; 0x78
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:785 (discriminator 3)
                set_bits &= ~(event_ptr->AUTO & td_ptr->LWEVENT_BITS);
   102e2:	6a03      	ldr	r3, [r0, #32]
   102e4:	401a      	ands	r2, r3
   102e6:	4391      	bics	r1, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:773
        q_ptr = event_ptr->WAITING_TASKS.NEXT;
        while (q_ptr != (QUEUE_ELEMENT_STRUCT_PTR) ((pointer) &event_ptr->WAITING_TASKS))
        {
            td_ptr = (pointer) q_ptr;
            _BACKUP_POINTER(td_ptr, TD_STRUCT, AUX_QUEUE);
            next_q_ptr = q_ptr->NEXT;
   102e8:	1c26      	adds	r6, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:769
    if (_QUEUE_GET_SIZE(&event_ptr->WAITING_TASKS))
    {
        /* Schedule waiting task(s) to run if bits ok */

        q_ptr = event_ptr->WAITING_TASKS.NEXT;
        while (q_ptr != (QUEUE_ELEMENT_STRUCT_PTR) ((pointer) &event_ptr->WAITING_TASKS))
   102ea:	42be      	cmp	r6, r7
   102ec:	d1ba      	bne.n	10264 <_lwevent_set+0x70>
   102ee:	9b03      	ldr	r3, [sp, #12]
   102f0:	4656      	mov	r6, sl
   102f2:	464d      	mov	r5, r9
   102f4:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:793
            q_ptr = next_q_ptr;
        } /* Endwhile */
    } /* Endif */

    event_ptr->VALUE = set_bits;
    _INT_ENABLE();
   102f6:	4643      	mov	r3, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:792
            } /* Endif */
            q_ptr = next_q_ptr;
        } /* Endwhile */
    } /* Endif */

    event_ptr->VALUE = set_bits;
   102f8:	6181      	str	r1, [r0, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:793
    _INT_ENABLE();
   102fa:	2b00      	cmp	r3, #0
   102fc:	d003      	beq.n	10306 <_lwevent_set+0x112>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:793 (discriminator 1)
   102fe:	6575      	str	r5, [r6, #84]	; 0x54
   10300:	2d00      	cmp	r5, #0
   10302:	d100      	bne.n	10306 <_lwevent_set+0x112>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:793 (discriminator 2)
   10304:	b662      	cpsie	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:796

    /* May need to let higher priority task run */
    _CHECK_RUN_SCHEDULER();
   10306:	f004 fd43 	bl	14d90 <_sched_check_scheduler_internal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:799

    _KLOGX2(KLOG_lwevent_set, MQX_OK);
    return (MQX_OK);
   1030a:	2000      	movs	r0, #0
   1030c:	e78b      	b.n	10226 <_lwevent_set+0x32>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:774 (discriminator 1)
        while (q_ptr != (QUEUE_ELEMENT_STRUCT_PTR) ((pointer) &event_ptr->WAITING_TASKS))
        {
            td_ptr = (pointer) q_ptr;
            _BACKUP_POINTER(td_ptr, TD_STRUCT, AUX_QUEUE);
            next_q_ptr = q_ptr->NEXT;
            if (((td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED) && ((td_ptr->LWEVENT_BITS & set_bits)
   1030e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   10310:	6f9d      	ldr	r5, [r3, #120]	; 0x78
   10312:	400a      	ands	r2, r1
   10314:	4295      	cmp	r5, r2
   10316:	d0af      	beq.n	10278 <_lwevent_set+0x84>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:773
        q_ptr = event_ptr->WAITING_TASKS.NEXT;
        while (q_ptr != (QUEUE_ELEMENT_STRUCT_PTR) ((pointer) &event_ptr->WAITING_TASKS))
        {
            td_ptr = (pointer) q_ptr;
            _BACKUP_POINTER(td_ptr, TD_STRUCT, AUX_QUEUE);
            next_q_ptr = q_ptr->NEXT;
   10318:	1c26      	adds	r6, r4, #0
   1031a:	e7e6      	b.n	102ea <_lwevent_set+0xf6>
   1031c:	1fffe000 	.word	0x1fffe000
   10320:	6c65766e 	.word	0x6c65766e
   10324:	fffffeff 	.word	0xfffffeff

00010328 <_lwevent_wait_for>:
_lwevent_wait_for():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1025
    LWEVENT_STRUCT_PTR  event_ptr,
    _mqx_uint           bit_mask,
    boolean             all,
    MQX_TICK_STRUCT_PTR tick_ptr
)
{
   10328:	b5f0      	push	{r4, r5, r6, r7, lr}
   1032a:	4647      	mov	r7, r8
   1032c:	b480      	push	{r7}
_lwevent_wait_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1142
{
    KERNEL_DATA_STRUCT_PTR  kernel_data;
    TD_STRUCT_PTR           td_ptr;
    _mqx_uint               result;

    _GET_KERNEL_DATA(kernel_data);
   1032e:	4c38      	ldr	r4, [pc, #224]	; (10410 <_lwevent_wait_for+0xe8>)
   10330:	6825      	ldr	r5, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1147

#if MQX_CHECK_ERRORS
    if (kernel_data->IN_ISR)
    {
        return (MQX_CANNOT_CALL_FUNCTION_FROM_ISR);
   10332:	240d      	movs	r4, #13
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1145
    _mqx_uint               result;

    _GET_KERNEL_DATA(kernel_data);

#if MQX_CHECK_ERRORS
    if (kernel_data->IN_ISR)
   10334:	8b2e      	ldrh	r6, [r5, #24]
   10336:	2e00      	cmp	r6, #0
   10338:	d003      	beq.n	10342 <_lwevent_wait_for+0x1a>
_lwevent_wait_for():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1045
    result = _lwevent_wait_internal(event_ptr, bit_mask, all, tick_ptr, FALSE);

    _KLOGX2(KLOG_lwevent_wait_for, result);
    return (result);

}
   1033a:	1c20      	adds	r0, r4, #0
   1033c:	bc04      	pop	{r2}
   1033e:	4690      	mov	r8, r2
   10340:	bdf0      	pop	{r4, r5, r6, r7, pc}
_lwevent_wait_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1152
        return (MQX_CANNOT_CALL_FUNCTION_FROM_ISR);
    } /* Endif */
#endif

    result = MQX_OK;
    td_ptr = kernel_data->ACTIVE_PTR;
   10342:	69ee      	ldr	r6, [r5, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1153
    _INT_DISABLE();
   10344:	6d74      	ldr	r4, [r6, #84]	; 0x54
   10346:	2c00      	cmp	r4, #0
   10348:	d00c      	beq.n	10364 <_lwevent_wait_for+0x3c>
   1034a:	1c07      	adds	r7, r0, #0
   1034c:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1156

#if MQX_CHECK_VALIDITY
    if (event_ptr->VALID != LWEVENT_VALID)
   1034e:	4b31      	ldr	r3, [pc, #196]	; (10414 <_lwevent_wait_for+0xec>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1153
    } /* Endif */
#endif

    result = MQX_OK;
    td_ptr = kernel_data->ACTIVE_PTR;
    _INT_DISABLE();
   10350:	1c60      	adds	r0, r4, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1156

#if MQX_CHECK_VALIDITY
    if (event_ptr->VALID != LWEVENT_VALID)
   10352:	469c      	mov	ip, r3
   10354:	697b      	ldr	r3, [r7, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1153
    } /* Endif */
#endif

    result = MQX_OK;
    td_ptr = kernel_data->ACTIVE_PTR;
    _INT_DISABLE();
   10356:	6570      	str	r0, [r6, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1156

#if MQX_CHECK_VALIDITY
    if (event_ptr->VALID != LWEVENT_VALID)
   10358:	4563      	cmp	r3, ip
   1035a:	d005      	beq.n	10368 <_lwevent_wait_for+0x40>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1158
    {
        _int_enable();
   1035c:	f7ff fe82 	bl	10064 <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1159
        return (MQX_LWEVENT_INVALID);
   10360:	2439      	movs	r4, #57	; 0x39
   10362:	e7ea      	b.n	1033a <_lwevent_wait_for+0x12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1153
    } /* Endif */
#endif

    result = MQX_OK;
    td_ptr = kernel_data->ACTIVE_PTR;
    _INT_DISABLE();
   10364:	b672      	cpsid	i
   10366:	e7f0      	b.n	1034a <_lwevent_wait_for+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1163
        _int_enable();
        return (MQX_LWEVENT_INVALID);
    } /* Endif */
#endif

    if (    (all &&  (event_ptr->VALUE & bit_mask) == bit_mask)
   10368:	2a00      	cmp	r2, #0
   1036a:	d111      	bne.n	10390 <_lwevent_wait_for+0x68>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1164
         || (!all && (event_ptr->VALUE & bit_mask)))
   1036c:	69ba      	ldr	r2, [r7, #24]
   1036e:	1c13      	adds	r3, r2, #0
   10370:	400b      	ands	r3, r1
   10372:	469c      	mov	ip, r3
   10374:	d041      	beq.n	103fa <_lwevent_wait_for+0xd2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1167
    {
        /* store information about which bits caused task to be unblocked */
        td_ptr->LWEVENT_BITS = event_ptr->VALUE & bit_mask;
   10376:	4663      	mov	r3, ip
   10378:	67b3      	str	r3, [r6, #120]	; 0x78
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1169
        /* clear used automatic events */
        event_ptr->VALUE &= ~(event_ptr->AUTO & bit_mask);
   1037a:	6a3b      	ldr	r3, [r7, #32]
   1037c:	4019      	ands	r1, r3
   1037e:	438a      	bics	r2, r1
   10380:	61ba      	str	r2, [r7, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1171

        _INT_ENABLE();
   10382:	2800      	cmp	r0, #0
   10384:	d002      	beq.n	1038c <_lwevent_wait_for+0x64>
   10386:	6574      	str	r4, [r6, #84]	; 0x54
   10388:	2c00      	cmp	r4, #0
   1038a:	d034      	beq.n	103f6 <_lwevent_wait_for+0xce>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1172
        return (result);
   1038c:	2400      	movs	r4, #0
   1038e:	e7d4      	b.n	1033a <_lwevent_wait_for+0x12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1163
        _int_enable();
        return (MQX_LWEVENT_INVALID);
    } /* Endif */
#endif

    if (    (all &&  (event_ptr->VALUE & bit_mask) == bit_mask)
   10390:	69ba      	ldr	r2, [r7, #24]
   10392:	1c13      	adds	r3, r2, #0
   10394:	400b      	ands	r3, r1
   10396:	469c      	mov	ip, r3
   10398:	4299      	cmp	r1, r3
   1039a:	d0ec      	beq.n	10376 <_lwevent_wait_for+0x4e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1180
    /* Must wait for a event to become available */

    td_ptr->LWEVENT_BITS = bit_mask;
    if (all)
    {
        td_ptr->FLAGS |= TASK_LWEVENT_ALL_BITS_WANTED;
   1039c:	2280      	movs	r2, #128	; 0x80
   1039e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1177
        return (result);
    } /* Endif */

    /* Must wait for a event to become available */

    td_ptr->LWEVENT_BITS = bit_mask;
   103a0:	67b1      	str	r1, [r6, #120]	; 0x78
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1180
    if (all)
    {
        td_ptr->FLAGS |= TASK_LWEVENT_ALL_BITS_WANTED;
   103a2:	431a      	orrs	r2, r3
   103a4:	62b2      	str	r2, [r6, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1188
    {
        td_ptr->FLAGS &= ~TASK_LWEVENT_ALL_BITS_WANTED;
    } /* Endif */

    /* Enqueue at end */
    _QUEUE_ENQUEUE(&event_ptr->WAITING_TASKS, &td_ptr->AUX_QUEUE);
   103a6:	1c30      	adds	r0, r6, #0
   103a8:	68fa      	ldr	r2, [r7, #12]
   103aa:	303c      	adds	r0, #60	; 0x3c
   103ac:	6811      	ldr	r1, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1193

    /* Now put the task to sleep */
    td_ptr->STATE = LWEVENT_BLOCKED;
    td_ptr->INFO = (_mqx_uint) &event_ptr->WAITING_TASKS;
    if (tick_ptr)
   103ae:	4643      	mov	r3, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1188
    {
        td_ptr->FLAGS &= ~TASK_LWEVENT_ALL_BITS_WANTED;
    } /* Endif */

    /* Enqueue at end */
    _QUEUE_ENQUEUE(&event_ptr->WAITING_TASKS, &td_ptr->AUX_QUEUE);
   103b0:	63f1      	str	r1, [r6, #60]	; 0x3c
   103b2:	6010      	str	r0, [r2, #0]
   103b4:	6432      	str	r2, [r6, #64]	; 0x40
   103b6:	6048      	str	r0, [r1, #4]
   103b8:	8a3a      	ldrh	r2, [r7, #16]
   103ba:	3201      	adds	r2, #1
   103bc:	823a      	strh	r2, [r7, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1191

    /* Now put the task to sleep */
    td_ptr->STATE = LWEVENT_BLOCKED;
   103be:	4a16      	ldr	r2, [pc, #88]	; (10418 <_lwevent_wait_for+0xf0>)
   103c0:	60b2      	str	r2, [r6, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1192
    td_ptr->INFO = (_mqx_uint) &event_ptr->WAITING_TASKS;
   103c2:	1c3a      	adds	r2, r7, #0
   103c4:	3208      	adds	r2, #8
   103c6:	63b2      	str	r2, [r6, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1193
    if (tick_ptr)
   103c8:	2b00      	cmp	r3, #0
   103ca:	d01c      	beq.n	10406 <_lwevent_wait_for+0xde>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1201
        {
            _time_delay_until(tick_ptr);
        }
        else
        {
            _time_delay_for(tick_ptr);
   103cc:	4640      	mov	r0, r8
   103ce:	f000 fdbd 	bl	10f4c <_time_delay_for>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1203
        } /* Endif */
        if (td_ptr->INFO)
   103d2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1151
    {
        return (MQX_CANNOT_CALL_FUNCTION_FROM_ISR);
    } /* Endif */
#endif

    result = MQX_OK;
   103d4:	2400      	movs	r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1203
        }
        else
        {
            _time_delay_for(tick_ptr);
        } /* Endif */
        if (td_ptr->INFO)
   103d6:	2b00      	cmp	r3, #0
   103d8:	d001      	beq.n	103de <_lwevent_wait_for+0xb6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1207
        {
            /* Must have timed out */
            /*_QUEUE_REMOVE(&event_ptr->WAITING_TASKS, &td_ptr->AUX_QUEUE);*/
            result = LWEVENT_WAIT_TIMEOUT;
   103da:	24c4      	movs	r4, #196	; 0xc4
   103dc:	00a4      	lsls	r4, r4, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1216
    {
        _task_block();
    } /* Endif */

#if MQX_COMPONENT_DESTRUCTION
    if (event_ptr->VALID == 0)
   103de:	697b      	ldr	r3, [r7, #20]
   103e0:	2b00      	cmp	r3, #0
   103e2:	d100      	bne.n	103e6 <_lwevent_wait_for+0xbe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1218
    { /* We've been deleted */
        result = MQX_LWEVENT_INVALID;
   103e4:	2439      	movs	r4, #57	; 0x39
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1222
    } /* Endif */
#endif

    _INT_ENABLE();
   103e6:	69ea      	ldr	r2, [r5, #28]
   103e8:	6d53      	ldr	r3, [r2, #84]	; 0x54
   103ea:	2b00      	cmp	r3, #0
   103ec:	d0a5      	beq.n	1033a <_lwevent_wait_for+0x12>
   103ee:	3b01      	subs	r3, #1
   103f0:	6553      	str	r3, [r2, #84]	; 0x54
   103f2:	2b00      	cmp	r3, #0
   103f4:	d1a1      	bne.n	1033a <_lwevent_wait_for+0x12>
   103f6:	b662      	cpsie	i
   103f8:	e79f      	b.n	1033a <_lwevent_wait_for+0x12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1184
    {
        td_ptr->FLAGS |= TASK_LWEVENT_ALL_BITS_WANTED;
    }
    else
    {
        td_ptr->FLAGS &= ~TASK_LWEVENT_ALL_BITS_WANTED;
   103fa:	2280      	movs	r2, #128	; 0x80
   103fc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1177
        return (result);
    } /* Endif */

    /* Must wait for a event to become available */

    td_ptr->LWEVENT_BITS = bit_mask;
   103fe:	67b1      	str	r1, [r6, #120]	; 0x78
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1184
    {
        td_ptr->FLAGS |= TASK_LWEVENT_ALL_BITS_WANTED;
    }
    else
    {
        td_ptr->FLAGS &= ~TASK_LWEVENT_ALL_BITS_WANTED;
   10400:	4393      	bics	r3, r2
   10402:	62b3      	str	r3, [r6, #40]	; 0x28
   10404:	e7cf      	b.n	103a6 <_lwevent_wait_for+0x7e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1212
            result = LWEVENT_WAIT_TIMEOUT;
        } /* Endif */
    }
    else
    {
        _task_block();
   10406:	f004 fd34 	bl	14e72 <_task_block>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1151
    {
        return (MQX_CANNOT_CALL_FUNCTION_FROM_ISR);
    } /* Endif */
#endif

    result = MQX_OK;
   1040a:	2400      	movs	r4, #0
   1040c:	e7e7      	b.n	103de <_lwevent_wait_for+0xb6>
   1040e:	46c0      	nop			; (mov r8, r8)
   10410:	1fffe000 	.word	0x1fffe000
   10414:	6c65766e 	.word	0x6c65766e
   10418:	0000042d 	.word	0x0000042d

0001041c <_lwsem_create>:
_lwsem_create():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:173
_mqx_uint _lwsem_create
(
    LWSEM_STRUCT_PTR sem_ptr,
    _mqx_int         initial_number
)
{
   1041c:	b538      	push	{r3, r4, r5, lr}
_lwsem_create_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:78
    {
        return MQX_INVALID_LWSEM;
    }
#endif /* MQX_ENABLE_USER_MODE */

    _GET_KERNEL_DATA(kernel_data);
   1041e:	4b16      	ldr	r3, [pc, #88]	; (10478 <_lwsem_create+0x5c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:82

    _KLOGE2(KLOG_lwsem_create, initial_number);

    sem_ptr->VALUE = initial_number;
   10420:	6181      	str	r1, [r0, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:78
    {
        return MQX_INVALID_LWSEM;
    }
#endif /* MQX_ENABLE_USER_MODE */

    _GET_KERNEL_DATA(kernel_data);
   10422:	681d      	ldr	r5, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:83

    _KLOGE2(KLOG_lwsem_create, initial_number);

    sem_ptr->VALUE = initial_number;
    _QUEUE_INIT(&sem_ptr->TD_QUEUE, 0);
   10424:	1c03      	adds	r3, r0, #0
   10426:	3308      	adds	r3, #8
   10428:	6083      	str	r3, [r0, #8]
   1042a:	60c3      	str	r3, [r0, #12]
   1042c:	2300      	movs	r3, #0
   1042e:	8203      	strh	r3, [r0, #16]
   10430:	8243      	strh	r3, [r0, #18]
_lwsem_create():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:173
_mqx_uint _lwsem_create
(
    LWSEM_STRUCT_PTR sem_ptr,
    _mqx_int         initial_number
)
{
   10432:	1c04      	adds	r4, r0, #0
_lwsem_create_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:84

    _KLOGE2(KLOG_lwsem_create, initial_number);

    sem_ptr->VALUE = initial_number;
    _QUEUE_INIT(&sem_ptr->TD_QUEUE, 0);
    _int_disable();
   10434:	f7ff fe0a 	bl	1004c <_int_disable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:109
            }
        }
        else
#endif /* MQX_ENABLE_USER_MODE */
        {
            sem_chk_ptr = (LWSEM_STRUCT_PTR) ((pointer) kernel_data->LWSEM.NEXT);
   10438:	23f4      	movs	r3, #244	; 0xf4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:110
            while (sem_chk_ptr != (LWSEM_STRUCT_PTR) ((pointer) &kernel_data->LWSEM))
   1043a:	1c2a      	adds	r2, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:109
            }
        }
        else
#endif /* MQX_ENABLE_USER_MODE */
        {
            sem_chk_ptr = (LWSEM_STRUCT_PTR) ((pointer) kernel_data->LWSEM.NEXT);
   1043c:	58eb      	ldr	r3, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:110
            while (sem_chk_ptr != (LWSEM_STRUCT_PTR) ((pointer) &kernel_data->LWSEM))
   1043e:	32f4      	adds	r2, #244	; 0xf4
   10440:	4293      	cmp	r3, r2
   10442:	d103      	bne.n	1044c <_lwsem_create+0x30>
   10444:	e009      	b.n	1045a <_lwsem_create+0x3e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:119
                    _int_enable();
                    _KLOGX2(KLOG_lwsem_create, MQX_EINVAL);
                    return (MQX_EINVAL);
                }

                sem_chk_ptr = (LWSEM_STRUCT_PTR) ((pointer) sem_chk_ptr->NEXT);
   10446:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:110
        }
        else
#endif /* MQX_ENABLE_USER_MODE */
        {
            sem_chk_ptr = (LWSEM_STRUCT_PTR) ((pointer) kernel_data->LWSEM.NEXT);
            while (sem_chk_ptr != (LWSEM_STRUCT_PTR) ((pointer) &kernel_data->LWSEM))
   10448:	4293      	cmp	r3, r2
   1044a:	d006      	beq.n	1045a <_lwsem_create+0x3e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:112
            {
                if (sem_chk_ptr == sem_ptr)
   1044c:	429c      	cmp	r4, r3
   1044e:	d1fa      	bne.n	10446 <_lwsem_create+0x2a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:114
                {
                    _int_enable();
   10450:	f7ff fe08 	bl	10064 <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:116
                    _KLOGX2(KLOG_lwsem_create, MQX_EINVAL);
                    return (MQX_EINVAL);
   10454:	2082      	movs	r0, #130	; 0x82
   10456:	00c0      	lsls	r0, r0, #3
   10458:	e00d      	b.n	10476 <_lwsem_create+0x5a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:132
            _QUEUE_ENQUEUE(&kernel_data->USR_LWSEM, sem_ptr);
        }
        else
#endif /* MQX_ENABLE_USER_MODE */
        {
            _QUEUE_ENQUEUE(&kernel_data->LWSEM, sem_ptr);
   1045a:	6853      	ldr	r3, [r2, #4]
   1045c:	6819      	ldr	r1, [r3, #0]
   1045e:	6021      	str	r1, [r4, #0]
   10460:	601c      	str	r4, [r3, #0]
   10462:	6063      	str	r3, [r4, #4]
   10464:	604c      	str	r4, [r1, #4]
   10466:	8913      	ldrh	r3, [r2, #8]
   10468:	3301      	adds	r3, #1
   1046a:	8113      	strh	r3, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:136
        }
    }

    sem_ptr->VALID = LWSEM_VALID;
   1046c:	4b03      	ldr	r3, [pc, #12]	; (1047c <_lwsem_create+0x60>)
   1046e:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:137
    _int_enable();
   10470:	f7ff fdf8 	bl	10064 <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:141

    _KLOGX2(KLOG_lwsem_create, MQX_OK);

    return (MQX_OK);
   10474:	2000      	movs	r0, #0
_lwsem_create():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:182
        return _usr_lwsem_create(sem_ptr, initial_number);
    }
#endif

    return _lwsem_create_internal(sem_ptr, initial_number, FALSE, FALSE);
}
   10476:	bd38      	pop	{r3, r4, r5, pc}
   10478:	1fffe000 	.word	0x1fffe000
   1047c:	6c77736d 	.word	0x6c77736d

00010480 <_lwsem_post>:
_lwsem_post():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:524
 */
_mqx_uint _lwsem_post
(
    LWSEM_STRUCT_PTR sem_ptr
)
{ /* Body */
   10480:	b538      	push	{r3, r4, r5, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:540
    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_lwsem_post, sem_ptr);

#if MQX_CHECK_VALIDITY
    if (sem_ptr->VALID != LWSEM_VALID)
   10482:	4a29      	ldr	r2, [pc, #164]	; (10528 <_lwsem_post+0xa8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:535
    {
        return _usr_lwsem_post(sem_ptr);
    }
#endif

    _GET_KERNEL_DATA(kernel_data);
   10484:	4b29      	ldr	r3, [pc, #164]	; (1052c <_lwsem_post+0xac>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:540

    _KLOGE2(KLOG_lwsem_post, sem_ptr);

#if MQX_CHECK_VALIDITY
    if (sem_ptr->VALID != LWSEM_VALID)
   10486:	6941      	ldr	r1, [r0, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:535
    {
        return _usr_lwsem_post(sem_ptr);
    }
#endif

    _GET_KERNEL_DATA(kernel_data);
   10488:	681c      	ldr	r4, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:543

#if MQX_CHECK_VALIDITY
    if (sem_ptr->VALID != LWSEM_VALID)
    {
        _KLOGX2(KLOG_lwsem_post, MQX_INVALID_LWSEM);
        return (MQX_INVALID_LWSEM);
   1048a:	231f      	movs	r3, #31
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:540
    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_lwsem_post, sem_ptr);

#if MQX_CHECK_VALIDITY
    if (sem_ptr->VALID != LWSEM_VALID)
   1048c:	4291      	cmp	r1, r2
   1048e:	d001      	beq.n	10494 <_lwsem_post+0x14>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:567

    _KLOGX2(KLOG_lwsem_post, MQX_OK);

    return (MQX_OK);

}
   10490:	1c18      	adds	r0, r3, #0
   10492:	bd38      	pop	{r3, r4, r5, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:547
        _KLOGX2(KLOG_lwsem_post, MQX_INVALID_LWSEM);
        return (MQX_INVALID_LWSEM);
    } /* Endif */
#endif /* MQX_CHECK_VALIDITY */

    _INT_DISABLE();
   10494:	69e2      	ldr	r2, [r4, #28]
   10496:	6d53      	ldr	r3, [r2, #84]	; 0x54
   10498:	2b00      	cmp	r3, #0
   1049a:	d100      	bne.n	1049e <_lwsem_post+0x1e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:547 (discriminator 1)
   1049c:	b672      	cpsid	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:548 (discriminator 3)
    if ((sem_ptr->VALUE >= 0) && (_QUEUE_GET_SIZE(&sem_ptr->TD_QUEUE)))
   1049e:	6981      	ldr	r1, [r0, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:547 (discriminator 3)
        _KLOGX2(KLOG_lwsem_post, MQX_INVALID_LWSEM);
        return (MQX_INVALID_LWSEM);
    } /* Endif */
#endif /* MQX_CHECK_VALIDITY */

    _INT_DISABLE();
   104a0:	3301      	adds	r3, #1
   104a2:	6553      	str	r3, [r2, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:548 (discriminator 3)
    if ((sem_ptr->VALUE >= 0) && (_QUEUE_GET_SIZE(&sem_ptr->TD_QUEUE)))
   104a4:	2900      	cmp	r1, #0
   104a6:	db37      	blt.n	10518 <_lwsem_post+0x98>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:548 (discriminator 1)
   104a8:	8a05      	ldrh	r5, [r0, #16]
   104aa:	2d00      	cmp	r5, #0
   104ac:	d034      	beq.n	10518 <_lwsem_post+0x98>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:550
    {
        _QUEUE_DEQUEUE(&sem_ptr->TD_QUEUE, td_ptr);
   104ae:	6883      	ldr	r3, [r0, #8]
   104b0:	3d01      	subs	r5, #1
   104b2:	6859      	ldr	r1, [r3, #4]
   104b4:	681a      	ldr	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:551
        _BACKUP_POINTER(td_ptr, TD_STRUCT, AUX_QUEUE);
   104b6:	3b3c      	subs	r3, #60	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:550
#endif /* MQX_CHECK_VALIDITY */

    _INT_DISABLE();
    if ((sem_ptr->VALUE >= 0) && (_QUEUE_GET_SIZE(&sem_ptr->TD_QUEUE)))
    {
        _QUEUE_DEQUEUE(&sem_ptr->TD_QUEUE, td_ptr);
   104b8:	600a      	str	r2, [r1, #0]
   104ba:	6051      	str	r1, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:552
        _BACKUP_POINTER(td_ptr, TD_STRUCT, AUX_QUEUE);
        _TIME_DEQUEUE(td_ptr, kernel_data);
   104bc:	689a      	ldr	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:550
#endif /* MQX_CHECK_VALIDITY */

    _INT_DISABLE();
    if ((sem_ptr->VALUE >= 0) && (_QUEUE_GET_SIZE(&sem_ptr->TD_QUEUE)))
    {
        _QUEUE_DEQUEUE(&sem_ptr->TD_QUEUE, td_ptr);
   104be:	8205      	strh	r5, [r0, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:552
        _BACKUP_POINTER(td_ptr, TD_STRUCT, AUX_QUEUE);
        _TIME_DEQUEUE(td_ptr, kernel_data);
   104c0:	05d1      	lsls	r1, r2, #23
   104c2:	d50f      	bpl.n	104e4 <_lwsem_post+0x64>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:552 (discriminator 1)
   104c4:	6858      	ldr	r0, [r3, #4]
   104c6:	6819      	ldr	r1, [r3, #0]
   104c8:	6001      	str	r1, [r0, #0]
   104ca:	6048      	str	r0, [r1, #4]
   104cc:	1c20      	adds	r0, r4, #0
   104ce:	3035      	adds	r0, #53	; 0x35
   104d0:	30ff      	adds	r0, #255	; 0xff
   104d2:	8901      	ldrh	r1, [r0, #8]
   104d4:	3901      	subs	r1, #1
   104d6:	8101      	strh	r1, [r0, #8]
   104d8:	4915      	ldr	r1, [pc, #84]	; (10530 <_lwsem_post+0xb0>)
   104da:	400a      	ands	r2, r1
   104dc:	3105      	adds	r1, #5
   104de:	31ff      	adds	r1, #255	; 0xff
   104e0:	430a      	orrs	r2, r1
   104e2:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:553
        td_ptr->INFO = 0; /* Signal that post is activating the task */
   104e4:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:554
        _TASK_READY(td_ptr, kernel_data);
   104e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:553
    if ((sem_ptr->VALUE >= 0) && (_QUEUE_GET_SIZE(&sem_ptr->TD_QUEUE)))
    {
        _QUEUE_DEQUEUE(&sem_ptr->TD_QUEUE, td_ptr);
        _BACKUP_POINTER(td_ptr, TD_STRUCT, AUX_QUEUE);
        _TIME_DEQUEUE(td_ptr, kernel_data);
        td_ptr->INFO = 0; /* Signal that post is activating the task */
   104e8:	639a      	str	r2, [r3, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:554
        _TASK_READY(td_ptr, kernel_data);
   104ea:	69da      	ldr	r2, [r3, #28]
   104ec:	428a      	cmp	r2, r1
   104ee:	d818      	bhi.n	10522 <_lwsem_post+0xa2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:554 (discriminator 3)
   104f0:	2102      	movs	r1, #2
   104f2:	6099      	str	r1, [r3, #8]
   104f4:	6851      	ldr	r1, [r2, #4]
   104f6:	6808      	ldr	r0, [r1, #0]
   104f8:	6059      	str	r1, [r3, #4]
   104fa:	6018      	str	r0, [r3, #0]
   104fc:	600b      	str	r3, [r1, #0]
   104fe:	6053      	str	r3, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:555 (discriminator 3)
        _CHECK_RUN_SCHEDULER(); /* Let higher priority task run */
   10500:	f004 fc46 	bl	14d90 <_sched_check_scheduler_internal>
   10504:	69e2      	ldr	r2, [r4, #28]
   10506:	6d53      	ldr	r3, [r2, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:561
    }
    else
    {
        ++sem_ptr->VALUE;
    } /* Endif */
    _INT_ENABLE();
   10508:	2b00      	cmp	r3, #0
   1050a:	d008      	beq.n	1051e <_lwsem_post+0x9e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:561 (discriminator 1)
   1050c:	3b01      	subs	r3, #1
   1050e:	6553      	str	r3, [r2, #84]	; 0x54
   10510:	2b00      	cmp	r3, #0
   10512:	d104      	bne.n	1051e <_lwsem_post+0x9e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:561 (discriminator 2)
   10514:	b662      	cpsie	i
   10516:	e7bb      	b.n	10490 <_lwsem_post+0x10>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:559
        _TASK_READY(td_ptr, kernel_data);
        _CHECK_RUN_SCHEDULER(); /* Let higher priority task run */
    }
    else
    {
        ++sem_ptr->VALUE;
   10518:	3101      	adds	r1, #1
   1051a:	6181      	str	r1, [r0, #24]
   1051c:	e7f4      	b.n	10508 <_lwsem_post+0x88>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:565
    } /* Endif */
    _INT_ENABLE();

    _KLOGX2(KLOG_lwsem_post, MQX_OK);

    return (MQX_OK);
   1051e:	2300      	movs	r3, #0
   10520:	e7b6      	b.n	10490 <_lwsem_post+0x10>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:554 (discriminator 1)
    {
        _QUEUE_DEQUEUE(&sem_ptr->TD_QUEUE, td_ptr);
        _BACKUP_POINTER(td_ptr, TD_STRUCT, AUX_QUEUE);
        _TIME_DEQUEUE(td_ptr, kernel_data);
        td_ptr->INFO = 0; /* Signal that post is activating the task */
        _TASK_READY(td_ptr, kernel_data);
   10522:	6262      	str	r2, [r4, #36]	; 0x24
   10524:	e7e4      	b.n	104f0 <_lwsem_post+0x70>
   10526:	46c0      	nop			; (mov r8, r8)
   10528:	6c77736d 	.word	0x6c77736d
   1052c:	1fffe000 	.word	0x1fffe000
   10530:	fffffeff 	.word	0xfffffeff

00010534 <_lwsem_wait>:
_lwsem_wait():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:765
 */
_mqx_uint _lwsem_wait
(
    LWSEM_STRUCT_PTR sem_ptr
)
{ /* Body */
   10534:	b538      	push	{r3, r4, r5, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:776
    {
        return _usr_lwsem_wait(sem_ptr);
    }
#endif

    _GET_KERNEL_DATA(kernel_data);
   10536:	4b22      	ldr	r3, [pc, #136]	; (105c0 <_lwsem_wait+0x8c>)
   10538:	681c      	ldr	r4, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:784

#if MQX_CHECK_ERRORS
    if (kernel_data->IN_ISR)
    {
        _KLOGX2(KLOG_lwsem_wait, MQX_CANNOT_CALL_FUNCTION_FROM_ISR);
        return (MQX_CANNOT_CALL_FUNCTION_FROM_ISR);
   1053a:	230d      	movs	r3, #13
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:781
    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_lwsem_wait, sem_ptr);

#if MQX_CHECK_ERRORS
    if (kernel_data->IN_ISR)
   1053c:	8b22      	ldrh	r2, [r4, #24]
   1053e:	2a00      	cmp	r2, #0
   10540:	d001      	beq.n	10546 <_lwsem_wait+0x12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:828
    _INT_ENABLE();

    _KLOGX2(KLOG_lwsem_wait, MQX_OK);

    return (MQX_OK);
}
   10542:	1c18      	adds	r0, r3, #0
   10544:	bd38      	pop	{r3, r4, r5, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:789
        return (MQX_CANNOT_CALL_FUNCTION_FROM_ISR);
    }
#endif

#if MQX_CHECK_VALIDITY
    if (sem_ptr->VALID != LWSEM_VALID)
   10546:	4a1f      	ldr	r2, [pc, #124]	; (105c4 <_lwsem_wait+0x90>)
   10548:	6941      	ldr	r1, [r0, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:792
    {
        _KLOGX2(KLOG_lwsem_wait, MQX_INVALID_LWSEM);
        return (MQX_INVALID_LWSEM);
   1054a:	3312      	adds	r3, #18
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:789
        return (MQX_CANNOT_CALL_FUNCTION_FROM_ISR);
    }
#endif

#if MQX_CHECK_VALIDITY
    if (sem_ptr->VALID != LWSEM_VALID)
   1054c:	4291      	cmp	r1, r2
   1054e:	d1f8      	bne.n	10542 <_lwsem_wait+0xe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:796
        _KLOGX2(KLOG_lwsem_wait, MQX_INVALID_LWSEM);
        return (MQX_INVALID_LWSEM);
    }
#endif

    _INT_DISABLE();
   10550:	69e2      	ldr	r2, [r4, #28]
   10552:	6d53      	ldr	r3, [r2, #84]	; 0x54
   10554:	2b00      	cmp	r3, #0
   10556:	d100      	bne.n	1055a <_lwsem_wait+0x26>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:796 (discriminator 1)
   10558:	b672      	cpsid	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:796 (discriminator 3)
   1055a:	3301      	adds	r3, #1
   1055c:	6553      	str	r3, [r2, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:797 (discriminator 3)
    if (sem_ptr->VALUE <= 0)
   1055e:	6983      	ldr	r3, [r0, #24]
   10560:	2b00      	cmp	r3, #0
   10562:	dd0a      	ble.n	1057a <_lwsem_wait+0x46>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:811
         ** task.
         */
    }
    else
    {
        --sem_ptr->VALUE;
   10564:	3b01      	subs	r3, #1
   10566:	6183      	str	r3, [r0, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:823
        /* The semaphore has been deleted */
        _KLOGX2(KLOG_lwsem_wait, MQX_INVALID_LWSEM);
        return (MQX_INVALID_LWSEM);
    } /* Endif */

    _INT_ENABLE();
   10568:	6d53      	ldr	r3, [r2, #84]	; 0x54
   1056a:	2b00      	cmp	r3, #0
   1056c:	d024      	beq.n	105b8 <_lwsem_wait+0x84>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:823 (discriminator 1)
   1056e:	3b01      	subs	r3, #1
   10570:	6553      	str	r3, [r2, #84]	; 0x54
   10572:	2b00      	cmp	r3, #0
   10574:	d120      	bne.n	105b8 <_lwsem_wait+0x84>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:823 (discriminator 2)
   10576:	b662      	cpsie	i
   10578:	e7e3      	b.n	10542 <_lwsem_wait+0xe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:800

    _INT_DISABLE();
    if (sem_ptr->VALUE <= 0)
    {
        td_ptr = kernel_data->ACTIVE_PTR;
        td_ptr->STATE = LWSEM_BLOCKED;
   1057a:	4b13      	ldr	r3, [pc, #76]	; (105c8 <_lwsem_wait+0x94>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:802
        td_ptr->INFO = (_mqx_uint) &sem_ptr->TD_QUEUE;
        _QUEUE_UNLINK(td_ptr);
   1057c:	6851      	ldr	r1, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:800

    _INT_DISABLE();
    if (sem_ptr->VALUE <= 0)
    {
        td_ptr = kernel_data->ACTIVE_PTR;
        td_ptr->STATE = LWSEM_BLOCKED;
   1057e:	6093      	str	r3, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:801
        td_ptr->INFO = (_mqx_uint) &sem_ptr->TD_QUEUE;
   10580:	1c03      	adds	r3, r0, #0
   10582:	3308      	adds	r3, #8
   10584:	6393      	str	r3, [r2, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:802
        _QUEUE_UNLINK(td_ptr);
   10586:	6813      	ldr	r3, [r2, #0]
   10588:	1c05      	adds	r5, r0, #0
   1058a:	600b      	str	r3, [r1, #0]
   1058c:	6059      	str	r1, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:803
        _QUEUE_ENQUEUE(&sem_ptr->TD_QUEUE, &td_ptr->AUX_QUEUE);
   1058e:	68c3      	ldr	r3, [r0, #12]
   10590:	1c10      	adds	r0, r2, #0
   10592:	6819      	ldr	r1, [r3, #0]
   10594:	303c      	adds	r0, #60	; 0x3c
   10596:	63d1      	str	r1, [r2, #60]	; 0x3c
   10598:	6018      	str	r0, [r3, #0]
   1059a:	6413      	str	r3, [r2, #64]	; 0x40
   1059c:	6048      	str	r0, [r1, #4]
   1059e:	8a2b      	ldrh	r3, [r5, #16]
   105a0:	3301      	adds	r3, #1
   105a2:	822b      	strh	r3, [r5, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:804
        _sched_execute_scheduler_internal(); /* Let the other tasks run */
   105a4:	f004 fc00 	bl	14da8 <_sched_execute_scheduler_internal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:815
    {
        --sem_ptr->VALUE;
    }

    /* We must check for component destruction */
    if (sem_ptr->VALID != LWSEM_VALID)
   105a8:	696a      	ldr	r2, [r5, #20]
   105aa:	4b06      	ldr	r3, [pc, #24]	; (105c4 <_lwsem_wait+0x90>)
   105ac:	429a      	cmp	r2, r3
   105ae:	d005      	beq.n	105bc <_lwsem_wait+0x88>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:817
    {
        _int_enable();
   105b0:	f7ff fd58 	bl	10064 <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:820
        /* The semaphore has been deleted */
        _KLOGX2(KLOG_lwsem_wait, MQX_INVALID_LWSEM);
        return (MQX_INVALID_LWSEM);
   105b4:	231f      	movs	r3, #31
   105b6:	e7c4      	b.n	10542 <_lwsem_wait+0xe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:827

    _INT_ENABLE();

    _KLOGX2(KLOG_lwsem_wait, MQX_OK);

    return (MQX_OK);
   105b8:	2300      	movs	r3, #0
   105ba:	e7c2      	b.n	10542 <_lwsem_wait+0xe>
   105bc:	69e2      	ldr	r2, [r4, #28]
   105be:	e7d3      	b.n	10568 <_lwsem_wait+0x34>
   105c0:	1fffe000 	.word	0x1fffe000
   105c4:	6c77736d 	.word	0x6c77736d
   105c8:	0000042b 	.word	0x0000042b

000105cc <_mqx_set_cpu_type>:
_mqx_set_cpu_type():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:178
)
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);
    kernel_data->CPU_TYPE = cpu_type;
   105cc:	4b01      	ldr	r3, [pc, #4]	; (105d4 <_mqx_set_cpu_type+0x8>)
   105ce:	681b      	ldr	r3, [r3, #0]
   105d0:	8118      	strh	r0, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:180

} /* Endbody */
   105d2:	4770      	bx	lr
   105d4:	1fffe000 	.word	0x1fffe000

000105d8 <_mqx_init_kernel_data_internal>:
_mqx_init_kernel_data_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:290
    TASK_TEMPLATE_STRUCT_PTR    task_template_ptr;
    TD_STRUCT_PTR               td_ptr;
    _mqx_uint                   priority_levels;
    _mqx_uint                   i;

    _GET_KERNEL_DATA(kernel_data);
   105d8:	4b37      	ldr	r3, [pc, #220]	; (106b8 <_mqx_init_kernel_data_internal+0xe0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:282
 */
void _mqx_init_kernel_data_internal
(
    void
)
{ /* Body */
   105da:	b510      	push	{r4, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:290
    TASK_TEMPLATE_STRUCT_PTR    task_template_ptr;
    TD_STRUCT_PTR               td_ptr;
    _mqx_uint                   priority_levels;
    _mqx_uint                   i;

    _GET_KERNEL_DATA(kernel_data);
   105dc:	681c      	ldr	r4, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:293

    /* Store the configuration used when the kernel was compiled */
    kernel_data->CONFIG1 = MQX_CNFG1;
   105de:	4b37      	ldr	r3, [pc, #220]	; (106bc <_mqx_init_kernel_data_internal+0xe4>)
   105e0:	8223      	strh	r3, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:294
    kernel_data->CONFIG2 = MQX_CNFG2;
   105e2:	23e4      	movs	r3, #228	; 0xe4
   105e4:	005b      	lsls	r3, r3, #1
   105e6:	8263      	strh	r3, [r4, #18]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:297

    /* Store the addressability of the processor. How many bits in a byte. */
    kernel_data->ADDRESSING_CAPABILITY = PSP_MEMORY_ADDRESSING_CAPABILITY;
   105e8:	3bc1      	subs	r3, #193	; 0xc1
   105ea:	3bff      	subs	r3, #255	; 0xff
   105ec:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:300

    /* Indicate the endianess of the target */
    kernel_data->ENDIANESS = PSP_ENDIAN;
   105ee:	3b07      	subs	r3, #7
   105f0:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:305

    /* Store PSP memory alignment information */

#if PSP_MEM_STOREBLOCK_ALIGNMENT != 0
    kernel_data->PSP_CFG_MEM_STOREBLOCK_ALIGNMENT = PSP_MEM_STOREBLOCK_ALIGNMENT;
   105f2:	3301      	adds	r3, #1
   105f4:	81e3      	strh	r3, [r4, #14]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:308
#endif

    kernel_data->PSP_CFG_MEMORY_ALIGNMENT = PSP_MEMORY_ALIGNMENT;
   105f6:	330d      	adds	r3, #13
   105f8:	8163      	strh	r3, [r4, #10]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:309
    kernel_data->PSP_CFG_STACK_ALIGNMENT = PSP_STACK_ALIGNMENT;
   105fa:	81a3      	strh	r3, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:322
#if MQX_EXIT_ENABLED
    kernel_data->USERS_VBR = (_mqx_max_type)_int_get_vector_table();
#endif

#if MQX_CHECK_ERRORS
    if (kernel_data->INIT.TASK_TEMPLATE_LIST == NULL) {
   105fc:	336e      	adds	r3, #110	; 0x6e
   105fe:	33ff      	adds	r3, #255	; 0xff
   10600:	58e3      	ldr	r3, [r4, r3]
   10602:	2b00      	cmp	r3, #0
   10604:	d050      	beq.n	106a8 <_mqx_init_kernel_data_internal+0xd0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:338
    /* Initialize the kernel counter. */
    kernel_data->COUNTER = 1U;
#endif

    /* Set up the disable and enable priority levels */
    _psp_set_kernel_disable_level();
   10606:	f7ff fc69 	bl	fedc <_psp_set_kernel_disable_level>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:347
     * task error code can be called.
     * The system task never runs, but it's TD is used for error codes
     * during initialization, and for storage of memory blocks assigned
     * to the system.
     */
    td_ptr = (TD_STRUCT_PTR) & kernel_data->SYSTEM_TD;
   1060a:	1c23      	adds	r3, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:349
    kernel_data->ACTIVE_PTR = td_ptr;
    kernel_data->ACTIVE_SR = kernel_data->DISABLE_SR;
   1060c:	8ae2      	ldrh	r2, [r4, #22]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:347
     * task error code can be called.
     * The system task never runs, but it's TD is used for error codes
     * during initialization, and for storage of memory blocks assigned
     * to the system.
     */
    td_ptr = (TD_STRUCT_PTR) & kernel_data->SYSTEM_TD;
   1060e:	3348      	adds	r3, #72	; 0x48
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:348
    kernel_data->ACTIVE_PTR = td_ptr;
   10610:	61e3      	str	r3, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:349
    kernel_data->ACTIVE_SR = kernel_data->DISABLE_SR;
   10612:	8362      	strh	r2, [r4, #26]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:350
    td_ptr->TASK_SR = kernel_data->DISABLE_SR;
   10614:	849a      	strh	r2, [r3, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:351
    td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, SYSTEM_TASK_NUMBER);
   10616:	23ae      	movs	r3, #174	; 0xae
   10618:	005b      	lsls	r3, r3, #1
   1061a:	58e3      	ldr	r3, [r4, r3]
   1061c:	4a28      	ldr	r2, [pc, #160]	; (106c0 <_mqx_init_kernel_data_internal+0xe8>)
   1061e:	041b      	lsls	r3, r3, #16
   10620:	4313      	orrs	r3, r2
   10622:	6563      	str	r3, [r4, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:352
    td_ptr->STATE = BLOCKED;
   10624:	2303      	movs	r3, #3
   10626:	6523      	str	r3, [r4, #80]	; 0x50
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:355

    /* Initialize the light weight semaphores queue */
    _QUEUE_INIT(&kernel_data->LWSEM, 0);
   10628:	1c23      	adds	r3, r4, #0
   1062a:	22f4      	movs	r2, #244	; 0xf4
   1062c:	33f4      	adds	r3, #244	; 0xf4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:363
    _QUEUE_INIT(&kernel_data->USR_LWSEM, 0);
#endif

#if MQX_HAS_TICK
    /* Set up the timeout queue */
    _QUEUE_INIT(&kernel_data->TIMEOUT_QUEUE, 0);
   1062e:	219a      	movs	r1, #154	; 0x9a
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:355
    td_ptr->TASK_SR = kernel_data->DISABLE_SR;
    td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, SYSTEM_TASK_NUMBER);
    td_ptr->STATE = BLOCKED;

    /* Initialize the light weight semaphores queue */
    _QUEUE_INIT(&kernel_data->LWSEM, 0);
   10630:	50a3      	str	r3, [r4, r2]
   10632:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:363
    _QUEUE_INIT(&kernel_data->USR_LWSEM, 0);
#endif

#if MQX_HAS_TICK
    /* Set up the timeout queue */
    _QUEUE_INIT(&kernel_data->TIMEOUT_QUEUE, 0);
   10634:	0049      	lsls	r1, r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:355
    td_ptr->TASK_SR = kernel_data->DISABLE_SR;
    td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, SYSTEM_TASK_NUMBER);
    td_ptr->STATE = BLOCKED;

    /* Initialize the light weight semaphores queue */
    _QUEUE_INIT(&kernel_data->LWSEM, 0);
   10636:	811a      	strh	r2, [r3, #8]
   10638:	815a      	strh	r2, [r3, #10]
   1063a:	605b      	str	r3, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:363
    _QUEUE_INIT(&kernel_data->USR_LWSEM, 0);
#endif

#if MQX_HAS_TICK
    /* Set up the timeout queue */
    _QUEUE_INIT(&kernel_data->TIMEOUT_QUEUE, 0);
   1063c:	1863      	adds	r3, r4, r1
   1063e:	5063      	str	r3, [r4, r1]
   10640:	811a      	strh	r2, [r3, #8]
   10642:	815a      	strh	r2, [r3, #10]
   10644:	605b      	str	r3, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:372
     * Compute the number of MQX priority levels needed. This is done
     * by determining the task that has the lowest priority (highest number)
     */
    priority_levels = 0;

    task_template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;
   10646:	23be      	movs	r3, #190	; 0xbe
   10648:	005b      	lsls	r3, r3, #1
   1064a:	58e3      	ldr	r3, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:374

    for (i = 0; task_template_ptr->TASK_TEMPLATE_INDEX && (i < MQX_MAXIMUM_NUMBER_OF_TASK_TEMPLATES); ++i, ++task_template_ptr) {
   1064c:	681a      	ldr	r2, [r3, #0]
   1064e:	2a00      	cmp	r2, #0
   10650:	d02e      	beq.n	106b0 <_mqx_init_kernel_data_internal+0xd8>
   10652:	4a1c      	ldr	r2, [pc, #112]	; (106c4 <_mqx_init_kernel_data_internal+0xec>)
   10654:	2100      	movs	r1, #0
   10656:	1898      	adds	r0, r3, r2
   10658:	e001      	b.n	1065e <_mqx_init_kernel_data_internal+0x86>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:374 (discriminator 3)
   1065a:	4283      	cmp	r3, r0
   1065c:	d007      	beq.n	1066e <_mqx_init_kernel_data_internal+0x96>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:375
        if (priority_levels < task_template_ptr->TASK_PRIORITY) {
   1065e:	68da      	ldr	r2, [r3, #12]
   10660:	4291      	cmp	r1, r2
   10662:	d200      	bcs.n	10666 <_mqx_init_kernel_data_internal+0x8e>
   10664:	1c11      	adds	r1, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:374
     */
    priority_levels = 0;

    task_template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;

    for (i = 0; task_template_ptr->TASK_TEMPLATE_INDEX && (i < MQX_MAXIMUM_NUMBER_OF_TASK_TEMPLATES); ++i, ++task_template_ptr) {
   10666:	331c      	adds	r3, #28
   10668:	681a      	ldr	r2, [r3, #0]
   1066a:	2a00      	cmp	r2, #0
   1066c:	d1f5      	bne.n	1065a <_mqx_init_kernel_data_internal+0x82>
   1066e:	1c48      	adds	r0, r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:379
        if (priority_levels < task_template_ptr->TASK_PRIORITY) {
            priority_levels = task_template_ptr->TASK_PRIORITY;
        } /* Endif */
    } /* Endfor */
    kernel_data->LOWEST_TASK_PRIORITY = priority_levels;
   10670:	23d0      	movs	r3, #208	; 0xd0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:387
    /*
     * Initialize the task template for the IDLE Task.
     * NOTE that the idle task runs at 1 level lower than any user task.
     */
    task_template_ptr = (TASK_TEMPLATE_STRUCT_PTR)&kernel_data->IDLE_TASK_TEMPLATE;
    task_template_ptr->TASK_TEMPLATE_INDEX  = IDLE_TASK;
   10672:	4a15      	ldr	r2, [pc, #84]	; (106c8 <_mqx_init_kernel_data_internal+0xf0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:379
    for (i = 0; task_template_ptr->TASK_TEMPLATE_INDEX && (i < MQX_MAXIMUM_NUMBER_OF_TASK_TEMPLATES); ++i, ++task_template_ptr) {
        if (priority_levels < task_template_ptr->TASK_PRIORITY) {
            priority_levels = task_template_ptr->TASK_PRIORITY;
        } /* Endif */
    } /* Endfor */
    kernel_data->LOWEST_TASK_PRIORITY = priority_levels;
   10674:	50e1      	str	r1, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:387
    /*
     * Initialize the task template for the IDLE Task.
     * NOTE that the idle task runs at 1 level lower than any user task.
     */
    task_template_ptr = (TASK_TEMPLATE_STRUCT_PTR)&kernel_data->IDLE_TASK_TEMPLATE;
    task_template_ptr->TASK_TEMPLATE_INDEX  = IDLE_TASK;
   10676:	334d      	adds	r3, #77	; 0x4d
   10678:	33ff      	adds	r3, #255	; 0xff
   1067a:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:388
    task_template_ptr->TASK_STACKSIZE       = kernel_data->INIT.IDLE_TASK_STACK_SIZE;
   1067c:	22ba      	movs	r2, #186	; 0xba
   1067e:	0052      	lsls	r2, r2, #1
   10680:	58a2      	ldr	r2, [r4, r2]
   10682:	18e3      	adds	r3, r4, r3
   10684:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:389
    task_template_ptr->TASK_NAME            = "_mqx_idle_task";
   10686:	4a11      	ldr	r2, [pc, #68]	; (106cc <_mqx_init_kernel_data_internal+0xf4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:391
    task_template_ptr->TASK_ADDRESS         = _mqx_idle_task;
    task_template_ptr->TASK_PRIORITY        = priority_levels + 1;
   10688:	60d8      	str	r0, [r3, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:389
     * NOTE that the idle task runs at 1 level lower than any user task.
     */
    task_template_ptr = (TASK_TEMPLATE_STRUCT_PTR)&kernel_data->IDLE_TASK_TEMPLATE;
    task_template_ptr->TASK_TEMPLATE_INDEX  = IDLE_TASK;
    task_template_ptr->TASK_STACKSIZE       = kernel_data->INIT.IDLE_TASK_STACK_SIZE;
    task_template_ptr->TASK_NAME            = "_mqx_idle_task";
   1068a:	611a      	str	r2, [r3, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:390
    task_template_ptr->TASK_ADDRESS         = _mqx_idle_task;
   1068c:	4a10      	ldr	r2, [pc, #64]	; (106d0 <_mqx_init_kernel_data_internal+0xf8>)
   1068e:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:398

    /*
     * Initialize the linked list of all TDs in the system.
     * Initially zero. Not including system TD
     */
    _QUEUE_INIT(&kernel_data->TD_LIST, 0);
   10690:	22d4      	movs	r2, #212	; 0xd4
   10692:	3b49      	subs	r3, #73	; 0x49
   10694:	3bff      	subs	r3, #255	; 0xff
   10696:	50a3      	str	r3, [r4, r2]
   10698:	2200      	movs	r2, #0
   1069a:	605b      	str	r3, [r3, #4]
   1069c:	811a      	strh	r2, [r3, #8]
   1069e:	815a      	strh	r2, [r3, #10]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:401

    /* Set the TD counter */
    kernel_data->TASK_NUMBER = 1;
   106a0:	23e0      	movs	r3, #224	; 0xe0
   106a2:	3201      	adds	r2, #1
   106a4:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:403

} /* Endbody */
   106a6:	bd10      	pop	{r4, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:323
    kernel_data->USERS_VBR = (_mqx_max_type)_int_get_vector_table();
#endif

#if MQX_CHECK_ERRORS
    if (kernel_data->INIT.TASK_TEMPLATE_LIST == NULL) {
        _mqx_exit(MQX_INVALID_POINTER);
   106a8:	2001      	movs	r0, #1
   106aa:	f000 f8bf 	bl	1082c <_mqx_exit>
   106ae:	e7aa      	b.n	10606 <_mqx_init_kernel_data_internal+0x2e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:374
     */
    priority_levels = 0;

    task_template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;

    for (i = 0; task_template_ptr->TASK_TEMPLATE_INDEX && (i < MQX_MAXIMUM_NUMBER_OF_TASK_TEMPLATES); ++i, ++task_template_ptr) {
   106b0:	2001      	movs	r0, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:370

    /*
     * Compute the number of MQX priority levels needed. This is done
     * by determining the task that has the lowest priority (highest number)
     */
    priority_levels = 0;
   106b2:	2100      	movs	r1, #0
   106b4:	e7dc      	b.n	10670 <_mqx_init_kernel_data_internal+0x98>
   106b6:	46c0      	nop			; (mov r8, r8)
   106b8:	1fffe000 	.word	0x1fffe000
   106bc:	000029fa 	.word	0x000029fa
   106c0:	0000ffff 	.word	0x0000ffff
   106c4:	001bffe4 	.word	0x001bffe4
   106c8:	80000003 	.word	0x80000003
   106cc:	00014714 	.word	0x00014714
   106d0:	0000fff1 	.word	0x0000fff1

000106d4 <_mqxlite_init>:
_mqxlite_init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:137
        *(volatile pointer*) kernel_data = (pointer) & _mqx_path;
        *(volatile pointer*) kernel_data = (pointer) & _mqxlite_version_number;
        *(volatile pointer*) kernel_data = (pointer) & MQX_init_struct_ptr;
    }
    /* Initialize the kernel data to zero. */
    _mem_zero((pointer) kernel_data, (_mem_size) sizeof(KERNEL_DATA_STRUCT));
   106d4:	2195      	movs	r1, #149	; 0x95
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:106
 */
_mqx_uint _mqxlite_init
(
    MQXLITE_INITIALIZATION_STRUCT const * mqx_init
)
{ /* Body */
   106d6:	b5f0      	push	{r4, r5, r6, r7, lr}
   106d8:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:116
    /*
     * The kernel data structure starts at the start of kernel memory,
     * as specified in the initialization structure. Make sure address
     * specified is aligned
     */
    kernel_data = (KERNEL_DATA_STRUCT_PTR) (mqx_init->START_OF_KERNEL_MEMORY);
   106da:	6845      	ldr	r5, [r0, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:119

    /* Set the global pointer to the kernel data structure */
    _SET_KERNEL_DATA(kernel_data);
   106dc:	4b27      	ldr	r3, [pc, #156]	; (1077c <_mqxlite_init+0xa8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:106
 */
_mqx_uint _mqxlite_init
(
    MQXLITE_INITIALIZATION_STRUCT const * mqx_init
)
{ /* Body */
   106de:	b083      	sub	sp, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:119
     * specified is aligned
     */
    kernel_data = (KERNEL_DATA_STRUCT_PTR) (mqx_init->START_OF_KERNEL_MEMORY);

    /* Set the global pointer to the kernel data structure */
    _SET_KERNEL_DATA(kernel_data);
   106e0:	601d      	str	r5, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:130
     * Note that counter will be immediately reset to zero on the subsequent
     * _mem_zero call. */
    {
        MQX_INITIALIZATION_STRUCT  * MQX_init_struct_ptr;

        *(volatile pointer*) kernel_data = (pointer) & _mqx_version_number;
   106e2:	4b27      	ldr	r3, [pc, #156]	; (10780 <_mqxlite_init+0xac>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:137
        *(volatile pointer*) kernel_data = (pointer) & _mqx_path;
        *(volatile pointer*) kernel_data = (pointer) & _mqxlite_version_number;
        *(volatile pointer*) kernel_data = (pointer) & MQX_init_struct_ptr;
    }
    /* Initialize the kernel data to zero. */
    _mem_zero((pointer) kernel_data, (_mem_size) sizeof(KERNEL_DATA_STRUCT));
   106e4:	0089      	lsls	r1, r1, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:130
     * Note that counter will be immediately reset to zero on the subsequent
     * _mem_zero call. */
    {
        MQX_INITIALIZATION_STRUCT  * MQX_init_struct_ptr;

        *(volatile pointer*) kernel_data = (pointer) & _mqx_version_number;
   106e6:	602b      	str	r3, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:131
        *(volatile pointer*) kernel_data = (pointer) & _mqx_vendor;
   106e8:	4b26      	ldr	r3, [pc, #152]	; (10784 <_mqxlite_init+0xb0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:137
        *(volatile pointer*) kernel_data = (pointer) & _mqx_path;
        *(volatile pointer*) kernel_data = (pointer) & _mqxlite_version_number;
        *(volatile pointer*) kernel_data = (pointer) & MQX_init_struct_ptr;
    }
    /* Initialize the kernel data to zero. */
    _mem_zero((pointer) kernel_data, (_mem_size) sizeof(KERNEL_DATA_STRUCT));
   106ea:	1c28      	adds	r0, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:131
     * _mem_zero call. */
    {
        MQX_INITIALIZATION_STRUCT  * MQX_init_struct_ptr;

        *(volatile pointer*) kernel_data = (pointer) & _mqx_version_number;
        *(volatile pointer*) kernel_data = (pointer) & _mqx_vendor;
   106ec:	602b      	str	r3, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:132
        *(volatile pointer*) kernel_data = (pointer) & _mqx_path;
   106ee:	4b26      	ldr	r3, [pc, #152]	; (10788 <_mqxlite_init+0xb4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:182
        stack_ptr = kernel_data->INIT.INTERRUPT_STACK_LOCATION;
        result = kernel_data->INIT.INTERRUPT_STACK_SIZE;
    }
    else
    {
        return (MQX_INVALID_PARAMETER);
   106f0:	260c      	movs	r6, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:132
    {
        MQX_INITIALIZATION_STRUCT  * MQX_init_struct_ptr;

        *(volatile pointer*) kernel_data = (pointer) & _mqx_version_number;
        *(volatile pointer*) kernel_data = (pointer) & _mqx_vendor;
        *(volatile pointer*) kernel_data = (pointer) & _mqx_path;
   106f2:	602b      	str	r3, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:133
        *(volatile pointer*) kernel_data = (pointer) & _mqxlite_version_number;
   106f4:	4b25      	ldr	r3, [pc, #148]	; (1078c <_mqxlite_init+0xb8>)
   106f6:	602b      	str	r3, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:134
        *(volatile pointer*) kernel_data = (pointer) & MQX_init_struct_ptr;
   106f8:	ab01      	add	r3, sp, #4
   106fa:	602b      	str	r3, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:137
    }
    /* Initialize the kernel data to zero. */
    _mem_zero((pointer) kernel_data, (_mem_size) sizeof(KERNEL_DATA_STRUCT));
   106fc:	f7ff fb2e 	bl	fd5c <_mem_zero>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:159
            return (result); /* RETURN TO USER */
        }
    }
#endif /* MQX_CHECK_ERRORS && MQX_VERIFY_KERNEL_DATA */
    /* Copy the MQX initialization structure into kernel data. */
    kernel_data->INIT = *mqx_init;
   10700:	1c2b      	adds	r3, r5, #0
   10702:	1c20      	adds	r0, r4, #0
   10704:	335d      	adds	r3, #93	; 0x5d
   10706:	33ff      	adds	r3, #255	; 0xff
   10708:	c816      	ldmia	r0!, {r1, r2, r4}
   1070a:	c316      	stmia	r3!, {r1, r2, r4}
   1070c:	c816      	ldmia	r0!, {r1, r2, r4}
   1070e:	c316      	stmia	r3!, {r1, r2, r4}
   10710:	c816      	ldmia	r0!, {r1, r2, r4}
   10712:	c316      	stmia	r3!, {r1, r2, r4}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:162

    /* init kernel data structures */
    _mqx_init_kernel_data_internal();
   10714:	f7ff ff60 	bl	105d8 <_mqx_init_kernel_data_internal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:176


#if MQX_USE_INTERRUPTS

    /* Now obtain the interrupt stack */
    if (kernel_data->INIT.INTERRUPT_STACK_LOCATION) {
   10718:	23b8      	movs	r3, #184	; 0xb8
   1071a:	005b      	lsls	r3, r3, #1
   1071c:	58ef      	ldr	r7, [r5, r3]
   1071e:	2f00      	cmp	r7, #0
   10720:	d021      	beq.n	10766 <_mqxlite_init+0x92>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:178
        stack_ptr = kernel_data->INIT.INTERRUPT_STACK_LOCATION;
        result = kernel_data->INIT.INTERRUPT_STACK_SIZE;
   10722:	3b04      	subs	r3, #4
   10724:	58ec      	ldr	r4, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:186
    {
        return (MQX_INVALID_PARAMETER);
    } /* Endif */

#if MQX_MONITOR_STACK
    _task_fill_stack_internal((_mqx_uint_ptr)stack_ptr, result);
   10726:	1c38      	adds	r0, r7, #0
   10728:	1c21      	adds	r1, r4, #0
   1072a:	f000 fbe9 	bl	10f00 <_task_fill_stack_internal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:189
#endif

    kernel_data->INTERRUPT_STACK_PTR = _GET_STACK_BASE(stack_ptr, result);
   1072e:	230f      	movs	r3, #15
   10730:	3c01      	subs	r4, #1
   10732:	193c      	adds	r4, r7, r4
   10734:	439c      	bics	r4, r3
   10736:	63ec      	str	r4, [r5, #60]	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:214
        _mqx_system_stack   = td_ptr->STACK_PTR;
    }
#endif /* MQX_USE_IDLE_TASK */

    /* Build the MQX ready to run queues */
    result = _psp_init_readyqs();
   10738:	f7ff fc06 	bl	ff48 <_psp_init_readyqs>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:223
    } /* Endif */
#endif

#if MQX_USE_COMPONENTS
    /* Create a light wait semaphore for component creation */
    _lwsem_create((LWSEM_STRUCT_PTR)&kernel_data->COMPONENT_CREATE_LWSEM, 1);
   1073c:	1c28      	adds	r0, r5, #0
   1073e:	3081      	adds	r0, #129	; 0x81
   10740:	2101      	movs	r1, #1
   10742:	30ff      	adds	r0, #255	; 0xff
   10744:	f7ff fe6a 	bl	1041c <_lwsem_create>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:227
#endif

    /* Create a light wait semaphore for task creation/destruction creation */
    _lwsem_create((LWSEM_STRUCT_PTR) & kernel_data->TASK_CREATE_LWSEM, 1);
   10748:	1c68      	adds	r0, r5, #1
   1074a:	2101      	movs	r1, #1
   1074c:	30ff      	adds	r0, #255	; 0xff
   1074e:	f7ff fe65 	bl	1041c <_lwsem_create>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:230

    /* Set the CPU type */
    _mqx_set_cpu_type(MQX_CPU);
   10752:	2080      	movs	r0, #128	; 0x80
   10754:	01c0      	lsls	r0, r0, #7
   10756:	f7ff ff39 	bl	105cc <_mqx_set_cpu_type>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:232

    result = _psp_int_init(FIRST_INTERRUPT_VECTOR_USED, LAST_INTERRUPT_VECTOR_USED);
   1075a:	200f      	movs	r0, #15
   1075c:	212c      	movs	r1, #44	; 0x2c
   1075e:	f7ff fb75 	bl	fe4c <_psp_int_init>
   10762:	1e06      	subs	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:233
    if (result != MQX_OK) {
   10764:	d002      	beq.n	1076c <_mqxlite_init+0x98>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:250
     */
    system_timer_init(NULL);

    return MQX_OK; /* To satisfy lint */

} /* Endbody */
   10766:	1c30      	adds	r0, r6, #0
   10768:	b003      	add	sp, #12
   1076a:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:241

    /* set possible new interrupt vector table
     * if MQX_ROM_VECTORS = 0 switch to ram interrupt table which
     * was initialized in _psp_int_init)
     */
    _int_set_vector_table((uint32_t)(&__vect_table));
   1076c:	4808      	ldr	r0, [pc, #32]	; (10790 <_mqxlite_init+0xbc>)
   1076e:	f7ff faeb 	bl	fd48 <_int_set_vector_table>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:246

    /*
     * Initialize System Timer and Ticks parameters in kernel_data structure
     */
    system_timer_init(NULL);
   10772:	2000      	movs	r0, #0
   10774:	f001 f8fa 	bl	1196c <system_timer_init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:248

    return MQX_OK; /* To satisfy lint */
   10778:	e7f5      	b.n	10766 <_mqxlite_init+0x92>
   1077a:	46c0      	nop			; (mov r8, r8)
   1077c:	1fffe000 	.word	0x1fffe000
   10780:	00014730 	.word	0x00014730
   10784:	00014728 	.word	0x00014728
   10788:	00014724 	.word	0x00014724
   1078c:	0001472c 	.word	0x0001472c
   10790:	00000000 	.word	0x00000000

00010794 <_mqxlite>:
_mqxlite():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:288
        return kernel_data->USERS_ERROR;
    } /* Endif */
#endif


    _GET_KERNEL_DATA(kernel_data);
   10794:	4b23      	ldr	r3, [pc, #140]	; (10824 <_mqxlite+0x90>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:269
 *
 * \see _mqxlite_init
 * \see _mqx_exit
 */
_mqx_uint _mqxlite(void)
{ /* Body */
   10796:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:288
        return kernel_data->USERS_ERROR;
    } /* Endif */
#endif


    _GET_KERNEL_DATA(kernel_data);
   10798:	681e      	ldr	r6, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:293


    /* Create the idle task */
#if MQX_USE_IDLE_TASK
    td_ptr = _task_init_internal((TASK_TEMPLATE_STRUCT_PTR)&kernel_data->IDLE_TASK_TEMPLATE,
   1079a:	2387      	movs	r3, #135	; 0x87
   1079c:	009b      	lsls	r3, r3, #2
   1079e:	18f0      	adds	r0, r6, r3
   107a0:	69f3      	ldr	r3, [r6, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:269
 *
 * \see _mqxlite_init
 * \see _mqx_exit
 */
_mqx_uint _mqxlite(void)
{ /* Body */
   107a2:	b083      	sub	sp, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:293
    _GET_KERNEL_DATA(kernel_data);


    /* Create the idle task */
#if MQX_USE_IDLE_TASK
    td_ptr = _task_init_internal((TASK_TEMPLATE_STRUCT_PTR)&kernel_data->IDLE_TASK_TEMPLATE,
   107a4:	68d9      	ldr	r1, [r3, #12]
   107a6:	23bc      	movs	r3, #188	; 0xbc
   107a8:	005b      	lsls	r3, r3, #1
   107aa:	58f3      	ldr	r3, [r6, r3]
   107ac:	2200      	movs	r2, #0
   107ae:	9300      	str	r3, [sp, #0]
   107b0:	2389      	movs	r3, #137	; 0x89
   107b2:	009b      	lsls	r3, r3, #2
   107b4:	58f3      	ldr	r3, [r6, r3]
   107b6:	9301      	str	r3, [sp, #4]
   107b8:	2300      	movs	r3, #0
   107ba:	f000 f9d5 	bl	10b68 <_task_init_internal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:304
                                #endif
                                 FALSE,
                                 kernel_data->INIT.IDLE_TASK_STACK_LOCATION,
                                 kernel_data->IDLE_TASK_TEMPLATE.TASK_STACKSIZE);
    #if MQX_CHECK_ERRORS
        if (td_ptr == NULL) {
   107be:	2800      	cmp	r0, #0
   107c0:	d02c      	beq.n	1081c <_mqxlite+0x88>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:308
            _mqx_exit(MQX_OUT_OF_MEMORY);
        } /* Endif */
    #endif
    _task_ready_internal(td_ptr);
   107c2:	f000 fba7 	bl	10f14 <_task_ready_internal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:316
    /* Check here for auto-create tasks, and create them here */
    {
        TASK_TEMPLATE_STRUCT_PTR    template_ptr;
        int                         task_index = 0;

        template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;
   107c6:	23be      	movs	r3, #190	; 0xbe
   107c8:	005b      	lsls	r3, r3, #1
   107ca:	58f4      	ldr	r4, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:318

        while (template_ptr->TASK_TEMPLATE_INDEX) {
   107cc:	6823      	ldr	r3, [r4, #0]
   107ce:	2b00      	cmp	r3, #0
   107d0:	d01c      	beq.n	1080c <_mqxlite+0x78>
   107d2:	4d15      	ldr	r5, [pc, #84]	; (10828 <_mqxlite+0x94>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:319
            if (template_ptr->TASK_ATTRIBUTES & MQX_AUTO_START_TASK) {
   107d4:	2701      	movs	r7, #1
   107d6:	e004      	b.n	107e2 <_mqxlite+0x4e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:333
                    _mqx_exit(MQX_OUT_OF_MEMORY);
                } /* Endif */
    #endif
                _task_ready_internal(td_ptr);
            } /* Endif */
            ++template_ptr;
   107d8:	341c      	adds	r4, #28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:318
        TASK_TEMPLATE_STRUCT_PTR    template_ptr;
        int                         task_index = 0;

        template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;

        while (template_ptr->TASK_TEMPLATE_INDEX) {
   107da:	6823      	ldr	r3, [r4, #0]
   107dc:	3504      	adds	r5, #4
   107de:	2b00      	cmp	r3, #0
   107e0:	d014      	beq.n	1080c <_mqxlite+0x78>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:319
            if (template_ptr->TASK_ATTRIBUTES & MQX_AUTO_START_TASK) {
   107e2:	6963      	ldr	r3, [r4, #20]
   107e4:	423b      	tst	r3, r7
   107e6:	d0f7      	beq.n	107d8 <_mqxlite+0x44>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:320
                td_ptr = _task_init_internal(template_ptr,
   107e8:	69f3      	ldr	r3, [r6, #28]
   107ea:	69a2      	ldr	r2, [r4, #24]
   107ec:	68d9      	ldr	r1, [r3, #12]
   107ee:	682b      	ldr	r3, [r5, #0]
   107f0:	1c20      	adds	r0, r4, #0
   107f2:	9300      	str	r3, [sp, #0]
   107f4:	68a3      	ldr	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:333
                    _mqx_exit(MQX_OUT_OF_MEMORY);
                } /* Endif */
    #endif
                _task_ready_internal(td_ptr);
            } /* Endif */
            ++template_ptr;
   107f6:	341c      	adds	r4, #28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:320

        template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;

        while (template_ptr->TASK_TEMPLATE_INDEX) {
            if (template_ptr->TASK_ATTRIBUTES & MQX_AUTO_START_TASK) {
                td_ptr = _task_init_internal(template_ptr,
   107f8:	9301      	str	r3, [sp, #4]
   107fa:	2300      	movs	r3, #0
   107fc:	f000 f9b4 	bl	10b68 <_task_init_internal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:331
    #if MQX_CHECK_MEMORY_ALLOCATION_ERRORS
                if (td_ptr == NULL) {
                    _mqx_exit(MQX_OUT_OF_MEMORY);
                } /* Endif */
    #endif
                _task_ready_internal(td_ptr);
   10800:	f000 fb88 	bl	10f14 <_task_ready_internal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:318
        TASK_TEMPLATE_STRUCT_PTR    template_ptr;
        int                         task_index = 0;

        template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;

        while (template_ptr->TASK_TEMPLATE_INDEX) {
   10804:	6823      	ldr	r3, [r4, #0]
   10806:	3504      	adds	r5, #4
   10808:	2b00      	cmp	r3, #0
   1080a:	d1ea      	bne.n	107e2 <_mqxlite+0x4e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:339
            ++task_index;
        } /* Endwhile */
    }

    /* System timer start */
    system_timer_start(NULL);
   1080c:	2000      	movs	r0, #0
   1080e:	f001 f8d7 	bl	119c0 <system_timer_start>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:341

    _sched_start_internal(); /* WILL NEVER RETURN FROM HERE */
   10812:	f004 fab7 	bl	14d84 <_sched_start_internal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:344

    return MQX_OK; /* To satisfy lint */
} /* Endbody */
   10816:	2000      	movs	r0, #0
   10818:	b003      	add	sp, #12
   1081a:	bdf0      	pop	{r4, r5, r6, r7, pc}
_mqx_exit():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:377
    _mqx_uint error
)
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _int_disable();
   1081c:	f7ff fc16 	bl	1004c <_int_disable>
   10820:	e7fe      	b.n	10820 <_mqxlite+0x8c>
   10822:	46c0      	nop			; (mov r8, r8)
   10824:	1fffe000 	.word	0x1fffe000
   10828:	1fffe004 	.word	0x1fffe004

0001082c <_mqx_exit>:
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:374
 */
void _mqx_exit
(
    _mqx_uint error
)
{ /* Body */
   1082c:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:377
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _int_disable();
   1082e:	f7ff fc0d 	bl	1004c <_int_disable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:390 (discriminator 1)
        (*kernel_data->EXIT_HANDLER)();
    }/* Endif */
    MQX_LONGJMP( _mqx_exit_jump_buffer_internal, 1 );
#else
    while (TRUE) {
    } /* Endwhile */
   10832:	e7fe      	b.n	10832 <_mqx_exit+0x6>

00010834 <_task_exit_function_internal>:
_task_exit_function_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3007
 * \private
 *
 * \brief Executes the exit handler for the current task, then destroys the current task.
 */
void _task_exit_function_internal(void)
{
   10834:	b5f0      	push	{r4, r5, r6, r7, lr}
   10836:	4647      	mov	r7, r8
_task_destroy_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:785
    TD_STRUCT_PTR            victim_ptr;
    TD_STRUCT_PTR            td_ptr;
    _processor_number        processor;
    uint16_t                  task_num;

    _GET_KERNEL_DATA(kernel_data);
   10838:	4b4c      	ldr	r3, [pc, #304]	; (1096c <_task_exit_function_internal+0x138>)
_task_exit_function_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3007
 * \private
 *
 * \brief Executes the exit handler for the current task, then destroys the current task.
 */
void _task_exit_function_internal(void)
{
   1083a:	b480      	push	{r7}
_task_destroy_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:785
    TD_STRUCT_PTR            victim_ptr;
    TD_STRUCT_PTR            td_ptr;
    _processor_number        processor;
    uint16_t                  task_num;

    _GET_KERNEL_DATA(kernel_data);
   1083c:	681f      	ldr	r7, [r3, #0]
_task_get_td():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2720
#endif

    _GET_KERNEL_DATA(kernel_data);
    if (task_id == MQX_NULL_TASK_ID)
    {
        return((pointer)kernel_data->ACTIVE_PTR);
   1083e:	69fd      	ldr	r5, [r7, #28]
_task_destroy_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:819
    }
#endif

    /* Make sure we are not trying to destroy the system task */
#if MQX_CHECK_ERRORS
    if ((victim_ptr == NULL) || (victim_ptr == SYSTEM_TD_PTR(kernel_data))) {
   10840:	2d00      	cmp	r5, #0
   10842:	d057      	beq.n	108f4 <_task_exit_function_internal+0xc0>
   10844:	1c3b      	adds	r3, r7, #0
   10846:	3348      	adds	r3, #72	; 0x48
   10848:	429d      	cmp	r5, r3
   1084a:	d053      	beq.n	108f4 <_task_exit_function_internal+0xc0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:826
        return MQX_INVALID_TASK_ID;
    } /* Endif */
#endif

    /* First, serialize task creation/destruction */
    _lwsem_wait((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
   1084c:	1c7b      	adds	r3, r7, #1
   1084e:	33ff      	adds	r3, #255	; 0xff
   10850:	1c18      	adds	r0, r3, #0
   10852:	4698      	mov	r8, r3
   10854:	f7ff fe6e 	bl	10534 <_lwsem_wait>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:828

    _int_disable();
   10858:	f7ff fbf8 	bl	1004c <_int_disable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:830

    if (victim_ptr->STATE == DYING) {
   1085c:	68ab      	ldr	r3, [r5, #8]
   1085e:	2b09      	cmp	r3, #9
   10860:	d100      	bne.n	10864 <_task_exit_function_internal+0x30>
   10862:	e071      	b.n	10948 <_task_exit_function_internal+0x114>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:841
        _KLOGX2(KLOG_task_destroy, MQX_OK);
        return MQX_OK;
    } /* Endif */

    /* remove the victim from any queues it may be in. */
    if (victim_ptr->STATE == READY) {
   10864:	2b02      	cmp	r3, #2
   10866:	d067      	beq.n	10938 <_task_exit_function_internal+0x104>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:846
        if (victim_ptr != kernel_data->ACTIVE_PTR) {
            /* Remove other task from ready queue */
            _QUEUE_UNLINK(victim_ptr);
        } /* Endif */
    } else if (victim_ptr->STATE & IS_ON_TIMEOUT_Q) {
   10868:	05da      	lsls	r2, r3, #23
   1086a:	d446      	bmi.n	108fa <_task_exit_function_internal+0xc6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:849
        /* Remove from time queue (uses NEXT, PREV field) */
        _TIME_DEQUEUE(victim_ptr, kernel_data);
    } else if (victim_ptr->STATE & TD_IS_ON_QUEUE) {
   1086c:	059a      	lsls	r2, r3, #22
   1086e:	d507      	bpl.n	10880 <_task_exit_function_internal+0x4c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:855
        /*
         * Remove from queue, where suspended
         * eg, MUTEX_BLOCKED, IO_BLOCKED, TASKQ_BLOCKED
         * (uses NEXT, PREV field)
         */
        _QUEUE_REMOVE(victim_ptr->INFO, victim_ptr);
   10870:	6869      	ldr	r1, [r5, #4]
   10872:	682a      	ldr	r2, [r5, #0]
   10874:	600a      	str	r2, [r1, #0]
   10876:	6051      	str	r1, [r2, #4]
   10878:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   1087a:	890a      	ldrh	r2, [r1, #8]
   1087c:	3a01      	subs	r2, #1
   1087e:	810a      	strh	r2, [r1, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:858
    } /* Endif */

    if (victim_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
   10880:	055b      	lsls	r3, r3, #21
   10882:	d507      	bpl.n	10894 <_task_exit_function_internal+0x60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:864
        /*
         * Remove from queue, where suspended
         * eg, LWSEM_BLOCKED
         * (uses AUX_QUEUE field)
         */
        _QUEUE_REMOVE(victim_ptr->INFO, &victim_ptr->AUX_QUEUE);
   10884:	6c2a      	ldr	r2, [r5, #64]	; 0x40
   10886:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   10888:	6013      	str	r3, [r2, #0]
   1088a:	605a      	str	r2, [r3, #4]
   1088c:	6baa      	ldr	r2, [r5, #56]	; 0x38
   1088e:	8913      	ldrh	r3, [r2, #8]
   10890:	3b01      	subs	r3, #1
   10892:	8113      	strh	r3, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:867
    } /* Endif */

    victim_ptr->STATE   = DYING;
   10894:	2309      	movs	r3, #9
   10896:	60ab      	str	r3, [r5, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:883
    if (kernel_data->DSP_ACTIVE_PTR == victim_ptr) {
        kernel_data->DSP_ACTIVE_PTR = NULL;
    }/* Endif */
#endif

    _int_enable();
   10898:	f7ff fbe4 	bl	10064 <_int_enable>
   1089c:	1c3c      	adds	r4, r7, #0
   1089e:	2387      	movs	r3, #135	; 0x87
   108a0:	34dd      	adds	r4, #221	; 0xdd
   108a2:	009b      	lsls	r3, r3, #2
   108a4:	34ff      	adds	r4, #255	; 0xff
   108a6:	18fe      	adds	r6, r7, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:889

#if MQX_COMPONENT_DESTRUCTION
    {
        _mqx_uint i;
        for (i = 0; i < MAX_KERNEL_COMPONENTS; ++i) {
            if (kernel_data->COMPONENT_CLEANUP[i] != NULL) {
   108a8:	6823      	ldr	r3, [r4, #0]
   108aa:	2b00      	cmp	r3, #0
   108ac:	d001      	beq.n	108b2 <_task_exit_function_internal+0x7e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:890
                (*kernel_data->COMPONENT_CLEANUP[i])(victim_ptr);
   108ae:	1c28      	adds	r0, r5, #0
   108b0:	4798      	blx	r3
   108b2:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:888
    _int_enable();

#if MQX_COMPONENT_DESTRUCTION
    {
        _mqx_uint i;
        for (i = 0; i < MAX_KERNEL_COMPONENTS; ++i) {
   108b4:	42b4      	cmp	r4, r6
   108b6:	d1f7      	bne.n	108a8 <_task_exit_function_internal+0x74>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:929
            block_ptr = next_block_ptr;
        }
    }
#endif /* MQX_LITE_VERSION_NUMBER */

    victim_ptr->TASK_ID = TASK_ID_DYING;
   108b8:	2380      	movs	r3, #128	; 0x80
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:933

    /* Start SPR P171-0017-01                */
    /* Remove td from linked list of all tds */
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
   108ba:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:929
            block_ptr = next_block_ptr;
        }
    }
#endif /* MQX_LITE_VERSION_NUMBER */

    victim_ptr->TASK_ID = TASK_ID_DYING;
   108bc:	061b      	lsls	r3, r3, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:898
    }
#endif


    /* Save the task number */
    task_num = TASK_NUMBER_FROM_TASKID(victim_ptr->TASK_ID);
   108be:	68ea      	ldr	r2, [r5, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:900

    td_ptr = kernel_data->ACTIVE_PTR;
   108c0:	69fc      	ldr	r4, [r7, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:933

    victim_ptr->TASK_ID = TASK_ID_DYING;

    /* Start SPR P171-0017-01                */
    /* Remove td from linked list of all tds */
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
   108c2:	31d4      	adds	r1, #212	; 0xd4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:929
            block_ptr = next_block_ptr;
        }
    }
#endif /* MQX_LITE_VERSION_NUMBER */

    victim_ptr->TASK_ID = TASK_ID_DYING;
   108c4:	60eb      	str	r3, [r5, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:933

    /* Start SPR P171-0017-01                */
    /* Remove td from linked list of all tds */
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
   108c6:	890b      	ldrh	r3, [r1, #8]
   108c8:	2b01      	cmp	r3, #1
   108ca:	d02e      	beq.n	1092a <_task_exit_function_internal+0xf6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:937
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
        kernel_data->INSERT_TD_PTR = NULL;
    } else if (kernel_data->TASK_NUMBER > task_num) {
   108cc:	20e0      	movs	r0, #224	; 0xe0
   108ce:	583e      	ldr	r6, [r7, r0]
   108d0:	0412      	lsls	r2, r2, #16
   108d2:	0c12      	lsrs	r2, r2, #16
   108d4:	4296      	cmp	r6, r2
   108d6:	d821      	bhi.n	1091c <_task_exit_function_internal+0xe8>
   108d8:	6eea      	ldr	r2, [r5, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:943
        kernel_data->TASK_NUMBER   = task_num;
        kernel_data->INSERT_TD_PTR =
                        (TD_STRUCT_PTR)((unsigned char *)victim_ptr->TD_LIST_INFO.PREV -
                                        FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
    } /* Endif */
    _QUEUE_REMOVE(&kernel_data->TD_LIST, &victim_ptr->TD_LIST_INFO);
   108da:	6ea8      	ldr	r0, [r5, #104]	; 0x68
   108dc:	3b01      	subs	r3, #1
   108de:	6010      	str	r0, [r2, #0]
   108e0:	6042      	str	r2, [r0, #4]
   108e2:	810b      	strh	r3, [r1, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:947
    /* End SPR P171-0017-01                  */

    /* Free up create/destroy for other tasks */
    _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
   108e4:	4640      	mov	r0, r8
   108e6:	f7ff fdcb 	bl	10480 <_lwsem_post>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:949

    if (victim_ptr == td_ptr) {
   108ea:	42ac      	cmp	r4, r5
   108ec:	d032      	beq.n	10954 <_task_exit_function_internal+0x120>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:988
            victim_ptr->FLOAT_CONTEXT_PTR = NULL;
        }
    }
#endif /* MQX_LITE_VERSION_NUMBER */

    _psp_destroy_stack_frame(victim_ptr);
   108ee:	1c28      	adds	r0, r5, #0
   108f0:	f7ff fb7c 	bl	ffec <_psp_destroy_stack_frame>
_task_exit_function_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3031
    while(TRUE)
    {
        _task_block();
    }
#endif /* MQX_TASK_DESTRUCTION */
}
   108f4:	bc04      	pop	{r2}
   108f6:	4690      	mov	r8, r2
   108f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
_task_destroy_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:848
            /* Remove other task from ready queue */
            _QUEUE_UNLINK(victim_ptr);
        } /* Endif */
    } else if (victim_ptr->STATE & IS_ON_TIMEOUT_Q) {
        /* Remove from time queue (uses NEXT, PREV field) */
        _TIME_DEQUEUE(victim_ptr, kernel_data);
   108fa:	6869      	ldr	r1, [r5, #4]
   108fc:	682a      	ldr	r2, [r5, #0]
   108fe:	600a      	str	r2, [r1, #0]
   10900:	6051      	str	r1, [r2, #4]
   10902:	1c39      	adds	r1, r7, #0
   10904:	3135      	adds	r1, #53	; 0x35
   10906:	31ff      	adds	r1, #255	; 0xff
   10908:	890a      	ldrh	r2, [r1, #8]
   1090a:	3a01      	subs	r2, #1
   1090c:	810a      	strh	r2, [r1, #8]
   1090e:	4a18      	ldr	r2, [pc, #96]	; (10970 <_task_exit_function_internal+0x13c>)
   10910:	4013      	ands	r3, r2
   10912:	3205      	adds	r2, #5
   10914:	32ff      	adds	r2, #255	; 0xff
   10916:	4313      	orrs	r3, r2
   10918:	60ab      	str	r3, [r5, #8]
   1091a:	e7b1      	b.n	10880 <_task_exit_function_internal+0x4c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:938
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
        kernel_data->INSERT_TD_PTR = NULL;
    } else if (kernel_data->TASK_NUMBER > task_num) {
        kernel_data->TASK_NUMBER   = task_num;
   1091c:	503a      	str	r2, [r7, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:940
        kernel_data->INSERT_TD_PTR =
                        (TD_STRUCT_PTR)((unsigned char *)victim_ptr->TD_LIST_INFO.PREV -
   1091e:	6eea      	ldr	r2, [r5, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:939
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
        kernel_data->INSERT_TD_PTR = NULL;
    } else if (kernel_data->TASK_NUMBER > task_num) {
        kernel_data->TASK_NUMBER   = task_num;
        kernel_data->INSERT_TD_PTR =
   10920:	20e4      	movs	r0, #228	; 0xe4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:940
                        (TD_STRUCT_PTR)((unsigned char *)victim_ptr->TD_LIST_INFO.PREV -
   10922:	1c16      	adds	r6, r2, #0
   10924:	3e68      	subs	r6, #104	; 0x68
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:939
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
        kernel_data->INSERT_TD_PTR = NULL;
    } else if (kernel_data->TASK_NUMBER > task_num) {
        kernel_data->TASK_NUMBER   = task_num;
        kernel_data->INSERT_TD_PTR =
   10926:	503e      	str	r6, [r7, r0]
   10928:	e7d7      	b.n	108da <_task_exit_function_internal+0xa6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:935

    /* Start SPR P171-0017-01                */
    /* Remove td from linked list of all tds */
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
   1092a:	22e0      	movs	r2, #224	; 0xe0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:936
        kernel_data->INSERT_TD_PTR = NULL;
   1092c:	2000      	movs	r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:935

    /* Start SPR P171-0017-01                */
    /* Remove td from linked list of all tds */
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
   1092e:	50bb      	str	r3, [r7, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:936
        kernel_data->INSERT_TD_PTR = NULL;
   10930:	3204      	adds	r2, #4
   10932:	50b8      	str	r0, [r7, r2]
   10934:	6eea      	ldr	r2, [r5, #108]	; 0x6c
   10936:	e7d0      	b.n	108da <_task_exit_function_internal+0xa6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:842
        return MQX_OK;
    } /* Endif */

    /* remove the victim from any queues it may be in. */
    if (victim_ptr->STATE == READY) {
        if (victim_ptr != kernel_data->ACTIVE_PTR) {
   10938:	69fb      	ldr	r3, [r7, #28]
   1093a:	42ab      	cmp	r3, r5
   1093c:	d0aa      	beq.n	10894 <_task_exit_function_internal+0x60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:844
            /* Remove other task from ready queue */
            _QUEUE_UNLINK(victim_ptr);
   1093e:	686a      	ldr	r2, [r5, #4]
   10940:	682b      	ldr	r3, [r5, #0]
   10942:	6013      	str	r3, [r2, #0]
   10944:	605a      	str	r2, [r3, #4]
   10946:	e7a5      	b.n	10894 <_task_exit_function_internal+0x60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:833
    _int_disable();

    if (victim_ptr->STATE == DYING) {
        /* Task is already being destroyed */
        /* SPR P171-0021-01 re-enable interrupts */
        _int_enable();
   10948:	f7ff fb8c 	bl	10064 <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:835
        /* END SPR */
        _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
   1094c:	4640      	mov	r0, r8
   1094e:	f7ff fd97 	bl	10480 <_lwsem_post>
   10952:	e7cf      	b.n	108f4 <_task_exit_function_internal+0xc0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:951
    /* Free up create/destroy for other tasks */
    _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);

    if (victim_ptr == td_ptr) {
        /* We are destroying the current task */
        _int_disable();
   10954:	f7ff fb7a 	bl	1004c <_int_disable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:952
        _QUEUE_UNLINK(victim_ptr);  /* Remove myself from the ready queue */
   10958:	686a      	ldr	r2, [r5, #4]
   1095a:	682b      	ldr	r3, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:963
                _mem_free(victim_ptr->FLOAT_CONTEXT_PTR);
                victim_ptr->FLOAT_CONTEXT_PTR = NULL;
            }
        }
#endif /* MQX_LITE_VERSION_NUMBER */
        _psp_destroy_stack_frame(victim_ptr);
   1095c:	1c28      	adds	r0, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:952
    _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);

    if (victim_ptr == td_ptr) {
        /* We are destroying the current task */
        _int_disable();
        _QUEUE_UNLINK(victim_ptr);  /* Remove myself from the ready queue */
   1095e:	6013      	str	r3, [r2, #0]
   10960:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:963
                _mem_free(victim_ptr->FLOAT_CONTEXT_PTR);
                victim_ptr->FLOAT_CONTEXT_PTR = NULL;
            }
        }
#endif /* MQX_LITE_VERSION_NUMBER */
        _psp_destroy_stack_frame(victim_ptr);
   10962:	f7ff fb43 	bl	ffec <_psp_destroy_stack_frame>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:976
            _mem_transfer_internal(victim_ptr, SYSTEM_TD_PTR(kernel_data));
            _mem_free(victim_ptr);   /* Free the task descriptor */
        } /* Endif */
#endif /* MQX_LITE_VERSION_NUMBER */
        /* Now we must jump to the scheduler */
        _sched_run_internal();   /* WILL NEVER RETURN FROM HERE */
   10966:	f004 fa10 	bl	14d8a <_sched_run_internal>
   1096a:	e7c0      	b.n	108ee <_task_exit_function_internal+0xba>
   1096c:	1fffe000 	.word	0x1fffe000
   10970:	fffffeff 	.word	0xfffffeff

00010974 <_task_destroy>:
_task_destroy():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:1049
 */
_mqx_uint _task_destroy
(
    _task_id task_id
)
{
   10974:	b5f0      	push	{r4, r5, r6, r7, lr}
   10976:	4647      	mov	r7, r8
_task_destroy_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:785
    TD_STRUCT_PTR            victim_ptr;
    TD_STRUCT_PTR            td_ptr;
    _processor_number        processor;
    uint16_t                  task_num;

    _GET_KERNEL_DATA(kernel_data);
   10978:	4b6b      	ldr	r3, [pc, #428]	; (10b28 <_task_destroy+0x1b4>)
_task_destroy():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:1049
 */
_mqx_uint _task_destroy
(
    _task_id task_id
)
{
   1097a:	b480      	push	{r7}
_task_destroy_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:785
    TD_STRUCT_PTR            victim_ptr;
    TD_STRUCT_PTR            td_ptr;
    _processor_number        processor;
    uint16_t                  task_num;

    _GET_KERNEL_DATA(kernel_data);
   1097c:	681e      	ldr	r6, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:788
    _KLOGE2(KLOG_task_destroy, task_id);

    if (task_id != MQX_NULL_TASK_ID) {
   1097e:	2800      	cmp	r0, #0
   10980:	d009      	beq.n	10996 <_task_destroy+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:790
        processor = PROC_NUMBER_FROM_TASKID(task_id);
        if (processor != (_processor_number)kernel_data->INIT.PROCESSOR_NUMBER ) {
   10982:	23ae      	movs	r3, #174	; 0xae
   10984:	005b      	lsls	r3, r3, #1
   10986:	5af2      	ldrh	r2, [r6, r3]
   10988:	0c03      	lsrs	r3, r0, #16
   1098a:	429a      	cmp	r2, r3
   1098c:	d067      	beq.n	10a5e <_task_destroy+0xea>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:821

    /* Make sure we are not trying to destroy the system task */
#if MQX_CHECK_ERRORS
    if ((victim_ptr == NULL) || (victim_ptr == SYSTEM_TD_PTR(kernel_data))) {
        _KLOGX2(KLOG_task_destroy, MQX_INVALID_TASK_ID);
        return MQX_INVALID_TASK_ID;
   1098e:	2012      	movs	r0, #18
_task_destroy():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:1058
        return _usr_task_destroy(task_id);
    }
#endif

    return _task_destroy_internal(task_id, FALSE);
}
   10990:	bc04      	pop	{r2}
   10992:	4690      	mov	r8, r2
   10994:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10996:	1c32      	adds	r2, r6, #0
_task_get_td():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2720
#endif

    _GET_KERNEL_DATA(kernel_data);
    if (task_id == MQX_NULL_TASK_ID)
    {
        return((pointer)kernel_data->ACTIVE_PTR);
   10998:	69f4      	ldr	r4, [r6, #28]
   1099a:	3248      	adds	r2, #72	; 0x48
_task_destroy_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:819
    }
#endif

    /* Make sure we are not trying to destroy the system task */
#if MQX_CHECK_ERRORS
    if ((victim_ptr == NULL) || (victim_ptr == SYSTEM_TD_PTR(kernel_data))) {
   1099c:	2c00      	cmp	r4, #0
   1099e:	d0f6      	beq.n	1098e <_task_destroy+0x1a>
   109a0:	4294      	cmp	r4, r2
   109a2:	d0f4      	beq.n	1098e <_task_destroy+0x1a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:826
        return MQX_INVALID_TASK_ID;
    } /* Endif */
#endif

    /* First, serialize task creation/destruction */
    _lwsem_wait((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
   109a4:	1c73      	adds	r3, r6, #1
   109a6:	33ff      	adds	r3, #255	; 0xff
   109a8:	1c18      	adds	r0, r3, #0
   109aa:	4698      	mov	r8, r3
   109ac:	f7ff fdc2 	bl	10534 <_lwsem_wait>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:828

    _int_disable();
   109b0:	f7ff fb4c 	bl	1004c <_int_disable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:830

    if (victim_ptr->STATE == DYING) {
   109b4:	68a3      	ldr	r3, [r4, #8]
   109b6:	2b09      	cmp	r3, #9
   109b8:	d100      	bne.n	109bc <_task_destroy+0x48>
   109ba:	e0a1      	b.n	10b00 <_task_destroy+0x18c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:841
        _KLOGX2(KLOG_task_destroy, MQX_OK);
        return MQX_OK;
    } /* Endif */

    /* remove the victim from any queues it may be in. */
    if (victim_ptr->STATE == READY) {
   109bc:	2b02      	cmp	r3, #2
   109be:	d100      	bne.n	109c2 <_task_destroy+0x4e>
   109c0:	e08f      	b.n	10ae2 <_task_destroy+0x16e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:846
        if (victim_ptr != kernel_data->ACTIVE_PTR) {
            /* Remove other task from ready queue */
            _QUEUE_UNLINK(victim_ptr);
        } /* Endif */
    } else if (victim_ptr->STATE & IS_ON_TIMEOUT_Q) {
   109c2:	05da      	lsls	r2, r3, #23
   109c4:	d577      	bpl.n	10ab6 <_task_destroy+0x142>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:848
        /* Remove from time queue (uses NEXT, PREV field) */
        _TIME_DEQUEUE(victim_ptr, kernel_data);
   109c6:	6861      	ldr	r1, [r4, #4]
   109c8:	6822      	ldr	r2, [r4, #0]
   109ca:	600a      	str	r2, [r1, #0]
   109cc:	6051      	str	r1, [r2, #4]
   109ce:	1c31      	adds	r1, r6, #0
   109d0:	3135      	adds	r1, #53	; 0x35
   109d2:	31ff      	adds	r1, #255	; 0xff
   109d4:	890a      	ldrh	r2, [r1, #8]
   109d6:	3a01      	subs	r2, #1
   109d8:	810a      	strh	r2, [r1, #8]
   109da:	4a54      	ldr	r2, [pc, #336]	; (10b2c <_task_destroy+0x1b8>)
   109dc:	4013      	ands	r3, r2
   109de:	3205      	adds	r2, #5
   109e0:	32ff      	adds	r2, #255	; 0xff
   109e2:	4313      	orrs	r3, r2
   109e4:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:858
         * (uses NEXT, PREV field)
         */
        _QUEUE_REMOVE(victim_ptr->INFO, victim_ptr);
    } /* Endif */

    if (victim_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
   109e6:	055b      	lsls	r3, r3, #21
   109e8:	d507      	bpl.n	109fa <_task_destroy+0x86>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:864
        /*
         * Remove from queue, where suspended
         * eg, LWSEM_BLOCKED
         * (uses AUX_QUEUE field)
         */
        _QUEUE_REMOVE(victim_ptr->INFO, &victim_ptr->AUX_QUEUE);
   109ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
   109ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   109ee:	6013      	str	r3, [r2, #0]
   109f0:	605a      	str	r2, [r3, #4]
   109f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   109f4:	8913      	ldrh	r3, [r2, #8]
   109f6:	3b01      	subs	r3, #1
   109f8:	8113      	strh	r3, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:867
    } /* Endif */

    victim_ptr->STATE   = DYING;
   109fa:	2309      	movs	r3, #9
   109fc:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:883
    if (kernel_data->DSP_ACTIVE_PTR == victim_ptr) {
        kernel_data->DSP_ACTIVE_PTR = NULL;
    }/* Endif */
#endif

    _int_enable();
   109fe:	f7ff fb31 	bl	10064 <_int_enable>
   10a02:	1c35      	adds	r5, r6, #0
   10a04:	2387      	movs	r3, #135	; 0x87
   10a06:	35dd      	adds	r5, #221	; 0xdd
   10a08:	009b      	lsls	r3, r3, #2
   10a0a:	35ff      	adds	r5, #255	; 0xff
   10a0c:	18f7      	adds	r7, r6, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:889

#if MQX_COMPONENT_DESTRUCTION
    {
        _mqx_uint i;
        for (i = 0; i < MAX_KERNEL_COMPONENTS; ++i) {
            if (kernel_data->COMPONENT_CLEANUP[i] != NULL) {
   10a0e:	682b      	ldr	r3, [r5, #0]
   10a10:	2b00      	cmp	r3, #0
   10a12:	d001      	beq.n	10a18 <_task_destroy+0xa4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:890
                (*kernel_data->COMPONENT_CLEANUP[i])(victim_ptr);
   10a14:	1c20      	adds	r0, r4, #0
   10a16:	4798      	blx	r3
   10a18:	3504      	adds	r5, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:888
    _int_enable();

#if MQX_COMPONENT_DESTRUCTION
    {
        _mqx_uint i;
        for (i = 0; i < MAX_KERNEL_COMPONENTS; ++i) {
   10a1a:	42bd      	cmp	r5, r7
   10a1c:	d1f7      	bne.n	10a0e <_task_destroy+0x9a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:929
            block_ptr = next_block_ptr;
        }
    }
#endif /* MQX_LITE_VERSION_NUMBER */

    victim_ptr->TASK_ID = TASK_ID_DYING;
   10a1e:	2380      	movs	r3, #128	; 0x80
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:933

    /* Start SPR P171-0017-01                */
    /* Remove td from linked list of all tds */
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
   10a20:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:929
            block_ptr = next_block_ptr;
        }
    }
#endif /* MQX_LITE_VERSION_NUMBER */

    victim_ptr->TASK_ID = TASK_ID_DYING;
   10a22:	061b      	lsls	r3, r3, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:898
    }
#endif


    /* Save the task number */
    task_num = TASK_NUMBER_FROM_TASKID(victim_ptr->TASK_ID);
   10a24:	68e2      	ldr	r2, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:900

    td_ptr = kernel_data->ACTIVE_PTR;
   10a26:	69f5      	ldr	r5, [r6, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:933

    victim_ptr->TASK_ID = TASK_ID_DYING;

    /* Start SPR P171-0017-01                */
    /* Remove td from linked list of all tds */
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
   10a28:	31d4      	adds	r1, #212	; 0xd4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:929
            block_ptr = next_block_ptr;
        }
    }
#endif /* MQX_LITE_VERSION_NUMBER */

    victim_ptr->TASK_ID = TASK_ID_DYING;
   10a2a:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:933

    /* Start SPR P171-0017-01                */
    /* Remove td from linked list of all tds */
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
   10a2c:	890b      	ldrh	r3, [r1, #8]
   10a2e:	2b01      	cmp	r3, #1
   10a30:	d05f      	beq.n	10af2 <_task_destroy+0x17e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:937
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
        kernel_data->INSERT_TD_PTR = NULL;
    } else if (kernel_data->TASK_NUMBER > task_num) {
   10a32:	20e0      	movs	r0, #224	; 0xe0
   10a34:	5837      	ldr	r7, [r6, r0]
   10a36:	0412      	lsls	r2, r2, #16
   10a38:	0c12      	lsrs	r2, r2, #16
   10a3a:	4297      	cmp	r7, r2
   10a3c:	d846      	bhi.n	10acc <_task_destroy+0x158>
   10a3e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:943
        kernel_data->TASK_NUMBER   = task_num;
        kernel_data->INSERT_TD_PTR =
                        (TD_STRUCT_PTR)((unsigned char *)victim_ptr->TD_LIST_INFO.PREV -
                                        FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
    } /* Endif */
    _QUEUE_REMOVE(&kernel_data->TD_LIST, &victim_ptr->TD_LIST_INFO);
   10a40:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   10a42:	3b01      	subs	r3, #1
   10a44:	6010      	str	r0, [r2, #0]
   10a46:	6042      	str	r2, [r0, #4]
   10a48:	810b      	strh	r3, [r1, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:947
    /* End SPR P171-0017-01                  */

    /* Free up create/destroy for other tasks */
    _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
   10a4a:	4640      	mov	r0, r8
   10a4c:	f7ff fd18 	bl	10480 <_lwsem_post>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:949

    if (victim_ptr == td_ptr) {
   10a50:	42a5      	cmp	r5, r4
   10a52:	d05c      	beq.n	10b0e <_task_destroy+0x19a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:988
            victim_ptr->FLOAT_CONTEXT_PTR = NULL;
        }
    }
#endif /* MQX_LITE_VERSION_NUMBER */

    _psp_destroy_stack_frame(victim_ptr);
   10a54:	1c20      	adds	r0, r4, #0
   10a56:	f7ff fac9 	bl	ffec <_psp_destroy_stack_frame>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:1009
        _int_enable();
    }
#endif /* MQX_ENABLE_USER_MODE */

    _KLOGX2(KLOG_task_destroy, MQX_OK);
    return(MQX_OK);
   10a5a:	2000      	movs	r0, #0
   10a5c:	e798      	b.n	10990 <_task_destroy+0x1c>
_task_get_td():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2724
    {
        return((pointer)kernel_data->ACTIVE_PTR);
    }

    /* check task_id for SYSTEM_TASK_ID */
    if (task_id == kernel_data->SYSTEM_TD.TASK_ID)
   10a5e:	6d73      	ldr	r3, [r6, #84]	; 0x54
   10a60:	4298      	cmp	r0, r3
   10a62:	d03a      	beq.n	10ada <_task_destroy+0x166>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2730
    {
        return((void *)&(kernel_data->SYSTEM_TD));
    }

    /* SPR P171-0022-01 Use int disable, not a semaphore */
    _INT_DISABLE();
   10a64:	69f4      	ldr	r4, [r6, #28]
   10a66:	6d61      	ldr	r1, [r4, #84]	; 0x54
   10a68:	2900      	cmp	r1, #0
   10a6a:	d100      	bne.n	10a6e <_task_destroy+0xfa>
   10a6c:	b672      	cpsid	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2735
    /* END SPR */

    td_ptr = (TD_STRUCT_PTR)((unsigned char *)kernel_data->TD_LIST.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));

    size   = _QUEUE_GET_SIZE(&kernel_data->TD_LIST);
   10a6e:	1c32      	adds	r2, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2733

    /* SPR P171-0022-01 Use int disable, not a semaphore */
    _INT_DISABLE();
    /* END SPR */

    td_ptr = (TD_STRUCT_PTR)((unsigned char *)kernel_data->TD_LIST.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
   10a70:	23d4      	movs	r3, #212	; 0xd4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2730
    {
        return((void *)&(kernel_data->SYSTEM_TD));
    }

    /* SPR P171-0022-01 Use int disable, not a semaphore */
    _INT_DISABLE();
   10a72:	1c4d      	adds	r5, r1, #1
   10a74:	6565      	str	r5, [r4, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2735
    /* END SPR */

    td_ptr = (TD_STRUCT_PTR)((unsigned char *)kernel_data->TD_LIST.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));

    size   = _QUEUE_GET_SIZE(&kernel_data->TD_LIST);
   10a76:	32d4      	adds	r2, #212	; 0xd4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2733

    /* SPR P171-0022-01 Use int disable, not a semaphore */
    _INT_DISABLE();
    /* END SPR */

    td_ptr = (TD_STRUCT_PTR)((unsigned char *)kernel_data->TD_LIST.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
   10a78:	58f3      	ldr	r3, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2735

    size   = _QUEUE_GET_SIZE(&kernel_data->TD_LIST);
   10a7a:	8912      	ldrh	r2, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2733

    /* SPR P171-0022-01 Use int disable, not a semaphore */
    _INT_DISABLE();
    /* END SPR */

    td_ptr = (TD_STRUCT_PTR)((unsigned char *)kernel_data->TD_LIST.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
   10a7c:	3b68      	subs	r3, #104	; 0x68
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2736

    size   = _QUEUE_GET_SIZE(&kernel_data->TD_LIST);
    while (size--)
   10a7e:	2a00      	cmp	r2, #0
   10a80:	d00c      	beq.n	10a9c <_task_destroy+0x128>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2739
    {
        /* END SPR */
        if (td_ptr->TASK_ID == task_id)
   10a82:	68df      	ldr	r7, [r3, #12]
   10a84:	3a02      	subs	r2, #2
   10a86:	42b8      	cmp	r0, r7
   10a88:	d104      	bne.n	10a94 <_task_destroy+0x120>
   10a8a:	e00a      	b.n	10aa2 <_task_destroy+0x12e>
   10a8c:	68df      	ldr	r7, [r3, #12]
   10a8e:	3a01      	subs	r2, #1
   10a90:	42b8      	cmp	r0, r7
   10a92:	d006      	beq.n	10aa2 <_task_destroy+0x12e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2746
            /* SPR P171-0022-01 Use int disable, not a semaphore */
            _INT_ENABLE();
            /* END SPR */
            return (void *)td_ptr;
        } /* Endif */
        td_ptr = (TD_STRUCT_PTR)((unsigned char *)td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
   10a94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   10a96:	3b68      	subs	r3, #104	; 0x68
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2736
    /* END SPR */

    td_ptr = (TD_STRUCT_PTR)((unsigned char *)kernel_data->TD_LIST.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));

    size   = _QUEUE_GET_SIZE(&kernel_data->TD_LIST);
    while (size--)
   10a98:	1c57      	adds	r7, r2, #1
   10a9a:	d1f7      	bne.n	10a8c <_task_destroy+0x118>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2750
        } /* Endif */
        td_ptr = (TD_STRUCT_PTR)((unsigned char *)td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
    } /* Endwhile */

    /* SPR P171-0022-01 Use int disable, not a semaphore */
    _int_enable();
   10a9c:	f7ff fae2 	bl	10064 <_int_enable>
   10aa0:	e775      	b.n	1098e <_task_destroy+0x1a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2742
    {
        /* END SPR */
        if (td_ptr->TASK_ID == task_id)
        {
            /* SPR P171-0022-01 Use int disable, not a semaphore */
            _INT_ENABLE();
   10aa2:	2d00      	cmp	r5, #0
   10aa4:	d003      	beq.n	10aae <_task_destroy+0x13a>
   10aa6:	6561      	str	r1, [r4, #84]	; 0x54
   10aa8:	2900      	cmp	r1, #0
   10aaa:	d100      	bne.n	10aae <_task_destroy+0x13a>
   10aac:	b662      	cpsie	i
   10aae:	1c32      	adds	r2, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2744
            /* END SPR */
            return (void *)td_ptr;
   10ab0:	1c1c      	adds	r4, r3, #0
   10ab2:	3248      	adds	r2, #72	; 0x48
   10ab4:	e774      	b.n	109a0 <_task_destroy+0x2c>
_task_destroy_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:849
            _QUEUE_UNLINK(victim_ptr);
        } /* Endif */
    } else if (victim_ptr->STATE & IS_ON_TIMEOUT_Q) {
        /* Remove from time queue (uses NEXT, PREV field) */
        _TIME_DEQUEUE(victim_ptr, kernel_data);
    } else if (victim_ptr->STATE & TD_IS_ON_QUEUE) {
   10ab6:	059a      	lsls	r2, r3, #22
   10ab8:	d595      	bpl.n	109e6 <_task_destroy+0x72>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:855
        /*
         * Remove from queue, where suspended
         * eg, MUTEX_BLOCKED, IO_BLOCKED, TASKQ_BLOCKED
         * (uses NEXT, PREV field)
         */
        _QUEUE_REMOVE(victim_ptr->INFO, victim_ptr);
   10aba:	6861      	ldr	r1, [r4, #4]
   10abc:	6822      	ldr	r2, [r4, #0]
   10abe:	600a      	str	r2, [r1, #0]
   10ac0:	6051      	str	r1, [r2, #4]
   10ac2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   10ac4:	890a      	ldrh	r2, [r1, #8]
   10ac6:	3a01      	subs	r2, #1
   10ac8:	810a      	strh	r2, [r1, #8]
   10aca:	e78c      	b.n	109e6 <_task_destroy+0x72>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:938
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
        kernel_data->INSERT_TD_PTR = NULL;
    } else if (kernel_data->TASK_NUMBER > task_num) {
        kernel_data->TASK_NUMBER   = task_num;
   10acc:	5032      	str	r2, [r6, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:940
        kernel_data->INSERT_TD_PTR =
                        (TD_STRUCT_PTR)((unsigned char *)victim_ptr->TD_LIST_INFO.PREV -
   10ace:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:939
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
        kernel_data->INSERT_TD_PTR = NULL;
    } else if (kernel_data->TASK_NUMBER > task_num) {
        kernel_data->TASK_NUMBER   = task_num;
        kernel_data->INSERT_TD_PTR =
   10ad0:	20e4      	movs	r0, #228	; 0xe4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:940
                        (TD_STRUCT_PTR)((unsigned char *)victim_ptr->TD_LIST_INFO.PREV -
   10ad2:	1c17      	adds	r7, r2, #0
   10ad4:	3f68      	subs	r7, #104	; 0x68
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:939
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
        kernel_data->INSERT_TD_PTR = NULL;
    } else if (kernel_data->TASK_NUMBER > task_num) {
        kernel_data->TASK_NUMBER   = task_num;
        kernel_data->INSERT_TD_PTR =
   10ad6:	5037      	str	r7, [r6, r0]
   10ad8:	e7b2      	b.n	10a40 <_task_destroy+0xcc>
_task_get_td():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2726
    }

    /* check task_id for SYSTEM_TASK_ID */
    if (task_id == kernel_data->SYSTEM_TD.TASK_ID)
    {
        return((void *)&(kernel_data->SYSTEM_TD));
   10ada:	1c34      	adds	r4, r6, #0
   10adc:	3448      	adds	r4, #72	; 0x48
   10ade:	1c22      	adds	r2, r4, #0
   10ae0:	e75e      	b.n	109a0 <_task_destroy+0x2c>
_task_destroy_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:842
        return MQX_OK;
    } /* Endif */

    /* remove the victim from any queues it may be in. */
    if (victim_ptr->STATE == READY) {
        if (victim_ptr != kernel_data->ACTIVE_PTR) {
   10ae2:	69f3      	ldr	r3, [r6, #28]
   10ae4:	42a3      	cmp	r3, r4
   10ae6:	d088      	beq.n	109fa <_task_destroy+0x86>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:844
            /* Remove other task from ready queue */
            _QUEUE_UNLINK(victim_ptr);
   10ae8:	6862      	ldr	r2, [r4, #4]
   10aea:	6823      	ldr	r3, [r4, #0]
   10aec:	6013      	str	r3, [r2, #0]
   10aee:	605a      	str	r2, [r3, #4]
   10af0:	e783      	b.n	109fa <_task_destroy+0x86>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:935

    /* Start SPR P171-0017-01                */
    /* Remove td from linked list of all tds */
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
   10af2:	22e0      	movs	r2, #224	; 0xe0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:936
        kernel_data->INSERT_TD_PTR = NULL;
   10af4:	2000      	movs	r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:935

    /* Start SPR P171-0017-01                */
    /* Remove td from linked list of all tds */
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
   10af6:	50b3      	str	r3, [r6, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:936
        kernel_data->INSERT_TD_PTR = NULL;
   10af8:	3204      	adds	r2, #4
   10afa:	50b0      	str	r0, [r6, r2]
   10afc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   10afe:	e79f      	b.n	10a40 <_task_destroy+0xcc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:833
    _int_disable();

    if (victim_ptr->STATE == DYING) {
        /* Task is already being destroyed */
        /* SPR P171-0021-01 re-enable interrupts */
        _int_enable();
   10b00:	f7ff fab0 	bl	10064 <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:835
        /* END SPR */
        _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
   10b04:	4640      	mov	r0, r8
   10b06:	f7ff fcbb 	bl	10480 <_lwsem_post>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:837
        _KLOGX2(KLOG_task_destroy, MQX_OK);
        return MQX_OK;
   10b0a:	2000      	movs	r0, #0
   10b0c:	e740      	b.n	10990 <_task_destroy+0x1c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:951
    /* Free up create/destroy for other tasks */
    _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);

    if (victim_ptr == td_ptr) {
        /* We are destroying the current task */
        _int_disable();
   10b0e:	f7ff fa9d 	bl	1004c <_int_disable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:952
        _QUEUE_UNLINK(victim_ptr);  /* Remove myself from the ready queue */
   10b12:	6862      	ldr	r2, [r4, #4]
   10b14:	6823      	ldr	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:963
                _mem_free(victim_ptr->FLOAT_CONTEXT_PTR);
                victim_ptr->FLOAT_CONTEXT_PTR = NULL;
            }
        }
#endif /* MQX_LITE_VERSION_NUMBER */
        _psp_destroy_stack_frame(victim_ptr);
   10b16:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:952
    _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);

    if (victim_ptr == td_ptr) {
        /* We are destroying the current task */
        _int_disable();
        _QUEUE_UNLINK(victim_ptr);  /* Remove myself from the ready queue */
   10b18:	6013      	str	r3, [r2, #0]
   10b1a:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:963
                _mem_free(victim_ptr->FLOAT_CONTEXT_PTR);
                victim_ptr->FLOAT_CONTEXT_PTR = NULL;
            }
        }
#endif /* MQX_LITE_VERSION_NUMBER */
        _psp_destroy_stack_frame(victim_ptr);
   10b1c:	f7ff fa66 	bl	ffec <_psp_destroy_stack_frame>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:976
            _mem_transfer_internal(victim_ptr, SYSTEM_TD_PTR(kernel_data));
            _mem_free(victim_ptr);   /* Free the task descriptor */
        } /* Endif */
#endif /* MQX_LITE_VERSION_NUMBER */
        /* Now we must jump to the scheduler */
        _sched_run_internal();   /* WILL NEVER RETURN FROM HERE */
   10b20:	f004 f933 	bl	14d8a <_sched_run_internal>
   10b24:	e796      	b.n	10a54 <_task_destroy+0xe0>
   10b26:	46c0      	nop			; (mov r8, r8)
   10b28:	1fffe000 	.word	0x1fffe000
   10b2c:	fffffeff 	.word	0xfffffeff

00010b30 <_task_set_error>:
_task_set_error():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2830
{ /* Body */
#if MQX_TD_HAS_ERROR_CODE
    register KERNEL_DATA_STRUCT_PTR  kernel_data;
    register _mqx_uint               old_error_code;

    _GET_KERNEL_DATA(kernel_data);
   10b30:	4b0c      	ldr	r3, [pc, #48]	; (10b64 <_task_set_error+0x34>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2825
 */
_mqx_uint _task_set_error
(
    _mqx_uint new_error_code
)
{ /* Body */
   10b32:	1c02      	adds	r2, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2830
#if MQX_TD_HAS_ERROR_CODE
    register KERNEL_DATA_STRUCT_PTR  kernel_data;
    register _mqx_uint               old_error_code;

    _GET_KERNEL_DATA(kernel_data);
   10b34:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2835

    _KLOGE2(KLOG_task_set_error, new_error_code);

    /* get the old value */
    if (kernel_data->IN_ISR)
   10b36:	8b19      	ldrh	r1, [r3, #24]
   10b38:	2900      	cmp	r1, #0
   10b3a:	d005      	beq.n	10b48 <_task_set_error+0x18>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2837
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
   10b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   10b3e:	68d8      	ldr	r0, [r3, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   10b40:	2a00      	cmp	r2, #0
   10b42:	d107      	bne.n	10b54 <_task_set_error+0x24>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2848
    {
        if (kernel_data->IN_ISR)
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
   10b44:	60da      	str	r2, [r3, #12]
   10b46:	e004      	b.n	10b52 <_task_set_error+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2841
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
    }
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
   10b48:	69db      	ldr	r3, [r3, #28]
   10b4a:	6d98      	ldr	r0, [r3, #88]	; 0x58
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   10b4c:	2a00      	cmp	r2, #0
   10b4e:	d105      	bne.n	10b5c <_task_set_error+0x2c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2852
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
        }
        else
        {
            kernel_data->ACTIVE_PTR->TASK_ERROR_CODE = new_error_code;
   10b50:	659a      	str	r2, [r3, #88]	; 0x58
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2862
    return( old_error_code );
#else
    return MQX_OK;
#endif

}
   10b52:	4770      	bx	lr
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   10b54:	2800      	cmp	r0, #0
   10b56:	d1fc      	bne.n	10b52 <_task_set_error+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2848
    {
        if (kernel_data->IN_ISR)
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
   10b58:	60da      	str	r2, [r3, #12]
   10b5a:	e7fa      	b.n	10b52 <_task_set_error+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   10b5c:	2800      	cmp	r0, #0
   10b5e:	d0f7      	beq.n	10b50 <_task_set_error+0x20>
   10b60:	e7f7      	b.n	10b52 <_task_set_error+0x22>
   10b62:	46c0      	nop			; (mov r8, r8)
   10b64:	1fffe000 	.word	0x1fffe000

00010b68 <_task_init_internal>:
_task_init_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3087
    uint_32                  create_parameter,
    boolean                  dynamic,
    pointer                  input_stack_ptr,
    _mem_size                input_stack_size
)
{ /* Body */
   10b68:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b6a:	4657      	mov	r7, sl
   10b6c:	464e      	mov	r6, r9
   10b6e:	4645      	mov	r5, r8
   10b70:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3100

    char_ptr                 stack_ptr;
    _mqx_uint                stack_size;
    _mqx_uint                td_size;

    _GET_KERNEL_DATA(kernel_data);
   10b72:	4b82      	ldr	r3, [pc, #520]	; (10d7c <_task_init_internal+0x214>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3087
    uint_32                  create_parameter,
    boolean                  dynamic,
    pointer                  input_stack_ptr,
    _mem_size                input_stack_size
)
{ /* Body */
   10b74:	b4e0      	push	{r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3100

    char_ptr                 stack_ptr;
    _mqx_uint                stack_size;
    _mqx_uint                td_size;

    _GET_KERNEL_DATA(kernel_data);
   10b76:	681f      	ldr	r7, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3103

#if MQX_CHECK_ERRORS
    if (template_ptr->TASK_PRIORITY > kernel_data->LOWEST_TASK_PRIORITY)
   10b78:	23d0      	movs	r3, #208	; 0xd0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3087
    uint_32                  create_parameter,
    boolean                  dynamic,
    pointer                  input_stack_ptr,
    _mem_size                input_stack_size
)
{ /* Body */
   10b7a:	4690      	mov	r8, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3103
    _mqx_uint                td_size;

    _GET_KERNEL_DATA(kernel_data);

#if MQX_CHECK_ERRORS
    if (template_ptr->TASK_PRIORITY > kernel_data->LOWEST_TASK_PRIORITY)
   10b7c:	58fb      	ldr	r3, [r7, r3]
   10b7e:	68c2      	ldr	r2, [r0, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3087
    uint_32                  create_parameter,
    boolean                  dynamic,
    pointer                  input_stack_ptr,
    _mem_size                input_stack_size
)
{ /* Body */
   10b80:	b082      	sub	sp, #8
   10b82:	1c06      	adds	r6, r0, #0
   10b84:	4689      	mov	r9, r1
   10b86:	9c0a      	ldr	r4, [sp, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3103
    _mqx_uint                td_size;

    _GET_KERNEL_DATA(kernel_data);

#if MQX_CHECK_ERRORS
    if (template_ptr->TASK_PRIORITY > kernel_data->LOWEST_TASK_PRIORITY)
   10b88:	429a      	cmp	r2, r3
   10b8a:	d905      	bls.n	10b98 <_task_init_internal+0x30>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3106
    {
#if MQX_USE_IDLE_TASK
        if (template_ptr != &kernel_data->IDLE_TASK_TEMPLATE)
   10b8c:	2387      	movs	r3, #135	; 0x87
   10b8e:	009b      	lsls	r3, r3, #2
   10b90:	18fb      	adds	r3, r7, r3
   10b92:	4298      	cmp	r0, r3
   10b94:	d000      	beq.n	10b98 <_task_init_internal+0x30>
   10b96:	e091      	b.n	10cbc <_task_init_internal+0x154>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3127
     * must be no smaller than a specified minimum, and it
     * is made to be a multiple of longwords. The space allocated
     * for the stack includes the specified stacksize and the
     * overhead required by the kernel.
     */
    if (input_stack_ptr)
   10b98:	2c00      	cmp	r4, #0
   10b9a:	d100      	bne.n	10b9e <_task_init_internal+0x36>
   10b9c:	e0a6      	b.n	10cec <_task_init_internal+0x184>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3132
    {
        /* force stack size, ignore stack size from template */
        stack_size = input_stack_size;
#if MQX_CHECK_ERRORS
        if (stack_size <= (PSP_MINSTACKSIZE+sizeof(TD_STRUCT)))
   10b9e:	238c      	movs	r3, #140	; 0x8c
   10ba0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10ba2:	005b      	lsls	r3, r3, #1
   10ba4:	429a      	cmp	r2, r3
   10ba6:	d800      	bhi.n	10baa <_task_init_internal+0x42>
   10ba8:	e095      	b.n	10cd6 <_task_init_internal+0x16e>
_task_alloc_td_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3525
    uint_16                  task_num;

    _GET_KERNEL_DATA(kernel_data);

#if MQX_CHECK_ERRORS
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) >= (MAX_UINT_16-1))
   10baa:	1c3d      	adds	r5, r7, #0
   10bac:	35d4      	adds	r5, #212	; 0xd4
   10bae:	892a      	ldrh	r2, [r5, #8]
   10bb0:	4b73      	ldr	r3, [pc, #460]	; (10d80 <_task_init_internal+0x218>)
   10bb2:	429a      	cmp	r2, r3
   10bb4:	d900      	bls.n	10bb8 <_task_init_internal+0x50>
   10bb6:	e0c4      	b.n	10d42 <_task_init_internal+0x1da>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3549


    if (input_stack_ptr)
    {
        new_td_ptr = (TD_STRUCT_PTR)input_stack_ptr;
        _mem_zero((pointer)new_td_ptr, extra);
   10bb8:	1c20      	adds	r0, r4, #0
   10bba:	217c      	movs	r1, #124	; 0x7c
   10bbc:	f7ff f8ce 	bl	fd5c <_mem_zero>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3600
        new_td_ptr->TOS_RESERVED = ((uchar_ptr) new_td_ptr) + tos_offset;
    } /* Endif */
#endif

    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
   10bc0:	23e0      	movs	r3, #224	; 0xe0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3602
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);
   10bc2:	20ae      	movs	r0, #174	; 0xae
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3601
    } /* Endif */
#endif

    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
   10bc4:	22e4      	movs	r2, #228	; 0xe4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3600
        new_td_ptr->TOS_RESERVED = ((uchar_ptr) new_td_ptr) + tos_offset;
    } /* Endif */
#endif

    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
   10bc6:	58fb      	ldr	r3, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3602
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);
   10bc8:	0040      	lsls	r0, r0, #1
   10bca:	5838      	ldr	r0, [r7, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3600
        new_td_ptr->TOS_RESERVED = ((uchar_ptr) new_td_ptr) + tos_offset;
    } /* Endif */
#endif

    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
   10bcc:	b299      	uxth	r1, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3602
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);
   10bce:	041b      	lsls	r3, r3, #16
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3601
    } /* Endif */
#endif

    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
   10bd0:	58ba      	ldr	r2, [r7, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3602
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);
   10bd2:	0c1b      	lsrs	r3, r3, #16
   10bd4:	0400      	lsls	r0, r0, #16
   10bd6:	4303      	orrs	r3, r0
   10bd8:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3610
    {
        q_ptr = (QUEUE_ELEMENT_STRUCT_PTR)((pointer)&kernel_data->TD_LIST);
    }
    else
    {
        q_ptr = &insert_td_ptr->TD_LIST_INFO;
   10bda:	1c13      	adds	r3, r2, #0
   10bdc:	3368      	adds	r3, #104	; 0x68
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3604
    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);

    if (!insert_td_ptr)
   10bde:	2a00      	cmp	r2, #0
   10be0:	d100      	bne.n	10be4 <_task_init_internal+0x7c>
   10be2:	e076      	b.n	10cd2 <_task_init_internal+0x16a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3613
    else
    {
        q_ptr = &insert_td_ptr->TD_LIST_INFO;
    } /* Endif */

    _QUEUE_INSERT(&kernel_data->TD_LIST, q_ptr, &new_td_ptr->TD_LIST_INFO);
   10be4:	1c20      	adds	r0, r4, #0
   10be6:	681a      	ldr	r2, [r3, #0]
   10be8:	3068      	adds	r0, #104	; 0x68
   10bea:	66a2      	str	r2, [r4, #104]	; 0x68
   10bec:	6018      	str	r0, [r3, #0]
   10bee:	66e3      	str	r3, [r4, #108]	; 0x6c
   10bf0:	6050      	str	r0, [r2, #4]
   10bf2:	892b      	ldrh	r3, [r5, #8]
   10bf4:	1c20      	adds	r0, r4, #0
   10bf6:	3301      	adds	r3, #1
   10bf8:	812b      	strh	r3, [r5, #8]
   10bfa:	e003      	b.n	10c04 <_task_init_internal+0x9c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3627
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
        prev_td_ptr   = next_td_ptr;
        INC_TASK_NUMBER(task_num);
    } while( ((pointer)next_td_ptr != ((pointer)&kernel_data->TD_LIST)) &&
                    (TASK_NUMBER_FROM_TASKID(next_td_ptr->TASK_ID) == task_num) );
   10bfc:	8999      	ldrh	r1, [r3, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3626
    {
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
        prev_td_ptr   = next_td_ptr;
        INC_TASK_NUMBER(task_num);
    } while( ((pointer)next_td_ptr != ((pointer)&kernel_data->TD_LIST)) &&
   10bfe:	4291      	cmp	r1, r2
   10c00:	d109      	bne.n	10c16 <_task_init_internal+0xae>
   10c02:	1c18      	adds	r0, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3623
     */
    prev_td_ptr = new_td_ptr;
    do
    {
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
   10c04:	6e83      	ldr	r3, [r0, #104]	; 0x68
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3625
        prev_td_ptr   = next_td_ptr;
        INC_TASK_NUMBER(task_num);
   10c06:	1c4a      	adds	r2, r1, #1
   10c08:	b292      	uxth	r2, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3623
     */
    prev_td_ptr = new_td_ptr;
    do
    {
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
   10c0a:	3b68      	subs	r3, #104	; 0x68
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3625
        prev_td_ptr   = next_td_ptr;
        INC_TASK_NUMBER(task_num);
   10c0c:	2a00      	cmp	r2, #0
   10c0e:	d100      	bne.n	10c12 <_task_init_internal+0xaa>
   10c10:	3201      	adds	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3627
    } while( ((pointer)next_td_ptr != ((pointer)&kernel_data->TD_LIST)) &&
                    (TASK_NUMBER_FROM_TASKID(next_td_ptr->TASK_ID) == task_num) );
   10c12:	42ab      	cmp	r3, r5
   10c14:	d1f2      	bne.n	10bfc <_task_init_internal+0x94>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3629

    kernel_data->INSERT_TD_PTR = insert_td_ptr;
   10c16:	23e4      	movs	r3, #228	; 0xe4
   10c18:	50f8      	str	r0, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3630
    kernel_data->TASK_NUMBER   = task_num;
   10c1a:	3b04      	subs	r3, #4
   10c1c:	50fa      	str	r2, [r7, r3]
_task_init_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3141
        } /* Endif */
#endif
        td_ptr = _task_alloc_td_internal(stack_size, &td_size, input_stack_ptr, template_ptr->TASK_ATTRIBUTES & MQX_USER_TASK);
        stack_size -= td_size;

        if (dynamic)
   10c1e:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3143
        {
            stack_size -=  sizeof(TASK_TEMPLATE_STRUCT);
   10c20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3141
        } /* Endif */
#endif
        td_ptr = _task_alloc_td_internal(stack_size, &td_size, input_stack_ptr, template_ptr->TASK_ATTRIBUTES & MQX_USER_TASK);
        stack_size -= td_size;

        if (dynamic)
   10c22:	2b00      	cmp	r3, #0
   10c24:	d131      	bne.n	10c8a <_task_init_internal+0x122>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3185
    {
        _task_set_error(MQX_OUT_OF_TASK_DESCRIPTORS);
        return (NULL);
    } /* Endif */
#endif
    td_ptr->STATE = BLOCKED;
   10c26:	2303      	movs	r3, #3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3188

    /* get begin of new stack */
    if (td_ptr->STACK_ALLOC_BLOCK)
   10c28:	6f61      	ldr	r1, [r4, #116]	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3139
            _task_set_error(MQX_INVALID_SIZE);
            return(NULL);
        } /* Endif */
#endif
        td_ptr = _task_alloc_td_internal(stack_size, &td_size, input_stack_ptr, template_ptr->TASK_ATTRIBUTES & MQX_USER_TASK);
        stack_size -= td_size;
   10c2a:	3a7c      	subs	r2, #124	; 0x7c
   10c2c:	4692      	mov	sl, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3185
    {
        _task_set_error(MQX_OUT_OF_TASK_DESCRIPTORS);
        return (NULL);
    } /* Endif */
#endif
    td_ptr->STATE = BLOCKED;
   10c2e:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3188

    /* get begin of new stack */
    if (td_ptr->STACK_ALLOC_BLOCK)
   10c30:	2900      	cmp	r1, #0
   10c32:	d100      	bne.n	10c36 <_task_init_internal+0xce>
   10c34:	e094      	b.n	10d60 <_task_init_internal+0x1f8>
_task_fill_stack_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3339
    _mqx_uint_ptr addr_ptr,
    _mqx_uint     size
)
{ /* Body */

    size = (size/sizeof(_mqx_uint)) + 1;  /* Calculate # _mqx_uints */
   10c36:	4653      	mov	r3, sl
   10c38:	1c08      	adds	r0, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3342
    while (--size)
    {
        *addr_ptr++ = MQX_STACK_MONITOR_VALUE;
   10c3a:	4d52      	ldr	r5, [pc, #328]	; (10d84 <_task_init_internal+0x21c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3339
    _mqx_uint_ptr addr_ptr,
    _mqx_uint     size
)
{ /* Body */

    size = (size/sizeof(_mqx_uint)) + 1;  /* Calculate # _mqx_uints */
   10c3c:	089b      	lsrs	r3, r3, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3340
    while (--size)
   10c3e:	3b01      	subs	r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3342
    {
        *addr_ptr++ = MQX_STACK_MONITOR_VALUE;
   10c40:	c020      	stmia	r0!, {r5}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3340
    _mqx_uint     size
)
{ /* Body */

    size = (size/sizeof(_mqx_uint)) + 1;  /* Calculate # _mqx_uints */
    while (--size)
   10c42:	2b00      	cmp	r3, #0
   10c44:	d1fb      	bne.n	10c3e <_task_init_internal+0xd6>
_task_init_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3226
     *                          8
     *                        ...
     *     highest priority     0
     * With the READY_Q_LIST pointer pointing to the highest priority queue
     */
    ready_q_ptr = kernel_data->READY_Q_LIST - template_ptr->TASK_PRIORITY;
   10c46:	68f3      	ldr	r3, [r6, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3247
    td_ptr->FLAGS |= MQX_FLOATING_POINT_TASK;
#endif /* MQX_SAVE_FP_ALWAYS */

    if (input_stack_ptr)
    {
        td_ptr->FLAGS |= TASK_STACK_PREALLOCATED;
   10c48:	6975      	ldr	r5, [r6, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3226
     *                          8
     *                        ...
     *     highest priority     0
     * With the READY_Q_LIST pointer pointing to the highest priority queue
     */
    ready_q_ptr = kernel_data->READY_Q_LIST - template_ptr->TASK_PRIORITY;
   10c4a:	0118      	lsls	r0, r3, #4
   10c4c:	6a3b      	ldr	r3, [r7, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3251
    {
        td_ptr->FLAGS |= TASK_STACK_PREALLOCATED;
    } /* Endif */

    /* create stack frame - initialize stack parameters in TD and stack itself (registers required by scheduller, etc.) */
    if (FALSE == _psp_build_stack_frame(td_ptr, stack_ptr, stack_size, template_ptr, (_mqx_uint)ready_q_ptr->ENABLE_SR, create_parameter))
   10c4e:	4652      	mov	r2, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3226
     *                          8
     *                        ...
     *     highest priority     0
     * With the READY_Q_LIST pointer pointing to the highest priority queue
     */
    ready_q_ptr = kernel_data->READY_Q_LIST - template_ptr->TASK_PRIORITY;
   10c50:	1a1b      	subs	r3, r3, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3227
    td_ptr->MY_QUEUE = ready_q_ptr;
   10c52:	61e3      	str	r3, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3229
#if MQX_HAS_DYNAMIC_PRIORITIES
    td_ptr->HOME_QUEUE  = ready_q_ptr;
   10c54:	6223      	str	r3, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3231
#endif
    td_ptr->TASK_SR     = ready_q_ptr->ENABLE_SR;
   10c56:	8998      	ldrh	r0, [r3, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3247
    td_ptr->FLAGS |= MQX_FLOATING_POINT_TASK;
#endif /* MQX_SAVE_FP_ALWAYS */

    if (input_stack_ptr)
    {
        td_ptr->FLAGS |= TASK_STACK_PREALLOCATED;
   10c58:	2320      	movs	r3, #32
   10c5a:	432b      	orrs	r3, r5
   10c5c:	62a3      	str	r3, [r4, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3251
    } /* Endif */

    /* create stack frame - initialize stack parameters in TD and stack itself (registers required by scheduller, etc.) */
    if (FALSE == _psp_build_stack_frame(td_ptr, stack_ptr, stack_size, template_ptr, (_mqx_uint)ready_q_ptr->ENABLE_SR, create_parameter))
   10c5e:	4643      	mov	r3, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3231
    ready_q_ptr = kernel_data->READY_Q_LIST - template_ptr->TASK_PRIORITY;
    td_ptr->MY_QUEUE = ready_q_ptr;
#if MQX_HAS_DYNAMIC_PRIORITIES
    td_ptr->HOME_QUEUE  = ready_q_ptr;
#endif
    td_ptr->TASK_SR     = ready_q_ptr->ENABLE_SR;
   10c60:	84a0      	strh	r0, [r4, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3251
    {
        td_ptr->FLAGS |= TASK_STACK_PREALLOCATED;
    } /* Endif */

    /* create stack frame - initialize stack parameters in TD and stack itself (registers required by scheduller, etc.) */
    if (FALSE == _psp_build_stack_frame(td_ptr, stack_ptr, stack_size, template_ptr, (_mqx_uint)ready_q_ptr->ENABLE_SR, create_parameter))
   10c62:	9000      	str	r0, [sp, #0]
   10c64:	9301      	str	r3, [sp, #4]
   10c66:	1c20      	adds	r0, r4, #0
   10c68:	1c33      	adds	r3, r6, #0
   10c6a:	f7ff f99d 	bl	ffa8 <_psp_build_stack_frame>
   10c6e:	2800      	cmp	r0, #0
   10c70:	d03a      	beq.n	10ce8 <_task_init_internal+0x180>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3263
    /* Initialize the task's task descriptor. */
#if MQX_TD_HAS_TASK_TEMPLATE_PTR
    td_ptr->TASK_TEMPLATE_PTR = template_ptr;
#endif
#if MQX_TD_HAS_TEMPLATE_INDEX
    td_ptr->TEMPLATE_INDEX    = template_ptr->TASK_TEMPLATE_INDEX;
   10c72:	6833      	ldr	r3, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3319
        _mem_transfer_internal(td_ptr, td_ptr);
        _mem_transfer_internal(td_ptr->STACK_ALLOC_BLOCK, td_ptr);
    } /* Endif */
#endif /* MQX_LITE_VERSION_NUMBER */

    return (td_ptr);
   10c74:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3263
    /* Initialize the task's task descriptor. */
#if MQX_TD_HAS_TASK_TEMPLATE_PTR
    td_ptr->TASK_TEMPLATE_PTR = template_ptr;
#endif
#if MQX_TD_HAS_TEMPLATE_INDEX
    td_ptr->TEMPLATE_INDEX    = template_ptr->TASK_TEMPLATE_INDEX;
   10c76:	6623      	str	r3, [r4, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3299
    td_ptr->STDOUT_STREAM = kernel_data->PROCESSOR_STDOUT;
    td_ptr->STDERR_STREAM = kernel_data->PROCESSOR_STDERR;
#endif

#if MQX_TD_HAS_PARENT
    td_ptr->PARENT = creator_task_id;
   10c78:	464b      	mov	r3, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3260
    }


    /* Initialize the task's task descriptor. */
#if MQX_TD_HAS_TASK_TEMPLATE_PTR
    td_ptr->TASK_TEMPLATE_PTR = template_ptr;
   10c7a:	6666      	str	r6, [r4, #100]	; 0x64
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3299
    td_ptr->STDOUT_STREAM = kernel_data->PROCESSOR_STDOUT;
    td_ptr->STDERR_STREAM = kernel_data->PROCESSOR_STDERR;
#endif

#if MQX_TD_HAS_PARENT
    td_ptr->PARENT = creator_task_id;
   10c7c:	65e3      	str	r3, [r4, #92]	; 0x5c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3321
    } /* Endif */
#endif /* MQX_LITE_VERSION_NUMBER */

    return (td_ptr);

} /* Endbody */
   10c7e:	b002      	add	sp, #8
   10c80:	bc1c      	pop	{r2, r3, r4}
   10c82:	4690      	mov	r8, r2
   10c84:	4699      	mov	r9, r3
   10c86:	46a2      	mov	sl, r4
   10c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3185
    {
        _task_set_error(MQX_OUT_OF_TASK_DESCRIPTORS);
        return (NULL);
    } /* Endif */
#endif
    td_ptr->STATE = BLOCKED;
   10c8a:	2303      	movs	r3, #3
   10c8c:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3188

    /* get begin of new stack */
    if (td_ptr->STACK_ALLOC_BLOCK)
   10c8e:	6f63      	ldr	r3, [r4, #116]	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3143
        td_ptr = _task_alloc_td_internal(stack_size, &td_size, input_stack_ptr, template_ptr->TASK_ATTRIBUTES & MQX_USER_TASK);
        stack_size -= td_size;

        if (dynamic)
        {
            stack_size -=  sizeof(TASK_TEMPLATE_STRUCT);
   10c90:	3a98      	subs	r2, #152	; 0x98
   10c92:	4692      	mov	sl, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3188
    } /* Endif */
#endif
    td_ptr->STATE = BLOCKED;

    /* get begin of new stack */
    if (td_ptr->STACK_ALLOC_BLOCK)
   10c94:	469c      	mov	ip, r3
   10c96:	2b00      	cmp	r3, #0
   10c98:	d05d      	beq.n	10d56 <_task_init_internal+0x1ee>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3207
    if (dynamic)
    {
        /* task is creating from temporary template, store template before stack (in stack allocated memory) */
        new_template_ptr = (pointer)stack_ptr;
        stack_ptr +=  sizeof(TASK_TEMPLATE_STRUCT);
        *new_template_ptr = *template_ptr;
   10c9a:	4660      	mov	r0, ip
   10c9c:	ce2c      	ldmia	r6!, {r2, r3, r5}
   10c9e:	c02c      	stmia	r0!, {r2, r3, r5}
   10ca0:	ce2c      	ldmia	r6!, {r2, r3, r5}
   10ca2:	c02c      	stmia	r0!, {r2, r3, r5}
   10ca4:	6835      	ldr	r5, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3209
        template_ptr = new_template_ptr;
        template_ptr->TASK_TEMPLATE_INDEX |= SYSTEM_TASK_FLAG;
   10ca6:	4663      	mov	r3, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3207
    if (dynamic)
    {
        /* task is creating from temporary template, store template before stack (in stack allocated memory) */
        new_template_ptr = (pointer)stack_ptr;
        stack_ptr +=  sizeof(TASK_TEMPLATE_STRUCT);
        *new_template_ptr = *template_ptr;
   10ca8:	6005      	str	r5, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3209
        template_ptr = new_template_ptr;
        template_ptr->TASK_TEMPLATE_INDEX |= SYSTEM_TASK_FLAG;
   10caa:	2080      	movs	r0, #128	; 0x80
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3206

    if (dynamic)
    {
        /* task is creating from temporary template, store template before stack (in stack allocated memory) */
        new_template_ptr = (pointer)stack_ptr;
        stack_ptr +=  sizeof(TASK_TEMPLATE_STRUCT);
   10cac:	4661      	mov	r1, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3209
        *new_template_ptr = *template_ptr;
        template_ptr = new_template_ptr;
        template_ptr->TASK_TEMPLATE_INDEX |= SYSTEM_TASK_FLAG;
   10cae:	681d      	ldr	r5, [r3, #0]
   10cb0:	0600      	lsls	r0, r0, #24
   10cb2:	4328      	orrs	r0, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3206

    if (dynamic)
    {
        /* task is creating from temporary template, store template before stack (in stack allocated memory) */
        new_template_ptr = (pointer)stack_ptr;
        stack_ptr +=  sizeof(TASK_TEMPLATE_STRUCT);
   10cb4:	311c      	adds	r1, #28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3209
        *new_template_ptr = *template_ptr;
        template_ptr = new_template_ptr;
        template_ptr->TASK_TEMPLATE_INDEX |= SYSTEM_TASK_FLAG;
   10cb6:	6018      	str	r0, [r3, #0]
   10cb8:	4666      	mov	r6, ip
   10cba:	e7bc      	b.n	10c36 <_task_init_internal+0xce>
_task_set_error():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2835
    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_task_set_error, new_error_code);

    /* get the old value */
    if (kernel_data->IN_ISR)
   10cbc:	8b3b      	ldrh	r3, [r7, #24]
   10cbe:	2b00      	cmp	r3, #0
   10cc0:	d041      	beq.n	10d46 <_task_init_internal+0x1de>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2837
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
   10cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   10cc4:	68da      	ldr	r2, [r3, #12]
   10cc6:	2a00      	cmp	r2, #0
   10cc8:	d10e      	bne.n	10ce8 <_task_init_internal+0x180>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2848
    {
        if (kernel_data->IN_ISR)
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
   10cca:	220e      	movs	r2, #14
_task_init_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3111
        if (template_ptr != &kernel_data->IDLE_TASK_TEMPLATE)
        {
#endif /* MQX_USE_IDLE_TASK */

            _task_set_error(MQX_INVALID_TASK_PRIORITY);
            return (NULL);
   10ccc:	2000      	movs	r0, #0
_task_set_error():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2848

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
    {
        if (kernel_data->IN_ISR)
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
   10cce:	60da      	str	r2, [r3, #12]
   10cd0:	e7d5      	b.n	10c7e <_task_init_internal+0x116>
_task_alloc_td_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3606
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);

    if (!insert_td_ptr)
    {
        q_ptr = (QUEUE_ELEMENT_STRUCT_PTR)((pointer)&kernel_data->TD_LIST);
   10cd2:	1c2b      	adds	r3, r5, #0
   10cd4:	e786      	b.n	10be4 <_task_init_internal+0x7c>
_task_set_error():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2835
    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_task_set_error, new_error_code);

    /* get the old value */
    if (kernel_data->IN_ISR)
   10cd6:	8b3b      	ldrh	r3, [r7, #24]
   10cd8:	2b00      	cmp	r3, #0
   10cda:	d145      	bne.n	10d68 <_task_init_internal+0x200>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2841
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
    }
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
   10cdc:	69fb      	ldr	r3, [r7, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   10cde:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   10ce0:	2a00      	cmp	r2, #0
   10ce2:	d101      	bne.n	10ce8 <_task_init_internal+0x180>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2852
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
        }
        else
        {
            kernel_data->ACTIVE_PTR->TASK_ERROR_CODE = new_error_code;
   10ce4:	2202      	movs	r2, #2
   10ce6:	659a      	str	r2, [r3, #88]	; 0x58
_task_init_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3135
        stack_size = input_stack_size;
#if MQX_CHECK_ERRORS
        if (stack_size <= (PSP_MINSTACKSIZE+sizeof(TD_STRUCT)))
        {
            _task_set_error(MQX_INVALID_SIZE);
            return(NULL);
   10ce8:	2000      	movs	r0, #0
   10cea:	e7c8      	b.n	10c7e <_task_init_internal+0x116>
_task_alloc_td_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3525
    uint_16                  task_num;

    _GET_KERNEL_DATA(kernel_data);

#if MQX_CHECK_ERRORS
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) >= (MAX_UINT_16-1))
   10cec:	1c3d      	adds	r5, r7, #0
   10cee:	35d4      	adds	r5, #212	; 0xd4
   10cf0:	892b      	ldrh	r3, [r5, #8]
   10cf2:	4a23      	ldr	r2, [pc, #140]	; (10d80 <_task_init_internal+0x218>)
   10cf4:	4293      	cmp	r3, r2
   10cf6:	d821      	bhi.n	10d3c <_task_init_internal+0x1d4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3601
    } /* Endif */
#endif

    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
   10cf8:	21e4      	movs	r1, #228	; 0xe4
   10cfa:	5878      	ldr	r0, [r7, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3600
        new_td_ptr->TOS_RESERVED = ((uchar_ptr) new_td_ptr) + tos_offset;
    } /* Endif */
#endif

    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
   10cfc:	22e0      	movs	r2, #224	; 0xe0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3610
    {
        q_ptr = (QUEUE_ELEMENT_STRUCT_PTR)((pointer)&kernel_data->TD_LIST);
    }
    else
    {
        q_ptr = &insert_td_ptr->TD_LIST_INFO;
   10cfe:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3600
        new_td_ptr->TOS_RESERVED = ((uchar_ptr) new_td_ptr) + tos_offset;
    } /* Endif */
#endif

    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
   10d00:	5aba      	ldrh	r2, [r7, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3610
    {
        q_ptr = (QUEUE_ELEMENT_STRUCT_PTR)((pointer)&kernel_data->TD_LIST);
    }
    else
    {
        q_ptr = &insert_td_ptr->TD_LIST_INFO;
   10d02:	3168      	adds	r1, #104	; 0x68
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3604
    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);

    if (!insert_td_ptr)
   10d04:	2800      	cmp	r0, #0
   10d06:	d037      	beq.n	10d78 <_task_init_internal+0x210>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3613
    else
    {
        q_ptr = &insert_td_ptr->TD_LIST_INFO;
    } /* Endif */

    _QUEUE_INSERT(&kernel_data->TD_LIST, q_ptr, &new_td_ptr->TD_LIST_INFO);
   10d08:	2000      	movs	r0, #0
   10d0a:	1c04      	adds	r4, r0, #0
   10d0c:	680e      	ldr	r6, [r1, #0]
   10d0e:	3468      	adds	r4, #104	; 0x68
   10d10:	3301      	adds	r3, #1
   10d12:	600c      	str	r4, [r1, #0]
   10d14:	6074      	str	r4, [r6, #4]
   10d16:	812b      	strh	r3, [r5, #8]
   10d18:	e003      	b.n	10d22 <_task_init_internal+0x1ba>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3627
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
        prev_td_ptr   = next_td_ptr;
        INC_TASK_NUMBER(task_num);
    } while( ((pointer)next_td_ptr != ((pointer)&kernel_data->TD_LIST)) &&
                    (TASK_NUMBER_FROM_TASKID(next_td_ptr->TASK_ID) == task_num) );
   10d1a:	899a      	ldrh	r2, [r3, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3626
    {
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
        prev_td_ptr   = next_td_ptr;
        INC_TASK_NUMBER(task_num);
    } while( ((pointer)next_td_ptr != ((pointer)&kernel_data->TD_LIST)) &&
   10d1c:	428a      	cmp	r2, r1
   10d1e:	d109      	bne.n	10d34 <_task_init_internal+0x1cc>
   10d20:	1c18      	adds	r0, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3623
     */
    prev_td_ptr = new_td_ptr;
    do
    {
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
   10d22:	6e83      	ldr	r3, [r0, #104]	; 0x68
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3625
        prev_td_ptr   = next_td_ptr;
        INC_TASK_NUMBER(task_num);
   10d24:	3201      	adds	r2, #1
   10d26:	b291      	uxth	r1, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3623
     */
    prev_td_ptr = new_td_ptr;
    do
    {
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
   10d28:	3b68      	subs	r3, #104	; 0x68
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3625
        prev_td_ptr   = next_td_ptr;
        INC_TASK_NUMBER(task_num);
   10d2a:	2900      	cmp	r1, #0
   10d2c:	d100      	bne.n	10d30 <_task_init_internal+0x1c8>
   10d2e:	3101      	adds	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3627
    } while( ((pointer)next_td_ptr != ((pointer)&kernel_data->TD_LIST)) &&
                    (TASK_NUMBER_FROM_TASKID(next_td_ptr->TASK_ID) == task_num) );
   10d30:	42ab      	cmp	r3, r5
   10d32:	d1f2      	bne.n	10d1a <_task_init_internal+0x1b2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3629

    kernel_data->INSERT_TD_PTR = insert_td_ptr;
   10d34:	23e4      	movs	r3, #228	; 0xe4
   10d36:	50f8      	str	r0, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3630
    kernel_data->TASK_NUMBER   = task_num;
   10d38:	3b04      	subs	r3, #4
   10d3a:	50f9      	str	r1, [r7, r3]
_task_init_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3185
    {
        _task_set_error(MQX_OUT_OF_TASK_DESCRIPTORS);
        return (NULL);
    } /* Endif */
#endif
    td_ptr->STATE = BLOCKED;
   10d3c:	2300      	movs	r3, #0
   10d3e:	609b      	str	r3, [r3, #8]
   10d40:	deff      	udf	#255	; 0xff
_task_alloc_td_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3528

#if MQX_CHECK_ERRORS
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) >= (MAX_UINT_16-1))
    {
        /* We already have maximum number of tasks in system */
        return NULL;
   10d42:	2400      	movs	r4, #0
   10d44:	e76b      	b.n	10c1e <_task_init_internal+0xb6>
_task_set_error():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2841
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
    }
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
   10d46:	69fb      	ldr	r3, [r7, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   10d48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   10d4a:	2a00      	cmp	r2, #0
   10d4c:	d1cc      	bne.n	10ce8 <_task_init_internal+0x180>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2852
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
        }
        else
        {
            kernel_data->ACTIVE_PTR->TASK_ERROR_CODE = new_error_code;
   10d4e:	220e      	movs	r2, #14
_task_init_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3111
        if (template_ptr != &kernel_data->IDLE_TASK_TEMPLATE)
        {
#endif /* MQX_USE_IDLE_TASK */

            _task_set_error(MQX_INVALID_TASK_PRIORITY);
            return (NULL);
   10d50:	2000      	movs	r0, #0
_task_set_error():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2852
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
        }
        else
        {
            kernel_data->ACTIVE_PTR->TASK_ERROR_CODE = new_error_code;
   10d52:	659a      	str	r2, [r3, #88]	; 0x58
   10d54:	e793      	b.n	10c7e <_task_init_internal+0x116>
_task_init_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3198
    }
    else
    {
        /* (this will be executed if user provide input_stack_size) */
        /* stack start in provided block behind TD */
        stack_ptr = (char *)td_ptr + td_size;
   10d56:	1c23      	adds	r3, r4, #0
   10d58:	337c      	adds	r3, #124	; 0x7c
   10d5a:	469c      	mov	ip, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3199
        td_ptr->STACK_ALLOC_BLOCK = stack_ptr;
   10d5c:	6763      	str	r3, [r4, #116]	; 0x74
   10d5e:	e79c      	b.n	10c9a <_task_init_internal+0x132>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3198
    }
    else
    {
        /* (this will be executed if user provide input_stack_size) */
        /* stack start in provided block behind TD */
        stack_ptr = (char *)td_ptr + td_size;
   10d60:	1c21      	adds	r1, r4, #0
   10d62:	317c      	adds	r1, #124	; 0x7c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3199
        td_ptr->STACK_ALLOC_BLOCK = stack_ptr;
   10d64:	6761      	str	r1, [r4, #116]	; 0x74
   10d66:	e766      	b.n	10c36 <_task_init_internal+0xce>
_task_set_error():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2837
    _KLOGE2(KLOG_task_set_error, new_error_code);

    /* get the old value */
    if (kernel_data->IN_ISR)
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
   10d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   10d6a:	68da      	ldr	r2, [r3, #12]
   10d6c:	2a00      	cmp	r2, #0
   10d6e:	d1bb      	bne.n	10ce8 <_task_init_internal+0x180>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2848
    {
        if (kernel_data->IN_ISR)
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
   10d70:	2202      	movs	r2, #2
_task_init_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3135
        stack_size = input_stack_size;
#if MQX_CHECK_ERRORS
        if (stack_size <= (PSP_MINSTACKSIZE+sizeof(TD_STRUCT)))
        {
            _task_set_error(MQX_INVALID_SIZE);
            return(NULL);
   10d72:	2000      	movs	r0, #0
_task_set_error():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2848

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
    {
        if (kernel_data->IN_ISR)
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
   10d74:	60da      	str	r2, [r3, #12]
   10d76:	e782      	b.n	10c7e <_task_init_internal+0x116>
_task_alloc_td_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3606
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);

    if (!insert_td_ptr)
    {
        q_ptr = (QUEUE_ELEMENT_STRUCT_PTR)((pointer)&kernel_data->TD_LIST);
   10d78:	1c29      	adds	r1, r5, #0
   10d7a:	e7c5      	b.n	10d08 <_task_init_internal+0x1a0>
   10d7c:	1fffe000 	.word	0x1fffe000
   10d80:	0000fffd 	.word	0x0000fffd
   10d84:	7374616b 	.word	0x7374616b

00010d88 <_task_create_at>:
_task_create_at():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:704
    _mqx_uint           template_index,
    uint_32             parameter,
    pointer             stack_ptr,
    _mem_size           stack_size
)
{ /* Body */
   10d88:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d8a:	4645      	mov	r5, r8
   10d8c:	4657      	mov	r7, sl
   10d8e:	464e      	mov	r6, r9
   10d90:	b4e0      	push	{r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:709
    KERNEL_DATA_STRUCT_PTR kernel_data;
    TD_STRUCT_PTR          td_ptr;
    _task_id               result;

    _GET_KERNEL_DATA(kernel_data);
   10d92:	4f59      	ldr	r7, [pc, #356]	; (10ef8 <_task_create_at+0x170>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:704
    _mqx_uint           template_index,
    uint_32             parameter,
    pointer             stack_ptr,
    _mem_size           stack_size
)
{ /* Body */
   10d94:	b082      	sub	sp, #8
   10d96:	1c16      	adds	r6, r2, #0
   10d98:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:709
    KERNEL_DATA_STRUCT_PTR kernel_data;
    TD_STRUCT_PTR          td_ptr;
    _task_id               result;

    _GET_KERNEL_DATA(kernel_data);
   10d9a:	683d      	ldr	r5, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:714
    _KLOGE5(KLOG_task_create_at, processor_number, template_index, parameter,
                    stack_ptr);

#if MQX_CHECK_ERRORS
    if (template_index & SYSTEM_TASK_FLAG)
   10d9c:	2900      	cmp	r1, #0
   10d9e:	da00      	bge.n	10da2 <_task_create_at+0x1a>
   10da0:	e083      	b.n	10eaa <_task_create_at+0x122>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:724
        return MQX_NULL_TASK_ID;
    } /* Endif */
#endif

#if MQX_CHECK_ERRORS
    if (processor_number != 0)
   10da2:	2800      	cmp	r0, #0
   10da4:	d164      	bne.n	10e70 <_task_create_at+0xe8>
_task_build_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2924
    boolean                  dynamic;
    uint_32                  create_parameter;

    _GET_KERNEL_DATA(kernel_data);

    if ( template_index )
   10da6:	2900      	cmp	r1, #0
   10da8:	d147      	bne.n	10e3a <_task_create_at+0xb2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2947
    }
    else
    {
        task_template_ptr = (TASK_TEMPLATE_STRUCT_PTR)parameter;
        create_parameter  = task_template_ptr->CREATION_PARAMETER;
        dynamic = TRUE;
   10daa:	2301      	movs	r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2945
            task_template_ptr = NULL;
        } /* Endif */
    }
    else
    {
        task_template_ptr = (TASK_TEMPLATE_STRUCT_PTR)parameter;
   10dac:	1c14      	adds	r4, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2947
        create_parameter  = task_template_ptr->CREATION_PARAMETER;
        dynamic = TRUE;
   10dae:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2946
        } /* Endif */
    }
    else
    {
        task_template_ptr = (TASK_TEMPLATE_STRUCT_PTR)parameter;
        create_parameter  = task_template_ptr->CREATION_PARAMETER;
   10db0:	6996      	ldr	r6, [r2, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2978
        }
    }
#endif

    /* serialize task creation/destruction */
    _lwsem_wait((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
   10db2:	1c6b      	adds	r3, r5, #1
   10db4:	33ff      	adds	r3, #255	; 0xff
   10db6:	1c18      	adds	r0, r3, #0
   10db8:	4699      	mov	r9, r3
   10dba:	f7ff fbbb 	bl	10534 <_lwsem_wait>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2981

    /* Create the task, but do not ready it */
    td_ptr = _task_init_internal(task_template_ptr, kernel_data->ACTIVE_PTR->TASK_ID, \
   10dbe:	69eb      	ldr	r3, [r5, #28]
   10dc0:	1c20      	adds	r0, r4, #0
   10dc2:	68d9      	ldr	r1, [r3, #12]
   10dc4:	4643      	mov	r3, r8
   10dc6:	9300      	str	r3, [sp, #0]
   10dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10dca:	1c32      	adds	r2, r6, #0
   10dcc:	9301      	str	r3, [sp, #4]
   10dce:	4653      	mov	r3, sl
   10dd0:	f7ff feca 	bl	10b68 <_task_init_internal>
   10dd4:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2985
                    create_parameter, dynamic, stack_ptr, stack_size);

    /* Allow other tasks to create */
    _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
   10dd6:	4648      	mov	r0, r9
   10dd8:	f7ff fb52 	bl	10480 <_lwsem_post>
_task_create_at():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:734
        return MQX_NULL_TASK_ID;
    } /* Endif */
#endif

    td_ptr = _task_build_internal(template_index, parameter, stack_ptr, stack_size, FALSE);
    if (td_ptr != NULL)
   10ddc:	2c00      	cmp	r4, #0
   10dde:	d100      	bne.n	10de2 <_task_create_at+0x5a>
   10de0:	e077      	b.n	10ed2 <_task_create_at+0x14a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:737
    {
        result = td_ptr->TASK_ID;
        _INT_DISABLE();
   10de2:	69e9      	ldr	r1, [r5, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:736
#endif

    td_ptr = _task_build_internal(template_index, parameter, stack_ptr, stack_size, FALSE);
    if (td_ptr != NULL)
    {
        result = td_ptr->TASK_ID;
   10de4:	68e3      	ldr	r3, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:737
        _INT_DISABLE();
   10de6:	6d48      	ldr	r0, [r1, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:736
#endif

    td_ptr = _task_build_internal(template_index, parameter, stack_ptr, stack_size, FALSE);
    if (td_ptr != NULL)
    {
        result = td_ptr->TASK_ID;
   10de8:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:737
        _INT_DISABLE();
   10dea:	2800      	cmp	r0, #0
   10dec:	d135      	bne.n	10e5a <_task_create_at+0xd2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:737 (discriminator 1)
   10dee:	b672      	cpsid	i
   10df0:	2301      	movs	r3, #1
_task_ready_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3368 (discriminator 1)
{ /* Body */
    KERNEL_DATA_STRUCT_PTR       kernel_data;
    register READY_Q_STRUCT_PTR  ready_q_ptr;
    register TD_STRUCT_PTR       old_tail_ptr;

    _GET_KERNEL_DATA(kernel_data);
   10df2:	683f      	ldr	r7, [r7, #0]
_task_create_at():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:737 (discriminator 1)

    td_ptr = _task_build_internal(template_index, parameter, stack_ptr, stack_size, FALSE);
    if (td_ptr != NULL)
    {
        result = td_ptr->TASK_ID;
        _INT_DISABLE();
   10df4:	654b      	str	r3, [r1, #84]	; 0x54
_task_ready_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3380 (discriminator 1)
     * Ready queues are ALWAYS allocated with higher priority queues in higher
     * memory, thus we need to update the CURRENT_READY_Q field (which
     * always points to the highest priority ready queue with a task
     * on it.
     */
    if ( (uchar_ptr)ready_q_ptr > (uchar_ptr)(kernel_data->CURRENT_READY_Q) )
   10df6:	6a7e      	ldr	r6, [r7, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3372 (discriminator 1)

    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_task_ready, td_ptr);

    ready_q_ptr   = td_ptr->MY_QUEUE;
   10df8:	69e3      	ldr	r3, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3373 (discriminator 1)
    old_tail_ptr  = ready_q_ptr->TAIL_READY_Q;
   10dfa:	685a      	ldr	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3380 (discriminator 1)
     * Ready queues are ALWAYS allocated with higher priority queues in higher
     * memory, thus we need to update the CURRENT_READY_Q field (which
     * always points to the highest priority ready queue with a task
     * on it.
     */
    if ( (uchar_ptr)ready_q_ptr > (uchar_ptr)(kernel_data->CURRENT_READY_Q) )
   10dfc:	42b3      	cmp	r3, r6
   10dfe:	d94a      	bls.n	10e96 <_task_create_at+0x10e>
_task_create_at():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:737

    td_ptr = _task_build_internal(template_index, parameter, stack_ptr, stack_size, FALSE);
    if (td_ptr != NULL)
    {
        result = td_ptr->TASK_ID;
        _INT_DISABLE();
   10e00:	2601      	movs	r6, #1
   10e02:	46b4      	mov	ip, r6
_task_ready_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3382
     * always points to the highest priority ready queue with a task
     * on it.
     */
    if ( (uchar_ptr)ready_q_ptr > (uchar_ptr)(kernel_data->CURRENT_READY_Q) )
    {
        kernel_data->CURRENT_READY_Q = ready_q_ptr;
   10e04:	627b      	str	r3, [r7, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3385
    } /* Endif */

    td_ptr->STATE              = READY;
   10e06:	2702      	movs	r7, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3387
    td_ptr->TD_PREV            = old_tail_ptr;
    td_ptr->TD_NEXT            = old_tail_ptr->TD_NEXT;
   10e08:	6816      	ldr	r6, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3385
    if ( (uchar_ptr)ready_q_ptr > (uchar_ptr)(kernel_data->CURRENT_READY_Q) )
    {
        kernel_data->CURRENT_READY_Q = ready_q_ptr;
    } /* Endif */

    td_ptr->STATE              = READY;
   10e0a:	60a7      	str	r7, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3386
    td_ptr->TD_PREV            = old_tail_ptr;
   10e0c:	6062      	str	r2, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3387
    td_ptr->TD_NEXT            = old_tail_ptr->TD_NEXT;
   10e0e:	6026      	str	r6, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3388
    old_tail_ptr->TD_NEXT      = td_ptr;
   10e10:	6014      	str	r4, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3389
    ready_q_ptr->TAIL_READY_Q  = td_ptr;
   10e12:	605c      	str	r4, [r3, #4]
_task_create_at():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:739
    if (td_ptr != NULL)
    {
        result = td_ptr->TASK_ID;
        _INT_DISABLE();
        _task_ready_internal(td_ptr);
        _INT_ENABLE();
   10e14:	4663      	mov	r3, ip
   10e16:	2b00      	cmp	r3, #0
   10e18:	d002      	beq.n	10e20 <_task_create_at+0x98>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:739 (discriminator 1)
   10e1a:	6548      	str	r0, [r1, #84]	; 0x54
   10e1c:	2800      	cmp	r0, #0
   10e1e:	d042      	beq.n	10ea6 <_task_create_at+0x11e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:740
        _CHECK_RUN_SCHEDULER(); /* Let a higher priority task run */
   10e20:	f003 ffb6 	bl	14d90 <_sched_check_scheduler_internal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:753
    _KLOGX3(KLOG_task_create_at, result,
                    kernel_data->ACTIVE_PTR->TASK_ERROR_CODE);
#endif
    _tad_task_at_flag++;

    return (result);
   10e24:	4640      	mov	r0, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:751

#if MQX_TD_HAS_ERROR_CODE
    _KLOGX3(KLOG_task_create_at, result,
                    kernel_data->ACTIVE_PTR->TASK_ERROR_CODE);
#endif
    _tad_task_at_flag++;
   10e26:	4a35      	ldr	r2, [pc, #212]	; (10efc <_task_create_at+0x174>)
   10e28:	6813      	ldr	r3, [r2, #0]
   10e2a:	3301      	adds	r3, #1
   10e2c:	6013      	str	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:755

    return (result);

} /* Endbody */
   10e2e:	b002      	add	sp, #8
   10e30:	bc1c      	pop	{r2, r3, r4}
   10e32:	4690      	mov	r8, r2
   10e34:	4699      	mov	r9, r3
   10e36:	46a2      	mov	sl, r4
   10e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
_task_build_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2930
    {
        dynamic = FALSE;
        create_parameter = parameter;

        /* Search all the local task templates for one whose index matches */
        task_template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;
   10e3a:	23be      	movs	r3, #190	; 0xbe
   10e3c:	005b      	lsls	r3, r3, #1
   10e3e:	58ec      	ldr	r4, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2932

        while ( task_template_ptr->TASK_TEMPLATE_INDEX &&
   10e40:	6823      	ldr	r3, [r4, #0]
   10e42:	2b00      	cmp	r3, #0
   10e44:	d104      	bne.n	10e50 <_task_create_at+0xc8>
   10e46:	e03b      	b.n	10ec0 <_task_create_at+0x138>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2935
                        (task_template_ptr->TASK_TEMPLATE_INDEX != template_index) )
        {
            ++task_template_ptr;
   10e48:	341c      	adds	r4, #28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2932
        create_parameter = parameter;

        /* Search all the local task templates for one whose index matches */
        task_template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;

        while ( task_template_ptr->TASK_TEMPLATE_INDEX &&
   10e4a:	6823      	ldr	r3, [r4, #0]
   10e4c:	2b00      	cmp	r3, #0
   10e4e:	d037      	beq.n	10ec0 <_task_create_at+0x138>
   10e50:	4299      	cmp	r1, r3
   10e52:	d1f9      	bne.n	10e48 <_task_create_at+0xc0>
_task_create_at():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:704
    _mqx_uint           template_index,
    uint_32             parameter,
    pointer             stack_ptr,
    _mem_size           stack_size
)
{ /* Body */
   10e54:	2300      	movs	r3, #0
   10e56:	469a      	mov	sl, r3
   10e58:	e7ab      	b.n	10db2 <_task_create_at+0x2a>
_task_ready_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3368 (discriminator 3)
{ /* Body */
    KERNEL_DATA_STRUCT_PTR       kernel_data;
    register READY_Q_STRUCT_PTR  ready_q_ptr;
    register TD_STRUCT_PTR       old_tail_ptr;

    _GET_KERNEL_DATA(kernel_data);
   10e5a:	683f      	ldr	r7, [r7, #0]
_task_create_at():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:737 (discriminator 3)

    td_ptr = _task_build_internal(template_index, parameter, stack_ptr, stack_size, FALSE);
    if (td_ptr != NULL)
    {
        result = td_ptr->TASK_ID;
        _INT_DISABLE();
   10e5c:	1c43      	adds	r3, r0, #1
   10e5e:	469c      	mov	ip, r3
   10e60:	654b      	str	r3, [r1, #84]	; 0x54
_task_ready_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3380 (discriminator 3)
     * Ready queues are ALWAYS allocated with higher priority queues in higher
     * memory, thus we need to update the CURRENT_READY_Q field (which
     * always points to the highest priority ready queue with a task
     * on it.
     */
    if ( (uchar_ptr)ready_q_ptr > (uchar_ptr)(kernel_data->CURRENT_READY_Q) )
   10e62:	6a7e      	ldr	r6, [r7, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3372 (discriminator 3)

    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_task_ready, td_ptr);

    ready_q_ptr   = td_ptr->MY_QUEUE;
   10e64:	69e3      	ldr	r3, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3373 (discriminator 3)
    old_tail_ptr  = ready_q_ptr->TAIL_READY_Q;
   10e66:	685a      	ldr	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3380 (discriminator 3)
     * Ready queues are ALWAYS allocated with higher priority queues in higher
     * memory, thus we need to update the CURRENT_READY_Q field (which
     * always points to the highest priority ready queue with a task
     * on it.
     */
    if ( (uchar_ptr)ready_q_ptr > (uchar_ptr)(kernel_data->CURRENT_READY_Q) )
   10e68:	42b3      	cmp	r3, r6
   10e6a:	d9cc      	bls.n	10e06 <_task_create_at+0x7e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3382
    {
        kernel_data->CURRENT_READY_Q = ready_q_ptr;
   10e6c:	627b      	str	r3, [r7, #36]	; 0x24
   10e6e:	e7ca      	b.n	10e06 <_task_create_at+0x7e>
_task_set_error():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2835
    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_task_set_error, new_error_code);

    /* get the old value */
    if (kernel_data->IN_ISR)
   10e70:	8b2b      	ldrh	r3, [r5, #24]
   10e72:	2b00      	cmp	r3, #0
   10e74:	d007      	beq.n	10e86 <_task_create_at+0xfe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2837
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
   10e76:	6b6b      	ldr	r3, [r5, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   10e78:	68da      	ldr	r2, [r3, #12]
   10e7a:	2a00      	cmp	r2, #0
   10e7c:	d109      	bne.n	10e92 <_task_create_at+0x10a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2848
    {
        if (kernel_data->IN_ISR)
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
   10e7e:	2213      	movs	r2, #19
_task_create_at():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:729
    if (processor_number != 0)
    {
        _task_set_error(MQX_INVALID_PROCESSOR_NUMBER);

        _KLOGX3(KLOG_task_create_at, MQX_NULL_TASK_ID, MQX_INVALID_PROCESSOR_NUMBER);
        return MQX_NULL_TASK_ID;
   10e80:	2000      	movs	r0, #0
_task_set_error():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2848

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
    {
        if (kernel_data->IN_ISR)
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
   10e82:	60da      	str	r2, [r3, #12]
   10e84:	e7d3      	b.n	10e2e <_task_create_at+0xa6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2841
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
    }
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
   10e86:	69eb      	ldr	r3, [r5, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   10e88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   10e8a:	2a00      	cmp	r2, #0
   10e8c:	d101      	bne.n	10e92 <_task_create_at+0x10a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2852
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
        }
        else
        {
            kernel_data->ACTIVE_PTR->TASK_ERROR_CODE = new_error_code;
   10e8e:	2213      	movs	r2, #19
   10e90:	659a      	str	r2, [r3, #88]	; 0x58
_task_create_at():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:729
    if (processor_number != 0)
    {
        _task_set_error(MQX_INVALID_PROCESSOR_NUMBER);

        _KLOGX3(KLOG_task_create_at, MQX_NULL_TASK_ID, MQX_INVALID_PROCESSOR_NUMBER);
        return MQX_NULL_TASK_ID;
   10e92:	2000      	movs	r0, #0
   10e94:	e7cb      	b.n	10e2e <_task_create_at+0xa6>
_task_ready_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3385
    if ( (uchar_ptr)ready_q_ptr > (uchar_ptr)(kernel_data->CURRENT_READY_Q) )
    {
        kernel_data->CURRENT_READY_Q = ready_q_ptr;
    } /* Endif */

    td_ptr->STATE              = READY;
   10e96:	2702      	movs	r7, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3387
    td_ptr->TD_PREV            = old_tail_ptr;
    td_ptr->TD_NEXT            = old_tail_ptr->TD_NEXT;
   10e98:	6816      	ldr	r6, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3385
    if ( (uchar_ptr)ready_q_ptr > (uchar_ptr)(kernel_data->CURRENT_READY_Q) )
    {
        kernel_data->CURRENT_READY_Q = ready_q_ptr;
    } /* Endif */

    td_ptr->STATE              = READY;
   10e9a:	60a7      	str	r7, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3386
    td_ptr->TD_PREV            = old_tail_ptr;
   10e9c:	6062      	str	r2, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3387
    td_ptr->TD_NEXT            = old_tail_ptr->TD_NEXT;
   10e9e:	6026      	str	r6, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3388
    old_tail_ptr->TD_NEXT      = td_ptr;
   10ea0:	6014      	str	r4, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3389
    ready_q_ptr->TAIL_READY_Q  = td_ptr;
   10ea2:	605c      	str	r4, [r3, #4]
_task_create_at():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:739
    if (td_ptr != NULL)
    {
        result = td_ptr->TASK_ID;
        _INT_DISABLE();
        _task_ready_internal(td_ptr);
        _INT_ENABLE();
   10ea4:	6548      	str	r0, [r1, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:739 (discriminator 2)
   10ea6:	b662      	cpsie	i
   10ea8:	e7ba      	b.n	10e20 <_task_create_at+0x98>
_task_set_error():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2835
    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_task_set_error, new_error_code);

    /* get the old value */
    if (kernel_data->IN_ISR)
   10eaa:	8b2b      	ldrh	r3, [r5, #24]
   10eac:	2b00      	cmp	r3, #0
   10eae:	d013      	beq.n	10ed8 <_task_create_at+0x150>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2837
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
   10eb0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   10eb2:	68da      	ldr	r2, [r3, #12]
   10eb4:	2a00      	cmp	r2, #0
   10eb6:	d1ec      	bne.n	10e92 <_task_create_at+0x10a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2848
    {
        if (kernel_data->IN_ISR)
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
   10eb8:	2215      	movs	r2, #21
_task_create_at():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:719
    if (template_index & SYSTEM_TASK_FLAG)
    {
        _task_set_error(MQX_INVALID_TEMPLATE_INDEX);
        _KLOGX3(KLOG_task_create_at, MQX_NULL_TASK_ID,
                        MQX_INVALID_TEMPLATE_INDEX);
        return MQX_NULL_TASK_ID;
   10eba:	2000      	movs	r0, #0
_task_set_error():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2848

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
    {
        if (kernel_data->IN_ISR)
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
   10ebc:	60da      	str	r2, [r3, #12]
   10ebe:	e7b6      	b.n	10e2e <_task_create_at+0xa6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2835
    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_task_set_error, new_error_code);

    /* get the old value */
    if (kernel_data->IN_ISR)
   10ec0:	8b2b      	ldrh	r3, [r5, #24]
   10ec2:	2b00      	cmp	r3, #0
   10ec4:	d010      	beq.n	10ee8 <_task_create_at+0x160>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2837
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
   10ec6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   10ec8:	68da      	ldr	r2, [r3, #12]
   10eca:	2a00      	cmp	r2, #0
   10ecc:	d101      	bne.n	10ed2 <_task_create_at+0x14a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2848
    {
        if (kernel_data->IN_ISR)
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
   10ece:	2210      	movs	r2, #16
   10ed0:	60da      	str	r2, [r3, #12]
_task_create_at():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:744
        _INT_ENABLE();
        _CHECK_RUN_SCHEDULER(); /* Let a higher priority task run */
    }
    else
    {
        result = MQX_NULL_TASK_ID;
   10ed2:	2300      	movs	r3, #0
   10ed4:	4698      	mov	r8, r3
   10ed6:	e7a5      	b.n	10e24 <_task_create_at+0x9c>
_task_set_error():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2841
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
    }
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
   10ed8:	69eb      	ldr	r3, [r5, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   10eda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   10edc:	2a00      	cmp	r2, #0
   10ede:	d1d8      	bne.n	10e92 <_task_create_at+0x10a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2852
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
        }
        else
        {
            kernel_data->ACTIVE_PTR->TASK_ERROR_CODE = new_error_code;
   10ee0:	2215      	movs	r2, #21
_task_create_at():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:719
    if (template_index & SYSTEM_TASK_FLAG)
    {
        _task_set_error(MQX_INVALID_TEMPLATE_INDEX);
        _KLOGX3(KLOG_task_create_at, MQX_NULL_TASK_ID,
                        MQX_INVALID_TEMPLATE_INDEX);
        return MQX_NULL_TASK_ID;
   10ee2:	2000      	movs	r0, #0
_task_set_error():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2852
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
        }
        else
        {
            kernel_data->ACTIVE_PTR->TASK_ERROR_CODE = new_error_code;
   10ee4:	659a      	str	r2, [r3, #88]	; 0x58
   10ee6:	e7a2      	b.n	10e2e <_task_create_at+0xa6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2841
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
    }
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
   10ee8:	69eb      	ldr	r3, [r5, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   10eea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   10eec:	2a00      	cmp	r2, #0
   10eee:	d1f0      	bne.n	10ed2 <_task_create_at+0x14a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2852
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
        }
        else
        {
            kernel_data->ACTIVE_PTR->TASK_ERROR_CODE = new_error_code;
   10ef0:	2210      	movs	r2, #16
   10ef2:	659a      	str	r2, [r3, #88]	; 0x58
   10ef4:	e7ed      	b.n	10ed2 <_task_create_at+0x14a>
   10ef6:	46c0      	nop			; (mov r8, r8)
   10ef8:	1fffe000 	.word	0x1fffe000
   10efc:	200025b4 	.word	0x200025b4

00010f00 <_task_fill_stack_internal>:
_task_fill_stack_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3339
    _mqx_uint_ptr addr_ptr,
    _mqx_uint     size
)
{ /* Body */

    size = (size/sizeof(_mqx_uint)) + 1;  /* Calculate # _mqx_uints */
   10f00:	0889      	lsrs	r1, r1, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3340
    while (--size)
   10f02:	d004      	beq.n	10f0e <_task_fill_stack_internal+0xe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3342
    {
        *addr_ptr++ = MQX_STACK_MONITOR_VALUE;
   10f04:	4b02      	ldr	r3, [pc, #8]	; (10f10 <_task_fill_stack_internal+0x10>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3340
    _mqx_uint     size
)
{ /* Body */

    size = (size/sizeof(_mqx_uint)) + 1;  /* Calculate # _mqx_uints */
    while (--size)
   10f06:	3901      	subs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3342
    {
        *addr_ptr++ = MQX_STACK_MONITOR_VALUE;
   10f08:	c008      	stmia	r0!, {r3}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3340
    _mqx_uint     size
)
{ /* Body */

    size = (size/sizeof(_mqx_uint)) + 1;  /* Calculate # _mqx_uints */
    while (--size)
   10f0a:	2900      	cmp	r1, #0
   10f0c:	d1fb      	bne.n	10f06 <_task_fill_stack_internal+0x6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3345
    {
        *addr_ptr++ = MQX_STACK_MONITOR_VALUE;
    } /* Endwhile */

} /* Endbody */
   10f0e:	4770      	bx	lr
   10f10:	7374616b 	.word	0x7374616b

00010f14 <_task_ready_internal>:
_task_ready_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3368
{ /* Body */
    KERNEL_DATA_STRUCT_PTR       kernel_data;
    register READY_Q_STRUCT_PTR  ready_q_ptr;
    register TD_STRUCT_PTR       old_tail_ptr;

    _GET_KERNEL_DATA(kernel_data);
   10f14:	4b08      	ldr	r3, [pc, #32]	; (10f38 <_task_ready_internal+0x24>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3363
 */
void _task_ready_internal
(
    TD_STRUCT_PTR td_ptr
)
{ /* Body */
   10f16:	b510      	push	{r4, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3368
    KERNEL_DATA_STRUCT_PTR       kernel_data;
    register READY_Q_STRUCT_PTR  ready_q_ptr;
    register TD_STRUCT_PTR       old_tail_ptr;

    _GET_KERNEL_DATA(kernel_data);
   10f18:	6819      	ldr	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3372

    _KLOGE2(KLOG_task_ready, td_ptr);

    ready_q_ptr   = td_ptr->MY_QUEUE;
   10f1a:	69c3      	ldr	r3, [r0, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3380
     * Ready queues are ALWAYS allocated with higher priority queues in higher
     * memory, thus we need to update the CURRENT_READY_Q field (which
     * always points to the highest priority ready queue with a task
     * on it.
     */
    if ( (uchar_ptr)ready_q_ptr > (uchar_ptr)(kernel_data->CURRENT_READY_Q) )
   10f1c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3373
    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_task_ready, td_ptr);

    ready_q_ptr   = td_ptr->MY_QUEUE;
    old_tail_ptr  = ready_q_ptr->TAIL_READY_Q;
   10f1e:	685a      	ldr	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3380
     * Ready queues are ALWAYS allocated with higher priority queues in higher
     * memory, thus we need to update the CURRENT_READY_Q field (which
     * always points to the highest priority ready queue with a task
     * on it.
     */
    if ( (uchar_ptr)ready_q_ptr > (uchar_ptr)(kernel_data->CURRENT_READY_Q) )
   10f20:	42a3      	cmp	r3, r4
   10f22:	d900      	bls.n	10f26 <_task_ready_internal+0x12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3382
    {
        kernel_data->CURRENT_READY_Q = ready_q_ptr;
   10f24:	624b      	str	r3, [r1, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3385
    } /* Endif */

    td_ptr->STATE              = READY;
   10f26:	2102      	movs	r1, #2
   10f28:	6081      	str	r1, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3387
    td_ptr->TD_PREV            = old_tail_ptr;
    td_ptr->TD_NEXT            = old_tail_ptr->TD_NEXT;
   10f2a:	6811      	ldr	r1, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3386
    {
        kernel_data->CURRENT_READY_Q = ready_q_ptr;
    } /* Endif */

    td_ptr->STATE              = READY;
    td_ptr->TD_PREV            = old_tail_ptr;
   10f2c:	6042      	str	r2, [r0, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3387
    td_ptr->TD_NEXT            = old_tail_ptr->TD_NEXT;
   10f2e:	6001      	str	r1, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3388
    old_tail_ptr->TD_NEXT      = td_ptr;
   10f30:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3389
    ready_q_ptr->TAIL_READY_Q  = td_ptr;
   10f32:	6058      	str	r0, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3397
    MQX_ZERO_TICK_STRUCT(&td_ptr->CURRENT_TIME_SLICE);
#endif
    /* END SPR */
    _KLOGX1(KLOG_task_ready);

} /* Endbody */
   10f34:	bd10      	pop	{r4, pc}
   10f36:	46c0      	nop			; (mov r8, r8)
   10f38:	1fffe000 	.word	0x1fffe000

00010f3c <_task_set_error_td_internal>:
_task_set_error_td_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3660
_mqx_uint _task_set_error_td_internal
(
    TD_STRUCT_PTR td_ptr,
    _mqx_uint new_error_code
)
{ /* Body */
   10f3c:	1c03      	adds	r3, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3670
    _KLOGM(_GET_KERNEL_DATA(kernel_data);)

    _KLOGE2(KLOG_task_set_error, new_error_code);

    /* get the old value */
    old_error_code = td_ptr->TASK_ERROR_CODE;
   10f3e:	6d80      	ldr	r0, [r0, #88]	; 0x58
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3671
    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   10f40:	2900      	cmp	r1, #0
   10f42:	d001      	beq.n	10f48 <_task_set_error_td_internal+0xc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3671 (discriminator 1)
   10f44:	2800      	cmp	r0, #0
   10f46:	d100      	bne.n	10f4a <_task_set_error_td_internal+0xe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3673
    {
        td_ptr->TASK_ERROR_CODE = new_error_code;
   10f48:	6599      	str	r1, [r3, #88]	; 0x58
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3682
    return( old_error_code );
#else
    return MQX_OK;
#endif

} /* Endbody */
   10f4a:	4770      	bx	lr

00010f4c <_time_delay_for>:
_time_delay_for():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:88
 */
void _time_delay_for
(
    register MQX_TICK_STRUCT_PTR ticks
)
{ /* Body */
   10f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f4e:	464f      	mov	r7, r9
   10f50:	4646      	mov	r6, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:92
    register KERNEL_DATA_STRUCT_PTR kernel_data;
    register TD_STRUCT_PTR td_ptr;

    _GET_KERNEL_DATA(kernel_data);
   10f52:	4d30      	ldr	r5, [pc, #192]	; (11014 <_time_delay_for+0xc8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:88
 */
void _time_delay_for
(
    register MQX_TICK_STRUCT_PTR ticks
)
{ /* Body */
   10f54:	b4c0      	push	{r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:92
    register KERNEL_DATA_STRUCT_PTR kernel_data;
    register TD_STRUCT_PTR td_ptr;

    _GET_KERNEL_DATA(kernel_data);
   10f56:	682f      	ldr	r7, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:97

    _KLOGE2(KLOG_time_delay_for, ticks);

#if MQX_CHECK_ERRORS
    if (ticks == NULL) {
   10f58:	2800      	cmp	r0, #0
   10f5a:	d056      	beq.n	1100a <_time_delay_for+0xbe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:104
        _KLOGX2(KLOG_time_delay_for, MQX_INVALID_PARAMETER);
        return;
    } /* Endif */
#endif

    td_ptr = kernel_data->ACTIVE_PTR;
   10f5c:	69fc      	ldr	r4, [r7, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:106

    _INT_DISABLE();
   10f5e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   10f60:	2b00      	cmp	r3, #0
   10f62:	d04a      	beq.n	10ffa <_time_delay_for+0xae>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:109 (discriminator 3)

    /* Calculate time to wake up the task */
    PSP_ADD_TICKS(ticks, &kernel_data->TIME, &td_ptr->TIMEOUT);
   10f64:	1c39      	adds	r1, r7, #0
   10f66:	1c22      	adds	r2, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:106 (discriminator 3)
    } /* Endif */
#endif

    td_ptr = kernel_data->ACTIVE_PTR;

    _INT_DISABLE();
   10f68:	3301      	adds	r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:109 (discriminator 3)

    /* Calculate time to wake up the task */
    PSP_ADD_TICKS(ticks, &kernel_data->TIME, &td_ptr->TIMEOUT);
   10f6a:	311d      	adds	r1, #29
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:106 (discriminator 3)
    } /* Endif */
#endif

    td_ptr = kernel_data->ACTIVE_PTR;

    _INT_DISABLE();
   10f6c:	6563      	str	r3, [r4, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:109 (discriminator 3)

    /* Calculate time to wake up the task */
    PSP_ADD_TICKS(ticks, &kernel_data->TIME, &td_ptr->TIMEOUT);
   10f6e:	31ff      	adds	r1, #255	; 0xff
   10f70:	3244      	adds	r2, #68	; 0x44
   10f72:	f7fe ff75 	bl	fe60 <_psp_add_ticks>
_time_delay_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:148 (discriminator 3)
   register _mqx_int                result;

   _GET_KERNEL_DATA(kernel_data);

   /* Remove task from ready to run queue */
   tdprev_ptr = (TD_STRUCT_PTR)((pointer)&kernel_data->TIMEOUT_QUEUE);
   10f76:	229a      	movs	r2, #154	; 0x9a
   10f78:	0052      	lsls	r2, r2, #1
   10f7a:	4690      	mov	r8, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:145 (discriminator 3)
   register TD_STRUCT_PTR           td2_ptr;
   register TD_STRUCT_PTR           tdprev_ptr;
   register _mqx_uint               count;
   register _mqx_int                result;

   _GET_KERNEL_DATA(kernel_data);
   10f7c:	682b      	ldr	r3, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:148 (discriminator 3)

   /* Remove task from ready to run queue */
   tdprev_ptr = (TD_STRUCT_PTR)((pointer)&kernel_data->TIMEOUT_QUEUE);
   10f7e:	4498      	add	r8, r3
   10f80:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:149 (discriminator 3)
   if ( _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE) ) {
   10f82:	890a      	ldrh	r2, [r1, #8]
   10f84:	4694      	mov	ip, r2
   10f86:	2a00      	cmp	r2, #0
   10f88:	d013      	beq.n	10fb2 <_time_delay_for+0x66>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:152

      /* Perform insertion sort by time */
      td2_ptr    = (TD_STRUCT_PTR)((pointer)kernel_data->TIMEOUT_QUEUE.NEXT);
   10f8a:	229a      	movs	r2, #154	; 0x9a
   10f8c:	0052      	lsls	r2, r2, #1
   10f8e:	589b      	ldr	r3, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:158

      /* SPR P171-0023-01 use pre-decrement on while loop */
      count      = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE) + 1;
      while ( --count ) {
      /* END SPR */
         result = PSP_CMP_TICKS(&td2_ptr->TIMEOUT, &td_ptr->TIMEOUT);
   10f90:	6c60      	ldr	r0, [r4, #68]	; 0x44
   10f92:	6ca5      	ldr	r5, [r4, #72]	; 0x48
   10f94:	4681      	mov	r9, r0
   10f96:	6c98      	ldr	r0, [r3, #72]	; 0x48
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:156
      /* Perform insertion sort by time */
      td2_ptr    = (TD_STRUCT_PTR)((pointer)kernel_data->TIMEOUT_QUEUE.NEXT);

      /* SPR P171-0023-01 use pre-decrement on while loop */
      count      = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE) + 1;
      while ( --count ) {
   10f98:	4662      	mov	r2, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:158
      /* END SPR */
         result = PSP_CMP_TICKS(&td2_ptr->TIMEOUT, &td_ptr->TIMEOUT);
   10f9a:	42a8      	cmp	r0, r5
   10f9c:	d22f      	bcs.n	10ffe <_time_delay_for+0xb2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:156
      /* Perform insertion sort by time */
      td2_ptr    = (TD_STRUCT_PTR)((pointer)kernel_data->TIMEOUT_QUEUE.NEXT);

      /* SPR P171-0023-01 use pre-decrement on while loop */
      count      = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE) + 1;
      while ( --count ) {
   10f9e:	3a01      	subs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:158
      /* END SPR */
         result = PSP_CMP_TICKS(&td2_ptr->TIMEOUT, &td_ptr->TIMEOUT);
   10fa0:	1c19      	adds	r1, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:165
            /* Enqueue before td2_ptr */
            break;
         } /* Endif */

         tdprev_ptr = td2_ptr;
         td2_ptr    = td2_ptr->TD_NEXT;
   10fa2:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:156
      /* Perform insertion sort by time */
      td2_ptr    = (TD_STRUCT_PTR)((pointer)kernel_data->TIMEOUT_QUEUE.NEXT);

      /* SPR P171-0023-01 use pre-decrement on while loop */
      count      = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE) + 1;
      while ( --count ) {
   10fa4:	2a00      	cmp	r2, #0
   10fa6:	d004      	beq.n	10fb2 <_time_delay_for+0x66>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:158
      /* END SPR */
         result = PSP_CMP_TICKS(&td2_ptr->TIMEOUT, &td_ptr->TIMEOUT);
   10fa8:	6c98      	ldr	r0, [r3, #72]	; 0x48
   10faa:	6c5e      	ldr	r6, [r3, #68]	; 0x44
   10fac:	4285      	cmp	r5, r0
   10fae:	d8f6      	bhi.n	10f9e <_time_delay_for+0x52>
   10fb0:	d020      	beq.n	10ff4 <_time_delay_for+0xa8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:171
      } /* Endwhile */

   } /* Endif */

   /* Remove from ready queue */
   _QUEUE_UNLINK(td_ptr);
   10fb2:	6862      	ldr	r2, [r4, #4]
   10fb4:	6823      	ldr	r3, [r4, #0]
   10fb6:	6013      	str	r3, [r2, #0]
   10fb8:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:174

   /* Insert into timeout queue */
   _QUEUE_INSERT(&kernel_data->TIMEOUT_QUEUE,tdprev_ptr,td_ptr);
   10fba:	680b      	ldr	r3, [r1, #0]
   10fbc:	4642      	mov	r2, r8
   10fbe:	6023      	str	r3, [r4, #0]
   10fc0:	600c      	str	r4, [r1, #0]
   10fc2:	6061      	str	r1, [r4, #4]
   10fc4:	605c      	str	r4, [r3, #4]
   10fc6:	4663      	mov	r3, ip
   10fc8:	3301      	adds	r3, #1
   10fca:	8113      	strh	r3, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:176

   td_ptr->STATE |= IS_ON_TIMEOUT_Q;
   10fcc:	2380      	movs	r3, #128	; 0x80
   10fce:	68a2      	ldr	r2, [r4, #8]
   10fd0:	005b      	lsls	r3, r3, #1
   10fd2:	4313      	orrs	r3, r2
   10fd4:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:178

   _sched_execute_scheduler_internal();
   10fd6:	f003 fee7 	bl	14da8 <_sched_execute_scheduler_internal>
_time_delay_for():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:113
    /* Calculate time to wake up the task */
    PSP_ADD_TICKS(ticks, &kernel_data->TIME, &td_ptr->TIMEOUT);

    _time_delay_internal(td_ptr);

    _INT_ENABLE();
   10fda:	69fa      	ldr	r2, [r7, #28]
   10fdc:	6d53      	ldr	r3, [r2, #84]	; 0x54
   10fde:	2b00      	cmp	r3, #0
   10fe0:	d004      	beq.n	10fec <_time_delay_for+0xa0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:113 (discriminator 1)
   10fe2:	3b01      	subs	r3, #1
   10fe4:	6553      	str	r3, [r2, #84]	; 0x54
   10fe6:	2b00      	cmp	r3, #0
   10fe8:	d100      	bne.n	10fec <_time_delay_for+0xa0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:113 (discriminator 2)
   10fea:	b662      	cpsie	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:117

    _KLOGX1( KLOG_time_delay_for);

} /* Endbody */
   10fec:	bc0c      	pop	{r2, r3}
   10fee:	4690      	mov	r8, r2
   10ff0:	4699      	mov	r9, r3
   10ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_time_delay_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:158

      /* SPR P171-0023-01 use pre-decrement on while loop */
      count      = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE) + 1;
      while ( --count ) {
      /* END SPR */
         result = PSP_CMP_TICKS(&td2_ptr->TIMEOUT, &td_ptr->TIMEOUT);
   10ff4:	45b1      	cmp	r9, r6
   10ff6:	d9dc      	bls.n	10fb2 <_time_delay_for+0x66>
   10ff8:	e7d1      	b.n	10f9e <_time_delay_for+0x52>
_time_delay_for():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:106 (discriminator 1)
    } /* Endif */
#endif

    td_ptr = kernel_data->ACTIVE_PTR;

    _INT_DISABLE();
   10ffa:	b672      	cpsid	i
   10ffc:	e7b2      	b.n	10f64 <_time_delay_for+0x18>
_time_delay_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:158

      /* SPR P171-0023-01 use pre-decrement on while loop */
      count      = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE) + 1;
      while ( --count ) {
      /* END SPR */
         result = PSP_CMP_TICKS(&td2_ptr->TIMEOUT, &td_ptr->TIMEOUT);
   10ffe:	42a8      	cmp	r0, r5
   11000:	d1d7      	bne.n	10fb2 <_time_delay_for+0x66>
   11002:	6c58      	ldr	r0, [r3, #68]	; 0x44
   11004:	4548      	cmp	r0, r9
   11006:	d3ca      	bcc.n	10f9e <_time_delay_for+0x52>
   11008:	e7d3      	b.n	10fb2 <_time_delay_for+0x66>
_time_delay_for():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:98

    _KLOGE2(KLOG_time_delay_for, ticks);

#if MQX_CHECK_ERRORS
    if (ticks == NULL) {
        _task_set_error(MQX_INVALID_PARAMETER);
   1100a:	300c      	adds	r0, #12
   1100c:	f7ff fd90 	bl	10b30 <_task_set_error>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:100
        _KLOGX2(KLOG_time_delay_for, MQX_INVALID_PARAMETER);
        return;
   11010:	e7ec      	b.n	10fec <_time_delay_for+0xa0>
   11012:	46c0      	nop			; (mov r8, r8)
   11014:	1fffe000 	.word	0x1fffe000

00011018 <_time_notify_kernel>:
_time_notify_kernel():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:823
 */
void _time_notify_kernel
(
    void
)
{ /* Body */
   11018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1101a:	464d      	mov	r5, r9
   1101c:	4644      	mov	r4, r8
   1101e:	465f      	mov	r7, fp
   11020:	4656      	mov	r6, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:830
    register TD_STRUCT_PTR td_ptr;
    register TD_STRUCT_PTR next_td_ptr;
    register _mqx_uint count;
    register _mqx_int result;

    _GET_KERNEL_DATA(kernel_data);
   11022:	4b48      	ldr	r3, [pc, #288]	; (11144 <_time_notify_kernel+0x12c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:823
 */
void _time_notify_kernel
(
    void
)
{ /* Body */
   11024:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:830
    register TD_STRUCT_PTR td_ptr;
    register TD_STRUCT_PTR next_td_ptr;
    register _mqx_uint count;
    register _mqx_int result;

    _GET_KERNEL_DATA(kernel_data);
   11026:	681c      	ldr	r4, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:835

    /*
     * Update the current time.
     */
    PSP_INC_TICKS(&kernel_data->TIME);
   11028:	2201      	movs	r2, #1
   1102a:	1c25      	adds	r5, r4, #0
   1102c:	2300      	movs	r3, #0
   1102e:	351d      	adds	r5, #29
   11030:	35ff      	adds	r5, #255	; 0xff
   11032:	6828      	ldr	r0, [r5, #0]
   11034:	6869      	ldr	r1, [r5, #4]
   11036:	1812      	adds	r2, r2, r0
   11038:	414b      	adcs	r3, r1
   1103a:	602a      	str	r2, [r5, #0]
   1103c:	606b      	str	r3, [r5, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:837

    _INT_DISABLE();
   1103e:	69e2      	ldr	r2, [r4, #28]
   11040:	6d53      	ldr	r3, [r2, #84]	; 0x54
   11042:	2b00      	cmp	r3, #0
   11044:	d100      	bne.n	11048 <_time_notify_kernel+0x30>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:837 (discriminator 1)
   11046:	b672      	cpsid	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:837 (discriminator 3)
   11048:	3301      	adds	r3, #1
   1104a:	6553      	str	r3, [r2, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:839 (discriminator 3)

    if (kernel_data->GET_HWTICKS) {
   1104c:	23aa      	movs	r3, #170	; 0xaa
   1104e:	005b      	lsls	r3, r3, #1
   11050:	58e3      	ldr	r3, [r4, r3]
   11052:	2b00      	cmp	r3, #0
   11054:	d006      	beq.n	11064 <_time_notify_kernel+0x4c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:845
        /* The hardware clock may have counted passed it's reference
         * and have an interrupt pending.  Thus, HW_TICKS may exceed
         * kernel_data->HW_TICKS_PER_TICK and this tick_ptr may need
         * normalizing.  This is done in a moment.
         */
        kernel_data->TIME.HW_TICKS = (*kernel_data->GET_HWTICKS)(kernel_data->GET_HWTICKS_PARAM);
   11056:	22ac      	movs	r2, #172	; 0xac
   11058:	0052      	lsls	r2, r2, #1
   1105a:	58a0      	ldr	r0, [r4, r2]
   1105c:	4798      	blx	r3
   1105e:	2392      	movs	r3, #146	; 0x92
   11060:	005b      	lsls	r3, r3, #1
   11062:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:852

    /* The tick_ptr->HW_TICKS value might exceed the
     * kernel_data->HW_TICKS_PER_TICK and need to be
     * normalized for the PSP.
     */
    PSP_NORMALIZE_TICKS(&kernel_data->TIME);
   11064:	1c28      	adds	r0, r5, #0
   11066:	f7fe ff1b 	bl	fea0 <_psp_normalize_ticks>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:858

    /*
     * Check for tasks on the timeout queue, and wake the appropriate
     * ones up.  The timeout queue is a time-priority queue.
     */
    count = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE);
   1106a:	1c23      	adds	r3, r4, #0
   1106c:	3335      	adds	r3, #53	; 0x35
   1106e:	33ff      	adds	r3, #255	; 0xff
   11070:	8919      	ldrh	r1, [r3, #8]
   11072:	1e08      	subs	r0, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:859
    if (count) {
   11074:	d009      	beq.n	1108a <_time_notify_kernel+0x72>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:860
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
   11076:	239a      	movs	r3, #154	; 0x9a
   11078:	005b      	lsls	r3, r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:864
        ++count;
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
   1107a:	682e      	ldr	r6, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:860
     * Check for tasks on the timeout queue, and wake the appropriate
     * ones up.  The timeout queue is a time-priority queue.
     */
    count = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE);
    if (count) {
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
   1107c:	58e3      	ldr	r3, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:864
        ++count;
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
   1107e:	46b2      	mov	sl, r6
   11080:	686d      	ldr	r5, [r5, #4]
   11082:	6c9e      	ldr	r6, [r3, #72]	; 0x48
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:863
    count = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE);
    if (count) {
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
        ++count;
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
   11084:	681a      	ldr	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:864
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
   11086:	42ae      	cmp	r6, r5
   11088:	d915      	bls.n	110b6 <_time_notify_kernel+0x9e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:900
            } /* Endif */
        } /* Endif */
    } /* Endif */
#endif

    _INT_ENABLE();
   1108a:	69e2      	ldr	r2, [r4, #28]
   1108c:	6d53      	ldr	r3, [r2, #84]	; 0x54
   1108e:	2b00      	cmp	r3, #0
   11090:	d003      	beq.n	1109a <_time_notify_kernel+0x82>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:900 (discriminator 1)
   11092:	3b01      	subs	r3, #1
   11094:	6553      	str	r3, [r2, #84]	; 0x54
   11096:	2b00      	cmp	r3, #0
   11098:	d00b      	beq.n	110b2 <_time_notify_kernel+0x9a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:910
    }/* Endif */
#endif

#if MQX_USE_LWTIMER
    /* If the lwtimer needs servicing, call its ISR function */
    if (kernel_data->LWTIMER_ISR != NULL) {
   1109a:	2394      	movs	r3, #148	; 0x94
   1109c:	009b      	lsls	r3, r3, #2
   1109e:	58e3      	ldr	r3, [r4, r3]
   110a0:	2b00      	cmp	r3, #0
   110a2:	d000      	beq.n	110a6 <_time_notify_kernel+0x8e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:911
        (*kernel_data->LWTIMER_ISR)();
   110a4:	4798      	blx	r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:915
    }/* Endif */
#endif

} /* Endbody */
   110a6:	bc3c      	pop	{r2, r3, r4, r5}
   110a8:	4690      	mov	r8, r2
   110aa:	4699      	mov	r9, r3
   110ac:	46a2      	mov	sl, r4
   110ae:	46ab      	mov	fp, r5
   110b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:900 (discriminator 2)
            } /* Endif */
        } /* Endif */
    } /* Endif */
#endif

    _INT_ENABLE();
   110b2:	b662      	cpsie	i
   110b4:	e7f1      	b.n	1109a <_time_notify_kernel+0x82>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:864
    if (count) {
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
        ++count;
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
   110b6:	42ae      	cmp	r6, r5
   110b8:	d040      	beq.n	1113c <_time_notify_kernel+0x124>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:869
            if (result >= 0) {
                --kernel_data->TIMEOUT_QUEUE.SIZE;
                _QUEUE_UNLINK(td_ptr);
                td_ptr->STATE &= ~IS_ON_TIMEOUT_Q;
                if (td_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
   110ba:	2680      	movs	r6, #128	; 0x80
   110bc:	00f6      	lsls	r6, r6, #3
   110be:	46b4      	mov	ip, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:868
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
            if (result >= 0) {
                --kernel_data->TIMEOUT_QUEUE.SIZE;
                _QUEUE_UNLINK(td_ptr);
                td_ptr->STATE &= ~IS_ON_TIMEOUT_Q;
   110c0:	4e21      	ldr	r6, [pc, #132]	; (11148 <_time_notify_kernel+0x130>)
   110c2:	46b1      	mov	r9, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:870
                if (td_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
                    td_ptr->STATE &= ~TD_IS_ON_AUX_QUEUE;
   110c4:	4e21      	ldr	r6, [pc, #132]	; (1114c <_time_notify_kernel+0x134>)
   110c6:	46b0      	mov	r8, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:873
                    _QUEUE_REMOVE(td_ptr->INFO, &td_ptr->AUX_QUEUE);
                } /* Endif */
                _TASK_READY(td_ptr, kernel_data);
   110c8:	2602      	movs	r6, #2
   110ca:	46b3      	mov	fp, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:866
        ++count;
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
            if (result >= 0) {
                --kernel_data->TIMEOUT_QUEUE.SIZE;
   110cc:	269e      	movs	r6, #158	; 0x9e
   110ce:	3901      	subs	r1, #1
   110d0:	0076      	lsls	r6, r6, #1
   110d2:	53a1      	strh	r1, [r4, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:869
                _QUEUE_UNLINK(td_ptr);
                td_ptr->STATE &= ~IS_ON_TIMEOUT_Q;
                if (td_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
   110d4:	4666      	mov	r6, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:867
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
            if (result >= 0) {
                --kernel_data->TIMEOUT_QUEUE.SIZE;
                _QUEUE_UNLINK(td_ptr);
   110d6:	6859      	ldr	r1, [r3, #4]
   110d8:	600a      	str	r2, [r1, #0]
   110da:	6051      	str	r1, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:868
                td_ptr->STATE &= ~IS_ON_TIMEOUT_Q;
   110dc:	6899      	ldr	r1, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:869
                if (td_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
   110de:	4231      	tst	r1, r6
   110e0:	d120      	bne.n	11124 <_time_notify_kernel+0x10c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:868
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
            if (result >= 0) {
                --kernel_data->TIMEOUT_QUEUE.SIZE;
                _QUEUE_UNLINK(td_ptr);
                td_ptr->STATE &= ~IS_ON_TIMEOUT_Q;
   110e2:	464e      	mov	r6, r9
   110e4:	4031      	ands	r1, r6
   110e6:	6099      	str	r1, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:873
                if (td_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
                    td_ptr->STATE &= ~TD_IS_ON_AUX_QUEUE;
                    _QUEUE_REMOVE(td_ptr->INFO, &td_ptr->AUX_QUEUE);
                } /* Endif */
                _TASK_READY(td_ptr, kernel_data);
   110e8:	69d9      	ldr	r1, [r3, #28]
   110ea:	6a67      	ldr	r7, [r4, #36]	; 0x24
   110ec:	42b9      	cmp	r1, r7
   110ee:	d900      	bls.n	110f2 <_time_notify_kernel+0xda>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:873 (discriminator 1)
   110f0:	6261      	str	r1, [r4, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:873 (discriminator 3)
   110f2:	465f      	mov	r7, fp
   110f4:	609f      	str	r7, [r3, #8]
   110f6:	684f      	ldr	r7, [r1, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:862 (discriminator 3)
     */
    count = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE);
    if (count) {
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
        ++count;
        while (--count) {
   110f8:	3801      	subs	r0, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:873 (discriminator 3)
                td_ptr->STATE &= ~IS_ON_TIMEOUT_Q;
                if (td_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
                    td_ptr->STATE &= ~TD_IS_ON_AUX_QUEUE;
                    _QUEUE_REMOVE(td_ptr->INFO, &td_ptr->AUX_QUEUE);
                } /* Endif */
                _TASK_READY(td_ptr, kernel_data);
   110fa:	683e      	ldr	r6, [r7, #0]
   110fc:	605f      	str	r7, [r3, #4]
   110fe:	601e      	str	r6, [r3, #0]
   11100:	603b      	str	r3, [r7, #0]
   11102:	604b      	str	r3, [r1, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:862 (discriminator 3)
     */
    count = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE);
    if (count) {
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
        ++count;
        while (--count) {
   11104:	2800      	cmp	r0, #0
   11106:	d0c0      	beq.n	1108a <_time_notify_kernel+0x72>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:864
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
   11108:	6c93      	ldr	r3, [r2, #72]	; 0x48
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:863
    count = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE);
    if (count) {
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
        ++count;
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
   1110a:	6817      	ldr	r7, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:864
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
   1110c:	42ab      	cmp	r3, r5
   1110e:	d8bc      	bhi.n	1108a <_time_notify_kernel+0x72>
   11110:	d102      	bne.n	11118 <_time_notify_kernel+0x100>
   11112:	6c53      	ldr	r3, [r2, #68]	; 0x44
   11114:	4553      	cmp	r3, sl
   11116:	d8b8      	bhi.n	1108a <_time_notify_kernel+0x72>
   11118:	239e      	movs	r3, #158	; 0x9e
   1111a:	005b      	lsls	r3, r3, #1
   1111c:	5ae1      	ldrh	r1, [r4, r3]
   1111e:	1c13      	adds	r3, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:863
    count = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE);
    if (count) {
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
        ++count;
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
   11120:	1c3a      	adds	r2, r7, #0
   11122:	e7d3      	b.n	110cc <_time_notify_kernel+0xb4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:870
            if (result >= 0) {
                --kernel_data->TIMEOUT_QUEUE.SIZE;
                _QUEUE_UNLINK(td_ptr);
                td_ptr->STATE &= ~IS_ON_TIMEOUT_Q;
                if (td_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
                    td_ptr->STATE &= ~TD_IS_ON_AUX_QUEUE;
   11124:	4646      	mov	r6, r8
   11126:	4031      	ands	r1, r6
   11128:	6099      	str	r1, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:871
                    _QUEUE_REMOVE(td_ptr->INFO, &td_ptr->AUX_QUEUE);
   1112a:	6c1f      	ldr	r7, [r3, #64]	; 0x40
   1112c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1112e:	6039      	str	r1, [r7, #0]
   11130:	604f      	str	r7, [r1, #4]
   11132:	6b9f      	ldr	r7, [r3, #56]	; 0x38
   11134:	8939      	ldrh	r1, [r7, #8]
   11136:	3901      	subs	r1, #1
   11138:	8139      	strh	r1, [r7, #8]
   1113a:	e7d5      	b.n	110e8 <_time_notify_kernel+0xd0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:864
    if (count) {
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
        ++count;
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
   1113c:	6c5e      	ldr	r6, [r3, #68]	; 0x44
   1113e:	4556      	cmp	r6, sl
   11140:	d8a3      	bhi.n	1108a <_time_notify_kernel+0x72>
   11142:	e7ba      	b.n	110ba <_time_notify_kernel+0xa2>
   11144:	1fffe000 	.word	0x1fffe000
   11148:	fffffeff 	.word	0xfffffeff
   1114c:	fffffaff 	.word	0xfffffaff

00011150 <_time_set_hwtick_function>:
_time_set_hwtick_function():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:1007
{ /* Body */
    register KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    kernel_data->GET_HWTICKS = hwtick_function_ptr;
   11150:	22aa      	movs	r2, #170	; 0xaa
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:1005
    pointer              parameter
)
{ /* Body */
    register KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);
   11152:	4b03      	ldr	r3, [pc, #12]	; (11160 <_time_set_hwtick_function+0x10>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:1007

    kernel_data->GET_HWTICKS = hwtick_function_ptr;
   11154:	0052      	lsls	r2, r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:1005
    pointer              parameter
)
{ /* Body */
    register KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);
   11156:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:1007

    kernel_data->GET_HWTICKS = hwtick_function_ptr;
   11158:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:1008
    kernel_data->GET_HWTICKS_PARAM = parameter;
   1115a:	3204      	adds	r2, #4
   1115c:	5099      	str	r1, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:1010

} /* Endbody */
   1115e:	4770      	bx	lr
   11160:	1fffe000 	.word	0x1fffe000

00011164 <_time_set_hwticks_per_tick>:
_time_set_hwticks_per_tick():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:1031
{ /* Body */
    register KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    kernel_data->HW_TICKS_PER_TICK = new_val;
   11164:	4b02      	ldr	r3, [pc, #8]	; (11170 <_time_set_hwticks_per_tick+0xc>)
   11166:	681a      	ldr	r2, [r3, #0]
   11168:	23a8      	movs	r3, #168	; 0xa8
   1116a:	005b      	lsls	r3, r3, #1
   1116c:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:1033

} /* Endbody */
   1116e:	4770      	bx	lr
   11170:	1fffe000 	.word	0x1fffe000

00011174 <Cpu_Interrupt>:
Cpu_Interrupt():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:302
** ===================================================================
*/
PE_ISR(Cpu_Interrupt)
{
  /* This code can be changed using the CPU component property "Build Options / Unhandled int code" */
  PE_DEBUGHALT();
   11174:	beff      	bkpt	0x00ff
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:303
}
   11176:	4770      	bx	lr

00011178 <__init_hardware>:
__init_hardware():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:317

  /*** !!! Here you can place your own code before PE initialization using property "User code before PE initialization" on the build options tab. !!! ***/

  /*** ### MKL46Z256VMC4 "Cpu" init code ... ***/
  /*** PE initialization code after reset ***/
  SCB_VTOR = (uint32_t)(&__vect_table); /* Set the interrupt vector table position */
   11178:	4b3a      	ldr	r3, [pc, #232]	; (11264 <__init_hardware+0xec>)
   1117a:	4a3b      	ldr	r2, [pc, #236]	; (11268 <__init_hardware+0xf0>)
   1117c:	493b      	ldr	r1, [pc, #236]	; (1126c <__init_hardware+0xf4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:311
/*** !!! Here you can place your own code using property "User data declarations" on the build options tab. !!! ***/

/*lint -esym(765,__init_hardware) Disable MISRA rule (8.10) checking for symbols (__init_hardware). The function is linked to the EWL library */
/*lint -esym(765,Cpu_Interrupt) Disable MISRA rule (8.10) checking for symbols (Cpu_Interrupt). */
void __init_hardware(void)
{
   1117e:	b510      	push	{r4, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:317

  /*** !!! Here you can place your own code before PE initialization using property "User code before PE initialization" on the build options tab. !!! ***/

  /*** ### MKL46Z256VMC4 "Cpu" init code ... ***/
  /*** PE initialization code after reset ***/
  SCB_VTOR = (uint32_t)(&__vect_table); /* Set the interrupt vector table position */
   11180:	50d1      	str	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:320
  /* Disable the WDOG module */
  /* SIM_COPC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COPT=0,COPCLKS=0,COPW=0 */
  SIM_COPC = SIM_COPC_COPT(0x00);
   11182:	2288      	movs	r2, #136	; 0x88
   11184:	2100      	movs	r1, #0
   11186:	4b3a      	ldr	r3, [pc, #232]	; (11270 <__init_hardware+0xf8>)
   11188:	0152      	lsls	r2, r2, #5
   1118a:	5099      	str	r1, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:324

  /* System clock initialization */
  /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=3,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
  SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x03)); /* Set the system prescalers to safe value */
   1118c:	21c0      	movs	r1, #192	; 0xc0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:326
  /* SIM_SCGC5: PORTE=1,PORTD=1,PORTC=1,PORTA=1 */
  SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK |
   1118e:	20e8      	movs	r0, #232	; 0xe8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:324
  /* SIM_COPC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COPT=0,COPCLKS=0,COPW=0 */
  SIM_COPC = SIM_COPC_COPT(0x00);

  /* System clock initialization */
  /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=3,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
  SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x03)); /* Set the system prescalers to safe value */
   11190:	4a38      	ldr	r2, [pc, #224]	; (11274 <__init_hardware+0xfc>)
   11192:	0289      	lsls	r1, r1, #10
   11194:	5099      	str	r1, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:326
  /* SIM_SCGC5: PORTE=1,PORTD=1,PORTC=1,PORTA=1 */
  SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK |
   11196:	4a38      	ldr	r2, [pc, #224]	; (11278 <__init_hardware+0x100>)
   11198:	0180      	lsls	r0, r0, #6
   1119a:	5899      	ldr	r1, [r3, r2]
   1119c:	4301      	orrs	r1, r0
   1119e:	5099      	str	r1, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:331
               SIM_SCGC5_PORTD_MASK |
               SIM_SCGC5_PORTC_MASK |
               SIM_SCGC5_PORTA_MASK;   /* Enable clock gate for ports to enable pin routing */
  /* SIM_SCGC5: LPTMR=1 */
  SIM_SCGC5 |= SIM_SCGC5_LPTMR_MASK;
   111a0:	2101      	movs	r1, #1
   111a2:	5898      	ldr	r0, [r3, r2]
   111a4:	4301      	orrs	r1, r0
   111a6:	5099      	str	r1, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:332
  if ((PMC_REGSC & PMC_REGSC_ACKISO_MASK) != 0x0U) {
   111a8:	4b34      	ldr	r3, [pc, #208]	; (1127c <__init_hardware+0x104>)
   111aa:	789a      	ldrb	r2, [r3, #2]
   111ac:	0712      	lsls	r2, r2, #28
   111ae:	d504      	bpl.n	111ba <__init_hardware+0x42>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:334
    /* PMC_REGSC: ACKISO=1 */
    PMC_REGSC |= PMC_REGSC_ACKISO_MASK; /* Release IO pads after wakeup from VLLS mode. */
   111b0:	2208      	movs	r2, #8
   111b2:	7899      	ldrb	r1, [r3, #2]
   111b4:	430a      	orrs	r2, r1
   111b6:	b2d2      	uxtb	r2, r2
   111b8:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:337
  }
  /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=1,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
  SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x01)); /* Update system prescalers */
   111ba:	2480      	movs	r4, #128	; 0x80
   111bc:	4b2c      	ldr	r3, [pc, #176]	; (11270 <__init_hardware+0xf8>)
   111be:	4a2d      	ldr	r2, [pc, #180]	; (11274 <__init_hardware+0xfc>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:339
  /* SIM_SOPT2: ??=0,PLLFLLSEL=1 */
  SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
   111c0:	482f      	ldr	r0, [pc, #188]	; (11280 <__init_hardware+0x108>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:337
  if ((PMC_REGSC & PMC_REGSC_ACKISO_MASK) != 0x0U) {
    /* PMC_REGSC: ACKISO=1 */
    PMC_REGSC |= PMC_REGSC_ACKISO_MASK; /* Release IO pads after wakeup from VLLS mode. */
  }
  /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=1,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
  SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x01)); /* Update system prescalers */
   111c2:	0264      	lsls	r4, r4, #9
   111c4:	509c      	str	r4, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:339
  /* SIM_SOPT2: ??=0,PLLFLLSEL=1 */
  SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
   111c6:	581a      	ldr	r2, [r3, r0]
   111c8:	492e      	ldr	r1, [pc, #184]	; (11284 <__init_hardware+0x10c>)
   111ca:	400a      	ands	r2, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:345
               0x00020000U
              )) | (uint32_t)(
               SIM_SOPT2_PLLFLLSEL_MASK
              ));                      /* Select PLL as a clock source for various peripherals */
  /* SIM_SOPT1: OSC32KSEL=3 */
  SIM_SOPT1 |= SIM_SOPT1_OSC32KSEL(0x03); /* LPO 1kHz oscillator drives 32 kHz clock for various peripherals */
   111cc:	21c0      	movs	r1, #192	; 0xc0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:339
    PMC_REGSC |= PMC_REGSC_ACKISO_MASK; /* Release IO pads after wakeup from VLLS mode. */
  }
  /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=1,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
  SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x01)); /* Update system prescalers */
  /* SIM_SOPT2: ??=0,PLLFLLSEL=1 */
  SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
   111ce:	4322      	orrs	r2, r4
   111d0:	501a      	str	r2, [r3, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:345
               0x00020000U
              )) | (uint32_t)(
               SIM_SOPT2_PLLFLLSEL_MASK
              ));                      /* Select PLL as a clock source for various peripherals */
  /* SIM_SOPT1: OSC32KSEL=3 */
  SIM_SOPT1 |= SIM_SOPT1_OSC32KSEL(0x03); /* LPO 1kHz oscillator drives 32 kHz clock for various peripherals */
   111d2:	681a      	ldr	r2, [r3, #0]
   111d4:	0309      	lsls	r1, r1, #12
   111d6:	430a      	orrs	r2, r1
   111d8:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:347
  /* SIM_SOPT2: TPMSRC=1 */
  SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
   111da:	5819      	ldr	r1, [r3, r0]
   111dc:	4a2a      	ldr	r2, [pc, #168]	; (11288 <__init_hardware+0x110>)
   111de:	400a      	ands	r2, r1
   111e0:	2180      	movs	r1, #128	; 0x80
   111e2:	0449      	lsls	r1, r1, #17
   111e4:	430a      	orrs	r2, r1
   111e6:	501a      	str	r2, [r3, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:353
               SIM_SOPT2_TPMSRC(0x02)
              )) | (uint32_t)(
               SIM_SOPT2_TPMSRC(0x01)
              ));                      /* Set the TPM clock */
  /* PORTA_PCR18: ISF=0,MUX=0 */
  PORTA_PCR18 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
   111e8:	4b28      	ldr	r3, [pc, #160]	; (1128c <__init_hardware+0x114>)
   111ea:	4a29      	ldr	r2, [pc, #164]	; (11290 <__init_hardware+0x118>)
   111ec:	6c99      	ldr	r1, [r3, #72]	; 0x48
   111ee:	4011      	ands	r1, r2
   111f0:	6499      	str	r1, [r3, #72]	; 0x48
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:355
  /* PORTA_PCR19: ISF=0,MUX=0 */
  PORTA_PCR19 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
   111f2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   111f4:	400a      	ands	r2, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:358
  /* Switch to FBE Mode */
  /* MCG_C2: LOCRE0=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=0 */
  MCG_C2 = (uint8_t)((MCG_C2 & (uint8_t)~(uint8_t)(
   111f6:	2140      	movs	r1, #64	; 0x40
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:355
               SIM_SOPT2_TPMSRC(0x01)
              ));                      /* Set the TPM clock */
  /* PORTA_PCR18: ISF=0,MUX=0 */
  PORTA_PCR18 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
  /* PORTA_PCR19: ISF=0,MUX=0 */
  PORTA_PCR19 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
   111f8:	64da      	str	r2, [r3, #76]	; 0x4c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:358
  /* Switch to FBE Mode */
  /* MCG_C2: LOCRE0=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=0 */
  MCG_C2 = (uint8_t)((MCG_C2 & (uint8_t)~(uint8_t)(
   111fa:	4a26      	ldr	r2, [pc, #152]	; (11294 <__init_hardware+0x11c>)
   111fc:	7853      	ldrb	r3, [r2, #1]
   111fe:	400b      	ands	r3, r1
   11200:	391c      	subs	r1, #28
   11202:	430b      	orrs	r3, r1
   11204:	7053      	strb	r3, [r2, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:369
           )) | (uint8_t)(
            MCG_C2_RANGE0(0x02) |
            MCG_C2_EREFS0_MASK
           ));
  /* OSC0_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
  OSC0_CR = OSC_CR_ERCLKEN_MASK;
   11206:	4b24      	ldr	r3, [pc, #144]	; (11298 <__init_hardware+0x120>)
   11208:	315c      	adds	r1, #92	; 0x5c
   1120a:	7019      	strb	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:371
  /* MCG_C1: CLKS=2,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
  MCG_C1 = (MCG_C1_CLKS(0x02) | MCG_C1_FRDIV(0x03) | MCG_C1_IRCLKEN_MASK);
   1120c:	239a      	movs	r3, #154	; 0x9a
   1120e:	7013      	strb	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:373
  /* MCG_C4: DMX32=0,DRST_DRS=0 */
  MCG_C4 &= (uint8_t)~(uint8_t)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));
   11210:	78d3      	ldrb	r3, [r2, #3]
   11212:	3961      	subs	r1, #97	; 0x61
   11214:	400b      	ands	r3, r1
   11216:	70d3      	strb	r3, [r2, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:375
  /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=3 */
  MCG_C5 = MCG_C5_PRDIV0(0x03);
   11218:	2303      	movs	r3, #3
   1121a:	7113      	strb	r3, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:377
  /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
  MCG_C6 = MCG_C6_VDIV0(0x00);
   1121c:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:378
  while((MCG_S & MCG_S_IREFST_MASK) != 0x00U) { /* Check that the source of the FLL reference clock is the external reference clock. */
   1121e:	390f      	subs	r1, #15
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:377
  /* MCG_C4: DMX32=0,DRST_DRS=0 */
  MCG_C4 &= (uint8_t)~(uint8_t)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));
  /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=3 */
  MCG_C5 = MCG_C5_PRDIV0(0x03);
  /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
  MCG_C6 = MCG_C6_VDIV0(0x00);
   11220:	7153      	strb	r3, [r2, #5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:378 (discriminator 1)
  while((MCG_S & MCG_S_IREFST_MASK) != 0x00U) { /* Check that the source of the FLL reference clock is the external reference clock. */
   11222:	7993      	ldrb	r3, [r2, #6]
   11224:	4219      	tst	r1, r3
   11226:	d1fc      	bne.n	11222 <__init_hardware+0xaa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:380
  }
  while((MCG_S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG output */
   11228:	210c      	movs	r1, #12
   1122a:	481a      	ldr	r0, [pc, #104]	; (11294 <__init_hardware+0x11c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:380 (discriminator 1)
   1122c:	7983      	ldrb	r3, [r0, #6]
   1122e:	4a19      	ldr	r2, [pc, #100]	; (11294 <__init_hardware+0x11c>)
   11230:	400b      	ands	r3, r1
   11232:	2b08      	cmp	r3, #8
   11234:	d1fa      	bne.n	1122c <__init_hardware+0xb4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:385
  }
  /* Switch to PBE Mode */
  /* MCG_C6: LOLIE0=0,PLLS=1,CME0=0,VDIV0=0 */
  MCG_C6 = (MCG_C6_PLLS_MASK | MCG_C6_VDIV0(0x00));
  while((MCG_S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG output */
   11236:	210c      	movs	r1, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:384
  }
  while((MCG_S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG output */
  }
  /* Switch to PBE Mode */
  /* MCG_C6: LOLIE0=0,PLLS=1,CME0=0,VDIV0=0 */
  MCG_C6 = (MCG_C6_PLLS_MASK | MCG_C6_VDIV0(0x00));
   11238:	3338      	adds	r3, #56	; 0x38
   1123a:	7153      	strb	r3, [r2, #5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:385 (discriminator 1)
  while((MCG_S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG output */
   1123c:	7993      	ldrb	r3, [r2, #6]
   1123e:	400b      	ands	r3, r1
   11240:	2b08      	cmp	r3, #8
   11242:	d1fb      	bne.n	1123c <__init_hardware+0xc4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:387
  }
  while((MCG_S & MCG_S_LOCK0_MASK) == 0x00U) { /* Wait until locked */
   11244:	2140      	movs	r1, #64	; 0x40
   11246:	4813      	ldr	r0, [pc, #76]	; (11294 <__init_hardware+0x11c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:387 (discriminator 1)
   11248:	7982      	ldrb	r2, [r0, #6]
   1124a:	4b12      	ldr	r3, [pc, #72]	; (11294 <__init_hardware+0x11c>)
   1124c:	4211      	tst	r1, r2
   1124e:	d0fb      	beq.n	11248 <__init_hardware+0xd0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:391
  }
  /* Switch to PEE Mode */
  /* MCG_C1: CLKS=0,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
  MCG_C1 = (MCG_C1_CLKS(0x00) | MCG_C1_FRDIV(0x03) | MCG_C1_IRCLKEN_MASK);
   11250:	221a      	movs	r2, #26
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:392
  while((MCG_S & 0x0CU) != 0x0CU) {    /* Wait until output of the PLL is selected */
   11252:	210c      	movs	r1, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:391
  }
  while((MCG_S & MCG_S_LOCK0_MASK) == 0x00U) { /* Wait until locked */
  }
  /* Switch to PEE Mode */
  /* MCG_C1: CLKS=0,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
  MCG_C1 = (MCG_C1_CLKS(0x00) | MCG_C1_FRDIV(0x03) | MCG_C1_IRCLKEN_MASK);
   11254:	701a      	strb	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:392
  while((MCG_S & 0x0CU) != 0x0CU) {    /* Wait until output of the PLL is selected */
   11256:	1c1a      	adds	r2, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:392 (discriminator 1)
   11258:	7993      	ldrb	r3, [r2, #6]
   1125a:	400b      	ands	r3, r1
   1125c:	2b0c      	cmp	r3, #12
   1125e:	d1fb      	bne.n	11258 <__init_hardware+0xe0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:398
  }
  /*** End of PE initialization code after reset ***/

  /*** !!! Here you can place your own code after PE initialization using property "User code after PE initialization" on the build options tab. !!! ***/

}
   11260:	bd10      	pop	{r4, pc}
   11262:	46c0      	nop			; (mov r8, r8)
   11264:	00000d08 	.word	0x00000d08
   11268:	e000e000 	.word	0xe000e000
   1126c:	00000000 	.word	0x00000000
   11270:	40047000 	.word	0x40047000
   11274:	00001044 	.word	0x00001044
   11278:	00001038 	.word	0x00001038
   1127c:	4007d000 	.word	0x4007d000
   11280:	00001004 	.word	0x00001004
   11284:	fffcffff 	.word	0xfffcffff
   11288:	fcffffff 	.word	0xfcffffff
   1128c:	40049000 	.word	0x40049000
   11290:	fefff8ff 	.word	0xfefff8ff
   11294:	40064000 	.word	0x40064000
   11298:	40065000 	.word	0x40065000

0001129c <PE_low_level_init>:
PE_low_level_init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:414
**         application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void PE_low_level_init(void)
{
   1129c:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:416
  #ifdef PEX_RTOS_INIT
    PEX_RTOS_INIT();                   /* Initialization of the selected RTOS. Macro is defined by the RTOS component. */
   1129e:	4827      	ldr	r0, [pc, #156]	; (1133c <PE_low_level_init+0xa0>)
   112a0:	f7ff fa18 	bl	106d4 <_mqxlite_init>
   112a4:	2800      	cmp	r0, #0
   112a6:	d000      	beq.n	112aa <PE_low_level_init+0xe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:416 (discriminator 1)
   112a8:	e7fe      	b.n	112a8 <PE_low_level_init+0xc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:421
  #endif
      /* Initialization of the SIM module */
        /* Initialization of the RCM module */
  /* RCM_RPFW: RSTFLTSEL=0 */
  RCM_RPFW &= (uint8_t)~(uint8_t)(RCM_RPFW_RSTFLTSEL(0x1F));
   112aa:	211f      	movs	r1, #31
   112ac:	4b24      	ldr	r3, [pc, #144]	; (11340 <PE_low_level_init+0xa4>)
   112ae:	795a      	ldrb	r2, [r3, #5]
   112b0:	438a      	bics	r2, r1
   112b2:	715a      	strb	r2, [r3, #5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:423
  /* RCM_RPFC: RSTFLTSS=0,RSTFLTSRW=0 */
  RCM_RPFC &= (uint8_t)~(uint8_t)(
   112b4:	791a      	ldrb	r2, [r3, #4]
   112b6:	3918      	subs	r1, #24
   112b8:	438a      	bics	r2, r1
   112ba:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:430
               RCM_RPFC_RSTFLTSRW(0x03)
              );
        /* Initialization of the FTFL_FlashConfig module */
      /* Initialization of the PMC module */
  /* PMC_LVDSC1: LVDACK=1,LVDIE=0,LVDRE=1,LVDV=0 */
  PMC_LVDSC1 = (uint8_t)((PMC_LVDSC1 & (uint8_t)~(uint8_t)(
   112bc:	4b21      	ldr	r3, [pc, #132]	; (11344 <PE_low_level_init+0xa8>)
   112be:	316c      	adds	r1, #108	; 0x6c
   112c0:	781a      	ldrb	r2, [r3, #0]
   112c2:	438a      	bics	r2, r1
   112c4:	1c11      	adds	r1, r2, #0
   112c6:	2250      	movs	r2, #80	; 0x50
   112c8:	430a      	orrs	r2, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:438
               )) | (uint8_t)(
                PMC_LVDSC1_LVDACK_MASK |
                PMC_LVDSC1_LVDRE_MASK
               ));
  /* PMC_LVDSC2: LVWACK=1,LVWIE=0,LVWV=0 */
  PMC_LVDSC2 = (uint8_t)((PMC_LVDSC2 & (uint8_t)~(uint8_t)(
   112ca:	2163      	movs	r1, #99	; 0x63
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:430
               RCM_RPFC_RSTFLTSRW(0x03)
              );
        /* Initialization of the FTFL_FlashConfig module */
      /* Initialization of the PMC module */
  /* PMC_LVDSC1: LVDACK=1,LVDIE=0,LVDRE=1,LVDV=0 */
  PMC_LVDSC1 = (uint8_t)((PMC_LVDSC1 & (uint8_t)~(uint8_t)(
   112cc:	701a      	strb	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:438
               )) | (uint8_t)(
                PMC_LVDSC1_LVDACK_MASK |
                PMC_LVDSC1_LVDRE_MASK
               ));
  /* PMC_LVDSC2: LVWACK=1,LVWIE=0,LVWV=0 */
  PMC_LVDSC2 = (uint8_t)((PMC_LVDSC2 & (uint8_t)~(uint8_t)(
   112ce:	785a      	ldrb	r2, [r3, #1]
   112d0:	438a      	bics	r2, r1
   112d2:	1c11      	adds	r1, r2, #0
   112d4:	2240      	movs	r2, #64	; 0x40
   112d6:	430a      	orrs	r2, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:445
                PMC_LVDSC2_LVWV(0x03)
               )) | (uint8_t)(
                PMC_LVDSC2_LVWACK_MASK
               ));
  /* PMC_REGSC: BGEN=0,ACKISO=0,BGBE=0 */
  PMC_REGSC &= (uint8_t)~(uint8_t)(
   112d8:	2119      	movs	r1, #25
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:438
               )) | (uint8_t)(
                PMC_LVDSC1_LVDACK_MASK |
                PMC_LVDSC1_LVDRE_MASK
               ));
  /* PMC_LVDSC2: LVWACK=1,LVWIE=0,LVWV=0 */
  PMC_LVDSC2 = (uint8_t)((PMC_LVDSC2 & (uint8_t)~(uint8_t)(
   112da:	705a      	strb	r2, [r3, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:445
                PMC_LVDSC2_LVWV(0x03)
               )) | (uint8_t)(
                PMC_LVDSC2_LVWACK_MASK
               ));
  /* PMC_REGSC: BGEN=0,ACKISO=0,BGBE=0 */
  PMC_REGSC &= (uint8_t)~(uint8_t)(
   112dc:	789a      	ldrb	r2, [r3, #2]
   112de:	438a      	bics	r2, r1
   112e0:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:451
                PMC_REGSC_BGEN_MASK |
                PMC_REGSC_ACKISO_MASK |
                PMC_REGSC_BGBE_MASK
               );
  /* SMC_PMPROT: ??=0,??=0,AVLP=0,??=0,ALLS=0,??=0,AVLLS=0,??=0 */
  SMC_PMPROT = 0x00U;                  /* Setup Power mode protection register */
   112e2:	4b19      	ldr	r3, [pc, #100]	; (11348 <PE_low_level_init+0xac>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:454
  /* Common initialization of the CPU registers */
  /* PORTA_PCR20: ISF=0,MUX=7 */
  PORTA_PCR20 = (uint32_t)((PORTA_PCR20 & (uint32_t)~(uint32_t)(
   112e4:	4a19      	ldr	r2, [pc, #100]	; (1134c <PE_low_level_init+0xb0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:451
                PMC_REGSC_BGEN_MASK |
                PMC_REGSC_ACKISO_MASK |
                PMC_REGSC_BGBE_MASK
               );
  /* SMC_PMPROT: ??=0,??=0,AVLP=0,??=0,ALLS=0,??=0,AVLLS=0,??=0 */
  SMC_PMPROT = 0x00U;                  /* Setup Power mode protection register */
   112e6:	7018      	strb	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:454
  /* Common initialization of the CPU registers */
  /* PORTA_PCR20: ISF=0,MUX=7 */
  PORTA_PCR20 = (uint32_t)((PORTA_PCR20 & (uint32_t)~(uint32_t)(
   112e8:	6d11      	ldr	r1, [r2, #80]	; 0x50
   112ea:	4b19      	ldr	r3, [pc, #100]	; (11350 <PE_low_level_init+0xb4>)
   112ec:	400b      	ands	r3, r1
   112ee:	21e0      	movs	r1, #224	; 0xe0
   112f0:	00c9      	lsls	r1, r1, #3
   112f2:	430b      	orrs	r3, r1
   112f4:	6513      	str	r3, [r2, #80]	; 0x50
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:460
                 PORT_PCR_ISF_MASK
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x07)
                ));
  /* NVIC_IPR1: PRI_6=0 */
  NVIC_IPR1 &= (uint32_t)~(uint32_t)(NVIC_IP_PRI_6(0xFF));
   112f6:	22c1      	movs	r2, #193	; 0xc1
   112f8:	4916      	ldr	r1, [pc, #88]	; (11354 <PE_low_level_init+0xb8>)
   112fa:	0092      	lsls	r2, r2, #2
   112fc:	5888      	ldr	r0, [r1, r2]
   112fe:	4b16      	ldr	r3, [pc, #88]	; (11358 <PE_low_level_init+0xbc>)
   11300:	4003      	ands	r3, r0
   11302:	508b      	str	r3, [r1, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:462
  /* ### BitIO_LDD "LED_RED" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)LED_RED_Init(NULL);
   11304:	2000      	movs	r0, #0
   11306:	f000 fafb 	bl	11900 <LED_RED_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:464
  /* ### BitIO_LDD "LED_GREEN" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)LED_GREEN_Init(NULL);
   1130a:	2000      	movs	r0, #0
   1130c:	f000 facc 	bl	118a8 <LED_GREEN_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:466
  /* ### BitIO_LDD "LED_BLUE" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)LED_BLUE_Init(NULL);
   11310:	2000      	movs	r0, #0
   11312:	f000 fa9f 	bl	11854 <LED_BLUE_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:468
  /* ### TimerUnit_LDD "FTM" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)FTM_Init(NULL);
   11316:	2000      	movs	r0, #0
   11318:	f000 f82c 	bl	11374 <FTM_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:470
  /* ### Serial_LDD "UART" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)UART_Init(NULL);
   1131c:	2000      	movs	r0, #0
   1131e:	f000 fd27 	bl	11d70 <UART_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:472
  /* ### I2C_LDD "I2C" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)I2C_Init(NULL);
   11322:	2000      	movs	r0, #0
   11324:	f000 f928 	bl	11578 <I2C_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:474
  /* ### BitIO_LDD "TestPin_KF_Time" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)TestPin_KF_Time_Init(NULL);
   11328:	2000      	movs	r0, #0
   1132a:	f000 fc4b 	bl	11bc4 <TestPin_KF_Time_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:476
  /* ### BitIO_LDD "TestPin_MagCal_Time" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)TestPin_MagCal_Time_Init(NULL);
   1132e:	2000      	movs	r0, #0
   11330:	f000 fc7c 	bl	11c2c <TestPin_MagCal_Time_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:478
  /* ### RingBufferUInt8 "RNG1" init code ... */
  RNG1_Init();
   11334:	f000 fbdc 	bl	11af0 <RNG1_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:479
}
   11338:	bd08      	pop	{r3, pc}
   1133a:	46c0      	nop			; (mov r8, r8)
   1133c:	000148c0 	.word	0x000148c0
   11340:	4007f000 	.word	0x4007f000
   11344:	4007d000 	.word	0x4007d000
   11348:	4007e000 	.word	0x4007e000
   1134c:	40049000 	.word	0x40049000
   11350:	fefff8ff 	.word	0xfefff8ff
   11354:	e000e100 	.word	0xe000e100
   11358:	ff00ffff 	.word	0xff00ffff

0001135c <FTM_Interrupt>:
FTM_Interrupt():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:294
**         and eventually invokes event(s) of the component.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void FTM_Interrupt(LDD_RTOS_TISRParameter _isrParameter)
{
   1135c:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:298
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  FTM_TDeviceDataPtr DeviceDataPrv = (FTM_TDeviceDataPtr)_isrParameter;

  LPTMR_PDD_ClearInterruptFlag(LPTMR0_BASE_PTR); /* Clear interrupt flag */
   1135e:	2380      	movs	r3, #128	; 0x80
   11360:	4a03      	ldr	r2, [pc, #12]	; (11370 <FTM_Interrupt+0x14>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:299
  FTM_OnCounterRestart(DeviceDataPrv->UserDataPtr); /* Invoke OnCounterRestart event */
   11362:	6880      	ldr	r0, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:298
void FTM_Interrupt(LDD_RTOS_TISRParameter _isrParameter)
{
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  FTM_TDeviceDataPtr DeviceDataPrv = (FTM_TDeviceDataPtr)_isrParameter;

  LPTMR_PDD_ClearInterruptFlag(LPTMR0_BASE_PTR); /* Clear interrupt flag */
   11364:	6811      	ldr	r1, [r2, #0]
   11366:	430b      	orrs	r3, r1
   11368:	6013      	str	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:299
  FTM_OnCounterRestart(DeviceDataPrv->UserDataPtr); /* Invoke OnCounterRestart event */
   1136a:	f7f1 fcfd 	bl	2d68 <FTM_OnCounterRestart>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:300
}
   1136e:	bd08      	pop	{r3, pc}
   11370:	40040000 	.word	0x40040000

00011374 <FTM_Init>:
FTM_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:153
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* FTM_Init(LDD_TUserData *UserDataPtr)
{
   11374:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:158
  /* Allocate device structure */
  FTM_TDeviceData *DeviceDataPrv;
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   11376:	4c16      	ldr	r4, [pc, #88]	; (113d0 <FTM_Init+0x5c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:173
  /* LPTMR0_CMR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COMPARE=0x1387 */
  LPTMR0_CMR = LPTMR_CMR_COMPARE(0x1387); /* Set up compare register */
  /* LPTMR0_PSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,PRESCALE=2,PBYP=0,PCS=3 */
  LPTMR0_PSR = (LPTMR_PSR_PRESCALE(0x02) | LPTMR_PSR_PCS(0x03)); /* Set up prescaler register */
  /* NVIC_IPR7: PRI_28=0x80 */
  NVIC_IPR7 = (uint32_t)((NVIC_IPR7 & (uint32_t)~(uint32_t)(
   11378:	25c7      	movs	r5, #199	; 0xc7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:158
{
  /* Allocate device structure */
  FTM_TDeviceData *DeviceDataPrv;
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   1137a:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:162
  /* Interrupt vector(s) allocation */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrData = _int_get_isr_data(LDD_ivIndex_INT_LPTimer);
   1137c:	202c      	movs	r0, #44	; 0x2c
   1137e:	f7fe fe7f 	bl	10080 <_int_get_isr_data>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:163
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrFunction = _int_install_isr(LDD_ivIndex_INT_LPTimer, FTM_Interrupt, DeviceDataPrv);
   11382:	1c22      	adds	r2, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:162
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Interrupt vector(s) allocation */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrData = _int_get_isr_data(LDD_ivIndex_INT_LPTimer);
   11384:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:163
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrFunction = _int_install_isr(LDD_ivIndex_INT_LPTimer, FTM_Interrupt, DeviceDataPrv);
   11386:	4913      	ldr	r1, [pc, #76]	; (113d4 <FTM_Init+0x60>)
   11388:	202c      	movs	r0, #44	; 0x2c
   1138a:	f7fe fe99 	bl	100c0 <_int_install_isr>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:165
  /* SIM_SCGC5: LPTMR=1 */
  SIM_SCGC5 |= SIM_SCGC5_LPTMR_MASK;
   1138e:	2301      	movs	r3, #1
   11390:	4911      	ldr	r1, [pc, #68]	; (113d8 <FTM_Init+0x64>)
   11392:	4a12      	ldr	r2, [pc, #72]	; (113dc <FTM_Init+0x68>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:163
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Interrupt vector(s) allocation */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrData = _int_get_isr_data(LDD_ivIndex_INT_LPTimer);
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrFunction = _int_install_isr(LDD_ivIndex_INT_LPTimer, FTM_Interrupt, DeviceDataPrv);
   11394:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:165
  /* SIM_SCGC5: LPTMR=1 */
  SIM_SCGC5 |= SIM_SCGC5_LPTMR_MASK;
   11396:	5888      	ldr	r0, [r1, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:173
  /* LPTMR0_CMR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COMPARE=0x1387 */
  LPTMR0_CMR = LPTMR_CMR_COMPARE(0x1387); /* Set up compare register */
  /* LPTMR0_PSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,PRESCALE=2,PBYP=0,PCS=3 */
  LPTMR0_PSR = (LPTMR_PSR_PRESCALE(0x02) | LPTMR_PSR_PCS(0x03)); /* Set up prescaler register */
  /* NVIC_IPR7: PRI_28=0x80 */
  NVIC_IPR7 = (uint32_t)((NVIC_IPR7 & (uint32_t)~(uint32_t)(
   11398:	26ff      	movs	r6, #255	; 0xff
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:165
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrData = _int_get_isr_data(LDD_ivIndex_INT_LPTimer);
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrFunction = _int_install_isr(LDD_ivIndex_INT_LPTimer, FTM_Interrupt, DeviceDataPrv);
  /* SIM_SCGC5: LPTMR=1 */
  SIM_SCGC5 |= SIM_SCGC5_LPTMR_MASK;
   1139a:	4303      	orrs	r3, r0
   1139c:	508b      	str	r3, [r1, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:167
  /* LPTMR0_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,TCF=1,TIE=0,TPS=0,TPP=0,TFC=0,TMS=0,TEN=0 */
  LPTMR0_CSR = (LPTMR_CSR_TCF_MASK | LPTMR_CSR_TPS(0x00)); /* Clear control register */
   1139e:	2180      	movs	r1, #128	; 0x80
   113a0:	4b0f      	ldr	r3, [pc, #60]	; (113e0 <FTM_Init+0x6c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:169
  /* LPTMR0_CMR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COMPARE=0x1387 */
  LPTMR0_CMR = LPTMR_CMR_COMPARE(0x1387); /* Set up compare register */
   113a2:	4a10      	ldr	r2, [pc, #64]	; (113e4 <FTM_Init+0x70>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:167
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrData = _int_get_isr_data(LDD_ivIndex_INT_LPTimer);
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrFunction = _int_install_isr(LDD_ivIndex_INT_LPTimer, FTM_Interrupt, DeviceDataPrv);
  /* SIM_SCGC5: LPTMR=1 */
  SIM_SCGC5 |= SIM_SCGC5_LPTMR_MASK;
  /* LPTMR0_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,TCF=1,TIE=0,TPS=0,TPP=0,TFC=0,TMS=0,TEN=0 */
  LPTMR0_CSR = (LPTMR_CSR_TCF_MASK | LPTMR_CSR_TPS(0x00)); /* Clear control register */
   113a4:	6019      	str	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:169
  /* LPTMR0_CMR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COMPARE=0x1387 */
  LPTMR0_CMR = LPTMR_CMR_COMPARE(0x1387); /* Set up compare register */
   113a6:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:171
  /* LPTMR0_PSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,PRESCALE=2,PBYP=0,PCS=3 */
  LPTMR0_PSR = (LPTMR_PSR_PRESCALE(0x02) | LPTMR_PSR_PCS(0x03)); /* Set up prescaler register */
   113a8:	2213      	movs	r2, #19
   113aa:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:173
  /* NVIC_IPR7: PRI_28=0x80 */
  NVIC_IPR7 = (uint32_t)((NVIC_IPR7 & (uint32_t)~(uint32_t)(
   113ac:	4a0e      	ldr	r2, [pc, #56]	; (113e8 <FTM_Init+0x74>)
   113ae:	00ad      	lsls	r5, r5, #2
   113b0:	5950      	ldr	r0, [r2, r5]
   113b2:	43b0      	bics	r0, r6
   113b4:	4301      	orrs	r1, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:179
               NVIC_IP_PRI_28(0x7F)
              )) | (uint32_t)(
               NVIC_IP_PRI_28(0x80)
              ));
  /* NVIC_ISER: SETENA|=0x10000000 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x10000000);
   113b6:	2080      	movs	r0, #128	; 0x80
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:173
  /* LPTMR0_CMR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COMPARE=0x1387 */
  LPTMR0_CMR = LPTMR_CMR_COMPARE(0x1387); /* Set up compare register */
  /* LPTMR0_PSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,PRESCALE=2,PBYP=0,PCS=3 */
  LPTMR0_PSR = (LPTMR_PSR_PRESCALE(0x02) | LPTMR_PSR_PCS(0x03)); /* Set up prescaler register */
  /* NVIC_IPR7: PRI_28=0x80 */
  NVIC_IPR7 = (uint32_t)((NVIC_IPR7 & (uint32_t)~(uint32_t)(
   113b8:	5151      	str	r1, [r2, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:179
               NVIC_IP_PRI_28(0x7F)
              )) | (uint32_t)(
               NVIC_IP_PRI_28(0x80)
              ));
  /* NVIC_ISER: SETENA|=0x10000000 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x10000000);
   113ba:	6811      	ldr	r1, [r2, #0]
   113bc:	0540      	lsls	r0, r0, #21
   113be:	4301      	orrs	r1, r0
   113c0:	6011      	str	r1, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:181
  /* LPTMR0_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,TCF=0,TIE=1,TPS=0,TPP=0,TFC=0,TMS=0,TEN=1 */
  LPTMR0_CSR = (LPTMR_CSR_TIE_MASK | LPTMR_CSR_TPS(0x00) | LPTMR_CSR_TEN_MASK); /* Set up control register */
   113c2:	2241      	movs	r2, #65	; 0x41
   113c4:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:183
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_FTM_ID,DeviceDataPrv);
   113c6:	4b09      	ldr	r3, [pc, #36]	; (113ec <FTM_Init+0x78>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:185
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
}
   113c8:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:183
  /* NVIC_ISER: SETENA|=0x10000000 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x10000000);
  /* LPTMR0_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,TCF=0,TIE=1,TPS=0,TPP=0,TFC=0,TMS=0,TEN=1 */
  LPTMR0_CSR = (LPTMR_CSR_TIE_MASK | LPTMR_CSR_TPS(0x00) | LPTMR_CSR_TEN_MASK); /* Set up control register */
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_FTM_ID,DeviceDataPrv);
   113ca:	611c      	str	r4, [r3, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:185
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
}
   113cc:	bd70      	pop	{r4, r5, r6, pc}
   113ce:	46c0      	nop			; (mov r8, r8)
   113d0:	1fffe298 	.word	0x1fffe298
   113d4:	0001135d 	.word	0x0001135d
   113d8:	40047000 	.word	0x40047000
   113dc:	00001038 	.word	0x00001038
   113e0:	40040000 	.word	0x40040000
   113e4:	00001387 	.word	0x00001387
   113e8:	e000e100 	.word	0xe000e100
   113ec:	1fffe2d8 	.word	0x1fffe2d8

000113f0 <FTM_SetPeriodTicks>:
FTM_SetPeriodTicks():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:219
LDD_TError FTM_SetPeriodTicks(LDD_TDeviceData *DeviceDataPtr, FTM_TValueType Ticks)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  /* Parameter test - this test can be disabled by setting the "Ignore range checking"
     property to the "yes" value in the "Configuration inspector" */
  if (Ticks > 65535U) {                /* Is the given value out of range? */
   113f0:	4b05      	ldr	r3, [pc, #20]	; (11408 <FTM_SetPeriodTicks+0x18>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:220
    return ERR_PARAM_TICKS;            /* If yes then error */
   113f2:	2098      	movs	r0, #152	; 0x98
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:219
LDD_TError FTM_SetPeriodTicks(LDD_TDeviceData *DeviceDataPtr, FTM_TValueType Ticks)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  /* Parameter test - this test can be disabled by setting the "Ignore range checking"
     property to the "yes" value in the "Configuration inspector" */
  if (Ticks > 65535U) {                /* Is the given value out of range? */
   113f4:	4299      	cmp	r1, r3
   113f6:	d900      	bls.n	113fa <FTM_SetPeriodTicks+0xa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:224
    return ERR_PARAM_TICKS;            /* If yes then error */
  }
  LPTMR_PDD_WriteCompareReg(LPTMR0_BASE_PTR, (uint16_t)(--Ticks));
  return ERR_OK;                       /* OK */
}
   113f8:	4770      	bx	lr
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:222
  /* Parameter test - this test can be disabled by setting the "Ignore range checking"
     property to the "yes" value in the "Configuration inspector" */
  if (Ticks > 65535U) {                /* Is the given value out of range? */
    return ERR_PARAM_TICKS;            /* If yes then error */
  }
  LPTMR_PDD_WriteCompareReg(LPTMR0_BASE_PTR, (uint16_t)(--Ticks));
   113fa:	3901      	subs	r1, #1
   113fc:	0409      	lsls	r1, r1, #16
   113fe:	4b03      	ldr	r3, [pc, #12]	; (1140c <FTM_SetPeriodTicks+0x1c>)
   11400:	0c09      	lsrs	r1, r1, #16
   11402:	6099      	str	r1, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:223
  return ERR_OK;                       /* OK */
   11404:	2000      	movs	r0, #0
   11406:	e7f7      	b.n	113f8 <FTM_SetPeriodTicks+0x8>
   11408:	0000ffff 	.word	0x0000ffff
   1140c:	40040000 	.word	0x40040000

00011410 <I2C_Interrupt>:
I2C_Interrupt():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:222
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

void I2C_Interrupt(LDD_RTOS_TISRParameter _isrParameter)
{
   11410:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:229
  I2C_TDeviceDataPtr DeviceDataPrv = (I2C_TDeviceDataPtr)_isrParameter;
  LDD_I2C_TErrorMask ErrorMask = 0x00U; /* Temporary variable for error mask */
  register uint8_t Status;             /* Temporary variable for status register */

  Status = I2C_PDD_ReadStatusReg(I2C1_BASE_PTR); /* Safe status register */
  I2C_PDD_ClearInterruptFlags(I2C1_BASE_PTR, (Status)); /* Clear interrupt flag */
   11412:	2412      	movs	r4, #18
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:228
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  I2C_TDeviceDataPtr DeviceDataPrv = (I2C_TDeviceDataPtr)_isrParameter;
  LDD_I2C_TErrorMask ErrorMask = 0x00U; /* Temporary variable for error mask */
  register uint8_t Status;             /* Temporary variable for status register */

  Status = I2C_PDD_ReadStatusReg(I2C1_BASE_PTR); /* Safe status register */
   11414:	4b57      	ldr	r3, [pc, #348]	; (11574 <I2C_Interrupt+0x164>)
   11416:	78d9      	ldrb	r1, [r3, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:229
  I2C_PDD_ClearInterruptFlags(I2C1_BASE_PTR, (Status)); /* Clear interrupt flag */
   11418:	78da      	ldrb	r2, [r3, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:228
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  I2C_TDeviceDataPtr DeviceDataPrv = (I2C_TDeviceDataPtr)_isrParameter;
  LDD_I2C_TErrorMask ErrorMask = 0x00U; /* Temporary variable for error mask */
  register uint8_t Status;             /* Temporary variable for status register */

  Status = I2C_PDD_ReadStatusReg(I2C1_BASE_PTR); /* Safe status register */
   1141a:	b2c9      	uxtb	r1, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:229
  I2C_PDD_ClearInterruptFlags(I2C1_BASE_PTR, (Status)); /* Clear interrupt flag */
   1141c:	43a2      	bics	r2, r4
   1141e:	430a      	orrs	r2, r1
   11420:	70da      	strb	r2, [r3, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:230
  if (I2C_PDD_GetMasterMode(I2C1_BASE_PTR) == I2C_PDD_MASTER_MODE) { /* Is device in master mode? */
   11422:	789a      	ldrb	r2, [r3, #2]
   11424:	340e      	adds	r4, #14
   11426:	4022      	ands	r2, r4
   11428:	d024      	beq.n	11474 <I2C_Interrupt+0x64>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:231
    if (I2C_PDD_GetTransmitMode(I2C1_BASE_PTR) == I2C_PDD_TX_DIRECTION) { /* Is device in Tx mode? */
   1142a:	2510      	movs	r5, #16
   1142c:	789e      	ldrb	r6, [r3, #2]
   1142e:	1c02      	adds	r2, r0, #0
   11430:	4235      	tst	r5, r6
   11432:	d031      	beq.n	11498 <I2C_Interrupt+0x88>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:232
      if ((Status & I2C_PDD_RX_ACKNOWLEDGE) != 0x00U){ /* NACK received? */
   11434:	2601      	movs	r6, #1
   11436:	420e      	tst	r6, r1
   11438:	d150      	bne.n	114dc <I2C_Interrupt+0xcc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:241
        DeviceDataPrv->InpLenM = 0x00U; /* No character for reception */
        DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* No character for sending or reception */
        DeviceDataPrv->SerFlag |= (ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Set the flag */
        ErrorMask |= LDD_I2C_MASTER_NACK; /* Set the Master Nack error mask */
      } else {
        if ((DeviceDataPrv->SerFlag & ADDR_COMPLETE) != 0x00U) { /* If 10-bit addr has been completed */
   1143a:	7801      	ldrb	r1, [r0, #0]
   1143c:	0788      	lsls	r0, r1, #30
   1143e:	d564      	bpl.n	1150a <I2C_Interrupt+0xfa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:242
          if (DeviceDataPrv->OutLenM != 0x00U) { /* Is any char. for transmitting? */
   11440:	8a10      	ldrh	r0, [r2, #16]
   11442:	2800      	cmp	r0, #0
   11444:	d000      	beq.n	11448 <I2C_Interrupt+0x38>
   11446:	e067      	b.n	11518 <I2C_Interrupt+0x108>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:246
            DeviceDataPrv->OutLenM--;  /* Decrease number of chars for the transmit */
            I2C_PDD_WriteDataReg(I2C1_BASE_PTR, *(DeviceDataPrv->OutPtrM)++); /* Send character */
          } else {
            if (DeviceDataPrv->InpLenM != 0x00U) { /* Is any char. for reception? */
   11448:	8910      	ldrh	r0, [r2, #8]
   1144a:	2800      	cmp	r0, #0
   1144c:	d100      	bne.n	11450 <I2C_Interrupt+0x40>
   1144e:	e06b      	b.n	11528 <I2C_Interrupt+0x118>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:247
              if ((DeviceDataPrv->SerFlag & REP_ADDR_COMPLETE) != 0x00U) { /* If repeated start and addr tx has been completed for 10-bit mode ?*/
   11450:	2404      	movs	r4, #4
   11452:	0749      	lsls	r1, r1, #29
   11454:	d400      	bmi.n	11458 <I2C_Interrupt+0x48>
   11456:	e074      	b.n	11542 <I2C_Interrupt+0x132>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:248
                if (DeviceDataPrv->InpLenM == 0x01U) { /* If only one char to receive */
   11458:	2801      	cmp	r0, #1
   1145a:	d100      	bne.n	1145e <I2C_Interrupt+0x4e>
   1145c:	e085      	b.n	1156a <I2C_Interrupt+0x15a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:251
                  I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_DISABLE); /* then transmit ACK disable */
                } else {
                  I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_ENABLE); /* else transmit ACK enable */
   1145e:	2108      	movs	r1, #8
   11460:	789a      	ldrb	r2, [r3, #2]
   11462:	438a      	bics	r2, r1
   11464:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:253
                }
                I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_RX_DIRECTION); /* Switch to Rx mode */
   11466:	2110      	movs	r1, #16
   11468:	4b42      	ldr	r3, [pc, #264]	; (11574 <I2C_Interrupt+0x164>)
   1146a:	789a      	ldrb	r2, [r3, #2]
   1146c:	438a      	bics	r2, r1
   1146e:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:254
                (void)I2C_PDD_ReadDataReg(I2C1_BASE_PTR); /* Dummy read character */
   11470:	791b      	ldrb	r3, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:305
    }
  }
  if (ErrorMask != 0x00U) {            /* Is any error mask set? */
    DeviceDataPrv->ErrorMask |= ErrorMask; /* Update list of error mask value */
  }
}
   11472:	bd70      	pop	{r4, r5, r6, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:293
        DeviceDataPrv->StatusFlag |= MASTER_BLOCK_RECEIVED; /* Set data block received flag */
        I2C_OnMasterBlockReceived(DeviceDataPrv->UserData); /* Invoke OnMasterBlockReceived event */
      }
    }
  } else {
    if ((Status & I2C_PDD_ARBIT_LOST) != 0x00U) { /* Arbitration lost? */
   11474:	2410      	movs	r4, #16
   11476:	420c      	tst	r4, r1
   11478:	d0fb      	beq.n	11472 <I2C_Interrupt+0x62>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:296
      DeviceDataPrv->OutLenM = 0x00U;  /* Any character is not for sent */
      DeviceDataPrv->InpLenM = 0x00U;  /* Any character is not for reception */
      DeviceDataPrv->SendStop = LDD_I2C_SEND_STOP; /* Set variable for sending stop condition (for master mode) */
   1147a:	2101      	movs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:294
        I2C_OnMasterBlockReceived(DeviceDataPrv->UserData); /* Invoke OnMasterBlockReceived event */
      }
    }
  } else {
    if ((Status & I2C_PDD_ARBIT_LOST) != 0x00U) { /* Arbitration lost? */
      DeviceDataPrv->OutLenM = 0x00U;  /* Any character is not for sent */
   1147c:	8202      	strh	r2, [r0, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:295
      DeviceDataPrv->InpLenM = 0x00U;  /* Any character is not for reception */
   1147e:	8102      	strh	r2, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:297
      DeviceDataPrv->SendStop = LDD_I2C_SEND_STOP; /* Set variable for sending stop condition (for master mode) */
      DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* Any character is not for sent or reception*/
   11480:	7802      	ldrb	r2, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:296
    }
  } else {
    if ((Status & I2C_PDD_ARBIT_LOST) != 0x00U) { /* Arbitration lost? */
      DeviceDataPrv->OutLenM = 0x00U;  /* Any character is not for sent */
      DeviceDataPrv->InpLenM = 0x00U;  /* Any character is not for reception */
      DeviceDataPrv->SendStop = LDD_I2C_SEND_STOP; /* Set variable for sending stop condition (for master mode) */
   11482:	7081      	strb	r1, [r0, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:297
      DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* Any character is not for sent or reception*/
   11484:	438a      	bics	r2, r1
   11486:	7002      	strb	r2, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:298
      I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_RX_DIRECTION); /* Switch to Rx mode */
   11488:	789a      	ldrb	r2, [r3, #2]
   1148a:	43a2      	bics	r2, r4
   1148c:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:299
      ErrorMask |= LDD_I2C_ARBIT_LOST; /* Set the ArbitLost error mask */
   1148e:	2204      	movs	r2, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:303
    }
  }
  if (ErrorMask != 0x00U) {            /* Is any error mask set? */
    DeviceDataPrv->ErrorMask |= ErrorMask; /* Update list of error mask value */
   11490:	8883      	ldrh	r3, [r0, #4]
   11492:	4313      	orrs	r3, r2
   11494:	8083      	strh	r3, [r0, #4]
   11496:	e7ec      	b.n	11472 <I2C_Interrupt+0x62>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:276
          I2C_PDD_WriteDataReg(I2C1_BASE_PTR, DeviceDataPrv->SlaveAddr); /* Send second part of the 10-bit addres */
          DeviceDataPrv->SerFlag |= (ADDR_COMPLETE); /* Address complete */
        }
      }
    } else {
      DeviceDataPrv->InpLenM--;        /* Decrease number of chars for the receive */
   11498:	8901      	ldrh	r1, [r0, #8]
   1149a:	3901      	subs	r1, #1
   1149c:	b289      	uxth	r1, r1
   1149e:	8101      	strh	r1, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:277
      if (DeviceDataPrv->InpLenM != 0x00U) { /* Is any char. for reception? */
   114a0:	2900      	cmp	r1, #0
   114a2:	d12b      	bne.n	114fc <I2C_Interrupt+0xec>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:282
        if (DeviceDataPrv->InpLenM == 0x01U) {
          I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_DISABLE); /* Transmit NACK */
        }
      } else {
        DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* Clear flag "busy" */
   114a4:	7801      	ldrb	r1, [r0, #0]
   114a6:	2001      	movs	r0, #1
   114a8:	4381      	bics	r1, r0
   114aa:	7011      	strb	r1, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:283
        I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_SLAVE_MODE); /* If no, switch device to slave mode (stop signal sent) */
   114ac:	7899      	ldrb	r1, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:284
        I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_ENABLE); /* Transmit ACK */
   114ae:	3007      	adds	r0, #7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:283
        if (DeviceDataPrv->InpLenM == 0x01U) {
          I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_DISABLE); /* Transmit NACK */
        }
      } else {
        DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* Clear flag "busy" */
        I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_SLAVE_MODE); /* If no, switch device to slave mode (stop signal sent) */
   114b0:	43a1      	bics	r1, r4
   114b2:	7099      	strb	r1, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:284
        I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_ENABLE); /* Transmit ACK */
   114b4:	7899      	ldrb	r1, [r3, #2]
   114b6:	4381      	bics	r1, r0
   114b8:	7099      	strb	r1, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:286
      }
      *(DeviceDataPrv->InpPtrM)++ = I2C_PDD_ReadDataReg(I2C1_BASE_PTR); /* Receive character */
   114ba:	68d3      	ldr	r3, [r2, #12]
   114bc:	1c59      	adds	r1, r3, #1
   114be:	60d1      	str	r1, [r2, #12]
   114c0:	492c      	ldr	r1, [pc, #176]	; (11574 <I2C_Interrupt+0x164>)
   114c2:	7909      	ldrb	r1, [r1, #4]
   114c4:	7019      	strb	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:287
      if (DeviceDataPrv->InpLenM == 0x00U) { /* Is any char. for reception? */
   114c6:	8913      	ldrh	r3, [r2, #8]
   114c8:	2b00      	cmp	r3, #0
   114ca:	d1d2      	bne.n	11472 <I2C_Interrupt+0x62>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:288
        DeviceDataPrv->StatusFlag |= MASTER_BLOCK_RECEIVED; /* Set data block received flag */
   114cc:	2302      	movs	r3, #2
   114ce:	7851      	ldrb	r1, [r2, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:289
        I2C_OnMasterBlockReceived(DeviceDataPrv->UserData); /* Invoke OnMasterBlockReceived event */
   114d0:	6a10      	ldr	r0, [r2, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:288
        I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_SLAVE_MODE); /* If no, switch device to slave mode (stop signal sent) */
        I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_ENABLE); /* Transmit ACK */
      }
      *(DeviceDataPrv->InpPtrM)++ = I2C_PDD_ReadDataReg(I2C1_BASE_PTR); /* Receive character */
      if (DeviceDataPrv->InpLenM == 0x00U) { /* Is any char. for reception? */
        DeviceDataPrv->StatusFlag |= MASTER_BLOCK_RECEIVED; /* Set data block received flag */
   114d2:	430b      	orrs	r3, r1
   114d4:	7053      	strb	r3, [r2, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:289
        I2C_OnMasterBlockReceived(DeviceDataPrv->UserData); /* Invoke OnMasterBlockReceived event */
   114d6:	f7f1 fc61 	bl	2d9c <I2C_OnMasterBlockReceived>
   114da:	e7ca      	b.n	11472 <I2C_Interrupt+0x62>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:233
  Status = I2C_PDD_ReadStatusReg(I2C1_BASE_PTR); /* Safe status register */
  I2C_PDD_ClearInterruptFlags(I2C1_BASE_PTR, (Status)); /* Clear interrupt flag */
  if (I2C_PDD_GetMasterMode(I2C1_BASE_PTR) == I2C_PDD_MASTER_MODE) { /* Is device in master mode? */
    if (I2C_PDD_GetTransmitMode(I2C1_BASE_PTR) == I2C_PDD_TX_DIRECTION) { /* Is device in Tx mode? */
      if ((Status & I2C_PDD_RX_ACKNOWLEDGE) != 0x00U){ /* NACK received? */
        I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_SLAVE_MODE); /* Switch device to slave mode (stop signal sent) */
   114dc:	7899      	ldrb	r1, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:239
        I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_RX_DIRECTION); /* Switch to Rx mode */
        DeviceDataPrv->OutLenM = 0x00U; /* No character for sending */
        DeviceDataPrv->InpLenM = 0x00U; /* No character for reception */
        DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* No character for sending or reception */
        DeviceDataPrv->SerFlag |= (ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Set the flag */
        ErrorMask |= LDD_I2C_MASTER_NACK; /* Set the Master Nack error mask */
   114de:	2208      	movs	r2, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:233
  Status = I2C_PDD_ReadStatusReg(I2C1_BASE_PTR); /* Safe status register */
  I2C_PDD_ClearInterruptFlags(I2C1_BASE_PTR, (Status)); /* Clear interrupt flag */
  if (I2C_PDD_GetMasterMode(I2C1_BASE_PTR) == I2C_PDD_MASTER_MODE) { /* Is device in master mode? */
    if (I2C_PDD_GetTransmitMode(I2C1_BASE_PTR) == I2C_PDD_TX_DIRECTION) { /* Is device in Tx mode? */
      if ((Status & I2C_PDD_RX_ACKNOWLEDGE) != 0x00U){ /* NACK received? */
        I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_SLAVE_MODE); /* Switch device to slave mode (stop signal sent) */
   114e0:	43a1      	bics	r1, r4
   114e2:	7099      	strb	r1, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:234
        I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_RX_DIRECTION); /* Switch to Rx mode */
   114e4:	7899      	ldrb	r1, [r3, #2]
   114e6:	43a9      	bics	r1, r5
   114e8:	7099      	strb	r1, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:235
        DeviceDataPrv->OutLenM = 0x00U; /* No character for sending */
   114ea:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:238
        DeviceDataPrv->InpLenM = 0x00U; /* No character for reception */
        DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* No character for sending or reception */
        DeviceDataPrv->SerFlag |= (ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Set the flag */
   114ec:	2106      	movs	r1, #6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:235
  if (I2C_PDD_GetMasterMode(I2C1_BASE_PTR) == I2C_PDD_MASTER_MODE) { /* Is device in master mode? */
    if (I2C_PDD_GetTransmitMode(I2C1_BASE_PTR) == I2C_PDD_TX_DIRECTION) { /* Is device in Tx mode? */
      if ((Status & I2C_PDD_RX_ACKNOWLEDGE) != 0x00U){ /* NACK received? */
        I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_SLAVE_MODE); /* Switch device to slave mode (stop signal sent) */
        I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_RX_DIRECTION); /* Switch to Rx mode */
        DeviceDataPrv->OutLenM = 0x00U; /* No character for sending */
   114ee:	8203      	strh	r3, [r0, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:236
        DeviceDataPrv->InpLenM = 0x00U; /* No character for reception */
   114f0:	8103      	strh	r3, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:237
        DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* No character for sending or reception */
   114f2:	7803      	ldrb	r3, [r0, #0]
   114f4:	43b3      	bics	r3, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:238
        DeviceDataPrv->SerFlag |= (ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Set the flag */
   114f6:	430b      	orrs	r3, r1
   114f8:	7003      	strb	r3, [r0, #0]
   114fa:	e7c9      	b.n	11490 <I2C_Interrupt+0x80>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:278
        }
      }
    } else {
      DeviceDataPrv->InpLenM--;        /* Decrease number of chars for the receive */
      if (DeviceDataPrv->InpLenM != 0x00U) { /* Is any char. for reception? */
        if (DeviceDataPrv->InpLenM == 0x01U) {
   114fc:	2901      	cmp	r1, #1
   114fe:	d1dc      	bne.n	114ba <I2C_Interrupt+0xaa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:279
          I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_DISABLE); /* Transmit NACK */
   11500:	7898      	ldrb	r0, [r3, #2]
   11502:	3107      	adds	r1, #7
   11504:	4301      	orrs	r1, r0
   11506:	7099      	strb	r1, [r3, #2]
   11508:	e7d7      	b.n	114ba <I2C_Interrupt+0xaa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:271
              DeviceDataPrv->StatusFlag |= MASTER_BLOCK_SENT; /* Set data block sent flag */
              I2C_OnMasterBlockSent(DeviceDataPrv->UserData); /* Invoke OnMasterBlockSent event */
            }
          }
        } else {
          I2C_PDD_WriteDataReg(I2C1_BASE_PTR, DeviceDataPrv->SlaveAddr); /* Send second part of the 10-bit addres */
   1150a:	7991      	ldrb	r1, [r2, #6]
   1150c:	7119      	strb	r1, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:272
          DeviceDataPrv->SerFlag |= (ADDR_COMPLETE); /* Address complete */
   1150e:	2302      	movs	r3, #2
   11510:	7811      	ldrb	r1, [r2, #0]
   11512:	430b      	orrs	r3, r1
   11514:	7013      	strb	r3, [r2, #0]
   11516:	e7ac      	b.n	11472 <I2C_Interrupt+0x62>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:244
        ErrorMask |= LDD_I2C_MASTER_NACK; /* Set the Master Nack error mask */
      } else {
        if ((DeviceDataPrv->SerFlag & ADDR_COMPLETE) != 0x00U) { /* If 10-bit addr has been completed */
          if (DeviceDataPrv->OutLenM != 0x00U) { /* Is any char. for transmitting? */
            DeviceDataPrv->OutLenM--;  /* Decrease number of chars for the transmit */
            I2C_PDD_WriteDataReg(I2C1_BASE_PTR, *(DeviceDataPrv->OutPtrM)++); /* Send character */
   11518:	6951      	ldr	r1, [r2, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:243
        DeviceDataPrv->SerFlag |= (ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Set the flag */
        ErrorMask |= LDD_I2C_MASTER_NACK; /* Set the Master Nack error mask */
      } else {
        if ((DeviceDataPrv->SerFlag & ADDR_COMPLETE) != 0x00U) { /* If 10-bit addr has been completed */
          if (DeviceDataPrv->OutLenM != 0x00U) { /* Is any char. for transmitting? */
            DeviceDataPrv->OutLenM--;  /* Decrease number of chars for the transmit */
   1151a:	3801      	subs	r0, #1
   1151c:	8210      	strh	r0, [r2, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:244
            I2C_PDD_WriteDataReg(I2C1_BASE_PTR, *(DeviceDataPrv->OutPtrM)++); /* Send character */
   1151e:	1c48      	adds	r0, r1, #1
   11520:	6150      	str	r0, [r2, #20]
   11522:	780a      	ldrb	r2, [r1, #0]
   11524:	711a      	strb	r2, [r3, #4]
   11526:	e7a4      	b.n	11472 <I2C_Interrupt+0x62>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:261
                I2C_PDD_RepeatStart(I2C1_BASE_PTR); /* Repeat start cycle generated */
                I2C_PDD_WriteDataReg(I2C1_BASE_PTR, (uint8_t)(DeviceDataPrv->SlaveAddrHigh | 0x01U)); /* Send slave address high byte*/
                DeviceDataPrv->SerFlag |= REP_ADDR_COMPLETE;
              }
            } else {
              DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* Clear flag "busy" */
   11528:	43b1      	bics	r1, r6
   1152a:	7011      	strb	r1, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:262
              if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
   1152c:	7891      	ldrb	r1, [r2, #2]
   1152e:	2901      	cmp	r1, #1
   11530:	d014      	beq.n	1155c <I2C_Interrupt+0x14c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:266
                I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_SLAVE_MODE); /* Switch device to slave mode (stop signal sent) */
                I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_RX_DIRECTION); /* Switch to Rx mode */
              }
              DeviceDataPrv->StatusFlag |= MASTER_BLOCK_SENT; /* Set data block sent flag */
   11532:	2301      	movs	r3, #1
   11534:	7851      	ldrb	r1, [r2, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:267
              I2C_OnMasterBlockSent(DeviceDataPrv->UserData); /* Invoke OnMasterBlockSent event */
   11536:	6a10      	ldr	r0, [r2, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:266
              DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* Clear flag "busy" */
              if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
                I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_SLAVE_MODE); /* Switch device to slave mode (stop signal sent) */
                I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_RX_DIRECTION); /* Switch to Rx mode */
              }
              DeviceDataPrv->StatusFlag |= MASTER_BLOCK_SENT; /* Set data block sent flag */
   11538:	430b      	orrs	r3, r1
   1153a:	7053      	strb	r3, [r2, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:267
              I2C_OnMasterBlockSent(DeviceDataPrv->UserData); /* Invoke OnMasterBlockSent event */
   1153c:	f7f1 fc24 	bl	2d88 <I2C_OnMasterBlockSent>
   11540:	e797      	b.n	11472 <I2C_Interrupt+0x62>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:256
                  I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_ENABLE); /* else transmit ACK enable */
                }
                I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_RX_DIRECTION); /* Switch to Rx mode */
                (void)I2C_PDD_ReadDataReg(I2C1_BASE_PTR); /* Dummy read character */
              } else {                 /* Repeated address has not been completed for 10-bit addressing mode */
                I2C_PDD_RepeatStart(I2C1_BASE_PTR); /* Repeat start cycle generated */
   11542:	7899      	ldrb	r1, [r3, #2]
   11544:	4321      	orrs	r1, r4
   11546:	b2c9      	uxtb	r1, r1
   11548:	7099      	strb	r1, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:257
                I2C_PDD_WriteDataReg(I2C1_BASE_PTR, (uint8_t)(DeviceDataPrv->SlaveAddrHigh | 0x01U)); /* Send slave address high byte*/
   1154a:	2101      	movs	r1, #1
   1154c:	79d0      	ldrb	r0, [r2, #7]
   1154e:	4301      	orrs	r1, r0
   11550:	b2c9      	uxtb	r1, r1
   11552:	7119      	strb	r1, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:258
                DeviceDataPrv->SerFlag |= REP_ADDR_COMPLETE;
   11554:	7813      	ldrb	r3, [r2, #0]
   11556:	431c      	orrs	r4, r3
   11558:	7014      	strb	r4, [r2, #0]
   1155a:	e78a      	b.n	11472 <I2C_Interrupt+0x62>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:263
              }
            } else {
              DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* Clear flag "busy" */
              if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
                I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_SLAVE_MODE); /* Switch device to slave mode (stop signal sent) */
   1155c:	7899      	ldrb	r1, [r3, #2]
   1155e:	43a1      	bics	r1, r4
   11560:	7099      	strb	r1, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:264
                I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_RX_DIRECTION); /* Switch to Rx mode */
   11562:	7899      	ldrb	r1, [r3, #2]
   11564:	43a9      	bics	r1, r5
   11566:	7099      	strb	r1, [r3, #2]
   11568:	e7e3      	b.n	11532 <I2C_Interrupt+0x122>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:249
            I2C_PDD_WriteDataReg(I2C1_BASE_PTR, *(DeviceDataPrv->OutPtrM)++); /* Send character */
          } else {
            if (DeviceDataPrv->InpLenM != 0x00U) { /* Is any char. for reception? */
              if ((DeviceDataPrv->SerFlag & REP_ADDR_COMPLETE) != 0x00U) { /* If repeated start and addr tx has been completed for 10-bit mode ?*/
                if (DeviceDataPrv->InpLenM == 0x01U) { /* If only one char to receive */
                  I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_DISABLE); /* then transmit ACK disable */
   1156a:	2208      	movs	r2, #8
   1156c:	7899      	ldrb	r1, [r3, #2]
   1156e:	430a      	orrs	r2, r1
   11570:	709a      	strb	r2, [r3, #2]
   11572:	e778      	b.n	11466 <I2C_Interrupt+0x56>
   11574:	40067000 	.word	0x40067000

00011578 <I2C_Init>:
I2C_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:331
**     @return
**                         - Pointer to the device data structure. 
*/
/* ===================================================================*/
LDD_TDeviceData* I2C_Init(LDD_TUserData *UserDataPtr)
{
   11578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:337
  /* Allocate HAL device structure */
  I2C_TDeviceData *DeviceDataPrv;
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;

  DeviceDataPrv->UserData = UserDataPtr; /* Store the RTOS device structure */
   1157a:	4c27      	ldr	r4, [pc, #156]	; (11618 <I2C_Init+0xa0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:360
  /* I2C1_FLT: SHEN=0,STOPF=1,SSIE=0,STARTF=1,FLT=0 */
  I2C1_FLT = (I2C_FLT_STOPF_MASK | I2C_FLT_STARTF_MASK | I2C_FLT_FLT(0x00)); /* Clear bus status interrupt flags */
  /* I2C1_S: TCF=0,IAAS=0,BUSY=0,ARBL=0,RAM=0,SRW=0,IICIF=1,RXAK=0 */
  I2C1_S = I2C_S_IICIF_MASK;           /* Clear interrupt flag */
  /* PORTC_PCR2: ISF=0,MUX=2 */
  PORTC_PCR2 = (uint32_t)((PORTC_PCR2 & (uint32_t)~(uint32_t)(
   1157c:	4e27      	ldr	r6, [pc, #156]	; (1161c <I2C_Init+0xa4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:337
  /* Allocate HAL device structure */
  I2C_TDeviceData *DeviceDataPrv;
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;

  DeviceDataPrv->UserData = UserDataPtr; /* Store the RTOS device structure */
   1157e:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:342

  /* Allocate interrupt vector */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_I2C1);
   11580:	2019      	movs	r0, #25
   11582:	f7fe fd7d 	bl	10080 <_int_get_isr_data>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:343
  DeviceDataPrv->SavedISRSettings.isrFunction = _int_install_isr(LDD_ivIndex_INT_I2C1, I2C_Interrupt, DeviceDataPrv);
   11586:	1c22      	adds	r2, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:342
  DeviceDataPrv->UserData = UserDataPtr; /* Store the RTOS device structure */

  /* Allocate interrupt vector */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_I2C1);
   11588:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:343
  DeviceDataPrv->SavedISRSettings.isrFunction = _int_install_isr(LDD_ivIndex_INT_I2C1, I2C_Interrupt, DeviceDataPrv);
   1158a:	4925      	ldr	r1, [pc, #148]	; (11620 <I2C_Init+0xa8>)
   1158c:	2019      	movs	r0, #25
   1158e:	f7fe fd97 	bl	100c0 <_int_install_isr>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:344
  DeviceDataPrv->SerFlag = ADDR_7;     /* Reset all flags start with 7-bit address mode */
   11592:	2320      	movs	r3, #32
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:343

  /* Allocate interrupt vector */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_I2C1);
  DeviceDataPrv->SavedISRSettings.isrFunction = _int_install_isr(LDD_ivIndex_INT_I2C1, I2C_Interrupt, DeviceDataPrv);
   11594:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:344
  DeviceDataPrv->SerFlag = ADDR_7;     /* Reset all flags start with 7-bit address mode */
   11596:	7023      	strb	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:347
  DeviceDataPrv->SlaveAddr = 0x3CU;    /* Set variable for slave address */
  DeviceDataPrv->SendStop = LDD_I2C_SEND_STOP; /* Set variable for sending stop condition (for master mode) */
  DeviceDataPrv->InpLenM = 0x00U;      /* Set zero counter of data of reception */
   11598:	2000      	movs	r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:345
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_I2C1);
  DeviceDataPrv->SavedISRSettings.isrFunction = _int_install_isr(LDD_ivIndex_INT_I2C1, I2C_Interrupt, DeviceDataPrv);
  DeviceDataPrv->SerFlag = ADDR_7;     /* Reset all flags start with 7-bit address mode */
  DeviceDataPrv->SlaveAddr = 0x3CU;    /* Set variable for slave address */
   1159a:	331c      	adds	r3, #28
   1159c:	71a3      	strb	r3, [r4, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:346
  DeviceDataPrv->SendStop = LDD_I2C_SEND_STOP; /* Set variable for sending stop condition (for master mode) */
   1159e:	3b3b      	subs	r3, #59	; 0x3b
   115a0:	70a3      	strb	r3, [r4, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:347
  DeviceDataPrv->InpLenM = 0x00U;      /* Set zero counter of data of reception */
   115a2:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:352
  DeviceDataPrv->OutLenM = 0x00U;      /* Set zero counter of data of transmission */
  DeviceDataPrv->StatusFlag = 0x00U;   /* Clear data block transfer complete flags */
  DeviceDataPrv->ErrorMask = 0x00U;    /* Clear variable for errors mask value */
  /* SIM_SCGC4: I2C1=1 */
  SIM_SCGC4 |= SIM_SCGC4_I2C1_MASK;
   115a4:	491f      	ldr	r1, [pc, #124]	; (11624 <I2C_Init+0xac>)
   115a6:	4a20      	ldr	r2, [pc, #128]	; (11628 <I2C_Init+0xb0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:349
  DeviceDataPrv->SerFlag = ADDR_7;     /* Reset all flags start with 7-bit address mode */
  DeviceDataPrv->SlaveAddr = 0x3CU;    /* Set variable for slave address */
  DeviceDataPrv->SendStop = LDD_I2C_SEND_STOP; /* Set variable for sending stop condition (for master mode) */
  DeviceDataPrv->InpLenM = 0x00U;      /* Set zero counter of data of reception */
  DeviceDataPrv->OutLenM = 0x00U;      /* Set zero counter of data of transmission */
  DeviceDataPrv->StatusFlag = 0x00U;   /* Clear data block transfer complete flags */
   115a8:	7060      	strb	r0, [r4, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:352
  DeviceDataPrv->ErrorMask = 0x00U;    /* Clear variable for errors mask value */
  /* SIM_SCGC4: I2C1=1 */
  SIM_SCGC4 |= SIM_SCGC4_I2C1_MASK;
   115aa:	588d      	ldr	r5, [r1, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:347
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_I2C1);
  DeviceDataPrv->SavedISRSettings.isrFunction = _int_install_isr(LDD_ivIndex_INT_I2C1, I2C_Interrupt, DeviceDataPrv);
  DeviceDataPrv->SerFlag = ADDR_7;     /* Reset all flags start with 7-bit address mode */
  DeviceDataPrv->SlaveAddr = 0x3CU;    /* Set variable for slave address */
  DeviceDataPrv->SendStop = LDD_I2C_SEND_STOP; /* Set variable for sending stop condition (for master mode) */
  DeviceDataPrv->InpLenM = 0x00U;      /* Set zero counter of data of reception */
   115ac:	8123      	strh	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:348
  DeviceDataPrv->OutLenM = 0x00U;      /* Set zero counter of data of transmission */
   115ae:	8223      	strh	r3, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:350
  DeviceDataPrv->StatusFlag = 0x00U;   /* Clear data block transfer complete flags */
  DeviceDataPrv->ErrorMask = 0x00U;    /* Clear variable for errors mask value */
   115b0:	80a3      	strh	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:352
  /* SIM_SCGC4: I2C1=1 */
  SIM_SCGC4 |= SIM_SCGC4_I2C1_MASK;
   115b2:	3380      	adds	r3, #128	; 0x80
   115b4:	432b      	orrs	r3, r5
   115b6:	508b      	str	r3, [r1, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:356
  /* I2C1_C1: IICEN=0,IICIE=0,MST=0,TX=0,TXAK=0,RSTA=0,WUEN=0,DMAEN=0 */
  I2C1_C1 = 0x00U;                     /* Clear control register */
  /* I2C1_FLT: SHEN=0,STOPF=1,SSIE=0,STARTF=1,FLT=0 */
  I2C1_FLT = (I2C_FLT_STOPF_MASK | I2C_FLT_STARTF_MASK | I2C_FLT_FLT(0x00)); /* Clear bus status interrupt flags */
   115b8:	2250      	movs	r2, #80	; 0x50
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:360
  /* I2C1_S: TCF=0,IAAS=0,BUSY=0,ARBL=0,RAM=0,SRW=0,IICIF=1,RXAK=0 */
  I2C1_S = I2C_S_IICIF_MASK;           /* Clear interrupt flag */
  /* PORTC_PCR2: ISF=0,MUX=2 */
  PORTC_PCR2 = (uint32_t)((PORTC_PCR2 & (uint32_t)~(uint32_t)(
   115ba:	2580      	movs	r5, #128	; 0x80
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:354
  DeviceDataPrv->StatusFlag = 0x00U;   /* Clear data block transfer complete flags */
  DeviceDataPrv->ErrorMask = 0x00U;    /* Clear variable for errors mask value */
  /* SIM_SCGC4: I2C1=1 */
  SIM_SCGC4 |= SIM_SCGC4_I2C1_MASK;
  /* I2C1_C1: IICEN=0,IICIE=0,MST=0,TX=0,TXAK=0,RSTA=0,WUEN=0,DMAEN=0 */
  I2C1_C1 = 0x00U;                     /* Clear control register */
   115bc:	4b1b      	ldr	r3, [pc, #108]	; (1162c <I2C_Init+0xb4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:360
  /* I2C1_FLT: SHEN=0,STOPF=1,SSIE=0,STARTF=1,FLT=0 */
  I2C1_FLT = (I2C_FLT_STOPF_MASK | I2C_FLT_STARTF_MASK | I2C_FLT_FLT(0x00)); /* Clear bus status interrupt flags */
  /* I2C1_S: TCF=0,IAAS=0,BUSY=0,ARBL=0,RAM=0,SRW=0,IICIF=1,RXAK=0 */
  I2C1_S = I2C_S_IICIF_MASK;           /* Clear interrupt flag */
  /* PORTC_PCR2: ISF=0,MUX=2 */
  PORTC_PCR2 = (uint32_t)((PORTC_PCR2 & (uint32_t)~(uint32_t)(
   115be:	00ad      	lsls	r5, r5, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:354
  DeviceDataPrv->StatusFlag = 0x00U;   /* Clear data block transfer complete flags */
  DeviceDataPrv->ErrorMask = 0x00U;    /* Clear variable for errors mask value */
  /* SIM_SCGC4: I2C1=1 */
  SIM_SCGC4 |= SIM_SCGC4_I2C1_MASK;
  /* I2C1_C1: IICEN=0,IICIE=0,MST=0,TX=0,TXAK=0,RSTA=0,WUEN=0,DMAEN=0 */
  I2C1_C1 = 0x00U;                     /* Clear control register */
   115c0:	7098      	strb	r0, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:356
  /* I2C1_FLT: SHEN=0,STOPF=1,SSIE=0,STARTF=1,FLT=0 */
  I2C1_FLT = (I2C_FLT_STOPF_MASK | I2C_FLT_STARTF_MASK | I2C_FLT_FLT(0x00)); /* Clear bus status interrupt flags */
   115c2:	719a      	strb	r2, [r3, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:358
  /* I2C1_S: TCF=0,IAAS=0,BUSY=0,ARBL=0,RAM=0,SRW=0,IICIF=1,RXAK=0 */
  I2C1_S = I2C_S_IICIF_MASK;           /* Clear interrupt flag */
   115c4:	3a4e      	subs	r2, #78	; 0x4e
   115c6:	70da      	strb	r2, [r3, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:360
  /* PORTC_PCR2: ISF=0,MUX=2 */
  PORTC_PCR2 = (uint32_t)((PORTC_PCR2 & (uint32_t)~(uint32_t)(
   115c8:	68b1      	ldr	r1, [r6, #8]
   115ca:	4a19      	ldr	r2, [pc, #100]	; (11630 <I2C_Init+0xb8>)
   115cc:	4011      	ands	r1, r2
   115ce:	4329      	orrs	r1, r5
   115d0:	60b1      	str	r1, [r6, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:367
                PORT_PCR_MUX(0x05)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x02)
               ));
  /* PORTC_PCR1: ISF=0,MUX=2 */
  PORTC_PCR1 = (uint32_t)((PORTC_PCR1 & (uint32_t)~(uint32_t)(
   115d2:	6871      	ldr	r1, [r6, #4]
   115d4:	400a      	ands	r2, r1
   115d6:	432a      	orrs	r2, r5
   115d8:	6072      	str	r2, [r6, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:374
                PORT_PCR_MUX(0x05)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x02)
               ));
  /* NVIC_IPR2: PRI_9=0x80 */
  NVIC_IPR2 = (uint32_t)((NVIC_IPR2 & (uint32_t)~(uint32_t)(
   115da:	26c2      	movs	r6, #194	; 0xc2
   115dc:	4915      	ldr	r1, [pc, #84]	; (11634 <I2C_Init+0xbc>)
   115de:	00b6      	lsls	r6, r6, #2
   115e0:	598f      	ldr	r7, [r1, r6]
   115e2:	4a15      	ldr	r2, [pc, #84]	; (11638 <I2C_Init+0xc0>)
   115e4:	403a      	ands	r2, r7
   115e6:	2780      	movs	r7, #128	; 0x80
   115e8:	023f      	lsls	r7, r7, #8
   115ea:	433a      	orrs	r2, r7
   115ec:	518a      	str	r2, [r1, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:380
               NVIC_IP_PRI_9(0x7F)
              )) | (uint32_t)(
               NVIC_IP_PRI_9(0x80)
              ));
  /* NVIC_ISER: SETENA|=0x0200 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x0200);
   115ee:	680a      	ldr	r2, [r1, #0]
   115f0:	4315      	orrs	r5, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:386
  /* I2C1_C2: GCAEN=0,ADEXT=0,HDRS=0,SBRC=0,RMEN=0,AD=0 */
  I2C1_C2 = I2C_C2_AD(0x00);
  /* I2C1_FLT: SHEN=0,STOPF=0,SSIE=0,STARTF=0,FLT=0 */
  I2C1_FLT = I2C_FLT_FLT(0x00);        /* Set glitch filter register */
  /* I2C1_SMB: FACK=0,ALERTEN=0,SIICAEN=0,TCKSEL=0,SLTF=1,SHTF1=0,SHTF2=0,SHTF2IE=0 */
  I2C1_SMB = I2C_SMB_SLTF_MASK;
   115f2:	2208      	movs	r2, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:380
               NVIC_IP_PRI_9(0x7F)
              )) | (uint32_t)(
               NVIC_IP_PRI_9(0x80)
              ));
  /* NVIC_ISER: SETENA|=0x0200 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x0200);
   115f4:	600d      	str	r5, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:382
  /* I2C1_C2: GCAEN=0,ADEXT=0,HDRS=0,SBRC=0,RMEN=0,AD=0 */
  I2C1_C2 = I2C_C2_AD(0x00);
   115f6:	7158      	strb	r0, [r3, #5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:384
  /* I2C1_FLT: SHEN=0,STOPF=0,SSIE=0,STARTF=0,FLT=0 */
  I2C1_FLT = I2C_FLT_FLT(0x00);        /* Set glitch filter register */
   115f8:	7198      	strb	r0, [r3, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:386
  /* I2C1_SMB: FACK=0,ALERTEN=0,SIICAEN=0,TCKSEL=0,SLTF=1,SHTF1=0,SHTF2=0,SHTF2IE=0 */
  I2C1_SMB = I2C_SMB_SLTF_MASK;
   115fa:	721a      	strb	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:388
  /* I2C1_F: MULT=1,ICR=0x12 */
  I2C1_F = (I2C_F_MULT(0x01) | I2C_F_ICR(0x12)); /* Set prescaler bits */
   115fc:	324a      	adds	r2, #74	; 0x4a
   115fe:	705a      	strb	r2, [r3, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:389
  I2C_PDD_EnableDevice(I2C1_BASE_PTR, PDD_ENABLE); /* Enable device */
   11600:	7899      	ldrb	r1, [r3, #2]
   11602:	322e      	adds	r2, #46	; 0x2e
   11604:	430a      	orrs	r2, r1
   11606:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:390
  I2C_PDD_EnableInterrupt(I2C1_BASE_PTR); /* Enable interrupt */
   11608:	2240      	movs	r2, #64	; 0x40
   1160a:	7899      	ldrb	r1, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:394
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_I2C_ID,DeviceDataPrv);
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the data data structure */
}
   1160c:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:390
  /* I2C1_SMB: FACK=0,ALERTEN=0,SIICAEN=0,TCKSEL=0,SLTF=1,SHTF1=0,SHTF2=0,SHTF2IE=0 */
  I2C1_SMB = I2C_SMB_SLTF_MASK;
  /* I2C1_F: MULT=1,ICR=0x12 */
  I2C1_F = (I2C_F_MULT(0x01) | I2C_F_ICR(0x12)); /* Set prescaler bits */
  I2C_PDD_EnableDevice(I2C1_BASE_PTR, PDD_ENABLE); /* Enable device */
  I2C_PDD_EnableInterrupt(I2C1_BASE_PTR); /* Enable interrupt */
   1160e:	430a      	orrs	r2, r1
   11610:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:392
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_I2C_ID,DeviceDataPrv);
   11612:	4b0a      	ldr	r3, [pc, #40]	; (1163c <I2C_Init+0xc4>)
   11614:	619c      	str	r4, [r3, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:394
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the data data structure */
}
   11616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11618:	1fffe2a4 	.word	0x1fffe2a4
   1161c:	4004b000 	.word	0x4004b000
   11620:	00011411 	.word	0x00011411
   11624:	40047000 	.word	0x40047000
   11628:	00001034 	.word	0x00001034
   1162c:	40067000 	.word	0x40067000
   11630:	fefff8ff 	.word	0xfefff8ff
   11634:	e000e100 	.word	0xe000e100
   11638:	ffff00ff 	.word	0xffff00ff
   1163c:	1fffe2d8 	.word	0x1fffe2d8

00011640 <I2C_MasterSendBlock>:
I2C_MasterSendBlock():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:473
**                           the active clock configuration
**                           ERR_BUSY - The I2C device is now running
*/
/* ===================================================================*/
LDD_TError I2C_MasterSendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, LDD_I2C_TSize Size, LDD_I2C_TSendStop SendStop)
{
   11640:	b5f0      	push	{r4, r5, r6, r7, lr}
   11642:	4647      	mov	r7, r8
   11644:	1c05      	adds	r5, r0, #0
   11646:	b480      	push	{r7}
   11648:	4688      	mov	r8, r1
   1164a:	1c16      	adds	r6, r2, #0
   1164c:	1c1f      	adds	r7, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:477
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  if (Size == 0x00U) {                 /* Test variable Size on zero */
    return ERR_OK;                     /* If zero then OK */
   1164e:	2400      	movs	r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:476
/* ===================================================================*/
LDD_TError I2C_MasterSendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, LDD_I2C_TSize Size, LDD_I2C_TSendStop SendStop)
{
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  if (Size == 0x00U) {                 /* Test variable Size on zero */
   11650:	2a00      	cmp	r2, #0
   11652:	d006      	beq.n	11662 <I2C_MasterSendBlock+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:479
    return ERR_OK;                     /* If zero then OK */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
   11654:	7883      	ldrb	r3, [r0, #2]
   11656:	2b01      	cmp	r3, #1
   11658:	d007      	beq.n	1166a <I2C_MasterSendBlock+0x2a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:486
       ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
       (DeviceDataPrv->OutLenM != 0x00U))  {
      return ERR_BUSY;                 /* If yes then error */
    }
  } else {
    if (((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || /* Is the bus busy? */  \
   1165a:	7803      	ldrb	r3, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:483
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
       ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
       (DeviceDataPrv->OutLenM != 0x00U))  {
      return ERR_BUSY;                 /* If yes then error */
   1165c:	2408      	movs	r4, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:486
    }
  } else {
    if (((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || /* Is the bus busy? */  \
   1165e:	07db      	lsls	r3, r3, #31
   11660:	d50b      	bpl.n	1167a <I2C_MasterSendBlock+0x3a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:520
    }
  }
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
  return ERR_OK;                       /* OK */
}
   11662:	1c20      	adds	r0, r4, #0
   11664:	bc04      	pop	{r2}
   11666:	4690      	mov	r8, r2
   11668:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:480

  if (Size == 0x00U) {                 /* Test variable Size on zero */
    return ERR_OK;                     /* If zero then OK */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
   1166a:	4a23      	ldr	r2, [pc, #140]	; (116f8 <I2C_MasterSendBlock+0xb8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:483
       ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
       (DeviceDataPrv->OutLenM != 0x00U))  {
      return ERR_BUSY;                 /* If yes then error */
   1166c:	3408      	adds	r4, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:480

  if (Size == 0x00U) {                 /* Test variable Size on zero */
    return ERR_OK;                     /* If zero then OK */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
   1166e:	78d2      	ldrb	r2, [r2, #3]
   11670:	0692      	lsls	r2, r2, #26
   11672:	d4f6      	bmi.n	11662 <I2C_MasterSendBlock+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:481 (discriminator 1)
       ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
   11674:	7802      	ldrb	r2, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:480 (discriminator 1)

  if (Size == 0x00U) {                 /* Test variable Size on zero */
    return ERR_OK;                     /* If zero then OK */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
   11676:	4213      	tst	r3, r2
   11678:	d1f3      	bne.n	11662 <I2C_MasterSendBlock+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:482
       ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
       (DeviceDataPrv->OutLenM != 0x00U))  {
   1167a:	8a2c      	ldrh	r4, [r5, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:481
  if (Size == 0x00U) {                 /* Test variable Size on zero */
    return ERR_OK;                     /* If zero then OK */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
       ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
   1167c:	2c00      	cmp	r4, #0
   1167e:	d001      	beq.n	11684 <I2C_MasterSendBlock+0x44>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:483
       (DeviceDataPrv->OutLenM != 0x00U))  {
      return ERR_BUSY;                 /* If yes then error */
   11680:	2408      	movs	r4, #8
   11682:	e7ee      	b.n	11662 <I2C_MasterSendBlock+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:492
      (DeviceDataPrv->OutLenM != 0x00U))  {
      return ERR_BUSY;                 /* If yes then error */
    }
  }
  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
   11684:	f7fe fce2 	bl	1004c <_int_disable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:493
  DeviceDataPrv->SerFlag |= MASTER_IN_PROGRES; /* Set flag "busy" */
   11688:	2301      	movs	r3, #1
   1168a:	782a      	ldrb	r2, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:495
  DeviceDataPrv->OutPtrM = (uint8_t *)BufferPtr; /* Save pointer to data for transmitting */
  DeviceDataPrv->OutLenM = Size;       /* Set the counter of output bufer's content */
   1168c:	822e      	strh	r6, [r5, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:493
      return ERR_BUSY;                 /* If yes then error */
    }
  }
  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
  DeviceDataPrv->SerFlag |= MASTER_IN_PROGRES; /* Set flag "busy" */
   1168e:	4313      	orrs	r3, r2
   11690:	702b      	strb	r3, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:494
  DeviceDataPrv->OutPtrM = (uint8_t *)BufferPtr; /* Save pointer to data for transmitting */
   11692:	4643      	mov	r3, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:497
  DeviceDataPrv->OutLenM = Size;       /* Set the counter of output bufer's content */
  DeviceDataPrv->SendStop = SendStop;  /* Set generating stop condition */
  I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_TX_DIRECTION); /* Set TX mode */
   11694:	2210      	movs	r2, #16
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:494
    }
  }
  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
  DeviceDataPrv->SerFlag |= MASTER_IN_PROGRES; /* Set flag "busy" */
  DeviceDataPrv->OutPtrM = (uint8_t *)BufferPtr; /* Save pointer to data for transmitting */
   11696:	616b      	str	r3, [r5, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:497
  DeviceDataPrv->OutLenM = Size;       /* Set the counter of output bufer's content */
  DeviceDataPrv->SendStop = SendStop;  /* Set generating stop condition */
  I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_TX_DIRECTION); /* Set TX mode */
   11698:	4b17      	ldr	r3, [pc, #92]	; (116f8 <I2C_MasterSendBlock+0xb8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:496
  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
  DeviceDataPrv->SerFlag |= MASTER_IN_PROGRES; /* Set flag "busy" */
  DeviceDataPrv->OutPtrM = (uint8_t *)BufferPtr; /* Save pointer to data for transmitting */
  DeviceDataPrv->OutLenM = Size;       /* Set the counter of output bufer's content */
  DeviceDataPrv->SendStop = SendStop;  /* Set generating stop condition */
   1169a:	70af      	strb	r7, [r5, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:497
  I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_TX_DIRECTION); /* Set TX mode */
   1169c:	7899      	ldrb	r1, [r3, #2]
   1169e:	430a      	orrs	r2, r1
   116a0:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:498
  if (I2C_PDD_GetMasterMode(I2C1_BASE_PTR) == I2C_PDD_MASTER_MODE) { /* Is device in master mode? */
   116a2:	789a      	ldrb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:499
    I2C_PDD_RepeatStart(I2C1_BASE_PTR); /* If yes then repeat start cycle generated */
   116a4:	7899      	ldrb	r1, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:498
  DeviceDataPrv->SerFlag |= MASTER_IN_PROGRES; /* Set flag "busy" */
  DeviceDataPrv->OutPtrM = (uint8_t *)BufferPtr; /* Save pointer to data for transmitting */
  DeviceDataPrv->OutLenM = Size;       /* Set the counter of output bufer's content */
  DeviceDataPrv->SendStop = SendStop;  /* Set generating stop condition */
  I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_TX_DIRECTION); /* Set TX mode */
  if (I2C_PDD_GetMasterMode(I2C1_BASE_PTR) == I2C_PDD_MASTER_MODE) { /* Is device in master mode? */
   116a6:	0692      	lsls	r2, r2, #26
   116a8:	d40f      	bmi.n	116ca <I2C_MasterSendBlock+0x8a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:501
    I2C_PDD_RepeatStart(I2C1_BASE_PTR); /* If yes then repeat start cycle generated */
  } else {
    I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_MASTER_MODE); /* If no then start signal generated */
   116aa:	2220      	movs	r2, #32
   116ac:	430a      	orrs	r2, r1
   116ae:	b2d2      	uxtb	r2, r2
   116b0:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:503
  }
  if ((DeviceDataPrv->SerFlag & ADDR_7) != 0x00U) { /* Is 7-bit addressing set ? */
   116b2:	782b      	ldrb	r3, [r5, #0]
   116b4:	069a      	lsls	r2, r3, #26
   116b6:	d50c      	bpl.n	116d2 <I2C_MasterSendBlock+0x92>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:504
    DeviceDataPrv->SerFlag |= (ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Only one byte of address will be sent 7-bit address mode*/
   116b8:	2206      	movs	r2, #6
   116ba:	4313      	orrs	r3, r2
   116bc:	702b      	strb	r3, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:505
    I2C_PDD_WriteDataReg(I2C1_BASE_PTR, DeviceDataPrv->SlaveAddr); /* Send slave address */
   116be:	79aa      	ldrb	r2, [r5, #6]
   116c0:	4b0d      	ldr	r3, [pc, #52]	; (116f8 <I2C_MasterSendBlock+0xb8>)
   116c2:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:518
        I2C_PDD_WriteDataReg(I2C1_BASE_PTR, 0x00U); /* Send general call address */
      }
    }
  }
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
   116c4:	f7fe fcce 	bl	10064 <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:519
  return ERR_OK;                       /* OK */
   116c8:	e7cb      	b.n	11662 <I2C_MasterSendBlock+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:499
  DeviceDataPrv->OutPtrM = (uint8_t *)BufferPtr; /* Save pointer to data for transmitting */
  DeviceDataPrv->OutLenM = Size;       /* Set the counter of output bufer's content */
  DeviceDataPrv->SendStop = SendStop;  /* Set generating stop condition */
  I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_TX_DIRECTION); /* Set TX mode */
  if (I2C_PDD_GetMasterMode(I2C1_BASE_PTR) == I2C_PDD_MASTER_MODE) { /* Is device in master mode? */
    I2C_PDD_RepeatStart(I2C1_BASE_PTR); /* If yes then repeat start cycle generated */
   116ca:	2204      	movs	r2, #4
   116cc:	430a      	orrs	r2, r1
   116ce:	709a      	strb	r2, [r3, #2]
   116d0:	e7ef      	b.n	116b2 <I2C_MasterSendBlock+0x72>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:507
  }
  if ((DeviceDataPrv->SerFlag & ADDR_7) != 0x00U) { /* Is 7-bit addressing set ? */
    DeviceDataPrv->SerFlag |= (ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Only one byte of address will be sent 7-bit address mode*/
    I2C_PDD_WriteDataReg(I2C1_BASE_PTR, DeviceDataPrv->SlaveAddr); /* Send slave address */
  } else {
    if ((DeviceDataPrv->SerFlag & ADDR_10) != 0x00U) { /* Is 10-bit addressing set ? */
   116d2:	2210      	movs	r2, #16
   116d4:	401a      	ands	r2, r3
   116d6:	d006      	beq.n	116e6 <I2C_MasterSendBlock+0xa6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:508
      DeviceDataPrv->SerFlag &= (uint8_t)~(ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Second byte of address will be sent later */
   116d8:	2206      	movs	r2, #6
   116da:	4393      	bics	r3, r2
   116dc:	702b      	strb	r3, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:509
      I2C_PDD_WriteDataReg(I2C1_BASE_PTR, DeviceDataPrv->SlaveAddrHigh); /* Send slave address - high byte */
   116de:	79ea      	ldrb	r2, [r5, #7]
   116e0:	4b05      	ldr	r3, [pc, #20]	; (116f8 <I2C_MasterSendBlock+0xb8>)
   116e2:	711a      	strb	r2, [r3, #4]
   116e4:	e7ee      	b.n	116c4 <I2C_MasterSendBlock+0x84>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:511
    } else {
      if ((DeviceDataPrv->SerFlag & GENERAL_CALL) != 0x00U) { /* Is general call command required ? */
   116e6:	0719      	lsls	r1, r3, #28
   116e8:	d5ec      	bpl.n	116c4 <I2C_MasterSendBlock+0x84>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:512
        DeviceDataPrv->SerFlag |= ADDR_COMPLETE; /* Only one byte of address will be sent in general call address mode*/
   116ea:	2102      	movs	r1, #2
   116ec:	430b      	orrs	r3, r1
   116ee:	702b      	strb	r3, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:513
        I2C_PDD_WriteDataReg(I2C1_BASE_PTR, 0x00U); /* Send general call address */
   116f0:	4b01      	ldr	r3, [pc, #4]	; (116f8 <I2C_MasterSendBlock+0xb8>)
   116f2:	711a      	strb	r2, [r3, #4]
   116f4:	e7e6      	b.n	116c4 <I2C_MasterSendBlock+0x84>
   116f6:	46c0      	nop			; (mov r8, r8)
   116f8:	40067000 	.word	0x40067000

000116fc <I2C_MasterReceiveBlock>:
I2C_MasterReceiveBlock():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:605
**                           ERR_PARAM_MODE -  Stop condition isn't
**                           possible generated on end transmission.
*/
/* ===================================================================*/
LDD_TError I2C_MasterReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, LDD_I2C_TSize Size, LDD_I2C_TSendStop SendStop)
{
   116fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   116fe:	4647      	mov	r7, r8
   11700:	1c15      	adds	r5, r2, #0
   11702:	b480      	push	{r7}
   11704:	4688      	mov	r8, r1
   11706:	1c07      	adds	r7, r0, #0
   11708:	1c1e      	adds	r6, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:609
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  if (Size == 0x00U) {                 /* Test variable Size on zero */
    return ERR_OK;                     /* If zero then OK */
   1170a:	2400      	movs	r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:608
/* ===================================================================*/
LDD_TError I2C_MasterReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, LDD_I2C_TSize Size, LDD_I2C_TSendStop SendStop)
{
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  if (Size == 0x00U) {                 /* Test variable Size on zero */
   1170c:	2a00      	cmp	r2, #0
   1170e:	d002      	beq.n	11716 <I2C_MasterReceiveBlock+0x1a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:612
    return ERR_OK;                     /* If zero then OK */
  }
  if (SendStop == LDD_I2C_NO_SEND_STOP) { /* Test variable SendStop on supported value */
    return ERR_PARAM_MODE;             /* If not supported value then error */
   11710:	3481      	adds	r4, #129	; 0x81
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:611
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  if (Size == 0x00U) {                 /* Test variable Size on zero */
    return ERR_OK;                     /* If zero then OK */
  }
  if (SendStop == LDD_I2C_NO_SEND_STOP) { /* Test variable SendStop on supported value */
   11712:	2b00      	cmp	r3, #0
   11714:	d103      	bne.n	1171e <I2C_MasterReceiveBlock+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:653
    }
  }
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
  return ERR_OK;                       /* OK */
}
   11716:	1c20      	adds	r0, r4, #0
   11718:	bc04      	pop	{r2}
   1171a:	4690      	mov	r8, r2
   1171c:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:614
    return ERR_OK;                     /* If zero then OK */
  }
  if (SendStop == LDD_I2C_NO_SEND_STOP) { /* Test variable SendStop on supported value */
    return ERR_PARAM_MODE;             /* If not supported value then error */
  }
  if ((DeviceDataPrv->SerFlag & GENERAL_CALL) != 0x00U) { /* Is the general call flag set (SelectSlaveDevice - address type is general call) ? */
   1171e:	7803      	ldrb	r3, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:615
    return ERR_NOTAVAIL;               /* It is not possible to receive data - Call SelectSlaveDevice method */
   11720:	3c78      	subs	r4, #120	; 0x78
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:614
    return ERR_OK;                     /* If zero then OK */
  }
  if (SendStop == LDD_I2C_NO_SEND_STOP) { /* Test variable SendStop on supported value */
    return ERR_PARAM_MODE;             /* If not supported value then error */
  }
  if ((DeviceDataPrv->SerFlag & GENERAL_CALL) != 0x00U) { /* Is the general call flag set (SelectSlaveDevice - address type is general call) ? */
   11722:	071a      	lsls	r2, r3, #28
   11724:	d4f7      	bmi.n	11716 <I2C_MasterReceiveBlock+0x1a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:617
    return ERR_NOTAVAIL;               /* It is not possible to receive data - Call SelectSlaveDevice method */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
   11726:	7882      	ldrb	r2, [r0, #2]
   11728:	2a01      	cmp	r2, #1
   1172a:	d007      	beq.n	1173c <I2C_MasterReceiveBlock+0x40>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:621
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
      ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
      (DeviceDataPrv->InpLenM != 0x00U)) {
      return ERR_BUSY;                 /* If yes then error */
   1172c:	2408      	movs	r4, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:624
    }
  } else {
    if(((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || /* Is the bus busy? */  \
   1172e:	07db      	lsls	r3, r3, #31
   11730:	d4f1      	bmi.n	11716 <I2C_MasterReceiveBlock+0x1a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:620
    return ERR_NOTAVAIL;               /* It is not possible to receive data - Call SelectSlaveDevice method */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
      ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
      (DeviceDataPrv->InpLenM != 0x00U)) {
   11732:	893c      	ldrh	r4, [r7, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:619
  if ((DeviceDataPrv->SerFlag & GENERAL_CALL) != 0x00U) { /* Is the general call flag set (SelectSlaveDevice - address type is general call) ? */
    return ERR_NOTAVAIL;               /* It is not possible to receive data - Call SelectSlaveDevice method */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
      ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
   11734:	2c00      	cmp	r4, #0
   11736:	d009      	beq.n	1174c <I2C_MasterReceiveBlock+0x50>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:621
      (DeviceDataPrv->InpLenM != 0x00U)) {
      return ERR_BUSY;                 /* If yes then error */
   11738:	2408      	movs	r4, #8
   1173a:	e7ec      	b.n	11716 <I2C_MasterReceiveBlock+0x1a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:618
  }
  if ((DeviceDataPrv->SerFlag & GENERAL_CALL) != 0x00U) { /* Is the general call flag set (SelectSlaveDevice - address type is general call) ? */
    return ERR_NOTAVAIL;               /* It is not possible to receive data - Call SelectSlaveDevice method */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
   1173c:	491c      	ldr	r1, [pc, #112]	; (117b0 <I2C_MasterReceiveBlock+0xb4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:621
      ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
      (DeviceDataPrv->InpLenM != 0x00U)) {
      return ERR_BUSY;                 /* If yes then error */
   1173e:	3c01      	subs	r4, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:618
  }
  if ((DeviceDataPrv->SerFlag & GENERAL_CALL) != 0x00U) { /* Is the general call flag set (SelectSlaveDevice - address type is general call) ? */
    return ERR_NOTAVAIL;               /* It is not possible to receive data - Call SelectSlaveDevice method */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
   11740:	78c9      	ldrb	r1, [r1, #3]
   11742:	0689      	lsls	r1, r1, #26
   11744:	d4e7      	bmi.n	11716 <I2C_MasterReceiveBlock+0x1a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:618 (discriminator 1)
   11746:	421a      	tst	r2, r3
   11748:	d1e5      	bne.n	11716 <I2C_MasterReceiveBlock+0x1a>
   1174a:	e7f2      	b.n	11732 <I2C_MasterReceiveBlock+0x36>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:630
      (DeviceDataPrv->InpLenM != 0x00U)) {
      return ERR_BUSY;               /* If yes then error */
    }
  }
  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
   1174c:	f7fe fc7e 	bl	1004c <_int_disable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:631
  DeviceDataPrv->SerFlag |= MASTER_IN_PROGRES; /* Set flag "busy" */
   11750:	2301      	movs	r3, #1
   11752:	783a      	ldrb	r2, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:633
  DeviceDataPrv->InpPtrM = (uint8_t *)BufferPtr; /* Save pointer to data for reception */
  DeviceDataPrv->InpLenM = Size;       /* Set the counter of input bufer's content */
   11754:	813d      	strh	r5, [r7, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:631
      return ERR_BUSY;               /* If yes then error */
    }
  }
  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
  DeviceDataPrv->SerFlag |= MASTER_IN_PROGRES; /* Set flag "busy" */
   11756:	4313      	orrs	r3, r2
   11758:	703b      	strb	r3, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:632
  DeviceDataPrv->InpPtrM = (uint8_t *)BufferPtr; /* Save pointer to data for reception */
   1175a:	4643      	mov	r3, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:635
  DeviceDataPrv->InpLenM = Size;       /* Set the counter of input bufer's content */
  DeviceDataPrv->SendStop = SendStop;  /* Set generating stop condition */
  I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_TX_DIRECTION); /* Set TX mode */
   1175c:	2210      	movs	r2, #16
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:632
    }
  }
  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
  DeviceDataPrv->SerFlag |= MASTER_IN_PROGRES; /* Set flag "busy" */
  DeviceDataPrv->InpPtrM = (uint8_t *)BufferPtr; /* Save pointer to data for reception */
   1175e:	60fb      	str	r3, [r7, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:635
  DeviceDataPrv->InpLenM = Size;       /* Set the counter of input bufer's content */
  DeviceDataPrv->SendStop = SendStop;  /* Set generating stop condition */
  I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_TX_DIRECTION); /* Set TX mode */
   11760:	4b13      	ldr	r3, [pc, #76]	; (117b0 <I2C_MasterReceiveBlock+0xb4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:634
  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
  DeviceDataPrv->SerFlag |= MASTER_IN_PROGRES; /* Set flag "busy" */
  DeviceDataPrv->InpPtrM = (uint8_t *)BufferPtr; /* Save pointer to data for reception */
  DeviceDataPrv->InpLenM = Size;       /* Set the counter of input bufer's content */
  DeviceDataPrv->SendStop = SendStop;  /* Set generating stop condition */
   11762:	70be      	strb	r6, [r7, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:635
  I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_TX_DIRECTION); /* Set TX mode */
   11764:	7899      	ldrb	r1, [r3, #2]
   11766:	430a      	orrs	r2, r1
   11768:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:636
  if (I2C_PDD_GetMasterMode(I2C1_BASE_PTR) == I2C_PDD_MASTER_MODE) { /* Is device in master mode? */
   1176a:	789a      	ldrb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:637
    I2C_PDD_RepeatStart(I2C1_BASE_PTR); /* If yes then repeat start cycle generated */
   1176c:	7899      	ldrb	r1, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:636
  DeviceDataPrv->SerFlag |= MASTER_IN_PROGRES; /* Set flag "busy" */
  DeviceDataPrv->InpPtrM = (uint8_t *)BufferPtr; /* Save pointer to data for reception */
  DeviceDataPrv->InpLenM = Size;       /* Set the counter of input bufer's content */
  DeviceDataPrv->SendStop = SendStop;  /* Set generating stop condition */
  I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_TX_DIRECTION); /* Set TX mode */
  if (I2C_PDD_GetMasterMode(I2C1_BASE_PTR) == I2C_PDD_MASTER_MODE) { /* Is device in master mode? */
   1176e:	0692      	lsls	r2, r2, #26
   11770:	d510      	bpl.n	11794 <I2C_MasterReceiveBlock+0x98>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:637
    I2C_PDD_RepeatStart(I2C1_BASE_PTR); /* If yes then repeat start cycle generated */
   11772:	2204      	movs	r2, #4
   11774:	430a      	orrs	r2, r1
   11776:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:641
  } else {
    I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_MASTER_MODE); /* If no then start signal generated */
  }
  if ((DeviceDataPrv->SerFlag & ADDR_7) != 0x00U) { /* Is 7-bit addressing set ? */
   11778:	783b      	ldrb	r3, [r7, #0]
   1177a:	069a      	lsls	r2, r3, #26
   1177c:	d50f      	bpl.n	1179e <I2C_MasterReceiveBlock+0xa2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:642
    DeviceDataPrv->SerFlag |= (ADDR_COMPLETE|REP_ADDR_COMPLETE); /* Only one byte of address will be sent 7-bit address mode*/
   1177e:	2206      	movs	r2, #6
   11780:	4313      	orrs	r3, r2
   11782:	703b      	strb	r3, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:643
    I2C_PDD_WriteDataReg(I2C1_BASE_PTR, (uint8_t)(DeviceDataPrv->SlaveAddr | 0x01U)); /* Send slave address */
   11784:	2301      	movs	r3, #1
   11786:	79ba      	ldrb	r2, [r7, #6]
   11788:	4313      	orrs	r3, r2
   1178a:	4a09      	ldr	r2, [pc, #36]	; (117b0 <I2C_MasterReceiveBlock+0xb4>)
   1178c:	7113      	strb	r3, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:651
      DeviceDataPrv->SerFlag &= (uint8_t)~(ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Second byte of address will be sent later */
      I2C_PDD_WriteDataReg(I2C1_BASE_PTR, DeviceDataPrv->SlaveAddrHigh); /* Send slave address - high byte */
    }
  }
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
   1178e:	f7fe fc69 	bl	10064 <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:652
  return ERR_OK;                       /* OK */
   11792:	e7c0      	b.n	11716 <I2C_MasterReceiveBlock+0x1a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:639
  DeviceDataPrv->SendStop = SendStop;  /* Set generating stop condition */
  I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_TX_DIRECTION); /* Set TX mode */
  if (I2C_PDD_GetMasterMode(I2C1_BASE_PTR) == I2C_PDD_MASTER_MODE) { /* Is device in master mode? */
    I2C_PDD_RepeatStart(I2C1_BASE_PTR); /* If yes then repeat start cycle generated */
  } else {
    I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_MASTER_MODE); /* If no then start signal generated */
   11794:	2220      	movs	r2, #32
   11796:	430a      	orrs	r2, r1
   11798:	b2d2      	uxtb	r2, r2
   1179a:	709a      	strb	r2, [r3, #2]
   1179c:	e7ec      	b.n	11778 <I2C_MasterReceiveBlock+0x7c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:645
  }
  if ((DeviceDataPrv->SerFlag & ADDR_7) != 0x00U) { /* Is 7-bit addressing set ? */
    DeviceDataPrv->SerFlag |= (ADDR_COMPLETE|REP_ADDR_COMPLETE); /* Only one byte of address will be sent 7-bit address mode*/
    I2C_PDD_WriteDataReg(I2C1_BASE_PTR, (uint8_t)(DeviceDataPrv->SlaveAddr | 0x01U)); /* Send slave address */
  } else {
    if ((DeviceDataPrv->SerFlag & ADDR_10) != 0x00U) { /* Is 10-bit addressing set ? */
   1179e:	06da      	lsls	r2, r3, #27
   117a0:	d5f5      	bpl.n	1178e <I2C_MasterReceiveBlock+0x92>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:646
      DeviceDataPrv->SerFlag &= (uint8_t)~(ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Second byte of address will be sent later */
   117a2:	2206      	movs	r2, #6
   117a4:	4393      	bics	r3, r2
   117a6:	703b      	strb	r3, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:647
      I2C_PDD_WriteDataReg(I2C1_BASE_PTR, DeviceDataPrv->SlaveAddrHigh); /* Send slave address - high byte */
   117a8:	79fa      	ldrb	r2, [r7, #7]
   117aa:	4b01      	ldr	r3, [pc, #4]	; (117b0 <I2C_MasterReceiveBlock+0xb4>)
   117ac:	711a      	strb	r2, [r3, #4]
   117ae:	e7ee      	b.n	1178e <I2C_MasterReceiveBlock+0x92>
   117b0:	40067000 	.word	0x40067000

000117b4 <I2C_SelectSlaveDevice>:
I2C_SelectSlaveDevice():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:721
**                           type.
**                           ERR_PARAM_ADDRESS -  Invalid address value.
*/
/* ===================================================================*/
LDD_TError I2C_SelectSlaveDevice(LDD_TDeviceData *DeviceDataPtr, LDD_I2C_TAddrType AddrType, LDD_I2C_TAddr Addr)
{
   117b4:	b530      	push	{r4, r5, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:724
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  if ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) { /* Is the device in the active state? */
   117b6:	7803      	ldrb	r3, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:721
**                           type.
**                           ERR_PARAM_ADDRESS -  Invalid address value.
*/
/* ===================================================================*/
LDD_TError I2C_SelectSlaveDevice(LDD_TDeviceData *DeviceDataPtr, LDD_I2C_TAddrType AddrType, LDD_I2C_TAddr Addr)
{
   117b8:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:725
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  if ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) { /* Is the device in the active state? */
    return ERR_BUSY;                   /* If yes then error */
   117ba:	2008      	movs	r0, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:724
/* ===================================================================*/
LDD_TError I2C_SelectSlaveDevice(LDD_TDeviceData *DeviceDataPtr, LDD_I2C_TAddrType AddrType, LDD_I2C_TAddr Addr)
{
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  if ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) { /* Is the device in the active state? */
   117bc:	07dd      	lsls	r5, r3, #31
   117be:	d500      	bpl.n	117c2 <I2C_SelectSlaveDevice+0xe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:755
    break;
    default:
      return ERR_PARAM_ADDRESS_TYPE;   /* If value of address type is invalid, return error */
  }
  return ERR_OK;                       /* OK */
}
   117c0:	bd30      	pop	{r4, r5, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:727
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  if ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) { /* Is the device in the active state? */
    return ERR_BUSY;                   /* If yes then error */
  }
  switch (AddrType) {
   117c2:	2901      	cmp	r1, #1
   117c4:	d016      	beq.n	117f4 <I2C_SelectSlaveDevice+0x40>
   117c6:	2900      	cmp	r1, #0
   117c8:	d008      	beq.n	117dc <I2C_SelectSlaveDevice+0x28>
   117ca:	2902      	cmp	r1, #2
   117cc:	d124      	bne.n	11818 <I2C_SelectSlaveDevice+0x64>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:748
      DeviceDataPrv->SlaveAddrHigh |= 0xF0U;
      DeviceDataPrv->SerFlag &= (uint8_t)~(GENERAL_CALL | ADDR_7); /* Clear the general call flag and 7-bit address mode flag */
      DeviceDataPrv->SerFlag |= ADDR_10; /* Set 10-bit address mode flag */
    break;
    case LDD_I2C_ADDRTYPE_GENERAL_CALL:
      DeviceDataPrv->SerFlag &= (uint8_t)~(ADDR_7 | ADDR_10); /* Clear the 7-bit address flag and 10-bit address mode flag */
   117ce:	2230      	movs	r2, #48	; 0x30
   117d0:	4393      	bics	r3, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:749
      DeviceDataPrv->SerFlag |= GENERAL_CALL; /* Set general call mode flag */
   117d2:	2208      	movs	r2, #8
   117d4:	4313      	orrs	r3, r2
   117d6:	7023      	strb	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:754
    break;
    default:
      return ERR_PARAM_ADDRESS_TYPE;   /* If value of address type is invalid, return error */
  }
  return ERR_OK;                       /* OK */
   117d8:	2000      	movs	r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:750
      DeviceDataPrv->SerFlag |= ADDR_10; /* Set 10-bit address mode flag */
    break;
    case LDD_I2C_ADDRTYPE_GENERAL_CALL:
      DeviceDataPrv->SerFlag &= (uint8_t)~(ADDR_7 | ADDR_10); /* Clear the 7-bit address flag and 10-bit address mode flag */
      DeviceDataPrv->SerFlag |= GENERAL_CALL; /* Set general call mode flag */
    break;
   117da:	e7f1      	b.n	117c0 <I2C_SelectSlaveDevice+0xc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:730
    return ERR_BUSY;                   /* If yes then error */
  }
  switch (AddrType) {
    case LDD_I2C_ADDRTYPE_7BITS:
      if (Addr > 0x7FU) {              /* Test address value */
        return ERR_PARAM_ADDRESS;      /* If value of address is invalid, return error */
   117dc:	2089      	movs	r0, #137	; 0x89
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:729
  if ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) { /* Is the device in the active state? */
    return ERR_BUSY;                   /* If yes then error */
  }
  switch (AddrType) {
    case LDD_I2C_ADDRTYPE_7BITS:
      if (Addr > 0x7FU) {              /* Test address value */
   117de:	2a7f      	cmp	r2, #127	; 0x7f
   117e0:	d8ee      	bhi.n	117c0 <I2C_SelectSlaveDevice+0xc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:732
        return ERR_PARAM_ADDRESS;      /* If value of address is invalid, return error */
      }
      DeviceDataPrv->SlaveAddr = (uint8_t)((uint8_t)Addr << 0x01U); /* Set slave address */
   117e2:	0052      	lsls	r2, r2, #1
   117e4:	71a2      	strb	r2, [r4, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:733
      DeviceDataPrv->SerFlag &= (uint8_t)~(GENERAL_CALL | ADDR_10); /* Clear the general call flag and 10-bit address mode flag */
   117e6:	2218      	movs	r2, #24
   117e8:	4393      	bics	r3, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:734
      DeviceDataPrv->SerFlag |= ADDR_7; /* Set 7-bit address mode flag */
   117ea:	2220      	movs	r2, #32
   117ec:	4313      	orrs	r3, r2
   117ee:	7023      	strb	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:754
      DeviceDataPrv->SerFlag |= GENERAL_CALL; /* Set general call mode flag */
    break;
    default:
      return ERR_PARAM_ADDRESS_TYPE;   /* If value of address type is invalid, return error */
  }
  return ERR_OK;                       /* OK */
   117f0:	2000      	movs	r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:735
        return ERR_PARAM_ADDRESS;      /* If value of address is invalid, return error */
      }
      DeviceDataPrv->SlaveAddr = (uint8_t)((uint8_t)Addr << 0x01U); /* Set slave address */
      DeviceDataPrv->SerFlag &= (uint8_t)~(GENERAL_CALL | ADDR_10); /* Clear the general call flag and 10-bit address mode flag */
      DeviceDataPrv->SerFlag |= ADDR_7; /* Set 7-bit address mode flag */
    break;
   117f2:	e7e5      	b.n	117c0 <I2C_SelectSlaveDevice+0xc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:737
    case LDD_I2C_ADDRTYPE_10BITS:
      if (Addr > 0x03FFU) {            /* Test address value */
   117f4:	4909      	ldr	r1, [pc, #36]	; (1181c <I2C_SelectSlaveDevice+0x68>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:730
    return ERR_BUSY;                   /* If yes then error */
  }
  switch (AddrType) {
    case LDD_I2C_ADDRTYPE_7BITS:
      if (Addr > 0x7FU) {              /* Test address value */
        return ERR_PARAM_ADDRESS;      /* If value of address is invalid, return error */
   117f6:	2089      	movs	r0, #137	; 0x89
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:737
      DeviceDataPrv->SlaveAddr = (uint8_t)((uint8_t)Addr << 0x01U); /* Set slave address */
      DeviceDataPrv->SerFlag &= (uint8_t)~(GENERAL_CALL | ADDR_10); /* Clear the general call flag and 10-bit address mode flag */
      DeviceDataPrv->SerFlag |= ADDR_7; /* Set 7-bit address mode flag */
    break;
    case LDD_I2C_ADDRTYPE_10BITS:
      if (Addr > 0x03FFU) {            /* Test address value */
   117f8:	428a      	cmp	r2, r1
   117fa:	d8e1      	bhi.n	117c0 <I2C_SelectSlaveDevice+0xc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:742
        return ERR_PARAM_ADDRESS;      /* If value of address is invalid, return error */
      }
      DeviceDataPrv->SlaveAddr = (uint8_t)Addr; /* Set slave address - low byte */
      DeviceDataPrv->SlaveAddrHigh = (uint8_t)((uint16_t)Addr >> 0x07U); /* Set slave address - high byte*/
      DeviceDataPrv->SlaveAddrHigh &= 0x06U; /* Format address to 11110xx0 */
   117fc:	2106      	movs	r1, #6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:740
    break;
    case LDD_I2C_ADDRTYPE_10BITS:
      if (Addr > 0x03FFU) {            /* Test address value */
        return ERR_PARAM_ADDRESS;      /* If value of address is invalid, return error */
      }
      DeviceDataPrv->SlaveAddr = (uint8_t)Addr; /* Set slave address - low byte */
   117fe:	71a2      	strb	r2, [r4, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:741
      DeviceDataPrv->SlaveAddrHigh = (uint8_t)((uint16_t)Addr >> 0x07U); /* Set slave address - high byte*/
   11800:	09d2      	lsrs	r2, r2, #7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:742
      DeviceDataPrv->SlaveAddrHigh &= 0x06U; /* Format address to 11110xx0 */
   11802:	400a      	ands	r2, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:743
      DeviceDataPrv->SlaveAddrHigh |= 0xF0U;
   11804:	3916      	subs	r1, #22
   11806:	430a      	orrs	r2, r1
   11808:	71e2      	strb	r2, [r4, #7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:744
      DeviceDataPrv->SerFlag &= (uint8_t)~(GENERAL_CALL | ADDR_7); /* Clear the general call flag and 7-bit address mode flag */
   1180a:	2228      	movs	r2, #40	; 0x28
   1180c:	4393      	bics	r3, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:745
      DeviceDataPrv->SerFlag |= ADDR_10; /* Set 10-bit address mode flag */
   1180e:	2210      	movs	r2, #16
   11810:	4313      	orrs	r3, r2
   11812:	7023      	strb	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:754
      DeviceDataPrv->SerFlag |= GENERAL_CALL; /* Set general call mode flag */
    break;
    default:
      return ERR_PARAM_ADDRESS_TYPE;   /* If value of address type is invalid, return error */
  }
  return ERR_OK;                       /* OK */
   11814:	2000      	movs	r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:746
      DeviceDataPrv->SlaveAddrHigh = (uint8_t)((uint16_t)Addr >> 0x07U); /* Set slave address - high byte*/
      DeviceDataPrv->SlaveAddrHigh &= 0x06U; /* Format address to 11110xx0 */
      DeviceDataPrv->SlaveAddrHigh |= 0xF0U;
      DeviceDataPrv->SerFlag &= (uint8_t)~(GENERAL_CALL | ADDR_7); /* Clear the general call flag and 7-bit address mode flag */
      DeviceDataPrv->SerFlag |= ADDR_10; /* Set 10-bit address mode flag */
    break;
   11816:	e7d3      	b.n	117c0 <I2C_SelectSlaveDevice+0xc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:752
    case LDD_I2C_ADDRTYPE_GENERAL_CALL:
      DeviceDataPrv->SerFlag &= (uint8_t)~(ADDR_7 | ADDR_10); /* Clear the 7-bit address flag and 10-bit address mode flag */
      DeviceDataPrv->SerFlag |= GENERAL_CALL; /* Set general call mode flag */
    break;
    default:
      return ERR_PARAM_ADDRESS_TYPE;   /* If value of address type is invalid, return error */
   11818:	208d      	movs	r0, #141	; 0x8d
   1181a:	e7d1      	b.n	117c0 <I2C_SelectSlaveDevice+0xc>
   1181c:	000003ff 	.word	0x000003ff

00011820 <I2C_GetError>:
I2C_GetError():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:779
**                           ERR_SPEED - This device does not work in
**                           the active clock configuration
*/
/* ===================================================================*/
LDD_TError I2C_GetError(LDD_TDeviceData *DeviceDataPtr, LDD_I2C_TErrorMask *ErrorMaskPtr)
{
   11820:	b538      	push	{r3, r4, r5, lr}
   11822:	1c04      	adds	r4, r0, #0
   11824:	1c0d      	adds	r5, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:783
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
   11826:	f7fe fc11 	bl	1004c <_int_disable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:784
  *ErrorMaskPtr = DeviceDataPrv->ErrorMask; /* Return last value of error mask */
   1182a:	88a3      	ldrh	r3, [r4, #4]
   1182c:	802b      	strh	r3, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:785
  DeviceDataPrv->ErrorMask = 0x00U;
   1182e:	2300      	movs	r3, #0
   11830:	80a3      	strh	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:787
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
   11832:	f7fe fc17 	bl	10064 <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:789
  return ERR_OK;
}
   11836:	2000      	movs	r0, #0
   11838:	bd38      	pop	{r3, r4, r5, pc}
   1183a:	46c0      	nop			; (mov r8, r8)

0001183c <I2C_CheckBus>:
I2C_CheckBus():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:820
LDD_TError I2C_CheckBus(LDD_TDeviceData *DeviceDataPtr, LDD_I2C_TBusState *BusStatePtr)
{
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  (void)DeviceDataPrv;                 /* Suppress unused variable warning if needed */
  *BusStatePtr = (LDD_I2C_TBusState)((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY)?LDD_I2C_BUSY:LDD_I2C_IDLE); /* Return value of Busy bit in status register */
   1183c:	2201      	movs	r2, #1
   1183e:	4b04      	ldr	r3, [pc, #16]	; (11850 <I2C_CheckBus+0x14>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:822
  return ERR_OK;
}
   11840:	2000      	movs	r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:820
LDD_TError I2C_CheckBus(LDD_TDeviceData *DeviceDataPtr, LDD_I2C_TBusState *BusStatePtr)
{
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  (void)DeviceDataPrv;                 /* Suppress unused variable warning if needed */
  *BusStatePtr = (LDD_I2C_TBusState)((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY)?LDD_I2C_BUSY:LDD_I2C_IDLE); /* Return value of Busy bit in status register */
   11842:	78db      	ldrb	r3, [r3, #3]
   11844:	095b      	lsrs	r3, r3, #5
   11846:	4053      	eors	r3, r2
   11848:	2201      	movs	r2, #1
   1184a:	4013      	ands	r3, r2
   1184c:	700b      	strb	r3, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:822
  return ERR_OK;
}
   1184e:	4770      	bx	lr
   11850:	40067000 	.word	0x40067000

00011854 <LED_BLUE_Init>:
LED_BLUE_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:125
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* LED_BLUE_Init(LDD_TUserData *UserDataPtr)
{
   11854:	b510      	push	{r4, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:134
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Configure pin as output */
  /* GPIOE_PDDR: PDD|=0x80000000 */
  GPIOE_PDDR |= GPIO_PDDR_PDD(0x80000000);
   11856:	2480      	movs	r4, #128	; 0x80
   11858:	4b0a      	ldr	r3, [pc, #40]	; (11884 <LED_BLUE_Init+0x30>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:131
  /* Allocate device structure */
  LED_BLUE_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   1185a:	4a0b      	ldr	r2, [pc, #44]	; (11888 <LED_BLUE_Init+0x34>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:134
  /* Configure pin as output */
  /* GPIOE_PDDR: PDD|=0x80000000 */
  GPIOE_PDDR |= GPIO_PDDR_PDD(0x80000000);
   1185c:	0624      	lsls	r4, r4, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:131
  /* Allocate device structure */
  LED_BLUE_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   1185e:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:134
  /* Configure pin as output */
  /* GPIOE_PDDR: PDD|=0x80000000 */
  GPIOE_PDDR |= GPIO_PDDR_PDD(0x80000000);
   11860:	6958      	ldr	r0, [r3, #20]
   11862:	4320      	orrs	r0, r4
   11864:	6158      	str	r0, [r3, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:137
  /* Set initialization value */
  /* GPIOE_PDOR: PDO|=0x80000000 */
  GPIOE_PDOR |= GPIO_PDOR_PDO(0x80000000);
   11866:	6819      	ldr	r1, [r3, #0]
   11868:	4321      	orrs	r1, r4
   1186a:	6019      	str	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:140
  /* Initialization of Port Control register */
  /* PORTE_PCR31: ISF=0,MUX=1 */
  PORTE_PCR31 = (uint32_t)((PORTE_PCR31 & (uint32_t)~(uint32_t)(
   1186c:	4907      	ldr	r1, [pc, #28]	; (1188c <LED_BLUE_Init+0x38>)
   1186e:	4b08      	ldr	r3, [pc, #32]	; (11890 <LED_BLUE_Init+0x3c>)
   11870:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
   11872:	4003      	ands	r3, r0
   11874:	2080      	movs	r0, #128	; 0x80
   11876:	0040      	lsls	r0, r0, #1
   11878:	4303      	orrs	r3, r0
   1187a:	67cb      	str	r3, [r1, #124]	; 0x7c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:147
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_LED_BLUE_ID,DeviceDataPrv);
   1187c:	4b05      	ldr	r3, [pc, #20]	; (11894 <LED_BLUE_Init+0x40>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:149
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   1187e:	1c10      	adds	r0, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:147
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_LED_BLUE_ID,DeviceDataPrv);
   11880:	60da      	str	r2, [r3, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:149
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   11882:	bd10      	pop	{r4, pc}
   11884:	400ff100 	.word	0x400ff100
   11888:	1fffe2c8 	.word	0x1fffe2c8
   1188c:	4004d000 	.word	0x4004d000
   11890:	fefff8ff 	.word	0xfefff8ff
   11894:	1fffe2d8 	.word	0x1fffe2d8

00011898 <LED_BLUE_SetVal>:
LED_BLUE_SetVal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:250
*/
/* ===================================================================*/
void LED_BLUE_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(LED_BLUE_MODULE_BASE_ADDRESS, LED_BLUE_PORT_MASK);
   11898:	2280      	movs	r2, #128	; 0x80
   1189a:	4b02      	ldr	r3, [pc, #8]	; (118a4 <LED_BLUE_SetVal+0xc>)
   1189c:	0612      	lsls	r2, r2, #24
   1189e:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:251
}
   118a0:	4770      	bx	lr
   118a2:	46c0      	nop			; (mov r8, r8)
   118a4:	f8000100 	.word	0xf8000100

000118a8 <LED_GREEN_Init>:
LED_GREEN_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:134
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Configure pin as output */
  /* GPIOD_PDDR: PDD|=0x20 */
  GPIOD_PDDR |= GPIO_PDDR_PDD(0x20);
   118a8:	2220      	movs	r2, #32
   118aa:	4b0a      	ldr	r3, [pc, #40]	; (118d4 <LED_GREEN_Init+0x2c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:131
  /* Allocate device structure */
  LED_GREEN_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   118ac:	490a      	ldr	r1, [pc, #40]	; (118d8 <LED_GREEN_Init+0x30>)
   118ae:	6008      	str	r0, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:134
  /* Configure pin as output */
  /* GPIOD_PDDR: PDD|=0x20 */
  GPIOD_PDDR |= GPIO_PDDR_PDD(0x20);
   118b0:	6958      	ldr	r0, [r3, #20]
   118b2:	4310      	orrs	r0, r2
   118b4:	6158      	str	r0, [r3, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:137
  /* Set initialization value */
  /* GPIOD_PDOR: PDO|=0x20 */
  GPIOD_PDOR |= GPIO_PDOR_PDO(0x20);
   118b6:	6818      	ldr	r0, [r3, #0]
   118b8:	4302      	orrs	r2, r0
   118ba:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:140
  /* Initialization of Port Control register */
  /* PORTD_PCR5: ISF=0,MUX=1 */
  PORTD_PCR5 = (uint32_t)((PORTD_PCR5 & (uint32_t)~(uint32_t)(
   118bc:	4a07      	ldr	r2, [pc, #28]	; (118dc <LED_GREEN_Init+0x34>)
   118be:	4b08      	ldr	r3, [pc, #32]	; (118e0 <LED_GREEN_Init+0x38>)
   118c0:	6950      	ldr	r0, [r2, #20]
   118c2:	4003      	ands	r3, r0
   118c4:	2080      	movs	r0, #128	; 0x80
   118c6:	0040      	lsls	r0, r0, #1
   118c8:	4303      	orrs	r3, r0
   118ca:	6153      	str	r3, [r2, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:147
                PORT_PCR_MUX(0x06)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01)
               ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_LED_GREEN_ID,DeviceDataPrv);
   118cc:	4b05      	ldr	r3, [pc, #20]	; (118e4 <LED_GREEN_Init+0x3c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:149
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   118ce:	1c08      	adds	r0, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:147
                PORT_PCR_MUX(0x06)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01)
               ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_LED_GREEN_ID,DeviceDataPrv);
   118d0:	6099      	str	r1, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:149
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   118d2:	4770      	bx	lr
   118d4:	400ff0c0 	.word	0x400ff0c0
   118d8:	1fffe2cc 	.word	0x1fffe2cc
   118dc:	4004c000 	.word	0x4004c000
   118e0:	fefff8ff 	.word	0xfefff8ff
   118e4:	1fffe2d8 	.word	0x1fffe2d8

000118e8 <LED_GREEN_SetVal>:
LED_GREEN_SetVal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:250
*/
/* ===================================================================*/
void LED_GREEN_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(LED_GREEN_MODULE_BASE_ADDRESS, LED_GREEN_PORT_MASK);
   118e8:	2220      	movs	r2, #32
   118ea:	4b01      	ldr	r3, [pc, #4]	; (118f0 <LED_GREEN_SetVal+0x8>)
   118ec:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:251
}
   118ee:	4770      	bx	lr
   118f0:	f80000c0 	.word	0xf80000c0

000118f4 <LED_GREEN_NegVal>:
LED_GREEN_NegVal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:270
*/
/* ===================================================================*/
void LED_GREEN_NegVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_TogglePortDataOutputMask(LED_GREEN_MODULE_BASE_ADDRESS, LED_GREEN_PORT_MASK);
   118f4:	2220      	movs	r2, #32
   118f6:	4b01      	ldr	r3, [pc, #4]	; (118fc <LED_GREEN_NegVal+0x8>)
   118f8:	60da      	str	r2, [r3, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:271
}
   118fa:	4770      	bx	lr
   118fc:	f80000c0 	.word	0xf80000c0

00011900 <LED_RED_Init>:
LED_RED_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:125
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* LED_RED_Init(LDD_TUserData *UserDataPtr)
{
   11900:	b510      	push	{r4, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:134
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Configure pin as output */
  /* GPIOE_PDDR: PDD|=0x20000000 */
  GPIOE_PDDR |= GPIO_PDDR_PDD(0x20000000);
   11902:	2480      	movs	r4, #128	; 0x80
   11904:	4b0a      	ldr	r3, [pc, #40]	; (11930 <LED_RED_Init+0x30>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:131
  /* Allocate device structure */
  LED_RED_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   11906:	4a0b      	ldr	r2, [pc, #44]	; (11934 <LED_RED_Init+0x34>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:134
  /* Configure pin as output */
  /* GPIOE_PDDR: PDD|=0x20000000 */
  GPIOE_PDDR |= GPIO_PDDR_PDD(0x20000000);
   11908:	05a4      	lsls	r4, r4, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:131
  /* Allocate device structure */
  LED_RED_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   1190a:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:134
  /* Configure pin as output */
  /* GPIOE_PDDR: PDD|=0x20000000 */
  GPIOE_PDDR |= GPIO_PDDR_PDD(0x20000000);
   1190c:	6958      	ldr	r0, [r3, #20]
   1190e:	4320      	orrs	r0, r4
   11910:	6158      	str	r0, [r3, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:137
  /* Set initialization value */
  /* GPIOE_PDOR: PDO|=0x20000000 */
  GPIOE_PDOR |= GPIO_PDOR_PDO(0x20000000);
   11912:	6819      	ldr	r1, [r3, #0]
   11914:	4321      	orrs	r1, r4
   11916:	6019      	str	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:140
  /* Initialization of Port Control register */
  /* PORTE_PCR29: ISF=0,MUX=1 */
  PORTE_PCR29 = (uint32_t)((PORTE_PCR29 & (uint32_t)~(uint32_t)(
   11918:	4907      	ldr	r1, [pc, #28]	; (11938 <LED_RED_Init+0x38>)
   1191a:	4b08      	ldr	r3, [pc, #32]	; (1193c <LED_RED_Init+0x3c>)
   1191c:	6f48      	ldr	r0, [r1, #116]	; 0x74
   1191e:	4003      	ands	r3, r0
   11920:	2080      	movs	r0, #128	; 0x80
   11922:	0040      	lsls	r0, r0, #1
   11924:	4303      	orrs	r3, r0
   11926:	674b      	str	r3, [r1, #116]	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:147
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_LED_RED_ID,DeviceDataPrv);
   11928:	4b05      	ldr	r3, [pc, #20]	; (11940 <LED_RED_Init+0x40>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:149
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   1192a:	1c10      	adds	r0, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:147
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_LED_RED_ID,DeviceDataPrv);
   1192c:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:149
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   1192e:	bd10      	pop	{r4, pc}
   11930:	400ff100 	.word	0x400ff100
   11934:	1fffe2d0 	.word	0x1fffe2d0
   11938:	4004d000 	.word	0x4004d000
   1193c:	fefff8ff 	.word	0xfefff8ff
   11940:	1fffe2d8 	.word	0x1fffe2d8

00011944 <LED_RED_ClrVal>:
LED_RED_ClrVal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:230
*/
/* ===================================================================*/
void LED_RED_ClrVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_ClearPortDataOutputMask(LED_RED_MODULE_BASE_ADDRESS, LED_RED_PORT_MASK);
   11944:	2280      	movs	r2, #128	; 0x80
   11946:	4b02      	ldr	r3, [pc, #8]	; (11950 <LED_RED_ClrVal+0xc>)
   11948:	0592      	lsls	r2, r2, #22
   1194a:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:231
}
   1194c:	4770      	bx	lr
   1194e:	46c0      	nop			; (mov r8, r8)
   11950:	f8000100 	.word	0xf8000100

00011954 <LED_RED_SetVal>:
LED_RED_SetVal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:250
*/
/* ===================================================================*/
void LED_RED_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(LED_RED_MODULE_BASE_ADDRESS, LED_RED_PORT_MASK);
   11954:	2280      	movs	r2, #128	; 0x80
   11956:	4b02      	ldr	r3, [pc, #8]	; (11960 <LED_RED_SetVal+0xc>)
   11958:	0592      	lsls	r2, r2, #22
   1195a:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:251
}
   1195c:	4770      	bx	lr
   1195e:	46c0      	nop			; (mov r8, r8)
   11960:	f8000100 	.word	0xf8000100

00011964 <SystemTimer1_OnCounterRestart>:
SystemTimer1_OnCounterRestart():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:118
**     Description :
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void SystemTimer1_OnCounterRestart(LDD_TUserData *UserDataPtr)
{
   11964:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:119
    _time_notify_kernel();
   11966:	f7ff fb57 	bl	11018 <_time_notify_kernel>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:120
}
   1196a:	bd08      	pop	{r3, pc}

0001196c <system_timer_init>:
system_timer_init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:136


static LDD_TDeviceDataPtr SystemTimerDeviceDataPtr;

uint32_t system_timer_init(const void * timer_data_ptr)
{
   1196c:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:138
    uint32_t hw_ticks_per_tick;
    KERNEL_DATA_STRUCT_PTR kernel_data = _mqx_kernel_data;
   1196e:	4b11      	ldr	r3, [pc, #68]	; (119b4 <system_timer_init+0x48>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:136


static LDD_TDeviceDataPtr SystemTimerDeviceDataPtr;

uint32_t system_timer_init(const void * timer_data_ptr)
{
   11970:	b082      	sub	sp, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:143
    KERNEL_DATA_STRUCT_PTR kernel_data = _mqx_kernel_data;

    /* Parameter is not used, suppress unused argument warning */
    (void)timer_data_ptr;

    SystemTimerDeviceDataPtr  = SystemTimer1_Init(NULL);
   11972:	2000      	movs	r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:138
static LDD_TDeviceDataPtr SystemTimerDeviceDataPtr;

uint32_t system_timer_init(const void * timer_data_ptr)
{
    uint32_t hw_ticks_per_tick;
    KERNEL_DATA_STRUCT_PTR kernel_data = _mqx_kernel_data;
   11974:	681e      	ldr	r6, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:143

    /* Parameter is not used, suppress unused argument warning */
    (void)timer_data_ptr;

    SystemTimerDeviceDataPtr  = SystemTimer1_Init(NULL);
   11976:	f000 f8d7 	bl	11b28 <SystemTimer1_Init>
   1197a:	1c05      	adds	r5, r0, #0
   1197c:	4c0e      	ldr	r4, [pc, #56]	; (119b8 <system_timer_init+0x4c>)
SystemTimer1_GetTicsPerSecond():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:128
/* Function returns number of ticks per second for system timer */
uint32_t  SystemTimer1_GetTicsPerSecond(LDD_TDeviceData *DeviceDataPtr)
{
    uint32_t period_ticks;

    SystemTimer1_GetPeriodTicks(DeviceDataPtr, &period_ticks);
   1197e:	a901      	add	r1, sp, #4
system_timer_init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:143
    KERNEL_DATA_STRUCT_PTR kernel_data = _mqx_kernel_data;

    /* Parameter is not used, suppress unused argument warning */
    (void)timer_data_ptr;

    SystemTimerDeviceDataPtr  = SystemTimer1_Init(NULL);
   11980:	6020      	str	r0, [r4, #0]
SystemTimer1_GetTicsPerSecond():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:128
/* Function returns number of ticks per second for system timer */
uint32_t  SystemTimer1_GetTicsPerSecond(LDD_TDeviceData *DeviceDataPtr)
{
    uint32_t period_ticks;

    SystemTimer1_GetPeriodTicks(DeviceDataPtr, &period_ticks);
   11982:	f000 f90f 	bl	11ba4 <SystemTimer1_GetPeriodTicks>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:129
    return SystemTimer1_GetInputFrequency(DeviceDataPtr) / period_ticks;
   11986:	1c28      	adds	r0, r5, #0
   11988:	f000 f908 	bl	11b9c <SystemTimer1_GetInputFrequency>
   1198c:	9901      	ldr	r1, [sp, #4]
   1198e:	f7ee fd89 	bl	4a4 <__aeabi_uidiv>
system_timer_init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:146
    (void)timer_data_ptr;

    SystemTimerDeviceDataPtr  = SystemTimer1_Init(NULL);

    /* Set number of system ticks per second */
    kernel_data->TICKS_PER_SECOND = SystemTimer1_GetTicsPerSecond(SystemTimerDeviceDataPtr);
   11992:	23a4      	movs	r3, #164	; 0xa4
   11994:	005b      	lsls	r3, r3, #1
   11996:	50f0      	str	r0, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:148

    _time_set_hwtick_function((MQX_GET_HWTICKS_FPTR)&SystemTimer1_GetCounterValue, (pointer)SystemTimerDeviceDataPtr);
   11998:	6821      	ldr	r1, [r4, #0]
   1199a:	4808      	ldr	r0, [pc, #32]	; (119bc <system_timer_init+0x50>)
   1199c:	f7ff fbd8 	bl	11150 <_time_set_hwtick_function>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:151

    /* Set number of hardware ticks per system tick */
    SystemTimer1_GetPeriodTicks(SystemTimerDeviceDataPtr, &hw_ticks_per_tick);
   119a0:	a901      	add	r1, sp, #4
   119a2:	6820      	ldr	r0, [r4, #0]
   119a4:	f000 f8fe 	bl	11ba4 <SystemTimer1_GetPeriodTicks>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:152
    _time_set_hwticks_per_tick(hw_ticks_per_tick);
   119a8:	9801      	ldr	r0, [sp, #4]
   119aa:	f7ff fbdb 	bl	11164 <_time_set_hwticks_per_tick>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:155
    
    return MQX_OK;
}
   119ae:	2000      	movs	r0, #0
   119b0:	b002      	add	sp, #8
   119b2:	bd70      	pop	{r4, r5, r6, pc}
   119b4:	1fffe000 	.word	0x1fffe000
   119b8:	1fffe2d4 	.word	0x1fffe2d4
   119bc:	00011bb9 	.word	0x00011bb9

000119c0 <system_timer_start>:
system_timer_start():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:158

uint32_t system_timer_start(const void * timer_data_ptr)
{
   119c0:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:162
    /* Parameter is not used, suppress unused argument warning */
    (void)timer_data_ptr;                 
    
    SystemTimer1_Enable(SystemTimerDeviceDataPtr);
   119c2:	4b03      	ldr	r3, [pc, #12]	; (119d0 <system_timer_start+0x10>)
   119c4:	6818      	ldr	r0, [r3, #0]
   119c6:	f000 f8df 	bl	11b88 <SystemTimer1_Enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:165
    
    return MQX_OK;
}
   119ca:	2000      	movs	r0, #0
   119cc:	bd08      	pop	{r3, pc}
   119ce:	46c0      	nop			; (mov r8, r8)
   119d0:	1fffe2d4 	.word	0x1fffe2d4

000119d4 <RNG1_Put>:
RNG1_Put():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:63
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
byte RNG1_Put(byte elem)
{
   119d4:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:66
  byte res = ERR_OK;

  EnterCritical();
   119d6:	4a19      	ldr	r2, [pc, #100]	; (11a3c <RNG1_Put+0x68>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:63
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
byte RNG1_Put(byte elem)
{
   119d8:	b082      	sub	sp, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:66
  byte res = ERR_OK;

  EnterCritical();
   119da:	466b      	mov	r3, sp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:63
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
byte RNG1_Put(byte elem)
{
   119dc:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:66
  byte res = ERR_OK;

  EnterCritical();
   119de:	f3ef 8010 	mrs	r0, PRIMASK
   119e2:	b672      	cpsid	i
   119e4:	71d8      	strb	r0, [r3, #7]
   119e6:	7813      	ldrb	r3, [r2, #0]
   119e8:	3301      	adds	r3, #1
   119ea:	b2db      	uxtb	r3, r3
   119ec:	7013      	strb	r3, [r2, #0]
   119ee:	2b01      	cmp	r3, #1
   119f0:	d01d      	beq.n	11a2e <RNG1_Put+0x5a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:67
  if (RNG1_inSize==RNG1_BUF_SIZE) {
   119f2:	4813      	ldr	r0, [pc, #76]	; (11a40 <RNG1_Put+0x6c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:68
    res = ERR_TXFULL;
   119f4:	240b      	movs	r4, #11
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:67
byte RNG1_Put(byte elem)
{
  byte res = ERR_OK;

  EnterCritical();
  if (RNG1_inSize==RNG1_BUF_SIZE) {
   119f6:	7801      	ldrb	r1, [r0, #0]
   119f8:	2940      	cmp	r1, #64	; 0x40
   119fa:	d00b      	beq.n	11a14 <RNG1_Put+0x40>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:70
    res = ERR_TXFULL;
  } else {
    RNG1_buffer[RNG1_inIdx] = elem;
   119fc:	4c11      	ldr	r4, [pc, #68]	; (11a44 <RNG1_Put+0x70>)
   119fe:	4e12      	ldr	r6, [pc, #72]	; (11a48 <RNG1_Put+0x74>)
   11a00:	7823      	ldrb	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:71
    RNG1_inSize++;
   11a02:	3101      	adds	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:70

  EnterCritical();
  if (RNG1_inSize==RNG1_BUF_SIZE) {
    res = ERR_TXFULL;
  } else {
    RNG1_buffer[RNG1_inIdx] = elem;
   11a04:	54f5      	strb	r5, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:72
    RNG1_inSize++;
    RNG1_inIdx++;
   11a06:	3301      	adds	r3, #1
   11a08:	b2db      	uxtb	r3, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:71
  EnterCritical();
  if (RNG1_inSize==RNG1_BUF_SIZE) {
    res = ERR_TXFULL;
  } else {
    RNG1_buffer[RNG1_inIdx] = elem;
    RNG1_inSize++;
   11a0a:	7001      	strb	r1, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:73
    RNG1_inIdx++;
    if (RNG1_inIdx==RNG1_BUF_SIZE) {
   11a0c:	2b40      	cmp	r3, #64	; 0x40
   11a0e:	d013      	beq.n	11a38 <RNG1_Put+0x64>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:74
      RNG1_inIdx = 0;
   11a10:	7023      	strb	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:64
**         ---             - Error code
** ===================================================================
*/
byte RNG1_Put(byte elem)
{
  byte res = ERR_OK;
   11a12:	2400      	movs	r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:77
    RNG1_inIdx++;
    if (RNG1_inIdx==RNG1_BUF_SIZE) {
      RNG1_inIdx = 0;
    }
  }
  ExitCritical();
   11a14:	7813      	ldrb	r3, [r2, #0]
   11a16:	3b01      	subs	r3, #1
   11a18:	b2db      	uxtb	r3, r3
   11a1a:	7013      	strb	r3, [r2, #0]
   11a1c:	2b00      	cmp	r3, #0
   11a1e:	d103      	bne.n	11a28 <RNG1_Put+0x54>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:77 (discriminator 1)
   11a20:	4b0a      	ldr	r3, [pc, #40]	; (11a4c <RNG1_Put+0x78>)
   11a22:	7818      	ldrb	r0, [r3, #0]
   11a24:	f380 8810 	msr	PRIMASK, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:79
  return res;
}
   11a28:	1c20      	adds	r0, r4, #0
   11a2a:	b002      	add	sp, #8
   11a2c:	bd70      	pop	{r4, r5, r6, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:66 (discriminator 1)
*/
byte RNG1_Put(byte elem)
{
  byte res = ERR_OK;

  EnterCritical();
   11a2e:	466b      	mov	r3, sp
   11a30:	79d9      	ldrb	r1, [r3, #7]
   11a32:	4b06      	ldr	r3, [pc, #24]	; (11a4c <RNG1_Put+0x78>)
   11a34:	7019      	strb	r1, [r3, #0]
   11a36:	e7dc      	b.n	119f2 <RNG1_Put+0x1e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:74
  } else {
    RNG1_buffer[RNG1_inIdx] = elem;
    RNG1_inSize++;
    RNG1_inIdx++;
    if (RNG1_inIdx==RNG1_BUF_SIZE) {
      RNG1_inIdx = 0;
   11a38:	2300      	movs	r3, #0
   11a3a:	e7e9      	b.n	11a10 <RNG1_Put+0x3c>
   11a3c:	1fffe294 	.word	0x1fffe294
   11a40:	1fffe340 	.word	0x1fffe340
   11a44:	1fffe2fc 	.word	0x1fffe2fc
   11a48:	1fffe300 	.word	0x1fffe300
   11a4c:	200025b8 	.word	0x200025b8

00011a50 <RNG1_Get>:
RNG1_Get():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:95
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
byte RNG1_Get(byte *elemP)
{
   11a50:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:98
  byte res = ERR_OK;

  EnterCritical();
   11a52:	4a1b      	ldr	r2, [pc, #108]	; (11ac0 <RNG1_Get+0x70>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:95
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
byte RNG1_Get(byte *elemP)
{
   11a54:	b082      	sub	sp, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:98
  byte res = ERR_OK;

  EnterCritical();
   11a56:	466b      	mov	r3, sp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:95
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
byte RNG1_Get(byte *elemP)
{
   11a58:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:98
  byte res = ERR_OK;

  EnterCritical();
   11a5a:	f3ef 8010 	mrs	r0, PRIMASK
   11a5e:	b672      	cpsid	i
   11a60:	71d8      	strb	r0, [r3, #7]
   11a62:	7813      	ldrb	r3, [r2, #0]
   11a64:	3301      	adds	r3, #1
   11a66:	b2db      	uxtb	r3, r3
   11a68:	7013      	strb	r3, [r2, #0]
   11a6a:	2b01      	cmp	r3, #1
   11a6c:	d01f      	beq.n	11aae <RNG1_Get+0x5e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:99
  if (RNG1_inSize==0) {
   11a6e:	4815      	ldr	r0, [pc, #84]	; (11ac4 <RNG1_Get+0x74>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:100
    res = ERR_RXEMPTY;
   11a70:	210a      	movs	r1, #10
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:99
byte RNG1_Get(byte *elemP)
{
  byte res = ERR_OK;

  EnterCritical();
  if (RNG1_inSize==0) {
   11a72:	7803      	ldrb	r3, [r0, #0]
   11a74:	2b00      	cmp	r3, #0
   11a76:	d10c      	bne.n	11a92 <RNG1_Get+0x42>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:109
    RNG1_outIdx++;
    if (RNG1_outIdx==RNG1_BUF_SIZE) {
      RNG1_outIdx = 0;
    }
  }
  ExitCritical();
   11a78:	7813      	ldrb	r3, [r2, #0]
   11a7a:	3b01      	subs	r3, #1
   11a7c:	b2db      	uxtb	r3, r3
   11a7e:	7013      	strb	r3, [r2, #0]
   11a80:	2b00      	cmp	r3, #0
   11a82:	d103      	bne.n	11a8c <RNG1_Get+0x3c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:109 (discriminator 1)
   11a84:	4b10      	ldr	r3, [pc, #64]	; (11ac8 <RNG1_Get+0x78>)
   11a86:	7818      	ldrb	r0, [r3, #0]
   11a88:	f380 8810 	msr	PRIMASK, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:111
  return res;
}
   11a8c:	1c08      	adds	r0, r1, #0
   11a8e:	b002      	add	sp, #8
   11a90:	bd70      	pop	{r4, r5, r6, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:102

  EnterCritical();
  if (RNG1_inSize==0) {
    res = ERR_RXEMPTY;
  } else {
    *elemP = RNG1_buffer[RNG1_outIdx];
   11a92:	4d0e      	ldr	r5, [pc, #56]	; (11acc <RNG1_Get+0x7c>)
   11a94:	4e0e      	ldr	r6, [pc, #56]	; (11ad0 <RNG1_Get+0x80>)
   11a96:	7829      	ldrb	r1, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:103
    RNG1_inSize--;
   11a98:	3b01      	subs	r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:102

  EnterCritical();
  if (RNG1_inSize==0) {
    res = ERR_RXEMPTY;
  } else {
    *elemP = RNG1_buffer[RNG1_outIdx];
   11a9a:	5c76      	ldrb	r6, [r6, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:104
    RNG1_inSize--;
    RNG1_outIdx++;
   11a9c:	3101      	adds	r1, #1
   11a9e:	b2c9      	uxtb	r1, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:102

  EnterCritical();
  if (RNG1_inSize==0) {
    res = ERR_RXEMPTY;
  } else {
    *elemP = RNG1_buffer[RNG1_outIdx];
   11aa0:	7026      	strb	r6, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:103
    RNG1_inSize--;
   11aa2:	7003      	strb	r3, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:105
    RNG1_outIdx++;
    if (RNG1_outIdx==RNG1_BUF_SIZE) {
   11aa4:	2940      	cmp	r1, #64	; 0x40
   11aa6:	d007      	beq.n	11ab8 <RNG1_Get+0x68>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:104
  if (RNG1_inSize==0) {
    res = ERR_RXEMPTY;
  } else {
    *elemP = RNG1_buffer[RNG1_outIdx];
    RNG1_inSize--;
    RNG1_outIdx++;
   11aa8:	7029      	strb	r1, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:96
**         ---             - Error code
** ===================================================================
*/
byte RNG1_Get(byte *elemP)
{
  byte res = ERR_OK;
   11aaa:	2100      	movs	r1, #0
   11aac:	e7e4      	b.n	11a78 <RNG1_Get+0x28>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:98 (discriminator 1)

  EnterCritical();
   11aae:	466b      	mov	r3, sp
   11ab0:	79d9      	ldrb	r1, [r3, #7]
   11ab2:	4b05      	ldr	r3, [pc, #20]	; (11ac8 <RNG1_Get+0x78>)
   11ab4:	7019      	strb	r1, [r3, #0]
   11ab6:	e7da      	b.n	11a6e <RNG1_Get+0x1e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:106
  } else {
    *elemP = RNG1_buffer[RNG1_outIdx];
    RNG1_inSize--;
    RNG1_outIdx++;
    if (RNG1_outIdx==RNG1_BUF_SIZE) {
      RNG1_outIdx = 0;
   11ab8:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:96
**         ---             - Error code
** ===================================================================
*/
byte RNG1_Get(byte *elemP)
{
  byte res = ERR_OK;
   11aba:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:106
  } else {
    *elemP = RNG1_buffer[RNG1_outIdx];
    RNG1_inSize--;
    RNG1_outIdx++;
    if (RNG1_outIdx==RNG1_BUF_SIZE) {
      RNG1_outIdx = 0;
   11abc:	702b      	strb	r3, [r5, #0]
   11abe:	e7db      	b.n	11a78 <RNG1_Get+0x28>
   11ac0:	1fffe294 	.word	0x1fffe294
   11ac4:	1fffe340 	.word	0x1fffe340
   11ac8:	200025b8 	.word	0x200025b8
   11acc:	1fffe341 	.word	0x1fffe341
   11ad0:	1fffe300 	.word	0x1fffe300

00011ad4 <RNG1_NofElements>:
RNG1_NofElements():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:125
**         ---             - Number of elements in the buffer.
** ===================================================================
*/
byte RNG1_NofElements(void)
{
  return RNG1_inSize;
   11ad4:	4b01      	ldr	r3, [pc, #4]	; (11adc <RNG1_NofElements+0x8>)
   11ad6:	7818      	ldrb	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:126
}
   11ad8:	4770      	bx	lr
   11ada:	46c0      	nop			; (mov r8, r8)
   11adc:	1fffe340 	.word	0x1fffe340

00011ae0 <RNG1_NofFreeElements>:
RNG1_NofFreeElements():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:141
**         ---             - Number of elements in the buffer.
** ===================================================================
*/
byte RNG1_NofFreeElements(void)
{
  return (byte)(RNG1_BUF_SIZE-RNG1_inSize);
   11ae0:	4b02      	ldr	r3, [pc, #8]	; (11aec <RNG1_NofFreeElements+0xc>)
   11ae2:	7818      	ldrb	r0, [r3, #0]
   11ae4:	2340      	movs	r3, #64	; 0x40
   11ae6:	1a18      	subs	r0, r3, r0
   11ae8:	b2c0      	uxtb	r0, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:142
}
   11aea:	4770      	bx	lr
   11aec:	1fffe340 	.word	0x1fffe340

00011af0 <RNG1_Init>:
RNG1_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:155
**     Returns     : Nothing
** ===================================================================
*/
void RNG1_Init(void)
{
  RNG1_inIdx = 0;
   11af0:	2300      	movs	r3, #0
   11af2:	4a03      	ldr	r2, [pc, #12]	; (11b00 <RNG1_Init+0x10>)
   11af4:	7013      	strb	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:156
  RNG1_outIdx = 0;
   11af6:	4a03      	ldr	r2, [pc, #12]	; (11b04 <RNG1_Init+0x14>)
   11af8:	7013      	strb	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:157
  RNG1_inSize = 0;
   11afa:	4a03      	ldr	r2, [pc, #12]	; (11b08 <RNG1_Init+0x18>)
   11afc:	7013      	strb	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:158
}
   11afe:	4770      	bx	lr
   11b00:	1fffe2fc 	.word	0x1fffe2fc
   11b04:	1fffe341 	.word	0x1fffe341
   11b08:	1fffe340 	.word	0x1fffe340

00011b0c <SystemTimer1_Interrupt>:
SystemTimer1_Interrupt():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:398
void SystemTimer1_Interrupt(LDD_RTOS_TISRParameter _isrParameter)
{
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  SystemTimer1_TDeviceDataPtr DeviceDataPrv = (SystemTimer1_TDeviceDataPtr)_isrParameter;

  SysTick_PDD_ClearInterruptFlag(SysTick_BASE_PTR); /* Clear interrupt flag */
   11b0c:	4a04      	ldr	r2, [pc, #16]	; (11b20 <SystemTimer1_Interrupt+0x14>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:394
**         and eventually invokes event(s) of the component.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void SystemTimer1_Interrupt(LDD_RTOS_TISRParameter _isrParameter)
{
   11b0e:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:398
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  SystemTimer1_TDeviceDataPtr DeviceDataPrv = (SystemTimer1_TDeviceDataPtr)_isrParameter;

  SysTick_PDD_ClearInterruptFlag(SysTick_BASE_PTR); /* Clear interrupt flag */
   11b10:	6811      	ldr	r1, [r2, #0]
   11b12:	4b04      	ldr	r3, [pc, #16]	; (11b24 <SystemTimer1_Interrupt+0x18>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:399
  SystemTimer1_OnCounterRestart(DeviceDataPrv->UserDataPtr); /* Invoke OnCounterRestart event */
   11b14:	6880      	ldr	r0, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:398
void SystemTimer1_Interrupt(LDD_RTOS_TISRParameter _isrParameter)
{
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  SystemTimer1_TDeviceDataPtr DeviceDataPrv = (SystemTimer1_TDeviceDataPtr)_isrParameter;

  SysTick_PDD_ClearInterruptFlag(SysTick_BASE_PTR); /* Clear interrupt flag */
   11b16:	400b      	ands	r3, r1
   11b18:	6013      	str	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:399
  SystemTimer1_OnCounterRestart(DeviceDataPrv->UserDataPtr); /* Invoke OnCounterRestart event */
   11b1a:	f7ff ff23 	bl	11964 <SystemTimer1_OnCounterRestart>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:400
}
   11b1e:	bd08      	pop	{r3, pc}
   11b20:	e000e010 	.word	0xe000e010
   11b24:	fffeffff 	.word	0xfffeffff

00011b28 <SystemTimer1_Init>:
SystemTimer1_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:157
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* SystemTimer1_Init(LDD_TUserData *UserDataPtr)
{
   11b28:	b538      	push	{r3, r4, r5, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:162
  /* Allocate device structure */
  SystemTimer1_TDeviceData *DeviceDataPrv;
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   11b2a:	4c11      	ldr	r4, [pc, #68]	; (11b70 <SystemTimer1_Init+0x48>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:175
  /* SYST_RVR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,RELOAD=0x00493DFF */
  SYST_RVR = SysTick_RVR_RELOAD(0x00493DFF); /* Setup reload value */
  /* SYST_CVR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CURRENT=0 */
  SYST_CVR = SysTick_CVR_CURRENT(0x00); /* Clear current value */
  /* SCB_SHPR3: PRI_15=0x80 */
  SCB_SHPR3 = (uint32_t)((SCB_SHPR3 & (uint32_t)~(uint32_t)(
   11b2c:	2580      	movs	r5, #128	; 0x80
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:162
{
  /* Allocate device structure */
  SystemTimer1_TDeviceData *DeviceDataPrv;
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   11b2e:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:166
  /* Interrupt vector(s) allocation */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrData = _int_get_isr_data(LDD_ivIndex_INT_SysTick);
   11b30:	200f      	movs	r0, #15
   11b32:	f7fe faa5 	bl	10080 <_int_get_isr_data>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:167
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrFunction = _int_install_isr(LDD_ivIndex_INT_SysTick, SystemTimer1_Interrupt, DeviceDataPrv);
   11b36:	1c22      	adds	r2, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:166
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Interrupt vector(s) allocation */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrData = _int_get_isr_data(LDD_ivIndex_INT_SysTick);
   11b38:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:167
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrFunction = _int_install_isr(LDD_ivIndex_INT_SysTick, SystemTimer1_Interrupt, DeviceDataPrv);
   11b3a:	490e      	ldr	r1, [pc, #56]	; (11b74 <SystemTimer1_Init+0x4c>)
   11b3c:	200f      	movs	r0, #15
   11b3e:	f7fe fabf 	bl	100c0 <_int_install_isr>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:169
  /* SYST_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COUNTFLAG=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CLKSOURCE=0,TICKINT=0,ENABLE=0 */
  SYST_CSR = 0x00U;                    /* Clear control register */
   11b42:	2300      	movs	r3, #0
   11b44:	4a0c      	ldr	r2, [pc, #48]	; (11b78 <SystemTimer1_Init+0x50>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:171
  /* SYST_RVR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,RELOAD=0x00493DFF */
  SYST_RVR = SysTick_RVR_RELOAD(0x00493DFF); /* Setup reload value */
   11b46:	490d      	ldr	r1, [pc, #52]	; (11b7c <SystemTimer1_Init+0x54>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:167
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Interrupt vector(s) allocation */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrData = _int_get_isr_data(LDD_ivIndex_INT_SysTick);
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrFunction = _int_install_isr(LDD_ivIndex_INT_SysTick, SystemTimer1_Interrupt, DeviceDataPrv);
   11b48:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:169
  /* SYST_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COUNTFLAG=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CLKSOURCE=0,TICKINT=0,ENABLE=0 */
  SYST_CSR = 0x00U;                    /* Clear control register */
   11b4a:	6013      	str	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:171
  /* SYST_RVR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,RELOAD=0x00493DFF */
  SYST_RVR = SysTick_RVR_RELOAD(0x00493DFF); /* Setup reload value */
   11b4c:	6051      	str	r1, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:175
  /* SYST_CVR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CURRENT=0 */
  SYST_CVR = SysTick_CVR_CURRENT(0x00); /* Clear current value */
  /* SCB_SHPR3: PRI_15=0x80 */
  SCB_SHPR3 = (uint32_t)((SCB_SHPR3 & (uint32_t)~(uint32_t)(
   11b4e:	21d2      	movs	r1, #210	; 0xd2
   11b50:	480b      	ldr	r0, [pc, #44]	; (11b80 <SystemTimer1_Init+0x58>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:173
  /* SYST_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COUNTFLAG=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CLKSOURCE=0,TICKINT=0,ENABLE=0 */
  SYST_CSR = 0x00U;                    /* Clear control register */
  /* SYST_RVR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,RELOAD=0x00493DFF */
  SYST_RVR = SysTick_RVR_RELOAD(0x00493DFF); /* Setup reload value */
  /* SYST_CVR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CURRENT=0 */
  SYST_CVR = SysTick_CVR_CURRENT(0x00); /* Clear current value */
   11b52:	6093      	str	r3, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:175
  /* SCB_SHPR3: PRI_15=0x80 */
  SCB_SHPR3 = (uint32_t)((SCB_SHPR3 & (uint32_t)~(uint32_t)(
   11b54:	0109      	lsls	r1, r1, #4
   11b56:	5843      	ldr	r3, [r0, r1]
   11b58:	062d      	lsls	r5, r5, #24
   11b5a:	021b      	lsls	r3, r3, #8
   11b5c:	0a1b      	lsrs	r3, r3, #8
   11b5e:	432b      	orrs	r3, r5
   11b60:	5043      	str	r3, [r0, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:181
               SCB_SHPR3_PRI_15(0x7F)
              )) | (uint32_t)(
               SCB_SHPR3_PRI_15(0x80)
              ));
  /* SYST_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COUNTFLAG=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CLKSOURCE=1,TICKINT=1,ENABLE=0 */
  SYST_CSR = (SysTick_CSR_CLKSOURCE_MASK | SysTick_CSR_TICKINT_MASK); /* Set up control register */
   11b62:	2306      	movs	r3, #6
   11b64:	6013      	str	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:183
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_SystemTimer1_ID,DeviceDataPrv);
   11b66:	4b07      	ldr	r3, [pc, #28]	; (11b84 <SystemTimer1_Init+0x5c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:185
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
}
   11b68:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:183
               SCB_SHPR3_PRI_15(0x80)
              ));
  /* SYST_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COUNTFLAG=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CLKSOURCE=1,TICKINT=1,ENABLE=0 */
  SYST_CSR = (SysTick_CSR_CLKSOURCE_MASK | SysTick_CSR_TICKINT_MASK); /* Set up control register */
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_SystemTimer1_ID,DeviceDataPrv);
   11b6a:	601c      	str	r4, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:185
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
}
   11b6c:	bd38      	pop	{r3, r4, r5, pc}
   11b6e:	46c0      	nop			; (mov r8, r8)
   11b70:	1fffe344 	.word	0x1fffe344
   11b74:	00011b0d 	.word	0x00011b0d
   11b78:	e000e010 	.word	0xe000e010
   11b7c:	00493dff 	.word	0x00493dff
   11b80:	e000e000 	.word	0xe000e000
   11b84:	1fffe2d8 	.word	0x1fffe2d8

00011b88 <SystemTimer1_Enable>:
SystemTimer1_Enable():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:238
*/
/* ===================================================================*/
LDD_TError SystemTimer1_Enable(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  SysTick_PDD_EnableDevice(SysTick_BASE_PTR, PDD_ENABLE); /* Enable the device */
   11b88:	2301      	movs	r3, #1
   11b8a:	4a03      	ldr	r2, [pc, #12]	; (11b98 <SystemTimer1_Enable+0x10>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:240
  return ERR_OK;
}
   11b8c:	2000      	movs	r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:238
*/
/* ===================================================================*/
LDD_TError SystemTimer1_Enable(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  SysTick_PDD_EnableDevice(SysTick_BASE_PTR, PDD_ENABLE); /* Enable the device */
   11b8e:	6811      	ldr	r1, [r2, #0]
   11b90:	430b      	orrs	r3, r1
   11b92:	6013      	str	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:240
  return ERR_OK;
}
   11b94:	4770      	bx	lr
   11b96:	46c0      	nop			; (mov r8, r8)
   11b98:	e000e010 	.word	0xe000e010

00011b9c <SystemTimer1_GetInputFrequency>:
SystemTimer1_GetInputFrequency():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:288
/* ===================================================================*/
uint32_t SystemTimer1_GetInputFrequency(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  return SystemTimer1_CNT_INP_FREQ_U_0;
}
   11b9c:	4800      	ldr	r0, [pc, #0]	; (11ba0 <SystemTimer1_GetInputFrequency+0x4>)
   11b9e:	4770      	bx	lr
   11ba0:	02dc6c00 	.word	0x02dc6c00

00011ba4 <SystemTimer1_GetPeriodTicks>:
SystemTimer1_GetPeriodTicks():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:319
LDD_TError SystemTimer1_GetPeriodTicks(LDD_TDeviceData *DeviceDataPtr, SystemTimer1_TValueType *TicksPtr)
{
  uint32_t tmp;

  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  tmp = (SystemTimer1_TValueType)(SysTick_PDD_ReadReloadValueReg(SysTick_BASE_PTR));
   11ba4:	4b03      	ldr	r3, [pc, #12]	; (11bb4 <SystemTimer1_GetPeriodTicks+0x10>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:323
  *TicksPtr = (SystemTimer1_TValueType)++tmp;
  *TicksPtr &= 0x00FFFFFFUL;
  return ERR_OK;                       /* OK */
}
   11ba6:	2000      	movs	r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:319
LDD_TError SystemTimer1_GetPeriodTicks(LDD_TDeviceData *DeviceDataPtr, SystemTimer1_TValueType *TicksPtr)
{
  uint32_t tmp;

  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  tmp = (SystemTimer1_TValueType)(SysTick_PDD_ReadReloadValueReg(SysTick_BASE_PTR));
   11ba8:	685b      	ldr	r3, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:320
  *TicksPtr = (SystemTimer1_TValueType)++tmp;
   11baa:	3301      	adds	r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:321
  *TicksPtr &= 0x00FFFFFFUL;
   11bac:	021b      	lsls	r3, r3, #8
   11bae:	0a1b      	lsrs	r3, r3, #8
   11bb0:	600b      	str	r3, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:323
  return ERR_OK;                       /* OK */
}
   11bb2:	4770      	bx	lr
   11bb4:	e000e010 	.word	0xe000e010

00011bb8 <SystemTimer1_GetCounterValue>:
SystemTimer1_GetCounterValue():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:380
*/
/* ===================================================================*/
SystemTimer1_TValueType SystemTimer1_GetCounterValue(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  return (SystemTimer1_TValueType)SysTick_PDD_ReadCurrentValueReg(SysTick_BASE_PTR);
   11bb8:	4b01      	ldr	r3, [pc, #4]	; (11bc0 <SystemTimer1_GetCounterValue+0x8>)
   11bba:	6898      	ldr	r0, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:381
}
   11bbc:	4770      	bx	lr
   11bbe:	46c0      	nop			; (mov r8, r8)
   11bc0:	e000e010 	.word	0xe000e010

00011bc4 <TestPin_KF_Time_Init>:
TestPin_KF_Time_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:130
  /* Allocate device structure */
  TestPin_KF_Time_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   11bc4:	4a0b      	ldr	r2, [pc, #44]	; (11bf4 <TestPin_KF_Time_Init+0x30>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:133
  /* Configure pin as output */
  /* GPIOC_PDDR: PDD|=0x0400 */
  GPIOC_PDDR |= GPIO_PDDR_PDD(0x0400);
   11bc6:	4b0c      	ldr	r3, [pc, #48]	; (11bf8 <TestPin_KF_Time_Init+0x34>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:130
  /* Allocate device structure */
  TestPin_KF_Time_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   11bc8:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:133
  /* Configure pin as output */
  /* GPIOC_PDDR: PDD|=0x0400 */
  GPIOC_PDDR |= GPIO_PDDR_PDD(0x0400);
   11bca:	2080      	movs	r0, #128	; 0x80
   11bcc:	6959      	ldr	r1, [r3, #20]
   11bce:	00c0      	lsls	r0, r0, #3
   11bd0:	4301      	orrs	r1, r0
   11bd2:	6159      	str	r1, [r3, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:136
  /* Set initialization value */
  /* GPIOC_PDOR: PDO&=~0x0400 */
  GPIOC_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x0400));
   11bd4:	6818      	ldr	r0, [r3, #0]
   11bd6:	4909      	ldr	r1, [pc, #36]	; (11bfc <TestPin_KF_Time_Init+0x38>)
   11bd8:	4001      	ands	r1, r0
   11bda:	6019      	str	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:139
  /* Initialization of Port Control register */
  /* PORTC_PCR10: ISF=0,MUX=1 */
  PORTC_PCR10 = (uint32_t)((PORTC_PCR10 & (uint32_t)~(uint32_t)(
   11bdc:	4908      	ldr	r1, [pc, #32]	; (11c00 <TestPin_KF_Time_Init+0x3c>)
   11bde:	4b09      	ldr	r3, [pc, #36]	; (11c04 <TestPin_KF_Time_Init+0x40>)
   11be0:	6a88      	ldr	r0, [r1, #40]	; 0x28
   11be2:	4003      	ands	r3, r0
   11be4:	2080      	movs	r0, #128	; 0x80
   11be6:	0040      	lsls	r0, r0, #1
   11be8:	4303      	orrs	r3, r0
   11bea:	628b      	str	r3, [r1, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:146
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TestPin_KF_Time_ID,DeviceDataPrv);
   11bec:	4b06      	ldr	r3, [pc, #24]	; (11c08 <TestPin_KF_Time_Init+0x44>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:148
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   11bee:	1c10      	adds	r0, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:146
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TestPin_KF_Time_ID,DeviceDataPrv);
   11bf0:	61da      	str	r2, [r3, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:148
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   11bf2:	4770      	bx	lr
   11bf4:	1fffe350 	.word	0x1fffe350
   11bf8:	400ff080 	.word	0x400ff080
   11bfc:	fffffbff 	.word	0xfffffbff
   11c00:	4004b000 	.word	0x4004b000
   11c04:	fefff8ff 	.word	0xfefff8ff
   11c08:	1fffe2d8 	.word	0x1fffe2d8

00011c0c <TestPin_KF_Time_ClrVal>:
TestPin_KF_Time_ClrVal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:229
*/
/* ===================================================================*/
void TestPin_KF_Time_ClrVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_ClearPortDataOutputMask(TestPin_KF_Time_MODULE_BASE_ADDRESS, TestPin_KF_Time_PORT_MASK);
   11c0c:	2280      	movs	r2, #128	; 0x80
   11c0e:	4b02      	ldr	r3, [pc, #8]	; (11c18 <TestPin_KF_Time_ClrVal+0xc>)
   11c10:	00d2      	lsls	r2, r2, #3
   11c12:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:230
}
   11c14:	4770      	bx	lr
   11c16:	46c0      	nop			; (mov r8, r8)
   11c18:	f8000080 	.word	0xf8000080

00011c1c <TestPin_KF_Time_SetVal>:
TestPin_KF_Time_SetVal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:249
*/
/* ===================================================================*/
void TestPin_KF_Time_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(TestPin_KF_Time_MODULE_BASE_ADDRESS, TestPin_KF_Time_PORT_MASK);
   11c1c:	2280      	movs	r2, #128	; 0x80
   11c1e:	4b02      	ldr	r3, [pc, #8]	; (11c28 <TestPin_KF_Time_SetVal+0xc>)
   11c20:	00d2      	lsls	r2, r2, #3
   11c22:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:250
}
   11c24:	4770      	bx	lr
   11c26:	46c0      	nop			; (mov r8, r8)
   11c28:	f8000080 	.word	0xf8000080

00011c2c <TestPin_MagCal_Time_Init>:
TestPin_MagCal_Time_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:130
  /* Allocate device structure */
  TestPin_MagCal_Time_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   11c2c:	4a0b      	ldr	r2, [pc, #44]	; (11c5c <TestPin_MagCal_Time_Init+0x30>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:133
  /* Configure pin as output */
  /* GPIOC_PDDR: PDD|=0x0800 */
  GPIOC_PDDR |= GPIO_PDDR_PDD(0x0800);
   11c2e:	4b0c      	ldr	r3, [pc, #48]	; (11c60 <TestPin_MagCal_Time_Init+0x34>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:130
  /* Allocate device structure */
  TestPin_MagCal_Time_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   11c30:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:133
  /* Configure pin as output */
  /* GPIOC_PDDR: PDD|=0x0800 */
  GPIOC_PDDR |= GPIO_PDDR_PDD(0x0800);
   11c32:	2080      	movs	r0, #128	; 0x80
   11c34:	6959      	ldr	r1, [r3, #20]
   11c36:	0100      	lsls	r0, r0, #4
   11c38:	4301      	orrs	r1, r0
   11c3a:	6159      	str	r1, [r3, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:136
  /* Set initialization value */
  /* GPIOC_PDOR: PDO&=~0x0800 */
  GPIOC_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x0800));
   11c3c:	6818      	ldr	r0, [r3, #0]
   11c3e:	4909      	ldr	r1, [pc, #36]	; (11c64 <TestPin_MagCal_Time_Init+0x38>)
   11c40:	4001      	ands	r1, r0
   11c42:	6019      	str	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:139
  /* Initialization of Port Control register */
  /* PORTC_PCR11: ISF=0,MUX=1 */
  PORTC_PCR11 = (uint32_t)((PORTC_PCR11 & (uint32_t)~(uint32_t)(
   11c44:	4908      	ldr	r1, [pc, #32]	; (11c68 <TestPin_MagCal_Time_Init+0x3c>)
   11c46:	4b09      	ldr	r3, [pc, #36]	; (11c6c <TestPin_MagCal_Time_Init+0x40>)
   11c48:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
   11c4a:	4003      	ands	r3, r0
   11c4c:	2080      	movs	r0, #128	; 0x80
   11c4e:	0040      	lsls	r0, r0, #1
   11c50:	4303      	orrs	r3, r0
   11c52:	62cb      	str	r3, [r1, #44]	; 0x2c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:146
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TestPin_MagCal_Time_ID,DeviceDataPrv);
   11c54:	4b06      	ldr	r3, [pc, #24]	; (11c70 <TestPin_MagCal_Time_Init+0x44>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:148
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   11c56:	1c10      	adds	r0, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:146
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TestPin_MagCal_Time_ID,DeviceDataPrv);
   11c58:	621a      	str	r2, [r3, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:148
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   11c5a:	4770      	bx	lr
   11c5c:	1fffe354 	.word	0x1fffe354
   11c60:	400ff080 	.word	0x400ff080
   11c64:	fffff7ff 	.word	0xfffff7ff
   11c68:	4004b000 	.word	0x4004b000
   11c6c:	fefff8ff 	.word	0xfefff8ff
   11c70:	1fffe2d8 	.word	0x1fffe2d8

00011c74 <TestPin_MagCal_Time_ClrVal>:
TestPin_MagCal_Time_ClrVal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:229
*/
/* ===================================================================*/
void TestPin_MagCal_Time_ClrVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_ClearPortDataOutputMask(TestPin_MagCal_Time_MODULE_BASE_ADDRESS, TestPin_MagCal_Time_PORT_MASK);
   11c74:	2280      	movs	r2, #128	; 0x80
   11c76:	4b02      	ldr	r3, [pc, #8]	; (11c80 <TestPin_MagCal_Time_ClrVal+0xc>)
   11c78:	0112      	lsls	r2, r2, #4
   11c7a:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:230
}
   11c7c:	4770      	bx	lr
   11c7e:	46c0      	nop			; (mov r8, r8)
   11c80:	f8000080 	.word	0xf8000080

00011c84 <TestPin_MagCal_Time_SetVal>:
TestPin_MagCal_Time_SetVal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:249
*/
/* ===================================================================*/
void TestPin_MagCal_Time_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(TestPin_MagCal_Time_MODULE_BASE_ADDRESS, TestPin_MagCal_Time_PORT_MASK);
   11c84:	2280      	movs	r2, #128	; 0x80
   11c86:	4b02      	ldr	r3, [pc, #8]	; (11c90 <TestPin_MagCal_Time_SetVal+0xc>)
   11c88:	0112      	lsls	r2, r2, #4
   11c8a:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:250
}
   11c8c:	4770      	bx	lr
   11c8e:	46c0      	nop			; (mov r8, r8)
   11c90:	f8000080 	.word	0xf8000080

00011c94 <UART_Interrupt>:
UART_Interrupt():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:503
{
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)_isrParameter;
  register uint32_t StatReg = UART0_PDD_ReadInterruptStatusReg(UART0_BASE_PTR); /* Read status register */

  if (StatReg & (UART0_S1_NF_MASK | UART0_S1_OR_MASK | UART0_S1_FE_MASK | UART0_S1_PF_MASK)) { /* Is any error flag set? */
   11c94:	220f      	movs	r2, #15
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:498
**         interrupt. Calls InterruptTX/InterruptRX methods.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void UART_Interrupt(LDD_RTOS_TISRParameter _isrParameter)
{
   11c96:	b538      	push	{r3, r4, r5, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:501
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)_isrParameter;
  register uint32_t StatReg = UART0_PDD_ReadInterruptStatusReg(UART0_BASE_PTR); /* Read status register */
   11c98:	4b34      	ldr	r3, [pc, #208]	; (11d6c <UART_Interrupt+0xd8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:498
**         interrupt. Calls InterruptTX/InterruptRX methods.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void UART_Interrupt(LDD_RTOS_TISRParameter _isrParameter)
{
   11c9a:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:501
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)_isrParameter;
  register uint32_t StatReg = UART0_PDD_ReadInterruptStatusReg(UART0_BASE_PTR); /* Read status register */
   11c9c:	791c      	ldrb	r4, [r3, #4]
   11c9e:	b2e4      	uxtb	r4, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:503

  if (StatReg & (UART0_S1_NF_MASK | UART0_S1_OR_MASK | UART0_S1_FE_MASK | UART0_S1_PF_MASK)) { /* Is any error flag set? */
   11ca0:	4222      	tst	r2, r4
   11ca2:	d003      	beq.n	11cac <UART_Interrupt+0x18>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:504
    UART0_PDD_ClearInterruptFlags(UART0_BASE_PTR, (UART0_S1_NF_MASK | UART0_S1_OR_MASK | UART0_S1_FE_MASK | UART0_S1_PF_MASK));
   11ca4:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:505
    (void)UART0_PDD_GetChar8(UART0_BASE_PTR); /* Dummy read 8-bit character from receiver */
   11ca6:	79db      	ldrb	r3, [r3, #7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:506
    StatReg &= (uint32_t)(~(uint32_t)UART0_S1_RDRF_MASK); /* Clear the receive data flag to discard the errorneous data */
   11ca8:	2320      	movs	r3, #32
   11caa:	439c      	bics	r4, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:508
  }
  if (StatReg & UART0_S1_RDRF_MASK) {  /* Is the receiver's interrupt flag set? */
   11cac:	06a3      	lsls	r3, r4, #26
   11cae:	d41c      	bmi.n	11cea <UART_Interrupt+0x56>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:511
    InterruptRx(DeviceDataPrv);        /* If yes, then invoke the internal service routine. This routine is inlined. */
  }
  if (DeviceDataPrv->SerFlag & ENABLED_TX_INT) { /* Is the transmitter interrupt enabled? */
   11cb0:	2301      	movs	r3, #1
   11cb2:	882a      	ldrh	r2, [r5, #0]
   11cb4:	4213      	tst	r3, r2
   11cb6:	d002      	beq.n	11cbe <UART_Interrupt+0x2a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:512
    if (StatReg & UART0_S1_TDRE_MASK) { /* Is the transmitter empty? */
   11cb8:	2280      	movs	r2, #128	; 0x80
   11cba:	4222      	tst	r2, r4
   11cbc:	d12c      	bne.n	11d18 <UART_Interrupt+0x84>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:516
      InterruptTx(DeviceDataPrv);      /* If yes, then invoke the internal service routine. This routine is inlined. */
    }
  }
  if ((UART0_PDD_GetTxCompleteInterruptMask(UART0_BASE_PTR) != 0U)  && (StatReg & UART0_S1_TC_MASK)) { /* Is a transmission completed? */
   11cbe:	2240      	movs	r2, #64	; 0x40
   11cc0:	4b2a      	ldr	r3, [pc, #168]	; (11d6c <UART_Interrupt+0xd8>)
   11cc2:	78d9      	ldrb	r1, [r3, #3]
   11cc4:	420a      	tst	r2, r1
   11cc6:	d001      	beq.n	11ccc <UART_Interrupt+0x38>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:516 (discriminator 1)
   11cc8:	4222      	tst	r2, r4
   11cca:	d100      	bne.n	11cce <UART_Interrupt+0x3a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:521
    UART0_PDD_DisableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER_COMPLETE); /* If yes then disable TX complete interrupt */
    DeviceDataPrv->SerFlag |= TX_COMPLETED; /* Set the flag */
    UART_OnTxComplete(DeviceDataPrv->UserDataPtr); /* If yes then invoke user event */
  }
}
   11ccc:	bd38      	pop	{r3, r4, r5, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:517
    if (StatReg & UART0_S1_TDRE_MASK) { /* Is the transmitter empty? */
      InterruptTx(DeviceDataPrv);      /* If yes, then invoke the internal service routine. This routine is inlined. */
    }
  }
  if ((UART0_PDD_GetTxCompleteInterruptMask(UART0_BASE_PTR) != 0U)  && (StatReg & UART0_S1_TC_MASK)) { /* Is a transmission completed? */
    UART0_PDD_DisableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER_COMPLETE); /* If yes then disable TX complete interrupt */
   11cce:	78d9      	ldrb	r1, [r3, #3]
   11cd0:	4391      	bics	r1, r2
   11cd2:	70d9      	strb	r1, [r3, #3]
   11cd4:	799a      	ldrb	r2, [r3, #6]
   11cd6:	b2d2      	uxtb	r2, r2
   11cd8:	719a      	strb	r2, [r3, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:518
    DeviceDataPrv->SerFlag |= TX_COMPLETED; /* Set the flag */
   11cda:	2304      	movs	r3, #4
   11cdc:	882a      	ldrh	r2, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:519
    UART_OnTxComplete(DeviceDataPrv->UserDataPtr); /* If yes then invoke user event */
   11cde:	69e8      	ldr	r0, [r5, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:518
      InterruptTx(DeviceDataPrv);      /* If yes, then invoke the internal service routine. This routine is inlined. */
    }
  }
  if ((UART0_PDD_GetTxCompleteInterruptMask(UART0_BASE_PTR) != 0U)  && (StatReg & UART0_S1_TC_MASK)) { /* Is a transmission completed? */
    UART0_PDD_DisableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER_COMPLETE); /* If yes then disable TX complete interrupt */
    DeviceDataPrv->SerFlag |= TX_COMPLETED; /* Set the flag */
   11ce0:	4313      	orrs	r3, r2
   11ce2:	802b      	strh	r3, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:519
    UART_OnTxComplete(DeviceDataPrv->UserDataPtr); /* If yes then invoke user event */
   11ce4:	f7f1 f864 	bl	2db0 <UART_OnTxComplete>
   11ce8:	e7f0      	b.n	11ccc <UART_Interrupt+0x38>
InterruptRx():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:449
*/
static void InterruptRx(UART_TDeviceDataPtr DeviceDataPrv)
{
  register uint16_t Data;              /* Temporary variable for data */

  Data = (uint16_t)UART0_PDD_GetChar8(UART0_BASE_PTR); /* Read an 8-bit character from the receiver */
   11cea:	4b20      	ldr	r3, [pc, #128]	; (11d6c <UART_Interrupt+0xd8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:450
  if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the receive block operation pending? */
   11cec:	892a      	ldrh	r2, [r5, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:449
*/
static void InterruptRx(UART_TDeviceDataPtr DeviceDataPrv)
{
  register uint16_t Data;              /* Temporary variable for data */

  Data = (uint16_t)UART0_PDD_GetChar8(UART0_BASE_PTR); /* Read an 8-bit character from the receiver */
   11cee:	79db      	ldrb	r3, [r3, #7]
   11cf0:	b2db      	uxtb	r3, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:450
  if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the receive block operation pending? */
   11cf2:	2a00      	cmp	r2, #0
   11cf4:	d0dc      	beq.n	11cb0 <UART_Interrupt+0x1c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:451
    *(DeviceDataPrv->InpDataPtr++) = (uint8_t)Data; /* Put an 8-bit character to the receive buffer */
   11cf6:	686a      	ldr	r2, [r5, #4]
   11cf8:	1c51      	adds	r1, r2, #1
   11cfa:	6069      	str	r1, [r5, #4]
   11cfc:	7013      	strb	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:452
    DeviceDataPrv->InpRecvDataNum++;   /* Increment received char. counter */
   11cfe:	886b      	ldrh	r3, [r5, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:453
    if (DeviceDataPrv->InpRecvDataNum == DeviceDataPrv->InpDataNumReq) { /* Is the requested number of characters received? */
   11d00:	892a      	ldrh	r2, [r5, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:452
  register uint16_t Data;              /* Temporary variable for data */

  Data = (uint16_t)UART0_PDD_GetChar8(UART0_BASE_PTR); /* Read an 8-bit character from the receiver */
  if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the receive block operation pending? */
    *(DeviceDataPrv->InpDataPtr++) = (uint8_t)Data; /* Put an 8-bit character to the receive buffer */
    DeviceDataPrv->InpRecvDataNum++;   /* Increment received char. counter */
   11d02:	3301      	adds	r3, #1
   11d04:	b29b      	uxth	r3, r3
   11d06:	806b      	strh	r3, [r5, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:453
    if (DeviceDataPrv->InpRecvDataNum == DeviceDataPrv->InpDataNumReq) { /* Is the requested number of characters received? */
   11d08:	429a      	cmp	r2, r3
   11d0a:	d1d1      	bne.n	11cb0 <UART_Interrupt+0x1c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:454
      DeviceDataPrv->InpDataNumReq = 0x00U; /* If yes then clear number of requested characters to be received. */
   11d0c:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:455
      UART_OnBlockReceived(DeviceDataPrv->UserDataPtr);
   11d0e:	69e8      	ldr	r0, [r5, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:454
  Data = (uint16_t)UART0_PDD_GetChar8(UART0_BASE_PTR); /* Read an 8-bit character from the receiver */
  if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the receive block operation pending? */
    *(DeviceDataPrv->InpDataPtr++) = (uint8_t)Data; /* Put an 8-bit character to the receive buffer */
    DeviceDataPrv->InpRecvDataNum++;   /* Increment received char. counter */
    if (DeviceDataPrv->InpRecvDataNum == DeviceDataPrv->InpDataNumReq) { /* Is the requested number of characters received? */
      DeviceDataPrv->InpDataNumReq = 0x00U; /* If yes then clear number of requested characters to be received. */
   11d10:	812b      	strh	r3, [r5, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:455
      UART_OnBlockReceived(DeviceDataPrv->UserDataPtr);
   11d12:	f7f1 f84f 	bl	2db4 <UART_OnBlockReceived>
   11d16:	e7cb      	b.n	11cb0 <UART_Interrupt+0x1c>
InterruptTx():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:473
** ===================================================================
*/
static void InterruptTx(UART_TDeviceDataPtr DeviceDataPrv)
{

  if (DeviceDataPrv->OutSentDataNum < DeviceDataPrv->OutDataNumReq) { /* Is number of sent characters less than the number of requested incoming characters? */
   11d18:	8969      	ldrh	r1, [r5, #10]
   11d1a:	8a2a      	ldrh	r2, [r5, #16]
   11d1c:	4291      	cmp	r1, r2
   11d1e:	d212      	bcs.n	11d46 <UART_Interrupt+0xb2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:474
    UART0_PDD_PutChar8(UART0_BASE_PTR, *(DeviceDataPrv->OutDataPtr++)); /* Put a 8-bit character to the transmit register */
   11d20:	68eb      	ldr	r3, [r5, #12]
   11d22:	1c5a      	adds	r2, r3, #1
   11d24:	60ea      	str	r2, [r5, #12]
   11d26:	781a      	ldrb	r2, [r3, #0]
   11d28:	4b10      	ldr	r3, [pc, #64]	; (11d6c <UART_Interrupt+0xd8>)
   11d2a:	71da      	strb	r2, [r3, #7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:475
    DeviceDataPrv->OutSentDataNum++;   /* Increment the counter of sent characters. */
   11d2c:	896b      	ldrh	r3, [r5, #10]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:476
    if (DeviceDataPrv->OutSentDataNum == DeviceDataPrv->OutDataNumReq) {
   11d2e:	8a2a      	ldrh	r2, [r5, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:475
static void InterruptTx(UART_TDeviceDataPtr DeviceDataPrv)
{

  if (DeviceDataPrv->OutSentDataNum < DeviceDataPrv->OutDataNumReq) { /* Is number of sent characters less than the number of requested incoming characters? */
    UART0_PDD_PutChar8(UART0_BASE_PTR, *(DeviceDataPrv->OutDataPtr++)); /* Put a 8-bit character to the transmit register */
    DeviceDataPrv->OutSentDataNum++;   /* Increment the counter of sent characters. */
   11d30:	3301      	adds	r3, #1
   11d32:	b29b      	uxth	r3, r3
   11d34:	816b      	strh	r3, [r5, #10]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:476
    if (DeviceDataPrv->OutSentDataNum == DeviceDataPrv->OutDataNumReq) {
   11d36:	429a      	cmp	r2, r3
   11d38:	d1c1      	bne.n	11cbe <UART_Interrupt+0x2a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:477
      DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBlock() */
   11d3a:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:478
      UART_OnBlockSent(DeviceDataPrv->UserDataPtr);
   11d3c:	69e8      	ldr	r0, [r5, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:477

  if (DeviceDataPrv->OutSentDataNum < DeviceDataPrv->OutDataNumReq) { /* Is number of sent characters less than the number of requested incoming characters? */
    UART0_PDD_PutChar8(UART0_BASE_PTR, *(DeviceDataPrv->OutDataPtr++)); /* Put a 8-bit character to the transmit register */
    DeviceDataPrv->OutSentDataNum++;   /* Increment the counter of sent characters. */
    if (DeviceDataPrv->OutSentDataNum == DeviceDataPrv->OutDataNumReq) {
      DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBlock() */
   11d3e:	822b      	strh	r3, [r5, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:478
      UART_OnBlockSent(DeviceDataPrv->UserDataPtr);
   11d40:	f7f1 f820 	bl	2d84 <UART_OnBlockSent>
   11d44:	e7bb      	b.n	11cbe <UART_Interrupt+0x2a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:481
    }
  } else {
    UART0_PDD_DisableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER); /* Disable TX interrupt */
   11d46:	207f      	movs	r0, #127	; 0x7f
   11d48:	4a08      	ldr	r2, [pc, #32]	; (11d6c <UART_Interrupt+0xd8>)
   11d4a:	78d1      	ldrb	r1, [r2, #3]
   11d4c:	4001      	ands	r1, r0
   11d4e:	70d1      	strb	r1, [r2, #3]
   11d50:	7991      	ldrb	r1, [r2, #6]
   11d52:	b2c9      	uxtb	r1, r1
   11d54:	7191      	strb	r1, [r2, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:482
    UART0_PDD_EnableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER_COMPLETE); /* Enable TX complete interrupt */
   11d56:	2140      	movs	r1, #64	; 0x40
   11d58:	78d0      	ldrb	r0, [r2, #3]
   11d5a:	4301      	orrs	r1, r0
   11d5c:	70d1      	strb	r1, [r2, #3]
   11d5e:	7991      	ldrb	r1, [r2, #6]
   11d60:	b2c9      	uxtb	r1, r1
   11d62:	7191      	strb	r1, [r2, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:483
    DeviceDataPrv->SerFlag &= (uint16_t)(~(uint16_t)ENABLED_TX_INT); /* Clear the flag ENABLED_TX_INT */
   11d64:	882a      	ldrh	r2, [r5, #0]
   11d66:	439a      	bics	r2, r3
   11d68:	802a      	strh	r2, [r5, #0]
   11d6a:	e7a8      	b.n	11cbe <UART_Interrupt+0x2a>
   11d6c:	4006a000 	.word	0x4006a000

00011d70 <UART_Init>:
UART_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:163
**     @return
**                         - Device data structure pointer.
*/
/* ===================================================================*/
LDD_TDeviceData* UART_Init(LDD_TUserData *UserDataPtr)
{
   11d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:170
  UART_TDeviceDataPtr DeviceDataPrv;
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;

  /* Clear the receive counters and pointer */
  DeviceDataPrv->InpRecvDataNum = 0x00U; /* Clear the counter of received characters */
   11d72:	2500      	movs	r5, #0
   11d74:	4c35      	ldr	r4, [pc, #212]	; (11e4c <UART_Init+0xdc>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:186
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_UART0);
  DeviceDataPrv->SavedISRSettings.isrFunction = _int_install_isr(LDD_ivIndex_INT_UART0, UART_Interrupt, DeviceDataPrv);
  /* SIM_SCGC4: UART0=1 */
  SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
  /* PORTA_PCR1: ISF=0,MUX=2 */
  PORTA_PCR1 = (uint32_t)((PORTA_PCR1 & (uint32_t)~(uint32_t)(
   11d76:	2780      	movs	r7, #128	; 0x80
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:177
  DeviceDataPrv->InpDataPtr = NULL;    /* Clear the buffer pointer for received characters */
  /* Clear the transmit counters and pointer */
  DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters */
  DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBlock() */
  DeviceDataPrv->OutDataPtr = NULL;    /* Clear the buffer pointer for data to be transmitted */
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   11d78:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:181
  /* Allocate interrupt vectors */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_UART0);
   11d7a:	201c      	movs	r0, #28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:170
  UART_TDeviceDataPtr DeviceDataPrv;
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;

  /* Clear the receive counters and pointer */
  DeviceDataPrv->InpRecvDataNum = 0x00U; /* Clear the counter of received characters */
   11d7c:	8065      	strh	r5, [r4, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:171
  DeviceDataPrv->InpDataNumReq = 0x00U; /* Clear the counter of characters to receive by ReceiveBlock() */
   11d7e:	8125      	strh	r5, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:172
  DeviceDataPrv->InpDataPtr = NULL;    /* Clear the buffer pointer for received characters */
   11d80:	6065      	str	r5, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:174
  /* Clear the transmit counters and pointer */
  DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters */
   11d82:	8165      	strh	r5, [r4, #10]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:175
  DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBlock() */
   11d84:	8225      	strh	r5, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:176
  DeviceDataPrv->OutDataPtr = NULL;    /* Clear the buffer pointer for data to be transmitted */
   11d86:	60e5      	str	r5, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:181
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Allocate interrupt vectors */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_UART0);
   11d88:	f7fe f97a 	bl	10080 <_int_get_isr_data>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:182
  DeviceDataPrv->SavedISRSettings.isrFunction = _int_install_isr(LDD_ivIndex_INT_UART0, UART_Interrupt, DeviceDataPrv);
   11d8c:	1c22      	adds	r2, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:181
  DeviceDataPrv->OutDataPtr = NULL;    /* Clear the buffer pointer for data to be transmitted */
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Allocate interrupt vectors */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_UART0);
   11d8e:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:182
  DeviceDataPrv->SavedISRSettings.isrFunction = _int_install_isr(LDD_ivIndex_INT_UART0, UART_Interrupt, DeviceDataPrv);
   11d90:	492f      	ldr	r1, [pc, #188]	; (11e50 <UART_Init+0xe0>)
   11d92:	201c      	movs	r0, #28
   11d94:	f7fe f994 	bl	100c0 <_int_install_isr>
   11d98:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:184
  /* SIM_SCGC4: UART0=1 */
  SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
   11d9a:	2080      	movs	r0, #128	; 0x80
   11d9c:	492d      	ldr	r1, [pc, #180]	; (11e54 <UART_Init+0xe4>)
   11d9e:	4a2e      	ldr	r2, [pc, #184]	; (11e58 <UART_Init+0xe8>)
   11da0:	00c0      	lsls	r0, r0, #3
   11da2:	588b      	ldr	r3, [r1, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:186
  /* PORTA_PCR1: ISF=0,MUX=2 */
  PORTA_PCR1 = (uint32_t)((PORTA_PCR1 & (uint32_t)~(uint32_t)(
   11da4:	00bf      	lsls	r7, r7, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:184
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_UART0);
  DeviceDataPrv->SavedISRSettings.isrFunction = _int_install_isr(LDD_ivIndex_INT_UART0, UART_Interrupt, DeviceDataPrv);
  /* SIM_SCGC4: UART0=1 */
  SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
   11da6:	4303      	orrs	r3, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:186
  /* PORTA_PCR1: ISF=0,MUX=2 */
  PORTA_PCR1 = (uint32_t)((PORTA_PCR1 & (uint32_t)~(uint32_t)(
   11da8:	482c      	ldr	r0, [pc, #176]	; (11e5c <UART_Init+0xec>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:184
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_UART0);
  DeviceDataPrv->SavedISRSettings.isrFunction = _int_install_isr(LDD_ivIndex_INT_UART0, UART_Interrupt, DeviceDataPrv);
  /* SIM_SCGC4: UART0=1 */
  SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
   11daa:	508b      	str	r3, [r1, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:186
  /* PORTA_PCR1: ISF=0,MUX=2 */
  PORTA_PCR1 = (uint32_t)((PORTA_PCR1 & (uint32_t)~(uint32_t)(
   11dac:	6842      	ldr	r2, [r0, #4]
   11dae:	4b2c      	ldr	r3, [pc, #176]	; (11e60 <UART_Init+0xf0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:170
  UART_TDeviceDataPtr DeviceDataPrv;
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;

  /* Clear the receive counters and pointer */
  DeviceDataPrv->InpRecvDataNum = 0x00U; /* Clear the counter of received characters */
   11db0:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:186
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_UART0);
  DeviceDataPrv->SavedISRSettings.isrFunction = _int_install_isr(LDD_ivIndex_INT_UART0, UART_Interrupt, DeviceDataPrv);
  /* SIM_SCGC4: UART0=1 */
  SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
  /* PORTA_PCR1: ISF=0,MUX=2 */
  PORTA_PCR1 = (uint32_t)((PORTA_PCR1 & (uint32_t)~(uint32_t)(
   11db2:	401a      	ands	r2, r3
   11db4:	433a      	orrs	r2, r7
   11db6:	6042      	str	r2, [r0, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:193
                PORT_PCR_MUX(0x05)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x02)
               ));
  /* PORTA_PCR2: ISF=0,MUX=2 */
  PORTA_PCR2 = (uint32_t)((PORTA_PCR2 & (uint32_t)~(uint32_t)(
   11db8:	6882      	ldr	r2, [r0, #8]
   11dba:	4013      	ands	r3, r2
   11dbc:	433b      	orrs	r3, r7
   11dbe:	6083      	str	r3, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:200
                PORT_PCR_MUX(0x05)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x02)
               ));
  /* NVIC_IPR3: PRI_12=0x80 */
  NVIC_IPR3 = (uint32_t)((NVIC_IPR3 & (uint32_t)~(uint32_t)(
   11dc0:	20ff      	movs	r0, #255	; 0xff
   11dc2:	4b28      	ldr	r3, [pc, #160]	; (11e64 <UART_Init+0xf4>)
   11dc4:	370d      	adds	r7, #13
   11dc6:	37ff      	adds	r7, #255	; 0xff
   11dc8:	59da      	ldr	r2, [r3, r7]
   11dca:	4382      	bics	r2, r0
   11dcc:	387f      	subs	r0, #127	; 0x7f
   11dce:	4302      	orrs	r2, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:206
               NVIC_IP_PRI_12(0x7F)
              )) | (uint32_t)(
               NVIC_IP_PRI_12(0x80)
              ));
  /* NVIC_ISER: SETENA|=0x1000 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x1000);
   11dd0:	2080      	movs	r0, #128	; 0x80
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:200
                PORT_PCR_MUX(0x05)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x02)
               ));
  /* NVIC_IPR3: PRI_12=0x80 */
  NVIC_IPR3 = (uint32_t)((NVIC_IPR3 & (uint32_t)~(uint32_t)(
   11dd2:	51da      	str	r2, [r3, r7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:206
               NVIC_IP_PRI_12(0x7F)
              )) | (uint32_t)(
               NVIC_IP_PRI_12(0x80)
              ));
  /* NVIC_ISER: SETENA|=0x1000 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x1000);
   11dd4:	681a      	ldr	r2, [r3, #0]
   11dd6:	0140      	lsls	r0, r0, #5
   11dd8:	4302      	orrs	r2, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:207
  UART0_PDD_EnableTransmitter(UART0_BASE_PTR, PDD_DISABLE); /* Disable transmitter. */
   11dda:	2008      	movs	r0, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:206
               NVIC_IP_PRI_12(0x7F)
              )) | (uint32_t)(
               NVIC_IP_PRI_12(0x80)
              ));
  /* NVIC_ISER: SETENA|=0x1000 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x1000);
   11ddc:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:207
  UART0_PDD_EnableTransmitter(UART0_BASE_PTR, PDD_DISABLE); /* Disable transmitter. */
   11dde:	4b22      	ldr	r3, [pc, #136]	; (11e68 <UART_Init+0xf8>)
   11de0:	78da      	ldrb	r2, [r3, #3]
   11de2:	4382      	bics	r2, r0
   11de4:	70da      	strb	r2, [r3, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:208
  UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_DISABLE); /* Disable receiver. */
   11de6:	78da      	ldrb	r2, [r3, #3]
   11de8:	3804      	subs	r0, #4
   11dea:	4382      	bics	r2, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:218
  UART0_C3 = 0x00U;                    /*  Set the C3 register */
  /* UART0_C4: MAEN1=0,MAEN2=0,M10=0,OSR=0 */
  UART0_C4 = UART0_C4_OSR(0x00);       /*  Set the C4 register */
  /* UART0_S2: LBKDIF=0,RXEDGIF=0,MSBF=0,RXINV=0,RWUID=0,BRK13=0,LBKDE=0,RAF=0 */
  UART0_S2 = 0x00U;                    /*  Set the S2 register */
  SIM_PDD_SetClockSourceUART0(SIM_BASE_PTR, SIM_PDD_UART0_PLL_FLL_CLOCK);
   11dec:	481f      	ldr	r0, [pc, #124]	; (11e6c <UART_Init+0xfc>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:208
               NVIC_IP_PRI_12(0x80)
              ));
  /* NVIC_ISER: SETENA|=0x1000 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x1000);
  UART0_PDD_EnableTransmitter(UART0_BASE_PTR, PDD_DISABLE); /* Disable transmitter. */
  UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_DISABLE); /* Disable receiver. */
   11dee:	70da      	strb	r2, [r3, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:209
  DeviceDataPrv->SerFlag = 0x00U;      /* Reset flags */
   11df0:	8025      	strh	r5, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:211
  /* UART0_C1: LOOPS=0,DOZEEN=0,RSRC=0,M=0,WAKE=0,ILT=0,PE=0,PT=0 */
  UART0_C1 = 0x00U;                    /*  Set the C1 register */
   11df2:	709e      	strb	r6, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:213
  /* UART0_C3: R8T9=0,R9T8=0,TXDIR=0,TXINV=0,ORIE=0,NEIE=0,FEIE=0,PEIE=0 */
  UART0_C3 = 0x00U;                    /*  Set the C3 register */
   11df4:	719e      	strb	r6, [r3, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:215
  /* UART0_C4: MAEN1=0,MAEN2=0,M10=0,OSR=0 */
  UART0_C4 = UART0_C4_OSR(0x00);       /*  Set the C4 register */
   11df6:	729e      	strb	r6, [r3, #10]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:217
  /* UART0_S2: LBKDIF=0,RXEDGIF=0,MSBF=0,RXINV=0,RWUID=0,BRK13=0,LBKDE=0,RAF=0 */
  UART0_S2 = 0x00U;                    /*  Set the S2 register */
   11df8:	715e      	strb	r6, [r3, #5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:218
  SIM_PDD_SetClockSourceUART0(SIM_BASE_PTR, SIM_PDD_UART0_PLL_FLL_CLOCK);
   11dfa:	580d      	ldr	r5, [r1, r0]
   11dfc:	4a1c      	ldr	r2, [pc, #112]	; (11e70 <UART_Init+0x100>)
   11dfe:	402a      	ands	r2, r5
   11e00:	2580      	movs	r5, #128	; 0x80
   11e02:	04ed      	lsls	r5, r5, #19
   11e04:	432a      	orrs	r2, r5
   11e06:	500a      	str	r2, [r1, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:219
  UART0_PDD_SetBaudRate(UART0_BASE_PTR, 52U); /* Set the baud rate register. */
   11e08:	211f      	movs	r1, #31
   11e0a:	781a      	ldrb	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:228
  UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_ENABLE); /* Enable receiver */
  UART0_PDD_EnableInterrupt(UART0_BASE_PTR, ( UART0_PDD_INTERRUPT_RECEIVER )); /* Enable interrupts */
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_UART_ID,DeviceDataPrv);
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   11e0c:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:219
  /* UART0_C4: MAEN1=0,MAEN2=0,M10=0,OSR=0 */
  UART0_C4 = UART0_C4_OSR(0x00);       /*  Set the C4 register */
  /* UART0_S2: LBKDIF=0,RXEDGIF=0,MSBF=0,RXINV=0,RWUID=0,BRK13=0,LBKDE=0,RAF=0 */
  UART0_S2 = 0x00U;                    /*  Set the S2 register */
  SIM_PDD_SetClockSourceUART0(SIM_BASE_PTR, SIM_PDD_UART0_PLL_FLL_CLOCK);
  UART0_PDD_SetBaudRate(UART0_BASE_PTR, 52U); /* Set the baud rate register. */
   11e0e:	438a      	bics	r2, r1
   11e10:	701a      	strb	r2, [r3, #0]
   11e12:	2234      	movs	r2, #52	; 0x34
   11e14:	705a      	strb	r2, [r3, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:220
  UART0_PDD_SetOversamplingRatio(UART0_BASE_PTR, 3U);
   11e16:	7a9a      	ldrb	r2, [r3, #10]
   11e18:	438a      	bics	r2, r1
   11e1a:	391c      	subs	r1, #28
   11e1c:	430a      	orrs	r2, r1
   11e1e:	729a      	strb	r2, [r3, #10]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:221
  UART0_PDD_EnableSamplingOnBothEdges(UART0_BASE_PTR, PDD_ENABLE);
   11e20:	2202      	movs	r2, #2
   11e22:	7ad9      	ldrb	r1, [r3, #11]
   11e24:	430a      	orrs	r2, r1
   11e26:	72da      	strb	r2, [r3, #11]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:222
  UART0_PDD_EnableTransmitter(UART0_BASE_PTR, PDD_ENABLE); /* Enable transmitter */
   11e28:	2208      	movs	r2, #8
   11e2a:	78d9      	ldrb	r1, [r3, #3]
   11e2c:	430a      	orrs	r2, r1
   11e2e:	70da      	strb	r2, [r3, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:223
  UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_ENABLE); /* Enable receiver */
   11e30:	2204      	movs	r2, #4
   11e32:	78d9      	ldrb	r1, [r3, #3]
   11e34:	430a      	orrs	r2, r1
   11e36:	70da      	strb	r2, [r3, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:224
  UART0_PDD_EnableInterrupt(UART0_BASE_PTR, ( UART0_PDD_INTERRUPT_RECEIVER )); /* Enable interrupts */
   11e38:	2220      	movs	r2, #32
   11e3a:	78d9      	ldrb	r1, [r3, #3]
   11e3c:	430a      	orrs	r2, r1
   11e3e:	70da      	strb	r2, [r3, #3]
   11e40:	799a      	ldrb	r2, [r3, #6]
   11e42:	b2d2      	uxtb	r2, r2
   11e44:	719a      	strb	r2, [r3, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:226
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_UART_ID,DeviceDataPrv);
   11e46:	4b0b      	ldr	r3, [pc, #44]	; (11e74 <UART_Init+0x104>)
   11e48:	615c      	str	r4, [r3, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:228
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   11e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11e4c:	1fffe358 	.word	0x1fffe358
   11e50:	00011c95 	.word	0x00011c95
   11e54:	40047000 	.word	0x40047000
   11e58:	00001034 	.word	0x00001034
   11e5c:	40049000 	.word	0x40049000
   11e60:	fefff8ff 	.word	0xfefff8ff
   11e64:	e000e100 	.word	0xe000e100
   11e68:	4006a000 	.word	0x4006a000
   11e6c:	00001004 	.word	0x00001004
   11e70:	f3ffffff 	.word	0xf3ffffff
   11e74:	1fffe2d8 	.word	0x1fffe2d8

00011e78 <UART_ReceiveBlock>:
UART_ReceiveBlock():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:275
**                           ERR_BUSY - The previous receive request is
**                           pending.
*/
/* ===================================================================*/
LDD_TError UART_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
{
   11e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e7a:	1c06      	adds	r6, r0, #0
   11e7c:	1c0f      	adds	r7, r1, #0
   11e7e:	1c15      	adds	r5, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:279
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)DeviceDataPtr;

  if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
    return ERR_PARAM_SIZE;             /* If no then error */
   11e80:	2484      	movs	r4, #132	; 0x84
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:278
/* ===================================================================*/
LDD_TError UART_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
{
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)DeviceDataPtr;

  if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
   11e82:	2a00      	cmp	r2, #0
   11e84:	d101      	bne.n	11e8a <UART_ReceiveBlock+0x12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:292
  DeviceDataPrv->InpDataNumReq = Size; /* Store a number of characters to be received. */
  DeviceDataPrv->InpRecvDataNum = 0x00U; /* Set number of received characters to zero. */
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
  return ERR_OK;                       /* OK */
}
   11e86:	1c20      	adds	r0, r4, #0
   11e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:281
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)DeviceDataPtr;

  if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
    return ERR_PARAM_SIZE;             /* If no then error */
  }
  if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the previous receive operation pending? */
   11e8a:	8904      	ldrh	r4, [r0, #8]
   11e8c:	2c00      	cmp	r4, #0
   11e8e:	d001      	beq.n	11e94 <UART_ReceiveBlock+0x1c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:282
    return ERR_BUSY;                   /* If yes then error */
   11e90:	2408      	movs	r4, #8
   11e92:	e7f8      	b.n	11e86 <UART_ReceiveBlock+0xe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:285
  }
  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
   11e94:	f7fe f8da 	bl	1004c <_int_disable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:286
  DeviceDataPrv->InpDataPtr = (uint8_t*)BufferPtr; /* Store a pointer to the input data. */
   11e98:	6077      	str	r7, [r6, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:287
  DeviceDataPrv->InpDataNumReq = Size; /* Store a number of characters to be received. */
   11e9a:	8135      	strh	r5, [r6, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:288
  DeviceDataPrv->InpRecvDataNum = 0x00U; /* Set number of received characters to zero. */
   11e9c:	8074      	strh	r4, [r6, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:290
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
   11e9e:	f7fe f8e1 	bl	10064 <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:291
  return ERR_OK;                       /* OK */
   11ea2:	e7f0      	b.n	11e86 <UART_ReceiveBlock+0xe>

00011ea4 <UART_SendBlock>:
UART_SendBlock():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:335
**                           ERR_BUSY - The previous transmit request is
**                           pending.
*/
/* ===================================================================*/
LDD_TError UART_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
{
   11ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11ea6:	1c06      	adds	r6, r0, #0
   11ea8:	1c0f      	adds	r7, r1, #0
   11eaa:	1c15      	adds	r5, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:339
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)DeviceDataPtr;

  if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
    return ERR_PARAM_SIZE;             /* If no then error */
   11eac:	2484      	movs	r4, #132	; 0x84
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:338
/* ===================================================================*/
LDD_TError UART_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
{
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)DeviceDataPtr;

  if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
   11eae:	2a00      	cmp	r2, #0
   11eb0:	d101      	bne.n	11eb6 <UART_SendBlock+0x12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:355
  DeviceDataPrv->SerFlag &= (uint16_t)(~(uint16_t)TX_COMPLETED); /* Clear the TX_COMPLETED flag */
  UART0_PDD_EnableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER); /* Enable TX interrupt */
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
  return ERR_OK;                       /* OK */
}
   11eb2:	1c20      	adds	r0, r4, #0
   11eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:341
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)DeviceDataPtr;

  if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
    return ERR_PARAM_SIZE;             /* If no then error */
  }
  if (DeviceDataPrv->OutDataNumReq != 0x00U) { /* Is the previous transmit operation pending? */
   11eb6:	8a04      	ldrh	r4, [r0, #16]
   11eb8:	2c00      	cmp	r4, #0
   11eba:	d001      	beq.n	11ec0 <UART_SendBlock+0x1c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:342
    return ERR_BUSY;                   /* If yes then error */
   11ebc:	2408      	movs	r4, #8
   11ebe:	e7f8      	b.n	11eb2 <UART_SendBlock+0xe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:345
  }
  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
   11ec0:	f7fe f8c4 	bl	1004c <_int_disable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:350
  DeviceDataPrv->OutDataPtr = (uint8_t*)BufferPtr; /* Set a pointer to the output data. */
  DeviceDataPrv->OutDataNumReq = Size; /* Set the counter of characters to be sent. */
  DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters. */
  DeviceDataPrv->SerFlag |= ENABLED_TX_INT; /* Set the flag ENABLED_TX_INT */
  DeviceDataPrv->SerFlag &= (uint16_t)(~(uint16_t)TX_COMPLETED); /* Clear the TX_COMPLETED flag */
   11ec4:	2204      	movs	r2, #4
   11ec6:	8833      	ldrh	r3, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:346
  if (DeviceDataPrv->OutDataNumReq != 0x00U) { /* Is the previous transmit operation pending? */
    return ERR_BUSY;                   /* If yes then error */
  }
  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
  DeviceDataPrv->OutDataPtr = (uint8_t*)BufferPtr; /* Set a pointer to the output data. */
   11ec8:	60f7      	str	r7, [r6, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:350
  DeviceDataPrv->OutDataNumReq = Size; /* Set the counter of characters to be sent. */
  DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters. */
  DeviceDataPrv->SerFlag |= ENABLED_TX_INT; /* Set the flag ENABLED_TX_INT */
  DeviceDataPrv->SerFlag &= (uint16_t)(~(uint16_t)TX_COMPLETED); /* Clear the TX_COMPLETED flag */
   11eca:	4393      	bics	r3, r2
   11ecc:	2201      	movs	r2, #1
   11ece:	4313      	orrs	r3, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:351
  UART0_PDD_EnableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER); /* Enable TX interrupt */
   11ed0:	2280      	movs	r2, #128	; 0x80
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:350
  _int_disable();
  DeviceDataPrv->OutDataPtr = (uint8_t*)BufferPtr; /* Set a pointer to the output data. */
  DeviceDataPrv->OutDataNumReq = Size; /* Set the counter of characters to be sent. */
  DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters. */
  DeviceDataPrv->SerFlag |= ENABLED_TX_INT; /* Set the flag ENABLED_TX_INT */
  DeviceDataPrv->SerFlag &= (uint16_t)(~(uint16_t)TX_COMPLETED); /* Clear the TX_COMPLETED flag */
   11ed2:	8033      	strh	r3, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:351
  UART0_PDD_EnableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER); /* Enable TX interrupt */
   11ed4:	4b05      	ldr	r3, [pc, #20]	; (11eec <UART_SendBlock+0x48>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:347
    return ERR_BUSY;                   /* If yes then error */
  }
  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
  DeviceDataPrv->OutDataPtr = (uint8_t*)BufferPtr; /* Set a pointer to the output data. */
  DeviceDataPrv->OutDataNumReq = Size; /* Set the counter of characters to be sent. */
   11ed6:	8235      	strh	r5, [r6, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:348
  DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters. */
   11ed8:	8174      	strh	r4, [r6, #10]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:351
  DeviceDataPrv->SerFlag |= ENABLED_TX_INT; /* Set the flag ENABLED_TX_INT */
  DeviceDataPrv->SerFlag &= (uint16_t)(~(uint16_t)TX_COMPLETED); /* Clear the TX_COMPLETED flag */
  UART0_PDD_EnableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER); /* Enable TX interrupt */
   11eda:	78d9      	ldrb	r1, [r3, #3]
   11edc:	430a      	orrs	r2, r1
   11ede:	70da      	strb	r2, [r3, #3]
   11ee0:	799a      	ldrb	r2, [r3, #6]
   11ee2:	b2d2      	uxtb	r2, r2
   11ee4:	719a      	strb	r2, [r3, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:353
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
   11ee6:	f7fe f8bd 	bl	10064 <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:354
  return ERR_OK;                       /* OK */
   11eea:	e7e2      	b.n	11eb2 <UART_SendBlock+0xe>
   11eec:	4006a000 	.word	0x4006a000

00011ef0 <UART_GetTxCompleteStatus>:
UART_GetTxCompleteStatus():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:428
/* ===================================================================*/
bool UART_GetTxCompleteStatus(LDD_TDeviceData *DeviceDataPtr)
{
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)DeviceDataPtr;

  if ((DeviceDataPrv->SerFlag & TX_COMPLETED) != 0U) { /* Is a transmission completed? */
   11ef0:	2104      	movs	r1, #4
   11ef2:	8803      	ldrh	r3, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:432
    DeviceDataPrv->SerFlag &= (uint16_t)(~(uint16_t)TX_COMPLETED); /* If yes then clear the flag and return the result */
    return TRUE;
  }
  return FALSE;
   11ef4:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:428
/* ===================================================================*/
bool UART_GetTxCompleteStatus(LDD_TDeviceData *DeviceDataPtr)
{
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)DeviceDataPtr;

  if ((DeviceDataPrv->SerFlag & TX_COMPLETED) != 0U) { /* Is a transmission completed? */
   11ef6:	4219      	tst	r1, r3
   11ef8:	d002      	beq.n	11f00 <UART_GetTxCompleteStatus+0x10>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:429
    DeviceDataPrv->SerFlag &= (uint16_t)(~(uint16_t)TX_COMPLETED); /* If yes then clear the flag and return the result */
   11efa:	438b      	bics	r3, r1
   11efc:	8003      	strh	r3, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:430
    return TRUE;
   11efe:	3201      	adds	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:433
  }
  return FALSE;
}
   11f00:	1c10      	adds	r0, r2, #0
   11f02:	4770      	bx	lr

00011f04 <crc16>:
crc16():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/crc.c:103
*/
// Most significant bit first (big-endian)
// x^16+x^12+x^5+1 = (1) 0001 0000 0010 0001 = 0x1021

uint16_t crc16(uint8_t* data, uint16_t len)
{
   11f04:	b530      	push	{r4, r5, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/crc.c:107
	uint16_t rem  = 0;
	uint16_t n = 16;
	// A popular variant complements rem here
	for(uint16_t i = 0 ; i < len ; i++)
   11f06:	2900      	cmp	r1, #0
   11f08:	d100      	bne.n	11f0c <crc16+0x8>
   11f0a:	e081      	b.n	12010 <crc16+0x10c>
   11f0c:	3901      	subs	r1, #1
   11f0e:	b289      	uxth	r1, r1
   11f10:	3101      	adds	r1, #1
   11f12:	1c04      	adds	r4, r0, #0
   11f14:	1841      	adds	r1, r0, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/crc.c:117
		{

			if(rem & 0x8000)
			{
				// if leftmost (most significant) bit is set
				rem  = (rem << 1) ^ 0x1021;
   11f16:	4a3f      	ldr	r2, [pc, #252]	; (12014 <crc16+0x110>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/crc.c:107
uint16_t crc16(uint8_t* data, uint16_t len)
{
	uint16_t rem  = 0;
	uint16_t n = 16;
	// A popular variant complements rem here
	for(uint16_t i = 0 ; i < len ; i++)
   11f18:	2000      	movs	r0, #0
   11f1a:	e033      	b.n	11f84 <crc16+0x80>
   11f1c:	b283      	uxth	r3, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/crc.c:117
		{

			if(rem & 0x8000)
			{
				// if leftmost (most significant) bit is set
				rem  = (rem << 1) ^ 0x1021;
   11f1e:	005b      	lsls	r3, r3, #1
   11f20:	4053      	eors	r3, r2
   11f22:	b205      	sxth	r5, r0
   11f24:	b29b      	uxth	r3, r3
   11f26:	0040      	lsls	r0, r0, #1
   11f28:	2d00      	cmp	r5, #0
   11f2a:	db3e      	blt.n	11faa <crc16+0xa6>
   11f2c:	b283      	uxth	r3, r0
   11f2e:	005b      	lsls	r3, r3, #1
   11f30:	4053      	eors	r3, r2
   11f32:	b205      	sxth	r5, r0
   11f34:	b29b      	uxth	r3, r3
   11f36:	0040      	lsls	r0, r0, #1
   11f38:	2d00      	cmp	r5, #0
   11f3a:	db3f      	blt.n	11fbc <crc16+0xb8>
   11f3c:	b283      	uxth	r3, r0
   11f3e:	005b      	lsls	r3, r3, #1
   11f40:	4053      	eors	r3, r2
   11f42:	b205      	sxth	r5, r0
   11f44:	b29b      	uxth	r3, r3
   11f46:	0040      	lsls	r0, r0, #1
   11f48:	2d00      	cmp	r5, #0
   11f4a:	db40      	blt.n	11fce <crc16+0xca>
   11f4c:	b283      	uxth	r3, r0
   11f4e:	005b      	lsls	r3, r3, #1
   11f50:	4053      	eors	r3, r2
   11f52:	b205      	sxth	r5, r0
   11f54:	b29b      	uxth	r3, r3
   11f56:	0040      	lsls	r0, r0, #1
   11f58:	2d00      	cmp	r5, #0
   11f5a:	db41      	blt.n	11fe0 <crc16+0xdc>
   11f5c:	b283      	uxth	r3, r0
   11f5e:	005b      	lsls	r3, r3, #1
   11f60:	4053      	eors	r3, r2
   11f62:	b205      	sxth	r5, r0
   11f64:	b29b      	uxth	r3, r3
   11f66:	0040      	lsls	r0, r0, #1
   11f68:	2d00      	cmp	r5, #0
   11f6a:	db42      	blt.n	11ff2 <crc16+0xee>
   11f6c:	b283      	uxth	r3, r0
   11f6e:	005b      	lsls	r3, r3, #1
   11f70:	4053      	eors	r3, r2
   11f72:	b205      	sxth	r5, r0
   11f74:	b29b      	uxth	r3, r3
   11f76:	0040      	lsls	r0, r0, #1
   11f78:	2d00      	cmp	r5, #0
   11f7a:	db43      	blt.n	12004 <crc16+0x100>
   11f7c:	3401      	adds	r4, #1
   11f7e:	b280      	uxth	r0, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/crc.c:107
uint16_t crc16(uint8_t* data, uint16_t len)
{
	uint16_t rem  = 0;
	uint16_t n = 16;
	// A popular variant complements rem here
	for(uint16_t i = 0 ; i < len ; i++)
   11f80:	428c      	cmp	r4, r1
   11f82:	d044      	beq.n	1200e <crc16+0x10a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/crc.c:117
		{

			if(rem & 0x8000)
			{
				// if leftmost (most significant) bit is set
				rem  = (rem << 1) ^ 0x1021;
   11f84:	1c15      	adds	r5, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/crc.c:109
	uint16_t rem  = 0;
	uint16_t n = 16;
	// A popular variant complements rem here
	for(uint16_t i = 0 ; i < len ; i++)
	{
		rem  = rem ^ (data[i] << (n-8));   // n = 16 in this example
   11f86:	7823      	ldrb	r3, [r4, #0]
   11f88:	021b      	lsls	r3, r3, #8
   11f8a:	4043      	eors	r3, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/crc.c:117
		{

			if(rem & 0x8000)
			{
				// if leftmost (most significant) bit is set
				rem  = (rem << 1) ^ 0x1021;
   11f8c:	0058      	lsls	r0, r3, #1
   11f8e:	4045      	eors	r5, r0
   11f90:	b21b      	sxth	r3, r3
   11f92:	b2ad      	uxth	r5, r5
   11f94:	2b00      	cmp	r3, #0
   11f96:	dac1      	bge.n	11f1c <crc16+0x18>
   11f98:	1c28      	adds	r0, r5, #0
   11f9a:	b283      	uxth	r3, r0
   11f9c:	005b      	lsls	r3, r3, #1
   11f9e:	4053      	eors	r3, r2
   11fa0:	b205      	sxth	r5, r0
   11fa2:	b29b      	uxth	r3, r3
   11fa4:	0040      	lsls	r0, r0, #1
   11fa6:	2d00      	cmp	r5, #0
   11fa8:	dac0      	bge.n	11f2c <crc16+0x28>
   11faa:	1c18      	adds	r0, r3, #0
   11fac:	b283      	uxth	r3, r0
   11fae:	005b      	lsls	r3, r3, #1
   11fb0:	4053      	eors	r3, r2
   11fb2:	b205      	sxth	r5, r0
   11fb4:	b29b      	uxth	r3, r3
   11fb6:	0040      	lsls	r0, r0, #1
   11fb8:	2d00      	cmp	r5, #0
   11fba:	dabf      	bge.n	11f3c <crc16+0x38>
   11fbc:	1c18      	adds	r0, r3, #0
   11fbe:	b283      	uxth	r3, r0
   11fc0:	005b      	lsls	r3, r3, #1
   11fc2:	4053      	eors	r3, r2
   11fc4:	b205      	sxth	r5, r0
   11fc6:	b29b      	uxth	r3, r3
   11fc8:	0040      	lsls	r0, r0, #1
   11fca:	2d00      	cmp	r5, #0
   11fcc:	dabe      	bge.n	11f4c <crc16+0x48>
   11fce:	1c18      	adds	r0, r3, #0
   11fd0:	b283      	uxth	r3, r0
   11fd2:	005b      	lsls	r3, r3, #1
   11fd4:	4053      	eors	r3, r2
   11fd6:	b205      	sxth	r5, r0
   11fd8:	b29b      	uxth	r3, r3
   11fda:	0040      	lsls	r0, r0, #1
   11fdc:	2d00      	cmp	r5, #0
   11fde:	dabd      	bge.n	11f5c <crc16+0x58>
   11fe0:	1c18      	adds	r0, r3, #0
   11fe2:	b283      	uxth	r3, r0
   11fe4:	005b      	lsls	r3, r3, #1
   11fe6:	4053      	eors	r3, r2
   11fe8:	b205      	sxth	r5, r0
   11fea:	b29b      	uxth	r3, r3
   11fec:	0040      	lsls	r0, r0, #1
   11fee:	2d00      	cmp	r5, #0
   11ff0:	dabc      	bge.n	11f6c <crc16+0x68>
   11ff2:	1c18      	adds	r0, r3, #0
   11ff4:	b283      	uxth	r3, r0
   11ff6:	005b      	lsls	r3, r3, #1
   11ff8:	4053      	eors	r3, r2
   11ffa:	b205      	sxth	r5, r0
   11ffc:	b29b      	uxth	r3, r3
   11ffe:	0040      	lsls	r0, r0, #1
   12000:	2d00      	cmp	r5, #0
   12002:	dabb      	bge.n	11f7c <crc16+0x78>
   12004:	1c18      	adds	r0, r3, #0
   12006:	3401      	adds	r4, #1
   12008:	b280      	uxth	r0, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/crc.c:107
uint16_t crc16(uint8_t* data, uint16_t len)
{
	uint16_t rem  = 0;
	uint16_t n = 16;
	// A popular variant complements rem here
	for(uint16_t i = 0 ; i < len ; i++)
   1200a:	428c      	cmp	r4, r1
   1200c:	d1ba      	bne.n	11f84 <crc16+0x80>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/crc.c:128
		 rem  &= 0xffff;      // Trim remainder to 16 bits
		}
	}
 // A popular variant complements rem here
  return rem;
 }
   1200e:	bd30      	pop	{r4, r5, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/crc.c:104
// Most significant bit first (big-endian)
// x^16+x^12+x^5+1 = (1) 0001 0000 0010 0001 = 0x1021

uint16_t crc16(uint8_t* data, uint16_t len)
{
	uint16_t rem  = 0;
   12010:	2000      	movs	r0, #0
   12012:	e7fc      	b.n	1200e <crc16+0x10a>
   12014:	00001021 	.word	0x00001021

00012018 <init_distantio>:
init_distantio():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:30

/**
 * Inits the distant io framework
 */
void init_distantio()
{
   12018:	b5f0      	push	{r4, r5, r6, r7, lr}
   1201a:	4657      	mov	r7, sl
   1201c:	4645      	mov	r5, r8
   1201e:	464e      	mov	r6, r9
   12020:	b4e0      	push	{r5, r6, r7}
   12022:	b084      	sub	sp, #16
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:32
	uint16_t i;
	char default_name[] = {"undef.  "};
   12024:	ab01      	add	r3, sp, #4
   12026:	4698      	mov	r8, r3
   12028:	4642      	mov	r2, r8
   1202a:	4b1c      	ldr	r3, [pc, #112]	; (1209c <init_distantio+0x84>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:34
	Log.amount = 0;
	for(i = 0 ; i < VARIABLES_AMOUNT ; i++)
   1202c:	2500      	movs	r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:32
 * Inits the distant io framework
 */
void init_distantio()
{
	uint16_t i;
	char default_name[] = {"undef.  "};
   1202e:	cb03      	ldmia	r3!, {r0, r1}
   12030:	c203      	stmia	r2!, {r0, r1}
   12032:	781b      	ldrb	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:36
	Log.amount = 0;
	for(i = 0 ; i < VARIABLES_AMOUNT ; i++)
	{
		Log.variables[i].size = 0;
   12034:	2700      	movs	r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:32
 * Inits the distant io framework
 */
void init_distantio()
{
	uint16_t i;
	char default_name[] = {"undef.  "};
   12036:	7013      	strb	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:33
	Log.amount = 0;
   12038:	4b19      	ldr	r3, [pc, #100]	; (120a0 <init_distantio+0x88>)
   1203a:	2200      	movs	r2, #0
   1203c:	469a      	mov	sl, r3
   1203e:	2382      	movs	r3, #130	; 0x82
   12040:	4651      	mov	r1, sl
   12042:	4654      	mov	r4, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:36
	for(i = 0 ; i < VARIABLES_AMOUNT ; i++)
	{
		Log.variables[i].size = 0;
   12044:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:33
 */
void init_distantio()
{
	uint16_t i;
	char default_name[] = {"undef.  "};
	Log.amount = 0;
   12046:	019b      	lsls	r3, r3, #6
   12048:	52ca      	strh	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:40 (discriminator 3)
	{
		Log.variables[i].size = 0;
		Log.variables[i].ptr = 0;
		Log.variables[i].writeable = 0;
		Log.variables[i].id = i;
		strcpy(Log.variables[i].name,default_name);
   1204a:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:36 (discriminator 3)
	uint16_t i;
	char default_name[] = {"undef.  "};
	Log.amount = 0;
	for(i = 0 ; i < VARIABLES_AMOUNT ; i++)
	{
		Log.variables[i].size = 0;
   1204c:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:39 (discriminator 3)
		Log.variables[i].ptr = 0;
		Log.variables[i].writeable = 0;
		Log.variables[i].id = i;
   1204e:	8125      	strh	r5, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:36 (discriminator 3)
	uint16_t i;
	char default_name[] = {"undef.  "};
	Log.amount = 0;
	for(i = 0 ; i < VARIABLES_AMOUNT ; i++)
	{
		Log.variables[i].size = 0;
   12050:	80a7      	strh	r7, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:37 (discriminator 3)
		Log.variables[i].ptr = 0;
   12052:	6027      	str	r7, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:38 (discriminator 3)
		Log.variables[i].writeable = 0;
   12054:	71a6      	strb	r6, [r4, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:40 (discriminator 3)
		Log.variables[i].id = i;
		strcpy(Log.variables[i].name,default_name);
   12056:	3010      	adds	r0, #16
   12058:	4641      	mov	r1, r8
   1205a:	2209      	movs	r2, #9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:36 (discriminator 3)
	uint16_t i;
	char default_name[] = {"undef.  "};
	Log.amount = 0;
	for(i = 0 ; i < VARIABLES_AMOUNT ; i++)
	{
		Log.variables[i].size = 0;
   1205c:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:40 (discriminator 3)
		Log.variables[i].ptr = 0;
		Log.variables[i].writeable = 0;
		Log.variables[i].id = i;
		strcpy(Log.variables[i].name,default_name);
   1205e:	f002 fa8d 	bl	1457c <memcpy>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:34 (discriminator 3)
void init_distantio()
{
	uint16_t i;
	char default_name[] = {"undef.  "};
	Log.amount = 0;
	for(i = 0 ; i < VARIABLES_AMOUNT ; i++)
   12062:	2380      	movs	r3, #128	; 0x80
   12064:	3501      	adds	r5, #1
   12066:	b2ad      	uxth	r5, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:41 (discriminator 3)
		Log.variables[i].size = 0;
		Log.variables[i].ptr = 0;
		Log.variables[i].writeable = 0;
		Log.variables[i].id = i;
		strcpy(Log.variables[i].name,default_name);
		Log.variables[i].send = 0;
   12068:	7626      	strb	r6, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:42 (discriminator 3)
		Log.variables[i].groupID = 0;
   1206a:	7666      	strb	r6, [r4, #25]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:34 (discriminator 3)
void init_distantio()
{
	uint16_t i;
	char default_name[] = {"undef.  "};
	Log.amount = 0;
	for(i = 0 ; i < VARIABLES_AMOUNT ; i++)
   1206c:	005b      	lsls	r3, r3, #1
   1206e:	341c      	adds	r4, #28
   12070:	429d      	cmp	r5, r3
   12072:	d1ea      	bne.n	1204a <init_distantio+0x32>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:44
		Log.variables[i].id = i;
		strcpy(Log.variables[i].name,default_name);
		Log.variables[i].send = 0;
		Log.variables[i].groupID = 0;
	}
	tmp=0;
   12074:	464a      	mov	r2, r9
   12076:	4b0b      	ldr	r3, [pc, #44]	; (120a4 <init_distantio+0x8c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:45
	Log.current_group_id = 0;
   12078:	4649      	mov	r1, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:44
		Log.variables[i].id = i;
		strcpy(Log.variables[i].name,default_name);
		Log.variables[i].send = 0;
		Log.variables[i].groupID = 0;
	}
	tmp=0;
   1207a:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:45
	Log.current_group_id = 0;
   1207c:	4652      	mov	r2, sl
   1207e:	4b0a      	ldr	r3, [pc, #40]	; (120a8 <init_distantio+0x90>)
   12080:	54d1      	strb	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:46
	strcpy(Log.groups[0].name,"default");
   12082:	23e0      	movs	r3, #224	; 0xe0
   12084:	4a09      	ldr	r2, [pc, #36]	; (120ac <init_distantio+0x94>)
   12086:	015b      	lsls	r3, r3, #5
   12088:	4453      	add	r3, sl
   1208a:	ca03      	ldmia	r2!, {r0, r1}
   1208c:	c303      	stmia	r3!, {r0, r1}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:47
}
   1208e:	b004      	add	sp, #16
   12090:	bc1c      	pop	{r2, r3, r4}
   12092:	4690      	mov	r8, r2
   12094:	4699      	mov	r9, r3
   12096:	46a2      	mov	sl, r4
   12098:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1209a:	46c0      	nop			; (mov r8, r8)
   1209c:	000148e4 	.word	0x000148e4
   120a0:	1fffe388 	.word	0x1fffe388
   120a4:	20003bb8 	.word	0x20003bb8
   120a8:	00002082 	.word	0x00002082
   120ac:	000148f0 	.word	0x000148f0

000120b0 <register_var>:
register_var():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:55
 * Register a variable exchanged with the computer
 */
uint8_t register_var(void* ptr, uint16_t size, dio_type type, uint8_t writeable, char* name)
{
	// Too many variables, aborting
	if(Log.amount >= VARIABLES_AMOUNT)
   120b0:	2182      	movs	r1, #130	; 0x82
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:53

/**
 * Register a variable exchanged with the computer
 */
uint8_t register_var(void* ptr, uint16_t size, dio_type type, uint8_t writeable, char* name)
{
   120b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:55
	// Too many variables, aborting
	if(Log.amount >= VARIABLES_AMOUNT)
   120b4:	4c17      	ldr	r4, [pc, #92]	; (12114 <register_var+0x64>)
   120b6:	0189      	lsls	r1, r1, #6
   120b8:	5a65      	ldrh	r5, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:56
		return 1;
   120ba:	2101      	movs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:55
 * Register a variable exchanged with the computer
 */
uint8_t register_var(void* ptr, uint16_t size, dio_type type, uint8_t writeable, char* name)
{
	// Too many variables, aborting
	if(Log.amount >= VARIABLES_AMOUNT)
   120bc:	2dff      	cmp	r5, #255	; 0xff
   120be:	d81a      	bhi.n	120f6 <register_var+0x46>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:58
		return 1;

	Log.variables[Log.amount].ptr = ptr;
   120c0:	00e9      	lsls	r1, r5, #3
   120c2:	1b4e      	subs	r6, r1, r5
   120c4:	00b6      	lsls	r6, r6, #2
   120c6:	5130      	str	r0, [r6, r4]
get_size():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:355
			return 2;

		case dio_type_UINT8:
		case dio_type_INT8:
		default:
			return 1;
   120c8:	2601      	movs	r6, #1
   120ca:	2a06      	cmp	r2, #6
   120cc:	d915      	bls.n	120fa <register_var+0x4a>
register_var():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:59
	// Too many variables, aborting
	if(Log.amount >= VARIABLES_AMOUNT)
		return 1;

	Log.variables[Log.amount].ptr = ptr;
	Log.variables[Log.amount].size = get_size(type);
   120ce:	1b48      	subs	r0, r1, r5
   120d0:	0080      	lsls	r0, r0, #2
   120d2:	1821      	adds	r1, r4, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:60
	Log.variables[Log.amount].writeable = writeable;
   120d4:	718b      	strb	r3, [r1, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:62
	Log.variables[Log.amount].type = type;
	Log.variables[Log.amount].groupID = Log.current_group_id;
   120d6:	4b10      	ldr	r3, [pc, #64]	; (12118 <register_var+0x68>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:61
		return 1;

	Log.variables[Log.amount].ptr = ptr;
	Log.variables[Log.amount].size = get_size(type);
	Log.variables[Log.amount].writeable = writeable;
	Log.variables[Log.amount].type = type;
   120d8:	60ca      	str	r2, [r1, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:59
	// Too many variables, aborting
	if(Log.amount >= VARIABLES_AMOUNT)
		return 1;

	Log.variables[Log.amount].ptr = ptr;
	Log.variables[Log.amount].size = get_size(type);
   120da:	808e      	strh	r6, [r1, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:62
	Log.variables[Log.amount].writeable = writeable;
	Log.variables[Log.amount].type = type;
	Log.variables[Log.amount].groupID = Log.current_group_id;
   120dc:	5ce3      	ldrb	r3, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:63
	strcpy(Log.variables[Log.amount].name,name);
   120de:	3010      	adds	r0, #16
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:62

	Log.variables[Log.amount].ptr = ptr;
	Log.variables[Log.amount].size = get_size(type);
	Log.variables[Log.amount].writeable = writeable;
	Log.variables[Log.amount].type = type;
	Log.variables[Log.amount].groupID = Log.current_group_id;
   120e0:	764b      	strb	r3, [r1, #25]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:63
	strcpy(Log.variables[Log.amount].name,name);
   120e2:	1820      	adds	r0, r4, r0
   120e4:	9906      	ldr	r1, [sp, #24]
   120e6:	f002 fa5a 	bl	1459e <strcpy>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:65

	Log.amount++;
   120ea:	2282      	movs	r2, #130	; 0x82
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:67

	return 0;
   120ec:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:65
	Log.variables[Log.amount].writeable = writeable;
	Log.variables[Log.amount].type = type;
	Log.variables[Log.amount].groupID = Log.current_group_id;
	strcpy(Log.variables[Log.amount].name,name);

	Log.amount++;
   120ee:	0192      	lsls	r2, r2, #6
   120f0:	5aa3      	ldrh	r3, [r4, r2]
   120f2:	3301      	adds	r3, #1
   120f4:	52a3      	strh	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:68

	return 0;
}
   120f6:	1c08      	adds	r0, r1, #0
   120f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   120fa:	1c30      	adds	r0, r6, #0
   120fc:	2749      	movs	r7, #73	; 0x49
   120fe:	4090      	lsls	r0, r2
get_size():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:346
	switch(type)
	{
		case dio_type_FLOAT:
		case dio_type_UINT32:
		case dio_type_INT32:
			return 4;
   12100:	3603      	adds	r6, #3
   12102:	4207      	tst	r7, r0
   12104:	d1e3      	bne.n	120ce <register_var+0x1e>
   12106:	3620      	adds	r6, #32
   12108:	4030      	ands	r0, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:350

		case dio_type_UINT16:
		case dio_type_INT16:
			return 2;
   1210a:	4246      	negs	r6, r0
   1210c:	4146      	adcs	r6, r0
   1210e:	2002      	movs	r0, #2
   12110:	1b86      	subs	r6, r0, r6
   12112:	e7dc      	b.n	120ce <register_var+0x1e>
   12114:	1fffe388 	.word	0x1fffe388
   12118:	00002082 	.word	0x00002082

0001211c <start_group>:
start_group():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:71

	return 0;
}

void start_group(char* groupname)
{
   1211c:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:72
	Log.current_group_id++;
   1211e:	4a08      	ldr	r2, [pc, #32]	; (12140 <start_group+0x24>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:71

	return 0;
}

void start_group(char* groupname)
{
   12120:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:72
	Log.current_group_id++;
   12122:	4808      	ldr	r0, [pc, #32]	; (12144 <start_group+0x28>)
   12124:	5c83      	ldrb	r3, [r0, r2]
   12126:	3301      	adds	r3, #1
   12128:	b2db      	uxtb	r3, r3
   1212a:	5483      	strb	r3, [r0, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:73
	strcpy(Log.groups[Log.current_group_id].name,groupname);
   1212c:	00da      	lsls	r2, r3, #3
   1212e:	18d3      	adds	r3, r2, r3
   12130:	22e0      	movs	r2, #224	; 0xe0
   12132:	0152      	lsls	r2, r2, #5
   12134:	4694      	mov	ip, r2
   12136:	4463      	add	r3, ip
   12138:	18c0      	adds	r0, r0, r3
   1213a:	f002 fa30 	bl	1459e <strcpy>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:74
}
   1213e:	bd08      	pop	{r3, pc}
   12140:	00002082 	.word	0x00002082
   12144:	1fffe388 	.word	0x1fffe388

00012148 <distantio_decode>:
distantio_decode():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:174
	// Encode frame
	encode(buffer,i);
}

void distantio_decode(uint8_t* data,uint16_t datasize)
{
   12148:	b5f0      	push	{r4, r5, r6, r7, lr}
   1214a:	4657      	mov	r7, sl
   1214c:	464e      	mov	r6, r9
   1214e:	4645      	mov	r5, r8
   12150:	b4e0      	push	{r5, r6, r7}
   12152:	b082      	sub	sp, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:177
	// First check data size
	// 1 byte cmd + 2 bytes id + 1 byte type + FRAME_SIZE + 2 byte CRC
	if(datasize != PAYLOAD_SIZE)
   12154:	290e      	cmp	r1, #14
   12156:	d005      	beq.n	12164 <distantio_decode+0x1c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:248
				return;
			Log.variables[ID].send = 0;
			break;
		
	}
}
   12158:	b002      	add	sp, #8
   1215a:	bc1c      	pop	{r2, r3, r4}
   1215c:	4690      	mov	r8, r2
   1215e:	4699      	mov	r9, r3
   12160:	46a2      	mov	sl, r4
   12162:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12164:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:181
	// 1 byte cmd + 2 bytes id + 1 byte type + FRAME_SIZE + 2 byte CRC
	if(datasize != PAYLOAD_SIZE)
		return;

	// Second, check CRC
	uint16_t crc_value = crc16(data,PAYLOAD_SIZE-2);
   12166:	3902      	subs	r1, #2
   12168:	f7ff fecc 	bl	11f04 <crc16>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:182
	uint16_t crc_rx = ((uint16_t)data[PAYLOAD_SIZE-2] << 8) | data[PAYLOAD_SIZE-1];
   1216c:	7b23      	ldrb	r3, [r4, #12]
   1216e:	7b62      	ldrb	r2, [r4, #13]
   12170:	021b      	lsls	r3, r3, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:184

	if(crc_value != crc_rx)
   12172:	4313      	orrs	r3, r2
   12174:	4298      	cmp	r0, r3
   12176:	d1ef      	bne.n	12158 <distantio_decode+0x10>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:192
	// Process frame
	// First, identify command
	uint8_t command = data[0];
	
	// Second, identify variable ID
	uint16_t ID = data[2] + (data[1] << 8);
   12178:	7863      	ldrb	r3, [r4, #1]
   1217a:	78a2      	ldrb	r2, [r4, #2]
   1217c:	021b      	lsls	r3, r3, #8
   1217e:	18d3      	adds	r3, r2, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:198
	ID = (ID & 0x3FF);
	
	// Third, identify data type
	uint8_t type = data[3];

	switch(command)
   12180:	7822      	ldrb	r2, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:193
	// First, identify command
	uint8_t command = data[0];
	
	// Second, identify variable ID
	uint16_t ID = data[2] + (data[1] << 8);
	ID = (ID & 0x3FF);
   12182:	059b      	lsls	r3, r3, #22
   12184:	0d9b      	lsrs	r3, r3, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:196
	
	// Third, identify data type
	uint8_t type = data[3];
   12186:	78e1      	ldrb	r1, [r4, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:198

	switch(command)
   12188:	2a04      	cmp	r2, #4
   1218a:	d100      	bne.n	1218e <distantio_decode+0x46>
   1218c:	e108      	b.n	123a0 <distantio_decode+0x258>
   1218e:	d911      	bls.n	121b4 <distantio_decode+0x6c>
   12190:	2a05      	cmp	r2, #5
   12192:	d100      	bne.n	12196 <distantio_decode+0x4e>
   12194:	e129      	b.n	123ea <distantio_decode+0x2a2>
   12196:	2a06      	cmp	r2, #6
   12198:	d1de      	bne.n	12158 <distantio_decode+0x10>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:242
			Log.variables[ID].send = 1;
			break;

		// User requested stop variable read
		case 0x06:
			if(ID >= Log.amount)
   1219a:	2282      	movs	r2, #130	; 0x82
   1219c:	49a4      	ldr	r1, [pc, #656]	; (12430 <distantio_decode+0x2e8>)
   1219e:	0192      	lsls	r2, r2, #6
   121a0:	5a8a      	ldrh	r2, [r1, r2]
   121a2:	429a      	cmp	r2, r3
   121a4:	d9d8      	bls.n	12158 <distantio_decode+0x10>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:244
				return;
			Log.variables[ID].send = 0;
   121a6:	00da      	lsls	r2, r3, #3
   121a8:	1ad3      	subs	r3, r2, r3
   121aa:	2200      	movs	r2, #0
   121ac:	009b      	lsls	r3, r3, #2
   121ae:	18cb      	adds	r3, r1, r3
   121b0:	761a      	strb	r2, [r3, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:245
			break;
   121b2:	e7d1      	b.n	12158 <distantio_decode+0x10>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:198
	ID = (ID & 0x3FF);
	
	// Third, identify data type
	uint8_t type = data[3];

	switch(command)
   121b4:	2a02      	cmp	r2, #2
   121b6:	d1cf      	bne.n	12158 <distantio_decode+0x10>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:203 (discriminator 1)
	{
		// User requested descriptors
		case 0x02:
			// Send variables
			for(uint16_t i = 0 ; i < Log.amount ; i++)
   121b8:	2382      	movs	r3, #130	; 0x82
   121ba:	4e9d      	ldr	r6, [pc, #628]	; (12430 <distantio_decode+0x2e8>)
   121bc:	019b      	lsls	r3, r3, #6
   121be:	5af3      	ldrh	r3, [r6, r3]
   121c0:	2b00      	cmp	r3, #0
   121c2:	d072      	beq.n	122aa <distantio_decode+0x162>
send_descriptor():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:89

	static uint8_t buffer[PAYLOAD_SIZE];
	uint8_t type;

	// Respond returned-descriptor
	buffer[0] = 0x00;
   121c4:	2200      	movs	r2, #0
distantio_decode():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:203
	switch(command)
	{
		// User requested descriptors
		case 0x02:
			// Send variables
			for(uint16_t i = 0 ; i < Log.amount ; i++)
   121c6:	2400      	movs	r4, #0
send_descriptor():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:89

	static uint8_t buffer[PAYLOAD_SIZE];
	uint8_t type;

	// Respond returned-descriptor
	buffer[0] = 0x00;
   121c8:	4d9a      	ldr	r5, [pc, #616]	; (12434 <distantio_decode+0x2ec>)
   121ca:	4691      	mov	r9, r2
   121cc:	e003      	b.n	121d6 <distantio_decode+0x8e>
distantio_decode():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:203 (discriminator 3)
	switch(command)
	{
		// User requested descriptors
		case 0x02:
			// Send variables
			for(uint16_t i = 0 ; i < Log.amount ; i++)
   121ce:	3401      	adds	r4, #1
   121d0:	b2a4      	uxth	r4, r4
   121d2:	429c      	cmp	r4, r3
   121d4:	d269      	bcs.n	122aa <distantio_decode+0x162>
send_descriptor():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:82
 * Send var descriptor
 */

void send_descriptor(uint16_t index)
{
	if(index >= Log.amount)
   121d6:	42a3      	cmp	r3, r4
   121d8:	d9f9      	bls.n	121ce <distantio_decode+0x86>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:89

	static uint8_t buffer[PAYLOAD_SIZE];
	uint8_t type;

	// Respond returned-descriptor
	buffer[0] = 0x00;
   121da:	464b      	mov	r3, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:92

	// Write id
	uint16_t ID = ((Log.variables[index].groupID & 0x003F) << 10) + (index & 0x3FF);
   121dc:	00e7      	lsls	r7, r4, #3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:89

	static uint8_t buffer[PAYLOAD_SIZE];
	uint8_t type;

	// Respond returned-descriptor
	buffer[0] = 0x00;
   121de:	702b      	strb	r3, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:92

	// Write id
	uint16_t ID = ((Log.variables[index].groupID & 0x003F) << 10) + (index & 0x3FF);
   121e0:	1b3b      	subs	r3, r7, r4
   121e2:	009b      	lsls	r3, r3, #2
   121e4:	18f3      	adds	r3, r6, r3
   121e6:	05a2      	lsls	r2, r4, #22
   121e8:	0d91      	lsrs	r1, r2, #22
   121ea:	7e5a      	ldrb	r2, [r3, #25]
   121ec:	0292      	lsls	r2, r2, #10
   121ee:	188a      	adds	r2, r1, r2
   121f0:	4669      	mov	r1, sp
   121f2:	80ca      	strh	r2, [r1, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:94
	uint8_t * temp_ptr = (uint8_t*)(&ID);
	buffer[1] = *(temp_ptr + 1);
   121f4:	0a11      	lsrs	r1, r2, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:95
	buffer[2] = *(temp_ptr    );
   121f6:	70aa      	strb	r2, [r5, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:94
	buffer[0] = 0x00;

	// Write id
	uint16_t ID = ((Log.variables[index].groupID & 0x003F) << 10) + (index & 0x3FF);
	uint8_t * temp_ptr = (uint8_t*)(&ID);
	buffer[1] = *(temp_ptr + 1);
   121f8:	7069      	strb	r1, [r5, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:99
	buffer[2] = *(temp_ptr    );

	// Write type & writeable

	type = (uint8_t)(Log.variables[index].type);
   121fa:	7b1a      	ldrb	r2, [r3, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:101

	if(Log.variables[index].writeable)
   121fc:	799b      	ldrb	r3, [r3, #6]
   121fe:	2b00      	cmp	r3, #0
   12200:	d001      	beq.n	12206 <distantio_decode+0xbe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:102
		type += 0xF0;
   12202:	3a10      	subs	r2, #16
   12204:	b2d2      	uxtb	r2, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:110

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.variables[index].name))
   12206:	1b3b      	subs	r3, r7, r4
   12208:	009b      	lsls	r3, r3, #2
   1220a:	1c18      	adds	r0, r3, #0
   1220c:	3010      	adds	r0, #16
   1220e:	1830      	adds	r0, r6, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:104
	type = (uint8_t)(Log.variables[index].type);

	if(Log.variables[index].writeable)
		type += 0xF0;

	buffer[3] = type;
   12210:	70ea      	strb	r2, [r5, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:110

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.variables[index].name))
   12212:	469a      	mov	sl, r3
   12214:	f002 f9cb 	bl	145ae <strlen>
   12218:	2800      	cmp	r0, #0
   1221a:	d038      	beq.n	1228e <distantio_decode+0x146>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:112
		{
			buffer[i] = Log.variables[index].name[k];
   1221c:	4653      	mov	r3, sl
   1221e:	18f3      	adds	r3, r6, r3
   12220:	7c1a      	ldrb	r2, [r3, #16]
   12222:	712a      	strb	r2, [r5, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:116
			i++;
		}
		else
			buffer[i++] = 0;
   12224:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:110

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.variables[index].name))
   12226:	2801      	cmp	r0, #1
   12228:	d900      	bls.n	1222c <distantio_decode+0xe4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:112
		{
			buffer[i] = Log.variables[index].name[k];
   1222a:	7c5a      	ldrb	r2, [r3, #17]
   1222c:	716a      	strb	r2, [r5, #5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:110

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.variables[index].name))
   1222e:	2802      	cmp	r0, #2
   12230:	d800      	bhi.n	12234 <distantio_decode+0xec>
   12232:	e0fa      	b.n	1242a <distantio_decode+0x2e2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:112
		{
			buffer[i] = Log.variables[index].name[k];
   12234:	1b3b      	subs	r3, r7, r4
   12236:	009b      	lsls	r3, r3, #2
   12238:	18f3      	adds	r3, r6, r3
   1223a:	7c9a      	ldrb	r2, [r3, #18]
   1223c:	71aa      	strb	r2, [r5, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:110

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.variables[index].name))
   1223e:	2803      	cmp	r0, #3
   12240:	d800      	bhi.n	12244 <distantio_decode+0xfc>
   12242:	e0f0      	b.n	12426 <distantio_decode+0x2de>
   12244:	7cda      	ldrb	r2, [r3, #19]
   12246:	71ea      	strb	r2, [r5, #7]
   12248:	2804      	cmp	r0, #4
   1224a:	d800      	bhi.n	1224e <distantio_decode+0x106>
   1224c:	e0e9      	b.n	12422 <distantio_decode+0x2da>
   1224e:	7d1a      	ldrb	r2, [r3, #20]
   12250:	722a      	strb	r2, [r5, #8]
   12252:	2805      	cmp	r0, #5
   12254:	d800      	bhi.n	12258 <distantio_decode+0x110>
   12256:	e0e2      	b.n	1241e <distantio_decode+0x2d6>
   12258:	7d5a      	ldrb	r2, [r3, #21]
   1225a:	726a      	strb	r2, [r5, #9]
   1225c:	2806      	cmp	r0, #6
   1225e:	d800      	bhi.n	12262 <distantio_decode+0x11a>
   12260:	e0d3      	b.n	1240a <distantio_decode+0x2c2>
   12262:	7d9a      	ldrb	r2, [r3, #22]
   12264:	72aa      	strb	r2, [r5, #10]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:116
		{
			buffer[i] = Log.variables[index].name[k];
			i++;
		}
		else
			buffer[i++] = 0;
   12266:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:110

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.variables[index].name))
   12268:	2807      	cmp	r0, #7
   1226a:	d900      	bls.n	1226e <distantio_decode+0x126>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:112
		{
			buffer[i] = Log.variables[index].name[k];
   1226c:	7dda      	ldrb	r2, [r3, #23]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:120
		else
			buffer[i++] = 0;
	}

	// Compute crc
	uint16_t crc_value = crc16(buffer,i);
   1226e:	210c      	movs	r1, #12
   12270:	1c28      	adds	r0, r5, #0
   12272:	72ea      	strb	r2, [r5, #11]
   12274:	f7ff fe46 	bl	11f04 <crc16>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:127
	// Write crc into buffer's last byte
	buffer[i++] = (crc_value >> 8) & 0xFF;
	buffer[i++] = crc_value & 0xFF;

	// Encode frame
	encode(buffer,i);
   12278:	210e      	movs	r1, #14
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:123

	// Compute crc
	uint16_t crc_value = crc16(buffer,i);

	// Write crc into buffer's last byte
	buffer[i++] = (crc_value >> 8) & 0xFF;
   1227a:	0a03      	lsrs	r3, r0, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:124
	buffer[i++] = crc_value & 0xFF;
   1227c:	7368      	strb	r0, [r5, #13]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:127

	// Encode frame
	encode(buffer,i);
   1227e:	1c28      	adds	r0, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:123

	// Compute crc
	uint16_t crc_value = crc16(buffer,i);

	// Write crc into buffer's last byte
	buffer[i++] = (crc_value >> 8) & 0xFF;
   12280:	732b      	strb	r3, [r5, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:127
	buffer[i++] = crc_value & 0xFF;

	// Encode frame
	encode(buffer,i);
   12282:	f7fd fc49 	bl	fb18 <encode>
   12286:	2382      	movs	r3, #130	; 0x82
   12288:	019b      	lsls	r3, r3, #6
   1228a:	5af3      	ldrh	r3, [r6, r3]
   1228c:	e79f      	b.n	121ce <distantio_decode+0x86>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:116
		{
			buffer[i] = Log.variables[index].name[k];
			i++;
		}
		else
			buffer[i++] = 0;
   1228e:	2300      	movs	r3, #0
   12290:	7128      	strb	r0, [r5, #4]
   12292:	7168      	strb	r0, [r5, #5]
   12294:	71ab      	strb	r3, [r5, #6]
   12296:	2300      	movs	r3, #0
   12298:	71eb      	strb	r3, [r5, #7]
   1229a:	2300      	movs	r3, #0
   1229c:	722b      	strb	r3, [r5, #8]
   1229e:	2300      	movs	r3, #0
   122a0:	726b      	strb	r3, [r5, #9]
   122a2:	2300      	movs	r3, #0
   122a4:	72ab      	strb	r3, [r5, #10]
   122a6:	2200      	movs	r2, #0
   122a8:	e7e1      	b.n	1226e <distantio_decode+0x126>
send_group_descriptor():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:138
		return;

	static uint8_t buffer[PAYLOAD_SIZE];

	// Respond returned-descriptor
	buffer[0] = 0x00;
   122aa:	2200      	movs	r2, #0
   122ac:	4691      	mov	r9, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:141

	// Write id
	uint16_t ID = (index & 0x3F) << 10;
   122ae:	466a      	mov	r2, sp
distantio_decode():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:206
		case 0x02:
			// Send variables
			for(uint16_t i = 0 ; i < Log.amount ; i++)
				send_descriptor(i);
			// Send groups
			for(uint16_t i = 0 ; i <= Log.current_group_id ; i++)
   122b0:	4b61      	ldr	r3, [pc, #388]	; (12438 <distantio_decode+0x2f0>)
   122b2:	2400      	movs	r4, #0
   122b4:	5cf3      	ldrb	r3, [r6, r3]
send_group_descriptor():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:138
		return;

	static uint8_t buffer[PAYLOAD_SIZE];

	// Respond returned-descriptor
	buffer[0] = 0x00;
   122b6:	4d61      	ldr	r5, [pc, #388]	; (1243c <distantio_decode+0x2f4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:141

	// Write id
	uint16_t ID = (index & 0x3F) << 10;
   122b8:	1d97      	adds	r7, r2, #6
   122ba:	e004      	b.n	122c6 <distantio_decode+0x17e>
distantio_decode():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:206 (discriminator 3)
		case 0x02:
			// Send variables
			for(uint16_t i = 0 ; i < Log.amount ; i++)
				send_descriptor(i);
			// Send groups
			for(uint16_t i = 0 ; i <= Log.current_group_id ; i++)
   122bc:	3401      	adds	r4, #1
   122be:	b2a4      	uxth	r4, r4
   122c0:	42a3      	cmp	r3, r4
   122c2:	d200      	bcs.n	122c6 <distantio_decode+0x17e>
   122c4:	e748      	b.n	12158 <distantio_decode+0x10>
send_group_descriptor():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:132
	encode(buffer,i);
}

void send_group_descriptor(uint16_t index)
{
	if(index > Log.current_group_id)
   122c6:	429c      	cmp	r4, r3
   122c8:	d8f8      	bhi.n	122bc <distantio_decode+0x174>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:138
		return;

	static uint8_t buffer[PAYLOAD_SIZE];

	// Respond returned-descriptor
	buffer[0] = 0x00;
   122ca:	464b      	mov	r3, r9
   122cc:	702b      	strb	r3, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:141

	// Write id
	uint16_t ID = (index & 0x3F) << 10;
   122ce:	02a3      	lsls	r3, r4, #10
   122d0:	803b      	strh	r3, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:143
	uint8_t * temp_ptr = (uint8_t*)(&ID);
	buffer[1] = *(temp_ptr + 1);
   122d2:	0a1b      	lsrs	r3, r3, #8
   122d4:	706b      	strb	r3, [r5, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:144
	buffer[2] = *(temp_ptr);
   122d6:	2300      	movs	r3, #0
   122d8:	70ab      	strb	r3, [r5, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:147

	// Write type
	buffer[3] = 0x07;
   122da:	3307      	adds	r3, #7
   122dc:	70eb      	strb	r3, [r5, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:153

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.groups[index].name))
   122de:	00e3      	lsls	r3, r4, #3
   122e0:	4698      	mov	r8, r3
   122e2:	46a2      	mov	sl, r4
   122e4:	20e0      	movs	r0, #224	; 0xe0
   122e6:	44c2      	add	sl, r8
   122e8:	0140      	lsls	r0, r0, #5
   122ea:	4450      	add	r0, sl
   122ec:	1830      	adds	r0, r6, r0
   122ee:	f002 f95e 	bl	145ae <strlen>
   122f2:	2800      	cmp	r0, #0
   122f4:	d046      	beq.n	12384 <distantio_decode+0x23c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:155
		{
			buffer[i] = Log.groups[index].name[k];
   122f6:	4653      	mov	r3, sl
   122f8:	22e0      	movs	r2, #224	; 0xe0
   122fa:	18f3      	adds	r3, r6, r3
   122fc:	0152      	lsls	r2, r2, #5
   122fe:	189a      	adds	r2, r3, r2
   12300:	7812      	ldrb	r2, [r2, #0]
   12302:	712a      	strb	r2, [r5, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:159
			i++;
		}
		else
			buffer[i++] = 0;
   12304:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:153

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.groups[index].name))
   12306:	2801      	cmp	r0, #1
   12308:	d903      	bls.n	12312 <distantio_decode+0x1ca>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:155
		{
			buffer[i] = Log.groups[index].name[k];
   1230a:	4a4d      	ldr	r2, [pc, #308]	; (12440 <distantio_decode+0x2f8>)
   1230c:	4694      	mov	ip, r2
   1230e:	4463      	add	r3, ip
   12310:	781a      	ldrb	r2, [r3, #0]
   12312:	716a      	strb	r2, [r5, #5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:153

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.groups[index].name))
   12314:	2802      	cmp	r0, #2
   12316:	d800      	bhi.n	1231a <distantio_decode+0x1d2>
   12318:	e07f      	b.n	1241a <distantio_decode+0x2d2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:155
		{
			buffer[i] = Log.groups[index].name[k];
   1231a:	4643      	mov	r3, r8
   1231c:	4a49      	ldr	r2, [pc, #292]	; (12444 <distantio_decode+0x2fc>)
   1231e:	191b      	adds	r3, r3, r4
   12320:	18f3      	adds	r3, r6, r3
   12322:	189a      	adds	r2, r3, r2
   12324:	7812      	ldrb	r2, [r2, #0]
   12326:	71aa      	strb	r2, [r5, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:153

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.groups[index].name))
   12328:	2803      	cmp	r0, #3
   1232a:	d974      	bls.n	12416 <distantio_decode+0x2ce>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:155
		{
			buffer[i] = Log.groups[index].name[k];
   1232c:	4a46      	ldr	r2, [pc, #280]	; (12448 <distantio_decode+0x300>)
   1232e:	189a      	adds	r2, r3, r2
   12330:	7812      	ldrb	r2, [r2, #0]
   12332:	71ea      	strb	r2, [r5, #7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:153

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.groups[index].name))
   12334:	2804      	cmp	r0, #4
   12336:	d96c      	bls.n	12412 <distantio_decode+0x2ca>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:155
		{
			buffer[i] = Log.groups[index].name[k];
   12338:	4a44      	ldr	r2, [pc, #272]	; (1244c <distantio_decode+0x304>)
   1233a:	189a      	adds	r2, r3, r2
   1233c:	7812      	ldrb	r2, [r2, #0]
   1233e:	722a      	strb	r2, [r5, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:153

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.groups[index].name))
   12340:	2805      	cmp	r0, #5
   12342:	d964      	bls.n	1240e <distantio_decode+0x2c6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:155
		{
			buffer[i] = Log.groups[index].name[k];
   12344:	4a42      	ldr	r2, [pc, #264]	; (12450 <distantio_decode+0x308>)
   12346:	189a      	adds	r2, r3, r2
   12348:	7812      	ldrb	r2, [r2, #0]
   1234a:	726a      	strb	r2, [r5, #9]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:153

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.groups[index].name))
   1234c:	2806      	cmp	r0, #6
   1234e:	d95a      	bls.n	12406 <distantio_decode+0x2be>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:155
		{
			buffer[i] = Log.groups[index].name[k];
   12350:	4a40      	ldr	r2, [pc, #256]	; (12454 <distantio_decode+0x30c>)
   12352:	189a      	adds	r2, r3, r2
   12354:	7812      	ldrb	r2, [r2, #0]
   12356:	72aa      	strb	r2, [r5, #10]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:159
			i++;
		}
		else
			buffer[i++] = 0;
   12358:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:153

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.groups[index].name))
   1235a:	2807      	cmp	r0, #7
   1235c:	d903      	bls.n	12366 <distantio_decode+0x21e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:155
		{
			buffer[i] = Log.groups[index].name[k];
   1235e:	4a3e      	ldr	r2, [pc, #248]	; (12458 <distantio_decode+0x310>)
   12360:	4694      	mov	ip, r2
   12362:	4463      	add	r3, ip
   12364:	781a      	ldrb	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:163
		else
			buffer[i++] = 0;
	}

	// Compute crc
	uint16_t crc_value = crc16(buffer,i);
   12366:	210c      	movs	r1, #12
   12368:	1c28      	adds	r0, r5, #0
   1236a:	72ea      	strb	r2, [r5, #11]
   1236c:	f7ff fdca 	bl	11f04 <crc16>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:170
	// Write crc into buffer's last byte
	buffer[i++] = (crc_value >> 8) & 0xFF;
	buffer[i++] = crc_value & 0xFF;

	// Encode frame
	encode(buffer,i);
   12370:	210e      	movs	r1, #14
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:166

	// Compute crc
	uint16_t crc_value = crc16(buffer,i);

	// Write crc into buffer's last byte
	buffer[i++] = (crc_value >> 8) & 0xFF;
   12372:	0a03      	lsrs	r3, r0, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:167
	buffer[i++] = crc_value & 0xFF;
   12374:	7368      	strb	r0, [r5, #13]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:170

	// Encode frame
	encode(buffer,i);
   12376:	1c28      	adds	r0, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:166

	// Compute crc
	uint16_t crc_value = crc16(buffer,i);

	// Write crc into buffer's last byte
	buffer[i++] = (crc_value >> 8) & 0xFF;
   12378:	732b      	strb	r3, [r5, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:170
	buffer[i++] = crc_value & 0xFF;

	// Encode frame
	encode(buffer,i);
   1237a:	f7fd fbcd 	bl	fb18 <encode>
   1237e:	4b2e      	ldr	r3, [pc, #184]	; (12438 <distantio_decode+0x2f0>)
   12380:	5cf3      	ldrb	r3, [r6, r3]
   12382:	e79b      	b.n	122bc <distantio_decode+0x174>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:159
		{
			buffer[i] = Log.groups[index].name[k];
			i++;
		}
		else
			buffer[i++] = 0;
   12384:	2300      	movs	r3, #0
   12386:	7128      	strb	r0, [r5, #4]
   12388:	7168      	strb	r0, [r5, #5]
   1238a:	71ab      	strb	r3, [r5, #6]
   1238c:	2300      	movs	r3, #0
   1238e:	71eb      	strb	r3, [r5, #7]
   12390:	2300      	movs	r3, #0
   12392:	722b      	strb	r3, [r5, #8]
   12394:	2300      	movs	r3, #0
   12396:	726b      	strb	r3, [r5, #9]
   12398:	2300      	movs	r3, #0
   1239a:	72ab      	strb	r3, [r5, #10]
   1239c:	2200      	movs	r2, #0
   1239e:	e7e2      	b.n	12366 <distantio_decode+0x21e>
distantio_decode():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:212
				send_group_descriptor(i);
			break;

		// User provided value to write
		case 0x04:
			if(ID >= Log.amount)
   123a0:	2282      	movs	r2, #130	; 0x82
   123a2:	4e23      	ldr	r6, [pc, #140]	; (12430 <distantio_decode+0x2e8>)
   123a4:	0192      	lsls	r2, r2, #6
   123a6:	5ab2      	ldrh	r2, [r6, r2]
   123a8:	429a      	cmp	r2, r3
   123aa:	d800      	bhi.n	123ae <distantio_decode+0x266>
   123ac:	e6d4      	b.n	12158 <distantio_decode+0x10>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:215
				return;

			if(Log.variables[ID].writeable == 0x00)
   123ae:	00da      	lsls	r2, r3, #3
   123b0:	1ad3      	subs	r3, r2, r3
   123b2:	009b      	lsls	r3, r3, #2
   123b4:	18f2      	adds	r2, r6, r3
   123b6:	7990      	ldrb	r0, [r2, #6]
   123b8:	2800      	cmp	r0, #0
   123ba:	d100      	bne.n	123be <distantio_decode+0x276>
   123bc:	e6cc      	b.n	12158 <distantio_decode+0x10>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:218
				return;

			if(Log.variables[ID].type != type)
   123be:	68d0      	ldr	r0, [r2, #12]
   123c0:	4288      	cmp	r0, r1
   123c2:	d000      	beq.n	123c6 <distantio_decode+0x27e>
   123c4:	e6c8      	b.n	12158 <distantio_decode+0x10>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:224 (discriminator 1)
				return;

			uint16_t start_address = 4 + DATA_SIZE - 1;

			// Copy contents directly into variable
			for(uint16_t i = 0 ; i < Log.variables[ID].size ; i++)
   123c6:	8892      	ldrh	r2, [r2, #4]
   123c8:	2a00      	cmp	r2, #0
   123ca:	d100      	bne.n	123ce <distantio_decode+0x286>
   123cc:	e6c4      	b.n	12158 <distantio_decode+0x10>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:224
   123ce:	2200      	movs	r2, #0
   123d0:	200b      	movs	r0, #11
   123d2:	1a81      	subs	r1, r0, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:228 (discriminator 3)
			{
				// Packet is big-endian, convert to little-endian
				uint8_t offset = start_address - i;
				*(Log.variables[ID].ptr + i) = *(data + offset);
   123d4:	b2c9      	uxtb	r1, r1
   123d6:	5c61      	ldrb	r1, [r4, r1]
   123d8:	58f5      	ldr	r5, [r6, r3]
   123da:	54a9      	strb	r1, [r5, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:224 (discriminator 3)
				return;

			uint16_t start_address = 4 + DATA_SIZE - 1;

			// Copy contents directly into variable
			for(uint16_t i = 0 ; i < Log.variables[ID].size ; i++)
   123dc:	18f1      	adds	r1, r6, r3
   123de:	3201      	adds	r2, #1
   123e0:	8889      	ldrh	r1, [r1, #4]
   123e2:	b292      	uxth	r2, r2
   123e4:	4291      	cmp	r1, r2
   123e6:	d8f4      	bhi.n	123d2 <distantio_decode+0x28a>
   123e8:	e6b6      	b.n	12158 <distantio_decode+0x10>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:234
			}
			break;

		// User requested variable read
		case 0x05:
			if(ID >= Log.amount)
   123ea:	2282      	movs	r2, #130	; 0x82
   123ec:	4910      	ldr	r1, [pc, #64]	; (12430 <distantio_decode+0x2e8>)
   123ee:	0192      	lsls	r2, r2, #6
   123f0:	5a8a      	ldrh	r2, [r1, r2]
   123f2:	429a      	cmp	r2, r3
   123f4:	d800      	bhi.n	123f8 <distantio_decode+0x2b0>
   123f6:	e6af      	b.n	12158 <distantio_decode+0x10>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:237
				return;

			Log.variables[ID].send = 1;
   123f8:	00da      	lsls	r2, r3, #3
   123fa:	1ad3      	subs	r3, r2, r3
   123fc:	2201      	movs	r2, #1
   123fe:	009b      	lsls	r3, r3, #2
   12400:	18cb      	adds	r3, r1, r3
   12402:	761a      	strb	r2, [r3, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:238
			break;
   12404:	e6a8      	b.n	12158 <distantio_decode+0x10>
send_group_descriptor():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:159
		{
			buffer[i] = Log.groups[index].name[k];
			i++;
		}
		else
			buffer[i++] = 0;
   12406:	2300      	movs	r3, #0
   12408:	e7c7      	b.n	1239a <distantio_decode+0x252>
send_descriptor():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:116
		{
			buffer[i] = Log.variables[index].name[k];
			i++;
		}
		else
			buffer[i++] = 0;
   1240a:	2300      	movs	r3, #0
   1240c:	e74a      	b.n	122a4 <distantio_decode+0x15c>
send_group_descriptor():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:159
		{
			buffer[i] = Log.groups[index].name[k];
			i++;
		}
		else
			buffer[i++] = 0;
   1240e:	2300      	movs	r3, #0
   12410:	e7c1      	b.n	12396 <distantio_decode+0x24e>
   12412:	2300      	movs	r3, #0
   12414:	e7bd      	b.n	12392 <distantio_decode+0x24a>
   12416:	2300      	movs	r3, #0
   12418:	e7b9      	b.n	1238e <distantio_decode+0x246>
   1241a:	2300      	movs	r3, #0
   1241c:	e7b5      	b.n	1238a <distantio_decode+0x242>
send_descriptor():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:116
		{
			buffer[i] = Log.variables[index].name[k];
			i++;
		}
		else
			buffer[i++] = 0;
   1241e:	2300      	movs	r3, #0
   12420:	e73e      	b.n	122a0 <distantio_decode+0x158>
   12422:	2300      	movs	r3, #0
   12424:	e73a      	b.n	1229c <distantio_decode+0x154>
   12426:	2300      	movs	r3, #0
   12428:	e736      	b.n	12298 <distantio_decode+0x150>
   1242a:	2300      	movs	r3, #0
   1242c:	e732      	b.n	12294 <distantio_decode+0x14c>
   1242e:	46c0      	nop			; (mov r8, r8)
   12430:	1fffe388 	.word	0x1fffe388
   12434:	2000040c 	.word	0x2000040c
   12438:	00002082 	.word	0x00002082
   1243c:	1fffe378 	.word	0x1fffe378
   12440:	00001c01 	.word	0x00001c01
   12444:	00001c02 	.word	0x00001c02
   12448:	00001c03 	.word	0x00001c03
   1244c:	00001c04 	.word	0x00001c04
   12450:	00001c05 	.word	0x00001c05
   12454:	00001c06 	.word	0x00001c06
   12458:	00001c07 	.word	0x00001c07

0001245c <send_variables>:
send_variables():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:251
		
	}
}

void send_variables()
{
   1245c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1245e:	464f      	mov	r7, r9
   12460:	4646      	mov	r6, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:252
	for(uint16_t i = 0 ; i < Log.amount ; i++)
   12462:	2382      	movs	r3, #130	; 0x82
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:251
		
	}
}

void send_variables()
{
   12464:	b4c0      	push	{r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:252
	for(uint16_t i = 0 ; i < Log.amount ; i++)
   12466:	4e3f      	ldr	r6, [pc, #252]	; (12564 <send_variables+0x108>)
   12468:	019b      	lsls	r3, r3, #6
   1246a:	5af7      	ldrh	r7, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:251
		
	}
}

void send_variables()
{
   1246c:	b083      	sub	sp, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:252
	for(uint16_t i = 0 ; i < Log.amount ; i++)
   1246e:	2400      	movs	r4, #0
   12470:	2f00      	cmp	r7, #0
   12472:	d04f      	beq.n	12514 <send_variables+0xb8>
send_variable():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:269
		return;

	static uint8_t buffer[PAYLOAD_SIZE];

	// Response code 0x01
	buffer[0] = 0x01;
   12474:	2301      	movs	r3, #1
   12476:	4d3c      	ldr	r5, [pc, #240]	; (12568 <send_variables+0x10c>)
   12478:	4699      	mov	r9, r3
   1247a:	e003      	b.n	12484 <send_variables+0x28>
send_variables():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:252 (discriminator 2)
	}
}

void send_variables()
{
	for(uint16_t i = 0 ; i < Log.amount ; i++)
   1247c:	3401      	adds	r4, #1
   1247e:	b2a4      	uxth	r4, r4
   12480:	42bc      	cmp	r4, r7
   12482:	d247      	bcs.n	12514 <send_variables+0xb8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:254
	{
		if(Log.variables[i].send == 0)
   12484:	2118      	movs	r1, #24
   12486:	4688      	mov	r8, r1
   12488:	00e0      	lsls	r0, r4, #3
   1248a:	1b03      	subs	r3, r0, r4
   1248c:	009b      	lsls	r3, r3, #2
   1248e:	18f2      	adds	r2, r6, r3
   12490:	7e11      	ldrb	r1, [r2, #24]
   12492:	4490      	add	r8, r2
   12494:	2900      	cmp	r1, #0
   12496:	d0f1      	beq.n	1247c <send_variables+0x20>
send_variable():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:263
	}
}

void send_variable(uint16_t index)
{
	if(index >= Log.amount)
   12498:	42a7      	cmp	r7, r4
   1249a:	d9ef      	bls.n	1247c <send_variables+0x20>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:269
		return;

	static uint8_t buffer[PAYLOAD_SIZE];

	// Response code 0x01
	buffer[0] = 0x01;
   1249c:	4649      	mov	r1, r9
   1249e:	7029      	strb	r1, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:272
	
	// Write variable ID
	uint16_t ID = ((Log.variables[index].groupID & 0x003F) << 10) + (index & 0x3FF);
   124a0:	05a1      	lsls	r1, r4, #22
   124a2:	0d8f      	lsrs	r7, r1, #22
   124a4:	4641      	mov	r1, r8
   124a6:	7849      	ldrb	r1, [r1, #1]
   124a8:	0289      	lsls	r1, r1, #10
   124aa:	1879      	adds	r1, r7, r1
   124ac:	466f      	mov	r7, sp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:275
	uint8_t * temp_ptr = (uint8_t*)(&ID);
	buffer[1] = *(temp_ptr + 1);
	buffer[2] = *(temp_ptr);
   124ae:	70a9      	strb	r1, [r5, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:272

	// Response code 0x01
	buffer[0] = 0x01;
	
	// Write variable ID
	uint16_t ID = ((Log.variables[index].groupID & 0x003F) << 10) + (index & 0x3FF);
   124b0:	80f9      	strh	r1, [r7, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:274
	uint8_t * temp_ptr = (uint8_t*)(&ID);
	buffer[1] = *(temp_ptr + 1);
   124b2:	0a0f      	lsrs	r7, r1, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:278
	buffer[2] = *(temp_ptr);
	
	// Write variable type
	buffer[3] = Log.variables[index].type;
   124b4:	7b11      	ldrb	r1, [r2, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:274
	buffer[0] = 0x01;
	
	// Write variable ID
	uint16_t ID = ((Log.variables[index].groupID & 0x003F) << 10) + (index & 0x3FF);
	uint8_t * temp_ptr = (uint8_t*)(&ID);
	buffer[1] = *(temp_ptr + 1);
   124b6:	706f      	strb	r7, [r5, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:278
	buffer[2] = *(temp_ptr);
	
	// Write variable type
	buffer[3] = Log.variables[index].type;
   124b8:	70e9      	strb	r1, [r5, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:289
	for(uint16_t k = 0 ; k < DATA_SIZE ; k++)
	{
		uint16_t off = DATA_SIZE - 1 - k;

		// Fill buffer with data
		if(off < Log.variables[index].size)
   124ba:	8892      	ldrh	r2, [r2, #4]
   124bc:	2a07      	cmp	r2, #7
   124be:	d82e      	bhi.n	1251e <send_variables+0xc2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:297
			buffer[i++] = *temp_ptr;
		}
		// Fill remaining bits with 0
		else
		{
			buffer[i++] = 0;
   124c0:	2100      	movs	r1, #0
   124c2:	7129      	strb	r1, [r5, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:289
	for(uint16_t k = 0 ; k < DATA_SIZE ; k++)
	{
		uint16_t off = DATA_SIZE - 1 - k;

		// Fill buffer with data
		if(off < Log.variables[index].size)
   124c4:	2a07      	cmp	r2, #7
   124c6:	d03b      	beq.n	12540 <send_variables+0xe4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:297
			buffer[i++] = *temp_ptr;
		}
		// Fill remaining bits with 0
		else
		{
			buffer[i++] = 0;
   124c8:	7169      	strb	r1, [r5, #5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:289
	for(uint16_t k = 0 ; k < DATA_SIZE ; k++)
	{
		uint16_t off = DATA_SIZE - 1 - k;

		// Fill buffer with data
		if(off < Log.variables[index].size)
   124ca:	2a06      	cmp	r2, #6
   124cc:	d047      	beq.n	1255e <send_variables+0x102>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:297
			buffer[i++] = *temp_ptr;
		}
		// Fill remaining bits with 0
		else
		{
			buffer[i++] = 0;
   124ce:	71a9      	strb	r1, [r5, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:289
	for(uint16_t k = 0 ; k < DATA_SIZE ; k++)
	{
		uint16_t off = DATA_SIZE - 1 - k;

		// Fill buffer with data
		if(off < Log.variables[index].size)
   124d0:	2a05      	cmp	r2, #5
   124d2:	d042      	beq.n	1255a <send_variables+0xfe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:297
			buffer[i++] = *temp_ptr;
		}
		// Fill remaining bits with 0
		else
		{
			buffer[i++] = 0;
   124d4:	71e9      	strb	r1, [r5, #7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:289
	for(uint16_t k = 0 ; k < DATA_SIZE ; k++)
	{
		uint16_t off = DATA_SIZE - 1 - k;

		// Fill buffer with data
		if(off < Log.variables[index].size)
   124d6:	2a04      	cmp	r2, #4
   124d8:	d03d      	beq.n	12556 <send_variables+0xfa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:297
			buffer[i++] = *temp_ptr;
		}
		// Fill remaining bits with 0
		else
		{
			buffer[i++] = 0;
   124da:	7229      	strb	r1, [r5, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:289
	for(uint16_t k = 0 ; k < DATA_SIZE ; k++)
	{
		uint16_t off = DATA_SIZE - 1 - k;

		// Fill buffer with data
		if(off < Log.variables[index].size)
   124dc:	2a03      	cmp	r2, #3
   124de:	d038      	beq.n	12552 <send_variables+0xf6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:297
			buffer[i++] = *temp_ptr;
		}
		// Fill remaining bits with 0
		else
		{
			buffer[i++] = 0;
   124e0:	7269      	strb	r1, [r5, #9]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:289
	for(uint16_t k = 0 ; k < DATA_SIZE ; k++)
	{
		uint16_t off = DATA_SIZE - 1 - k;

		// Fill buffer with data
		if(off < Log.variables[index].size)
   124e2:	2a02      	cmp	r2, #2
   124e4:	d033      	beq.n	1254e <send_variables+0xf2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:297
			buffer[i++] = *temp_ptr;
		}
		// Fill remaining bits with 0
		else
		{
			buffer[i++] = 0;
   124e6:	72a9      	strb	r1, [r5, #10]
   124e8:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:289
	for(uint16_t k = 0 ; k < DATA_SIZE ; k++)
	{
		uint16_t off = DATA_SIZE - 1 - k;

		// Fill buffer with data
		if(off < Log.variables[index].size)
   124ea:	2a00      	cmp	r2, #0
   124ec:	d12a      	bne.n	12544 <send_variables+0xe8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:302
			buffer[i++] = 0;
		}
	}
	
	// Compute crc
	uint16_t crc_value = crc16(buffer,i);
   124ee:	210c      	movs	r1, #12
   124f0:	1c28      	adds	r0, r5, #0
   124f2:	72eb      	strb	r3, [r5, #11]
   124f4:	f7ff fd06 	bl	11f04 <crc16>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:309
	// Write crc into buffer's last byte
	buffer[i++] = (crc_value >> 8) & 0xFF;
	buffer[i++] = crc_value & 0xFF;

	// Encode frame
	encode(buffer,i);
   124f8:	210e      	movs	r1, #14
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:305
	
	// Compute crc
	uint16_t crc_value = crc16(buffer,i);

	// Write crc into buffer's last byte
	buffer[i++] = (crc_value >> 8) & 0xFF;
   124fa:	0a03      	lsrs	r3, r0, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:306
	buffer[i++] = crc_value & 0xFF;
   124fc:	7368      	strb	r0, [r5, #13]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:309

	// Encode frame
	encode(buffer,i);
   124fe:	1c28      	adds	r0, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:305
	
	// Compute crc
	uint16_t crc_value = crc16(buffer,i);

	// Write crc into buffer's last byte
	buffer[i++] = (crc_value >> 8) & 0xFF;
   12500:	732b      	strb	r3, [r5, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:309
	buffer[i++] = crc_value & 0xFF;

	// Encode frame
	encode(buffer,i);
   12502:	f7fd fb09 	bl	fb18 <encode>
   12506:	2382      	movs	r3, #130	; 0x82
   12508:	019b      	lsls	r3, r3, #6
send_variables():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:252
	}
}

void send_variables()
{
	for(uint16_t i = 0 ; i < Log.amount ; i++)
   1250a:	3401      	adds	r4, #1
   1250c:	5af7      	ldrh	r7, [r6, r3]
   1250e:	b2a4      	uxth	r4, r4
   12510:	42bc      	cmp	r4, r7
   12512:	d3b7      	bcc.n	12484 <send_variables+0x28>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:259
		if(Log.variables[i].send == 0)
			continue;

		send_variable(i);
	}
}
   12514:	b003      	add	sp, #12
   12516:	bc0c      	pop	{r2, r3}
   12518:	4690      	mov	r8, r2
   1251a:	4699      	mov	r9, r3
   1251c:	bdf0      	pop	{r4, r5, r6, r7, pc}
send_variable():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:291
		uint16_t off = DATA_SIZE - 1 - k;

		// Fill buffer with data
		if(off < Log.variables[index].size)
		{
			temp_ptr = Log.variables[index].ptr + off ;
   1251e:	599b      	ldr	r3, [r3, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:292
			buffer[i++] = *temp_ptr;
   12520:	79da      	ldrb	r2, [r3, #7]
   12522:	712a      	strb	r2, [r5, #4]
   12524:	799a      	ldrb	r2, [r3, #6]
   12526:	716a      	strb	r2, [r5, #5]
   12528:	795a      	ldrb	r2, [r3, #5]
   1252a:	71aa      	strb	r2, [r5, #6]
   1252c:	791a      	ldrb	r2, [r3, #4]
   1252e:	71ea      	strb	r2, [r5, #7]
   12530:	78da      	ldrb	r2, [r3, #3]
   12532:	722a      	strb	r2, [r5, #8]
   12534:	789a      	ldrb	r2, [r3, #2]
   12536:	726a      	strb	r2, [r5, #9]
   12538:	785a      	ldrb	r2, [r3, #1]
   1253a:	72aa      	strb	r2, [r5, #10]
   1253c:	781b      	ldrb	r3, [r3, #0]
   1253e:	e7d6      	b.n	124ee <send_variables+0x92>
   12540:	599b      	ldr	r3, [r3, r6]
   12542:	e7ef      	b.n	12524 <send_variables+0xc8>
   12544:	1b03      	subs	r3, r0, r4
   12546:	009b      	lsls	r3, r3, #2
   12548:	58f3      	ldr	r3, [r6, r3]
   1254a:	781b      	ldrb	r3, [r3, #0]
   1254c:	e7cf      	b.n	124ee <send_variables+0x92>
   1254e:	599b      	ldr	r3, [r3, r6]
   12550:	e7f2      	b.n	12538 <send_variables+0xdc>
   12552:	599b      	ldr	r3, [r3, r6]
   12554:	e7ee      	b.n	12534 <send_variables+0xd8>
   12556:	599b      	ldr	r3, [r3, r6]
   12558:	e7ea      	b.n	12530 <send_variables+0xd4>
   1255a:	599b      	ldr	r3, [r3, r6]
   1255c:	e7e6      	b.n	1252c <send_variables+0xd0>
   1255e:	599b      	ldr	r3, [r3, r6]
   12560:	e7e2      	b.n	12528 <send_variables+0xcc>
   12562:	46c0      	nop			; (mov r8, r8)
   12564:	1fffe388 	.word	0x1fffe388
   12568:	2000041c 	.word	0x2000041c

0001256c <send_alive>:
send_alive():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:320
	
	uint16_t index = 1;
	uint16_t group = 0;
	uint16_t ID = ((group & 0x003F) << 10) + (index & 0x3FF);
	uint8_t * temp_ptr = (uint8_t*)(&ID);
	buffer[1] = *(temp_ptr + 1);
   1256c:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:313
	// Encode frame
	encode(buffer,i);
}

void send_alive()
{
   1256e:	b510      	push	{r4, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:320
	
	uint16_t index = 1;
	uint16_t group = 0;
	uint16_t ID = ((group & 0x003F) << 10) + (index & 0x3FF);
	uint8_t * temp_ptr = (uint8_t*)(&ID);
	buffer[1] = *(temp_ptr + 1);
   12570:	4c07      	ldr	r4, [pc, #28]	; (12590 <send_alive+0x24>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:324
	buffer[2] = *(temp_ptr    );

	// Compute crc
	uint16_t crc_value = crc16(buffer,PAYLOAD_SIZE - 2);
   12572:	210c      	movs	r1, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:320
	
	uint16_t index = 1;
	uint16_t group = 0;
	uint16_t ID = ((group & 0x003F) << 10) + (index & 0x3FF);
	uint8_t * temp_ptr = (uint8_t*)(&ID);
	buffer[1] = *(temp_ptr + 1);
   12574:	7063      	strb	r3, [r4, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:324
	buffer[2] = *(temp_ptr    );

	// Compute crc
	uint16_t crc_value = crc16(buffer,PAYLOAD_SIZE - 2);
   12576:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:321
	uint16_t index = 1;
	uint16_t group = 0;
	uint16_t ID = ((group & 0x003F) << 10) + (index & 0x3FF);
	uint8_t * temp_ptr = (uint8_t*)(&ID);
	buffer[1] = *(temp_ptr + 1);
	buffer[2] = *(temp_ptr    );
   12578:	3301      	adds	r3, #1
   1257a:	70a3      	strb	r3, [r4, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:324

	// Compute crc
	uint16_t crc_value = crc16(buffer,PAYLOAD_SIZE - 2);
   1257c:	f7ff fcc2 	bl	11f04 <crc16>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:327

	// Write crc into buffer's last byte
	buffer[PAYLOAD_SIZE - 1] = crc_value & 0xFF;
   12580:	7360      	strb	r0, [r4, #13]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:328
	buffer[PAYLOAD_SIZE - 2] = (crc_value >> 8) & 0xFF;
   12582:	0a00      	lsrs	r0, r0, #8
   12584:	7320      	strb	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:331

	// Send frame to encoding
	encode(buffer,PAYLOAD_SIZE);
   12586:	210e      	movs	r1, #14
   12588:	1c20      	adds	r0, r4, #0
   1258a:	f7fd fac5 	bl	fb18 <encode>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:332
}
   1258e:	bd10      	pop	{r4, pc}
   12590:	1fffe018 	.word	0x1fffe018

00012594 <sinf>:
sinf():
   12594:	b500      	push	{lr}
   12596:	4a1e      	ldr	r2, [pc, #120]	; (12610 <sinf+0x7c>)
   12598:	0043      	lsls	r3, r0, #1
   1259a:	b083      	sub	sp, #12
   1259c:	1c01      	adds	r1, r0, #0
   1259e:	085b      	lsrs	r3, r3, #1
   125a0:	4293      	cmp	r3, r2
   125a2:	dd1a      	ble.n	125da <sinf+0x46>
   125a4:	4a1b      	ldr	r2, [pc, #108]	; (12614 <sinf+0x80>)
   125a6:	4293      	cmp	r3, r2
   125a8:	dd03      	ble.n	125b2 <sinf+0x1e>
   125aa:	f7ee fe15 	bl	11d8 <__aeabi_fsub>
   125ae:	b003      	add	sp, #12
   125b0:	bd00      	pop	{pc}
   125b2:	4669      	mov	r1, sp
   125b4:	f000 ff88 	bl	134c8 <__ieee754_rem_pio2f>
   125b8:	2303      	movs	r3, #3
   125ba:	4018      	ands	r0, r3
   125bc:	2801      	cmp	r0, #1
   125be:	d01b      	beq.n	125f8 <sinf+0x64>
   125c0:	2802      	cmp	r0, #2
   125c2:	d00f      	beq.n	125e4 <sinf+0x50>
   125c4:	2800      	cmp	r0, #0
   125c6:	d01c      	beq.n	12602 <sinf+0x6e>
   125c8:	9800      	ldr	r0, [sp, #0]
   125ca:	9901      	ldr	r1, [sp, #4]
   125cc:	f001 f962 	bl	13894 <__kernel_cosf>
   125d0:	2380      	movs	r3, #128	; 0x80
   125d2:	061b      	lsls	r3, r3, #24
   125d4:	469c      	mov	ip, r3
   125d6:	4460      	add	r0, ip
   125d8:	e7e9      	b.n	125ae <sinf+0x1a>
   125da:	2100      	movs	r1, #0
   125dc:	2200      	movs	r2, #0
   125de:	f001 fdb7 	bl	14150 <__kernel_sinf>
   125e2:	e7e4      	b.n	125ae <sinf+0x1a>
   125e4:	9800      	ldr	r0, [sp, #0]
   125e6:	9901      	ldr	r1, [sp, #4]
   125e8:	2201      	movs	r2, #1
   125ea:	f001 fdb1 	bl	14150 <__kernel_sinf>
   125ee:	2380      	movs	r3, #128	; 0x80
   125f0:	061b      	lsls	r3, r3, #24
   125f2:	469c      	mov	ip, r3
   125f4:	4460      	add	r0, ip
   125f6:	e7da      	b.n	125ae <sinf+0x1a>
   125f8:	9901      	ldr	r1, [sp, #4]
   125fa:	9800      	ldr	r0, [sp, #0]
   125fc:	f001 f94a 	bl	13894 <__kernel_cosf>
   12600:	e7d5      	b.n	125ae <sinf+0x1a>
   12602:	9800      	ldr	r0, [sp, #0]
   12604:	9901      	ldr	r1, [sp, #4]
   12606:	2201      	movs	r2, #1
   12608:	f001 fda2 	bl	14150 <__kernel_sinf>
   1260c:	e7cf      	b.n	125ae <sinf+0x1a>
   1260e:	46c0      	nop			; (mov r8, r8)
   12610:	3f490fd8 	.word	0x3f490fd8
   12614:	7f7fffff 	.word	0x7f7fffff

00012618 <acosf>:
acosf():
   12618:	b570      	push	{r4, r5, r6, lr}
   1261a:	b08c      	sub	sp, #48	; 0x30
   1261c:	1c05      	adds	r5, r0, #0
   1261e:	f000 fa4b 	bl	12ab8 <__ieee754_acosf>
   12622:	2300      	movs	r3, #0
   12624:	4e22      	ldr	r6, [pc, #136]	; (126b0 <acosf+0x98>)
   12626:	1c04      	adds	r4, r0, #0
   12628:	56f3      	ldrsb	r3, [r6, r3]
   1262a:	3301      	adds	r3, #1
   1262c:	d004      	beq.n	12638 <acosf+0x20>
   1262e:	1c28      	adds	r0, r5, #0
   12630:	f001 ff0e 	bl	14450 <__fpclassifyf>
   12634:	2800      	cmp	r0, #0
   12636:	d102      	bne.n	1263e <acosf+0x26>
   12638:	1c20      	adds	r0, r4, #0
   1263a:	b00c      	add	sp, #48	; 0x30
   1263c:	bd70      	pop	{r4, r5, r6, pc}
   1263e:	1c28      	adds	r0, r5, #0
   12640:	f001 feaa 	bl	14398 <fabsf>
   12644:	21fe      	movs	r1, #254	; 0xfe
   12646:	0589      	lsls	r1, r1, #22
   12648:	f7ee f912 	bl	870 <__aeabi_fcmpgt>
   1264c:	2800      	cmp	r0, #0
   1264e:	d0f3      	beq.n	12638 <acosf+0x20>
   12650:	2301      	movs	r3, #1
   12652:	9302      	str	r3, [sp, #8]
   12654:	4b17      	ldr	r3, [pc, #92]	; (126b4 <acosf+0x9c>)
   12656:	1c28      	adds	r0, r5, #0
   12658:	9303      	str	r3, [sp, #12]
   1265a:	2300      	movs	r3, #0
   1265c:	930a      	str	r3, [sp, #40]	; 0x28
   1265e:	f7f0 fa81 	bl	2b64 <__aeabi_f2d>
   12662:	9006      	str	r0, [sp, #24]
   12664:	9107      	str	r1, [sp, #28]
   12666:	9004      	str	r0, [sp, #16]
   12668:	9105      	str	r1, [sp, #20]
   1266a:	4813      	ldr	r0, [pc, #76]	; (126b8 <acosf+0xa0>)
   1266c:	f001 fdec 	bl	14248 <nan>
   12670:	2300      	movs	r3, #0
   12672:	56f3      	ldrsb	r3, [r6, r3]
   12674:	9008      	str	r0, [sp, #32]
   12676:	9109      	str	r1, [sp, #36]	; 0x24
   12678:	2b02      	cmp	r3, #2
   1267a:	d00e      	beq.n	1269a <acosf+0x82>
   1267c:	a802      	add	r0, sp, #8
   1267e:	f001 fde1 	bl	14244 <matherr>
   12682:	2800      	cmp	r0, #0
   12684:	d009      	beq.n	1269a <acosf+0x82>
   12686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12688:	9301      	str	r3, [sp, #4]
   1268a:	2b00      	cmp	r3, #0
   1268c:	d10a      	bne.n	126a4 <acosf+0x8c>
   1268e:	9808      	ldr	r0, [sp, #32]
   12690:	9909      	ldr	r1, [sp, #36]	; 0x24
   12692:	f7f0 fabb 	bl	2c0c <__aeabi_d2f>
   12696:	1c04      	adds	r4, r0, #0
   12698:	e7ce      	b.n	12638 <acosf+0x20>
   1269a:	f001 ff69 	bl	14570 <__errno>
   1269e:	2321      	movs	r3, #33	; 0x21
   126a0:	6003      	str	r3, [r0, #0]
   126a2:	e7f0      	b.n	12686 <acosf+0x6e>
   126a4:	f001 ff64 	bl	14570 <__errno>
   126a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   126aa:	9301      	str	r3, [sp, #4]
   126ac:	6003      	str	r3, [r0, #0]
   126ae:	e7ee      	b.n	1268e <acosf+0x76>
   126b0:	1fffe026 	.word	0x1fffe026
   126b4:	000148f8 	.word	0x000148f8
   126b8:	000148ec 	.word	0x000148ec

000126bc <powf>:
powf():
   126bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   126be:	4646      	mov	r6, r8
   126c0:	464f      	mov	r7, r9
   126c2:	b4c0      	push	{r6, r7}
   126c4:	b08b      	sub	sp, #44	; 0x2c
   126c6:	1c05      	adds	r5, r0, #0
   126c8:	1c0c      	adds	r4, r1, #0
   126ca:	f000 fb5d 	bl	12d88 <__ieee754_powf>
   126ce:	2300      	movs	r3, #0
   126d0:	4fc7      	ldr	r7, [pc, #796]	; (129f0 <powf+0x334>)
   126d2:	4680      	mov	r8, r0
   126d4:	56fb      	ldrsb	r3, [r7, r3]
   126d6:	1c06      	adds	r6, r0, #0
   126d8:	3301      	adds	r3, #1
   126da:	d004      	beq.n	126e6 <powf+0x2a>
   126dc:	1c20      	adds	r0, r4, #0
   126de:	f001 feb7 	bl	14450 <__fpclassifyf>
   126e2:	2800      	cmp	r0, #0
   126e4:	d105      	bne.n	126f2 <powf+0x36>
   126e6:	1c30      	adds	r0, r6, #0
   126e8:	b00b      	add	sp, #44	; 0x2c
   126ea:	bc0c      	pop	{r2, r3}
   126ec:	4690      	mov	r8, r2
   126ee:	4699      	mov	r9, r3
   126f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   126f2:	1c28      	adds	r0, r5, #0
   126f4:	f001 feac 	bl	14450 <__fpclassifyf>
   126f8:	4681      	mov	r9, r0
   126fa:	2800      	cmp	r0, #0
   126fc:	d133      	bne.n	12766 <powf+0xaa>
   126fe:	1c20      	adds	r0, r4, #0
   12700:	2100      	movs	r1, #0
   12702:	f7ee f89b 	bl	83c <__aeabi_fcmpeq>
   12706:	2800      	cmp	r0, #0
   12708:	d0ed      	beq.n	126e6 <powf+0x2a>
   1270a:	2301      	movs	r3, #1
   1270c:	9300      	str	r3, [sp, #0]
   1270e:	4bb9      	ldr	r3, [pc, #740]	; (129f4 <powf+0x338>)
   12710:	1c28      	adds	r0, r5, #0
   12712:	9301      	str	r3, [sp, #4]
   12714:	464b      	mov	r3, r9
   12716:	9308      	str	r3, [sp, #32]
   12718:	f7f0 fa24 	bl	2b64 <__aeabi_f2d>
   1271c:	9002      	str	r0, [sp, #8]
   1271e:	9103      	str	r1, [sp, #12]
   12720:	1c20      	adds	r0, r4, #0
   12722:	f7f0 fa1f 	bl	2b64 <__aeabi_f2d>
   12726:	2200      	movs	r2, #0
   12728:	4bb3      	ldr	r3, [pc, #716]	; (129f8 <powf+0x33c>)
   1272a:	466e      	mov	r6, sp
   1272c:	9206      	str	r2, [sp, #24]
   1272e:	9307      	str	r3, [sp, #28]
   12730:	2300      	movs	r3, #0
   12732:	56fb      	ldrsb	r3, [r7, r3]
   12734:	9004      	str	r0, [sp, #16]
   12736:	9105      	str	r1, [sp, #20]
   12738:	1c5a      	adds	r2, r3, #1
   1273a:	d00e      	beq.n	1275a <powf+0x9e>
   1273c:	2b02      	cmp	r3, #2
   1273e:	d00c      	beq.n	1275a <powf+0x9e>
   12740:	1c30      	adds	r0, r6, #0
   12742:	f001 fd7f 	bl	14244 <matherr>
   12746:	2800      	cmp	r0, #0
   12748:	d100      	bne.n	1274c <powf+0x90>
   1274a:	e0ae      	b.n	128aa <powf+0x1ee>
   1274c:	6a33      	ldr	r3, [r6, #32]
   1274e:	2b00      	cmp	r3, #0
   12750:	d003      	beq.n	1275a <powf+0x9e>
   12752:	f001 ff0d 	bl	14570 <__errno>
   12756:	6a33      	ldr	r3, [r6, #32]
   12758:	6003      	str	r3, [r0, #0]
   1275a:	69b0      	ldr	r0, [r6, #24]
   1275c:	69f1      	ldr	r1, [r6, #28]
   1275e:	f7f0 fa55 	bl	2c0c <__aeabi_d2f>
   12762:	1c06      	adds	r6, r0, #0
   12764:	e7bf      	b.n	126e6 <powf+0x2a>
   12766:	1c28      	adds	r0, r5, #0
   12768:	2100      	movs	r1, #0
   1276a:	f7ee f867 	bl	83c <__aeabi_fcmpeq>
   1276e:	2800      	cmp	r0, #0
   12770:	d024      	beq.n	127bc <powf+0x100>
   12772:	1c20      	adds	r0, r4, #0
   12774:	2100      	movs	r1, #0
   12776:	f7ee f861 	bl	83c <__aeabi_fcmpeq>
   1277a:	4680      	mov	r8, r0
   1277c:	2800      	cmp	r0, #0
   1277e:	d05a      	beq.n	12836 <powf+0x17a>
   12780:	2301      	movs	r3, #1
   12782:	9300      	str	r3, [sp, #0]
   12784:	4b9b      	ldr	r3, [pc, #620]	; (129f4 <powf+0x338>)
   12786:	1c28      	adds	r0, r5, #0
   12788:	9301      	str	r3, [sp, #4]
   1278a:	2300      	movs	r3, #0
   1278c:	9308      	str	r3, [sp, #32]
   1278e:	f7f0 f9e9 	bl	2b64 <__aeabi_f2d>
   12792:	9002      	str	r0, [sp, #8]
   12794:	9103      	str	r1, [sp, #12]
   12796:	1c20      	adds	r0, r4, #0
   12798:	f7f0 f9e4 	bl	2b64 <__aeabi_f2d>
   1279c:	2300      	movs	r3, #0
   1279e:	2200      	movs	r2, #0
   127a0:	9206      	str	r2, [sp, #24]
   127a2:	9307      	str	r3, [sp, #28]
   127a4:	2300      	movs	r3, #0
   127a6:	56fb      	ldrsb	r3, [r7, r3]
   127a8:	466e      	mov	r6, sp
   127aa:	9004      	str	r0, [sp, #16]
   127ac:	9105      	str	r1, [sp, #20]
   127ae:	2b00      	cmp	r3, #0
   127b0:	d0c6      	beq.n	12740 <powf+0x84>
   127b2:	2200      	movs	r2, #0
   127b4:	4b90      	ldr	r3, [pc, #576]	; (129f8 <powf+0x33c>)
   127b6:	9206      	str	r2, [sp, #24]
   127b8:	9307      	str	r3, [sp, #28]
   127ba:	e7ce      	b.n	1275a <powf+0x9e>
   127bc:	4640      	mov	r0, r8
   127be:	f001 fdef 	bl	143a0 <finitef>
   127c2:	4681      	mov	r9, r0
   127c4:	2800      	cmp	r0, #0
   127c6:	d075      	beq.n	128b4 <powf+0x1f8>
   127c8:	4640      	mov	r0, r8
   127ca:	2100      	movs	r1, #0
   127cc:	f7ee f836 	bl	83c <__aeabi_fcmpeq>
   127d0:	4646      	mov	r6, r8
   127d2:	2800      	cmp	r0, #0
   127d4:	d100      	bne.n	127d8 <powf+0x11c>
   127d6:	e786      	b.n	126e6 <powf+0x2a>
   127d8:	1c28      	adds	r0, r5, #0
   127da:	f001 fde1 	bl	143a0 <finitef>
   127de:	4646      	mov	r6, r8
   127e0:	2800      	cmp	r0, #0
   127e2:	d100      	bne.n	127e6 <powf+0x12a>
   127e4:	e77f      	b.n	126e6 <powf+0x2a>
   127e6:	1c20      	adds	r0, r4, #0
   127e8:	f001 fdda 	bl	143a0 <finitef>
   127ec:	2800      	cmp	r0, #0
   127ee:	d100      	bne.n	127f2 <powf+0x136>
   127f0:	e779      	b.n	126e6 <powf+0x2a>
   127f2:	2304      	movs	r3, #4
   127f4:	9300      	str	r3, [sp, #0]
   127f6:	4b7f      	ldr	r3, [pc, #508]	; (129f4 <powf+0x338>)
   127f8:	1c28      	adds	r0, r5, #0
   127fa:	9301      	str	r3, [sp, #4]
   127fc:	2300      	movs	r3, #0
   127fe:	9308      	str	r3, [sp, #32]
   12800:	f7f0 f9b0 	bl	2b64 <__aeabi_f2d>
   12804:	9002      	str	r0, [sp, #8]
   12806:	9103      	str	r1, [sp, #12]
   12808:	1c20      	adds	r0, r4, #0
   1280a:	f7f0 f9ab 	bl	2b64 <__aeabi_f2d>
   1280e:	2300      	movs	r3, #0
   12810:	2200      	movs	r2, #0
   12812:	9206      	str	r2, [sp, #24]
   12814:	9307      	str	r3, [sp, #28]
   12816:	2300      	movs	r3, #0
   12818:	56fb      	ldrsb	r3, [r7, r3]
   1281a:	466e      	mov	r6, sp
   1281c:	9004      	str	r0, [sp, #16]
   1281e:	9105      	str	r1, [sp, #20]
   12820:	2b02      	cmp	r3, #2
   12822:	d076      	beq.n	12912 <powf+0x256>
   12824:	4668      	mov	r0, sp
   12826:	f001 fd0d 	bl	14244 <matherr>
   1282a:	2800      	cmp	r0, #0
   1282c:	d071      	beq.n	12912 <powf+0x256>
   1282e:	6a33      	ldr	r3, [r6, #32]
   12830:	2b00      	cmp	r3, #0
   12832:	d092      	beq.n	1275a <powf+0x9e>
   12834:	e78d      	b.n	12752 <powf+0x96>
   12836:	1c20      	adds	r0, r4, #0
   12838:	f001 fdb2 	bl	143a0 <finitef>
   1283c:	2800      	cmp	r0, #0
   1283e:	d100      	bne.n	12842 <powf+0x186>
   12840:	e751      	b.n	126e6 <powf+0x2a>
   12842:	1c20      	adds	r0, r4, #0
   12844:	2100      	movs	r1, #0
   12846:	f7ed ffff 	bl	848 <__aeabi_fcmplt>
   1284a:	2800      	cmp	r0, #0
   1284c:	d100      	bne.n	12850 <powf+0x194>
   1284e:	e74a      	b.n	126e6 <powf+0x2a>
   12850:	2301      	movs	r3, #1
   12852:	9300      	str	r3, [sp, #0]
   12854:	4b67      	ldr	r3, [pc, #412]	; (129f4 <powf+0x338>)
   12856:	1c28      	adds	r0, r5, #0
   12858:	9301      	str	r3, [sp, #4]
   1285a:	4643      	mov	r3, r8
   1285c:	9308      	str	r3, [sp, #32]
   1285e:	f7f0 f981 	bl	2b64 <__aeabi_f2d>
   12862:	9002      	str	r0, [sp, #8]
   12864:	9103      	str	r1, [sp, #12]
   12866:	1c20      	adds	r0, r4, #0
   12868:	f7f0 f97c 	bl	2b64 <__aeabi_f2d>
   1286c:	783b      	ldrb	r3, [r7, #0]
   1286e:	466e      	mov	r6, sp
   12870:	9004      	str	r0, [sp, #16]
   12872:	9105      	str	r1, [sp, #20]
   12874:	2b00      	cmp	r3, #0
   12876:	d145      	bne.n	12904 <powf+0x248>
   12878:	2200      	movs	r2, #0
   1287a:	2300      	movs	r3, #0
   1287c:	9206      	str	r2, [sp, #24]
   1287e:	9307      	str	r3, [sp, #28]
   12880:	1c30      	adds	r0, r6, #0
   12882:	f001 fcdf 	bl	14244 <matherr>
   12886:	2800      	cmp	r0, #0
   12888:	d1d1      	bne.n	1282e <powf+0x172>
   1288a:	f001 fe71 	bl	14570 <__errno>
   1288e:	2321      	movs	r3, #33	; 0x21
   12890:	6003      	str	r3, [r0, #0]
   12892:	e7cc      	b.n	1282e <powf+0x172>
   12894:	2000      	movs	r0, #0
   12896:	2100      	movs	r1, #0
   12898:	1c02      	adds	r2, r0, #0
   1289a:	1c0b      	adds	r3, r1, #0
   1289c:	f7ef f9aa 	bl	1bf4 <__aeabi_ddiv>
   128a0:	9006      	str	r0, [sp, #24]
   128a2:	9107      	str	r1, [sp, #28]
   128a4:	2c02      	cmp	r4, #2
   128a6:	d000      	beq.n	128aa <powf+0x1ee>
   128a8:	e74a      	b.n	12740 <powf+0x84>
   128aa:	f001 fe61 	bl	14570 <__errno>
   128ae:	2321      	movs	r3, #33	; 0x21
   128b0:	6003      	str	r3, [r0, #0]
   128b2:	e74b      	b.n	1274c <powf+0x90>
   128b4:	1c28      	adds	r0, r5, #0
   128b6:	f001 fd73 	bl	143a0 <finitef>
   128ba:	2800      	cmp	r0, #0
   128bc:	d084      	beq.n	127c8 <powf+0x10c>
   128be:	1c20      	adds	r0, r4, #0
   128c0:	f001 fd6e 	bl	143a0 <finitef>
   128c4:	2800      	cmp	r0, #0
   128c6:	d100      	bne.n	128ca <powf+0x20e>
   128c8:	e77e      	b.n	127c8 <powf+0x10c>
   128ca:	4640      	mov	r0, r8
   128cc:	f001 fdc0 	bl	14450 <__fpclassifyf>
   128d0:	466e      	mov	r6, sp
   128d2:	2800      	cmp	r0, #0
   128d4:	d122      	bne.n	1291c <powf+0x260>
   128d6:	2301      	movs	r3, #1
   128d8:	9300      	str	r3, [sp, #0]
   128da:	4b46      	ldr	r3, [pc, #280]	; (129f4 <powf+0x338>)
   128dc:	9008      	str	r0, [sp, #32]
   128de:	1c28      	adds	r0, r5, #0
   128e0:	9301      	str	r3, [sp, #4]
   128e2:	f7f0 f93f 	bl	2b64 <__aeabi_f2d>
   128e6:	9002      	str	r0, [sp, #8]
   128e8:	9103      	str	r1, [sp, #12]
   128ea:	1c20      	adds	r0, r4, #0
   128ec:	f7f0 f93a 	bl	2b64 <__aeabi_f2d>
   128f0:	783c      	ldrb	r4, [r7, #0]
   128f2:	9004      	str	r0, [sp, #16]
   128f4:	9105      	str	r1, [sp, #20]
   128f6:	2c00      	cmp	r4, #0
   128f8:	d1cc      	bne.n	12894 <powf+0x1d8>
   128fa:	2200      	movs	r2, #0
   128fc:	2300      	movs	r3, #0
   128fe:	9206      	str	r2, [sp, #24]
   12900:	9307      	str	r3, [sp, #28]
   12902:	e71d      	b.n	12740 <powf+0x84>
   12904:	2000      	movs	r0, #0
   12906:	493d      	ldr	r1, [pc, #244]	; (129fc <powf+0x340>)
   12908:	9006      	str	r0, [sp, #24]
   1290a:	9107      	str	r1, [sp, #28]
   1290c:	2b02      	cmp	r3, #2
   1290e:	d0bc      	beq.n	1288a <powf+0x1ce>
   12910:	e7b6      	b.n	12880 <powf+0x1c4>
   12912:	f001 fe2d 	bl	14570 <__errno>
   12916:	2322      	movs	r3, #34	; 0x22
   12918:	6003      	str	r3, [r0, #0]
   1291a:	e788      	b.n	1282e <powf+0x172>
   1291c:	2303      	movs	r3, #3
   1291e:	9300      	str	r3, [sp, #0]
   12920:	4b34      	ldr	r3, [pc, #208]	; (129f4 <powf+0x338>)
   12922:	1c28      	adds	r0, r5, #0
   12924:	9301      	str	r3, [sp, #4]
   12926:	464b      	mov	r3, r9
   12928:	9308      	str	r3, [sp, #32]
   1292a:	f7f0 f91b 	bl	2b64 <__aeabi_f2d>
   1292e:	9002      	str	r0, [sp, #8]
   12930:	9103      	str	r1, [sp, #12]
   12932:	1c20      	adds	r0, r4, #0
   12934:	f7f0 f916 	bl	2b64 <__aeabi_f2d>
   12938:	2300      	movs	r3, #0
   1293a:	56fb      	ldrsb	r3, [r7, r3]
   1293c:	9004      	str	r0, [sp, #16]
   1293e:	9105      	str	r1, [sp, #20]
   12940:	2b00      	cmp	r3, #0
   12942:	d119      	bne.n	12978 <powf+0x2bc>
   12944:	22e0      	movs	r2, #224	; 0xe0
   12946:	4b2e      	ldr	r3, [pc, #184]	; (12a00 <powf+0x344>)
   12948:	0612      	lsls	r2, r2, #24
   1294a:	1c28      	adds	r0, r5, #0
   1294c:	2100      	movs	r1, #0
   1294e:	9206      	str	r2, [sp, #24]
   12950:	9307      	str	r3, [sp, #28]
   12952:	f7ed ff79 	bl	848 <__aeabi_fcmplt>
   12956:	2800      	cmp	r0, #0
   12958:	d130      	bne.n	129bc <powf+0x300>
   1295a:	2300      	movs	r3, #0
   1295c:	56fb      	ldrsb	r3, [r7, r3]
   1295e:	2b02      	cmp	r3, #2
   12960:	d005      	beq.n	1296e <powf+0x2b2>
   12962:	1c30      	adds	r0, r6, #0
   12964:	f001 fc6e 	bl	14244 <matherr>
   12968:	2800      	cmp	r0, #0
   1296a:	d000      	beq.n	1296e <powf+0x2b2>
   1296c:	e6ee      	b.n	1274c <powf+0x90>
   1296e:	f001 fdff 	bl	14570 <__errno>
   12972:	2322      	movs	r3, #34	; 0x22
   12974:	6003      	str	r3, [r0, #0]
   12976:	e6e9      	b.n	1274c <powf+0x90>
   12978:	2200      	movs	r2, #0
   1297a:	4b22      	ldr	r3, [pc, #136]	; (12a04 <powf+0x348>)
   1297c:	1c28      	adds	r0, r5, #0
   1297e:	2100      	movs	r1, #0
   12980:	9206      	str	r2, [sp, #24]
   12982:	9307      	str	r3, [sp, #28]
   12984:	f7ed ff60 	bl	848 <__aeabi_fcmplt>
   12988:	2800      	cmp	r0, #0
   1298a:	d0e6      	beq.n	1295a <powf+0x29e>
   1298c:	21fc      	movs	r1, #252	; 0xfc
   1298e:	1c20      	adds	r0, r4, #0
   12990:	0589      	lsls	r1, r1, #22
   12992:	f7ee faef 	bl	f74 <__aeabi_fmul>
   12996:	f7f0 f8e5 	bl	2b64 <__aeabi_f2d>
   1299a:	1c04      	adds	r4, r0, #0
   1299c:	1c0d      	adds	r5, r1, #0
   1299e:	f001 fc59 	bl	14254 <rint>
   129a2:	1c02      	adds	r2, r0, #0
   129a4:	1c0b      	adds	r3, r1, #0
   129a6:	1c20      	adds	r0, r4, #0
   129a8:	1c29      	adds	r1, r5, #0
   129aa:	f7ed ff0d 	bl	7c8 <__aeabi_dcmpeq>
   129ae:	2800      	cmp	r0, #0
   129b0:	d1d3      	bne.n	1295a <powf+0x29e>
   129b2:	2200      	movs	r2, #0
   129b4:	4b11      	ldr	r3, [pc, #68]	; (129fc <powf+0x340>)
   129b6:	9206      	str	r2, [sp, #24]
   129b8:	9307      	str	r3, [sp, #28]
   129ba:	e7ce      	b.n	1295a <powf+0x29e>
   129bc:	21fc      	movs	r1, #252	; 0xfc
   129be:	1c20      	adds	r0, r4, #0
   129c0:	0589      	lsls	r1, r1, #22
   129c2:	f7ee fad7 	bl	f74 <__aeabi_fmul>
   129c6:	f7f0 f8cd 	bl	2b64 <__aeabi_f2d>
   129ca:	1c04      	adds	r4, r0, #0
   129cc:	1c0d      	adds	r5, r1, #0
   129ce:	f001 fc41 	bl	14254 <rint>
   129d2:	1c02      	adds	r2, r0, #0
   129d4:	1c0b      	adds	r3, r1, #0
   129d6:	1c20      	adds	r0, r4, #0
   129d8:	1c29      	adds	r1, r5, #0
   129da:	f7ed fef5 	bl	7c8 <__aeabi_dcmpeq>
   129de:	2800      	cmp	r0, #0
   129e0:	d1bb      	bne.n	1295a <powf+0x29e>
   129e2:	22e0      	movs	r2, #224	; 0xe0
   129e4:	4b08      	ldr	r3, [pc, #32]	; (12a08 <powf+0x34c>)
   129e6:	0612      	lsls	r2, r2, #24
   129e8:	9206      	str	r2, [sp, #24]
   129ea:	9307      	str	r3, [sp, #28]
   129ec:	e7b5      	b.n	1295a <powf+0x29e>
   129ee:	46c0      	nop			; (mov r8, r8)
   129f0:	1fffe026 	.word	0x1fffe026
   129f4:	00014900 	.word	0x00014900
   129f8:	3ff00000 	.word	0x3ff00000
   129fc:	fff00000 	.word	0xfff00000
   12a00:	47efffff 	.word	0x47efffff
   12a04:	7ff00000 	.word	0x7ff00000
   12a08:	c7efffff 	.word	0xc7efffff

00012a0c <sqrtf>:
sqrtf():
   12a0c:	b570      	push	{r4, r5, r6, lr}
   12a0e:	b08c      	sub	sp, #48	; 0x30
   12a10:	1c05      	adds	r5, r0, #0
   12a12:	f000 fee3 	bl	137dc <__ieee754_sqrtf>
   12a16:	2300      	movs	r3, #0
   12a18:	4e25      	ldr	r6, [pc, #148]	; (12ab0 <sqrtf+0xa4>)
   12a1a:	1c04      	adds	r4, r0, #0
   12a1c:	56f3      	ldrsb	r3, [r6, r3]
   12a1e:	3301      	adds	r3, #1
   12a20:	d00a      	beq.n	12a38 <sqrtf+0x2c>
   12a22:	1c28      	adds	r0, r5, #0
   12a24:	f001 fd14 	bl	14450 <__fpclassifyf>
   12a28:	2800      	cmp	r0, #0
   12a2a:	d005      	beq.n	12a38 <sqrtf+0x2c>
   12a2c:	1c28      	adds	r0, r5, #0
   12a2e:	2100      	movs	r1, #0
   12a30:	f7ed ff0a 	bl	848 <__aeabi_fcmplt>
   12a34:	2800      	cmp	r0, #0
   12a36:	d102      	bne.n	12a3e <sqrtf+0x32>
   12a38:	1c20      	adds	r0, r4, #0
   12a3a:	b00c      	add	sp, #48	; 0x30
   12a3c:	bd70      	pop	{r4, r5, r6, pc}
   12a3e:	2301      	movs	r3, #1
   12a40:	9302      	str	r3, [sp, #8]
   12a42:	4b1c      	ldr	r3, [pc, #112]	; (12ab4 <sqrtf+0xa8>)
   12a44:	1c28      	adds	r0, r5, #0
   12a46:	9303      	str	r3, [sp, #12]
   12a48:	2300      	movs	r3, #0
   12a4a:	930a      	str	r3, [sp, #40]	; 0x28
   12a4c:	f7f0 f88a 	bl	2b64 <__aeabi_f2d>
   12a50:	7834      	ldrb	r4, [r6, #0]
   12a52:	9006      	str	r0, [sp, #24]
   12a54:	9107      	str	r1, [sp, #28]
   12a56:	9004      	str	r0, [sp, #16]
   12a58:	9105      	str	r1, [sp, #20]
   12a5a:	2c00      	cmp	r4, #0
   12a5c:	d112      	bne.n	12a84 <sqrtf+0x78>
   12a5e:	2200      	movs	r2, #0
   12a60:	2300      	movs	r3, #0
   12a62:	9208      	str	r2, [sp, #32]
   12a64:	9309      	str	r3, [sp, #36]	; 0x24
   12a66:	a802      	add	r0, sp, #8
   12a68:	f001 fbec 	bl	14244 <matherr>
   12a6c:	2800      	cmp	r0, #0
   12a6e:	d013      	beq.n	12a98 <sqrtf+0x8c>
   12a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12a72:	9301      	str	r3, [sp, #4]
   12a74:	2b00      	cmp	r3, #0
   12a76:	d114      	bne.n	12aa2 <sqrtf+0x96>
   12a78:	9808      	ldr	r0, [sp, #32]
   12a7a:	9909      	ldr	r1, [sp, #36]	; 0x24
   12a7c:	f7f0 f8c6 	bl	2c0c <__aeabi_d2f>
   12a80:	1c04      	adds	r4, r0, #0
   12a82:	e7d9      	b.n	12a38 <sqrtf+0x2c>
   12a84:	2000      	movs	r0, #0
   12a86:	2100      	movs	r1, #0
   12a88:	1c02      	adds	r2, r0, #0
   12a8a:	1c0b      	adds	r3, r1, #0
   12a8c:	f7ef f8b2 	bl	1bf4 <__aeabi_ddiv>
   12a90:	9008      	str	r0, [sp, #32]
   12a92:	9109      	str	r1, [sp, #36]	; 0x24
   12a94:	2c02      	cmp	r4, #2
   12a96:	d1e6      	bne.n	12a66 <sqrtf+0x5a>
   12a98:	f001 fd6a 	bl	14570 <__errno>
   12a9c:	2321      	movs	r3, #33	; 0x21
   12a9e:	6003      	str	r3, [r0, #0]
   12aa0:	e7e6      	b.n	12a70 <sqrtf+0x64>
   12aa2:	f001 fd65 	bl	14570 <__errno>
   12aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12aa8:	9301      	str	r3, [sp, #4]
   12aaa:	6003      	str	r3, [r0, #0]
   12aac:	e7e4      	b.n	12a78 <sqrtf+0x6c>
   12aae:	46c0      	nop			; (mov r8, r8)
   12ab0:	1fffe026 	.word	0x1fffe026
   12ab4:	00014908 	.word	0x00014908

00012ab8 <__ieee754_acosf>:
__ieee754_acosf():
   12ab8:	22fe      	movs	r2, #254	; 0xfe
   12aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12abc:	0043      	lsls	r3, r0, #1
   12abe:	1c04      	adds	r4, r0, #0
   12ac0:	085b      	lsrs	r3, r3, #1
   12ac2:	0592      	lsls	r2, r2, #22
   12ac4:	4293      	cmp	r3, r2
   12ac6:	d011      	beq.n	12aec <__ieee754_acosf+0x34>
   12ac8:	dc09      	bgt.n	12ade <__ieee754_acosf+0x26>
   12aca:	4a9f      	ldr	r2, [pc, #636]	; (12d48 <__ieee754_acosf+0x290>)
   12acc:	4293      	cmp	r3, r2
   12ace:	dc12      	bgt.n	12af6 <__ieee754_acosf+0x3e>
   12ad0:	228c      	movs	r2, #140	; 0x8c
   12ad2:	0592      	lsls	r2, r2, #22
   12ad4:	4293      	cmp	r3, r2
   12ad6:	dd00      	ble.n	12ada <__ieee754_acosf+0x22>
   12ad8:	e081      	b.n	12bde <__ieee754_acosf+0x126>
   12ada:	489c      	ldr	r0, [pc, #624]	; (12d4c <__ieee754_acosf+0x294>)
   12adc:	e005      	b.n	12aea <__ieee754_acosf+0x32>
   12ade:	1c21      	adds	r1, r4, #0
   12ae0:	f7ee fb7a 	bl	11d8 <__aeabi_fsub>
   12ae4:	1c01      	adds	r1, r0, #0
   12ae6:	f7ee f853 	bl	b90 <__aeabi_fdiv>
   12aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12aec:	2000      	movs	r0, #0
   12aee:	2c00      	cmp	r4, #0
   12af0:	dcfb      	bgt.n	12aea <__ieee754_acosf+0x32>
   12af2:	4897      	ldr	r0, [pc, #604]	; (12d50 <__ieee754_acosf+0x298>)
   12af4:	e7f9      	b.n	12aea <__ieee754_acosf+0x32>
   12af6:	2800      	cmp	r0, #0
   12af8:	da00      	bge.n	12afc <__ieee754_acosf+0x44>
   12afa:	e0c5      	b.n	12c88 <__ieee754_acosf+0x1d0>
   12afc:	20fe      	movs	r0, #254	; 0xfe
   12afe:	1c21      	adds	r1, r4, #0
   12b00:	0580      	lsls	r0, r0, #22
   12b02:	f7ee fb69 	bl	11d8 <__aeabi_fsub>
   12b06:	21fc      	movs	r1, #252	; 0xfc
   12b08:	0589      	lsls	r1, r1, #22
   12b0a:	f7ee fa33 	bl	f74 <__aeabi_fmul>
   12b0e:	1c04      	adds	r4, r0, #0
   12b10:	f000 fe64 	bl	137dc <__ieee754_sqrtf>
   12b14:	498f      	ldr	r1, [pc, #572]	; (12d54 <__ieee754_acosf+0x29c>)
   12b16:	1c06      	adds	r6, r0, #0
   12b18:	0b05      	lsrs	r5, r0, #12
   12b1a:	1c20      	adds	r0, r4, #0
   12b1c:	f7ee fa2a 	bl	f74 <__aeabi_fmul>
   12b20:	498d      	ldr	r1, [pc, #564]	; (12d58 <__ieee754_acosf+0x2a0>)
   12b22:	f7ed feb9 	bl	898 <__aeabi_fadd>
   12b26:	1c21      	adds	r1, r4, #0
   12b28:	f7ee fa24 	bl	f74 <__aeabi_fmul>
   12b2c:	498b      	ldr	r1, [pc, #556]	; (12d5c <__ieee754_acosf+0x2a4>)
   12b2e:	f7ee fb53 	bl	11d8 <__aeabi_fsub>
   12b32:	1c21      	adds	r1, r4, #0
   12b34:	f7ee fa1e 	bl	f74 <__aeabi_fmul>
   12b38:	4989      	ldr	r1, [pc, #548]	; (12d60 <__ieee754_acosf+0x2a8>)
   12b3a:	f7ed fead 	bl	898 <__aeabi_fadd>
   12b3e:	1c21      	adds	r1, r4, #0
   12b40:	f7ee fa18 	bl	f74 <__aeabi_fmul>
   12b44:	4987      	ldr	r1, [pc, #540]	; (12d64 <__ieee754_acosf+0x2ac>)
   12b46:	f7ee fb47 	bl	11d8 <__aeabi_fsub>
   12b4a:	1c21      	adds	r1, r4, #0
   12b4c:	f7ee fa12 	bl	f74 <__aeabi_fmul>
   12b50:	4985      	ldr	r1, [pc, #532]	; (12d68 <__ieee754_acosf+0x2b0>)
   12b52:	f7ed fea1 	bl	898 <__aeabi_fadd>
   12b56:	1c21      	adds	r1, r4, #0
   12b58:	f7ee fa0c 	bl	f74 <__aeabi_fmul>
   12b5c:	4983      	ldr	r1, [pc, #524]	; (12d6c <__ieee754_acosf+0x2b4>)
   12b5e:	1c07      	adds	r7, r0, #0
   12b60:	1c20      	adds	r0, r4, #0
   12b62:	f7ee fa07 	bl	f74 <__aeabi_fmul>
   12b66:	4982      	ldr	r1, [pc, #520]	; (12d70 <__ieee754_acosf+0x2b8>)
   12b68:	f7ee fb36 	bl	11d8 <__aeabi_fsub>
   12b6c:	1c21      	adds	r1, r4, #0
   12b6e:	f7ee fa01 	bl	f74 <__aeabi_fmul>
   12b72:	4980      	ldr	r1, [pc, #512]	; (12d74 <__ieee754_acosf+0x2bc>)
   12b74:	f7ed fe90 	bl	898 <__aeabi_fadd>
   12b78:	1c21      	adds	r1, r4, #0
   12b7a:	f7ee f9fb 	bl	f74 <__aeabi_fmul>
   12b7e:	497e      	ldr	r1, [pc, #504]	; (12d78 <__ieee754_acosf+0x2c0>)
   12b80:	f7ee fb2a 	bl	11d8 <__aeabi_fsub>
   12b84:	1c21      	adds	r1, r4, #0
   12b86:	f7ee f9f5 	bl	f74 <__aeabi_fmul>
   12b8a:	21fe      	movs	r1, #254	; 0xfe
   12b8c:	0589      	lsls	r1, r1, #22
   12b8e:	f7ed fe83 	bl	898 <__aeabi_fadd>
   12b92:	1c01      	adds	r1, r0, #0
   12b94:	1c38      	adds	r0, r7, #0
   12b96:	f7ed fffb 	bl	b90 <__aeabi_fdiv>
   12b9a:	1c31      	adds	r1, r6, #0
   12b9c:	f7ee f9ea 	bl	f74 <__aeabi_fmul>
   12ba0:	032d      	lsls	r5, r5, #12
   12ba2:	1c07      	adds	r7, r0, #0
   12ba4:	1c29      	adds	r1, r5, #0
   12ba6:	1c28      	adds	r0, r5, #0
   12ba8:	f7ee f9e4 	bl	f74 <__aeabi_fmul>
   12bac:	1c01      	adds	r1, r0, #0
   12bae:	1c20      	adds	r0, r4, #0
   12bb0:	f7ee fb12 	bl	11d8 <__aeabi_fsub>
   12bb4:	1c29      	adds	r1, r5, #0
   12bb6:	1c04      	adds	r4, r0, #0
   12bb8:	1c30      	adds	r0, r6, #0
   12bba:	f7ed fe6d 	bl	898 <__aeabi_fadd>
   12bbe:	1c01      	adds	r1, r0, #0
   12bc0:	1c20      	adds	r0, r4, #0
   12bc2:	f7ed ffe5 	bl	b90 <__aeabi_fdiv>
   12bc6:	1c01      	adds	r1, r0, #0
   12bc8:	1c38      	adds	r0, r7, #0
   12bca:	f7ed fe65 	bl	898 <__aeabi_fadd>
   12bce:	1c01      	adds	r1, r0, #0
   12bd0:	1c28      	adds	r0, r5, #0
   12bd2:	f7ed fe61 	bl	898 <__aeabi_fadd>
   12bd6:	1c01      	adds	r1, r0, #0
   12bd8:	f7ed fe5e 	bl	898 <__aeabi_fadd>
   12bdc:	e785      	b.n	12aea <__ieee754_acosf+0x32>
   12bde:	1c21      	adds	r1, r4, #0
   12be0:	f7ee f9c8 	bl	f74 <__aeabi_fmul>
   12be4:	495b      	ldr	r1, [pc, #364]	; (12d54 <__ieee754_acosf+0x29c>)
   12be6:	1c05      	adds	r5, r0, #0
   12be8:	f7ee f9c4 	bl	f74 <__aeabi_fmul>
   12bec:	495a      	ldr	r1, [pc, #360]	; (12d58 <__ieee754_acosf+0x2a0>)
   12bee:	f7ed fe53 	bl	898 <__aeabi_fadd>
   12bf2:	1c29      	adds	r1, r5, #0
   12bf4:	f7ee f9be 	bl	f74 <__aeabi_fmul>
   12bf8:	4958      	ldr	r1, [pc, #352]	; (12d5c <__ieee754_acosf+0x2a4>)
   12bfa:	f7ee faed 	bl	11d8 <__aeabi_fsub>
   12bfe:	1c29      	adds	r1, r5, #0
   12c00:	f7ee f9b8 	bl	f74 <__aeabi_fmul>
   12c04:	4956      	ldr	r1, [pc, #344]	; (12d60 <__ieee754_acosf+0x2a8>)
   12c06:	f7ed fe47 	bl	898 <__aeabi_fadd>
   12c0a:	1c29      	adds	r1, r5, #0
   12c0c:	f7ee f9b2 	bl	f74 <__aeabi_fmul>
   12c10:	4954      	ldr	r1, [pc, #336]	; (12d64 <__ieee754_acosf+0x2ac>)
   12c12:	f7ee fae1 	bl	11d8 <__aeabi_fsub>
   12c16:	1c29      	adds	r1, r5, #0
   12c18:	f7ee f9ac 	bl	f74 <__aeabi_fmul>
   12c1c:	4952      	ldr	r1, [pc, #328]	; (12d68 <__ieee754_acosf+0x2b0>)
   12c1e:	f7ed fe3b 	bl	898 <__aeabi_fadd>
   12c22:	1c29      	adds	r1, r5, #0
   12c24:	f7ee f9a6 	bl	f74 <__aeabi_fmul>
   12c28:	4950      	ldr	r1, [pc, #320]	; (12d6c <__ieee754_acosf+0x2b4>)
   12c2a:	1c06      	adds	r6, r0, #0
   12c2c:	1c28      	adds	r0, r5, #0
   12c2e:	f7ee f9a1 	bl	f74 <__aeabi_fmul>
   12c32:	494f      	ldr	r1, [pc, #316]	; (12d70 <__ieee754_acosf+0x2b8>)
   12c34:	f7ee fad0 	bl	11d8 <__aeabi_fsub>
   12c38:	1c29      	adds	r1, r5, #0
   12c3a:	f7ee f99b 	bl	f74 <__aeabi_fmul>
   12c3e:	494d      	ldr	r1, [pc, #308]	; (12d74 <__ieee754_acosf+0x2bc>)
   12c40:	f7ed fe2a 	bl	898 <__aeabi_fadd>
   12c44:	1c29      	adds	r1, r5, #0
   12c46:	f7ee f995 	bl	f74 <__aeabi_fmul>
   12c4a:	494b      	ldr	r1, [pc, #300]	; (12d78 <__ieee754_acosf+0x2c0>)
   12c4c:	f7ee fac4 	bl	11d8 <__aeabi_fsub>
   12c50:	1c29      	adds	r1, r5, #0
   12c52:	f7ee f98f 	bl	f74 <__aeabi_fmul>
   12c56:	21fe      	movs	r1, #254	; 0xfe
   12c58:	0589      	lsls	r1, r1, #22
   12c5a:	f7ed fe1d 	bl	898 <__aeabi_fadd>
   12c5e:	1c01      	adds	r1, r0, #0
   12c60:	1c30      	adds	r0, r6, #0
   12c62:	f7ed ff95 	bl	b90 <__aeabi_fdiv>
   12c66:	1c01      	adds	r1, r0, #0
   12c68:	1c20      	adds	r0, r4, #0
   12c6a:	f7ee f983 	bl	f74 <__aeabi_fmul>
   12c6e:	1c01      	adds	r1, r0, #0
   12c70:	4842      	ldr	r0, [pc, #264]	; (12d7c <__ieee754_acosf+0x2c4>)
   12c72:	f7ee fab1 	bl	11d8 <__aeabi_fsub>
   12c76:	1c01      	adds	r1, r0, #0
   12c78:	1c20      	adds	r0, r4, #0
   12c7a:	f7ee faad 	bl	11d8 <__aeabi_fsub>
   12c7e:	1c01      	adds	r1, r0, #0
   12c80:	483f      	ldr	r0, [pc, #252]	; (12d80 <__ieee754_acosf+0x2c8>)
   12c82:	f7ee faa9 	bl	11d8 <__aeabi_fsub>
   12c86:	e730      	b.n	12aea <__ieee754_acosf+0x32>
   12c88:	21fe      	movs	r1, #254	; 0xfe
   12c8a:	0589      	lsls	r1, r1, #22
   12c8c:	f7ed fe04 	bl	898 <__aeabi_fadd>
   12c90:	21fc      	movs	r1, #252	; 0xfc
   12c92:	0589      	lsls	r1, r1, #22
   12c94:	f7ee f96e 	bl	f74 <__aeabi_fmul>
   12c98:	492e      	ldr	r1, [pc, #184]	; (12d54 <__ieee754_acosf+0x29c>)
   12c9a:	1c04      	adds	r4, r0, #0
   12c9c:	f7ee f96a 	bl	f74 <__aeabi_fmul>
   12ca0:	492d      	ldr	r1, [pc, #180]	; (12d58 <__ieee754_acosf+0x2a0>)
   12ca2:	f7ed fdf9 	bl	898 <__aeabi_fadd>
   12ca6:	1c21      	adds	r1, r4, #0
   12ca8:	f7ee f964 	bl	f74 <__aeabi_fmul>
   12cac:	492b      	ldr	r1, [pc, #172]	; (12d5c <__ieee754_acosf+0x2a4>)
   12cae:	f7ee fa93 	bl	11d8 <__aeabi_fsub>
   12cb2:	1c21      	adds	r1, r4, #0
   12cb4:	f7ee f95e 	bl	f74 <__aeabi_fmul>
   12cb8:	4929      	ldr	r1, [pc, #164]	; (12d60 <__ieee754_acosf+0x2a8>)
   12cba:	f7ed fded 	bl	898 <__aeabi_fadd>
   12cbe:	1c21      	adds	r1, r4, #0
   12cc0:	f7ee f958 	bl	f74 <__aeabi_fmul>
   12cc4:	4927      	ldr	r1, [pc, #156]	; (12d64 <__ieee754_acosf+0x2ac>)
   12cc6:	f7ee fa87 	bl	11d8 <__aeabi_fsub>
   12cca:	1c21      	adds	r1, r4, #0
   12ccc:	f7ee f952 	bl	f74 <__aeabi_fmul>
   12cd0:	4925      	ldr	r1, [pc, #148]	; (12d68 <__ieee754_acosf+0x2b0>)
   12cd2:	f7ed fde1 	bl	898 <__aeabi_fadd>
   12cd6:	1c21      	adds	r1, r4, #0
   12cd8:	f7ee f94c 	bl	f74 <__aeabi_fmul>
   12cdc:	1c06      	adds	r6, r0, #0
   12cde:	1c20      	adds	r0, r4, #0
   12ce0:	f000 fd7c 	bl	137dc <__ieee754_sqrtf>
   12ce4:	4921      	ldr	r1, [pc, #132]	; (12d6c <__ieee754_acosf+0x2b4>)
   12ce6:	1c05      	adds	r5, r0, #0
   12ce8:	1c20      	adds	r0, r4, #0
   12cea:	f7ee f943 	bl	f74 <__aeabi_fmul>
   12cee:	4920      	ldr	r1, [pc, #128]	; (12d70 <__ieee754_acosf+0x2b8>)
   12cf0:	f7ee fa72 	bl	11d8 <__aeabi_fsub>
   12cf4:	1c21      	adds	r1, r4, #0
   12cf6:	f7ee f93d 	bl	f74 <__aeabi_fmul>
   12cfa:	491e      	ldr	r1, [pc, #120]	; (12d74 <__ieee754_acosf+0x2bc>)
   12cfc:	f7ed fdcc 	bl	898 <__aeabi_fadd>
   12d00:	1c21      	adds	r1, r4, #0
   12d02:	f7ee f937 	bl	f74 <__aeabi_fmul>
   12d06:	491c      	ldr	r1, [pc, #112]	; (12d78 <__ieee754_acosf+0x2c0>)
   12d08:	f7ee fa66 	bl	11d8 <__aeabi_fsub>
   12d0c:	1c21      	adds	r1, r4, #0
   12d0e:	f7ee f931 	bl	f74 <__aeabi_fmul>
   12d12:	21fe      	movs	r1, #254	; 0xfe
   12d14:	0589      	lsls	r1, r1, #22
   12d16:	f7ed fdbf 	bl	898 <__aeabi_fadd>
   12d1a:	1c01      	adds	r1, r0, #0
   12d1c:	1c30      	adds	r0, r6, #0
   12d1e:	f7ed ff37 	bl	b90 <__aeabi_fdiv>
   12d22:	1c29      	adds	r1, r5, #0
   12d24:	f7ee f926 	bl	f74 <__aeabi_fmul>
   12d28:	4914      	ldr	r1, [pc, #80]	; (12d7c <__ieee754_acosf+0x2c4>)
   12d2a:	f7ee fa55 	bl	11d8 <__aeabi_fsub>
   12d2e:	1c01      	adds	r1, r0, #0
   12d30:	1c28      	adds	r0, r5, #0
   12d32:	f7ed fdb1 	bl	898 <__aeabi_fadd>
   12d36:	1c01      	adds	r1, r0, #0
   12d38:	f7ed fdae 	bl	898 <__aeabi_fadd>
   12d3c:	1c01      	adds	r1, r0, #0
   12d3e:	4811      	ldr	r0, [pc, #68]	; (12d84 <__ieee754_acosf+0x2cc>)
   12d40:	f7ee fa4a 	bl	11d8 <__aeabi_fsub>
   12d44:	e6d1      	b.n	12aea <__ieee754_acosf+0x32>
   12d46:	46c0      	nop			; (mov r8, r8)
   12d48:	3effffff 	.word	0x3effffff
   12d4c:	3fc90fdb 	.word	0x3fc90fdb
   12d50:	40490fdb 	.word	0x40490fdb
   12d54:	3811ef08 	.word	0x3811ef08
   12d58:	3a4f7f04 	.word	0x3a4f7f04
   12d5c:	3d241146 	.word	0x3d241146
   12d60:	3e4e0aa8 	.word	0x3e4e0aa8
   12d64:	3ea6b090 	.word	0x3ea6b090
   12d68:	3e2aaaab 	.word	0x3e2aaaab
   12d6c:	3d9dc62e 	.word	0x3d9dc62e
   12d70:	3f303361 	.word	0x3f303361
   12d74:	4001572d 	.word	0x4001572d
   12d78:	4019d139 	.word	0x4019d139
   12d7c:	33a22168 	.word	0x33a22168
   12d80:	3fc90fda 	.word	0x3fc90fda
   12d84:	40490fda 	.word	0x40490fda

00012d88 <__ieee754_powf>:
__ieee754_powf():
   12d88:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d8a:	4644      	mov	r4, r8
   12d8c:	4656      	mov	r6, sl
   12d8e:	464d      	mov	r5, r9
   12d90:	465f      	mov	r7, fp
   12d92:	b4f0      	push	{r4, r5, r6, r7}
   12d94:	004e      	lsls	r6, r1, #1
   12d96:	b087      	sub	sp, #28
   12d98:	1c05      	adds	r5, r0, #0
   12d9a:	1c0c      	adds	r4, r1, #0
   12d9c:	4688      	mov	r8, r1
   12d9e:	0876      	lsrs	r6, r6, #1
   12da0:	d011      	beq.n	12dc6 <__ieee754_powf+0x3e>
   12da2:	23ff      	movs	r3, #255	; 0xff
   12da4:	0047      	lsls	r7, r0, #1
   12da6:	4681      	mov	r9, r0
   12da8:	087f      	lsrs	r7, r7, #1
   12daa:	05db      	lsls	r3, r3, #23
   12dac:	429f      	cmp	r7, r3
   12dae:	dd04      	ble.n	12dba <__ieee754_powf+0x32>
   12db0:	4865      	ldr	r0, [pc, #404]	; (12f48 <__ieee754_powf+0x1c0>)
   12db2:	f001 fb6d 	bl	14490 <nanf>
   12db6:	1c04      	adds	r4, r0, #0
   12db8:	e007      	b.n	12dca <__ieee754_powf+0x42>
   12dba:	429e      	cmp	r6, r3
   12dbc:	dd0d      	ble.n	12dda <__ieee754_powf+0x52>
   12dbe:	23fe      	movs	r3, #254	; 0xfe
   12dc0:	059b      	lsls	r3, r3, #22
   12dc2:	429f      	cmp	r7, r3
   12dc4:	d1f4      	bne.n	12db0 <__ieee754_powf+0x28>
   12dc6:	24fe      	movs	r4, #254	; 0xfe
   12dc8:	05a4      	lsls	r4, r4, #22
   12dca:	1c20      	adds	r0, r4, #0
   12dcc:	b007      	add	sp, #28
   12dce:	bc3c      	pop	{r2, r3, r4, r5}
   12dd0:	4690      	mov	r8, r2
   12dd2:	4699      	mov	r9, r3
   12dd4:	46a2      	mov	sl, r4
   12dd6:	46ab      	mov	fp, r5
   12dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12dda:	2300      	movs	r3, #0
   12ddc:	9301      	str	r3, [sp, #4]
   12dde:	2800      	cmp	r0, #0
   12de0:	db6f      	blt.n	12ec2 <__ieee754_powf+0x13a>
   12de2:	23ff      	movs	r3, #255	; 0xff
   12de4:	05db      	lsls	r3, r3, #23
   12de6:	429e      	cmp	r6, r3
   12de8:	d060      	beq.n	12eac <__ieee754_powf+0x124>
   12dea:	23fe      	movs	r3, #254	; 0xfe
   12dec:	059b      	lsls	r3, r3, #22
   12dee:	429e      	cmp	r6, r3
   12df0:	d07c      	beq.n	12eec <__ieee754_powf+0x164>
   12df2:	2380      	movs	r3, #128	; 0x80
   12df4:	05db      	lsls	r3, r3, #23
   12df6:	4598      	cmp	r8, r3
   12df8:	d100      	bne.n	12dfc <__ieee754_powf+0x74>
   12dfa:	e08b      	b.n	12f14 <__ieee754_powf+0x18c>
   12dfc:	23fc      	movs	r3, #252	; 0xfc
   12dfe:	059b      	lsls	r3, r3, #22
   12e00:	4598      	cmp	r8, r3
   12e02:	d021      	beq.n	12e48 <__ieee754_powf+0xc0>
   12e04:	1c28      	adds	r0, r5, #0
   12e06:	f001 fac7 	bl	14398 <fabsf>
   12e0a:	23ff      	movs	r3, #255	; 0xff
   12e0c:	1c01      	adds	r1, r0, #0
   12e0e:	05db      	lsls	r3, r3, #23
   12e10:	429f      	cmp	r7, r3
   12e12:	d036      	beq.n	12e82 <__ieee754_powf+0xfa>
   12e14:	2f00      	cmp	r7, #0
   12e16:	d034      	beq.n	12e82 <__ieee754_powf+0xfa>
   12e18:	23fe      	movs	r3, #254	; 0xfe
   12e1a:	059b      	lsls	r3, r3, #22
   12e1c:	429f      	cmp	r7, r3
   12e1e:	d030      	beq.n	12e82 <__ieee754_powf+0xfa>
   12e20:	0feb      	lsrs	r3, r5, #31
   12e22:	3b01      	subs	r3, #1
   12e24:	1c1a      	adds	r2, r3, #0
   12e26:	9302      	str	r3, [sp, #8]
   12e28:	9b01      	ldr	r3, [sp, #4]
   12e2a:	4313      	orrs	r3, r2
   12e2c:	d07c      	beq.n	12f28 <__ieee754_powf+0x1a0>
   12e2e:	239a      	movs	r3, #154	; 0x9a
   12e30:	05db      	lsls	r3, r3, #23
   12e32:	429e      	cmp	r6, r3
   12e34:	dc00      	bgt.n	12e38 <__ieee754_powf+0xb0>
   12e36:	e095      	b.n	12f64 <__ieee754_powf+0x1dc>
   12e38:	4b44      	ldr	r3, [pc, #272]	; (12f4c <__ieee754_powf+0x1c4>)
   12e3a:	429f      	cmp	r7, r3
   12e3c:	dc29      	bgt.n	12e92 <__ieee754_powf+0x10a>
   12e3e:	4643      	mov	r3, r8
   12e40:	2b00      	cmp	r3, #0
   12e42:	db2d      	blt.n	12ea0 <__ieee754_powf+0x118>
   12e44:	2400      	movs	r4, #0
   12e46:	e7c0      	b.n	12dca <__ieee754_powf+0x42>
   12e48:	464b      	mov	r3, r9
   12e4a:	1c28      	adds	r0, r5, #0
   12e4c:	2b00      	cmp	r3, #0
   12e4e:	da67      	bge.n	12f20 <__ieee754_powf+0x198>
   12e50:	f001 faa2 	bl	14398 <fabsf>
   12e54:	23ff      	movs	r3, #255	; 0xff
   12e56:	1c01      	adds	r1, r0, #0
   12e58:	05db      	lsls	r3, r3, #23
   12e5a:	429f      	cmp	r7, r3
   12e5c:	d001      	beq.n	12e62 <__ieee754_powf+0xda>
   12e5e:	2f00      	cmp	r7, #0
   12e60:	d1da      	bne.n	12e18 <__ieee754_powf+0x90>
   12e62:	4b3b      	ldr	r3, [pc, #236]	; (12f50 <__ieee754_powf+0x1c8>)
   12e64:	1c08      	adds	r0, r1, #0
   12e66:	469c      	mov	ip, r3
   12e68:	9b01      	ldr	r3, [sp, #4]
   12e6a:	4467      	add	r7, ip
   12e6c:	431f      	orrs	r7, r3
   12e6e:	d05d      	beq.n	12f2c <__ieee754_powf+0x1a4>
   12e70:	9b01      	ldr	r3, [sp, #4]
   12e72:	1c0c      	adds	r4, r1, #0
   12e74:	2b01      	cmp	r3, #1
   12e76:	d1a8      	bne.n	12dca <__ieee754_powf+0x42>
   12e78:	2380      	movs	r3, #128	; 0x80
   12e7a:	061b      	lsls	r3, r3, #24
   12e7c:	469c      	mov	ip, r3
   12e7e:	4464      	add	r4, ip
   12e80:	e7a3      	b.n	12dca <__ieee754_powf+0x42>
   12e82:	4643      	mov	r3, r8
   12e84:	2b00      	cmp	r3, #0
   12e86:	db58      	blt.n	12f3a <__ieee754_powf+0x1b2>
   12e88:	464b      	mov	r3, r9
   12e8a:	1c0c      	adds	r4, r1, #0
   12e8c:	2b00      	cmp	r3, #0
   12e8e:	da9c      	bge.n	12dca <__ieee754_powf+0x42>
   12e90:	e7e7      	b.n	12e62 <__ieee754_powf+0xda>
   12e92:	4b30      	ldr	r3, [pc, #192]	; (12f54 <__ieee754_powf+0x1cc>)
   12e94:	429f      	cmp	r7, r3
   12e96:	dc00      	bgt.n	12e9a <__ieee754_powf+0x112>
   12e98:	e2bd      	b.n	13416 <__ieee754_powf+0x68e>
   12e9a:	4643      	mov	r3, r8
   12e9c:	2b00      	cmp	r3, #0
   12e9e:	ddd1      	ble.n	12e44 <__ieee754_powf+0xbc>
   12ea0:	482d      	ldr	r0, [pc, #180]	; (12f58 <__ieee754_powf+0x1d0>)
   12ea2:	1c01      	adds	r1, r0, #0
   12ea4:	f7ee f866 	bl	f74 <__aeabi_fmul>
   12ea8:	1c04      	adds	r4, r0, #0
   12eaa:	e78e      	b.n	12dca <__ieee754_powf+0x42>
   12eac:	23fe      	movs	r3, #254	; 0xfe
   12eae:	059b      	lsls	r3, r3, #22
   12eb0:	429f      	cmp	r7, r3
   12eb2:	d100      	bne.n	12eb6 <__ieee754_powf+0x12e>
   12eb4:	e787      	b.n	12dc6 <__ieee754_powf+0x3e>
   12eb6:	dd28      	ble.n	12f0a <__ieee754_powf+0x182>
   12eb8:	4643      	mov	r3, r8
   12eba:	2b00      	cmp	r3, #0
   12ebc:	db00      	blt.n	12ec0 <__ieee754_powf+0x138>
   12ebe:	e784      	b.n	12dca <__ieee754_powf+0x42>
   12ec0:	e7c0      	b.n	12e44 <__ieee754_powf+0xbc>
   12ec2:	4b26      	ldr	r3, [pc, #152]	; (12f5c <__ieee754_powf+0x1d4>)
   12ec4:	429e      	cmp	r6, r3
   12ec6:	dc1d      	bgt.n	12f04 <__ieee754_powf+0x17c>
   12ec8:	4b25      	ldr	r3, [pc, #148]	; (12f60 <__ieee754_powf+0x1d8>)
   12eca:	429e      	cmp	r6, r3
   12ecc:	dd8d      	ble.n	12dea <__ieee754_powf+0x62>
   12ece:	2396      	movs	r3, #150	; 0x96
   12ed0:	15f2      	asrs	r2, r6, #23
   12ed2:	1a9b      	subs	r3, r3, r2
   12ed4:	1c32      	adds	r2, r6, #0
   12ed6:	411a      	asrs	r2, r3
   12ed8:	1c11      	adds	r1, r2, #0
   12eda:	4099      	lsls	r1, r3
   12edc:	42b1      	cmp	r1, r6
   12ede:	d184      	bne.n	12dea <__ieee754_powf+0x62>
   12ee0:	2301      	movs	r3, #1
   12ee2:	401a      	ands	r2, r3
   12ee4:	3301      	adds	r3, #1
   12ee6:	1a9b      	subs	r3, r3, r2
   12ee8:	9301      	str	r3, [sp, #4]
   12eea:	e77e      	b.n	12dea <__ieee754_powf+0x62>
   12eec:	4643      	mov	r3, r8
   12eee:	1c2c      	adds	r4, r5, #0
   12ef0:	2b00      	cmp	r3, #0
   12ef2:	db00      	blt.n	12ef6 <__ieee754_powf+0x16e>
   12ef4:	e769      	b.n	12dca <__ieee754_powf+0x42>
   12ef6:	20fe      	movs	r0, #254	; 0xfe
   12ef8:	1c29      	adds	r1, r5, #0
   12efa:	0580      	lsls	r0, r0, #22
   12efc:	f7ed fe48 	bl	b90 <__aeabi_fdiv>
   12f00:	1c04      	adds	r4, r0, #0
   12f02:	e762      	b.n	12dca <__ieee754_powf+0x42>
   12f04:	2302      	movs	r3, #2
   12f06:	9301      	str	r3, [sp, #4]
   12f08:	e76b      	b.n	12de2 <__ieee754_powf+0x5a>
   12f0a:	4643      	mov	r3, r8
   12f0c:	2b00      	cmp	r3, #0
   12f0e:	dbb3      	blt.n	12e78 <__ieee754_powf+0xf0>
   12f10:	2400      	movs	r4, #0
   12f12:	e75a      	b.n	12dca <__ieee754_powf+0x42>
   12f14:	1c28      	adds	r0, r5, #0
   12f16:	1c29      	adds	r1, r5, #0
   12f18:	f7ee f82c 	bl	f74 <__aeabi_fmul>
   12f1c:	1c04      	adds	r4, r0, #0
   12f1e:	e754      	b.n	12dca <__ieee754_powf+0x42>
   12f20:	f000 fc5c 	bl	137dc <__ieee754_sqrtf>
   12f24:	1c04      	adds	r4, r0, #0
   12f26:	e750      	b.n	12dca <__ieee754_powf+0x42>
   12f28:	1c28      	adds	r0, r5, #0
   12f2a:	1c29      	adds	r1, r5, #0
   12f2c:	f7ee f954 	bl	11d8 <__aeabi_fsub>
   12f30:	1c01      	adds	r1, r0, #0
   12f32:	f7ed fe2d 	bl	b90 <__aeabi_fdiv>
   12f36:	1c04      	adds	r4, r0, #0
   12f38:	e747      	b.n	12dca <__ieee754_powf+0x42>
   12f3a:	20fe      	movs	r0, #254	; 0xfe
   12f3c:	0580      	lsls	r0, r0, #22
   12f3e:	f7ed fe27 	bl	b90 <__aeabi_fdiv>
   12f42:	1c01      	adds	r1, r0, #0
   12f44:	e7a0      	b.n	12e88 <__ieee754_powf+0x100>
   12f46:	46c0      	nop			; (mov r8, r8)
   12f48:	000148ec 	.word	0x000148ec
   12f4c:	3f7ffff7 	.word	0x3f7ffff7
   12f50:	c0800000 	.word	0xc0800000
   12f54:	3f800007 	.word	0x3f800007
   12f58:	7149f2ca 	.word	0x7149f2ca
   12f5c:	4b7fffff 	.word	0x4b7fffff
   12f60:	3f7fffff 	.word	0x3f7fffff
   12f64:	4bf1      	ldr	r3, [pc, #964]	; (1332c <__ieee754_powf+0x5a4>)
   12f66:	2200      	movs	r2, #0
   12f68:	429f      	cmp	r7, r3
   12f6a:	dc07      	bgt.n	12f7c <__ieee754_powf+0x1f4>
   12f6c:	1c08      	adds	r0, r1, #0
   12f6e:	2197      	movs	r1, #151	; 0x97
   12f70:	05c9      	lsls	r1, r1, #23
   12f72:	f7ed ffff 	bl	f74 <__aeabi_fmul>
   12f76:	2218      	movs	r2, #24
   12f78:	1c07      	adds	r7, r0, #0
   12f7a:	4252      	negs	r2, r2
   12f7c:	15fb      	asrs	r3, r7, #23
   12f7e:	0278      	lsls	r0, r7, #9
   12f80:	27fe      	movs	r7, #254	; 0xfe
   12f82:	3b7f      	subs	r3, #127	; 0x7f
   12f84:	189b      	adds	r3, r3, r2
   12f86:	9303      	str	r3, [sp, #12]
   12f88:	4be9      	ldr	r3, [pc, #932]	; (13330 <__ieee754_powf+0x5a8>)
   12f8a:	0a40      	lsrs	r0, r0, #9
   12f8c:	05bf      	lsls	r7, r7, #22
   12f8e:	4307      	orrs	r7, r0
   12f90:	4298      	cmp	r0, r3
   12f92:	dc00      	bgt.n	12f96 <__ieee754_powf+0x20e>
   12f94:	e1ae      	b.n	132f4 <__ieee754_powf+0x56c>
   12f96:	4be7      	ldr	r3, [pc, #924]	; (13334 <__ieee754_powf+0x5ac>)
   12f98:	4298      	cmp	r0, r3
   12f9a:	dc00      	bgt.n	12f9e <__ieee754_powf+0x216>
   12f9c:	e27c      	b.n	13498 <__ieee754_powf+0x710>
   12f9e:	9b03      	ldr	r3, [sp, #12]
   12fa0:	3301      	adds	r3, #1
   12fa2:	9303      	str	r3, [sp, #12]
   12fa4:	4be4      	ldr	r3, [pc, #912]	; (13338 <__ieee754_powf+0x5b0>)
   12fa6:	469c      	mov	ip, r3
   12fa8:	2300      	movs	r3, #0
   12faa:	4467      	add	r7, ip
   12fac:	9304      	str	r3, [sp, #16]
   12fae:	009d      	lsls	r5, r3, #2
   12fb0:	4be2      	ldr	r3, [pc, #904]	; (1333c <__ieee754_powf+0x5b4>)
   12fb2:	1c38      	adds	r0, r7, #0
   12fb4:	58eb      	ldr	r3, [r5, r3]
   12fb6:	46bb      	mov	fp, r7
   12fb8:	1c19      	adds	r1, r3, #0
   12fba:	4699      	mov	r9, r3
   12fbc:	f7ee f90c 	bl	11d8 <__aeabi_fsub>
   12fc0:	4649      	mov	r1, r9
   12fc2:	4682      	mov	sl, r0
   12fc4:	1c38      	adds	r0, r7, #0
   12fc6:	f7ed fc67 	bl	898 <__aeabi_fadd>
   12fca:	1c01      	adds	r1, r0, #0
   12fcc:	20fe      	movs	r0, #254	; 0xfe
   12fce:	0580      	lsls	r0, r0, #22
   12fd0:	f7ed fdde 	bl	b90 <__aeabi_fdiv>
   12fd4:	1c03      	adds	r3, r0, #0
   12fd6:	1c19      	adds	r1, r3, #0
   12fd8:	4650      	mov	r0, sl
   12fda:	9305      	str	r3, [sp, #20]
   12fdc:	f7ed ffca 	bl	f74 <__aeabi_fmul>
   12fe0:	2380      	movs	r3, #128	; 0x80
   12fe2:	107f      	asrs	r7, r7, #1
   12fe4:	059b      	lsls	r3, r3, #22
   12fe6:	431f      	orrs	r7, r3
   12fe8:	2380      	movs	r3, #128	; 0x80
   12fea:	02db      	lsls	r3, r3, #11
   12fec:	469c      	mov	ip, r3
   12fee:	9b04      	ldr	r3, [sp, #16]
   12ff0:	4467      	add	r7, ip
   12ff2:	469c      	mov	ip, r3
   12ff4:	0b06      	lsrs	r6, r0, #12
   12ff6:	4467      	add	r7, ip
   12ff8:	0336      	lsls	r6, r6, #12
   12ffa:	4680      	mov	r8, r0
   12ffc:	1c39      	adds	r1, r7, #0
   12ffe:	1c30      	adds	r0, r6, #0
   13000:	f7ed ffb8 	bl	f74 <__aeabi_fmul>
   13004:	1c01      	adds	r1, r0, #0
   13006:	4650      	mov	r0, sl
   13008:	f7ee f8e6 	bl	11d8 <__aeabi_fsub>
   1300c:	4649      	mov	r1, r9
   1300e:	4682      	mov	sl, r0
   13010:	1c38      	adds	r0, r7, #0
   13012:	f7ee f8e1 	bl	11d8 <__aeabi_fsub>
   13016:	1c01      	adds	r1, r0, #0
   13018:	4658      	mov	r0, fp
   1301a:	f7ee f8dd 	bl	11d8 <__aeabi_fsub>
   1301e:	1c01      	adds	r1, r0, #0
   13020:	1c30      	adds	r0, r6, #0
   13022:	f7ed ffa7 	bl	f74 <__aeabi_fmul>
   13026:	1c01      	adds	r1, r0, #0
   13028:	4650      	mov	r0, sl
   1302a:	f7ee f8d5 	bl	11d8 <__aeabi_fsub>
   1302e:	9905      	ldr	r1, [sp, #20]
   13030:	f7ed ffa0 	bl	f74 <__aeabi_fmul>
   13034:	4641      	mov	r1, r8
   13036:	4683      	mov	fp, r0
   13038:	4640      	mov	r0, r8
   1303a:	f7ed ff9b 	bl	f74 <__aeabi_fmul>
   1303e:	1c07      	adds	r7, r0, #0
   13040:	1c39      	adds	r1, r7, #0
   13042:	f7ed ff97 	bl	f74 <__aeabi_fmul>
   13046:	49be      	ldr	r1, [pc, #760]	; (13340 <__ieee754_powf+0x5b8>)
   13048:	4681      	mov	r9, r0
   1304a:	1c38      	adds	r0, r7, #0
   1304c:	f7ed ff92 	bl	f74 <__aeabi_fmul>
   13050:	49bc      	ldr	r1, [pc, #752]	; (13344 <__ieee754_powf+0x5bc>)
   13052:	f7ed fc21 	bl	898 <__aeabi_fadd>
   13056:	1c39      	adds	r1, r7, #0
   13058:	f7ed ff8c 	bl	f74 <__aeabi_fmul>
   1305c:	49ba      	ldr	r1, [pc, #744]	; (13348 <__ieee754_powf+0x5c0>)
   1305e:	f7ed fc1b 	bl	898 <__aeabi_fadd>
   13062:	1c39      	adds	r1, r7, #0
   13064:	f7ed ff86 	bl	f74 <__aeabi_fmul>
   13068:	49b8      	ldr	r1, [pc, #736]	; (1334c <__ieee754_powf+0x5c4>)
   1306a:	f7ed fc15 	bl	898 <__aeabi_fadd>
   1306e:	1c39      	adds	r1, r7, #0
   13070:	f7ed ff80 	bl	f74 <__aeabi_fmul>
   13074:	49b6      	ldr	r1, [pc, #728]	; (13350 <__ieee754_powf+0x5c8>)
   13076:	f7ed fc0f 	bl	898 <__aeabi_fadd>
   1307a:	1c39      	adds	r1, r7, #0
   1307c:	f7ed ff7a 	bl	f74 <__aeabi_fmul>
   13080:	49b4      	ldr	r1, [pc, #720]	; (13354 <__ieee754_powf+0x5cc>)
   13082:	f7ed fc09 	bl	898 <__aeabi_fadd>
   13086:	1c01      	adds	r1, r0, #0
   13088:	4648      	mov	r0, r9
   1308a:	f7ed ff73 	bl	f74 <__aeabi_fmul>
   1308e:	1c31      	adds	r1, r6, #0
   13090:	1c07      	adds	r7, r0, #0
   13092:	4640      	mov	r0, r8
   13094:	f7ed fc00 	bl	898 <__aeabi_fadd>
   13098:	4659      	mov	r1, fp
   1309a:	f7ed ff6b 	bl	f74 <__aeabi_fmul>
   1309e:	1c39      	adds	r1, r7, #0
   130a0:	f7ed fbfa 	bl	898 <__aeabi_fadd>
   130a4:	1c31      	adds	r1, r6, #0
   130a6:	4681      	mov	r9, r0
   130a8:	1c30      	adds	r0, r6, #0
   130aa:	f7ed ff63 	bl	f74 <__aeabi_fmul>
   130ae:	49aa      	ldr	r1, [pc, #680]	; (13358 <__ieee754_powf+0x5d0>)
   130b0:	4682      	mov	sl, r0
   130b2:	f7ed fbf1 	bl	898 <__aeabi_fadd>
   130b6:	4649      	mov	r1, r9
   130b8:	f7ed fbee 	bl	898 <__aeabi_fadd>
   130bc:	0b07      	lsrs	r7, r0, #12
   130be:	033f      	lsls	r7, r7, #12
   130c0:	1c39      	adds	r1, r7, #0
   130c2:	1c30      	adds	r0, r6, #0
   130c4:	f7ed ff56 	bl	f74 <__aeabi_fmul>
   130c8:	1c39      	adds	r1, r7, #0
   130ca:	1c06      	adds	r6, r0, #0
   130cc:	4658      	mov	r0, fp
   130ce:	f7ed ff51 	bl	f74 <__aeabi_fmul>
   130d2:	49a1      	ldr	r1, [pc, #644]	; (13358 <__ieee754_powf+0x5d0>)
   130d4:	4683      	mov	fp, r0
   130d6:	1c38      	adds	r0, r7, #0
   130d8:	f7ee f87e 	bl	11d8 <__aeabi_fsub>
   130dc:	4651      	mov	r1, sl
   130de:	f7ee f87b 	bl	11d8 <__aeabi_fsub>
   130e2:	1c01      	adds	r1, r0, #0
   130e4:	4648      	mov	r0, r9
   130e6:	f7ee f877 	bl	11d8 <__aeabi_fsub>
   130ea:	4641      	mov	r1, r8
   130ec:	f7ed ff42 	bl	f74 <__aeabi_fmul>
   130f0:	1c01      	adds	r1, r0, #0
   130f2:	4658      	mov	r0, fp
   130f4:	f7ed fbd0 	bl	898 <__aeabi_fadd>
   130f8:	4681      	mov	r9, r0
   130fa:	1c30      	adds	r0, r6, #0
   130fc:	4649      	mov	r1, r9
   130fe:	f7ed fbcb 	bl	898 <__aeabi_fadd>
   13102:	0b07      	lsrs	r7, r0, #12
   13104:	033f      	lsls	r7, r7, #12
   13106:	1c38      	adds	r0, r7, #0
   13108:	4994      	ldr	r1, [pc, #592]	; (1335c <__ieee754_powf+0x5d4>)
   1310a:	f7ed ff33 	bl	f74 <__aeabi_fmul>
   1310e:	4994      	ldr	r1, [pc, #592]	; (13360 <__ieee754_powf+0x5d8>)
   13110:	4680      	mov	r8, r0
   13112:	1c38      	adds	r0, r7, #0
   13114:	f7ed ff2e 	bl	f74 <__aeabi_fmul>
   13118:	1c31      	adds	r1, r6, #0
   1311a:	4682      	mov	sl, r0
   1311c:	1c38      	adds	r0, r7, #0
   1311e:	f7ee f85b 	bl	11d8 <__aeabi_fsub>
   13122:	1c01      	adds	r1, r0, #0
   13124:	4648      	mov	r0, r9
   13126:	f7ee f857 	bl	11d8 <__aeabi_fsub>
   1312a:	498e      	ldr	r1, [pc, #568]	; (13364 <__ieee754_powf+0x5dc>)
   1312c:	f7ed ff22 	bl	f74 <__aeabi_fmul>
   13130:	1c01      	adds	r1, r0, #0
   13132:	4650      	mov	r0, sl
   13134:	f7ed fbb0 	bl	898 <__aeabi_fadd>
   13138:	4b8b      	ldr	r3, [pc, #556]	; (13368 <__ieee754_powf+0x5e0>)
   1313a:	58e9      	ldr	r1, [r5, r3]
   1313c:	f7ed fbac 	bl	898 <__aeabi_fadd>
   13140:	1c07      	adds	r7, r0, #0
   13142:	9803      	ldr	r0, [sp, #12]
   13144:	f7ee f9e6 	bl	1514 <__aeabi_i2f>
   13148:	4b88      	ldr	r3, [pc, #544]	; (1336c <__ieee754_powf+0x5e4>)
   1314a:	4681      	mov	r9, r0
   1314c:	58eb      	ldr	r3, [r5, r3]
   1314e:	4640      	mov	r0, r8
   13150:	469a      	mov	sl, r3
   13152:	1c39      	adds	r1, r7, #0
   13154:	f7ed fba0 	bl	898 <__aeabi_fadd>
   13158:	4651      	mov	r1, sl
   1315a:	f7ed fb9d 	bl	898 <__aeabi_fadd>
   1315e:	4649      	mov	r1, r9
   13160:	f7ed fb9a 	bl	898 <__aeabi_fadd>
   13164:	0b06      	lsrs	r6, r0, #12
   13166:	0336      	lsls	r6, r6, #12
   13168:	4649      	mov	r1, r9
   1316a:	1c30      	adds	r0, r6, #0
   1316c:	f7ee f834 	bl	11d8 <__aeabi_fsub>
   13170:	4651      	mov	r1, sl
   13172:	f7ee f831 	bl	11d8 <__aeabi_fsub>
   13176:	4641      	mov	r1, r8
   13178:	f7ee f82e 	bl	11d8 <__aeabi_fsub>
   1317c:	1c01      	adds	r1, r0, #0
   1317e:	1c38      	adds	r0, r7, #0
   13180:	f7ee f82a 	bl	11d8 <__aeabi_fsub>
   13184:	4680      	mov	r8, r0
   13186:	9d01      	ldr	r5, [sp, #4]
   13188:	9b02      	ldr	r3, [sp, #8]
   1318a:	3d01      	subs	r5, #1
   1318c:	431d      	orrs	r5, r3
   1318e:	d000      	beq.n	13192 <__ieee754_powf+0x40a>
   13190:	e0ad      	b.n	132ee <__ieee754_powf+0x566>
   13192:	4f77      	ldr	r7, [pc, #476]	; (13370 <__ieee754_powf+0x5e8>)
   13194:	0b25      	lsrs	r5, r4, #12
   13196:	032d      	lsls	r5, r5, #12
   13198:	1c29      	adds	r1, r5, #0
   1319a:	1c20      	adds	r0, r4, #0
   1319c:	f7ee f81c 	bl	11d8 <__aeabi_fsub>
   131a0:	1c31      	adds	r1, r6, #0
   131a2:	f7ed fee7 	bl	f74 <__aeabi_fmul>
   131a6:	4641      	mov	r1, r8
   131a8:	4681      	mov	r9, r0
   131aa:	1c20      	adds	r0, r4, #0
   131ac:	f7ed fee2 	bl	f74 <__aeabi_fmul>
   131b0:	1c01      	adds	r1, r0, #0
   131b2:	4648      	mov	r0, r9
   131b4:	f7ed fb70 	bl	898 <__aeabi_fadd>
   131b8:	1c29      	adds	r1, r5, #0
   131ba:	4680      	mov	r8, r0
   131bc:	1c30      	adds	r0, r6, #0
   131be:	f7ed fed9 	bl	f74 <__aeabi_fmul>
   131c2:	1c06      	adds	r6, r0, #0
   131c4:	4682      	mov	sl, r0
   131c6:	1c31      	adds	r1, r6, #0
   131c8:	4640      	mov	r0, r8
   131ca:	f7ed fb65 	bl	898 <__aeabi_fadd>
   131ce:	0044      	lsls	r4, r0, #1
   131d0:	4681      	mov	r9, r0
   131d2:	1c05      	adds	r5, r0, #0
   131d4:	0864      	lsrs	r4, r4, #1
   131d6:	2800      	cmp	r0, #0
   131d8:	dc00      	bgt.n	131dc <__ieee754_powf+0x454>
   131da:	e105      	b.n	133e8 <__ieee754_powf+0x660>
   131dc:	2386      	movs	r3, #134	; 0x86
   131de:	05db      	lsls	r3, r3, #23
   131e0:	429c      	cmp	r4, r3
   131e2:	dd00      	ble.n	131e6 <__ieee754_powf+0x45e>
   131e4:	e098      	b.n	13318 <__ieee754_powf+0x590>
   131e6:	d100      	bne.n	131ea <__ieee754_powf+0x462>
   131e8:	e087      	b.n	132fa <__ieee754_powf+0x572>
   131ea:	23fc      	movs	r3, #252	; 0xfc
   131ec:	059b      	lsls	r3, r3, #22
   131ee:	429c      	cmp	r4, r3
   131f0:	dd00      	ble.n	131f4 <__ieee754_powf+0x46c>
   131f2:	e0d3      	b.n	1339c <__ieee754_powf+0x614>
   131f4:	2300      	movs	r3, #0
   131f6:	2600      	movs	r6, #0
   131f8:	4699      	mov	r9, r3
   131fa:	0b2d      	lsrs	r5, r5, #12
   131fc:	032d      	lsls	r5, r5, #12
   131fe:	1c28      	adds	r0, r5, #0
   13200:	495c      	ldr	r1, [pc, #368]	; (13374 <__ieee754_powf+0x5ec>)
   13202:	f7ed feb7 	bl	f74 <__aeabi_fmul>
   13206:	4651      	mov	r1, sl
   13208:	4683      	mov	fp, r0
   1320a:	1c28      	adds	r0, r5, #0
   1320c:	f7ed ffe4 	bl	11d8 <__aeabi_fsub>
   13210:	1c01      	adds	r1, r0, #0
   13212:	4640      	mov	r0, r8
   13214:	f7ed ffe0 	bl	11d8 <__aeabi_fsub>
   13218:	4957      	ldr	r1, [pc, #348]	; (13378 <__ieee754_powf+0x5f0>)
   1321a:	f7ed feab 	bl	f74 <__aeabi_fmul>
   1321e:	4957      	ldr	r1, [pc, #348]	; (1337c <__ieee754_powf+0x5f4>)
   13220:	1c04      	adds	r4, r0, #0
   13222:	1c28      	adds	r0, r5, #0
   13224:	f7ed fea6 	bl	f74 <__aeabi_fmul>
   13228:	1c01      	adds	r1, r0, #0
   1322a:	1c20      	adds	r0, r4, #0
   1322c:	f7ed fb34 	bl	898 <__aeabi_fadd>
   13230:	1c04      	adds	r4, r0, #0
   13232:	1c21      	adds	r1, r4, #0
   13234:	4658      	mov	r0, fp
   13236:	f7ed fb2f 	bl	898 <__aeabi_fadd>
   1323a:	4659      	mov	r1, fp
   1323c:	1c05      	adds	r5, r0, #0
   1323e:	f7ed ffcb 	bl	11d8 <__aeabi_fsub>
   13242:	1c01      	adds	r1, r0, #0
   13244:	1c20      	adds	r0, r4, #0
   13246:	f7ed ffc7 	bl	11d8 <__aeabi_fsub>
   1324a:	1c29      	adds	r1, r5, #0
   1324c:	4680      	mov	r8, r0
   1324e:	1c28      	adds	r0, r5, #0
   13250:	f7ed fe90 	bl	f74 <__aeabi_fmul>
   13254:	494a      	ldr	r1, [pc, #296]	; (13380 <__ieee754_powf+0x5f8>)
   13256:	1c04      	adds	r4, r0, #0
   13258:	f7ed fe8c 	bl	f74 <__aeabi_fmul>
   1325c:	4949      	ldr	r1, [pc, #292]	; (13384 <__ieee754_powf+0x5fc>)
   1325e:	f7ed ffbb 	bl	11d8 <__aeabi_fsub>
   13262:	1c21      	adds	r1, r4, #0
   13264:	f7ed fe86 	bl	f74 <__aeabi_fmul>
   13268:	4947      	ldr	r1, [pc, #284]	; (13388 <__ieee754_powf+0x600>)
   1326a:	f7ed fb15 	bl	898 <__aeabi_fadd>
   1326e:	1c21      	adds	r1, r4, #0
   13270:	f7ed fe80 	bl	f74 <__aeabi_fmul>
   13274:	4945      	ldr	r1, [pc, #276]	; (1338c <__ieee754_powf+0x604>)
   13276:	f7ed ffaf 	bl	11d8 <__aeabi_fsub>
   1327a:	1c21      	adds	r1, r4, #0
   1327c:	f7ed fe7a 	bl	f74 <__aeabi_fmul>
   13280:	4943      	ldr	r1, [pc, #268]	; (13390 <__ieee754_powf+0x608>)
   13282:	f7ed fb09 	bl	898 <__aeabi_fadd>
   13286:	1c21      	adds	r1, r4, #0
   13288:	f7ed fe74 	bl	f74 <__aeabi_fmul>
   1328c:	1c01      	adds	r1, r0, #0
   1328e:	1c28      	adds	r0, r5, #0
   13290:	f7ed ffa2 	bl	11d8 <__aeabi_fsub>
   13294:	1c04      	adds	r4, r0, #0
   13296:	1c21      	adds	r1, r4, #0
   13298:	1c28      	adds	r0, r5, #0
   1329a:	f7ed fe6b 	bl	f74 <__aeabi_fmul>
   1329e:	2180      	movs	r1, #128	; 0x80
   132a0:	4682      	mov	sl, r0
   132a2:	05c9      	lsls	r1, r1, #23
   132a4:	1c20      	adds	r0, r4, #0
   132a6:	f7ed ff97 	bl	11d8 <__aeabi_fsub>
   132aa:	1c01      	adds	r1, r0, #0
   132ac:	4650      	mov	r0, sl
   132ae:	f7ed fc6f 	bl	b90 <__aeabi_fdiv>
   132b2:	4641      	mov	r1, r8
   132b4:	1c04      	adds	r4, r0, #0
   132b6:	1c28      	adds	r0, r5, #0
   132b8:	f7ed fe5c 	bl	f74 <__aeabi_fmul>
   132bc:	4641      	mov	r1, r8
   132be:	f7ed faeb 	bl	898 <__aeabi_fadd>
   132c2:	1c01      	adds	r1, r0, #0
   132c4:	1c20      	adds	r0, r4, #0
   132c6:	f7ed ff87 	bl	11d8 <__aeabi_fsub>
   132ca:	1c29      	adds	r1, r5, #0
   132cc:	f7ed ff84 	bl	11d8 <__aeabi_fsub>
   132d0:	1c01      	adds	r1, r0, #0
   132d2:	20fe      	movs	r0, #254	; 0xfe
   132d4:	0580      	lsls	r0, r0, #22
   132d6:	f7ed ff7f 	bl	11d8 <__aeabi_fsub>
   132da:	1831      	adds	r1, r6, r0
   132dc:	15cb      	asrs	r3, r1, #23
   132de:	2b00      	cmp	r3, #0
   132e0:	dc00      	bgt.n	132e4 <__ieee754_powf+0x55c>
   132e2:	e0de      	b.n	134a2 <__ieee754_powf+0x71a>
   132e4:	1c38      	adds	r0, r7, #0
   132e6:	f7ed fe45 	bl	f74 <__aeabi_fmul>
   132ea:	1c04      	adds	r4, r0, #0
   132ec:	e56d      	b.n	12dca <__ieee754_powf+0x42>
   132ee:	27fe      	movs	r7, #254	; 0xfe
   132f0:	05bf      	lsls	r7, r7, #22
   132f2:	e74f      	b.n	13194 <__ieee754_powf+0x40c>
   132f4:	2300      	movs	r3, #0
   132f6:	9304      	str	r3, [sp, #16]
   132f8:	e659      	b.n	12fae <__ieee754_powf+0x226>
   132fa:	4926      	ldr	r1, [pc, #152]	; (13394 <__ieee754_powf+0x60c>)
   132fc:	4640      	mov	r0, r8
   132fe:	f7ed facb 	bl	898 <__aeabi_fadd>
   13302:	1c31      	adds	r1, r6, #0
   13304:	4682      	mov	sl, r0
   13306:	4648      	mov	r0, r9
   13308:	f7ed ff66 	bl	11d8 <__aeabi_fsub>
   1330c:	1c01      	adds	r1, r0, #0
   1330e:	4650      	mov	r0, sl
   13310:	f7ed faae 	bl	870 <__aeabi_fcmpgt>
   13314:	2800      	cmp	r0, #0
   13316:	d041      	beq.n	1339c <__ieee754_powf+0x614>
   13318:	491f      	ldr	r1, [pc, #124]	; (13398 <__ieee754_powf+0x610>)
   1331a:	1c38      	adds	r0, r7, #0
   1331c:	f7ed fe2a 	bl	f74 <__aeabi_fmul>
   13320:	491d      	ldr	r1, [pc, #116]	; (13398 <__ieee754_powf+0x610>)
   13322:	f7ed fe27 	bl	f74 <__aeabi_fmul>
   13326:	1c04      	adds	r4, r0, #0
   13328:	e54f      	b.n	12dca <__ieee754_powf+0x42>
   1332a:	46c0      	nop			; (mov r8, r8)
   1332c:	007fffff 	.word	0x007fffff
   13330:	001cc471 	.word	0x001cc471
   13334:	005db3d6 	.word	0x005db3d6
   13338:	ff800000 	.word	0xff800000
   1333c:	00014920 	.word	0x00014920
   13340:	3e53f142 	.word	0x3e53f142
   13344:	3e6c3255 	.word	0x3e6c3255
   13348:	3e8ba305 	.word	0x3e8ba305
   1334c:	3eaaaaab 	.word	0x3eaaaaab
   13350:	3edb6db7 	.word	0x3edb6db7
   13354:	3f19999a 	.word	0x3f19999a
   13358:	40400000 	.word	0x40400000
   1335c:	3f763800 	.word	0x3f763800
   13360:	369dc3a0 	.word	0x369dc3a0
   13364:	3f76384f 	.word	0x3f76384f
   13368:	00014918 	.word	0x00014918
   1336c:	00014910 	.word	0x00014910
   13370:	bf800000 	.word	0xbf800000
   13374:	3f317200 	.word	0x3f317200
   13378:	3f317218 	.word	0x3f317218
   1337c:	35bfbe8c 	.word	0x35bfbe8c
   13380:	3331bb4c 	.word	0x3331bb4c
   13384:	35ddea0e 	.word	0x35ddea0e
   13388:	388ab355 	.word	0x388ab355
   1338c:	3b360b61 	.word	0x3b360b61
   13390:	3e2aaaab 	.word	0x3e2aaaab
   13394:	3338aa3c 	.word	0x3338aa3c
   13398:	7149f2ca 	.word	0x7149f2ca
   1339c:	2280      	movs	r2, #128	; 0x80
   1339e:	0412      	lsls	r2, r2, #16
   133a0:	1c13      	adds	r3, r2, #0
   133a2:	15e4      	asrs	r4, r4, #23
   133a4:	3c7e      	subs	r4, #126	; 0x7e
   133a6:	4123      	asrs	r3, r4
   133a8:	195c      	adds	r4, r3, r5
   133aa:	0263      	lsls	r3, r4, #9
   133ac:	0a5b      	lsrs	r3, r3, #9
   133ae:	431a      	orrs	r2, r3
   133b0:	2396      	movs	r3, #150	; 0x96
   133b2:	0061      	lsls	r1, r4, #1
   133b4:	0e09      	lsrs	r1, r1, #24
   133b6:	1a5b      	subs	r3, r3, r1
   133b8:	411a      	asrs	r2, r3
   133ba:	1c13      	adds	r3, r2, #0
   133bc:	0fed      	lsrs	r5, r5, #31
   133be:	426a      	negs	r2, r5
   133c0:	4053      	eors	r3, r2
   133c2:	4699      	mov	r9, r3
   133c4:	4b39      	ldr	r3, [pc, #228]	; (134ac <__ieee754_powf+0x724>)
   133c6:	397f      	subs	r1, #127	; 0x7f
   133c8:	410b      	asrs	r3, r1
   133ca:	439c      	bics	r4, r3
   133cc:	1c21      	adds	r1, r4, #0
   133ce:	1c30      	adds	r0, r6, #0
   133d0:	f7ed ff02 	bl	11d8 <__aeabi_fsub>
   133d4:	4682      	mov	sl, r0
   133d6:	44a9      	add	r9, r5
   133d8:	4640      	mov	r0, r8
   133da:	4651      	mov	r1, sl
   133dc:	f7ed fa5c 	bl	898 <__aeabi_fadd>
   133e0:	464b      	mov	r3, r9
   133e2:	1c05      	adds	r5, r0, #0
   133e4:	05de      	lsls	r6, r3, #23
   133e6:	e708      	b.n	131fa <__ieee754_powf+0x472>
   133e8:	4b31      	ldr	r3, [pc, #196]	; (134b0 <__ieee754_powf+0x728>)
   133ea:	429c      	cmp	r4, r3
   133ec:	dc0a      	bgt.n	13404 <__ieee754_powf+0x67c>
   133ee:	d000      	beq.n	133f2 <__ieee754_powf+0x66a>
   133f0:	e6fb      	b.n	131ea <__ieee754_powf+0x462>
   133f2:	1c31      	adds	r1, r6, #0
   133f4:	f7ed fef0 	bl	11d8 <__aeabi_fsub>
   133f8:	1c01      	adds	r1, r0, #0
   133fa:	4640      	mov	r0, r8
   133fc:	f7ed fa2e 	bl	85c <__aeabi_fcmple>
   13400:	2800      	cmp	r0, #0
   13402:	d0cb      	beq.n	1339c <__ieee754_powf+0x614>
   13404:	492b      	ldr	r1, [pc, #172]	; (134b4 <__ieee754_powf+0x72c>)
   13406:	1c38      	adds	r0, r7, #0
   13408:	f7ed fdb4 	bl	f74 <__aeabi_fmul>
   1340c:	4929      	ldr	r1, [pc, #164]	; (134b4 <__ieee754_powf+0x72c>)
   1340e:	f7ed fdb1 	bl	f74 <__aeabi_fmul>
   13412:	1c04      	adds	r4, r0, #0
   13414:	e4d9      	b.n	12dca <__ieee754_powf+0x42>
   13416:	1c08      	adds	r0, r1, #0
   13418:	21fe      	movs	r1, #254	; 0xfe
   1341a:	0589      	lsls	r1, r1, #22
   1341c:	f7ed fedc 	bl	11d8 <__aeabi_fsub>
   13420:	4925      	ldr	r1, [pc, #148]	; (134b8 <__ieee754_powf+0x730>)
   13422:	1c06      	adds	r6, r0, #0
   13424:	f7ed fda6 	bl	f74 <__aeabi_fmul>
   13428:	4924      	ldr	r1, [pc, #144]	; (134bc <__ieee754_powf+0x734>)
   1342a:	1c07      	adds	r7, r0, #0
   1342c:	1c30      	adds	r0, r6, #0
   1342e:	f7ed fda1 	bl	f74 <__aeabi_fmul>
   13432:	1c31      	adds	r1, r6, #0
   13434:	1c05      	adds	r5, r0, #0
   13436:	1c30      	adds	r0, r6, #0
   13438:	f7ed fd9c 	bl	f74 <__aeabi_fmul>
   1343c:	21fa      	movs	r1, #250	; 0xfa
   1343e:	4681      	mov	r9, r0
   13440:	0589      	lsls	r1, r1, #22
   13442:	1c30      	adds	r0, r6, #0
   13444:	f7ed fd96 	bl	f74 <__aeabi_fmul>
   13448:	1c01      	adds	r1, r0, #0
   1344a:	481d      	ldr	r0, [pc, #116]	; (134c0 <__ieee754_powf+0x738>)
   1344c:	f7ed fec4 	bl	11d8 <__aeabi_fsub>
   13450:	1c31      	adds	r1, r6, #0
   13452:	f7ed fd8f 	bl	f74 <__aeabi_fmul>
   13456:	1c01      	adds	r1, r0, #0
   13458:	20fc      	movs	r0, #252	; 0xfc
   1345a:	0580      	lsls	r0, r0, #22
   1345c:	f7ed febc 	bl	11d8 <__aeabi_fsub>
   13460:	1c01      	adds	r1, r0, #0
   13462:	4648      	mov	r0, r9
   13464:	f7ed fd86 	bl	f74 <__aeabi_fmul>
   13468:	4916      	ldr	r1, [pc, #88]	; (134c4 <__ieee754_powf+0x73c>)
   1346a:	f7ed fd83 	bl	f74 <__aeabi_fmul>
   1346e:	1c01      	adds	r1, r0, #0
   13470:	1c28      	adds	r0, r5, #0
   13472:	f7ed feb1 	bl	11d8 <__aeabi_fsub>
   13476:	1c05      	adds	r5, r0, #0
   13478:	1c29      	adds	r1, r5, #0
   1347a:	1c38      	adds	r0, r7, #0
   1347c:	f7ed fa0c 	bl	898 <__aeabi_fadd>
   13480:	0b06      	lsrs	r6, r0, #12
   13482:	0336      	lsls	r6, r6, #12
   13484:	1c39      	adds	r1, r7, #0
   13486:	1c30      	adds	r0, r6, #0
   13488:	f7ed fea6 	bl	11d8 <__aeabi_fsub>
   1348c:	1c01      	adds	r1, r0, #0
   1348e:	1c28      	adds	r0, r5, #0
   13490:	f7ed fea2 	bl	11d8 <__aeabi_fsub>
   13494:	4680      	mov	r8, r0
   13496:	e676      	b.n	13186 <__ieee754_powf+0x3fe>
   13498:	2380      	movs	r3, #128	; 0x80
   1349a:	039b      	lsls	r3, r3, #14
   1349c:	9304      	str	r3, [sp, #16]
   1349e:	2301      	movs	r3, #1
   134a0:	e585      	b.n	12fae <__ieee754_powf+0x226>
   134a2:	4649      	mov	r1, r9
   134a4:	f000 fff8 	bl	14498 <scalbnf>
   134a8:	1c01      	adds	r1, r0, #0
   134aa:	e71b      	b.n	132e4 <__ieee754_powf+0x55c>
   134ac:	007fffff 	.word	0x007fffff
   134b0:	43160000 	.word	0x43160000
   134b4:	0da24260 	.word	0x0da24260
   134b8:	3fb8aa00 	.word	0x3fb8aa00
   134bc:	36eca570 	.word	0x36eca570
   134c0:	3eaaaaab 	.word	0x3eaaaaab
   134c4:	3fb8aa3b 	.word	0x3fb8aa3b

000134c8 <__ieee754_rem_pio2f>:
__ieee754_rem_pio2f():
   134c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   134ca:	465f      	mov	r7, fp
   134cc:	4656      	mov	r6, sl
   134ce:	4644      	mov	r4, r8
   134d0:	464d      	mov	r5, r9
   134d2:	b4f0      	push	{r4, r5, r6, r7}
   134d4:	0042      	lsls	r2, r0, #1
   134d6:	0857      	lsrs	r7, r2, #1
   134d8:	4ab2      	ldr	r2, [pc, #712]	; (137a4 <__ieee754_rem_pio2f+0x2dc>)
   134da:	b089      	sub	sp, #36	; 0x24
   134dc:	1c03      	adds	r3, r0, #0
   134de:	1c0c      	adds	r4, r1, #0
   134e0:	1c06      	adds	r6, r0, #0
   134e2:	4297      	cmp	r7, r2
   134e4:	dd6f      	ble.n	135c6 <__ieee754_rem_pio2f+0xfe>
   134e6:	4ab0      	ldr	r2, [pc, #704]	; (137a8 <__ieee754_rem_pio2f+0x2e0>)
   134e8:	4297      	cmp	r7, r2
   134ea:	dc1b      	bgt.n	13524 <__ieee754_rem_pio2f+0x5c>
   134ec:	49af      	ldr	r1, [pc, #700]	; (137ac <__ieee754_rem_pio2f+0x2e4>)
   134ee:	2b00      	cmp	r3, #0
   134f0:	dc00      	bgt.n	134f4 <__ieee754_rem_pio2f+0x2c>
   134f2:	e10b      	b.n	1370c <__ieee754_rem_pio2f+0x244>
   134f4:	f7ed fe70 	bl	11d8 <__aeabi_fsub>
   134f8:	230f      	movs	r3, #15
   134fa:	1c3a      	adds	r2, r7, #0
   134fc:	439a      	bics	r2, r3
   134fe:	4bac      	ldr	r3, [pc, #688]	; (137b0 <__ieee754_rem_pio2f+0x2e8>)
   13500:	1c05      	adds	r5, r0, #0
   13502:	429a      	cmp	r2, r3
   13504:	d100      	bne.n	13508 <__ieee754_rem_pio2f+0x40>
   13506:	e070      	b.n	135ea <__ieee754_rem_pio2f+0x122>
   13508:	49aa      	ldr	r1, [pc, #680]	; (137b4 <__ieee754_rem_pio2f+0x2ec>)
   1350a:	f7ed fe65 	bl	11d8 <__aeabi_fsub>
   1350e:	1c01      	adds	r1, r0, #0
   13510:	6020      	str	r0, [r4, #0]
   13512:	1c28      	adds	r0, r5, #0
   13514:	f7ed fe60 	bl	11d8 <__aeabi_fsub>
   13518:	49a6      	ldr	r1, [pc, #664]	; (137b4 <__ieee754_rem_pio2f+0x2ec>)
   1351a:	f7ed fe5d 	bl	11d8 <__aeabi_fsub>
   1351e:	6060      	str	r0, [r4, #4]
   13520:	2001      	movs	r0, #1
   13522:	e054      	b.n	135ce <__ieee754_rem_pio2f+0x106>
   13524:	4aa4      	ldr	r2, [pc, #656]	; (137b8 <__ieee754_rem_pio2f+0x2f0>)
   13526:	4297      	cmp	r7, r2
   13528:	dc00      	bgt.n	1352c <__ieee754_rem_pio2f+0x64>
   1352a:	e070      	b.n	1360e <__ieee754_rem_pio2f+0x146>
   1352c:	4aa3      	ldr	r2, [pc, #652]	; (137bc <__ieee754_rem_pio2f+0x2f4>)
   1352e:	4297      	cmp	r7, r2
   13530:	dc54      	bgt.n	135dc <__ieee754_rem_pio2f+0x114>
   13532:	2286      	movs	r2, #134	; 0x86
   13534:	4252      	negs	r2, r2
   13536:	4691      	mov	r9, r2
   13538:	15fb      	asrs	r3, r7, #23
   1353a:	4499      	add	r9, r3
   1353c:	464b      	mov	r3, r9
   1353e:	05dd      	lsls	r5, r3, #23
   13540:	1b7d      	subs	r5, r7, r5
   13542:	1c28      	adds	r0, r5, #0
   13544:	f7ed ffc6 	bl	14d4 <__aeabi_f2iz>
   13548:	f7ed ffe4 	bl	1514 <__aeabi_i2f>
   1354c:	1c01      	adds	r1, r0, #0
   1354e:	9005      	str	r0, [sp, #20]
   13550:	1c28      	adds	r0, r5, #0
   13552:	f7ed fe41 	bl	11d8 <__aeabi_fsub>
   13556:	2187      	movs	r1, #135	; 0x87
   13558:	05c9      	lsls	r1, r1, #23
   1355a:	f7ed fd0b 	bl	f74 <__aeabi_fmul>
   1355e:	4680      	mov	r8, r0
   13560:	f7ed ffb8 	bl	14d4 <__aeabi_f2iz>
   13564:	f7ed ffd6 	bl	1514 <__aeabi_i2f>
   13568:	1c05      	adds	r5, r0, #0
   1356a:	9006      	str	r0, [sp, #24]
   1356c:	1c29      	adds	r1, r5, #0
   1356e:	4640      	mov	r0, r8
   13570:	f7ed fe32 	bl	11d8 <__aeabi_fsub>
   13574:	2187      	movs	r1, #135	; 0x87
   13576:	05c9      	lsls	r1, r1, #23
   13578:	f7ed fcfc 	bl	f74 <__aeabi_fmul>
   1357c:	2100      	movs	r1, #0
   1357e:	9007      	str	r0, [sp, #28]
   13580:	f7ed f95c 	bl	83c <__aeabi_fcmpeq>
   13584:	2800      	cmp	r0, #0
   13586:	d100      	bne.n	1358a <__ieee754_rem_pio2f+0xc2>
   13588:	e0d8      	b.n	1373c <__ieee754_rem_pio2f+0x274>
   1358a:	1c28      	adds	r0, r5, #0
   1358c:	2100      	movs	r1, #0
   1358e:	f7ed f955 	bl	83c <__aeabi_fcmpeq>
   13592:	2202      	movs	r2, #2
   13594:	1e43      	subs	r3, r0, #1
   13596:	4198      	sbcs	r0, r3
   13598:	1a13      	subs	r3, r2, r0
   1359a:	2202      	movs	r2, #2
   1359c:	9200      	str	r2, [sp, #0]
   1359e:	4a88      	ldr	r2, [pc, #544]	; (137c0 <__ieee754_rem_pio2f+0x2f8>)
   135a0:	a805      	add	r0, sp, #20
   135a2:	9201      	str	r2, [sp, #4]
   135a4:	1c21      	adds	r1, r4, #0
   135a6:	464a      	mov	r2, r9
   135a8:	f000 fa3e 	bl	13a28 <__kernel_rem_pio2f>
   135ac:	2e00      	cmp	r6, #0
   135ae:	da0e      	bge.n	135ce <__ieee754_rem_pio2f+0x106>
   135b0:	2280      	movs	r2, #128	; 0x80
   135b2:	0612      	lsls	r2, r2, #24
   135b4:	4694      	mov	ip, r2
   135b6:	6823      	ldr	r3, [r4, #0]
   135b8:	4240      	negs	r0, r0
   135ba:	4463      	add	r3, ip
   135bc:	6023      	str	r3, [r4, #0]
   135be:	6863      	ldr	r3, [r4, #4]
   135c0:	4463      	add	r3, ip
   135c2:	6063      	str	r3, [r4, #4]
   135c4:	e003      	b.n	135ce <__ieee754_rem_pio2f+0x106>
   135c6:	2300      	movs	r3, #0
   135c8:	6020      	str	r0, [r4, #0]
   135ca:	2000      	movs	r0, #0
   135cc:	604b      	str	r3, [r1, #4]
   135ce:	b009      	add	sp, #36	; 0x24
   135d0:	bc3c      	pop	{r2, r3, r4, r5}
   135d2:	4690      	mov	r8, r2
   135d4:	4699      	mov	r9, r3
   135d6:	46a2      	mov	sl, r4
   135d8:	46ab      	mov	fp, r5
   135da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   135dc:	1c19      	adds	r1, r3, #0
   135de:	f7ed fdfb 	bl	11d8 <__aeabi_fsub>
   135e2:	6060      	str	r0, [r4, #4]
   135e4:	6020      	str	r0, [r4, #0]
   135e6:	2000      	movs	r0, #0
   135e8:	e7f1      	b.n	135ce <__ieee754_rem_pio2f+0x106>
   135ea:	4976      	ldr	r1, [pc, #472]	; (137c4 <__ieee754_rem_pio2f+0x2fc>)
   135ec:	f7ed fdf4 	bl	11d8 <__aeabi_fsub>
   135f0:	4975      	ldr	r1, [pc, #468]	; (137c8 <__ieee754_rem_pio2f+0x300>)
   135f2:	1c05      	adds	r5, r0, #0
   135f4:	f7ed fdf0 	bl	11d8 <__aeabi_fsub>
   135f8:	1c01      	adds	r1, r0, #0
   135fa:	6020      	str	r0, [r4, #0]
   135fc:	1c28      	adds	r0, r5, #0
   135fe:	f7ed fdeb 	bl	11d8 <__aeabi_fsub>
   13602:	4971      	ldr	r1, [pc, #452]	; (137c8 <__ieee754_rem_pio2f+0x300>)
   13604:	f7ed fde8 	bl	11d8 <__aeabi_fsub>
   13608:	6060      	str	r0, [r4, #4]
   1360a:	2001      	movs	r0, #1
   1360c:	e7df      	b.n	135ce <__ieee754_rem_pio2f+0x106>
   1360e:	f000 fec3 	bl	14398 <fabsf>
   13612:	496e      	ldr	r1, [pc, #440]	; (137cc <__ieee754_rem_pio2f+0x304>)
   13614:	4680      	mov	r8, r0
   13616:	f7ed fcad 	bl	f74 <__aeabi_fmul>
   1361a:	21fc      	movs	r1, #252	; 0xfc
   1361c:	0589      	lsls	r1, r1, #22
   1361e:	f7ed f93b 	bl	898 <__aeabi_fadd>
   13622:	f7ed ff57 	bl	14d4 <__aeabi_f2iz>
   13626:	1c05      	adds	r5, r0, #0
   13628:	f7ed ff74 	bl	1514 <__aeabi_i2f>
   1362c:	495f      	ldr	r1, [pc, #380]	; (137ac <__ieee754_rem_pio2f+0x2e4>)
   1362e:	4681      	mov	r9, r0
   13630:	f7ed fca0 	bl	f74 <__aeabi_fmul>
   13634:	1c01      	adds	r1, r0, #0
   13636:	4640      	mov	r0, r8
   13638:	f7ed fdce 	bl	11d8 <__aeabi_fsub>
   1363c:	495d      	ldr	r1, [pc, #372]	; (137b4 <__ieee754_rem_pio2f+0x2ec>)
   1363e:	4680      	mov	r8, r0
   13640:	4648      	mov	r0, r9
   13642:	f7ed fc97 	bl	f74 <__aeabi_fmul>
   13646:	4682      	mov	sl, r0
   13648:	4640      	mov	r0, r8
   1364a:	2d1f      	cmp	r5, #31
   1364c:	dc25      	bgt.n	1369a <__ieee754_rem_pio2f+0x1d2>
   1364e:	23ff      	movs	r3, #255	; 0xff
   13650:	1c3a      	adds	r2, r7, #0
   13652:	495f      	ldr	r1, [pc, #380]	; (137d0 <__ieee754_rem_pio2f+0x308>)
   13654:	439a      	bics	r2, r3
   13656:	1e6b      	subs	r3, r5, #1
   13658:	009b      	lsls	r3, r3, #2
   1365a:	585b      	ldr	r3, [r3, r1]
   1365c:	429a      	cmp	r2, r3
   1365e:	d01c      	beq.n	1369a <__ieee754_rem_pio2f+0x1d2>
   13660:	4651      	mov	r1, sl
   13662:	f7ed fdb9 	bl	11d8 <__aeabi_fsub>
   13666:	4683      	mov	fp, r0
   13668:	465b      	mov	r3, fp
   1366a:	6023      	str	r3, [r4, #0]
   1366c:	4659      	mov	r1, fp
   1366e:	4640      	mov	r0, r8
   13670:	f7ed fdb2 	bl	11d8 <__aeabi_fsub>
   13674:	4651      	mov	r1, sl
   13676:	f7ed fdaf 	bl	11d8 <__aeabi_fsub>
   1367a:	1c03      	adds	r3, r0, #0
   1367c:	6060      	str	r0, [r4, #4]
   1367e:	1c28      	adds	r0, r5, #0
   13680:	2e00      	cmp	r6, #0
   13682:	daa4      	bge.n	135ce <__ieee754_rem_pio2f+0x106>
   13684:	2280      	movs	r2, #128	; 0x80
   13686:	0612      	lsls	r2, r2, #24
   13688:	445a      	add	r2, fp
   1368a:	6022      	str	r2, [r4, #0]
   1368c:	2280      	movs	r2, #128	; 0x80
   1368e:	0612      	lsls	r2, r2, #24
   13690:	4694      	mov	ip, r2
   13692:	4463      	add	r3, ip
   13694:	6063      	str	r3, [r4, #4]
   13696:	4268      	negs	r0, r5
   13698:	e799      	b.n	135ce <__ieee754_rem_pio2f+0x106>
   1369a:	4651      	mov	r1, sl
   1369c:	f7ed fd9c 	bl	11d8 <__aeabi_fsub>
   136a0:	15fb      	asrs	r3, r7, #23
   136a2:	21ff      	movs	r1, #255	; 0xff
   136a4:	1c1a      	adds	r2, r3, #0
   136a6:	9302      	str	r3, [sp, #8]
   136a8:	0dc3      	lsrs	r3, r0, #23
   136aa:	400b      	ands	r3, r1
   136ac:	4683      	mov	fp, r0
   136ae:	1ad3      	subs	r3, r2, r3
   136b0:	2b08      	cmp	r3, #8
   136b2:	ddd9      	ble.n	13668 <__ieee754_rem_pio2f+0x1a0>
   136b4:	4943      	ldr	r1, [pc, #268]	; (137c4 <__ieee754_rem_pio2f+0x2fc>)
   136b6:	4648      	mov	r0, r9
   136b8:	f7ed fc5c 	bl	f74 <__aeabi_fmul>
   136bc:	1c07      	adds	r7, r0, #0
   136be:	1c39      	adds	r1, r7, #0
   136c0:	4640      	mov	r0, r8
   136c2:	f7ed fd89 	bl	11d8 <__aeabi_fsub>
   136c6:	1c03      	adds	r3, r0, #0
   136c8:	1c19      	adds	r1, r3, #0
   136ca:	9003      	str	r0, [sp, #12]
   136cc:	4640      	mov	r0, r8
   136ce:	4698      	mov	r8, r3
   136d0:	f7ed fd82 	bl	11d8 <__aeabi_fsub>
   136d4:	1c39      	adds	r1, r7, #0
   136d6:	f7ed fd7f 	bl	11d8 <__aeabi_fsub>
   136da:	493b      	ldr	r1, [pc, #236]	; (137c8 <__ieee754_rem_pio2f+0x300>)
   136dc:	1c07      	adds	r7, r0, #0
   136de:	4648      	mov	r0, r9
   136e0:	f7ed fc48 	bl	f74 <__aeabi_fmul>
   136e4:	1c39      	adds	r1, r7, #0
   136e6:	f7ed fd77 	bl	11d8 <__aeabi_fsub>
   136ea:	4682      	mov	sl, r0
   136ec:	4640      	mov	r0, r8
   136ee:	4651      	mov	r1, sl
   136f0:	f7ed fd72 	bl	11d8 <__aeabi_fsub>
   136f4:	22ff      	movs	r2, #255	; 0xff
   136f6:	0dc3      	lsrs	r3, r0, #23
   136f8:	4013      	ands	r3, r2
   136fa:	9a02      	ldr	r2, [sp, #8]
   136fc:	4683      	mov	fp, r0
   136fe:	1ad3      	subs	r3, r2, r3
   13700:	2b19      	cmp	r3, #25
   13702:	dc30      	bgt.n	13766 <__ieee754_rem_pio2f+0x29e>
   13704:	9b03      	ldr	r3, [sp, #12]
   13706:	6020      	str	r0, [r4, #0]
   13708:	4698      	mov	r8, r3
   1370a:	e7af      	b.n	1366c <__ieee754_rem_pio2f+0x1a4>
   1370c:	f7ed f8c4 	bl	898 <__aeabi_fadd>
   13710:	230f      	movs	r3, #15
   13712:	1c3a      	adds	r2, r7, #0
   13714:	439a      	bics	r2, r3
   13716:	4b26      	ldr	r3, [pc, #152]	; (137b0 <__ieee754_rem_pio2f+0x2e8>)
   13718:	1c05      	adds	r5, r0, #0
   1371a:	429a      	cmp	r2, r3
   1371c:	d010      	beq.n	13740 <__ieee754_rem_pio2f+0x278>
   1371e:	4925      	ldr	r1, [pc, #148]	; (137b4 <__ieee754_rem_pio2f+0x2ec>)
   13720:	f7ed f8ba 	bl	898 <__aeabi_fadd>
   13724:	1c01      	adds	r1, r0, #0
   13726:	6020      	str	r0, [r4, #0]
   13728:	1c28      	adds	r0, r5, #0
   1372a:	f7ed fd55 	bl	11d8 <__aeabi_fsub>
   1372e:	4921      	ldr	r1, [pc, #132]	; (137b4 <__ieee754_rem_pio2f+0x2ec>)
   13730:	f7ed f8b2 	bl	898 <__aeabi_fadd>
   13734:	6060      	str	r0, [r4, #4]
   13736:	2001      	movs	r0, #1
   13738:	4240      	negs	r0, r0
   1373a:	e748      	b.n	135ce <__ieee754_rem_pio2f+0x106>
   1373c:	2303      	movs	r3, #3
   1373e:	e72c      	b.n	1359a <__ieee754_rem_pio2f+0xd2>
   13740:	4920      	ldr	r1, [pc, #128]	; (137c4 <__ieee754_rem_pio2f+0x2fc>)
   13742:	f7ed f8a9 	bl	898 <__aeabi_fadd>
   13746:	4920      	ldr	r1, [pc, #128]	; (137c8 <__ieee754_rem_pio2f+0x300>)
   13748:	1c05      	adds	r5, r0, #0
   1374a:	f7ed f8a5 	bl	898 <__aeabi_fadd>
   1374e:	1c01      	adds	r1, r0, #0
   13750:	6020      	str	r0, [r4, #0]
   13752:	1c28      	adds	r0, r5, #0
   13754:	f7ed fd40 	bl	11d8 <__aeabi_fsub>
   13758:	491b      	ldr	r1, [pc, #108]	; (137c8 <__ieee754_rem_pio2f+0x300>)
   1375a:	f7ed f89d 	bl	898 <__aeabi_fadd>
   1375e:	6060      	str	r0, [r4, #4]
   13760:	2001      	movs	r0, #1
   13762:	4240      	negs	r0, r0
   13764:	e733      	b.n	135ce <__ieee754_rem_pio2f+0x106>
   13766:	491b      	ldr	r1, [pc, #108]	; (137d4 <__ieee754_rem_pio2f+0x30c>)
   13768:	4648      	mov	r0, r9
   1376a:	f7ed fc03 	bl	f74 <__aeabi_fmul>
   1376e:	9b03      	ldr	r3, [sp, #12]
   13770:	1c07      	adds	r7, r0, #0
   13772:	1c39      	adds	r1, r7, #0
   13774:	1c18      	adds	r0, r3, #0
   13776:	469a      	mov	sl, r3
   13778:	f7ed fd2e 	bl	11d8 <__aeabi_fsub>
   1377c:	4680      	mov	r8, r0
   1377e:	4650      	mov	r0, sl
   13780:	4641      	mov	r1, r8
   13782:	f7ed fd29 	bl	11d8 <__aeabi_fsub>
   13786:	1c39      	adds	r1, r7, #0
   13788:	f7ed fd26 	bl	11d8 <__aeabi_fsub>
   1378c:	4912      	ldr	r1, [pc, #72]	; (137d8 <__ieee754_rem_pio2f+0x310>)
   1378e:	1c07      	adds	r7, r0, #0
   13790:	4648      	mov	r0, r9
   13792:	f7ed fbef 	bl	f74 <__aeabi_fmul>
   13796:	1c39      	adds	r1, r7, #0
   13798:	f7ed fd1e 	bl	11d8 <__aeabi_fsub>
   1379c:	4682      	mov	sl, r0
   1379e:	4640      	mov	r0, r8
   137a0:	e75e      	b.n	13660 <__ieee754_rem_pio2f+0x198>
   137a2:	46c0      	nop			; (mov r8, r8)
   137a4:	3f490fd8 	.word	0x3f490fd8
   137a8:	4016cbe3 	.word	0x4016cbe3
   137ac:	3fc90f80 	.word	0x3fc90f80
   137b0:	3fc90fd0 	.word	0x3fc90fd0
   137b4:	37354443 	.word	0x37354443
   137b8:	43490f80 	.word	0x43490f80
   137bc:	7f7fffff 	.word	0x7f7fffff
   137c0:	000149a8 	.word	0x000149a8
   137c4:	37354400 	.word	0x37354400
   137c8:	2e85a308 	.word	0x2e85a308
   137cc:	3f22f984 	.word	0x3f22f984
   137d0:	00014928 	.word	0x00014928
   137d4:	2e85a300 	.word	0x2e85a300
   137d8:	248d3132 	.word	0x248d3132

000137dc <__ieee754_sqrtf>:
__ieee754_sqrtf():
   137dc:	492b      	ldr	r1, [pc, #172]	; (1388c <__ieee754_sqrtf+0xb0>)
   137de:	0042      	lsls	r2, r0, #1
   137e0:	b570      	push	{r4, r5, r6, lr}
   137e2:	1c03      	adds	r3, r0, #0
   137e4:	1c04      	adds	r4, r0, #0
   137e6:	0852      	lsrs	r2, r2, #1
   137e8:	428a      	cmp	r2, r1
   137ea:	d83b      	bhi.n	13864 <__ieee754_sqrtf+0x88>
   137ec:	1c01      	adds	r1, r0, #0
   137ee:	2a00      	cmp	r2, #0
   137f0:	d036      	beq.n	13860 <__ieee754_sqrtf+0x84>
   137f2:	2800      	cmp	r0, #0
   137f4:	db40      	blt.n	13878 <__ieee754_sqrtf+0x9c>
   137f6:	15c1      	asrs	r1, r0, #23
   137f8:	4825      	ldr	r0, [pc, #148]	; (13890 <__ieee754_sqrtf+0xb4>)
   137fa:	4282      	cmp	r2, r0
   137fc:	d80a      	bhi.n	13814 <__ieee754_sqrtf+0x38>
   137fe:	3001      	adds	r0, #1
   13800:	4220      	tst	r0, r4
   13802:	d140      	bne.n	13886 <__ieee754_sqrtf+0xaa>
   13804:	2200      	movs	r2, #0
   13806:	005b      	lsls	r3, r3, #1
   13808:	3201      	adds	r2, #1
   1380a:	4203      	tst	r3, r0
   1380c:	d0fb      	beq.n	13806 <__ieee754_sqrtf+0x2a>
   1380e:	2001      	movs	r0, #1
   13810:	1a82      	subs	r2, r0, r2
   13812:	1889      	adds	r1, r1, r2
   13814:	2280      	movs	r2, #128	; 0x80
   13816:	025b      	lsls	r3, r3, #9
   13818:	0a5b      	lsrs	r3, r3, #9
   1381a:	0412      	lsls	r2, r2, #16
   1381c:	397f      	subs	r1, #127	; 0x7f
   1381e:	4313      	orrs	r3, r2
   13820:	07ca      	lsls	r2, r1, #31
   13822:	d427      	bmi.n	13874 <__ieee754_sqrtf+0x98>
   13824:	2280      	movs	r2, #128	; 0x80
   13826:	2019      	movs	r0, #25
   13828:	2500      	movs	r5, #0
   1382a:	2600      	movs	r6, #0
   1382c:	1049      	asrs	r1, r1, #1
   1382e:	005b      	lsls	r3, r3, #1
   13830:	0452      	lsls	r2, r2, #17
   13832:	18b4      	adds	r4, r6, r2
   13834:	429c      	cmp	r4, r3
   13836:	dc02      	bgt.n	1383e <__ieee754_sqrtf+0x62>
   13838:	18a6      	adds	r6, r4, r2
   1383a:	1b1b      	subs	r3, r3, r4
   1383c:	18ad      	adds	r5, r5, r2
   1383e:	3801      	subs	r0, #1
   13840:	005b      	lsls	r3, r3, #1
   13842:	0852      	lsrs	r2, r2, #1
   13844:	2800      	cmp	r0, #0
   13846:	d1f4      	bne.n	13832 <__ieee754_sqrtf+0x56>
   13848:	2b00      	cmp	r3, #0
   1384a:	d002      	beq.n	13852 <__ieee754_sqrtf+0x76>
   1384c:	2301      	movs	r3, #1
   1384e:	402b      	ands	r3, r5
   13850:	195d      	adds	r5, r3, r5
   13852:	23fc      	movs	r3, #252	; 0xfc
   13854:	059b      	lsls	r3, r3, #22
   13856:	469c      	mov	ip, r3
   13858:	106d      	asrs	r5, r5, #1
   1385a:	4465      	add	r5, ip
   1385c:	05c9      	lsls	r1, r1, #23
   1385e:	1949      	adds	r1, r1, r5
   13860:	1c08      	adds	r0, r1, #0
   13862:	bd70      	pop	{r4, r5, r6, pc}
   13864:	1c21      	adds	r1, r4, #0
   13866:	f7ed fb85 	bl	f74 <__aeabi_fmul>
   1386a:	1c21      	adds	r1, r4, #0
   1386c:	f7ed f814 	bl	898 <__aeabi_fadd>
   13870:	1c01      	adds	r1, r0, #0
   13872:	e7f5      	b.n	13860 <__ieee754_sqrtf+0x84>
   13874:	005b      	lsls	r3, r3, #1
   13876:	e7d5      	b.n	13824 <__ieee754_sqrtf+0x48>
   13878:	f7ed fcae 	bl	11d8 <__aeabi_fsub>
   1387c:	1c01      	adds	r1, r0, #0
   1387e:	f7ed f987 	bl	b90 <__aeabi_fdiv>
   13882:	1c01      	adds	r1, r0, #0
   13884:	e7ec      	b.n	13860 <__ieee754_sqrtf+0x84>
   13886:	2201      	movs	r2, #1
   13888:	1889      	adds	r1, r1, r2
   1388a:	e7c3      	b.n	13814 <__ieee754_sqrtf+0x38>
   1388c:	7f7fffff 	.word	0x7f7fffff
   13890:	007fffff 	.word	0x007fffff

00013894 <__kernel_cosf>:
__kernel_cosf():
   13894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13896:	464f      	mov	r7, r9
   13898:	4646      	mov	r6, r8
   1389a:	4b58      	ldr	r3, [pc, #352]	; (139fc <__kernel_cosf+0x168>)
   1389c:	0045      	lsls	r5, r0, #1
   1389e:	b4c0      	push	{r6, r7}
   138a0:	086d      	lsrs	r5, r5, #1
   138a2:	1c06      	adds	r6, r0, #0
   138a4:	1c0f      	adds	r7, r1, #0
   138a6:	429d      	cmp	r5, r3
   138a8:	dc48      	bgt.n	1393c <__kernel_cosf+0xa8>
   138aa:	f7ed fe13 	bl	14d4 <__aeabi_f2iz>
   138ae:	2800      	cmp	r0, #0
   138b0:	d100      	bne.n	138b4 <__kernel_cosf+0x20>
   138b2:	e09f      	b.n	139f4 <__kernel_cosf+0x160>
   138b4:	1c31      	adds	r1, r6, #0
   138b6:	1c30      	adds	r0, r6, #0
   138b8:	f7ed fb5c 	bl	f74 <__aeabi_fmul>
   138bc:	4950      	ldr	r1, [pc, #320]	; (13a00 <__kernel_cosf+0x16c>)
   138be:	1c04      	adds	r4, r0, #0
   138c0:	f7ed fb58 	bl	f74 <__aeabi_fmul>
   138c4:	494f      	ldr	r1, [pc, #316]	; (13a04 <__kernel_cosf+0x170>)
   138c6:	f7ec ffe7 	bl	898 <__aeabi_fadd>
   138ca:	1c21      	adds	r1, r4, #0
   138cc:	f7ed fb52 	bl	f74 <__aeabi_fmul>
   138d0:	494d      	ldr	r1, [pc, #308]	; (13a08 <__kernel_cosf+0x174>)
   138d2:	f7ed fc81 	bl	11d8 <__aeabi_fsub>
   138d6:	1c21      	adds	r1, r4, #0
   138d8:	f7ed fb4c 	bl	f74 <__aeabi_fmul>
   138dc:	494b      	ldr	r1, [pc, #300]	; (13a0c <__kernel_cosf+0x178>)
   138de:	f7ec ffdb 	bl	898 <__aeabi_fadd>
   138e2:	1c21      	adds	r1, r4, #0
   138e4:	f7ed fb46 	bl	f74 <__aeabi_fmul>
   138e8:	4949      	ldr	r1, [pc, #292]	; (13a10 <__kernel_cosf+0x17c>)
   138ea:	f7ed fc75 	bl	11d8 <__aeabi_fsub>
   138ee:	1c21      	adds	r1, r4, #0
   138f0:	f7ed fb40 	bl	f74 <__aeabi_fmul>
   138f4:	4947      	ldr	r1, [pc, #284]	; (13a14 <__kernel_cosf+0x180>)
   138f6:	f7ec ffcf 	bl	898 <__aeabi_fadd>
   138fa:	1c21      	adds	r1, r4, #0
   138fc:	f7ed fb3a 	bl	f74 <__aeabi_fmul>
   13900:	4680      	mov	r8, r0
   13902:	21fc      	movs	r1, #252	; 0xfc
   13904:	1c20      	adds	r0, r4, #0
   13906:	0589      	lsls	r1, r1, #22
   13908:	f7ed fb34 	bl	f74 <__aeabi_fmul>
   1390c:	4641      	mov	r1, r8
   1390e:	1c05      	adds	r5, r0, #0
   13910:	1c20      	adds	r0, r4, #0
   13912:	f7ed fb2f 	bl	f74 <__aeabi_fmul>
   13916:	1c39      	adds	r1, r7, #0
   13918:	1c04      	adds	r4, r0, #0
   1391a:	1c30      	adds	r0, r6, #0
   1391c:	f7ed fb2a 	bl	f74 <__aeabi_fmul>
   13920:	1c01      	adds	r1, r0, #0
   13922:	1c20      	adds	r0, r4, #0
   13924:	f7ed fc58 	bl	11d8 <__aeabi_fsub>
   13928:	1c01      	adds	r1, r0, #0
   1392a:	1c28      	adds	r0, r5, #0
   1392c:	f7ed fc54 	bl	11d8 <__aeabi_fsub>
   13930:	1c01      	adds	r1, r0, #0
   13932:	20fe      	movs	r0, #254	; 0xfe
   13934:	0580      	lsls	r0, r0, #22
   13936:	f7ed fc4f 	bl	11d8 <__aeabi_fsub>
   1393a:	e053      	b.n	139e4 <__kernel_cosf+0x150>
   1393c:	1c31      	adds	r1, r6, #0
   1393e:	f7ed fb19 	bl	f74 <__aeabi_fmul>
   13942:	492f      	ldr	r1, [pc, #188]	; (13a00 <__kernel_cosf+0x16c>)
   13944:	1c04      	adds	r4, r0, #0
   13946:	f7ed fb15 	bl	f74 <__aeabi_fmul>
   1394a:	492e      	ldr	r1, [pc, #184]	; (13a04 <__kernel_cosf+0x170>)
   1394c:	f7ec ffa4 	bl	898 <__aeabi_fadd>
   13950:	1c21      	adds	r1, r4, #0
   13952:	f7ed fb0f 	bl	f74 <__aeabi_fmul>
   13956:	492c      	ldr	r1, [pc, #176]	; (13a08 <__kernel_cosf+0x174>)
   13958:	f7ed fc3e 	bl	11d8 <__aeabi_fsub>
   1395c:	1c21      	adds	r1, r4, #0
   1395e:	f7ed fb09 	bl	f74 <__aeabi_fmul>
   13962:	492a      	ldr	r1, [pc, #168]	; (13a0c <__kernel_cosf+0x178>)
   13964:	f7ec ff98 	bl	898 <__aeabi_fadd>
   13968:	1c21      	adds	r1, r4, #0
   1396a:	f7ed fb03 	bl	f74 <__aeabi_fmul>
   1396e:	4928      	ldr	r1, [pc, #160]	; (13a10 <__kernel_cosf+0x17c>)
   13970:	f7ed fc32 	bl	11d8 <__aeabi_fsub>
   13974:	1c21      	adds	r1, r4, #0
   13976:	f7ed fafd 	bl	f74 <__aeabi_fmul>
   1397a:	4926      	ldr	r1, [pc, #152]	; (13a14 <__kernel_cosf+0x180>)
   1397c:	f7ec ff8c 	bl	898 <__aeabi_fadd>
   13980:	1c21      	adds	r1, r4, #0
   13982:	f7ed faf7 	bl	f74 <__aeabi_fmul>
   13986:	4b24      	ldr	r3, [pc, #144]	; (13a18 <__kernel_cosf+0x184>)
   13988:	4680      	mov	r8, r0
   1398a:	429d      	cmp	r5, r3
   1398c:	ddb9      	ble.n	13902 <__kernel_cosf+0x6e>
   1398e:	4b23      	ldr	r3, [pc, #140]	; (13a1c <__kernel_cosf+0x188>)
   13990:	429d      	cmp	r5, r3
   13992:	dc2b      	bgt.n	139ec <__kernel_cosf+0x158>
   13994:	23ff      	movs	r3, #255	; 0xff
   13996:	061b      	lsls	r3, r3, #24
   13998:	469c      	mov	ip, r3
   1399a:	20fe      	movs	r0, #254	; 0xfe
   1399c:	4465      	add	r5, ip
   1399e:	0580      	lsls	r0, r0, #22
   139a0:	1c29      	adds	r1, r5, #0
   139a2:	f7ed fc19 	bl	11d8 <__aeabi_fsub>
   139a6:	4681      	mov	r9, r0
   139a8:	21fc      	movs	r1, #252	; 0xfc
   139aa:	1c20      	adds	r0, r4, #0
   139ac:	0589      	lsls	r1, r1, #22
   139ae:	f7ed fae1 	bl	f74 <__aeabi_fmul>
   139b2:	1c29      	adds	r1, r5, #0
   139b4:	f7ed fc10 	bl	11d8 <__aeabi_fsub>
   139b8:	4641      	mov	r1, r8
   139ba:	1c05      	adds	r5, r0, #0
   139bc:	1c20      	adds	r0, r4, #0
   139be:	f7ed fad9 	bl	f74 <__aeabi_fmul>
   139c2:	1c39      	adds	r1, r7, #0
   139c4:	1c04      	adds	r4, r0, #0
   139c6:	1c30      	adds	r0, r6, #0
   139c8:	f7ed fad4 	bl	f74 <__aeabi_fmul>
   139cc:	1c01      	adds	r1, r0, #0
   139ce:	1c20      	adds	r0, r4, #0
   139d0:	f7ed fc02 	bl	11d8 <__aeabi_fsub>
   139d4:	1c01      	adds	r1, r0, #0
   139d6:	1c28      	adds	r0, r5, #0
   139d8:	f7ed fbfe 	bl	11d8 <__aeabi_fsub>
   139dc:	1c01      	adds	r1, r0, #0
   139de:	4648      	mov	r0, r9
   139e0:	f7ed fbfa 	bl	11d8 <__aeabi_fsub>
   139e4:	bc0c      	pop	{r2, r3}
   139e6:	4690      	mov	r8, r2
   139e8:	4699      	mov	r9, r3
   139ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   139ec:	4b0c      	ldr	r3, [pc, #48]	; (13a20 <__kernel_cosf+0x18c>)
   139ee:	4d0d      	ldr	r5, [pc, #52]	; (13a24 <__kernel_cosf+0x190>)
   139f0:	4699      	mov	r9, r3
   139f2:	e7d9      	b.n	139a8 <__kernel_cosf+0x114>
   139f4:	20fe      	movs	r0, #254	; 0xfe
   139f6:	0580      	lsls	r0, r0, #22
   139f8:	e7f4      	b.n	139e4 <__kernel_cosf+0x150>
   139fa:	46c0      	nop			; (mov r8, r8)
   139fc:	31ffffff 	.word	0x31ffffff
   13a00:	ad47d74e 	.word	0xad47d74e
   13a04:	310f74f6 	.word	0x310f74f6
   13a08:	3493f27c 	.word	0x3493f27c
   13a0c:	37d00d01 	.word	0x37d00d01
   13a10:	3ab60b61 	.word	0x3ab60b61
   13a14:	3d2aaaab 	.word	0x3d2aaaab
   13a18:	3e999999 	.word	0x3e999999
   13a1c:	3f480000 	.word	0x3f480000
   13a20:	3f380000 	.word	0x3f380000
   13a24:	3e900000 	.word	0x3e900000

00013a28 <__kernel_rem_pio2f>:
__kernel_rem_pio2f():
   13a28:	b5f0      	push	{r4, r5, r6, r7, lr}
   13a2a:	4656      	mov	r6, sl
   13a2c:	4644      	mov	r4, r8
   13a2e:	465f      	mov	r7, fp
   13a30:	464d      	mov	r5, r9
   13a32:	b4f0      	push	{r4, r5, r6, r7}
   13a34:	b0dd      	sub	sp, #372	; 0x174
   13a36:	9001      	str	r0, [sp, #4]
   13a38:	1c18      	adds	r0, r3, #0
   13a3a:	9106      	str	r1, [sp, #24]
   13a3c:	9966      	ldr	r1, [sp, #408]	; 0x198
   13a3e:	9308      	str	r3, [sp, #32]
   13a40:	4bc0      	ldr	r3, [pc, #768]	; (13d44 <__kernel_rem_pio2f+0x31c>)
   13a42:	0089      	lsls	r1, r1, #2
   13a44:	58c9      	ldr	r1, [r1, r3]
   13a46:	1c03      	adds	r3, r0, #0
   13a48:	3b01      	subs	r3, #1
   13a4a:	1c18      	adds	r0, r3, #0
   13a4c:	9300      	str	r3, [sp, #0]
   13a4e:	1ed3      	subs	r3, r2, #3
   13a50:	1c0c      	adds	r4, r1, #0
   13a52:	9105      	str	r1, [sp, #20]
   13a54:	17d9      	asrs	r1, r3, #31
   13a56:	0f49      	lsrs	r1, r1, #29
   13a58:	18cb      	adds	r3, r1, r3
   13a5a:	10db      	asrs	r3, r3, #3
   13a5c:	1c19      	adds	r1, r3, #0
   13a5e:	43db      	mvns	r3, r3
   13a60:	17db      	asrs	r3, r3, #31
   13a62:	4019      	ands	r1, r3
   13a64:	43cb      	mvns	r3, r1
   13a66:	00db      	lsls	r3, r3, #3
   13a68:	189b      	adds	r3, r3, r2
   13a6a:	910a      	str	r1, [sp, #40]	; 0x28
   13a6c:	9304      	str	r3, [sp, #16]
   13a6e:	1a0e      	subs	r6, r1, r0
   13a70:	1907      	adds	r7, r0, r4
   13a72:	d419      	bmi.n	13aa8 <__kernel_rem_pio2f+0x80>
   13a74:	9a67      	ldr	r2, [sp, #412]	; 0x19c
   13a76:	3701      	adds	r7, #1
   13a78:	4690      	mov	r8, r2
   13a7a:	00b3      	lsls	r3, r6, #2
   13a7c:	00bf      	lsls	r7, r7, #2
   13a7e:	4498      	add	r8, r3
   13a80:	2500      	movs	r5, #0
   13a82:	ac20      	add	r4, sp, #128	; 0x80
   13a84:	e008      	b.n	13a98 <__kernel_rem_pio2f+0x70>
   13a86:	4643      	mov	r3, r8
   13a88:	5958      	ldr	r0, [r3, r5]
   13a8a:	f7ed fd43 	bl	1514 <__aeabi_i2f>
   13a8e:	5160      	str	r0, [r4, r5]
   13a90:	3504      	adds	r5, #4
   13a92:	3601      	adds	r6, #1
   13a94:	42bd      	cmp	r5, r7
   13a96:	d007      	beq.n	13aa8 <__kernel_rem_pio2f+0x80>
   13a98:	2e00      	cmp	r6, #0
   13a9a:	daf4      	bge.n	13a86 <__kernel_rem_pio2f+0x5e>
   13a9c:	2000      	movs	r0, #0
   13a9e:	5160      	str	r0, [r4, r5]
   13aa0:	3504      	adds	r5, #4
   13aa2:	3601      	adds	r6, #1
   13aa4:	42bd      	cmp	r5, r7
   13aa6:	d1f7      	bne.n	13a98 <__kernel_rem_pio2f+0x70>
   13aa8:	9b05      	ldr	r3, [sp, #20]
   13aaa:	2b00      	cmp	r3, #0
   13aac:	da00      	bge.n	13ab0 <__kernel_rem_pio2f+0x88>
   13aae:	e33d      	b.n	1412c <__kernel_rem_pio2f+0x704>
   13ab0:	9b05      	ldr	r3, [sp, #20]
   13ab2:	3301      	adds	r3, #1
   13ab4:	009b      	lsls	r3, r3, #2
   13ab6:	4699      	mov	r9, r3
   13ab8:	9b08      	ldr	r3, [sp, #32]
   13aba:	009b      	lsls	r3, r3, #2
   13abc:	469b      	mov	fp, r3
   13abe:	2300      	movs	r3, #0
   13ac0:	4698      	mov	r8, r3
   13ac2:	ab48      	add	r3, sp, #288	; 0x120
   13ac4:	469a      	mov	sl, r3
   13ac6:	465b      	mov	r3, fp
   13ac8:	3b04      	subs	r3, #4
   13aca:	9302      	str	r3, [sp, #8]
   13acc:	9b00      	ldr	r3, [sp, #0]
   13ace:	2b00      	cmp	r3, #0
   13ad0:	da00      	bge.n	13ad4 <__kernel_rem_pio2f+0xac>
   13ad2:	e231      	b.n	13f38 <__kernel_rem_pio2f+0x510>
   13ad4:	9b02      	ldr	r3, [sp, #8]
   13ad6:	2500      	movs	r5, #0
   13ad8:	4443      	add	r3, r8
   13ada:	1c1c      	adds	r4, r3, #0
   13adc:	ab20      	add	r3, sp, #128	; 0x80
   13ade:	469c      	mov	ip, r3
   13ae0:	4643      	mov	r3, r8
   13ae2:	9e01      	ldr	r6, [sp, #4]
   13ae4:	1f1f      	subs	r7, r3, #4
   13ae6:	4464      	add	r4, ip
   13ae8:	4467      	add	r7, ip
   13aea:	6821      	ldr	r1, [r4, #0]
   13aec:	ce01      	ldmia	r6!, {r0}
   13aee:	f7ed fa41 	bl	f74 <__aeabi_fmul>
   13af2:	1c01      	adds	r1, r0, #0
   13af4:	1c28      	adds	r0, r5, #0
   13af6:	f7ec fecf 	bl	898 <__aeabi_fadd>
   13afa:	3c04      	subs	r4, #4
   13afc:	1c05      	adds	r5, r0, #0
   13afe:	42bc      	cmp	r4, r7
   13b00:	d1f3      	bne.n	13aea <__kernel_rem_pio2f+0xc2>
   13b02:	4653      	mov	r3, sl
   13b04:	4642      	mov	r2, r8
   13b06:	509d      	str	r5, [r3, r2]
   13b08:	2304      	movs	r3, #4
   13b0a:	469c      	mov	ip, r3
   13b0c:	44e0      	add	r8, ip
   13b0e:	45c8      	cmp	r8, r9
   13b10:	d1dc      	bne.n	13acc <__kernel_rem_pio2f+0xa4>
   13b12:	4a8d      	ldr	r2, [pc, #564]	; (13d48 <__kernel_rem_pio2f+0x320>)
   13b14:	9d05      	ldr	r5, [sp, #20]
   13b16:	4694      	mov	ip, r2
   13b18:	1c2b      	adds	r3, r5, #0
   13b1a:	4463      	add	r3, ip
   13b1c:	009b      	lsls	r3, r3, #2
   13b1e:	a90c      	add	r1, sp, #48	; 0x30
   13b20:	1c1a      	adds	r2, r3, #0
   13b22:	468c      	mov	ip, r1
   13b24:	46d1      	mov	r9, sl
   13b26:	3304      	adds	r3, #4
   13b28:	4462      	add	r2, ip
   13b2a:	4463      	add	r3, ip
   13b2c:	9209      	str	r2, [sp, #36]	; 0x24
   13b2e:	930b      	str	r3, [sp, #44]	; 0x2c
   13b30:	00ab      	lsls	r3, r5, #2
   13b32:	469a      	mov	sl, r3
   13b34:	464b      	mov	r3, r9
   13b36:	4652      	mov	r2, sl
   13b38:	589e      	ldr	r6, [r3, r2]
   13b3a:	2d00      	cmp	r5, #0
   13b3c:	dd27      	ble.n	13b8e <__kernel_rem_pio2f+0x166>
   13b3e:	ab0c      	add	r3, sp, #48	; 0x30
   13b40:	4698      	mov	r8, r3
   13b42:	4b82      	ldr	r3, [pc, #520]	; (13d4c <__kernel_rem_pio2f+0x324>)
   13b44:	18ec      	adds	r4, r5, r3
   13b46:	4643      	mov	r3, r8
   13b48:	46a8      	mov	r8, r5
   13b4a:	1c1d      	adds	r5, r3, #0
   13b4c:	00a4      	lsls	r4, r4, #2
   13b4e:	444c      	add	r4, r9
   13b50:	21ee      	movs	r1, #238	; 0xee
   13b52:	1c30      	adds	r0, r6, #0
   13b54:	0589      	lsls	r1, r1, #22
   13b56:	f7ed fa0d 	bl	f74 <__aeabi_fmul>
   13b5a:	f7ed fcbb 	bl	14d4 <__aeabi_f2iz>
   13b5e:	f7ed fcd9 	bl	1514 <__aeabi_i2f>
   13b62:	2187      	movs	r1, #135	; 0x87
   13b64:	05c9      	lsls	r1, r1, #23
   13b66:	1c07      	adds	r7, r0, #0
   13b68:	f7ed fa04 	bl	f74 <__aeabi_fmul>
   13b6c:	1c01      	adds	r1, r0, #0
   13b6e:	1c30      	adds	r0, r6, #0
   13b70:	f7ed fb32 	bl	11d8 <__aeabi_fsub>
   13b74:	f7ed fcae 	bl	14d4 <__aeabi_f2iz>
   13b78:	6821      	ldr	r1, [r4, #0]
   13b7a:	c501      	stmia	r5!, {r0}
   13b7c:	1c38      	adds	r0, r7, #0
   13b7e:	f7ec fe8b 	bl	898 <__aeabi_fadd>
   13b82:	3c04      	subs	r4, #4
   13b84:	ab47      	add	r3, sp, #284	; 0x11c
   13b86:	1c06      	adds	r6, r0, #0
   13b88:	429c      	cmp	r4, r3
   13b8a:	d1e1      	bne.n	13b50 <__kernel_rem_pio2f+0x128>
   13b8c:	4645      	mov	r5, r8
   13b8e:	9b04      	ldr	r3, [sp, #16]
   13b90:	1c30      	adds	r0, r6, #0
   13b92:	1c19      	adds	r1, r3, #0
   13b94:	4698      	mov	r8, r3
   13b96:	f000 fc7f 	bl	14498 <scalbnf>
   13b9a:	21f8      	movs	r1, #248	; 0xf8
   13b9c:	0589      	lsls	r1, r1, #22
   13b9e:	1c04      	adds	r4, r0, #0
   13ba0:	f7ed f9e8 	bl	f74 <__aeabi_fmul>
   13ba4:	f000 fc06 	bl	143b4 <floorf>
   13ba8:	2182      	movs	r1, #130	; 0x82
   13baa:	05c9      	lsls	r1, r1, #23
   13bac:	f7ed f9e2 	bl	f74 <__aeabi_fmul>
   13bb0:	1c01      	adds	r1, r0, #0
   13bb2:	1c20      	adds	r0, r4, #0
   13bb4:	f7ed fb10 	bl	11d8 <__aeabi_fsub>
   13bb8:	1c04      	adds	r4, r0, #0
   13bba:	f7ed fc8b 	bl	14d4 <__aeabi_f2iz>
   13bbe:	1c07      	adds	r7, r0, #0
   13bc0:	f7ed fca8 	bl	1514 <__aeabi_i2f>
   13bc4:	1c01      	adds	r1, r0, #0
   13bc6:	1c20      	adds	r0, r4, #0
   13bc8:	f7ed fb06 	bl	11d8 <__aeabi_fsub>
   13bcc:	4644      	mov	r4, r8
   13bce:	1c06      	adds	r6, r0, #0
   13bd0:	2c00      	cmp	r4, #0
   13bd2:	dc00      	bgt.n	13bd6 <__kernel_rem_pio2f+0x1ae>
   13bd4:	e192      	b.n	13efc <__kernel_rem_pio2f+0x4d4>
   13bd6:	2108      	movs	r1, #8
   13bd8:	1e6a      	subs	r2, r5, #1
   13bda:	0092      	lsls	r2, r2, #2
   13bdc:	ab0c      	add	r3, sp, #48	; 0x30
   13bde:	589b      	ldr	r3, [r3, r2]
   13be0:	1b08      	subs	r0, r1, r4
   13be2:	1c19      	adds	r1, r3, #0
   13be4:	4101      	asrs	r1, r0
   13be6:	187f      	adds	r7, r7, r1
   13be8:	4081      	lsls	r1, r0
   13bea:	1a5b      	subs	r3, r3, r1
   13bec:	a90c      	add	r1, sp, #48	; 0x30
   13bee:	508b      	str	r3, [r1, r2]
   13bf0:	2207      	movs	r2, #7
   13bf2:	1b12      	subs	r2, r2, r4
   13bf4:	4113      	asrs	r3, r2
   13bf6:	9302      	str	r3, [sp, #8]
   13bf8:	9b02      	ldr	r3, [sp, #8]
   13bfa:	2b00      	cmp	r3, #0
   13bfc:	dd34      	ble.n	13c68 <__kernel_rem_pio2f+0x240>
   13bfe:	3701      	adds	r7, #1
   13c00:	2d00      	cmp	r5, #0
   13c02:	dc00      	bgt.n	13c06 <__kernel_rem_pio2f+0x1de>
   13c04:	e290      	b.n	14128 <__kernel_rem_pio2f+0x700>
   13c06:	2280      	movs	r2, #128	; 0x80
   13c08:	0052      	lsls	r2, r2, #1
   13c0a:	ab0c      	add	r3, sp, #48	; 0x30
   13c0c:	2100      	movs	r1, #0
   13c0e:	2400      	movs	r4, #0
   13c10:	20ff      	movs	r0, #255	; 0xff
   13c12:	4694      	mov	ip, r2
   13c14:	e009      	b.n	13c2a <__kernel_rem_pio2f+0x202>
   13c16:	2a00      	cmp	r2, #0
   13c18:	d003      	beq.n	13c22 <__kernel_rem_pio2f+0x1fa>
   13c1a:	4664      	mov	r4, ip
   13c1c:	1aa2      	subs	r2, r4, r2
   13c1e:	2401      	movs	r4, #1
   13c20:	601a      	str	r2, [r3, #0]
   13c22:	3101      	adds	r1, #1
   13c24:	3304      	adds	r3, #4
   13c26:	428d      	cmp	r5, r1
   13c28:	dd09      	ble.n	13c3e <__kernel_rem_pio2f+0x216>
   13c2a:	681a      	ldr	r2, [r3, #0]
   13c2c:	2c00      	cmp	r4, #0
   13c2e:	d0f2      	beq.n	13c16 <__kernel_rem_pio2f+0x1ee>
   13c30:	1a82      	subs	r2, r0, r2
   13c32:	3101      	adds	r1, #1
   13c34:	601a      	str	r2, [r3, #0]
   13c36:	2401      	movs	r4, #1
   13c38:	3304      	adds	r3, #4
   13c3a:	428d      	cmp	r5, r1
   13c3c:	dcf5      	bgt.n	13c2a <__kernel_rem_pio2f+0x202>
   13c3e:	9b04      	ldr	r3, [sp, #16]
   13c40:	2b00      	cmp	r3, #0
   13c42:	dd0e      	ble.n	13c62 <__kernel_rem_pio2f+0x23a>
   13c44:	2b01      	cmp	r3, #1
   13c46:	d100      	bne.n	13c4a <__kernel_rem_pio2f+0x222>
   13c48:	e162      	b.n	13f10 <__kernel_rem_pio2f+0x4e8>
   13c4a:	2b02      	cmp	r3, #2
   13c4c:	d109      	bne.n	13c62 <__kernel_rem_pio2f+0x23a>
   13c4e:	1e6b      	subs	r3, r5, #1
   13c50:	009b      	lsls	r3, r3, #2
   13c52:	aa0c      	add	r2, sp, #48	; 0x30
   13c54:	58d2      	ldr	r2, [r2, r3]
   13c56:	9203      	str	r2, [sp, #12]
   13c58:	223f      	movs	r2, #63	; 0x3f
   13c5a:	9903      	ldr	r1, [sp, #12]
   13c5c:	400a      	ands	r2, r1
   13c5e:	a90c      	add	r1, sp, #48	; 0x30
   13c60:	50ca      	str	r2, [r1, r3]
   13c62:	9b02      	ldr	r3, [sp, #8]
   13c64:	2b02      	cmp	r3, #2
   13c66:	d073      	beq.n	13d50 <__kernel_rem_pio2f+0x328>
   13c68:	1c30      	adds	r0, r6, #0
   13c6a:	2100      	movs	r1, #0
   13c6c:	f7ec fde6 	bl	83c <__aeabi_fcmpeq>
   13c70:	2800      	cmp	r0, #0
   13c72:	d100      	bne.n	13c76 <__kernel_rem_pio2f+0x24e>
   13c74:	e086      	b.n	13d84 <__kernel_rem_pio2f+0x35c>
   13c76:	9b05      	ldr	r3, [sp, #20]
   13c78:	1e69      	subs	r1, r5, #1
   13c7a:	428b      	cmp	r3, r1
   13c7c:	dc0f      	bgt.n	13c9e <__kernel_rem_pio2f+0x276>
   13c7e:	aa0c      	add	r2, sp, #48	; 0x30
   13c80:	4694      	mov	ip, r2
   13c82:	2200      	movs	r2, #0
   13c84:	4b31      	ldr	r3, [pc, #196]	; (13d4c <__kernel_rem_pio2f+0x324>)
   13c86:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13c88:	18eb      	adds	r3, r5, r3
   13c8a:	009b      	lsls	r3, r3, #2
   13c8c:	4463      	add	r3, ip
   13c8e:	681c      	ldr	r4, [r3, #0]
   13c90:	3b04      	subs	r3, #4
   13c92:	4322      	orrs	r2, r4
   13c94:	4283      	cmp	r3, r0
   13c96:	d1fa      	bne.n	13c8e <__kernel_rem_pio2f+0x266>
   13c98:	2a00      	cmp	r2, #0
   13c9a:	d000      	beq.n	13c9e <__kernel_rem_pio2f+0x276>
   13c9c:	e1aa      	b.n	13ff4 <__kernel_rem_pio2f+0x5cc>
   13c9e:	9b05      	ldr	r3, [sp, #20]
   13ca0:	aa0c      	add	r2, sp, #48	; 0x30
   13ca2:	3b01      	subs	r3, #1
   13ca4:	009b      	lsls	r3, r3, #2
   13ca6:	58d3      	ldr	r3, [r2, r3]
   13ca8:	2b00      	cmp	r3, #0
   13caa:	d000      	beq.n	13cae <__kernel_rem_pio2f+0x286>
   13cac:	e23a      	b.n	14124 <__kernel_rem_pio2f+0x6fc>
   13cae:	2201      	movs	r2, #1
   13cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13cb2:	3b04      	subs	r3, #4
   13cb4:	6859      	ldr	r1, [r3, #4]
   13cb6:	3201      	adds	r2, #1
   13cb8:	2900      	cmp	r1, #0
   13cba:	d0fa      	beq.n	13cb2 <__kernel_rem_pio2f+0x28a>
   13cbc:	18aa      	adds	r2, r5, r2
   13cbe:	1c6b      	adds	r3, r5, #1
   13cc0:	9207      	str	r2, [sp, #28]
   13cc2:	4293      	cmp	r3, r2
   13cc4:	dc3a      	bgt.n	13d3c <__kernel_rem_pio2f+0x314>
   13cc6:	9a00      	ldr	r2, [sp, #0]
   13cc8:	18d7      	adds	r7, r2, r3
   13cca:	9b08      	ldr	r3, [sp, #32]
   13ccc:	1aff      	subs	r7, r7, r3
   13cce:	ab20      	add	r3, sp, #128	; 0x80
   13cd0:	469c      	mov	ip, r3
   13cd2:	9b07      	ldr	r3, [sp, #28]
   13cd4:	00bf      	lsls	r7, r7, #2
   13cd6:	1b5b      	subs	r3, r3, r5
   13cd8:	009b      	lsls	r3, r3, #2
   13cda:	9303      	str	r3, [sp, #12]
   13cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13cde:	4467      	add	r7, ip
   13ce0:	469c      	mov	ip, r3
   13ce2:	4465      	add	r5, ip
   13ce4:	00ab      	lsls	r3, r5, #2
   13ce6:	9302      	str	r3, [sp, #8]
   13ce8:	2300      	movs	r3, #0
   13cea:	4698      	mov	r8, r3
   13cec:	9a67      	ldr	r2, [sp, #412]	; 0x19c
   13cee:	9b02      	ldr	r3, [sp, #8]
   13cf0:	4694      	mov	ip, r2
   13cf2:	4443      	add	r3, r8
   13cf4:	4463      	add	r3, ip
   13cf6:	6858      	ldr	r0, [r3, #4]
   13cf8:	f7ed fc0c 	bl	1514 <__aeabi_i2f>
   13cfc:	465b      	mov	r3, fp
   13cfe:	50f8      	str	r0, [r7, r3]
   13d00:	9b00      	ldr	r3, [sp, #0]
   13d02:	2b00      	cmp	r3, #0
   13d04:	db1c      	blt.n	13d40 <__kernel_rem_pio2f+0x318>
   13d06:	465b      	mov	r3, fp
   13d08:	2500      	movs	r5, #0
   13d0a:	9e01      	ldr	r6, [sp, #4]
   13d0c:	18fc      	adds	r4, r7, r3
   13d0e:	6821      	ldr	r1, [r4, #0]
   13d10:	ce01      	ldmia	r6!, {r0}
   13d12:	f7ed f92f 	bl	f74 <__aeabi_fmul>
   13d16:	1c01      	adds	r1, r0, #0
   13d18:	1c28      	adds	r0, r5, #0
   13d1a:	f7ec fdbd 	bl	898 <__aeabi_fadd>
   13d1e:	3c04      	subs	r4, #4
   13d20:	1c05      	adds	r5, r0, #0
   13d22:	42bc      	cmp	r4, r7
   13d24:	d1f3      	bne.n	13d0e <__kernel_rem_pio2f+0x2e6>
   13d26:	4643      	mov	r3, r8
   13d28:	4453      	add	r3, sl
   13d2a:	444b      	add	r3, r9
   13d2c:	605d      	str	r5, [r3, #4]
   13d2e:	2304      	movs	r3, #4
   13d30:	469c      	mov	ip, r3
   13d32:	9b03      	ldr	r3, [sp, #12]
   13d34:	44e0      	add	r8, ip
   13d36:	3704      	adds	r7, #4
   13d38:	4598      	cmp	r8, r3
   13d3a:	d1d7      	bne.n	13cec <__kernel_rem_pio2f+0x2c4>
   13d3c:	9d07      	ldr	r5, [sp, #28]
   13d3e:	e6f7      	b.n	13b30 <__kernel_rem_pio2f+0x108>
   13d40:	2500      	movs	r5, #0
   13d42:	e7f0      	b.n	13d26 <__kernel_rem_pio2f+0x2fe>
   13d44:	00014cc0 	.word	0x00014cc0
   13d48:	3ffffffe 	.word	0x3ffffffe
   13d4c:	3fffffff 	.word	0x3fffffff
   13d50:	20fe      	movs	r0, #254	; 0xfe
   13d52:	1c31      	adds	r1, r6, #0
   13d54:	0580      	lsls	r0, r0, #22
   13d56:	f7ed fa3f 	bl	11d8 <__aeabi_fsub>
   13d5a:	1c06      	adds	r6, r0, #0
   13d5c:	2c00      	cmp	r4, #0
   13d5e:	d100      	bne.n	13d62 <__kernel_rem_pio2f+0x33a>
   13d60:	e782      	b.n	13c68 <__kernel_rem_pio2f+0x240>
   13d62:	20fe      	movs	r0, #254	; 0xfe
   13d64:	9904      	ldr	r1, [sp, #16]
   13d66:	0580      	lsls	r0, r0, #22
   13d68:	f000 fb96 	bl	14498 <scalbnf>
   13d6c:	1c01      	adds	r1, r0, #0
   13d6e:	1c30      	adds	r0, r6, #0
   13d70:	f7ed fa32 	bl	11d8 <__aeabi_fsub>
   13d74:	1c06      	adds	r6, r0, #0
   13d76:	1c30      	adds	r0, r6, #0
   13d78:	2100      	movs	r1, #0
   13d7a:	f7ec fd5f 	bl	83c <__aeabi_fcmpeq>
   13d7e:	2800      	cmp	r0, #0
   13d80:	d000      	beq.n	13d84 <__kernel_rem_pio2f+0x35c>
   13d82:	e778      	b.n	13c76 <__kernel_rem_pio2f+0x24e>
   13d84:	4653      	mov	r3, sl
   13d86:	46ca      	mov	sl, r9
   13d88:	4699      	mov	r9, r3
   13d8a:	9b04      	ldr	r3, [sp, #16]
   13d8c:	1c30      	adds	r0, r6, #0
   13d8e:	4259      	negs	r1, r3
   13d90:	9707      	str	r7, [sp, #28]
   13d92:	9500      	str	r5, [sp, #0]
   13d94:	f000 fb80 	bl	14498 <scalbnf>
   13d98:	2187      	movs	r1, #135	; 0x87
   13d9a:	05c9      	lsls	r1, r1, #23
   13d9c:	1c04      	adds	r4, r0, #0
   13d9e:	f7ec fd71 	bl	884 <__aeabi_fcmpge>
   13da2:	2800      	cmp	r0, #0
   13da4:	d100      	bne.n	13da8 <__kernel_rem_pio2f+0x380>
   13da6:	e1c7      	b.n	14138 <__kernel_rem_pio2f+0x710>
   13da8:	21ee      	movs	r1, #238	; 0xee
   13daa:	1c20      	adds	r0, r4, #0
   13dac:	0589      	lsls	r1, r1, #22
   13dae:	f7ed f8e1 	bl	f74 <__aeabi_fmul>
   13db2:	f7ed fb8f 	bl	14d4 <__aeabi_f2iz>
   13db6:	f7ed fbad 	bl	1514 <__aeabi_i2f>
   13dba:	2187      	movs	r1, #135	; 0x87
   13dbc:	05c9      	lsls	r1, r1, #23
   13dbe:	1c05      	adds	r5, r0, #0
   13dc0:	f7ed f8d8 	bl	f74 <__aeabi_fmul>
   13dc4:	1c01      	adds	r1, r0, #0
   13dc6:	1c20      	adds	r0, r4, #0
   13dc8:	f7ed fa06 	bl	11d8 <__aeabi_fsub>
   13dcc:	f7ed fb82 	bl	14d4 <__aeabi_f2iz>
   13dd0:	464a      	mov	r2, r9
   13dd2:	ab0c      	add	r3, sp, #48	; 0x30
   13dd4:	5098      	str	r0, [r3, r2]
   13dd6:	9b00      	ldr	r3, [sp, #0]
   13dd8:	9a04      	ldr	r2, [sp, #16]
   13dda:	3301      	adds	r3, #1
   13ddc:	3208      	adds	r2, #8
   13dde:	1c28      	adds	r0, r5, #0
   13de0:	009c      	lsls	r4, r3, #2
   13de2:	9300      	str	r3, [sp, #0]
   13de4:	9204      	str	r2, [sp, #16]
   13de6:	f7ed fb75 	bl	14d4 <__aeabi_f2iz>
   13dea:	ab0c      	add	r3, sp, #48	; 0x30
   13dec:	5118      	str	r0, [r3, r4]
   13dee:	20fe      	movs	r0, #254	; 0xfe
   13df0:	9904      	ldr	r1, [sp, #16]
   13df2:	0580      	lsls	r0, r0, #22
   13df4:	f000 fb50 	bl	14498 <scalbnf>
   13df8:	9a00      	ldr	r2, [sp, #0]
   13dfa:	1c06      	adds	r6, r0, #0
   13dfc:	1e13      	subs	r3, r2, #0
   13dfe:	da00      	bge.n	13e02 <__kernel_rem_pio2f+0x3da>
   13e00:	e0b4      	b.n	13f6c <__kernel_rem_pio2f+0x544>
   13e02:	3301      	adds	r3, #1
   13e04:	4698      	mov	r8, r3
   13e06:	009b      	lsls	r3, r3, #2
   13e08:	425b      	negs	r3, r3
   13e0a:	a90c      	add	r1, sp, #48	; 0x30
   13e0c:	4699      	mov	r9, r3
   13e0e:	468c      	mov	ip, r1
   13e10:	0093      	lsls	r3, r2, #2
   13e12:	1c1a      	adds	r2, r3, #0
   13e14:	9301      	str	r3, [sp, #4]
   13e16:	4463      	add	r3, ip
   13e18:	1c1c      	adds	r4, r3, #0
   13e1a:	1c13      	adds	r3, r2, #0
   13e1c:	4453      	add	r3, sl
   13e1e:	1c1f      	adds	r7, r3, #0
   13e20:	2500      	movs	r5, #0
   13e22:	5960      	ldr	r0, [r4, r5]
   13e24:	f7ed fb76 	bl	1514 <__aeabi_i2f>
   13e28:	1c31      	adds	r1, r6, #0
   13e2a:	f7ed f8a3 	bl	f74 <__aeabi_fmul>
   13e2e:	21ee      	movs	r1, #238	; 0xee
   13e30:	5178      	str	r0, [r7, r5]
   13e32:	0589      	lsls	r1, r1, #22
   13e34:	1c30      	adds	r0, r6, #0
   13e36:	f7ed f89d 	bl	f74 <__aeabi_fmul>
   13e3a:	3d04      	subs	r5, #4
   13e3c:	1c06      	adds	r6, r0, #0
   13e3e:	454d      	cmp	r5, r9
   13e40:	d1ef      	bne.n	13e22 <__kernel_rem_pio2f+0x3fa>
   13e42:	ab34      	add	r3, sp, #208	; 0xd0
   13e44:	469b      	mov	fp, r3
   13e46:	4bc0      	ldr	r3, [pc, #768]	; (14148 <__kernel_rem_pio2f+0x720>)
   13e48:	46b9      	mov	r9, r7
   13e4a:	469a      	mov	sl, r3
   13e4c:	4643      	mov	r3, r8
   13e4e:	9303      	str	r3, [sp, #12]
   13e50:	9b05      	ldr	r3, [sp, #20]
   13e52:	2700      	movs	r7, #0
   13e54:	4698      	mov	r8, r3
   13e56:	4643      	mov	r3, r8
   13e58:	2b00      	cmp	r3, #0
   13e5a:	da00      	bge.n	13e5e <__kernel_rem_pio2f+0x436>
   13e5c:	e084      	b.n	13f68 <__kernel_rem_pio2f+0x540>
   13e5e:	2f00      	cmp	r7, #0
   13e60:	da00      	bge.n	13e64 <__kernel_rem_pio2f+0x43c>
   13e62:	e081      	b.n	13f68 <__kernel_rem_pio2f+0x540>
   13e64:	1c3b      	adds	r3, r7, #0
   13e66:	2600      	movs	r6, #0
   13e68:	464f      	mov	r7, r9
   13e6a:	2500      	movs	r5, #0
   13e6c:	2400      	movs	r4, #0
   13e6e:	4699      	mov	r9, r3
   13e70:	e002      	b.n	13e78 <__kernel_rem_pio2f+0x450>
   13e72:	3504      	adds	r5, #4
   13e74:	454c      	cmp	r4, r9
   13e76:	dc0c      	bgt.n	13e92 <__kernel_rem_pio2f+0x46a>
   13e78:	4653      	mov	r3, sl
   13e7a:	5979      	ldr	r1, [r7, r5]
   13e7c:	5958      	ldr	r0, [r3, r5]
   13e7e:	f7ed f879 	bl	f74 <__aeabi_fmul>
   13e82:	1c01      	adds	r1, r0, #0
   13e84:	1c30      	adds	r0, r6, #0
   13e86:	f7ec fd07 	bl	898 <__aeabi_fadd>
   13e8a:	3401      	adds	r4, #1
   13e8c:	1c06      	adds	r6, r0, #0
   13e8e:	45a0      	cmp	r8, r4
   13e90:	daef      	bge.n	13e72 <__kernel_rem_pio2f+0x44a>
   13e92:	464b      	mov	r3, r9
   13e94:	46b9      	mov	r9, r7
   13e96:	1c1f      	adds	r7, r3, #0
   13e98:	465a      	mov	r2, fp
   13e9a:	00bb      	lsls	r3, r7, #2
   13e9c:	50d6      	str	r6, [r2, r3]
   13e9e:	2304      	movs	r3, #4
   13ea0:	425b      	negs	r3, r3
   13ea2:	469c      	mov	ip, r3
   13ea4:	9b03      	ldr	r3, [sp, #12]
   13ea6:	3701      	adds	r7, #1
   13ea8:	44e1      	add	r9, ip
   13eaa:	42bb      	cmp	r3, r7
   13eac:	d1d3      	bne.n	13e56 <__kernel_rem_pio2f+0x42e>
   13eae:	9b66      	ldr	r3, [sp, #408]	; 0x198
   13eb0:	2b02      	cmp	r3, #2
   13eb2:	dd00      	ble.n	13eb6 <__kernel_rem_pio2f+0x48e>
   13eb4:	e0d9      	b.n	1406a <__kernel_rem_pio2f+0x642>
   13eb6:	2b00      	cmp	r3, #0
   13eb8:	dd00      	ble.n	13ebc <__kernel_rem_pio2f+0x494>
   13eba:	e0bb      	b.n	14034 <__kernel_rem_pio2f+0x60c>
   13ebc:	d114      	bne.n	13ee8 <__kernel_rem_pio2f+0x4c0>
   13ebe:	9b01      	ldr	r3, [sp, #4]
   13ec0:	2000      	movs	r0, #0
   13ec2:	445b      	add	r3, fp
   13ec4:	1c1c      	adds	r4, r3, #0
   13ec6:	6821      	ldr	r1, [r4, #0]
   13ec8:	f7ec fce6 	bl	898 <__aeabi_fadd>
   13ecc:	9b00      	ldr	r3, [sp, #0]
   13ece:	3c04      	subs	r4, #4
   13ed0:	1e5a      	subs	r2, r3, #1
   13ed2:	9200      	str	r2, [sp, #0]
   13ed4:	d2f7      	bcs.n	13ec6 <__kernel_rem_pio2f+0x49e>
   13ed6:	9b02      	ldr	r3, [sp, #8]
   13ed8:	2b00      	cmp	r3, #0
   13eda:	d003      	beq.n	13ee4 <__kernel_rem_pio2f+0x4bc>
   13edc:	2380      	movs	r3, #128	; 0x80
   13ede:	061b      	lsls	r3, r3, #24
   13ee0:	469c      	mov	ip, r3
   13ee2:	4460      	add	r0, ip
   13ee4:	9b06      	ldr	r3, [sp, #24]
   13ee6:	6018      	str	r0, [r3, #0]
   13ee8:	2007      	movs	r0, #7
   13eea:	9b07      	ldr	r3, [sp, #28]
   13eec:	4018      	ands	r0, r3
   13eee:	b05d      	add	sp, #372	; 0x174
   13ef0:	bc3c      	pop	{r2, r3, r4, r5}
   13ef2:	4690      	mov	r8, r2
   13ef4:	4699      	mov	r9, r3
   13ef6:	46a2      	mov	sl, r4
   13ef8:	46ab      	mov	fp, r5
   13efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13efc:	9b04      	ldr	r3, [sp, #16]
   13efe:	2b00      	cmp	r3, #0
   13f00:	d111      	bne.n	13f26 <__kernel_rem_pio2f+0x4fe>
   13f02:	1e6b      	subs	r3, r5, #1
   13f04:	009b      	lsls	r3, r3, #2
   13f06:	aa0c      	add	r2, sp, #48	; 0x30
   13f08:	58d3      	ldr	r3, [r2, r3]
   13f0a:	121b      	asrs	r3, r3, #8
   13f0c:	9302      	str	r3, [sp, #8]
   13f0e:	e673      	b.n	13bf8 <__kernel_rem_pio2f+0x1d0>
   13f10:	1e6b      	subs	r3, r5, #1
   13f12:	009b      	lsls	r3, r3, #2
   13f14:	aa0c      	add	r2, sp, #48	; 0x30
   13f16:	58d2      	ldr	r2, [r2, r3]
   13f18:	9203      	str	r2, [sp, #12]
   13f1a:	227f      	movs	r2, #127	; 0x7f
   13f1c:	9903      	ldr	r1, [sp, #12]
   13f1e:	400a      	ands	r2, r1
   13f20:	a90c      	add	r1, sp, #48	; 0x30
   13f22:	50ca      	str	r2, [r1, r3]
   13f24:	e69d      	b.n	13c62 <__kernel_rem_pio2f+0x23a>
   13f26:	21fc      	movs	r1, #252	; 0xfc
   13f28:	0589      	lsls	r1, r1, #22
   13f2a:	f7ec fcab 	bl	884 <__aeabi_fcmpge>
   13f2e:	2800      	cmp	r0, #0
   13f30:	d10d      	bne.n	13f4e <__kernel_rem_pio2f+0x526>
   13f32:	2300      	movs	r3, #0
   13f34:	9302      	str	r3, [sp, #8]
   13f36:	e697      	b.n	13c68 <__kernel_rem_pio2f+0x240>
   13f38:	4653      	mov	r3, sl
   13f3a:	4642      	mov	r2, r8
   13f3c:	2500      	movs	r5, #0
   13f3e:	509d      	str	r5, [r3, r2]
   13f40:	2304      	movs	r3, #4
   13f42:	469c      	mov	ip, r3
   13f44:	44e0      	add	r8, ip
   13f46:	45c8      	cmp	r8, r9
   13f48:	d000      	beq.n	13f4c <__kernel_rem_pio2f+0x524>
   13f4a:	e5bf      	b.n	13acc <__kernel_rem_pio2f+0xa4>
   13f4c:	e5e1      	b.n	13b12 <__kernel_rem_pio2f+0xea>
   13f4e:	2302      	movs	r3, #2
   13f50:	3701      	adds	r7, #1
   13f52:	9302      	str	r3, [sp, #8]
   13f54:	2d00      	cmp	r5, #0
   13f56:	dd00      	ble.n	13f5a <__kernel_rem_pio2f+0x532>
   13f58:	e655      	b.n	13c06 <__kernel_rem_pio2f+0x1de>
   13f5a:	20fe      	movs	r0, #254	; 0xfe
   13f5c:	1c31      	adds	r1, r6, #0
   13f5e:	0580      	lsls	r0, r0, #22
   13f60:	f7ed f93a 	bl	11d8 <__aeabi_fsub>
   13f64:	1c06      	adds	r6, r0, #0
   13f66:	e67f      	b.n	13c68 <__kernel_rem_pio2f+0x240>
   13f68:	2600      	movs	r6, #0
   13f6a:	e795      	b.n	13e98 <__kernel_rem_pio2f+0x470>
   13f6c:	9b66      	ldr	r3, [sp, #408]	; 0x198
   13f6e:	2b02      	cmp	r3, #2
   13f70:	dc27      	bgt.n	13fc2 <__kernel_rem_pio2f+0x59a>
   13f72:	2b00      	cmp	r3, #0
   13f74:	dc03      	bgt.n	13f7e <__kernel_rem_pio2f+0x556>
   13f76:	2000      	movs	r0, #0
   13f78:	2b00      	cmp	r3, #0
   13f7a:	d0ac      	beq.n	13ed6 <__kernel_rem_pio2f+0x4ae>
   13f7c:	e7b4      	b.n	13ee8 <__kernel_rem_pio2f+0x4c0>
   13f7e:	9b02      	ldr	r3, [sp, #8]
   13f80:	2100      	movs	r1, #0
   13f82:	2b00      	cmp	r3, #0
   13f84:	d066      	beq.n	14054 <__kernel_rem_pio2f+0x62c>
   13f86:	2380      	movs	r3, #128	; 0x80
   13f88:	9a06      	ldr	r2, [sp, #24]
   13f8a:	061b      	lsls	r3, r3, #24
   13f8c:	18cb      	adds	r3, r1, r3
   13f8e:	6013      	str	r3, [r2, #0]
   13f90:	9834      	ldr	r0, [sp, #208]	; 0xd0
   13f92:	f7ed f921 	bl	11d8 <__aeabi_fsub>
   13f96:	9b00      	ldr	r3, [sp, #0]
   13f98:	2b00      	cmp	r3, #0
   13f9a:	dd0b      	ble.n	13fb4 <__kernel_rem_pio2f+0x58c>
   13f9c:	2401      	movs	r4, #1
   13f9e:	ad35      	add	r5, sp, #212	; 0xd4
   13fa0:	cd02      	ldmia	r5!, {r1}
   13fa2:	f7ec fc79 	bl	898 <__aeabi_fadd>
   13fa6:	9b00      	ldr	r3, [sp, #0]
   13fa8:	3401      	adds	r4, #1
   13faa:	42a3      	cmp	r3, r4
   13fac:	daf8      	bge.n	13fa0 <__kernel_rem_pio2f+0x578>
   13fae:	9b02      	ldr	r3, [sp, #8]
   13fb0:	2b00      	cmp	r3, #0
   13fb2:	d003      	beq.n	13fbc <__kernel_rem_pio2f+0x594>
   13fb4:	2380      	movs	r3, #128	; 0x80
   13fb6:	061b      	lsls	r3, r3, #24
   13fb8:	469c      	mov	ip, r3
   13fba:	4460      	add	r0, ip
   13fbc:	9b06      	ldr	r3, [sp, #24]
   13fbe:	6058      	str	r0, [r3, #4]
   13fc0:	e792      	b.n	13ee8 <__kernel_rem_pio2f+0x4c0>
   13fc2:	ab34      	add	r3, sp, #208	; 0xd0
   13fc4:	469b      	mov	fp, r3
   13fc6:	9b66      	ldr	r3, [sp, #408]	; 0x198
   13fc8:	2b03      	cmp	r3, #3
   13fca:	d000      	beq.n	13fce <__kernel_rem_pio2f+0x5a6>
   13fcc:	e78c      	b.n	13ee8 <__kernel_rem_pio2f+0x4c0>
   13fce:	9b02      	ldr	r3, [sp, #8]
   13fd0:	2000      	movs	r0, #0
   13fd2:	2b00      	cmp	r3, #0
   13fd4:	d100      	bne.n	13fd8 <__kernel_rem_pio2f+0x5b0>
   13fd6:	e09c      	b.n	14112 <__kernel_rem_pio2f+0x6ea>
   13fd8:	2280      	movs	r2, #128	; 0x80
   13fda:	0612      	lsls	r2, r2, #24
   13fdc:	4694      	mov	ip, r2
   13fde:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   13fe0:	9a06      	ldr	r2, [sp, #24]
   13fe2:	4463      	add	r3, ip
   13fe4:	6013      	str	r3, [r2, #0]
   13fe6:	465b      	mov	r3, fp
   13fe8:	685b      	ldr	r3, [r3, #4]
   13fea:	4460      	add	r0, ip
   13fec:	4463      	add	r3, ip
   13fee:	6053      	str	r3, [r2, #4]
   13ff0:	6090      	str	r0, [r2, #8]
   13ff2:	e779      	b.n	13ee8 <__kernel_rem_pio2f+0x4c0>
   13ff4:	9707      	str	r7, [sp, #28]
   13ff6:	1c0f      	adds	r7, r1, #0
   13ff8:	9b04      	ldr	r3, [sp, #16]
   13ffa:	1c0a      	adds	r2, r1, #0
   13ffc:	3b08      	subs	r3, #8
   13ffe:	9100      	str	r1, [sp, #0]
   14000:	9304      	str	r3, [sp, #16]
   14002:	1c19      	adds	r1, r3, #0
   14004:	a80c      	add	r0, sp, #48	; 0x30
   14006:	00bb      	lsls	r3, r7, #2
   14008:	58c3      	ldr	r3, [r0, r3]
   1400a:	46ca      	mov	sl, r9
   1400c:	2b00      	cmp	r3, #0
   1400e:	d000      	beq.n	14012 <__kernel_rem_pio2f+0x5ea>
   14010:	e6ed      	b.n	13dee <__kernel_rem_pio2f+0x3c6>
   14012:	484e      	ldr	r0, [pc, #312]	; (1414c <__kernel_rem_pio2f+0x724>)
   14014:	1c3b      	adds	r3, r7, #0
   14016:	4684      	mov	ip, r0
   14018:	a80c      	add	r0, sp, #48	; 0x30
   1401a:	4463      	add	r3, ip
   1401c:	4684      	mov	ip, r0
   1401e:	009b      	lsls	r3, r3, #2
   14020:	4463      	add	r3, ip
   14022:	3b04      	subs	r3, #4
   14024:	6858      	ldr	r0, [r3, #4]
   14026:	3a01      	subs	r2, #1
   14028:	3908      	subs	r1, #8
   1402a:	2800      	cmp	r0, #0
   1402c:	d0f9      	beq.n	14022 <__kernel_rem_pio2f+0x5fa>
   1402e:	9200      	str	r2, [sp, #0]
   14030:	9104      	str	r1, [sp, #16]
   14032:	e6dc      	b.n	13dee <__kernel_rem_pio2f+0x3c6>
   14034:	9b01      	ldr	r3, [sp, #4]
   14036:	2100      	movs	r1, #0
   14038:	445b      	add	r3, fp
   1403a:	1c1c      	adds	r4, r3, #0
   1403c:	ad33      	add	r5, sp, #204	; 0xcc
   1403e:	1c08      	adds	r0, r1, #0
   14040:	6821      	ldr	r1, [r4, #0]
   14042:	3c04      	subs	r4, #4
   14044:	f7ec fc28 	bl	898 <__aeabi_fadd>
   14048:	42ac      	cmp	r4, r5
   1404a:	d1f9      	bne.n	14040 <__kernel_rem_pio2f+0x618>
   1404c:	9b02      	ldr	r3, [sp, #8]
   1404e:	1c01      	adds	r1, r0, #0
   14050:	2b00      	cmp	r3, #0
   14052:	d198      	bne.n	13f86 <__kernel_rem_pio2f+0x55e>
   14054:	9b06      	ldr	r3, [sp, #24]
   14056:	9834      	ldr	r0, [sp, #208]	; 0xd0
   14058:	6019      	str	r1, [r3, #0]
   1405a:	f7ed f8bd 	bl	11d8 <__aeabi_fsub>
   1405e:	9b00      	ldr	r3, [sp, #0]
   14060:	2b00      	cmp	r3, #0
   14062:	dc9b      	bgt.n	13f9c <__kernel_rem_pio2f+0x574>
   14064:	9b06      	ldr	r3, [sp, #24]
   14066:	6058      	str	r0, [r3, #4]
   14068:	e73e      	b.n	13ee8 <__kernel_rem_pio2f+0x4c0>
   1406a:	9b66      	ldr	r3, [sp, #408]	; 0x198
   1406c:	2b03      	cmp	r3, #3
   1406e:	d000      	beq.n	14072 <__kernel_rem_pio2f+0x64a>
   14070:	e73a      	b.n	13ee8 <__kernel_rem_pio2f+0x4c0>
   14072:	9b00      	ldr	r3, [sp, #0]
   14074:	2b00      	cmp	r3, #0
   14076:	ddaa      	ble.n	13fce <__kernel_rem_pio2f+0x5a6>
   14078:	465b      	mov	r3, fp
   1407a:	9a01      	ldr	r2, [sp, #4]
   1407c:	589e      	ldr	r6, [r3, r2]
   1407e:	4a33      	ldr	r2, [pc, #204]	; (1414c <__kernel_rem_pio2f+0x724>)
   14080:	9b00      	ldr	r3, [sp, #0]
   14082:	4694      	mov	ip, r2
   14084:	4463      	add	r3, ip
   14086:	1c1c      	adds	r4, r3, #0
   14088:	009d      	lsls	r5, r3, #2
   1408a:	ab33      	add	r3, sp, #204	; 0xcc
   1408c:	469a      	mov	sl, r3
   1408e:	46a0      	mov	r8, r4
   14090:	445d      	add	r5, fp
   14092:	682c      	ldr	r4, [r5, #0]
   14094:	1c30      	adds	r0, r6, #0
   14096:	1c21      	adds	r1, r4, #0
   14098:	f7ec fbfe 	bl	898 <__aeabi_fadd>
   1409c:	1c07      	adds	r7, r0, #0
   1409e:	1c39      	adds	r1, r7, #0
   140a0:	1c20      	adds	r0, r4, #0
   140a2:	f7ed f899 	bl	11d8 <__aeabi_fsub>
   140a6:	1c01      	adds	r1, r0, #0
   140a8:	1c30      	adds	r0, r6, #0
   140aa:	f7ec fbf5 	bl	898 <__aeabi_fadd>
   140ae:	3d04      	subs	r5, #4
   140b0:	60a8      	str	r0, [r5, #8]
   140b2:	606f      	str	r7, [r5, #4]
   140b4:	1c3e      	adds	r6, r7, #0
   140b6:	4555      	cmp	r5, sl
   140b8:	d1eb      	bne.n	14092 <__kernel_rem_pio2f+0x66a>
   140ba:	9b00      	ldr	r3, [sp, #0]
   140bc:	4644      	mov	r4, r8
   140be:	2b01      	cmp	r3, #1
   140c0:	dd85      	ble.n	13fce <__kernel_rem_pio2f+0x5a6>
   140c2:	465b      	mov	r3, fp
   140c4:	00a4      	lsls	r4, r4, #2
   140c6:	46a0      	mov	r8, r4
   140c8:	9a01      	ldr	r2, [sp, #4]
   140ca:	191d      	adds	r5, r3, r4
   140cc:	589e      	ldr	r6, [r3, r2]
   140ce:	682c      	ldr	r4, [r5, #0]
   140d0:	1c31      	adds	r1, r6, #0
   140d2:	1c20      	adds	r0, r4, #0
   140d4:	f7ec fbe0 	bl	898 <__aeabi_fadd>
   140d8:	1c07      	adds	r7, r0, #0
   140da:	1c39      	adds	r1, r7, #0
   140dc:	1c20      	adds	r0, r4, #0
   140de:	f7ed f87b 	bl	11d8 <__aeabi_fsub>
   140e2:	1c31      	adds	r1, r6, #0
   140e4:	f7ec fbd8 	bl	898 <__aeabi_fadd>
   140e8:	3d04      	subs	r5, #4
   140ea:	60a8      	str	r0, [r5, #8]
   140ec:	606f      	str	r7, [r5, #4]
   140ee:	1c3e      	adds	r6, r7, #0
   140f0:	45ab      	cmp	fp, r5
   140f2:	d1ec      	bne.n	140ce <__kernel_rem_pio2f+0x6a6>
   140f4:	4644      	mov	r4, r8
   140f6:	2000      	movs	r0, #0
   140f8:	3404      	adds	r4, #4
   140fa:	445c      	add	r4, fp
   140fc:	ad35      	add	r5, sp, #212	; 0xd4
   140fe:	6821      	ldr	r1, [r4, #0]
   14100:	3c04      	subs	r4, #4
   14102:	f7ec fbc9 	bl	898 <__aeabi_fadd>
   14106:	42ac      	cmp	r4, r5
   14108:	d1f9      	bne.n	140fe <__kernel_rem_pio2f+0x6d6>
   1410a:	9b02      	ldr	r3, [sp, #8]
   1410c:	2b00      	cmp	r3, #0
   1410e:	d000      	beq.n	14112 <__kernel_rem_pio2f+0x6ea>
   14110:	e762      	b.n	13fd8 <__kernel_rem_pio2f+0x5b0>
   14112:	9b06      	ldr	r3, [sp, #24]
   14114:	9a34      	ldr	r2, [sp, #208]	; 0xd0
   14116:	6098      	str	r0, [r3, #8]
   14118:	601a      	str	r2, [r3, #0]
   1411a:	465a      	mov	r2, fp
   1411c:	6852      	ldr	r2, [r2, #4]
   1411e:	9200      	str	r2, [sp, #0]
   14120:	605a      	str	r2, [r3, #4]
   14122:	e6e1      	b.n	13ee8 <__kernel_rem_pio2f+0x4c0>
   14124:	2201      	movs	r2, #1
   14126:	e5c9      	b.n	13cbc <__kernel_rem_pio2f+0x294>
   14128:	2400      	movs	r4, #0
   1412a:	e588      	b.n	13c3e <__kernel_rem_pio2f+0x216>
   1412c:	9b08      	ldr	r3, [sp, #32]
   1412e:	009b      	lsls	r3, r3, #2
   14130:	469b      	mov	fp, r3
   14132:	ab48      	add	r3, sp, #288	; 0x120
   14134:	469a      	mov	sl, r3
   14136:	e4ec      	b.n	13b12 <__kernel_rem_pio2f+0xea>
   14138:	1c20      	adds	r0, r4, #0
   1413a:	f7ed f9cb 	bl	14d4 <__aeabi_f2iz>
   1413e:	464a      	mov	r2, r9
   14140:	ab0c      	add	r3, sp, #48	; 0x30
   14142:	5098      	str	r0, [r3, r2]
   14144:	e653      	b.n	13dee <__kernel_rem_pio2f+0x3c6>
   14146:	46c0      	nop			; (mov r8, r8)
   14148:	00014ccc 	.word	0x00014ccc
   1414c:	3fffffff 	.word	0x3fffffff

00014150 <__kernel_sinf>:
__kernel_sinf():
   14150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14152:	464f      	mov	r7, r9
   14154:	4646      	mov	r6, r8
   14156:	4690      	mov	r8, r2
   14158:	4a33      	ldr	r2, [pc, #204]	; (14228 <__kernel_sinf+0xd8>)
   1415a:	0043      	lsls	r3, r0, #1
   1415c:	b4c0      	push	{r6, r7}
   1415e:	1c04      	adds	r4, r0, #0
   14160:	1c0f      	adds	r7, r1, #0
   14162:	085b      	lsrs	r3, r3, #1
   14164:	4293      	cmp	r3, r2
   14166:	dc05      	bgt.n	14174 <__kernel_sinf+0x24>
   14168:	f7ed f9b4 	bl	14d4 <__aeabi_f2iz>
   1416c:	1c03      	adds	r3, r0, #0
   1416e:	1c20      	adds	r0, r4, #0
   14170:	2b00      	cmp	r3, #0
   14172:	d046      	beq.n	14202 <__kernel_sinf+0xb2>
   14174:	1c21      	adds	r1, r4, #0
   14176:	1c20      	adds	r0, r4, #0
   14178:	f7ec fefc 	bl	f74 <__aeabi_fmul>
   1417c:	1c21      	adds	r1, r4, #0
   1417e:	1c05      	adds	r5, r0, #0
   14180:	f7ec fef8 	bl	f74 <__aeabi_fmul>
   14184:	4929      	ldr	r1, [pc, #164]	; (1422c <__kernel_sinf+0xdc>)
   14186:	1c06      	adds	r6, r0, #0
   14188:	1c28      	adds	r0, r5, #0
   1418a:	f7ec fef3 	bl	f74 <__aeabi_fmul>
   1418e:	4928      	ldr	r1, [pc, #160]	; (14230 <__kernel_sinf+0xe0>)
   14190:	f7ed f822 	bl	11d8 <__aeabi_fsub>
   14194:	1c29      	adds	r1, r5, #0
   14196:	f7ec feed 	bl	f74 <__aeabi_fmul>
   1419a:	4926      	ldr	r1, [pc, #152]	; (14234 <__kernel_sinf+0xe4>)
   1419c:	f7ec fb7c 	bl	898 <__aeabi_fadd>
   141a0:	1c29      	adds	r1, r5, #0
   141a2:	f7ec fee7 	bl	f74 <__aeabi_fmul>
   141a6:	4924      	ldr	r1, [pc, #144]	; (14238 <__kernel_sinf+0xe8>)
   141a8:	f7ed f816 	bl	11d8 <__aeabi_fsub>
   141ac:	1c29      	adds	r1, r5, #0
   141ae:	f7ec fee1 	bl	f74 <__aeabi_fmul>
   141b2:	4922      	ldr	r1, [pc, #136]	; (1423c <__kernel_sinf+0xec>)
   141b4:	f7ec fb70 	bl	898 <__aeabi_fadd>
   141b8:	4643      	mov	r3, r8
   141ba:	4681      	mov	r9, r0
   141bc:	2b00      	cmp	r3, #0
   141be:	d024      	beq.n	1420a <__kernel_sinf+0xba>
   141c0:	21fc      	movs	r1, #252	; 0xfc
   141c2:	1c38      	adds	r0, r7, #0
   141c4:	0589      	lsls	r1, r1, #22
   141c6:	f7ec fed5 	bl	f74 <__aeabi_fmul>
   141ca:	4649      	mov	r1, r9
   141cc:	4680      	mov	r8, r0
   141ce:	1c30      	adds	r0, r6, #0
   141d0:	f7ec fed0 	bl	f74 <__aeabi_fmul>
   141d4:	1c01      	adds	r1, r0, #0
   141d6:	4640      	mov	r0, r8
   141d8:	f7ec fffe 	bl	11d8 <__aeabi_fsub>
   141dc:	1c29      	adds	r1, r5, #0
   141de:	f7ec fec9 	bl	f74 <__aeabi_fmul>
   141e2:	1c39      	adds	r1, r7, #0
   141e4:	f7ec fff8 	bl	11d8 <__aeabi_fsub>
   141e8:	4915      	ldr	r1, [pc, #84]	; (14240 <__kernel_sinf+0xf0>)
   141ea:	1c05      	adds	r5, r0, #0
   141ec:	1c30      	adds	r0, r6, #0
   141ee:	f7ec fec1 	bl	f74 <__aeabi_fmul>
   141f2:	1c01      	adds	r1, r0, #0
   141f4:	1c28      	adds	r0, r5, #0
   141f6:	f7ec fb4f 	bl	898 <__aeabi_fadd>
   141fa:	1c01      	adds	r1, r0, #0
   141fc:	1c20      	adds	r0, r4, #0
   141fe:	f7ec ffeb 	bl	11d8 <__aeabi_fsub>
   14202:	bc0c      	pop	{r2, r3}
   14204:	4690      	mov	r8, r2
   14206:	4699      	mov	r9, r3
   14208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1420a:	4649      	mov	r1, r9
   1420c:	1c28      	adds	r0, r5, #0
   1420e:	f7ec feb1 	bl	f74 <__aeabi_fmul>
   14212:	490b      	ldr	r1, [pc, #44]	; (14240 <__kernel_sinf+0xf0>)
   14214:	f7ec ffe0 	bl	11d8 <__aeabi_fsub>
   14218:	1c31      	adds	r1, r6, #0
   1421a:	f7ec feab 	bl	f74 <__aeabi_fmul>
   1421e:	1c21      	adds	r1, r4, #0
   14220:	f7ec fb3a 	bl	898 <__aeabi_fadd>
   14224:	e7ed      	b.n	14202 <__kernel_sinf+0xb2>
   14226:	46c0      	nop			; (mov r8, r8)
   14228:	31ffffff 	.word	0x31ffffff
   1422c:	2f2ec9d3 	.word	0x2f2ec9d3
   14230:	32d72f34 	.word	0x32d72f34
   14234:	3638ef1b 	.word	0x3638ef1b
   14238:	39500d01 	.word	0x39500d01
   1423c:	3c088889 	.word	0x3c088889
   14240:	3e2aaaab 	.word	0x3e2aaaab

00014244 <matherr>:
matherr():
   14244:	2000      	movs	r0, #0
   14246:	4770      	bx	lr

00014248 <nan>:
nan():
   14248:	2000      	movs	r0, #0
   1424a:	4901      	ldr	r1, [pc, #4]	; (14250 <nan+0x8>)
   1424c:	4770      	bx	lr
   1424e:	46c0      	nop			; (mov r8, r8)
   14250:	7ff80000 	.word	0x7ff80000

00014254 <rint>:
rint():
   14254:	b5f0      	push	{r4, r5, r6, r7, lr}
   14256:	4647      	mov	r7, r8
   14258:	b480      	push	{r7}
   1425a:	004b      	lsls	r3, r1, #1
   1425c:	4a4a      	ldr	r2, [pc, #296]	; (14388 <rint+0x134>)
   1425e:	0d5b      	lsrs	r3, r3, #21
   14260:	189d      	adds	r5, r3, r2
   14262:	b082      	sub	sp, #8
   14264:	1c07      	adds	r7, r0, #0
   14266:	1c0c      	adds	r4, r1, #0
   14268:	0fce      	lsrs	r6, r1, #31
   1426a:	2d13      	cmp	r5, #19
   1426c:	dc39      	bgt.n	142e2 <rint+0x8e>
   1426e:	2d00      	cmp	r5, #0
   14270:	db59      	blt.n	14326 <rint+0xd2>
   14272:	4f46      	ldr	r7, [pc, #280]	; (1438c <rint+0x138>)
   14274:	1c02      	adds	r2, r0, #0
   14276:	412f      	asrs	r7, r5
   14278:	1c3b      	adds	r3, r7, #0
   1427a:	400b      	ands	r3, r1
   1427c:	4303      	orrs	r3, r0
   1427e:	469c      	mov	ip, r3
   14280:	46b8      	mov	r8, r7
   14282:	4667      	mov	r7, ip
   14284:	1c0b      	adds	r3, r1, #0
   14286:	2f00      	cmp	r7, #0
   14288:	d025      	beq.n	142d6 <rint+0x82>
   1428a:	4643      	mov	r3, r8
   1428c:	085b      	lsrs	r3, r3, #1
   1428e:	1c1a      	adds	r2, r3, #0
   14290:	400a      	ands	r2, r1
   14292:	4310      	orrs	r0, r2
   14294:	2700      	movs	r7, #0
   14296:	2800      	cmp	r0, #0
   14298:	d008      	beq.n	142ac <rint+0x58>
   1429a:	2d13      	cmp	r5, #19
   1429c:	d100      	bne.n	142a0 <rint+0x4c>
   1429e:	e06f      	b.n	14380 <rint+0x12c>
   142a0:	4399      	bics	r1, r3
   142a2:	2380      	movs	r3, #128	; 0x80
   142a4:	02db      	lsls	r3, r3, #11
   142a6:	412b      	asrs	r3, r5
   142a8:	4319      	orrs	r1, r3
   142aa:	1c0c      	adds	r4, r1, #0
   142ac:	4938      	ldr	r1, [pc, #224]	; (14390 <rint+0x13c>)
   142ae:	00f6      	lsls	r6, r6, #3
   142b0:	198e      	adds	r6, r1, r6
   142b2:	1c23      	adds	r3, r4, #0
   142b4:	6834      	ldr	r4, [r6, #0]
   142b6:	6875      	ldr	r5, [r6, #4]
   142b8:	1c3a      	adds	r2, r7, #0
   142ba:	1c20      	adds	r0, r4, #0
   142bc:	1c29      	adds	r1, r5, #0
   142be:	f7ed f971 	bl	15a4 <__aeabi_dadd>
   142c2:	9000      	str	r0, [sp, #0]
   142c4:	9101      	str	r1, [sp, #4]
   142c6:	9800      	ldr	r0, [sp, #0]
   142c8:	9901      	ldr	r1, [sp, #4]
   142ca:	1c22      	adds	r2, r4, #0
   142cc:	1c2b      	adds	r3, r5, #0
   142ce:	f7ee f8cf 	bl	2470 <__aeabi_dsub>
   142d2:	1c02      	adds	r2, r0, #0
   142d4:	1c0b      	adds	r3, r1, #0
   142d6:	1c10      	adds	r0, r2, #0
   142d8:	1c19      	adds	r1, r3, #0
   142da:	b002      	add	sp, #8
   142dc:	bc04      	pop	{r2}
   142de:	4690      	mov	r8, r2
   142e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   142e2:	2d33      	cmp	r5, #51	; 0x33
   142e4:	dd0b      	ble.n	142fe <rint+0xaa>
   142e6:	1c0b      	adds	r3, r1, #0
   142e8:	2180      	movs	r1, #128	; 0x80
   142ea:	1c02      	adds	r2, r0, #0
   142ec:	00c9      	lsls	r1, r1, #3
   142ee:	428d      	cmp	r5, r1
   142f0:	d1f1      	bne.n	142d6 <rint+0x82>
   142f2:	1c21      	adds	r1, r4, #0
   142f4:	f7ed f956 	bl	15a4 <__aeabi_dadd>
   142f8:	1c02      	adds	r2, r0, #0
   142fa:	1c0b      	adds	r3, r1, #0
   142fc:	e7eb      	b.n	142d6 <rint+0x82>
   142fe:	4a25      	ldr	r2, [pc, #148]	; (14394 <rint+0x140>)
   14300:	189d      	adds	r5, r3, r2
   14302:	2301      	movs	r3, #1
   14304:	425b      	negs	r3, r3
   14306:	40eb      	lsrs	r3, r5
   14308:	469c      	mov	ip, r3
   1430a:	1c0b      	adds	r3, r1, #0
   1430c:	4661      	mov	r1, ip
   1430e:	1c02      	adds	r2, r0, #0
   14310:	4201      	tst	r1, r0
   14312:	d0e0      	beq.n	142d6 <rint+0x82>
   14314:	084b      	lsrs	r3, r1, #1
   14316:	4203      	tst	r3, r0
   14318:	d0c8      	beq.n	142ac <rint+0x58>
   1431a:	2780      	movs	r7, #128	; 0x80
   1431c:	05ff      	lsls	r7, r7, #23
   1431e:	412f      	asrs	r7, r5
   14320:	4398      	bics	r0, r3
   14322:	4307      	orrs	r7, r0
   14324:	e7c2      	b.n	142ac <rint+0x58>
   14326:	004c      	lsls	r4, r1, #1
   14328:	0864      	lsrs	r4, r4, #1
   1432a:	4304      	orrs	r4, r0
   1432c:	1c02      	adds	r2, r0, #0
   1432e:	1c0b      	adds	r3, r1, #0
   14330:	2c00      	cmp	r4, #0
   14332:	d0d0      	beq.n	142d6 <rint+0x82>
   14334:	0309      	lsls	r1, r1, #12
   14336:	0b09      	lsrs	r1, r1, #12
   14338:	4301      	orrs	r1, r0
   1433a:	424a      	negs	r2, r1
   1433c:	4311      	orrs	r1, r2
   1433e:	2280      	movs	r2, #128	; 0x80
   14340:	0b09      	lsrs	r1, r1, #12
   14342:	0312      	lsls	r2, r2, #12
   14344:	0c5b      	lsrs	r3, r3, #17
   14346:	4011      	ands	r1, r2
   14348:	045b      	lsls	r3, r3, #17
   1434a:	1c02      	adds	r2, r0, #0
   1434c:	4319      	orrs	r1, r3
   1434e:	4810      	ldr	r0, [pc, #64]	; (14390 <rint+0x13c>)
   14350:	1c0b      	adds	r3, r1, #0
   14352:	00f1      	lsls	r1, r6, #3
   14354:	1841      	adds	r1, r0, r1
   14356:	680c      	ldr	r4, [r1, #0]
   14358:	684d      	ldr	r5, [r1, #4]
   1435a:	1c20      	adds	r0, r4, #0
   1435c:	1c29      	adds	r1, r5, #0
   1435e:	f7ed f921 	bl	15a4 <__aeabi_dadd>
   14362:	9000      	str	r0, [sp, #0]
   14364:	9101      	str	r1, [sp, #4]
   14366:	9800      	ldr	r0, [sp, #0]
   14368:	9901      	ldr	r1, [sp, #4]
   1436a:	1c22      	adds	r2, r4, #0
   1436c:	1c2b      	adds	r3, r5, #0
   1436e:	f7ee f87f 	bl	2470 <__aeabi_dsub>
   14372:	004b      	lsls	r3, r1, #1
   14374:	085b      	lsrs	r3, r3, #1
   14376:	07f6      	lsls	r6, r6, #31
   14378:	431e      	orrs	r6, r3
   1437a:	1c02      	adds	r2, r0, #0
   1437c:	1c33      	adds	r3, r6, #0
   1437e:	e7aa      	b.n	142d6 <rint+0x82>
   14380:	2780      	movs	r7, #128	; 0x80
   14382:	063f      	lsls	r7, r7, #24
   14384:	e78c      	b.n	142a0 <rint+0x4c>
   14386:	46c0      	nop			; (mov r8, r8)
   14388:	fffffc01 	.word	0xfffffc01
   1438c:	000fffff 	.word	0x000fffff
   14390:	00014cf8 	.word	0x00014cf8
   14394:	fffffbed 	.word	0xfffffbed

00014398 <fabsf>:
fabsf():
   14398:	0040      	lsls	r0, r0, #1
   1439a:	0840      	lsrs	r0, r0, #1
   1439c:	4770      	bx	lr
   1439e:	46c0      	nop			; (mov r8, r8)

000143a0 <finitef>:
finitef():
   143a0:	0043      	lsls	r3, r0, #1
   143a2:	2000      	movs	r0, #0
   143a4:	4a02      	ldr	r2, [pc, #8]	; (143b0 <finitef+0x10>)
   143a6:	085b      	lsrs	r3, r3, #1
   143a8:	429a      	cmp	r2, r3
   143aa:	4140      	adcs	r0, r0
   143ac:	4770      	bx	lr
   143ae:	46c0      	nop			; (mov r8, r8)
   143b0:	7f7fffff 	.word	0x7f7fffff

000143b4 <floorf>:
floorf():
   143b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   143b6:	4647      	mov	r7, r8
   143b8:	0043      	lsls	r3, r0, #1
   143ba:	b480      	push	{r7}
   143bc:	085f      	lsrs	r7, r3, #1
   143be:	0e1b      	lsrs	r3, r3, #24
   143c0:	3b7f      	subs	r3, #127	; 0x7f
   143c2:	1c05      	adds	r5, r0, #0
   143c4:	1e1c      	subs	r4, r3, #0
   143c6:	2c16      	cmp	r4, #22
   143c8:	dc18      	bgt.n	143fc <floorf+0x48>
   143ca:	4680      	mov	r8, r0
   143cc:	2b00      	cmp	r3, #0
   143ce:	db1e      	blt.n	1440e <floorf+0x5a>
   143d0:	4f1b      	ldr	r7, [pc, #108]	; (14440 <floorf+0x8c>)
   143d2:	1c06      	adds	r6, r0, #0
   143d4:	411f      	asrs	r7, r3
   143d6:	4207      	tst	r7, r0
   143d8:	d00c      	beq.n	143f4 <floorf+0x40>
   143da:	491a      	ldr	r1, [pc, #104]	; (14444 <floorf+0x90>)
   143dc:	f7ec fa5c 	bl	898 <__aeabi_fadd>
   143e0:	2100      	movs	r1, #0
   143e2:	f7ec fa45 	bl	870 <__aeabi_fcmpgt>
   143e6:	2800      	cmp	r0, #0
   143e8:	d004      	beq.n	143f4 <floorf+0x40>
   143ea:	2d00      	cmp	r5, #0
   143ec:	db1d      	blt.n	1442a <floorf+0x76>
   143ee:	4643      	mov	r3, r8
   143f0:	43bb      	bics	r3, r7
   143f2:	1c1e      	adds	r6, r3, #0
   143f4:	1c30      	adds	r0, r6, #0
   143f6:	bc04      	pop	{r2}
   143f8:	4690      	mov	r8, r2
   143fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   143fc:	4b12      	ldr	r3, [pc, #72]	; (14448 <floorf+0x94>)
   143fe:	1c06      	adds	r6, r0, #0
   14400:	429f      	cmp	r7, r3
   14402:	d9f7      	bls.n	143f4 <floorf+0x40>
   14404:	1c29      	adds	r1, r5, #0
   14406:	f7ec fa47 	bl	898 <__aeabi_fadd>
   1440a:	1c06      	adds	r6, r0, #0
   1440c:	e7f2      	b.n	143f4 <floorf+0x40>
   1440e:	490d      	ldr	r1, [pc, #52]	; (14444 <floorf+0x90>)
   14410:	f7ec fa42 	bl	898 <__aeabi_fadd>
   14414:	2100      	movs	r1, #0
   14416:	f7ec fa2b 	bl	870 <__aeabi_fcmpgt>
   1441a:	2800      	cmp	r0, #0
   1441c:	d003      	beq.n	14426 <floorf+0x72>
   1441e:	2d00      	cmp	r5, #0
   14420:	db09      	blt.n	14436 <floorf+0x82>
   14422:	2600      	movs	r6, #0
   14424:	e7e6      	b.n	143f4 <floorf+0x40>
   14426:	1c2e      	adds	r6, r5, #0
   14428:	e7e4      	b.n	143f4 <floorf+0x40>
   1442a:	2380      	movs	r3, #128	; 0x80
   1442c:	041b      	lsls	r3, r3, #16
   1442e:	4123      	asrs	r3, r4
   14430:	4698      	mov	r8, r3
   14432:	44a8      	add	r8, r5
   14434:	e7db      	b.n	143ee <floorf+0x3a>
   14436:	2f00      	cmp	r7, #0
   14438:	d0f5      	beq.n	14426 <floorf+0x72>
   1443a:	4e04      	ldr	r6, [pc, #16]	; (1444c <floorf+0x98>)
   1443c:	e7da      	b.n	143f4 <floorf+0x40>
   1443e:	46c0      	nop			; (mov r8, r8)
   14440:	007fffff 	.word	0x007fffff
   14444:	7149f2ca 	.word	0x7149f2ca
   14448:	7f7fffff 	.word	0x7f7fffff
   1444c:	bf800000 	.word	0xbf800000

00014450 <__fpclassifyf>:
__fpclassifyf():
   14450:	0043      	lsls	r3, r0, #1
   14452:	085b      	lsrs	r3, r3, #1
   14454:	2002      	movs	r0, #2
   14456:	2b00      	cmp	r3, #0
   14458:	d100      	bne.n	1445c <__fpclassifyf+0xc>
   1445a:	4770      	bx	lr
   1445c:	4a08      	ldr	r2, [pc, #32]	; (14480 <__fpclassifyf+0x30>)
   1445e:	3002      	adds	r0, #2
   14460:	1899      	adds	r1, r3, r2
   14462:	4a08      	ldr	r2, [pc, #32]	; (14484 <__fpclassifyf+0x34>)
   14464:	4291      	cmp	r1, r2
   14466:	d9f8      	bls.n	1445a <__fpclassifyf+0xa>
   14468:	4a07      	ldr	r2, [pc, #28]	; (14488 <__fpclassifyf+0x38>)
   1446a:	1e59      	subs	r1, r3, #1
   1446c:	3801      	subs	r0, #1
   1446e:	4291      	cmp	r1, r2
   14470:	d9f3      	bls.n	1445a <__fpclassifyf+0xa>
   14472:	4a06      	ldr	r2, [pc, #24]	; (1448c <__fpclassifyf+0x3c>)
   14474:	4694      	mov	ip, r2
   14476:	4463      	add	r3, ip
   14478:	4258      	negs	r0, r3
   1447a:	4158      	adcs	r0, r3
   1447c:	e7ed      	b.n	1445a <__fpclassifyf+0xa>
   1447e:	46c0      	nop			; (mov r8, r8)
   14480:	ff800000 	.word	0xff800000
   14484:	7effffff 	.word	0x7effffff
   14488:	007ffffe 	.word	0x007ffffe
   1448c:	80800000 	.word	0x80800000

00014490 <nanf>:
nanf():
   14490:	4800      	ldr	r0, [pc, #0]	; (14494 <nanf+0x4>)
   14492:	4770      	bx	lr
   14494:	7fc00000 	.word	0x7fc00000

00014498 <scalbnf>:
scalbnf():
   14498:	0043      	lsls	r3, r0, #1
   1449a:	b570      	push	{r4, r5, r6, lr}
   1449c:	1c0d      	adds	r5, r1, #0
   1449e:	1c04      	adds	r4, r0, #0
   144a0:	085e      	lsrs	r6, r3, #1
   144a2:	1c01      	adds	r1, r0, #0
   144a4:	2e00      	cmp	r6, #0
   144a6:	d010      	beq.n	144ca <scalbnf+0x32>
   144a8:	4827      	ldr	r0, [pc, #156]	; (14548 <scalbnf+0xb0>)
   144aa:	4286      	cmp	r6, r0
   144ac:	d80f      	bhi.n	144ce <scalbnf+0x36>
   144ae:	4927      	ldr	r1, [pc, #156]	; (1454c <scalbnf+0xb4>)
   144b0:	428e      	cmp	r6, r1
   144b2:	d911      	bls.n	144d8 <scalbnf+0x40>
   144b4:	1c21      	adds	r1, r4, #0
   144b6:	0e1b      	lsrs	r3, r3, #24
   144b8:	195b      	adds	r3, r3, r5
   144ba:	2bfe      	cmp	r3, #254	; 0xfe
   144bc:	dc29      	bgt.n	14512 <scalbnf+0x7a>
   144be:	2b00      	cmp	r3, #0
   144c0:	dd18      	ble.n	144f4 <scalbnf+0x5c>
   144c2:	4c23      	ldr	r4, [pc, #140]	; (14550 <scalbnf+0xb8>)
   144c4:	05db      	lsls	r3, r3, #23
   144c6:	4021      	ands	r1, r4
   144c8:	4319      	orrs	r1, r3
   144ca:	1c08      	adds	r0, r1, #0
   144cc:	bd70      	pop	{r4, r5, r6, pc}
   144ce:	1c20      	adds	r0, r4, #0
   144d0:	f7ec f9e2 	bl	898 <__aeabi_fadd>
   144d4:	1c01      	adds	r1, r0, #0
   144d6:	e7f8      	b.n	144ca <scalbnf+0x32>
   144d8:	2198      	movs	r1, #152	; 0x98
   144da:	1c20      	adds	r0, r4, #0
   144dc:	05c9      	lsls	r1, r1, #23
   144de:	f7ec fd49 	bl	f74 <__aeabi_fmul>
   144e2:	4b1c      	ldr	r3, [pc, #112]	; (14554 <scalbnf+0xbc>)
   144e4:	1c04      	adds	r4, r0, #0
   144e6:	429d      	cmp	r5, r3
   144e8:	db1c      	blt.n	14524 <scalbnf+0x8c>
   144ea:	0043      	lsls	r3, r0, #1
   144ec:	0e1b      	lsrs	r3, r3, #24
   144ee:	1c01      	adds	r1, r0, #0
   144f0:	3b19      	subs	r3, #25
   144f2:	e7e1      	b.n	144b8 <scalbnf+0x20>
   144f4:	1c1a      	adds	r2, r3, #0
   144f6:	3216      	adds	r2, #22
   144f8:	da19      	bge.n	1452e <scalbnf+0x96>
   144fa:	4b17      	ldr	r3, [pc, #92]	; (14558 <scalbnf+0xc0>)
   144fc:	429d      	cmp	r5, r3
   144fe:	dc08      	bgt.n	14512 <scalbnf+0x7a>
   14500:	1c21      	adds	r1, r4, #0
   14502:	4816      	ldr	r0, [pc, #88]	; (1455c <scalbnf+0xc4>)
   14504:	f000 f82e 	bl	14564 <copysignf>
   14508:	4914      	ldr	r1, [pc, #80]	; (1455c <scalbnf+0xc4>)
   1450a:	f7ec fd33 	bl	f74 <__aeabi_fmul>
   1450e:	1c01      	adds	r1, r0, #0
   14510:	e7db      	b.n	144ca <scalbnf+0x32>
   14512:	1c21      	adds	r1, r4, #0
   14514:	4812      	ldr	r0, [pc, #72]	; (14560 <scalbnf+0xc8>)
   14516:	f000 f825 	bl	14564 <copysignf>
   1451a:	4911      	ldr	r1, [pc, #68]	; (14560 <scalbnf+0xc8>)
   1451c:	f7ec fd2a 	bl	f74 <__aeabi_fmul>
   14520:	1c01      	adds	r1, r0, #0
   14522:	e7d2      	b.n	144ca <scalbnf+0x32>
   14524:	490d      	ldr	r1, [pc, #52]	; (1455c <scalbnf+0xc4>)
   14526:	f7ec fd25 	bl	f74 <__aeabi_fmul>
   1452a:	1c01      	adds	r1, r0, #0
   1452c:	e7cd      	b.n	144ca <scalbnf+0x32>
   1452e:	4808      	ldr	r0, [pc, #32]	; (14550 <scalbnf+0xb8>)
   14530:	3319      	adds	r3, #25
   14532:	4001      	ands	r1, r0
   14534:	05da      	lsls	r2, r3, #23
   14536:	430a      	orrs	r2, r1
   14538:	21cc      	movs	r1, #204	; 0xcc
   1453a:	1c10      	adds	r0, r2, #0
   1453c:	0589      	lsls	r1, r1, #22
   1453e:	f7ec fd19 	bl	f74 <__aeabi_fmul>
   14542:	1c01      	adds	r1, r0, #0
   14544:	e7c1      	b.n	144ca <scalbnf+0x32>
   14546:	46c0      	nop			; (mov r8, r8)
   14548:	7f7fffff 	.word	0x7f7fffff
   1454c:	007fffff 	.word	0x007fffff
   14550:	807fffff 	.word	0x807fffff
   14554:	ffff3cb0 	.word	0xffff3cb0
   14558:	0000c350 	.word	0x0000c350
   1455c:	0da24260 	.word	0x0da24260
   14560:	7149f2ca 	.word	0x7149f2ca

00014564 <copysignf>:
copysignf():
   14564:	0040      	lsls	r0, r0, #1
   14566:	0fc9      	lsrs	r1, r1, #31
   14568:	07c9      	lsls	r1, r1, #31
   1456a:	0840      	lsrs	r0, r0, #1
   1456c:	4308      	orrs	r0, r1
   1456e:	4770      	bx	lr

00014570 <__errno>:
__errno():
   14570:	4b01      	ldr	r3, [pc, #4]	; (14578 <__errno+0x8>)
   14572:	6818      	ldr	r0, [r3, #0]
   14574:	4770      	bx	lr
   14576:	46c0      	nop			; (mov r8, r8)
   14578:	1fffe088 	.word	0x1fffe088

0001457c <memcpy>:
memcpy():
   1457c:	2300      	movs	r3, #0
   1457e:	b510      	push	{r4, lr}
   14580:	4293      	cmp	r3, r2
   14582:	d003      	beq.n	1458c <memcpy+0x10>
   14584:	5ccc      	ldrb	r4, [r1, r3]
   14586:	54c4      	strb	r4, [r0, r3]
   14588:	3301      	adds	r3, #1
   1458a:	e7f9      	b.n	14580 <memcpy+0x4>
   1458c:	bd10      	pop	{r4, pc}

0001458e <memset>:
memset():
   1458e:	1c03      	adds	r3, r0, #0
   14590:	1882      	adds	r2, r0, r2
   14592:	4293      	cmp	r3, r2
   14594:	d002      	beq.n	1459c <memset+0xe>
   14596:	7019      	strb	r1, [r3, #0]
   14598:	3301      	adds	r3, #1
   1459a:	e7fa      	b.n	14592 <memset+0x4>
   1459c:	4770      	bx	lr

0001459e <strcpy>:
strcpy():
   1459e:	1c03      	adds	r3, r0, #0
   145a0:	780a      	ldrb	r2, [r1, #0]
   145a2:	3101      	adds	r1, #1
   145a4:	701a      	strb	r2, [r3, #0]
   145a6:	3301      	adds	r3, #1
   145a8:	2a00      	cmp	r2, #0
   145aa:	d1f9      	bne.n	145a0 <strcpy+0x2>
   145ac:	4770      	bx	lr

000145ae <strlen>:
strlen():
   145ae:	2300      	movs	r3, #0
   145b0:	5cc2      	ldrb	r2, [r0, r3]
   145b2:	3301      	adds	r3, #1
   145b4:	2a00      	cmp	r2, #0
   145b6:	d1fb      	bne.n	145b0 <strlen+0x2>
   145b8:	1e58      	subs	r0, r3, #1
   145ba:	4770      	bx	lr
$d():
   145bc:	00000ce6 	.word	0x00000ce6
   145c0:	00000cae 	.word	0x00000cae
   145c4:	00000cca 	.word	0x00000cca
   145c8:	00000ca2 	.word	0x00000ca2
   145cc:	00000cca 	.word	0x00000cca
   145d0:	00000c0e 	.word	0x00000c0e
   145d4:	00000cca 	.word	0x00000cca
   145d8:	00000ca2 	.word	0x00000ca2
   145dc:	00000cae 	.word	0x00000cae
   145e0:	00000cae 	.word	0x00000cae
   145e4:	00000c0e 	.word	0x00000c0e
   145e8:	00000ca2 	.word	0x00000ca2
   145ec:	00000d4c 	.word	0x00000d4c
   145f0:	00000d4c 	.word	0x00000d4c
   145f4:	00000d4c 	.word	0x00000d4c
   145f8:	00000cd0 	.word	0x00000cd0
   145fc:	00000cae 	.word	0x00000cae
   14600:	00000cae 	.word	0x00000cae
   14604:	00000d96 	.word	0x00000d96
   14608:	00000ca0 	.word	0x00000ca0
   1460c:	00000d96 	.word	0x00000d96
   14610:	00000c0e 	.word	0x00000c0e
   14614:	00000d96 	.word	0x00000d96
   14618:	00000ca0 	.word	0x00000ca0
   1461c:	00000cae 	.word	0x00000cae
   14620:	00000cae 	.word	0x00000cae
   14624:	00000c0e 	.word	0x00000c0e
   14628:	00000ca0 	.word	0x00000ca0
   1462c:	00000d4c 	.word	0x00000d4c
   14630:	00000d4c 	.word	0x00000d4c
   14634:	00000d4c 	.word	0x00000d4c
   14638:	00000d7a 	.word	0x00000d7a
   1463c:	000010ae 	.word	0x000010ae
   14640:	000010a6 	.word	0x000010a6
   14644:	000010a6 	.word	0x000010a6
   14648:	0000109e 	.word	0x0000109e
   1464c:	00000ff0 	.word	0x00000ff0
   14650:	00000ff0 	.word	0x00000ff0
   14654:	00001094 	.word	0x00001094
   14658:	0000109e 	.word	0x0000109e
   1465c:	00000ff0 	.word	0x00000ff0
   14660:	00001094 	.word	0x00001094
   14664:	00000ff0 	.word	0x00000ff0
   14668:	0000109e 	.word	0x0000109e
   1466c:	00000ff2 	.word	0x00000ff2
   14670:	00000ff2 	.word	0x00000ff2
   14674:	00000ff2 	.word	0x00000ff2
   14678:	00001138 	.word	0x00001138
   1467c:	00001dc8 	.word	0x00001dc8
   14680:	00001cb6 	.word	0x00001cb6
   14684:	00001d9c 	.word	0x00001d9c
   14688:	00001ca2 	.word	0x00001ca2
   1468c:	00001d9c 	.word	0x00001d9c
   14690:	00001da6 	.word	0x00001da6
   14694:	00001d9c 	.word	0x00001d9c
   14698:	00001ca2 	.word	0x00001ca2
   1469c:	00001cb6 	.word	0x00001cb6
   146a0:	00001cb6 	.word	0x00001cb6
   146a4:	00001da6 	.word	0x00001da6
   146a8:	00001ca2 	.word	0x00001ca2
   146ac:	00001cac 	.word	0x00001cac
   146b0:	00001cac 	.word	0x00001cac
   146b4:	00001cac 	.word	0x00001cac
   146b8:	0000200e 	.word	0x0000200e
   146bc:	00434341 	.word	0x00434341
   146c0:	00000078 	.word	0x00000078
   146c4:	00000079 	.word	0x00000079
   146c8:	0000007a 	.word	0x0000007a
   146cc:	4f525947 	.word	0x4f525947
   146d0:	00000000 	.word	0x00000000
   146d4:	0000fe18 	.word	0x0000fe18
   146d8:	0000fe2c 	.word	0x0000fe2c
   146dc:	0000fe3c 	.word	0x0000fe3c
   146e0:	0000fe06 	.word	0x0000fe06
   146e4:	0000fe38 	.word	0x0000fe38
   146e8:	0000fdfa 	.word	0x0000fdfa
   146ec:	0000fe30 	.word	0x0000fe30
   146f0:	0000fdee 	.word	0x0000fdee
   146f4:	0000fe34 	.word	0x0000fe34
   146f8:	0000fde2 	.word	0x0000fde2
   146fc:	0000fe40 	.word	0x0000fe40
   14700:	0000fdd6 	.word	0x0000fdd6
   14704:	0000fe44 	.word	0x0000fe44
   14708:	0000fdca 	.word	0x0000fdca
   1470c:	0000fdc4 	.word	0x0000fdc4
   14710:	0000fdbe 	.word	0x0000fdbe
   14714:	78716d5f 	.word	0x78716d5f
   14718:	6c64695f 	.word	0x6c64695f
   1471c:	61745f65 	.word	0x61745f65
   14720:	00006b73 	.word	0x00006b73

00014724 <_mqx_path>:
   14724:	000147ac                                .G..

00014728 <_mqx_vendor>:
   14728:	000147f0                                .G..

0001472c <_mqxlite_version_number>:
   1472c:	01010001                                ....

00014730 <_mqx_version_number>:
   14730:	04000000 312e3156 0000312e 20706553     ....V1.1.1..Sep 
   14740:	32203431 20353130 30207461 32313a31     14 2015 at 01:12
   14750:	0033313a 20296328 31313032 65724620     :13.(c) 2011 Fre
   14760:	61637365 5320656c 63696d65 75646e6f     escale Semicondu
   14770:	726f7463 6c41202e 6972206c 73746867     ctor. All rights
   14780:	73657220 65767265 00002e64 5f505350      reserved...PSP_
   14790:	49564552 4e4f4953 00000000 5f4e4547     REVISION....GEN_
   147a0:	49564552 4e4f4953 00000000 462f3a43     REVISION....C:/F
   147b0:	73656572 656c6163 53444b2f 302e335f     reescale/KDS_3.0
   147c0:	652f302e 70696c63 502f6573 65636f72     .0/eclipse/Proce
   147d0:	726f7373 65707845 6c2f7472 6d2f6269     ssorExpert/lib/m
   147e0:	696c7871 562f6574 2e312e31 00002f31     qxlite/V1.1.1/..
   147f0:	65657246 6c616373 72462f65 63736565     Freescale/Freesc
   14800:	20656c61 0058514d 2e302e34 00000030     ale MQX.4.0.0...
   14810:	6e69616d 00000000 65736472 6164736e     main....rdsensda
   14820:	00006174 69737566 00006e6f 6367616d     ta..fusion..magc
   14830:	00006c61                                al..

00014834 <MQX_template_list>:
   14834:	00000001 0000d001 0000028c 00000008     ................
   14844:	00014810 00000001 00000000 00000002     .H..............
   14854:	0000d0d9 0000048c 00000009 00014818     .............H..
	...
   1486c:	00000003 0000d119 0000048c 0000000a     ................
   1487c:	00014824 00000000 00000000 00000004     $H..............
   1488c:	0000d1a9 0000038c 0000000b 0001482c     ............,H..
	...

000148c0 <MQX_init_struct>:
   148c0:	00000001 20002cd4 20002f28 00000001     .....,. (/. ....
   148d0:	00000110 20002f28 00000130 20003270     ....(/. 0...p2. 
   148e0:	00014834 65646e75 20202e66 00000000     4H..undef.  ....
   148f0:	61666564 00746c75 736f6361 00000066     default.acosf...
   14900:	66776f70 00000000 74727173 00000066     powf....sqrtf...

00014910 <dp_h>:
   14910:	00000000 3f15c000                       .......?

00014918 <dp_l>:
   14918:	00000000 35d1cfdc                       .......5

00014920 <bp>:
   14920:	3f800000 3fc00000                       ...?...?

00014928 <npio2_hw>:
   14928:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
   14938:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
   14948:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
   14958:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
   14968:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
   14978:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
   14988:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
   14998:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

000149a8 <two_over_pi>:
   149a8:	000000a2 000000f9 00000083 0000006e     ............n...
   149b8:	0000004e 00000044 00000015 00000029     N...D.......)...
   149c8:	000000fc 00000027 00000057 000000d1     ....'...W.......
   149d8:	000000f5 00000034 000000dd 000000c0     ....4...........
   149e8:	000000db 00000062 00000095 00000099     ....b...........
   149f8:	0000003c 00000043 00000090 00000041     <...C.......A...
   14a08:	000000fe 00000051 00000063 000000ab     ....Q...c.......
   14a18:	000000de 000000bb 000000c5 00000061     ............a...
   14a28:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
   14a38:	00000042 0000004d 000000d2 000000e0     B...M...........
   14a48:	00000006 00000049 0000002e 000000ea     ....I...........
   14a58:	00000009 000000d1 00000092 0000001c     ................
   14a68:	000000fe 0000001d 000000eb 0000001c     ................
   14a78:	000000b1 00000029 000000a7 0000003e     ....).......>...
   14a88:	000000e8 00000082 00000035 000000f5     ........5.......
   14a98:	0000002e 000000bb 00000044 00000084     ........D.......
   14aa8:	000000e9 0000009c 00000070 00000026     ........p...&...
   14ab8:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
   14ac8:	00000039 00000091 000000d6 00000039     9...........9...
   14ad8:	00000083 00000053 00000039 000000f4     ....S...9.......
   14ae8:	0000009c 00000084 0000005f 0000008b     ........_.......
   14af8:	000000bd 000000f9 00000028 0000003b     ........(...;...
   14b08:	0000001f 000000f8 00000097 000000ff     ................
   14b18:	000000de 00000005 00000098 0000000f     ................
   14b28:	000000ef 0000002f 00000011 0000008b     ..../...........
   14b38:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
   14b48:	0000006d 00000036 0000007e 000000cf     m...6...~.......
   14b58:	00000027 000000cb 00000009 000000b7     '...............
   14b68:	0000004f 00000046 0000003f 00000066     O...F...?...f...
   14b78:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
   14b88:	00000075 00000027 000000ba 000000c7     u...'...........
   14b98:	000000eb 000000e5 000000f1 0000007b     ............{...
   14ba8:	0000003d 00000007 00000039 000000f7     =.......9.......
   14bb8:	0000008a 00000052 00000092 000000ea     ....R...........
   14bc8:	0000006b 000000fb 0000005f 000000b1     k......._.......
   14bd8:	0000001f 0000008d 0000005d 00000008     ........].......
   14be8:	00000056 00000003 00000030 00000046     V.......0...F...
   14bf8:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
   14c08:	000000f0 000000cf 000000bc 00000020     ............ ...
   14c18:	0000009a 000000f4 00000036 0000001d     ........6.......
   14c28:	000000a9 000000e3 00000091 00000061     ............a...
   14c38:	0000005e 000000e6 0000001b 00000008     ^...............
   14c48:	00000065 00000099 00000085 0000005f     e..........._...
   14c58:	00000014 000000a0 00000068 00000040     ........h...@...
   14c68:	0000008d 000000ff 000000d8 00000080     ................
   14c78:	0000004d 00000073 00000027 00000031     M...s...'...1...
   14c88:	00000006 00000006 00000015 00000056     ............V...
   14c98:	000000ca 00000073 000000a8 000000c9     ....s...........
   14ca8:	00000060 000000e2 0000007b 000000c0     `.......{.......
   14cb8:	0000008c 0000006b                       ....k...

00014cc0 <init_jk>:
   14cc0:	00000004 00000007 00000009              ............

00014ccc <PIo2>:
   14ccc:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
   14cdc:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
   14cec:	1fc40000 1bc60000 17440000              ..........D.

00014cf8 <TWO52>:
   14cf8:	00000000 43300000 00000000 c3300000     ......0C......0.
   14d08:	00000043                                C...

00014d0c <__sf_fake_stdin>:
	...

00014d2c <__sf_fake_stdout>:
	...

00014d4c <__sf_fake_stderr>:
	...

00014d6c <_init>:
$t():
   14d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14d6e:	46c0      	nop			; (mov r8, r8)
   14d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
   14d72:	bc08      	pop	{r3}
   14d74:	469e      	mov	lr, r3
   14d76:	4770      	bx	lr

00014d78 <_fini>:
   14d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14d7a:	46c0      	nop			; (mov r8, r8)
   14d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   14d7e:	bc08      	pop	{r3}
   14d80:	469e      	mov	lr, r3
   14d82:	4770      	bx	lr

00014d84 <_sched_start_internal>:
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:90
 *END*----------------------------------------------------------------------*/

 ASM_PUBLIC_BEGIN(_sched_start_internal)
 ASM_PUBLIC_FUNC(_sched_start_internal)
ASM_LABEL(_sched_start_internal)
                GET_KERNEL_DATA r0
   14d84:	4896      	ldr	r0, [pc, #600]	; (14fe0 <__get_CONTROL+0x6>)
   14d86:	6800      	ldr	r0, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:91
                b sched_internal
   14d88:	e029      	b.n	14dde <sched_internal>

00014d8a <_sched_run_internal>:
_sched_run_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:99
//-------------------------------------------------------------------------------

 ASM_PUBLIC_BEGIN(_sched_run_internal)
 ASM_PUBLIC_FUNC(_sched_run_internal)
ASM_LABEL(_sched_run_internal)
                GET_KERNEL_DATA r0
   14d8a:	4895      	ldr	r0, [pc, #596]	; (14fe0 <__get_CONTROL+0x6>)
   14d8c:	6800      	ldr	r0, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:100
                b sched_internal
   14d8e:	e026      	b.n	14dde <sched_internal>

00014d90 <_sched_check_scheduler_internal>:
_sched_check_scheduler_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:108
//-------------------------------------------------------------------------------

 ASM_PUBLIC_BEGIN(_sched_check_scheduler_internal)
 ASM_PUBLIC_FUNC(_sched_check_scheduler_internal)
ASM_LABEL(_sched_check_scheduler_internal)
                GET_KERNEL_DATA r0
   14d90:	4893      	ldr	r0, [pc, #588]	; (14fe0 <__get_CONTROL+0x6>)
   14d92:	6800      	ldr	r0, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:110

                ldrh r1, [r0, #KD_IN_ISR]
   14d94:	8b01      	ldrh	r1, [r0, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:111
                cmp r1, #0
   14d96:	2900      	cmp	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:112
                bne _sched_check_scheduler_internal_end
   14d98:	d105      	bne.n	14da6 <_sched_check_scheduler_internal_end>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:114

                ldr r1, [r0, #KD_CURRENT_READY_Q]
   14d9a:	6a41      	ldr	r1, [r0, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:115
                ldr r2, [r0, #KD_ACTIVE_PTR]
   14d9c:	69c2      	ldr	r2, [r0, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:116
                ldr r3, [r2, #TD_MY_QUEUE]
   14d9e:	69d3      	ldr	r3, [r2, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:117
                cmp r1, r3
   14da0:	4299      	cmp	r1, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:120

                // current task is still the active task
                beq _sched_check_scheduler_internal_end
   14da2:	d000      	beq.n	14da6 <_sched_check_scheduler_internal_end>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:135
                //bl _set_pend_sv
                cpsie i
                pop {pc}
ASM_LABEL(_sched_check_scheduler_internal2)
#endif
                b _sched_execute_scheduler_internal
   14da4:	e000      	b.n	14da8 <_sched_execute_scheduler_internal>

00014da6 <_sched_check_scheduler_internal_end>:
_sched_check_scheduler_internal_end():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:138

ASM_LABEL(_sched_check_scheduler_internal_end)
                bx lr
   14da6:	4770      	bx	lr

00014da8 <_sched_execute_scheduler_internal>:
_sched_execute_scheduler_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:168
ASM_LABEL(_sched_execute_scheduler_internal2)
                cpsie i
#endif

                // store active task registers
                STORE_ALL_REGISTERS
   14da8:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
   14daa:	4640      	mov	r0, r8
   14dac:	4649      	mov	r1, r9
   14dae:	4652      	mov	r2, sl
   14db0:	465b      	mov	r3, fp
   14db2:	b40f      	push	{r0, r1, r2, r3}
   14db4:	b4f0      	push	{r4, r5, r6, r7}
   14db6:	f3ef 8410 	mrs	r4, PRIMASK
   14dba:	b410      	push	{r4}
   14dbc:	f3ef 8109 	mrs	r1, PSP
   14dc0:	f3ef 8500 	mrs	r5, CPSR
   14dc4:	4e87      	ldr	r6, [pc, #540]	; (14fe4 <__get_CONTROL+0xa>)
   14dc6:	4335      	orrs	r5, r6
   14dc8:	4662      	mov	r2, ip
   14dca:	4673      	mov	r3, lr
   14dcc:	4674      	mov	r4, lr
   14dce:	4608      	mov	r0, r1
   14dd0:	3034      	adds	r0, #52	; 0x34
   14dd2:	c03c      	stmia	r0!, {r2, r3, r4, r5}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:170
                // disable interrupts
                cpsid i
   14dd4:	b672      	cpsid	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:172

                GET_KERNEL_DATA r0
   14dd6:	4882      	ldr	r0, [pc, #520]	; (14fe0 <__get_CONTROL+0x6>)
   14dd8:	6800      	ldr	r0, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:173
                ldr r3, [r0, #KD_ACTIVE_PTR]        // get active task descriptor
   14dda:	69c3      	ldr	r3, [r0, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:174
                str r1, [r3, #TD_STACK_PTR]         // store task SP to task descriptor td
   14ddc:	6159      	str	r1, [r3, #20]

00014dde <sched_internal>:
sched_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:181
#if MQX_KERNEL_LOGGING
                KLOG r0, ASM_PREFIX(_klog_execute_scheduler_internal)  // kernel log this function
#endif

ASM_LABEL(sched_internal)
                ldr r1, [r0, #KD_CURRENT_READY_Q]   // get current ready q
   14dde:	6a41      	ldr	r1, [r0, #36]	; 0x24

00014de0 <find_noempty_que>:
find_noempty_que():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:183
ASM_LABEL(find_noempty_que)
                ldr r2, [r1, #0]                    // address of first td
   14de0:	680a      	ldr	r2, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:184
                cmp r2, r1                          // ready_q structure itself?
   14de2:	428a      	cmp	r2, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:185
                bne switch_task
   14de4:	d107      	bne.n	14df6 <switch_task>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:186
                ldr r1, [r1, #RQ_NEXT_Q]            // try next queue
   14de6:	6889      	ldr	r1, [r1, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:187
                movs r1, r1
   14de8:	0009      	movs	r1, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:188
                bne find_noempty_que
   14dea:	d1f9      	bne.n	14de0 <find_noempty_que>

00014dec <no_one_to_run>:
no_one_to_run():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:193

                // r1 is 0 -> empty
ASM_LABEL(no_one_to_run)
                // wait for interrupt
                cpsie i
   14dec:	b662      	cpsie	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:194
                wfi
   14dee:	bf30      	wfi
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:195
                cpsid i
   14df0:	b672      	cpsid	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:198

                // TODO check r0, must be kernel data
                ldr r1, [r0, #KD_READY_Q_LIST]      // get first queue from ready list
   14df2:	6a01      	ldr	r1, [r0, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:199
                b find_noempty_que
   14df4:	e7f4      	b.n	14de0 <find_noempty_que>

00014df6 <switch_task>:
switch_task():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:203

ASM_LABEL(switch_task)
                // update kernel structures
                str r1, [r0, #KD_CURRENT_READY_Q]   // store addr for active que
   14df6:	6241      	str	r1, [r0, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:204
                str r2, [r0, #KD_ACTIVE_PTR]        // active task descriptor
   14df8:	61c2      	str	r2, [r0, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:206

                ldrh r3, [r2, #TD_TASK_SR]
   14dfa:	8c93      	ldrh	r3, [r2, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:207
                strh r3, [r0, #KD_ACTIVE_SR]        // restore priority mask for enabled interrupt for active task
   14dfc:	8343      	strh	r3, [r0, #26]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:219
                KLOG r0, ASM_PREFIX(_klog_context_switch_internal)  // do kernel logging
#endif

                // activate task, restore registers stacked in the following order (from higher addresses to lower addresses):
                // xPSR, PC, LR, R12, R3, R2, R1, R0, R11, R10, R9, R8, R7, R6, R5, R4, PRIMASK
                ldr r0, [r2, #TD_STACK_PTR]         // get task SP
   14dfe:	6950      	ldr	r0, [r2, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:220
                mov r1, r0
   14e00:	4601      	mov	r1, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:221
                adds r1, r1, #36
   14e02:	3124      	adds	r1, #36	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:222
                mov r12, r1
   14e04:	468c      	mov	ip, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:224
                //load r4-r10
                adds r0, r0, #4
   14e06:	3004      	adds	r0, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:225
                ldm r0!, {r1-r7}
   14e08:	c8fe      	ldmia	r0!, {r1, r2, r3, r4, r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:226
                mov r10, r7
   14e0a:	46ba      	mov	sl, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:227
                mov r9, r6
   14e0c:	46b1      	mov	r9, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:228
                mov r8, r5
   14e0e:	46a8      	mov	r8, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:229
                mov r7, r4
   14e10:	4627      	mov	r7, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:230
                mov r6, r3
   14e12:	461e      	mov	r6, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:231
                mov r5, r2
   14e14:	4615      	mov	r5, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:232
                mov r4, r1
   14e16:	460c      	mov	r4, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:234
                //load r11
                ldm r0!, {r1}
   14e18:	c802      	ldmia	r0!, {r1}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:235
                mov r11, r1
   14e1a:	468b      	mov	fp, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:237
                //check if we are returning from the ISR or not
                mrs r1, CONTROL
   14e1c:	f3ef 8114 	mrs	r1, CONTROL
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:238
                cmp r1, #0
   14e20:	2900      	cmp	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:239
                bne rest_of_stack_frame_restore
   14e22:	d107      	bne.n	14e34 <rest_of_stack_frame_restore>

00014e24 <return_from_interrupt>:
return_from_interrupt():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:242
ASM_LABEL(return_from_interrupt)
                // returning from ISR - rest of stack frame will be loaded automatickly by HW when returning from the ISR
                mov r1, r12
   14e24:	4661      	mov	r1, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:243
                msr PSP, r1
   14e26:	f381 8809 	msr	PSP, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:245
                //load PRIMASK
                subs r1, r1, #36
   14e2a:	3924      	subs	r1, #36	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:246
                ldm r1!, {r2}
   14e2c:	c904      	ldmia	r1!, {r2}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:247
                msr PRIMASK, r2
   14e2e:	f382 8810 	msr	PRIMASK, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:249
                //load lr from the main stack
                pop {pc}
   14e32:	bd00      	pop	{pc}

00014e34 <rest_of_stack_frame_restore>:
rest_of_stack_frame_restore():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:253

ASM_LABEL(rest_of_stack_frame_restore)
                // returning from task, restore xPSR, PC, LR, R12, R3-R0 and also the PRIMASK
                mov r1, r12
   14e34:	4661      	mov	r1, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:254
                adds r1, r1, #32
   14e36:	3120      	adds	r1, #32
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:255
                msr PSP, r1
   14e38:	f381 8809 	msr	PSP, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:256
                adds r0, r0, #16
   14e3c:	3010      	adds	r0, #16
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:258
                //restore R12, LR, PC
                ldm r0!, {r1-r3}
   14e3e:	c80e      	ldmia	r0!, {r1, r2, r3}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:259
                mov r12, r1
   14e40:	468c      	mov	ip, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:260
                mov lr, r2
   14e42:	4696      	mov	lr, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:262
                //read stacked xPSR value
                ldm r0!, {r1}
   14e44:	c802      	ldmia	r0!, {r1}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:263
                subs r0, r0, #32
   14e46:	3820      	subs	r0, #32
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:266

                //bit 9 of the xPSR indicates the stack alignment on exception entry, if set SP has to be moved by 4 bytes
                ldr r2, =0x200
   14e48:	4a67      	ldr	r2, [pc, #412]	; (14fe8 <__get_CONTROL+0xe>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:267
                ands r2, r1, r2
   14e4a:	400a      	ands	r2, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:268
                beq move_pc_at_the_start_of_stackframe
   14e4c:	d004      	beq.n	14e58 <move_pc_at_the_start_of_stackframe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:269
                mrs r2, PSP
   14e4e:	f3ef 8209 	mrs	r2, PSP
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:270
                adds r2, r2, #4
   14e52:	3204      	adds	r2, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:271
                msr PSP, r2
   14e54:	f382 8809 	msr	PSP, r2

00014e58 <move_pc_at_the_start_of_stackframe>:
move_pc_at_the_start_of_stackframe():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:273
ASM_LABEL(move_pc_at_the_start_of_stackframe)
                mov r2, r0
   14e58:	4602      	mov	r2, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:274
                subs r2, r2, #36
   14e5a:	3a24      	subs	r2, #36	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:277
                //restore xPSR register, do not execute any instruction that updates flags after that point
            #ifdef __GNUC__
                msr APSR_nzcvq, r1
   14e5c:	f381 8800 	msr	CPSR_f, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:282
            #else
                msr APSR, r1
            #endif
                //store stacked pc value (currently in r3) at the beginning of the stack frame to be later poped directly into the PC register
                push {r3}
   14e60:	b408      	push	{r3}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:283
                push {r4}
   14e62:	b410      	push	{r4}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:284
                ldm r2!, {r4}
   14e64:	ca10      	ldmia	r2!, {r4}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:286
                //restore R3-R0
                ldm r0, {r0-r3}
   14e66:	c80f      	ldmia	r0, {r0, r1, r2, r3}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:300
                movs r0, #1                         // user mode
ASM_LABEL(_load_control)
                msr CONTROL, r0
#endif

                msr PRIMASK, r4
   14e68:	f384 8810 	msr	PRIMASK, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:301
                pop {r4}
   14e6c:	bc10      	pop	{r4}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:302
                pop {pc}
   14e6e:	bd00      	pop	{pc}

00014e70 <_mqx_api_call>:
_mqx_api_call_end():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:324
#if MQX_ENABLE_USER_MODE
                push {lr}
                svc SVC_MQX_FN
#endif
ASM_LABEL(_mqx_api_call_end)
                b _mqx_api_call_end
   14e70:	e7fe      	b.n	14e70 <_mqx_api_call>

00014e72 <_task_block>:
_task_block():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:399
 ASM_PUBLIC_BEGIN(_task_block)
 ASM_PUBLIC_FUNC(_task_block)
ASM_LABEL(_task_block)

                // store active task registers
                STORE_ALL_REGISTERS
   14e72:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
   14e74:	4640      	mov	r0, r8
   14e76:	4649      	mov	r1, r9
   14e78:	4652      	mov	r2, sl
   14e7a:	465b      	mov	r3, fp
   14e7c:	b40f      	push	{r0, r1, r2, r3}
   14e7e:	b4f0      	push	{r4, r5, r6, r7}
   14e80:	f3ef 8410 	mrs	r4, PRIMASK
   14e84:	b410      	push	{r4}
   14e86:	f3ef 8109 	mrs	r1, PSP
   14e8a:	f3ef 8500 	mrs	r5, CPSR
   14e8e:	4e55      	ldr	r6, [pc, #340]	; (14fe4 <__get_CONTROL+0xa>)
   14e90:	4335      	orrs	r5, r6
   14e92:	4662      	mov	r2, ip
   14e94:	4673      	mov	r3, lr
   14e96:	4674      	mov	r4, lr
   14e98:	4608      	mov	r0, r1
   14e9a:	3034      	adds	r0, #52	; 0x34
   14e9c:	c03c      	stmia	r0!, {r2, r3, r4, r5}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:401
                //disable interrupts
                cpsid i
   14e9e:	b672      	cpsid	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:403

                GET_KERNEL_DATA r0
   14ea0:	484f      	ldr	r0, [pc, #316]	; (14fe0 <__get_CONTROL+0x6>)
   14ea2:	6800      	ldr	r0, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:404
                ldr r3, [r0, #KD_ACTIVE_PTR]        // get active task descriptor
   14ea4:	69c3      	ldr	r3, [r0, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:405
                str r1, [r3, #TD_STACK_PTR]         // store task SP to task descriptor td
   14ea6:	6159      	str	r1, [r3, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:409


                // set task block bit
                ldr r2, [r3, #TD_STATE]
   14ea8:	689a      	ldr	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:410
                movs r1, #1                        // TODO change from number to define
   14eaa:	2101      	movs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:411
                orrs r2, r2, r1
   14eac:	430a      	orrs	r2, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:412
                str r2, [r3, #TD_STATE]
   14eae:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:418

#if MQX_KERNEL_LOGGING
                KLOG r0, ASM_PREFIX(_klog_block_internal)        // kernel log this function
#endif // MQX_KERNEL_LOGGING
                // remove active task from ready queue
                ldr r2, [r3, #TD_TD_PREV]           // get ptr to ready_q structure
   14eb0:	685a      	ldr	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:419
                ldr r1, [r3, #TD_TD_NEXT]
   14eb2:	6819      	ldr	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:420
                str r1, [r2, #RQ_HEAD_READY_Q]
   14eb4:	6011      	str	r1, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:421
                str r2, [r1, #TD_TD_PREV]
   14eb6:	604a      	str	r2, [r1, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:423

                b sched_internal   // Search for the next task in the ready queue.
   14eb8:	e791      	b.n	14dde <sched_internal>

00014eba <_int_kernel_isr>:
_int_kernel_isr():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:441

// kernel interrupt handler
 ASM_PUBLIC_BEGIN(_int_kernel_isr)
 ASM_PUBLIC_FUNC(_int_kernel_isr)
ASM_LABEL(_int_kernel_isr)
                mrs  r0, PRIMASK
   14eba:	f3ef 8010 	mrs	r0, PRIMASK
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:442
                cpsid i
   14ebe:	b672      	cpsid	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:443
                push {lr}
   14ec0:	b500      	push	{lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:444
                push {r0}
   14ec2:	b401      	push	{r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:446

                GET_KERNEL_DATA r3              // get the kernel data address
   14ec4:	4b46      	ldr	r3, [pc, #280]	; (14fe0 <__get_CONTROL+0x6>)
   14ec6:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:449

                // increment in interrupt counter
                ldrh r1, [r3, #KD_IN_ISR]
   14ec8:	8b19      	ldrh	r1, [r3, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:450
                adds r1, r1, #1
   14eca:	3101      	adds	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:451
                strh r1, [r3, #KD_IN_ISR]
   14ecc:	8319      	strh	r1, [r3, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:454

                // create interrupt content
                ldr r0, =0                      // error code (set 0)
   14ece:	4847      	ldr	r0, [pc, #284]	; (14fec <__get_CONTROL+0x12>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:455
                push {r0}                       // store in stack
   14ed0:	b401      	push	{r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:456
                mrs r1, IPSR                    // exception number
   14ed2:	f3ef 8105 	mrs	r1, IPSR
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:457
                ldr r0, [r3, #KD_INTERRUPT_CONTEXT_PTR] // previous interrupt content
   14ed6:	6b58      	ldr	r0, [r3, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:458
                push {r0-r1}                    // store in stack
   14ed8:	b403      	push	{r0, r1}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:460

                mrs r0, MSP                     // get address of interrupt content
   14eda:	f3ef 8008 	mrs	r0, MSP
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:461
                str r0, [r3, #KD_INTERRUPT_CONTEXT_PTR] // store address of actual interrupt content in kernel data
   14ede:	6358      	str	r0, [r3, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:463

                mov r0, r1
   14ee0:	4608      	mov	r0, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:480
#endif // MQX_KERNEL_LOGGING
                // get C function address from MQX interrupt table
                // r0 - interrupt number

                // check if isr is in table range
                ldr r2, [r3, #KD_LAST_USER_ISR_VECTOR]
   14ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:483

                // cbz r2, _isr_run_default       // isr not used (cbz not working in CW)
                cmp r2, #0
   14ee4:	2a00      	cmp	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:484
                bne _isr_skip_run_default1       // isr not used (this is CW workaround)
   14ee6:	d100      	bne.n	14eea <_isr_skip_run_default1>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:485
                b _isr_run_default
   14ee8:	e03a      	b.n	14f60 <_isr_run_default>

00014eea <_isr_skip_run_default1>:
_isr_skip_run_default1():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:488
ASM_LABEL(_isr_skip_run_default1)

                cmp r0, r2
   14eea:	4290      	cmp	r0, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:489
                bhi _isr_run_default
   14eec:	d838      	bhi.n	14f60 <_isr_run_default>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:491

                ldr r2, [r3, #KD_FIRST_USER_ISR_VECTOR]
   14eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:492
                subs r1, r0, r2                         // r1 = actual exception number in table
   14ef0:	1a81      	subs	r1, r0, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:493
                blt _isr_run_default
   14ef2:	db35      	blt.n	14f60 <_isr_run_default>

00014ef4 <_int_kernel_isr_vect_ok>:
_int_kernel_isr_vect_ok():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:535
#else /* MQX_SPARSE_ISR_TABLE */

ASM_LABEL(_int_kernel_isr_vect_ok)
                // calculate offset in table
                // each table entry is 12 bytes in size
                movs r2, #12
   14ef4:	220c      	movs	r2, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:536
                muls r1, r2, r1
   14ef6:	4351      	muls	r1, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:538

                ldr r2, [r3, #KD_INTERRUPT_TABLE_PTR]       // pointer to interrupt table begin
   14ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:539
                add r1, r1, r2                              // get address of entry in table
   14efa:	4411      	add	r1, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:540
                ldr r2, [r1, #0]
   14efc:	680a      	ldr	r2, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:541
                ldr r0, [r1, #IT_APP_ISR_DATA]              // move notifier data into r0 = first parameter in C func
   14efe:	6888      	ldr	r0, [r1, #8]

00014f00 <_isr_execute>:
_isr_execute():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:548

ASM_LABEL(_isr_execute)
                // r0 = first parameter in C func
                // r2 contain interrupt function address

                cpsie i
   14f00:	b662      	cpsie	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:550
                //MSR PRIMASK, R11
                push {r3}
   14f02:	b408      	push	{r3}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:552

                blx r2
   14f04:	4790      	blx	r2

00014f06 <_int_kernel_isr_epilog>:
_int_kernel_isr_epilog():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:556

ASM_LABEL(_int_kernel_isr_epilog)

                pop {r3}
   14f06:	bc08      	pop	{r3}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:558
                //MRS  R11, PRIMASK
                cpsid i
   14f08:	b672      	cpsid	i

00014f0a <_int_kernel_isr_return_internal>:
_int_kernel_isr_return_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:577
                pop {r0-r3}
ASM_LABEL(_isr_return_no_logging)
#endif /* MQX_KERNEL_LOGGING */

                // remove interrupt content
                pop {r0-r1}
   14f0a:	bc03      	pop	{r0, r1}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:578
                str r0, [r3, #KD_INTERRUPT_CONTEXT_PTR] // update pointer to interrupt content
   14f0c:	6358      	str	r0, [r3, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:580

                pop {r0}                                // error code
   14f0e:	bc01      	pop	{r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:583

                // decrement interrupt counter
                ldrh r1, [r3, #KD_IN_ISR]
   14f10:	8b19      	ldrh	r1, [r3, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:584
                subs r1, r1, #1
   14f12:	3901      	subs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:585
                strh r1, [r3, #KD_IN_ISR]
   14f14:	8319      	strh	r1, [r3, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:587

                cmp r1, #0
   14f16:	2900      	cmp	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:588
                bne _isr_return_end        // waiting another isr, do not reschedule
   14f18:	d11e      	bne.n	14f58 <_isr_return_end>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:592

                // check for reschedule
                // check preemtion
                ldr r2, [r3, #KD_ACTIVE_PTR]    // TD pointer
   14f1a:	69da      	ldr	r2, [r3, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:593
                ldr r0, [r2, #TD_FLAGS]
   14f1c:	6a90      	ldr	r0, [r2, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:594
                ldr r1, =TASK_PREEMPTION_DISABLED
   14f1e:	4934      	ldr	r1, [pc, #208]	; (14ff0 <__get_CONTROL+0x16>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:595
                tst r0, r1
   14f20:	4208      	tst	r0, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:596
                bne _isr_return_end
   14f22:	d119      	bne.n	14f58 <_isr_return_end>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:600

                // if a different TD at head of current readyq, then we need to run the scheduler
                // check for reschedule
                ldr r1, [r3, #KD_CURRENT_READY_Q]
   14f24:	6a59      	ldr	r1, [r3, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:601
                ldr r1, [r1]
   14f26:	6809      	ldr	r1, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:602
                cmp r1, r2
   14f28:	4291      	cmp	r1, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:604

                beq _isr_return_end
   14f2a:	d015      	beq.n	14f58 <_isr_return_end>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:608

                // store rest of stack frame that is not stacked automatically by the HW when entering an exception
                // i.e. R11, R10, R9, R8, R7, R6, R5, R4, PRIMASK
                mrs r1, PSP
   14f2c:	f3ef 8109 	mrs	r1, PSP
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:610
                // get PC and increment it by 1
                adds r1, r1, #24
   14f30:	3118      	adds	r1, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:611
                ldm r1!, {r0}
   14f32:	c901      	ldmia	r1!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:612
                adds r0, r0, #1
   14f34:	3001      	adds	r0, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:613
                subs r1, r1, #4
   14f36:	3904      	subs	r1, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:614
                stm r1!, {r0}
   14f38:	c101      	stmia	r1!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:615
                subs r1, r1, #64
   14f3a:	3940      	subs	r1, #64	; 0x40
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:617
                //get PRIMASK from the main stack and store it in the process stack
                pop {r0}
   14f3c:	bc01      	pop	{r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:618
                stm r1!, {r0}
   14f3e:	c101      	stmia	r1!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:619
                stm r1!, {r4-r7}
   14f40:	c1f0      	stmia	r1!, {r4, r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:620
                mov r2, r8
   14f42:	4642      	mov	r2, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:621
                mov r3, r9
   14f44:	464b      	mov	r3, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:622
                mov r4, r10
   14f46:	4654      	mov	r4, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:623
                mov r5, r11
   14f48:	465d      	mov	r5, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:624
                stm r1!, {r2-r5}
   14f4a:	c13c      	stmia	r1!, {r2, r3, r4, r5}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:625
                subs r1, r1, #36
   14f4c:	3924      	subs	r1, #36	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:628

                //store new PSP value into TD
                GET_KERNEL_DATA r0
   14f4e:	4824      	ldr	r0, [pc, #144]	; (14fe0 <__get_CONTROL+0x6>)
   14f50:	6800      	ldr	r0, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:629
                ldr r3, [r0, #KD_ACTIVE_PTR]        // get active task descriptor
   14f52:	69c3      	ldr	r3, [r0, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:630
                str r1, [r3, #TD_STACK_PTR]         // store task SP to task descriptor td
   14f54:	6159      	str	r1, [r3, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:632

                b sched_internal
   14f56:	e742      	b.n	14dde <sched_internal>

00014f58 <_isr_return_end>:
_isr_return_end():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:635

ASM_LABEL(_isr_return_end)
                pop {r0}
   14f58:	bc01      	pop	{r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:636
                msr PRIMASK, r0
   14f5a:	f380 8810 	msr	PRIMASK, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:637
                pop {pc}
   14f5e:	bd00      	pop	{pc}

00014f60 <_isr_run_default>:
_isr_run_default():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:642

ASM_LABEL(_isr_run_default)
                // r0 - interrupt number

                ldr r2, [r3, #KD_DEFAULT_ISR]
   14f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:644

                b _isr_execute
   14f62:	e7cd      	b.n	14f00 <_isr_execute>

00014f64 <_psp_exception_return>:
_psp_exception_return():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:658
 *END*----------------------------------------------------------------------*/

 ASM_PUBLIC_BEGIN(_psp_exception_return)
 ASM_PUBLIC_FUNC(_psp_exception_return)
ASM_LABEL(_psp_exception_return)
                cpsid i
   14f64:	b672      	cpsid	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:659
                push {r0, r1, r2, r4-r7}    // store parameter and registers which are used for copy and cpu do not store if
   14f66:	b4f7      	push	{r0, r1, r2, r4, r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:661

                GET_KERNEL_DATA r3
   14f68:	4b1d      	ldr	r3, [pc, #116]	; (14fe0 <__get_CONTROL+0x6>)
   14f6a:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:664

                // copy actual int context + 4WORDS -> prev int context - (1 + 8)WORDS
                ldr r2, [r3, #KD_INTERRUPT_CONTEXT_PTR]    // get actual int context
   14f6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:665
                adds r2, r2, #16               // calculate source address
   14f6e:	3210      	adds	r2, #16
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:667

                ldr r1, [r2]
   14f70:	6811      	ldr	r1, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:668
                mov lr, r1                     // lr - return from exception... (0xfffffff1)
   14f72:	468e      	mov	lr, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:669
                adds r2, r2, #4                // increment r2 by 4
   14f74:	3204      	adds	r2, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:672

                // modify return address (PC) in exception stack frame (kernel isr epilog)
                ldr r0, =_int_kernel_isr_epilog
   14f76:	481f      	ldr	r0, [pc, #124]	; (14ff4 <__get_CONTROL+0x1a>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:673
                movs r1, #1
   14f78:	2101      	movs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:674
                bics r0, r0, r1
   14f7a:	4388      	bics	r0, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:675
                str r0, [r2, #24]
   14f7c:	6190      	str	r0, [r2, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:677

                ldmia r2, {r0-r7}              // read exception stack frame
   14f7e:	caff      	ldmia	r2, {r0, r1, r2, r3, r4, r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:678
                mov r8, r7
   14f80:	46b8      	mov	r8, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:680

                pop {r7}                       // get prev int context address (function parameter - r0)
   14f82:	bc80      	pop	{r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:683

                // destination stack address (4B + 32B - exception stack frame)
                subs r7, r7, #4    //#36
   14f84:	3f04      	subs	r7, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:684
                stm r7!, {r0-r6} //stmdb??
   14f86:	c77f      	stmia	r7!, {r0, r1, r2, r3, r4, r5, r6}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:685
                subs r7, r7, #28
   14f88:	3f1c      	subs	r7, #28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:686
                mov r0, r7
   14f8a:	4638      	mov	r0, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:687
                mov r7, r8
   14f8c:	4647      	mov	r7, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:688
                stm r0!, {r7} //stmdb??
   14f8e:	c080      	stmia	r0!, {r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:689
                subs r0, r0, #4
   14f90:	3804      	subs	r0, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:692

                // restore modified registers which are not restored by cpu
                pop {r1, r2, r4-r7}
   14f92:	bcf6      	pop	{r1, r2, r4, r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:694

                msr MSP, r0                    // update MSP (main stack pointer)
   14f94:	f380 8808 	msr	MSP, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:696

                cpsie i
   14f98:	b662      	cpsie	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:698

                bx lr
   14f9a:	4770      	bx	lr

00014f9c <_mem_test_and_set>:
_mem_test_and_set():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:717
 *END*----------------------------------------------------------------------*/

 ASM_PUBLIC_BEGIN(_mem_test_and_set)
 ASM_PUBLIC_FUNC(_mem_test_and_set)
ASM_LABEL(_mem_test_and_set)
                push {r1, r2, lr}
   14f9c:	b506      	push	{r1, r2, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:719

                ldrb r1, [r0]
   14f9e:	7801      	ldrb	r1, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:720
                ldr r2, =0x80
   14fa0:	4a15      	ldr	r2, [pc, #84]	; (14ff8 <__get_CONTROL+0x1e>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:721
                tst r1, r2
   14fa2:	4211      	tst	r1, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:722
                bne _mem_test_and_set_0x80
   14fa4:	d103      	bne.n	14fae <_mem_test_and_set_0x80>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:723
                orrs r1, r1, r2
   14fa6:	4311      	orrs	r1, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:724
                strb r1, [r0]
   14fa8:	7001      	strb	r1, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:725
                eors r0, r0
   14faa:	4040      	eors	r0, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:726
                b _mem_test_and_set_pop
   14fac:	e000      	b.n	14fb0 <_mem_test_and_set_pop>

00014fae <_mem_test_and_set_0x80>:
_mem_test_and_set_0x80():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:728
ASM_LABEL(_mem_test_and_set_0x80)
                movs r0, #0x80
   14fae:	2080      	movs	r0, #128	; 0x80

00014fb0 <_mem_test_and_set_pop>:
_mem_test_and_set_pop():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:731

ASM_LABEL(_mem_test_and_set_pop)
                pop {r1, r2, pc}
   14fb0:	bd06      	pop	{r1, r2, pc}

00014fb2 <__get_PSP>:
__get_PSP():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:745
 *END*----------------------------------------------------------------------*/

 ASM_PUBLIC_BEGIN(__get_PSP)
 ASM_PUBLIC_FUNC(__get_PSP)
ASM_LABEL(__get_PSP)
                mrs r0, PSP
   14fb2:	f3ef 8009 	mrs	r0, PSP
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:746
                bx lr
   14fb6:	4770      	bx	lr

00014fb8 <__get_MSP>:
__get_MSP():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:760
 *END*----------------------------------------------------------------------*/

 ASM_PUBLIC_BEGIN(__get_MSP)
 ASM_PUBLIC_FUNC(__get_MSP)
ASM_LABEL(__get_MSP)
                mrs r0, MSP
   14fb8:	f3ef 8008 	mrs	r0, MSP
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:761
                bx lr
   14fbc:	4770      	bx	lr

00014fbe <__set_MSP>:
__set_MSP():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:775
 *END*----------------------------------------------------------------------*/

 ASM_PUBLIC_BEGIN(__set_MSP)
 ASM_PUBLIC_FUNC(__set_MSP)
ASM_LABEL(__set_MSP)
                msr MSP, r0
   14fbe:	f380 8808 	msr	MSP, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:776
                bx lr
   14fc2:	4770      	bx	lr

00014fc4 <__get_PSR>:
__get_PSR():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:793
 ASM_PUBLIC_FUNC(__get_PSR)
ASM_LABEL(__get_PSR)
        #ifdef __CWARM__
                 mrs r0, XPSR
        #else
                 mrs r0, PSR
   14fc4:	f3ef 8003 	mrs	r0, PSR
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:795
        #endif
                 bx lr
   14fc8:	4770      	bx	lr

00014fca <__enable_interrupt>:
__enable_interrupt():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:812
 *END*----------------------------------------------------------------------*/

 ASM_PUBLIC_BEGIN(__enable_interrupt)
 ASM_PUBLIC_FUNC(__enable_interrupt)
ASM_LABEL(__enable_interrupt)
                 cpsie i
   14fca:	b662      	cpsie	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:813
                 bx lr
   14fcc:	4770      	bx	lr

00014fce <__disable_interrupt>:
__disable_interrupt():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:828
 *END*----------------------------------------------------------------------*/

 ASM_PUBLIC_BEGIN(__disable_interrupt)
 ASM_PUBLIC_FUNC(__disable_interrupt)
ASM_LABEL(__disable_interrupt)
                 cpsid i
   14fce:	b672      	cpsid	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:829
                 bx lr
   14fd0:	4770      	bx	lr

00014fd2 <__get_LR>:
__get_LR():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:849
 *END*----------------------------------------------------------------------*/

 ASM_PUBLIC_BEGIN(__get_LR)
 ASM_PUBLIC_FUNC(__get_LR)
ASM_LABEL(__get_LR)
                mov r0, lr
   14fd2:	4670      	mov	r0, lr
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:850
                bx lr
   14fd4:	4770      	bx	lr

00014fd6 <__get_PC>:
__get_PC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:865
 *END*----------------------------------------------------------------------*/

 ASM_PUBLIC_BEGIN(__get_PC)
 ASM_PUBLIC_FUNC(__get_PC)
ASM_LABEL(__get_PC)
                mov r0, PC
   14fd6:	4678      	mov	r0, pc
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:866
                bx lr
   14fd8:	4770      	bx	lr

00014fda <__get_CONTROL>:
__get_CONTROL():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:880
 *END*----------------------------------------------------------------------*/
 ASM_PUBLIC(__get_CONTROL)
 ASM_PUBLIC_BEGIN(__get_CONTROL)
 ASM_PUBLIC_FUNC(__get_CONTROL)
ASM_LABEL(__get_CONTROL)
                mrs r0, CONTROL
   14fda:	f3ef 8014 	mrs	r0, CONTROL
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:881
                bx lr
   14fde:	4770      	bx	lr
$d():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:90
 *END*----------------------------------------------------------------------*/

 ASM_PUBLIC_BEGIN(_sched_start_internal)
 ASM_PUBLIC_FUNC(_sched_start_internal)
ASM_LABEL(_sched_start_internal)
                GET_KERNEL_DATA r0
   14fe0:	1fffe000 	.word	0x1fffe000
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:168
ASM_LABEL(_sched_execute_scheduler_internal2)
                cpsie i
#endif

                // store active task registers
                STORE_ALL_REGISTERS
   14fe4:	01000000 	.word	0x01000000
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:266
                //read stacked xPSR value
                ldm r0!, {r1}
                subs r0, r0, #32

                //bit 9 of the xPSR indicates the stack alignment on exception entry, if set SP has to be moved by 4 bytes
                ldr r2, =0x200
   14fe8:	00000200 	.word	0x00000200
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:454
                ldrh r1, [r3, #KD_IN_ISR]
                adds r1, r1, #1
                strh r1, [r3, #KD_IN_ISR]

                // create interrupt content
                ldr r0, =0                      // error code (set 0)
   14fec:	00000000 	.word	0x00000000
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:594

                // check for reschedule
                // check preemtion
                ldr r2, [r3, #KD_ACTIVE_PTR]    // TD pointer
                ldr r0, [r2, #TD_FLAGS]
                ldr r1, =TASK_PREEMPTION_DISABLED
   14ff0:	00001000 	.word	0x00001000
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:672
                ldr r1, [r2]
                mov lr, r1                     // lr - return from exception... (0xfffffff1)
                adds r2, r2, #4                // increment r2 by 4

                // modify return address (PC) in exception stack frame (kernel isr epilog)
                ldr r0, =_int_kernel_isr_epilog
   14ff4:	00014f06 	.word	0x00014f06
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:720
 ASM_PUBLIC_FUNC(_mem_test_and_set)
ASM_LABEL(_mem_test_and_set)
                push {r1, r2, lr}

                ldrb r1, [r0]
                ldr r2, =0x80
   14ff8:	00000080 	.word	0x00000080
