
FSFK_KL46Z.elf:     file format elf32-littlearm
FSFK_KL46Z.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000471

Program Header:
    LOAD off    0x00008000 vaddr 0x00000000 paddr 0x00000000 align 2**15
         filesz 0x000000c0 memsz 0x000000c0 flags r--
    LOAD off    0x00008400 vaddr 0x00000400 paddr 0x00000400 align 2**15
         filesz 0x00000010 memsz 0x00000010 flags r--
    LOAD off    0x00008410 vaddr 0x00000410 paddr 0x00000410 align 2**15
         filesz 0x000137bc memsz 0x000137bc flags rwx
    LOAD off    0x0001e000 vaddr 0x1fffe000 paddr 0x00013bcc align 2**15
         filesz 0x00000080 memsz 0x00003de8 flags rw-
    LOAD off    0x00021de8 vaddr 0x20001de8 paddr 0x00013c4c align 2**15
         filesz 0x00000018 memsz 0x00000418 flags rw-
private flags = 5000002: [Version5 EABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .interrupts   000000c0  00000000  00000000  00008000  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .cfmprotect   00000010  00000400  00000400  00008400  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000137b4  00000410  00000410  00008410  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000004  00013bc4  00013bc4  0001bbc4  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  00013bc8  00013bc8  0001bbc8  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  1fffe000  00013bcc  0001e000  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003d68  1fffe080  00013c4c  0001e080  2**2  ALLOC
  7 .romp         00000018  20001de8  00013c4c  00021de8  2**0  CONTENTS, ALLOC, LOAD, DATA
  8 ._user_heap_stack 00000400  20001e00  00013c64  00021e00  2**0  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00021e00  2**0  CONTENTS, READONLY
 10 .debug_info   00021655  00000000  00000000  00021e28  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000589d  00000000  00000000  0004347d  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0002068f  00000000  00000000  00048d1a  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ee8  00000000  00000000  000693b0  2**3  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002640  00000000  00000000  0006a298  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a8b1  00000000  00000000  0006c8d8  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004c05  00000000  00000000  00077189  2**0  CONTENTS, READONLY, DEBUGGING
 17 .comment      00000070  00000000  00000000  0007bd8e  2**0  CONTENTS, READONLY
 18 .debug_frame  00002f14  00000000  00000000  0007be00  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .interrupts	00000000 .interrupts
00000400 l    d  .cfmprotect	00000000 .cfmprotect
00000410 l    d  .text	00000000 .text
00013bc4 l    d  .init_array	00000000 .init_array
00013bc8 l    d  .fini_array	00000000 .fini_array
1fffe000 l    d  .data	00000000 .data
1fffe080 l    d  .bss	00000000 .bss
20001de8 l    d  .romp	00000000 .romp
20001e00 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 Vectors.c
00000000 l    df *ABS*	00000000 Cpu.c
00000000 l    df *ABS*	00000000 crtstuff.c
00013934 l     O .text	00000000 __EH_FRAME_BEGIN__
00000410 l     F .text	00000000 __do_global_dtors_aux
1fffe080 l       .bss	00000000 completed.7863
00013bc8 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
00000438 l     F .text	00000000 frame_dummy
1fffe084 l       .bss	00000000 object.7868
00013bc4 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 ./MQXLITE/psp/cortex_m/core/M0/boot.o
00000000 l       *ABS*	00000000 TD_TD_NEXT
00000004 l       *ABS*	00000000 TD_TD_PREV
00000008 l       *ABS*	00000000 TD_STATE
0000000c l       *ABS*	00000000 TD_TASK_ID
00000010 l       *ABS*	00000000 TD_STACK_BASE
00000014 l       *ABS*	00000000 TD_STACK_PTR
00000018 l       *ABS*	00000000 TD_STACK_LIMIT
0000001c l       *ABS*	00000000 TD_MY_QUEUE
00000020 l       *ABS*	00000000 TD_HOME_QUEUE
00000024 l       *ABS*	00000000 TD_TASK_SR
00000026 l       *ABS*	00000000 TD_RESERVED_1
00000028 l       *ABS*	00000000 TD_FLAGS
00000034 l       *ABS*	00000000 TD_FLOAT_CONTEXT_PTR
00000000 l       *ABS*	00000000 RQ_HEAD_READY_Q
00000004 l       *ABS*	00000000 RQ_TAIL_READY_Q
00000008 l       *ABS*	00000000 RQ_NEXT_Q
0000000c l       *ABS*	00000000 RQ_ENABLE_SR
0000000e l       *ABS*	00000000 RQ_PRIORITY
00000000 l       *ABS*	00000000 IT_APP_ISR
00000004 l       *ABS*	00000000 IT_APP_ISR_EXCEPTION_HANDLER
00000008 l       *ABS*	00000000 IT_APP_ISR_DATA
00000000 l       *ABS*	00000000 HASH_ISR_NUM
00000004 l       *ABS*	00000000 HASH_ISR_ADDR
00000008 l       *ABS*	00000000 HASH_ISR_EXCEPT_HNDL
0000000c l       *ABS*	00000000 HASH_ISR_DATA
00000010 l       *ABS*	00000000 HASH_ISR_NEXT
00000000 l       *ABS*	00000000 KD_ADDRESSING_CAPABILITY
00000004 l       *ABS*	00000000 KD_ENDIANESS
00000008 l       *ABS*	00000000 KD_CPU_TYPE
0000000a l       *ABS*	00000000 KD_PSP_CFG_MEMORY_ALIGNMENT
0000000c l       *ABS*	00000000 KD_PSP_CFG_STACK_ALIGNMENT
0000000e l       *ABS*	00000000 KD_PSP_CFG_MEM_STOREBLOCK_ALIGNMENT
00000010 l       *ABS*	00000000 KD_CONFIG1
00000012 l       *ABS*	00000000 KD_CONFIG2
00000014 l       *ABS*	00000000 KD_FLAGS
00000016 l       *ABS*	00000000 KD_DISABLE_SR
00000018 l       *ABS*	00000000 KD_IN_ISR
0000001a l       *ABS*	00000000 KD_ACTIVE_SR
0000001c l       *ABS*	00000000 KD_ACTIVE_PTR
00000020 l       *ABS*	00000000 KD_READY_Q_LIST
00000024 l       *ABS*	00000000 KD_CURRENT_READY_Q
00000028 l       *ABS*	00000000 KD_DEFAULT_ISR
0000002c l       *ABS*	00000000 KD_FIRST_USER_ISR_VECTOR
00000030 l       *ABS*	00000000 KD_LAST_USER_ISR_VECTOR
00000034 l       *ABS*	00000000 KD_INTERRUPT_CONTEXT_PTR
00000038 l       *ABS*	00000000 KD_INTERRUPT_TABLE_PTR
0000003c l       *ABS*	00000000 KD_INTERRUPT_STACK_PTR
00000040 l       *ABS*	00000000 KD_LOG_CONTROL
00000044 l       *ABS*	00000000 KD_LOG_OLD_TD
00000048 l       *ABS*	00000000 KD_FP_ACTIVE_PTR
0000004c l       *ABS*	00000000 KD_DSP_ACTIVE_PTR
00000050 l       *ABS*	00000000 KD_SYSTEM_TD
00008000 l       *ABS*	00000000 PSP_CNFG_MQX_KERNEL_LOGGING
00004000 l       *ABS*	00000000 PSP_CNFG_FP_REGISTERS_EXIST
00000000 l       *ABS*	00000000 PSP_CNFG
00000002 l       *ABS*	00000000 FP_TASK_MASK
00000200 l       *ABS*	00000000 FP_CONTEXT_SAVED_MASK
0000fdff l       *ABS*	00000000 FP_CONTEXT_CLEAR_MASK
00001000 l       *ABS*	00000000 PREEMPTION_DISABLED
00000000 l       *ABS*	00000000 STORE_ALL_REGISTERS
e000e180 l       *ABS*	00000000 NVIC_ICER
e000e280 l       *ABS*	00000000 NVIC_ICPR
00000000 l    df *ABS*	00000000 _udivsi3.o
000004a8 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _divsi3.o
00000544 l       .text	00000000 .divsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_cmpsf2.o
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 _clzsi2.o
00000000 l    df *ABS*	00000000 Events.c
00000000 l    df *ABS*	00000000 approximations.c
00000000 l    df *ABS*	00000000 drivers.c
00000000 l    df *ABS*	00000000 fusion.c
00000000 l    df *ABS*	00000000 magnetic.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 matrix.c
00000000 l    df *ABS*	00000000 mqx_tasks.c
00000000 l    df *ABS*	00000000 orientation.c
00000000 l    df *ABS*	00000000 tasks.c
1fffe09c l     O .bss	00000001 iCounter.8761
00000000 l    df *ABS*	00000000 user_tasks.c
1fffe0a0 l     O .bss	0000000c deviceData
00000000 l    df *ABS*	00000000 functions.c
00000000 l    df *ABS*	00000000 protocol.c
1fffe0ac l     O .bss	00000100 decodingBuffer.6767
00000000 l    df *ABS*	00000000 startup.c
0000eb72 l       .text	00000000 skip_sp
1fffe1ac l     O .bss	00000028 argv
00000000 l    df *ABS*	00000000 int_inst.c
00000000 l    df *ABS*	00000000 int_vtab.c
00000000 l    df *ABS*	00000000 mem_zero.c
00000000 l    df *ABS*	00000000 psp_iinit.c
00000000 l    df *ABS*	00000000 psp_tiad.c
00000000 l    df *ABS*	00000000 psp_tinm.c
00000000 l    df *ABS*	00000000 sc_irdyq.c
00000000 l    df *ABS*	00000000 stack_bu.c
00000000 l    df *ABS*	00000000 stack_de.c
00000000 l    df *ABS*	00000000 idletask.c
00000000 l    df *ABS*	00000000 int.c
00000000 l    df *ABS*	00000000 lwevent.c
00000000 l    df *ABS*	00000000 lwsem.c
00000000 l    df *ABS*	00000000 mqx_utils.c
00000000 l    df *ABS*	00000000 mqxlite.c
00000000 l    df *ABS*	00000000 task.c
00000000 l    df *ABS*	00000000 time_ticks.c
00000000 l    df *ABS*	00000000 FTM.c
1fffe1d8 l     O .bss	0000000c DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 I2C.c
1fffe1e4 l     O .bss	00000024 DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 LED_BLUE.c
1fffe208 l     O .bss	00000004 DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 LED_GREEN.c
1fffe20c l     O .bss	00000004 DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 LED_RED.c
1fffe210 l     O .bss	00000004 DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 MQX1.c
1fffe214 l     O .bss	00000004 SystemTimerDeviceDataPtr
00000000 l    df *ABS*	00000000 RNG1.c
1fffe23c l     O .bss	00000001 RNG1_inIdx
1fffe240 l     O .bss	00000040 RNG1_buffer
1fffe280 l     O .bss	00000001 RNG1_inSize
1fffe281 l     O .bss	00000001 RNG1_outIdx
00000000 l    df *ABS*	00000000 SystemTimer1.c
1fffe284 l     O .bss	0000000c DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 TestPin_KF_Time.c
1fffe290 l     O .bss	00000004 DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 TestPin_MagCal_Time.c
1fffe294 l     O .bss	00000004 DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 UART.c
1fffe298 l     O .bss	00000020 DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 crc.c
00000000 l    df *ABS*	00000000 distantio.c
1fffe2b8 l     O .bss	0000000e buffer.7025
00000000 l    df *ABS*	00000000 sf_sin.c
00000000 l    df *ABS*	00000000 wf_acos.c
00000000 l    df *ABS*	00000000 wf_pow.c
00000000 l    df *ABS*	00000000 wf_sqrt.c
00000000 l    df *ABS*	00000000 ef_acos.c
00000000 l    df *ABS*	00000000 ef_pow.c
000134d8 l     O .text	00000008 dp_h
000134e0 l     O .text	00000008 dp_l
000134e8 l     O .text	00000008 bp
00000000 l    df *ABS*	00000000 ef_rem_pio2.c
000134f0 l     O .text	00000080 npio2_hw
00013570 l     O .text	00000318 two_over_pi
00000000 l    df *ABS*	00000000 ef_sqrt.c
00000000 l    df *ABS*	00000000 kf_cos.c
00000000 l    df *ABS*	00000000 kf_rem_pio2.c
00013888 l     O .text	0000000c init_jk
00013894 l     O .text	0000002c PIo2
00000000 l    df *ABS*	00000000 kf_sin.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
000138c0 l     O .text	00000010 TWO52
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 sf_finite.c
00000000 l    df *ABS*	00000000 sf_floor.c
00000000 l    df *ABS*	00000000 sf_fpclassify.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 sf_copysign.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 task_template_list.c
00000000 l    df *ABS*	00000000 impure.c
1fffe01c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 c:/freescale/kds_3.0.0/toolchain/bin/../lib/gcc/arm-none-eabi/4.8.4/armv6-m/crti.o
00000000 l    df *ABS*	00000000 c:/freescale/kds_3.0.0/toolchain/bin/../lib/gcc/arm-none-eabi/4.8.4/armv6-m/crtn.o
00000000 l    df *ABS*	00000000 ./MQXLITE/psp/cortex_m/core/M0/dispatch.o
00000000 l       *ABS*	00000000 TD_TD_NEXT
00000004 l       *ABS*	00000000 TD_TD_PREV
00000008 l       *ABS*	00000000 TD_STATE
0000000c l       *ABS*	00000000 TD_TASK_ID
00000010 l       *ABS*	00000000 TD_STACK_BASE
00000014 l       *ABS*	00000000 TD_STACK_PTR
00000018 l       *ABS*	00000000 TD_STACK_LIMIT
0000001c l       *ABS*	00000000 TD_MY_QUEUE
00000020 l       *ABS*	00000000 TD_HOME_QUEUE
00000024 l       *ABS*	00000000 TD_TASK_SR
00000026 l       *ABS*	00000000 TD_RESERVED_1
00000028 l       *ABS*	00000000 TD_FLAGS
00000034 l       *ABS*	00000000 TD_FLOAT_CONTEXT_PTR
00000000 l       *ABS*	00000000 RQ_HEAD_READY_Q
00000004 l       *ABS*	00000000 RQ_TAIL_READY_Q
00000008 l       *ABS*	00000000 RQ_NEXT_Q
0000000c l       *ABS*	00000000 RQ_ENABLE_SR
0000000e l       *ABS*	00000000 RQ_PRIORITY
00000000 l       *ABS*	00000000 IT_APP_ISR
00000004 l       *ABS*	00000000 IT_APP_ISR_EXCEPTION_HANDLER
00000008 l       *ABS*	00000000 IT_APP_ISR_DATA
00000000 l       *ABS*	00000000 HASH_ISR_NUM
00000004 l       *ABS*	00000000 HASH_ISR_ADDR
00000008 l       *ABS*	00000000 HASH_ISR_EXCEPT_HNDL
0000000c l       *ABS*	00000000 HASH_ISR_DATA
00000010 l       *ABS*	00000000 HASH_ISR_NEXT
00000000 l       *ABS*	00000000 KD_ADDRESSING_CAPABILITY
00000004 l       *ABS*	00000000 KD_ENDIANESS
00000008 l       *ABS*	00000000 KD_CPU_TYPE
0000000a l       *ABS*	00000000 KD_PSP_CFG_MEMORY_ALIGNMENT
0000000c l       *ABS*	00000000 KD_PSP_CFG_STACK_ALIGNMENT
0000000e l       *ABS*	00000000 KD_PSP_CFG_MEM_STOREBLOCK_ALIGNMENT
00000010 l       *ABS*	00000000 KD_CONFIG1
00000012 l       *ABS*	00000000 KD_CONFIG2
00000014 l       *ABS*	00000000 KD_FLAGS
00000016 l       *ABS*	00000000 KD_DISABLE_SR
00000018 l       *ABS*	00000000 KD_IN_ISR
0000001a l       *ABS*	00000000 KD_ACTIVE_SR
0000001c l       *ABS*	00000000 KD_ACTIVE_PTR
00000020 l       *ABS*	00000000 KD_READY_Q_LIST
00000024 l       *ABS*	00000000 KD_CURRENT_READY_Q
00000028 l       *ABS*	00000000 KD_DEFAULT_ISR
0000002c l       *ABS*	00000000 KD_FIRST_USER_ISR_VECTOR
00000030 l       *ABS*	00000000 KD_LAST_USER_ISR_VECTOR
00000034 l       *ABS*	00000000 KD_INTERRUPT_CONTEXT_PTR
00000038 l       *ABS*	00000000 KD_INTERRUPT_TABLE_PTR
0000003c l       *ABS*	00000000 KD_INTERRUPT_STACK_PTR
00000040 l       *ABS*	00000000 KD_LOG_CONTROL
00000044 l       *ABS*	00000000 KD_LOG_OLD_TD
00000048 l       *ABS*	00000000 KD_FP_ACTIVE_PTR
0000004c l       *ABS*	00000000 KD_DSP_ACTIVE_PTR
00000050 l       *ABS*	00000000 KD_SYSTEM_TD
00008000 l       *ABS*	00000000 PSP_CNFG_MQX_KERNEL_LOGGING
00004000 l       *ABS*	00000000 PSP_CNFG_FP_REGISTERS_EXIST
00000000 l       *ABS*	00000000 PSP_CNFG
00000002 l       *ABS*	00000000 FP_TASK_MASK
00000200 l       *ABS*	00000000 FP_CONTEXT_SAVED_MASK
0000fdff l       *ABS*	00000000 FP_CONTEXT_CLEAR_MASK
00001000 l       *ABS*	00000000 PREEMPTION_DISABLED
00000000 l       *ABS*	00000000 STORE_ALL_REGISTERS
000000aa l       *ABS*	00000000 SVC_MQX_FN
000139a6 l       .text	00000000 sched_internal
0001396e l       .text	00000000 _sched_check_scheduler_internal_end
000139a8 l       .text	00000000 find_noempty_que
000139be l       .text	00000000 switch_task
000139b4 l       .text	00000000 no_one_to_run
000139fc l       .text	00000000 rest_of_stack_frame_restore
000139ec l       .text	00000000 return_from_interrupt
00013a20 l       .text	00000000 move_pc_at_the_start_of_stackframe
00013a38 l       .text	00000000 _mqx_api_call_end
00013ab2 l       .text	00000000 _isr_skip_run_default1
00013b28 l       .text	00000000 _isr_run_default
00013abc l       .text	00000000 _int_kernel_isr_vect_ok
00013ac8 l       .text	00000000 _isr_execute
00013ace l       .text	00000000 _int_kernel_isr_epilog
00013ad2 l       .text	00000000 _int_kernel_isr_return_internal
00013b20 l       .text	00000000 _isr_return_end
00013b76 l       .text	00000000 _mem_test_and_set_0x80
00013b78 l       .text	00000000 _mem_test_and_set_pop
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 PE_LDD.c
00000000 l    df *ABS*	00000000 
00000400 l       *ABS*	00000000 __stack_size
00000000 l       *UND*	00000000 _fstat
1fffe080 l       .bss	00000000 __bss_start__
1fffe000 l       .data	00000000 _sdata
00000000 l       *UND*	00000000 _isatty
00000000 l       *UND*	00000000 _sbrk
00000000 l       *UND*	00000000 __libc_fini_array
00013bcc l       .fini_array	00000000 ___ROM_AT
00000000 l       *ABS*	00000000 __heap_size
00000000 l       *UND*	00000000 _printf_float
20001de8 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 __call_exitprocs
00000000 l       *UND*	00000000 _lseek
00000000 l       *UND*	00000000 software_init_hook
00013bc8 l       .init_array	00000000 __init_array_end
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 atexit
00013bc4 l       .init_array	00000000 __preinit_array_end
20006000 l       *ABS*	00000000 _estack
20006000 l       *ABS*	00000000 __stack
00000000 l       *UND*	00000000 _write
1fffe080 l       .data	00000000 _edata
00000000 l       *UND*	00000000 _read
00013bc4 l       .init_array	00000000 __init_array_start
00000000 l       *UND*	00000000 _exit
00013bc4 l       .init_array	00000000 __preinit_array_start
00000000 l       *UND*	00000000 _close
0000ea44 g     F .text	00000090 decode
20001e00 g       ._user_heap_stack	00000000 __HeapBase
00000644 g     F .text	00000012 .hidden __aeabi_dcmple
000131b0 g     F .text	00000010 strcpy
1fffe2c8 g     O .bss	00000010 I2C_Buf
0000f9f4 g     F .text	00000034 _task_set_error
20001a58 g     O .bss	00000004 tmp
0000fa28 g     F .text	0000028c _task_init_internal
000132fc g     O .text	00000004 _mqxlite_version_number
0000f2e0 g     F .text	00000064 _lwsem_create
00002058 g     F .text	00000094 .hidden __eqdf2
00013b2c g     F .text	00000000 _psp_exception_return
1fffe488 g     O .bss	00000018 thisSV_1DOF_P_BASIC
2000045c g     O .bss	0000028c Main_task_stack
0000a714 g     F .text	000005e4 fUpdateCalibration7EIG
0000b92c g     F .text	000000a0 f3x3matrixDetA
00013bc4 g       .text	00000000 __exception_table_end__
00010870 g     F .text	00000054 system_timer_init
0000efec g     F .text	0000004c _int_init
0000c0d0 g     F .text	000000d8 Main_task
00010310 g     F .text	00000168 I2C_Interrupt
0000e9bc g     F .text	00000002 UserHighFrequencyTaskRun
0000f344 g     F .text	000000b4 _lwsem_post
20001e00 g       ._user_heap_stack	00000000 __heap_addr
00002b78 g     F .text	00000014 I2C_OnMasterBlockReceived
1fffe1d4 g     O .bss	00000001 SR_lock
00010f28 g     F .text	0000008c init_distantio
0000ebf8 g     F .text	000000ec _mem_zero
00013b92 g     F .text	00000000 __enable_interrupt
0000ee70 g     F .text	00000044 _psp_build_stack_frame
00010858 g     F .text	00000010 LED_RED_SetVal
0000c764 g     F .text	0000006a f3DOFMagnetometerMatrixWin8
0000e9b8 g     F .text	00000002 UserMediumFrequencyTaskInit
00011328 g     F .text	00000398 powf
00013bc4 g       .init_array	00000000 __exidx_end
000020ec g     F .text	000000fc .hidden __gtdf2
00013194 g     F .text	0000000c __errno
00004a04 g     F .text	000001b0 fRun_6DOF_GB_BASIC
1fffe4a0 g     O .bss	00000034 thisAccel
0000d0d0 g     F .text	000000ec fNEDAnglesDegFromRotationMatrix
00012160 g     F .text	000002f8 __ieee754_rem_pio2f
200006e8 g     O .bss	0000048c RdSensData_task_stack
00013bc4 g       .text	00000000 _etext
0000c68c g     F .text	0000006a f3DOFMagnetometerMatrixNED
00000614 g     F .text	00000010 .hidden __aeabi_cdcmple
000006f4 g     F .text	000002d8 .hidden __aeabi_fadd
00010c78 g     F .text	0000010c UART_Init
0000f3f8 g     F .text	00000098 _lwsem_wait
1fffe4d4 g     O .bss	000000a4 thisSV_3DOF_B_BASIC
00000000 g     O .interrupts	000000c0 __vect_table
0001006c g     F .text	00000010 _time_set_hwticks_per_tick
0000e1a4 g     F .text	0000006c Fusion_Init
000116c0 g     F .text	000000b0 sqrtf
1fffe2d8 g     O .bss	00000004 iCommand
00010724 g     F .text	0000001a I2C_GetError
20000b74 g     O .bss	00000254 _mqx_kernel_data_struct
0000b778 g     F .text	0000003c f3x3matrixAeqMinusA
00000604 g     F .text	00000020 .hidden __aeabi_cdrcmple
00010db0 g     F .text	0000004c UART_SendBlock
00003dc8 g     F .text	000007c0 fInit_9DOF_GBY_KALMAN
000006cc g     F .text	00000012 .hidden __aeabi_fcmpgt
00013b64 g     F .text	00000000 _mem_test_and_set
000108d8 g     F .text	00000080 RNG1_Put
000021e8 g     F .text	000000fc .hidden __ltdf2
00000000 g       .interrupts	00000000 __VECTOR_TABLE_START
00013bc4 g       .init_array	00000000 __DTOR_END__
00003664 g     F .text	000000d4 FXAS21000_Init
1fffe2dc g     O .bss	00000100 sUARTOutputBuf
20000dc8 g     O .bss	00000110 mqx_interrupt_stack
000037c8 g     F .text	00000128 FXOS8700_ReadData
0000ebe4 g     F .text	00000014 _int_set_vector_table
000004a4 g     F .text	00000088 .hidden __udivsi3
1fffe080 g       .bss	00000000 __START_BSS
00001314 g     F .text	000000b8 .hidden __aeabi_i2f
0000ece4 g     F .text	00000012 _psp_int_init
00000cfc g     F .text	00000096 .hidden __lesf2
0000d818 g     F .text	000000b8 fRotationVectorDegFromQuaternion
0001025c g     F .text	00000018 FTM_Interrupt
20001e00 g       ._user_heap_stack	00000000 __HeapLimit
00013078 g     F .text	0000003c __fpclassifyf
00010848 g     F .text	00000010 LED_RED_ClrVal
0000e53c g     F .text	000002c4 Fusion_Run
0000f490 g     F .text	0000000c _mqx_set_cpu_type
0000fe58 g     F .text	000000c4 _time_delay_for
00000470 g     F .text	00000000 __boot
00012fcc g     F .text	00000014 finitef
0000ef14 g     F .text	00000018 _int_disable
0000ebd0 g     F .text	00000014 _psp_int_install
0000ddbc g     F .text	0000002a fLPFScalar
00010b34 g     F .text	00000048 TestPin_MagCal_Time_Init
0000e210 g     F .text	0000032c RdSensData_Run
00012fc4 g     F .text	00000006 fabsf
00013bc4 g       .text	00000000 __exception_table_start__
00000630 g     F .text	00000012 .hidden __aeabi_dcmplt
0000f658 g     F .text	00000098 _mqxlite
00003098 g     F .text	00000378 fatan2_deg
0000ef88 g     F .text	00000064 _int_install_isr
000107ec g     F .text	0000000c LED_GREEN_SetVal
0000f598 g     F .text	000000c0 _mqxlite_init
00001a10 g     F .text	00000648 .hidden __aeabi_ddiv
0000eb54 g     F .text	0000007c __thumb_startup
00000c18 g     F .text	00000054 .hidden __nesf2
20001a5c g     O .bss	00000001 current_group_id
00013bc4 g       .init_array	00000000 __exidx_start
00010540 g     F .text	000000bc I2C_MasterSendBlock
0000ef2c g     F .text	0000001c _int_enable
00013ba2 g     F .text	00000000 __get_CONTROL
1fffe018 g     O .data	00000001 __fdlib_version
00012d64 g     F .text	000000f4 __kernel_sinf
00013300 g     O .text	00000004 _mqx_version_number
0000cac8 g     F .text	000002f8 feCompassAndroid
0000eb50  w    F .text	00000002 __init_user
000107f8 g     F .text	0000000c LED_GREEN_NegVal
1fffe578 g     O .bss	00000b58 thisMagBuffer
00010fb4 g     F .text	0000006c register_var
00010804 g     F .text	00000044 LED_RED_Init
2000044c g     O .bss	00000002 decodingIndex
00011770 g     F .text	000002d4 __ieee754_acosf
0001394c g     F .text	00000000 _sched_start_internal
00013934 g     F .text	00000000 _init
00010478 g     F .text	000000c8 I2C_Init
000029f0 g     F .text	00000118 .hidden __aeabi_d2f
00010acc g     F .text	00000048 TestPin_KF_Time_Init
1fffe004 g     O .data	00000014 mqx_task_stack_pointers
00000fe8 g     F .text	000002ec .hidden __aeabi_fsub
00013b7a g     F .text	00000000 __get_PSP
00010080 g     F .text	00000120 __init_hardware
000132f8 g     O .text	00000004 _mqx_vendor
00012e70 g     F .text	00000154 rint
00002b44 g     F .text	0000001c FTM_OnCounterRestart
0000e9f4 g     F .text	00000014 sendBytes
00013b9a g     F .text	00000000 __get_LR
0000dde8 g     F .text	00000148 qAeqBxC
0000f49c g     F .text	000000fc _mqx_init_kernel_data_internal
000006e0 g     F .text	00000012 .hidden __aeabi_fcmpge
2000044e g     O .bss	00000001 protocol_state
00013b9e g     F .text	00000000 __get_PC
000102f0 g     F .text	00000020 FTM_SetPeriodTicks
0000e068 g     F .text	000000d4 fqAeqNormqA
00010958 g     F .text	00000084 RNG1_Get
00012514 g     F .text	00000190 __kernel_cosf
00004710 g     F .text	00000160 fRun_3DOF_B_BASIC
00002f7c g     F .text	0000011c fatan_deg
0000be50 g     F .text	00000280 fmatrixAeqInvA
000109f8 g     F .text	0000001c RNG1_Init
00000c6c g     F .text	0000008e .hidden __gtsf2
00013490 g     O .text	00000024 MQX_init_struct
1fffe3dc g     O .bss	00000020 sUARTInputBuf
000013cc g     F .text	00000644 .hidden __aeabi_dadd
1ffff0d0 g     O .bss	000000a4 thisSV_3DOF_G_BASIC
000021e8 g     F .text	000000fc .hidden __ledf2
2000044f g     O .bss	00000001 escape_state
000006b8 g     F .text	00000012 .hidden __aeabi_fcmple
0000acf8 g     F .text	000009e4 fUpdateCalibration10EIG
0000f0bc g     F .text	00000128 _lwevent_set
00013914 g     O .text	00000020 __sf_fake_stderr
0000ff1c g     F .text	00000138 _time_notify_kernel
0000eeb8 g     F .text	00000010 _mqx_idle_task
1ffff174 g     O .bss	0000001c thisPressure
00000000  w      *UND*	00000000 __deregister_frame_info
00010b7c g     F .text	00000010 TestPin_MagCal_Time_ClrVal
00013970 g     F .text	00000000 _sched_execute_scheduler_internal
00000540 g     F .text	00000000 .hidden __aeabi_idiv
0000993c g     F .text	0000042c iUpdateMagnetometerBuffer
0000b9d0 g     F .text	00000480 eigencompute
00013bc4 g       .init_array	00000000 __CTOR_LIST__
000038f0 g     F .text	000000ec FXAS21000_ReadData
00000658 g     F .text	00000012 .hidden __aeabi_dcmpgt
00002b08 g     F .text	0000003c .hidden __clzsi2
0000ef48 g     F .text	00000040 _int_get_isr_data
0000c51c g     F .text	00000170 f3DOFTiltWin8
0000c6f8 g     F .text	0000006a f3DOFMagnetometerMatrixAndroid
0000066c g     F .text	00000012 .hidden __aeabi_dcmpge
000109e8 g     F .text	00000010 RNG1_NofFreeElements
1fffe000 g     O .data	00000004 _mqx_kernel_data
0000df30 g     F .text	00000138 qAeqAxB
20000454 g     O .bss	00000004 _tad_task_at_flag
000022e4 g     F .text	00000668 .hidden __aeabi_dsub
00010758 g     F .text	00000044 LED_BLUE_Init
0000f1e4 g     F .text	000000fc _lwevent_wait_for
1fffe3fc g     O .bss	0000007c mqxglobals
00010a14 g     F .text	0000001c SystemTimer1_Interrupt
00010aa4 g     F .text	00000008 SystemTimer1_GetInputFrequency
00000400 g     O .cfmprotect	00000010 _cfm
20000450 g     O .bss	00000001 ESC_
20000451 g     O .bss	00000001 EOF_
0000f038 g     F .text	00000084 _lwevent_create
00010e10 g     F .text	00000118 crc16
00000000 g       .interrupts	00000000 __vector_table
000012d4 g     F .text	00000040 .hidden __aeabi_f2iz
00013958 g     F .text	00000000 _sched_check_scheduler_internal
00000c18 g     F .text	00000054 .hidden __eqsf2
00010274 g     F .text	0000007c FTM_Init
20006000 g       *ABS*	00000000 __SP_INIT
0000c3e8 g     F .text	00000134 f3DOFTiltAndroid
00010868 g     F .text	00000008 SystemTimer1_OnCounterRestart
00002b60 g     F .text	00000002 UART_OnBlockSent
20000ed8 g     O .bss	000000d0 mqx_static_ready_queue
00010054 g     F .text	00000018 _time_set_hwtick_function
000009cc g     F .text	0000024c .hidden __aeabi_fdiv
00010d84 g     F .text	0000002c UART_ReceiveBlock
0000e800 g     F .text	0000013c MagCal_Run
00009f00 g     F .text	00000814 fUpdateCalibration4INV
000101a0 g     F .text	000000bc PE_low_level_init
1ffff190 g     O .bss	000000ac thisSV_6DOF_GB_BASIC
00000600  w    F .text	00000002 .hidden __aeabi_ldiv0
00009854 g     F .text	000000e8 fInitMagCalibration
0000ead4 g     F .text	00000078 __copy_rom_sections_to_ram
0000ea08 g     F .text	0000003c init_protocol
0000ed74 g     F .text	00000078 _psp_set_kernel_disable_level
0000d2a8 g     F .text	0000017c fWin8AnglesDegFromRotationMatrix
00011a44 g     F .text	0000071c __ieee754_powf
20000fa8 g     O .bss	00000168 mqx_static_isr_table
20000448 g     O .bss	00000004 counter
0000e9b4 g     F .text	00000002 UserHighFrequencyTaskInit
00010aac g     F .text	00000014 SystemTimer1_GetPeriodTicks
20000452 g     O .bss	00000001 SOF_
1ffff23c g     O .bss	00000418 thisMagCal
000130bc g     F .text	000000cc scalbnf
000138d4 g     O .text	00000020 __sf_fake_stdin
0000d424 g     F .text	00000194 fQuaternionFromRotationVectorDeg
20000458 g     O .bss	00000001 SR_reg
000131a0 g     F .text	00000010 memset
00012458 g     F .text	000000bc __ieee754_sqrtf
00009d68 g     F .text	00000198 fInvertMagCal
0000b6dc g     F .text	0000000c main
0000b718 g     F .text	00000060 f3x3matrixAeqAxScalar
0000d5b8 g     F .text	00000140 fQuaternionFromRotationMatrix
00013952 g     F .text	00000000 _sched_run_internal
00013b8c g     F .text	00000000 __get_PSR
00000cfc g     F .text	00000096 .hidden __ltsf2
000004a4 g     F .text	00000000 .hidden __aeabi_uidiv
0000b6e8 g     F .text	0000001a f3x3matrixAeqI
00012e58 g     F .text	00000004 matherr
0001007c g     F .text	00000004 Cpu_Interrupt
00002b90 g     F .text	00000016 UART_OnBlockReceived
0000fe48 g     F .text	00000010 _task_set_error_td_internal
00010b24 g     F .text	00000010 TestPin_KF_Time_SetVal
1fffe218 g     O .bss	00000024 PE_LDD_DeviceDataList
0000eeb4 g     F .text	00000002 _psp_destroy_stack_frame
20001110 g     O .bss	00000130 mqx_idle_task_stack
0000fe0c g     F .text	00000014 _task_fill_stack_internal
1ffff654 g     O .bss	00000054 thisGyro
0000fcb4 g     F .text	00000158 _task_create_at
00000688 g     F .text	00000010 .hidden __aeabi_cfcmple
00000540 g     F .text	000000ac .hidden __divsi3
00010740 g     F .text	00000018 I2C_CheckBus
00013bc4 g       .init_array	00000000 __CTOR_END__
000109dc g     F .text	0000000c RNG1_NofElements
20001240 g     O .bss	0000048c Fusion_task_stack
00013b80 g     F .text	00000000 __get_MSP
00010a90 g     F .text	00000014 SystemTimer1_Enable
00013bc4 g       .init_array	00000000 __DTOR_LIST__
0000c7d0 g     F .text	000002f8 feCompassNED
20001de8 g       .bss	00000000 __END_BSS
00002b8c g     F .text	00000002 UART_OnTxComplete
000045cc g     F .text	00000144 fRun_3DOF_G_BASIC
00002058 g     F .text	00000094 .hidden __nedf2
0000e13c g     F .text	00000010 fqAeq1
00011288 g     F .text	000000a0 acosf
00013940 g     F .text	00000000 _fini
000108c4 g     F .text	00000014 system_timer_start
00013188 g     F .text	0000000c copysignf
0000e93c g     F .text	00000008 rx_callback
00013c4c g       .fini_array	00000000 _romp_at
00000c6c g     F .text	0000008e .hidden __gesf2
0000d1bc g     F .text	000000ec fAndroidAnglesDegFromRotationMatrix
0000f6f8 g     F .text	00000140 _task_exit_function_internal
000130b4 g     F .text	00000008 nanf
1fffe07c g     O .data	00000004 _impure_ptr
1fffe478 g     O .bss	00000010 globals
00000698 g     F .text	0000000c .hidden __aeabi_fcmpeq
00010b8c g     F .text	00000010 TestPin_MagCal_Time_SetVal
00010b9c g     F .text	000000dc UART_Interrupt
00000d94 g     F .text	00000254 .hidden __aeabi_fmul
1fffe000 g       .data	00000000 _mtb_end
00000680 g     F .text	00000018 .hidden __aeabi_cfrcmple
00013bc4 g       .text	00000000 __sinit__
0000e9c0 g     F .text	00000034 UserMediumFrequencyTaskRun
00013b86 g     F .text	00000000 __set_MSP
000105fc g     F .text	000000b8 I2C_MasterReceiveBlock
00003738 g     F .text	00000090 MPL3115_ReadData
00011208 g     F .text	00000080 sinf
00013a3a g     F .text	00000000 _task_block
00012e60 g     F .text	00000010 nan
0000d6f8 g     F .text	0000011e fRotationMatrixFromQuaternion
000006a4 g     F .text	00000012 .hidden __aeabi_fcmplt
00013c4c g       .fini_array	00000000 __S_romp
00010dfc g     F .text	00000014 UART_GetTxCompleteStatus
00011020 g     F .text	000001e8 distantio_decode
0000052c g     F .text	00000012 .hidden __aeabi_uidivmod
0000c1a8 g     F .text	00000040 RdSensData_task
00000624 g     F .text	0000000c .hidden __aeabi_dcmpeq
00004bb4 g     F .text	00001094 fRun_6DOF_GY_KALMAN
00010a30 g     F .text	00000060 SystemTimer1_Init
00003410 g     F .text	000000d0 MPL3115_Init
0000c2bc g     F .text	0000012c f3DOFTiltNED
0000cdc0 g     F .text	0000030e feCompassWin8
0000b704 g     F .text	00000014 f3x3matrixAeqScalar
000034e0 g     F .text	00000184 FXOS8700_Init
00002b64 g     F .text	00000014 I2C_OnMasterBlockSent
00013b96 g     F .text	00000000 __disable_interrupt
000132f4 g     O .text	00000004 _mqx_path
0000f838 g     F .text	000001bc _task_destroy
00004870 g     F .text	00000194 fRun_3DOF_Y_BASIC
00002ba8 g     F .text	00000154 fasin_deg
0000ed38 g     F .text	0000003c _psp_normalize_ticks
0000eb4c  w    F .text	00000002 __init_registers
00000688 g     F .text	00000010 .hidden __aeabi_cfcmpeq
1fffe000 g       .data	00000000 _mtb_start
000138f4 g     O .text	00000020 __sf_fake_stdout
0000b7b4 g     F .text	00000176 f3x3matrixAeqInvSymB
00010ac0 g     F .text	0000000c SystemTimer1_GetCounterValue
00010b14 g     F .text	00000010 TestPin_KF_Time_ClrVal
00000600  w    F .text	00000002 .hidden __aeabi_idiv0
0000e944 g     F .text	00000070 UserStartup
0000f6f0 g     F .text	00000008 _mqx_exit
200016cc g     O .bss	0000038c MagCal_task_stack
0000d8d0 g     F .text	000004ec fLPFOrientationQuaternion
0000c1e8 g     F .text	00000090 Fusion_task
000126a4 g     F .text	000006c0 __kernel_rem_pio2f
0000c278 g     F .text	00000044 MagCal_task
00013a82 g     F .text	00000000 _int_kernel_isr
000131c0 g     F .text	0000000e strlen
00000614 g     F .text	00000010 .hidden __aeabi_cdcmpeq
000020ec g     F .text	000000fc .hidden __gedf2
00005c48 g     F .text	00003c0c fRun_9DOF_GBY_KALMAN
000039dc g     F .text	000003ec fInit_6DOF_GY_KALMAN
0000e14c g     F .text	00000058 RdSensData_Init
00012fe0 g     F .text	00000098 floorf
0000294c g     F .text	000000a4 .hidden __aeabi_f2d
1ffff6a8 g     O .bss	00000838 thisSV_9DOF_GBY_KALMAN
000106b4 g     F .text	00000070 I2C_SelectSlaveDevice
20001a60 g     O .bss	00000388 Log
0001079c g     F .text	00000010 LED_BLUE_SetVal
00000000  w      *UND*	00000000 _Jv_RegisterClasses
1ffffee0 g     O .bss	00000490 thisSV_6DOF_GY_KALMAN
00004588 g     F .text	00000044 fRun_1DOF_P_BASIC
0000edec g     F .text	00000084 _psp_init_readyqs
0000ecf8 g     F .text	00000040 _psp_add_ticks
0000eec8 g     F .text	0000004c _int_default_isr
00002cfc g     F .text	00000280 facos_deg
0000fe20 g     F .text	00000028 _task_ready_internal
000005ec g     F .text	00000012 .hidden __aeabi_idivmod
000107ac g     F .text	00000040 LED_GREEN_Init
00000080 g       *ABS*	00000000 ___data_size
20000370 g     O .bss	00000058 thisMag
00000000  w      *UND*	00000000 __register_frame_info
200003c8 g     O .bss	00000080 thisSV_3DOF_Y_BASIC
00013a38 g     F .text	00000000 _mqx_api_call
00013404 g     O .text	0000008c MQX_template_list



Disassembly of section .text:

00000410 <__do_global_dtors_aux>:
$t():
     410:	b510      	push	{r4, lr}
     412:	4c06      	ldr	r4, [pc, #24]	; (42c <__do_global_dtors_aux+0x1c>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	2b00      	cmp	r3, #0
     418:	d107      	bne.n	42a <__do_global_dtors_aux+0x1a>
     41a:	4b05      	ldr	r3, [pc, #20]	; (430 <__do_global_dtors_aux+0x20>)
     41c:	2b00      	cmp	r3, #0
     41e:	d002      	beq.n	426 <__do_global_dtors_aux+0x16>
     420:	4804      	ldr	r0, [pc, #16]	; (434 <__do_global_dtors_aux+0x24>)
     422:	e000      	b.n	426 <__do_global_dtors_aux+0x16>
     424:	bf00      	nop
     426:	2301      	movs	r3, #1
     428:	7023      	strb	r3, [r4, #0]
     42a:	bd10      	pop	{r4, pc}
$d():
     42c:	1fffe080 	.word	0x1fffe080
     430:	00000000 	.word	0x00000000
     434:	00013934 	.word	0x00013934

00000438 <frame_dummy>:
$t():
     438:	b508      	push	{r3, lr}
     43a:	4b08      	ldr	r3, [pc, #32]	; (45c <frame_dummy+0x24>)
     43c:	2b00      	cmp	r3, #0
     43e:	d003      	beq.n	448 <frame_dummy+0x10>
     440:	4807      	ldr	r0, [pc, #28]	; (460 <frame_dummy+0x28>)
     442:	4908      	ldr	r1, [pc, #32]	; (464 <frame_dummy+0x2c>)
     444:	e000      	b.n	448 <frame_dummy+0x10>
     446:	bf00      	nop
     448:	4807      	ldr	r0, [pc, #28]	; (468 <frame_dummy+0x30>)
     44a:	6803      	ldr	r3, [r0, #0]
     44c:	2b00      	cmp	r3, #0
     44e:	d003      	beq.n	458 <frame_dummy+0x20>
     450:	4b06      	ldr	r3, [pc, #24]	; (46c <frame_dummy+0x34>)
     452:	2b00      	cmp	r3, #0
     454:	d000      	beq.n	458 <frame_dummy+0x20>
     456:	4798      	blx	r3
     458:	bd08      	pop	{r3, pc}
     45a:	46c0      	nop			; (mov r8, r8)
$d():
     45c:	00000000 	.word	0x00000000
     460:	00013934 	.word	0x00013934
     464:	1fffe084 	.word	0x1fffe084
     468:	1fffe080 	.word	0x1fffe080
     46c:	00000000 	.word	0x00000000

00000470 <__boot>:
$t():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:72
     470:	4809      	ldr	r0, [pc, #36]	; (498 <__boot+0x28>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:74
     472:	490a      	ldr	r1, [pc, #40]	; (49c <__boot+0x2c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:75
     474:	6008      	str	r0, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:77
     476:	490a      	ldr	r1, [pc, #40]	; (4a0 <__boot+0x30>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:78
     478:	6008      	str	r0, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:81
     47a:	f3ef 8008 	mrs	r0, MSP
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:82
     47e:	f380 8809 	msr	PSP, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:85
     482:	f3ef 8014 	mrs	r0, CONTROL
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:86
     486:	2102      	movs	r1, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:87
     488:	4308      	orrs	r0, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:88
     48a:	f380 8814 	msr	CONTROL, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:89
     48e:	f3bf 8f6f 	isb	sy
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:95
     492:	f00e fb5f 	bl	eb54 <__thumb_startup>
     496:	46c0      	nop			; (mov r8, r8)
$d():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:72
     498:	ffffffff 	.word	0xffffffff
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:74
     49c:	e000e180 	.word	0xe000e180
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:77
     4a0:	e000e280 	.word	0xe000e280

000004a4 <__aeabi_uidiv>:
__udivsi3():
     4a4:	2900      	cmp	r1, #0
     4a6:	d034      	beq.n	512 <.udivsi3_skip_div0_test+0x6a>

000004a8 <.udivsi3_skip_div0_test>:
     4a8:	2301      	movs	r3, #1
     4aa:	2200      	movs	r2, #0
     4ac:	b410      	push	{r4}
     4ae:	4288      	cmp	r0, r1
     4b0:	d32c      	bcc.n	50c <.udivsi3_skip_div0_test+0x64>
     4b2:	2401      	movs	r4, #1
     4b4:	0724      	lsls	r4, r4, #28
     4b6:	42a1      	cmp	r1, r4
     4b8:	d204      	bcs.n	4c4 <.udivsi3_skip_div0_test+0x1c>
     4ba:	4281      	cmp	r1, r0
     4bc:	d202      	bcs.n	4c4 <.udivsi3_skip_div0_test+0x1c>
     4be:	0109      	lsls	r1, r1, #4
     4c0:	011b      	lsls	r3, r3, #4
     4c2:	e7f8      	b.n	4b6 <.udivsi3_skip_div0_test+0xe>
     4c4:	00e4      	lsls	r4, r4, #3
     4c6:	42a1      	cmp	r1, r4
     4c8:	d204      	bcs.n	4d4 <.udivsi3_skip_div0_test+0x2c>
     4ca:	4281      	cmp	r1, r0
     4cc:	d202      	bcs.n	4d4 <.udivsi3_skip_div0_test+0x2c>
     4ce:	0049      	lsls	r1, r1, #1
     4d0:	005b      	lsls	r3, r3, #1
     4d2:	e7f8      	b.n	4c6 <.udivsi3_skip_div0_test+0x1e>
     4d4:	4288      	cmp	r0, r1
     4d6:	d301      	bcc.n	4dc <.udivsi3_skip_div0_test+0x34>
     4d8:	1a40      	subs	r0, r0, r1
     4da:	431a      	orrs	r2, r3
     4dc:	084c      	lsrs	r4, r1, #1
     4de:	42a0      	cmp	r0, r4
     4e0:	d302      	bcc.n	4e8 <.udivsi3_skip_div0_test+0x40>
     4e2:	1b00      	subs	r0, r0, r4
     4e4:	085c      	lsrs	r4, r3, #1
     4e6:	4322      	orrs	r2, r4
     4e8:	088c      	lsrs	r4, r1, #2
     4ea:	42a0      	cmp	r0, r4
     4ec:	d302      	bcc.n	4f4 <.udivsi3_skip_div0_test+0x4c>
     4ee:	1b00      	subs	r0, r0, r4
     4f0:	089c      	lsrs	r4, r3, #2
     4f2:	4322      	orrs	r2, r4
     4f4:	08cc      	lsrs	r4, r1, #3
     4f6:	42a0      	cmp	r0, r4
     4f8:	d302      	bcc.n	500 <.udivsi3_skip_div0_test+0x58>
     4fa:	1b00      	subs	r0, r0, r4
     4fc:	08dc      	lsrs	r4, r3, #3
     4fe:	4322      	orrs	r2, r4
     500:	2800      	cmp	r0, #0
     502:	d003      	beq.n	50c <.udivsi3_skip_div0_test+0x64>
     504:	091b      	lsrs	r3, r3, #4
     506:	d001      	beq.n	50c <.udivsi3_skip_div0_test+0x64>
     508:	0909      	lsrs	r1, r1, #4
     50a:	e7e3      	b.n	4d4 <.udivsi3_skip_div0_test+0x2c>
     50c:	1c10      	adds	r0, r2, #0
     50e:	bc10      	pop	{r4}
     510:	4770      	bx	lr
     512:	2800      	cmp	r0, #0
     514:	d001      	beq.n	51a <.udivsi3_skip_div0_test+0x72>
     516:	2000      	movs	r0, #0
     518:	43c0      	mvns	r0, r0
     51a:	b407      	push	{r0, r1, r2}
     51c:	4802      	ldr	r0, [pc, #8]	; (528 <.udivsi3_skip_div0_test+0x80>)
     51e:	a102      	add	r1, pc, #8	; (adr r1, 528 <.udivsi3_skip_div0_test+0x80>)
     520:	1840      	adds	r0, r0, r1
     522:	9002      	str	r0, [sp, #8]
     524:	bd03      	pop	{r0, r1, pc}
     526:	46c0      	nop			; (mov r8, r8)
     528:	000000d9 	.word	0x000000d9

0000052c <__aeabi_uidivmod>:
__aeabi_uidivmod():
     52c:	2900      	cmp	r1, #0
     52e:	d0f0      	beq.n	512 <.udivsi3_skip_div0_test+0x6a>
     530:	b503      	push	{r0, r1, lr}
     532:	f7ff ffb9 	bl	4a8 <.udivsi3_skip_div0_test>
     536:	bc0e      	pop	{r1, r2, r3}
     538:	4342      	muls	r2, r0
     53a:	1a89      	subs	r1, r1, r2
     53c:	4718      	bx	r3
     53e:	46c0      	nop			; (mov r8, r8)

00000540 <__aeabi_idiv>:
__divsi3():
     540:	2900      	cmp	r1, #0
     542:	d041      	beq.n	5c8 <.divsi3_skip_div0_test+0x84>

00000544 <.divsi3_skip_div0_test>:
     544:	b410      	push	{r4}
     546:	1c04      	adds	r4, r0, #0
     548:	404c      	eors	r4, r1
     54a:	46a4      	mov	ip, r4
     54c:	2301      	movs	r3, #1
     54e:	2200      	movs	r2, #0
     550:	2900      	cmp	r1, #0
     552:	d500      	bpl.n	556 <.divsi3_skip_div0_test+0x12>
     554:	4249      	negs	r1, r1
     556:	2800      	cmp	r0, #0
     558:	d500      	bpl.n	55c <.divsi3_skip_div0_test+0x18>
     55a:	4240      	negs	r0, r0
     55c:	4288      	cmp	r0, r1
     55e:	d32c      	bcc.n	5ba <.divsi3_skip_div0_test+0x76>
     560:	2401      	movs	r4, #1
     562:	0724      	lsls	r4, r4, #28
     564:	42a1      	cmp	r1, r4
     566:	d204      	bcs.n	572 <.divsi3_skip_div0_test+0x2e>
     568:	4281      	cmp	r1, r0
     56a:	d202      	bcs.n	572 <.divsi3_skip_div0_test+0x2e>
     56c:	0109      	lsls	r1, r1, #4
     56e:	011b      	lsls	r3, r3, #4
     570:	e7f8      	b.n	564 <.divsi3_skip_div0_test+0x20>
     572:	00e4      	lsls	r4, r4, #3
     574:	42a1      	cmp	r1, r4
     576:	d204      	bcs.n	582 <.divsi3_skip_div0_test+0x3e>
     578:	4281      	cmp	r1, r0
     57a:	d202      	bcs.n	582 <.divsi3_skip_div0_test+0x3e>
     57c:	0049      	lsls	r1, r1, #1
     57e:	005b      	lsls	r3, r3, #1
     580:	e7f8      	b.n	574 <.divsi3_skip_div0_test+0x30>
     582:	4288      	cmp	r0, r1
     584:	d301      	bcc.n	58a <.divsi3_skip_div0_test+0x46>
     586:	1a40      	subs	r0, r0, r1
     588:	431a      	orrs	r2, r3
     58a:	084c      	lsrs	r4, r1, #1
     58c:	42a0      	cmp	r0, r4
     58e:	d302      	bcc.n	596 <.divsi3_skip_div0_test+0x52>
     590:	1b00      	subs	r0, r0, r4
     592:	085c      	lsrs	r4, r3, #1
     594:	4322      	orrs	r2, r4
     596:	088c      	lsrs	r4, r1, #2
     598:	42a0      	cmp	r0, r4
     59a:	d302      	bcc.n	5a2 <.divsi3_skip_div0_test+0x5e>
     59c:	1b00      	subs	r0, r0, r4
     59e:	089c      	lsrs	r4, r3, #2
     5a0:	4322      	orrs	r2, r4
     5a2:	08cc      	lsrs	r4, r1, #3
     5a4:	42a0      	cmp	r0, r4
     5a6:	d302      	bcc.n	5ae <.divsi3_skip_div0_test+0x6a>
     5a8:	1b00      	subs	r0, r0, r4
     5aa:	08dc      	lsrs	r4, r3, #3
     5ac:	4322      	orrs	r2, r4
     5ae:	2800      	cmp	r0, #0
     5b0:	d003      	beq.n	5ba <.divsi3_skip_div0_test+0x76>
     5b2:	091b      	lsrs	r3, r3, #4
     5b4:	d001      	beq.n	5ba <.divsi3_skip_div0_test+0x76>
     5b6:	0909      	lsrs	r1, r1, #4
     5b8:	e7e3      	b.n	582 <.divsi3_skip_div0_test+0x3e>
     5ba:	1c10      	adds	r0, r2, #0
     5bc:	4664      	mov	r4, ip
     5be:	2c00      	cmp	r4, #0
     5c0:	d500      	bpl.n	5c4 <.divsi3_skip_div0_test+0x80>
     5c2:	4240      	negs	r0, r0
     5c4:	bc10      	pop	{r4}
     5c6:	4770      	bx	lr
     5c8:	2800      	cmp	r0, #0
     5ca:	d006      	beq.n	5da <.divsi3_skip_div0_test+0x96>
     5cc:	db03      	blt.n	5d6 <.divsi3_skip_div0_test+0x92>
     5ce:	2000      	movs	r0, #0
     5d0:	43c0      	mvns	r0, r0
     5d2:	0840      	lsrs	r0, r0, #1
     5d4:	e001      	b.n	5da <.divsi3_skip_div0_test+0x96>
     5d6:	2080      	movs	r0, #128	; 0x80
     5d8:	0600      	lsls	r0, r0, #24
     5da:	b407      	push	{r0, r1, r2}
     5dc:	4802      	ldr	r0, [pc, #8]	; (5e8 <.divsi3_skip_div0_test+0xa4>)
     5de:	a102      	add	r1, pc, #8	; (adr r1, 5e8 <.divsi3_skip_div0_test+0xa4>)
     5e0:	1840      	adds	r0, r0, r1
     5e2:	9002      	str	r0, [sp, #8]
     5e4:	bd03      	pop	{r0, r1, pc}
     5e6:	46c0      	nop			; (mov r8, r8)
     5e8:	00000019 	.word	0x00000019

000005ec <__aeabi_idivmod>:
__aeabi_idivmod():
     5ec:	2900      	cmp	r1, #0
     5ee:	d0eb      	beq.n	5c8 <.divsi3_skip_div0_test+0x84>
     5f0:	b503      	push	{r0, r1, lr}
     5f2:	f7ff ffa7 	bl	544 <.divsi3_skip_div0_test>
     5f6:	bc0e      	pop	{r1, r2, r3}
     5f8:	4342      	muls	r2, r0
     5fa:	1a89      	subs	r1, r1, r2
     5fc:	4718      	bx	r3
     5fe:	46c0      	nop			; (mov r8, r8)

00000600 <__aeabi_idiv0>:
__aeabi_ldiv0():
     600:	4770      	bx	lr
     602:	46c0      	nop			; (mov r8, r8)

00000604 <__aeabi_cdrcmple>:
__aeabi_cdrcmple():
     604:	4684      	mov	ip, r0
     606:	1c10      	adds	r0, r2, #0
     608:	4662      	mov	r2, ip
     60a:	468c      	mov	ip, r1
     60c:	1c19      	adds	r1, r3, #0
     60e:	4663      	mov	r3, ip
     610:	e000      	b.n	614 <__aeabi_cdcmpeq>
     612:	46c0      	nop			; (mov r8, r8)

00000614 <__aeabi_cdcmpeq>:
     614:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     616:	f001 fde7 	bl	21e8 <__ledf2>
     61a:	2800      	cmp	r0, #0
     61c:	d401      	bmi.n	622 <__aeabi_cdcmpeq+0xe>
     61e:	2100      	movs	r1, #0
     620:	42c8      	cmn	r0, r1
     622:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00000624 <__aeabi_dcmpeq>:
__aeabi_dcmpeq():
     624:	b510      	push	{r4, lr}
     626:	f001 fd17 	bl	2058 <__eqdf2>
     62a:	4240      	negs	r0, r0
     62c:	3001      	adds	r0, #1
     62e:	bd10      	pop	{r4, pc}

00000630 <__aeabi_dcmplt>:
__aeabi_dcmplt():
     630:	b510      	push	{r4, lr}
     632:	f001 fdd9 	bl	21e8 <__ledf2>
     636:	2800      	cmp	r0, #0
     638:	db01      	blt.n	63e <__aeabi_dcmplt+0xe>
     63a:	2000      	movs	r0, #0
     63c:	bd10      	pop	{r4, pc}
     63e:	2001      	movs	r0, #1
     640:	bd10      	pop	{r4, pc}
     642:	46c0      	nop			; (mov r8, r8)

00000644 <__aeabi_dcmple>:
__aeabi_dcmple():
     644:	b510      	push	{r4, lr}
     646:	f001 fdcf 	bl	21e8 <__ledf2>
     64a:	2800      	cmp	r0, #0
     64c:	dd01      	ble.n	652 <__aeabi_dcmple+0xe>
     64e:	2000      	movs	r0, #0
     650:	bd10      	pop	{r4, pc}
     652:	2001      	movs	r0, #1
     654:	bd10      	pop	{r4, pc}
     656:	46c0      	nop			; (mov r8, r8)

00000658 <__aeabi_dcmpgt>:
__aeabi_dcmpgt():
     658:	b510      	push	{r4, lr}
     65a:	f001 fd47 	bl	20ec <__gedf2>
     65e:	2800      	cmp	r0, #0
     660:	dc01      	bgt.n	666 <__aeabi_dcmpgt+0xe>
     662:	2000      	movs	r0, #0
     664:	bd10      	pop	{r4, pc}
     666:	2001      	movs	r0, #1
     668:	bd10      	pop	{r4, pc}
     66a:	46c0      	nop			; (mov r8, r8)

0000066c <__aeabi_dcmpge>:
__aeabi_dcmpge():
     66c:	b510      	push	{r4, lr}
     66e:	f001 fd3d 	bl	20ec <__gedf2>
     672:	2800      	cmp	r0, #0
     674:	da01      	bge.n	67a <__aeabi_dcmpge+0xe>
     676:	2000      	movs	r0, #0
     678:	bd10      	pop	{r4, pc}
     67a:	2001      	movs	r0, #1
     67c:	bd10      	pop	{r4, pc}
     67e:	46c0      	nop			; (mov r8, r8)

00000680 <__aeabi_cfrcmple>:
__aeabi_cfrcmple():
     680:	4684      	mov	ip, r0
     682:	1c08      	adds	r0, r1, #0
     684:	4661      	mov	r1, ip
     686:	e7ff      	b.n	688 <__aeabi_cfcmpeq>

00000688 <__aeabi_cfcmpeq>:
     688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     68a:	f000 fb37 	bl	cfc <__lesf2>
     68e:	2800      	cmp	r0, #0
     690:	d401      	bmi.n	696 <__aeabi_cfcmpeq+0xe>
     692:	2100      	movs	r1, #0
     694:	42c8      	cmn	r0, r1
     696:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00000698 <__aeabi_fcmpeq>:
__aeabi_fcmpeq():
     698:	b510      	push	{r4, lr}
     69a:	f000 fabd 	bl	c18 <__eqsf2>
     69e:	4240      	negs	r0, r0
     6a0:	3001      	adds	r0, #1
     6a2:	bd10      	pop	{r4, pc}

000006a4 <__aeabi_fcmplt>:
__aeabi_fcmplt():
     6a4:	b510      	push	{r4, lr}
     6a6:	f000 fb29 	bl	cfc <__lesf2>
     6aa:	2800      	cmp	r0, #0
     6ac:	db01      	blt.n	6b2 <__aeabi_fcmplt+0xe>
     6ae:	2000      	movs	r0, #0
     6b0:	bd10      	pop	{r4, pc}
     6b2:	2001      	movs	r0, #1
     6b4:	bd10      	pop	{r4, pc}
     6b6:	46c0      	nop			; (mov r8, r8)

000006b8 <__aeabi_fcmple>:
__aeabi_fcmple():
     6b8:	b510      	push	{r4, lr}
     6ba:	f000 fb1f 	bl	cfc <__lesf2>
     6be:	2800      	cmp	r0, #0
     6c0:	dd01      	ble.n	6c6 <__aeabi_fcmple+0xe>
     6c2:	2000      	movs	r0, #0
     6c4:	bd10      	pop	{r4, pc}
     6c6:	2001      	movs	r0, #1
     6c8:	bd10      	pop	{r4, pc}
     6ca:	46c0      	nop			; (mov r8, r8)

000006cc <__aeabi_fcmpgt>:
__aeabi_fcmpgt():
     6cc:	b510      	push	{r4, lr}
     6ce:	f000 facd 	bl	c6c <__gesf2>
     6d2:	2800      	cmp	r0, #0
     6d4:	dc01      	bgt.n	6da <__aeabi_fcmpgt+0xe>
     6d6:	2000      	movs	r0, #0
     6d8:	bd10      	pop	{r4, pc}
     6da:	2001      	movs	r0, #1
     6dc:	bd10      	pop	{r4, pc}
     6de:	46c0      	nop			; (mov r8, r8)

000006e0 <__aeabi_fcmpge>:
__aeabi_fcmpge():
     6e0:	b510      	push	{r4, lr}
     6e2:	f000 fac3 	bl	c6c <__gesf2>
     6e6:	2800      	cmp	r0, #0
     6e8:	da01      	bge.n	6ee <__aeabi_fcmpge+0xe>
     6ea:	2000      	movs	r0, #0
     6ec:	bd10      	pop	{r4, pc}
     6ee:	2001      	movs	r0, #1
     6f0:	bd10      	pop	{r4, pc}
     6f2:	46c0      	nop			; (mov r8, r8)

000006f4 <__aeabi_fadd>:
__aeabi_fadd():
     6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6f6:	0243      	lsls	r3, r0, #9
     6f8:	0044      	lsls	r4, r0, #1
     6fa:	0fc5      	lsrs	r5, r0, #31
     6fc:	024e      	lsls	r6, r1, #9
     6fe:	0048      	lsls	r0, r1, #1
     700:	0e24      	lsrs	r4, r4, #24
     702:	1c2a      	adds	r2, r5, #0
     704:	099b      	lsrs	r3, r3, #6
     706:	0e00      	lsrs	r0, r0, #24
     708:	0fc9      	lsrs	r1, r1, #31
     70a:	09b6      	lsrs	r6, r6, #6
     70c:	428d      	cmp	r5, r1
     70e:	d05b      	beq.n	7c8 <__aeabi_fadd+0xd4>
     710:	1a22      	subs	r2, r4, r0
     712:	2a00      	cmp	r2, #0
     714:	dc00      	bgt.n	718 <__aeabi_fadd+0x24>
     716:	e089      	b.n	82c <__aeabi_fadd+0x138>
     718:	2800      	cmp	r0, #0
     71a:	d11d      	bne.n	758 <__aeabi_fadd+0x64>
     71c:	2e00      	cmp	r6, #0
     71e:	d000      	beq.n	722 <__aeabi_fadd+0x2e>
     720:	e075      	b.n	80e <__aeabi_fadd+0x11a>
     722:	0758      	lsls	r0, r3, #29
     724:	d004      	beq.n	730 <__aeabi_fadd+0x3c>
     726:	220f      	movs	r2, #15
     728:	401a      	ands	r2, r3
     72a:	2a04      	cmp	r2, #4
     72c:	d000      	beq.n	730 <__aeabi_fadd+0x3c>
     72e:	3304      	adds	r3, #4
     730:	2180      	movs	r1, #128	; 0x80
     732:	04c9      	lsls	r1, r1, #19
     734:	4019      	ands	r1, r3
     736:	1c2a      	adds	r2, r5, #0
     738:	2900      	cmp	r1, #0
     73a:	d03a      	beq.n	7b2 <__aeabi_fadd+0xbe>
     73c:	3401      	adds	r4, #1
     73e:	2cff      	cmp	r4, #255	; 0xff
     740:	d100      	bne.n	744 <__aeabi_fadd+0x50>
     742:	e07f      	b.n	844 <__aeabi_fadd+0x150>
     744:	019b      	lsls	r3, r3, #6
     746:	0a5b      	lsrs	r3, r3, #9
     748:	025b      	lsls	r3, r3, #9
     74a:	b2e4      	uxtb	r4, r4
     74c:	05e4      	lsls	r4, r4, #23
     74e:	0a58      	lsrs	r0, r3, #9
     750:	07d2      	lsls	r2, r2, #31
     752:	4320      	orrs	r0, r4
     754:	4310      	orrs	r0, r2
     756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     758:	2cff      	cmp	r4, #255	; 0xff
     75a:	d0e2      	beq.n	722 <__aeabi_fadd+0x2e>
     75c:	2180      	movs	r1, #128	; 0x80
     75e:	04c9      	lsls	r1, r1, #19
     760:	430e      	orrs	r6, r1
     762:	2a1b      	cmp	r2, #27
     764:	dd00      	ble.n	768 <__aeabi_fadd+0x74>
     766:	e12d      	b.n	9c4 <__aeabi_fadd+0x2d0>
     768:	1c31      	adds	r1, r6, #0
     76a:	2020      	movs	r0, #32
     76c:	40d1      	lsrs	r1, r2
     76e:	1a82      	subs	r2, r0, r2
     770:	4096      	lsls	r6, r2
     772:	1e72      	subs	r2, r6, #1
     774:	4196      	sbcs	r6, r2
     776:	430e      	orrs	r6, r1
     778:	1b9b      	subs	r3, r3, r6
     77a:	0158      	lsls	r0, r3, #5
     77c:	d5d1      	bpl.n	722 <__aeabi_fadd+0x2e>
     77e:	019b      	lsls	r3, r3, #6
     780:	099f      	lsrs	r7, r3, #6
     782:	1c38      	adds	r0, r7, #0
     784:	f002 f9c0 	bl	2b08 <__clzsi2>
     788:	1f42      	subs	r2, r0, #5
     78a:	4097      	lsls	r7, r2
     78c:	4294      	cmp	r4, r2
     78e:	dc5b      	bgt.n	848 <__aeabi_fadd+0x154>
     790:	1b14      	subs	r4, r2, r4
     792:	231f      	movs	r3, #31
     794:	1b1b      	subs	r3, r3, r4
     796:	1c3a      	adds	r2, r7, #0
     798:	409f      	lsls	r7, r3
     79a:	1c61      	adds	r1, r4, #1
     79c:	1c3b      	adds	r3, r7, #0
     79e:	40ca      	lsrs	r2, r1
     7a0:	1e5f      	subs	r7, r3, #1
     7a2:	41bb      	sbcs	r3, r7
     7a4:	4313      	orrs	r3, r2
     7a6:	2400      	movs	r4, #0
     7a8:	e7bb      	b.n	722 <__aeabi_fadd+0x2e>
     7aa:	1e13      	subs	r3, r2, #0
     7ac:	d1b9      	bne.n	722 <__aeabi_fadd+0x2e>
     7ae:	2300      	movs	r3, #0
     7b0:	2200      	movs	r2, #0
     7b2:	08db      	lsrs	r3, r3, #3
     7b4:	2cff      	cmp	r4, #255	; 0xff
     7b6:	d104      	bne.n	7c2 <__aeabi_fadd+0xce>
     7b8:	2b00      	cmp	r3, #0
     7ba:	d043      	beq.n	844 <__aeabi_fadd+0x150>
     7bc:	2080      	movs	r0, #128	; 0x80
     7be:	03c0      	lsls	r0, r0, #15
     7c0:	4303      	orrs	r3, r0
     7c2:	025b      	lsls	r3, r3, #9
     7c4:	0a5b      	lsrs	r3, r3, #9
     7c6:	e7bf      	b.n	748 <__aeabi_fadd+0x54>
     7c8:	1a21      	subs	r1, r4, r0
     7ca:	2900      	cmp	r1, #0
     7cc:	dd40      	ble.n	850 <__aeabi_fadd+0x15c>
     7ce:	2800      	cmp	r0, #0
     7d0:	d023      	beq.n	81a <__aeabi_fadd+0x126>
     7d2:	2cff      	cmp	r4, #255	; 0xff
     7d4:	d0a5      	beq.n	722 <__aeabi_fadd+0x2e>
     7d6:	2080      	movs	r0, #128	; 0x80
     7d8:	04c0      	lsls	r0, r0, #19
     7da:	4306      	orrs	r6, r0
     7dc:	291b      	cmp	r1, #27
     7de:	dd00      	ble.n	7e2 <__aeabi_fadd+0xee>
     7e0:	e0ee      	b.n	9c0 <__aeabi_fadd+0x2cc>
     7e2:	1c30      	adds	r0, r6, #0
     7e4:	2720      	movs	r7, #32
     7e6:	40c8      	lsrs	r0, r1
     7e8:	1a79      	subs	r1, r7, r1
     7ea:	408e      	lsls	r6, r1
     7ec:	1e71      	subs	r1, r6, #1
     7ee:	418e      	sbcs	r6, r1
     7f0:	4306      	orrs	r6, r0
     7f2:	199b      	adds	r3, r3, r6
     7f4:	0159      	lsls	r1, r3, #5
     7f6:	d400      	bmi.n	7fa <__aeabi_fadd+0x106>
     7f8:	e793      	b.n	722 <__aeabi_fadd+0x2e>
     7fa:	3401      	adds	r4, #1
     7fc:	2cff      	cmp	r4, #255	; 0xff
     7fe:	d055      	beq.n	8ac <__aeabi_fadd+0x1b8>
     800:	4971      	ldr	r1, [pc, #452]	; (9c8 <__aeabi_fadd+0x2d4>)
     802:	2201      	movs	r2, #1
     804:	401a      	ands	r2, r3
     806:	400b      	ands	r3, r1
     808:	085b      	lsrs	r3, r3, #1
     80a:	4313      	orrs	r3, r2
     80c:	e789      	b.n	722 <__aeabi_fadd+0x2e>
     80e:	3a01      	subs	r2, #1
     810:	2a00      	cmp	r2, #0
     812:	d0b1      	beq.n	778 <__aeabi_fadd+0x84>
     814:	2cff      	cmp	r4, #255	; 0xff
     816:	d1a4      	bne.n	762 <__aeabi_fadd+0x6e>
     818:	e783      	b.n	722 <__aeabi_fadd+0x2e>
     81a:	2e00      	cmp	r6, #0
     81c:	d100      	bne.n	820 <__aeabi_fadd+0x12c>
     81e:	e780      	b.n	722 <__aeabi_fadd+0x2e>
     820:	3901      	subs	r1, #1
     822:	2900      	cmp	r1, #0
     824:	d0e5      	beq.n	7f2 <__aeabi_fadd+0xfe>
     826:	2cff      	cmp	r4, #255	; 0xff
     828:	d1d8      	bne.n	7dc <__aeabi_fadd+0xe8>
     82a:	e77a      	b.n	722 <__aeabi_fadd+0x2e>
     82c:	2a00      	cmp	r2, #0
     82e:	d11b      	bne.n	868 <__aeabi_fadd+0x174>
     830:	1c62      	adds	r2, r4, #1
     832:	b2d2      	uxtb	r2, r2
     834:	2a01      	cmp	r2, #1
     836:	dd4b      	ble.n	8d0 <__aeabi_fadd+0x1dc>
     838:	1b9f      	subs	r7, r3, r6
     83a:	017a      	lsls	r2, r7, #5
     83c:	d523      	bpl.n	886 <__aeabi_fadd+0x192>
     83e:	1af7      	subs	r7, r6, r3
     840:	1c0d      	adds	r5, r1, #0
     842:	e79e      	b.n	782 <__aeabi_fadd+0x8e>
     844:	2300      	movs	r3, #0
     846:	e77f      	b.n	748 <__aeabi_fadd+0x54>
     848:	4b5f      	ldr	r3, [pc, #380]	; (9c8 <__aeabi_fadd+0x2d4>)
     84a:	1aa4      	subs	r4, r4, r2
     84c:	403b      	ands	r3, r7
     84e:	e768      	b.n	722 <__aeabi_fadd+0x2e>
     850:	2900      	cmp	r1, #0
     852:	d146      	bne.n	8e2 <__aeabi_fadd+0x1ee>
     854:	1c61      	adds	r1, r4, #1
     856:	b2c8      	uxtb	r0, r1
     858:	2801      	cmp	r0, #1
     85a:	dd29      	ble.n	8b0 <__aeabi_fadd+0x1bc>
     85c:	29ff      	cmp	r1, #255	; 0xff
     85e:	d024      	beq.n	8aa <__aeabi_fadd+0x1b6>
     860:	18f3      	adds	r3, r6, r3
     862:	085b      	lsrs	r3, r3, #1
     864:	1c0c      	adds	r4, r1, #0
     866:	e75c      	b.n	722 <__aeabi_fadd+0x2e>
     868:	2c00      	cmp	r4, #0
     86a:	d013      	beq.n	894 <__aeabi_fadd+0x1a0>
     86c:	28ff      	cmp	r0, #255	; 0xff
     86e:	d018      	beq.n	8a2 <__aeabi_fadd+0x1ae>
     870:	2480      	movs	r4, #128	; 0x80
     872:	04e4      	lsls	r4, r4, #19
     874:	4252      	negs	r2, r2
     876:	4323      	orrs	r3, r4
     878:	2a1b      	cmp	r2, #27
     87a:	dd4d      	ble.n	918 <__aeabi_fadd+0x224>
     87c:	2301      	movs	r3, #1
     87e:	1af3      	subs	r3, r6, r3
     880:	1c04      	adds	r4, r0, #0
     882:	1c0d      	adds	r5, r1, #0
     884:	e779      	b.n	77a <__aeabi_fadd+0x86>
     886:	2f00      	cmp	r7, #0
     888:	d000      	beq.n	88c <__aeabi_fadd+0x198>
     88a:	e77a      	b.n	782 <__aeabi_fadd+0x8e>
     88c:	2300      	movs	r3, #0
     88e:	2200      	movs	r2, #0
     890:	2400      	movs	r4, #0
     892:	e78e      	b.n	7b2 <__aeabi_fadd+0xbe>
     894:	2b00      	cmp	r3, #0
     896:	d03b      	beq.n	910 <__aeabi_fadd+0x21c>
     898:	43d2      	mvns	r2, r2
     89a:	2a00      	cmp	r2, #0
     89c:	d0ef      	beq.n	87e <__aeabi_fadd+0x18a>
     89e:	28ff      	cmp	r0, #255	; 0xff
     8a0:	d1ea      	bne.n	878 <__aeabi_fadd+0x184>
     8a2:	1c33      	adds	r3, r6, #0
     8a4:	24ff      	movs	r4, #255	; 0xff
     8a6:	1c0d      	adds	r5, r1, #0
     8a8:	e73b      	b.n	722 <__aeabi_fadd+0x2e>
     8aa:	24ff      	movs	r4, #255	; 0xff
     8ac:	2300      	movs	r3, #0
     8ae:	e780      	b.n	7b2 <__aeabi_fadd+0xbe>
     8b0:	2c00      	cmp	r4, #0
     8b2:	d15c      	bne.n	96e <__aeabi_fadd+0x27a>
     8b4:	2b00      	cmp	r3, #0
     8b6:	d100      	bne.n	8ba <__aeabi_fadd+0x1c6>
     8b8:	e080      	b.n	9bc <__aeabi_fadd+0x2c8>
     8ba:	2e00      	cmp	r6, #0
     8bc:	d100      	bne.n	8c0 <__aeabi_fadd+0x1cc>
     8be:	e730      	b.n	722 <__aeabi_fadd+0x2e>
     8c0:	199b      	adds	r3, r3, r6
     8c2:	0158      	lsls	r0, r3, #5
     8c4:	d400      	bmi.n	8c8 <__aeabi_fadd+0x1d4>
     8c6:	e72c      	b.n	722 <__aeabi_fadd+0x2e>
     8c8:	4a3f      	ldr	r2, [pc, #252]	; (9c8 <__aeabi_fadd+0x2d4>)
     8ca:	2401      	movs	r4, #1
     8cc:	4013      	ands	r3, r2
     8ce:	e728      	b.n	722 <__aeabi_fadd+0x2e>
     8d0:	2c00      	cmp	r4, #0
     8d2:	d115      	bne.n	900 <__aeabi_fadd+0x20c>
     8d4:	2b00      	cmp	r3, #0
     8d6:	d140      	bne.n	95a <__aeabi_fadd+0x266>
     8d8:	2e00      	cmp	r6, #0
     8da:	d063      	beq.n	9a4 <__aeabi_fadd+0x2b0>
     8dc:	1c33      	adds	r3, r6, #0
     8de:	1c0d      	adds	r5, r1, #0
     8e0:	e71f      	b.n	722 <__aeabi_fadd+0x2e>
     8e2:	2c00      	cmp	r4, #0
     8e4:	d121      	bne.n	92a <__aeabi_fadd+0x236>
     8e6:	2b00      	cmp	r3, #0
     8e8:	d054      	beq.n	994 <__aeabi_fadd+0x2a0>
     8ea:	43c9      	mvns	r1, r1
     8ec:	2900      	cmp	r1, #0
     8ee:	d004      	beq.n	8fa <__aeabi_fadd+0x206>
     8f0:	28ff      	cmp	r0, #255	; 0xff
     8f2:	d04c      	beq.n	98e <__aeabi_fadd+0x29a>
     8f4:	291b      	cmp	r1, #27
     8f6:	dd58      	ble.n	9aa <__aeabi_fadd+0x2b6>
     8f8:	2301      	movs	r3, #1
     8fa:	199b      	adds	r3, r3, r6
     8fc:	1c04      	adds	r4, r0, #0
     8fe:	e779      	b.n	7f4 <__aeabi_fadd+0x100>
     900:	2b00      	cmp	r3, #0
     902:	d119      	bne.n	938 <__aeabi_fadd+0x244>
     904:	2e00      	cmp	r6, #0
     906:	d048      	beq.n	99a <__aeabi_fadd+0x2a6>
     908:	1c33      	adds	r3, r6, #0
     90a:	1c0d      	adds	r5, r1, #0
     90c:	24ff      	movs	r4, #255	; 0xff
     90e:	e708      	b.n	722 <__aeabi_fadd+0x2e>
     910:	1c33      	adds	r3, r6, #0
     912:	1c04      	adds	r4, r0, #0
     914:	1c0d      	adds	r5, r1, #0
     916:	e704      	b.n	722 <__aeabi_fadd+0x2e>
     918:	1c1c      	adds	r4, r3, #0
     91a:	2520      	movs	r5, #32
     91c:	40d4      	lsrs	r4, r2
     91e:	1aaa      	subs	r2, r5, r2
     920:	4093      	lsls	r3, r2
     922:	1e5a      	subs	r2, r3, #1
     924:	4193      	sbcs	r3, r2
     926:	4323      	orrs	r3, r4
     928:	e7a9      	b.n	87e <__aeabi_fadd+0x18a>
     92a:	28ff      	cmp	r0, #255	; 0xff
     92c:	d02f      	beq.n	98e <__aeabi_fadd+0x29a>
     92e:	2480      	movs	r4, #128	; 0x80
     930:	04e4      	lsls	r4, r4, #19
     932:	4249      	negs	r1, r1
     934:	4323      	orrs	r3, r4
     936:	e7dd      	b.n	8f4 <__aeabi_fadd+0x200>
     938:	24ff      	movs	r4, #255	; 0xff
     93a:	2e00      	cmp	r6, #0
     93c:	d100      	bne.n	940 <__aeabi_fadd+0x24c>
     93e:	e6f0      	b.n	722 <__aeabi_fadd+0x2e>
     940:	2280      	movs	r2, #128	; 0x80
     942:	08db      	lsrs	r3, r3, #3
     944:	03d2      	lsls	r2, r2, #15
     946:	4213      	tst	r3, r2
     948:	d004      	beq.n	954 <__aeabi_fadd+0x260>
     94a:	08f6      	lsrs	r6, r6, #3
     94c:	4216      	tst	r6, r2
     94e:	d101      	bne.n	954 <__aeabi_fadd+0x260>
     950:	1c33      	adds	r3, r6, #0
     952:	1c0d      	adds	r5, r1, #0
     954:	00db      	lsls	r3, r3, #3
     956:	24ff      	movs	r4, #255	; 0xff
     958:	e6e3      	b.n	722 <__aeabi_fadd+0x2e>
     95a:	2e00      	cmp	r6, #0
     95c:	d100      	bne.n	960 <__aeabi_fadd+0x26c>
     95e:	e6e0      	b.n	722 <__aeabi_fadd+0x2e>
     960:	1b9a      	subs	r2, r3, r6
     962:	0150      	lsls	r0, r2, #5
     964:	d400      	bmi.n	968 <__aeabi_fadd+0x274>
     966:	e720      	b.n	7aa <__aeabi_fadd+0xb6>
     968:	1af3      	subs	r3, r6, r3
     96a:	1c0d      	adds	r5, r1, #0
     96c:	e6d9      	b.n	722 <__aeabi_fadd+0x2e>
     96e:	2b00      	cmp	r3, #0
     970:	d00d      	beq.n	98e <__aeabi_fadd+0x29a>
     972:	24ff      	movs	r4, #255	; 0xff
     974:	2e00      	cmp	r6, #0
     976:	d100      	bne.n	97a <__aeabi_fadd+0x286>
     978:	e6d3      	b.n	722 <__aeabi_fadd+0x2e>
     97a:	2280      	movs	r2, #128	; 0x80
     97c:	08db      	lsrs	r3, r3, #3
     97e:	03d2      	lsls	r2, r2, #15
     980:	4213      	tst	r3, r2
     982:	d0e7      	beq.n	954 <__aeabi_fadd+0x260>
     984:	08f6      	lsrs	r6, r6, #3
     986:	4216      	tst	r6, r2
     988:	d1e4      	bne.n	954 <__aeabi_fadd+0x260>
     98a:	1c33      	adds	r3, r6, #0
     98c:	e7e2      	b.n	954 <__aeabi_fadd+0x260>
     98e:	1c33      	adds	r3, r6, #0
     990:	24ff      	movs	r4, #255	; 0xff
     992:	e6c6      	b.n	722 <__aeabi_fadd+0x2e>
     994:	1c33      	adds	r3, r6, #0
     996:	1c04      	adds	r4, r0, #0
     998:	e6c3      	b.n	722 <__aeabi_fadd+0x2e>
     99a:	2380      	movs	r3, #128	; 0x80
     99c:	2200      	movs	r2, #0
     99e:	049b      	lsls	r3, r3, #18
     9a0:	24ff      	movs	r4, #255	; 0xff
     9a2:	e706      	b.n	7b2 <__aeabi_fadd+0xbe>
     9a4:	1c23      	adds	r3, r4, #0
     9a6:	2200      	movs	r2, #0
     9a8:	e703      	b.n	7b2 <__aeabi_fadd+0xbe>
     9aa:	1c1c      	adds	r4, r3, #0
     9ac:	2720      	movs	r7, #32
     9ae:	40cc      	lsrs	r4, r1
     9b0:	1a79      	subs	r1, r7, r1
     9b2:	408b      	lsls	r3, r1
     9b4:	1e59      	subs	r1, r3, #1
     9b6:	418b      	sbcs	r3, r1
     9b8:	4323      	orrs	r3, r4
     9ba:	e79e      	b.n	8fa <__aeabi_fadd+0x206>
     9bc:	1c33      	adds	r3, r6, #0
     9be:	e6b0      	b.n	722 <__aeabi_fadd+0x2e>
     9c0:	2601      	movs	r6, #1
     9c2:	e716      	b.n	7f2 <__aeabi_fadd+0xfe>
     9c4:	2601      	movs	r6, #1
     9c6:	e6d7      	b.n	778 <__aeabi_fadd+0x84>
     9c8:	fbffffff 	.word	0xfbffffff

000009cc <__aeabi_fdiv>:
__aeabi_fdiv():
     9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ce:	465f      	mov	r7, fp
     9d0:	4656      	mov	r6, sl
     9d2:	464d      	mov	r5, r9
     9d4:	4644      	mov	r4, r8
     9d6:	b4f0      	push	{r4, r5, r6, r7}
     9d8:	0246      	lsls	r6, r0, #9
     9da:	0045      	lsls	r5, r0, #1
     9dc:	0fc0      	lsrs	r0, r0, #31
     9de:	b085      	sub	sp, #20
     9e0:	1c0f      	adds	r7, r1, #0
     9e2:	0a76      	lsrs	r6, r6, #9
     9e4:	0e2d      	lsrs	r5, r5, #24
     9e6:	4680      	mov	r8, r0
     9e8:	d041      	beq.n	a6e <__aeabi_fdiv+0xa2>
     9ea:	2dff      	cmp	r5, #255	; 0xff
     9ec:	d026      	beq.n	a3c <__aeabi_fdiv+0x70>
     9ee:	2480      	movs	r4, #128	; 0x80
     9f0:	0424      	lsls	r4, r4, #16
     9f2:	2100      	movs	r1, #0
     9f4:	4326      	orrs	r6, r4
     9f6:	00f6      	lsls	r6, r6, #3
     9f8:	3d7f      	subs	r5, #127	; 0x7f
     9fa:	4689      	mov	r9, r1
     9fc:	468b      	mov	fp, r1
     9fe:	0ff9      	lsrs	r1, r7, #31
     a00:	027c      	lsls	r4, r7, #9
     a02:	0078      	lsls	r0, r7, #1
     a04:	0a64      	lsrs	r4, r4, #9
     a06:	0e00      	lsrs	r0, r0, #24
     a08:	9100      	str	r1, [sp, #0]
     a0a:	468a      	mov	sl, r1
     a0c:	d03c      	beq.n	a88 <__aeabi_fdiv+0xbc>
     a0e:	28ff      	cmp	r0, #255	; 0xff
     a10:	d034      	beq.n	a7c <__aeabi_fdiv+0xb0>
     a12:	2380      	movs	r3, #128	; 0x80
     a14:	041b      	lsls	r3, r3, #16
     a16:	431c      	orrs	r4, r3
     a18:	2300      	movs	r3, #0
     a1a:	00e4      	lsls	r4, r4, #3
     a1c:	387f      	subs	r0, #127	; 0x7f
     a1e:	9301      	str	r3, [sp, #4]
     a20:	9f00      	ldr	r7, [sp, #0]
     a22:	4643      	mov	r3, r8
     a24:	9a01      	ldr	r2, [sp, #4]
     a26:	407b      	eors	r3, r7
     a28:	4649      	mov	r1, r9
     a2a:	469c      	mov	ip, r3
     a2c:	4311      	orrs	r1, r2
     a2e:	290f      	cmp	r1, #15
     a30:	d900      	bls.n	a34 <__aeabi_fdiv+0x68>
     a32:	e071      	b.n	b18 <__aeabi_fdiv+0x14c>
     a34:	4f76      	ldr	r7, [pc, #472]	; (c10 <__aeabi_fdiv+0x244>)
     a36:	0089      	lsls	r1, r1, #2
     a38:	587f      	ldr	r7, [r7, r1]
     a3a:	46bf      	mov	pc, r7
     a3c:	2e00      	cmp	r6, #0
     a3e:	d13e      	bne.n	abe <__aeabi_fdiv+0xf2>
     a40:	2208      	movs	r2, #8
     a42:	2302      	movs	r3, #2
     a44:	4691      	mov	r9, r2
     a46:	469b      	mov	fp, r3
     a48:	e7d9      	b.n	9fe <__aeabi_fdiv+0x32>
     a4a:	465a      	mov	r2, fp
     a4c:	1c34      	adds	r4, r6, #0
     a4e:	46c2      	mov	sl, r8
     a50:	9201      	str	r2, [sp, #4]
     a52:	9901      	ldr	r1, [sp, #4]
     a54:	2902      	cmp	r1, #2
     a56:	d037      	beq.n	ac8 <__aeabi_fdiv+0xfc>
     a58:	2903      	cmp	r1, #3
     a5a:	d100      	bne.n	a5e <__aeabi_fdiv+0x92>
     a5c:	e0cf      	b.n	bfe <__aeabi_fdiv+0x232>
     a5e:	2901      	cmp	r1, #1
     a60:	d000      	beq.n	a64 <__aeabi_fdiv+0x98>
     a62:	e0ab      	b.n	bbc <__aeabi_fdiv+0x1f0>
     a64:	4653      	mov	r3, sl
     a66:	400b      	ands	r3, r1
     a68:	2200      	movs	r2, #0
     a6a:	2600      	movs	r6, #0
     a6c:	e032      	b.n	ad4 <__aeabi_fdiv+0x108>
     a6e:	2e00      	cmp	r6, #0
     a70:	d119      	bne.n	aa6 <__aeabi_fdiv+0xda>
     a72:	2104      	movs	r1, #4
     a74:	2201      	movs	r2, #1
     a76:	4689      	mov	r9, r1
     a78:	4693      	mov	fp, r2
     a7a:	e7c0      	b.n	9fe <__aeabi_fdiv+0x32>
     a7c:	1c22      	adds	r2, r4, #0
     a7e:	1e53      	subs	r3, r2, #1
     a80:	419a      	sbcs	r2, r3
     a82:	3202      	adds	r2, #2
     a84:	9201      	str	r2, [sp, #4]
     a86:	e7cb      	b.n	a20 <__aeabi_fdiv+0x54>
     a88:	2701      	movs	r7, #1
     a8a:	9701      	str	r7, [sp, #4]
     a8c:	2c00      	cmp	r4, #0
     a8e:	d0c7      	beq.n	a20 <__aeabi_fdiv+0x54>
     a90:	1c20      	adds	r0, r4, #0
     a92:	f002 f839 	bl	2b08 <__clzsi2>
     a96:	1f43      	subs	r3, r0, #5
     a98:	409c      	lsls	r4, r3
     a9a:	2376      	movs	r3, #118	; 0x76
     a9c:	425b      	negs	r3, r3
     a9e:	2100      	movs	r1, #0
     aa0:	1a18      	subs	r0, r3, r0
     aa2:	9101      	str	r1, [sp, #4]
     aa4:	e7bc      	b.n	a20 <__aeabi_fdiv+0x54>
     aa6:	1c30      	adds	r0, r6, #0
     aa8:	f002 f82e 	bl	2b08 <__clzsi2>
     aac:	2576      	movs	r5, #118	; 0x76
     aae:	1f43      	subs	r3, r0, #5
     ab0:	409e      	lsls	r6, r3
     ab2:	426d      	negs	r5, r5
     ab4:	2300      	movs	r3, #0
     ab6:	1a2d      	subs	r5, r5, r0
     ab8:	4699      	mov	r9, r3
     aba:	469b      	mov	fp, r3
     abc:	e79f      	b.n	9fe <__aeabi_fdiv+0x32>
     abe:	230c      	movs	r3, #12
     ac0:	2103      	movs	r1, #3
     ac2:	4699      	mov	r9, r3
     ac4:	468b      	mov	fp, r1
     ac6:	e79a      	b.n	9fe <__aeabi_fdiv+0x32>
     ac8:	46d4      	mov	ip, sl
     aca:	2301      	movs	r3, #1
     acc:	4667      	mov	r7, ip
     ace:	403b      	ands	r3, r7
     ad0:	22ff      	movs	r2, #255	; 0xff
     ad2:	2600      	movs	r6, #0
     ad4:	0276      	lsls	r6, r6, #9
     ad6:	05d2      	lsls	r2, r2, #23
     ad8:	0a70      	lsrs	r0, r6, #9
     ada:	07db      	lsls	r3, r3, #31
     adc:	4310      	orrs	r0, r2
     ade:	4318      	orrs	r0, r3
     ae0:	b005      	add	sp, #20
     ae2:	bc3c      	pop	{r2, r3, r4, r5}
     ae4:	4690      	mov	r8, r2
     ae6:	4699      	mov	r9, r3
     ae8:	46a2      	mov	sl, r4
     aea:	46ab      	mov	fp, r5
     aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
     aee:	2680      	movs	r6, #128	; 0x80
     af0:	2300      	movs	r3, #0
     af2:	03f6      	lsls	r6, r6, #15
     af4:	22ff      	movs	r2, #255	; 0xff
     af6:	e7ed      	b.n	ad4 <__aeabi_fdiv+0x108>
     af8:	2200      	movs	r2, #0
     afa:	2600      	movs	r6, #0
     afc:	e7ea      	b.n	ad4 <__aeabi_fdiv+0x108>
     afe:	2080      	movs	r0, #128	; 0x80
     b00:	03c0      	lsls	r0, r0, #15
     b02:	4206      	tst	r6, r0
     b04:	d03b      	beq.n	b7e <__aeabi_fdiv+0x1b2>
     b06:	4204      	tst	r4, r0
     b08:	d139      	bne.n	b7e <__aeabi_fdiv+0x1b2>
     b0a:	1c06      	adds	r6, r0, #0
     b0c:	4326      	orrs	r6, r4
     b0e:	0276      	lsls	r6, r6, #9
     b10:	0a76      	lsrs	r6, r6, #9
     b12:	9b00      	ldr	r3, [sp, #0]
     b14:	22ff      	movs	r2, #255	; 0xff
     b16:	e7dd      	b.n	ad4 <__aeabi_fdiv+0x108>
     b18:	1a28      	subs	r0, r5, r0
     b1a:	9003      	str	r0, [sp, #12]
     b1c:	0176      	lsls	r6, r6, #5
     b1e:	0164      	lsls	r4, r4, #5
     b20:	42a6      	cmp	r6, r4
     b22:	d339      	bcc.n	b98 <__aeabi_fdiv+0x1cc>
     b24:	1b36      	subs	r6, r6, r4
     b26:	221a      	movs	r2, #26
     b28:	2301      	movs	r3, #1
     b2a:	2001      	movs	r0, #1
     b2c:	1c31      	adds	r1, r6, #0
     b2e:	005b      	lsls	r3, r3, #1
     b30:	0076      	lsls	r6, r6, #1
     b32:	2900      	cmp	r1, #0
     b34:	db01      	blt.n	b3a <__aeabi_fdiv+0x16e>
     b36:	42b4      	cmp	r4, r6
     b38:	d801      	bhi.n	b3e <__aeabi_fdiv+0x172>
     b3a:	1b36      	subs	r6, r6, r4
     b3c:	4303      	orrs	r3, r0
     b3e:	3a01      	subs	r2, #1
     b40:	2a00      	cmp	r2, #0
     b42:	dcf3      	bgt.n	b2c <__aeabi_fdiv+0x160>
     b44:	1e74      	subs	r4, r6, #1
     b46:	41a6      	sbcs	r6, r4
     b48:	1c34      	adds	r4, r6, #0
     b4a:	431c      	orrs	r4, r3
     b4c:	9a03      	ldr	r2, [sp, #12]
     b4e:	327f      	adds	r2, #127	; 0x7f
     b50:	2a00      	cmp	r2, #0
     b52:	dd27      	ble.n	ba4 <__aeabi_fdiv+0x1d8>
     b54:	0763      	lsls	r3, r4, #29
     b56:	d004      	beq.n	b62 <__aeabi_fdiv+0x196>
     b58:	230f      	movs	r3, #15
     b5a:	4023      	ands	r3, r4
     b5c:	2b04      	cmp	r3, #4
     b5e:	d000      	beq.n	b62 <__aeabi_fdiv+0x196>
     b60:	3404      	adds	r4, #4
     b62:	0127      	lsls	r7, r4, #4
     b64:	d503      	bpl.n	b6e <__aeabi_fdiv+0x1a2>
     b66:	4b2b      	ldr	r3, [pc, #172]	; (c14 <__aeabi_fdiv+0x248>)
     b68:	9a03      	ldr	r2, [sp, #12]
     b6a:	401c      	ands	r4, r3
     b6c:	3280      	adds	r2, #128	; 0x80
     b6e:	2afe      	cmp	r2, #254	; 0xfe
     b70:	dd0b      	ble.n	b8a <__aeabi_fdiv+0x1be>
     b72:	2301      	movs	r3, #1
     b74:	4661      	mov	r1, ip
     b76:	400b      	ands	r3, r1
     b78:	22ff      	movs	r2, #255	; 0xff
     b7a:	2600      	movs	r6, #0
     b7c:	e7aa      	b.n	ad4 <__aeabi_fdiv+0x108>
     b7e:	4306      	orrs	r6, r0
     b80:	0276      	lsls	r6, r6, #9
     b82:	0a76      	lsrs	r6, r6, #9
     b84:	4643      	mov	r3, r8
     b86:	22ff      	movs	r2, #255	; 0xff
     b88:	e7a4      	b.n	ad4 <__aeabi_fdiv+0x108>
     b8a:	01a4      	lsls	r4, r4, #6
     b8c:	2301      	movs	r3, #1
     b8e:	4667      	mov	r7, ip
     b90:	0a66      	lsrs	r6, r4, #9
     b92:	b2d2      	uxtb	r2, r2
     b94:	403b      	ands	r3, r7
     b96:	e79d      	b.n	ad4 <__aeabi_fdiv+0x108>
     b98:	9f03      	ldr	r7, [sp, #12]
     b9a:	221b      	movs	r2, #27
     b9c:	3f01      	subs	r7, #1
     b9e:	9703      	str	r7, [sp, #12]
     ba0:	2300      	movs	r3, #0
     ba2:	e7c2      	b.n	b2a <__aeabi_fdiv+0x15e>
     ba4:	237e      	movs	r3, #126	; 0x7e
     ba6:	9f03      	ldr	r7, [sp, #12]
     ba8:	425b      	negs	r3, r3
     baa:	1bdb      	subs	r3, r3, r7
     bac:	2b1b      	cmp	r3, #27
     bae:	dd07      	ble.n	bc0 <__aeabi_fdiv+0x1f4>
     bb0:	2301      	movs	r3, #1
     bb2:	4661      	mov	r1, ip
     bb4:	400b      	ands	r3, r1
     bb6:	2200      	movs	r2, #0
     bb8:	2600      	movs	r6, #0
     bba:	e78b      	b.n	ad4 <__aeabi_fdiv+0x108>
     bbc:	46d4      	mov	ip, sl
     bbe:	e7c5      	b.n	b4c <__aeabi_fdiv+0x180>
     bc0:	1c22      	adds	r2, r4, #0
     bc2:	40da      	lsrs	r2, r3
     bc4:	9b03      	ldr	r3, [sp, #12]
     bc6:	339e      	adds	r3, #158	; 0x9e
     bc8:	409c      	lsls	r4, r3
     bca:	1c23      	adds	r3, r4, #0
     bcc:	1e5c      	subs	r4, r3, #1
     bce:	41a3      	sbcs	r3, r4
     bd0:	4313      	orrs	r3, r2
     bd2:	075a      	lsls	r2, r3, #29
     bd4:	d004      	beq.n	be0 <__aeabi_fdiv+0x214>
     bd6:	220f      	movs	r2, #15
     bd8:	401a      	ands	r2, r3
     bda:	2a04      	cmp	r2, #4
     bdc:	d000      	beq.n	be0 <__aeabi_fdiv+0x214>
     bde:	3304      	adds	r3, #4
     be0:	015f      	lsls	r7, r3, #5
     be2:	d505      	bpl.n	bf0 <__aeabi_fdiv+0x224>
     be4:	2301      	movs	r3, #1
     be6:	4661      	mov	r1, ip
     be8:	400b      	ands	r3, r1
     bea:	2201      	movs	r2, #1
     bec:	2600      	movs	r6, #0
     bee:	e771      	b.n	ad4 <__aeabi_fdiv+0x108>
     bf0:	019e      	lsls	r6, r3, #6
     bf2:	4662      	mov	r2, ip
     bf4:	2301      	movs	r3, #1
     bf6:	4013      	ands	r3, r2
     bf8:	0a76      	lsrs	r6, r6, #9
     bfa:	2200      	movs	r2, #0
     bfc:	e76a      	b.n	ad4 <__aeabi_fdiv+0x108>
     bfe:	2680      	movs	r6, #128	; 0x80
     c00:	03f6      	lsls	r6, r6, #15
     c02:	4326      	orrs	r6, r4
     c04:	0276      	lsls	r6, r6, #9
     c06:	0a76      	lsrs	r6, r6, #9
     c08:	4653      	mov	r3, sl
     c0a:	22ff      	movs	r2, #255	; 0xff
     c0c:	e762      	b.n	ad4 <__aeabi_fdiv+0x108>
     c0e:	46c0      	nop			; (mov r8, r8)
     c10:	000131d0 	.word	0x000131d0
     c14:	f7ffffff 	.word	0xf7ffffff

00000c18 <__eqsf2>:
__nesf2():
     c18:	024a      	lsls	r2, r1, #9
     c1a:	0243      	lsls	r3, r0, #9
     c1c:	b570      	push	{r4, r5, r6, lr}
     c1e:	0a5c      	lsrs	r4, r3, #9
     c20:	0a55      	lsrs	r5, r2, #9
     c22:	0043      	lsls	r3, r0, #1
     c24:	004a      	lsls	r2, r1, #1
     c26:	0e1b      	lsrs	r3, r3, #24
     c28:	0fc6      	lsrs	r6, r0, #31
     c2a:	0e12      	lsrs	r2, r2, #24
     c2c:	0fc9      	lsrs	r1, r1, #31
     c2e:	2bff      	cmp	r3, #255	; 0xff
     c30:	d005      	beq.n	c3e <__eqsf2+0x26>
     c32:	2aff      	cmp	r2, #255	; 0xff
     c34:	d008      	beq.n	c48 <__eqsf2+0x30>
     c36:	2001      	movs	r0, #1
     c38:	4293      	cmp	r3, r2
     c3a:	d00b      	beq.n	c54 <__eqsf2+0x3c>
     c3c:	bd70      	pop	{r4, r5, r6, pc}
     c3e:	2001      	movs	r0, #1
     c40:	2c00      	cmp	r4, #0
     c42:	d1fb      	bne.n	c3c <__eqsf2+0x24>
     c44:	2aff      	cmp	r2, #255	; 0xff
     c46:	d1f6      	bne.n	c36 <__eqsf2+0x1e>
     c48:	2001      	movs	r0, #1
     c4a:	2d00      	cmp	r5, #0
     c4c:	d1f6      	bne.n	c3c <__eqsf2+0x24>
     c4e:	2001      	movs	r0, #1
     c50:	4293      	cmp	r3, r2
     c52:	d1f3      	bne.n	c3c <__eqsf2+0x24>
     c54:	42ac      	cmp	r4, r5
     c56:	d1f1      	bne.n	c3c <__eqsf2+0x24>
     c58:	428e      	cmp	r6, r1
     c5a:	d005      	beq.n	c68 <__eqsf2+0x50>
     c5c:	2b00      	cmp	r3, #0
     c5e:	d1ed      	bne.n	c3c <__eqsf2+0x24>
     c60:	1c20      	adds	r0, r4, #0
     c62:	1e44      	subs	r4, r0, #1
     c64:	41a0      	sbcs	r0, r4
     c66:	e7e9      	b.n	c3c <__eqsf2+0x24>
     c68:	2000      	movs	r0, #0
     c6a:	e7e7      	b.n	c3c <__eqsf2+0x24>

00000c6c <__gesf2>:
__gtsf2():
     c6c:	024a      	lsls	r2, r1, #9
     c6e:	0243      	lsls	r3, r0, #9
     c70:	b5f0      	push	{r4, r5, r6, r7, lr}
     c72:	0a5c      	lsrs	r4, r3, #9
     c74:	0a55      	lsrs	r5, r2, #9
     c76:	0043      	lsls	r3, r0, #1
     c78:	004a      	lsls	r2, r1, #1
     c7a:	0e1b      	lsrs	r3, r3, #24
     c7c:	0fc6      	lsrs	r6, r0, #31
     c7e:	0e12      	lsrs	r2, r2, #24
     c80:	0fc9      	lsrs	r1, r1, #31
     c82:	2bff      	cmp	r3, #255	; 0xff
     c84:	d031      	beq.n	cea <__gesf2+0x7e>
     c86:	2aff      	cmp	r2, #255	; 0xff
     c88:	d034      	beq.n	cf4 <__gesf2+0x88>
     c8a:	2b00      	cmp	r3, #0
     c8c:	d116      	bne.n	cbc <__gesf2+0x50>
     c8e:	4260      	negs	r0, r4
     c90:	4160      	adcs	r0, r4
     c92:	4684      	mov	ip, r0
     c94:	2a00      	cmp	r2, #0
     c96:	d014      	beq.n	cc2 <__gesf2+0x56>
     c98:	2800      	cmp	r0, #0
     c9a:	d120      	bne.n	cde <__gesf2+0x72>
     c9c:	428e      	cmp	r6, r1
     c9e:	d117      	bne.n	cd0 <__gesf2+0x64>
     ca0:	4293      	cmp	r3, r2
     ca2:	dc15      	bgt.n	cd0 <__gesf2+0x64>
     ca4:	db04      	blt.n	cb0 <__gesf2+0x44>
     ca6:	42ac      	cmp	r4, r5
     ca8:	d812      	bhi.n	cd0 <__gesf2+0x64>
     caa:	2000      	movs	r0, #0
     cac:	42ac      	cmp	r4, r5
     cae:	d212      	bcs.n	cd6 <__gesf2+0x6a>
     cb0:	4270      	negs	r0, r6
     cb2:	4170      	adcs	r0, r6
     cb4:	4240      	negs	r0, r0
     cb6:	2301      	movs	r3, #1
     cb8:	4318      	orrs	r0, r3
     cba:	e00c      	b.n	cd6 <__gesf2+0x6a>
     cbc:	2a00      	cmp	r2, #0
     cbe:	d1ed      	bne.n	c9c <__gesf2+0x30>
     cc0:	4694      	mov	ip, r2
     cc2:	426f      	negs	r7, r5
     cc4:	416f      	adcs	r7, r5
     cc6:	4660      	mov	r0, ip
     cc8:	2800      	cmp	r0, #0
     cca:	d105      	bne.n	cd8 <__gesf2+0x6c>
     ccc:	2f00      	cmp	r7, #0
     cce:	d0e5      	beq.n	c9c <__gesf2+0x30>
     cd0:	4270      	negs	r0, r6
     cd2:	2301      	movs	r3, #1
     cd4:	4318      	orrs	r0, r3
     cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cd8:	2000      	movs	r0, #0
     cda:	2f00      	cmp	r7, #0
     cdc:	d1fb      	bne.n	cd6 <__gesf2+0x6a>
     cde:	4248      	negs	r0, r1
     ce0:	4148      	adcs	r0, r1
     ce2:	4240      	negs	r0, r0
     ce4:	2301      	movs	r3, #1
     ce6:	4318      	orrs	r0, r3
     ce8:	e7f5      	b.n	cd6 <__gesf2+0x6a>
     cea:	2c00      	cmp	r4, #0
     cec:	d0cb      	beq.n	c86 <__gesf2+0x1a>
     cee:	2002      	movs	r0, #2
     cf0:	4240      	negs	r0, r0
     cf2:	e7f0      	b.n	cd6 <__gesf2+0x6a>
     cf4:	2d00      	cmp	r5, #0
     cf6:	d0c8      	beq.n	c8a <__gesf2+0x1e>
     cf8:	e7f9      	b.n	cee <__gesf2+0x82>
     cfa:	46c0      	nop			; (mov r8, r8)

00000cfc <__lesf2>:
__lesf2():
     cfc:	024a      	lsls	r2, r1, #9
     cfe:	0243      	lsls	r3, r0, #9
     d00:	b5f0      	push	{r4, r5, r6, r7, lr}
     d02:	0a5c      	lsrs	r4, r3, #9
     d04:	0a55      	lsrs	r5, r2, #9
     d06:	0043      	lsls	r3, r0, #1
     d08:	004a      	lsls	r2, r1, #1
     d0a:	0e1b      	lsrs	r3, r3, #24
     d0c:	0fc6      	lsrs	r6, r0, #31
     d0e:	0e12      	lsrs	r2, r2, #24
     d10:	0fc9      	lsrs	r1, r1, #31
     d12:	2bff      	cmp	r3, #255	; 0xff
     d14:	d027      	beq.n	d66 <__lesf2+0x6a>
     d16:	2aff      	cmp	r2, #255	; 0xff
     d18:	d029      	beq.n	d6e <__lesf2+0x72>
     d1a:	2b00      	cmp	r3, #0
     d1c:	d010      	beq.n	d40 <__lesf2+0x44>
     d1e:	2a00      	cmp	r2, #0
     d20:	d115      	bne.n	d4e <__lesf2+0x52>
     d22:	4694      	mov	ip, r2
     d24:	426f      	negs	r7, r5
     d26:	416f      	adcs	r7, r5
     d28:	4660      	mov	r0, ip
     d2a:	2800      	cmp	r0, #0
     d2c:	d015      	beq.n	d5a <__lesf2+0x5e>
     d2e:	2000      	movs	r0, #0
     d30:	2f00      	cmp	r7, #0
     d32:	d104      	bne.n	d3e <__lesf2+0x42>
     d34:	4248      	negs	r0, r1
     d36:	4148      	adcs	r0, r1
     d38:	4240      	negs	r0, r0
     d3a:	2301      	movs	r3, #1
     d3c:	4318      	orrs	r0, r3
     d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d40:	4260      	negs	r0, r4
     d42:	4160      	adcs	r0, r4
     d44:	4684      	mov	ip, r0
     d46:	2a00      	cmp	r2, #0
     d48:	d0ec      	beq.n	d24 <__lesf2+0x28>
     d4a:	2800      	cmp	r0, #0
     d4c:	d1f2      	bne.n	d34 <__lesf2+0x38>
     d4e:	428e      	cmp	r6, r1
     d50:	d011      	beq.n	d76 <__lesf2+0x7a>
     d52:	4270      	negs	r0, r6
     d54:	2301      	movs	r3, #1
     d56:	4318      	orrs	r0, r3
     d58:	e7f1      	b.n	d3e <__lesf2+0x42>
     d5a:	2f00      	cmp	r7, #0
     d5c:	d0f7      	beq.n	d4e <__lesf2+0x52>
     d5e:	4270      	negs	r0, r6
     d60:	2301      	movs	r3, #1
     d62:	4318      	orrs	r0, r3
     d64:	e7eb      	b.n	d3e <__lesf2+0x42>
     d66:	2002      	movs	r0, #2
     d68:	2c00      	cmp	r4, #0
     d6a:	d1e8      	bne.n	d3e <__lesf2+0x42>
     d6c:	e7d3      	b.n	d16 <__lesf2+0x1a>
     d6e:	2002      	movs	r0, #2
     d70:	2d00      	cmp	r5, #0
     d72:	d1e4      	bne.n	d3e <__lesf2+0x42>
     d74:	e7d1      	b.n	d1a <__lesf2+0x1e>
     d76:	4293      	cmp	r3, r2
     d78:	dceb      	bgt.n	d52 <__lesf2+0x56>
     d7a:	db04      	blt.n	d86 <__lesf2+0x8a>
     d7c:	42ac      	cmp	r4, r5
     d7e:	d8e8      	bhi.n	d52 <__lesf2+0x56>
     d80:	2000      	movs	r0, #0
     d82:	42ac      	cmp	r4, r5
     d84:	d2db      	bcs.n	d3e <__lesf2+0x42>
     d86:	4270      	negs	r0, r6
     d88:	4170      	adcs	r0, r6
     d8a:	4240      	negs	r0, r0
     d8c:	2301      	movs	r3, #1
     d8e:	4318      	orrs	r0, r3
     d90:	e7d5      	b.n	d3e <__lesf2+0x42>
     d92:	46c0      	nop			; (mov r8, r8)

00000d94 <__aeabi_fmul>:
__aeabi_fmul():
     d94:	b5f0      	push	{r4, r5, r6, r7, lr}
     d96:	465f      	mov	r7, fp
     d98:	4656      	mov	r6, sl
     d9a:	464d      	mov	r5, r9
     d9c:	4644      	mov	r4, r8
     d9e:	b4f0      	push	{r4, r5, r6, r7}
     da0:	0244      	lsls	r4, r0, #9
     da2:	0046      	lsls	r6, r0, #1
     da4:	b083      	sub	sp, #12
     da6:	1c0f      	adds	r7, r1, #0
     da8:	0a64      	lsrs	r4, r4, #9
     daa:	0e36      	lsrs	r6, r6, #24
     dac:	0fc5      	lsrs	r5, r0, #31
     dae:	2e00      	cmp	r6, #0
     db0:	d041      	beq.n	e36 <__aeabi_fmul+0xa2>
     db2:	2eff      	cmp	r6, #255	; 0xff
     db4:	d022      	beq.n	dfc <__aeabi_fmul+0x68>
     db6:	2380      	movs	r3, #128	; 0x80
     db8:	041b      	lsls	r3, r3, #16
     dba:	2000      	movs	r0, #0
     dbc:	431c      	orrs	r4, r3
     dbe:	00e4      	lsls	r4, r4, #3
     dc0:	3e7f      	subs	r6, #127	; 0x7f
     dc2:	4682      	mov	sl, r0
     dc4:	4680      	mov	r8, r0
     dc6:	1c39      	adds	r1, r7, #0
     dc8:	004b      	lsls	r3, r1, #1
     dca:	027f      	lsls	r7, r7, #9
     dcc:	0fc9      	lsrs	r1, r1, #31
     dce:	0a7f      	lsrs	r7, r7, #9
     dd0:	0e1b      	lsrs	r3, r3, #24
     dd2:	468b      	mov	fp, r1
     dd4:	d03b      	beq.n	e4e <__aeabi_fmul+0xba>
     dd6:	2bff      	cmp	r3, #255	; 0xff
     dd8:	d034      	beq.n	e44 <__aeabi_fmul+0xb0>
     dda:	2280      	movs	r2, #128	; 0x80
     ddc:	0412      	lsls	r2, r2, #16
     dde:	4317      	orrs	r7, r2
     de0:	00ff      	lsls	r7, r7, #3
     de2:	3b7f      	subs	r3, #127	; 0x7f
     de4:	2100      	movs	r1, #0
     de6:	465a      	mov	r2, fp
     de8:	406a      	eors	r2, r5
     dea:	9201      	str	r2, [sp, #4]
     dec:	4652      	mov	r2, sl
     dee:	430a      	orrs	r2, r1
     df0:	2a0f      	cmp	r2, #15
     df2:	d863      	bhi.n	ebc <__aeabi_fmul+0x128>
     df4:	487a      	ldr	r0, [pc, #488]	; (fe0 <__aeabi_fmul+0x24c>)
     df6:	0092      	lsls	r2, r2, #2
     df8:	5882      	ldr	r2, [r0, r2]
     dfa:	4697      	mov	pc, r2
     dfc:	2c00      	cmp	r4, #0
     dfe:	d13f      	bne.n	e80 <__aeabi_fmul+0xec>
     e00:	2208      	movs	r2, #8
     e02:	2302      	movs	r3, #2
     e04:	4692      	mov	sl, r2
     e06:	4698      	mov	r8, r3
     e08:	e7dd      	b.n	dc6 <__aeabi_fmul+0x32>
     e0a:	9501      	str	r5, [sp, #4]
     e0c:	4640      	mov	r0, r8
     e0e:	2802      	cmp	r0, #2
     e10:	d12a      	bne.n	e68 <__aeabi_fmul+0xd4>
     e12:	9a01      	ldr	r2, [sp, #4]
     e14:	2501      	movs	r5, #1
     e16:	4015      	ands	r5, r2
     e18:	23ff      	movs	r3, #255	; 0xff
     e1a:	2400      	movs	r4, #0
     e1c:	0264      	lsls	r4, r4, #9
     e1e:	05db      	lsls	r3, r3, #23
     e20:	0a60      	lsrs	r0, r4, #9
     e22:	07ed      	lsls	r5, r5, #31
     e24:	4318      	orrs	r0, r3
     e26:	4328      	orrs	r0, r5
     e28:	b003      	add	sp, #12
     e2a:	bc3c      	pop	{r2, r3, r4, r5}
     e2c:	4690      	mov	r8, r2
     e2e:	4699      	mov	r9, r3
     e30:	46a2      	mov	sl, r4
     e32:	46ab      	mov	fp, r5
     e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e36:	2c00      	cmp	r4, #0
     e38:	d127      	bne.n	e8a <__aeabi_fmul+0xf6>
     e3a:	2004      	movs	r0, #4
     e3c:	2201      	movs	r2, #1
     e3e:	4682      	mov	sl, r0
     e40:	4690      	mov	r8, r2
     e42:	e7c0      	b.n	dc6 <__aeabi_fmul+0x32>
     e44:	1c39      	adds	r1, r7, #0
     e46:	1e4a      	subs	r2, r1, #1
     e48:	4191      	sbcs	r1, r2
     e4a:	3102      	adds	r1, #2
     e4c:	e7cb      	b.n	de6 <__aeabi_fmul+0x52>
     e4e:	2101      	movs	r1, #1
     e50:	2f00      	cmp	r7, #0
     e52:	d0c8      	beq.n	de6 <__aeabi_fmul+0x52>
     e54:	1c38      	adds	r0, r7, #0
     e56:	f001 fe57 	bl	2b08 <__clzsi2>
     e5a:	1f43      	subs	r3, r0, #5
     e5c:	409f      	lsls	r7, r3
     e5e:	2376      	movs	r3, #118	; 0x76
     e60:	425b      	negs	r3, r3
     e62:	1a1b      	subs	r3, r3, r0
     e64:	2100      	movs	r1, #0
     e66:	e7be      	b.n	de6 <__aeabi_fmul+0x52>
     e68:	2803      	cmp	r0, #3
     e6a:	d100      	bne.n	e6e <__aeabi_fmul+0xda>
     e6c:	e0ae      	b.n	fcc <__aeabi_fmul+0x238>
     e6e:	2801      	cmp	r0, #1
     e70:	d14f      	bne.n	f12 <__aeabi_fmul+0x17e>
     e72:	9801      	ldr	r0, [sp, #4]
     e74:	4642      	mov	r2, r8
     e76:	4010      	ands	r0, r2
     e78:	b2c5      	uxtb	r5, r0
     e7a:	2300      	movs	r3, #0
     e7c:	2400      	movs	r4, #0
     e7e:	e7cd      	b.n	e1c <__aeabi_fmul+0x88>
     e80:	230c      	movs	r3, #12
     e82:	2003      	movs	r0, #3
     e84:	469a      	mov	sl, r3
     e86:	4680      	mov	r8, r0
     e88:	e79d      	b.n	dc6 <__aeabi_fmul+0x32>
     e8a:	1c20      	adds	r0, r4, #0
     e8c:	f001 fe3c 	bl	2b08 <__clzsi2>
     e90:	2676      	movs	r6, #118	; 0x76
     e92:	1f43      	subs	r3, r0, #5
     e94:	409c      	lsls	r4, r3
     e96:	4276      	negs	r6, r6
     e98:	2300      	movs	r3, #0
     e9a:	1a36      	subs	r6, r6, r0
     e9c:	469a      	mov	sl, r3
     e9e:	4698      	mov	r8, r3
     ea0:	e791      	b.n	dc6 <__aeabi_fmul+0x32>
     ea2:	2480      	movs	r4, #128	; 0x80
     ea4:	2500      	movs	r5, #0
     ea6:	03e4      	lsls	r4, r4, #15
     ea8:	23ff      	movs	r3, #255	; 0xff
     eaa:	e7b7      	b.n	e1c <__aeabi_fmul+0x88>
     eac:	465b      	mov	r3, fp
     eae:	1c3c      	adds	r4, r7, #0
     eb0:	9301      	str	r3, [sp, #4]
     eb2:	4688      	mov	r8, r1
     eb4:	e7aa      	b.n	e0c <__aeabi_fmul+0x78>
     eb6:	1c3c      	adds	r4, r7, #0
     eb8:	4688      	mov	r8, r1
     eba:	e7a7      	b.n	e0c <__aeabi_fmul+0x78>
     ebc:	0c25      	lsrs	r5, r4, #16
     ebe:	0424      	lsls	r4, r4, #16
     ec0:	0c3a      	lsrs	r2, r7, #16
     ec2:	0c24      	lsrs	r4, r4, #16
     ec4:	043f      	lsls	r7, r7, #16
     ec6:	18f6      	adds	r6, r6, r3
     ec8:	0c3f      	lsrs	r7, r7, #16
     eca:	1c21      	adds	r1, r4, #0
     ecc:	1c23      	adds	r3, r4, #0
     ece:	4379      	muls	r1, r7
     ed0:	4353      	muls	r3, r2
     ed2:	436f      	muls	r7, r5
     ed4:	4355      	muls	r5, r2
     ed6:	18fb      	adds	r3, r7, r3
     ed8:	0c0a      	lsrs	r2, r1, #16
     eda:	189b      	adds	r3, r3, r2
     edc:	46b1      	mov	r9, r6
     ede:	429f      	cmp	r7, r3
     ee0:	d902      	bls.n	ee8 <__aeabi_fmul+0x154>
     ee2:	2280      	movs	r2, #128	; 0x80
     ee4:	0252      	lsls	r2, r2, #9
     ee6:	18ad      	adds	r5, r5, r2
     ee8:	0409      	lsls	r1, r1, #16
     eea:	041a      	lsls	r2, r3, #16
     eec:	0c09      	lsrs	r1, r1, #16
     eee:	1852      	adds	r2, r2, r1
     ef0:	0194      	lsls	r4, r2, #6
     ef2:	0c1b      	lsrs	r3, r3, #16
     ef4:	1e61      	subs	r1, r4, #1
     ef6:	418c      	sbcs	r4, r1
     ef8:	0e92      	lsrs	r2, r2, #26
     efa:	18ed      	adds	r5, r5, r3
     efc:	4314      	orrs	r4, r2
     efe:	01ad      	lsls	r5, r5, #6
     f00:	432c      	orrs	r4, r5
     f02:	0123      	lsls	r3, r4, #4
     f04:	d505      	bpl.n	f12 <__aeabi_fmul+0x17e>
     f06:	2201      	movs	r2, #1
     f08:	0863      	lsrs	r3, r4, #1
     f0a:	2001      	movs	r0, #1
     f0c:	4014      	ands	r4, r2
     f0e:	4481      	add	r9, r0
     f10:	431c      	orrs	r4, r3
     f12:	464b      	mov	r3, r9
     f14:	337f      	adds	r3, #127	; 0x7f
     f16:	2b00      	cmp	r3, #0
     f18:	dd2d      	ble.n	f76 <__aeabi_fmul+0x1e2>
     f1a:	0760      	lsls	r0, r4, #29
     f1c:	d004      	beq.n	f28 <__aeabi_fmul+0x194>
     f1e:	220f      	movs	r2, #15
     f20:	4022      	ands	r2, r4
     f22:	2a04      	cmp	r2, #4
     f24:	d000      	beq.n	f28 <__aeabi_fmul+0x194>
     f26:	3404      	adds	r4, #4
     f28:	0122      	lsls	r2, r4, #4
     f2a:	d503      	bpl.n	f34 <__aeabi_fmul+0x1a0>
     f2c:	4b2d      	ldr	r3, [pc, #180]	; (fe4 <__aeabi_fmul+0x250>)
     f2e:	401c      	ands	r4, r3
     f30:	464b      	mov	r3, r9
     f32:	3380      	adds	r3, #128	; 0x80
     f34:	2bfe      	cmp	r3, #254	; 0xfe
     f36:	dd17      	ble.n	f68 <__aeabi_fmul+0x1d4>
     f38:	9b01      	ldr	r3, [sp, #4]
     f3a:	2501      	movs	r5, #1
     f3c:	401d      	ands	r5, r3
     f3e:	2400      	movs	r4, #0
     f40:	23ff      	movs	r3, #255	; 0xff
     f42:	e76b      	b.n	e1c <__aeabi_fmul+0x88>
     f44:	2080      	movs	r0, #128	; 0x80
     f46:	03c0      	lsls	r0, r0, #15
     f48:	4204      	tst	r4, r0
     f4a:	d008      	beq.n	f5e <__aeabi_fmul+0x1ca>
     f4c:	4207      	tst	r7, r0
     f4e:	d106      	bne.n	f5e <__aeabi_fmul+0x1ca>
     f50:	1c04      	adds	r4, r0, #0
     f52:	433c      	orrs	r4, r7
     f54:	0264      	lsls	r4, r4, #9
     f56:	0a64      	lsrs	r4, r4, #9
     f58:	465d      	mov	r5, fp
     f5a:	23ff      	movs	r3, #255	; 0xff
     f5c:	e75e      	b.n	e1c <__aeabi_fmul+0x88>
     f5e:	4304      	orrs	r4, r0
     f60:	0264      	lsls	r4, r4, #9
     f62:	0a64      	lsrs	r4, r4, #9
     f64:	23ff      	movs	r3, #255	; 0xff
     f66:	e759      	b.n	e1c <__aeabi_fmul+0x88>
     f68:	9801      	ldr	r0, [sp, #4]
     f6a:	01a4      	lsls	r4, r4, #6
     f6c:	2501      	movs	r5, #1
     f6e:	0a64      	lsrs	r4, r4, #9
     f70:	b2db      	uxtb	r3, r3
     f72:	4005      	ands	r5, r0
     f74:	e752      	b.n	e1c <__aeabi_fmul+0x88>
     f76:	237e      	movs	r3, #126	; 0x7e
     f78:	425b      	negs	r3, r3
     f7a:	464a      	mov	r2, r9
     f7c:	1a9b      	subs	r3, r3, r2
     f7e:	2b1b      	cmp	r3, #27
     f80:	dd05      	ble.n	f8e <__aeabi_fmul+0x1fa>
     f82:	9b01      	ldr	r3, [sp, #4]
     f84:	2501      	movs	r5, #1
     f86:	401d      	ands	r5, r3
     f88:	2400      	movs	r4, #0
     f8a:	2300      	movs	r3, #0
     f8c:	e746      	b.n	e1c <__aeabi_fmul+0x88>
     f8e:	1c22      	adds	r2, r4, #0
     f90:	40da      	lsrs	r2, r3
     f92:	464b      	mov	r3, r9
     f94:	339e      	adds	r3, #158	; 0x9e
     f96:	409c      	lsls	r4, r3
     f98:	1c23      	adds	r3, r4, #0
     f9a:	1e5c      	subs	r4, r3, #1
     f9c:	41a3      	sbcs	r3, r4
     f9e:	4313      	orrs	r3, r2
     fa0:	0758      	lsls	r0, r3, #29
     fa2:	d004      	beq.n	fae <__aeabi_fmul+0x21a>
     fa4:	220f      	movs	r2, #15
     fa6:	401a      	ands	r2, r3
     fa8:	2a04      	cmp	r2, #4
     faa:	d000      	beq.n	fae <__aeabi_fmul+0x21a>
     fac:	3304      	adds	r3, #4
     fae:	015a      	lsls	r2, r3, #5
     fb0:	d505      	bpl.n	fbe <__aeabi_fmul+0x22a>
     fb2:	9b01      	ldr	r3, [sp, #4]
     fb4:	2501      	movs	r5, #1
     fb6:	401d      	ands	r5, r3
     fb8:	2400      	movs	r4, #0
     fba:	2301      	movs	r3, #1
     fbc:	e72e      	b.n	e1c <__aeabi_fmul+0x88>
     fbe:	9801      	ldr	r0, [sp, #4]
     fc0:	019c      	lsls	r4, r3, #6
     fc2:	2501      	movs	r5, #1
     fc4:	0a64      	lsrs	r4, r4, #9
     fc6:	4005      	ands	r5, r0
     fc8:	2300      	movs	r3, #0
     fca:	e727      	b.n	e1c <__aeabi_fmul+0x88>
     fcc:	2780      	movs	r7, #128	; 0x80
     fce:	03ff      	lsls	r7, r7, #15
     fd0:	9b01      	ldr	r3, [sp, #4]
     fd2:	433c      	orrs	r4, r7
     fd4:	0264      	lsls	r4, r4, #9
     fd6:	2501      	movs	r5, #1
     fd8:	401d      	ands	r5, r3
     fda:	0a64      	lsrs	r4, r4, #9
     fdc:	23ff      	movs	r3, #255	; 0xff
     fde:	e71d      	b.n	e1c <__aeabi_fmul+0x88>
     fe0:	00013210 	.word	0x00013210
     fe4:	f7ffffff 	.word	0xf7ffffff

00000fe8 <__aeabi_fsub>:
__aeabi_fsub():
     fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fea:	0fc2      	lsrs	r2, r0, #31
     fec:	0243      	lsls	r3, r0, #9
     fee:	0044      	lsls	r4, r0, #1
     ff0:	024d      	lsls	r5, r1, #9
     ff2:	0048      	lsls	r0, r1, #1
     ff4:	0e24      	lsrs	r4, r4, #24
     ff6:	1c16      	adds	r6, r2, #0
     ff8:	099b      	lsrs	r3, r3, #6
     ffa:	0e00      	lsrs	r0, r0, #24
     ffc:	0fc9      	lsrs	r1, r1, #31
     ffe:	09ad      	lsrs	r5, r5, #6
    1000:	28ff      	cmp	r0, #255	; 0xff
    1002:	d100      	bne.n	1006 <PREEMPTION_DISABLED+0x6>
    1004:	e083      	b.n	110e <PREEMPTION_DISABLED+0x10e>
    1006:	2701      	movs	r7, #1
    1008:	4079      	eors	r1, r7
    100a:	428a      	cmp	r2, r1
    100c:	d05c      	beq.n	10c8 <PREEMPTION_DISABLED+0xc8>
    100e:	1a22      	subs	r2, r4, r0
    1010:	2a00      	cmp	r2, #0
    1012:	dc00      	bgt.n	1016 <PREEMPTION_DISABLED+0x16>
    1014:	e08e      	b.n	1134 <PREEMPTION_DISABLED+0x134>
    1016:	2800      	cmp	r0, #0
    1018:	d11e      	bne.n	1058 <PREEMPTION_DISABLED+0x58>
    101a:	2d00      	cmp	r5, #0
    101c:	d000      	beq.n	1020 <PREEMPTION_DISABLED+0x20>
    101e:	e07a      	b.n	1116 <PREEMPTION_DISABLED+0x116>
    1020:	0758      	lsls	r0, r3, #29
    1022:	d004      	beq.n	102e <PREEMPTION_DISABLED+0x2e>
    1024:	220f      	movs	r2, #15
    1026:	401a      	ands	r2, r3
    1028:	2a04      	cmp	r2, #4
    102a:	d000      	beq.n	102e <PREEMPTION_DISABLED+0x2e>
    102c:	3304      	adds	r3, #4
    102e:	2180      	movs	r1, #128	; 0x80
    1030:	04c9      	lsls	r1, r1, #19
    1032:	2201      	movs	r2, #1
    1034:	4019      	ands	r1, r3
    1036:	4032      	ands	r2, r6
    1038:	2900      	cmp	r1, #0
    103a:	d03a      	beq.n	10b2 <PREEMPTION_DISABLED+0xb2>
    103c:	3401      	adds	r4, #1
    103e:	2cff      	cmp	r4, #255	; 0xff
    1040:	d100      	bne.n	1044 <PREEMPTION_DISABLED+0x44>
    1042:	e083      	b.n	114c <PREEMPTION_DISABLED+0x14c>
    1044:	019b      	lsls	r3, r3, #6
    1046:	0a5b      	lsrs	r3, r3, #9
    1048:	025b      	lsls	r3, r3, #9
    104a:	b2e4      	uxtb	r4, r4
    104c:	05e4      	lsls	r4, r4, #23
    104e:	0a58      	lsrs	r0, r3, #9
    1050:	07d2      	lsls	r2, r2, #31
    1052:	4320      	orrs	r0, r4
    1054:	4310      	orrs	r0, r2
    1056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1058:	2cff      	cmp	r4, #255	; 0xff
    105a:	d0e1      	beq.n	1020 <PREEMPTION_DISABLED+0x20>
    105c:	2180      	movs	r1, #128	; 0x80
    105e:	04c9      	lsls	r1, r1, #19
    1060:	430d      	orrs	r5, r1
    1062:	2a1b      	cmp	r2, #27
    1064:	dd00      	ble.n	1068 <PREEMPTION_DISABLED+0x68>
    1066:	e131      	b.n	12cc <PREEMPTION_DISABLED+0x2cc>
    1068:	1c29      	adds	r1, r5, #0
    106a:	2020      	movs	r0, #32
    106c:	40d1      	lsrs	r1, r2
    106e:	1a82      	subs	r2, r0, r2
    1070:	4095      	lsls	r5, r2
    1072:	1e6a      	subs	r2, r5, #1
    1074:	4195      	sbcs	r5, r2
    1076:	430d      	orrs	r5, r1
    1078:	1b5b      	subs	r3, r3, r5
    107a:	0158      	lsls	r0, r3, #5
    107c:	d5d0      	bpl.n	1020 <PREEMPTION_DISABLED+0x20>
    107e:	019b      	lsls	r3, r3, #6
    1080:	099f      	lsrs	r7, r3, #6
    1082:	1c38      	adds	r0, r7, #0
    1084:	f001 fd40 	bl	2b08 <__clzsi2>
    1088:	1f42      	subs	r2, r0, #5
    108a:	4097      	lsls	r7, r2
    108c:	4294      	cmp	r4, r2
    108e:	dc5f      	bgt.n	1150 <PREEMPTION_DISABLED+0x150>
    1090:	1b14      	subs	r4, r2, r4
    1092:	231f      	movs	r3, #31
    1094:	1b1b      	subs	r3, r3, r4
    1096:	1c3a      	adds	r2, r7, #0
    1098:	409f      	lsls	r7, r3
    109a:	1c61      	adds	r1, r4, #1
    109c:	1c3b      	adds	r3, r7, #0
    109e:	40ca      	lsrs	r2, r1
    10a0:	1e5f      	subs	r7, r3, #1
    10a2:	41bb      	sbcs	r3, r7
    10a4:	4313      	orrs	r3, r2
    10a6:	2400      	movs	r4, #0
    10a8:	e7ba      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    10aa:	1e13      	subs	r3, r2, #0
    10ac:	d1b8      	bne.n	1020 <PREEMPTION_DISABLED+0x20>
    10ae:	2300      	movs	r3, #0
    10b0:	2200      	movs	r2, #0
    10b2:	08db      	lsrs	r3, r3, #3
    10b4:	2cff      	cmp	r4, #255	; 0xff
    10b6:	d104      	bne.n	10c2 <PREEMPTION_DISABLED+0xc2>
    10b8:	2b00      	cmp	r3, #0
    10ba:	d047      	beq.n	114c <PREEMPTION_DISABLED+0x14c>
    10bc:	2080      	movs	r0, #128	; 0x80
    10be:	03c0      	lsls	r0, r0, #15
    10c0:	4303      	orrs	r3, r0
    10c2:	025b      	lsls	r3, r3, #9
    10c4:	0a5b      	lsrs	r3, r3, #9
    10c6:	e7bf      	b.n	1048 <PREEMPTION_DISABLED+0x48>
    10c8:	1a21      	subs	r1, r4, r0
    10ca:	2900      	cmp	r1, #0
    10cc:	dd44      	ble.n	1158 <PREEMPTION_DISABLED+0x158>
    10ce:	2800      	cmp	r0, #0
    10d0:	d027      	beq.n	1122 <PREEMPTION_DISABLED+0x122>
    10d2:	2cff      	cmp	r4, #255	; 0xff
    10d4:	d0a4      	beq.n	1020 <PREEMPTION_DISABLED+0x20>
    10d6:	2080      	movs	r0, #128	; 0x80
    10d8:	04c0      	lsls	r0, r0, #19
    10da:	4305      	orrs	r5, r0
    10dc:	291b      	cmp	r1, #27
    10de:	dd00      	ble.n	10e2 <PREEMPTION_DISABLED+0xe2>
    10e0:	e0f2      	b.n	12c8 <PREEMPTION_DISABLED+0x2c8>
    10e2:	1c28      	adds	r0, r5, #0
    10e4:	2720      	movs	r7, #32
    10e6:	40c8      	lsrs	r0, r1
    10e8:	1a79      	subs	r1, r7, r1
    10ea:	408d      	lsls	r5, r1
    10ec:	1e69      	subs	r1, r5, #1
    10ee:	418d      	sbcs	r5, r1
    10f0:	4305      	orrs	r5, r0
    10f2:	195b      	adds	r3, r3, r5
    10f4:	0159      	lsls	r1, r3, #5
    10f6:	d400      	bmi.n	10fa <PREEMPTION_DISABLED+0xfa>
    10f8:	e792      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    10fa:	3401      	adds	r4, #1
    10fc:	2cff      	cmp	r4, #255	; 0xff
    10fe:	d059      	beq.n	11b4 <PREEMPTION_DISABLED+0x1b4>
    1100:	4973      	ldr	r1, [pc, #460]	; (12d0 <PREEMPTION_DISABLED+0x2d0>)
    1102:	2201      	movs	r2, #1
    1104:	401a      	ands	r2, r3
    1106:	400b      	ands	r3, r1
    1108:	085b      	lsrs	r3, r3, #1
    110a:	4313      	orrs	r3, r2
    110c:	e788      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    110e:	2d00      	cmp	r5, #0
    1110:	d000      	beq.n	1114 <PREEMPTION_DISABLED+0x114>
    1112:	e77a      	b.n	100a <PREEMPTION_DISABLED+0xa>
    1114:	e777      	b.n	1006 <PREEMPTION_DISABLED+0x6>
    1116:	3a01      	subs	r2, #1
    1118:	2a00      	cmp	r2, #0
    111a:	d0ad      	beq.n	1078 <PREEMPTION_DISABLED+0x78>
    111c:	2cff      	cmp	r4, #255	; 0xff
    111e:	d1a0      	bne.n	1062 <PREEMPTION_DISABLED+0x62>
    1120:	e77e      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    1122:	2d00      	cmp	r5, #0
    1124:	d100      	bne.n	1128 <PREEMPTION_DISABLED+0x128>
    1126:	e77b      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    1128:	3901      	subs	r1, #1
    112a:	2900      	cmp	r1, #0
    112c:	d0e1      	beq.n	10f2 <PREEMPTION_DISABLED+0xf2>
    112e:	2cff      	cmp	r4, #255	; 0xff
    1130:	d1d4      	bne.n	10dc <PREEMPTION_DISABLED+0xdc>
    1132:	e775      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    1134:	2a00      	cmp	r2, #0
    1136:	d11b      	bne.n	1170 <PREEMPTION_DISABLED+0x170>
    1138:	1c62      	adds	r2, r4, #1
    113a:	b2d2      	uxtb	r2, r2
    113c:	2a01      	cmp	r2, #1
    113e:	dd4b      	ble.n	11d8 <PREEMPTION_DISABLED+0x1d8>
    1140:	1b5f      	subs	r7, r3, r5
    1142:	017a      	lsls	r2, r7, #5
    1144:	d523      	bpl.n	118e <PREEMPTION_DISABLED+0x18e>
    1146:	1aef      	subs	r7, r5, r3
    1148:	1c0e      	adds	r6, r1, #0
    114a:	e79a      	b.n	1082 <PREEMPTION_DISABLED+0x82>
    114c:	2300      	movs	r3, #0
    114e:	e77b      	b.n	1048 <PREEMPTION_DISABLED+0x48>
    1150:	4b5f      	ldr	r3, [pc, #380]	; (12d0 <PREEMPTION_DISABLED+0x2d0>)
    1152:	1aa4      	subs	r4, r4, r2
    1154:	403b      	ands	r3, r7
    1156:	e763      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    1158:	2900      	cmp	r1, #0
    115a:	d146      	bne.n	11ea <PREEMPTION_DISABLED+0x1ea>
    115c:	1c61      	adds	r1, r4, #1
    115e:	b2c8      	uxtb	r0, r1
    1160:	2801      	cmp	r0, #1
    1162:	dd29      	ble.n	11b8 <PREEMPTION_DISABLED+0x1b8>
    1164:	29ff      	cmp	r1, #255	; 0xff
    1166:	d024      	beq.n	11b2 <PREEMPTION_DISABLED+0x1b2>
    1168:	18eb      	adds	r3, r5, r3
    116a:	085b      	lsrs	r3, r3, #1
    116c:	1c0c      	adds	r4, r1, #0
    116e:	e757      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    1170:	2c00      	cmp	r4, #0
    1172:	d013      	beq.n	119c <PREEMPTION_DISABLED+0x19c>
    1174:	28ff      	cmp	r0, #255	; 0xff
    1176:	d018      	beq.n	11aa <PREEMPTION_DISABLED+0x1aa>
    1178:	2480      	movs	r4, #128	; 0x80
    117a:	04e4      	lsls	r4, r4, #19
    117c:	4252      	negs	r2, r2
    117e:	4323      	orrs	r3, r4
    1180:	2a1b      	cmp	r2, #27
    1182:	dd4d      	ble.n	1220 <PREEMPTION_DISABLED+0x220>
    1184:	2301      	movs	r3, #1
    1186:	1aeb      	subs	r3, r5, r3
    1188:	1c04      	adds	r4, r0, #0
    118a:	1c0e      	adds	r6, r1, #0
    118c:	e775      	b.n	107a <PREEMPTION_DISABLED+0x7a>
    118e:	2f00      	cmp	r7, #0
    1190:	d000      	beq.n	1194 <PREEMPTION_DISABLED+0x194>
    1192:	e776      	b.n	1082 <PREEMPTION_DISABLED+0x82>
    1194:	2300      	movs	r3, #0
    1196:	2200      	movs	r2, #0
    1198:	2400      	movs	r4, #0
    119a:	e78a      	b.n	10b2 <PREEMPTION_DISABLED+0xb2>
    119c:	2b00      	cmp	r3, #0
    119e:	d03b      	beq.n	1218 <PREEMPTION_DISABLED+0x218>
    11a0:	43d2      	mvns	r2, r2
    11a2:	2a00      	cmp	r2, #0
    11a4:	d0ef      	beq.n	1186 <PREEMPTION_DISABLED+0x186>
    11a6:	28ff      	cmp	r0, #255	; 0xff
    11a8:	d1ea      	bne.n	1180 <PREEMPTION_DISABLED+0x180>
    11aa:	1c2b      	adds	r3, r5, #0
    11ac:	24ff      	movs	r4, #255	; 0xff
    11ae:	1c0e      	adds	r6, r1, #0
    11b0:	e736      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    11b2:	24ff      	movs	r4, #255	; 0xff
    11b4:	2300      	movs	r3, #0
    11b6:	e77c      	b.n	10b2 <PREEMPTION_DISABLED+0xb2>
    11b8:	2c00      	cmp	r4, #0
    11ba:	d15c      	bne.n	1276 <PREEMPTION_DISABLED+0x276>
    11bc:	2b00      	cmp	r3, #0
    11be:	d100      	bne.n	11c2 <PREEMPTION_DISABLED+0x1c2>
    11c0:	e080      	b.n	12c4 <PREEMPTION_DISABLED+0x2c4>
    11c2:	2d00      	cmp	r5, #0
    11c4:	d100      	bne.n	11c8 <PREEMPTION_DISABLED+0x1c8>
    11c6:	e72b      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    11c8:	195b      	adds	r3, r3, r5
    11ca:	0158      	lsls	r0, r3, #5
    11cc:	d400      	bmi.n	11d0 <PREEMPTION_DISABLED+0x1d0>
    11ce:	e727      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    11d0:	4a3f      	ldr	r2, [pc, #252]	; (12d0 <PREEMPTION_DISABLED+0x2d0>)
    11d2:	2401      	movs	r4, #1
    11d4:	4013      	ands	r3, r2
    11d6:	e723      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    11d8:	2c00      	cmp	r4, #0
    11da:	d115      	bne.n	1208 <PREEMPTION_DISABLED+0x208>
    11dc:	2b00      	cmp	r3, #0
    11de:	d140      	bne.n	1262 <PREEMPTION_DISABLED+0x262>
    11e0:	2d00      	cmp	r5, #0
    11e2:	d063      	beq.n	12ac <PREEMPTION_DISABLED+0x2ac>
    11e4:	1c2b      	adds	r3, r5, #0
    11e6:	1c0e      	adds	r6, r1, #0
    11e8:	e71a      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    11ea:	2c00      	cmp	r4, #0
    11ec:	d121      	bne.n	1232 <PREEMPTION_DISABLED+0x232>
    11ee:	2b00      	cmp	r3, #0
    11f0:	d054      	beq.n	129c <PREEMPTION_DISABLED+0x29c>
    11f2:	43c9      	mvns	r1, r1
    11f4:	2900      	cmp	r1, #0
    11f6:	d004      	beq.n	1202 <PREEMPTION_DISABLED+0x202>
    11f8:	28ff      	cmp	r0, #255	; 0xff
    11fa:	d04c      	beq.n	1296 <PREEMPTION_DISABLED+0x296>
    11fc:	291b      	cmp	r1, #27
    11fe:	dd58      	ble.n	12b2 <PREEMPTION_DISABLED+0x2b2>
    1200:	2301      	movs	r3, #1
    1202:	195b      	adds	r3, r3, r5
    1204:	1c04      	adds	r4, r0, #0
    1206:	e775      	b.n	10f4 <PREEMPTION_DISABLED+0xf4>
    1208:	2b00      	cmp	r3, #0
    120a:	d119      	bne.n	1240 <PREEMPTION_DISABLED+0x240>
    120c:	2d00      	cmp	r5, #0
    120e:	d048      	beq.n	12a2 <PREEMPTION_DISABLED+0x2a2>
    1210:	1c2b      	adds	r3, r5, #0
    1212:	1c0e      	adds	r6, r1, #0
    1214:	24ff      	movs	r4, #255	; 0xff
    1216:	e703      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    1218:	1c2b      	adds	r3, r5, #0
    121a:	1c04      	adds	r4, r0, #0
    121c:	1c0e      	adds	r6, r1, #0
    121e:	e6ff      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    1220:	1c1c      	adds	r4, r3, #0
    1222:	2620      	movs	r6, #32
    1224:	40d4      	lsrs	r4, r2
    1226:	1ab2      	subs	r2, r6, r2
    1228:	4093      	lsls	r3, r2
    122a:	1e5a      	subs	r2, r3, #1
    122c:	4193      	sbcs	r3, r2
    122e:	4323      	orrs	r3, r4
    1230:	e7a9      	b.n	1186 <PREEMPTION_DISABLED+0x186>
    1232:	28ff      	cmp	r0, #255	; 0xff
    1234:	d02f      	beq.n	1296 <PREEMPTION_DISABLED+0x296>
    1236:	2480      	movs	r4, #128	; 0x80
    1238:	04e4      	lsls	r4, r4, #19
    123a:	4249      	negs	r1, r1
    123c:	4323      	orrs	r3, r4
    123e:	e7dd      	b.n	11fc <PREEMPTION_DISABLED+0x1fc>
    1240:	24ff      	movs	r4, #255	; 0xff
    1242:	2d00      	cmp	r5, #0
    1244:	d100      	bne.n	1248 <PREEMPTION_DISABLED+0x248>
    1246:	e6eb      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    1248:	2280      	movs	r2, #128	; 0x80
    124a:	08db      	lsrs	r3, r3, #3
    124c:	03d2      	lsls	r2, r2, #15
    124e:	4213      	tst	r3, r2
    1250:	d004      	beq.n	125c <PREEMPTION_DISABLED+0x25c>
    1252:	08ed      	lsrs	r5, r5, #3
    1254:	4215      	tst	r5, r2
    1256:	d101      	bne.n	125c <PREEMPTION_DISABLED+0x25c>
    1258:	1c2b      	adds	r3, r5, #0
    125a:	1c0e      	adds	r6, r1, #0
    125c:	00db      	lsls	r3, r3, #3
    125e:	24ff      	movs	r4, #255	; 0xff
    1260:	e6de      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    1262:	2d00      	cmp	r5, #0
    1264:	d100      	bne.n	1268 <PREEMPTION_DISABLED+0x268>
    1266:	e6db      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    1268:	1b5a      	subs	r2, r3, r5
    126a:	0150      	lsls	r0, r2, #5
    126c:	d400      	bmi.n	1270 <PREEMPTION_DISABLED+0x270>
    126e:	e71c      	b.n	10aa <PREEMPTION_DISABLED+0xaa>
    1270:	1aeb      	subs	r3, r5, r3
    1272:	1c0e      	adds	r6, r1, #0
    1274:	e6d4      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    1276:	2b00      	cmp	r3, #0
    1278:	d00d      	beq.n	1296 <PREEMPTION_DISABLED+0x296>
    127a:	24ff      	movs	r4, #255	; 0xff
    127c:	2d00      	cmp	r5, #0
    127e:	d100      	bne.n	1282 <PREEMPTION_DISABLED+0x282>
    1280:	e6ce      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    1282:	2280      	movs	r2, #128	; 0x80
    1284:	08db      	lsrs	r3, r3, #3
    1286:	03d2      	lsls	r2, r2, #15
    1288:	4213      	tst	r3, r2
    128a:	d0e7      	beq.n	125c <PREEMPTION_DISABLED+0x25c>
    128c:	08ed      	lsrs	r5, r5, #3
    128e:	4215      	tst	r5, r2
    1290:	d1e4      	bne.n	125c <PREEMPTION_DISABLED+0x25c>
    1292:	1c2b      	adds	r3, r5, #0
    1294:	e7e2      	b.n	125c <PREEMPTION_DISABLED+0x25c>
    1296:	1c2b      	adds	r3, r5, #0
    1298:	24ff      	movs	r4, #255	; 0xff
    129a:	e6c1      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    129c:	1c2b      	adds	r3, r5, #0
    129e:	1c04      	adds	r4, r0, #0
    12a0:	e6be      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    12a2:	2380      	movs	r3, #128	; 0x80
    12a4:	2200      	movs	r2, #0
    12a6:	049b      	lsls	r3, r3, #18
    12a8:	24ff      	movs	r4, #255	; 0xff
    12aa:	e702      	b.n	10b2 <PREEMPTION_DISABLED+0xb2>
    12ac:	1c23      	adds	r3, r4, #0
    12ae:	2200      	movs	r2, #0
    12b0:	e6ff      	b.n	10b2 <PREEMPTION_DISABLED+0xb2>
    12b2:	1c1c      	adds	r4, r3, #0
    12b4:	2720      	movs	r7, #32
    12b6:	40cc      	lsrs	r4, r1
    12b8:	1a79      	subs	r1, r7, r1
    12ba:	408b      	lsls	r3, r1
    12bc:	1e59      	subs	r1, r3, #1
    12be:	418b      	sbcs	r3, r1
    12c0:	4323      	orrs	r3, r4
    12c2:	e79e      	b.n	1202 <PREEMPTION_DISABLED+0x202>
    12c4:	1c2b      	adds	r3, r5, #0
    12c6:	e6ab      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    12c8:	2501      	movs	r5, #1
    12ca:	e712      	b.n	10f2 <PREEMPTION_DISABLED+0xf2>
    12cc:	2501      	movs	r5, #1
    12ce:	e6d3      	b.n	1078 <PREEMPTION_DISABLED+0x78>
    12d0:	fbffffff 	.word	0xfbffffff

000012d4 <__aeabi_f2iz>:
__aeabi_f2iz():
    12d4:	0243      	lsls	r3, r0, #9
    12d6:	0a59      	lsrs	r1, r3, #9
    12d8:	0043      	lsls	r3, r0, #1
    12da:	0fc2      	lsrs	r2, r0, #31
    12dc:	0e1b      	lsrs	r3, r3, #24
    12de:	2000      	movs	r0, #0
    12e0:	2b7e      	cmp	r3, #126	; 0x7e
    12e2:	dd0d      	ble.n	1300 <__aeabi_f2iz+0x2c>
    12e4:	2b9d      	cmp	r3, #157	; 0x9d
    12e6:	dc0c      	bgt.n	1302 <__aeabi_f2iz+0x2e>
    12e8:	2080      	movs	r0, #128	; 0x80
    12ea:	0400      	lsls	r0, r0, #16
    12ec:	4301      	orrs	r1, r0
    12ee:	2b95      	cmp	r3, #149	; 0x95
    12f0:	dc0a      	bgt.n	1308 <__aeabi_f2iz+0x34>
    12f2:	2096      	movs	r0, #150	; 0x96
    12f4:	1ac3      	subs	r3, r0, r3
    12f6:	40d9      	lsrs	r1, r3
    12f8:	4248      	negs	r0, r1
    12fa:	2a00      	cmp	r2, #0
    12fc:	d100      	bne.n	1300 <__aeabi_f2iz+0x2c>
    12fe:	1c08      	adds	r0, r1, #0
    1300:	4770      	bx	lr
    1302:	4b03      	ldr	r3, [pc, #12]	; (1310 <__aeabi_f2iz+0x3c>)
    1304:	18d0      	adds	r0, r2, r3
    1306:	e7fb      	b.n	1300 <__aeabi_f2iz+0x2c>
    1308:	3b96      	subs	r3, #150	; 0x96
    130a:	4099      	lsls	r1, r3
    130c:	e7f4      	b.n	12f8 <__aeabi_f2iz+0x24>
    130e:	46c0      	nop			; (mov r8, r8)
    1310:	7fffffff 	.word	0x7fffffff

00001314 <__aeabi_i2f>:
__aeabi_i2f():
    1314:	b570      	push	{r4, r5, r6, lr}
    1316:	1e04      	subs	r4, r0, #0
    1318:	d03c      	beq.n	1394 <__aeabi_i2f+0x80>
    131a:	0fc6      	lsrs	r6, r0, #31
    131c:	d000      	beq.n	1320 <__aeabi_i2f+0xc>
    131e:	4244      	negs	r4, r0
    1320:	1c20      	adds	r0, r4, #0
    1322:	f001 fbf1 	bl	2b08 <__clzsi2>
    1326:	239e      	movs	r3, #158	; 0x9e
    1328:	1c25      	adds	r5, r4, #0
    132a:	1a1b      	subs	r3, r3, r0
    132c:	2b96      	cmp	r3, #150	; 0x96
    132e:	dc0c      	bgt.n	134a <__aeabi_i2f+0x36>
    1330:	3808      	subs	r0, #8
    1332:	4084      	lsls	r4, r0
    1334:	0264      	lsls	r4, r4, #9
    1336:	0a64      	lsrs	r4, r4, #9
    1338:	b2db      	uxtb	r3, r3
    133a:	1c32      	adds	r2, r6, #0
    133c:	0264      	lsls	r4, r4, #9
    133e:	05db      	lsls	r3, r3, #23
    1340:	0a60      	lsrs	r0, r4, #9
    1342:	07d2      	lsls	r2, r2, #31
    1344:	4318      	orrs	r0, r3
    1346:	4310      	orrs	r0, r2
    1348:	bd70      	pop	{r4, r5, r6, pc}
    134a:	2b99      	cmp	r3, #153	; 0x99
    134c:	dd0a      	ble.n	1364 <__aeabi_i2f+0x50>
    134e:	2205      	movs	r2, #5
    1350:	1a12      	subs	r2, r2, r0
    1352:	1c21      	adds	r1, r4, #0
    1354:	40d1      	lsrs	r1, r2
    1356:	1c0a      	adds	r2, r1, #0
    1358:	1c01      	adds	r1, r0, #0
    135a:	311b      	adds	r1, #27
    135c:	408d      	lsls	r5, r1
    135e:	1e69      	subs	r1, r5, #1
    1360:	418d      	sbcs	r5, r1
    1362:	4315      	orrs	r5, r2
    1364:	2805      	cmp	r0, #5
    1366:	dd01      	ble.n	136c <__aeabi_i2f+0x58>
    1368:	1f42      	subs	r2, r0, #5
    136a:	4095      	lsls	r5, r2
    136c:	4c16      	ldr	r4, [pc, #88]	; (13c8 <__aeabi_i2f+0xb4>)
    136e:	402c      	ands	r4, r5
    1370:	076a      	lsls	r2, r5, #29
    1372:	d004      	beq.n	137e <__aeabi_i2f+0x6a>
    1374:	220f      	movs	r2, #15
    1376:	4015      	ands	r5, r2
    1378:	2d04      	cmp	r5, #4
    137a:	d000      	beq.n	137e <__aeabi_i2f+0x6a>
    137c:	3404      	adds	r4, #4
    137e:	0161      	lsls	r1, r4, #5
    1380:	d50c      	bpl.n	139c <__aeabi_i2f+0x88>
    1382:	239f      	movs	r3, #159	; 0x9f
    1384:	1a18      	subs	r0, r3, r0
    1386:	28ff      	cmp	r0, #255	; 0xff
    1388:	d01a      	beq.n	13c0 <__aeabi_i2f+0xac>
    138a:	01a4      	lsls	r4, r4, #6
    138c:	0a64      	lsrs	r4, r4, #9
    138e:	b2c3      	uxtb	r3, r0
    1390:	1c32      	adds	r2, r6, #0
    1392:	e7d3      	b.n	133c <__aeabi_i2f+0x28>
    1394:	2200      	movs	r2, #0
    1396:	2300      	movs	r3, #0
    1398:	2400      	movs	r4, #0
    139a:	e7cf      	b.n	133c <__aeabi_i2f+0x28>
    139c:	08e4      	lsrs	r4, r4, #3
    139e:	2bff      	cmp	r3, #255	; 0xff
    13a0:	d004      	beq.n	13ac <__aeabi_i2f+0x98>
    13a2:	0264      	lsls	r4, r4, #9
    13a4:	0a64      	lsrs	r4, r4, #9
    13a6:	b2db      	uxtb	r3, r3
    13a8:	1c32      	adds	r2, r6, #0
    13aa:	e7c7      	b.n	133c <__aeabi_i2f+0x28>
    13ac:	2c00      	cmp	r4, #0
    13ae:	d004      	beq.n	13ba <__aeabi_i2f+0xa6>
    13b0:	2080      	movs	r0, #128	; 0x80
    13b2:	03c0      	lsls	r0, r0, #15
    13b4:	4304      	orrs	r4, r0
    13b6:	0264      	lsls	r4, r4, #9
    13b8:	0a64      	lsrs	r4, r4, #9
    13ba:	1c32      	adds	r2, r6, #0
    13bc:	23ff      	movs	r3, #255	; 0xff
    13be:	e7bd      	b.n	133c <__aeabi_i2f+0x28>
    13c0:	1c32      	adds	r2, r6, #0
    13c2:	23ff      	movs	r3, #255	; 0xff
    13c4:	2400      	movs	r4, #0
    13c6:	e7b9      	b.n	133c <__aeabi_i2f+0x28>
    13c8:	fbffffff 	.word	0xfbffffff

000013cc <__aeabi_dadd>:
__aeabi_dadd():
    13cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13ce:	465f      	mov	r7, fp
    13d0:	4656      	mov	r6, sl
    13d2:	4644      	mov	r4, r8
    13d4:	464d      	mov	r5, r9
    13d6:	b4f0      	push	{r4, r5, r6, r7}
    13d8:	030c      	lsls	r4, r1, #12
    13da:	004d      	lsls	r5, r1, #1
    13dc:	0fce      	lsrs	r6, r1, #31
    13de:	0a61      	lsrs	r1, r4, #9
    13e0:	0f44      	lsrs	r4, r0, #29
    13e2:	4321      	orrs	r1, r4
    13e4:	00c4      	lsls	r4, r0, #3
    13e6:	0318      	lsls	r0, r3, #12
    13e8:	4680      	mov	r8, r0
    13ea:	0058      	lsls	r0, r3, #1
    13ec:	0d40      	lsrs	r0, r0, #21
    13ee:	4682      	mov	sl, r0
    13f0:	0fd8      	lsrs	r0, r3, #31
    13f2:	4684      	mov	ip, r0
    13f4:	4640      	mov	r0, r8
    13f6:	0a40      	lsrs	r0, r0, #9
    13f8:	0f53      	lsrs	r3, r2, #29
    13fa:	4303      	orrs	r3, r0
    13fc:	00d0      	lsls	r0, r2, #3
    13fe:	0d6d      	lsrs	r5, r5, #21
    1400:	1c37      	adds	r7, r6, #0
    1402:	4683      	mov	fp, r0
    1404:	4652      	mov	r2, sl
    1406:	4566      	cmp	r6, ip
    1408:	d100      	bne.n	140c <__aeabi_dadd+0x40>
    140a:	e0a4      	b.n	1556 <__aeabi_dadd+0x18a>
    140c:	1aaf      	subs	r7, r5, r2
    140e:	2f00      	cmp	r7, #0
    1410:	dc00      	bgt.n	1414 <__aeabi_dadd+0x48>
    1412:	e109      	b.n	1628 <__aeabi_dadd+0x25c>
    1414:	2a00      	cmp	r2, #0
    1416:	d13b      	bne.n	1490 <__aeabi_dadd+0xc4>
    1418:	4318      	orrs	r0, r3
    141a:	d000      	beq.n	141e <__aeabi_dadd+0x52>
    141c:	e0ea      	b.n	15f4 <__aeabi_dadd+0x228>
    141e:	0763      	lsls	r3, r4, #29
    1420:	d100      	bne.n	1424 <__aeabi_dadd+0x58>
    1422:	e087      	b.n	1534 <__aeabi_dadd+0x168>
    1424:	230f      	movs	r3, #15
    1426:	4023      	ands	r3, r4
    1428:	2b04      	cmp	r3, #4
    142a:	d100      	bne.n	142e <__aeabi_dadd+0x62>
    142c:	e082      	b.n	1534 <__aeabi_dadd+0x168>
    142e:	1d22      	adds	r2, r4, #4
    1430:	42a2      	cmp	r2, r4
    1432:	41a4      	sbcs	r4, r4
    1434:	4264      	negs	r4, r4
    1436:	2380      	movs	r3, #128	; 0x80
    1438:	1909      	adds	r1, r1, r4
    143a:	041b      	lsls	r3, r3, #16
    143c:	400b      	ands	r3, r1
    143e:	1c37      	adds	r7, r6, #0
    1440:	1c14      	adds	r4, r2, #0
    1442:	2b00      	cmp	r3, #0
    1444:	d100      	bne.n	1448 <__aeabi_dadd+0x7c>
    1446:	e07c      	b.n	1542 <__aeabi_dadd+0x176>
    1448:	4bce      	ldr	r3, [pc, #824]	; (1784 <__aeabi_dadd+0x3b8>)
    144a:	3501      	adds	r5, #1
    144c:	429d      	cmp	r5, r3
    144e:	d100      	bne.n	1452 <__aeabi_dadd+0x86>
    1450:	e105      	b.n	165e <__aeabi_dadd+0x292>
    1452:	4bcd      	ldr	r3, [pc, #820]	; (1788 <__aeabi_dadd+0x3bc>)
    1454:	08e4      	lsrs	r4, r4, #3
    1456:	4019      	ands	r1, r3
    1458:	0748      	lsls	r0, r1, #29
    145a:	0249      	lsls	r1, r1, #9
    145c:	4304      	orrs	r4, r0
    145e:	0b0b      	lsrs	r3, r1, #12
    1460:	2000      	movs	r0, #0
    1462:	2100      	movs	r1, #0
    1464:	031b      	lsls	r3, r3, #12
    1466:	0b1a      	lsrs	r2, r3, #12
    1468:	0d0b      	lsrs	r3, r1, #20
    146a:	056d      	lsls	r5, r5, #21
    146c:	051b      	lsls	r3, r3, #20
    146e:	4313      	orrs	r3, r2
    1470:	086a      	lsrs	r2, r5, #1
    1472:	4dc6      	ldr	r5, [pc, #792]	; (178c <__aeabi_dadd+0x3c0>)
    1474:	07ff      	lsls	r7, r7, #31
    1476:	401d      	ands	r5, r3
    1478:	4315      	orrs	r5, r2
    147a:	006d      	lsls	r5, r5, #1
    147c:	086d      	lsrs	r5, r5, #1
    147e:	1c29      	adds	r1, r5, #0
    1480:	4339      	orrs	r1, r7
    1482:	1c20      	adds	r0, r4, #0
    1484:	bc3c      	pop	{r2, r3, r4, r5}
    1486:	4690      	mov	r8, r2
    1488:	4699      	mov	r9, r3
    148a:	46a2      	mov	sl, r4
    148c:	46ab      	mov	fp, r5
    148e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1490:	48bc      	ldr	r0, [pc, #752]	; (1784 <__aeabi_dadd+0x3b8>)
    1492:	4285      	cmp	r5, r0
    1494:	d0c3      	beq.n	141e <__aeabi_dadd+0x52>
    1496:	2080      	movs	r0, #128	; 0x80
    1498:	0400      	lsls	r0, r0, #16
    149a:	4303      	orrs	r3, r0
    149c:	2f38      	cmp	r7, #56	; 0x38
    149e:	dd00      	ble.n	14a2 <__aeabi_dadd+0xd6>
    14a0:	e0f0      	b.n	1684 <__aeabi_dadd+0x2b8>
    14a2:	2f1f      	cmp	r7, #31
    14a4:	dd00      	ble.n	14a8 <__aeabi_dadd+0xdc>
    14a6:	e124      	b.n	16f2 <__aeabi_dadd+0x326>
    14a8:	2020      	movs	r0, #32
    14aa:	1bc0      	subs	r0, r0, r7
    14ac:	1c1a      	adds	r2, r3, #0
    14ae:	4681      	mov	r9, r0
    14b0:	4082      	lsls	r2, r0
    14b2:	4658      	mov	r0, fp
    14b4:	40f8      	lsrs	r0, r7
    14b6:	4302      	orrs	r2, r0
    14b8:	4694      	mov	ip, r2
    14ba:	4658      	mov	r0, fp
    14bc:	464a      	mov	r2, r9
    14be:	4090      	lsls	r0, r2
    14c0:	1e42      	subs	r2, r0, #1
    14c2:	4190      	sbcs	r0, r2
    14c4:	40fb      	lsrs	r3, r7
    14c6:	4662      	mov	r2, ip
    14c8:	4302      	orrs	r2, r0
    14ca:	1c1f      	adds	r7, r3, #0
    14cc:	1aa2      	subs	r2, r4, r2
    14ce:	4294      	cmp	r4, r2
    14d0:	41a4      	sbcs	r4, r4
    14d2:	4264      	negs	r4, r4
    14d4:	1bc9      	subs	r1, r1, r7
    14d6:	1b09      	subs	r1, r1, r4
    14d8:	1c14      	adds	r4, r2, #0
    14da:	020b      	lsls	r3, r1, #8
    14dc:	d59f      	bpl.n	141e <__aeabi_dadd+0x52>
    14de:	0249      	lsls	r1, r1, #9
    14e0:	0a4f      	lsrs	r7, r1, #9
    14e2:	2f00      	cmp	r7, #0
    14e4:	d100      	bne.n	14e8 <__aeabi_dadd+0x11c>
    14e6:	e0c8      	b.n	167a <__aeabi_dadd+0x2ae>
    14e8:	1c38      	adds	r0, r7, #0
    14ea:	f001 fb0d 	bl	2b08 <__clzsi2>
    14ee:	1c02      	adds	r2, r0, #0
    14f0:	3a08      	subs	r2, #8
    14f2:	2a1f      	cmp	r2, #31
    14f4:	dd00      	ble.n	14f8 <__aeabi_dadd+0x12c>
    14f6:	e0b5      	b.n	1664 <__aeabi_dadd+0x298>
    14f8:	2128      	movs	r1, #40	; 0x28
    14fa:	1a09      	subs	r1, r1, r0
    14fc:	1c20      	adds	r0, r4, #0
    14fe:	4097      	lsls	r7, r2
    1500:	40c8      	lsrs	r0, r1
    1502:	4307      	orrs	r7, r0
    1504:	4094      	lsls	r4, r2
    1506:	4295      	cmp	r5, r2
    1508:	dd00      	ble.n	150c <__aeabi_dadd+0x140>
    150a:	e0b2      	b.n	1672 <__aeabi_dadd+0x2a6>
    150c:	1b55      	subs	r5, r2, r5
    150e:	1c69      	adds	r1, r5, #1
    1510:	291f      	cmp	r1, #31
    1512:	dd00      	ble.n	1516 <__aeabi_dadd+0x14a>
    1514:	e0dc      	b.n	16d0 <__aeabi_dadd+0x304>
    1516:	221f      	movs	r2, #31
    1518:	1b55      	subs	r5, r2, r5
    151a:	1c3b      	adds	r3, r7, #0
    151c:	1c22      	adds	r2, r4, #0
    151e:	40ab      	lsls	r3, r5
    1520:	40ca      	lsrs	r2, r1
    1522:	40ac      	lsls	r4, r5
    1524:	1e65      	subs	r5, r4, #1
    1526:	41ac      	sbcs	r4, r5
    1528:	4313      	orrs	r3, r2
    152a:	40cf      	lsrs	r7, r1
    152c:	431c      	orrs	r4, r3
    152e:	1c39      	adds	r1, r7, #0
    1530:	2500      	movs	r5, #0
    1532:	e774      	b.n	141e <__aeabi_dadd+0x52>
    1534:	2380      	movs	r3, #128	; 0x80
    1536:	041b      	lsls	r3, r3, #16
    1538:	400b      	ands	r3, r1
    153a:	1c37      	adds	r7, r6, #0
    153c:	2b00      	cmp	r3, #0
    153e:	d000      	beq.n	1542 <__aeabi_dadd+0x176>
    1540:	e782      	b.n	1448 <__aeabi_dadd+0x7c>
    1542:	4b90      	ldr	r3, [pc, #576]	; (1784 <__aeabi_dadd+0x3b8>)
    1544:	0748      	lsls	r0, r1, #29
    1546:	08e4      	lsrs	r4, r4, #3
    1548:	4304      	orrs	r4, r0
    154a:	08c9      	lsrs	r1, r1, #3
    154c:	429d      	cmp	r5, r3
    154e:	d048      	beq.n	15e2 <__aeabi_dadd+0x216>
    1550:	0309      	lsls	r1, r1, #12
    1552:	0b0b      	lsrs	r3, r1, #12
    1554:	e784      	b.n	1460 <__aeabi_dadd+0x94>
    1556:	1aaa      	subs	r2, r5, r2
    1558:	4694      	mov	ip, r2
    155a:	2a00      	cmp	r2, #0
    155c:	dc00      	bgt.n	1560 <__aeabi_dadd+0x194>
    155e:	e098      	b.n	1692 <__aeabi_dadd+0x2c6>
    1560:	4650      	mov	r0, sl
    1562:	2800      	cmp	r0, #0
    1564:	d052      	beq.n	160c <__aeabi_dadd+0x240>
    1566:	4887      	ldr	r0, [pc, #540]	; (1784 <__aeabi_dadd+0x3b8>)
    1568:	4285      	cmp	r5, r0
    156a:	d100      	bne.n	156e <__aeabi_dadd+0x1a2>
    156c:	e757      	b.n	141e <__aeabi_dadd+0x52>
    156e:	2080      	movs	r0, #128	; 0x80
    1570:	0400      	lsls	r0, r0, #16
    1572:	4303      	orrs	r3, r0
    1574:	4662      	mov	r2, ip
    1576:	2a38      	cmp	r2, #56	; 0x38
    1578:	dd00      	ble.n	157c <__aeabi_dadd+0x1b0>
    157a:	e0fc      	b.n	1776 <__aeabi_dadd+0x3aa>
    157c:	2a1f      	cmp	r2, #31
    157e:	dd00      	ble.n	1582 <__aeabi_dadd+0x1b6>
    1580:	e14a      	b.n	1818 <__aeabi_dadd+0x44c>
    1582:	2220      	movs	r2, #32
    1584:	4660      	mov	r0, ip
    1586:	1a10      	subs	r0, r2, r0
    1588:	1c1a      	adds	r2, r3, #0
    158a:	4082      	lsls	r2, r0
    158c:	4682      	mov	sl, r0
    158e:	4691      	mov	r9, r2
    1590:	4658      	mov	r0, fp
    1592:	4662      	mov	r2, ip
    1594:	40d0      	lsrs	r0, r2
    1596:	464a      	mov	r2, r9
    1598:	4302      	orrs	r2, r0
    159a:	4690      	mov	r8, r2
    159c:	4658      	mov	r0, fp
    159e:	4652      	mov	r2, sl
    15a0:	4090      	lsls	r0, r2
    15a2:	1e42      	subs	r2, r0, #1
    15a4:	4190      	sbcs	r0, r2
    15a6:	4642      	mov	r2, r8
    15a8:	4302      	orrs	r2, r0
    15aa:	4660      	mov	r0, ip
    15ac:	40c3      	lsrs	r3, r0
    15ae:	1912      	adds	r2, r2, r4
    15b0:	42a2      	cmp	r2, r4
    15b2:	41a4      	sbcs	r4, r4
    15b4:	4264      	negs	r4, r4
    15b6:	1859      	adds	r1, r3, r1
    15b8:	1909      	adds	r1, r1, r4
    15ba:	1c14      	adds	r4, r2, #0
    15bc:	0208      	lsls	r0, r1, #8
    15be:	d400      	bmi.n	15c2 <__aeabi_dadd+0x1f6>
    15c0:	e72d      	b.n	141e <__aeabi_dadd+0x52>
    15c2:	4b70      	ldr	r3, [pc, #448]	; (1784 <__aeabi_dadd+0x3b8>)
    15c4:	3501      	adds	r5, #1
    15c6:	429d      	cmp	r5, r3
    15c8:	d100      	bne.n	15cc <__aeabi_dadd+0x200>
    15ca:	e122      	b.n	1812 <__aeabi_dadd+0x446>
    15cc:	4b6e      	ldr	r3, [pc, #440]	; (1788 <__aeabi_dadd+0x3bc>)
    15ce:	0860      	lsrs	r0, r4, #1
    15d0:	4019      	ands	r1, r3
    15d2:	2301      	movs	r3, #1
    15d4:	4023      	ands	r3, r4
    15d6:	1c1c      	adds	r4, r3, #0
    15d8:	4304      	orrs	r4, r0
    15da:	07cb      	lsls	r3, r1, #31
    15dc:	431c      	orrs	r4, r3
    15de:	0849      	lsrs	r1, r1, #1
    15e0:	e71d      	b.n	141e <__aeabi_dadd+0x52>
    15e2:	1c23      	adds	r3, r4, #0
    15e4:	430b      	orrs	r3, r1
    15e6:	d03a      	beq.n	165e <__aeabi_dadd+0x292>
    15e8:	2380      	movs	r3, #128	; 0x80
    15ea:	031b      	lsls	r3, r3, #12
    15ec:	430b      	orrs	r3, r1
    15ee:	031b      	lsls	r3, r3, #12
    15f0:	0b1b      	lsrs	r3, r3, #12
    15f2:	e735      	b.n	1460 <__aeabi_dadd+0x94>
    15f4:	3f01      	subs	r7, #1
    15f6:	2f00      	cmp	r7, #0
    15f8:	d165      	bne.n	16c6 <__aeabi_dadd+0x2fa>
    15fa:	4658      	mov	r0, fp
    15fc:	1a22      	subs	r2, r4, r0
    15fe:	4294      	cmp	r4, r2
    1600:	41a4      	sbcs	r4, r4
    1602:	4264      	negs	r4, r4
    1604:	1ac9      	subs	r1, r1, r3
    1606:	1b09      	subs	r1, r1, r4
    1608:	1c14      	adds	r4, r2, #0
    160a:	e766      	b.n	14da <__aeabi_dadd+0x10e>
    160c:	4658      	mov	r0, fp
    160e:	4318      	orrs	r0, r3
    1610:	d100      	bne.n	1614 <__aeabi_dadd+0x248>
    1612:	e704      	b.n	141e <__aeabi_dadd+0x52>
    1614:	2201      	movs	r2, #1
    1616:	4252      	negs	r2, r2
    1618:	4494      	add	ip, r2
    161a:	4660      	mov	r0, ip
    161c:	2800      	cmp	r0, #0
    161e:	d000      	beq.n	1622 <__aeabi_dadd+0x256>
    1620:	e0c5      	b.n	17ae <__aeabi_dadd+0x3e2>
    1622:	4658      	mov	r0, fp
    1624:	1902      	adds	r2, r0, r4
    1626:	e7c3      	b.n	15b0 <__aeabi_dadd+0x1e4>
    1628:	2f00      	cmp	r7, #0
    162a:	d173      	bne.n	1714 <__aeabi_dadd+0x348>
    162c:	1c68      	adds	r0, r5, #1
    162e:	0540      	lsls	r0, r0, #21
    1630:	0d40      	lsrs	r0, r0, #21
    1632:	2801      	cmp	r0, #1
    1634:	dc00      	bgt.n	1638 <__aeabi_dadd+0x26c>
    1636:	e0de      	b.n	17f6 <__aeabi_dadd+0x42a>
    1638:	465a      	mov	r2, fp
    163a:	1aa2      	subs	r2, r4, r2
    163c:	4294      	cmp	r4, r2
    163e:	41bf      	sbcs	r7, r7
    1640:	1ac8      	subs	r0, r1, r3
    1642:	427f      	negs	r7, r7
    1644:	1bc7      	subs	r7, r0, r7
    1646:	0238      	lsls	r0, r7, #8
    1648:	d400      	bmi.n	164c <__aeabi_dadd+0x280>
    164a:	e089      	b.n	1760 <__aeabi_dadd+0x394>
    164c:	465a      	mov	r2, fp
    164e:	1b14      	subs	r4, r2, r4
    1650:	45a3      	cmp	fp, r4
    1652:	4192      	sbcs	r2, r2
    1654:	1a59      	subs	r1, r3, r1
    1656:	4252      	negs	r2, r2
    1658:	1a8f      	subs	r7, r1, r2
    165a:	4666      	mov	r6, ip
    165c:	e741      	b.n	14e2 <__aeabi_dadd+0x116>
    165e:	2300      	movs	r3, #0
    1660:	2400      	movs	r4, #0
    1662:	e6fd      	b.n	1460 <__aeabi_dadd+0x94>
    1664:	1c27      	adds	r7, r4, #0
    1666:	3828      	subs	r0, #40	; 0x28
    1668:	4087      	lsls	r7, r0
    166a:	2400      	movs	r4, #0
    166c:	4295      	cmp	r5, r2
    166e:	dc00      	bgt.n	1672 <__aeabi_dadd+0x2a6>
    1670:	e74c      	b.n	150c <__aeabi_dadd+0x140>
    1672:	4945      	ldr	r1, [pc, #276]	; (1788 <__aeabi_dadd+0x3bc>)
    1674:	1aad      	subs	r5, r5, r2
    1676:	4039      	ands	r1, r7
    1678:	e6d1      	b.n	141e <__aeabi_dadd+0x52>
    167a:	1c20      	adds	r0, r4, #0
    167c:	f001 fa44 	bl	2b08 <__clzsi2>
    1680:	3020      	adds	r0, #32
    1682:	e734      	b.n	14ee <__aeabi_dadd+0x122>
    1684:	465a      	mov	r2, fp
    1686:	431a      	orrs	r2, r3
    1688:	1e53      	subs	r3, r2, #1
    168a:	419a      	sbcs	r2, r3
    168c:	b2d2      	uxtb	r2, r2
    168e:	2700      	movs	r7, #0
    1690:	e71c      	b.n	14cc <__aeabi_dadd+0x100>
    1692:	2a00      	cmp	r2, #0
    1694:	d000      	beq.n	1698 <__aeabi_dadd+0x2cc>
    1696:	e0dc      	b.n	1852 <__aeabi_dadd+0x486>
    1698:	1c68      	adds	r0, r5, #1
    169a:	0542      	lsls	r2, r0, #21
    169c:	0d52      	lsrs	r2, r2, #21
    169e:	2a01      	cmp	r2, #1
    16a0:	dc00      	bgt.n	16a4 <__aeabi_dadd+0x2d8>
    16a2:	e08d      	b.n	17c0 <__aeabi_dadd+0x3f4>
    16a4:	4d37      	ldr	r5, [pc, #220]	; (1784 <__aeabi_dadd+0x3b8>)
    16a6:	42a8      	cmp	r0, r5
    16a8:	d100      	bne.n	16ac <__aeabi_dadd+0x2e0>
    16aa:	e0f3      	b.n	1894 <__aeabi_dadd+0x4c8>
    16ac:	465d      	mov	r5, fp
    16ae:	192a      	adds	r2, r5, r4
    16b0:	42a2      	cmp	r2, r4
    16b2:	41a4      	sbcs	r4, r4
    16b4:	4264      	negs	r4, r4
    16b6:	1859      	adds	r1, r3, r1
    16b8:	1909      	adds	r1, r1, r4
    16ba:	07cc      	lsls	r4, r1, #31
    16bc:	0852      	lsrs	r2, r2, #1
    16be:	4314      	orrs	r4, r2
    16c0:	0849      	lsrs	r1, r1, #1
    16c2:	1c05      	adds	r5, r0, #0
    16c4:	e6ab      	b.n	141e <__aeabi_dadd+0x52>
    16c6:	482f      	ldr	r0, [pc, #188]	; (1784 <__aeabi_dadd+0x3b8>)
    16c8:	4285      	cmp	r5, r0
    16ca:	d000      	beq.n	16ce <__aeabi_dadd+0x302>
    16cc:	e6e6      	b.n	149c <__aeabi_dadd+0xd0>
    16ce:	e6a6      	b.n	141e <__aeabi_dadd+0x52>
    16d0:	1c2b      	adds	r3, r5, #0
    16d2:	3b1f      	subs	r3, #31
    16d4:	1c3a      	adds	r2, r7, #0
    16d6:	40da      	lsrs	r2, r3
    16d8:	1c13      	adds	r3, r2, #0
    16da:	2920      	cmp	r1, #32
    16dc:	d06c      	beq.n	17b8 <__aeabi_dadd+0x3ec>
    16de:	223f      	movs	r2, #63	; 0x3f
    16e0:	1b55      	subs	r5, r2, r5
    16e2:	40af      	lsls	r7, r5
    16e4:	433c      	orrs	r4, r7
    16e6:	1e60      	subs	r0, r4, #1
    16e8:	4184      	sbcs	r4, r0
    16ea:	431c      	orrs	r4, r3
    16ec:	2100      	movs	r1, #0
    16ee:	2500      	movs	r5, #0
    16f0:	e695      	b.n	141e <__aeabi_dadd+0x52>
    16f2:	1c38      	adds	r0, r7, #0
    16f4:	3820      	subs	r0, #32
    16f6:	1c1a      	adds	r2, r3, #0
    16f8:	40c2      	lsrs	r2, r0
    16fa:	1c10      	adds	r0, r2, #0
    16fc:	2f20      	cmp	r7, #32
    16fe:	d05d      	beq.n	17bc <__aeabi_dadd+0x3f0>
    1700:	2240      	movs	r2, #64	; 0x40
    1702:	1bd7      	subs	r7, r2, r7
    1704:	40bb      	lsls	r3, r7
    1706:	465a      	mov	r2, fp
    1708:	431a      	orrs	r2, r3
    170a:	1e53      	subs	r3, r2, #1
    170c:	419a      	sbcs	r2, r3
    170e:	4302      	orrs	r2, r0
    1710:	2700      	movs	r7, #0
    1712:	e6db      	b.n	14cc <__aeabi_dadd+0x100>
    1714:	2d00      	cmp	r5, #0
    1716:	d03b      	beq.n	1790 <__aeabi_dadd+0x3c4>
    1718:	4d1a      	ldr	r5, [pc, #104]	; (1784 <__aeabi_dadd+0x3b8>)
    171a:	45aa      	cmp	sl, r5
    171c:	d100      	bne.n	1720 <__aeabi_dadd+0x354>
    171e:	e093      	b.n	1848 <__aeabi_dadd+0x47c>
    1720:	2580      	movs	r5, #128	; 0x80
    1722:	042d      	lsls	r5, r5, #16
    1724:	427f      	negs	r7, r7
    1726:	4329      	orrs	r1, r5
    1728:	2f38      	cmp	r7, #56	; 0x38
    172a:	dd00      	ble.n	172e <__aeabi_dadd+0x362>
    172c:	e0ac      	b.n	1888 <__aeabi_dadd+0x4bc>
    172e:	2f1f      	cmp	r7, #31
    1730:	dd00      	ble.n	1734 <__aeabi_dadd+0x368>
    1732:	e129      	b.n	1988 <__aeabi_dadd+0x5bc>
    1734:	2520      	movs	r5, #32
    1736:	1bed      	subs	r5, r5, r7
    1738:	1c08      	adds	r0, r1, #0
    173a:	1c26      	adds	r6, r4, #0
    173c:	40a8      	lsls	r0, r5
    173e:	40fe      	lsrs	r6, r7
    1740:	40ac      	lsls	r4, r5
    1742:	4306      	orrs	r6, r0
    1744:	1e65      	subs	r5, r4, #1
    1746:	41ac      	sbcs	r4, r5
    1748:	4334      	orrs	r4, r6
    174a:	40f9      	lsrs	r1, r7
    174c:	465d      	mov	r5, fp
    174e:	1b2c      	subs	r4, r5, r4
    1750:	45a3      	cmp	fp, r4
    1752:	4192      	sbcs	r2, r2
    1754:	1a5b      	subs	r3, r3, r1
    1756:	4252      	negs	r2, r2
    1758:	1a99      	subs	r1, r3, r2
    175a:	4655      	mov	r5, sl
    175c:	4666      	mov	r6, ip
    175e:	e6bc      	b.n	14da <__aeabi_dadd+0x10e>
    1760:	1c13      	adds	r3, r2, #0
    1762:	433b      	orrs	r3, r7
    1764:	1c14      	adds	r4, r2, #0
    1766:	2b00      	cmp	r3, #0
    1768:	d000      	beq.n	176c <__aeabi_dadd+0x3a0>
    176a:	e6ba      	b.n	14e2 <__aeabi_dadd+0x116>
    176c:	2700      	movs	r7, #0
    176e:	2100      	movs	r1, #0
    1770:	2500      	movs	r5, #0
    1772:	2400      	movs	r4, #0
    1774:	e6e5      	b.n	1542 <__aeabi_dadd+0x176>
    1776:	465a      	mov	r2, fp
    1778:	431a      	orrs	r2, r3
    177a:	1e53      	subs	r3, r2, #1
    177c:	419a      	sbcs	r2, r3
    177e:	b2d2      	uxtb	r2, r2
    1780:	2300      	movs	r3, #0
    1782:	e714      	b.n	15ae <__aeabi_dadd+0x1e2>
    1784:	000007ff 	.word	0x000007ff
    1788:	ff7fffff 	.word	0xff7fffff
    178c:	800fffff 	.word	0x800fffff
    1790:	1c0d      	adds	r5, r1, #0
    1792:	4325      	orrs	r5, r4
    1794:	d058      	beq.n	1848 <__aeabi_dadd+0x47c>
    1796:	43ff      	mvns	r7, r7
    1798:	2f00      	cmp	r7, #0
    179a:	d151      	bne.n	1840 <__aeabi_dadd+0x474>
    179c:	1b04      	subs	r4, r0, r4
    179e:	45a3      	cmp	fp, r4
    17a0:	4192      	sbcs	r2, r2
    17a2:	1a59      	subs	r1, r3, r1
    17a4:	4252      	negs	r2, r2
    17a6:	1a89      	subs	r1, r1, r2
    17a8:	4655      	mov	r5, sl
    17aa:	4666      	mov	r6, ip
    17ac:	e695      	b.n	14da <__aeabi_dadd+0x10e>
    17ae:	4896      	ldr	r0, [pc, #600]	; (1a08 <__aeabi_dadd+0x63c>)
    17b0:	4285      	cmp	r5, r0
    17b2:	d000      	beq.n	17b6 <__aeabi_dadd+0x3ea>
    17b4:	e6de      	b.n	1574 <__aeabi_dadd+0x1a8>
    17b6:	e632      	b.n	141e <__aeabi_dadd+0x52>
    17b8:	2700      	movs	r7, #0
    17ba:	e793      	b.n	16e4 <__aeabi_dadd+0x318>
    17bc:	2300      	movs	r3, #0
    17be:	e7a2      	b.n	1706 <__aeabi_dadd+0x33a>
    17c0:	1c08      	adds	r0, r1, #0
    17c2:	4320      	orrs	r0, r4
    17c4:	2d00      	cmp	r5, #0
    17c6:	d000      	beq.n	17ca <__aeabi_dadd+0x3fe>
    17c8:	e0c4      	b.n	1954 <__aeabi_dadd+0x588>
    17ca:	2800      	cmp	r0, #0
    17cc:	d100      	bne.n	17d0 <__aeabi_dadd+0x404>
    17ce:	e0f7      	b.n	19c0 <__aeabi_dadd+0x5f4>
    17d0:	4658      	mov	r0, fp
    17d2:	4318      	orrs	r0, r3
    17d4:	d100      	bne.n	17d8 <__aeabi_dadd+0x40c>
    17d6:	e622      	b.n	141e <__aeabi_dadd+0x52>
    17d8:	4658      	mov	r0, fp
    17da:	1902      	adds	r2, r0, r4
    17dc:	42a2      	cmp	r2, r4
    17de:	41a4      	sbcs	r4, r4
    17e0:	4264      	negs	r4, r4
    17e2:	1859      	adds	r1, r3, r1
    17e4:	1909      	adds	r1, r1, r4
    17e6:	1c14      	adds	r4, r2, #0
    17e8:	020a      	lsls	r2, r1, #8
    17ea:	d400      	bmi.n	17ee <__aeabi_dadd+0x422>
    17ec:	e617      	b.n	141e <__aeabi_dadd+0x52>
    17ee:	4b87      	ldr	r3, [pc, #540]	; (1a0c <__aeabi_dadd+0x640>)
    17f0:	2501      	movs	r5, #1
    17f2:	4019      	ands	r1, r3
    17f4:	e613      	b.n	141e <__aeabi_dadd+0x52>
    17f6:	1c08      	adds	r0, r1, #0
    17f8:	4320      	orrs	r0, r4
    17fa:	2d00      	cmp	r5, #0
    17fc:	d139      	bne.n	1872 <__aeabi_dadd+0x4a6>
    17fe:	2800      	cmp	r0, #0
    1800:	d171      	bne.n	18e6 <__aeabi_dadd+0x51a>
    1802:	4659      	mov	r1, fp
    1804:	4319      	orrs	r1, r3
    1806:	d003      	beq.n	1810 <__aeabi_dadd+0x444>
    1808:	1c19      	adds	r1, r3, #0
    180a:	465c      	mov	r4, fp
    180c:	4666      	mov	r6, ip
    180e:	e606      	b.n	141e <__aeabi_dadd+0x52>
    1810:	2700      	movs	r7, #0
    1812:	2100      	movs	r1, #0
    1814:	2400      	movs	r4, #0
    1816:	e694      	b.n	1542 <__aeabi_dadd+0x176>
    1818:	4660      	mov	r0, ip
    181a:	3820      	subs	r0, #32
    181c:	1c1a      	adds	r2, r3, #0
    181e:	40c2      	lsrs	r2, r0
    1820:	4660      	mov	r0, ip
    1822:	4691      	mov	r9, r2
    1824:	2820      	cmp	r0, #32
    1826:	d100      	bne.n	182a <__aeabi_dadd+0x45e>
    1828:	e0ac      	b.n	1984 <__aeabi_dadd+0x5b8>
    182a:	2240      	movs	r2, #64	; 0x40
    182c:	1a12      	subs	r2, r2, r0
    182e:	4093      	lsls	r3, r2
    1830:	465a      	mov	r2, fp
    1832:	431a      	orrs	r2, r3
    1834:	1e53      	subs	r3, r2, #1
    1836:	419a      	sbcs	r2, r3
    1838:	464b      	mov	r3, r9
    183a:	431a      	orrs	r2, r3
    183c:	2300      	movs	r3, #0
    183e:	e6b6      	b.n	15ae <__aeabi_dadd+0x1e2>
    1840:	4d71      	ldr	r5, [pc, #452]	; (1a08 <__aeabi_dadd+0x63c>)
    1842:	45aa      	cmp	sl, r5
    1844:	d000      	beq.n	1848 <__aeabi_dadd+0x47c>
    1846:	e76f      	b.n	1728 <__aeabi_dadd+0x35c>
    1848:	1c19      	adds	r1, r3, #0
    184a:	465c      	mov	r4, fp
    184c:	4655      	mov	r5, sl
    184e:	4666      	mov	r6, ip
    1850:	e5e5      	b.n	141e <__aeabi_dadd+0x52>
    1852:	2d00      	cmp	r5, #0
    1854:	d122      	bne.n	189c <__aeabi_dadd+0x4d0>
    1856:	1c0d      	adds	r5, r1, #0
    1858:	4325      	orrs	r5, r4
    185a:	d077      	beq.n	194c <__aeabi_dadd+0x580>
    185c:	43d5      	mvns	r5, r2
    185e:	2d00      	cmp	r5, #0
    1860:	d171      	bne.n	1946 <__aeabi_dadd+0x57a>
    1862:	445c      	add	r4, fp
    1864:	455c      	cmp	r4, fp
    1866:	4192      	sbcs	r2, r2
    1868:	1859      	adds	r1, r3, r1
    186a:	4252      	negs	r2, r2
    186c:	1889      	adds	r1, r1, r2
    186e:	4655      	mov	r5, sl
    1870:	e6a4      	b.n	15bc <__aeabi_dadd+0x1f0>
    1872:	2800      	cmp	r0, #0
    1874:	d14d      	bne.n	1912 <__aeabi_dadd+0x546>
    1876:	4659      	mov	r1, fp
    1878:	4319      	orrs	r1, r3
    187a:	d100      	bne.n	187e <__aeabi_dadd+0x4b2>
    187c:	e094      	b.n	19a8 <__aeabi_dadd+0x5dc>
    187e:	1c19      	adds	r1, r3, #0
    1880:	465c      	mov	r4, fp
    1882:	4666      	mov	r6, ip
    1884:	4d60      	ldr	r5, [pc, #384]	; (1a08 <__aeabi_dadd+0x63c>)
    1886:	e5ca      	b.n	141e <__aeabi_dadd+0x52>
    1888:	430c      	orrs	r4, r1
    188a:	1e61      	subs	r1, r4, #1
    188c:	418c      	sbcs	r4, r1
    188e:	b2e4      	uxtb	r4, r4
    1890:	2100      	movs	r1, #0
    1892:	e75b      	b.n	174c <__aeabi_dadd+0x380>
    1894:	1c05      	adds	r5, r0, #0
    1896:	2100      	movs	r1, #0
    1898:	2400      	movs	r4, #0
    189a:	e652      	b.n	1542 <__aeabi_dadd+0x176>
    189c:	4d5a      	ldr	r5, [pc, #360]	; (1a08 <__aeabi_dadd+0x63c>)
    189e:	45aa      	cmp	sl, r5
    18a0:	d054      	beq.n	194c <__aeabi_dadd+0x580>
    18a2:	4255      	negs	r5, r2
    18a4:	2280      	movs	r2, #128	; 0x80
    18a6:	0410      	lsls	r0, r2, #16
    18a8:	4301      	orrs	r1, r0
    18aa:	2d38      	cmp	r5, #56	; 0x38
    18ac:	dd00      	ble.n	18b0 <__aeabi_dadd+0x4e4>
    18ae:	e081      	b.n	19b4 <__aeabi_dadd+0x5e8>
    18b0:	2d1f      	cmp	r5, #31
    18b2:	dd00      	ble.n	18b6 <__aeabi_dadd+0x4ea>
    18b4:	e092      	b.n	19dc <__aeabi_dadd+0x610>
    18b6:	2220      	movs	r2, #32
    18b8:	1b50      	subs	r0, r2, r5
    18ba:	1c0a      	adds	r2, r1, #0
    18bc:	4684      	mov	ip, r0
    18be:	4082      	lsls	r2, r0
    18c0:	1c20      	adds	r0, r4, #0
    18c2:	40e8      	lsrs	r0, r5
    18c4:	4302      	orrs	r2, r0
    18c6:	4690      	mov	r8, r2
    18c8:	4662      	mov	r2, ip
    18ca:	4094      	lsls	r4, r2
    18cc:	1e60      	subs	r0, r4, #1
    18ce:	4184      	sbcs	r4, r0
    18d0:	4642      	mov	r2, r8
    18d2:	4314      	orrs	r4, r2
    18d4:	40e9      	lsrs	r1, r5
    18d6:	445c      	add	r4, fp
    18d8:	455c      	cmp	r4, fp
    18da:	4192      	sbcs	r2, r2
    18dc:	18cb      	adds	r3, r1, r3
    18de:	4252      	negs	r2, r2
    18e0:	1899      	adds	r1, r3, r2
    18e2:	4655      	mov	r5, sl
    18e4:	e66a      	b.n	15bc <__aeabi_dadd+0x1f0>
    18e6:	4658      	mov	r0, fp
    18e8:	4318      	orrs	r0, r3
    18ea:	d100      	bne.n	18ee <__aeabi_dadd+0x522>
    18ec:	e597      	b.n	141e <__aeabi_dadd+0x52>
    18ee:	4658      	mov	r0, fp
    18f0:	1a27      	subs	r7, r4, r0
    18f2:	42bc      	cmp	r4, r7
    18f4:	4192      	sbcs	r2, r2
    18f6:	1ac8      	subs	r0, r1, r3
    18f8:	4252      	negs	r2, r2
    18fa:	1a80      	subs	r0, r0, r2
    18fc:	0202      	lsls	r2, r0, #8
    18fe:	d566      	bpl.n	19ce <__aeabi_dadd+0x602>
    1900:	4658      	mov	r0, fp
    1902:	1b04      	subs	r4, r0, r4
    1904:	45a3      	cmp	fp, r4
    1906:	4192      	sbcs	r2, r2
    1908:	1a59      	subs	r1, r3, r1
    190a:	4252      	negs	r2, r2
    190c:	1a89      	subs	r1, r1, r2
    190e:	4666      	mov	r6, ip
    1910:	e585      	b.n	141e <__aeabi_dadd+0x52>
    1912:	4658      	mov	r0, fp
    1914:	4318      	orrs	r0, r3
    1916:	d033      	beq.n	1980 <__aeabi_dadd+0x5b4>
    1918:	0748      	lsls	r0, r1, #29
    191a:	08e4      	lsrs	r4, r4, #3
    191c:	4304      	orrs	r4, r0
    191e:	2080      	movs	r0, #128	; 0x80
    1920:	08c9      	lsrs	r1, r1, #3
    1922:	0300      	lsls	r0, r0, #12
    1924:	4201      	tst	r1, r0
    1926:	d008      	beq.n	193a <__aeabi_dadd+0x56e>
    1928:	08dd      	lsrs	r5, r3, #3
    192a:	4205      	tst	r5, r0
    192c:	d105      	bne.n	193a <__aeabi_dadd+0x56e>
    192e:	4659      	mov	r1, fp
    1930:	08ca      	lsrs	r2, r1, #3
    1932:	075c      	lsls	r4, r3, #29
    1934:	4314      	orrs	r4, r2
    1936:	1c29      	adds	r1, r5, #0
    1938:	4666      	mov	r6, ip
    193a:	0f63      	lsrs	r3, r4, #29
    193c:	00c9      	lsls	r1, r1, #3
    193e:	4319      	orrs	r1, r3
    1940:	00e4      	lsls	r4, r4, #3
    1942:	4d31      	ldr	r5, [pc, #196]	; (1a08 <__aeabi_dadd+0x63c>)
    1944:	e56b      	b.n	141e <__aeabi_dadd+0x52>
    1946:	4a30      	ldr	r2, [pc, #192]	; (1a08 <__aeabi_dadd+0x63c>)
    1948:	4592      	cmp	sl, r2
    194a:	d1ae      	bne.n	18aa <__aeabi_dadd+0x4de>
    194c:	1c19      	adds	r1, r3, #0
    194e:	465c      	mov	r4, fp
    1950:	4655      	mov	r5, sl
    1952:	e564      	b.n	141e <__aeabi_dadd+0x52>
    1954:	2800      	cmp	r0, #0
    1956:	d036      	beq.n	19c6 <__aeabi_dadd+0x5fa>
    1958:	4658      	mov	r0, fp
    195a:	4318      	orrs	r0, r3
    195c:	d010      	beq.n	1980 <__aeabi_dadd+0x5b4>
    195e:	2580      	movs	r5, #128	; 0x80
    1960:	0748      	lsls	r0, r1, #29
    1962:	08e4      	lsrs	r4, r4, #3
    1964:	08c9      	lsrs	r1, r1, #3
    1966:	032d      	lsls	r5, r5, #12
    1968:	4304      	orrs	r4, r0
    196a:	4229      	tst	r1, r5
    196c:	d0e5      	beq.n	193a <__aeabi_dadd+0x56e>
    196e:	08d8      	lsrs	r0, r3, #3
    1970:	4228      	tst	r0, r5
    1972:	d1e2      	bne.n	193a <__aeabi_dadd+0x56e>
    1974:	465d      	mov	r5, fp
    1976:	08ea      	lsrs	r2, r5, #3
    1978:	075c      	lsls	r4, r3, #29
    197a:	4314      	orrs	r4, r2
    197c:	1c01      	adds	r1, r0, #0
    197e:	e7dc      	b.n	193a <__aeabi_dadd+0x56e>
    1980:	4d21      	ldr	r5, [pc, #132]	; (1a08 <__aeabi_dadd+0x63c>)
    1982:	e54c      	b.n	141e <__aeabi_dadd+0x52>
    1984:	2300      	movs	r3, #0
    1986:	e753      	b.n	1830 <__aeabi_dadd+0x464>
    1988:	1c3d      	adds	r5, r7, #0
    198a:	3d20      	subs	r5, #32
    198c:	1c0a      	adds	r2, r1, #0
    198e:	40ea      	lsrs	r2, r5
    1990:	1c15      	adds	r5, r2, #0
    1992:	2f20      	cmp	r7, #32
    1994:	d034      	beq.n	1a00 <__aeabi_dadd+0x634>
    1996:	2640      	movs	r6, #64	; 0x40
    1998:	1bf7      	subs	r7, r6, r7
    199a:	40b9      	lsls	r1, r7
    199c:	430c      	orrs	r4, r1
    199e:	1e61      	subs	r1, r4, #1
    19a0:	418c      	sbcs	r4, r1
    19a2:	432c      	orrs	r4, r5
    19a4:	2100      	movs	r1, #0
    19a6:	e6d1      	b.n	174c <__aeabi_dadd+0x380>
    19a8:	2180      	movs	r1, #128	; 0x80
    19aa:	2700      	movs	r7, #0
    19ac:	03c9      	lsls	r1, r1, #15
    19ae:	4d16      	ldr	r5, [pc, #88]	; (1a08 <__aeabi_dadd+0x63c>)
    19b0:	2400      	movs	r4, #0
    19b2:	e5c6      	b.n	1542 <__aeabi_dadd+0x176>
    19b4:	430c      	orrs	r4, r1
    19b6:	1e61      	subs	r1, r4, #1
    19b8:	418c      	sbcs	r4, r1
    19ba:	b2e4      	uxtb	r4, r4
    19bc:	2100      	movs	r1, #0
    19be:	e78a      	b.n	18d6 <__aeabi_dadd+0x50a>
    19c0:	1c19      	adds	r1, r3, #0
    19c2:	465c      	mov	r4, fp
    19c4:	e52b      	b.n	141e <__aeabi_dadd+0x52>
    19c6:	1c19      	adds	r1, r3, #0
    19c8:	465c      	mov	r4, fp
    19ca:	4d0f      	ldr	r5, [pc, #60]	; (1a08 <__aeabi_dadd+0x63c>)
    19cc:	e527      	b.n	141e <__aeabi_dadd+0x52>
    19ce:	1c03      	adds	r3, r0, #0
    19d0:	433b      	orrs	r3, r7
    19d2:	d100      	bne.n	19d6 <__aeabi_dadd+0x60a>
    19d4:	e71c      	b.n	1810 <__aeabi_dadd+0x444>
    19d6:	1c01      	adds	r1, r0, #0
    19d8:	1c3c      	adds	r4, r7, #0
    19da:	e520      	b.n	141e <__aeabi_dadd+0x52>
    19dc:	2020      	movs	r0, #32
    19de:	4240      	negs	r0, r0
    19e0:	1940      	adds	r0, r0, r5
    19e2:	1c0a      	adds	r2, r1, #0
    19e4:	40c2      	lsrs	r2, r0
    19e6:	4690      	mov	r8, r2
    19e8:	2d20      	cmp	r5, #32
    19ea:	d00b      	beq.n	1a04 <__aeabi_dadd+0x638>
    19ec:	2040      	movs	r0, #64	; 0x40
    19ee:	1b45      	subs	r5, r0, r5
    19f0:	40a9      	lsls	r1, r5
    19f2:	430c      	orrs	r4, r1
    19f4:	1e61      	subs	r1, r4, #1
    19f6:	418c      	sbcs	r4, r1
    19f8:	4645      	mov	r5, r8
    19fa:	432c      	orrs	r4, r5
    19fc:	2100      	movs	r1, #0
    19fe:	e76a      	b.n	18d6 <__aeabi_dadd+0x50a>
    1a00:	2100      	movs	r1, #0
    1a02:	e7cb      	b.n	199c <__aeabi_dadd+0x5d0>
    1a04:	2100      	movs	r1, #0
    1a06:	e7f4      	b.n	19f2 <__aeabi_dadd+0x626>
    1a08:	000007ff 	.word	0x000007ff
    1a0c:	ff7fffff 	.word	0xff7fffff

00001a10 <__aeabi_ddiv>:
__aeabi_ddiv():
    1a10:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a12:	4656      	mov	r6, sl
    1a14:	4644      	mov	r4, r8
    1a16:	465f      	mov	r7, fp
    1a18:	464d      	mov	r5, r9
    1a1a:	b4f0      	push	{r4, r5, r6, r7}
    1a1c:	1c1f      	adds	r7, r3, #0
    1a1e:	030b      	lsls	r3, r1, #12
    1a20:	0b1b      	lsrs	r3, r3, #12
    1a22:	4698      	mov	r8, r3
    1a24:	004b      	lsls	r3, r1, #1
    1a26:	b087      	sub	sp, #28
    1a28:	1c04      	adds	r4, r0, #0
    1a2a:	4681      	mov	r9, r0
    1a2c:	0d5b      	lsrs	r3, r3, #21
    1a2e:	0fc8      	lsrs	r0, r1, #31
    1a30:	1c16      	adds	r6, r2, #0
    1a32:	469a      	mov	sl, r3
    1a34:	9000      	str	r0, [sp, #0]
    1a36:	2b00      	cmp	r3, #0
    1a38:	d051      	beq.n	1ade <__aeabi_ddiv+0xce>
    1a3a:	4b6a      	ldr	r3, [pc, #424]	; (1be4 <__aeabi_ddiv+0x1d4>)
    1a3c:	459a      	cmp	sl, r3
    1a3e:	d031      	beq.n	1aa4 <__aeabi_ddiv+0x94>
    1a40:	2280      	movs	r2, #128	; 0x80
    1a42:	4641      	mov	r1, r8
    1a44:	0352      	lsls	r2, r2, #13
    1a46:	430a      	orrs	r2, r1
    1a48:	0f63      	lsrs	r3, r4, #29
    1a4a:	00d2      	lsls	r2, r2, #3
    1a4c:	431a      	orrs	r2, r3
    1a4e:	4b66      	ldr	r3, [pc, #408]	; (1be8 <__aeabi_ddiv+0x1d8>)
    1a50:	4690      	mov	r8, r2
    1a52:	2500      	movs	r5, #0
    1a54:	00e2      	lsls	r2, r4, #3
    1a56:	4691      	mov	r9, r2
    1a58:	449a      	add	sl, r3
    1a5a:	2400      	movs	r4, #0
    1a5c:	9502      	str	r5, [sp, #8]
    1a5e:	033b      	lsls	r3, r7, #12
    1a60:	0b1b      	lsrs	r3, r3, #12
    1a62:	469b      	mov	fp, r3
    1a64:	0ffd      	lsrs	r5, r7, #31
    1a66:	007b      	lsls	r3, r7, #1
    1a68:	1c31      	adds	r1, r6, #0
    1a6a:	0d5b      	lsrs	r3, r3, #21
    1a6c:	9501      	str	r5, [sp, #4]
    1a6e:	d060      	beq.n	1b32 <__aeabi_ddiv+0x122>
    1a70:	4a5c      	ldr	r2, [pc, #368]	; (1be4 <__aeabi_ddiv+0x1d4>)
    1a72:	4293      	cmp	r3, r2
    1a74:	d054      	beq.n	1b20 <__aeabi_ddiv+0x110>
    1a76:	2180      	movs	r1, #128	; 0x80
    1a78:	4658      	mov	r0, fp
    1a7a:	0349      	lsls	r1, r1, #13
    1a7c:	4301      	orrs	r1, r0
    1a7e:	0f72      	lsrs	r2, r6, #29
    1a80:	00c9      	lsls	r1, r1, #3
    1a82:	4311      	orrs	r1, r2
    1a84:	4a58      	ldr	r2, [pc, #352]	; (1be8 <__aeabi_ddiv+0x1d8>)
    1a86:	468b      	mov	fp, r1
    1a88:	189b      	adds	r3, r3, r2
    1a8a:	00f1      	lsls	r1, r6, #3
    1a8c:	2000      	movs	r0, #0
    1a8e:	9a00      	ldr	r2, [sp, #0]
    1a90:	4304      	orrs	r4, r0
    1a92:	406a      	eors	r2, r5
    1a94:	9203      	str	r2, [sp, #12]
    1a96:	2c0f      	cmp	r4, #15
    1a98:	d900      	bls.n	1a9c <__aeabi_ddiv+0x8c>
    1a9a:	e0ad      	b.n	1bf8 <__aeabi_ddiv+0x1e8>
    1a9c:	4e53      	ldr	r6, [pc, #332]	; (1bec <__aeabi_ddiv+0x1dc>)
    1a9e:	00a4      	lsls	r4, r4, #2
    1aa0:	5934      	ldr	r4, [r6, r4]
    1aa2:	46a7      	mov	pc, r4
    1aa4:	4640      	mov	r0, r8
    1aa6:	4304      	orrs	r4, r0
    1aa8:	d16e      	bne.n	1b88 <__aeabi_ddiv+0x178>
    1aaa:	2100      	movs	r1, #0
    1aac:	2502      	movs	r5, #2
    1aae:	2408      	movs	r4, #8
    1ab0:	4688      	mov	r8, r1
    1ab2:	4689      	mov	r9, r1
    1ab4:	9502      	str	r5, [sp, #8]
    1ab6:	e7d2      	b.n	1a5e <__aeabi_ddiv+0x4e>
    1ab8:	9c00      	ldr	r4, [sp, #0]
    1aba:	9802      	ldr	r0, [sp, #8]
    1abc:	46c3      	mov	fp, r8
    1abe:	4649      	mov	r1, r9
    1ac0:	9401      	str	r4, [sp, #4]
    1ac2:	2802      	cmp	r0, #2
    1ac4:	d064      	beq.n	1b90 <__aeabi_ddiv+0x180>
    1ac6:	2803      	cmp	r0, #3
    1ac8:	d100      	bne.n	1acc <__aeabi_ddiv+0xbc>
    1aca:	e2ab      	b.n	2024 <__aeabi_ddiv+0x614>
    1acc:	2801      	cmp	r0, #1
    1ace:	d000      	beq.n	1ad2 <__aeabi_ddiv+0xc2>
    1ad0:	e238      	b.n	1f44 <__aeabi_ddiv+0x534>
    1ad2:	9a01      	ldr	r2, [sp, #4]
    1ad4:	2400      	movs	r4, #0
    1ad6:	4002      	ands	r2, r0
    1ad8:	2500      	movs	r5, #0
    1ada:	46a1      	mov	r9, r4
    1adc:	e060      	b.n	1ba0 <__aeabi_ddiv+0x190>
    1ade:	4643      	mov	r3, r8
    1ae0:	4323      	orrs	r3, r4
    1ae2:	d04a      	beq.n	1b7a <__aeabi_ddiv+0x16a>
    1ae4:	4640      	mov	r0, r8
    1ae6:	2800      	cmp	r0, #0
    1ae8:	d100      	bne.n	1aec <__aeabi_ddiv+0xdc>
    1aea:	e1c0      	b.n	1e6e <__aeabi_ddiv+0x45e>
    1aec:	f001 f80c 	bl	2b08 <__clzsi2>
    1af0:	1e03      	subs	r3, r0, #0
    1af2:	2b27      	cmp	r3, #39	; 0x27
    1af4:	dd00      	ble.n	1af8 <__aeabi_ddiv+0xe8>
    1af6:	e1b3      	b.n	1e60 <__aeabi_ddiv+0x450>
    1af8:	2128      	movs	r1, #40	; 0x28
    1afa:	1a0d      	subs	r5, r1, r0
    1afc:	1c21      	adds	r1, r4, #0
    1afe:	3b08      	subs	r3, #8
    1b00:	4642      	mov	r2, r8
    1b02:	40e9      	lsrs	r1, r5
    1b04:	409a      	lsls	r2, r3
    1b06:	1c0d      	adds	r5, r1, #0
    1b08:	4315      	orrs	r5, r2
    1b0a:	1c22      	adds	r2, r4, #0
    1b0c:	409a      	lsls	r2, r3
    1b0e:	46a8      	mov	r8, r5
    1b10:	4691      	mov	r9, r2
    1b12:	4b37      	ldr	r3, [pc, #220]	; (1bf0 <__aeabi_ddiv+0x1e0>)
    1b14:	2500      	movs	r5, #0
    1b16:	1a1b      	subs	r3, r3, r0
    1b18:	469a      	mov	sl, r3
    1b1a:	2400      	movs	r4, #0
    1b1c:	9502      	str	r5, [sp, #8]
    1b1e:	e79e      	b.n	1a5e <__aeabi_ddiv+0x4e>
    1b20:	465a      	mov	r2, fp
    1b22:	4316      	orrs	r6, r2
    1b24:	2003      	movs	r0, #3
    1b26:	2e00      	cmp	r6, #0
    1b28:	d1b1      	bne.n	1a8e <__aeabi_ddiv+0x7e>
    1b2a:	46b3      	mov	fp, r6
    1b2c:	2100      	movs	r1, #0
    1b2e:	2002      	movs	r0, #2
    1b30:	e7ad      	b.n	1a8e <__aeabi_ddiv+0x7e>
    1b32:	465a      	mov	r2, fp
    1b34:	4332      	orrs	r2, r6
    1b36:	d01b      	beq.n	1b70 <__aeabi_ddiv+0x160>
    1b38:	465b      	mov	r3, fp
    1b3a:	2b00      	cmp	r3, #0
    1b3c:	d100      	bne.n	1b40 <__aeabi_ddiv+0x130>
    1b3e:	e18a      	b.n	1e56 <__aeabi_ddiv+0x446>
    1b40:	4658      	mov	r0, fp
    1b42:	f000 ffe1 	bl	2b08 <__clzsi2>
    1b46:	2827      	cmp	r0, #39	; 0x27
    1b48:	dd00      	ble.n	1b4c <__aeabi_ddiv+0x13c>
    1b4a:	e17d      	b.n	1e48 <__aeabi_ddiv+0x438>
    1b4c:	2228      	movs	r2, #40	; 0x28
    1b4e:	1a17      	subs	r7, r2, r0
    1b50:	1c01      	adds	r1, r0, #0
    1b52:	1c32      	adds	r2, r6, #0
    1b54:	3908      	subs	r1, #8
    1b56:	465b      	mov	r3, fp
    1b58:	40fa      	lsrs	r2, r7
    1b5a:	408b      	lsls	r3, r1
    1b5c:	1c17      	adds	r7, r2, #0
    1b5e:	431f      	orrs	r7, r3
    1b60:	1c33      	adds	r3, r6, #0
    1b62:	408b      	lsls	r3, r1
    1b64:	46bb      	mov	fp, r7
    1b66:	1c19      	adds	r1, r3, #0
    1b68:	4b21      	ldr	r3, [pc, #132]	; (1bf0 <__aeabi_ddiv+0x1e0>)
    1b6a:	1a1b      	subs	r3, r3, r0
    1b6c:	2000      	movs	r0, #0
    1b6e:	e78e      	b.n	1a8e <__aeabi_ddiv+0x7e>
    1b70:	2700      	movs	r7, #0
    1b72:	46bb      	mov	fp, r7
    1b74:	2100      	movs	r1, #0
    1b76:	2001      	movs	r0, #1
    1b78:	e789      	b.n	1a8e <__aeabi_ddiv+0x7e>
    1b7a:	2000      	movs	r0, #0
    1b7c:	2501      	movs	r5, #1
    1b7e:	2404      	movs	r4, #4
    1b80:	4680      	mov	r8, r0
    1b82:	4681      	mov	r9, r0
    1b84:	9502      	str	r5, [sp, #8]
    1b86:	e76a      	b.n	1a5e <__aeabi_ddiv+0x4e>
    1b88:	2503      	movs	r5, #3
    1b8a:	240c      	movs	r4, #12
    1b8c:	9502      	str	r5, [sp, #8]
    1b8e:	e766      	b.n	1a5e <__aeabi_ddiv+0x4e>
    1b90:	9c01      	ldr	r4, [sp, #4]
    1b92:	9403      	str	r4, [sp, #12]
    1b94:	9d03      	ldr	r5, [sp, #12]
    1b96:	2201      	movs	r2, #1
    1b98:	402a      	ands	r2, r5
    1b9a:	2400      	movs	r4, #0
    1b9c:	4d11      	ldr	r5, [pc, #68]	; (1be4 <__aeabi_ddiv+0x1d4>)
    1b9e:	46a1      	mov	r9, r4
    1ba0:	2000      	movs	r0, #0
    1ba2:	2100      	movs	r1, #0
    1ba4:	0324      	lsls	r4, r4, #12
    1ba6:	0b26      	lsrs	r6, r4, #12
    1ba8:	0d0c      	lsrs	r4, r1, #20
    1baa:	0524      	lsls	r4, r4, #20
    1bac:	4b11      	ldr	r3, [pc, #68]	; (1bf4 <__aeabi_ddiv+0x1e4>)
    1bae:	4334      	orrs	r4, r6
    1bb0:	052d      	lsls	r5, r5, #20
    1bb2:	4023      	ands	r3, r4
    1bb4:	432b      	orrs	r3, r5
    1bb6:	005b      	lsls	r3, r3, #1
    1bb8:	085b      	lsrs	r3, r3, #1
    1bba:	07d2      	lsls	r2, r2, #31
    1bbc:	1c19      	adds	r1, r3, #0
    1bbe:	4648      	mov	r0, r9
    1bc0:	4311      	orrs	r1, r2
    1bc2:	b007      	add	sp, #28
    1bc4:	bc3c      	pop	{r2, r3, r4, r5}
    1bc6:	4690      	mov	r8, r2
    1bc8:	4699      	mov	r9, r3
    1bca:	46a2      	mov	sl, r4
    1bcc:	46ab      	mov	fp, r5
    1bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bd0:	2200      	movs	r2, #0
    1bd2:	2480      	movs	r4, #128	; 0x80
    1bd4:	0324      	lsls	r4, r4, #12
    1bd6:	4691      	mov	r9, r2
    1bd8:	4d02      	ldr	r5, [pc, #8]	; (1be4 <__aeabi_ddiv+0x1d4>)
    1bda:	e7e1      	b.n	1ba0 <__aeabi_ddiv+0x190>
    1bdc:	2400      	movs	r4, #0
    1bde:	2500      	movs	r5, #0
    1be0:	46a1      	mov	r9, r4
    1be2:	e7dd      	b.n	1ba0 <__aeabi_ddiv+0x190>
    1be4:	000007ff 	.word	0x000007ff
    1be8:	fffffc01 	.word	0xfffffc01
    1bec:	00013250 	.word	0x00013250
    1bf0:	fffffc0d 	.word	0xfffffc0d
    1bf4:	800fffff 	.word	0x800fffff
    1bf8:	4655      	mov	r5, sl
    1bfa:	1aed      	subs	r5, r5, r3
    1bfc:	9504      	str	r5, [sp, #16]
    1bfe:	45d8      	cmp	r8, fp
    1c00:	d900      	bls.n	1c04 <__aeabi_ddiv+0x1f4>
    1c02:	e153      	b.n	1eac <__aeabi_ddiv+0x49c>
    1c04:	d100      	bne.n	1c08 <__aeabi_ddiv+0x1f8>
    1c06:	e14e      	b.n	1ea6 <__aeabi_ddiv+0x496>
    1c08:	9c04      	ldr	r4, [sp, #16]
    1c0a:	2500      	movs	r5, #0
    1c0c:	3c01      	subs	r4, #1
    1c0e:	464e      	mov	r6, r9
    1c10:	9404      	str	r4, [sp, #16]
    1c12:	4647      	mov	r7, r8
    1c14:	46a9      	mov	r9, r5
    1c16:	4658      	mov	r0, fp
    1c18:	0203      	lsls	r3, r0, #8
    1c1a:	0e0c      	lsrs	r4, r1, #24
    1c1c:	431c      	orrs	r4, r3
    1c1e:	0209      	lsls	r1, r1, #8
    1c20:	0c25      	lsrs	r5, r4, #16
    1c22:	0423      	lsls	r3, r4, #16
    1c24:	0c1b      	lsrs	r3, r3, #16
    1c26:	9100      	str	r1, [sp, #0]
    1c28:	1c38      	adds	r0, r7, #0
    1c2a:	1c29      	adds	r1, r5, #0
    1c2c:	9301      	str	r3, [sp, #4]
    1c2e:	f7fe fc39 	bl	4a4 <__aeabi_uidiv>
    1c32:	9901      	ldr	r1, [sp, #4]
    1c34:	4683      	mov	fp, r0
    1c36:	4341      	muls	r1, r0
    1c38:	1c38      	adds	r0, r7, #0
    1c3a:	468a      	mov	sl, r1
    1c3c:	1c29      	adds	r1, r5, #0
    1c3e:	f7fe fc75 	bl	52c <__aeabi_uidivmod>
    1c42:	0c33      	lsrs	r3, r6, #16
    1c44:	0409      	lsls	r1, r1, #16
    1c46:	4319      	orrs	r1, r3
    1c48:	458a      	cmp	sl, r1
    1c4a:	d90c      	bls.n	1c66 <__aeabi_ddiv+0x256>
    1c4c:	465b      	mov	r3, fp
    1c4e:	1909      	adds	r1, r1, r4
    1c50:	3b01      	subs	r3, #1
    1c52:	428c      	cmp	r4, r1
    1c54:	d900      	bls.n	1c58 <__aeabi_ddiv+0x248>
    1c56:	e147      	b.n	1ee8 <__aeabi_ddiv+0x4d8>
    1c58:	458a      	cmp	sl, r1
    1c5a:	d800      	bhi.n	1c5e <__aeabi_ddiv+0x24e>
    1c5c:	e144      	b.n	1ee8 <__aeabi_ddiv+0x4d8>
    1c5e:	2202      	movs	r2, #2
    1c60:	4252      	negs	r2, r2
    1c62:	4493      	add	fp, r2
    1c64:	1909      	adds	r1, r1, r4
    1c66:	4653      	mov	r3, sl
    1c68:	1acb      	subs	r3, r1, r3
    1c6a:	1c18      	adds	r0, r3, #0
    1c6c:	1c29      	adds	r1, r5, #0
    1c6e:	4698      	mov	r8, r3
    1c70:	f7fe fc18 	bl	4a4 <__aeabi_uidiv>
    1c74:	1c07      	adds	r7, r0, #0
    1c76:	9801      	ldr	r0, [sp, #4]
    1c78:	1c29      	adds	r1, r5, #0
    1c7a:	4378      	muls	r0, r7
    1c7c:	4682      	mov	sl, r0
    1c7e:	4640      	mov	r0, r8
    1c80:	f7fe fc54 	bl	52c <__aeabi_uidivmod>
    1c84:	0436      	lsls	r6, r6, #16
    1c86:	040b      	lsls	r3, r1, #16
    1c88:	0c36      	lsrs	r6, r6, #16
    1c8a:	4333      	orrs	r3, r6
    1c8c:	459a      	cmp	sl, r3
    1c8e:	d909      	bls.n	1ca4 <__aeabi_ddiv+0x294>
    1c90:	191b      	adds	r3, r3, r4
    1c92:	1e7a      	subs	r2, r7, #1
    1c94:	429c      	cmp	r4, r3
    1c96:	d900      	bls.n	1c9a <__aeabi_ddiv+0x28a>
    1c98:	e124      	b.n	1ee4 <__aeabi_ddiv+0x4d4>
    1c9a:	459a      	cmp	sl, r3
    1c9c:	d800      	bhi.n	1ca0 <__aeabi_ddiv+0x290>
    1c9e:	e121      	b.n	1ee4 <__aeabi_ddiv+0x4d4>
    1ca0:	3f02      	subs	r7, #2
    1ca2:	191b      	adds	r3, r3, r4
    1ca4:	465e      	mov	r6, fp
    1ca6:	0432      	lsls	r2, r6, #16
    1ca8:	4317      	orrs	r7, r2
    1caa:	0c38      	lsrs	r0, r7, #16
    1cac:	46bb      	mov	fp, r7
    1cae:	9e00      	ldr	r6, [sp, #0]
    1cb0:	9f00      	ldr	r7, [sp, #0]
    1cb2:	4651      	mov	r1, sl
    1cb4:	0c3f      	lsrs	r7, r7, #16
    1cb6:	0432      	lsls	r2, r6, #16
    1cb8:	1a5b      	subs	r3, r3, r1
    1cba:	4659      	mov	r1, fp
    1cbc:	46ba      	mov	sl, r7
    1cbe:	0c12      	lsrs	r2, r2, #16
    1cc0:	040f      	lsls	r7, r1, #16
    1cc2:	0c3f      	lsrs	r7, r7, #16
    1cc4:	4690      	mov	r8, r2
    1cc6:	4651      	mov	r1, sl
    1cc8:	437a      	muls	r2, r7
    1cca:	434f      	muls	r7, r1
    1ccc:	4641      	mov	r1, r8
    1cce:	4341      	muls	r1, r0
    1cd0:	4656      	mov	r6, sl
    1cd2:	4370      	muls	r0, r6
    1cd4:	19cf      	adds	r7, r1, r7
    1cd6:	0c16      	lsrs	r6, r2, #16
    1cd8:	19be      	adds	r6, r7, r6
    1cda:	42b1      	cmp	r1, r6
    1cdc:	d902      	bls.n	1ce4 <__aeabi_ddiv+0x2d4>
    1cde:	2780      	movs	r7, #128	; 0x80
    1ce0:	027f      	lsls	r7, r7, #9
    1ce2:	19c0      	adds	r0, r0, r7
    1ce4:	0c31      	lsrs	r1, r6, #16
    1ce6:	0412      	lsls	r2, r2, #16
    1ce8:	0436      	lsls	r6, r6, #16
    1cea:	0c12      	lsrs	r2, r2, #16
    1cec:	1840      	adds	r0, r0, r1
    1cee:	18b6      	adds	r6, r6, r2
    1cf0:	4283      	cmp	r3, r0
    1cf2:	d200      	bcs.n	1cf6 <__aeabi_ddiv+0x2e6>
    1cf4:	e0c4      	b.n	1e80 <__aeabi_ddiv+0x470>
    1cf6:	d100      	bne.n	1cfa <__aeabi_ddiv+0x2ea>
    1cf8:	e0be      	b.n	1e78 <__aeabi_ddiv+0x468>
    1cfa:	1a19      	subs	r1, r3, r0
    1cfc:	4648      	mov	r0, r9
    1cfe:	1b86      	subs	r6, r0, r6
    1d00:	45b1      	cmp	r9, r6
    1d02:	41bf      	sbcs	r7, r7
    1d04:	427f      	negs	r7, r7
    1d06:	1bcf      	subs	r7, r1, r7
    1d08:	42a7      	cmp	r7, r4
    1d0a:	d100      	bne.n	1d0e <__aeabi_ddiv+0x2fe>
    1d0c:	e113      	b.n	1f36 <__aeabi_ddiv+0x526>
    1d0e:	1c29      	adds	r1, r5, #0
    1d10:	1c38      	adds	r0, r7, #0
    1d12:	f7fe fbc7 	bl	4a4 <__aeabi_uidiv>
    1d16:	9901      	ldr	r1, [sp, #4]
    1d18:	9002      	str	r0, [sp, #8]
    1d1a:	4341      	muls	r1, r0
    1d1c:	1c38      	adds	r0, r7, #0
    1d1e:	4689      	mov	r9, r1
    1d20:	1c29      	adds	r1, r5, #0
    1d22:	f7fe fc03 	bl	52c <__aeabi_uidivmod>
    1d26:	0c33      	lsrs	r3, r6, #16
    1d28:	0409      	lsls	r1, r1, #16
    1d2a:	4319      	orrs	r1, r3
    1d2c:	4589      	cmp	r9, r1
    1d2e:	d90c      	bls.n	1d4a <__aeabi_ddiv+0x33a>
    1d30:	9b02      	ldr	r3, [sp, #8]
    1d32:	1909      	adds	r1, r1, r4
    1d34:	3b01      	subs	r3, #1
    1d36:	428c      	cmp	r4, r1
    1d38:	d900      	bls.n	1d3c <__aeabi_ddiv+0x32c>
    1d3a:	e0ff      	b.n	1f3c <__aeabi_ddiv+0x52c>
    1d3c:	4589      	cmp	r9, r1
    1d3e:	d800      	bhi.n	1d42 <__aeabi_ddiv+0x332>
    1d40:	e0fc      	b.n	1f3c <__aeabi_ddiv+0x52c>
    1d42:	9f02      	ldr	r7, [sp, #8]
    1d44:	1909      	adds	r1, r1, r4
    1d46:	3f02      	subs	r7, #2
    1d48:	9702      	str	r7, [sp, #8]
    1d4a:	464f      	mov	r7, r9
    1d4c:	1bcf      	subs	r7, r1, r7
    1d4e:	1c38      	adds	r0, r7, #0
    1d50:	1c29      	adds	r1, r5, #0
    1d52:	9705      	str	r7, [sp, #20]
    1d54:	f7fe fba6 	bl	4a4 <__aeabi_uidiv>
    1d58:	1c07      	adds	r7, r0, #0
    1d5a:	9801      	ldr	r0, [sp, #4]
    1d5c:	1c29      	adds	r1, r5, #0
    1d5e:	4378      	muls	r0, r7
    1d60:	4681      	mov	r9, r0
    1d62:	9805      	ldr	r0, [sp, #20]
    1d64:	f7fe fbe2 	bl	52c <__aeabi_uidivmod>
    1d68:	0436      	lsls	r6, r6, #16
    1d6a:	0409      	lsls	r1, r1, #16
    1d6c:	0c36      	lsrs	r6, r6, #16
    1d6e:	430e      	orrs	r6, r1
    1d70:	45b1      	cmp	r9, r6
    1d72:	d909      	bls.n	1d88 <__aeabi_ddiv+0x378>
    1d74:	1936      	adds	r6, r6, r4
    1d76:	1e7b      	subs	r3, r7, #1
    1d78:	42b4      	cmp	r4, r6
    1d7a:	d900      	bls.n	1d7e <__aeabi_ddiv+0x36e>
    1d7c:	e0e0      	b.n	1f40 <__aeabi_ddiv+0x530>
    1d7e:	45b1      	cmp	r9, r6
    1d80:	d800      	bhi.n	1d84 <__aeabi_ddiv+0x374>
    1d82:	e0dd      	b.n	1f40 <__aeabi_ddiv+0x530>
    1d84:	3f02      	subs	r7, #2
    1d86:	1936      	adds	r6, r6, r4
    1d88:	9d02      	ldr	r5, [sp, #8]
    1d8a:	4649      	mov	r1, r9
    1d8c:	1a76      	subs	r6, r6, r1
    1d8e:	0429      	lsls	r1, r5, #16
    1d90:	4339      	orrs	r1, r7
    1d92:	040b      	lsls	r3, r1, #16
    1d94:	4657      	mov	r7, sl
    1d96:	0c0a      	lsrs	r2, r1, #16
    1d98:	0c1b      	lsrs	r3, r3, #16
    1d9a:	4640      	mov	r0, r8
    1d9c:	4645      	mov	r5, r8
    1d9e:	4358      	muls	r0, r3
    1da0:	4355      	muls	r5, r2
    1da2:	437b      	muls	r3, r7
    1da4:	437a      	muls	r2, r7
    1da6:	18eb      	adds	r3, r5, r3
    1da8:	0c07      	lsrs	r7, r0, #16
    1daa:	19db      	adds	r3, r3, r7
    1dac:	429d      	cmp	r5, r3
    1dae:	d902      	bls.n	1db6 <__aeabi_ddiv+0x3a6>
    1db0:	2580      	movs	r5, #128	; 0x80
    1db2:	026d      	lsls	r5, r5, #9
    1db4:	1952      	adds	r2, r2, r5
    1db6:	0c1d      	lsrs	r5, r3, #16
    1db8:	0400      	lsls	r0, r0, #16
    1dba:	041b      	lsls	r3, r3, #16
    1dbc:	0c00      	lsrs	r0, r0, #16
    1dbe:	1952      	adds	r2, r2, r5
    1dc0:	181b      	adds	r3, r3, r0
    1dc2:	4296      	cmp	r6, r2
    1dc4:	d335      	bcc.n	1e32 <__aeabi_ddiv+0x422>
    1dc6:	d100      	bne.n	1dca <__aeabi_ddiv+0x3ba>
    1dc8:	e0fc      	b.n	1fc4 <__aeabi_ddiv+0x5b4>
    1dca:	2301      	movs	r3, #1
    1dcc:	4319      	orrs	r1, r3
    1dce:	9e04      	ldr	r6, [sp, #16]
    1dd0:	4f99      	ldr	r7, [pc, #612]	; (2038 <__aeabi_ddiv+0x628>)
    1dd2:	19f5      	adds	r5, r6, r7
    1dd4:	2d00      	cmp	r5, #0
    1dd6:	dc00      	bgt.n	1dda <__aeabi_ddiv+0x3ca>
    1dd8:	e0a1      	b.n	1f1e <__aeabi_ddiv+0x50e>
    1dda:	0748      	lsls	r0, r1, #29
    1ddc:	d009      	beq.n	1df2 <__aeabi_ddiv+0x3e2>
    1dde:	230f      	movs	r3, #15
    1de0:	400b      	ands	r3, r1
    1de2:	2b04      	cmp	r3, #4
    1de4:	d005      	beq.n	1df2 <__aeabi_ddiv+0x3e2>
    1de6:	1d0b      	adds	r3, r1, #4
    1de8:	428b      	cmp	r3, r1
    1dea:	4189      	sbcs	r1, r1
    1dec:	4249      	negs	r1, r1
    1dee:	448b      	add	fp, r1
    1df0:	1c19      	adds	r1, r3, #0
    1df2:	465a      	mov	r2, fp
    1df4:	01d2      	lsls	r2, r2, #7
    1df6:	d507      	bpl.n	1e08 <__aeabi_ddiv+0x3f8>
    1df8:	4b90      	ldr	r3, [pc, #576]	; (203c <__aeabi_ddiv+0x62c>)
    1dfa:	465c      	mov	r4, fp
    1dfc:	9e04      	ldr	r6, [sp, #16]
    1dfe:	2780      	movs	r7, #128	; 0x80
    1e00:	401c      	ands	r4, r3
    1e02:	00ff      	lsls	r7, r7, #3
    1e04:	46a3      	mov	fp, r4
    1e06:	19f5      	adds	r5, r6, r7
    1e08:	4b8d      	ldr	r3, [pc, #564]	; (2040 <__aeabi_ddiv+0x630>)
    1e0a:	429d      	cmp	r5, r3
    1e0c:	dd7a      	ble.n	1f04 <__aeabi_ddiv+0x4f4>
    1e0e:	9c03      	ldr	r4, [sp, #12]
    1e10:	2201      	movs	r2, #1
    1e12:	4022      	ands	r2, r4
    1e14:	2400      	movs	r4, #0
    1e16:	4d8b      	ldr	r5, [pc, #556]	; (2044 <__aeabi_ddiv+0x634>)
    1e18:	46a1      	mov	r9, r4
    1e1a:	e6c1      	b.n	1ba0 <__aeabi_ddiv+0x190>
    1e1c:	2480      	movs	r4, #128	; 0x80
    1e1e:	0324      	lsls	r4, r4, #12
    1e20:	4647      	mov	r7, r8
    1e22:	4227      	tst	r7, r4
    1e24:	d14c      	bne.n	1ec0 <__aeabi_ddiv+0x4b0>
    1e26:	433c      	orrs	r4, r7
    1e28:	0324      	lsls	r4, r4, #12
    1e2a:	0b24      	lsrs	r4, r4, #12
    1e2c:	9a00      	ldr	r2, [sp, #0]
    1e2e:	4d85      	ldr	r5, [pc, #532]	; (2044 <__aeabi_ddiv+0x634>)
    1e30:	e6b6      	b.n	1ba0 <__aeabi_ddiv+0x190>
    1e32:	1936      	adds	r6, r6, r4
    1e34:	1e48      	subs	r0, r1, #1
    1e36:	42b4      	cmp	r4, r6
    1e38:	d95e      	bls.n	1ef8 <__aeabi_ddiv+0x4e8>
    1e3a:	1c01      	adds	r1, r0, #0
    1e3c:	4296      	cmp	r6, r2
    1e3e:	d1c4      	bne.n	1dca <__aeabi_ddiv+0x3ba>
    1e40:	9e00      	ldr	r6, [sp, #0]
    1e42:	429e      	cmp	r6, r3
    1e44:	d1c1      	bne.n	1dca <__aeabi_ddiv+0x3ba>
    1e46:	e7c2      	b.n	1dce <__aeabi_ddiv+0x3be>
    1e48:	1c03      	adds	r3, r0, #0
    1e4a:	3b28      	subs	r3, #40	; 0x28
    1e4c:	1c31      	adds	r1, r6, #0
    1e4e:	4099      	lsls	r1, r3
    1e50:	468b      	mov	fp, r1
    1e52:	2100      	movs	r1, #0
    1e54:	e688      	b.n	1b68 <__aeabi_ddiv+0x158>
    1e56:	1c30      	adds	r0, r6, #0
    1e58:	f000 fe56 	bl	2b08 <__clzsi2>
    1e5c:	3020      	adds	r0, #32
    1e5e:	e672      	b.n	1b46 <__aeabi_ddiv+0x136>
    1e60:	3b28      	subs	r3, #40	; 0x28
    1e62:	1c21      	adds	r1, r4, #0
    1e64:	4099      	lsls	r1, r3
    1e66:	2200      	movs	r2, #0
    1e68:	4688      	mov	r8, r1
    1e6a:	4691      	mov	r9, r2
    1e6c:	e651      	b.n	1b12 <__aeabi_ddiv+0x102>
    1e6e:	1c20      	adds	r0, r4, #0
    1e70:	f000 fe4a 	bl	2b08 <__clzsi2>
    1e74:	3020      	adds	r0, #32
    1e76:	e63b      	b.n	1af0 <__aeabi_ddiv+0xe0>
    1e78:	2100      	movs	r1, #0
    1e7a:	45b1      	cmp	r9, r6
    1e7c:	d300      	bcc.n	1e80 <__aeabi_ddiv+0x470>
    1e7e:	e73d      	b.n	1cfc <__aeabi_ddiv+0x2ec>
    1e80:	9f00      	ldr	r7, [sp, #0]
    1e82:	465a      	mov	r2, fp
    1e84:	44b9      	add	r9, r7
    1e86:	45b9      	cmp	r9, r7
    1e88:	41bf      	sbcs	r7, r7
    1e8a:	427f      	negs	r7, r7
    1e8c:	193f      	adds	r7, r7, r4
    1e8e:	18fb      	adds	r3, r7, r3
    1e90:	3a01      	subs	r2, #1
    1e92:	429c      	cmp	r4, r3
    1e94:	d21e      	bcs.n	1ed4 <__aeabi_ddiv+0x4c4>
    1e96:	4298      	cmp	r0, r3
    1e98:	d900      	bls.n	1e9c <__aeabi_ddiv+0x48c>
    1e9a:	e07e      	b.n	1f9a <__aeabi_ddiv+0x58a>
    1e9c:	d100      	bne.n	1ea0 <__aeabi_ddiv+0x490>
    1e9e:	e0b5      	b.n	200c <__aeabi_ddiv+0x5fc>
    1ea0:	1a19      	subs	r1, r3, r0
    1ea2:	4693      	mov	fp, r2
    1ea4:	e72a      	b.n	1cfc <__aeabi_ddiv+0x2ec>
    1ea6:	4589      	cmp	r9, r1
    1ea8:	d800      	bhi.n	1eac <__aeabi_ddiv+0x49c>
    1eaa:	e6ad      	b.n	1c08 <__aeabi_ddiv+0x1f8>
    1eac:	4648      	mov	r0, r9
    1eae:	4646      	mov	r6, r8
    1eb0:	4642      	mov	r2, r8
    1eb2:	0877      	lsrs	r7, r6, #1
    1eb4:	07d3      	lsls	r3, r2, #31
    1eb6:	0846      	lsrs	r6, r0, #1
    1eb8:	07c0      	lsls	r0, r0, #31
    1eba:	431e      	orrs	r6, r3
    1ebc:	4681      	mov	r9, r0
    1ebe:	e6aa      	b.n	1c16 <__aeabi_ddiv+0x206>
    1ec0:	4658      	mov	r0, fp
    1ec2:	4220      	tst	r0, r4
    1ec4:	d112      	bne.n	1eec <__aeabi_ddiv+0x4dc>
    1ec6:	4304      	orrs	r4, r0
    1ec8:	0324      	lsls	r4, r4, #12
    1eca:	1c2a      	adds	r2, r5, #0
    1ecc:	0b24      	lsrs	r4, r4, #12
    1ece:	4689      	mov	r9, r1
    1ed0:	4d5c      	ldr	r5, [pc, #368]	; (2044 <__aeabi_ddiv+0x634>)
    1ed2:	e665      	b.n	1ba0 <__aeabi_ddiv+0x190>
    1ed4:	42a3      	cmp	r3, r4
    1ed6:	d1e3      	bne.n	1ea0 <__aeabi_ddiv+0x490>
    1ed8:	9f00      	ldr	r7, [sp, #0]
    1eda:	454f      	cmp	r7, r9
    1edc:	d9db      	bls.n	1e96 <__aeabi_ddiv+0x486>
    1ede:	1a21      	subs	r1, r4, r0
    1ee0:	4693      	mov	fp, r2
    1ee2:	e70b      	b.n	1cfc <__aeabi_ddiv+0x2ec>
    1ee4:	1c17      	adds	r7, r2, #0
    1ee6:	e6dd      	b.n	1ca4 <__aeabi_ddiv+0x294>
    1ee8:	469b      	mov	fp, r3
    1eea:	e6bc      	b.n	1c66 <__aeabi_ddiv+0x256>
    1eec:	433c      	orrs	r4, r7
    1eee:	0324      	lsls	r4, r4, #12
    1ef0:	0b24      	lsrs	r4, r4, #12
    1ef2:	9a00      	ldr	r2, [sp, #0]
    1ef4:	4d53      	ldr	r5, [pc, #332]	; (2044 <__aeabi_ddiv+0x634>)
    1ef6:	e653      	b.n	1ba0 <__aeabi_ddiv+0x190>
    1ef8:	42b2      	cmp	r2, r6
    1efa:	d859      	bhi.n	1fb0 <__aeabi_ddiv+0x5a0>
    1efc:	d100      	bne.n	1f00 <__aeabi_ddiv+0x4f0>
    1efe:	e08a      	b.n	2016 <__aeabi_ddiv+0x606>
    1f00:	1c01      	adds	r1, r0, #0
    1f02:	e762      	b.n	1dca <__aeabi_ddiv+0x3ba>
    1f04:	465f      	mov	r7, fp
    1f06:	08c9      	lsrs	r1, r1, #3
    1f08:	077b      	lsls	r3, r7, #29
    1f0a:	9e03      	ldr	r6, [sp, #12]
    1f0c:	430b      	orrs	r3, r1
    1f0e:	027c      	lsls	r4, r7, #9
    1f10:	056d      	lsls	r5, r5, #21
    1f12:	2201      	movs	r2, #1
    1f14:	4699      	mov	r9, r3
    1f16:	0b24      	lsrs	r4, r4, #12
    1f18:	0d6d      	lsrs	r5, r5, #21
    1f1a:	4032      	ands	r2, r6
    1f1c:	e640      	b.n	1ba0 <__aeabi_ddiv+0x190>
    1f1e:	4b4a      	ldr	r3, [pc, #296]	; (2048 <__aeabi_ddiv+0x638>)
    1f20:	9f04      	ldr	r7, [sp, #16]
    1f22:	1bdb      	subs	r3, r3, r7
    1f24:	2b38      	cmp	r3, #56	; 0x38
    1f26:	dd10      	ble.n	1f4a <__aeabi_ddiv+0x53a>
    1f28:	9c03      	ldr	r4, [sp, #12]
    1f2a:	2201      	movs	r2, #1
    1f2c:	4022      	ands	r2, r4
    1f2e:	2400      	movs	r4, #0
    1f30:	2500      	movs	r5, #0
    1f32:	46a1      	mov	r9, r4
    1f34:	e634      	b.n	1ba0 <__aeabi_ddiv+0x190>
    1f36:	2101      	movs	r1, #1
    1f38:	4249      	negs	r1, r1
    1f3a:	e748      	b.n	1dce <__aeabi_ddiv+0x3be>
    1f3c:	9302      	str	r3, [sp, #8]
    1f3e:	e704      	b.n	1d4a <__aeabi_ddiv+0x33a>
    1f40:	1c1f      	adds	r7, r3, #0
    1f42:	e721      	b.n	1d88 <__aeabi_ddiv+0x378>
    1f44:	9c01      	ldr	r4, [sp, #4]
    1f46:	9403      	str	r4, [sp, #12]
    1f48:	e741      	b.n	1dce <__aeabi_ddiv+0x3be>
    1f4a:	2b1f      	cmp	r3, #31
    1f4c:	dc40      	bgt.n	1fd0 <__aeabi_ddiv+0x5c0>
    1f4e:	483f      	ldr	r0, [pc, #252]	; (204c <__aeabi_ddiv+0x63c>)
    1f50:	9f04      	ldr	r7, [sp, #16]
    1f52:	1c0c      	adds	r4, r1, #0
    1f54:	183a      	adds	r2, r7, r0
    1f56:	4658      	mov	r0, fp
    1f58:	4091      	lsls	r1, r2
    1f5a:	40dc      	lsrs	r4, r3
    1f5c:	4090      	lsls	r0, r2
    1f5e:	4320      	orrs	r0, r4
    1f60:	1c0a      	adds	r2, r1, #0
    1f62:	1e51      	subs	r1, r2, #1
    1f64:	418a      	sbcs	r2, r1
    1f66:	1c01      	adds	r1, r0, #0
    1f68:	4311      	orrs	r1, r2
    1f6a:	465a      	mov	r2, fp
    1f6c:	40da      	lsrs	r2, r3
    1f6e:	1c13      	adds	r3, r2, #0
    1f70:	0748      	lsls	r0, r1, #29
    1f72:	d009      	beq.n	1f88 <__aeabi_ddiv+0x578>
    1f74:	220f      	movs	r2, #15
    1f76:	400a      	ands	r2, r1
    1f78:	2a04      	cmp	r2, #4
    1f7a:	d005      	beq.n	1f88 <__aeabi_ddiv+0x578>
    1f7c:	1d0a      	adds	r2, r1, #4
    1f7e:	428a      	cmp	r2, r1
    1f80:	4189      	sbcs	r1, r1
    1f82:	4249      	negs	r1, r1
    1f84:	185b      	adds	r3, r3, r1
    1f86:	1c11      	adds	r1, r2, #0
    1f88:	021a      	lsls	r2, r3, #8
    1f8a:	d534      	bpl.n	1ff6 <__aeabi_ddiv+0x5e6>
    1f8c:	9c03      	ldr	r4, [sp, #12]
    1f8e:	2201      	movs	r2, #1
    1f90:	4022      	ands	r2, r4
    1f92:	2400      	movs	r4, #0
    1f94:	2501      	movs	r5, #1
    1f96:	46a1      	mov	r9, r4
    1f98:	e602      	b.n	1ba0 <__aeabi_ddiv+0x190>
    1f9a:	9f00      	ldr	r7, [sp, #0]
    1f9c:	2102      	movs	r1, #2
    1f9e:	4249      	negs	r1, r1
    1fa0:	44b9      	add	r9, r7
    1fa2:	448b      	add	fp, r1
    1fa4:	45b9      	cmp	r9, r7
    1fa6:	4189      	sbcs	r1, r1
    1fa8:	4249      	negs	r1, r1
    1faa:	1909      	adds	r1, r1, r4
    1fac:	18cb      	adds	r3, r1, r3
    1fae:	e6a4      	b.n	1cfa <__aeabi_ddiv+0x2ea>
    1fb0:	9d00      	ldr	r5, [sp, #0]
    1fb2:	1e88      	subs	r0, r1, #2
    1fb4:	0069      	lsls	r1, r5, #1
    1fb6:	42a9      	cmp	r1, r5
    1fb8:	41ad      	sbcs	r5, r5
    1fba:	426d      	negs	r5, r5
    1fbc:	192c      	adds	r4, r5, r4
    1fbe:	1936      	adds	r6, r6, r4
    1fc0:	9100      	str	r1, [sp, #0]
    1fc2:	e73a      	b.n	1e3a <__aeabi_ddiv+0x42a>
    1fc4:	2b00      	cmp	r3, #0
    1fc6:	d000      	beq.n	1fca <__aeabi_ddiv+0x5ba>
    1fc8:	e733      	b.n	1e32 <__aeabi_ddiv+0x422>
    1fca:	2400      	movs	r4, #0
    1fcc:	9400      	str	r4, [sp, #0]
    1fce:	e737      	b.n	1e40 <__aeabi_ddiv+0x430>
    1fd0:	4a1f      	ldr	r2, [pc, #124]	; (2050 <__aeabi_ddiv+0x640>)
    1fd2:	9c04      	ldr	r4, [sp, #16]
    1fd4:	465d      	mov	r5, fp
    1fd6:	1b12      	subs	r2, r2, r4
    1fd8:	40d5      	lsrs	r5, r2
    1fda:	1c2a      	adds	r2, r5, #0
    1fdc:	2b20      	cmp	r3, #32
    1fde:	d01f      	beq.n	2020 <__aeabi_ddiv+0x610>
    1fe0:	4e1c      	ldr	r6, [pc, #112]	; (2054 <__aeabi_ddiv+0x644>)
    1fe2:	465f      	mov	r7, fp
    1fe4:	19a3      	adds	r3, r4, r6
    1fe6:	409f      	lsls	r7, r3
    1fe8:	1c3b      	adds	r3, r7, #0
    1fea:	4319      	orrs	r1, r3
    1fec:	1e4b      	subs	r3, r1, #1
    1fee:	4199      	sbcs	r1, r3
    1ff0:	4311      	orrs	r1, r2
    1ff2:	2300      	movs	r3, #0
    1ff4:	e7bc      	b.n	1f70 <__aeabi_ddiv+0x560>
    1ff6:	075a      	lsls	r2, r3, #29
    1ff8:	08c9      	lsrs	r1, r1, #3
    1ffa:	430a      	orrs	r2, r1
    1ffc:	9f03      	ldr	r7, [sp, #12]
    1ffe:	4691      	mov	r9, r2
    2000:	025b      	lsls	r3, r3, #9
    2002:	2201      	movs	r2, #1
    2004:	0b1c      	lsrs	r4, r3, #12
    2006:	403a      	ands	r2, r7
    2008:	2500      	movs	r5, #0
    200a:	e5c9      	b.n	1ba0 <__aeabi_ddiv+0x190>
    200c:	454e      	cmp	r6, r9
    200e:	d8c4      	bhi.n	1f9a <__aeabi_ddiv+0x58a>
    2010:	4693      	mov	fp, r2
    2012:	2100      	movs	r1, #0
    2014:	e672      	b.n	1cfc <__aeabi_ddiv+0x2ec>
    2016:	9f00      	ldr	r7, [sp, #0]
    2018:	429f      	cmp	r7, r3
    201a:	d3c9      	bcc.n	1fb0 <__aeabi_ddiv+0x5a0>
    201c:	1c01      	adds	r1, r0, #0
    201e:	e70f      	b.n	1e40 <__aeabi_ddiv+0x430>
    2020:	2300      	movs	r3, #0
    2022:	e7e2      	b.n	1fea <__aeabi_ddiv+0x5da>
    2024:	2480      	movs	r4, #128	; 0x80
    2026:	0324      	lsls	r4, r4, #12
    2028:	465f      	mov	r7, fp
    202a:	433c      	orrs	r4, r7
    202c:	0324      	lsls	r4, r4, #12
    202e:	0b24      	lsrs	r4, r4, #12
    2030:	9a01      	ldr	r2, [sp, #4]
    2032:	4689      	mov	r9, r1
    2034:	4d03      	ldr	r5, [pc, #12]	; (2044 <__aeabi_ddiv+0x634>)
    2036:	e5b3      	b.n	1ba0 <__aeabi_ddiv+0x190>
    2038:	000003ff 	.word	0x000003ff
    203c:	feffffff 	.word	0xfeffffff
    2040:	000007fe 	.word	0x000007fe
    2044:	000007ff 	.word	0x000007ff
    2048:	fffffc02 	.word	0xfffffc02
    204c:	0000041e 	.word	0x0000041e
    2050:	fffffbe2 	.word	0xfffffbe2
    2054:	0000043e 	.word	0x0000043e

00002058 <__eqdf2>:
__eqdf2():
    2058:	b5f0      	push	{r4, r5, r6, r7, lr}
    205a:	465f      	mov	r7, fp
    205c:	4656      	mov	r6, sl
    205e:	464d      	mov	r5, r9
    2060:	4644      	mov	r4, r8
    2062:	b4f0      	push	{r4, r5, r6, r7}
    2064:	1c0d      	adds	r5, r1, #0
    2066:	1c04      	adds	r4, r0, #0
    2068:	4680      	mov	r8, r0
    206a:	0fe8      	lsrs	r0, r5, #31
    206c:	4681      	mov	r9, r0
    206e:	0318      	lsls	r0, r3, #12
    2070:	030f      	lsls	r7, r1, #12
    2072:	0b00      	lsrs	r0, r0, #12
    2074:	0b3f      	lsrs	r7, r7, #12
    2076:	b083      	sub	sp, #12
    2078:	4684      	mov	ip, r0
    207a:	481b      	ldr	r0, [pc, #108]	; (20e8 <__eqdf2+0x90>)
    207c:	9700      	str	r7, [sp, #0]
    207e:	0049      	lsls	r1, r1, #1
    2080:	005e      	lsls	r6, r3, #1
    2082:	0fdf      	lsrs	r7, r3, #31
    2084:	0d49      	lsrs	r1, r1, #21
    2086:	4692      	mov	sl, r2
    2088:	0d76      	lsrs	r6, r6, #21
    208a:	46bb      	mov	fp, r7
    208c:	4281      	cmp	r1, r0
    208e:	d00c      	beq.n	20aa <__eqdf2+0x52>
    2090:	4815      	ldr	r0, [pc, #84]	; (20e8 <__eqdf2+0x90>)
    2092:	4286      	cmp	r6, r0
    2094:	d010      	beq.n	20b8 <__eqdf2+0x60>
    2096:	2001      	movs	r0, #1
    2098:	42b1      	cmp	r1, r6
    209a:	d015      	beq.n	20c8 <__eqdf2+0x70>
    209c:	b003      	add	sp, #12
    209e:	bc3c      	pop	{r2, r3, r4, r5}
    20a0:	4690      	mov	r8, r2
    20a2:	4699      	mov	r9, r3
    20a4:	46a2      	mov	sl, r4
    20a6:	46ab      	mov	fp, r5
    20a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20aa:	9f00      	ldr	r7, [sp, #0]
    20ac:	2001      	movs	r0, #1
    20ae:	4327      	orrs	r7, r4
    20b0:	d1f4      	bne.n	209c <__eqdf2+0x44>
    20b2:	480d      	ldr	r0, [pc, #52]	; (20e8 <__eqdf2+0x90>)
    20b4:	4286      	cmp	r6, r0
    20b6:	d1ee      	bne.n	2096 <__eqdf2+0x3e>
    20b8:	4660      	mov	r0, ip
    20ba:	4302      	orrs	r2, r0
    20bc:	2001      	movs	r0, #1
    20be:	2a00      	cmp	r2, #0
    20c0:	d1ec      	bne.n	209c <__eqdf2+0x44>
    20c2:	2001      	movs	r0, #1
    20c4:	42b1      	cmp	r1, r6
    20c6:	d1e9      	bne.n	209c <__eqdf2+0x44>
    20c8:	9b00      	ldr	r3, [sp, #0]
    20ca:	4563      	cmp	r3, ip
    20cc:	d1e6      	bne.n	209c <__eqdf2+0x44>
    20ce:	45d0      	cmp	r8, sl
    20d0:	d1e4      	bne.n	209c <__eqdf2+0x44>
    20d2:	45d9      	cmp	r9, fp
    20d4:	d006      	beq.n	20e4 <__eqdf2+0x8c>
    20d6:	2900      	cmp	r1, #0
    20d8:	d1e0      	bne.n	209c <__eqdf2+0x44>
    20da:	431c      	orrs	r4, r3
    20dc:	1c20      	adds	r0, r4, #0
    20de:	1e44      	subs	r4, r0, #1
    20e0:	41a0      	sbcs	r0, r4
    20e2:	e7db      	b.n	209c <__eqdf2+0x44>
    20e4:	2000      	movs	r0, #0
    20e6:	e7d9      	b.n	209c <__eqdf2+0x44>
    20e8:	000007ff 	.word	0x000007ff

000020ec <__gedf2>:
__gtdf2():
    20ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    20ee:	465f      	mov	r7, fp
    20f0:	4656      	mov	r6, sl
    20f2:	464d      	mov	r5, r9
    20f4:	4644      	mov	r4, r8
    20f6:	b4f0      	push	{r4, r5, r6, r7}
    20f8:	0fcd      	lsrs	r5, r1, #31
    20fa:	0fde      	lsrs	r6, r3, #31
    20fc:	46ac      	mov	ip, r5
    20fe:	031d      	lsls	r5, r3, #12
    2100:	0b2d      	lsrs	r5, r5, #12
    2102:	46b1      	mov	r9, r6
    2104:	4e37      	ldr	r6, [pc, #220]	; (21e4 <__gedf2+0xf8>)
    2106:	030f      	lsls	r7, r1, #12
    2108:	004c      	lsls	r4, r1, #1
    210a:	46ab      	mov	fp, r5
    210c:	005d      	lsls	r5, r3, #1
    210e:	4680      	mov	r8, r0
    2110:	0b3f      	lsrs	r7, r7, #12
    2112:	0d64      	lsrs	r4, r4, #21
    2114:	4692      	mov	sl, r2
    2116:	0d6d      	lsrs	r5, r5, #21
    2118:	42b4      	cmp	r4, r6
    211a:	d032      	beq.n	2182 <__gedf2+0x96>
    211c:	4e31      	ldr	r6, [pc, #196]	; (21e4 <__gedf2+0xf8>)
    211e:	42b5      	cmp	r5, r6
    2120:	d035      	beq.n	218e <__gedf2+0xa2>
    2122:	2c00      	cmp	r4, #0
    2124:	d10e      	bne.n	2144 <__gedf2+0x58>
    2126:	4338      	orrs	r0, r7
    2128:	4241      	negs	r1, r0
    212a:	4141      	adcs	r1, r0
    212c:	1c08      	adds	r0, r1, #0
    212e:	2d00      	cmp	r5, #0
    2130:	d00b      	beq.n	214a <__gedf2+0x5e>
    2132:	2900      	cmp	r1, #0
    2134:	d119      	bne.n	216a <__gedf2+0x7e>
    2136:	45cc      	cmp	ip, r9
    2138:	d02d      	beq.n	2196 <__gedf2+0xaa>
    213a:	4665      	mov	r5, ip
    213c:	4268      	negs	r0, r5
    213e:	2301      	movs	r3, #1
    2140:	4318      	orrs	r0, r3
    2142:	e018      	b.n	2176 <__gedf2+0x8a>
    2144:	2d00      	cmp	r5, #0
    2146:	d1f6      	bne.n	2136 <__gedf2+0x4a>
    2148:	1c28      	adds	r0, r5, #0
    214a:	4659      	mov	r1, fp
    214c:	430a      	orrs	r2, r1
    214e:	4253      	negs	r3, r2
    2150:	4153      	adcs	r3, r2
    2152:	2800      	cmp	r0, #0
    2154:	d106      	bne.n	2164 <__gedf2+0x78>
    2156:	2b00      	cmp	r3, #0
    2158:	d0ed      	beq.n	2136 <__gedf2+0x4a>
    215a:	4663      	mov	r3, ip
    215c:	4258      	negs	r0, r3
    215e:	2301      	movs	r3, #1
    2160:	4318      	orrs	r0, r3
    2162:	e008      	b.n	2176 <__gedf2+0x8a>
    2164:	2000      	movs	r0, #0
    2166:	2b00      	cmp	r3, #0
    2168:	d105      	bne.n	2176 <__gedf2+0x8a>
    216a:	464a      	mov	r2, r9
    216c:	4250      	negs	r0, r2
    216e:	4150      	adcs	r0, r2
    2170:	4240      	negs	r0, r0
    2172:	2301      	movs	r3, #1
    2174:	4318      	orrs	r0, r3
    2176:	bc3c      	pop	{r2, r3, r4, r5}
    2178:	4690      	mov	r8, r2
    217a:	4699      	mov	r9, r3
    217c:	46a2      	mov	sl, r4
    217e:	46ab      	mov	fp, r5
    2180:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2182:	1c3e      	adds	r6, r7, #0
    2184:	4306      	orrs	r6, r0
    2186:	d0c9      	beq.n	211c <__gedf2+0x30>
    2188:	2002      	movs	r0, #2
    218a:	4240      	negs	r0, r0
    218c:	e7f3      	b.n	2176 <__gedf2+0x8a>
    218e:	465e      	mov	r6, fp
    2190:	4316      	orrs	r6, r2
    2192:	d0c6      	beq.n	2122 <__gedf2+0x36>
    2194:	e7f8      	b.n	2188 <__gedf2+0x9c>
    2196:	42ac      	cmp	r4, r5
    2198:	dc07      	bgt.n	21aa <__gedf2+0xbe>
    219a:	da0b      	bge.n	21b4 <__gedf2+0xc8>
    219c:	4661      	mov	r1, ip
    219e:	4248      	negs	r0, r1
    21a0:	4148      	adcs	r0, r1
    21a2:	4240      	negs	r0, r0
    21a4:	2301      	movs	r3, #1
    21a6:	4318      	orrs	r0, r3
    21a8:	e7e5      	b.n	2176 <__gedf2+0x8a>
    21aa:	4666      	mov	r6, ip
    21ac:	4270      	negs	r0, r6
    21ae:	2301      	movs	r3, #1
    21b0:	4318      	orrs	r0, r3
    21b2:	e7e0      	b.n	2176 <__gedf2+0x8a>
    21b4:	455f      	cmp	r7, fp
    21b6:	d80a      	bhi.n	21ce <__gedf2+0xe2>
    21b8:	d00e      	beq.n	21d8 <__gedf2+0xec>
    21ba:	2000      	movs	r0, #0
    21bc:	455f      	cmp	r7, fp
    21be:	d2da      	bcs.n	2176 <__gedf2+0x8a>
    21c0:	4665      	mov	r5, ip
    21c2:	4268      	negs	r0, r5
    21c4:	4168      	adcs	r0, r5
    21c6:	4240      	negs	r0, r0
    21c8:	2301      	movs	r3, #1
    21ca:	4318      	orrs	r0, r3
    21cc:	e7d3      	b.n	2176 <__gedf2+0x8a>
    21ce:	4662      	mov	r2, ip
    21d0:	4250      	negs	r0, r2
    21d2:	2301      	movs	r3, #1
    21d4:	4318      	orrs	r0, r3
    21d6:	e7ce      	b.n	2176 <__gedf2+0x8a>
    21d8:	45d0      	cmp	r8, sl
    21da:	d8f8      	bhi.n	21ce <__gedf2+0xe2>
    21dc:	2000      	movs	r0, #0
    21de:	45d0      	cmp	r8, sl
    21e0:	d3ee      	bcc.n	21c0 <__gedf2+0xd4>
    21e2:	e7c8      	b.n	2176 <__gedf2+0x8a>
    21e4:	000007ff 	.word	0x000007ff

000021e8 <__ledf2>:
__ltdf2():
    21e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ea:	4656      	mov	r6, sl
    21ec:	464d      	mov	r5, r9
    21ee:	4644      	mov	r4, r8
    21f0:	465f      	mov	r7, fp
    21f2:	b4f0      	push	{r4, r5, r6, r7}
    21f4:	1c0d      	adds	r5, r1, #0
    21f6:	b083      	sub	sp, #12
    21f8:	1c04      	adds	r4, r0, #0
    21fa:	9001      	str	r0, [sp, #4]
    21fc:	0fe8      	lsrs	r0, r5, #31
    21fe:	4681      	mov	r9, r0
    2200:	0318      	lsls	r0, r3, #12
    2202:	030f      	lsls	r7, r1, #12
    2204:	0b00      	lsrs	r0, r0, #12
    2206:	0b3f      	lsrs	r7, r7, #12
    2208:	4684      	mov	ip, r0
    220a:	4835      	ldr	r0, [pc, #212]	; (22e0 <__ledf2+0xf8>)
    220c:	9700      	str	r7, [sp, #0]
    220e:	0049      	lsls	r1, r1, #1
    2210:	005e      	lsls	r6, r3, #1
    2212:	0fdf      	lsrs	r7, r3, #31
    2214:	0d49      	lsrs	r1, r1, #21
    2216:	4692      	mov	sl, r2
    2218:	0d76      	lsrs	r6, r6, #21
    221a:	46b8      	mov	r8, r7
    221c:	4281      	cmp	r1, r0
    221e:	d034      	beq.n	228a <__ledf2+0xa2>
    2220:	482f      	ldr	r0, [pc, #188]	; (22e0 <__ledf2+0xf8>)
    2222:	4286      	cmp	r6, r0
    2224:	d036      	beq.n	2294 <__ledf2+0xac>
    2226:	2900      	cmp	r1, #0
    2228:	d018      	beq.n	225c <__ledf2+0x74>
    222a:	2e00      	cmp	r6, #0
    222c:	d11f      	bne.n	226e <__ledf2+0x86>
    222e:	1c34      	adds	r4, r6, #0
    2230:	4667      	mov	r7, ip
    2232:	433a      	orrs	r2, r7
    2234:	4253      	negs	r3, r2
    2236:	4153      	adcs	r3, r2
    2238:	2c00      	cmp	r4, #0
    223a:	d01f      	beq.n	227c <__ledf2+0x94>
    223c:	2000      	movs	r0, #0
    223e:	2b00      	cmp	r3, #0
    2240:	d105      	bne.n	224e <__ledf2+0x66>
    2242:	4642      	mov	r2, r8
    2244:	4250      	negs	r0, r2
    2246:	4150      	adcs	r0, r2
    2248:	4240      	negs	r0, r0
    224a:	2301      	movs	r3, #1
    224c:	4318      	orrs	r0, r3
    224e:	b003      	add	sp, #12
    2250:	bc3c      	pop	{r2, r3, r4, r5}
    2252:	4690      	mov	r8, r2
    2254:	4699      	mov	r9, r3
    2256:	46a2      	mov	sl, r4
    2258:	46ab      	mov	fp, r5
    225a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    225c:	9800      	ldr	r0, [sp, #0]
    225e:	4304      	orrs	r4, r0
    2260:	4260      	negs	r0, r4
    2262:	4160      	adcs	r0, r4
    2264:	1c04      	adds	r4, r0, #0
    2266:	2e00      	cmp	r6, #0
    2268:	d0e2      	beq.n	2230 <__ledf2+0x48>
    226a:	2800      	cmp	r0, #0
    226c:	d1e9      	bne.n	2242 <__ledf2+0x5a>
    226e:	45c1      	cmp	r9, r8
    2270:	d015      	beq.n	229e <__ledf2+0xb6>
    2272:	464f      	mov	r7, r9
    2274:	4278      	negs	r0, r7
    2276:	2301      	movs	r3, #1
    2278:	4318      	orrs	r0, r3
    227a:	e7e8      	b.n	224e <__ledf2+0x66>
    227c:	2b00      	cmp	r3, #0
    227e:	d0f6      	beq.n	226e <__ledf2+0x86>
    2280:	464b      	mov	r3, r9
    2282:	4258      	negs	r0, r3
    2284:	2301      	movs	r3, #1
    2286:	4318      	orrs	r0, r3
    2288:	e7e1      	b.n	224e <__ledf2+0x66>
    228a:	9f00      	ldr	r7, [sp, #0]
    228c:	2002      	movs	r0, #2
    228e:	4327      	orrs	r7, r4
    2290:	d1dd      	bne.n	224e <__ledf2+0x66>
    2292:	e7c5      	b.n	2220 <__ledf2+0x38>
    2294:	4667      	mov	r7, ip
    2296:	2002      	movs	r0, #2
    2298:	4317      	orrs	r7, r2
    229a:	d1d8      	bne.n	224e <__ledf2+0x66>
    229c:	e7c3      	b.n	2226 <__ledf2+0x3e>
    229e:	42b1      	cmp	r1, r6
    22a0:	dd04      	ble.n	22ac <__ledf2+0xc4>
    22a2:	464a      	mov	r2, r9
    22a4:	4250      	negs	r0, r2
    22a6:	2301      	movs	r3, #1
    22a8:	4318      	orrs	r0, r3
    22aa:	e7d0      	b.n	224e <__ledf2+0x66>
    22ac:	42b1      	cmp	r1, r6
    22ae:	db07      	blt.n	22c0 <__ledf2+0xd8>
    22b0:	9800      	ldr	r0, [sp, #0]
    22b2:	4560      	cmp	r0, ip
    22b4:	d8e4      	bhi.n	2280 <__ledf2+0x98>
    22b6:	d00a      	beq.n	22ce <__ledf2+0xe6>
    22b8:	9f00      	ldr	r7, [sp, #0]
    22ba:	2000      	movs	r0, #0
    22bc:	4567      	cmp	r7, ip
    22be:	d2c6      	bcs.n	224e <__ledf2+0x66>
    22c0:	464f      	mov	r7, r9
    22c2:	4278      	negs	r0, r7
    22c4:	4178      	adcs	r0, r7
    22c6:	4240      	negs	r0, r0
    22c8:	2301      	movs	r3, #1
    22ca:	4318      	orrs	r0, r3
    22cc:	e7bf      	b.n	224e <__ledf2+0x66>
    22ce:	9a01      	ldr	r2, [sp, #4]
    22d0:	4552      	cmp	r2, sl
    22d2:	d8d5      	bhi.n	2280 <__ledf2+0x98>
    22d4:	9a01      	ldr	r2, [sp, #4]
    22d6:	2000      	movs	r0, #0
    22d8:	4552      	cmp	r2, sl
    22da:	d3f1      	bcc.n	22c0 <__ledf2+0xd8>
    22dc:	e7b7      	b.n	224e <__ledf2+0x66>
    22de:	46c0      	nop			; (mov r8, r8)
    22e0:	000007ff 	.word	0x000007ff

000022e4 <__aeabi_dsub>:
__aeabi_dsub():
    22e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22e6:	465f      	mov	r7, fp
    22e8:	4656      	mov	r6, sl
    22ea:	4644      	mov	r4, r8
    22ec:	464d      	mov	r5, r9
    22ee:	b4f0      	push	{r4, r5, r6, r7}
    22f0:	030c      	lsls	r4, r1, #12
    22f2:	004d      	lsls	r5, r1, #1
    22f4:	0fcf      	lsrs	r7, r1, #31
    22f6:	0a61      	lsrs	r1, r4, #9
    22f8:	0f44      	lsrs	r4, r0, #29
    22fa:	4321      	orrs	r1, r4
    22fc:	00c4      	lsls	r4, r0, #3
    22fe:	0318      	lsls	r0, r3, #12
    2300:	0fde      	lsrs	r6, r3, #31
    2302:	4680      	mov	r8, r0
    2304:	46b4      	mov	ip, r6
    2306:	4646      	mov	r6, r8
    2308:	0058      	lsls	r0, r3, #1
    230a:	0a76      	lsrs	r6, r6, #9
    230c:	0f53      	lsrs	r3, r2, #29
    230e:	4333      	orrs	r3, r6
    2310:	00d6      	lsls	r6, r2, #3
    2312:	4ad1      	ldr	r2, [pc, #836]	; (2658 <__aeabi_dsub+0x374>)
    2314:	0d6d      	lsrs	r5, r5, #21
    2316:	46ba      	mov	sl, r7
    2318:	0d40      	lsrs	r0, r0, #21
    231a:	46b3      	mov	fp, r6
    231c:	4290      	cmp	r0, r2
    231e:	d100      	bne.n	2322 <__aeabi_dsub+0x3e>
    2320:	e0f5      	b.n	250e <__aeabi_dsub+0x22a>
    2322:	4662      	mov	r2, ip
    2324:	2601      	movs	r6, #1
    2326:	4072      	eors	r2, r6
    2328:	4694      	mov	ip, r2
    232a:	4567      	cmp	r7, ip
    232c:	d100      	bne.n	2330 <__aeabi_dsub+0x4c>
    232e:	e0ab      	b.n	2488 <__aeabi_dsub+0x1a4>
    2330:	1a2f      	subs	r7, r5, r0
    2332:	2f00      	cmp	r7, #0
    2334:	dc00      	bgt.n	2338 <__aeabi_dsub+0x54>
    2336:	e111      	b.n	255c <__aeabi_dsub+0x278>
    2338:	2800      	cmp	r0, #0
    233a:	d13e      	bne.n	23ba <__aeabi_dsub+0xd6>
    233c:	4658      	mov	r0, fp
    233e:	4318      	orrs	r0, r3
    2340:	d000      	beq.n	2344 <__aeabi_dsub+0x60>
    2342:	e0f1      	b.n	2528 <__aeabi_dsub+0x244>
    2344:	0760      	lsls	r0, r4, #29
    2346:	d100      	bne.n	234a <__aeabi_dsub+0x66>
    2348:	e097      	b.n	247a <__aeabi_dsub+0x196>
    234a:	230f      	movs	r3, #15
    234c:	4023      	ands	r3, r4
    234e:	2b04      	cmp	r3, #4
    2350:	d100      	bne.n	2354 <__aeabi_dsub+0x70>
    2352:	e122      	b.n	259a <__aeabi_dsub+0x2b6>
    2354:	1d22      	adds	r2, r4, #4
    2356:	42a2      	cmp	r2, r4
    2358:	41a4      	sbcs	r4, r4
    235a:	4264      	negs	r4, r4
    235c:	2380      	movs	r3, #128	; 0x80
    235e:	1909      	adds	r1, r1, r4
    2360:	041b      	lsls	r3, r3, #16
    2362:	2701      	movs	r7, #1
    2364:	4650      	mov	r0, sl
    2366:	400b      	ands	r3, r1
    2368:	4007      	ands	r7, r0
    236a:	1c14      	adds	r4, r2, #0
    236c:	2b00      	cmp	r3, #0
    236e:	d100      	bne.n	2372 <__aeabi_dsub+0x8e>
    2370:	e079      	b.n	2466 <__aeabi_dsub+0x182>
    2372:	4bb9      	ldr	r3, [pc, #740]	; (2658 <__aeabi_dsub+0x374>)
    2374:	3501      	adds	r5, #1
    2376:	429d      	cmp	r5, r3
    2378:	d100      	bne.n	237c <__aeabi_dsub+0x98>
    237a:	e10b      	b.n	2594 <__aeabi_dsub+0x2b0>
    237c:	4bb7      	ldr	r3, [pc, #732]	; (265c <__aeabi_dsub+0x378>)
    237e:	08e4      	lsrs	r4, r4, #3
    2380:	4019      	ands	r1, r3
    2382:	0748      	lsls	r0, r1, #29
    2384:	0249      	lsls	r1, r1, #9
    2386:	4304      	orrs	r4, r0
    2388:	0b0b      	lsrs	r3, r1, #12
    238a:	2000      	movs	r0, #0
    238c:	2100      	movs	r1, #0
    238e:	031b      	lsls	r3, r3, #12
    2390:	0b1a      	lsrs	r2, r3, #12
    2392:	0d0b      	lsrs	r3, r1, #20
    2394:	056d      	lsls	r5, r5, #21
    2396:	051b      	lsls	r3, r3, #20
    2398:	4313      	orrs	r3, r2
    239a:	086a      	lsrs	r2, r5, #1
    239c:	4db0      	ldr	r5, [pc, #704]	; (2660 <__aeabi_dsub+0x37c>)
    239e:	07ff      	lsls	r7, r7, #31
    23a0:	401d      	ands	r5, r3
    23a2:	4315      	orrs	r5, r2
    23a4:	006d      	lsls	r5, r5, #1
    23a6:	086d      	lsrs	r5, r5, #1
    23a8:	1c29      	adds	r1, r5, #0
    23aa:	4339      	orrs	r1, r7
    23ac:	1c20      	adds	r0, r4, #0
    23ae:	bc3c      	pop	{r2, r3, r4, r5}
    23b0:	4690      	mov	r8, r2
    23b2:	4699      	mov	r9, r3
    23b4:	46a2      	mov	sl, r4
    23b6:	46ab      	mov	fp, r5
    23b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23ba:	48a7      	ldr	r0, [pc, #668]	; (2658 <__aeabi_dsub+0x374>)
    23bc:	4285      	cmp	r5, r0
    23be:	d0c1      	beq.n	2344 <__aeabi_dsub+0x60>
    23c0:	2080      	movs	r0, #128	; 0x80
    23c2:	0400      	lsls	r0, r0, #16
    23c4:	4303      	orrs	r3, r0
    23c6:	2f38      	cmp	r7, #56	; 0x38
    23c8:	dd00      	ble.n	23cc <__aeabi_dsub+0xe8>
    23ca:	e0fd      	b.n	25c8 <__aeabi_dsub+0x2e4>
    23cc:	2f1f      	cmp	r7, #31
    23ce:	dd00      	ble.n	23d2 <__aeabi_dsub+0xee>
    23d0:	e131      	b.n	2636 <__aeabi_dsub+0x352>
    23d2:	2020      	movs	r0, #32
    23d4:	1bc0      	subs	r0, r0, r7
    23d6:	1c1a      	adds	r2, r3, #0
    23d8:	465e      	mov	r6, fp
    23da:	4082      	lsls	r2, r0
    23dc:	40fe      	lsrs	r6, r7
    23de:	4332      	orrs	r2, r6
    23e0:	4694      	mov	ip, r2
    23e2:	465a      	mov	r2, fp
    23e4:	4082      	lsls	r2, r0
    23e6:	1c10      	adds	r0, r2, #0
    23e8:	1e42      	subs	r2, r0, #1
    23ea:	4190      	sbcs	r0, r2
    23ec:	40fb      	lsrs	r3, r7
    23ee:	4662      	mov	r2, ip
    23f0:	4302      	orrs	r2, r0
    23f2:	1c1f      	adds	r7, r3, #0
    23f4:	1aa2      	subs	r2, r4, r2
    23f6:	4294      	cmp	r4, r2
    23f8:	41a4      	sbcs	r4, r4
    23fa:	4264      	negs	r4, r4
    23fc:	1bc9      	subs	r1, r1, r7
    23fe:	1b09      	subs	r1, r1, r4
    2400:	1c14      	adds	r4, r2, #0
    2402:	020a      	lsls	r2, r1, #8
    2404:	d59e      	bpl.n	2344 <__aeabi_dsub+0x60>
    2406:	0249      	lsls	r1, r1, #9
    2408:	0a4f      	lsrs	r7, r1, #9
    240a:	2f00      	cmp	r7, #0
    240c:	d100      	bne.n	2410 <__aeabi_dsub+0x12c>
    240e:	e0d6      	b.n	25be <__aeabi_dsub+0x2da>
    2410:	1c38      	adds	r0, r7, #0
    2412:	f000 fb79 	bl	2b08 <__clzsi2>
    2416:	1c02      	adds	r2, r0, #0
    2418:	3a08      	subs	r2, #8
    241a:	2a1f      	cmp	r2, #31
    241c:	dd00      	ble.n	2420 <__aeabi_dsub+0x13c>
    241e:	e0c3      	b.n	25a8 <__aeabi_dsub+0x2c4>
    2420:	2128      	movs	r1, #40	; 0x28
    2422:	1c23      	adds	r3, r4, #0
    2424:	1a09      	subs	r1, r1, r0
    2426:	4097      	lsls	r7, r2
    2428:	40cb      	lsrs	r3, r1
    242a:	431f      	orrs	r7, r3
    242c:	4094      	lsls	r4, r2
    242e:	4295      	cmp	r5, r2
    2430:	dd00      	ble.n	2434 <__aeabi_dsub+0x150>
    2432:	e0c0      	b.n	25b6 <__aeabi_dsub+0x2d2>
    2434:	1b55      	subs	r5, r2, r5
    2436:	1c69      	adds	r1, r5, #1
    2438:	291f      	cmp	r1, #31
    243a:	dd00      	ble.n	243e <__aeabi_dsub+0x15a>
    243c:	e0ea      	b.n	2614 <__aeabi_dsub+0x330>
    243e:	221f      	movs	r2, #31
    2440:	1b55      	subs	r5, r2, r5
    2442:	1c3b      	adds	r3, r7, #0
    2444:	1c22      	adds	r2, r4, #0
    2446:	40ab      	lsls	r3, r5
    2448:	40ca      	lsrs	r2, r1
    244a:	40ac      	lsls	r4, r5
    244c:	1e65      	subs	r5, r4, #1
    244e:	41ac      	sbcs	r4, r5
    2450:	4313      	orrs	r3, r2
    2452:	40cf      	lsrs	r7, r1
    2454:	431c      	orrs	r4, r3
    2456:	1c39      	adds	r1, r7, #0
    2458:	2500      	movs	r5, #0
    245a:	e773      	b.n	2344 <__aeabi_dsub+0x60>
    245c:	2180      	movs	r1, #128	; 0x80
    245e:	4d7e      	ldr	r5, [pc, #504]	; (2658 <__aeabi_dsub+0x374>)
    2460:	2700      	movs	r7, #0
    2462:	03c9      	lsls	r1, r1, #15
    2464:	2400      	movs	r4, #0
    2466:	4b7c      	ldr	r3, [pc, #496]	; (2658 <__aeabi_dsub+0x374>)
    2468:	0748      	lsls	r0, r1, #29
    246a:	08e4      	lsrs	r4, r4, #3
    246c:	4304      	orrs	r4, r0
    246e:	08c9      	lsrs	r1, r1, #3
    2470:	429d      	cmp	r5, r3
    2472:	d050      	beq.n	2516 <__aeabi_dsub+0x232>
    2474:	0309      	lsls	r1, r1, #12
    2476:	0b0b      	lsrs	r3, r1, #12
    2478:	e787      	b.n	238a <__aeabi_dsub+0xa6>
    247a:	2380      	movs	r3, #128	; 0x80
    247c:	041b      	lsls	r3, r3, #16
    247e:	2701      	movs	r7, #1
    2480:	4652      	mov	r2, sl
    2482:	400b      	ands	r3, r1
    2484:	4017      	ands	r7, r2
    2486:	e771      	b.n	236c <__aeabi_dsub+0x88>
    2488:	1a2a      	subs	r2, r5, r0
    248a:	4694      	mov	ip, r2
    248c:	2a00      	cmp	r2, #0
    248e:	dc00      	bgt.n	2492 <__aeabi_dsub+0x1ae>
    2490:	e0a1      	b.n	25d6 <__aeabi_dsub+0x2f2>
    2492:	2800      	cmp	r0, #0
    2494:	d054      	beq.n	2540 <__aeabi_dsub+0x25c>
    2496:	4870      	ldr	r0, [pc, #448]	; (2658 <__aeabi_dsub+0x374>)
    2498:	4285      	cmp	r5, r0
    249a:	d100      	bne.n	249e <__aeabi_dsub+0x1ba>
    249c:	e752      	b.n	2344 <__aeabi_dsub+0x60>
    249e:	2080      	movs	r0, #128	; 0x80
    24a0:	0400      	lsls	r0, r0, #16
    24a2:	4303      	orrs	r3, r0
    24a4:	4660      	mov	r0, ip
    24a6:	2838      	cmp	r0, #56	; 0x38
    24a8:	dd00      	ble.n	24ac <__aeabi_dsub+0x1c8>
    24aa:	e10e      	b.n	26ca <__aeabi_dsub+0x3e6>
    24ac:	281f      	cmp	r0, #31
    24ae:	dd00      	ble.n	24b2 <__aeabi_dsub+0x1ce>
    24b0:	e157      	b.n	2762 <__aeabi_dsub+0x47e>
    24b2:	4662      	mov	r2, ip
    24b4:	2020      	movs	r0, #32
    24b6:	1a80      	subs	r0, r0, r2
    24b8:	1c1e      	adds	r6, r3, #0
    24ba:	4086      	lsls	r6, r0
    24bc:	46b1      	mov	r9, r6
    24be:	465e      	mov	r6, fp
    24c0:	40d6      	lsrs	r6, r2
    24c2:	464a      	mov	r2, r9
    24c4:	4332      	orrs	r2, r6
    24c6:	465e      	mov	r6, fp
    24c8:	4086      	lsls	r6, r0
    24ca:	4690      	mov	r8, r2
    24cc:	1c30      	adds	r0, r6, #0
    24ce:	1e42      	subs	r2, r0, #1
    24d0:	4190      	sbcs	r0, r2
    24d2:	4642      	mov	r2, r8
    24d4:	4302      	orrs	r2, r0
    24d6:	4660      	mov	r0, ip
    24d8:	40c3      	lsrs	r3, r0
    24da:	1912      	adds	r2, r2, r4
    24dc:	42a2      	cmp	r2, r4
    24de:	41a4      	sbcs	r4, r4
    24e0:	4264      	negs	r4, r4
    24e2:	1859      	adds	r1, r3, r1
    24e4:	1909      	adds	r1, r1, r4
    24e6:	1c14      	adds	r4, r2, #0
    24e8:	0208      	lsls	r0, r1, #8
    24ea:	d400      	bmi.n	24ee <__aeabi_dsub+0x20a>
    24ec:	e72a      	b.n	2344 <__aeabi_dsub+0x60>
    24ee:	4b5a      	ldr	r3, [pc, #360]	; (2658 <__aeabi_dsub+0x374>)
    24f0:	3501      	adds	r5, #1
    24f2:	429d      	cmp	r5, r3
    24f4:	d100      	bne.n	24f8 <__aeabi_dsub+0x214>
    24f6:	e131      	b.n	275c <__aeabi_dsub+0x478>
    24f8:	4b58      	ldr	r3, [pc, #352]	; (265c <__aeabi_dsub+0x378>)
    24fa:	0860      	lsrs	r0, r4, #1
    24fc:	4019      	ands	r1, r3
    24fe:	2301      	movs	r3, #1
    2500:	4023      	ands	r3, r4
    2502:	1c1c      	adds	r4, r3, #0
    2504:	4304      	orrs	r4, r0
    2506:	07cb      	lsls	r3, r1, #31
    2508:	431c      	orrs	r4, r3
    250a:	0849      	lsrs	r1, r1, #1
    250c:	e71a      	b.n	2344 <__aeabi_dsub+0x60>
    250e:	431e      	orrs	r6, r3
    2510:	d000      	beq.n	2514 <__aeabi_dsub+0x230>
    2512:	e70a      	b.n	232a <__aeabi_dsub+0x46>
    2514:	e705      	b.n	2322 <__aeabi_dsub+0x3e>
    2516:	1c23      	adds	r3, r4, #0
    2518:	430b      	orrs	r3, r1
    251a:	d03b      	beq.n	2594 <__aeabi_dsub+0x2b0>
    251c:	2380      	movs	r3, #128	; 0x80
    251e:	031b      	lsls	r3, r3, #12
    2520:	430b      	orrs	r3, r1
    2522:	031b      	lsls	r3, r3, #12
    2524:	0b1b      	lsrs	r3, r3, #12
    2526:	e730      	b.n	238a <__aeabi_dsub+0xa6>
    2528:	3f01      	subs	r7, #1
    252a:	2f00      	cmp	r7, #0
    252c:	d16d      	bne.n	260a <__aeabi_dsub+0x326>
    252e:	465e      	mov	r6, fp
    2530:	1ba2      	subs	r2, r4, r6
    2532:	4294      	cmp	r4, r2
    2534:	41a4      	sbcs	r4, r4
    2536:	4264      	negs	r4, r4
    2538:	1ac9      	subs	r1, r1, r3
    253a:	1b09      	subs	r1, r1, r4
    253c:	1c14      	adds	r4, r2, #0
    253e:	e760      	b.n	2402 <__aeabi_dsub+0x11e>
    2540:	4658      	mov	r0, fp
    2542:	4318      	orrs	r0, r3
    2544:	d100      	bne.n	2548 <__aeabi_dsub+0x264>
    2546:	e6fd      	b.n	2344 <__aeabi_dsub+0x60>
    2548:	2601      	movs	r6, #1
    254a:	4276      	negs	r6, r6
    254c:	44b4      	add	ip, r6
    254e:	4660      	mov	r0, ip
    2550:	2800      	cmp	r0, #0
    2552:	d000      	beq.n	2556 <__aeabi_dsub+0x272>
    2554:	e0d0      	b.n	26f8 <__aeabi_dsub+0x414>
    2556:	465e      	mov	r6, fp
    2558:	1932      	adds	r2, r6, r4
    255a:	e7bf      	b.n	24dc <__aeabi_dsub+0x1f8>
    255c:	2f00      	cmp	r7, #0
    255e:	d000      	beq.n	2562 <__aeabi_dsub+0x27e>
    2560:	e080      	b.n	2664 <__aeabi_dsub+0x380>
    2562:	1c68      	adds	r0, r5, #1
    2564:	0540      	lsls	r0, r0, #21
    2566:	0d40      	lsrs	r0, r0, #21
    2568:	2801      	cmp	r0, #1
    256a:	dc00      	bgt.n	256e <__aeabi_dsub+0x28a>
    256c:	e0e8      	b.n	2740 <__aeabi_dsub+0x45c>
    256e:	465a      	mov	r2, fp
    2570:	1aa2      	subs	r2, r4, r2
    2572:	4294      	cmp	r4, r2
    2574:	41bf      	sbcs	r7, r7
    2576:	1ac8      	subs	r0, r1, r3
    2578:	427f      	negs	r7, r7
    257a:	1bc7      	subs	r7, r0, r7
    257c:	023e      	lsls	r6, r7, #8
    257e:	d400      	bmi.n	2582 <__aeabi_dsub+0x29e>
    2580:	e098      	b.n	26b4 <__aeabi_dsub+0x3d0>
    2582:	4658      	mov	r0, fp
    2584:	1b04      	subs	r4, r0, r4
    2586:	45a3      	cmp	fp, r4
    2588:	4192      	sbcs	r2, r2
    258a:	1a59      	subs	r1, r3, r1
    258c:	4252      	negs	r2, r2
    258e:	1a8f      	subs	r7, r1, r2
    2590:	46e2      	mov	sl, ip
    2592:	e73a      	b.n	240a <__aeabi_dsub+0x126>
    2594:	2300      	movs	r3, #0
    2596:	2400      	movs	r4, #0
    2598:	e6f7      	b.n	238a <__aeabi_dsub+0xa6>
    259a:	2380      	movs	r3, #128	; 0x80
    259c:	041b      	lsls	r3, r3, #16
    259e:	2701      	movs	r7, #1
    25a0:	4656      	mov	r6, sl
    25a2:	400b      	ands	r3, r1
    25a4:	4037      	ands	r7, r6
    25a6:	e6e1      	b.n	236c <__aeabi_dsub+0x88>
    25a8:	1c27      	adds	r7, r4, #0
    25aa:	3828      	subs	r0, #40	; 0x28
    25ac:	4087      	lsls	r7, r0
    25ae:	2400      	movs	r4, #0
    25b0:	4295      	cmp	r5, r2
    25b2:	dc00      	bgt.n	25b6 <__aeabi_dsub+0x2d2>
    25b4:	e73e      	b.n	2434 <__aeabi_dsub+0x150>
    25b6:	4929      	ldr	r1, [pc, #164]	; (265c <__aeabi_dsub+0x378>)
    25b8:	1aad      	subs	r5, r5, r2
    25ba:	4039      	ands	r1, r7
    25bc:	e6c2      	b.n	2344 <__aeabi_dsub+0x60>
    25be:	1c20      	adds	r0, r4, #0
    25c0:	f000 faa2 	bl	2b08 <__clzsi2>
    25c4:	3020      	adds	r0, #32
    25c6:	e726      	b.n	2416 <__aeabi_dsub+0x132>
    25c8:	465a      	mov	r2, fp
    25ca:	431a      	orrs	r2, r3
    25cc:	1e53      	subs	r3, r2, #1
    25ce:	419a      	sbcs	r2, r3
    25d0:	b2d2      	uxtb	r2, r2
    25d2:	2700      	movs	r7, #0
    25d4:	e70e      	b.n	23f4 <__aeabi_dsub+0x110>
    25d6:	2a00      	cmp	r2, #0
    25d8:	d000      	beq.n	25dc <__aeabi_dsub+0x2f8>
    25da:	e0de      	b.n	279a <__aeabi_dsub+0x4b6>
    25dc:	1c68      	adds	r0, r5, #1
    25de:	0546      	lsls	r6, r0, #21
    25e0:	0d76      	lsrs	r6, r6, #21
    25e2:	2e01      	cmp	r6, #1
    25e4:	dc00      	bgt.n	25e8 <__aeabi_dsub+0x304>
    25e6:	e090      	b.n	270a <__aeabi_dsub+0x426>
    25e8:	4d1b      	ldr	r5, [pc, #108]	; (2658 <__aeabi_dsub+0x374>)
    25ea:	42a8      	cmp	r0, r5
    25ec:	d100      	bne.n	25f0 <__aeabi_dsub+0x30c>
    25ee:	e0f5      	b.n	27dc <__aeabi_dsub+0x4f8>
    25f0:	465e      	mov	r6, fp
    25f2:	1932      	adds	r2, r6, r4
    25f4:	42a2      	cmp	r2, r4
    25f6:	41a4      	sbcs	r4, r4
    25f8:	4264      	negs	r4, r4
    25fa:	1859      	adds	r1, r3, r1
    25fc:	1909      	adds	r1, r1, r4
    25fe:	07cc      	lsls	r4, r1, #31
    2600:	0852      	lsrs	r2, r2, #1
    2602:	4314      	orrs	r4, r2
    2604:	0849      	lsrs	r1, r1, #1
    2606:	1c05      	adds	r5, r0, #0
    2608:	e69c      	b.n	2344 <__aeabi_dsub+0x60>
    260a:	4813      	ldr	r0, [pc, #76]	; (2658 <__aeabi_dsub+0x374>)
    260c:	4285      	cmp	r5, r0
    260e:	d000      	beq.n	2612 <__aeabi_dsub+0x32e>
    2610:	e6d9      	b.n	23c6 <__aeabi_dsub+0xe2>
    2612:	e697      	b.n	2344 <__aeabi_dsub+0x60>
    2614:	1c2b      	adds	r3, r5, #0
    2616:	3b1f      	subs	r3, #31
    2618:	1c3e      	adds	r6, r7, #0
    261a:	40de      	lsrs	r6, r3
    261c:	1c33      	adds	r3, r6, #0
    261e:	2920      	cmp	r1, #32
    2620:	d06f      	beq.n	2702 <__aeabi_dsub+0x41e>
    2622:	223f      	movs	r2, #63	; 0x3f
    2624:	1b55      	subs	r5, r2, r5
    2626:	40af      	lsls	r7, r5
    2628:	433c      	orrs	r4, r7
    262a:	1e60      	subs	r0, r4, #1
    262c:	4184      	sbcs	r4, r0
    262e:	431c      	orrs	r4, r3
    2630:	2100      	movs	r1, #0
    2632:	2500      	movs	r5, #0
    2634:	e686      	b.n	2344 <__aeabi_dsub+0x60>
    2636:	1c38      	adds	r0, r7, #0
    2638:	3820      	subs	r0, #32
    263a:	1c1e      	adds	r6, r3, #0
    263c:	40c6      	lsrs	r6, r0
    263e:	1c30      	adds	r0, r6, #0
    2640:	2f20      	cmp	r7, #32
    2642:	d060      	beq.n	2706 <__aeabi_dsub+0x422>
    2644:	2240      	movs	r2, #64	; 0x40
    2646:	1bd7      	subs	r7, r2, r7
    2648:	40bb      	lsls	r3, r7
    264a:	465a      	mov	r2, fp
    264c:	431a      	orrs	r2, r3
    264e:	1e53      	subs	r3, r2, #1
    2650:	419a      	sbcs	r2, r3
    2652:	4302      	orrs	r2, r0
    2654:	2700      	movs	r7, #0
    2656:	e6cd      	b.n	23f4 <__aeabi_dsub+0x110>
    2658:	000007ff 	.word	0x000007ff
    265c:	ff7fffff 	.word	0xff7fffff
    2660:	800fffff 	.word	0x800fffff
    2664:	2d00      	cmp	r5, #0
    2666:	d037      	beq.n	26d8 <__aeabi_dsub+0x3f4>
    2668:	4db6      	ldr	r5, [pc, #728]	; (2944 <__aeabi_dsub+0x660>)
    266a:	42a8      	cmp	r0, r5
    266c:	d100      	bne.n	2670 <__aeabi_dsub+0x38c>
    266e:	e08f      	b.n	2790 <__aeabi_dsub+0x4ac>
    2670:	2580      	movs	r5, #128	; 0x80
    2672:	042d      	lsls	r5, r5, #16
    2674:	427f      	negs	r7, r7
    2676:	4329      	orrs	r1, r5
    2678:	2f38      	cmp	r7, #56	; 0x38
    267a:	dd00      	ble.n	267e <__aeabi_dsub+0x39a>
    267c:	e0a8      	b.n	27d0 <__aeabi_dsub+0x4ec>
    267e:	2f1f      	cmp	r7, #31
    2680:	dd00      	ble.n	2684 <__aeabi_dsub+0x3a0>
    2682:	e124      	b.n	28ce <__aeabi_dsub+0x5ea>
    2684:	2520      	movs	r5, #32
    2686:	1bed      	subs	r5, r5, r7
    2688:	1c0e      	adds	r6, r1, #0
    268a:	40ae      	lsls	r6, r5
    268c:	46b0      	mov	r8, r6
    268e:	1c26      	adds	r6, r4, #0
    2690:	40fe      	lsrs	r6, r7
    2692:	4642      	mov	r2, r8
    2694:	40ac      	lsls	r4, r5
    2696:	4316      	orrs	r6, r2
    2698:	1e65      	subs	r5, r4, #1
    269a:	41ac      	sbcs	r4, r5
    269c:	4334      	orrs	r4, r6
    269e:	40f9      	lsrs	r1, r7
    26a0:	465a      	mov	r2, fp
    26a2:	1b14      	subs	r4, r2, r4
    26a4:	45a3      	cmp	fp, r4
    26a6:	4192      	sbcs	r2, r2
    26a8:	1a5b      	subs	r3, r3, r1
    26aa:	4252      	negs	r2, r2
    26ac:	1a99      	subs	r1, r3, r2
    26ae:	1c05      	adds	r5, r0, #0
    26b0:	46e2      	mov	sl, ip
    26b2:	e6a6      	b.n	2402 <__aeabi_dsub+0x11e>
    26b4:	1c13      	adds	r3, r2, #0
    26b6:	433b      	orrs	r3, r7
    26b8:	1c14      	adds	r4, r2, #0
    26ba:	2b00      	cmp	r3, #0
    26bc:	d000      	beq.n	26c0 <__aeabi_dsub+0x3dc>
    26be:	e6a4      	b.n	240a <__aeabi_dsub+0x126>
    26c0:	2700      	movs	r7, #0
    26c2:	2100      	movs	r1, #0
    26c4:	2500      	movs	r5, #0
    26c6:	2400      	movs	r4, #0
    26c8:	e6cd      	b.n	2466 <__aeabi_dsub+0x182>
    26ca:	465a      	mov	r2, fp
    26cc:	431a      	orrs	r2, r3
    26ce:	1e53      	subs	r3, r2, #1
    26d0:	419a      	sbcs	r2, r3
    26d2:	b2d2      	uxtb	r2, r2
    26d4:	2300      	movs	r3, #0
    26d6:	e700      	b.n	24da <__aeabi_dsub+0x1f6>
    26d8:	1c0d      	adds	r5, r1, #0
    26da:	4325      	orrs	r5, r4
    26dc:	d058      	beq.n	2790 <__aeabi_dsub+0x4ac>
    26de:	43ff      	mvns	r7, r7
    26e0:	2f00      	cmp	r7, #0
    26e2:	d151      	bne.n	2788 <__aeabi_dsub+0x4a4>
    26e4:	465a      	mov	r2, fp
    26e6:	1b14      	subs	r4, r2, r4
    26e8:	45a3      	cmp	fp, r4
    26ea:	4192      	sbcs	r2, r2
    26ec:	1a59      	subs	r1, r3, r1
    26ee:	4252      	negs	r2, r2
    26f0:	1a89      	subs	r1, r1, r2
    26f2:	1c05      	adds	r5, r0, #0
    26f4:	46e2      	mov	sl, ip
    26f6:	e684      	b.n	2402 <__aeabi_dsub+0x11e>
    26f8:	4892      	ldr	r0, [pc, #584]	; (2944 <__aeabi_dsub+0x660>)
    26fa:	4285      	cmp	r5, r0
    26fc:	d000      	beq.n	2700 <__aeabi_dsub+0x41c>
    26fe:	e6d1      	b.n	24a4 <__aeabi_dsub+0x1c0>
    2700:	e620      	b.n	2344 <__aeabi_dsub+0x60>
    2702:	2700      	movs	r7, #0
    2704:	e790      	b.n	2628 <__aeabi_dsub+0x344>
    2706:	2300      	movs	r3, #0
    2708:	e79f      	b.n	264a <__aeabi_dsub+0x366>
    270a:	1c08      	adds	r0, r1, #0
    270c:	4320      	orrs	r0, r4
    270e:	2d00      	cmp	r5, #0
    2710:	d000      	beq.n	2714 <__aeabi_dsub+0x430>
    2712:	e0c2      	b.n	289a <__aeabi_dsub+0x5b6>
    2714:	2800      	cmp	r0, #0
    2716:	d100      	bne.n	271a <__aeabi_dsub+0x436>
    2718:	e0ef      	b.n	28fa <__aeabi_dsub+0x616>
    271a:	4658      	mov	r0, fp
    271c:	4318      	orrs	r0, r3
    271e:	d100      	bne.n	2722 <__aeabi_dsub+0x43e>
    2720:	e610      	b.n	2344 <__aeabi_dsub+0x60>
    2722:	4658      	mov	r0, fp
    2724:	1902      	adds	r2, r0, r4
    2726:	42a2      	cmp	r2, r4
    2728:	41a4      	sbcs	r4, r4
    272a:	4264      	negs	r4, r4
    272c:	1859      	adds	r1, r3, r1
    272e:	1909      	adds	r1, r1, r4
    2730:	1c14      	adds	r4, r2, #0
    2732:	020a      	lsls	r2, r1, #8
    2734:	d400      	bmi.n	2738 <__aeabi_dsub+0x454>
    2736:	e605      	b.n	2344 <__aeabi_dsub+0x60>
    2738:	4b83      	ldr	r3, [pc, #524]	; (2948 <__aeabi_dsub+0x664>)
    273a:	2501      	movs	r5, #1
    273c:	4019      	ands	r1, r3
    273e:	e601      	b.n	2344 <__aeabi_dsub+0x60>
    2740:	1c08      	adds	r0, r1, #0
    2742:	4320      	orrs	r0, r4
    2744:	2d00      	cmp	r5, #0
    2746:	d138      	bne.n	27ba <__aeabi_dsub+0x4d6>
    2748:	2800      	cmp	r0, #0
    274a:	d16f      	bne.n	282c <__aeabi_dsub+0x548>
    274c:	4659      	mov	r1, fp
    274e:	4319      	orrs	r1, r3
    2750:	d003      	beq.n	275a <__aeabi_dsub+0x476>
    2752:	1c19      	adds	r1, r3, #0
    2754:	465c      	mov	r4, fp
    2756:	46e2      	mov	sl, ip
    2758:	e5f4      	b.n	2344 <__aeabi_dsub+0x60>
    275a:	2700      	movs	r7, #0
    275c:	2100      	movs	r1, #0
    275e:	2400      	movs	r4, #0
    2760:	e681      	b.n	2466 <__aeabi_dsub+0x182>
    2762:	4660      	mov	r0, ip
    2764:	3820      	subs	r0, #32
    2766:	1c1a      	adds	r2, r3, #0
    2768:	40c2      	lsrs	r2, r0
    276a:	4666      	mov	r6, ip
    276c:	1c10      	adds	r0, r2, #0
    276e:	2e20      	cmp	r6, #32
    2770:	d100      	bne.n	2774 <__aeabi_dsub+0x490>
    2772:	e0aa      	b.n	28ca <__aeabi_dsub+0x5e6>
    2774:	2240      	movs	r2, #64	; 0x40
    2776:	1b92      	subs	r2, r2, r6
    2778:	4093      	lsls	r3, r2
    277a:	465a      	mov	r2, fp
    277c:	431a      	orrs	r2, r3
    277e:	1e53      	subs	r3, r2, #1
    2780:	419a      	sbcs	r2, r3
    2782:	4302      	orrs	r2, r0
    2784:	2300      	movs	r3, #0
    2786:	e6a8      	b.n	24da <__aeabi_dsub+0x1f6>
    2788:	4d6e      	ldr	r5, [pc, #440]	; (2944 <__aeabi_dsub+0x660>)
    278a:	42a8      	cmp	r0, r5
    278c:	d000      	beq.n	2790 <__aeabi_dsub+0x4ac>
    278e:	e773      	b.n	2678 <__aeabi_dsub+0x394>
    2790:	1c19      	adds	r1, r3, #0
    2792:	465c      	mov	r4, fp
    2794:	1c05      	adds	r5, r0, #0
    2796:	46e2      	mov	sl, ip
    2798:	e5d4      	b.n	2344 <__aeabi_dsub+0x60>
    279a:	2d00      	cmp	r5, #0
    279c:	d122      	bne.n	27e4 <__aeabi_dsub+0x500>
    279e:	1c0d      	adds	r5, r1, #0
    27a0:	4325      	orrs	r5, r4
    27a2:	d076      	beq.n	2892 <__aeabi_dsub+0x5ae>
    27a4:	43d5      	mvns	r5, r2
    27a6:	2d00      	cmp	r5, #0
    27a8:	d170      	bne.n	288c <__aeabi_dsub+0x5a8>
    27aa:	445c      	add	r4, fp
    27ac:	455c      	cmp	r4, fp
    27ae:	4192      	sbcs	r2, r2
    27b0:	1859      	adds	r1, r3, r1
    27b2:	4252      	negs	r2, r2
    27b4:	1889      	adds	r1, r1, r2
    27b6:	1c05      	adds	r5, r0, #0
    27b8:	e696      	b.n	24e8 <__aeabi_dsub+0x204>
    27ba:	2800      	cmp	r0, #0
    27bc:	d14c      	bne.n	2858 <__aeabi_dsub+0x574>
    27be:	4659      	mov	r1, fp
    27c0:	4319      	orrs	r1, r3
    27c2:	d100      	bne.n	27c6 <__aeabi_dsub+0x4e2>
    27c4:	e64a      	b.n	245c <__aeabi_dsub+0x178>
    27c6:	1c19      	adds	r1, r3, #0
    27c8:	465c      	mov	r4, fp
    27ca:	46e2      	mov	sl, ip
    27cc:	4d5d      	ldr	r5, [pc, #372]	; (2944 <__aeabi_dsub+0x660>)
    27ce:	e5b9      	b.n	2344 <__aeabi_dsub+0x60>
    27d0:	430c      	orrs	r4, r1
    27d2:	1e61      	subs	r1, r4, #1
    27d4:	418c      	sbcs	r4, r1
    27d6:	b2e4      	uxtb	r4, r4
    27d8:	2100      	movs	r1, #0
    27da:	e761      	b.n	26a0 <__aeabi_dsub+0x3bc>
    27dc:	1c05      	adds	r5, r0, #0
    27de:	2100      	movs	r1, #0
    27e0:	2400      	movs	r4, #0
    27e2:	e640      	b.n	2466 <__aeabi_dsub+0x182>
    27e4:	4d57      	ldr	r5, [pc, #348]	; (2944 <__aeabi_dsub+0x660>)
    27e6:	42a8      	cmp	r0, r5
    27e8:	d053      	beq.n	2892 <__aeabi_dsub+0x5ae>
    27ea:	4255      	negs	r5, r2
    27ec:	2280      	movs	r2, #128	; 0x80
    27ee:	0416      	lsls	r6, r2, #16
    27f0:	4331      	orrs	r1, r6
    27f2:	2d38      	cmp	r5, #56	; 0x38
    27f4:	dc7b      	bgt.n	28ee <__aeabi_dsub+0x60a>
    27f6:	2d1f      	cmp	r5, #31
    27f8:	dd00      	ble.n	27fc <__aeabi_dsub+0x518>
    27fa:	e08c      	b.n	2916 <__aeabi_dsub+0x632>
    27fc:	2220      	movs	r2, #32
    27fe:	1b56      	subs	r6, r2, r5
    2800:	1c0a      	adds	r2, r1, #0
    2802:	46b4      	mov	ip, r6
    2804:	40b2      	lsls	r2, r6
    2806:	1c26      	adds	r6, r4, #0
    2808:	40ee      	lsrs	r6, r5
    280a:	4332      	orrs	r2, r6
    280c:	4690      	mov	r8, r2
    280e:	4662      	mov	r2, ip
    2810:	4094      	lsls	r4, r2
    2812:	1e66      	subs	r6, r4, #1
    2814:	41b4      	sbcs	r4, r6
    2816:	4642      	mov	r2, r8
    2818:	4314      	orrs	r4, r2
    281a:	40e9      	lsrs	r1, r5
    281c:	445c      	add	r4, fp
    281e:	455c      	cmp	r4, fp
    2820:	4192      	sbcs	r2, r2
    2822:	18cb      	adds	r3, r1, r3
    2824:	4252      	negs	r2, r2
    2826:	1899      	adds	r1, r3, r2
    2828:	1c05      	adds	r5, r0, #0
    282a:	e65d      	b.n	24e8 <__aeabi_dsub+0x204>
    282c:	4658      	mov	r0, fp
    282e:	4318      	orrs	r0, r3
    2830:	d100      	bne.n	2834 <__aeabi_dsub+0x550>
    2832:	e587      	b.n	2344 <__aeabi_dsub+0x60>
    2834:	465e      	mov	r6, fp
    2836:	1ba7      	subs	r7, r4, r6
    2838:	42bc      	cmp	r4, r7
    283a:	4192      	sbcs	r2, r2
    283c:	1ac8      	subs	r0, r1, r3
    283e:	4252      	negs	r2, r2
    2840:	1a80      	subs	r0, r0, r2
    2842:	0206      	lsls	r6, r0, #8
    2844:	d560      	bpl.n	2908 <__aeabi_dsub+0x624>
    2846:	4658      	mov	r0, fp
    2848:	1b04      	subs	r4, r0, r4
    284a:	45a3      	cmp	fp, r4
    284c:	4192      	sbcs	r2, r2
    284e:	1a59      	subs	r1, r3, r1
    2850:	4252      	negs	r2, r2
    2852:	1a89      	subs	r1, r1, r2
    2854:	46e2      	mov	sl, ip
    2856:	e575      	b.n	2344 <__aeabi_dsub+0x60>
    2858:	4658      	mov	r0, fp
    285a:	4318      	orrs	r0, r3
    285c:	d033      	beq.n	28c6 <__aeabi_dsub+0x5e2>
    285e:	0748      	lsls	r0, r1, #29
    2860:	08e4      	lsrs	r4, r4, #3
    2862:	4304      	orrs	r4, r0
    2864:	2080      	movs	r0, #128	; 0x80
    2866:	08c9      	lsrs	r1, r1, #3
    2868:	0300      	lsls	r0, r0, #12
    286a:	4201      	tst	r1, r0
    286c:	d008      	beq.n	2880 <__aeabi_dsub+0x59c>
    286e:	08dd      	lsrs	r5, r3, #3
    2870:	4205      	tst	r5, r0
    2872:	d105      	bne.n	2880 <__aeabi_dsub+0x59c>
    2874:	4659      	mov	r1, fp
    2876:	08ca      	lsrs	r2, r1, #3
    2878:	075c      	lsls	r4, r3, #29
    287a:	4314      	orrs	r4, r2
    287c:	1c29      	adds	r1, r5, #0
    287e:	46e2      	mov	sl, ip
    2880:	0f63      	lsrs	r3, r4, #29
    2882:	00c9      	lsls	r1, r1, #3
    2884:	4319      	orrs	r1, r3
    2886:	00e4      	lsls	r4, r4, #3
    2888:	4d2e      	ldr	r5, [pc, #184]	; (2944 <__aeabi_dsub+0x660>)
    288a:	e55b      	b.n	2344 <__aeabi_dsub+0x60>
    288c:	4a2d      	ldr	r2, [pc, #180]	; (2944 <__aeabi_dsub+0x660>)
    288e:	4290      	cmp	r0, r2
    2890:	d1af      	bne.n	27f2 <__aeabi_dsub+0x50e>
    2892:	1c19      	adds	r1, r3, #0
    2894:	465c      	mov	r4, fp
    2896:	1c05      	adds	r5, r0, #0
    2898:	e554      	b.n	2344 <__aeabi_dsub+0x60>
    289a:	2800      	cmp	r0, #0
    289c:	d030      	beq.n	2900 <__aeabi_dsub+0x61c>
    289e:	4658      	mov	r0, fp
    28a0:	4318      	orrs	r0, r3
    28a2:	d010      	beq.n	28c6 <__aeabi_dsub+0x5e2>
    28a4:	2580      	movs	r5, #128	; 0x80
    28a6:	0748      	lsls	r0, r1, #29
    28a8:	08e4      	lsrs	r4, r4, #3
    28aa:	08c9      	lsrs	r1, r1, #3
    28ac:	032d      	lsls	r5, r5, #12
    28ae:	4304      	orrs	r4, r0
    28b0:	4229      	tst	r1, r5
    28b2:	d0e5      	beq.n	2880 <__aeabi_dsub+0x59c>
    28b4:	08d8      	lsrs	r0, r3, #3
    28b6:	4228      	tst	r0, r5
    28b8:	d1e2      	bne.n	2880 <__aeabi_dsub+0x59c>
    28ba:	465d      	mov	r5, fp
    28bc:	08ea      	lsrs	r2, r5, #3
    28be:	075c      	lsls	r4, r3, #29
    28c0:	4314      	orrs	r4, r2
    28c2:	1c01      	adds	r1, r0, #0
    28c4:	e7dc      	b.n	2880 <__aeabi_dsub+0x59c>
    28c6:	4d1f      	ldr	r5, [pc, #124]	; (2944 <__aeabi_dsub+0x660>)
    28c8:	e53c      	b.n	2344 <__aeabi_dsub+0x60>
    28ca:	2300      	movs	r3, #0
    28cc:	e755      	b.n	277a <__aeabi_dsub+0x496>
    28ce:	1c3d      	adds	r5, r7, #0
    28d0:	3d20      	subs	r5, #32
    28d2:	1c0e      	adds	r6, r1, #0
    28d4:	40ee      	lsrs	r6, r5
    28d6:	1c35      	adds	r5, r6, #0
    28d8:	2f20      	cmp	r7, #32
    28da:	d02e      	beq.n	293a <__aeabi_dsub+0x656>
    28dc:	2640      	movs	r6, #64	; 0x40
    28de:	1bf7      	subs	r7, r6, r7
    28e0:	40b9      	lsls	r1, r7
    28e2:	430c      	orrs	r4, r1
    28e4:	1e61      	subs	r1, r4, #1
    28e6:	418c      	sbcs	r4, r1
    28e8:	432c      	orrs	r4, r5
    28ea:	2100      	movs	r1, #0
    28ec:	e6d8      	b.n	26a0 <__aeabi_dsub+0x3bc>
    28ee:	430c      	orrs	r4, r1
    28f0:	1e61      	subs	r1, r4, #1
    28f2:	418c      	sbcs	r4, r1
    28f4:	b2e4      	uxtb	r4, r4
    28f6:	2100      	movs	r1, #0
    28f8:	e790      	b.n	281c <__aeabi_dsub+0x538>
    28fa:	1c19      	adds	r1, r3, #0
    28fc:	465c      	mov	r4, fp
    28fe:	e521      	b.n	2344 <__aeabi_dsub+0x60>
    2900:	1c19      	adds	r1, r3, #0
    2902:	465c      	mov	r4, fp
    2904:	4d0f      	ldr	r5, [pc, #60]	; (2944 <__aeabi_dsub+0x660>)
    2906:	e51d      	b.n	2344 <__aeabi_dsub+0x60>
    2908:	1c03      	adds	r3, r0, #0
    290a:	433b      	orrs	r3, r7
    290c:	d100      	bne.n	2910 <__aeabi_dsub+0x62c>
    290e:	e724      	b.n	275a <__aeabi_dsub+0x476>
    2910:	1c01      	adds	r1, r0, #0
    2912:	1c3c      	adds	r4, r7, #0
    2914:	e516      	b.n	2344 <__aeabi_dsub+0x60>
    2916:	2620      	movs	r6, #32
    2918:	4276      	negs	r6, r6
    291a:	1976      	adds	r6, r6, r5
    291c:	1c0a      	adds	r2, r1, #0
    291e:	40f2      	lsrs	r2, r6
    2920:	4690      	mov	r8, r2
    2922:	2d20      	cmp	r5, #32
    2924:	d00b      	beq.n	293e <__aeabi_dsub+0x65a>
    2926:	2640      	movs	r6, #64	; 0x40
    2928:	1b75      	subs	r5, r6, r5
    292a:	40a9      	lsls	r1, r5
    292c:	430c      	orrs	r4, r1
    292e:	1e61      	subs	r1, r4, #1
    2930:	418c      	sbcs	r4, r1
    2932:	4645      	mov	r5, r8
    2934:	432c      	orrs	r4, r5
    2936:	2100      	movs	r1, #0
    2938:	e770      	b.n	281c <__aeabi_dsub+0x538>
    293a:	2100      	movs	r1, #0
    293c:	e7d1      	b.n	28e2 <__aeabi_dsub+0x5fe>
    293e:	2100      	movs	r1, #0
    2940:	e7f4      	b.n	292c <__aeabi_dsub+0x648>
    2942:	46c0      	nop			; (mov r8, r8)
    2944:	000007ff 	.word	0x000007ff
    2948:	ff7fffff 	.word	0xff7fffff

0000294c <__aeabi_f2d>:
__aeabi_f2d():
    294c:	0043      	lsls	r3, r0, #1
    294e:	0e1b      	lsrs	r3, r3, #24
    2950:	1c5a      	adds	r2, r3, #1
    2952:	0241      	lsls	r1, r0, #9
    2954:	b2d2      	uxtb	r2, r2
    2956:	b570      	push	{r4, r5, r6, lr}
    2958:	0a4c      	lsrs	r4, r1, #9
    295a:	0fc5      	lsrs	r5, r0, #31
    295c:	2a01      	cmp	r2, #1
    295e:	dd17      	ble.n	2990 <__aeabi_f2d+0x44>
    2960:	22e0      	movs	r2, #224	; 0xe0
    2962:	0092      	lsls	r2, r2, #2
    2964:	0764      	lsls	r4, r4, #29
    2966:	0b09      	lsrs	r1, r1, #12
    2968:	1898      	adds	r0, r3, r2
    296a:	2200      	movs	r2, #0
    296c:	2300      	movs	r3, #0
    296e:	0d1e      	lsrs	r6, r3, #20
    2970:	1c22      	adds	r2, r4, #0
    2972:	0534      	lsls	r4, r6, #20
    2974:	430c      	orrs	r4, r1
    2976:	491b      	ldr	r1, [pc, #108]	; (29e4 <__aeabi_f2d+0x98>)
    2978:	0540      	lsls	r0, r0, #21
    297a:	0840      	lsrs	r0, r0, #1
    297c:	4021      	ands	r1, r4
    297e:	4301      	orrs	r1, r0
    2980:	0049      	lsls	r1, r1, #1
    2982:	0849      	lsrs	r1, r1, #1
    2984:	07ed      	lsls	r5, r5, #31
    2986:	1c0b      	adds	r3, r1, #0
    2988:	432b      	orrs	r3, r5
    298a:	1c10      	adds	r0, r2, #0
    298c:	1c19      	adds	r1, r3, #0
    298e:	bd70      	pop	{r4, r5, r6, pc}
    2990:	2b00      	cmp	r3, #0
    2992:	d115      	bne.n	29c0 <__aeabi_f2d+0x74>
    2994:	2c00      	cmp	r4, #0
    2996:	d01c      	beq.n	29d2 <__aeabi_f2d+0x86>
    2998:	1c20      	adds	r0, r4, #0
    299a:	f000 f8b5 	bl	2b08 <__clzsi2>
    299e:	280a      	cmp	r0, #10
    29a0:	dc1a      	bgt.n	29d8 <__aeabi_f2d+0x8c>
    29a2:	210b      	movs	r1, #11
    29a4:	1a09      	subs	r1, r1, r0
    29a6:	1c23      	adds	r3, r4, #0
    29a8:	40cb      	lsrs	r3, r1
    29aa:	1c19      	adds	r1, r3, #0
    29ac:	1c03      	adds	r3, r0, #0
    29ae:	3315      	adds	r3, #21
    29b0:	409c      	lsls	r4, r3
    29b2:	4b0d      	ldr	r3, [pc, #52]	; (29e8 <__aeabi_f2d+0x9c>)
    29b4:	0309      	lsls	r1, r1, #12
    29b6:	1a18      	subs	r0, r3, r0
    29b8:	0540      	lsls	r0, r0, #21
    29ba:	0b09      	lsrs	r1, r1, #12
    29bc:	0d40      	lsrs	r0, r0, #21
    29be:	e7d4      	b.n	296a <__aeabi_f2d+0x1e>
    29c0:	2c00      	cmp	r4, #0
    29c2:	d003      	beq.n	29cc <__aeabi_f2d+0x80>
    29c4:	0764      	lsls	r4, r4, #29
    29c6:	0b09      	lsrs	r1, r1, #12
    29c8:	4808      	ldr	r0, [pc, #32]	; (29ec <__aeabi_f2d+0xa0>)
    29ca:	e7ce      	b.n	296a <__aeabi_f2d+0x1e>
    29cc:	4807      	ldr	r0, [pc, #28]	; (29ec <__aeabi_f2d+0xa0>)
    29ce:	2100      	movs	r1, #0
    29d0:	e7cb      	b.n	296a <__aeabi_f2d+0x1e>
    29d2:	2000      	movs	r0, #0
    29d4:	2100      	movs	r1, #0
    29d6:	e7c8      	b.n	296a <__aeabi_f2d+0x1e>
    29d8:	1c01      	adds	r1, r0, #0
    29da:	390b      	subs	r1, #11
    29dc:	408c      	lsls	r4, r1
    29de:	1c21      	adds	r1, r4, #0
    29e0:	2400      	movs	r4, #0
    29e2:	e7e6      	b.n	29b2 <__aeabi_f2d+0x66>
    29e4:	800fffff 	.word	0x800fffff
    29e8:	00000389 	.word	0x00000389
    29ec:	000007ff 	.word	0x000007ff

000029f0 <__aeabi_d2f>:
__aeabi_d2f():
    29f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    29f2:	004b      	lsls	r3, r1, #1
    29f4:	030d      	lsls	r5, r1, #12
    29f6:	0f42      	lsrs	r2, r0, #29
    29f8:	0d5b      	lsrs	r3, r3, #21
    29fa:	0a6d      	lsrs	r5, r5, #9
    29fc:	4315      	orrs	r5, r2
    29fe:	1c5a      	adds	r2, r3, #1
    2a00:	0552      	lsls	r2, r2, #21
    2a02:	0fcc      	lsrs	r4, r1, #31
    2a04:	00c6      	lsls	r6, r0, #3
    2a06:	0d52      	lsrs	r2, r2, #21
    2a08:	2a01      	cmp	r2, #1
    2a0a:	dd27      	ble.n	2a5c <__aeabi_d2f+0x6c>
    2a0c:	4f39      	ldr	r7, [pc, #228]	; (2af4 <__aeabi_d2f+0x104>)
    2a0e:	19da      	adds	r2, r3, r7
    2a10:	2afe      	cmp	r2, #254	; 0xfe
    2a12:	dc1a      	bgt.n	2a4a <__aeabi_d2f+0x5a>
    2a14:	2a00      	cmp	r2, #0
    2a16:	dd35      	ble.n	2a84 <__aeabi_d2f+0x94>
    2a18:	0180      	lsls	r0, r0, #6
    2a1a:	00ed      	lsls	r5, r5, #3
    2a1c:	1e43      	subs	r3, r0, #1
    2a1e:	4198      	sbcs	r0, r3
    2a20:	4328      	orrs	r0, r5
    2a22:	0f76      	lsrs	r6, r6, #29
    2a24:	4330      	orrs	r0, r6
    2a26:	0743      	lsls	r3, r0, #29
    2a28:	d004      	beq.n	2a34 <__aeabi_d2f+0x44>
    2a2a:	230f      	movs	r3, #15
    2a2c:	4003      	ands	r3, r0
    2a2e:	2b04      	cmp	r3, #4
    2a30:	d000      	beq.n	2a34 <__aeabi_d2f+0x44>
    2a32:	3004      	adds	r0, #4
    2a34:	2180      	movs	r1, #128	; 0x80
    2a36:	04c9      	lsls	r1, r1, #19
    2a38:	4001      	ands	r1, r0
    2a3a:	d027      	beq.n	2a8c <__aeabi_d2f+0x9c>
    2a3c:	3201      	adds	r2, #1
    2a3e:	2aff      	cmp	r2, #255	; 0xff
    2a40:	d01d      	beq.n	2a7e <__aeabi_d2f+0x8e>
    2a42:	0183      	lsls	r3, r0, #6
    2a44:	0a5b      	lsrs	r3, r3, #9
    2a46:	b2d1      	uxtb	r1, r2
    2a48:	e001      	b.n	2a4e <__aeabi_d2f+0x5e>
    2a4a:	21ff      	movs	r1, #255	; 0xff
    2a4c:	2300      	movs	r3, #0
    2a4e:	0258      	lsls	r0, r3, #9
    2a50:	05c9      	lsls	r1, r1, #23
    2a52:	0a40      	lsrs	r0, r0, #9
    2a54:	07e4      	lsls	r4, r4, #31
    2a56:	4308      	orrs	r0, r1
    2a58:	4320      	orrs	r0, r4
    2a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a5c:	2b00      	cmp	r3, #0
    2a5e:	d106      	bne.n	2a6e <__aeabi_d2f+0x7e>
    2a60:	4335      	orrs	r5, r6
    2a62:	d111      	bne.n	2a88 <__aeabi_d2f+0x98>
    2a64:	2100      	movs	r1, #0
    2a66:	2000      	movs	r0, #0
    2a68:	0243      	lsls	r3, r0, #9
    2a6a:	0a5b      	lsrs	r3, r3, #9
    2a6c:	e7ef      	b.n	2a4e <__aeabi_d2f+0x5e>
    2a6e:	432e      	orrs	r6, r5
    2a70:	d0eb      	beq.n	2a4a <__aeabi_d2f+0x5a>
    2a72:	2080      	movs	r0, #128	; 0x80
    2a74:	00ed      	lsls	r5, r5, #3
    2a76:	0480      	lsls	r0, r0, #18
    2a78:	4328      	orrs	r0, r5
    2a7a:	22ff      	movs	r2, #255	; 0xff
    2a7c:	e7d3      	b.n	2a26 <__aeabi_d2f+0x36>
    2a7e:	21ff      	movs	r1, #255	; 0xff
    2a80:	2300      	movs	r3, #0
    2a82:	e7e4      	b.n	2a4e <__aeabi_d2f+0x5e>
    2a84:	3217      	adds	r2, #23
    2a86:	da0d      	bge.n	2aa4 <__aeabi_d2f+0xb4>
    2a88:	2005      	movs	r0, #5
    2a8a:	2200      	movs	r2, #0
    2a8c:	08c0      	lsrs	r0, r0, #3
    2a8e:	b2d1      	uxtb	r1, r2
    2a90:	2aff      	cmp	r2, #255	; 0xff
    2a92:	d1e9      	bne.n	2a68 <__aeabi_d2f+0x78>
    2a94:	2800      	cmp	r0, #0
    2a96:	d0d9      	beq.n	2a4c <__aeabi_d2f+0x5c>
    2a98:	2380      	movs	r3, #128	; 0x80
    2a9a:	03db      	lsls	r3, r3, #15
    2a9c:	4303      	orrs	r3, r0
    2a9e:	025b      	lsls	r3, r3, #9
    2aa0:	0a5b      	lsrs	r3, r3, #9
    2aa2:	e7d4      	b.n	2a4e <__aeabi_d2f+0x5e>
    2aa4:	2280      	movs	r2, #128	; 0x80
    2aa6:	4914      	ldr	r1, [pc, #80]	; (2af8 <__aeabi_d2f+0x108>)
    2aa8:	0412      	lsls	r2, r2, #16
    2aaa:	4315      	orrs	r5, r2
    2aac:	1ac9      	subs	r1, r1, r3
    2aae:	291f      	cmp	r1, #31
    2ab0:	dc0d      	bgt.n	2ace <__aeabi_d2f+0xde>
    2ab2:	4a12      	ldr	r2, [pc, #72]	; (2afc <__aeabi_d2f+0x10c>)
    2ab4:	1c37      	adds	r7, r6, #0
    2ab6:	189b      	adds	r3, r3, r2
    2ab8:	1c28      	adds	r0, r5, #0
    2aba:	409f      	lsls	r7, r3
    2abc:	4098      	lsls	r0, r3
    2abe:	1c3b      	adds	r3, r7, #0
    2ac0:	1e5a      	subs	r2, r3, #1
    2ac2:	4193      	sbcs	r3, r2
    2ac4:	4318      	orrs	r0, r3
    2ac6:	40ce      	lsrs	r6, r1
    2ac8:	4330      	orrs	r0, r6
    2aca:	2200      	movs	r2, #0
    2acc:	e7ab      	b.n	2a26 <__aeabi_d2f+0x36>
    2ace:	4f0c      	ldr	r7, [pc, #48]	; (2b00 <__aeabi_d2f+0x110>)
    2ad0:	1c2a      	adds	r2, r5, #0
    2ad2:	1aff      	subs	r7, r7, r3
    2ad4:	40fa      	lsrs	r2, r7
    2ad6:	1c17      	adds	r7, r2, #0
    2ad8:	2920      	cmp	r1, #32
    2ada:	d009      	beq.n	2af0 <__aeabi_d2f+0x100>
    2adc:	4a09      	ldr	r2, [pc, #36]	; (2b04 <__aeabi_d2f+0x114>)
    2ade:	1898      	adds	r0, r3, r2
    2ae0:	4085      	lsls	r5, r0
    2ae2:	1c28      	adds	r0, r5, #0
    2ae4:	4330      	orrs	r0, r6
    2ae6:	1e46      	subs	r6, r0, #1
    2ae8:	41b0      	sbcs	r0, r6
    2aea:	4338      	orrs	r0, r7
    2aec:	2200      	movs	r2, #0
    2aee:	e79a      	b.n	2a26 <__aeabi_d2f+0x36>
    2af0:	2000      	movs	r0, #0
    2af2:	e7f7      	b.n	2ae4 <__aeabi_d2f+0xf4>
    2af4:	fffffc80 	.word	0xfffffc80
    2af8:	0000039e 	.word	0x0000039e
    2afc:	fffffc82 	.word	0xfffffc82
    2b00:	0000037e 	.word	0x0000037e
    2b04:	fffffca2 	.word	0xfffffca2

00002b08 <__clzsi2>:
__clzsi2():
    2b08:	211c      	movs	r1, #28
    2b0a:	2301      	movs	r3, #1
    2b0c:	041b      	lsls	r3, r3, #16
    2b0e:	4298      	cmp	r0, r3
    2b10:	d301      	bcc.n	2b16 <__clzsi2+0xe>
    2b12:	0c00      	lsrs	r0, r0, #16
    2b14:	3910      	subs	r1, #16
    2b16:	0a1b      	lsrs	r3, r3, #8
    2b18:	4298      	cmp	r0, r3
    2b1a:	d301      	bcc.n	2b20 <__clzsi2+0x18>
    2b1c:	0a00      	lsrs	r0, r0, #8
    2b1e:	3908      	subs	r1, #8
    2b20:	091b      	lsrs	r3, r3, #4
    2b22:	4298      	cmp	r0, r3
    2b24:	d301      	bcc.n	2b2a <__clzsi2+0x22>
    2b26:	0900      	lsrs	r0, r0, #4
    2b28:	3904      	subs	r1, #4
    2b2a:	a202      	add	r2, pc, #8	; (adr r2, 2b34 <__clzsi2+0x2c>)
    2b2c:	5c10      	ldrb	r0, [r2, r0]
    2b2e:	1840      	adds	r0, r0, r1
    2b30:	4770      	bx	lr
    2b32:	46c0      	nop			; (mov r8, r8)
    2b34:	02020304 	.word	0x02020304
    2b38:	01010101 	.word	0x01010101
	...

00002b44 <FTM_OnCounterRestart>:
FTM_OnCounterRestart():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:53
    PORTA_PCR4 |= PORT_PCR_MUX(01) | PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;
	return;
}

void FTM_OnCounterRestart(LDD_TUserData *UserDataPtr)
{
    2b44:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:60
	// read function and indirectly the fusion and magnetic calibration functions which
	// are software locked to the sensor read process

	// always enable the sensor read task
	// update time stamp counter
	mqxglobals.FTMTimestamp += (uint32)mqxglobals.FTMReload;
    2b46:	4805      	ldr	r0, [pc, #20]	; (2b5c <FTM_OnCounterRestart+0x18>)
    2b48:	236c      	movs	r3, #108	; 0x6c
    2b4a:	5ac3      	ldrh	r3, [r0, r3]
    2b4c:	6f02      	ldr	r2, [r0, #112]	; 0x70
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:63
	// enable the (typically 200Hz) sensor read event FSL_SAMPLING_EVENT
	// with a mask of 1 (least significant bit set)
	_lwevent_set(&(mqxglobals.SamplingEventStruct), 1);
    2b4e:	2101      	movs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:60
	// read function and indirectly the fusion and magnetic calibration functions which
	// are software locked to the sensor read process

	// always enable the sensor read task
	// update time stamp counter
	mqxglobals.FTMTimestamp += (uint32)mqxglobals.FTMReload;
    2b50:	189b      	adds	r3, r3, r2
    2b52:	6703      	str	r3, [r0, #112]	; 0x70
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:63
	// enable the (typically 200Hz) sensor read event FSL_SAMPLING_EVENT
	// with a mask of 1 (least significant bit set)
	_lwevent_set(&(mqxglobals.SamplingEventStruct), 1);
    2b54:	f00c fab2 	bl	f0bc <_lwevent_set>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:66

	return;
}
    2b58:	bd08      	pop	{r3, pc}
    2b5a:	46c0      	nop			; (mov r8, r8)
    2b5c:	1fffe3fc 	.word	0x1fffe3fc

00002b60 <UART_OnBlockSent>:
UART_OnBlockSent():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:73

void UART_OnBlockSent(LDD_TUserData *UserDataPtr)
{
	// return with no action
	return;
}
    2b60:	4770      	bx	lr
    2b62:	46c0      	nop			; (mov r8, r8)

00002b64 <I2C_OnMasterBlockSent>:
I2C_OnMasterBlockSent():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:78

void I2C_OnMasterBlockSent(LDD_TUserData *UserDataPtr)
{
	// set the I2C data sent flag
	mqxglobals.I2C_Status |= I2C_SENT_FLAG;
    2b64:	4a03      	ldr	r2, [pc, #12]	; (2b74 <I2C_OnMasterBlockSent+0x10>)
    2b66:	2374      	movs	r3, #116	; 0x74
    2b68:	5cd0      	ldrb	r0, [r2, r3]
    2b6a:	2101      	movs	r1, #1
    2b6c:	4301      	orrs	r1, r0
    2b6e:	54d1      	strb	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:81

	return;
}
    2b70:	4770      	bx	lr
    2b72:	46c0      	nop			; (mov r8, r8)
    2b74:	1fffe3fc 	.word	0x1fffe3fc

00002b78 <I2C_OnMasterBlockReceived>:
I2C_OnMasterBlockReceived():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:87


void I2C_OnMasterBlockReceived(LDD_TUserData *UserDataPtr)
{
	// set the I2C data received flag
	mqxglobals.I2C_Status |= I2C_RCVD_FLAG;
    2b78:	4a03      	ldr	r2, [pc, #12]	; (2b88 <I2C_OnMasterBlockReceived+0x10>)
    2b7a:	2374      	movs	r3, #116	; 0x74
    2b7c:	5cd0      	ldrb	r0, [r2, r3]
    2b7e:	2102      	movs	r1, #2
    2b80:	4301      	orrs	r1, r0
    2b82:	54d1      	strb	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:90

	return;
}
    2b84:	4770      	bx	lr
    2b86:	46c0      	nop			; (mov r8, r8)
    2b88:	1fffe3fc 	.word	0x1fffe3fc

00002b8c <UART_OnTxComplete>:
UART_OnTxComplete():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:104
{
#ifdef DEEPSLEEP
	SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK; // Enable full STOP mode
#endif
	return;
}
    2b8c:	4770      	bx	lr
    2b8e:	46c0      	nop			; (mov r8, r8)

00002b90 <UART_OnBlockReceived>:
UART_OnBlockReceived():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:107

void UART_OnBlockReceived(LDD_TUserData *UserDataPtr)
{
    2b90:	b510      	push	{r4, lr}
    2b92:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:109
	UART_Desc *ptr = (UART_Desc*)UserDataPtr;
	RNG1_Put(ptr->rxChar);
    2b94:	7900      	ldrb	r0, [r0, #4]
    2b96:	f00d fe9f 	bl	108d8 <RNG1_Put>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:110
	UART_ReceiveBlock(ptr->handle, (LDD_TData *)&(ptr->rxChar), sizeof(ptr->rxChar));
    2b9a:	1c21      	adds	r1, r4, #0
    2b9c:	c901      	ldmia	r1!, {r0}
    2b9e:	2201      	movs	r2, #1
    2ba0:	f00e f8f0 	bl	10d84 <UART_ReceiveBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/Events.c:111
}
    2ba4:	bd10      	pop	{r4, pc}
    2ba6:	46c0      	nop			; (mov r8, r8)

00002ba8 <fasin_deg>:
fasin_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:43
// and returns -90 <= angle <= 90 deg
// maximum error is 10.29E-6 deg
float fasin_deg(float x)
{
	// for robustness, check for invalid argument
	if (x >= 1.0F) return 90.0F;
    2ba8:	21fe      	movs	r1, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:41

// function returns an approximation to angle(deg)=asin(x) for x in the range -1 <= x <= 1
// and returns -90 <= angle <= 90 deg
// maximum error is 10.29E-6 deg
float fasin_deg(float x)
{
    2baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:43
	// for robustness, check for invalid argument
	if (x >= 1.0F) return 90.0F;
    2bac:	0589      	lsls	r1, r1, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:41

// function returns an approximation to angle(deg)=asin(x) for x in the range -1 <= x <= 1
// and returns -90 <= angle <= 90 deg
// maximum error is 10.29E-6 deg
float fasin_deg(float x)
{
    2bae:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:43
	// for robustness, check for invalid argument
	if (x >= 1.0F) return 90.0F;
    2bb0:	f7fd fd96 	bl	6e0 <__aeabi_fcmpge>
    2bb4:	2800      	cmp	r0, #0
    2bb6:	d001      	beq.n	2bbc <fasin_deg+0x14>
    2bb8:	4847      	ldr	r0, [pc, #284]	; (2cd8 <fasin_deg+0x130>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:49
	if (x <= -1.0F) return -90.0F;

	// call the atan which will return an angle in the correct range -90 to 90 deg
	// this line cannot fail from division by zero or negative square root since |x| < 1
	return (fatan_deg(x / sqrtf(1.0F - x * x)));
}
    2bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:44
// maximum error is 10.29E-6 deg
float fasin_deg(float x)
{
	// for robustness, check for invalid argument
	if (x >= 1.0F) return 90.0F;
	if (x <= -1.0F) return -90.0F;
    2bbc:	1c20      	adds	r0, r4, #0
    2bbe:	4947      	ldr	r1, [pc, #284]	; (2cdc <fasin_deg+0x134>)
    2bc0:	f7fd fd7a 	bl	6b8 <__aeabi_fcmple>
    2bc4:	2800      	cmp	r0, #0
    2bc6:	d16a      	bne.n	2c9e <fasin_deg+0xf6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:48

	// call the atan which will return an angle in the correct range -90 to 90 deg
	// this line cannot fail from division by zero or negative square root since |x| < 1
	return (fatan_deg(x / sqrtf(1.0F - x * x)));
    2bc8:	1c21      	adds	r1, r4, #0
    2bca:	1c20      	adds	r0, r4, #0
    2bcc:	f7fe f8e2 	bl	d94 <__aeabi_fmul>
    2bd0:	1c01      	adds	r1, r0, #0
    2bd2:	20fe      	movs	r0, #254	; 0xfe
    2bd4:	0580      	lsls	r0, r0, #22
    2bd6:	f7fe fa07 	bl	fe8 <__aeabi_fsub>
    2bda:	f00e fd71 	bl	116c0 <sqrtf>
    2bde:	1c01      	adds	r1, r0, #0
    2be0:	1c20      	adds	r0, r4, #0
    2be2:	f7fd fef3 	bl	9cc <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2be6:	2100      	movs	r1, #0
fasin_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:48
	if (x >= 1.0F) return 90.0F;
	if (x <= -1.0F) return -90.0F;

	// call the atan which will return an angle in the correct range -90 to 90 deg
	// this line cannot fail from division by zero or negative square root since |x| < 1
	return (fatan_deg(x / sqrtf(1.0F - x * x)));
    2be8:	1c04      	adds	r4, r0, #0
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2bea:	f7fd fd5b 	bl	6a4 <__aeabi_fcmplt>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    2bee:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2bf0:	2800      	cmp	r0, #0
    2bf2:	d14d      	bne.n	2c90 <fasin_deg+0xe8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
		x = -x;
		ixisnegative = 1;
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    2bf4:	21fe      	movs	r1, #254	; 0xfe
    2bf6:	1c20      	adds	r0, r4, #0
    2bf8:	0589      	lsls	r1, r1, #22
    2bfa:	f7fd fd67 	bl	6cc <__aeabi_fcmpgt>
    2bfe:	2800      	cmp	r0, #0
    2c00:	d04b      	beq.n	2c9a <fasin_deg+0xf2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	{
		x = 1.0F / x;
    2c02:	20fe      	movs	r0, #254	; 0xfe
    2c04:	1c21      	adds	r1, r4, #0
    2c06:	0580      	lsls	r0, r0, #22
    2c08:	f7fd fee0 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:93
		ixexceeds1 = 1;
    2c0c:	2501      	movs	r5, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
	{
		x = 1.0F / x;
    2c0e:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:101
	// at this point, x is in the range 0 to 1 inclusive
	// map argument onto range -tan(15 deg) to tan(15 deg)
	// using tan(angle-30deg) = (tan(angle)-tan(30deg)) / (1 + tan(angle)tan(30deg))
	// tan(15deg) maps to tan(-15 deg) = -tan(15 deg)
	// 1. maps to (sqrt(3) - 1) / (sqrt(3) + 1) = 2 - sqrt(3) = tan(15 deg)
	if (x > TAN15DEG)
    2c10:	1c20      	adds	r0, r4, #0
    2c12:	4933      	ldr	r1, [pc, #204]	; (2ce0 <fasin_deg+0x138>)
    2c14:	f7fd fd5a 	bl	6cc <__aeabi_fcmpgt>
    2c18:	2800      	cmp	r0, #0
    2c1a:	d042      	beq.n	2ca2 <fasin_deg+0xfa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:103
	{
		x = (x - TAN30DEG)/(1.0F + TAN30DEG * x);
    2c1c:	1c20      	adds	r0, r4, #0
    2c1e:	4931      	ldr	r1, [pc, #196]	; (2ce4 <fasin_deg+0x13c>)
    2c20:	f7fe f9e2 	bl	fe8 <__aeabi_fsub>
    2c24:	492f      	ldr	r1, [pc, #188]	; (2ce4 <fasin_deg+0x13c>)
    2c26:	1c07      	adds	r7, r0, #0
    2c28:	1c20      	adds	r0, r4, #0
    2c2a:	f7fe f8b3 	bl	d94 <__aeabi_fmul>
    2c2e:	21fe      	movs	r1, #254	; 0xfe
    2c30:	0589      	lsls	r1, r1, #22
    2c32:	f7fd fd5f 	bl	6f4 <__aeabi_fadd>
    2c36:	1c01      	adds	r1, r0, #0
    2c38:	1c38      	adds	r0, r7, #0
    2c3a:	f7fd fec7 	bl	9cc <__aeabi_fdiv>
    2c3e:	1c04      	adds	r4, r0, #0
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    2c40:	1c21      	adds	r1, r4, #0
    2c42:	f7fe f8a7 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    2c46:	4928      	ldr	r1, [pc, #160]	; (2ce8 <fasin_deg+0x140>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    2c48:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    2c4a:	f7fe f8a3 	bl	d94 <__aeabi_fmul>
    2c4e:	4927      	ldr	r1, [pc, #156]	; (2cec <fasin_deg+0x144>)
    2c50:	f7fd fd50 	bl	6f4 <__aeabi_fadd>
    2c54:	1c01      	adds	r1, r0, #0
    2c56:	1c20      	adds	r0, r4, #0
    2c58:	f7fe f89c 	bl	d94 <__aeabi_fmul>
    2c5c:	4924      	ldr	r1, [pc, #144]	; (2cf0 <fasin_deg+0x148>)
    2c5e:	1c04      	adds	r4, r0, #0
    2c60:	1c38      	adds	r0, r7, #0
    2c62:	f7fd fd47 	bl	6f4 <__aeabi_fadd>
    2c66:	1c01      	adds	r1, r0, #0
    2c68:	1c20      	adds	r0, r4, #0
    2c6a:	f7fd feaf 	bl	9cc <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:111

	// call the atan estimator to obtain -15 deg <= angle <= 15 deg
	fangledeg = fatan_15deg(x);

	// undo the distortions applied earlier to obtain -90 deg <= angle <= 90 deg
	if (ixmapped) fangledeg += 30.0F;
    2c6e:	4921      	ldr	r1, [pc, #132]	; (2cf4 <fasin_deg+0x14c>)
    2c70:	f7fd fd40 	bl	6f4 <__aeabi_fadd>
    2c74:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:112
	if (ixexceeds1) fangledeg = 90.0F - fangledeg;
    2c76:	2d00      	cmp	r5, #0
    2c78:	d003      	beq.n	2c82 <fasin_deg+0xda>
    2c7a:	4817      	ldr	r0, [pc, #92]	; (2cd8 <fasin_deg+0x130>)
    2c7c:	f7fe f9b4 	bl	fe8 <__aeabi_fsub>
    2c80:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:113
	if (ixisnegative) fangledeg = -fangledeg;
    2c82:	2e00      	cmp	r6, #0
    2c84:	d002      	beq.n	2c8c <fasin_deg+0xe4>
    2c86:	2380      	movs	r3, #128	; 0x80
    2c88:	061b      	lsls	r3, r3, #24
    2c8a:	18c9      	adds	r1, r1, r3
fasin_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:48
	if (x >= 1.0F) return 90.0F;
	if (x <= -1.0F) return -90.0F;

	// call the atan which will return an angle in the correct range -90 to 90 deg
	// this line cannot fail from division by zero or negative square root since |x| < 1
	return (fatan_deg(x / sqrtf(1.0F - x * x)));
    2c8c:	1c08      	adds	r0, r1, #0
    2c8e:	e794      	b.n	2bba <fasin_deg+0x12>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    2c90:	2380      	movs	r3, #128	; 0x80
    2c92:	061b      	lsls	r3, r3, #24
    2c94:	18e4      	adds	r4, r4, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:86
		ixisnegative = 1;
    2c96:	2601      	movs	r6, #1
    2c98:	e7ac      	b.n	2bf4 <fasin_deg+0x4c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    2c9a:	2500      	movs	r5, #0
    2c9c:	e7b8      	b.n	2c10 <fasin_deg+0x68>
fasin_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:44
// maximum error is 10.29E-6 deg
float fasin_deg(float x)
{
	// for robustness, check for invalid argument
	if (x >= 1.0F) return 90.0F;
	if (x <= -1.0F) return -90.0F;
    2c9e:	4816      	ldr	r0, [pc, #88]	; (2cf8 <fasin_deg+0x150>)
    2ca0:	e78b      	b.n	2bba <fasin_deg+0x12>
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    2ca2:	1c21      	adds	r1, r4, #0
    2ca4:	1c20      	adds	r0, r4, #0
    2ca6:	f7fe f875 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    2caa:	490f      	ldr	r1, [pc, #60]	; (2ce8 <fasin_deg+0x140>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    2cac:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    2cae:	f7fe f871 	bl	d94 <__aeabi_fmul>
    2cb2:	490e      	ldr	r1, [pc, #56]	; (2cec <fasin_deg+0x144>)
    2cb4:	f7fd fd1e 	bl	6f4 <__aeabi_fadd>
    2cb8:	1c01      	adds	r1, r0, #0
    2cba:	1c20      	adds	r0, r4, #0
    2cbc:	f7fe f86a 	bl	d94 <__aeabi_fmul>
    2cc0:	490b      	ldr	r1, [pc, #44]	; (2cf0 <fasin_deg+0x148>)
    2cc2:	1c04      	adds	r4, r0, #0
    2cc4:	1c38      	adds	r0, r7, #0
    2cc6:	f7fd fd15 	bl	6f4 <__aeabi_fadd>
    2cca:	1c01      	adds	r1, r0, #0
    2ccc:	1c20      	adds	r0, r4, #0
    2cce:	f7fd fe7d 	bl	9cc <__aeabi_fdiv>
    2cd2:	1c01      	adds	r1, r0, #0
    2cd4:	e7cf      	b.n	2c76 <fasin_deg+0xce>
    2cd6:	46c0      	nop			; (mov r8, r8)
    2cd8:	42b40000 	.word	0x42b40000
    2cdc:	bf800000 	.word	0xbf800000
    2ce0:	3e8930a3 	.word	0x3e8930a3
    2ce4:	3f13cd3a 	.word	0x3f13cd3a
    2ce8:	41c8b20e 	.word	0x41c8b20e
    2cec:	42c149ee 	.word	0x42c149ee
    2cf0:	3fd7e7dc 	.word	0x3fd7e7dc
    2cf4:	41f00000 	.word	0x41f00000
    2cf8:	c2b40000 	.word	0xc2b40000

00002cfc <facos_deg>:
facos_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:57
// and returns 0 <= angle <= 180 deg
// maximum error is 14.67E-6 deg
float facos_deg(float x)
{
	// for robustness, check for invalid arguments
	if (x >= 1.0F) return 0.0F;
    2cfc:	21fe      	movs	r1, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:55

// function returns an approximation to angle(deg)=acos(x) for x in the range -1 <= x <= 1
// and returns 0 <= angle <= 180 deg
// maximum error is 14.67E-6 deg
float facos_deg(float x)
{
    2cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:57
	// for robustness, check for invalid arguments
	if (x >= 1.0F) return 0.0F;
    2d00:	0589      	lsls	r1, r1, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:55

// function returns an approximation to angle(deg)=acos(x) for x in the range -1 <= x <= 1
// and returns 0 <= angle <= 180 deg
// maximum error is 14.67E-6 deg
float facos_deg(float x)
{
    2d02:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:57
	// for robustness, check for invalid arguments
	if (x >= 1.0F) return 0.0F;
    2d04:	f7fd fcec 	bl	6e0 <__aeabi_fcmpge>
    2d08:	2800      	cmp	r0, #0
    2d0a:	d001      	beq.n	2d10 <facos_deg+0x14>
    2d0c:	2000      	movs	r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:65
	// call the atan which will return an angle in the incorrect range -90 to 90 deg
	// these lines cannot fail from division by zero or negative square root
	if (x == 0.0F) return 90.0F;
	if (x > 0.0F) return fatan_deg((sqrtf(1.0F - x * x) / x));
	return 180.0F + fatan_deg((sqrtf(1.0F - x * x) / x));
}
    2d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:58
// maximum error is 14.67E-6 deg
float facos_deg(float x)
{
	// for robustness, check for invalid arguments
	if (x >= 1.0F) return 0.0F;
	if (x <= -1.0F) return 180.0F;
    2d10:	1c20      	adds	r0, r4, #0
    2d12:	4991      	ldr	r1, [pc, #580]	; (2f58 <facos_deg+0x25c>)
    2d14:	f7fd fcd0 	bl	6b8 <__aeabi_fcmple>
    2d18:	2800      	cmp	r0, #0
    2d1a:	d173      	bne.n	2e04 <facos_deg+0x108>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:62

	// call the atan which will return an angle in the incorrect range -90 to 90 deg
	// these lines cannot fail from division by zero or negative square root
	if (x == 0.0F) return 90.0F;
    2d1c:	1c20      	adds	r0, r4, #0
    2d1e:	2100      	movs	r1, #0
    2d20:	f7fd fcba 	bl	698 <__aeabi_fcmpeq>
    2d24:	2800      	cmp	r0, #0
    2d26:	d16b      	bne.n	2e00 <facos_deg+0x104>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:63
	if (x > 0.0F) return fatan_deg((sqrtf(1.0F - x * x) / x));
    2d28:	1c20      	adds	r0, r4, #0
    2d2a:	2100      	movs	r1, #0
    2d2c:	f7fd fcce 	bl	6cc <__aeabi_fcmpgt>
    2d30:	2800      	cmp	r0, #0
    2d32:	d069      	beq.n	2e08 <facos_deg+0x10c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:63 (discriminator 1)
    2d34:	1c21      	adds	r1, r4, #0
    2d36:	1c20      	adds	r0, r4, #0
    2d38:	f7fe f82c 	bl	d94 <__aeabi_fmul>
    2d3c:	1c01      	adds	r1, r0, #0
    2d3e:	20fe      	movs	r0, #254	; 0xfe
    2d40:	0580      	lsls	r0, r0, #22
    2d42:	f7fe f951 	bl	fe8 <__aeabi_fsub>
    2d46:	f00e fcbb 	bl	116c0 <sqrtf>
    2d4a:	1c21      	adds	r1, r4, #0
    2d4c:	f7fd fe3e 	bl	9cc <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 1)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2d50:	2100      	movs	r1, #0
facos_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:63 (discriminator 1)
	if (x <= -1.0F) return 180.0F;

	// call the atan which will return an angle in the incorrect range -90 to 90 deg
	// these lines cannot fail from division by zero or negative square root
	if (x == 0.0F) return 90.0F;
	if (x > 0.0F) return fatan_deg((sqrtf(1.0F - x * x) / x));
    2d52:	1c04      	adds	r4, r0, #0
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 1)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2d54:	f7fd fca6 	bl	6a4 <__aeabi_fcmplt>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80 (discriminator 1)

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    2d58:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 1)
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2d5a:	2800      	cmp	r0, #0
    2d5c:	d000      	beq.n	2d60 <facos_deg+0x64>
    2d5e:	e0f4      	b.n	2f4a <facos_deg+0x24e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
		x = -x;
		ixisnegative = 1;
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    2d60:	21fe      	movs	r1, #254	; 0xfe
    2d62:	1c20      	adds	r0, r4, #0
    2d64:	0589      	lsls	r1, r1, #22
    2d66:	f7fd fcb1 	bl	6cc <__aeabi_fcmpgt>
    2d6a:	2800      	cmp	r0, #0
    2d6c:	d100      	bne.n	2d70 <facos_deg+0x74>
    2d6e:	e0f1      	b.n	2f54 <facos_deg+0x258>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	{
		x = 1.0F / x;
    2d70:	20fe      	movs	r0, #254	; 0xfe
    2d72:	1c21      	adds	r1, r4, #0
    2d74:	0580      	lsls	r0, r0, #22
    2d76:	f7fd fe29 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:93
		ixexceeds1 = 1;
    2d7a:	2501      	movs	r5, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
	{
		x = 1.0F / x;
    2d7c:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:101
	// at this point, x is in the range 0 to 1 inclusive
	// map argument onto range -tan(15 deg) to tan(15 deg)
	// using tan(angle-30deg) = (tan(angle)-tan(30deg)) / (1 + tan(angle)tan(30deg))
	// tan(15deg) maps to tan(-15 deg) = -tan(15 deg)
	// 1. maps to (sqrt(3) - 1) / (sqrt(3) + 1) = 2 - sqrt(3) = tan(15 deg)
	if (x > TAN15DEG)
    2d7e:	1c20      	adds	r0, r4, #0
    2d80:	4976      	ldr	r1, [pc, #472]	; (2f5c <facos_deg+0x260>)
    2d82:	f7fd fca3 	bl	6cc <__aeabi_fcmpgt>
    2d86:	2800      	cmp	r0, #0
    2d88:	d100      	bne.n	2d8c <facos_deg+0x90>
    2d8a:	e0a3      	b.n	2ed4 <facos_deg+0x1d8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:103
	{
		x = (x - TAN30DEG)/(1.0F + TAN30DEG * x);
    2d8c:	1c20      	adds	r0, r4, #0
    2d8e:	4974      	ldr	r1, [pc, #464]	; (2f60 <facos_deg+0x264>)
    2d90:	f7fe f92a 	bl	fe8 <__aeabi_fsub>
    2d94:	4972      	ldr	r1, [pc, #456]	; (2f60 <facos_deg+0x264>)
    2d96:	1c07      	adds	r7, r0, #0
    2d98:	1c20      	adds	r0, r4, #0
    2d9a:	f7fd fffb 	bl	d94 <__aeabi_fmul>
    2d9e:	21fe      	movs	r1, #254	; 0xfe
    2da0:	0589      	lsls	r1, r1, #22
    2da2:	f7fd fca7 	bl	6f4 <__aeabi_fadd>
    2da6:	1c01      	adds	r1, r0, #0
    2da8:	1c38      	adds	r0, r7, #0
    2daa:	f7fd fe0f 	bl	9cc <__aeabi_fdiv>
    2dae:	1c04      	adds	r4, r0, #0
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    2db0:	1c21      	adds	r1, r4, #0
    2db2:	f7fd ffef 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    2db6:	496b      	ldr	r1, [pc, #428]	; (2f64 <facos_deg+0x268>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    2db8:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    2dba:	f7fd ffeb 	bl	d94 <__aeabi_fmul>
    2dbe:	496a      	ldr	r1, [pc, #424]	; (2f68 <facos_deg+0x26c>)
    2dc0:	f7fd fc98 	bl	6f4 <__aeabi_fadd>
    2dc4:	1c01      	adds	r1, r0, #0
    2dc6:	1c20      	adds	r0, r4, #0
    2dc8:	f7fd ffe4 	bl	d94 <__aeabi_fmul>
    2dcc:	4967      	ldr	r1, [pc, #412]	; (2f6c <facos_deg+0x270>)
    2dce:	1c04      	adds	r4, r0, #0
    2dd0:	1c38      	adds	r0, r7, #0
    2dd2:	f7fd fc8f 	bl	6f4 <__aeabi_fadd>
    2dd6:	1c01      	adds	r1, r0, #0
    2dd8:	1c20      	adds	r0, r4, #0
    2dda:	f7fd fdf7 	bl	9cc <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:111

	// call the atan estimator to obtain -15 deg <= angle <= 15 deg
	fangledeg = fatan_15deg(x);

	// undo the distortions applied earlier to obtain -90 deg <= angle <= 90 deg
	if (ixmapped) fangledeg += 30.0F;
    2dde:	4964      	ldr	r1, [pc, #400]	; (2f70 <facos_deg+0x274>)
    2de0:	f7fd fc88 	bl	6f4 <__aeabi_fadd>
    2de4:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:112
	if (ixexceeds1) fangledeg = 90.0F - fangledeg;
    2de6:	2d00      	cmp	r5, #0
    2de8:	d003      	beq.n	2df2 <facos_deg+0xf6>
    2dea:	4862      	ldr	r0, [pc, #392]	; (2f74 <facos_deg+0x278>)
    2dec:	f7fe f8fc 	bl	fe8 <__aeabi_fsub>
    2df0:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:113
	if (ixisnegative) fangledeg = -fangledeg;
    2df2:	2e00      	cmp	r6, #0
    2df4:	d002      	beq.n	2dfc <facos_deg+0x100>
    2df6:	2380      	movs	r3, #128	; 0x80
    2df8:	061b      	lsls	r3, r3, #24
    2dfa:	18c9      	adds	r1, r1, r3
facos_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:63
	if (x <= -1.0F) return 180.0F;

	// call the atan which will return an angle in the incorrect range -90 to 90 deg
	// these lines cannot fail from division by zero or negative square root
	if (x == 0.0F) return 90.0F;
	if (x > 0.0F) return fatan_deg((sqrtf(1.0F - x * x) / x));
    2dfc:	1c08      	adds	r0, r1, #0
    2dfe:	e786      	b.n	2d0e <facos_deg+0x12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:62
	if (x >= 1.0F) return 0.0F;
	if (x <= -1.0F) return 180.0F;

	// call the atan which will return an angle in the incorrect range -90 to 90 deg
	// these lines cannot fail from division by zero or negative square root
	if (x == 0.0F) return 90.0F;
    2e00:	485c      	ldr	r0, [pc, #368]	; (2f74 <facos_deg+0x278>)
    2e02:	e784      	b.n	2d0e <facos_deg+0x12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:58
// maximum error is 14.67E-6 deg
float facos_deg(float x)
{
	// for robustness, check for invalid arguments
	if (x >= 1.0F) return 0.0F;
	if (x <= -1.0F) return 180.0F;
    2e04:	485c      	ldr	r0, [pc, #368]	; (2f78 <facos_deg+0x27c>)
    2e06:	e782      	b.n	2d0e <facos_deg+0x12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:64

	// call the atan which will return an angle in the incorrect range -90 to 90 deg
	// these lines cannot fail from division by zero or negative square root
	if (x == 0.0F) return 90.0F;
	if (x > 0.0F) return fatan_deg((sqrtf(1.0F - x * x) / x));
	return 180.0F + fatan_deg((sqrtf(1.0F - x * x) / x));
    2e08:	1c21      	adds	r1, r4, #0
    2e0a:	1c20      	adds	r0, r4, #0
    2e0c:	f7fd ffc2 	bl	d94 <__aeabi_fmul>
    2e10:	1c01      	adds	r1, r0, #0
    2e12:	20fe      	movs	r0, #254	; 0xfe
    2e14:	0580      	lsls	r0, r0, #22
    2e16:	f7fe f8e7 	bl	fe8 <__aeabi_fsub>
    2e1a:	f00e fc51 	bl	116c0 <sqrtf>
    2e1e:	1c21      	adds	r1, r4, #0
    2e20:	f7fd fdd4 	bl	9cc <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2e24:	2100      	movs	r1, #0
facos_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:64

	// call the atan which will return an angle in the incorrect range -90 to 90 deg
	// these lines cannot fail from division by zero or negative square root
	if (x == 0.0F) return 90.0F;
	if (x > 0.0F) return fatan_deg((sqrtf(1.0F - x * x) / x));
	return 180.0F + fatan_deg((sqrtf(1.0F - x * x) / x));
    2e26:	1c04      	adds	r4, r0, #0
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2e28:	f7fd fc3c 	bl	6a4 <__aeabi_fcmplt>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    2e2c:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2e2e:	2800      	cmp	r0, #0
    2e30:	d16a      	bne.n	2f08 <facos_deg+0x20c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
		x = -x;
		ixisnegative = 1;
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    2e32:	21fe      	movs	r1, #254	; 0xfe
    2e34:	1c20      	adds	r0, r4, #0
    2e36:	0589      	lsls	r1, r1, #22
    2e38:	f7fd fc48 	bl	6cc <__aeabi_fcmpgt>
    2e3c:	2800      	cmp	r0, #0
    2e3e:	d068      	beq.n	2f12 <facos_deg+0x216>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	{
		x = 1.0F / x;
    2e40:	20fe      	movs	r0, #254	; 0xfe
    2e42:	1c21      	adds	r1, r4, #0
    2e44:	0580      	lsls	r0, r0, #22
    2e46:	f7fd fdc1 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:93
		ixexceeds1 = 1;
    2e4a:	2501      	movs	r5, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
	{
		x = 1.0F / x;
    2e4c:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:101
	// at this point, x is in the range 0 to 1 inclusive
	// map argument onto range -tan(15 deg) to tan(15 deg)
	// using tan(angle-30deg) = (tan(angle)-tan(30deg)) / (1 + tan(angle)tan(30deg))
	// tan(15deg) maps to tan(-15 deg) = -tan(15 deg)
	// 1. maps to (sqrt(3) - 1) / (sqrt(3) + 1) = 2 - sqrt(3) = tan(15 deg)
	if (x > TAN15DEG)
    2e4e:	1c20      	adds	r0, r4, #0
    2e50:	4942      	ldr	r1, [pc, #264]	; (2f5c <facos_deg+0x260>)
    2e52:	f7fd fc3b 	bl	6cc <__aeabi_fcmpgt>
    2e56:	2800      	cmp	r0, #0
    2e58:	d05d      	beq.n	2f16 <facos_deg+0x21a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:103
	{
		x = (x - TAN30DEG)/(1.0F + TAN30DEG * x);
    2e5a:	1c20      	adds	r0, r4, #0
    2e5c:	4940      	ldr	r1, [pc, #256]	; (2f60 <facos_deg+0x264>)
    2e5e:	f7fe f8c3 	bl	fe8 <__aeabi_fsub>
    2e62:	493f      	ldr	r1, [pc, #252]	; (2f60 <facos_deg+0x264>)
    2e64:	1c07      	adds	r7, r0, #0
    2e66:	1c20      	adds	r0, r4, #0
    2e68:	f7fd ff94 	bl	d94 <__aeabi_fmul>
    2e6c:	21fe      	movs	r1, #254	; 0xfe
    2e6e:	0589      	lsls	r1, r1, #22
    2e70:	f7fd fc40 	bl	6f4 <__aeabi_fadd>
    2e74:	1c01      	adds	r1, r0, #0
    2e76:	1c38      	adds	r0, r7, #0
    2e78:	f7fd fda8 	bl	9cc <__aeabi_fdiv>
    2e7c:	1c04      	adds	r4, r0, #0
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    2e7e:	1c21      	adds	r1, r4, #0
    2e80:	f7fd ff88 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    2e84:	4937      	ldr	r1, [pc, #220]	; (2f64 <facos_deg+0x268>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    2e86:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    2e88:	f7fd ff84 	bl	d94 <__aeabi_fmul>
    2e8c:	4936      	ldr	r1, [pc, #216]	; (2f68 <facos_deg+0x26c>)
    2e8e:	f7fd fc31 	bl	6f4 <__aeabi_fadd>
    2e92:	1c01      	adds	r1, r0, #0
    2e94:	1c20      	adds	r0, r4, #0
    2e96:	f7fd ff7d 	bl	d94 <__aeabi_fmul>
    2e9a:	4934      	ldr	r1, [pc, #208]	; (2f6c <facos_deg+0x270>)
    2e9c:	1c04      	adds	r4, r0, #0
    2e9e:	1c38      	adds	r0, r7, #0
    2ea0:	f7fd fc28 	bl	6f4 <__aeabi_fadd>
    2ea4:	1c01      	adds	r1, r0, #0
    2ea6:	1c20      	adds	r0, r4, #0
    2ea8:	f7fd fd90 	bl	9cc <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:111

	// call the atan estimator to obtain -15 deg <= angle <= 15 deg
	fangledeg = fatan_15deg(x);

	// undo the distortions applied earlier to obtain -90 deg <= angle <= 90 deg
	if (ixmapped) fangledeg += 30.0F;
    2eac:	4930      	ldr	r1, [pc, #192]	; (2f70 <facos_deg+0x274>)
    2eae:	f7fd fc21 	bl	6f4 <__aeabi_fadd>
    2eb2:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:112
	if (ixexceeds1) fangledeg = 90.0F - fangledeg;
    2eb4:	2d00      	cmp	r5, #0
    2eb6:	d003      	beq.n	2ec0 <facos_deg+0x1c4>
    2eb8:	482e      	ldr	r0, [pc, #184]	; (2f74 <facos_deg+0x278>)
    2eba:	f7fe f895 	bl	fe8 <__aeabi_fsub>
    2ebe:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:113
	if (ixisnegative) fangledeg = -fangledeg;
    2ec0:	2e00      	cmp	r6, #0
    2ec2:	d002      	beq.n	2eca <facos_deg+0x1ce>
    2ec4:	2380      	movs	r3, #128	; 0x80
    2ec6:	061b      	lsls	r3, r3, #24
    2ec8:	18c9      	adds	r1, r1, r3
facos_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:64

	// call the atan which will return an angle in the incorrect range -90 to 90 deg
	// these lines cannot fail from division by zero or negative square root
	if (x == 0.0F) return 90.0F;
	if (x > 0.0F) return fatan_deg((sqrtf(1.0F - x * x) / x));
	return 180.0F + fatan_deg((sqrtf(1.0F - x * x) / x));
    2eca:	1c08      	adds	r0, r1, #0
    2ecc:	492a      	ldr	r1, [pc, #168]	; (2f78 <facos_deg+0x27c>)
    2ece:	f7fd fc11 	bl	6f4 <__aeabi_fadd>
    2ed2:	e71c      	b.n	2d0e <facos_deg+0x12>
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    2ed4:	1c21      	adds	r1, r4, #0
    2ed6:	1c20      	adds	r0, r4, #0
    2ed8:	f7fd ff5c 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    2edc:	4921      	ldr	r1, [pc, #132]	; (2f64 <facos_deg+0x268>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    2ede:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    2ee0:	f7fd ff58 	bl	d94 <__aeabi_fmul>
    2ee4:	4920      	ldr	r1, [pc, #128]	; (2f68 <facos_deg+0x26c>)
    2ee6:	f7fd fc05 	bl	6f4 <__aeabi_fadd>
    2eea:	1c01      	adds	r1, r0, #0
    2eec:	1c20      	adds	r0, r4, #0
    2eee:	f7fd ff51 	bl	d94 <__aeabi_fmul>
    2ef2:	491e      	ldr	r1, [pc, #120]	; (2f6c <facos_deg+0x270>)
    2ef4:	1c04      	adds	r4, r0, #0
    2ef6:	1c38      	adds	r0, r7, #0
    2ef8:	f7fd fbfc 	bl	6f4 <__aeabi_fadd>
    2efc:	1c01      	adds	r1, r0, #0
    2efe:	1c20      	adds	r0, r4, #0
    2f00:	f7fd fd64 	bl	9cc <__aeabi_fdiv>
    2f04:	1c01      	adds	r1, r0, #0
    2f06:	e76e      	b.n	2de6 <facos_deg+0xea>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    2f08:	2380      	movs	r3, #128	; 0x80
    2f0a:	061b      	lsls	r3, r3, #24
    2f0c:	18e4      	adds	r4, r4, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:86
		ixisnegative = 1;
    2f0e:	2601      	movs	r6, #1
    2f10:	e78f      	b.n	2e32 <facos_deg+0x136>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    2f12:	2500      	movs	r5, #0
    2f14:	e79b      	b.n	2e4e <facos_deg+0x152>
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    2f16:	1c21      	adds	r1, r4, #0
    2f18:	1c20      	adds	r0, r4, #0
    2f1a:	f7fd ff3b 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    2f1e:	4911      	ldr	r1, [pc, #68]	; (2f64 <facos_deg+0x268>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    2f20:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    2f22:	f7fd ff37 	bl	d94 <__aeabi_fmul>
    2f26:	4910      	ldr	r1, [pc, #64]	; (2f68 <facos_deg+0x26c>)
    2f28:	f7fd fbe4 	bl	6f4 <__aeabi_fadd>
    2f2c:	1c01      	adds	r1, r0, #0
    2f2e:	1c20      	adds	r0, r4, #0
    2f30:	f7fd ff30 	bl	d94 <__aeabi_fmul>
    2f34:	490d      	ldr	r1, [pc, #52]	; (2f6c <facos_deg+0x270>)
    2f36:	1c04      	adds	r4, r0, #0
    2f38:	1c38      	adds	r0, r7, #0
    2f3a:	f7fd fbdb 	bl	6f4 <__aeabi_fadd>
    2f3e:	1c01      	adds	r1, r0, #0
    2f40:	1c20      	adds	r0, r4, #0
    2f42:	f7fd fd43 	bl	9cc <__aeabi_fdiv>
    2f46:	1c01      	adds	r1, r0, #0
    2f48:	e7b4      	b.n	2eb4 <facos_deg+0x1b8>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    2f4a:	2380      	movs	r3, #128	; 0x80
    2f4c:	061b      	lsls	r3, r3, #24
    2f4e:	18e4      	adds	r4, r4, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:86
		ixisnegative = 1;
    2f50:	2601      	movs	r6, #1
    2f52:	e705      	b.n	2d60 <facos_deg+0x64>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    2f54:	2500      	movs	r5, #0
    2f56:	e712      	b.n	2d7e <facos_deg+0x82>
    2f58:	bf800000 	.word	0xbf800000
    2f5c:	3e8930a3 	.word	0x3e8930a3
    2f60:	3f13cd3a 	.word	0x3f13cd3a
    2f64:	41c8b20e 	.word	0x41c8b20e
    2f68:	42c149ee 	.word	0x42c149ee
    2f6c:	3fd7e7dc 	.word	0x3fd7e7dc
    2f70:	41f00000 	.word	0x41f00000
    2f74:	42b40000 	.word	0x42b40000
    2f78:	43340000 	.word	0x43340000

00002f7c <fatan_deg>:
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:70
}

// function returns angle in range -90 to 90 deg
// maximum error is 9.84E-6 deg
float fatan_deg(float x)
{
    2f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2f7e:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:70
}

// function returns angle in range -90 to 90 deg
// maximum error is 9.84E-6 deg
float fatan_deg(float x)
{
    2f80:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2f82:	f7fd fb8f 	bl	6a4 <__aeabi_fcmplt>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    2f86:	2500      	movs	r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2f88:	2800      	cmp	r0, #0
    2f8a:	d168      	bne.n	305e <fatan_deg+0xe2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
		x = -x;
		ixisnegative = 1;
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    2f8c:	21fe      	movs	r1, #254	; 0xfe
    2f8e:	1c20      	adds	r0, r4, #0
    2f90:	0589      	lsls	r1, r1, #22
    2f92:	f7fd fb9b 	bl	6cc <__aeabi_fcmpgt>
    2f96:	2800      	cmp	r0, #0
    2f98:	d100      	bne.n	2f9c <fatan_deg+0x20>
    2f9a:	e06c      	b.n	3076 <fatan_deg+0xfa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	{
		x = 1.0F / x;
    2f9c:	20fe      	movs	r0, #254	; 0xfe
    2f9e:	1c21      	adds	r1, r4, #0
    2fa0:	0580      	lsls	r0, r0, #22
    2fa2:	f7fd fd13 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:93
		ixexceeds1 = 1;
    2fa6:	2601      	movs	r6, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
	{
		x = 1.0F / x;
    2fa8:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:101
	// at this point, x is in the range 0 to 1 inclusive
	// map argument onto range -tan(15 deg) to tan(15 deg)
	// using tan(angle-30deg) = (tan(angle)-tan(30deg)) / (1 + tan(angle)tan(30deg))
	// tan(15deg) maps to tan(-15 deg) = -tan(15 deg)
	// 1. maps to (sqrt(3) - 1) / (sqrt(3) + 1) = 2 - sqrt(3) = tan(15 deg)
	if (x > TAN15DEG)
    2faa:	1c20      	adds	r0, r4, #0
    2fac:	4933      	ldr	r1, [pc, #204]	; (307c <fatan_deg+0x100>)
    2fae:	f7fd fb8d 	bl	6cc <__aeabi_fcmpgt>
    2fb2:	2800      	cmp	r0, #0
    2fb4:	d039      	beq.n	302a <fatan_deg+0xae>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:103
	{
		x = (x - TAN30DEG)/(1.0F + TAN30DEG * x);
    2fb6:	1c20      	adds	r0, r4, #0
    2fb8:	4931      	ldr	r1, [pc, #196]	; (3080 <fatan_deg+0x104>)
    2fba:	f7fe f815 	bl	fe8 <__aeabi_fsub>
    2fbe:	4930      	ldr	r1, [pc, #192]	; (3080 <fatan_deg+0x104>)
    2fc0:	1c07      	adds	r7, r0, #0
    2fc2:	1c20      	adds	r0, r4, #0
    2fc4:	f7fd fee6 	bl	d94 <__aeabi_fmul>
    2fc8:	21fe      	movs	r1, #254	; 0xfe
    2fca:	0589      	lsls	r1, r1, #22
    2fcc:	f7fd fb92 	bl	6f4 <__aeabi_fadd>
    2fd0:	1c01      	adds	r1, r0, #0
    2fd2:	1c38      	adds	r0, r7, #0
    2fd4:	f7fd fcfa 	bl	9cc <__aeabi_fdiv>
    2fd8:	1c04      	adds	r4, r0, #0
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    2fda:	1c21      	adds	r1, r4, #0
    2fdc:	f7fd feda 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    2fe0:	4928      	ldr	r1, [pc, #160]	; (3084 <fatan_deg+0x108>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    2fe2:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    2fe4:	f7fd fed6 	bl	d94 <__aeabi_fmul>
    2fe8:	4927      	ldr	r1, [pc, #156]	; (3088 <fatan_deg+0x10c>)
    2fea:	f7fd fb83 	bl	6f4 <__aeabi_fadd>
    2fee:	1c01      	adds	r1, r0, #0
    2ff0:	1c20      	adds	r0, r4, #0
    2ff2:	f7fd fecf 	bl	d94 <__aeabi_fmul>
    2ff6:	4925      	ldr	r1, [pc, #148]	; (308c <fatan_deg+0x110>)
    2ff8:	1c04      	adds	r4, r0, #0
    2ffa:	1c38      	adds	r0, r7, #0
    2ffc:	f7fd fb7a 	bl	6f4 <__aeabi_fadd>
    3000:	1c01      	adds	r1, r0, #0
    3002:	1c20      	adds	r0, r4, #0
    3004:	f7fd fce2 	bl	9cc <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:111

	// call the atan estimator to obtain -15 deg <= angle <= 15 deg
	fangledeg = fatan_15deg(x);

	// undo the distortions applied earlier to obtain -90 deg <= angle <= 90 deg
	if (ixmapped) fangledeg += 30.0F;
    3008:	4921      	ldr	r1, [pc, #132]	; (3090 <fatan_deg+0x114>)
    300a:	f7fd fb73 	bl	6f4 <__aeabi_fadd>
    300e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:112
	if (ixexceeds1) fangledeg = 90.0F - fangledeg;
    3010:	2e00      	cmp	r6, #0
    3012:	d003      	beq.n	301c <fatan_deg+0xa0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:112 (discriminator 1)
    3014:	481f      	ldr	r0, [pc, #124]	; (3094 <fatan_deg+0x118>)
    3016:	f7fd ffe7 	bl	fe8 <__aeabi_fsub>
    301a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:113
	if (ixisnegative) fangledeg = -fangledeg;
    301c:	2d00      	cmp	r5, #0
    301e:	d002      	beq.n	3026 <fatan_deg+0xaa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:113 (discriminator 1)
    3020:	2380      	movs	r3, #128	; 0x80
    3022:	061b      	lsls	r3, r3, #24
    3024:	18c9      	adds	r1, r1, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:116
	
	return (fangledeg);
}
    3026:	1c08      	adds	r0, r1, #0
    3028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    302a:	1c21      	adds	r1, r4, #0
    302c:	1c20      	adds	r0, r4, #0
    302e:	f7fd feb1 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    3032:	4914      	ldr	r1, [pc, #80]	; (3084 <fatan_deg+0x108>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    3034:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    3036:	f7fd fead 	bl	d94 <__aeabi_fmul>
    303a:	4913      	ldr	r1, [pc, #76]	; (3088 <fatan_deg+0x10c>)
    303c:	f7fd fb5a 	bl	6f4 <__aeabi_fadd>
    3040:	1c01      	adds	r1, r0, #0
    3042:	1c20      	adds	r0, r4, #0
    3044:	f7fd fea6 	bl	d94 <__aeabi_fmul>
    3048:	4910      	ldr	r1, [pc, #64]	; (308c <fatan_deg+0x110>)
    304a:	1c04      	adds	r4, r0, #0
    304c:	1c38      	adds	r0, r7, #0
    304e:	f7fd fb51 	bl	6f4 <__aeabi_fadd>
    3052:	1c01      	adds	r1, r0, #0
    3054:	1c20      	adds	r0, r4, #0
    3056:	f7fd fcb9 	bl	9cc <__aeabi_fdiv>
    305a:	1c01      	adds	r1, r0, #0
    305c:	e7d8      	b.n	3010 <fatan_deg+0x94>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    305e:	2380      	movs	r3, #128	; 0x80
    3060:	061b      	lsls	r3, r3, #24
    3062:	18e4      	adds	r4, r4, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
		ixisnegative = 1;
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    3064:	21fe      	movs	r1, #254	; 0xfe
    3066:	1c20      	adds	r0, r4, #0
    3068:	0589      	lsls	r1, r1, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:86
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
		ixisnegative = 1;
    306a:	2501      	movs	r5, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    306c:	f7fd fb2e 	bl	6cc <__aeabi_fcmpgt>
    3070:	2800      	cmp	r0, #0
    3072:	d000      	beq.n	3076 <fatan_deg+0xfa>
    3074:	e792      	b.n	2f9c <fatan_deg+0x20>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    3076:	2600      	movs	r6, #0
    3078:	e797      	b.n	2faa <fatan_deg+0x2e>
    307a:	46c0      	nop			; (mov r8, r8)
    307c:	3e8930a3 	.word	0x3e8930a3
    3080:	3f13cd3a 	.word	0x3f13cd3a
    3084:	41c8b20e 	.word	0x41c8b20e
    3088:	42c149ee 	.word	0x42c149ee
    308c:	3fd7e7dc 	.word	0x3fd7e7dc
    3090:	41f00000 	.word	0x41f00000
    3094:	42b40000 	.word	0x42b40000

00003098 <fatan2_deg>:
fatan2_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:121
}

// function returns approximate atan2 angle in range -180 to 180 deg
// maximum error is 14.58E-6 deg
float fatan2_deg(float y, float x)
{
    3098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    309a:	1c05      	adds	r5, r0, #0
    309c:	1c0c      	adds	r4, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:123
	// check for zero x to avoid division by zero
	if (x == 0.0F)
    309e:	1c08      	adds	r0, r1, #0
    30a0:	2100      	movs	r1, #0
    30a2:	f7fd faf9 	bl	698 <__aeabi_fcmpeq>
    30a6:	2800      	cmp	r0, #0
    30a8:	d008      	beq.n	30bc <fatan2_deg+0x24>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:126
	{
		// return 90 deg for positive y
		if (y > 0.0F) return 90.0F;
    30aa:	1c28      	adds	r0, r5, #0
    30ac:	2100      	movs	r1, #0
    30ae:	f7fd fb0d 	bl	6cc <__aeabi_fcmpgt>
    30b2:	2800      	cmp	r0, #0
    30b4:	d100      	bne.n	30b8 <fatan2_deg+0x20>
    30b6:	e0b4      	b.n	3222 <fatan2_deg+0x18a>
    30b8:	48cc      	ldr	r0, [pc, #816]	; (33ec <fatan2_deg+0x354>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:141
	// compute atan2 for quadrant 2 (90 to 180 deg)
	if ((x < 0.0F) && (y > 0.0F)) return (180.0F + fatan_deg(y / x));
	// compute atan2 for quadrant 3 (-180 to -90 deg)
	return (-180.0F + fatan_deg(y / x));

}
    30ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:135
		return 0.0F;
	}
	
	// from here onwards, x is guaranteed to be non-zero
	// compute atan2 for quadrant 1 (0 to 90 deg) and quadrant 4 (-90 to 0 deg)
	if (x > 0.0F) return (fatan_deg(y / x));
    30bc:	1c20      	adds	r0, r4, #0
    30be:	2100      	movs	r1, #0
    30c0:	f7fd fb04 	bl	6cc <__aeabi_fcmpgt>
    30c4:	2800      	cmp	r0, #0
    30c6:	d047      	beq.n	3158 <fatan2_deg+0xc0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:135 (discriminator 1)
    30c8:	1c21      	adds	r1, r4, #0
    30ca:	1c28      	adds	r0, r5, #0
    30cc:	f7fd fc7e 	bl	9cc <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 1)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    30d0:	2100      	movs	r1, #0
fatan2_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:135 (discriminator 1)
		return 0.0F;
	}
	
	// from here onwards, x is guaranteed to be non-zero
	// compute atan2 for quadrant 1 (0 to 90 deg) and quadrant 4 (-90 to 0 deg)
	if (x > 0.0F) return (fatan_deg(y / x));
    30d2:	1c04      	adds	r4, r0, #0
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 1)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    30d4:	f7fd fae6 	bl	6a4 <__aeabi_fcmplt>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80 (discriminator 1)

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    30d8:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 1)
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    30da:	2800      	cmp	r0, #0
    30dc:	d000      	beq.n	30e0 <fatan2_deg+0x48>
    30de:	e0d9      	b.n	3294 <fatan2_deg+0x1fc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
		x = -x;
		ixisnegative = 1;
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    30e0:	21fe      	movs	r1, #254	; 0xfe
    30e2:	1c20      	adds	r0, r4, #0
    30e4:	0589      	lsls	r1, r1, #22
    30e6:	f7fd faf1 	bl	6cc <__aeabi_fcmpgt>
    30ea:	2800      	cmp	r0, #0
    30ec:	d100      	bne.n	30f0 <fatan2_deg+0x58>
    30ee:	e0cf      	b.n	3290 <fatan2_deg+0x1f8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	{
		x = 1.0F / x;
    30f0:	20fe      	movs	r0, #254	; 0xfe
    30f2:	1c21      	adds	r1, r4, #0
    30f4:	0580      	lsls	r0, r0, #22
    30f6:	f7fd fc69 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:93
		ixexceeds1 = 1;
    30fa:	2501      	movs	r5, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
	{
		x = 1.0F / x;
    30fc:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:101
	// at this point, x is in the range 0 to 1 inclusive
	// map argument onto range -tan(15 deg) to tan(15 deg)
	// using tan(angle-30deg) = (tan(angle)-tan(30deg)) / (1 + tan(angle)tan(30deg))
	// tan(15deg) maps to tan(-15 deg) = -tan(15 deg)
	// 1. maps to (sqrt(3) - 1) / (sqrt(3) + 1) = 2 - sqrt(3) = tan(15 deg)
	if (x > TAN15DEG)
    30fe:	1c20      	adds	r0, r4, #0
    3100:	49bb      	ldr	r1, [pc, #748]	; (33f0 <fatan2_deg+0x358>)
    3102:	f7fd fae3 	bl	6cc <__aeabi_fcmpgt>
    3106:	2800      	cmp	r0, #0
    3108:	d000      	beq.n	310c <fatan2_deg+0x74>
    310a:	e093      	b.n	3234 <fatan2_deg+0x19c>
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    310c:	1c21      	adds	r1, r4, #0
    310e:	1c20      	adds	r0, r4, #0
    3110:	f7fd fe40 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    3114:	49b7      	ldr	r1, [pc, #732]	; (33f4 <fatan2_deg+0x35c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    3116:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    3118:	f7fd fe3c 	bl	d94 <__aeabi_fmul>
    311c:	49b6      	ldr	r1, [pc, #728]	; (33f8 <fatan2_deg+0x360>)
    311e:	f7fd fae9 	bl	6f4 <__aeabi_fadd>
    3122:	1c01      	adds	r1, r0, #0
    3124:	1c20      	adds	r0, r4, #0
    3126:	f7fd fe35 	bl	d94 <__aeabi_fmul>
    312a:	49b4      	ldr	r1, [pc, #720]	; (33fc <fatan2_deg+0x364>)
    312c:	1c04      	adds	r4, r0, #0
    312e:	1c38      	adds	r0, r7, #0
    3130:	f7fd fae0 	bl	6f4 <__aeabi_fadd>
    3134:	1c01      	adds	r1, r0, #0
    3136:	1c20      	adds	r0, r4, #0
    3138:	f7fd fc48 	bl	9cc <__aeabi_fdiv>
    313c:	1c01      	adds	r1, r0, #0
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:112
	// call the atan estimator to obtain -15 deg <= angle <= 15 deg
	fangledeg = fatan_15deg(x);

	// undo the distortions applied earlier to obtain -90 deg <= angle <= 90 deg
	if (ixmapped) fangledeg += 30.0F;
	if (ixexceeds1) fangledeg = 90.0F - fangledeg;
    313e:	2d00      	cmp	r5, #0
    3140:	d003      	beq.n	314a <fatan2_deg+0xb2>
    3142:	48aa      	ldr	r0, [pc, #680]	; (33ec <fatan2_deg+0x354>)
    3144:	f7fd ff50 	bl	fe8 <__aeabi_fsub>
    3148:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:113
	if (ixisnegative) fangledeg = -fangledeg;
    314a:	2e00      	cmp	r6, #0
    314c:	d002      	beq.n	3154 <fatan2_deg+0xbc>
    314e:	2380      	movs	r3, #128	; 0x80
    3150:	061b      	lsls	r3, r3, #24
    3152:	18c9      	adds	r1, r1, r3
fatan2_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:135
		return 0.0F;
	}
	
	// from here onwards, x is guaranteed to be non-zero
	// compute atan2 for quadrant 1 (0 to 90 deg) and quadrant 4 (-90 to 0 deg)
	if (x > 0.0F) return (fatan_deg(y / x));
    3154:	1c08      	adds	r0, r1, #0
    3156:	e7b0      	b.n	30ba <fatan2_deg+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:137
	// compute atan2 for quadrant 2 (90 to 180 deg)
	if ((x < 0.0F) && (y > 0.0F)) return (180.0F + fatan_deg(y / x));
    3158:	1c20      	adds	r0, r4, #0
    315a:	2100      	movs	r1, #0
    315c:	f7fd faa2 	bl	6a4 <__aeabi_fcmplt>
    3160:	2800      	cmp	r0, #0
    3162:	d000      	beq.n	3166 <fatan2_deg+0xce>
    3164:	e0b5      	b.n	32d2 <fatan2_deg+0x23a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:139
	// compute atan2 for quadrant 3 (-180 to -90 deg)
	return (-180.0F + fatan_deg(y / x));
    3166:	1c21      	adds	r1, r4, #0
    3168:	1c28      	adds	r0, r5, #0
    316a:	f7fd fc2f 	bl	9cc <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    316e:	2100      	movs	r1, #0
fatan2_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:139
	// compute atan2 for quadrant 1 (0 to 90 deg) and quadrant 4 (-90 to 0 deg)
	if (x > 0.0F) return (fatan_deg(y / x));
	// compute atan2 for quadrant 2 (90 to 180 deg)
	if ((x < 0.0F) && (y > 0.0F)) return (180.0F + fatan_deg(y / x));
	// compute atan2 for quadrant 3 (-180 to -90 deg)
	return (-180.0F + fatan_deg(y / x));
    3170:	1c04      	adds	r4, r0, #0
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    3172:	f7fd fa97 	bl	6a4 <__aeabi_fcmplt>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    3176:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    3178:	2800      	cmp	r0, #0
    317a:	d000      	beq.n	317e <fatan2_deg+0xe6>
    317c:	e110      	b.n	33a0 <fatan2_deg+0x308>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
		x = -x;
		ixisnegative = 1;
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    317e:	21fe      	movs	r1, #254	; 0xfe
    3180:	1c20      	adds	r0, r4, #0
    3182:	0589      	lsls	r1, r1, #22
    3184:	f7fd faa2 	bl	6cc <__aeabi_fcmpgt>
    3188:	2800      	cmp	r0, #0
    318a:	d100      	bne.n	318e <fatan2_deg+0xf6>
    318c:	e106      	b.n	339c <fatan2_deg+0x304>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	{
		x = 1.0F / x;
    318e:	20fe      	movs	r0, #254	; 0xfe
    3190:	1c21      	adds	r1, r4, #0
    3192:	0580      	lsls	r0, r0, #22
    3194:	f7fd fc1a 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:93
		ixexceeds1 = 1;
    3198:	2501      	movs	r5, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
	{
		x = 1.0F / x;
    319a:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:101
	// at this point, x is in the range 0 to 1 inclusive
	// map argument onto range -tan(15 deg) to tan(15 deg)
	// using tan(angle-30deg) = (tan(angle)-tan(30deg)) / (1 + tan(angle)tan(30deg))
	// tan(15deg) maps to tan(-15 deg) = -tan(15 deg)
	// 1. maps to (sqrt(3) - 1) / (sqrt(3) + 1) = 2 - sqrt(3) = tan(15 deg)
	if (x > TAN15DEG)
    319c:	1c20      	adds	r0, r4, #0
    319e:	4994      	ldr	r1, [pc, #592]	; (33f0 <fatan2_deg+0x358>)
    31a0:	f7fd fa94 	bl	6cc <__aeabi_fcmpgt>
    31a4:	2800      	cmp	r0, #0
    31a6:	d07a      	beq.n	329e <fatan2_deg+0x206>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:103
	{
		x = (x - TAN30DEG)/(1.0F + TAN30DEG * x);
    31a8:	1c20      	adds	r0, r4, #0
    31aa:	4995      	ldr	r1, [pc, #596]	; (3400 <fatan2_deg+0x368>)
    31ac:	f7fd ff1c 	bl	fe8 <__aeabi_fsub>
    31b0:	4993      	ldr	r1, [pc, #588]	; (3400 <fatan2_deg+0x368>)
    31b2:	1c07      	adds	r7, r0, #0
    31b4:	1c20      	adds	r0, r4, #0
    31b6:	f7fd fded 	bl	d94 <__aeabi_fmul>
    31ba:	21fe      	movs	r1, #254	; 0xfe
    31bc:	0589      	lsls	r1, r1, #22
    31be:	f7fd fa99 	bl	6f4 <__aeabi_fadd>
    31c2:	1c01      	adds	r1, r0, #0
    31c4:	1c38      	adds	r0, r7, #0
    31c6:	f7fd fc01 	bl	9cc <__aeabi_fdiv>
    31ca:	1c04      	adds	r4, r0, #0
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    31cc:	1c21      	adds	r1, r4, #0
    31ce:	f7fd fde1 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    31d2:	4988      	ldr	r1, [pc, #544]	; (33f4 <fatan2_deg+0x35c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    31d4:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    31d6:	f7fd fddd 	bl	d94 <__aeabi_fmul>
    31da:	4987      	ldr	r1, [pc, #540]	; (33f8 <fatan2_deg+0x360>)
    31dc:	f7fd fa8a 	bl	6f4 <__aeabi_fadd>
    31e0:	1c01      	adds	r1, r0, #0
    31e2:	1c20      	adds	r0, r4, #0
    31e4:	f7fd fdd6 	bl	d94 <__aeabi_fmul>
    31e8:	4984      	ldr	r1, [pc, #528]	; (33fc <fatan2_deg+0x364>)
    31ea:	1c04      	adds	r4, r0, #0
    31ec:	1c38      	adds	r0, r7, #0
    31ee:	f7fd fa81 	bl	6f4 <__aeabi_fadd>
    31f2:	1c01      	adds	r1, r0, #0
    31f4:	1c20      	adds	r0, r4, #0
    31f6:	f7fd fbe9 	bl	9cc <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:111

	// call the atan estimator to obtain -15 deg <= angle <= 15 deg
	fangledeg = fatan_15deg(x);

	// undo the distortions applied earlier to obtain -90 deg <= angle <= 90 deg
	if (ixmapped) fangledeg += 30.0F;
    31fa:	4982      	ldr	r1, [pc, #520]	; (3404 <fatan2_deg+0x36c>)
    31fc:	f7fd fa7a 	bl	6f4 <__aeabi_fadd>
    3200:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:112
	if (ixexceeds1) fangledeg = 90.0F - fangledeg;
    3202:	2d00      	cmp	r5, #0
    3204:	d003      	beq.n	320e <fatan2_deg+0x176>
    3206:	4879      	ldr	r0, [pc, #484]	; (33ec <fatan2_deg+0x354>)
    3208:	f7fd feee 	bl	fe8 <__aeabi_fsub>
    320c:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:113
	if (ixisnegative) fangledeg = -fangledeg;
    320e:	2e00      	cmp	r6, #0
    3210:	d002      	beq.n	3218 <fatan2_deg+0x180>
    3212:	2380      	movs	r3, #128	; 0x80
    3214:	061b      	lsls	r3, r3, #24
    3216:	18c9      	adds	r1, r1, r3
fatan2_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:139
	// compute atan2 for quadrant 1 (0 to 90 deg) and quadrant 4 (-90 to 0 deg)
	if (x > 0.0F) return (fatan_deg(y / x));
	// compute atan2 for quadrant 2 (90 to 180 deg)
	if ((x < 0.0F) && (y > 0.0F)) return (180.0F + fatan_deg(y / x));
	// compute atan2 for quadrant 3 (-180 to -90 deg)
	return (-180.0F + fatan_deg(y / x));
    3218:	1c08      	adds	r0, r1, #0
    321a:	497b      	ldr	r1, [pc, #492]	; (3408 <fatan2_deg+0x370>)
    321c:	f7fd fee4 	bl	fe8 <__aeabi_fsub>
    3220:	e74b      	b.n	30ba <fatan2_deg+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:128
	if (x == 0.0F)
	{
		// return 90 deg for positive y
		if (y > 0.0F) return 90.0F;
		// return -90 deg for negative y
		if (y < 0.0F) return -90.0F;
    3222:	1c28      	adds	r0, r5, #0
    3224:	2100      	movs	r1, #0
    3226:	f7fd fa3d 	bl	6a4 <__aeabi_fcmplt>
    322a:	2800      	cmp	r0, #0
    322c:	d000      	beq.n	3230 <fatan2_deg+0x198>
    322e:	e0b3      	b.n	3398 <fatan2_deg+0x300>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:130
		// otherwise y= 0.0 and return 0 deg (invalid arguments)
		return 0.0F;
    3230:	2000      	movs	r0, #0
    3232:	e742      	b.n	30ba <fatan2_deg+0x22>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:103
	// using tan(angle-30deg) = (tan(angle)-tan(30deg)) / (1 + tan(angle)tan(30deg))
	// tan(15deg) maps to tan(-15 deg) = -tan(15 deg)
	// 1. maps to (sqrt(3) - 1) / (sqrt(3) + 1) = 2 - sqrt(3) = tan(15 deg)
	if (x > TAN15DEG)
	{
		x = (x - TAN30DEG)/(1.0F + TAN30DEG * x);
    3234:	1c20      	adds	r0, r4, #0
    3236:	4972      	ldr	r1, [pc, #456]	; (3400 <fatan2_deg+0x368>)
    3238:	f7fd fed6 	bl	fe8 <__aeabi_fsub>
    323c:	4970      	ldr	r1, [pc, #448]	; (3400 <fatan2_deg+0x368>)
    323e:	1c07      	adds	r7, r0, #0
    3240:	1c20      	adds	r0, r4, #0
    3242:	f7fd fda7 	bl	d94 <__aeabi_fmul>
    3246:	21fe      	movs	r1, #254	; 0xfe
    3248:	0589      	lsls	r1, r1, #22
    324a:	f7fd fa53 	bl	6f4 <__aeabi_fadd>
    324e:	1c01      	adds	r1, r0, #0
    3250:	1c38      	adds	r0, r7, #0
    3252:	f7fd fbbb 	bl	9cc <__aeabi_fdiv>
    3256:	1c04      	adds	r4, r0, #0
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    3258:	1c21      	adds	r1, r4, #0
    325a:	f7fd fd9b 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    325e:	4965      	ldr	r1, [pc, #404]	; (33f4 <fatan2_deg+0x35c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    3260:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    3262:	f7fd fd97 	bl	d94 <__aeabi_fmul>
    3266:	4964      	ldr	r1, [pc, #400]	; (33f8 <fatan2_deg+0x360>)
    3268:	f7fd fa44 	bl	6f4 <__aeabi_fadd>
    326c:	1c01      	adds	r1, r0, #0
    326e:	1c20      	adds	r0, r4, #0
    3270:	f7fd fd90 	bl	d94 <__aeabi_fmul>
    3274:	4961      	ldr	r1, [pc, #388]	; (33fc <fatan2_deg+0x364>)
    3276:	1c04      	adds	r4, r0, #0
    3278:	1c38      	adds	r0, r7, #0
    327a:	f7fd fa3b 	bl	6f4 <__aeabi_fadd>
    327e:	1c01      	adds	r1, r0, #0
    3280:	1c20      	adds	r0, r4, #0
    3282:	f7fd fba3 	bl	9cc <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:111

	// call the atan estimator to obtain -15 deg <= angle <= 15 deg
	fangledeg = fatan_15deg(x);

	// undo the distortions applied earlier to obtain -90 deg <= angle <= 90 deg
	if (ixmapped) fangledeg += 30.0F;
    3286:	495f      	ldr	r1, [pc, #380]	; (3404 <fatan2_deg+0x36c>)
    3288:	f7fd fa34 	bl	6f4 <__aeabi_fadd>
    328c:	1c01      	adds	r1, r0, #0
    328e:	e756      	b.n	313e <fatan2_deg+0xa6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    3290:	2500      	movs	r5, #0
    3292:	e734      	b.n	30fe <fatan2_deg+0x66>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    3294:	2380      	movs	r3, #128	; 0x80
    3296:	061b      	lsls	r3, r3, #24
    3298:	18e4      	adds	r4, r4, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:86
		ixisnegative = 1;
    329a:	2601      	movs	r6, #1
    329c:	e720      	b.n	30e0 <fatan2_deg+0x48>
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    329e:	1c21      	adds	r1, r4, #0
    32a0:	1c20      	adds	r0, r4, #0
    32a2:	f7fd fd77 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    32a6:	4953      	ldr	r1, [pc, #332]	; (33f4 <fatan2_deg+0x35c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    32a8:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    32aa:	f7fd fd73 	bl	d94 <__aeabi_fmul>
    32ae:	4952      	ldr	r1, [pc, #328]	; (33f8 <fatan2_deg+0x360>)
    32b0:	f7fd fa20 	bl	6f4 <__aeabi_fadd>
    32b4:	1c01      	adds	r1, r0, #0
    32b6:	1c20      	adds	r0, r4, #0
    32b8:	f7fd fd6c 	bl	d94 <__aeabi_fmul>
    32bc:	494f      	ldr	r1, [pc, #316]	; (33fc <fatan2_deg+0x364>)
    32be:	1c04      	adds	r4, r0, #0
    32c0:	1c38      	adds	r0, r7, #0
    32c2:	f7fd fa17 	bl	6f4 <__aeabi_fadd>
    32c6:	1c01      	adds	r1, r0, #0
    32c8:	1c20      	adds	r0, r4, #0
    32ca:	f7fd fb7f 	bl	9cc <__aeabi_fdiv>
    32ce:	1c01      	adds	r1, r0, #0
    32d0:	e797      	b.n	3202 <fatan2_deg+0x16a>
fatan2_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:137 (discriminator 1)
	
	// from here onwards, x is guaranteed to be non-zero
	// compute atan2 for quadrant 1 (0 to 90 deg) and quadrant 4 (-90 to 0 deg)
	if (x > 0.0F) return (fatan_deg(y / x));
	// compute atan2 for quadrant 2 (90 to 180 deg)
	if ((x < 0.0F) && (y > 0.0F)) return (180.0F + fatan_deg(y / x));
    32d2:	1c28      	adds	r0, r5, #0
    32d4:	2100      	movs	r1, #0
    32d6:	f7fd f9f9 	bl	6cc <__aeabi_fcmpgt>
    32da:	2800      	cmp	r0, #0
    32dc:	d100      	bne.n	32e0 <fatan2_deg+0x248>
    32de:	e742      	b.n	3166 <fatan2_deg+0xce>
    32e0:	1c21      	adds	r1, r4, #0
    32e2:	1c28      	adds	r0, r5, #0
    32e4:	f7fd fb72 	bl	9cc <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 1)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    32e8:	2100      	movs	r1, #0
fatan2_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:137 (discriminator 1)
	
	// from here onwards, x is guaranteed to be non-zero
	// compute atan2 for quadrant 1 (0 to 90 deg) and quadrant 4 (-90 to 0 deg)
	if (x > 0.0F) return (fatan_deg(y / x));
	// compute atan2 for quadrant 2 (90 to 180 deg)
	if ((x < 0.0F) && (y > 0.0F)) return (180.0F + fatan_deg(y / x));
    32ea:	1c04      	adds	r4, r0, #0
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 1)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    32ec:	f7fd f9da 	bl	6a4 <__aeabi_fcmplt>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80 (discriminator 1)

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    32f0:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 1)
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    32f2:	2800      	cmp	r0, #0
    32f4:	d173      	bne.n	33de <fatan2_deg+0x346>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
		x = -x;
		ixisnegative = 1;
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    32f6:	21fe      	movs	r1, #254	; 0xfe
    32f8:	1c20      	adds	r0, r4, #0
    32fa:	0589      	lsls	r1, r1, #22
    32fc:	f7fd f9e6 	bl	6cc <__aeabi_fcmpgt>
    3300:	2800      	cmp	r0, #0
    3302:	d071      	beq.n	33e8 <fatan2_deg+0x350>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	{
		x = 1.0F / x;
    3304:	20fe      	movs	r0, #254	; 0xfe
    3306:	1c21      	adds	r1, r4, #0
    3308:	0580      	lsls	r0, r0, #22
    330a:	f7fd fb5f 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:93
		ixexceeds1 = 1;
    330e:	2501      	movs	r5, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
	{
		x = 1.0F / x;
    3310:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:101
	// at this point, x is in the range 0 to 1 inclusive
	// map argument onto range -tan(15 deg) to tan(15 deg)
	// using tan(angle-30deg) = (tan(angle)-tan(30deg)) / (1 + tan(angle)tan(30deg))
	// tan(15deg) maps to tan(-15 deg) = -tan(15 deg)
	// 1. maps to (sqrt(3) - 1) / (sqrt(3) + 1) = 2 - sqrt(3) = tan(15 deg)
	if (x > TAN15DEG)
    3312:	1c20      	adds	r0, r4, #0
    3314:	4936      	ldr	r1, [pc, #216]	; (33f0 <fatan2_deg+0x358>)
    3316:	f7fd f9d9 	bl	6cc <__aeabi_fcmpgt>
    331a:	2800      	cmp	r0, #0
    331c:	d045      	beq.n	33aa <fatan2_deg+0x312>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:103
	{
		x = (x - TAN30DEG)/(1.0F + TAN30DEG * x);
    331e:	1c20      	adds	r0, r4, #0
    3320:	4937      	ldr	r1, [pc, #220]	; (3400 <fatan2_deg+0x368>)
    3322:	f7fd fe61 	bl	fe8 <__aeabi_fsub>
    3326:	4936      	ldr	r1, [pc, #216]	; (3400 <fatan2_deg+0x368>)
    3328:	1c07      	adds	r7, r0, #0
    332a:	1c20      	adds	r0, r4, #0
    332c:	f7fd fd32 	bl	d94 <__aeabi_fmul>
    3330:	21fe      	movs	r1, #254	; 0xfe
    3332:	0589      	lsls	r1, r1, #22
    3334:	f7fd f9de 	bl	6f4 <__aeabi_fadd>
    3338:	1c01      	adds	r1, r0, #0
    333a:	1c38      	adds	r0, r7, #0
    333c:	f7fd fb46 	bl	9cc <__aeabi_fdiv>
    3340:	1c04      	adds	r4, r0, #0
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    3342:	1c21      	adds	r1, r4, #0
    3344:	f7fd fd26 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    3348:	492a      	ldr	r1, [pc, #168]	; (33f4 <fatan2_deg+0x35c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    334a:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    334c:	f7fd fd22 	bl	d94 <__aeabi_fmul>
    3350:	4929      	ldr	r1, [pc, #164]	; (33f8 <fatan2_deg+0x360>)
    3352:	f7fd f9cf 	bl	6f4 <__aeabi_fadd>
    3356:	1c01      	adds	r1, r0, #0
    3358:	1c20      	adds	r0, r4, #0
    335a:	f7fd fd1b 	bl	d94 <__aeabi_fmul>
    335e:	4927      	ldr	r1, [pc, #156]	; (33fc <fatan2_deg+0x364>)
    3360:	1c04      	adds	r4, r0, #0
    3362:	1c38      	adds	r0, r7, #0
    3364:	f7fd f9c6 	bl	6f4 <__aeabi_fadd>
    3368:	1c01      	adds	r1, r0, #0
    336a:	1c20      	adds	r0, r4, #0
    336c:	f7fd fb2e 	bl	9cc <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:111

	// call the atan estimator to obtain -15 deg <= angle <= 15 deg
	fangledeg = fatan_15deg(x);

	// undo the distortions applied earlier to obtain -90 deg <= angle <= 90 deg
	if (ixmapped) fangledeg += 30.0F;
    3370:	4924      	ldr	r1, [pc, #144]	; (3404 <fatan2_deg+0x36c>)
    3372:	f7fd f9bf 	bl	6f4 <__aeabi_fadd>
    3376:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:112
	if (ixexceeds1) fangledeg = 90.0F - fangledeg;
    3378:	2d00      	cmp	r5, #0
    337a:	d003      	beq.n	3384 <fatan2_deg+0x2ec>
    337c:	481b      	ldr	r0, [pc, #108]	; (33ec <fatan2_deg+0x354>)
    337e:	f7fd fe33 	bl	fe8 <__aeabi_fsub>
    3382:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:113
	if (ixisnegative) fangledeg = -fangledeg;
    3384:	2e00      	cmp	r6, #0
    3386:	d002      	beq.n	338e <fatan2_deg+0x2f6>
    3388:	2380      	movs	r3, #128	; 0x80
    338a:	061b      	lsls	r3, r3, #24
    338c:	18c9      	adds	r1, r1, r3
fatan2_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:137
	
	// from here onwards, x is guaranteed to be non-zero
	// compute atan2 for quadrant 1 (0 to 90 deg) and quadrant 4 (-90 to 0 deg)
	if (x > 0.0F) return (fatan_deg(y / x));
	// compute atan2 for quadrant 2 (90 to 180 deg)
	if ((x < 0.0F) && (y > 0.0F)) return (180.0F + fatan_deg(y / x));
    338e:	1c08      	adds	r0, r1, #0
    3390:	491d      	ldr	r1, [pc, #116]	; (3408 <fatan2_deg+0x370>)
    3392:	f7fd f9af 	bl	6f4 <__aeabi_fadd>
    3396:	e690      	b.n	30ba <fatan2_deg+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:128
	if (x == 0.0F)
	{
		// return 90 deg for positive y
		if (y > 0.0F) return 90.0F;
		// return -90 deg for negative y
		if (y < 0.0F) return -90.0F;
    3398:	481c      	ldr	r0, [pc, #112]	; (340c <fatan2_deg+0x374>)
    339a:	e68e      	b.n	30ba <fatan2_deg+0x22>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    339c:	2500      	movs	r5, #0
    339e:	e6fd      	b.n	319c <fatan2_deg+0x104>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    33a0:	2380      	movs	r3, #128	; 0x80
    33a2:	061b      	lsls	r3, r3, #24
    33a4:	18e4      	adds	r4, r4, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:86
		ixisnegative = 1;
    33a6:	2601      	movs	r6, #1
    33a8:	e6e9      	b.n	317e <fatan2_deg+0xe6>
fatan_15deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    33aa:	1c21      	adds	r1, r4, #0
    33ac:	1c20      	adds	r0, r4, #0
    33ae:	f7fd fcf1 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    33b2:	4910      	ldr	r1, [pc, #64]	; (33f4 <fatan2_deg+0x35c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    33b4:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    33b6:	f7fd fced 	bl	d94 <__aeabi_fmul>
    33ba:	490f      	ldr	r1, [pc, #60]	; (33f8 <fatan2_deg+0x360>)
    33bc:	f7fd f99a 	bl	6f4 <__aeabi_fadd>
    33c0:	1c01      	adds	r1, r0, #0
    33c2:	1c20      	adds	r0, r4, #0
    33c4:	f7fd fce6 	bl	d94 <__aeabi_fmul>
    33c8:	490c      	ldr	r1, [pc, #48]	; (33fc <fatan2_deg+0x364>)
    33ca:	1c04      	adds	r4, r0, #0
    33cc:	1c38      	adds	r0, r7, #0
    33ce:	f7fd f991 	bl	6f4 <__aeabi_fadd>
    33d2:	1c01      	adds	r1, r0, #0
    33d4:	1c20      	adds	r0, r4, #0
    33d6:	f7fd faf9 	bl	9cc <__aeabi_fdiv>
    33da:	1c01      	adds	r1, r0, #0
    33dc:	e7cc      	b.n	3378 <fatan2_deg+0x2e0>
fatan_deg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    33de:	2380      	movs	r3, #128	; 0x80
    33e0:	061b      	lsls	r3, r3, #24
    33e2:	18e4      	adds	r4, r4, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:86
		ixisnegative = 1;
    33e4:	2601      	movs	r6, #1
    33e6:	e786      	b.n	32f6 <fatan2_deg+0x25e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    33e8:	2500      	movs	r5, #0
    33ea:	e792      	b.n	3312 <fatan2_deg+0x27a>
    33ec:	42b40000 	.word	0x42b40000
    33f0:	3e8930a3 	.word	0x3e8930a3
    33f4:	41c8b20e 	.word	0x41c8b20e
    33f8:	42c149ee 	.word	0x42c149ee
    33fc:	3fd7e7dc 	.word	0x3fd7e7dc
    3400:	3f13cd3a 	.word	0x3f13cd3a
    3404:	41f00000 	.word	0x41f00000
    3408:	43340000 	.word	0x43340000
    340c:	c2b40000 	.word	0xc2b40000

00003410 <MPL3115_Init>:
MPL3115_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:104
#define MAG3110_CTRL_REG2         		0x11
#define MAG3110_WHO_AM_I_VALUE     		0xC4

// initialize MPL3115 pressure and temperature sensor
int8 MPL3115_Init(LDD_TDeviceData *DeviceDataPtr, struct PressureSensor *pthisPressure)
{
    3410:	b5f0      	push	{r4, r5, r6, r7, lr}
    3412:	4657      	mov	r7, sl
    3414:	464e      	mov	r6, r9
    3416:	4645      	mov	r5, r8
    3418:	b4e0      	push	{r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:109
	LDD_I2C_TBusState BusState;		// I2C bus state
	LDD_I2C_TErrorMask  MPL3115_I2C_Error;

	// set up the MPL3115 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, MPL3115_I2C_ADDR);
    341a:	2260      	movs	r2, #96	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:104
#define MAG3110_CTRL_REG2         		0x11
#define MAG3110_WHO_AM_I_VALUE     		0xC4

// initialize MPL3115 pressure and temperature sensor
int8 MPL3115_Init(LDD_TDeviceData *DeviceDataPtr, struct PressureSensor *pthisPressure)
{
    341c:	b084      	sub	sp, #16
    341e:	468a      	mov	sl, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:109
	LDD_I2C_TBusState BusState;		// I2C bus state
	LDD_I2C_TErrorMask  MPL3115_I2C_Error;

	// set up the MPL3115 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, MPL3115_I2C_ADDR);
    3420:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:104
#define MAG3110_CTRL_REG2         		0x11
#define MAG3110_WHO_AM_I_VALUE     		0xC4

// initialize MPL3115 pressure and temperature sensor
int8 MPL3115_Init(LDD_TDeviceData *DeviceDataPtr, struct PressureSensor *pthisPressure)
{
    3422:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:109
	LDD_I2C_TBusState BusState;		// I2C bus state
	LDD_I2C_TErrorMask  MPL3115_I2C_Error;

	// set up the MPL3115 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, MPL3115_I2C_ADDR);
    3424:	f00d f946 	bl	106b4 <I2C_SelectSlaveDevice>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:118
	// [6]: RAW=0 
	// [5-3]: OS=000 
	// [2]: RST=0
	// [1]: OST=0
	// [0]: SBYB=0 to enter standby
	I2C_Buf[0] = MPL3115_CTRL_REG1;		// byte 0 is the destination register
    3428:	492b      	ldr	r1, [pc, #172]	; (34d8 <MPL3115_Init+0xc8>)
    342a:	2326      	movs	r3, #38	; 0x26
    342c:	700b      	strb	r3, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:120
	I2C_Buf[1] = 0x00;						// byte 1 is the data to write
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;			// reset the I2C sent flag
    342e:	4e2b      	ldr	r6, [pc, #172]	; (34dc <MPL3115_Init+0xcc>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:119
	// [5-3]: OS=000 
	// [2]: RST=0
	// [1]: OST=0
	// [0]: SBYB=0 to enter standby
	I2C_Buf[0] = MPL3115_CTRL_REG1;		// byte 0 is the destination register
	I2C_Buf[1] = 0x00;						// byte 1 is the data to write
    3430:	2300      	movs	r3, #0
    3432:	704b      	strb	r3, [r1, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:120
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;			// reset the I2C sent flag
    3434:	2374      	movs	r3, #116	; 0x74
    3436:	5cf2      	ldrb	r2, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:118
	// [6]: RAW=0 
	// [5-3]: OS=000 
	// [2]: RST=0
	// [1]: OST=0
	// [0]: SBYB=0 to enter standby
	I2C_Buf[0] = MPL3115_CTRL_REG1;		// byte 0 is the destination register
    3438:	4689      	mov	r9, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:120
	I2C_Buf[1] = 0x00;						// byte 1 is the data to write
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;			// reset the I2C sent flag
    343a:	2101      	movs	r1, #1
    343c:	438a      	bics	r2, r1
    343e:	54f2      	strb	r2, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:123

	// transmit the bytes
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    3440:	1c20      	adds	r0, r4, #0
    3442:	2301      	movs	r3, #1
    3444:	4649      	mov	r1, r9
    3446:	2202      	movs	r2, #2
    3448:	f00d f87a 	bl	10540 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:134
		// ERR_OK = 0x00: device is present
		// ERR_DISABLED = 0x07: device is disabled
		// ERR_SPEED = 0x01: device does not work in the active speed mode
		I2C_GetError(DeviceDataPtr, &MPL3115_I2C_Error);
	}
	while ((!MPL3115_I2C_Error) && !(mqxglobals.I2C_Status & I2C_SENT_FLAG));
    344c:	2374      	movs	r3, #116	; 0x74
    344e:	ad02      	add	r5, sp, #8
    3450:	4698      	mov	r8, r3
    3452:	2701      	movs	r7, #1
    3454:	e003      	b.n	345e <MPL3115_Init+0x4e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:134 (discriminator 1)
    3456:	4641      	mov	r1, r8
    3458:	5c73      	ldrb	r3, [r6, r1]
    345a:	421f      	tst	r7, r3
    345c:	d108      	bne.n	3470 <MPL3115_Init+0x60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:132 (discriminator 1)
	{
		// read the error flag
		// ERR_OK = 0x00: device is present
		// ERR_DISABLED = 0x07: device is disabled
		// ERR_SPEED = 0x01: device does not work in the active speed mode
		I2C_GetError(DeviceDataPtr, &MPL3115_I2C_Error);
    345e:	1c20      	adds	r0, r4, #0
    3460:	1c29      	adds	r1, r5, #0
    3462:	f00d f95f 	bl	10724 <I2C_GetError>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:134 (discriminator 1)
	}
	while ((!MPL3115_I2C_Error) && !(mqxglobals.I2C_Status & I2C_SENT_FLAG));
    3466:	882b      	ldrh	r3, [r5, #0]
    3468:	2b00      	cmp	r3, #0
    346a:	d0f4      	beq.n	3456 <MPL3115_Init+0x46>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:138

	// return immediately with error condition if MPL3115 is not present
	if (MPL3115_I2C_Error)
		return false;
    346c:	2000      	movs	r0, #0
    346e:	e02b      	b.n	34c8 <MPL3115_Init+0xb8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:143 (discriminator 1)

	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    3470:	1c20      	adds	r0, r4, #0
    3472:	4669      	mov	r1, sp
    3474:	f00d f964 	bl	10740 <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:144 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    3478:	466a      	mov	r2, sp
    347a:	7813      	ldrb	r3, [r2, #0]
    347c:	2b01      	cmp	r3, #1
    347e:	d1f7      	bne.n	3470 <MPL3115_Init+0x60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:157
	// [6]: RAW=0 to disable raw measurements
	// [5-3]: OS=111 for OS ratio=128 for maximum internal averaging with 512ms output interval
	// [2]: RST=0 do not enter reset
	// [1]: OST=0 do not initiate a reading
	// [0]: SBYB=1 to enter active mode
	I2C_Buf[0] = MPL3115_CTRL_REG1;
    3480:	4649      	mov	r1, r9
    3482:	2226      	movs	r2, #38	; 0x26
    3484:	700a      	strb	r2, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:158
	I2C_Buf[1] = 0xB9;
    3486:	22b9      	movs	r2, #185	; 0xb9
    3488:	704a      	strb	r2, [r1, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:159
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    348a:	2274      	movs	r2, #116	; 0x74
    348c:	5cb1      	ldrb	r1, [r6, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:160
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    348e:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:159
	// [2]: RST=0 do not enter reset
	// [1]: OST=0 do not initiate a reading
	// [0]: SBYB=1 to enter active mode
	I2C_Buf[0] = MPL3115_CTRL_REG1;
	I2C_Buf[1] = 0xB9;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3490:	4399      	bics	r1, r3
    3492:	54b1      	strb	r1, [r6, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:160
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    3494:	2301      	movs	r3, #1
    3496:	4649      	mov	r1, r9
    3498:	2202      	movs	r2, #2
    349a:	f00d f851 	bl	10540 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:162
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    349e:	2174      	movs	r1, #116	; 0x74
    34a0:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:162 (discriminator 1)
    34a2:	5c73      	ldrb	r3, [r6, r1]
    34a4:	421a      	tst	r2, r3
    34a6:	d0fc      	beq.n	34a2 <MPL3115_Init+0x92>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:166 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    34a8:	1c20      	adds	r0, r4, #0
    34aa:	4669      	mov	r1, sp
    34ac:	f00d f948 	bl	10740 <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:167 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    34b0:	466a      	mov	r2, sp
    34b2:	7813      	ldrb	r3, [r2, #0]
    34b4:	2b01      	cmp	r3, #1
    34b6:	d1f7      	bne.n	34a8 <MPL3115_Init+0x98>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:172

	// store the gain terms in the pressure structure
#define MPL3115_MPERCOUNT 0.0000152587890625F		// 1/65536 fixed range for MPL3115	
#define MPL3115_CPERCPOUNT 0.00390625F				// 1/256 fixed range for MPL3115
	pthisPressure->fmPerCount = MPL3115_MPERCOUNT;
    34b8:	23de      	movs	r3, #222	; 0xde
    34ba:	059b      	lsls	r3, r3, #22
    34bc:	4651      	mov	r1, sl
    34be:	610b      	str	r3, [r1, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:173
	pthisPressure->fCPerCount = MPL3115_CPERCPOUNT;
    34c0:	23ee      	movs	r3, #238	; 0xee
    34c2:	059b      	lsls	r3, r3, #22
    34c4:	614b      	str	r3, [r1, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:175

	return (true);
    34c6:	2001      	movs	r0, #1
    34c8:	b240      	sxtb	r0, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:176
}
    34ca:	b004      	add	sp, #16
    34cc:	bc1c      	pop	{r2, r3, r4}
    34ce:	4690      	mov	r8, r2
    34d0:	4699      	mov	r9, r3
    34d2:	46a2      	mov	sl, r4
    34d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34d6:	46c0      	nop			; (mov r8, r8)
    34d8:	1fffe2c8 	.word	0x1fffe2c8
    34dc:	1fffe3fc 	.word	0x1fffe3fc

000034e0 <FXOS8700_Init>:
FXOS8700_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:180

// initialize FXOS8700 accelerometer plus magnetometer sensor
void FXOS8700_Init(LDD_TDeviceData *DeviceDataPtr, struct AccelSensor *pthisAccel, struct MagSensor *pthisMag)
{
    34e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    34e2:	464f      	mov	r7, r9
    34e4:	4646      	mov	r6, r8
    34e6:	b4c0      	push	{r6, r7}
    34e8:	4689      	mov	r9, r1
    34ea:	b083      	sub	sp, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:184
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXOS8700 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXOS8700_I2C_ADDR);
    34ec:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:180
	return (true);
}

// initialize FXOS8700 accelerometer plus magnetometer sensor
void FXOS8700_Init(LDD_TDeviceData *DeviceDataPtr, struct AccelSensor *pthisAccel, struct MagSensor *pthisMag)
{
    34ee:	4690      	mov	r8, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:184
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXOS8700 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXOS8700_I2C_ADDR);
    34f0:	221e      	movs	r2, #30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:180
	return (true);
}

// initialize FXOS8700 accelerometer plus magnetometer sensor
void FXOS8700_Init(LDD_TDeviceData *DeviceDataPtr, struct AccelSensor *pthisAccel, struct MagSensor *pthisMag)
{
    34f2:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:184
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXOS8700 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXOS8700_I2C_ADDR);
    34f4:	f00d f8de 	bl	106b4 <I2C_SelectSlaveDevice>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:189

	// write 0000 0000 = 0x00 to CTRL_REG1 to place FXOS8700 into standby
	// [7-1] = 0000 000
	// [0]: active=0
	I2C_Buf[0] = FXOS8700_CTRL_REG1;
    34f8:	4f56      	ldr	r7, [pc, #344]	; (3654 <FXOS8700_Init+0x174>)
    34fa:	232a      	movs	r3, #42	; 0x2a
    34fc:	703b      	strb	r3, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:191
	I2C_Buf[1] = 0x00;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    34fe:	4d56      	ldr	r5, [pc, #344]	; (3658 <FXOS8700_Init+0x178>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:190

	// write 0000 0000 = 0x00 to CTRL_REG1 to place FXOS8700 into standby
	// [7-1] = 0000 000
	// [0]: active=0
	I2C_Buf[0] = FXOS8700_CTRL_REG1;
	I2C_Buf[1] = 0x00;
    3500:	2300      	movs	r3, #0
    3502:	707b      	strb	r3, [r7, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:191
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3504:	2374      	movs	r3, #116	; 0x74
    3506:	5cea      	ldrb	r2, [r5, r3]
    3508:	2101      	movs	r1, #1
    350a:	438a      	bics	r2, r1
    350c:	54ea      	strb	r2, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:192
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    350e:	1c39      	adds	r1, r7, #0
    3510:	2202      	movs	r2, #2
    3512:	1c30      	adds	r0, r6, #0
    3514:	2301      	movs	r3, #1
    3516:	f00d f813 	bl	10540 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:194
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    351a:	2174      	movs	r1, #116	; 0x74
    351c:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:194 (discriminator 1)
    351e:	5c6b      	ldrb	r3, [r5, r1]
    3520:	421a      	tst	r2, r3
    3522:	d0fc      	beq.n	351e <FXOS8700_Init+0x3e>
    3524:	466c      	mov	r4, sp
    3526:	3407      	adds	r4, #7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:198 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    3528:	1c30      	adds	r0, r6, #0
    352a:	1c21      	adds	r1, r4, #0
    352c:	f00d f908 	bl	10740 <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:199 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    3530:	7823      	ldrb	r3, [r4, #0]
    3532:	2b01      	cmp	r3, #1
    3534:	d1f8      	bne.n	3528 <FXOS8700_Init+0x48>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:207
	// [7]: m_acal=0: auto calibration disabled
	// [6]: m_rst=0: one-shot magnetic reset disabled
	// [5]: m_ost=0: one-shot magnetic measurement disabled
	// [4-2]: m_os=111=7: 8x oversampling (for 200Hz) to reduce magnetometer noise
	// [1-0]: m_hms=11=3: select hybrid mode with accel and magnetometer active
	I2C_Buf[0] = FXOS8700_M_CTRL_REG1;
    3536:	225b      	movs	r2, #91	; 0x5b
    3538:	703a      	strb	r2, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:208
	I2C_Buf[1] = 0x1F;
    353a:	221f      	movs	r2, #31
    353c:	707a      	strb	r2, [r7, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:209
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    353e:	2274      	movs	r2, #116	; 0x74
    3540:	5ca9      	ldrb	r1, [r5, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:210
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    3542:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:209
	// [5]: m_ost=0: one-shot magnetic measurement disabled
	// [4-2]: m_os=111=7: 8x oversampling (for 200Hz) to reduce magnetometer noise
	// [1-0]: m_hms=11=3: select hybrid mode with accel and magnetometer active
	I2C_Buf[0] = FXOS8700_M_CTRL_REG1;
	I2C_Buf[1] = 0x1F;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3544:	4399      	bics	r1, r3
    3546:	54a9      	strb	r1, [r5, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:210
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    3548:	2301      	movs	r3, #1
    354a:	1c39      	adds	r1, r7, #0
    354c:	2202      	movs	r2, #2
    354e:	f00c fff7 	bl	10540 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:212
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    3552:	2174      	movs	r1, #116	; 0x74
    3554:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:212 (discriminator 1)
    3556:	5c6b      	ldrb	r3, [r5, r1]
    3558:	421a      	tst	r2, r3
    355a:	d0fc      	beq.n	3556 <FXOS8700_Init+0x76>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:216 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    355c:	1c30      	adds	r0, r6, #0
    355e:	1c21      	adds	r1, r4, #0
    3560:	f00d f8ee 	bl	10740 <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:217 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    3564:	7823      	ldrb	r3, [r4, #0]
    3566:	2b01      	cmp	r3, #1
    3568:	d1f8      	bne.n	355c <FXOS8700_Init+0x7c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:227
	// [5]: hyb_autoinc_mode=1 to map the magnetometer registers to follow the accelerometer registers
	// [4]: m_maxmin_dis=0 to retain default min/max latching even though not used
	// [3]: m_maxmin_dis_ths=0
	// [2]: m_maxmin_rst=0
	// [1-0]: m_rst_cnt=00 to enable magnetic reset each cycle
	I2C_Buf[0] = FXOS8700_M_CTRL_REG2;
    356a:	225c      	movs	r2, #92	; 0x5c
    356c:	703a      	strb	r2, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:228
	I2C_Buf[1] = 0x20;
    356e:	2220      	movs	r2, #32
    3570:	707a      	strb	r2, [r7, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:229
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3572:	2274      	movs	r2, #116	; 0x74
    3574:	5ca9      	ldrb	r1, [r5, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:230
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    3576:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:229
	// [3]: m_maxmin_dis_ths=0
	// [2]: m_maxmin_rst=0
	// [1-0]: m_rst_cnt=00 to enable magnetic reset each cycle
	I2C_Buf[0] = FXOS8700_M_CTRL_REG2;
	I2C_Buf[1] = 0x20;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3578:	4399      	bics	r1, r3
    357a:	54a9      	strb	r1, [r5, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:230
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    357c:	2301      	movs	r3, #1
    357e:	1c39      	adds	r1, r7, #0
    3580:	2202      	movs	r2, #2
    3582:	f00c ffdd 	bl	10540 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:232
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    3586:	2174      	movs	r1, #116	; 0x74
    3588:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:232 (discriminator 1)
    358a:	5c6b      	ldrb	r3, [r5, r1]
    358c:	421a      	tst	r2, r3
    358e:	d0fc      	beq.n	358a <FXOS8700_Init+0xaa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:236 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    3590:	1c30      	adds	r0, r6, #0
    3592:	1c21      	adds	r1, r4, #0
    3594:	f00d f8d4 	bl	10740 <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:237 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    3598:	7823      	ldrb	r3, [r4, #0]
    359a:	2b01      	cmp	r3, #1
    359c:	d1f8      	bne.n	3590 <FXOS8700_Init+0xb0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:247
	// [5]: reserved
	// [4]: hpf_out=0
	// [3]: reserved
	// [2]: reserved
	// [1-0]: fs=01 for 4g mode: 2048 counts / g = 8192 counts / g after 2 bit left shift
	I2C_Buf[0] = FXOS8700_XYZ_DATA_CFG;
    359e:	220e      	movs	r2, #14
    35a0:	703a      	strb	r2, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:248
	I2C_Buf[1] = 0x01;
    35a2:	707b      	strb	r3, [r7, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:249
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    35a4:	2274      	movs	r2, #116	; 0x74
    35a6:	5ca9      	ldrb	r1, [r5, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:250
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    35a8:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:249
	// [3]: reserved
	// [2]: reserved
	// [1-0]: fs=01 for 4g mode: 2048 counts / g = 8192 counts / g after 2 bit left shift
	I2C_Buf[0] = FXOS8700_XYZ_DATA_CFG;
	I2C_Buf[1] = 0x01;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    35aa:	4399      	bics	r1, r3
    35ac:	54a9      	strb	r1, [r5, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:250
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    35ae:	2301      	movs	r3, #1
    35b0:	1c39      	adds	r1, r7, #0
    35b2:	2202      	movs	r2, #2
    35b4:	f00c ffc4 	bl	10540 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:252
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    35b8:	2174      	movs	r1, #116	; 0x74
    35ba:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:252 (discriminator 1)
    35bc:	5c6b      	ldrb	r3, [r5, r1]
    35be:	421a      	tst	r2, r3
    35c0:	d0fc      	beq.n	35bc <FXOS8700_Init+0xdc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:256 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    35c2:	1c30      	adds	r0, r6, #0
    35c4:	1c21      	adds	r1, r4, #0
    35c6:	f00d f8bb 	bl	10740 <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:257 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    35ca:	7823      	ldrb	r3, [r4, #0]
    35cc:	2b01      	cmp	r3, #1
    35ce:	d1f8      	bne.n	35c2 <FXOS8700_Init+0xe2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:266
	// [6]: rst=0: reset disabled
	// [5]: unused
	// [4-3]: smods=00
	// [2]: slpe=0: auto sleep disabled
	// [1-0]: mods=10 for high resolution (maximum over sampling)
	I2C_Buf[0] = FXOS8700_CTRL_REG2;
    35d0:	222b      	movs	r2, #43	; 0x2b
    35d2:	703a      	strb	r2, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:267
	I2C_Buf[1] = 0x02;
    35d4:	2202      	movs	r2, #2
    35d6:	707a      	strb	r2, [r7, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:268
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    35d8:	2274      	movs	r2, #116	; 0x74
    35da:	5ca9      	ldrb	r1, [r5, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:269
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    35dc:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:268
	// [4-3]: smods=00
	// [2]: slpe=0: auto sleep disabled
	// [1-0]: mods=10 for high resolution (maximum over sampling)
	I2C_Buf[0] = FXOS8700_CTRL_REG2;
	I2C_Buf[1] = 0x02;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    35de:	4399      	bics	r1, r3
    35e0:	54a9      	strb	r1, [r5, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:269
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    35e2:	2301      	movs	r3, #1
    35e4:	1c39      	adds	r1, r7, #0
    35e6:	2202      	movs	r2, #2
    35e8:	f00c ffaa 	bl	10540 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:271
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    35ec:	2174      	movs	r1, #116	; 0x74
    35ee:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:271 (discriminator 1)
    35f0:	5c6b      	ldrb	r3, [r5, r1]
    35f2:	421a      	tst	r2, r3
    35f4:	d0fc      	beq.n	35f0 <FXOS8700_Init+0x110>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:275 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    35f6:	1c30      	adds	r0, r6, #0
    35f8:	1c21      	adds	r1, r4, #0
    35fa:	f00d f8a1 	bl	10740 <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:276 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    35fe:	7823      	ldrb	r3, [r4, #0]
    3600:	2b01      	cmp	r3, #1
    3602:	d1f8      	bne.n	35f6 <FXOS8700_Init+0x116>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:284
	// [7-6]: aslp_rate=00
	// [5-3]: dr=001=1 for 200Hz data rate (when in hybrid mode)
	// [2]: lnoise=1 for low noise mode (since we're in 4g mode)
	// [1]: f_read=0 for normal 16 bit reads
	// [0]: active=1 to take the part out of standby and enable sampling
	I2C_Buf[0] = FXOS8700_CTRL_REG1;
    3604:	222a      	movs	r2, #42	; 0x2a
    3606:	703a      	strb	r2, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:285
	I2C_Buf[1] = 0x0D;
    3608:	220d      	movs	r2, #13
    360a:	707a      	strb	r2, [r7, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:286
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    360c:	2274      	movs	r2, #116	; 0x74
    360e:	5ca9      	ldrb	r1, [r5, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:287
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    3610:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:286
	// [2]: lnoise=1 for low noise mode (since we're in 4g mode)
	// [1]: f_read=0 for normal 16 bit reads
	// [0]: active=1 to take the part out of standby and enable sampling
	I2C_Buf[0] = FXOS8700_CTRL_REG1;
	I2C_Buf[1] = 0x0D;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3612:	4399      	bics	r1, r3
    3614:	54a9      	strb	r1, [r5, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:287
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    3616:	2301      	movs	r3, #1
    3618:	1c39      	adds	r1, r7, #0
    361a:	2202      	movs	r2, #2
    361c:	f00c ff90 	bl	10540 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:289
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    3620:	2174      	movs	r1, #116	; 0x74
    3622:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:289 (discriminator 1)
    3624:	5c6b      	ldrb	r3, [r5, r1]
    3626:	421a      	tst	r2, r3
    3628:	d0fc      	beq.n	3624 <FXOS8700_Init+0x144>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:293 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    362a:	1c30      	adds	r0, r6, #0
    362c:	1c21      	adds	r1, r4, #0
    362e:	f00d f887 	bl	10740 <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:294 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    3632:	7823      	ldrb	r3, [r4, #0]
    3634:	2b01      	cmp	r3, #1
    3636:	d1f8      	bne.n	362a <FXOS8700_Init+0x14a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:300

	// store the gain terms in the accelerometer and magnetometer sensor structures
#define FXOS8700_UTPERCOUNT 0.1F      				// fixed range for FXOS8700 magnetometer
#define FXOS8700_COUNTSPERUT 10.0F					// must be reciprocal of FUTPERCOUNT
#define FXOS8700_GPERCOUNT 0.0001220703125F			// equal to 1/8192
	pthisAccel->fgPerCount = FXOS8700_GPERCOUNT;
    3638:	23e4      	movs	r3, #228	; 0xe4
    363a:	464a      	mov	r2, r9
    363c:	059b      	lsls	r3, r3, #22
    363e:	6253      	str	r3, [r2, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:301
	pthisMag->fuTPerCount = FXOS8700_UTPERCOUNT;
    3640:	4b06      	ldr	r3, [pc, #24]	; (365c <FXOS8700_Init+0x17c>)
    3642:	4642      	mov	r2, r8
    3644:	63d3      	str	r3, [r2, #60]	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:302
	pthisMag->fCountsPeruT = FXOS8700_COUNTSPERUT;
    3646:	4b06      	ldr	r3, [pc, #24]	; (3660 <FXOS8700_Init+0x180>)
    3648:	6413      	str	r3, [r2, #64]	; 0x40
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:305

	return;
}
    364a:	b003      	add	sp, #12
    364c:	bc0c      	pop	{r2, r3}
    364e:	4690      	mov	r8, r2
    3650:	4699      	mov	r9, r3
    3652:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3654:	1fffe2c8 	.word	0x1fffe2c8
    3658:	1fffe3fc 	.word	0x1fffe3fc
    365c:	3dcccccd 	.word	0x3dcccccd
    3660:	41200000 	.word	0x41200000

00003664 <FXAS21000_Init>:
FXAS21000_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:309

// initialize FXAS21000 gyroscope sensor
void FXAS21000_Init(LDD_TDeviceData *DeviceDataPtr, struct GyroSensor *pthisGyro)
{
    3664:	b5f0      	push	{r4, r5, r6, r7, lr}
    3666:	4647      	mov	r7, r8
    3668:	b480      	push	{r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:313
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXAS21000 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXAS21000_I2C_ADDR);
    366a:	2220      	movs	r2, #32
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:309
	return;
}

// initialize FXAS21000 gyroscope sensor
void FXAS21000_Init(LDD_TDeviceData *DeviceDataPtr, struct GyroSensor *pthisGyro)
{
    366c:	b082      	sub	sp, #8
    366e:	4688      	mov	r8, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:313
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXAS21000 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXAS21000_I2C_ADDR);
    3670:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:309
	return;
}

// initialize FXAS21000 gyroscope sensor
void FXAS21000_Init(LDD_TDeviceData *DeviceDataPtr, struct GyroSensor *pthisGyro)
{
    3672:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:313
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXAS21000 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXAS21000_I2C_ADDR);
    3674:	f00d f81e 	bl	106b4 <I2C_SelectSlaveDevice>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:321
	// [7]: ZR_cond=0
	// [6]: RST=0
	// [5]: ST=0 self test disabled
	// [4-2]: DR[2-0]=000 for 200Hz ODR
	// [1-0]: Active=0, Ready=0 for Standby mode
	I2C_Buf[0] = FXAS21000_CTRL_REG1;
    3678:	4f2c      	ldr	r7, [pc, #176]	; (372c <FXAS21000_Init+0xc8>)
    367a:	2313      	movs	r3, #19
    367c:	703b      	strb	r3, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:323
	I2C_Buf[1] = 0x00;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    367e:	4d2c      	ldr	r5, [pc, #176]	; (3730 <FXAS21000_Init+0xcc>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:322
	// [6]: RST=0
	// [5]: ST=0 self test disabled
	// [4-2]: DR[2-0]=000 for 200Hz ODR
	// [1-0]: Active=0, Ready=0 for Standby mode
	I2C_Buf[0] = FXAS21000_CTRL_REG1;
	I2C_Buf[1] = 0x00;
    3680:	2300      	movs	r3, #0
    3682:	707b      	strb	r3, [r7, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:323
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3684:	2374      	movs	r3, #116	; 0x74
    3686:	5cea      	ldrb	r2, [r5, r3]
    3688:	2101      	movs	r1, #1
    368a:	438a      	bics	r2, r1
    368c:	54ea      	strb	r2, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:324
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    368e:	1c39      	adds	r1, r7, #0
    3690:	2202      	movs	r2, #2
    3692:	1c30      	adds	r0, r6, #0
    3694:	2301      	movs	r3, #1
    3696:	f00c ff53 	bl	10540 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:326
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    369a:	2174      	movs	r1, #116	; 0x74
    369c:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:326 (discriminator 1)
    369e:	5c6b      	ldrb	r3, [r5, r1]
    36a0:	421a      	tst	r2, r3
    36a2:	d0fc      	beq.n	369e <FXAS21000_Init+0x3a>
    36a4:	466c      	mov	r4, sp
    36a6:	3407      	adds	r4, #7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:330 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    36a8:	1c30      	adds	r0, r6, #0
    36aa:	1c21      	adds	r1, r4, #0
    36ac:	f00d f848 	bl	10740 <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:331 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    36b0:	7823      	ldrb	r3, [r4, #0]
    36b2:	2b01      	cmp	r3, #1
    36b4:	d1f8      	bne.n	36a8 <FXAS21000_Init+0x44>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:339
	// [7-6]: unused=00
	// [5]: SPIW=0 4 wire SPI (irrelevant)
	// [4-3]: SEL[1-0]=00 for 10Hz HPF at 200Hz ODR
	// [2]: HPF_EN=0 disable HPF
	// [1-0]: FS[1-0]=00 for 1600dps
	I2C_Buf[0] = FXAS21000_CTRL_REG0;
    36b6:	220d      	movs	r2, #13
    36b8:	703a      	strb	r2, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:340
	I2C_Buf[1] = 0x00;
    36ba:	2200      	movs	r2, #0
    36bc:	707a      	strb	r2, [r7, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:341
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    36be:	2274      	movs	r2, #116	; 0x74
    36c0:	5ca9      	ldrb	r1, [r5, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:342
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    36c2:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:341
	// [4-3]: SEL[1-0]=00 for 10Hz HPF at 200Hz ODR
	// [2]: HPF_EN=0 disable HPF
	// [1-0]: FS[1-0]=00 for 1600dps
	I2C_Buf[0] = FXAS21000_CTRL_REG0;
	I2C_Buf[1] = 0x00;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    36c4:	4399      	bics	r1, r3
    36c6:	54a9      	strb	r1, [r5, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:342
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    36c8:	2301      	movs	r3, #1
    36ca:	1c39      	adds	r1, r7, #0
    36cc:	2202      	movs	r2, #2
    36ce:	f00c ff37 	bl	10540 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:344
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    36d2:	2174      	movs	r1, #116	; 0x74
    36d4:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:344 (discriminator 1)
    36d6:	5c6b      	ldrb	r3, [r5, r1]
    36d8:	421a      	tst	r2, r3
    36da:	d0fc      	beq.n	36d6 <FXAS21000_Init+0x72>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:348 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    36dc:	1c30      	adds	r0, r6, #0
    36de:	1c21      	adds	r1, r4, #0
    36e0:	f00d f82e 	bl	10740 <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:349 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    36e4:	7823      	ldrb	r3, [r4, #0]
    36e6:	2b01      	cmp	r3, #1
    36e8:	d1f8      	bne.n	36dc <FXAS21000_Init+0x78>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:357
	// [7]: ZR_cond=0
	// [6]: RST=0
	// [5]: ST=0 self test disabled
	// [4-2]: DR[2-0]=000 for 200Hz ODR
	// [1-0]: Active=1, Ready=0 for Active mode
	I2C_Buf[0] = FXAS21000_CTRL_REG1;
    36ea:	2213      	movs	r2, #19
    36ec:	703a      	strb	r2, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:358
	I2C_Buf[1] = 0x02;
    36ee:	2202      	movs	r2, #2
    36f0:	707a      	strb	r2, [r7, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:359
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    36f2:	2274      	movs	r2, #116	; 0x74
    36f4:	5ca9      	ldrb	r1, [r5, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:360
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    36f6:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:359
	// [5]: ST=0 self test disabled
	// [4-2]: DR[2-0]=000 for 200Hz ODR
	// [1-0]: Active=1, Ready=0 for Active mode
	I2C_Buf[0] = FXAS21000_CTRL_REG1;
	I2C_Buf[1] = 0x02;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    36f8:	4399      	bics	r1, r3
    36fa:	54a9      	strb	r1, [r5, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:360
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    36fc:	2301      	movs	r3, #1
    36fe:	1c39      	adds	r1, r7, #0
    3700:	2202      	movs	r2, #2
    3702:	f00c ff1d 	bl	10540 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:362
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    3706:	2174      	movs	r1, #116	; 0x74
    3708:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:362 (discriminator 1)
    370a:	5c6b      	ldrb	r3, [r5, r1]
    370c:	421a      	tst	r2, r3
    370e:	d0fc      	beq.n	370a <FXAS21000_Init+0xa6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:366 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    3710:	1c30      	adds	r0, r6, #0
    3712:	1c21      	adds	r1, r4, #0
    3714:	f00d f814 	bl	10740 <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:367 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    3718:	7823      	ldrb	r3, [r4, #0]
    371a:	2b01      	cmp	r3, #1
    371c:	d1f8      	bne.n	3710 <FXAS21000_Init+0xac>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:377
	// 16 bit scaling is 0.05, 0.025, 0.0125, 0.00625dps/count for 1600, 800, 400, 200dps ranges
	// 16 bit scaling is 20, 40, 80, 160 counts/dps for 1600, 800, 400, 200dps ranges
	// our I2C driver reads 16 bit data left shifted two bits from FXAS21000
#define FXAS21000_COUNTSPERDEGPERSEC 20.0F     		// 1600dps range
#define FXAS21000_DEGPERSECPERCOUNT 0.05F			// must be reciprocal of FCOUNTSPERDEGPERSEC
	pthisGyro->fDegPerSecPerCount = FXAS21000_DEGPERSECPERCOUNT;
    371e:	4b05      	ldr	r3, [pc, #20]	; (3734 <FXAS21000_Init+0xd0>)
    3720:	4642      	mov	r2, r8
    3722:	6193      	str	r3, [r2, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:380

	return;
}
    3724:	b002      	add	sp, #8
    3726:	bc04      	pop	{r2}
    3728:	4690      	mov	r8, r2
    372a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    372c:	1fffe2c8 	.word	0x1fffe2c8
    3730:	1fffe3fc 	.word	0x1fffe3fc
    3734:	3d4ccccd 	.word	0x3d4ccccd

00003738 <MPL3115_ReadData>:
MPL3115_ReadData():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:606
	return;
}

// read MPL3115 pressure sensor over I2C
void MPL3115_ReadData(LDD_TDeviceData *DeviceDataPtr, struct PressureSensor *pthisPressure)
{
    3738:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:610
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the MPL3115 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, MPL3115_I2C_ADDR);
    373a:	2260      	movs	r2, #96	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:606
	return;
}

// read MPL3115 pressure sensor over I2C
void MPL3115_ReadData(LDD_TDeviceData *DeviceDataPtr, struct PressureSensor *pthisPressure)
{
    373c:	b083      	sub	sp, #12
    373e:	1c0f      	adds	r7, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:610
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the MPL3115 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, MPL3115_I2C_ADDR);
    3740:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:606
	return;
}

// read MPL3115 pressure sensor over I2C
void MPL3115_ReadData(LDD_TDeviceData *DeviceDataPtr, struct PressureSensor *pthisPressure)
{
    3742:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:610
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the MPL3115 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, MPL3115_I2C_ADDR);
    3744:	f00c ffb6 	bl	106b4 <I2C_SelectSlaveDevice>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:613

	// set up the address of the first data register
	I2C_Buf[0] = MPL3115_OUT_P_MSB;
    3748:	4e1d      	ldr	r6, [pc, #116]	; (37c0 <MPL3115_ReadData+0x88>)
    374a:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:614
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    374c:	4c1d      	ldr	r4, [pc, #116]	; (37c4 <MPL3115_ReadData+0x8c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:613

	// set up the MPL3115 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, MPL3115_I2C_ADDR);

	// set up the address of the first data register
	I2C_Buf[0] = MPL3115_OUT_P_MSB;
    374e:	7032      	strb	r2, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:614
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3750:	2374      	movs	r3, #116	; 0x74
    3752:	5ce1      	ldrb	r1, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:615
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 1, LDD_I2C_NO_SEND_STOP);
    3754:	1c28      	adds	r0, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:614
	// set up the MPL3115 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, MPL3115_I2C_ADDR);

	// set up the address of the first data register
	I2C_Buf[0] = MPL3115_OUT_P_MSB;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3756:	4391      	bics	r1, r2
    3758:	54e1      	strb	r1, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:615
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 1, LDD_I2C_NO_SEND_STOP);
    375a:	2201      	movs	r2, #1
    375c:	1c31      	adds	r1, r6, #0
    375e:	2300      	movs	r3, #0
    3760:	f00c feee 	bl	10540 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:617
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    3764:	2074      	movs	r0, #116	; 0x74
    3766:	2101      	movs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:617 (discriminator 1)
    3768:	5c23      	ldrb	r3, [r4, r0]
    376a:	2274      	movs	r2, #116	; 0x74
    376c:	4219      	tst	r1, r3
    376e:	d0fb      	beq.n	3768 <MPL3115_ReadData+0x30>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:620

	// read the 5 bytes of sequential sensor data
	mqxglobals.I2C_Status &= ~I2C_RCVD_FLAG;
    3770:	5ca3      	ldrb	r3, [r4, r2]
    3772:	2102      	movs	r1, #2
    3774:	438b      	bics	r3, r1
    3776:	54a3      	strb	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:621
	I2C_MasterReceiveBlock(DeviceDataPtr, I2C_Buf, 5, LDD_I2C_SEND_STOP);
    3778:	1c31      	adds	r1, r6, #0
    377a:	2205      	movs	r2, #5
    377c:	1c28      	adds	r0, r5, #0
    377e:	2301      	movs	r3, #1
    3780:	f00c ff3c 	bl	105fc <I2C_MasterReceiveBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:623
	// wait until the I2C received callback function sets the received flag
	while ((mqxglobals.I2C_Status & I2C_RCVD_FLAG) == 0);
    3784:	2174      	movs	r1, #116	; 0x74
    3786:	2202      	movs	r2, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:623 (discriminator 1)
    3788:	5c63      	ldrb	r3, [r4, r1]
    378a:	421a      	tst	r2, r3
    378c:	d0fc      	beq.n	3788 <MPL3115_ReadData+0x50>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:627 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    378e:	1c28      	adds	r0, r5, #0
    3790:	4669      	mov	r1, sp
    3792:	f00c ffd5 	bl	10740 <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:628 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    3796:	466a      	mov	r2, sp
    3798:	7813      	ldrb	r3, [r2, #0]
    379a:	2b01      	cmp	r3, #1
    379c:	d1f7      	bne.n	378e <MPL3115_ReadData+0x56>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:631

	// place the read buffer into the 32 bit altitude and 16 bit temperature
	pthisPressure->iHpFast = (I2C_Buf[0] << 24) | (I2C_Buf[1] << 16) | (I2C_Buf[2] << 8);
    379e:	7872      	ldrb	r2, [r6, #1]
    37a0:	7833      	ldrb	r3, [r6, #0]
    37a2:	0412      	lsls	r2, r2, #16
    37a4:	061b      	lsls	r3, r3, #24
    37a6:	4313      	orrs	r3, r2
    37a8:	78b2      	ldrb	r2, [r6, #2]
    37aa:	0212      	lsls	r2, r2, #8
    37ac:	4313      	orrs	r3, r2
    37ae:	603b      	str	r3, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:632
	pthisPressure->iTpFast = (I2C_Buf[3] << 8) | I2C_Buf[4];
    37b0:	78f3      	ldrb	r3, [r6, #3]
    37b2:	7932      	ldrb	r2, [r6, #4]
    37b4:	021b      	lsls	r3, r3, #8
    37b6:	4313      	orrs	r3, r2
    37b8:	837b      	strh	r3, [r7, #26]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:638

	// use this line if the MPL3115 is to be used in pressure mode
	//pthisPressure->iPpFast = (I2C_Buf[0] << 16) | (I2C_Buf[1] << 8) | (I2C_Buf[2] << 0);

	return;
}
    37ba:	b003      	add	sp, #12
    37bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37be:	46c0      	nop			; (mov r8, r8)
    37c0:	1fffe2c8 	.word	0x1fffe2c8
    37c4:	1fffe3fc 	.word	0x1fffe3fc

000037c8 <FXOS8700_ReadData>:
FXOS8700_ReadData():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:642

// read FXOS8700 accelerometer and magnetometer data over I2C
void FXOS8700_ReadData(LDD_TDeviceData *DeviceDataPtr, struct AccelSensor *pthisAccel, struct MagSensor *pthisMag)
{
    37c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    37ca:	4647      	mov	r7, r8
    37cc:	b480      	push	{r7}
    37ce:	4688      	mov	r8, r1
    37d0:	b082      	sub	sp, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:646
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXOS8700 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXOS8700_I2C_ADDR);
    37d2:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:642
	return;
}

// read FXOS8700 accelerometer and magnetometer data over I2C
void FXOS8700_ReadData(LDD_TDeviceData *DeviceDataPtr, struct AccelSensor *pthisAccel, struct MagSensor *pthisMag)
{
    37d4:	1c17      	adds	r7, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:646
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXOS8700 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXOS8700_I2C_ADDR);
    37d6:	221e      	movs	r2, #30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:642
	return;
}

// read FXOS8700 accelerometer and magnetometer data over I2C
void FXOS8700_ReadData(LDD_TDeviceData *DeviceDataPtr, struct AccelSensor *pthisAccel, struct MagSensor *pthisMag)
{
    37d8:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:646
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXOS8700 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXOS8700_I2C_ADDR);
    37da:	f00c ff6b 	bl	106b4 <I2C_SelectSlaveDevice>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:648
	// set up the address of the first output register
	I2C_Buf[0] = FXOS8700_OUT_X_MSB;
    37de:	4d40      	ldr	r5, [pc, #256]	; (38e0 <FXOS8700_ReadData+0x118>)
    37e0:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:649
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    37e2:	4c40      	ldr	r4, [pc, #256]	; (38e4 <FXOS8700_ReadData+0x11c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:648
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXOS8700 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXOS8700_I2C_ADDR);
	// set up the address of the first output register
	I2C_Buf[0] = FXOS8700_OUT_X_MSB;
    37e4:	702a      	strb	r2, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:649
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    37e6:	2374      	movs	r3, #116	; 0x74
    37e8:	5ce1      	ldrb	r1, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:650
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 1, LDD_I2C_NO_SEND_STOP);
    37ea:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:649

	// set up the FXOS8700 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXOS8700_I2C_ADDR);
	// set up the address of the first output register
	I2C_Buf[0] = FXOS8700_OUT_X_MSB;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    37ec:	4391      	bics	r1, r2
    37ee:	54e1      	strb	r1, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:650
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 1, LDD_I2C_NO_SEND_STOP);
    37f0:	2201      	movs	r2, #1
    37f2:	1c29      	adds	r1, r5, #0
    37f4:	2300      	movs	r3, #0
    37f6:	f00c fea3 	bl	10540 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:652
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    37fa:	2074      	movs	r0, #116	; 0x74
    37fc:	2101      	movs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:652 (discriminator 1)
    37fe:	5c23      	ldrb	r3, [r4, r0]
    3800:	2274      	movs	r2, #116	; 0x74
    3802:	4219      	tst	r1, r3
    3804:	d0fb      	beq.n	37fe <FXOS8700_ReadData+0x36>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:655

	// read the 12 bytes of sequential sensor data
	mqxglobals.I2C_Status &= ~I2C_RCVD_FLAG;
    3806:	5ca3      	ldrb	r3, [r4, r2]
    3808:	2102      	movs	r1, #2
    380a:	438b      	bics	r3, r1
    380c:	54a3      	strb	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:656
	I2C_MasterReceiveBlock(DeviceDataPtr, I2C_Buf, 12, LDD_I2C_SEND_STOP);
    380e:	1c29      	adds	r1, r5, #0
    3810:	220c      	movs	r2, #12
    3812:	1c30      	adds	r0, r6, #0
    3814:	2301      	movs	r3, #1
    3816:	f00c fef1 	bl	105fc <I2C_MasterReceiveBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:658
	// wait until the I2C received callback function sets the received flag
	while ((mqxglobals.I2C_Status & I2C_RCVD_FLAG) == 0);
    381a:	2174      	movs	r1, #116	; 0x74
    381c:	2202      	movs	r2, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:658 (discriminator 1)
    381e:	5c63      	ldrb	r3, [r4, r1]
    3820:	421a      	tst	r2, r3
    3822:	d0fc      	beq.n	381e <FXOS8700_ReadData+0x56>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:662 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    3824:	1c30      	adds	r0, r6, #0
    3826:	4669      	mov	r1, sp
    3828:	f00c ff8a 	bl	10740 <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:663 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    382c:	466a      	mov	r2, sp
    382e:	7813      	ldrb	r3, [r2, #0]
    3830:	2b01      	cmp	r3, #1
    3832:	d1f7      	bne.n	3824 <FXOS8700_ReadData+0x5c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:666

	// place the 12 bytes read into the 16 bit accelerometer and magnetometer structures
	pthisAccel->iGpFast[X] = (I2C_Buf[0] << 8) | I2C_Buf[1];
    3834:	782e      	ldrb	r6, [r5, #0]
    3836:	786b      	ldrb	r3, [r5, #1]
    3838:	0236      	lsls	r6, r6, #8
    383a:	431e      	orrs	r6, r3
    383c:	4643      	mov	r3, r8
    383e:	851e      	strh	r6, [r3, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:667
	pthisAccel->iGpFast[Y] = (I2C_Buf[2] << 8) | I2C_Buf[3];
    3840:	78ac      	ldrb	r4, [r5, #2]
    3842:	78eb      	ldrb	r3, [r5, #3]
    3844:	0224      	lsls	r4, r4, #8
    3846:	4642      	mov	r2, r8
    3848:	431c      	orrs	r4, r3
    384a:	8554      	strh	r4, [r2, #42]	; 0x2a
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:668
	pthisAccel->iGpFast[Z] = (I2C_Buf[4] << 8) | I2C_Buf[5];
    384c:	7928      	ldrb	r0, [r5, #4]
    384e:	796b      	ldrb	r3, [r5, #5]
    3850:	0200      	lsls	r0, r0, #8
    3852:	4318      	orrs	r0, r3
    3854:	8590      	strh	r0, [r2, #44]	; 0x2c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:669
	pthisMag->iBpFast[X] = (I2C_Buf[6] << 8) | I2C_Buf[7];
    3856:	79a9      	ldrb	r1, [r5, #6]
    3858:	79eb      	ldrb	r3, [r5, #7]
    385a:	0209      	lsls	r1, r1, #8
    385c:	4319      	orrs	r1, r3
    385e:	2344      	movs	r3, #68	; 0x44
    3860:	52f9      	strh	r1, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:670
	pthisMag->iBpFast[Y] = (I2C_Buf[8] << 8) | I2C_Buf[9];
    3862:	7a2a      	ldrb	r2, [r5, #8]
    3864:	7a6b      	ldrb	r3, [r5, #9]
    3866:	0212      	lsls	r2, r2, #8
    3868:	431a      	orrs	r2, r3
    386a:	2346      	movs	r3, #70	; 0x46
    386c:	52fa      	strh	r2, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:671
	pthisMag->iBpFast[Z] = (I2C_Buf[10] << 8) | I2C_Buf[11];
    386e:	7aab      	ldrb	r3, [r5, #10]
    3870:	7aed      	ldrb	r5, [r5, #11]
    3872:	021b      	lsls	r3, r3, #8
    3874:	432b      	orrs	r3, r5
    3876:	2548      	movs	r5, #72	; 0x48
    3878:	537b      	strh	r3, [r7, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:675

	// finally check for -32768 in the accelerometer and magnetometer data since
	// this value cannot be negated in a later HAL operation
	if (pthisAccel->iGpFast[X] == -32768) pthisAccel->iGpFast[X]++;
    387a:	4d1b      	ldr	r5, [pc, #108]	; (38e8 <FXOS8700_ReadData+0x120>)
    387c:	b236      	sxth	r6, r6
    387e:	42ae      	cmp	r6, r5
    3880:	d02a      	beq.n	38d8 <FXOS8700_ReadData+0x110>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:676
	if (pthisAccel->iGpFast[Y] == -32768) pthisAccel->iGpFast[Y]++;
    3882:	4d19      	ldr	r5, [pc, #100]	; (38e8 <FXOS8700_ReadData+0x120>)
    3884:	b224      	sxth	r4, r4
    3886:	42ac      	cmp	r4, r5
    3888:	d022      	beq.n	38d0 <FXOS8700_ReadData+0x108>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:677
	if (pthisAccel->iGpFast[Z] == -32768) pthisAccel->iGpFast[Z]++;
    388a:	4c17      	ldr	r4, [pc, #92]	; (38e8 <FXOS8700_ReadData+0x120>)
    388c:	b200      	sxth	r0, r0
    388e:	42a0      	cmp	r0, r4
    3890:	d01a      	beq.n	38c8 <FXOS8700_ReadData+0x100>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:678
	if (pthisMag->iBpFast[X] == -32768) pthisMag->iBpFast[X]++;
    3892:	4815      	ldr	r0, [pc, #84]	; (38e8 <FXOS8700_ReadData+0x120>)
    3894:	b209      	sxth	r1, r1
    3896:	4281      	cmp	r1, r0
    3898:	d012      	beq.n	38c0 <FXOS8700_ReadData+0xf8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:679
	if (pthisMag->iBpFast[Y] == -32768) pthisMag->iBpFast[Y]++;
    389a:	4913      	ldr	r1, [pc, #76]	; (38e8 <FXOS8700_ReadData+0x120>)
    389c:	b212      	sxth	r2, r2
    389e:	428a      	cmp	r2, r1
    38a0:	d00a      	beq.n	38b8 <FXOS8700_ReadData+0xf0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:680
	if (pthisMag->iBpFast[Z] == -32768) pthisMag->iBpFast[Z]++;
    38a2:	4a11      	ldr	r2, [pc, #68]	; (38e8 <FXOS8700_ReadData+0x120>)
    38a4:	b21b      	sxth	r3, r3
    38a6:	4293      	cmp	r3, r2
    38a8:	d102      	bne.n	38b0 <FXOS8700_ReadData+0xe8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:680 (discriminator 1)
    38aa:	4a10      	ldr	r2, [pc, #64]	; (38ec <FXOS8700_ReadData+0x124>)
    38ac:	2348      	movs	r3, #72	; 0x48
    38ae:	52fa      	strh	r2, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:683

	return;
}
    38b0:	b002      	add	sp, #8
    38b2:	bc04      	pop	{r2}
    38b4:	4690      	mov	r8, r2
    38b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:679 (discriminator 1)
	// this value cannot be negated in a later HAL operation
	if (pthisAccel->iGpFast[X] == -32768) pthisAccel->iGpFast[X]++;
	if (pthisAccel->iGpFast[Y] == -32768) pthisAccel->iGpFast[Y]++;
	if (pthisAccel->iGpFast[Z] == -32768) pthisAccel->iGpFast[Z]++;
	if (pthisMag->iBpFast[X] == -32768) pthisMag->iBpFast[X]++;
	if (pthisMag->iBpFast[Y] == -32768) pthisMag->iBpFast[Y]++;
    38b8:	490c      	ldr	r1, [pc, #48]	; (38ec <FXOS8700_ReadData+0x124>)
    38ba:	2246      	movs	r2, #70	; 0x46
    38bc:	52b9      	strh	r1, [r7, r2]
    38be:	e7f0      	b.n	38a2 <FXOS8700_ReadData+0xda>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:678 (discriminator 1)
	// finally check for -32768 in the accelerometer and magnetometer data since
	// this value cannot be negated in a later HAL operation
	if (pthisAccel->iGpFast[X] == -32768) pthisAccel->iGpFast[X]++;
	if (pthisAccel->iGpFast[Y] == -32768) pthisAccel->iGpFast[Y]++;
	if (pthisAccel->iGpFast[Z] == -32768) pthisAccel->iGpFast[Z]++;
	if (pthisMag->iBpFast[X] == -32768) pthisMag->iBpFast[X]++;
    38c0:	480a      	ldr	r0, [pc, #40]	; (38ec <FXOS8700_ReadData+0x124>)
    38c2:	2144      	movs	r1, #68	; 0x44
    38c4:	5278      	strh	r0, [r7, r1]
    38c6:	e7e8      	b.n	389a <FXOS8700_ReadData+0xd2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:677 (discriminator 1)

	// finally check for -32768 in the accelerometer and magnetometer data since
	// this value cannot be negated in a later HAL operation
	if (pthisAccel->iGpFast[X] == -32768) pthisAccel->iGpFast[X]++;
	if (pthisAccel->iGpFast[Y] == -32768) pthisAccel->iGpFast[Y]++;
	if (pthisAccel->iGpFast[Z] == -32768) pthisAccel->iGpFast[Z]++;
    38c8:	4808      	ldr	r0, [pc, #32]	; (38ec <FXOS8700_ReadData+0x124>)
    38ca:	4646      	mov	r6, r8
    38cc:	85b0      	strh	r0, [r6, #44]	; 0x2c
    38ce:	e7e0      	b.n	3892 <FXOS8700_ReadData+0xca>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:676 (discriminator 1)
	pthisMag->iBpFast[Z] = (I2C_Buf[10] << 8) | I2C_Buf[11];

	// finally check for -32768 in the accelerometer and magnetometer data since
	// this value cannot be negated in a later HAL operation
	if (pthisAccel->iGpFast[X] == -32768) pthisAccel->iGpFast[X]++;
	if (pthisAccel->iGpFast[Y] == -32768) pthisAccel->iGpFast[Y]++;
    38d0:	4c06      	ldr	r4, [pc, #24]	; (38ec <FXOS8700_ReadData+0x124>)
    38d2:	4645      	mov	r5, r8
    38d4:	856c      	strh	r4, [r5, #42]	; 0x2a
    38d6:	e7d8      	b.n	388a <FXOS8700_ReadData+0xc2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:675 (discriminator 1)
	pthisMag->iBpFast[Y] = (I2C_Buf[8] << 8) | I2C_Buf[9];
	pthisMag->iBpFast[Z] = (I2C_Buf[10] << 8) | I2C_Buf[11];

	// finally check for -32768 in the accelerometer and magnetometer data since
	// this value cannot be negated in a later HAL operation
	if (pthisAccel->iGpFast[X] == -32768) pthisAccel->iGpFast[X]++;
    38d8:	4d04      	ldr	r5, [pc, #16]	; (38ec <FXOS8700_ReadData+0x124>)
    38da:	4646      	mov	r6, r8
    38dc:	8535      	strh	r5, [r6, #40]	; 0x28
    38de:	e7d0      	b.n	3882 <FXOS8700_ReadData+0xba>
    38e0:	1fffe2c8 	.word	0x1fffe2c8
    38e4:	1fffe3fc 	.word	0x1fffe3fc
    38e8:	ffff8000 	.word	0xffff8000
    38ec:	ffff8001 	.word	0xffff8001

000038f0 <FXAS21000_ReadData>:
FXAS21000_ReadData():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:687
	return;
}

// read FXAS21000 gyro data over I2C
void FXAS21000_ReadData(LDD_TDeviceData *DeviceDataPtr, struct GyroSensor *pthisGyro, int16 irow)
{
    38f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    38f2:	4647      	mov	r7, r8
    38f4:	b480      	push	{r7}
    38f6:	4688      	mov	r8, r1
    38f8:	b082      	sub	sp, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:691
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXAS21000 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXAS21000_I2C_ADDR);
    38fa:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:687
	return;
}

// read FXAS21000 gyro data over I2C
void FXAS21000_ReadData(LDD_TDeviceData *DeviceDataPtr, struct GyroSensor *pthisGyro, int16 irow)
{
    38fc:	1c17      	adds	r7, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:691
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXAS21000 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXAS21000_I2C_ADDR);
    38fe:	2220      	movs	r2, #32
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:687
	return;
}

// read FXAS21000 gyro data over I2C
void FXAS21000_ReadData(LDD_TDeviceData *DeviceDataPtr, struct GyroSensor *pthisGyro, int16 irow)
{
    3900:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:691
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXAS21000 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXAS21000_I2C_ADDR);
    3902:	f00c fed7 	bl	106b4 <I2C_SelectSlaveDevice>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:694

	// set up the address of the first output register
	I2C_Buf[0] = FXAS21000_DATA_REG;
    3906:	4e31      	ldr	r6, [pc, #196]	; (39cc <FXAS21000_ReadData+0xdc>)
    3908:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:695
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    390a:	4c31      	ldr	r4, [pc, #196]	; (39d0 <FXAS21000_ReadData+0xe0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:694

	// set up the FXAS21000 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXAS21000_I2C_ADDR);

	// set up the address of the first output register
	I2C_Buf[0] = FXAS21000_DATA_REG;
    390c:	7032      	strb	r2, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:695
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    390e:	2374      	movs	r3, #116	; 0x74
    3910:	5ce1      	ldrb	r1, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:696
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 1, LDD_I2C_NO_SEND_STOP);
    3912:	1c28      	adds	r0, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:695
	// set up the FXAS21000 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXAS21000_I2C_ADDR);

	// set up the address of the first output register
	I2C_Buf[0] = FXAS21000_DATA_REG;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3914:	4391      	bics	r1, r2
    3916:	54e1      	strb	r1, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:696
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 1, LDD_I2C_NO_SEND_STOP);
    3918:	2201      	movs	r2, #1
    391a:	1c31      	adds	r1, r6, #0
    391c:	2300      	movs	r3, #0
    391e:	f00c fe0f 	bl	10540 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:698
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    3922:	2074      	movs	r0, #116	; 0x74
    3924:	2101      	movs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:698 (discriminator 1)
    3926:	5c23      	ldrb	r3, [r4, r0]
    3928:	2274      	movs	r2, #116	; 0x74
    392a:	4219      	tst	r1, r3
    392c:	d0fb      	beq.n	3926 <FXAS21000_ReadData+0x36>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:701

	// read the 6 bytes of sequential sensor data
	mqxglobals.I2C_Status &= ~I2C_RCVD_FLAG;
    392e:	5ca3      	ldrb	r3, [r4, r2]
    3930:	2102      	movs	r1, #2
    3932:	438b      	bics	r3, r1
    3934:	54a3      	strb	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:702
	I2C_MasterReceiveBlock(DeviceDataPtr, I2C_Buf, 6, LDD_I2C_SEND_STOP);
    3936:	1c31      	adds	r1, r6, #0
    3938:	2206      	movs	r2, #6
    393a:	1c28      	adds	r0, r5, #0
    393c:	2301      	movs	r3, #1
    393e:	f00c fe5d 	bl	105fc <I2C_MasterReceiveBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:704
	// wait until the I2C received callback function sets the received flag
	while ((mqxglobals.I2C_Status & I2C_RCVD_FLAG) == 0);
    3942:	2174      	movs	r1, #116	; 0x74
    3944:	2202      	movs	r2, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:704 (discriminator 1)
    3946:	5c63      	ldrb	r3, [r4, r1]
    3948:	421a      	tst	r2, r3
    394a:	d0fc      	beq.n	3946 <FXAS21000_ReadData+0x56>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:708 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    394c:	4669      	mov	r1, sp
    394e:	1c28      	adds	r0, r5, #0
    3950:	f00c fef6 	bl	10740 <I2C_CheckBus>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:709 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    3954:	4669      	mov	r1, sp
    3956:	780b      	ldrb	r3, [r1, #0]
    3958:	2b01      	cmp	r3, #1
    395a:	d1f7      	bne.n	394c <FXAS21000_ReadData+0x5c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:712

	// place the read buffer into the 16 bit gyro structure
	pthisGyro->iYpFast[irow][X] = (I2C_Buf[0] << 8) | I2C_Buf[1];
    395c:	7830      	ldrb	r0, [r6, #0]
    395e:	007b      	lsls	r3, r7, #1
    3960:	7874      	ldrb	r4, [r6, #1]
    3962:	19da      	adds	r2, r3, r7
    3964:	0052      	lsls	r2, r2, #1
    3966:	0200      	lsls	r0, r0, #8
    3968:	4442      	add	r2, r8
    396a:	4320      	orrs	r0, r4
    396c:	8390      	strh	r0, [r2, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:713
	pthisGyro->iYpFast[irow][Y] = (I2C_Buf[2] << 8) | I2C_Buf[3];
    396e:	78b0      	ldrb	r0, [r6, #2]
    3970:	78f4      	ldrb	r4, [r6, #3]
    3972:	0200      	lsls	r0, r0, #8
    3974:	4320      	orrs	r0, r4
    3976:	83d0      	strh	r0, [r2, #30]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:714
	pthisGyro->iYpFast[irow][Z] = (I2C_Buf[4] << 8) | I2C_Buf[5];
    3978:	7930      	ldrb	r0, [r6, #4]
    397a:	7974      	ldrb	r4, [r6, #5]
    397c:	0200      	lsls	r0, r0, #8
    397e:	4320      	orrs	r0, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:712
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
	} while (BusState != LDD_I2C_IDLE);

	// place the read buffer into the 16 bit gyro structure
	pthisGyro->iYpFast[irow][X] = (I2C_Buf[0] << 8) | I2C_Buf[1];
    3980:	1c11      	adds	r1, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:714
	pthisGyro->iYpFast[irow][Y] = (I2C_Buf[2] << 8) | I2C_Buf[3];
	pthisGyro->iYpFast[irow][Z] = (I2C_Buf[4] << 8) | I2C_Buf[5];
    3982:	8410      	strh	r0, [r2, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:718

	// finally check for -32768 which cannot be negated in a later HAL operation
	// this value can be obtained during clipping in rapid rotation
	if (pthisGyro->iYpFast[irow][X] == -32768) pthisGyro->iYpFast[irow][X]++;
    3984:	221c      	movs	r2, #28
    3986:	5e88      	ldrsh	r0, [r1, r2]
    3988:	4a12      	ldr	r2, [pc, #72]	; (39d4 <FXAS21000_ReadData+0xe4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:712
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
	} while (BusState != LDD_I2C_IDLE);

	// place the read buffer into the 16 bit gyro structure
	pthisGyro->iYpFast[irow][X] = (I2C_Buf[0] << 8) | I2C_Buf[1];
    398a:	3118      	adds	r1, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:718
	pthisGyro->iYpFast[irow][Y] = (I2C_Buf[2] << 8) | I2C_Buf[3];
	pthisGyro->iYpFast[irow][Z] = (I2C_Buf[4] << 8) | I2C_Buf[5];

	// finally check for -32768 which cannot be negated in a later HAL operation
	// this value can be obtained during clipping in rapid rotation
	if (pthisGyro->iYpFast[irow][X] == -32768) pthisGyro->iYpFast[irow][X]++;
    398c:	4290      	cmp	r0, r2
    398e:	d01a      	beq.n	39c6 <FXAS21000_ReadData+0xd6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:719
	if (pthisGyro->iYpFast[irow][Y] == -32768) pthisGyro->iYpFast[irow][Y]++;
    3990:	19da      	adds	r2, r3, r7
    3992:	0052      	lsls	r2, r2, #1
    3994:	4442      	add	r2, r8
    3996:	211e      	movs	r1, #30
    3998:	5e50      	ldrsh	r0, [r2, r1]
    399a:	490e      	ldr	r1, [pc, #56]	; (39d4 <FXAS21000_ReadData+0xe4>)
    399c:	321a      	adds	r2, #26
    399e:	4288      	cmp	r0, r1
    39a0:	d00e      	beq.n	39c0 <FXAS21000_ReadData+0xd0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:720
	if (pthisGyro->iYpFast[irow][Z] == -32768) pthisGyro->iYpFast[irow][Z]++;
    39a2:	19db      	adds	r3, r3, r7
    39a4:	005b      	lsls	r3, r3, #1
    39a6:	4443      	add	r3, r8
    39a8:	2220      	movs	r2, #32
    39aa:	5e99      	ldrsh	r1, [r3, r2]
    39ac:	4a09      	ldr	r2, [pc, #36]	; (39d4 <FXAS21000_ReadData+0xe4>)
    39ae:	331c      	adds	r3, #28
    39b0:	4291      	cmp	r1, r2
    39b2:	d101      	bne.n	39b8 <FXAS21000_ReadData+0xc8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:720 (discriminator 1)
    39b4:	4a08      	ldr	r2, [pc, #32]	; (39d8 <FXAS21000_ReadData+0xe8>)
    39b6:	809a      	strh	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:723

	return;
}
    39b8:	b002      	add	sp, #8
    39ba:	bc04      	pop	{r2}
    39bc:	4690      	mov	r8, r2
    39be:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:719 (discriminator 1)
	pthisGyro->iYpFast[irow][Z] = (I2C_Buf[4] << 8) | I2C_Buf[5];

	// finally check for -32768 which cannot be negated in a later HAL operation
	// this value can be obtained during clipping in rapid rotation
	if (pthisGyro->iYpFast[irow][X] == -32768) pthisGyro->iYpFast[irow][X]++;
	if (pthisGyro->iYpFast[irow][Y] == -32768) pthisGyro->iYpFast[irow][Y]++;
    39c0:	4905      	ldr	r1, [pc, #20]	; (39d8 <FXAS21000_ReadData+0xe8>)
    39c2:	8091      	strh	r1, [r2, #4]
    39c4:	e7ed      	b.n	39a2 <FXAS21000_ReadData+0xb2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/drivers.c:718 (discriminator 1)
	pthisGyro->iYpFast[irow][Y] = (I2C_Buf[2] << 8) | I2C_Buf[3];
	pthisGyro->iYpFast[irow][Z] = (I2C_Buf[4] << 8) | I2C_Buf[5];

	// finally check for -32768 which cannot be negated in a later HAL operation
	// this value can be obtained during clipping in rapid rotation
	if (pthisGyro->iYpFast[irow][X] == -32768) pthisGyro->iYpFast[irow][X]++;
    39c6:	4a04      	ldr	r2, [pc, #16]	; (39d8 <FXAS21000_ReadData+0xe8>)
    39c8:	808a      	strh	r2, [r1, #4]
    39ca:	e7e1      	b.n	3990 <FXAS21000_ReadData+0xa0>
    39cc:	1fffe2c8 	.word	0x1fffe2c8
    39d0:	1fffe3fc 	.word	0x1fffe3fc
    39d4:	ffff8000 	.word	0xffff8000
    39d8:	ffff8001 	.word	0xffff8001

000039dc <fInit_6DOF_GY_KALMAN>:
fInit_6DOF_GY_KALMAN():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:140
	return;
} // end fInit_6DOF_GB_BASIC

// function initalizes the 6DOF accel + gyro Kalman filter algorithm
void fInit_6DOF_GY_KALMAN(struct SV_6DOF_GY_KALMAN *pthisSV, int16 iSensorFS, int16 iOverSampleRatio)
{
    39dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:144
	int8 i, j;				// loop counters

	// reset the flag denoting that a first 6DOF orientation lock has been achieved
	pthisSV->iFirstOrientationLock = 0;
    39de:	4be1      	ldr	r3, [pc, #900]	; (3d64 <fInit_6DOF_GY_KALMAN+0x388>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:140
	return;
} // end fInit_6DOF_GB_BASIC

// function initalizes the 6DOF accel + gyro Kalman filter algorithm
void fInit_6DOF_GY_KALMAN(struct SV_6DOF_GY_KALMAN *pthisSV, int16 iSensorFS, int16 iOverSampleRatio)
{
    39e0:	464f      	mov	r7, r9
    39e2:	4646      	mov	r6, r8
    39e4:	b4c0      	push	{r6, r7}
    39e6:	1c17      	adds	r7, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:144
	int8 i, j;				// loop counters

	// reset the flag denoting that a first 6DOF orientation lock has been achieved
	pthisSV->iFirstOrientationLock = 0;
    39e8:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:140
	return;
} // end fInit_6DOF_GB_BASIC

// function initalizes the 6DOF accel + gyro Kalman filter algorithm
void fInit_6DOF_GY_KALMAN(struct SV_6DOF_GY_KALMAN *pthisSV, int16 iSensorFS, int16 iOverSampleRatio)
{
    39ea:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:144
	int8 i, j;				// loop counters

	// reset the flag denoting that a first 6DOF orientation lock has been achieved
	pthisSV->iFirstOrientationLock = 0;
    39ec:	52c2      	strh	r2, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:147

	// compute and store useful product terms to save floating point calculations later
	pthisSV->fFastdeltat = 1.0F / (float) iSensorFS;
    39ee:	1c08      	adds	r0, r1, #0
    39f0:	f7fd fc90 	bl	1314 <__aeabi_i2f>
    39f4:	1c01      	adds	r1, r0, #0
    39f6:	20fe      	movs	r0, #254	; 0xfe
    39f8:	0580      	lsls	r0, r0, #22
    39fa:	f7fc ffe7 	bl	9cc <__aeabi_fdiv>
    39fe:	4bda      	ldr	r3, [pc, #872]	; (3d68 <fInit_6DOF_GY_KALMAN+0x38c>)
    3a00:	1c05      	adds	r5, r0, #0
    3a02:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:148
	pthisSV->fdeltat = (float) iOverSampleRatio * pthisSV->fFastdeltat;
    3a04:	1c38      	adds	r0, r7, #0
    3a06:	f7fd fc85 	bl	1314 <__aeabi_i2f>
    3a0a:	1c01      	adds	r1, r0, #0
    3a0c:	1c28      	adds	r0, r5, #0
    3a0e:	f7fd f9c1 	bl	d94 <__aeabi_fmul>
    3a12:	2390      	movs	r3, #144	; 0x90
    3a14:	00db      	lsls	r3, r3, #3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:149
	pthisSV->fdeltatsq = pthisSV->fdeltat * pthisSV->fdeltat;
    3a16:	4ad5      	ldr	r2, [pc, #852]	; (3d6c <fInit_6DOF_GY_KALMAN+0x390>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:148
	// reset the flag denoting that a first 6DOF orientation lock has been achieved
	pthisSV->iFirstOrientationLock = 0;

	// compute and store useful product terms to save floating point calculations later
	pthisSV->fFastdeltat = 1.0F / (float) iSensorFS;
	pthisSV->fdeltat = (float) iOverSampleRatio * pthisSV->fFastdeltat;
    3a18:	1c01      	adds	r1, r0, #0
    3a1a:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:149
	pthisSV->fdeltatsq = pthisSV->fdeltat * pthisSV->fdeltat;
    3a1c:	4691      	mov	r9, r2
    3a1e:	f7fd f9b9 	bl	d94 <__aeabi_fmul>
    3a22:	464b      	mov	r3, r9
    3a24:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:150
	pthisSV->fcasq = FCA_6DOF_GY_KALMAN * FCA_6DOF_GY_KALMAN;
    3a26:	27fa      	movs	r7, #250	; 0xfa
    3a28:	238f      	movs	r3, #143	; 0x8f
    3a2a:	05bf      	lsls	r7, r7, #22
    3a2c:	00db      	lsls	r3, r3, #3
    3a2e:	50e7      	str	r7, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:151
	pthisSV->fQwbplusQvG = FQWB_6DOF_GY_KALMAN + FQVG_6DOF_GY_KALMAN;
    3a30:	4acf      	ldr	r2, [pc, #828]	; (3d70 <fInit_6DOF_GY_KALMAN+0x394>)
    3a32:	2391      	movs	r3, #145	; 0x91
    3a34:	00db      	lsls	r3, r3, #3
    3a36:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:158
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fC3x9[i][j]= 0.0F;
    3a38:	4bce      	ldr	r3, [pc, #824]	; (3d74 <fInit_6DOF_GY_KALMAN+0x398>)
    3a3a:	2500      	movs	r5, #0
    3a3c:	50e5      	str	r5, [r4, r3]
    3a3e:	2382      	movs	r3, #130	; 0x82
    3a40:	00db      	lsls	r3, r3, #3
    3a42:	50e5      	str	r5, [r4, r3]
    3a44:	4bcc      	ldr	r3, [pc, #816]	; (3d78 <fInit_6DOF_GY_KALMAN+0x39c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:151
	// compute and store useful product terms to save floating point calculations later
	pthisSV->fFastdeltat = 1.0F / (float) iSensorFS;
	pthisSV->fdeltat = (float) iOverSampleRatio * pthisSV->fFastdeltat;
	pthisSV->fdeltatsq = pthisSV->fdeltat * pthisSV->fdeltat;
	pthisSV->fcasq = FCA_6DOF_GY_KALMAN * FCA_6DOF_GY_KALMAN;
	pthisSV->fQwbplusQvG = FQWB_6DOF_GY_KALMAN + FQVG_6DOF_GY_KALMAN;
    3a46:	4690      	mov	r8, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:158
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fC3x9[i][j]= 0.0F;
    3a48:	50e5      	str	r5, [r4, r3]
    3a4a:	2383      	movs	r3, #131	; 0x83
    3a4c:	00db      	lsls	r3, r3, #3
    3a4e:	50e5      	str	r5, [r4, r3]
    3a50:	4bca      	ldr	r3, [pc, #808]	; (3d7c <fInit_6DOF_GY_KALMAN+0x3a0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:161
		}
	}
	pthisSV->fC3x9[0][6] = pthisSV->fC3x9[1][7] = pthisSV->fC3x9[2][8] = 1.0F;
    3a52:	4acb      	ldr	r2, [pc, #812]	; (3d80 <fInit_6DOF_GY_KALMAN+0x3a4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:158
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fC3x9[i][j]= 0.0F;
    3a54:	50e5      	str	r5, [r4, r3]
    3a56:	2384      	movs	r3, #132	; 0x84
    3a58:	00db      	lsls	r3, r3, #3
    3a5a:	50e5      	str	r5, [r4, r3]
    3a5c:	2385      	movs	r3, #133	; 0x85
    3a5e:	00db      	lsls	r3, r3, #3
    3a60:	50e5      	str	r5, [r4, r3]
    3a62:	4bc8      	ldr	r3, [pc, #800]	; (3d84 <fInit_6DOF_GY_KALMAN+0x3a8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:164
		}
	}
	pthisSV->fC3x9[0][6] = pthisSV->fC3x9[1][7] = pthisSV->fC3x9[2][8] = 1.0F;

	// zero a posteriori orientation, error vector xe+ (thetae+, be+, ae+) and b+
	f3x3matrixAeqI(pthisSV->fRPl);
    3a64:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:158
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fC3x9[i][j]= 0.0F;
    3a66:	50e5      	str	r5, [r4, r3]
    3a68:	2386      	movs	r3, #134	; 0x86
    3a6a:	00db      	lsls	r3, r3, #3
    3a6c:	50e5      	str	r5, [r4, r3]
    3a6e:	4bc6      	ldr	r3, [pc, #792]	; (3d88 <fInit_6DOF_GY_KALMAN+0x3ac>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:164
		}
	}
	pthisSV->fC3x9[0][6] = pthisSV->fC3x9[1][7] = pthisSV->fC3x9[2][8] = 1.0F;

	// zero a posteriori orientation, error vector xe+ (thetae+, be+, ae+) and b+
	f3x3matrixAeqI(pthisSV->fRPl);
    3a70:	3014      	adds	r0, #20
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:158
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fC3x9[i][j]= 0.0F;
    3a72:	50e5      	str	r5, [r4, r3]
    3a74:	2387      	movs	r3, #135	; 0x87
    3a76:	00db      	lsls	r3, r3, #3
    3a78:	50e5      	str	r5, [r4, r3]
    3a7a:	4bc4      	ldr	r3, [pc, #784]	; (3d8c <fInit_6DOF_GY_KALMAN+0x3b0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:144
void fInit_6DOF_GY_KALMAN(struct SV_6DOF_GY_KALMAN *pthisSV, int16 iSensorFS, int16 iOverSampleRatio)
{
	int8 i, j;				// loop counters

	// reset the flag denoting that a first 6DOF orientation lock has been achieved
	pthisSV->iFirstOrientationLock = 0;
    3a7c:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:158
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fC3x9[i][j]= 0.0F;
    3a7e:	50e5      	str	r5, [r4, r3]
    3a80:	2388      	movs	r3, #136	; 0x88
    3a82:	00db      	lsls	r3, r3, #3
    3a84:	50e5      	str	r5, [r4, r3]
    3a86:	4bc2      	ldr	r3, [pc, #776]	; (3d90 <fInit_6DOF_GY_KALMAN+0x3b4>)
    3a88:	50e5      	str	r5, [r4, r3]
    3a8a:	2389      	movs	r3, #137	; 0x89
    3a8c:	00db      	lsls	r3, r3, #3
    3a8e:	50e5      	str	r5, [r4, r3]
    3a90:	238a      	movs	r3, #138	; 0x8a
    3a92:	00db      	lsls	r3, r3, #3
    3a94:	50e5      	str	r5, [r4, r3]
    3a96:	4bbf      	ldr	r3, [pc, #764]	; (3d94 <fInit_6DOF_GY_KALMAN+0x3b8>)
    3a98:	50e5      	str	r5, [r4, r3]
    3a9a:	238b      	movs	r3, #139	; 0x8b
    3a9c:	00db      	lsls	r3, r3, #3
    3a9e:	50e5      	str	r5, [r4, r3]
    3aa0:	4bbd      	ldr	r3, [pc, #756]	; (3d98 <fInit_6DOF_GY_KALMAN+0x3bc>)
    3aa2:	50e5      	str	r5, [r4, r3]
    3aa4:	238c      	movs	r3, #140	; 0x8c
    3aa6:	00db      	lsls	r3, r3, #3
    3aa8:	50e5      	str	r5, [r4, r3]
    3aaa:	4bbc      	ldr	r3, [pc, #752]	; (3d9c <fInit_6DOF_GY_KALMAN+0x3c0>)
    3aac:	50e5      	str	r5, [r4, r3]
    3aae:	238d      	movs	r3, #141	; 0x8d
    3ab0:	00db      	lsls	r3, r3, #3
    3ab2:	50e5      	str	r5, [r4, r3]
    3ab4:	4bba      	ldr	r3, [pc, #744]	; (3da0 <fInit_6DOF_GY_KALMAN+0x3c4>)
    3ab6:	50e5      	str	r5, [r4, r3]
    3ab8:	238e      	movs	r3, #142	; 0x8e
    3aba:	00db      	lsls	r3, r3, #3
    3abc:	50e5      	str	r5, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:161
		}
	}
	pthisSV->fC3x9[0][6] = pthisSV->fC3x9[1][7] = pthisSV->fC3x9[2][8] = 1.0F;
    3abe:	23fe      	movs	r3, #254	; 0xfe
    3ac0:	059b      	lsls	r3, r3, #22
    3ac2:	50a3      	str	r3, [r4, r2]
    3ac4:	4ab7      	ldr	r2, [pc, #732]	; (3da4 <fInit_6DOF_GY_KALMAN+0x3c8>)
    3ac6:	50a3      	str	r3, [r4, r2]
    3ac8:	4ab7      	ldr	r2, [pc, #732]	; (3da8 <fInit_6DOF_GY_KALMAN+0x3cc>)
    3aca:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:164

	// zero a posteriori orientation, error vector xe+ (thetae+, be+, ae+) and b+
	f3x3matrixAeqI(pthisSV->fRPl);
    3acc:	f007 fe0c 	bl	b6e8 <f3x3matrixAeqI>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:165
	fqAeq1(&(pthisSV->fqPl));
    3ad0:	1c20      	adds	r0, r4, #0
    3ad2:	3038      	adds	r0, #56	; 0x38
    3ad4:	f00a fb32 	bl	e13c <fqAeq1>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:168
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = pthisSV->fbPl[i] = 0.0F;
    3ad8:	1c23      	adds	r3, r4, #0
    3ada:	3364      	adds	r3, #100	; 0x64
    3adc:	701e      	strb	r6, [r3, #0]
    3ade:	705e      	strb	r6, [r3, #1]
    3ae0:	709e      	strb	r6, [r3, #2]
    3ae2:	70de      	strb	r6, [r3, #3]
    3ae4:	711e      	strb	r6, [r3, #4]
    3ae6:	715e      	strb	r6, [r3, #5]
    3ae8:	719e      	strb	r6, [r3, #6]
    3aea:	71de      	strb	r6, [r3, #7]
    3aec:	721e      	strb	r6, [r3, #8]
    3aee:	725e      	strb	r6, [r3, #9]
    3af0:	729e      	strb	r6, [r3, #10]
    3af2:	72de      	strb	r6, [r3, #11]
    3af4:	3380      	adds	r3, #128	; 0x80
    3af6:	701e      	strb	r6, [r3, #0]
    3af8:	705e      	strb	r6, [r3, #1]
    3afa:	709e      	strb	r6, [r3, #2]
    3afc:	70de      	strb	r6, [r3, #3]
    3afe:	711e      	strb	r6, [r3, #4]
    3b00:	715e      	strb	r6, [r3, #5]
    3b02:	719e      	strb	r6, [r3, #6]
    3b04:	71de      	strb	r6, [r3, #7]
    3b06:	721e      	strb	r6, [r3, #8]
    3b08:	725e      	strb	r6, [r3, #9]
    3b0a:	729e      	strb	r6, [r3, #10]
    3b0c:	72de      	strb	r6, [r3, #11]
    3b0e:	3b68      	subs	r3, #104	; 0x68
    3b10:	701e      	strb	r6, [r3, #0]
    3b12:	705e      	strb	r6, [r3, #1]
    3b14:	709e      	strb	r6, [r3, #2]
    3b16:	70de      	strb	r6, [r3, #3]
    3b18:	711e      	strb	r6, [r3, #4]
    3b1a:	715e      	strb	r6, [r3, #5]
    3b1c:	719e      	strb	r6, [r3, #6]
    3b1e:	71de      	strb	r6, [r3, #7]
    3b20:	721e      	strb	r6, [r3, #8]
    3b22:	725e      	strb	r6, [r3, #9]
    3b24:	729e      	strb	r6, [r3, #10]
    3b26:	72de      	strb	r6, [r3, #11]
    3b28:	3b0c      	subs	r3, #12
    3b2a:	701e      	strb	r6, [r3, #0]
    3b2c:	705e      	strb	r6, [r3, #1]
    3b2e:	709e      	strb	r6, [r3, #2]
    3b30:	70de      	strb	r6, [r3, #3]
    3b32:	711e      	strb	r6, [r3, #4]
    3b34:	715e      	strb	r6, [r3, #5]
    3b36:	719e      	strb	r6, [r3, #6]
    3b38:	71de      	strb	r6, [r3, #7]
    3b3a:	721e      	strb	r6, [r3, #8]
    3b3c:	725e      	strb	r6, [r3, #9]
    3b3e:	729e      	strb	r6, [r3, #10]
    3b40:	72de      	strb	r6, [r3, #11]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:173
	}

	// initialize noise variance for Qv and Qw matrix updates
	pthisSV->fQvAA = FQVA_6DOF_GY_KALMAN + FQWA_6DOF_GY_KALMAN + 
			FDEGTORAD * FDEGTORAD * pthisSV->fdeltatsq * (FQWB_6DOF_GY_KALMAN + FQVG_6DOF_GY_KALMAN);
    3b42:	464b      	mov	r3, r9
    3b44:	58e0      	ldr	r0, [r4, r3]
    3b46:	4999      	ldr	r1, [pc, #612]	; (3dac <fInit_6DOF_GY_KALMAN+0x3d0>)
    3b48:	f7fd f924 	bl	d94 <__aeabi_fmul>
    3b4c:	4641      	mov	r1, r8
    3b4e:	f7fd f921 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:172
	{
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = pthisSV->fbPl[i] = 0.0F;
	}

	// initialize noise variance for Qv and Qw matrix updates
	pthisSV->fQvAA = FQVA_6DOF_GY_KALMAN + FQWA_6DOF_GY_KALMAN + 
    3b52:	4997      	ldr	r1, [pc, #604]	; (3db0 <fInit_6DOF_GY_KALMAN+0x3d4>)
    3b54:	f7fc fdce 	bl	6f4 <__aeabi_fadd>
    3b58:	238a      	movs	r3, #138	; 0x8a
    3b5a:	005b      	lsls	r3, r3, #1
    3b5c:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:182
	// zero the matrix Qw
	for (i = 0; i < 9; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fQw9x9[i][j] = 0.0F;
    3b5e:	23b3      	movs	r3, #179	; 0xb3
    3b60:	009b      	lsls	r3, r3, #2
    3b62:	50e5      	str	r5, [r4, r3]
    3b64:	23b4      	movs	r3, #180	; 0xb4
    3b66:	009b      	lsls	r3, r3, #2
    3b68:	50e5      	str	r5, [r4, r3]
    3b6a:	23b6      	movs	r3, #182	; 0xb6
    3b6c:	009b      	lsls	r3, r3, #2
    3b6e:	50e5      	str	r5, [r4, r3]
    3b70:	23b7      	movs	r3, #183	; 0xb7
    3b72:	009b      	lsls	r3, r3, #2
    3b74:	50e5      	str	r5, [r4, r3]
    3b76:	23b8      	movs	r3, #184	; 0xb8
    3b78:	009b      	lsls	r3, r3, #2
    3b7a:	50e5      	str	r5, [r4, r3]
    3b7c:	23b9      	movs	r3, #185	; 0xb9
    3b7e:	009b      	lsls	r3, r3, #2
    3b80:	50e5      	str	r5, [r4, r3]
    3b82:	23ba      	movs	r3, #186	; 0xba
    3b84:	009b      	lsls	r3, r3, #2
    3b86:	50e5      	str	r5, [r4, r3]
    3b88:	23bb      	movs	r3, #187	; 0xbb
    3b8a:	009b      	lsls	r3, r3, #2
    3b8c:	50e5      	str	r5, [r4, r3]
    3b8e:	23bd      	movs	r3, #189	; 0xbd
    3b90:	009b      	lsls	r3, r3, #2
    3b92:	50e5      	str	r5, [r4, r3]
    3b94:	23be      	movs	r3, #190	; 0xbe
    3b96:	009b      	lsls	r3, r3, #2
    3b98:	50e5      	str	r5, [r4, r3]
    3b9a:	23c0      	movs	r3, #192	; 0xc0
    3b9c:	009b      	lsls	r3, r3, #2
    3b9e:	50e5      	str	r5, [r4, r3]
    3ba0:	23c1      	movs	r3, #193	; 0xc1
    3ba2:	009b      	lsls	r3, r3, #2
    3ba4:	50e5      	str	r5, [r4, r3]
    3ba6:	23c2      	movs	r3, #194	; 0xc2
    3ba8:	009b      	lsls	r3, r3, #2
    3baa:	50e5      	str	r5, [r4, r3]
    3bac:	23c3      	movs	r3, #195	; 0xc3
    3bae:	009b      	lsls	r3, r3, #2
    3bb0:	50e5      	str	r5, [r4, r3]
    3bb2:	23c4      	movs	r3, #196	; 0xc4
    3bb4:	009b      	lsls	r3, r3, #2
    3bb6:	50e5      	str	r5, [r4, r3]
    3bb8:	23c5      	movs	r3, #197	; 0xc5
    3bba:	009b      	lsls	r3, r3, #2
    3bbc:	50e5      	str	r5, [r4, r3]
    3bbe:	23c7      	movs	r3, #199	; 0xc7
    3bc0:	009b      	lsls	r3, r3, #2
    3bc2:	50e5      	str	r5, [r4, r3]
    3bc4:	23c8      	movs	r3, #200	; 0xc8
    3bc6:	009b      	lsls	r3, r3, #2
    3bc8:	50e5      	str	r5, [r4, r3]
    3bca:	23ca      	movs	r3, #202	; 0xca
    3bcc:	009b      	lsls	r3, r3, #2
    3bce:	50e5      	str	r5, [r4, r3]
    3bd0:	23cb      	movs	r3, #203	; 0xcb
    3bd2:	009b      	lsls	r3, r3, #2
    3bd4:	50e5      	str	r5, [r4, r3]
    3bd6:	23cc      	movs	r3, #204	; 0xcc
    3bd8:	009b      	lsls	r3, r3, #2
    3bda:	50e5      	str	r5, [r4, r3]
    3bdc:	23ce      	movs	r3, #206	; 0xce
    3bde:	009b      	lsls	r3, r3, #2
    3be0:	50e5      	str	r5, [r4, r3]
    3be2:	23cf      	movs	r3, #207	; 0xcf
    3be4:	009b      	lsls	r3, r3, #2
    3be6:	50e5      	str	r5, [r4, r3]
    3be8:	23d1      	movs	r3, #209	; 0xd1
    3bea:	009b      	lsls	r3, r3, #2
    3bec:	50e5      	str	r5, [r4, r3]
    3bee:	23d2      	movs	r3, #210	; 0xd2
    3bf0:	009b      	lsls	r3, r3, #2
    3bf2:	50e5      	str	r5, [r4, r3]
    3bf4:	23d3      	movs	r3, #211	; 0xd3
    3bf6:	009b      	lsls	r3, r3, #2
    3bf8:	50e5      	str	r5, [r4, r3]
    3bfa:	23d4      	movs	r3, #212	; 0xd4
    3bfc:	009b      	lsls	r3, r3, #2
    3bfe:	50e5      	str	r5, [r4, r3]
    3c00:	23d5      	movs	r3, #213	; 0xd5
    3c02:	009b      	lsls	r3, r3, #2
    3c04:	50e5      	str	r5, [r4, r3]
    3c06:	23d6      	movs	r3, #214	; 0xd6
    3c08:	009b      	lsls	r3, r3, #2
    3c0a:	50e5      	str	r5, [r4, r3]
    3c0c:	23d8      	movs	r3, #216	; 0xd8
    3c0e:	009b      	lsls	r3, r3, #2
    3c10:	50e5      	str	r5, [r4, r3]
    3c12:	23d9      	movs	r3, #217	; 0xd9
    3c14:	009b      	lsls	r3, r3, #2
    3c16:	50e5      	str	r5, [r4, r3]
    3c18:	23db      	movs	r3, #219	; 0xdb
    3c1a:	009b      	lsls	r3, r3, #2
    3c1c:	50e5      	str	r5, [r4, r3]
    3c1e:	23dc      	movs	r3, #220	; 0xdc
    3c20:	009b      	lsls	r3, r3, #2
    3c22:	50e5      	str	r5, [r4, r3]
    3c24:	23dd      	movs	r3, #221	; 0xdd
    3c26:	009b      	lsls	r3, r3, #2
    3c28:	50e5      	str	r5, [r4, r3]
    3c2a:	23de      	movs	r3, #222	; 0xde
    3c2c:	009b      	lsls	r3, r3, #2
    3c2e:	50e5      	str	r5, [r4, r3]
    3c30:	23df      	movs	r3, #223	; 0xdf
    3c32:	009b      	lsls	r3, r3, #2
    3c34:	50e5      	str	r5, [r4, r3]
    3c36:	23e0      	movs	r3, #224	; 0xe0
    3c38:	009b      	lsls	r3, r3, #2
    3c3a:	50e5      	str	r5, [r4, r3]
    3c3c:	23e2      	movs	r3, #226	; 0xe2
    3c3e:	009b      	lsls	r3, r3, #2
    3c40:	50e5      	str	r5, [r4, r3]
    3c42:	23e3      	movs	r3, #227	; 0xe3
    3c44:	009b      	lsls	r3, r3, #2
    3c46:	50e5      	str	r5, [r4, r3]
    3c48:	23e5      	movs	r3, #229	; 0xe5
    3c4a:	009b      	lsls	r3, r3, #2
    3c4c:	50e5      	str	r5, [r4, r3]
    3c4e:	23e6      	movs	r3, #230	; 0xe6
    3c50:	009b      	lsls	r3, r3, #2
    3c52:	50e5      	str	r5, [r4, r3]
    3c54:	23e7      	movs	r3, #231	; 0xe7
    3c56:	009b      	lsls	r3, r3, #2
    3c58:	50e5      	str	r5, [r4, r3]
    3c5a:	23e8      	movs	r3, #232	; 0xe8
    3c5c:	009b      	lsls	r3, r3, #2
    3c5e:	50e5      	str	r5, [r4, r3]
    3c60:	23e9      	movs	r3, #233	; 0xe9
    3c62:	009b      	lsls	r3, r3, #2
    3c64:	50e5      	str	r5, [r4, r3]
    3c66:	23ea      	movs	r3, #234	; 0xea
    3c68:	009b      	lsls	r3, r3, #2
    3c6a:	50e5      	str	r5, [r4, r3]
    3c6c:	23eb      	movs	r3, #235	; 0xeb
    3c6e:	009b      	lsls	r3, r3, #2
    3c70:	50e5      	str	r5, [r4, r3]
    3c72:	23ec      	movs	r3, #236	; 0xec
    3c74:	009b      	lsls	r3, r3, #2
    3c76:	50e5      	str	r5, [r4, r3]
    3c78:	23ed      	movs	r3, #237	; 0xed
    3c7a:	009b      	lsls	r3, r3, #2
    3c7c:	50e5      	str	r5, [r4, r3]
    3c7e:	23ef      	movs	r3, #239	; 0xef
    3c80:	009b      	lsls	r3, r3, #2
    3c82:	50e5      	str	r5, [r4, r3]
    3c84:	23f0      	movs	r3, #240	; 0xf0
    3c86:	009b      	lsls	r3, r3, #2
    3c88:	50e5      	str	r5, [r4, r3]
    3c8a:	23f1      	movs	r3, #241	; 0xf1
    3c8c:	009b      	lsls	r3, r3, #2
    3c8e:	50e5      	str	r5, [r4, r3]
    3c90:	23f2      	movs	r3, #242	; 0xf2
    3c92:	009b      	lsls	r3, r3, #2
    3c94:	50e5      	str	r5, [r4, r3]
    3c96:	23f3      	movs	r3, #243	; 0xf3
    3c98:	009b      	lsls	r3, r3, #2
    3c9a:	50e5      	str	r5, [r4, r3]
    3c9c:	23f4      	movs	r3, #244	; 0xf4
    3c9e:	009b      	lsls	r3, r3, #2
    3ca0:	50e5      	str	r5, [r4, r3]
    3ca2:	23f5      	movs	r3, #245	; 0xf5
    3ca4:	009b      	lsls	r3, r3, #2
    3ca6:	50e5      	str	r5, [r4, r3]
    3ca8:	23f6      	movs	r3, #246	; 0xf6
    3caa:	009b      	lsls	r3, r3, #2
    3cac:	50e5      	str	r5, [r4, r3]
    3cae:	23f7      	movs	r3, #247	; 0xf7
    3cb0:	009b      	lsls	r3, r3, #2
    3cb2:	50e5      	str	r5, [r4, r3]
    3cb4:	23f9      	movs	r3, #249	; 0xf9
    3cb6:	009b      	lsls	r3, r3, #2
    3cb8:	50e5      	str	r5, [r4, r3]
    3cba:	23fa      	movs	r3, #250	; 0xfa
    3cbc:	009b      	lsls	r3, r3, #2
    3cbe:	50e5      	str	r5, [r4, r3]
    3cc0:	23fb      	movs	r3, #251	; 0xfb
    3cc2:	009b      	lsls	r3, r3, #2
    3cc4:	50e5      	str	r5, [r4, r3]
    3cc6:	23fc      	movs	r3, #252	; 0xfc
    3cc8:	009b      	lsls	r3, r3, #2
    3cca:	50e5      	str	r5, [r4, r3]
    3ccc:	23fd      	movs	r3, #253	; 0xfd
    3cce:	009b      	lsls	r3, r3, #2
    3cd0:	50e5      	str	r5, [r4, r3]
    3cd2:	23fe      	movs	r3, #254	; 0xfe
    3cd4:	009b      	lsls	r3, r3, #2
    3cd6:	50e5      	str	r5, [r4, r3]
    3cd8:	23ff      	movs	r3, #255	; 0xff
    3cda:	009b      	lsls	r3, r3, #2
    3cdc:	50e5      	str	r5, [r4, r3]
    3cde:	2380      	movs	r3, #128	; 0x80
    3ce0:	00db      	lsls	r3, r3, #3
    3ce2:	50e5      	str	r5, [r4, r3]
    3ce4:	4b33      	ldr	r3, [pc, #204]	; (3db4 <fInit_6DOF_GY_KALMAN+0x3d8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:189
	}
	// loop over non-zero values
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw9x9[i][i] = FQWINITTHTH_6DOF_GY_KALMAN;
    3ce6:	4a34      	ldr	r2, [pc, #208]	; (3db8 <fInit_6DOF_GY_KALMAN+0x3dc>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:182
	// zero the matrix Qw
	for (i = 0; i < 9; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fQw9x9[i][j] = 0.0F;
    3ce8:	50e5      	str	r5, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:189
	}
	// loop over non-zero values
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw9x9[i][i] = FQWINITTHTH_6DOF_GY_KALMAN;
    3cea:	23b2      	movs	r3, #178	; 0xb2
    3cec:	009b      	lsls	r3, r3, #2
    3cee:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:191
		// b_e * b_e terms
		pthisSV->fQw9x9[i + 3][i + 3] = FQWINITBB_6DOF_GY_KALMAN;
    3cf0:	23d0      	movs	r3, #208	; 0xd0
    3cf2:	009b      	lsls	r3, r3, #2
    3cf4:	50e7      	str	r7, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:193
		// th_e * b_e terms
		pthisSV->fQw9x9[i][i + 3] = pthisSV->fQw9x9[i + 3][i] = FQWINITTHB_6DOF_GY_KALMAN;
    3cf6:	23cd      	movs	r3, #205	; 0xcd
    3cf8:	009b      	lsls	r3, r3, #2
    3cfa:	50e5      	str	r5, [r4, r3]
    3cfc:	23b5      	movs	r3, #181	; 0xb5
    3cfe:	009b      	lsls	r3, r3, #2
    3d00:	50e5      	str	r5, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:195
		// a_e * a_e terms
		pthisSV->fQw9x9[i + 6][i + 6] = FQWINITAA_6DOF_GY_KALMAN;
    3d02:	21ee      	movs	r1, #238	; 0xee
    3d04:	4b2d      	ldr	r3, [pc, #180]	; (3dbc <fInit_6DOF_GY_KALMAN+0x3e0>)
    3d06:	0089      	lsls	r1, r1, #2
    3d08:	5063      	str	r3, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:189
	}
	// loop over non-zero values
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw9x9[i][i] = FQWINITTHTH_6DOF_GY_KALMAN;
    3d0a:	21bc      	movs	r1, #188	; 0xbc
    3d0c:	0089      	lsls	r1, r1, #2
    3d0e:	5062      	str	r2, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:191
		// b_e * b_e terms
		pthisSV->fQw9x9[i + 3][i + 3] = FQWINITBB_6DOF_GY_KALMAN;
    3d10:	21da      	movs	r1, #218	; 0xda
    3d12:	0089      	lsls	r1, r1, #2
    3d14:	5067      	str	r7, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:193
		// th_e * b_e terms
		pthisSV->fQw9x9[i][i + 3] = pthisSV->fQw9x9[i + 3][i] = FQWINITTHB_6DOF_GY_KALMAN;
    3d16:	21d7      	movs	r1, #215	; 0xd7
    3d18:	0089      	lsls	r1, r1, #2
    3d1a:	5065      	str	r5, [r4, r1]
    3d1c:	21bf      	movs	r1, #191	; 0xbf
    3d1e:	0089      	lsls	r1, r1, #2
    3d20:	5065      	str	r5, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:195
		// a_e * a_e terms
		pthisSV->fQw9x9[i + 6][i + 6] = FQWINITAA_6DOF_GY_KALMAN;
    3d22:	21f8      	movs	r1, #248	; 0xf8
    3d24:	0089      	lsls	r1, r1, #2
    3d26:	5063      	str	r3, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:189
	}
	// loop over non-zero values
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw9x9[i][i] = FQWINITTHTH_6DOF_GY_KALMAN;
    3d28:	21c6      	movs	r1, #198	; 0xc6
    3d2a:	0089      	lsls	r1, r1, #2
    3d2c:	5062      	str	r2, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:191
		// b_e * b_e terms
		pthisSV->fQw9x9[i + 3][i + 3] = FQWINITBB_6DOF_GY_KALMAN;
    3d2e:	22e4      	movs	r2, #228	; 0xe4
    3d30:	0092      	lsls	r2, r2, #2
    3d32:	50a7      	str	r7, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:193
		// th_e * b_e terms
		pthisSV->fQw9x9[i][i + 3] = pthisSV->fQw9x9[i + 3][i] = FQWINITTHB_6DOF_GY_KALMAN;
    3d34:	22e1      	movs	r2, #225	; 0xe1
    3d36:	0092      	lsls	r2, r2, #2
    3d38:	50a5      	str	r5, [r4, r2]
    3d3a:	22c9      	movs	r2, #201	; 0xc9
    3d3c:	0092      	lsls	r2, r2, #2
    3d3e:	50a5      	str	r5, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:195
		// a_e * a_e terms
		pthisSV->fQw9x9[i + 6][i + 6] = FQWINITAA_6DOF_GY_KALMAN;
    3d40:	2281      	movs	r2, #129	; 0x81
    3d42:	00d2      	lsls	r2, r2, #3
    3d44:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:199
	}

	// update the default quaternion type supported to the most sophisticated
	if (globals.DefaultQuaternionPacketType < Q6AG)
    3d46:	4b1e      	ldr	r3, [pc, #120]	; (3dc0 <fInit_6DOF_GY_KALMAN+0x3e4>)
    3d48:	795a      	ldrb	r2, [r3, #5]
    3d4a:	2a03      	cmp	r2, #3
    3d4c:	d802      	bhi.n	3d54 <fInit_6DOF_GY_KALMAN+0x378>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:200
		globals.QuaternionPacketType = globals.DefaultQuaternionPacketType = Q6AG; 
    3d4e:	2204      	movs	r2, #4
    3d50:	715a      	strb	r2, [r3, #5]
    3d52:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:203

	// clear the reset flag
	pthisSV->resetflag = false;
    3d54:	4b1b      	ldr	r3, [pc, #108]	; (3dc4 <fInit_6DOF_GY_KALMAN+0x3e8>)
    3d56:	2200      	movs	r2, #0
    3d58:	54e2      	strb	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:206

	return;
} // end fInit_6DOF_GY_KALMAN
    3d5a:	bc0c      	pop	{r2, r3}
    3d5c:	4690      	mov	r8, r2
    3d5e:	4699      	mov	r9, r3
    3d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d62:	46c0      	nop			; (mov r8, r8)
    3d64:	0000048c 	.word	0x0000048c
    3d68:	0000047c 	.word	0x0000047c
    3d6c:	00000484 	.word	0x00000484
    3d70:	3e99999a 	.word	0x3e99999a
    3d74:	0000040c 	.word	0x0000040c
    3d78:	00000414 	.word	0x00000414
    3d7c:	0000041c 	.word	0x0000041c
    3d80:	00000474 	.word	0x00000474
    3d84:	0000042c 	.word	0x0000042c
    3d88:	00000434 	.word	0x00000434
    3d8c:	0000043c 	.word	0x0000043c
    3d90:	00000444 	.word	0x00000444
    3d94:	00000454 	.word	0x00000454
    3d98:	0000045c 	.word	0x0000045c
    3d9c:	00000464 	.word	0x00000464
    3da0:	0000046c 	.word	0x0000046c
    3da4:	0000044c 	.word	0x0000044c
    3da8:	00000424 	.word	0x00000424
    3dac:	399fb50f 	.word	0x399fb50f
    3db0:	38d5e8d5 	.word	0x38d5e8d5
    3db4:	00000404 	.word	0x00000404
    3db8:	3ca3d70a 	.word	0x3ca3d70a
    3dbc:	38d1b717 	.word	0x38d1b717
    3dc0:	1fffe478 	.word	0x1fffe478
    3dc4:	0000048e 	.word	0x0000048e

00003dc8 <fInit_9DOF_GBY_KALMAN>:
fInit_9DOF_GBY_KALMAN():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:210

// function initializes the 9DOF Kalman filter
void fInit_9DOF_GBY_KALMAN(struct SV_9DOF_GBY_KALMAN *pthisSV, int16 ithisCoordSystem, int16 iSensorFS, int16 iOverSampleRatio)
{
    3dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dca:	4647      	mov	r7, r8
    3dcc:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:214
	int8 i, j;				// loop counters

	// reset the flag denoting that a first 9DOF orientation lock has been achieved
	pthisSV->iFirstOrientationLock = 0;
    3dce:	4bfd      	ldr	r3, [pc, #1012]	; (41c4 <PSP_CNFG_FP_REGISTERS_EXIST+0x1c4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:210
	return;
} // end fInit_6DOF_GY_KALMAN

// function initializes the 9DOF Kalman filter
void fInit_9DOF_GBY_KALMAN(struct SV_9DOF_GBY_KALMAN *pthisSV, int16 ithisCoordSystem, int16 iSensorFS, int16 iOverSampleRatio)
{
    3dd0:	b480      	push	{r7}
    3dd2:	1c0f      	adds	r7, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:214
	int8 i, j;				// loop counters

	// reset the flag denoting that a first 9DOF orientation lock has been achieved
	pthisSV->iFirstOrientationLock = 0;
    3dd4:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:210
	return;
} // end fInit_6DOF_GY_KALMAN

// function initializes the 9DOF Kalman filter
void fInit_9DOF_GBY_KALMAN(struct SV_9DOF_GBY_KALMAN *pthisSV, int16 ithisCoordSystem, int16 iSensorFS, int16 iOverSampleRatio)
{
    3dd6:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:214
	int8 i, j;				// loop counters

	// reset the flag denoting that a first 9DOF orientation lock has been achieved
	pthisSV->iFirstOrientationLock = 0;
    3dd8:	52c1      	strh	r1, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:217

	// compute and store useful product terms to save floating point calculations later
	pthisSV->fFastdeltat = 1.0F / (float) iSensorFS;
    3dda:	1c10      	adds	r0, r2, #0
    3ddc:	f7fd fa9a 	bl	1314 <__aeabi_i2f>
    3de0:	1c01      	adds	r1, r0, #0
    3de2:	20fe      	movs	r0, #254	; 0xfe
    3de4:	0580      	lsls	r0, r0, #22
    3de6:	f7fc fdf1 	bl	9cc <__aeabi_fdiv>
    3dea:	4bf7      	ldr	r3, [pc, #988]	; (41c8 <PSP_CNFG_FP_REGISTERS_EXIST+0x1c8>)
    3dec:	1c05      	adds	r5, r0, #0
    3dee:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:218
	pthisSV->fdeltat = (float) iOverSampleRatio * pthisSV->fFastdeltat;
    3df0:	4640      	mov	r0, r8
    3df2:	f7fd fa8f 	bl	1314 <__aeabi_i2f>
    3df6:	1c01      	adds	r1, r0, #0
    3df8:	1c28      	adds	r0, r5, #0
    3dfa:	f7fc ffcb 	bl	d94 <__aeabi_fmul>
    3dfe:	4bf3      	ldr	r3, [pc, #972]	; (41cc <PSP_CNFG_FP_REGISTERS_EXIST+0x1cc>)
    3e00:	1c01      	adds	r1, r0, #0
    3e02:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:219
	pthisSV->fdeltatsq = pthisSV->fdeltat * pthisSV->fdeltat;
    3e04:	f7fc ffc6 	bl	d94 <__aeabi_fmul>
    3e08:	4bf1      	ldr	r3, [pc, #964]	; (41d0 <PSP_CNFG_FP_REGISTERS_EXIST+0x1d0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:220
	pthisSV->fcasq = FCA_9DOF_GBY_KALMAN * FCA_9DOF_GBY_KALMAN;
    3e0a:	4af2      	ldr	r2, [pc, #968]	; (41d4 <PSP_CNFG_FP_REGISTERS_EXIST+0x1d4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:219
	pthisSV->iFirstOrientationLock = 0;

	// compute and store useful product terms to save floating point calculations later
	pthisSV->fFastdeltat = 1.0F / (float) iSensorFS;
	pthisSV->fdeltat = (float) iOverSampleRatio * pthisSV->fFastdeltat;
	pthisSV->fdeltatsq = pthisSV->fdeltat * pthisSV->fdeltat;
    3e0c:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:220
	pthisSV->fcasq = FCA_9DOF_GBY_KALMAN * FCA_9DOF_GBY_KALMAN;
    3e0e:	23fa      	movs	r3, #250	; 0xfa
    3e10:	059b      	lsls	r3, r3, #22
    3e12:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:221
	pthisSV->fcdsq = FCD_9DOF_GBY_KALMAN * FCD_9DOF_GBY_KALMAN;
    3e14:	2282      	movs	r2, #130	; 0x82
    3e16:	0112      	lsls	r2, r2, #4
    3e18:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:222
	pthisSV->fQwbplusQvG = FQWB_9DOF_GBY_KALMAN + FQVG_9DOF_GBY_KALMAN;
    3e1a:	4aef      	ldr	r2, [pc, #956]	; (41d8 <PSP_CNFG_FP_REGISTERS_EXIST+0x1d8>)
    3e1c:	2383      	movs	r3, #131	; 0x83
    3e1e:	011b      	lsls	r3, r3, #4
    3e20:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:229
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 6; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fC6x12[i][j]= 0.0F;
    3e22:	23d7      	movs	r3, #215	; 0xd7
    3e24:	2500      	movs	r5, #0
    3e26:	00db      	lsls	r3, r3, #3
    3e28:	50e5      	str	r5, [r4, r3]
    3e2a:	4bec      	ldr	r3, [pc, #944]	; (41dc <PSP_CNFG_FP_REGISTERS_EXIST+0x1dc>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:232
		}
	}
	pthisSV->fC6x12[0][6] = pthisSV->fC6x12[1][7] = pthisSV->fC6x12[2][8] = 1.0F; 
    3e2c:	22e7      	movs	r2, #231	; 0xe7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:229
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 6; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fC6x12[i][j]= 0.0F;
    3e2e:	50e5      	str	r5, [r4, r3]
    3e30:	23d8      	movs	r3, #216	; 0xd8
    3e32:	00db      	lsls	r3, r3, #3
    3e34:	50e5      	str	r5, [r4, r3]
    3e36:	4bea      	ldr	r3, [pc, #936]	; (41e0 <PSP_CNFG_FP_REGISTERS_EXIST+0x1e0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:232
		}
	}
	pthisSV->fC6x12[0][6] = pthisSV->fC6x12[1][7] = pthisSV->fC6x12[2][8] = 1.0F; 
    3e38:	00d2      	lsls	r2, r2, #3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:229
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 6; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fC6x12[i][j]= 0.0F;
    3e3a:	50e5      	str	r5, [r4, r3]
    3e3c:	23d9      	movs	r3, #217	; 0xd9
    3e3e:	00db      	lsls	r3, r3, #3
    3e40:	50e5      	str	r5, [r4, r3]
    3e42:	4be8      	ldr	r3, [pc, #928]	; (41e4 <PSP_CNFG_FP_REGISTERS_EXIST+0x1e4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:236
	}
	pthisSV->fC6x12[0][6] = pthisSV->fC6x12[1][7] = pthisSV->fC6x12[2][8] = 1.0F; 
	pthisSV->fC6x12[3][9] = pthisSV->fC6x12[4][10] = pthisSV->fC6x12[5][11] = -1.0F; 

	// zero a posteriori orientation, error vector xe+ (thetae+, be+, de+, ae+) and b+ and inertial
	f3x3matrixAeqI(pthisSV->fRPl);
    3e44:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:229
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 6; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fC6x12[i][j]= 0.0F;
    3e46:	50e5      	str	r5, [r4, r3]
    3e48:	4be7      	ldr	r3, [pc, #924]	; (41e8 <PSP_CNFG_FP_REGISTERS_EXIST+0x1e8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:236
	}
	pthisSV->fC6x12[0][6] = pthisSV->fC6x12[1][7] = pthisSV->fC6x12[2][8] = 1.0F; 
	pthisSV->fC6x12[3][9] = pthisSV->fC6x12[4][10] = pthisSV->fC6x12[5][11] = -1.0F; 

	// zero a posteriori orientation, error vector xe+ (thetae+, be+, de+, ae+) and b+ and inertial
	f3x3matrixAeqI(pthisSV->fRPl);
    3e4a:	3014      	adds	r0, #20
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:229
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 6; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fC6x12[i][j]= 0.0F;
    3e4c:	50e5      	str	r5, [r4, r3]
    3e4e:	23db      	movs	r3, #219	; 0xdb
    3e50:	00db      	lsls	r3, r3, #3
    3e52:	50e5      	str	r5, [r4, r3]
    3e54:	4be5      	ldr	r3, [pc, #916]	; (41ec <PSP_CNFG_FP_REGISTERS_EXIST+0x1ec>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:214
void fInit_9DOF_GBY_KALMAN(struct SV_9DOF_GBY_KALMAN *pthisSV, int16 ithisCoordSystem, int16 iSensorFS, int16 iOverSampleRatio)
{
	int8 i, j;				// loop counters

	// reset the flag denoting that a first 9DOF orientation lock has been achieved
	pthisSV->iFirstOrientationLock = 0;
    3e56:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:229
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 6; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fC6x12[i][j]= 0.0F;
    3e58:	50e5      	str	r5, [r4, r3]
    3e5a:	23dc      	movs	r3, #220	; 0xdc
    3e5c:	00db      	lsls	r3, r3, #3
    3e5e:	50e5      	str	r5, [r4, r3]
    3e60:	4be3      	ldr	r3, [pc, #908]	; (41f0 <PSP_CNFG_FP_REGISTERS_EXIST+0x1f0>)
    3e62:	50e5      	str	r5, [r4, r3]
    3e64:	23dd      	movs	r3, #221	; 0xdd
    3e66:	00db      	lsls	r3, r3, #3
    3e68:	50e5      	str	r5, [r4, r3]
    3e6a:	4be2      	ldr	r3, [pc, #904]	; (41f4 <PSP_CNFG_FP_REGISTERS_EXIST+0x1f4>)
    3e6c:	50e5      	str	r5, [r4, r3]
    3e6e:	23de      	movs	r3, #222	; 0xde
    3e70:	00db      	lsls	r3, r3, #3
    3e72:	50e5      	str	r5, [r4, r3]
    3e74:	4be0      	ldr	r3, [pc, #896]	; (41f8 <PSP_CNFG_FP_REGISTERS_EXIST+0x1f8>)
    3e76:	50e5      	str	r5, [r4, r3]
    3e78:	23df      	movs	r3, #223	; 0xdf
    3e7a:	00db      	lsls	r3, r3, #3
    3e7c:	50e5      	str	r5, [r4, r3]
    3e7e:	4bdf      	ldr	r3, [pc, #892]	; (41fc <PSP_CNFG_FP_REGISTERS_EXIST+0x1fc>)
    3e80:	50e5      	str	r5, [r4, r3]
    3e82:	23e0      	movs	r3, #224	; 0xe0
    3e84:	00db      	lsls	r3, r3, #3
    3e86:	50e5      	str	r5, [r4, r3]
    3e88:	23e1      	movs	r3, #225	; 0xe1
    3e8a:	00db      	lsls	r3, r3, #3
    3e8c:	50e5      	str	r5, [r4, r3]
    3e8e:	4bdc      	ldr	r3, [pc, #880]	; (4200 <PSP_CNFG_FP_REGISTERS_EXIST+0x200>)
    3e90:	50e5      	str	r5, [r4, r3]
    3e92:	23e2      	movs	r3, #226	; 0xe2
    3e94:	00db      	lsls	r3, r3, #3
    3e96:	50e5      	str	r5, [r4, r3]
    3e98:	4bda      	ldr	r3, [pc, #872]	; (4204 <PSP_CNFG_FP_REGISTERS_EXIST+0x204>)
    3e9a:	50e5      	str	r5, [r4, r3]
    3e9c:	23e3      	movs	r3, #227	; 0xe3
    3e9e:	00db      	lsls	r3, r3, #3
    3ea0:	50e5      	str	r5, [r4, r3]
    3ea2:	4bd9      	ldr	r3, [pc, #868]	; (4208 <PSP_CNFG_FP_REGISTERS_EXIST+0x208>)
    3ea4:	50e5      	str	r5, [r4, r3]
    3ea6:	23e4      	movs	r3, #228	; 0xe4
    3ea8:	00db      	lsls	r3, r3, #3
    3eaa:	50e5      	str	r5, [r4, r3]
    3eac:	4bd7      	ldr	r3, [pc, #860]	; (420c <PSP_CNFG_FP_REGISTERS_EXIST+0x20c>)
    3eae:	50e5      	str	r5, [r4, r3]
    3eb0:	23e5      	movs	r3, #229	; 0xe5
    3eb2:	00db      	lsls	r3, r3, #3
    3eb4:	50e5      	str	r5, [r4, r3]
    3eb6:	4bd6      	ldr	r3, [pc, #856]	; (4210 <PSP_CNFG_FP_REGISTERS_EXIST+0x210>)
    3eb8:	50e5      	str	r5, [r4, r3]
    3eba:	23e6      	movs	r3, #230	; 0xe6
    3ebc:	00db      	lsls	r3, r3, #3
    3ebe:	50e5      	str	r5, [r4, r3]
    3ec0:	4bd4      	ldr	r3, [pc, #848]	; (4214 <PSP_CNFG_FP_REGISTERS_EXIST+0x214>)
    3ec2:	50e5      	str	r5, [r4, r3]
    3ec4:	4bd4      	ldr	r3, [pc, #848]	; (4218 <PSP_CNFG_FP_REGISTERS_EXIST+0x218>)
    3ec6:	50e5      	str	r5, [r4, r3]
    3ec8:	23e8      	movs	r3, #232	; 0xe8
    3eca:	00db      	lsls	r3, r3, #3
    3ecc:	50e5      	str	r5, [r4, r3]
    3ece:	4bd3      	ldr	r3, [pc, #844]	; (421c <PSP_CNFG_FP_REGISTERS_EXIST+0x21c>)
    3ed0:	50e5      	str	r5, [r4, r3]
    3ed2:	23e9      	movs	r3, #233	; 0xe9
    3ed4:	00db      	lsls	r3, r3, #3
    3ed6:	50e5      	str	r5, [r4, r3]
    3ed8:	4bd1      	ldr	r3, [pc, #836]	; (4220 <PSP_CNFG_FP_REGISTERS_EXIST+0x220>)
    3eda:	50e5      	str	r5, [r4, r3]
    3edc:	23ea      	movs	r3, #234	; 0xea
    3ede:	00db      	lsls	r3, r3, #3
    3ee0:	50e5      	str	r5, [r4, r3]
    3ee2:	4bd0      	ldr	r3, [pc, #832]	; (4224 <PSP_CNFG_FP_REGISTERS_EXIST+0x224>)
    3ee4:	50e5      	str	r5, [r4, r3]
    3ee6:	23eb      	movs	r3, #235	; 0xeb
    3ee8:	00db      	lsls	r3, r3, #3
    3eea:	50e5      	str	r5, [r4, r3]
    3eec:	4bce      	ldr	r3, [pc, #824]	; (4228 <PSP_CNFG_FP_REGISTERS_EXIST+0x228>)
    3eee:	50e5      	str	r5, [r4, r3]
    3ef0:	23ec      	movs	r3, #236	; 0xec
    3ef2:	00db      	lsls	r3, r3, #3
    3ef4:	50e5      	str	r5, [r4, r3]
    3ef6:	4bcd      	ldr	r3, [pc, #820]	; (422c <PSP_CNFG_FP_REGISTERS_EXIST+0x22c>)
    3ef8:	50e5      	str	r5, [r4, r3]
    3efa:	23ed      	movs	r3, #237	; 0xed
    3efc:	00db      	lsls	r3, r3, #3
    3efe:	50e5      	str	r5, [r4, r3]
    3f00:	23ee      	movs	r3, #238	; 0xee
    3f02:	00db      	lsls	r3, r3, #3
    3f04:	50e5      	str	r5, [r4, r3]
    3f06:	4bca      	ldr	r3, [pc, #808]	; (4230 <PSP_CNFG_FP_REGISTERS_EXIST+0x230>)
    3f08:	50e5      	str	r5, [r4, r3]
    3f0a:	23ef      	movs	r3, #239	; 0xef
    3f0c:	00db      	lsls	r3, r3, #3
    3f0e:	50e5      	str	r5, [r4, r3]
    3f10:	4bc8      	ldr	r3, [pc, #800]	; (4234 <PSP_CNFG_FP_REGISTERS_EXIST+0x234>)
    3f12:	50e5      	str	r5, [r4, r3]
    3f14:	23f0      	movs	r3, #240	; 0xf0
    3f16:	00db      	lsls	r3, r3, #3
    3f18:	50e5      	str	r5, [r4, r3]
    3f1a:	4bc7      	ldr	r3, [pc, #796]	; (4238 <PSP_CNFG_FP_REGISTERS_EXIST+0x238>)
    3f1c:	50e5      	str	r5, [r4, r3]
    3f1e:	23f1      	movs	r3, #241	; 0xf1
    3f20:	00db      	lsls	r3, r3, #3
    3f22:	50e5      	str	r5, [r4, r3]
    3f24:	4bc5      	ldr	r3, [pc, #788]	; (423c <PSP_CNFG_FP_REGISTERS_EXIST+0x23c>)
    3f26:	50e5      	str	r5, [r4, r3]
    3f28:	23f2      	movs	r3, #242	; 0xf2
    3f2a:	00db      	lsls	r3, r3, #3
    3f2c:	50e5      	str	r5, [r4, r3]
    3f2e:	4bc4      	ldr	r3, [pc, #784]	; (4240 <PSP_CNFG_FP_REGISTERS_EXIST+0x240>)
    3f30:	50e5      	str	r5, [r4, r3]
    3f32:	23f3      	movs	r3, #243	; 0xf3
    3f34:	00db      	lsls	r3, r3, #3
    3f36:	50e5      	str	r5, [r4, r3]
    3f38:	4bc2      	ldr	r3, [pc, #776]	; (4244 <PSP_CNFG_FP_REGISTERS_EXIST+0x244>)
    3f3a:	50e5      	str	r5, [r4, r3]
    3f3c:	4bc2      	ldr	r3, [pc, #776]	; (4248 <PSP_CNFG_FP_REGISTERS_EXIST+0x248>)
    3f3e:	50e5      	str	r5, [r4, r3]
    3f40:	23f5      	movs	r3, #245	; 0xf5
    3f42:	00db      	lsls	r3, r3, #3
    3f44:	50e5      	str	r5, [r4, r3]
    3f46:	4bc1      	ldr	r3, [pc, #772]	; (424c <PSP_CNFG_FP_REGISTERS_EXIST+0x24c>)
    3f48:	50e5      	str	r5, [r4, r3]
    3f4a:	23f6      	movs	r3, #246	; 0xf6
    3f4c:	00db      	lsls	r3, r3, #3
    3f4e:	50e5      	str	r5, [r4, r3]
    3f50:	4bbf      	ldr	r3, [pc, #764]	; (4250 <PSP_CNFG_FP_REGISTERS_EXIST+0x250>)
    3f52:	50e5      	str	r5, [r4, r3]
    3f54:	23f7      	movs	r3, #247	; 0xf7
    3f56:	00db      	lsls	r3, r3, #3
    3f58:	50e5      	str	r5, [r4, r3]
    3f5a:	4bbe      	ldr	r3, [pc, #760]	; (4254 <PSP_CNFG_FP_REGISTERS_EXIST+0x254>)
    3f5c:	50e5      	str	r5, [r4, r3]
    3f5e:	23f8      	movs	r3, #248	; 0xf8
    3f60:	00db      	lsls	r3, r3, #3
    3f62:	50e5      	str	r5, [r4, r3]
    3f64:	4bbc      	ldr	r3, [pc, #752]	; (4258 <PSP_CNFG_FP_REGISTERS_EXIST+0x258>)
    3f66:	50e5      	str	r5, [r4, r3]
    3f68:	23f9      	movs	r3, #249	; 0xf9
    3f6a:	00db      	lsls	r3, r3, #3
    3f6c:	50e5      	str	r5, [r4, r3]
    3f6e:	4bbb      	ldr	r3, [pc, #748]	; (425c <PSP_CNFG_FP_REGISTERS_EXIST+0x25c>)
    3f70:	50e5      	str	r5, [r4, r3]
    3f72:	23fa      	movs	r3, #250	; 0xfa
    3f74:	00db      	lsls	r3, r3, #3
    3f76:	50e5      	str	r5, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:232
		}
	}
	pthisSV->fC6x12[0][6] = pthisSV->fC6x12[1][7] = pthisSV->fC6x12[2][8] = 1.0F; 
    3f78:	23fe      	movs	r3, #254	; 0xfe
    3f7a:	059b      	lsls	r3, r3, #22
    3f7c:	50a3      	str	r3, [r4, r2]
    3f7e:	4ab8      	ldr	r2, [pc, #736]	; (4260 <PSP_CNFG_FP_REGISTERS_EXIST+0x260>)
    3f80:	50a3      	str	r3, [r4, r2]
    3f82:	22da      	movs	r2, #218	; 0xda
    3f84:	00d2      	lsls	r2, r2, #3
    3f86:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:233
	pthisSV->fC6x12[3][9] = pthisSV->fC6x12[4][10] = pthisSV->fC6x12[5][11] = -1.0F; 
    3f88:	4bb6      	ldr	r3, [pc, #728]	; (4264 <PSP_CNFG_FP_REGISTERS_EXIST+0x264>)
    3f8a:	4ab7      	ldr	r2, [pc, #732]	; (4268 <PSP_CNFG_FP_REGISTERS_EXIST+0x268>)
    3f8c:	50a3      	str	r3, [r4, r2]
    3f8e:	22f4      	movs	r2, #244	; 0xf4
    3f90:	00d2      	lsls	r2, r2, #3
    3f92:	50a3      	str	r3, [r4, r2]
    3f94:	4ab5      	ldr	r2, [pc, #724]	; (426c <PSP_CNFG_FP_REGISTERS_EXIST+0x26c>)
    3f96:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:236

	// zero a posteriori orientation, error vector xe+ (thetae+, be+, de+, ae+) and b+ and inertial
	f3x3matrixAeqI(pthisSV->fRPl);
    3f98:	f007 fba6 	bl	b6e8 <f3x3matrixAeqI>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:237
	fqAeq1(&(pthisSV->fqPl));
    3f9c:	1c20      	adds	r0, r4, #0
    3f9e:	3038      	adds	r0, #56	; 0x38
    3fa0:	f00a f8cc 	bl	e13c <fqAeq1>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:240
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = pthisSV->fdErrSePl[i] = pthisSV->fbPl[i] = 0.0F;
    3fa4:	1c23      	adds	r3, r4, #0
    3fa6:	3364      	adds	r3, #100	; 0x64
    3fa8:	701e      	strb	r6, [r3, #0]
    3faa:	705e      	strb	r6, [r3, #1]
    3fac:	709e      	strb	r6, [r3, #2]
    3fae:	70de      	strb	r6, [r3, #3]
    3fb0:	711e      	strb	r6, [r3, #4]
    3fb2:	715e      	strb	r6, [r3, #5]
    3fb4:	719e      	strb	r6, [r3, #6]
    3fb6:	71de      	strb	r6, [r3, #7]
    3fb8:	721e      	strb	r6, [r3, #8]
    3fba:	725e      	strb	r6, [r3, #9]
    3fbc:	729e      	strb	r6, [r3, #10]
    3fbe:	72de      	strb	r6, [r3, #11]
    3fc0:	3330      	adds	r3, #48	; 0x30
    3fc2:	701e      	strb	r6, [r3, #0]
    3fc4:	705e      	strb	r6, [r3, #1]
    3fc6:	709e      	strb	r6, [r3, #2]
    3fc8:	70de      	strb	r6, [r3, #3]
    3fca:	711e      	strb	r6, [r3, #4]
    3fcc:	715e      	strb	r6, [r3, #5]
    3fce:	719e      	strb	r6, [r3, #6]
    3fd0:	71de      	strb	r6, [r3, #7]
    3fd2:	721e      	strb	r6, [r3, #8]
    3fd4:	725e      	strb	r6, [r3, #9]
    3fd6:	729e      	strb	r6, [r3, #10]
    3fd8:	72de      	strb	r6, [r3, #11]
    3fda:	731e      	strb	r6, [r3, #12]
    3fdc:	735e      	strb	r6, [r3, #13]
    3fde:	739e      	strb	r6, [r3, #14]
    3fe0:	73de      	strb	r6, [r3, #15]
    3fe2:	741e      	strb	r6, [r3, #16]
    3fe4:	745e      	strb	r6, [r3, #17]
    3fe6:	749e      	strb	r6, [r3, #18]
    3fe8:	74de      	strb	r6, [r3, #19]
    3fea:	751e      	strb	r6, [r3, #20]
    3fec:	755e      	strb	r6, [r3, #21]
    3fee:	759e      	strb	r6, [r3, #22]
    3ff0:	75de      	strb	r6, [r3, #23]
    3ff2:	3b18      	subs	r3, #24
    3ff4:	701e      	strb	r6, [r3, #0]
    3ff6:	705e      	strb	r6, [r3, #1]
    3ff8:	709e      	strb	r6, [r3, #2]
    3ffa:	70de      	strb	r6, [r3, #3]
    3ffc:	711e      	strb	r6, [r3, #4]
    3ffe:	715e      	strb	r6, [r3, #5]
    4000:	719e      	strb	r6, [r3, #6]
    4002:	71de      	strb	r6, [r3, #7]
    4004:	721e      	strb	r6, [r3, #8]
    4006:	725e      	strb	r6, [r3, #9]
    4008:	729e      	strb	r6, [r3, #10]
    400a:	72de      	strb	r6, [r3, #11]
    400c:	3b0c      	subs	r3, #12
    400e:	701e      	strb	r6, [r3, #0]
    4010:	705e      	strb	r6, [r3, #1]
    4012:	709e      	strb	r6, [r3, #2]
    4014:	70de      	strb	r6, [r3, #3]
    4016:	711e      	strb	r6, [r3, #4]
    4018:	715e      	strb	r6, [r3, #5]
    401a:	719e      	strb	r6, [r3, #6]
    401c:	71de      	strb	r6, [r3, #7]
    401e:	721e      	strb	r6, [r3, #8]
    4020:	725e      	strb	r6, [r3, #9]
    4022:	729e      	strb	r6, [r3, #10]
    4024:	72de      	strb	r6, [r3, #11]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:244
	}

	// initialize the reference geomagnetic vector (uT, global frame)
	pthisSV->fDeltaPl = 0.0F;
    4026:	23b8      	movs	r3, #184	; 0xb8
    4028:	50e5      	str	r5, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:245
	if (ithisCoordSystem == NED)
    402a:	2f00      	cmp	r7, #0
    402c:	d000      	beq.n	4030 <PSP_CNFG_FP_REGISTERS_EXIST+0x30>
    402e:	e245      	b.n	44bc <PSP_CNFG_FP_REGISTERS_EXIST+0x4bc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:248
	{
		// initialize NED geomagnetic vector to zero degrees inclination
		pthisSV->fmGl[X] = DEFAULTB;
    4030:	4a8f      	ldr	r2, [pc, #572]	; (4270 <PSP_CNFG_FP_REGISTERS_EXIST+0x270>)
    4032:	2382      	movs	r3, #130	; 0x82
    4034:	005b      	lsls	r3, r3, #1
    4036:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:249
		pthisSV->fmGl[Y] = 0.0F;
    4038:	2384      	movs	r3, #132	; 0x84
    403a:	005b      	lsls	r3, r3, #1
    403c:	50e5      	str	r5, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:250
		pthisSV->fmGl[Z] = 0.0F;
    403e:	2386      	movs	r3, #134	; 0x86
    4040:	005b      	lsls	r3, r3, #1
    4042:	50e5      	str	r5, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:261
		pthisSV->fmGl[Y] = DEFAULTB;
		pthisSV->fmGl[Z] = 0.0F;
	}

	// initialize noise variances for Qv and Qw matrix updates
	pthisSV->fQvAA = FQVA_9DOF_GBY_KALMAN + FQWA_9DOF_GBY_KALMAN + FDEGTORAD * FDEGTORAD * pthisSV->fdeltatsq * (FQWB_9DOF_GBY_KALMAN + FQVG_9DOF_GBY_KALMAN);
    4044:	4b62      	ldr	r3, [pc, #392]	; (41d0 <PSP_CNFG_FP_REGISTERS_EXIST+0x1d0>)
    4046:	498b      	ldr	r1, [pc, #556]	; (4274 <PSP_CNFG_FP_REGISTERS_EXIST+0x274>)
    4048:	58e0      	ldr	r0, [r4, r3]
    404a:	f7fc fea3 	bl	d94 <__aeabi_fmul>
    404e:	4962      	ldr	r1, [pc, #392]	; (41d8 <PSP_CNFG_FP_REGISTERS_EXIST+0x1d8>)
    4050:	1c05      	adds	r5, r0, #0
    4052:	f7fc fe9f 	bl	d94 <__aeabi_fmul>
    4056:	4988      	ldr	r1, [pc, #544]	; (4278 <PSP_CNFG_FP_REGISTERS_EXIST+0x278>)
    4058:	f7fc fb4c 	bl	6f4 <__aeabi_fadd>
    405c:	2388      	movs	r3, #136	; 0x88
    405e:	005b      	lsls	r3, r3, #1
    4060:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:262
	pthisSV->fQvMM = FQVM_9DOF_GBY_KALMAN + FQWD_9DOF_GBY_KALMAN + FDEGTORAD * FDEGTORAD * pthisSV->fdeltatsq * DEFAULTB * DEFAULTB * (FQWB_9DOF_GBY_KALMAN + FQVG_9DOF_GBY_KALMAN);
    4062:	4983      	ldr	r1, [pc, #524]	; (4270 <PSP_CNFG_FP_REGISTERS_EXIST+0x270>)
    4064:	1c28      	adds	r0, r5, #0
    4066:	f7fc fe95 	bl	d94 <__aeabi_fmul>
    406a:	4981      	ldr	r1, [pc, #516]	; (4270 <PSP_CNFG_FP_REGISTERS_EXIST+0x270>)
    406c:	f7fc fe92 	bl	d94 <__aeabi_fmul>
    4070:	4959      	ldr	r1, [pc, #356]	; (41d8 <PSP_CNFG_FP_REGISTERS_EXIST+0x1d8>)
    4072:	f7fc fe8f 	bl	d94 <__aeabi_fmul>
    4076:	4981      	ldr	r1, [pc, #516]	; (427c <PSP_CNFG_FP_REGISTERS_EXIST+0x27c>)
    4078:	f7fc fb3c 	bl	6f4 <__aeabi_fadd>
    407c:	238a      	movs	r3, #138	; 0x8a
    407e:	005b      	lsls	r3, r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:271
	// zero the matrix Qw
	for (i = 0; i < 12; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fQw12x12[i][j] = 0.0F;
    4080:	4a7f      	ldr	r2, [pc, #508]	; (4280 <PSP_CNFG_FP_REGISTERS_EXIST+0x280>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:262
		pthisSV->fmGl[Z] = 0.0F;
	}

	// initialize noise variances for Qv and Qw matrix updates
	pthisSV->fQvAA = FQVA_9DOF_GBY_KALMAN + FQWA_9DOF_GBY_KALMAN + FDEGTORAD * FDEGTORAD * pthisSV->fdeltatsq * (FQWB_9DOF_GBY_KALMAN + FQVG_9DOF_GBY_KALMAN);
	pthisSV->fQvMM = FQVM_9DOF_GBY_KALMAN + FQWD_9DOF_GBY_KALMAN + FDEGTORAD * FDEGTORAD * pthisSV->fdeltatsq * DEFAULTB * DEFAULTB * (FQWB_9DOF_GBY_KALMAN + FQVG_9DOF_GBY_KALMAN);
    4082:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:271
	// zero the matrix Qw
	for (i = 0; i < 12; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fQw12x12[i][j] = 0.0F;
    4084:	2300      	movs	r3, #0
    4086:	50a3      	str	r3, [r4, r2]
    4088:	2290      	movs	r2, #144	; 0x90
    408a:	00d2      	lsls	r2, r2, #3
    408c:	50a3      	str	r3, [r4, r2]
    408e:	2291      	movs	r2, #145	; 0x91
    4090:	00d2      	lsls	r2, r2, #3
    4092:	50a3      	str	r3, [r4, r2]
    4094:	4a7b      	ldr	r2, [pc, #492]	; (4284 <PSP_CNFG_FP_REGISTERS_EXIST+0x284>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:278
	}
	// loop over non-zero values
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw12x12[i][i] = FQWINITTHTH_9DOF_GBY_KALMAN;
    4096:	4d7c      	ldr	r5, [pc, #496]	; (4288 <PSP_CNFG_FP_REGISTERS_EXIST+0x288>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:271
	// zero the matrix Qw
	for (i = 0; i < 12; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fQw12x12[i][j] = 0.0F;
    4098:	50a3      	str	r3, [r4, r2]
    409a:	2292      	movs	r2, #146	; 0x92
    409c:	00d2      	lsls	r2, r2, #3
    409e:	50a3      	str	r3, [r4, r2]
    40a0:	4a7a      	ldr	r2, [pc, #488]	; (428c <PSP_CNFG_FP_REGISTERS_EXIST+0x28c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:280
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw12x12[i][i] = FQWINITTHTH_9DOF_GBY_KALMAN;
		// b_e * b_e terms
		pthisSV->fQw12x12[i + 3][i + 3] = FQWINITBB_9DOF_GBY_KALMAN;
    40a2:	20fa      	movs	r0, #250	; 0xfa
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:271
	// zero the matrix Qw
	for (i = 0; i < 12; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fQw12x12[i][j] = 0.0F;
    40a4:	50a3      	str	r3, [r4, r2]
    40a6:	2293      	movs	r2, #147	; 0x93
    40a8:	00d2      	lsls	r2, r2, #3
    40aa:	50a3      	str	r3, [r4, r2]
    40ac:	4a78      	ldr	r2, [pc, #480]	; (4290 <PSP_CNFG_FP_REGISTERS_EXIST+0x290>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:280
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw12x12[i][i] = FQWINITTHTH_9DOF_GBY_KALMAN;
		// b_e * b_e terms
		pthisSV->fQw12x12[i + 3][i + 3] = FQWINITBB_9DOF_GBY_KALMAN;
    40ae:	0580      	lsls	r0, r0, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:271
	// zero the matrix Qw
	for (i = 0; i < 12; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fQw12x12[i][j] = 0.0F;
    40b0:	50a3      	str	r3, [r4, r2]
    40b2:	2294      	movs	r2, #148	; 0x94
    40b4:	00d2      	lsls	r2, r2, #3
    40b6:	50a3      	str	r3, [r4, r2]
    40b8:	4a76      	ldr	r2, [pc, #472]	; (4294 <PSP_CNFG_FP_REGISTERS_EXIST+0x294>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:284
		// b_e * b_e terms
		pthisSV->fQw12x12[i + 3][i + 3] = FQWINITBB_9DOF_GBY_KALMAN;
		// th_e * b_e terms
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = FQWINITTHB_9DOF_GBY_KALMAN;
		// a_e * a_e terms
		pthisSV->fQw12x12[i + 6][i + 6] = FQWINITAA_9DOF_GBY_KALMAN;
    40ba:	4977      	ldr	r1, [pc, #476]	; (4298 <PSP_CNFG_FP_REGISTERS_EXIST+0x298>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:271
	// zero the matrix Qw
	for (i = 0; i < 12; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fQw12x12[i][j] = 0.0F;
    40bc:	50a3      	str	r3, [r4, r2]
    40be:	2295      	movs	r2, #149	; 0x95
    40c0:	00d2      	lsls	r2, r2, #3
    40c2:	50a3      	str	r3, [r4, r2]
    40c4:	2296      	movs	r2, #150	; 0x96
    40c6:	00d2      	lsls	r2, r2, #3
    40c8:	50a3      	str	r3, [r4, r2]
    40ca:	4a74      	ldr	r2, [pc, #464]	; (429c <PSP_CNFG_FP_REGISTERS_EXIST+0x29c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:286
		// th_e * b_e terms
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = FQWINITTHB_9DOF_GBY_KALMAN;
		// a_e * a_e terms
		pthisSV->fQw12x12[i + 6][i + 6] = FQWINITAA_9DOF_GBY_KALMAN;
		// d_e * d_e terms
		pthisSV->fQw12x12[i + 9][i + 9] = FQWINITDD_9DOF_GBY_KALMAN;
    40cc:	4e74      	ldr	r6, [pc, #464]	; (42a0 <PSP_CNFG_FP_REGISTERS_EXIST+0x2a0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:271
	// zero the matrix Qw
	for (i = 0; i < 12; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fQw12x12[i][j] = 0.0F;
    40ce:	50a3      	str	r3, [r4, r2]
    40d0:	4a74      	ldr	r2, [pc, #464]	; (42a4 <PSP_CNFG_FP_REGISTERS_EXIST+0x2a4>)
    40d2:	50a3      	str	r3, [r4, r2]
    40d4:	2298      	movs	r2, #152	; 0x98
    40d6:	00d2      	lsls	r2, r2, #3
    40d8:	50a3      	str	r3, [r4, r2]
    40da:	4a73      	ldr	r2, [pc, #460]	; (42a8 <PSP_CNFG_FP_REGISTERS_EXIST+0x2a8>)
    40dc:	50a3      	str	r3, [r4, r2]
    40de:	2299      	movs	r2, #153	; 0x99
    40e0:	00d2      	lsls	r2, r2, #3
    40e2:	50a3      	str	r3, [r4, r2]
    40e4:	4a71      	ldr	r2, [pc, #452]	; (42ac <PSP_CNFG_FP_REGISTERS_EXIST+0x2ac>)
    40e6:	50a3      	str	r3, [r4, r2]
    40e8:	229a      	movs	r2, #154	; 0x9a
    40ea:	00d2      	lsls	r2, r2, #3
    40ec:	50a3      	str	r3, [r4, r2]
    40ee:	4a70      	ldr	r2, [pc, #448]	; (42b0 <PSP_CNFG_FP_REGISTERS_EXIST+0x2b0>)
    40f0:	50a3      	str	r3, [r4, r2]
    40f2:	229b      	movs	r2, #155	; 0x9b
    40f4:	00d2      	lsls	r2, r2, #3
    40f6:	50a3      	str	r3, [r4, r2]
    40f8:	4a6e      	ldr	r2, [pc, #440]	; (42b4 <PSP_CNFG_FP_REGISTERS_EXIST+0x2b4>)
    40fa:	50a3      	str	r3, [r4, r2]
    40fc:	4a6e      	ldr	r2, [pc, #440]	; (42b8 <PSP_CNFG_FP_REGISTERS_EXIST+0x2b8>)
    40fe:	50a3      	str	r3, [r4, r2]
    4100:	229d      	movs	r2, #157	; 0x9d
    4102:	00d2      	lsls	r2, r2, #3
    4104:	50a3      	str	r3, [r4, r2]
    4106:	229e      	movs	r2, #158	; 0x9e
    4108:	00d2      	lsls	r2, r2, #3
    410a:	50a3      	str	r3, [r4, r2]
    410c:	4a6b      	ldr	r2, [pc, #428]	; (42bc <PSP_CNFG_FP_REGISTERS_EXIST+0x2bc>)
    410e:	50a3      	str	r3, [r4, r2]
    4110:	229f      	movs	r2, #159	; 0x9f
    4112:	00d2      	lsls	r2, r2, #3
    4114:	50a3      	str	r3, [r4, r2]
    4116:	4a6a      	ldr	r2, [pc, #424]	; (42c0 <PSP_CNFG_FP_REGISTERS_EXIST+0x2c0>)
    4118:	50a3      	str	r3, [r4, r2]
    411a:	22a0      	movs	r2, #160	; 0xa0
    411c:	00d2      	lsls	r2, r2, #3
    411e:	50a3      	str	r3, [r4, r2]
    4120:	4a68      	ldr	r2, [pc, #416]	; (42c4 <PSP_CNFG_FP_REGISTERS_EXIST+0x2c4>)
    4122:	50a3      	str	r3, [r4, r2]
    4124:	4a68      	ldr	r2, [pc, #416]	; (42c8 <PSP_CNFG_FP_REGISTERS_EXIST+0x2c8>)
    4126:	50a3      	str	r3, [r4, r2]
    4128:	22a2      	movs	r2, #162	; 0xa2
    412a:	00d2      	lsls	r2, r2, #3
    412c:	50a3      	str	r3, [r4, r2]
    412e:	22a3      	movs	r2, #163	; 0xa3
    4130:	00d2      	lsls	r2, r2, #3
    4132:	50a3      	str	r3, [r4, r2]
    4134:	4a65      	ldr	r2, [pc, #404]	; (42cc <PSP_CNFG_FP_REGISTERS_EXIST+0x2cc>)
    4136:	50a3      	str	r3, [r4, r2]
    4138:	22a4      	movs	r2, #164	; 0xa4
    413a:	00d2      	lsls	r2, r2, #3
    413c:	50a3      	str	r3, [r4, r2]
    413e:	4a64      	ldr	r2, [pc, #400]	; (42d0 <PSP_CNFG_FP_REGISTERS_EXIST+0x2d0>)
    4140:	50a3      	str	r3, [r4, r2]
    4142:	22a5      	movs	r2, #165	; 0xa5
    4144:	00d2      	lsls	r2, r2, #3
    4146:	50a3      	str	r3, [r4, r2]
    4148:	4a62      	ldr	r2, [pc, #392]	; (42d4 <PSP_CNFG_FP_REGISTERS_EXIST+0x2d4>)
    414a:	50a3      	str	r3, [r4, r2]
    414c:	22a6      	movs	r2, #166	; 0xa6
    414e:	00d2      	lsls	r2, r2, #3
    4150:	50a3      	str	r3, [r4, r2]
    4152:	4a61      	ldr	r2, [pc, #388]	; (42d8 <PSP_CNFG_FP_REGISTERS_EXIST+0x2d8>)
    4154:	50a3      	str	r3, [r4, r2]
    4156:	22a7      	movs	r2, #167	; 0xa7
    4158:	00d2      	lsls	r2, r2, #3
    415a:	50a3      	str	r3, [r4, r2]
    415c:	22a8      	movs	r2, #168	; 0xa8
    415e:	00d2      	lsls	r2, r2, #3
    4160:	50a3      	str	r3, [r4, r2]
    4162:	4a5e      	ldr	r2, [pc, #376]	; (42dc <PSP_CNFG_FP_REGISTERS_EXIST+0x2dc>)
    4164:	50a3      	str	r3, [r4, r2]
    4166:	4a5e      	ldr	r2, [pc, #376]	; (42e0 <PSP_CNFG_FP_REGISTERS_EXIST+0x2e0>)
    4168:	50a3      	str	r3, [r4, r2]
    416a:	22aa      	movs	r2, #170	; 0xaa
    416c:	00d2      	lsls	r2, r2, #3
    416e:	50a3      	str	r3, [r4, r2]
    4170:	4a5c      	ldr	r2, [pc, #368]	; (42e4 <PSP_CNFG_FP_REGISTERS_EXIST+0x2e4>)
    4172:	50a3      	str	r3, [r4, r2]
    4174:	22ab      	movs	r2, #171	; 0xab
    4176:	00d2      	lsls	r2, r2, #3
    4178:	50a3      	str	r3, [r4, r2]
    417a:	4a5b      	ldr	r2, [pc, #364]	; (42e8 <PSP_CNFG_FP_REGISTERS_EXIST+0x2e8>)
    417c:	50a3      	str	r3, [r4, r2]
    417e:	22ac      	movs	r2, #172	; 0xac
    4180:	00d2      	lsls	r2, r2, #3
    4182:	50a3      	str	r3, [r4, r2]
    4184:	4a59      	ldr	r2, [pc, #356]	; (42ec <PSP_CNFG_FP_REGISTERS_EXIST+0x2ec>)
    4186:	50a3      	str	r3, [r4, r2]
    4188:	22ad      	movs	r2, #173	; 0xad
    418a:	00d2      	lsls	r2, r2, #3
    418c:	50a3      	str	r3, [r4, r2]
    418e:	4a58      	ldr	r2, [pc, #352]	; (42f0 <PSP_CNFG_FP_REGISTERS_EXIST+0x2f0>)
    4190:	50a3      	str	r3, [r4, r2]
    4192:	4a58      	ldr	r2, [pc, #352]	; (42f4 <PSP_CNFG_FP_REGISTERS_EXIST+0x2f4>)
    4194:	50a3      	str	r3, [r4, r2]
    4196:	22af      	movs	r2, #175	; 0xaf
    4198:	00d2      	lsls	r2, r2, #3
    419a:	50a3      	str	r3, [r4, r2]
    419c:	22b0      	movs	r2, #176	; 0xb0
    419e:	00d2      	lsls	r2, r2, #3
    41a0:	50a3      	str	r3, [r4, r2]
    41a2:	4a55      	ldr	r2, [pc, #340]	; (42f8 <PSP_CNFG_FP_REGISTERS_EXIST+0x2f8>)
    41a4:	50a3      	str	r3, [r4, r2]
    41a6:	22b1      	movs	r2, #177	; 0xb1
    41a8:	00d2      	lsls	r2, r2, #3
    41aa:	50a3      	str	r3, [r4, r2]
    41ac:	4a53      	ldr	r2, [pc, #332]	; (42fc <PSP_CNFG_FP_REGISTERS_EXIST+0x2fc>)
    41ae:	50a3      	str	r3, [r4, r2]
    41b0:	22b2      	movs	r2, #178	; 0xb2
    41b2:	00d2      	lsls	r2, r2, #3
    41b4:	50a3      	str	r3, [r4, r2]
    41b6:	4a52      	ldr	r2, [pc, #328]	; (4300 <PSP_CNFG_FP_REGISTERS_EXIST+0x300>)
    41b8:	50a3      	str	r3, [r4, r2]
    41ba:	22b3      	movs	r2, #179	; 0xb3
    41bc:	00d2      	lsls	r2, r2, #3
    41be:	50a3      	str	r3, [r4, r2]
    41c0:	e0a0      	b.n	4304 <PSP_CNFG_FP_REGISTERS_EXIST+0x304>
    41c2:	46c0      	nop			; (mov r8, r8)
    41c4:	00000834 	.word	0x00000834
    41c8:	00000824 	.word	0x00000824
    41cc:	00000828 	.word	0x00000828
    41d0:	0000082c 	.word	0x0000082c
    41d4:	0000081c 	.word	0x0000081c
    41d8:	3e99999a 	.word	0x3e99999a
    41dc:	000006bc 	.word	0x000006bc
    41e0:	000006c4 	.word	0x000006c4
    41e4:	000006cc 	.word	0x000006cc
    41e8:	000006d4 	.word	0x000006d4
    41ec:	000006dc 	.word	0x000006dc
    41f0:	000006e4 	.word	0x000006e4
    41f4:	000006ec 	.word	0x000006ec
    41f8:	000006f4 	.word	0x000006f4
    41fc:	000006fc 	.word	0x000006fc
    4200:	0000070c 	.word	0x0000070c
    4204:	00000714 	.word	0x00000714
    4208:	0000071c 	.word	0x0000071c
    420c:	00000724 	.word	0x00000724
    4210:	0000072c 	.word	0x0000072c
    4214:	00000734 	.word	0x00000734
    4218:	0000073c 	.word	0x0000073c
    421c:	00000744 	.word	0x00000744
    4220:	0000074c 	.word	0x0000074c
    4224:	00000754 	.word	0x00000754
    4228:	0000075c 	.word	0x0000075c
    422c:	00000764 	.word	0x00000764
    4230:	00000774 	.word	0x00000774
    4234:	0000077c 	.word	0x0000077c
    4238:	00000784 	.word	0x00000784
    423c:	0000078c 	.word	0x0000078c
    4240:	00000794 	.word	0x00000794
    4244:	0000079c 	.word	0x0000079c
    4248:	000007a4 	.word	0x000007a4
    424c:	000007ac 	.word	0x000007ac
    4250:	000007b4 	.word	0x000007b4
    4254:	000007bc 	.word	0x000007bc
    4258:	000007c4 	.word	0x000007c4
    425c:	000007cc 	.word	0x000007cc
    4260:	00000704 	.word	0x00000704
    4264:	bf800000 	.word	0xbf800000
    4268:	000007d4 	.word	0x000007d4
    426c:	0000076c 	.word	0x0000076c
    4270:	42480000 	.word	0x42480000
    4274:	399fb50f 	.word	0x399fb50f
    4278:	38d5e8d5 	.word	0x38d5e8d5
    427c:	3f19999a 	.word	0x3f19999a
    4280:	0000047c 	.word	0x0000047c
    4284:	0000048c 	.word	0x0000048c
    4288:	3ca3d70a 	.word	0x3ca3d70a
    428c:	00000494 	.word	0x00000494
    4290:	0000049c 	.word	0x0000049c
    4294:	000004a4 	.word	0x000004a4
    4298:	38d1b717 	.word	0x38d1b717
    429c:	000004b4 	.word	0x000004b4
    42a0:	0000064c 	.word	0x0000064c
    42a4:	000004bc 	.word	0x000004bc
    42a8:	000004c4 	.word	0x000004c4
    42ac:	000004cc 	.word	0x000004cc
    42b0:	000004d4 	.word	0x000004d4
    42b4:	000004dc 	.word	0x000004dc
    42b8:	000004e4 	.word	0x000004e4
    42bc:	000004f4 	.word	0x000004f4
    42c0:	000004fc 	.word	0x000004fc
    42c4:	00000504 	.word	0x00000504
    42c8:	0000050c 	.word	0x0000050c
    42cc:	0000051c 	.word	0x0000051c
    42d0:	00000524 	.word	0x00000524
    42d4:	0000052c 	.word	0x0000052c
    42d8:	00000534 	.word	0x00000534
    42dc:	00000544 	.word	0x00000544
    42e0:	0000054c 	.word	0x0000054c
    42e4:	00000554 	.word	0x00000554
    42e8:	0000055c 	.word	0x0000055c
    42ec:	00000564 	.word	0x00000564
    42f0:	0000056c 	.word	0x0000056c
    42f4:	00000574 	.word	0x00000574
    42f8:	00000584 	.word	0x00000584
    42fc:	0000058c 	.word	0x0000058c
    4300:	00000594 	.word	0x00000594
    4304:	4a73      	ldr	r2, [pc, #460]	; (44d4 <PSP_CNFG_FP_REGISTERS_EXIST+0x4d4>)
    4306:	50a3      	str	r3, [r4, r2]
    4308:	22b4      	movs	r2, #180	; 0xb4
    430a:	00d2      	lsls	r2, r2, #3
    430c:	50a3      	str	r3, [r4, r2]
    430e:	4a72      	ldr	r2, [pc, #456]	; (44d8 <PSP_CNFG_FP_REGISTERS_EXIST+0x4d8>)
    4310:	50a3      	str	r3, [r4, r2]
    4312:	22b5      	movs	r2, #181	; 0xb5
    4314:	00d2      	lsls	r2, r2, #3
    4316:	50a3      	str	r3, [r4, r2]
    4318:	4a70      	ldr	r2, [pc, #448]	; (44dc <PSP_CNFG_FP_REGISTERS_EXIST+0x4dc>)
    431a:	50a3      	str	r3, [r4, r2]
    431c:	4a70      	ldr	r2, [pc, #448]	; (44e0 <PSP_CNFG_FP_REGISTERS_EXIST+0x4e0>)
    431e:	50a3      	str	r3, [r4, r2]
    4320:	22b7      	movs	r2, #183	; 0xb7
    4322:	00d2      	lsls	r2, r2, #3
    4324:	50a3      	str	r3, [r4, r2]
    4326:	4a6f      	ldr	r2, [pc, #444]	; (44e4 <PSP_CNFG_FP_REGISTERS_EXIST+0x4e4>)
    4328:	50a3      	str	r3, [r4, r2]
    432a:	22b8      	movs	r2, #184	; 0xb8
    432c:	00d2      	lsls	r2, r2, #3
    432e:	50a3      	str	r3, [r4, r2]
    4330:	4a6d      	ldr	r2, [pc, #436]	; (44e8 <PSP_CNFG_FP_REGISTERS_EXIST+0x4e8>)
    4332:	50a3      	str	r3, [r4, r2]
    4334:	22b9      	movs	r2, #185	; 0xb9
    4336:	00d2      	lsls	r2, r2, #3
    4338:	50a3      	str	r3, [r4, r2]
    433a:	4a6c      	ldr	r2, [pc, #432]	; (44ec <PSP_CNFG_FP_REGISTERS_EXIST+0x4ec>)
    433c:	50a3      	str	r3, [r4, r2]
    433e:	22ba      	movs	r2, #186	; 0xba
    4340:	00d2      	lsls	r2, r2, #3
    4342:	50a3      	str	r3, [r4, r2]
    4344:	4a6a      	ldr	r2, [pc, #424]	; (44f0 <PSP_CNFG_FP_REGISTERS_EXIST+0x4f0>)
    4346:	50a3      	str	r3, [r4, r2]
    4348:	22bb      	movs	r2, #187	; 0xbb
    434a:	00d2      	lsls	r2, r2, #3
    434c:	50a3      	str	r3, [r4, r2]
    434e:	4a69      	ldr	r2, [pc, #420]	; (44f4 <PSP_CNFG_FP_REGISTERS_EXIST+0x4f4>)
    4350:	50a3      	str	r3, [r4, r2]
    4352:	22bc      	movs	r2, #188	; 0xbc
    4354:	00d2      	lsls	r2, r2, #3
    4356:	50a3      	str	r3, [r4, r2]
    4358:	22bd      	movs	r2, #189	; 0xbd
    435a:	00d2      	lsls	r2, r2, #3
    435c:	50a3      	str	r3, [r4, r2]
    435e:	4a66      	ldr	r2, [pc, #408]	; (44f8 <PSP_CNFG_FP_REGISTERS_EXIST+0x4f8>)
    4360:	50a3      	str	r3, [r4, r2]
    4362:	22be      	movs	r2, #190	; 0xbe
    4364:	00d2      	lsls	r2, r2, #3
    4366:	50a3      	str	r3, [r4, r2]
    4368:	4a64      	ldr	r2, [pc, #400]	; (44fc <PSP_CNFG_FP_REGISTERS_EXIST+0x4fc>)
    436a:	50a3      	str	r3, [r4, r2]
    436c:	22bf      	movs	r2, #191	; 0xbf
    436e:	00d2      	lsls	r2, r2, #3
    4370:	50a3      	str	r3, [r4, r2]
    4372:	4a63      	ldr	r2, [pc, #396]	; (4500 <PSP_CNFG_FP_REGISTERS_EXIST+0x500>)
    4374:	50a3      	str	r3, [r4, r2]
    4376:	22c0      	movs	r2, #192	; 0xc0
    4378:	00d2      	lsls	r2, r2, #3
    437a:	50a3      	str	r3, [r4, r2]
    437c:	4a61      	ldr	r2, [pc, #388]	; (4504 <PSP_CNFG_FP_REGISTERS_EXIST+0x504>)
    437e:	50a3      	str	r3, [r4, r2]
    4380:	22c1      	movs	r2, #193	; 0xc1
    4382:	00d2      	lsls	r2, r2, #3
    4384:	50a3      	str	r3, [r4, r2]
    4386:	4a60      	ldr	r2, [pc, #384]	; (4508 <PSP_CNFG_FP_REGISTERS_EXIST+0x508>)
    4388:	50a3      	str	r3, [r4, r2]
    438a:	22c2      	movs	r2, #194	; 0xc2
    438c:	00d2      	lsls	r2, r2, #3
    438e:	50a3      	str	r3, [r4, r2]
    4390:	4a5e      	ldr	r2, [pc, #376]	; (450c <PSP_CNFG_FP_REGISTERS_EXIST+0x50c>)
    4392:	50a3      	str	r3, [r4, r2]
    4394:	4a5e      	ldr	r2, [pc, #376]	; (4510 <PSP_CNFG_FP_REGISTERS_EXIST+0x510>)
    4396:	50a3      	str	r3, [r4, r2]
    4398:	22c4      	movs	r2, #196	; 0xc4
    439a:	00d2      	lsls	r2, r2, #3
    439c:	50a3      	str	r3, [r4, r2]
    439e:	4a5d      	ldr	r2, [pc, #372]	; (4514 <PSP_CNFG_FP_REGISTERS_EXIST+0x514>)
    43a0:	50a3      	str	r3, [r4, r2]
    43a2:	22c5      	movs	r2, #197	; 0xc5
    43a4:	00d2      	lsls	r2, r2, #3
    43a6:	50a3      	str	r3, [r4, r2]
    43a8:	4a5b      	ldr	r2, [pc, #364]	; (4518 <PSP_CNFG_FP_REGISTERS_EXIST+0x518>)
    43aa:	50a3      	str	r3, [r4, r2]
    43ac:	22c6      	movs	r2, #198	; 0xc6
    43ae:	00d2      	lsls	r2, r2, #3
    43b0:	50a3      	str	r3, [r4, r2]
    43b2:	4a5a      	ldr	r2, [pc, #360]	; (451c <PSP_CNFG_FP_REGISTERS_EXIST+0x51c>)
    43b4:	50a3      	str	r3, [r4, r2]
    43b6:	22c7      	movs	r2, #199	; 0xc7
    43b8:	00d2      	lsls	r2, r2, #3
    43ba:	50a3      	str	r3, [r4, r2]
    43bc:	4a58      	ldr	r2, [pc, #352]	; (4520 <PSP_CNFG_FP_REGISTERS_EXIST+0x520>)
    43be:	50a3      	str	r3, [r4, r2]
    43c0:	22c8      	movs	r2, #200	; 0xc8
    43c2:	00d2      	lsls	r2, r2, #3
    43c4:	50a3      	str	r3, [r4, r2]
    43c6:	4a57      	ldr	r2, [pc, #348]	; (4524 <PSP_CNFG_FP_REGISTERS_EXIST+0x524>)
    43c8:	50a3      	str	r3, [r4, r2]
    43ca:	22c9      	movs	r2, #201	; 0xc9
    43cc:	00d2      	lsls	r2, r2, #3
    43ce:	50a3      	str	r3, [r4, r2]
    43d0:	22ca      	movs	r2, #202	; 0xca
    43d2:	00d2      	lsls	r2, r2, #3
    43d4:	50a3      	str	r3, [r4, r2]
    43d6:	4a54      	ldr	r2, [pc, #336]	; (4528 <PSP_CNFG_FP_REGISTERS_EXIST+0x528>)
    43d8:	50a3      	str	r3, [r4, r2]
    43da:	22cb      	movs	r2, #203	; 0xcb
    43dc:	00d2      	lsls	r2, r2, #3
    43de:	50a3      	str	r3, [r4, r2]
    43e0:	4a52      	ldr	r2, [pc, #328]	; (452c <PSP_CNFG_FP_REGISTERS_EXIST+0x52c>)
    43e2:	50a3      	str	r3, [r4, r2]
    43e4:	22cc      	movs	r2, #204	; 0xcc
    43e6:	00d2      	lsls	r2, r2, #3
    43e8:	50a3      	str	r3, [r4, r2]
    43ea:	4a51      	ldr	r2, [pc, #324]	; (4530 <PSP_CNFG_FP_REGISTERS_EXIST+0x530>)
    43ec:	50a3      	str	r3, [r4, r2]
    43ee:	22cd      	movs	r2, #205	; 0xcd
    43f0:	00d2      	lsls	r2, r2, #3
    43f2:	50a3      	str	r3, [r4, r2]
    43f4:	4a4f      	ldr	r2, [pc, #316]	; (4534 <PSP_CNFG_FP_REGISTERS_EXIST+0x534>)
    43f6:	50a3      	str	r3, [r4, r2]
    43f8:	22ce      	movs	r2, #206	; 0xce
    43fa:	00d2      	lsls	r2, r2, #3
    43fc:	50a3      	str	r3, [r4, r2]
    43fe:	4a4e      	ldr	r2, [pc, #312]	; (4538 <PSP_CNFG_FP_REGISTERS_EXIST+0x538>)
    4400:	50a3      	str	r3, [r4, r2]
    4402:	22cf      	movs	r2, #207	; 0xcf
    4404:	00d2      	lsls	r2, r2, #3
    4406:	50a3      	str	r3, [r4, r2]
    4408:	4a4c      	ldr	r2, [pc, #304]	; (453c <PSP_CNFG_FP_REGISTERS_EXIST+0x53c>)
    440a:	50a3      	str	r3, [r4, r2]
    440c:	4a4c      	ldr	r2, [pc, #304]	; (4540 <PSP_CNFG_FP_REGISTERS_EXIST+0x540>)
    440e:	50a3      	str	r3, [r4, r2]
    4410:	22d1      	movs	r2, #209	; 0xd1
    4412:	00d2      	lsls	r2, r2, #3
    4414:	50a3      	str	r3, [r4, r2]
    4416:	4a4b      	ldr	r2, [pc, #300]	; (4544 <PSP_CNFG_FP_REGISTERS_EXIST+0x544>)
    4418:	50a3      	str	r3, [r4, r2]
    441a:	22d2      	movs	r2, #210	; 0xd2
    441c:	00d2      	lsls	r2, r2, #3
    441e:	50a3      	str	r3, [r4, r2]
    4420:	4a49      	ldr	r2, [pc, #292]	; (4548 <PSP_CNFG_FP_REGISTERS_EXIST+0x548>)
    4422:	50a3      	str	r3, [r4, r2]
    4424:	22d3      	movs	r2, #211	; 0xd3
    4426:	00d2      	lsls	r2, r2, #3
    4428:	50a3      	str	r3, [r4, r2]
    442a:	4a48      	ldr	r2, [pc, #288]	; (454c <PSP_CNFG_FP_REGISTERS_EXIST+0x54c>)
    442c:	50a3      	str	r3, [r4, r2]
    442e:	22d4      	movs	r2, #212	; 0xd4
    4430:	00d2      	lsls	r2, r2, #3
    4432:	50a3      	str	r3, [r4, r2]
    4434:	4a46      	ldr	r2, [pc, #280]	; (4550 <PSP_CNFG_FP_REGISTERS_EXIST+0x550>)
    4436:	50a3      	str	r3, [r4, r2]
    4438:	22d5      	movs	r2, #213	; 0xd5
    443a:	00d2      	lsls	r2, r2, #3
    443c:	50a3      	str	r3, [r4, r2]
    443e:	4a45      	ldr	r2, [pc, #276]	; (4554 <PSP_CNFG_FP_REGISTERS_EXIST+0x554>)
    4440:	50a3      	str	r3, [r4, r2]
    4442:	22d6      	movs	r2, #214	; 0xd6
    4444:	00d2      	lsls	r2, r2, #3
    4446:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:278
	}
	// loop over non-zero values
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw12x12[i][i] = FQWINITTHTH_9DOF_GBY_KALMAN;
    4448:	228f      	movs	r2, #143	; 0x8f
    444a:	00d2      	lsls	r2, r2, #3
    444c:	50a5      	str	r5, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:280
		// b_e * b_e terms
		pthisSV->fQw12x12[i + 3][i + 3] = FQWINITBB_9DOF_GBY_KALMAN;
    444e:	4a42      	ldr	r2, [pc, #264]	; (4558 <PSP_CNFG_FP_REGISTERS_EXIST+0x558>)
    4450:	50a0      	str	r0, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:282
		// th_e * b_e terms
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = FQWINITTHB_9DOF_GBY_KALMAN;
    4452:	22a1      	movs	r2, #161	; 0xa1
    4454:	00d2      	lsls	r2, r2, #3
    4456:	50a3      	str	r3, [r4, r2]
    4458:	4a40      	ldr	r2, [pc, #256]	; (455c <PSP_CNFG_FP_REGISTERS_EXIST+0x55c>)
    445a:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:284
		// a_e * a_e terms
		pthisSV->fQw12x12[i + 6][i + 6] = FQWINITAA_9DOF_GBY_KALMAN;
    445c:	22b6      	movs	r2, #182	; 0xb6
    445e:	00d2      	lsls	r2, r2, #3
    4460:	50a1      	str	r1, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:286
		// d_e * d_e terms
		pthisSV->fQw12x12[i + 9][i + 9] = FQWINITDD_9DOF_GBY_KALMAN;
    4462:	4a3f      	ldr	r2, [pc, #252]	; (4560 <PSP_CNFG_FP_REGISTERS_EXIST+0x560>)
    4464:	51a2      	str	r2, [r4, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:278
	}
	// loop over non-zero values
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw12x12[i][i] = FQWINITTHTH_9DOF_GBY_KALMAN;
    4466:	4e3f      	ldr	r6, [pc, #252]	; (4564 <PSP_CNFG_FP_REGISTERS_EXIST+0x564>)
    4468:	51a5      	str	r5, [r4, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:280
		// b_e * b_e terms
		pthisSV->fQw12x12[i + 3][i + 3] = FQWINITBB_9DOF_GBY_KALMAN;
    446a:	26a9      	movs	r6, #169	; 0xa9
    446c:	00f6      	lsls	r6, r6, #3
    446e:	51a0      	str	r0, [r4, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:282
		// th_e * b_e terms
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = FQWINITTHB_9DOF_GBY_KALMAN;
    4470:	4e3d      	ldr	r6, [pc, #244]	; (4568 <PSP_CNFG_FP_REGISTERS_EXIST+0x568>)
    4472:	51a3      	str	r3, [r4, r6]
    4474:	2697      	movs	r6, #151	; 0x97
    4476:	00f6      	lsls	r6, r6, #3
    4478:	51a3      	str	r3, [r4, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:284
		// a_e * a_e terms
		pthisSV->fQw12x12[i + 6][i + 6] = FQWINITAA_9DOF_GBY_KALMAN;
    447a:	4e3c      	ldr	r6, [pc, #240]	; (456c <PSP_CNFG_FP_REGISTERS_EXIST+0x56c>)
    447c:	51a1      	str	r1, [r4, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:286
		// d_e * d_e terms
		pthisSV->fQw12x12[i + 9][i + 9] = FQWINITDD_9DOF_GBY_KALMAN;
    447e:	26d0      	movs	r6, #208	; 0xd0
    4480:	00f6      	lsls	r6, r6, #3
    4482:	51a2      	str	r2, [r4, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:278
	}
	// loop over non-zero values
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw12x12[i][i] = FQWINITTHTH_9DOF_GBY_KALMAN;
    4484:	269c      	movs	r6, #156	; 0x9c
    4486:	00f6      	lsls	r6, r6, #3
    4488:	51a5      	str	r5, [r4, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:280
		// b_e * b_e terms
		pthisSV->fQw12x12[i + 3][i + 3] = FQWINITBB_9DOF_GBY_KALMAN;
    448a:	4d39      	ldr	r5, [pc, #228]	; (4570 <PSP_CNFG_FP_REGISTERS_EXIST+0x570>)
    448c:	5160      	str	r0, [r4, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:282
		// th_e * b_e terms
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = FQWINITTHB_9DOF_GBY_KALMAN;
    448e:	20ae      	movs	r0, #174	; 0xae
    4490:	00c0      	lsls	r0, r0, #3
    4492:	5023      	str	r3, [r4, r0]
    4494:	4837      	ldr	r0, [pc, #220]	; (4574 <PSP_CNFG_FP_REGISTERS_EXIST+0x574>)
    4496:	5023      	str	r3, [r4, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:284
		// a_e * a_e terms
		pthisSV->fQw12x12[i + 6][i + 6] = FQWINITAA_9DOF_GBY_KALMAN;
    4498:	23c3      	movs	r3, #195	; 0xc3
    449a:	00db      	lsls	r3, r3, #3
    449c:	50e1      	str	r1, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:286
		// d_e * d_e terms
		pthisSV->fQw12x12[i + 9][i + 9] = FQWINITDD_9DOF_GBY_KALMAN;
    449e:	4b36      	ldr	r3, [pc, #216]	; (4578 <PSP_CNFG_FP_REGISTERS_EXIST+0x578>)
    44a0:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:290
	}

	// update the default quaternion type supported to the most sophisticated
	if (globals.DefaultQuaternionPacketType < Q9)
    44a2:	4b36      	ldr	r3, [pc, #216]	; (457c <PSP_CNFG_FP_REGISTERS_EXIST+0x57c>)
    44a4:	795a      	ldrb	r2, [r3, #5]
    44a6:	2a04      	cmp	r2, #4
    44a8:	d802      	bhi.n	44b0 <PSP_CNFG_FP_REGISTERS_EXIST+0x4b0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:291
		globals.QuaternionPacketType = globals.DefaultQuaternionPacketType = Q9; 
    44aa:	2205      	movs	r2, #5
    44ac:	715a      	strb	r2, [r3, #5]
    44ae:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:294

	// clear the reset flag
	pthisSV->resetflag = false;
    44b0:	4b33      	ldr	r3, [pc, #204]	; (4580 <PSP_CNFG_FP_REGISTERS_EXIST+0x580>)
    44b2:	2200      	movs	r2, #0
    44b4:	54e2      	strb	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:297

	return;
} // end fInit_9DOF_GBY_KALMAN
    44b6:	bc04      	pop	{r2}
    44b8:	4690      	mov	r8, r2
    44ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:255
		pthisSV->fmGl[Z] = 0.0F;
	}
	else
	{
		// initialize Android and Win8 geomagnetic vector to zero degrees inclination
		pthisSV->fmGl[X] = 0.0F;
    44bc:	2382      	movs	r3, #130	; 0x82
    44be:	005b      	lsls	r3, r3, #1
    44c0:	50e5      	str	r5, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:256
		pthisSV->fmGl[Y] = DEFAULTB;
    44c2:	4a30      	ldr	r2, [pc, #192]	; (4584 <PSP_CNFG_FP_REGISTERS_EXIST+0x584>)
    44c4:	2384      	movs	r3, #132	; 0x84
    44c6:	005b      	lsls	r3, r3, #1
    44c8:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:257
		pthisSV->fmGl[Z] = 0.0F;
    44ca:	2386      	movs	r3, #134	; 0x86
    44cc:	005b      	lsls	r3, r3, #1
    44ce:	50e5      	str	r5, [r4, r3]
    44d0:	e5b8      	b.n	4044 <PSP_CNFG_FP_REGISTERS_EXIST+0x44>
    44d2:	46c0      	nop			; (mov r8, r8)
    44d4:	0000059c 	.word	0x0000059c
    44d8:	000005a4 	.word	0x000005a4
    44dc:	000005ac 	.word	0x000005ac
    44e0:	000005b4 	.word	0x000005b4
    44e4:	000005bc 	.word	0x000005bc
    44e8:	000005c4 	.word	0x000005c4
    44ec:	000005cc 	.word	0x000005cc
    44f0:	000005d4 	.word	0x000005d4
    44f4:	000005dc 	.word	0x000005dc
    44f8:	000005ec 	.word	0x000005ec
    44fc:	000005f4 	.word	0x000005f4
    4500:	000005fc 	.word	0x000005fc
    4504:	00000604 	.word	0x00000604
    4508:	0000060c 	.word	0x0000060c
    450c:	00000614 	.word	0x00000614
    4510:	0000061c 	.word	0x0000061c
    4514:	00000624 	.word	0x00000624
    4518:	0000062c 	.word	0x0000062c
    451c:	00000634 	.word	0x00000634
    4520:	0000063c 	.word	0x0000063c
    4524:	00000644 	.word	0x00000644
    4528:	00000654 	.word	0x00000654
    452c:	0000065c 	.word	0x0000065c
    4530:	00000664 	.word	0x00000664
    4534:	0000066c 	.word	0x0000066c
    4538:	00000674 	.word	0x00000674
    453c:	0000067c 	.word	0x0000067c
    4540:	00000684 	.word	0x00000684
    4544:	0000068c 	.word	0x0000068c
    4548:	00000694 	.word	0x00000694
    454c:	0000069c 	.word	0x0000069c
    4550:	000006a4 	.word	0x000006a4
    4554:	000006ac 	.word	0x000006ac
    4558:	00000514 	.word	0x00000514
    455c:	00000484 	.word	0x00000484
    4560:	3f19999a 	.word	0x3f19999a
    4564:	000004ac 	.word	0x000004ac
    4568:	0000053c 	.word	0x0000053c
    456c:	000005e4 	.word	0x000005e4
    4570:	0000057c 	.word	0x0000057c
    4574:	000004ec 	.word	0x000004ec
    4578:	000006b4 	.word	0x000006b4
    457c:	1fffe478 	.word	0x1fffe478
    4580:	00000836 	.word	0x00000836
    4584:	42480000 	.word	0x42480000

00004588 <fRun_1DOF_P_BASIC>:
fRun_1DOF_P_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:301
	return;
} // end fInit_9DOF_GBY_KALMAN

// 1DOF pressure function
void fRun_1DOF_P_BASIC(struct SV_1DOF_P_BASIC *pthisSV, struct PressureSensor *pthisPressure, int32 loopcounter)
{
    4588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:303
	// do a reset and return if requested
	if (pthisSV->resetflag)
    458a:	2514      	movs	r5, #20
    458c:	5745      	ldrsb	r5, [r0, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:301
	return;
} // end fInit_9DOF_GBY_KALMAN

// 1DOF pressure function
void fRun_1DOF_P_BASIC(struct SV_1DOF_P_BASIC *pthisSV, struct PressureSensor *pthisPressure, int32 loopcounter)
{
    458e:	1c04      	adds	r4, r0, #0
    4590:	1c0f      	adds	r7, r1, #0
    4592:	1c16      	adds	r6, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:303
	// do a reset and return if requested
	if (pthisSV->resetflag)
    4594:	2d00      	cmp	r5, #0
    4596:	d006      	beq.n	45a6 <fRun_1DOF_P_BASIC+0x1e>
fInit_1DOF_P_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:42
#include "string.h"

void fInit_1DOF_P_BASIC(struct SV_1DOF_P_BASIC *pthisSV, float flpftimesecs, int16 iSensorFS, int16 iOverSampleRatio)
{
	// set algorithm sampling interval (typically 25Hz) and low pass filter
	pthisSV->fdeltat = (float) iOverSampleRatio / (float) iSensorFS;
    4598:	4b0a      	ldr	r3, [pc, #40]	; (45c4 <fRun_1DOF_P_BASIC+0x3c>)
    459a:	6083      	str	r3, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:43
	pthisSV->flpf = pthisSV->fdeltat / flpftimesecs;
    459c:	4b0a      	ldr	r3, [pc, #40]	; (45c8 <fRun_1DOF_P_BASIC+0x40>)
    459e:	60c3      	str	r3, [r0, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:50
	{
		pthisSV->flpf = 1.0F;
	}

	// clear the reset flag
	pthisSV->resetflag = false;
    45a0:	2300      	movs	r3, #0
    45a2:	7503      	strb	r3, [r0, #20]
fRun_1DOF_P_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:314
	// low pass filter the block averaged (typically 25Hz) height and temperature readings
	fLPFScalar(&(pthisPressure->fHp), &(pthisSV->fLPHp), pthisSV->flpf, loopcounter);
	fLPFScalar(&(pthisPressure->fTp), &(pthisSV->fLPTp), pthisSV->flpf, loopcounter);

	return;
} // end fRun_1DOF_P_BASIC
    45a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:310
		fInit_1DOF_P_BASIC(pthisSV, 1.5F, SENSORFS, OVERSAMPLE_RATIO);
		return;
	}

	// low pass filter the block averaged (typically 25Hz) height and temperature readings
	fLPFScalar(&(pthisPressure->fHp), &(pthisSV->fLPHp), pthisSV->flpf, loopcounter);
    45a6:	1c08      	adds	r0, r1, #0
    45a8:	68e2      	ldr	r2, [r4, #12]
    45aa:	1c21      	adds	r1, r4, #0
    45ac:	1c33      	adds	r3, r6, #0
    45ae:	3008      	adds	r0, #8
    45b0:	f009 fc04 	bl	ddbc <fLPFScalar>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:311
	fLPFScalar(&(pthisPressure->fTp), &(pthisSV->fLPTp), pthisSV->flpf, loopcounter);
    45b4:	1c38      	adds	r0, r7, #0
    45b6:	300c      	adds	r0, #12
    45b8:	1d21      	adds	r1, r4, #4
    45ba:	68e2      	ldr	r2, [r4, #12]
    45bc:	1c33      	adds	r3, r6, #0
    45be:	f009 fbfd 	bl	ddbc <fLPFScalar>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:313

	return;
    45c2:	e7ef      	b.n	45a4 <fRun_1DOF_P_BASIC+0x1c>
    45c4:	3d23d70a 	.word	0x3d23d70a
    45c8:	3cda740d 	.word	0x3cda740d

000045cc <fRun_3DOF_G_BASIC>:
fRun_3DOF_G_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:318
} // end fRun_1DOF_P_BASIC

// 3DOF orientation function which calls tilt functions and implements low pass filters
void fRun_3DOF_G_BASIC(struct SV_3DOF_G_BASIC *pthisSV, struct AccelSensor *pthisAccel, int32 loopcounter, int16 ithisCoordSystem)
{
    45cc:	b570      	push	{r4, r5, r6, lr}
    45ce:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:320
	// do a reset and return if requested
	if (pthisSV->resetflag)
    45d0:	20a0      	movs	r0, #160	; 0xa0
    45d2:	5625      	ldrsb	r5, [r4, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:318
	return;
} // end fRun_1DOF_P_BASIC

// 3DOF orientation function which calls tilt functions and implements low pass filters
void fRun_3DOF_G_BASIC(struct SV_3DOF_G_BASIC *pthisSV, struct AccelSensor *pthisAccel, int32 loopcounter, int16 ithisCoordSystem)
{
    45d4:	b082      	sub	sp, #8
    45d6:	1c16      	adds	r6, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:320
	// do a reset and return if requested
	if (pthisSV->resetflag)
    45d8:	2d00      	cmp	r5, #0
    45da:	d136      	bne.n	464a <fRun_3DOF_G_BASIC+0x7e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:330

	// apply the tilt estimation algorithm to get the instantaneous orientation matrix
	if (ithisCoordSystem == NED)
	{
		// call NED tilt function
		f3DOFTiltNED(pthisSV->fR, pthisAccel->fGp);
    45dc:	1c25      	adds	r5, r4, #0
    45de:	3564      	adds	r5, #100	; 0x64
    45e0:	3118      	adds	r1, #24
    45e2:	1c28      	adds	r0, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:327
		fInit_3DOF_G_BASIC(pthisSV, 0.2F, SENSORFS, OVERSAMPLE_RATIO);
		return;
	}

	// apply the tilt estimation algorithm to get the instantaneous orientation matrix
	if (ithisCoordSystem == NED)
    45e4:	2b00      	cmp	r3, #0
    45e6:	d039      	beq.n	465c <fRun_3DOF_G_BASIC+0x90>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:332
	{
		// call NED tilt function
		f3DOFTiltNED(pthisSV->fR, pthisAccel->fGp);
	}
	else if (ithisCoordSystem == ANDROID)
    45e8:	2b01      	cmp	r3, #1
    45ea:	d062      	beq.n	46b2 <fRun_3DOF_G_BASIC+0xe6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:340
		f3DOFTiltAndroid(pthisSV->fR, pthisAccel->fGp);
	}
	else
	{
		// call Windows 8 tilt function
		f3DOFTiltWin8(pthisSV->fR, pthisAccel->fGp);
    45ec:	f007 ff96 	bl	c51c <f3DOFTiltWin8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:344
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    45f0:	1c28      	adds	r0, r5, #0
    45f2:	3524      	adds	r5, #36	; 0x24
    45f4:	1c29      	adds	r1, r5, #0
    45f6:	f008 ffdf 	bl	d5b8 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:347

	// low pass filter the orientation quaternion 
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    45fa:	239c      	movs	r3, #156	; 0x9c
    45fc:	1c21      	adds	r1, r4, #0
    45fe:	58e2      	ldr	r2, [r4, r3]
    4600:	1c28      	adds	r0, r5, #0
    4602:	3154      	adds	r1, #84	; 0x54
    4604:	3d50      	subs	r5, #80	; 0x50
    4606:	9601      	str	r6, [sp, #4]
    4608:	2398      	movs	r3, #152	; 0x98
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:350

	// compute the low pass rotation matrix and rotation vector
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    460a:	1c26      	adds	r6, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:347

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion 
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    460c:	58e3      	ldr	r3, [r4, r3]
    460e:	9100      	str	r1, [sp, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:350

	// compute the low pass rotation matrix and rotation vector
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    4610:	3614      	adds	r6, #20
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:347

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion 
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    4612:	1c29      	adds	r1, r5, #0
    4614:	f009 f95c 	bl	d8d0 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:350

	// compute the low pass rotation matrix and rotation vector
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    4618:	1c30      	adds	r0, r6, #0
    461a:	1c29      	adds	r1, r5, #0
    461c:	f009 f86c 	bl	d6f8 <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:351
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    4620:	1c21      	adds	r1, r4, #0
    4622:	1c28      	adds	r0, r5, #0
    4624:	3148      	adds	r1, #72	; 0x48
    4626:	f009 f8f7 	bl	d818 <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:369
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}
	else
	{
		// calculate Windows 8 Euler angles
		fWin8AnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    462a:	1c23      	adds	r3, r4, #0
    462c:	330c      	adds	r3, #12
    462e:	9300      	str	r3, [sp, #0]
    4630:	3304      	adds	r3, #4
    4632:	9301      	str	r3, [sp, #4]
    4634:	1d22      	adds	r2, r4, #4
    4636:	1c30      	adds	r0, r6, #0
    4638:	1c21      	adds	r1, r4, #0
    463a:	3b08      	subs	r3, #8
    463c:	f008 fe34 	bl	d2a8 <fWin8AnglesDegFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:374
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}

	// force the yaw and compass angles to zero
	pthisSV->fLPPsi = pthisSV->fLPRho = 0.0F;
    4640:	2300      	movs	r3, #0
    4642:	60e3      	str	r3, [r4, #12]
    4644:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:377

	return;
} // end fRun_3DOF_G_BASIC
    4646:	b002      	add	sp, #8
    4648:	bd70      	pop	{r4, r5, r6, pc}
fInit_3DOF_G_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:58
} // end fInit_1DOF_P_BASIC

void fInit_3DOF_G_BASIC(struct SV_3DOF_G_BASIC *pthisSV, float flpftimesecs, int16 iSensorFS, int16 iOverSampleRatio)
{
	// set algorithm sampling interval (typically 25Hz)
	pthisSV->fdeltat = (float) iOverSampleRatio / (float) iSensorFS;
    464a:	4a2f      	ldr	r2, [pc, #188]	; (4708 <fRun_3DOF_G_BASIC+0x13c>)
    464c:	2398      	movs	r3, #152	; 0x98
    464e:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:62

	// set low pass filter constant with maximum value 1.0 (all pass) decreasing to 0.0 (increasing low pass)
	if (flpftimesecs > pthisSV->fdeltat)
		pthisSV->flpf = pthisSV->fdeltat / flpftimesecs;
    4650:	4a2e      	ldr	r2, [pc, #184]	; (470c <fRun_3DOF_G_BASIC+0x140>)
    4652:	239c      	movs	r3, #156	; 0x9c
    4654:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:71
	// update the default quaternion type supported to the most sophisticated
	if (globals.DefaultQuaternionPacketType < Q3)
		globals.QuaternionPacketType = globals.DefaultQuaternionPacketType = Q3; 

	// clear the reset flag
	pthisSV->resetflag = false;
    4656:	2300      	movs	r3, #0
    4658:	5423      	strb	r3, [r4, r0]
    465a:	e7f4      	b.n	4646 <fRun_3DOF_G_BASIC+0x7a>
fRun_3DOF_G_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:330

	// apply the tilt estimation algorithm to get the instantaneous orientation matrix
	if (ithisCoordSystem == NED)
	{
		// call NED tilt function
		f3DOFTiltNED(pthisSV->fR, pthisAccel->fGp);
    465c:	f007 fe2e 	bl	c2bc <f3DOFTiltNED>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:344
		// call Windows 8 tilt function
		f3DOFTiltWin8(pthisSV->fR, pthisAccel->fGp);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    4660:	1c28      	adds	r0, r5, #0
    4662:	3524      	adds	r5, #36	; 0x24
    4664:	1c29      	adds	r1, r5, #0
    4666:	f008 ffa7 	bl	d5b8 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:347

	// low pass filter the orientation quaternion 
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    466a:	239c      	movs	r3, #156	; 0x9c
    466c:	1c21      	adds	r1, r4, #0
    466e:	58e2      	ldr	r2, [r4, r3]
    4670:	9601      	str	r6, [sp, #4]
    4672:	1c28      	adds	r0, r5, #0
    4674:	3154      	adds	r1, #84	; 0x54
    4676:	3d50      	subs	r5, #80	; 0x50
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:350

	// compute the low pass rotation matrix and rotation vector
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    4678:	1c26      	adds	r6, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:347

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion 
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    467a:	2398      	movs	r3, #152	; 0x98
    467c:	58e3      	ldr	r3, [r4, r3]
    467e:	9100      	str	r1, [sp, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:350

	// compute the low pass rotation matrix and rotation vector
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    4680:	3614      	adds	r6, #20
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:347

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion 
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    4682:	1c29      	adds	r1, r5, #0
    4684:	f009 f924 	bl	d8d0 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:350

	// compute the low pass rotation matrix and rotation vector
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    4688:	1c30      	adds	r0, r6, #0
    468a:	1c29      	adds	r1, r5, #0
    468c:	f009 f834 	bl	d6f8 <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:351
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    4690:	1c21      	adds	r1, r4, #0
    4692:	1c28      	adds	r0, r5, #0
    4694:	3148      	adds	r1, #72	; 0x48
    4696:	f009 f8bf 	bl	d818 <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:357

	// calculate the Euler angles from the low pass orientation matrix
	if (ithisCoordSystem == NED)
	{
		// calculate NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    469a:	1c23      	adds	r3, r4, #0
    469c:	330c      	adds	r3, #12
    469e:	9300      	str	r3, [sp, #0]
    46a0:	3304      	adds	r3, #4
    46a2:	9301      	str	r3, [sp, #4]
    46a4:	1d22      	adds	r2, r4, #4
    46a6:	1c30      	adds	r0, r6, #0
    46a8:	1c21      	adds	r1, r4, #0
    46aa:	3b08      	subs	r3, #8
    46ac:	f008 fd10 	bl	d0d0 <fNEDAnglesDegFromRotationMatrix>
    46b0:	e7c6      	b.n	4640 <fRun_3DOF_G_BASIC+0x74>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:335
		f3DOFTiltNED(pthisSV->fR, pthisAccel->fGp);
	}
	else if (ithisCoordSystem == ANDROID)
	{
		// call Android tilt function
		f3DOFTiltAndroid(pthisSV->fR, pthisAccel->fGp);
    46b2:	f007 fe99 	bl	c3e8 <f3DOFTiltAndroid>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:344
		// call Windows 8 tilt function
		f3DOFTiltWin8(pthisSV->fR, pthisAccel->fGp);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    46b6:	1c28      	adds	r0, r5, #0
    46b8:	3524      	adds	r5, #36	; 0x24
    46ba:	1c29      	adds	r1, r5, #0
    46bc:	f008 ff7c 	bl	d5b8 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:347

	// low pass filter the orientation quaternion 
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    46c0:	239c      	movs	r3, #156	; 0x9c
    46c2:	1c21      	adds	r1, r4, #0
    46c4:	58e2      	ldr	r2, [r4, r3]
    46c6:	9601      	str	r6, [sp, #4]
    46c8:	1c28      	adds	r0, r5, #0
    46ca:	3154      	adds	r1, #84	; 0x54
    46cc:	3d50      	subs	r5, #80	; 0x50
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:350

	// compute the low pass rotation matrix and rotation vector
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    46ce:	1c26      	adds	r6, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:347

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion 
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    46d0:	2398      	movs	r3, #152	; 0x98
    46d2:	58e3      	ldr	r3, [r4, r3]
    46d4:	9100      	str	r1, [sp, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:350

	// compute the low pass rotation matrix and rotation vector
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    46d6:	3614      	adds	r6, #20
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:347

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion 
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    46d8:	1c29      	adds	r1, r5, #0
    46da:	f009 f8f9 	bl	d8d0 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:350

	// compute the low pass rotation matrix and rotation vector
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    46de:	1c30      	adds	r0, r6, #0
    46e0:	1c29      	adds	r1, r5, #0
    46e2:	f009 f809 	bl	d6f8 <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:351
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    46e6:	1c21      	adds	r1, r4, #0
    46e8:	1c28      	adds	r0, r5, #0
    46ea:	3148      	adds	r1, #72	; 0x48
    46ec:	f009 f894 	bl	d818 <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:363
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}
	else if (ithisCoordSystem == ANDROID)
	{
		// calculate Android Euler angles
		fAndroidAnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    46f0:	1c23      	adds	r3, r4, #0
    46f2:	330c      	adds	r3, #12
    46f4:	9300      	str	r3, [sp, #0]
    46f6:	3304      	adds	r3, #4
    46f8:	9301      	str	r3, [sp, #4]
    46fa:	1d22      	adds	r2, r4, #4
    46fc:	1c30      	adds	r0, r6, #0
    46fe:	1c21      	adds	r1, r4, #0
    4700:	3b08      	subs	r3, #8
    4702:	f008 fd5b 	bl	d1bc <fAndroidAnglesDegFromRotationMatrix>
    4706:	e79b      	b.n	4640 <fRun_3DOF_G_BASIC+0x74>
    4708:	3d23d70a 	.word	0x3d23d70a
    470c:	3e4ccccc 	.word	0x3e4ccccc

00004710 <fRun_3DOF_B_BASIC>:
fRun_3DOF_B_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:381
	return;
} // end fRun_3DOF_G_BASIC

// 2D automobile eCompass
void fRun_3DOF_B_BASIC(struct SV_3DOF_B_BASIC *pthisSV, struct MagSensor *pthisMag, int32 loopcounter, int16 ithisCoordSystem)
{
    4710:	b5f0      	push	{r4, r5, r6, r7, lr}
    4712:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:383
	// do a reset and return if requested
	if (pthisSV->resetflag)
    4714:	20a0      	movs	r0, #160	; 0xa0
    4716:	5620      	ldrsb	r0, [r4, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:381
	return;
} // end fRun_3DOF_G_BASIC

// 2D automobile eCompass
void fRun_3DOF_B_BASIC(struct SV_3DOF_B_BASIC *pthisSV, struct MagSensor *pthisMag, int32 loopcounter, int16 ithisCoordSystem)
{
    4718:	b083      	sub	sp, #12
    471a:	1c15      	adds	r5, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:383
	// do a reset and return if requested
	if (pthisSV->resetflag)
    471c:	2800      	cmp	r0, #0
    471e:	d011      	beq.n	4744 <fRun_3DOF_B_BASIC+0x34>
fInit_3DOF_B_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:79
} // end fInit_3DOF_G_BASIC

void fInit_3DOF_B_BASIC(struct SV_3DOF_B_BASIC *pthisSV, float flpftimesecs, int16 iSensorFS, int16 iOverSampleRatio)
{
	// set algorithm sampling interval (typically 25Hz)
	pthisSV->fdeltat = (float) iOverSampleRatio / (float) iSensorFS;
    4720:	4a50      	ldr	r2, [pc, #320]	; (4864 <fRun_3DOF_B_BASIC+0x154>)
    4722:	2398      	movs	r3, #152	; 0x98
    4724:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:83

	// set low pass filter constant with maximum value 1.0 (all pass) decreasing to 0.0 (increasing low pass)
	if (flpftimesecs > pthisSV->fdeltat)
		pthisSV->flpf = pthisSV->fdeltat / flpftimesecs;
    4726:	4a50      	ldr	r2, [pc, #320]	; (4868 <fRun_3DOF_B_BASIC+0x158>)
    4728:	239c      	movs	r3, #156	; 0x9c
    472a:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:88
	else
		pthisSV->flpf = 1.0F;

	// update the default quaternion type supported to the most sophisticated
	if (globals.DefaultQuaternionPacketType < Q3M)
    472c:	4b4f      	ldr	r3, [pc, #316]	; (486c <fRun_3DOF_B_BASIC+0x15c>)
    472e:	795a      	ldrb	r2, [r3, #5]
    4730:	2a00      	cmp	r2, #0
    4732:	d102      	bne.n	473a <fRun_3DOF_B_BASIC+0x2a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:89
		globals.QuaternionPacketType = globals.DefaultQuaternionPacketType = Q3M; 
    4734:	2201      	movs	r2, #1
    4736:	715a      	strb	r2, [r3, #5]
    4738:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:92

	// clear the reset flag
	pthisSV->resetflag = false;
    473a:	2200      	movs	r2, #0
    473c:	23a0      	movs	r3, #160	; 0xa0
    473e:	54e2      	strb	r2, [r4, r3]
fRun_3DOF_B_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:435
		fWin8AnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}

	return;
}
    4740:	b003      	add	sp, #12
    4742:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:393

	// calculate the 3DOF magnetometer orientation matrix from fBc
	if (ithisCoordSystem == NED)
	{
		// call NED magnetic rotation matrix function
		f3DOFMagnetometerMatrixNED(pthisSV->fR, pthisMag->fBc);
    4744:	1c26      	adds	r6, r4, #0
    4746:	3664      	adds	r6, #100	; 0x64
    4748:	3130      	adds	r1, #48	; 0x30
    474a:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:390
		fInit_3DOF_B_BASIC(pthisSV, 0.6F, SENSORFS, OVERSAMPLE_RATIO);
		return;
	}

	// calculate the 3DOF magnetometer orientation matrix from fBc
	if (ithisCoordSystem == NED)
    474c:	2b00      	cmp	r3, #0
    474e:	d02e      	beq.n	47ae <fRun_3DOF_B_BASIC+0x9e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:395
	{
		// call NED magnetic rotation matrix function
		f3DOFMagnetometerMatrixNED(pthisSV->fR, pthisMag->fBc);
	}
	else if (ithisCoordSystem == ANDROID)
    4750:	2b01      	cmp	r3, #1
    4752:	d059      	beq.n	4808 <fRun_3DOF_B_BASIC+0xf8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:407
		// call Windows 8 magnetic rotation matrix function
		f3DOFMagnetometerMatrixWin8(pthisSV->fR, pthisMag->fBc);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    4754:	1c27      	adds	r7, r4, #0
    4756:	3788      	adds	r7, #136	; 0x88
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:403
		f3DOFMagnetometerMatrixAndroid(pthisSV->fR, pthisMag->fBc);
	}
	else
	{
		// call Windows 8 magnetic rotation matrix function
		f3DOFMagnetometerMatrixWin8(pthisSV->fR, pthisMag->fBc);
    4758:	f008 f804 	bl	c764 <f3DOFMagnetometerMatrixWin8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:407
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    475c:	1c30      	adds	r0, r6, #0
    475e:	1c39      	adds	r1, r7, #0
    4760:	f008 ff2a 	bl	d5b8 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    4764:	239c      	movs	r3, #156	; 0x9c
    4766:	1c21      	adds	r1, r4, #0
    4768:	58e2      	ldr	r2, [r4, r3]
    476a:	3e2c      	subs	r6, #44	; 0x2c
    476c:	9501      	str	r5, [sp, #4]
    476e:	3154      	adds	r1, #84	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    4770:	1c25      	adds	r5, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    4772:	2398      	movs	r3, #152	; 0x98
    4774:	58e3      	ldr	r3, [r4, r3]
    4776:	9100      	str	r1, [sp, #0]
    4778:	1c38      	adds	r0, r7, #0
    477a:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    477c:	3514      	adds	r5, #20
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    477e:	f009 f8a7 	bl	d8d0 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    4782:	1c28      	adds	r0, r5, #0
    4784:	1c31      	adds	r1, r6, #0
    4786:	f008 ffb7 	bl	d6f8 <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:412
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    478a:	1c21      	adds	r1, r4, #0
    478c:	1c30      	adds	r0, r6, #0
    478e:	3148      	adds	r1, #72	; 0x48
    4790:	f009 f842 	bl	d818 <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:430
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}
	else
	{
		// calculate Windows 8 Euler angles
		fWin8AnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    4794:	1c21      	adds	r1, r4, #0
    4796:	310c      	adds	r1, #12
    4798:	1c23      	adds	r3, r4, #0
    479a:	9100      	str	r1, [sp, #0]
    479c:	3104      	adds	r1, #4
    479e:	9101      	str	r1, [sp, #4]
    47a0:	1d22      	adds	r2, r4, #4
    47a2:	3308      	adds	r3, #8
    47a4:	1c28      	adds	r0, r5, #0
    47a6:	1c21      	adds	r1, r4, #0
    47a8:	f008 fd7e 	bl	d2a8 <fWin8AnglesDegFromRotationMatrix>
    47ac:	e7c8      	b.n	4740 <fRun_3DOF_B_BASIC+0x30>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:407
		// call Windows 8 magnetic rotation matrix function
		f3DOFMagnetometerMatrixWin8(pthisSV->fR, pthisMag->fBc);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    47ae:	1c27      	adds	r7, r4, #0
    47b0:	3788      	adds	r7, #136	; 0x88
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:393

	// calculate the 3DOF magnetometer orientation matrix from fBc
	if (ithisCoordSystem == NED)
	{
		// call NED magnetic rotation matrix function
		f3DOFMagnetometerMatrixNED(pthisSV->fR, pthisMag->fBc);
    47b2:	f007 ff6b 	bl	c68c <f3DOFMagnetometerMatrixNED>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:407
		// call Windows 8 magnetic rotation matrix function
		f3DOFMagnetometerMatrixWin8(pthisSV->fR, pthisMag->fBc);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    47b6:	1c30      	adds	r0, r6, #0
    47b8:	1c39      	adds	r1, r7, #0
    47ba:	f008 fefd 	bl	d5b8 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    47be:	239c      	movs	r3, #156	; 0x9c
    47c0:	1c21      	adds	r1, r4, #0
    47c2:	58e2      	ldr	r2, [r4, r3]
    47c4:	3e2c      	subs	r6, #44	; 0x2c
    47c6:	9501      	str	r5, [sp, #4]
    47c8:	3154      	adds	r1, #84	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    47ca:	1c25      	adds	r5, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    47cc:	2398      	movs	r3, #152	; 0x98
    47ce:	58e3      	ldr	r3, [r4, r3]
    47d0:	9100      	str	r1, [sp, #0]
    47d2:	1c38      	adds	r0, r7, #0
    47d4:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    47d6:	3514      	adds	r5, #20
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    47d8:	f009 f87a 	bl	d8d0 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    47dc:	1c28      	adds	r0, r5, #0
    47de:	1c31      	adds	r1, r6, #0
    47e0:	f008 ff8a 	bl	d6f8 <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:412
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    47e4:	1c21      	adds	r1, r4, #0
    47e6:	1c30      	adds	r0, r6, #0
    47e8:	3148      	adds	r1, #72	; 0x48
    47ea:	f009 f815 	bl	d818 <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:418

	// calculate the Euler angles from the low pass orientation matrix
	if (ithisCoordSystem == NED)
	{
		// calculate NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    47ee:	1c21      	adds	r1, r4, #0
    47f0:	310c      	adds	r1, #12
    47f2:	1c23      	adds	r3, r4, #0
    47f4:	9100      	str	r1, [sp, #0]
    47f6:	3104      	adds	r1, #4
    47f8:	9101      	str	r1, [sp, #4]
    47fa:	1d22      	adds	r2, r4, #4
    47fc:	3308      	adds	r3, #8
    47fe:	1c28      	adds	r0, r5, #0
    4800:	1c21      	adds	r1, r4, #0
    4802:	f008 fc65 	bl	d0d0 <fNEDAnglesDegFromRotationMatrix>
    4806:	e79b      	b.n	4740 <fRun_3DOF_B_BASIC+0x30>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:407
		// call Windows 8 magnetic rotation matrix function
		f3DOFMagnetometerMatrixWin8(pthisSV->fR, pthisMag->fBc);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    4808:	1c27      	adds	r7, r4, #0
    480a:	3788      	adds	r7, #136	; 0x88
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:398
		f3DOFMagnetometerMatrixNED(pthisSV->fR, pthisMag->fBc);
	}
	else if (ithisCoordSystem == ANDROID)
	{
		// call Android magnetic rotation matrix function
		f3DOFMagnetometerMatrixAndroid(pthisSV->fR, pthisMag->fBc);
    480c:	f007 ff74 	bl	c6f8 <f3DOFMagnetometerMatrixAndroid>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:407
		// call Windows 8 magnetic rotation matrix function
		f3DOFMagnetometerMatrixWin8(pthisSV->fR, pthisMag->fBc);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    4810:	1c30      	adds	r0, r6, #0
    4812:	1c39      	adds	r1, r7, #0
    4814:	f008 fed0 	bl	d5b8 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    4818:	239c      	movs	r3, #156	; 0x9c
    481a:	1c21      	adds	r1, r4, #0
    481c:	58e2      	ldr	r2, [r4, r3]
    481e:	3e2c      	subs	r6, #44	; 0x2c
    4820:	9501      	str	r5, [sp, #4]
    4822:	3154      	adds	r1, #84	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    4824:	1c25      	adds	r5, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    4826:	2398      	movs	r3, #152	; 0x98
    4828:	58e3      	ldr	r3, [r4, r3]
    482a:	9100      	str	r1, [sp, #0]
    482c:	1c38      	adds	r0, r7, #0
    482e:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    4830:	3514      	adds	r5, #20
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    4832:	f009 f84d 	bl	d8d0 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    4836:	1c28      	adds	r0, r5, #0
    4838:	1c31      	adds	r1, r6, #0
    483a:	f008 ff5d 	bl	d6f8 <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:412
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    483e:	1c21      	adds	r1, r4, #0
    4840:	1c30      	adds	r0, r6, #0
    4842:	3148      	adds	r1, #72	; 0x48
    4844:	f008 ffe8 	bl	d818 <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:424
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}
	else if (ithisCoordSystem == ANDROID)
	{
		// calculate Android Euler angles
		fAndroidAnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    4848:	1c21      	adds	r1, r4, #0
    484a:	310c      	adds	r1, #12
    484c:	1c23      	adds	r3, r4, #0
    484e:	9100      	str	r1, [sp, #0]
    4850:	3104      	adds	r1, #4
    4852:	9101      	str	r1, [sp, #4]
    4854:	1d22      	adds	r2, r4, #4
    4856:	3308      	adds	r3, #8
    4858:	1c28      	adds	r0, r5, #0
    485a:	1c21      	adds	r1, r4, #0
    485c:	f008 fcae 	bl	d1bc <fAndroidAnglesDegFromRotationMatrix>
    4860:	e76e      	b.n	4740 <fRun_3DOF_B_BASIC+0x30>
    4862:	46c0      	nop			; (mov r8, r8)
    4864:	3d23d70a 	.word	0x3d23d70a
    4868:	3d888888 	.word	0x3d888888
    486c:	1fffe478 	.word	0x1fffe478

00004870 <fRun_3DOF_Y_BASIC>:
fRun_3DOF_Y_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:439
	return;
}

// basic gyro integration function
void fRun_3DOF_Y_BASIC(struct SV_3DOF_Y_BASIC *pthisSV, struct GyroSensor *pthisGyro, int32 loopcounter, int16 ithisCoordSystem, int16 iOverSampleRatio)
{
    4870:	b5f0      	push	{r4, r5, r6, r7, lr}
    4872:	464d      	mov	r5, r9
    4874:	4644      	mov	r4, r8
    4876:	465f      	mov	r7, fp
    4878:	4656      	mov	r6, sl
    487a:	b4f0      	push	{r4, r5, r6, r7}
    487c:	b089      	sub	sp, #36	; 0x24
    487e:	9303      	str	r3, [sp, #12]
    4880:	ab12      	add	r3, sp, #72	; 0x48
    4882:	4689      	mov	r9, r1
    4884:	2200      	movs	r2, #0
    4886:	5e99      	ldrsh	r1, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:444
	float rvec[3];							// rotation vector
	int8 i, j;								// loop counters

	// do a reset and return if requested
	if (pthisSV->resetflag)
    4888:	237c      	movs	r3, #124	; 0x7c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:439
	return;
}

// basic gyro integration function
void fRun_3DOF_Y_BASIC(struct SV_3DOF_Y_BASIC *pthisSV, struct GyroSensor *pthisGyro, int32 loopcounter, int16 ithisCoordSystem, int16 iOverSampleRatio)
{
    488a:	9102      	str	r1, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:444
	float rvec[3];							// rotation vector
	int8 i, j;								// loop counters

	// do a reset and return if requested
	if (pthisSV->resetflag)
    488c:	56c3      	ldrsb	r3, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:439
	return;
}

// basic gyro integration function
void fRun_3DOF_Y_BASIC(struct SV_3DOF_Y_BASIC *pthisSV, struct GyroSensor *pthisGyro, int32 loopcounter, int16 ithisCoordSystem, int16 iOverSampleRatio)
{
    488e:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:444
	float rvec[3];							// rotation vector
	int8 i, j;								// loop counters

	// do a reset and return if requested
	if (pthisSV->resetflag)
    4890:	2b00      	cmp	r3, #0
    4892:	d000      	beq.n	4896 <fRun_3DOF_Y_BASIC+0x26>
    4894:	e076      	b.n	4984 <fRun_3DOF_Y_BASIC+0x114>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:453 (discriminator 1)
	}

	// set the angular velocity to the raw gyro reading: omega[k] = yG[k]
	for (i = X; i <= Z; i++)
	{
		pthisSV->fOmega[i] = pthisGyro->fYp[i];
    4896:	464b      	mov	r3, r9
    4898:	68db      	ldr	r3, [r3, #12]
    489a:	4649      	mov	r1, r9
    489c:	464a      	mov	r2, r9
    489e:	6909      	ldr	r1, [r1, #16]
    48a0:	6543      	str	r3, [r0, #84]	; 0x54
    48a2:	6952      	ldr	r2, [r2, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:457 (discriminator 1)
	}

	// integrate the buffered high frequency (typically 200Hz) gyro readings
	for (j = 0; j < iOverSampleRatio; j++)
    48a4:	9b02      	ldr	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:453 (discriminator 1)
	}

	// set the angular velocity to the raw gyro reading: omega[k] = yG[k]
	for (i = X; i <= Z; i++)
	{
		pthisSV->fOmega[i] = pthisGyro->fYp[i];
    48a6:	6581      	str	r1, [r0, #88]	; 0x58
    48a8:	65c2      	str	r2, [r0, #92]	; 0x5c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:457 (discriminator 1)
	}

	// integrate the buffered high frequency (typically 200Hz) gyro readings
	for (j = 0; j < iOverSampleRatio; j++)
    48aa:	2b00      	cmp	r3, #0
    48ac:	dc00      	bgt.n	48b0 <fRun_3DOF_Y_BASIC+0x40>
    48ae:	e09f      	b.n	49f0 <fRun_3DOF_Y_BASIC+0x180>
    48b0:	2338      	movs	r3, #56	; 0x38
    48b2:	2264      	movs	r2, #100	; 0x64
    48b4:	469b      	mov	fp, r3
    48b6:	4692      	mov	sl, r2
    48b8:	44c2      	add	sl, r8
    48ba:	44c3      	add	fp, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:457
    48bc:	2700      	movs	r7, #0
    48be:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:462
	{
		// compute the incremental fast (typically 200Hz) rotation vector rvec (deg)
		for (i = X; i <= Z; i++)
		{
			rvec[i] = ((float)pthisGyro->iYpFast[j][i] * pthisGyro->fDegPerSecPerCount) * pthisSV->fFastdeltat;
    48c0:	005e      	lsls	r6, r3, #1
    48c2:	18f6      	adds	r6, r6, r3
    48c4:	4649      	mov	r1, r9
    48c6:	0076      	lsls	r6, r6, #1
    48c8:	4642      	mov	r2, r8
    48ca:	698d      	ldr	r5, [r1, #24]
    48cc:	444e      	add	r6, r9
    48ce:	6f54      	ldr	r4, [r2, #116]	; 0x74
    48d0:	231c      	movs	r3, #28
    48d2:	5ef0      	ldrsh	r0, [r6, r3]
    48d4:	f7fc fd1e 	bl	1314 <__aeabi_i2f>
    48d8:	1c29      	adds	r1, r5, #0
    48da:	f7fc fa5b 	bl	d94 <__aeabi_fmul>
    48de:	1c21      	adds	r1, r4, #0
    48e0:	f7fc fa58 	bl	d94 <__aeabi_fmul>
    48e4:	9005      	str	r0, [sp, #20]
    48e6:	211e      	movs	r1, #30
    48e8:	5e70      	ldrsh	r0, [r6, r1]
    48ea:	f7fc fd13 	bl	1314 <__aeabi_i2f>
    48ee:	1c29      	adds	r1, r5, #0
    48f0:	f7fc fa50 	bl	d94 <__aeabi_fmul>
    48f4:	1c21      	adds	r1, r4, #0
    48f6:	f7fc fa4d 	bl	d94 <__aeabi_fmul>
    48fa:	9006      	str	r0, [sp, #24]
    48fc:	2220      	movs	r2, #32
    48fe:	5eb0      	ldrsh	r0, [r6, r2]
    4900:	f7fc fd08 	bl	1314 <__aeabi_i2f>
    4904:	1c01      	adds	r1, r0, #0
    4906:	1c28      	adds	r0, r5, #0
    4908:	f7fc fa44 	bl	d94 <__aeabi_fmul>
    490c:	1c01      	adds	r1, r0, #0
    490e:	1c20      	adds	r0, r4, #0
    4910:	f7fc fa40 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:466
		}

		// compute the incremental quaternion fDeltaq from the rotation vector
		fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), rvec, 1.0F);
    4914:	22fe      	movs	r2, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:462
	for (j = 0; j < iOverSampleRatio; j++)
	{
		// compute the incremental fast (typically 200Hz) rotation vector rvec (deg)
		for (i = X; i <= Z; i++)
		{
			rvec[i] = ((float)pthisGyro->iYpFast[j][i] * pthisGyro->fDegPerSecPerCount) * pthisSV->fFastdeltat;
    4916:	9007      	str	r0, [sp, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:466
		}

		// compute the incremental quaternion fDeltaq from the rotation vector
		fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), rvec, 1.0F);
    4918:	a905      	add	r1, sp, #20
    491a:	4650      	mov	r0, sl
    491c:	0592      	lsls	r2, r2, #22
    491e:	f008 fd81 	bl	d424 <fQuaternionFromRotationVectorDeg>
    4922:	3701      	adds	r7, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:469

		// incrementally rotate the orientation quaternion fq
		qAeqAxB(&(pthisSV->fq), &(pthisSV->fDeltaq));
    4924:	4651      	mov	r1, sl
    4926:	4658      	mov	r0, fp
    4928:	f009 fb02 	bl	df30 <qAeqAxB>
    492c:	b2ff      	uxtb	r7, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:457
	{
		pthisSV->fOmega[i] = pthisGyro->fYp[i];
	}

	// integrate the buffered high frequency (typically 200Hz) gyro readings
	for (j = 0; j < iOverSampleRatio; j++)
    492e:	9902      	ldr	r1, [sp, #8]
    4930:	b27b      	sxtb	r3, r7
    4932:	428b      	cmp	r3, r1
    4934:	dbc4      	blt.n	48c0 <fRun_3DOF_Y_BASIC+0x50>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:477
	// re-normalize the orientation quaternion to stop error propagation
	// the renormalization function ensures that the scalar component q0 is non-negative
	fqAeqNormqA(&(pthisSV->fq));

	// get the rotation matrix from the quaternion
	fRotationMatrixFromQuaternion(pthisSV->fR, &(pthisSV->fq));
    4936:	4644      	mov	r4, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:474
		qAeqAxB(&(pthisSV->fq), &(pthisSV->fDeltaq));
	}

	// re-normalize the orientation quaternion to stop error propagation
	// the renormalization function ensures that the scalar component q0 is non-negative
	fqAeqNormqA(&(pthisSV->fq));
    4938:	4658      	mov	r0, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:477

	// get the rotation matrix from the quaternion
	fRotationMatrixFromQuaternion(pthisSV->fR, &(pthisSV->fq));
    493a:	3414      	adds	r4, #20
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:474
		qAeqAxB(&(pthisSV->fq), &(pthisSV->fDeltaq));
	}

	// re-normalize the orientation quaternion to stop error propagation
	// the renormalization function ensures that the scalar component q0 is non-negative
	fqAeqNormqA(&(pthisSV->fq));
    493c:	f009 fb94 	bl	e068 <fqAeqNormqA>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:477

	// get the rotation matrix from the quaternion
	fRotationMatrixFromQuaternion(pthisSV->fR, &(pthisSV->fq));
    4940:	1c20      	adds	r0, r4, #0
    4942:	4659      	mov	r1, fp
    4944:	f008 fed8 	bl	d6f8 <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:480

	// compute the rotation vector from the a posteriori quaternion
	fRotationVectorDegFromQuaternion(&(pthisSV->fq), pthisSV->fRVec);
    4948:	4641      	mov	r1, r8
    494a:	4658      	mov	r0, fp
    494c:	3148      	adds	r1, #72	; 0x48
    494e:	f008 ff63 	bl	d818 <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:486

	// *********************************************************************************
	// compute the Euler angles from the orientation matrix
	// *********************************************************************************

	if (ithisCoordSystem == NED)
    4952:	9a03      	ldr	r2, [sp, #12]
    4954:	2a00      	cmp	r2, #0
    4956:	d02f      	beq.n	49b8 <fRun_3DOF_Y_BASIC+0x148>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:492
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fR, &(pthisSV->fPhi), &(pthisSV->fThe), &(pthisSV->fPsi),
				&(pthisSV->fRho), &(pthisSV->fChi));
	}
	else if (ithisCoordSystem == ANDROID)
    4958:	2a01      	cmp	r2, #1
    495a:	d03b      	beq.n	49d4 <fRun_3DOF_Y_BASIC+0x164>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:501
				&(pthisSV->fRho), &(pthisSV->fChi));
	}
	else
	{
		// calculate Win8 Euler angles
		fWin8AnglesDegFromRotationMatrix(pthisSV->fR, &(pthisSV->fPhi), &(pthisSV->fThe), &(pthisSV->fPsi),
    495c:	4641      	mov	r1, r8
    495e:	310c      	adds	r1, #12
    4960:	4642      	mov	r2, r8
    4962:	4643      	mov	r3, r8
    4964:	9100      	str	r1, [sp, #0]
    4966:	3104      	adds	r1, #4
    4968:	9101      	str	r1, [sp, #4]
    496a:	3204      	adds	r2, #4
    496c:	3308      	adds	r3, #8
    496e:	1c20      	adds	r0, r4, #0
    4970:	4641      	mov	r1, r8
    4972:	f008 fc99 	bl	d2a8 <fWin8AnglesDegFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:506
				&(pthisSV->fRho), &(pthisSV->fChi));
	}

	return;
} // end fRun_3DOF_Y_BASIC
    4976:	b009      	add	sp, #36	; 0x24
    4978:	bc3c      	pop	{r2, r3, r4, r5}
    497a:	4690      	mov	r8, r2
    497c:	4699      	mov	r9, r3
    497e:	46a2      	mov	sl, r4
    4980:	46ab      	mov	fp, r5
    4982:	bdf0      	pop	{r4, r5, r6, r7, pc}
fInit_3DOF_Y_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:100
} // end fInit_3DOF_B_BASIC

void fInit_3DOF_Y_BASIC(struct SV_3DOF_Y_BASIC *pthisSV, int16 iSensorFS, int16 iOverSampleRatio)
{
	// compute the sampling time intervals (secs)
	pthisSV->fFastdeltat = 1.0F / (float) iSensorFS;
    4984:	4b1c      	ldr	r3, [pc, #112]	; (49f8 <fRun_3DOF_Y_BASIC+0x188>)
    4986:	4641      	mov	r1, r8
    4988:	674b      	str	r3, [r1, #116]	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:101
	pthisSV->fdeltat = (float) iOverSampleRatio * pthisSV->fFastdeltat;
    498a:	4b1c      	ldr	r3, [pc, #112]	; (49fc <fRun_3DOF_Y_BASIC+0x18c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:104

	// initialize orientation estimates
	f3x3matrixAeqI(pthisSV->fR);
    498c:	4640      	mov	r0, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:101

void fInit_3DOF_Y_BASIC(struct SV_3DOF_Y_BASIC *pthisSV, int16 iSensorFS, int16 iOverSampleRatio)
{
	// compute the sampling time intervals (secs)
	pthisSV->fFastdeltat = 1.0F / (float) iSensorFS;
	pthisSV->fdeltat = (float) iOverSampleRatio * pthisSV->fFastdeltat;
    498e:	678b      	str	r3, [r1, #120]	; 0x78
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:104

	// initialize orientation estimates
	f3x3matrixAeqI(pthisSV->fR);
    4990:	3014      	adds	r0, #20
    4992:	f006 fea9 	bl	b6e8 <f3x3matrixAeqI>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:105
	fqAeq1(&(pthisSV->fq));
    4996:	4640      	mov	r0, r8
    4998:	3038      	adds	r0, #56	; 0x38
    499a:	f009 fbcf 	bl	e13c <fqAeq1>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:108

	// update the default quaternion type supported to the most sophisticated
	if (globals.DefaultQuaternionPacketType < Q3G)
    499e:	4b18      	ldr	r3, [pc, #96]	; (4a00 <fRun_3DOF_Y_BASIC+0x190>)
    49a0:	795a      	ldrb	r2, [r3, #5]
    49a2:	2a01      	cmp	r2, #1
    49a4:	d904      	bls.n	49b0 <fRun_3DOF_Y_BASIC+0x140>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:112
		globals.QuaternionPacketType = globals.DefaultQuaternionPacketType = Q3G; 

	// clear the reset flag
	pthisSV->resetflag = false;
    49a6:	2200      	movs	r2, #0
    49a8:	237c      	movs	r3, #124	; 0x7c
    49aa:	4641      	mov	r1, r8
    49ac:	54ca      	strb	r2, [r1, r3]
    49ae:	e7e2      	b.n	4976 <fRun_3DOF_Y_BASIC+0x106>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:109
	f3x3matrixAeqI(pthisSV->fR);
	fqAeq1(&(pthisSV->fq));

	// update the default quaternion type supported to the most sophisticated
	if (globals.DefaultQuaternionPacketType < Q3G)
		globals.QuaternionPacketType = globals.DefaultQuaternionPacketType = Q3G; 
    49b0:	2202      	movs	r2, #2
    49b2:	715a      	strb	r2, [r3, #5]
    49b4:	711a      	strb	r2, [r3, #4]
    49b6:	e7f6      	b.n	49a6 <fRun_3DOF_Y_BASIC+0x136>
fRun_3DOF_Y_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:489
	// *********************************************************************************

	if (ithisCoordSystem == NED)
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fR, &(pthisSV->fPhi), &(pthisSV->fThe), &(pthisSV->fPsi),
    49b8:	4641      	mov	r1, r8
    49ba:	310c      	adds	r1, #12
    49bc:	4642      	mov	r2, r8
    49be:	4643      	mov	r3, r8
    49c0:	9100      	str	r1, [sp, #0]
    49c2:	3104      	adds	r1, #4
    49c4:	9101      	str	r1, [sp, #4]
    49c6:	3204      	adds	r2, #4
    49c8:	3308      	adds	r3, #8
    49ca:	1c20      	adds	r0, r4, #0
    49cc:	4641      	mov	r1, r8
    49ce:	f008 fb7f 	bl	d0d0 <fNEDAnglesDegFromRotationMatrix>
    49d2:	e7d0      	b.n	4976 <fRun_3DOF_Y_BASIC+0x106>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:495
				&(pthisSV->fRho), &(pthisSV->fChi));
	}
	else if (ithisCoordSystem == ANDROID)
	{
		// calculate the Android Euler angles
		fAndroidAnglesDegFromRotationMatrix(pthisSV->fR, &(pthisSV->fPhi), &(pthisSV->fThe), &(pthisSV->fPsi),
    49d4:	4641      	mov	r1, r8
    49d6:	310c      	adds	r1, #12
    49d8:	4642      	mov	r2, r8
    49da:	4643      	mov	r3, r8
    49dc:	9100      	str	r1, [sp, #0]
    49de:	3104      	adds	r1, #4
    49e0:	9101      	str	r1, [sp, #4]
    49e2:	3204      	adds	r2, #4
    49e4:	3308      	adds	r3, #8
    49e6:	1c20      	adds	r0, r4, #0
    49e8:	4641      	mov	r1, r8
    49ea:	f008 fbe7 	bl	d1bc <fAndroidAnglesDegFromRotationMatrix>
    49ee:	e7c2      	b.n	4976 <fRun_3DOF_Y_BASIC+0x106>
    49f0:	2138      	movs	r1, #56	; 0x38
    49f2:	468b      	mov	fp, r1
    49f4:	44c3      	add	fp, r8
    49f6:	e79e      	b.n	4936 <fRun_3DOF_Y_BASIC+0xc6>
    49f8:	3ba3d70a 	.word	0x3ba3d70a
    49fc:	3d23d70a 	.word	0x3d23d70a
    4a00:	1fffe478 	.word	0x1fffe478

00004a04 <fRun_6DOF_GB_BASIC>:
fRun_6DOF_GB_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:510
	return;
} // end fRun_3DOF_Y_BASIC

// 6DOF orientation function which calls ecompass and implements low pass filters
void fRun_6DOF_GB_BASIC(struct SV_6DOF_GB_BASIC *pthisSV, struct MagSensor *pthisMag, struct AccelSensor *pthisAccel, int32 loopcounter, int16 ithisCoordSystem)
{
    4a04:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a06:	4647      	mov	r7, r8
    4a08:	b480      	push	{r7}
    4a0a:	b082      	sub	sp, #8
    4a0c:	1c04      	adds	r4, r0, #0
    4a0e:	a808      	add	r0, sp, #32
    4a10:	1c1d      	adds	r5, r3, #0
    4a12:	2300      	movs	r3, #0
    4a14:	5ec6      	ldrsh	r6, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:512
	// do a reset and return if requested
	if (pthisSV->resetflag)
    4a16:	20a8      	movs	r0, #168	; 0xa8
    4a18:	5620      	ldrsb	r0, [r4, r0]
    4a1a:	2800      	cmp	r0, #0
    4a1c:	d013      	beq.n	4a46 <fRun_6DOF_GB_BASIC+0x42>
fInit_6DOF_GB_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:120
} // end fInit_3DOF_Y_BASIC

void fInit_6DOF_GB_BASIC(struct SV_6DOF_GB_BASIC *pthisSV, float flpftimesecs, int16 iSensorFS, int16 iOverSampleRatio)
{
	// set algorithm sampling interval (typically 25Hz)
	pthisSV->fdeltat = (float) iOverSampleRatio / (float) iSensorFS;
    4a1e:	4a62      	ldr	r2, [pc, #392]	; (4ba8 <fRun_6DOF_GB_BASIC+0x1a4>)
    4a20:	23a0      	movs	r3, #160	; 0xa0
    4a22:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:124

	// set low pass filter constant with maximum value 1.0 (all pass) decreasing to 0.0 (increasing low pass)
	if (flpftimesecs > pthisSV->fdeltat)
		pthisSV->flpf = pthisSV->fdeltat / flpftimesecs;
    4a24:	4a61      	ldr	r2, [pc, #388]	; (4bac <fRun_6DOF_GB_BASIC+0x1a8>)
    4a26:	23a4      	movs	r3, #164	; 0xa4
    4a28:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:129
	else
		pthisSV->flpf = 1.0F;

	// update the default quaternion type supported to the most sophisticated
	if (globals.DefaultQuaternionPacketType < Q6MA)
    4a2a:	4b61      	ldr	r3, [pc, #388]	; (4bb0 <fRun_6DOF_GB_BASIC+0x1ac>)
    4a2c:	795a      	ldrb	r2, [r3, #5]
    4a2e:	2a02      	cmp	r2, #2
    4a30:	d802      	bhi.n	4a38 <fRun_6DOF_GB_BASIC+0x34>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:130
		globals.QuaternionPacketType = globals.DefaultQuaternionPacketType = Q6MA; 
    4a32:	2203      	movs	r2, #3
    4a34:	715a      	strb	r2, [r3, #5]
    4a36:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:133

	// clear the reset flag
	pthisSV->resetflag = false;
    4a38:	2200      	movs	r2, #0
    4a3a:	23a8      	movs	r3, #168	; 0xa8
    4a3c:	54e2      	strb	r2, [r4, r3]
fRun_6DOF_GB_BASIC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:567

	// low pass filter the geomagnetic inclination angle with a simple exponential filter
	fLPFScalar(&(pthisSV->fDelta), &(pthisSV->fLPDelta), pthisSV->flpf, loopcounter);

	return;
}  // end fRun_6DOF_GB_BASIC
    4a3e:	b002      	add	sp, #8
    4a40:	bc04      	pop	{r2}
    4a42:	4690      	mov	r8, r2
    4a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:519
		fInit_6DOF_GB_BASIC(pthisSV, 0.6F, SENSORFS, OVERSAMPLE_RATIO);
		return;
	}

	// call the eCompass algorithm to get the instantaneous orientation matrix and inclination angle
	if (ithisCoordSystem == NED)
    4a46:	2e00      	cmp	r6, #0
    4a48:	d040      	beq.n	4acc <fRun_6DOF_GB_BASIC+0xc8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:524
	{
		// call the NED eCompass
		feCompassNED(pthisSV->fR, &(pthisSV->fDelta), pthisMag->fBc, pthisAccel->fGp);
	}
	else if  (ithisCoordSystem == ANDROID)
    4a4a:	2e01      	cmp	r6, #1
    4a4c:	d075      	beq.n	4b3a <fRun_6DOF_GB_BASIC+0x136>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:532
		feCompassAndroid(pthisSV->fR, &(pthisSV->fDelta), pthisMag->fBc, pthisAccel->fGp);
	}
	else
	{
		// call the Win8 eCompass
		feCompassWin8(pthisSV->fR, &(pthisSV->fDelta), pthisMag->fBc, pthisAccel->fGp);
    4a4e:	3130      	adds	r1, #48	; 0x30
    4a50:	1c26      	adds	r6, r4, #0
    4a52:	1c27      	adds	r7, r4, #0
    4a54:	468c      	mov	ip, r1
    4a56:	3764      	adds	r7, #100	; 0x64
    4a58:	1c13      	adds	r3, r2, #0
    4a5a:	3698      	adds	r6, #152	; 0x98
    4a5c:	4662      	mov	r2, ip
    4a5e:	3318      	adds	r3, #24
    4a60:	1c38      	adds	r0, r7, #0
    4a62:	1c31      	adds	r1, r6, #0
    4a64:	f008 f9ac 	bl	cdc0 <feCompassWin8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:536
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    4a68:	1c38      	adds	r0, r7, #0
    4a6a:	3724      	adds	r7, #36	; 0x24
    4a6c:	1c39      	adds	r1, r7, #0
    4a6e:	f008 fda3 	bl	d5b8 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:539

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    4a72:	23a4      	movs	r3, #164	; 0xa4
    4a74:	1c21      	adds	r1, r4, #0
    4a76:	58e2      	ldr	r2, [r4, r3]
    4a78:	1c38      	adds	r0, r7, #0
    4a7a:	3154      	adds	r1, #84	; 0x54
    4a7c:	3f50      	subs	r7, #80	; 0x50
    4a7e:	23a0      	movs	r3, #160	; 0xa0
    4a80:	58e3      	ldr	r3, [r4, r3]
    4a82:	9100      	str	r1, [sp, #0]
    4a84:	9501      	str	r5, [sp, #4]
    4a86:	1c39      	adds	r1, r7, #0
    4a88:	f008 ff22 	bl	d8d0 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:540
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    4a8c:	2314      	movs	r3, #20
    4a8e:	191b      	adds	r3, r3, r4
    4a90:	1c18      	adds	r0, r3, #0
    4a92:	1c39      	adds	r1, r7, #0
    4a94:	4698      	mov	r8, r3
    4a96:	f008 fe2f 	bl	d6f8 <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:541
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    4a9a:	1c21      	adds	r1, r4, #0
    4a9c:	1c38      	adds	r0, r7, #0
    4a9e:	3148      	adds	r1, #72	; 0x48
    4aa0:	f008 feba 	bl	d818 <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:559
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}
	else
	{
		// calculate the Windows 8 Euler angles
		fWin8AnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    4aa4:	1c23      	adds	r3, r4, #0
    4aa6:	330c      	adds	r3, #12
    4aa8:	9300      	str	r3, [sp, #0]
    4aaa:	3304      	adds	r3, #4
    4aac:	9301      	str	r3, [sp, #4]
    4aae:	1d22      	adds	r2, r4, #4
    4ab0:	4640      	mov	r0, r8
    4ab2:	1c21      	adds	r1, r4, #0
    4ab4:	3b08      	subs	r3, #8
    4ab6:	f008 fbf7 	bl	d2a8 <fWin8AnglesDegFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:564
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}

	// low pass filter the geomagnetic inclination angle with a simple exponential filter
	fLPFScalar(&(pthisSV->fDelta), &(pthisSV->fLPDelta), pthisSV->flpf, loopcounter);
    4aba:	1c21      	adds	r1, r4, #0
    4abc:	23a4      	movs	r3, #164	; 0xa4
    4abe:	58e2      	ldr	r2, [r4, r3]
    4ac0:	319c      	adds	r1, #156	; 0x9c
    4ac2:	1c30      	adds	r0, r6, #0
    4ac4:	1c2b      	adds	r3, r5, #0
    4ac6:	f009 f979 	bl	ddbc <fLPFScalar>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:566

	return;
    4aca:	e7b8      	b.n	4a3e <fRun_6DOF_GB_BASIC+0x3a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:522

	// call the eCompass algorithm to get the instantaneous orientation matrix and inclination angle
	if (ithisCoordSystem == NED)
	{
		// call the NED eCompass
		feCompassNED(pthisSV->fR, &(pthisSV->fDelta), pthisMag->fBc, pthisAccel->fGp);
    4acc:	1c26      	adds	r6, r4, #0
    4ace:	3130      	adds	r1, #48	; 0x30
    4ad0:	1c27      	adds	r7, r4, #0
    4ad2:	468c      	mov	ip, r1
    4ad4:	3764      	adds	r7, #100	; 0x64
    4ad6:	3698      	adds	r6, #152	; 0x98
    4ad8:	1c13      	adds	r3, r2, #0
    4ada:	3318      	adds	r3, #24
    4adc:	4662      	mov	r2, ip
    4ade:	1c38      	adds	r0, r7, #0
    4ae0:	1c31      	adds	r1, r6, #0
    4ae2:	f007 fe75 	bl	c7d0 <feCompassNED>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:536
		// call the Win8 eCompass
		feCompassWin8(pthisSV->fR, &(pthisSV->fDelta), pthisMag->fBc, pthisAccel->fGp);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    4ae6:	1c38      	adds	r0, r7, #0
    4ae8:	3724      	adds	r7, #36	; 0x24
    4aea:	1c39      	adds	r1, r7, #0
    4aec:	f008 fd64 	bl	d5b8 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:539

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    4af0:	23a4      	movs	r3, #164	; 0xa4
    4af2:	1c21      	adds	r1, r4, #0
    4af4:	58e2      	ldr	r2, [r4, r3]
    4af6:	1c38      	adds	r0, r7, #0
    4af8:	3154      	adds	r1, #84	; 0x54
    4afa:	3f50      	subs	r7, #80	; 0x50
    4afc:	23a0      	movs	r3, #160	; 0xa0
    4afe:	58e3      	ldr	r3, [r4, r3]
    4b00:	9100      	str	r1, [sp, #0]
    4b02:	9501      	str	r5, [sp, #4]
    4b04:	1c39      	adds	r1, r7, #0
    4b06:	f008 fee3 	bl	d8d0 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:540
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    4b0a:	2314      	movs	r3, #20
    4b0c:	191b      	adds	r3, r3, r4
    4b0e:	1c18      	adds	r0, r3, #0
    4b10:	1c39      	adds	r1, r7, #0
    4b12:	4698      	mov	r8, r3
    4b14:	f008 fdf0 	bl	d6f8 <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:541
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    4b18:	1c21      	adds	r1, r4, #0
    4b1a:	1c38      	adds	r0, r7, #0
    4b1c:	3148      	adds	r1, #72	; 0x48
    4b1e:	f008 fe7b 	bl	d818 <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:547

	// compute the low pass filtered Euler angles
	if (ithisCoordSystem == NED)
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    4b22:	1c23      	adds	r3, r4, #0
    4b24:	330c      	adds	r3, #12
    4b26:	9300      	str	r3, [sp, #0]
    4b28:	3304      	adds	r3, #4
    4b2a:	9301      	str	r3, [sp, #4]
    4b2c:	1d22      	adds	r2, r4, #4
    4b2e:	4640      	mov	r0, r8
    4b30:	1c21      	adds	r1, r4, #0
    4b32:	3b08      	subs	r3, #8
    4b34:	f008 facc 	bl	d0d0 <fNEDAnglesDegFromRotationMatrix>
    4b38:	e7bf      	b.n	4aba <fRun_6DOF_GB_BASIC+0xb6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:527
		feCompassNED(pthisSV->fR, &(pthisSV->fDelta), pthisMag->fBc, pthisAccel->fGp);
	}
	else if  (ithisCoordSystem == ANDROID)
	{
		// call the Android eCompass
		feCompassAndroid(pthisSV->fR, &(pthisSV->fDelta), pthisMag->fBc, pthisAccel->fGp);
    4b3a:	1c26      	adds	r6, r4, #0
    4b3c:	3130      	adds	r1, #48	; 0x30
    4b3e:	1c27      	adds	r7, r4, #0
    4b40:	468c      	mov	ip, r1
    4b42:	3764      	adds	r7, #100	; 0x64
    4b44:	3698      	adds	r6, #152	; 0x98
    4b46:	1c13      	adds	r3, r2, #0
    4b48:	3318      	adds	r3, #24
    4b4a:	4662      	mov	r2, ip
    4b4c:	1c38      	adds	r0, r7, #0
    4b4e:	1c31      	adds	r1, r6, #0
    4b50:	f007 ffba 	bl	cac8 <feCompassAndroid>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:536
		// call the Win8 eCompass
		feCompassWin8(pthisSV->fR, &(pthisSV->fDelta), pthisMag->fBc, pthisAccel->fGp);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    4b54:	1c38      	adds	r0, r7, #0
    4b56:	3724      	adds	r7, #36	; 0x24
    4b58:	1c39      	adds	r1, r7, #0
    4b5a:	f008 fd2d 	bl	d5b8 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:539

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    4b5e:	23a4      	movs	r3, #164	; 0xa4
    4b60:	1c21      	adds	r1, r4, #0
    4b62:	58e2      	ldr	r2, [r4, r3]
    4b64:	1c38      	adds	r0, r7, #0
    4b66:	3154      	adds	r1, #84	; 0x54
    4b68:	3f50      	subs	r7, #80	; 0x50
    4b6a:	23a0      	movs	r3, #160	; 0xa0
    4b6c:	58e3      	ldr	r3, [r4, r3]
    4b6e:	9100      	str	r1, [sp, #0]
    4b70:	9501      	str	r5, [sp, #4]
    4b72:	1c39      	adds	r1, r7, #0
    4b74:	f008 feac 	bl	d8d0 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:540
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    4b78:	2314      	movs	r3, #20
    4b7a:	191b      	adds	r3, r3, r4
    4b7c:	1c18      	adds	r0, r3, #0
    4b7e:	1c39      	adds	r1, r7, #0
    4b80:	4698      	mov	r8, r3
    4b82:	f008 fdb9 	bl	d6f8 <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:541
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    4b86:	1c21      	adds	r1, r4, #0
    4b88:	1c38      	adds	r0, r7, #0
    4b8a:	3148      	adds	r1, #72	; 0x48
    4b8c:	f008 fe44 	bl	d818 <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:553
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}
	else if (ithisCoordSystem == ANDROID)
	{
		// calculate the Android Euler angles
		fAndroidAnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    4b90:	1c23      	adds	r3, r4, #0
    4b92:	330c      	adds	r3, #12
    4b94:	9300      	str	r3, [sp, #0]
    4b96:	3304      	adds	r3, #4
    4b98:	9301      	str	r3, [sp, #4]
    4b9a:	1d22      	adds	r2, r4, #4
    4b9c:	4640      	mov	r0, r8
    4b9e:	1c21      	adds	r1, r4, #0
    4ba0:	3b08      	subs	r3, #8
    4ba2:	f008 fb0b 	bl	d1bc <fAndroidAnglesDegFromRotationMatrix>
    4ba6:	e788      	b.n	4aba <fRun_6DOF_GB_BASIC+0xb6>
    4ba8:	3d23d70a 	.word	0x3d23d70a
    4bac:	3d888888 	.word	0x3d888888
    4bb0:	1fffe478 	.word	0x1fffe478

00004bb4 <fRun_6DOF_GY_KALMAN>:
fRun_6DOF_GY_KALMAN():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:572
}  // end fRun_6DOF_GB_BASIC

// 6DOF accel + gyro Kalman filter algorithm 
void fRun_6DOF_GY_KALMAN(struct SV_6DOF_GY_KALMAN *pthisSV, struct AccelSensor *pthisAccel, struct GyroSensor *pthisGyro,
		int16 ithisCoordSystem, int16 iOverSampleRatio)
{	
    4bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bb6:	465f      	mov	r7, fp
    4bb8:	464d      	mov	r5, r9
    4bba:	4644      	mov	r4, r8
    4bbc:	4656      	mov	r6, sl
    4bbe:	b4f0      	push	{r4, r5, r6, r7}
    4bc0:	b0b5      	sub	sp, #212	; 0xd4
    4bc2:	930e      	str	r3, [sp, #56]	; 0x38
    4bc4:	ab3e      	add	r3, sp, #248	; 0xf8
    4bc6:	4683      	mov	fp, r0
    4bc8:	9107      	str	r1, [sp, #28]
    4bca:	2100      	movs	r1, #0
    4bcc:	5e58      	ldrsh	r0, [r3, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:600
	int8 iColInd[3];
	int8 iRowInd[3];
	int8 iPivot[3];

	// do a reset and return if requested
	if (pthisSV->resetflag)
    4bce:	4be9      	ldr	r3, [pc, #932]	; (4f74 <fRun_6DOF_GY_KALMAN+0x3c0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:572
}  // end fRun_6DOF_GB_BASIC

// 6DOF accel + gyro Kalman filter algorithm 
void fRun_6DOF_GY_KALMAN(struct SV_6DOF_GY_KALMAN *pthisSV, struct AccelSensor *pthisAccel, struct GyroSensor *pthisGyro,
		int16 ithisCoordSystem, int16 iOverSampleRatio)
{	
    4bd0:	4690      	mov	r8, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:600
	int8 iColInd[3];
	int8 iRowInd[3];
	int8 iPivot[3];

	// do a reset and return if requested
	if (pthisSV->resetflag)
    4bd2:	465a      	mov	r2, fp
    4bd4:	56d3      	ldrsb	r3, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:572
}  // end fRun_6DOF_GB_BASIC

// 6DOF accel + gyro Kalman filter algorithm 
void fRun_6DOF_GY_KALMAN(struct SV_6DOF_GY_KALMAN *pthisSV, struct AccelSensor *pthisAccel, struct GyroSensor *pthisGyro,
		int16 ithisCoordSystem, int16 iOverSampleRatio)
{	
    4bd6:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:600
	int8 iColInd[3];
	int8 iRowInd[3];
	int8 iPivot[3];

	// do a reset and return if requested
	if (pthisSV->resetflag)
    4bd8:	2b00      	cmp	r3, #0
    4bda:	d001      	beq.n	4be0 <fRun_6DOF_GY_KALMAN+0x2c>
    4bdc:	f000 ffc2 	bl	5b64 <fRun_6DOF_GY_KALMAN+0xfb0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:607
		fInit_6DOF_GY_KALMAN(pthisSV, SENSORFS, OVERSAMPLE_RATIO);
		return;
	}

	// do a once-only orientation lock to accelerometer tilt 
	if (!pthisSV->iFirstOrientationLock)
    4be0:	4be5      	ldr	r3, [pc, #916]	; (4f78 <fRun_6DOF_GY_KALMAN+0x3c4>)
    4be2:	465c      	mov	r4, fp
    4be4:	5ee3      	ldrsh	r3, [r4, r3]
    4be6:	2b00      	cmp	r3, #0
    4be8:	d11c      	bne.n	4c24 <fRun_6DOF_GY_KALMAN+0x70>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:610
	{
		// get the 3DOF orientation matrix and initial inclination angle
		if (ithisCoordSystem == NED)
    4bea:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    4bec:	2c00      	cmp	r4, #0
    4bee:	d101      	bne.n	4bf4 <fRun_6DOF_GY_KALMAN+0x40>
    4bf0:	f000 ffc1 	bl	5b76 <fRun_6DOF_GY_KALMAN+0xfc2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:615
		{
			// call NED tilt function
			f3DOFTiltNED(pthisSV->fRPl, pthisAccel->fGpFast);
		}
		else if (ithisCoordSystem == ANDROID)
    4bf4:	2c01      	cmp	r4, #1
    4bf6:	d101      	bne.n	4bfc <fRun_6DOF_GY_KALMAN+0x48>
    4bf8:	f001 f814 	bl	5c24 <fRun_6DOF_GY_KALMAN+0x1070>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:623
			f3DOFTiltAndroid(pthisSV->fRPl, pthisAccel->fGpFast);
		}
		else
		{
			// call Windows 8 tilt function
			f3DOFTiltWin8(pthisSV->fRPl, pthisAccel->fGpFast);
    4bfc:	465c      	mov	r4, fp
    4bfe:	9907      	ldr	r1, [sp, #28]
    4c00:	3414      	adds	r4, #20
    4c02:	1c20      	adds	r0, r4, #0
    4c04:	310c      	adds	r1, #12
    4c06:	940d      	str	r4, [sp, #52]	; 0x34
    4c08:	f007 fc88 	bl	c51c <f3DOFTiltWin8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:627
		}

		// get the orientation quaternion from the orientation matrix
		fQuaternionFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fqPl));
    4c0c:	465c      	mov	r4, fp
    4c0e:	3438      	adds	r4, #56	; 0x38
    4c10:	980d      	ldr	r0, [sp, #52]	; 0x34
    4c12:	1c21      	adds	r1, r4, #0
    4c14:	940b      	str	r4, [sp, #44]	; 0x2c
    4c16:	f008 fccf 	bl	d5b8 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:630

		// set the orientation lock flag so this initial alignment is only performed once
		pthisSV->iFirstOrientationLock = 1;
    4c1a:	4bd7      	ldr	r3, [pc, #860]	; (4f78 <fRun_6DOF_GY_KALMAN+0x3c4>)
    4c1c:	2201      	movs	r2, #1
    4c1e:	4658      	mov	r0, fp
    4c20:	52c2      	strh	r2, [r0, r3]
    4c22:	e004      	b.n	4c2e <fRun_6DOF_GY_KALMAN+0x7a>
    4c24:	465c      	mov	r4, fp
    4c26:	3414      	adds	r4, #20
    4c28:	940d      	str	r4, [sp, #52]	; 0x34
    4c2a:	3424      	adds	r4, #36	; 0x24
    4c2c:	940b      	str	r4, [sp, #44]	; 0x2c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:643 (discriminator 1)
	// omega[k] = yG[k] - b-[k] = yG[k] - b+[k-1] (deg/s)
	// this involves a small angle approximation but the resulting angular velocity is
	// only computed for transmission over bluetooth and not used for orientation determination.
	for (i = X; i <= Z; i++)
	{
		pthisSV->fOmega[i] = pthisGyro->fYp[i] - pthisSV->fbPl[i];
    4c2e:	465a      	mov	r2, fp
    4c30:	4641      	mov	r1, r8
    4c32:	68c8      	ldr	r0, [r1, #12]
    4c34:	6e51      	ldr	r1, [r2, #100]	; 0x64
    4c36:	f7fc f9d7 	bl	fe8 <__aeabi_fsub>
    4c3a:	4644      	mov	r4, r8
    4c3c:	465b      	mov	r3, fp
    4c3e:	6e99      	ldr	r1, [r3, #104]	; 0x68
    4c40:	6558      	str	r0, [r3, #84]	; 0x54
    4c42:	6920      	ldr	r0, [r4, #16]
    4c44:	f7fc f9d0 	bl	fe8 <__aeabi_fsub>
    4c48:	4659      	mov	r1, fp
    4c4a:	6588      	str	r0, [r1, #88]	; 0x58
    4c4c:	6960      	ldr	r0, [r4, #20]
    4c4e:	6ec9      	ldr	r1, [r1, #108]	; 0x6c
    4c50:	f7fc f9ca 	bl	fe8 <__aeabi_fsub>
    4c54:	465a      	mov	r2, fp
    4c56:	65d0      	str	r0, [r2, #92]	; 0x5c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:647 (discriminator 1)
	}

	// initialize the a priori orientation quaternion to the a posteriori orientation estimate
	pthisSV->fqMi = pthisSV->fqPl;
    4c58:	32b8      	adds	r2, #184	; 0xb8
    4c5a:	9208      	str	r2, [sp, #32]
    4c5c:	1c13      	adds	r3, r2, #0
    4c5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4c60:	ca13      	ldmia	r2!, {r0, r1, r4}
    4c62:	c313      	stmia	r3!, {r0, r1, r4}
    4c64:	6812      	ldr	r2, [r2, #0]
    4c66:	465c      	mov	r4, fp
    4c68:	601a      	str	r2, [r3, #0]
    4c6a:	34c8      	adds	r4, #200	; 0xc8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:650 (discriminator 1)

	// integrate the buffered high frequency (typically 200Hz) gyro readings
	for (j = 0; j < iOverSampleRatio; j++)
    4c6c:	464a      	mov	r2, r9
    4c6e:	9406      	str	r4, [sp, #24]
    4c70:	2a00      	cmp	r2, #0
    4c72:	dd4c      	ble.n	4d0e <fRun_6DOF_GY_KALMAN+0x15a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:655
	{
		// compute the incremental fast (typically 200Hz) rotation vector rvec (deg)
		for (i = X; i <= Z; i++)
		{
			rvec[i] = (((float)pthisGyro->iYpFast[j][i] * pthisGyro->fDegPerSecPerCount) - pthisSV->fbPl[i]) * pthisSV->fFastdeltat;
    4c74:	48c1      	ldr	r0, [pc, #772]	; (4f7c <fRun_6DOF_GY_KALMAN+0x3c8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:650

	// initialize the a priori orientation quaternion to the a posteriori orientation estimate
	pthisSV->fqMi = pthisSV->fqPl;

	// integrate the buffered high frequency (typically 200Hz) gyro readings
	for (j = 0; j < iOverSampleRatio; j++)
    4c76:	2700      	movs	r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:655
	{
		// compute the incremental fast (typically 200Hz) rotation vector rvec (deg)
		for (i = X; i <= Z; i++)
		{
			rvec[i] = (((float)pthisGyro->iYpFast[j][i] * pthisGyro->fDegPerSecPerCount) - pthisSV->fbPl[i]) * pthisSV->fFastdeltat;
    4c78:	465c      	mov	r4, fp
    4c7a:	2300      	movs	r3, #0
    4c7c:	46cb      	mov	fp, r9
    4c7e:	4682      	mov	sl, r0
    4c80:	46b9      	mov	r9, r7
    4c82:	005f      	lsls	r7, r3, #1
    4c84:	18ff      	adds	r7, r7, r3
    4c86:	4641      	mov	r1, r8
    4c88:	007f      	lsls	r7, r7, #1
    4c8a:	698e      	ldr	r6, [r1, #24]
    4c8c:	4447      	add	r7, r8
    4c8e:	4652      	mov	r2, sl
    4c90:	231c      	movs	r3, #28
    4c92:	5ef8      	ldrsh	r0, [r7, r3]
    4c94:	58a5      	ldr	r5, [r4, r2]
    4c96:	f7fc fb3d 	bl	1314 <__aeabi_i2f>
    4c9a:	1c31      	adds	r1, r6, #0
    4c9c:	f7fc f87a 	bl	d94 <__aeabi_fmul>
    4ca0:	6e61      	ldr	r1, [r4, #100]	; 0x64
    4ca2:	f7fc f9a1 	bl	fe8 <__aeabi_fsub>
    4ca6:	1c29      	adds	r1, r5, #0
    4ca8:	f7fc f874 	bl	d94 <__aeabi_fmul>
    4cac:	9013      	str	r0, [sp, #76]	; 0x4c
    4cae:	211e      	movs	r1, #30
    4cb0:	5e78      	ldrsh	r0, [r7, r1]
    4cb2:	f7fc fb2f 	bl	1314 <__aeabi_i2f>
    4cb6:	1c31      	adds	r1, r6, #0
    4cb8:	f7fc f86c 	bl	d94 <__aeabi_fmul>
    4cbc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    4cbe:	f7fc f993 	bl	fe8 <__aeabi_fsub>
    4cc2:	1c29      	adds	r1, r5, #0
    4cc4:	f7fc f866 	bl	d94 <__aeabi_fmul>
    4cc8:	9014      	str	r0, [sp, #80]	; 0x50
    4cca:	2220      	movs	r2, #32
    4ccc:	5eb8      	ldrsh	r0, [r7, r2]
    4cce:	f7fc fb21 	bl	1314 <__aeabi_i2f>
    4cd2:	1c01      	adds	r1, r0, #0
    4cd4:	1c30      	adds	r0, r6, #0
    4cd6:	f7fc f85d 	bl	d94 <__aeabi_fmul>
    4cda:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    4cdc:	f7fc f984 	bl	fe8 <__aeabi_fsub>
    4ce0:	1c01      	adds	r1, r0, #0
    4ce2:	1c28      	adds	r0, r5, #0
    4ce4:	f7fc f856 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:659
		}

		// compute the incremental quaternion fDeltaq from the rotation vector
		fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), rvec, 1.0F);
    4ce8:	22fe      	movs	r2, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:655
	for (j = 0; j < iOverSampleRatio; j++)
	{
		// compute the incremental fast (typically 200Hz) rotation vector rvec (deg)
		for (i = X; i <= Z; i++)
		{
			rvec[i] = (((float)pthisGyro->iYpFast[j][i] * pthisGyro->fDegPerSecPerCount) - pthisSV->fbPl[i]) * pthisSV->fFastdeltat;
    4cea:	9015      	str	r0, [sp, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:659
		}

		// compute the incremental quaternion fDeltaq from the rotation vector
		fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), rvec, 1.0F);
    4cec:	a913      	add	r1, sp, #76	; 0x4c
    4cee:	9806      	ldr	r0, [sp, #24]
    4cf0:	0592      	lsls	r2, r2, #22
    4cf2:	f008 fb97 	bl	d424 <fQuaternionFromRotationVectorDeg>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:663

		// incrementally rotate the a priori orientation quaternion fqMi
		// the a posteriori orientation is re-normalized later so this update is stable
		qAeqAxB(&(pthisSV->fqMi), &(pthisSV->fDeltaq));
    4cf6:	9808      	ldr	r0, [sp, #32]
    4cf8:	9906      	ldr	r1, [sp, #24]
    4cfa:	f009 f919 	bl	df30 <qAeqAxB>
    4cfe:	464b      	mov	r3, r9
    4d00:	3301      	adds	r3, #1
    4d02:	b2db      	uxtb	r3, r3
    4d04:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:650

	// initialize the a priori orientation quaternion to the a posteriori orientation estimate
	pthisSV->fqMi = pthisSV->fqPl;

	// integrate the buffered high frequency (typically 200Hz) gyro readings
	for (j = 0; j < iOverSampleRatio; j++)
    4d06:	b25b      	sxtb	r3, r3
    4d08:	455b      	cmp	r3, fp
    4d0a:	dbba      	blt.n	4c82 <fRun_6DOF_GY_KALMAN+0xce>
    4d0c:	46a3      	mov	fp, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:667
		// the a posteriori orientation is re-normalized later so this update is stable
		qAeqAxB(&(pthisSV->fqMi), &(pthisSV->fDeltaq));
	}

	// get the a priori rotation matrix from the a priori quaternion
	fRotationMatrixFromQuaternion(pthisSV->fRMi, &(pthisSV->fqMi));
    4d0e:	4658      	mov	r0, fp
    4d10:	3094      	adds	r0, #148	; 0x94
    4d12:	9908      	ldr	r1, [sp, #32]
    4d14:	f008 fcf0 	bl	d6f8 <fRotationMatrixFromQuaternion>
    4d18:	9c0e      	ldr	r4, [sp, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:686
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    4d1a:	239c      	movs	r3, #156	; 0x9c
    4d1c:	2c00      	cmp	r4, #0
    4d1e:	d101      	bne.n	4d24 <fRun_6DOF_GY_KALMAN+0x170>
    4d20:	f000 fed5 	bl	5ace <fRun_6DOF_GY_KALMAN+0xf1a>
    4d24:	4658      	mov	r0, fp
    4d26:	2c02      	cmp	r4, #2
    4d28:	d101      	bne.n	4d2e <fRun_6DOF_GY_KALMAN+0x17a>
    4d2a:	f000 ff2e 	bl	5b8a <fRun_6DOF_GY_KALMAN+0xfd6>
    4d2e:	58c4      	ldr	r4, [r0, r3]
    4d30:	2180      	movs	r1, #128	; 0x80
    4d32:	0609      	lsls	r1, r1, #24
    4d34:	1864      	adds	r4, r4, r1
    4d36:	23fc      	movs	r3, #252	; 0xfc
    4d38:	50c4      	str	r4, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    4d3a:	21fc      	movs	r1, #252	; 0xfc
    4d3c:	23d8      	movs	r3, #216	; 0xd8
    4d3e:	58c0      	ldr	r0, [r0, r3]
    4d40:	0589      	lsls	r1, r1, #22
    4d42:	f7fc f827 	bl	d94 <__aeabi_fmul>
    4d46:	2384      	movs	r3, #132	; 0x84
    4d48:	465a      	mov	r2, fp
    4d4a:	005b      	lsls	r3, r3, #1
    4d4c:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:701
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
		}
		else
		{
			// Android has negative sign for gravity: y = a - g, g = -y + a
			pthisSV->fgErrSeMi[i] = -pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    4d4e:	9b07      	ldr	r3, [sp, #28]
    4d50:	68d9      	ldr	r1, [r3, #12]
    4d52:	f7fc f949 	bl	fe8 <__aeabi_fsub>
    4d56:	1c21      	adds	r1, r4, #0
    4d58:	f7fc f946 	bl	fe8 <__aeabi_fsub>
    4d5c:	465c      	mov	r4, fp
    4d5e:	23f0      	movs	r3, #240	; 0xf0
    4d60:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:686
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    4d62:	23a8      	movs	r3, #168	; 0xa8
    4d64:	58e4      	ldr	r4, [r4, r3]
    4d66:	2080      	movs	r0, #128	; 0x80
    4d68:	0600      	lsls	r0, r0, #24
    4d6a:	2380      	movs	r3, #128	; 0x80
    4d6c:	1824      	adds	r4, r4, r0
    4d6e:	4659      	mov	r1, fp
    4d70:	005b      	lsls	r3, r3, #1
    4d72:	50cc      	str	r4, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    4d74:	23dc      	movs	r3, #220	; 0xdc
    4d76:	58c8      	ldr	r0, [r1, r3]
    4d78:	21fc      	movs	r1, #252	; 0xfc
    4d7a:	0589      	lsls	r1, r1, #22
    4d7c:	f7fc f80a 	bl	d94 <__aeabi_fmul>
    4d80:	2386      	movs	r3, #134	; 0x86
    4d82:	465a      	mov	r2, fp
    4d84:	005b      	lsls	r3, r3, #1
    4d86:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:701
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
		}
		else
		{
			// Android has negative sign for gravity: y = a - g, g = -y + a
			pthisSV->fgErrSeMi[i] = -pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    4d88:	9b07      	ldr	r3, [sp, #28]
    4d8a:	6919      	ldr	r1, [r3, #16]
    4d8c:	f7fc f92c 	bl	fe8 <__aeabi_fsub>
    4d90:	1c21      	adds	r1, r4, #0
    4d92:	f7fc f929 	bl	fe8 <__aeabi_fsub>
    4d96:	465c      	mov	r4, fp
    4d98:	23f4      	movs	r3, #244	; 0xf4
    4d9a:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:686
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    4d9c:	23b4      	movs	r3, #180	; 0xb4
    4d9e:	58e4      	ldr	r4, [r4, r3]
    4da0:	2080      	movs	r0, #128	; 0x80
    4da2:	0600      	lsls	r0, r0, #24
    4da4:	2382      	movs	r3, #130	; 0x82
    4da6:	4659      	mov	r1, fp
    4da8:	1824      	adds	r4, r4, r0
    4daa:	005b      	lsls	r3, r3, #1
    4dac:	50cc      	str	r4, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    4dae:	23e0      	movs	r3, #224	; 0xe0
    4db0:	58c8      	ldr	r0, [r1, r3]
    4db2:	21fc      	movs	r1, #252	; 0xfc
    4db4:	0589      	lsls	r1, r1, #22
    4db6:	f7fb ffed 	bl	d94 <__aeabi_fmul>
    4dba:	2388      	movs	r3, #136	; 0x88
    4dbc:	005b      	lsls	r3, r3, #1
    4dbe:	465a      	mov	r2, fp
    4dc0:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:701
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
		}
		else
		{
			// Android has negative sign for gravity: y = a - g, g = -y + a
			pthisSV->fgErrSeMi[i] = -pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    4dc2:	9b07      	ldr	r3, [sp, #28]
    4dc4:	6959      	ldr	r1, [r3, #20]
    4dc6:	f7fc f90f 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    4dca:	1c21      	adds	r1, r4, #0
    4dcc:	f7fc f90c 	bl	fe8 <__aeabi_fsub>
    4dd0:	465c      	mov	r4, fp
    4dd2:	23f8      	movs	r3, #248	; 0xf8
    4dd4:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:710
	// *********************************************************************************
	// update variable elements of measurement matrix C
	// *********************************************************************************

	// update measurement matrix C (3x9) with -alpha(g-)x from gyro (g, sensor frame)
	pthisSV->fC3x9[0][1] = FDEGTORAD * pthisSV->fgSeGyMi[Z];
    4dd6:	2382      	movs	r3, #130	; 0x82
    4dd8:	005b      	lsls	r3, r3, #1
    4dda:	58e0      	ldr	r0, [r4, r3]
    4ddc:	4968      	ldr	r1, [pc, #416]	; (4f80 <fRun_6DOF_GY_KALMAN+0x3cc>)
    4dde:	f7fb ffd9 	bl	d94 <__aeabi_fmul>
    4de2:	2382      	movs	r3, #130	; 0x82
    4de4:	465a      	mov	r2, fp
    4de6:	00db      	lsls	r3, r3, #3
    4de8:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:711
	pthisSV->fC3x9[0][2] = -FDEGTORAD * pthisSV->fgSeGyMi[Y];
    4dea:	2380      	movs	r3, #128	; 0x80
    4dec:	005b      	lsls	r3, r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:710
	// *********************************************************************************
	// update variable elements of measurement matrix C
	// *********************************************************************************

	// update measurement matrix C (3x9) with -alpha(g-)x from gyro (g, sensor frame)
	pthisSV->fC3x9[0][1] = FDEGTORAD * pthisSV->fgSeGyMi[Z];
    4dee:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:711
	pthisSV->fC3x9[0][2] = -FDEGTORAD * pthisSV->fgSeGyMi[Y];
    4df0:	4964      	ldr	r1, [pc, #400]	; (4f84 <fRun_6DOF_GY_KALMAN+0x3d0>)
    4df2:	58e0      	ldr	r0, [r4, r3]
    4df4:	f7fb ffce 	bl	d94 <__aeabi_fmul>
    4df8:	4b63      	ldr	r3, [pc, #396]	; (4f88 <fRun_6DOF_GY_KALMAN+0x3d4>)
    4dfa:	465c      	mov	r4, fp
    4dfc:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:712
	pthisSV->fC3x9[1][2] = FDEGTORAD * pthisSV->fgSeGyMi[X];
    4dfe:	23fc      	movs	r3, #252	; 0xfc
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:711
	// update variable elements of measurement matrix C
	// *********************************************************************************

	// update measurement matrix C (3x9) with -alpha(g-)x from gyro (g, sensor frame)
	pthisSV->fC3x9[0][1] = FDEGTORAD * pthisSV->fgSeGyMi[Z];
	pthisSV->fC3x9[0][2] = -FDEGTORAD * pthisSV->fgSeGyMi[Y];
    4e00:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:712
	pthisSV->fC3x9[1][2] = FDEGTORAD * pthisSV->fgSeGyMi[X];
    4e02:	495f      	ldr	r1, [pc, #380]	; (4f80 <fRun_6DOF_GY_KALMAN+0x3cc>)
    4e04:	58e0      	ldr	r0, [r4, r3]
    4e06:	f7fb ffc5 	bl	d94 <__aeabi_fmul>
    4e0a:	2387      	movs	r3, #135	; 0x87
    4e0c:	00db      	lsls	r3, r3, #3
    4e0e:	50e0      	str	r0, [r4, r3]
    4e10:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:713
	pthisSV->fC3x9[1][0] = -pthisSV->fC3x9[0][1];
    4e12:	2080      	movs	r0, #128	; 0x80
    4e14:	0600      	lsls	r0, r0, #24
    4e16:	2386      	movs	r3, #134	; 0x86
    4e18:	183a      	adds	r2, r7, r0
    4e1a:	00db      	lsls	r3, r3, #3
    4e1c:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:714
	pthisSV->fC3x9[2][0] = -pthisSV->fC3x9[0][2];
    4e1e:	4b5b      	ldr	r3, [pc, #364]	; (4f8c <fRun_6DOF_GY_KALMAN+0x3d8>)
    4e20:	1832      	adds	r2, r6, r0
    4e22:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:715
	pthisSV->fC3x9[2][1] = -pthisSV->fC3x9[1][2];
    4e24:	238b      	movs	r3, #139	; 0x8b
    4e26:	182a      	adds	r2, r5, r0
    4e28:	00db      	lsls	r3, r3, #3
    4e2a:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:716
	pthisSV->fC3x9[0][4] = -pthisSV->fdeltat * pthisSV->fC3x9[0][1];
    4e2c:	2390      	movs	r3, #144	; 0x90
    4e2e:	00db      	lsls	r3, r3, #3
    4e30:	58e4      	ldr	r4, [r4, r3]
    4e32:	1824      	adds	r4, r4, r0
    4e34:	1c21      	adds	r1, r4, #0
    4e36:	1c38      	adds	r0, r7, #0
    4e38:	f7fb ffac 	bl	d94 <__aeabi_fmul>
    4e3c:	4b54      	ldr	r3, [pc, #336]	; (4f90 <fRun_6DOF_GY_KALMAN+0x3dc>)
    4e3e:	4659      	mov	r1, fp
    4e40:	50c8      	str	r0, [r1, r3]
    4e42:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:717
	pthisSV->fC3x9[0][5] = -pthisSV->fdeltat * pthisSV->fC3x9[0][2];
    4e44:	1c21      	adds	r1, r4, #0
    4e46:	1c30      	adds	r0, r6, #0
    4e48:	f7fb ffa4 	bl	d94 <__aeabi_fmul>
    4e4c:	2384      	movs	r3, #132	; 0x84
    4e4e:	00db      	lsls	r3, r3, #3
    4e50:	465a      	mov	r2, fp
    4e52:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:718
	pthisSV->fC3x9[1][5] = -pthisSV->fdeltat * pthisSV->fC3x9[1][2];
    4e54:	1c21      	adds	r1, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:717
	pthisSV->fC3x9[1][2] = FDEGTORAD * pthisSV->fgSeGyMi[X];
	pthisSV->fC3x9[1][0] = -pthisSV->fC3x9[0][1];
	pthisSV->fC3x9[2][0] = -pthisSV->fC3x9[0][2];
	pthisSV->fC3x9[2][1] = -pthisSV->fC3x9[1][2];
	pthisSV->fC3x9[0][4] = -pthisSV->fdeltat * pthisSV->fC3x9[0][1];
	pthisSV->fC3x9[0][5] = -pthisSV->fdeltat * pthisSV->fC3x9[0][2];
    4e56:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:718
	pthisSV->fC3x9[1][5] = -pthisSV->fdeltat * pthisSV->fC3x9[1][2];
    4e58:	1c28      	adds	r0, r5, #0
    4e5a:	f7fb ff9b 	bl	d94 <__aeabi_fmul>
    4e5e:	4b4d      	ldr	r3, [pc, #308]	; (4f94 <fRun_6DOF_GY_KALMAN+0x3e0>)
    4e60:	465c      	mov	r4, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:719
	pthisSV->fC3x9[1][3]= -pthisSV->fC3x9[0][4];
    4e62:	2180      	movs	r1, #128	; 0x80
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:718
	pthisSV->fC3x9[1][0] = -pthisSV->fC3x9[0][1];
	pthisSV->fC3x9[2][0] = -pthisSV->fC3x9[0][2];
	pthisSV->fC3x9[2][1] = -pthisSV->fC3x9[1][2];
	pthisSV->fC3x9[0][4] = -pthisSV->fdeltat * pthisSV->fC3x9[0][1];
	pthisSV->fC3x9[0][5] = -pthisSV->fdeltat * pthisSV->fC3x9[0][2];
	pthisSV->fC3x9[1][5] = -pthisSV->fdeltat * pthisSV->fC3x9[1][2];
    4e64:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:719
	pthisSV->fC3x9[1][3]= -pthisSV->fC3x9[0][4];
    4e66:	0609      	lsls	r1, r1, #24
    4e68:	4b4b      	ldr	r3, [pc, #300]	; (4f98 <fRun_6DOF_GY_KALMAN+0x3e4>)
    4e6a:	187f      	adds	r7, r7, r1
    4e6c:	50e7      	str	r7, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:720
	pthisSV->fC3x9[2][3]= -pthisSV->fC3x9[0][5];
    4e6e:	238c      	movs	r3, #140	; 0x8c
    4e70:	00db      	lsls	r3, r3, #3
    4e72:	1876      	adds	r6, r6, r1
    4e74:	50e6      	str	r6, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:721
	pthisSV->fC3x9[2][4]= -pthisSV->fC3x9[1][5];
    4e76:	4b49      	ldr	r3, [pc, #292]	; (4f9c <fRun_6DOF_GY_KALMAN+0x3e8>)
    4e78:	1840      	adds	r0, r0, r1
    4e7a:	50e0      	str	r0, [r4, r3]
    4e7c:	23b2      	movs	r3, #178	; 0xb2
    4e7e:	009b      	lsls	r3, r3, #2
    4e80:	1c1c      	adds	r4, r3, #0
    4e82:	445c      	add	r4, fp
    4e84:	4846      	ldr	r0, [pc, #280]	; (4fa0 <fRun_6DOF_GY_KALMAN+0x3ec>)
    4e86:	1c23      	adds	r3, r4, #0
    4e88:	9409      	str	r4, [sp, #36]	; 0x24
    4e8a:	ac37      	add	r4, sp, #220	; 0xdc
    4e8c:	940a      	str	r4, [sp, #40]	; 0x28
    4e8e:	1c04      	adds	r4, r0, #0
    4e90:	aa1c      	add	r2, sp, #112	; 0x70
    4e92:	445c      	add	r4, fp
    4e94:	4692      	mov	sl, r2
    4e96:	1c1f      	adds	r7, r3, #0
    4e98:	9407      	str	r4, [sp, #28]
    4e9a:	200c      	movs	r0, #12
    4e9c:	4240      	negs	r0, r0
    4e9e:	4680      	mov	r8, r0
    4ea0:	9907      	ldr	r1, [sp, #28]
    4ea2:	44d0      	add	r8, sl
    4ea4:	4689      	mov	r9, r1
    4ea6:	4646      	mov	r6, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:741
		pftmpA9x3ij = ftmpA9x3[i];

		for (j = 0; j < 3; j++) // loop over columns of ftmpA9x3
		{
			// zero ftmpA9x3[i][j]
			*pftmpA9x3ij = 0.0F;
    4ea8:	2200      	movs	r2, #0
    4eaa:	6032      	str	r2, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:744

			// initialize pfC3x9jk for current j, k=0
			pfC3x9jk = pthisSV->fC3x9[j];
    4eac:	46b0      	mov	r8, r6
    4eae:	2400      	movs	r4, #0
    4eb0:	464e      	mov	r6, r9
    4eb2:	e009      	b.n	4ec8 <fRun_6DOF_GY_KALMAN+0x314>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:755
			for (k = 0; k < 9; k++)
			{
				if ((*pfQw9x9ik != 0.0F) && (*pfC3x9jk != 0.0F))
				{
					if (*pfC3x9jk == 1.0F)
						*pftmpA9x3ij += *pfQw9x9ik;
    4eb4:	4641      	mov	r1, r8
    4eb6:	6808      	ldr	r0, [r1, #0]
    4eb8:	1c29      	adds	r1, r5, #0
    4eba:	f7fb fc1b 	bl	6f4 <__aeabi_fadd>
    4ebe:	4642      	mov	r2, r8
    4ec0:	6010      	str	r0, [r2, #0]
    4ec2:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:750

			// initialize pfQw9x9ik for current i, k=0
			pfQw9x9ik = pthisSV->fQw9x9[i];

			// sum matrix products over inner loop over k
			for (k = 0; k < 9; k++)
    4ec4:	2c24      	cmp	r4, #36	; 0x24
    4ec6:	d026      	beq.n	4f16 <fRun_6DOF_GY_KALMAN+0x362>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:752
			{
				if ((*pfQw9x9ik != 0.0F) && (*pfC3x9jk != 0.0F))
    4ec8:	593d      	ldr	r5, [r7, r4]
    4eca:	2100      	movs	r1, #0
    4ecc:	1c28      	adds	r0, r5, #0
    4ece:	f7fb fbe3 	bl	698 <__aeabi_fcmpeq>
    4ed2:	2800      	cmp	r0, #0
    4ed4:	d1f5      	bne.n	4ec2 <fRun_6DOF_GY_KALMAN+0x30e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:752 (discriminator 1)
    4ed6:	5933      	ldr	r3, [r6, r4]
    4ed8:	2100      	movs	r1, #0
    4eda:	1c18      	adds	r0, r3, #0
    4edc:	4699      	mov	r9, r3
    4ede:	f7fb fbdb 	bl	698 <__aeabi_fcmpeq>
    4ee2:	2800      	cmp	r0, #0
    4ee4:	d1ed      	bne.n	4ec2 <fRun_6DOF_GY_KALMAN+0x30e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:754
				{
					if (*pfC3x9jk == 1.0F)
    4ee6:	21fe      	movs	r1, #254	; 0xfe
    4ee8:	4648      	mov	r0, r9
    4eea:	0589      	lsls	r1, r1, #22
    4eec:	f7fb fbd4 	bl	698 <__aeabi_fcmpeq>
    4ef0:	2800      	cmp	r0, #0
    4ef2:	d1df      	bne.n	4eb4 <fRun_6DOF_GY_KALMAN+0x300>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:756
						*pftmpA9x3ij += *pfQw9x9ik;
					else if (*pfC3x9jk == -1.0F)
    4ef4:	4648      	mov	r0, r9
    4ef6:	492b      	ldr	r1, [pc, #172]	; (4fa4 <fRun_6DOF_GY_KALMAN+0x3f0>)
    4ef8:	f7fb fbce 	bl	698 <__aeabi_fcmpeq>
    4efc:	2800      	cmp	r0, #0
    4efe:	d100      	bne.n	4f02 <fRun_6DOF_GY_KALMAN+0x34e>
    4f00:	e1b2      	b.n	5268 <fRun_6DOF_GY_KALMAN+0x6b4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:757
						*pftmpA9x3ij -= *pfQw9x9ik;
    4f02:	4643      	mov	r3, r8
    4f04:	6818      	ldr	r0, [r3, #0]
    4f06:	1c29      	adds	r1, r5, #0
    4f08:	f7fc f86e 	bl	fe8 <__aeabi_fsub>
    4f0c:	3404      	adds	r4, #4
    4f0e:	4641      	mov	r1, r8
    4f10:	6008      	str	r0, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:750

			// initialize pfQw9x9ik for current i, k=0
			pfQw9x9ik = pthisSV->fQw9x9[i];

			// sum matrix products over inner loop over k
			for (k = 0; k < 9; k++)
    4f12:	2c24      	cmp	r4, #36	; 0x24
    4f14:	d1d8      	bne.n	4ec8 <fRun_6DOF_GY_KALMAN+0x314>
    4f16:	46b1      	mov	r9, r6
    4f18:	4646      	mov	r6, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:769
				pfQw9x9ik++;

			} // end of loop over k

			// increment pftmpA9x3ij for next iteration of j
			pftmpA9x3ij++;
    4f1a:	3604      	adds	r6, #4
    4f1c:	44a1      	add	r9, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:738
	for (i = 0; i < 9; i++) // loop over rows of ftmpA9x3
	{
		// initialize pftmpA9x3ij for current i, j=0
		pftmpA9x3ij = ftmpA9x3[i];

		for (j = 0; j < 3; j++) // loop over columns of ftmpA9x3
    4f1e:	4556      	cmp	r6, sl
    4f20:	d1c2      	bne.n	4ea8 <fRun_6DOF_GY_KALMAN+0x2f4>
    4f22:	200c      	movs	r0, #12
    4f24:	46b0      	mov	r8, r6
    4f26:	4682      	mov	sl, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:733
	// *********************************************************************************

	// set ftmpA9x3 = P- * C^T = Qw * C^T where Qw and C are both sparse
	// C also has a significant number of +1 and -1 entries
	// ftmpA9x3 is also sparse but not symmetric
	for (i = 0; i < 9; i++) // loop over rows of ftmpA9x3
    4f28:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    4f2a:	44c2      	add	sl, r8
    4f2c:	3724      	adds	r7, #36	; 0x24
    4f2e:	45a2      	cmp	sl, r4
    4f30:	d1b3      	bne.n	4e9a <fRun_6DOF_GY_KALMAN+0x2e6>
    4f32:	218c      	movs	r1, #140	; 0x8c
    4f34:	0049      	lsls	r1, r1, #1
    4f36:	1c0c      	adds	r4, r1, #0
    4f38:	445c      	add	r4, fp
    4f3a:	2086      	movs	r0, #134	; 0x86
    4f3c:	00c0      	lsls	r0, r0, #3
    4f3e:	940f      	str	r4, [sp, #60]	; 0x3c
    4f40:	940a      	str	r4, [sp, #40]	; 0x28
    4f42:	2400      	movs	r4, #0
    4f44:	4680      	mov	r8, r0
    4f46:	9407      	str	r4, [sp, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:785
		pfPPlus9x9ij = pthisSV->fPPlus9x9[i] + i;

		for (j = i; j < 3; j++) // loop over above diagonal columns of P+
		{
			// zero P+[i][j] 
			*pfPPlus9x9ij = 0.0F;
    4f48:	465c      	mov	r4, fp
    4f4a:	44d8      	add	r8, fp
    4f4c:	940c      	str	r4, [sp, #48]	; 0x30
    4f4e:	2124      	movs	r1, #36	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:780
	// = C * (Qw * C^T) + Qv = C * ftmpA9x3 + Qv
	// both C and ftmpA9x3 are sparse but not symmetric
	for (i = 0; i < 3; i++) // loop over rows of P+
	{
		// initialize pfPPlus9x9ij for current i, j=i
		pfPPlus9x9ij = pthisSV->fPPlus9x9[i] + i;
    4f50:	9a07      	ldr	r2, [sp, #28]
    4f52:	980a      	ldr	r0, [sp, #40]	; 0x28
    4f54:	4249      	negs	r1, r1
    4f56:	468b      	mov	fp, r1
    4f58:	4681      	mov	r9, r0
    4f5a:	44c3      	add	fp, r8
    4f5c:	4692      	mov	sl, r2
    4f5e:	b255      	sxtb	r5, r2
    4f60:	4647      	mov	r7, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:785

		for (j = i; j < 3; j++) // loop over above diagonal columns of P+
		{
			// zero P+[i][j] 
			*pfPPlus9x9ij = 0.0F;
    4f62:	2100      	movs	r1, #0
    4f64:	4648      	mov	r0, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:791

			// initialize pfC3x9ik for current i, k=0
			pfC3x9ik = pthisSV->fC3x9[i];

			// initialize pftmpA9x3kj for current j, k=0
			pftmpA9x3kj = *ftmpA9x3 + j;
    4f66:	00ad      	lsls	r5, r5, #2
    4f68:	aa19      	add	r2, sp, #100	; 0x64
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:785
		pfPPlus9x9ij = pthisSV->fPPlus9x9[i] + i;

		for (j = i; j < 3; j++) // loop over above diagonal columns of P+
		{
			// zero P+[i][j] 
			*pfPPlus9x9ij = 0.0F;
    4f6a:	6001      	str	r1, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:791

			// initialize pfC3x9ik for current i, k=0
			pfC3x9ik = pthisSV->fC3x9[i];

			// initialize pftmpA9x3kj for current j, k=0
			pftmpA9x3kj = *ftmpA9x3 + j;
    4f6c:	1955      	adds	r5, r2, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:788
		{
			// zero P+[i][j] 
			*pfPPlus9x9ij = 0.0F;

			// initialize pfC3x9ik for current i, k=0
			pfC3x9ik = pthisSV->fC3x9[i];
    4f6e:	465c      	mov	r4, fp
    4f70:	e025      	b.n	4fbe <fRun_6DOF_GY_KALMAN+0x40a>
    4f72:	46c0      	nop			; (mov r8, r8)
    4f74:	0000048e 	.word	0x0000048e
    4f78:	0000048c 	.word	0x0000048c
    4f7c:	0000047c 	.word	0x0000047c
    4f80:	3c8efa35 	.word	0x3c8efa35
    4f84:	bc8efa35 	.word	0xbc8efa35
    4f88:	00000414 	.word	0x00000414
    4f8c:	00000454 	.word	0x00000454
    4f90:	0000041c 	.word	0x0000041c
    4f94:	00000444 	.word	0x00000444
    4f98:	0000043c 	.word	0x0000043c
    4f9c:	00000464 	.word	0x00000464
    4fa0:	0000040c 	.word	0x0000040c
    4fa4:	bf800000 	.word	0xbf800000
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:799
			for (k = 0; k < 9; k++)
			{
				if ((*pfC3x9ik != 0.0F) && (*pftmpA9x3kj != 0.0F))
				{
					if (*pfC3x9ik == 1.0F)
						*pfPPlus9x9ij += *pftmpA9x3kj;
    4fa8:	4649      	mov	r1, r9
    4faa:	6808      	ldr	r0, [r1, #0]
    4fac:	4641      	mov	r1, r8
    4fae:	f7fb fba1 	bl	6f4 <__aeabi_fadd>
    4fb2:	464a      	mov	r2, r9
    4fb4:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:807
					else
						*pfPPlus9x9ij += *pfC3x9ik * *pftmpA9x3kj;
				}

				// update pfC3x9ik and pftmpA9x3kj for next iteration of k
				pfC3x9ik++;						
    4fb6:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:808
				pftmpA9x3kj += 3;
    4fb8:	350c      	adds	r5, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:794

			// initialize pftmpA9x3kj for current j, k=0
			pftmpA9x3kj = *ftmpA9x3 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 9; k++)
    4fba:	42bc      	cmp	r4, r7
    4fbc:	d027      	beq.n	500e <fRun_6DOF_GY_KALMAN+0x45a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:796
			{
				if ((*pfC3x9ik != 0.0F) && (*pftmpA9x3kj != 0.0F))
    4fbe:	6826      	ldr	r6, [r4, #0]
    4fc0:	2100      	movs	r1, #0
    4fc2:	1c30      	adds	r0, r6, #0
    4fc4:	f7fb fb68 	bl	698 <__aeabi_fcmpeq>
    4fc8:	2800      	cmp	r0, #0
    4fca:	d1f4      	bne.n	4fb6 <fRun_6DOF_GY_KALMAN+0x402>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:796 (discriminator 1)
    4fcc:	682b      	ldr	r3, [r5, #0]
    4fce:	2100      	movs	r1, #0
    4fd0:	1c18      	adds	r0, r3, #0
    4fd2:	4698      	mov	r8, r3
    4fd4:	f7fb fb60 	bl	698 <__aeabi_fcmpeq>
    4fd8:	2800      	cmp	r0, #0
    4fda:	d1ec      	bne.n	4fb6 <fRun_6DOF_GY_KALMAN+0x402>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:798
				{
					if (*pfC3x9ik == 1.0F)
    4fdc:	21fe      	movs	r1, #254	; 0xfe
    4fde:	1c30      	adds	r0, r6, #0
    4fe0:	0589      	lsls	r1, r1, #22
    4fe2:	f7fb fb59 	bl	698 <__aeabi_fcmpeq>
    4fe6:	2800      	cmp	r0, #0
    4fe8:	d1de      	bne.n	4fa8 <fRun_6DOF_GY_KALMAN+0x3f4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:800
						*pfPPlus9x9ij += *pftmpA9x3kj;
					else if (*pfC3x9ik == -1.0F)
    4fea:	1c30      	adds	r0, r6, #0
    4fec:	49a7      	ldr	r1, [pc, #668]	; (528c <fRun_6DOF_GY_KALMAN+0x6d8>)
    4fee:	f7fb fb53 	bl	698 <__aeabi_fcmpeq>
    4ff2:	2800      	cmp	r0, #0
    4ff4:	d100      	bne.n	4ff8 <fRun_6DOF_GY_KALMAN+0x444>
    4ff6:	e12b      	b.n	5250 <fRun_6DOF_GY_KALMAN+0x69c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:801
						*pfPPlus9x9ij -= *pftmpA9x3kj;
    4ff8:	464b      	mov	r3, r9
    4ffa:	6818      	ldr	r0, [r3, #0]
    4ffc:	4641      	mov	r1, r8
    4ffe:	f7fb fff3 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:807
					else
						*pfPPlus9x9ij += *pfC3x9ik * *pftmpA9x3kj;
				}

				// update pfC3x9ik and pftmpA9x3kj for next iteration of k
				pfC3x9ik++;						
    5002:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:801
				if ((*pfC3x9ik != 0.0F) && (*pftmpA9x3kj != 0.0F))
				{
					if (*pfC3x9ik == 1.0F)
						*pfPPlus9x9ij += *pftmpA9x3kj;
					else if (*pfC3x9ik == -1.0F)
						*pfPPlus9x9ij -= *pftmpA9x3kj;
    5004:	4649      	mov	r1, r9
    5006:	6008      	str	r0, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:808
						*pfPPlus9x9ij += *pfC3x9ik * *pftmpA9x3kj;
				}

				// update pfC3x9ik and pftmpA9x3kj for next iteration of k
				pfC3x9ik++;						
				pftmpA9x3kj += 3;
    5008:	350c      	adds	r5, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:794

			// initialize pftmpA9x3kj for current j, k=0
			pftmpA9x3kj = *ftmpA9x3 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 9; k++)
    500a:	42bc      	cmp	r4, r7
    500c:	d1d7      	bne.n	4fbe <fRun_6DOF_GY_KALMAN+0x40a>
    500e:	4653      	mov	r3, sl
    5010:	3301      	adds	r3, #1
    5012:	b2db      	uxtb	r3, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:813
				pftmpA9x3kj += 3;

			} // end of loop over k

			// increment pfPPlus9x9ij for next iteration of j
			pfPPlus9x9ij++;
    5014:	2004      	movs	r0, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:782
	for (i = 0; i < 3; i++) // loop over rows of P+
	{
		// initialize pfPPlus9x9ij for current i, j=i
		pfPPlus9x9ij = pthisSV->fPPlus9x9[i] + i;

		for (j = i; j < 3; j++) // loop over above diagonal columns of P+
    5016:	b25d      	sxtb	r5, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:813
				pftmpA9x3kj += 3;

			} // end of loop over k

			// increment pfPPlus9x9ij for next iteration of j
			pfPPlus9x9ij++;
    5018:	4481      	add	r9, r0
    501a:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:782
	for (i = 0; i < 3; i++) // loop over rows of P+
	{
		// initialize pfPPlus9x9ij for current i, j=i
		pfPPlus9x9ij = pthisSV->fPPlus9x9[i] + i;

		for (j = i; j < 3; j++) // loop over above diagonal columns of P+
    501c:	2d02      	cmp	r5, #2
    501e:	dda0      	ble.n	4f62 <fRun_6DOF_GY_KALMAN+0x3ae>
    5020:	9b07      	ldr	r3, [sp, #28]
    5022:	3424      	adds	r4, #36	; 0x24
    5024:	46a0      	mov	r8, r4
    5026:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    5028:	3301      	adds	r3, #1
    502a:	b2db      	uxtb	r3, r3
    502c:	3428      	adds	r4, #40	; 0x28
    502e:	940a      	str	r4, [sp, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:777
	} // end of loop over i

	// set symmetric P+ (3x3 scratch sub-matrix) to C * P- * C^T + Qv
	// = C * (Qw * C^T) + Qv = C * ftmpA9x3 + Qv
	// both C and ftmpA9x3 are sparse but not symmetric
	for (i = 0; i < 3; i++) // loop over rows of P+
    5030:	b25c      	sxtb	r4, r3
    5032:	9307      	str	r3, [sp, #28]
    5034:	2c03      	cmp	r4, #3
    5036:	d18a      	bne.n	4f4e <fRun_6DOF_GY_KALMAN+0x39a>
    5038:	980c      	ldr	r0, [sp, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:819

		} // end of loop over j
	} // end of loop over i

	// add in noise covariance terms to the diagonal
	pthisSV->fPPlus9x9[0][0] +=  pthisSV->fQvAA;
    503a:	238a      	movs	r3, #138	; 0x8a
    503c:	005b      	lsls	r3, r3, #1
    503e:	58c6      	ldr	r6, [r0, r3]
    5040:	258c      	movs	r5, #140	; 0x8c
    5042:	006d      	lsls	r5, r5, #1
    5044:	4683      	mov	fp, r0
    5046:	1c31      	adds	r1, r6, #0
    5048:	5940      	ldr	r0, [r0, r5]
    504a:	f7fb fb53 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:820
	pthisSV->fPPlus9x9[1][1] +=  pthisSV->fQvAA;
    504e:	23a0      	movs	r3, #160	; 0xa0
    5050:	005b      	lsls	r3, r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:819

		} // end of loop over j
	} // end of loop over i

	// add in noise covariance terms to the diagonal
	pthisSV->fPPlus9x9[0][0] +=  pthisSV->fQvAA;
    5052:	465a      	mov	r2, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:820
	pthisSV->fPPlus9x9[1][1] +=  pthisSV->fQvAA;
    5054:	4699      	mov	r9, r3
    5056:	465b      	mov	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:819

		} // end of loop over j
	} // end of loop over i

	// add in noise covariance terms to the diagonal
	pthisSV->fPPlus9x9[0][0] +=  pthisSV->fQvAA;
    5058:	5150      	str	r0, [r2, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:820
	pthisSV->fPPlus9x9[1][1] +=  pthisSV->fQvAA;
    505a:	444b      	add	r3, r9
    505c:	6819      	ldr	r1, [r3, #0]
    505e:	1c30      	adds	r0, r6, #0
    5060:	f7fb fb48 	bl	6f4 <__aeabi_fadd>
    5064:	4659      	mov	r1, fp
    5066:	4449      	add	r1, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:821
	pthisSV->fPPlus9x9[2][2] +=  pthisSV->fQvAA;
    5068:	27b4      	movs	r7, #180	; 0xb4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:820
		} // end of loop over j
	} // end of loop over i

	// add in noise covariance terms to the diagonal
	pthisSV->fPPlus9x9[0][0] +=  pthisSV->fQvAA;
	pthisSV->fPPlus9x9[1][1] +=  pthisSV->fQvAA;
    506a:	6008      	str	r0, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:821
	pthisSV->fPPlus9x9[2][2] +=  pthisSV->fQvAA;
    506c:	007f      	lsls	r7, r7, #1
    506e:	465a      	mov	r2, fp
    5070:	59d1      	ldr	r1, [r2, r7]
    5072:	1c30      	adds	r0, r6, #0
    5074:	f7fb fb3e 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:824

	// copy above diagonal terms of P+ (3x3 scratch sub-matrix) to below diagonal terms
	pthisSV->fPPlus9x9[1][0] = pthisSV->fPPlus9x9[0][1];
    5078:	268e      	movs	r6, #142	; 0x8e
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:821
	} // end of loop over i

	// add in noise covariance terms to the diagonal
	pthisSV->fPPlus9x9[0][0] +=  pthisSV->fQvAA;
	pthisSV->fPPlus9x9[1][1] +=  pthisSV->fQvAA;
	pthisSV->fPPlus9x9[2][2] +=  pthisSV->fQvAA;
    507a:	465b      	mov	r3, fp
    507c:	51d8      	str	r0, [r3, r7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:824

	// copy above diagonal terms of P+ (3x3 scratch sub-matrix) to below diagonal terms
	pthisSV->fPPlus9x9[1][0] = pthisSV->fPPlus9x9[0][1];
    507e:	0076      	lsls	r6, r6, #1
    5080:	5998      	ldr	r0, [r3, r6]
    5082:	229e      	movs	r2, #158	; 0x9e
    5084:	0052      	lsls	r2, r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:825
	pthisSV->fPPlus9x9[2][0] = pthisSV->fPPlus9x9[0][2];
    5086:	2790      	movs	r7, #144	; 0x90
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:824
	pthisSV->fPPlus9x9[0][0] +=  pthisSV->fQvAA;
	pthisSV->fPPlus9x9[1][1] +=  pthisSV->fQvAA;
	pthisSV->fPPlus9x9[2][2] +=  pthisSV->fQvAA;

	// copy above diagonal terms of P+ (3x3 scratch sub-matrix) to below diagonal terms
	pthisSV->fPPlus9x9[1][0] = pthisSV->fPPlus9x9[0][1];
    5088:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:825
	pthisSV->fPPlus9x9[2][0] = pthisSV->fPPlus9x9[0][2];
    508a:	007f      	lsls	r7, r7, #1
    508c:	59db      	ldr	r3, [r3, r7]
    508e:	20b0      	movs	r0, #176	; 0xb0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:824
	pthisSV->fPPlus9x9[0][0] +=  pthisSV->fQvAA;
	pthisSV->fPPlus9x9[1][1] +=  pthisSV->fQvAA;
	pthisSV->fPPlus9x9[2][2] +=  pthisSV->fQvAA;

	// copy above diagonal terms of P+ (3x3 scratch sub-matrix) to below diagonal terms
	pthisSV->fPPlus9x9[1][0] = pthisSV->fPPlus9x9[0][1];
    5090:	4659      	mov	r1, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:825
	pthisSV->fPPlus9x9[2][0] = pthisSV->fPPlus9x9[0][2];
    5092:	0040      	lsls	r0, r0, #1
    5094:	500b      	str	r3, [r1, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:826
	pthisSV->fPPlus9x9[2][1] = pthisSV->fPPlus9x9[1][2];
    5096:	23a2      	movs	r3, #162	; 0xa2
    5098:	005b      	lsls	r3, r3, #1
    509a:	58cb      	ldr	r3, [r1, r3]
    509c:	22b2      	movs	r2, #178	; 0xb2
    509e:	0052      	lsls	r2, r2, #1
    50a0:	508b      	str	r3, [r1, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:831

	// calculate inverse of P+ (3x3 scratch sub-matrix) = inv(C * P- * C^T + Qv) = inv(C * Qw * C^T + Qv)
	for (i = 0; i < 3; i++)
	{
		pfRows[i] = pthisSV->fPPlus9x9[i];
    50a2:	209e      	movs	r0, #158	; 0x9e
    50a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    50a6:	22b0      	movs	r2, #176	; 0xb0
    50a8:	0040      	lsls	r0, r0, #1
    50aa:	0052      	lsls	r2, r2, #1
    50ac:	9316      	str	r3, [sp, #88]	; 0x58
    50ae:	1c01      	adds	r1, r0, #0
    50b0:	1c13      	adds	r3, r2, #0
    50b2:	4459      	add	r1, fp
    50b4:	445b      	add	r3, fp
    50b6:	9107      	str	r1, [sp, #28]
    50b8:	9117      	str	r1, [sp, #92]	; 0x5c
    50ba:	9318      	str	r3, [sp, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:833
	}
	fmatrixAeqInvA(pfRows, iColInd, iRowInd, iPivot, 3);
    50bc:	9400      	str	r4, [sp, #0]
    50be:	a816      	add	r0, sp, #88	; 0x58
    50c0:	a910      	add	r1, sp, #64	; 0x40
    50c2:	ab12      	add	r3, sp, #72	; 0x48
    50c4:	aa11      	add	r2, sp, #68	; 0x44
    50c6:	f006 fec3 	bl	be50 <fmatrixAeqInvA>
    50ca:	2397      	movs	r3, #151	; 0x97
    50cc:	009b      	lsls	r3, r3, #2
    50ce:	1c1c      	adds	r4, r3, #0
    50d0:	445c      	add	r4, fp
    50d2:	a819      	add	r0, sp, #100	; 0x64
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:847
		pfK9x3ij = pthisSV->fK9x3[i];

		for (j = 0; j < 3; j++) // loop over columns of K9x3
		{
			// zero the matrix element fK9x3[i][j]
			*pfK9x3ij = 0.0F;
    50d4:	2100      	movs	r1, #0
    50d6:	940a      	str	r4, [sp, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:833
	// calculate inverse of P+ (3x3 scratch sub-matrix) = inv(C * P- * C^T + Qv) = inv(C * Qw * C^T + Qv)
	for (i = 0; i < 3; i++)
	{
		pfRows[i] = pthisSV->fPPlus9x9[i];
	}
	fmatrixAeqInvA(pfRows, iColInd, iRowInd, iPivot, 3);
    50d8:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:847
		pfK9x3ij = pthisSV->fK9x3[i];

		for (j = 0; j < 3; j++) // loop over columns of K9x3
		{
			// zero the matrix element fK9x3[i][j]
			*pfK9x3ij = 0.0F;
    50da:	468a      	mov	sl, r1
    50dc:	e0aa      	b.n	5234 <fRun_6DOF_GY_KALMAN+0x680>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    50de:	238c      	movs	r3, #140	; 0x8c
    50e0:	465a      	mov	r2, fp
    50e2:	005b      	lsls	r3, r3, #1
    50e4:	58d1      	ldr	r1, [r2, r3]
    50e6:	1c38      	adds	r0, r7, #0
    50e8:	f7fb fe54 	bl	d94 <__aeabi_fmul>
    50ec:	2100      	movs	r1, #0
    50ee:	f7fb fb01 	bl	6f4 <__aeabi_fadd>
    50f2:	4681      	mov	r9, r0
    50f4:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    50f6:	4641      	mov	r1, r8
    50f8:	684e      	ldr	r6, [r1, #4]
    50fa:	2100      	movs	r1, #0
    50fc:	1c30      	adds	r0, r6, #0
    50fe:	f7fb facb 	bl	698 <__aeabi_fcmpeq>
    5102:	2800      	cmp	r0, #0
    5104:	d10c      	bne.n	5120 <fRun_6DOF_GY_KALMAN+0x56c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    5106:	239e      	movs	r3, #158	; 0x9e
    5108:	465a      	mov	r2, fp
    510a:	005b      	lsls	r3, r3, #1
    510c:	58d1      	ldr	r1, [r2, r3]
    510e:	1c30      	adds	r0, r6, #0
    5110:	f7fb fe40 	bl	d94 <__aeabi_fmul>
    5114:	1c01      	adds	r1, r0, #0
    5116:	4648      	mov	r0, r9
    5118:	f7fb faec 	bl	6f4 <__aeabi_fadd>
    511c:	4681      	mov	r9, r0
    511e:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    5120:	4640      	mov	r0, r8
    5122:	6885      	ldr	r5, [r0, #8]
    5124:	2100      	movs	r1, #0
    5126:	1c28      	adds	r0, r5, #0
    5128:	f7fb fab6 	bl	698 <__aeabi_fcmpeq>
    512c:	2800      	cmp	r0, #0
    512e:	d10a      	bne.n	5146 <fRun_6DOF_GY_KALMAN+0x592>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    5130:	23b0      	movs	r3, #176	; 0xb0
    5132:	465a      	mov	r2, fp
    5134:	005b      	lsls	r3, r3, #1
    5136:	58d1      	ldr	r1, [r2, r3]
    5138:	1c28      	adds	r0, r5, #0
    513a:	f7fb fe2b 	bl	d94 <__aeabi_fmul>
    513e:	4649      	mov	r1, r9
    5140:	f7fb fad8 	bl	6f4 <__aeabi_fadd>
    5144:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:847
		pfK9x3ij = pthisSV->fK9x3[i];

		for (j = 0; j < 3; j++) // loop over columns of K9x3
		{
			// zero the matrix element fK9x3[i][j]
			*pfK9x3ij = 0.0F;
    5146:	4650      	mov	r0, sl
    5148:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    514a:	2100      	movs	r1, #0
    514c:	1c38      	adds	r0, r7, #0
    514e:	f7fb faa3 	bl	698 <__aeabi_fcmpeq>
    5152:	2800      	cmp	r0, #0
    5154:	d000      	beq.n	5158 <fRun_6DOF_GY_KALMAN+0x5a4>
    5156:	e093      	b.n	5280 <fRun_6DOF_GY_KALMAN+0x6cc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    5158:	238e      	movs	r3, #142	; 0x8e
    515a:	465a      	mov	r2, fp
    515c:	005b      	lsls	r3, r3, #1
    515e:	58d1      	ldr	r1, [r2, r3]
    5160:	1c38      	adds	r0, r7, #0
    5162:	f7fb fe17 	bl	d94 <__aeabi_fmul>
    5166:	2100      	movs	r1, #0
    5168:	f7fb fac4 	bl	6f4 <__aeabi_fadd>
    516c:	4681      	mov	r9, r0
    516e:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    5170:	1c30      	adds	r0, r6, #0
    5172:	2100      	movs	r1, #0
    5174:	f7fb fa90 	bl	698 <__aeabi_fcmpeq>
    5178:	2800      	cmp	r0, #0
    517a:	d10c      	bne.n	5196 <fRun_6DOF_GY_KALMAN+0x5e2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    517c:	23a0      	movs	r3, #160	; 0xa0
    517e:	465a      	mov	r2, fp
    5180:	005b      	lsls	r3, r3, #1
    5182:	58d1      	ldr	r1, [r2, r3]
    5184:	1c30      	adds	r0, r6, #0
    5186:	f7fb fe05 	bl	d94 <__aeabi_fmul>
    518a:	1c01      	adds	r1, r0, #0
    518c:	4648      	mov	r0, r9
    518e:	f7fb fab1 	bl	6f4 <__aeabi_fadd>
    5192:	4681      	mov	r9, r0
    5194:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    5196:	1c28      	adds	r0, r5, #0
    5198:	2100      	movs	r1, #0
    519a:	f7fb fa7d 	bl	698 <__aeabi_fcmpeq>
    519e:	2800      	cmp	r0, #0
    51a0:	d10a      	bne.n	51b8 <fRun_6DOF_GY_KALMAN+0x604>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    51a2:	23b2      	movs	r3, #178	; 0xb2
    51a4:	465a      	mov	r2, fp
    51a6:	005b      	lsls	r3, r3, #1
    51a8:	58d1      	ldr	r1, [r2, r3]
    51aa:	1c28      	adds	r0, r5, #0
    51ac:	f7fb fdf2 	bl	d94 <__aeabi_fmul>
    51b0:	4649      	mov	r1, r9
    51b2:	f7fb fa9f 	bl	6f4 <__aeabi_fadd>
    51b6:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:847
		pfK9x3ij = pthisSV->fK9x3[i];

		for (j = 0; j < 3; j++) // loop over columns of K9x3
		{
			// zero the matrix element fK9x3[i][j]
			*pfK9x3ij = 0.0F;
    51b8:	4650      	mov	r0, sl
    51ba:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    51bc:	2100      	movs	r1, #0
    51be:	1c38      	adds	r0, r7, #0
    51c0:	f7fb fa6a 	bl	698 <__aeabi_fcmpeq>
    51c4:	2800      	cmp	r0, #0
    51c6:	d15e      	bne.n	5286 <fRun_6DOF_GY_KALMAN+0x6d2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    51c8:	2390      	movs	r3, #144	; 0x90
    51ca:	465a      	mov	r2, fp
    51cc:	005b      	lsls	r3, r3, #1
    51ce:	58d1      	ldr	r1, [r2, r3]
    51d0:	1c38      	adds	r0, r7, #0
    51d2:	f7fb fddf 	bl	d94 <__aeabi_fmul>
    51d6:	2100      	movs	r1, #0
    51d8:	f7fb fa8c 	bl	6f4 <__aeabi_fadd>
    51dc:	1c07      	adds	r7, r0, #0
    51de:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    51e0:	1c30      	adds	r0, r6, #0
    51e2:	2100      	movs	r1, #0
    51e4:	f7fb fa58 	bl	698 <__aeabi_fcmpeq>
    51e8:	2800      	cmp	r0, #0
    51ea:	d10c      	bne.n	5206 <fRun_6DOF_GY_KALMAN+0x652>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    51ec:	23a2      	movs	r3, #162	; 0xa2
    51ee:	005b      	lsls	r3, r3, #1
    51f0:	465a      	mov	r2, fp
    51f2:	58d1      	ldr	r1, [r2, r3]
    51f4:	1c30      	adds	r0, r6, #0
    51f6:	f7fb fdcd 	bl	d94 <__aeabi_fmul>
    51fa:	1c01      	adds	r1, r0, #0
    51fc:	1c38      	adds	r0, r7, #0
    51fe:	f7fb fa79 	bl	6f4 <__aeabi_fadd>
    5202:	1c07      	adds	r7, r0, #0
    5204:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    5206:	1c28      	adds	r0, r5, #0
    5208:	2100      	movs	r1, #0
    520a:	f7fb fa45 	bl	698 <__aeabi_fcmpeq>
    520e:	2800      	cmp	r0, #0
    5210:	d10a      	bne.n	5228 <fRun_6DOF_GY_KALMAN+0x674>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    5212:	23b4      	movs	r3, #180	; 0xb4
    5214:	005b      	lsls	r3, r3, #1
    5216:	465a      	mov	r2, fp
    5218:	58d1      	ldr	r1, [r2, r3]
    521a:	1c28      	adds	r0, r5, #0
    521c:	f7fb fdba 	bl	d94 <__aeabi_fmul>
    5220:	1c39      	adds	r1, r7, #0
    5222:	f7fb fa67 	bl	6f4 <__aeabi_fadd>
    5226:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:839

	// set K = P- * C^T * inv(C * P- * C^T + Qv) = Qw * C^T * inv(C * Qw * C^T + Qv)
	// = ftmpA9x3 * P+ (3x3 sub-matrix)
	// ftmpA9x3 = Qw * C^T is sparse but P+ (3x3 sub-matrix) is not
	// K is not symmetric because C is not symmetric
	for (i = 0; i < 9; i++) // loop over rows of K9x3
    5228:	9809      	ldr	r0, [sp, #36]	; 0x24
    522a:	230c      	movs	r3, #12
    522c:	340c      	adds	r4, #12
    522e:	4498      	add	r8, r3
    5230:	42a0      	cmp	r0, r4
    5232:	d02d      	beq.n	5290 <fRun_6DOF_GY_KALMAN+0x6dc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    5234:	4643      	mov	r3, r8
    5236:	681f      	ldr	r7, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:847
		pfK9x3ij = pthisSV->fK9x3[i];

		for (j = 0; j < 3; j++) // loop over columns of K9x3
		{
			// zero the matrix element fK9x3[i][j]
			*pfK9x3ij = 0.0F;
    5238:	4652      	mov	r2, sl
    523a:	6022      	str	r2, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    523c:	1c38      	adds	r0, r7, #0
    523e:	2100      	movs	r1, #0
    5240:	f7fb fa2a 	bl	698 <__aeabi_fcmpeq>
    5244:	2800      	cmp	r0, #0
    5246:	d100      	bne.n	524a <fRun_6DOF_GY_KALMAN+0x696>
    5248:	e749      	b.n	50de <fRun_6DOF_GY_KALMAN+0x52a>
    524a:	2000      	movs	r0, #0
    524c:	4681      	mov	r9, r0
    524e:	e752      	b.n	50f6 <fRun_6DOF_GY_KALMAN+0x542>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:803
					if (*pfC3x9ik == 1.0F)
						*pfPPlus9x9ij += *pftmpA9x3kj;
					else if (*pfC3x9ik == -1.0F)
						*pfPPlus9x9ij -= *pftmpA9x3kj;
					else
						*pfPPlus9x9ij += *pfC3x9ik * *pftmpA9x3kj;
    5250:	4641      	mov	r1, r8
    5252:	1c30      	adds	r0, r6, #0
    5254:	f7fb fd9e 	bl	d94 <__aeabi_fmul>
    5258:	464a      	mov	r2, r9
    525a:	1c01      	adds	r1, r0, #0
    525c:	6810      	ldr	r0, [r2, #0]
    525e:	f7fb fa49 	bl	6f4 <__aeabi_fadd>
    5262:	464b      	mov	r3, r9
    5264:	6018      	str	r0, [r3, #0]
    5266:	e6a6      	b.n	4fb6 <fRun_6DOF_GY_KALMAN+0x402>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:759
					if (*pfC3x9jk == 1.0F)
						*pftmpA9x3ij += *pfQw9x9ik;
					else if (*pfC3x9jk == -1.0F)
						*pftmpA9x3ij -= *pfQw9x9ik;
					else
						*pftmpA9x3ij += *pfQw9x9ik * *pfC3x9jk;
    5268:	4649      	mov	r1, r9
    526a:	1c28      	adds	r0, r5, #0
    526c:	f7fb fd92 	bl	d94 <__aeabi_fmul>
    5270:	4642      	mov	r2, r8
    5272:	1c01      	adds	r1, r0, #0
    5274:	6810      	ldr	r0, [r2, #0]
    5276:	f7fb fa3d 	bl	6f4 <__aeabi_fadd>
    527a:	4643      	mov	r3, r8
    527c:	6018      	str	r0, [r3, #0]
    527e:	e620      	b.n	4ec2 <fRun_6DOF_GY_KALMAN+0x30e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    5280:	2000      	movs	r0, #0
    5282:	4681      	mov	r9, r0
    5284:	e774      	b.n	5170 <fRun_6DOF_GY_KALMAN+0x5bc>
    5286:	2700      	movs	r7, #0
    5288:	e7aa      	b.n	51e0 <fRun_6DOF_GY_KALMAN+0x62c>
    528a:	46c0      	nop			; (mov r8, r8)
    528c:	bf800000 	.word	0xbf800000
    5290:	4659      	mov	r1, fp
    5292:	23f0      	movs	r3, #240	; 0xf0
    5294:	58cd      	ldr	r5, [r1, r3]
    5296:	23f4      	movs	r3, #244	; 0xf4
    5298:	58cc      	ldr	r4, [r1, r3]
    529a:	23f8      	movs	r3, #248	; 0xf8
    529c:	58cf      	ldr	r7, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:889

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    529e:	23a0      	movs	r3, #160	; 0xa0
    52a0:	009b      	lsls	r3, r3, #2
    52a2:	58c9      	ldr	r1, [r1, r3]
    52a4:	1c28      	adds	r0, r5, #0
    52a6:	f7fb fd75 	bl	d94 <__aeabi_fmul>
    52aa:	2100      	movs	r1, #0
    52ac:	f7fb fa22 	bl	6f4 <__aeabi_fadd>
    52b0:	23a1      	movs	r3, #161	; 0xa1
    52b2:	009b      	lsls	r3, r3, #2
    52b4:	465a      	mov	r2, fp
    52b6:	58d1      	ldr	r1, [r2, r3]
    52b8:	1c06      	adds	r6, r0, #0
    52ba:	1c20      	adds	r0, r4, #0
    52bc:	f7fb fd6a 	bl	d94 <__aeabi_fmul>
    52c0:	1c01      	adds	r1, r0, #0
    52c2:	1c30      	adds	r0, r6, #0
    52c4:	f7fb fa16 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    52c8:	23a9      	movs	r3, #169	; 0xa9
    52ca:	009b      	lsls	r3, r3, #2
    52cc:	465a      	mov	r2, fp
    52ce:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:889

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    52d0:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    52d2:	1c28      	adds	r0, r5, #0
    52d4:	f7fb fd5e 	bl	d94 <__aeabi_fmul>
    52d8:	2100      	movs	r1, #0
    52da:	f7fb fa0b 	bl	6f4 <__aeabi_fadd>
    52de:	23aa      	movs	r3, #170	; 0xaa
    52e0:	009b      	lsls	r3, r3, #2
    52e2:	465a      	mov	r2, fp
    52e4:	58d1      	ldr	r1, [r2, r3]
    52e6:	1c06      	adds	r6, r0, #0
    52e8:	1c20      	adds	r0, r4, #0
    52ea:	f7fb fd53 	bl	d94 <__aeabi_fmul>
    52ee:	1c01      	adds	r1, r0, #0
    52f0:	1c30      	adds	r0, r6, #0
    52f2:	f7fb f9ff 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:888
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = 0.0F;

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
    52f6:	2397      	movs	r3, #151	; 0x97
    52f8:	009b      	lsls	r3, r3, #2
    52fa:	465a      	mov	r2, fp
    52fc:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    52fe:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:888
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = 0.0F;

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
    5300:	1c28      	adds	r0, r5, #0
    5302:	f7fb fd47 	bl	d94 <__aeabi_fmul>
    5306:	2100      	movs	r1, #0
    5308:	f7fb f9f4 	bl	6f4 <__aeabi_fadd>
    530c:	2398      	movs	r3, #152	; 0x98
    530e:	009b      	lsls	r3, r3, #2
    5310:	465a      	mov	r2, fp
    5312:	58d1      	ldr	r1, [r2, r3]
    5314:	1c06      	adds	r6, r0, #0
    5316:	1c20      	adds	r0, r4, #0
    5318:	f7fb fd3c 	bl	d94 <__aeabi_fmul>
    531c:	1c01      	adds	r1, r0, #0
    531e:	1c30      	adds	r0, r6, #0
    5320:	f7fb f9e8 	bl	6f4 <__aeabi_fadd>
    5324:	2399      	movs	r3, #153	; 0x99
    5326:	009b      	lsls	r3, r3, #2
    5328:	465a      	mov	r2, fp
    532a:	58d1      	ldr	r1, [r2, r3]
    532c:	1c06      	adds	r6, r0, #0
    532e:	1c38      	adds	r0, r7, #0
    5330:	f7fb fd30 	bl	d94 <__aeabi_fmul>
    5334:	1c01      	adds	r1, r0, #0
    5336:	1c30      	adds	r0, r6, #0
    5338:	f7fb f9dc 	bl	6f4 <__aeabi_fadd>
    533c:	465b      	mov	r3, fp
    533e:	6718      	str	r0, [r3, #112]	; 0x70
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:889
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    5340:	23a2      	movs	r3, #162	; 0xa2
    5342:	009b      	lsls	r3, r3, #2
    5344:	465a      	mov	r2, fp
    5346:	58d1      	ldr	r1, [r2, r3]
    5348:	1c38      	adds	r0, r7, #0
    534a:	f7fb fd23 	bl	d94 <__aeabi_fmul>
    534e:	1c01      	adds	r1, r0, #0
    5350:	4640      	mov	r0, r8
    5352:	f7fb f9cf 	bl	6f4 <__aeabi_fadd>
    5356:	465b      	mov	r3, fp
    5358:	67d8      	str	r0, [r3, #124]	; 0x7c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    535a:	23ab      	movs	r3, #171	; 0xab
    535c:	009b      	lsls	r3, r3, #2
    535e:	465a      	mov	r2, fp
    5360:	20e4      	movs	r0, #228	; 0xe4
    5362:	58d1      	ldr	r1, [r2, r3]
    5364:	4682      	mov	sl, r0
    5366:	1c38      	adds	r0, r7, #0
    5368:	f7fb fd14 	bl	d94 <__aeabi_fmul>
    536c:	1c01      	adds	r1, r0, #0
    536e:	4648      	mov	r0, r9
    5370:	f7fb f9c0 	bl	6f4 <__aeabi_fadd>
    5374:	465b      	mov	r3, fp
    5376:	4453      	add	r3, sl
    5378:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:889

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    537a:	23a3      	movs	r3, #163	; 0xa3
    537c:	009b      	lsls	r3, r3, #2
    537e:	465a      	mov	r2, fp
    5380:	58d1      	ldr	r1, [r2, r3]
    5382:	1c28      	adds	r0, r5, #0
    5384:	f7fb fd06 	bl	d94 <__aeabi_fmul>
    5388:	2100      	movs	r1, #0
    538a:	f7fb f9b3 	bl	6f4 <__aeabi_fadd>
    538e:	23a4      	movs	r3, #164	; 0xa4
    5390:	009b      	lsls	r3, r3, #2
    5392:	465a      	mov	r2, fp
    5394:	58d1      	ldr	r1, [r2, r3]
    5396:	1c06      	adds	r6, r0, #0
    5398:	1c20      	adds	r0, r4, #0
    539a:	f7fb fcfb 	bl	d94 <__aeabi_fmul>
    539e:	1c01      	adds	r1, r0, #0
    53a0:	1c30      	adds	r0, r6, #0
    53a2:	f7fb f9a7 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    53a6:	23ac      	movs	r3, #172	; 0xac
    53a8:	009b      	lsls	r3, r3, #2
    53aa:	465a      	mov	r2, fp
    53ac:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:889

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    53ae:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    53b0:	1c28      	adds	r0, r5, #0
    53b2:	f7fb fcef 	bl	d94 <__aeabi_fmul>
    53b6:	2100      	movs	r1, #0
    53b8:	f7fb f99c 	bl	6f4 <__aeabi_fadd>
    53bc:	23ad      	movs	r3, #173	; 0xad
    53be:	009b      	lsls	r3, r3, #2
    53c0:	465a      	mov	r2, fp
    53c2:	58d1      	ldr	r1, [r2, r3]
    53c4:	1c06      	adds	r6, r0, #0
    53c6:	1c20      	adds	r0, r4, #0
    53c8:	f7fb fce4 	bl	d94 <__aeabi_fmul>
    53cc:	1c01      	adds	r1, r0, #0
    53ce:	1c30      	adds	r0, r6, #0
    53d0:	f7fb f990 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:888
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = 0.0F;

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
    53d4:	239a      	movs	r3, #154	; 0x9a
    53d6:	009b      	lsls	r3, r3, #2
    53d8:	465a      	mov	r2, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    53da:	900c      	str	r0, [sp, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:888
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = 0.0F;

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
    53dc:	58d1      	ldr	r1, [r2, r3]
    53de:	1c28      	adds	r0, r5, #0
    53e0:	f7fb fcd8 	bl	d94 <__aeabi_fmul>
    53e4:	2100      	movs	r1, #0
    53e6:	f7fb f985 	bl	6f4 <__aeabi_fadd>
    53ea:	239b      	movs	r3, #155	; 0x9b
    53ec:	009b      	lsls	r3, r3, #2
    53ee:	465a      	mov	r2, fp
    53f0:	58d1      	ldr	r1, [r2, r3]
    53f2:	1c06      	adds	r6, r0, #0
    53f4:	1c20      	adds	r0, r4, #0
    53f6:	f7fb fccd 	bl	d94 <__aeabi_fmul>
    53fa:	1c01      	adds	r1, r0, #0
    53fc:	1c30      	adds	r0, r6, #0
    53fe:	f7fb f979 	bl	6f4 <__aeabi_fadd>
    5402:	239c      	movs	r3, #156	; 0x9c
    5404:	009b      	lsls	r3, r3, #2
    5406:	465a      	mov	r2, fp
    5408:	58d1      	ldr	r1, [r2, r3]
    540a:	1c06      	adds	r6, r0, #0
    540c:	1c38      	adds	r0, r7, #0
    540e:	f7fb fcc1 	bl	d94 <__aeabi_fmul>
    5412:	1c01      	adds	r1, r0, #0
    5414:	1c30      	adds	r0, r6, #0
    5416:	f7fb f96d 	bl	6f4 <__aeabi_fadd>
    541a:	465b      	mov	r3, fp
    541c:	6758      	str	r0, [r3, #116]	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:889
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    541e:	23a5      	movs	r3, #165	; 0xa5
    5420:	009b      	lsls	r3, r3, #2
    5422:	465a      	mov	r2, fp
    5424:	2080      	movs	r0, #128	; 0x80
    5426:	58d1      	ldr	r1, [r2, r3]
    5428:	4681      	mov	r9, r0
    542a:	1c38      	adds	r0, r7, #0
    542c:	f7fb fcb2 	bl	d94 <__aeabi_fmul>
    5430:	1c01      	adds	r1, r0, #0
    5432:	4640      	mov	r0, r8
    5434:	f7fb f95e 	bl	6f4 <__aeabi_fadd>
    5438:	465b      	mov	r3, fp
    543a:	444b      	add	r3, r9
    543c:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    543e:	23ae      	movs	r3, #174	; 0xae
    5440:	009b      	lsls	r3, r3, #2
    5442:	465a      	mov	r2, fp
    5444:	20e8      	movs	r0, #232	; 0xe8
    5446:	58d1      	ldr	r1, [r2, r3]
    5448:	4680      	mov	r8, r0
    544a:	1c38      	adds	r0, r7, #0
    544c:	f7fb fca2 	bl	d94 <__aeabi_fmul>
    5450:	1c01      	adds	r1, r0, #0
    5452:	980c      	ldr	r0, [sp, #48]	; 0x30
    5454:	f7fb f94e 	bl	6f4 <__aeabi_fadd>
    5458:	465b      	mov	r3, fp
    545a:	4443      	add	r3, r8
    545c:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:889

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    545e:	23a6      	movs	r3, #166	; 0xa6
    5460:	009b      	lsls	r3, r3, #2
    5462:	465a      	mov	r2, fp
    5464:	58d1      	ldr	r1, [r2, r3]
    5466:	1c28      	adds	r0, r5, #0
    5468:	f7fb fc94 	bl	d94 <__aeabi_fmul>
    546c:	2100      	movs	r1, #0
    546e:	f7fb f941 	bl	6f4 <__aeabi_fadd>
    5472:	23a7      	movs	r3, #167	; 0xa7
    5474:	009b      	lsls	r3, r3, #2
    5476:	465a      	mov	r2, fp
    5478:	58d1      	ldr	r1, [r2, r3]
    547a:	1c06      	adds	r6, r0, #0
    547c:	1c20      	adds	r0, r4, #0
    547e:	f7fb fc89 	bl	d94 <__aeabi_fmul>
    5482:	1c01      	adds	r1, r0, #0
    5484:	1c30      	adds	r0, r6, #0
    5486:	f7fb f935 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    548a:	23af      	movs	r3, #175	; 0xaf
    548c:	009b      	lsls	r3, r3, #2
    548e:	465a      	mov	r2, fp
    5490:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:889

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    5492:	900c      	str	r0, [sp, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    5494:	1c28      	adds	r0, r5, #0
    5496:	f7fb fc7d 	bl	d94 <__aeabi_fmul>
    549a:	2100      	movs	r1, #0
    549c:	f7fb f92a 	bl	6f4 <__aeabi_fadd>
    54a0:	23b0      	movs	r3, #176	; 0xb0
    54a2:	009b      	lsls	r3, r3, #2
    54a4:	465a      	mov	r2, fp
    54a6:	58d1      	ldr	r1, [r2, r3]
    54a8:	1c06      	adds	r6, r0, #0
    54aa:	1c20      	adds	r0, r4, #0
    54ac:	f7fb fc72 	bl	d94 <__aeabi_fmul>
    54b0:	1c01      	adds	r1, r0, #0
    54b2:	1c30      	adds	r0, r6, #0
    54b4:	f7fb f91e 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:888
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = 0.0F;

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
    54b8:	239d      	movs	r3, #157	; 0x9d
    54ba:	465a      	mov	r2, fp
    54bc:	009b      	lsls	r3, r3, #2
    54be:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    54c0:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:888
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = 0.0F;

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
    54c2:	1c28      	adds	r0, r5, #0
    54c4:	f7fb fc66 	bl	d94 <__aeabi_fmul>
    54c8:	2100      	movs	r1, #0
    54ca:	f7fb f913 	bl	6f4 <__aeabi_fadd>
    54ce:	239e      	movs	r3, #158	; 0x9e
    54d0:	009b      	lsls	r3, r3, #2
    54d2:	1c05      	adds	r5, r0, #0
    54d4:	1c20      	adds	r0, r4, #0
    54d6:	465c      	mov	r4, fp
    54d8:	58e1      	ldr	r1, [r4, r3]
    54da:	f7fb fc5b 	bl	d94 <__aeabi_fmul>
    54de:	1c01      	adds	r1, r0, #0
    54e0:	1c28      	adds	r0, r5, #0
    54e2:	f7fb f907 	bl	6f4 <__aeabi_fadd>
    54e6:	239f      	movs	r3, #159	; 0x9f
    54e8:	009b      	lsls	r3, r3, #2
    54ea:	465a      	mov	r2, fp
    54ec:	58d1      	ldr	r1, [r2, r3]
    54ee:	1c04      	adds	r4, r0, #0
    54f0:	1c38      	adds	r0, r7, #0
    54f2:	f7fb fc4f 	bl	d94 <__aeabi_fmul>
    54f6:	1c01      	adds	r1, r0, #0
    54f8:	1c20      	adds	r0, r4, #0
    54fa:	f7fb f8fb 	bl	6f4 <__aeabi_fadd>
    54fe:	465b      	mov	r3, fp
    5500:	6798      	str	r0, [r3, #120]	; 0x78
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:889
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    5502:	23a8      	movs	r3, #168	; 0xa8
    5504:	009b      	lsls	r3, r3, #2
    5506:	465a      	mov	r2, fp
    5508:	58d1      	ldr	r1, [r2, r3]
    550a:	1c38      	adds	r0, r7, #0
    550c:	f7fb fc42 	bl	d94 <__aeabi_fmul>
    5510:	1c01      	adds	r1, r0, #0
    5512:	980c      	ldr	r0, [sp, #48]	; 0x30
    5514:	f7fb f8ee 	bl	6f4 <__aeabi_fadd>
    5518:	2484      	movs	r4, #132	; 0x84
    551a:	465b      	mov	r3, fp
    551c:	5118      	str	r0, [r3, r4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    551e:	23b1      	movs	r3, #177	; 0xb1
    5520:	009b      	lsls	r3, r3, #2
    5522:	465a      	mov	r2, fp
    5524:	58d1      	ldr	r1, [r2, r3]
    5526:	1c38      	adds	r0, r7, #0
    5528:	f7fb fc34 	bl	d94 <__aeabi_fmul>
    552c:	1c01      	adds	r1, r0, #0
    552e:	1c30      	adds	r0, r6, #0
    5530:	f7fb f8e0 	bl	6f4 <__aeabi_fadd>
    5534:	25ec      	movs	r5, #236	; 0xec
    5536:	465b      	mov	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:899
	// *********************************************************************************
	// apply the a posteriori error corrections to the a posteriori state vector
	// *********************************************************************************

	// get the a posteriori delta quaternion
	fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), pthisSV->fThErrPl, -1.0F);
    5538:	4659      	mov	r1, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    553a:	5158      	str	r0, [r3, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:899
	// *********************************************************************************
	// apply the a posteriori error corrections to the a posteriori state vector
	// *********************************************************************************

	// get the a posteriori delta quaternion
	fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), pthisSV->fThErrPl, -1.0F);
    553c:	3170      	adds	r1, #112	; 0x70
    553e:	9806      	ldr	r0, [sp, #24]
    5540:	4aa3      	ldr	r2, [pc, #652]	; (57d0 <fRun_6DOF_GY_KALMAN+0xc1c>)
    5542:	f007 ff6f 	bl	d424 <fQuaternionFromRotationVectorDeg>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:903

	// compute the a posteriori orientation quaternion fqPl = fqMi * Deltaq(-thetae+)
	// the resulting quaternion may have negative scalar component q0
	qAeqBxC(&(pthisSV->fqPl), &(pthisSV->fqMi), &(pthisSV->fDeltaq));
    5546:	9a06      	ldr	r2, [sp, #24]
    5548:	9908      	ldr	r1, [sp, #32]
    554a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    554c:	f008 fc4c 	bl	dde8 <qAeqBxC>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:907

	// normalize the a posteriori orientation quaternion to stop error propagation 
	// the renormalization function ensures that the scalar component q0 is non-negative
	fqAeqNormqA(&(pthisSV->fqPl));
    5550:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5552:	f008 fd89 	bl	e068 <fqAeqNormqA>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:910

	// compute the a posteriori rotation matrix from the a posteriori quaternion
	fRotationMatrixFromQuaternion(pthisSV->fRPl, &(pthisSV->fqPl));
    5556:	980d      	ldr	r0, [sp, #52]	; 0x34
    5558:	990b      	ldr	r1, [sp, #44]	; 0x2c
    555a:	f008 f8cd 	bl	d6f8 <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:913

	// compute the rotation vector from the a posteriori quaternion
	fRotationVectorDegFromQuaternion(&(pthisSV->fqPl), pthisSV->fRVecPl);
    555e:	4659      	mov	r1, fp
    5560:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5562:	3148      	adds	r1, #72	; 0x48
    5564:	f008 f958 	bl	d818 <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:919

	// update the a posteriori gyro offset vector b+ and linear acceleration vector a+ (sensor frame)
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    5568:	4659      	mov	r1, fp
    556a:	6e48      	ldr	r0, [r1, #100]	; 0x64
    556c:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
    556e:	f7fb fd3b 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:921
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    5572:	2384      	movs	r3, #132	; 0x84
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:919

	// update the a posteriori gyro offset vector b+ and linear acceleration vector a+ (sensor frame)
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    5574:	465a      	mov	r2, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:921
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    5576:	005b      	lsls	r3, r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:919

	// update the a posteriori gyro offset vector b+ and linear acceleration vector a+ (sensor frame)
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    5578:	6650      	str	r0, [r2, #100]	; 0x64
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:921
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    557a:	58d0      	ldr	r0, [r2, r3]
    557c:	465b      	mov	r3, fp
    557e:	4453      	add	r3, sl
    5580:	6819      	ldr	r1, [r3, #0]
    5582:	f7fb fd31 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:919

	// update the a posteriori gyro offset vector b+ and linear acceleration vector a+ (sensor frame)
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    5586:	465a      	mov	r2, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:921
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    5588:	23d8      	movs	r3, #216	; 0xd8
    558a:	4659      	mov	r1, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:919

	// update the a posteriori gyro offset vector b+ and linear acceleration vector a+ (sensor frame)
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    558c:	444a      	add	r2, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:921
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    558e:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:919

	// update the a posteriori gyro offset vector b+ and linear acceleration vector a+ (sensor frame)
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    5590:	6e88      	ldr	r0, [r1, #104]	; 0x68
    5592:	6811      	ldr	r1, [r2, #0]
    5594:	f7fb fd28 	bl	fe8 <__aeabi_fsub>
    5598:	465b      	mov	r3, fp
    559a:	6698      	str	r0, [r3, #104]	; 0x68
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:921
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    559c:	465a      	mov	r2, fp
    559e:	2386      	movs	r3, #134	; 0x86
    55a0:	4442      	add	r2, r8
    55a2:	005b      	lsls	r3, r3, #1
    55a4:	4659      	mov	r1, fp
    55a6:	58c8      	ldr	r0, [r1, r3]
    55a8:	6811      	ldr	r1, [r2, #0]
    55aa:	f7fb fd1d 	bl	fe8 <__aeabi_fsub>
    55ae:	23dc      	movs	r3, #220	; 0xdc
    55b0:	4659      	mov	r1, fp
    55b2:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:919

	// update the a posteriori gyro offset vector b+ and linear acceleration vector a+ (sensor frame)
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    55b4:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    55b6:	5909      	ldr	r1, [r1, r4]
    55b8:	f7fb fd16 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:921
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    55bc:	2388      	movs	r3, #136	; 0x88
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:919

	// update the a posteriori gyro offset vector b+ and linear acceleration vector a+ (sensor frame)
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    55be:	465a      	mov	r2, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:921
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    55c0:	005b      	lsls	r3, r3, #1
    55c2:	5951      	ldr	r1, [r2, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:919

	// update the a posteriori gyro offset vector b+ and linear acceleration vector a+ (sensor frame)
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    55c4:	66d0      	str	r0, [r2, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:921
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    55c6:	58d0      	ldr	r0, [r2, r3]
    55c8:	f7fb fd0e 	bl	fe8 <__aeabi_fsub>
    55cc:	465c      	mov	r4, fp
    55ce:	23e0      	movs	r3, #224	; 0xe0
    55d0:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:931
	// *********************************************************************************

	if (ithisCoordSystem == NED)
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
    55d2:	465b      	mov	r3, fp
    55d4:	330c      	adds	r3, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:928

	// *********************************************************************************
	// compute the a posteriori Euler angles from the orientation matrix
	// *********************************************************************************

	if (ithisCoordSystem == NED)
    55d6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:931
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
    55d8:	465a      	mov	r2, fp
    55da:	9300      	str	r3, [sp, #0]
    55dc:	3304      	adds	r3, #4
    55de:	9301      	str	r3, [sp, #4]
    55e0:	3204      	adds	r2, #4
    55e2:	980d      	ldr	r0, [sp, #52]	; 0x34
    55e4:	4659      	mov	r1, fp
    55e6:	3b08      	subs	r3, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:928

	// *********************************************************************************
	// compute the a posteriori Euler angles from the orientation matrix
	// *********************************************************************************

	if (ithisCoordSystem == NED)
    55e8:	2c00      	cmp	r4, #0
    55ea:	d100      	bne.n	55ee <fRun_6DOF_GY_KALMAN+0xa3a>
    55ec:	e2b7      	b.n	5b5e <fRun_6DOF_GY_KALMAN+0xfaa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:934
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
				&(pthisSV->fRhoPl), &(pthisSV->fChiPl));
	}
	else if (ithisCoordSystem == ANDROID)
    55ee:	2c01      	cmp	r4, #1
    55f0:	d100      	bne.n	55f4 <fRun_6DOF_GY_KALMAN+0xa40>
    55f2:	e2bd      	b.n	5b70 <fRun_6DOF_GY_KALMAN+0xfbc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:943
				&(pthisSV->fRhoPl), &(pthisSV->fChiPl));
	}
	else
	{
		// calculate Win8 Euler angles
		fWin8AnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
    55f4:	f007 fe58 	bl	d2a8 <fWin8AnglesDegFromRotationMatrix>
    55f8:	20d4      	movs	r0, #212	; 0xd4
    55fa:	0040      	lsls	r0, r0, #1
    55fc:	9c07      	ldr	r4, [sp, #28]
    55fe:	1c01      	adds	r1, r0, #0
    5600:	4459      	add	r1, fp
    5602:	465b      	mov	r3, fp
    5604:	9107      	str	r1, [sp, #28]
    5606:	9308      	str	r3, [sp, #32]
    5608:	46a3      	mov	fp, r4
    560a:	21b4      	movs	r1, #180	; 0xb4
    560c:	0089      	lsls	r1, r1, #2
    560e:	2024      	movs	r0, #36	; 0x24
    5610:	4240      	negs	r0, r0
    5612:	1c0c      	adds	r4, r1, #0
    5614:	21bd      	movs	r1, #189	; 0xbd
    5616:	4681      	mov	r9, r0
    5618:	0089      	lsls	r1, r1, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    561a:	9809      	ldr	r0, [sp, #36]	; 0x24
    561c:	445c      	add	r4, fp
    561e:	4688      	mov	r8, r1
    5620:	44d9      	add	r9, fp
    5622:	9406      	str	r4, [sp, #24]
    5624:	4682      	mov	sl, r0
    5626:	44d8      	add	r8, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:965
		pfPPlus9x9ij = pthisSV->fPPlus9x9[i];

		for (j = 0; j < 9; j++) // loop over the columns of P+
		{
			// zero P+[i][j] 
			*pfPPlus9x9ij = 0.0F;
    5628:	2300      	movs	r3, #0
    562a:	464a      	mov	r2, r9
    562c:	6013      	str	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:971

			// initialize pfC3x9ik for current i, k=0
			pfC3x9ik = pthisSV->fC3x9[i];

			// initialize pfQw9x9kj for current j, k=0
			pfQw9x9kj = &pthisSV->fQw9x9[0][j];
    562e:	4655      	mov	r5, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:968
		{
			// zero P+[i][j] 
			*pfPPlus9x9ij = 0.0F;

			// initialize pfC3x9ik for current i, k=0
			pfC3x9ik = pthisSV->fC3x9[i];
    5630:	9c06      	ldr	r4, [sp, #24]
    5632:	4647      	mov	r7, r8
    5634:	e00a      	b.n	564c <fRun_6DOF_GY_KALMAN+0xa98>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:979
			for (k = 0; k < 9; k++)
			{
				if ((*pfC3x9ik != 0.0F) && (*pfQw9x9kj != 0.0F))
				{
					if (*pfC3x9ik == 1.0F)
						*pfPPlus9x9ij += *pfQw9x9kj;
    5636:	4649      	mov	r1, r9
    5638:	6808      	ldr	r0, [r1, #0]
    563a:	4641      	mov	r1, r8
    563c:	f7fb f85a 	bl	6f4 <__aeabi_fadd>
    5640:	464a      	mov	r2, r9
    5642:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:987
					else
						*pfPPlus9x9ij += *pfC3x9ik * *pfQw9x9kj;
				}

				// update pfC3x9ik and pfQw9x9kj for next iteration of k
				pfC3x9ik++;
    5644:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:988
				pfQw9x9kj += 9;
    5646:	3524      	adds	r5, #36	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:974

			// initialize pfQw9x9kj for current j, k=0
			pfQw9x9kj = &pthisSV->fQw9x9[0][j];

			// sum matrix products over inner loop over k
			for (k = 0; k < 9; k++)
    5648:	42a7      	cmp	r7, r4
    564a:	d026      	beq.n	569a <fRun_6DOF_GY_KALMAN+0xae6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:976
			{
				if ((*pfC3x9ik != 0.0F) && (*pfQw9x9kj != 0.0F))
    564c:	6826      	ldr	r6, [r4, #0]
    564e:	2100      	movs	r1, #0
    5650:	1c30      	adds	r0, r6, #0
    5652:	f7fb f821 	bl	698 <__aeabi_fcmpeq>
    5656:	2800      	cmp	r0, #0
    5658:	d1f4      	bne.n	5644 <fRun_6DOF_GY_KALMAN+0xa90>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:976 (discriminator 1)
    565a:	6828      	ldr	r0, [r5, #0]
    565c:	2100      	movs	r1, #0
    565e:	4680      	mov	r8, r0
    5660:	f7fb f81a 	bl	698 <__aeabi_fcmpeq>
    5664:	2800      	cmp	r0, #0
    5666:	d1ed      	bne.n	5644 <fRun_6DOF_GY_KALMAN+0xa90>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:978
				{
					if (*pfC3x9ik == 1.0F)
    5668:	21fe      	movs	r1, #254	; 0xfe
    566a:	1c30      	adds	r0, r6, #0
    566c:	0589      	lsls	r1, r1, #22
    566e:	f7fb f813 	bl	698 <__aeabi_fcmpeq>
    5672:	2800      	cmp	r0, #0
    5674:	d1df      	bne.n	5636 <fRun_6DOF_GY_KALMAN+0xa82>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:980
						*pfPPlus9x9ij += *pfQw9x9kj;
					else if (*pfC3x9ik == -1.0F)
    5676:	1c30      	adds	r0, r6, #0
    5678:	4955      	ldr	r1, [pc, #340]	; (57d0 <fRun_6DOF_GY_KALMAN+0xc1c>)
    567a:	f7fb f80d 	bl	698 <__aeabi_fcmpeq>
    567e:	2800      	cmp	r0, #0
    5680:	d100      	bne.n	5684 <fRun_6DOF_GY_KALMAN+0xad0>
    5682:	e099      	b.n	57b8 <fRun_6DOF_GY_KALMAN+0xc04>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:981
						*pfPPlus9x9ij -= *pfQw9x9kj;
    5684:	464b      	mov	r3, r9
    5686:	6818      	ldr	r0, [r3, #0]
    5688:	4641      	mov	r1, r8
    568a:	f7fb fcad 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:987
					else
						*pfPPlus9x9ij += *pfC3x9ik * *pfQw9x9kj;
				}

				// update pfC3x9ik and pfQw9x9kj for next iteration of k
				pfC3x9ik++;
    568e:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:981
				if ((*pfC3x9ik != 0.0F) && (*pfQw9x9kj != 0.0F))
				{
					if (*pfC3x9ik == 1.0F)
						*pfPPlus9x9ij += *pfQw9x9kj;
					else if (*pfC3x9ik == -1.0F)
						*pfPPlus9x9ij -= *pfQw9x9kj;
    5690:	4649      	mov	r1, r9
    5692:	6008      	str	r0, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:988
						*pfPPlus9x9ij += *pfC3x9ik * *pfQw9x9kj;
				}

				// update pfC3x9ik and pfQw9x9kj for next iteration of k
				pfC3x9ik++;
				pfQw9x9kj += 9;
    5694:	3524      	adds	r5, #36	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:974

			// initialize pfQw9x9kj for current j, k=0
			pfQw9x9kj = &pthisSV->fQw9x9[0][j];

			// sum matrix products over inner loop over k
			for (k = 0; k < 9; k++)
    5696:	42a7      	cmp	r7, r4
    5698:	d1d8      	bne.n	564c <fRun_6DOF_GY_KALMAN+0xa98>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:993
				pfQw9x9kj += 9;

			} // end of loop over k

			// increment pfPPlus9x9ij for next iteration of j
			pfPPlus9x9ij++;
    569a:	2404      	movs	r4, #4
    569c:	44a1      	add	r9, r4
    569e:	46b8      	mov	r8, r7
    56a0:	44a2      	add	sl, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:962
	for (i = 0; i < 3; i++) // loop over the rows of P+
	{
		// initialize pfPPlus9x9ij for current i, j=0
		pfPPlus9x9ij = pthisSV->fPPlus9x9[i];

		for (j = 0; j < 9; j++) // loop over the columns of P+
    56a2:	45d9      	cmp	r9, fp
    56a4:	d1c0      	bne.n	5628 <fRun_6DOF_GY_KALMAN+0xa74>
    56a6:	2024      	movs	r0, #36	; 0x24
    56a8:	4683      	mov	fp, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:957
	// ***********************************************************************************

	// set P+ (3x9 scratch sub-matrix) to the product C (3x9) * Qw (9x9)
	// where both C and Qw are sparse and C has a significant number of +1 entries
	// the resulting matrix is sparse but not symmetric
	for (i = 0; i < 3; i++) // loop over the rows of P+
    56aa:	9c07      	ldr	r4, [sp, #28]
    56ac:	44cb      	add	fp, r9
    56ae:	45a3      	cmp	fp, r4
    56b0:	d1ab      	bne.n	560a <fRun_6DOF_GY_KALMAN+0xa56>
    56b2:	990a      	ldr	r1, [sp, #40]	; 0x28
    56b4:	9808      	ldr	r0, [sp, #32]
    56b6:	4688      	mov	r8, r1
    56b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    56ba:	990f      	ldr	r1, [sp, #60]	; 0x3c
    56bc:	2300      	movs	r3, #0
    56be:	4692      	mov	sl, r2
    56c0:	4699      	mov	r9, r3
    56c2:	9006      	str	r0, [sp, #24]
    56c4:	468b      	mov	fp, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1005
	// where working array P+ (6x12 sub-matrix) is sparse but K is not sparse
	// only on and above diagonal terms of P+ are computed since P+ is symmetric
	for (i = 0; i < 9; i++)
	{
		// initialize pfQw9x9ij for i, j=i
		pfQw9x9ij = pthisSV->fQw9x9[i] + i;
    56c6:	464e      	mov	r6, r9
    56c8:	4654      	mov	r4, sl
    56ca:	b275      	sxtb	r5, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1013
		{
			// initialize pfK9x3ik for i, k=0
			pfK9x3ik = pthisSV->fK9x3[i];

			// initialize pfPPlus9x9kj for j, k=0
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;
    56cc:	00ad      	lsls	r5, r5, #2
    56ce:	445d      	add	r5, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1019

			// compute on and above diagonal matrix entry
			for (k = 0; k < 3; k++)
			{
				// check for non-zero values since P+ (3x9 scratch sub-matrix) is sparse
				if (*pfPPlus9x9kj != 0.0F)
    56d0:	682f      	ldr	r7, [r5, #0]
    56d2:	2100      	movs	r1, #0
    56d4:	1c38      	adds	r0, r7, #0
    56d6:	f7fa ffdf 	bl	698 <__aeabi_fcmpeq>
    56da:	2800      	cmp	r0, #0
    56dc:	d109      	bne.n	56f2 <fRun_6DOF_GY_KALMAN+0xb3e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1021
				{
					*pfQw9x9ij -= *pfK9x3ik * *pfPPlus9x9kj;
    56de:	4643      	mov	r3, r8
    56e0:	6819      	ldr	r1, [r3, #0]
    56e2:	1c38      	adds	r0, r7, #0
    56e4:	f7fb fb56 	bl	d94 <__aeabi_fmul>
    56e8:	1c01      	adds	r1, r0, #0
    56ea:	6820      	ldr	r0, [r4, #0]
    56ec:	f7fb fc7c 	bl	fe8 <__aeabi_fsub>
    56f0:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1019

			// compute on and above diagonal matrix entry
			for (k = 0; k < 3; k++)
			{
				// check for non-zero values since P+ (3x9 scratch sub-matrix) is sparse
				if (*pfPPlus9x9kj != 0.0F)
    56f2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    56f4:	2100      	movs	r1, #0
    56f6:	1c38      	adds	r0, r7, #0
    56f8:	f7fa ffce 	bl	698 <__aeabi_fcmpeq>
    56fc:	2800      	cmp	r0, #0
    56fe:	d109      	bne.n	5714 <fRun_6DOF_GY_KALMAN+0xb60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1021
				{
					*pfQw9x9ij -= *pfK9x3ik * *pfPPlus9x9kj;
    5700:	4642      	mov	r2, r8
    5702:	6851      	ldr	r1, [r2, #4]
    5704:	1c38      	adds	r0, r7, #0
    5706:	f7fb fb45 	bl	d94 <__aeabi_fmul>
    570a:	1c01      	adds	r1, r0, #0
    570c:	6820      	ldr	r0, [r4, #0]
    570e:	f7fb fc6b 	bl	fe8 <__aeabi_fsub>
    5712:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1019

			// compute on and above diagonal matrix entry
			for (k = 0; k < 3; k++)
			{
				// check for non-zero values since P+ (3x9 scratch sub-matrix) is sparse
				if (*pfPPlus9x9kj != 0.0F)
    5714:	6cad      	ldr	r5, [r5, #72]	; 0x48
    5716:	2100      	movs	r1, #0
    5718:	1c28      	adds	r0, r5, #0
    571a:	f7fa ffbd 	bl	698 <__aeabi_fcmpeq>
    571e:	2800      	cmp	r0, #0
    5720:	d109      	bne.n	5736 <fRun_6DOF_GY_KALMAN+0xb82>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1021
				{
					*pfQw9x9ij -= *pfK9x3ik * *pfPPlus9x9kj;
    5722:	4643      	mov	r3, r8
    5724:	6899      	ldr	r1, [r3, #8]
    5726:	1c28      	adds	r0, r5, #0
    5728:	f7fb fb34 	bl	d94 <__aeabi_fmul>
    572c:	1c01      	adds	r1, r0, #0
    572e:	6820      	ldr	r0, [r4, #0]
    5730:	f7fb fc5a 	bl	fe8 <__aeabi_fsub>
    5734:	6020      	str	r0, [r4, #0]
    5736:	3601      	adds	r6, #1
    5738:	b2f6      	uxtb	r6, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1007
	for (i = 0; i < 9; i++)
	{
		// initialize pfQw9x9ij for i, j=i
		pfQw9x9ij = pthisSV->fQw9x9[i] + i;

		for (j = i; j < 9; j++)
    573a:	b275      	sxtb	r5, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1031
				pfPPlus9x9kj += 9;

			} // end of loop over k

			// increment pfQw9x9ij for next iteration of j
			pfQw9x9ij++;
    573c:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1007
	for (i = 0; i < 9; i++)
	{
		// initialize pfQw9x9ij for i, j=i
		pfQw9x9ij = pthisSV->fQw9x9[i] + i;

		for (j = i; j < 9; j++)
    573e:	2d08      	cmp	r5, #8
    5740:	ddc4      	ble.n	56cc <fRun_6DOF_GY_KALMAN+0xb18>
    5742:	464b      	mov	r3, r9
    5744:	3301      	adds	r3, #1
    5746:	b2db      	uxtb	r3, r3
    5748:	2428      	movs	r4, #40	; 0x28
    574a:	200c      	movs	r0, #12
    574c:	4699      	mov	r9, r3
    574e:	44a2      	add	sl, r4
    5750:	4480      	add	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1002

	// compute P+ = (I9 - K * C) * Qw = Qw - K * (C * Qw) = Qw - K * P+ (3x9 sub-matrix)
	// storing result P+ in Qw and over-writing Qw which is OK since Qw is later computed from P+
	// where working array P+ (6x12 sub-matrix) is sparse but K is not sparse
	// only on and above diagonal terms of P+ are computed since P+ is symmetric
	for (i = 0; i < 9; i++)
    5752:	2b09      	cmp	r3, #9
    5754:	d1b7      	bne.n	56c6 <fRun_6DOF_GY_KALMAN+0xb12>
    5756:	9906      	ldr	r1, [sp, #24]
    5758:	228e      	movs	r2, #142	; 0x8e
    575a:	0052      	lsls	r2, r2, #1
    575c:	468b      	mov	fp, r1
    575e:	1c16      	adds	r6, r2, #0
    5760:	2300      	movs	r3, #0
    5762:	445e      	add	r6, fp
    5764:	1c1d      	adds	r5, r3, #0
    5766:	469c      	mov	ip, r3
    5768:	46b0      	mov	r8, r6
    576a:	1c0f      	adds	r7, r1, #0
    576c:	24d6      	movs	r4, #214	; 0xd6
    576e:	0064      	lsls	r4, r4, #1
    5770:	1c23      	adds	r3, r4, #0
    5772:	4443      	add	r3, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1046
		// initialize pfPPlus9x9ij and pfQw9x9ij for i, j=i
		pfPPlus9x9ij = pthisSV->fPPlus9x9[i] + i;
		pfQw9x9ij = pthisSV->fQw9x9[i] + i;

		// copy the on-diagonal elements and increment pointers to enter loop at j=i+1
		*(pfPPlus9x9ij++) = *(pfQw9x9ij++);
    5774:	681a      	ldr	r2, [r3, #0]
    5776:	4643      	mov	r3, r8
    5778:	3b04      	subs	r3, #4
    577a:	601a      	str	r2, [r3, #0]
    577c:	4663      	mov	r3, ip
    577e:	3301      	adds	r3, #1
    5780:	b2db      	uxtb	r3, r3
    5782:	469c      	mov	ip, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1049

		// loop over above diagonal columns j copying to below-diagonal elements
		for (j = i + 1; j < 9; j++)
    5784:	b25b      	sxtb	r3, r3
    5786:	2b09      	cmp	r3, #9
    5788:	d024      	beq.n	57d4 <fRun_6DOF_GY_KALMAN+0xc20>
    578a:	21d8      	movs	r1, #216	; 0xd8
    578c:	0049      	lsls	r1, r1, #1
    578e:	1c0c      	adds	r4, r1, #0
    5790:	4444      	add	r4, r8
    5792:	4640      	mov	r0, r8
    5794:	4662      	mov	r2, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1051 (discriminator 2)
		{
			*(pfPPlus9x9ij++)= pthisSV->fPPlus9x9[j][i] = *(pfQw9x9ij++);
    5796:	00de      	lsls	r6, r3, #3
    5798:	18f3      	adds	r3, r6, r3
    579a:	195b      	adds	r3, r3, r5
    579c:	cc02      	ldmia	r4!, {r1}
    579e:	3346      	adds	r3, #70	; 0x46
    57a0:	3201      	adds	r2, #1
    57a2:	009b      	lsls	r3, r3, #2
    57a4:	b2d2      	uxtb	r2, r2
    57a6:	51d9      	str	r1, [r3, r7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1049 (discriminator 2)

		// copy the on-diagonal elements and increment pointers to enter loop at j=i+1
		*(pfPPlus9x9ij++) = *(pfQw9x9ij++);

		// loop over above diagonal columns j copying to below-diagonal elements
		for (j = i + 1; j < 9; j++)
    57a8:	b253      	sxtb	r3, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1051 (discriminator 2)
		{
			*(pfPPlus9x9ij++)= pthisSV->fPPlus9x9[j][i] = *(pfQw9x9ij++);
    57aa:	c002      	stmia	r0!, {r1}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1049 (discriminator 2)

		// copy the on-diagonal elements and increment pointers to enter loop at j=i+1
		*(pfPPlus9x9ij++) = *(pfQw9x9ij++);

		// loop over above diagonal columns j copying to below-diagonal elements
		for (j = i + 1; j < 9; j++)
    57ac:	2b09      	cmp	r3, #9
    57ae:	d1f2      	bne.n	5796 <fRun_6DOF_GY_KALMAN+0xbe2>
    57b0:	2228      	movs	r2, #40	; 0x28
    57b2:	3501      	adds	r5, #1
    57b4:	4490      	add	r8, r2
    57b6:	e7d9      	b.n	576c <fRun_6DOF_GY_KALMAN+0xbb8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:983
					if (*pfC3x9ik == 1.0F)
						*pfPPlus9x9ij += *pfQw9x9kj;
					else if (*pfC3x9ik == -1.0F)
						*pfPPlus9x9ij -= *pfQw9x9kj;
					else
						*pfPPlus9x9ij += *pfC3x9ik * *pfQw9x9kj;
    57b8:	4641      	mov	r1, r8
    57ba:	1c30      	adds	r0, r6, #0
    57bc:	f7fb faea 	bl	d94 <__aeabi_fmul>
    57c0:	464a      	mov	r2, r9
    57c2:	1c01      	adds	r1, r0, #0
    57c4:	6810      	ldr	r0, [r2, #0]
    57c6:	f7fa ff95 	bl	6f4 <__aeabi_fadd>
    57ca:	464b      	mov	r3, r9
    57cc:	6018      	str	r0, [r3, #0]
    57ce:	e739      	b.n	5644 <fRun_6DOF_GY_KALMAN+0xa90>
    57d0:	bf800000 	.word	0xbf800000
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1066
	// zero the matrix Qw (9x9)
	for (i = 0; i < 9; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fQw9x9[i][j] = 0.0F;
    57d4:	22b3      	movs	r2, #179	; 0xb3
    57d6:	2300      	movs	r3, #0
    57d8:	0092      	lsls	r2, r2, #2
    57da:	50bb      	str	r3, [r7, r2]
    57dc:	22b4      	movs	r2, #180	; 0xb4
    57de:	0092      	lsls	r2, r2, #2
    57e0:	50bb      	str	r3, [r7, r2]
    57e2:	22b6      	movs	r2, #182	; 0xb6
    57e4:	0092      	lsls	r2, r2, #2
    57e6:	50bb      	str	r3, [r7, r2]
    57e8:	22b7      	movs	r2, #183	; 0xb7
    57ea:	0092      	lsls	r2, r2, #2
    57ec:	50bb      	str	r3, [r7, r2]
    57ee:	22b8      	movs	r2, #184	; 0xb8
    57f0:	0092      	lsls	r2, r2, #2
    57f2:	50bb      	str	r3, [r7, r2]
    57f4:	22b9      	movs	r2, #185	; 0xb9
    57f6:	0092      	lsls	r2, r2, #2
    57f8:	50bb      	str	r3, [r7, r2]
    57fa:	22ba      	movs	r2, #186	; 0xba
    57fc:	0092      	lsls	r2, r2, #2
    57fe:	50bb      	str	r3, [r7, r2]
    5800:	22bb      	movs	r2, #187	; 0xbb
    5802:	0092      	lsls	r2, r2, #2
    5804:	50bb      	str	r3, [r7, r2]
    5806:	22bd      	movs	r2, #189	; 0xbd
    5808:	0092      	lsls	r2, r2, #2
    580a:	50bb      	str	r3, [r7, r2]
    580c:	22be      	movs	r2, #190	; 0xbe
    580e:	0092      	lsls	r2, r2, #2
    5810:	50bb      	str	r3, [r7, r2]
    5812:	22c0      	movs	r2, #192	; 0xc0
    5814:	0092      	lsls	r2, r2, #2
    5816:	50bb      	str	r3, [r7, r2]
    5818:	22c1      	movs	r2, #193	; 0xc1
    581a:	0092      	lsls	r2, r2, #2
    581c:	50bb      	str	r3, [r7, r2]
    581e:	22c2      	movs	r2, #194	; 0xc2
    5820:	0092      	lsls	r2, r2, #2
    5822:	50bb      	str	r3, [r7, r2]
    5824:	22c3      	movs	r2, #195	; 0xc3
    5826:	0092      	lsls	r2, r2, #2
    5828:	50bb      	str	r3, [r7, r2]
    582a:	22c4      	movs	r2, #196	; 0xc4
    582c:	0092      	lsls	r2, r2, #2
    582e:	50bb      	str	r3, [r7, r2]
    5830:	22c5      	movs	r2, #197	; 0xc5
    5832:	0092      	lsls	r2, r2, #2
    5834:	50bb      	str	r3, [r7, r2]
    5836:	22c7      	movs	r2, #199	; 0xc7
    5838:	0092      	lsls	r2, r2, #2
    583a:	50bb      	str	r3, [r7, r2]
    583c:	22c8      	movs	r2, #200	; 0xc8
    583e:	0092      	lsls	r2, r2, #2
    5840:	50bb      	str	r3, [r7, r2]
    5842:	22ca      	movs	r2, #202	; 0xca
    5844:	0092      	lsls	r2, r2, #2
    5846:	50bb      	str	r3, [r7, r2]
    5848:	22cb      	movs	r2, #203	; 0xcb
    584a:	0092      	lsls	r2, r2, #2
    584c:	50bb      	str	r3, [r7, r2]
    584e:	22cc      	movs	r2, #204	; 0xcc
    5850:	0092      	lsls	r2, r2, #2
    5852:	50bb      	str	r3, [r7, r2]
    5854:	22ce      	movs	r2, #206	; 0xce
    5856:	0092      	lsls	r2, r2, #2
    5858:	50bb      	str	r3, [r7, r2]
    585a:	22cf      	movs	r2, #207	; 0xcf
    585c:	0092      	lsls	r2, r2, #2
    585e:	50bb      	str	r3, [r7, r2]
    5860:	22d1      	movs	r2, #209	; 0xd1
    5862:	0092      	lsls	r2, r2, #2
    5864:	50bb      	str	r3, [r7, r2]
    5866:	22d2      	movs	r2, #210	; 0xd2
    5868:	0092      	lsls	r2, r2, #2
    586a:	50bb      	str	r3, [r7, r2]
    586c:	22d3      	movs	r2, #211	; 0xd3
    586e:	0092      	lsls	r2, r2, #2
    5870:	50bb      	str	r3, [r7, r2]
    5872:	22d4      	movs	r2, #212	; 0xd4
    5874:	0092      	lsls	r2, r2, #2
    5876:	50bb      	str	r3, [r7, r2]
    5878:	22d5      	movs	r2, #213	; 0xd5
    587a:	0092      	lsls	r2, r2, #2
    587c:	50bb      	str	r3, [r7, r2]
    587e:	22d6      	movs	r2, #214	; 0xd6
    5880:	0092      	lsls	r2, r2, #2
    5882:	50bb      	str	r3, [r7, r2]
    5884:	22d8      	movs	r2, #216	; 0xd8
    5886:	0092      	lsls	r2, r2, #2
    5888:	50bb      	str	r3, [r7, r2]
    588a:	22d9      	movs	r2, #217	; 0xd9
    588c:	0092      	lsls	r2, r2, #2
    588e:	50bb      	str	r3, [r7, r2]
    5890:	22db      	movs	r2, #219	; 0xdb
    5892:	0092      	lsls	r2, r2, #2
    5894:	50bb      	str	r3, [r7, r2]
    5896:	22dc      	movs	r2, #220	; 0xdc
    5898:	0092      	lsls	r2, r2, #2
    589a:	50bb      	str	r3, [r7, r2]
    589c:	22dd      	movs	r2, #221	; 0xdd
    589e:	0092      	lsls	r2, r2, #2
    58a0:	50bb      	str	r3, [r7, r2]
    58a2:	22de      	movs	r2, #222	; 0xde
    58a4:	0092      	lsls	r2, r2, #2
    58a6:	50bb      	str	r3, [r7, r2]
    58a8:	22df      	movs	r2, #223	; 0xdf
    58aa:	0092      	lsls	r2, r2, #2
    58ac:	50bb      	str	r3, [r7, r2]
    58ae:	22e0      	movs	r2, #224	; 0xe0
    58b0:	0092      	lsls	r2, r2, #2
    58b2:	50bb      	str	r3, [r7, r2]
    58b4:	22e2      	movs	r2, #226	; 0xe2
    58b6:	0092      	lsls	r2, r2, #2
    58b8:	50bb      	str	r3, [r7, r2]
    58ba:	22e3      	movs	r2, #227	; 0xe3
    58bc:	0092      	lsls	r2, r2, #2
    58be:	50bb      	str	r3, [r7, r2]
    58c0:	22e5      	movs	r2, #229	; 0xe5
    58c2:	0092      	lsls	r2, r2, #2
    58c4:	50bb      	str	r3, [r7, r2]
    58c6:	22e6      	movs	r2, #230	; 0xe6
    58c8:	0092      	lsls	r2, r2, #2
    58ca:	50bb      	str	r3, [r7, r2]
    58cc:	22e7      	movs	r2, #231	; 0xe7
    58ce:	0092      	lsls	r2, r2, #2
    58d0:	50bb      	str	r3, [r7, r2]
    58d2:	22e8      	movs	r2, #232	; 0xe8
    58d4:	0092      	lsls	r2, r2, #2
    58d6:	50bb      	str	r3, [r7, r2]
    58d8:	22e9      	movs	r2, #233	; 0xe9
    58da:	0092      	lsls	r2, r2, #2
    58dc:	50bb      	str	r3, [r7, r2]
    58de:	22ea      	movs	r2, #234	; 0xea
    58e0:	0092      	lsls	r2, r2, #2
    58e2:	50bb      	str	r3, [r7, r2]
    58e4:	22eb      	movs	r2, #235	; 0xeb
    58e6:	0092      	lsls	r2, r2, #2
    58e8:	50bb      	str	r3, [r7, r2]
    58ea:	22ec      	movs	r2, #236	; 0xec
    58ec:	0092      	lsls	r2, r2, #2
    58ee:	50bb      	str	r3, [r7, r2]
    58f0:	22ed      	movs	r2, #237	; 0xed
    58f2:	0092      	lsls	r2, r2, #2
    58f4:	50bb      	str	r3, [r7, r2]
    58f6:	22ef      	movs	r2, #239	; 0xef
    58f8:	0092      	lsls	r2, r2, #2
    58fa:	50bb      	str	r3, [r7, r2]
    58fc:	22f0      	movs	r2, #240	; 0xf0
    58fe:	0092      	lsls	r2, r2, #2
    5900:	50bb      	str	r3, [r7, r2]
    5902:	22f1      	movs	r2, #241	; 0xf1
    5904:	0092      	lsls	r2, r2, #2
    5906:	50bb      	str	r3, [r7, r2]
    5908:	22f2      	movs	r2, #242	; 0xf2
    590a:	0092      	lsls	r2, r2, #2
    590c:	50bb      	str	r3, [r7, r2]
    590e:	22f3      	movs	r2, #243	; 0xf3
    5910:	0092      	lsls	r2, r2, #2
    5912:	50bb      	str	r3, [r7, r2]
    5914:	22f4      	movs	r2, #244	; 0xf4
    5916:	0092      	lsls	r2, r2, #2
    5918:	50bb      	str	r3, [r7, r2]
    591a:	22f5      	movs	r2, #245	; 0xf5
    591c:	0092      	lsls	r2, r2, #2
    591e:	50bb      	str	r3, [r7, r2]
    5920:	22f6      	movs	r2, #246	; 0xf6
    5922:	0092      	lsls	r2, r2, #2
    5924:	50bb      	str	r3, [r7, r2]
    5926:	22f7      	movs	r2, #247	; 0xf7
    5928:	0092      	lsls	r2, r2, #2
    592a:	50bb      	str	r3, [r7, r2]
    592c:	22f9      	movs	r2, #249	; 0xf9
    592e:	0092      	lsls	r2, r2, #2
    5930:	50bb      	str	r3, [r7, r2]
    5932:	22fa      	movs	r2, #250	; 0xfa
    5934:	0092      	lsls	r2, r2, #2
    5936:	50bb      	str	r3, [r7, r2]
    5938:	22fb      	movs	r2, #251	; 0xfb
    593a:	0092      	lsls	r2, r2, #2
    593c:	50bb      	str	r3, [r7, r2]
    593e:	22fc      	movs	r2, #252	; 0xfc
    5940:	0092      	lsls	r2, r2, #2
    5942:	50bb      	str	r3, [r7, r2]
    5944:	22fd      	movs	r2, #253	; 0xfd
    5946:	0092      	lsls	r2, r2, #2
    5948:	50bb      	str	r3, [r7, r2]
    594a:	22fe      	movs	r2, #254	; 0xfe
    594c:	0092      	lsls	r2, r2, #2
    594e:	50bb      	str	r3, [r7, r2]
    5950:	22ff      	movs	r2, #255	; 0xff
    5952:	0092      	lsls	r2, r2, #2
    5954:	50bb      	str	r3, [r7, r2]
    5956:	2280      	movs	r2, #128	; 0x80
    5958:	00d2      	lsls	r2, r2, #3
    595a:	50bb      	str	r3, [r7, r2]
    595c:	4ab6      	ldr	r2, [pc, #728]	; (5c38 <fRun_6DOF_GY_KALMAN+0x1084>)
    595e:	46bb      	mov	fp, r7
    5960:	50bb      	str	r3, [r7, r2]
    5962:	4bb6      	ldr	r3, [pc, #728]	; (5c3c <fRun_6DOF_GY_KALMAN+0x1088>)
    5964:	465c      	mov	r4, fp
    5966:	58fe      	ldr	r6, [r7, r3]
    5968:	2391      	movs	r3, #145	; 0x91
    596a:	00db      	lsls	r3, r3, #3
    596c:	58ff      	ldr	r7, [r7, r3]
    596e:	2390      	movs	r3, #144	; 0x90
    5970:	00db      	lsls	r3, r3, #3
    5972:	58e5      	ldr	r5, [r4, r3]
    5974:	238f      	movs	r3, #143	; 0x8f
    5976:	00db      	lsls	r3, r3, #3
    5978:	58e4      	ldr	r4, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1074

	// update the covariance matrix components
	for (i = 0; i < 3; i++)
	{
		// Qw[th-th-] = Qw[0-2][0-2] = E[th-(th-)^T] = Q[th+th+] + deltat^2 * (Q[b+b+] + (Qwb + QvG) * I)
		pthisSV->fQw9x9[i][i] = pthisSV->fPPlus9x9[i][i] + pthisSV->fdeltatsq * (pthisSV->fPPlus9x9[i + 3][i + 3] + pthisSV->fQwbplusQvG);
    597a:	23c8      	movs	r3, #200	; 0xc8
    597c:	4659      	mov	r1, fp
    597e:	005b      	lsls	r3, r3, #1
    5980:	58cb      	ldr	r3, [r1, r3]
    5982:	2080      	movs	r0, #128	; 0x80
    5984:	0600      	lsls	r0, r0, #24
    5986:	182d      	adds	r5, r5, r0
    5988:	1c39      	adds	r1, r7, #0
    598a:	1c18      	adds	r0, r3, #0
    598c:	4698      	mov	r8, r3
    598e:	f7fa feb1 	bl	6f4 <__aeabi_fadd>
    5992:	1c31      	adds	r1, r6, #0
    5994:	f7fb f9fe 	bl	d94 <__aeabi_fmul>
    5998:	238c      	movs	r3, #140	; 0x8c
    599a:	465a      	mov	r2, fp
    599c:	005b      	lsls	r3, r3, #1
    599e:	1c01      	adds	r1, r0, #0
    59a0:	58d0      	ldr	r0, [r2, r3]
    59a2:	f7fa fea7 	bl	6f4 <__aeabi_fadd>
    59a6:	23b2      	movs	r3, #178	; 0xb2
    59a8:	009b      	lsls	r3, r3, #2
    59aa:	4659      	mov	r1, fp
    59ac:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1077

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw9x9[i + 3][i + 3] = pthisSV->fPPlus9x9[i + 3][i + 3] + FQWB_6DOF_GY_KALMAN;
    59ae:	4640      	mov	r0, r8
    59b0:	49a3      	ldr	r1, [pc, #652]	; (5c40 <fRun_6DOF_GY_KALMAN+0x108c>)
    59b2:	f7fa fe9f 	bl	6f4 <__aeabi_fadd>
    59b6:	23d0      	movs	r3, #208	; 0xd0
    59b8:	465a      	mov	r2, fp
    59ba:	009b      	lsls	r3, r3, #2
    59bc:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1080

		// Qw[th-b-] = Qw[0-2][3-5] = E[th-(b-)^T] = -deltat * (Q[b+b+] + Qwb * I) = -deltat * Qw[b-b-]
		pthisSV->fQw9x9[i][i + 3] = pthisSV->fQw9x9[i + 3][i] = -pthisSV->fdeltat * pthisSV->fQw9x9[i + 3][i + 3];
    59be:	1c29      	adds	r1, r5, #0
    59c0:	f7fb f9e8 	bl	d94 <__aeabi_fmul>
    59c4:	23cd      	movs	r3, #205	; 0xcd
    59c6:	4659      	mov	r1, fp
    59c8:	009b      	lsls	r3, r3, #2
    59ca:	50c8      	str	r0, [r1, r3]
    59cc:	23b5      	movs	r3, #181	; 0xb5
    59ce:	009b      	lsls	r3, r3, #2
    59d0:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1083

		// Qw[a-a-] = Qw[6-8][6-8] = E[a-(a-)^T] = ca^2 * Q[a+a+] + Qwa * I
		pthisSV->fQw9x9[i + 6][i + 6] = pthisSV->fcasq * pthisSV->fPPlus9x9[i + 6][i + 6] + FQWA_6DOF_GY_KALMAN;
    59d2:	2382      	movs	r3, #130	; 0x82
    59d4:	009b      	lsls	r3, r3, #2
    59d6:	58c9      	ldr	r1, [r1, r3]
    59d8:	1c20      	adds	r0, r4, #0
    59da:	f7fb f9db 	bl	d94 <__aeabi_fmul>
    59de:	4999      	ldr	r1, [pc, #612]	; (5c44 <fRun_6DOF_GY_KALMAN+0x1090>)
    59e0:	f7fa fe88 	bl	6f4 <__aeabi_fadd>
    59e4:	23ee      	movs	r3, #238	; 0xee
    59e6:	465a      	mov	r2, fp
    59e8:	009b      	lsls	r3, r3, #2
    59ea:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1074

	// update the covariance matrix components
	for (i = 0; i < 3; i++)
	{
		// Qw[th-th-] = Qw[0-2][0-2] = E[th-(th-)^T] = Q[th+th+] + deltat^2 * (Q[b+b+] + (Qwb + QvG) * I)
		pthisSV->fQw9x9[i][i] = pthisSV->fPPlus9x9[i][i] + pthisSV->fdeltatsq * (pthisSV->fPPlus9x9[i + 3][i + 3] + pthisSV->fQwbplusQvG);
    59ec:	23dc      	movs	r3, #220	; 0xdc
    59ee:	005b      	lsls	r3, r3, #1
    59f0:	58d3      	ldr	r3, [r2, r3]
    59f2:	1c39      	adds	r1, r7, #0
    59f4:	1c18      	adds	r0, r3, #0
    59f6:	4698      	mov	r8, r3
    59f8:	f7fa fe7c 	bl	6f4 <__aeabi_fadd>
    59fc:	1c31      	adds	r1, r6, #0
    59fe:	f7fb f9c9 	bl	d94 <__aeabi_fmul>
    5a02:	23a0      	movs	r3, #160	; 0xa0
    5a04:	465a      	mov	r2, fp
    5a06:	005b      	lsls	r3, r3, #1
    5a08:	1c01      	adds	r1, r0, #0
    5a0a:	58d0      	ldr	r0, [r2, r3]
    5a0c:	f7fa fe72 	bl	6f4 <__aeabi_fadd>
    5a10:	23bc      	movs	r3, #188	; 0xbc
    5a12:	009b      	lsls	r3, r3, #2
    5a14:	4659      	mov	r1, fp
    5a16:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1077

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw9x9[i + 3][i + 3] = pthisSV->fPPlus9x9[i + 3][i + 3] + FQWB_6DOF_GY_KALMAN;
    5a18:	4640      	mov	r0, r8
    5a1a:	4989      	ldr	r1, [pc, #548]	; (5c40 <fRun_6DOF_GY_KALMAN+0x108c>)
    5a1c:	f7fa fe6a 	bl	6f4 <__aeabi_fadd>
    5a20:	23da      	movs	r3, #218	; 0xda
    5a22:	465a      	mov	r2, fp
    5a24:	009b      	lsls	r3, r3, #2
    5a26:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1080

		// Qw[th-b-] = Qw[0-2][3-5] = E[th-(b-)^T] = -deltat * (Q[b+b+] + Qwb * I) = -deltat * Qw[b-b-]
		pthisSV->fQw9x9[i][i + 3] = pthisSV->fQw9x9[i + 3][i] = -pthisSV->fdeltat * pthisSV->fQw9x9[i + 3][i + 3];
    5a28:	1c29      	adds	r1, r5, #0
    5a2a:	f7fb f9b3 	bl	d94 <__aeabi_fmul>
    5a2e:	23d7      	movs	r3, #215	; 0xd7
    5a30:	4659      	mov	r1, fp
    5a32:	009b      	lsls	r3, r3, #2
    5a34:	50c8      	str	r0, [r1, r3]
    5a36:	23bf      	movs	r3, #191	; 0xbf
    5a38:	009b      	lsls	r3, r3, #2
    5a3a:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1083

		// Qw[a-a-] = Qw[6-8][6-8] = E[a-(a-)^T] = ca^2 * Q[a+a+] + Qwa * I
		pthisSV->fQw9x9[i + 6][i + 6] = pthisSV->fcasq * pthisSV->fPPlus9x9[i + 6][i + 6] + FQWA_6DOF_GY_KALMAN;
    5a3c:	238c      	movs	r3, #140	; 0x8c
    5a3e:	009b      	lsls	r3, r3, #2
    5a40:	58c9      	ldr	r1, [r1, r3]
    5a42:	1c20      	adds	r0, r4, #0
    5a44:	f7fb f9a6 	bl	d94 <__aeabi_fmul>
    5a48:	497e      	ldr	r1, [pc, #504]	; (5c44 <fRun_6DOF_GY_KALMAN+0x1090>)
    5a4a:	f7fa fe53 	bl	6f4 <__aeabi_fadd>
    5a4e:	23f8      	movs	r3, #248	; 0xf8
    5a50:	465a      	mov	r2, fp
    5a52:	009b      	lsls	r3, r3, #2
    5a54:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1074

	// update the covariance matrix components
	for (i = 0; i < 3; i++)
	{
		// Qw[th-th-] = Qw[0-2][0-2] = E[th-(th-)^T] = Q[th+th+] + deltat^2 * (Q[b+b+] + (Qwb + QvG) * I)
		pthisSV->fQw9x9[i][i] = pthisSV->fPPlus9x9[i][i] + pthisSV->fdeltatsq * (pthisSV->fPPlus9x9[i + 3][i + 3] + pthisSV->fQwbplusQvG);
    5a56:	23f0      	movs	r3, #240	; 0xf0
    5a58:	005b      	lsls	r3, r3, #1
    5a5a:	58d3      	ldr	r3, [r2, r3]
    5a5c:	1c39      	adds	r1, r7, #0
    5a5e:	1c18      	adds	r0, r3, #0
    5a60:	4698      	mov	r8, r3
    5a62:	f7fa fe47 	bl	6f4 <__aeabi_fadd>
    5a66:	1c31      	adds	r1, r6, #0
    5a68:	f7fb f994 	bl	d94 <__aeabi_fmul>
    5a6c:	23b4      	movs	r3, #180	; 0xb4
    5a6e:	465a      	mov	r2, fp
    5a70:	005b      	lsls	r3, r3, #1
    5a72:	1c01      	adds	r1, r0, #0
    5a74:	58d0      	ldr	r0, [r2, r3]
    5a76:	f7fa fe3d 	bl	6f4 <__aeabi_fadd>
    5a7a:	23c6      	movs	r3, #198	; 0xc6
    5a7c:	009b      	lsls	r3, r3, #2
    5a7e:	4659      	mov	r1, fp
    5a80:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1077

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw9x9[i + 3][i + 3] = pthisSV->fPPlus9x9[i + 3][i + 3] + FQWB_6DOF_GY_KALMAN;
    5a82:	496f      	ldr	r1, [pc, #444]	; (5c40 <fRun_6DOF_GY_KALMAN+0x108c>)
    5a84:	4640      	mov	r0, r8
    5a86:	f7fa fe35 	bl	6f4 <__aeabi_fadd>
    5a8a:	23e4      	movs	r3, #228	; 0xe4
    5a8c:	465a      	mov	r2, fp
    5a8e:	009b      	lsls	r3, r3, #2
    5a90:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1080

		// Qw[th-b-] = Qw[0-2][3-5] = E[th-(b-)^T] = -deltat * (Q[b+b+] + Qwb * I) = -deltat * Qw[b-b-]
		pthisSV->fQw9x9[i][i + 3] = pthisSV->fQw9x9[i + 3][i] = -pthisSV->fdeltat * pthisSV->fQw9x9[i + 3][i + 3];
    5a92:	1c29      	adds	r1, r5, #0
    5a94:	f7fb f97e 	bl	d94 <__aeabi_fmul>
    5a98:	23e1      	movs	r3, #225	; 0xe1
    5a9a:	4659      	mov	r1, fp
    5a9c:	009b      	lsls	r3, r3, #2
    5a9e:	50c8      	str	r0, [r1, r3]
    5aa0:	23c9      	movs	r3, #201	; 0xc9
    5aa2:	009b      	lsls	r3, r3, #2
    5aa4:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1083

		// Qw[a-a-] = Qw[6-8][6-8] = E[a-(a-)^T] = ca^2 * Q[a+a+] + Qwa * I
		pthisSV->fQw9x9[i + 6][i + 6] = pthisSV->fcasq * pthisSV->fPPlus9x9[i + 6][i + 6] + FQWA_6DOF_GY_KALMAN;
    5aa6:	2396      	movs	r3, #150	; 0x96
    5aa8:	009b      	lsls	r3, r3, #2
    5aaa:	58c9      	ldr	r1, [r1, r3]
    5aac:	1c20      	adds	r0, r4, #0
    5aae:	f7fb f971 	bl	d94 <__aeabi_fmul>
    5ab2:	4964      	ldr	r1, [pc, #400]	; (5c44 <fRun_6DOF_GY_KALMAN+0x1090>)
    5ab4:	f7fa fe1e 	bl	6f4 <__aeabi_fadd>
    5ab8:	2381      	movs	r3, #129	; 0x81
    5aba:	00db      	lsls	r3, r3, #3
    5abc:	465a      	mov	r2, fp
    5abe:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1087
	}

	return;
} // end fRun_6DOF_GY_KALMAN
    5ac0:	b035      	add	sp, #212	; 0xd4
    5ac2:	bc3c      	pop	{r2, r3, r4, r5}
    5ac4:	4690      	mov	r8, r2
    5ac6:	4699      	mov	r9, r3
    5ac8:	46a2      	mov	sl, r4
    5aca:	46ab      	mov	fp, r5
    5acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:681
	for (i = X; i <= Z; i++)
	{
		if (ithisCoordSystem == NED)
		{
			// NED gravity is along positive z axis
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
    5ace:	4659      	mov	r1, fp
    5ad0:	58cc      	ldr	r4, [r1, r3]
    5ad2:	23fc      	movs	r3, #252	; 0xfc
    5ad4:	50cc      	str	r4, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    5ad6:	23d8      	movs	r3, #216	; 0xd8
    5ad8:	58c8      	ldr	r0, [r1, r3]
    5ada:	21fc      	movs	r1, #252	; 0xfc
    5adc:	0589      	lsls	r1, r1, #22
    5ade:	f7fb f959 	bl	d94 <__aeabi_fmul>
    5ae2:	2384      	movs	r3, #132	; 0x84
    5ae4:	465a      	mov	r2, fp
    5ae6:	005b      	lsls	r3, r3, #1
    5ae8:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5aea:	9b07      	ldr	r3, [sp, #28]
    5aec:	68d9      	ldr	r1, [r3, #12]
    5aee:	f7fa fe01 	bl	6f4 <__aeabi_fadd>
    5af2:	1c21      	adds	r1, r4, #0
    5af4:	f7fb fa78 	bl	fe8 <__aeabi_fsub>
    5af8:	465c      	mov	r4, fp
    5afa:	23f0      	movs	r3, #240	; 0xf0
    5afc:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:681
	for (i = X; i <= Z; i++)
	{
		if (ithisCoordSystem == NED)
		{
			// NED gravity is along positive z axis
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
    5afe:	23a8      	movs	r3, #168	; 0xa8
    5b00:	58e4      	ldr	r4, [r4, r3]
    5b02:	2380      	movs	r3, #128	; 0x80
    5b04:	005b      	lsls	r3, r3, #1
    5b06:	4658      	mov	r0, fp
    5b08:	50c4      	str	r4, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    5b0a:	21fc      	movs	r1, #252	; 0xfc
    5b0c:	23dc      	movs	r3, #220	; 0xdc
    5b0e:	58c0      	ldr	r0, [r0, r3]
    5b10:	0589      	lsls	r1, r1, #22
    5b12:	f7fb f93f 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5b16:	9a07      	ldr	r2, [sp, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    5b18:	2386      	movs	r3, #134	; 0x86
    5b1a:	005b      	lsls	r3, r3, #1
    5b1c:	4659      	mov	r1, fp
    5b1e:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5b20:	6911      	ldr	r1, [r2, #16]
    5b22:	f7fa fde7 	bl	6f4 <__aeabi_fadd>
    5b26:	1c21      	adds	r1, r4, #0
    5b28:	f7fb fa5e 	bl	fe8 <__aeabi_fsub>
    5b2c:	465c      	mov	r4, fp
    5b2e:	23f4      	movs	r3, #244	; 0xf4
    5b30:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:681
	for (i = X; i <= Z; i++)
	{
		if (ithisCoordSystem == NED)
		{
			// NED gravity is along positive z axis
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
    5b32:	23b4      	movs	r3, #180	; 0xb4
    5b34:	58e4      	ldr	r4, [r4, r3]
    5b36:	2382      	movs	r3, #130	; 0x82
    5b38:	005b      	lsls	r3, r3, #1
    5b3a:	4658      	mov	r0, fp
    5b3c:	50c4      	str	r4, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    5b3e:	21fc      	movs	r1, #252	; 0xfc
    5b40:	23e0      	movs	r3, #224	; 0xe0
    5b42:	58c0      	ldr	r0, [r0, r3]
    5b44:	0589      	lsls	r1, r1, #22
    5b46:	f7fb f925 	bl	d94 <__aeabi_fmul>
    5b4a:	2388      	movs	r3, #136	; 0x88
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5b4c:	9a07      	ldr	r2, [sp, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    5b4e:	4659      	mov	r1, fp
    5b50:	005b      	lsls	r3, r3, #1
    5b52:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5b54:	6951      	ldr	r1, [r2, #20]
    5b56:	f7fa fdcd 	bl	6f4 <__aeabi_fadd>
    5b5a:	f7ff f936 	bl	4dca <fRun_6DOF_GY_KALMAN+0x216>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:931
	// *********************************************************************************

	if (ithisCoordSystem == NED)
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
    5b5e:	f007 fab7 	bl	d0d0 <fNEDAnglesDegFromRotationMatrix>
    5b62:	e549      	b.n	55f8 <fRun_6DOF_GY_KALMAN+0xa44>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:602
	int8 iPivot[3];

	// do a reset and return if requested
	if (pthisSV->resetflag)
	{
		fInit_6DOF_GY_KALMAN(pthisSV, SENSORFS, OVERSAMPLE_RATIO);
    5b64:	4658      	mov	r0, fp
    5b66:	21c8      	movs	r1, #200	; 0xc8
    5b68:	2208      	movs	r2, #8
    5b6a:	f7fd ff37 	bl	39dc <fInit_6DOF_GY_KALMAN>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:603
		return;
    5b6e:	e7a7      	b.n	5ac0 <fRun_6DOF_GY_KALMAN+0xf0c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:937
				&(pthisSV->fRhoPl), &(pthisSV->fChiPl));
	}
	else if (ithisCoordSystem == ANDROID)
	{
		// calculate the Android Euler angles
		fAndroidAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
    5b70:	f007 fb24 	bl	d1bc <fAndroidAnglesDegFromRotationMatrix>
    5b74:	e540      	b.n	55f8 <fRun_6DOF_GY_KALMAN+0xa44>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:613
	{
		// get the 3DOF orientation matrix and initial inclination angle
		if (ithisCoordSystem == NED)
		{
			// call NED tilt function
			f3DOFTiltNED(pthisSV->fRPl, pthisAccel->fGpFast);
    5b76:	465c      	mov	r4, fp
    5b78:	9907      	ldr	r1, [sp, #28]
    5b7a:	3414      	adds	r4, #20
    5b7c:	1c20      	adds	r0, r4, #0
    5b7e:	310c      	adds	r1, #12
    5b80:	940d      	str	r4, [sp, #52]	; 0x34
    5b82:	f006 fb9b 	bl	c2bc <f3DOFTiltNED>
    5b86:	f7ff f841 	bl	4c0c <fRun_6DOF_GY_KALMAN+0x58>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:686
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    5b8a:	58c4      	ldr	r4, [r0, r3]
    5b8c:	2180      	movs	r1, #128	; 0x80
    5b8e:	0609      	lsls	r1, r1, #24
    5b90:	1864      	adds	r4, r4, r1
    5b92:	23fc      	movs	r3, #252	; 0xfc
    5b94:	50c4      	str	r4, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    5b96:	21fc      	movs	r1, #252	; 0xfc
    5b98:	23d8      	movs	r3, #216	; 0xd8
    5b9a:	58c0      	ldr	r0, [r0, r3]
    5b9c:	0589      	lsls	r1, r1, #22
    5b9e:	f7fb f8f9 	bl	d94 <__aeabi_fmul>
    5ba2:	2384      	movs	r3, #132	; 0x84
    5ba4:	465a      	mov	r2, fp
    5ba6:	005b      	lsls	r3, r3, #1
    5ba8:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5baa:	9b07      	ldr	r3, [sp, #28]
    5bac:	68d9      	ldr	r1, [r3, #12]
    5bae:	f7fa fda1 	bl	6f4 <__aeabi_fadd>
    5bb2:	1c21      	adds	r1, r4, #0
    5bb4:	f7fb fa18 	bl	fe8 <__aeabi_fsub>
    5bb8:	465c      	mov	r4, fp
    5bba:	23f0      	movs	r3, #240	; 0xf0
    5bbc:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:686
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    5bbe:	23a8      	movs	r3, #168	; 0xa8
    5bc0:	58e4      	ldr	r4, [r4, r3]
    5bc2:	2080      	movs	r0, #128	; 0x80
    5bc4:	0600      	lsls	r0, r0, #24
    5bc6:	2380      	movs	r3, #128	; 0x80
    5bc8:	1824      	adds	r4, r4, r0
    5bca:	4659      	mov	r1, fp
    5bcc:	005b      	lsls	r3, r3, #1
    5bce:	50cc      	str	r4, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    5bd0:	23dc      	movs	r3, #220	; 0xdc
    5bd2:	58c8      	ldr	r0, [r1, r3]
    5bd4:	21fc      	movs	r1, #252	; 0xfc
    5bd6:	0589      	lsls	r1, r1, #22
    5bd8:	f7fb f8dc 	bl	d94 <__aeabi_fmul>
    5bdc:	2386      	movs	r3, #134	; 0x86
    5bde:	465a      	mov	r2, fp
    5be0:	005b      	lsls	r3, r3, #1
    5be2:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5be4:	9b07      	ldr	r3, [sp, #28]
    5be6:	6919      	ldr	r1, [r3, #16]
    5be8:	f7fa fd84 	bl	6f4 <__aeabi_fadd>
    5bec:	1c21      	adds	r1, r4, #0
    5bee:	f7fb f9fb 	bl	fe8 <__aeabi_fsub>
    5bf2:	465c      	mov	r4, fp
    5bf4:	23f4      	movs	r3, #244	; 0xf4
    5bf6:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:686
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    5bf8:	23b4      	movs	r3, #180	; 0xb4
    5bfa:	58e4      	ldr	r4, [r4, r3]
    5bfc:	2080      	movs	r0, #128	; 0x80
    5bfe:	0600      	lsls	r0, r0, #24
    5c00:	2382      	movs	r3, #130	; 0x82
    5c02:	4659      	mov	r1, fp
    5c04:	1824      	adds	r4, r4, r0
    5c06:	005b      	lsls	r3, r3, #1
    5c08:	50cc      	str	r4, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    5c0a:	23e0      	movs	r3, #224	; 0xe0
    5c0c:	58c8      	ldr	r0, [r1, r3]
    5c0e:	21fc      	movs	r1, #252	; 0xfc
    5c10:	0589      	lsls	r1, r1, #22
    5c12:	f7fb f8bf 	bl	d94 <__aeabi_fmul>
    5c16:	2388      	movs	r3, #136	; 0x88
    5c18:	005b      	lsls	r3, r3, #1
    5c1a:	465a      	mov	r2, fp
    5c1c:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5c1e:	9b07      	ldr	r3, [sp, #28]
    5c20:	6959      	ldr	r1, [r3, #20]
    5c22:	e798      	b.n	5b56 <fRun_6DOF_GY_KALMAN+0xfa2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:618
			f3DOFTiltNED(pthisSV->fRPl, pthisAccel->fGpFast);
		}
		else if (ithisCoordSystem == ANDROID)
		{
			// call Android tilt function
			f3DOFTiltAndroid(pthisSV->fRPl, pthisAccel->fGpFast);
    5c24:	465c      	mov	r4, fp
    5c26:	9907      	ldr	r1, [sp, #28]
    5c28:	3414      	adds	r4, #20
    5c2a:	1c20      	adds	r0, r4, #0
    5c2c:	310c      	adds	r1, #12
    5c2e:	940d      	str	r4, [sp, #52]	; 0x34
    5c30:	f006 fbda 	bl	c3e8 <f3DOFTiltAndroid>
    5c34:	f7fe ffea 	bl	4c0c <fRun_6DOF_GY_KALMAN+0x58>
    5c38:	00000404 	.word	0x00000404
    5c3c:	00000484 	.word	0x00000484
    5c40:	3089705f 	.word	0x3089705f
    5c44:	38d1b717 	.word	0x38d1b717

00005c48 <fRun_9DOF_GBY_KALMAN>:
fRun_9DOF_GBY_KALMAN():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1092
} // end fRun_6DOF_GY_KALMAN

// 9DOF orientation function implemented using a 12 element Kalman filter
void fRun_9DOF_GBY_KALMAN(struct SV_9DOF_GBY_KALMAN *pthisSV, struct AccelSensor *pthisAccel, struct MagSensor *pthisMag, struct GyroSensor *pthisGyro,
		struct MagCalibration *pthisMagCal, int16 ithisCoordSystem, int16 iOverSampleRatio)
{	
    5c48:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c4a:	465f      	mov	r7, fp
    5c4c:	464d      	mov	r5, r9
    5c4e:	4644      	mov	r4, r8
    5c50:	4656      	mov	r6, sl
    5c52:	b4f0      	push	{r4, r5, r6, r7}
    5c54:	b0ef      	sub	sp, #444	; 0x1bc
    5c56:	4699      	mov	r9, r3
    5c58:	ab78      	add	r3, sp, #480	; 0x1e0
    5c5a:	cb10      	ldmia	r3!, {r4}
    5c5c:	4683      	mov	fp, r0
    5c5e:	2000      	movs	r0, #0
    5c60:	5e1f      	ldrsh	r7, [r3, r0]
    5c62:	ab7a      	add	r3, sp, #488	; 0x1e8
    5c64:	970f      	str	r7, [sp, #60]	; 0x3c
    5c66:	2700      	movs	r7, #0
    5c68:	5fdc      	ldrsh	r4, [r3, r7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1123
	int8 iColInd[6];
	int8 iRowInd[6];
	int8 iPivot[6];

	// do a reset and return if requested
	if (pthisSV->resetflag)
    5c6a:	4bb1      	ldr	r3, [pc, #708]	; (5f30 <fRun_9DOF_GBY_KALMAN+0x2e8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1092
} // end fRun_6DOF_GY_KALMAN

// 9DOF orientation function implemented using a 12 element Kalman filter
void fRun_9DOF_GBY_KALMAN(struct SV_9DOF_GBY_KALMAN *pthisSV, struct AccelSensor *pthisAccel, struct MagSensor *pthisMag, struct GyroSensor *pthisGyro,
		struct MagCalibration *pthisMagCal, int16 ithisCoordSystem, int16 iOverSampleRatio)
{	
    5c6c:	910c      	str	r1, [sp, #48]	; 0x30
    5c6e:	9205      	str	r2, [sp, #20]
    5c70:	9406      	str	r4, [sp, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1123
	int8 iColInd[6];
	int8 iRowInd[6];
	int8 iPivot[6];

	// do a reset and return if requested
	if (pthisSV->resetflag)
    5c72:	4658      	mov	r0, fp
    5c74:	56c3      	ldrsb	r3, [r0, r3]
    5c76:	2b00      	cmp	r3, #0
    5c78:	d001      	beq.n	5c7e <fRun_9DOF_GBY_KALMAN+0x36>
    5c7a:	f003 fcf7 	bl	966c <PSP_CNFG_MQX_KERNEL_LOGGING+0x166c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1134
	// *********************************************************************************
	// initial orientation lock to accelerometer and magnetometer eCompass orientation
	// *********************************************************************************

	// do a once-only orientation lock after the first valid magnetic calibration 
	if (pthisMagCal->iValidMagCal && !pthisSV->iFirstOrientationLock)
    5c7e:	4bad      	ldr	r3, [pc, #692]	; (5f34 <fRun_9DOF_GBY_KALMAN+0x2ec>)
    5c80:	9c78      	ldr	r4, [sp, #480]	; 0x1e0
    5c82:	56e3      	ldrsb	r3, [r4, r3]
    5c84:	2b00      	cmp	r3, #0
    5c86:	d020      	beq.n	5cca <fRun_9DOF_GBY_KALMAN+0x82>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1134 (discriminator 1)
    5c88:	4bab      	ldr	r3, [pc, #684]	; (5f38 <fRun_9DOF_GBY_KALMAN+0x2f0>)
    5c8a:	465f      	mov	r7, fp
    5c8c:	5efb      	ldrsh	r3, [r7, r3]
    5c8e:	2b00      	cmp	r3, #0
    5c90:	d11b      	bne.n	5cca <fRun_9DOF_GBY_KALMAN+0x82>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1137
	{
		// get the 6DOF orientation matrix and initial inclination angle
		if (ithisCoordSystem == NED)
    5c92:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    5c94:	2c00      	cmp	r4, #0
    5c96:	d101      	bne.n	5c9c <fRun_9DOF_GBY_KALMAN+0x54>
    5c98:	f003 fd92 	bl	97c0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x17c0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1141
		{
			feCompassNED(pthisSV->fRPl, &(pthisSV->fDeltaPl), pthisMag->fBcFast, pthisAccel->fGpFast);
		}
		else if (ithisCoordSystem == ANDROID)
    5c9c:	2c01      	cmp	r4, #1
    5c9e:	d101      	bne.n	5ca4 <fRun_9DOF_GBY_KALMAN+0x5c>
    5ca0:	f003 fdba 	bl	9818 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1818>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1145
		{
			feCompassAndroid(pthisSV->fRPl, &(pthisSV->fDeltaPl), pthisMag->fBcFast, pthisAccel->fGpFast);
		}
		else if (ithisCoordSystem == WIN8)
    5ca4:	2c02      	cmp	r4, #2
    5ca6:	d101      	bne.n	5cac <fRun_9DOF_GBY_KALMAN+0x64>
    5ca8:	f003 fda4 	bl	97f4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x17f4>
    5cac:	465f      	mov	r7, fp
    5cae:	3714      	adds	r7, #20
    5cb0:	970e      	str	r7, [sp, #56]	; 0x38
    5cb2:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1151
		{
			feCompassWin8(pthisSV->fRPl, &(pthisSV->fDeltaPl), pthisMag->fBcFast, pthisAccel->fGpFast);
		}

		// get the orientation quaternion from the orientation matrix
		fQuaternionFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fqPl));
    5cb4:	465f      	mov	r7, fp
    5cb6:	3738      	adds	r7, #56	; 0x38
    5cb8:	1c39      	adds	r1, r7, #0
    5cba:	9710      	str	r7, [sp, #64]	; 0x40
    5cbc:	f007 fc7c 	bl	d5b8 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1154

		// set the orientation lock flag so this initial alignment is only performed once
		pthisSV->iFirstOrientationLock = 1;
    5cc0:	4b9d      	ldr	r3, [pc, #628]	; (5f38 <fRun_9DOF_GBY_KALMAN+0x2f0>)
    5cc2:	2201      	movs	r2, #1
    5cc4:	4658      	mov	r0, fp
    5cc6:	52c2      	strh	r2, [r0, r3]
    5cc8:	e005      	b.n	5cd6 <fRun_9DOF_GBY_KALMAN+0x8e>
    5cca:	465f      	mov	r7, fp
    5ccc:	465c      	mov	r4, fp
    5cce:	3714      	adds	r7, #20
    5cd0:	3438      	adds	r4, #56	; 0x38
    5cd2:	970e      	str	r7, [sp, #56]	; 0x38
    5cd4:	9410      	str	r4, [sp, #64]	; 0x40
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1163
	// calculate a priori rotation matrix
	// *********************************************************************************

	// compute the angular velocity from the averaged high frequency gyro reading.
	// omega[k] = yG[k] - b-[k] = yG[k] - b+[k-1] (deg/s)
	pthisSV->fOmega[X] = pthisGyro->fYp[X] - pthisSV->fbPl[X];
    5cd6:	4659      	mov	r1, fp
    5cd8:	6e49      	ldr	r1, [r1, #100]	; 0x64
    5cda:	464a      	mov	r2, r9
    5cdc:	68d0      	ldr	r0, [r2, #12]
    5cde:	9103      	str	r1, [sp, #12]
    5ce0:	f7fb f982 	bl	fe8 <__aeabi_fsub>
    5ce4:	465b      	mov	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1164
	pthisSV->fOmega[Y] = pthisGyro->fYp[Y] - pthisSV->fbPl[Y];
    5ce6:	6e9c      	ldr	r4, [r3, #104]	; 0x68
    5ce8:	464f      	mov	r7, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1163
	// calculate a priori rotation matrix
	// *********************************************************************************

	// compute the angular velocity from the averaged high frequency gyro reading.
	// omega[k] = yG[k] - b-[k] = yG[k] - b+[k-1] (deg/s)
	pthisSV->fOmega[X] = pthisGyro->fYp[X] - pthisSV->fbPl[X];
    5cea:	6558      	str	r0, [r3, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1164
	pthisSV->fOmega[Y] = pthisGyro->fYp[Y] - pthisSV->fbPl[Y];
    5cec:	1c21      	adds	r1, r4, #0
    5cee:	6938      	ldr	r0, [r7, #16]
    5cf0:	f7fb f97a 	bl	fe8 <__aeabi_fsub>
    5cf4:	4659      	mov	r1, fp
    5cf6:	46a2      	mov	sl, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1165
	pthisSV->fOmega[Z] = pthisGyro->fYp[Z] - pthisSV->fbPl[Z];
    5cf8:	6ecc      	ldr	r4, [r1, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1164
	// *********************************************************************************

	// compute the angular velocity from the averaged high frequency gyro reading.
	// omega[k] = yG[k] - b-[k] = yG[k] - b+[k-1] (deg/s)
	pthisSV->fOmega[X] = pthisGyro->fYp[X] - pthisSV->fbPl[X];
	pthisSV->fOmega[Y] = pthisGyro->fYp[Y] - pthisSV->fbPl[Y];
    5cfa:	6588      	str	r0, [r1, #88]	; 0x58
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1165
	pthisSV->fOmega[Z] = pthisGyro->fYp[Z] - pthisSV->fbPl[Z];
    5cfc:	6978      	ldr	r0, [r7, #20]
    5cfe:	1c21      	adds	r1, r4, #0
    5d00:	9404      	str	r4, [sp, #16]
    5d02:	f7fb f971 	bl	fe8 <__aeabi_fsub>
    5d06:	465f      	mov	r7, fp
    5d08:	65f8      	str	r0, [r7, #92]	; 0x5c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1168

	// initialize the a priori orientation quaternion to the previous a posteriori estimate
	pthisSV->fqMi = pthisSV->fqPl;
    5d0a:	488c      	ldr	r0, [pc, #560]	; (5f3c <fRun_9DOF_GBY_KALMAN+0x2f4>)
    5d0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5d0e:	1c04      	adds	r4, r0, #0
    5d10:	445c      	add	r4, fp
    5d12:	940b      	str	r4, [sp, #44]	; 0x2c
    5d14:	1c23      	adds	r3, r4, #0
    5d16:	ca83      	ldmia	r2!, {r0, r1, r7}
    5d18:	c383      	stmia	r3!, {r0, r1, r7}
    5d1a:	6812      	ldr	r2, [r2, #0]
    5d1c:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1171

	// integrate the buffered high frequency (typically 200Hz) gyro readings
	for (j = 0; j < iOverSampleRatio; j++)
    5d1e:	9c06      	ldr	r4, [sp, #24]
    5d20:	2c00      	cmp	r4, #0
    5d22:	dc01      	bgt.n	5d28 <fRun_9DOF_GBY_KALMAN+0xe0>
    5d24:	f003 fcac 	bl	9680 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1680>
    5d28:	4885      	ldr	r0, [pc, #532]	; (5f40 <fRun_9DOF_GBY_KALMAN+0x2f8>)
    5d2a:	2700      	movs	r7, #0
    5d2c:	1c04      	adds	r4, r0, #0
    5d2e:	445c      	add	r4, fp
    5d30:	9409      	str	r4, [sp, #36]	; 0x24
    5d32:	46b8      	mov	r8, r7
    5d34:	2300      	movs	r3, #0
    5d36:	ac1d      	add	r4, sp, #116	; 0x74
    5d38:	e008      	b.n	5d4c <fRun_9DOF_GBY_KALMAN+0x104>
    5d3a:	4658      	mov	r0, fp
    5d3c:	4659      	mov	r1, fp
    5d3e:	465a      	mov	r2, fp
    5d40:	6e40      	ldr	r0, [r0, #100]	; 0x64
    5d42:	6e89      	ldr	r1, [r1, #104]	; 0x68
    5d44:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
    5d46:	9003      	str	r0, [sp, #12]
    5d48:	468a      	mov	sl, r1
    5d4a:	9204      	str	r2, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1176
	{
		// compute the incremental fast (typically 200Hz) rotation vector rvec (deg)
		for (i = X; i <= Z; i++)
		{
			rvec[i] = (((float)pthisGyro->iYpFast[j][i] * pthisGyro->fDegPerSecPerCount) - pthisSV->fbPl[i]) * pthisSV->fFastdeltat;
    5d4c:	005f      	lsls	r7, r3, #1
    5d4e:	18ff      	adds	r7, r7, r3
    5d50:	4648      	mov	r0, r9
    5d52:	007f      	lsls	r7, r7, #1
    5d54:	4a7b      	ldr	r2, [pc, #492]	; (5f44 <fRun_9DOF_GBY_KALMAN+0x2fc>)
    5d56:	6986      	ldr	r6, [r0, #24]
    5d58:	444f      	add	r7, r9
    5d5a:	231c      	movs	r3, #28
    5d5c:	5ef8      	ldrsh	r0, [r7, r3]
    5d5e:	4659      	mov	r1, fp
    5d60:	588d      	ldr	r5, [r1, r2]
    5d62:	f7fb fad7 	bl	1314 <__aeabi_i2f>
    5d66:	1c31      	adds	r1, r6, #0
    5d68:	f7fb f814 	bl	d94 <__aeabi_fmul>
    5d6c:	9903      	ldr	r1, [sp, #12]
    5d6e:	f7fb f93b 	bl	fe8 <__aeabi_fsub>
    5d72:	1c29      	adds	r1, r5, #0
    5d74:	f7fb f80e 	bl	d94 <__aeabi_fmul>
    5d78:	6020      	str	r0, [r4, #0]
    5d7a:	211e      	movs	r1, #30
    5d7c:	5e78      	ldrsh	r0, [r7, r1]
    5d7e:	f7fb fac9 	bl	1314 <__aeabi_i2f>
    5d82:	1c31      	adds	r1, r6, #0
    5d84:	f7fb f806 	bl	d94 <__aeabi_fmul>
    5d88:	4651      	mov	r1, sl
    5d8a:	f7fb f92d 	bl	fe8 <__aeabi_fsub>
    5d8e:	1c29      	adds	r1, r5, #0
    5d90:	f7fb f800 	bl	d94 <__aeabi_fmul>
    5d94:	6060      	str	r0, [r4, #4]
    5d96:	2220      	movs	r2, #32
    5d98:	5eb8      	ldrsh	r0, [r7, r2]
    5d9a:	f7fb fabb 	bl	1314 <__aeabi_i2f>
    5d9e:	1c01      	adds	r1, r0, #0
    5da0:	1c30      	adds	r0, r6, #0
    5da2:	f7fa fff7 	bl	d94 <__aeabi_fmul>
    5da6:	9904      	ldr	r1, [sp, #16]
    5da8:	f7fb f91e 	bl	fe8 <__aeabi_fsub>
    5dac:	1c01      	adds	r1, r0, #0
    5dae:	1c28      	adds	r0, r5, #0
    5db0:	f7fa fff0 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1180
		}

		// compute the incremental quaternion fDeltaq from the rotation vector
		fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), rvec, 1.0F);
    5db4:	22fe      	movs	r2, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1176
	for (j = 0; j < iOverSampleRatio; j++)
	{
		// compute the incremental fast (typically 200Hz) rotation vector rvec (deg)
		for (i = X; i <= Z; i++)
		{
			rvec[i] = (((float)pthisGyro->iYpFast[j][i] * pthisGyro->fDegPerSecPerCount) - pthisSV->fbPl[i]) * pthisSV->fFastdeltat;
    5db6:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1180
		}

		// compute the incremental quaternion fDeltaq from the rotation vector
		fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), rvec, 1.0F);
    5db8:	ac1d      	add	r4, sp, #116	; 0x74
    5dba:	9809      	ldr	r0, [sp, #36]	; 0x24
    5dbc:	1c21      	adds	r1, r4, #0
    5dbe:	0592      	lsls	r2, r2, #22
    5dc0:	f007 fb30 	bl	d424 <fQuaternionFromRotationVectorDeg>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1184

		// incrementally rotate the a priori orientation quaternion fqMi
		// the a posteriori quaternion fqPl is re-normalized later so this update is stable
		qAeqAxB(&(pthisSV->fqMi), &(pthisSV->fDeltaq));
    5dc4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5dc6:	9909      	ldr	r1, [sp, #36]	; 0x24
    5dc8:	f008 f8b2 	bl	df30 <qAeqAxB>
    5dcc:	4643      	mov	r3, r8
    5dce:	3301      	adds	r3, #1
    5dd0:	b2db      	uxtb	r3, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1171

	// initialize the a priori orientation quaternion to the previous a posteriori estimate
	pthisSV->fqMi = pthisSV->fqPl;

	// integrate the buffered high frequency (typically 200Hz) gyro readings
	for (j = 0; j < iOverSampleRatio; j++)
    5dd2:	9f06      	ldr	r7, [sp, #24]
    5dd4:	4698      	mov	r8, r3
    5dd6:	b25b      	sxtb	r3, r3
    5dd8:	42bb      	cmp	r3, r7
    5dda:	dbae      	blt.n	5d3a <fRun_9DOF_GBY_KALMAN+0xf2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1188
		// the a posteriori quaternion fqPl is re-normalized later so this update is stable
		qAeqAxB(&(pthisSV->fqMi), &(pthisSV->fDeltaq));
	}

	// get the a priori rotation matrix from the a priori quaternion
	fRotationMatrixFromQuaternion(pthisSV->fRMi, &(pthisSV->fqMi));
    5ddc:	27fb      	movs	r7, #251	; 0xfb
    5dde:	00ff      	lsls	r7, r7, #3
    5de0:	1c38      	adds	r0, r7, #0
    5de2:	4458      	add	r0, fp
    5de4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    5de6:	f007 fc87 	bl	d6f8 <fRotationMatrixFromQuaternion>
    5dea:	2386      	movs	r3, #134	; 0x86
    5dec:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    5dee:	005b      	lsls	r3, r3, #1
    5df0:	4658      	mov	r0, fp
    5df2:	58c4      	ldr	r4, [r0, r3]
    5df4:	2f00      	cmp	r7, #0
    5df6:	d100      	bne.n	5dfa <fRun_9DOF_GBY_KALMAN+0x1b2>
    5df8:	e0ac      	b.n	5f54 <fRun_9DOF_GBY_KALMAN+0x30c>
    5dfa:	2384      	movs	r3, #132	; 0x84
    5dfc:	005b      	lsls	r3, r3, #1
    5dfe:	2f02      	cmp	r7, #2
    5e00:	d101      	bne.n	5e06 <fRun_9DOF_GBY_KALMAN+0x1be>
    5e02:	f003 f84b 	bl	8e9c <PSP_CNFG_MQX_KERNEL_LOGGING+0xe9c>
    5e06:	58c7      	ldr	r7, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1208
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    5e08:	23fc      	movs	r3, #252	; 0xfc
    5e0a:	00db      	lsls	r3, r3, #3
    5e0c:	58c5      	ldr	r5, [r0, r3]
    5e0e:	2080      	movs	r0, #128	; 0x80
    5e10:	0600      	lsls	r0, r0, #24
    5e12:	182a      	adds	r2, r5, r0
    5e14:	4659      	mov	r1, fp
    5e16:	23ec      	movs	r3, #236	; 0xec
    5e18:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    5e1a:	23bc      	movs	r3, #188	; 0xbc
    5e1c:	58c8      	ldr	r0, [r1, r3]
    5e1e:	21fc      	movs	r1, #252	; 0xfc
    5e20:	0589      	lsls	r1, r1, #22
    5e22:	f7fa ffb7 	bl	d94 <__aeabi_fmul>
    5e26:	465a      	mov	r2, fp
    5e28:	23ac      	movs	r3, #172	; 0xac
    5e2a:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1223
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
		}
		else
		{
			// Android has negative sign for gravity: y = a - g, g = -y + a
			pthisSV->fgErrSeMi[i] = -pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5e2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5e2e:	68d9      	ldr	r1, [r3, #12]
    5e30:	f7fb f8da 	bl	fe8 <__aeabi_fsub>
    5e34:	1c01      	adds	r1, r0, #0
    5e36:	1c28      	adds	r0, r5, #0
    5e38:	f7fa fc5c 	bl	6f4 <__aeabi_fadd>
    5e3c:	23d4      	movs	r3, #212	; 0xd4
    5e3e:	4659      	mov	r1, fp
    5e40:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    5e42:	4b41      	ldr	r3, [pc, #260]	; (5f48 <fRun_9DOF_GBY_KALMAN+0x300>)
    5e44:	1c38      	adds	r0, r7, #0
    5e46:	58c9      	ldr	r1, [r1, r3]
    5e48:	f7fa ffa4 	bl	d94 <__aeabi_fmul>
    5e4c:	1c21      	adds	r1, r4, #0
    5e4e:	1c06      	adds	r6, r0, #0
    5e50:	1c28      	adds	r0, r5, #0
    5e52:	f7fa ff9f 	bl	d94 <__aeabi_fmul>
    5e56:	1c01      	adds	r1, r0, #0
    5e58:	1c30      	adds	r0, r6, #0
    5e5a:	f7fa fc4b 	bl	6f4 <__aeabi_fadd>
    5e5e:	465a      	mov	r2, fp
    5e60:	23f8      	movs	r3, #248	; 0xf8
    5e62:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    5e64:	9b05      	ldr	r3, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    5e66:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    5e68:	6a58      	ldr	r0, [r3, #36]	; 0x24
    5e6a:	f7fb f8bd 	bl	fe8 <__aeabi_fsub>
    5e6e:	4659      	mov	r1, fp
    5e70:	23e0      	movs	r3, #224	; 0xe0
    5e72:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1208
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    5e74:	4b35      	ldr	r3, [pc, #212]	; (5f4c <fRun_9DOF_GBY_KALMAN+0x304>)
    5e76:	58cd      	ldr	r5, [r1, r3]
    5e78:	2380      	movs	r3, #128	; 0x80
    5e7a:	061b      	lsls	r3, r3, #24
    5e7c:	18ea      	adds	r2, r5, r3
    5e7e:	23f0      	movs	r3, #240	; 0xf0
    5e80:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    5e82:	23c0      	movs	r3, #192	; 0xc0
    5e84:	58c8      	ldr	r0, [r1, r3]
    5e86:	21fc      	movs	r1, #252	; 0xfc
    5e88:	0589      	lsls	r1, r1, #22
    5e8a:	f7fa ff83 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1223
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
		}
		else
		{
			// Android has negative sign for gravity: y = a - g, g = -y + a
			pthisSV->fgErrSeMi[i] = -pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5e8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    5e90:	23b0      	movs	r3, #176	; 0xb0
    5e92:	4659      	mov	r1, fp
    5e94:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1223
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
		}
		else
		{
			// Android has negative sign for gravity: y = a - g, g = -y + a
			pthisSV->fgErrSeMi[i] = -pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5e96:	6911      	ldr	r1, [r2, #16]
    5e98:	f7fb f8a6 	bl	fe8 <__aeabi_fsub>
    5e9c:	1c01      	adds	r1, r0, #0
    5e9e:	1c28      	adds	r0, r5, #0
    5ea0:	f7fa fc28 	bl	6f4 <__aeabi_fadd>
    5ea4:	23d8      	movs	r3, #216	; 0xd8
    5ea6:	4659      	mov	r1, fp
    5ea8:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    5eaa:	23fd      	movs	r3, #253	; 0xfd
    5eac:	00db      	lsls	r3, r3, #3
    5eae:	58c9      	ldr	r1, [r1, r3]
    5eb0:	1c38      	adds	r0, r7, #0
    5eb2:	f7fa ff6f 	bl	d94 <__aeabi_fmul>
    5eb6:	1c21      	adds	r1, r4, #0
    5eb8:	1c06      	adds	r6, r0, #0
    5eba:	1c28      	adds	r0, r5, #0
    5ebc:	f7fa ff6a 	bl	d94 <__aeabi_fmul>
    5ec0:	1c01      	adds	r1, r0, #0
    5ec2:	1c30      	adds	r0, r6, #0
    5ec4:	f7fa fc16 	bl	6f4 <__aeabi_fadd>
    5ec8:	465a      	mov	r2, fp
    5eca:	23fc      	movs	r3, #252	; 0xfc
    5ecc:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    5ece:	9b05      	ldr	r3, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    5ed0:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    5ed2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5ed4:	f7fb f888 	bl	fe8 <__aeabi_fsub>
    5ed8:	4659      	mov	r1, fp
    5eda:	23e4      	movs	r3, #228	; 0xe4
    5edc:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1208
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    5ede:	23ff      	movs	r3, #255	; 0xff
    5ee0:	00db      	lsls	r3, r3, #3
    5ee2:	58cd      	ldr	r5, [r1, r3]
    5ee4:	2380      	movs	r3, #128	; 0x80
    5ee6:	061b      	lsls	r3, r3, #24
    5ee8:	18ea      	adds	r2, r5, r3
    5eea:	23f4      	movs	r3, #244	; 0xf4
    5eec:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    5eee:	23c4      	movs	r3, #196	; 0xc4
    5ef0:	58c8      	ldr	r0, [r1, r3]
    5ef2:	21fc      	movs	r1, #252	; 0xfc
    5ef4:	0589      	lsls	r1, r1, #22
    5ef6:	f7fa ff4d 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1223
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
		}
		else
		{
			// Android has negative sign for gravity: y = a - g, g = -y + a
			pthisSV->fgErrSeMi[i] = -pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5efa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    5efc:	4659      	mov	r1, fp
    5efe:	23b4      	movs	r3, #180	; 0xb4
    5f00:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1223
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
		}
		else
		{
			// Android has negative sign for gravity: y = a - g, g = -y + a
			pthisSV->fgErrSeMi[i] = -pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5f02:	6951      	ldr	r1, [r2, #20]
    5f04:	f7fb f870 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5f08:	1c01      	adds	r1, r0, #0
    5f0a:	1c28      	adds	r0, r5, #0
    5f0c:	f7fa fbf2 	bl	6f4 <__aeabi_fadd>
    5f10:	23dc      	movs	r3, #220	; 0xdc
    5f12:	4659      	mov	r1, fp
    5f14:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    5f16:	4b0e      	ldr	r3, [pc, #56]	; (5f50 <fRun_9DOF_GBY_KALMAN+0x308>)
    5f18:	1c38      	adds	r0, r7, #0
    5f1a:	58c9      	ldr	r1, [r1, r3]
    5f1c:	f7fa ff3a 	bl	d94 <__aeabi_fmul>
    5f20:	1c21      	adds	r1, r4, #0
    5f22:	1c06      	adds	r6, r0, #0
    5f24:	1c28      	adds	r0, r5, #0
    5f26:	f7fa ff35 	bl	d94 <__aeabi_fmul>
    5f2a:	1c01      	adds	r1, r0, #0
    5f2c:	1c30      	adds	r0, r6, #0
    5f2e:	e09b      	b.n	6068 <fRun_9DOF_GBY_KALMAN+0x420>
    5f30:	00000836 	.word	0x00000836
    5f34:	00000416 	.word	0x00000416
    5f38:	00000834 	.word	0x00000834
    5f3c:	0000080c 	.word	0x0000080c
    5f40:	000007fc 	.word	0x000007fc
    5f44:	00000824 	.word	0x00000824
    5f48:	000007dc 	.word	0x000007dc
    5f4c:	000007ec 	.word	0x000007ec
    5f50:	000007f4 	.word	0x000007f4
    5f54:	2382      	movs	r3, #130	; 0x82
    5f56:	005b      	lsls	r3, r3, #1
    5f58:	58c5      	ldr	r5, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1203
		// compute the a priori gyro estimate of the gravitational vector (g, sensor frame)
		// using an absolute rotation of the global frame gravity vector (with magnitude 1g)
		if (ithisCoordSystem == NED)
		{
			// NED gravity is along positive z axis
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
    5f5a:	23fc      	movs	r3, #252	; 0xfc
    5f5c:	00db      	lsls	r3, r3, #3
    5f5e:	58c6      	ldr	r6, [r0, r3]
    5f60:	23ec      	movs	r3, #236	; 0xec
    5f62:	50c6      	str	r6, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    5f64:	21fc      	movs	r1, #252	; 0xfc
    5f66:	23bc      	movs	r3, #188	; 0xbc
    5f68:	58c0      	ldr	r0, [r0, r3]
    5f6a:	0589      	lsls	r1, r1, #22
    5f6c:	f7fa ff12 	bl	d94 <__aeabi_fmul>
    5f70:	465f      	mov	r7, fp
    5f72:	23ac      	movs	r3, #172	; 0xac
    5f74:	50f8      	str	r0, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5f76:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    5f78:	68f9      	ldr	r1, [r7, #12]
    5f7a:	f7fa fbbb 	bl	6f4 <__aeabi_fadd>
    5f7e:	1c31      	adds	r1, r6, #0
    5f80:	f7fb f832 	bl	fe8 <__aeabi_fsub>
    5f84:	23d4      	movs	r3, #212	; 0xd4
    5f86:	4659      	mov	r1, fp
    5f88:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1231
		// compute the a priori gyro estimate of the geomagnetic vector (uT, sensor frame)
		// using an absolute rotation of the global frame geomagnetic vector (with magnitude B uT)
		if (ithisCoordSystem == NED)
		{
			// NED y component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    5f8a:	23fb      	movs	r3, #251	; 0xfb
    5f8c:	00db      	lsls	r3, r3, #3
    5f8e:	58c9      	ldr	r1, [r1, r3]
    5f90:	1c28      	adds	r0, r5, #0
    5f92:	f7fa feff 	bl	d94 <__aeabi_fmul>
    5f96:	1c21      	adds	r1, r4, #0
    5f98:	1c07      	adds	r7, r0, #0
    5f9a:	1c30      	adds	r0, r6, #0
    5f9c:	f7fa fefa 	bl	d94 <__aeabi_fmul>
    5fa0:	1c01      	adds	r1, r0, #0
    5fa2:	1c38      	adds	r0, r7, #0
    5fa4:	f7fa fba6 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    5fa8:	9f05      	ldr	r7, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1231
		// compute the a priori gyro estimate of the geomagnetic vector (uT, sensor frame)
		// using an absolute rotation of the global frame geomagnetic vector (with magnitude B uT)
		if (ithisCoordSystem == NED)
		{
			// NED y component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    5faa:	465a      	mov	r2, fp
    5fac:	23f8      	movs	r3, #248	; 0xf8
    5fae:	50d0      	str	r0, [r2, r3]
    5fb0:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    5fb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
    5fb4:	f7fb f818 	bl	fe8 <__aeabi_fsub>
    5fb8:	4659      	mov	r1, fp
    5fba:	23e0      	movs	r3, #224	; 0xe0
    5fbc:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1203
		// compute the a priori gyro estimate of the gravitational vector (g, sensor frame)
		// using an absolute rotation of the global frame gravity vector (with magnitude 1g)
		if (ithisCoordSystem == NED)
		{
			// NED gravity is along positive z axis
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
    5fbe:	4bbe      	ldr	r3, [pc, #760]	; (62b8 <fRun_9DOF_GBY_KALMAN+0x670>)
    5fc0:	58ce      	ldr	r6, [r1, r3]
    5fc2:	23f0      	movs	r3, #240	; 0xf0
    5fc4:	50ce      	str	r6, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    5fc6:	23c0      	movs	r3, #192	; 0xc0
    5fc8:	58c8      	ldr	r0, [r1, r3]
    5fca:	21fc      	movs	r1, #252	; 0xfc
    5fcc:	0589      	lsls	r1, r1, #22
    5fce:	f7fa fee1 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5fd2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    5fd4:	465a      	mov	r2, fp
    5fd6:	23b0      	movs	r3, #176	; 0xb0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5fd8:	6939      	ldr	r1, [r7, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    5fda:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    5fdc:	f7fa fb8a 	bl	6f4 <__aeabi_fadd>
    5fe0:	1c31      	adds	r1, r6, #0
    5fe2:	f7fb f801 	bl	fe8 <__aeabi_fsub>
    5fe6:	23d8      	movs	r3, #216	; 0xd8
    5fe8:	4659      	mov	r1, fp
    5fea:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1231
		// compute the a priori gyro estimate of the geomagnetic vector (uT, sensor frame)
		// using an absolute rotation of the global frame geomagnetic vector (with magnitude B uT)
		if (ithisCoordSystem == NED)
		{
			// NED y component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    5fec:	4bb3      	ldr	r3, [pc, #716]	; (62bc <fRun_9DOF_GBY_KALMAN+0x674>)
    5fee:	1c28      	adds	r0, r5, #0
    5ff0:	58c9      	ldr	r1, [r1, r3]
    5ff2:	f7fa fecf 	bl	d94 <__aeabi_fmul>
    5ff6:	1c21      	adds	r1, r4, #0
    5ff8:	1c07      	adds	r7, r0, #0
    5ffa:	1c30      	adds	r0, r6, #0
    5ffc:	f7fa feca 	bl	d94 <__aeabi_fmul>
    6000:	1c01      	adds	r1, r0, #0
    6002:	1c38      	adds	r0, r7, #0
    6004:	f7fa fb76 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    6008:	9f05      	ldr	r7, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1231
		// compute the a priori gyro estimate of the geomagnetic vector (uT, sensor frame)
		// using an absolute rotation of the global frame geomagnetic vector (with magnitude B uT)
		if (ithisCoordSystem == NED)
		{
			// NED y component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    600a:	465a      	mov	r2, fp
    600c:	23fc      	movs	r3, #252	; 0xfc
    600e:	50d0      	str	r0, [r2, r3]
    6010:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    6012:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    6014:	f7fa ffe8 	bl	fe8 <__aeabi_fsub>
    6018:	4659      	mov	r1, fp
    601a:	23e4      	movs	r3, #228	; 0xe4
    601c:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1203
		// compute the a priori gyro estimate of the gravitational vector (g, sensor frame)
		// using an absolute rotation of the global frame gravity vector (with magnitude 1g)
		if (ithisCoordSystem == NED)
		{
			// NED gravity is along positive z axis
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
    601e:	23ff      	movs	r3, #255	; 0xff
    6020:	00db      	lsls	r3, r3, #3
    6022:	58ce      	ldr	r6, [r1, r3]
    6024:	23f4      	movs	r3, #244	; 0xf4
    6026:	50ce      	str	r6, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    6028:	23c4      	movs	r3, #196	; 0xc4
    602a:	58c8      	ldr	r0, [r1, r3]
    602c:	21fc      	movs	r1, #252	; 0xfc
    602e:	0589      	lsls	r1, r1, #22
    6030:	f7fa feb0 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    6034:	9f0c      	ldr	r7, [sp, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    6036:	465a      	mov	r2, fp
    6038:	23b4      	movs	r3, #180	; 0xb4
    603a:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    603c:	6979      	ldr	r1, [r7, #20]
    603e:	f7fa fb59 	bl	6f4 <__aeabi_fadd>
    6042:	1c31      	adds	r1, r6, #0
    6044:	f7fa ffd0 	bl	fe8 <__aeabi_fsub>
    6048:	23dc      	movs	r3, #220	; 0xdc
    604a:	4659      	mov	r1, fp
    604c:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1231
		// compute the a priori gyro estimate of the geomagnetic vector (uT, sensor frame)
		// using an absolute rotation of the global frame geomagnetic vector (with magnitude B uT)
		if (ithisCoordSystem == NED)
		{
			// NED y component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    604e:	23fe      	movs	r3, #254	; 0xfe
    6050:	00db      	lsls	r3, r3, #3
    6052:	58c9      	ldr	r1, [r1, r3]
    6054:	1c28      	adds	r0, r5, #0
    6056:	f7fa fe9d 	bl	d94 <__aeabi_fmul>
    605a:	1c21      	adds	r1, r4, #0
    605c:	1c05      	adds	r5, r0, #0
    605e:	1c30      	adds	r0, r6, #0
    6060:	f7fa fe98 	bl	d94 <__aeabi_fmul>
    6064:	1c01      	adds	r1, r0, #0
    6066:	1c28      	adds	r0, r5, #0
    6068:	f7fa fb44 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    606c:	9c05      	ldr	r4, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1231
		// compute the a priori gyro estimate of the geomagnetic vector (uT, sensor frame)
		// using an absolute rotation of the global frame geomagnetic vector (with magnitude B uT)
		if (ithisCoordSystem == NED)
		{
			// NED y component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    606e:	2380      	movs	r3, #128	; 0x80
    6070:	465a      	mov	r2, fp
    6072:	005b      	lsls	r3, r3, #1
    6074:	50d0      	str	r0, [r2, r3]
    6076:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    6078:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    607a:	f7fa ffb5 	bl	fe8 <__aeabi_fsub>
    607e:	465f      	mov	r7, fp
    6080:	23e8      	movs	r3, #232	; 0xe8
    6082:	50f8      	str	r0, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1248
	// *********************************************************************************
	// update variable elements of measurement matrix C
	// *********************************************************************************

	// update measurement matrix C with -alpha(g-)x and -alpha(m-)x from gyro (g, uT, sensor frame)
	pthisSV->fC6x12[0][1] = FDEGTORAD * pthisSV->fgSeGyMi[Z];
    6084:	23f4      	movs	r3, #244	; 0xf4
    6086:	58f8      	ldr	r0, [r7, r3]
    6088:	498d      	ldr	r1, [pc, #564]	; (62c0 <fRun_9DOF_GBY_KALMAN+0x678>)
    608a:	f7fa fe83 	bl	d94 <__aeabi_fmul>
    608e:	4b8d      	ldr	r3, [pc, #564]	; (62c4 <fRun_9DOF_GBY_KALMAN+0x67c>)
    6090:	465a      	mov	r2, fp
    6092:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1249
	pthisSV->fC6x12[0][2] = -FDEGTORAD * pthisSV->fgSeGyMi[Y];
    6094:	23f0      	movs	r3, #240	; 0xf0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1248
	// *********************************************************************************
	// update variable elements of measurement matrix C
	// *********************************************************************************

	// update measurement matrix C with -alpha(g-)x and -alpha(m-)x from gyro (g, uT, sensor frame)
	pthisSV->fC6x12[0][1] = FDEGTORAD * pthisSV->fgSeGyMi[Z];
    6096:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1249
	pthisSV->fC6x12[0][2] = -FDEGTORAD * pthisSV->fgSeGyMi[Y];
    6098:	498b      	ldr	r1, [pc, #556]	; (62c8 <fRun_9DOF_GBY_KALMAN+0x680>)
    609a:	58f8      	ldr	r0, [r7, r3]
    609c:	f7fa fe7a 	bl	d94 <__aeabi_fmul>
    60a0:	23d8      	movs	r3, #216	; 0xd8
    60a2:	465c      	mov	r4, fp
    60a4:	00db      	lsls	r3, r3, #3
    60a6:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1250
	pthisSV->fC6x12[1][2] = FDEGTORAD * pthisSV->fgSeGyMi[X];
    60a8:	23ec      	movs	r3, #236	; 0xec
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1249
	// update variable elements of measurement matrix C
	// *********************************************************************************

	// update measurement matrix C with -alpha(g-)x and -alpha(m-)x from gyro (g, uT, sensor frame)
	pthisSV->fC6x12[0][1] = FDEGTORAD * pthisSV->fgSeGyMi[Z];
	pthisSV->fC6x12[0][2] = -FDEGTORAD * pthisSV->fgSeGyMi[Y];
    60aa:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1250
	pthisSV->fC6x12[1][2] = FDEGTORAD * pthisSV->fgSeGyMi[X];
    60ac:	4984      	ldr	r1, [pc, #528]	; (62c0 <fRun_9DOF_GBY_KALMAN+0x678>)
    60ae:	58f8      	ldr	r0, [r7, r3]
    60b0:	f7fa fe70 	bl	d94 <__aeabi_fmul>
    60b4:	23de      	movs	r3, #222	; 0xde
    60b6:	00db      	lsls	r3, r3, #3
    60b8:	50e0      	str	r0, [r4, r3]
    60ba:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1251
	pthisSV->fC6x12[1][0] = -pthisSV->fC6x12[0][1];
    60bc:	2080      	movs	r0, #128	; 0x80
    60be:	0600      	lsls	r0, r0, #24
    60c0:	23dd      	movs	r3, #221	; 0xdd
    60c2:	182a      	adds	r2, r5, r0
    60c4:	00db      	lsls	r3, r3, #3
    60c6:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1252
	pthisSV->fC6x12[2][0] = -pthisSV->fC6x12[0][2];
    60c8:	23e3      	movs	r3, #227	; 0xe3
    60ca:	1832      	adds	r2, r6, r0
    60cc:	00db      	lsls	r3, r3, #3
    60ce:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1253
	pthisSV->fC6x12[2][1] = -pthisSV->fC6x12[1][2];
    60d0:	4b7e      	ldr	r3, [pc, #504]	; (62cc <fRun_9DOF_GBY_KALMAN+0x684>)
    60d2:	183a      	adds	r2, r7, r0
    60d4:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1254
	pthisSV->fC6x12[3][1] = FDEGTORAD * pthisSV->fmSeGyMi[Z];
    60d6:	2380      	movs	r3, #128	; 0x80
    60d8:	005b      	lsls	r3, r3, #1
    60da:	58e0      	ldr	r0, [r4, r3]
    60dc:	4978      	ldr	r1, [pc, #480]	; (62c0 <fRun_9DOF_GBY_KALMAN+0x678>)
    60de:	f7fa fe59 	bl	d94 <__aeabi_fmul>
    60e2:	4b7b      	ldr	r3, [pc, #492]	; (62d0 <fRun_9DOF_GBY_KALMAN+0x688>)
    60e4:	4680      	mov	r8, r0
    60e6:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1255
	pthisSV->fC6x12[3][2] = -FDEGTORAD * pthisSV->fmSeGyMi[Y];
    60e8:	23fc      	movs	r3, #252	; 0xfc
    60ea:	58e0      	ldr	r0, [r4, r3]
    60ec:	4976      	ldr	r1, [pc, #472]	; (62c8 <fRun_9DOF_GBY_KALMAN+0x680>)
    60ee:	f7fa fe51 	bl	d94 <__aeabi_fmul>
    60f2:	23ea      	movs	r3, #234	; 0xea
    60f4:	00db      	lsls	r3, r3, #3
    60f6:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1256
	pthisSV->fC6x12[4][2] = FDEGTORAD * pthisSV->fmSeGyMi[X];
    60f8:	23f8      	movs	r3, #248	; 0xf8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1255
	pthisSV->fC6x12[1][2] = FDEGTORAD * pthisSV->fgSeGyMi[X];
	pthisSV->fC6x12[1][0] = -pthisSV->fC6x12[0][1];
	pthisSV->fC6x12[2][0] = -pthisSV->fC6x12[0][2];
	pthisSV->fC6x12[2][1] = -pthisSV->fC6x12[1][2];
	pthisSV->fC6x12[3][1] = FDEGTORAD * pthisSV->fmSeGyMi[Z];
	pthisSV->fC6x12[3][2] = -FDEGTORAD * pthisSV->fmSeGyMi[Y];
    60fa:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1256
	pthisSV->fC6x12[4][2] = FDEGTORAD * pthisSV->fmSeGyMi[X];
    60fc:	4970      	ldr	r1, [pc, #448]	; (62c0 <fRun_9DOF_GBY_KALMAN+0x678>)
    60fe:	58e0      	ldr	r0, [r4, r3]
    6100:	f7fa fe48 	bl	d94 <__aeabi_fmul>
    6104:	23f0      	movs	r3, #240	; 0xf0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1257
	pthisSV->fC6x12[4][0] = -pthisSV->fC6x12[3][1];
    6106:	2180      	movs	r1, #128	; 0x80
    6108:	0609      	lsls	r1, r1, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1256
	pthisSV->fC6x12[1][0] = -pthisSV->fC6x12[0][1];
	pthisSV->fC6x12[2][0] = -pthisSV->fC6x12[0][2];
	pthisSV->fC6x12[2][1] = -pthisSV->fC6x12[1][2];
	pthisSV->fC6x12[3][1] = FDEGTORAD * pthisSV->fmSeGyMi[Z];
	pthisSV->fC6x12[3][2] = -FDEGTORAD * pthisSV->fmSeGyMi[Y];
	pthisSV->fC6x12[4][2] = FDEGTORAD * pthisSV->fmSeGyMi[X];
    610a:	00db      	lsls	r3, r3, #3
    610c:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1257
	pthisSV->fC6x12[4][0] = -pthisSV->fC6x12[3][1];
    610e:	1c0a      	adds	r2, r1, #0
    6110:	23ef      	movs	r3, #239	; 0xef
    6112:	4442      	add	r2, r8
    6114:	00db      	lsls	r3, r3, #3
    6116:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1258
	pthisSV->fC6x12[5][0] = -pthisSV->fC6x12[3][2];
    6118:	1c0a      	adds	r2, r1, #0
    611a:	23f5      	movs	r3, #245	; 0xf5
    611c:	444a      	add	r2, r9
    611e:	00db      	lsls	r3, r3, #3
    6120:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1256
	pthisSV->fC6x12[1][0] = -pthisSV->fC6x12[0][1];
	pthisSV->fC6x12[2][0] = -pthisSV->fC6x12[0][2];
	pthisSV->fC6x12[2][1] = -pthisSV->fC6x12[1][2];
	pthisSV->fC6x12[3][1] = FDEGTORAD * pthisSV->fmSeGyMi[Z];
	pthisSV->fC6x12[3][2] = -FDEGTORAD * pthisSV->fmSeGyMi[Y];
	pthisSV->fC6x12[4][2] = FDEGTORAD * pthisSV->fmSeGyMi[X];
    6122:	4682      	mov	sl, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1259
	pthisSV->fC6x12[4][0] = -pthisSV->fC6x12[3][1];
	pthisSV->fC6x12[5][0] = -pthisSV->fC6x12[3][2];
	pthisSV->fC6x12[5][1] = -pthisSV->fC6x12[4][2];
    6124:	1c0a      	adds	r2, r1, #0
    6126:	4b6b      	ldr	r3, [pc, #428]	; (62d4 <fRun_9DOF_GBY_KALMAN+0x68c>)
    6128:	4452      	add	r2, sl
    612a:	4658      	mov	r0, fp
    612c:	50c2      	str	r2, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1260
	pthisSV->fC6x12[0][4] = -pthisSV->fdeltat * pthisSV->fC6x12[0][1];
    612e:	4b6a      	ldr	r3, [pc, #424]	; (62d8 <fRun_9DOF_GBY_KALMAN+0x690>)
    6130:	58c4      	ldr	r4, [r0, r3]
    6132:	1c28      	adds	r0, r5, #0
    6134:	1864      	adds	r4, r4, r1
    6136:	1c21      	adds	r1, r4, #0
    6138:	f7fa fe2c 	bl	d94 <__aeabi_fmul>
    613c:	23d9      	movs	r3, #217	; 0xd9
    613e:	465a      	mov	r2, fp
    6140:	00db      	lsls	r3, r3, #3
    6142:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1261
	pthisSV->fC6x12[0][5] = -pthisSV->fdeltat * pthisSV->fC6x12[0][2];
    6144:	1c21      	adds	r1, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1260
	pthisSV->fC6x12[3][2] = -FDEGTORAD * pthisSV->fmSeGyMi[Y];
	pthisSV->fC6x12[4][2] = FDEGTORAD * pthisSV->fmSeGyMi[X];
	pthisSV->fC6x12[4][0] = -pthisSV->fC6x12[3][1];
	pthisSV->fC6x12[5][0] = -pthisSV->fC6x12[3][2];
	pthisSV->fC6x12[5][1] = -pthisSV->fC6x12[4][2];
	pthisSV->fC6x12[0][4] = -pthisSV->fdeltat * pthisSV->fC6x12[0][1];
    6146:	9003      	str	r0, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1261
	pthisSV->fC6x12[0][5] = -pthisSV->fdeltat * pthisSV->fC6x12[0][2];
    6148:	1c30      	adds	r0, r6, #0
    614a:	f7fa fe23 	bl	d94 <__aeabi_fmul>
    614e:	4b63      	ldr	r3, [pc, #396]	; (62dc <fRun_9DOF_GBY_KALMAN+0x694>)
    6150:	1c05      	adds	r5, r0, #0
    6152:	4658      	mov	r0, fp
    6154:	50c5      	str	r5, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1262
	pthisSV->fC6x12[1][5] = -pthisSV->fdeltat * pthisSV->fC6x12[1][2];
    6156:	1c21      	adds	r1, r4, #0
    6158:	1c38      	adds	r0, r7, #0
    615a:	f7fa fe1b 	bl	d94 <__aeabi_fmul>
    615e:	4b60      	ldr	r3, [pc, #384]	; (62e0 <fRun_9DOF_GBY_KALMAN+0x698>)
    6160:	4659      	mov	r1, fp
    6162:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1263
	pthisSV->fC6x12[1][3]= -pthisSV->fC6x12[0][4];
    6164:	2780      	movs	r7, #128	; 0x80
    6166:	9b03      	ldr	r3, [sp, #12]
    6168:	063f      	lsls	r7, r7, #24
    616a:	19da      	adds	r2, r3, r7
    616c:	4b5d      	ldr	r3, [pc, #372]	; (62e4 <fRun_9DOF_GBY_KALMAN+0x69c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1264
	pthisSV->fC6x12[2][3]= -pthisSV->fC6x12[0][5];
    616e:	19ed      	adds	r5, r5, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1263
	pthisSV->fC6x12[5][0] = -pthisSV->fC6x12[3][2];
	pthisSV->fC6x12[5][1] = -pthisSV->fC6x12[4][2];
	pthisSV->fC6x12[0][4] = -pthisSV->fdeltat * pthisSV->fC6x12[0][1];
	pthisSV->fC6x12[0][5] = -pthisSV->fdeltat * pthisSV->fC6x12[0][2];
	pthisSV->fC6x12[1][5] = -pthisSV->fdeltat * pthisSV->fC6x12[1][2];
	pthisSV->fC6x12[1][3]= -pthisSV->fC6x12[0][4];
    6170:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1264
	pthisSV->fC6x12[2][3]= -pthisSV->fC6x12[0][5];
    6172:	4b5d      	ldr	r3, [pc, #372]	; (62e8 <fRun_9DOF_GBY_KALMAN+0x6a0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1265
	pthisSV->fC6x12[2][4]= -pthisSV->fC6x12[1][5];
    6174:	19c0      	adds	r0, r0, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1264
	pthisSV->fC6x12[5][1] = -pthisSV->fC6x12[4][2];
	pthisSV->fC6x12[0][4] = -pthisSV->fdeltat * pthisSV->fC6x12[0][1];
	pthisSV->fC6x12[0][5] = -pthisSV->fdeltat * pthisSV->fC6x12[0][2];
	pthisSV->fC6x12[1][5] = -pthisSV->fdeltat * pthisSV->fC6x12[1][2];
	pthisSV->fC6x12[1][3]= -pthisSV->fC6x12[0][4];
	pthisSV->fC6x12[2][3]= -pthisSV->fC6x12[0][5];
    6176:	50cd      	str	r5, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1265
	pthisSV->fC6x12[2][4]= -pthisSV->fC6x12[1][5];
    6178:	23e5      	movs	r3, #229	; 0xe5
    617a:	00db      	lsls	r3, r3, #3
    617c:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1266
	pthisSV->fC6x12[3][4] = -pthisSV->fdeltat * pthisSV->fC6x12[3][1];
    617e:	1c21      	adds	r1, r4, #0
    6180:	4640      	mov	r0, r8
    6182:	f7fa fe07 	bl	d94 <__aeabi_fmul>
    6186:	23eb      	movs	r3, #235	; 0xeb
    6188:	1c06      	adds	r6, r0, #0
    618a:	00db      	lsls	r3, r3, #3
    618c:	4658      	mov	r0, fp
    618e:	50c6      	str	r6, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1267
	pthisSV->fC6x12[3][5] = -pthisSV->fdeltat * pthisSV->fC6x12[3][2];
    6190:	1c21      	adds	r1, r4, #0
    6192:	4648      	mov	r0, r9
    6194:	f7fa fdfe 	bl	d94 <__aeabi_fmul>
    6198:	4b54      	ldr	r3, [pc, #336]	; (62ec <fRun_9DOF_GBY_KALMAN+0x6a4>)
    619a:	4659      	mov	r1, fp
    619c:	50c8      	str	r0, [r1, r3]
    619e:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1268
	pthisSV->fC6x12[4][5] = -pthisSV->fdeltat * pthisSV->fC6x12[4][2];
    61a0:	1c21      	adds	r1, r4, #0
    61a2:	4650      	mov	r0, sl
    61a4:	f7fa fdf6 	bl	d94 <__aeabi_fmul>
    61a8:	4b51      	ldr	r3, [pc, #324]	; (62f0 <fRun_9DOF_GBY_KALMAN+0x6a8>)
    61aa:	465a      	mov	r2, fp
    61ac:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1269
	pthisSV->fC6x12[4][3] = -pthisSV->fC6x12[3][4];
    61ae:	4b51      	ldr	r3, [pc, #324]	; (62f4 <fRun_9DOF_GBY_KALMAN+0x6ac>)
    61b0:	19f6      	adds	r6, r6, r7
    61b2:	50d6      	str	r6, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1270
	pthisSV->fC6x12[5][3] = -pthisSV->fC6x12[3][5];
    61b4:	4b50      	ldr	r3, [pc, #320]	; (62f8 <fRun_9DOF_GBY_KALMAN+0x6b0>)
    61b6:	19ed      	adds	r5, r5, r7
    61b8:	50d5      	str	r5, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1271
	pthisSV->fC6x12[5][4] = -pthisSV->fC6x12[4][5];
    61ba:	23f7      	movs	r3, #247	; 0xf7
    61bc:	19c0      	adds	r0, r0, r7
    61be:	00db      	lsls	r3, r3, #3
    61c0:	248f      	movs	r4, #143	; 0x8f
    61c2:	50d0      	str	r0, [r2, r3]
    61c4:	00e4      	lsls	r4, r4, #3
    61c6:	20d7      	movs	r0, #215	; 0xd7
    61c8:	1c27      	adds	r7, r4, #0
    61ca:	00c0      	lsls	r0, r0, #3
    61cc:	ac74      	add	r4, sp, #464	; 0x1d0
    61ce:	9404      	str	r4, [sp, #16]
    61d0:	1c04      	adds	r4, r0, #0
    61d2:	ab2c      	add	r3, sp, #176	; 0xb0
    61d4:	445f      	add	r7, fp
    61d6:	445c      	add	r4, fp
    61d8:	469a      	mov	sl, r3
    61da:	9706      	str	r7, [sp, #24]
    61dc:	9403      	str	r4, [sp, #12]
    61de:	2018      	movs	r0, #24
    61e0:	4240      	negs	r0, r0
    61e2:	4680      	mov	r8, r0
    61e4:	9903      	ldr	r1, [sp, #12]
    61e6:	44d0      	add	r8, sl
    61e8:	4689      	mov	r9, r1
    61ea:	4646      	mov	r6, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1291
		pftmpA12x6ij = ftmpA12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of ftmpA12x6
		{
			// zero ftmpA12x6[i][j]
			*pftmpA12x6ij = 0.0F;
    61ec:	2200      	movs	r2, #0
    61ee:	6032      	str	r2, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1294

			// initialize pfC6x12jk for current j, k=0
			pfC6x12jk = pthisSV->fC6x12[j];
    61f0:	46b0      	mov	r8, r6
    61f2:	2400      	movs	r4, #0
    61f4:	464e      	mov	r6, r9
    61f6:	e009      	b.n	620c <fRun_9DOF_GBY_KALMAN+0x5c4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1305
			for (k = 0; k < 12; k++)
			{
				if ((*pfQw12x12ik != 0.0F) && (*pfC6x12jk != 0.0F))
				{
					if (*pfC6x12jk == 1.0F)
						*pftmpA12x6ij += *pfQw12x12ik;
    61f8:	4641      	mov	r1, r8
    61fa:	6808      	ldr	r0, [r1, #0]
    61fc:	1c29      	adds	r1, r5, #0
    61fe:	f7fa fa79 	bl	6f4 <__aeabi_fadd>
    6202:	4642      	mov	r2, r8
    6204:	6010      	str	r0, [r2, #0]
    6206:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1300

			// initialize pfQw12x12ik for current i, k=0
			pfQw12x12ik = pthisSV->fQw12x12[i];

			// sum matrix products over inner loop over k
			for (k = 0; k < 12; k++)
    6208:	2c30      	cmp	r4, #48	; 0x30
    620a:	d027      	beq.n	625c <fRun_9DOF_GBY_KALMAN+0x614>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1302
			{
				if ((*pfQw12x12ik != 0.0F) && (*pfC6x12jk != 0.0F))
    620c:	593d      	ldr	r5, [r7, r4]
    620e:	2100      	movs	r1, #0
    6210:	1c28      	adds	r0, r5, #0
    6212:	f7fa fa41 	bl	698 <__aeabi_fcmpeq>
    6216:	2800      	cmp	r0, #0
    6218:	d1f5      	bne.n	6206 <fRun_9DOF_GBY_KALMAN+0x5be>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1302 (discriminator 1)
    621a:	5933      	ldr	r3, [r6, r4]
    621c:	2100      	movs	r1, #0
    621e:	1c18      	adds	r0, r3, #0
    6220:	4699      	mov	r9, r3
    6222:	f7fa fa39 	bl	698 <__aeabi_fcmpeq>
    6226:	2800      	cmp	r0, #0
    6228:	d1ed      	bne.n	6206 <fRun_9DOF_GBY_KALMAN+0x5be>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1304
				{
					if (*pfC6x12jk == 1.0F)
    622a:	21fe      	movs	r1, #254	; 0xfe
    622c:	4648      	mov	r0, r9
    622e:	0589      	lsls	r1, r1, #22
    6230:	f7fa fa32 	bl	698 <__aeabi_fcmpeq>
    6234:	2800      	cmp	r0, #0
    6236:	d1df      	bne.n	61f8 <fRun_9DOF_GBY_KALMAN+0x5b0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1306
						*pftmpA12x6ij += *pfQw12x12ik;
					else if (*pfC6x12jk == -1.0F)
    6238:	4648      	mov	r0, r9
    623a:	4930      	ldr	r1, [pc, #192]	; (62fc <fRun_9DOF_GBY_KALMAN+0x6b4>)
    623c:	f7fa fa2c 	bl	698 <__aeabi_fcmpeq>
    6240:	2800      	cmp	r0, #0
    6242:	d101      	bne.n	6248 <fRun_9DOF_GBY_KALMAN+0x600>
    6244:	f000 fe19 	bl	6e7a <fRun_9DOF_GBY_KALMAN+0x1232>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1307
						*pftmpA12x6ij -= *pfQw12x12ik;
    6248:	4643      	mov	r3, r8
    624a:	6818      	ldr	r0, [r3, #0]
    624c:	1c29      	adds	r1, r5, #0
    624e:	f7fa fecb 	bl	fe8 <__aeabi_fsub>
    6252:	3404      	adds	r4, #4
    6254:	4641      	mov	r1, r8
    6256:	6008      	str	r0, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1300

			// initialize pfQw12x12ik for current i, k=0
			pfQw12x12ik = pthisSV->fQw12x12[i];

			// sum matrix products over inner loop over k
			for (k = 0; k < 12; k++)
    6258:	2c30      	cmp	r4, #48	; 0x30
    625a:	d1d7      	bne.n	620c <fRun_9DOF_GBY_KALMAN+0x5c4>
    625c:	46b1      	mov	r9, r6
    625e:	4646      	mov	r6, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1319
				pfQw12x12ik++;

			} // end of loop over k

			// increment pftmpA12x6ij for next iteration of j
			pftmpA12x6ij++;
    6260:	3604      	adds	r6, #4
    6262:	44a1      	add	r9, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1288
	for (i = 0; i < 12; i++) // loop over rows of ftmpA12x6
	{
		// initialize pftmpA12x6ij for current i, j=0
		pftmpA12x6ij = ftmpA12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of ftmpA12x6
    6264:	4556      	cmp	r6, sl
    6266:	d1c1      	bne.n	61ec <fRun_9DOF_GBY_KALMAN+0x5a4>
    6268:	2018      	movs	r0, #24
    626a:	46b0      	mov	r8, r6
    626c:	4682      	mov	sl, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1283
	// *********************************************************************************

	// set ftmpA12x6 = P- * C^T = Qw * C^T where Qw and C are both sparse
	// C also has a significant number of +1 and -1 entries
	// ftmpA12x6 is also sparse but not symmetric
	for (i = 0; i < 12; i++) // loop over rows of ftmpA12x6
    626e:	9c04      	ldr	r4, [sp, #16]
    6270:	44c2      	add	sl, r8
    6272:	3730      	adds	r7, #48	; 0x30
    6274:	45a2      	cmp	sl, r4
    6276:	d1b2      	bne.n	61de <fRun_9DOF_GBY_KALMAN+0x596>
    6278:	208c      	movs	r0, #140	; 0x8c
    627a:	0040      	lsls	r0, r0, #1
    627c:	27dd      	movs	r7, #221	; 0xdd
    627e:	1c04      	adds	r4, r0, #0
    6280:	445c      	add	r4, fp
    6282:	00ff      	lsls	r7, r7, #3
    6284:	46b8      	mov	r8, r7
    6286:	9411      	str	r4, [sp, #68]	; 0x44
    6288:	9404      	str	r4, [sp, #16]
    628a:	2700      	movs	r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1335
		pfPPlus12x12ij = pthisSV->fPPlus12x12[i] + i;

		for (j = i; j < 6; j++) // loop over above diagonal columns of P+
		{
			// zero P+[i][j] 
			*pfPPlus12x12ij = 0.0F;
    628c:	465c      	mov	r4, fp
    628e:	44d8      	add	r8, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1283
	// *********************************************************************************

	// set ftmpA12x6 = P- * C^T = Qw * C^T where Qw and C are both sparse
	// C also has a significant number of +1 and -1 entries
	// ftmpA12x6 is also sparse but not symmetric
	for (i = 0; i < 12; i++) // loop over rows of ftmpA12x6
    6290:	9703      	str	r7, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1335
		pfPPlus12x12ij = pthisSV->fPPlus12x12[i] + i;

		for (j = i; j < 6; j++) // loop over above diagonal columns of P+
		{
			// zero P+[i][j] 
			*pfPPlus12x12ij = 0.0F;
    6292:	9405      	str	r4, [sp, #20]
    6294:	2030      	movs	r0, #48	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1330
	// = C * (Qw * C^T) + Qv = C * ftmpA12x6 + Qv
	// both C and ftmpA12x6 are sparse but not symmetric
	for (i = 0; i < 6; i++) // loop over rows of P+
	{
		// initialize pfPPlus12x12ij for current i, j=i
		pfPPlus12x12ij = pthisSV->fPPlus12x12[i] + i;
    6296:	9f04      	ldr	r7, [sp, #16]
    6298:	9903      	ldr	r1, [sp, #12]
    629a:	4240      	negs	r0, r0
    629c:	4683      	mov	fp, r0
    629e:	46b9      	mov	r9, r7
    62a0:	44c3      	add	fp, r8
    62a2:	468a      	mov	sl, r1
    62a4:	b24d      	sxtb	r5, r1
    62a6:	4647      	mov	r7, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1335

		for (j = i; j < 6; j++) // loop over above diagonal columns of P+
		{
			// zero P+[i][j] 
			*pfPPlus12x12ij = 0.0F;
    62a8:	2100      	movs	r1, #0
    62aa:	4648      	mov	r0, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1341

			// initialize pfC6x12ik for current i, k=0
			pfC6x12ik = pthisSV->fC6x12[i];

			// initialize pftmpA12x6kj for current j, k=0
			pftmpA12x6kj = *ftmpA12x6 + j;
    62ac:	00ad      	lsls	r5, r5, #2
    62ae:	aa26      	add	r2, sp, #152	; 0x98
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1335
		pfPPlus12x12ij = pthisSV->fPPlus12x12[i] + i;

		for (j = i; j < 6; j++) // loop over above diagonal columns of P+
		{
			// zero P+[i][j] 
			*pfPPlus12x12ij = 0.0F;
    62b0:	6001      	str	r1, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1341

			// initialize pfC6x12ik for current i, k=0
			pfC6x12ik = pthisSV->fC6x12[i];

			// initialize pftmpA12x6kj for current j, k=0
			pftmpA12x6kj = *ftmpA12x6 + j;
    62b2:	1955      	adds	r5, r2, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1338
		{
			// zero P+[i][j] 
			*pfPPlus12x12ij = 0.0F;

			// initialize pfC6x12ik for current i, k=0
			pfC6x12ik = pthisSV->fC6x12[i];
    62b4:	465c      	mov	r4, fp
    62b6:	e02e      	b.n	6316 <fRun_9DOF_GBY_KALMAN+0x6ce>
    62b8:	000007ec 	.word	0x000007ec
    62bc:	000007e4 	.word	0x000007e4
    62c0:	3c8efa35 	.word	0x3c8efa35
    62c4:	000006bc 	.word	0x000006bc
    62c8:	bc8efa35 	.word	0xbc8efa35
    62cc:	0000071c 	.word	0x0000071c
    62d0:	0000074c 	.word	0x0000074c
    62d4:	000007ac 	.word	0x000007ac
    62d8:	00000828 	.word	0x00000828
    62dc:	000006cc 	.word	0x000006cc
    62e0:	000006fc 	.word	0x000006fc
    62e4:	000006f4 	.word	0x000006f4
    62e8:	00000724 	.word	0x00000724
    62ec:	0000075c 	.word	0x0000075c
    62f0:	0000078c 	.word	0x0000078c
    62f4:	00000784 	.word	0x00000784
    62f8:	000007b4 	.word	0x000007b4
    62fc:	bf800000 	.word	0xbf800000
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1349
			for (k = 0; k < 12; k++)
			{
				if ((*pfC6x12ik != 0.0F) && (*pftmpA12x6kj != 0.0F))
				{
					if (*pfC6x12ik == 1.0F)
						*pfPPlus12x12ij += *pftmpA12x6kj;
    6300:	4649      	mov	r1, r9
    6302:	6808      	ldr	r0, [r1, #0]
    6304:	4641      	mov	r1, r8
    6306:	f7fa f9f5 	bl	6f4 <__aeabi_fadd>
    630a:	464a      	mov	r2, r9
    630c:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1357
					else
						*pfPPlus12x12ij += *pfC6x12ik * *pftmpA12x6kj;
				}

				// update pfC6x12ik and pftmpA12x6kj for next iteration of k
				pfC6x12ik++;						
    630e:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1358
				pftmpA12x6kj += 6;
    6310:	3518      	adds	r5, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1344

			// initialize pftmpA12x6kj for current j, k=0
			pftmpA12x6kj = *ftmpA12x6 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 12; k++)
    6312:	42bc      	cmp	r4, r7
    6314:	d02c      	beq.n	6370 <fRun_9DOF_GBY_KALMAN+0x728>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1346
			{
				if ((*pfC6x12ik != 0.0F) && (*pftmpA12x6kj != 0.0F))
    6316:	6826      	ldr	r6, [r4, #0]
    6318:	2100      	movs	r1, #0
    631a:	1c30      	adds	r0, r6, #0
    631c:	f7fa f9bc 	bl	698 <__aeabi_fcmpeq>
    6320:	2800      	cmp	r0, #0
    6322:	d1f4      	bne.n	630e <fRun_9DOF_GBY_KALMAN+0x6c6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1346 (discriminator 1)
    6324:	682b      	ldr	r3, [r5, #0]
    6326:	2100      	movs	r1, #0
    6328:	1c18      	adds	r0, r3, #0
    632a:	4698      	mov	r8, r3
    632c:	f7fa f9b4 	bl	698 <__aeabi_fcmpeq>
    6330:	2800      	cmp	r0, #0
    6332:	d1ec      	bne.n	630e <fRun_9DOF_GBY_KALMAN+0x6c6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1348
				{
					if (*pfC6x12ik == 1.0F)
    6334:	21fe      	movs	r1, #254	; 0xfe
    6336:	1c30      	adds	r0, r6, #0
    6338:	0589      	lsls	r1, r1, #22
    633a:	f7fa f9ad 	bl	698 <__aeabi_fcmpeq>
    633e:	2800      	cmp	r0, #0
    6340:	d1de      	bne.n	6300 <fRun_9DOF_GBY_KALMAN+0x6b8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1350
						*pfPPlus12x12ij += *pftmpA12x6kj;
					else if (*pfC6x12ik == -1.0F)
    6342:	1c30      	adds	r0, r6, #0
    6344:	4909      	ldr	r1, [pc, #36]	; (636c <fRun_9DOF_GBY_KALMAN+0x724>)
    6346:	f7fa f9a7 	bl	698 <__aeabi_fcmpeq>
    634a:	2800      	cmp	r0, #0
    634c:	d101      	bne.n	6352 <fRun_9DOF_GBY_KALMAN+0x70a>
    634e:	f000 fda1 	bl	6e94 <fRun_9DOF_GBY_KALMAN+0x124c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1351
						*pfPPlus12x12ij -= *pftmpA12x6kj;
    6352:	464b      	mov	r3, r9
    6354:	6818      	ldr	r0, [r3, #0]
    6356:	4641      	mov	r1, r8
    6358:	f7fa fe46 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1357
					else
						*pfPPlus12x12ij += *pfC6x12ik * *pftmpA12x6kj;
				}

				// update pfC6x12ik and pftmpA12x6kj for next iteration of k
				pfC6x12ik++;						
    635c:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1351
				if ((*pfC6x12ik != 0.0F) && (*pftmpA12x6kj != 0.0F))
				{
					if (*pfC6x12ik == 1.0F)
						*pfPPlus12x12ij += *pftmpA12x6kj;
					else if (*pfC6x12ik == -1.0F)
						*pfPPlus12x12ij -= *pftmpA12x6kj;
    635e:	4649      	mov	r1, r9
    6360:	6008      	str	r0, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1358
						*pfPPlus12x12ij += *pfC6x12ik * *pftmpA12x6kj;
				}

				// update pfC6x12ik and pftmpA12x6kj for next iteration of k
				pfC6x12ik++;						
				pftmpA12x6kj += 6;
    6362:	3518      	adds	r5, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1344

			// initialize pftmpA12x6kj for current j, k=0
			pftmpA12x6kj = *ftmpA12x6 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 12; k++)
    6364:	42bc      	cmp	r4, r7
    6366:	d1d6      	bne.n	6316 <fRun_9DOF_GBY_KALMAN+0x6ce>
    6368:	e002      	b.n	6370 <fRun_9DOF_GBY_KALMAN+0x728>
    636a:	46c0      	nop			; (mov r8, r8)
    636c:	bf800000 	.word	0xbf800000
    6370:	4653      	mov	r3, sl
    6372:	3301      	adds	r3, #1
    6374:	b2db      	uxtb	r3, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1363
				pftmpA12x6kj += 6;

			} // end of loop over k

			// increment pfPPlus12x12ij for next iteration of j
			pfPPlus12x12ij++;
    6376:	2004      	movs	r0, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1332
	for (i = 0; i < 6; i++) // loop over rows of P+
	{
		// initialize pfPPlus12x12ij for current i, j=i
		pfPPlus12x12ij = pthisSV->fPPlus12x12[i] + i;

		for (j = i; j < 6; j++) // loop over above diagonal columns of P+
    6378:	b25d      	sxtb	r5, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1363
				pftmpA12x6kj += 6;

			} // end of loop over k

			// increment pfPPlus12x12ij for next iteration of j
			pfPPlus12x12ij++;
    637a:	4481      	add	r9, r0
    637c:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1332
	for (i = 0; i < 6; i++) // loop over rows of P+
	{
		// initialize pfPPlus12x12ij for current i, j=i
		pfPPlus12x12ij = pthisSV->fPPlus12x12[i] + i;

		for (j = i; j < 6; j++) // loop over above diagonal columns of P+
    637e:	2d05      	cmp	r5, #5
    6380:	dd92      	ble.n	62a8 <fRun_9DOF_GBY_KALMAN+0x660>
    6382:	9b03      	ldr	r3, [sp, #12]
    6384:	3430      	adds	r4, #48	; 0x30
    6386:	46a0      	mov	r8, r4
    6388:	9c04      	ldr	r4, [sp, #16]
    638a:	3301      	adds	r3, #1
    638c:	b2db      	uxtb	r3, r3
    638e:	3434      	adds	r4, #52	; 0x34
    6390:	9303      	str	r3, [sp, #12]
    6392:	9404      	str	r4, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1327
	} // end of loop over i

	// set symmetric P+ (6x6 scratch sub-matrix) to C * P- * C^T + Qv
	// = C * (Qw * C^T) + Qv = C * ftmpA12x6 + Qv
	// both C and ftmpA12x6 are sparse but not symmetric
	for (i = 0; i < 6; i++) // loop over rows of P+
    6394:	2b06      	cmp	r3, #6
    6396:	d000      	beq.n	639a <fRun_9DOF_GBY_KALMAN+0x752>
    6398:	e77c      	b.n	6294 <fRun_9DOF_GBY_KALMAN+0x64c>
    639a:	9f05      	ldr	r7, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1369

		} // end of loop over j
	} // end of loop over i

	// add in noise covariance terms to the diagonal
	pthisSV->fPPlus12x12[0][0] +=  pthisSV->fQvAA;
    639c:	2388      	movs	r3, #136	; 0x88
    639e:	005b      	lsls	r3, r3, #1
    63a0:	58fc      	ldr	r4, [r7, r3]
    63a2:	258c      	movs	r5, #140	; 0x8c
    63a4:	006d      	lsls	r5, r5, #1
    63a6:	5978      	ldr	r0, [r7, r5]
    63a8:	1c21      	adds	r1, r4, #0
    63aa:	f7fa f9a3 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1370
	pthisSV->fPPlus12x12[1][1] +=  pthisSV->fQvAA;
    63ae:	26a6      	movs	r6, #166	; 0xa6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1369

		} // end of loop over j
	} // end of loop over i

	// add in noise covariance terms to the diagonal
	pthisSV->fPPlus12x12[0][0] +=  pthisSV->fQvAA;
    63b0:	5178      	str	r0, [r7, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1370
	pthisSV->fPPlus12x12[1][1] +=  pthisSV->fQvAA;
    63b2:	0076      	lsls	r6, r6, #1
    63b4:	59b9      	ldr	r1, [r7, r6]
    63b6:	1c20      	adds	r0, r4, #0
    63b8:	f7fa f99c 	bl	6f4 <__aeabi_fadd>
    63bc:	51b8      	str	r0, [r7, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1371
	pthisSV->fPPlus12x12[2][2] +=  pthisSV->fQvAA;
    63be:	26c0      	movs	r6, #192	; 0xc0
    63c0:	0076      	lsls	r6, r6, #1
    63c2:	59b9      	ldr	r1, [r7, r6]
    63c4:	1c20      	adds	r0, r4, #0
    63c6:	f7fa f995 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1372
	pthisSV->fPPlus12x12[3][3] +=  pthisSV->fQvMM;
    63ca:	238a      	movs	r3, #138	; 0x8a
    63cc:	005b      	lsls	r3, r3, #1
    63ce:	58fc      	ldr	r4, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1371
	} // end of loop over i

	// add in noise covariance terms to the diagonal
	pthisSV->fPPlus12x12[0][0] +=  pthisSV->fQvAA;
	pthisSV->fPPlus12x12[1][1] +=  pthisSV->fQvAA;
	pthisSV->fPPlus12x12[2][2] +=  pthisSV->fQvAA;
    63d0:	51b8      	str	r0, [r7, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1372
	pthisSV->fPPlus12x12[3][3] +=  pthisSV->fQvMM;
    63d2:	26da      	movs	r6, #218	; 0xda
    63d4:	0076      	lsls	r6, r6, #1
    63d6:	59b8      	ldr	r0, [r7, r6]
    63d8:	1c21      	adds	r1, r4, #0
    63da:	f7fa f98b 	bl	6f4 <__aeabi_fadd>
    63de:	51b8      	str	r0, [r7, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1373
	pthisSV->fPPlus12x12[4][4] +=  pthisSV->fQvMM;
    63e0:	26f4      	movs	r6, #244	; 0xf4
    63e2:	0076      	lsls	r6, r6, #1
    63e4:	59b9      	ldr	r1, [r7, r6]
    63e6:	1c20      	adds	r0, r4, #0
    63e8:	f7fa f984 	bl	6f4 <__aeabi_fadd>
    63ec:	51b8      	str	r0, [r7, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1374
	pthisSV->fPPlus12x12[5][5] +=  pthisSV->fQvMM;
    63ee:	2687      	movs	r6, #135	; 0x87
    63f0:	00b6      	lsls	r6, r6, #2
    63f2:	59b9      	ldr	r1, [r7, r6]
    63f4:	1c20      	adds	r0, r4, #0
    63f6:	f7fa f97d 	bl	6f4 <__aeabi_fadd>
    63fa:	46bb      	mov	fp, r7
    63fc:	51b8      	str	r0, [r7, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1379

	// copy above diagonal elements of P+ (6x6 scratch sub-matrix) to below diagonal
	for (i = 1; i < 6; i++) 	
		for (j = 0; j < i; j++) 
			pthisSV->fPPlus12x12[i][j] = pthisSV->fPPlus12x12[j][i];
    63fe:	23d4      	movs	r3, #212	; 0xd4
    6400:	27a4      	movs	r7, #164	; 0xa4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1377
	pthisSV->fPPlus12x12[3][3] +=  pthisSV->fQvMM;
	pthisSV->fPPlus12x12[4][4] +=  pthisSV->fQvMM;
	pthisSV->fPPlus12x12[5][5] +=  pthisSV->fQvMM;

	// copy above diagonal elements of P+ (6x6 scratch sub-matrix) to below diagonal
	for (i = 1; i < 6; i++) 	
    6402:	2001      	movs	r0, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1379
		for (j = 0; j < i; j++) 
			pthisSV->fPPlus12x12[i][j] = pthisSV->fPPlus12x12[j][i];
    6404:	007f      	lsls	r7, r7, #1
    6406:	26bc      	movs	r6, #188	; 0xbc
    6408:	005b      	lsls	r3, r3, #1
    640a:	46b9      	mov	r9, r7
    640c:	0076      	lsls	r6, r6, #1
    640e:	469c      	mov	ip, r3
    6410:	4680      	mov	r8, r0
    6412:	465c      	mov	r4, fp
    6414:	4640      	mov	r0, r8
    6416:	b243      	sxtb	r3, r0
    6418:	005a      	lsls	r2, r3, #1
    641a:	18d2      	adds	r2, r2, r3
    641c:	0099      	lsls	r1, r3, #2
    641e:	0112      	lsls	r2, r2, #4
    6420:	278c      	movs	r7, #140	; 0x8c
    6422:	007f      	lsls	r7, r7, #1
    6424:	1861      	adds	r1, r4, r1
    6426:	18a2      	adds	r2, r4, r2
    6428:	19d0      	adds	r0, r2, r7
    642a:	594f      	ldr	r7, [r1, r5]
    642c:	6007      	str	r7, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1378
	pthisSV->fPPlus12x12[4][4] +=  pthisSV->fQvMM;
	pthisSV->fPPlus12x12[5][5] +=  pthisSV->fQvMM;

	// copy above diagonal elements of P+ (6x6 scratch sub-matrix) to below diagonal
	for (i = 1; i < 6; i++) 	
		for (j = 0; j < i; j++) 
    642e:	2b01      	cmp	r3, #1
    6430:	d101      	bne.n	6436 <fRun_9DOF_GBY_KALMAN+0x7ee>
    6432:	f001 fc71 	bl	7d18 <fRun_9DOF_GBY_KALMAN+0x20d0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1379
			pthisSV->fPPlus12x12[i][j] = pthisSV->fPPlus12x12[j][i];
    6436:	4648      	mov	r0, r9
    6438:	5808      	ldr	r0, [r1, r0]
    643a:	278e      	movs	r7, #142	; 0x8e
    643c:	9002      	str	r0, [sp, #8]
    643e:	007f      	lsls	r7, r7, #1
    6440:	19d0      	adds	r0, r2, r7
    6442:	9f02      	ldr	r7, [sp, #8]
    6444:	6007      	str	r7, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1378
	pthisSV->fPPlus12x12[4][4] +=  pthisSV->fQvMM;
	pthisSV->fPPlus12x12[5][5] +=  pthisSV->fQvMM;

	// copy above diagonal elements of P+ (6x6 scratch sub-matrix) to below diagonal
	for (i = 1; i < 6; i++) 	
		for (j = 0; j < i; j++) 
    6446:	2b02      	cmp	r3, #2
    6448:	d101      	bne.n	644e <fRun_9DOF_GBY_KALMAN+0x806>
    644a:	f001 fc65 	bl	7d18 <fRun_9DOF_GBY_KALMAN+0x20d0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1379
			pthisSV->fPPlus12x12[i][j] = pthisSV->fPPlus12x12[j][i];
    644e:	2790      	movs	r7, #144	; 0x90
    6450:	007f      	lsls	r7, r7, #1
    6452:	19d0      	adds	r0, r2, r7
    6454:	598f      	ldr	r7, [r1, r6]
    6456:	6007      	str	r7, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1378
	pthisSV->fPPlus12x12[4][4] +=  pthisSV->fQvMM;
	pthisSV->fPPlus12x12[5][5] +=  pthisSV->fQvMM;

	// copy above diagonal elements of P+ (6x6 scratch sub-matrix) to below diagonal
	for (i = 1; i < 6; i++) 	
		for (j = 0; j < i; j++) 
    6458:	2b03      	cmp	r3, #3
    645a:	d101      	bne.n	6460 <fRun_9DOF_GBY_KALMAN+0x818>
    645c:	f001 fc5c 	bl	7d18 <fRun_9DOF_GBY_KALMAN+0x20d0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1379
			pthisSV->fPPlus12x12[i][j] = pthisSV->fPPlus12x12[j][i];
    6460:	4660      	mov	r0, ip
    6462:	5809      	ldr	r1, [r1, r0]
    6464:	3225      	adds	r2, #37	; 0x25
    6466:	32ff      	adds	r2, #255	; 0xff
    6468:	6011      	str	r1, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1378
	pthisSV->fPPlus12x12[4][4] +=  pthisSV->fQvMM;
	pthisSV->fPPlus12x12[5][5] +=  pthisSV->fQvMM;

	// copy above diagonal elements of P+ (6x6 scratch sub-matrix) to below diagonal
	for (i = 1; i < 6; i++) 	
		for (j = 0; j < i; j++) 
    646a:	2b05      	cmp	r3, #5
    646c:	d001      	beq.n	6472 <fRun_9DOF_GBY_KALMAN+0x82a>
    646e:	f001 fc53 	bl	7d18 <fRun_9DOF_GBY_KALMAN+0x20d0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1379
			pthisSV->fPPlus12x12[i][j] = pthisSV->fPPlus12x12[j][i];
    6472:	23f6      	movs	r3, #246	; 0xf6
    6474:	005b      	lsls	r3, r3, #1
    6476:	46a3      	mov	fp, r4
    6478:	591a      	ldr	r2, [r3, r4]
    647a:	2186      	movs	r1, #134	; 0x86
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1384

	// calculate inverse of P+ (6x6 scratch sub-matrix) = inv(C * P- * C^T + Qv) = inv(C * Qw * C^T + Qv)
	for (i = 0; i < 6; i++)
	{
		pfRows[i] = pthisSV->fPPlus12x12[i];
    647c:	9c11      	ldr	r4, [sp, #68]	; 0x44
    647e:	27a4      	movs	r7, #164	; 0xa4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1379
	pthisSV->fPPlus12x12[5][5] +=  pthisSV->fQvMM;

	// copy above diagonal elements of P+ (6x6 scratch sub-matrix) to below diagonal
	for (i = 1; i < 6; i++) 	
		for (j = 0; j < i; j++) 
			pthisSV->fPPlus12x12[i][j] = pthisSV->fPPlus12x12[j][i];
    6480:	0089      	lsls	r1, r1, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1384

	// calculate inverse of P+ (6x6 scratch sub-matrix) = inv(C * P- * C^T + Qv) = inv(C * Qw * C^T + Qv)
	for (i = 0; i < 6; i++)
	{
		pfRows[i] = pthisSV->fPPlus12x12[i];
    6482:	007f      	lsls	r7, r7, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1379
	pthisSV->fPPlus12x12[5][5] +=  pthisSV->fQvMM;

	// copy above diagonal elements of P+ (6x6 scratch sub-matrix) to below diagonal
	for (i = 1; i < 6; i++) 	
		for (j = 0; j < i; j++) 
			pthisSV->fPPlus12x12[i][j] = pthisSV->fPPlus12x12[j][i];
    6484:	1c0b      	adds	r3, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1384

	// calculate inverse of P+ (6x6 scratch sub-matrix) = inv(C * P- * C^T + Qv) = inv(C * Qw * C^T + Qv)
	for (i = 0; i < 6; i++)
	{
		pfRows[i] = pthisSV->fPPlus12x12[i];
    6486:	9420      	str	r4, [sp, #128]	; 0x80
    6488:	1c3c      	adds	r4, r7, #0
    648a:	27bc      	movs	r7, #188	; 0xbc
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1379
	pthisSV->fPPlus12x12[5][5] +=  pthisSV->fQvMM;

	// copy above diagonal elements of P+ (6x6 scratch sub-matrix) to below diagonal
	for (i = 1; i < 6; i++) 	
		for (j = 0; j < i; j++) 
			pthisSV->fPPlus12x12[i][j] = pthisSV->fPPlus12x12[j][i];
    648c:	445b      	add	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1384

	// calculate inverse of P+ (6x6 scratch sub-matrix) = inv(C * P- * C^T + Qv) = inv(C * Qw * C^T + Qv)
	for (i = 0; i < 6; i++)
	{
		pfRows[i] = pthisSV->fPPlus12x12[i];
    648e:	007f      	lsls	r7, r7, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1379
	pthisSV->fPPlus12x12[5][5] +=  pthisSV->fQvMM;

	// copy above diagonal elements of P+ (6x6 scratch sub-matrix) to below diagonal
	for (i = 1; i < 6; i++) 	
		for (j = 0; j < i; j++) 
			pthisSV->fPPlus12x12[i][j] = pthisSV->fPPlus12x12[j][i];
    6490:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1384

	// calculate inverse of P+ (6x6 scratch sub-matrix) = inv(C * P- * C^T + Qv) = inv(C * Qw * C^T + Qv)
	for (i = 0; i < 6; i++)
	{
		pfRows[i] = pthisSV->fPPlus12x12[i];
    6492:	20d4      	movs	r0, #212	; 0xd4
    6494:	1c3b      	adds	r3, r7, #0
    6496:	445b      	add	r3, fp
    6498:	0040      	lsls	r0, r0, #1
    649a:	9322      	str	r3, [sp, #136]	; 0x88
    649c:	21ec      	movs	r1, #236	; 0xec
    649e:	1c03      	adds	r3, r0, #0
    64a0:	445b      	add	r3, fp
    64a2:	0049      	lsls	r1, r1, #1
    64a4:	9323      	str	r3, [sp, #140]	; 0x8c
    64a6:	2282      	movs	r2, #130	; 0x82
    64a8:	1c0b      	adds	r3, r1, #0
    64aa:	445b      	add	r3, fp
    64ac:	0092      	lsls	r2, r2, #2
    64ae:	9324      	str	r3, [sp, #144]	; 0x90
    64b0:	1c13      	adds	r3, r2, #0
    64b2:	445b      	add	r3, fp
    64b4:	445c      	add	r4, fp
    64b6:	9325      	str	r3, [sp, #148]	; 0x94
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1386
	}
	fmatrixAeqInvA(pfRows, iColInd, iRowInd, iPivot, 3);
    64b8:	2303      	movs	r3, #3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1384
			pthisSV->fPPlus12x12[i][j] = pthisSV->fPPlus12x12[j][i];

	// calculate inverse of P+ (6x6 scratch sub-matrix) = inv(C * P- * C^T + Qv) = inv(C * Qw * C^T + Qv)
	for (i = 0; i < 6; i++)
	{
		pfRows[i] = pthisSV->fPPlus12x12[i];
    64ba:	9412      	str	r4, [sp, #72]	; 0x48
    64bc:	9421      	str	r4, [sp, #132]	; 0x84
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1386
	}
	fmatrixAeqInvA(pfRows, iColInd, iRowInd, iPivot, 3);
    64be:	9300      	str	r3, [sp, #0]
    64c0:	a820      	add	r0, sp, #128	; 0x80
    64c2:	240c      	movs	r4, #12
    64c4:	a917      	add	r1, sp, #92	; 0x5c
    64c6:	aa19      	add	r2, sp, #100	; 0x64
    64c8:	ab1b      	add	r3, sp, #108	; 0x6c
    64ca:	f005 fcc1 	bl	be50 <fmatrixAeqInvA>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1392

	// set K = P- * C^T * inv(C * P- * C^T + Qv) = Qw * C^T * inv(C * Qw * C^T + Qv)
	// = ftmpA12x6 * P+ (6x6 sub-matrix)
	// ftmpA12x6 = Qw * C^T is sparse but P+ (6x6 sub-matrix) is not
	// K is not symmetric because C is not symmetric
	for (i = 0; i < 12; i++) // loop over rows of K12x6
    64ce:	2700      	movs	r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1386
	// calculate inverse of P+ (6x6 scratch sub-matrix) = inv(C * P- * C^T + Qv) = inv(C * Qw * C^T + Qv)
	for (i = 0; i < 6; i++)
	{
		pfRows[i] = pthisSV->fPPlus12x12[i];
	}
	fmatrixAeqInvA(pfRows, iColInd, iRowInd, iPivot, 3);
    64d0:	9408      	str	r4, [sp, #32]
    64d2:	2000      	movs	r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    64d4:	465c      	mov	r4, fp
    64d6:	9d11      	ldr	r5, [sp, #68]	; 0x44
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1392

	// set K = P- * C^T * inv(C * P- * C^T + Qv) = Qw * C^T * inv(C * Qw * C^T + Qv)
	// = ftmpA12x6 * P+ (6x6 sub-matrix)
	// ftmpA12x6 = Qw * C^T is sparse but P+ (6x6 sub-matrix) is not
	// K is not symmetric because C is not symmetric
	for (i = 0; i < 12; i++) // loop over rows of K12x6
    64d8:	9707      	str	r7, [sp, #28]
    64da:	4682      	mov	sl, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    64dc:	940a      	str	r4, [sp, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1395
	// ftmpA12x6 = Qw * C^T is sparse but P+ (6x6 sub-matrix) is not
	// K is not symmetric because C is not symmetric
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];
    64de:	9f07      	ldr	r7, [sp, #28]
    64e0:	20d6      	movs	r0, #214	; 0xd6
    64e2:	b27b      	sxtb	r3, r7
    64e4:	005a      	lsls	r2, r3, #1
    64e6:	18d3      	adds	r3, r2, r3
    64e8:	00db      	lsls	r3, r3, #3
    64ea:	0080      	lsls	r0, r0, #2
    64ec:	aa26      	add	r2, sp, #152	; 0x98
    64ee:	181c      	adds	r4, r3, r0
    64f0:	990a      	ldr	r1, [sp, #40]	; 0x28
    64f2:	18d3      	adds	r3, r2, r3
    64f4:	681f      	ldr	r7, [r3, #0]
    64f6:	68d8      	ldr	r0, [r3, #12]
    64f8:	190c      	adds	r4, r1, r4
    64fa:	6919      	ldr	r1, [r3, #16]
    64fc:	9703      	str	r7, [sp, #12]
    64fe:	685e      	ldr	r6, [r3, #4]
    6500:	689f      	ldr	r7, [r3, #8]
    6502:	695b      	ldr	r3, [r3, #20]
    6504:	9005      	str	r0, [sp, #20]
    6506:	9104      	str	r1, [sp, #16]
    6508:	9803      	ldr	r0, [sp, #12]
    650a:	2100      	movs	r1, #0
    650c:	4698      	mov	r8, r3
    650e:	f7fa f8c3 	bl	698 <__aeabi_fcmpeq>
    6512:	2800      	cmp	r0, #0
    6514:	d101      	bne.n	651a <fRun_9DOF_GBY_KALMAN+0x8d2>
    6516:	f000 fcd1 	bl	6ebc <fRun_9DOF_GBY_KALMAN+0x1274>
    651a:	4640      	mov	r0, r8
    651c:	2100      	movs	r1, #0
    651e:	f7fa f8bb 	bl	698 <__aeabi_fcmpeq>
    6522:	2800      	cmp	r0, #0
    6524:	d101      	bne.n	652a <fRun_9DOF_GBY_KALMAN+0x8e2>
    6526:	f000 ff25 	bl	7374 <fRun_9DOF_GBY_KALMAN+0x172c>
    652a:	9804      	ldr	r0, [sp, #16]
    652c:	2100      	movs	r1, #0
    652e:	f7fa f8b3 	bl	698 <__aeabi_fcmpeq>
    6532:	2800      	cmp	r0, #0
    6534:	d101      	bne.n	653a <fRun_9DOF_GBY_KALMAN+0x8f2>
    6536:	f001 f825 	bl	7584 <fRun_9DOF_GBY_KALMAN+0x193c>
    653a:	9805      	ldr	r0, [sp, #20]
    653c:	2100      	movs	r1, #0
    653e:	f7fa f8ab 	bl	698 <__aeabi_fcmpeq>
    6542:	2800      	cmp	r0, #0
    6544:	d101      	bne.n	654a <fRun_9DOF_GBY_KALMAN+0x902>
    6546:	f001 fd1d 	bl	7f84 <fRun_9DOF_GBY_KALMAN+0x233c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    654a:	4652      	mov	r2, sl
    654c:	6022      	str	r2, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    654e:	1c30      	adds	r0, r6, #0
    6550:	2100      	movs	r1, #0
    6552:	f7fa f8a1 	bl	698 <__aeabi_fcmpeq>
    6556:	2800      	cmp	r0, #0
    6558:	d101      	bne.n	655e <fRun_9DOF_GBY_KALMAN+0x916>
    655a:	f002 fc94 	bl	8e86 <PSP_CNFG_MQX_KERNEL_LOGGING+0xe86>
    655e:	2300      	movs	r3, #0
    6560:	4698      	mov	r8, r3
    6562:	1c38      	adds	r0, r7, #0
    6564:	2100      	movs	r1, #0
    6566:	f7fa f897 	bl	698 <__aeabi_fcmpeq>
    656a:	2800      	cmp	r0, #0
    656c:	d107      	bne.n	657e <fRun_9DOF_GBY_KALMAN+0x936>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    656e:	6e29      	ldr	r1, [r5, #96]	; 0x60
    6570:	1c38      	adds	r0, r7, #0
    6572:	f7fa fc0f 	bl	d94 <__aeabi_fmul>
    6576:	4641      	mov	r1, r8
    6578:	f7fa f8bc 	bl	6f4 <__aeabi_fadd>
    657c:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    657e:	4650      	mov	r0, sl
    6580:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6582:	2100      	movs	r1, #0
    6584:	1c30      	adds	r0, r6, #0
    6586:	f7fa f887 	bl	698 <__aeabi_fcmpeq>
    658a:	2800      	cmp	r0, #0
    658c:	d001      	beq.n	6592 <fRun_9DOF_GBY_KALMAN+0x94a>
    658e:	f002 fff3 	bl	9578 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1578>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6592:	6b69      	ldr	r1, [r5, #52]	; 0x34
    6594:	1c30      	adds	r0, r6, #0
    6596:	f7fa fbfd 	bl	d94 <__aeabi_fmul>
    659a:	2100      	movs	r1, #0
    659c:	f7fa f8aa 	bl	6f4 <__aeabi_fadd>
    65a0:	4680      	mov	r8, r0
    65a2:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    65a4:	1c38      	adds	r0, r7, #0
    65a6:	2100      	movs	r1, #0
    65a8:	f7fa f876 	bl	698 <__aeabi_fcmpeq>
    65ac:	2800      	cmp	r0, #0
    65ae:	d107      	bne.n	65c0 <fRun_9DOF_GBY_KALMAN+0x978>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    65b0:	6e69      	ldr	r1, [r5, #100]	; 0x64
    65b2:	1c38      	adds	r0, r7, #0
    65b4:	f7fa fbee 	bl	d94 <__aeabi_fmul>
    65b8:	4641      	mov	r1, r8
    65ba:	f7fa f89b 	bl	6f4 <__aeabi_fadd>
    65be:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    65c0:	4652      	mov	r2, sl
    65c2:	60a2      	str	r2, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    65c4:	1c30      	adds	r0, r6, #0
    65c6:	2100      	movs	r1, #0
    65c8:	f7fa f866 	bl	698 <__aeabi_fcmpeq>
    65cc:	2800      	cmp	r0, #0
    65ce:	d001      	beq.n	65d4 <fRun_9DOF_GBY_KALMAN+0x98c>
    65d0:	f002 ffdd 	bl	958e <PSP_CNFG_MQX_KERNEL_LOGGING+0x158e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    65d4:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    65d6:	1c30      	adds	r0, r6, #0
    65d8:	f7fa fbdc 	bl	d94 <__aeabi_fmul>
    65dc:	2100      	movs	r1, #0
    65de:	f7fa f889 	bl	6f4 <__aeabi_fadd>
    65e2:	4680      	mov	r8, r0
    65e4:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    65e6:	1c38      	adds	r0, r7, #0
    65e8:	2100      	movs	r1, #0
    65ea:	f7fa f855 	bl	698 <__aeabi_fcmpeq>
    65ee:	2800      	cmp	r0, #0
    65f0:	d107      	bne.n	6602 <fRun_9DOF_GBY_KALMAN+0x9ba>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    65f2:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    65f4:	1c38      	adds	r0, r7, #0
    65f6:	f7fa fbcd 	bl	d94 <__aeabi_fmul>
    65fa:	4641      	mov	r1, r8
    65fc:	f7fa f87a 	bl	6f4 <__aeabi_fadd>
    6600:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    6602:	4650      	mov	r0, sl
    6604:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6606:	2100      	movs	r1, #0
    6608:	1c30      	adds	r0, r6, #0
    660a:	f7fa f845 	bl	698 <__aeabi_fcmpeq>
    660e:	2800      	cmp	r0, #0
    6610:	d001      	beq.n	6616 <fRun_9DOF_GBY_KALMAN+0x9ce>
    6612:	f002 ffb8 	bl	9586 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1586>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6616:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    6618:	1c30      	adds	r0, r6, #0
    661a:	f7fa fbbb 	bl	d94 <__aeabi_fmul>
    661e:	2100      	movs	r1, #0
    6620:	f7fa f868 	bl	6f4 <__aeabi_fadd>
    6624:	4680      	mov	r8, r0
    6626:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6628:	1c38      	adds	r0, r7, #0
    662a:	2100      	movs	r1, #0
    662c:	f7fa f834 	bl	698 <__aeabi_fcmpeq>
    6630:	2800      	cmp	r0, #0
    6632:	d107      	bne.n	6644 <fRun_9DOF_GBY_KALMAN+0x9fc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6634:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
    6636:	1c38      	adds	r0, r7, #0
    6638:	f7fa fbac 	bl	d94 <__aeabi_fmul>
    663c:	4641      	mov	r1, r8
    663e:	f7fa f859 	bl	6f4 <__aeabi_fadd>
    6642:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    6644:	4652      	mov	r2, sl
    6646:	6122      	str	r2, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6648:	1c30      	adds	r0, r6, #0
    664a:	2100      	movs	r1, #0
    664c:	f7fa f824 	bl	698 <__aeabi_fcmpeq>
    6650:	2800      	cmp	r0, #0
    6652:	d001      	beq.n	6658 <fRun_9DOF_GBY_KALMAN+0xa10>
    6654:	f002 ff8c 	bl	9570 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1570>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6658:	6c29      	ldr	r1, [r5, #64]	; 0x40
    665a:	1c30      	adds	r0, r6, #0
    665c:	f7fa fb9a 	bl	d94 <__aeabi_fmul>
    6660:	2100      	movs	r1, #0
    6662:	f7fa f847 	bl	6f4 <__aeabi_fadd>
    6666:	4680      	mov	r8, r0
    6668:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    666a:	1c38      	adds	r0, r7, #0
    666c:	2100      	movs	r1, #0
    666e:	f7fa f813 	bl	698 <__aeabi_fcmpeq>
    6672:	2800      	cmp	r0, #0
    6674:	d107      	bne.n	6686 <fRun_9DOF_GBY_KALMAN+0xa3e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6676:	6f29      	ldr	r1, [r5, #112]	; 0x70
    6678:	1c38      	adds	r0, r7, #0
    667a:	f7fa fb8b 	bl	d94 <__aeabi_fmul>
    667e:	4641      	mov	r1, r8
    6680:	f7fa f838 	bl	6f4 <__aeabi_fadd>
    6684:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    6686:	4650      	mov	r0, sl
    6688:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    668a:	2100      	movs	r1, #0
    668c:	1c30      	adds	r0, r6, #0
    668e:	f7fa f803 	bl	698 <__aeabi_fcmpeq>
    6692:	2800      	cmp	r0, #0
    6694:	d001      	beq.n	669a <fRun_9DOF_GBY_KALMAN+0xa52>
    6696:	f002 ff73 	bl	9580 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1580>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    669a:	6c69      	ldr	r1, [r5, #68]	; 0x44
    669c:	1c30      	adds	r0, r6, #0
    669e:	f7fa fb79 	bl	d94 <__aeabi_fmul>
    66a2:	2100      	movs	r1, #0
    66a4:	f7fa f826 	bl	6f4 <__aeabi_fadd>
    66a8:	1c06      	adds	r6, r0, #0
    66aa:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    66ac:	1c38      	adds	r0, r7, #0
    66ae:	2100      	movs	r1, #0
    66b0:	f7f9 fff2 	bl	698 <__aeabi_fcmpeq>
    66b4:	2800      	cmp	r0, #0
    66b6:	d107      	bne.n	66c8 <fRun_9DOF_GBY_KALMAN+0xa80>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    66b8:	6f69      	ldr	r1, [r5, #116]	; 0x74
    66ba:	1c38      	adds	r0, r7, #0
    66bc:	f7fa fb6a 	bl	d94 <__aeabi_fmul>
    66c0:	1c31      	adds	r1, r6, #0
    66c2:	f7fa f817 	bl	6f4 <__aeabi_fadd>
    66c6:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1392

	// set K = P- * C^T * inv(C * P- * C^T + Qv) = Qw * C^T * inv(C * Qw * C^T + Qv)
	// = ftmpA12x6 * P+ (6x6 sub-matrix)
	// ftmpA12x6 = Qw * C^T is sparse but P+ (6x6 sub-matrix) is not
	// K is not symmetric because C is not symmetric
	for (i = 0; i < 12; i++) // loop over rows of K12x6
    66c8:	9b07      	ldr	r3, [sp, #28]
    66ca:	3301      	adds	r3, #1
    66cc:	b2db      	uxtb	r3, r3
    66ce:	9307      	str	r3, [sp, #28]
    66d0:	9b08      	ldr	r3, [sp, #32]
    66d2:	3b01      	subs	r3, #1
    66d4:	b2db      	uxtb	r3, r3
    66d6:	9308      	str	r3, [sp, #32]
    66d8:	2b00      	cmp	r3, #0
    66da:	d000      	beq.n	66de <fRun_9DOF_GBY_KALMAN+0xa96>
    66dc:	e6ff      	b.n	64de <fRun_9DOF_GBY_KALMAN+0x896>
    66de:	990a      	ldr	r1, [sp, #40]	; 0x28
    66e0:	23d4      	movs	r3, #212	; 0xd4
    66e2:	58cf      	ldr	r7, [r1, r3]
    66e4:	23d8      	movs	r3, #216	; 0xd8
    66e6:	58ce      	ldr	r6, [r1, r3]
    66e8:	23dc      	movs	r3, #220	; 0xdc
    66ea:	58cd      	ldr	r5, [r1, r3]
    66ec:	23e0      	movs	r3, #224	; 0xe0
    66ee:	58cc      	ldr	r4, [r1, r3]
    66f0:	23e4      	movs	r3, #228	; 0xe4
    66f2:	58cb      	ldr	r3, [r1, r3]
    66f4:	468b      	mov	fp, r1
    66f6:	4699      	mov	r9, r3
    66f8:	23e8      	movs	r3, #232	; 0xe8
    66fa:	58cb      	ldr	r3, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    66fc:	1c38      	adds	r0, r7, #0
    66fe:	469a      	mov	sl, r3
    6700:	23d6      	movs	r3, #214	; 0xd6
    6702:	009b      	lsls	r3, r3, #2
    6704:	58c9      	ldr	r1, [r1, r3]
    6706:	f7fa fb45 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    670a:	23d7      	movs	r3, #215	; 0xd7
    670c:	009b      	lsls	r3, r3, #2
    670e:	465a      	mov	r2, fp
    6710:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    6712:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    6714:	1c30      	adds	r0, r6, #0
    6716:	f7fa fb3d 	bl	d94 <__aeabi_fmul>
    671a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    671c:	4640      	mov	r0, r8
    671e:	f7f9 ffe9 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1438
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
    6722:	23d8      	movs	r3, #216	; 0xd8
    6724:	009b      	lsls	r3, r3, #2
    6726:	465a      	mov	r2, fp
    6728:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    672a:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1438
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
    672c:	1c28      	adds	r0, r5, #0
    672e:	f7fa fb31 	bl	d94 <__aeabi_fmul>
    6732:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    6734:	4640      	mov	r0, r8
    6736:	f7f9 ffdd 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    673a:	465b      	mov	r3, fp
    673c:	6718      	str	r0, [r3, #112]	; 0x70
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    673e:	23e8      	movs	r3, #232	; 0xe8
    6740:	009b      	lsls	r3, r3, #2
    6742:	465a      	mov	r2, fp
    6744:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    6746:	9005      	str	r0, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    6748:	1c38      	adds	r0, r7, #0
    674a:	f7fa fb23 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    674e:	23e9      	movs	r3, #233	; 0xe9
    6750:	009b      	lsls	r3, r3, #2
    6752:	465a      	mov	r2, fp
    6754:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    6756:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    6758:	1c30      	adds	r0, r6, #0
    675a:	f7fa fb1b 	bl	d94 <__aeabi_fmul>
    675e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    6760:	4640      	mov	r0, r8
    6762:	f7f9 ffc7 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1441
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
    6766:	23ea      	movs	r3, #234	; 0xea
    6768:	009b      	lsls	r3, r3, #2
    676a:	465a      	mov	r2, fp
    676c:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    676e:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1441
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
    6770:	1c28      	adds	r0, r5, #0
    6772:	f7fa fb0f 	bl	d94 <__aeabi_fmul>
    6776:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    6778:	4640      	mov	r0, r8
    677a:	f7f9 ffbb 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    677e:	465b      	mov	r3, fp
    6780:	67d8      	str	r0, [r3, #124]	; 0x7c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    6782:	23fa      	movs	r3, #250	; 0xfa
    6784:	009b      	lsls	r3, r3, #2
    6786:	465a      	mov	r2, fp
    6788:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    678a:	9007      	str	r0, [sp, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    678c:	1c38      	adds	r0, r7, #0
    678e:	f7fa fb01 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    6792:	23fb      	movs	r3, #251	; 0xfb
    6794:	009b      	lsls	r3, r3, #2
    6796:	465a      	mov	r2, fp
    6798:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    679a:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    679c:	1c30      	adds	r0, r6, #0
    679e:	f7fa faf9 	bl	d94 <__aeabi_fmul>
    67a2:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    67a4:	4640      	mov	r0, r8
    67a6:	f7f9 ffa5 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1444
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
    67aa:	23fc      	movs	r3, #252	; 0xfc
    67ac:	009b      	lsls	r3, r3, #2
    67ae:	465a      	mov	r2, fp
    67b0:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    67b2:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1444
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
    67b4:	1c28      	adds	r0, r5, #0
    67b6:	f7fa faed 	bl	d94 <__aeabi_fmul>
    67ba:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    67bc:	4640      	mov	r0, r8
    67be:	f7f9 ff99 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    67c2:	465b      	mov	r3, fp
    67c4:	21a0      	movs	r1, #160	; 0xa0
    67c6:	5058      	str	r0, [r3, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    67c8:	2386      	movs	r3, #134	; 0x86
    67ca:	00db      	lsls	r3, r3, #3
    67cc:	465a      	mov	r2, fp
    67ce:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    67d0:	9008      	str	r0, [sp, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    67d2:	1c38      	adds	r0, r7, #0
    67d4:	f7fa fade 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    67d8:	4bfd      	ldr	r3, [pc, #1012]	; (6bd0 <fRun_9DOF_GBY_KALMAN+0xf88>)
    67da:	465a      	mov	r2, fp
    67dc:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    67de:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    67e0:	1c30      	adds	r0, r6, #0
    67e2:	f7fa fad7 	bl	d94 <__aeabi_fmul>
    67e6:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    67e8:	4640      	mov	r0, r8
    67ea:	f7f9 ff83 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    67ee:	2387      	movs	r3, #135	; 0x87
    67f0:	00db      	lsls	r3, r3, #3
    67f2:	465a      	mov	r2, fp
    67f4:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    67f6:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    67f8:	1c28      	adds	r0, r5, #0
    67fa:	f7fa facb 	bl	d94 <__aeabi_fmul>
    67fe:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    6800:	4640      	mov	r0, r8
    6802:	f7f9 ff77 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    6806:	4bf3      	ldr	r3, [pc, #972]	; (6bd4 <fRun_9DOF_GBY_KALMAN+0xf8c>)
    6808:	465a      	mov	r2, fp
    680a:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    680c:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    680e:	1c20      	adds	r0, r4, #0
    6810:	f7fa fac0 	bl	d94 <__aeabi_fmul>
    6814:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    6816:	4640      	mov	r0, r8
    6818:	f7f9 ff6c 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    681c:	2388      	movs	r3, #136	; 0x88
    681e:	00db      	lsls	r3, r3, #3
    6820:	465a      	mov	r2, fp
    6822:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    6824:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    6826:	4648      	mov	r0, r9
    6828:	f7fa fab4 	bl	d94 <__aeabi_fmul>
    682c:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    682e:	4640      	mov	r0, r8
    6830:	f7f9 ff60 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1450
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
    6834:	4be8      	ldr	r3, [pc, #928]	; (6bd8 <fRun_9DOF_GBY_KALMAN+0xf90>)
    6836:	465a      	mov	r2, fp
    6838:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    683a:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1450
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
    683c:	4650      	mov	r0, sl
    683e:	f7fa faa9 	bl	d94 <__aeabi_fmul>
    6842:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    6844:	4640      	mov	r0, r8
    6846:	f7f9 ff55 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    684a:	2394      	movs	r3, #148	; 0x94
    684c:	4659      	mov	r1, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    684e:	9003      	str	r0, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6850:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    6852:	23dc      	movs	r3, #220	; 0xdc
    6854:	009b      	lsls	r3, r3, #2
    6856:	58c9      	ldr	r1, [r1, r3]
    6858:	1c38      	adds	r0, r7, #0
    685a:	f7fa fa9b 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    685e:	23dd      	movs	r3, #221	; 0xdd
    6860:	009b      	lsls	r3, r3, #2
    6862:	465a      	mov	r2, fp
    6864:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    6866:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    6868:	1c30      	adds	r0, r6, #0
    686a:	f7fa fa93 	bl	d94 <__aeabi_fmul>
    686e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    6870:	4640      	mov	r0, r8
    6872:	f7f9 ff3f 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1438
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
    6876:	23de      	movs	r3, #222	; 0xde
    6878:	009b      	lsls	r3, r3, #2
    687a:	465a      	mov	r2, fp
    687c:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    687e:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1438
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
    6880:	1c28      	adds	r0, r5, #0
    6882:	f7fa fa87 	bl	d94 <__aeabi_fmul>
    6886:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    6888:	4640      	mov	r0, r8
    688a:	f7f9 ff33 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    688e:	465b      	mov	r3, fp
    6890:	6758      	str	r0, [r3, #116]	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    6892:	23ee      	movs	r3, #238	; 0xee
    6894:	009b      	lsls	r3, r3, #2
    6896:	465a      	mov	r2, fp
    6898:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    689a:	900a      	str	r0, [sp, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    689c:	1c38      	adds	r0, r7, #0
    689e:	f7fa fa79 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    68a2:	23ef      	movs	r3, #239	; 0xef
    68a4:	009b      	lsls	r3, r3, #2
    68a6:	465a      	mov	r2, fp
    68a8:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    68aa:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    68ac:	1c30      	adds	r0, r6, #0
    68ae:	f7fa fa71 	bl	d94 <__aeabi_fmul>
    68b2:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    68b4:	4640      	mov	r0, r8
    68b6:	f7f9 ff1d 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1441
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
    68ba:	23f0      	movs	r3, #240	; 0xf0
    68bc:	009b      	lsls	r3, r3, #2
    68be:	465a      	mov	r2, fp
    68c0:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    68c2:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1441
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
    68c4:	1c28      	adds	r0, r5, #0
    68c6:	f7fa fa65 	bl	d94 <__aeabi_fmul>
    68ca:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    68cc:	4640      	mov	r0, r8
    68ce:	f7f9 ff11 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    68d2:	465b      	mov	r3, fp
    68d4:	2180      	movs	r1, #128	; 0x80
    68d6:	5058      	str	r0, [r3, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    68d8:	2380      	movs	r3, #128	; 0x80
    68da:	00db      	lsls	r3, r3, #3
    68dc:	465a      	mov	r2, fp
    68de:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    68e0:	900d      	str	r0, [sp, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    68e2:	1c38      	adds	r0, r7, #0
    68e4:	f7fa fa56 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    68e8:	4bbc      	ldr	r3, [pc, #752]	; (6bdc <fRun_9DOF_GBY_KALMAN+0xf94>)
    68ea:	465a      	mov	r2, fp
    68ec:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    68ee:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    68f0:	1c30      	adds	r0, r6, #0
    68f2:	f7fa fa4f 	bl	d94 <__aeabi_fmul>
    68f6:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    68f8:	4640      	mov	r0, r8
    68fa:	f7f9 fefb 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1444
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
    68fe:	2381      	movs	r3, #129	; 0x81
    6900:	00db      	lsls	r3, r3, #3
    6902:	465a      	mov	r2, fp
    6904:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    6906:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1444
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
    6908:	1c28      	adds	r0, r5, #0
    690a:	f7fa fa43 	bl	d94 <__aeabi_fmul>
    690e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    6910:	4640      	mov	r0, r8
    6912:	f7f9 feef 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    6916:	465b      	mov	r3, fp
    6918:	21a4      	movs	r1, #164	; 0xa4
    691a:	5058      	str	r0, [r3, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    691c:	2389      	movs	r3, #137	; 0x89
    691e:	00db      	lsls	r3, r3, #3
    6920:	465a      	mov	r2, fp
    6922:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    6924:	9013      	str	r0, [sp, #76]	; 0x4c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6926:	1c38      	adds	r0, r7, #0
    6928:	f7fa fa34 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    692c:	4bac      	ldr	r3, [pc, #688]	; (6be0 <fRun_9DOF_GBY_KALMAN+0xf98>)
    692e:	465a      	mov	r2, fp
    6930:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6932:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    6934:	1c30      	adds	r0, r6, #0
    6936:	f7fa fa2d 	bl	d94 <__aeabi_fmul>
    693a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    693c:	4640      	mov	r0, r8
    693e:	f7f9 fed9 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    6942:	238a      	movs	r3, #138	; 0x8a
    6944:	00db      	lsls	r3, r3, #3
    6946:	465a      	mov	r2, fp
    6948:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    694a:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    694c:	1c28      	adds	r0, r5, #0
    694e:	f7fa fa21 	bl	d94 <__aeabi_fmul>
    6952:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    6954:	4640      	mov	r0, r8
    6956:	f7f9 fecd 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    695a:	4ba2      	ldr	r3, [pc, #648]	; (6be4 <fRun_9DOF_GBY_KALMAN+0xf9c>)
    695c:	465a      	mov	r2, fp
    695e:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    6960:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    6962:	1c20      	adds	r0, r4, #0
    6964:	f7fa fa16 	bl	d94 <__aeabi_fmul>
    6968:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    696a:	4640      	mov	r0, r8
    696c:	f7f9 fec2 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    6970:	238b      	movs	r3, #139	; 0x8b
    6972:	00db      	lsls	r3, r3, #3
    6974:	465a      	mov	r2, fp
    6976:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    6978:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    697a:	4648      	mov	r0, r9
    697c:	f7fa fa0a 	bl	d94 <__aeabi_fmul>
    6980:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    6982:	4640      	mov	r0, r8
    6984:	f7f9 feb6 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1450
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
    6988:	4b97      	ldr	r3, [pc, #604]	; (6be8 <fRun_9DOF_GBY_KALMAN+0xfa0>)
    698a:	465a      	mov	r2, fp
    698c:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    698e:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1450
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
    6990:	4650      	mov	r0, sl
    6992:	f7fa f9ff 	bl	d94 <__aeabi_fmul>
    6996:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    6998:	4640      	mov	r0, r8
    699a:	f7f9 feab 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    699e:	2398      	movs	r3, #152	; 0x98
    69a0:	4659      	mov	r1, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    69a2:	9004      	str	r0, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    69a4:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    69a6:	23e2      	movs	r3, #226	; 0xe2
    69a8:	009b      	lsls	r3, r3, #2
    69aa:	58c9      	ldr	r1, [r1, r3]
    69ac:	1c38      	adds	r0, r7, #0
    69ae:	f7fa f9f1 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    69b2:	23e3      	movs	r3, #227	; 0xe3
    69b4:	009b      	lsls	r3, r3, #2
    69b6:	465a      	mov	r2, fp
    69b8:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    69ba:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    69bc:	1c30      	adds	r0, r6, #0
    69be:	f7fa f9e9 	bl	d94 <__aeabi_fmul>
    69c2:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    69c4:	4640      	mov	r0, r8
    69c6:	f7f9 fe95 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1438
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
    69ca:	23e4      	movs	r3, #228	; 0xe4
    69cc:	009b      	lsls	r3, r3, #2
    69ce:	465a      	mov	r2, fp
    69d0:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    69d2:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1438
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
    69d4:	1c28      	adds	r0, r5, #0
    69d6:	f7fa f9dd 	bl	d94 <__aeabi_fmul>
    69da:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    69dc:	4640      	mov	r0, r8
    69de:	f7f9 fe89 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    69e2:	465b      	mov	r3, fp
    69e4:	6798      	str	r0, [r3, #120]	; 0x78
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    69e6:	23f4      	movs	r3, #244	; 0xf4
    69e8:	009b      	lsls	r3, r3, #2
    69ea:	465a      	mov	r2, fp
    69ec:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    69ee:	9014      	str	r0, [sp, #80]	; 0x50
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    69f0:	1c38      	adds	r0, r7, #0
    69f2:	f7fa f9cf 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    69f6:	23f5      	movs	r3, #245	; 0xf5
    69f8:	009b      	lsls	r3, r3, #2
    69fa:	465a      	mov	r2, fp
    69fc:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    69fe:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    6a00:	1c30      	adds	r0, r6, #0
    6a02:	f7fa f9c7 	bl	d94 <__aeabi_fmul>
    6a06:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    6a08:	4640      	mov	r0, r8
    6a0a:	f7f9 fe73 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1441
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
    6a0e:	23f6      	movs	r3, #246	; 0xf6
    6a10:	009b      	lsls	r3, r3, #2
    6a12:	465a      	mov	r2, fp
    6a14:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    6a16:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1441
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
    6a18:	1c28      	adds	r0, r5, #0
    6a1a:	f7fa f9bb 	bl	d94 <__aeabi_fmul>
    6a1e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    6a20:	4640      	mov	r0, r8
    6a22:	f7f9 fe67 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    6a26:	465b      	mov	r3, fp
    6a28:	2184      	movs	r1, #132	; 0x84
    6a2a:	5058      	str	r0, [r3, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    6a2c:	2383      	movs	r3, #131	; 0x83
    6a2e:	00db      	lsls	r3, r3, #3
    6a30:	465a      	mov	r2, fp
    6a32:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    6a34:	9015      	str	r0, [sp, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    6a36:	1c38      	adds	r0, r7, #0
    6a38:	f7fa f9ac 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    6a3c:	4b6b      	ldr	r3, [pc, #428]	; (6bec <fRun_9DOF_GBY_KALMAN+0xfa4>)
    6a3e:	465a      	mov	r2, fp
    6a40:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    6a42:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    6a44:	1c30      	adds	r0, r6, #0
    6a46:	f7fa f9a5 	bl	d94 <__aeabi_fmul>
    6a4a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    6a4c:	4640      	mov	r0, r8
    6a4e:	f7f9 fe51 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1444
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
    6a52:	2384      	movs	r3, #132	; 0x84
    6a54:	00db      	lsls	r3, r3, #3
    6a56:	465a      	mov	r2, fp
    6a58:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    6a5a:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1444
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
    6a5c:	1c28      	adds	r0, r5, #0
    6a5e:	f7fa f999 	bl	d94 <__aeabi_fmul>
    6a62:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    6a64:	4640      	mov	r0, r8
    6a66:	f7f9 fe45 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    6a6a:	465b      	mov	r3, fp
    6a6c:	21a8      	movs	r1, #168	; 0xa8
    6a6e:	5058      	str	r0, [r3, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6a70:	238c      	movs	r3, #140	; 0x8c
    6a72:	00db      	lsls	r3, r3, #3
    6a74:	465a      	mov	r2, fp
    6a76:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    6a78:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6a7a:	1c38      	adds	r0, r7, #0
    6a7c:	f7fa f98a 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    6a80:	4b5b      	ldr	r3, [pc, #364]	; (6bf0 <fRun_9DOF_GBY_KALMAN+0xfa8>)
    6a82:	465a      	mov	r2, fp
    6a84:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6a86:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    6a88:	1c30      	adds	r0, r6, #0
    6a8a:	f7fa f983 	bl	d94 <__aeabi_fmul>
    6a8e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6a90:	1c38      	adds	r0, r7, #0
    6a92:	f7f9 fe2f 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    6a96:	238d      	movs	r3, #141	; 0x8d
    6a98:	465f      	mov	r7, fp
    6a9a:	00db      	lsls	r3, r3, #3
    6a9c:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6a9e:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    6aa0:	1c28      	adds	r0, r5, #0
    6aa2:	f7fa f977 	bl	d94 <__aeabi_fmul>
    6aa6:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    6aa8:	1c30      	adds	r0, r6, #0
    6aaa:	f7f9 fe23 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    6aae:	4b51      	ldr	r3, [pc, #324]	; (6bf4 <fRun_9DOF_GBY_KALMAN+0xfac>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    6ab0:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    6ab2:	58f9      	ldr	r1, [r7, r3]
    6ab4:	1c20      	adds	r0, r4, #0
    6ab6:	f7fa f96d 	bl	d94 <__aeabi_fmul>
    6aba:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    6abc:	1c28      	adds	r0, r5, #0
    6abe:	f7f9 fe19 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    6ac2:	238e      	movs	r3, #142	; 0x8e
    6ac4:	00db      	lsls	r3, r3, #3
    6ac6:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    6ac8:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    6aca:	4648      	mov	r0, r9
    6acc:	f7fa f962 	bl	d94 <__aeabi_fmul>
    6ad0:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    6ad2:	1c28      	adds	r0, r5, #0
    6ad4:	f7f9 fe0e 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1450
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
    6ad8:	4b47      	ldr	r3, [pc, #284]	; (6bf8 <fRun_9DOF_GBY_KALMAN+0xfb0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    6ada:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1450
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
    6adc:	58f9      	ldr	r1, [r7, r3]
    6ade:	4650      	mov	r0, sl
    6ae0:	f7fa f958 	bl	d94 <__aeabi_fmul>
    6ae4:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    6ae6:	1c28      	adds	r0, r5, #0
    6ae8:	f7f9 fe04 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    6aec:	239c      	movs	r3, #156	; 0x9c
    6aee:	50f8      	str	r0, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1456
	}

	// set the magnetic jamming flag if there is a significant magnetic error power after calibration
	ftmp = pthisSV->fdErrSePl[X] * pthisSV->fdErrSePl[X] + pthisSV->fdErrSePl[Y] * pthisSV->fdErrSePl[Y] +
			pthisSV->fdErrSePl[Z] * pthisSV->fdErrSePl[Z];
	iMagJamming = (pthisMagCal->iValidMagCal) && (ftmp > pthisMagCal->fFourBsq);
    6af0:	4b42      	ldr	r3, [pc, #264]	; (6bfc <fRun_9DOF_GBY_KALMAN+0xfb4>)
    6af2:	9f78      	ldr	r7, [sp, #480]	; 0x1e0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    6af4:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1456
	}

	// set the magnetic jamming flag if there is a significant magnetic error power after calibration
	ftmp = pthisSV->fdErrSePl[X] * pthisSV->fdErrSePl[X] + pthisSV->fdErrSePl[Y] * pthisSV->fdErrSePl[Y] +
			pthisSV->fdErrSePl[Z] * pthisSV->fdErrSePl[Z];
	iMagJamming = (pthisMagCal->iValidMagCal) && (ftmp > pthisMagCal->fFourBsq);
    6af6:	56fb      	ldrsb	r3, [r7, r3]
    6af8:	2b00      	cmp	r3, #0
    6afa:	d101      	bne.n	6b00 <fRun_9DOF_GBY_KALMAN+0xeb8>
    6afc:	f001 fa3e 	bl	7f7c <fRun_9DOF_GBY_KALMAN+0x2334>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1454 (discriminator 1)
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
	}

	// set the magnetic jamming flag if there is a significant magnetic error power after calibration
	ftmp = pthisSV->fdErrSePl[X] * pthisSV->fdErrSePl[X] + pthisSV->fdErrSePl[Y] * pthisSV->fdErrSePl[Y] +
    6b00:	9803      	ldr	r0, [sp, #12]
    6b02:	1c01      	adds	r1, r0, #0
    6b04:	f7fa f946 	bl	d94 <__aeabi_fmul>
    6b08:	1c06      	adds	r6, r0, #0
    6b0a:	9804      	ldr	r0, [sp, #16]
    6b0c:	1c01      	adds	r1, r0, #0
    6b0e:	f7fa f941 	bl	d94 <__aeabi_fmul>
    6b12:	1c01      	adds	r1, r0, #0
    6b14:	1c30      	adds	r0, r6, #0
    6b16:	f7f9 fded 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1455 (discriminator 1)
			pthisSV->fdErrSePl[Z] * pthisSV->fdErrSePl[Z];
    6b1a:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1454 (discriminator 1)
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
	}

	// set the magnetic jamming flag if there is a significant magnetic error power after calibration
	ftmp = pthisSV->fdErrSePl[X] * pthisSV->fdErrSePl[X] + pthisSV->fdErrSePl[Y] * pthisSV->fdErrSePl[Y] +
    6b1c:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1455 (discriminator 1)
			pthisSV->fdErrSePl[Z] * pthisSV->fdErrSePl[Z];
    6b1e:	1c28      	adds	r0, r5, #0
    6b20:	f7fa f938 	bl	d94 <__aeabi_fmul>
    6b24:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1454 (discriminator 1)
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
	}

	// set the magnetic jamming flag if there is a significant magnetic error power after calibration
	ftmp = pthisSV->fdErrSePl[X] * pthisSV->fdErrSePl[X] + pthisSV->fdErrSePl[Y] * pthisSV->fdErrSePl[Y] +
    6b26:	1c30      	adds	r0, r6, #0
    6b28:	f7f9 fde4 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1456 (discriminator 1)
			pthisSV->fdErrSePl[Z] * pthisSV->fdErrSePl[Z];
	iMagJamming = (pthisMagCal->iValidMagCal) && (ftmp > pthisMagCal->fFourBsq);
    6b2c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    6b2e:	f7f9 fdcd 	bl	6cc <__aeabi_fcmpgt>
    6b32:	2701      	movs	r7, #1
    6b34:	9704      	str	r7, [sp, #16]
    6b36:	2800      	cmp	r0, #0
    6b38:	d101      	bne.n	6b3e <fRun_9DOF_GBY_KALMAN+0xef6>
    6b3a:	f001 f8f3 	bl	7d24 <fRun_9DOF_GBY_KALMAN+0x20dc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1480
	// *********************************************************************************
	// apply the a posteriori error corrections to the a posteriori state vector
	// *********************************************************************************

	// get the a posteriori delta quaternion
	fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), pthisSV->fThErrPl, -1.0F);
    6b3e:	4659      	mov	r1, fp
    6b40:	9809      	ldr	r0, [sp, #36]	; 0x24
    6b42:	3170      	adds	r1, #112	; 0x70
    6b44:	4a2e      	ldr	r2, [pc, #184]	; (6c00 <fRun_9DOF_GBY_KALMAN+0xfb8>)
    6b46:	f006 fc6d 	bl	d424 <fQuaternionFromRotationVectorDeg>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1484

	// compute the a posteriori orientation quaternion fqPl = fqMi * Deltaq(-thetae+)
	// the resulting quaternion may have negative scalar component q0
	qAeqBxC(&(pthisSV->fqPl), &(pthisSV->fqMi), &(pthisSV->fDeltaq));
    6b4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6b4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6b4e:	9810      	ldr	r0, [sp, #64]	; 0x40
    6b50:	f007 f94a 	bl	dde8 <qAeqBxC>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1488

	// normalize the a posteriori orientation quaternion to stop error propagation 
	// the renormalization function ensures that the scalar component q0 is non-negative
	fqAeqNormqA(&(pthisSV->fqPl));
    6b54:	9810      	ldr	r0, [sp, #64]	; 0x40
    6b56:	f007 fa87 	bl	e068 <fqAeqNormqA>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1491

	// compute the a posteriori rotation matrix from the a posteriori quaternion
	fRotationMatrixFromQuaternion(pthisSV->fRPl, &(pthisSV->fqPl));
    6b5a:	980e      	ldr	r0, [sp, #56]	; 0x38
    6b5c:	9910      	ldr	r1, [sp, #64]	; 0x40
    6b5e:	f006 fdcb 	bl	d6f8 <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1494

	// compute the rotation vector from the a posteriori quaternion
	fRotationVectorDegFromQuaternion(&(pthisSV->fqPl), pthisSV->fRVecPl);
    6b62:	4659      	mov	r1, fp
    6b64:	9810      	ldr	r0, [sp, #64]	; 0x40
    6b66:	3148      	adds	r1, #72	; 0x48
    6b68:	f006 fe56 	bl	d818 <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1501
	// update the a posteriori gyro offset vector b+ and
	// assign the entire linear acceleration error vector to update the linear acceleration
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    6b6c:	465b      	mov	r3, fp
    6b6e:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
    6b70:	6e58      	ldr	r0, [r3, #100]	; 0x64
    6b72:	f7fa fa39 	bl	fe8 <__aeabi_fsub>
    6b76:	465c      	mov	r4, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1503
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    6b78:	23ac      	movs	r3, #172	; 0xac
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1501
	// update the a posteriori gyro offset vector b+ and
	// assign the entire linear acceleration error vector to update the linear acceleration
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    6b7a:	6660      	str	r0, [r4, #100]	; 0x64
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1503
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    6b7c:	58e0      	ldr	r0, [r4, r3]
    6b7e:	23a0      	movs	r3, #160	; 0xa0
    6b80:	58e1      	ldr	r1, [r4, r3]
    6b82:	f7fa fa31 	bl	fe8 <__aeabi_fsub>
    6b86:	23bc      	movs	r3, #188	; 0xbc
    6b88:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1501
	// update the a posteriori gyro offset vector b+ and
	// assign the entire linear acceleration error vector to update the linear acceleration
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    6b8a:	2380      	movs	r3, #128	; 0x80
    6b8c:	58e1      	ldr	r1, [r4, r3]
    6b8e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    6b90:	f7fa fa2a 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1503
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    6b94:	23b0      	movs	r3, #176	; 0xb0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1501
	// update the a posteriori gyro offset vector b+ and
	// assign the entire linear acceleration error vector to update the linear acceleration
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    6b96:	66a0      	str	r0, [r4, #104]	; 0x68
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1503
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    6b98:	58e0      	ldr	r0, [r4, r3]
    6b9a:	23a4      	movs	r3, #164	; 0xa4
    6b9c:	58e1      	ldr	r1, [r4, r3]
    6b9e:	f7fa fa23 	bl	fe8 <__aeabi_fsub>
    6ba2:	23c0      	movs	r3, #192	; 0xc0
    6ba4:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1501
	// update the a posteriori gyro offset vector b+ and
	// assign the entire linear acceleration error vector to update the linear acceleration
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    6ba6:	2384      	movs	r3, #132	; 0x84
    6ba8:	58e1      	ldr	r1, [r4, r3]
    6baa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    6bac:	f7fa fa1c 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1503
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    6bb0:	23b4      	movs	r3, #180	; 0xb4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1501
	// update the a posteriori gyro offset vector b+ and
	// assign the entire linear acceleration error vector to update the linear acceleration
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    6bb2:	66e0      	str	r0, [r4, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1503
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    6bb4:	58e0      	ldr	r0, [r4, r3]
    6bb6:	23a8      	movs	r3, #168	; 0xa8
    6bb8:	58e1      	ldr	r1, [r4, r3]
    6bba:	f7fa fa15 	bl	fe8 <__aeabi_fsub>
    6bbe:	23c4      	movs	r3, #196	; 0xc4
    6bc0:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1509
	}

	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
    6bc2:	6967      	ldr	r7, [r4, #20]
    6bc4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1510
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
    6bc6:	4659      	mov	r1, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1509
	}

	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
    6bc8:	68e5      	ldr	r5, [r4, #12]
    6bca:	6920      	ldr	r0, [r4, #16]
    6bcc:	9705      	str	r7, [sp, #20]
    6bce:	e019      	b.n	6c04 <fRun_9DOF_GBY_KALMAN+0xfbc>
    6bd0:	00000434 	.word	0x00000434
    6bd4:	0000043c 	.word	0x0000043c
    6bd8:	00000444 	.word	0x00000444
    6bdc:	00000404 	.word	0x00000404
    6be0:	0000044c 	.word	0x0000044c
    6be4:	00000454 	.word	0x00000454
    6be8:	0000045c 	.word	0x0000045c
    6bec:	0000041c 	.word	0x0000041c
    6bf0:	00000464 	.word	0x00000464
    6bf4:	0000046c 	.word	0x0000046c
    6bf8:	00000474 	.word	0x00000474
    6bfc:	00000416 	.word	0x00000416
    6c00:	bf800000 	.word	0xbf800000
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1510
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
    6c04:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1509
	}

	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
    6c06:	465f      	mov	r7, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1510
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
    6c08:	6962      	ldr	r2, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1509
	}

	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
    6c0a:	6a3f      	ldr	r7, [r7, #32]
    6c0c:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1510
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
    6c0e:	9108      	str	r1, [sp, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1509
	}

	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
    6c10:	9805      	ldr	r0, [sp, #20]
    6c12:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1510
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
    6c14:	4691      	mov	r9, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1509
	}

	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
    6c16:	9707      	str	r7, [sp, #28]
    6c18:	f7fa f8bc 	bl	d94 <__aeabi_fmul>
    6c1c:	4641      	mov	r1, r8
    6c1e:	1c04      	adds	r4, r0, #0
    6c20:	9807      	ldr	r0, [sp, #28]
    6c22:	f7fa f8b7 	bl	d94 <__aeabi_fmul>
    6c26:	1c01      	adds	r1, r0, #0
    6c28:	1c20      	adds	r0, r4, #0
    6c2a:	f7f9 fd63 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1510
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
    6c2e:	4649      	mov	r1, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1509
	}

	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
    6c30:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1510
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
    6c32:	9808      	ldr	r0, [sp, #32]
    6c34:	f7fa f8ae 	bl	d94 <__aeabi_fmul>
    6c38:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1509
	}

	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
    6c3a:	1c20      	adds	r0, r4, #0
    6c3c:	f7f9 fd5a 	bl	6f4 <__aeabi_fadd>
    6c40:	24c8      	movs	r4, #200	; 0xc8
    6c42:	465b      	mov	r3, fp
    6c44:	5118      	str	r0, [r3, r4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1511
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
    6c46:	699f      	ldr	r7, [r3, #24]
    6c48:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    6c4a:	9709      	str	r7, [sp, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1512
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
    6c4c:	6b1f      	ldr	r7, [r3, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1511
	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
    6c4e:	9909      	ldr	r1, [sp, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1509
	}

	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
    6c50:	4682      	mov	sl, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1511
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
    6c52:	1c28      	adds	r0, r5, #0
    6c54:	940b      	str	r4, [sp, #44]	; 0x2c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1512
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
    6c56:	970a      	str	r7, [sp, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1511
	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
    6c58:	f7fa f89c 	bl	d94 <__aeabi_fmul>
    6c5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6c5e:	1c04      	adds	r4, r0, #0
    6c60:	4640      	mov	r0, r8
    6c62:	f7fa f897 	bl	d94 <__aeabi_fmul>
    6c66:	1c01      	adds	r1, r0, #0
    6c68:	1c20      	adds	r0, r4, #0
    6c6a:	f7f9 fd43 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1512
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
    6c6e:	990a      	ldr	r1, [sp, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1511
	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
    6c70:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1512
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
    6c72:	4648      	mov	r0, r9
    6c74:	f7fa f88e 	bl	d94 <__aeabi_fmul>
    6c78:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1511
	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
    6c7a:	1c20      	adds	r0, r4, #0
    6c7c:	f7f9 fd3a 	bl	6f4 <__aeabi_fadd>
    6c80:	4659      	mov	r1, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1513
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Z] = pthisSV->fRPl[X][Z] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Z] * pthisAccel->fGpFast[Y] +
    6c82:	69cc      	ldr	r4, [r1, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1511
	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
    6c84:	22cc      	movs	r2, #204	; 0xcc
    6c86:	5088      	str	r0, [r1, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1513
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Z] = pthisSV->fRPl[X][Z] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Z] * pthisAccel->fGpFast[Y] +
    6c88:	6a8e      	ldr	r6, [r1, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1514
			pthisSV->fRPl[Z][Z] * pthisAccel->fGpFast[Z];
    6c8a:	6b4f      	ldr	r7, [r1, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1511
	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
    6c8c:	9003      	str	r0, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1513
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Z] = pthisSV->fRPl[X][Z] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Z] * pthisAccel->fGpFast[Y] +
    6c8e:	1c21      	adds	r1, r4, #0
    6c90:	1c28      	adds	r0, r5, #0
    6c92:	f7fa f87f 	bl	d94 <__aeabi_fmul>
    6c96:	1c31      	adds	r1, r6, #0
    6c98:	1c05      	adds	r5, r0, #0
    6c9a:	4640      	mov	r0, r8
    6c9c:	f7fa f87a 	bl	d94 <__aeabi_fmul>
    6ca0:	1c01      	adds	r1, r0, #0
    6ca2:	1c28      	adds	r0, r5, #0
    6ca4:	f7f9 fd26 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1514
			pthisSV->fRPl[Z][Z] * pthisAccel->fGpFast[Z];
    6ca8:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1513
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Z] = pthisSV->fRPl[X][Z] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Z] * pthisAccel->fGpFast[Y] +
    6caa:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1514
			pthisSV->fRPl[Z][Z] * pthisAccel->fGpFast[Z];
    6cac:	4648      	mov	r0, r9
    6cae:	f7fa f871 	bl	d94 <__aeabi_fmul>
    6cb2:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1513
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Z] = pthisSV->fRPl[X][Z] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Z] * pthisAccel->fGpFast[Y] +
    6cb4:	1c28      	adds	r0, r5, #0
    6cb6:	f7f9 fd1d 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1516
			pthisSV->fRPl[Z][Z] * pthisAccel->fGpFast[Z];
	// remove gravity and correct the sign if the coordinate system is gravity positive / acceleration negative 
	switch (ithisCoordSystem)
    6cba:	990f      	ldr	r1, [sp, #60]	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1513
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Z] = pthisSV->fRPl[X][Z] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Z] * pthisAccel->fGpFast[Y] +
    6cbc:	25d0      	movs	r5, #208	; 0xd0
    6cbe:	465b      	mov	r3, fp
    6cc0:	5158      	str	r0, [r3, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1516
			pthisSV->fRPl[Z][Z] * pthisAccel->fGpFast[Z];
	// remove gravity and correct the sign if the coordinate system is gravity positive / acceleration negative 
	switch (ithisCoordSystem)
    6cc2:	2900      	cmp	r1, #0
    6cc4:	d101      	bne.n	6cca <fRun_9DOF_GBY_KALMAN+0x1082>
    6cc6:	f002 fc37 	bl	9538 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1538>
    6cca:	2901      	cmp	r1, #1
    6ccc:	d101      	bne.n	6cd2 <fRun_9DOF_GBY_KALMAN+0x108a>
    6cce:	f001 ff9c 	bl	8c0a <PSP_CNFG_MQX_KERNEL_LOGGING+0xc0a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1533
		pthisSV->faGlPl[Z] = pthisSV->faGlPl[Z] - 1.0F;
		break;
	case WIN8:
	default:
		// gravity positive ENU
		pthisSV->faGlPl[X] = -pthisSV->faGlPl[X];
    6cd2:	2180      	movs	r1, #128	; 0x80
    6cd4:	0609      	lsls	r1, r1, #24
    6cd6:	1c0b      	adds	r3, r1, #0
    6cd8:	4453      	add	r3, sl
    6cda:	465a      	mov	r2, fp
    6cdc:	21c8      	movs	r1, #200	; 0xc8
    6cde:	5053      	str	r3, [r2, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1534
		pthisSV->faGlPl[Y] = -pthisSV->faGlPl[Y];
    6ce0:	9a03      	ldr	r2, [sp, #12]
    6ce2:	2180      	movs	r1, #128	; 0x80
    6ce4:	0609      	lsls	r1, r1, #24
    6ce6:	1853      	adds	r3, r2, r1
    6ce8:	465a      	mov	r2, fp
    6cea:	21cc      	movs	r1, #204	; 0xcc
    6cec:	5053      	str	r3, [r2, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1535
		pthisSV->faGlPl[Z] = -(pthisSV->faGlPl[Z] + 1.0F);
    6cee:	21fe      	movs	r1, #254	; 0xfe
    6cf0:	0589      	lsls	r1, r1, #22
    6cf2:	f7f9 fcff 	bl	6f4 <__aeabi_fadd>
    6cf6:	2280      	movs	r2, #128	; 0x80
    6cf8:	0612      	lsls	r2, r2, #24
    6cfa:	1880      	adds	r0, r0, r2
    6cfc:	465b      	mov	r3, fp
    6cfe:	5158      	str	r0, [r3, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1540
		break;
	}

	// update the reference geomagnetic vector using magnetic disturbance error if valid calibration and no jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
    6d00:	4b6b      	ldr	r3, [pc, #428]	; (6eb0 <fRun_9DOF_GBY_KALMAN+0x1268>)
    6d02:	9878      	ldr	r0, [sp, #480]	; 0x1e0
    6d04:	56c3      	ldrsb	r3, [r0, r3]
    6d06:	2b00      	cmp	r3, #0
    6d08:	d101      	bne.n	6d0e <fRun_9DOF_GBY_KALMAN+0x10c6>
    6d0a:	f001 ff8b 	bl	8c24 <PSP_CNFG_MQX_KERNEL_LOGGING+0xc24>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1540 (discriminator 1)
    6d0e:	9904      	ldr	r1, [sp, #16]
    6d10:	2900      	cmp	r1, #0
    6d12:	d001      	beq.n	6d18 <fRun_9DOF_GBY_KALMAN+0x10d0>
    6d14:	f001 ff86 	bl	8c24 <PSP_CNFG_MQX_KERNEL_LOGGING+0xc24>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1546
	{
		if (ithisCoordSystem == NED)
		{
			// de-rotate the NED magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[X] = pthisSV->fRPl[X][X] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][X] * pthisSV->fdErrSePl[Y] +
    6d18:	4658      	mov	r0, fp
    6d1a:	2394      	movs	r3, #148	; 0x94
    6d1c:	58c3      	ldr	r3, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1542
	}

	// update the reference geomagnetic vector using magnetic disturbance error if valid calibration and no jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		if (ithisCoordSystem == NED)
    6d1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1546
		{
			// de-rotate the NED magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[X] = pthisSV->fRPl[X][X] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][X] * pthisSV->fdErrSePl[Y] +
    6d20:	4698      	mov	r8, r3
    6d22:	2398      	movs	r3, #152	; 0x98
    6d24:	58c3      	ldr	r3, [r0, r3]
    6d26:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1547
					pthisSV->fRPl[Z][X] * pthisSV->fdErrSePl[Z];
    6d28:	239c      	movs	r3, #156	; 0x9c
    6d2a:	58c3      	ldr	r3, [r0, r3]
    6d2c:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1542
	}

	// update the reference geomagnetic vector using magnetic disturbance error if valid calibration and no jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		if (ithisCoordSystem == NED)
    6d2e:	2a00      	cmp	r2, #0
    6d30:	d001      	beq.n	6d36 <fRun_9DOF_GBY_KALMAN+0x10ee>
    6d32:	f002 fcaf 	bl	9694 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1694>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1546
		{
			// de-rotate the NED magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[X] = pthisSV->fRPl[X][X] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][X] * pthisSV->fdErrSePl[Y] +
    6d36:	4641      	mov	r1, r8
    6d38:	9805      	ldr	r0, [sp, #20]
    6d3a:	f7fa f82b 	bl	d94 <__aeabi_fmul>
    6d3e:	4649      	mov	r1, r9
    6d40:	1c05      	adds	r5, r0, #0
    6d42:	9807      	ldr	r0, [sp, #28]
    6d44:	f7fa f826 	bl	d94 <__aeabi_fmul>
    6d48:	1c01      	adds	r1, r0, #0
    6d4a:	1c28      	adds	r0, r5, #0
    6d4c:	f7f9 fcd2 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1547
					pthisSV->fRPl[Z][X] * pthisSV->fdErrSePl[Z];
    6d50:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1546
	{
		if (ithisCoordSystem == NED)
		{
			// de-rotate the NED magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[X] = pthisSV->fRPl[X][X] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][X] * pthisSV->fdErrSePl[Y] +
    6d52:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1547
					pthisSV->fRPl[Z][X] * pthisSV->fdErrSePl[Z];
    6d54:	9808      	ldr	r0, [sp, #32]
    6d56:	f7fa f81d 	bl	d94 <__aeabi_fmul>
    6d5a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1546
	{
		if (ithisCoordSystem == NED)
		{
			// de-rotate the NED magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[X] = pthisSV->fRPl[X][X] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][X] * pthisSV->fdErrSePl[Y] +
    6d5c:	1c28      	adds	r0, r5, #0
    6d5e:	f7f9 fcc9 	bl	6f4 <__aeabi_fadd>
    6d62:	2388      	movs	r3, #136	; 0x88
    6d64:	4659      	mov	r1, fp
    6d66:	50c8      	str	r0, [r1, r3]
    6d68:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1548
					pthisSV->fRPl[Z][X] * pthisSV->fdErrSePl[Z];
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
    6d6a:	4641      	mov	r1, r8
    6d6c:	1c20      	adds	r0, r4, #0
    6d6e:	f7fa f811 	bl	d94 <__aeabi_fmul>
    6d72:	4649      	mov	r1, r9
    6d74:	1c04      	adds	r4, r0, #0
    6d76:	1c30      	adds	r0, r6, #0
    6d78:	f7fa f80c 	bl	d94 <__aeabi_fmul>
    6d7c:	1c01      	adds	r1, r0, #0
    6d7e:	1c20      	adds	r0, r4, #0
    6d80:	f7f9 fcb8 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1549
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];
    6d84:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1548
		{
			// de-rotate the NED magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[X] = pthisSV->fRPl[X][X] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][X] * pthisSV->fdErrSePl[Y] +
					pthisSV->fRPl[Z][X] * pthisSV->fdErrSePl[Z];
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
    6d86:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1549
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];
    6d88:	1c38      	adds	r0, r7, #0
    6d8a:	f7fa f803 	bl	d94 <__aeabi_fmul>
    6d8e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1548
		{
			// de-rotate the NED magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[X] = pthisSV->fRPl[X][X] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][X] * pthisSV->fdErrSePl[Y] +
					pthisSV->fRPl[Z][X] * pthisSV->fdErrSePl[Z];
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
    6d90:	1c20      	adds	r0, r4, #0
    6d92:	f7f9 fcaf 	bl	6f4 <__aeabi_fadd>
    6d96:	465a      	mov	r2, fp
    6d98:	2390      	movs	r3, #144	; 0x90
    6d9a:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1553
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];

			// compute components of the new geomagnetic vector
			// the north pointing component fadj must always be non-negative
			fopp = pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z];
    6d9c:	2386      	movs	r3, #134	; 0x86
    6d9e:	005b      	lsls	r3, r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1548
		{
			// de-rotate the NED magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[X] = pthisSV->fRPl[X][X] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][X] * pthisSV->fdErrSePl[Y] +
					pthisSV->fRPl[Z][X] * pthisSV->fdErrSePl[Z];
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
    6da0:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1553
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];

			// compute components of the new geomagnetic vector
			// the north pointing component fadj must always be non-negative
			fopp = pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z];
    6da2:	58d0      	ldr	r0, [r2, r3]
    6da4:	f7fa f920 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1554
			fadj = pthisSV->fmGl[X] - pthisSV->fdErrGlPl[X];
    6da8:	2382      	movs	r3, #130	; 0x82
    6daa:	005b      	lsls	r3, r3, #1
    6dac:	465c      	mov	r4, fp
    6dae:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1553
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];

			// compute components of the new geomagnetic vector
			// the north pointing component fadj must always be non-negative
			fopp = pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z];
    6db0:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1554
			fadj = pthisSV->fmGl[X] - pthisSV->fdErrGlPl[X];
    6db2:	58e0      	ldr	r0, [r4, r3]
    6db4:	f7fa f918 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1555
			if (fadj < 0.0F)
    6db8:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1554
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];

			// compute components of the new geomagnetic vector
			// the north pointing component fadj must always be non-negative
			fopp = pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z];
			fadj = pthisSV->fmGl[X] - pthisSV->fdErrGlPl[X];
    6dba:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1555
			if (fadj < 0.0F)
    6dbc:	f7f9 fc72 	bl	6a4 <__aeabi_fcmplt>
    6dc0:	2800      	cmp	r0, #0
    6dc2:	d001      	beq.n	6dc8 <fRun_9DOF_GBY_KALMAN+0x1180>
    6dc4:	f002 fd0e 	bl	97e4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x17e4>
    6dc8:	1c20      	adds	r0, r4, #0
    6dca:	1c21      	adds	r1, r4, #0
    6dcc:	f7f9 ffe2 	bl	d94 <__aeabi_fmul>
    6dd0:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1559
			{
				fadj = 0.0F;
			}
			fhyp = sqrtf(fopp * fopp + fadj * fadj);
    6dd2:	1c31      	adds	r1, r6, #0
    6dd4:	1c30      	adds	r0, r6, #0
    6dd6:	f7f9 ffdd 	bl	d94 <__aeabi_fmul>
    6dda:	1c29      	adds	r1, r5, #0
    6ddc:	f7f9 fc8a 	bl	6f4 <__aeabi_fadd>
    6de0:	f00a fc6e 	bl	116c0 <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1562

			// check for the pathological condition of zero geomagnetic field
			if (fhyp != 0.0F)
    6de4:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1559
			fadj = pthisSV->fmGl[X] - pthisSV->fdErrGlPl[X];
			if (fadj < 0.0F)
			{
				fadj = 0.0F;
			}
			fhyp = sqrtf(fopp * fopp + fadj * fadj);
    6de6:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1562

			// check for the pathological condition of zero geomagnetic field
			if (fhyp != 0.0F)
    6de8:	f7f9 fc56 	bl	698 <__aeabi_fcmpeq>
    6dec:	2800      	cmp	r0, #0
    6dee:	d136      	bne.n	6e5e <fRun_9DOF_GBY_KALMAN+0x1216>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1565
			{
				// compute the sine and cosine of the new geomagnetic vector
				ftmp = 1.0F / fhyp;
    6df0:	20fe      	movs	r0, #254	; 0xfe
    6df2:	1c29      	adds	r1, r5, #0
    6df4:	0580      	lsls	r0, r0, #22
    6df6:	f7f9 fde9 	bl	9cc <__aeabi_fdiv>
    6dfa:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1566
				fsindelta = fopp * ftmp;
    6dfc:	1c29      	adds	r1, r5, #0
    6dfe:	1c30      	adds	r0, r6, #0
    6e00:	f7f9 ffc8 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1570
				fcosdelta = fadj * ftmp;

				// limit the inclination angle between limits to prevent runaway
				if (fsindelta > SINDELTAMAX)
    6e04:	492b      	ldr	r1, [pc, #172]	; (6eb4 <fRun_9DOF_GBY_KALMAN+0x126c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1566
			// check for the pathological condition of zero geomagnetic field
			if (fhyp != 0.0F)
			{
				// compute the sine and cosine of the new geomagnetic vector
				ftmp = 1.0F / fhyp;
				fsindelta = fopp * ftmp;
    6e06:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1570
				fcosdelta = fadj * ftmp;

				// limit the inclination angle between limits to prevent runaway
				if (fsindelta > SINDELTAMAX)
    6e08:	f7f9 fc60 	bl	6cc <__aeabi_fcmpgt>
    6e0c:	2800      	cmp	r0, #0
    6e0e:	d001      	beq.n	6e14 <fRun_9DOF_GBY_KALMAN+0x11cc>
    6e10:	f002 fc3c 	bl	968c <PSP_CNFG_MQX_KERNEL_LOGGING+0x168c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1575
				{
					fsindelta = SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
				}
				else if (fsindelta < -SINDELTAMAX)
    6e14:	1c30      	adds	r0, r6, #0
    6e16:	4928      	ldr	r1, [pc, #160]	; (6eb8 <fRun_9DOF_GBY_KALMAN+0x1270>)
    6e18:	f7f9 fc44 	bl	6a4 <__aeabi_fcmplt>
    6e1c:	2800      	cmp	r0, #0
    6e1e:	d001      	beq.n	6e24 <fRun_9DOF_GBY_KALMAN+0x11dc>
    6e20:	f002 fce4 	bl	97ec <PSP_CNFG_MQX_KERNEL_LOGGING+0x17ec>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1567
			if (fhyp != 0.0F)
			{
				// compute the sine and cosine of the new geomagnetic vector
				ftmp = 1.0F / fhyp;
				fsindelta = fopp * ftmp;
				fcosdelta = fadj * ftmp;
    6e24:	1c20      	adds	r0, r4, #0
    6e26:	1c29      	adds	r1, r5, #0
    6e28:	f7f9 ffb4 	bl	d94 <__aeabi_fmul>
    6e2c:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1582
					fsindelta = -SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
				}

				// compute the new geomagnetic vector (always north pointing)
				pthisSV->fDeltaPl = fasin_deg(fsindelta);
    6e2e:	1c30      	adds	r0, r6, #0
    6e30:	f7fb feba 	bl	2ba8 <fasin_deg>
    6e34:	465f      	mov	r7, fp
    6e36:	23b8      	movs	r3, #184	; 0xb8
    6e38:	50f8      	str	r0, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1583
				pthisSV->fmGl[X] = pthisMagCal->fB * fcosdelta;
    6e3a:	9f78      	ldr	r7, [sp, #480]	; 0x1e0
    6e3c:	1c21      	adds	r1, r4, #0
    6e3e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
    6e40:	1c28      	adds	r0, r5, #0
    6e42:	f7f9 ffa7 	bl	d94 <__aeabi_fmul>
    6e46:	2382      	movs	r3, #130	; 0x82
    6e48:	005b      	lsls	r3, r3, #1
    6e4a:	4659      	mov	r1, fp
    6e4c:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1584
				pthisSV->fmGl[Z] = pthisMagCal->fB * fsindelta;
    6e4e:	1c30      	adds	r0, r6, #0
    6e50:	1c29      	adds	r1, r5, #0
    6e52:	f7f9 ff9f 	bl	d94 <__aeabi_fmul>
    6e56:	2386      	movs	r3, #134	; 0x86
    6e58:	005b      	lsls	r3, r3, #1
    6e5a:	465a      	mov	r2, fp
    6e5c:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1641
	// *********************************************************************************

	if (ithisCoordSystem == NED)
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
    6e5e:	465b      	mov	r3, fp
    6e60:	330c      	adds	r3, #12
    6e62:	465a      	mov	r2, fp
    6e64:	9300      	str	r3, [sp, #0]
    6e66:	3304      	adds	r3, #4
    6e68:	9301      	str	r3, [sp, #4]
    6e6a:	3204      	adds	r2, #4
    6e6c:	980e      	ldr	r0, [sp, #56]	; 0x38
    6e6e:	4659      	mov	r1, fp
    6e70:	3b08      	subs	r3, #8
    6e72:	f006 f92d 	bl	d0d0 <fNEDAnglesDegFromRotationMatrix>
    6e76:	f001 feeb 	bl	8c50 <PSP_CNFG_MQX_KERNEL_LOGGING+0xc50>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1309
					if (*pfC6x12jk == 1.0F)
						*pftmpA12x6ij += *pfQw12x12ik;
					else if (*pfC6x12jk == -1.0F)
						*pftmpA12x6ij -= *pfQw12x12ik;
					else
						*pftmpA12x6ij += *pfQw12x12ik * *pfC6x12jk;
    6e7a:	4649      	mov	r1, r9
    6e7c:	1c28      	adds	r0, r5, #0
    6e7e:	f7f9 ff89 	bl	d94 <__aeabi_fmul>
    6e82:	4642      	mov	r2, r8
    6e84:	1c01      	adds	r1, r0, #0
    6e86:	6810      	ldr	r0, [r2, #0]
    6e88:	f7f9 fc34 	bl	6f4 <__aeabi_fadd>
    6e8c:	4643      	mov	r3, r8
    6e8e:	6018      	str	r0, [r3, #0]
    6e90:	f7ff f9b9 	bl	6206 <fRun_9DOF_GBY_KALMAN+0x5be>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1353
					if (*pfC6x12ik == 1.0F)
						*pfPPlus12x12ij += *pftmpA12x6kj;
					else if (*pfC6x12ik == -1.0F)
						*pfPPlus12x12ij -= *pftmpA12x6kj;
					else
						*pfPPlus12x12ij += *pfC6x12ik * *pftmpA12x6kj;
    6e94:	4641      	mov	r1, r8
    6e96:	1c30      	adds	r0, r6, #0
    6e98:	f7f9 ff7c 	bl	d94 <__aeabi_fmul>
    6e9c:	464a      	mov	r2, r9
    6e9e:	1c01      	adds	r1, r0, #0
    6ea0:	6810      	ldr	r0, [r2, #0]
    6ea2:	f7f9 fc27 	bl	6f4 <__aeabi_fadd>
    6ea6:	464b      	mov	r3, r9
    6ea8:	6018      	str	r0, [r3, #0]
    6eaa:	f7ff fa30 	bl	630e <fRun_9DOF_GBY_KALMAN+0x6c6>
    6eae:	46c0      	nop			; (mov r8, r8)
    6eb0:	00000416 	.word	0x00000416
    6eb4:	3f6803ca 	.word	0x3f6803ca
    6eb8:	bf6803ca 	.word	0xbf6803ca
    6ebc:	4640      	movvs	r0, r8
    6ebe:	2100      	movs	r1, #0
    6ec0:	f7f9 fbea 	bl	698 <__aeabi_fcmpeq>
    6ec4:	2800      	cmp	r0, #0
    6ec6:	d100      	bne.n	6eca <fRun_9DOF_GBY_KALMAN+0x1282>
    6ec8:	e109      	b.n	70de <fRun_9DOF_GBY_KALMAN+0x1496>
    6eca:	9804      	ldr	r0, [sp, #16]
    6ecc:	2100      	movs	r1, #0
    6ece:	f7f9 fbe3 	bl	698 <__aeabi_fcmpeq>
    6ed2:	2800      	cmp	r0, #0
    6ed4:	d101      	bne.n	6eda <fRun_9DOF_GBY_KALMAN+0x1292>
    6ed6:	f000 fde5 	bl	7aa4 <fRun_9DOF_GBY_KALMAN+0x1e5c>
    6eda:	9805      	ldr	r0, [sp, #20]
    6edc:	2100      	movs	r1, #0
    6ede:	f7f9 fbdb 	bl	698 <__aeabi_fcmpeq>
    6ee2:	2800      	cmp	r0, #0
    6ee4:	d101      	bne.n	6eea <fRun_9DOF_GBY_KALMAN+0x12a2>
    6ee6:	f001 f951 	bl	818c <PSP_CNFG_MQX_KERNEL_LOGGING+0x18c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    6eea:	4650      	mov	r0, sl
    6eec:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6eee:	6829      	ldr	r1, [r5, #0]
    6ef0:	9803      	ldr	r0, [sp, #12]
    6ef2:	f7f9 ff4f 	bl	d94 <__aeabi_fmul>
    6ef6:	2100      	movs	r1, #0
    6ef8:	f7f9 fbfc 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6efc:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6efe:	4680      	mov	r8, r0
    6f00:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6f02:	1c30      	adds	r0, r6, #0
    6f04:	f7f9 fbc8 	bl	698 <__aeabi_fcmpeq>
    6f08:	2800      	cmp	r0, #0
    6f0a:	d109      	bne.n	6f20 <fRun_9DOF_GBY_KALMAN+0x12d8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6f0c:	6b29      	ldr	r1, [r5, #48]	; 0x30
    6f0e:	1c30      	adds	r0, r6, #0
    6f10:	f7f9 ff40 	bl	d94 <__aeabi_fmul>
    6f14:	1c01      	adds	r1, r0, #0
    6f16:	4640      	mov	r0, r8
    6f18:	f7f9 fbec 	bl	6f4 <__aeabi_fadd>
    6f1c:	4680      	mov	r8, r0
    6f1e:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6f20:	1c38      	adds	r0, r7, #0
    6f22:	2100      	movs	r1, #0
    6f24:	f7f9 fbb8 	bl	698 <__aeabi_fcmpeq>
    6f28:	2800      	cmp	r0, #0
    6f2a:	d107      	bne.n	6f3c <fRun_9DOF_GBY_KALMAN+0x12f4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6f2c:	6e29      	ldr	r1, [r5, #96]	; 0x60
    6f2e:	1c38      	adds	r0, r7, #0
    6f30:	f7f9 ff30 	bl	d94 <__aeabi_fmul>
    6f34:	4641      	mov	r1, r8
    6f36:	f7f9 fbdd 	bl	6f4 <__aeabi_fadd>
    6f3a:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    6f3c:	4651      	mov	r1, sl
    6f3e:	6061      	str	r1, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6f40:	6869      	ldr	r1, [r5, #4]
    6f42:	9803      	ldr	r0, [sp, #12]
    6f44:	f7f9 ff26 	bl	d94 <__aeabi_fmul>
    6f48:	2100      	movs	r1, #0
    6f4a:	f7f9 fbd3 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6f4e:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6f50:	4680      	mov	r8, r0
    6f52:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6f54:	1c30      	adds	r0, r6, #0
    6f56:	f7f9 fb9f 	bl	698 <__aeabi_fcmpeq>
    6f5a:	2800      	cmp	r0, #0
    6f5c:	d109      	bne.n	6f72 <fRun_9DOF_GBY_KALMAN+0x132a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6f5e:	6b69      	ldr	r1, [r5, #52]	; 0x34
    6f60:	1c30      	adds	r0, r6, #0
    6f62:	f7f9 ff17 	bl	d94 <__aeabi_fmul>
    6f66:	1c01      	adds	r1, r0, #0
    6f68:	4640      	mov	r0, r8
    6f6a:	f7f9 fbc3 	bl	6f4 <__aeabi_fadd>
    6f6e:	4680      	mov	r8, r0
    6f70:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6f72:	1c38      	adds	r0, r7, #0
    6f74:	2100      	movs	r1, #0
    6f76:	f7f9 fb8f 	bl	698 <__aeabi_fcmpeq>
    6f7a:	2800      	cmp	r0, #0
    6f7c:	d107      	bne.n	6f8e <fRun_9DOF_GBY_KALMAN+0x1346>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6f7e:	6e69      	ldr	r1, [r5, #100]	; 0x64
    6f80:	1c38      	adds	r0, r7, #0
    6f82:	f7f9 ff07 	bl	d94 <__aeabi_fmul>
    6f86:	4641      	mov	r1, r8
    6f88:	f7f9 fbb4 	bl	6f4 <__aeabi_fadd>
    6f8c:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    6f8e:	4652      	mov	r2, sl
    6f90:	60a2      	str	r2, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6f92:	68a9      	ldr	r1, [r5, #8]
    6f94:	9803      	ldr	r0, [sp, #12]
    6f96:	f7f9 fefd 	bl	d94 <__aeabi_fmul>
    6f9a:	2100      	movs	r1, #0
    6f9c:	f7f9 fbaa 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6fa0:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6fa2:	4680      	mov	r8, r0
    6fa4:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6fa6:	1c30      	adds	r0, r6, #0
    6fa8:	f7f9 fb76 	bl	698 <__aeabi_fcmpeq>
    6fac:	2800      	cmp	r0, #0
    6fae:	d109      	bne.n	6fc4 <fRun_9DOF_GBY_KALMAN+0x137c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6fb0:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    6fb2:	1c30      	adds	r0, r6, #0
    6fb4:	f7f9 feee 	bl	d94 <__aeabi_fmul>
    6fb8:	1c01      	adds	r1, r0, #0
    6fba:	4640      	mov	r0, r8
    6fbc:	f7f9 fb9a 	bl	6f4 <__aeabi_fadd>
    6fc0:	4680      	mov	r8, r0
    6fc2:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6fc4:	1c38      	adds	r0, r7, #0
    6fc6:	2100      	movs	r1, #0
    6fc8:	f7f9 fb66 	bl	698 <__aeabi_fcmpeq>
    6fcc:	2800      	cmp	r0, #0
    6fce:	d107      	bne.n	6fe0 <fRun_9DOF_GBY_KALMAN+0x1398>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6fd0:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    6fd2:	1c38      	adds	r0, r7, #0
    6fd4:	f7f9 fede 	bl	d94 <__aeabi_fmul>
    6fd8:	4641      	mov	r1, r8
    6fda:	f7f9 fb8b 	bl	6f4 <__aeabi_fadd>
    6fde:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    6fe0:	4653      	mov	r3, sl
    6fe2:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6fe4:	68e9      	ldr	r1, [r5, #12]
    6fe6:	9803      	ldr	r0, [sp, #12]
    6fe8:	f7f9 fed4 	bl	d94 <__aeabi_fmul>
    6fec:	2100      	movs	r1, #0
    6fee:	f7f9 fb81 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6ff2:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    6ff4:	4680      	mov	r8, r0
    6ff6:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    6ff8:	1c30      	adds	r0, r6, #0
    6ffa:	f7f9 fb4d 	bl	698 <__aeabi_fcmpeq>
    6ffe:	2800      	cmp	r0, #0
    7000:	d109      	bne.n	7016 <fRun_9DOF_GBY_KALMAN+0x13ce>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7002:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    7004:	1c30      	adds	r0, r6, #0
    7006:	f7f9 fec5 	bl	d94 <__aeabi_fmul>
    700a:	1c01      	adds	r1, r0, #0
    700c:	4640      	mov	r0, r8
    700e:	f7f9 fb71 	bl	6f4 <__aeabi_fadd>
    7012:	4680      	mov	r8, r0
    7014:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7016:	1c38      	adds	r0, r7, #0
    7018:	2100      	movs	r1, #0
    701a:	f7f9 fb3d 	bl	698 <__aeabi_fcmpeq>
    701e:	2800      	cmp	r0, #0
    7020:	d107      	bne.n	7032 <fRun_9DOF_GBY_KALMAN+0x13ea>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7022:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
    7024:	1c38      	adds	r0, r7, #0
    7026:	f7f9 feb5 	bl	d94 <__aeabi_fmul>
    702a:	4641      	mov	r1, r8
    702c:	f7f9 fb62 	bl	6f4 <__aeabi_fadd>
    7030:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7032:	4650      	mov	r0, sl
    7034:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7036:	6929      	ldr	r1, [r5, #16]
    7038:	9803      	ldr	r0, [sp, #12]
    703a:	f7f9 feab 	bl	d94 <__aeabi_fmul>
    703e:	2100      	movs	r1, #0
    7040:	f7f9 fb58 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7044:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7046:	4680      	mov	r8, r0
    7048:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    704a:	1c30      	adds	r0, r6, #0
    704c:	f7f9 fb24 	bl	698 <__aeabi_fcmpeq>
    7050:	2800      	cmp	r0, #0
    7052:	d109      	bne.n	7068 <fRun_9DOF_GBY_KALMAN+0x1420>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7054:	6c29      	ldr	r1, [r5, #64]	; 0x40
    7056:	1c30      	adds	r0, r6, #0
    7058:	f7f9 fe9c 	bl	d94 <__aeabi_fmul>
    705c:	1c01      	adds	r1, r0, #0
    705e:	4640      	mov	r0, r8
    7060:	f7f9 fb48 	bl	6f4 <__aeabi_fadd>
    7064:	4680      	mov	r8, r0
    7066:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7068:	1c38      	adds	r0, r7, #0
    706a:	2100      	movs	r1, #0
    706c:	f7f9 fb14 	bl	698 <__aeabi_fcmpeq>
    7070:	2800      	cmp	r0, #0
    7072:	d107      	bne.n	7084 <fRun_9DOF_GBY_KALMAN+0x143c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7074:	6f29      	ldr	r1, [r5, #112]	; 0x70
    7076:	1c38      	adds	r0, r7, #0
    7078:	f7f9 fe8c 	bl	d94 <__aeabi_fmul>
    707c:	4641      	mov	r1, r8
    707e:	f7f9 fb39 	bl	6f4 <__aeabi_fadd>
    7082:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7084:	4651      	mov	r1, sl
    7086:	6161      	str	r1, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7088:	6969      	ldr	r1, [r5, #20]
    708a:	9803      	ldr	r0, [sp, #12]
    708c:	f7f9 fe82 	bl	d94 <__aeabi_fmul>
    7090:	2100      	movs	r1, #0
    7092:	f7f9 fb2f 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7096:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7098:	4680      	mov	r8, r0
    709a:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    709c:	1c30      	adds	r0, r6, #0
    709e:	f7f9 fafb 	bl	698 <__aeabi_fcmpeq>
    70a2:	2800      	cmp	r0, #0
    70a4:	d109      	bne.n	70ba <fRun_9DOF_GBY_KALMAN+0x1472>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    70a6:	6c69      	ldr	r1, [r5, #68]	; 0x44
    70a8:	1c30      	adds	r0, r6, #0
    70aa:	f7f9 fe73 	bl	d94 <__aeabi_fmul>
    70ae:	1c01      	adds	r1, r0, #0
    70b0:	4640      	mov	r0, r8
    70b2:	f7f9 fb1f 	bl	6f4 <__aeabi_fadd>
    70b6:	4680      	mov	r8, r0
    70b8:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    70ba:	1c38      	adds	r0, r7, #0
    70bc:	2100      	movs	r1, #0
    70be:	f7f9 faeb 	bl	698 <__aeabi_fcmpeq>
    70c2:	2800      	cmp	r0, #0
    70c4:	d001      	beq.n	70ca <fRun_9DOF_GBY_KALMAN+0x1482>
    70c6:	f7ff faff 	bl	66c8 <fRun_9DOF_GBY_KALMAN+0xa80>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    70ca:	6f69      	ldr	r1, [r5, #116]	; 0x74
    70cc:	1c38      	adds	r0, r7, #0
    70ce:	f7f9 fe61 	bl	d94 <__aeabi_fmul>
    70d2:	4641      	mov	r1, r8
    70d4:	f7f9 fb0e 	bl	6f4 <__aeabi_fadd>
    70d8:	6160      	str	r0, [r4, #20]
    70da:	f7ff faf5 	bl	66c8 <fRun_9DOF_GBY_KALMAN+0xa80>
    70de:	9804      	ldr	r0, [sp, #16]
    70e0:	2100      	movs	r1, #0
    70e2:	f7f9 fad9 	bl	698 <__aeabi_fcmpeq>
    70e6:	2800      	cmp	r0, #0
    70e8:	d100      	bne.n	70ec <fRun_9DOF_GBY_KALMAN+0x14a4>
    70ea:	e34b      	b.n	7784 <fRun_9DOF_GBY_KALMAN+0x1b3c>
    70ec:	9805      	ldr	r0, [sp, #20]
    70ee:	2100      	movs	r1, #0
    70f0:	f7f9 fad2 	bl	698 <__aeabi_fcmpeq>
    70f4:	2800      	cmp	r0, #0
    70f6:	d101      	bne.n	70fc <fRun_9DOF_GBY_KALMAN+0x14b4>
    70f8:	f001 fcee 	bl	8ad8 <PSP_CNFG_MQX_KERNEL_LOGGING+0xad8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    70fc:	4652      	mov	r2, sl
    70fe:	6022      	str	r2, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7100:	6829      	ldr	r1, [r5, #0]
    7102:	9803      	ldr	r0, [sp, #12]
    7104:	f7f9 fe46 	bl	d94 <__aeabi_fmul>
    7108:	2100      	movs	r1, #0
    710a:	f7f9 faf3 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    710e:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7110:	4681      	mov	r9, r0
    7112:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7114:	1c30      	adds	r0, r6, #0
    7116:	f7f9 fabf 	bl	698 <__aeabi_fcmpeq>
    711a:	2800      	cmp	r0, #0
    711c:	d109      	bne.n	7132 <fRun_9DOF_GBY_KALMAN+0x14ea>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    711e:	6b29      	ldr	r1, [r5, #48]	; 0x30
    7120:	1c30      	adds	r0, r6, #0
    7122:	f7f9 fe37 	bl	d94 <__aeabi_fmul>
    7126:	1c01      	adds	r1, r0, #0
    7128:	4648      	mov	r0, r9
    712a:	f7f9 fae3 	bl	6f4 <__aeabi_fadd>
    712e:	4681      	mov	r9, r0
    7130:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7132:	1c38      	adds	r0, r7, #0
    7134:	2100      	movs	r1, #0
    7136:	f7f9 faaf 	bl	698 <__aeabi_fcmpeq>
    713a:	2800      	cmp	r0, #0
    713c:	d109      	bne.n	7152 <fRun_9DOF_GBY_KALMAN+0x150a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    713e:	6e29      	ldr	r1, [r5, #96]	; 0x60
    7140:	1c38      	adds	r0, r7, #0
    7142:	f7f9 fe27 	bl	d94 <__aeabi_fmul>
    7146:	1c01      	adds	r1, r0, #0
    7148:	4648      	mov	r0, r9
    714a:	f7f9 fad3 	bl	6f4 <__aeabi_fadd>
    714e:	4681      	mov	r9, r0
    7150:	6020      	str	r0, [r4, #0]
    7152:	23f0      	movs	r3, #240	; 0xf0
    7154:	58e9      	ldr	r1, [r5, r3]
    7156:	4640      	mov	r0, r8
    7158:	f7f9 fe1c 	bl	d94 <__aeabi_fmul>
    715c:	4649      	mov	r1, r9
    715e:	f7f9 fac9 	bl	6f4 <__aeabi_fadd>
    7162:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7164:	4650      	mov	r0, sl
    7166:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7168:	6869      	ldr	r1, [r5, #4]
    716a:	9803      	ldr	r0, [sp, #12]
    716c:	f7f9 fe12 	bl	d94 <__aeabi_fmul>
    7170:	2100      	movs	r1, #0
    7172:	f7f9 fabf 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7176:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7178:	4681      	mov	r9, r0
    717a:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    717c:	1c30      	adds	r0, r6, #0
    717e:	f7f9 fa8b 	bl	698 <__aeabi_fcmpeq>
    7182:	2800      	cmp	r0, #0
    7184:	d109      	bne.n	719a <fRun_9DOF_GBY_KALMAN+0x1552>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7186:	6b69      	ldr	r1, [r5, #52]	; 0x34
    7188:	1c30      	adds	r0, r6, #0
    718a:	f7f9 fe03 	bl	d94 <__aeabi_fmul>
    718e:	1c01      	adds	r1, r0, #0
    7190:	4648      	mov	r0, r9
    7192:	f7f9 faaf 	bl	6f4 <__aeabi_fadd>
    7196:	4681      	mov	r9, r0
    7198:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    719a:	1c38      	adds	r0, r7, #0
    719c:	2100      	movs	r1, #0
    719e:	f7f9 fa7b 	bl	698 <__aeabi_fcmpeq>
    71a2:	2800      	cmp	r0, #0
    71a4:	d109      	bne.n	71ba <fRun_9DOF_GBY_KALMAN+0x1572>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    71a6:	6e69      	ldr	r1, [r5, #100]	; 0x64
    71a8:	1c38      	adds	r0, r7, #0
    71aa:	f7f9 fdf3 	bl	d94 <__aeabi_fmul>
    71ae:	1c01      	adds	r1, r0, #0
    71b0:	4648      	mov	r0, r9
    71b2:	f7f9 fa9f 	bl	6f4 <__aeabi_fadd>
    71b6:	4681      	mov	r9, r0
    71b8:	6060      	str	r0, [r4, #4]
    71ba:	22f4      	movs	r2, #244	; 0xf4
    71bc:	58a9      	ldr	r1, [r5, r2]
    71be:	4640      	mov	r0, r8
    71c0:	f7f9 fde8 	bl	d94 <__aeabi_fmul>
    71c4:	4649      	mov	r1, r9
    71c6:	f7f9 fa95 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    71ca:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    71cc:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    71ce:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    71d0:	68a9      	ldr	r1, [r5, #8]
    71d2:	9803      	ldr	r0, [sp, #12]
    71d4:	f7f9 fdde 	bl	d94 <__aeabi_fmul>
    71d8:	2100      	movs	r1, #0
    71da:	f7f9 fa8b 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    71de:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    71e0:	4681      	mov	r9, r0
    71e2:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    71e4:	1c30      	adds	r0, r6, #0
    71e6:	f7f9 fa57 	bl	698 <__aeabi_fcmpeq>
    71ea:	2800      	cmp	r0, #0
    71ec:	d109      	bne.n	7202 <fRun_9DOF_GBY_KALMAN+0x15ba>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    71ee:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    71f0:	1c30      	adds	r0, r6, #0
    71f2:	f7f9 fdcf 	bl	d94 <__aeabi_fmul>
    71f6:	1c01      	adds	r1, r0, #0
    71f8:	4648      	mov	r0, r9
    71fa:	f7f9 fa7b 	bl	6f4 <__aeabi_fadd>
    71fe:	4681      	mov	r9, r0
    7200:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7202:	1c38      	adds	r0, r7, #0
    7204:	2100      	movs	r1, #0
    7206:	f7f9 fa47 	bl	698 <__aeabi_fcmpeq>
    720a:	2800      	cmp	r0, #0
    720c:	d109      	bne.n	7222 <fRun_9DOF_GBY_KALMAN+0x15da>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    720e:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    7210:	1c38      	adds	r0, r7, #0
    7212:	f7f9 fdbf 	bl	d94 <__aeabi_fmul>
    7216:	1c01      	adds	r1, r0, #0
    7218:	4648      	mov	r0, r9
    721a:	f7f9 fa6b 	bl	6f4 <__aeabi_fadd>
    721e:	4681      	mov	r9, r0
    7220:	60a0      	str	r0, [r4, #8]
    7222:	22f8      	movs	r2, #248	; 0xf8
    7224:	58a9      	ldr	r1, [r5, r2]
    7226:	4640      	mov	r0, r8
    7228:	f7f9 fdb4 	bl	d94 <__aeabi_fmul>
    722c:	4649      	mov	r1, r9
    722e:	f7f9 fa61 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7232:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7234:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7236:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7238:	68e9      	ldr	r1, [r5, #12]
    723a:	9803      	ldr	r0, [sp, #12]
    723c:	f7f9 fdaa 	bl	d94 <__aeabi_fmul>
    7240:	2100      	movs	r1, #0
    7242:	f7f9 fa57 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7246:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7248:	4681      	mov	r9, r0
    724a:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    724c:	1c30      	adds	r0, r6, #0
    724e:	f7f9 fa23 	bl	698 <__aeabi_fcmpeq>
    7252:	2800      	cmp	r0, #0
    7254:	d109      	bne.n	726a <fRun_9DOF_GBY_KALMAN+0x1622>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7256:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    7258:	1c30      	adds	r0, r6, #0
    725a:	f7f9 fd9b 	bl	d94 <__aeabi_fmul>
    725e:	1c01      	adds	r1, r0, #0
    7260:	4648      	mov	r0, r9
    7262:	f7f9 fa47 	bl	6f4 <__aeabi_fadd>
    7266:	4681      	mov	r9, r0
    7268:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    726a:	1c38      	adds	r0, r7, #0
    726c:	2100      	movs	r1, #0
    726e:	f7f9 fa13 	bl	698 <__aeabi_fcmpeq>
    7272:	2800      	cmp	r0, #0
    7274:	d109      	bne.n	728a <fRun_9DOF_GBY_KALMAN+0x1642>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7276:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
    7278:	1c38      	adds	r0, r7, #0
    727a:	f7f9 fd8b 	bl	d94 <__aeabi_fmul>
    727e:	1c01      	adds	r1, r0, #0
    7280:	4648      	mov	r0, r9
    7282:	f7f9 fa37 	bl	6f4 <__aeabi_fadd>
    7286:	4681      	mov	r9, r0
    7288:	60e0      	str	r0, [r4, #12]
    728a:	22fc      	movs	r2, #252	; 0xfc
    728c:	58a9      	ldr	r1, [r5, r2]
    728e:	4640      	mov	r0, r8
    7290:	f7f9 fd80 	bl	d94 <__aeabi_fmul>
    7294:	4649      	mov	r1, r9
    7296:	f7f9 fa2d 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    729a:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    729c:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    729e:	6123      	str	r3, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    72a0:	6929      	ldr	r1, [r5, #16]
    72a2:	9803      	ldr	r0, [sp, #12]
    72a4:	f7f9 fd76 	bl	d94 <__aeabi_fmul>
    72a8:	2100      	movs	r1, #0
    72aa:	f7f9 fa23 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    72ae:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    72b0:	4681      	mov	r9, r0
    72b2:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    72b4:	1c30      	adds	r0, r6, #0
    72b6:	f7f9 f9ef 	bl	698 <__aeabi_fcmpeq>
    72ba:	2800      	cmp	r0, #0
    72bc:	d109      	bne.n	72d2 <fRun_9DOF_GBY_KALMAN+0x168a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    72be:	6c29      	ldr	r1, [r5, #64]	; 0x40
    72c0:	1c30      	adds	r0, r6, #0
    72c2:	f7f9 fd67 	bl	d94 <__aeabi_fmul>
    72c6:	1c01      	adds	r1, r0, #0
    72c8:	4648      	mov	r0, r9
    72ca:	f7f9 fa13 	bl	6f4 <__aeabi_fadd>
    72ce:	4681      	mov	r9, r0
    72d0:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    72d2:	1c38      	adds	r0, r7, #0
    72d4:	2100      	movs	r1, #0
    72d6:	f7f9 f9df 	bl	698 <__aeabi_fcmpeq>
    72da:	2800      	cmp	r0, #0
    72dc:	d109      	bne.n	72f2 <fRun_9DOF_GBY_KALMAN+0x16aa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    72de:	6f29      	ldr	r1, [r5, #112]	; 0x70
    72e0:	1c38      	adds	r0, r7, #0
    72e2:	f7f9 fd57 	bl	d94 <__aeabi_fmul>
    72e6:	1c01      	adds	r1, r0, #0
    72e8:	4648      	mov	r0, r9
    72ea:	f7f9 fa03 	bl	6f4 <__aeabi_fadd>
    72ee:	4681      	mov	r9, r0
    72f0:	6120      	str	r0, [r4, #16]
    72f2:	2280      	movs	r2, #128	; 0x80
    72f4:	0052      	lsls	r2, r2, #1
    72f6:	58a9      	ldr	r1, [r5, r2]
    72f8:	4640      	mov	r0, r8
    72fa:	f7f9 fd4b 	bl	d94 <__aeabi_fmul>
    72fe:	4649      	mov	r1, r9
    7300:	f7f9 f9f8 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7304:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7306:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7308:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    730a:	6969      	ldr	r1, [r5, #20]
    730c:	9803      	ldr	r0, [sp, #12]
    730e:	f7f9 fd41 	bl	d94 <__aeabi_fmul>
    7312:	2100      	movs	r1, #0
    7314:	f7f9 f9ee 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7318:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    731a:	4681      	mov	r9, r0
    731c:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    731e:	1c30      	adds	r0, r6, #0
    7320:	f7f9 f9ba 	bl	698 <__aeabi_fcmpeq>
    7324:	2800      	cmp	r0, #0
    7326:	d109      	bne.n	733c <fRun_9DOF_GBY_KALMAN+0x16f4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7328:	6c69      	ldr	r1, [r5, #68]	; 0x44
    732a:	1c30      	adds	r0, r6, #0
    732c:	f7f9 fd32 	bl	d94 <__aeabi_fmul>
    7330:	1c01      	adds	r1, r0, #0
    7332:	4648      	mov	r0, r9
    7334:	f7f9 f9de 	bl	6f4 <__aeabi_fadd>
    7338:	4681      	mov	r9, r0
    733a:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    733c:	1c38      	adds	r0, r7, #0
    733e:	2100      	movs	r1, #0
    7340:	f7f9 f9aa 	bl	698 <__aeabi_fcmpeq>
    7344:	2800      	cmp	r0, #0
    7346:	d109      	bne.n	735c <fRun_9DOF_GBY_KALMAN+0x1714>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7348:	6f69      	ldr	r1, [r5, #116]	; 0x74
    734a:	1c38      	adds	r0, r7, #0
    734c:	f7f9 fd22 	bl	d94 <__aeabi_fmul>
    7350:	1c01      	adds	r1, r0, #0
    7352:	4648      	mov	r0, r9
    7354:	f7f9 f9ce 	bl	6f4 <__aeabi_fadd>
    7358:	4681      	mov	r9, r0
    735a:	6160      	str	r0, [r4, #20]
    735c:	2782      	movs	r7, #130	; 0x82
    735e:	007f      	lsls	r7, r7, #1
    7360:	59e9      	ldr	r1, [r5, r7]
    7362:	4640      	mov	r0, r8
    7364:	f7f9 fd16 	bl	d94 <__aeabi_fmul>
    7368:	4649      	mov	r1, r9
    736a:	f7f9 f9c3 	bl	6f4 <__aeabi_fadd>
    736e:	6160      	str	r0, [r4, #20]
    7370:	f7ff f9aa 	bl	66c8 <fRun_9DOF_GBY_KALMAN+0xa80>
    7374:	9804      	ldr	r0, [sp, #16]
    7376:	2100      	movs	r1, #0
    7378:	f7f9 f98e 	bl	698 <__aeabi_fcmpeq>
    737c:	2800      	cmp	r0, #0
    737e:	d100      	bne.n	7382 <fRun_9DOF_GBY_KALMAN+0x173a>
    7380:	e255      	b.n	782e <fRun_9DOF_GBY_KALMAN+0x1be6>
    7382:	9805      	ldr	r0, [sp, #20]
    7384:	2100      	movs	r1, #0
    7386:	f7f9 f987 	bl	698 <__aeabi_fcmpeq>
    738a:	2800      	cmp	r0, #0
    738c:	d101      	bne.n	7392 <fRun_9DOF_GBY_KALMAN+0x174a>
    738e:	f001 fa09 	bl	87a4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x7a4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7392:	4650      	mov	r0, sl
    7394:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7396:	2100      	movs	r1, #0
    7398:	1c30      	adds	r0, r6, #0
    739a:	f7f9 f97d 	bl	698 <__aeabi_fcmpeq>
    739e:	2800      	cmp	r0, #0
    73a0:	d101      	bne.n	73a6 <fRun_9DOF_GBY_KALMAN+0x175e>
    73a2:	f001 fc27 	bl	8bf4 <PSP_CNFG_MQX_KERNEL_LOGGING+0xbf4>
    73a6:	2100      	movs	r1, #0
    73a8:	4689      	mov	r9, r1
    73aa:	1c38      	adds	r0, r7, #0
    73ac:	2100      	movs	r1, #0
    73ae:	f7f9 f973 	bl	698 <__aeabi_fcmpeq>
    73b2:	2800      	cmp	r0, #0
    73b4:	d109      	bne.n	73ca <fRun_9DOF_GBY_KALMAN+0x1782>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    73b6:	6e29      	ldr	r1, [r5, #96]	; 0x60
    73b8:	1c38      	adds	r0, r7, #0
    73ba:	f7f9 fceb 	bl	d94 <__aeabi_fmul>
    73be:	1c01      	adds	r1, r0, #0
    73c0:	4648      	mov	r0, r9
    73c2:	f7f9 f997 	bl	6f4 <__aeabi_fadd>
    73c6:	4681      	mov	r9, r0
    73c8:	6020      	str	r0, [r4, #0]
    73ca:	22f0      	movs	r2, #240	; 0xf0
    73cc:	58a9      	ldr	r1, [r5, r2]
    73ce:	4640      	mov	r0, r8
    73d0:	f7f9 fce0 	bl	d94 <__aeabi_fmul>
    73d4:	4649      	mov	r1, r9
    73d6:	f7f9 f98d 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    73da:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    73dc:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    73de:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    73e0:	1c30      	adds	r0, r6, #0
    73e2:	2100      	movs	r1, #0
    73e4:	f7f9 f958 	bl	698 <__aeabi_fcmpeq>
    73e8:	2800      	cmp	r0, #0
    73ea:	d001      	beq.n	73f0 <fRun_9DOF_GBY_KALMAN+0x17a8>
    73ec:	f002 f909 	bl	9602 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1602>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    73f0:	6b69      	ldr	r1, [r5, #52]	; 0x34
    73f2:	1c30      	adds	r0, r6, #0
    73f4:	f7f9 fcce 	bl	d94 <__aeabi_fmul>
    73f8:	2100      	movs	r1, #0
    73fa:	f7f9 f97b 	bl	6f4 <__aeabi_fadd>
    73fe:	4681      	mov	r9, r0
    7400:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7402:	1c38      	adds	r0, r7, #0
    7404:	2100      	movs	r1, #0
    7406:	f7f9 f947 	bl	698 <__aeabi_fcmpeq>
    740a:	2800      	cmp	r0, #0
    740c:	d109      	bne.n	7422 <fRun_9DOF_GBY_KALMAN+0x17da>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    740e:	6e69      	ldr	r1, [r5, #100]	; 0x64
    7410:	1c38      	adds	r0, r7, #0
    7412:	f7f9 fcbf 	bl	d94 <__aeabi_fmul>
    7416:	1c01      	adds	r1, r0, #0
    7418:	4648      	mov	r0, r9
    741a:	f7f9 f96b 	bl	6f4 <__aeabi_fadd>
    741e:	4681      	mov	r9, r0
    7420:	6060      	str	r0, [r4, #4]
    7422:	22f4      	movs	r2, #244	; 0xf4
    7424:	58a9      	ldr	r1, [r5, r2]
    7426:	4640      	mov	r0, r8
    7428:	f7f9 fcb4 	bl	d94 <__aeabi_fmul>
    742c:	4649      	mov	r1, r9
    742e:	f7f9 f961 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7432:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7434:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7436:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7438:	1c30      	adds	r0, r6, #0
    743a:	2100      	movs	r1, #0
    743c:	f7f9 f92c 	bl	698 <__aeabi_fcmpeq>
    7440:	2800      	cmp	r0, #0
    7442:	d001      	beq.n	7448 <fRun_9DOF_GBY_KALMAN+0x1800>
    7444:	f002 f8d9 	bl	95fa <PSP_CNFG_MQX_KERNEL_LOGGING+0x15fa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7448:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    744a:	1c30      	adds	r0, r6, #0
    744c:	f7f9 fca2 	bl	d94 <__aeabi_fmul>
    7450:	2100      	movs	r1, #0
    7452:	f7f9 f94f 	bl	6f4 <__aeabi_fadd>
    7456:	4681      	mov	r9, r0
    7458:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    745a:	1c38      	adds	r0, r7, #0
    745c:	2100      	movs	r1, #0
    745e:	f7f9 f91b 	bl	698 <__aeabi_fcmpeq>
    7462:	2800      	cmp	r0, #0
    7464:	d109      	bne.n	747a <fRun_9DOF_GBY_KALMAN+0x1832>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7466:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    7468:	1c38      	adds	r0, r7, #0
    746a:	f7f9 fc93 	bl	d94 <__aeabi_fmul>
    746e:	1c01      	adds	r1, r0, #0
    7470:	4648      	mov	r0, r9
    7472:	f7f9 f93f 	bl	6f4 <__aeabi_fadd>
    7476:	4681      	mov	r9, r0
    7478:	60a0      	str	r0, [r4, #8]
    747a:	22f8      	movs	r2, #248	; 0xf8
    747c:	58a9      	ldr	r1, [r5, r2]
    747e:	4640      	mov	r0, r8
    7480:	f7f9 fc88 	bl	d94 <__aeabi_fmul>
    7484:	4649      	mov	r1, r9
    7486:	f7f9 f935 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    748a:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    748c:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    748e:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7490:	1c30      	adds	r0, r6, #0
    7492:	2100      	movs	r1, #0
    7494:	f7f9 f900 	bl	698 <__aeabi_fcmpeq>
    7498:	2800      	cmp	r0, #0
    749a:	d001      	beq.n	74a0 <fRun_9DOF_GBY_KALMAN+0x1858>
    749c:	f002 f8a9 	bl	95f2 <PSP_CNFG_MQX_KERNEL_LOGGING+0x15f2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    74a0:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    74a2:	1c30      	adds	r0, r6, #0
    74a4:	f7f9 fc76 	bl	d94 <__aeabi_fmul>
    74a8:	2100      	movs	r1, #0
    74aa:	f7f9 f923 	bl	6f4 <__aeabi_fadd>
    74ae:	4681      	mov	r9, r0
    74b0:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    74b2:	1c38      	adds	r0, r7, #0
    74b4:	2100      	movs	r1, #0
    74b6:	f7f9 f8ef 	bl	698 <__aeabi_fcmpeq>
    74ba:	2800      	cmp	r0, #0
    74bc:	d109      	bne.n	74d2 <fRun_9DOF_GBY_KALMAN+0x188a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    74be:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
    74c0:	1c38      	adds	r0, r7, #0
    74c2:	f7f9 fc67 	bl	d94 <__aeabi_fmul>
    74c6:	1c01      	adds	r1, r0, #0
    74c8:	4648      	mov	r0, r9
    74ca:	f7f9 f913 	bl	6f4 <__aeabi_fadd>
    74ce:	4681      	mov	r9, r0
    74d0:	60e0      	str	r0, [r4, #12]
    74d2:	22fc      	movs	r2, #252	; 0xfc
    74d4:	58a9      	ldr	r1, [r5, r2]
    74d6:	4640      	mov	r0, r8
    74d8:	f7f9 fc5c 	bl	d94 <__aeabi_fmul>
    74dc:	4649      	mov	r1, r9
    74de:	f7f9 f909 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    74e2:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    74e4:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    74e6:	6123      	str	r3, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    74e8:	1c30      	adds	r0, r6, #0
    74ea:	2100      	movs	r1, #0
    74ec:	f7f9 f8d4 	bl	698 <__aeabi_fcmpeq>
    74f0:	2800      	cmp	r0, #0
    74f2:	d001      	beq.n	74f8 <fRun_9DOF_GBY_KALMAN+0x18b0>
    74f4:	f002 f81c 	bl	9530 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1530>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    74f8:	6c29      	ldr	r1, [r5, #64]	; 0x40
    74fa:	1c30      	adds	r0, r6, #0
    74fc:	f7f9 fc4a 	bl	d94 <__aeabi_fmul>
    7500:	2100      	movs	r1, #0
    7502:	f7f9 f8f7 	bl	6f4 <__aeabi_fadd>
    7506:	4681      	mov	r9, r0
    7508:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    750a:	1c38      	adds	r0, r7, #0
    750c:	2100      	movs	r1, #0
    750e:	f7f9 f8c3 	bl	698 <__aeabi_fcmpeq>
    7512:	2800      	cmp	r0, #0
    7514:	d109      	bne.n	752a <fRun_9DOF_GBY_KALMAN+0x18e2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7516:	6f29      	ldr	r1, [r5, #112]	; 0x70
    7518:	1c38      	adds	r0, r7, #0
    751a:	f7f9 fc3b 	bl	d94 <__aeabi_fmul>
    751e:	1c01      	adds	r1, r0, #0
    7520:	4648      	mov	r0, r9
    7522:	f7f9 f8e7 	bl	6f4 <__aeabi_fadd>
    7526:	4681      	mov	r9, r0
    7528:	6120      	str	r0, [r4, #16]
    752a:	2280      	movs	r2, #128	; 0x80
    752c:	0052      	lsls	r2, r2, #1
    752e:	58a9      	ldr	r1, [r5, r2]
    7530:	4640      	mov	r0, r8
    7532:	f7f9 fc2f 	bl	d94 <__aeabi_fmul>
    7536:	4649      	mov	r1, r9
    7538:	f7f9 f8dc 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    753c:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    753e:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7540:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7542:	1c30      	adds	r0, r6, #0
    7544:	2100      	movs	r1, #0
    7546:	f7f9 f8a7 	bl	698 <__aeabi_fcmpeq>
    754a:	2800      	cmp	r0, #0
    754c:	d001      	beq.n	7552 <fRun_9DOF_GBY_KALMAN+0x190a>
    754e:	f002 f80c 	bl	956a <PSP_CNFG_MQX_KERNEL_LOGGING+0x156a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7552:	6c69      	ldr	r1, [r5, #68]	; 0x44
    7554:	1c30      	adds	r0, r6, #0
    7556:	f7f9 fc1d 	bl	d94 <__aeabi_fmul>
    755a:	2100      	movs	r1, #0
    755c:	f7f9 f8ca 	bl	6f4 <__aeabi_fadd>
    7560:	1c06      	adds	r6, r0, #0
    7562:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7564:	1c38      	adds	r0, r7, #0
    7566:	2100      	movs	r1, #0
    7568:	f7f9 f896 	bl	698 <__aeabi_fcmpeq>
    756c:	2800      	cmp	r0, #0
    756e:	d001      	beq.n	7574 <fRun_9DOF_GBY_KALMAN+0x192c>
    7570:	f001 fa4c 	bl	8a0c <PSP_CNFG_MQX_KERNEL_LOGGING+0xa0c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7574:	6f69      	ldr	r1, [r5, #116]	; 0x74
    7576:	1c38      	adds	r0, r7, #0
    7578:	f7f9 fc0c 	bl	d94 <__aeabi_fmul>
    757c:	1c01      	adds	r1, r0, #0
    757e:	1c30      	adds	r0, r6, #0
    7580:	f001 fa40 	bl	8a04 <PSP_CNFG_MQX_KERNEL_LOGGING+0xa04>
    7584:	9805      	ldr	r0, [sp, #20]
    7586:	2100      	movs	r1, #0
    7588:	f7f9 f886 	bl	698 <__aeabi_fcmpeq>
    758c:	2800      	cmp	r0, #0
    758e:	d101      	bne.n	7594 <fRun_9DOF_GBY_KALMAN+0x194c>
    7590:	f000 ff2e 	bl	83f0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x3f0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7594:	4650      	mov	r0, sl
    7596:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7598:	2100      	movs	r1, #0
    759a:	1c30      	adds	r0, r6, #0
    759c:	f7f9 f87c 	bl	698 <__aeabi_fcmpeq>
    75a0:	2800      	cmp	r0, #0
    75a2:	d101      	bne.n	75a8 <fRun_9DOF_GBY_KALMAN+0x1960>
    75a4:	f001 fb1b 	bl	8bde <PSP_CNFG_MQX_KERNEL_LOGGING+0xbde>
    75a8:	2100      	movs	r1, #0
    75aa:	4688      	mov	r8, r1
    75ac:	1c38      	adds	r0, r7, #0
    75ae:	2100      	movs	r1, #0
    75b0:	f7f9 f872 	bl	698 <__aeabi_fcmpeq>
    75b4:	2800      	cmp	r0, #0
    75b6:	d109      	bne.n	75cc <fRun_9DOF_GBY_KALMAN+0x1984>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    75b8:	6e29      	ldr	r1, [r5, #96]	; 0x60
    75ba:	1c38      	adds	r0, r7, #0
    75bc:	f7f9 fbea 	bl	d94 <__aeabi_fmul>
    75c0:	1c01      	adds	r1, r0, #0
    75c2:	4640      	mov	r0, r8
    75c4:	f7f9 f896 	bl	6f4 <__aeabi_fadd>
    75c8:	4680      	mov	r8, r0
    75ca:	6020      	str	r0, [r4, #0]
    75cc:	22c0      	movs	r2, #192	; 0xc0
    75ce:	58a9      	ldr	r1, [r5, r2]
    75d0:	9804      	ldr	r0, [sp, #16]
    75d2:	f7f9 fbdf 	bl	d94 <__aeabi_fmul>
    75d6:	4641      	mov	r1, r8
    75d8:	f7f9 f88c 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    75dc:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    75de:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    75e0:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    75e2:	1c30      	adds	r0, r6, #0
    75e4:	2100      	movs	r1, #0
    75e6:	f7f9 f857 	bl	698 <__aeabi_fcmpeq>
    75ea:	2800      	cmp	r0, #0
    75ec:	d001      	beq.n	75f2 <fRun_9DOF_GBY_KALMAN+0x19aa>
    75ee:	f002 f81b 	bl	9628 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1628>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    75f2:	6b69      	ldr	r1, [r5, #52]	; 0x34
    75f4:	1c30      	adds	r0, r6, #0
    75f6:	f7f9 fbcd 	bl	d94 <__aeabi_fmul>
    75fa:	2100      	movs	r1, #0
    75fc:	f7f9 f87a 	bl	6f4 <__aeabi_fadd>
    7600:	4680      	mov	r8, r0
    7602:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7604:	1c38      	adds	r0, r7, #0
    7606:	2100      	movs	r1, #0
    7608:	f7f9 f846 	bl	698 <__aeabi_fcmpeq>
    760c:	2800      	cmp	r0, #0
    760e:	d109      	bne.n	7624 <fRun_9DOF_GBY_KALMAN+0x19dc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7610:	6e69      	ldr	r1, [r5, #100]	; 0x64
    7612:	1c38      	adds	r0, r7, #0
    7614:	f7f9 fbbe 	bl	d94 <__aeabi_fmul>
    7618:	1c01      	adds	r1, r0, #0
    761a:	4640      	mov	r0, r8
    761c:	f7f9 f86a 	bl	6f4 <__aeabi_fadd>
    7620:	4680      	mov	r8, r0
    7622:	6060      	str	r0, [r4, #4]
    7624:	23c4      	movs	r3, #196	; 0xc4
    7626:	58e9      	ldr	r1, [r5, r3]
    7628:	9804      	ldr	r0, [sp, #16]
    762a:	f7f9 fbb3 	bl	d94 <__aeabi_fmul>
    762e:	4641      	mov	r1, r8
    7630:	f7f9 f860 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7634:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7636:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7638:	60a1      	str	r1, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    763a:	1c30      	adds	r0, r6, #0
    763c:	2100      	movs	r1, #0
    763e:	f7f9 f82b 	bl	698 <__aeabi_fcmpeq>
    7642:	2800      	cmp	r0, #0
    7644:	d001      	beq.n	764a <fRun_9DOF_GBY_KALMAN+0x1a02>
    7646:	f001 ffeb 	bl	9620 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1620>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    764a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    764c:	1c30      	adds	r0, r6, #0
    764e:	f7f9 fba1 	bl	d94 <__aeabi_fmul>
    7652:	2100      	movs	r1, #0
    7654:	f7f9 f84e 	bl	6f4 <__aeabi_fadd>
    7658:	4680      	mov	r8, r0
    765a:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    765c:	1c38      	adds	r0, r7, #0
    765e:	2100      	movs	r1, #0
    7660:	f7f9 f81a 	bl	698 <__aeabi_fcmpeq>
    7664:	2800      	cmp	r0, #0
    7666:	d109      	bne.n	767c <fRun_9DOF_GBY_KALMAN+0x1a34>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7668:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    766a:	1c38      	adds	r0, r7, #0
    766c:	f7f9 fb92 	bl	d94 <__aeabi_fmul>
    7670:	1c01      	adds	r1, r0, #0
    7672:	4640      	mov	r0, r8
    7674:	f7f9 f83e 	bl	6f4 <__aeabi_fadd>
    7678:	4680      	mov	r8, r0
    767a:	60a0      	str	r0, [r4, #8]
    767c:	23c8      	movs	r3, #200	; 0xc8
    767e:	58e9      	ldr	r1, [r5, r3]
    7680:	9804      	ldr	r0, [sp, #16]
    7682:	f7f9 fb87 	bl	d94 <__aeabi_fmul>
    7686:	4641      	mov	r1, r8
    7688:	f7f9 f834 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    768c:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    768e:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7690:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7692:	1c30      	adds	r0, r6, #0
    7694:	2100      	movs	r1, #0
    7696:	f7f8 ffff 	bl	698 <__aeabi_fcmpeq>
    769a:	2800      	cmp	r0, #0
    769c:	d001      	beq.n	76a2 <fRun_9DOF_GBY_KALMAN+0x1a5a>
    769e:	f001 ffbb 	bl	9618 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1618>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    76a2:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    76a4:	1c30      	adds	r0, r6, #0
    76a6:	f7f9 fb75 	bl	d94 <__aeabi_fmul>
    76aa:	2100      	movs	r1, #0
    76ac:	f7f9 f822 	bl	6f4 <__aeabi_fadd>
    76b0:	4680      	mov	r8, r0
    76b2:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    76b4:	1c38      	adds	r0, r7, #0
    76b6:	2100      	movs	r1, #0
    76b8:	f7f8 ffee 	bl	698 <__aeabi_fcmpeq>
    76bc:	2800      	cmp	r0, #0
    76be:	d109      	bne.n	76d4 <fRun_9DOF_GBY_KALMAN+0x1a8c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    76c0:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
    76c2:	1c38      	adds	r0, r7, #0
    76c4:	f7f9 fb66 	bl	d94 <__aeabi_fmul>
    76c8:	1c01      	adds	r1, r0, #0
    76ca:	4640      	mov	r0, r8
    76cc:	f7f9 f812 	bl	6f4 <__aeabi_fadd>
    76d0:	4680      	mov	r8, r0
    76d2:	60e0      	str	r0, [r4, #12]
    76d4:	23cc      	movs	r3, #204	; 0xcc
    76d6:	58e9      	ldr	r1, [r5, r3]
    76d8:	9804      	ldr	r0, [sp, #16]
    76da:	f7f9 fb5b 	bl	d94 <__aeabi_fmul>
    76de:	4641      	mov	r1, r8
    76e0:	f7f9 f808 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    76e4:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    76e6:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    76e8:	6121      	str	r1, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    76ea:	1c30      	adds	r0, r6, #0
    76ec:	2100      	movs	r1, #0
    76ee:	f7f8 ffd3 	bl	698 <__aeabi_fcmpeq>
    76f2:	2800      	cmp	r0, #0
    76f4:	d001      	beq.n	76fa <fRun_9DOF_GBY_KALMAN+0x1ab2>
    76f6:	f001 ff8b 	bl	9610 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1610>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    76fa:	6c29      	ldr	r1, [r5, #64]	; 0x40
    76fc:	1c30      	adds	r0, r6, #0
    76fe:	f7f9 fb49 	bl	d94 <__aeabi_fmul>
    7702:	2100      	movs	r1, #0
    7704:	f7f8 fff6 	bl	6f4 <__aeabi_fadd>
    7708:	4680      	mov	r8, r0
    770a:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    770c:	1c38      	adds	r0, r7, #0
    770e:	2100      	movs	r1, #0
    7710:	f7f8 ffc2 	bl	698 <__aeabi_fcmpeq>
    7714:	2800      	cmp	r0, #0
    7716:	d109      	bne.n	772c <fRun_9DOF_GBY_KALMAN+0x1ae4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7718:	6f29      	ldr	r1, [r5, #112]	; 0x70
    771a:	1c38      	adds	r0, r7, #0
    771c:	f7f9 fb3a 	bl	d94 <__aeabi_fmul>
    7720:	1c01      	adds	r1, r0, #0
    7722:	4640      	mov	r0, r8
    7724:	f7f8 ffe6 	bl	6f4 <__aeabi_fadd>
    7728:	4680      	mov	r8, r0
    772a:	6120      	str	r0, [r4, #16]
    772c:	23d0      	movs	r3, #208	; 0xd0
    772e:	58e9      	ldr	r1, [r5, r3]
    7730:	9804      	ldr	r0, [sp, #16]
    7732:	f7f9 fb2f 	bl	d94 <__aeabi_fmul>
    7736:	4641      	mov	r1, r8
    7738:	f7f8 ffdc 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    773c:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    773e:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7740:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7742:	1c30      	adds	r0, r6, #0
    7744:	2100      	movs	r1, #0
    7746:	f7f8 ffa7 	bl	698 <__aeabi_fcmpeq>
    774a:	2800      	cmp	r0, #0
    774c:	d001      	beq.n	7752 <fRun_9DOF_GBY_KALMAN+0x1b0a>
    774e:	f001 ff5c 	bl	960a <PSP_CNFG_MQX_KERNEL_LOGGING+0x160a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7752:	6c69      	ldr	r1, [r5, #68]	; 0x44
    7754:	1c30      	adds	r0, r6, #0
    7756:	f7f9 fb1d 	bl	d94 <__aeabi_fmul>
    775a:	2100      	movs	r1, #0
    775c:	f7f8 ffca 	bl	6f4 <__aeabi_fadd>
    7760:	1c06      	adds	r6, r0, #0
    7762:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7764:	1c38      	adds	r0, r7, #0
    7766:	2100      	movs	r1, #0
    7768:	f7f8 ff96 	bl	698 <__aeabi_fcmpeq>
    776c:	2800      	cmp	r0, #0
    776e:	d001      	beq.n	7774 <fRun_9DOF_GBY_KALMAN+0x1b2c>
    7770:	f000 ff71 	bl	8656 <PSP_CNFG_MQX_KERNEL_LOGGING+0x656>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7774:	6f69      	ldr	r1, [r5, #116]	; 0x74
    7776:	1c38      	adds	r0, r7, #0
    7778:	f7f9 fb0c 	bl	d94 <__aeabi_fmul>
    777c:	1c01      	adds	r1, r0, #0
    777e:	1c30      	adds	r0, r6, #0
    7780:	f000 ff65 	bl	864e <PSP_CNFG_MQX_KERNEL_LOGGING+0x64e>
    7784:	9805      	ldr	r0, [sp, #20]
    7786:	2100      	movs	r1, #0
    7788:	f7f8 ff86 	bl	698 <__aeabi_fcmpeq>
    778c:	2800      	cmp	r0, #0
    778e:	d101      	bne.n	7794 <fRun_9DOF_GBY_KALMAN+0x1b4c>
    7790:	f001 f948 	bl	8a24 <PSP_CNFG_MQX_KERNEL_LOGGING+0xa24>
    7794:	1c23      	adds	r3, r4, #0
    7796:	3318      	adds	r3, #24
    7798:	46b9      	mov	r9, r7
    779a:	9305      	str	r3, [sp, #20]
    779c:	46ab      	mov	fp, r5
    779e:	1c37      	adds	r7, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    77a0:	4650      	mov	r0, sl
    77a2:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    77a4:	6829      	ldr	r1, [r5, #0]
    77a6:	9803      	ldr	r0, [sp, #12]
    77a8:	f7f9 faf4 	bl	d94 <__aeabi_fmul>
    77ac:	2100      	movs	r1, #0
    77ae:	f7f8 ffa1 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    77b2:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    77b4:	1c06      	adds	r6, r0, #0
    77b6:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    77b8:	1c38      	adds	r0, r7, #0
    77ba:	f7f8 ff6d 	bl	698 <__aeabi_fcmpeq>
    77be:	2800      	cmp	r0, #0
    77c0:	d109      	bne.n	77d6 <fRun_9DOF_GBY_KALMAN+0x1b8e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    77c2:	6b29      	ldr	r1, [r5, #48]	; 0x30
    77c4:	1c38      	adds	r0, r7, #0
    77c6:	f7f9 fae5 	bl	d94 <__aeabi_fmul>
    77ca:	1c01      	adds	r1, r0, #0
    77cc:	1c30      	adds	r0, r6, #0
    77ce:	f7f8 ff91 	bl	6f4 <__aeabi_fadd>
    77d2:	1c06      	adds	r6, r0, #0
    77d4:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    77d6:	4648      	mov	r0, r9
    77d8:	2100      	movs	r1, #0
    77da:	f7f8 ff5d 	bl	698 <__aeabi_fcmpeq>
    77de:	2800      	cmp	r0, #0
    77e0:	d109      	bne.n	77f6 <fRun_9DOF_GBY_KALMAN+0x1bae>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    77e2:	6e29      	ldr	r1, [r5, #96]	; 0x60
    77e4:	4648      	mov	r0, r9
    77e6:	f7f9 fad5 	bl	d94 <__aeabi_fmul>
    77ea:	1c01      	adds	r1, r0, #0
    77ec:	1c30      	adds	r0, r6, #0
    77ee:	f7f8 ff81 	bl	6f4 <__aeabi_fadd>
    77f2:	1c06      	adds	r6, r0, #0
    77f4:	6020      	str	r0, [r4, #0]
    77f6:	1c2b      	adds	r3, r5, #0
    77f8:	33c0      	adds	r3, #192	; 0xc0
    77fa:	6819      	ldr	r1, [r3, #0]
    77fc:	9804      	ldr	r0, [sp, #16]
    77fe:	f7f9 fac9 	bl	d94 <__aeabi_fmul>
    7802:	1c31      	adds	r1, r6, #0
    7804:	f7f8 ff76 	bl	6f4 <__aeabi_fadd>
    7808:	1c2b      	adds	r3, r5, #0
    780a:	6020      	str	r0, [r4, #0]
    780c:	33f0      	adds	r3, #240	; 0xf0
    780e:	6819      	ldr	r1, [r3, #0]
    7810:	1c06      	adds	r6, r0, #0
    7812:	4640      	mov	r0, r8
    7814:	f7f9 fabe 	bl	d94 <__aeabi_fmul>
    7818:	1c31      	adds	r1, r6, #0
    781a:	f7f8 ff6b 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1397
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
    781e:	9905      	ldr	r1, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7820:	c401      	stmia	r4!, {r0}
    7822:	3504      	adds	r5, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1397
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
    7824:	428c      	cmp	r4, r1
    7826:	d1bb      	bne.n	77a0 <fRun_9DOF_GBY_KALMAN+0x1b58>
    7828:	465d      	mov	r5, fp
    782a:	f7fe ff4d 	bl	66c8 <fRun_9DOF_GBY_KALMAN+0xa80>
    782e:	9805      	ldr	r0, [sp, #20]
    7830:	2100      	movs	r1, #0
    7832:	f7f8 ff31 	bl	698 <__aeabi_fcmpeq>
    7836:	2800      	cmp	r0, #0
    7838:	d101      	bne.n	783e <fRun_9DOF_GBY_KALMAN+0x1bf6>
    783a:	f000 ff17 	bl	866c <PSP_CNFG_MQX_KERNEL_LOGGING+0x66c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    783e:	4650      	mov	r0, sl
    7840:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7842:	2100      	movs	r1, #0
    7844:	1c30      	adds	r0, r6, #0
    7846:	f7f8 ff27 	bl	698 <__aeabi_fcmpeq>
    784a:	2800      	cmp	r0, #0
    784c:	d101      	bne.n	7852 <fRun_9DOF_GBY_KALMAN+0x1c0a>
    784e:	f001 f9bb 	bl	8bc8 <PSP_CNFG_MQX_KERNEL_LOGGING+0xbc8>
    7852:	2100      	movs	r1, #0
    7854:	4689      	mov	r9, r1
    7856:	1c38      	adds	r0, r7, #0
    7858:	2100      	movs	r1, #0
    785a:	f7f8 ff1d 	bl	698 <__aeabi_fcmpeq>
    785e:	2800      	cmp	r0, #0
    7860:	d109      	bne.n	7876 <fRun_9DOF_GBY_KALMAN+0x1c2e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7862:	6e29      	ldr	r1, [r5, #96]	; 0x60
    7864:	1c38      	adds	r0, r7, #0
    7866:	f7f9 fa95 	bl	d94 <__aeabi_fmul>
    786a:	1c01      	adds	r1, r0, #0
    786c:	4648      	mov	r0, r9
    786e:	f7f8 ff41 	bl	6f4 <__aeabi_fadd>
    7872:	4681      	mov	r9, r0
    7874:	6020      	str	r0, [r4, #0]
    7876:	22c0      	movs	r2, #192	; 0xc0
    7878:	58a9      	ldr	r1, [r5, r2]
    787a:	9804      	ldr	r0, [sp, #16]
    787c:	f7f9 fa8a 	bl	d94 <__aeabi_fmul>
    7880:	4649      	mov	r1, r9
    7882:	f7f8 ff37 	bl	6f4 <__aeabi_fadd>
    7886:	23f0      	movs	r3, #240	; 0xf0
    7888:	6020      	str	r0, [r4, #0]
    788a:	58e9      	ldr	r1, [r5, r3]
    788c:	4681      	mov	r9, r0
    788e:	4640      	mov	r0, r8
    7890:	f7f9 fa80 	bl	d94 <__aeabi_fmul>
    7894:	4649      	mov	r1, r9
    7896:	f7f8 ff2d 	bl	6f4 <__aeabi_fadd>
    789a:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    789c:	4650      	mov	r0, sl
    789e:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    78a0:	2100      	movs	r1, #0
    78a2:	1c30      	adds	r0, r6, #0
    78a4:	f7f8 fef8 	bl	698 <__aeabi_fcmpeq>
    78a8:	2800      	cmp	r0, #0
    78aa:	d001      	beq.n	78b0 <fRun_9DOF_GBY_KALMAN+0x1c68>
    78ac:	f001 fec0 	bl	9630 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1630>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    78b0:	6b69      	ldr	r1, [r5, #52]	; 0x34
    78b2:	1c30      	adds	r0, r6, #0
    78b4:	f7f9 fa6e 	bl	d94 <__aeabi_fmul>
    78b8:	2100      	movs	r1, #0
    78ba:	f7f8 ff1b 	bl	6f4 <__aeabi_fadd>
    78be:	4681      	mov	r9, r0
    78c0:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    78c2:	1c38      	adds	r0, r7, #0
    78c4:	2100      	movs	r1, #0
    78c6:	f7f8 fee7 	bl	698 <__aeabi_fcmpeq>
    78ca:	2800      	cmp	r0, #0
    78cc:	d109      	bne.n	78e2 <fRun_9DOF_GBY_KALMAN+0x1c9a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    78ce:	6e69      	ldr	r1, [r5, #100]	; 0x64
    78d0:	1c38      	adds	r0, r7, #0
    78d2:	f7f9 fa5f 	bl	d94 <__aeabi_fmul>
    78d6:	1c01      	adds	r1, r0, #0
    78d8:	4648      	mov	r0, r9
    78da:	f7f8 ff0b 	bl	6f4 <__aeabi_fadd>
    78de:	4681      	mov	r9, r0
    78e0:	6060      	str	r0, [r4, #4]
    78e2:	23c4      	movs	r3, #196	; 0xc4
    78e4:	58e9      	ldr	r1, [r5, r3]
    78e6:	9804      	ldr	r0, [sp, #16]
    78e8:	f7f9 fa54 	bl	d94 <__aeabi_fmul>
    78ec:	4649      	mov	r1, r9
    78ee:	f7f8 ff01 	bl	6f4 <__aeabi_fadd>
    78f2:	22f4      	movs	r2, #244	; 0xf4
    78f4:	6060      	str	r0, [r4, #4]
    78f6:	58a9      	ldr	r1, [r5, r2]
    78f8:	4681      	mov	r9, r0
    78fa:	4640      	mov	r0, r8
    78fc:	f7f9 fa4a 	bl	d94 <__aeabi_fmul>
    7900:	4649      	mov	r1, r9
    7902:	f7f8 fef7 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7906:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7908:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    790a:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    790c:	1c30      	adds	r0, r6, #0
    790e:	2100      	movs	r1, #0
    7910:	f7f8 fec2 	bl	698 <__aeabi_fcmpeq>
    7914:	2800      	cmp	r0, #0
    7916:	d001      	beq.n	791c <fRun_9DOF_GBY_KALMAN+0x1cd4>
    7918:	f001 fe48 	bl	95ac <PSP_CNFG_MQX_KERNEL_LOGGING+0x15ac>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    791c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    791e:	1c30      	adds	r0, r6, #0
    7920:	f7f9 fa38 	bl	d94 <__aeabi_fmul>
    7924:	2100      	movs	r1, #0
    7926:	f7f8 fee5 	bl	6f4 <__aeabi_fadd>
    792a:	4681      	mov	r9, r0
    792c:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    792e:	1c38      	adds	r0, r7, #0
    7930:	2100      	movs	r1, #0
    7932:	f7f8 feb1 	bl	698 <__aeabi_fcmpeq>
    7936:	2800      	cmp	r0, #0
    7938:	d109      	bne.n	794e <fRun_9DOF_GBY_KALMAN+0x1d06>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    793a:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    793c:	1c38      	adds	r0, r7, #0
    793e:	f7f9 fa29 	bl	d94 <__aeabi_fmul>
    7942:	1c01      	adds	r1, r0, #0
    7944:	4648      	mov	r0, r9
    7946:	f7f8 fed5 	bl	6f4 <__aeabi_fadd>
    794a:	4681      	mov	r9, r0
    794c:	60a0      	str	r0, [r4, #8]
    794e:	23c8      	movs	r3, #200	; 0xc8
    7950:	58e9      	ldr	r1, [r5, r3]
    7952:	9804      	ldr	r0, [sp, #16]
    7954:	f7f9 fa1e 	bl	d94 <__aeabi_fmul>
    7958:	4649      	mov	r1, r9
    795a:	f7f8 fecb 	bl	6f4 <__aeabi_fadd>
    795e:	22f8      	movs	r2, #248	; 0xf8
    7960:	60a0      	str	r0, [r4, #8]
    7962:	58a9      	ldr	r1, [r5, r2]
    7964:	4681      	mov	r9, r0
    7966:	4640      	mov	r0, r8
    7968:	f7f9 fa14 	bl	d94 <__aeabi_fmul>
    796c:	4649      	mov	r1, r9
    796e:	f7f8 fec1 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7972:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7974:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7976:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7978:	1c30      	adds	r0, r6, #0
    797a:	2100      	movs	r1, #0
    797c:	f7f8 fe8c 	bl	698 <__aeabi_fcmpeq>
    7980:	2800      	cmp	r0, #0
    7982:	d001      	beq.n	7988 <fRun_9DOF_GBY_KALMAN+0x1d40>
    7984:	f001 fe0e 	bl	95a4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x15a4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7988:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    798a:	1c30      	adds	r0, r6, #0
    798c:	f7f9 fa02 	bl	d94 <__aeabi_fmul>
    7990:	2100      	movs	r1, #0
    7992:	f7f8 feaf 	bl	6f4 <__aeabi_fadd>
    7996:	4681      	mov	r9, r0
    7998:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    799a:	1c38      	adds	r0, r7, #0
    799c:	2100      	movs	r1, #0
    799e:	f7f8 fe7b 	bl	698 <__aeabi_fcmpeq>
    79a2:	2800      	cmp	r0, #0
    79a4:	d109      	bne.n	79ba <fRun_9DOF_GBY_KALMAN+0x1d72>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    79a6:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
    79a8:	1c38      	adds	r0, r7, #0
    79aa:	f7f9 f9f3 	bl	d94 <__aeabi_fmul>
    79ae:	1c01      	adds	r1, r0, #0
    79b0:	4648      	mov	r0, r9
    79b2:	f7f8 fe9f 	bl	6f4 <__aeabi_fadd>
    79b6:	4681      	mov	r9, r0
    79b8:	60e0      	str	r0, [r4, #12]
    79ba:	23cc      	movs	r3, #204	; 0xcc
    79bc:	58e9      	ldr	r1, [r5, r3]
    79be:	9804      	ldr	r0, [sp, #16]
    79c0:	f7f9 f9e8 	bl	d94 <__aeabi_fmul>
    79c4:	4649      	mov	r1, r9
    79c6:	f7f8 fe95 	bl	6f4 <__aeabi_fadd>
    79ca:	22fc      	movs	r2, #252	; 0xfc
    79cc:	60e0      	str	r0, [r4, #12]
    79ce:	58a9      	ldr	r1, [r5, r2]
    79d0:	4681      	mov	r9, r0
    79d2:	4640      	mov	r0, r8
    79d4:	f7f9 f9de 	bl	d94 <__aeabi_fmul>
    79d8:	4649      	mov	r1, r9
    79da:	f7f8 fe8b 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    79de:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    79e0:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    79e2:	6123      	str	r3, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    79e4:	1c30      	adds	r0, r6, #0
    79e6:	2100      	movs	r1, #0
    79e8:	f7f8 fe56 	bl	698 <__aeabi_fcmpeq>
    79ec:	2800      	cmp	r0, #0
    79ee:	d001      	beq.n	79f4 <fRun_9DOF_GBY_KALMAN+0x1dac>
    79f0:	f001 fdd4 	bl	959c <PSP_CNFG_MQX_KERNEL_LOGGING+0x159c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    79f4:	6c29      	ldr	r1, [r5, #64]	; 0x40
    79f6:	1c30      	adds	r0, r6, #0
    79f8:	f7f9 f9cc 	bl	d94 <__aeabi_fmul>
    79fc:	2100      	movs	r1, #0
    79fe:	f7f8 fe79 	bl	6f4 <__aeabi_fadd>
    7a02:	4681      	mov	r9, r0
    7a04:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7a06:	1c38      	adds	r0, r7, #0
    7a08:	2100      	movs	r1, #0
    7a0a:	f7f8 fe45 	bl	698 <__aeabi_fcmpeq>
    7a0e:	2800      	cmp	r0, #0
    7a10:	d109      	bne.n	7a26 <fRun_9DOF_GBY_KALMAN+0x1dde>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7a12:	6f29      	ldr	r1, [r5, #112]	; 0x70
    7a14:	1c38      	adds	r0, r7, #0
    7a16:	f7f9 f9bd 	bl	d94 <__aeabi_fmul>
    7a1a:	1c01      	adds	r1, r0, #0
    7a1c:	4648      	mov	r0, r9
    7a1e:	f7f8 fe69 	bl	6f4 <__aeabi_fadd>
    7a22:	4681      	mov	r9, r0
    7a24:	6120      	str	r0, [r4, #16]
    7a26:	23d0      	movs	r3, #208	; 0xd0
    7a28:	58e9      	ldr	r1, [r5, r3]
    7a2a:	9804      	ldr	r0, [sp, #16]
    7a2c:	f7f9 f9b2 	bl	d94 <__aeabi_fmul>
    7a30:	4649      	mov	r1, r9
    7a32:	f7f8 fe5f 	bl	6f4 <__aeabi_fadd>
    7a36:	2280      	movs	r2, #128	; 0x80
    7a38:	6120      	str	r0, [r4, #16]
    7a3a:	0052      	lsls	r2, r2, #1
    7a3c:	58a9      	ldr	r1, [r5, r2]
    7a3e:	4681      	mov	r9, r0
    7a40:	4640      	mov	r0, r8
    7a42:	f7f9 f9a7 	bl	d94 <__aeabi_fmul>
    7a46:	4649      	mov	r1, r9
    7a48:	f7f8 fe54 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7a4c:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7a4e:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7a50:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7a52:	1c30      	adds	r0, r6, #0
    7a54:	2100      	movs	r1, #0
    7a56:	f7f8 fe1f 	bl	698 <__aeabi_fcmpeq>
    7a5a:	2800      	cmp	r0, #0
    7a5c:	d001      	beq.n	7a62 <fRun_9DOF_GBY_KALMAN+0x1e1a>
    7a5e:	f001 fd9a 	bl	9596 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1596>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7a62:	6c69      	ldr	r1, [r5, #68]	; 0x44
    7a64:	1c30      	adds	r0, r6, #0
    7a66:	f7f9 f995 	bl	d94 <__aeabi_fmul>
    7a6a:	2100      	movs	r1, #0
    7a6c:	f7f8 fe42 	bl	6f4 <__aeabi_fadd>
    7a70:	1c06      	adds	r6, r0, #0
    7a72:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7a74:	1c38      	adds	r0, r7, #0
    7a76:	2100      	movs	r1, #0
    7a78:	f7f8 fe0e 	bl	698 <__aeabi_fcmpeq>
    7a7c:	2800      	cmp	r0, #0
    7a7e:	d109      	bne.n	7a94 <fRun_9DOF_GBY_KALMAN+0x1e4c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7a80:	6f69      	ldr	r1, [r5, #116]	; 0x74
    7a82:	1c38      	adds	r0, r7, #0
    7a84:	f7f9 f986 	bl	d94 <__aeabi_fmul>
    7a88:	1c01      	adds	r1, r0, #0
    7a8a:	1c30      	adds	r0, r6, #0
    7a8c:	f7f8 fe32 	bl	6f4 <__aeabi_fadd>
    7a90:	1c06      	adds	r6, r0, #0
    7a92:	6160      	str	r0, [r4, #20]
    7a94:	23d4      	movs	r3, #212	; 0xd4
    7a96:	58e9      	ldr	r1, [r5, r3]
    7a98:	9804      	ldr	r0, [sp, #16]
    7a9a:	f7f9 f97b 	bl	d94 <__aeabi_fmul>
    7a9e:	1c31      	adds	r1, r6, #0
    7aa0:	f000 ffb0 	bl	8a04 <PSP_CNFG_MQX_KERNEL_LOGGING+0xa04>
    7aa4:	9805      	ldr	r0, [sp, #20]
    7aa6:	2100      	movs	r1, #0
    7aa8:	f7f8 fdf6 	bl	698 <__aeabi_fcmpeq>
    7aac:	2800      	cmp	r0, #0
    7aae:	d101      	bne.n	7ab4 <fRun_9DOF_GBY_KALMAN+0x1e6c>
    7ab0:	f000 fe2c 	bl	870c <PSP_CNFG_MQX_KERNEL_LOGGING+0x70c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7ab4:	4650      	mov	r0, sl
    7ab6:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7ab8:	6829      	ldr	r1, [r5, #0]
    7aba:	9803      	ldr	r0, [sp, #12]
    7abc:	f7f9 f96a 	bl	d94 <__aeabi_fmul>
    7ac0:	2100      	movs	r1, #0
    7ac2:	f7f8 fe17 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7ac6:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7ac8:	4680      	mov	r8, r0
    7aca:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7acc:	1c30      	adds	r0, r6, #0
    7ace:	f7f8 fde3 	bl	698 <__aeabi_fcmpeq>
    7ad2:	2800      	cmp	r0, #0
    7ad4:	d109      	bne.n	7aea <fRun_9DOF_GBY_KALMAN+0x1ea2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7ad6:	6b29      	ldr	r1, [r5, #48]	; 0x30
    7ad8:	1c30      	adds	r0, r6, #0
    7ada:	f7f9 f95b 	bl	d94 <__aeabi_fmul>
    7ade:	1c01      	adds	r1, r0, #0
    7ae0:	4640      	mov	r0, r8
    7ae2:	f7f8 fe07 	bl	6f4 <__aeabi_fadd>
    7ae6:	4680      	mov	r8, r0
    7ae8:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7aea:	1c38      	adds	r0, r7, #0
    7aec:	2100      	movs	r1, #0
    7aee:	f7f8 fdd3 	bl	698 <__aeabi_fcmpeq>
    7af2:	2800      	cmp	r0, #0
    7af4:	d109      	bne.n	7b0a <fRun_9DOF_GBY_KALMAN+0x1ec2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7af6:	6e29      	ldr	r1, [r5, #96]	; 0x60
    7af8:	1c38      	adds	r0, r7, #0
    7afa:	f7f9 f94b 	bl	d94 <__aeabi_fmul>
    7afe:	1c01      	adds	r1, r0, #0
    7b00:	4640      	mov	r0, r8
    7b02:	f7f8 fdf7 	bl	6f4 <__aeabi_fadd>
    7b06:	4680      	mov	r8, r0
    7b08:	6020      	str	r0, [r4, #0]
    7b0a:	22c0      	movs	r2, #192	; 0xc0
    7b0c:	58a9      	ldr	r1, [r5, r2]
    7b0e:	9804      	ldr	r0, [sp, #16]
    7b10:	f7f9 f940 	bl	d94 <__aeabi_fmul>
    7b14:	4641      	mov	r1, r8
    7b16:	f7f8 fded 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7b1a:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7b1c:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7b1e:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7b20:	6869      	ldr	r1, [r5, #4]
    7b22:	9803      	ldr	r0, [sp, #12]
    7b24:	f7f9 f936 	bl	d94 <__aeabi_fmul>
    7b28:	2100      	movs	r1, #0
    7b2a:	f7f8 fde3 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7b2e:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7b30:	4680      	mov	r8, r0
    7b32:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7b34:	1c30      	adds	r0, r6, #0
    7b36:	f7f8 fdaf 	bl	698 <__aeabi_fcmpeq>
    7b3a:	2800      	cmp	r0, #0
    7b3c:	d109      	bne.n	7b52 <fRun_9DOF_GBY_KALMAN+0x1f0a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7b3e:	6b69      	ldr	r1, [r5, #52]	; 0x34
    7b40:	1c30      	adds	r0, r6, #0
    7b42:	f7f9 f927 	bl	d94 <__aeabi_fmul>
    7b46:	1c01      	adds	r1, r0, #0
    7b48:	4640      	mov	r0, r8
    7b4a:	f7f8 fdd3 	bl	6f4 <__aeabi_fadd>
    7b4e:	4680      	mov	r8, r0
    7b50:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7b52:	1c38      	adds	r0, r7, #0
    7b54:	2100      	movs	r1, #0
    7b56:	f7f8 fd9f 	bl	698 <__aeabi_fcmpeq>
    7b5a:	2800      	cmp	r0, #0
    7b5c:	d109      	bne.n	7b72 <fRun_9DOF_GBY_KALMAN+0x1f2a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7b5e:	6e69      	ldr	r1, [r5, #100]	; 0x64
    7b60:	1c38      	adds	r0, r7, #0
    7b62:	f7f9 f917 	bl	d94 <__aeabi_fmul>
    7b66:	1c01      	adds	r1, r0, #0
    7b68:	4640      	mov	r0, r8
    7b6a:	f7f8 fdc3 	bl	6f4 <__aeabi_fadd>
    7b6e:	4680      	mov	r8, r0
    7b70:	6060      	str	r0, [r4, #4]
    7b72:	23c4      	movs	r3, #196	; 0xc4
    7b74:	58e9      	ldr	r1, [r5, r3]
    7b76:	9804      	ldr	r0, [sp, #16]
    7b78:	f7f9 f90c 	bl	d94 <__aeabi_fmul>
    7b7c:	4641      	mov	r1, r8
    7b7e:	f7f8 fdb9 	bl	6f4 <__aeabi_fadd>
    7b82:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7b84:	4650      	mov	r0, sl
    7b86:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7b88:	68a9      	ldr	r1, [r5, #8]
    7b8a:	9803      	ldr	r0, [sp, #12]
    7b8c:	f7f9 f902 	bl	d94 <__aeabi_fmul>
    7b90:	2100      	movs	r1, #0
    7b92:	f7f8 fdaf 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7b96:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7b98:	4680      	mov	r8, r0
    7b9a:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7b9c:	1c30      	adds	r0, r6, #0
    7b9e:	f7f8 fd7b 	bl	698 <__aeabi_fcmpeq>
    7ba2:	2800      	cmp	r0, #0
    7ba4:	d109      	bne.n	7bba <fRun_9DOF_GBY_KALMAN+0x1f72>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7ba6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    7ba8:	1c30      	adds	r0, r6, #0
    7baa:	f7f9 f8f3 	bl	d94 <__aeabi_fmul>
    7bae:	1c01      	adds	r1, r0, #0
    7bb0:	4640      	mov	r0, r8
    7bb2:	f7f8 fd9f 	bl	6f4 <__aeabi_fadd>
    7bb6:	4680      	mov	r8, r0
    7bb8:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7bba:	1c38      	adds	r0, r7, #0
    7bbc:	2100      	movs	r1, #0
    7bbe:	f7f8 fd6b 	bl	698 <__aeabi_fcmpeq>
    7bc2:	2800      	cmp	r0, #0
    7bc4:	d109      	bne.n	7bda <fRun_9DOF_GBY_KALMAN+0x1f92>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7bc6:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    7bc8:	1c38      	adds	r0, r7, #0
    7bca:	f7f9 f8e3 	bl	d94 <__aeabi_fmul>
    7bce:	1c01      	adds	r1, r0, #0
    7bd0:	4640      	mov	r0, r8
    7bd2:	f7f8 fd8f 	bl	6f4 <__aeabi_fadd>
    7bd6:	4680      	mov	r8, r0
    7bd8:	60a0      	str	r0, [r4, #8]
    7bda:	23c8      	movs	r3, #200	; 0xc8
    7bdc:	58e9      	ldr	r1, [r5, r3]
    7bde:	9804      	ldr	r0, [sp, #16]
    7be0:	f7f9 f8d8 	bl	d94 <__aeabi_fmul>
    7be4:	4641      	mov	r1, r8
    7be6:	f7f8 fd85 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7bea:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7bec:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7bee:	60e1      	str	r1, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7bf0:	68e9      	ldr	r1, [r5, #12]
    7bf2:	9803      	ldr	r0, [sp, #12]
    7bf4:	f7f9 f8ce 	bl	d94 <__aeabi_fmul>
    7bf8:	2100      	movs	r1, #0
    7bfa:	f7f8 fd7b 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7bfe:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7c00:	4680      	mov	r8, r0
    7c02:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7c04:	1c30      	adds	r0, r6, #0
    7c06:	f7f8 fd47 	bl	698 <__aeabi_fcmpeq>
    7c0a:	2800      	cmp	r0, #0
    7c0c:	d109      	bne.n	7c22 <fRun_9DOF_GBY_KALMAN+0x1fda>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7c0e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    7c10:	1c30      	adds	r0, r6, #0
    7c12:	f7f9 f8bf 	bl	d94 <__aeabi_fmul>
    7c16:	1c01      	adds	r1, r0, #0
    7c18:	4640      	mov	r0, r8
    7c1a:	f7f8 fd6b 	bl	6f4 <__aeabi_fadd>
    7c1e:	4680      	mov	r8, r0
    7c20:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7c22:	1c38      	adds	r0, r7, #0
    7c24:	2100      	movs	r1, #0
    7c26:	f7f8 fd37 	bl	698 <__aeabi_fcmpeq>
    7c2a:	2800      	cmp	r0, #0
    7c2c:	d109      	bne.n	7c42 <fRun_9DOF_GBY_KALMAN+0x1ffa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7c2e:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
    7c30:	1c38      	adds	r0, r7, #0
    7c32:	f7f9 f8af 	bl	d94 <__aeabi_fmul>
    7c36:	1c01      	adds	r1, r0, #0
    7c38:	4640      	mov	r0, r8
    7c3a:	f7f8 fd5b 	bl	6f4 <__aeabi_fadd>
    7c3e:	4680      	mov	r8, r0
    7c40:	60e0      	str	r0, [r4, #12]
    7c42:	23cc      	movs	r3, #204	; 0xcc
    7c44:	58e9      	ldr	r1, [r5, r3]
    7c46:	9804      	ldr	r0, [sp, #16]
    7c48:	f7f9 f8a4 	bl	d94 <__aeabi_fmul>
    7c4c:	4641      	mov	r1, r8
    7c4e:	f7f8 fd51 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7c52:	4652      	mov	r2, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7c54:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7c56:	6122      	str	r2, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7c58:	6929      	ldr	r1, [r5, #16]
    7c5a:	9803      	ldr	r0, [sp, #12]
    7c5c:	f7f9 f89a 	bl	d94 <__aeabi_fmul>
    7c60:	2100      	movs	r1, #0
    7c62:	f7f8 fd47 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7c66:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7c68:	4680      	mov	r8, r0
    7c6a:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7c6c:	1c30      	adds	r0, r6, #0
    7c6e:	f7f8 fd13 	bl	698 <__aeabi_fcmpeq>
    7c72:	2800      	cmp	r0, #0
    7c74:	d109      	bne.n	7c8a <fRun_9DOF_GBY_KALMAN+0x2042>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7c76:	6c29      	ldr	r1, [r5, #64]	; 0x40
    7c78:	1c30      	adds	r0, r6, #0
    7c7a:	f7f9 f88b 	bl	d94 <__aeabi_fmul>
    7c7e:	1c01      	adds	r1, r0, #0
    7c80:	4640      	mov	r0, r8
    7c82:	f7f8 fd37 	bl	6f4 <__aeabi_fadd>
    7c86:	4680      	mov	r8, r0
    7c88:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7c8a:	1c38      	adds	r0, r7, #0
    7c8c:	2100      	movs	r1, #0
    7c8e:	f7f8 fd03 	bl	698 <__aeabi_fcmpeq>
    7c92:	2800      	cmp	r0, #0
    7c94:	d109      	bne.n	7caa <fRun_9DOF_GBY_KALMAN+0x2062>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7c96:	6f29      	ldr	r1, [r5, #112]	; 0x70
    7c98:	1c38      	adds	r0, r7, #0
    7c9a:	f7f9 f87b 	bl	d94 <__aeabi_fmul>
    7c9e:	1c01      	adds	r1, r0, #0
    7ca0:	4640      	mov	r0, r8
    7ca2:	f7f8 fd27 	bl	6f4 <__aeabi_fadd>
    7ca6:	4680      	mov	r8, r0
    7ca8:	6120      	str	r0, [r4, #16]
    7caa:	23d0      	movs	r3, #208	; 0xd0
    7cac:	58e9      	ldr	r1, [r5, r3]
    7cae:	9804      	ldr	r0, [sp, #16]
    7cb0:	f7f9 f870 	bl	d94 <__aeabi_fmul>
    7cb4:	4641      	mov	r1, r8
    7cb6:	f7f8 fd1d 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7cba:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7cbc:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7cbe:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7cc0:	6969      	ldr	r1, [r5, #20]
    7cc2:	9803      	ldr	r0, [sp, #12]
    7cc4:	f7f9 f866 	bl	d94 <__aeabi_fmul>
    7cc8:	2100      	movs	r1, #0
    7cca:	f7f8 fd13 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7cce:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7cd0:	4680      	mov	r8, r0
    7cd2:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7cd4:	1c30      	adds	r0, r6, #0
    7cd6:	f7f8 fcdf 	bl	698 <__aeabi_fcmpeq>
    7cda:	2800      	cmp	r0, #0
    7cdc:	d109      	bne.n	7cf2 <fRun_9DOF_GBY_KALMAN+0x20aa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7cde:	6c69      	ldr	r1, [r5, #68]	; 0x44
    7ce0:	1c30      	adds	r0, r6, #0
    7ce2:	f7f9 f857 	bl	d94 <__aeabi_fmul>
    7ce6:	1c01      	adds	r1, r0, #0
    7ce8:	4640      	mov	r0, r8
    7cea:	f7f8 fd03 	bl	6f4 <__aeabi_fadd>
    7cee:	4680      	mov	r8, r0
    7cf0:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7cf2:	1c38      	adds	r0, r7, #0
    7cf4:	2100      	movs	r1, #0
    7cf6:	f7f8 fccf 	bl	698 <__aeabi_fcmpeq>
    7cfa:	2800      	cmp	r0, #0
    7cfc:	d101      	bne.n	7d02 <fRun_9DOF_GBY_KALMAN+0x20ba>
    7cfe:	f000 ff57 	bl	8bb0 <PSP_CNFG_MQX_KERNEL_LOGGING+0xbb0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7d02:	9804      	ldr	r0, [sp, #16]
    7d04:	23d4      	movs	r3, #212	; 0xd4
    7d06:	58e9      	ldr	r1, [r5, r3]
    7d08:	f7f9 f844 	bl	d94 <__aeabi_fmul>
    7d0c:	4641      	mov	r1, r8
    7d0e:	f7f8 fcf1 	bl	6f4 <__aeabi_fadd>
    7d12:	6160      	str	r0, [r4, #20]
    7d14:	f7fe fcd8 	bl	66c8 <fRun_9DOF_GBY_KALMAN+0xa80>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1377
	pthisSV->fPPlus12x12[3][3] +=  pthisSV->fQvMM;
	pthisSV->fPPlus12x12[4][4] +=  pthisSV->fQvMM;
	pthisSV->fPPlus12x12[5][5] +=  pthisSV->fQvMM;

	// copy above diagonal elements of P+ (6x6 scratch sub-matrix) to below diagonal
	for (i = 1; i < 6; i++) 	
    7d18:	4643      	mov	r3, r8
    7d1a:	3301      	adds	r3, #1
    7d1c:	b2db      	uxtb	r3, r3
    7d1e:	4698      	mov	r8, r3
    7d20:	f7fe fb78 	bl	6414 <fRun_9DOF_GBY_KALMAN+0x7cc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    7d24:	23d9      	movs	r3, #217	; 0xd9
    7d26:	465a      	mov	r2, fp
    7d28:	009b      	lsls	r3, r3, #2
    7d2a:	58d1      	ldr	r1, [r2, r3]
    7d2c:	1c20      	adds	r0, r4, #0
    7d2e:	f7f9 f831 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    7d32:	23da      	movs	r3, #218	; 0xda
    7d34:	465f      	mov	r7, fp
    7d36:	009b      	lsls	r3, r3, #2
    7d38:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    7d3a:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    7d3c:	4648      	mov	r0, r9
    7d3e:	f7f9 f829 	bl	d94 <__aeabi_fmul>
    7d42:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    7d44:	1c28      	adds	r0, r5, #0
    7d46:	f7f8 fcd5 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1465
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
    7d4a:	23db      	movs	r3, #219	; 0xdb
    7d4c:	009b      	lsls	r3, r3, #2
    7d4e:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    7d50:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1465
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
    7d52:	4650      	mov	r0, sl
    7d54:	f7f9 f81e 	bl	d94 <__aeabi_fmul>
    7d58:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    7d5a:	1c28      	adds	r0, r5, #0
    7d5c:	f7f8 fcca 	bl	6f4 <__aeabi_fadd>
    7d60:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    7d62:	9805      	ldr	r0, [sp, #20]
    7d64:	f7f8 fcc6 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    7d68:	23eb      	movs	r3, #235	; 0xeb
    7d6a:	009b      	lsls	r3, r3, #2
    7d6c:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    7d6e:	6738      	str	r0, [r7, #112]	; 0x70
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    7d70:	1c20      	adds	r0, r4, #0
    7d72:	f7f9 f80f 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    7d76:	23ec      	movs	r3, #236	; 0xec
    7d78:	009b      	lsls	r3, r3, #2
    7d7a:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    7d7c:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    7d7e:	4648      	mov	r0, r9
    7d80:	f7f9 f808 	bl	d94 <__aeabi_fmul>
    7d84:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    7d86:	1c28      	adds	r0, r5, #0
    7d88:	f7f8 fcb4 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1468
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
    7d8c:	23ed      	movs	r3, #237	; 0xed
    7d8e:	009b      	lsls	r3, r3, #2
    7d90:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    7d92:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1468
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
    7d94:	4650      	mov	r0, sl
    7d96:	f7f8 fffd 	bl	d94 <__aeabi_fmul>
    7d9a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    7d9c:	1c28      	adds	r0, r5, #0
    7d9e:	f7f8 fca9 	bl	6f4 <__aeabi_fadd>
    7da2:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    7da4:	9807      	ldr	r0, [sp, #28]
    7da6:	f7f8 fca5 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    7daa:	23fd      	movs	r3, #253	; 0xfd
    7dac:	009b      	lsls	r3, r3, #2
    7dae:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    7db0:	67f8      	str	r0, [r7, #124]	; 0x7c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    7db2:	1c20      	adds	r0, r4, #0
    7db4:	f7f8 ffee 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    7db8:	23fe      	movs	r3, #254	; 0xfe
    7dba:	009b      	lsls	r3, r3, #2
    7dbc:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    7dbe:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    7dc0:	4648      	mov	r0, r9
    7dc2:	f7f8 ffe7 	bl	d94 <__aeabi_fmul>
    7dc6:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    7dc8:	1c28      	adds	r0, r5, #0
    7dca:	f7f8 fc93 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1471
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 6][5] * pthisSV->fmErrSeMi[Z]; 
    7dce:	23ff      	movs	r3, #255	; 0xff
    7dd0:	009b      	lsls	r3, r3, #2
    7dd2:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    7dd4:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1471
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 6][5] * pthisSV->fmErrSeMi[Z]; 
    7dd6:	4650      	mov	r0, sl
    7dd8:	f7f8 ffdc 	bl	d94 <__aeabi_fmul>
    7ddc:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    7dde:	1c28      	adds	r0, r5, #0
    7de0:	f7f8 fc88 	bl	6f4 <__aeabi_fadd>
    7de4:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    7de6:	9808      	ldr	r0, [sp, #32]
    7de8:	f7f8 fc84 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    7dec:	23df      	movs	r3, #223	; 0xdf
    7dee:	009b      	lsls	r3, r3, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    7df0:	21a0      	movs	r1, #160	; 0xa0
    7df2:	5078      	str	r0, [r7, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    7df4:	58f9      	ldr	r1, [r7, r3]
    7df6:	1c20      	adds	r0, r4, #0
    7df8:	f7f8 ffcc 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    7dfc:	23e0      	movs	r3, #224	; 0xe0
    7dfe:	009b      	lsls	r3, r3, #2
    7e00:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    7e02:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    7e04:	4648      	mov	r0, r9
    7e06:	f7f8 ffc5 	bl	d94 <__aeabi_fmul>
    7e0a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    7e0c:	1c28      	adds	r0, r5, #0
    7e0e:	f7f8 fc71 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1465
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
    7e12:	23e1      	movs	r3, #225	; 0xe1
    7e14:	009b      	lsls	r3, r3, #2
    7e16:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    7e18:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1465
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
    7e1a:	4650      	mov	r0, sl
    7e1c:	f7f8 ffba 	bl	d94 <__aeabi_fmul>
    7e20:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    7e22:	1c28      	adds	r0, r5, #0
    7e24:	f7f8 fc66 	bl	6f4 <__aeabi_fadd>
    7e28:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    7e2a:	980a      	ldr	r0, [sp, #40]	; 0x28
    7e2c:	f7f8 fc62 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    7e30:	23f1      	movs	r3, #241	; 0xf1
    7e32:	009b      	lsls	r3, r3, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    7e34:	6778      	str	r0, [r7, #116]	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    7e36:	58f9      	ldr	r1, [r7, r3]
    7e38:	1c20      	adds	r0, r4, #0
    7e3a:	f7f8 ffab 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    7e3e:	23f2      	movs	r3, #242	; 0xf2
    7e40:	009b      	lsls	r3, r3, #2
    7e42:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    7e44:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    7e46:	4648      	mov	r0, r9
    7e48:	f7f8 ffa4 	bl	d94 <__aeabi_fmul>
    7e4c:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    7e4e:	1c28      	adds	r0, r5, #0
    7e50:	f7f8 fc50 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1468
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
    7e54:	23f3      	movs	r3, #243	; 0xf3
    7e56:	009b      	lsls	r3, r3, #2
    7e58:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    7e5a:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1468
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
    7e5c:	4650      	mov	r0, sl
    7e5e:	f7f8 ff99 	bl	d94 <__aeabi_fmul>
    7e62:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    7e64:	1c28      	adds	r0, r5, #0
    7e66:	f7f8 fc45 	bl	6f4 <__aeabi_fadd>
    7e6a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    7e6c:	980d      	ldr	r0, [sp, #52]	; 0x34
    7e6e:	f7f8 fc41 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    7e72:	4bc2      	ldr	r3, [pc, #776]	; (817c <PSP_CNFG_MQX_KERNEL_LOGGING+0x17c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    7e74:	2280      	movs	r2, #128	; 0x80
    7e76:	50b8      	str	r0, [r7, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    7e78:	58f9      	ldr	r1, [r7, r3]
    7e7a:	1c20      	adds	r0, r4, #0
    7e7c:	f7f8 ff8a 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    7e80:	2382      	movs	r3, #130	; 0x82
    7e82:	00db      	lsls	r3, r3, #3
    7e84:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    7e86:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    7e88:	4648      	mov	r0, r9
    7e8a:	f7f8 ff83 	bl	d94 <__aeabi_fmul>
    7e8e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    7e90:	1c28      	adds	r0, r5, #0
    7e92:	f7f8 fc2f 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1471
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 6][5] * pthisSV->fmErrSeMi[Z]; 
    7e96:	4bba      	ldr	r3, [pc, #744]	; (8180 <PSP_CNFG_MQX_KERNEL_LOGGING+0x180>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    7e98:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1471
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 6][5] * pthisSV->fmErrSeMi[Z]; 
    7e9a:	58f9      	ldr	r1, [r7, r3]
    7e9c:	4650      	mov	r0, sl
    7e9e:	f7f8 ff79 	bl	d94 <__aeabi_fmul>
    7ea2:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    7ea4:	1c28      	adds	r0, r5, #0
    7ea6:	f7f8 fc25 	bl	6f4 <__aeabi_fadd>
    7eaa:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    7eac:	9813      	ldr	r0, [sp, #76]	; 0x4c
    7eae:	f7f8 fc21 	bl	6f4 <__aeabi_fadd>
    7eb2:	23a4      	movs	r3, #164	; 0xa4
    7eb4:	50f8      	str	r0, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    7eb6:	23e5      	movs	r3, #229	; 0xe5
    7eb8:	009b      	lsls	r3, r3, #2
    7eba:	58f9      	ldr	r1, [r7, r3]
    7ebc:	1c20      	adds	r0, r4, #0
    7ebe:	f7f8 ff69 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    7ec2:	23e6      	movs	r3, #230	; 0xe6
    7ec4:	009b      	lsls	r3, r3, #2
    7ec6:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    7ec8:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    7eca:	4648      	mov	r0, r9
    7ecc:	f7f8 ff62 	bl	d94 <__aeabi_fmul>
    7ed0:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    7ed2:	1c28      	adds	r0, r5, #0
    7ed4:	f7f8 fc0e 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1465
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
    7ed8:	23e7      	movs	r3, #231	; 0xe7
    7eda:	009b      	lsls	r3, r3, #2
    7edc:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    7ede:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1465
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
    7ee0:	4650      	mov	r0, sl
    7ee2:	f7f8 ff57 	bl	d94 <__aeabi_fmul>
    7ee6:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    7ee8:	1c28      	adds	r0, r5, #0
    7eea:	f7f8 fc03 	bl	6f4 <__aeabi_fadd>
    7eee:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    7ef0:	9814      	ldr	r0, [sp, #80]	; 0x50
    7ef2:	f7f8 fbff 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    7ef6:	23f7      	movs	r3, #247	; 0xf7
    7ef8:	009b      	lsls	r3, r3, #2
    7efa:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    7efc:	67b8      	str	r0, [r7, #120]	; 0x78
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    7efe:	1c20      	adds	r0, r4, #0
    7f00:	f7f8 ff48 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    7f04:	23f8      	movs	r3, #248	; 0xf8
    7f06:	009b      	lsls	r3, r3, #2
    7f08:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    7f0a:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    7f0c:	4648      	mov	r0, r9
    7f0e:	f7f8 ff41 	bl	d94 <__aeabi_fmul>
    7f12:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    7f14:	1c28      	adds	r0, r5, #0
    7f16:	f7f8 fbed 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1468
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
    7f1a:	23f9      	movs	r3, #249	; 0xf9
    7f1c:	009b      	lsls	r3, r3, #2
    7f1e:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    7f20:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1468
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
    7f22:	4650      	mov	r0, sl
    7f24:	f7f8 ff36 	bl	d94 <__aeabi_fmul>
    7f28:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    7f2a:	1c28      	adds	r0, r5, #0
    7f2c:	f7f8 fbe2 	bl	6f4 <__aeabi_fadd>
    7f30:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    7f32:	9815      	ldr	r0, [sp, #84]	; 0x54
    7f34:	f7f8 fbde 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    7f38:	4b92      	ldr	r3, [pc, #584]	; (8184 <PSP_CNFG_MQX_KERNEL_LOGGING+0x184>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    7f3a:	2184      	movs	r1, #132	; 0x84
    7f3c:	5078      	str	r0, [r7, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    7f3e:	58f9      	ldr	r1, [r7, r3]
    7f40:	1c20      	adds	r0, r4, #0
    7f42:	f7f8 ff27 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    7f46:	2385      	movs	r3, #133	; 0x85
    7f48:	00db      	lsls	r3, r3, #3
    7f4a:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    7f4c:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    7f4e:	4648      	mov	r0, r9
    7f50:	f7f8 ff20 	bl	d94 <__aeabi_fmul>
    7f54:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    7f56:	1c20      	adds	r0, r4, #0
    7f58:	f7f8 fbcc 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1471
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 6][5] * pthisSV->fmErrSeMi[Z]; 
    7f5c:	4b8a      	ldr	r3, [pc, #552]	; (8188 <PSP_CNFG_MQX_KERNEL_LOGGING+0x188>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    7f5e:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1471
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 6][5] * pthisSV->fmErrSeMi[Z]; 
    7f60:	58f9      	ldr	r1, [r7, r3]
    7f62:	4650      	mov	r0, sl
    7f64:	f7f8 ff16 	bl	d94 <__aeabi_fmul>
    7f68:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    7f6a:	1c20      	adds	r0, r4, #0
    7f6c:	f7f8 fbc2 	bl	6f4 <__aeabi_fadd>
    7f70:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    7f72:	4640      	mov	r0, r8
    7f74:	f7f8 fbbe 	bl	6f4 <__aeabi_fadd>
    7f78:	22a8      	movs	r2, #168	; 0xa8
    7f7a:	50b8      	str	r0, [r7, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1456
	}

	// set the magnetic jamming flag if there is a significant magnetic error power after calibration
	ftmp = pthisSV->fdErrSePl[X] * pthisSV->fdErrSePl[X] + pthisSV->fdErrSePl[Y] * pthisSV->fdErrSePl[Y] +
			pthisSV->fdErrSePl[Z] * pthisSV->fdErrSePl[Z];
	iMagJamming = (pthisMagCal->iValidMagCal) && (ftmp > pthisMagCal->fFourBsq);
    7f7c:	2400      	movs	r4, #0
    7f7e:	9404      	str	r4, [sp, #16]
    7f80:	f7fe fddd 	bl	6b3e <fRun_9DOF_GBY_KALMAN+0xef6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7f84:	4651      	mov	r1, sl
    7f86:	6021      	str	r1, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7f88:	1c30      	adds	r0, r6, #0
    7f8a:	2100      	movs	r1, #0
    7f8c:	f7f8 fb84 	bl	698 <__aeabi_fcmpeq>
    7f90:	2800      	cmp	r0, #0
    7f92:	d101      	bne.n	7f98 <fRun_9DOF_GBY_KALMAN+0x2350>
    7f94:	f000 fe01 	bl	8b9a <PSP_CNFG_MQX_KERNEL_LOGGING+0xb9a>
    7f98:	2200      	movs	r2, #0
    7f9a:	4690      	mov	r8, r2
    7f9c:	1c38      	adds	r0, r7, #0
    7f9e:	2100      	movs	r1, #0
    7fa0:	f7f8 fb7a 	bl	698 <__aeabi_fcmpeq>
    7fa4:	2800      	cmp	r0, #0
    7fa6:	d109      	bne.n	7fbc <fRun_9DOF_GBY_KALMAN+0x2374>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7fa8:	6e29      	ldr	r1, [r5, #96]	; 0x60
    7faa:	1c38      	adds	r0, r7, #0
    7fac:	f7f8 fef2 	bl	d94 <__aeabi_fmul>
    7fb0:	1c01      	adds	r1, r0, #0
    7fb2:	4640      	mov	r0, r8
    7fb4:	f7f8 fb9e 	bl	6f4 <__aeabi_fadd>
    7fb8:	4680      	mov	r8, r0
    7fba:	6020      	str	r0, [r4, #0]
    7fbc:	2390      	movs	r3, #144	; 0x90
    7fbe:	58e9      	ldr	r1, [r5, r3]
    7fc0:	9805      	ldr	r0, [sp, #20]
    7fc2:	f7f8 fee7 	bl	d94 <__aeabi_fmul>
    7fc6:	4641      	mov	r1, r8
    7fc8:	f7f8 fb94 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7fcc:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7fce:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    7fd0:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7fd2:	1c30      	adds	r0, r6, #0
    7fd4:	2100      	movs	r1, #0
    7fd6:	f7f8 fb5f 	bl	698 <__aeabi_fcmpeq>
    7fda:	2800      	cmp	r0, #0
    7fdc:	d001      	beq.n	7fe2 <fRun_9DOF_GBY_KALMAN+0x239a>
    7fde:	f001 fb41 	bl	9664 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1664>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    7fe2:	6b69      	ldr	r1, [r5, #52]	; 0x34
    7fe4:	1c30      	adds	r0, r6, #0
    7fe6:	f7f8 fed5 	bl	d94 <__aeabi_fmul>
    7fea:	2100      	movs	r1, #0
    7fec:	f7f8 fb82 	bl	6f4 <__aeabi_fadd>
    7ff0:	4680      	mov	r8, r0
    7ff2:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    7ff4:	1c38      	adds	r0, r7, #0
    7ff6:	2100      	movs	r1, #0
    7ff8:	f7f8 fb4e 	bl	698 <__aeabi_fcmpeq>
    7ffc:	2800      	cmp	r0, #0
    7ffe:	d109      	bne.n	8014 <PSP_CNFG_MQX_KERNEL_LOGGING+0x14>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8000:	6e69      	ldr	r1, [r5, #100]	; 0x64
    8002:	1c38      	adds	r0, r7, #0
    8004:	f7f8 fec6 	bl	d94 <__aeabi_fmul>
    8008:	1c01      	adds	r1, r0, #0
    800a:	4640      	mov	r0, r8
    800c:	f7f8 fb72 	bl	6f4 <__aeabi_fadd>
    8010:	4680      	mov	r8, r0
    8012:	6060      	str	r0, [r4, #4]
    8014:	2394      	movs	r3, #148	; 0x94
    8016:	58e9      	ldr	r1, [r5, r3]
    8018:	9805      	ldr	r0, [sp, #20]
    801a:	f7f8 febb 	bl	d94 <__aeabi_fmul>
    801e:	4641      	mov	r1, r8
    8020:	f7f8 fb68 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8024:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8026:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8028:	60a1      	str	r1, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    802a:	1c30      	adds	r0, r6, #0
    802c:	2100      	movs	r1, #0
    802e:	f7f8 fb33 	bl	698 <__aeabi_fcmpeq>
    8032:	2800      	cmp	r0, #0
    8034:	d001      	beq.n	803a <PSP_CNFG_MQX_KERNEL_LOGGING+0x3a>
    8036:	f001 fb11 	bl	965c <PSP_CNFG_MQX_KERNEL_LOGGING+0x165c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    803a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    803c:	1c30      	adds	r0, r6, #0
    803e:	f7f8 fea9 	bl	d94 <__aeabi_fmul>
    8042:	2100      	movs	r1, #0
    8044:	f7f8 fb56 	bl	6f4 <__aeabi_fadd>
    8048:	4680      	mov	r8, r0
    804a:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    804c:	1c38      	adds	r0, r7, #0
    804e:	2100      	movs	r1, #0
    8050:	f7f8 fb22 	bl	698 <__aeabi_fcmpeq>
    8054:	2800      	cmp	r0, #0
    8056:	d109      	bne.n	806c <PSP_CNFG_MQX_KERNEL_LOGGING+0x6c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8058:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    805a:	1c38      	adds	r0, r7, #0
    805c:	f7f8 fe9a 	bl	d94 <__aeabi_fmul>
    8060:	1c01      	adds	r1, r0, #0
    8062:	4640      	mov	r0, r8
    8064:	f7f8 fb46 	bl	6f4 <__aeabi_fadd>
    8068:	4680      	mov	r8, r0
    806a:	60a0      	str	r0, [r4, #8]
    806c:	2398      	movs	r3, #152	; 0x98
    806e:	58e9      	ldr	r1, [r5, r3]
    8070:	9805      	ldr	r0, [sp, #20]
    8072:	f7f8 fe8f 	bl	d94 <__aeabi_fmul>
    8076:	4641      	mov	r1, r8
    8078:	f7f8 fb3c 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    807c:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    807e:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8080:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8082:	1c30      	adds	r0, r6, #0
    8084:	2100      	movs	r1, #0
    8086:	f7f8 fb07 	bl	698 <__aeabi_fcmpeq>
    808a:	2800      	cmp	r0, #0
    808c:	d001      	beq.n	8092 <PSP_CNFG_MQX_KERNEL_LOGGING+0x92>
    808e:	f001 fae1 	bl	9654 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1654>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8092:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    8094:	1c30      	adds	r0, r6, #0
    8096:	f7f8 fe7d 	bl	d94 <__aeabi_fmul>
    809a:	2100      	movs	r1, #0
    809c:	f7f8 fb2a 	bl	6f4 <__aeabi_fadd>
    80a0:	4680      	mov	r8, r0
    80a2:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    80a4:	1c38      	adds	r0, r7, #0
    80a6:	2100      	movs	r1, #0
    80a8:	f7f8 faf6 	bl	698 <__aeabi_fcmpeq>
    80ac:	2800      	cmp	r0, #0
    80ae:	d109      	bne.n	80c4 <PSP_CNFG_MQX_KERNEL_LOGGING+0xc4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    80b0:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
    80b2:	1c38      	adds	r0, r7, #0
    80b4:	f7f8 fe6e 	bl	d94 <__aeabi_fmul>
    80b8:	1c01      	adds	r1, r0, #0
    80ba:	4640      	mov	r0, r8
    80bc:	f7f8 fb1a 	bl	6f4 <__aeabi_fadd>
    80c0:	4680      	mov	r8, r0
    80c2:	60e0      	str	r0, [r4, #12]
    80c4:	239c      	movs	r3, #156	; 0x9c
    80c6:	58e9      	ldr	r1, [r5, r3]
    80c8:	9805      	ldr	r0, [sp, #20]
    80ca:	f7f8 fe63 	bl	d94 <__aeabi_fmul>
    80ce:	4641      	mov	r1, r8
    80d0:	f7f8 fb10 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    80d4:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    80d6:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    80d8:	6121      	str	r1, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    80da:	1c30      	adds	r0, r6, #0
    80dc:	2100      	movs	r1, #0
    80de:	f7f8 fadb 	bl	698 <__aeabi_fcmpeq>
    80e2:	2800      	cmp	r0, #0
    80e4:	d001      	beq.n	80ea <PSP_CNFG_MQX_KERNEL_LOGGING+0xea>
    80e6:	f001 fab1 	bl	964c <PSP_CNFG_MQX_KERNEL_LOGGING+0x164c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    80ea:	6c29      	ldr	r1, [r5, #64]	; 0x40
    80ec:	1c30      	adds	r0, r6, #0
    80ee:	f7f8 fe51 	bl	d94 <__aeabi_fmul>
    80f2:	2100      	movs	r1, #0
    80f4:	f7f8 fafe 	bl	6f4 <__aeabi_fadd>
    80f8:	4680      	mov	r8, r0
    80fa:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    80fc:	1c38      	adds	r0, r7, #0
    80fe:	2100      	movs	r1, #0
    8100:	f7f8 faca 	bl	698 <__aeabi_fcmpeq>
    8104:	2800      	cmp	r0, #0
    8106:	d109      	bne.n	811c <PSP_CNFG_MQX_KERNEL_LOGGING+0x11c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8108:	6f29      	ldr	r1, [r5, #112]	; 0x70
    810a:	1c38      	adds	r0, r7, #0
    810c:	f7f8 fe42 	bl	d94 <__aeabi_fmul>
    8110:	1c01      	adds	r1, r0, #0
    8112:	4640      	mov	r0, r8
    8114:	f7f8 faee 	bl	6f4 <__aeabi_fadd>
    8118:	4680      	mov	r8, r0
    811a:	6120      	str	r0, [r4, #16]
    811c:	23a0      	movs	r3, #160	; 0xa0
    811e:	58e9      	ldr	r1, [r5, r3]
    8120:	9805      	ldr	r0, [sp, #20]
    8122:	f7f8 fe37 	bl	d94 <__aeabi_fmul>
    8126:	4641      	mov	r1, r8
    8128:	f7f8 fae4 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    812c:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    812e:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8130:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8132:	1c30      	adds	r0, r6, #0
    8134:	2100      	movs	r1, #0
    8136:	f7f8 faaf 	bl	698 <__aeabi_fcmpeq>
    813a:	2800      	cmp	r0, #0
    813c:	d001      	beq.n	8142 <PSP_CNFG_MQX_KERNEL_LOGGING+0x142>
    813e:	f001 fa7b 	bl	9638 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1638>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8142:	6c69      	ldr	r1, [r5, #68]	; 0x44
    8144:	1c30      	adds	r0, r6, #0
    8146:	f7f8 fe25 	bl	d94 <__aeabi_fmul>
    814a:	2100      	movs	r1, #0
    814c:	f7f8 fad2 	bl	6f4 <__aeabi_fadd>
    8150:	1c06      	adds	r6, r0, #0
    8152:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8154:	1c38      	adds	r0, r7, #0
    8156:	2100      	movs	r1, #0
    8158:	f7f8 fa9e 	bl	698 <__aeabi_fcmpeq>
    815c:	2800      	cmp	r0, #0
    815e:	d109      	bne.n	8174 <PSP_CNFG_MQX_KERNEL_LOGGING+0x174>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8160:	6f69      	ldr	r1, [r5, #116]	; 0x74
    8162:	1c38      	adds	r0, r7, #0
    8164:	f7f8 fe16 	bl	d94 <__aeabi_fmul>
    8168:	1c01      	adds	r1, r0, #0
    816a:	1c30      	adds	r0, r6, #0
    816c:	f7f8 fac2 	bl	6f4 <__aeabi_fadd>
    8170:	1c06      	adds	r6, r0, #0
    8172:	6160      	str	r0, [r4, #20]
    8174:	9805      	ldr	r0, [sp, #20]
    8176:	23a4      	movs	r3, #164	; 0xa4
    8178:	e26f      	b.n	865a <PSP_CNFG_MQX_KERNEL_LOGGING+0x65a>
    817a:	46c0      	nop			; (mov r8, r8)
    817c:	0000040c 	.word	0x0000040c
    8180:	00000414 	.word	0x00000414
    8184:	00000424 	.word	0x00000424
    8188:	0000042c 	.word	0x0000042c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    818c:	4652      	mov	r2, sl
    818e:	6022      	str	r2, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8190:	6829      	ldr	r1, [r5, #0]
    8192:	9803      	ldr	r0, [sp, #12]
    8194:	f7f8 fdfe 	bl	d94 <__aeabi_fmul>
    8198:	2100      	movs	r1, #0
    819a:	f7f8 faab 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    819e:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    81a0:	4680      	mov	r8, r0
    81a2:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    81a4:	1c30      	adds	r0, r6, #0
    81a6:	f7f8 fa77 	bl	698 <__aeabi_fcmpeq>
    81aa:	2800      	cmp	r0, #0
    81ac:	d109      	bne.n	81c2 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1c2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    81ae:	6b29      	ldr	r1, [r5, #48]	; 0x30
    81b0:	1c30      	adds	r0, r6, #0
    81b2:	f7f8 fdef 	bl	d94 <__aeabi_fmul>
    81b6:	1c01      	adds	r1, r0, #0
    81b8:	4640      	mov	r0, r8
    81ba:	f7f8 fa9b 	bl	6f4 <__aeabi_fadd>
    81be:	4680      	mov	r8, r0
    81c0:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    81c2:	1c38      	adds	r0, r7, #0
    81c4:	2100      	movs	r1, #0
    81c6:	f7f8 fa67 	bl	698 <__aeabi_fcmpeq>
    81ca:	2800      	cmp	r0, #0
    81cc:	d109      	bne.n	81e2 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1e2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    81ce:	6e29      	ldr	r1, [r5, #96]	; 0x60
    81d0:	1c38      	adds	r0, r7, #0
    81d2:	f7f8 fddf 	bl	d94 <__aeabi_fmul>
    81d6:	1c01      	adds	r1, r0, #0
    81d8:	4640      	mov	r0, r8
    81da:	f7f8 fa8b 	bl	6f4 <__aeabi_fadd>
    81de:	4680      	mov	r8, r0
    81e0:	6020      	str	r0, [r4, #0]
    81e2:	2390      	movs	r3, #144	; 0x90
    81e4:	58e9      	ldr	r1, [r5, r3]
    81e6:	9805      	ldr	r0, [sp, #20]
    81e8:	f7f8 fdd4 	bl	d94 <__aeabi_fmul>
    81ec:	4641      	mov	r1, r8
    81ee:	f7f8 fa81 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    81f2:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    81f4:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    81f6:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    81f8:	6869      	ldr	r1, [r5, #4]
    81fa:	9803      	ldr	r0, [sp, #12]
    81fc:	f7f8 fdca 	bl	d94 <__aeabi_fmul>
    8200:	2100      	movs	r1, #0
    8202:	f7f8 fa77 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8206:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8208:	4680      	mov	r8, r0
    820a:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    820c:	1c30      	adds	r0, r6, #0
    820e:	f7f8 fa43 	bl	698 <__aeabi_fcmpeq>
    8212:	2800      	cmp	r0, #0
    8214:	d109      	bne.n	822a <PSP_CNFG_MQX_KERNEL_LOGGING+0x22a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8216:	6b69      	ldr	r1, [r5, #52]	; 0x34
    8218:	1c30      	adds	r0, r6, #0
    821a:	f7f8 fdbb 	bl	d94 <__aeabi_fmul>
    821e:	1c01      	adds	r1, r0, #0
    8220:	4640      	mov	r0, r8
    8222:	f7f8 fa67 	bl	6f4 <__aeabi_fadd>
    8226:	4680      	mov	r8, r0
    8228:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    822a:	1c38      	adds	r0, r7, #0
    822c:	2100      	movs	r1, #0
    822e:	f7f8 fa33 	bl	698 <__aeabi_fcmpeq>
    8232:	2800      	cmp	r0, #0
    8234:	d109      	bne.n	824a <PSP_CNFG_MQX_KERNEL_LOGGING+0x24a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8236:	6e69      	ldr	r1, [r5, #100]	; 0x64
    8238:	1c38      	adds	r0, r7, #0
    823a:	f7f8 fdab 	bl	d94 <__aeabi_fmul>
    823e:	1c01      	adds	r1, r0, #0
    8240:	4640      	mov	r0, r8
    8242:	f7f8 fa57 	bl	6f4 <__aeabi_fadd>
    8246:	4680      	mov	r8, r0
    8248:	6060      	str	r0, [r4, #4]
    824a:	2394      	movs	r3, #148	; 0x94
    824c:	58e9      	ldr	r1, [r5, r3]
    824e:	9805      	ldr	r0, [sp, #20]
    8250:	f7f8 fda0 	bl	d94 <__aeabi_fmul>
    8254:	4641      	mov	r1, r8
    8256:	f7f8 fa4d 	bl	6f4 <__aeabi_fadd>
    825a:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    825c:	4650      	mov	r0, sl
    825e:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8260:	68a9      	ldr	r1, [r5, #8]
    8262:	9803      	ldr	r0, [sp, #12]
    8264:	f7f8 fd96 	bl	d94 <__aeabi_fmul>
    8268:	2100      	movs	r1, #0
    826a:	f7f8 fa43 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    826e:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8270:	4680      	mov	r8, r0
    8272:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8274:	1c30      	adds	r0, r6, #0
    8276:	f7f8 fa0f 	bl	698 <__aeabi_fcmpeq>
    827a:	2800      	cmp	r0, #0
    827c:	d109      	bne.n	8292 <PSP_CNFG_MQX_KERNEL_LOGGING+0x292>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    827e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    8280:	1c30      	adds	r0, r6, #0
    8282:	f7f8 fd87 	bl	d94 <__aeabi_fmul>
    8286:	1c01      	adds	r1, r0, #0
    8288:	4640      	mov	r0, r8
    828a:	f7f8 fa33 	bl	6f4 <__aeabi_fadd>
    828e:	4680      	mov	r8, r0
    8290:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8292:	1c38      	adds	r0, r7, #0
    8294:	2100      	movs	r1, #0
    8296:	f7f8 f9ff 	bl	698 <__aeabi_fcmpeq>
    829a:	2800      	cmp	r0, #0
    829c:	d109      	bne.n	82b2 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2b2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    829e:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    82a0:	1c38      	adds	r0, r7, #0
    82a2:	f7f8 fd77 	bl	d94 <__aeabi_fmul>
    82a6:	1c01      	adds	r1, r0, #0
    82a8:	4640      	mov	r0, r8
    82aa:	f7f8 fa23 	bl	6f4 <__aeabi_fadd>
    82ae:	4680      	mov	r8, r0
    82b0:	60a0      	str	r0, [r4, #8]
    82b2:	2398      	movs	r3, #152	; 0x98
    82b4:	58e9      	ldr	r1, [r5, r3]
    82b6:	9805      	ldr	r0, [sp, #20]
    82b8:	f7f8 fd6c 	bl	d94 <__aeabi_fmul>
    82bc:	4641      	mov	r1, r8
    82be:	f7f8 fa19 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    82c2:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    82c4:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    82c6:	60e1      	str	r1, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    82c8:	68e9      	ldr	r1, [r5, #12]
    82ca:	9803      	ldr	r0, [sp, #12]
    82cc:	f7f8 fd62 	bl	d94 <__aeabi_fmul>
    82d0:	2100      	movs	r1, #0
    82d2:	f7f8 fa0f 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    82d6:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    82d8:	4680      	mov	r8, r0
    82da:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    82dc:	1c30      	adds	r0, r6, #0
    82de:	f7f8 f9db 	bl	698 <__aeabi_fcmpeq>
    82e2:	2800      	cmp	r0, #0
    82e4:	d109      	bne.n	82fa <PSP_CNFG_MQX_KERNEL_LOGGING+0x2fa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    82e6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    82e8:	1c30      	adds	r0, r6, #0
    82ea:	f7f8 fd53 	bl	d94 <__aeabi_fmul>
    82ee:	1c01      	adds	r1, r0, #0
    82f0:	4640      	mov	r0, r8
    82f2:	f7f8 f9ff 	bl	6f4 <__aeabi_fadd>
    82f6:	4680      	mov	r8, r0
    82f8:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    82fa:	1c38      	adds	r0, r7, #0
    82fc:	2100      	movs	r1, #0
    82fe:	f7f8 f9cb 	bl	698 <__aeabi_fcmpeq>
    8302:	2800      	cmp	r0, #0
    8304:	d109      	bne.n	831a <PSP_CNFG_MQX_KERNEL_LOGGING+0x31a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8306:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
    8308:	1c38      	adds	r0, r7, #0
    830a:	f7f8 fd43 	bl	d94 <__aeabi_fmul>
    830e:	1c01      	adds	r1, r0, #0
    8310:	4640      	mov	r0, r8
    8312:	f7f8 f9ef 	bl	6f4 <__aeabi_fadd>
    8316:	4680      	mov	r8, r0
    8318:	60e0      	str	r0, [r4, #12]
    831a:	239c      	movs	r3, #156	; 0x9c
    831c:	58e9      	ldr	r1, [r5, r3]
    831e:	9805      	ldr	r0, [sp, #20]
    8320:	f7f8 fd38 	bl	d94 <__aeabi_fmul>
    8324:	4641      	mov	r1, r8
    8326:	f7f8 f9e5 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    832a:	4652      	mov	r2, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    832c:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    832e:	6122      	str	r2, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8330:	6929      	ldr	r1, [r5, #16]
    8332:	9803      	ldr	r0, [sp, #12]
    8334:	f7f8 fd2e 	bl	d94 <__aeabi_fmul>
    8338:	2100      	movs	r1, #0
    833a:	f7f8 f9db 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    833e:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8340:	4680      	mov	r8, r0
    8342:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8344:	1c30      	adds	r0, r6, #0
    8346:	f7f8 f9a7 	bl	698 <__aeabi_fcmpeq>
    834a:	2800      	cmp	r0, #0
    834c:	d109      	bne.n	8362 <PSP_CNFG_MQX_KERNEL_LOGGING+0x362>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    834e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    8350:	1c30      	adds	r0, r6, #0
    8352:	f7f8 fd1f 	bl	d94 <__aeabi_fmul>
    8356:	1c01      	adds	r1, r0, #0
    8358:	4640      	mov	r0, r8
    835a:	f7f8 f9cb 	bl	6f4 <__aeabi_fadd>
    835e:	4680      	mov	r8, r0
    8360:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8362:	1c38      	adds	r0, r7, #0
    8364:	2100      	movs	r1, #0
    8366:	f7f8 f997 	bl	698 <__aeabi_fcmpeq>
    836a:	2800      	cmp	r0, #0
    836c:	d109      	bne.n	8382 <PSP_CNFG_MQX_KERNEL_LOGGING+0x382>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    836e:	6f29      	ldr	r1, [r5, #112]	; 0x70
    8370:	1c38      	adds	r0, r7, #0
    8372:	f7f8 fd0f 	bl	d94 <__aeabi_fmul>
    8376:	1c01      	adds	r1, r0, #0
    8378:	4640      	mov	r0, r8
    837a:	f7f8 f9bb 	bl	6f4 <__aeabi_fadd>
    837e:	4680      	mov	r8, r0
    8380:	6120      	str	r0, [r4, #16]
    8382:	23a0      	movs	r3, #160	; 0xa0
    8384:	58e9      	ldr	r1, [r5, r3]
    8386:	9805      	ldr	r0, [sp, #20]
    8388:	f7f8 fd04 	bl	d94 <__aeabi_fmul>
    838c:	4641      	mov	r1, r8
    838e:	f7f8 f9b1 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8392:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8394:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8396:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8398:	6969      	ldr	r1, [r5, #20]
    839a:	9803      	ldr	r0, [sp, #12]
    839c:	f7f8 fcfa 	bl	d94 <__aeabi_fmul>
    83a0:	2100      	movs	r1, #0
    83a2:	f7f8 f9a7 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    83a6:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    83a8:	4680      	mov	r8, r0
    83aa:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    83ac:	1c30      	adds	r0, r6, #0
    83ae:	f7f8 f973 	bl	698 <__aeabi_fcmpeq>
    83b2:	2800      	cmp	r0, #0
    83b4:	d109      	bne.n	83ca <PSP_CNFG_MQX_KERNEL_LOGGING+0x3ca>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    83b6:	6c69      	ldr	r1, [r5, #68]	; 0x44
    83b8:	1c30      	adds	r0, r6, #0
    83ba:	f7f8 fceb 	bl	d94 <__aeabi_fmul>
    83be:	1c01      	adds	r1, r0, #0
    83c0:	4640      	mov	r0, r8
    83c2:	f7f8 f997 	bl	6f4 <__aeabi_fadd>
    83c6:	4680      	mov	r8, r0
    83c8:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    83ca:	1c38      	adds	r0, r7, #0
    83cc:	2100      	movs	r1, #0
    83ce:	f7f8 f963 	bl	698 <__aeabi_fcmpeq>
    83d2:	2800      	cmp	r0, #0
    83d4:	d109      	bne.n	83ea <PSP_CNFG_MQX_KERNEL_LOGGING+0x3ea>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    83d6:	6f69      	ldr	r1, [r5, #116]	; 0x74
    83d8:	1c38      	adds	r0, r7, #0
    83da:	f7f8 fcdb 	bl	d94 <__aeabi_fmul>
    83de:	1c01      	adds	r1, r0, #0
    83e0:	4640      	mov	r0, r8
    83e2:	f7f8 f987 	bl	6f4 <__aeabi_fadd>
    83e6:	4680      	mov	r8, r0
    83e8:	6160      	str	r0, [r4, #20]
    83ea:	9805      	ldr	r0, [sp, #20]
    83ec:	23a4      	movs	r3, #164	; 0xa4
    83ee:	e48a      	b.n	7d06 <fRun_9DOF_GBY_KALMAN+0x20be>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    83f0:	4650      	mov	r0, sl
    83f2:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    83f4:	2100      	movs	r1, #0
    83f6:	1c30      	adds	r0, r6, #0
    83f8:	f7f8 f94e 	bl	698 <__aeabi_fcmpeq>
    83fc:	2800      	cmp	r0, #0
    83fe:	d100      	bne.n	8402 <PSP_CNFG_MQX_KERNEL_LOGGING+0x402>
    8400:	e3c1      	b.n	8b86 <PSP_CNFG_MQX_KERNEL_LOGGING+0xb86>
    8402:	2100      	movs	r1, #0
    8404:	4688      	mov	r8, r1
    8406:	1c38      	adds	r0, r7, #0
    8408:	2100      	movs	r1, #0
    840a:	f7f8 f945 	bl	698 <__aeabi_fcmpeq>
    840e:	2800      	cmp	r0, #0
    8410:	d109      	bne.n	8426 <PSP_CNFG_MQX_KERNEL_LOGGING+0x426>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8412:	6e29      	ldr	r1, [r5, #96]	; 0x60
    8414:	1c38      	adds	r0, r7, #0
    8416:	f7f8 fcbd 	bl	d94 <__aeabi_fmul>
    841a:	1c01      	adds	r1, r0, #0
    841c:	4640      	mov	r0, r8
    841e:	f7f8 f969 	bl	6f4 <__aeabi_fadd>
    8422:	4680      	mov	r8, r0
    8424:	6020      	str	r0, [r4, #0]
    8426:	2390      	movs	r3, #144	; 0x90
    8428:	58e9      	ldr	r1, [r5, r3]
    842a:	9805      	ldr	r0, [sp, #20]
    842c:	f7f8 fcb2 	bl	d94 <__aeabi_fmul>
    8430:	4641      	mov	r1, r8
    8432:	f7f8 f95f 	bl	6f4 <__aeabi_fadd>
    8436:	22c0      	movs	r2, #192	; 0xc0
    8438:	6020      	str	r0, [r4, #0]
    843a:	58a9      	ldr	r1, [r5, r2]
    843c:	4680      	mov	r8, r0
    843e:	9804      	ldr	r0, [sp, #16]
    8440:	f7f8 fca8 	bl	d94 <__aeabi_fmul>
    8444:	4641      	mov	r1, r8
    8446:	f7f8 f955 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    844a:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    844c:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    844e:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8450:	1c30      	adds	r0, r6, #0
    8452:	2100      	movs	r1, #0
    8454:	f7f8 f920 	bl	698 <__aeabi_fcmpeq>
    8458:	2800      	cmp	r0, #0
    845a:	d001      	beq.n	8460 <PSP_CNFG_MQX_KERNEL_LOGGING+0x460>
    845c:	f001 f8b2 	bl	95c4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x15c4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8460:	6b69      	ldr	r1, [r5, #52]	; 0x34
    8462:	1c30      	adds	r0, r6, #0
    8464:	f7f8 fc96 	bl	d94 <__aeabi_fmul>
    8468:	2100      	movs	r1, #0
    846a:	f7f8 f943 	bl	6f4 <__aeabi_fadd>
    846e:	4680      	mov	r8, r0
    8470:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8472:	1c38      	adds	r0, r7, #0
    8474:	2100      	movs	r1, #0
    8476:	f7f8 f90f 	bl	698 <__aeabi_fcmpeq>
    847a:	2800      	cmp	r0, #0
    847c:	d109      	bne.n	8492 <PSP_CNFG_MQX_KERNEL_LOGGING+0x492>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    847e:	6e69      	ldr	r1, [r5, #100]	; 0x64
    8480:	1c38      	adds	r0, r7, #0
    8482:	f7f8 fc87 	bl	d94 <__aeabi_fmul>
    8486:	1c01      	adds	r1, r0, #0
    8488:	4640      	mov	r0, r8
    848a:	f7f8 f933 	bl	6f4 <__aeabi_fadd>
    848e:	4680      	mov	r8, r0
    8490:	6060      	str	r0, [r4, #4]
    8492:	2394      	movs	r3, #148	; 0x94
    8494:	58e9      	ldr	r1, [r5, r3]
    8496:	9805      	ldr	r0, [sp, #20]
    8498:	f7f8 fc7c 	bl	d94 <__aeabi_fmul>
    849c:	4641      	mov	r1, r8
    849e:	f7f8 f929 	bl	6f4 <__aeabi_fadd>
    84a2:	23c4      	movs	r3, #196	; 0xc4
    84a4:	6060      	str	r0, [r4, #4]
    84a6:	58e9      	ldr	r1, [r5, r3]
    84a8:	4680      	mov	r8, r0
    84aa:	9804      	ldr	r0, [sp, #16]
    84ac:	f7f8 fc72 	bl	d94 <__aeabi_fmul>
    84b0:	4641      	mov	r1, r8
    84b2:	f7f8 f91f 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    84b6:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    84b8:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    84ba:	60a1      	str	r1, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    84bc:	1c30      	adds	r0, r6, #0
    84be:	2100      	movs	r1, #0
    84c0:	f7f8 f8ea 	bl	698 <__aeabi_fcmpeq>
    84c4:	2800      	cmp	r0, #0
    84c6:	d001      	beq.n	84cc <PSP_CNFG_MQX_KERNEL_LOGGING+0x4cc>
    84c8:	f001 f878 	bl	95bc <PSP_CNFG_MQX_KERNEL_LOGGING+0x15bc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    84cc:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    84ce:	1c30      	adds	r0, r6, #0
    84d0:	f7f8 fc60 	bl	d94 <__aeabi_fmul>
    84d4:	2100      	movs	r1, #0
    84d6:	f7f8 f90d 	bl	6f4 <__aeabi_fadd>
    84da:	4680      	mov	r8, r0
    84dc:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    84de:	1c38      	adds	r0, r7, #0
    84e0:	2100      	movs	r1, #0
    84e2:	f7f8 f8d9 	bl	698 <__aeabi_fcmpeq>
    84e6:	2800      	cmp	r0, #0
    84e8:	d109      	bne.n	84fe <PSP_CNFG_MQX_KERNEL_LOGGING+0x4fe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    84ea:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    84ec:	1c38      	adds	r0, r7, #0
    84ee:	f7f8 fc51 	bl	d94 <__aeabi_fmul>
    84f2:	1c01      	adds	r1, r0, #0
    84f4:	4640      	mov	r0, r8
    84f6:	f7f8 f8fd 	bl	6f4 <__aeabi_fadd>
    84fa:	4680      	mov	r8, r0
    84fc:	60a0      	str	r0, [r4, #8]
    84fe:	2398      	movs	r3, #152	; 0x98
    8500:	58e9      	ldr	r1, [r5, r3]
    8502:	9805      	ldr	r0, [sp, #20]
    8504:	f7f8 fc46 	bl	d94 <__aeabi_fmul>
    8508:	4641      	mov	r1, r8
    850a:	f7f8 f8f3 	bl	6f4 <__aeabi_fadd>
    850e:	23c8      	movs	r3, #200	; 0xc8
    8510:	60a0      	str	r0, [r4, #8]
    8512:	58e9      	ldr	r1, [r5, r3]
    8514:	4680      	mov	r8, r0
    8516:	9804      	ldr	r0, [sp, #16]
    8518:	f7f8 fc3c 	bl	d94 <__aeabi_fmul>
    851c:	4641      	mov	r1, r8
    851e:	f7f8 f8e9 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8522:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8524:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8526:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8528:	1c30      	adds	r0, r6, #0
    852a:	2100      	movs	r1, #0
    852c:	f7f8 f8b4 	bl	698 <__aeabi_fcmpeq>
    8530:	2800      	cmp	r0, #0
    8532:	d001      	beq.n	8538 <PSP_CNFG_MQX_KERNEL_LOGGING+0x538>
    8534:	f001 f83e 	bl	95b4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x15b4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8538:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    853a:	1c30      	adds	r0, r6, #0
    853c:	f7f8 fc2a 	bl	d94 <__aeabi_fmul>
    8540:	2100      	movs	r1, #0
    8542:	f7f8 f8d7 	bl	6f4 <__aeabi_fadd>
    8546:	4680      	mov	r8, r0
    8548:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    854a:	1c38      	adds	r0, r7, #0
    854c:	2100      	movs	r1, #0
    854e:	f7f8 f8a3 	bl	698 <__aeabi_fcmpeq>
    8552:	2800      	cmp	r0, #0
    8554:	d109      	bne.n	856a <PSP_CNFG_MQX_KERNEL_LOGGING+0x56a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8556:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
    8558:	1c38      	adds	r0, r7, #0
    855a:	f7f8 fc1b 	bl	d94 <__aeabi_fmul>
    855e:	1c01      	adds	r1, r0, #0
    8560:	4640      	mov	r0, r8
    8562:	f7f8 f8c7 	bl	6f4 <__aeabi_fadd>
    8566:	4680      	mov	r8, r0
    8568:	60e0      	str	r0, [r4, #12]
    856a:	239c      	movs	r3, #156	; 0x9c
    856c:	58e9      	ldr	r1, [r5, r3]
    856e:	9805      	ldr	r0, [sp, #20]
    8570:	f7f8 fc10 	bl	d94 <__aeabi_fmul>
    8574:	4641      	mov	r1, r8
    8576:	f7f8 f8bd 	bl	6f4 <__aeabi_fadd>
    857a:	23cc      	movs	r3, #204	; 0xcc
    857c:	60e0      	str	r0, [r4, #12]
    857e:	58e9      	ldr	r1, [r5, r3]
    8580:	4680      	mov	r8, r0
    8582:	9804      	ldr	r0, [sp, #16]
    8584:	f7f8 fc06 	bl	d94 <__aeabi_fmul>
    8588:	4641      	mov	r1, r8
    858a:	f7f8 f8b3 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    858e:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8590:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8592:	6121      	str	r1, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8594:	1c30      	adds	r0, r6, #0
    8596:	2100      	movs	r1, #0
    8598:	f7f8 f87e 	bl	698 <__aeabi_fcmpeq>
    859c:	2800      	cmp	r0, #0
    859e:	d001      	beq.n	85a4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x5a4>
    85a0:	f001 f850 	bl	9644 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1644>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    85a4:	6c29      	ldr	r1, [r5, #64]	; 0x40
    85a6:	1c30      	adds	r0, r6, #0
    85a8:	f7f8 fbf4 	bl	d94 <__aeabi_fmul>
    85ac:	2100      	movs	r1, #0
    85ae:	f7f8 f8a1 	bl	6f4 <__aeabi_fadd>
    85b2:	4680      	mov	r8, r0
    85b4:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    85b6:	1c38      	adds	r0, r7, #0
    85b8:	2100      	movs	r1, #0
    85ba:	f7f8 f86d 	bl	698 <__aeabi_fcmpeq>
    85be:	2800      	cmp	r0, #0
    85c0:	d109      	bne.n	85d6 <PSP_CNFG_MQX_KERNEL_LOGGING+0x5d6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    85c2:	6f29      	ldr	r1, [r5, #112]	; 0x70
    85c4:	1c38      	adds	r0, r7, #0
    85c6:	f7f8 fbe5 	bl	d94 <__aeabi_fmul>
    85ca:	1c01      	adds	r1, r0, #0
    85cc:	4640      	mov	r0, r8
    85ce:	f7f8 f891 	bl	6f4 <__aeabi_fadd>
    85d2:	4680      	mov	r8, r0
    85d4:	6120      	str	r0, [r4, #16]
    85d6:	23a0      	movs	r3, #160	; 0xa0
    85d8:	58e9      	ldr	r1, [r5, r3]
    85da:	9805      	ldr	r0, [sp, #20]
    85dc:	f7f8 fbda 	bl	d94 <__aeabi_fmul>
    85e0:	4641      	mov	r1, r8
    85e2:	f7f8 f887 	bl	6f4 <__aeabi_fadd>
    85e6:	23d0      	movs	r3, #208	; 0xd0
    85e8:	6120      	str	r0, [r4, #16]
    85ea:	58e9      	ldr	r1, [r5, r3]
    85ec:	4680      	mov	r8, r0
    85ee:	9804      	ldr	r0, [sp, #16]
    85f0:	f7f8 fbd0 	bl	d94 <__aeabi_fmul>
    85f4:	4641      	mov	r1, r8
    85f6:	f7f8 f87d 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    85fa:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    85fc:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    85fe:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8600:	1c30      	adds	r0, r6, #0
    8602:	2100      	movs	r1, #0
    8604:	f7f8 f848 	bl	698 <__aeabi_fcmpeq>
    8608:	2800      	cmp	r0, #0
    860a:	d001      	beq.n	8610 <PSP_CNFG_MQX_KERNEL_LOGGING+0x610>
    860c:	f001 f817 	bl	963e <PSP_CNFG_MQX_KERNEL_LOGGING+0x163e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8610:	6c69      	ldr	r1, [r5, #68]	; 0x44
    8612:	1c30      	adds	r0, r6, #0
    8614:	f7f8 fbbe 	bl	d94 <__aeabi_fmul>
    8618:	2100      	movs	r1, #0
    861a:	f7f8 f86b 	bl	6f4 <__aeabi_fadd>
    861e:	1c06      	adds	r6, r0, #0
    8620:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8622:	1c38      	adds	r0, r7, #0
    8624:	2100      	movs	r1, #0
    8626:	f7f8 f837 	bl	698 <__aeabi_fcmpeq>
    862a:	2800      	cmp	r0, #0
    862c:	d109      	bne.n	8642 <PSP_CNFG_MQX_KERNEL_LOGGING+0x642>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    862e:	6f69      	ldr	r1, [r5, #116]	; 0x74
    8630:	1c38      	adds	r0, r7, #0
    8632:	f7f8 fbaf 	bl	d94 <__aeabi_fmul>
    8636:	1c01      	adds	r1, r0, #0
    8638:	1c30      	adds	r0, r6, #0
    863a:	f7f8 f85b 	bl	6f4 <__aeabi_fadd>
    863e:	1c06      	adds	r6, r0, #0
    8640:	6160      	str	r0, [r4, #20]
    8642:	23a4      	movs	r3, #164	; 0xa4
    8644:	58e9      	ldr	r1, [r5, r3]
    8646:	9805      	ldr	r0, [sp, #20]
    8648:	f7f8 fba4 	bl	d94 <__aeabi_fmul>
    864c:	1c31      	adds	r1, r6, #0
    864e:	f7f8 f851 	bl	6f4 <__aeabi_fadd>
    8652:	1c06      	adds	r6, r0, #0
    8654:	6160      	str	r0, [r4, #20]
    8656:	9804      	ldr	r0, [sp, #16]
    8658:	23d4      	movs	r3, #212	; 0xd4
    865a:	58e9      	ldr	r1, [r5, r3]
    865c:	f7f8 fb9a 	bl	d94 <__aeabi_fmul>
    8660:	1c31      	adds	r1, r6, #0
    8662:	f7f8 f847 	bl	6f4 <__aeabi_fadd>
    8666:	6160      	str	r0, [r4, #20]
    8668:	f7fe f82e 	bl	66c8 <fRun_9DOF_GBY_KALMAN+0xa80>
    866c:	2090      	movs	r0, #144	; 0x90
    866e:	1c21      	adds	r1, r4, #0
    8670:	1940      	adds	r0, r0, r5
    8672:	3118      	adds	r1, #24
    8674:	46ab      	mov	fp, r5
    8676:	46b9      	mov	r9, r7
    8678:	9103      	str	r1, [sp, #12]
    867a:	1c05      	adds	r5, r0, #0
    867c:	1c37      	adds	r7, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    867e:	4652      	mov	r2, sl
    8680:	6022      	str	r2, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8682:	1c38      	adds	r0, r7, #0
    8684:	2100      	movs	r1, #0
    8686:	f7f8 f807 	bl	698 <__aeabi_fcmpeq>
    868a:	2600      	movs	r6, #0
    868c:	2800      	cmp	r0, #0
    868e:	d10a      	bne.n	86a6 <PSP_CNFG_MQX_KERNEL_LOGGING+0x6a6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8690:	1c2b      	adds	r3, r5, #0
    8692:	3b60      	subs	r3, #96	; 0x60
    8694:	6819      	ldr	r1, [r3, #0]
    8696:	1c38      	adds	r0, r7, #0
    8698:	f7f8 fb7c 	bl	d94 <__aeabi_fmul>
    869c:	2100      	movs	r1, #0
    869e:	f7f8 f829 	bl	6f4 <__aeabi_fadd>
    86a2:	1c06      	adds	r6, r0, #0
    86a4:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    86a6:	4648      	mov	r0, r9
    86a8:	2100      	movs	r1, #0
    86aa:	f7f7 fff5 	bl	698 <__aeabi_fcmpeq>
    86ae:	2800      	cmp	r0, #0
    86b0:	d10b      	bne.n	86ca <PSP_CNFG_MQX_KERNEL_LOGGING+0x6ca>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    86b2:	1c2b      	adds	r3, r5, #0
    86b4:	3b30      	subs	r3, #48	; 0x30
    86b6:	6819      	ldr	r1, [r3, #0]
    86b8:	4648      	mov	r0, r9
    86ba:	f7f8 fb6b 	bl	d94 <__aeabi_fmul>
    86be:	1c01      	adds	r1, r0, #0
    86c0:	1c30      	adds	r0, r6, #0
    86c2:	f7f8 f817 	bl	6f4 <__aeabi_fadd>
    86c6:	1c06      	adds	r6, r0, #0
    86c8:	6020      	str	r0, [r4, #0]
    86ca:	6829      	ldr	r1, [r5, #0]
    86cc:	9805      	ldr	r0, [sp, #20]
    86ce:	f7f8 fb61 	bl	d94 <__aeabi_fmul>
    86d2:	1c31      	adds	r1, r6, #0
    86d4:	f7f8 f80e 	bl	6f4 <__aeabi_fadd>
    86d8:	6020      	str	r0, [r4, #0]
    86da:	6b29      	ldr	r1, [r5, #48]	; 0x30
    86dc:	1c06      	adds	r6, r0, #0
    86de:	9804      	ldr	r0, [sp, #16]
    86e0:	f7f8 fb58 	bl	d94 <__aeabi_fmul>
    86e4:	1c31      	adds	r1, r6, #0
    86e6:	f7f8 f805 	bl	6f4 <__aeabi_fadd>
    86ea:	6020      	str	r0, [r4, #0]
    86ec:	6e29      	ldr	r1, [r5, #96]	; 0x60
    86ee:	1c06      	adds	r6, r0, #0
    86f0:	4640      	mov	r0, r8
    86f2:	f7f8 fb4f 	bl	d94 <__aeabi_fmul>
    86f6:	1c31      	adds	r1, r6, #0
    86f8:	f7f7 fffc 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1397
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
    86fc:	9b03      	ldr	r3, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    86fe:	c401      	stmia	r4!, {r0}
    8700:	3504      	adds	r5, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1397
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
    8702:	429c      	cmp	r4, r3
    8704:	d1bb      	bne.n	867e <PSP_CNFG_MQX_KERNEL_LOGGING+0x67e>
    8706:	465d      	mov	r5, fp
    8708:	f7fd ffde 	bl	66c8 <fRun_9DOF_GBY_KALMAN+0xa80>
    870c:	2018      	movs	r0, #24
    870e:	1900      	adds	r0, r0, r4
    8710:	46b8      	mov	r8, r7
    8712:	4683      	mov	fp, r0
    8714:	46a9      	mov	r9, r5
    8716:	1c37      	adds	r7, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8718:	4651      	mov	r1, sl
    871a:	6021      	str	r1, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    871c:	6829      	ldr	r1, [r5, #0]
    871e:	9803      	ldr	r0, [sp, #12]
    8720:	f7f8 fb38 	bl	d94 <__aeabi_fmul>
    8724:	2100      	movs	r1, #0
    8726:	f7f7 ffe5 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    872a:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    872c:	1c06      	adds	r6, r0, #0
    872e:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8730:	1c38      	adds	r0, r7, #0
    8732:	f7f7 ffb1 	bl	698 <__aeabi_fcmpeq>
    8736:	2800      	cmp	r0, #0
    8738:	d109      	bne.n	874e <PSP_CNFG_MQX_KERNEL_LOGGING+0x74e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    873a:	6b29      	ldr	r1, [r5, #48]	; 0x30
    873c:	1c38      	adds	r0, r7, #0
    873e:	f7f8 fb29 	bl	d94 <__aeabi_fmul>
    8742:	1c01      	adds	r1, r0, #0
    8744:	1c30      	adds	r0, r6, #0
    8746:	f7f7 ffd5 	bl	6f4 <__aeabi_fadd>
    874a:	1c06      	adds	r6, r0, #0
    874c:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    874e:	4640      	mov	r0, r8
    8750:	2100      	movs	r1, #0
    8752:	f7f7 ffa1 	bl	698 <__aeabi_fcmpeq>
    8756:	2800      	cmp	r0, #0
    8758:	d109      	bne.n	876e <PSP_CNFG_MQX_KERNEL_LOGGING+0x76e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    875a:	6e29      	ldr	r1, [r5, #96]	; 0x60
    875c:	4640      	mov	r0, r8
    875e:	f7f8 fb19 	bl	d94 <__aeabi_fmul>
    8762:	1c01      	adds	r1, r0, #0
    8764:	1c30      	adds	r0, r6, #0
    8766:	f7f7 ffc5 	bl	6f4 <__aeabi_fadd>
    876a:	1c06      	adds	r6, r0, #0
    876c:	6020      	str	r0, [r4, #0]
    876e:	1c2b      	adds	r3, r5, #0
    8770:	3390      	adds	r3, #144	; 0x90
    8772:	6819      	ldr	r1, [r3, #0]
    8774:	9805      	ldr	r0, [sp, #20]
    8776:	f7f8 fb0d 	bl	d94 <__aeabi_fmul>
    877a:	1c31      	adds	r1, r6, #0
    877c:	f7f7 ffba 	bl	6f4 <__aeabi_fadd>
    8780:	1c2b      	adds	r3, r5, #0
    8782:	6020      	str	r0, [r4, #0]
    8784:	33c0      	adds	r3, #192	; 0xc0
    8786:	6819      	ldr	r1, [r3, #0]
    8788:	1c06      	adds	r6, r0, #0
    878a:	9804      	ldr	r0, [sp, #16]
    878c:	f7f8 fb02 	bl	d94 <__aeabi_fmul>
    8790:	1c31      	adds	r1, r6, #0
    8792:	f7f7 ffaf 	bl	6f4 <__aeabi_fadd>
    8796:	c401      	stmia	r4!, {r0}
    8798:	3504      	adds	r5, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1397
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
    879a:	455c      	cmp	r4, fp
    879c:	d1bc      	bne.n	8718 <PSP_CNFG_MQX_KERNEL_LOGGING+0x718>
    879e:	464d      	mov	r5, r9
    87a0:	f7fd ff92 	bl	66c8 <fRun_9DOF_GBY_KALMAN+0xa80>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    87a4:	4650      	mov	r0, sl
    87a6:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    87a8:	2100      	movs	r1, #0
    87aa:	1c30      	adds	r0, r6, #0
    87ac:	f7f7 ff74 	bl	698 <__aeabi_fcmpeq>
    87b0:	2800      	cmp	r0, #0
    87b2:	d100      	bne.n	87b6 <PSP_CNFG_MQX_KERNEL_LOGGING+0x7b6>
    87b4:	e1dd      	b.n	8b72 <PSP_CNFG_MQX_KERNEL_LOGGING+0xb72>
    87b6:	2100      	movs	r1, #0
    87b8:	4689      	mov	r9, r1
    87ba:	1c38      	adds	r0, r7, #0
    87bc:	2100      	movs	r1, #0
    87be:	f7f7 ff6b 	bl	698 <__aeabi_fcmpeq>
    87c2:	2800      	cmp	r0, #0
    87c4:	d109      	bne.n	87da <PSP_CNFG_MQX_KERNEL_LOGGING+0x7da>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    87c6:	6e29      	ldr	r1, [r5, #96]	; 0x60
    87c8:	1c38      	adds	r0, r7, #0
    87ca:	f7f8 fae3 	bl	d94 <__aeabi_fmul>
    87ce:	1c01      	adds	r1, r0, #0
    87d0:	4648      	mov	r0, r9
    87d2:	f7f7 ff8f 	bl	6f4 <__aeabi_fadd>
    87d6:	4681      	mov	r9, r0
    87d8:	6020      	str	r0, [r4, #0]
    87da:	2390      	movs	r3, #144	; 0x90
    87dc:	58e9      	ldr	r1, [r5, r3]
    87de:	9805      	ldr	r0, [sp, #20]
    87e0:	f7f8 fad8 	bl	d94 <__aeabi_fmul>
    87e4:	4649      	mov	r1, r9
    87e6:	f7f7 ff85 	bl	6f4 <__aeabi_fadd>
    87ea:	22f0      	movs	r2, #240	; 0xf0
    87ec:	6020      	str	r0, [r4, #0]
    87ee:	58a9      	ldr	r1, [r5, r2]
    87f0:	4681      	mov	r9, r0
    87f2:	4640      	mov	r0, r8
    87f4:	f7f8 face 	bl	d94 <__aeabi_fmul>
    87f8:	4649      	mov	r1, r9
    87fa:	f7f7 ff7b 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    87fe:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8800:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8802:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8804:	1c30      	adds	r0, r6, #0
    8806:	2100      	movs	r1, #0
    8808:	f7f7 ff46 	bl	698 <__aeabi_fcmpeq>
    880c:	2800      	cmp	r0, #0
    880e:	d001      	beq.n	8814 <PSP_CNFG_MQX_KERNEL_LOGGING+0x814>
    8810:	f000 feeb 	bl	95ea <PSP_CNFG_MQX_KERNEL_LOGGING+0x15ea>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8814:	6b69      	ldr	r1, [r5, #52]	; 0x34
    8816:	1c30      	adds	r0, r6, #0
    8818:	f7f8 fabc 	bl	d94 <__aeabi_fmul>
    881c:	2100      	movs	r1, #0
    881e:	f7f7 ff69 	bl	6f4 <__aeabi_fadd>
    8822:	4681      	mov	r9, r0
    8824:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8826:	1c38      	adds	r0, r7, #0
    8828:	2100      	movs	r1, #0
    882a:	f7f7 ff35 	bl	698 <__aeabi_fcmpeq>
    882e:	2800      	cmp	r0, #0
    8830:	d109      	bne.n	8846 <PSP_CNFG_MQX_KERNEL_LOGGING+0x846>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8832:	6e69      	ldr	r1, [r5, #100]	; 0x64
    8834:	1c38      	adds	r0, r7, #0
    8836:	f7f8 faad 	bl	d94 <__aeabi_fmul>
    883a:	1c01      	adds	r1, r0, #0
    883c:	4648      	mov	r0, r9
    883e:	f7f7 ff59 	bl	6f4 <__aeabi_fadd>
    8842:	4681      	mov	r9, r0
    8844:	6060      	str	r0, [r4, #4]
    8846:	2394      	movs	r3, #148	; 0x94
    8848:	58e9      	ldr	r1, [r5, r3]
    884a:	9805      	ldr	r0, [sp, #20]
    884c:	f7f8 faa2 	bl	d94 <__aeabi_fmul>
    8850:	4649      	mov	r1, r9
    8852:	f7f7 ff4f 	bl	6f4 <__aeabi_fadd>
    8856:	22f4      	movs	r2, #244	; 0xf4
    8858:	6060      	str	r0, [r4, #4]
    885a:	58a9      	ldr	r1, [r5, r2]
    885c:	4681      	mov	r9, r0
    885e:	4640      	mov	r0, r8
    8860:	f7f8 fa98 	bl	d94 <__aeabi_fmul>
    8864:	4649      	mov	r1, r9
    8866:	f7f7 ff45 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    886a:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    886c:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    886e:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8870:	1c30      	adds	r0, r6, #0
    8872:	2100      	movs	r1, #0
    8874:	f7f7 ff10 	bl	698 <__aeabi_fcmpeq>
    8878:	2800      	cmp	r0, #0
    887a:	d001      	beq.n	8880 <PSP_CNFG_MQX_KERNEL_LOGGING+0x880>
    887c:	f000 feb1 	bl	95e2 <PSP_CNFG_MQX_KERNEL_LOGGING+0x15e2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8880:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    8882:	1c30      	adds	r0, r6, #0
    8884:	f7f8 fa86 	bl	d94 <__aeabi_fmul>
    8888:	2100      	movs	r1, #0
    888a:	f7f7 ff33 	bl	6f4 <__aeabi_fadd>
    888e:	4681      	mov	r9, r0
    8890:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8892:	1c38      	adds	r0, r7, #0
    8894:	2100      	movs	r1, #0
    8896:	f7f7 feff 	bl	698 <__aeabi_fcmpeq>
    889a:	2800      	cmp	r0, #0
    889c:	d109      	bne.n	88b2 <PSP_CNFG_MQX_KERNEL_LOGGING+0x8b2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    889e:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    88a0:	1c38      	adds	r0, r7, #0
    88a2:	f7f8 fa77 	bl	d94 <__aeabi_fmul>
    88a6:	1c01      	adds	r1, r0, #0
    88a8:	4648      	mov	r0, r9
    88aa:	f7f7 ff23 	bl	6f4 <__aeabi_fadd>
    88ae:	4681      	mov	r9, r0
    88b0:	60a0      	str	r0, [r4, #8]
    88b2:	2398      	movs	r3, #152	; 0x98
    88b4:	58e9      	ldr	r1, [r5, r3]
    88b6:	9805      	ldr	r0, [sp, #20]
    88b8:	f7f8 fa6c 	bl	d94 <__aeabi_fmul>
    88bc:	4649      	mov	r1, r9
    88be:	f7f7 ff19 	bl	6f4 <__aeabi_fadd>
    88c2:	22f8      	movs	r2, #248	; 0xf8
    88c4:	60a0      	str	r0, [r4, #8]
    88c6:	58a9      	ldr	r1, [r5, r2]
    88c8:	4681      	mov	r9, r0
    88ca:	4640      	mov	r0, r8
    88cc:	f7f8 fa62 	bl	d94 <__aeabi_fmul>
    88d0:	4649      	mov	r1, r9
    88d2:	f7f7 ff0f 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    88d6:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    88d8:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    88da:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    88dc:	1c30      	adds	r0, r6, #0
    88de:	2100      	movs	r1, #0
    88e0:	f7f7 feda 	bl	698 <__aeabi_fcmpeq>
    88e4:	2800      	cmp	r0, #0
    88e6:	d001      	beq.n	88ec <PSP_CNFG_MQX_KERNEL_LOGGING+0x8ec>
    88e8:	f000 fe77 	bl	95da <PSP_CNFG_MQX_KERNEL_LOGGING+0x15da>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    88ec:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    88ee:	1c30      	adds	r0, r6, #0
    88f0:	f7f8 fa50 	bl	d94 <__aeabi_fmul>
    88f4:	2100      	movs	r1, #0
    88f6:	f7f7 fefd 	bl	6f4 <__aeabi_fadd>
    88fa:	4681      	mov	r9, r0
    88fc:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    88fe:	1c38      	adds	r0, r7, #0
    8900:	2100      	movs	r1, #0
    8902:	f7f7 fec9 	bl	698 <__aeabi_fcmpeq>
    8906:	2800      	cmp	r0, #0
    8908:	d109      	bne.n	891e <PSP_CNFG_MQX_KERNEL_LOGGING+0x91e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    890a:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
    890c:	1c38      	adds	r0, r7, #0
    890e:	f7f8 fa41 	bl	d94 <__aeabi_fmul>
    8912:	1c01      	adds	r1, r0, #0
    8914:	4648      	mov	r0, r9
    8916:	f7f7 feed 	bl	6f4 <__aeabi_fadd>
    891a:	4681      	mov	r9, r0
    891c:	60e0      	str	r0, [r4, #12]
    891e:	239c      	movs	r3, #156	; 0x9c
    8920:	58e9      	ldr	r1, [r5, r3]
    8922:	9805      	ldr	r0, [sp, #20]
    8924:	f7f8 fa36 	bl	d94 <__aeabi_fmul>
    8928:	4649      	mov	r1, r9
    892a:	f7f7 fee3 	bl	6f4 <__aeabi_fadd>
    892e:	22fc      	movs	r2, #252	; 0xfc
    8930:	60e0      	str	r0, [r4, #12]
    8932:	58a9      	ldr	r1, [r5, r2]
    8934:	4681      	mov	r9, r0
    8936:	4640      	mov	r0, r8
    8938:	f7f8 fa2c 	bl	d94 <__aeabi_fmul>
    893c:	4649      	mov	r1, r9
    893e:	f7f7 fed9 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8942:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8944:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8946:	6123      	str	r3, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8948:	1c30      	adds	r0, r6, #0
    894a:	2100      	movs	r1, #0
    894c:	f7f7 fea4 	bl	698 <__aeabi_fcmpeq>
    8950:	2800      	cmp	r0, #0
    8952:	d001      	beq.n	8958 <PSP_CNFG_MQX_KERNEL_LOGGING+0x958>
    8954:	f000 fe3d 	bl	95d2 <PSP_CNFG_MQX_KERNEL_LOGGING+0x15d2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8958:	6c29      	ldr	r1, [r5, #64]	; 0x40
    895a:	1c30      	adds	r0, r6, #0
    895c:	f7f8 fa1a 	bl	d94 <__aeabi_fmul>
    8960:	2100      	movs	r1, #0
    8962:	f7f7 fec7 	bl	6f4 <__aeabi_fadd>
    8966:	4681      	mov	r9, r0
    8968:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    896a:	1c38      	adds	r0, r7, #0
    896c:	2100      	movs	r1, #0
    896e:	f7f7 fe93 	bl	698 <__aeabi_fcmpeq>
    8972:	2800      	cmp	r0, #0
    8974:	d109      	bne.n	898a <PSP_CNFG_MQX_KERNEL_LOGGING+0x98a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8976:	6f29      	ldr	r1, [r5, #112]	; 0x70
    8978:	1c38      	adds	r0, r7, #0
    897a:	f7f8 fa0b 	bl	d94 <__aeabi_fmul>
    897e:	1c01      	adds	r1, r0, #0
    8980:	4648      	mov	r0, r9
    8982:	f7f7 feb7 	bl	6f4 <__aeabi_fadd>
    8986:	4681      	mov	r9, r0
    8988:	6120      	str	r0, [r4, #16]
    898a:	23a0      	movs	r3, #160	; 0xa0
    898c:	58e9      	ldr	r1, [r5, r3]
    898e:	9805      	ldr	r0, [sp, #20]
    8990:	f7f8 fa00 	bl	d94 <__aeabi_fmul>
    8994:	4649      	mov	r1, r9
    8996:	f7f7 fead 	bl	6f4 <__aeabi_fadd>
    899a:	2280      	movs	r2, #128	; 0x80
    899c:	6120      	str	r0, [r4, #16]
    899e:	0052      	lsls	r2, r2, #1
    89a0:	58a9      	ldr	r1, [r5, r2]
    89a2:	4681      	mov	r9, r0
    89a4:	4640      	mov	r0, r8
    89a6:	f7f8 f9f5 	bl	d94 <__aeabi_fmul>
    89aa:	4649      	mov	r1, r9
    89ac:	f7f7 fea2 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    89b0:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    89b2:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    89b4:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    89b6:	1c30      	adds	r0, r6, #0
    89b8:	2100      	movs	r1, #0
    89ba:	f7f7 fe6d 	bl	698 <__aeabi_fcmpeq>
    89be:	2800      	cmp	r0, #0
    89c0:	d001      	beq.n	89c6 <PSP_CNFG_MQX_KERNEL_LOGGING+0x9c6>
    89c2:	f000 fe03 	bl	95cc <PSP_CNFG_MQX_KERNEL_LOGGING+0x15cc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    89c6:	6c69      	ldr	r1, [r5, #68]	; 0x44
    89c8:	1c30      	adds	r0, r6, #0
    89ca:	f7f8 f9e3 	bl	d94 <__aeabi_fmul>
    89ce:	2100      	movs	r1, #0
    89d0:	f7f7 fe90 	bl	6f4 <__aeabi_fadd>
    89d4:	1c06      	adds	r6, r0, #0
    89d6:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    89d8:	1c38      	adds	r0, r7, #0
    89da:	2100      	movs	r1, #0
    89dc:	f7f7 fe5c 	bl	698 <__aeabi_fcmpeq>
    89e0:	2800      	cmp	r0, #0
    89e2:	d109      	bne.n	89f8 <PSP_CNFG_MQX_KERNEL_LOGGING+0x9f8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    89e4:	6f69      	ldr	r1, [r5, #116]	; 0x74
    89e6:	1c38      	adds	r0, r7, #0
    89e8:	f7f8 f9d4 	bl	d94 <__aeabi_fmul>
    89ec:	1c01      	adds	r1, r0, #0
    89ee:	1c30      	adds	r0, r6, #0
    89f0:	f7f7 fe80 	bl	6f4 <__aeabi_fadd>
    89f4:	1c06      	adds	r6, r0, #0
    89f6:	6160      	str	r0, [r4, #20]
    89f8:	23a4      	movs	r3, #164	; 0xa4
    89fa:	58e9      	ldr	r1, [r5, r3]
    89fc:	9805      	ldr	r0, [sp, #20]
    89fe:	f7f8 f9c9 	bl	d94 <__aeabi_fmul>
    8a02:	1c31      	adds	r1, r6, #0
    8a04:	f7f7 fe76 	bl	6f4 <__aeabi_fadd>
    8a08:	1c06      	adds	r6, r0, #0
    8a0a:	6160      	str	r0, [r4, #20]
    8a0c:	2782      	movs	r7, #130	; 0x82
    8a0e:	007f      	lsls	r7, r7, #1
    8a10:	59e9      	ldr	r1, [r5, r7]
    8a12:	4640      	mov	r0, r8
    8a14:	f7f8 f9be 	bl	d94 <__aeabi_fmul>
    8a18:	1c31      	adds	r1, r6, #0
    8a1a:	f7f7 fe6b 	bl	6f4 <__aeabi_fadd>
    8a1e:	6160      	str	r0, [r4, #20]
    8a20:	f7fd fe52 	bl	66c8 <fRun_9DOF_GBY_KALMAN+0xa80>
    8a24:	1c22      	adds	r2, r4, #0
    8a26:	3218      	adds	r2, #24
    8a28:	46b9      	mov	r9, r7
    8a2a:	920d      	str	r2, [sp, #52]	; 0x34
    8a2c:	46ab      	mov	fp, r5
    8a2e:	1c37      	adds	r7, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8a30:	4653      	mov	r3, sl
    8a32:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8a34:	6829      	ldr	r1, [r5, #0]
    8a36:	9803      	ldr	r0, [sp, #12]
    8a38:	f7f8 f9ac 	bl	d94 <__aeabi_fmul>
    8a3c:	2100      	movs	r1, #0
    8a3e:	f7f7 fe59 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8a42:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8a44:	1c06      	adds	r6, r0, #0
    8a46:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8a48:	1c38      	adds	r0, r7, #0
    8a4a:	f7f7 fe25 	bl	698 <__aeabi_fcmpeq>
    8a4e:	2800      	cmp	r0, #0
    8a50:	d109      	bne.n	8a66 <PSP_CNFG_MQX_KERNEL_LOGGING+0xa66>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8a52:	6b29      	ldr	r1, [r5, #48]	; 0x30
    8a54:	1c38      	adds	r0, r7, #0
    8a56:	f7f8 f99d 	bl	d94 <__aeabi_fmul>
    8a5a:	1c01      	adds	r1, r0, #0
    8a5c:	1c30      	adds	r0, r6, #0
    8a5e:	f7f7 fe49 	bl	6f4 <__aeabi_fadd>
    8a62:	1c06      	adds	r6, r0, #0
    8a64:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8a66:	4648      	mov	r0, r9
    8a68:	2100      	movs	r1, #0
    8a6a:	f7f7 fe15 	bl	698 <__aeabi_fcmpeq>
    8a6e:	2800      	cmp	r0, #0
    8a70:	d109      	bne.n	8a86 <PSP_CNFG_MQX_KERNEL_LOGGING+0xa86>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8a72:	6e29      	ldr	r1, [r5, #96]	; 0x60
    8a74:	4648      	mov	r0, r9
    8a76:	f7f8 f98d 	bl	d94 <__aeabi_fmul>
    8a7a:	1c01      	adds	r1, r0, #0
    8a7c:	1c30      	adds	r0, r6, #0
    8a7e:	f7f7 fe39 	bl	6f4 <__aeabi_fadd>
    8a82:	1c06      	adds	r6, r0, #0
    8a84:	6020      	str	r0, [r4, #0]
    8a86:	1c2b      	adds	r3, r5, #0
    8a88:	3390      	adds	r3, #144	; 0x90
    8a8a:	6819      	ldr	r1, [r3, #0]
    8a8c:	9805      	ldr	r0, [sp, #20]
    8a8e:	f7f8 f981 	bl	d94 <__aeabi_fmul>
    8a92:	1c31      	adds	r1, r6, #0
    8a94:	f7f7 fe2e 	bl	6f4 <__aeabi_fadd>
    8a98:	1c2b      	adds	r3, r5, #0
    8a9a:	6020      	str	r0, [r4, #0]
    8a9c:	33c0      	adds	r3, #192	; 0xc0
    8a9e:	6819      	ldr	r1, [r3, #0]
    8aa0:	1c06      	adds	r6, r0, #0
    8aa2:	9804      	ldr	r0, [sp, #16]
    8aa4:	f7f8 f976 	bl	d94 <__aeabi_fmul>
    8aa8:	1c01      	adds	r1, r0, #0
    8aaa:	1c30      	adds	r0, r6, #0
    8aac:	f7f7 fe22 	bl	6f4 <__aeabi_fadd>
    8ab0:	1c2b      	adds	r3, r5, #0
    8ab2:	6020      	str	r0, [r4, #0]
    8ab4:	33f0      	adds	r3, #240	; 0xf0
    8ab6:	6819      	ldr	r1, [r3, #0]
    8ab8:	1c06      	adds	r6, r0, #0
    8aba:	4640      	mov	r0, r8
    8abc:	f7f8 f96a 	bl	d94 <__aeabi_fmul>
    8ac0:	1c01      	adds	r1, r0, #0
    8ac2:	1c30      	adds	r0, r6, #0
    8ac4:	f7f7 fe16 	bl	6f4 <__aeabi_fadd>
    8ac8:	c401      	stmia	r4!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1397
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
    8aca:	980d      	ldr	r0, [sp, #52]	; 0x34
    8acc:	3504      	adds	r5, #4
    8ace:	4284      	cmp	r4, r0
    8ad0:	d1ae      	bne.n	8a30 <PSP_CNFG_MQX_KERNEL_LOGGING+0xa30>
    8ad2:	465d      	mov	r5, fp
    8ad4:	f7fd fdf8 	bl	66c8 <fRun_9DOF_GBY_KALMAN+0xa80>
    8ad8:	1c20      	adds	r0, r4, #0
    8ada:	3018      	adds	r0, #24
    8adc:	46b9      	mov	r9, r7
    8ade:	9004      	str	r0, [sp, #16]
    8ae0:	46ab      	mov	fp, r5
    8ae2:	1c37      	adds	r7, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8ae4:	4651      	mov	r1, sl
    8ae6:	6021      	str	r1, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8ae8:	6829      	ldr	r1, [r5, #0]
    8aea:	9803      	ldr	r0, [sp, #12]
    8aec:	f7f8 f952 	bl	d94 <__aeabi_fmul>
    8af0:	2100      	movs	r1, #0
    8af2:	f7f7 fdff 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8af6:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8af8:	1c06      	adds	r6, r0, #0
    8afa:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8afc:	1c38      	adds	r0, r7, #0
    8afe:	f7f7 fdcb 	bl	698 <__aeabi_fcmpeq>
    8b02:	2800      	cmp	r0, #0
    8b04:	d109      	bne.n	8b1a <PSP_CNFG_MQX_KERNEL_LOGGING+0xb1a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8b06:	6b29      	ldr	r1, [r5, #48]	; 0x30
    8b08:	1c38      	adds	r0, r7, #0
    8b0a:	f7f8 f943 	bl	d94 <__aeabi_fmul>
    8b0e:	1c01      	adds	r1, r0, #0
    8b10:	1c30      	adds	r0, r6, #0
    8b12:	f7f7 fdef 	bl	6f4 <__aeabi_fadd>
    8b16:	1c06      	adds	r6, r0, #0
    8b18:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8b1a:	4648      	mov	r0, r9
    8b1c:	2100      	movs	r1, #0
    8b1e:	f7f7 fdbb 	bl	698 <__aeabi_fcmpeq>
    8b22:	2800      	cmp	r0, #0
    8b24:	d109      	bne.n	8b3a <PSP_CNFG_MQX_KERNEL_LOGGING+0xb3a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8b26:	6e29      	ldr	r1, [r5, #96]	; 0x60
    8b28:	4648      	mov	r0, r9
    8b2a:	f7f8 f933 	bl	d94 <__aeabi_fmul>
    8b2e:	1c01      	adds	r1, r0, #0
    8b30:	1c30      	adds	r0, r6, #0
    8b32:	f7f7 fddf 	bl	6f4 <__aeabi_fadd>
    8b36:	1c06      	adds	r6, r0, #0
    8b38:	6020      	str	r0, [r4, #0]
    8b3a:	1c2b      	adds	r3, r5, #0
    8b3c:	3390      	adds	r3, #144	; 0x90
    8b3e:	6819      	ldr	r1, [r3, #0]
    8b40:	9805      	ldr	r0, [sp, #20]
    8b42:	f7f8 f927 	bl	d94 <__aeabi_fmul>
    8b46:	1c31      	adds	r1, r6, #0
    8b48:	f7f7 fdd4 	bl	6f4 <__aeabi_fadd>
    8b4c:	1c2b      	adds	r3, r5, #0
    8b4e:	6020      	str	r0, [r4, #0]
    8b50:	33f0      	adds	r3, #240	; 0xf0
    8b52:	6819      	ldr	r1, [r3, #0]
    8b54:	1c06      	adds	r6, r0, #0
    8b56:	4640      	mov	r0, r8
    8b58:	f7f8 f91c 	bl	d94 <__aeabi_fmul>
    8b5c:	1c31      	adds	r1, r6, #0
    8b5e:	f7f7 fdc9 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1397
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
    8b62:	9a04      	ldr	r2, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8b64:	c401      	stmia	r4!, {r0}
    8b66:	3504      	adds	r5, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1397
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
    8b68:	4294      	cmp	r4, r2
    8b6a:	d1bb      	bne.n	8ae4 <PSP_CNFG_MQX_KERNEL_LOGGING+0xae4>
    8b6c:	465d      	mov	r5, fp
    8b6e:	f7fd fdab 	bl	66c8 <fRun_9DOF_GBY_KALMAN+0xa80>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8b72:	6b29      	ldr	r1, [r5, #48]	; 0x30
    8b74:	1c30      	adds	r0, r6, #0
    8b76:	f7f8 f90d 	bl	d94 <__aeabi_fmul>
    8b7a:	2100      	movs	r1, #0
    8b7c:	f7f7 fdba 	bl	6f4 <__aeabi_fadd>
    8b80:	4681      	mov	r9, r0
    8b82:	6020      	str	r0, [r4, #0]
    8b84:	e619      	b.n	87ba <PSP_CNFG_MQX_KERNEL_LOGGING+0x7ba>
    8b86:	6b29      	ldr	r1, [r5, #48]	; 0x30
    8b88:	1c30      	adds	r0, r6, #0
    8b8a:	f7f8 f903 	bl	d94 <__aeabi_fmul>
    8b8e:	2100      	movs	r1, #0
    8b90:	f7f7 fdb0 	bl	6f4 <__aeabi_fadd>
    8b94:	4680      	mov	r8, r0
    8b96:	6020      	str	r0, [r4, #0]
    8b98:	e435      	b.n	8406 <PSP_CNFG_MQX_KERNEL_LOGGING+0x406>
    8b9a:	6b29      	ldr	r1, [r5, #48]	; 0x30
    8b9c:	1c30      	adds	r0, r6, #0
    8b9e:	f7f8 f8f9 	bl	d94 <__aeabi_fmul>
    8ba2:	2100      	movs	r1, #0
    8ba4:	f7f7 fda6 	bl	6f4 <__aeabi_fadd>
    8ba8:	4680      	mov	r8, r0
    8baa:	6020      	str	r0, [r4, #0]
    8bac:	f7ff f9f6 	bl	7f9c <fRun_9DOF_GBY_KALMAN+0x2354>
    8bb0:	6f69      	ldr	r1, [r5, #116]	; 0x74
    8bb2:	1c38      	adds	r0, r7, #0
    8bb4:	f7f8 f8ee 	bl	d94 <__aeabi_fmul>
    8bb8:	1c01      	adds	r1, r0, #0
    8bba:	4640      	mov	r0, r8
    8bbc:	f7f7 fd9a 	bl	6f4 <__aeabi_fadd>
    8bc0:	4680      	mov	r8, r0
    8bc2:	6160      	str	r0, [r4, #20]
    8bc4:	f7ff f89d 	bl	7d02 <fRun_9DOF_GBY_KALMAN+0x20ba>
    8bc8:	6b29      	ldr	r1, [r5, #48]	; 0x30
    8bca:	1c30      	adds	r0, r6, #0
    8bcc:	f7f8 f8e2 	bl	d94 <__aeabi_fmul>
    8bd0:	2100      	movs	r1, #0
    8bd2:	f7f7 fd8f 	bl	6f4 <__aeabi_fadd>
    8bd6:	4681      	mov	r9, r0
    8bd8:	6020      	str	r0, [r4, #0]
    8bda:	f7fe fe3c 	bl	7856 <fRun_9DOF_GBY_KALMAN+0x1c0e>
    8bde:	6b29      	ldr	r1, [r5, #48]	; 0x30
    8be0:	1c30      	adds	r0, r6, #0
    8be2:	f7f8 f8d7 	bl	d94 <__aeabi_fmul>
    8be6:	2100      	movs	r1, #0
    8be8:	f7f7 fd84 	bl	6f4 <__aeabi_fadd>
    8bec:	4680      	mov	r8, r0
    8bee:	6020      	str	r0, [r4, #0]
    8bf0:	f7fe fcdc 	bl	75ac <fRun_9DOF_GBY_KALMAN+0x1964>
    8bf4:	6b29      	ldr	r1, [r5, #48]	; 0x30
    8bf6:	1c30      	adds	r0, r6, #0
    8bf8:	f7f8 f8cc 	bl	d94 <__aeabi_fmul>
    8bfc:	2100      	movs	r1, #0
    8bfe:	f7f7 fd79 	bl	6f4 <__aeabi_fadd>
    8c02:	4681      	mov	r9, r0
    8c04:	6020      	str	r0, [r4, #0]
    8c06:	f7fe fbd0 	bl	73aa <fRun_9DOF_GBY_KALMAN+0x1762>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1528
		break;
	case ANDROID:
		// acceleration positive ENU
		pthisSV->faGlPl[X] = pthisSV->faGlPl[X];
		pthisSV->faGlPl[Y] = pthisSV->faGlPl[Y];
		pthisSV->faGlPl[Z] = pthisSV->faGlPl[Z] - 1.0F;
    8c0a:	21fe      	movs	r1, #254	; 0xfe
    8c0c:	0589      	lsls	r1, r1, #22
    8c0e:	f7f8 f9eb 	bl	fe8 <__aeabi_fsub>
    8c12:	465a      	mov	r2, fp
    8c14:	5150      	str	r0, [r2, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1540
		pthisSV->faGlPl[Z] = -(pthisSV->faGlPl[Z] + 1.0F);
		break;
	}

	// update the reference geomagnetic vector using magnetic disturbance error if valid calibration and no jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
    8c16:	4be9      	ldr	r3, [pc, #932]	; (8fbc <PSP_CNFG_MQX_KERNEL_LOGGING+0xfbc>)
    8c18:	9878      	ldr	r0, [sp, #480]	; 0x1e0
    8c1a:	56c3      	ldrsb	r3, [r0, r3]
    8c1c:	2b00      	cmp	r3, #0
    8c1e:	d001      	beq.n	8c24 <PSP_CNFG_MQX_KERNEL_LOGGING+0xc24>
    8c20:	f7fe f875 	bl	6d0e <fRun_9DOF_GBY_KALMAN+0x10c6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1638

	// *********************************************************************************
	// compute the a posteriori Euler angles from the orientation matrix
	// *********************************************************************************

	if (ithisCoordSystem == NED)
    8c24:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    8c26:	2f00      	cmp	r7, #0
    8c28:	d101      	bne.n	8c2e <PSP_CNFG_MQX_KERNEL_LOGGING+0xc2e>
    8c2a:	f7fe f918 	bl	6e5e <fRun_9DOF_GBY_KALMAN+0x1216>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1647
				&(pthisSV->fRhoPl), &(pthisSV->fChiPl));
	}
	else if (ithisCoordSystem == ANDROID)
	{
		// calculate the Android Euler angles
		fAndroidAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
    8c2e:	465b      	mov	r3, fp
    8c30:	330c      	adds	r3, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1644
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
				&(pthisSV->fRhoPl), &(pthisSV->fChiPl));
	}
	else if (ithisCoordSystem == ANDROID)
    8c32:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1647
	{
		// calculate the Android Euler angles
		fAndroidAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
    8c34:	465a      	mov	r2, fp
    8c36:	9300      	str	r3, [sp, #0]
    8c38:	3304      	adds	r3, #4
    8c3a:	9301      	str	r3, [sp, #4]
    8c3c:	3204      	adds	r2, #4
    8c3e:	980e      	ldr	r0, [sp, #56]	; 0x38
    8c40:	4659      	mov	r1, fp
    8c42:	3b08      	subs	r3, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1644
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
				&(pthisSV->fRhoPl), &(pthisSV->fChiPl));
	}
	else if (ithisCoordSystem == ANDROID)
    8c44:	2c01      	cmp	r4, #1
    8c46:	d101      	bne.n	8c4c <PSP_CNFG_MQX_KERNEL_LOGGING+0xc4c>
    8c48:	f000 fd16 	bl	9678 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1678>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1653
				&(pthisSV->fRhoPl), &(pthisSV->fChiPl));
	}
	else
	{
		// calculate Win8 Euler angles
		fWin8AnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
    8c4c:	f004 fb2c 	bl	d2a8 <fWin8AnglesDegFromRotationMatrix>
    8c50:	209a      	movs	r0, #154	; 0x9a
    8c52:	0080      	lsls	r0, r0, #2
    8c54:	9c12      	ldr	r4, [sp, #72]	; 0x48
    8c56:	1c07      	adds	r7, r0, #0
    8c58:	445f      	add	r7, fp
    8c5a:	4659      	mov	r1, fp
    8c5c:	9704      	str	r7, [sp, #16]
    8c5e:	9105      	str	r1, [sp, #20]
    8c60:	46a3      	mov	fp, r4
    8c62:	20ae      	movs	r0, #174	; 0xae
    8c64:	00c0      	lsls	r0, r0, #3
    8c66:	2730      	movs	r7, #48	; 0x30
    8c68:	427f      	negs	r7, r7
    8c6a:	1c04      	adds	r4, r0, #0
    8c6c:	20b4      	movs	r0, #180	; 0xb4
    8c6e:	46b9      	mov	r9, r7
    8c70:	00c0      	lsls	r0, r0, #3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1622
					fsindelta = SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
				}
				else if (fsindelta < -SINDELTAMAX)
				{
					fsindelta = -SINDELTAMAX;
    8c72:	9f06      	ldr	r7, [sp, #24]
    8c74:	445c      	add	r4, fp
    8c76:	4680      	mov	r8, r0
    8c78:	44d9      	add	r9, fp
    8c7a:	9403      	str	r4, [sp, #12]
    8c7c:	46ba      	mov	sl, r7
    8c7e:	44d8      	add	r8, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1675
		pfPPlus12x12ij = pthisSV->fPPlus12x12[i];

		for (j = 0; j < 12; j++)
		{
			// zero P+[i][j] 
			*pfPPlus12x12ij = 0.0F;
    8c80:	2200      	movs	r2, #0
    8c82:	4649      	mov	r1, r9
    8c84:	600a      	str	r2, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1681

			// initialize pfC6x12ik for current i, k=0
			pfC6x12ik = pthisSV->fC6x12[i];

			// initialize pfQw12x12kj for current j, k=0
			pfQw12x12kj = &pthisSV->fQw12x12[0][j];
    8c86:	4655      	mov	r5, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1678
		{
			// zero P+[i][j] 
			*pfPPlus12x12ij = 0.0F;

			// initialize pfC6x12ik for current i, k=0
			pfC6x12ik = pthisSV->fC6x12[i];
    8c88:	9c03      	ldr	r4, [sp, #12]
    8c8a:	4647      	mov	r7, r8
    8c8c:	e00a      	b.n	8ca4 <PSP_CNFG_MQX_KERNEL_LOGGING+0xca4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1689
			for (k = 0; k < 12; k++)
			{
				if ((*pfC6x12ik != 0.0F) && (*pfQw12x12kj != 0.0F))
				{
					if (*pfC6x12ik == 1.0F)
						*pfPPlus12x12ij += *pfQw12x12kj;
    8c8e:	4649      	mov	r1, r9
    8c90:	6808      	ldr	r0, [r1, #0]
    8c92:	4641      	mov	r1, r8
    8c94:	f7f7 fd2e 	bl	6f4 <__aeabi_fadd>
    8c98:	464a      	mov	r2, r9
    8c9a:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1697
					else
						*pfPPlus12x12ij += *pfC6x12ik * *pfQw12x12kj;
				}

				// update pfC6x12ik and pfQw12x12kj for next iteration of k
				pfC6x12ik++;
    8c9c:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1698
				pfQw12x12kj += 12;
    8c9e:	3530      	adds	r5, #48	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1684

			// initialize pfQw12x12kj for current j, k=0
			pfQw12x12kj = &pthisSV->fQw12x12[0][j];

			// sum matrix products over inner loop over k
			for (k = 0; k < 12; k++)
    8ca0:	42bc      	cmp	r4, r7
    8ca2:	d027      	beq.n	8cf4 <PSP_CNFG_MQX_KERNEL_LOGGING+0xcf4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1686
			{
				if ((*pfC6x12ik != 0.0F) && (*pfQw12x12kj != 0.0F))
    8ca4:	6826      	ldr	r6, [r4, #0]
    8ca6:	2100      	movs	r1, #0
    8ca8:	1c30      	adds	r0, r6, #0
    8caa:	f7f7 fcf5 	bl	698 <__aeabi_fcmpeq>
    8cae:	2800      	cmp	r0, #0
    8cb0:	d1f4      	bne.n	8c9c <PSP_CNFG_MQX_KERNEL_LOGGING+0xc9c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1686 (discriminator 1)
    8cb2:	682b      	ldr	r3, [r5, #0]
    8cb4:	2100      	movs	r1, #0
    8cb6:	1c18      	adds	r0, r3, #0
    8cb8:	4698      	mov	r8, r3
    8cba:	f7f7 fced 	bl	698 <__aeabi_fcmpeq>
    8cbe:	2800      	cmp	r0, #0
    8cc0:	d1ec      	bne.n	8c9c <PSP_CNFG_MQX_KERNEL_LOGGING+0xc9c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1688
				{
					if (*pfC6x12ik == 1.0F)
    8cc2:	21fe      	movs	r1, #254	; 0xfe
    8cc4:	1c30      	adds	r0, r6, #0
    8cc6:	0589      	lsls	r1, r1, #22
    8cc8:	f7f7 fce6 	bl	698 <__aeabi_fcmpeq>
    8ccc:	2800      	cmp	r0, #0
    8cce:	d1de      	bne.n	8c8e <PSP_CNFG_MQX_KERNEL_LOGGING+0xc8e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1690
						*pfPPlus12x12ij += *pfQw12x12kj;
					else if (*pfC6x12ik == -1.0F)
    8cd0:	1c30      	adds	r0, r6, #0
    8cd2:	49bb      	ldr	r1, [pc, #748]	; (8fc0 <PSP_CNFG_MQX_KERNEL_LOGGING+0xfc0>)
    8cd4:	f7f7 fce0 	bl	698 <__aeabi_fcmpeq>
    8cd8:	2800      	cmp	r0, #0
    8cda:	d100      	bne.n	8cde <PSP_CNFG_MQX_KERNEL_LOGGING+0xcde>
    8cdc:	e161      	b.n	8fa2 <PSP_CNFG_MQX_KERNEL_LOGGING+0xfa2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1691
						*pfPPlus12x12ij -= *pfQw12x12kj;
    8cde:	464b      	mov	r3, r9
    8ce0:	6818      	ldr	r0, [r3, #0]
    8ce2:	4641      	mov	r1, r8
    8ce4:	f7f8 f980 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1697
					else
						*pfPPlus12x12ij += *pfC6x12ik * *pfQw12x12kj;
				}

				// update pfC6x12ik and pfQw12x12kj for next iteration of k
				pfC6x12ik++;
    8ce8:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1691
				if ((*pfC6x12ik != 0.0F) && (*pfQw12x12kj != 0.0F))
				{
					if (*pfC6x12ik == 1.0F)
						*pfPPlus12x12ij += *pfQw12x12kj;
					else if (*pfC6x12ik == -1.0F)
						*pfPPlus12x12ij -= *pfQw12x12kj;
    8cea:	4649      	mov	r1, r9
    8cec:	6008      	str	r0, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1698
						*pfPPlus12x12ij += *pfC6x12ik * *pfQw12x12kj;
				}

				// update pfC6x12ik and pfQw12x12kj for next iteration of k
				pfC6x12ik++;
				pfQw12x12kj += 12;
    8cee:	3530      	adds	r5, #48	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1684

			// initialize pfQw12x12kj for current j, k=0
			pfQw12x12kj = &pthisSV->fQw12x12[0][j];

			// sum matrix products over inner loop over k
			for (k = 0; k < 12; k++)
    8cf0:	42bc      	cmp	r4, r7
    8cf2:	d1d7      	bne.n	8ca4 <PSP_CNFG_MQX_KERNEL_LOGGING+0xca4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1703
				pfQw12x12kj += 12;

			} // end of loop over k

			// increment pfPPlus12x12ij for next iteration of j
			pfPPlus12x12ij++;
    8cf4:	2404      	movs	r4, #4
    8cf6:	44a1      	add	r9, r4
    8cf8:	46b8      	mov	r8, r7
    8cfa:	44a2      	add	sl, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1672
	for (i = 0; i < 6; i++)
	{
		// initialize pfPPlus12x12ij for current i, j=0
		pfPPlus12x12ij = pthisSV->fPPlus12x12[i];

		for (j = 0; j < 12; j++)
    8cfc:	45d9      	cmp	r9, fp
    8cfe:	d1bf      	bne.n	8c80 <PSP_CNFG_MQX_KERNEL_LOGGING+0xc80>
    8d00:	2730      	movs	r7, #48	; 0x30
    8d02:	46bb      	mov	fp, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1667
	// ***********************************************************************************

	// set P+ (6x12 scratch sub-matrix) to the product C (6x12) * Qw (12x12)
	// where both C and Qw are sparse and C has a significant number of +1 and -1 entries
	// the resulting matrix is sparse but not symmetric
	for (i = 0; i < 6; i++)
    8d04:	9c04      	ldr	r4, [sp, #16]
    8d06:	44cb      	add	fp, r9
    8d08:	45a3      	cmp	fp, r4
    8d0a:	d1aa      	bne.n	8c62 <PSP_CNFG_MQX_KERNEL_LOGGING+0xc62>
    8d0c:	9f05      	ldr	r7, [sp, #20]
    8d0e:	2400      	movs	r4, #0
    8d10:	46bb      	mov	fp, r7
    8d12:	20d6      	movs	r0, #214	; 0xd6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1729

			// compute on and above diagonal matrix entry
			for (k = 0; k < 6; k++)
			{
				// check for non-zero values since P+ (6x12 scratch sub-matrix) is sparse
				if (*pfPPlus12x12kj != 0.0F)
    8d14:	27c0      	movs	r7, #192	; 0xc0
    8d16:	0080      	lsls	r0, r0, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1667
	// ***********************************************************************************

	// set P+ (6x12 scratch sub-matrix) to the product C (6x12) * Qw (12x12)
	// where both C and Qw are sparse and C has a significant number of +1 and -1 entries
	// the resulting matrix is sparse but not symmetric
	for (i = 0; i < 6; i++)
    8d18:	9403      	str	r4, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1729

			// compute on and above diagonal matrix entry
			for (k = 0; k < 6; k++)
			{
				// check for non-zero values since P+ (6x12 scratch sub-matrix) is sparse
				if (*pfPPlus12x12kj != 0.0F)
    8d1a:	46ba      	mov	sl, r7
    8d1c:	465c      	mov	r4, fp
    8d1e:	9f11      	ldr	r7, [sp, #68]	; 0x44
    8d20:	1c06      	adds	r6, r0, #0
    8d22:	9404      	str	r4, [sp, #16]
    8d24:	20f0      	movs	r0, #240	; 0xf0
    8d26:	9c06      	ldr	r4, [sp, #24]
    8d28:	445e      	add	r6, fp
    8d2a:	4681      	mov	r9, r0
    8d2c:	46bb      	mov	fp, r7
    8d2e:	9f03      	ldr	r7, [sp, #12]
    8d30:	b27d      	sxtb	r5, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1723
		{
			// initialize pfK12x6ik for current i, k=0
			pfK12x6ik = pthisSV->fK12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    8d32:	00ad      	lsls	r5, r5, #2
    8d34:	445d      	add	r5, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1729

			// compute on and above diagonal matrix entry
			for (k = 0; k < 6; k++)
			{
				// check for non-zero values since P+ (6x12 scratch sub-matrix) is sparse
				if (*pfPPlus12x12kj != 0.0F)
    8d36:	6828      	ldr	r0, [r5, #0]
    8d38:	2100      	movs	r1, #0
    8d3a:	4680      	mov	r8, r0
    8d3c:	f7f7 fcac 	bl	698 <__aeabi_fcmpeq>
    8d40:	2800      	cmp	r0, #0
    8d42:	d108      	bne.n	8d56 <PSP_CNFG_MQX_KERNEL_LOGGING+0xd56>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1731
				{
					*pfQw12x12ij -= *pfK12x6ik * *pfPPlus12x12kj;
    8d44:	6831      	ldr	r1, [r6, #0]
    8d46:	4640      	mov	r0, r8
    8d48:	f7f8 f824 	bl	d94 <__aeabi_fmul>
    8d4c:	1c01      	adds	r1, r0, #0
    8d4e:	6820      	ldr	r0, [r4, #0]
    8d50:	f7f8 f94a 	bl	fe8 <__aeabi_fsub>
    8d54:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1729

			// compute on and above diagonal matrix entry
			for (k = 0; k < 6; k++)
			{
				// check for non-zero values since P+ (6x12 scratch sub-matrix) is sparse
				if (*pfPPlus12x12kj != 0.0F)
    8d56:	6b29      	ldr	r1, [r5, #48]	; 0x30
    8d58:	4688      	mov	r8, r1
    8d5a:	1c08      	adds	r0, r1, #0
    8d5c:	2100      	movs	r1, #0
    8d5e:	f7f7 fc9b 	bl	698 <__aeabi_fcmpeq>
    8d62:	2800      	cmp	r0, #0
    8d64:	d108      	bne.n	8d78 <PSP_CNFG_MQX_KERNEL_LOGGING+0xd78>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1731
				{
					*pfQw12x12ij -= *pfK12x6ik * *pfPPlus12x12kj;
    8d66:	6871      	ldr	r1, [r6, #4]
    8d68:	4640      	mov	r0, r8
    8d6a:	f7f8 f813 	bl	d94 <__aeabi_fmul>
    8d6e:	1c01      	adds	r1, r0, #0
    8d70:	6820      	ldr	r0, [r4, #0]
    8d72:	f7f8 f939 	bl	fe8 <__aeabi_fsub>
    8d76:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1729

			// compute on and above diagonal matrix entry
			for (k = 0; k < 6; k++)
			{
				// check for non-zero values since P+ (6x12 scratch sub-matrix) is sparse
				if (*pfPPlus12x12kj != 0.0F)
    8d78:	6e2a      	ldr	r2, [r5, #96]	; 0x60
    8d7a:	2100      	movs	r1, #0
    8d7c:	1c10      	adds	r0, r2, #0
    8d7e:	4690      	mov	r8, r2
    8d80:	f7f7 fc8a 	bl	698 <__aeabi_fcmpeq>
    8d84:	2800      	cmp	r0, #0
    8d86:	d108      	bne.n	8d9a <PSP_CNFG_MQX_KERNEL_LOGGING+0xd9a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1731
				{
					*pfQw12x12ij -= *pfK12x6ik * *pfPPlus12x12kj;
    8d88:	68b1      	ldr	r1, [r6, #8]
    8d8a:	4640      	mov	r0, r8
    8d8c:	f7f8 f802 	bl	d94 <__aeabi_fmul>
    8d90:	1c01      	adds	r1, r0, #0
    8d92:	6820      	ldr	r0, [r4, #0]
    8d94:	f7f8 f928 	bl	fe8 <__aeabi_fsub>
    8d98:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1729

			// compute on and above diagonal matrix entry
			for (k = 0; k < 6; k++)
			{
				// check for non-zero values since P+ (6x12 scratch sub-matrix) is sparse
				if (*pfPPlus12x12kj != 0.0F)
    8d9a:	2390      	movs	r3, #144	; 0x90
    8d9c:	58eb      	ldr	r3, [r5, r3]
    8d9e:	2100      	movs	r1, #0
    8da0:	1c18      	adds	r0, r3, #0
    8da2:	4698      	mov	r8, r3
    8da4:	f7f7 fc78 	bl	698 <__aeabi_fcmpeq>
    8da8:	2800      	cmp	r0, #0
    8daa:	d108      	bne.n	8dbe <PSP_CNFG_MQX_KERNEL_LOGGING+0xdbe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1731
				{
					*pfQw12x12ij -= *pfK12x6ik * *pfPPlus12x12kj;
    8dac:	68f1      	ldr	r1, [r6, #12]
    8dae:	4640      	mov	r0, r8
    8db0:	f7f7 fff0 	bl	d94 <__aeabi_fmul>
    8db4:	1c01      	adds	r1, r0, #0
    8db6:	6820      	ldr	r0, [r4, #0]
    8db8:	f7f8 f916 	bl	fe8 <__aeabi_fsub>
    8dbc:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1729

			// compute on and above diagonal matrix entry
			for (k = 0; k < 6; k++)
			{
				// check for non-zero values since P+ (6x12 scratch sub-matrix) is sparse
				if (*pfPPlus12x12kj != 0.0F)
    8dbe:	4650      	mov	r0, sl
    8dc0:	5828      	ldr	r0, [r5, r0]
    8dc2:	2100      	movs	r1, #0
    8dc4:	4680      	mov	r8, r0
    8dc6:	f7f7 fc67 	bl	698 <__aeabi_fcmpeq>
    8dca:	2800      	cmp	r0, #0
    8dcc:	d108      	bne.n	8de0 <PSP_CNFG_MQX_KERNEL_LOGGING+0xde0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1731
				{
					*pfQw12x12ij -= *pfK12x6ik * *pfPPlus12x12kj;
    8dce:	6931      	ldr	r1, [r6, #16]
    8dd0:	4640      	mov	r0, r8
    8dd2:	f7f7 ffdf 	bl	d94 <__aeabi_fmul>
    8dd6:	1c01      	adds	r1, r0, #0
    8dd8:	6820      	ldr	r0, [r4, #0]
    8dda:	f7f8 f905 	bl	fe8 <__aeabi_fsub>
    8dde:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1729

			// compute on and above diagonal matrix entry
			for (k = 0; k < 6; k++)
			{
				// check for non-zero values since P+ (6x12 scratch sub-matrix) is sparse
				if (*pfPPlus12x12kj != 0.0F)
    8de0:	4649      	mov	r1, r9
    8de2:	586d      	ldr	r5, [r5, r1]
    8de4:	2100      	movs	r1, #0
    8de6:	1c28      	adds	r0, r5, #0
    8de8:	f7f7 fc56 	bl	698 <__aeabi_fcmpeq>
    8dec:	2800      	cmp	r0, #0
    8dee:	d108      	bne.n	8e02 <PSP_CNFG_MQX_KERNEL_LOGGING+0xe02>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1731
				{
					*pfQw12x12ij -= *pfK12x6ik * *pfPPlus12x12kj;
    8df0:	6971      	ldr	r1, [r6, #20]
    8df2:	1c28      	adds	r0, r5, #0
    8df4:	f7f7 ffce 	bl	d94 <__aeabi_fmul>
    8df8:	1c01      	adds	r1, r0, #0
    8dfa:	6820      	ldr	r0, [r4, #0]
    8dfc:	f7f8 f8f4 	bl	fe8 <__aeabi_fsub>
    8e00:	6020      	str	r0, [r4, #0]
    8e02:	3701      	adds	r7, #1
    8e04:	b2ff      	uxtb	r7, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1717
	for (i = 0; i < 12; i++)
	{
		// initialize pfQw12x12ij for current i, j=i
		pfQw12x12ij = pthisSV->fQw12x12[i] + i;

		for (j = i; j < 12; j++)
    8e06:	b27d      	sxtb	r5, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1741
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfQw12x12ij for next iteration of j
			pfQw12x12ij++;
    8e08:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1717
	for (i = 0; i < 12; i++)
	{
		// initialize pfQw12x12ij for current i, j=i
		pfQw12x12ij = pthisSV->fQw12x12[i] + i;

		for (j = i; j < 12; j++)
    8e0a:	2d0b      	cmp	r5, #11
    8e0c:	dd91      	ble.n	8d32 <PSP_CNFG_MQX_KERNEL_LOGGING+0xd32>
    8e0e:	9b03      	ldr	r3, [sp, #12]
    8e10:	9c06      	ldr	r4, [sp, #24]
    8e12:	3301      	adds	r3, #1
    8e14:	b2db      	uxtb	r3, r3
    8e16:	3434      	adds	r4, #52	; 0x34
    8e18:	9303      	str	r3, [sp, #12]
    8e1a:	9406      	str	r4, [sp, #24]
    8e1c:	3618      	adds	r6, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1712

	// compute P+ = (I12 - K * C) * Qw = Qw - K * (C * Qw) = Qw - K * P+ (6x12 sub-matrix)
	// storing result P+ in Qw and over-writing Qw which is OK since Qw is later computed from P+
	// where working array P+ (6x12 sub-matrix) is sparse but K is not sparse
	// only on and above diagonal terms of P+ are computed since P+ is symmetric
	for (i = 0; i < 12; i++)
    8e1e:	2b0c      	cmp	r3, #12
    8e20:	d185      	bne.n	8d2e <PSP_CNFG_MQX_KERNEL_LOGGING+0xd2e>
    8e22:	9f04      	ldr	r7, [sp, #16]
    8e24:	208e      	movs	r0, #142	; 0x8e
    8e26:	0040      	lsls	r0, r0, #1
    8e28:	46bb      	mov	fp, r7
    8e2a:	1c06      	adds	r6, r0, #0
    8e2c:	2100      	movs	r1, #0
    8e2e:	445e      	add	r6, fp
    8e30:	1c0d      	adds	r5, r1, #0
    8e32:	468c      	mov	ip, r1
    8e34:	46b0      	mov	r8, r6
    8e36:	22d7      	movs	r2, #215	; 0xd7
    8e38:	0092      	lsls	r2, r2, #2
    8e3a:	1c13      	adds	r3, r2, #0
    8e3c:	4443      	add	r3, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1756
		// initialize pfPPlus12x12ij and pfQw12x12ij for current i, j=i
		pfPPlus12x12ij = pthisSV->fPPlus12x12[i] + i;
		pfQw12x12ij = pthisSV->fQw12x12[i] + i;

		// copy the on-diagonal elements and increment pointers to enter loop at j=i+1
		*(pfPPlus12x12ij++) = *(pfQw12x12ij++);
    8e3e:	681a      	ldr	r2, [r3, #0]
    8e40:	4643      	mov	r3, r8
    8e42:	3b04      	subs	r3, #4
    8e44:	601a      	str	r2, [r3, #0]
    8e46:	4663      	mov	r3, ip
    8e48:	3301      	adds	r3, #1
    8e4a:	b2db      	uxtb	r3, r3
    8e4c:	469c      	mov	ip, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1759

		// loop over above diagonal columns j copying to below-diagonal elements
		for (j = i + 1; j < 12; j++)
    8e4e:	b25b      	sxtb	r3, r3
    8e50:	2b0c      	cmp	r3, #12
    8e52:	d100      	bne.n	8e56 <PSP_CNFG_MQX_KERNEL_LOGGING+0xe56>
    8e54:	e0ba      	b.n	8fcc <PSP_CNFG_MQX_KERNEL_LOGGING+0xfcc>
    8e56:	20d8      	movs	r0, #216	; 0xd8
    8e58:	0080      	lsls	r0, r0, #2
    8e5a:	1c04      	adds	r4, r0, #0
    8e5c:	4444      	add	r4, r8
    8e5e:	4640      	mov	r0, r8
    8e60:	4662      	mov	r2, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1761 (discriminator 2)
		{
			*(pfPPlus12x12ij++)= pthisSV->fPPlus12x12[j][i] = *(pfQw12x12ij++);
    8e62:	005e      	lsls	r6, r3, #1
    8e64:	18f3      	adds	r3, r6, r3
    8e66:	009b      	lsls	r3, r3, #2
    8e68:	195b      	adds	r3, r3, r5
    8e6a:	cc02      	ldmia	r4!, {r1}
    8e6c:	3346      	adds	r3, #70	; 0x46
    8e6e:	3201      	adds	r2, #1
    8e70:	009b      	lsls	r3, r3, #2
    8e72:	b2d2      	uxtb	r2, r2
    8e74:	51d9      	str	r1, [r3, r7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1759 (discriminator 2)

		// copy the on-diagonal elements and increment pointers to enter loop at j=i+1
		*(pfPPlus12x12ij++) = *(pfQw12x12ij++);

		// loop over above diagonal columns j copying to below-diagonal elements
		for (j = i + 1; j < 12; j++)
    8e76:	b253      	sxtb	r3, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1761 (discriminator 2)
		{
			*(pfPPlus12x12ij++)= pthisSV->fPPlus12x12[j][i] = *(pfQw12x12ij++);
    8e78:	c002      	stmia	r0!, {r1}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1759 (discriminator 2)

		// copy the on-diagonal elements and increment pointers to enter loop at j=i+1
		*(pfPPlus12x12ij++) = *(pfQw12x12ij++);

		// loop over above diagonal columns j copying to below-diagonal elements
		for (j = i + 1; j < 12; j++)
    8e7a:	2b0c      	cmp	r3, #12
    8e7c:	d1f1      	bne.n	8e62 <PSP_CNFG_MQX_KERNEL_LOGGING+0xe62>
    8e7e:	2034      	movs	r0, #52	; 0x34
    8e80:	3501      	adds	r5, #1
    8e82:	4480      	add	r8, r0
    8e84:	e7d7      	b.n	8e36 <PSP_CNFG_MQX_KERNEL_LOGGING+0xe36>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8e86:	6b29      	ldr	r1, [r5, #48]	; 0x30
    8e88:	1c30      	adds	r0, r6, #0
    8e8a:	f7f7 ff83 	bl	d94 <__aeabi_fmul>
    8e8e:	2100      	movs	r1, #0
    8e90:	f7f7 fc30 	bl	6f4 <__aeabi_fadd>
    8e94:	4680      	mov	r8, r0
    8e96:	6020      	str	r0, [r4, #0]
    8e98:	f7fd fb63 	bl	6562 <fRun_9DOF_GBY_KALMAN+0x91a>
    8e9c:	4658      	mov	r0, fp
    8e9e:	58c7      	ldr	r7, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1208
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    8ea0:	23fc      	movs	r3, #252	; 0xfc
    8ea2:	00db      	lsls	r3, r3, #3
    8ea4:	58c5      	ldr	r5, [r0, r3]
    8ea6:	2180      	movs	r1, #128	; 0x80
    8ea8:	0609      	lsls	r1, r1, #24
    8eaa:	186a      	adds	r2, r5, r1
    8eac:	23ec      	movs	r3, #236	; 0xec
    8eae:	50c2      	str	r2, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    8eb0:	21fc      	movs	r1, #252	; 0xfc
    8eb2:	23bc      	movs	r3, #188	; 0xbc
    8eb4:	58c0      	ldr	r0, [r0, r3]
    8eb6:	0589      	lsls	r1, r1, #22
    8eb8:	f7f7 ff6c 	bl	d94 <__aeabi_fmul>
    8ebc:	465a      	mov	r2, fp
    8ebe:	23ac      	movs	r3, #172	; 0xac
    8ec0:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    8ec2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8ec4:	68d9      	ldr	r1, [r3, #12]
    8ec6:	f7f7 fc15 	bl	6f4 <__aeabi_fadd>
    8eca:	1c01      	adds	r1, r0, #0
    8ecc:	1c28      	adds	r0, r5, #0
    8ece:	f7f7 fc11 	bl	6f4 <__aeabi_fadd>
    8ed2:	4659      	mov	r1, fp
    8ed4:	23d4      	movs	r3, #212	; 0xd4
    8ed6:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    8ed8:	4b3a      	ldr	r3, [pc, #232]	; (8fc4 <PSP_CNFG_MQX_KERNEL_LOGGING+0xfc4>)
    8eda:	1c38      	adds	r0, r7, #0
    8edc:	58c9      	ldr	r1, [r1, r3]
    8ede:	f7f7 ff59 	bl	d94 <__aeabi_fmul>
    8ee2:	1c21      	adds	r1, r4, #0
    8ee4:	1c06      	adds	r6, r0, #0
    8ee6:	1c28      	adds	r0, r5, #0
    8ee8:	f7f7 ff54 	bl	d94 <__aeabi_fmul>
    8eec:	1c01      	adds	r1, r0, #0
    8eee:	1c30      	adds	r0, r6, #0
    8ef0:	f7f7 fc00 	bl	6f4 <__aeabi_fadd>
    8ef4:	465a      	mov	r2, fp
    8ef6:	23f8      	movs	r3, #248	; 0xf8
    8ef8:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    8efa:	9b05      	ldr	r3, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    8efc:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    8efe:	6a58      	ldr	r0, [r3, #36]	; 0x24
    8f00:	f7f8 f872 	bl	fe8 <__aeabi_fsub>
    8f04:	4659      	mov	r1, fp
    8f06:	23e0      	movs	r3, #224	; 0xe0
    8f08:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1208
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    8f0a:	4b2f      	ldr	r3, [pc, #188]	; (8fc8 <PSP_CNFG_MQX_KERNEL_LOGGING+0xfc8>)
    8f0c:	58cd      	ldr	r5, [r1, r3]
    8f0e:	2380      	movs	r3, #128	; 0x80
    8f10:	061b      	lsls	r3, r3, #24
    8f12:	18ea      	adds	r2, r5, r3
    8f14:	23f0      	movs	r3, #240	; 0xf0
    8f16:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    8f18:	23c0      	movs	r3, #192	; 0xc0
    8f1a:	58c8      	ldr	r0, [r1, r3]
    8f1c:	21fc      	movs	r1, #252	; 0xfc
    8f1e:	0589      	lsls	r1, r1, #22
    8f20:	f7f7 ff38 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    8f24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    8f26:	23b0      	movs	r3, #176	; 0xb0
    8f28:	4659      	mov	r1, fp
    8f2a:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    8f2c:	6911      	ldr	r1, [r2, #16]
    8f2e:	f7f7 fbe1 	bl	6f4 <__aeabi_fadd>
    8f32:	1c01      	adds	r1, r0, #0
    8f34:	1c28      	adds	r0, r5, #0
    8f36:	f7f7 fbdd 	bl	6f4 <__aeabi_fadd>
    8f3a:	4659      	mov	r1, fp
    8f3c:	23d8      	movs	r3, #216	; 0xd8
    8f3e:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    8f40:	23fd      	movs	r3, #253	; 0xfd
    8f42:	00db      	lsls	r3, r3, #3
    8f44:	58c9      	ldr	r1, [r1, r3]
    8f46:	1c38      	adds	r0, r7, #0
    8f48:	f7f7 ff24 	bl	d94 <__aeabi_fmul>
    8f4c:	1c21      	adds	r1, r4, #0
    8f4e:	1c06      	adds	r6, r0, #0
    8f50:	1c28      	adds	r0, r5, #0
    8f52:	f7f7 ff1f 	bl	d94 <__aeabi_fmul>
    8f56:	1c01      	adds	r1, r0, #0
    8f58:	1c30      	adds	r0, r6, #0
    8f5a:	f7f7 fbcb 	bl	6f4 <__aeabi_fadd>
    8f5e:	465a      	mov	r2, fp
    8f60:	23fc      	movs	r3, #252	; 0xfc
    8f62:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    8f64:	9b05      	ldr	r3, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    8f66:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    8f68:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8f6a:	f7f8 f83d 	bl	fe8 <__aeabi_fsub>
    8f6e:	4659      	mov	r1, fp
    8f70:	23e4      	movs	r3, #228	; 0xe4
    8f72:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1208
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    8f74:	23ff      	movs	r3, #255	; 0xff
    8f76:	00db      	lsls	r3, r3, #3
    8f78:	58cd      	ldr	r5, [r1, r3]
    8f7a:	2380      	movs	r3, #128	; 0x80
    8f7c:	061b      	lsls	r3, r3, #24
    8f7e:	18ea      	adds	r2, r5, r3
    8f80:	23f4      	movs	r3, #244	; 0xf4
    8f82:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    8f84:	23c4      	movs	r3, #196	; 0xc4
    8f86:	58c8      	ldr	r0, [r1, r3]
    8f88:	21fc      	movs	r1, #252	; 0xfc
    8f8a:	0589      	lsls	r1, r1, #22
    8f8c:	f7f7 ff02 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    8f90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    8f92:	4659      	mov	r1, fp
    8f94:	23b4      	movs	r3, #180	; 0xb4
    8f96:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    8f98:	6951      	ldr	r1, [r2, #20]
    8f9a:	f7f7 fbab 	bl	6f4 <__aeabi_fadd>
    8f9e:	f7fc ffb3 	bl	5f08 <fRun_9DOF_GBY_KALMAN+0x2c0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1693
					if (*pfC6x12ik == 1.0F)
						*pfPPlus12x12ij += *pfQw12x12kj;
					else if (*pfC6x12ik == -1.0F)
						*pfPPlus12x12ij -= *pfQw12x12kj;
					else
						*pfPPlus12x12ij += *pfC6x12ik * *pfQw12x12kj;
    8fa2:	4641      	mov	r1, r8
    8fa4:	1c30      	adds	r0, r6, #0
    8fa6:	f7f7 fef5 	bl	d94 <__aeabi_fmul>
    8faa:	464a      	mov	r2, r9
    8fac:	1c01      	adds	r1, r0, #0
    8fae:	6810      	ldr	r0, [r2, #0]
    8fb0:	f7f7 fba0 	bl	6f4 <__aeabi_fadd>
    8fb4:	464b      	mov	r3, r9
    8fb6:	6018      	str	r0, [r3, #0]
    8fb8:	e670      	b.n	8c9c <PSP_CNFG_MQX_KERNEL_LOGGING+0xc9c>
    8fba:	46c0      	nop			; (mov r8, r8)
    8fbc:	00000416 	.word	0x00000416
    8fc0:	bf800000 	.word	0xbf800000
    8fc4:	000007dc 	.word	0x000007dc
    8fc8:	000007ec 	.word	0x000007ec
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1776
	// zero the matrix Qw
	for (i = 0; i < 12; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fQw12x12[i][j] = 0.0F;
    8fcc:	4afe      	ldr	r2, [pc, #1016]	; (93c8 <PSP_CNFG_MQX_KERNEL_LOGGING+0x13c8>)
    8fce:	2300      	movs	r3, #0
    8fd0:	50bb      	str	r3, [r7, r2]
    8fd2:	49fe      	ldr	r1, [pc, #1016]	; (93cc <PSP_CNFG_MQX_KERNEL_LOGGING+0x13cc>)
    8fd4:	2290      	movs	r2, #144	; 0x90
    8fd6:	00d2      	lsls	r2, r2, #3
    8fd8:	50bb      	str	r3, [r7, r2]
    8fda:	4689      	mov	r9, r1
    8fdc:	1c3a      	adds	r2, r7, #0
    8fde:	444a      	add	r2, r9
    8fe0:	6013      	str	r3, [r2, #0]
    8fe2:	2291      	movs	r2, #145	; 0x91
    8fe4:	00d2      	lsls	r2, r2, #3
    8fe6:	50bb      	str	r3, [r7, r2]
    8fe8:	4af9      	ldr	r2, [pc, #996]	; (93d0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x13d0>)
    8fea:	46bb      	mov	fp, r7
    8fec:	50bb      	str	r3, [r7, r2]
    8fee:	2292      	movs	r2, #146	; 0x92
    8ff0:	00d2      	lsls	r2, r2, #3
    8ff2:	50bb      	str	r3, [r7, r2]
    8ff4:	4af7      	ldr	r2, [pc, #988]	; (93d4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x13d4>)
    8ff6:	1c3c      	adds	r4, r7, #0
    8ff8:	50bb      	str	r3, [r7, r2]
    8ffa:	2293      	movs	r2, #147	; 0x93
    8ffc:	00d2      	lsls	r2, r2, #3
    8ffe:	50bb      	str	r3, [r7, r2]
    9000:	4af5      	ldr	r2, [pc, #980]	; (93d8 <PSP_CNFG_MQX_KERNEL_LOGGING+0x13d8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1784

	// update the covariance matrix components
	for (i = 0; i < 3; i++)
	{
		// Qw[th-th-] = Qw[0-2][0-2] = E[th-(th-)^T] = Q[th+th+] + deltat^2 * (Q[b+b+] + (Qwb + QvG) * I)
		pthisSV->fQw12x12[i][i] = pthisSV->fPPlus12x12[i][i] + pthisSV->fdeltatsq * (pthisSV->fPPlus12x12[i + 3][i + 3] + pthisSV->fQwbplusQvG);
    9002:	4659      	mov	r1, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1776
	// zero the matrix Qw
	for (i = 0; i < 12; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fQw12x12[i][j] = 0.0F;
    9004:	50bb      	str	r3, [r7, r2]
    9006:	2294      	movs	r2, #148	; 0x94
    9008:	00d2      	lsls	r2, r2, #3
    900a:	50bb      	str	r3, [r7, r2]
    900c:	4af3      	ldr	r2, [pc, #972]	; (93dc <PSP_CNFG_MQX_KERNEL_LOGGING+0x13dc>)
    900e:	2080      	movs	r0, #128	; 0x80
    9010:	50bb      	str	r3, [r7, r2]
    9012:	2295      	movs	r2, #149	; 0x95
    9014:	00d2      	lsls	r2, r2, #3
    9016:	50bb      	str	r3, [r7, r2]
    9018:	2296      	movs	r2, #150	; 0x96
    901a:	00d2      	lsls	r2, r2, #3
    901c:	50bb      	str	r3, [r7, r2]
    901e:	4af0      	ldr	r2, [pc, #960]	; (93e0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x13e0>)
    9020:	0600      	lsls	r0, r0, #24
    9022:	50bb      	str	r3, [r7, r2]
    9024:	4aef      	ldr	r2, [pc, #956]	; (93e4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x13e4>)
    9026:	50bb      	str	r3, [r7, r2]
    9028:	2298      	movs	r2, #152	; 0x98
    902a:	00d2      	lsls	r2, r2, #3
    902c:	50bb      	str	r3, [r7, r2]
    902e:	4aee      	ldr	r2, [pc, #952]	; (93e8 <PSP_CNFG_MQX_KERNEL_LOGGING+0x13e8>)
    9030:	50bb      	str	r3, [r7, r2]
    9032:	2299      	movs	r2, #153	; 0x99
    9034:	00d2      	lsls	r2, r2, #3
    9036:	50bb      	str	r3, [r7, r2]
    9038:	4aec      	ldr	r2, [pc, #944]	; (93ec <PSP_CNFG_MQX_KERNEL_LOGGING+0x13ec>)
    903a:	50bb      	str	r3, [r7, r2]
    903c:	229a      	movs	r2, #154	; 0x9a
    903e:	00d2      	lsls	r2, r2, #3
    9040:	50bb      	str	r3, [r7, r2]
    9042:	4aeb      	ldr	r2, [pc, #940]	; (93f0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x13f0>)
    9044:	50bb      	str	r3, [r7, r2]
    9046:	229b      	movs	r2, #155	; 0x9b
    9048:	00d2      	lsls	r2, r2, #3
    904a:	50bb      	str	r3, [r7, r2]
    904c:	4ae9      	ldr	r2, [pc, #932]	; (93f4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x13f4>)
    904e:	50bb      	str	r3, [r7, r2]
    9050:	4ae9      	ldr	r2, [pc, #932]	; (93f8 <PSP_CNFG_MQX_KERNEL_LOGGING+0x13f8>)
    9052:	50bb      	str	r3, [r7, r2]
    9054:	229d      	movs	r2, #157	; 0x9d
    9056:	00d2      	lsls	r2, r2, #3
    9058:	50bb      	str	r3, [r7, r2]
    905a:	229e      	movs	r2, #158	; 0x9e
    905c:	00d2      	lsls	r2, r2, #3
    905e:	50bb      	str	r3, [r7, r2]
    9060:	4ae6      	ldr	r2, [pc, #920]	; (93fc <PSP_CNFG_MQX_KERNEL_LOGGING+0x13fc>)
    9062:	50bb      	str	r3, [r7, r2]
    9064:	229f      	movs	r2, #159	; 0x9f
    9066:	00d2      	lsls	r2, r2, #3
    9068:	50bb      	str	r3, [r7, r2]
    906a:	4ae5      	ldr	r2, [pc, #916]	; (9400 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1400>)
    906c:	50bb      	str	r3, [r7, r2]
    906e:	22a0      	movs	r2, #160	; 0xa0
    9070:	00d2      	lsls	r2, r2, #3
    9072:	50bb      	str	r3, [r7, r2]
    9074:	4ae3      	ldr	r2, [pc, #908]	; (9404 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1404>)
    9076:	50bb      	str	r3, [r7, r2]
    9078:	4ae3      	ldr	r2, [pc, #908]	; (9408 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1408>)
    907a:	50bb      	str	r3, [r7, r2]
    907c:	22a2      	movs	r2, #162	; 0xa2
    907e:	00d2      	lsls	r2, r2, #3
    9080:	50bb      	str	r3, [r7, r2]
    9082:	22a3      	movs	r2, #163	; 0xa3
    9084:	00d2      	lsls	r2, r2, #3
    9086:	50bb      	str	r3, [r7, r2]
    9088:	4ae0      	ldr	r2, [pc, #896]	; (940c <PSP_CNFG_MQX_KERNEL_LOGGING+0x140c>)
    908a:	50bb      	str	r3, [r7, r2]
    908c:	22a4      	movs	r2, #164	; 0xa4
    908e:	00d2      	lsls	r2, r2, #3
    9090:	50bb      	str	r3, [r7, r2]
    9092:	4adf      	ldr	r2, [pc, #892]	; (9410 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1410>)
    9094:	50bb      	str	r3, [r7, r2]
    9096:	22a5      	movs	r2, #165	; 0xa5
    9098:	00d2      	lsls	r2, r2, #3
    909a:	50bb      	str	r3, [r7, r2]
    909c:	4add      	ldr	r2, [pc, #884]	; (9414 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1414>)
    909e:	50bb      	str	r3, [r7, r2]
    90a0:	22a6      	movs	r2, #166	; 0xa6
    90a2:	00d2      	lsls	r2, r2, #3
    90a4:	50bb      	str	r3, [r7, r2]
    90a6:	4adc      	ldr	r2, [pc, #880]	; (9418 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1418>)
    90a8:	50bb      	str	r3, [r7, r2]
    90aa:	22a7      	movs	r2, #167	; 0xa7
    90ac:	00d2      	lsls	r2, r2, #3
    90ae:	50bb      	str	r3, [r7, r2]
    90b0:	22a8      	movs	r2, #168	; 0xa8
    90b2:	00d2      	lsls	r2, r2, #3
    90b4:	50bb      	str	r3, [r7, r2]
    90b6:	4ad9      	ldr	r2, [pc, #868]	; (941c <PSP_CNFG_MQX_KERNEL_LOGGING+0x141c>)
    90b8:	50bb      	str	r3, [r7, r2]
    90ba:	4ad9      	ldr	r2, [pc, #868]	; (9420 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1420>)
    90bc:	50bb      	str	r3, [r7, r2]
    90be:	22aa      	movs	r2, #170	; 0xaa
    90c0:	00d2      	lsls	r2, r2, #3
    90c2:	50bb      	str	r3, [r7, r2]
    90c4:	4ad7      	ldr	r2, [pc, #860]	; (9424 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1424>)
    90c6:	50bb      	str	r3, [r7, r2]
    90c8:	22ab      	movs	r2, #171	; 0xab
    90ca:	00d2      	lsls	r2, r2, #3
    90cc:	50bb      	str	r3, [r7, r2]
    90ce:	4ad6      	ldr	r2, [pc, #856]	; (9428 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1428>)
    90d0:	50bb      	str	r3, [r7, r2]
    90d2:	22ac      	movs	r2, #172	; 0xac
    90d4:	00d2      	lsls	r2, r2, #3
    90d6:	50bb      	str	r3, [r7, r2]
    90d8:	4ad4      	ldr	r2, [pc, #848]	; (942c <PSP_CNFG_MQX_KERNEL_LOGGING+0x142c>)
    90da:	50bb      	str	r3, [r7, r2]
    90dc:	22ad      	movs	r2, #173	; 0xad
    90de:	00d2      	lsls	r2, r2, #3
    90e0:	50bb      	str	r3, [r7, r2]
    90e2:	4ad3      	ldr	r2, [pc, #844]	; (9430 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1430>)
    90e4:	50bb      	str	r3, [r7, r2]
    90e6:	4ad3      	ldr	r2, [pc, #844]	; (9434 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1434>)
    90e8:	50bb      	str	r3, [r7, r2]
    90ea:	22af      	movs	r2, #175	; 0xaf
    90ec:	00d2      	lsls	r2, r2, #3
    90ee:	50bb      	str	r3, [r7, r2]
    90f0:	22b0      	movs	r2, #176	; 0xb0
    90f2:	00d2      	lsls	r2, r2, #3
    90f4:	50bb      	str	r3, [r7, r2]
    90f6:	4ad0      	ldr	r2, [pc, #832]	; (9438 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1438>)
    90f8:	50bb      	str	r3, [r7, r2]
    90fa:	22b1      	movs	r2, #177	; 0xb1
    90fc:	00d2      	lsls	r2, r2, #3
    90fe:	50bb      	str	r3, [r7, r2]
    9100:	4ace      	ldr	r2, [pc, #824]	; (943c <PSP_CNFG_MQX_KERNEL_LOGGING+0x143c>)
    9102:	50bb      	str	r3, [r7, r2]
    9104:	22b2      	movs	r2, #178	; 0xb2
    9106:	00d2      	lsls	r2, r2, #3
    9108:	50bb      	str	r3, [r7, r2]
    910a:	4acd      	ldr	r2, [pc, #820]	; (9440 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1440>)
    910c:	50bb      	str	r3, [r7, r2]
    910e:	22b3      	movs	r2, #179	; 0xb3
    9110:	00d2      	lsls	r2, r2, #3
    9112:	50bb      	str	r3, [r7, r2]
    9114:	4acb      	ldr	r2, [pc, #812]	; (9444 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1444>)
    9116:	50bb      	str	r3, [r7, r2]
    9118:	22b4      	movs	r2, #180	; 0xb4
    911a:	00d2      	lsls	r2, r2, #3
    911c:	50bb      	str	r3, [r7, r2]
    911e:	4aca      	ldr	r2, [pc, #808]	; (9448 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1448>)
    9120:	50bb      	str	r3, [r7, r2]
    9122:	22b5      	movs	r2, #181	; 0xb5
    9124:	00d2      	lsls	r2, r2, #3
    9126:	50bb      	str	r3, [r7, r2]
    9128:	4ac8      	ldr	r2, [pc, #800]	; (944c <PSP_CNFG_MQX_KERNEL_LOGGING+0x144c>)
    912a:	50bb      	str	r3, [r7, r2]
    912c:	4ac8      	ldr	r2, [pc, #800]	; (9450 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1450>)
    912e:	50bb      	str	r3, [r7, r2]
    9130:	22b7      	movs	r2, #183	; 0xb7
    9132:	00d2      	lsls	r2, r2, #3
    9134:	50bb      	str	r3, [r7, r2]
    9136:	4ac7      	ldr	r2, [pc, #796]	; (9454 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1454>)
    9138:	50bb      	str	r3, [r7, r2]
    913a:	22b8      	movs	r2, #184	; 0xb8
    913c:	00d2      	lsls	r2, r2, #3
    913e:	50bb      	str	r3, [r7, r2]
    9140:	4ac5      	ldr	r2, [pc, #788]	; (9458 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1458>)
    9142:	50bb      	str	r3, [r7, r2]
    9144:	22b9      	movs	r2, #185	; 0xb9
    9146:	00d2      	lsls	r2, r2, #3
    9148:	50bb      	str	r3, [r7, r2]
    914a:	4ac4      	ldr	r2, [pc, #784]	; (945c <PSP_CNFG_MQX_KERNEL_LOGGING+0x145c>)
    914c:	50bb      	str	r3, [r7, r2]
    914e:	22ba      	movs	r2, #186	; 0xba
    9150:	00d2      	lsls	r2, r2, #3
    9152:	50bb      	str	r3, [r7, r2]
    9154:	4ac2      	ldr	r2, [pc, #776]	; (9460 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1460>)
    9156:	50bb      	str	r3, [r7, r2]
    9158:	22bb      	movs	r2, #187	; 0xbb
    915a:	00d2      	lsls	r2, r2, #3
    915c:	50bb      	str	r3, [r7, r2]
    915e:	4ac1      	ldr	r2, [pc, #772]	; (9464 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1464>)
    9160:	50bb      	str	r3, [r7, r2]
    9162:	22bc      	movs	r2, #188	; 0xbc
    9164:	00d2      	lsls	r2, r2, #3
    9166:	50bb      	str	r3, [r7, r2]
    9168:	22bd      	movs	r2, #189	; 0xbd
    916a:	00d2      	lsls	r2, r2, #3
    916c:	50bb      	str	r3, [r7, r2]
    916e:	4abe      	ldr	r2, [pc, #760]	; (9468 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1468>)
    9170:	50bb      	str	r3, [r7, r2]
    9172:	22be      	movs	r2, #190	; 0xbe
    9174:	00d2      	lsls	r2, r2, #3
    9176:	50bb      	str	r3, [r7, r2]
    9178:	4abc      	ldr	r2, [pc, #752]	; (946c <PSP_CNFG_MQX_KERNEL_LOGGING+0x146c>)
    917a:	50bb      	str	r3, [r7, r2]
    917c:	22bf      	movs	r2, #191	; 0xbf
    917e:	00d2      	lsls	r2, r2, #3
    9180:	50bb      	str	r3, [r7, r2]
    9182:	4abb      	ldr	r2, [pc, #748]	; (9470 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1470>)
    9184:	50bb      	str	r3, [r7, r2]
    9186:	22c0      	movs	r2, #192	; 0xc0
    9188:	00d2      	lsls	r2, r2, #3
    918a:	50bb      	str	r3, [r7, r2]
    918c:	4ab9      	ldr	r2, [pc, #740]	; (9474 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1474>)
    918e:	50bb      	str	r3, [r7, r2]
    9190:	22c1      	movs	r2, #193	; 0xc1
    9192:	00d2      	lsls	r2, r2, #3
    9194:	50bb      	str	r3, [r7, r2]
    9196:	4ab8      	ldr	r2, [pc, #736]	; (9478 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1478>)
    9198:	50bb      	str	r3, [r7, r2]
    919a:	22c2      	movs	r2, #194	; 0xc2
    919c:	00d2      	lsls	r2, r2, #3
    919e:	50bb      	str	r3, [r7, r2]
    91a0:	4ab6      	ldr	r2, [pc, #728]	; (947c <PSP_CNFG_MQX_KERNEL_LOGGING+0x147c>)
    91a2:	50bb      	str	r3, [r7, r2]
    91a4:	4ab6      	ldr	r2, [pc, #728]	; (9480 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1480>)
    91a6:	50bb      	str	r3, [r7, r2]
    91a8:	22c4      	movs	r2, #196	; 0xc4
    91aa:	00d2      	lsls	r2, r2, #3
    91ac:	50bb      	str	r3, [r7, r2]
    91ae:	4ab5      	ldr	r2, [pc, #724]	; (9484 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1484>)
    91b0:	50bb      	str	r3, [r7, r2]
    91b2:	22c5      	movs	r2, #197	; 0xc5
    91b4:	00d2      	lsls	r2, r2, #3
    91b6:	50bb      	str	r3, [r7, r2]
    91b8:	4ab3      	ldr	r2, [pc, #716]	; (9488 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1488>)
    91ba:	50bb      	str	r3, [r7, r2]
    91bc:	22c6      	movs	r2, #198	; 0xc6
    91be:	00d2      	lsls	r2, r2, #3
    91c0:	50bb      	str	r3, [r7, r2]
    91c2:	4ab2      	ldr	r2, [pc, #712]	; (948c <PSP_CNFG_MQX_KERNEL_LOGGING+0x148c>)
    91c4:	50bb      	str	r3, [r7, r2]
    91c6:	22c7      	movs	r2, #199	; 0xc7
    91c8:	00d2      	lsls	r2, r2, #3
    91ca:	50bb      	str	r3, [r7, r2]
    91cc:	4ab0      	ldr	r2, [pc, #704]	; (9490 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1490>)
    91ce:	50bb      	str	r3, [r7, r2]
    91d0:	22c8      	movs	r2, #200	; 0xc8
    91d2:	00d2      	lsls	r2, r2, #3
    91d4:	50bb      	str	r3, [r7, r2]
    91d6:	4aaf      	ldr	r2, [pc, #700]	; (9494 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1494>)
    91d8:	50bb      	str	r3, [r7, r2]
    91da:	22c9      	movs	r2, #201	; 0xc9
    91dc:	00d2      	lsls	r2, r2, #3
    91de:	50bb      	str	r3, [r7, r2]
    91e0:	22ca      	movs	r2, #202	; 0xca
    91e2:	00d2      	lsls	r2, r2, #3
    91e4:	50bb      	str	r3, [r7, r2]
    91e6:	4aac      	ldr	r2, [pc, #688]	; (9498 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1498>)
    91e8:	50bb      	str	r3, [r7, r2]
    91ea:	22cb      	movs	r2, #203	; 0xcb
    91ec:	00d2      	lsls	r2, r2, #3
    91ee:	50bb      	str	r3, [r7, r2]
    91f0:	4aaa      	ldr	r2, [pc, #680]	; (949c <PSP_CNFG_MQX_KERNEL_LOGGING+0x149c>)
    91f2:	50bb      	str	r3, [r7, r2]
    91f4:	22cc      	movs	r2, #204	; 0xcc
    91f6:	00d2      	lsls	r2, r2, #3
    91f8:	50bb      	str	r3, [r7, r2]
    91fa:	4aa9      	ldr	r2, [pc, #676]	; (94a0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x14a0>)
    91fc:	50bb      	str	r3, [r7, r2]
    91fe:	22cd      	movs	r2, #205	; 0xcd
    9200:	00d2      	lsls	r2, r2, #3
    9202:	50bb      	str	r3, [r7, r2]
    9204:	4aa7      	ldr	r2, [pc, #668]	; (94a4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x14a4>)
    9206:	50bb      	str	r3, [r7, r2]
    9208:	22ce      	movs	r2, #206	; 0xce
    920a:	00d2      	lsls	r2, r2, #3
    920c:	50bb      	str	r3, [r7, r2]
    920e:	4aa6      	ldr	r2, [pc, #664]	; (94a8 <PSP_CNFG_MQX_KERNEL_LOGGING+0x14a8>)
    9210:	50bb      	str	r3, [r7, r2]
    9212:	22cf      	movs	r2, #207	; 0xcf
    9214:	00d2      	lsls	r2, r2, #3
    9216:	50bb      	str	r3, [r7, r2]
    9218:	4aa4      	ldr	r2, [pc, #656]	; (94ac <PSP_CNFG_MQX_KERNEL_LOGGING+0x14ac>)
    921a:	50bb      	str	r3, [r7, r2]
    921c:	4aa4      	ldr	r2, [pc, #656]	; (94b0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x14b0>)
    921e:	50bb      	str	r3, [r7, r2]
    9220:	22d1      	movs	r2, #209	; 0xd1
    9222:	00d2      	lsls	r2, r2, #3
    9224:	50bb      	str	r3, [r7, r2]
    9226:	4aa3      	ldr	r2, [pc, #652]	; (94b4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x14b4>)
    9228:	50bb      	str	r3, [r7, r2]
    922a:	22d2      	movs	r2, #210	; 0xd2
    922c:	00d2      	lsls	r2, r2, #3
    922e:	50bb      	str	r3, [r7, r2]
    9230:	4aa1      	ldr	r2, [pc, #644]	; (94b8 <PSP_CNFG_MQX_KERNEL_LOGGING+0x14b8>)
    9232:	50bb      	str	r3, [r7, r2]
    9234:	22d3      	movs	r2, #211	; 0xd3
    9236:	00d2      	lsls	r2, r2, #3
    9238:	50bb      	str	r3, [r7, r2]
    923a:	4aa0      	ldr	r2, [pc, #640]	; (94bc <PSP_CNFG_MQX_KERNEL_LOGGING+0x14bc>)
    923c:	50bb      	str	r3, [r7, r2]
    923e:	22d4      	movs	r2, #212	; 0xd4
    9240:	00d2      	lsls	r2, r2, #3
    9242:	50bb      	str	r3, [r7, r2]
    9244:	4a9e      	ldr	r2, [pc, #632]	; (94c0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x14c0>)
    9246:	50bb      	str	r3, [r7, r2]
    9248:	22d5      	movs	r2, #213	; 0xd5
    924a:	00d2      	lsls	r2, r2, #3
    924c:	50bb      	str	r3, [r7, r2]
    924e:	4a9d      	ldr	r2, [pc, #628]	; (94c4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x14c4>)
    9250:	50bb      	str	r3, [r7, r2]
    9252:	22d6      	movs	r2, #214	; 0xd6
    9254:	00d2      	lsls	r2, r2, #3
    9256:	50bb      	str	r3, [r7, r2]
    9258:	4b9b      	ldr	r3, [pc, #620]	; (94c8 <PSP_CNFG_MQX_KERNEL_LOGGING+0x14c8>)
    925a:	58ff      	ldr	r7, [r7, r3]
    925c:	2383      	movs	r3, #131	; 0x83
    925e:	011b      	lsls	r3, r3, #4
    9260:	58e3      	ldr	r3, [r4, r3]
    9262:	4698      	mov	r8, r3
    9264:	4b99      	ldr	r3, [pc, #612]	; (94cc <PSP_CNFG_MQX_KERNEL_LOGGING+0x14cc>)
    9266:	58e6      	ldr	r6, [r4, r3]
    9268:	4b99      	ldr	r3, [pc, #612]	; (94d0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x14d0>)
    926a:	1836      	adds	r6, r6, r0
    926c:	58e5      	ldr	r5, [r4, r3]
    926e:	2382      	movs	r3, #130	; 0x82
    9270:	011b      	lsls	r3, r3, #4
    9272:	58e4      	ldr	r4, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1784

	// update the covariance matrix components
	for (i = 0; i < 3; i++)
	{
		// Qw[th-th-] = Qw[0-2][0-2] = E[th-(th-)^T] = Q[th+th+] + deltat^2 * (Q[b+b+] + (Qwb + QvG) * I)
		pthisSV->fQw12x12[i][i] = pthisSV->fPPlus12x12[i][i] + pthisSV->fdeltatsq * (pthisSV->fPPlus12x12[i + 3][i + 3] + pthisSV->fQwbplusQvG);
    9274:	23da      	movs	r3, #218	; 0xda
    9276:	005b      	lsls	r3, r3, #1
    9278:	58cb      	ldr	r3, [r1, r3]
    927a:	4641      	mov	r1, r8
    927c:	1c18      	adds	r0, r3, #0
    927e:	469a      	mov	sl, r3
    9280:	f7f7 fa38 	bl	6f4 <__aeabi_fadd>
    9284:	1c39      	adds	r1, r7, #0
    9286:	f7f7 fd85 	bl	d94 <__aeabi_fmul>
    928a:	238c      	movs	r3, #140	; 0x8c
    928c:	465a      	mov	r2, fp
    928e:	005b      	lsls	r3, r3, #1
    9290:	1c01      	adds	r1, r0, #0
    9292:	58d0      	ldr	r0, [r2, r3]
    9294:	f7f7 fa2e 	bl	6f4 <__aeabi_fadd>
    9298:	238f      	movs	r3, #143	; 0x8f
    929a:	00db      	lsls	r3, r3, #3
    929c:	4659      	mov	r1, fp
    929e:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1787

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw12x12[i + 3][i + 3] = pthisSV->fPPlus12x12[i + 3][i + 3] + FQWB_9DOF_GBY_KALMAN;
    92a0:	498c      	ldr	r1, [pc, #560]	; (94d4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x14d4>)
    92a2:	4650      	mov	r0, sl
    92a4:	f7f7 fa26 	bl	6f4 <__aeabi_fadd>
    92a8:	4b8b      	ldr	r3, [pc, #556]	; (94d8 <PSP_CNFG_MQX_KERNEL_LOGGING+0x14d8>)
    92aa:	465a      	mov	r2, fp
    92ac:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1790

		// Qw[th-b-] = Qw[0-2][3-5] = E[th-(b-)^T] = -deltat * (Q[b+b+] + Qwb * I) = -deltat * Qw[b-b-]
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = -pthisSV->fdeltat * pthisSV->fQw12x12[i + 3][i + 3];
    92ae:	1c31      	adds	r1, r6, #0
    92b0:	f7f7 fd70 	bl	d94 <__aeabi_fmul>
    92b4:	23a1      	movs	r3, #161	; 0xa1
    92b6:	00db      	lsls	r3, r3, #3
    92b8:	4659      	mov	r1, fp
    92ba:	50c8      	str	r0, [r1, r3]
    92bc:	465a      	mov	r2, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1793

		// Qw[a-a-] = Qw[6-8][6-8] = E[a-(a-)^T] = ca^2 * Q[a+a+] + Qwa * I
		pthisSV->fQw12x12[i + 6][i + 6] = pthisSV->fcasq * pthisSV->fPPlus12x12[i + 6][i + 6] + FQWA_9DOF_GBY_KALMAN;
    92be:	2394      	movs	r3, #148	; 0x94
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1790

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw12x12[i + 3][i + 3] = pthisSV->fPPlus12x12[i + 3][i + 3] + FQWB_9DOF_GBY_KALMAN;

		// Qw[th-b-] = Qw[0-2][3-5] = E[th-(b-)^T] = -deltat * (Q[b+b+] + Qwb * I) = -deltat * Qw[b-b-]
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = -pthisSV->fdeltat * pthisSV->fQw12x12[i + 3][i + 3];
    92c0:	444a      	add	r2, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1793

		// Qw[a-a-] = Qw[6-8][6-8] = E[a-(a-)^T] = ca^2 * Q[a+a+] + Qwa * I
		pthisSV->fQw12x12[i + 6][i + 6] = pthisSV->fcasq * pthisSV->fPPlus12x12[i + 6][i + 6] + FQWA_9DOF_GBY_KALMAN;
    92c2:	009b      	lsls	r3, r3, #2
    92c4:	58c9      	ldr	r1, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1790

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw12x12[i + 3][i + 3] = pthisSV->fPPlus12x12[i + 3][i + 3] + FQWB_9DOF_GBY_KALMAN;

		// Qw[th-b-] = Qw[0-2][3-5] = E[th-(b-)^T] = -deltat * (Q[b+b+] + Qwb * I) = -deltat * Qw[b-b-]
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = -pthisSV->fdeltat * pthisSV->fQw12x12[i + 3][i + 3];
    92c6:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1793

		// Qw[a-a-] = Qw[6-8][6-8] = E[a-(a-)^T] = ca^2 * Q[a+a+] + Qwa * I
		pthisSV->fQw12x12[i + 6][i + 6] = pthisSV->fcasq * pthisSV->fPPlus12x12[i + 6][i + 6] + FQWA_9DOF_GBY_KALMAN;
    92c8:	1c28      	adds	r0, r5, #0
    92ca:	f7f7 fd63 	bl	d94 <__aeabi_fmul>
    92ce:	4983      	ldr	r1, [pc, #524]	; (94dc <PSP_CNFG_MQX_KERNEL_LOGGING+0x14dc>)
    92d0:	f7f7 fa10 	bl	6f4 <__aeabi_fadd>
    92d4:	23b6      	movs	r3, #182	; 0xb6
    92d6:	00db      	lsls	r3, r3, #3
    92d8:	4659      	mov	r1, fp
    92da:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1796

		// Qw[d-d-] = Qw[9-11][9-11] = E[d-(d-)^T] = cd^2 * Q[d+d+] + Qwd * I
		pthisSV->fQw12x12[i + 9][i + 9] = pthisSV->fcdsq * pthisSV->fPPlus12x12[i + 9][i + 9] + FQWD_9DOF_GBY_KALMAN;
    92dc:	23bb      	movs	r3, #187	; 0xbb
    92de:	009b      	lsls	r3, r3, #2
    92e0:	58c9      	ldr	r1, [r1, r3]
    92e2:	1c20      	adds	r0, r4, #0
    92e4:	f7f7 fd56 	bl	d94 <__aeabi_fmul>
    92e8:	21fc      	movs	r1, #252	; 0xfc
    92ea:	0589      	lsls	r1, r1, #22
    92ec:	f7f7 fa02 	bl	6f4 <__aeabi_fadd>
    92f0:	4b7b      	ldr	r3, [pc, #492]	; (94e0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x14e0>)
    92f2:	465a      	mov	r2, fp
    92f4:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1784

	// update the covariance matrix components
	for (i = 0; i < 3; i++)
	{
		// Qw[th-th-] = Qw[0-2][0-2] = E[th-(th-)^T] = Q[th+th+] + deltat^2 * (Q[b+b+] + (Qwb + QvG) * I)
		pthisSV->fQw12x12[i][i] = pthisSV->fPPlus12x12[i][i] + pthisSV->fdeltatsq * (pthisSV->fPPlus12x12[i + 3][i + 3] + pthisSV->fQwbplusQvG);
    92f6:	23f4      	movs	r3, #244	; 0xf4
    92f8:	005b      	lsls	r3, r3, #1
    92fa:	58d3      	ldr	r3, [r2, r3]
    92fc:	4641      	mov	r1, r8
    92fe:	1c18      	adds	r0, r3, #0
    9300:	4699      	mov	r9, r3
    9302:	f7f7 f9f7 	bl	6f4 <__aeabi_fadd>
    9306:	1c39      	adds	r1, r7, #0
    9308:	f7f7 fd44 	bl	d94 <__aeabi_fmul>
    930c:	23a6      	movs	r3, #166	; 0xa6
    930e:	465a      	mov	r2, fp
    9310:	005b      	lsls	r3, r3, #1
    9312:	1c01      	adds	r1, r0, #0
    9314:	58d0      	ldr	r0, [r2, r3]
    9316:	f7f7 f9ed 	bl	6f4 <__aeabi_fadd>
    931a:	4b72      	ldr	r3, [pc, #456]	; (94e4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x14e4>)
    931c:	4659      	mov	r1, fp
    931e:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1787

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw12x12[i + 3][i + 3] = pthisSV->fPPlus12x12[i + 3][i + 3] + FQWB_9DOF_GBY_KALMAN;
    9320:	4648      	mov	r0, r9
    9322:	496c      	ldr	r1, [pc, #432]	; (94d4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x14d4>)
    9324:	f7f7 f9e6 	bl	6f4 <__aeabi_fadd>
    9328:	23a9      	movs	r3, #169	; 0xa9
    932a:	465a      	mov	r2, fp
    932c:	00db      	lsls	r3, r3, #3
    932e:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1790

		// Qw[th-b-] = Qw[0-2][3-5] = E[th-(b-)^T] = -deltat * (Q[b+b+] + Qwb * I) = -deltat * Qw[b-b-]
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = -pthisSV->fdeltat * pthisSV->fQw12x12[i + 3][i + 3];
    9330:	1c31      	adds	r1, r6, #0
    9332:	f7f7 fd2f 	bl	d94 <__aeabi_fmul>
    9336:	4b6c      	ldr	r3, [pc, #432]	; (94e8 <PSP_CNFG_MQX_KERNEL_LOGGING+0x14e8>)
    9338:	4659      	mov	r1, fp
    933a:	50c8      	str	r0, [r1, r3]
    933c:	2397      	movs	r3, #151	; 0x97
    933e:	00db      	lsls	r3, r3, #3
    9340:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1793

		// Qw[a-a-] = Qw[6-8][6-8] = E[a-(a-)^T] = ca^2 * Q[a+a+] + Qwa * I
		pthisSV->fQw12x12[i + 6][i + 6] = pthisSV->fcasq * pthisSV->fPPlus12x12[i + 6][i + 6] + FQWA_9DOF_GBY_KALMAN;
    9342:	23a1      	movs	r3, #161	; 0xa1
    9344:	009b      	lsls	r3, r3, #2
    9346:	58c9      	ldr	r1, [r1, r3]
    9348:	1c28      	adds	r0, r5, #0
    934a:	f7f7 fd23 	bl	d94 <__aeabi_fmul>
    934e:	4963      	ldr	r1, [pc, #396]	; (94dc <PSP_CNFG_MQX_KERNEL_LOGGING+0x14dc>)
    9350:	f7f7 f9d0 	bl	6f4 <__aeabi_fadd>
    9354:	4b65      	ldr	r3, [pc, #404]	; (94ec <PSP_CNFG_MQX_KERNEL_LOGGING+0x14ec>)
    9356:	465a      	mov	r2, fp
    9358:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1796

		// Qw[d-d-] = Qw[9-11][9-11] = E[d-(d-)^T] = cd^2 * Q[d+d+] + Qwd * I
		pthisSV->fQw12x12[i + 9][i + 9] = pthisSV->fcdsq * pthisSV->fPPlus12x12[i + 9][i + 9] + FQWD_9DOF_GBY_KALMAN;
    935a:	23c8      	movs	r3, #200	; 0xc8
    935c:	009b      	lsls	r3, r3, #2
    935e:	58d1      	ldr	r1, [r2, r3]
    9360:	1c20      	adds	r0, r4, #0
    9362:	f7f7 fd17 	bl	d94 <__aeabi_fmul>
    9366:	21fc      	movs	r1, #252	; 0xfc
    9368:	0589      	lsls	r1, r1, #22
    936a:	f7f7 f9c3 	bl	6f4 <__aeabi_fadd>
    936e:	23d0      	movs	r3, #208	; 0xd0
    9370:	4659      	mov	r1, fp
    9372:	00db      	lsls	r3, r3, #3
    9374:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1784

	// update the covariance matrix components
	for (i = 0; i < 3; i++)
	{
		// Qw[th-th-] = Qw[0-2][0-2] = E[th-(th-)^T] = Q[th+th+] + deltat^2 * (Q[b+b+] + (Qwb + QvG) * I)
		pthisSV->fQw12x12[i][i] = pthisSV->fPPlus12x12[i][i] + pthisSV->fdeltatsq * (pthisSV->fPPlus12x12[i + 3][i + 3] + pthisSV->fQwbplusQvG);
    9376:	2387      	movs	r3, #135	; 0x87
    9378:	009b      	lsls	r3, r3, #2
    937a:	58cb      	ldr	r3, [r1, r3]
    937c:	4641      	mov	r1, r8
    937e:	1c18      	adds	r0, r3, #0
    9380:	4699      	mov	r9, r3
    9382:	f7f7 f9b7 	bl	6f4 <__aeabi_fadd>
    9386:	1c39      	adds	r1, r7, #0
    9388:	f7f7 fd04 	bl	d94 <__aeabi_fmul>
    938c:	23c0      	movs	r3, #192	; 0xc0
    938e:	465a      	mov	r2, fp
    9390:	005b      	lsls	r3, r3, #1
    9392:	1c01      	adds	r1, r0, #0
    9394:	58d0      	ldr	r0, [r2, r3]
    9396:	f7f7 f9ad 	bl	6f4 <__aeabi_fadd>
    939a:	239c      	movs	r3, #156	; 0x9c
    939c:	465f      	mov	r7, fp
    939e:	00db      	lsls	r3, r3, #3
    93a0:	50f8      	str	r0, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1787

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw12x12[i + 3][i + 3] = pthisSV->fPPlus12x12[i + 3][i + 3] + FQWB_9DOF_GBY_KALMAN;
    93a2:	494c      	ldr	r1, [pc, #304]	; (94d4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x14d4>)
    93a4:	4648      	mov	r0, r9
    93a6:	f7f7 f9a5 	bl	6f4 <__aeabi_fadd>
    93aa:	4b51      	ldr	r3, [pc, #324]	; (94f0 <PSP_CNFG_MQX_KERNEL_LOGGING+0x14f0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1790

		// Qw[th-b-] = Qw[0-2][3-5] = E[th-(b-)^T] = -deltat * (Q[b+b+] + Qwb * I) = -deltat * Qw[b-b-]
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = -pthisSV->fdeltat * pthisSV->fQw12x12[i + 3][i + 3];
    93ac:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1787
	{
		// Qw[th-th-] = Qw[0-2][0-2] = E[th-(th-)^T] = Q[th+th+] + deltat^2 * (Q[b+b+] + (Qwb + QvG) * I)
		pthisSV->fQw12x12[i][i] = pthisSV->fPPlus12x12[i][i] + pthisSV->fdeltatsq * (pthisSV->fPPlus12x12[i + 3][i + 3] + pthisSV->fQwbplusQvG);

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw12x12[i + 3][i + 3] = pthisSV->fPPlus12x12[i + 3][i + 3] + FQWB_9DOF_GBY_KALMAN;
    93ae:	50f8      	str	r0, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1790

		// Qw[th-b-] = Qw[0-2][3-5] = E[th-(b-)^T] = -deltat * (Q[b+b+] + Qwb * I) = -deltat * Qw[b-b-]
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = -pthisSV->fdeltat * pthisSV->fQw12x12[i + 3][i + 3];
    93b0:	f7f7 fcf0 	bl	d94 <__aeabi_fmul>
    93b4:	23ae      	movs	r3, #174	; 0xae
    93b6:	00db      	lsls	r3, r3, #3
    93b8:	50f8      	str	r0, [r7, r3]
    93ba:	4b4e      	ldr	r3, [pc, #312]	; (94f4 <PSP_CNFG_MQX_KERNEL_LOGGING+0x14f4>)
    93bc:	50f8      	str	r0, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1793

		// Qw[a-a-] = Qw[6-8][6-8] = E[a-(a-)^T] = ca^2 * Q[a+a+] + Qwa * I
		pthisSV->fQw12x12[i + 6][i + 6] = pthisSV->fcasq * pthisSV->fPPlus12x12[i + 6][i + 6] + FQWA_9DOF_GBY_KALMAN;
    93be:	23ae      	movs	r3, #174	; 0xae
    93c0:	009b      	lsls	r3, r3, #2
    93c2:	58f9      	ldr	r1, [r7, r3]
    93c4:	e098      	b.n	94f8 <PSP_CNFG_MQX_KERNEL_LOGGING+0x14f8>
    93c6:	46c0      	nop			; (mov r8, r8)
    93c8:	0000047c 	.word	0x0000047c
    93cc:	00000484 	.word	0x00000484
    93d0:	0000048c 	.word	0x0000048c
    93d4:	00000494 	.word	0x00000494
    93d8:	0000049c 	.word	0x0000049c
    93dc:	000004a4 	.word	0x000004a4
    93e0:	000004b4 	.word	0x000004b4
    93e4:	000004bc 	.word	0x000004bc
    93e8:	000004c4 	.word	0x000004c4
    93ec:	000004cc 	.word	0x000004cc
    93f0:	000004d4 	.word	0x000004d4
    93f4:	000004dc 	.word	0x000004dc
    93f8:	000004e4 	.word	0x000004e4
    93fc:	000004f4 	.word	0x000004f4
    9400:	000004fc 	.word	0x000004fc
    9404:	00000504 	.word	0x00000504
    9408:	0000050c 	.word	0x0000050c
    940c:	0000051c 	.word	0x0000051c
    9410:	00000524 	.word	0x00000524
    9414:	0000052c 	.word	0x0000052c
    9418:	00000534 	.word	0x00000534
    941c:	00000544 	.word	0x00000544
    9420:	0000054c 	.word	0x0000054c
    9424:	00000554 	.word	0x00000554
    9428:	0000055c 	.word	0x0000055c
    942c:	00000564 	.word	0x00000564
    9430:	0000056c 	.word	0x0000056c
    9434:	00000574 	.word	0x00000574
    9438:	00000584 	.word	0x00000584
    943c:	0000058c 	.word	0x0000058c
    9440:	00000594 	.word	0x00000594
    9444:	0000059c 	.word	0x0000059c
    9448:	000005a4 	.word	0x000005a4
    944c:	000005ac 	.word	0x000005ac
    9450:	000005b4 	.word	0x000005b4
    9454:	000005bc 	.word	0x000005bc
    9458:	000005c4 	.word	0x000005c4
    945c:	000005cc 	.word	0x000005cc
    9460:	000005d4 	.word	0x000005d4
    9464:	000005dc 	.word	0x000005dc
    9468:	000005ec 	.word	0x000005ec
    946c:	000005f4 	.word	0x000005f4
    9470:	000005fc 	.word	0x000005fc
    9474:	00000604 	.word	0x00000604
    9478:	0000060c 	.word	0x0000060c
    947c:	00000614 	.word	0x00000614
    9480:	0000061c 	.word	0x0000061c
    9484:	00000624 	.word	0x00000624
    9488:	0000062c 	.word	0x0000062c
    948c:	00000634 	.word	0x00000634
    9490:	0000063c 	.word	0x0000063c
    9494:	00000644 	.word	0x00000644
    9498:	00000654 	.word	0x00000654
    949c:	0000065c 	.word	0x0000065c
    94a0:	00000664 	.word	0x00000664
    94a4:	0000066c 	.word	0x0000066c
    94a8:	00000674 	.word	0x00000674
    94ac:	0000067c 	.word	0x0000067c
    94b0:	00000684 	.word	0x00000684
    94b4:	0000068c 	.word	0x0000068c
    94b8:	00000694 	.word	0x00000694
    94bc:	0000069c 	.word	0x0000069c
    94c0:	000006a4 	.word	0x000006a4
    94c4:	000006ac 	.word	0x000006ac
    94c8:	0000082c 	.word	0x0000082c
    94cc:	00000828 	.word	0x00000828
    94d0:	0000081c 	.word	0x0000081c
    94d4:	3089705f 	.word	0x3089705f
    94d8:	00000514 	.word	0x00000514
    94dc:	38d1b717 	.word	0x38d1b717
    94e0:	0000064c 	.word	0x0000064c
    94e4:	000004ac 	.word	0x000004ac
    94e8:	0000053c 	.word	0x0000053c
    94ec:	000005e4 	.word	0x000005e4
    94f0:	0000057c 	.word	0x0000057c
    94f4:	000004ec 	.word	0x000004ec
    94f8:	1c28      	adds	r0, r5, #0
    94fa:	f7f7 fc4b 	bl	d94 <__aeabi_fmul>
    94fe:	49cf      	ldr	r1, [pc, #828]	; (983c <PSP_CNFG_MQX_KERNEL_LOGGING+0x183c>)
    9500:	f7f7 f8f8 	bl	6f4 <__aeabi_fadd>
    9504:	23c3      	movs	r3, #195	; 0xc3
    9506:	00db      	lsls	r3, r3, #3
    9508:	50f8      	str	r0, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1796

		// Qw[d-d-] = Qw[9-11][9-11] = E[d-(d-)^T] = cd^2 * Q[d+d+] + Qwd * I
		pthisSV->fQw12x12[i + 9][i + 9] = pthisSV->fcdsq * pthisSV->fPPlus12x12[i + 9][i + 9] + FQWD_9DOF_GBY_KALMAN;
    950a:	23d5      	movs	r3, #213	; 0xd5
    950c:	009b      	lsls	r3, r3, #2
    950e:	58f9      	ldr	r1, [r7, r3]
    9510:	1c20      	adds	r0, r4, #0
    9512:	f7f7 fc3f 	bl	d94 <__aeabi_fmul>
    9516:	21fc      	movs	r1, #252	; 0xfc
    9518:	0589      	lsls	r1, r1, #22
    951a:	f7f7 f8eb 	bl	6f4 <__aeabi_fadd>
    951e:	4bc8      	ldr	r3, [pc, #800]	; (9840 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1840>)
    9520:	50f8      	str	r0, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1800
	}

	return;
}  // end fRun_9DOF_GBY_KALMAN
    9522:	b06f      	add	sp, #444	; 0x1bc
    9524:	bc3c      	pop	{r2, r3, r4, r5}
    9526:	4690      	mov	r8, r2
    9528:	4699      	mov	r9, r3
    952a:	46a2      	mov	sl, r4
    952c:	46ab      	mov	fp, r5
    952e:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9530:	2000      	movs	r0, #0
    9532:	4681      	mov	r9, r0
    9534:	f7fd ffe9 	bl	750a <fRun_9DOF_GBY_KALMAN+0x18c2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1520
	// remove gravity and correct the sign if the coordinate system is gravity positive / acceleration negative 
	switch (ithisCoordSystem)
	{
	case NED:
		// gravity positive NED
		pthisSV->faGlPl[X] = -pthisSV->faGlPl[X];
    9538:	2280      	movs	r2, #128	; 0x80
    953a:	0612      	lsls	r2, r2, #24
    953c:	1c13      	adds	r3, r2, #0
    953e:	4453      	add	r3, sl
    9540:	4659      	mov	r1, fp
    9542:	22c8      	movs	r2, #200	; 0xc8
    9544:	508b      	str	r3, [r1, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1521
		pthisSV->faGlPl[Y] = -pthisSV->faGlPl[Y];
    9546:	9903      	ldr	r1, [sp, #12]
    9548:	2280      	movs	r2, #128	; 0x80
    954a:	0612      	lsls	r2, r2, #24
    954c:	188b      	adds	r3, r1, r2
    954e:	4659      	mov	r1, fp
    9550:	22cc      	movs	r2, #204	; 0xcc
    9552:	508b      	str	r3, [r1, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1522
		pthisSV->faGlPl[Z] = -(pthisSV->faGlPl[Z] - 1.0F);
    9554:	21fe      	movs	r1, #254	; 0xfe
    9556:	0589      	lsls	r1, r1, #22
    9558:	f7f7 fd46 	bl	fe8 <__aeabi_fsub>
    955c:	2380      	movs	r3, #128	; 0x80
    955e:	061b      	lsls	r3, r3, #24
    9560:	18c0      	adds	r0, r0, r3
    9562:	4659      	mov	r1, fp
    9564:	5148      	str	r0, [r1, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1523
		break;
    9566:	f7fd fbcb 	bl	6d00 <fRun_9DOF_GBY_KALMAN+0x10b8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    956a:	2600      	movs	r6, #0
    956c:	f7fd fffa 	bl	7564 <fRun_9DOF_GBY_KALMAN+0x191c>
    9570:	2300      	movs	r3, #0
    9572:	4698      	mov	r8, r3
    9574:	f7fd f879 	bl	666a <fRun_9DOF_GBY_KALMAN+0xa22>
    9578:	2100      	movs	r1, #0
    957a:	4688      	mov	r8, r1
    957c:	f7fd f812 	bl	65a4 <fRun_9DOF_GBY_KALMAN+0x95c>
    9580:	2600      	movs	r6, #0
    9582:	f7fd f893 	bl	66ac <fRun_9DOF_GBY_KALMAN+0xa64>
    9586:	2100      	movs	r1, #0
    9588:	4688      	mov	r8, r1
    958a:	f7fd f84d 	bl	6628 <fRun_9DOF_GBY_KALMAN+0x9e0>
    958e:	2300      	movs	r3, #0
    9590:	4698      	mov	r8, r3
    9592:	f7fd f828 	bl	65e6 <fRun_9DOF_GBY_KALMAN+0x99e>
    9596:	2600      	movs	r6, #0
    9598:	f7fe fa6c 	bl	7a74 <fRun_9DOF_GBY_KALMAN+0x1e2c>
    959c:	2000      	movs	r0, #0
    959e:	4681      	mov	r9, r0
    95a0:	f7fe fa31 	bl	7a06 <fRun_9DOF_GBY_KALMAN+0x1dbe>
    95a4:	2000      	movs	r0, #0
    95a6:	4681      	mov	r9, r0
    95a8:	f7fe f9f7 	bl	799a <fRun_9DOF_GBY_KALMAN+0x1d52>
    95ac:	2000      	movs	r0, #0
    95ae:	4681      	mov	r9, r0
    95b0:	f7fe f9bd 	bl	792e <fRun_9DOF_GBY_KALMAN+0x1ce6>
    95b4:	2000      	movs	r0, #0
    95b6:	4680      	mov	r8, r0
    95b8:	f7fe ffc7 	bl	854a <PSP_CNFG_MQX_KERNEL_LOGGING+0x54a>
    95bc:	2200      	movs	r2, #0
    95be:	4690      	mov	r8, r2
    95c0:	f7fe ff8d 	bl	84de <PSP_CNFG_MQX_KERNEL_LOGGING+0x4de>
    95c4:	2000      	movs	r0, #0
    95c6:	4680      	mov	r8, r0
    95c8:	f7fe ff53 	bl	8472 <PSP_CNFG_MQX_KERNEL_LOGGING+0x472>
    95cc:	2600      	movs	r6, #0
    95ce:	f7ff fa03 	bl	89d8 <PSP_CNFG_MQX_KERNEL_LOGGING+0x9d8>
    95d2:	2000      	movs	r0, #0
    95d4:	4681      	mov	r9, r0
    95d6:	f7ff f9c8 	bl	896a <PSP_CNFG_MQX_KERNEL_LOGGING+0x96a>
    95da:	2000      	movs	r0, #0
    95dc:	4681      	mov	r9, r0
    95de:	f7ff f98e 	bl	88fe <PSP_CNFG_MQX_KERNEL_LOGGING+0x8fe>
    95e2:	2000      	movs	r0, #0
    95e4:	4681      	mov	r9, r0
    95e6:	f7ff f954 	bl	8892 <PSP_CNFG_MQX_KERNEL_LOGGING+0x892>
    95ea:	2000      	movs	r0, #0
    95ec:	4681      	mov	r9, r0
    95ee:	f7ff f91a 	bl	8826 <PSP_CNFG_MQX_KERNEL_LOGGING+0x826>
    95f2:	2000      	movs	r0, #0
    95f4:	4681      	mov	r9, r0
    95f6:	f7fd ff5c 	bl	74b2 <fRun_9DOF_GBY_KALMAN+0x186a>
    95fa:	2000      	movs	r0, #0
    95fc:	4681      	mov	r9, r0
    95fe:	f7fd ff2c 	bl	745a <fRun_9DOF_GBY_KALMAN+0x1812>
    9602:	2000      	movs	r0, #0
    9604:	4681      	mov	r9, r0
    9606:	f7fd fefc 	bl	7402 <fRun_9DOF_GBY_KALMAN+0x17ba>
    960a:	2600      	movs	r6, #0
    960c:	f7fe f8aa 	bl	7764 <fRun_9DOF_GBY_KALMAN+0x1b1c>
    9610:	2200      	movs	r2, #0
    9612:	4690      	mov	r8, r2
    9614:	f7fe f87a 	bl	770c <fRun_9DOF_GBY_KALMAN+0x1ac4>
    9618:	2000      	movs	r0, #0
    961a:	4680      	mov	r8, r0
    961c:	f7fe f84a 	bl	76b4 <fRun_9DOF_GBY_KALMAN+0x1a6c>
    9620:	2200      	movs	r2, #0
    9622:	4690      	mov	r8, r2
    9624:	f7fe f81a 	bl	765c <fRun_9DOF_GBY_KALMAN+0x1a14>
    9628:	2000      	movs	r0, #0
    962a:	4680      	mov	r8, r0
    962c:	f7fd ffea 	bl	7604 <fRun_9DOF_GBY_KALMAN+0x19bc>
    9630:	2100      	movs	r1, #0
    9632:	4689      	mov	r9, r1
    9634:	f7fe f945 	bl	78c2 <fRun_9DOF_GBY_KALMAN+0x1c7a>
    9638:	2600      	movs	r6, #0
    963a:	f7fe fd8b 	bl	8154 <PSP_CNFG_MQX_KERNEL_LOGGING+0x154>
    963e:	2600      	movs	r6, #0
    9640:	f7fe ffef 	bl	8622 <PSP_CNFG_MQX_KERNEL_LOGGING+0x622>
    9644:	2200      	movs	r2, #0
    9646:	4690      	mov	r8, r2
    9648:	f7fe ffb5 	bl	85b6 <PSP_CNFG_MQX_KERNEL_LOGGING+0x5b6>
    964c:	2200      	movs	r2, #0
    964e:	4690      	mov	r8, r2
    9650:	f7fe fd54 	bl	80fc <PSP_CNFG_MQX_KERNEL_LOGGING+0xfc>
    9654:	2000      	movs	r0, #0
    9656:	4680      	mov	r8, r0
    9658:	f7fe fd24 	bl	80a4 <PSP_CNFG_MQX_KERNEL_LOGGING+0xa4>
    965c:	2200      	movs	r2, #0
    965e:	4690      	mov	r8, r2
    9660:	f7fe fcf4 	bl	804c <PSP_CNFG_MQX_KERNEL_LOGGING+0x4c>
    9664:	2000      	movs	r0, #0
    9666:	4680      	mov	r8, r0
    9668:	f7fe fcc4 	bl	7ff4 <fRun_9DOF_GBY_KALMAN+0x23ac>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1125
	int8 iPivot[6];

	// do a reset and return if requested
	if (pthisSV->resetflag)
	{
		fInit_9DOF_GBY_KALMAN(pthisSV, THISCOORDSYSTEM, SENSORFS, OVERSAMPLE_RATIO);
    966c:	2101      	movs	r1, #1
    966e:	22c8      	movs	r2, #200	; 0xc8
    9670:	2308      	movs	r3, #8
    9672:	f7fa fba9 	bl	3dc8 <fInit_9DOF_GBY_KALMAN>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1126
		return;
    9676:	e754      	b.n	9522 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1522>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1647
				&(pthisSV->fRhoPl), &(pthisSV->fChiPl));
	}
	else if (ithisCoordSystem == ANDROID)
	{
		// calculate the Android Euler angles
		fAndroidAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
    9678:	f003 fda0 	bl	d1bc <fAndroidAnglesDegFromRotationMatrix>
    967c:	f7ff fae8 	bl	8c50 <PSP_CNFG_MQX_KERNEL_LOGGING+0xc50>
    9680:	4f70      	ldr	r7, [pc, #448]	; (9844 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1844>)
    9682:	1c3c      	adds	r4, r7, #0
    9684:	445c      	add	r4, fp
    9686:	9409      	str	r4, [sp, #36]	; 0x24
    9688:	f7fc fba8 	bl	5ddc <fRun_9DOF_GBY_KALMAN+0x194>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1573

				// limit the inclination angle between limits to prevent runaway
				if (fsindelta > SINDELTAMAX)
				{
					fsindelta = SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
    968c:	4c6e      	ldr	r4, [pc, #440]	; (9848 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1848>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1572
				fcosdelta = fadj * ftmp;

				// limit the inclination angle between limits to prevent runaway
				if (fsindelta > SINDELTAMAX)
				{
					fsindelta = SINDELTAMAX;
    968e:	4e6f      	ldr	r6, [pc, #444]	; (984c <PSP_CNFG_MQX_KERNEL_LOGGING+0x184c>)
    9690:	f7fd fbcd 	bl	6e2e <fRun_9DOF_GBY_KALMAN+0x11e6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1591
		} // end NED
		else
		{
			// de-rotate the Android and Windows 8 magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[Y] = pthisSV->fRPl[X][Y] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Y] * pthisSV->fdErrSePl[Y] +
    9694:	4641      	mov	r1, r8
    9696:	9809      	ldr	r0, [sp, #36]	; 0x24
    9698:	f7f7 fb7c 	bl	d94 <__aeabi_fmul>
    969c:	4649      	mov	r1, r9
    969e:	1c05      	adds	r5, r0, #0
    96a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    96a2:	f7f7 fb77 	bl	d94 <__aeabi_fmul>
    96a6:	1c01      	adds	r1, r0, #0
    96a8:	1c28      	adds	r0, r5, #0
    96aa:	f7f7 f823 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1592
					pthisSV->fRPl[Z][Y] * pthisSV->fdErrSePl[Z];
    96ae:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1591
		} // end NED
		else
		{
			// de-rotate the Android and Windows 8 magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[Y] = pthisSV->fRPl[X][Y] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Y] * pthisSV->fdErrSePl[Y] +
    96b0:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1592
					pthisSV->fRPl[Z][Y] * pthisSV->fdErrSePl[Z];
    96b2:	980a      	ldr	r0, [sp, #40]	; 0x28
    96b4:	f7f7 fb6e 	bl	d94 <__aeabi_fmul>
    96b8:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1591
		} // end NED
		else
		{
			// de-rotate the Android and Windows 8 magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[Y] = pthisSV->fRPl[X][Y] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Y] * pthisSV->fdErrSePl[Y] +
    96ba:	1c28      	adds	r0, r5, #0
    96bc:	f7f7 f81a 	bl	6f4 <__aeabi_fadd>
    96c0:	238c      	movs	r3, #140	; 0x8c
    96c2:	4659      	mov	r1, fp
    96c4:	50c8      	str	r0, [r1, r3]
    96c6:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1593
					pthisSV->fRPl[Z][Y] * pthisSV->fdErrSePl[Z];
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
    96c8:	4641      	mov	r1, r8
    96ca:	1c20      	adds	r0, r4, #0
    96cc:	f7f7 fb62 	bl	d94 <__aeabi_fmul>
    96d0:	4649      	mov	r1, r9
    96d2:	1c04      	adds	r4, r0, #0
    96d4:	1c30      	adds	r0, r6, #0
    96d6:	f7f7 fb5d 	bl	d94 <__aeabi_fmul>
    96da:	1c01      	adds	r1, r0, #0
    96dc:	1c20      	adds	r0, r4, #0
    96de:	f7f7 f809 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1594
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];
    96e2:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1593
		{
			// de-rotate the Android and Windows 8 magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[Y] = pthisSV->fRPl[X][Y] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Y] * pthisSV->fdErrSePl[Y] +
					pthisSV->fRPl[Z][Y] * pthisSV->fdErrSePl[Z];
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
    96e4:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1594
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];
    96e6:	1c38      	adds	r0, r7, #0
    96e8:	f7f7 fb54 	bl	d94 <__aeabi_fmul>
    96ec:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1593
		{
			// de-rotate the Android and Windows 8 magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[Y] = pthisSV->fRPl[X][Y] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Y] * pthisSV->fdErrSePl[Y] +
					pthisSV->fRPl[Z][Y] * pthisSV->fdErrSePl[Z];
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
    96ee:	1c20      	adds	r0, r4, #0
    96f0:	f7f7 f800 	bl	6f4 <__aeabi_fadd>
    96f4:	465a      	mov	r2, fp
    96f6:	2390      	movs	r3, #144	; 0x90
    96f8:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1598
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];

			// compute components of the new geomagnetic vector
			// the north pointing component fadj must always be non-negative
			fopp = -(pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z]);
    96fa:	2386      	movs	r3, #134	; 0x86
    96fc:	005b      	lsls	r3, r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1593
		{
			// de-rotate the Android and Windows 8 magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[Y] = pthisSV->fRPl[X][Y] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Y] * pthisSV->fdErrSePl[Y] +
					pthisSV->fRPl[Z][Y] * pthisSV->fdErrSePl[Z];
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
    96fe:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1598
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];

			// compute components of the new geomagnetic vector
			// the north pointing component fadj must always be non-negative
			fopp = -(pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z]);
    9700:	58d0      	ldr	r0, [r2, r3]
    9702:	f7f7 fc71 	bl	fe8 <__aeabi_fsub>
    9706:	2380      	movs	r3, #128	; 0x80
    9708:	061b      	lsls	r3, r3, #24
    970a:	18c4      	adds	r4, r0, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1599
			fadj = pthisSV->fmGl[Y] - pthisSV->fdErrGlPl[Y];
    970c:	2384      	movs	r3, #132	; 0x84
    970e:	005b      	lsls	r3, r3, #1
    9710:	465f      	mov	r7, fp
    9712:	1c29      	adds	r1, r5, #0
    9714:	58f8      	ldr	r0, [r7, r3]
    9716:	f7f7 fc67 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1600
			if (fadj < 0.0F)
    971a:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1599
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];

			// compute components of the new geomagnetic vector
			// the north pointing component fadj must always be non-negative
			fopp = -(pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z]);
			fadj = pthisSV->fmGl[Y] - pthisSV->fdErrGlPl[Y];
    971c:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1600
			if (fadj < 0.0F)
    971e:	f7f6 ffc1 	bl	6a4 <__aeabi_fcmplt>
    9722:	2800      	cmp	r0, #0
    9724:	d175      	bne.n	9812 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1812>
    9726:	1c28      	adds	r0, r5, #0
    9728:	1c29      	adds	r1, r5, #0
    972a:	f7f7 fb33 	bl	d94 <__aeabi_fmul>
    972e:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1604
			{
				fadj = 0.0F;
			}
			fhyp = sqrtf(fopp * fopp + fadj * fadj);
    9730:	1c21      	adds	r1, r4, #0
    9732:	1c20      	adds	r0, r4, #0
    9734:	f7f7 fb2e 	bl	d94 <__aeabi_fmul>
    9738:	1c31      	adds	r1, r6, #0
    973a:	f7f6 ffdb 	bl	6f4 <__aeabi_fadd>
    973e:	f007 ffbf 	bl	116c0 <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1607

			// check for the pathological condition of zero geomagnetic field
			if (fhyp != 0.0F)
    9742:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1604
			fadj = pthisSV->fmGl[Y] - pthisSV->fdErrGlPl[Y];
			if (fadj < 0.0F)
			{
				fadj = 0.0F;
			}
			fhyp = sqrtf(fopp * fopp + fadj * fadj);
    9744:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1607

			// check for the pathological condition of zero geomagnetic field
			if (fhyp != 0.0F)
    9746:	f7f6 ffa7 	bl	698 <__aeabi_fcmpeq>
    974a:	2800      	cmp	r0, #0
    974c:	d001      	beq.n	9752 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1752>
    974e:	f7ff fa6e 	bl	8c2e <PSP_CNFG_MQX_KERNEL_LOGGING+0xc2e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1610
			{
				// compute the sine and cosine of the new geomagnetic vector
				ftmp = 1.0F / fhyp;
    9752:	20fe      	movs	r0, #254	; 0xfe
    9754:	1c31      	adds	r1, r6, #0
    9756:	0580      	lsls	r0, r0, #22
    9758:	f7f7 f938 	bl	9cc <__aeabi_fdiv>
    975c:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1611
				fsindelta = fopp * ftmp;
    975e:	1c31      	adds	r1, r6, #0
    9760:	1c20      	adds	r0, r4, #0
    9762:	f7f7 fb17 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1615
				fcosdelta = fadj * ftmp;

				// limit the inclination angle between limits to prevent runaway
				if (fsindelta > SINDELTAMAX)
    9766:	4939      	ldr	r1, [pc, #228]	; (984c <PSP_CNFG_MQX_KERNEL_LOGGING+0x184c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1611
			// check for the pathological condition of zero geomagnetic field
			if (fhyp != 0.0F)
			{
				// compute the sine and cosine of the new geomagnetic vector
				ftmp = 1.0F / fhyp;
				fsindelta = fopp * ftmp;
    9768:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1615
				fcosdelta = fadj * ftmp;

				// limit the inclination angle between limits to prevent runaway
				if (fsindelta > SINDELTAMAX)
    976a:	f7f6 ffaf 	bl	6cc <__aeabi_fcmpgt>
    976e:	2800      	cmp	r0, #0
    9770:	d135      	bne.n	97de <PSP_CNFG_MQX_KERNEL_LOGGING+0x17de>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1620
				{
					fsindelta = SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
				}
				else if (fsindelta < -SINDELTAMAX)
    9772:	1c20      	adds	r0, r4, #0
    9774:	4936      	ldr	r1, [pc, #216]	; (9850 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1850>)
    9776:	f7f6 ff95 	bl	6a4 <__aeabi_fcmplt>
    977a:	2800      	cmp	r0, #0
    977c:	d15b      	bne.n	9836 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1836>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1612
			if (fhyp != 0.0F)
			{
				// compute the sine and cosine of the new geomagnetic vector
				ftmp = 1.0F / fhyp;
				fsindelta = fopp * ftmp;
				fcosdelta = fadj * ftmp;
    977e:	1c28      	adds	r0, r5, #0
    9780:	1c31      	adds	r1, r6, #0
    9782:	f7f7 fb07 	bl	d94 <__aeabi_fmul>
    9786:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1627
					fsindelta = -SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
				}

				// compute the new geomagnetic vector (always north pointing)
				pthisSV->fDeltaPl = fasin_deg(fsindelta);
    9788:	1c20      	adds	r0, r4, #0
    978a:	f7f9 fa0d 	bl	2ba8 <fasin_deg>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1628
				pthisSV->fmGl[Y] = pthisMagCal->fB * fcosdelta;
    978e:	9f78      	ldr	r7, [sp, #480]	; 0x1e0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1627
					fsindelta = -SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
				}

				// compute the new geomagnetic vector (always north pointing)
				pthisSV->fDeltaPl = fasin_deg(fsindelta);
    9790:	23b8      	movs	r3, #184	; 0xb8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1628
				pthisSV->fmGl[Y] = pthisMagCal->fB * fcosdelta;
    9792:	6b3e      	ldr	r6, [r7, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1627
					fsindelta = -SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
				}

				// compute the new geomagnetic vector (always north pointing)
				pthisSV->fDeltaPl = fasin_deg(fsindelta);
    9794:	4659      	mov	r1, fp
    9796:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1628
				pthisSV->fmGl[Y] = pthisMagCal->fB * fcosdelta;
    9798:	1c29      	adds	r1, r5, #0
    979a:	1c30      	adds	r0, r6, #0
    979c:	f7f7 fafa 	bl	d94 <__aeabi_fmul>
    97a0:	2384      	movs	r3, #132	; 0x84
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1629
				pthisSV->fmGl[Z] = -pthisMagCal->fB * fsindelta;
    97a2:	2280      	movs	r2, #128	; 0x80
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1628
					fcosdelta = COSDELTAMAX;
				}

				// compute the new geomagnetic vector (always north pointing)
				pthisSV->fDeltaPl = fasin_deg(fsindelta);
				pthisSV->fmGl[Y] = pthisMagCal->fB * fcosdelta;
    97a4:	005b      	lsls	r3, r3, #1
    97a6:	4659      	mov	r1, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1629
				pthisSV->fmGl[Z] = -pthisMagCal->fB * fsindelta;
    97a8:	0612      	lsls	r2, r2, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1628
					fcosdelta = COSDELTAMAX;
				}

				// compute the new geomagnetic vector (always north pointing)
				pthisSV->fDeltaPl = fasin_deg(fsindelta);
				pthisSV->fmGl[Y] = pthisMagCal->fB * fcosdelta;
    97aa:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1629
				pthisSV->fmGl[Z] = -pthisMagCal->fB * fsindelta;
    97ac:	1c21      	adds	r1, r4, #0
    97ae:	18b0      	adds	r0, r6, r2
    97b0:	f7f7 faf0 	bl	d94 <__aeabi_fmul>
    97b4:	2386      	movs	r3, #134	; 0x86
    97b6:	005b      	lsls	r3, r3, #1
    97b8:	465c      	mov	r4, fp
    97ba:	50e0      	str	r0, [r4, r3]
    97bc:	f7ff fa37 	bl	8c2e <PSP_CNFG_MQX_KERNEL_LOGGING+0xc2e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1139
	if (pthisMagCal->iValidMagCal && !pthisSV->iFirstOrientationLock)
	{
		// get the 6DOF orientation matrix and initial inclination angle
		if (ithisCoordSystem == NED)
		{
			feCompassNED(pthisSV->fRPl, &(pthisSV->fDeltaPl), pthisMag->fBcFast, pthisAccel->fGpFast);
    97c0:	9a05      	ldr	r2, [sp, #20]
    97c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    97c4:	465f      	mov	r7, fp
    97c6:	3714      	adds	r7, #20
    97c8:	4659      	mov	r1, fp
    97ca:	1c38      	adds	r0, r7, #0
    97cc:	31b8      	adds	r1, #184	; 0xb8
    97ce:	3224      	adds	r2, #36	; 0x24
    97d0:	330c      	adds	r3, #12
    97d2:	970e      	str	r7, [sp, #56]	; 0x38
    97d4:	f002 fffc 	bl	c7d0 <feCompassNED>
    97d8:	980e      	ldr	r0, [sp, #56]	; 0x38
    97da:	f7fc fa6b 	bl	5cb4 <fRun_9DOF_GBY_KALMAN+0x6c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1618

				// limit the inclination angle between limits to prevent runaway
				if (fsindelta > SINDELTAMAX)
				{
					fsindelta = SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
    97de:	4d1a      	ldr	r5, [pc, #104]	; (9848 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1848>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1617
				fcosdelta = fadj * ftmp;

				// limit the inclination angle between limits to prevent runaway
				if (fsindelta > SINDELTAMAX)
				{
					fsindelta = SINDELTAMAX;
    97e0:	4c1a      	ldr	r4, [pc, #104]	; (984c <PSP_CNFG_MQX_KERNEL_LOGGING+0x184c>)
    97e2:	e7d1      	b.n	9788 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1788>
    97e4:	2500      	movs	r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1557
			// the north pointing component fadj must always be non-negative
			fopp = pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z];
			fadj = pthisSV->fmGl[X] - pthisSV->fdErrGlPl[X];
			if (fadj < 0.0F)
			{
				fadj = 0.0F;
    97e6:	1c2c      	adds	r4, r5, #0
    97e8:	f7fd faf3 	bl	6dd2 <fRun_9DOF_GBY_KALMAN+0x118a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1578
					fcosdelta = COSDELTAMAX;
				}
				else if (fsindelta < -SINDELTAMAX)
				{
					fsindelta = -SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
    97ec:	4c16      	ldr	r4, [pc, #88]	; (9848 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1848>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1577
					fsindelta = SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
				}
				else if (fsindelta < -SINDELTAMAX)
				{
					fsindelta = -SINDELTAMAX;
    97ee:	4e18      	ldr	r6, [pc, #96]	; (9850 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1850>)
    97f0:	f7fd fb1d 	bl	6e2e <fRun_9DOF_GBY_KALMAN+0x11e6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1147
		{
			feCompassAndroid(pthisSV->fRPl, &(pthisSV->fDeltaPl), pthisMag->fBcFast, pthisAccel->fGpFast);
		}
		else if (ithisCoordSystem == WIN8)
		{
			feCompassWin8(pthisSV->fRPl, &(pthisSV->fDeltaPl), pthisMag->fBcFast, pthisAccel->fGpFast);
    97f4:	9a05      	ldr	r2, [sp, #20]
    97f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    97f8:	465c      	mov	r4, fp
    97fa:	3414      	adds	r4, #20
    97fc:	4659      	mov	r1, fp
    97fe:	1c20      	adds	r0, r4, #0
    9800:	31b8      	adds	r1, #184	; 0xb8
    9802:	3224      	adds	r2, #36	; 0x24
    9804:	330c      	adds	r3, #12
    9806:	940e      	str	r4, [sp, #56]	; 0x38
    9808:	f003 fada 	bl	cdc0 <feCompassWin8>
    980c:	980e      	ldr	r0, [sp, #56]	; 0x38
    980e:	f7fc fa51 	bl	5cb4 <fRun_9DOF_GBY_KALMAN+0x6c>
    9812:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1602
			// the north pointing component fadj must always be non-negative
			fopp = -(pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z]);
			fadj = pthisSV->fmGl[Y] - pthisSV->fdErrGlPl[Y];
			if (fadj < 0.0F)
			{
				fadj = 0.0F;
    9814:	1c35      	adds	r5, r6, #0
    9816:	e78b      	b.n	9730 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1730>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1143
		{
			feCompassNED(pthisSV->fRPl, &(pthisSV->fDeltaPl), pthisMag->fBcFast, pthisAccel->fGpFast);
		}
		else if (ithisCoordSystem == ANDROID)
		{
			feCompassAndroid(pthisSV->fRPl, &(pthisSV->fDeltaPl), pthisMag->fBcFast, pthisAccel->fGpFast);
    9818:	9a05      	ldr	r2, [sp, #20]
    981a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    981c:	465f      	mov	r7, fp
    981e:	3714      	adds	r7, #20
    9820:	4659      	mov	r1, fp
    9822:	1c38      	adds	r0, r7, #0
    9824:	31b8      	adds	r1, #184	; 0xb8
    9826:	3224      	adds	r2, #36	; 0x24
    9828:	330c      	adds	r3, #12
    982a:	970e      	str	r7, [sp, #56]	; 0x38
    982c:	f003 f94c 	bl	cac8 <feCompassAndroid>
    9830:	980e      	ldr	r0, [sp, #56]	; 0x38
    9832:	f7fc fa3f 	bl	5cb4 <fRun_9DOF_GBY_KALMAN+0x6c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1623
					fcosdelta = COSDELTAMAX;
				}
				else if (fsindelta < -SINDELTAMAX)
				{
					fsindelta = -SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
    9836:	4d04      	ldr	r5, [pc, #16]	; (9848 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1848>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/fusion.c:1622
					fsindelta = SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
				}
				else if (fsindelta < -SINDELTAMAX)
				{
					fsindelta = -SINDELTAMAX;
    9838:	4c05      	ldr	r4, [pc, #20]	; (9850 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1850>)
    983a:	e7a5      	b.n	9788 <PSP_CNFG_MQX_KERNEL_LOGGING+0x1788>
    983c:	38d1b717 	.word	0x38d1b717
    9840:	000006b4 	.word	0x000006b4
    9844:	000007fc 	.word	0x000007fc
    9848:	3ed8616d 	.word	0x3ed8616d
    984c:	3f6803ca 	.word	0x3f6803ca
    9850:	bf6803ca 	.word	0xbf6803ca

00009854 <fInitMagCalibration>:
fInitMagCalibration():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:41
#include "string.h"
#include "include_all.h"

// function resets the magnetometer buffer and magnetic calibration
void fInitMagCalibration(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer)
{
    9854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9856:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:45
	int8 j, k;   // loop counters

	// initialize the calibration hard and soft iron estimate to null
	f3x3matrixAeqI(pthisMagCal->finvW);
    9858:	300c      	adds	r0, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:41
#include "string.h"
#include "include_all.h"

// function resets the magnetometer buffer and magnetic calibration
void fInitMagCalibration(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer)
{
    985a:	1c0f      	adds	r7, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:45
	int8 j, k;   // loop counters

	// initialize the calibration hard and soft iron estimate to null
	f3x3matrixAeqI(pthisMagCal->finvW);
    985c:	f001 ff44 	bl	b6e8 <f3x3matrixAeqI>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:46
	pthisMagCal->fV[X] = pthisMagCal->fV[Y] = pthisMagCal->fV[Z] = 0.0F;
    9860:	2300      	movs	r3, #0
    9862:	60a3      	str	r3, [r4, #8]
    9864:	6063      	str	r3, [r4, #4]
    9866:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:47
	pthisMagCal->fB = DEFAULTB;
    9868:	4b23      	ldr	r3, [pc, #140]	; (98f8 <fInitMagCalibration+0xa4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:50
	pthisMagCal->fFourBsq = 4.0F * pthisMagCal->fB * pthisMagCal->fB;
	pthisMagCal->fFitErrorpc = 1000.0F;
	pthisMagCal->iValidMagCal = 0;
    986a:	4a24      	ldr	r2, [pc, #144]	; (98fc <fInitMagCalibration+0xa8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:47
	int8 j, k;   // loop counters

	// initialize the calibration hard and soft iron estimate to null
	f3x3matrixAeqI(pthisMagCal->finvW);
	pthisMagCal->fV[X] = pthisMagCal->fV[Y] = pthisMagCal->fV[Z] = 0.0F;
	pthisMagCal->fB = DEFAULTB;
    986c:	6323      	str	r3, [r4, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:48
	pthisMagCal->fFourBsq = 4.0F * pthisMagCal->fB * pthisMagCal->fB;
    986e:	4b24      	ldr	r3, [pc, #144]	; (9900 <fInitMagCalibration+0xac>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:56
	pthisMagCal->iCalInProgress = 0;
	pthisMagCal->iMagCalHasRun = 0;

	// set magnetic buffer index to invalid value -1 to denote invalid
	pthisMagBuffer->iMagBufferCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
    9870:	2590      	movs	r5, #144	; 0x90
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:48

	// initialize the calibration hard and soft iron estimate to null
	f3x3matrixAeqI(pthisMagCal->finvW);
	pthisMagCal->fV[X] = pthisMagCal->fV[Y] = pthisMagCal->fV[Z] = 0.0F;
	pthisMagCal->fB = DEFAULTB;
	pthisMagCal->fFourBsq = 4.0F * pthisMagCal->fB * pthisMagCal->fB;
    9872:	6363      	str	r3, [r4, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:49
	pthisMagCal->fFitErrorpc = 1000.0F;
    9874:	4b23      	ldr	r3, [pc, #140]	; (9904 <fInitMagCalibration+0xb0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:56
	pthisMagCal->iCalInProgress = 0;
	pthisMagCal->iMagCalHasRun = 0;

	// set magnetic buffer index to invalid value -1 to denote invalid
	pthisMagBuffer->iMagBufferCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
    9876:	00ed      	lsls	r5, r5, #3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:49
	// initialize the calibration hard and soft iron estimate to null
	f3x3matrixAeqI(pthisMagCal->finvW);
	pthisMagCal->fV[X] = pthisMagCal->fV[Y] = pthisMagCal->fV[Z] = 0.0F;
	pthisMagCal->fB = DEFAULTB;
	pthisMagCal->fFourBsq = 4.0F * pthisMagCal->fB * pthisMagCal->fB;
	pthisMagCal->fFitErrorpc = 1000.0F;
    9878:	63a3      	str	r3, [r4, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:50
	pthisMagCal->iValidMagCal = 0;
    987a:	2300      	movs	r3, #0
    987c:	54a3      	strb	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:51
	pthisMagCal->iCalInProgress = 0;
    987e:	4a22      	ldr	r2, [pc, #136]	; (9908 <fInitMagCalibration+0xb4>)
    9880:	54a3      	strb	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:52
	pthisMagCal->iMagCalHasRun = 0;
    9882:	4a22      	ldr	r2, [pc, #136]	; (990c <fInitMagCalibration+0xb8>)
    9884:	54a3      	strb	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:55

	// set magnetic buffer index to invalid value -1 to denote invalid
	pthisMagBuffer->iMagBufferCount = 0;
    9886:	4a22      	ldr	r2, [pc, #136]	; (9910 <fInitMagCalibration+0xbc>)
    9888:	2400      	movs	r4, #0
    988a:	52bb      	strh	r3, [r7, r2]
    988c:	23d8      	movs	r3, #216	; 0xd8
    988e:	00db      	lsls	r3, r3, #3
    9890:	18fe      	adds	r6, r7, r3
    9892:	2101      	movs	r1, #1
    9894:	1930      	adds	r0, r6, r4
    9896:	4249      	negs	r1, r1
    9898:	2260      	movs	r2, #96	; 0x60
    989a:	3460      	adds	r4, #96	; 0x60
    989c:	f009 fc80 	bl	131a0 <memset>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:56 (discriminator 1)
	for (j = 0; j < MAGBUFFSIZEX; j++)
    98a0:	42ac      	cmp	r4, r5
    98a2:	d1f6      	bne.n	9892 <fInitMagCalibration+0x3e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:70
	// entries cover the range 100 * tan(-PI/2 + PI/MAGBUFFSIZEX), 100 * tan(-PI/2 + 2*PI/MAGBUFFSIZEX) to
	// 100 * tan(-PI/2 + (MAGBUFFSIZEX - 1) * PI/MAGBUFFSIZEX).
	// for MAGBUFFSIZEX=12, the entries range in value from -373 to +373
	for (j = 0; j < (MAGBUFFSIZEX - 1); j++)
	{
		pthisMagBuffer->tanarray[j] = (int16) (100.0F * tanf(PI * (-0.5F + (float) (j + 1) / MAGBUFFSIZEX)));
    98a4:	4a1b      	ldr	r2, [pc, #108]	; (9914 <fInitMagCalibration+0xc0>)
    98a6:	23b4      	movs	r3, #180	; 0xb4
    98a8:	011b      	lsls	r3, r3, #4
    98aa:	52fa      	strh	r2, [r7, r3]
    98ac:	4b1a      	ldr	r3, [pc, #104]	; (9918 <fInitMagCalibration+0xc4>)
    98ae:	22ad      	movs	r2, #173	; 0xad
    98b0:	4252      	negs	r2, r2
    98b2:	52fa      	strh	r2, [r7, r3]
    98b4:	4b19      	ldr	r3, [pc, #100]	; (991c <fInitMagCalibration+0xc8>)
    98b6:	2264      	movs	r2, #100	; 0x64
    98b8:	4252      	negs	r2, r2
    98ba:	52fa      	strh	r2, [r7, r3]
    98bc:	4b18      	ldr	r3, [pc, #96]	; (9920 <fInitMagCalibration+0xcc>)
    98be:	2239      	movs	r2, #57	; 0x39
    98c0:	4252      	negs	r2, r2
    98c2:	52fa      	strh	r2, [r7, r3]
    98c4:	4b17      	ldr	r3, [pc, #92]	; (9924 <fInitMagCalibration+0xd0>)
    98c6:	221a      	movs	r2, #26
    98c8:	4252      	negs	r2, r2
    98ca:	52fa      	strh	r2, [r7, r3]
    98cc:	4b16      	ldr	r3, [pc, #88]	; (9928 <fInitMagCalibration+0xd4>)
    98ce:	2200      	movs	r2, #0
    98d0:	52fa      	strh	r2, [r7, r3]
    98d2:	4b16      	ldr	r3, [pc, #88]	; (992c <fInitMagCalibration+0xd8>)
    98d4:	221a      	movs	r2, #26
    98d6:	52fa      	strh	r2, [r7, r3]
    98d8:	4b15      	ldr	r3, [pc, #84]	; (9930 <fInitMagCalibration+0xdc>)
    98da:	2239      	movs	r2, #57	; 0x39
    98dc:	52fa      	strh	r2, [r7, r3]
    98de:	23b5      	movs	r3, #181	; 0xb5
    98e0:	2264      	movs	r2, #100	; 0x64
    98e2:	011b      	lsls	r3, r3, #4
    98e4:	52fa      	strh	r2, [r7, r3]
    98e6:	4b13      	ldr	r3, [pc, #76]	; (9934 <fInitMagCalibration+0xe0>)
    98e8:	22ad      	movs	r2, #173	; 0xad
    98ea:	52fa      	strh	r2, [r7, r3]
    98ec:	4b12      	ldr	r3, [pc, #72]	; (9938 <fInitMagCalibration+0xe4>)
    98ee:	2276      	movs	r2, #118	; 0x76
    98f0:	32ff      	adds	r2, #255	; 0xff
    98f2:	52fa      	strh	r2, [r7, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:74
	}

	return;
}
    98f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    98f6:	46c0      	nop			; (mov r8, r8)
    98f8:	42480000 	.word	0x42480000
    98fc:	00000416 	.word	0x00000416
    9900:	461c4000 	.word	0x461c4000
    9904:	447a0000 	.word	0x447a0000
    9908:	00000414 	.word	0x00000414
    990c:	00000415 	.word	0x00000415
    9910:	00000b56 	.word	0x00000b56
    9914:	fffffe8b 	.word	0xfffffe8b
    9918:	00000b42 	.word	0x00000b42
    991c:	00000b44 	.word	0x00000b44
    9920:	00000b46 	.word	0x00000b46
    9924:	00000b48 	.word	0x00000b48
    9928:	00000b4a 	.word	0x00000b4a
    992c:	00000b4c 	.word	0x00000b4c
    9930:	00000b4e 	.word	0x00000b4e
    9934:	00000b52 	.word	0x00000b52
    9938:	00000b54 	.word	0x00000b54

0000993c <iUpdateMagnetometerBuffer>:
iUpdateMagnetometerBuffer():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:79

// function updates the magnetic measurement buffer with most recent magnetic data (typically 25Hz)
void iUpdateMagnetometerBuffer(struct MagneticBuffer *pthisMagBuffer, struct AccelSensor *pthisAccel,
		struct MagSensor *pthisMag, int32 loopcounter)
{
    993c:	b5f0      	push	{r4, r5, r6, r7, lr}
    993e:	465f      	mov	r7, fp
    9940:	4656      	mov	r6, sl
    9942:	464d      	mov	r5, r9
    9944:	4644      	mov	r4, r8
    9946:	b4f0      	push	{r4, r5, r6, r7}
    9948:	1c0f      	adds	r7, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:88
	int16 itanj, itank;				// indexing accelerometer ratios
	int8 j, k, l, m;				// counters
	int8 itooclose;					// flag denoting measurement is too close to existing ones

	// calculate the magnetometer buffer bins from the accelerometer tangent ratios
	if (pthisAccel->iGp[X] == 0) return;
    994a:	8dc9      	ldrh	r1, [r1, #46]	; 0x2e
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:79
}

// function updates the magnetic measurement buffer with most recent magnetic data (typically 25Hz)
void iUpdateMagnetometerBuffer(struct MagneticBuffer *pthisMagBuffer, struct AccelSensor *pthisAccel,
		struct MagSensor *pthisMag, int32 loopcounter)
{
    994c:	b089      	sub	sp, #36	; 0x24
    994e:	1c04      	adds	r4, r0, #0
    9950:	1c16      	adds	r6, r2, #0
    9952:	1c1d      	adds	r5, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:88
	int16 itanj, itank;				// indexing accelerometer ratios
	int8 j, k, l, m;				// counters
	int8 itooclose;					// flag denoting measurement is too close to existing ones

	// calculate the magnetometer buffer bins from the accelerometer tangent ratios
	if (pthisAccel->iGp[X] == 0) return;
    9954:	2900      	cmp	r1, #0
    9956:	d100      	bne.n	995a <iUpdateMagnetometerBuffer+0x1e>
    9958:	e0e2      	b.n	9b20 <iUpdateMagnetometerBuffer+0x1e4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:89
	itanj = (100 * (int32)pthisAccel->iGp[Y]) / ((int32)pthisAccel->iGp[X]);
    995a:	b208      	sxth	r0, r1
    995c:	4680      	mov	r8, r0
    995e:	2130      	movs	r1, #48	; 0x30
    9960:	5e78      	ldrsh	r0, [r7, r1]
    9962:	2264      	movs	r2, #100	; 0x64
    9964:	4641      	mov	r1, r8
    9966:	4350      	muls	r0, r2
    9968:	4691      	mov	r9, r2
    996a:	f7f6 fde9 	bl	540 <__aeabi_idiv>
    996e:	b280      	uxth	r0, r0
    9970:	4682      	mov	sl, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:90
	itank = (100 * (int32)pthisAccel->iGp[Z]) / ((int32)pthisAccel->iGp[X]);
    9972:	2132      	movs	r1, #50	; 0x32
    9974:	5e78      	ldrsh	r0, [r7, r1]
    9976:	464a      	mov	r2, r9
    9978:	4350      	muls	r0, r2
    997a:	4641      	mov	r1, r8
    997c:	f7f6 fde0 	bl	540 <__aeabi_idiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:95
	// map tangent ratios to bins j and k using equal angle bins: C guarantees left to right execution of the test
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
    9980:	22b4      	movs	r2, #180	; 0xb4
    9982:	0112      	lsls	r2, r2, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:90
	int8 itooclose;					// flag denoting measurement is too close to existing ones

	// calculate the magnetometer buffer bins from the accelerometer tangent ratios
	if (pthisAccel->iGp[X] == 0) return;
	itanj = (100 * (int32)pthisAccel->iGp[Y]) / ((int32)pthisAccel->iGp[X]);
	itank = (100 * (int32)pthisAccel->iGp[Z]) / ((int32)pthisAccel->iGp[X]);
    9984:	b283      	uxth	r3, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:95
	// map tangent ratios to bins j and k using equal angle bins: C guarantees left to right execution of the test
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
    9986:	5ea1      	ldrsh	r1, [r4, r2]
    9988:	4650      	mov	r0, sl
    998a:	b202      	sxth	r2, r0
    998c:	4291      	cmp	r1, r2
    998e:	dd00      	ble.n	9992 <iUpdateMagnetometerBuffer+0x56>
    9990:	e1bf      	b.n	9d12 <iUpdateMagnetometerBuffer+0x3d6>
    9992:	48ab      	ldr	r0, [pc, #684]	; (9c40 <iUpdateMagnetometerBuffer+0x304>)
    9994:	5e20      	ldrsh	r0, [r4, r0]
    9996:	4290      	cmp	r0, r2
    9998:	dd00      	ble.n	999c <iUpdateMagnetometerBuffer+0x60>
    999a:	e1be      	b.n	9d1a <iUpdateMagnetometerBuffer+0x3de>
    999c:	48a9      	ldr	r0, [pc, #676]	; (9c44 <iUpdateMagnetometerBuffer+0x308>)
    999e:	5e20      	ldrsh	r0, [r4, r0]
    99a0:	4290      	cmp	r0, r2
    99a2:	dd00      	ble.n	99a6 <iUpdateMagnetometerBuffer+0x6a>
    99a4:	e1c3      	b.n	9d2e <iUpdateMagnetometerBuffer+0x3f2>
    99a6:	48a8      	ldr	r0, [pc, #672]	; (9c48 <iUpdateMagnetometerBuffer+0x30c>)
    99a8:	5e20      	ldrsh	r0, [r4, r0]
    99aa:	4290      	cmp	r0, r2
    99ac:	dd00      	ble.n	99b0 <iUpdateMagnetometerBuffer+0x74>
    99ae:	e1bc      	b.n	9d2a <iUpdateMagnetometerBuffer+0x3ee>
    99b0:	48a6      	ldr	r0, [pc, #664]	; (9c4c <iUpdateMagnetometerBuffer+0x310>)
    99b2:	5e20      	ldrsh	r0, [r4, r0]
    99b4:	4290      	cmp	r0, r2
    99b6:	dd00      	ble.n	99ba <iUpdateMagnetometerBuffer+0x7e>
    99b8:	e1a9      	b.n	9d0e <iUpdateMagnetometerBuffer+0x3d2>
    99ba:	48a5      	ldr	r0, [pc, #660]	; (9c50 <iUpdateMagnetometerBuffer+0x314>)
    99bc:	5e20      	ldrsh	r0, [r4, r0]
    99be:	4290      	cmp	r0, r2
    99c0:	dd00      	ble.n	99c4 <iUpdateMagnetometerBuffer+0x88>
    99c2:	e1ba      	b.n	9d3a <iUpdateMagnetometerBuffer+0x3fe>
    99c4:	48a3      	ldr	r0, [pc, #652]	; (9c54 <iUpdateMagnetometerBuffer+0x318>)
    99c6:	5e20      	ldrsh	r0, [r4, r0]
    99c8:	4290      	cmp	r0, r2
    99ca:	dd00      	ble.n	99ce <iUpdateMagnetometerBuffer+0x92>
    99cc:	e1bd      	b.n	9d4a <iUpdateMagnetometerBuffer+0x40e>
    99ce:	48a2      	ldr	r0, [pc, #648]	; (9c58 <iUpdateMagnetometerBuffer+0x31c>)
    99d0:	5e20      	ldrsh	r0, [r4, r0]
    99d2:	4290      	cmp	r0, r2
    99d4:	dd00      	ble.n	99d8 <iUpdateMagnetometerBuffer+0x9c>
    99d6:	e1ba      	b.n	9d4e <iUpdateMagnetometerBuffer+0x412>
    99d8:	20b5      	movs	r0, #181	; 0xb5
    99da:	0100      	lsls	r0, r0, #4
    99dc:	5e20      	ldrsh	r0, [r4, r0]
    99de:	4290      	cmp	r0, r2
    99e0:	dd00      	ble.n	99e4 <iUpdateMagnetometerBuffer+0xa8>
    99e2:	e1ac      	b.n	9d3e <iUpdateMagnetometerBuffer+0x402>
    99e4:	489d      	ldr	r0, [pc, #628]	; (9c5c <iUpdateMagnetometerBuffer+0x320>)
    99e6:	5e20      	ldrsh	r0, [r4, r0]
    99e8:	4290      	cmp	r0, r2
    99ea:	dd00      	ble.n	99ee <iUpdateMagnetometerBuffer+0xb2>
    99ec:	e1b7      	b.n	9d5e <iUpdateMagnetometerBuffer+0x422>
    99ee:	489c      	ldr	r0, [pc, #624]	; (9c60 <iUpdateMagnetometerBuffer+0x324>)
    99f0:	5e20      	ldrsh	r0, [r4, r0]
    99f2:	4290      	cmp	r0, r2
    99f4:	dd00      	ble.n	99f8 <iUpdateMagnetometerBuffer+0xbc>
    99f6:	e1b0      	b.n	9d5a <iUpdateMagnetometerBuffer+0x41e>
    99f8:	220b      	movs	r2, #11
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:96 (discriminator 1)
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
    99fa:	b21b      	sxth	r3, r3
    99fc:	4299      	cmp	r1, r3
    99fe:	dd00      	ble.n	9a02 <iUpdateMagnetometerBuffer+0xc6>
    9a00:	e18d      	b.n	9d1e <iUpdateMagnetometerBuffer+0x3e2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:96
    9a02:	498f      	ldr	r1, [pc, #572]	; (9c40 <iUpdateMagnetometerBuffer+0x304>)
    9a04:	5e61      	ldrsh	r1, [r4, r1]
    9a06:	4299      	cmp	r1, r3
    9a08:	dd00      	ble.n	9a0c <iUpdateMagnetometerBuffer+0xd0>
    9a0a:	e184      	b.n	9d16 <iUpdateMagnetometerBuffer+0x3da>
    9a0c:	498d      	ldr	r1, [pc, #564]	; (9c44 <iUpdateMagnetometerBuffer+0x308>)
    9a0e:	5e61      	ldrsh	r1, [r4, r1]
    9a10:	4299      	cmp	r1, r3
    9a12:	dd00      	ble.n	9a16 <iUpdateMagnetometerBuffer+0xda>
    9a14:	e185      	b.n	9d22 <iUpdateMagnetometerBuffer+0x3e6>
    9a16:	498c      	ldr	r1, [pc, #560]	; (9c48 <iUpdateMagnetometerBuffer+0x30c>)
    9a18:	5e61      	ldrsh	r1, [r4, r1]
    9a1a:	4299      	cmp	r1, r3
    9a1c:	dd00      	ble.n	9a20 <iUpdateMagnetometerBuffer+0xe4>
    9a1e:	e182      	b.n	9d26 <iUpdateMagnetometerBuffer+0x3ea>
    9a20:	498a      	ldr	r1, [pc, #552]	; (9c4c <iUpdateMagnetometerBuffer+0x310>)
    9a22:	5e61      	ldrsh	r1, [r4, r1]
    9a24:	4299      	cmp	r1, r3
    9a26:	dd00      	ble.n	9a2a <iUpdateMagnetometerBuffer+0xee>
    9a28:	e183      	b.n	9d32 <iUpdateMagnetometerBuffer+0x3f6>
    9a2a:	4989      	ldr	r1, [pc, #548]	; (9c50 <iUpdateMagnetometerBuffer+0x314>)
    9a2c:	5e61      	ldrsh	r1, [r4, r1]
    9a2e:	4299      	cmp	r1, r3
    9a30:	dd00      	ble.n	9a34 <iUpdateMagnetometerBuffer+0xf8>
    9a32:	e180      	b.n	9d36 <iUpdateMagnetometerBuffer+0x3fa>
    9a34:	4987      	ldr	r1, [pc, #540]	; (9c54 <iUpdateMagnetometerBuffer+0x318>)
    9a36:	5e61      	ldrsh	r1, [r4, r1]
    9a38:	4299      	cmp	r1, r3
    9a3a:	dd00      	ble.n	9a3e <iUpdateMagnetometerBuffer+0x102>
    9a3c:	e189      	b.n	9d52 <iUpdateMagnetometerBuffer+0x416>
    9a3e:	4986      	ldr	r1, [pc, #536]	; (9c58 <iUpdateMagnetometerBuffer+0x31c>)
    9a40:	5e61      	ldrsh	r1, [r4, r1]
    9a42:	4299      	cmp	r1, r3
    9a44:	dd00      	ble.n	9a48 <iUpdateMagnetometerBuffer+0x10c>
    9a46:	e17c      	b.n	9d42 <iUpdateMagnetometerBuffer+0x406>
    9a48:	21b5      	movs	r1, #181	; 0xb5
    9a4a:	0109      	lsls	r1, r1, #4
    9a4c:	5e61      	ldrsh	r1, [r4, r1]
    9a4e:	4299      	cmp	r1, r3
    9a50:	dd00      	ble.n	9a54 <iUpdateMagnetometerBuffer+0x118>
    9a52:	e178      	b.n	9d46 <iUpdateMagnetometerBuffer+0x40a>
    9a54:	4981      	ldr	r1, [pc, #516]	; (9c5c <iUpdateMagnetometerBuffer+0x320>)
    9a56:	5e61      	ldrsh	r1, [r4, r1]
    9a58:	4299      	cmp	r1, r3
    9a5a:	dd00      	ble.n	9a5e <iUpdateMagnetometerBuffer+0x122>
    9a5c:	e17b      	b.n	9d56 <iUpdateMagnetometerBuffer+0x41a>
    9a5e:	4980      	ldr	r1, [pc, #512]	; (9c60 <iUpdateMagnetometerBuffer+0x324>)
    9a60:	5e60      	ldrsh	r0, [r4, r1]
    9a62:	17d9      	asrs	r1, r3, #31
    9a64:	0fc7      	lsrs	r7, r0, #31
    9a66:	4283      	cmp	r3, r0
    9a68:	4179      	adcs	r1, r7
    9a6a:	310a      	adds	r1, #10
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:97
	if (pthisAccel->iGp[X] < 0) k += MAGBUFFSIZEX;
    9a6c:	4640      	mov	r0, r8
    9a6e:	2800      	cmp	r0, #0
    9a70:	da00      	bge.n	9a74 <iUpdateMagnetometerBuffer+0x138>
    9a72:	e093      	b.n	9b9c <iUpdateMagnetometerBuffer+0x260>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:101

	// case 1: buffer is full and this bin has a measurement: over-write without increasing number of measurements
	// this is the most common option at run time
	if ((pthisMagBuffer->iMagBufferCount == MAXMEASUREMENTS) && (pthisMagBuffer->index[j][k] != -1))
    9a74:	4f7b      	ldr	r7, [pc, #492]	; (9c64 <iUpdateMagnetometerBuffer+0x328>)
    9a76:	5be3      	ldrh	r3, [r4, r7]
    9a78:	9303      	str	r3, [sp, #12]
    9a7a:	b21b      	sxth	r3, r3
    9a7c:	2bf0      	cmp	r3, #240	; 0xf0
    9a7e:	d100      	bne.n	9a82 <iUpdateMagnetometerBuffer+0x146>
    9a80:	e06f      	b.n	9b62 <iUpdateMagnetometerBuffer+0x226>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:152
		pthisMagBuffer->index[l][m] = -1;
		return;
	} // end case 2

	// case 3: buffer is not full and this bin is empty: store and increment number of measurements
	if ((pthisMagBuffer->iMagBufferCount < MAXMEASUREMENTS) && (pthisMagBuffer->index[j][k] == -1))
    9a82:	2bef      	cmp	r3, #239	; 0xef
    9a84:	dc4c      	bgt.n	9b20 <iUpdateMagnetometerBuffer+0x1e4>
    9a86:	0053      	lsls	r3, r2, #1
    9a88:	189a      	adds	r2, r3, r2
    9a8a:	00d2      	lsls	r2, r2, #3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:152 (discriminator 1)
    9a8c:	b249      	sxtb	r1, r1
    9a8e:	1851      	adds	r1, r2, r1
    9a90:	0088      	lsls	r0, r1, #2
    9a92:	22d8      	movs	r2, #216	; 0xd8
    9a94:	1820      	adds	r0, r4, r0
    9a96:	00d2      	lsls	r2, r2, #3
    9a98:	5883      	ldr	r3, [r0, r2]
    9a9a:	3301      	adds	r3, #1
    9a9c:	d047      	beq.n	9b2e <iUpdateMagnetometerBuffer+0x1f2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:172
	{
		// calculate the vector difference between current measurement and the buffer entry
		idelta = 0;
		for (i = X; i <= Z; i++)
		{
			idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
    9a9e:	2344      	movs	r3, #68	; 0x44
    9aa0:	5af3      	ldrh	r3, [r6, r3]
    9aa2:	0049      	lsls	r1, r1, #1
    9aa4:	9304      	str	r3, [sp, #16]
    9aa6:	b21b      	sxth	r3, r3
    9aa8:	4698      	mov	r8, r3
    9aaa:	2346      	movs	r3, #70	; 0x46
    9aac:	5af3      	ldrh	r3, [r6, r3]
    9aae:	468b      	mov	fp, r1
    9ab0:	9306      	str	r3, [sp, #24]
    9ab2:	b21b      	sxth	r3, r3
    9ab4:	469c      	mov	ip, r3
    9ab6:	1863      	adds	r3, r4, r1
    9ab8:	2190      	movs	r1, #144	; 0x90
    9aba:	0089      	lsls	r1, r1, #2
    9abc:	468a      	mov	sl, r1
    9abe:	5e5f      	ldrsh	r7, [r3, r1]
    9ac0:	4661      	mov	r1, ip
    9ac2:	1bc9      	subs	r1, r1, r7
    9ac4:	17cf      	asrs	r7, r1, #31
    9ac6:	19c9      	adds	r1, r1, r7
    9ac8:	4079      	eors	r1, r7
    9aca:	465f      	mov	r7, fp
    9acc:	4689      	mov	r9, r1
    9ace:	5f39      	ldrsh	r1, [r7, r4]
    9ad0:	4647      	mov	r7, r8
    9ad2:	1a79      	subs	r1, r7, r1
    9ad4:	17cf      	asrs	r7, r1, #31
    9ad6:	19c9      	adds	r1, r1, r7
    9ad8:	4079      	eors	r1, r7
    9ada:	4449      	add	r1, r9
    9adc:	9101      	str	r1, [sp, #4]
    9ade:	2148      	movs	r1, #72	; 0x48
    9ae0:	5a71      	ldrh	r1, [r6, r1]
    9ae2:	2790      	movs	r7, #144	; 0x90
    9ae4:	9105      	str	r1, [sp, #20]
    9ae6:	b209      	sxth	r1, r1
    9ae8:	9107      	str	r1, [sp, #28]
    9aea:	00ff      	lsls	r7, r7, #3
    9aec:	5fdf      	ldrsh	r7, [r3, r7]
    9aee:	9907      	ldr	r1, [sp, #28]
    9af0:	1bc9      	subs	r1, r1, r7
    9af2:	17cf      	asrs	r7, r1, #31
    9af4:	19c9      	adds	r1, r1, r7
    9af6:	4079      	eors	r1, r7
    9af8:	4689      	mov	r9, r1
    9afa:	9901      	ldr	r1, [sp, #4]
    9afc:	4489      	add	r9, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:175
		}
		// check to see if the current reading is close to this existing magnetic buffer entry
		if (idelta < MESHDELTACOUNTS)
    9afe:	464f      	mov	r7, r9
    9b00:	2f31      	cmp	r7, #49	; 0x31
    9b02:	dd00      	ble.n	9b06 <iUpdateMagnetometerBuffer+0x1ca>
    9b04:	e085      	b.n	9c12 <iUpdateMagnetometerBuffer+0x2d6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:180 (discriminator 1)
		{
			// simply over-write the measurement and return
			for (i = X; i <= Z; i++)
			{
				pthisMagBuffer->iBpFast[i][j][k] = pthisMag->iBpFast[i];
    9b06:	9f04      	ldr	r7, [sp, #16]
    9b08:	4659      	mov	r1, fp
    9b0a:	530f      	strh	r7, [r1, r4]
    9b0c:	2146      	movs	r1, #70	; 0x46
    9b0e:	5a74      	ldrh	r4, [r6, r1]
    9b10:	4657      	mov	r7, sl
    9b12:	53dc      	strh	r4, [r3, r7]
    9b14:	2148      	movs	r1, #72	; 0x48
    9b16:	5a74      	ldrh	r4, [r6, r1]
    9b18:	2690      	movs	r6, #144	; 0x90
    9b1a:	00f6      	lsls	r6, r6, #3
    9b1c:	539c      	strh	r4, [r3, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:182 (discriminator 1)
			}
			pthisMagBuffer->index[j][k] = loopcounter;
    9b1e:	5085      	str	r5, [r0, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:242
		return;
	} // end case 4

	// this line should be unreachable
	return;
}
    9b20:	b009      	add	sp, #36	; 0x24
    9b22:	bc3c      	pop	{r2, r3, r4, r5}
    9b24:	4690      	mov	r8, r2
    9b26:	4699      	mov	r9, r3
    9b28:	46a2      	mov	sl, r4
    9b2a:	46ab      	mov	fp, r5
    9b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:157 (discriminator 1)
	if ((pthisMagBuffer->iMagBufferCount < MAXMEASUREMENTS) && (pthisMagBuffer->index[j][k] == -1))
	{
		// store the fast (unaveraged at typically 200Hz) integer magnetometer reading into the buffer bin j, k
		for (i = X; i <= Z; i++)
		{
			pthisMagBuffer->iBpFast[i][j][k] = pthisMag->iBpFast[i];
    9b2e:	2344      	movs	r3, #68	; 0x44
    9b30:	5af3      	ldrh	r3, [r6, r3]
    9b32:	0049      	lsls	r1, r1, #1
    9b34:	530b      	strh	r3, [r1, r4]
    9b36:	2346      	movs	r3, #70	; 0x46
    9b38:	5af3      	ldrh	r3, [r6, r3]
    9b3a:	1909      	adds	r1, r1, r4
    9b3c:	469c      	mov	ip, r3
    9b3e:	2390      	movs	r3, #144	; 0x90
    9b40:	009b      	lsls	r3, r3, #2
    9b42:	4698      	mov	r8, r3
    9b44:	4689      	mov	r9, r1
    9b46:	4663      	mov	r3, ip
    9b48:	4441      	add	r1, r8
    9b4a:	800b      	strh	r3, [r1, #0]
    9b4c:	2348      	movs	r3, #72	; 0x48
    9b4e:	5af6      	ldrh	r6, [r6, r3]
    9b50:	2390      	movs	r3, #144	; 0x90
    9b52:	00db      	lsls	r3, r3, #3
    9b54:	4649      	mov	r1, r9
    9b56:	52ce      	strh	r6, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:160 (discriminator 1)
		}
		pthisMagBuffer->index[j][k] = loopcounter;
		(pthisMagBuffer->iMagBufferCount)++;
    9b58:	9b03      	ldr	r3, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:159 (discriminator 1)
		// store the fast (unaveraged at typically 200Hz) integer magnetometer reading into the buffer bin j, k
		for (i = X; i <= Z; i++)
		{
			pthisMagBuffer->iBpFast[i][j][k] = pthisMag->iBpFast[i];
		}
		pthisMagBuffer->index[j][k] = loopcounter;
    9b5a:	5085      	str	r5, [r0, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:160 (discriminator 1)
		(pthisMagBuffer->iMagBufferCount)++;
    9b5c:	3301      	adds	r3, #1
    9b5e:	53e3      	strh	r3, [r4, r7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:161 (discriminator 1)
		return;
    9b60:	e7de      	b.n	9b20 <iUpdateMagnetometerBuffer+0x1e4>
    9b62:	0053      	lsls	r3, r2, #1
    9b64:	189a      	adds	r2, r3, r2
    9b66:	00d2      	lsls	r2, r2, #3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:101 (discriminator 1)
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
	if (pthisAccel->iGp[X] < 0) k += MAGBUFFSIZEX;

	// case 1: buffer is full and this bin has a measurement: over-write without increasing number of measurements
	// this is the most common option at run time
	if ((pthisMagBuffer->iMagBufferCount == MAXMEASUREMENTS) && (pthisMagBuffer->index[j][k] != -1))
    9b68:	b249      	sxtb	r1, r1
    9b6a:	1851      	adds	r1, r2, r1
    9b6c:	008a      	lsls	r2, r1, #2
    9b6e:	23d8      	movs	r3, #216	; 0xd8
    9b70:	18a2      	adds	r2, r4, r2
    9b72:	00db      	lsls	r3, r3, #3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:106 (discriminator 1)
	{
		// store the fast (unaveraged at typically 200Hz) integer magnetometer reading into the buffer bin j, k
		for (i = X; i <= Z; i++)
		{
			pthisMagBuffer->iBpFast[i][j][k] = pthisMag->iBpFast[i];
    9b74:	2044      	movs	r0, #68	; 0x44
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:101 (discriminator 1)
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
	if (pthisAccel->iGp[X] < 0) k += MAGBUFFSIZEX;

	// case 1: buffer is full and this bin has a measurement: over-write without increasing number of measurements
	// this is the most common option at run time
	if ((pthisMagBuffer->iMagBufferCount == MAXMEASUREMENTS) && (pthisMagBuffer->index[j][k] != -1))
    9b76:	58d7      	ldr	r7, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:106 (discriminator 1)
	{
		// store the fast (unaveraged at typically 200Hz) integer magnetometer reading into the buffer bin j, k
		for (i = X; i <= Z; i++)
		{
			pthisMagBuffer->iBpFast[i][j][k] = pthisMag->iBpFast[i];
    9b78:	5a30      	ldrh	r0, [r6, r0]
    9b7a:	0049      	lsls	r1, r1, #1
    9b7c:	5308      	strh	r0, [r1, r4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:101 (discriminator 1)
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
	if (pthisAccel->iGp[X] < 0) k += MAGBUFFSIZEX;

	// case 1: buffer is full and this bin has a measurement: over-write without increasing number of measurements
	// this is the most common option at run time
	if ((pthisMagBuffer->iMagBufferCount == MAXMEASUREMENTS) && (pthisMagBuffer->index[j][k] != -1))
    9b7e:	3701      	adds	r7, #1
    9b80:	d00f      	beq.n	9ba2 <iUpdateMagnetometerBuffer+0x266>
    9b82:	1864      	adds	r4, r4, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:106 (discriminator 1)
	{
		// store the fast (unaveraged at typically 200Hz) integer magnetometer reading into the buffer bin j, k
		for (i = X; i <= Z; i++)
		{
			pthisMagBuffer->iBpFast[i][j][k] = pthisMag->iBpFast[i];
    9b84:	2146      	movs	r1, #70	; 0x46
    9b86:	5a70      	ldrh	r0, [r6, r1]
    9b88:	2190      	movs	r1, #144	; 0x90
    9b8a:	0089      	lsls	r1, r1, #2
    9b8c:	5260      	strh	r0, [r4, r1]
    9b8e:	2148      	movs	r1, #72	; 0x48
    9b90:	5a70      	ldrh	r0, [r6, r1]
    9b92:	2190      	movs	r1, #144	; 0x90
    9b94:	00c9      	lsls	r1, r1, #3
    9b96:	5260      	strh	r0, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:108 (discriminator 1)
		}
		pthisMagBuffer->index[j][k] = loopcounter;
    9b98:	50d5      	str	r5, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:109 (discriminator 1)
		return;
    9b9a:	e7c1      	b.n	9b20 <iUpdateMagnetometerBuffer+0x1e4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:97 (discriminator 1)
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
	if (pthisAccel->iGp[X] < 0) k += MAGBUFFSIZEX;
    9b9c:	310c      	adds	r1, #12
    9b9e:	b2c9      	uxtb	r1, r1
    9ba0:	e768      	b.n	9a74 <iUpdateMagnetometerBuffer+0x138>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:119 (discriminator 1)
	if ((pthisMagBuffer->iMagBufferCount == MAXMEASUREMENTS) && (pthisMagBuffer->index[j][k] == -1))
	{		
		// store the fast (unaveraged at typically 200Hz) integer magnetometer reading into the buffer bin j, k
		for (i = X; i <= Z; i++)
		{
			pthisMagBuffer->iBpFast[i][j][k] = pthisMag->iBpFast[i];
    9ba2:	2046      	movs	r0, #70	; 0x46
    9ba4:	5a37      	ldrh	r7, [r6, r0]
    9ba6:	2090      	movs	r0, #144	; 0x90
    9ba8:	1861      	adds	r1, r4, r1
    9baa:	0080      	lsls	r0, r0, #2
    9bac:	520f      	strh	r7, [r1, r0]
    9bae:	2048      	movs	r0, #72	; 0x48
    9bb0:	5a36      	ldrh	r6, [r6, r0]
    9bb2:	2090      	movs	r0, #144	; 0x90
    9bb4:	00c0      	lsls	r0, r0, #3
    9bb6:	520e      	strh	r6, [r1, r0]
    9bb8:	20d8      	movs	r0, #216	; 0xd8
    9bba:	00c0      	lsls	r0, r0, #3
    9bbc:	1900      	adds	r0, r0, r4
    9bbe:	4684      	mov	ip, r0
    9bc0:	46e0      	mov	r8, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:121 (discriminator 1)
		}
		pthisMagBuffer->index[j][k] = loopcounter;
    9bc2:	50d5      	str	r5, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:126 (discriminator 1)

		// set l and m to the oldest active entry and disable it
		i = loopcounter;
		l = m = 0; // to avoid compiler complaint
		for (j = 0; j < MAGBUFFSIZEX; j++)
    9bc4:	2000      	movs	r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:125 (discriminator 1)
		}
		pthisMagBuffer->index[j][k] = loopcounter;

		// set l and m to the oldest active entry and disable it
		i = loopcounter;
		l = m = 0; // to avoid compiler complaint
    9bc6:	2600      	movs	r6, #0
    9bc8:	2700      	movs	r7, #0
    9bca:	46a4      	mov	ip, r4
    9bcc:	4642      	mov	r2, r8
    9bce:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:131
		for (j = 0; j < MAGBUFFSIZEX; j++)
		{
			for (k = 0; k < MAGBUFFSIZEY; k++)
			{
				// check if the time stamp is older than the oldest found so far (normally fails this test)
				if (pthisMagBuffer->index[j][k] < i)
    9bd0:	6811      	ldr	r1, [r2, #0]
    9bd2:	42a9      	cmp	r1, r5
    9bd4:	da04      	bge.n	9be0 <iUpdateMagnetometerBuffer+0x2a4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:134
				{
					// check if this bin is active (normally passes this test)
					if (pthisMagBuffer->index[j][k] != -1)
    9bd6:	1c4c      	adds	r4, r1, #1
    9bd8:	d002      	beq.n	9be0 <iUpdateMagnetometerBuffer+0x2a4>
    9bda:	1c1e      	adds	r6, r3, #0
    9bdc:	1c07      	adds	r7, r0, #0
    9bde:	1c0d      	adds	r5, r1, #0
    9be0:	3301      	adds	r3, #1
    9be2:	b2db      	uxtb	r3, r3
    9be4:	3204      	adds	r2, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:128
		// set l and m to the oldest active entry and disable it
		i = loopcounter;
		l = m = 0; // to avoid compiler complaint
		for (j = 0; j < MAGBUFFSIZEX; j++)
		{
			for (k = 0; k < MAGBUFFSIZEY; k++)
    9be6:	2b18      	cmp	r3, #24
    9be8:	d1f2      	bne.n	9bd0 <iUpdateMagnetometerBuffer+0x294>
    9bea:	3001      	adds	r0, #1
    9bec:	2160      	movs	r1, #96	; 0x60
    9bee:	b2c0      	uxtb	r0, r0
    9bf0:	4488      	add	r8, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:126
		pthisMagBuffer->index[j][k] = loopcounter;

		// set l and m to the oldest active entry and disable it
		i = loopcounter;
		l = m = 0; // to avoid compiler complaint
		for (j = 0; j < MAGBUFFSIZEX; j++)
    9bf2:	280c      	cmp	r0, #12
    9bf4:	d1ea      	bne.n	9bcc <iUpdateMagnetometerBuffer+0x290>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:147
				} // end of test for older
			} // end of loop over k
		} // end of loop over j

		// deactivate the oldest measurement (no need to zero the measurement data)
		pthisMagBuffer->index[l][m] = -1;
    9bf6:	b27f      	sxtb	r7, r7
    9bf8:	007b      	lsls	r3, r7, #1
    9bfa:	19db      	adds	r3, r3, r7
    9bfc:	b276      	sxtb	r6, r6
    9bfe:	00db      	lsls	r3, r3, #3
    9c00:	199b      	adds	r3, r3, r6
    9c02:	33b1      	adds	r3, #177	; 0xb1
    9c04:	33ff      	adds	r3, #255	; 0xff
    9c06:	2201      	movs	r2, #1
    9c08:	4664      	mov	r4, ip
    9c0a:	009b      	lsls	r3, r3, #2
    9c0c:	4252      	negs	r2, r2
    9c0e:	511a      	str	r2, [r3, r4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:148
		return;
    9c10:	e786      	b.n	9b20 <iUpdateMagnetometerBuffer+0x1e4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:205
					{
						// calculate the vector difference between current measurement and the buffer entry
						idelta = 0;
						for (i = X; i <= Z; i++)
						{
							idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
    9c12:	2090      	movs	r0, #144	; 0x90
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:175
		for (i = X; i <= Z; i++)
		{
			idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
		}
		// check to see if the current reading is close to this existing magnetic buffer entry
		if (idelta < MESHDELTACOUNTS)
    9c14:	2600      	movs	r6, #0
    9c16:	2700      	movs	r7, #0
    9c18:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:205
					{
						// calculate the vector difference between current measurement and the buffer entry
						idelta = 0;
						for (i = X; i <= Z; i++)
						{
							idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
    9c1a:	00c0      	lsls	r0, r0, #3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:175
		for (i = X; i <= Z; i++)
		{
			idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
		}
		// check to see if the current reading is close to this existing magnetic buffer entry
		if (idelta < MESHDELTACOUNTS)
    9c1c:	9602      	str	r6, [sp, #8]
    9c1e:	9701      	str	r7, [sp, #4]
    9c20:	469b      	mov	fp, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:205
					{
						// calculate the vector difference between current measurement and the buffer entry
						idelta = 0;
						for (i = X; i <= Z; i++)
						{
							idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
    9c22:	9f07      	ldr	r7, [sp, #28]
    9c24:	4681      	mov	r9, r0
    9c26:	4666      	mov	r6, ip
    9c28:	9507      	str	r5, [sp, #28]
    9c2a:	4658      	mov	r0, fp
    9c2c:	4659      	mov	r1, fp
    9c2e:	0045      	lsls	r5, r0, #1
    9c30:	b2c9      	uxtb	r1, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:199 (discriminator 1)
				// loop over the buffer k from 0 potentially up to MAGBUFFSIZEY - 1 
				k = 0;
				while (!itooclose && (k < MAGBUFFSIZEY))
				{
					// check whether this buffer entry already has a measurement or not
					if (pthisMagBuffer->index[j][k] != -1)
    9c32:	445d      	add	r5, fp
    9c34:	468c      	mov	ip, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:125 (discriminator 1)
		}
		pthisMagBuffer->index[j][k] = loopcounter;

		// set l and m to the oldest active entry and disable it
		i = loopcounter;
		l = m = 0; // to avoid compiler complaint
    9c36:	2300      	movs	r3, #0
    9c38:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:199 (discriminator 1)
				// loop over the buffer k from 0 potentially up to MAGBUFFSIZEY - 1 
				k = 0;
				while (!itooclose && (k < MAGBUFFSIZEY))
				{
					// check whether this buffer entry already has a measurement or not
					if (pthisMagBuffer->index[j][k] != -1)
    9c3a:	00ed      	lsls	r5, r5, #3
    9c3c:	9600      	str	r6, [sp, #0]
    9c3e:	e032      	b.n	9ca6 <iUpdateMagnetometerBuffer+0x36a>
    9c40:	00000b42 	.word	0x00000b42
    9c44:	00000b44 	.word	0x00000b44
    9c48:	00000b46 	.word	0x00000b46
    9c4c:	00000b48 	.word	0x00000b48
    9c50:	00000b4a 	.word	0x00000b4a
    9c54:	00000b4c 	.word	0x00000b4c
    9c58:	00000b4e 	.word	0x00000b4e
    9c5c:	00000b52 	.word	0x00000b52
    9c60:	00000b54 	.word	0x00000b54
    9c64:	00000b56 	.word	0x00000b56
    9c68:	0051      	lsls	r1, r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:205
					{
						// calculate the vector difference between current measurement and the buffer entry
						idelta = 0;
						for (i = X; i <= Z; i++)
						{
							idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
    9c6a:	5f08      	ldrsh	r0, [r1, r4]
    9c6c:	1862      	adds	r2, r4, r1
    9c6e:	4641      	mov	r1, r8
    9c70:	1a08      	subs	r0, r1, r0
    9c72:	17c6      	asrs	r6, r0, #31
    9c74:	1980      	adds	r0, r0, r6
    9c76:	4070      	eors	r0, r6
    9c78:	4656      	mov	r6, sl
    9c7a:	5f91      	ldrsh	r1, [r2, r6]
    9c7c:	9e00      	ldr	r6, [sp, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:220
					{
						// store the location of this empty bin for future use
						l = j;
						m = k;
					} // end of test for valid measurement in this bin
					k++;
    9c7e:	3301      	adds	r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:205
					{
						// calculate the vector difference between current measurement and the buffer entry
						idelta = 0;
						for (i = X; i <= Z; i++)
						{
							idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
    9c80:	1a71      	subs	r1, r6, r1
    9c82:	17ce      	asrs	r6, r1, #31
    9c84:	1989      	adds	r1, r1, r6
    9c86:	4071      	eors	r1, r6
    9c88:	464e      	mov	r6, r9
    9c8a:	1841      	adds	r1, r0, r1
    9c8c:	5f90      	ldrsh	r0, [r2, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:220
					{
						// store the location of this empty bin for future use
						l = j;
						m = k;
					} // end of test for valid measurement in this bin
					k++;
    9c8e:	b2db      	uxtb	r3, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:205
					{
						// calculate the vector difference between current measurement and the buffer entry
						idelta = 0;
						for (i = X; i <= Z; i++)
						{
							idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
    9c90:	1a38      	subs	r0, r7, r0
    9c92:	17c2      	asrs	r2, r0, #31
    9c94:	1880      	adds	r0, r0, r2
    9c96:	4050      	eors	r0, r2
    9c98:	1809      	adds	r1, r1, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:196
			j = 0;
			while (!itooclose && (j < MAGBUFFSIZEX))
			{
				// loop over the buffer k from 0 potentially up to MAGBUFFSIZEY - 1 
				k = 0;
				while (!itooclose && (k < MAGBUFFSIZEY))
    9c9a:	2931      	cmp	r1, #49	; 0x31
    9c9c:	dc00      	bgt.n	9ca0 <iUpdateMagnetometerBuffer+0x364>
    9c9e:	e73f      	b.n	9b20 <iUpdateMagnetometerBuffer+0x1e4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:196 (discriminator 2)
    9ca0:	b25a      	sxtb	r2, r3
    9ca2:	2a18      	cmp	r2, #24
    9ca4:	d00f      	beq.n	9cc6 <iUpdateMagnetometerBuffer+0x38a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:199
				{
					// check whether this buffer entry already has a measurement or not
					if (pthisMagBuffer->index[j][k] != -1)
    9ca6:	20d8      	movs	r0, #216	; 0xd8
    9ca8:	18aa      	adds	r2, r5, r2
    9caa:	0040      	lsls	r0, r0, #1
    9cac:	1811      	adds	r1, r2, r0
    9cae:	0089      	lsls	r1, r1, #2
    9cb0:	5909      	ldr	r1, [r1, r4]
    9cb2:	3101      	adds	r1, #1
    9cb4:	d1d8      	bne.n	9c68 <iUpdateMagnetometerBuffer+0x32c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:220
					{
						// store the location of this empty bin for future use
						l = j;
						m = k;
					} // end of test for valid measurement in this bin
					k++;
    9cb6:	1c5a      	adds	r2, r3, #1
    9cb8:	9302      	str	r3, [sp, #8]
    9cba:	b2d3      	uxtb	r3, r2
    9cbc:	4662      	mov	r2, ip
    9cbe:	9201      	str	r2, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:196
			j = 0;
			while (!itooclose && (j < MAGBUFFSIZEX))
			{
				// loop over the buffer k from 0 potentially up to MAGBUFFSIZEY - 1 
				k = 0;
				while (!itooclose && (k < MAGBUFFSIZEY))
    9cc0:	b25a      	sxtb	r2, r3
    9cc2:	2a18      	cmp	r2, #24
    9cc4:	d1ef      	bne.n	9ca6 <iUpdateMagnetometerBuffer+0x36a>
    9cc6:	2301      	movs	r3, #1
    9cc8:	449b      	add	fp, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:192
			itooclose = 0;
			// to avoid compiler warning
			l = m = 0;
			// loop over the buffer j from 0 potentially up to MAGBUFFSIZEX - 1 
			j = 0;
			while (!itooclose && (j < MAGBUFFSIZEX))
    9cca:	4658      	mov	r0, fp
    9ccc:	9e00      	ldr	r6, [sp, #0]
    9cce:	280c      	cmp	r0, #12
    9cd0:	d1ab      	bne.n	9c2a <iUpdateMagnetometerBuffer+0x2ee>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:231
			// l and m are guaranteed to be set if no entries too close are detected
			if (!itooclose)
			{
				for (i = X; i <= Z; i++)
				{
					pthisMagBuffer->iBpFast[i][l][m] = pthisMag->iBpFast[i];
    9cd2:	9901      	ldr	r1, [sp, #4]
    9cd4:	9b02      	ldr	r3, [sp, #8]
    9cd6:	b24a      	sxtb	r2, r1
    9cd8:	b259      	sxtb	r1, r3
    9cda:	0053      	lsls	r3, r2, #1
    9cdc:	189b      	adds	r3, r3, r2
    9cde:	00db      	lsls	r3, r3, #3
    9ce0:	185b      	adds	r3, r3, r1
    9ce2:	9e04      	ldr	r6, [sp, #16]
    9ce4:	005a      	lsls	r2, r3, #1
    9ce6:	2190      	movs	r1, #144	; 0x90
    9ce8:	9f06      	ldr	r7, [sp, #24]
    9cea:	5316      	strh	r6, [r2, r4]
    9cec:	0089      	lsls	r1, r1, #2
    9cee:	18a2      	adds	r2, r4, r2
    9cf0:	5257      	strh	r7, [r2, r1]
    9cf2:	9805      	ldr	r0, [sp, #20]
    9cf4:	2190      	movs	r1, #144	; 0x90
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:233
				}
				pthisMagBuffer->index[l][m] = loopcounter;
    9cf6:	33b1      	adds	r3, #177	; 0xb1
    9cf8:	9d07      	ldr	r5, [sp, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:231
			// l and m are guaranteed to be set if no entries too close are detected
			if (!itooclose)
			{
				for (i = X; i <= Z; i++)
				{
					pthisMagBuffer->iBpFast[i][l][m] = pthisMag->iBpFast[i];
    9cfa:	00c9      	lsls	r1, r1, #3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:233
				}
				pthisMagBuffer->index[l][m] = loopcounter;
    9cfc:	33ff      	adds	r3, #255	; 0xff
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:231
			// l and m are guaranteed to be set if no entries too close are detected
			if (!itooclose)
			{
				for (i = X; i <= Z; i++)
				{
					pthisMagBuffer->iBpFast[i][l][m] = pthisMag->iBpFast[i];
    9cfe:	5250      	strh	r0, [r2, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:233
				}
				pthisMagBuffer->index[l][m] = loopcounter;
    9d00:	009b      	lsls	r3, r3, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:234
				(pthisMagBuffer->iMagBufferCount)++;
    9d02:	9a03      	ldr	r2, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:233
			{
				for (i = X; i <= Z; i++)
				{
					pthisMagBuffer->iBpFast[i][l][m] = pthisMag->iBpFast[i];
				}
				pthisMagBuffer->index[l][m] = loopcounter;
    9d04:	511d      	str	r5, [r3, r4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:234
				(pthisMagBuffer->iMagBufferCount)++;
    9d06:	4b17      	ldr	r3, [pc, #92]	; (9d64 <iUpdateMagnetometerBuffer+0x428>)
    9d08:	3201      	adds	r2, #1
    9d0a:	52e2      	strh	r2, [r4, r3]
    9d0c:	e708      	b.n	9b20 <iUpdateMagnetometerBuffer+0x1e4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:95
	itank = (100 * (int32)pthisAccel->iGp[Z]) / ((int32)pthisAccel->iGp[X]);
	// map tangent ratios to bins j and k using equal angle bins: C guarantees left to right execution of the test
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
    9d0e:	2204      	movs	r2, #4
    9d10:	e673      	b.n	99fa <iUpdateMagnetometerBuffer+0xbe>
    9d12:	2200      	movs	r2, #0
    9d14:	e671      	b.n	99fa <iUpdateMagnetometerBuffer+0xbe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:96
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
    9d16:	2101      	movs	r1, #1
    9d18:	e6a8      	b.n	9a6c <iUpdateMagnetometerBuffer+0x130>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:95
	itank = (100 * (int32)pthisAccel->iGp[Z]) / ((int32)pthisAccel->iGp[X]);
	// map tangent ratios to bins j and k using equal angle bins: C guarantees left to right execution of the test
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
    9d1a:	2201      	movs	r2, #1
    9d1c:	e66d      	b.n	99fa <iUpdateMagnetometerBuffer+0xbe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:96
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
    9d1e:	2100      	movs	r1, #0
    9d20:	e6a4      	b.n	9a6c <iUpdateMagnetometerBuffer+0x130>
    9d22:	2102      	movs	r1, #2
    9d24:	e6a2      	b.n	9a6c <iUpdateMagnetometerBuffer+0x130>
    9d26:	2103      	movs	r1, #3
    9d28:	e6a0      	b.n	9a6c <iUpdateMagnetometerBuffer+0x130>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:95
	itank = (100 * (int32)pthisAccel->iGp[Z]) / ((int32)pthisAccel->iGp[X]);
	// map tangent ratios to bins j and k using equal angle bins: C guarantees left to right execution of the test
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
    9d2a:	2203      	movs	r2, #3
    9d2c:	e665      	b.n	99fa <iUpdateMagnetometerBuffer+0xbe>
    9d2e:	2202      	movs	r2, #2
    9d30:	e663      	b.n	99fa <iUpdateMagnetometerBuffer+0xbe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:96
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
    9d32:	2104      	movs	r1, #4
    9d34:	e69a      	b.n	9a6c <iUpdateMagnetometerBuffer+0x130>
    9d36:	2105      	movs	r1, #5
    9d38:	e698      	b.n	9a6c <iUpdateMagnetometerBuffer+0x130>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:95
	itank = (100 * (int32)pthisAccel->iGp[Z]) / ((int32)pthisAccel->iGp[X]);
	// map tangent ratios to bins j and k using equal angle bins: C guarantees left to right execution of the test
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
    9d3a:	2205      	movs	r2, #5
    9d3c:	e65d      	b.n	99fa <iUpdateMagnetometerBuffer+0xbe>
    9d3e:	2208      	movs	r2, #8
    9d40:	e65b      	b.n	99fa <iUpdateMagnetometerBuffer+0xbe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:96
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
    9d42:	2107      	movs	r1, #7
    9d44:	e692      	b.n	9a6c <iUpdateMagnetometerBuffer+0x130>
    9d46:	2108      	movs	r1, #8
    9d48:	e690      	b.n	9a6c <iUpdateMagnetometerBuffer+0x130>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:95
	itank = (100 * (int32)pthisAccel->iGp[Z]) / ((int32)pthisAccel->iGp[X]);
	// map tangent ratios to bins j and k using equal angle bins: C guarantees left to right execution of the test
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
    9d4a:	2206      	movs	r2, #6
    9d4c:	e655      	b.n	99fa <iUpdateMagnetometerBuffer+0xbe>
    9d4e:	2207      	movs	r2, #7
    9d50:	e653      	b.n	99fa <iUpdateMagnetometerBuffer+0xbe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:96
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
    9d52:	2106      	movs	r1, #6
    9d54:	e68a      	b.n	9a6c <iUpdateMagnetometerBuffer+0x130>
    9d56:	2109      	movs	r1, #9
    9d58:	e688      	b.n	9a6c <iUpdateMagnetometerBuffer+0x130>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:95
	itank = (100 * (int32)pthisAccel->iGp[Z]) / ((int32)pthisAccel->iGp[X]);
	// map tangent ratios to bins j and k using equal angle bins: C guarantees left to right execution of the test
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
    9d5a:	220a      	movs	r2, #10
    9d5c:	e64d      	b.n	99fa <iUpdateMagnetometerBuffer+0xbe>
    9d5e:	2209      	movs	r2, #9
    9d60:	e64b      	b.n	99fa <iUpdateMagnetometerBuffer+0xbe>
    9d62:	46c0      	nop			; (mov r8, r8)
    9d64:	00000b56 	.word	0x00000b56

00009d68 <fInvertMagCal>:
fInvertMagCal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:246
	return;
}

// function maps the uncalibrated magnetometer data Bp (uT) onto calibrated data Bc (uT)
void fInvertMagCal(struct MagSensor *pthisMag, struct MagCalibration *pthisMagCal)
{
    9d68:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d6a:	4657      	mov	r7, sl
    9d6c:	464e      	mov	r6, r9
    9d6e:	4645      	mov	r5, r8
    9d70:	b4e0      	push	{r5, r6, r7}
    9d72:	1c0c      	adds	r4, r1, #0
    9d74:	b084      	sub	sp, #16
    9d76:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:255

	// calculate fBc and iBc for the 6DOF eCompass algorithms
	// remove the computed hard iron offsets (uT): ftmp[]=fBp[]-V[]
	for (i = X; i <= Z; i++)
	{
		ftmp[i] = pthisMag->fBp[i] - pthisMagCal->fV[i];
    9d78:	6809      	ldr	r1, [r1, #0]
    9d7a:	6980      	ldr	r0, [r0, #24]
    9d7c:	f7f7 f934 	bl	fe8 <__aeabi_fsub>
    9d80:	6861      	ldr	r1, [r4, #4]
    9d82:	4681      	mov	r9, r0
    9d84:	69e8      	ldr	r0, [r5, #28]
    9d86:	f7f7 f92f 	bl	fe8 <__aeabi_fsub>
    9d8a:	68a1      	ldr	r1, [r4, #8]
    9d8c:	4680      	mov	r8, r0
    9d8e:	6a28      	ldr	r0, [r5, #32]
    9d90:	f7f7 f92a 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:260
	}
	// remove the computed soft iron offsets (uT and counts): fBc=inv(W)*(fBp[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBc[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
    9d94:	68e1      	ldr	r1, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:255

	// calculate fBc and iBc for the 6DOF eCompass algorithms
	// remove the computed hard iron offsets (uT): ftmp[]=fBp[]-V[]
	for (i = X; i <= Z; i++)
	{
		ftmp[i] = pthisMag->fBp[i] - pthisMagCal->fV[i];
    9d96:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:260
	}
	// remove the computed soft iron offsets (uT and counts): fBc=inv(W)*(fBp[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBc[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
    9d98:	4648      	mov	r0, r9
    9d9a:	f7f6 fffb 	bl	d94 <__aeabi_fmul>
    9d9e:	6921      	ldr	r1, [r4, #16]
    9da0:	4682      	mov	sl, r0
    9da2:	4640      	mov	r0, r8
    9da4:	f7f6 fff6 	bl	d94 <__aeabi_fmul>
    9da8:	1c01      	adds	r1, r0, #0
    9daa:	4650      	mov	r0, sl
    9dac:	f7f6 fca2 	bl	6f4 <__aeabi_fadd>
    9db0:	6961      	ldr	r1, [r4, #20]
    9db2:	4682      	mov	sl, r0
    9db4:	1c38      	adds	r0, r7, #0
    9db6:	f7f6 ffed 	bl	d94 <__aeabi_fmul>
    9dba:	1c01      	adds	r1, r0, #0
    9dbc:	4650      	mov	r0, sl
    9dbe:	f7f6 fc99 	bl	6f4 <__aeabi_fadd>
    9dc2:	6c2e      	ldr	r6, [r5, #64]	; 0x40
    9dc4:	6328      	str	r0, [r5, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:261
		pthisMag->iBc[i] = (int16) (pthisMag->fBc[i] * pthisMag->fCountsPeruT);
    9dc6:	1c31      	adds	r1, r6, #0
    9dc8:	f7f6 ffe4 	bl	d94 <__aeabi_fmul>
    9dcc:	f7f7 fa82 	bl	12d4 <__aeabi_f2iz>
    9dd0:	2350      	movs	r3, #80	; 0x50
    9dd2:	52e8      	strh	r0, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:260
		ftmp[i] = pthisMag->fBp[i] - pthisMagCal->fV[i];
	}
	// remove the computed soft iron offsets (uT and counts): fBc=inv(W)*(fBp[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBc[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
    9dd4:	69a1      	ldr	r1, [r4, #24]
    9dd6:	4648      	mov	r0, r9
    9dd8:	f7f6 ffdc 	bl	d94 <__aeabi_fmul>
    9ddc:	69e1      	ldr	r1, [r4, #28]
    9dde:	4682      	mov	sl, r0
    9de0:	4640      	mov	r0, r8
    9de2:	f7f6 ffd7 	bl	d94 <__aeabi_fmul>
    9de6:	1c01      	adds	r1, r0, #0
    9de8:	4650      	mov	r0, sl
    9dea:	f7f6 fc83 	bl	6f4 <__aeabi_fadd>
    9dee:	6a21      	ldr	r1, [r4, #32]
    9df0:	4682      	mov	sl, r0
    9df2:	1c38      	adds	r0, r7, #0
    9df4:	f7f6 ffce 	bl	d94 <__aeabi_fmul>
    9df8:	1c01      	adds	r1, r0, #0
    9dfa:	4650      	mov	r0, sl
    9dfc:	f7f6 fc7a 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:261
		pthisMag->iBc[i] = (int16) (pthisMag->fBc[i] * pthisMag->fCountsPeruT);
    9e00:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:260
		ftmp[i] = pthisMag->fBp[i] - pthisMagCal->fV[i];
	}
	// remove the computed soft iron offsets (uT and counts): fBc=inv(W)*(fBp[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBc[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
    9e02:	6368      	str	r0, [r5, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:261
		pthisMag->iBc[i] = (int16) (pthisMag->fBc[i] * pthisMag->fCountsPeruT);
    9e04:	f7f6 ffc6 	bl	d94 <__aeabi_fmul>
    9e08:	f7f7 fa64 	bl	12d4 <__aeabi_f2iz>
    9e0c:	2352      	movs	r3, #82	; 0x52
    9e0e:	52e8      	strh	r0, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:260
		ftmp[i] = pthisMag->fBp[i] - pthisMagCal->fV[i];
	}
	// remove the computed soft iron offsets (uT and counts): fBc=inv(W)*(fBp[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBc[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
    9e10:	6a61      	ldr	r1, [r4, #36]	; 0x24
    9e12:	4648      	mov	r0, r9
    9e14:	f7f6 ffbe 	bl	d94 <__aeabi_fmul>
    9e18:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    9e1a:	4681      	mov	r9, r0
    9e1c:	4640      	mov	r0, r8
    9e1e:	f7f6 ffb9 	bl	d94 <__aeabi_fmul>
    9e22:	1c01      	adds	r1, r0, #0
    9e24:	4648      	mov	r0, r9
    9e26:	f7f6 fc65 	bl	6f4 <__aeabi_fadd>
    9e2a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    9e2c:	4680      	mov	r8, r0
    9e2e:	1c38      	adds	r0, r7, #0
    9e30:	f7f6 ffb0 	bl	d94 <__aeabi_fmul>
    9e34:	1c01      	adds	r1, r0, #0
    9e36:	4640      	mov	r0, r8
    9e38:	f7f6 fc5c 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:261
		pthisMag->iBc[i] = (int16) (pthisMag->fBc[i] * pthisMag->fCountsPeruT);
    9e3c:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:260
		ftmp[i] = pthisMag->fBp[i] - pthisMagCal->fV[i];
	}
	// remove the computed soft iron offsets (uT and counts): fBc=inv(W)*(fBp[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBc[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
    9e3e:	63a8      	str	r0, [r5, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:261
		pthisMag->iBc[i] = (int16) (pthisMag->fBc[i] * pthisMag->fCountsPeruT);
    9e40:	f7f6 ffa8 	bl	d94 <__aeabi_fmul>
    9e44:	f7f7 fa46 	bl	12d4 <__aeabi_f2iz>
    9e48:	2354      	movs	r3, #84	; 0x54
    9e4a:	52e8      	strh	r0, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:268
	
	// calculate fBcFast for the Kalman filter algorithms
	// remove the computed hard iron offsets (uT): ftmp[]=fBpFast[]-V[]
	for (i = X; i <= Z; i++)
	{
		ftmp[i] = pthisMag->fBpFast[i] - pthisMagCal->fV[i];
    9e4c:	6821      	ldr	r1, [r4, #0]
    9e4e:	68e8      	ldr	r0, [r5, #12]
    9e50:	f7f7 f8ca 	bl	fe8 <__aeabi_fsub>
    9e54:	6861      	ldr	r1, [r4, #4]
    9e56:	4680      	mov	r8, r0
    9e58:	6928      	ldr	r0, [r5, #16]
    9e5a:	f7f7 f8c5 	bl	fe8 <__aeabi_fsub>
    9e5e:	68a1      	ldr	r1, [r4, #8]
    9e60:	1c07      	adds	r7, r0, #0
    9e62:	6968      	ldr	r0, [r5, #20]
    9e64:	f7f7 f8c0 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:273
	}
	// remove the computed soft iron offsets (uT and counts): fBcFast=inv(W)*(fBpFast[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBcFast[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
    9e68:	68e1      	ldr	r1, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:268
	
	// calculate fBcFast for the Kalman filter algorithms
	// remove the computed hard iron offsets (uT): ftmp[]=fBpFast[]-V[]
	for (i = X; i <= Z; i++)
	{
		ftmp[i] = pthisMag->fBpFast[i] - pthisMagCal->fV[i];
    9e6a:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:273
	}
	// remove the computed soft iron offsets (uT and counts): fBcFast=inv(W)*(fBpFast[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBcFast[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
    9e6c:	4640      	mov	r0, r8
    9e6e:	f7f6 ff91 	bl	d94 <__aeabi_fmul>
    9e72:	6921      	ldr	r1, [r4, #16]
    9e74:	4681      	mov	r9, r0
    9e76:	1c38      	adds	r0, r7, #0
    9e78:	f7f6 ff8c 	bl	d94 <__aeabi_fmul>
    9e7c:	1c01      	adds	r1, r0, #0
    9e7e:	4648      	mov	r0, r9
    9e80:	f7f6 fc38 	bl	6f4 <__aeabi_fadd>
    9e84:	6961      	ldr	r1, [r4, #20]
    9e86:	4681      	mov	r9, r0
    9e88:	1c30      	adds	r0, r6, #0
    9e8a:	f7f6 ff83 	bl	d94 <__aeabi_fmul>
    9e8e:	1c01      	adds	r1, r0, #0
    9e90:	4648      	mov	r0, r9
    9e92:	f7f6 fc2f 	bl	6f4 <__aeabi_fadd>
    9e96:	69a1      	ldr	r1, [r4, #24]
    9e98:	6268      	str	r0, [r5, #36]	; 0x24
    9e9a:	4640      	mov	r0, r8
    9e9c:	f7f6 ff7a 	bl	d94 <__aeabi_fmul>
    9ea0:	69e1      	ldr	r1, [r4, #28]
    9ea2:	4681      	mov	r9, r0
    9ea4:	1c38      	adds	r0, r7, #0
    9ea6:	f7f6 ff75 	bl	d94 <__aeabi_fmul>
    9eaa:	1c01      	adds	r1, r0, #0
    9eac:	4648      	mov	r0, r9
    9eae:	f7f6 fc21 	bl	6f4 <__aeabi_fadd>
    9eb2:	6a21      	ldr	r1, [r4, #32]
    9eb4:	4681      	mov	r9, r0
    9eb6:	1c30      	adds	r0, r6, #0
    9eb8:	f7f6 ff6c 	bl	d94 <__aeabi_fmul>
    9ebc:	1c01      	adds	r1, r0, #0
    9ebe:	4648      	mov	r0, r9
    9ec0:	f7f6 fc18 	bl	6f4 <__aeabi_fadd>
    9ec4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    9ec6:	62a8      	str	r0, [r5, #40]	; 0x28
    9ec8:	4640      	mov	r0, r8
    9eca:	f7f6 ff63 	bl	d94 <__aeabi_fmul>
    9ece:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    9ed0:	4680      	mov	r8, r0
    9ed2:	1c38      	adds	r0, r7, #0
    9ed4:	f7f6 ff5e 	bl	d94 <__aeabi_fmul>
    9ed8:	1c01      	adds	r1, r0, #0
    9eda:	4640      	mov	r0, r8
    9edc:	f7f6 fc0a 	bl	6f4 <__aeabi_fadd>
    9ee0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    9ee2:	1c07      	adds	r7, r0, #0
    9ee4:	1c30      	adds	r0, r6, #0
    9ee6:	f7f6 ff55 	bl	d94 <__aeabi_fmul>
    9eea:	1c01      	adds	r1, r0, #0
    9eec:	1c38      	adds	r0, r7, #0
    9eee:	f7f6 fc01 	bl	6f4 <__aeabi_fadd>
    9ef2:	62e8      	str	r0, [r5, #44]	; 0x2c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:277
	}

	return;
}
    9ef4:	b004      	add	sp, #16
    9ef6:	bc1c      	pop	{r2, r3, r4}
    9ef8:	4690      	mov	r8, r2
    9efa:	4699      	mov	r9, r3
    9efc:	46a2      	mov	sl, r4
    9efe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009f00 <fUpdateCalibration4INV>:
fUpdateCalibration4INV():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:281

// 4 element calibration using 4x4 matrix inverse
void fUpdateCalibration4INV(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer, struct MagSensor *pthisMag)
{
    9f00:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f02:	4656      	mov	r6, sl
    9f04:	464d      	mov	r5, r9
    9f06:	4644      	mov	r4, r8
    9f08:	465f      	mov	r7, fp
    9f0a:	b4f0      	push	{r4, r5, r6, r7}
    9f0c:	b09b      	sub	sp, #108	; 0x6c
    9f0e:	1c04      	adds	r4, r0, #0
    9f10:	910e      	str	r1, [sp, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:298
	int8 iColInd[4];
	int8 iRowInd[4];
	int8 iPivot[4];

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;
    9f12:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    9f14:	49a0      	ldr	r1, [pc, #640]	; (a198 <fUpdateCalibration4INV+0x298>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:281
	return;
}

// 4 element calibration using 4x4 matrix inverse
void fUpdateCalibration4INV(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer, struct MagSensor *pthisMag)
{
    9f16:	920f      	str	r2, [sp, #60]	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:298
	int8 iColInd[4];
	int8 iRowInd[4];
	int8 iPivot[4];

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;
    9f18:	f7f6 fd58 	bl	9cc <__aeabi_fdiv>
    9f1c:	9006      	str	r0, [sp, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:301

	// the trial inverse soft iron matrix invW always equals the identity matrix for 4 element calibration
	f3x3matrixAeqI(pthisMagCal->ftrinvW);
    9f1e:	1c20      	adds	r0, r4, #0
    9f20:	3048      	adds	r0, #72	; 0x48
    9f22:	f001 fbe1 	bl	b6e8 <f3x3matrixAeqI>
    9f26:	499d      	ldr	r1, [pc, #628]	; (a19c <fUpdateCalibration4INV+0x29c>)
    9f28:	2600      	movs	r6, #0
    9f2a:	1865      	adds	r5, r4, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:307

	// zero fSumBp4=Y^T.Y, fvecB=X^T.Y (4x1) and on and above diagonal elements of fmatA=X^T*X (4x4)
	fSumBp4 = 0.0F;
	for (i = 0; i < 4; i++)
	{
		pthisMagCal->fvecB[i] = 0.0F;
    9f2c:	2100      	movs	r1, #0
    9f2e:	00b0      	lsls	r0, r6, #2
    9f30:	b2f3      	uxtb	r3, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:310
		for (j = i; j < 4; j++)
		{
			pthisMagCal->fmatA[i][j] = 0.0F;
    9f32:	1980      	adds	r0, r0, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:307

	// zero fSumBp4=Y^T.Y, fvecB=X^T.Y (4x1) and on and above diagonal elements of fmatA=X^T*X (4x4)
	fSumBp4 = 0.0F;
	for (i = 0; i < 4; i++)
	{
		pthisMagCal->fvecB[i] = 0.0F;
    9f34:	6029      	str	r1, [r5, #0]
    9f36:	b25a      	sxtb	r2, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:310
		for (j = i; j < 4; j++)
		{
			pthisMagCal->fmatA[i][j] = 0.0F;
    9f38:	0040      	lsls	r0, r0, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:310 (discriminator 2)
    9f3a:	1882      	adds	r2, r0, r2
    9f3c:	322e      	adds	r2, #46	; 0x2e
    9f3e:	0092      	lsls	r2, r2, #2
    9f40:	3301      	adds	r3, #1
    9f42:	18a2      	adds	r2, r4, r2
    9f44:	b2db      	uxtb	r3, r3
    9f46:	6051      	str	r1, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:308 (discriminator 2)
	// zero fSumBp4=Y^T.Y, fvecB=X^T.Y (4x1) and on and above diagonal elements of fmatA=X^T*X (4x4)
	fSumBp4 = 0.0F;
	for (i = 0; i < 4; i++)
	{
		pthisMagCal->fvecB[i] = 0.0F;
		for (j = i; j < 4; j++)
    9f48:	b25a      	sxtb	r2, r3
    9f4a:	2a03      	cmp	r2, #3
    9f4c:	ddf5      	ble.n	9f3a <fUpdateCalibration4INV+0x3a>
    9f4e:	3601      	adds	r6, #1
    9f50:	3504      	adds	r5, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:305
	// the trial inverse soft iron matrix invW always equals the identity matrix for 4 element calibration
	f3x3matrixAeqI(pthisMagCal->ftrinvW);

	// zero fSumBp4=Y^T.Y, fvecB=X^T.Y (4x1) and on and above diagonal elements of fmatA=X^T*X (4x4)
	fSumBp4 = 0.0F;
	for (i = 0; i < 4; i++)
    9f52:	2e04      	cmp	r6, #4
    9f54:	d1eb      	bne.n	9f2e <fUpdateCalibration4INV+0x2e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:315
			pthisMagCal->fmatA[i][j] = 0.0F;
		}
	}

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
    9f56:	2652      	movs	r6, #82	; 0x52
    9f58:	2300      	movs	r3, #0
    9f5a:	446e      	add	r6, sp
    9f5c:	aa15      	add	r2, sp, #84	; 0x54
    9f5e:	8033      	strh	r3, [r6, #0]
    9f60:	2600      	movs	r6, #0
    9f62:	8013      	strh	r3, [r2, #0]
    9f64:	960b      	str	r6, [sp, #44]	; 0x2c
    9f66:	960a      	str	r6, [sp, #40]	; 0x28
    9f68:	21e4      	movs	r1, #228	; 0xe4
    9f6a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    9f6c:	22ba      	movs	r2, #186	; 0xba
    9f6e:	00c9      	lsls	r1, r1, #3
    9f70:	0112      	lsls	r2, r2, #4
    9f72:	1871      	adds	r1, r6, r1
    9f74:	18b2      	adds	r2, r6, r2
    9f76:	960c      	str	r6, [sp, #48]	; 0x30
    9f78:	2600      	movs	r6, #0
    9f7a:	9609      	str	r6, [sp, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:318

	// use from MINEQUATIONS up to MAXEQUATIONS entries from magnetic buffer to compute matrices
	iCount = 0;
    9f7c:	9605      	str	r6, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:304

	// the trial inverse soft iron matrix invW always equals the identity matrix for 4 element calibration
	f3x3matrixAeqI(pthisMagCal->ftrinvW);

	// zero fSumBp4=Y^T.Y, fvecB=X^T.Y (4x1) and on and above diagonal elements of fmatA=X^T*X (4x4)
	fSumBp4 = 0.0F;
    9f7e:	2600      	movs	r6, #0
    9f80:	9108      	str	r1, [sp, #32]
    9f82:	920d      	str	r2, [sp, #52]	; 0x34
    9f84:	9607      	str	r6, [sp, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:301 (discriminator 1)

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;

	// the trial inverse soft iron matrix invW always equals the identity matrix for 4 element calibration
	f3x3matrixAeqI(pthisMagCal->ftrinvW);
    9f86:	9b08      	ldr	r3, [sp, #32]
    9f88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9f8a:	4698      	mov	r8, r3
    9f8c:	2360      	movs	r3, #96	; 0x60
    9f8e:	425b      	negs	r3, r3
    9f90:	4498      	add	r8, r3
    9f92:	4692      	mov	sl, r2
    9f94:	46c1      	mov	r9, r8
    9f96:	e0e4      	b.n	a162 <fUpdateCalibration4INV+0x262>
    9f98:	4651      	mov	r1, sl
    9f9a:	9e09      	ldr	r6, [sp, #36]	; 0x24
    9f9c:	2000      	movs	r0, #0
    9f9e:	5e08      	ldrsh	r0, [r1, r0]
    9fa0:	b233      	sxth	r3, r6
    9fa2:	1ac0      	subs	r0, r0, r3
    9fa4:	f7f7 f9b6 	bl	1314 <__aeabi_i2f>
    9fa8:	2190      	movs	r1, #144	; 0x90
    9faa:	0089      	lsls	r1, r1, #2
    9fac:	1c0b      	adds	r3, r1, #0
    9fae:	4453      	add	r3, sl
    9fb0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    9fb2:	1c07      	adds	r7, r0, #0
    9fb4:	2200      	movs	r2, #0
    9fb6:	5e98      	ldrsh	r0, [r3, r2]
    9fb8:	b233      	sxth	r3, r6
    9fba:	1ac0      	subs	r0, r0, r3
    9fbc:	f7f7 f9aa 	bl	1314 <__aeabi_i2f>
    9fc0:	2190      	movs	r1, #144	; 0x90
    9fc2:	00c9      	lsls	r1, r1, #3
    9fc4:	1c0b      	adds	r3, r1, #0
    9fc6:	4453      	add	r3, sl
    9fc8:	990a      	ldr	r1, [sp, #40]	; 0x28
    9fca:	1c06      	adds	r6, r0, #0
    9fcc:	2200      	movs	r2, #0
    9fce:	5e98      	ldrsh	r0, [r3, r2]
    9fd0:	b20b      	sxth	r3, r1
    9fd2:	1ac0      	subs	r0, r0, r3
    9fd4:	f7f7 f99e 	bl	1314 <__aeabi_i2f>
    9fd8:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:337 (discriminator 1)
				}

				// store scaled and offset fBp[XYZ] in fvecA[0-2] and fBp[XYZ]^2 in fvecA[3-5]
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    9fda:	1c39      	adds	r1, r7, #0
    9fdc:	9806      	ldr	r0, [sp, #24]
    9fde:	f7f6 fed9 	bl	d94 <__aeabi_fmul>
    9fe2:	22f7      	movs	r2, #247	; 0xf7
    9fe4:	1c07      	adds	r7, r0, #0
    9fe6:	0092      	lsls	r2, r2, #2
    9fe8:	50a0      	str	r0, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:338 (discriminator 1)
					pthisMagCal->fvecA[l + 3] = pthisMagCal->fvecA[l] * pthisMagCal->fvecA[l];
    9fea:	1c39      	adds	r1, r7, #0
    9fec:	f7f6 fed2 	bl	d94 <__aeabi_fmul>
    9ff0:	23fa      	movs	r3, #250	; 0xfa
    9ff2:	009b      	lsls	r3, r3, #2
    9ff4:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:337 (discriminator 1)
				}

				// store scaled and offset fBp[XYZ] in fvecA[0-2] and fBp[XYZ]^2 in fvecA[3-5]
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    9ff6:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:338 (discriminator 1)
					pthisMagCal->fvecA[l + 3] = pthisMagCal->fvecA[l] * pthisMagCal->fvecA[l];
    9ff8:	9002      	str	r0, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:337 (discriminator 1)
				}

				// store scaled and offset fBp[XYZ] in fvecA[0-2] and fBp[XYZ]^2 in fvecA[3-5]
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    9ffa:	9806      	ldr	r0, [sp, #24]
    9ffc:	f7f6 feca 	bl	d94 <__aeabi_fmul>
    a000:	21f8      	movs	r1, #248	; 0xf8
    a002:	1c06      	adds	r6, r0, #0
    a004:	0089      	lsls	r1, r1, #2
    a006:	5060      	str	r0, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:338 (discriminator 1)
					pthisMagCal->fvecA[l + 3] = pthisMagCal->fvecA[l] * pthisMagCal->fvecA[l];
    a008:	1c31      	adds	r1, r6, #0
    a00a:	f7f6 fec3 	bl	d94 <__aeabi_fmul>
    a00e:	22fb      	movs	r2, #251	; 0xfb
    a010:	0092      	lsls	r2, r2, #2
    a012:	50a0      	str	r0, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:337 (discriminator 1)
				}

				// store scaled and offset fBp[XYZ] in fvecA[0-2] and fBp[XYZ]^2 in fvecA[3-5]
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    a014:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:338 (discriminator 1)
					pthisMagCal->fvecA[l + 3] = pthisMagCal->fvecA[l] * pthisMagCal->fvecA[l];
    a016:	9003      	str	r0, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:337 (discriminator 1)
				}

				// store scaled and offset fBp[XYZ] in fvecA[0-2] and fBp[XYZ]^2 in fvecA[3-5]
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    a018:	9806      	ldr	r0, [sp, #24]
    a01a:	f7f6 febb 	bl	d94 <__aeabi_fmul>
    a01e:	23f9      	movs	r3, #249	; 0xf9
    a020:	009b      	lsls	r3, r3, #2
    a022:	1c05      	adds	r5, r0, #0
    a024:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:338 (discriminator 1)
					pthisMagCal->fvecA[l + 3] = pthisMagCal->fvecA[l] * pthisMagCal->fvecA[l];
    a026:	1c29      	adds	r1, r5, #0
    a028:	f7f6 feb4 	bl	d94 <__aeabi_fmul>
    a02c:	21fc      	movs	r1, #252	; 0xfc
    a02e:	0089      	lsls	r1, r1, #2
    a030:	5060      	str	r0, [r4, r1]
    a032:	9004      	str	r0, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:342 (discriminator 1)
				}

				// calculate fBp2 = fBp[X]^2 + fBp[Y]^2 + fBp[Z]^2 (scaled uT^2) 
				fBp2 = pthisMagCal->fvecA[3] + pthisMagCal->fvecA[4] + pthisMagCal->fvecA[5];
    a034:	9903      	ldr	r1, [sp, #12]
    a036:	9802      	ldr	r0, [sp, #8]
    a038:	f7f6 fb5c 	bl	6f4 <__aeabi_fadd>
    a03c:	9904      	ldr	r1, [sp, #16]
    a03e:	f7f6 fb59 	bl	6f4 <__aeabi_fadd>
    a042:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:345 (discriminator 1)

				// accumulate fBp^4 over all measurements into fSumBp4=Y^T.Y
				fSumBp4 += fBp2 * fBp2;
    a044:	4641      	mov	r1, r8
    a046:	f7f6 fea5 	bl	d94 <__aeabi_fmul>
    a04a:	1c01      	adds	r1, r0, #0
    a04c:	9807      	ldr	r0, [sp, #28]
    a04e:	f7f6 fb51 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:350 (discriminator 1)

				// now we have fBp2, accumulate fvecB[0-2] = X^T.Y =sum(fBp2.fBp[XYZ])
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecB[l] += pthisMagCal->fvecA[l] * fBp2;
    a052:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:345 (discriminator 1)

				// calculate fBp2 = fBp[X]^2 + fBp[Y]^2 + fBp[Z]^2 (scaled uT^2) 
				fBp2 = pthisMagCal->fvecA[3] + pthisMagCal->fvecA[4] + pthisMagCal->fvecA[5];

				// accumulate fBp^4 over all measurements into fSumBp4=Y^T.Y
				fSumBp4 += fBp2 * fBp2;
    a054:	9007      	str	r0, [sp, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:350 (discriminator 1)

				// now we have fBp2, accumulate fvecB[0-2] = X^T.Y =sum(fBp2.fBp[XYZ])
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecB[l] += pthisMagCal->fvecA[l] * fBp2;
    a056:	4640      	mov	r0, r8
    a058:	f7f6 fe9c 	bl	d94 <__aeabi_fmul>
    a05c:	4a4f      	ldr	r2, [pc, #316]	; (a19c <fUpdateCalibration4INV+0x29c>)
    a05e:	1c01      	adds	r1, r0, #0
    a060:	58a0      	ldr	r0, [r4, r2]
    a062:	f7f6 fb47 	bl	6f4 <__aeabi_fadd>
    a066:	4b4d      	ldr	r3, [pc, #308]	; (a19c <fUpdateCalibration4INV+0x29c>)
    a068:	1c31      	adds	r1, r6, #0
    a06a:	50e0      	str	r0, [r4, r3]
    a06c:	4640      	mov	r0, r8
    a06e:	f7f6 fe91 	bl	d94 <__aeabi_fmul>
    a072:	2281      	movs	r2, #129	; 0x81
    a074:	00d2      	lsls	r2, r2, #3
    a076:	1c01      	adds	r1, r0, #0
    a078:	58a0      	ldr	r0, [r4, r2]
    a07a:	f7f6 fb3b 	bl	6f4 <__aeabi_fadd>
    a07e:	4948      	ldr	r1, [pc, #288]	; (a1a0 <fUpdateCalibration4INV+0x2a0>)
    a080:	2381      	movs	r3, #129	; 0x81
    a082:	00db      	lsls	r3, r3, #3
    a084:	50e0      	str	r0, [r4, r3]
    a086:	468b      	mov	fp, r1
    a088:	4640      	mov	r0, r8
    a08a:	1c29      	adds	r1, r5, #0
    a08c:	f7f6 fe82 	bl	d94 <__aeabi_fmul>
    a090:	465a      	mov	r2, fp
    a092:	1c01      	adds	r1, r0, #0
    a094:	58a0      	ldr	r0, [r4, r2]
    a096:	f7f6 fb2d 	bl	6f4 <__aeabi_fadd>
    a09a:	465b      	mov	r3, fp
    a09c:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:354 (discriminator 1)
				}

				//accumulate fvecB[3] = X^T.Y =sum(fBp2)
				pthisMagCal->fvecB[3] += fBp2;
    a09e:	2382      	movs	r3, #130	; 0x82
    a0a0:	00db      	lsls	r3, r3, #3
    a0a2:	58e0      	ldr	r0, [r4, r3]
    a0a4:	4641      	mov	r1, r8
    a0a6:	469b      	mov	fp, r3
    a0a8:	f7f6 fb24 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:357 (discriminator 1)

				// accumulate on and above-diagonal terms of fmatA = X^T.X ignoring fmatA[3][3]
				pthisMagCal->fmatA[0][0] += pthisMagCal->fvecA[X + 3];
    a0ac:	22bc      	movs	r2, #188	; 0xbc
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:354 (discriminator 1)
				{
					pthisMagCal->fvecB[l] += pthisMagCal->fvecA[l] * fBp2;
				}

				//accumulate fvecB[3] = X^T.Y =sum(fBp2)
				pthisMagCal->fvecB[3] += fBp2;
    a0ae:	4659      	mov	r1, fp
    a0b0:	5060      	str	r0, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:357 (discriminator 1)

				// accumulate on and above-diagonal terms of fmatA = X^T.X ignoring fmatA[3][3]
				pthisMagCal->fmatA[0][0] += pthisMagCal->fvecA[X + 3];
    a0b2:	58a0      	ldr	r0, [r4, r2]
    a0b4:	9902      	ldr	r1, [sp, #8]
    a0b6:	4690      	mov	r8, r2
    a0b8:	f7f6 fb1c 	bl	6f4 <__aeabi_fadd>
    a0bc:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:358 (discriminator 1)
				pthisMagCal->fmatA[0][1] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Y];
    a0be:	22c0      	movs	r2, #192	; 0xc0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:357 (discriminator 1)

				//accumulate fvecB[3] = X^T.Y =sum(fBp2)
				pthisMagCal->fvecB[3] += fBp2;

				// accumulate on and above-diagonal terms of fmatA = X^T.X ignoring fmatA[3][3]
				pthisMagCal->fmatA[0][0] += pthisMagCal->fvecA[X + 3];
    a0c0:	5060      	str	r0, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:358 (discriminator 1)
				pthisMagCal->fmatA[0][1] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Y];
    a0c2:	1c31      	adds	r1, r6, #0
    a0c4:	1c38      	adds	r0, r7, #0
    a0c6:	4690      	mov	r8, r2
    a0c8:	f7f6 fe64 	bl	d94 <__aeabi_fmul>
    a0cc:	4643      	mov	r3, r8
    a0ce:	1c01      	adds	r1, r0, #0
    a0d0:	58e0      	ldr	r0, [r4, r3]
    a0d2:	f7f6 fb0f 	bl	6f4 <__aeabi_fadd>
    a0d6:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:359 (discriminator 1)
				pthisMagCal->fmatA[0][2] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Z];
    a0d8:	22c4      	movs	r2, #196	; 0xc4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:358 (discriminator 1)
				//accumulate fvecB[3] = X^T.Y =sum(fBp2)
				pthisMagCal->fvecB[3] += fBp2;

				// accumulate on and above-diagonal terms of fmatA = X^T.X ignoring fmatA[3][3]
				pthisMagCal->fmatA[0][0] += pthisMagCal->fvecA[X + 3];
				pthisMagCal->fmatA[0][1] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Y];
    a0da:	5060      	str	r0, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:359 (discriminator 1)
				pthisMagCal->fmatA[0][2] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Z];
    a0dc:	1c38      	adds	r0, r7, #0
    a0de:	1c29      	adds	r1, r5, #0
    a0e0:	4690      	mov	r8, r2
    a0e2:	f7f6 fe57 	bl	d94 <__aeabi_fmul>
    a0e6:	4643      	mov	r3, r8
    a0e8:	1c01      	adds	r1, r0, #0
    a0ea:	58e0      	ldr	r0, [r4, r3]
    a0ec:	f7f6 fb02 	bl	6f4 <__aeabi_fadd>
    a0f0:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:360 (discriminator 1)
				pthisMagCal->fmatA[0][3] += pthisMagCal->fvecA[X];
    a0f2:	22c8      	movs	r2, #200	; 0xc8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:359 (discriminator 1)
				pthisMagCal->fvecB[3] += fBp2;

				// accumulate on and above-diagonal terms of fmatA = X^T.X ignoring fmatA[3][3]
				pthisMagCal->fmatA[0][0] += pthisMagCal->fvecA[X + 3];
				pthisMagCal->fmatA[0][1] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Y];
				pthisMagCal->fmatA[0][2] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Z];
    a0f4:	5060      	str	r0, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:360 (discriminator 1)
				pthisMagCal->fmatA[0][3] += pthisMagCal->fvecA[X];
    a0f6:	58a0      	ldr	r0, [r4, r2]
    a0f8:	1c39      	adds	r1, r7, #0
    a0fa:	4690      	mov	r8, r2
    a0fc:	f7f6 fafa 	bl	6f4 <__aeabi_fadd>
    a100:	4641      	mov	r1, r8
    a102:	5060      	str	r0, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:361 (discriminator 1)
				pthisMagCal->fmatA[1][1] += pthisMagCal->fvecA[Y + 3];
    a104:	27e8      	movs	r7, #232	; 0xe8
    a106:	59e0      	ldr	r0, [r4, r7]
    a108:	9903      	ldr	r1, [sp, #12]
    a10a:	f7f6 faf3 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:362 (discriminator 1)
				pthisMagCal->fmatA[1][2] += pthisMagCal->fvecA[Y] * pthisMagCal->fvecA[Z];
    a10e:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:361 (discriminator 1)
				// accumulate on and above-diagonal terms of fmatA = X^T.X ignoring fmatA[3][3]
				pthisMagCal->fmatA[0][0] += pthisMagCal->fvecA[X + 3];
				pthisMagCal->fmatA[0][1] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Y];
				pthisMagCal->fmatA[0][2] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Z];
				pthisMagCal->fmatA[0][3] += pthisMagCal->fvecA[X];
				pthisMagCal->fmatA[1][1] += pthisMagCal->fvecA[Y + 3];
    a110:	51e0      	str	r0, [r4, r7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:362 (discriminator 1)
				pthisMagCal->fmatA[1][2] += pthisMagCal->fvecA[Y] * pthisMagCal->fvecA[Z];
    a112:	1c30      	adds	r0, r6, #0
    a114:	f7f6 fe3e 	bl	d94 <__aeabi_fmul>
    a118:	27ec      	movs	r7, #236	; 0xec
    a11a:	1c01      	adds	r1, r0, #0
    a11c:	59e0      	ldr	r0, [r4, r7]
    a11e:	f7f6 fae9 	bl	6f4 <__aeabi_fadd>
    a122:	51e0      	str	r0, [r4, r7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:363 (discriminator 1)
				pthisMagCal->fmatA[1][3] += pthisMagCal->fvecA[Y];
    a124:	27f0      	movs	r7, #240	; 0xf0
    a126:	59e0      	ldr	r0, [r4, r7]
    a128:	1c31      	adds	r1, r6, #0
    a12a:	f7f6 fae3 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:364 (discriminator 1)
				pthisMagCal->fmatA[2][2] += pthisMagCal->fvecA[Z + 3];
    a12e:	268a      	movs	r6, #138	; 0x8a
    a130:	0076      	lsls	r6, r6, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:363 (discriminator 1)
				pthisMagCal->fmatA[0][1] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Y];
				pthisMagCal->fmatA[0][2] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Z];
				pthisMagCal->fmatA[0][3] += pthisMagCal->fvecA[X];
				pthisMagCal->fmatA[1][1] += pthisMagCal->fvecA[Y + 3];
				pthisMagCal->fmatA[1][2] += pthisMagCal->fvecA[Y] * pthisMagCal->fvecA[Z];
				pthisMagCal->fmatA[1][3] += pthisMagCal->fvecA[Y];
    a132:	51e0      	str	r0, [r4, r7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:364 (discriminator 1)
				pthisMagCal->fmatA[2][2] += pthisMagCal->fvecA[Z + 3];
    a134:	59a0      	ldr	r0, [r4, r6]
    a136:	9904      	ldr	r1, [sp, #16]
    a138:	f7f6 fadc 	bl	6f4 <__aeabi_fadd>
    a13c:	51a0      	str	r0, [r4, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:365 (discriminator 1)
				pthisMagCal->fmatA[2][3] += pthisMagCal->fvecA[Z];
    a13e:	268c      	movs	r6, #140	; 0x8c
    a140:	0076      	lsls	r6, r6, #1
    a142:	59a0      	ldr	r0, [r4, r6]
    a144:	1c29      	adds	r1, r5, #0
    a146:	f7f6 fad5 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:368 (discriminator 1)

				// increment the counter for next iteration
				iCount++;
    a14a:	9b05      	ldr	r3, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:365 (discriminator 1)
				pthisMagCal->fmatA[0][3] += pthisMagCal->fvecA[X];
				pthisMagCal->fmatA[1][1] += pthisMagCal->fvecA[Y + 3];
				pthisMagCal->fmatA[1][2] += pthisMagCal->fvecA[Y] * pthisMagCal->fvecA[Z];
				pthisMagCal->fmatA[1][3] += pthisMagCal->fvecA[Y];
				pthisMagCal->fmatA[2][2] += pthisMagCal->fvecA[Z + 3];
				pthisMagCal->fmatA[2][3] += pthisMagCal->fvecA[Z];
    a14c:	51a0      	str	r0, [r4, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:368 (discriminator 1)

				// increment the counter for next iteration
				iCount++;
    a14e:	3301      	adds	r3, #1
    a150:	b29b      	uxth	r3, r3
    a152:	9305      	str	r3, [sp, #20]
    a154:	2204      	movs	r2, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:321

	// use from MINEQUATIONS up to MAXEQUATIONS entries from magnetic buffer to compute matrices
	iCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
	{
		for (k = 0; k < MAGBUFFSIZEY; k++)
    a156:	9e08      	ldr	r6, [sp, #32]
    a158:	2302      	movs	r3, #2
    a15a:	4491      	add	r9, r2
    a15c:	449a      	add	sl, r3
    a15e:	45b1      	cmp	r9, r6
    a160:	d020      	beq.n	a1a4 <fUpdateCalibration4INV+0x2a4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:323
		{
			if (pthisMagBuffer->index[j][k] != -1)
    a162:	4649      	mov	r1, r9
    a164:	6809      	ldr	r1, [r1, #0]
    a166:	3101      	adds	r1, #1
    a168:	d0f4      	beq.n	a154 <fUpdateCalibration4INV+0x254>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:326
			{
				// use first valid magnetic buffer entry as estimate (in counts) for offset
				if (iCount == 0)
    a16a:	9e05      	ldr	r6, [sp, #20]
    a16c:	2e00      	cmp	r6, #0
    a16e:	d000      	beq.n	a172 <fUpdateCalibration4INV+0x272>
    a170:	e712      	b.n	9f98 <fUpdateCalibration4INV+0x98>
    a172:	2290      	movs	r2, #144	; 0x90
    a174:	00d2      	lsls	r2, r2, #3
    a176:	1c13      	adds	r3, r2, #0
    a178:	4453      	add	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:330
				{
					for (l = X; l <= Z; l++)
					{
						iOffset[l] = pthisMagBuffer->iBpFast[l][j][k];
    a17a:	881b      	ldrh	r3, [r3, #0]
    a17c:	2690      	movs	r6, #144	; 0x90
    a17e:	00b6      	lsls	r6, r6, #2
    a180:	930a      	str	r3, [sp, #40]	; 0x28
    a182:	1c33      	adds	r3, r6, #0
    a184:	4453      	add	r3, sl
    a186:	4651      	mov	r1, sl
    a188:	881b      	ldrh	r3, [r3, #0]
    a18a:	8809      	ldrh	r1, [r1, #0]
    a18c:	2500      	movs	r5, #0
    a18e:	930b      	str	r3, [sp, #44]	; 0x2c
    a190:	9109      	str	r1, [sp, #36]	; 0x24
    a192:	1c2e      	adds	r6, r5, #0
    a194:	1c2f      	adds	r7, r5, #0
    a196:	e720      	b.n	9fda <fUpdateCalibration4INV+0xda>
    a198:	42480000 	.word	0x42480000
    a19c:	00000404 	.word	0x00000404
    a1a0:	0000040c 	.word	0x0000040c
    a1a4:	464e      	mov	r6, r9
    a1a6:	3660      	adds	r6, #96	; 0x60
    a1a8:	9608      	str	r6, [sp, #32]
    a1aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:319
	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;

	// use from MINEQUATIONS up to MAXEQUATIONS entries from magnetic buffer to compute matrices
	iCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
    a1ac:	990d      	ldr	r1, [sp, #52]	; 0x34
    a1ae:	3630      	adds	r6, #48	; 0x30
    a1b0:	960c      	str	r6, [sp, #48]	; 0x30
    a1b2:	9e08      	ldr	r6, [sp, #32]
    a1b4:	428e      	cmp	r6, r1
    a1b6:	d000      	beq.n	a1ba <fUpdateCalibration4INV+0x2ba>
    a1b8:	e6e5      	b.n	9f86 <fUpdateCalibration4INV+0x86>
    a1ba:	9909      	ldr	r1, [sp, #36]	; 0x24
    a1bc:	ae14      	add	r6, sp, #80	; 0x50
    a1be:	8031      	strh	r1, [r6, #0]
    a1c0:	2252      	movs	r2, #82	; 0x52
    a1c2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    a1c4:	446a      	add	r2, sp
    a1c6:	8016      	strh	r6, [r2, #0]
    a1c8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    a1ca:	a915      	add	r1, sp, #84	; 0x54
    a1cc:	800e      	strh	r6, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:374
			}
		}
	}

	// set the last element of the measurement matrix to the number of buffer elements used
	pthisMagCal->fmatA[3][3] = (float) iCount;
    a1ce:	9e05      	ldr	r6, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:377

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;
    a1d0:	2700      	movs	r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:374
			}
		}
	}

	// set the last element of the measurement matrix to the number of buffer elements used
	pthisMagCal->fmatA[3][3] = (float) iCount;
    a1d2:	b230      	sxth	r0, r6
    a1d4:	f7f7 f89e 	bl	1314 <__aeabi_i2f>
    a1d8:	23a0      	movs	r3, #160	; 0xa0
    a1da:	005b      	lsls	r3, r3, #1
    a1dc:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:377

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;
    a1de:	9905      	ldr	r1, [sp, #20]
    a1e0:	4bfc      	ldr	r3, [pc, #1008]	; (a5d4 <fUpdateCalibration4INV+0x6d4>)
    a1e2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:384
	// use above diagonal elements of symmetric fmatA to set both fmatB and fmatA to X^T.X
	for (i = 0; i < 4; i++)
	{
		for (j = i; j < 4; j++)
		{
			pthisMagCal->fmatB[i][j] = pthisMagCal->fmatB[j][i] = pthisMagCal->fmatA[j][i] = pthisMagCal->fmatA[i][j];
    a1e4:	25bc      	movs	r5, #188	; 0xbc
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:377

	// set the last element of the measurement matrix to the number of buffer elements used
	pthisMagCal->fmatA[3][3] = (float) iCount;

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;
    a1e6:	52f1      	strh	r1, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:384
	// use above diagonal elements of symmetric fmatA to set both fmatB and fmatA to X^T.X
	for (i = 0; i < 4; i++)
	{
		for (j = i; j < 4; j++)
		{
			pthisMagCal->fmatB[i][j] = pthisMagCal->fmatB[j][i] = pthisMagCal->fmatA[j][i] = pthisMagCal->fmatA[i][j];
    a1e8:	2393      	movs	r3, #147	; 0x93
    a1ea:	009b      	lsls	r3, r3, #2
    a1ec:	4698      	mov	r8, r3
    a1ee:	00be      	lsls	r6, r7, #2
    a1f0:	19f6      	adds	r6, r6, r7
    a1f2:	b2f9      	uxtb	r1, r7
    a1f4:	0076      	lsls	r6, r6, #1
    a1f6:	b24b      	sxtb	r3, r1
    a1f8:	46b1      	mov	r9, r6
    a1fa:	009e      	lsls	r6, r3, #2
    a1fc:	464a      	mov	r2, r9
    a1fe:	46b4      	mov	ip, r6
    a200:	1898      	adds	r0, r3, r2
    a202:	4463      	add	r3, ip
    a204:	0080      	lsls	r0, r0, #2
    a206:	005b      	lsls	r3, r3, #1
    a208:	1820      	adds	r0, r4, r0
    a20a:	19db      	adds	r3, r3, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:384 (discriminator 2)
    a20c:	5942      	ldr	r2, [r0, r5]
    a20e:	009b      	lsls	r3, r3, #2
    a210:	3101      	adds	r1, #1
    a212:	18e3      	adds	r3, r4, r3
    a214:	4646      	mov	r6, r8
    a216:	b2c9      	uxtb	r1, r1
    a218:	515a      	str	r2, [r3, r5]
    a21a:	519a      	str	r2, [r3, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:382 (discriminator 2)
	pthisMagBuffer->iMagBufferCount = iCount;

	// use above diagonal elements of symmetric fmatA to set both fmatB and fmatA to X^T.X
	for (i = 0; i < 4; i++)
	{
		for (j = i; j < 4; j++)
    a21c:	b24b      	sxtb	r3, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:384 (discriminator 2)
		{
			pthisMagCal->fmatB[i][j] = pthisMagCal->fmatB[j][i] = pthisMagCal->fmatA[j][i] = pthisMagCal->fmatA[i][j];
    a21e:	5182      	str	r2, [r0, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:382 (discriminator 2)
	pthisMagBuffer->iMagBufferCount = iCount;

	// use above diagonal elements of symmetric fmatA to set both fmatB and fmatA to X^T.X
	for (i = 0; i < 4; i++)
	{
		for (j = i; j < 4; j++)
    a220:	2b03      	cmp	r3, #3
    a222:	ddea      	ble.n	a1fa <fUpdateCalibration4INV+0x2fa>
    a224:	3701      	adds	r7, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:380

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;

	// use above diagonal elements of symmetric fmatA to set both fmatB and fmatA to X^T.X
	for (i = 0; i < 4; i++)
    a226:	2f04      	cmp	r7, #4
    a228:	d1e1      	bne.n	a1ee <fUpdateCalibration4INV+0x2ee>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:391 (discriminator 1)
	}

	// calculate in situ inverse of fmatB = inv(X^T.X) (4x4) while fmatA still holds X^T.X
	for (i = 0; i < 4; i++)
	{
		pfRows[i] = pthisMagCal->fmatB[i];
    a22a:	2193      	movs	r1, #147	; 0x93
    a22c:	0089      	lsls	r1, r1, #2
    a22e:	229d      	movs	r2, #157	; 0x9d
    a230:	1863      	adds	r3, r4, r1
    a232:	0092      	lsls	r2, r2, #2
    a234:	26a7      	movs	r6, #167	; 0xa7
    a236:	9316      	str	r3, [sp, #88]	; 0x58
    a238:	00b6      	lsls	r6, r6, #2
    a23a:	18a3      	adds	r3, r4, r2
    a23c:	21b1      	movs	r1, #177	; 0xb1
    a23e:	9317      	str	r3, [sp, #92]	; 0x5c
    a240:	0089      	lsls	r1, r1, #2
    a242:	19a3      	adds	r3, r4, r6
    a244:	9318      	str	r3, [sp, #96]	; 0x60
    a246:	1863      	adds	r3, r4, r1
    a248:	9319      	str	r3, [sp, #100]	; 0x64
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:393 (discriminator 1)
	}
	fmatrixAeqInvA(pfRows, iColInd, iRowInd, iPivot, 4);
    a24a:	9700      	str	r7, [sp, #0]
    a24c:	a816      	add	r0, sp, #88	; 0x58
    a24e:	a911      	add	r1, sp, #68	; 0x44
    a250:	aa12      	add	r2, sp, #72	; 0x48
    a252:	ab13      	add	r3, sp, #76	; 0x4c
    a254:	f001 fdfc 	bl	be50 <fmatrixAeqInvA>
    a258:	2381      	movs	r3, #129	; 0x81
    a25a:	00db      	lsls	r3, r3, #3
    a25c:	58e3      	ldr	r3, [r4, r3]
    a25e:	4ade      	ldr	r2, [pc, #888]	; (a5d8 <fUpdateCalibration4INV+0x6d8>)
    a260:	2182      	movs	r1, #130	; 0x82
    a262:	00c9      	lsls	r1, r1, #3
    a264:	58a2      	ldr	r2, [r4, r2]
    a266:	4699      	mov	r9, r3
    a268:	5861      	ldr	r1, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:401 (discriminator 1)
	for (i = 0; i < 4; i++)
	{
		pthisMagCal->fvecA[i] = 0.0F;
		for (k = 0; k < 4; k++)
		{
			pthisMagCal->fvecA[i] += pthisMagCal->fmatB[i][k] * pthisMagCal->fvecB[k];
    a26a:	2393      	movs	r3, #147	; 0x93
    a26c:	009b      	lsls	r3, r3, #2
    a26e:	1c10      	adds	r0, r2, #0
    a270:	468b      	mov	fp, r1
    a272:	58e1      	ldr	r1, [r4, r3]
    a274:	4690      	mov	r8, r2
    a276:	f7f6 fd8d 	bl	d94 <__aeabi_fmul>
    a27a:	2100      	movs	r1, #0
    a27c:	f7f6 fa3a 	bl	6f4 <__aeabi_fadd>
    a280:	2394      	movs	r3, #148	; 0x94
    a282:	009b      	lsls	r3, r3, #2
    a284:	58e1      	ldr	r1, [r4, r3]
    a286:	1c05      	adds	r5, r0, #0
    a288:	4648      	mov	r0, r9
    a28a:	f7f6 fd83 	bl	d94 <__aeabi_fmul>
    a28e:	1c01      	adds	r1, r0, #0
    a290:	1c28      	adds	r0, r5, #0
    a292:	f7f6 fa2f 	bl	6f4 <__aeabi_fadd>
    a296:	4ed1      	ldr	r6, [pc, #836]	; (a5dc <fUpdateCalibration4INV+0x6dc>)
    a298:	2395      	movs	r3, #149	; 0x95
    a29a:	59a6      	ldr	r6, [r4, r6]
    a29c:	009b      	lsls	r3, r3, #2
    a29e:	58e1      	ldr	r1, [r4, r3]
    a2a0:	1c05      	adds	r5, r0, #0
    a2a2:	1c30      	adds	r0, r6, #0
    a2a4:	f7f6 fd76 	bl	d94 <__aeabi_fmul>
    a2a8:	1c01      	adds	r1, r0, #0
    a2aa:	1c28      	adds	r0, r5, #0
    a2ac:	f7f6 fa22 	bl	6f4 <__aeabi_fadd>
    a2b0:	2396      	movs	r3, #150	; 0x96
    a2b2:	009b      	lsls	r3, r3, #2
    a2b4:	58e1      	ldr	r1, [r4, r3]
    a2b6:	1c05      	adds	r5, r0, #0
    a2b8:	4658      	mov	r0, fp
    a2ba:	f7f6 fd6b 	bl	d94 <__aeabi_fmul>
    a2be:	1c01      	adds	r1, r0, #0
    a2c0:	1c28      	adds	r0, r5, #0
    a2c2:	f7f6 fa17 	bl	6f4 <__aeabi_fadd>
    a2c6:	23f7      	movs	r3, #247	; 0xf7
    a2c8:	009b      	lsls	r3, r3, #2
    a2ca:	50e0      	str	r0, [r4, r3]
    a2cc:	239d      	movs	r3, #157	; 0x9d
    a2ce:	009b      	lsls	r3, r3, #2
    a2d0:	1c07      	adds	r7, r0, #0
    a2d2:	58e1      	ldr	r1, [r4, r3]
    a2d4:	4640      	mov	r0, r8
    a2d6:	f7f6 fd5d 	bl	d94 <__aeabi_fmul>
    a2da:	2100      	movs	r1, #0
    a2dc:	f7f6 fa0a 	bl	6f4 <__aeabi_fadd>
    a2e0:	239e      	movs	r3, #158	; 0x9e
    a2e2:	009b      	lsls	r3, r3, #2
    a2e4:	58e1      	ldr	r1, [r4, r3]
    a2e6:	1c05      	adds	r5, r0, #0
    a2e8:	4648      	mov	r0, r9
    a2ea:	f7f6 fd53 	bl	d94 <__aeabi_fmul>
    a2ee:	1c01      	adds	r1, r0, #0
    a2f0:	1c28      	adds	r0, r5, #0
    a2f2:	f7f6 f9ff 	bl	6f4 <__aeabi_fadd>
    a2f6:	239f      	movs	r3, #159	; 0x9f
    a2f8:	009b      	lsls	r3, r3, #2
    a2fa:	58e1      	ldr	r1, [r4, r3]
    a2fc:	1c05      	adds	r5, r0, #0
    a2fe:	1c30      	adds	r0, r6, #0
    a300:	f7f6 fd48 	bl	d94 <__aeabi_fmul>
    a304:	1c01      	adds	r1, r0, #0
    a306:	1c28      	adds	r0, r5, #0
    a308:	f7f6 f9f4 	bl	6f4 <__aeabi_fadd>
    a30c:	23a0      	movs	r3, #160	; 0xa0
    a30e:	009b      	lsls	r3, r3, #2
    a310:	58e1      	ldr	r1, [r4, r3]
    a312:	1c05      	adds	r5, r0, #0
    a314:	4658      	mov	r0, fp
    a316:	f7f6 fd3d 	bl	d94 <__aeabi_fmul>
    a31a:	1c01      	adds	r1, r0, #0
    a31c:	1c28      	adds	r0, r5, #0
    a31e:	f7f6 f9e9 	bl	6f4 <__aeabi_fadd>
    a322:	23f8      	movs	r3, #248	; 0xf8
    a324:	009b      	lsls	r3, r3, #2
    a326:	50e0      	str	r0, [r4, r3]
    a328:	23a7      	movs	r3, #167	; 0xa7
    a32a:	009b      	lsls	r3, r3, #2
    a32c:	58e1      	ldr	r1, [r4, r3]
    a32e:	46b2      	mov	sl, r6
    a330:	1c06      	adds	r6, r0, #0
    a332:	4640      	mov	r0, r8
    a334:	f7f6 fd2e 	bl	d94 <__aeabi_fmul>
    a338:	2100      	movs	r1, #0
    a33a:	f7f6 f9db 	bl	6f4 <__aeabi_fadd>
    a33e:	23a8      	movs	r3, #168	; 0xa8
    a340:	009b      	lsls	r3, r3, #2
    a342:	58e1      	ldr	r1, [r4, r3]
    a344:	1c05      	adds	r5, r0, #0
    a346:	4648      	mov	r0, r9
    a348:	f7f6 fd24 	bl	d94 <__aeabi_fmul>
    a34c:	1c01      	adds	r1, r0, #0
    a34e:	1c28      	adds	r0, r5, #0
    a350:	f7f6 f9d0 	bl	6f4 <__aeabi_fadd>
    a354:	23a9      	movs	r3, #169	; 0xa9
    a356:	009b      	lsls	r3, r3, #2
    a358:	58e1      	ldr	r1, [r4, r3]
    a35a:	1c05      	adds	r5, r0, #0
    a35c:	4650      	mov	r0, sl
    a35e:	f7f6 fd19 	bl	d94 <__aeabi_fmul>
    a362:	1c01      	adds	r1, r0, #0
    a364:	1c28      	adds	r0, r5, #0
    a366:	f7f6 f9c5 	bl	6f4 <__aeabi_fadd>
    a36a:	23aa      	movs	r3, #170	; 0xaa
    a36c:	009b      	lsls	r3, r3, #2
    a36e:	58e1      	ldr	r1, [r4, r3]
    a370:	1c05      	adds	r5, r0, #0
    a372:	4658      	mov	r0, fp
    a374:	f7f6 fd0e 	bl	d94 <__aeabi_fmul>
    a378:	1c01      	adds	r1, r0, #0
    a37a:	1c28      	adds	r0, r5, #0
    a37c:	f7f6 f9ba 	bl	6f4 <__aeabi_fadd>
    a380:	23f9      	movs	r3, #249	; 0xf9
    a382:	009b      	lsls	r3, r3, #2
    a384:	50e0      	str	r0, [r4, r3]
    a386:	23b1      	movs	r3, #177	; 0xb1
    a388:	009b      	lsls	r3, r3, #2
    a38a:	1c05      	adds	r5, r0, #0
    a38c:	58e1      	ldr	r1, [r4, r3]
    a38e:	4640      	mov	r0, r8
    a390:	f7f6 fd00 	bl	d94 <__aeabi_fmul>
    a394:	2100      	movs	r1, #0
    a396:	f7f6 f9ad 	bl	6f4 <__aeabi_fadd>
    a39a:	23b2      	movs	r3, #178	; 0xb2
    a39c:	009b      	lsls	r3, r3, #2
    a39e:	58e1      	ldr	r1, [r4, r3]
    a3a0:	9002      	str	r0, [sp, #8]
    a3a2:	4648      	mov	r0, r9
    a3a4:	f7f6 fcf6 	bl	d94 <__aeabi_fmul>
    a3a8:	1c01      	adds	r1, r0, #0
    a3aa:	9802      	ldr	r0, [sp, #8]
    a3ac:	f7f6 f9a2 	bl	6f4 <__aeabi_fadd>
    a3b0:	23b3      	movs	r3, #179	; 0xb3
    a3b2:	009b      	lsls	r3, r3, #2
    a3b4:	58e1      	ldr	r1, [r4, r3]
    a3b6:	9002      	str	r0, [sp, #8]
    a3b8:	4650      	mov	r0, sl
    a3ba:	f7f6 fceb 	bl	d94 <__aeabi_fmul>
    a3be:	1c01      	adds	r1, r0, #0
    a3c0:	9802      	ldr	r0, [sp, #8]
    a3c2:	f7f6 f997 	bl	6f4 <__aeabi_fadd>
    a3c6:	23b4      	movs	r3, #180	; 0xb4
    a3c8:	009b      	lsls	r3, r3, #2
    a3ca:	58e1      	ldr	r1, [r4, r3]
    a3cc:	9002      	str	r0, [sp, #8]
    a3ce:	4658      	mov	r0, fp
    a3d0:	f7f6 fce0 	bl	d94 <__aeabi_fmul>
    a3d4:	1c01      	adds	r1, r0, #0
    a3d6:	9802      	ldr	r0, [sp, #8]
    a3d8:	f7f6 f98c 	bl	6f4 <__aeabi_fadd>
    a3dc:	23fa      	movs	r3, #250	; 0xfa
    a3de:	009b      	lsls	r3, r3, #2
    a3e0:	50e0      	str	r0, [r4, r3]
    a3e2:	9002      	str	r0, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:411 (discriminator 1)
	// = fSumBp4 - 2 * fvecA^T.fvecB + fvecA^T.fmatA.fvecA
	// first set P = Y^T.Y - 2 * beta^T.(X^T.Y) = fSumBp4 - 2 * fvecA^T.fvecB
	fE = 0.0F;
	for (i = 0; i < 4; i++)
	{
		fE += pthisMagCal->fvecA[i] * pthisMagCal->fvecB[i];
    a3e4:	4641      	mov	r1, r8
    a3e6:	1c38      	adds	r0, r7, #0
    a3e8:	f7f6 fcd4 	bl	d94 <__aeabi_fmul>
    a3ec:	2100      	movs	r1, #0
    a3ee:	f7f6 f981 	bl	6f4 <__aeabi_fadd>
    a3f2:	4649      	mov	r1, r9
    a3f4:	4680      	mov	r8, r0
    a3f6:	1c30      	adds	r0, r6, #0
    a3f8:	f7f6 fccc 	bl	d94 <__aeabi_fmul>
    a3fc:	4641      	mov	r1, r8
    a3fe:	f7f6 f979 	bl	6f4 <__aeabi_fadd>
    a402:	4651      	mov	r1, sl
    a404:	4680      	mov	r8, r0
    a406:	1c28      	adds	r0, r5, #0
    a408:	f7f6 fcc4 	bl	d94 <__aeabi_fmul>
    a40c:	4641      	mov	r1, r8
    a40e:	f7f6 f971 	bl	6f4 <__aeabi_fadd>
    a412:	4659      	mov	r1, fp
    a414:	4680      	mov	r8, r0
    a416:	9802      	ldr	r0, [sp, #8]
    a418:	f7f6 fcbc 	bl	d94 <__aeabi_fmul>
    a41c:	1c01      	adds	r1, r0, #0
    a41e:	4640      	mov	r0, r8
    a420:	f7f6 f968 	bl	6f4 <__aeabi_fadd>
    a424:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:413 (discriminator 1)
	}
	fE = fSumBp4 - 2.0F * fE;
    a426:	f7f6 f965 	bl	6f4 <__aeabi_fadd>
    a42a:	1c01      	adds	r1, r0, #0
    a42c:	9807      	ldr	r0, [sp, #28]
    a42e:	f7f6 fddb 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:421 (discriminator 1)
	for (i = 0; i < 4; i++)
	{
		pthisMagCal->fvecB[i] = 0.0F;
		for (k = 0; k < 4; k++)
		{
			pthisMagCal->fvecB[i] += pthisMagCal->fmatA[i][k] * pthisMagCal->fvecA[k];
    a432:	23bc      	movs	r3, #188	; 0xbc
    a434:	58e1      	ldr	r1, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:413 (discriminator 1)
	fE = 0.0F;
	for (i = 0; i < 4; i++)
	{
		fE += pthisMagCal->fvecA[i] * pthisMagCal->fvecB[i];
	}
	fE = fSumBp4 - 2.0F * fE;
    a436:	9003      	str	r0, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:421 (discriminator 1)
	for (i = 0; i < 4; i++)
	{
		pthisMagCal->fvecB[i] = 0.0F;
		for (k = 0; k < 4; k++)
		{
			pthisMagCal->fvecB[i] += pthisMagCal->fmatA[i][k] * pthisMagCal->fvecA[k];
    a438:	1c38      	adds	r0, r7, #0
    a43a:	f7f6 fcab 	bl	d94 <__aeabi_fmul>
    a43e:	2100      	movs	r1, #0
    a440:	f7f6 f958 	bl	6f4 <__aeabi_fadd>
    a444:	23c0      	movs	r3, #192	; 0xc0
    a446:	58e1      	ldr	r1, [r4, r3]
    a448:	4680      	mov	r8, r0
    a44a:	1c30      	adds	r0, r6, #0
    a44c:	f7f6 fca2 	bl	d94 <__aeabi_fmul>
    a450:	1c01      	adds	r1, r0, #0
    a452:	4640      	mov	r0, r8
    a454:	f7f6 f94e 	bl	6f4 <__aeabi_fadd>
    a458:	23c4      	movs	r3, #196	; 0xc4
    a45a:	58e1      	ldr	r1, [r4, r3]
    a45c:	4680      	mov	r8, r0
    a45e:	1c28      	adds	r0, r5, #0
    a460:	f7f6 fc98 	bl	d94 <__aeabi_fmul>
    a464:	1c01      	adds	r1, r0, #0
    a466:	4640      	mov	r0, r8
    a468:	f7f6 f944 	bl	6f4 <__aeabi_fadd>
    a46c:	23c8      	movs	r3, #200	; 0xc8
    a46e:	58e1      	ldr	r1, [r4, r3]
    a470:	4680      	mov	r8, r0
    a472:	9802      	ldr	r0, [sp, #8]
    a474:	f7f6 fc8e 	bl	d94 <__aeabi_fmul>
    a478:	1c01      	adds	r1, r0, #0
    a47a:	4640      	mov	r0, r8
    a47c:	f7f6 f93a 	bl	6f4 <__aeabi_fadd>
    a480:	4a55      	ldr	r2, [pc, #340]	; (a5d8 <fUpdateCalibration4INV+0x6d8>)
    a482:	23e4      	movs	r3, #228	; 0xe4
    a484:	50a0      	str	r0, [r4, r2]
    a486:	4681      	mov	r9, r0
    a488:	58e1      	ldr	r1, [r4, r3]
    a48a:	1c38      	adds	r0, r7, #0
    a48c:	f7f6 fc82 	bl	d94 <__aeabi_fmul>
    a490:	2100      	movs	r1, #0
    a492:	f7f6 f92f 	bl	6f4 <__aeabi_fadd>
    a496:	23e8      	movs	r3, #232	; 0xe8
    a498:	58e1      	ldr	r1, [r4, r3]
    a49a:	4680      	mov	r8, r0
    a49c:	1c30      	adds	r0, r6, #0
    a49e:	f7f6 fc79 	bl	d94 <__aeabi_fmul>
    a4a2:	1c01      	adds	r1, r0, #0
    a4a4:	4640      	mov	r0, r8
    a4a6:	f7f6 f925 	bl	6f4 <__aeabi_fadd>
    a4aa:	23ec      	movs	r3, #236	; 0xec
    a4ac:	58e1      	ldr	r1, [r4, r3]
    a4ae:	4680      	mov	r8, r0
    a4b0:	1c28      	adds	r0, r5, #0
    a4b2:	f7f6 fc6f 	bl	d94 <__aeabi_fmul>
    a4b6:	1c01      	adds	r1, r0, #0
    a4b8:	4640      	mov	r0, r8
    a4ba:	f7f6 f91b 	bl	6f4 <__aeabi_fadd>
    a4be:	23f0      	movs	r3, #240	; 0xf0
    a4c0:	58e1      	ldr	r1, [r4, r3]
    a4c2:	4680      	mov	r8, r0
    a4c4:	9802      	ldr	r0, [sp, #8]
    a4c6:	f7f6 fc65 	bl	d94 <__aeabi_fmul>
    a4ca:	1c01      	adds	r1, r0, #0
    a4cc:	4640      	mov	r0, r8
    a4ce:	f7f6 f911 	bl	6f4 <__aeabi_fadd>
    a4d2:	2381      	movs	r3, #129	; 0x81
    a4d4:	00db      	lsls	r3, r3, #3
    a4d6:	50e0      	str	r0, [r4, r3]
    a4d8:	2386      	movs	r3, #134	; 0x86
    a4da:	005b      	lsls	r3, r3, #1
    a4dc:	58e1      	ldr	r1, [r4, r3]
    a4de:	4682      	mov	sl, r0
    a4e0:	1c38      	adds	r0, r7, #0
    a4e2:	f7f6 fc57 	bl	d94 <__aeabi_fmul>
    a4e6:	2100      	movs	r1, #0
    a4e8:	f7f6 f904 	bl	6f4 <__aeabi_fadd>
    a4ec:	2388      	movs	r3, #136	; 0x88
    a4ee:	005b      	lsls	r3, r3, #1
    a4f0:	58e1      	ldr	r1, [r4, r3]
    a4f2:	4680      	mov	r8, r0
    a4f4:	1c30      	adds	r0, r6, #0
    a4f6:	f7f6 fc4d 	bl	d94 <__aeabi_fmul>
    a4fa:	1c01      	adds	r1, r0, #0
    a4fc:	4640      	mov	r0, r8
    a4fe:	f7f6 f8f9 	bl	6f4 <__aeabi_fadd>
    a502:	238a      	movs	r3, #138	; 0x8a
    a504:	005b      	lsls	r3, r3, #1
    a506:	58e1      	ldr	r1, [r4, r3]
    a508:	4680      	mov	r8, r0
    a50a:	1c28      	adds	r0, r5, #0
    a50c:	f7f6 fc42 	bl	d94 <__aeabi_fmul>
    a510:	1c01      	adds	r1, r0, #0
    a512:	4640      	mov	r0, r8
    a514:	f7f6 f8ee 	bl	6f4 <__aeabi_fadd>
    a518:	238c      	movs	r3, #140	; 0x8c
    a51a:	005b      	lsls	r3, r3, #1
    a51c:	58e1      	ldr	r1, [r4, r3]
    a51e:	4680      	mov	r8, r0
    a520:	9802      	ldr	r0, [sp, #8]
    a522:	f7f6 fc37 	bl	d94 <__aeabi_fmul>
    a526:	1c01      	adds	r1, r0, #0
    a528:	4640      	mov	r0, r8
    a52a:	f7f6 f8e3 	bl	6f4 <__aeabi_fadd>
    a52e:	492b      	ldr	r1, [pc, #172]	; (a5dc <fUpdateCalibration4INV+0x6dc>)
    a530:	239a      	movs	r3, #154	; 0x9a
    a532:	005b      	lsls	r3, r3, #1
    a534:	5060      	str	r0, [r4, r1]
    a536:	4683      	mov	fp, r0
    a538:	58e1      	ldr	r1, [r4, r3]
    a53a:	1c38      	adds	r0, r7, #0
    a53c:	f7f6 fc2a 	bl	d94 <__aeabi_fmul>
    a540:	2100      	movs	r1, #0
    a542:	f7f6 f8d7 	bl	6f4 <__aeabi_fadd>
    a546:	239c      	movs	r3, #156	; 0x9c
    a548:	005b      	lsls	r3, r3, #1
    a54a:	58e1      	ldr	r1, [r4, r3]
    a54c:	4680      	mov	r8, r0
    a54e:	1c30      	adds	r0, r6, #0
    a550:	f7f6 fc20 	bl	d94 <__aeabi_fmul>
    a554:	1c01      	adds	r1, r0, #0
    a556:	4640      	mov	r0, r8
    a558:	f7f6 f8cc 	bl	6f4 <__aeabi_fadd>
    a55c:	239e      	movs	r3, #158	; 0x9e
    a55e:	005b      	lsls	r3, r3, #1
    a560:	58e1      	ldr	r1, [r4, r3]
    a562:	4680      	mov	r8, r0
    a564:	1c28      	adds	r0, r5, #0
    a566:	f7f6 fc15 	bl	d94 <__aeabi_fmul>
    a56a:	1c01      	adds	r1, r0, #0
    a56c:	4640      	mov	r0, r8
    a56e:	f7f6 f8c1 	bl	6f4 <__aeabi_fadd>
    a572:	23a0      	movs	r3, #160	; 0xa0
    a574:	005b      	lsls	r3, r3, #1
    a576:	58e1      	ldr	r1, [r4, r3]
    a578:	4680      	mov	r8, r0
    a57a:	9802      	ldr	r0, [sp, #8]
    a57c:	f7f6 fc0a 	bl	d94 <__aeabi_fmul>
    a580:	1c01      	adds	r1, r0, #0
    a582:	4640      	mov	r0, r8
    a584:	f7f6 f8b6 	bl	6f4 <__aeabi_fadd>
    a588:	2282      	movs	r2, #130	; 0x82
    a58a:	00d2      	lsls	r2, r2, #3
    a58c:	50a0      	str	r0, [r4, r2]
    a58e:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:428 (discriminator 1)
	} 

	// complete calculation of P by adding beta^T.(X^T.X).beta = fvecA^T * fvecB
	for (i = 0; i < 4; i++)
	{
		fE += pthisMagCal->fvecB[i] * pthisMagCal->fvecA[i];
    a590:	1c39      	adds	r1, r7, #0
    a592:	4648      	mov	r0, r9
    a594:	f7f6 fbfe 	bl	d94 <__aeabi_fmul>
    a598:	1c01      	adds	r1, r0, #0
    a59a:	9803      	ldr	r0, [sp, #12]
    a59c:	f7f6 f8aa 	bl	6f4 <__aeabi_fadd>
    a5a0:	1c31      	adds	r1, r6, #0
    a5a2:	4681      	mov	r9, r0
    a5a4:	4650      	mov	r0, sl
    a5a6:	f7f6 fbf5 	bl	d94 <__aeabi_fmul>
    a5aa:	4649      	mov	r1, r9
    a5ac:	f7f6 f8a2 	bl	6f4 <__aeabi_fadd>
    a5b0:	1c29      	adds	r1, r5, #0
    a5b2:	4681      	mov	r9, r0
    a5b4:	4658      	mov	r0, fp
    a5b6:	f7f6 fbed 	bl	d94 <__aeabi_fmul>
    a5ba:	4649      	mov	r1, r9
    a5bc:	f7f6 f89a 	bl	6f4 <__aeabi_fadd>
    a5c0:	9902      	ldr	r1, [sp, #8]
    a5c2:	4681      	mov	r9, r0
    a5c4:	4640      	mov	r0, r8
    a5c6:	f7f6 fbe5 	bl	d94 <__aeabi_fmul>
    a5ca:	4649      	mov	r1, r9
    a5cc:	f7f6 f892 	bl	6f4 <__aeabi_fadd>
    a5d0:	e006      	b.n	a5e0 <fUpdateCalibration4INV+0x6e0>
    a5d2:	46c0      	nop			; (mov r8, r8)
    a5d4:	00000b56 	.word	0x00000b56
    a5d8:	00000404 	.word	0x00000404
    a5dc:	0000040c 	.word	0x0000040c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:434 (discriminator 1)
	}

	// compute the hard iron vector (in uT but offset and scaled by FMATRIXSCALING)
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = 0.5F * pthisMagCal->fvecA[l];
    a5e0:	21fc      	movs	r1, #252	; 0xfc
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:428 (discriminator 1)
	} 

	// complete calculation of P by adding beta^T.(X^T.X).beta = fvecA^T * fvecB
	for (i = 0; i < 4; i++)
	{
		fE += pthisMagCal->fvecB[i] * pthisMagCal->fvecA[i];
    a5e2:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:434 (discriminator 1)
	}

	// compute the hard iron vector (in uT but offset and scaled by FMATRIXSCALING)
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = 0.5F * pthisMagCal->fvecA[l];
    a5e4:	0589      	lsls	r1, r1, #22
    a5e6:	1c38      	adds	r0, r7, #0
    a5e8:	f7f6 fbd4 	bl	d94 <__aeabi_fmul>
    a5ec:	21fc      	movs	r1, #252	; 0xfc
    a5ee:	1c07      	adds	r7, r0, #0
    a5f0:	63e0      	str	r0, [r4, #60]	; 0x3c
    a5f2:	0589      	lsls	r1, r1, #22
    a5f4:	1c30      	adds	r0, r6, #0
    a5f6:	f7f6 fbcd 	bl	d94 <__aeabi_fmul>
    a5fa:	21fc      	movs	r1, #252	; 0xfc
    a5fc:	1c06      	adds	r6, r0, #0
    a5fe:	6420      	str	r0, [r4, #64]	; 0x40
    a600:	0589      	lsls	r1, r1, #22
    a602:	1c28      	adds	r0, r5, #0
    a604:	f7f6 fbc6 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:438 (discriminator 1)
	}

	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    a608:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:434 (discriminator 1)
	}

	// compute the hard iron vector (in uT but offset and scaled by FMATRIXSCALING)
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = 0.5F * pthisMagCal->fvecA[l];
    a60a:	1c05      	adds	r5, r0, #0
    a60c:	6460      	str	r0, [r4, #68]	; 0x44
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:438 (discriminator 1)
	}

	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    a60e:	1c38      	adds	r0, r7, #0
    a610:	f7f6 fbc0 	bl	d94 <__aeabi_fmul>
    a614:	9902      	ldr	r1, [sp, #8]
    a616:	f7f6 f86d 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:439 (discriminator 1)
			pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] + pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z]);
    a61a:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:438 (discriminator 1)
	{
		pthisMagCal->ftrV[l] = 0.5F * pthisMagCal->fvecA[l];
	}

	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    a61c:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:439 (discriminator 1)
			pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] + pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z]);
    a61e:	1c30      	adds	r0, r6, #0
    a620:	f7f6 fbb8 	bl	d94 <__aeabi_fmul>
    a624:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:438 (discriminator 1)
	{
		pthisMagCal->ftrV[l] = 0.5F * pthisMagCal->fvecA[l];
	}

	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    a626:	1c38      	adds	r0, r7, #0
    a628:	f7f6 f864 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:439 (discriminator 1)
			pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] + pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z]);
    a62c:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:438 (discriminator 1)
	{
		pthisMagCal->ftrV[l] = 0.5F * pthisMagCal->fvecA[l];
	}

	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    a62e:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:439 (discriminator 1)
			pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] + pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z]);
    a630:	1c28      	adds	r0, r5, #0
    a632:	f7f6 fbaf 	bl	d94 <__aeabi_fmul>
    a636:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:438 (discriminator 1)
	{
		pthisMagCal->ftrV[l] = 0.5F * pthisMagCal->fvecA[l];
	}

	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    a638:	1c30      	adds	r0, r6, #0
    a63a:	f7f6 f85b 	bl	6f4 <__aeabi_fadd>
    a63e:	f007 f83f 	bl	116c0 <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:442 (discriminator 1)
			pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] + pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z]);

	// calculate the trial fit error (percent) normalized to number of measurements and scaled geomagnetic field strength
	pthisMagCal->ftrFitErrorpc = sqrtf(fE / (float) pthisMagBuffer->iMagBufferCount) * 100.0F /
    a642:	4b31      	ldr	r3, [pc, #196]	; (a708 <fUpdateCalibration4INV+0x808>)
    a644:	9e0e      	ldr	r6, [sp, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:438 (discriminator 1)
	{
		pthisMagCal->ftrV[l] = 0.5F * pthisMagCal->fvecA[l];
	}

	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    a646:	66e0      	str	r0, [r4, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:442 (discriminator 1)
			pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] + pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z]);

	// calculate the trial fit error (percent) normalized to number of measurements and scaled geomagnetic field strength
	pthisMagCal->ftrFitErrorpc = sqrtf(fE / (float) pthisMagBuffer->iMagBufferCount) * 100.0F /
    a648:	5ef0      	ldrsh	r0, [r6, r3]
    a64a:	f7f6 fe63 	bl	1314 <__aeabi_i2f>
    a64e:	1c01      	adds	r1, r0, #0
    a650:	4640      	mov	r0, r8
    a652:	f7f6 f9bb 	bl	9cc <__aeabi_fdiv>
    a656:	f007 f833 	bl	116c0 <sqrtf>
    a65a:	492c      	ldr	r1, [pc, #176]	; (a70c <fUpdateCalibration4INV+0x80c>)
    a65c:	f7f6 fb9a 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:443 (discriminator 1)
			(2.0F * pthisMagCal->ftrB * pthisMagCal->ftrB);
    a660:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:442 (discriminator 1)
	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] + pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z]);

	// calculate the trial fit error (percent) normalized to number of measurements and scaled geomagnetic field strength
	pthisMagCal->ftrFitErrorpc = sqrtf(fE / (float) pthisMagBuffer->iMagBufferCount) * 100.0F /
    a662:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:443 (discriminator 1)
			(2.0F * pthisMagCal->ftrB * pthisMagCal->ftrB);
    a664:	1c39      	adds	r1, r7, #0
    a666:	1c38      	adds	r0, r7, #0
    a668:	f7f6 f844 	bl	6f4 <__aeabi_fadd>
    a66c:	1c01      	adds	r1, r0, #0
    a66e:	1c38      	adds	r0, r7, #0
    a670:	f7f6 fb90 	bl	d94 <__aeabi_fmul>
    a674:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:442 (discriminator 1)
	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] + pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z]);

	// calculate the trial fit error (percent) normalized to number of measurements and scaled geomagnetic field strength
	pthisMagCal->ftrFitErrorpc = sqrtf(fE / (float) pthisMagBuffer->iMagBufferCount) * 100.0F /
    a676:	1c28      	adds	r0, r5, #0
    a678:	f7f6 f9a8 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:448 (discriminator 1)
			(2.0F * pthisMagCal->ftrB * pthisMagCal->ftrB);

	// correct the hard iron estimate for FMATRIXSCALING and the offsets applied (result in uT)
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = pthisMagCal->ftrV[l] * DEFAULTB + (float)iOffset[l] * pthisMag->fuTPerCount;
    a67c:	4924      	ldr	r1, [pc, #144]	; (a710 <fUpdateCalibration4INV+0x810>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:442 (discriminator 1)
	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] + pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z]);

	// calculate the trial fit error (percent) normalized to number of measurements and scaled geomagnetic field strength
	pthisMagCal->ftrFitErrorpc = sqrtf(fE / (float) pthisMagBuffer->iMagBufferCount) * 100.0F /
    a67e:	6720      	str	r0, [r4, #112]	; 0x70
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:448 (discriminator 1)
			(2.0F * pthisMagCal->ftrB * pthisMagCal->ftrB);

	// correct the hard iron estimate for FMATRIXSCALING and the offsets applied (result in uT)
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = pthisMagCal->ftrV[l] * DEFAULTB + (float)iOffset[l] * pthisMag->fuTPerCount;
    a680:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    a682:	f7f6 fb87 	bl	d94 <__aeabi_fmul>
    a686:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    a688:	a914      	add	r1, sp, #80	; 0x50
    a68a:	6bf5      	ldr	r5, [r6, #60]	; 0x3c
    a68c:	1c06      	adds	r6, r0, #0
    a68e:	2000      	movs	r0, #0
    a690:	5e08      	ldrsh	r0, [r1, r0]
    a692:	f7f6 fe3f 	bl	1314 <__aeabi_i2f>
    a696:	1c29      	adds	r1, r5, #0
    a698:	f7f6 fb7c 	bl	d94 <__aeabi_fmul>
    a69c:	1c01      	adds	r1, r0, #0
    a69e:	1c30      	adds	r0, r6, #0
    a6a0:	f7f6 f828 	bl	6f4 <__aeabi_fadd>
    a6a4:	491a      	ldr	r1, [pc, #104]	; (a710 <fUpdateCalibration4INV+0x810>)
    a6a6:	63e0      	str	r0, [r4, #60]	; 0x3c
    a6a8:	6c20      	ldr	r0, [r4, #64]	; 0x40
    a6aa:	f7f6 fb73 	bl	d94 <__aeabi_fmul>
    a6ae:	2252      	movs	r2, #82	; 0x52
    a6b0:	446a      	add	r2, sp
    a6b2:	1c06      	adds	r6, r0, #0
    a6b4:	2000      	movs	r0, #0
    a6b6:	5e10      	ldrsh	r0, [r2, r0]
    a6b8:	f7f6 fe2c 	bl	1314 <__aeabi_i2f>
    a6bc:	1c29      	adds	r1, r5, #0
    a6be:	f7f6 fb69 	bl	d94 <__aeabi_fmul>
    a6c2:	1c01      	adds	r1, r0, #0
    a6c4:	1c30      	adds	r0, r6, #0
    a6c6:	f7f6 f815 	bl	6f4 <__aeabi_fadd>
    a6ca:	4911      	ldr	r1, [pc, #68]	; (a710 <fUpdateCalibration4INV+0x810>)
    a6cc:	6420      	str	r0, [r4, #64]	; 0x40
    a6ce:	6c60      	ldr	r0, [r4, #68]	; 0x44
    a6d0:	f7f6 fb60 	bl	d94 <__aeabi_fmul>
    a6d4:	ab15      	add	r3, sp, #84	; 0x54
    a6d6:	1c06      	adds	r6, r0, #0
    a6d8:	2000      	movs	r0, #0
    a6da:	5e18      	ldrsh	r0, [r3, r0]
    a6dc:	f7f6 fe1a 	bl	1314 <__aeabi_i2f>
    a6e0:	1c29      	adds	r1, r5, #0
    a6e2:	f7f6 fb57 	bl	d94 <__aeabi_fmul>
    a6e6:	1c01      	adds	r1, r0, #0
    a6e8:	1c30      	adds	r0, r6, #0
    a6ea:	f7f6 f803 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:452 (discriminator 1)
	}

	// correct the geomagnetic field strength B to correct scaling (result in uT)
	pthisMagCal->ftrB *= DEFAULTB;
    a6ee:	4908      	ldr	r1, [pc, #32]	; (a710 <fUpdateCalibration4INV+0x810>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:448 (discriminator 1)
			(2.0F * pthisMagCal->ftrB * pthisMagCal->ftrB);

	// correct the hard iron estimate for FMATRIXSCALING and the offsets applied (result in uT)
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = pthisMagCal->ftrV[l] * DEFAULTB + (float)iOffset[l] * pthisMag->fuTPerCount;
    a6f0:	6460      	str	r0, [r4, #68]	; 0x44
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:452 (discriminator 1)
	}

	// correct the geomagnetic field strength B to correct scaling (result in uT)
	pthisMagCal->ftrB *= DEFAULTB;
    a6f2:	1c38      	adds	r0, r7, #0
    a6f4:	f7f6 fb4e 	bl	d94 <__aeabi_fmul>
    a6f8:	66e0      	str	r0, [r4, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:455 (discriminator 1)

	return;
}
    a6fa:	b01b      	add	sp, #108	; 0x6c
    a6fc:	bc3c      	pop	{r2, r3, r4, r5}
    a6fe:	4690      	mov	r8, r2
    a700:	4699      	mov	r9, r3
    a702:	46a2      	mov	sl, r4
    a704:	46ab      	mov	fp, r5
    a706:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a708:	00000b56 	.word	0x00000b56
    a70c:	42c80000 	.word	0x42c80000
    a710:	42480000 	.word	0x42480000

0000a714 <fUpdateCalibration7EIG>:
fUpdateCalibration7EIG():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:459

// 7 element calibration using direct eigen-decomposition
void fUpdateCalibration7EIG(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer, struct MagSensor *pthisMag)
{
    a714:	b5f0      	push	{r4, r5, r6, r7, lr}
    a716:	465f      	mov	r7, fp
    a718:	464d      	mov	r5, r9
    a71a:	4656      	mov	r6, sl
    a71c:	4644      	mov	r4, r8
    a71e:	b4f0      	push	{r4, r5, r6, r7}
    a720:	b093      	sub	sp, #76	; 0x4c
    a722:	4683      	mov	fp, r0
    a724:	910c      	str	r1, [sp, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:469
	int16 iOffset[3];						// offset to remove large DC hard iron bias
	int16 iCount;							// number of measurements counted
	int8 i, j, k, l, m, n;					// loop counters

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;
    a726:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    a728:	496e      	ldr	r1, [pc, #440]	; (a8e4 <fUpdateCalibration7EIG+0x1d0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:459
	return;
}

// 7 element calibration using direct eigen-decomposition
void fUpdateCalibration7EIG(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer, struct MagSensor *pthisMag)
{
    a72a:	920e      	str	r2, [sp, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:469
	int16 iOffset[3];						// offset to remove large DC hard iron bias
	int16 iCount;							// number of measurements counted
	int8 i, j, k, l, m, n;					// loop counters

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;
    a72c:	f7f6 f94e 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:472

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
    a730:	2142      	movs	r1, #66	; 0x42
    a732:	2300      	movs	r3, #0
    a734:	4469      	add	r1, sp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:469
	int16 iOffset[3];						// offset to remove large DC hard iron bias
	int16 iCount;							// number of measurements counted
	int8 i, j, k, l, m, n;					// loop counters

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;
    a736:	9006      	str	r0, [sp, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:472

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
    a738:	aa10      	add	r2, sp, #64	; 0x40
    a73a:	a811      	add	r0, sp, #68	; 0x44
    a73c:	8003      	strh	r3, [r0, #0]
    a73e:	800b      	strh	r3, [r1, #0]
    a740:	8013      	strh	r3, [r2, #0]
    a742:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:479
	// zero the on and above diagonal elements of the 7x7 symmetric measurement matrix fmatA
	for (m = 0; m < 7; m++)
	{
		for (n = m; n < 7; n++)
		{
			pthisMagCal->fmatA[m][n] = 0.0F;
    a744:	2000      	movs	r0, #0
    a746:	465d      	mov	r5, fp
    a748:	008c      	lsls	r4, r1, #2
    a74a:	b2cb      	uxtb	r3, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:479 (discriminator 1)
    a74c:	1864      	adds	r4, r4, r1
    a74e:	b25a      	sxtb	r2, r3
    a750:	0064      	lsls	r4, r4, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:479 (discriminator 2)
    a752:	18a2      	adds	r2, r4, r2
    a754:	322e      	adds	r2, #46	; 0x2e
    a756:	0092      	lsls	r2, r2, #2
    a758:	3301      	adds	r3, #1
    a75a:	18aa      	adds	r2, r5, r2
    a75c:	b2db      	uxtb	r3, r3
    a75e:	6050      	str	r0, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:477 (discriminator 2)
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;

	// zero the on and above diagonal elements of the 7x7 symmetric measurement matrix fmatA
	for (m = 0; m < 7; m++)
	{
		for (n = m; n < 7; n++)
    a760:	b25a      	sxtb	r2, r3
    a762:	2a06      	cmp	r2, #6
    a764:	ddf5      	ble.n	a752 <fUpdateCalibration7EIG+0x3e>
    a766:	3101      	adds	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:475

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;

	// zero the on and above diagonal elements of the 7x7 symmetric measurement matrix fmatA
	for (m = 0; m < 7; m++)
    a768:	2907      	cmp	r1, #7
    a76a:	d1ed      	bne.n	a748 <fUpdateCalibration7EIG+0x34>
    a76c:	ab10      	add	r3, sp, #64	; 0x40
    a76e:	881b      	ldrh	r3, [r3, #0]
    a770:	2442      	movs	r4, #66	; 0x42
    a772:	9309      	str	r3, [sp, #36]	; 0x24
    a774:	446c      	add	r4, sp
    a776:	8824      	ldrh	r4, [r4, #0]
    a778:	46ab      	mov	fp, r5
    a77a:	940b      	str	r4, [sp, #44]	; 0x2c
    a77c:	ad11      	add	r5, sp, #68	; 0x44
    a77e:	882d      	ldrh	r5, [r5, #0]
    a780:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    a782:	950a      	str	r5, [sp, #40]	; 0x28
    a784:	25e4      	movs	r5, #228	; 0xe4
    a786:	00ed      	lsls	r5, r5, #3
    a788:	1965      	adds	r5, r4, r5
    a78a:	9507      	str	r5, [sp, #28]
    a78c:	25ba      	movs	r5, #186	; 0xba
    a78e:	012d      	lsls	r5, r5, #4
    a790:	1965      	adds	r5, r4, r5
    a792:	950f      	str	r5, [sp, #60]	; 0x3c
    a794:	25f7      	movs	r5, #247	; 0xf7
    a796:	940d      	str	r4, [sp, #52]	; 0x34
    a798:	00ad      	lsls	r5, r5, #2
    a79a:	2400      	movs	r4, #0
    a79c:	9405      	str	r4, [sp, #20]
    a79e:	1c2c      	adds	r4, r5, #0
    a7a0:	445c      	add	r4, fp
    a7a2:	9408      	str	r4, [sp, #32]
    a7a4:	465e      	mov	r6, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:472 (discriminator 1)

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
    a7a6:	9c07      	ldr	r4, [sp, #28]
    a7a8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    a7aa:	3c60      	subs	r4, #96	; 0x60
    a7ac:	9503      	str	r5, [sp, #12]
    a7ae:	9404      	str	r4, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:489
	iCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
	{
		for (k = 0; k < MAGBUFFSIZEY; k++)
		{
			if (pthisMagBuffer->index[j][k] != -1)
    a7b0:	9d04      	ldr	r5, [sp, #16]
    a7b2:	682d      	ldr	r5, [r5, #0]
    a7b4:	3501      	adds	r5, #1
    a7b6:	d100      	bne.n	a7ba <fUpdateCalibration7EIG+0xa6>
    a7b8:	e0b6      	b.n	a928 <fUpdateCalibration7EIG+0x214>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:492
			{
				// use first valid magnetic buffer entry as offset estimate (bit counts)
				if (iCount == 0)
    a7ba:	9c05      	ldr	r4, [sp, #20]
    a7bc:	9d03      	ldr	r5, [sp, #12]
    a7be:	2c00      	cmp	r4, #0
    a7c0:	d100      	bne.n	a7c4 <fUpdateCalibration7EIG+0xb0>
    a7c2:	e271      	b.n	aca8 <fUpdateCalibration7EIG+0x594>
    a7c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a7c6:	2000      	movs	r0, #0
    a7c8:	5e28      	ldrsh	r0, [r5, r0]
    a7ca:	b223      	sxth	r3, r4
    a7cc:	1ac0      	subs	r0, r0, r3
    a7ce:	f7f6 fda1 	bl	1314 <__aeabi_i2f>
    a7d2:	9d03      	ldr	r5, [sp, #12]
    a7d4:	1c07      	adds	r7, r0, #0
    a7d6:	2090      	movs	r0, #144	; 0x90
    a7d8:	0080      	lsls	r0, r0, #2
    a7da:	182b      	adds	r3, r5, r0
    a7dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a7de:	2100      	movs	r1, #0
    a7e0:	5e58      	ldrsh	r0, [r3, r1]
    a7e2:	b223      	sxth	r3, r4
    a7e4:	1ac0      	subs	r0, r0, r3
    a7e6:	f7f6 fd95 	bl	1314 <__aeabi_i2f>
    a7ea:	9c03      	ldr	r4, [sp, #12]
    a7ec:	1c05      	adds	r5, r0, #0
    a7ee:	2090      	movs	r0, #144	; 0x90
    a7f0:	00c0      	lsls	r0, r0, #3
    a7f2:	1823      	adds	r3, r4, r0
    a7f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    a7f6:	2100      	movs	r1, #0
    a7f8:	5e58      	ldrsh	r0, [r3, r1]
    a7fa:	b223      	sxth	r3, r4
    a7fc:	1ac0      	subs	r0, r0, r3
    a7fe:	f7f6 fd89 	bl	1314 <__aeabi_i2f>
    a802:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:503 (discriminator 1)
				}

				// apply the offset and scaling and store in fvecA
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l + 3] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    a804:	1c39      	adds	r1, r7, #0
    a806:	9806      	ldr	r0, [sp, #24]
    a808:	f7f6 fac4 	bl	d94 <__aeabi_fmul>
    a80c:	1c07      	adds	r7, r0, #0
    a80e:	20fa      	movs	r0, #250	; 0xfa
    a810:	0080      	lsls	r0, r0, #2
    a812:	5037      	str	r7, [r6, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:504 (discriminator 1)
					pthisMagCal->fvecA[l] = pthisMagCal->fvecA[l + 3] * pthisMagCal->fvecA[l + 3];
    a814:	1c39      	adds	r1, r7, #0
    a816:	1c38      	adds	r0, r7, #0
    a818:	f7f6 fabc 	bl	d94 <__aeabi_fmul>
    a81c:	21f7      	movs	r1, #247	; 0xf7
    a81e:	0089      	lsls	r1, r1, #2
    a820:	4682      	mov	sl, r0
    a822:	5070      	str	r0, [r6, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:503 (discriminator 1)
				}

				// apply the offset and scaling and store in fvecA
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l + 3] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    a824:	1c29      	adds	r1, r5, #0
    a826:	9806      	ldr	r0, [sp, #24]
    a828:	f7f6 fab4 	bl	d94 <__aeabi_fmul>
    a82c:	22fb      	movs	r2, #251	; 0xfb
    a82e:	0092      	lsls	r2, r2, #2
    a830:	1c05      	adds	r5, r0, #0
    a832:	50b0      	str	r0, [r6, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:504 (discriminator 1)
					pthisMagCal->fvecA[l] = pthisMagCal->fvecA[l + 3] * pthisMagCal->fvecA[l + 3];
    a834:	1c29      	adds	r1, r5, #0
    a836:	f7f6 faad 	bl	d94 <__aeabi_fmul>
    a83a:	23f8      	movs	r3, #248	; 0xf8
    a83c:	009b      	lsls	r3, r3, #2
    a83e:	50f0      	str	r0, [r6, r3]
    a840:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:503 (discriminator 1)
				}

				// apply the offset and scaling and store in fvecA
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l + 3] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    a842:	1c21      	adds	r1, r4, #0
    a844:	9806      	ldr	r0, [sp, #24]
    a846:	f7f6 faa5 	bl	d94 <__aeabi_fmul>
    a84a:	1c04      	adds	r4, r0, #0
    a84c:	20fc      	movs	r0, #252	; 0xfc
    a84e:	0080      	lsls	r0, r0, #2
    a850:	5034      	str	r4, [r6, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:504 (discriminator 1)
					pthisMagCal->fvecA[l] = pthisMagCal->fvecA[l + 3] * pthisMagCal->fvecA[l + 3];
    a852:	1c21      	adds	r1, r4, #0
    a854:	1c20      	adds	r0, r4, #0
    a856:	f7f6 fa9d 	bl	d94 <__aeabi_fmul>
    a85a:	21f9      	movs	r1, #249	; 0xf9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:513 (discriminator 1)
				// with the exception of fmatA[6][6] which will sum to the number of measurements
				// and remembering that fvecA[6] equals 1.0F
				// update the right hand column [6] of fmatA except for fmatA[6][6]
				for (m = 0; m < 6; m++)
				{
					pthisMagCal->fmatA[m][6] += pthisMagCal->fvecA[m];
    a85c:	22d4      	movs	r2, #212	; 0xd4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:504 (discriminator 1)

				// apply the offset and scaling and store in fvecA
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l + 3] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
					pthisMagCal->fvecA[l] = pthisMagCal->fvecA[l + 3] * pthisMagCal->fvecA[l + 3];
    a85e:	0089      	lsls	r1, r1, #2
    a860:	4680      	mov	r8, r0
    a862:	5070      	str	r0, [r6, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:513 (discriminator 1)
				// with the exception of fmatA[6][6] which will sum to the number of measurements
				// and remembering that fvecA[6] equals 1.0F
				// update the right hand column [6] of fmatA except for fmatA[6][6]
				for (m = 0; m < 6; m++)
				{
					pthisMagCal->fmatA[m][6] += pthisMagCal->fvecA[m];
    a864:	58b0      	ldr	r0, [r6, r2]
    a866:	4651      	mov	r1, sl
    a868:	f7f5 ff44 	bl	6f4 <__aeabi_fadd>
    a86c:	23d4      	movs	r3, #212	; 0xd4
    a86e:	50f0      	str	r0, [r6, r3]
    a870:	21fc      	movs	r1, #252	; 0xfc
    a872:	5870      	ldr	r0, [r6, r1]
    a874:	4649      	mov	r1, r9
    a876:	f7f5 ff3d 	bl	6f4 <__aeabi_fadd>
    a87a:	22fc      	movs	r2, #252	; 0xfc
    a87c:	2392      	movs	r3, #146	; 0x92
    a87e:	50b0      	str	r0, [r6, r2]
    a880:	005b      	lsls	r3, r3, #1
    a882:	58f0      	ldr	r0, [r6, r3]
    a884:	4641      	mov	r1, r8
    a886:	4699      	mov	r9, r3
    a888:	f7f5 ff34 	bl	6f4 <__aeabi_fadd>
    a88c:	464b      	mov	r3, r9
    a88e:	50f0      	str	r0, [r6, r3]
    a890:	23a6      	movs	r3, #166	; 0xa6
    a892:	005b      	lsls	r3, r3, #1
    a894:	58f0      	ldr	r0, [r6, r3]
    a896:	1c39      	adds	r1, r7, #0
    a898:	4698      	mov	r8, r3
    a89a:	f7f5 ff2b 	bl	6f4 <__aeabi_fadd>
    a89e:	27ba      	movs	r7, #186	; 0xba
    a8a0:	4641      	mov	r1, r8
    a8a2:	5070      	str	r0, [r6, r1]
    a8a4:	007f      	lsls	r7, r7, #1
    a8a6:	59f0      	ldr	r0, [r6, r7]
    a8a8:	1c29      	adds	r1, r5, #0
    a8aa:	f7f5 ff23 	bl	6f4 <__aeabi_fadd>
    a8ae:	25ce      	movs	r5, #206	; 0xce
    a8b0:	51f0      	str	r0, [r6, r7]
    a8b2:	006d      	lsls	r5, r5, #1
    a8b4:	5970      	ldr	r0, [r6, r5]
    a8b6:	1c21      	adds	r1, r4, #0
    a8b8:	f7f5 ff1c 	bl	6f4 <__aeabi_fadd>
    a8bc:	9a08      	ldr	r2, [sp, #32]
    a8be:	2300      	movs	r3, #0
    a8c0:	5170      	str	r0, [r6, r5]
    a8c2:	4693      	mov	fp, r2
    a8c4:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:520 (discriminator 1)
				// update the on and above diagonal terms except for right hand column 6
				for (m = 0; m < 6; m++)
				{
					for (n = m; n < 6; n++)
					{
						pthisMagCal->fmatA[m][n] += pthisMagCal->fvecA[m] * pthisMagCal->fvecA[n];
    a8c6:	27bc      	movs	r7, #188	; 0xbc
    a8c8:	465a      	mov	r2, fp
    a8ca:	6812      	ldr	r2, [r2, #0]
    a8cc:	4651      	mov	r1, sl
    a8ce:	4655      	mov	r5, sl
    a8d0:	b2cc      	uxtb	r4, r1
    a8d2:	4691      	mov	r9, r2
    a8d4:	1c11      	adds	r1, r2, #0
    a8d6:	00aa      	lsls	r2, r5, #2
    a8d8:	4452      	add	r2, sl
    a8da:	0052      	lsls	r2, r2, #1
    a8dc:	b263      	sxtb	r3, r4
    a8de:	4690      	mov	r8, r2
    a8e0:	e007      	b.n	a8f2 <fUpdateCalibration7EIG+0x1de>
    a8e2:	46c0      	nop			; (mov r8, r8)
    a8e4:	42480000 	.word	0x42480000
    a8e8:	1c1a      	adds	r2, r3, #0
    a8ea:	32f6      	adds	r2, #246	; 0xf6
    a8ec:	0092      	lsls	r2, r2, #2
    a8ee:	18b2      	adds	r2, r6, r2
    a8f0:	6851      	ldr	r1, [r2, #4]
    a8f2:	4443      	add	r3, r8
    a8f4:	009b      	lsls	r3, r3, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:520 (discriminator 2)
    a8f6:	4648      	mov	r0, r9
    a8f8:	18f5      	adds	r5, r6, r3
    a8fa:	f7f6 fa4b 	bl	d94 <__aeabi_fmul>
    a8fe:	1c01      	adds	r1, r0, #0
    a900:	59e8      	ldr	r0, [r5, r7]
    a902:	f7f5 fef7 	bl	6f4 <__aeabi_fadd>
    a906:	3401      	adds	r4, #1
    a908:	b2e4      	uxtb	r4, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:518 (discriminator 2)
					pthisMagCal->fmatA[m][6] += pthisMagCal->fvecA[m];
				}
				// update the on and above diagonal terms except for right hand column 6
				for (m = 0; m < 6; m++)
				{
					for (n = m; n < 6; n++)
    a90a:	b263      	sxtb	r3, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:520 (discriminator 2)
					{
						pthisMagCal->fmatA[m][n] += pthisMagCal->fvecA[m] * pthisMagCal->fvecA[n];
    a90c:	51e8      	str	r0, [r5, r7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:518 (discriminator 2)
					pthisMagCal->fmatA[m][6] += pthisMagCal->fvecA[m];
				}
				// update the on and above diagonal terms except for right hand column 6
				for (m = 0; m < 6; m++)
				{
					for (n = m; n < 6; n++)
    a90e:	2b05      	cmp	r3, #5
    a910:	ddea      	ble.n	a8e8 <fUpdateCalibration7EIG+0x1d4>
    a912:	2401      	movs	r4, #1
    a914:	44a2      	add	sl, r4
    a916:	2504      	movs	r5, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:516
				for (m = 0; m < 6; m++)
				{
					pthisMagCal->fmatA[m][6] += pthisMagCal->fvecA[m];
				}
				// update the on and above diagonal terms except for right hand column 6
				for (m = 0; m < 6; m++)
    a918:	4650      	mov	r0, sl
    a91a:	44ab      	add	fp, r5
    a91c:	2806      	cmp	r0, #6
    a91e:	d1d3      	bne.n	a8c8 <fUpdateCalibration7EIG+0x1b4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:525
						pthisMagCal->fmatA[m][n] += pthisMagCal->fvecA[m] * pthisMagCal->fvecA[n];
					}
				}

				// increment the measurement counter for the next iteration
				iCount++;
    a920:	9b05      	ldr	r3, [sp, #20]
    a922:	3301      	adds	r3, #1
    a924:	b29b      	uxth	r3, r3
    a926:	9305      	str	r3, [sp, #20]
    a928:	9d03      	ldr	r5, [sp, #12]
    a92a:	9c04      	ldr	r4, [sp, #16]
    a92c:	3502      	adds	r5, #2
    a92e:	9503      	str	r5, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:487

	// place from MINEQUATIONS to MAXEQUATIONS entries into product matrix fmatA
	iCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
	{
		for (k = 0; k < MAGBUFFSIZEY; k++)
    a930:	9d07      	ldr	r5, [sp, #28]
    a932:	3404      	adds	r4, #4
    a934:	9404      	str	r4, [sp, #16]
    a936:	42ac      	cmp	r4, r5
    a938:	d000      	beq.n	a93c <fUpdateCalibration7EIG+0x228>
    a93a:	e739      	b.n	a7b0 <fUpdateCalibration7EIG+0x9c>
    a93c:	3460      	adds	r4, #96	; 0x60
    a93e:	9407      	str	r4, [sp, #28]
    a940:	9c0d      	ldr	r4, [sp, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:485
		}
	}

	// place from MINEQUATIONS to MAXEQUATIONS entries into product matrix fmatA
	iCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
    a942:	9d07      	ldr	r5, [sp, #28]
    a944:	3430      	adds	r4, #48	; 0x30
    a946:	940d      	str	r4, [sp, #52]	; 0x34
    a948:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    a94a:	42a5      	cmp	r5, r4
    a94c:	d000      	beq.n	a950 <fUpdateCalibration7EIG+0x23c>
    a94e:	e72a      	b.n	a7a6 <fUpdateCalibration7EIG+0x92>
    a950:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a952:	ad10      	add	r5, sp, #64	; 0x40
    a954:	802c      	strh	r4, [r5, #0]
    a956:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a958:	2542      	movs	r5, #66	; 0x42
    a95a:	446d      	add	r5, sp
    a95c:	802c      	strh	r4, [r5, #0]
    a95e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    a960:	ad11      	add	r5, sp, #68	; 0x44
    a962:	802c      	strh	r4, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:531
			}
		}
	}

	// finally set the last element fmatA[6][6] to the number of measurements
	pthisMagCal->fmatA[6][6] = (float) iCount;
    a964:	9d05      	ldr	r5, [sp, #20]
    a966:	46b3      	mov	fp, r6
    a968:	b228      	sxth	r0, r5
    a96a:	f7f6 fcd3 	bl	1314 <__aeabi_i2f>
    a96e:	23e2      	movs	r3, #226	; 0xe2
    a970:	005b      	lsls	r3, r3, #1
    a972:	50f0      	str	r0, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:534

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;
    a974:	9d05      	ldr	r5, [sp, #20]
    a976:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    a978:	4bdb      	ldr	r3, [pc, #876]	; (ace8 <fUpdateCalibration7EIG+0x5d4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:541
	// copy the above diagonal elements of fmatA to below the diagonal
	for (m = 1; m < 7; m++)
	{
		for (n = 0; n < m; n++)
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    a97a:	20bc      	movs	r0, #188	; 0xbc
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:534

	// finally set the last element fmatA[6][6] to the number of measurements
	pthisMagCal->fmatA[6][6] = (float) iCount;

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;
    a97c:	52e5      	strh	r5, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:541
	// copy the above diagonal elements of fmatA to below the diagonal
	for (m = 1; m < 7; m++)
	{
		for (n = 0; n < m; n++)
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    a97e:	259a      	movs	r5, #154	; 0x9a
    a980:	24ae      	movs	r4, #174	; 0xae
    a982:	2686      	movs	r6, #134	; 0x86
    a984:	006d      	lsls	r5, r5, #1
    a986:	0064      	lsls	r4, r4, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:537

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of fmatA to below the diagonal
	for (m = 1; m < 7; m++)
    a988:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:541
	{
		for (n = 0; n < m; n++)
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    a98a:	4684      	mov	ip, r0
    a98c:	27e4      	movs	r7, #228	; 0xe4
    a98e:	0076      	lsls	r6, r6, #1
    a990:	46a9      	mov	r9, r5
    a992:	46a2      	mov	sl, r4
    a994:	b253      	sxtb	r3, r2
    a996:	0099      	lsls	r1, r3, #2
    a998:	465c      	mov	r4, fp
    a99a:	1860      	adds	r0, r4, r1
    a99c:	4665      	mov	r5, ip
    a99e:	18c9      	adds	r1, r1, r3
    a9a0:	5945      	ldr	r5, [r0, r5]
    a9a2:	00c9      	lsls	r1, r1, #3
    a9a4:	4459      	add	r1, fp
    a9a6:	24bc      	movs	r4, #188	; 0xbc
    a9a8:	5065      	str	r5, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:539
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of fmatA to below the diagonal
	for (m = 1; m < 7; m++)
	{
		for (n = 0; n < m; n++)
    a9aa:	2b01      	cmp	r3, #1
    a9ac:	d100      	bne.n	a9b0 <fUpdateCalibration7EIG+0x29c>
    a9ae:	e197      	b.n	ace0 <fUpdateCalibration7EIG+0x5cc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:541
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    a9b0:	59c4      	ldr	r4, [r0, r7]
    a9b2:	25c0      	movs	r5, #192	; 0xc0
    a9b4:	506c      	str	r4, [r5, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:539
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of fmatA to below the diagonal
	for (m = 1; m < 7; m++)
	{
		for (n = 0; n < m; n++)
    a9b6:	2b02      	cmp	r3, #2
    a9b8:	d100      	bne.n	a9bc <fUpdateCalibration7EIG+0x2a8>
    a9ba:	e191      	b.n	ace0 <fUpdateCalibration7EIG+0x5cc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:541
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    a9bc:	5984      	ldr	r4, [r0, r6]
    a9be:	25c4      	movs	r5, #196	; 0xc4
    a9c0:	506c      	str	r4, [r5, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:539
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of fmatA to below the diagonal
	for (m = 1; m < 7; m++)
	{
		for (n = 0; n < m; n++)
    a9c2:	2b03      	cmp	r3, #3
    a9c4:	d100      	bne.n	a9c8 <fUpdateCalibration7EIG+0x2b4>
    a9c6:	e18b      	b.n	ace0 <fUpdateCalibration7EIG+0x5cc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:541
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    a9c8:	464d      	mov	r5, r9
    a9ca:	5945      	ldr	r5, [r0, r5]
    a9cc:	24c8      	movs	r4, #200	; 0xc8
    a9ce:	5065      	str	r5, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:539
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of fmatA to below the diagonal
	for (m = 1; m < 7; m++)
	{
		for (n = 0; n < m; n++)
    a9d0:	2b04      	cmp	r3, #4
    a9d2:	d100      	bne.n	a9d6 <fUpdateCalibration7EIG+0x2c2>
    a9d4:	e184      	b.n	ace0 <fUpdateCalibration7EIG+0x5cc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:541
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    a9d6:	4655      	mov	r5, sl
    a9d8:	5940      	ldr	r0, [r0, r5]
    a9da:	31c8      	adds	r1, #200	; 0xc8
    a9dc:	6048      	str	r0, [r1, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:539
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of fmatA to below the diagonal
	for (m = 1; m < 7; m++)
	{
		for (n = 0; n < m; n++)
    a9de:	2b06      	cmp	r3, #6
    a9e0:	d000      	beq.n	a9e4 <fUpdateCalibration7EIG+0x2d0>
    a9e2:	e17d      	b.n	ace0 <fUpdateCalibration7EIG+0x5cc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:541
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    a9e4:	20cc      	movs	r0, #204	; 0xcc
    a9e6:	0040      	lsls	r0, r0, #1
    a9e8:	1c03      	adds	r3, r0, #0
    a9ea:	21de      	movs	r1, #222	; 0xde
    a9ec:	445b      	add	r3, fp
    a9ee:	0049      	lsls	r1, r1, #1
    a9f0:	685a      	ldr	r2, [r3, #4]
    a9f2:	1c0b      	adds	r3, r1, #0
    a9f4:	445b      	add	r3, fp
    a9f6:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:546
		}
	}

	// set tmpA7x1 to the unsorted eigenvalues and fmatB to the unsorted eigenvectors of fmatA
	eigencompute(pthisMagCal->fmatA, pthisMagCal->fvecA, pthisMagCal->fmatB, 7);
    a9f8:	2393      	movs	r3, #147	; 0x93
    a9fa:	009b      	lsls	r3, r3, #2
    a9fc:	1c1a      	adds	r2, r3, #0
    a9fe:	4658      	mov	r0, fp
    aa00:	30bc      	adds	r0, #188	; 0xbc
    aa02:	9908      	ldr	r1, [sp, #32]
    aa04:	445a      	add	r2, fp
    aa06:	2307      	movs	r3, #7
    aa08:	f000 ffe2 	bl	b9d0 <eigencompute>
    aa0c:	23f7      	movs	r3, #247	; 0xf7
    aa0e:	009b      	lsls	r3, r3, #2
    aa10:	465c      	mov	r4, fp
    aa12:	58e5      	ldr	r5, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:552

	// find the smallest eigenvalue
	j = 0;
	for (i = 1; i < 7; i++)
	{
		if (pthisMagCal->fvecA[i] < pthisMagCal->fvecA[j])
    aa14:	23f8      	movs	r3, #248	; 0xf8
    aa16:	009b      	lsls	r3, r3, #2
    aa18:	58e4      	ldr	r4, [r4, r3]
    aa1a:	1c29      	adds	r1, r5, #0
    aa1c:	1c20      	adds	r0, r4, #0
    aa1e:	f7f5 fe41 	bl	6a4 <__aeabi_fcmplt>
    aa22:	1c06      	adds	r6, r0, #0
    aa24:	1e73      	subs	r3, r6, #1
    aa26:	419e      	sbcs	r6, r3
    aa28:	2800      	cmp	r0, #0
    aa2a:	d100      	bne.n	aa2e <fUpdateCalibration7EIG+0x31a>
    aa2c:	1c2c      	adds	r4, r5, #0
    aa2e:	23f9      	movs	r3, #249	; 0xf9
    aa30:	009b      	lsls	r3, r3, #2
    aa32:	4658      	mov	r0, fp
    aa34:	58c5      	ldr	r5, [r0, r3]
    aa36:	1c21      	adds	r1, r4, #0
    aa38:	1c28      	adds	r0, r5, #0
    aa3a:	f7f5 fe33 	bl	6a4 <__aeabi_fcmplt>
    aa3e:	2702      	movs	r7, #2
    aa40:	2800      	cmp	r0, #0
    aa42:	d100      	bne.n	aa46 <fUpdateCalibration7EIG+0x332>
    aa44:	1c37      	adds	r7, r6, #0
    aa46:	1c28      	adds	r0, r5, #0
    aa48:	1c21      	adds	r1, r4, #0
    aa4a:	b2ff      	uxtb	r7, r7
    aa4c:	f7f5 fe2a 	bl	6a4 <__aeabi_fcmplt>
    aa50:	2800      	cmp	r0, #0
    aa52:	d100      	bne.n	aa56 <fUpdateCalibration7EIG+0x342>
    aa54:	1c25      	adds	r5, r4, #0
    aa56:	23fa      	movs	r3, #250	; 0xfa
    aa58:	009b      	lsls	r3, r3, #2
    aa5a:	4659      	mov	r1, fp
    aa5c:	58cc      	ldr	r4, [r1, r3]
    aa5e:	1c29      	adds	r1, r5, #0
    aa60:	1c20      	adds	r0, r4, #0
    aa62:	f7f5 fe1f 	bl	6a4 <__aeabi_fcmplt>
    aa66:	2603      	movs	r6, #3
    aa68:	2800      	cmp	r0, #0
    aa6a:	d100      	bne.n	aa6e <fUpdateCalibration7EIG+0x35a>
    aa6c:	1c3e      	adds	r6, r7, #0
    aa6e:	1c20      	adds	r0, r4, #0
    aa70:	1c29      	adds	r1, r5, #0
    aa72:	b2f6      	uxtb	r6, r6
    aa74:	f7f5 fe16 	bl	6a4 <__aeabi_fcmplt>
    aa78:	2800      	cmp	r0, #0
    aa7a:	d100      	bne.n	aa7e <fUpdateCalibration7EIG+0x36a>
    aa7c:	1c2c      	adds	r4, r5, #0
    aa7e:	23fb      	movs	r3, #251	; 0xfb
    aa80:	009b      	lsls	r3, r3, #2
    aa82:	465a      	mov	r2, fp
    aa84:	58d5      	ldr	r5, [r2, r3]
    aa86:	1c21      	adds	r1, r4, #0
    aa88:	1c28      	adds	r0, r5, #0
    aa8a:	f7f5 fe0b 	bl	6a4 <__aeabi_fcmplt>
    aa8e:	2704      	movs	r7, #4
    aa90:	2800      	cmp	r0, #0
    aa92:	d100      	bne.n	aa96 <fUpdateCalibration7EIG+0x382>
    aa94:	1c37      	adds	r7, r6, #0
    aa96:	1c28      	adds	r0, r5, #0
    aa98:	1c21      	adds	r1, r4, #0
    aa9a:	b2ff      	uxtb	r7, r7
    aa9c:	f7f5 fe02 	bl	6a4 <__aeabi_fcmplt>
    aaa0:	2800      	cmp	r0, #0
    aaa2:	d100      	bne.n	aaa6 <fUpdateCalibration7EIG+0x392>
    aaa4:	1c25      	adds	r5, r4, #0
    aaa6:	23fc      	movs	r3, #252	; 0xfc
    aaa8:	009b      	lsls	r3, r3, #2
    aaaa:	465c      	mov	r4, fp
    aaac:	58e6      	ldr	r6, [r4, r3]
    aaae:	1c29      	adds	r1, r5, #0
    aab0:	1c30      	adds	r0, r6, #0
    aab2:	f7f5 fdf7 	bl	6a4 <__aeabi_fcmplt>
    aab6:	1c33      	adds	r3, r6, #0
    aab8:	2800      	cmp	r0, #0
    aaba:	d100      	bne.n	aabe <fUpdateCalibration7EIG+0x3aa>
    aabc:	1c2b      	adds	r3, r5, #0
    aabe:	1c18      	adds	r0, r3, #0
    aac0:	23fd      	movs	r3, #253	; 0xfd
    aac2:	009b      	lsls	r3, r3, #2
    aac4:	465a      	mov	r2, fp
    aac6:	58d1      	ldr	r1, [r2, r3]
    aac8:	f7f5 fe00 	bl	6cc <__aeabi_fcmpgt>
    aacc:	2406      	movs	r4, #6
    aace:	2800      	cmp	r0, #0
    aad0:	d108      	bne.n	aae4 <fUpdateCalibration7EIG+0x3d0>
    aad2:	1c30      	adds	r0, r6, #0
    aad4:	1c29      	adds	r1, r5, #0
    aad6:	f7f5 fde5 	bl	6a4 <__aeabi_fcmplt>
    aada:	2405      	movs	r4, #5
    aadc:	2800      	cmp	r0, #0
    aade:	d100      	bne.n	aae2 <fUpdateCalibration7EIG+0x3ce>
    aae0:	1c3c      	adds	r4, r7, #0
    aae2:	b264      	sxtb	r4, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:560
		}
	}

	// set ellipsoid matrix A to the solution vector with smallest eigenvalue, compute its determinant
	// and the hard iron offset (scaled and offset)
	f3x3matrixAeqScalar(pthisMagCal->fA, 0.0F);
    aae4:	465e      	mov	r6, fp
    aae6:	3674      	adds	r6, #116	; 0x74
    aae8:	1c30      	adds	r0, r6, #0
    aaea:	2100      	movs	r1, #0
    aaec:	f000 fe0a 	bl	b704 <f3x3matrixAeqScalar>
    aaf0:	00a4      	lsls	r4, r4, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:564
	det = 1.0F;
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->fA[l][l] = pthisMagCal->fmatB[l][j];
    aaf2:	2393      	movs	r3, #147	; 0x93
    aaf4:	445c      	add	r4, fp
    aaf6:	009b      	lsls	r3, r3, #2
    aaf8:	58e7      	ldr	r7, [r4, r3]
    aafa:	465b      	mov	r3, fp
    aafc:	675f      	str	r7, [r3, #116]	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:566
		det *= pthisMagCal->fA[l][l];
		pthisMagCal->ftrV[l] = -0.5F * pthisMagCal->fmatB[l + 3][j] / pthisMagCal->fA[l][l];
    aafe:	23b1      	movs	r3, #177	; 0xb1
    ab00:	009b      	lsls	r3, r3, #2
    ab02:	21bf      	movs	r1, #191	; 0xbf
    ab04:	58e0      	ldr	r0, [r4, r3]
    ab06:	0609      	lsls	r1, r1, #24
    ab08:	f7f6 f944 	bl	d94 <__aeabi_fmul>
    ab0c:	1c39      	adds	r1, r7, #0
    ab0e:	f7f5 ff5d 	bl	9cc <__aeabi_fdiv>
    ab12:	465d      	mov	r5, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:564
	// and the hard iron offset (scaled and offset)
	f3x3matrixAeqScalar(pthisMagCal->fA, 0.0F);
	det = 1.0F;
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->fA[l][l] = pthisMagCal->fmatB[l][j];
    ab14:	239d      	movs	r3, #157	; 0x9d
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:566
		det *= pthisMagCal->fA[l][l];
		pthisMagCal->ftrV[l] = -0.5F * pthisMagCal->fmatB[l + 3][j] / pthisMagCal->fA[l][l];
    ab16:	63e8      	str	r0, [r5, #60]	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:564
	// and the hard iron offset (scaled and offset)
	f3x3matrixAeqScalar(pthisMagCal->fA, 0.0F);
	det = 1.0F;
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->fA[l][l] = pthisMagCal->fmatB[l][j];
    ab18:	009b      	lsls	r3, r3, #2
    ab1a:	58e5      	ldr	r5, [r4, r3]
    ab1c:	4658      	mov	r0, fp
    ab1e:	2384      	movs	r3, #132	; 0x84
    ab20:	50c5      	str	r5, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:565
		det *= pthisMagCal->fA[l][l];
    ab22:	1c29      	adds	r1, r5, #0
    ab24:	1c38      	adds	r0, r7, #0
    ab26:	f7f6 f935 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:566
		pthisMagCal->ftrV[l] = -0.5F * pthisMagCal->fmatB[l + 3][j] / pthisMagCal->fA[l][l];
    ab2a:	23bb      	movs	r3, #187	; 0xbb
    ab2c:	009b      	lsls	r3, r3, #2
    ab2e:	21bf      	movs	r1, #191	; 0xbf
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:565
	f3x3matrixAeqScalar(pthisMagCal->fA, 0.0F);
	det = 1.0F;
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->fA[l][l] = pthisMagCal->fmatB[l][j];
		det *= pthisMagCal->fA[l][l];
    ab30:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:566
		pthisMagCal->ftrV[l] = -0.5F * pthisMagCal->fmatB[l + 3][j] / pthisMagCal->fA[l][l];
    ab32:	0609      	lsls	r1, r1, #24
    ab34:	58e0      	ldr	r0, [r4, r3]
    ab36:	f7f6 f92d 	bl	d94 <__aeabi_fmul>
    ab3a:	1c29      	adds	r1, r5, #0
    ab3c:	f7f5 ff46 	bl	9cc <__aeabi_fdiv>
    ab40:	4659      	mov	r1, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:564
	// and the hard iron offset (scaled and offset)
	f3x3matrixAeqScalar(pthisMagCal->fA, 0.0F);
	det = 1.0F;
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->fA[l][l] = pthisMagCal->fmatB[l][j];
    ab42:	23a7      	movs	r3, #167	; 0xa7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:566
		det *= pthisMagCal->fA[l][l];
		pthisMagCal->ftrV[l] = -0.5F * pthisMagCal->fmatB[l + 3][j] / pthisMagCal->fA[l][l];
    ab44:	6408      	str	r0, [r1, #64]	; 0x40
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:564
	// and the hard iron offset (scaled and offset)
	f3x3matrixAeqScalar(pthisMagCal->fA, 0.0F);
	det = 1.0F;
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->fA[l][l] = pthisMagCal->fmatB[l][j];
    ab46:	009b      	lsls	r3, r3, #2
    ab48:	58e7      	ldr	r7, [r4, r3]
    ab4a:	2394      	movs	r3, #148	; 0x94
    ab4c:	50cf      	str	r7, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:565
		det *= pthisMagCal->fA[l][l];
    ab4e:	1c38      	adds	r0, r7, #0
    ab50:	4641      	mov	r1, r8
    ab52:	f7f6 f91f 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:566
		pthisMagCal->ftrV[l] = -0.5F * pthisMagCal->fmatB[l + 3][j] / pthisMagCal->fA[l][l];
    ab56:	23c5      	movs	r3, #197	; 0xc5
    ab58:	009b      	lsls	r3, r3, #2
    ab5a:	21bf      	movs	r1, #191	; 0xbf
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:565
	f3x3matrixAeqScalar(pthisMagCal->fA, 0.0F);
	det = 1.0F;
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->fA[l][l] = pthisMagCal->fmatB[l][j];
		det *= pthisMagCal->fA[l][l];
    ab5c:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:566
		pthisMagCal->ftrV[l] = -0.5F * pthisMagCal->fmatB[l + 3][j] / pthisMagCal->fA[l][l];
    ab5e:	0609      	lsls	r1, r1, #24
    ab60:	58e0      	ldr	r0, [r4, r3]
    ab62:	f7f6 f917 	bl	d94 <__aeabi_fmul>
    ab66:	1c39      	adds	r1, r7, #0
    ab68:	f7f5 ff30 	bl	9cc <__aeabi_fdiv>
    ab6c:	465a      	mov	r2, fp
    ab6e:	6450      	str	r0, [r2, #68]	; 0x44
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:570
	}

	// negate A if it has negative determinant
	if (det < 0.0F)
    ab70:	2100      	movs	r1, #0
    ab72:	1c28      	adds	r0, r5, #0
    ab74:	f7f5 fd96 	bl	6a4 <__aeabi_fcmplt>
    ab78:	2800      	cmp	r0, #0
    ab7a:	d000      	beq.n	ab7e <fUpdateCalibration7EIG+0x46a>
    ab7c:	e0a4      	b.n	acc8 <fUpdateCalibration7EIG+0x5b4>
    ab7e:	23cf      	movs	r3, #207	; 0xcf
    ab80:	009b      	lsls	r3, r3, #2
    ab82:	58e7      	ldr	r7, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:581

	// set ftmp to the square of the trial geomagnetic field strength B (counts times FMATRIXSCALING)
	ftmp = -pthisMagCal->fmatB[6][j];
	for (l = X; l <= Z; l++)
	{
		ftmp += pthisMagCal->fA[l][l] * pthisMagCal->ftrV[l] * pthisMagCal->ftrV[l];
    ab84:	465a      	mov	r2, fp
    ab86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    ab88:	465b      	mov	r3, fp
    ab8a:	6f59      	ldr	r1, [r3, #116]	; 0x74
    ab8c:	1c10      	adds	r0, r2, #0
    ab8e:	4690      	mov	r8, r2
    ab90:	f7f6 f900 	bl	d94 <__aeabi_fmul>
    ab94:	1c01      	adds	r1, r0, #0
    ab96:	4640      	mov	r0, r8
    ab98:	f7f6 f8fc 	bl	d94 <__aeabi_fmul>
    ab9c:	1c39      	adds	r1, r7, #0
    ab9e:	f7f6 fa23 	bl	fe8 <__aeabi_fsub>
    aba2:	4680      	mov	r8, r0
    aba4:	4658      	mov	r0, fp
    aba6:	6c07      	ldr	r7, [r0, #64]	; 0x40
    aba8:	2384      	movs	r3, #132	; 0x84
    abaa:	465a      	mov	r2, fp
    abac:	58d1      	ldr	r1, [r2, r3]
    abae:	1c38      	adds	r0, r7, #0
    abb0:	f7f6 f8f0 	bl	d94 <__aeabi_fmul>
    abb4:	1c01      	adds	r1, r0, #0
    abb6:	1c38      	adds	r0, r7, #0
    abb8:	f7f6 f8ec 	bl	d94 <__aeabi_fmul>
    abbc:	1c01      	adds	r1, r0, #0
    abbe:	4640      	mov	r0, r8
    abc0:	f7f5 fd98 	bl	6f4 <__aeabi_fadd>
    abc4:	465b      	mov	r3, fp
    abc6:	6c5f      	ldr	r7, [r3, #68]	; 0x44
    abc8:	465a      	mov	r2, fp
    abca:	2394      	movs	r3, #148	; 0x94
    abcc:	58d1      	ldr	r1, [r2, r3]
    abce:	4680      	mov	r8, r0
    abd0:	1c38      	adds	r0, r7, #0
    abd2:	f7f6 f8df 	bl	d94 <__aeabi_fmul>
    abd6:	1c01      	adds	r1, r0, #0
    abd8:	1c38      	adds	r0, r7, #0
    abda:	f7f6 f8db 	bl	d94 <__aeabi_fmul>
    abde:	4641      	mov	r1, r8
    abe0:	f7f5 fd88 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:585
	}

	// calculate the trial normalized fit error as a percentage
	pthisMagCal->ftrFitErrorpc = 50.0F * sqrtf(fabs(pthisMagCal->fvecA[j]) / (float) pthisMagBuffer->iMagBufferCount) / fabs(ftmp);
    abe4:	23f7      	movs	r3, #247	; 0xf7
    abe6:	009b      	lsls	r3, r3, #2
    abe8:	990c      	ldr	r1, [sp, #48]	; 0x30
    abea:	58e4      	ldr	r4, [r4, r3]
    abec:	4b3e      	ldr	r3, [pc, #248]	; (ace8 <fUpdateCalibration7EIG+0x5d4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:581

	// set ftmp to the square of the trial geomagnetic field strength B (counts times FMATRIXSCALING)
	ftmp = -pthisMagCal->fmatB[6][j];
	for (l = X; l <= Z; l++)
	{
		ftmp += pthisMagCal->fA[l][l] * pthisMagCal->ftrV[l] * pthisMagCal->ftrV[l];
    abee:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:585
	}

	// calculate the trial normalized fit error as a percentage
	pthisMagCal->ftrFitErrorpc = 50.0F * sqrtf(fabs(pthisMagCal->fvecA[j]) / (float) pthisMagBuffer->iMagBufferCount) / fabs(ftmp);
    abf0:	5ec8      	ldrsh	r0, [r1, r3]
    abf2:	f7f6 fb8f 	bl	1314 <__aeabi_i2f>
    abf6:	0064      	lsls	r4, r4, #1
    abf8:	0864      	lsrs	r4, r4, #1
    abfa:	1c01      	adds	r1, r0, #0
    abfc:	1c20      	adds	r0, r4, #0
    abfe:	f7f5 fee5 	bl	9cc <__aeabi_fdiv>
    ac02:	007c      	lsls	r4, r7, #1
    ac04:	f006 fd5c 	bl	116c0 <sqrtf>
    ac08:	0864      	lsrs	r4, r4, #1
    ac0a:	4938      	ldr	r1, [pc, #224]	; (acec <fUpdateCalibration7EIG+0x5d8>)
    ac0c:	f7f6 f8c2 	bl	d94 <__aeabi_fmul>
    ac10:	1c21      	adds	r1, r4, #0
    ac12:	f7f5 fedb 	bl	9cc <__aeabi_fdiv>
    ac16:	465a      	mov	r2, fp
    ac18:	6710      	str	r0, [r2, #112]	; 0x70
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:588

	// normalize the ellipsoid matrix A to unit determinant
	f3x3matrixAeqAxScalar(pthisMagCal->fA, powf(det, -(ONETHIRD)));
    ac1a:	4935      	ldr	r1, [pc, #212]	; (acf0 <fUpdateCalibration7EIG+0x5dc>)
    ac1c:	1c28      	adds	r0, r5, #0
    ac1e:	f006 fb83 	bl	11328 <powf>
    ac22:	1c01      	adds	r1, r0, #0
    ac24:	1c30      	adds	r0, r6, #0
    ac26:	f000 fd77 	bl	b718 <f3x3matrixAeqAxScalar>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:591

	// convert the geomagnetic field strength B into uT for normalized soft iron matrix A and normalize
	pthisMagCal->ftrB = sqrtf(fabs(ftmp)) * DEFAULTB * powf(det, -(ONESIXTH));
    ac2a:	1c20      	adds	r0, r4, #0
    ac2c:	f006 fd48 	bl	116c0 <sqrtf>
    ac30:	4930      	ldr	r1, [pc, #192]	; (acf4 <fUpdateCalibration7EIG+0x5e0>)
    ac32:	1c07      	adds	r7, r0, #0
    ac34:	1c28      	adds	r0, r5, #0
    ac36:	f006 fb77 	bl	11328 <powf>
    ac3a:	492c      	ldr	r1, [pc, #176]	; (acec <fUpdateCalibration7EIG+0x5d8>)
    ac3c:	1c04      	adds	r4, r0, #0
    ac3e:	1c38      	adds	r0, r7, #0
    ac40:	f7f6 f8a8 	bl	d94 <__aeabi_fmul>
    ac44:	1c21      	adds	r1, r4, #0
    ac46:	f7f6 f8a5 	bl	d94 <__aeabi_fmul>
    ac4a:	465b      	mov	r3, fp
    ac4c:	66d8      	str	r0, [r3, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:594

	// compute trial invW from the square root of A also with normalized determinant and hard iron offset in uT
	f3x3matrixAeqI(pthisMagCal->ftrinvW);
    ac4e:	4658      	mov	r0, fp
    ac50:	3048      	adds	r0, #72	; 0x48
    ac52:	f000 fd49 	bl	b6e8 <f3x3matrixAeqI>
    ac56:	1c35      	adds	r5, r6, #0
    ac58:	465e      	mov	r6, fp
    ac5a:	363c      	adds	r6, #60	; 0x3c
    ac5c:	2400      	movs	r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:597 (discriminator 2)
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrinvW[l][l] = sqrtf(fabs(pthisMagCal->fA[l][l]));
    ac5e:	6829      	ldr	r1, [r5, #0]
    ac60:	0048      	lsls	r0, r1, #1
    ac62:	0840      	lsrs	r0, r0, #1
    ac64:	f006 fd2c 	bl	116c0 <sqrtf>
    ac68:	1c2b      	adds	r3, r5, #0
    ac6a:	3b2c      	subs	r3, #44	; 0x2c
    ac6c:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:598 (discriminator 2)
		pthisMagCal->ftrV[l] = pthisMagCal->ftrV[l] * DEFAULTB + (float)iOffset[l] * pthisMag->fuTPerCount;
    ac6e:	491f      	ldr	r1, [pc, #124]	; (acec <fUpdateCalibration7EIG+0x5d8>)
    ac70:	6830      	ldr	r0, [r6, #0]
    ac72:	f7f6 f88f 	bl	d94 <__aeabi_fmul>
    ac76:	aa10      	add	r2, sp, #64	; 0x40
    ac78:	1c07      	adds	r7, r0, #0
    ac7a:	5f10      	ldrsh	r0, [r2, r4]
    ac7c:	f7f6 fb4a 	bl	1314 <__aeabi_i2f>
    ac80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ac82:	3402      	adds	r4, #2
    ac84:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    ac86:	f7f6 f885 	bl	d94 <__aeabi_fmul>
    ac8a:	1c01      	adds	r1, r0, #0
    ac8c:	1c38      	adds	r0, r7, #0
    ac8e:	f7f5 fd31 	bl	6f4 <__aeabi_fadd>
    ac92:	3510      	adds	r5, #16
    ac94:	c601      	stmia	r6!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:595 (discriminator 2)
	// convert the geomagnetic field strength B into uT for normalized soft iron matrix A and normalize
	pthisMagCal->ftrB = sqrtf(fabs(ftmp)) * DEFAULTB * powf(det, -(ONESIXTH));

	// compute trial invW from the square root of A also with normalized determinant and hard iron offset in uT
	f3x3matrixAeqI(pthisMagCal->ftrinvW);
	for (l = X; l <= Z; l++)
    ac96:	2c06      	cmp	r4, #6
    ac98:	d1e1      	bne.n	ac5e <fUpdateCalibration7EIG+0x54a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:602
		pthisMagCal->ftrinvW[l][l] = sqrtf(fabs(pthisMagCal->fA[l][l]));
		pthisMagCal->ftrV[l] = pthisMagCal->ftrV[l] * DEFAULTB + (float)iOffset[l] * pthisMag->fuTPerCount;
	}

	return;
}
    ac9a:	b013      	add	sp, #76	; 0x4c
    ac9c:	bc3c      	pop	{r2, r3, r4, r5}
    ac9e:	4690      	mov	r8, r2
    aca0:	4699      	mov	r9, r3
    aca2:	46a2      	mov	sl, r4
    aca4:	46ab      	mov	fp, r5
    aca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aca8:	2090      	movs	r0, #144	; 0x90
    acaa:	00c0      	lsls	r0, r0, #3
    acac:	182b      	adds	r3, r5, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:496
				// use first valid magnetic buffer entry as offset estimate (bit counts)
				if (iCount == 0)
				{
					for (l = X; l <= Z; l++)
					{
						iOffset[l] = pthisMagBuffer->iBpFast[l][j][k];
    acae:	881b      	ldrh	r3, [r3, #0]
    acb0:	2190      	movs	r1, #144	; 0x90
    acb2:	0089      	lsls	r1, r1, #2
    acb4:	882c      	ldrh	r4, [r5, #0]
    acb6:	930a      	str	r3, [sp, #40]	; 0x28
    acb8:	186b      	adds	r3, r5, r1
    acba:	881b      	ldrh	r3, [r3, #0]
    acbc:	9409      	str	r4, [sp, #36]	; 0x24
    acbe:	2400      	movs	r4, #0
    acc0:	930b      	str	r3, [sp, #44]	; 0x2c
    acc2:	1c25      	adds	r5, r4, #0
    acc4:	1c27      	adds	r7, r4, #0
    acc6:	e59d      	b.n	a804 <fUpdateCalibration7EIG+0xf0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:572
	}

	// negate A if it has negative determinant
	if (det < 0.0F)
	{
		f3x3matrixAeqMinusA(pthisMagCal->fA);
    acc8:	1c30      	adds	r0, r6, #0
    acca:	f000 fd55 	bl	b778 <f3x3matrixAeqMinusA>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:573
		pthisMagCal->fmatB[6][j] = -pthisMagCal->fmatB[6][j];
    acce:	23cf      	movs	r3, #207	; 0xcf
    acd0:	009b      	lsls	r3, r3, #2
    acd2:	58e0      	ldr	r0, [r4, r3]
    acd4:	2180      	movs	r1, #128	; 0x80
    acd6:	0609      	lsls	r1, r1, #24
    acd8:	1847      	adds	r7, r0, r1
    acda:	50e7      	str	r7, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:574
		det = -det;
    acdc:	186d      	adds	r5, r5, r1
    acde:	e751      	b.n	ab84 <fUpdateCalibration7EIG+0x470>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:537

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of fmatA to below the diagonal
	for (m = 1; m < 7; m++)
    ace0:	3201      	adds	r2, #1
    ace2:	b2d2      	uxtb	r2, r2
    ace4:	e656      	b.n	a994 <fUpdateCalibration7EIG+0x280>
    ace6:	46c0      	nop			; (mov r8, r8)
    ace8:	00000b56 	.word	0x00000b56
    acec:	42480000 	.word	0x42480000
    acf0:	beaaaaab 	.word	0xbeaaaaab
    acf4:	be2aaaab 	.word	0xbe2aaaab

0000acf8 <fUpdateCalibration10EIG>:
fUpdateCalibration10EIG():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:606
	return;
}

// 10 element calibration using direct eigen-decomposition
void fUpdateCalibration10EIG(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer, struct MagSensor *pthisMag)
{
    acf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    acfa:	465f      	mov	r7, fp
    acfc:	464d      	mov	r5, r9
    acfe:	4656      	mov	r6, sl
    ad00:	4644      	mov	r4, r8
    ad02:	b4f0      	push	{r4, r5, r6, r7}
    ad04:	b099      	sub	sp, #100	; 0x64
    ad06:	4683      	mov	fp, r0
    ad08:	9112      	str	r1, [sp, #72]	; 0x48
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:616
	int16 iOffset[3];						// offset to remove large DC hard iron bias in matrix
	int16 iCount;							// number of measurements counted
	int8 i, j, k, l, m, n;					// loop counters

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;
    ad0a:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    ad0c:	498a      	ldr	r1, [pc, #552]	; (af38 <fUpdateCalibration10EIG+0x240>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:606
	return;
}

// 10 element calibration using direct eigen-decomposition
void fUpdateCalibration10EIG(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer, struct MagSensor *pthisMag)
{
    ad0e:	9214      	str	r2, [sp, #80]	; 0x50
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:616
	int16 iOffset[3];						// offset to remove large DC hard iron bias in matrix
	int16 iCount;							// number of measurements counted
	int8 i, j, k, l, m, n;					// loop counters

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;
    ad10:	f7f5 fe5c 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:619

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
    ad14:	215a      	movs	r1, #90	; 0x5a
    ad16:	2300      	movs	r3, #0
    ad18:	4469      	add	r1, sp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:616
	int16 iOffset[3];						// offset to remove large DC hard iron bias in matrix
	int16 iCount;							// number of measurements counted
	int8 i, j, k, l, m, n;					// loop counters

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;
    ad1a:	900a      	str	r0, [sp, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:619

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
    ad1c:	aa16      	add	r2, sp, #88	; 0x58
    ad1e:	a817      	add	r0, sp, #92	; 0x5c
    ad20:	8003      	strh	r3, [r0, #0]
    ad22:	800b      	strh	r3, [r1, #0]
    ad24:	8013      	strh	r3, [r2, #0]
    ad26:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:626
	// zero the on and above diagonal elements of the 10x10 symmetric measurement matrix fmatA
	for (m = 0; m < 10; m++)
	{
		for (n = m; n < 10; n++)
		{
			pthisMagCal->fmatA[m][n] = 0.0F;
    ad28:	2000      	movs	r0, #0
    ad2a:	465d      	mov	r5, fp
    ad2c:	008c      	lsls	r4, r1, #2
    ad2e:	b2cb      	uxtb	r3, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:626 (discriminator 1)
    ad30:	1864      	adds	r4, r4, r1
    ad32:	b25a      	sxtb	r2, r3
    ad34:	0064      	lsls	r4, r4, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:626 (discriminator 2)
    ad36:	18a2      	adds	r2, r4, r2
    ad38:	322e      	adds	r2, #46	; 0x2e
    ad3a:	0092      	lsls	r2, r2, #2
    ad3c:	3301      	adds	r3, #1
    ad3e:	18aa      	adds	r2, r5, r2
    ad40:	b2db      	uxtb	r3, r3
    ad42:	6050      	str	r0, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:624 (discriminator 2)
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;

	// zero the on and above diagonal elements of the 10x10 symmetric measurement matrix fmatA
	for (m = 0; m < 10; m++)
	{
		for (n = m; n < 10; n++)
    ad44:	b25a      	sxtb	r2, r3
    ad46:	2a09      	cmp	r2, #9
    ad48:	ddf5      	ble.n	ad36 <fUpdateCalibration10EIG+0x3e>
    ad4a:	3101      	adds	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:622

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;

	// zero the on and above diagonal elements of the 10x10 symmetric measurement matrix fmatA
	for (m = 0; m < 10; m++)
    ad4c:	290a      	cmp	r1, #10
    ad4e:	d1ed      	bne.n	ad2c <fUpdateCalibration10EIG+0x34>
    ad50:	ab16      	add	r3, sp, #88	; 0x58
    ad52:	881b      	ldrh	r3, [r3, #0]
    ad54:	245a      	movs	r4, #90	; 0x5a
    ad56:	930f      	str	r3, [sp, #60]	; 0x3c
    ad58:	446c      	add	r4, sp
    ad5a:	8824      	ldrh	r4, [r4, #0]
    ad5c:	46ab      	mov	fp, r5
    ad5e:	9411      	str	r4, [sp, #68]	; 0x44
    ad60:	ad17      	add	r5, sp, #92	; 0x5c
    ad62:	882d      	ldrh	r5, [r5, #0]
    ad64:	9c12      	ldr	r4, [sp, #72]	; 0x48
    ad66:	9510      	str	r5, [sp, #64]	; 0x40
    ad68:	25e4      	movs	r5, #228	; 0xe4
    ad6a:	00ed      	lsls	r5, r5, #3
    ad6c:	1965      	adds	r5, r4, r5
    ad6e:	950d      	str	r5, [sp, #52]	; 0x34
    ad70:	25ba      	movs	r5, #186	; 0xba
    ad72:	012d      	lsls	r5, r5, #4
    ad74:	1965      	adds	r5, r4, r5
    ad76:	9515      	str	r5, [sp, #84]	; 0x54
    ad78:	25f7      	movs	r5, #247	; 0xf7
    ad7a:	9413      	str	r4, [sp, #76]	; 0x4c
    ad7c:	00ad      	lsls	r5, r5, #2
    ad7e:	2400      	movs	r4, #0
    ad80:	9409      	str	r4, [sp, #36]	; 0x24
    ad82:	1c2c      	adds	r4, r5, #0
    ad84:	445c      	add	r4, fp
    ad86:	940e      	str	r4, [sp, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:619 (discriminator 1)

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
    ad88:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    ad8a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    ad8c:	3c60      	subs	r4, #96	; 0x60
    ad8e:	9408      	str	r4, [sp, #32]
    ad90:	9506      	str	r5, [sp, #24]
    ad92:	9d08      	ldr	r5, [sp, #32]
    ad94:	465c      	mov	r4, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:636
	iCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
	{
		for (k = 0; k < MAGBUFFSIZEY; k++)
		{
			if (pthisMagBuffer->index[j][k] != -1)
    ad96:	682d      	ldr	r5, [r5, #0]
    ad98:	3501      	adds	r5, #1
    ad9a:	d100      	bne.n	ad9e <fUpdateCalibration10EIG+0xa6>
    ad9c:	e0ee      	b.n	af7c <fUpdateCalibration10EIG+0x284>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:639
			{
				// use first valid magnetic buffer entry as estimate for offset to help solution (bit counts)
				if (iCount == 0)
    ad9e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    ada0:	2d00      	cmp	r5, #0
    ada2:	d101      	bne.n	ada8 <fUpdateCalibration10EIG+0xb0>
    ada4:	f000 fc5f 	bl	b666 <fUpdateCalibration10EIG+0x96e>
    ada8:	9d06      	ldr	r5, [sp, #24]
    adaa:	2000      	movs	r0, #0
    adac:	5e28      	ldrsh	r0, [r5, r0]
    adae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    adb0:	b22b      	sxth	r3, r5
    adb2:	1ac0      	subs	r0, r0, r3
    adb4:	f7f6 faae 	bl	1314 <__aeabi_i2f>
    adb8:	9d06      	ldr	r5, [sp, #24]
    adba:	1c07      	adds	r7, r0, #0
    adbc:	2090      	movs	r0, #144	; 0x90
    adbe:	0080      	lsls	r0, r0, #2
    adc0:	182b      	adds	r3, r5, r0
    adc2:	9d11      	ldr	r5, [sp, #68]	; 0x44
    adc4:	2100      	movs	r1, #0
    adc6:	5e58      	ldrsh	r0, [r3, r1]
    adc8:	b22b      	sxth	r3, r5
    adca:	1ac0      	subs	r0, r0, r3
    adcc:	f7f6 faa2 	bl	1314 <__aeabi_i2f>
    add0:	2190      	movs	r1, #144	; 0x90
    add2:	1c05      	adds	r5, r0, #0
    add4:	9806      	ldr	r0, [sp, #24]
    add6:	00c9      	lsls	r1, r1, #3
    add8:	1843      	adds	r3, r0, r1
    adda:	9910      	ldr	r1, [sp, #64]	; 0x40
    addc:	2200      	movs	r2, #0
    adde:	5e98      	ldrsh	r0, [r3, r2]
    ade0:	b20b      	sxth	r3, r1
    ade2:	1ac0      	subs	r0, r0, r3
    ade4:	f7f6 fa96 	bl	1314 <__aeabi_i2f>
    ade8:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:650 (discriminator 1)
				}

				// apply the fixed offset and scaling and enter into fvecA[6-8]
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l + 6] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    adea:	1c39      	adds	r1, r7, #0
    adec:	980a      	ldr	r0, [sp, #40]	; 0x28
    adee:	f7f5 ffd1 	bl	d94 <__aeabi_fmul>
    adf2:	21fd      	movs	r1, #253	; 0xfd
    adf4:	0089      	lsls	r1, r1, #2
    adf6:	4680      	mov	r8, r0
    adf8:	5060      	str	r0, [r4, r1]
    adfa:	990a      	ldr	r1, [sp, #40]	; 0x28
    adfc:	1c28      	adds	r0, r5, #0
    adfe:	f7f5 ffc9 	bl	d94 <__aeabi_fmul>
    ae02:	22fe      	movs	r2, #254	; 0xfe
    ae04:	0092      	lsls	r2, r2, #2
    ae06:	1c05      	adds	r5, r0, #0
    ae08:	50a0      	str	r0, [r4, r2]
    ae0a:	1c31      	adds	r1, r6, #0
    ae0c:	980a      	ldr	r0, [sp, #40]	; 0x28
    ae0e:	f7f5 ffc1 	bl	d94 <__aeabi_fmul>
    ae12:	23ff      	movs	r3, #255	; 0xff
    ae14:	009b      	lsls	r3, r3, #2
    ae16:	4683      	mov	fp, r0
    ae18:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:654 (discriminator 1)
				}

				// compute measurement vector elements fvecA[0-5] from fvecA[6-8]
				pthisMagCal->fvecA[0] = pthisMagCal->fvecA[6] * pthisMagCal->fvecA[6];
    ae1a:	4641      	mov	r1, r8
    ae1c:	4640      	mov	r0, r8
    ae1e:	f7f5 ffb9 	bl	d94 <__aeabi_fmul>
    ae22:	21f7      	movs	r1, #247	; 0xf7
    ae24:	0089      	lsls	r1, r1, #2
    ae26:	5060      	str	r0, [r4, r1]
    ae28:	9007      	str	r0, [sp, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:655 (discriminator 1)
				pthisMagCal->fvecA[1] = 2.0F * pthisMagCal->fvecA[6] * pthisMagCal->fvecA[7];
    ae2a:	4641      	mov	r1, r8
    ae2c:	4640      	mov	r0, r8
    ae2e:	f7f5 fc61 	bl	6f4 <__aeabi_fadd>
    ae32:	1c29      	adds	r1, r5, #0
    ae34:	1c06      	adds	r6, r0, #0
    ae36:	f7f5 ffad 	bl	d94 <__aeabi_fmul>
    ae3a:	22f8      	movs	r2, #248	; 0xf8
    ae3c:	0092      	lsls	r2, r2, #2
    ae3e:	50a0      	str	r0, [r4, r2]
    ae40:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:656 (discriminator 1)
				pthisMagCal->fvecA[2] = 2.0F * pthisMagCal->fvecA[6] * pthisMagCal->fvecA[8];
    ae42:	4659      	mov	r1, fp
    ae44:	1c30      	adds	r0, r6, #0
    ae46:	f7f5 ffa5 	bl	d94 <__aeabi_fmul>
    ae4a:	23f9      	movs	r3, #249	; 0xf9
    ae4c:	009b      	lsls	r3, r3, #2
    ae4e:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:657 (discriminator 1)
				pthisMagCal->fvecA[3] = pthisMagCal->fvecA[7] * pthisMagCal->fvecA[7];
    ae50:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:656 (discriminator 1)
				}

				// compute measurement vector elements fvecA[0-5] from fvecA[6-8]
				pthisMagCal->fvecA[0] = pthisMagCal->fvecA[6] * pthisMagCal->fvecA[6];
				pthisMagCal->fvecA[1] = 2.0F * pthisMagCal->fvecA[6] * pthisMagCal->fvecA[7];
				pthisMagCal->fvecA[2] = 2.0F * pthisMagCal->fvecA[6] * pthisMagCal->fvecA[8];
    ae52:	900b      	str	r0, [sp, #44]	; 0x2c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:657 (discriminator 1)
				pthisMagCal->fvecA[3] = pthisMagCal->fvecA[7] * pthisMagCal->fvecA[7];
    ae54:	1c28      	adds	r0, r5, #0
    ae56:	f7f5 ff9d 	bl	d94 <__aeabi_fmul>
    ae5a:	1c07      	adds	r7, r0, #0
    ae5c:	20fa      	movs	r0, #250	; 0xfa
    ae5e:	0080      	lsls	r0, r0, #2
    ae60:	5027      	str	r7, [r4, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:658 (discriminator 1)
				pthisMagCal->fvecA[4] = 2.0F * pthisMagCal->fvecA[7] * pthisMagCal->fvecA[8];
    ae62:	1c29      	adds	r1, r5, #0
    ae64:	1c28      	adds	r0, r5, #0
    ae66:	f7f5 fc45 	bl	6f4 <__aeabi_fadd>
    ae6a:	4659      	mov	r1, fp
    ae6c:	f7f5 ff92 	bl	d94 <__aeabi_fmul>
    ae70:	21fb      	movs	r1, #251	; 0xfb
    ae72:	0089      	lsls	r1, r1, #2
    ae74:	1c06      	adds	r6, r0, #0
    ae76:	5060      	str	r0, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:659 (discriminator 1)
				pthisMagCal->fvecA[5] = pthisMagCal->fvecA[8] * pthisMagCal->fvecA[8];
    ae78:	4659      	mov	r1, fp
    ae7a:	4658      	mov	r0, fp
    ae7c:	f7f5 ff8a 	bl	d94 <__aeabi_fmul>
    ae80:	23fc      	movs	r3, #252	; 0xfc
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:666 (discriminator 1)
				// accumulate the on-and above-diagonal terms of fmatA=Sigma{fvecA^T * fvecA}
				// with the exception of fmatA[9][9] which equals the number of measurements
				// update the right hand column [9] of fmatA[0-8][9] ignoring fmatA[9][9]
				for (m = 0; m < 9; m++)
				{
					pthisMagCal->fmatA[m][9] += pthisMagCal->fvecA[m];
    ae82:	22e0      	movs	r2, #224	; 0xe0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:659 (discriminator 1)
				pthisMagCal->fvecA[0] = pthisMagCal->fvecA[6] * pthisMagCal->fvecA[6];
				pthisMagCal->fvecA[1] = 2.0F * pthisMagCal->fvecA[6] * pthisMagCal->fvecA[7];
				pthisMagCal->fvecA[2] = 2.0F * pthisMagCal->fvecA[6] * pthisMagCal->fvecA[8];
				pthisMagCal->fvecA[3] = pthisMagCal->fvecA[7] * pthisMagCal->fvecA[7];
				pthisMagCal->fvecA[4] = 2.0F * pthisMagCal->fvecA[7] * pthisMagCal->fvecA[8];
				pthisMagCal->fvecA[5] = pthisMagCal->fvecA[8] * pthisMagCal->fvecA[8];
    ae84:	009b      	lsls	r3, r3, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:666 (discriminator 1)
				// accumulate the on-and above-diagonal terms of fmatA=Sigma{fvecA^T * fvecA}
				// with the exception of fmatA[9][9] which equals the number of measurements
				// update the right hand column [9] of fmatA[0-8][9] ignoring fmatA[9][9]
				for (m = 0; m < 9; m++)
				{
					pthisMagCal->fmatA[m][9] += pthisMagCal->fvecA[m];
    ae86:	58a1      	ldr	r1, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:659 (discriminator 1)
				pthisMagCal->fvecA[0] = pthisMagCal->fvecA[6] * pthisMagCal->fvecA[6];
				pthisMagCal->fvecA[1] = 2.0F * pthisMagCal->fvecA[6] * pthisMagCal->fvecA[7];
				pthisMagCal->fvecA[2] = 2.0F * pthisMagCal->fvecA[6] * pthisMagCal->fvecA[8];
				pthisMagCal->fvecA[3] = pthisMagCal->fvecA[7] * pthisMagCal->fvecA[7];
				pthisMagCal->fvecA[4] = 2.0F * pthisMagCal->fvecA[7] * pthisMagCal->fvecA[8];
				pthisMagCal->fvecA[5] = pthisMagCal->fvecA[8] * pthisMagCal->fvecA[8];
    ae88:	50e0      	str	r0, [r4, r3]
    ae8a:	900c      	str	r0, [sp, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:666 (discriminator 1)
				// accumulate the on-and above-diagonal terms of fmatA=Sigma{fvecA^T * fvecA}
				// with the exception of fmatA[9][9] which equals the number of measurements
				// update the right hand column [9] of fmatA[0-8][9] ignoring fmatA[9][9]
				for (m = 0; m < 9; m++)
				{
					pthisMagCal->fmatA[m][9] += pthisMagCal->fvecA[m];
    ae8c:	9807      	ldr	r0, [sp, #28]
    ae8e:	4692      	mov	sl, r2
    ae90:	f7f5 fc30 	bl	6f4 <__aeabi_fadd>
    ae94:	4651      	mov	r1, sl
    ae96:	2384      	movs	r3, #132	; 0x84
    ae98:	005b      	lsls	r3, r3, #1
    ae9a:	5060      	str	r0, [r4, r1]
    ae9c:	58e1      	ldr	r1, [r4, r3]
    ae9e:	4648      	mov	r0, r9
    aea0:	469a      	mov	sl, r3
    aea2:	f7f5 fc27 	bl	6f4 <__aeabi_fadd>
    aea6:	4652      	mov	r2, sl
    aea8:	2398      	movs	r3, #152	; 0x98
    aeaa:	50a0      	str	r0, [r4, r2]
    aeac:	005b      	lsls	r3, r3, #1
    aeae:	58e1      	ldr	r1, [r4, r3]
    aeb0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    aeb2:	4699      	mov	r9, r3
    aeb4:	f7f5 fc1e 	bl	6f4 <__aeabi_fadd>
    aeb8:	464b      	mov	r3, r9
    aeba:	50e0      	str	r0, [r4, r3]
    aebc:	23ac      	movs	r3, #172	; 0xac
    aebe:	005b      	lsls	r3, r3, #1
    aec0:	58e1      	ldr	r1, [r4, r3]
    aec2:	1c38      	adds	r0, r7, #0
    aec4:	4699      	mov	r9, r3
    aec6:	f7f5 fc15 	bl	6f4 <__aeabi_fadd>
    aeca:	27c0      	movs	r7, #192	; 0xc0
    aecc:	4649      	mov	r1, r9
    aece:	5060      	str	r0, [r4, r1]
    aed0:	007f      	lsls	r7, r7, #1
    aed2:	59e1      	ldr	r1, [r4, r7]
    aed4:	1c30      	adds	r0, r6, #0
    aed6:	f7f5 fc0d 	bl	6f4 <__aeabi_fadd>
    aeda:	26d4      	movs	r6, #212	; 0xd4
    aedc:	51e0      	str	r0, [r4, r7]
    aede:	0076      	lsls	r6, r6, #1
    aee0:	59a1      	ldr	r1, [r4, r6]
    aee2:	980c      	ldr	r0, [sp, #48]	; 0x30
    aee4:	f7f5 fc06 	bl	6f4 <__aeabi_fadd>
    aee8:	51a0      	str	r0, [r4, r6]
    aeea:	26e8      	movs	r6, #232	; 0xe8
    aeec:	0076      	lsls	r6, r6, #1
    aeee:	59a0      	ldr	r0, [r4, r6]
    aef0:	4641      	mov	r1, r8
    aef2:	f7f5 fbff 	bl	6f4 <__aeabi_fadd>
    aef6:	51a0      	str	r0, [r4, r6]
    aef8:	26fc      	movs	r6, #252	; 0xfc
    aefa:	0076      	lsls	r6, r6, #1
    aefc:	1c29      	adds	r1, r5, #0
    aefe:	59a0      	ldr	r0, [r4, r6]
    af00:	f7f5 fbf8 	bl	6f4 <__aeabi_fadd>
    af04:	2588      	movs	r5, #136	; 0x88
    af06:	00ad      	lsls	r5, r5, #2
    af08:	51a0      	str	r0, [r4, r6]
    af0a:	4659      	mov	r1, fp
    af0c:	5960      	ldr	r0, [r4, r5]
    af0e:	f7f5 fbf1 	bl	6f4 <__aeabi_fadd>
    af12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    af14:	2300      	movs	r3, #0
    af16:	5160      	str	r0, [r4, r5]
    af18:	4693      	mov	fp, r2
    af1a:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:673 (discriminator 1)
				// update the on and above diagonal terms of fmatA ignoring right hand column 9
				for (m = 0; m < 9; m++)
				{
					for (n = m; n < 9; n++)
					{
						pthisMagCal->fmatA[m][n] += pthisMagCal->fvecA[m] * pthisMagCal->fvecA[n];
    af1c:	27bc      	movs	r7, #188	; 0xbc
    af1e:	4652      	mov	r2, sl
    af20:	4651      	mov	r1, sl
    af22:	b2d5      	uxtb	r5, r2
    af24:	465b      	mov	r3, fp
    af26:	008a      	lsls	r2, r1, #2
    af28:	681b      	ldr	r3, [r3, #0]
    af2a:	4452      	add	r2, sl
    af2c:	0052      	lsls	r2, r2, #1
    af2e:	4699      	mov	r9, r3
    af30:	1c18      	adds	r0, r3, #0
    af32:	4690      	mov	r8, r2
    af34:	b26b      	sxtb	r3, r5
    af36:	e006      	b.n	af46 <fUpdateCalibration10EIG+0x24e>
    af38:	42480000 	.word	0x42480000
    af3c:	1c1a      	adds	r2, r3, #0
    af3e:	32f6      	adds	r2, #246	; 0xf6
    af40:	0092      	lsls	r2, r2, #2
    af42:	18a2      	adds	r2, r4, r2
    af44:	6850      	ldr	r0, [r2, #4]
    af46:	4443      	add	r3, r8
    af48:	009b      	lsls	r3, r3, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:673 (discriminator 2)
    af4a:	4649      	mov	r1, r9
    af4c:	18e6      	adds	r6, r4, r3
    af4e:	f7f5 ff21 	bl	d94 <__aeabi_fmul>
    af52:	1c01      	adds	r1, r0, #0
    af54:	59f0      	ldr	r0, [r6, r7]
    af56:	f7f5 fbcd 	bl	6f4 <__aeabi_fadd>
    af5a:	3501      	adds	r5, #1
    af5c:	b2ed      	uxtb	r5, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:671 (discriminator 2)
					pthisMagCal->fmatA[m][9] += pthisMagCal->fvecA[m];
				}
				// update the on and above diagonal terms of fmatA ignoring right hand column 9
				for (m = 0; m < 9; m++)
				{
					for (n = m; n < 9; n++)
    af5e:	b26b      	sxtb	r3, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:673 (discriminator 2)
					{
						pthisMagCal->fmatA[m][n] += pthisMagCal->fvecA[m] * pthisMagCal->fvecA[n];
    af60:	51f0      	str	r0, [r6, r7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:671 (discriminator 2)
					pthisMagCal->fmatA[m][9] += pthisMagCal->fvecA[m];
				}
				// update the on and above diagonal terms of fmatA ignoring right hand column 9
				for (m = 0; m < 9; m++)
				{
					for (n = m; n < 9; n++)
    af62:	2b08      	cmp	r3, #8
    af64:	ddea      	ble.n	af3c <fUpdateCalibration10EIG+0x244>
    af66:	2501      	movs	r5, #1
    af68:	44aa      	add	sl, r5
    af6a:	2004      	movs	r0, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:669
				for (m = 0; m < 9; m++)
				{
					pthisMagCal->fmatA[m][9] += pthisMagCal->fvecA[m];
				}
				// update the on and above diagonal terms of fmatA ignoring right hand column 9
				for (m = 0; m < 9; m++)
    af6c:	4651      	mov	r1, sl
    af6e:	4483      	add	fp, r0
    af70:	2909      	cmp	r1, #9
    af72:	d1d4      	bne.n	af1e <fUpdateCalibration10EIG+0x226>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:678
						pthisMagCal->fmatA[m][n] += pthisMagCal->fvecA[m] * pthisMagCal->fvecA[n];
					}
				}

				// increment the measurement counter for the next iteration
				iCount++;
    af74:	9b09      	ldr	r3, [sp, #36]	; 0x24
    af76:	3301      	adds	r3, #1
    af78:	b29b      	uxth	r3, r3
    af7a:	9309      	str	r3, [sp, #36]	; 0x24
    af7c:	9d08      	ldr	r5, [sp, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:634

	// sum between MINEQUATIONS to MAXEQUATIONS entries into the 10x10 product matrix fmatA
	iCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
	{
		for (k = 0; k < MAGBUFFSIZEY; k++)
    af7e:	980d      	ldr	r0, [sp, #52]	; 0x34
    af80:	3504      	adds	r5, #4
    af82:	9508      	str	r5, [sp, #32]
    af84:	9d06      	ldr	r5, [sp, #24]
    af86:	3502      	adds	r5, #2
    af88:	9506      	str	r5, [sp, #24]
    af8a:	9d08      	ldr	r5, [sp, #32]
    af8c:	4285      	cmp	r5, r0
    af8e:	d000      	beq.n	af92 <fUpdateCalibration10EIG+0x29a>
    af90:	e701      	b.n	ad96 <fUpdateCalibration10EIG+0x9e>
    af92:	46a3      	mov	fp, r4
    af94:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    af96:	3560      	adds	r5, #96	; 0x60
    af98:	3430      	adds	r4, #48	; 0x30
    af9a:	9413      	str	r4, [sp, #76]	; 0x4c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:632
		}
	}

	// sum between MINEQUATIONS to MAXEQUATIONS entries into the 10x10 product matrix fmatA
	iCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
    af9c:	9c15      	ldr	r4, [sp, #84]	; 0x54
    af9e:	950d      	str	r5, [sp, #52]	; 0x34
    afa0:	42a5      	cmp	r5, r4
    afa2:	d000      	beq.n	afa6 <fUpdateCalibration10EIG+0x2ae>
    afa4:	e6f0      	b.n	ad88 <fUpdateCalibration10EIG+0x90>
    afa6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    afa8:	ad16      	add	r5, sp, #88	; 0x58
    afaa:	802c      	strh	r4, [r5, #0]
    afac:	9c11      	ldr	r4, [sp, #68]	; 0x44
    afae:	255a      	movs	r5, #90	; 0x5a
    afb0:	446d      	add	r5, sp
    afb2:	802c      	strh	r4, [r5, #0]
    afb4:	9c10      	ldr	r4, [sp, #64]	; 0x40
    afb6:	ad17      	add	r5, sp, #92	; 0x5c
    afb8:	802c      	strh	r4, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:684
			}
		}
	}

	// set the last element fmatA[9][9] to the number of measurements
	pthisMagCal->fmatA[9][9] = (float) iCount;
    afba:	9d09      	ldr	r5, [sp, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    afbc:	27bc      	movs	r7, #188	; 0xbc
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:684
			}
		}
	}

	// set the last element fmatA[9][9] to the number of measurements
	pthisMagCal->fmatA[9][9] = (float) iCount;
    afbe:	b228      	sxth	r0, r5
    afc0:	f7f6 f9a8 	bl	1314 <__aeabi_i2f>
    afc4:	2392      	movs	r3, #146	; 0x92
    afc6:	009b      	lsls	r3, r3, #2
    afc8:	4659      	mov	r1, fp
    afca:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:687

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;
    afcc:	9d09      	ldr	r5, [sp, #36]	; 0x24
    afce:	4b9f      	ldr	r3, [pc, #636]	; (b24c <fUpdateCalibration10EIG+0x554>)
    afd0:	9c12      	ldr	r4, [sp, #72]	; 0x48
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:690

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
    afd2:	2001      	movs	r0, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:687

	// set the last element fmatA[9][9] to the number of measurements
	pthisMagCal->fmatA[9][9] = (float) iCount;

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;
    afd4:	52e5      	strh	r5, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    afd6:	23ae      	movs	r3, #174	; 0xae
    afd8:	005b      	lsls	r3, r3, #1
    afda:	4698      	mov	r8, r3
    afdc:	23c2      	movs	r3, #194	; 0xc2
    afde:	005b      	lsls	r3, r3, #1
    afe0:	4699      	mov	r9, r3
    afe2:	23d6      	movs	r3, #214	; 0xd6
    afe4:	005b      	lsls	r3, r3, #1
    afe6:	26e4      	movs	r6, #228	; 0xe4
    afe8:	469a      	mov	sl, r3
    afea:	b243      	sxtb	r3, r0
    afec:	009a      	lsls	r2, r3, #2
    afee:	465c      	mov	r4, fp
    aff0:	18a1      	adds	r1, r4, r2
    aff2:	18d2      	adds	r2, r2, r3
    aff4:	00d2      	lsls	r2, r2, #3
    aff6:	59cc      	ldr	r4, [r1, r7]
    aff8:	445a      	add	r2, fp
    affa:	25bc      	movs	r5, #188	; 0xbc
    affc:	50ac      	str	r4, [r5, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:692
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
    affe:	2b01      	cmp	r3, #1
    b000:	d100      	bne.n	b004 <fUpdateCalibration10EIG+0x30c>
    b002:	e342      	b.n	b68a <fUpdateCalibration10EIG+0x992>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    b004:	598c      	ldr	r4, [r1, r6]
    b006:	25c0      	movs	r5, #192	; 0xc0
    b008:	50ac      	str	r4, [r5, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:692
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
    b00a:	2b02      	cmp	r3, #2
    b00c:	d100      	bne.n	b010 <fUpdateCalibration10EIG+0x318>
    b00e:	e33c      	b.n	b68a <fUpdateCalibration10EIG+0x992>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    b010:	2586      	movs	r5, #134	; 0x86
    b012:	006d      	lsls	r5, r5, #1
    b014:	594d      	ldr	r5, [r1, r5]
    b016:	24c4      	movs	r4, #196	; 0xc4
    b018:	50a5      	str	r5, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:692
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
    b01a:	2b03      	cmp	r3, #3
    b01c:	d100      	bne.n	b020 <fUpdateCalibration10EIG+0x328>
    b01e:	e334      	b.n	b68a <fUpdateCalibration10EIG+0x992>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    b020:	259a      	movs	r5, #154	; 0x9a
    b022:	006d      	lsls	r5, r5, #1
    b024:	594d      	ldr	r5, [r1, r5]
    b026:	24c8      	movs	r4, #200	; 0xc8
    b028:	50a5      	str	r5, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:692
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
    b02a:	2b04      	cmp	r3, #4
    b02c:	d100      	bne.n	b030 <fUpdateCalibration10EIG+0x338>
    b02e:	e32c      	b.n	b68a <fUpdateCalibration10EIG+0x992>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    b030:	4645      	mov	r5, r8
    b032:	594d      	ldr	r5, [r1, r5]
    b034:	24cc      	movs	r4, #204	; 0xcc
    b036:	50a5      	str	r5, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:692
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
    b038:	2b05      	cmp	r3, #5
    b03a:	d100      	bne.n	b03e <fUpdateCalibration10EIG+0x346>
    b03c:	e325      	b.n	b68a <fUpdateCalibration10EIG+0x992>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    b03e:	464d      	mov	r5, r9
    b040:	594d      	ldr	r5, [r1, r5]
    b042:	24d0      	movs	r4, #208	; 0xd0
    b044:	50a5      	str	r5, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:692
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
    b046:	2b06      	cmp	r3, #6
    b048:	d100      	bne.n	b04c <fUpdateCalibration10EIG+0x354>
    b04a:	e31e      	b.n	b68a <fUpdateCalibration10EIG+0x992>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    b04c:	4655      	mov	r5, sl
    b04e:	594d      	ldr	r5, [r1, r5]
    b050:	24d4      	movs	r4, #212	; 0xd4
    b052:	50a5      	str	r5, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:692
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
    b054:	2b07      	cmp	r3, #7
    b056:	d100      	bne.n	b05a <fUpdateCalibration10EIG+0x362>
    b058:	e317      	b.n	b68a <fUpdateCalibration10EIG+0x992>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    b05a:	25ea      	movs	r5, #234	; 0xea
    b05c:	006d      	lsls	r5, r5, #1
    b05e:	5949      	ldr	r1, [r1, r5]
    b060:	32d4      	adds	r2, #212	; 0xd4
    b062:	6051      	str	r1, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:692
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
    b064:	2b09      	cmp	r3, #9
    b066:	d000      	beq.n	b06a <fUpdateCalibration10EIG+0x372>
    b068:	e30f      	b.n	b68a <fUpdateCalibration10EIG+0x992>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    b06a:	2087      	movs	r0, #135	; 0x87
    b06c:	0080      	lsls	r0, r0, #2
    b06e:	1c03      	adds	r3, r0, #0
    b070:	2190      	movs	r1, #144	; 0x90
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:699
		}
	}

	// set pthisMagCal->fvecA to the unsorted eigenvalues and fmatB to the unsorted normalized eigenvectors of fmatA
	eigencompute(pthisMagCal->fmatA, pthisMagCal->fvecA, pthisMagCal->fmatB, 10);
    b072:	465c      	mov	r4, fp
    b074:	2593      	movs	r5, #147	; 0x93
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    b076:	445b      	add	r3, fp
    b078:	0089      	lsls	r1, r1, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:699
		}
	}

	// set pthisMagCal->fvecA to the unsorted eigenvalues and fmatB to the unsorted normalized eigenvectors of fmatA
	eigencompute(pthisMagCal->fmatA, pthisMagCal->fvecA, pthisMagCal->fmatB, 10);
    b07a:	34bc      	adds	r4, #188	; 0xbc
    b07c:	00ad      	lsls	r5, r5, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    b07e:	685a      	ldr	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:699
		}
	}

	// set pthisMagCal->fvecA to the unsorted eigenvalues and fmatB to the unsorted normalized eigenvectors of fmatA
	eigencompute(pthisMagCal->fmatA, pthisMagCal->fvecA, pthisMagCal->fmatB, 10);
    b080:	940a      	str	r4, [sp, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    b082:	1c0b      	adds	r3, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:699
		}
	}

	// set pthisMagCal->fvecA to the unsorted eigenvalues and fmatB to the unsorted normalized eigenvectors of fmatA
	eigencompute(pthisMagCal->fmatA, pthisMagCal->fvecA, pthisMagCal->fmatB, 10);
    b084:	1c2c      	adds	r4, r5, #0
    b086:	445c      	add	r4, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    b088:	445b      	add	r3, fp
    b08a:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:699
		}
	}

	// set pthisMagCal->fvecA to the unsorted eigenvalues and fmatB to the unsorted normalized eigenvectors of fmatA
	eigencompute(pthisMagCal->fmatA, pthisMagCal->fvecA, pthisMagCal->fmatB, 10);
    b08c:	980a      	ldr	r0, [sp, #40]	; 0x28
    b08e:	1c22      	adds	r2, r4, #0
    b090:	990e      	ldr	r1, [sp, #56]	; 0x38
    b092:	230a      	movs	r3, #10
    b094:	9408      	str	r4, [sp, #32]
    b096:	f000 fc9b 	bl	b9d0 <eigencompute>
    b09a:	23f7      	movs	r3, #247	; 0xf7
    b09c:	009b      	lsls	r3, r3, #2
    b09e:	465d      	mov	r5, fp
    b0a0:	58ec      	ldr	r4, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:705

	// set ellipsoid matrix A from elements of the solution vector column j with smallest eigenvalue
	j = 0;
	for (i = 1; i < 10; i++)
	{
		if (pthisMagCal->fvecA[i] < pthisMagCal->fvecA[j])
    b0a2:	23f8      	movs	r3, #248	; 0xf8
    b0a4:	009b      	lsls	r3, r3, #2
    b0a6:	58ed      	ldr	r5, [r5, r3]
    b0a8:	1c20      	adds	r0, r4, #0
    b0aa:	1c29      	adds	r1, r5, #0
    b0ac:	f7f5 fb0e 	bl	6cc <__aeabi_fcmpgt>
    b0b0:	1c06      	adds	r6, r0, #0
    b0b2:	1e73      	subs	r3, r6, #1
    b0b4:	419e      	sbcs	r6, r3
    b0b6:	2800      	cmp	r0, #0
    b0b8:	d100      	bne.n	b0bc <fUpdateCalibration10EIG+0x3c4>
    b0ba:	1c25      	adds	r5, r4, #0
    b0bc:	23f9      	movs	r3, #249	; 0xf9
    b0be:	009b      	lsls	r3, r3, #2
    b0c0:	4658      	mov	r0, fp
    b0c2:	58c4      	ldr	r4, [r0, r3]
    b0c4:	1c29      	adds	r1, r5, #0
    b0c6:	1c20      	adds	r0, r4, #0
    b0c8:	f7f5 faec 	bl	6a4 <__aeabi_fcmplt>
    b0cc:	2702      	movs	r7, #2
    b0ce:	2800      	cmp	r0, #0
    b0d0:	d100      	bne.n	b0d4 <fUpdateCalibration10EIG+0x3dc>
    b0d2:	1c37      	adds	r7, r6, #0
    b0d4:	1c20      	adds	r0, r4, #0
    b0d6:	1c29      	adds	r1, r5, #0
    b0d8:	b2ff      	uxtb	r7, r7
    b0da:	f7f5 fae3 	bl	6a4 <__aeabi_fcmplt>
    b0de:	2800      	cmp	r0, #0
    b0e0:	d100      	bne.n	b0e4 <fUpdateCalibration10EIG+0x3ec>
    b0e2:	1c2c      	adds	r4, r5, #0
    b0e4:	23fa      	movs	r3, #250	; 0xfa
    b0e6:	009b      	lsls	r3, r3, #2
    b0e8:	4659      	mov	r1, fp
    b0ea:	58cd      	ldr	r5, [r1, r3]
    b0ec:	1c21      	adds	r1, r4, #0
    b0ee:	1c28      	adds	r0, r5, #0
    b0f0:	f7f5 fad8 	bl	6a4 <__aeabi_fcmplt>
    b0f4:	2603      	movs	r6, #3
    b0f6:	2800      	cmp	r0, #0
    b0f8:	d100      	bne.n	b0fc <fUpdateCalibration10EIG+0x404>
    b0fa:	1c3e      	adds	r6, r7, #0
    b0fc:	1c28      	adds	r0, r5, #0
    b0fe:	1c21      	adds	r1, r4, #0
    b100:	b2f6      	uxtb	r6, r6
    b102:	f7f5 facf 	bl	6a4 <__aeabi_fcmplt>
    b106:	2800      	cmp	r0, #0
    b108:	d100      	bne.n	b10c <fUpdateCalibration10EIG+0x414>
    b10a:	1c25      	adds	r5, r4, #0
    b10c:	23fb      	movs	r3, #251	; 0xfb
    b10e:	009b      	lsls	r3, r3, #2
    b110:	465a      	mov	r2, fp
    b112:	58d4      	ldr	r4, [r2, r3]
    b114:	1c29      	adds	r1, r5, #0
    b116:	1c20      	adds	r0, r4, #0
    b118:	f7f5 fac4 	bl	6a4 <__aeabi_fcmplt>
    b11c:	2704      	movs	r7, #4
    b11e:	2800      	cmp	r0, #0
    b120:	d100      	bne.n	b124 <fUpdateCalibration10EIG+0x42c>
    b122:	1c37      	adds	r7, r6, #0
    b124:	1c20      	adds	r0, r4, #0
    b126:	1c29      	adds	r1, r5, #0
    b128:	b2ff      	uxtb	r7, r7
    b12a:	f7f5 fabb 	bl	6a4 <__aeabi_fcmplt>
    b12e:	2800      	cmp	r0, #0
    b130:	d100      	bne.n	b134 <fUpdateCalibration10EIG+0x43c>
    b132:	1c2c      	adds	r4, r5, #0
    b134:	23fc      	movs	r3, #252	; 0xfc
    b136:	009b      	lsls	r3, r3, #2
    b138:	4658      	mov	r0, fp
    b13a:	58c5      	ldr	r5, [r0, r3]
    b13c:	1c21      	adds	r1, r4, #0
    b13e:	1c28      	adds	r0, r5, #0
    b140:	f7f5 fab0 	bl	6a4 <__aeabi_fcmplt>
    b144:	2605      	movs	r6, #5
    b146:	2800      	cmp	r0, #0
    b148:	d100      	bne.n	b14c <fUpdateCalibration10EIG+0x454>
    b14a:	1c3e      	adds	r6, r7, #0
    b14c:	1c28      	adds	r0, r5, #0
    b14e:	1c21      	adds	r1, r4, #0
    b150:	b2f6      	uxtb	r6, r6
    b152:	f7f5 faa7 	bl	6a4 <__aeabi_fcmplt>
    b156:	2800      	cmp	r0, #0
    b158:	d100      	bne.n	b15c <fUpdateCalibration10EIG+0x464>
    b15a:	1c25      	adds	r5, r4, #0
    b15c:	23fd      	movs	r3, #253	; 0xfd
    b15e:	009b      	lsls	r3, r3, #2
    b160:	4659      	mov	r1, fp
    b162:	58cc      	ldr	r4, [r1, r3]
    b164:	1c29      	adds	r1, r5, #0
    b166:	1c20      	adds	r0, r4, #0
    b168:	f7f5 fa9c 	bl	6a4 <__aeabi_fcmplt>
    b16c:	2706      	movs	r7, #6
    b16e:	2800      	cmp	r0, #0
    b170:	d100      	bne.n	b174 <fUpdateCalibration10EIG+0x47c>
    b172:	1c37      	adds	r7, r6, #0
    b174:	1c20      	adds	r0, r4, #0
    b176:	1c29      	adds	r1, r5, #0
    b178:	b2ff      	uxtb	r7, r7
    b17a:	f7f5 fa93 	bl	6a4 <__aeabi_fcmplt>
    b17e:	2800      	cmp	r0, #0
    b180:	d100      	bne.n	b184 <fUpdateCalibration10EIG+0x48c>
    b182:	1c2c      	adds	r4, r5, #0
    b184:	23fe      	movs	r3, #254	; 0xfe
    b186:	009b      	lsls	r3, r3, #2
    b188:	465a      	mov	r2, fp
    b18a:	58d5      	ldr	r5, [r2, r3]
    b18c:	1c21      	adds	r1, r4, #0
    b18e:	1c28      	adds	r0, r5, #0
    b190:	f7f5 fa88 	bl	6a4 <__aeabi_fcmplt>
    b194:	2607      	movs	r6, #7
    b196:	2800      	cmp	r0, #0
    b198:	d100      	bne.n	b19c <fUpdateCalibration10EIG+0x4a4>
    b19a:	1c3e      	adds	r6, r7, #0
    b19c:	1c28      	adds	r0, r5, #0
    b19e:	1c21      	adds	r1, r4, #0
    b1a0:	b2f6      	uxtb	r6, r6
    b1a2:	f7f5 fa7f 	bl	6a4 <__aeabi_fcmplt>
    b1a6:	2800      	cmp	r0, #0
    b1a8:	d100      	bne.n	b1ac <fUpdateCalibration10EIG+0x4b4>
    b1aa:	1c25      	adds	r5, r4, #0
    b1ac:	23ff      	movs	r3, #255	; 0xff
    b1ae:	009b      	lsls	r3, r3, #2
    b1b0:	465c      	mov	r4, fp
    b1b2:	58e7      	ldr	r7, [r4, r3]
    b1b4:	1c29      	adds	r1, r5, #0
    b1b6:	1c38      	adds	r0, r7, #0
    b1b8:	f7f5 fa74 	bl	6a4 <__aeabi_fcmplt>
    b1bc:	1c3b      	adds	r3, r7, #0
    b1be:	2800      	cmp	r0, #0
    b1c0:	d100      	bne.n	b1c4 <fUpdateCalibration10EIG+0x4cc>
    b1c2:	1c2b      	adds	r3, r5, #0
    b1c4:	1c18      	adds	r0, r3, #0
    b1c6:	2380      	movs	r3, #128	; 0x80
    b1c8:	00db      	lsls	r3, r3, #3
    b1ca:	465a      	mov	r2, fp
    b1cc:	58d1      	ldr	r1, [r2, r3]
    b1ce:	f7f5 fa7d 	bl	6cc <__aeabi_fcmpgt>
    b1d2:	2409      	movs	r4, #9
    b1d4:	2800      	cmp	r0, #0
    b1d6:	d108      	bne.n	b1ea <fUpdateCalibration10EIG+0x4f2>
    b1d8:	1c38      	adds	r0, r7, #0
    b1da:	1c29      	adds	r1, r5, #0
    b1dc:	f7f5 fa62 	bl	6a4 <__aeabi_fcmplt>
    b1e0:	2408      	movs	r4, #8
    b1e2:	2800      	cmp	r0, #0
    b1e4:	d100      	bne.n	b1e8 <fUpdateCalibration10EIG+0x4f0>
    b1e6:	1c34      	adds	r4, r6, #0
    b1e8:	b264      	sxtb	r4, r4
    b1ea:	00a4      	lsls	r4, r4, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:710
		{
			j = i;
		}
	}
	pthisMagCal->fA[0][0] = pthisMagCal->fmatB[0][j];
    b1ec:	2393      	movs	r3, #147	; 0x93
    b1ee:	445c      	add	r4, fp
    b1f0:	009b      	lsls	r3, r3, #2
    b1f2:	58e3      	ldr	r3, [r4, r3]
    b1f4:	465d      	mov	r5, fp
    b1f6:	676b      	str	r3, [r5, #116]	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:711
	pthisMagCal->fA[0][1] = pthisMagCal->fA[1][0] = pthisMagCal->fmatB[1][j];
    b1f8:	239d      	movs	r3, #157	; 0x9d
    b1fa:	009b      	lsls	r3, r3, #2
    b1fc:	58e3      	ldr	r3, [r4, r3]
    b1fe:	2280      	movs	r2, #128	; 0x80
    b200:	50ab      	str	r3, [r5, r2]
    b202:	67ab      	str	r3, [r5, #120]	; 0x78
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:712
	pthisMagCal->fA[0][2] = pthisMagCal->fA[2][0] = pthisMagCal->fmatB[2][j];
    b204:	23a7      	movs	r3, #167	; 0xa7
    b206:	009b      	lsls	r3, r3, #2
    b208:	58e3      	ldr	r3, [r4, r3]
    b20a:	228c      	movs	r2, #140	; 0x8c
    b20c:	50ab      	str	r3, [r5, r2]
    b20e:	67eb      	str	r3, [r5, #124]	; 0x7c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:713
	pthisMagCal->fA[1][1] = pthisMagCal->fmatB[3][j];
    b210:	23b1      	movs	r3, #177	; 0xb1
    b212:	009b      	lsls	r3, r3, #2
    b214:	58e2      	ldr	r2, [r4, r3]
    b216:	2384      	movs	r3, #132	; 0x84
    b218:	50ea      	str	r2, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:714
	pthisMagCal->fA[1][2] = pthisMagCal->fA[2][1] = pthisMagCal->fmatB[4][j];
    b21a:	23bb      	movs	r3, #187	; 0xbb
    b21c:	009b      	lsls	r3, r3, #2
    b21e:	58e3      	ldr	r3, [r4, r3]
    b220:	2290      	movs	r2, #144	; 0x90
    b222:	50ab      	str	r3, [r5, r2]
    b224:	2288      	movs	r2, #136	; 0x88
    b226:	50ab      	str	r3, [r5, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:715
	pthisMagCal->fA[2][2] = pthisMagCal->fmatB[5][j];
    b228:	23c5      	movs	r3, #197	; 0xc5
    b22a:	009b      	lsls	r3, r3, #2
    b22c:	58e2      	ldr	r2, [r4, r3]
    b22e:	2394      	movs	r3, #148	; 0x94
    b230:	50ea      	str	r2, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:718

	// negate entire solution if A has negative determinant
	det = f3x3matrixDetA(pthisMagCal->fA);
    b232:	3574      	adds	r5, #116	; 0x74
    b234:	1c28      	adds	r0, r5, #0
    b236:	9506      	str	r5, [sp, #24]
    b238:	f000 fb78 	bl	b92c <f3x3matrixDetA>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:719
	if (det < 0.0F)
    b23c:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:718
	pthisMagCal->fA[1][1] = pthisMagCal->fmatB[3][j];
	pthisMagCal->fA[1][2] = pthisMagCal->fA[2][1] = pthisMagCal->fmatB[4][j];
	pthisMagCal->fA[2][2] = pthisMagCal->fmatB[5][j];

	// negate entire solution if A has negative determinant
	det = f3x3matrixDetA(pthisMagCal->fA);
    b23e:	4682      	mov	sl, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:719
	if (det < 0.0F)
    b240:	f7f5 fa30 	bl	6a4 <__aeabi_fcmplt>
    b244:	2800      	cmp	r0, #0
    b246:	d000      	beq.n	b24a <fUpdateCalibration10EIG+0x552>
    b248:	e222      	b.n	b690 <fUpdateCalibration10EIG+0x998>
    b24a:	e001      	b.n	b250 <fUpdateCalibration10EIG+0x558>
    b24c:	00000b56 	.word	0x00000b56
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:730
		pthisMagCal->fmatB[9][j] = -pthisMagCal->fmatB[9][j];
		det = -det;
	}

	// compute the inverse of the ellipsoid matrix
	f3x3matrixAeqInvSymB(pthisMagCal->finvA, pthisMagCal->fA);
    b250:	4658      	mov	r0, fp
    b252:	3098      	adds	r0, #152	; 0x98
    b254:	9906      	ldr	r1, [sp, #24]
    b256:	f000 faad 	bl	b7b4 <f3x3matrixAeqInvSymB>
    b25a:	23cf      	movs	r3, #207	; 0xcf
    b25c:	009b      	lsls	r3, r3, #2
    b25e:	58e3      	ldr	r3, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:738
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = 0.0F;
		for (m = X; m <= Z; m++)
		{
			pthisMagCal->ftrV[l] += pthisMagCal->finvA[l][m] * pthisMagCal->fmatB[m + 6][j];
    b260:	465a      	mov	r2, fp
    b262:	4698      	mov	r8, r3
    b264:	23d9      	movs	r3, #217	; 0xd9
    b266:	009b      	lsls	r3, r3, #2
    b268:	58e3      	ldr	r3, [r4, r3]
    b26a:	4640      	mov	r0, r8
    b26c:	4699      	mov	r9, r3
    b26e:	23e3      	movs	r3, #227	; 0xe3
    b270:	009b      	lsls	r3, r3, #2
    b272:	58e3      	ldr	r3, [r4, r3]
    b274:	9309      	str	r3, [sp, #36]	; 0x24
    b276:	2398      	movs	r3, #152	; 0x98
    b278:	58d1      	ldr	r1, [r2, r3]
    b27a:	f7f5 fd8b 	bl	d94 <__aeabi_fmul>
    b27e:	2100      	movs	r1, #0
    b280:	f7f5 fa38 	bl	6f4 <__aeabi_fadd>
    b284:	239c      	movs	r3, #156	; 0x9c
    b286:	465a      	mov	r2, fp
    b288:	58d1      	ldr	r1, [r2, r3]
    b28a:	1c05      	adds	r5, r0, #0
    b28c:	4648      	mov	r0, r9
    b28e:	f7f5 fd81 	bl	d94 <__aeabi_fmul>
    b292:	1c01      	adds	r1, r0, #0
    b294:	1c28      	adds	r0, r5, #0
    b296:	f7f5 fa2d 	bl	6f4 <__aeabi_fadd>
    b29a:	465a      	mov	r2, fp
    b29c:	23a0      	movs	r3, #160	; 0xa0
    b29e:	58d1      	ldr	r1, [r2, r3]
    b2a0:	1c05      	adds	r5, r0, #0
    b2a2:	9809      	ldr	r0, [sp, #36]	; 0x24
    b2a4:	f7f5 fd76 	bl	d94 <__aeabi_fmul>
    b2a8:	1c01      	adds	r1, r0, #0
    b2aa:	1c28      	adds	r0, r5, #0
    b2ac:	f7f5 fa22 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:740
		}
		pthisMagCal->ftrV[l] *= -0.5F;
    b2b0:	21bf      	movs	r1, #191	; 0xbf
    b2b2:	0609      	lsls	r1, r1, #24
    b2b4:	f7f5 fd6e 	bl	d94 <__aeabi_fmul>
    b2b8:	465b      	mov	r3, fp
    b2ba:	63d8      	str	r0, [r3, #60]	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:738
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = 0.0F;
		for (m = X; m <= Z; m++)
		{
			pthisMagCal->ftrV[l] += pthisMagCal->finvA[l][m] * pthisMagCal->fmatB[m + 6][j];
    b2bc:	465d      	mov	r5, fp
    b2be:	23a4      	movs	r3, #164	; 0xa4
    b2c0:	58e9      	ldr	r1, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:740
		}
		pthisMagCal->ftrV[l] *= -0.5F;
    b2c2:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:738
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = 0.0F;
		for (m = X; m <= Z; m++)
		{
			pthisMagCal->ftrV[l] += pthisMagCal->finvA[l][m] * pthisMagCal->fmatB[m + 6][j];
    b2c4:	4640      	mov	r0, r8
    b2c6:	f7f5 fd65 	bl	d94 <__aeabi_fmul>
    b2ca:	2100      	movs	r1, #0
    b2cc:	f7f5 fa12 	bl	6f4 <__aeabi_fadd>
    b2d0:	23a8      	movs	r3, #168	; 0xa8
    b2d2:	465a      	mov	r2, fp
    b2d4:	58d1      	ldr	r1, [r2, r3]
    b2d6:	1c05      	adds	r5, r0, #0
    b2d8:	4648      	mov	r0, r9
    b2da:	f7f5 fd5b 	bl	d94 <__aeabi_fmul>
    b2de:	1c01      	adds	r1, r0, #0
    b2e0:	1c28      	adds	r0, r5, #0
    b2e2:	f7f5 fa07 	bl	6f4 <__aeabi_fadd>
    b2e6:	465a      	mov	r2, fp
    b2e8:	23ac      	movs	r3, #172	; 0xac
    b2ea:	58d1      	ldr	r1, [r2, r3]
    b2ec:	1c05      	adds	r5, r0, #0
    b2ee:	9809      	ldr	r0, [sp, #36]	; 0x24
    b2f0:	f7f5 fd50 	bl	d94 <__aeabi_fmul>
    b2f4:	1c01      	adds	r1, r0, #0
    b2f6:	1c28      	adds	r0, r5, #0
    b2f8:	f7f5 f9fc 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:740
		}
		pthisMagCal->ftrV[l] *= -0.5F;
    b2fc:	21bf      	movs	r1, #191	; 0xbf
    b2fe:	0609      	lsls	r1, r1, #24
    b300:	f7f5 fd48 	bl	d94 <__aeabi_fmul>
    b304:	465b      	mov	r3, fp
    b306:	6418      	str	r0, [r3, #64]	; 0x40
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:738
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = 0.0F;
		for (m = X; m <= Z; m++)
		{
			pthisMagCal->ftrV[l] += pthisMagCal->finvA[l][m] * pthisMagCal->fmatB[m + 6][j];
    b308:	465d      	mov	r5, fp
    b30a:	23b0      	movs	r3, #176	; 0xb0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:740
		}
		pthisMagCal->ftrV[l] *= -0.5F;
    b30c:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:738
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = 0.0F;
		for (m = X; m <= Z; m++)
		{
			pthisMagCal->ftrV[l] += pthisMagCal->finvA[l][m] * pthisMagCal->fmatB[m + 6][j];
    b30e:	58e9      	ldr	r1, [r5, r3]
    b310:	4640      	mov	r0, r8
    b312:	f7f5 fd3f 	bl	d94 <__aeabi_fmul>
    b316:	2100      	movs	r1, #0
    b318:	f7f5 f9ec 	bl	6f4 <__aeabi_fadd>
    b31c:	23b4      	movs	r3, #180	; 0xb4
    b31e:	465a      	mov	r2, fp
    b320:	58d1      	ldr	r1, [r2, r3]
    b322:	1c05      	adds	r5, r0, #0
    b324:	4648      	mov	r0, r9
    b326:	f7f5 fd35 	bl	d94 <__aeabi_fmul>
    b32a:	1c01      	adds	r1, r0, #0
    b32c:	1c28      	adds	r0, r5, #0
    b32e:	f7f5 f9e1 	bl	6f4 <__aeabi_fadd>
    b332:	465a      	mov	r2, fp
    b334:	23b8      	movs	r3, #184	; 0xb8
    b336:	58d1      	ldr	r1, [r2, r3]
    b338:	1c05      	adds	r5, r0, #0
    b33a:	9809      	ldr	r0, [sp, #36]	; 0x24
    b33c:	f7f5 fd2a 	bl	d94 <__aeabi_fmul>
    b340:	1c01      	adds	r1, r0, #0
    b342:	1c28      	adds	r0, r5, #0
    b344:	f7f5 f9d6 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:740
		}
		pthisMagCal->ftrV[l] *= -0.5F;
    b348:	21bf      	movs	r1, #191	; 0xbf
    b34a:	0609      	lsls	r1, r1, #24
    b34c:	f7f5 fd22 	bl	d94 <__aeabi_fmul>
    b350:	465b      	mov	r3, fp
    b352:	1c05      	adds	r5, r0, #0
    b354:	6458      	str	r0, [r3, #68]	; 0x44
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:744
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    b356:	6f59      	ldr	r1, [r3, #116]	; 0x74
    b358:	1c38      	adds	r0, r7, #0
    b35a:	f7f5 fd1b 	bl	d94 <__aeabi_fmul>
    b35e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:745
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
    b360:	4658      	mov	r0, fp
    b362:	6f80      	ldr	r0, [r0, #120]	; 0x78
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:746
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
    b364:	465a      	mov	r2, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:745
		pthisMagCal->ftrV[l] *= -0.5F;
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
    b366:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:748
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
    b368:	465b      	mov	r3, fp
    b36a:	2088      	movs	r0, #136	; 0x88
    b36c:	581b      	ldr	r3, [r3, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:746
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
    b36e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:749
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[2][2] * pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z] - pthisMagCal->fmatB[9][j]));
    b370:	2094      	movs	r0, #148	; 0x94
    b372:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:744
		}
		pthisMagCal->ftrV[l] *= -0.5F;
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    b374:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:746
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
    b376:	9209      	str	r2, [sp, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:748
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
    b378:	9307      	str	r3, [sp, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:744
		}
		pthisMagCal->ftrV[l] *= -0.5F;
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    b37a:	f7f5 fd0b 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:745
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
    b37e:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:744
		}
		pthisMagCal->ftrV[l] *= -0.5F;
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    b380:	900b      	str	r0, [sp, #44]	; 0x2c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:745
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
    b382:	4640      	mov	r0, r8
    b384:	f7f5 f9b6 	bl	6f4 <__aeabi_fadd>
    b388:	1c01      	adds	r1, r0, #0
    b38a:	1c38      	adds	r0, r7, #0
    b38c:	f7f5 fd02 	bl	d94 <__aeabi_fmul>
    b390:	1c31      	adds	r1, r6, #0
    b392:	f7f5 fcff 	bl	d94 <__aeabi_fmul>
    b396:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:744
		}
		pthisMagCal->ftrV[l] *= -0.5F;
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    b398:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b39a:	f7f5 f9ab 	bl	6f4 <__aeabi_fadd>
    b39e:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:746
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
    b3a0:	9809      	ldr	r0, [sp, #36]	; 0x24
    b3a2:	1c01      	adds	r1, r0, #0
    b3a4:	f7f5 f9a6 	bl	6f4 <__aeabi_fadd>
    b3a8:	1c01      	adds	r1, r0, #0
    b3aa:	1c38      	adds	r0, r7, #0
    b3ac:	f7f5 fcf2 	bl	d94 <__aeabi_fmul>
    b3b0:	1c01      	adds	r1, r0, #0
    b3b2:	1c28      	adds	r0, r5, #0
    b3b4:	f7f5 fcee 	bl	d94 <__aeabi_fmul>
    b3b8:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:745
		pthisMagCal->ftrV[l] *= -0.5F;
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
    b3ba:	4640      	mov	r0, r8
    b3bc:	f7f5 f99a 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:747
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
    b3c0:	2384      	movs	r3, #132	; 0x84
    b3c2:	465a      	mov	r2, fp
    b3c4:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:745
		pthisMagCal->ftrV[l] *= -0.5F;
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
    b3c6:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:747
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
    b3c8:	1c30      	adds	r0, r6, #0
    b3ca:	f7f5 fce3 	bl	d94 <__aeabi_fmul>
    b3ce:	1c01      	adds	r1, r0, #0
    b3d0:	1c30      	adds	r0, r6, #0
    b3d2:	f7f5 fcdf 	bl	d94 <__aeabi_fmul>
    b3d6:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:746
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
    b3d8:	1c38      	adds	r0, r7, #0
    b3da:	f7f5 f98b 	bl	6f4 <__aeabi_fadd>
    b3de:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:748
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
    b3e0:	9807      	ldr	r0, [sp, #28]
    b3e2:	1c01      	adds	r1, r0, #0
    b3e4:	f7f5 f986 	bl	6f4 <__aeabi_fadd>
    b3e8:	1c01      	adds	r1, r0, #0
    b3ea:	1c30      	adds	r0, r6, #0
    b3ec:	f7f5 fcd2 	bl	d94 <__aeabi_fmul>
    b3f0:	1c01      	adds	r1, r0, #0
    b3f2:	1c28      	adds	r0, r5, #0
    b3f4:	f7f5 fcce 	bl	d94 <__aeabi_fmul>
    b3f8:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:747

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
    b3fa:	1c38      	adds	r0, r7, #0
    b3fc:	f7f5 f97a 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:749
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[2][2] * pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z] - pthisMagCal->fmatB[9][j]));
    b400:	465a      	mov	r2, fp
    b402:	444a      	add	r2, r9
    b404:	6811      	ldr	r1, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:747

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
    b406:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:749
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[2][2] * pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z] - pthisMagCal->fmatB[9][j]));
    b408:	1c28      	adds	r0, r5, #0
    b40a:	f7f5 fcc3 	bl	d94 <__aeabi_fmul>
    b40e:	1c01      	adds	r1, r0, #0
    b410:	1c28      	adds	r0, r5, #0
    b412:	f7f5 fcbf 	bl	d94 <__aeabi_fmul>
    b416:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:748
	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
    b418:	1c30      	adds	r0, r6, #0
    b41a:	f7f5 f96b 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:749
			pthisMagCal->fA[2][2] * pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z] - pthisMagCal->fmatB[9][j]));
    b41e:	23ed      	movs	r3, #237	; 0xed
    b420:	009b      	lsls	r3, r3, #2
    b422:	58e1      	ldr	r1, [r4, r3]
    b424:	f7f5 fde0 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:744
		}
		pthisMagCal->ftrV[l] *= -0.5F;
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    b428:	0040      	lsls	r0, r0, #1
    b42a:	0840      	lsrs	r0, r0, #1
    b42c:	f006 f948 	bl	116c0 <sqrtf>
    b430:	465b      	mov	r3, fp
    b432:	66d8      	str	r0, [r3, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:752
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[2][2] * pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z] - pthisMagCal->fmatB[9][j]));

	// calculate the trial normalized fit error as a percentage
	pthisMagCal->ftrFitErrorpc = 50.0F * sqrtf(fabs(pthisMagCal->fvecA[j]) / (float) pthisMagBuffer->iMagBufferCount) /
    b434:	23f7      	movs	r3, #247	; 0xf7
    b436:	009b      	lsls	r3, r3, #2
    b438:	58e4      	ldr	r4, [r4, r3]
    b43a:	9d12      	ldr	r5, [sp, #72]	; 0x48
    b43c:	4ba3      	ldr	r3, [pc, #652]	; (b6cc <fUpdateCalibration10EIG+0x9d4>)
    b43e:	0064      	lsls	r4, r4, #1
    b440:	5ee8      	ldrsh	r0, [r5, r3]
    b442:	f7f5 ff67 	bl	1314 <__aeabi_i2f>
    b446:	0864      	lsrs	r4, r4, #1
    b448:	1c01      	adds	r1, r0, #0
    b44a:	1c20      	adds	r0, r4, #0
    b44c:	f7f5 fabe 	bl	9cc <__aeabi_fdiv>
    b450:	f006 f936 	bl	116c0 <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:753
			(pthisMagCal->ftrB * pthisMagCal->ftrB);
    b454:	4659      	mov	r1, fp
    b456:	6ecc      	ldr	r4, [r1, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:752
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[2][2] * pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z] - pthisMagCal->fmatB[9][j]));

	// calculate the trial normalized fit error as a percentage
	pthisMagCal->ftrFitErrorpc = 50.0F * sqrtf(fabs(pthisMagCal->fvecA[j]) / (float) pthisMagBuffer->iMagBufferCount) /
    b458:	499d      	ldr	r1, [pc, #628]	; (b6d0 <fUpdateCalibration10EIG+0x9d8>)
    b45a:	f7f5 fc9b 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:753
			(pthisMagCal->ftrB * pthisMagCal->ftrB);
    b45e:	1c21      	adds	r1, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:752
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[2][2] * pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z] - pthisMagCal->fmatB[9][j]));

	// calculate the trial normalized fit error as a percentage
	pthisMagCal->ftrFitErrorpc = 50.0F * sqrtf(fabs(pthisMagCal->fvecA[j]) / (float) pthisMagBuffer->iMagBufferCount) /
    b460:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:753
			(pthisMagCal->ftrB * pthisMagCal->ftrB);
    b462:	1c20      	adds	r0, r4, #0
    b464:	f7f5 fc96 	bl	d94 <__aeabi_fmul>
    b468:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:752
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[2][2] * pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z] - pthisMagCal->fmatB[9][j]));

	// calculate the trial normalized fit error as a percentage
	pthisMagCal->ftrFitErrorpc = 50.0F * sqrtf(fabs(pthisMagCal->fvecA[j]) / (float) pthisMagBuffer->iMagBufferCount) /
    b46a:	1c28      	adds	r0, r5, #0
    b46c:	f7f5 faae 	bl	9cc <__aeabi_fdiv>
    b470:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b472:	465a      	mov	r2, fp
    b474:	6710      	str	r0, [r2, #112]	; 0x70
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:758
			(pthisMagCal->ftrB * pthisMagCal->ftrB);

	// correct for the measurement matrix offset and scaling and get the computed hard iron offset in uT
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = pthisMagCal->ftrV[l] * DEFAULTB + (float)iOffset[l] * pthisMag->fuTPerCount;
    b476:	4996      	ldr	r1, [pc, #600]	; (b6d0 <fUpdateCalibration10EIG+0x9d8>)
    b478:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    b47a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    b47c:	f7f5 fc8a 	bl	d94 <__aeabi_fmul>
    b480:	a916      	add	r1, sp, #88	; 0x58
    b482:	1c06      	adds	r6, r0, #0
    b484:	2000      	movs	r0, #0
    b486:	5e08      	ldrsh	r0, [r1, r0]
    b488:	f7f5 ff44 	bl	1314 <__aeabi_i2f>
    b48c:	1c29      	adds	r1, r5, #0
    b48e:	f7f5 fc81 	bl	d94 <__aeabi_fmul>
    b492:	1c01      	adds	r1, r0, #0
    b494:	1c30      	adds	r0, r6, #0
    b496:	f7f5 f92d 	bl	6f4 <__aeabi_fadd>
    b49a:	465a      	mov	r2, fp
    b49c:	63d0      	str	r0, [r2, #60]	; 0x3c
    b49e:	498c      	ldr	r1, [pc, #560]	; (b6d0 <fUpdateCalibration10EIG+0x9d8>)
    b4a0:	6c10      	ldr	r0, [r2, #64]	; 0x40
    b4a2:	f7f5 fc77 	bl	d94 <__aeabi_fmul>
    b4a6:	235a      	movs	r3, #90	; 0x5a
    b4a8:	446b      	add	r3, sp
    b4aa:	1c06      	adds	r6, r0, #0
    b4ac:	2000      	movs	r0, #0
    b4ae:	5e18      	ldrsh	r0, [r3, r0]
    b4b0:	f7f5 ff30 	bl	1314 <__aeabi_i2f>
    b4b4:	1c29      	adds	r1, r5, #0
    b4b6:	f7f5 fc6d 	bl	d94 <__aeabi_fmul>
    b4ba:	1c01      	adds	r1, r0, #0
    b4bc:	1c30      	adds	r0, r6, #0
    b4be:	f7f5 f919 	bl	6f4 <__aeabi_fadd>
    b4c2:	4659      	mov	r1, fp
    b4c4:	6408      	str	r0, [r1, #64]	; 0x40
    b4c6:	6c48      	ldr	r0, [r1, #68]	; 0x44
    b4c8:	4981      	ldr	r1, [pc, #516]	; (b6d0 <fUpdateCalibration10EIG+0x9d8>)
    b4ca:	f7f5 fc63 	bl	d94 <__aeabi_fmul>
    b4ce:	aa17      	add	r2, sp, #92	; 0x5c
    b4d0:	1c06      	adds	r6, r0, #0
    b4d2:	2000      	movs	r0, #0
    b4d4:	5e10      	ldrsh	r0, [r2, r0]
    b4d6:	f7f5 ff1d 	bl	1314 <__aeabi_i2f>
    b4da:	1c29      	adds	r1, r5, #0
    b4dc:	f7f5 fc5a 	bl	d94 <__aeabi_fmul>
    b4e0:	1c01      	adds	r1, r0, #0
    b4e2:	1c30      	adds	r0, r6, #0
    b4e4:	f7f5 f906 	bl	6f4 <__aeabi_fadd>
    b4e8:	465b      	mov	r3, fp
    b4ea:	6458      	str	r0, [r3, #68]	; 0x44
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:762
	}

	// convert the trial geomagnetic field strength B into uT for un-normalized soft iron matrix A
	pthisMagCal->ftrB *= DEFAULTB;
    b4ec:	4978      	ldr	r1, [pc, #480]	; (b6d0 <fUpdateCalibration10EIG+0x9d8>)
    b4ee:	1c20      	adds	r0, r4, #0
    b4f0:	f7f5 fc50 	bl	d94 <__aeabi_fmul>
    b4f4:	465c      	mov	r4, fp
    b4f6:	66e0      	str	r0, [r4, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:765

	// normalize the ellipsoid matrix A to unit determinant and correct B by root of this multiplicative factor
	f3x3matrixAeqAxScalar(pthisMagCal->fA, powf(det, -(ONETHIRD)));
    b4f8:	4976      	ldr	r1, [pc, #472]	; (b6d4 <fUpdateCalibration10EIG+0x9dc>)
    b4fa:	4650      	mov	r0, sl
    b4fc:	f005 ff14 	bl	11328 <powf>
    b500:	1c01      	adds	r1, r0, #0
    b502:	9806      	ldr	r0, [sp, #24]
    b504:	f000 f908 	bl	b718 <f3x3matrixAeqAxScalar>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:766
	pthisMagCal->ftrB *= powf(det, -(ONESIXTH));
    b508:	4973      	ldr	r1, [pc, #460]	; (b6d8 <fUpdateCalibration10EIG+0x9e0>)
    b50a:	4650      	mov	r0, sl
    b50c:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
    b50e:	f005 ff0b 	bl	11328 <powf>
    b512:	1c01      	adds	r1, r0, #0
    b514:	1c20      	adds	r0, r4, #0
    b516:	f7f5 fc3d 	bl	d94 <__aeabi_fmul>
    b51a:	465d      	mov	r5, fp
    b51c:	66e8      	str	r0, [r5, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:775
	// where fmatA holds the 3x3 matrix fA in its top left elements
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			pthisMagCal->fmatA[i][j] = pthisMagCal->fA[i][j];
    b51e:	6f68      	ldr	r0, [r5, #116]	; 0x74
    b520:	6fa9      	ldr	r1, [r5, #120]	; 0x78
    b522:	23bc      	movs	r3, #188	; 0xbc
    b524:	50e8      	str	r0, [r5, r3]
    b526:	6fea      	ldr	r2, [r5, #124]	; 0x7c
    b528:	23c0      	movs	r3, #192	; 0xc0
    b52a:	50e9      	str	r1, [r5, r3]
    b52c:	23c4      	movs	r3, #196	; 0xc4
    b52e:	50ea      	str	r2, [r5, r3]
    b530:	2380      	movs	r3, #128	; 0x80
    b532:	58ea      	ldr	r2, [r5, r3]
    b534:	23e4      	movs	r3, #228	; 0xe4
    b536:	50ea      	str	r2, [r5, r3]
    b538:	2384      	movs	r3, #132	; 0x84
    b53a:	58ea      	ldr	r2, [r5, r3]
    b53c:	2488      	movs	r4, #136	; 0x88
    b53e:	23e8      	movs	r3, #232	; 0xe8
    b540:	50ea      	str	r2, [r5, r3]
    b542:	592a      	ldr	r2, [r5, r4]
    b544:	23ec      	movs	r3, #236	; 0xec
    b546:	50ea      	str	r2, [r5, r3]
    b548:	238c      	movs	r3, #140	; 0x8c
    b54a:	58ea      	ldr	r2, [r5, r3]
    b54c:	2386      	movs	r3, #134	; 0x86
    b54e:	005b      	lsls	r3, r3, #1
    b550:	50ea      	str	r2, [r5, r3]
    b552:	2390      	movs	r3, #144	; 0x90
    b554:	58ea      	ldr	r2, [r5, r3]
    b556:	2388      	movs	r3, #136	; 0x88
    b558:	005b      	lsls	r3, r3, #1
    b55a:	50ea      	str	r2, [r5, r3]
    b55c:	444d      	add	r5, r9
    b55e:	682a      	ldr	r2, [r5, #0]
    b560:	238a      	movs	r3, #138	; 0x8a
    b562:	005b      	lsls	r3, r3, #1
    b564:	4658      	mov	r0, fp
    b566:	50c2      	str	r2, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:778
		}
	}
	eigencompute(pthisMagCal->fmatA, pthisMagCal->fvecA, pthisMagCal->fmatB, 3);
    b568:	990e      	ldr	r1, [sp, #56]	; 0x38
    b56a:	980a      	ldr	r0, [sp, #40]	; 0x28
    b56c:	9a08      	ldr	r2, [sp, #32]
    b56e:	2303      	movs	r3, #3
    b570:	f000 fa2e 	bl	b9d0 <eigencompute>
    b574:	9c08      	ldr	r4, [sp, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:781

	// set pthisMagCal->fmatB to be eigenvectors . diag(sqrt(sqrt(eigenvalues))) = fmatB . diag(sqrt(sqrt(fvecA))
	for (j = 0; j < 3; j++) // loop over columns j
    b576:	2500      	movs	r5, #0
    b578:	21c8      	movs	r1, #200	; 0xc8
    b57a:	0049      	lsls	r1, r1, #1
    b57c:	1863      	adds	r3, r4, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:783
	{
		ftmp = sqrtf(sqrtf(fabs(pthisMagCal->fvecA[j])));
    b57e:	6818      	ldr	r0, [r3, #0]
    b580:	3501      	adds	r5, #1
    b582:	0040      	lsls	r0, r0, #1
    b584:	0840      	lsrs	r0, r0, #1
    b586:	f006 f89b 	bl	116c0 <sqrtf>
    b58a:	f006 f899 	bl	116c0 <sqrtf>
    b58e:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:786
		for (i = 0; i < 3; i++) // loop over rows i
		{
			pthisMagCal->fmatB[i][j] *= ftmp;
    b590:	1c31      	adds	r1, r6, #0
    b592:	6820      	ldr	r0, [r4, #0]
    b594:	f7f5 fbfe 	bl	d94 <__aeabi_fmul>
    b598:	1c31      	adds	r1, r6, #0
    b59a:	6020      	str	r0, [r4, #0]
    b59c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b59e:	f7f5 fbf9 	bl	d94 <__aeabi_fmul>
    b5a2:	1c31      	adds	r1, r6, #0
    b5a4:	62a0      	str	r0, [r4, #40]	; 0x28
    b5a6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    b5a8:	f7f5 fbf4 	bl	d94 <__aeabi_fmul>
    b5ac:	b2ed      	uxtb	r5, r5
    b5ae:	6520      	str	r0, [r4, #80]	; 0x50
    b5b0:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:781
		}
	}
	eigencompute(pthisMagCal->fmatA, pthisMagCal->fvecA, pthisMagCal->fmatB, 3);

	// set pthisMagCal->fmatB to be eigenvectors . diag(sqrt(sqrt(eigenvalues))) = fmatB . diag(sqrt(sqrt(fvecA))
	for (j = 0; j < 3; j++) // loop over columns j
    b5b2:	2d03      	cmp	r5, #3
    b5b4:	d1e0      	bne.n	b578 <fUpdateCalibration10EIG+0x880>
    b5b6:	9e08      	ldr	r6, [sp, #32]
    b5b8:	2400      	movs	r4, #0
    b5ba:	6875      	ldr	r5, [r6, #4]
    b5bc:	6833      	ldr	r3, [r6, #0]
    b5be:	9508      	str	r5, [sp, #32]
    b5c0:	68b5      	ldr	r5, [r6, #8]
    b5c2:	469a      	mov	sl, r3
    b5c4:	9506      	str	r5, [sp, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:781 (discriminator 1)
    b5c6:	46a9      	mov	r9, r5
    b5c8:	1c18      	adds	r0, r3, #0
    b5ca:	9d08      	ldr	r5, [sp, #32]
    b5cc:	0063      	lsls	r3, r4, #1
    b5ce:	b2e7      	uxtb	r7, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:802 (discriminator 1)
		{
			pthisMagCal->ftrinvW[i][j] = 0.0F;
			// accumulate the matrix product
			for (k = 0; k < 3; k++)
			{
				pthisMagCal->ftrinvW[i][j] += pthisMagCal->fmatB[i][k] * pthisMagCal->fmatB[j][k];
    b5d0:	191b      	adds	r3, r3, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:781 (discriminator 1)
		}
	}
	eigencompute(pthisMagCal->fmatA, pthisMagCal->fvecA, pthisMagCal->fmatB, 3);

	// set pthisMagCal->fmatB to be eigenvectors . diag(sqrt(sqrt(eigenvalues))) = fmatB . diag(sqrt(sqrt(fvecA))
	for (j = 0; j < 3; j++) // loop over columns j
    b5d2:	46a8      	mov	r8, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:802 (discriminator 1)
		{
			pthisMagCal->ftrinvW[i][j] = 0.0F;
			// accumulate the matrix product
			for (k = 0; k < 3; k++)
			{
				pthisMagCal->ftrinvW[i][j] += pthisMagCal->fmatB[i][k] * pthisMagCal->fmatB[j][k];
    b5d4:	930a      	str	r3, [sp, #40]	; 0x28
    b5d6:	b27d      	sxtb	r5, r7
    b5d8:	e011      	b.n	b5fe <fUpdateCalibration10EIG+0x906>
    b5da:	00ab      	lsls	r3, r5, #2
    b5dc:	195b      	adds	r3, r3, r5
    b5de:	00db      	lsls	r3, r3, #3
    b5e0:	2092      	movs	r0, #146	; 0x92
    b5e2:	445b      	add	r3, fp
    b5e4:	0080      	lsls	r0, r0, #2
    b5e6:	2193      	movs	r1, #147	; 0x93
    b5e8:	181a      	adds	r2, r3, r0
    b5ea:	0089      	lsls	r1, r1, #2
    b5ec:	6850      	ldr	r0, [r2, #4]
    b5ee:	185a      	adds	r2, r3, r1
    b5f0:	6852      	ldr	r2, [r2, #4]
    b5f2:	4690      	mov	r8, r2
    b5f4:	2294      	movs	r2, #148	; 0x94
    b5f6:	0092      	lsls	r2, r2, #2
    b5f8:	189b      	adds	r3, r3, r2
    b5fa:	685b      	ldr	r3, [r3, #4]
    b5fc:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:802
    b5fe:	4651      	mov	r1, sl
    b600:	f7f5 fbc8 	bl	d94 <__aeabi_fmul>
    b604:	2100      	movs	r1, #0
    b606:	f7f5 f875 	bl	6f4 <__aeabi_fadd>
    b60a:	9908      	ldr	r1, [sp, #32]
    b60c:	9009      	str	r0, [sp, #36]	; 0x24
    b60e:	4640      	mov	r0, r8
    b610:	f7f5 fbc0 	bl	d94 <__aeabi_fmul>
    b614:	1c01      	adds	r1, r0, #0
    b616:	9809      	ldr	r0, [sp, #36]	; 0x24
    b618:	f7f5 f86c 	bl	6f4 <__aeabi_fadd>
    b61c:	9906      	ldr	r1, [sp, #24]
    b61e:	4680      	mov	r8, r0
    b620:	4648      	mov	r0, r9
    b622:	f7f5 fbb7 	bl	d94 <__aeabi_fmul>
    b626:	1c01      	adds	r1, r0, #0
    b628:	4640      	mov	r0, r8
    b62a:	f7f5 f863 	bl	6f4 <__aeabi_fadd>
    b62e:	990a      	ldr	r1, [sp, #40]	; 0x28
    b630:	465a      	mov	r2, fp
    b632:	194b      	adds	r3, r1, r5
    b634:	3312      	adds	r3, #18
    b636:	009b      	lsls	r3, r3, #2
    b638:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:805
			}
			// copy to below diagonal element
			pthisMagCal->ftrinvW[j][i] = pthisMagCal->ftrinvW[i][j];
    b63a:	006b      	lsls	r3, r5, #1
    b63c:	195b      	adds	r3, r3, r5
    b63e:	191b      	adds	r3, r3, r4
    b640:	3701      	adds	r7, #1
    b642:	3312      	adds	r3, #18
    b644:	b2ff      	uxtb	r7, r7
    b646:	009b      	lsls	r3, r3, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:796
	// = fmatB * fmatB^T = sqrt(fA) (guaranteed symmetric)
	// loop over rows
	for (i = 0; i < 3; i++)
	{
		// loop over on and above diagonal columns
		for (j = i; j < 3; j++)
    b648:	b27d      	sxtb	r5, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:805
			for (k = 0; k < 3; k++)
			{
				pthisMagCal->ftrinvW[i][j] += pthisMagCal->fmatB[i][k] * pthisMagCal->fmatB[j][k];
			}
			// copy to below diagonal element
			pthisMagCal->ftrinvW[j][i] = pthisMagCal->ftrinvW[i][j];
    b64a:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:796
	// = fmatB * fmatB^T = sqrt(fA) (guaranteed symmetric)
	// loop over rows
	for (i = 0; i < 3; i++)
	{
		// loop over on and above diagonal columns
		for (j = i; j < 3; j++)
    b64c:	2d02      	cmp	r5, #2
    b64e:	ddc4      	ble.n	b5da <fUpdateCalibration10EIG+0x8e2>
    b650:	3401      	adds	r4, #1
    b652:	3628      	adds	r6, #40	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:793
	}

	// set ftrinvW to eigenvectors * diag(sqrt(eigenvalues)) * eigenvectors^T
	// = fmatB * fmatB^T = sqrt(fA) (guaranteed symmetric)
	// loop over rows
	for (i = 0; i < 3; i++)
    b654:	2c03      	cmp	r4, #3
    b656:	d1b0      	bne.n	b5ba <fUpdateCalibration10EIG+0x8c2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:810
			pthisMagCal->ftrinvW[j][i] = pthisMagCal->ftrinvW[i][j];
		}
	}

	return;
}
    b658:	b019      	add	sp, #100	; 0x64
    b65a:	bc3c      	pop	{r2, r3, r4, r5}
    b65c:	4690      	mov	r8, r2
    b65e:	4699      	mov	r9, r3
    b660:	46a2      	mov	sl, r4
    b662:	46ab      	mov	fp, r5
    b664:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b666:	9d06      	ldr	r5, [sp, #24]
    b668:	2090      	movs	r0, #144	; 0x90
    b66a:	00c0      	lsls	r0, r0, #3
    b66c:	182b      	adds	r3, r5, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:643
				// use first valid magnetic buffer entry as estimate for offset to help solution (bit counts)
				if (iCount == 0)
				{
					for (l = X; l <= Z; l++)
					{
						iOffset[l] = pthisMagBuffer->iBpFast[l][j][k];
    b66e:	881b      	ldrh	r3, [r3, #0]
    b670:	2190      	movs	r1, #144	; 0x90
    b672:	0089      	lsls	r1, r1, #2
    b674:	9310      	str	r3, [sp, #64]	; 0x40
    b676:	186b      	adds	r3, r5, r1
    b678:	881b      	ldrh	r3, [r3, #0]
    b67a:	882d      	ldrh	r5, [r5, #0]
    b67c:	2600      	movs	r6, #0
    b67e:	950f      	str	r5, [sp, #60]	; 0x3c
    b680:	9311      	str	r3, [sp, #68]	; 0x44
    b682:	1c35      	adds	r5, r6, #0
    b684:	1c37      	adds	r7, r6, #0
    b686:	f7ff fbb0 	bl	adea <fUpdateCalibration10EIG+0xf2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:690

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
    b68a:	3001      	adds	r0, #1
    b68c:	b2c0      	uxtb	r0, r0
    b68e:	e4ac      	b.n	afea <fUpdateCalibration10EIG+0x2f2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:721

	// negate entire solution if A has negative determinant
	det = f3x3matrixDetA(pthisMagCal->fA);
	if (det < 0.0F)
	{
		f3x3matrixAeqMinusA(pthisMagCal->fA);
    b690:	9806      	ldr	r0, [sp, #24]
    b692:	f000 f871 	bl	b778 <f3x3matrixAeqMinusA>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:722
		pthisMagCal->fmatB[6][j] = -pthisMagCal->fmatB[6][j];
    b696:	23cf      	movs	r3, #207	; 0xcf
    b698:	009b      	lsls	r3, r3, #2
    b69a:	58e0      	ldr	r0, [r4, r3]
    b69c:	2180      	movs	r1, #128	; 0x80
    b69e:	0609      	lsls	r1, r1, #24
    b6a0:	1842      	adds	r2, r0, r1
    b6a2:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:723
		pthisMagCal->fmatB[7][j] = -pthisMagCal->fmatB[7][j];
    b6a4:	23d9      	movs	r3, #217	; 0xd9
    b6a6:	009b      	lsls	r3, r3, #2
    b6a8:	58e5      	ldr	r5, [r4, r3]
    b6aa:	186a      	adds	r2, r5, r1
    b6ac:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:724
		pthisMagCal->fmatB[8][j] = -pthisMagCal->fmatB[8][j];
    b6ae:	23e3      	movs	r3, #227	; 0xe3
    b6b0:	009b      	lsls	r3, r3, #2
    b6b2:	58e0      	ldr	r0, [r4, r3]
    b6b4:	1842      	adds	r2, r0, r1
    b6b6:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:725
		pthisMagCal->fmatB[9][j] = -pthisMagCal->fmatB[9][j];
    b6b8:	23ed      	movs	r3, #237	; 0xed
    b6ba:	009b      	lsls	r3, r3, #2
    b6bc:	58e5      	ldr	r5, [r4, r3]
    b6be:	186a      	adds	r2, r5, r1
    b6c0:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/magnetic.c:726
		det = -det;
    b6c2:	1c0b      	adds	r3, r1, #0
    b6c4:	4453      	add	r3, sl
    b6c6:	469a      	mov	sl, r3
    b6c8:	e5c2      	b.n	b250 <fUpdateCalibration10EIG+0x558>
    b6ca:	46c0      	nop			; (mov r8, r8)
    b6cc:	00000b56 	.word	0x00000b56
    b6d0:	42480000 	.word	0x42480000
    b6d4:	beaaaaab 	.word	0xbeaaaaab
    b6d8:	be2aaaab 	.word	0xbe2aaaab

0000b6dc <main>:
main():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/main.c:66
/* User includes (#include below this line is not maintained by Processor Expert) */

/*lint -save  -e970 Disable MISRA rule (6.3) checking. */
int main(void)
/*lint -restore Enable MISRA rule (6.3) checking. */
{
    b6dc:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/main.c:70
  /* Write your local variable definition here */

  /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
  PE_low_level_init();
    b6de:	f004 fd5f 	bl	101a0 <PE_low_level_init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/main.c:79
  /* For example: for(;;) { } */

  /*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
    b6e2:	f003 ffb9 	bl	f658 <_mqxlite>
    b6e6:	e7fe      	b.n	b6e6 <main+0xa>

0000b6e8 <f3x3matrixAeqI>:
f3x3matrixAeqI():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
		}
		A[i][i] = 1.0F;
    b6e8:	22fe      	movs	r2, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:51
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
    b6ea:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		}
		A[i][i] = 1.0F;
    b6ec:	0592      	lsls	r2, r2, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:51
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
    b6ee:	6043      	str	r3, [r0, #4]
    b6f0:	6083      	str	r3, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		}
		A[i][i] = 1.0F;
    b6f2:	6002      	str	r2, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:51
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
    b6f4:	60c3      	str	r3, [r0, #12]
    b6f6:	6143      	str	r3, [r0, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		}
		A[i][i] = 1.0F;
    b6f8:	6102      	str	r2, [r0, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:51
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
    b6fa:	6183      	str	r3, [r0, #24]
    b6fc:	61c3      	str	r3, [r0, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		}
		A[i][i] = 1.0F;
    b6fe:	6202      	str	r2, [r0, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:56
	}
	return;
}
    b700:	4770      	bx	lr
    b702:	46c0      	nop			; (mov r8, r8)

0000b704 <f3x3matrixAeqScalar>:
f3x3matrixAeqScalar():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:91
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = Scalar;
    b704:	6001      	str	r1, [r0, #0]
    b706:	6041      	str	r1, [r0, #4]
    b708:	6081      	str	r1, [r0, #8]
    b70a:	60c1      	str	r1, [r0, #12]
    b70c:	6101      	str	r1, [r0, #16]
    b70e:	6141      	str	r1, [r0, #20]
    b710:	6181      	str	r1, [r0, #24]
    b712:	61c1      	str	r1, [r0, #28]
    b714:	6201      	str	r1, [r0, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:95
		}
	}
	return;
}
    b716:	4770      	bx	lr

0000b718 <f3x3matrixAeqAxScalar>:
f3x3matrixAeqAxScalar():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:99

// function multiplies all elements of 3x3 matrix A by the specified scalar
void f3x3matrixAeqAxScalar(float A[][3], float Scalar)
{
    b718:	b538      	push	{r3, r4, r5, lr}
    b71a:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:109
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) *= Scalar;
    b71c:	6800      	ldr	r0, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:99
	return;
}

// function multiplies all elements of 3x3 matrix A by the specified scalar
void f3x3matrixAeqAxScalar(float A[][3], float Scalar)
{
    b71e:	1c0d      	adds	r5, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:109
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) *= Scalar;
    b720:	f7f5 fb38 	bl	d94 <__aeabi_fmul>
    b724:	1c29      	adds	r1, r5, #0
    b726:	6020      	str	r0, [r4, #0]
    b728:	6860      	ldr	r0, [r4, #4]
    b72a:	f7f5 fb33 	bl	d94 <__aeabi_fmul>
    b72e:	1c29      	adds	r1, r5, #0
    b730:	6060      	str	r0, [r4, #4]
    b732:	68a0      	ldr	r0, [r4, #8]
    b734:	f7f5 fb2e 	bl	d94 <__aeabi_fmul>
    b738:	1c29      	adds	r1, r5, #0
    b73a:	60a0      	str	r0, [r4, #8]
    b73c:	68e0      	ldr	r0, [r4, #12]
    b73e:	f7f5 fb29 	bl	d94 <__aeabi_fmul>
    b742:	1c29      	adds	r1, r5, #0
    b744:	60e0      	str	r0, [r4, #12]
    b746:	6920      	ldr	r0, [r4, #16]
    b748:	f7f5 fb24 	bl	d94 <__aeabi_fmul>
    b74c:	1c29      	adds	r1, r5, #0
    b74e:	6120      	str	r0, [r4, #16]
    b750:	6960      	ldr	r0, [r4, #20]
    b752:	f7f5 fb1f 	bl	d94 <__aeabi_fmul>
    b756:	1c29      	adds	r1, r5, #0
    b758:	6160      	str	r0, [r4, #20]
    b75a:	69a0      	ldr	r0, [r4, #24]
    b75c:	f7f5 fb1a 	bl	d94 <__aeabi_fmul>
    b760:	1c29      	adds	r1, r5, #0
    b762:	61a0      	str	r0, [r4, #24]
    b764:	69e0      	ldr	r0, [r4, #28]
    b766:	f7f5 fb15 	bl	d94 <__aeabi_fmul>
    b76a:	1c29      	adds	r1, r5, #0
    b76c:	61e0      	str	r0, [r4, #28]
    b76e:	6a20      	ldr	r0, [r4, #32]
    b770:	f7f5 fb10 	bl	d94 <__aeabi_fmul>
    b774:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:114
		}
	}

	return;
}
    b776:	bd38      	pop	{r3, r4, r5, pc}

0000b778 <f3x3matrixAeqMinusA>:
f3x3matrixAeqMinusA():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:128
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*pAij = -*pAij;
    b778:	6801      	ldr	r1, [r0, #0]
    b77a:	2280      	movs	r2, #128	; 0x80
    b77c:	0612      	lsls	r2, r2, #24
    b77e:	188b      	adds	r3, r1, r2
    b780:	6841      	ldr	r1, [r0, #4]
    b782:	6003      	str	r3, [r0, #0]
    b784:	188b      	adds	r3, r1, r2
    b786:	6881      	ldr	r1, [r0, #8]
    b788:	6043      	str	r3, [r0, #4]
    b78a:	188b      	adds	r3, r1, r2
    b78c:	68c1      	ldr	r1, [r0, #12]
    b78e:	6083      	str	r3, [r0, #8]
    b790:	188b      	adds	r3, r1, r2
    b792:	6901      	ldr	r1, [r0, #16]
    b794:	60c3      	str	r3, [r0, #12]
    b796:	188b      	adds	r3, r1, r2
    b798:	6941      	ldr	r1, [r0, #20]
    b79a:	6103      	str	r3, [r0, #16]
    b79c:	188b      	adds	r3, r1, r2
    b79e:	6981      	ldr	r1, [r0, #24]
    b7a0:	6143      	str	r3, [r0, #20]
    b7a2:	188b      	adds	r3, r1, r2
    b7a4:	69c1      	ldr	r1, [r0, #28]
    b7a6:	6183      	str	r3, [r0, #24]
    b7a8:	188b      	adds	r3, r1, r2
    b7aa:	6a01      	ldr	r1, [r0, #32]
    b7ac:	61c3      	str	r3, [r0, #28]
    b7ae:	188b      	adds	r3, r1, r2
    b7b0:	6203      	str	r3, [r0, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:134
			pAij++;
		}
	}

	return;
}
    b7b2:	4770      	bx	lr

0000b7b4 <f3x3matrixAeqInvSymB>:
f3x3matrixAeqInvSymB():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:139

// function directly calculates the symmetric inverse of a symmetric 3x3 matrix
// only the on and above diagonal terms in B are used and need to be specified
void f3x3matrixAeqInvSymB(float A[][3], float B[][3])
{
    b7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b7b6:	465f      	mov	r7, fp
    b7b8:	4656      	mov	r6, sl
    b7ba:	464d      	mov	r5, r9
    b7bc:	4644      	mov	r4, r8
    b7be:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:146
	float fB12B02mB01B22;	// B[1][2] * B[0][2] - B[0][1] * B[2][2]
	float fB01B12mB11B02;	// B[0][1] * B[1][2] - B[1][1] * B[0][2]
	float ftmp;				// determinant and then reciprocal

	// calculate useful products
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
    b7c0:	690b      	ldr	r3, [r1, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:139
}

// function directly calculates the symmetric inverse of a symmetric 3x3 matrix
// only the on and above diagonal terms in B are used and need to be specified
void f3x3matrixAeqInvSymB(float A[][3], float B[][3])
{
    b7c2:	b083      	sub	sp, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:146
	float fB12B02mB01B22;	// B[1][2] * B[0][2] - B[0][1] * B[2][2]
	float fB01B12mB11B02;	// B[0][1] * B[1][2] - B[1][1] * B[0][2]
	float ftmp;				// determinant and then reciprocal

	// calculate useful products
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
    b7c4:	4699      	mov	r9, r3
    b7c6:	6a0b      	ldr	r3, [r1, #32]
    b7c8:	694e      	ldr	r6, [r1, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:139
}

// function directly calculates the symmetric inverse of a symmetric 3x3 matrix
// only the on and above diagonal terms in B are used and need to be specified
void f3x3matrixAeqInvSymB(float A[][3], float B[][3])
{
    b7ca:	1c0d      	adds	r5, r1, #0
    b7cc:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:146
	float fB12B02mB01B22;	// B[1][2] * B[0][2] - B[0][1] * B[2][2]
	float fB01B12mB11B02;	// B[0][1] * B[1][2] - B[1][1] * B[0][2]
	float ftmp;				// determinant and then reciprocal

	// calculate useful products
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
    b7ce:	1c19      	adds	r1, r3, #0
    b7d0:	4648      	mov	r0, r9
    b7d2:	469a      	mov	sl, r3
    b7d4:	f7f5 fade 	bl	d94 <__aeabi_fmul>
    b7d8:	1c31      	adds	r1, r6, #0
    b7da:	1c07      	adds	r7, r0, #0
    b7dc:	1c30      	adds	r0, r6, #0
    b7de:	f7f5 fad9 	bl	d94 <__aeabi_fmul>
    b7e2:	1c01      	adds	r1, r0, #0
    b7e4:	1c38      	adds	r0, r7, #0
    b7e6:	f7f5 fbff 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:147
	fB12B02mB01B22 = B[1][2] * B[0][2] - B[0][1] * B[2][2];
    b7ea:	68af      	ldr	r7, [r5, #8]
    b7ec:	686b      	ldr	r3, [r5, #4]
    b7ee:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:146
	float fB12B02mB01B22;	// B[1][2] * B[0][2] - B[0][1] * B[2][2]
	float fB01B12mB11B02;	// B[0][1] * B[1][2] - B[1][1] * B[0][2]
	float ftmp;				// determinant and then reciprocal

	// calculate useful products
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
    b7f0:	4683      	mov	fp, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:147
	fB12B02mB01B22 = B[1][2] * B[0][2] - B[0][1] * B[2][2];
    b7f2:	1c30      	adds	r0, r6, #0
    b7f4:	4698      	mov	r8, r3
    b7f6:	f7f5 facd 	bl	d94 <__aeabi_fmul>
    b7fa:	4641      	mov	r1, r8
    b7fc:	9001      	str	r0, [sp, #4]
    b7fe:	4650      	mov	r0, sl
    b800:	f7f5 fac8 	bl	d94 <__aeabi_fmul>
    b804:	1c01      	adds	r1, r0, #0
    b806:	9801      	ldr	r0, [sp, #4]
    b808:	f7f5 fbee 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:148
	fB01B12mB11B02 = B[0][1] * B[1][2] - B[1][1] * B[0][2];
    b80c:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:147
	float fB01B12mB11B02;	// B[0][1] * B[1][2] - B[1][1] * B[0][2]
	float ftmp;				// determinant and then reciprocal

	// calculate useful products
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
	fB12B02mB01B22 = B[1][2] * B[0][2] - B[0][1] * B[2][2];
    b80e:	4682      	mov	sl, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:148
	fB01B12mB11B02 = B[0][1] * B[1][2] - B[1][1] * B[0][2];
    b810:	1c30      	adds	r0, r6, #0
    b812:	f7f5 fabf 	bl	d94 <__aeabi_fmul>
    b816:	1c39      	adds	r1, r7, #0
    b818:	1c06      	adds	r6, r0, #0
    b81a:	4648      	mov	r0, r9
    b81c:	f7f5 faba 	bl	d94 <__aeabi_fmul>
    b820:	1c01      	adds	r1, r0, #0
    b822:	1c30      	adds	r0, r6, #0
    b824:	f7f5 fbe0 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:151

	// set ftmp to the determinant of the input matrix B
	ftmp = B[0][0] * fB11B22mB12B12 + B[0][1] * fB12B02mB01B22 + B[0][2] * fB01B12mB11B02;
    b828:	6829      	ldr	r1, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:148
	float ftmp;				// determinant and then reciprocal

	// calculate useful products
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
	fB12B02mB01B22 = B[1][2] * B[0][2] - B[0][1] * B[2][2];
	fB01B12mB11B02 = B[0][1] * B[1][2] - B[1][1] * B[0][2];
    b82a:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:151

	// set ftmp to the determinant of the input matrix B
	ftmp = B[0][0] * fB11B22mB12B12 + B[0][1] * fB12B02mB01B22 + B[0][2] * fB01B12mB11B02;
    b82c:	4658      	mov	r0, fp
    b82e:	f7f5 fab1 	bl	d94 <__aeabi_fmul>
    b832:	4651      	mov	r1, sl
    b834:	1c06      	adds	r6, r0, #0
    b836:	4640      	mov	r0, r8
    b838:	f7f5 faac 	bl	d94 <__aeabi_fmul>
    b83c:	1c01      	adds	r1, r0, #0
    b83e:	1c30      	adds	r0, r6, #0
    b840:	f7f4 ff58 	bl	6f4 <__aeabi_fadd>
    b844:	4649      	mov	r1, r9
    b846:	1c06      	adds	r6, r0, #0
    b848:	1c38      	adds	r0, r7, #0
    b84a:	f7f5 faa3 	bl	d94 <__aeabi_fmul>
    b84e:	1c01      	adds	r1, r0, #0
    b850:	1c30      	adds	r0, r6, #0
    b852:	f7f4 ff4f 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:154

	// set A to the inverse of B for any determinant except zero
	if (ftmp != 0.0F)
    b856:	2600      	movs	r6, #0
    b858:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:151
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
	fB12B02mB01B22 = B[1][2] * B[0][2] - B[0][1] * B[2][2];
	fB01B12mB11B02 = B[0][1] * B[1][2] - B[1][1] * B[0][2];

	// set ftmp to the determinant of the input matrix B
	ftmp = B[0][0] * fB11B22mB12B12 + B[0][1] * fB12B02mB01B22 + B[0][2] * fB01B12mB11B02;
    b85a:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:154

	// set A to the inverse of B for any determinant except zero
	if (ftmp != 0.0F)
    b85c:	f7f4 ff1c 	bl	698 <__aeabi_fcmpeq>
    b860:	2800      	cmp	r0, #0
    b862:	d011      	beq.n	b888 <f3x3matrixAeqInvSymB+0xd4>
f3x3matrixAeqI():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
		}
		A[i][i] = 1.0F;
    b864:	23fe      	movs	r3, #254	; 0xfe
    b866:	059b      	lsls	r3, r3, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:51
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
    b868:	6066      	str	r6, [r4, #4]
    b86a:	60a6      	str	r6, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		}
		A[i][i] = 1.0F;
    b86c:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:51
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
    b86e:	60e6      	str	r6, [r4, #12]
    b870:	6166      	str	r6, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		}
		A[i][i] = 1.0F;
    b872:	6123      	str	r3, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:51
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
    b874:	61a6      	str	r6, [r4, #24]
    b876:	61e6      	str	r6, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		}
		A[i][i] = 1.0F;
    b878:	6223      	str	r3, [r4, #32]
f3x3matrixAeqInvSymB():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:170
	{
		// provide the identity matrix if the determinant is zero
		f3x3matrixAeqI(A);
	}
	return;
}
    b87a:	b003      	add	sp, #12
    b87c:	bc3c      	pop	{r2, r3, r4, r5}
    b87e:	4690      	mov	r8, r2
    b880:	4699      	mov	r9, r3
    b882:	46a2      	mov	sl, r4
    b884:	46ab      	mov	fp, r5
    b886:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:156
	ftmp = B[0][0] * fB11B22mB12B12 + B[0][1] * fB12B02mB01B22 + B[0][2] * fB01B12mB11B02;

	// set A to the inverse of B for any determinant except zero
	if (ftmp != 0.0F)
	{
		ftmp = 1.0F / ftmp;
    b888:	20fe      	movs	r0, #254	; 0xfe
    b88a:	1c39      	adds	r1, r7, #0
    b88c:	0580      	lsls	r0, r0, #22
    b88e:	f7f5 f89d 	bl	9cc <__aeabi_fdiv>
    b892:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:157
		A[0][0] = fB11B22mB12B12 * ftmp;
    b894:	1c31      	adds	r1, r6, #0
    b896:	4658      	mov	r0, fp
    b898:	f7f5 fa7c 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:158
		A[1][0] = A[0][1] = fB12B02mB01B22 * ftmp;
    b89c:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:157

	// set A to the inverse of B for any determinant except zero
	if (ftmp != 0.0F)
	{
		ftmp = 1.0F / ftmp;
		A[0][0] = fB11B22mB12B12 * ftmp;
    b89e:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:158
		A[1][0] = A[0][1] = fB12B02mB01B22 * ftmp;
    b8a0:	4650      	mov	r0, sl
    b8a2:	f7f5 fa77 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:159
		A[2][0] = A[0][2] = fB01B12mB11B02 * ftmp;
    b8a6:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:158
	// set A to the inverse of B for any determinant except zero
	if (ftmp != 0.0F)
	{
		ftmp = 1.0F / ftmp;
		A[0][0] = fB11B22mB12B12 * ftmp;
		A[1][0] = A[0][1] = fB12B02mB01B22 * ftmp;
    b8a8:	6060      	str	r0, [r4, #4]
    b8aa:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:159
		A[2][0] = A[0][2] = fB01B12mB11B02 * ftmp;
    b8ac:	4648      	mov	r0, r9
    b8ae:	f7f5 fa71 	bl	d94 <__aeabi_fmul>
    b8b2:	60a0      	str	r0, [r4, #8]
    b8b4:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:160
		A[1][1] = (B[0][0] * B[2][2] - B[0][2] * B[0][2]) * ftmp;
    b8b6:	682f      	ldr	r7, [r5, #0]
    b8b8:	68ab      	ldr	r3, [r5, #8]
    b8ba:	6a29      	ldr	r1, [r5, #32]
    b8bc:	1c38      	adds	r0, r7, #0
    b8be:	4698      	mov	r8, r3
    b8c0:	f7f5 fa68 	bl	d94 <__aeabi_fmul>
    b8c4:	4641      	mov	r1, r8
    b8c6:	4681      	mov	r9, r0
    b8c8:	4640      	mov	r0, r8
    b8ca:	f7f5 fa63 	bl	d94 <__aeabi_fmul>
    b8ce:	1c01      	adds	r1, r0, #0
    b8d0:	4648      	mov	r0, r9
    b8d2:	f7f5 fb89 	bl	fe8 <__aeabi_fsub>
    b8d6:	1c31      	adds	r1, r6, #0
    b8d8:	f7f5 fa5c 	bl	d94 <__aeabi_fmul>
    b8dc:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:161
		A[2][1] = A[1][2] = (B[0][2] * B[0][1] - B[0][0] * B[1][2]) * ftmp;
    b8de:	6869      	ldr	r1, [r5, #4]
    b8e0:	4640      	mov	r0, r8
    b8e2:	f7f5 fa57 	bl	d94 <__aeabi_fmul>
    b8e6:	6969      	ldr	r1, [r5, #20]
    b8e8:	4680      	mov	r8, r0
    b8ea:	1c38      	adds	r0, r7, #0
    b8ec:	f7f5 fa52 	bl	d94 <__aeabi_fmul>
    b8f0:	1c01      	adds	r1, r0, #0
    b8f2:	4640      	mov	r0, r8
    b8f4:	f7f5 fb78 	bl	fe8 <__aeabi_fsub>
    b8f8:	1c31      	adds	r1, r6, #0
    b8fa:	f7f5 fa4b 	bl	d94 <__aeabi_fmul>
    b8fe:	6160      	str	r0, [r4, #20]
    b900:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:162
		A[2][2] = (B[0][0] * B[1][1] - B[0][1] * B[0][1]) * ftmp;
    b902:	686b      	ldr	r3, [r5, #4]
    b904:	6929      	ldr	r1, [r5, #16]
    b906:	1c38      	adds	r0, r7, #0
    b908:	4698      	mov	r8, r3
    b90a:	f7f5 fa43 	bl	d94 <__aeabi_fmul>
    b90e:	4641      	mov	r1, r8
    b910:	1c05      	adds	r5, r0, #0
    b912:	4640      	mov	r0, r8
    b914:	f7f5 fa3e 	bl	d94 <__aeabi_fmul>
    b918:	1c01      	adds	r1, r0, #0
    b91a:	1c28      	adds	r0, r5, #0
    b91c:	f7f5 fb64 	bl	fe8 <__aeabi_fsub>
    b920:	1c31      	adds	r1, r6, #0
    b922:	f7f5 fa37 	bl	d94 <__aeabi_fmul>
    b926:	6220      	str	r0, [r4, #32]
    b928:	e7a7      	b.n	b87a <f3x3matrixAeqInvSymB+0xc6>
    b92a:	46c0      	nop			; (mov r8, r8)

0000b92c <f3x3matrixDetA>:
f3x3matrixDetA():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:174
	return;
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
    b92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:175
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
    b92e:	6a03      	ldr	r3, [r0, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:174
	return;
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
    b930:	465f      	mov	r7, fp
    b932:	4656      	mov	r6, sl
    b934:	464d      	mov	r5, r9
    b936:	4644      	mov	r4, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:175
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
    b938:	4699      	mov	r9, r3
    b93a:	6943      	ldr	r3, [r0, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:174
	return;
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
    b93c:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:175
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
    b93e:	6906      	ldr	r6, [r0, #16]
    b940:	469a      	mov	sl, r3
    b942:	69c3      	ldr	r3, [r0, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:174
	return;
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
    b944:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:176
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
			A[X][Y] * (A[Y][Z] * A[Z][X] - A[Y][X] * A[Z][Z]) +
    b946:	6985      	ldr	r5, [r0, #24]
    b948:	68c7      	ldr	r7, [r0, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:175
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
    b94a:	4649      	mov	r1, r9
    b94c:	1c30      	adds	r0, r6, #0
    b94e:	4698      	mov	r8, r3
    b950:	f7f5 fa20 	bl	d94 <__aeabi_fmul>
    b954:	4641      	mov	r1, r8
    b956:	4683      	mov	fp, r0
    b958:	4650      	mov	r0, sl
    b95a:	f7f5 fa1b 	bl	d94 <__aeabi_fmul>
    b95e:	1c01      	adds	r1, r0, #0
    b960:	4658      	mov	r0, fp
    b962:	f7f5 fb41 	bl	fe8 <__aeabi_fsub>
    b966:	6821      	ldr	r1, [r4, #0]
    b968:	f7f5 fa14 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:176
			A[X][Y] * (A[Y][Z] * A[Z][X] - A[Y][X] * A[Z][Z]) +
    b96c:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:175
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
    b96e:	4683      	mov	fp, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:176
			A[X][Y] * (A[Y][Z] * A[Z][X] - A[Y][X] * A[Z][Z]) +
    b970:	4650      	mov	r0, sl
    b972:	f7f5 fa0f 	bl	d94 <__aeabi_fmul>
    b976:	1c39      	adds	r1, r7, #0
    b978:	4682      	mov	sl, r0
    b97a:	4648      	mov	r0, r9
    b97c:	f7f5 fa0a 	bl	d94 <__aeabi_fmul>
    b980:	1c01      	adds	r1, r0, #0
    b982:	4650      	mov	r0, sl
    b984:	f7f5 fb30 	bl	fe8 <__aeabi_fsub>
    b988:	6861      	ldr	r1, [r4, #4]
    b98a:	f7f5 fa03 	bl	d94 <__aeabi_fmul>
    b98e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:175
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
    b990:	4658      	mov	r0, fp
    b992:	f7f4 feaf 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:177
			A[X][Y] * (A[Y][Z] * A[Z][X] - A[Y][X] * A[Z][Z]) +
			A[X][Z] * (A[Y][X] * A[Z][Y] - A[Y][Y] * A[Z][X]));
    b996:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:175
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
    b998:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:177
			A[X][Y] * (A[Y][Z] * A[Z][X] - A[Y][X] * A[Z][Z]) +
			A[X][Z] * (A[Y][X] * A[Z][Y] - A[Y][Y] * A[Z][X]));
    b99a:	4640      	mov	r0, r8
    b99c:	f7f5 f9fa 	bl	d94 <__aeabi_fmul>
    b9a0:	1c29      	adds	r1, r5, #0
    b9a2:	1c07      	adds	r7, r0, #0
    b9a4:	1c30      	adds	r0, r6, #0
    b9a6:	f7f5 f9f5 	bl	d94 <__aeabi_fmul>
    b9aa:	1c01      	adds	r1, r0, #0
    b9ac:	1c38      	adds	r0, r7, #0
    b9ae:	f7f5 fb1b 	bl	fe8 <__aeabi_fsub>
    b9b2:	68a1      	ldr	r1, [r4, #8]
    b9b4:	f7f5 f9ee 	bl	d94 <__aeabi_fmul>
    b9b8:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:175
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
    b9ba:	4648      	mov	r0, r9
    b9bc:	f7f4 fe9a 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:178
			A[X][Y] * (A[Y][Z] * A[Z][X] - A[Y][X] * A[Z][Z]) +
			A[X][Z] * (A[Y][X] * A[Z][Y] - A[Y][Y] * A[Z][X]));
}
    b9c0:	bc3c      	pop	{r2, r3, r4, r5}
    b9c2:	4690      	mov	r8, r2
    b9c4:	4699      	mov	r9, r3
    b9c6:	46a2      	mov	sl, r4
    b9c8:	46ab      	mov	fp, r5
    b9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b9cc:	0000      	movs	r0, r0
	...

0000b9d0 <eigencompute>:
eigencompute():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:187
// A[][] is changed on output.
// eigval[0..n-1] returns the eigenvalues of A[][].
// eigvec[0..n-1][0..n-1] returns the normalized eigenvectors of A[][]
// the eigenvectors are not sorted by value
void eigencompute(float A[][10], float eigval[], float eigvec[][10], int8 n)
{
    b9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b9d2:	465f      	mov	r7, fp
    b9d4:	4656      	mov	r6, sl
    b9d6:	464d      	mov	r5, r9
    b9d8:	4644      	mov	r4, r8
    b9da:	b4f0      	push	{r4, r5, r6, r7}
    b9dc:	b095      	sub	sp, #84	; 0x54
    b9de:	9005      	str	r0, [sp, #20]
    b9e0:	910b      	str	r1, [sp, #44]	; 0x2c
    b9e2:	920d      	str	r2, [sp, #52]	; 0x34
    b9e4:	9304      	str	r3, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:205
	int8 j;
	// timeout ctr for number of passes of the algorithm
	int8 ctr;

	// initialize eigenvectors matrix and eigenvalues array
	for (ir = 0; ir < n; ir++)
    b9e6:	2b00      	cmp	r3, #0
    b9e8:	dc00      	bgt.n	b9ec <eigencompute+0x1c>
    b9ea:	e228      	b.n	be3e <eigencompute+0x46e>
    b9ec:	1c18      	adds	r0, r3, #0
    b9ee:	3801      	subs	r0, #1
    b9f0:	b2c3      	uxtb	r3, r0
    b9f2:	1c15      	adds	r5, r2, #0
    b9f4:	3301      	adds	r3, #1
    b9f6:	222c      	movs	r2, #44	; 0x2c
    b9f8:	435a      	muls	r2, r3
    b9fa:	1c0e      	adds	r6, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:211
	{
		// loop over all columns
		for (ic = 0; ic < n; ic++)
		{
			// set on diagonal and off-diagonal elements to zero
			eigvec[ir][ic] = 0.0F;
    b9fc:	9904      	ldr	r1, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:215
		}

		// correct the diagonal elements to 1.0
		eigvec[ir][ir] = 1.0F;
    b9fe:	27fe      	movs	r7, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:211
	{
		// loop over all columns
		for (ic = 0; ic < n; ic++)
		{
			// set on diagonal and off-diagonal elements to zero
			eigvec[ir][ic] = 0.0F;
    ba00:	0089      	lsls	r1, r1, #2
    ba02:	9011      	str	r0, [sp, #68]	; 0x44
    ba04:	4691      	mov	r9, r2
    ba06:	4688      	mov	r8, r1
    ba08:	2400      	movs	r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:215
		}

		// correct the diagonal elements to 1.0
		eigvec[ir][ir] = 1.0F;
    ba0a:	05bf      	lsls	r7, r7, #22
    ba0c:	1c28      	adds	r0, r5, #0
    ba0e:	4642      	mov	r2, r8
    ba10:	2100      	movs	r1, #0
    ba12:	f007 fbc5 	bl	131a0 <memset>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:215 (discriminator 1)
    ba16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:218 (discriminator 1)

		// initialize the array of eigenvalues to the diagonal elements of m
		eigval[ir] = A[ir][ir];
    ba18:	9b05      	ldr	r3, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:215 (discriminator 1)
			// set on diagonal and off-diagonal elements to zero
			eigvec[ir][ic] = 0.0F;
		}

		// correct the diagonal elements to 1.0
		eigvec[ir][ir] = 1.0F;
    ba1a:	5117      	str	r7, [r2, r4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:218 (discriminator 1)

		// initialize the array of eigenvalues to the diagonal elements of m
		eigval[ir] = A[ir][ir];
    ba1c:	591b      	ldr	r3, [r3, r4]
    ba1e:	342c      	adds	r4, #44	; 0x2c
    ba20:	c608      	stmia	r6!, {r3}
    ba22:	3528      	adds	r5, #40	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:205 (discriminator 1)
	int8 j;
	// timeout ctr for number of passes of the algorithm
	int8 ctr;

	// initialize eigenvectors matrix and eigenvalues array
	for (ir = 0; ir < n; ir++)
    ba24:	454c      	cmp	r4, r9
    ba26:	d1f1      	bne.n	ba0c <eigencompute+0x3c>
    ba28:	9811      	ldr	r0, [sp, #68]	; 0x44
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:211
	{
		// loop over all columns
		for (ic = 0; ic < n; ic++)
		{
			// set on diagonal and off-diagonal elements to zero
			eigvec[ir][ic] = 0.0F;
    ba2a:	2110      	movs	r1, #16
    ba2c:	b2c3      	uxtb	r3, r0
    ba2e:	009a      	lsls	r2, r3, #2
    ba30:	18d3      	adds	r3, r2, r3
    ba32:	005b      	lsls	r3, r3, #1
    ba34:	9310      	str	r3, [sp, #64]	; 0x40
    ba36:	9113      	str	r1, [sp, #76]	; 0x4c
    ba38:	9b05      	ldr	r3, [sp, #20]
    ba3a:	9911      	ldr	r1, [sp, #68]	; 0x44
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:226
	// initialize the counter and loop until converged or NITERATIONS reached
	ctr = 0;
	do
	{
		// compute the absolute value of the above diagonal elements as exit criterion
		residue = 0.0F;
    ba3c:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:228
		// loop over rows excluding last row
		for (ir = 0; ir < n - 1; ir++)
    ba3e:	2600      	movs	r6, #0
    ba40:	9d04      	ldr	r5, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:226
	// initialize the counter and loop until converged or NITERATIONS reached
	ctr = 0;
	do
	{
		// compute the absolute value of the above diagonal elements as exit criterion
		residue = 0.0F;
    ba42:	9212      	str	r2, [sp, #72]	; 0x48
    ba44:	1c37      	adds	r7, r6, #0
    ba46:	1c10      	adds	r0, r2, #0
    ba48:	4699      	mov	r9, r3
    ba4a:	4688      	mov	r8, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:228 (discriminator 1)
		// loop over rows excluding last row
		for (ir = 0; ir < n - 1; ir++)
    ba4c:	b27a      	sxtb	r2, r7
    ba4e:	4542      	cmp	r2, r8
    ba50:	da17      	bge.n	ba82 <eigencompute+0xb2>
    ba52:	3701      	adds	r7, #1
    ba54:	b2ff      	uxtb	r7, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:231
		{
			// loop over above diagonal columns
			for (ic = ir + 1; ic < n; ic++)
    ba56:	b27b      	sxtb	r3, r7
    ba58:	429d      	cmp	r5, r3
    ba5a:	ddf7      	ble.n	ba4c <eigencompute+0x7c>
    ba5c:	0096      	lsls	r6, r2, #2
    ba5e:	18b6      	adds	r6, r6, r2
    ba60:	00f6      	lsls	r6, r6, #3
    ba62:	444e      	add	r6, r9
    ba64:	1c3c      	adds	r4, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:234 (discriminator 2)
			{
				// accumulate the residual off diagonal terms which are being driven to zero
				residue += fabs(A[ir][ic]);
    ba66:	009b      	lsls	r3, r3, #2
    ba68:	5999      	ldr	r1, [r3, r6]
    ba6a:	3401      	adds	r4, #1
    ba6c:	0049      	lsls	r1, r1, #1
    ba6e:	0849      	lsrs	r1, r1, #1
    ba70:	b2e4      	uxtb	r4, r4
    ba72:	f7f4 fe3f 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:231 (discriminator 2)
		residue = 0.0F;
		// loop over rows excluding last row
		for (ir = 0; ir < n - 1; ir++)
		{
			// loop over above diagonal columns
			for (ic = ir + 1; ic < n; ic++)
    ba76:	b263      	sxtb	r3, r4
    ba78:	429d      	cmp	r5, r3
    ba7a:	dcf4      	bgt.n	ba66 <eigencompute+0x96>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:228
	do
	{
		// compute the absolute value of the above diagonal elements as exit criterion
		residue = 0.0F;
		// loop over rows excluding last row
		for (ir = 0; ir < n - 1; ir++)
    ba7c:	b27a      	sxtb	r2, r7
    ba7e:	4542      	cmp	r2, r8
    ba80:	dbe7      	blt.n	ba52 <eigencompute+0x82>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:239
				residue += fabs(A[ir][ic]);
			}
		}

		// check if we still have work to do
		if (residue > 0.0F)
    ba82:	2100      	movs	r1, #0
    ba84:	9012      	str	r0, [sp, #72]	; 0x48
    ba86:	f7f4 fe21 	bl	6cc <__aeabi_fcmpgt>
    ba8a:	2200      	movs	r2, #0
    ba8c:	2800      	cmp	r0, #0
    ba8e:	d100      	bne.n	ba92 <eigencompute+0xc2>
    ba90:	e1bb      	b.n	be0a <eigencompute+0x43a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:242 (discriminator 1)
		{
			// loop over all rows with the exception of the last row (since only rotating above diagonal elements)
			for (ir = 0; ir < n - 1; ir++)
    ba92:	9811      	ldr	r0, [sp, #68]	; 0x44
    ba94:	b253      	sxtb	r3, r2
    ba96:	4283      	cmp	r3, r0
    ba98:	db00      	blt.n	ba9c <eigencompute+0xcc>
    ba9a:	e1b6      	b.n	be0a <eigencompute+0x43a>
    ba9c:	3201      	adds	r2, #1
    ba9e:	b2d2      	uxtb	r2, r2
    baa0:	b2d0      	uxtb	r0, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:245
			{
				// loop over columns ic (where ic is always greater than ir since above diagonal)
				for (ic = ir + 1; ic < n; ic++)
    baa2:	b241      	sxtb	r1, r0
    baa4:	9009      	str	r0, [sp, #36]	; 0x24
    baa6:	9804      	ldr	r0, [sp, #16]
    baa8:	910a      	str	r1, [sp, #40]	; 0x28
    baaa:	4288      	cmp	r0, r1
    baac:	dc00      	bgt.n	bab0 <eigencompute+0xe0>
    baae:	e1a6      	b.n	bdfe <eigencompute+0x42e>
    bab0:	0099      	lsls	r1, r3, #2
    bab2:	468b      	mov	fp, r1
    bab4:	9805      	ldr	r0, [sp, #20]
    bab6:	445b      	add	r3, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:251
				{
					// only continue with this element if the element is non-zero
					if (fabs(A[ir][ic]) > 0.0F)
					{
						// calculate cot(2*phi) where phi is the Jacobi rotation angle
						cot2phi = 0.5F * (eigval[ic] - eigval[ir]) / (A[ir][ic]);
    bab8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    baba:	00db      	lsls	r3, r3, #3
    babc:	18c3      	adds	r3, r0, r3
    babe:	9301      	str	r3, [sp, #4]
    bac0:	1c0b      	adds	r3, r1, #0
    bac2:	445b      	add	r3, fp
    bac4:	9307      	str	r3, [sp, #28]
    bac6:	1e53      	subs	r3, r2, #1
    bac8:	3a02      	subs	r2, #2
    baca:	b2d2      	uxtb	r2, r2
    bacc:	0091      	lsls	r1, r2, #2
    bace:	188a      	adds	r2, r1, r2
    bad0:	0052      	lsls	r2, r2, #1
    bad2:	920e      	str	r2, [sp, #56]	; 0x38
    bad4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bad6:	9809      	ldr	r0, [sp, #36]	; 0x24
    bad8:	990a      	ldr	r1, [sp, #40]	; 0x28
    bada:	3228      	adds	r2, #40	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:291
							// eigvec[j][ic] = eigvec[j][ic] + sin(phi) * (eigvec[j][ir] - tan(phi/2) * eigvec[j][ic])
							eigvec[j][ic] = eigvec[j][ic] + sinphi * (ftmp - tanhalfphi * eigvec[j][ic]);
						}

						// apply the jacobi rotation only to those elements of matrix m that can change
						for (j = 0; j <= ir - 1; j++)
    badc:	b25b      	sxtb	r3, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:251
				{
					// only continue with this element if the element is non-zero
					if (fabs(A[ir][ic]) > 0.0F)
					{
						// calculate cot(2*phi) where phi is the Jacobi rotation angle
						cot2phi = 0.5F * (eigval[ic] - eigval[ir]) / (A[ir][ic]);
    bade:	9006      	str	r0, [sp, #24]
    bae0:	9103      	str	r1, [sp, #12]
    bae2:	920f      	str	r2, [sp, #60]	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:291
							// eigvec[j][ic] = eigvec[j][ic] + sin(phi) * (eigvec[j][ir] - tan(phi/2) * eigvec[j][ic])
							eigvec[j][ic] = eigvec[j][ic] + sinphi * (ftmp - tanhalfphi * eigvec[j][ic]);
						}

						// apply the jacobi rotation only to those elements of matrix m that can change
						for (j = 0; j <= ir - 1; j++)
    bae4:	930c      	str	r3, [sp, #48]	; 0x30
    bae6:	465f      	mov	r7, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:248
			{
				// loop over columns ic (where ic is always greater than ir since above diagonal)
				for (ic = ir + 1; ic < n; ic++)
				{
					// only continue with this element if the element is non-zero
					if (fabs(A[ir][ic]) > 0.0F)
    bae8:	9b03      	ldr	r3, [sp, #12]
    baea:	9901      	ldr	r1, [sp, #4]
    baec:	0098      	lsls	r0, r3, #2
    baee:	180e      	adds	r6, r1, r0
    baf0:	6834      	ldr	r4, [r6, #0]
    baf2:	9002      	str	r0, [sp, #8]
    baf4:	0060      	lsls	r0, r4, #1
    baf6:	0840      	lsrs	r0, r0, #1
    baf8:	2100      	movs	r1, #0
    bafa:	9308      	str	r3, [sp, #32]
    bafc:	f7f4 fde6 	bl	6cc <__aeabi_fcmpgt>
    bb00:	2800      	cmp	r0, #0
    bb02:	d100      	bne.n	bb06 <eigencompute+0x136>
    bb04:	e171      	b.n	bdea <eigencompute+0x41a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:251
					{
						// calculate cot(2*phi) where phi is the Jacobi rotation angle
						cot2phi = 0.5F * (eigval[ic] - eigval[ir]) / (A[ir][ic]);
    bb06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    bb08:	4692      	mov	sl, r2
    bb0a:	9a02      	ldr	r2, [sp, #8]
    bb0c:	4492      	add	sl, r2
    bb0e:	9a07      	ldr	r2, [sp, #28]
    bb10:	4653      	mov	r3, sl
    bb12:	6811      	ldr	r1, [r2, #0]
    bb14:	6818      	ldr	r0, [r3, #0]
    bb16:	f7f5 fa67 	bl	fe8 <__aeabi_fsub>
    bb1a:	21fc      	movs	r1, #252	; 0xfc
    bb1c:	0589      	lsls	r1, r1, #22
    bb1e:	f7f5 f939 	bl	d94 <__aeabi_fmul>
    bb22:	1c21      	adds	r1, r4, #0
    bb24:	f7f4 ff52 	bl	9cc <__aeabi_fdiv>
    bb28:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:254

						// calculate tan(phi) correcting sign to ensure the smaller solution is used
						tanphi = 1.0F / (fabs(cot2phi) + sqrtf(1.0F + cot2phi * cot2phi));
    bb2a:	4649      	mov	r1, r9
    bb2c:	f7f5 f932 	bl	d94 <__aeabi_fmul>
    bb30:	21fe      	movs	r1, #254	; 0xfe
    bb32:	0589      	lsls	r1, r1, #22
    bb34:	f7f4 fdde 	bl	6f4 <__aeabi_fadd>
    bb38:	f005 fdc2 	bl	116c0 <sqrtf>
    bb3c:	464b      	mov	r3, r9
    bb3e:	4680      	mov	r8, r0
    bb40:	0058      	lsls	r0, r3, #1
    bb42:	0840      	lsrs	r0, r0, #1
    bb44:	f7f6 ff02 	bl	294c <__aeabi_f2d>
    bb48:	1c04      	adds	r4, r0, #0
    bb4a:	4640      	mov	r0, r8
    bb4c:	1c0d      	adds	r5, r1, #0
    bb4e:	f7f6 fefd 	bl	294c <__aeabi_f2d>
    bb52:	1c02      	adds	r2, r0, #0
    bb54:	1c0b      	adds	r3, r1, #0
    bb56:	1c20      	adds	r0, r4, #0
    bb58:	1c29      	adds	r1, r5, #0
    bb5a:	f7f5 fc37 	bl	13cc <__aeabi_dadd>
    bb5e:	1c02      	adds	r2, r0, #0
    bb60:	1c0b      	adds	r3, r1, #0
    bb62:	49ba      	ldr	r1, [pc, #744]	; (be4c <eigencompute+0x47c>)
    bb64:	48b8      	ldr	r0, [pc, #736]	; (be48 <eigencompute+0x478>)
    bb66:	f7f5 ff53 	bl	1a10 <__aeabi_ddiv>
    bb6a:	f7f6 ff41 	bl	29f0 <__aeabi_d2f>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:255
						if (cot2phi < 0.0F)
    bb6e:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:254
					{
						// calculate cot(2*phi) where phi is the Jacobi rotation angle
						cot2phi = 0.5F * (eigval[ic] - eigval[ir]) / (A[ir][ic]);

						// calculate tan(phi) correcting sign to ensure the smaller solution is used
						tanphi = 1.0F / (fabs(cot2phi) + sqrtf(1.0F + cot2phi * cot2phi));
    bb70:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:255
						if (cot2phi < 0.0F)
    bb72:	4648      	mov	r0, r9
    bb74:	f7f4 fd96 	bl	6a4 <__aeabi_fcmplt>
    bb78:	2800      	cmp	r0, #0
    bb7a:	d000      	beq.n	bb7e <eigencompute+0x1ae>
    bb7c:	e159      	b.n	be32 <eigencompute+0x462>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:261
						{
							tanphi = -tanphi;
						}

						// calculate the sine and cosine of the Jacobi rotation angle phi
						cosphi = 1.0F / sqrtf(1.0F + tanphi * tanphi);
    bb7e:	4641      	mov	r1, r8
    bb80:	4640      	mov	r0, r8
    bb82:	f7f5 f907 	bl	d94 <__aeabi_fmul>
    bb86:	21fe      	movs	r1, #254	; 0xfe
    bb88:	0589      	lsls	r1, r1, #22
    bb8a:	f7f4 fdb3 	bl	6f4 <__aeabi_fadd>
    bb8e:	f005 fd97 	bl	116c0 <sqrtf>
    bb92:	1c01      	adds	r1, r0, #0
    bb94:	20fe      	movs	r0, #254	; 0xfe
    bb96:	0580      	lsls	r0, r0, #22
    bb98:	f7f4 ff18 	bl	9cc <__aeabi_fdiv>
    bb9c:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:262
						sinphi = tanphi * cosphi;
    bb9e:	1c29      	adds	r1, r5, #0
    bba0:	4640      	mov	r0, r8
    bba2:	f7f5 f8f7 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:265

						// calculate tan(phi/2)
						tanhalfphi = sinphi / (1.0F + cosphi);
    bba6:	21fe      	movs	r1, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:262
							tanphi = -tanphi;
						}

						// calculate the sine and cosine of the Jacobi rotation angle phi
						cosphi = 1.0F / sqrtf(1.0F + tanphi * tanphi);
						sinphi = tanphi * cosphi;
    bba8:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:265

						// calculate tan(phi/2)
						tanhalfphi = sinphi / (1.0F + cosphi);
    bbaa:	0589      	lsls	r1, r1, #22
    bbac:	1c28      	adds	r0, r5, #0
    bbae:	f7f4 fda1 	bl	6f4 <__aeabi_fadd>
    bbb2:	1c01      	adds	r1, r0, #0
    bbb4:	1c20      	adds	r0, r4, #0
    bbb6:	f7f4 ff09 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:268

						// set tmp = tan(phi) times current matrix element used in update of leading diagonal elements
						ftmp = tanphi * A[ir][ic];
    bbba:	6831      	ldr	r1, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:265
						// calculate the sine and cosine of the Jacobi rotation angle phi
						cosphi = 1.0F / sqrtf(1.0F + tanphi * tanphi);
						sinphi = tanphi * cosphi;

						// calculate tan(phi/2)
						tanhalfphi = sinphi / (1.0F + cosphi);
    bbbc:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:268

						// set tmp = tan(phi) times current matrix element used in update of leading diagonal elements
						ftmp = tanphi * A[ir][ic];
    bbbe:	4640      	mov	r0, r8
    bbc0:	f7f5 f8e8 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:272

						// apply the jacobi rotation to diagonal elements [ir][ir] and [ic][ic] stored in the eigenvalue array
						// eigval[ir] = eigval[ir] - tan(phi) *  A[ir][ic]
						eigval[ir] -= ftmp;
    bbc4:	9907      	ldr	r1, [sp, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:268

						// calculate tan(phi/2)
						tanhalfphi = sinphi / (1.0F + cosphi);

						// set tmp = tan(phi) times current matrix element used in update of leading diagonal elements
						ftmp = tanphi * A[ir][ic];
    bbc6:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:272

						// apply the jacobi rotation to diagonal elements [ir][ir] and [ic][ic] stored in the eigenvalue array
						// eigval[ir] = eigval[ir] - tan(phi) *  A[ir][ic]
						eigval[ir] -= ftmp;
    bbc8:	6808      	ldr	r0, [r1, #0]
    bbca:	4641      	mov	r1, r8
    bbcc:	f7f5 fa0c 	bl	fe8 <__aeabi_fsub>
    bbd0:	9a07      	ldr	r2, [sp, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:274
						// eigval[ic] = eigval[ic] + tan(phi) * A[ir][ic]
						eigval[ic] += ftmp;
    bbd2:	4653      	mov	r3, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:272
						// set tmp = tan(phi) times current matrix element used in update of leading diagonal elements
						ftmp = tanphi * A[ir][ic];

						// apply the jacobi rotation to diagonal elements [ir][ir] and [ic][ic] stored in the eigenvalue array
						// eigval[ir] = eigval[ir] - tan(phi) *  A[ir][ic]
						eigval[ir] -= ftmp;
    bbd4:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:274
						// eigval[ic] = eigval[ic] + tan(phi) * A[ir][ic]
						eigval[ic] += ftmp;
    bbd6:	6818      	ldr	r0, [r3, #0]
    bbd8:	4641      	mov	r1, r8
    bbda:	f7f4 fd8b 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:280

						// by definition, applying the jacobi rotation on element ir, ic results in 0.0
						A[ir][ic] = 0.0F;

						// apply the jacobi rotation to all elements of the eigenvector matrix
						for (j = 0; j < n; j++)
    bbde:	9b04      	ldr	r3, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:274

						// apply the jacobi rotation to diagonal elements [ir][ir] and [ic][ic] stored in the eigenvalue array
						// eigval[ir] = eigval[ir] - tan(phi) *  A[ir][ic]
						eigval[ir] -= ftmp;
						// eigval[ic] = eigval[ic] + tan(phi) * A[ir][ic]
						eigval[ic] += ftmp;
    bbe0:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:277

						// by definition, applying the jacobi rotation on element ir, ic results in 0.0
						A[ir][ic] = 0.0F;
    bbe2:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:274

						// apply the jacobi rotation to diagonal elements [ir][ir] and [ic][ic] stored in the eigenvalue array
						// eigval[ir] = eigval[ir] - tan(phi) *  A[ir][ic]
						eigval[ir] -= ftmp;
						// eigval[ic] = eigval[ic] + tan(phi) * A[ir][ic]
						eigval[ic] += ftmp;
    bbe4:	6008      	str	r0, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:277

						// by definition, applying the jacobi rotation on element ir, ic results in 0.0
						A[ir][ic] = 0.0F;
    bbe6:	6032      	str	r2, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:280

						// apply the jacobi rotation to all elements of the eigenvector matrix
						for (j = 0; j < n; j++)
    bbe8:	2b00      	cmp	r3, #0
    bbea:	dd3a      	ble.n	bc62 <eigencompute+0x292>
    bbec:	990d      	ldr	r1, [sp, #52]	; 0x34
    bbee:	9a02      	ldr	r2, [sp, #8]
    bbf0:	9803      	ldr	r0, [sp, #12]
    bbf2:	188e      	adds	r6, r1, r2
    bbf4:	9910      	ldr	r1, [sp, #64]	; 0x40
    bbf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    bbf8:	1843      	adds	r3, r0, r1
    bbfa:	009b      	lsls	r3, r3, #2
    bbfc:	18d2      	adds	r2, r2, r3
    bbfe:	0083      	lsls	r3, r0, #2
    bc00:	425b      	negs	r3, r3
    bc02:	46b9      	mov	r9, r7
    bc04:	4693      	mov	fp, r2
    bc06:	469a      	mov	sl, r3
    bc08:	46a8      	mov	r8, r5
    bc0a:	1c27      	adds	r7, r4, #0
    bc0c:	4653      	mov	r3, sl
    bc0e:	18f5      	adds	r5, r6, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:283 (discriminator 2)
						{
							// store eigvec[j][ir]
							ftmp = eigvec[j][ir];
    bc10:	4648      	mov	r0, r9
    bc12:	582c      	ldr	r4, [r5, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:285 (discriminator 2)
							// eigvec[j][ir] = eigvec[j][ir] - sin(phi) * (eigvec[j][ic] + tan(phi/2) * eigvec[j][ir])
							eigvec[j][ir] = ftmp - sinphi * (eigvec[j][ic] + tanhalfphi * ftmp);
    bc14:	4640      	mov	r0, r8
    bc16:	1c21      	adds	r1, r4, #0
    bc18:	f7f5 f8bc 	bl	d94 <__aeabi_fmul>
    bc1c:	6831      	ldr	r1, [r6, #0]
    bc1e:	f7f4 fd69 	bl	6f4 <__aeabi_fadd>
    bc22:	1c39      	adds	r1, r7, #0
    bc24:	f7f5 f8b6 	bl	d94 <__aeabi_fmul>
    bc28:	1c01      	adds	r1, r0, #0
    bc2a:	1c20      	adds	r0, r4, #0
    bc2c:	f7f5 f9dc 	bl	fe8 <__aeabi_fsub>
    bc30:	4649      	mov	r1, r9
    bc32:	5068      	str	r0, [r5, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:287 (discriminator 2)
							// eigvec[j][ic] = eigvec[j][ic] + sin(phi) * (eigvec[j][ir] - tan(phi/2) * eigvec[j][ic])
							eigvec[j][ic] = eigvec[j][ic] + sinphi * (ftmp - tanhalfphi * eigvec[j][ic]);
    bc34:	6835      	ldr	r5, [r6, #0]
    bc36:	4641      	mov	r1, r8
    bc38:	1c28      	adds	r0, r5, #0
    bc3a:	f7f5 f8ab 	bl	d94 <__aeabi_fmul>
    bc3e:	1c01      	adds	r1, r0, #0
    bc40:	1c20      	adds	r0, r4, #0
    bc42:	f7f5 f9d1 	bl	fe8 <__aeabi_fsub>
    bc46:	1c39      	adds	r1, r7, #0
    bc48:	f7f5 f8a4 	bl	d94 <__aeabi_fmul>
    bc4c:	1c01      	adds	r1, r0, #0
    bc4e:	1c28      	adds	r0, r5, #0
    bc50:	f7f4 fd50 	bl	6f4 <__aeabi_fadd>
    bc54:	6030      	str	r0, [r6, #0]
    bc56:	3628      	adds	r6, #40	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:280 (discriminator 2)

						// by definition, applying the jacobi rotation on element ir, ic results in 0.0
						A[ir][ic] = 0.0F;

						// apply the jacobi rotation to all elements of the eigenvector matrix
						for (j = 0; j < n; j++)
    bc58:	455e      	cmp	r6, fp
    bc5a:	d1d7      	bne.n	bc0c <eigencompute+0x23c>
    bc5c:	1c3c      	adds	r4, r7, #0
    bc5e:	4645      	mov	r5, r8
    bc60:	464f      	mov	r7, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:291
							// eigvec[j][ic] = eigvec[j][ic] + sin(phi) * (eigvec[j][ir] - tan(phi/2) * eigvec[j][ic])
							eigvec[j][ic] = eigvec[j][ic] + sinphi * (ftmp - tanhalfphi * eigvec[j][ic]);
						}

						// apply the jacobi rotation only to those elements of matrix m that can change
						for (j = 0; j <= ir - 1; j++)
    bc62:	980c      	ldr	r0, [sp, #48]	; 0x30
    bc64:	2800      	cmp	r0, #0
    bc66:	dd3c      	ble.n	bce2 <eigencompute+0x312>
    bc68:	9805      	ldr	r0, [sp, #20]
    bc6a:	9902      	ldr	r1, [sp, #8]
    bc6c:	9a03      	ldr	r2, [sp, #12]
    bc6e:	1846      	adds	r6, r0, r1
    bc70:	980e      	ldr	r0, [sp, #56]	; 0x38
    bc72:	9903      	ldr	r1, [sp, #12]
    bc74:	1813      	adds	r3, r2, r0
    bc76:	9a05      	ldr	r2, [sp, #20]
    bc78:	009b      	lsls	r3, r3, #2
    bc7a:	3228      	adds	r2, #40	; 0x28
    bc7c:	18d2      	adds	r2, r2, r3
    bc7e:	008b      	lsls	r3, r1, #2
    bc80:	425b      	negs	r3, r3
    bc82:	46b9      	mov	r9, r7
    bc84:	4693      	mov	fp, r2
    bc86:	469a      	mov	sl, r3
    bc88:	46a8      	mov	r8, r5
    bc8a:	1c27      	adds	r7, r4, #0
    bc8c:	4652      	mov	r2, sl
    bc8e:	18b5      	adds	r5, r6, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:294 (discriminator 2)
						{
							// store A[j][ir]
							ftmp = A[j][ir];
    bc90:	464b      	mov	r3, r9
    bc92:	58ec      	ldr	r4, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:296 (discriminator 2)
							// A[j][ir] = A[j][ir] - sin(phi) * (A[j][ic] + tan(phi/2) * A[j][ir])
							A[j][ir] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
    bc94:	4640      	mov	r0, r8
    bc96:	1c21      	adds	r1, r4, #0
    bc98:	f7f5 f87c 	bl	d94 <__aeabi_fmul>
    bc9c:	6831      	ldr	r1, [r6, #0]
    bc9e:	f7f4 fd29 	bl	6f4 <__aeabi_fadd>
    bca2:	1c39      	adds	r1, r7, #0
    bca4:	f7f5 f876 	bl	d94 <__aeabi_fmul>
    bca8:	1c01      	adds	r1, r0, #0
    bcaa:	1c20      	adds	r0, r4, #0
    bcac:	f7f5 f99c 	bl	fe8 <__aeabi_fsub>
    bcb0:	4649      	mov	r1, r9
    bcb2:	5068      	str	r0, [r5, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:298 (discriminator 2)
							// A[j][ic] = A[j][ic] + sin(phi) * (A[j][ir] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
    bcb4:	6835      	ldr	r5, [r6, #0]
    bcb6:	4641      	mov	r1, r8
    bcb8:	1c28      	adds	r0, r5, #0
    bcba:	f7f5 f86b 	bl	d94 <__aeabi_fmul>
    bcbe:	1c01      	adds	r1, r0, #0
    bcc0:	1c20      	adds	r0, r4, #0
    bcc2:	f7f5 f991 	bl	fe8 <__aeabi_fsub>
    bcc6:	1c39      	adds	r1, r7, #0
    bcc8:	f7f5 f864 	bl	d94 <__aeabi_fmul>
    bccc:	1c01      	adds	r1, r0, #0
    bcce:	1c28      	adds	r0, r5, #0
    bcd0:	f7f4 fd10 	bl	6f4 <__aeabi_fadd>
    bcd4:	6030      	str	r0, [r6, #0]
    bcd6:	3628      	adds	r6, #40	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:291 (discriminator 2)
							// eigvec[j][ic] = eigvec[j][ic] + sin(phi) * (eigvec[j][ir] - tan(phi/2) * eigvec[j][ic])
							eigvec[j][ic] = eigvec[j][ic] + sinphi * (ftmp - tanhalfphi * eigvec[j][ic]);
						}

						// apply the jacobi rotation only to those elements of matrix m that can change
						for (j = 0; j <= ir - 1; j++)
    bcd8:	455e      	cmp	r6, fp
    bcda:	d1d7      	bne.n	bc8c <eigencompute+0x2bc>
    bcdc:	1c3c      	adds	r4, r7, #0
    bcde:	4645      	mov	r5, r8
    bce0:	464f      	mov	r7, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:300
							// A[j][ir] = A[j][ir] - sin(phi) * (A[j][ic] + tan(phi/2) * A[j][ir])
							A[j][ir] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
							// A[j][ic] = A[j][ic] + sin(phi) * (A[j][ir] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
						}
						for (j = ir + 1; j <= ic - 1; j++)
    bce2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bce4:	9b03      	ldr	r3, [sp, #12]
    bce6:	429a      	cmp	r2, r3
    bce8:	da3a      	bge.n	bd60 <eigencompute+0x390>
    bcea:	9809      	ldr	r0, [sp, #36]	; 0x24
    bcec:	1c2a      	adds	r2, r5, #0
    bcee:	b243      	sxtb	r3, r0
    bcf0:	1c05      	adds	r5, r0, #0
    bcf2:	9803      	ldr	r0, [sp, #12]
    bcf4:	46a0      	mov	r8, r4
    bcf6:	46bb      	mov	fp, r7
    bcf8:	4682      	mov	sl, r0
    bcfa:	4691      	mov	r9, r2
    bcfc:	9901      	ldr	r1, [sp, #4]
    bcfe:	009e      	lsls	r6, r3, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:305 (discriminator 2)
						{
							// store A[ir][j]
							ftmp = A[ir][j];
							// A[ir][j] = A[ir][j] - sin(phi) * (A[j][ic] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
    bd00:	9a05      	ldr	r2, [sp, #20]
    bd02:	198f      	adds	r7, r1, r6
    bd04:	18f6      	adds	r6, r6, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:303 (discriminator 2)
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
						}
						for (j = ir + 1; j <= ic - 1; j++)
						{
							// store A[ir][j]
							ftmp = A[ir][j];
    bd06:	683c      	ldr	r4, [r7, #0]
    bd08:	9b02      	ldr	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:305 (discriminator 2)
							// A[ir][j] = A[ir][j] - sin(phi) * (A[j][ic] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
    bd0a:	00f6      	lsls	r6, r6, #3
    bd0c:	1996      	adds	r6, r2, r6
    bd0e:	18f6      	adds	r6, r6, r3
    bd10:	1c21      	adds	r1, r4, #0
    bd12:	4648      	mov	r0, r9
    bd14:	f7f5 f83e 	bl	d94 <__aeabi_fmul>
    bd18:	6831      	ldr	r1, [r6, #0]
    bd1a:	f7f4 fceb 	bl	6f4 <__aeabi_fadd>
    bd1e:	4641      	mov	r1, r8
    bd20:	f7f5 f838 	bl	d94 <__aeabi_fmul>
    bd24:	1c01      	adds	r1, r0, #0
    bd26:	1c20      	adds	r0, r4, #0
    bd28:	f7f5 f95e 	bl	fe8 <__aeabi_fsub>
    bd2c:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:307 (discriminator 2)
							// A[j][ic] = A[j][ic] + sin(phi) * (A[ir][j] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
    bd2e:	6837      	ldr	r7, [r6, #0]
    bd30:	4649      	mov	r1, r9
    bd32:	1c38      	adds	r0, r7, #0
    bd34:	f7f5 f82e 	bl	d94 <__aeabi_fmul>
    bd38:	1c01      	adds	r1, r0, #0
    bd3a:	1c20      	adds	r0, r4, #0
    bd3c:	f7f5 f954 	bl	fe8 <__aeabi_fsub>
    bd40:	4641      	mov	r1, r8
    bd42:	f7f5 f827 	bl	d94 <__aeabi_fmul>
    bd46:	1c01      	adds	r1, r0, #0
    bd48:	1c38      	adds	r0, r7, #0
    bd4a:	f7f4 fcd3 	bl	6f4 <__aeabi_fadd>
    bd4e:	3501      	adds	r5, #1
    bd50:	b2ed      	uxtb	r5, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:300 (discriminator 2)
							// A[j][ir] = A[j][ir] - sin(phi) * (A[j][ic] + tan(phi/2) * A[j][ir])
							A[j][ir] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
							// A[j][ic] = A[j][ic] + sin(phi) * (A[j][ir] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
						}
						for (j = ir + 1; j <= ic - 1; j++)
    bd52:	b26b      	sxtb	r3, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:307 (discriminator 2)
							// store A[ir][j]
							ftmp = A[ir][j];
							// A[ir][j] = A[ir][j] - sin(phi) * (A[j][ic] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
							// A[j][ic] = A[j][ic] + sin(phi) * (A[ir][j] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
    bd54:	6030      	str	r0, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:300 (discriminator 2)
							// A[j][ir] = A[j][ir] - sin(phi) * (A[j][ic] + tan(phi/2) * A[j][ir])
							A[j][ir] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
							// A[j][ic] = A[j][ic] + sin(phi) * (A[j][ir] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
						}
						for (j = ir + 1; j <= ic - 1; j++)
    bd56:	4553      	cmp	r3, sl
    bd58:	dbd0      	blt.n	bcfc <eigencompute+0x32c>
    bd5a:	4644      	mov	r4, r8
    bd5c:	464d      	mov	r5, r9
    bd5e:	465f      	mov	r7, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:309
							// A[ir][j] = A[ir][j] - sin(phi) * (A[j][ic] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
							// A[j][ic] = A[j][ic] + sin(phi) * (A[ir][j] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
						}
						for (j = ic + 1; j < n; j++)
    bd60:	9b06      	ldr	r3, [sp, #24]
    bd62:	3301      	adds	r3, #1
    bd64:	b2db      	uxtb	r3, r3
    bd66:	b25a      	sxtb	r2, r3
    bd68:	9306      	str	r3, [sp, #24]
    bd6a:	9b04      	ldr	r3, [sp, #16]
    bd6c:	9203      	str	r2, [sp, #12]
    bd6e:	4293      	cmp	r3, r2
    bd70:	dd45      	ble.n	bdfe <eigencompute+0x42e>
    bd72:	9802      	ldr	r0, [sp, #8]
    bd74:	9908      	ldr	r1, [sp, #32]
    bd76:	1c16      	adds	r6, r2, #0
    bd78:	1843      	adds	r3, r0, r1
    bd7a:	9a05      	ldr	r2, [sp, #20]
    bd7c:	00db      	lsls	r3, r3, #3
    bd7e:	18d2      	adds	r2, r2, r3
    bd80:	9b06      	ldr	r3, [sp, #24]
    bd82:	4693      	mov	fp, r2
    bd84:	4699      	mov	r9, r3
    bd86:	1c2b      	adds	r3, r5, #0
    bd88:	46a0      	mov	r8, r4
    bd8a:	464d      	mov	r5, r9
    bd8c:	46ba      	mov	sl, r7
    bd8e:	4699      	mov	r9, r3
    bd90:	9801      	ldr	r0, [sp, #4]
    bd92:	00b6      	lsls	r6, r6, #2
    bd94:	1987      	adds	r7, r0, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:312 (discriminator 2)
						{
							// store A[ir][j]
							ftmp = A[ir][j];
    bd96:	683c      	ldr	r4, [r7, #0]
    bd98:	445e      	add	r6, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:314 (discriminator 2)
							// A[ir][j] = A[ir][j] - sin(phi) * (A[ic][j] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[ic][j] + tanhalfphi * ftmp);
    bd9a:	1c21      	adds	r1, r4, #0
    bd9c:	4648      	mov	r0, r9
    bd9e:	f7f4 fff9 	bl	d94 <__aeabi_fmul>
    bda2:	6831      	ldr	r1, [r6, #0]
    bda4:	f7f4 fca6 	bl	6f4 <__aeabi_fadd>
    bda8:	4641      	mov	r1, r8
    bdaa:	f7f4 fff3 	bl	d94 <__aeabi_fmul>
    bdae:	1c01      	adds	r1, r0, #0
    bdb0:	1c20      	adds	r0, r4, #0
    bdb2:	f7f5 f919 	bl	fe8 <__aeabi_fsub>
    bdb6:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:316 (discriminator 2)
							// A[ic][j] = A[ic][j] + sin(phi) * (A[ir][j] - tan(phi/2) * A[ic][j])
							A[ic][j] = A[ic][j] + sinphi * (ftmp - tanhalfphi * A[ic][j]);
    bdb8:	6837      	ldr	r7, [r6, #0]
    bdba:	4649      	mov	r1, r9
    bdbc:	1c38      	adds	r0, r7, #0
    bdbe:	f7f4 ffe9 	bl	d94 <__aeabi_fmul>
    bdc2:	1c01      	adds	r1, r0, #0
    bdc4:	1c20      	adds	r0, r4, #0
    bdc6:	f7f5 f90f 	bl	fe8 <__aeabi_fsub>
    bdca:	4641      	mov	r1, r8
    bdcc:	f7f4 ffe2 	bl	d94 <__aeabi_fmul>
    bdd0:	1c01      	adds	r1, r0, #0
    bdd2:	1c38      	adds	r0, r7, #0
    bdd4:	f7f4 fc8e 	bl	6f4 <__aeabi_fadd>
    bdd8:	3501      	adds	r5, #1
    bdda:	b2ed      	uxtb	r5, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:309 (discriminator 2)
							// A[ir][j] = A[ir][j] - sin(phi) * (A[j][ic] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
							// A[j][ic] = A[j][ic] + sin(phi) * (A[ir][j] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
						}
						for (j = ic + 1; j < n; j++)
    bddc:	9904      	ldr	r1, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:316 (discriminator 2)
							// store A[ir][j]
							ftmp = A[ir][j];
							// A[ir][j] = A[ir][j] - sin(phi) * (A[ic][j] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[ic][j] + tanhalfphi * ftmp);
							// A[ic][j] = A[ic][j] + sin(phi) * (A[ir][j] - tan(phi/2) * A[ic][j])
							A[ic][j] = A[ic][j] + sinphi * (ftmp - tanhalfphi * A[ic][j]);
    bdde:	6030      	str	r0, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:309 (discriminator 2)
							// A[ir][j] = A[ir][j] - sin(phi) * (A[j][ic] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
							// A[j][ic] = A[j][ic] + sin(phi) * (A[ir][j] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
						}
						for (j = ic + 1; j < n; j++)
    bde0:	b26e      	sxtb	r6, r5
    bde2:	42b1      	cmp	r1, r6
    bde4:	dcd4      	bgt.n	bd90 <eigencompute+0x3c0>
    bde6:	4657      	mov	r7, sl
    bde8:	e67e      	b.n	bae8 <eigencompute+0x118>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:245
		{
			// loop over all rows with the exception of the last row (since only rotating above diagonal elements)
			for (ir = 0; ir < n - 1; ir++)
			{
				// loop over columns ic (where ic is always greater than ir since above diagonal)
				for (ic = ir + 1; ic < n; ic++)
    bdea:	9b06      	ldr	r3, [sp, #24]
    bdec:	3301      	adds	r3, #1
    bdee:	b2db      	uxtb	r3, r3
    bdf0:	b25a      	sxtb	r2, r3
    bdf2:	9306      	str	r3, [sp, #24]
    bdf4:	9b04      	ldr	r3, [sp, #16]
    bdf6:	9203      	str	r2, [sp, #12]
    bdf8:	4293      	cmp	r3, r2
    bdfa:	dd00      	ble.n	bdfe <eigencompute+0x42e>
    bdfc:	e674      	b.n	bae8 <eigencompute+0x118>
    bdfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:242

		// check if we still have work to do
		if (residue > 0.0F)
		{
			// loop over all rows with the exception of the last row (since only rotating above diagonal elements)
			for (ir = 0; ir < n - 1; ir++)
    be00:	9811      	ldr	r0, [sp, #68]	; 0x44
    be02:	b253      	sxtb	r3, r2
    be04:	4283      	cmp	r3, r0
    be06:	da00      	bge.n	be0a <eigencompute+0x43a>
    be08:	e648      	b.n	ba9c <eigencompute+0xcc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:322
						}
					}   // end of test for matrix element already zero
				}   // end of loop over columns
			}   // end of loop over rows
		}  // end of test for non-zero residue
	} while ((residue > 0.0F) && (ctr++ < NITERATIONS)); // end of main loop
    be0a:	9812      	ldr	r0, [sp, #72]	; 0x48
    be0c:	2100      	movs	r1, #0
    be0e:	f7f4 fc5d 	bl	6cc <__aeabi_fcmpgt>
    be12:	2800      	cmp	r0, #0
    be14:	d006      	beq.n	be24 <eigencompute+0x454>
    be16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    be18:	3b01      	subs	r3, #1
    be1a:	b2db      	uxtb	r3, r3
    be1c:	9313      	str	r3, [sp, #76]	; 0x4c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:322 (discriminator 1)
    be1e:	2b00      	cmp	r3, #0
    be20:	d000      	beq.n	be24 <eigencompute+0x454>
    be22:	e609      	b.n	ba38 <eigencompute+0x68>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:325

	return;
}
    be24:	b015      	add	sp, #84	; 0x54
    be26:	bc3c      	pop	{r2, r3, r4, r5}
    be28:	4690      	mov	r8, r2
    be2a:	4699      	mov	r9, r3
    be2c:	46a2      	mov	sl, r4
    be2e:	46ab      	mov	fp, r5
    be30:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:257

						// calculate tan(phi) correcting sign to ensure the smaller solution is used
						tanphi = 1.0F / (fabs(cot2phi) + sqrtf(1.0F + cot2phi * cot2phi));
						if (cot2phi < 0.0F)
						{
							tanphi = -tanphi;
    be32:	2080      	movs	r0, #128	; 0x80
    be34:	0600      	lsls	r0, r0, #24
    be36:	1c03      	adds	r3, r0, #0
    be38:	4443      	add	r3, r8
    be3a:	4698      	mov	r8, r3
    be3c:	e69f      	b.n	bb7e <eigencompute+0x1ae>
    be3e:	3b01      	subs	r3, #1
    be40:	9311      	str	r3, [sp, #68]	; 0x44
    be42:	e5f1      	b.n	ba28 <eigencompute+0x58>
    be44:	46c0      	nop			; (mov r8, r8)
    be46:	46c0      	nop			; (mov r8, r8)
    be48:	00000000 	.word	0x00000000
    be4c:	3ff00000 	.word	0x3ff00000

0000be50 <fmatrixAeqInvA>:
fmatrixAeqInvA():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:330
}

// function uses Gauss-Jordan elimination to compute the inverse of matrix A in situ
// on exit, A is replaced with its inverse
void fmatrixAeqInvA(float *A[], int8 iColInd[], int8 iRowInd[], int8 iPivot[], int8 isize)
{
    be50:	b5f0      	push	{r4, r5, r6, r7, lr}
    be52:	465f      	mov	r7, fp
    be54:	4656      	mov	r6, sl
    be56:	464d      	mov	r5, r9
    be58:	4644      	mov	r4, r8
    be5a:	b4f0      	push	{r4, r5, r6, r7}
    be5c:	b08d      	sub	sp, #52	; 0x34
    be5e:	469a      	mov	sl, r3
    be60:	ab16      	add	r3, sp, #88	; 0x58
    be62:	781b      	ldrb	r3, [r3, #0]
    be64:	9004      	str	r0, [sp, #16]
    be66:	b25b      	sxtb	r3, r3
    be68:	9108      	str	r1, [sp, #32]
    be6a:	9209      	str	r2, [sp, #36]	; 0x24
    be6c:	469b      	mov	fp, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:342

	// to avoid compiler warnings
	iPivotRow = iPivotCol = 0;

	// initialize the pivot array to 0
	for (j = 0; j < isize; j++)
    be6e:	2b00      	cmp	r3, #0
    be70:	dc00      	bgt.n	be74 <fmatrixAeqInvA+0x24>
    be72:	e110      	b.n	c096 <fmatrixAeqInvA+0x246>
    be74:	465e      	mov	r6, fp
    be76:	1c1a      	adds	r2, r3, #0
    be78:	3e01      	subs	r6, #1
    be7a:	4650      	mov	r0, sl
    be7c:	2100      	movs	r1, #0
    be7e:	f007 f98f 	bl	131a0 <memset>
    be82:	b2f3      	uxtb	r3, r6
    be84:	1c5a      	adds	r2, r3, #1
    be86:	009b      	lsls	r3, r3, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:344
	{
		iPivot[j] = 0;
    be88:	2700      	movs	r7, #0
    be8a:	9606      	str	r6, [sp, #24]
    be8c:	0092      	lsls	r2, r2, #2
    be8e:	2600      	movs	r6, #0
    be90:	3304      	adds	r3, #4
    be92:	9707      	str	r7, [sp, #28]
    be94:	9702      	str	r7, [sp, #8]
    be96:	920a      	str	r2, [sp, #40]	; 0x28
    be98:	9603      	str	r6, [sp, #12]
    be9a:	930b      	str	r3, [sp, #44]	; 0x2c
    be9c:	4657      	mov	r7, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:330 (discriminator 1)
}

// function uses Gauss-Jordan elimination to compute the inverse of matrix A in situ
// on exit, A is replaced with its inverse
void fmatrixAeqInvA(float *A[], int8 iColInd[], int8 iRowInd[], int8 iPivot[], int8 isize)
{
    be9e:	9904      	ldr	r1, [sp, #16]
    bea0:	2200      	movs	r2, #0
    bea2:	2300      	movs	r3, #0
    bea4:	4689      	mov	r9, r1
    bea6:	4692      	mov	sl, r2
    bea8:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:356
		largest = 0.0F;
		// loop over candidate rows j
		for (j = 0; j < isize; j++)
		{
			// check if row j has been previously pivoted
			if (iPivot[j] != 1)
    beaa:	4651      	mov	r1, sl
    beac:	4656      	mov	r6, sl
    beae:	567b      	ldrsb	r3, [r7, r1]
    beb0:	b2f6      	uxtb	r6, r6
    beb2:	9601      	str	r6, [sp, #4]
    beb4:	2b01      	cmp	r3, #1
    beb6:	d03e      	beq.n	bf36 <fmatrixAeqInvA+0xe6>
    beb8:	2400      	movs	r4, #0
    beba:	e013      	b.n	bee4 <fmatrixAeqInvA+0x94>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:365
				{
					// check if column k has previously been pivoted
					if (iPivot[k] == 0)
					{
						// check if the pivot element is the largest found so far
						if (fabs(A[j][k]) >= largest)
    bebc:	464a      	mov	r2, r9
    bebe:	6812      	ldr	r2, [r2, #0]
    bec0:	00a3      	lsls	r3, r4, #2
    bec2:	589e      	ldr	r6, [r3, r2]
    bec4:	4641      	mov	r1, r8
    bec6:	0076      	lsls	r6, r6, #1
    bec8:	0876      	lsrs	r6, r6, #1
    beca:	1c30      	adds	r0, r6, #0
    becc:	f7f4 fc08 	bl	6e0 <__aeabi_fcmpge>
    bed0:	2800      	cmp	r0, #0
    bed2:	d003      	beq.n	bedc <fmatrixAeqInvA+0x8c>
    bed4:	9b01      	ldr	r3, [sp, #4]
    bed6:	9503      	str	r5, [sp, #12]
    bed8:	9302      	str	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:370
						{
							// and store this location as the current best candidate for pivoting
							iPivotRow = j;
							iPivotCol = k;
							largest = (float) fabs(A[iPivotRow][iPivotCol]);
    beda:	46b0      	mov	r8, r6
    bedc:	3401      	adds	r4, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:359
		{
			// check if row j has been previously pivoted
			if (iPivot[j] != 1)
			{
				// loop over candidate columns k
				for (k = 0; k < isize; k++)
    bede:	b263      	sxtb	r3, r4
    bee0:	459b      	cmp	fp, r3
    bee2:	dd28      	ble.n	bf36 <fmatrixAeqInvA+0xe6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:362
				{
					// check if column k has previously been pivoted
					if (iPivot[k] == 0)
    bee4:	5d3b      	ldrb	r3, [r7, r4]
    bee6:	b2e5      	uxtb	r5, r4
    bee8:	2b00      	cmp	r3, #0
    beea:	d0e7      	beq.n	bebc <fmatrixAeqInvA+0x6c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:373
							iPivotRow = j;
							iPivotCol = k;
							largest = (float) fabs(A[iPivotRow][iPivotCol]);
						}
					}
					else if (iPivot[k] > 1)
    beec:	b25b      	sxtb	r3, r3
    beee:	2b01      	cmp	r3, #1
    bef0:	ddf4      	ble.n	bedc <fmatrixAeqInvA+0x8c>
fmatrixAeqI():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:74
		pAij = A[i];
		for (j = 0; j < rc; j++)
		{
			*(pAij++) = 0.0F;
		}
		A[i][i] = 1.0F;
    bef2:	26fe      	movs	r6, #254	; 0xfe
    bef4:	9f04      	ldr	r7, [sp, #16]
    bef6:	05b6      	lsls	r6, r6, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:66
	// rc = rows and columns in A

	float *pAij;	// pointer to A[i][j]
	int8 i, j;		// loop counters

	for (i = 0; i < rc; i++)
    bef8:	2500      	movs	r5, #0
    befa:	2300      	movs	r3, #0
    befc:	4658      	mov	r0, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:72
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < rc; j++)
		{
			*(pAij++) = 0.0F;
    befe:	2400      	movs	r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:74
		}
		A[i][i] = 1.0F;
    bf00:	46b4      	mov	ip, r6
    bf02:	46b8      	mov	r8, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:69
	int8 i, j;		// loop counters

	for (i = 0; i < rc; i++)
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
    bf04:	009e      	lsls	r6, r3, #2
    bf06:	4641      	mov	r1, r8
    bf08:	598f      	ldr	r7, [r1, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:70
		for (j = 0; j < rc; j++)
    bf0a:	2300      	movs	r3, #0
    bf0c:	1c3a      	adds	r2, r7, #0
    bf0e:	3301      	adds	r3, #1
    bf10:	b2db      	uxtb	r3, r3
    bf12:	b259      	sxtb	r1, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:72
		{
			*(pAij++) = 0.0F;
    bf14:	c210      	stmia	r2!, {r4}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:70

	for (i = 0; i < rc; i++)
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < rc; j++)
    bf16:	4281      	cmp	r1, r0
    bf18:	dbf9      	blt.n	bf0e <fmatrixAeqInvA+0xbe>
    bf1a:	3501      	adds	r5, #1
    bf1c:	b2ed      	uxtb	r5, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:74
		{
			*(pAij++) = 0.0F;
		}
		A[i][i] = 1.0F;
    bf1e:	4662      	mov	r2, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:66
	// rc = rows and columns in A

	float *pAij;	// pointer to A[i][j]
	int8 i, j;		// loop counters

	for (i = 0; i < rc; i++)
    bf20:	b26b      	sxtb	r3, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:74
		pAij = A[i];
		for (j = 0; j < rc; j++)
		{
			*(pAij++) = 0.0F;
		}
		A[i][i] = 1.0F;
    bf22:	51ba      	str	r2, [r7, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:66
	// rc = rows and columns in A

	float *pAij;	// pointer to A[i][j]
	int8 i, j;		// loop counters

	for (i = 0; i < rc; i++)
    bf24:	4283      	cmp	r3, r0
    bf26:	dbed      	blt.n	bf04 <fmatrixAeqInvA+0xb4>
fmatrixAeqInvA():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:459
			}
		}
	}

	return;
}
    bf28:	b00d      	add	sp, #52	; 0x34
    bf2a:	bc3c      	pop	{r2, r3, r4, r5}
    bf2c:	4690      	mov	r8, r2
    bf2e:	4699      	mov	r9, r3
    bf30:	46a2      	mov	sl, r4
    bf32:	46ab      	mov	fp, r5
    bf34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bf36:	2601      	movs	r6, #1
    bf38:	44b2      	add	sl, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:353
	for (i = 0; i < isize; i++)
	{
		// zero the largest element found for pivoting
		largest = 0.0F;
		// loop over candidate rows j
		for (j = 0; j < isize; j++)
    bf3a:	4652      	mov	r2, sl
    bf3c:	2104      	movs	r1, #4
    bf3e:	b253      	sxtb	r3, r2
    bf40:	4489      	add	r9, r1
    bf42:	459b      	cmp	fp, r3
    bf44:	dcb1      	bgt.n	beaa <fmatrixAeqInvA+0x5a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:383
					}
				}
			}
		}
		// increment the entry in iPivot to denote it has been selected for pivoting
		iPivot[iPivotCol]++;
    bf46:	9e03      	ldr	r6, [sp, #12]
    bf48:	b276      	sxtb	r6, r6
    bf4a:	19bb      	adds	r3, r7, r6
    bf4c:	781a      	ldrb	r2, [r3, #0]
    bf4e:	9605      	str	r6, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:386

		// check the pivot rows iPivotRow and iPivotCol are not the same before swapping
		if (iPivotRow != iPivotCol)
    bf50:	9e02      	ldr	r6, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:383
					}
				}
			}
		}
		// increment the entry in iPivot to denote it has been selected for pivoting
		iPivot[iPivotCol]++;
    bf52:	3201      	adds	r2, #1
    bf54:	701a      	strb	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:386

		// check the pivot rows iPivotRow and iPivotCol are not the same before swapping
		if (iPivotRow != iPivotCol)
    bf56:	b273      	sxtb	r3, r6
    bf58:	9e05      	ldr	r6, [sp, #20]
    bf5a:	42b3      	cmp	r3, r6
    bf5c:	d100      	bne.n	bf60 <fmatrixAeqInvA+0x110>
    bf5e:	e095      	b.n	c08c <fmatrixAeqInvA+0x23c>
    bf60:	9e04      	ldr	r6, [sp, #16]
    bf62:	009b      	lsls	r3, r3, #2
    bf64:	5999      	ldr	r1, [r3, r6]
    bf66:	9e05      	ldr	r6, [sp, #20]
    bf68:	9a04      	ldr	r2, [sp, #16]
    bf6a:	00b6      	lsls	r6, r6, #2
    bf6c:	1994      	adds	r4, r2, r6
    bf6e:	6822      	ldr	r2, [r4, #0]
    bf70:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    bf72:	9601      	str	r6, [sp, #4]
    bf74:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:392 (discriminator 2)
		{
			// loop over columns l
			for (l = 0; l < isize; l++)
			{
				// and swap all elements of rows iPivotRow and iPivotCol
				ftmp = A[iPivotRow][l];
    bf76:	58c8      	ldr	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:393 (discriminator 2)
				A[iPivotRow][l] = A[iPivotCol][l];
    bf78:	58d6      	ldr	r6, [r2, r3]
    bf7a:	50ce      	str	r6, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:394 (discriminator 2)
				A[iPivotCol][l] = ftmp;
    bf7c:	50d0      	str	r0, [r2, r3]
    bf7e:	3304      	adds	r3, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:389 (discriminator 2)

		// check the pivot rows iPivotRow and iPivotCol are not the same before swapping
		if (iPivotRow != iPivotCol)
		{
			// loop over columns l
			for (l = 0; l < isize; l++)
    bf80:	42ab      	cmp	r3, r5
    bf82:	d1f8      	bne.n	bf76 <fmatrixAeqInvA+0x126>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:399
				A[iPivotCol][l] = ftmp;
			}
		}

		// record that on the i-th iteration rows iPivotRow and iPivotCol were swapped
		iRowInd[i] = iPivotRow;
    bf84:	9907      	ldr	r1, [sp, #28]
    bf86:	9a02      	ldr	r2, [sp, #8]
    bf88:	9e09      	ldr	r6, [sp, #36]	; 0x24
    bf8a:	5472      	strb	r2, [r6, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:400
		iColInd[i] = iPivotCol;
    bf8c:	9e08      	ldr	r6, [sp, #32]
    bf8e:	9a03      	ldr	r2, [sp, #12]
    bf90:	5472      	strb	r2, [r6, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:403

		// check for zero on-diagonal element (singular matrix) and return with identity matrix if detected
		if (A[iPivotCol][iPivotCol] == 0.0F)
    bf92:	6823      	ldr	r3, [r4, #0]
    bf94:	9e01      	ldr	r6, [sp, #4]
    bf96:	4698      	mov	r8, r3
    bf98:	1c35      	adds	r5, r6, #0
    bf9a:	4445      	add	r5, r8
    bf9c:	682c      	ldr	r4, [r5, #0]
    bf9e:	2100      	movs	r1, #0
    bfa0:	1c20      	adds	r0, r4, #0
    bfa2:	f7f4 fb79 	bl	698 <__aeabi_fcmpeq>
    bfa6:	2800      	cmp	r0, #0
    bfa8:	d178      	bne.n	c09c <fmatrixAeqInvA+0x24c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:411
			fmatrixAeqI(A, isize);
			return;
		}

		// calculate the reciprocal of the pivot element knowing it's non-zero
		recippiv = 1.0F / A[iPivotCol][iPivotCol];
    bfaa:	20fe      	movs	r0, #254	; 0xfe
    bfac:	1c21      	adds	r1, r4, #0
    bfae:	0580      	lsls	r0, r0, #22
    bfb0:	f7f4 fd0c 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:413
		// by definition, the diagonal element normalizes to 1
		A[iPivotCol][iPivotCol] = 1.0F;
    bfb4:	23fe      	movs	r3, #254	; 0xfe
    bfb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bfb8:	059b      	lsls	r3, r3, #22
    bfba:	602b      	str	r3, [r5, #0]
    bfbc:	1c0d      	adds	r5, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:411
			fmatrixAeqI(A, isize);
			return;
		}

		// calculate the reciprocal of the pivot element knowing it's non-zero
		recippiv = 1.0F / A[iPivotCol][iPivotCol];
    bfbe:	1c06      	adds	r6, r0, #0
    bfc0:	4644      	mov	r4, r8
    bfc2:	4445      	add	r5, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:418 (discriminator 2)
		A[iPivotCol][iPivotCol] = 1.0F;
		// multiply all of row iPivotCol by the reciprocal of the pivot element including the diagonal element
		// the diagonal element A[iPivotCol][iPivotCol] now has value equal to the reciprocal of its previous value
		for (l = 0; l < isize; l++)
		{
			A[iPivotCol][l] *= recippiv;
    bfc4:	6820      	ldr	r0, [r4, #0]
    bfc6:	1c31      	adds	r1, r6, #0
    bfc8:	f7f4 fee4 	bl	d94 <__aeabi_fmul>
    bfcc:	c401      	stmia	r4!, {r0}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:416 (discriminator 2)
		recippiv = 1.0F / A[iPivotCol][iPivotCol];
		// by definition, the diagonal element normalizes to 1
		A[iPivotCol][iPivotCol] = 1.0F;
		// multiply all of row iPivotCol by the reciprocal of the pivot element including the diagonal element
		// the diagonal element A[iPivotCol][iPivotCol] now has value equal to the reciprocal of its previous value
		for (l = 0; l < isize; l++)
    bfce:	42ac      	cmp	r4, r5
    bfd0:	d1f8      	bne.n	bfc4 <fmatrixAeqInvA+0x174>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:416
    bfd2:	9a04      	ldr	r2, [sp, #16]
    bfd4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    bfd6:	2300      	movs	r3, #0
    bfd8:	9700      	str	r7, [sp, #0]
    bfda:	4691      	mov	r9, r2
    bfdc:	4647      	mov	r7, r8
    bfde:	469a      	mov	sl, r3
    bfe0:	46b0      	mov	r8, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:423
			A[iPivotCol][l] *= recippiv;
		}
		// loop over all rows m of A
		for (m = 0; m < isize; m++)
		{
			if (m != iPivotCol)
    bfe2:	9e05      	ldr	r6, [sp, #20]
    bfe4:	429e      	cmp	r6, r3
    bfe6:	d017      	beq.n	c018 <fmatrixAeqInvA+0x1c8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:426
			{
				// scaling factor for this row m is in column iPivotCol
				scaling = A[m][iPivotCol];
    bfe8:	464b      	mov	r3, r9
    bfea:	681d      	ldr	r5, [r3, #0]
    bfec:	9e01      	ldr	r6, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:428
				// zero this element
				A[m][iPivotCol] = 0.0F;
    bfee:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:426
		for (m = 0; m < isize; m++)
		{
			if (m != iPivotCol)
			{
				// scaling factor for this row m is in column iPivotCol
				scaling = A[m][iPivotCol];
    bff0:	19ab      	adds	r3, r5, r6
    bff2:	681e      	ldr	r6, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:428
				// zero this element
				A[m][iPivotCol] = 0.0F;
    bff4:	6019      	str	r1, [r3, #0]
    bff6:	1c33      	adds	r3, r6, #0
    bff8:	2400      	movs	r4, #0
    bffa:	4646      	mov	r6, r8
    bffc:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:432 (discriminator 2)
				// loop over all columns l of A and perform elimination
				for (l = 0; l < isize; l++)
				{
					A[m][l] -= A[iPivotCol][l] * scaling;
    bffe:	5939      	ldr	r1, [r7, r4]
    c000:	4640      	mov	r0, r8
    c002:	f7f4 fec7 	bl	d94 <__aeabi_fmul>
    c006:	1c01      	adds	r1, r0, #0
    c008:	5928      	ldr	r0, [r5, r4]
    c00a:	f7f4 ffed 	bl	fe8 <__aeabi_fsub>
    c00e:	5128      	str	r0, [r5, r4]
    c010:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:430 (discriminator 2)
				// scaling factor for this row m is in column iPivotCol
				scaling = A[m][iPivotCol];
				// zero this element
				A[m][iPivotCol] = 0.0F;
				// loop over all columns l of A and perform elimination
				for (l = 0; l < isize; l++)
    c012:	42a6      	cmp	r6, r4
    c014:	d1f3      	bne.n	bffe <fmatrixAeqInvA+0x1ae>
    c016:	46b0      	mov	r8, r6
    c018:	4653      	mov	r3, sl
    c01a:	3301      	adds	r3, #1
    c01c:	b2db      	uxtb	r3, r3
    c01e:	469a      	mov	sl, r3
    c020:	2104      	movs	r1, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:421
		for (l = 0; l < isize; l++)
		{
			A[iPivotCol][l] *= recippiv;
		}
		// loop over all rows m of A
		for (m = 0; m < isize; m++)
    c022:	b25b      	sxtb	r3, r3
    c024:	4489      	add	r9, r1
    c026:	459b      	cmp	fp, r3
    c028:	d1db      	bne.n	bfe2 <fmatrixAeqInvA+0x192>
    c02a:	9e07      	ldr	r6, [sp, #28]
    c02c:	9f00      	ldr	r7, [sp, #0]
    c02e:	3601      	adds	r6, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:348
	{
		iPivot[j] = 0;
	}

	// main loop i over the dimensions of the square matrix A
	for (i = 0; i < isize; i++)
    c030:	b273      	sxtb	r3, r6
    c032:	9607      	str	r6, [sp, #28]
    c034:	459b      	cmp	fp, r3
    c036:	dd00      	ble.n	c03a <fmatrixAeqInvA+0x1ea>
    c038:	e731      	b.n	be9e <fmatrixAeqInvA+0x4e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:439
			}
		}
	} // end of loop i over the matrix dimensions

	// finally, loop in inverse order to apply the missing column swaps
	for (l = isize - 1; l >= 0; l--)
    c03a:	9f06      	ldr	r7, [sp, #24]
    c03c:	b2fe      	uxtb	r6, r7
    c03e:	b2f7      	uxtb	r7, r6
    c040:	b27b      	sxtb	r3, r7
    c042:	2b00      	cmp	r3, #0
    c044:	da00      	bge.n	c048 <fmatrixAeqInvA+0x1f8>
    c046:	e76f      	b.n	bf28 <fmatrixAeqInvA+0xd8>
    c048:	9a04      	ldr	r2, [sp, #16]
    c04a:	00b6      	lsls	r6, r6, #2
    c04c:	3204      	adds	r2, #4
    c04e:	1996      	adds	r6, r2, r6
    c050:	46bc      	mov	ip, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:446
		// set i and j to the two columns to be swapped
		i = iRowInd[l];
		j = iColInd[l];

		// check that the two columns i and j to be swapped are not the same
		if (i != j)
    c052:	9f09      	ldr	r7, [sp, #36]	; 0x24
    c054:	56fd      	ldrsb	r5, [r7, r3]
    c056:	9f08      	ldr	r7, [sp, #32]
    c058:	56fc      	ldrsb	r4, [r7, r3]
    c05a:	42a5      	cmp	r5, r4
    c05c:	d00e      	beq.n	c07c <fmatrixAeqInvA+0x22c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:449 (discriminator 1)
		{
			// loop over all rows k to swap columns i and j of A
			for (k = 0; k < isize; k++)
    c05e:	4659      	mov	r1, fp
    c060:	2900      	cmp	r1, #0
    c062:	dd0b      	ble.n	c07c <fmatrixAeqInvA+0x22c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:449
    c064:	9b04      	ldr	r3, [sp, #16]
    c066:	00ad      	lsls	r5, r5, #2
    c068:	00a4      	lsls	r4, r4, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:451 (discriminator 2)
			{
				ftmp = A[k][i];
    c06a:	cb04      	ldmia	r3!, {r2}
    c06c:	1951      	adds	r1, r2, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:452 (discriminator 2)
				A[k][i] = A[k][j];
    c06e:	1912      	adds	r2, r2, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:451 (discriminator 2)
		if (i != j)
		{
			// loop over all rows k to swap columns i and j of A
			for (k = 0; k < isize; k++)
			{
				ftmp = A[k][i];
    c070:	6808      	ldr	r0, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:452 (discriminator 2)
				A[k][i] = A[k][j];
    c072:	6817      	ldr	r7, [r2, #0]
    c074:	600f      	str	r7, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:453 (discriminator 2)
				A[k][j] = ftmp;
    c076:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:449 (discriminator 2)

		// check that the two columns i and j to be swapped are not the same
		if (i != j)
		{
			// loop over all rows k to swap columns i and j of A
			for (k = 0; k < isize; k++)
    c078:	42b3      	cmp	r3, r6
    c07a:	d1f6      	bne.n	c06a <fmatrixAeqInvA+0x21a>
    c07c:	4667      	mov	r7, ip
    c07e:	3f01      	subs	r7, #1
    c080:	b2ff      	uxtb	r7, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:439
			}
		}
	} // end of loop i over the matrix dimensions

	// finally, loop in inverse order to apply the missing column swaps
	for (l = isize - 1; l >= 0; l--)
    c082:	b27b      	sxtb	r3, r7
    c084:	46bc      	mov	ip, r7
    c086:	2b00      	cmp	r3, #0
    c088:	dae3      	bge.n	c052 <fmatrixAeqInvA+0x202>
    c08a:	e74d      	b.n	bf28 <fmatrixAeqInvA+0xd8>
    c08c:	9904      	ldr	r1, [sp, #16]
    c08e:	00b6      	lsls	r6, r6, #2
    c090:	9601      	str	r6, [sp, #4]
    c092:	198c      	adds	r4, r1, r6
    c094:	e776      	b.n	bf84 <fmatrixAeqInvA+0x134>
    c096:	3b01      	subs	r3, #1
    c098:	9306      	str	r3, [sp, #24]
    c09a:	e7ce      	b.n	c03a <fmatrixAeqInvA+0x1ea>
fmatrixAeqI():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:74
		pAij = A[i];
		for (j = 0; j < rc; j++)
		{
			*(pAij++) = 0.0F;
		}
		A[i][i] = 1.0F;
    c09c:	27fe      	movs	r7, #254	; 0xfe
    c09e:	05bf      	lsls	r7, r7, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:66
	// rc = rows and columns in A

	float *pAij;	// pointer to A[i][j]
	int8 i, j;		// loop counters

	for (i = 0; i < rc; i++)
    c0a0:	2500      	movs	r5, #0
    c0a2:	2300      	movs	r3, #0
    c0a4:	4658      	mov	r0, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:72
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < rc; j++)
		{
			*(pAij++) = 0.0F;
    c0a6:	2400      	movs	r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:74
		}
		A[i][i] = 1.0F;
    c0a8:	46bc      	mov	ip, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:69
	int8 i, j;		// loop counters

	for (i = 0; i < rc; i++)
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
    c0aa:	9904      	ldr	r1, [sp, #16]
    c0ac:	009e      	lsls	r6, r3, #2
    c0ae:	598f      	ldr	r7, [r1, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:70
		for (j = 0; j < rc; j++)
    c0b0:	2300      	movs	r3, #0
    c0b2:	1c3a      	adds	r2, r7, #0
    c0b4:	3301      	adds	r3, #1
    c0b6:	b2db      	uxtb	r3, r3
    c0b8:	b259      	sxtb	r1, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:72
		{
			*(pAij++) = 0.0F;
    c0ba:	c210      	stmia	r2!, {r4}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:70

	for (i = 0; i < rc; i++)
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < rc; j++)
    c0bc:	4281      	cmp	r1, r0
    c0be:	dbf9      	blt.n	c0b4 <fmatrixAeqInvA+0x264>
    c0c0:	3501      	adds	r5, #1
    c0c2:	b2ed      	uxtb	r5, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:74
		{
			*(pAij++) = 0.0F;
		}
		A[i][i] = 1.0F;
    c0c4:	4662      	mov	r2, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:66
	// rc = rows and columns in A

	float *pAij;	// pointer to A[i][j]
	int8 i, j;		// loop counters

	for (i = 0; i < rc; i++)
    c0c6:	b26b      	sxtb	r3, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:74
		pAij = A[i];
		for (j = 0; j < rc; j++)
		{
			*(pAij++) = 0.0F;
		}
		A[i][i] = 1.0F;
    c0c8:	51ba      	str	r2, [r7, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/matrix.c:66
	// rc = rows and columns in A

	float *pAij;	// pointer to A[i][j]
	int8 i, j;		// loop counters

	for (i = 0; i < rc; i++)
    c0ca:	4283      	cmp	r3, r0
    c0cc:	dbed      	blt.n	c0aa <fmatrixAeqInvA+0x25a>
    c0ce:	e72b      	b.n	bf28 <fmatrixAeqInvA+0xd8>

0000c0d0 <Main_task>:
Main_task():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:55
struct ProjectGlobals globals;
struct MQXLiteGlobals mqxglobals;

// Main task
void Main_task(uint32_t task_init_data)
{
    c0d0:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:57
	// switch the red LED on (line low sets LED on)
	LED_RED_ClrVal(NULL);
    c0d2:	2000      	movs	r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:55
struct ProjectGlobals globals;
struct MQXLiteGlobals mqxglobals;

// Main task
void Main_task(uint32_t task_init_data)
{
    c0d4:	b082      	sub	sp, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:57
	// switch the red LED on (line low sets LED on)
	LED_RED_ClrVal(NULL);
    c0d6:	f004 fbb7 	bl	10848 <LED_RED_ClrVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:58
	LED_GREEN_SetVal(NULL);
    c0da:	2000      	movs	r0, #0
    c0dc:	f004 fb86 	bl	107ec <LED_GREEN_SetVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:59
	LED_BLUE_SetVal(NULL);
    c0e0:	2000      	movs	r0, #0
    c0e2:	f004 fb5b 	bl	1079c <LED_BLUE_SetVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:62

	// create the sensor sampling event (typically 200Hz)
	_lwevent_create(&(mqxglobals.SamplingEventStruct), LWEVENT_AUTO_CLEAR);
    c0e6:	4c26      	ldr	r4, [pc, #152]	; (c180 <Main_task+0xb0>)
    c0e8:	2101      	movs	r1, #1
    c0ea:	1c20      	adds	r0, r4, #0
    c0ec:	f002 ffa4 	bl	f038 <_lwevent_create>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:64
	// create the Kalman filter sensor fusion event (typically 25Hz)
	_lwevent_create(&(mqxglobals.RunKFEventStruct), LWEVENT_AUTO_CLEAR);
    c0f0:	1c20      	adds	r0, r4, #0
    c0f2:	2101      	movs	r1, #1
    c0f4:	3024      	adds	r0, #36	; 0x24
    c0f6:	f002 ff9f 	bl	f038 <_lwevent_create>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:69
	// create the magnetic calibration event (typically once per minute)
	_lwevent_create(&(mqxglobals.MagCalEventStruct), LWEVENT_AUTO_CLEAR);

	// create the sensor read task (controlled by sensor sampling event SamplingEventStruct)	
	_task_create_at(0, RDSENSDATA_TASK, 0, RdSensData_task_stack, RDSENSDATA_TASK_STACK_SIZE);
    c0fa:	4d22      	ldr	r5, [pc, #136]	; (c184 <Main_task+0xb4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:66
	// create the sensor sampling event (typically 200Hz)
	_lwevent_create(&(mqxglobals.SamplingEventStruct), LWEVENT_AUTO_CLEAR);
	// create the Kalman filter sensor fusion event (typically 25Hz)
	_lwevent_create(&(mqxglobals.RunKFEventStruct), LWEVENT_AUTO_CLEAR);
	// create the magnetic calibration event (typically once per minute)
	_lwevent_create(&(mqxglobals.MagCalEventStruct), LWEVENT_AUTO_CLEAR);
    c0fc:	1c20      	adds	r0, r4, #0
    c0fe:	2101      	movs	r1, #1
    c100:	3048      	adds	r0, #72	; 0x48
    c102:	f002 ff99 	bl	f038 <_lwevent_create>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:69

	// create the sensor read task (controlled by sensor sampling event SamplingEventStruct)	
	_task_create_at(0, RDSENSDATA_TASK, 0, RdSensData_task_stack, RDSENSDATA_TASK_STACK_SIZE);
    c106:	9500      	str	r5, [sp, #0]
    c108:	2102      	movs	r1, #2
    c10a:	2200      	movs	r2, #0
    c10c:	4b1e      	ldr	r3, [pc, #120]	; (c188 <Main_task+0xb8>)
    c10e:	2000      	movs	r0, #0
    c110:	f003 fdd0 	bl	fcb4 <_task_create_at>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:71
	// create the sensor fusion task (controlled by sensor fusion event RunKFEventStruct)	
	_task_create_at(0, FUSION_TASK, 0, Fusion_task_stack, FUSION_TASK_STACK_SIZE);
    c114:	9500      	str	r5, [sp, #0]
    c116:	2103      	movs	r1, #3
    c118:	2200      	movs	r2, #0
    c11a:	4b1c      	ldr	r3, [pc, #112]	; (c18c <Main_task+0xbc>)
    c11c:	2000      	movs	r0, #0
    c11e:	f003 fdc9 	bl	fcb4 <_task_create_at>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:73
	// create the magnetic calibration task (controlled by MagCalEventStruct)	
	_task_create_at(0, MAGCAL_TASK, 0, MagCal_task_stack, MAGCAL_TASK_STACK_SIZE);
    c122:	23e3      	movs	r3, #227	; 0xe3
    c124:	009b      	lsls	r3, r3, #2
    c126:	9300      	str	r3, [sp, #0]
    c128:	2200      	movs	r2, #0
    c12a:	4b19      	ldr	r3, [pc, #100]	; (c190 <Main_task+0xc0>)
    c12c:	2104      	movs	r1, #4
    c12e:	2000      	movs	r0, #0
    c130:	f003 fdc0 	bl	fcb4 <_task_create_at>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:78
	// and this main task uses about 512 bytes stack for a grand total of 3K task stack space

	// set the sensor sampling frequency (typically 200Hz)
	// this is set to 200Hz by default in PE but we want to set it using value in proj_config.h 
	FTM_SetPeriodTicks(FTM_DeviceData, (uint16) (FTM_INCLK_HZ / SENSORFS));
    c134:	4e17      	ldr	r6, [pc, #92]	; (c194 <Main_task+0xc4>)
    c136:	4d18      	ldr	r5, [pc, #96]	; (c198 <Main_task+0xc8>)
    c138:	1c31      	adds	r1, r6, #0
    c13a:	6928      	ldr	r0, [r5, #16]
    c13c:	f004 f8d8 	bl	102f0 <FTM_SetPeriodTicks>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:81
	
	// initialize globals
	mqxglobals.FTMReload = (uint16)(FTM_INCLK_HZ / SENSORFS);
    c140:	236c      	movs	r3, #108	; 0x6c
    c142:	52e6      	strh	r6, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:83
	mqxglobals.FTMTimestamp = 0;
	globals.iPacketNumber = 0;
    c144:	4b15      	ldr	r3, [pc, #84]	; (c19c <Main_task+0xcc>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:82
	// this is set to 200Hz by default in PE but we want to set it using value in proj_config.h 
	FTM_SetPeriodTicks(FTM_DeviceData, (uint16) (FTM_INCLK_HZ / SENSORFS));
	
	// initialize globals
	mqxglobals.FTMReload = (uint16)(FTM_INCLK_HZ / SENSORFS);
	mqxglobals.FTMTimestamp = 0;
    c146:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:84
	globals.iPacketNumber = 0;
	globals.AngularVelocityPacketOn = true;
    c148:	2101      	movs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:82
	// this is set to 200Hz by default in PE but we want to set it using value in proj_config.h 
	FTM_SetPeriodTicks(FTM_DeviceData, (uint16) (FTM_INCLK_HZ / SENSORFS));
	
	// initialize globals
	mqxglobals.FTMReload = (uint16)(FTM_INCLK_HZ / SENSORFS);
	mqxglobals.FTMTimestamp = 0;
    c14a:	6722      	str	r2, [r4, #112]	; 0x70
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:83
	globals.iPacketNumber = 0;
    c14c:	721a      	strb	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:84
	globals.AngularVelocityPacketOn = true;
    c14e:	7019      	strb	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:85
	globals.DebugPacketOn = true;
    c150:	7059      	strb	r1, [r3, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:86
	globals.RPCPacketOn = true;
    c152:	7099      	strb	r1, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:87
	globals.AltPacketOn = true;
    c154:	70d9      	strb	r1, [r3, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:88
	globals.iMPL3115Found = false;
    c156:	725a      	strb	r2, [r3, #9]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:89
	globals.MagneticPacketID = 0;
    c158:	80da      	strh	r2, [r3, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:92

	// initialize the BlueRadios Bluetooth module and other user tasks
	UserStartup();
    c15a:	f002 fbf3 	bl	e944 <UserStartup>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:96
	
	// initialize the incoming command buffer to all '~' = 0x7E and trigger a callback 
	// when any single command character is received into the UART buffer
	iCommand[0] = iCommand[1] = iCommand[2] = iCommand[3] = '~';
    c15e:	4b10      	ldr	r3, [pc, #64]	; (c1a0 <Main_task+0xd0>)
    c160:	227e      	movs	r2, #126	; 0x7e
    c162:	70da      	strb	r2, [r3, #3]
    c164:	709a      	strb	r2, [r3, #2]
    c166:	705a      	strb	r2, [r3, #1]
    c168:	701a      	strb	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:97
	UART_ReceiveBlock(UART_DeviceData, sUARTInputBuf, 1);
    c16a:	490e      	ldr	r1, [pc, #56]	; (c1a4 <Main_task+0xd4>)
    c16c:	2201      	movs	r2, #1
    c16e:	6968      	ldr	r0, [r5, #20]
    c170:	f004 fe08 	bl	10d84 <UART_ReceiveBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:100

	// destroy this task (main task) now that the three new tasks are created
	_task_destroy(MQX_NULL_TASK_ID);
    c174:	2000      	movs	r0, #0
    c176:	f003 fb5f 	bl	f838 <_task_destroy>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:103

	return;
}
    c17a:	b002      	add	sp, #8
    c17c:	bd70      	pop	{r4, r5, r6, pc}
    c17e:	46c0      	nop			; (mov r8, r8)
    c180:	1fffe3fc 	.word	0x1fffe3fc
    c184:	0000048c 	.word	0x0000048c
    c188:	200006e8 	.word	0x200006e8
    c18c:	20001240 	.word	0x20001240
    c190:	200016cc 	.word	0x200016cc
    c194:	00001388 	.word	0x00001388
    c198:	1fffe218 	.word	0x1fffe218
    c19c:	1fffe478 	.word	0x1fffe478
    c1a0:	1fffe2d8 	.word	0x1fffe2d8
    c1a4:	1fffe3dc 	.word	0x1fffe3dc

0000c1a8 <RdSensData_task>:
RdSensData_task():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:107

// sensor read task
void RdSensData_task(uint32_t task_init_data)
{
    c1a8:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:109
	// initialize the physical sensors over I2C and the sensor data structures
	RdSensData_Init();
    c1aa:	f001 ffcf 	bl	e14c <RdSensData_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:112

	// initialize the user high frequency (typically 200Hz) task
	UserHighFrequencyTaskInit();
    c1ae:	f002 fc01 	bl	e9b4 <UserHighFrequencyTaskInit>
    c1b2:	4c0c      	ldr	r4, [pc, #48]	; (c1e4 <RdSensData_task+0x3c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:124
		// FALSE means any bit (of the 1 bit enabled by the mask) unblocks
		// and NULL means timeout is infinite
		_lwevent_wait_for(&(mqxglobals.SamplingEventStruct), 1, FALSE, NULL);

		// reset the Kalman filter task flag
		mqxglobals.RunKF_Event_Flag = 0;
    c1b4:	2576      	movs	r5, #118	; 0x76
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:133
		UserHighFrequencyTaskRun();

		// use the Kalman filter flag set by the sensor read task (typically every 8 iterations)
		// with a mask of 1 (least significant bit set) to enable the Kalman filter task to run
		if (mqxglobals.RunKF_Event_Flag)
			_lwevent_set(&(mqxglobals.RunKFEventStruct), 1);
    c1b6:	1c26      	adds	r6, r4, #0
    c1b8:	3624      	adds	r6, #36	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:121
	{
		// wait here for the sampling event (hardware clock, typically at 200Hz)
		// the Kalman filter and magnetic fusion tasks execute while this task is blocked here
		// FALSE means any bit (of the 1 bit enabled by the mask) unblocks
		// and NULL means timeout is infinite
		_lwevent_wait_for(&(mqxglobals.SamplingEventStruct), 1, FALSE, NULL);
    c1ba:	2101      	movs	r1, #1
    c1bc:	2200      	movs	r2, #0
    c1be:	2300      	movs	r3, #0
    c1c0:	1c20      	adds	r0, r4, #0
    c1c2:	f003 f80f 	bl	f1e4 <_lwevent_wait_for>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:124

		// reset the Kalman filter task flag
		mqxglobals.RunKF_Event_Flag = 0;
    c1c6:	2300      	movs	r3, #0
    c1c8:	5363      	strh	r3, [r4, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:126
		// read the sensors
		RdSensData_Run();
    c1ca:	f002 f821 	bl	e210 <RdSensData_Run>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:128
		// run the user high frequency task
		UserHighFrequencyTaskRun();
    c1ce:	f002 fbf5 	bl	e9bc <UserHighFrequencyTaskRun>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:132

		// use the Kalman filter flag set by the sensor read task (typically every 8 iterations)
		// with a mask of 1 (least significant bit set) to enable the Kalman filter task to run
		if (mqxglobals.RunKF_Event_Flag)
    c1d2:	5b63      	ldrh	r3, [r4, r5]
    c1d4:	2b00      	cmp	r3, #0
    c1d6:	d0f0      	beq.n	c1ba <RdSensData_task+0x12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:133
			_lwevent_set(&(mqxglobals.RunKFEventStruct), 1);
    c1d8:	1c30      	adds	r0, r6, #0
    c1da:	2101      	movs	r1, #1
    c1dc:	f002 ff6e 	bl	f0bc <_lwevent_set>
    c1e0:	e7eb      	b.n	c1ba <RdSensData_task+0x12>
    c1e2:	46c0      	nop			; (mov r8, r8)
    c1e4:	1fffe3fc 	.word	0x1fffe3fc

0000c1e8 <Fusion_task>:
Fusion_task():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:140
	}  // end of infinite loop
}

// Kalman filter sensor fusion task
void Fusion_task(uint32_t task_init_data)
{
    c1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c1ea:	464f      	mov	r7, r9
    c1ec:	4646      	mov	r6, r8
    c1ee:	b4c0      	push	{r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:144
	uint16_t LedGreenCounter = 0;

	// initialize the sensor fusion algorithms
	Fusion_Init();
    c1f0:	f001 ffd8 	bl	e1a4 <Fusion_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:147

	// initialize the user medium frequency (typically 25Hz) task
	UserMediumFrequencyTaskInit();
    c1f4:	f002 fbe0 	bl	e9b8 <UserMediumFrequencyTaskInit>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:153

	// infinite loop controlled by MQX-Lite events
	while(1)
	{
		// ensure the red LED (power up check) is off (line high)
		LED_RED_SetVal(NULL);
    c1f8:	2000      	movs	r0, #0
    c1fa:	f004 fb2d 	bl	10858 <LED_RED_SetVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:156
		
		// set the output test pin to zero (for timing measurements)
		TestPin_KF_Time_ClrVal(NULL);
    c1fe:	2000      	movs	r0, #0
    c200:	f004 fc88 	bl	10b14 <TestPin_KF_Time_ClrVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:161

		// wait for the sensor fusion event to occur
		// FALSE means any bit (of the 1 bit enabled by the mask) unblocks
		// and NULL means timeout is infinite
		_lwevent_wait_for(&(mqxglobals.RunKFEventStruct), 1, FALSE, NULL);
    c204:	4f1b      	ldr	r7, [pc, #108]	; (c274 <Fusion_task+0x8c>)
    c206:	2300      	movs	r3, #0
    c208:	2101      	movs	r1, #1
    c20a:	2200      	movs	r2, #0
    c20c:	1c38      	adds	r0, r7, #0
    c20e:	f002 ffe9 	bl	f1e4 <_lwevent_wait_for>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:164

		// set the output test pin to high to denote sensor fusion running
		TestPin_KF_Time_SetVal(NULL);
    c212:	2000      	movs	r0, #0
    c214:	f004 fc86 	bl	10b24 <TestPin_KF_Time_SetVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:174
			LED_GREEN_NegVal(NULL);
			LedGreenCounter = 0;
		}

		// reset the magnetic calibration flag (this is set by the fusion algorithm)
		mqxglobals.MagCal_Event_Flag = 0;
    c218:	2300      	movs	r3, #0
    c21a:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:186
		// enable the magnetic calibration event if the flag for a new magnetic calibration
		// with a mask of 1 (least significant bit set)
		// was set by the sensor fusion algorithms
		if (mqxglobals.MagCal_Event_Flag)
		{
			_lwevent_set(&(mqxglobals.MagCalEventStruct), 1);
    c21c:	2324      	movs	r3, #36	; 0x24
    c21e:	1c3e      	adds	r6, r7, #0
    c220:	19db      	adds	r3, r3, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:167

		// set the output test pin to high to denote sensor fusion running
		TestPin_KF_Time_SetVal(NULL);

		// flash the green LED to denote the sensor fusion is running
		if (++LedGreenCounter >= 5)
    c222:	2401      	movs	r4, #1
    c224:	3e24      	subs	r6, #36	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:174
			LED_GREEN_NegVal(NULL);
			LedGreenCounter = 0;
		}

		// reset the magnetic calibration flag (this is set by the fusion algorithm)
		mqxglobals.MagCal_Event_Flag = 0;
    c226:	2578      	movs	r5, #120	; 0x78
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:186
		// enable the magnetic calibration event if the flag for a new magnetic calibration
		// with a mask of 1 (least significant bit set)
		// was set by the sensor fusion algorithms
		if (mqxglobals.MagCal_Event_Flag)
		{
			_lwevent_set(&(mqxglobals.MagCalEventStruct), 1);
    c228:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:174
			LED_GREEN_NegVal(NULL);
			LedGreenCounter = 0;
		}

		// reset the magnetic calibration flag (this is set by the fusion algorithm)
		mqxglobals.MagCal_Event_Flag = 0;
    c22a:	4643      	mov	r3, r8
    c22c:	5373      	strh	r3, [r6, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:176
		// call the sensor fusion algorithms
		Fusion_Run();
    c22e:	f002 f985 	bl	e53c <Fusion_Run>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:179

		// run the user medium frequency (typically 25Hz) user task
		UserMediumFrequencyTaskRun();
    c232:	f002 fbc5 	bl	e9c0 <UserMediumFrequencyTaskRun>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:184

		// enable the magnetic calibration event if the flag for a new magnetic calibration
		// with a mask of 1 (least significant bit set)
		// was set by the sensor fusion algorithms
		if (mqxglobals.MagCal_Event_Flag)
    c236:	5b73      	ldrh	r3, [r6, r5]
    c238:	2b00      	cmp	r3, #0
    c23a:	d003      	beq.n	c244 <Fusion_task+0x5c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:186
		{
			_lwevent_set(&(mqxglobals.MagCalEventStruct), 1);
    c23c:	4648      	mov	r0, r9
    c23e:	2101      	movs	r1, #1
    c240:	f002 ff3c 	bl	f0bc <_lwevent_set>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:153

	// infinite loop controlled by MQX-Lite events
	while(1)
	{
		// ensure the red LED (power up check) is off (line high)
		LED_RED_SetVal(NULL);
    c244:	2000      	movs	r0, #0
    c246:	f004 fb07 	bl	10858 <LED_RED_SetVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:156
		
		// set the output test pin to zero (for timing measurements)
		TestPin_KF_Time_ClrVal(NULL);
    c24a:	2000      	movs	r0, #0
    c24c:	f004 fc62 	bl	10b14 <TestPin_KF_Time_ClrVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:167

		// set the output test pin to high to denote sensor fusion running
		TestPin_KF_Time_SetVal(NULL);

		// flash the green LED to denote the sensor fusion is running
		if (++LedGreenCounter >= 5)
    c250:	3401      	adds	r4, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:161
		TestPin_KF_Time_ClrVal(NULL);

		// wait for the sensor fusion event to occur
		// FALSE means any bit (of the 1 bit enabled by the mask) unblocks
		// and NULL means timeout is infinite
		_lwevent_wait_for(&(mqxglobals.RunKFEventStruct), 1, FALSE, NULL);
    c252:	2101      	movs	r1, #1
    c254:	2200      	movs	r2, #0
    c256:	2300      	movs	r3, #0
    c258:	1c38      	adds	r0, r7, #0
    c25a:	f002 ffc3 	bl	f1e4 <_lwevent_wait_for>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:167

		// set the output test pin to high to denote sensor fusion running
		TestPin_KF_Time_SetVal(NULL);

		// flash the green LED to denote the sensor fusion is running
		if (++LedGreenCounter >= 5)
    c25e:	b2a4      	uxth	r4, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:164
		// FALSE means any bit (of the 1 bit enabled by the mask) unblocks
		// and NULL means timeout is infinite
		_lwevent_wait_for(&(mqxglobals.RunKFEventStruct), 1, FALSE, NULL);

		// set the output test pin to high to denote sensor fusion running
		TestPin_KF_Time_SetVal(NULL);
    c260:	2000      	movs	r0, #0
    c262:	f004 fc5f 	bl	10b24 <TestPin_KF_Time_SetVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:167

		// flash the green LED to denote the sensor fusion is running
		if (++LedGreenCounter >= 5)
    c266:	2c04      	cmp	r4, #4
    c268:	d9df      	bls.n	c22a <Fusion_task+0x42>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:169
		{
			LED_GREEN_NegVal(NULL);
    c26a:	2000      	movs	r0, #0
    c26c:	f004 fac4 	bl	107f8 <LED_GREEN_NegVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:170
			LedGreenCounter = 0;
    c270:	2400      	movs	r4, #0
    c272:	e7da      	b.n	c22a <Fusion_task+0x42>
    c274:	1fffe420 	.word	0x1fffe420

0000c278 <MagCal_task>:
MagCal_task():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:196
	return;
}

// magnetic calibration task
void MagCal_task(uint32_t task_init_data)
{
    c278:	b570      	push	{r4, r5, r6, lr}
    c27a:	4e0d      	ldr	r6, [pc, #52]	; (c2b0 <MagCal_task+0x38>)
    c27c:	4d0d      	ldr	r5, [pc, #52]	; (c2b4 <MagCal_task+0x3c>)
    c27e:	4c0e      	ldr	r4, [pc, #56]	; (c2b8 <MagCal_task+0x40>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:200 (discriminator 1)
	while(1)
	{
		// set the RED LED off and set test pin off ready for magnetic calibration to run
		LED_RED_SetVal(NULL);           
    c280:	2000      	movs	r0, #0
    c282:	f004 fae9 	bl	10858 <LED_RED_SetVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:201 (discriminator 1)
		TestPin_MagCal_Time_ClrVal(NULL);  
    c286:	2000      	movs	r0, #0
    c288:	f004 fc78 	bl	10b7c <TestPin_MagCal_Time_ClrVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:207 (discriminator 1)

		// wait for the magnetic calibration event
		// this event will never be enabled for build options which don't require magnetic calibration
		// FALSE means any bit (of the 1 bit enabled by the mask) unblocks
		// and NULL means timeout is infinite
		_lwevent_wait_for(&(mqxglobals.MagCalEventStruct), 1, FALSE, NULL);
    c28c:	2101      	movs	r1, #1
    c28e:	2200      	movs	r2, #0
    c290:	2300      	movs	r3, #0
    c292:	1c30      	adds	r0, r6, #0
    c294:	f002 ffa6 	bl	f1e4 <_lwevent_wait_for>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:210 (discriminator 1)

		// set the red LED on and test pin pin on
		LED_RED_ClrVal(NULL);            
    c298:	2000      	movs	r0, #0
    c29a:	f004 fad5 	bl	10848 <LED_RED_ClrVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:211 (discriminator 1)
		TestPin_MagCal_Time_SetVal(NULL);  
    c29e:	2000      	movs	r0, #0
    c2a0:	f004 fc74 	bl	10b8c <TestPin_MagCal_Time_SetVal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:216 (discriminator 1)

		// prevent compilation errors when magnetic calibration is not required
#if defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
		// and run the magnetic calibration
		MagCal_Run(&thisMagCal, &thisMagBuffer);
    c2a4:	1c28      	adds	r0, r5, #0
    c2a6:	1c21      	adds	r1, r4, #0
    c2a8:	f002 faaa 	bl	e800 <MagCal_Run>
    c2ac:	e7e8      	b.n	c280 <MagCal_task+0x8>
    c2ae:	46c0      	nop			; (mov r8, r8)
    c2b0:	1fffe444 	.word	0x1fffe444
    c2b4:	1ffff23c 	.word	0x1ffff23c
    c2b8:	1fffe578 	.word	0x1fffe578

0000c2bc <f3DOFTiltNED>:
f3DOFTiltNED():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:46
#define CORRUPTQUAT 0.001F	// threshold for deciding rotation quaternion is corrupt
#define SMALLMODULUS 0.01F	// limit where rounding errors may appear

// Aerospace NED accelerometer 3DOF tilt function computing rotation matrix fR
void f3DOFTiltNED(float fR[][3], float fGp[])
{
    c2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c2be:	4645      	mov	r5, r8
    c2c0:	4657      	mov	r7, sl
    c2c2:	464e      	mov	r6, r9
    c2c4:	b4e0      	push	{r5, r6, r7}
    c2c6:	1c0d      	adds	r5, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:57
	float fmodGyz;			// modulus of the y, z accelerometer readings
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable

	// compute the accelerometer squared magnitudes
	fmodGyz = fGp[Y] * fGp[Y] + fGp[Z] * fGp[Z];
    c2c8:	6849      	ldr	r1, [r1, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:46
#define CORRUPTQUAT 0.001F	// threshold for deciding rotation quaternion is corrupt
#define SMALLMODULUS 0.01F	// limit where rounding errors may appear

// Aerospace NED accelerometer 3DOF tilt function computing rotation matrix fR
void f3DOFTiltNED(float fR[][3], float fGp[])
{
    c2ca:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:57
	float fmodGyz;			// modulus of the y, z accelerometer readings
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable

	// compute the accelerometer squared magnitudes
	fmodGyz = fGp[Y] * fGp[Y] + fGp[Z] * fGp[Z];
    c2cc:	1c08      	adds	r0, r1, #0
    c2ce:	f7f4 fd61 	bl	d94 <__aeabi_fmul>
    c2d2:	68ae      	ldr	r6, [r5, #8]
    c2d4:	1c07      	adds	r7, r0, #0
    c2d6:	1c31      	adds	r1, r6, #0
    c2d8:	1c30      	adds	r0, r6, #0
    c2da:	f7f4 fd5b 	bl	d94 <__aeabi_fmul>
    c2de:	1c01      	adds	r1, r0, #0
    c2e0:	1c38      	adds	r0, r7, #0
    c2e2:	f7f4 fa07 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:58
	fmodGxyz = fmodGyz + fGp[X] * fGp[X];
    c2e6:	6829      	ldr	r1, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:57
	float fmodGyz;			// modulus of the y, z accelerometer readings
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable

	// compute the accelerometer squared magnitudes
	fmodGyz = fGp[Y] * fGp[Y] + fGp[Z] * fGp[Z];
    c2e8:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:58
	fmodGxyz = fmodGyz + fGp[X] * fGp[X];
    c2ea:	1c08      	adds	r0, r1, #0
    c2ec:	f7f4 fd52 	bl	d94 <__aeabi_fmul>
    c2f0:	1c39      	adds	r1, r7, #0
    c2f2:	f7f4 f9ff 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:61

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
    c2f6:	2600      	movs	r6, #0
    c2f8:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:58
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable

	// compute the accelerometer squared magnitudes
	fmodGyz = fGp[Y] * fGp[Y] + fGp[Z] * fGp[Z];
	fmodGxyz = fmodGyz + fGp[X] * fGp[X];
    c2fa:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:61

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
    c2fc:	f7f4 f9cc 	bl	698 <__aeabi_fcmpeq>
    c300:	2800      	cmp	r0, #0
    c302:	d167      	bne.n	c3d4 <f3DOFTiltNED+0x118>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:68
		f3x3matrixAeqI(fR);
		return;
	}

	// check for vertical up or down gimbal lock case
	if (fmodGyz == 0.0F)
    c304:	1c38      	adds	r0, r7, #0
    c306:	1c31      	adds	r1, r6, #0
    c308:	f7f4 f9c6 	bl	698 <__aeabi_fcmpeq>
    c30c:	2800      	cmp	r0, #0
    c30e:	d010      	beq.n	c332 <f3DOFTiltNED+0x76>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:71
	{
		f3x3matrixAeqScalar(fR, 0.0F);
		fR[Y][Y] = 1.0F;
    c310:	27fe      	movs	r7, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:70
	}

	// check for vertical up or down gimbal lock case
	if (fmodGyz == 0.0F)
	{
		f3x3matrixAeqScalar(fR, 0.0F);
    c312:	1c20      	adds	r0, r4, #0
    c314:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:71
		fR[Y][Y] = 1.0F;
    c316:	05bf      	lsls	r7, r7, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:70
	}

	// check for vertical up or down gimbal lock case
	if (fmodGyz == 0.0F)
	{
		f3x3matrixAeqScalar(fR, 0.0F);
    c318:	f7ff f9f4 	bl	b704 <f3x3matrixAeqScalar>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:71
		fR[Y][Y] = 1.0F;
    c31c:	6127      	str	r7, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:72
		if (fGp[X] >= 0.0F)
    c31e:	6828      	ldr	r0, [r5, #0]
    c320:	1c31      	adds	r1, r6, #0
    c322:	f7f4 f9dd 	bl	6e0 <__aeabi_fcmpge>
    c326:	2800      	cmp	r0, #0
    c328:	d058      	beq.n	c3dc <f3DOFTiltNED+0x120>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:75
		{
			fR[X][Z] = 1.0F;
			fR[Z][X] = -1.0F;
    c32a:	4b2e      	ldr	r3, [pc, #184]	; (c3e4 <f3DOFTiltNED+0x128>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:74
	{
		f3x3matrixAeqScalar(fR, 0.0F);
		fR[Y][Y] = 1.0F;
		if (fGp[X] >= 0.0F)
		{
			fR[X][Z] = 1.0F;
    c32c:	60a7      	str	r7, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:75
			fR[Z][X] = -1.0F;
    c32e:	61a3      	str	r3, [r4, #24]
    c330:	e04b      	b.n	c3ca <f3DOFTiltNED+0x10e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:86
		}
		return;
	}

	// compute moduli for the general case
	fmodGyz = sqrtf(fmodGyz);
    c332:	1c38      	adds	r0, r7, #0
    c334:	f005 f9c4 	bl	116c0 <sqrtf>
    c338:	4682      	mov	sl, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:87
	fmodGxyz = sqrtf(fmodGxyz);
    c33a:	4640      	mov	r0, r8
    c33c:	f005 f9c0 	bl	116c0 <sqrtf>
    c340:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:88
	frecipmodGxyz = 1.0F / fmodGxyz;
    c342:	20fe      	movs	r0, #254	; 0xfe
    c344:	1c39      	adds	r1, r7, #0
    c346:	0580      	lsls	r0, r0, #22
    c348:	f7f4 fb40 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:89
	ftmp = fmodGxyz / fmodGyz;
    c34c:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:88
	}

	// compute moduli for the general case
	fmodGyz = sqrtf(fmodGyz);
	fmodGxyz = sqrtf(fmodGxyz);
	frecipmodGxyz = 1.0F / fmodGxyz;
    c34e:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:89
	ftmp = fmodGxyz / fmodGyz;
    c350:	1c38      	adds	r0, r7, #0
    c352:	f7f4 fb3b 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:94

	// normalize the accelerometer reading into the z column
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i] * frecipmodGxyz;
    c356:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:89

	// compute moduli for the general case
	fmodGyz = sqrtf(fmodGyz);
	fmodGxyz = sqrtf(fmodGxyz);
	frecipmodGxyz = 1.0F / fmodGxyz;
	ftmp = fmodGxyz / fmodGyz;
    c358:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:94

	// normalize the accelerometer reading into the z column
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i] * frecipmodGxyz;
    c35a:	6828      	ldr	r0, [r5, #0]
    c35c:	f7f4 fd1a 	bl	d94 <__aeabi_fmul>
    c360:	60a0      	str	r0, [r4, #8]
    c362:	6868      	ldr	r0, [r5, #4]
    c364:	4641      	mov	r1, r8
    c366:	f7f4 fd15 	bl	d94 <__aeabi_fmul>
    c36a:	6160      	str	r0, [r4, #20]
    c36c:	4681      	mov	r9, r0
    c36e:	4641      	mov	r1, r8
    c370:	68a8      	ldr	r0, [r5, #8]
    c372:	f7f4 fd0f 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:98
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
    c376:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:94
	ftmp = fmodGxyz / fmodGyz;

	// normalize the accelerometer reading into the z column
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i] * frecipmodGxyz;
    c378:	1c05      	adds	r5, r0, #0
    c37a:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:98
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
    c37c:	4650      	mov	r0, sl
    c37e:	f7f4 fd09 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:99
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
    c382:	68a3      	ldr	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:98
	{
		fR[i][Z] = fGp[i] * frecipmodGxyz;
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
    c384:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:99
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
    c386:	4698      	mov	r8, r3
    c388:	2380      	movs	r3, #128	; 0x80
    c38a:	061b      	lsls	r3, r3, #24
    c38c:	4498      	add	r8, r3
    c38e:	4649      	mov	r1, r9
    c390:	4640      	mov	r0, r8
    c392:	f7f4 fcff 	bl	d94 <__aeabi_fmul>
    c396:	1c39      	adds	r1, r7, #0
    c398:	f7f4 fcfc 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:100
	fR[Z][X] = -fR[X][Z] * fR[Z][Z] * ftmp;
    c39c:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:99
		fR[i][Z] = fGp[i] * frecipmodGxyz;
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
    c39e:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:100
	fR[Z][X] = -fR[X][Z] * fR[Z][Z] * ftmp;
    c3a0:	4640      	mov	r0, r8
    c3a2:	f7f4 fcf7 	bl	d94 <__aeabi_fmul>
    c3a6:	1c39      	adds	r1, r7, #0
    c3a8:	f7f4 fcf4 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:104

	// // construct y column of orientation matrix
	fR[X][Y] = 0.0F;
	fR[Y][Y] = fR[Z][Z] * ftmp;
    c3ac:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:100
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
	fR[Z][X] = -fR[X][Z] * fR[Z][Z] * ftmp;
    c3ae:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:103

	// // construct y column of orientation matrix
	fR[X][Y] = 0.0F;
    c3b0:	6066      	str	r6, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:104
	fR[Y][Y] = fR[Z][Z] * ftmp;
    c3b2:	1c38      	adds	r0, r7, #0
    c3b4:	f7f4 fcee 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:105
	fR[Z][Y] = -fR[Y][Z] * ftmp;
    c3b8:	2380      	movs	r3, #128	; 0x80
    c3ba:	061b      	lsls	r3, r3, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:104
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
	fR[Z][X] = -fR[X][Z] * fR[Z][Z] * ftmp;

	// // construct y column of orientation matrix
	fR[X][Y] = 0.0F;
	fR[Y][Y] = fR[Z][Z] * ftmp;
    c3bc:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:105
	fR[Z][Y] = -fR[Y][Z] * ftmp;
    c3be:	1c18      	adds	r0, r3, #0
    c3c0:	4448      	add	r0, r9
    c3c2:	1c39      	adds	r1, r7, #0
    c3c4:	f7f4 fce6 	bl	d94 <__aeabi_fmul>
    c3c8:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:108

	return;
}
    c3ca:	bc1c      	pop	{r2, r3, r4}
    c3cc:	4690      	mov	r8, r2
    c3ce:	4699      	mov	r9, r3
    c3d0:	46a2      	mov	sl, r4
    c3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:63
	fmodGxyz = fmodGyz + fGp[X] * fGp[X];

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
	{
		f3x3matrixAeqI(fR);
    c3d4:	1c20      	adds	r0, r4, #0
    c3d6:	f7ff f987 	bl	b6e8 <f3x3matrixAeqI>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:64
		return;
    c3da:	e7f6      	b.n	c3ca <f3DOFTiltNED+0x10e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:79
			fR[X][Z] = 1.0F;
			fR[Z][X] = -1.0F;
		}
		else
		{
			fR[X][Z] = -1.0F;
    c3dc:	4b01      	ldr	r3, [pc, #4]	; (c3e4 <f3DOFTiltNED+0x128>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:80
			fR[Z][X] = 1.0F;
    c3de:	61a7      	str	r7, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:79
			fR[X][Z] = 1.0F;
			fR[Z][X] = -1.0F;
		}
		else
		{
			fR[X][Z] = -1.0F;
    c3e0:	60a3      	str	r3, [r4, #8]
    c3e2:	e7f2      	b.n	c3ca <f3DOFTiltNED+0x10e>
    c3e4:	bf800000 	.word	0xbf800000

0000c3e8 <f3DOFTiltAndroid>:
f3DOFTiltAndroid():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:112
	return;
}

// Android accelerometer 3DOF tilt function computing rotation matrix fR
void f3DOFTiltAndroid(float fR[][3], float fGp[])
{
    c3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c3ea:	4645      	mov	r5, r8
    c3ec:	4657      	mov	r7, sl
    c3ee:	464e      	mov	r6, r9
    c3f0:	b4e0      	push	{r5, r6, r7}
    c3f2:	1c0d      	adds	r5, r1, #0
f3DOFTiltNED():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:57
	float fmodGyz;			// modulus of the y, z accelerometer readings
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable

	// compute the accelerometer squared magnitudes
	fmodGyz = fGp[Y] * fGp[Y] + fGp[Z] * fGp[Z];
    c3f4:	6849      	ldr	r1, [r1, #4]
f3DOFTiltAndroid():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:112
	return;
}

// Android accelerometer 3DOF tilt function computing rotation matrix fR
void f3DOFTiltAndroid(float fR[][3], float fGp[])
{
    c3f6:	1c04      	adds	r4, r0, #0
f3DOFTiltNED():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:57
	float fmodGyz;			// modulus of the y, z accelerometer readings
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable

	// compute the accelerometer squared magnitudes
	fmodGyz = fGp[Y] * fGp[Y] + fGp[Z] * fGp[Z];
    c3f8:	1c08      	adds	r0, r1, #0
    c3fa:	f7f4 fccb 	bl	d94 <__aeabi_fmul>
    c3fe:	68ae      	ldr	r6, [r5, #8]
    c400:	1c07      	adds	r7, r0, #0
    c402:	1c31      	adds	r1, r6, #0
    c404:	1c30      	adds	r0, r6, #0
    c406:	f7f4 fcc5 	bl	d94 <__aeabi_fmul>
    c40a:	1c01      	adds	r1, r0, #0
    c40c:	1c38      	adds	r0, r7, #0
    c40e:	f7f4 f971 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:58
	fmodGxyz = fmodGyz + fGp[X] * fGp[X];
    c412:	6829      	ldr	r1, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:57
	float fmodGyz;			// modulus of the y, z accelerometer readings
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable

	// compute the accelerometer squared magnitudes
	fmodGyz = fGp[Y] * fGp[Y] + fGp[Z] * fGp[Z];
    c414:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:58
	fmodGxyz = fmodGyz + fGp[X] * fGp[X];
    c416:	1c08      	adds	r0, r1, #0
    c418:	f7f4 fcbc 	bl	d94 <__aeabi_fmul>
    c41c:	1c01      	adds	r1, r0, #0
    c41e:	1c38      	adds	r0, r7, #0
    c420:	f7f4 f968 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:61

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
    c424:	2600      	movs	r6, #0
    c426:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:58
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable

	// compute the accelerometer squared magnitudes
	fmodGyz = fGp[Y] * fGp[Y] + fGp[Z] * fGp[Z];
	fmodGxyz = fmodGyz + fGp[X] * fGp[X];
    c428:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:61

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
    c42a:	f7f4 f935 	bl	698 <__aeabi_fcmpeq>
    c42e:	2800      	cmp	r0, #0
    c430:	d169      	bne.n	c506 <f3DOFTiltAndroid+0x11e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:68
		f3x3matrixAeqI(fR);
		return;
	}

	// check for vertical up or down gimbal lock case
	if (fmodGyz == 0.0F)
    c432:	1c38      	adds	r0, r7, #0
    c434:	1c31      	adds	r1, r6, #0
    c436:	f7f4 f92f 	bl	698 <__aeabi_fcmpeq>
    c43a:	2800      	cmp	r0, #0
    c43c:	d010      	beq.n	c460 <f3DOFTiltAndroid+0x78>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:71
	{
		f3x3matrixAeqScalar(fR, 0.0F);
		fR[Y][Y] = 1.0F;
    c43e:	27fe      	movs	r7, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:70
	}

	// check for vertical up or down gimbal lock case
	if (fmodGyz == 0.0F)
	{
		f3x3matrixAeqScalar(fR, 0.0F);
    c440:	1c20      	adds	r0, r4, #0
    c442:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:71
		fR[Y][Y] = 1.0F;
    c444:	05bf      	lsls	r7, r7, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:70
	}

	// check for vertical up or down gimbal lock case
	if (fmodGyz == 0.0F)
	{
		f3x3matrixAeqScalar(fR, 0.0F);
    c446:	f7ff f95d 	bl	b704 <f3x3matrixAeqScalar>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:71
		fR[Y][Y] = 1.0F;
    c44a:	6127      	str	r7, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:72
		if (fGp[X] >= 0.0F)
    c44c:	6828      	ldr	r0, [r5, #0]
    c44e:	1c31      	adds	r1, r6, #0
    c450:	f7f4 f946 	bl	6e0 <__aeabi_fcmpge>
    c454:	2800      	cmp	r0, #0
    c456:	d05a      	beq.n	c50e <f3DOFTiltAndroid+0x126>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:75
		{
			fR[X][Z] = 1.0F;
			fR[Z][X] = -1.0F;
    c458:	4b2f      	ldr	r3, [pc, #188]	; (c518 <f3DOFTiltAndroid+0x130>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:74
	{
		f3x3matrixAeqScalar(fR, 0.0F);
		fR[Y][Y] = 1.0F;
		if (fGp[X] >= 0.0F)
		{
			fR[X][Z] = 1.0F;
    c45a:	60a7      	str	r7, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:75
			fR[Z][X] = -1.0F;
    c45c:	61a3      	str	r3, [r4, #24]
    c45e:	e04d      	b.n	c4fc <f3DOFTiltAndroid+0x114>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:86
		}
		return;
	}

	// compute moduli for the general case
	fmodGyz = sqrtf(fmodGyz);
    c460:	1c38      	adds	r0, r7, #0
    c462:	f005 f92d 	bl	116c0 <sqrtf>
    c466:	4682      	mov	sl, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:87
	fmodGxyz = sqrtf(fmodGxyz);
    c468:	4640      	mov	r0, r8
    c46a:	f005 f929 	bl	116c0 <sqrtf>
    c46e:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:88
	frecipmodGxyz = 1.0F / fmodGxyz;
    c470:	20fe      	movs	r0, #254	; 0xfe
    c472:	1c39      	adds	r1, r7, #0
    c474:	0580      	lsls	r0, r0, #22
    c476:	f7f4 faa9 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:89
	ftmp = fmodGxyz / fmodGyz;
    c47a:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:88
	}

	// compute moduli for the general case
	fmodGyz = sqrtf(fmodGyz);
	fmodGxyz = sqrtf(fmodGxyz);
	frecipmodGxyz = 1.0F / fmodGxyz;
    c47c:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:89
	ftmp = fmodGxyz / fmodGyz;
    c47e:	1c38      	adds	r0, r7, #0
    c480:	f7f4 faa4 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:94

	// normalize the accelerometer reading into the z column
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i] * frecipmodGxyz;
    c484:	6829      	ldr	r1, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:89

	// compute moduli for the general case
	fmodGyz = sqrtf(fmodGyz);
	fmodGxyz = sqrtf(fmodGxyz);
	frecipmodGxyz = 1.0F / fmodGxyz;
	ftmp = fmodGxyz / fmodGyz;
    c486:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:94

	// normalize the accelerometer reading into the z column
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i] * frecipmodGxyz;
    c488:	4640      	mov	r0, r8
    c48a:	f7f4 fc83 	bl	d94 <__aeabi_fmul>
    c48e:	60a0      	str	r0, [r4, #8]
    c490:	6869      	ldr	r1, [r5, #4]
    c492:	4640      	mov	r0, r8
    c494:	f7f4 fc7e 	bl	d94 <__aeabi_fmul>
    c498:	6160      	str	r0, [r4, #20]
    c49a:	68a9      	ldr	r1, [r5, #8]
    c49c:	4681      	mov	r9, r0
    c49e:	4640      	mov	r0, r8
    c4a0:	f7f4 fc78 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:98
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
    c4a4:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:94
	ftmp = fmodGxyz / fmodGyz;

	// normalize the accelerometer reading into the z column
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i] * frecipmodGxyz;
    c4a6:	1c05      	adds	r5, r0, #0
    c4a8:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:98
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
    c4aa:	4650      	mov	r0, sl
    c4ac:	f7f4 fc72 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:99
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
    c4b0:	68a3      	ldr	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:98
	{
		fR[i][Z] = fGp[i] * frecipmodGxyz;
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
    c4b2:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:99
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
    c4b4:	4698      	mov	r8, r3
    c4b6:	2380      	movs	r3, #128	; 0x80
    c4b8:	061b      	lsls	r3, r3, #24
    c4ba:	4498      	add	r8, r3
    c4bc:	4649      	mov	r1, r9
    c4be:	4640      	mov	r0, r8
    c4c0:	f7f4 fc68 	bl	d94 <__aeabi_fmul>
    c4c4:	1c01      	adds	r1, r0, #0
    c4c6:	1c38      	adds	r0, r7, #0
    c4c8:	f7f4 fc64 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:100
	fR[Z][X] = -fR[X][Z] * fR[Z][Z] * ftmp;
    c4cc:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:99
		fR[i][Z] = fGp[i] * frecipmodGxyz;
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
    c4ce:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:100
	fR[Z][X] = -fR[X][Z] * fR[Z][Z] * ftmp;
    c4d0:	4640      	mov	r0, r8
    c4d2:	f7f4 fc5f 	bl	d94 <__aeabi_fmul>
    c4d6:	1c01      	adds	r1, r0, #0
    c4d8:	1c38      	adds	r0, r7, #0
    c4da:	f7f4 fc5b 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:104

	// // construct y column of orientation matrix
	fR[X][Y] = 0.0F;
	fR[Y][Y] = fR[Z][Z] * ftmp;
    c4de:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:100
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
	fR[Z][X] = -fR[X][Z] * fR[Z][Z] * ftmp;
    c4e0:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:103

	// // construct y column of orientation matrix
	fR[X][Y] = 0.0F;
    c4e2:	6066      	str	r6, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:104
	fR[Y][Y] = fR[Z][Z] * ftmp;
    c4e4:	1c38      	adds	r0, r7, #0
    c4e6:	f7f4 fc55 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:105
	fR[Z][Y] = -fR[Y][Z] * ftmp;
    c4ea:	2380      	movs	r3, #128	; 0x80
    c4ec:	061b      	lsls	r3, r3, #24
    c4ee:	1c19      	adds	r1, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:104
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
	fR[Z][X] = -fR[X][Z] * fR[Z][Z] * ftmp;

	// // construct y column of orientation matrix
	fR[X][Y] = 0.0F;
	fR[Y][Y] = fR[Z][Z] * ftmp;
    c4f0:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:105
	fR[Z][Y] = -fR[Y][Z] * ftmp;
    c4f2:	4449      	add	r1, r9
    c4f4:	1c38      	adds	r0, r7, #0
    c4f6:	f7f4 fc4d 	bl	d94 <__aeabi_fmul>
    c4fa:	61e0      	str	r0, [r4, #28]
f3DOFTiltAndroid():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:117
{
	// the Android tilt matrix is mathematically identical to the NED tilt matrix
	// the Android self-consistency twist occurs at 90 deg roll
	f3DOFTiltNED(fR, fGp);
	return;
}
    c4fc:	bc1c      	pop	{r2, r3, r4}
    c4fe:	4690      	mov	r8, r2
    c500:	4699      	mov	r9, r3
    c502:	46a2      	mov	sl, r4
    c504:	bdf0      	pop	{r4, r5, r6, r7, pc}
f3DOFTiltNED():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:63
	fmodGxyz = fmodGyz + fGp[X] * fGp[X];

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
	{
		f3x3matrixAeqI(fR);
    c506:	1c20      	adds	r0, r4, #0
    c508:	f7ff f8ee 	bl	b6e8 <f3x3matrixAeqI>
    c50c:	e7f6      	b.n	c4fc <f3DOFTiltAndroid+0x114>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:79
			fR[X][Z] = 1.0F;
			fR[Z][X] = -1.0F;
		}
		else
		{
			fR[X][Z] = -1.0F;
    c50e:	4b02      	ldr	r3, [pc, #8]	; (c518 <f3DOFTiltAndroid+0x130>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:80
			fR[Z][X] = 1.0F;
    c510:	61a7      	str	r7, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:79
			fR[X][Z] = 1.0F;
			fR[Z][X] = -1.0F;
		}
		else
		{
			fR[X][Z] = -1.0F;
    c512:	60a3      	str	r3, [r4, #8]
    c514:	e7f2      	b.n	c4fc <f3DOFTiltAndroid+0x114>
    c516:	46c0      	nop			; (mov r8, r8)
    c518:	bf800000 	.word	0xbf800000

0000c51c <f3DOFTiltWin8>:
f3DOFTiltWin8():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:121
	return;
}

// Windows 8 accelerometer 3DOF tilt function computing rotation matrix fR
void f3DOFTiltWin8(float fR[][3], float fGp[])
{
    c51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c51e:	465f      	mov	r7, fp
    c520:	4656      	mov	r6, sl
    c522:	464d      	mov	r5, r9
    c524:	4644      	mov	r4, r8
    c526:	b4f0      	push	{r4, r5, r6, r7}
    c528:	1c0d      	adds	r5, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:132
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable
	int8 i;					// counter

	// compute the accelerometer squared magnitudes
	fmodGxz = fGp[X] * fGp[X] + fGp[Z] * fGp[Z];
    c52a:	6809      	ldr	r1, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:121
	return;
}

// Windows 8 accelerometer 3DOF tilt function computing rotation matrix fR
void f3DOFTiltWin8(float fR[][3], float fGp[])
{
    c52c:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:132
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable
	int8 i;					// counter

	// compute the accelerometer squared magnitudes
	fmodGxz = fGp[X] * fGp[X] + fGp[Z] * fGp[Z];
    c52e:	1c08      	adds	r0, r1, #0
    c530:	f7f4 fc30 	bl	d94 <__aeabi_fmul>
    c534:	68ae      	ldr	r6, [r5, #8]
    c536:	1c07      	adds	r7, r0, #0
    c538:	1c31      	adds	r1, r6, #0
    c53a:	1c30      	adds	r0, r6, #0
    c53c:	f7f4 fc2a 	bl	d94 <__aeabi_fmul>
    c540:	1c01      	adds	r1, r0, #0
    c542:	1c38      	adds	r0, r7, #0
    c544:	f7f4 f8d6 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:133
	fmodGxyz = fmodGxz + fGp[Y] * fGp[Y];
    c548:	6869      	ldr	r1, [r5, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:132
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable
	int8 i;					// counter

	// compute the accelerometer squared magnitudes
	fmodGxz = fGp[X] * fGp[X] + fGp[Z] * fGp[Z];
    c54a:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:133
	fmodGxyz = fmodGxz + fGp[Y] * fGp[Y];
    c54c:	1c08      	adds	r0, r1, #0
    c54e:	f7f4 fc21 	bl	d94 <__aeabi_fmul>
    c552:	1c31      	adds	r1, r6, #0
    c554:	f7f4 f8ce 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:136

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
    c558:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:133
	float ftmp;				// scratch variable
	int8 i;					// counter

	// compute the accelerometer squared magnitudes
	fmodGxz = fGp[X] * fGp[X] + fGp[Z] * fGp[Z];
	fmodGxyz = fmodGxz + fGp[Y] * fGp[Y];
    c55a:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:136

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
    c55c:	f7f4 f89c 	bl	698 <__aeabi_fcmpeq>
    c560:	2800      	cmp	r0, #0
    c562:	d000      	beq.n	c566 <f3DOFTiltWin8+0x4a>
    c564:	e07e      	b.n	c664 <f3DOFTiltWin8+0x148>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:143
		f3x3matrixAeqI(fR);
		return;
	}

	// check for vertical up or down gimbal lock case
	if (fmodGxz == 0.0F)
    c566:	1c30      	adds	r0, r6, #0
    c568:	2100      	movs	r1, #0
    c56a:	f7f4 f895 	bl	698 <__aeabi_fcmpeq>
    c56e:	2800      	cmp	r0, #0
    c570:	d167      	bne.n	c642 <f3DOFTiltWin8+0x126>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:161
		}
		return;
	}

	// compute moduli for the general case
	fmodGxz = sqrtf(fmodGxz);
    c572:	1c30      	adds	r0, r6, #0
    c574:	f005 f8a4 	bl	116c0 <sqrtf>
    c578:	4683      	mov	fp, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:162
	fmodGxyz = sqrtf(fmodGxyz);
    c57a:	1c38      	adds	r0, r7, #0
    c57c:	f005 f8a0 	bl	116c0 <sqrtf>
    c580:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:163
	frecipmodGxyz = 1.0F / fmodGxyz;
    c582:	20fe      	movs	r0, #254	; 0xfe
    c584:	1c31      	adds	r1, r6, #0
    c586:	0580      	lsls	r0, r0, #22
    c588:	f7f4 fa20 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:164
	ftmp = fmodGxyz / fmodGxz;
    c58c:	4659      	mov	r1, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:163
	}

	// compute moduli for the general case
	fmodGxz = sqrtf(fmodGxz);
	fmodGxyz = sqrtf(fmodGxyz);
	frecipmodGxyz = 1.0F / fmodGxyz;
    c58e:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:164
	ftmp = fmodGxyz / fmodGxz;
    c590:	1c30      	adds	r0, r6, #0
    c592:	f7f4 fa1b 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:165
	if (fGp[Z] < 0.0F)
    c596:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:164

	// compute moduli for the general case
	fmodGxz = sqrtf(fmodGxz);
	fmodGxyz = sqrtf(fmodGxyz);
	frecipmodGxyz = 1.0F / fmodGxyz;
	ftmp = fmodGxyz / fmodGxz;
    c598:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:165
	if (fGp[Z] < 0.0F)
    c59a:	68a8      	ldr	r0, [r5, #8]
    c59c:	f7f4 f882 	bl	6a4 <__aeabi_fcmplt>
    c5a0:	2800      	cmp	r0, #0
    c5a2:	d163      	bne.n	c66c <f3DOFTiltWin8+0x150>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:173
	}

	// normalize the negated accelerometer reading into the z column
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i] * frecipmodGxyz;
    c5a4:	682b      	ldr	r3, [r5, #0]
    c5a6:	2280      	movs	r2, #128	; 0x80
    c5a8:	0612      	lsls	r2, r2, #24
    c5aa:	1898      	adds	r0, r3, r2
    c5ac:	1c39      	adds	r1, r7, #0
    c5ae:	f7f4 fbf1 	bl	d94 <__aeabi_fmul>
    c5b2:	60a0      	str	r0, [r4, #8]
    c5b4:	686b      	ldr	r3, [r5, #4]
    c5b6:	2280      	movs	r2, #128	; 0x80
    c5b8:	0612      	lsls	r2, r2, #24
    c5ba:	4682      	mov	sl, r0
    c5bc:	1c39      	adds	r1, r7, #0
    c5be:	1898      	adds	r0, r3, r2
    c5c0:	f7f4 fbe8 	bl	d94 <__aeabi_fmul>
    c5c4:	6160      	str	r0, [r4, #20]
    c5c6:	68ab      	ldr	r3, [r5, #8]
    c5c8:	2280      	movs	r2, #128	; 0x80
    c5ca:	0612      	lsls	r2, r2, #24
    c5cc:	1c39      	adds	r1, r7, #0
    c5ce:	4680      	mov	r8, r0
    c5d0:	1898      	adds	r0, r3, r2
    c5d2:	f7f4 fbdf 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:177
	}

	// construct x column of orientation matrix
	fR[X][X] = -fR[Z][Z] * ftmp;
    c5d6:	2380      	movs	r3, #128	; 0x80
    c5d8:	061b      	lsls	r3, r3, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:173
	}

	// normalize the negated accelerometer reading into the z column
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i] * frecipmodGxyz;
    c5da:	4681      	mov	r9, r0
    c5dc:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:177
	}

	// construct x column of orientation matrix
	fR[X][X] = -fR[Z][Z] * ftmp;
    c5de:	1c18      	adds	r0, r3, #0
    c5e0:	1c31      	adds	r1, r6, #0
    c5e2:	4448      	add	r0, r9
    c5e4:	f7f4 fbd6 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:178
	fR[Y][X] = 0.0F;
    c5e8:	2200      	movs	r2, #0
    c5ea:	60e2      	str	r2, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:177
	{
		fR[i][Z] = -fGp[i] * frecipmodGxyz;
	}

	// construct x column of orientation matrix
	fR[X][X] = -fR[Z][Z] * ftmp;
    c5ec:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:179
	fR[Y][X] = 0.0F;
	fR[Z][X] = fR[X][Z] * ftmp;;
    c5ee:	1c31      	adds	r1, r6, #0
    c5f0:	4650      	mov	r0, sl
    c5f2:	f7f4 fbcf 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:182

	// // construct y column of orientation matrix
	fR[X][Y] = fR[X][Z] * fR[Y][Z] * ftmp;
    c5f6:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:179
	}

	// construct x column of orientation matrix
	fR[X][X] = -fR[Z][Z] * ftmp;
	fR[Y][X] = 0.0F;
	fR[Z][X] = fR[X][Z] * ftmp;;
    c5f8:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:182

	// // construct y column of orientation matrix
	fR[X][Y] = fR[X][Z] * fR[Y][Z] * ftmp;
    c5fa:	4650      	mov	r0, sl
    c5fc:	f7f4 fbca 	bl	d94 <__aeabi_fmul>
    c600:	1c31      	adds	r1, r6, #0
    c602:	f7f4 fbc7 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:183
	fR[Y][Y] = -fmodGxz * frecipmodGxyz;
    c606:	2380      	movs	r3, #128	; 0x80
    c608:	061b      	lsls	r3, r3, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:182
	fR[X][X] = -fR[Z][Z] * ftmp;
	fR[Y][X] = 0.0F;
	fR[Z][X] = fR[X][Z] * ftmp;;

	// // construct y column of orientation matrix
	fR[X][Y] = fR[X][Z] * fR[Y][Z] * ftmp;
    c60a:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:183
	fR[Y][Y] = -fmodGxz * frecipmodGxyz;
    c60c:	1c18      	adds	r0, r3, #0
    c60e:	1c39      	adds	r1, r7, #0
    c610:	4458      	add	r0, fp
    c612:	f7f4 fbbf 	bl	d94 <__aeabi_fmul>
    c616:	6120      	str	r0, [r4, #16]
    c618:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:184
	if (fGp[Z] < 0.0F)
    c61a:	2100      	movs	r1, #0
    c61c:	68a8      	ldr	r0, [r5, #8]
    c61e:	f7f4 f841 	bl	6a4 <__aeabi_fcmplt>
    c622:	2800      	cmp	r0, #0
    c624:	d12a      	bne.n	c67c <f3DOFTiltWin8+0x160>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:188
	{
		fR[Y][Y] = -fR[Y][Y];
	}	
	fR[Z][Y] = fR[Y][Z] * fR[Z][Z] * ftmp;
    c626:	4641      	mov	r1, r8
    c628:	4648      	mov	r0, r9
    c62a:	f7f4 fbb3 	bl	d94 <__aeabi_fmul>
    c62e:	1c31      	adds	r1, r6, #0
    c630:	f7f4 fbb0 	bl	d94 <__aeabi_fmul>
    c634:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:191

	return;
}
    c636:	bc3c      	pop	{r2, r3, r4, r5}
    c638:	4690      	mov	r8, r2
    c63a:	4699      	mov	r9, r3
    c63c:	46a2      	mov	sl, r4
    c63e:	46ab      	mov	fp, r5
    c640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:146

	// check for vertical up or down gimbal lock case
	if (fmodGxz == 0.0F)
	{
		f3x3matrixAeqScalar(fR, 0.0F);
		fR[X][X] = 1.0F;
    c642:	26fe      	movs	r6, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:145
	}

	// check for vertical up or down gimbal lock case
	if (fmodGxz == 0.0F)
	{
		f3x3matrixAeqScalar(fR, 0.0F);
    c644:	1c20      	adds	r0, r4, #0
    c646:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:146
		fR[X][X] = 1.0F;
    c648:	05b6      	lsls	r6, r6, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:145
	}

	// check for vertical up or down gimbal lock case
	if (fmodGxz == 0.0F)
	{
		f3x3matrixAeqScalar(fR, 0.0F);
    c64a:	f7ff f85b 	bl	b704 <f3x3matrixAeqScalar>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:146
		fR[X][X] = 1.0F;
    c64e:	6026      	str	r6, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:147
		if (fGp[Y] >= 0.0F)
    c650:	6868      	ldr	r0, [r5, #4]
    c652:	2100      	movs	r1, #0
    c654:	f7f4 f844 	bl	6e0 <__aeabi_fcmpge>
    c658:	2800      	cmp	r0, #0
    c65a:	d00b      	beq.n	c674 <f3DOFTiltWin8+0x158>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:149
		{
			fR[Y][Z] = -1.0F;
    c65c:	4b0a      	ldr	r3, [pc, #40]	; (c688 <f3DOFTiltWin8+0x16c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:150
			fR[Z][Y] = 1.0F;
    c65e:	61e6      	str	r6, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:149
	{
		f3x3matrixAeqScalar(fR, 0.0F);
		fR[X][X] = 1.0F;
		if (fGp[Y] >= 0.0F)
		{
			fR[Y][Z] = -1.0F;
    c660:	6163      	str	r3, [r4, #20]
    c662:	e7e8      	b.n	c636 <f3DOFTiltWin8+0x11a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:138
	fmodGxyz = fmodGxz + fGp[Y] * fGp[Y];

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
	{
		f3x3matrixAeqI(fR);
    c664:	1c20      	adds	r0, r4, #0
    c666:	f7ff f83f 	bl	b6e8 <f3x3matrixAeqI>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:139
		return;
    c66a:	e7e4      	b.n	c636 <f3DOFTiltWin8+0x11a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:167
	fmodGxyz = sqrtf(fmodGxyz);
	frecipmodGxyz = 1.0F / fmodGxyz;
	ftmp = fmodGxyz / fmodGxz;
	if (fGp[Z] < 0.0F)
	{
		ftmp = -ftmp;
    c66c:	2280      	movs	r2, #128	; 0x80
    c66e:	0612      	lsls	r2, r2, #24
    c670:	18b6      	adds	r6, r6, r2
    c672:	e797      	b.n	c5a4 <f3DOFTiltWin8+0x88>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:155
			fR[Z][Y] = 1.0F;
		}
		else
		{
			fR[Y][Z] = 1.0F;
			fR[Z][Y] = -1.0F;
    c674:	4b04      	ldr	r3, [pc, #16]	; (c688 <f3DOFTiltWin8+0x16c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:154
			fR[Y][Z] = -1.0F;
			fR[Z][Y] = 1.0F;
		}
		else
		{
			fR[Y][Z] = 1.0F;
    c676:	6166      	str	r6, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:155
			fR[Z][Y] = -1.0F;
    c678:	61e3      	str	r3, [r4, #28]
    c67a:	e7dc      	b.n	c636 <f3DOFTiltWin8+0x11a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:186
	// // construct y column of orientation matrix
	fR[X][Y] = fR[X][Z] * fR[Y][Z] * ftmp;
	fR[Y][Y] = -fmodGxz * frecipmodGxyz;
	if (fGp[Z] < 0.0F)
	{
		fR[Y][Y] = -fR[Y][Y];
    c67c:	2280      	movs	r2, #128	; 0x80
    c67e:	0612      	lsls	r2, r2, #24
    c680:	18bf      	adds	r7, r7, r2
    c682:	6127      	str	r7, [r4, #16]
    c684:	e7cf      	b.n	c626 <f3DOFTiltWin8+0x10a>
    c686:	46c0      	nop			; (mov r8, r8)
    c688:	bf800000 	.word	0xbf800000

0000c68c <f3DOFMagnetometerMatrixNED>:
f3DOFMagnetometerMatrixNED():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:195
	return;
}

// Aerospace NED magnetometer 3DOF flat eCompass function computing rotation matrix fR
void f3DOFMagnetometerMatrixNED(float fR[][3], float fBc[])
{	
    c68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c68e:	1c0e      	adds	r6, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:200
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    c690:	6809      	ldr	r1, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:195
	return;
}

// Aerospace NED magnetometer 3DOF flat eCompass function computing rotation matrix fR
void f3DOFMagnetometerMatrixNED(float fR[][3], float fBc[])
{	
    c692:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:200
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    c694:	1c08      	adds	r0, r1, #0
    c696:	f7f4 fb7d 	bl	d94 <__aeabi_fmul>
    c69a:	6875      	ldr	r5, [r6, #4]
    c69c:	1c07      	adds	r7, r0, #0
    c69e:	1c29      	adds	r1, r5, #0
    c6a0:	1c28      	adds	r0, r5, #0
    c6a2:	f7f4 fb77 	bl	d94 <__aeabi_fmul>
    c6a6:	1c01      	adds	r1, r0, #0
    c6a8:	1c38      	adds	r0, r7, #0
    c6aa:	f7f4 f823 	bl	6f4 <__aeabi_fadd>
    c6ae:	f005 f807 	bl	116c0 <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:203

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
    c6b2:	2500      	movs	r5, #0
    c6b4:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:200
{	
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    c6b6:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:203

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
    c6b8:	f7f3 ffee 	bl	698 <__aeabi_fcmpeq>
    c6bc:	2800      	cmp	r0, #0
    c6be:	d116      	bne.n	c6ee <f3DOFMagnetometerMatrixNED+0x62>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:211
		return;
	}

	// define the fixed entries in the z row and column
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
	fR[Z][Z] = 1.0F;
    c6c0:	23fe      	movs	r3, #254	; 0xfe
    c6c2:	059b      	lsls	r3, r3, #22
    c6c4:	6223      	str	r3, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:210
		f3x3matrixAeqI(fR);
		return;
	}

	// define the fixed entries in the z row and column
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
    c6c6:	6165      	str	r5, [r4, #20]
    c6c8:	60a5      	str	r5, [r4, #8]
    c6ca:	61e5      	str	r5, [r4, #28]
    c6cc:	61a5      	str	r5, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:214
	fR[Z][Z] = 1.0F;
	
	// define the remaining entries
	fR[X][X] = fR[Y][Y] = fBc[X] / fmodBxy;
    c6ce:	6830      	ldr	r0, [r6, #0]
    c6d0:	1c39      	adds	r1, r7, #0
    c6d2:	f7f4 f97b 	bl	9cc <__aeabi_fdiv>
    c6d6:	6120      	str	r0, [r4, #16]
    c6d8:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:215
	fR[Y][X] = fBc[Y] / fmodBxy;
    c6da:	6870      	ldr	r0, [r6, #4]
    c6dc:	1c39      	adds	r1, r7, #0
    c6de:	f7f4 f975 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:216
	fR[X][Y] = -fR[Y][X];
    c6e2:	2380      	movs	r3, #128	; 0x80
    c6e4:	061b      	lsls	r3, r3, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:215
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
	fR[Z][Z] = 1.0F;
	
	// define the remaining entries
	fR[X][X] = fR[Y][Y] = fBc[X] / fmodBxy;
	fR[Y][X] = fBc[Y] / fmodBxy;
    c6e6:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:216
	fR[X][Y] = -fR[Y][X];
    c6e8:	18c0      	adds	r0, r0, r3
    c6ea:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:219

	return;
}
    c6ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:205
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
	{
		f3x3matrixAeqI(fR);
    c6ee:	1c20      	adds	r0, r4, #0
    c6f0:	f7fe fffa 	bl	b6e8 <f3x3matrixAeqI>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:206
		return;
    c6f4:	e7fa      	b.n	c6ec <f3DOFMagnetometerMatrixNED+0x60>
    c6f6:	46c0      	nop			; (mov r8, r8)

0000c6f8 <f3DOFMagnetometerMatrixAndroid>:
f3DOFMagnetometerMatrixAndroid():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:223
	return;
}

// Android magnetometer 3DOF flat eCompass function computing rotation matrix fR
void f3DOFMagnetometerMatrixAndroid(float fR[][3], float fBc[])
{	
    c6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c6fa:	1c0e      	adds	r6, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:228
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    c6fc:	6809      	ldr	r1, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:223
	return;
}

// Android magnetometer 3DOF flat eCompass function computing rotation matrix fR
void f3DOFMagnetometerMatrixAndroid(float fR[][3], float fBc[])
{	
    c6fe:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:228
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    c700:	1c08      	adds	r0, r1, #0
    c702:	f7f4 fb47 	bl	d94 <__aeabi_fmul>
    c706:	6875      	ldr	r5, [r6, #4]
    c708:	1c07      	adds	r7, r0, #0
    c70a:	1c29      	adds	r1, r5, #0
    c70c:	1c28      	adds	r0, r5, #0
    c70e:	f7f4 fb41 	bl	d94 <__aeabi_fmul>
    c712:	1c01      	adds	r1, r0, #0
    c714:	1c38      	adds	r0, r7, #0
    c716:	f7f3 ffed 	bl	6f4 <__aeabi_fadd>
    c71a:	f004 ffd1 	bl	116c0 <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:231

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
    c71e:	2500      	movs	r5, #0
    c720:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:228
{	
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    c722:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:231

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
    c724:	f7f3 ffb8 	bl	698 <__aeabi_fcmpeq>
    c728:	2800      	cmp	r0, #0
    c72a:	d116      	bne.n	c75a <f3DOFMagnetometerMatrixAndroid+0x62>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:239
		return;
	}

	// define the fixed entries in the z row and column
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
	fR[Z][Z] = 1.0F;
    c72c:	23fe      	movs	r3, #254	; 0xfe
    c72e:	059b      	lsls	r3, r3, #22
    c730:	6223      	str	r3, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:238
		f3x3matrixAeqI(fR);
		return;
	}

	// define the fixed entries in the z row and column
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
    c732:	6165      	str	r5, [r4, #20]
    c734:	60a5      	str	r5, [r4, #8]
    c736:	61e5      	str	r5, [r4, #28]
    c738:	61a5      	str	r5, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:242
	fR[Z][Z] = 1.0F;
	
	// define the remaining entries
	fR[X][X] = fR[Y][Y] = fBc[Y] / fmodBxy;
    c73a:	6870      	ldr	r0, [r6, #4]
    c73c:	1c39      	adds	r1, r7, #0
    c73e:	f7f4 f945 	bl	9cc <__aeabi_fdiv>
    c742:	6120      	str	r0, [r4, #16]
    c744:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:243
	fR[X][Y] = fBc[X] / fmodBxy;
    c746:	6830      	ldr	r0, [r6, #0]
    c748:	1c39      	adds	r1, r7, #0
    c74a:	f7f4 f93f 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:244
	fR[Y][X] = -fR[X][Y];
    c74e:	2380      	movs	r3, #128	; 0x80
    c750:	061b      	lsls	r3, r3, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:243
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
	fR[Z][Z] = 1.0F;
	
	// define the remaining entries
	fR[X][X] = fR[Y][Y] = fBc[Y] / fmodBxy;
	fR[X][Y] = fBc[X] / fmodBxy;
    c752:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:244
	fR[Y][X] = -fR[X][Y];
    c754:	18c0      	adds	r0, r0, r3
    c756:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:247

	return;
}
    c758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:233
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
	{
		f3x3matrixAeqI(fR);
    c75a:	1c20      	adds	r0, r4, #0
    c75c:	f7fe ffc4 	bl	b6e8 <f3x3matrixAeqI>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:234
		return;
    c760:	e7fa      	b.n	c758 <f3DOFMagnetometerMatrixAndroid+0x60>
    c762:	46c0      	nop			; (mov r8, r8)

0000c764 <f3DOFMagnetometerMatrixWin8>:
f3DOFMagnetometerMatrixWin8():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:251
	return;
}

// Windows 8 magnetometer 3DOF flat eCompass function computing rotation matrix fR
void f3DOFMagnetometerMatrixWin8(float fR[][3], float fBc[])
{	
    c764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c766:	1c0e      	adds	r6, r1, #0
f3DOFMagnetometerMatrixAndroid():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:228
{	
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    c768:	6809      	ldr	r1, [r1, #0]
f3DOFMagnetometerMatrixWin8():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:251
	return;
}

// Windows 8 magnetometer 3DOF flat eCompass function computing rotation matrix fR
void f3DOFMagnetometerMatrixWin8(float fR[][3], float fBc[])
{	
    c76a:	1c04      	adds	r4, r0, #0
f3DOFMagnetometerMatrixAndroid():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:228
{	
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    c76c:	1c08      	adds	r0, r1, #0
    c76e:	f7f4 fb11 	bl	d94 <__aeabi_fmul>
    c772:	6875      	ldr	r5, [r6, #4]
    c774:	1c07      	adds	r7, r0, #0
    c776:	1c29      	adds	r1, r5, #0
    c778:	1c28      	adds	r0, r5, #0
    c77a:	f7f4 fb0b 	bl	d94 <__aeabi_fmul>
    c77e:	1c01      	adds	r1, r0, #0
    c780:	1c38      	adds	r0, r7, #0
    c782:	f7f3 ffb7 	bl	6f4 <__aeabi_fadd>
    c786:	f004 ff9b 	bl	116c0 <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:231

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
    c78a:	2500      	movs	r5, #0
    c78c:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:228
{	
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    c78e:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:231

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
    c790:	f7f3 ff82 	bl	698 <__aeabi_fcmpeq>
    c794:	2800      	cmp	r0, #0
    c796:	d116      	bne.n	c7c6 <f3DOFMagnetometerMatrixWin8+0x62>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:239
		return;
	}

	// define the fixed entries in the z row and column
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
	fR[Z][Z] = 1.0F;
    c798:	23fe      	movs	r3, #254	; 0xfe
    c79a:	059b      	lsls	r3, r3, #22
    c79c:	6223      	str	r3, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:238
		f3x3matrixAeqI(fR);
		return;
	}

	// define the fixed entries in the z row and column
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
    c79e:	6165      	str	r5, [r4, #20]
    c7a0:	60a5      	str	r5, [r4, #8]
    c7a2:	61e5      	str	r5, [r4, #28]
    c7a4:	61a5      	str	r5, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:242
	fR[Z][Z] = 1.0F;
	
	// define the remaining entries
	fR[X][X] = fR[Y][Y] = fBc[Y] / fmodBxy;
    c7a6:	6870      	ldr	r0, [r6, #4]
    c7a8:	1c39      	adds	r1, r7, #0
    c7aa:	f7f4 f90f 	bl	9cc <__aeabi_fdiv>
    c7ae:	6120      	str	r0, [r4, #16]
    c7b0:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:243
	fR[X][Y] = fBc[X] / fmodBxy;
    c7b2:	6830      	ldr	r0, [r6, #0]
    c7b4:	1c39      	adds	r1, r7, #0
    c7b6:	f7f4 f909 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:244
	fR[Y][X] = -fR[X][Y];
    c7ba:	2380      	movs	r3, #128	; 0x80
    c7bc:	061b      	lsls	r3, r3, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:243
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
	fR[Z][Z] = 1.0F;
	
	// define the remaining entries
	fR[X][X] = fR[Y][Y] = fBc[Y] / fmodBxy;
	fR[X][Y] = fBc[X] / fmodBxy;
    c7be:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:244
	fR[Y][X] = -fR[X][Y];
    c7c0:	18c0      	adds	r0, r0, r3
    c7c2:	60e0      	str	r0, [r4, #12]
f3DOFMagnetometerMatrixWin8():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:256
{	
	// call the Android function since it is identical to the Windows 8 matrix
	f3DOFMagnetometerMatrixAndroid(fR, fBc);

	return;
}
    c7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
f3DOFMagnetometerMatrixAndroid():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:233
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
	{
		f3x3matrixAeqI(fR);
    c7c6:	1c20      	adds	r0, r4, #0
    c7c8:	f7fe ff8e 	bl	b6e8 <f3x3matrixAeqI>
    c7cc:	e7fa      	b.n	c7c4 <f3DOFMagnetometerMatrixWin8+0x60>
f3DOFMagnetometerMatrixWin8():
    c7ce:	46c0      	nop			; (mov r8, r8)

0000c7d0 <feCompassNED>:
feCompassNED():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:260
	return;
}

// NED: 6DOF e-Compass function computing rotation matrix fR
void feCompassNED(float fR[][3], float *pfDelta, float fBc[], float fGp[])
{
    c7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c7d2:	465f      	mov	r7, fp
    c7d4:	4656      	mov	r6, sl
    c7d6:	464d      	mov	r5, r9
    c7d8:	4644      	mov	r4, r8
    c7da:	b4f0      	push	{r4, r5, r6, r7}
    c7dc:	b089      	sub	sp, #36	; 0x24
    c7de:	9200      	str	r2, [sp, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:269
	float fGdotBc;					// dot product of vectors G.Bc
	float ftmp;						// scratch variable
	int8 i, j;						// loop counters

	// set the inclination angle to zero in case it is not computed later
	*pfDelta = 0.0F;
    c7e0:	2200      	movs	r2, #0
    c7e2:	600a      	str	r2, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:274

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    c7e4:	681d      	ldr	r5, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:260
	return;
}

// NED: 6DOF e-Compass function computing rotation matrix fR
void feCompassNED(float fR[][3], float *pfDelta, float fBc[], float fGp[])
{
    c7e6:	9301      	str	r3, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:275

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
		fR[i][X] = fBc[i];
    c7e8:	9b00      	ldr	r3, [sp, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:274
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    c7ea:	6085      	str	r5, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:275
		fR[i][X] = fBc[i];
    c7ec:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:274
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    c7ee:	9a01      	ldr	r2, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:275
		fR[i][X] = fBc[i];
    c7f0:	6003      	str	r3, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:274
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    c7f2:	6856      	ldr	r6, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:275
		fR[i][X] = fBc[i];
    c7f4:	4699      	mov	r9, r3
    c7f6:	9b00      	ldr	r3, [sp, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:274
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    c7f8:	6146      	str	r6, [r0, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:275
		fR[i][X] = fBc[i];
    c7fa:	685b      	ldr	r3, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:260
	return;
}

// NED: 6DOF e-Compass function computing rotation matrix fR
void feCompassNED(float fR[][3], float *pfDelta, float fBc[], float fGp[])
{
    c7fc:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:275

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
		fR[i][X] = fBc[i];
    c7fe:	60c3      	str	r3, [r0, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:274
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    c800:	6897      	ldr	r7, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:275
		fR[i][X] = fBc[i];
    c802:	9a00      	ldr	r2, [sp, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:274
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    c804:	6207      	str	r7, [r0, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:275
		fR[i][X] = fBc[i];
    c806:	6892      	ldr	r2, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:260
	return;
}

// NED: 6DOF e-Compass function computing rotation matrix fR
void feCompassNED(float fR[][3], float *pfDelta, float fBc[], float fGp[])
{
    c808:	9102      	str	r1, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:275

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
		fR[i][X] = fBc[i];
    c80a:	6182      	str	r2, [r0, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:279
	}

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    c80c:	1c11      	adds	r1, r2, #0
    c80e:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:275

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
		fR[i][X] = fBc[i];
    c810:	469b      	mov	fp, r3
    c812:	4692      	mov	sl, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:279
	}

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    c814:	f7f4 fabe 	bl	d94 <__aeabi_fmul>
    c818:	4659      	mov	r1, fp
    c81a:	4680      	mov	r8, r0
    c81c:	1c38      	adds	r0, r7, #0
    c81e:	f7f4 fab9 	bl	d94 <__aeabi_fmul>
    c822:	1c01      	adds	r1, r0, #0
    c824:	4640      	mov	r0, r8
    c826:	f7f4 fbdf 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:280
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    c82a:	4649      	mov	r1, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:279
		fR[i][Z] = fGp[i];
		fR[i][X] = fBc[i];
	}

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    c82c:	4680      	mov	r8, r0
    c82e:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:280
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    c830:	1c38      	adds	r0, r7, #0
    c832:	f7f4 faaf 	bl	d94 <__aeabi_fmul>
    c836:	1c29      	adds	r1, r5, #0
    c838:	9003      	str	r0, [sp, #12]
    c83a:	4650      	mov	r0, sl
    c83c:	f7f4 faaa 	bl	d94 <__aeabi_fmul>
    c840:	1c01      	adds	r1, r0, #0
    c842:	9803      	ldr	r0, [sp, #12]
    c844:	f7f4 fbd0 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:281
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    c848:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:280
		fR[i][X] = fBc[i];
	}

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    c84a:	4682      	mov	sl, r0
    c84c:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:281
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    c84e:	4658      	mov	r0, fp
    c850:	f7f4 faa0 	bl	d94 <__aeabi_fmul>
    c854:	4649      	mov	r1, r9
    c856:	4683      	mov	fp, r0
    c858:	1c30      	adds	r0, r6, #0
    c85a:	f7f4 fa9b 	bl	d94 <__aeabi_fmul>
    c85e:	1c01      	adds	r1, r0, #0
    c860:	4658      	mov	r0, fp
    c862:	f7f4 fbc1 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:284

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
    c866:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:281
	}

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    c868:	4683      	mov	fp, r0
    c86a:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:284

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
    c86c:	1c38      	adds	r0, r7, #0
    c86e:	f7f4 fa91 	bl	d94 <__aeabi_fmul>
    c872:	4659      	mov	r1, fp
    c874:	4681      	mov	r9, r0
    c876:	1c30      	adds	r0, r6, #0
    c878:	f7f4 fa8c 	bl	d94 <__aeabi_fmul>
    c87c:	1c01      	adds	r1, r0, #0
    c87e:	4648      	mov	r0, r9
    c880:	f7f4 fbb2 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:285
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    c884:	4659      	mov	r1, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:284
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
    c886:	4681      	mov	r9, r0
    c888:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:285
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    c88a:	1c28      	adds	r0, r5, #0
    c88c:	f7f4 fa82 	bl	d94 <__aeabi_fmul>
    c890:	4641      	mov	r1, r8
    c892:	4683      	mov	fp, r0
    c894:	1c38      	adds	r0, r7, #0
    c896:	f7f4 fa7d 	bl	d94 <__aeabi_fmul>
    c89a:	1c01      	adds	r1, r0, #0
    c89c:	4658      	mov	r0, fp
    c89e:	f7f4 fba3 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:286
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    c8a2:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:285
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    c8a4:	1c07      	adds	r7, r0, #0
    c8a6:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:286
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    c8a8:	1c30      	adds	r0, r6, #0
    c8aa:	f7f4 fa73 	bl	d94 <__aeabi_fmul>
    c8ae:	4651      	mov	r1, sl
    c8b0:	1c06      	adds	r6, r0, #0
    c8b2:	1c28      	adds	r0, r5, #0
    c8b4:	f7f4 fa6e 	bl	d94 <__aeabi_fmul>
    c8b8:	1c01      	adds	r1, r0, #0
    c8ba:	1c30      	adds	r0, r6, #0
    c8bc:	f7f4 fb94 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:289

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
    c8c0:	4649      	mov	r1, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:286
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    c8c2:	1c05      	adds	r5, r0, #0
    c8c4:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:289

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
    c8c6:	4648      	mov	r0, r9
    c8c8:	f7f4 fa64 	bl	d94 <__aeabi_fmul>
    c8cc:	1c39      	adds	r1, r7, #0
    c8ce:	1c06      	adds	r6, r0, #0
    c8d0:	1c38      	adds	r0, r7, #0
    c8d2:	f7f4 fa5f 	bl	d94 <__aeabi_fmul>
    c8d6:	1c01      	adds	r1, r0, #0
    c8d8:	1c30      	adds	r0, r6, #0
    c8da:	f7f3 ff0b 	bl	6f4 <__aeabi_fadd>
    c8de:	1c29      	adds	r1, r5, #0
    c8e0:	1c06      	adds	r6, r0, #0
    c8e2:	1c28      	adds	r0, r5, #0
    c8e4:	f7f4 fa56 	bl	d94 <__aeabi_fmul>
    c8e8:	1c01      	adds	r1, r0, #0
    c8ea:	1c30      	adds	r0, r6, #0
    c8ec:	f7f3 ff02 	bl	6f4 <__aeabi_fadd>
    c8f0:	f004 fee6 	bl	116c0 <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:290
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
    c8f4:	6861      	ldr	r1, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:289
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
    c8f6:	1c05      	adds	r5, r0, #0
    c8f8:	9005      	str	r0, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:290
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
    c8fa:	1c08      	adds	r0, r1, #0
    c8fc:	f7f4 fa4a 	bl	d94 <__aeabi_fmul>
    c900:	6927      	ldr	r7, [r4, #16]
    c902:	4680      	mov	r8, r0
    c904:	1c39      	adds	r1, r7, #0
    c906:	1c38      	adds	r0, r7, #0
    c908:	f7f4 fa44 	bl	d94 <__aeabi_fmul>
    c90c:	1c01      	adds	r1, r0, #0
    c90e:	4640      	mov	r0, r8
    c910:	f7f3 fef0 	bl	6f4 <__aeabi_fadd>
    c914:	69e6      	ldr	r6, [r4, #28]
    c916:	1c07      	adds	r7, r0, #0
    c918:	1c31      	adds	r1, r6, #0
    c91a:	1c30      	adds	r0, r6, #0
    c91c:	f7f4 fa3a 	bl	d94 <__aeabi_fmul>
    c920:	1c01      	adds	r1, r0, #0
    c922:	1c38      	adds	r0, r7, #0
    c924:	f7f3 fee6 	bl	6f4 <__aeabi_fadd>
    c928:	f004 feca 	bl	116c0 <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:291
	fmod[Z] = sqrtf(fR[X][Z] * fR[X][Z] + fR[Y][Z] * fR[Y][Z] + fR[Z][Z] * fR[Z][Z]);
    c92c:	68a1      	ldr	r1, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:290
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
    c92e:	9006      	str	r0, [sp, #24]
    c930:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:291
	fmod[Z] = sqrtf(fR[X][Z] * fR[X][Z] + fR[Y][Z] * fR[Y][Z] + fR[Z][Z] * fR[Z][Z]);
    c932:	1c08      	adds	r0, r1, #0
    c934:	f7f4 fa2e 	bl	d94 <__aeabi_fmul>
    c938:	6967      	ldr	r7, [r4, #20]
    c93a:	4681      	mov	r9, r0
    c93c:	1c39      	adds	r1, r7, #0
    c93e:	1c38      	adds	r0, r7, #0
    c940:	f7f4 fa28 	bl	d94 <__aeabi_fmul>
    c944:	1c01      	adds	r1, r0, #0
    c946:	4648      	mov	r0, r9
    c948:	f7f3 fed4 	bl	6f4 <__aeabi_fadd>
    c94c:	6a26      	ldr	r6, [r4, #32]
    c94e:	1c07      	adds	r7, r0, #0
    c950:	1c31      	adds	r1, r6, #0
    c952:	1c30      	adds	r0, r6, #0
    c954:	f7f4 fa1e 	bl	d94 <__aeabi_fmul>
    c958:	1c01      	adds	r1, r0, #0
    c95a:	1c38      	adds	r0, r7, #0
    c95c:	f7f3 feca 	bl	6f4 <__aeabi_fadd>
    c960:	f004 feae 	bl	116c0 <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:294

	// normalize the rotation matrix columns
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
    c964:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:291
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
	fmod[Z] = sqrtf(fR[X][Z] * fR[X][Z] + fR[Y][Z] * fR[Y][Z] + fR[Z][Z] * fR[Z][Z]);
    c966:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:294

	// normalize the rotation matrix columns
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
    c968:	1c28      	adds	r0, r5, #0
    c96a:	f7f3 fe95 	bl	698 <__aeabi_fcmpeq>
    c96e:	2800      	cmp	r0, #0
    c970:	d000      	beq.n	c974 <feCompassNED+0x1a4>
    c972:	e09f      	b.n	cab4 <feCompassNED+0x2e4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:294 (discriminator 1)
    c974:	4640      	mov	r0, r8
    c976:	2100      	movs	r1, #0
    c978:	f7f3 fe8e 	bl	698 <__aeabi_fcmpeq>
    c97c:	2800      	cmp	r0, #0
    c97e:	d000      	beq.n	c982 <feCompassNED+0x1b2>
    c980:	e098      	b.n	cab4 <feCompassNED+0x2e4>
    c982:	1c30      	adds	r0, r6, #0
    c984:	2100      	movs	r1, #0
    c986:	f7f3 fe87 	bl	698 <__aeabi_fcmpeq>
    c98a:	2800      	cmp	r0, #0
    c98c:	d000      	beq.n	c990 <feCompassNED+0x1c0>
    c98e:	e091      	b.n	cab4 <feCompassNED+0x2e4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:299
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    c990:	20fe      	movs	r0, #254	; 0xfe
    c992:	9905      	ldr	r1, [sp, #20]
    c994:	0580      	lsls	r0, r0, #22
    c996:	f7f4 f819 	bl	9cc <__aeabi_fdiv>
    c99a:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:304
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    c99c:	1c29      	adds	r1, r5, #0
    c99e:	6820      	ldr	r0, [r4, #0]
    c9a0:	f7f4 f9f8 	bl	d94 <__aeabi_fmul>
    c9a4:	1c29      	adds	r1, r5, #0
    c9a6:	6020      	str	r0, [r4, #0]
    c9a8:	68e0      	ldr	r0, [r4, #12]
    c9aa:	f7f4 f9f3 	bl	d94 <__aeabi_fmul>
    c9ae:	1c29      	adds	r1, r5, #0
    c9b0:	60e0      	str	r0, [r4, #12]
    c9b2:	69a0      	ldr	r0, [r4, #24]
    c9b4:	f7f4 f9ee 	bl	d94 <__aeabi_fmul>
    c9b8:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:299
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    c9ba:	20fe      	movs	r0, #254	; 0xfe
    c9bc:	9906      	ldr	r1, [sp, #24]
    c9be:	0580      	lsls	r0, r0, #22
    c9c0:	f7f4 f804 	bl	9cc <__aeabi_fdiv>
    c9c4:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:304
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    c9c6:	1c29      	adds	r1, r5, #0
    c9c8:	6860      	ldr	r0, [r4, #4]
    c9ca:	f7f4 f9e3 	bl	d94 <__aeabi_fmul>
    c9ce:	1c29      	adds	r1, r5, #0
    c9d0:	6060      	str	r0, [r4, #4]
    c9d2:	6920      	ldr	r0, [r4, #16]
    c9d4:	f7f4 f9de 	bl	d94 <__aeabi_fmul>
    c9d8:	1c29      	adds	r1, r5, #0
    c9da:	6120      	str	r0, [r4, #16]
    c9dc:	69e0      	ldr	r0, [r4, #28]
    c9de:	f7f4 f9d9 	bl	d94 <__aeabi_fmul>
    c9e2:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:299
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    c9e4:	20fe      	movs	r0, #254	; 0xfe
    c9e6:	1c31      	adds	r1, r6, #0
    c9e8:	0580      	lsls	r0, r0, #22
    c9ea:	f7f3 ffef 	bl	9cc <__aeabi_fdiv>
    c9ee:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:304
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    c9f0:	1c29      	adds	r1, r5, #0
    c9f2:	68a0      	ldr	r0, [r4, #8]
    c9f4:	f7f4 f9ce 	bl	d94 <__aeabi_fmul>
    c9f8:	1c29      	adds	r1, r5, #0
    c9fa:	60a0      	str	r0, [r4, #8]
    c9fc:	6960      	ldr	r0, [r4, #20]
    c9fe:	f7f4 f9c9 	bl	d94 <__aeabi_fmul>
    ca02:	1c29      	adds	r1, r5, #0
    ca04:	6160      	str	r0, [r4, #20]
    ca06:	6a20      	ldr	r0, [r4, #32]
    ca08:	f7f4 f9c4 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:316
		f3x3matrixAeqI(fR);
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
    ca0c:	9b00      	ldr	r3, [sp, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:304
			ftmp = 1.0F / fmod[j];
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    ca0e:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:316
		f3x3matrixAeqI(fR);
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
    ca10:	6819      	ldr	r1, [r3, #0]
    ca12:	685d      	ldr	r5, [r3, #4]
    ca14:	1c08      	adds	r0, r1, #0
    ca16:	689c      	ldr	r4, [r3, #8]
    ca18:	f7f4 f9bc 	bl	d94 <__aeabi_fmul>
    ca1c:	1c29      	adds	r1, r5, #0
    ca1e:	1c07      	adds	r7, r0, #0
    ca20:	1c28      	adds	r0, r5, #0
    ca22:	f7f4 f9b7 	bl	d94 <__aeabi_fmul>
    ca26:	1c01      	adds	r1, r0, #0
    ca28:	1c38      	adds	r0, r7, #0
    ca2a:	f7f3 fe63 	bl	6f4 <__aeabi_fadd>
    ca2e:	1c21      	adds	r1, r4, #0
    ca30:	1c05      	adds	r5, r0, #0
    ca32:	1c20      	adds	r0, r4, #0
    ca34:	f7f4 f9ae 	bl	d94 <__aeabi_fmul>
    ca38:	1c01      	adds	r1, r0, #0
    ca3a:	1c28      	adds	r0, r5, #0
    ca3c:	f7f3 fe5a 	bl	6f4 <__aeabi_fadd>
    ca40:	f004 fe3e 	bl	116c0 <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:317
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    ca44:	9b00      	ldr	r3, [sp, #0]
    ca46:	9a01      	ldr	r2, [sp, #4]
    ca48:	681f      	ldr	r7, [r3, #0]
    ca4a:	6812      	ldr	r2, [r2, #0]
    ca4c:	685b      	ldr	r3, [r3, #4]
    ca4e:	4690      	mov	r8, r2
    ca50:	4699      	mov	r9, r3
    ca52:	9a01      	ldr	r2, [sp, #4]
    ca54:	9b00      	ldr	r3, [sp, #0]
    ca56:	6855      	ldr	r5, [r2, #4]
    ca58:	689b      	ldr	r3, [r3, #8]
    ca5a:	6892      	ldr	r2, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:318
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
    ca5c:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:316
		f3x3matrixAeqI(fR);
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
    ca5e:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:317
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    ca60:	4692      	mov	sl, r2
    ca62:	469b      	mov	fp, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:318
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
    ca64:	f7f3 fe18 	bl	698 <__aeabi_fcmpeq>
    ca68:	2800      	cmp	r0, #0
    ca6a:	d126      	bne.n	caba <feCompassNED+0x2ea>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:317
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    ca6c:	1c39      	adds	r1, r7, #0
    ca6e:	4640      	mov	r0, r8
    ca70:	f7f4 f990 	bl	d94 <__aeabi_fmul>
    ca74:	4649      	mov	r1, r9
    ca76:	1c07      	adds	r7, r0, #0
    ca78:	1c28      	adds	r0, r5, #0
    ca7a:	f7f4 f98b 	bl	d94 <__aeabi_fmul>
    ca7e:	1c01      	adds	r1, r0, #0
    ca80:	1c38      	adds	r0, r7, #0
    ca82:	f7f3 fe37 	bl	6f4 <__aeabi_fadd>
    ca86:	4659      	mov	r1, fp
    ca88:	1c05      	adds	r5, r0, #0
    ca8a:	4650      	mov	r0, sl
    ca8c:	f7f4 f982 	bl	d94 <__aeabi_fmul>
    ca90:	1c01      	adds	r1, r0, #0
    ca92:	1c28      	adds	r0, r5, #0
    ca94:	f7f3 fe2e 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:320
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
	{
		*pfDelta = fasin_deg(fGdotBc / (fmod[Z] * fmodBc));
    ca98:	1c21      	adds	r1, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:317
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    ca9a:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:320
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
	{
		*pfDelta = fasin_deg(fGdotBc / (fmod[Z] * fmodBc));
    ca9c:	1c30      	adds	r0, r6, #0
    ca9e:	f7f4 f979 	bl	d94 <__aeabi_fmul>
    caa2:	1c01      	adds	r1, r0, #0
    caa4:	1c28      	adds	r0, r5, #0
    caa6:	f7f3 ff91 	bl	9cc <__aeabi_fdiv>
    caaa:	f7f6 f87d 	bl	2ba8 <fasin_deg>
    caae:	9a02      	ldr	r2, [sp, #8]
    cab0:	6010      	str	r0, [r2, #0]
    cab2:	e002      	b.n	caba <feCompassNED+0x2ea>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:311
		}
	}
	else
	{
		// no solution is possible to set rotation to identity matrix
		f3x3matrixAeqI(fR);
    cab4:	1c20      	adds	r0, r4, #0
    cab6:	f7fe fe17 	bl	b6e8 <f3x3matrixAeqI>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:324
	{
		*pfDelta = fasin_deg(fGdotBc / (fmod[Z] * fmodBc));
	}

	return;
}
    caba:	b009      	add	sp, #36	; 0x24
    cabc:	bc3c      	pop	{r2, r3, r4, r5}
    cabe:	4690      	mov	r8, r2
    cac0:	4699      	mov	r9, r3
    cac2:	46a2      	mov	sl, r4
    cac4:	46ab      	mov	fp, r5
    cac6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cac8 <feCompassAndroid>:
feCompassAndroid():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:328

// Android: 6DOF e-Compass function computing rotation matrix fR
void feCompassAndroid(float fR[][3],  float *pfDelta, float fBc[], float fGp[])
{
    cac8:	b5f0      	push	{r4, r5, r6, r7, lr}
    caca:	465f      	mov	r7, fp
    cacc:	4656      	mov	r6, sl
    cace:	464d      	mov	r5, r9
    cad0:	4644      	mov	r4, r8
    cad2:	b4f0      	push	{r4, r5, r6, r7}
    cad4:	b089      	sub	sp, #36	; 0x24
    cad6:	9201      	str	r2, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:337
	float fGdotBc;					// dot product of vectors G.Bc
	float ftmp;						// scratch variable
	int8 i, j;						// loop counters

	// set the inclination angle to zero in case it is not computed later
	*pfDelta = 0.0F;
    cad8:	2200      	movs	r2, #0
    cada:	600a      	str	r2, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:328
	return;
}

// Android: 6DOF e-Compass function computing rotation matrix fR
void feCompassAndroid(float fR[][3],  float *pfDelta, float fBc[], float fGp[])
{
    cadc:	9302      	str	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:342
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    cade:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:343
		fR[i][Y] = fBc[i];
    cae0:	9a01      	ldr	r2, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:342
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    cae2:	6083      	str	r3, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:343
		fR[i][Y] = fBc[i];
    cae4:	6812      	ldr	r2, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:342
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    cae6:	4699      	mov	r9, r3
    cae8:	9b02      	ldr	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:343
		fR[i][Y] = fBc[i];
    caea:	6042      	str	r2, [r0, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:342
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    caec:	685b      	ldr	r3, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:343
		fR[i][Y] = fBc[i];
    caee:	4693      	mov	fp, r2
    caf0:	9a01      	ldr	r2, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:342
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    caf2:	6143      	str	r3, [r0, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:343
		fR[i][Y] = fBc[i];
    caf4:	6855      	ldr	r5, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:342
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    caf6:	4698      	mov	r8, r3
    caf8:	9b02      	ldr	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:343
		fR[i][Y] = fBc[i];
    cafa:	6105      	str	r5, [r0, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:342
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    cafc:	689b      	ldr	r3, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:328
	return;
}

// Android: 6DOF e-Compass function computing rotation matrix fR
void feCompassAndroid(float fR[][3],  float *pfDelta, float fBc[], float fGp[])
{
    cafe:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:342
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    cb00:	6203      	str	r3, [r0, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:343
		fR[i][Y] = fBc[i];
    cb02:	6896      	ldr	r6, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:328
	return;
}

// Android: 6DOF e-Compass function computing rotation matrix fR
void feCompassAndroid(float fR[][3],  float *pfDelta, float fBc[], float fGp[])
{
    cb04:	9103      	str	r1, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:343

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
		fR[i][Y] = fBc[i];
    cb06:	61c6      	str	r6, [r0, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:347
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
    cb08:	1c19      	adds	r1, r3, #0
    cb0a:	1c28      	adds	r0, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:342
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    cb0c:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:347
		fR[i][Y] = fBc[i];
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
    cb0e:	f7f4 f941 	bl	d94 <__aeabi_fmul>
    cb12:	4641      	mov	r1, r8
    cb14:	1c07      	adds	r7, r0, #0
    cb16:	1c30      	adds	r0, r6, #0
    cb18:	f7f4 f93c 	bl	d94 <__aeabi_fmul>
    cb1c:	1c01      	adds	r1, r0, #0
    cb1e:	1c38      	adds	r0, r7, #0
    cb20:	f7f4 fa62 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:348
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    cb24:	4649      	mov	r1, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:347
		fR[i][Z] = fGp[i];
		fR[i][Y] = fBc[i];
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
    cb26:	1c07      	adds	r7, r0, #0
    cb28:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:348
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    cb2a:	1c30      	adds	r0, r6, #0
    cb2c:	f7f4 f932 	bl	d94 <__aeabi_fmul>
    cb30:	4659      	mov	r1, fp
    cb32:	1c06      	adds	r6, r0, #0
    cb34:	4650      	mov	r0, sl
    cb36:	f7f4 f92d 	bl	d94 <__aeabi_fmul>
    cb3a:	1c01      	adds	r1, r0, #0
    cb3c:	1c30      	adds	r0, r6, #0
    cb3e:	f7f4 fa53 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:349
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    cb42:	4659      	mov	r1, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:348
		fR[i][Y] = fBc[i];
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    cb44:	1c06      	adds	r6, r0, #0
    cb46:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:349
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    cb48:	4640      	mov	r0, r8
    cb4a:	f7f4 f923 	bl	d94 <__aeabi_fmul>
    cb4e:	4649      	mov	r1, r9
    cb50:	4683      	mov	fp, r0
    cb52:	1c28      	adds	r0, r5, #0
    cb54:	f7f4 f91e 	bl	d94 <__aeabi_fmul>
    cb58:	1c01      	adds	r1, r0, #0
    cb5a:	4658      	mov	r0, fp
    cb5c:	f7f4 fa44 	bl	fe8 <__aeabi_fsub>
    cb60:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:352

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    cb62:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:349
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    cb64:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:352

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    cb66:	4640      	mov	r0, r8
    cb68:	f7f4 f914 	bl	d94 <__aeabi_fmul>
    cb6c:	1c31      	adds	r1, r6, #0
    cb6e:	4683      	mov	fp, r0
    cb70:	4650      	mov	r0, sl
    cb72:	f7f4 f90f 	bl	d94 <__aeabi_fmul>
    cb76:	1c01      	adds	r1, r0, #0
    cb78:	4658      	mov	r0, fp
    cb7a:	f7f4 fa35 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:353
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    cb7e:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:352
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    cb80:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:353
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    cb82:	4650      	mov	r0, sl
    cb84:	f7f4 f906 	bl	d94 <__aeabi_fmul>
    cb88:	1c29      	adds	r1, r5, #0
    cb8a:	4682      	mov	sl, r0
    cb8c:	4648      	mov	r0, r9
    cb8e:	f7f4 f901 	bl	d94 <__aeabi_fmul>
    cb92:	1c01      	adds	r1, r0, #0
    cb94:	4650      	mov	r0, sl
    cb96:	f7f4 fa27 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:354
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    cb9a:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:353
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    cb9c:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:354
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    cb9e:	4648      	mov	r0, r9
    cba0:	f7f4 f8f8 	bl	d94 <__aeabi_fmul>
    cba4:	1c39      	adds	r1, r7, #0
    cba6:	4681      	mov	r9, r0
    cba8:	4640      	mov	r0, r8
    cbaa:	f7f4 f8f3 	bl	d94 <__aeabi_fmul>
    cbae:	1c01      	adds	r1, r0, #0
    cbb0:	4648      	mov	r0, r9
    cbb2:	f7f4 fa19 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:357

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
    cbb6:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:354
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    cbb8:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:357

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
    cbba:	1c38      	adds	r0, r7, #0
    cbbc:	f7f4 f8ea 	bl	d94 <__aeabi_fmul>
    cbc0:	1c31      	adds	r1, r6, #0
    cbc2:	1c07      	adds	r7, r0, #0
    cbc4:	1c30      	adds	r0, r6, #0
    cbc6:	f7f4 f8e5 	bl	d94 <__aeabi_fmul>
    cbca:	1c01      	adds	r1, r0, #0
    cbcc:	1c38      	adds	r0, r7, #0
    cbce:	f7f3 fd91 	bl	6f4 <__aeabi_fadd>
    cbd2:	1c29      	adds	r1, r5, #0
    cbd4:	1c06      	adds	r6, r0, #0
    cbd6:	1c28      	adds	r0, r5, #0
    cbd8:	f7f4 f8dc 	bl	d94 <__aeabi_fmul>
    cbdc:	1c01      	adds	r1, r0, #0
    cbde:	1c30      	adds	r0, r6, #0
    cbe0:	f7f3 fd88 	bl	6f4 <__aeabi_fadd>
    cbe4:	f004 fd6c 	bl	116c0 <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:358
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
    cbe8:	6861      	ldr	r1, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:357
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
    cbea:	1c05      	adds	r5, r0, #0
    cbec:	9005      	str	r0, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:358
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
    cbee:	1c08      	adds	r0, r1, #0
    cbf0:	f7f4 f8d0 	bl	d94 <__aeabi_fmul>
    cbf4:	6927      	ldr	r7, [r4, #16]
    cbf6:	4680      	mov	r8, r0
    cbf8:	1c39      	adds	r1, r7, #0
    cbfa:	1c38      	adds	r0, r7, #0
    cbfc:	f7f4 f8ca 	bl	d94 <__aeabi_fmul>
    cc00:	1c01      	adds	r1, r0, #0
    cc02:	4640      	mov	r0, r8
    cc04:	f7f3 fd76 	bl	6f4 <__aeabi_fadd>
    cc08:	69e6      	ldr	r6, [r4, #28]
    cc0a:	1c07      	adds	r7, r0, #0
    cc0c:	1c31      	adds	r1, r6, #0
    cc0e:	1c30      	adds	r0, r6, #0
    cc10:	f7f4 f8c0 	bl	d94 <__aeabi_fmul>
    cc14:	1c01      	adds	r1, r0, #0
    cc16:	1c38      	adds	r0, r7, #0
    cc18:	f7f3 fd6c 	bl	6f4 <__aeabi_fadd>
    cc1c:	f004 fd50 	bl	116c0 <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:359
	fmod[Z] = sqrtf(fR[X][Z] * fR[X][Z] + fR[Y][Z] * fR[Y][Z] + fR[Z][Z] * fR[Z][Z]);
    cc20:	68a1      	ldr	r1, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:358
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
    cc22:	9006      	str	r0, [sp, #24]
    cc24:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:359
	fmod[Z] = sqrtf(fR[X][Z] * fR[X][Z] + fR[Y][Z] * fR[Y][Z] + fR[Z][Z] * fR[Z][Z]);
    cc26:	1c08      	adds	r0, r1, #0
    cc28:	f7f4 f8b4 	bl	d94 <__aeabi_fmul>
    cc2c:	6967      	ldr	r7, [r4, #20]
    cc2e:	4681      	mov	r9, r0
    cc30:	1c39      	adds	r1, r7, #0
    cc32:	1c38      	adds	r0, r7, #0
    cc34:	f7f4 f8ae 	bl	d94 <__aeabi_fmul>
    cc38:	1c01      	adds	r1, r0, #0
    cc3a:	4648      	mov	r0, r9
    cc3c:	f7f3 fd5a 	bl	6f4 <__aeabi_fadd>
    cc40:	6a26      	ldr	r6, [r4, #32]
    cc42:	1c07      	adds	r7, r0, #0
    cc44:	1c31      	adds	r1, r6, #0
    cc46:	1c30      	adds	r0, r6, #0
    cc48:	f7f4 f8a4 	bl	d94 <__aeabi_fmul>
    cc4c:	1c01      	adds	r1, r0, #0
    cc4e:	1c38      	adds	r0, r7, #0
    cc50:	f7f3 fd50 	bl	6f4 <__aeabi_fadd>
    cc54:	f004 fd34 	bl	116c0 <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:362

	// normalize the rotation matrix columns
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
    cc58:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:359
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
	fmod[Z] = sqrtf(fR[X][Z] * fR[X][Z] + fR[Y][Z] * fR[Y][Z] + fR[Z][Z] * fR[Z][Z]);
    cc5a:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:362

	// normalize the rotation matrix columns
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
    cc5c:	1c28      	adds	r0, r5, #0
    cc5e:	f7f3 fd1b 	bl	698 <__aeabi_fcmpeq>
    cc62:	2800      	cmp	r0, #0
    cc64:	d000      	beq.n	cc68 <feCompassAndroid+0x1a0>
    cc66:	e0a1      	b.n	cdac <feCompassAndroid+0x2e4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:362 (discriminator 1)
    cc68:	4640      	mov	r0, r8
    cc6a:	2100      	movs	r1, #0
    cc6c:	f7f3 fd14 	bl	698 <__aeabi_fcmpeq>
    cc70:	2800      	cmp	r0, #0
    cc72:	d000      	beq.n	cc76 <feCompassAndroid+0x1ae>
    cc74:	e09a      	b.n	cdac <feCompassAndroid+0x2e4>
    cc76:	1c30      	adds	r0, r6, #0
    cc78:	2100      	movs	r1, #0
    cc7a:	f7f3 fd0d 	bl	698 <__aeabi_fcmpeq>
    cc7e:	2800      	cmp	r0, #0
    cc80:	d000      	beq.n	cc84 <feCompassAndroid+0x1bc>
    cc82:	e093      	b.n	cdac <feCompassAndroid+0x2e4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:367
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    cc84:	20fe      	movs	r0, #254	; 0xfe
    cc86:	9905      	ldr	r1, [sp, #20]
    cc88:	0580      	lsls	r0, r0, #22
    cc8a:	f7f3 fe9f 	bl	9cc <__aeabi_fdiv>
    cc8e:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:372
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    cc90:	1c29      	adds	r1, r5, #0
    cc92:	6820      	ldr	r0, [r4, #0]
    cc94:	f7f4 f87e 	bl	d94 <__aeabi_fmul>
    cc98:	1c29      	adds	r1, r5, #0
    cc9a:	6020      	str	r0, [r4, #0]
    cc9c:	68e0      	ldr	r0, [r4, #12]
    cc9e:	f7f4 f879 	bl	d94 <__aeabi_fmul>
    cca2:	1c29      	adds	r1, r5, #0
    cca4:	60e0      	str	r0, [r4, #12]
    cca6:	69a0      	ldr	r0, [r4, #24]
    cca8:	f7f4 f874 	bl	d94 <__aeabi_fmul>
    ccac:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:367
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    ccae:	20fe      	movs	r0, #254	; 0xfe
    ccb0:	9906      	ldr	r1, [sp, #24]
    ccb2:	0580      	lsls	r0, r0, #22
    ccb4:	f7f3 fe8a 	bl	9cc <__aeabi_fdiv>
    ccb8:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:372
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    ccba:	1c29      	adds	r1, r5, #0
    ccbc:	6860      	ldr	r0, [r4, #4]
    ccbe:	f7f4 f869 	bl	d94 <__aeabi_fmul>
    ccc2:	1c29      	adds	r1, r5, #0
    ccc4:	6060      	str	r0, [r4, #4]
    ccc6:	6920      	ldr	r0, [r4, #16]
    ccc8:	f7f4 f864 	bl	d94 <__aeabi_fmul>
    cccc:	1c29      	adds	r1, r5, #0
    ccce:	6120      	str	r0, [r4, #16]
    ccd0:	69e0      	ldr	r0, [r4, #28]
    ccd2:	f7f4 f85f 	bl	d94 <__aeabi_fmul>
    ccd6:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:367
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    ccd8:	20fe      	movs	r0, #254	; 0xfe
    ccda:	1c31      	adds	r1, r6, #0
    ccdc:	0580      	lsls	r0, r0, #22
    ccde:	f7f3 fe75 	bl	9cc <__aeabi_fdiv>
    cce2:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:372
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    cce4:	1c29      	adds	r1, r5, #0
    cce6:	68a0      	ldr	r0, [r4, #8]
    cce8:	f7f4 f854 	bl	d94 <__aeabi_fmul>
    ccec:	1c29      	adds	r1, r5, #0
    ccee:	60a0      	str	r0, [r4, #8]
    ccf0:	6960      	ldr	r0, [r4, #20]
    ccf2:	f7f4 f84f 	bl	d94 <__aeabi_fmul>
    ccf6:	1c29      	adds	r1, r5, #0
    ccf8:	6160      	str	r0, [r4, #20]
    ccfa:	6a20      	ldr	r0, [r4, #32]
    ccfc:	f7f4 f84a 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:384
		f3x3matrixAeqI(fR);
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
    cd00:	9a01      	ldr	r2, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:372
			ftmp = 1.0F / fmod[j];
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    cd02:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:384
		f3x3matrixAeqI(fR);
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
    cd04:	6811      	ldr	r1, [r2, #0]
    cd06:	6855      	ldr	r5, [r2, #4]
    cd08:	1c08      	adds	r0, r1, #0
    cd0a:	6894      	ldr	r4, [r2, #8]
    cd0c:	f7f4 f842 	bl	d94 <__aeabi_fmul>
    cd10:	1c29      	adds	r1, r5, #0
    cd12:	1c07      	adds	r7, r0, #0
    cd14:	1c28      	adds	r0, r5, #0
    cd16:	f7f4 f83d 	bl	d94 <__aeabi_fmul>
    cd1a:	1c01      	adds	r1, r0, #0
    cd1c:	1c38      	adds	r0, r7, #0
    cd1e:	f7f3 fce9 	bl	6f4 <__aeabi_fadd>
    cd22:	1c21      	adds	r1, r4, #0
    cd24:	1c05      	adds	r5, r0, #0
    cd26:	1c20      	adds	r0, r4, #0
    cd28:	f7f4 f834 	bl	d94 <__aeabi_fmul>
    cd2c:	1c01      	adds	r1, r0, #0
    cd2e:	1c28      	adds	r0, r5, #0
    cd30:	f7f3 fce0 	bl	6f4 <__aeabi_fadd>
    cd34:	f004 fcc4 	bl	116c0 <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:385
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    cd38:	9b02      	ldr	r3, [sp, #8]
    cd3a:	9a01      	ldr	r2, [sp, #4]
    cd3c:	681f      	ldr	r7, [r3, #0]
    cd3e:	6815      	ldr	r5, [r2, #0]
    cd40:	685b      	ldr	r3, [r3, #4]
    cd42:	6852      	ldr	r2, [r2, #4]
    cd44:	4698      	mov	r8, r3
    cd46:	4691      	mov	r9, r2
    cd48:	9b02      	ldr	r3, [sp, #8]
    cd4a:	9a01      	ldr	r2, [sp, #4]
    cd4c:	689b      	ldr	r3, [r3, #8]
    cd4e:	6892      	ldr	r2, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:386
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
    cd50:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:384
		f3x3matrixAeqI(fR);
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
    cd52:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:385
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    cd54:	469a      	mov	sl, r3
    cd56:	4693      	mov	fp, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:386
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
    cd58:	f7f3 fc9e 	bl	698 <__aeabi_fcmpeq>
    cd5c:	2800      	cmp	r0, #0
    cd5e:	d128      	bne.n	cdb2 <feCompassAndroid+0x2ea>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:385
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    cd60:	1c29      	adds	r1, r5, #0
    cd62:	1c38      	adds	r0, r7, #0
    cd64:	f7f4 f816 	bl	d94 <__aeabi_fmul>
    cd68:	4649      	mov	r1, r9
    cd6a:	1c05      	adds	r5, r0, #0
    cd6c:	4640      	mov	r0, r8
    cd6e:	f7f4 f811 	bl	d94 <__aeabi_fmul>
    cd72:	1c01      	adds	r1, r0, #0
    cd74:	1c28      	adds	r0, r5, #0
    cd76:	f7f3 fcbd 	bl	6f4 <__aeabi_fadd>
    cd7a:	4659      	mov	r1, fp
    cd7c:	1c05      	adds	r5, r0, #0
    cd7e:	4650      	mov	r0, sl
    cd80:	f7f4 f808 	bl	d94 <__aeabi_fmul>
    cd84:	1c01      	adds	r1, r0, #0
    cd86:	1c28      	adds	r0, r5, #0
    cd88:	f7f3 fcb4 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:388
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
	{
		*pfDelta = fasin_deg(-fGdotBc / (fmod[Z] * fmodBc));
    cd8c:	2380      	movs	r3, #128	; 0x80
    cd8e:	061b      	lsls	r3, r3, #24
    cd90:	18c5      	adds	r5, r0, r3
    cd92:	1c21      	adds	r1, r4, #0
    cd94:	1c30      	adds	r0, r6, #0
    cd96:	f7f3 fffd 	bl	d94 <__aeabi_fmul>
    cd9a:	1c01      	adds	r1, r0, #0
    cd9c:	1c28      	adds	r0, r5, #0
    cd9e:	f7f3 fe15 	bl	9cc <__aeabi_fdiv>
    cda2:	f7f5 ff01 	bl	2ba8 <fasin_deg>
    cda6:	9a03      	ldr	r2, [sp, #12]
    cda8:	6010      	str	r0, [r2, #0]
    cdaa:	e002      	b.n	cdb2 <feCompassAndroid+0x2ea>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:379
		}
	}
	else
	{
		// no solution is possible to set rotation to identity matrix
		f3x3matrixAeqI(fR);
    cdac:	1c20      	adds	r0, r4, #0
    cdae:	f7fe fc9b 	bl	b6e8 <f3x3matrixAeqI>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:392
	{
		*pfDelta = fasin_deg(-fGdotBc / (fmod[Z] * fmodBc));
	}

	return;
}
    cdb2:	b009      	add	sp, #36	; 0x24
    cdb4:	bc3c      	pop	{r2, r3, r4, r5}
    cdb6:	4690      	mov	r8, r2
    cdb8:	4699      	mov	r9, r3
    cdba:	46a2      	mov	sl, r4
    cdbc:	46ab      	mov	fp, r5
    cdbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cdc0 <feCompassWin8>:
feCompassWin8():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:396

// Win8: 6DOF e-Compass function computing rotation matrix fR
void feCompassWin8(float fR[][3],  float *pfDelta, float fBc[], float fGp[])
{
    cdc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cdc2:	465f      	mov	r7, fp
    cdc4:	4656      	mov	r6, sl
    cdc6:	464d      	mov	r5, r9
    cdc8:	4644      	mov	r4, r8
    cdca:	b4f0      	push	{r4, r5, r6, r7}
    cdcc:	b089      	sub	sp, #36	; 0x24
    cdce:	9202      	str	r2, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:405
	float fGdotBc;					// dot product of vectors G.Bc
	float ftmp;						// scratch variable
	int8 i, j;						// loop counters

	// set the inclination angle to zero in case it is not computed later
	*pfDelta = 0.0F;
    cdd0:	2200      	movs	r2, #0
    cdd2:	600a      	str	r2, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:396
	return;
}

// Win8: 6DOF e-Compass function computing rotation matrix fR
void feCompassWin8(float fR[][3],  float *pfDelta, float fBc[], float fGp[])
{
    cdd4:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:410
	*pfDelta = 0.0F;

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
    cdd6:	2280      	movs	r2, #128	; 0x80
    cdd8:	681b      	ldr	r3, [r3, #0]
    cdda:	0612      	lsls	r2, r2, #24
    cddc:	189a      	adds	r2, r3, r2
    cdde:	9201      	str	r2, [sp, #4]
    cde0:	9b01      	ldr	r3, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:411
		fR[i][Y] = fBc[i];
    cde2:	9a02      	ldr	r2, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:410
	*pfDelta = 0.0F;

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
    cde4:	6083      	str	r3, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:411
		fR[i][Y] = fBc[i];
    cde6:	6812      	ldr	r2, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:396
	return;
}

// Win8: 6DOF e-Compass function computing rotation matrix fR
void feCompassWin8(float fR[][3],  float *pfDelta, float fBc[], float fGp[])
{
    cde8:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:411

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
		fR[i][Y] = fBc[i];
    cdea:	6042      	str	r2, [r0, #4]
    cdec:	4693      	mov	fp, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:410
	*pfDelta = 0.0F;

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
    cdee:	4652      	mov	r2, sl
    cdf0:	6853      	ldr	r3, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:411
		fR[i][Y] = fBc[i];
    cdf2:	9a02      	ldr	r2, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:410
	*pfDelta = 0.0F;

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
    cdf4:	4698      	mov	r8, r3
    cdf6:	2380      	movs	r3, #128	; 0x80
    cdf8:	061b      	lsls	r3, r3, #24
    cdfa:	4498      	add	r8, r3
    cdfc:	4643      	mov	r3, r8
    cdfe:	6143      	str	r3, [r0, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:411
		fR[i][Y] = fBc[i];
    ce00:	6855      	ldr	r5, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:410
	*pfDelta = 0.0F;

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
    ce02:	4652      	mov	r2, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:411
		fR[i][Y] = fBc[i];
    ce04:	6105      	str	r5, [r0, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:410
	*pfDelta = 0.0F;

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
    ce06:	6893      	ldr	r3, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:411
		fR[i][Y] = fBc[i];
    ce08:	9a02      	ldr	r2, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:410
	*pfDelta = 0.0F;

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
    ce0a:	4699      	mov	r9, r3
    ce0c:	2380      	movs	r3, #128	; 0x80
    ce0e:	061b      	lsls	r3, r3, #24
    ce10:	4499      	add	r9, r3
    ce12:	464b      	mov	r3, r9
    ce14:	6203      	str	r3, [r0, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:411
		fR[i][Y] = fBc[i];
    ce16:	6896      	ldr	r6, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:396
	return;
}

// Win8: 6DOF e-Compass function computing rotation matrix fR
void feCompassWin8(float fR[][3],  float *pfDelta, float fBc[], float fGp[])
{
    ce18:	9103      	str	r1, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:411

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
		fR[i][Y] = fBc[i];
    ce1a:	61c6      	str	r6, [r0, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:415
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
    ce1c:	4649      	mov	r1, r9
    ce1e:	1c28      	adds	r0, r5, #0
    ce20:	f7f3 ffb8 	bl	d94 <__aeabi_fmul>
    ce24:	4641      	mov	r1, r8
    ce26:	1c07      	adds	r7, r0, #0
    ce28:	1c30      	adds	r0, r6, #0
    ce2a:	f7f3 ffb3 	bl	d94 <__aeabi_fmul>
    ce2e:	1c01      	adds	r1, r0, #0
    ce30:	1c38      	adds	r0, r7, #0
    ce32:	f7f4 f8d9 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:416
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    ce36:	9901      	ldr	r1, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:415
		fR[i][Z] = -fGp[i];
		fR[i][Y] = fBc[i];
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
    ce38:	1c07      	adds	r7, r0, #0
    ce3a:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:416
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    ce3c:	1c30      	adds	r0, r6, #0
    ce3e:	f7f3 ffa9 	bl	d94 <__aeabi_fmul>
    ce42:	4659      	mov	r1, fp
    ce44:	1c06      	adds	r6, r0, #0
    ce46:	4648      	mov	r0, r9
    ce48:	f7f3 ffa4 	bl	d94 <__aeabi_fmul>
    ce4c:	1c01      	adds	r1, r0, #0
    ce4e:	1c30      	adds	r0, r6, #0
    ce50:	f7f4 f8ca 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:417
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    ce54:	4659      	mov	r1, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:416
		fR[i][Y] = fBc[i];
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    ce56:	1c06      	adds	r6, r0, #0
    ce58:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:417
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    ce5a:	4640      	mov	r0, r8
    ce5c:	f7f3 ff9a 	bl	d94 <__aeabi_fmul>
    ce60:	9901      	ldr	r1, [sp, #4]
    ce62:	4683      	mov	fp, r0
    ce64:	1c28      	adds	r0, r5, #0
    ce66:	f7f3 ff95 	bl	d94 <__aeabi_fmul>
    ce6a:	1c01      	adds	r1, r0, #0
    ce6c:	4658      	mov	r0, fp
    ce6e:	f7f4 f8bb 	bl	fe8 <__aeabi_fsub>
    ce72:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:420

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    ce74:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:417
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    ce76:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:420

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    ce78:	4640      	mov	r0, r8
    ce7a:	f7f3 ff8b 	bl	d94 <__aeabi_fmul>
    ce7e:	1c31      	adds	r1, r6, #0
    ce80:	4683      	mov	fp, r0
    ce82:	4648      	mov	r0, r9
    ce84:	f7f3 ff86 	bl	d94 <__aeabi_fmul>
    ce88:	1c01      	adds	r1, r0, #0
    ce8a:	4658      	mov	r0, fp
    ce8c:	f7f4 f8ac 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:421
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    ce90:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:420
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    ce92:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:421
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    ce94:	4648      	mov	r0, r9
    ce96:	f7f3 ff7d 	bl	d94 <__aeabi_fmul>
    ce9a:	1c29      	adds	r1, r5, #0
    ce9c:	4681      	mov	r9, r0
    ce9e:	9801      	ldr	r0, [sp, #4]
    cea0:	f7f3 ff78 	bl	d94 <__aeabi_fmul>
    cea4:	1c01      	adds	r1, r0, #0
    cea6:	4648      	mov	r0, r9
    cea8:	f7f4 f89e 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:422
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    ceac:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:421
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    ceae:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:422
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    ceb0:	9801      	ldr	r0, [sp, #4]
    ceb2:	f7f3 ff6f 	bl	d94 <__aeabi_fmul>
    ceb6:	1c39      	adds	r1, r7, #0
    ceb8:	4681      	mov	r9, r0
    ceba:	4640      	mov	r0, r8
    cebc:	f7f3 ff6a 	bl	d94 <__aeabi_fmul>
    cec0:	1c01      	adds	r1, r0, #0
    cec2:	4648      	mov	r0, r9
    cec4:	f7f4 f890 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:425

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
    cec8:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:422
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    ceca:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:425

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
    cecc:	1c38      	adds	r0, r7, #0
    cece:	f7f3 ff61 	bl	d94 <__aeabi_fmul>
    ced2:	1c31      	adds	r1, r6, #0
    ced4:	1c07      	adds	r7, r0, #0
    ced6:	1c30      	adds	r0, r6, #0
    ced8:	f7f3 ff5c 	bl	d94 <__aeabi_fmul>
    cedc:	1c01      	adds	r1, r0, #0
    cede:	1c38      	adds	r0, r7, #0
    cee0:	f7f3 fc08 	bl	6f4 <__aeabi_fadd>
    cee4:	1c29      	adds	r1, r5, #0
    cee6:	1c06      	adds	r6, r0, #0
    cee8:	1c28      	adds	r0, r5, #0
    ceea:	f7f3 ff53 	bl	d94 <__aeabi_fmul>
    ceee:	1c01      	adds	r1, r0, #0
    cef0:	1c30      	adds	r0, r6, #0
    cef2:	f7f3 fbff 	bl	6f4 <__aeabi_fadd>
    cef6:	f004 fbe3 	bl	116c0 <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:426
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
    cefa:	6861      	ldr	r1, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:425
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
    cefc:	1c05      	adds	r5, r0, #0
    cefe:	9005      	str	r0, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:426
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
    cf00:	1c08      	adds	r0, r1, #0
    cf02:	f7f3 ff47 	bl	d94 <__aeabi_fmul>
    cf06:	6927      	ldr	r7, [r4, #16]
    cf08:	4680      	mov	r8, r0
    cf0a:	1c39      	adds	r1, r7, #0
    cf0c:	1c38      	adds	r0, r7, #0
    cf0e:	f7f3 ff41 	bl	d94 <__aeabi_fmul>
    cf12:	1c01      	adds	r1, r0, #0
    cf14:	4640      	mov	r0, r8
    cf16:	f7f3 fbed 	bl	6f4 <__aeabi_fadd>
    cf1a:	69e6      	ldr	r6, [r4, #28]
    cf1c:	1c07      	adds	r7, r0, #0
    cf1e:	1c31      	adds	r1, r6, #0
    cf20:	1c30      	adds	r0, r6, #0
    cf22:	f7f3 ff37 	bl	d94 <__aeabi_fmul>
    cf26:	1c01      	adds	r1, r0, #0
    cf28:	1c38      	adds	r0, r7, #0
    cf2a:	f7f3 fbe3 	bl	6f4 <__aeabi_fadd>
    cf2e:	f004 fbc7 	bl	116c0 <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:427
	fmod[Z] = sqrtf(fR[X][Z] * fR[X][Z] + fR[Y][Z] * fR[Y][Z] + fR[Z][Z] * fR[Z][Z]);
    cf32:	68a1      	ldr	r1, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:426
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
    cf34:	9006      	str	r0, [sp, #24]
    cf36:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:427
	fmod[Z] = sqrtf(fR[X][Z] * fR[X][Z] + fR[Y][Z] * fR[Y][Z] + fR[Z][Z] * fR[Z][Z]);
    cf38:	1c08      	adds	r0, r1, #0
    cf3a:	f7f3 ff2b 	bl	d94 <__aeabi_fmul>
    cf3e:	6967      	ldr	r7, [r4, #20]
    cf40:	4681      	mov	r9, r0
    cf42:	1c39      	adds	r1, r7, #0
    cf44:	1c38      	adds	r0, r7, #0
    cf46:	f7f3 ff25 	bl	d94 <__aeabi_fmul>
    cf4a:	1c01      	adds	r1, r0, #0
    cf4c:	4648      	mov	r0, r9
    cf4e:	f7f3 fbd1 	bl	6f4 <__aeabi_fadd>
    cf52:	6a26      	ldr	r6, [r4, #32]
    cf54:	1c07      	adds	r7, r0, #0
    cf56:	1c31      	adds	r1, r6, #0
    cf58:	1c30      	adds	r0, r6, #0
    cf5a:	f7f3 ff1b 	bl	d94 <__aeabi_fmul>
    cf5e:	1c01      	adds	r1, r0, #0
    cf60:	1c38      	adds	r0, r7, #0
    cf62:	f7f3 fbc7 	bl	6f4 <__aeabi_fadd>
    cf66:	f004 fbab 	bl	116c0 <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:430

	// normalize the rotation matrix columns
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
    cf6a:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:427
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
	fmod[Z] = sqrtf(fR[X][Z] * fR[X][Z] + fR[Y][Z] * fR[Y][Z] + fR[Z][Z] * fR[Z][Z]);
    cf6c:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:430

	// normalize the rotation matrix columns
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
    cf6e:	1c28      	adds	r0, r5, #0
    cf70:	f7f3 fb92 	bl	698 <__aeabi_fcmpeq>
    cf74:	2800      	cmp	r0, #0
    cf76:	d000      	beq.n	cf7a <feCompassWin8+0x1ba>
    cf78:	e09f      	b.n	d0ba <feCompassWin8+0x2fa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:430 (discriminator 1)
    cf7a:	4640      	mov	r0, r8
    cf7c:	2100      	movs	r1, #0
    cf7e:	f7f3 fb8b 	bl	698 <__aeabi_fcmpeq>
    cf82:	2800      	cmp	r0, #0
    cf84:	d000      	beq.n	cf88 <feCompassWin8+0x1c8>
    cf86:	e098      	b.n	d0ba <feCompassWin8+0x2fa>
    cf88:	1c30      	adds	r0, r6, #0
    cf8a:	2100      	movs	r1, #0
    cf8c:	f7f3 fb84 	bl	698 <__aeabi_fcmpeq>
    cf90:	2800      	cmp	r0, #0
    cf92:	d000      	beq.n	cf96 <feCompassWin8+0x1d6>
    cf94:	e091      	b.n	d0ba <feCompassWin8+0x2fa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:435
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    cf96:	20fe      	movs	r0, #254	; 0xfe
    cf98:	9905      	ldr	r1, [sp, #20]
    cf9a:	0580      	lsls	r0, r0, #22
    cf9c:	f7f3 fd16 	bl	9cc <__aeabi_fdiv>
    cfa0:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:440
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    cfa2:	1c29      	adds	r1, r5, #0
    cfa4:	6820      	ldr	r0, [r4, #0]
    cfa6:	f7f3 fef5 	bl	d94 <__aeabi_fmul>
    cfaa:	1c29      	adds	r1, r5, #0
    cfac:	6020      	str	r0, [r4, #0]
    cfae:	68e0      	ldr	r0, [r4, #12]
    cfb0:	f7f3 fef0 	bl	d94 <__aeabi_fmul>
    cfb4:	1c29      	adds	r1, r5, #0
    cfb6:	60e0      	str	r0, [r4, #12]
    cfb8:	69a0      	ldr	r0, [r4, #24]
    cfba:	f7f3 feeb 	bl	d94 <__aeabi_fmul>
    cfbe:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:435
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    cfc0:	20fe      	movs	r0, #254	; 0xfe
    cfc2:	9906      	ldr	r1, [sp, #24]
    cfc4:	0580      	lsls	r0, r0, #22
    cfc6:	f7f3 fd01 	bl	9cc <__aeabi_fdiv>
    cfca:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:440
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    cfcc:	1c29      	adds	r1, r5, #0
    cfce:	6860      	ldr	r0, [r4, #4]
    cfd0:	f7f3 fee0 	bl	d94 <__aeabi_fmul>
    cfd4:	1c29      	adds	r1, r5, #0
    cfd6:	6060      	str	r0, [r4, #4]
    cfd8:	6920      	ldr	r0, [r4, #16]
    cfda:	f7f3 fedb 	bl	d94 <__aeabi_fmul>
    cfde:	1c29      	adds	r1, r5, #0
    cfe0:	6120      	str	r0, [r4, #16]
    cfe2:	69e0      	ldr	r0, [r4, #28]
    cfe4:	f7f3 fed6 	bl	d94 <__aeabi_fmul>
    cfe8:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:435
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    cfea:	20fe      	movs	r0, #254	; 0xfe
    cfec:	1c31      	adds	r1, r6, #0
    cfee:	0580      	lsls	r0, r0, #22
    cff0:	f7f3 fcec 	bl	9cc <__aeabi_fdiv>
    cff4:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:440
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    cff6:	1c29      	adds	r1, r5, #0
    cff8:	68a0      	ldr	r0, [r4, #8]
    cffa:	f7f3 fecb 	bl	d94 <__aeabi_fmul>
    cffe:	1c29      	adds	r1, r5, #0
    d000:	60a0      	str	r0, [r4, #8]
    d002:	6960      	ldr	r0, [r4, #20]
    d004:	f7f3 fec6 	bl	d94 <__aeabi_fmul>
    d008:	1c29      	adds	r1, r5, #0
    d00a:	6160      	str	r0, [r4, #20]
    d00c:	6a20      	ldr	r0, [r4, #32]
    d00e:	f7f3 fec1 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:452
		f3x3matrixAeqI(fR);
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
    d012:	9b02      	ldr	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:440
			ftmp = 1.0F / fmod[j];
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    d014:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:452
		f3x3matrixAeqI(fR);
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
    d016:	6819      	ldr	r1, [r3, #0]
    d018:	685d      	ldr	r5, [r3, #4]
    d01a:	1c08      	adds	r0, r1, #0
    d01c:	689c      	ldr	r4, [r3, #8]
    d01e:	f7f3 feb9 	bl	d94 <__aeabi_fmul>
    d022:	1c29      	adds	r1, r5, #0
    d024:	1c07      	adds	r7, r0, #0
    d026:	1c28      	adds	r0, r5, #0
    d028:	f7f3 feb4 	bl	d94 <__aeabi_fmul>
    d02c:	1c01      	adds	r1, r0, #0
    d02e:	1c38      	adds	r0, r7, #0
    d030:	f7f3 fb60 	bl	6f4 <__aeabi_fadd>
    d034:	1c21      	adds	r1, r4, #0
    d036:	1c05      	adds	r5, r0, #0
    d038:	1c20      	adds	r0, r4, #0
    d03a:	f7f3 feab 	bl	d94 <__aeabi_fmul>
    d03e:	1c01      	adds	r1, r0, #0
    d040:	1c28      	adds	r0, r5, #0
    d042:	f7f3 fb57 	bl	6f4 <__aeabi_fadd>
    d046:	f004 fb3b 	bl	116c0 <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:453
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    d04a:	9b02      	ldr	r3, [sp, #8]
    d04c:	4652      	mov	r2, sl
    d04e:	681d      	ldr	r5, [r3, #0]
    d050:	685b      	ldr	r3, [r3, #4]
    d052:	6817      	ldr	r7, [r2, #0]
    d054:	6852      	ldr	r2, [r2, #4]
    d056:	4699      	mov	r9, r3
    d058:	9b02      	ldr	r3, [sp, #8]
    d05a:	4690      	mov	r8, r2
    d05c:	4652      	mov	r2, sl
    d05e:	6892      	ldr	r2, [r2, #8]
    d060:	689b      	ldr	r3, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:454
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
    d062:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:452
		f3x3matrixAeqI(fR);
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
    d064:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:453
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    d066:	4692      	mov	sl, r2
    d068:	469b      	mov	fp, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:454
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
    d06a:	f7f3 fb15 	bl	698 <__aeabi_fcmpeq>
    d06e:	2800      	cmp	r0, #0
    d070:	d126      	bne.n	d0c0 <feCompassWin8+0x300>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:453
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    d072:	1c29      	adds	r1, r5, #0
    d074:	1c38      	adds	r0, r7, #0
    d076:	f7f3 fe8d 	bl	d94 <__aeabi_fmul>
    d07a:	4649      	mov	r1, r9
    d07c:	1c05      	adds	r5, r0, #0
    d07e:	4640      	mov	r0, r8
    d080:	f7f3 fe88 	bl	d94 <__aeabi_fmul>
    d084:	1c01      	adds	r1, r0, #0
    d086:	1c28      	adds	r0, r5, #0
    d088:	f7f3 fb34 	bl	6f4 <__aeabi_fadd>
    d08c:	4659      	mov	r1, fp
    d08e:	1c05      	adds	r5, r0, #0
    d090:	4650      	mov	r0, sl
    d092:	f7f3 fe7f 	bl	d94 <__aeabi_fmul>
    d096:	1c01      	adds	r1, r0, #0
    d098:	1c28      	adds	r0, r5, #0
    d09a:	f7f3 fb2b 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:456
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
	{
		*pfDelta = fasin_deg(fGdotBc / (fmod[Z] * fmodBc));
    d09e:	1c21      	adds	r1, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:453
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    d0a0:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:456
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
	{
		*pfDelta = fasin_deg(fGdotBc / (fmod[Z] * fmodBc));
    d0a2:	1c30      	adds	r0, r6, #0
    d0a4:	f7f3 fe76 	bl	d94 <__aeabi_fmul>
    d0a8:	1c01      	adds	r1, r0, #0
    d0aa:	1c28      	adds	r0, r5, #0
    d0ac:	f7f3 fc8e 	bl	9cc <__aeabi_fdiv>
    d0b0:	f7f5 fd7a 	bl	2ba8 <fasin_deg>
    d0b4:	9a03      	ldr	r2, [sp, #12]
    d0b6:	6010      	str	r0, [r2, #0]
    d0b8:	e002      	b.n	d0c0 <feCompassWin8+0x300>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:447
		}
	}
	else
	{
		// no solution is possible to set rotation to identity matrix
		f3x3matrixAeqI(fR);
    d0ba:	1c20      	adds	r0, r4, #0
    d0bc:	f7fe fb14 	bl	b6e8 <f3x3matrixAeqI>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:460
	{
		*pfDelta = fasin_deg(fGdotBc / (fmod[Z] * fmodBc));
	}

	return;
}
    d0c0:	b009      	add	sp, #36	; 0x24
    d0c2:	bc3c      	pop	{r2, r3, r4, r5}
    d0c4:	4690      	mov	r8, r2
    d0c6:	4699      	mov	r9, r3
    d0c8:	46a2      	mov	sl, r4
    d0ca:	46ab      	mov	fp, r5
    d0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d0ce:	46c0      	nop			; (mov r8, r8)

0000d0d0 <fNEDAnglesDegFromRotationMatrix>:
fNEDAnglesDegFromRotationMatrix():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:465

// extract the NED angles in degrees from the NED rotation matrix
void fNEDAnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
    d0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d0d2:	4647      	mov	r7, r8
    d0d4:	b480      	push	{r7}
    d0d6:	1c16      	adds	r6, r2, #0
    d0d8:	1c1f      	adds	r7, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:467
	// calculate the pitch angle -90.0 <= Theta <= 90.0 deg
	*pfTheDeg = fasin_deg(-R[X][Z]);
    d0da:	6882      	ldr	r2, [r0, #8]
    d0dc:	2380      	movs	r3, #128	; 0x80
    d0de:	061b      	lsls	r3, r3, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:465
}

// extract the NED angles in degrees from the NED rotation matrix
void fNEDAnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
    d0e0:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:467
	// calculate the pitch angle -90.0 <= Theta <= 90.0 deg
	*pfTheDeg = fasin_deg(-R[X][Z]);
    d0e2:	18d0      	adds	r0, r2, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:465
}

// extract the NED angles in degrees from the NED rotation matrix
void fNEDAnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
    d0e4:	4688      	mov	r8, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:467
	// calculate the pitch angle -90.0 <= Theta <= 90.0 deg
	*pfTheDeg = fasin_deg(-R[X][Z]);
    d0e6:	f7f5 fd5f 	bl	2ba8 <fasin_deg>
    d0ea:	6030      	str	r0, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:470

	// calculate the roll angle range -180.0 <= Phi < 180.0 deg
	*pfPhiDeg = fatan2_deg(R[Y][Z], R[Z][Z]);
    d0ec:	6a21      	ldr	r1, [r4, #32]
    d0ee:	6960      	ldr	r0, [r4, #20]
    d0f0:	f7f5 ffd2 	bl	3098 <fatan2_deg>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:473

	// map +180 roll onto the functionally equivalent -180 deg roll
	if (*pfPhiDeg == 180.0F)
    d0f4:	492c      	ldr	r1, [pc, #176]	; (d1a8 <fNEDAnglesDegFromRotationMatrix+0xd8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:470
{
	// calculate the pitch angle -90.0 <= Theta <= 90.0 deg
	*pfTheDeg = fasin_deg(-R[X][Z]);

	// calculate the roll angle range -180.0 <= Phi < 180.0 deg
	*pfPhiDeg = fatan2_deg(R[Y][Z], R[Z][Z]);
    d0f6:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:473

	// map +180 roll onto the functionally equivalent -180 deg roll
	if (*pfPhiDeg == 180.0F)
    d0f8:	f7f3 face 	bl	698 <__aeabi_fcmpeq>
    d0fc:	2800      	cmp	r0, #0
    d0fe:	d000      	beq.n	d102 <fNEDAnglesDegFromRotationMatrix+0x32>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:475
	{
		*pfPhiDeg = -180.0F;
    d100:	4d2a      	ldr	r5, [pc, #168]	; (d1ac <fNEDAnglesDegFromRotationMatrix+0xdc>)
    d102:	4642      	mov	r2, r8
    d104:	6015      	str	r5, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:479
	}

	// calculate the yaw (compass) angle 0.0 <= Psi < 360.0 deg
	if (*pfTheDeg == 90.0F)
    d106:	6835      	ldr	r5, [r6, #0]
    d108:	4929      	ldr	r1, [pc, #164]	; (d1b0 <fNEDAnglesDegFromRotationMatrix+0xe0>)
    d10a:	1c28      	adds	r0, r5, #0
    d10c:	f7f3 fac4 	bl	698 <__aeabi_fcmpeq>
    d110:	2800      	cmp	r0, #0
    d112:	d13d      	bne.n	d190 <fNEDAnglesDegFromRotationMatrix+0xc0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:484
	{
		// vertical upwards gimbal lock case
		*pfPsiDeg = fatan2_deg(R[Z][Y], R[Y][Y]) + *pfPhiDeg;
	}
	else if (*pfTheDeg == -90.0F)
    d114:	1c28      	adds	r0, r5, #0
    d116:	4927      	ldr	r1, [pc, #156]	; (d1b4 <fNEDAnglesDegFromRotationMatrix+0xe4>)
    d118:	f7f3 fabe 	bl	698 <__aeabi_fcmpeq>
    d11c:	2800      	cmp	r0, #0
    d11e:	d11d      	bne.n	d15c <fNEDAnglesDegFromRotationMatrix+0x8c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:492
		*pfPsiDeg = fatan2_deg(-R[Z][Y], R[Y][Y]) - *pfPhiDeg;
	}
	else
	{
		// general case
		*pfPsiDeg = fatan2_deg(R[X][Y], R[X][X]);
    d120:	6860      	ldr	r0, [r4, #4]
    d122:	6821      	ldr	r1, [r4, #0]
    d124:	f7f5 ffb8 	bl	3098 <fatan2_deg>
    d128:	1c05      	adds	r5, r0, #0
    d12a:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:496
	}

	// map yaw angle Psi onto range 0.0 <= Psi < 360.0 deg
	if (*pfPsiDeg < 0.0F)
    d12c:	1c28      	adds	r0, r5, #0
    d12e:	2100      	movs	r1, #0
    d130:	f7f3 fab8 	bl	6a4 <__aeabi_fcmplt>
    d134:	2800      	cmp	r0, #0
    d136:	d124      	bne.n	d182 <fNEDAnglesDegFromRotationMatrix+0xb2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:502
	{
		*pfPsiDeg += 360.0F;
	}

	// check for rounding errors mapping small negative angle to 360 deg
	if (*pfPsiDeg >= 360.0F)
    d138:	1c28      	adds	r0, r5, #0
    d13a:	491f      	ldr	r1, [pc, #124]	; (d1b8 <fNEDAnglesDegFromRotationMatrix+0xe8>)
    d13c:	f7f3 fad0 	bl	6e0 <__aeabi_fcmpge>
    d140:	2800      	cmp	r0, #0
    d142:	d001      	beq.n	d148 <fNEDAnglesDegFromRotationMatrix+0x78>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:504
	{
		*pfPsiDeg = 0.0F;
    d144:	2500      	movs	r5, #0
    d146:	603d      	str	r5, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:508
	}

	// for NED, the compass heading Rho equals the yaw angle Psi
	*pfRhoDeg = *pfPsiDeg;
    d148:	9b06      	ldr	r3, [sp, #24]
    d14a:	601d      	str	r5, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:511

	// calculate the tilt angle from vertical Chi (0 <= Chi <= 180 deg) 
	*pfChiDeg = facos_deg(R[Z][Z]);
    d14c:	6a20      	ldr	r0, [r4, #32]
    d14e:	f7f5 fdd5 	bl	2cfc <facos_deg>
    d152:	9a07      	ldr	r2, [sp, #28]
    d154:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:514

	return;
}
    d156:	bc04      	pop	{r2}
    d158:	4690      	mov	r8, r2
    d15a:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:487
		*pfPsiDeg = fatan2_deg(R[Z][Y], R[Y][Y]) + *pfPhiDeg;
	}
	else if (*pfTheDeg == -90.0F)
	{
		// vertical downwards gimbal lock case
		*pfPsiDeg = fatan2_deg(-R[Z][Y], R[Y][Y]) - *pfPhiDeg;
    d15c:	69e2      	ldr	r2, [r4, #28]
    d15e:	2380      	movs	r3, #128	; 0x80
    d160:	061b      	lsls	r3, r3, #24
    d162:	18d0      	adds	r0, r2, r3
    d164:	6921      	ldr	r1, [r4, #16]
    d166:	f7f5 ff97 	bl	3098 <fatan2_deg>
    d16a:	4642      	mov	r2, r8
    d16c:	6811      	ldr	r1, [r2, #0]
    d16e:	f7f3 ff3b 	bl	fe8 <__aeabi_fsub>
    d172:	1c05      	adds	r5, r0, #0
    d174:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:496
		// general case
		*pfPsiDeg = fatan2_deg(R[X][Y], R[X][X]);
	}

	// map yaw angle Psi onto range 0.0 <= Psi < 360.0 deg
	if (*pfPsiDeg < 0.0F)
    d176:	2100      	movs	r1, #0
    d178:	1c28      	adds	r0, r5, #0
    d17a:	f7f3 fa93 	bl	6a4 <__aeabi_fcmplt>
    d17e:	2800      	cmp	r0, #0
    d180:	d0da      	beq.n	d138 <fNEDAnglesDegFromRotationMatrix+0x68>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:498
	{
		*pfPsiDeg += 360.0F;
    d182:	1c28      	adds	r0, r5, #0
    d184:	490c      	ldr	r1, [pc, #48]	; (d1b8 <fNEDAnglesDegFromRotationMatrix+0xe8>)
    d186:	f7f3 fab5 	bl	6f4 <__aeabi_fadd>
    d18a:	1c05      	adds	r5, r0, #0
    d18c:	6038      	str	r0, [r7, #0]
    d18e:	e7d3      	b.n	d138 <fNEDAnglesDegFromRotationMatrix+0x68>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:482

	// calculate the yaw (compass) angle 0.0 <= Psi < 360.0 deg
	if (*pfTheDeg == 90.0F)
	{
		// vertical upwards gimbal lock case
		*pfPsiDeg = fatan2_deg(R[Z][Y], R[Y][Y]) + *pfPhiDeg;
    d190:	6921      	ldr	r1, [r4, #16]
    d192:	69e0      	ldr	r0, [r4, #28]
    d194:	f7f5 ff80 	bl	3098 <fatan2_deg>
    d198:	4643      	mov	r3, r8
    d19a:	6819      	ldr	r1, [r3, #0]
    d19c:	f7f3 faaa 	bl	6f4 <__aeabi_fadd>
    d1a0:	1c05      	adds	r5, r0, #0
    d1a2:	6038      	str	r0, [r7, #0]
    d1a4:	e7c2      	b.n	d12c <fNEDAnglesDegFromRotationMatrix+0x5c>
    d1a6:	46c0      	nop			; (mov r8, r8)
    d1a8:	43340000 	.word	0x43340000
    d1ac:	c3340000 	.word	0xc3340000
    d1b0:	42b40000 	.word	0x42b40000
    d1b4:	c2b40000 	.word	0xc2b40000
    d1b8:	43b40000 	.word	0x43b40000

0000d1bc <fAndroidAnglesDegFromRotationMatrix>:
fAndroidAnglesDegFromRotationMatrix():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:519
}

// extract the Android angles in degrees from the Android rotation matrix
void fAndroidAnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
    d1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1be:	4647      	mov	r7, r8
    d1c0:	b480      	push	{r7}
    d1c2:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:521
	// calculate the roll angle -90.0 <= Phi <= 90.0 deg
	*pfPhiDeg = fasin_deg(R[X][Z]);
    d1c4:	6880      	ldr	r0, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:519
}

// extract the Android angles in degrees from the Android rotation matrix
void fAndroidAnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
    d1c6:	1c0e      	adds	r6, r1, #0
    d1c8:	4690      	mov	r8, r2
    d1ca:	1c1f      	adds	r7, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:521
	// calculate the roll angle -90.0 <= Phi <= 90.0 deg
	*pfPhiDeg = fasin_deg(R[X][Z]);
    d1cc:	f7f5 fcec 	bl	2ba8 <fasin_deg>
    d1d0:	6030      	str	r0, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:524

	// calculate the pitch angle -180.0 <= The < 180.0 deg
	*pfTheDeg = fatan2_deg(-R[Y][Z], R[Z][Z]);
    d1d2:	6962      	ldr	r2, [r4, #20]
    d1d4:	2380      	movs	r3, #128	; 0x80
    d1d6:	061b      	lsls	r3, r3, #24
    d1d8:	6a21      	ldr	r1, [r4, #32]
    d1da:	18d0      	adds	r0, r2, r3
    d1dc:	f7f5 ff5c 	bl	3098 <fatan2_deg>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:527

	// map +180 pitch onto the functionally equivalent -180 deg pitch
	if (*pfTheDeg == 180.0F)
    d1e0:	492c      	ldr	r1, [pc, #176]	; (d294 <fAndroidAnglesDegFromRotationMatrix+0xd8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:524
{
	// calculate the roll angle -90.0 <= Phi <= 90.0 deg
	*pfPhiDeg = fasin_deg(R[X][Z]);

	// calculate the pitch angle -180.0 <= The < 180.0 deg
	*pfTheDeg = fatan2_deg(-R[Y][Z], R[Z][Z]);
    d1e2:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:527

	// map +180 pitch onto the functionally equivalent -180 deg pitch
	if (*pfTheDeg == 180.0F)
    d1e4:	f7f3 fa58 	bl	698 <__aeabi_fcmpeq>
    d1e8:	2800      	cmp	r0, #0
    d1ea:	d000      	beq.n	d1ee <fAndroidAnglesDegFromRotationMatrix+0x32>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:529
	{
		*pfTheDeg = -180.0F;
    d1ec:	4d2a      	ldr	r5, [pc, #168]	; (d298 <fAndroidAnglesDegFromRotationMatrix+0xdc>)
    d1ee:	4642      	mov	r2, r8
    d1f0:	6015      	str	r5, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:533
	}

	// calculate the yaw (compass) angle 0.0 <= Psi < 360.0 deg
	if (*pfPhiDeg == 90.0F)
    d1f2:	6835      	ldr	r5, [r6, #0]
    d1f4:	4929      	ldr	r1, [pc, #164]	; (d29c <fAndroidAnglesDegFromRotationMatrix+0xe0>)
    d1f6:	1c28      	adds	r0, r5, #0
    d1f8:	f7f3 fa4e 	bl	698 <__aeabi_fcmpeq>
    d1fc:	2800      	cmp	r0, #0
    d1fe:	d13d      	bne.n	d27c <fAndroidAnglesDegFromRotationMatrix+0xc0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:538
	{
		// vertical downwards gimbal lock case
		*pfPsiDeg = fatan2_deg(R[Y][X], R[Y][Y]) - *pfTheDeg;
	}
	else if (*pfPhiDeg == -90.0F)
    d200:	1c28      	adds	r0, r5, #0
    d202:	4927      	ldr	r1, [pc, #156]	; (d2a0 <fAndroidAnglesDegFromRotationMatrix+0xe4>)
    d204:	f7f3 fa48 	bl	698 <__aeabi_fcmpeq>
    d208:	2800      	cmp	r0, #0
    d20a:	d120      	bne.n	d24e <fAndroidAnglesDegFromRotationMatrix+0x92>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:546
		*pfPsiDeg = fatan2_deg(R[Y][X], R[Y][Y]) + *pfTheDeg;
	}
	else
	{
		// // general case
		*pfPsiDeg = fatan2_deg(-R[X][Y], R[X][X]);
    d20c:	6863      	ldr	r3, [r4, #4]
    d20e:	2280      	movs	r2, #128	; 0x80
    d210:	0612      	lsls	r2, r2, #24
    d212:	1898      	adds	r0, r3, r2
    d214:	6821      	ldr	r1, [r4, #0]
    d216:	f7f5 ff3f 	bl	3098 <fatan2_deg>
    d21a:	1c05      	adds	r5, r0, #0
    d21c:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:550
	}

	// map yaw angle Psi onto range 0.0 <= Psi < 360.0 deg
	if (*pfPsiDeg < 0.0F)
    d21e:	1c28      	adds	r0, r5, #0
    d220:	2100      	movs	r1, #0
    d222:	f7f3 fa3f 	bl	6a4 <__aeabi_fcmplt>
    d226:	2800      	cmp	r0, #0
    d228:	d121      	bne.n	d26e <fAndroidAnglesDegFromRotationMatrix+0xb2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:556
	{
		*pfPsiDeg += 360.0F;
	}

	// check for rounding errors mapping small negative angle to 360 deg
	if (*pfPsiDeg >= 360.0F)
    d22a:	1c28      	adds	r0, r5, #0
    d22c:	491d      	ldr	r1, [pc, #116]	; (d2a4 <fAndroidAnglesDegFromRotationMatrix+0xe8>)
    d22e:	f7f3 fa57 	bl	6e0 <__aeabi_fcmpge>
    d232:	2800      	cmp	r0, #0
    d234:	d001      	beq.n	d23a <fAndroidAnglesDegFromRotationMatrix+0x7e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:558
	{
		*pfPsiDeg = 0.0F;
    d236:	2500      	movs	r5, #0
    d238:	603d      	str	r5, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:563
	}

	// the compass heading angle Rho equals the yaw angle Psi
	// this definition is compliant with Motorola Xoom tablet behavior
	*pfRhoDeg = *pfPsiDeg;
    d23a:	9b06      	ldr	r3, [sp, #24]
    d23c:	601d      	str	r5, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:566

	// calculate the tilt angle from vertical Chi (0 <= Chi <= 180 deg) 
	*pfChiDeg = facos_deg(R[Z][Z]);
    d23e:	6a20      	ldr	r0, [r4, #32]
    d240:	f7f5 fd5c 	bl	2cfc <facos_deg>
    d244:	9a07      	ldr	r2, [sp, #28]
    d246:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:569

	return;
}
    d248:	bc04      	pop	{r2}
    d24a:	4690      	mov	r8, r2
    d24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:541
		*pfPsiDeg = fatan2_deg(R[Y][X], R[Y][Y]) - *pfTheDeg;
	}
	else if (*pfPhiDeg == -90.0F)
	{
		// vertical upwards gimbal lock case
		*pfPsiDeg = fatan2_deg(R[Y][X], R[Y][Y]) + *pfTheDeg;
    d24e:	6921      	ldr	r1, [r4, #16]
    d250:	68e0      	ldr	r0, [r4, #12]
    d252:	f7f5 ff21 	bl	3098 <fatan2_deg>
    d256:	4642      	mov	r2, r8
    d258:	6811      	ldr	r1, [r2, #0]
    d25a:	f7f3 fa4b 	bl	6f4 <__aeabi_fadd>
    d25e:	1c05      	adds	r5, r0, #0
    d260:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:550
		// // general case
		*pfPsiDeg = fatan2_deg(-R[X][Y], R[X][X]);
	}

	// map yaw angle Psi onto range 0.0 <= Psi < 360.0 deg
	if (*pfPsiDeg < 0.0F)
    d262:	2100      	movs	r1, #0
    d264:	1c28      	adds	r0, r5, #0
    d266:	f7f3 fa1d 	bl	6a4 <__aeabi_fcmplt>
    d26a:	2800      	cmp	r0, #0
    d26c:	d0dd      	beq.n	d22a <fAndroidAnglesDegFromRotationMatrix+0x6e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:552
	{
		*pfPsiDeg += 360.0F;
    d26e:	1c28      	adds	r0, r5, #0
    d270:	490c      	ldr	r1, [pc, #48]	; (d2a4 <fAndroidAnglesDegFromRotationMatrix+0xe8>)
    d272:	f7f3 fa3f 	bl	6f4 <__aeabi_fadd>
    d276:	1c05      	adds	r5, r0, #0
    d278:	6038      	str	r0, [r7, #0]
    d27a:	e7d6      	b.n	d22a <fAndroidAnglesDegFromRotationMatrix+0x6e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:536

	// calculate the yaw (compass) angle 0.0 <= Psi < 360.0 deg
	if (*pfPhiDeg == 90.0F)
	{
		// vertical downwards gimbal lock case
		*pfPsiDeg = fatan2_deg(R[Y][X], R[Y][Y]) - *pfTheDeg;
    d27c:	6921      	ldr	r1, [r4, #16]
    d27e:	68e0      	ldr	r0, [r4, #12]
    d280:	f7f5 ff0a 	bl	3098 <fatan2_deg>
    d284:	4643      	mov	r3, r8
    d286:	6819      	ldr	r1, [r3, #0]
    d288:	f7f3 feae 	bl	fe8 <__aeabi_fsub>
    d28c:	1c05      	adds	r5, r0, #0
    d28e:	6038      	str	r0, [r7, #0]
    d290:	e7c5      	b.n	d21e <fAndroidAnglesDegFromRotationMatrix+0x62>
    d292:	46c0      	nop			; (mov r8, r8)
    d294:	43340000 	.word	0x43340000
    d298:	c3340000 	.word	0xc3340000
    d29c:	42b40000 	.word	0x42b40000
    d2a0:	c2b40000 	.word	0xc2b40000
    d2a4:	43b40000 	.word	0x43b40000

0000d2a8 <fWin8AnglesDegFromRotationMatrix>:
fWin8AnglesDegFromRotationMatrix():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:574
}

// extract the Windows 8 angles in degrees from the Windows 8 rotation matrix
void fWin8AnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
    d2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:576
	// calculate the roll angle -90.0 <= Phi <= 90.0 deg
	if (R[Z][Z] == 0.0F)
    d2aa:	6a05      	ldr	r5, [r0, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:574
}

// extract the Windows 8 angles in degrees from the Windows 8 rotation matrix
void fWin8AnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
    d2ac:	4647      	mov	r7, r8
    d2ae:	b480      	push	{r7}
    d2b0:	1c04      	adds	r4, r0, #0
    d2b2:	4688      	mov	r8, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:576
	// calculate the roll angle -90.0 <= Phi <= 90.0 deg
	if (R[Z][Z] == 0.0F)
    d2b4:	1c28      	adds	r0, r5, #0
    d2b6:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:574
}

// extract the Windows 8 angles in degrees from the Windows 8 rotation matrix
void fWin8AnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
    d2b8:	1c16      	adds	r6, r2, #0
    d2ba:	1c1f      	adds	r7, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:576
	// calculate the roll angle -90.0 <= Phi <= 90.0 deg
	if (R[Z][Z] == 0.0F)
    d2bc:	f7f3 f9ec 	bl	698 <__aeabi_fcmpeq>
    d2c0:	2800      	cmp	r0, #0
    d2c2:	d100      	bne.n	d2c6 <fWin8AnglesDegFromRotationMatrix+0x1e>
    d2c4:	e08f      	b.n	d3e6 <fWin8AnglesDegFromRotationMatrix+0x13e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:578
	{
		if (R[X][Z] >= 0.0F)
    d2c6:	68a0      	ldr	r0, [r4, #8]
    d2c8:	2100      	movs	r1, #0
    d2ca:	f7f3 fa09 	bl	6e0 <__aeabi_fcmpge>
    d2ce:	2800      	cmp	r0, #0
    d2d0:	d100      	bne.n	d2d4 <fWin8AnglesDegFromRotationMatrix+0x2c>
    d2d2:	e09b      	b.n	d40c <fWin8AnglesDegFromRotationMatrix+0x164>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:581
		{
			// tan(phi) is -infinity
			*pfPhiDeg = -90.0F;
    d2d4:	4b4f      	ldr	r3, [pc, #316]	; (d414 <fWin8AnglesDegFromRotationMatrix+0x16c>)
    d2d6:	4642      	mov	r2, r8
    d2d8:	6013      	str	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:596
		// general case
		*pfPhiDeg = fatan_deg(-R[X][Z] / R[Z][Z]);
	}

	// first calculate the pitch angle The in the range -90.0 <= The <= 90.0 deg
	*pfTheDeg = fasin_deg(R[Y][Z]);
    d2da:	6960      	ldr	r0, [r4, #20]
    d2dc:	f7f5 fc64 	bl	2ba8 <fasin_deg>
    d2e0:	6030      	str	r0, [r6, #0]
    d2e2:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:600

	// use R[Z][Z]=cos(Phi)*cos(The) to correct the quadrant of The remembering
	// cos(Phi) is non-negative so that cos(The) has the same sign as R[Z][Z].
	if (R[Z][Z] < 0.0F)
    d2e4:	2100      	movs	r1, #0
    d2e6:	6a20      	ldr	r0, [r4, #32]
    d2e8:	f7f3 f9dc 	bl	6a4 <__aeabi_fcmplt>
    d2ec:	2800      	cmp	r0, #0
    d2ee:	d000      	beq.n	d2f2 <fWin8AnglesDegFromRotationMatrix+0x4a>
    d2f0:	e085      	b.n	d3fe <fWin8AnglesDegFromRotationMatrix+0x156>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:607
		// wrap The around +90 deg and -90 deg giving result 90 to 270 deg
		*pfTheDeg = 180.0F - *pfTheDeg;
	}

	// map the pitch angle The to the range -180.0 <= The < 180.0 deg
	if (*pfTheDeg >= 180.0F)
    d2f2:	1c28      	adds	r0, r5, #0
    d2f4:	4948      	ldr	r1, [pc, #288]	; (d418 <fWin8AnglesDegFromRotationMatrix+0x170>)
    d2f6:	f7f3 f9f3 	bl	6e0 <__aeabi_fcmpge>
    d2fa:	2800      	cmp	r0, #0
    d2fc:	d005      	beq.n	d30a <fWin8AnglesDegFromRotationMatrix+0x62>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:609
	{
		*pfTheDeg -= 360.0F;
    d2fe:	1c28      	adds	r0, r5, #0
    d300:	4946      	ldr	r1, [pc, #280]	; (d41c <fWin8AnglesDegFromRotationMatrix+0x174>)
    d302:	f7f3 fe71 	bl	fe8 <__aeabi_fsub>
    d306:	1c05      	adds	r5, r0, #0
    d308:	6030      	str	r0, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:613
	}

	// calculate the yaw angle Psi
	if (*pfTheDeg == 90.0F)
    d30a:	1c28      	adds	r0, r5, #0
    d30c:	4944      	ldr	r1, [pc, #272]	; (d420 <fWin8AnglesDegFromRotationMatrix+0x178>)
    d30e:	f7f3 f9c3 	bl	698 <__aeabi_fcmpeq>
    d312:	2800      	cmp	r0, #0
    d314:	d15c      	bne.n	d3d0 <fWin8AnglesDegFromRotationMatrix+0x128>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:618
	{
		// vertical upwards gimbal lock case: -270 <= Psi < 90 deg
		*pfPsiDeg = fatan2_deg(R[X][Y], R[X][X]) - *pfPhiDeg;
	}
	else if (*pfTheDeg == -90.0F)
    d316:	1c28      	adds	r0, r5, #0
    d318:	493e      	ldr	r1, [pc, #248]	; (d414 <fWin8AnglesDegFromRotationMatrix+0x16c>)
    d31a:	f7f3 f9bd 	bl	698 <__aeabi_fcmpeq>
    d31e:	2800      	cmp	r0, #0
    d320:	d021      	beq.n	d366 <fWin8AnglesDegFromRotationMatrix+0xbe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:621
	{
		// vertical downwards gimbal lock case: -270 <= Psi < 90 deg
		*pfPsiDeg = fatan2_deg(R[X][Y], R[X][X]) + *pfPhiDeg;
    d322:	6821      	ldr	r1, [r4, #0]
    d324:	6860      	ldr	r0, [r4, #4]
    d326:	f7f5 feb7 	bl	3098 <fatan2_deg>
    d32a:	4643      	mov	r3, r8
    d32c:	6819      	ldr	r1, [r3, #0]
    d32e:	f7f3 f9e1 	bl	6f4 <__aeabi_fadd>
    d332:	1c05      	adds	r5, r0, #0
    d334:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:636
			*pfPsiDeg += 180.0F;
		}
	}

	// map yaw angle Psi onto range 0.0 <= Psi < 360.0 deg
	if (*pfPsiDeg < 0.0F)
    d336:	1c28      	adds	r0, r5, #0
    d338:	2100      	movs	r1, #0
    d33a:	f7f3 f9b3 	bl	6a4 <__aeabi_fcmplt>
    d33e:	2800      	cmp	r0, #0
    d340:	d12e      	bne.n	d3a0 <fWin8AnglesDegFromRotationMatrix+0xf8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:642
	{
		*pfPsiDeg += 360.0F;
	}

	// check for any rounding error mapping small negative angle to 360 deg
	if (*pfPsiDeg >= 360.0F)
    d342:	1c28      	adds	r0, r5, #0
    d344:	4935      	ldr	r1, [pc, #212]	; (d41c <fWin8AnglesDegFromRotationMatrix+0x174>)
    d346:	f7f3 f9cb 	bl	6e0 <__aeabi_fcmpge>
    d34a:	2800      	cmp	r0, #0
    d34c:	d034      	beq.n	d3b8 <fWin8AnglesDegFromRotationMatrix+0x110>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:644
	{
		*pfPsiDeg = 0.0F;
    d34e:	2500      	movs	r5, #0
    d350:	603d      	str	r5, [r7, #0]
    d352:	9a06      	ldr	r2, [sp, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:660

	// calculate the tilt angle from vertical Chi (0 <= Chi <= 180 deg) 
	*pfChiDeg = facos_deg(R[Z][Z]);

	return;
}
    d354:	6015      	str	r5, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:657
	{
		*pfRhoDeg = 0.0F;
	}

	// calculate the tilt angle from vertical Chi (0 <= Chi <= 180 deg) 
	*pfChiDeg = facos_deg(R[Z][Z]);
    d356:	6a20      	ldr	r0, [r4, #32]
    d358:	f7f5 fcd0 	bl	2cfc <facos_deg>
    d35c:	9b07      	ldr	r3, [sp, #28]
    d35e:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:660

	return;
}
    d360:	bc04      	pop	{r2}
    d362:	4690      	mov	r8, r2
    d364:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:626
		*pfPsiDeg = fatan2_deg(R[X][Y], R[X][X]) + *pfPhiDeg;
	}
	else
	{
		// general case: -180 <= Psi < 180 deg
		*pfPsiDeg = fatan2_deg(-R[Y][X], R[Y][Y]);
    d366:	68e2      	ldr	r2, [r4, #12]
    d368:	2380      	movs	r3, #128	; 0x80
    d36a:	061b      	lsls	r3, r3, #24
    d36c:	6921      	ldr	r1, [r4, #16]
    d36e:	18d0      	adds	r0, r2, r3
    d370:	f7f5 fe92 	bl	3098 <fatan2_deg>
    d374:	6038      	str	r0, [r7, #0]
    d376:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:629

		// correct the quadrant for Psi using the value of The (deg) to give -180 <= Psi < 380 deg
		if (fabs(*pfTheDeg) >= 90.0F)
    d378:	6830      	ldr	r0, [r6, #0]
    d37a:	4929      	ldr	r1, [pc, #164]	; (d420 <fWin8AnglesDegFromRotationMatrix+0x178>)
    d37c:	0040      	lsls	r0, r0, #1
    d37e:	0840      	lsrs	r0, r0, #1
    d380:	f7f3 f9ae 	bl	6e0 <__aeabi_fcmpge>
    d384:	2800      	cmp	r0, #0
    d386:	d0d6      	beq.n	d336 <fWin8AnglesDegFromRotationMatrix+0x8e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:631
		{
			*pfPsiDeg += 180.0F;
    d388:	1c28      	adds	r0, r5, #0
    d38a:	4923      	ldr	r1, [pc, #140]	; (d418 <fWin8AnglesDegFromRotationMatrix+0x170>)
    d38c:	f7f3 f9b2 	bl	6f4 <__aeabi_fadd>
    d390:	1c05      	adds	r5, r0, #0
    d392:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:636
		}
	}

	// map yaw angle Psi onto range 0.0 <= Psi < 360.0 deg
	if (*pfPsiDeg < 0.0F)
    d394:	2100      	movs	r1, #0
    d396:	1c28      	adds	r0, r5, #0
    d398:	f7f3 f984 	bl	6a4 <__aeabi_fcmplt>
    d39c:	2800      	cmp	r0, #0
    d39e:	d0d0      	beq.n	d342 <fWin8AnglesDegFromRotationMatrix+0x9a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:638
	{
		*pfPsiDeg += 360.0F;
    d3a0:	1c28      	adds	r0, r5, #0
    d3a2:	491e      	ldr	r1, [pc, #120]	; (d41c <fWin8AnglesDegFromRotationMatrix+0x174>)
    d3a4:	f7f3 f9a6 	bl	6f4 <__aeabi_fadd>
    d3a8:	1c05      	adds	r5, r0, #0
    d3aa:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:642
	}

	// check for any rounding error mapping small negative angle to 360 deg
	if (*pfPsiDeg >= 360.0F)
    d3ac:	491b      	ldr	r1, [pc, #108]	; (d41c <fWin8AnglesDegFromRotationMatrix+0x174>)
    d3ae:	1c28      	adds	r0, r5, #0
    d3b0:	f7f3 f996 	bl	6e0 <__aeabi_fcmpge>
    d3b4:	2800      	cmp	r0, #0
    d3b6:	d1ca      	bne.n	d34e <fWin8AnglesDegFromRotationMatrix+0xa6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:648
	{
		*pfPsiDeg = 0.0F;
	}

	// compute the compass angle Rho = 360 - Psi
	*pfRhoDeg = 360.0F - *pfPsiDeg;
    d3b8:	1c29      	adds	r1, r5, #0
    d3ba:	4818      	ldr	r0, [pc, #96]	; (d41c <fWin8AnglesDegFromRotationMatrix+0x174>)
    d3bc:	f7f3 fe14 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:651

	// check for rounding errors mapping small negative angle to 360 deg and zero degree case
	if (*pfRhoDeg >= 360.0F)
    d3c0:	4916      	ldr	r1, [pc, #88]	; (d41c <fWin8AnglesDegFromRotationMatrix+0x174>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:648
	{
		*pfPsiDeg = 0.0F;
	}

	// compute the compass angle Rho = 360 - Psi
	*pfRhoDeg = 360.0F - *pfPsiDeg;
    d3c2:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:651

	// check for rounding errors mapping small negative angle to 360 deg and zero degree case
	if (*pfRhoDeg >= 360.0F)
    d3c4:	f7f3 f98c 	bl	6e0 <__aeabi_fcmpge>
    d3c8:	2800      	cmp	r0, #0
    d3ca:	d0c2      	beq.n	d352 <fWin8AnglesDegFromRotationMatrix+0xaa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:653
	{
		*pfRhoDeg = 0.0F;
    d3cc:	2500      	movs	r5, #0
    d3ce:	e7c0      	b.n	d352 <fWin8AnglesDegFromRotationMatrix+0xaa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:616

	// calculate the yaw angle Psi
	if (*pfTheDeg == 90.0F)
	{
		// vertical upwards gimbal lock case: -270 <= Psi < 90 deg
		*pfPsiDeg = fatan2_deg(R[X][Y], R[X][X]) - *pfPhiDeg;
    d3d0:	6821      	ldr	r1, [r4, #0]
    d3d2:	6860      	ldr	r0, [r4, #4]
    d3d4:	f7f5 fe60 	bl	3098 <fatan2_deg>
    d3d8:	4642      	mov	r2, r8
    d3da:	6811      	ldr	r1, [r2, #0]
    d3dc:	f7f3 fe04 	bl	fe8 <__aeabi_fsub>
    d3e0:	1c05      	adds	r5, r0, #0
    d3e2:	6038      	str	r0, [r7, #0]
    d3e4:	e7a7      	b.n	d336 <fWin8AnglesDegFromRotationMatrix+0x8e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:592
		}
	}
	else
	{
		// general case
		*pfPhiDeg = fatan_deg(-R[X][Z] / R[Z][Z]);
    d3e6:	68a3      	ldr	r3, [r4, #8]
    d3e8:	2280      	movs	r2, #128	; 0x80
    d3ea:	0612      	lsls	r2, r2, #24
    d3ec:	1898      	adds	r0, r3, r2
    d3ee:	1c29      	adds	r1, r5, #0
    d3f0:	f7f3 faec 	bl	9cc <__aeabi_fdiv>
    d3f4:	f7f5 fdc2 	bl	2f7c <fatan_deg>
    d3f8:	4643      	mov	r3, r8
    d3fa:	6018      	str	r0, [r3, #0]
    d3fc:	e76d      	b.n	d2da <fWin8AnglesDegFromRotationMatrix+0x32>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:603
	// use R[Z][Z]=cos(Phi)*cos(The) to correct the quadrant of The remembering
	// cos(Phi) is non-negative so that cos(The) has the same sign as R[Z][Z].
	if (R[Z][Z] < 0.0F)
	{
		// wrap The around +90 deg and -90 deg giving result 90 to 270 deg
		*pfTheDeg = 180.0F - *pfTheDeg;
    d3fe:	1c29      	adds	r1, r5, #0
    d400:	4805      	ldr	r0, [pc, #20]	; (d418 <fWin8AnglesDegFromRotationMatrix+0x170>)
    d402:	f7f3 fdf1 	bl	fe8 <__aeabi_fsub>
    d406:	1c05      	adds	r5, r0, #0
    d408:	6030      	str	r0, [r6, #0]
    d40a:	e772      	b.n	d2f2 <fWin8AnglesDegFromRotationMatrix+0x4a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:586
			*pfPhiDeg = -90.0F;
		}
		else
		{
			// tan(phi) is +infinity
			*pfPhiDeg = 90.0F;
    d40c:	4b04      	ldr	r3, [pc, #16]	; (d420 <fWin8AnglesDegFromRotationMatrix+0x178>)
    d40e:	4642      	mov	r2, r8
    d410:	6013      	str	r3, [r2, #0]
    d412:	e762      	b.n	d2da <fWin8AnglesDegFromRotationMatrix+0x32>
    d414:	c2b40000 	.word	0xc2b40000
    d418:	43340000 	.word	0x43340000
    d41c:	43b40000 	.word	0x43b40000
    d420:	42b40000 	.word	0x42b40000

0000d424 <fQuaternionFromRotationVectorDeg>:
fQuaternionFromRotationVectorDeg():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:664
	return;
}

// computes normalized rotation quaternion from a rotation vector (deg)
void fQuaternionFromRotationVectorDeg(struct fquaternion *pq, const float rvecdeg[], float fscaling)
{
    d424:	b5f0      	push	{r4, r5, r6, r7, lr}
    d426:	1c0c      	adds	r4, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:674
	float sinhalfeta;		// sin(eta/2)
	float fvecsq;			// q1^2+q2^2+q3^2
	float ftmp;				// scratch variable

	// compute the scaled rotation angle eta (deg) which can be both positve or negative
	fetadeg = fscaling * sqrtf(rvecdeg[X] * rvecdeg[X] + rvecdeg[Y] * rvecdeg[Y] + rvecdeg[Z] * rvecdeg[Z]);
    d428:	6809      	ldr	r1, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:664
	return;
}

// computes normalized rotation quaternion from a rotation vector (deg)
void fQuaternionFromRotationVectorDeg(struct fquaternion *pq, const float rvecdeg[], float fscaling)
{
    d42a:	464e      	mov	r6, r9
    d42c:	4645      	mov	r5, r8
    d42e:	4657      	mov	r7, sl
    d430:	b4e0      	push	{r5, r6, r7}
    d432:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:674
	float sinhalfeta;		// sin(eta/2)
	float fvecsq;			// q1^2+q2^2+q3^2
	float ftmp;				// scratch variable

	// compute the scaled rotation angle eta (deg) which can be both positve or negative
	fetadeg = fscaling * sqrtf(rvecdeg[X] * rvecdeg[X] + rvecdeg[Y] * rvecdeg[Y] + rvecdeg[Z] * rvecdeg[Z]);
    d434:	1c08      	adds	r0, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:664
	return;
}

// computes normalized rotation quaternion from a rotation vector (deg)
void fQuaternionFromRotationVectorDeg(struct fquaternion *pq, const float rvecdeg[], float fscaling)
{
    d436:	4691      	mov	r9, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:674
	float sinhalfeta;		// sin(eta/2)
	float fvecsq;			// q1^2+q2^2+q3^2
	float ftmp;				// scratch variable

	// compute the scaled rotation angle eta (deg) which can be both positve or negative
	fetadeg = fscaling * sqrtf(rvecdeg[X] * rvecdeg[X] + rvecdeg[Y] * rvecdeg[Y] + rvecdeg[Z] * rvecdeg[Z]);
    d438:	f7f3 fcac 	bl	d94 <__aeabi_fmul>
    d43c:	6867      	ldr	r7, [r4, #4]
    d43e:	4680      	mov	r8, r0
    d440:	1c39      	adds	r1, r7, #0
    d442:	1c38      	adds	r0, r7, #0
    d444:	f7f3 fca6 	bl	d94 <__aeabi_fmul>
    d448:	1c01      	adds	r1, r0, #0
    d44a:	4640      	mov	r0, r8
    d44c:	f7f3 f952 	bl	6f4 <__aeabi_fadd>
    d450:	68a6      	ldr	r6, [r4, #8]
    d452:	1c07      	adds	r7, r0, #0
    d454:	1c31      	adds	r1, r6, #0
    d456:	1c30      	adds	r0, r6, #0
    d458:	f7f3 fc9c 	bl	d94 <__aeabi_fmul>
    d45c:	1c01      	adds	r1, r0, #0
    d45e:	1c38      	adds	r0, r7, #0
    d460:	f7f3 f948 	bl	6f4 <__aeabi_fadd>
    d464:	f004 f92c 	bl	116c0 <sqrtf>
    d468:	4649      	mov	r1, r9
    d46a:	f7f3 fc93 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:675
	fetarad = fetadeg * FDEGTORAD;
    d46e:	494d      	ldr	r1, [pc, #308]	; (d5a4 <fQuaternionFromRotationVectorDeg+0x180>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:674
	float sinhalfeta;		// sin(eta/2)
	float fvecsq;			// q1^2+q2^2+q3^2
	float ftmp;				// scratch variable

	// compute the scaled rotation angle eta (deg) which can be both positve or negative
	fetadeg = fscaling * sqrtf(rvecdeg[X] * rvecdeg[X] + rvecdeg[Y] * rvecdeg[Y] + rvecdeg[Z] * rvecdeg[Z]);
    d470:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:675
	fetarad = fetadeg * FDEGTORAD;
    d472:	f7f3 fc8f 	bl	d94 <__aeabi_fmul>
    d476:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:676
	fetarad2 = fetarad * fetarad;
    d478:	1c31      	adds	r1, r6, #0
    d47a:	f7f3 fc8b 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:680

	// calculate the sine and cosine using small angle approximations or exact
	// angles under sqrt(0.02)=0.141 rad is 8.1 deg and 1620 deg/s (=936deg/s in 3 axes) at 200Hz and 405 deg/s at 50Hz
	if (fetarad2 <= 0.02F)
    d47e:	494a      	ldr	r1, [pc, #296]	; (d5a8 <fQuaternionFromRotationVectorDeg+0x184>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:676
	float ftmp;				// scratch variable

	// compute the scaled rotation angle eta (deg) which can be both positve or negative
	fetadeg = fscaling * sqrtf(rvecdeg[X] * rvecdeg[X] + rvecdeg[Y] * rvecdeg[Y] + rvecdeg[Z] * rvecdeg[Z]);
	fetarad = fetadeg * FDEGTORAD;
	fetarad2 = fetarad * fetarad;
    d480:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:680

	// calculate the sine and cosine using small angle approximations or exact
	// angles under sqrt(0.02)=0.141 rad is 8.1 deg and 1620 deg/s (=936deg/s in 3 axes) at 200Hz and 405 deg/s at 50Hz
	if (fetarad2 <= 0.02F)
    d482:	f7f3 f919 	bl	6b8 <__aeabi_fcmple>
    d486:	2800      	cmp	r0, #0
    d488:	d04f      	beq.n	d52a <fQuaternionFromRotationVectorDeg+0x106>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:683
	{
		// use MacLaurin series up to and including third order
		sinhalfeta = fetarad * (0.5F - ONEOVER48 * fetarad2);
    d48a:	1c38      	adds	r0, r7, #0
    d48c:	4947      	ldr	r1, [pc, #284]	; (d5ac <fQuaternionFromRotationVectorDeg+0x188>)
    d48e:	f7f3 fc81 	bl	d94 <__aeabi_fmul>
    d492:	1c01      	adds	r1, r0, #0
    d494:	20fc      	movs	r0, #252	; 0xfc
    d496:	0580      	lsls	r0, r0, #22
    d498:	f7f3 fda6 	bl	fe8 <__aeabi_fsub>
    d49c:	1c31      	adds	r1, r6, #0
    d49e:	f7f3 fc79 	bl	d94 <__aeabi_fmul>
    d4a2:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:699
		// use exact calculation
		sinhalfeta = (float)sinf(0.5F * fetarad);
	}

	// compute the vector quaternion components q1, q2, q3
	if (fetadeg != 0.0F)
    d4a4:	2600      	movs	r6, #0
    d4a6:	4640      	mov	r0, r8
    d4a8:	1c31      	adds	r1, r6, #0
    d4aa:	f7f3 f8f5 	bl	698 <__aeabi_fcmpeq>
    d4ae:	2800      	cmp	r0, #0
    d4b0:	d161      	bne.n	d576 <fQuaternionFromRotationVectorDeg+0x152>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:702
	{
		// general case with non-zero rotation angle
		ftmp = fscaling * sinhalfeta / fetadeg;
    d4b2:	1c39      	adds	r1, r7, #0
    d4b4:	4648      	mov	r0, r9
    d4b6:	f7f3 fc6d 	bl	d94 <__aeabi_fmul>
    d4ba:	4641      	mov	r1, r8
    d4bc:	f7f3 fa86 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:703
		pq->q1 = rvecdeg[X] * ftmp;		// q1 = nx * sin(eta/2)
    d4c0:	6821      	ldr	r1, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:702

	// compute the vector quaternion components q1, q2, q3
	if (fetadeg != 0.0F)
	{
		// general case with non-zero rotation angle
		ftmp = fscaling * sinhalfeta / fetadeg;
    d4c2:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:703
		pq->q1 = rvecdeg[X] * ftmp;		// q1 = nx * sin(eta/2)
    d4c4:	f7f3 fc66 	bl	d94 <__aeabi_fmul>
    d4c8:	6068      	str	r0, [r5, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:704
		pq->q2 = rvecdeg[Y] * ftmp;		// q2 = ny * sin(eta/2)
    d4ca:	6861      	ldr	r1, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:703
	// compute the vector quaternion components q1, q2, q3
	if (fetadeg != 0.0F)
	{
		// general case with non-zero rotation angle
		ftmp = fscaling * sinhalfeta / fetadeg;
		pq->q1 = rvecdeg[X] * ftmp;		// q1 = nx * sin(eta/2)
    d4cc:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:704
		pq->q2 = rvecdeg[Y] * ftmp;		// q2 = ny * sin(eta/2)
    d4ce:	4648      	mov	r0, r9
    d4d0:	f7f3 fc60 	bl	d94 <__aeabi_fmul>
    d4d4:	60a8      	str	r0, [r5, #8]
    d4d6:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:705
		pq->q3 = rvecdeg[Z] * ftmp;		// q3 = nz * sin(eta/2)
    d4d8:	68a1      	ldr	r1, [r4, #8]
    d4da:	4648      	mov	r0, r9
    d4dc:	f7f3 fc5a 	bl	d94 <__aeabi_fmul>
    d4e0:	4641      	mov	r1, r8
    d4e2:	1c04      	adds	r4, r0, #0
    d4e4:	60e8      	str	r0, [r5, #12]
    d4e6:	4640      	mov	r0, r8
    d4e8:	f7f3 fc54 	bl	d94 <__aeabi_fmul>
    d4ec:	1c39      	adds	r1, r7, #0
    d4ee:	4680      	mov	r8, r0
    d4f0:	1c38      	adds	r0, r7, #0
    d4f2:	f7f3 fc4f 	bl	d94 <__aeabi_fmul>
    d4f6:	1c01      	adds	r1, r0, #0
    d4f8:	4640      	mov	r0, r8
    d4fa:	f7f3 f8fb 	bl	6f4 <__aeabi_fadd>
    d4fe:	1c21      	adds	r1, r4, #0
    d500:	1c07      	adds	r7, r0, #0
    d502:	1c20      	adds	r0, r4, #0
    d504:	f7f3 fc46 	bl	d94 <__aeabi_fmul>
    d508:	1c01      	adds	r1, r0, #0
    d50a:	1c38      	adds	r0, r7, #0
    d50c:	f7f3 f8f2 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:716
	}

	// compute the scalar quaternion component q0 by explicit normalization
	// taking care to avoid rounding errors giving negative operand to sqrt
	fvecsq = pq->q1 * pq->q1 + pq->q2 * pq->q2 + pq->q3 * pq->q3;
	if (fvecsq <= 1.0F)
    d510:	21fe      	movs	r1, #254	; 0xfe
    d512:	0589      	lsls	r1, r1, #22
    d514:	1c04      	adds	r4, r0, #0
    d516:	f7f3 f8cf 	bl	6b8 <__aeabi_fcmple>
    d51a:	2800      	cmp	r0, #0
    d51c:	d12f      	bne.n	d57e <fQuaternionFromRotationVectorDeg+0x15a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:724
		pq->q0 = sqrtf(1.0F - fvecsq);
	}
	else
	{
		// rounding errors are present
		pq->q0 = 0.0F;
    d51e:	602e      	str	r6, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:728
	}

	return;
}
    d520:	bc1c      	pop	{r2, r3, r4}
    d522:	4690      	mov	r8, r2
    d524:	4699      	mov	r9, r3
    d526:	46a2      	mov	sl, r4
    d528:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:685
	if (fetarad2 <= 0.02F)
	{
		// use MacLaurin series up to and including third order
		sinhalfeta = fetarad * (0.5F - ONEOVER48 * fetarad2);
	}
	else if  (fetarad2 <= 0.06F)
    d52a:	1c38      	adds	r0, r7, #0
    d52c:	4920      	ldr	r1, [pc, #128]	; (d5b0 <fQuaternionFromRotationVectorDeg+0x18c>)
    d52e:	f7f3 f8c3 	bl	6b8 <__aeabi_fcmple>
    d532:	2800      	cmp	r0, #0
    d534:	d02c      	beq.n	d590 <fQuaternionFromRotationVectorDeg+0x16c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:690
	{
		// use MacLaurin series up to and including fifth order
		// angles under sqrt(0.06)=0.245 rad is 14.0 deg and 2807 deg/s (=1623deg/s in 3 axes) at 200Hz and 703 deg/s at 50Hz
		fetarad4 = fetarad2 * fetarad2;
		sinhalfeta = fetarad * (0.5F - ONEOVER48 * fetarad2 + ONEOVER3840 * fetarad4);
    d536:	1c38      	adds	r0, r7, #0
    d538:	491c      	ldr	r1, [pc, #112]	; (d5ac <fQuaternionFromRotationVectorDeg+0x188>)
    d53a:	f7f3 fc2b 	bl	d94 <__aeabi_fmul>
    d53e:	1c01      	adds	r1, r0, #0
    d540:	20fc      	movs	r0, #252	; 0xfc
    d542:	0580      	lsls	r0, r0, #22
    d544:	f7f3 fd50 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:689
	}
	else if  (fetarad2 <= 0.06F)
	{
		// use MacLaurin series up to and including fifth order
		// angles under sqrt(0.06)=0.245 rad is 14.0 deg and 2807 deg/s (=1623deg/s in 3 axes) at 200Hz and 703 deg/s at 50Hz
		fetarad4 = fetarad2 * fetarad2;
    d548:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:690
		sinhalfeta = fetarad * (0.5F - ONEOVER48 * fetarad2 + ONEOVER3840 * fetarad4);
    d54a:	4682      	mov	sl, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:689
	}
	else if  (fetarad2 <= 0.06F)
	{
		// use MacLaurin series up to and including fifth order
		// angles under sqrt(0.06)=0.245 rad is 14.0 deg and 2807 deg/s (=1623deg/s in 3 axes) at 200Hz and 703 deg/s at 50Hz
		fetarad4 = fetarad2 * fetarad2;
    d54c:	1c38      	adds	r0, r7, #0
    d54e:	f7f3 fc21 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:690
		sinhalfeta = fetarad * (0.5F - ONEOVER48 * fetarad2 + ONEOVER3840 * fetarad4);
    d552:	4918      	ldr	r1, [pc, #96]	; (d5b4 <fQuaternionFromRotationVectorDeg+0x190>)
    d554:	f7f3 fc1e 	bl	d94 <__aeabi_fmul>
    d558:	1c01      	adds	r1, r0, #0
    d55a:	4650      	mov	r0, sl
    d55c:	f7f3 f8ca 	bl	6f4 <__aeabi_fadd>
    d560:	1c31      	adds	r1, r6, #0
    d562:	f7f3 fc17 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:699
		// use exact calculation
		sinhalfeta = (float)sinf(0.5F * fetarad);
	}

	// compute the vector quaternion components q1, q2, q3
	if (fetadeg != 0.0F)
    d566:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:690
	else if  (fetarad2 <= 0.06F)
	{
		// use MacLaurin series up to and including fifth order
		// angles under sqrt(0.06)=0.245 rad is 14.0 deg and 2807 deg/s (=1623deg/s in 3 axes) at 200Hz and 703 deg/s at 50Hz
		fetarad4 = fetarad2 * fetarad2;
		sinhalfeta = fetarad * (0.5F - ONEOVER48 * fetarad2 + ONEOVER3840 * fetarad4);
    d568:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:699
		// use exact calculation
		sinhalfeta = (float)sinf(0.5F * fetarad);
	}

	// compute the vector quaternion components q1, q2, q3
	if (fetadeg != 0.0F)
    d56a:	1c31      	adds	r1, r6, #0
    d56c:	4640      	mov	r0, r8
    d56e:	f7f3 f893 	bl	698 <__aeabi_fcmpeq>
    d572:	2800      	cmp	r0, #0
    d574:	d09d      	beq.n	d4b2 <fQuaternionFromRotationVectorDeg+0x8e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:710
		pq->q3 = rvecdeg[Z] * ftmp;		// q3 = nz * sin(eta/2)
	}
	else
	{
		// zero rotation angle giving zero vector component
		pq->q1 = pq->q2 = pq->q3 = 0.0F;
    d576:	60ee      	str	r6, [r5, #12]
    d578:	60ae      	str	r6, [r5, #8]
    d57a:	606e      	str	r6, [r5, #4]
    d57c:	1c34      	adds	r4, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:719
	// taking care to avoid rounding errors giving negative operand to sqrt
	fvecsq = pq->q1 * pq->q1 + pq->q2 * pq->q2 + pq->q3 * pq->q3;
	if (fvecsq <= 1.0F)
	{
		// normal case
		pq->q0 = sqrtf(1.0F - fvecsq);
    d57e:	20fe      	movs	r0, #254	; 0xfe
    d580:	1c21      	adds	r1, r4, #0
    d582:	0580      	lsls	r0, r0, #22
    d584:	f7f3 fd30 	bl	fe8 <__aeabi_fsub>
    d588:	f004 f89a 	bl	116c0 <sqrtf>
    d58c:	6028      	str	r0, [r5, #0]
    d58e:	e7c7      	b.n	d520 <fQuaternionFromRotationVectorDeg+0xfc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:695
		sinhalfeta = fetarad * (0.5F - ONEOVER48 * fetarad2 + ONEOVER3840 * fetarad4);
	}
	else
	{
		// use exact calculation
		sinhalfeta = (float)sinf(0.5F * fetarad);
    d590:	21fc      	movs	r1, #252	; 0xfc
    d592:	0589      	lsls	r1, r1, #22
    d594:	1c30      	adds	r0, r6, #0
    d596:	f7f3 fbfd 	bl	d94 <__aeabi_fmul>
    d59a:	f003 fe35 	bl	11208 <sinf>
    d59e:	1c07      	adds	r7, r0, #0
    d5a0:	e780      	b.n	d4a4 <fQuaternionFromRotationVectorDeg+0x80>
    d5a2:	46c0      	nop			; (mov r8, r8)
    d5a4:	3c8efa35 	.word	0x3c8efa35
    d5a8:	3ca3d70a 	.word	0x3ca3d70a
    d5ac:	3caaaaab 	.word	0x3caaaaab
    d5b0:	3d75c28f 	.word	0x3d75c28f
    d5b4:	39888889 	.word	0x39888889

0000d5b8 <fQuaternionFromRotationMatrix>:
fQuaternionFromRotationMatrix():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:732
	return;
}

// compute the orientation quaternion from a 3x3 rotation matrix
void fQuaternionFromRotationMatrix(float R[][3], struct fquaternion *pq)
{
    d5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d5ba:	1c0d      	adds	r5, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:741
	// the quaternion is not explicitly normalized in this function on the assumption that it
	// is supplied with a normalized rotation matrix. if the rotation matrix is normalized then
	// the quaternion will also be normalized even if the case of small q0

	// get q0^2 and q0
	fq0sq = 0.25F * (1.0F + R[X][X] + R[Y][Y] + R[Z][Z]);
    d5bc:	21fe      	movs	r1, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:732
	return;
}

// compute the orientation quaternion from a 3x3 rotation matrix
void fQuaternionFromRotationMatrix(float R[][3], struct fquaternion *pq)
{
    d5be:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:741
	// the quaternion is not explicitly normalized in this function on the assumption that it
	// is supplied with a normalized rotation matrix. if the rotation matrix is normalized then
	// the quaternion will also be normalized even if the case of small q0

	// get q0^2 and q0
	fq0sq = 0.25F * (1.0F + R[X][X] + R[Y][Y] + R[Z][Z]);
    d5c0:	0589      	lsls	r1, r1, #22
    d5c2:	6800      	ldr	r0, [r0, #0]
    d5c4:	f7f3 f896 	bl	6f4 <__aeabi_fadd>
    d5c8:	6921      	ldr	r1, [r4, #16]
    d5ca:	f7f3 f893 	bl	6f4 <__aeabi_fadd>
    d5ce:	6a21      	ldr	r1, [r4, #32]
    d5d0:	f7f3 f890 	bl	6f4 <__aeabi_fadd>
    d5d4:	21fa      	movs	r1, #250	; 0xfa
    d5d6:	0589      	lsls	r1, r1, #22
    d5d8:	f7f3 fbdc 	bl	d94 <__aeabi_fmul>
    d5dc:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:742
	pq->q0 = sqrtf(fabs(fq0sq));
    d5de:	0040      	lsls	r0, r0, #1
    d5e0:	0840      	lsrs	r0, r0, #1
    d5e2:	f004 f86d 	bl	116c0 <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:745

	// normal case when q0 is not small meaning rotation angle not near 180 deg
	if (pq->q0 > SMALLQ0)
    d5e6:	4943      	ldr	r1, [pc, #268]	; (d6f4 <fQuaternionFromRotationMatrix+0x13c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:742
	// is supplied with a normalized rotation matrix. if the rotation matrix is normalized then
	// the quaternion will also be normalized even if the case of small q0

	// get q0^2 and q0
	fq0sq = 0.25F * (1.0F + R[X][X] + R[Y][Y] + R[Z][Z]);
	pq->q0 = sqrtf(fabs(fq0sq));
    d5e8:	6028      	str	r0, [r5, #0]
    d5ea:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:745

	// normal case when q0 is not small meaning rotation angle not near 180 deg
	if (pq->q0 > SMALLQ0)
    d5ec:	f7f3 f86e 	bl	6cc <__aeabi_fcmpgt>
    d5f0:	2800      	cmp	r0, #0
    d5f2:	d01e      	beq.n	d632 <fQuaternionFromRotationMatrix+0x7a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:748
	{
		// calculate q1 to q3
		recip4q0 = 0.25F / pq->q0;
    d5f4:	20fa      	movs	r0, #250	; 0xfa
    d5f6:	1c31      	adds	r1, r6, #0
    d5f8:	0580      	lsls	r0, r0, #22
    d5fa:	f7f3 f9e7 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:749
		pq->q1 = recip4q0 * (R[Y][Z] - R[Z][Y]);
    d5fe:	69e1      	ldr	r1, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:748

	// normal case when q0 is not small meaning rotation angle not near 180 deg
	if (pq->q0 > SMALLQ0)
	{
		// calculate q1 to q3
		recip4q0 = 0.25F / pq->q0;
    d600:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:749
		pq->q1 = recip4q0 * (R[Y][Z] - R[Z][Y]);
    d602:	6960      	ldr	r0, [r4, #20]
    d604:	f7f3 fcf0 	bl	fe8 <__aeabi_fsub>
    d608:	1c31      	adds	r1, r6, #0
    d60a:	f7f3 fbc3 	bl	d94 <__aeabi_fmul>
    d60e:	6068      	str	r0, [r5, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:750
		pq->q2 = recip4q0 * (R[Z][X] - R[X][Z]);
    d610:	68a1      	ldr	r1, [r4, #8]
    d612:	69a0      	ldr	r0, [r4, #24]
    d614:	f7f3 fce8 	bl	fe8 <__aeabi_fsub>
    d618:	1c31      	adds	r1, r6, #0
    d61a:	f7f3 fbbb 	bl	d94 <__aeabi_fmul>
    d61e:	60a8      	str	r0, [r5, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:751
		pq->q3 = recip4q0 * (R[X][Y] - R[Y][X]);
    d620:	68e1      	ldr	r1, [r4, #12]
    d622:	6860      	ldr	r0, [r4, #4]
    d624:	f7f3 fce0 	bl	fe8 <__aeabi_fsub>
    d628:	1c31      	adds	r1, r6, #0
    d62a:	f7f3 fbb3 	bl	d94 <__aeabi_fmul>
    d62e:	60e8      	str	r0, [r5, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:769
		if ((R[Z][X] - R[X][Z]) < 0.0F) pq->q2 = -pq->q2;
		if ((R[X][Y] - R[Y][X]) < 0.0F) pq->q3 = -pq->q3;
	} // end of special case

	return;
}
    d630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:758
	else
	{
		// special case of near 180 deg corresponds to nearly symmetric matrix
		// which is not numerically well conditioned for division by small q0
		// instead get absolute values of q1 to q3 from leading diagonal
		pq->q1 = sqrtf(fabs(0.5F * (1.0F + R[X][X]) - fq0sq));
    d632:	21fe      	movs	r1, #254	; 0xfe
    d634:	6820      	ldr	r0, [r4, #0]
    d636:	0589      	lsls	r1, r1, #22
    d638:	f7f3 f85c 	bl	6f4 <__aeabi_fadd>
    d63c:	21fc      	movs	r1, #252	; 0xfc
    d63e:	0589      	lsls	r1, r1, #22
    d640:	f7f3 fba8 	bl	d94 <__aeabi_fmul>
    d644:	1c39      	adds	r1, r7, #0
    d646:	f7f3 fccf 	bl	fe8 <__aeabi_fsub>
    d64a:	0040      	lsls	r0, r0, #1
    d64c:	0840      	lsrs	r0, r0, #1
    d64e:	f004 f837 	bl	116c0 <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:759
		pq->q2 = sqrtf(fabs(0.5F * (1.0F + R[Y][Y]) - fq0sq));
    d652:	21fe      	movs	r1, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:758
	else
	{
		// special case of near 180 deg corresponds to nearly symmetric matrix
		// which is not numerically well conditioned for division by small q0
		// instead get absolute values of q1 to q3 from leading diagonal
		pq->q1 = sqrtf(fabs(0.5F * (1.0F + R[X][X]) - fq0sq));
    d654:	6068      	str	r0, [r5, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:759
		pq->q2 = sqrtf(fabs(0.5F * (1.0F + R[Y][Y]) - fq0sq));
    d656:	6920      	ldr	r0, [r4, #16]
    d658:	0589      	lsls	r1, r1, #22
    d65a:	f7f3 f84b 	bl	6f4 <__aeabi_fadd>
    d65e:	21fc      	movs	r1, #252	; 0xfc
    d660:	0589      	lsls	r1, r1, #22
    d662:	f7f3 fb97 	bl	d94 <__aeabi_fmul>
    d666:	1c39      	adds	r1, r7, #0
    d668:	f7f3 fcbe 	bl	fe8 <__aeabi_fsub>
    d66c:	0040      	lsls	r0, r0, #1
    d66e:	0840      	lsrs	r0, r0, #1
    d670:	f004 f826 	bl	116c0 <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:760
		pq->q3 = sqrtf(fabs(0.5F * (1.0F + R[Z][Z]) - fq0sq));
    d674:	21fe      	movs	r1, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:759
	{
		// special case of near 180 deg corresponds to nearly symmetric matrix
		// which is not numerically well conditioned for division by small q0
		// instead get absolute values of q1 to q3 from leading diagonal
		pq->q1 = sqrtf(fabs(0.5F * (1.0F + R[X][X]) - fq0sq));
		pq->q2 = sqrtf(fabs(0.5F * (1.0F + R[Y][Y]) - fq0sq));
    d676:	60a8      	str	r0, [r5, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:760
		pq->q3 = sqrtf(fabs(0.5F * (1.0F + R[Z][Z]) - fq0sq));
    d678:	6a20      	ldr	r0, [r4, #32]
    d67a:	0589      	lsls	r1, r1, #22
    d67c:	f7f3 f83a 	bl	6f4 <__aeabi_fadd>
    d680:	21fc      	movs	r1, #252	; 0xfc
    d682:	0589      	lsls	r1, r1, #22
    d684:	f7f3 fb86 	bl	d94 <__aeabi_fmul>
    d688:	1c39      	adds	r1, r7, #0
    d68a:	f7f3 fcad 	bl	fe8 <__aeabi_fsub>
    d68e:	0040      	lsls	r0, r0, #1
    d690:	0840      	lsrs	r0, r0, #1
    d692:	f004 f815 	bl	116c0 <sqrtf>
    d696:	60e8      	str	r0, [r5, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:763

		// correct the signs of q1 to q3 by examining the signs of differenced off-diagonal terms
		if ((R[Y][Z] - R[Z][Y]) < 0.0F) pq->q1 = -pq->q1;
    d698:	69e1      	ldr	r1, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:760
		// special case of near 180 deg corresponds to nearly symmetric matrix
		// which is not numerically well conditioned for division by small q0
		// instead get absolute values of q1 to q3 from leading diagonal
		pq->q1 = sqrtf(fabs(0.5F * (1.0F + R[X][X]) - fq0sq));
		pq->q2 = sqrtf(fabs(0.5F * (1.0F + R[Y][Y]) - fq0sq));
		pq->q3 = sqrtf(fabs(0.5F * (1.0F + R[Z][Z]) - fq0sq));
    d69a:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:763

		// correct the signs of q1 to q3 by examining the signs of differenced off-diagonal terms
		if ((R[Y][Z] - R[Z][Y]) < 0.0F) pq->q1 = -pq->q1;
    d69c:	6960      	ldr	r0, [r4, #20]
    d69e:	f7f3 fca3 	bl	fe8 <__aeabi_fsub>
    d6a2:	2100      	movs	r1, #0
    d6a4:	f7f2 fffe 	bl	6a4 <__aeabi_fcmplt>
    d6a8:	2800      	cmp	r0, #0
    d6aa:	d11c      	bne.n	d6e6 <fQuaternionFromRotationMatrix+0x12e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:764
		if ((R[Z][X] - R[X][Z]) < 0.0F) pq->q2 = -pq->q2;
    d6ac:	68a1      	ldr	r1, [r4, #8]
    d6ae:	69a0      	ldr	r0, [r4, #24]
    d6b0:	f7f3 fc9a 	bl	fe8 <__aeabi_fsub>
    d6b4:	2100      	movs	r1, #0
    d6b6:	f7f2 fff5 	bl	6a4 <__aeabi_fcmplt>
    d6ba:	2800      	cmp	r0, #0
    d6bc:	d10d      	bne.n	d6da <fQuaternionFromRotationMatrix+0x122>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:765
		if ((R[X][Y] - R[Y][X]) < 0.0F) pq->q3 = -pq->q3;
    d6be:	68e1      	ldr	r1, [r4, #12]
    d6c0:	6860      	ldr	r0, [r4, #4]
    d6c2:	f7f3 fc91 	bl	fe8 <__aeabi_fsub>
    d6c6:	2100      	movs	r1, #0
    d6c8:	f7f2 ffec 	bl	6a4 <__aeabi_fcmplt>
    d6cc:	2800      	cmp	r0, #0
    d6ce:	d0af      	beq.n	d630 <fQuaternionFromRotationMatrix+0x78>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:765 (discriminator 1)
    d6d0:	2380      	movs	r3, #128	; 0x80
    d6d2:	061b      	lsls	r3, r3, #24
    d6d4:	18f6      	adds	r6, r6, r3
    d6d6:	60ee      	str	r6, [r5, #12]
    d6d8:	e7aa      	b.n	d630 <fQuaternionFromRotationMatrix+0x78>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:764 (discriminator 1)
		pq->q2 = sqrtf(fabs(0.5F * (1.0F + R[Y][Y]) - fq0sq));
		pq->q3 = sqrtf(fabs(0.5F * (1.0F + R[Z][Z]) - fq0sq));

		// correct the signs of q1 to q3 by examining the signs of differenced off-diagonal terms
		if ((R[Y][Z] - R[Z][Y]) < 0.0F) pq->q1 = -pq->q1;
		if ((R[Z][X] - R[X][Z]) < 0.0F) pq->q2 = -pq->q2;
    d6da:	68a9      	ldr	r1, [r5, #8]
    d6dc:	2280      	movs	r2, #128	; 0x80
    d6de:	0612      	lsls	r2, r2, #24
    d6e0:	188b      	adds	r3, r1, r2
    d6e2:	60ab      	str	r3, [r5, #8]
    d6e4:	e7eb      	b.n	d6be <fQuaternionFromRotationMatrix+0x106>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:763 (discriminator 1)
		pq->q1 = sqrtf(fabs(0.5F * (1.0F + R[X][X]) - fq0sq));
		pq->q2 = sqrtf(fabs(0.5F * (1.0F + R[Y][Y]) - fq0sq));
		pq->q3 = sqrtf(fabs(0.5F * (1.0F + R[Z][Z]) - fq0sq));

		// correct the signs of q1 to q3 by examining the signs of differenced off-diagonal terms
		if ((R[Y][Z] - R[Z][Y]) < 0.0F) pq->q1 = -pq->q1;
    d6e6:	6869      	ldr	r1, [r5, #4]
    d6e8:	2280      	movs	r2, #128	; 0x80
    d6ea:	0612      	lsls	r2, r2, #24
    d6ec:	188b      	adds	r3, r1, r2
    d6ee:	606b      	str	r3, [r5, #4]
    d6f0:	e7dc      	b.n	d6ac <fQuaternionFromRotationMatrix+0xf4>
    d6f2:	46c0      	nop			; (mov r8, r8)
    d6f4:	3c23d70a 	.word	0x3c23d70a

0000d6f8 <fRotationMatrixFromQuaternion>:
fRotationMatrixFromQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:773
	return;
}

// compute the rotation matrix from an orientation quaternion
void fRotationMatrixFromQuaternion(float R[][3], const struct fquaternion *pq)
{
    d6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d6fa:	465f      	mov	r7, fp
    d6fc:	4656      	mov	r6, sl
    d6fe:	464d      	mov	r5, r9
    d700:	4644      	mov	r4, r8
    d702:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:781
	float f2q1q1, f2q1q2, f2q1q3;
	float f2q2q2, f2q2q3;
	float f2q3q3;

	// calculate products
	f2q = 2.0F * pq->q0;
    d704:	680e      	ldr	r6, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:773
	return;
}

// compute the rotation matrix from an orientation quaternion
void fRotationMatrixFromQuaternion(float R[][3], const struct fquaternion *pq)
{
    d706:	b087      	sub	sp, #28
    d708:	1c04      	adds	r4, r0, #0
    d70a:	1c0d      	adds	r5, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:781
	float f2q1q1, f2q1q2, f2q1q3;
	float f2q2q2, f2q2q3;
	float f2q3q3;

	// calculate products
	f2q = 2.0F * pq->q0;
    d70c:	1c30      	adds	r0, r6, #0
    d70e:	1c31      	adds	r1, r6, #0
    d710:	f7f2 fff0 	bl	6f4 <__aeabi_fadd>
    d714:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:782
	f2q0q0 = f2q * pq->q0;
    d716:	4649      	mov	r1, r9
    d718:	1c30      	adds	r0, r6, #0
    d71a:	f7f3 fb3b 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:783
	f2q0q1 = f2q * pq->q1;
    d71e:	686f      	ldr	r7, [r5, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:782
	float f2q2q2, f2q2q3;
	float f2q3q3;

	// calculate products
	f2q = 2.0F * pq->q0;
	f2q0q0 = f2q * pq->q0;
    d720:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:783
	f2q0q1 = f2q * pq->q1;
    d722:	4649      	mov	r1, r9
    d724:	1c38      	adds	r0, r7, #0
    d726:	f7f3 fb35 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:784
	f2q0q2 = f2q * pq->q2;
    d72a:	68ae      	ldr	r6, [r5, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:783
	float f2q3q3;

	// calculate products
	f2q = 2.0F * pq->q0;
	f2q0q0 = f2q * pq->q0;
	f2q0q1 = f2q * pq->q1;
    d72c:	9001      	str	r0, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:784
	f2q0q2 = f2q * pq->q2;
    d72e:	4649      	mov	r1, r9
    d730:	1c30      	adds	r0, r6, #0
    d732:	f7f3 fb2f 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:785
	f2q0q3 = f2q * pq->q3;
    d736:	68ed      	ldr	r5, [r5, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:784

	// calculate products
	f2q = 2.0F * pq->q0;
	f2q0q0 = f2q * pq->q0;
	f2q0q1 = f2q * pq->q1;
	f2q0q2 = f2q * pq->q2;
    d738:	9002      	str	r0, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:785
	f2q0q3 = f2q * pq->q3;
    d73a:	4649      	mov	r1, r9
    d73c:	1c28      	adds	r0, r5, #0
    d73e:	f7f3 fb29 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:786
	f2q = 2.0F * pq->q1;
    d742:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:785
	// calculate products
	f2q = 2.0F * pq->q0;
	f2q0q0 = f2q * pq->q0;
	f2q0q1 = f2q * pq->q1;
	f2q0q2 = f2q * pq->q2;
	f2q0q3 = f2q * pq->q3;
    d744:	9003      	str	r0, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:786
	f2q = 2.0F * pq->q1;
    d746:	1c38      	adds	r0, r7, #0
    d748:	f7f2 ffd4 	bl	6f4 <__aeabi_fadd>
    d74c:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:788
	f2q1q1 = f2q * pq->q1;
	f2q1q2 = f2q * pq->q2;
    d74e:	4649      	mov	r1, r9
    d750:	1c30      	adds	r0, r6, #0
    d752:	f7f3 fb1f 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:789
	f2q1q3 = f2q * pq->q3;
    d756:	4649      	mov	r1, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:788
	f2q0q1 = f2q * pq->q1;
	f2q0q2 = f2q * pq->q2;
	f2q0q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q1;
	f2q1q1 = f2q * pq->q1;
	f2q1q2 = f2q * pq->q2;
    d758:	4683      	mov	fp, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:789
	f2q1q3 = f2q * pq->q3;
    d75a:	1c28      	adds	r0, r5, #0
    d75c:	f7f3 fb1a 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:790
	f2q = 2.0F * pq->q2;
    d760:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:789
	f2q0q2 = f2q * pq->q2;
	f2q0q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q1;
	f2q1q1 = f2q * pq->q1;
	f2q1q2 = f2q * pq->q2;
	f2q1q3 = f2q * pq->q3;
    d762:	9004      	str	r0, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:790
	f2q = 2.0F * pq->q2;
    d764:	1c30      	adds	r0, r6, #0
    d766:	f7f2 ffc5 	bl	6f4 <__aeabi_fadd>
    d76a:	9005      	str	r0, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:792
	f2q2q2 = f2q * pq->q2;
	f2q2q3 = f2q * pq->q3;
    d76c:	9905      	ldr	r1, [sp, #20]
    d76e:	1c28      	adds	r0, r5, #0
    d770:	f7f3 fb10 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:787
	f2q0q0 = f2q * pq->q0;
	f2q0q1 = f2q * pq->q1;
	f2q0q2 = f2q * pq->q2;
	f2q0q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q1;
	f2q1q1 = f2q * pq->q1;
    d774:	4649      	mov	r1, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:792
	f2q1q2 = f2q * pq->q2;
	f2q1q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q2;
	f2q2q2 = f2q * pq->q2;
	f2q2q3 = f2q * pq->q3;
    d776:	4682      	mov	sl, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:787
	f2q0q0 = f2q * pq->q0;
	f2q0q1 = f2q * pq->q1;
	f2q0q2 = f2q * pq->q2;
	f2q0q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q1;
	f2q1q1 = f2q * pq->q1;
    d778:	1c38      	adds	r0, r7, #0
    d77a:	f7f3 fb0b 	bl	d94 <__aeabi_fmul>
    d77e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:796
	f2q2q2 = f2q * pq->q2;
	f2q2q3 = f2q * pq->q3;
	f2q3q3 = 2.0F * pq->q3 * pq->q3;

	// calculate the rotation matrix assuming the quaternion is normalized
	R[X][X] = f2q0q0 + f2q1q1 - 1.0F;
    d780:	4640      	mov	r0, r8
    d782:	f7f2 ffb7 	bl	6f4 <__aeabi_fadd>
    d786:	21fe      	movs	r1, #254	; 0xfe
    d788:	0589      	lsls	r1, r1, #22
    d78a:	f7f3 fc2d 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:797
	R[X][Y] = f2q1q2 + f2q0q3;
    d78e:	9903      	ldr	r1, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:796
	f2q2q2 = f2q * pq->q2;
	f2q2q3 = f2q * pq->q3;
	f2q3q3 = 2.0F * pq->q3 * pq->q3;

	// calculate the rotation matrix assuming the quaternion is normalized
	R[X][X] = f2q0q0 + f2q1q1 - 1.0F;
    d790:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:797
	R[X][Y] = f2q1q2 + f2q0q3;
    d792:	4658      	mov	r0, fp
    d794:	f7f2 ffae 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:798
	R[X][Z] = f2q1q3 - f2q0q2;
    d798:	9902      	ldr	r1, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:797
	f2q2q3 = f2q * pq->q3;
	f2q3q3 = 2.0F * pq->q3 * pq->q3;

	// calculate the rotation matrix assuming the quaternion is normalized
	R[X][X] = f2q0q0 + f2q1q1 - 1.0F;
	R[X][Y] = f2q1q2 + f2q0q3;
    d79a:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:798
	R[X][Z] = f2q1q3 - f2q0q2;
    d79c:	9804      	ldr	r0, [sp, #16]
    d79e:	f7f3 fc23 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:799
	R[Y][X] = f2q1q2 - f2q0q3;
    d7a2:	9903      	ldr	r1, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:798
	f2q3q3 = 2.0F * pq->q3 * pq->q3;

	// calculate the rotation matrix assuming the quaternion is normalized
	R[X][X] = f2q0q0 + f2q1q1 - 1.0F;
	R[X][Y] = f2q1q2 + f2q0q3;
	R[X][Z] = f2q1q3 - f2q0q2;
    d7a4:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:799
	R[Y][X] = f2q1q2 - f2q0q3;
    d7a6:	4658      	mov	r0, fp
    d7a8:	f7f3 fc1e 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:791
	f2q = 2.0F * pq->q1;
	f2q1q1 = f2q * pq->q1;
	f2q1q2 = f2q * pq->q2;
	f2q1q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q2;
	f2q2q2 = f2q * pq->q2;
    d7ac:	9905      	ldr	r1, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:799

	// calculate the rotation matrix assuming the quaternion is normalized
	R[X][X] = f2q0q0 + f2q1q1 - 1.0F;
	R[X][Y] = f2q1q2 + f2q0q3;
	R[X][Z] = f2q1q3 - f2q0q2;
	R[Y][X] = f2q1q2 - f2q0q3;
    d7ae:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:791
	f2q = 2.0F * pq->q1;
	f2q1q1 = f2q * pq->q1;
	f2q1q2 = f2q * pq->q2;
	f2q1q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q2;
	f2q2q2 = f2q * pq->q2;
    d7b0:	1c30      	adds	r0, r6, #0
    d7b2:	f7f3 faef 	bl	d94 <__aeabi_fmul>
    d7b6:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:800
	// calculate the rotation matrix assuming the quaternion is normalized
	R[X][X] = f2q0q0 + f2q1q1 - 1.0F;
	R[X][Y] = f2q1q2 + f2q0q3;
	R[X][Z] = f2q1q3 - f2q0q2;
	R[Y][X] = f2q1q2 - f2q0q3;
	R[Y][Y] = f2q0q0 + f2q2q2 - 1.0F;
    d7b8:	4640      	mov	r0, r8
    d7ba:	f7f2 ff9b 	bl	6f4 <__aeabi_fadd>
    d7be:	21fe      	movs	r1, #254	; 0xfe
    d7c0:	0589      	lsls	r1, r1, #22
    d7c2:	f7f3 fc11 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:801
	R[Y][Z] = f2q2q3 + f2q0q1;
    d7c6:	9901      	ldr	r1, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:800
	// calculate the rotation matrix assuming the quaternion is normalized
	R[X][X] = f2q0q0 + f2q1q1 - 1.0F;
	R[X][Y] = f2q1q2 + f2q0q3;
	R[X][Z] = f2q1q3 - f2q0q2;
	R[Y][X] = f2q1q2 - f2q0q3;
	R[Y][Y] = f2q0q0 + f2q2q2 - 1.0F;
    d7c8:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:801
	R[Y][Z] = f2q2q3 + f2q0q1;
    d7ca:	4650      	mov	r0, sl
    d7cc:	f7f2 ff92 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:802
	R[Z][X] = f2q1q3 + f2q0q2;
    d7d0:	9902      	ldr	r1, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:801
	R[X][X] = f2q0q0 + f2q1q1 - 1.0F;
	R[X][Y] = f2q1q2 + f2q0q3;
	R[X][Z] = f2q1q3 - f2q0q2;
	R[Y][X] = f2q1q2 - f2q0q3;
	R[Y][Y] = f2q0q0 + f2q2q2 - 1.0F;
	R[Y][Z] = f2q2q3 + f2q0q1;
    d7d2:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:802
	R[Z][X] = f2q1q3 + f2q0q2;
    d7d4:	9804      	ldr	r0, [sp, #16]
    d7d6:	f7f2 ff8d 	bl	6f4 <__aeabi_fadd>
    d7da:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:803
	R[Z][Y] = f2q2q3 - f2q0q1;
    d7dc:	9901      	ldr	r1, [sp, #4]
    d7de:	4650      	mov	r0, sl
    d7e0:	f7f3 fc02 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:793
	f2q1q2 = f2q * pq->q2;
	f2q1q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q2;
	f2q2q2 = f2q * pq->q2;
	f2q2q3 = f2q * pq->q3;
	f2q3q3 = 2.0F * pq->q3 * pq->q3;
    d7e4:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:803
	R[X][Z] = f2q1q3 - f2q0q2;
	R[Y][X] = f2q1q2 - f2q0q3;
	R[Y][Y] = f2q0q0 + f2q2q2 - 1.0F;
	R[Y][Z] = f2q2q3 + f2q0q1;
	R[Z][X] = f2q1q3 + f2q0q2;
	R[Z][Y] = f2q2q3 - f2q0q1;
    d7e6:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:793
	f2q1q2 = f2q * pq->q2;
	f2q1q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q2;
	f2q2q2 = f2q * pq->q2;
	f2q2q3 = f2q * pq->q3;
	f2q3q3 = 2.0F * pq->q3 * pq->q3;
    d7e8:	1c28      	adds	r0, r5, #0
    d7ea:	f7f2 ff83 	bl	6f4 <__aeabi_fadd>
    d7ee:	1c01      	adds	r1, r0, #0
    d7f0:	1c28      	adds	r0, r5, #0
    d7f2:	f7f3 facf 	bl	d94 <__aeabi_fmul>
    d7f6:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:804
	R[Y][X] = f2q1q2 - f2q0q3;
	R[Y][Y] = f2q0q0 + f2q2q2 - 1.0F;
	R[Y][Z] = f2q2q3 + f2q0q1;
	R[Z][X] = f2q1q3 + f2q0q2;
	R[Z][Y] = f2q2q3 - f2q0q1;
	R[Z][Z] = f2q0q0 + f2q3q3 - 1.0F;
    d7f8:	4640      	mov	r0, r8
    d7fa:	f7f2 ff7b 	bl	6f4 <__aeabi_fadd>
    d7fe:	21fe      	movs	r1, #254	; 0xfe
    d800:	0589      	lsls	r1, r1, #22
    d802:	f7f3 fbf1 	bl	fe8 <__aeabi_fsub>
    d806:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:807

	return;
}
    d808:	b007      	add	sp, #28
    d80a:	bc3c      	pop	{r2, r3, r4, r5}
    d80c:	4690      	mov	r8, r2
    d80e:	4699      	mov	r9, r3
    d810:	46a2      	mov	sl, r4
    d812:	46ab      	mov	fp, r5
    d814:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d816:	46c0      	nop			; (mov r8, r8)

0000d818 <fRotationVectorDegFromQuaternion>:
fRotationVectorDegFromQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:880
	return;
}

// computes rotation vector (deg) from rotation quaternion
void fRotationVectorDegFromQuaternion(struct fquaternion *pq, float rvecdeg[])
{
    d818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:887
	float fetadeg;			// rotation angle (deg)
	float sinhalfeta;		// sin(eta/2)
	float ftmp;				// scratch variable

	// calculate the rotation angle in the range 0 <= eta < 360 deg
	if ((pq->q0 >= 1.0F) || (pq->q0 <= -1.0F))
    d81a:	6806      	ldr	r6, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:880
	return;
}

// computes rotation vector (deg) from rotation quaternion
void fRotationVectorDegFromQuaternion(struct fquaternion *pq, float rvecdeg[])
{
    d81c:	1c0c      	adds	r4, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:887
	float fetadeg;			// rotation angle (deg)
	float sinhalfeta;		// sin(eta/2)
	float ftmp;				// scratch variable

	// calculate the rotation angle in the range 0 <= eta < 360 deg
	if ((pq->q0 >= 1.0F) || (pq->q0 <= -1.0F))
    d81e:	21fe      	movs	r1, #254	; 0xfe
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:880
	return;
}

// computes rotation vector (deg) from rotation quaternion
void fRotationVectorDegFromQuaternion(struct fquaternion *pq, float rvecdeg[])
{
    d820:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:887
	float fetadeg;			// rotation angle (deg)
	float sinhalfeta;		// sin(eta/2)
	float ftmp;				// scratch variable

	// calculate the rotation angle in the range 0 <= eta < 360 deg
	if ((pq->q0 >= 1.0F) || (pq->q0 <= -1.0F))
    d822:	0589      	lsls	r1, r1, #22
    d824:	1c30      	adds	r0, r6, #0
    d826:	f7f2 ff5b 	bl	6e0 <__aeabi_fcmpge>
    d82a:	2800      	cmp	r0, #0
    d82c:	d004      	beq.n	d838 <fRotationVectorDegFromQuaternion+0x20>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:914

	// calculate the rotation vector (deg)
	if (sinhalfeta == 0.0F)
	{
		// the rotation angle eta is zero and the axis is irrelevant 
		rvecdeg[X] = rvecdeg[Y] = rvecdeg[Z] = 0.0F;
    d82e:	2300      	movs	r3, #0
    d830:	60a3      	str	r3, [r4, #8]
    d832:	6063      	str	r3, [r4, #4]
    d834:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:926
		rvecdeg[Y] = pq->q2 * ftmp;
		rvecdeg[Z] = pq->q3 * ftmp;
	}

	return;
}
    d836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:887 (discriminator 1)
	float fetadeg;			// rotation angle (deg)
	float sinhalfeta;		// sin(eta/2)
	float ftmp;				// scratch variable

	// calculate the rotation angle in the range 0 <= eta < 360 deg
	if ((pq->q0 >= 1.0F) || (pq->q0 <= -1.0F))
    d838:	1c30      	adds	r0, r6, #0
    d83a:	4920      	ldr	r1, [pc, #128]	; (d8bc <fRotationVectorDegFromQuaternion+0xa4>)
    d83c:	f7f2 ff3c 	bl	6b8 <__aeabi_fcmple>
    d840:	2800      	cmp	r0, #0
    d842:	d1f4      	bne.n	d82e <fRotationVectorDegFromQuaternion+0x16>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:896
		fetadeg = 0.0F;
	}
	else
	{
		// general case returning 0 < eta < 360 deg 
		fetarad = 2.0F * acosf(pq->q0); 
    d844:	1c30      	adds	r0, r6, #0
    d846:	f003 fd1f 	bl	11288 <acosf>
    d84a:	1c01      	adds	r1, r0, #0
    d84c:	f7f2 ff52 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:897
		fetadeg = fetarad * FRADTODEG;
    d850:	491b      	ldr	r1, [pc, #108]	; (d8c0 <fRotationVectorDegFromQuaternion+0xa8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:896
		fetadeg = 0.0F;
	}
	else
	{
		// general case returning 0 < eta < 360 deg 
		fetarad = 2.0F * acosf(pq->q0); 
    d852:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:897
		fetadeg = fetarad * FRADTODEG;
    d854:	f7f3 fa9e 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:901
	}

	// map the rotation angle onto the range -180 deg <= eta < 180 deg 
	if (fetadeg >= 180.0F)
    d858:	491a      	ldr	r1, [pc, #104]	; (d8c4 <fRotationVectorDegFromQuaternion+0xac>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:897
	}
	else
	{
		// general case returning 0 < eta < 360 deg 
		fetarad = 2.0F * acosf(pq->q0); 
		fetadeg = fetarad * FRADTODEG;
    d85a:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:901
	}

	// map the rotation angle onto the range -180 deg <= eta < 180 deg 
	if (fetadeg >= 180.0F)
    d85c:	f7f2 ff40 	bl	6e0 <__aeabi_fcmpge>
    d860:	2800      	cmp	r0, #0
    d862:	d028      	beq.n	d8b6 <fRotationVectorDegFromQuaternion+0x9e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:903
	{
		fetadeg -= 360.0F;
    d864:	1c30      	adds	r0, r6, #0
    d866:	4918      	ldr	r1, [pc, #96]	; (d8c8 <fRotationVectorDegFromQuaternion+0xb0>)
    d868:	f7f3 fbbe 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:904
		fetarad = fetadeg * FDEGTORAD;
    d86c:	4917      	ldr	r1, [pc, #92]	; (d8cc <fRotationVectorDegFromQuaternion+0xb4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:903
	}

	// map the rotation angle onto the range -180 deg <= eta < 180 deg 
	if (fetadeg >= 180.0F)
	{
		fetadeg -= 360.0F;
    d86e:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:904
		fetarad = fetadeg * FDEGTORAD;
    d870:	f7f3 fa90 	bl	d94 <__aeabi_fmul>
    d874:	21fc      	movs	r1, #252	; 0xfc
    d876:	0589      	lsls	r1, r1, #22
    d878:	f7f3 fa8c 	bl	d94 <__aeabi_fmul>
    d87c:	f003 fcc4 	bl	11208 <sinf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:911

	// calculate sin(eta/2) which will be in the range -1 to +1
	sinhalfeta = (float)sinf(0.5F * fetarad);

	// calculate the rotation vector (deg)
	if (sinhalfeta == 0.0F)
    d880:	2100      	movs	r1, #0
    d882:	1c07      	adds	r7, r0, #0
    d884:	f7f2 ff08 	bl	698 <__aeabi_fcmpeq>
    d888:	2800      	cmp	r0, #0
    d88a:	d1d0      	bne.n	d82e <fRotationVectorDegFromQuaternion+0x16>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:919
		rvecdeg[X] = rvecdeg[Y] = rvecdeg[Z] = 0.0F;
	}
	else
	{
		// general case with non-zero rotation angle
		ftmp = fetadeg / sinhalfeta;
    d88c:	1c30      	adds	r0, r6, #0
    d88e:	1c39      	adds	r1, r7, #0
    d890:	f7f3 f89c 	bl	9cc <__aeabi_fdiv>
    d894:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:920
		rvecdeg[X] = pq->q1 * ftmp;
    d896:	1c31      	adds	r1, r6, #0
    d898:	6868      	ldr	r0, [r5, #4]
    d89a:	f7f3 fa7b 	bl	d94 <__aeabi_fmul>
    d89e:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:921
		rvecdeg[Y] = pq->q2 * ftmp;
    d8a0:	68a8      	ldr	r0, [r5, #8]
    d8a2:	1c31      	adds	r1, r6, #0
    d8a4:	f7f3 fa76 	bl	d94 <__aeabi_fmul>
    d8a8:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:922
		rvecdeg[Z] = pq->q3 * ftmp;
    d8aa:	68e8      	ldr	r0, [r5, #12]
    d8ac:	1c31      	adds	r1, r6, #0
    d8ae:	f7f3 fa71 	bl	d94 <__aeabi_fmul>
    d8b2:	60a0      	str	r0, [r4, #8]
    d8b4:	e7bf      	b.n	d836 <fRotationVectorDegFromQuaternion+0x1e>
    d8b6:	1c38      	adds	r0, r7, #0
    d8b8:	e7dc      	b.n	d874 <fRotationVectorDegFromQuaternion+0x5c>
    d8ba:	46c0      	nop			; (mov r8, r8)
    d8bc:	bf800000 	.word	0xbf800000
    d8c0:	42652ee1 	.word	0x42652ee1
    d8c4:	43340000 	.word	0x43340000
    d8c8:	43b40000 	.word	0x43b40000
    d8cc:	3c8efa35 	.word	0x3c8efa35

0000d8d0 <fLPFOrientationQuaternion>:
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:931
}

// function low pass filters an orientation quaternion and computes virtual gyro rotation rate
void fLPFOrientationQuaternion(struct fquaternion *pq, struct fquaternion *pLPq, float flpf, float fdeltat,
		float fOmega[], int32 loopcounter)
{
    d8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d8d2:	465f      	mov	r7, fp
    d8d4:	4656      	mov	r6, sl
    d8d6:	464d      	mov	r5, r9
    d8d8:	4644      	mov	r4, r8
    d8da:	b4f0      	push	{r4, r5, r6, r7}
    d8dc:	b089      	sub	sp, #36	; 0x24
    d8de:	1c0f      	adds	r7, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:938
	struct fquaternion fdeltaq;			// delta rotation quaternion
	float rvecdeg[3];					// rotation vector (deg)
	float ftmp;							// scratch variable

	// initialize delay line on first pass: LPq[n]=q[n]
	if (loopcounter == 0)
    d8e0:	9913      	ldr	r1, [sp, #76]	; 0x4c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:931
}

// function low pass filters an orientation quaternion and computes virtual gyro rotation rate
void fLPFOrientationQuaternion(struct fquaternion *pq, struct fquaternion *pLPq, float flpf, float fdeltat,
		float fOmega[], int32 loopcounter)
{
    d8e2:	9206      	str	r2, [sp, #24]
    d8e4:	9307      	str	r3, [sp, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:938
	struct fquaternion fdeltaq;			// delta rotation quaternion
	float rvecdeg[3];					// rotation vector (deg)
	float ftmp;							// scratch variable

	// initialize delay line on first pass: LPq[n]=q[n]
	if (loopcounter == 0)
    d8e6:	2900      	cmp	r1, #0
    d8e8:	d105      	bne.n	d8f6 <fLPFOrientationQuaternion+0x26>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:940
	{
		*pLPq = *pq;
    d8ea:	1c3b      	adds	r3, r7, #0
    d8ec:	1c02      	adds	r2, r0, #0
    d8ee:	ca32      	ldmia	r2!, {r1, r4, r5}
    d8f0:	c332      	stmia	r3!, {r1, r4, r5}
    d8f2:	6812      	ldr	r2, [r2, #0]
    d8f4:	601a      	str	r2, [r3, #0]
qconjgAxB():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1044
// function compute the quaternion product conjg(qA) * qB
struct fquaternion qconjgAxB(const struct fquaternion *pqA, const struct fquaternion *pqB)
{
	struct fquaternion qProd;

	qProd.q0 = pqA->q0 * pqB->q0 + pqA->q1 * pqB->q1 + pqA->q2 * pqB->q2 + pqA->q3 * pqB->q3;
    d8f6:	6844      	ldr	r4, [r0, #4]
    d8f8:	6803      	ldr	r3, [r0, #0]
    d8fa:	683a      	ldr	r2, [r7, #0]
    d8fc:	9401      	str	r4, [sp, #4]
    d8fe:	68f9      	ldr	r1, [r7, #12]
    d900:	68bc      	ldr	r4, [r7, #8]
    d902:	68c6      	ldr	r6, [r0, #12]
    d904:	468a      	mov	sl, r1
    d906:	9402      	str	r4, [sp, #8]
    d908:	1c19      	adds	r1, r3, #0
    d90a:	6884      	ldr	r4, [r0, #8]
    d90c:	1c10      	adds	r0, r2, #0
    d90e:	4690      	mov	r8, r2
    d910:	469b      	mov	fp, r3
    d912:	f7f3 fa3f 	bl	d94 <__aeabi_fmul>
    d916:	687d      	ldr	r5, [r7, #4]
    d918:	4681      	mov	r9, r0
    d91a:	9901      	ldr	r1, [sp, #4]
    d91c:	1c28      	adds	r0, r5, #0
    d91e:	f7f3 fa39 	bl	d94 <__aeabi_fmul>
    d922:	1c01      	adds	r1, r0, #0
    d924:	4648      	mov	r0, r9
    d926:	f7f2 fee5 	bl	6f4 <__aeabi_fadd>
    d92a:	1c21      	adds	r1, r4, #0
    d92c:	4681      	mov	r9, r0
    d92e:	9802      	ldr	r0, [sp, #8]
    d930:	f7f3 fa30 	bl	d94 <__aeabi_fmul>
    d934:	1c01      	adds	r1, r0, #0
    d936:	4648      	mov	r0, r9
    d938:	f7f2 fedc 	bl	6f4 <__aeabi_fadd>
    d93c:	1c31      	adds	r1, r6, #0
    d93e:	4681      	mov	r9, r0
    d940:	4650      	mov	r0, sl
    d942:	f7f3 fa27 	bl	d94 <__aeabi_fmul>
    d946:	1c01      	adds	r1, r0, #0
    d948:	4648      	mov	r0, r9
    d94a:	f7f2 fed3 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1045
	qProd.q1 = pqA->q0 * pqB->q1 - pqA->q1 * pqB->q0 - pqA->q2 * pqB->q3 + pqA->q3 * pqB->q2;
    d94e:	9901      	ldr	r1, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1044
// function compute the quaternion product conjg(qA) * qB
struct fquaternion qconjgAxB(const struct fquaternion *pqA, const struct fquaternion *pqB)
{
	struct fquaternion qProd;

	qProd.q0 = pqA->q0 * pqB->q0 + pqA->q1 * pqB->q1 + pqA->q2 * pqB->q2 + pqA->q3 * pqB->q3;
    d950:	9004      	str	r0, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1045
	qProd.q1 = pqA->q0 * pqB->q1 - pqA->q1 * pqB->q0 - pqA->q2 * pqB->q3 + pqA->q3 * pqB->q2;
    d952:	4640      	mov	r0, r8
    d954:	f7f3 fa1e 	bl	d94 <__aeabi_fmul>
    d958:	1c29      	adds	r1, r5, #0
    d95a:	4681      	mov	r9, r0
    d95c:	4658      	mov	r0, fp
    d95e:	f7f3 fa19 	bl	d94 <__aeabi_fmul>
    d962:	1c01      	adds	r1, r0, #0
    d964:	4648      	mov	r0, r9
    d966:	f7f3 fb3f 	bl	fe8 <__aeabi_fsub>
    d96a:	1c31      	adds	r1, r6, #0
    d96c:	4681      	mov	r9, r0
    d96e:	9802      	ldr	r0, [sp, #8]
    d970:	f7f3 fa10 	bl	d94 <__aeabi_fmul>
    d974:	1c01      	adds	r1, r0, #0
    d976:	4648      	mov	r0, r9
    d978:	f7f3 fb36 	bl	fe8 <__aeabi_fsub>
    d97c:	4651      	mov	r1, sl
    d97e:	4681      	mov	r9, r0
    d980:	1c20      	adds	r0, r4, #0
    d982:	f7f3 fa07 	bl	d94 <__aeabi_fmul>
    d986:	1c01      	adds	r1, r0, #0
    d988:	4648      	mov	r0, r9
    d98a:	f7f2 feb3 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1046
	qProd.q2 = pqA->q0 * pqB->q2 + pqA->q1 * pqB->q3 - pqA->q2 * pqB->q0 - pqA->q3 * pqB->q1;
    d98e:	1c21      	adds	r1, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1045
struct fquaternion qconjgAxB(const struct fquaternion *pqA, const struct fquaternion *pqB)
{
	struct fquaternion qProd;

	qProd.q0 = pqA->q0 * pqB->q0 + pqA->q1 * pqB->q1 + pqA->q2 * pqB->q2 + pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 - pqA->q1 * pqB->q0 - pqA->q2 * pqB->q3 + pqA->q3 * pqB->q2;
    d990:	9005      	str	r0, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1046
	qProd.q2 = pqA->q0 * pqB->q2 + pqA->q1 * pqB->q3 - pqA->q2 * pqB->q0 - pqA->q3 * pqB->q1;
    d992:	4640      	mov	r0, r8
    d994:	f7f3 f9fe 	bl	d94 <__aeabi_fmul>
    d998:	1c31      	adds	r1, r6, #0
    d99a:	4681      	mov	r9, r0
    d99c:	1c28      	adds	r0, r5, #0
    d99e:	f7f3 f9f9 	bl	d94 <__aeabi_fmul>
    d9a2:	1c01      	adds	r1, r0, #0
    d9a4:	4648      	mov	r0, r9
    d9a6:	f7f2 fea5 	bl	6f4 <__aeabi_fadd>
    d9aa:	9902      	ldr	r1, [sp, #8]
    d9ac:	4681      	mov	r9, r0
    d9ae:	4658      	mov	r0, fp
    d9b0:	f7f3 f9f0 	bl	d94 <__aeabi_fmul>
    d9b4:	1c01      	adds	r1, r0, #0
    d9b6:	4648      	mov	r0, r9
    d9b8:	f7f3 fb16 	bl	fe8 <__aeabi_fsub>
    d9bc:	4651      	mov	r1, sl
    d9be:	4681      	mov	r9, r0
    d9c0:	9801      	ldr	r0, [sp, #4]
    d9c2:	f7f3 f9e7 	bl	d94 <__aeabi_fmul>
    d9c6:	1c01      	adds	r1, r0, #0
    d9c8:	4648      	mov	r0, r9
    d9ca:	f7f3 fb0d 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1047
	qProd.q3 = pqA->q0 * pqB->q3 - pqA->q1 * pqB->q2 + pqA->q2 * pqB->q1 - pqA->q3 * pqB->q0;
    d9ce:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1046
{
	struct fquaternion qProd;

	qProd.q0 = pqA->q0 * pqB->q0 + pqA->q1 * pqB->q1 + pqA->q2 * pqB->q2 + pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 - pqA->q1 * pqB->q0 - pqA->q2 * pqB->q3 + pqA->q3 * pqB->q2;
	qProd.q2 = pqA->q0 * pqB->q2 + pqA->q1 * pqB->q3 - pqA->q2 * pqB->q0 - pqA->q3 * pqB->q1;
    d9d0:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1047
	qProd.q3 = pqA->q0 * pqB->q3 - pqA->q1 * pqB->q2 + pqA->q2 * pqB->q1 - pqA->q3 * pqB->q0;
    d9d2:	4640      	mov	r0, r8
    d9d4:	f7f3 f9de 	bl	d94 <__aeabi_fmul>
    d9d8:	1c21      	adds	r1, r4, #0
    d9da:	1c06      	adds	r6, r0, #0
    d9dc:	1c28      	adds	r0, r5, #0
    d9de:	f7f3 f9d9 	bl	d94 <__aeabi_fmul>
    d9e2:	1c01      	adds	r1, r0, #0
    d9e4:	1c30      	adds	r0, r6, #0
    d9e6:	f7f3 faff 	bl	fe8 <__aeabi_fsub>
    d9ea:	9902      	ldr	r1, [sp, #8]
    d9ec:	1c04      	adds	r4, r0, #0
    d9ee:	9801      	ldr	r0, [sp, #4]
    d9f0:	f7f3 f9d0 	bl	d94 <__aeabi_fmul>
    d9f4:	1c01      	adds	r1, r0, #0
    d9f6:	1c20      	adds	r0, r4, #0
    d9f8:	f7f2 fe7c 	bl	6f4 <__aeabi_fadd>
    d9fc:	4651      	mov	r1, sl
    d9fe:	1c04      	adds	r4, r0, #0
    da00:	4658      	mov	r0, fp
    da02:	f7f3 f9c7 	bl	d94 <__aeabi_fmul>
    da06:	1c01      	adds	r1, r0, #0
    da08:	1c20      	adds	r0, r4, #0
    da0a:	f7f3 faed 	bl	fe8 <__aeabi_fsub>
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:945
		*pLPq = *pq;
	}

	// set fdeltaqn to the delta rotation quaternion conjg(fLPq[n-1) . fqn
	fdeltaq = qconjgAxB(pLPq, pq);
	if (fdeltaq.q0 < 0.0F)
    da0e:	2100      	movs	r1, #0
qconjgAxB():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1047
	struct fquaternion qProd;

	qProd.q0 = pqA->q0 * pqB->q0 + pqA->q1 * pqB->q1 + pqA->q2 * pqB->q2 + pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 - pqA->q1 * pqB->q0 - pqA->q2 * pqB->q3 + pqA->q3 * pqB->q2;
	qProd.q2 = pqA->q0 * pqB->q2 + pqA->q1 * pqB->q3 - pqA->q2 * pqB->q0 - pqA->q3 * pqB->q1;
	qProd.q3 = pqA->q0 * pqB->q3 - pqA->q1 * pqB->q2 + pqA->q2 * pqB->q1 - pqA->q3 * pqB->q0;
    da10:	4680      	mov	r8, r0
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:945
		*pLPq = *pq;
	}

	// set fdeltaqn to the delta rotation quaternion conjg(fLPq[n-1) . fqn
	fdeltaq = qconjgAxB(pLPq, pq);
	if (fdeltaq.q0 < 0.0F)
    da12:	9804      	ldr	r0, [sp, #16]
    da14:	f7f2 fe46 	bl	6a4 <__aeabi_fcmplt>
    da18:	2800      	cmp	r0, #0
    da1a:	d000      	beq.n	da1e <fLPFOrientationQuaternion+0x14e>
    da1c:	e17b      	b.n	dd16 <fLPFOrientationQuaternion+0x446>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:955
		fdeltaq.q3 = -fdeltaq.q3;
	}

	// set ftmp to a scaled lpf value which equals flpf in the limit of small rotations (q0=1)
	// but which rises as the delta rotation angle increases (q0 tends to zero)
	ftmp = flpf + 0.75F * (1.0F - fdeltaq.q0);
    da1e:	20fe      	movs	r0, #254	; 0xfe
    da20:	9904      	ldr	r1, [sp, #16]
    da22:	0580      	lsls	r0, r0, #22
    da24:	f7f3 fae0 	bl	fe8 <__aeabi_fsub>
    da28:	21fd      	movs	r1, #253	; 0xfd
    da2a:	0589      	lsls	r1, r1, #22
    da2c:	f7f3 f9b2 	bl	d94 <__aeabi_fmul>
    da30:	9906      	ldr	r1, [sp, #24]
    da32:	f7f2 fe5f 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:956
	if (ftmp > 1.0F)
    da36:	21fe      	movs	r1, #254	; 0xfe
    da38:	0589      	lsls	r1, r1, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:955
		fdeltaq.q3 = -fdeltaq.q3;
	}

	// set ftmp to a scaled lpf value which equals flpf in the limit of small rotations (q0=1)
	// but which rises as the delta rotation angle increases (q0 tends to zero)
	ftmp = flpf + 0.75F * (1.0F - fdeltaq.q0);
    da3a:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:956
	if (ftmp > 1.0F)
    da3c:	f7f2 fe46 	bl	6cc <__aeabi_fcmpgt>
    da40:	2800      	cmp	r0, #0
    da42:	d001      	beq.n	da48 <fLPFOrientationQuaternion+0x178>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:958
	{
		ftmp = 1.0F;
    da44:	26fe      	movs	r6, #254	; 0xfe
    da46:	05b6      	lsls	r6, r6, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:962
	}

	// scale the delta rotation by the corrected lpf value
	fdeltaq.q1 *= ftmp;
    da48:	1c30      	adds	r0, r6, #0
    da4a:	9905      	ldr	r1, [sp, #20]
    da4c:	f7f3 f9a2 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:963
	fdeltaq.q2 *= ftmp;
    da50:	4649      	mov	r1, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:962
	{
		ftmp = 1.0F;
	}

	// scale the delta rotation by the corrected lpf value
	fdeltaq.q1 *= ftmp;
    da52:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:963
	fdeltaq.q2 *= ftmp;
    da54:	1c30      	adds	r0, r6, #0
    da56:	f7f3 f99d 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:964
	fdeltaq.q3 *= ftmp;
    da5a:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:963
		ftmp = 1.0F;
	}

	// scale the delta rotation by the corrected lpf value
	fdeltaq.q1 *= ftmp;
	fdeltaq.q2 *= ftmp;
    da5c:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:964
	fdeltaq.q3 *= ftmp;
    da5e:	1c30      	adds	r0, r6, #0
    da60:	f7f3 f998 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:967

	// compute the scalar component q0
	ftmp = fdeltaq.q1 * fdeltaq.q1 + fdeltaq.q2 * fdeltaq.q2 + fdeltaq.q3 * fdeltaq.q3;
    da64:	1c21      	adds	r1, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:964
	}

	// scale the delta rotation by the corrected lpf value
	fdeltaq.q1 *= ftmp;
	fdeltaq.q2 *= ftmp;
	fdeltaq.q3 *= ftmp;
    da66:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:967

	// compute the scalar component q0
	ftmp = fdeltaq.q1 * fdeltaq.q1 + fdeltaq.q2 * fdeltaq.q2 + fdeltaq.q3 * fdeltaq.q3;
    da68:	1c20      	adds	r0, r4, #0
    da6a:	f7f3 f993 	bl	d94 <__aeabi_fmul>
    da6e:	1c29      	adds	r1, r5, #0
    da70:	4680      	mov	r8, r0
    da72:	1c28      	adds	r0, r5, #0
    da74:	f7f3 f98e 	bl	d94 <__aeabi_fmul>
    da78:	1c01      	adds	r1, r0, #0
    da7a:	4640      	mov	r0, r8
    da7c:	f7f2 fe3a 	bl	6f4 <__aeabi_fadd>
    da80:	1c31      	adds	r1, r6, #0
    da82:	4680      	mov	r8, r0
    da84:	1c30      	adds	r0, r6, #0
    da86:	f7f3 f985 	bl	d94 <__aeabi_fmul>
    da8a:	1c01      	adds	r1, r0, #0
    da8c:	4640      	mov	r0, r8
    da8e:	f7f2 fe31 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:968
	if (ftmp <= 1.0F)
    da92:	21fe      	movs	r1, #254	; 0xfe
    da94:	0589      	lsls	r1, r1, #22
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:967
	fdeltaq.q1 *= ftmp;
	fdeltaq.q2 *= ftmp;
	fdeltaq.q3 *= ftmp;

	// compute the scalar component q0
	ftmp = fdeltaq.q1 * fdeltaq.q1 + fdeltaq.q2 * fdeltaq.q2 + fdeltaq.q3 * fdeltaq.q3;
    da96:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:968
	if (ftmp <= 1.0F)
    da98:	f7f2 fe0e 	bl	6b8 <__aeabi_fcmple>
    da9c:	2800      	cmp	r0, #0
    da9e:	d000      	beq.n	daa2 <fLPFOrientationQuaternion+0x1d2>
    daa0:	e14d      	b.n	dd3e <fLPFOrientationQuaternion+0x46e>
fRotationVectorDegFromQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:897
	}
	else
	{
		// general case returning 0 < eta < 360 deg 
		fetarad = 2.0F * acosf(pq->q0); 
		fetadeg = fetarad * FRADTODEG;
    daa2:	49bf      	ldr	r1, [pc, #764]	; (dda0 <fLPFOrientationQuaternion+0x4d0>)
    daa4:	48bf      	ldr	r0, [pc, #764]	; (dda4 <fLPFOrientationQuaternion+0x4d4>)
    daa6:	f7f3 f975 	bl	d94 <__aeabi_fmul>
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:976
		fdeltaq.q0 = sqrtf(1.0F - ftmp);
	}
	else
	{
		// rounding errors present so simply set scalar component to 0
		fdeltaq.q0 = 0.0F;
    daaa:	2100      	movs	r1, #0
fRotationVectorDegFromQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:897
	}
	else
	{
		// general case returning 0 < eta < 360 deg 
		fetarad = 2.0F * acosf(pq->q0); 
		fetadeg = fetarad * FRADTODEG;
    daac:	4680      	mov	r8, r0
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:976
		fdeltaq.q0 = sqrtf(1.0F - ftmp);
	}
	else
	{
		// rounding errors present so simply set scalar component to 0
		fdeltaq.q0 = 0.0F;
    daae:	9101      	str	r1, [sp, #4]
fRotationVectorDegFromQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:903
	}

	// map the rotation angle onto the range -180 deg <= eta < 180 deg 
	if (fetadeg >= 180.0F)
	{
		fetadeg -= 360.0F;
    dab0:	4640      	mov	r0, r8
    dab2:	49bd      	ldr	r1, [pc, #756]	; (dda8 <fLPFOrientationQuaternion+0x4d8>)
    dab4:	f7f3 fa98 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:904
		fetarad = fetadeg * FDEGTORAD;
    dab8:	49bc      	ldr	r1, [pc, #752]	; (ddac <fLPFOrientationQuaternion+0x4dc>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:903
	}

	// map the rotation angle onto the range -180 deg <= eta < 180 deg 
	if (fetadeg >= 180.0F)
	{
		fetadeg -= 360.0F;
    daba:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:904
		fetarad = fetadeg * FDEGTORAD;
    dabc:	f7f3 f96a 	bl	d94 <__aeabi_fmul>
    dac0:	21fc      	movs	r1, #252	; 0xfc
    dac2:	0589      	lsls	r1, r1, #22
    dac4:	f7f3 f966 	bl	d94 <__aeabi_fmul>
    dac8:	f003 fb9e 	bl	11208 <sinf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:911

	// calculate sin(eta/2) which will be in the range -1 to +1
	sinhalfeta = (float)sinf(0.5F * fetarad);

	// calculate the rotation vector (deg)
	if (sinhalfeta == 0.0F)
    dacc:	2100      	movs	r1, #0
    dace:	4681      	mov	r9, r0
    dad0:	f7f2 fde2 	bl	698 <__aeabi_fcmpeq>
    dad4:	2800      	cmp	r0, #0
    dad6:	d000      	beq.n	dada <fLPFOrientationQuaternion+0x20a>
    dad8:	e12c      	b.n	dd34 <fLPFOrientationQuaternion+0x464>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:919
		rvecdeg[X] = rvecdeg[Y] = rvecdeg[Z] = 0.0F;
	}
	else
	{
		// general case with non-zero rotation angle
		ftmp = fetadeg / sinhalfeta;
    dada:	4649      	mov	r1, r9
    dadc:	4640      	mov	r0, r8
    dade:	f7f2 ff75 	bl	9cc <__aeabi_fdiv>
    dae2:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:920
		rvecdeg[X] = pq->q1 * ftmp;
    dae4:	4641      	mov	r1, r8
    dae6:	1c20      	adds	r0, r4, #0
    dae8:	f7f3 f954 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:921
		rvecdeg[Y] = pq->q2 * ftmp;
    daec:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:920
	}
	else
	{
		// general case with non-zero rotation angle
		ftmp = fetadeg / sinhalfeta;
		rvecdeg[X] = pq->q1 * ftmp;
    daee:	4683      	mov	fp, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:921
		rvecdeg[Y] = pq->q2 * ftmp;
    daf0:	1c28      	adds	r0, r5, #0
    daf2:	f7f3 f94f 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:922
		rvecdeg[Z] = pq->q3 * ftmp;
    daf6:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:921
	else
	{
		// general case with non-zero rotation angle
		ftmp = fetadeg / sinhalfeta;
		rvecdeg[X] = pq->q1 * ftmp;
		rvecdeg[Y] = pq->q2 * ftmp;
    daf8:	4682      	mov	sl, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:922
		rvecdeg[Z] = pq->q3 * ftmp;
    dafa:	1c30      	adds	r0, r6, #0
    dafc:	f7f3 f94a 	bl	d94 <__aeabi_fmul>
    db00:	4681      	mov	r9, r0
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:981
		fdeltaq.q0 = 0.0F;
	}

	// calculate the delta rotation vector from fdeltaqn and the virtual gyro angular velocity (deg/s)
	fRotationVectorDegFromQuaternion(&fdeltaq, rvecdeg);
	ftmp = 1.0F / fdeltat;
    db02:	20fe      	movs	r0, #254	; 0xfe
    db04:	9907      	ldr	r1, [sp, #28]
    db06:	0580      	lsls	r0, r0, #22
    db08:	f7f2 ff60 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:982
	fOmega[X] = rvecdeg[X] * ftmp;
    db0c:	4659      	mov	r1, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:981
		fdeltaq.q0 = 0.0F;
	}

	// calculate the delta rotation vector from fdeltaqn and the virtual gyro angular velocity (deg/s)
	fRotationVectorDegFromQuaternion(&fdeltaq, rvecdeg);
	ftmp = 1.0F / fdeltat;
    db0e:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:982
	fOmega[X] = rvecdeg[X] * ftmp;
    db10:	f7f3 f940 	bl	d94 <__aeabi_fmul>
    db14:	9b12      	ldr	r3, [sp, #72]	; 0x48
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:983
	fOmega[Y] = rvecdeg[Y] * ftmp;
    db16:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:982
	}

	// calculate the delta rotation vector from fdeltaqn and the virtual gyro angular velocity (deg/s)
	fRotationVectorDegFromQuaternion(&fdeltaq, rvecdeg);
	ftmp = 1.0F / fdeltat;
	fOmega[X] = rvecdeg[X] * ftmp;
    db18:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:983
	fOmega[Y] = rvecdeg[Y] * ftmp;
    db1a:	4640      	mov	r0, r8
    db1c:	f7f3 f93a 	bl	d94 <__aeabi_fmul>
    db20:	9912      	ldr	r1, [sp, #72]	; 0x48
    db22:	6048      	str	r0, [r1, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:984
	fOmega[Z] = rvecdeg[Z] * ftmp;
    db24:	4641      	mov	r1, r8
    db26:	4648      	mov	r0, r9
    db28:	f7f3 f934 	bl	d94 <__aeabi_fmul>
    db2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    db2e:	6090      	str	r0, [r2, #8]
qAeqAxB():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1028
void qAeqAxB(struct fquaternion *pqA, const struct fquaternion *pqB)
{
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
    db30:	683b      	ldr	r3, [r7, #0]
    db32:	6879      	ldr	r1, [r7, #4]
    db34:	68ba      	ldr	r2, [r7, #8]
    db36:	4699      	mov	r9, r3
    db38:	68fb      	ldr	r3, [r7, #12]
    db3a:	4688      	mov	r8, r1
    db3c:	4648      	mov	r0, r9
    db3e:	9901      	ldr	r1, [sp, #4]
    db40:	469b      	mov	fp, r3
    db42:	9202      	str	r2, [sp, #8]
    db44:	f7f3 f926 	bl	d94 <__aeabi_fmul>
    db48:	4641      	mov	r1, r8
    db4a:	4682      	mov	sl, r0
    db4c:	1c20      	adds	r0, r4, #0
    db4e:	f7f3 f921 	bl	d94 <__aeabi_fmul>
    db52:	1c01      	adds	r1, r0, #0
    db54:	4650      	mov	r0, sl
    db56:	f7f3 fa47 	bl	fe8 <__aeabi_fsub>
    db5a:	9902      	ldr	r1, [sp, #8]
    db5c:	4682      	mov	sl, r0
    db5e:	1c28      	adds	r0, r5, #0
    db60:	f7f3 f918 	bl	d94 <__aeabi_fmul>
    db64:	1c01      	adds	r1, r0, #0
    db66:	4650      	mov	r0, sl
    db68:	f7f3 fa3e 	bl	fe8 <__aeabi_fsub>
    db6c:	4659      	mov	r1, fp
    db6e:	4682      	mov	sl, r0
    db70:	1c30      	adds	r0, r6, #0
    db72:	f7f3 f90f 	bl	d94 <__aeabi_fmul>
    db76:	1c01      	adds	r1, r0, #0
    db78:	4650      	mov	r0, sl
    db7a:	f7f3 fa35 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1029
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
    db7e:	4649      	mov	r1, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1028
void qAeqAxB(struct fquaternion *pqA, const struct fquaternion *pqB)
{
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
    db80:	9003      	str	r0, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1029
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
    db82:	1c20      	adds	r0, r4, #0
    db84:	f7f3 f906 	bl	d94 <__aeabi_fmul>
    db88:	9901      	ldr	r1, [sp, #4]
    db8a:	4682      	mov	sl, r0
    db8c:	4640      	mov	r0, r8
    db8e:	f7f3 f901 	bl	d94 <__aeabi_fmul>
    db92:	1c01      	adds	r1, r0, #0
    db94:	4650      	mov	r0, sl
    db96:	f7f2 fdad 	bl	6f4 <__aeabi_fadd>
    db9a:	9902      	ldr	r1, [sp, #8]
    db9c:	4682      	mov	sl, r0
    db9e:	1c30      	adds	r0, r6, #0
    dba0:	f7f3 f8f8 	bl	d94 <__aeabi_fmul>
    dba4:	1c01      	adds	r1, r0, #0
    dba6:	4650      	mov	r0, sl
    dba8:	f7f2 fda4 	bl	6f4 <__aeabi_fadd>
    dbac:	4659      	mov	r1, fp
    dbae:	4682      	mov	sl, r0
    dbb0:	1c28      	adds	r0, r5, #0
    dbb2:	f7f3 f8ef 	bl	d94 <__aeabi_fmul>
    dbb6:	1c01      	adds	r1, r0, #0
    dbb8:	4650      	mov	r0, sl
    dbba:	f7f3 fa15 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1030
	qProd.q2 = pqA->q0 * pqB->q2 - pqA->q1 * pqB->q3 + pqA->q2 * pqB->q0 + pqA->q3 * pqB->q1;
    dbbe:	4649      	mov	r1, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1029
{
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
    dbc0:	9004      	str	r0, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1030
	qProd.q2 = pqA->q0 * pqB->q2 - pqA->q1 * pqB->q3 + pqA->q2 * pqB->q0 + pqA->q3 * pqB->q1;
    dbc2:	1c28      	adds	r0, r5, #0
    dbc4:	f7f3 f8e6 	bl	d94 <__aeabi_fmul>
    dbc8:	4641      	mov	r1, r8
    dbca:	4682      	mov	sl, r0
    dbcc:	1c30      	adds	r0, r6, #0
    dbce:	f7f3 f8e1 	bl	d94 <__aeabi_fmul>
    dbd2:	1c01      	adds	r1, r0, #0
    dbd4:	4650      	mov	r0, sl
    dbd6:	f7f3 fa07 	bl	fe8 <__aeabi_fsub>
    dbda:	9901      	ldr	r1, [sp, #4]
    dbdc:	4682      	mov	sl, r0
    dbde:	9802      	ldr	r0, [sp, #8]
    dbe0:	f7f3 f8d8 	bl	d94 <__aeabi_fmul>
    dbe4:	1c01      	adds	r1, r0, #0
    dbe6:	4650      	mov	r0, sl
    dbe8:	f7f2 fd84 	bl	6f4 <__aeabi_fadd>
    dbec:	4659      	mov	r1, fp
    dbee:	4682      	mov	sl, r0
    dbf0:	1c20      	adds	r0, r4, #0
    dbf2:	f7f3 f8cf 	bl	d94 <__aeabi_fmul>
    dbf6:	1c01      	adds	r1, r0, #0
    dbf8:	4650      	mov	r0, sl
    dbfa:	f7f2 fd7b 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1031
	qProd.q3 = pqA->q0 * pqB->q3 + pqA->q1 * pqB->q2 - pqA->q2 * pqB->q1 + pqA->q3 * pqB->q0;
    dbfe:	4649      	mov	r1, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1030
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
	qProd.q2 = pqA->q0 * pqB->q2 - pqA->q1 * pqB->q3 + pqA->q2 * pqB->q0 + pqA->q3 * pqB->q1;
    dc00:	4682      	mov	sl, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1031
	qProd.q3 = pqA->q0 * pqB->q3 + pqA->q1 * pqB->q2 - pqA->q2 * pqB->q1 + pqA->q3 * pqB->q0;
    dc02:	1c30      	adds	r0, r6, #0
    dc04:	f7f3 f8c6 	bl	d94 <__aeabi_fmul>
    dc08:	4641      	mov	r1, r8
    dc0a:	1c06      	adds	r6, r0, #0
    dc0c:	1c28      	adds	r0, r5, #0
    dc0e:	f7f3 f8c1 	bl	d94 <__aeabi_fmul>
    dc12:	1c01      	adds	r1, r0, #0
    dc14:	1c30      	adds	r0, r6, #0
    dc16:	f7f2 fd6d 	bl	6f4 <__aeabi_fadd>
    dc1a:	9902      	ldr	r1, [sp, #8]
    dc1c:	1c05      	adds	r5, r0, #0
    dc1e:	1c20      	adds	r0, r4, #0
    dc20:	f7f3 f8b8 	bl	d94 <__aeabi_fmul>
    dc24:	1c01      	adds	r1, r0, #0
    dc26:	1c28      	adds	r0, r5, #0
    dc28:	f7f3 f9de 	bl	fe8 <__aeabi_fsub>
    dc2c:	9901      	ldr	r1, [sp, #4]
    dc2e:	1c04      	adds	r4, r0, #0
    dc30:	4658      	mov	r0, fp
    dc32:	f7f3 f8af 	bl	d94 <__aeabi_fmul>
    dc36:	1c01      	adds	r1, r0, #0
    dc38:	1c20      	adds	r0, r4, #0
    dc3a:	f7f2 fd5b 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1034

	// copy the result back into qA
	*pqA = qProd;
    dc3e:	9d03      	ldr	r5, [sp, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1031

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
	qProd.q2 = pqA->q0 * pqB->q2 - pqA->q1 * pqB->q3 + pqA->q2 * pqB->q0 + pqA->q3 * pqB->q1;
	qProd.q3 = pqA->q0 * pqB->q3 + pqA->q1 * pqB->q2 - pqA->q2 * pqB->q1 + pqA->q3 * pqB->q0;
    dc40:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1034

	// copy the result back into qA
	*pqA = qProd;
    dc42:	603d      	str	r5, [r7, #0]
    dc44:	9d04      	ldr	r5, [sp, #16]
    dc46:	60f8      	str	r0, [r7, #12]
fqAeqNormqA():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1058
void fqAeqNormqA(struct fquaternion *pqA)
{
	float fNorm;					// quaternion Norm

	// calculate the quaternion Norm
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
    dc48:	9803      	ldr	r0, [sp, #12]
qAeqAxB():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1034
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
	qProd.q2 = pqA->q0 * pqB->q2 - pqA->q1 * pqB->q3 + pqA->q2 * pqB->q0 + pqA->q3 * pqB->q1;
	qProd.q3 = pqA->q0 * pqB->q3 + pqA->q1 * pqB->q2 - pqA->q2 * pqB->q1 + pqA->q3 * pqB->q0;

	// copy the result back into qA
	*pqA = qProd;
    dc4a:	4651      	mov	r1, sl
    dc4c:	607d      	str	r5, [r7, #4]
    dc4e:	60b9      	str	r1, [r7, #8]
fqAeqNormqA():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1058
void fqAeqNormqA(struct fquaternion *pqA)
{
	float fNorm;					// quaternion Norm

	// calculate the quaternion Norm
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
    dc50:	1c01      	adds	r1, r0, #0
    dc52:	f7f3 f89f 	bl	d94 <__aeabi_fmul>
    dc56:	1c05      	adds	r5, r0, #0
    dc58:	9804      	ldr	r0, [sp, #16]
    dc5a:	1c01      	adds	r1, r0, #0
    dc5c:	f7f3 f89a 	bl	d94 <__aeabi_fmul>
    dc60:	1c01      	adds	r1, r0, #0
    dc62:	1c28      	adds	r0, r5, #0
    dc64:	f7f2 fd46 	bl	6f4 <__aeabi_fadd>
    dc68:	4651      	mov	r1, sl
    dc6a:	1c05      	adds	r5, r0, #0
    dc6c:	4650      	mov	r0, sl
    dc6e:	f7f3 f891 	bl	d94 <__aeabi_fmul>
    dc72:	1c01      	adds	r1, r0, #0
    dc74:	1c28      	adds	r0, r5, #0
    dc76:	f7f2 fd3d 	bl	6f4 <__aeabi_fadd>
    dc7a:	1c21      	adds	r1, r4, #0
    dc7c:	1c05      	adds	r5, r0, #0
    dc7e:	1c20      	adds	r0, r4, #0
    dc80:	f7f3 f888 	bl	d94 <__aeabi_fmul>
    dc84:	1c01      	adds	r1, r0, #0
    dc86:	1c28      	adds	r0, r5, #0
    dc88:	f7f2 fd34 	bl	6f4 <__aeabi_fadd>
    dc8c:	f003 fd18 	bl	116c0 <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1059
	if (fNorm > CORRUPTQUAT)
    dc90:	4947      	ldr	r1, [pc, #284]	; (ddb0 <fLPFOrientationQuaternion+0x4e0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1058
void fqAeqNormqA(struct fquaternion *pqA)
{
	float fNorm;					// quaternion Norm

	// calculate the quaternion Norm
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
    dc92:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1059
	if (fNorm > CORRUPTQUAT)
    dc94:	f7f2 fd1a 	bl	6cc <__aeabi_fcmpgt>
    dc98:	2800      	cmp	r0, #0
    dc9a:	d034      	beq.n	dd06 <fLPFOrientationQuaternion+0x436>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1062
	{
		// general case
		fNorm = 1.0F / fNorm;
    dc9c:	20fe      	movs	r0, #254	; 0xfe
    dc9e:	1c21      	adds	r1, r4, #0
    dca0:	0580      	lsls	r0, r0, #22
    dca2:	f7f2 fe93 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1063
		pqA->q0 *= fNorm;
    dca6:	6839      	ldr	r1, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1062
	// calculate the quaternion Norm
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
	if (fNorm > CORRUPTQUAT)
	{
		// general case
		fNorm = 1.0F / fNorm;
    dca8:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1063
		pqA->q0 *= fNorm;
    dcaa:	f7f3 f873 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1064
		pqA->q1 *= fNorm;
    dcae:	6879      	ldr	r1, [r7, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1063
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
	if (fNorm > CORRUPTQUAT)
	{
		// general case
		fNorm = 1.0F / fNorm;
		pqA->q0 *= fNorm;
    dcb0:	1c05      	adds	r5, r0, #0
    dcb2:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1064
		pqA->q1 *= fNorm;
    dcb4:	1c20      	adds	r0, r4, #0
    dcb6:	f7f3 f86d 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1065
		pqA->q2 *= fNorm;
    dcba:	68b9      	ldr	r1, [r7, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1064
	if (fNorm > CORRUPTQUAT)
	{
		// general case
		fNorm = 1.0F / fNorm;
		pqA->q0 *= fNorm;
		pqA->q1 *= fNorm;
    dcbc:	6078      	str	r0, [r7, #4]
    dcbe:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1065
		pqA->q2 *= fNorm;
    dcc0:	1c20      	adds	r0, r4, #0
    dcc2:	f7f3 f867 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1066
		pqA->q3 *= fNorm;
    dcc6:	68f9      	ldr	r1, [r7, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1065
	{
		// general case
		fNorm = 1.0F / fNorm;
		pqA->q0 *= fNorm;
		pqA->q1 *= fNorm;
		pqA->q2 *= fNorm;
    dcc8:	60b8      	str	r0, [r7, #8]
    dcca:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1066
		pqA->q3 *= fNorm;
    dccc:	1c20      	adds	r0, r4, #0
    dcce:	f7f3 f861 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1076
		pqA->q0 = 1.0F;
		pqA->q1 = pqA->q2 = pqA->q3 = 0.0F;
	}

	// correct a negative scalar component if the function was called with negative q0
	if (pqA->q0 < 0.0F)
    dcd2:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1066
		// general case
		fNorm = 1.0F / fNorm;
		pqA->q0 *= fNorm;
		pqA->q1 *= fNorm;
		pqA->q2 *= fNorm;
		pqA->q3 *= fNorm;
    dcd4:	1c04      	adds	r4, r0, #0
    dcd6:	60f8      	str	r0, [r7, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1076
		pqA->q0 = 1.0F;
		pqA->q1 = pqA->q2 = pqA->q3 = 0.0F;
	}

	// correct a negative scalar component if the function was called with negative q0
	if (pqA->q0 < 0.0F)
    dcd8:	1c28      	adds	r0, r5, #0
    dcda:	f7f2 fce3 	bl	6a4 <__aeabi_fcmplt>
    dcde:	2800      	cmp	r0, #0
    dce0:	d00a      	beq.n	dcf8 <fLPFOrientationQuaternion+0x428>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1078
	{
		pqA->q0 = -pqA->q0;
    dce2:	2280      	movs	r2, #128	; 0x80
    dce4:	0612      	lsls	r2, r2, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1079
		pqA->q1 = -pqA->q1;
    dce6:	1c13      	adds	r3, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1078
	}

	// correct a negative scalar component if the function was called with negative q0
	if (pqA->q0 < 0.0F)
	{
		pqA->q0 = -pqA->q0;
    dce8:	18ad      	adds	r5, r5, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1079
		pqA->q1 = -pqA->q1;
    dcea:	4443      	add	r3, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1080
		pqA->q2 = -pqA->q2;
    dcec:	18b6      	adds	r6, r6, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1081
		pqA->q3 = -pqA->q3;
    dcee:	18a4      	adds	r4, r4, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1078
	}

	// correct a negative scalar component if the function was called with negative q0
	if (pqA->q0 < 0.0F)
	{
		pqA->q0 = -pqA->q0;
    dcf0:	603d      	str	r5, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1079
		pqA->q1 = -pqA->q1;
    dcf2:	607b      	str	r3, [r7, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1080
		pqA->q2 = -pqA->q2;
    dcf4:	60be      	str	r6, [r7, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1081
		pqA->q3 = -pqA->q3;
    dcf6:	60fc      	str	r4, [r7, #12]
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:994
	// renormalize the low pass filtered quaternion to prevent error accumulation
	// the renormalization function ensures that q0 is non-negative
	fqAeqNormqA(pLPq);

	return;
}
    dcf8:	b009      	add	sp, #36	; 0x24
    dcfa:	bc3c      	pop	{r2, r3, r4, r5}
    dcfc:	4690      	mov	r8, r2
    dcfe:	4699      	mov	r9, r3
    dd00:	46a2      	mov	sl, r4
    dd02:	46ab      	mov	fp, r5
    dd04:	bdf0      	pop	{r4, r5, r6, r7, pc}
fqAeqNormqA():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1071
		pqA->q3 *= fNorm;
	}
	else
	{
		// return with identity quaternion since the quaternion is corrupted
		pqA->q0 = 1.0F;
    dd06:	23fe      	movs	r3, #254	; 0xfe
    dd08:	059b      	lsls	r3, r3, #22
    dd0a:	603b      	str	r3, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1072
		pqA->q1 = pqA->q2 = pqA->q3 = 0.0F;
    dd0c:	2300      	movs	r3, #0
    dd0e:	60fb      	str	r3, [r7, #12]
    dd10:	60bb      	str	r3, [r7, #8]
    dd12:	607b      	str	r3, [r7, #4]
    dd14:	e7f0      	b.n	dcf8 <fLPFOrientationQuaternion+0x428>
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:947

	// set fdeltaqn to the delta rotation quaternion conjg(fLPq[n-1) . fqn
	fdeltaq = qconjgAxB(pLPq, pq);
	if (fdeltaq.q0 < 0.0F)
	{
		fdeltaq.q0 = -fdeltaq.q0;
    dd16:	9a04      	ldr	r2, [sp, #16]
    dd18:	2480      	movs	r4, #128	; 0x80
    dd1a:	0624      	lsls	r4, r4, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:948
		fdeltaq.q1 = -fdeltaq.q1;
    dd1c:	9d05      	ldr	r5, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:947

	// set fdeltaqn to the delta rotation quaternion conjg(fLPq[n-1) . fqn
	fdeltaq = qconjgAxB(pLPq, pq);
	if (fdeltaq.q0 < 0.0F)
	{
		fdeltaq.q0 = -fdeltaq.q0;
    dd1e:	1913      	adds	r3, r2, r4
    dd20:	9304      	str	r3, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:948
		fdeltaq.q1 = -fdeltaq.q1;
    dd22:	192b      	adds	r3, r5, r4
    dd24:	9305      	str	r3, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:950
		fdeltaq.q2 = -fdeltaq.q2;
		fdeltaq.q3 = -fdeltaq.q3;
    dd26:	1c26      	adds	r6, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:949
	fdeltaq = qconjgAxB(pLPq, pq);
	if (fdeltaq.q0 < 0.0F)
	{
		fdeltaq.q0 = -fdeltaq.q0;
		fdeltaq.q1 = -fdeltaq.q1;
		fdeltaq.q2 = -fdeltaq.q2;
    dd28:	1c23      	adds	r3, r4, #0
    dd2a:	444b      	add	r3, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:950
		fdeltaq.q3 = -fdeltaq.q3;
    dd2c:	4446      	add	r6, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:949
	fdeltaq = qconjgAxB(pLPq, pq);
	if (fdeltaq.q0 < 0.0F)
	{
		fdeltaq.q0 = -fdeltaq.q0;
		fdeltaq.q1 = -fdeltaq.q1;
		fdeltaq.q2 = -fdeltaq.q2;
    dd2e:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:950
		fdeltaq.q3 = -fdeltaq.q3;
    dd30:	46b0      	mov	r8, r6
    dd32:	e674      	b.n	da1e <fLPFOrientationQuaternion+0x14e>
fRotationVectorDegFromQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:914

	// calculate the rotation vector (deg)
	if (sinhalfeta == 0.0F)
	{
		// the rotation angle eta is zero and the axis is irrelevant 
		rvecdeg[X] = rvecdeg[Y] = rvecdeg[Z] = 0.0F;
    dd34:	2200      	movs	r2, #0
    dd36:	4691      	mov	r9, r2
    dd38:	4692      	mov	sl, r2
    dd3a:	4693      	mov	fp, r2
    dd3c:	e6e1      	b.n	db02 <fLPFOrientationQuaternion+0x232>
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:971
	// compute the scalar component q0
	ftmp = fdeltaq.q1 * fdeltaq.q1 + fdeltaq.q2 * fdeltaq.q2 + fdeltaq.q3 * fdeltaq.q3;
	if (ftmp <= 1.0F)
	{
		// normal case
		fdeltaq.q0 = sqrtf(1.0F - ftmp);
    dd3e:	20fe      	movs	r0, #254	; 0xfe
    dd40:	4641      	mov	r1, r8
    dd42:	0580      	lsls	r0, r0, #22
    dd44:	f7f3 f950 	bl	fe8 <__aeabi_fsub>
    dd48:	f003 fcba 	bl	116c0 <sqrtf>
fRotationVectorDegFromQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:887
	float fetadeg;			// rotation angle (deg)
	float sinhalfeta;		// sin(eta/2)
	float ftmp;				// scratch variable

	// calculate the rotation angle in the range 0 <= eta < 360 deg
	if ((pq->q0 >= 1.0F) || (pq->q0 <= -1.0F))
    dd4c:	21fe      	movs	r1, #254	; 0xfe
    dd4e:	0589      	lsls	r1, r1, #22
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:971
	// compute the scalar component q0
	ftmp = fdeltaq.q1 * fdeltaq.q1 + fdeltaq.q2 * fdeltaq.q2 + fdeltaq.q3 * fdeltaq.q3;
	if (ftmp <= 1.0F)
	{
		// normal case
		fdeltaq.q0 = sqrtf(1.0F - ftmp);
    dd50:	9001      	str	r0, [sp, #4]
fRotationVectorDegFromQuaternion():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:887
	float fetadeg;			// rotation angle (deg)
	float sinhalfeta;		// sin(eta/2)
	float ftmp;				// scratch variable

	// calculate the rotation angle in the range 0 <= eta < 360 deg
	if ((pq->q0 >= 1.0F) || (pq->q0 <= -1.0F))
    dd52:	f7f2 fcc5 	bl	6e0 <__aeabi_fcmpge>
    dd56:	2800      	cmp	r0, #0
    dd58:	d004      	beq.n	dd64 <fLPFOrientationQuaternion+0x494>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:914

	// calculate the rotation vector (deg)
	if (sinhalfeta == 0.0F)
	{
		// the rotation angle eta is zero and the axis is irrelevant 
		rvecdeg[X] = rvecdeg[Y] = rvecdeg[Z] = 0.0F;
    dd5a:	2300      	movs	r3, #0
    dd5c:	4699      	mov	r9, r3
    dd5e:	469a      	mov	sl, r3
    dd60:	469b      	mov	fp, r3
    dd62:	e6ce      	b.n	db02 <fLPFOrientationQuaternion+0x232>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:887
	float fetadeg;			// rotation angle (deg)
	float sinhalfeta;		// sin(eta/2)
	float ftmp;				// scratch variable

	// calculate the rotation angle in the range 0 <= eta < 360 deg
	if ((pq->q0 >= 1.0F) || (pq->q0 <= -1.0F))
    dd64:	9801      	ldr	r0, [sp, #4]
    dd66:	4913      	ldr	r1, [pc, #76]	; (ddb4 <fLPFOrientationQuaternion+0x4e4>)
    dd68:	f7f2 fca6 	bl	6b8 <__aeabi_fcmple>
    dd6c:	2800      	cmp	r0, #0
    dd6e:	d112      	bne.n	dd96 <fLPFOrientationQuaternion+0x4c6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:896
		fetadeg = 0.0F;
	}
	else
	{
		// general case returning 0 < eta < 360 deg 
		fetarad = 2.0F * acosf(pq->q0); 
    dd70:	9801      	ldr	r0, [sp, #4]
    dd72:	f003 fa89 	bl	11288 <acosf>
    dd76:	1c01      	adds	r1, r0, #0
    dd78:	f7f2 fcbc 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:897
		fetadeg = fetarad * FRADTODEG;
    dd7c:	4908      	ldr	r1, [pc, #32]	; (dda0 <fLPFOrientationQuaternion+0x4d0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:896
		fetadeg = 0.0F;
	}
	else
	{
		// general case returning 0 < eta < 360 deg 
		fetarad = 2.0F * acosf(pq->q0); 
    dd7e:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:897
		fetadeg = fetarad * FRADTODEG;
    dd80:	f7f3 f808 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:901
	}

	// map the rotation angle onto the range -180 deg <= eta < 180 deg 
	if (fetadeg >= 180.0F)
    dd84:	490c      	ldr	r1, [pc, #48]	; (ddb8 <fLPFOrientationQuaternion+0x4e8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:897
	}
	else
	{
		// general case returning 0 < eta < 360 deg 
		fetarad = 2.0F * acosf(pq->q0); 
		fetadeg = fetarad * FRADTODEG;
    dd86:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:901
	}

	// map the rotation angle onto the range -180 deg <= eta < 180 deg 
	if (fetadeg >= 180.0F)
    dd88:	f7f2 fcaa 	bl	6e0 <__aeabi_fcmpge>
    dd8c:	2800      	cmp	r0, #0
    dd8e:	d000      	beq.n	dd92 <fLPFOrientationQuaternion+0x4c2>
    dd90:	e68e      	b.n	dab0 <fLPFOrientationQuaternion+0x1e0>
    dd92:	4648      	mov	r0, r9
    dd94:	e694      	b.n	dac0 <fLPFOrientationQuaternion+0x1f0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:914

	// calculate the rotation vector (deg)
	if (sinhalfeta == 0.0F)
	{
		// the rotation angle eta is zero and the axis is irrelevant 
		rvecdeg[X] = rvecdeg[Y] = rvecdeg[Z] = 0.0F;
    dd96:	2100      	movs	r1, #0
    dd98:	4689      	mov	r9, r1
    dd9a:	468a      	mov	sl, r1
    dd9c:	468b      	mov	fp, r1
    dd9e:	e6b0      	b.n	db02 <fLPFOrientationQuaternion+0x232>
    dda0:	42652ee1 	.word	0x42652ee1
    dda4:	40490fdb 	.word	0x40490fdb
    dda8:	43b40000 	.word	0x43b40000
    ddac:	3c8efa35 	.word	0x3c8efa35
    ddb0:	3a83126f 	.word	0x3a83126f
    ddb4:	bf800000 	.word	0xbf800000
    ddb8:	43340000 	.word	0x43340000

0000ddbc <fLPFScalar>:
fLPFScalar():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:998
	return;
}

// function low pass filters a scalar
void fLPFScalar(float *pfS, float *pfLPS, float flpf, int32 loopcounter)
{
    ddbc:	b570      	push	{r4, r5, r6, lr}
    ddbe:	1c0d      	adds	r5, r1, #0
    ddc0:	1c16      	adds	r6, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1000
	// set S[LP,n]=S[n] on first pass
	if (loopcounter == 0)
    ddc2:	2b00      	cmp	r3, #0
    ddc4:	d10d      	bne.n	dde2 <fLPFScalar+0x26>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1002
	{
		*pfLPS = *pfS;
    ddc6:	6804      	ldr	r4, [r0, #0]
    ddc8:	600c      	str	r4, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1006
	}

	// apply the exponential low pass filter
	*pfLPS += flpf * (*pfS - *pfLPS);
    ddca:	6800      	ldr	r0, [r0, #0]
    ddcc:	1c21      	adds	r1, r4, #0
    ddce:	f7f3 f90b 	bl	fe8 <__aeabi_fsub>
    ddd2:	1c31      	adds	r1, r6, #0
    ddd4:	f7f2 ffde 	bl	d94 <__aeabi_fmul>
    ddd8:	1c21      	adds	r1, r4, #0
    ddda:	f7f2 fc8b 	bl	6f4 <__aeabi_fadd>
    ddde:	6028      	str	r0, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1009

	return;
}
    dde0:	bd70      	pop	{r4, r5, r6, pc}
    dde2:	680c      	ldr	r4, [r1, #0]
    dde4:	e7f1      	b.n	ddca <fLPFScalar+0xe>
    dde6:	46c0      	nop			; (mov r8, r8)

0000dde8 <qAeqBxC>:
qAeqBxC():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1013

// function compute the quaternion product qA * qB
void qAeqBxC(struct fquaternion *pqA, const struct fquaternion *pqB, const struct fquaternion *pqC)
{
    dde8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ddea:	465f      	mov	r7, fp
    ddec:	4656      	mov	r6, sl
    ddee:	464d      	mov	r5, r9
    ddf0:	4644      	mov	r4, r8
    ddf2:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1014
	pqA->q0 = pqB->q0 * pqC->q0 - pqB->q1 * pqC->q1 - pqB->q2 * pqC->q2 - pqB->q3 * pqC->q3;
    ddf4:	684b      	ldr	r3, [r1, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1013
	return;
}

// function compute the quaternion product qA * qB
void qAeqBxC(struct fquaternion *pqA, const struct fquaternion *pqB, const struct fquaternion *pqC)
{
    ddf6:	b085      	sub	sp, #20
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1014
	pqA->q0 = pqB->q0 * pqC->q0 - pqB->q1 * pqC->q1 - pqB->q2 * pqC->q2 - pqB->q3 * pqC->q3;
    ddf8:	9301      	str	r3, [sp, #4]
    ddfa:	6853      	ldr	r3, [r2, #4]
    ddfc:	68cf      	ldr	r7, [r1, #12]
    ddfe:	9303      	str	r3, [sp, #12]
    de00:	688b      	ldr	r3, [r1, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1013
	return;
}

// function compute the quaternion product qA * qB
void qAeqBxC(struct fquaternion *pqA, const struct fquaternion *pqB, const struct fquaternion *pqC)
{
    de02:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1014
	pqA->q0 = pqB->q0 * pqC->q0 - pqB->q1 * pqC->q1 - pqB->q2 * pqC->q2 - pqB->q3 * pqC->q3;
    de04:	469b      	mov	fp, r3
    de06:	6893      	ldr	r3, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1013
	return;
}

// function compute the quaternion product qA * qB
void qAeqBxC(struct fquaternion *pqA, const struct fquaternion *pqB, const struct fquaternion *pqC)
{
    de08:	1c0c      	adds	r4, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1014
	pqA->q0 = pqB->q0 * pqC->q0 - pqB->q1 * pqC->q1 - pqB->q2 * pqC->q2 - pqB->q3 * pqC->q3;
    de0a:	9302      	str	r3, [sp, #8]
    de0c:	68d3      	ldr	r3, [r2, #12]
    de0e:	6808      	ldr	r0, [r1, #0]
    de10:	6811      	ldr	r1, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1013
	return;
}

// function compute the quaternion product qA * qB
void qAeqBxC(struct fquaternion *pqA, const struct fquaternion *pqB, const struct fquaternion *pqC)
{
    de12:	1c15      	adds	r5, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1014
	pqA->q0 = pqB->q0 * pqC->q0 - pqB->q1 * pqC->q1 - pqB->q2 * pqC->q2 - pqB->q3 * pqC->q3;
    de14:	4698      	mov	r8, r3
    de16:	f7f2 ffbd 	bl	d94 <__aeabi_fmul>
    de1a:	9903      	ldr	r1, [sp, #12]
    de1c:	4681      	mov	r9, r0
    de1e:	9801      	ldr	r0, [sp, #4]
    de20:	f7f2 ffb8 	bl	d94 <__aeabi_fmul>
    de24:	1c01      	adds	r1, r0, #0
    de26:	4648      	mov	r0, r9
    de28:	f7f3 f8de 	bl	fe8 <__aeabi_fsub>
    de2c:	9902      	ldr	r1, [sp, #8]
    de2e:	4681      	mov	r9, r0
    de30:	4658      	mov	r0, fp
    de32:	f7f2 ffaf 	bl	d94 <__aeabi_fmul>
    de36:	1c01      	adds	r1, r0, #0
    de38:	4648      	mov	r0, r9
    de3a:	f7f3 f8d5 	bl	fe8 <__aeabi_fsub>
    de3e:	4641      	mov	r1, r8
    de40:	4681      	mov	r9, r0
    de42:	1c38      	adds	r0, r7, #0
    de44:	f7f2 ffa6 	bl	d94 <__aeabi_fmul>
    de48:	1c01      	adds	r1, r0, #0
    de4a:	4648      	mov	r0, r9
    de4c:	f7f3 f8cc 	bl	fe8 <__aeabi_fsub>
    de50:	6030      	str	r0, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1015
	pqA->q1 = pqB->q0 * pqC->q1 + pqB->q1 * pqC->q0 + pqB->q2 * pqC->q3 - pqB->q3 * pqC->q2;
    de52:	6823      	ldr	r3, [r4, #0]
    de54:	9803      	ldr	r0, [sp, #12]
    de56:	469a      	mov	sl, r3
    de58:	682b      	ldr	r3, [r5, #0]
    de5a:	4651      	mov	r1, sl
    de5c:	4699      	mov	r9, r3
    de5e:	f7f2 ff99 	bl	d94 <__aeabi_fmul>
    de62:	4649      	mov	r1, r9
    de64:	9003      	str	r0, [sp, #12]
    de66:	9801      	ldr	r0, [sp, #4]
    de68:	f7f2 ff94 	bl	d94 <__aeabi_fmul>
    de6c:	1c01      	adds	r1, r0, #0
    de6e:	9803      	ldr	r0, [sp, #12]
    de70:	f7f2 fc40 	bl	6f4 <__aeabi_fadd>
    de74:	4641      	mov	r1, r8
    de76:	9001      	str	r0, [sp, #4]
    de78:	4658      	mov	r0, fp
    de7a:	f7f2 ff8b 	bl	d94 <__aeabi_fmul>
    de7e:	1c01      	adds	r1, r0, #0
    de80:	9801      	ldr	r0, [sp, #4]
    de82:	f7f2 fc37 	bl	6f4 <__aeabi_fadd>
    de86:	1c39      	adds	r1, r7, #0
    de88:	9001      	str	r0, [sp, #4]
    de8a:	9802      	ldr	r0, [sp, #8]
    de8c:	f7f2 ff82 	bl	d94 <__aeabi_fmul>
    de90:	1c01      	adds	r1, r0, #0
    de92:	9801      	ldr	r0, [sp, #4]
    de94:	f7f3 f8a8 	bl	fe8 <__aeabi_fsub>
    de98:	6070      	str	r0, [r6, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1016
	pqA->q2 = pqB->q0 * pqC->q2 - pqB->q1 * pqC->q3 + pqB->q2 * pqC->q0 + pqB->q3 * pqC->q1;
    de9a:	6863      	ldr	r3, [r4, #4]
    de9c:	9802      	ldr	r0, [sp, #8]
    de9e:	9301      	str	r3, [sp, #4]
    dea0:	686b      	ldr	r3, [r5, #4]
    dea2:	4651      	mov	r1, sl
    dea4:	9303      	str	r3, [sp, #12]
    dea6:	f7f2 ff75 	bl	d94 <__aeabi_fmul>
    deaa:	9901      	ldr	r1, [sp, #4]
    deac:	9002      	str	r0, [sp, #8]
    deae:	4640      	mov	r0, r8
    deb0:	f7f2 ff70 	bl	d94 <__aeabi_fmul>
    deb4:	1c01      	adds	r1, r0, #0
    deb6:	9802      	ldr	r0, [sp, #8]
    deb8:	f7f3 f896 	bl	fe8 <__aeabi_fsub>
    debc:	4649      	mov	r1, r9
    debe:	9002      	str	r0, [sp, #8]
    dec0:	4658      	mov	r0, fp
    dec2:	f7f2 ff67 	bl	d94 <__aeabi_fmul>
    dec6:	1c01      	adds	r1, r0, #0
    dec8:	9802      	ldr	r0, [sp, #8]
    deca:	f7f2 fc13 	bl	6f4 <__aeabi_fadd>
    dece:	9903      	ldr	r1, [sp, #12]
    ded0:	4683      	mov	fp, r0
    ded2:	1c38      	adds	r0, r7, #0
    ded4:	f7f2 ff5e 	bl	d94 <__aeabi_fmul>
    ded8:	1c01      	adds	r1, r0, #0
    deda:	4658      	mov	r0, fp
    dedc:	f7f2 fc0a 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1017
	pqA->q3 = pqB->q0 * pqC->q3 + pqB->q1 * pqC->q2 - pqB->q2 * pqC->q1 + pqB->q3 * pqC->q0;
    dee0:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1016
// function compute the quaternion product qA * qB
void qAeqBxC(struct fquaternion *pqA, const struct fquaternion *pqB, const struct fquaternion *pqC)
{
	pqA->q0 = pqB->q0 * pqC->q0 - pqB->q1 * pqC->q1 - pqB->q2 * pqC->q2 - pqB->q3 * pqC->q3;
	pqA->q1 = pqB->q0 * pqC->q1 + pqB->q1 * pqC->q0 + pqB->q2 * pqC->q3 - pqB->q3 * pqC->q2;
	pqA->q2 = pqB->q0 * pqC->q2 - pqB->q1 * pqC->q3 + pqB->q2 * pqC->q0 + pqB->q3 * pqC->q1;
    dee2:	60b0      	str	r0, [r6, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1017
	pqA->q3 = pqB->q0 * pqC->q3 + pqB->q1 * pqC->q2 - pqB->q2 * pqC->q1 + pqB->q3 * pqC->q0;
    dee4:	4640      	mov	r0, r8
    dee6:	f7f2 ff55 	bl	d94 <__aeabi_fmul>
    deea:	68a9      	ldr	r1, [r5, #8]
    deec:	4680      	mov	r8, r0
    deee:	9801      	ldr	r0, [sp, #4]
    def0:	f7f2 ff50 	bl	d94 <__aeabi_fmul>
    def4:	1c01      	adds	r1, r0, #0
    def6:	4640      	mov	r0, r8
    def8:	f7f2 fbfc 	bl	6f4 <__aeabi_fadd>
    defc:	68a1      	ldr	r1, [r4, #8]
    defe:	1c05      	adds	r5, r0, #0
    df00:	9803      	ldr	r0, [sp, #12]
    df02:	f7f2 ff47 	bl	d94 <__aeabi_fmul>
    df06:	1c01      	adds	r1, r0, #0
    df08:	1c28      	adds	r0, r5, #0
    df0a:	f7f3 f86d 	bl	fe8 <__aeabi_fsub>
    df0e:	4649      	mov	r1, r9
    df10:	1c04      	adds	r4, r0, #0
    df12:	1c38      	adds	r0, r7, #0
    df14:	f7f2 ff3e 	bl	d94 <__aeabi_fmul>
    df18:	1c01      	adds	r1, r0, #0
    df1a:	1c20      	adds	r0, r4, #0
    df1c:	f7f2 fbea 	bl	6f4 <__aeabi_fadd>
    df20:	60f0      	str	r0, [r6, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1020

	return;
}
    df22:	b005      	add	sp, #20
    df24:	bc3c      	pop	{r2, r3, r4, r5}
    df26:	4690      	mov	r8, r2
    df28:	4699      	mov	r9, r3
    df2a:	46a2      	mov	sl, r4
    df2c:	46ab      	mov	fp, r5
    df2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000df30 <qAeqAxB>:
qAeqAxB():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1024

// function compute the quaternion product qA = qA * qB
void qAeqAxB(struct fquaternion *pqA, const struct fquaternion *pqB)
{
    df30:	b5f0      	push	{r4, r5, r6, r7, lr}
    df32:	465f      	mov	r7, fp
    df34:	4656      	mov	r6, sl
    df36:	464d      	mov	r5, r9
    df38:	4644      	mov	r4, r8
    df3a:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1028
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
    df3c:	6803      	ldr	r3, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1024
	return;
}

// function compute the quaternion product qA = qA * qB
void qAeqAxB(struct fquaternion *pqA, const struct fquaternion *pqB)
{
    df3e:	b083      	sub	sp, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1028
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
    df40:	469b      	mov	fp, r3
    df42:	6843      	ldr	r3, [r0, #4]
    df44:	680e      	ldr	r6, [r1, #0]
    df46:	4699      	mov	r9, r3
    df48:	6883      	ldr	r3, [r0, #8]
    df4a:	684f      	ldr	r7, [r1, #4]
    df4c:	9301      	str	r3, [sp, #4]
    df4e:	688b      	ldr	r3, [r1, #8]
    df50:	68c9      	ldr	r1, [r1, #12]
    df52:	68c5      	ldr	r5, [r0, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1024
	return;
}

// function compute the quaternion product qA = qA * qB
void qAeqAxB(struct fquaternion *pqA, const struct fquaternion *pqB)
{
    df54:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1028
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
    df56:	468a      	mov	sl, r1
    df58:	4658      	mov	r0, fp
    df5a:	1c31      	adds	r1, r6, #0
    df5c:	4698      	mov	r8, r3
    df5e:	f7f2 ff19 	bl	d94 <__aeabi_fmul>
    df62:	1c39      	adds	r1, r7, #0
    df64:	9000      	str	r0, [sp, #0]
    df66:	4648      	mov	r0, r9
    df68:	f7f2 ff14 	bl	d94 <__aeabi_fmul>
    df6c:	1c01      	adds	r1, r0, #0
    df6e:	9800      	ldr	r0, [sp, #0]
    df70:	f7f3 f83a 	bl	fe8 <__aeabi_fsub>
    df74:	4641      	mov	r1, r8
    df76:	9000      	str	r0, [sp, #0]
    df78:	9801      	ldr	r0, [sp, #4]
    df7a:	f7f2 ff0b 	bl	d94 <__aeabi_fmul>
    df7e:	1c01      	adds	r1, r0, #0
    df80:	9800      	ldr	r0, [sp, #0]
    df82:	f7f3 f831 	bl	fe8 <__aeabi_fsub>
    df86:	4651      	mov	r1, sl
    df88:	9000      	str	r0, [sp, #0]
    df8a:	1c28      	adds	r0, r5, #0
    df8c:	f7f2 ff02 	bl	d94 <__aeabi_fmul>
    df90:	1c01      	adds	r1, r0, #0
    df92:	9800      	ldr	r0, [sp, #0]
    df94:	f7f3 f828 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1029
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
    df98:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1034
	qProd.q2 = pqA->q0 * pqB->q2 - pqA->q1 * pqB->q3 + pqA->q2 * pqB->q0 + pqA->q3 * pqB->q1;
	qProd.q3 = pqA->q0 * pqB->q3 + pqA->q1 * pqB->q2 - pqA->q2 * pqB->q1 + pqA->q3 * pqB->q0;

	// copy the result back into qA
	*pqA = qProd;
    df9a:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1029
{
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
    df9c:	4658      	mov	r0, fp
    df9e:	f7f2 fef9 	bl	d94 <__aeabi_fmul>
    dfa2:	4649      	mov	r1, r9
    dfa4:	9000      	str	r0, [sp, #0]
    dfa6:	1c30      	adds	r0, r6, #0
    dfa8:	f7f2 fef4 	bl	d94 <__aeabi_fmul>
    dfac:	1c01      	adds	r1, r0, #0
    dfae:	9800      	ldr	r0, [sp, #0]
    dfb0:	f7f2 fba0 	bl	6f4 <__aeabi_fadd>
    dfb4:	4651      	mov	r1, sl
    dfb6:	9000      	str	r0, [sp, #0]
    dfb8:	9801      	ldr	r0, [sp, #4]
    dfba:	f7f2 feeb 	bl	d94 <__aeabi_fmul>
    dfbe:	1c01      	adds	r1, r0, #0
    dfc0:	9800      	ldr	r0, [sp, #0]
    dfc2:	f7f2 fb97 	bl	6f4 <__aeabi_fadd>
    dfc6:	1c29      	adds	r1, r5, #0
    dfc8:	9000      	str	r0, [sp, #0]
    dfca:	4640      	mov	r0, r8
    dfcc:	f7f2 fee2 	bl	d94 <__aeabi_fmul>
    dfd0:	1c01      	adds	r1, r0, #0
    dfd2:	9800      	ldr	r0, [sp, #0]
    dfd4:	f7f3 f808 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1030
	qProd.q2 = pqA->q0 * pqB->q2 - pqA->q1 * pqB->q3 + pqA->q2 * pqB->q0 + pqA->q3 * pqB->q1;
    dfd8:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1034
	qProd.q3 = pqA->q0 * pqB->q3 + pqA->q1 * pqB->q2 - pqA->q2 * pqB->q1 + pqA->q3 * pqB->q0;

	// copy the result back into qA
	*pqA = qProd;
    dfda:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1030
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
	qProd.q2 = pqA->q0 * pqB->q2 - pqA->q1 * pqB->q3 + pqA->q2 * pqB->q0 + pqA->q3 * pqB->q1;
    dfdc:	4658      	mov	r0, fp
    dfde:	f7f2 fed9 	bl	d94 <__aeabi_fmul>
    dfe2:	4651      	mov	r1, sl
    dfe4:	9000      	str	r0, [sp, #0]
    dfe6:	4648      	mov	r0, r9
    dfe8:	f7f2 fed4 	bl	d94 <__aeabi_fmul>
    dfec:	1c01      	adds	r1, r0, #0
    dfee:	9800      	ldr	r0, [sp, #0]
    dff0:	f7f2 fffa 	bl	fe8 <__aeabi_fsub>
    dff4:	9000      	str	r0, [sp, #0]
    dff6:	9901      	ldr	r1, [sp, #4]
    dff8:	1c30      	adds	r0, r6, #0
    dffa:	f7f2 fecb 	bl	d94 <__aeabi_fmul>
    dffe:	1c01      	adds	r1, r0, #0
    e000:	9800      	ldr	r0, [sp, #0]
    e002:	f7f2 fb77 	bl	6f4 <__aeabi_fadd>
    e006:	1c29      	adds	r1, r5, #0
    e008:	9000      	str	r0, [sp, #0]
    e00a:	1c38      	adds	r0, r7, #0
    e00c:	f7f2 fec2 	bl	d94 <__aeabi_fmul>
    e010:	1c01      	adds	r1, r0, #0
    e012:	9800      	ldr	r0, [sp, #0]
    e014:	f7f2 fb6e 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1031
	qProd.q3 = pqA->q0 * pqB->q3 + pqA->q1 * pqB->q2 - pqA->q2 * pqB->q1 + pqA->q3 * pqB->q0;
    e018:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1034

	// copy the result back into qA
	*pqA = qProd;
    e01a:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1031

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
	qProd.q2 = pqA->q0 * pqB->q2 - pqA->q1 * pqB->q3 + pqA->q2 * pqB->q0 + pqA->q3 * pqB->q1;
	qProd.q3 = pqA->q0 * pqB->q3 + pqA->q1 * pqB->q2 - pqA->q2 * pqB->q1 + pqA->q3 * pqB->q0;
    e01c:	4658      	mov	r0, fp
    e01e:	f7f2 feb9 	bl	d94 <__aeabi_fmul>
    e022:	4641      	mov	r1, r8
    e024:	4682      	mov	sl, r0
    e026:	4648      	mov	r0, r9
    e028:	f7f2 feb4 	bl	d94 <__aeabi_fmul>
    e02c:	1c01      	adds	r1, r0, #0
    e02e:	4650      	mov	r0, sl
    e030:	f7f2 fb60 	bl	6f4 <__aeabi_fadd>
    e034:	9901      	ldr	r1, [sp, #4]
    e036:	4680      	mov	r8, r0
    e038:	1c38      	adds	r0, r7, #0
    e03a:	f7f2 feab 	bl	d94 <__aeabi_fmul>
    e03e:	1c01      	adds	r1, r0, #0
    e040:	4640      	mov	r0, r8
    e042:	f7f2 ffd1 	bl	fe8 <__aeabi_fsub>
    e046:	1c29      	adds	r1, r5, #0
    e048:	1c07      	adds	r7, r0, #0
    e04a:	1c30      	adds	r0, r6, #0
    e04c:	f7f2 fea2 	bl	d94 <__aeabi_fmul>
    e050:	1c01      	adds	r1, r0, #0
    e052:	1c38      	adds	r0, r7, #0
    e054:	f7f2 fb4e 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1034

	// copy the result back into qA
	*pqA = qProd;
    e058:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1037

	return;
}
    e05a:	b003      	add	sp, #12
    e05c:	bc3c      	pop	{r2, r3, r4, r5}
    e05e:	4690      	mov	r8, r2
    e060:	4699      	mov	r9, r3
    e062:	46a2      	mov	sl, r4
    e064:	46ab      	mov	fp, r5
    e066:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e068 <fqAeqNormqA>:
fqAeqNormqA():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1054
	return qProd;
}

// function normalizes a rotation quaternion and ensures q0 is non-negative
void fqAeqNormqA(struct fquaternion *pqA)
{
    e068:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1058
	float fNorm;					// quaternion Norm

	// calculate the quaternion Norm
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
    e06a:	6801      	ldr	r1, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1054
	return qProd;
}

// function normalizes a rotation quaternion and ensures q0 is non-negative
void fqAeqNormqA(struct fquaternion *pqA)
{
    e06c:	4647      	mov	r7, r8
    e06e:	b480      	push	{r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1058
	float fNorm;					// quaternion Norm

	// calculate the quaternion Norm
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
    e070:	6886      	ldr	r6, [r0, #8]
    e072:	6847      	ldr	r7, [r0, #4]
    e074:	68c5      	ldr	r5, [r0, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1054
	return qProd;
}

// function normalizes a rotation quaternion and ensures q0 is non-negative
void fqAeqNormqA(struct fquaternion *pqA)
{
    e076:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1058
	float fNorm;					// quaternion Norm

	// calculate the quaternion Norm
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
    e078:	1c08      	adds	r0, r1, #0
    e07a:	f7f2 fe8b 	bl	d94 <__aeabi_fmul>
    e07e:	1c39      	adds	r1, r7, #0
    e080:	4680      	mov	r8, r0
    e082:	1c38      	adds	r0, r7, #0
    e084:	f7f2 fe86 	bl	d94 <__aeabi_fmul>
    e088:	1c01      	adds	r1, r0, #0
    e08a:	4640      	mov	r0, r8
    e08c:	f7f2 fb32 	bl	6f4 <__aeabi_fadd>
    e090:	1c31      	adds	r1, r6, #0
    e092:	1c07      	adds	r7, r0, #0
    e094:	1c30      	adds	r0, r6, #0
    e096:	f7f2 fe7d 	bl	d94 <__aeabi_fmul>
    e09a:	1c01      	adds	r1, r0, #0
    e09c:	1c38      	adds	r0, r7, #0
    e09e:	f7f2 fb29 	bl	6f4 <__aeabi_fadd>
    e0a2:	1c29      	adds	r1, r5, #0
    e0a4:	1c06      	adds	r6, r0, #0
    e0a6:	1c28      	adds	r0, r5, #0
    e0a8:	f7f2 fe74 	bl	d94 <__aeabi_fmul>
    e0ac:	1c01      	adds	r1, r0, #0
    e0ae:	1c30      	adds	r0, r6, #0
    e0b0:	f7f2 fb20 	bl	6f4 <__aeabi_fadd>
    e0b4:	f003 fb04 	bl	116c0 <sqrtf>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1059
	if (fNorm > CORRUPTQUAT)
    e0b8:	491f      	ldr	r1, [pc, #124]	; (e138 <fqAeqNormqA+0xd0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1058
void fqAeqNormqA(struct fquaternion *pqA)
{
	float fNorm;					// quaternion Norm

	// calculate the quaternion Norm
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
    e0ba:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1059
	if (fNorm > CORRUPTQUAT)
    e0bc:	f7f2 fb06 	bl	6cc <__aeabi_fcmpgt>
    e0c0:	2800      	cmp	r0, #0
    e0c2:	d030      	beq.n	e126 <fqAeqNormqA+0xbe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1062
	{
		// general case
		fNorm = 1.0F / fNorm;
    e0c4:	20fe      	movs	r0, #254	; 0xfe
    e0c6:	1c29      	adds	r1, r5, #0
    e0c8:	0580      	lsls	r0, r0, #22
    e0ca:	f7f2 fc7f 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1063
		pqA->q0 *= fNorm;
    e0ce:	6821      	ldr	r1, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1062
	// calculate the quaternion Norm
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
	if (fNorm > CORRUPTQUAT)
	{
		// general case
		fNorm = 1.0F / fNorm;
    e0d0:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1063
		pqA->q0 *= fNorm;
    e0d2:	f7f2 fe5f 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1064
		pqA->q1 *= fNorm;
    e0d6:	6861      	ldr	r1, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1063
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
	if (fNorm > CORRUPTQUAT)
	{
		// general case
		fNorm = 1.0F / fNorm;
		pqA->q0 *= fNorm;
    e0d8:	1c06      	adds	r6, r0, #0
    e0da:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1064
		pqA->q1 *= fNorm;
    e0dc:	1c28      	adds	r0, r5, #0
    e0de:	f7f2 fe59 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1065
		pqA->q2 *= fNorm;
    e0e2:	68a1      	ldr	r1, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1064
	if (fNorm > CORRUPTQUAT)
	{
		// general case
		fNorm = 1.0F / fNorm;
		pqA->q0 *= fNorm;
		pqA->q1 *= fNorm;
    e0e4:	6060      	str	r0, [r4, #4]
    e0e6:	4680      	mov	r8, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1065
		pqA->q2 *= fNorm;
    e0e8:	1c28      	adds	r0, r5, #0
    e0ea:	f7f2 fe53 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1066
		pqA->q3 *= fNorm;
    e0ee:	68e1      	ldr	r1, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1065
	{
		// general case
		fNorm = 1.0F / fNorm;
		pqA->q0 *= fNorm;
		pqA->q1 *= fNorm;
		pqA->q2 *= fNorm;
    e0f0:	60a0      	str	r0, [r4, #8]
    e0f2:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1066
		pqA->q3 *= fNorm;
    e0f4:	1c28      	adds	r0, r5, #0
    e0f6:	f7f2 fe4d 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1076
		pqA->q0 = 1.0F;
		pqA->q1 = pqA->q2 = pqA->q3 = 0.0F;
	}

	// correct a negative scalar component if the function was called with negative q0
	if (pqA->q0 < 0.0F)
    e0fa:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1066
		// general case
		fNorm = 1.0F / fNorm;
		pqA->q0 *= fNorm;
		pqA->q1 *= fNorm;
		pqA->q2 *= fNorm;
		pqA->q3 *= fNorm;
    e0fc:	1c05      	adds	r5, r0, #0
    e0fe:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1076
		pqA->q0 = 1.0F;
		pqA->q1 = pqA->q2 = pqA->q3 = 0.0F;
	}

	// correct a negative scalar component if the function was called with negative q0
	if (pqA->q0 < 0.0F)
    e100:	1c30      	adds	r0, r6, #0
    e102:	f7f2 facf 	bl	6a4 <__aeabi_fcmplt>
    e106:	2800      	cmp	r0, #0
    e108:	d00a      	beq.n	e120 <fqAeqNormqA+0xb8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1078
	{
		pqA->q0 = -pqA->q0;
    e10a:	2280      	movs	r2, #128	; 0x80
    e10c:	0612      	lsls	r2, r2, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1079
		pqA->q1 = -pqA->q1;
    e10e:	1c13      	adds	r3, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1078
	}

	// correct a negative scalar component if the function was called with negative q0
	if (pqA->q0 < 0.0F)
	{
		pqA->q0 = -pqA->q0;
    e110:	18b6      	adds	r6, r6, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1079
		pqA->q1 = -pqA->q1;
    e112:	4443      	add	r3, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1080
		pqA->q2 = -pqA->q2;
    e114:	18bf      	adds	r7, r7, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1081
		pqA->q3 = -pqA->q3;
    e116:	18ad      	adds	r5, r5, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1078
	}

	// correct a negative scalar component if the function was called with negative q0
	if (pqA->q0 < 0.0F)
	{
		pqA->q0 = -pqA->q0;
    e118:	6026      	str	r6, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1079
		pqA->q1 = -pqA->q1;
    e11a:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1080
		pqA->q2 = -pqA->q2;
    e11c:	60a7      	str	r7, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1081
		pqA->q3 = -pqA->q3;
    e11e:	60e5      	str	r5, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1085
	}

	return;
}
    e120:	bc04      	pop	{r2}
    e122:	4690      	mov	r8, r2
    e124:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1071
		pqA->q3 *= fNorm;
	}
	else
	{
		// return with identity quaternion since the quaternion is corrupted
		pqA->q0 = 1.0F;
    e126:	23fe      	movs	r3, #254	; 0xfe
    e128:	059b      	lsls	r3, r3, #22
    e12a:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1072
		pqA->q1 = pqA->q2 = pqA->q3 = 0.0F;
    e12c:	2300      	movs	r3, #0
    e12e:	60e3      	str	r3, [r4, #12]
    e130:	60a3      	str	r3, [r4, #8]
    e132:	6063      	str	r3, [r4, #4]
    e134:	e7f4      	b.n	e120 <fqAeqNormqA+0xb8>
    e136:	46c0      	nop			; (mov r8, r8)
    e138:	3a83126f 	.word	0x3a83126f

0000e13c <fqAeq1>:
fqAeq1():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1090
}

// set a quaternion to the unit quaternion
void fqAeq1(struct fquaternion *pqA)
{
	pqA->q0 = 1.0F;
    e13c:	23fe      	movs	r3, #254	; 0xfe
    e13e:	059b      	lsls	r3, r3, #22
    e140:	6003      	str	r3, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1091
	pqA->q1 = pqA->q2 = pqA->q3 = 0.0F;
    e142:	2300      	movs	r3, #0
    e144:	60c3      	str	r3, [r0, #12]
    e146:	6083      	str	r3, [r0, #8]
    e148:	6043      	str	r3, [r0, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/orientation.c:1094

	return;
}
    e14a:	4770      	bx	lr

0000e14c <RdSensData_Init>:
RdSensData_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:99
struct SV_9DOF_GBY_KALMAN thisSV_9DOF_GBY_KALMAN;
#endif

// function initializes the sensors and the sensor data structures
void RdSensData_Init(void)
{
    e14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:118
#endif
	}

	// initialize the physical sensors over I2C
#if defined USE_MPL3115
	globals.iMPL3115Found = MPL3115_Init(I2C_DeviceData, &thisPressure);
    e14e:	4f0f      	ldr	r7, [pc, #60]	; (e18c <RdSensData_Init+0x40>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:106

	// zero sums of sensor data (typically 200Hz) on first execution
	for (i = X; i <= Z; i++)
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] = 0;
    e150:	4e0f      	ldr	r6, [pc, #60]	; (e190 <RdSensData_Init+0x44>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:109
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
		thisMag.iSumBpFast[i] = 0;
    e152:	4d10      	ldr	r5, [pc, #64]	; (e194 <RdSensData_Init+0x48>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:112
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
		thisGyro.iSumYpFast[i] = 0;
    e154:	4c10      	ldr	r4, [pc, #64]	; (e198 <RdSensData_Init+0x4c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:106

	// zero sums of sensor data (typically 200Hz) on first execution
	for (i = X; i <= Z; i++)
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] = 0;
    e156:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:118
#endif
	}

	// initialize the physical sensors over I2C
#if defined USE_MPL3115
	globals.iMPL3115Found = MPL3115_Init(I2C_DeviceData, &thisPressure);
    e158:	69b8      	ldr	r0, [r7, #24]
    e15a:	4910      	ldr	r1, [pc, #64]	; (e19c <RdSensData_Init+0x50>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:106

	// zero sums of sensor data (typically 200Hz) on first execution
	for (i = X; i <= Z; i++)
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] = 0;
    e15c:	6033      	str	r3, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:109
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
		thisMag.iSumBpFast[i] = 0;
    e15e:	602b      	str	r3, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:106

	// zero sums of sensor data (typically 200Hz) on first execution
	for (i = X; i <= Z; i++)
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] = 0;
    e160:	6073      	str	r3, [r6, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:109
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
		thisMag.iSumBpFast[i] = 0;
    e162:	606b      	str	r3, [r5, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:106

	// zero sums of sensor data (typically 200Hz) on first execution
	for (i = X; i <= Z; i++)
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] = 0;
    e164:	60b3      	str	r3, [r6, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:109
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
		thisMag.iSumBpFast[i] = 0;
    e166:	60ab      	str	r3, [r5, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:112
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
		thisGyro.iSumYpFast[i] = 0;
    e168:	6023      	str	r3, [r4, #0]
    e16a:	6063      	str	r3, [r4, #4]
    e16c:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:118
#endif
	}

	// initialize the physical sensors over I2C
#if defined USE_MPL3115
	globals.iMPL3115Found = MPL3115_Init(I2C_DeviceData, &thisPressure);
    e16e:	f7f5 f94f 	bl	3410 <MPL3115_Init>
    e172:	4b0b      	ldr	r3, [pc, #44]	; (e1a0 <RdSensData_Init+0x54>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:121
#endif
#if defined USE_FXOS8700
	FXOS8700_Init(I2C_DeviceData, &thisAccel, &thisMag);
    e174:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:118
#endif
	}

	// initialize the physical sensors over I2C
#if defined USE_MPL3115
	globals.iMPL3115Found = MPL3115_Init(I2C_DeviceData, &thisPressure);
    e176:	7258      	strb	r0, [r3, #9]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:121
#endif
#if defined USE_FXOS8700
	FXOS8700_Init(I2C_DeviceData, &thisAccel, &thisMag);
    e178:	1c2a      	adds	r2, r5, #0
    e17a:	69b8      	ldr	r0, [r7, #24]
    e17c:	f7f5 f9b0 	bl	34e0 <FXOS8700_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:124
#endif
#if defined USE_FXAS21000
	FXAS21000_Init(I2C_DeviceData, &thisGyro);
    e180:	69b8      	ldr	r0, [r7, #24]
    e182:	1c21      	adds	r1, r4, #0
    e184:	f7f5 fa6e 	bl	3664 <FXAS21000_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:137
#if defined USE_MAG3110
	MAG3110_Init(I2C_DeviceData, &thisMag);
#endif

	return;
}
    e188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e18a:	46c0      	nop			; (mov r8, r8)
    e18c:	1fffe218 	.word	0x1fffe218
    e190:	1fffe4a0 	.word	0x1fffe4a0
    e194:	20000370 	.word	0x20000370
    e198:	1ffff654 	.word	0x1ffff654
    e19c:	1ffff174 	.word	0x1ffff174
    e1a0:	1fffe478 	.word	0x1fffe478

0000e1a4 <Fusion_Init>:
Fusion_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:141

// function initializes the sensor fusion and magnetic calibration and sets loopcounter to zero
void Fusion_Init(void)
{
    e1a4:	b510      	push	{r4, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:144
	// magnetic DOF: reset magnetic calibration and magnetometer data buffer (not needed for 3DOF)
#if defined COMPUTE_3DOF_B_BASIC || defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
	fInitMagCalibration(&thisMagCal, &thisMagBuffer);
    e1a6:	480e      	ldr	r0, [pc, #56]	; (e1e0 <Fusion_Init+0x3c>)
    e1a8:	490e      	ldr	r1, [pc, #56]	; (e1e4 <Fusion_Init+0x40>)
    e1aa:	f7fb fb53 	bl	9854 <fInitMagCalibration>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:154
	
	// force a reset of all the algorithms next time they execute
	// the initialization will result in the default and current quaternion being set to the most sophisticated
	// algorithm supported by the build
#if defined COMPUTE_1DOF_P_BASIC
	thisSV_1DOF_P_BASIC.resetflag = true;					
    e1ae:	480e      	ldr	r0, [pc, #56]	; (e1e8 <Fusion_Init+0x44>)
    e1b0:	2301      	movs	r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:157
#endif
#if defined COMPUTE_3DOF_G_BASIC
	thisSV_3DOF_G_BASIC.resetflag = true;				
    e1b2:	4c0e      	ldr	r4, [pc, #56]	; (e1ec <Fusion_Init+0x48>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:154
	
	// force a reset of all the algorithms next time they execute
	// the initialization will result in the default and current quaternion being set to the most sophisticated
	// algorithm supported by the build
#if defined COMPUTE_1DOF_P_BASIC
	thisSV_1DOF_P_BASIC.resetflag = true;					
    e1b4:	7503      	strb	r3, [r0, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:157
#endif
#if defined COMPUTE_3DOF_G_BASIC
	thisSV_3DOF_G_BASIC.resetflag = true;				
    e1b6:	20a0      	movs	r0, #160	; 0xa0
    e1b8:	5423      	strb	r3, [r4, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:160
#endif
#if defined COMPUTE_3DOF_B_BASIC
	thisSV_3DOF_B_BASIC.resetflag = true;	
    e1ba:	4c0d      	ldr	r4, [pc, #52]	; (e1f0 <Fusion_Init+0x4c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:148
#if defined COMPUTE_3DOF_B_BASIC || defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
	fInitMagCalibration(&thisMagCal, &thisMagBuffer);
#endif

	// reset the default quaternion type to the simplest Q3 (it will be updated during the initializations)
	globals.DefaultQuaternionPacketType = Q3;
    e1bc:	4a0d      	ldr	r2, [pc, #52]	; (e1f4 <Fusion_Init+0x50>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:160
#endif
#if defined COMPUTE_3DOF_G_BASIC
	thisSV_3DOF_G_BASIC.resetflag = true;				
#endif
#if defined COMPUTE_3DOF_B_BASIC
	thisSV_3DOF_B_BASIC.resetflag = true;	
    e1be:	5423      	strb	r3, [r4, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:163
#endif
#if defined COMPUTE_3DOF_Y_BASIC
	thisSV_3DOF_Y_BASIC.resetflag = true;				
    e1c0:	4c0d      	ldr	r4, [pc, #52]	; (e1f8 <Fusion_Init+0x54>)
    e1c2:	207c      	movs	r0, #124	; 0x7c
    e1c4:	5423      	strb	r3, [r4, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:166
#endif
#if defined COMPUTE_6DOF_GB_BASIC
	thisSV_6DOF_GB_BASIC.resetflag = true;				
    e1c6:	4c0d      	ldr	r4, [pc, #52]	; (e1fc <Fusion_Init+0x58>)
    e1c8:	20a8      	movs	r0, #168	; 0xa8
    e1ca:	5423      	strb	r3, [r4, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:169
#endif
#if defined COMPUTE_6DOF_GY_KALMAN
	thisSV_6DOF_GY_KALMAN.resetflag = true;
    e1cc:	4c0c      	ldr	r4, [pc, #48]	; (e200 <Fusion_Init+0x5c>)
    e1ce:	480d      	ldr	r0, [pc, #52]	; (e204 <Fusion_Init+0x60>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:148
#if defined COMPUTE_3DOF_B_BASIC || defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
	fInitMagCalibration(&thisMagCal, &thisMagBuffer);
#endif

	// reset the default quaternion type to the simplest Q3 (it will be updated during the initializations)
	globals.DefaultQuaternionPacketType = Q3;
    e1d0:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:169
#endif
#if defined COMPUTE_6DOF_GB_BASIC
	thisSV_6DOF_GB_BASIC.resetflag = true;				
#endif
#if defined COMPUTE_6DOF_GY_KALMAN
	thisSV_6DOF_GY_KALMAN.resetflag = true;
    e1d2:	5423      	strb	r3, [r4, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:172
#endif
#if defined COMPUTE_9DOF_GBY_KALMAN
	thisSV_9DOF_GBY_KALMAN.resetflag = true;
    e1d4:	480c      	ldr	r0, [pc, #48]	; (e208 <Fusion_Init+0x64>)
    e1d6:	4c0d      	ldr	r4, [pc, #52]	; (e20c <Fusion_Init+0x68>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:148
#if defined COMPUTE_3DOF_B_BASIC || defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
	fInitMagCalibration(&thisMagCal, &thisMagBuffer);
#endif

	// reset the default quaternion type to the simplest Q3 (it will be updated during the initializations)
	globals.DefaultQuaternionPacketType = Q3;
    e1d8:	7151      	strb	r1, [r2, #5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:172
#endif
#if defined COMPUTE_6DOF_GY_KALMAN
	thisSV_6DOF_GY_KALMAN.resetflag = true;
#endif
#if defined COMPUTE_9DOF_GBY_KALMAN
	thisSV_9DOF_GBY_KALMAN.resetflag = true;
    e1da:	5423      	strb	r3, [r4, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:176
#endif

	// reset the loop counter to zero for first iteration
	globals.loopcounter = 0;
    e1dc:	60d1      	str	r1, [r2, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:179

	return;
}
    e1de:	bd10      	pop	{r4, pc}
    e1e0:	1ffff23c 	.word	0x1ffff23c
    e1e4:	1fffe578 	.word	0x1fffe578
    e1e8:	1fffe488 	.word	0x1fffe488
    e1ec:	1ffff0d0 	.word	0x1ffff0d0
    e1f0:	1fffe4d4 	.word	0x1fffe4d4
    e1f4:	1fffe478 	.word	0x1fffe478
    e1f8:	200003c8 	.word	0x200003c8
    e1fc:	1ffff190 	.word	0x1ffff190
    e200:	1ffffee0 	.word	0x1ffffee0
    e204:	0000048e 	.word	0x0000048e
    e208:	00000836 	.word	0x00000836
    e20c:	1ffff6a8 	.word	0x1ffff6a8

0000e210 <RdSensData_Run>:
RdSensData_Run():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:183

// this function is called at (typically 200Hz) by MQX to read sensor data
void RdSensData_Run(void)
{
    e210:	b5f0      	push	{r4, r5, r6, r7, lr}
    e212:	4656      	mov	r6, sl
    e214:	465f      	mov	r7, fp
    e216:	464d      	mov	r5, r9
    e218:	4644      	mov	r4, r8
    e21a:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:189
	static int8 iCounter = 0;		// the number of gyro readings summed
	int8 i;							// loop counter

	// read the 200Hz sensor data and apply the HAL
#if defined USE_MPL3115
	if (globals.iMPL3115Found)
    e21c:	4bbf      	ldr	r3, [pc, #764]	; (e51c <RdSensData_Run+0x30c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:183
	return;
}

// this function is called at (typically 200Hz) by MQX to read sensor data
void RdSensData_Run(void)
{
    e21e:	b08f      	sub	sp, #60	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:189
	static int8 iCounter = 0;		// the number of gyro readings summed
	int8 i;							// loop counter

	// read the 200Hz sensor data and apply the HAL
#if defined USE_MPL3115
	if (globals.iMPL3115Found)
    e220:	7a5b      	ldrb	r3, [r3, #9]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:191
	{
		MPL3115_ReadData(I2C_DeviceData, &thisPressure);
    e222:	4ebf      	ldr	r6, [pc, #764]	; (e520 <RdSensData_Run+0x310>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:189
	static int8 iCounter = 0;		// the number of gyro readings summed
	int8 i;							// loop counter

	// read the 200Hz sensor data and apply the HAL
#if defined USE_MPL3115
	if (globals.iMPL3115Found)
    e224:	b25b      	sxtb	r3, r3
    e226:	2b00      	cmp	r3, #0
    e228:	d000      	beq.n	e22c <RdSensData_Run+0x1c>
    e22a:	e172      	b.n	e512 <RdSensData_Run+0x302>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:195
	{
		MPL3115_ReadData(I2C_DeviceData, &thisPressure);
	}
#endif
#if defined USE_FXOS8700
	FXOS8700_ReadData(I2C_DeviceData, &thisAccel, &thisMag);
    e22c:	4dbd      	ldr	r5, [pc, #756]	; (e524 <RdSensData_Run+0x314>)
    e22e:	4cbe      	ldr	r4, [pc, #760]	; (e528 <RdSensData_Run+0x318>)
    e230:	69b0      	ldr	r0, [r6, #24]
    e232:	1c29      	adds	r1, r5, #0
    e234:	1c22      	adds	r2, r4, #0
    e236:	f7f5 fac7 	bl	37c8 <FXOS8700_ReadData>
ApplyAccelHAL():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:500
	itmp16 = thisAccel.iGpFast[X];
	thisAccel.iGpFast[X] = thisAccel.iGpFast[Y];
	thisAccel.iGpFast[Y] = itmp16;
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisAccel.iGpFast[X] = -thisAccel.iGpFast[X];
    e23a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
ApplyMagHAL():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:521
	thisMag.iBpFast[X] = -thisMag.iBpFast[Y];
	thisMag.iBpFast[Y] = -itmp16;
	thisMag.iBpFast[Z] = -thisMag.iBpFast[Z];
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisMag.iBpFast[X] = -thisMag.iBpFast[X];
    e23c:	2044      	movs	r0, #68	; 0x44
ApplyAccelHAL():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:500
	itmp16 = thisAccel.iGpFast[X];
	thisAccel.iGpFast[X] = thisAccel.iGpFast[Y];
	thisAccel.iGpFast[Y] = itmp16;
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisAccel.iGpFast[X] = -thisAccel.iGpFast[X];
    e23e:	425b      	negs	r3, r3
    e240:	852b      	strh	r3, [r5, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:501
	thisAccel.iGpFast[Y] = -thisAccel.iGpFast[Y];
    e242:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
ApplyMagHAL():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:522
	thisMag.iBpFast[Y] = -itmp16;
	thisMag.iBpFast[Z] = -thisMag.iBpFast[Z];
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisMag.iBpFast[X] = -thisMag.iBpFast[X];
	thisMag.iBpFast[Y] = -thisMag.iBpFast[Y];	
    e244:	2746      	movs	r7, #70	; 0x46
ApplyAccelHAL():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:501
	thisAccel.iGpFast[X] = thisAccel.iGpFast[Y];
	thisAccel.iGpFast[Y] = itmp16;
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisAccel.iGpFast[X] = -thisAccel.iGpFast[X];
	thisAccel.iGpFast[Y] = -thisAccel.iGpFast[Y];
    e246:	425b      	negs	r3, r3
    e248:	856b      	strh	r3, [r5, #42]	; 0x2a
ApplyMagHAL():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:521
	thisMag.iBpFast[X] = -thisMag.iBpFast[Y];
	thisMag.iBpFast[Y] = -itmp16;
	thisMag.iBpFast[Z] = -thisMag.iBpFast[Z];
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisMag.iBpFast[X] = -thisMag.iBpFast[X];
    e24a:	5a23      	ldrh	r3, [r4, r0]
    e24c:	4680      	mov	r8, r0
    e24e:	425b      	negs	r3, r3
    e250:	5223      	strh	r3, [r4, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:522
	thisMag.iBpFast[Y] = -thisMag.iBpFast[Y];	
    e252:	5be3      	ldrh	r3, [r4, r7]
RdSensData_Run():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:200
	FXOS8700_ReadData(I2C_DeviceData, &thisAccel, &thisMag);
	ApplyAccelHAL(&thisAccel);
	ApplyMagHAL(&thisMag);
#endif
#if defined USE_FXAS21000
	FXAS21000_ReadData(I2C_DeviceData, &thisGyro, iCounter);
    e254:	69b0      	ldr	r0, [r6, #24]
ApplyMagHAL():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:522
	thisMag.iBpFast[Y] = -itmp16;
	thisMag.iBpFast[Z] = -thisMag.iBpFast[Z];
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisMag.iBpFast[X] = -thisMag.iBpFast[X];
	thisMag.iBpFast[Y] = -thisMag.iBpFast[Y];	
    e256:	425b      	negs	r3, r3
RdSensData_Run():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:200
	FXOS8700_ReadData(I2C_DeviceData, &thisAccel, &thisMag);
	ApplyAccelHAL(&thisAccel);
	ApplyMagHAL(&thisMag);
#endif
#if defined USE_FXAS21000
	FXAS21000_ReadData(I2C_DeviceData, &thisGyro, iCounter);
    e258:	4eb4      	ldr	r6, [pc, #720]	; (e52c <RdSensData_Run+0x31c>)
ApplyMagHAL():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:522
	thisMag.iBpFast[Y] = -itmp16;
	thisMag.iBpFast[Z] = -thisMag.iBpFast[Z];
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisMag.iBpFast[X] = -thisMag.iBpFast[X];
	thisMag.iBpFast[Y] = -thisMag.iBpFast[Y];	
    e25a:	53e3      	strh	r3, [r4, r7]
RdSensData_Run():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:200
	FXOS8700_ReadData(I2C_DeviceData, &thisAccel, &thisMag);
	ApplyAccelHAL(&thisAccel);
	ApplyMagHAL(&thisMag);
#endif
#if defined USE_FXAS21000
	FXAS21000_ReadData(I2C_DeviceData, &thisGyro, iCounter);
    e25c:	4bb4      	ldr	r3, [pc, #720]	; (e530 <RdSensData_Run+0x320>)
    e25e:	2200      	movs	r2, #0
    e260:	469a      	mov	sl, r3
    e262:	569a      	ldrsb	r2, [r3, r2]
    e264:	1c31      	adds	r1, r6, #0
    e266:	f7f5 fb43 	bl	38f0 <FXAS21000_ReadData>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:201
	ApplyGyroHAL(&thisGyro, iCounter);
    e26a:	4652      	mov	r2, sl
    e26c:	7812      	ldrb	r2, [r2, #0]
ApplyGyroHAL():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:548
	thisGyro.iYpFast[irow][X] = -thisGyro.iYpFast[irow][Y];
	thisGyro.iYpFast[irow][Y] = -itmp16;
	thisGyro.iYpFast[irow][Z] = -thisGyro.iYpFast[irow][Z];
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisGyro.iYpFast[irow][X] = -thisGyro.iYpFast[irow][X];
    e26e:	b253      	sxtb	r3, r2
RdSensData_Run():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:201
	ApplyAccelHAL(&thisAccel);
	ApplyMagHAL(&thisMag);
#endif
#if defined USE_FXAS21000
	FXAS21000_ReadData(I2C_DeviceData, &thisGyro, iCounter);
	ApplyGyroHAL(&thisGyro, iCounter);
    e270:	4693      	mov	fp, r2
ApplyGyroHAL():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:548
	thisGyro.iYpFast[irow][X] = -thisGyro.iYpFast[irow][Y];
	thisGyro.iYpFast[irow][Y] = -itmp16;
	thisGyro.iYpFast[irow][Z] = -thisGyro.iYpFast[irow][Z];
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisGyro.iYpFast[irow][X] = -thisGyro.iYpFast[irow][X];
    e272:	005a      	lsls	r2, r3, #1
    e274:	18d3      	adds	r3, r2, r3
    e276:	005b      	lsls	r3, r3, #1
    e278:	18f3      	adds	r3, r6, r3
    e27a:	8b98      	ldrh	r0, [r3, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:549
	thisGyro.iYpFast[irow][Y] = -thisGyro.iYpFast[irow][Y];
    e27c:	1c1a      	adds	r2, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:548
	thisGyro.iYpFast[irow][X] = -thisGyro.iYpFast[irow][Y];
	thisGyro.iYpFast[irow][Y] = -itmp16;
	thisGyro.iYpFast[irow][Z] = -thisGyro.iYpFast[irow][Z];
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisGyro.iYpFast[irow][X] = -thisGyro.iYpFast[irow][X];
    e27e:	4240      	negs	r0, r0
    e280:	9000      	str	r0, [sp, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:549
	thisGyro.iYpFast[irow][Y] = -thisGyro.iYpFast[irow][Y];
    e282:	8bd9      	ldrh	r1, [r3, #30]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:548
	thisGyro.iYpFast[irow][X] = -thisGyro.iYpFast[irow][Y];
	thisGyro.iYpFast[irow][Y] = -itmp16;
	thisGyro.iYpFast[irow][Z] = -thisGyro.iYpFast[irow][Z];
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisGyro.iYpFast[irow][X] = -thisGyro.iYpFast[irow][X];
    e284:	8398      	strh	r0, [r3, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:549
	thisGyro.iYpFast[irow][Y] = -thisGyro.iYpFast[irow][Y];
    e286:	4249      	negs	r1, r1
    e288:	83d1      	strh	r1, [r2, #30]
RdSensData_Run():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:220

	// sum the 200Hz HAL-aligned sensor data
	for (i = X; i <= Z; i++)
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] += (int32) thisAccel.iGpFast[i];
    e28a:	2028      	movs	r0, #40	; 0x28
    e28c:	5e29      	ldrsh	r1, [r5, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:223
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
		thisMag.iSumBpFast[i] += (int32) thisMag.iBpFast[i];
    e28e:	4640      	mov	r0, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:220

	// sum the 200Hz HAL-aligned sensor data
	for (i = X; i <= Z; i++)
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] += (int32) thisAccel.iGpFast[i];
    e290:	910a      	str	r1, [sp, #40]	; 0x28
    e292:	6829      	ldr	r1, [r5, #0]
ApplyGyroHAL():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:549
	thisGyro.iYpFast[irow][Y] = -itmp16;
	thisGyro.iYpFast[irow][Z] = -thisGyro.iYpFast[irow][Z];
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisGyro.iYpFast[irow][X] = -thisGyro.iYpFast[irow][X];
	thisGyro.iYpFast[irow][Y] = -thisGyro.iYpFast[irow][Y];
    e294:	321a      	adds	r2, #26
RdSensData_Run():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:220

	// sum the 200Hz HAL-aligned sensor data
	for (i = X; i <= Z; i++)
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] += (int32) thisAccel.iGpFast[i];
    e296:	4689      	mov	r9, r1
    e298:	990a      	ldr	r1, [sp, #40]	; 0x28
    e29a:	4489      	add	r9, r1
    e29c:	4649      	mov	r1, r9
    e29e:	6029      	str	r1, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:223
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
		thisMag.iSumBpFast[i] += (int32) thisMag.iBpFast[i];
    e2a0:	5e20      	ldrsh	r0, [r4, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:226
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
		thisGyro.iSumYpFast[i] += (int32) thisGyro.iYpFast[iCounter][i];
    e2a2:	9900      	ldr	r1, [sp, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:223
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] += (int32) thisAccel.iGpFast[i];
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
		thisMag.iSumBpFast[i] += (int32) thisMag.iBpFast[i];
    e2a4:	9008      	str	r0, [sp, #32]
    e2a6:	6820      	ldr	r0, [r4, #0]
    e2a8:	4680      	mov	r8, r0
    e2aa:	9808      	ldr	r0, [sp, #32]
    e2ac:	4480      	add	r8, r0
    e2ae:	4640      	mov	r0, r8
    e2b0:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:226
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
		thisGyro.iSumYpFast[i] += (int32) thisGyro.iYpFast[iCounter][i];
    e2b2:	b208      	sxth	r0, r1
    e2b4:	6831      	ldr	r1, [r6, #0]
    e2b6:	1808      	adds	r0, r1, r0
    e2b8:	9000      	str	r0, [sp, #0]
    e2ba:	6030      	str	r0, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:220

	// sum the 200Hz HAL-aligned sensor data
	for (i = X; i <= Z; i++)
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] += (int32) thisAccel.iGpFast[i];
    e2bc:	212a      	movs	r1, #42	; 0x2a
    e2be:	5e68      	ldrsh	r0, [r5, r1]
    e2c0:	6869      	ldr	r1, [r5, #4]
    e2c2:	900b      	str	r0, [sp, #44]	; 0x2c
    e2c4:	1808      	adds	r0, r1, r0
    e2c6:	9001      	str	r0, [sp, #4]
    e2c8:	6068      	str	r0, [r5, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:223
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
		thisMag.iSumBpFast[i] += (int32) thisMag.iBpFast[i];
    e2ca:	5fe0      	ldrsh	r0, [r4, r7]
    e2cc:	6861      	ldr	r1, [r4, #4]
    e2ce:	9009      	str	r0, [sp, #36]	; 0x24
    e2d0:	1808      	adds	r0, r1, r0
    e2d2:	9002      	str	r0, [sp, #8]
    e2d4:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:226
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
		thisGyro.iSumYpFast[i] += (int32) thisGyro.iYpFast[iCounter][i];
    e2d6:	2004      	movs	r0, #4
    e2d8:	5e12      	ldrsh	r2, [r2, r0]
    e2da:	6871      	ldr	r1, [r6, #4]
    e2dc:	188a      	adds	r2, r1, r2
    e2de:	9203      	str	r2, [sp, #12]
    e2e0:	6072      	str	r2, [r6, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:220

	// sum the 200Hz HAL-aligned sensor data
	for (i = X; i <= Z; i++)
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] += (int32) thisAccel.iGpFast[i];
    e2e2:	202c      	movs	r0, #44	; 0x2c
    e2e4:	5e2a      	ldrsh	r2, [r5, r0]
    e2e6:	68a9      	ldr	r1, [r5, #8]
    e2e8:	920c      	str	r2, [sp, #48]	; 0x30
    e2ea:	1889      	adds	r1, r1, r2
    e2ec:	9104      	str	r1, [sp, #16]
    e2ee:	60a9      	str	r1, [r5, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:223
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
		thisMag.iSumBpFast[i] += (int32) thisMag.iBpFast[i];
    e2f0:	2248      	movs	r2, #72	; 0x48
    e2f2:	5ea0      	ldrsh	r0, [r4, r2]
    e2f4:	68a2      	ldr	r2, [r4, #8]
    e2f6:	9007      	str	r0, [sp, #28]
    e2f8:	1812      	adds	r2, r2, r0
    e2fa:	9205      	str	r2, [sp, #20]
    e2fc:	60a2      	str	r2, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:226
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
		thisGyro.iSumYpFast[i] += (int32) thisGyro.iYpFast[iCounter][i];
    e2fe:	2020      	movs	r0, #32
    e300:	5e1b      	ldrsh	r3, [r3, r0]
    e302:	68b1      	ldr	r1, [r6, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:231
#endif
	}

	// increment the decimation counter for the next iteration
	iCounter++;
    e304:	4652      	mov	r2, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:226
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
		thisMag.iSumBpFast[i] += (int32) thisMag.iBpFast[i];
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
		thisGyro.iSumYpFast[i] += (int32) thisGyro.iYpFast[iCounter][i];
    e306:	18cb      	adds	r3, r1, r3
    e308:	9306      	str	r3, [sp, #24]
    e30a:	60b3      	str	r3, [r6, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:231
#endif
	}

	// increment the decimation counter for the next iteration
	iCounter++;
    e30c:	465b      	mov	r3, fp
    e30e:	3301      	adds	r3, #1
    e310:	b2db      	uxtb	r3, r3
    e312:	7013      	strb	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:234

	// every OVERSAMPLE_RATIO iterations process the summed over-sampled readings
	if (iCounter == OVERSAMPLE_RATIO)
    e314:	2b08      	cmp	r3, #8
    e316:	d000      	beq.n	e31a <RdSensData_Run+0x10a>
    e318:	e0f4      	b.n	e504 <RdSensData_Run+0x2f4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:239
	{
#if defined USE_MPL3115
		// for pressure and temperature, use the most recent measurement in preference to averaging
		// since the MPL3115 is configured for maximum 512 sample over-sampling already
		thisPressure.iHp = thisPressure.iHpFast;;
    e31a:	4f86      	ldr	r7, [pc, #536]	; (e534 <RdSensData_Run+0x324>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:240
		thisPressure.iTp = thisPressure.iTpFast;
    e31c:	8b7b      	ldrh	r3, [r7, #26]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:239
	if (iCounter == OVERSAMPLE_RATIO)
	{
#if defined USE_MPL3115
		// for pressure and temperature, use the most recent measurement in preference to averaging
		// since the MPL3115 is configured for maximum 512 sample over-sampling already
		thisPressure.iHp = thisPressure.iHpFast;;
    e31e:	6838      	ldr	r0, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:240
		thisPressure.iTp = thisPressure.iTpFast;
    e320:	833b      	strh	r3, [r7, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:239
	if (iCounter == OVERSAMPLE_RATIO)
	{
#if defined USE_MPL3115
		// for pressure and temperature, use the most recent measurement in preference to averaging
		// since the MPL3115 is configured for maximum 512 sample over-sampling already
		thisPressure.iHp = thisPressure.iHpFast;;
    e322:	6078      	str	r0, [r7, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:240
		thisPressure.iTp = thisPressure.iTpFast;
    e324:	469b      	mov	fp, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:241
		thisPressure.fHp = (float) thisPressure.iHp * thisPressure.fmPerCount;
    e326:	f7f2 fff5 	bl	1314 <__aeabi_i2f>
    e32a:	6939      	ldr	r1, [r7, #16]
    e32c:	f7f2 fd32 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:242
		thisPressure.fTp = (float) thisPressure.iTp * thisPressure.fCPerCount;
    e330:	465a      	mov	r2, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:241
#if defined USE_MPL3115
		// for pressure and temperature, use the most recent measurement in preference to averaging
		// since the MPL3115 is configured for maximum 512 sample over-sampling already
		thisPressure.iHp = thisPressure.iHpFast;;
		thisPressure.iTp = thisPressure.iTpFast;
		thisPressure.fHp = (float) thisPressure.iHp * thisPressure.fmPerCount;
    e332:	60b8      	str	r0, [r7, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:242
		thisPressure.fTp = (float) thisPressure.iTp * thisPressure.fCPerCount;
    e334:	b210      	sxth	r0, r2
    e336:	f7f2 ffed 	bl	1314 <__aeabi_i2f>
    e33a:	6979      	ldr	r1, [r7, #20]
    e33c:	f7f2 fd2a 	bl	d94 <__aeabi_fmul>
    e340:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e342:	60f8      	str	r0, [r7, #12]
    e344:	69b0      	ldr	r0, [r6, #24]
    e346:	469b      	mov	fp, r3
    e348:	900d      	str	r0, [sp, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:250
		// process the HAL-aligned sensor measurements prior to calling the sensor fusion
		for (i = X; i <= Z; i++)
		{
#if defined USE_FXOS8700 || defined USE_MMA8652
			// calculate the fast accelerometer reading for the Kalman filters (to reduce phase errors)
			thisAccel.fGpFast[i] = (float) thisAccel.iGpFast[i] * thisAccel.fgPerCount;
    e34a:	980a      	ldr	r0, [sp, #40]	; 0x28
    e34c:	f7f2 ffe2 	bl	1314 <__aeabi_i2f>
    e350:	4659      	mov	r1, fp
    e352:	f7f2 fd1f 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:252
			// calculate the average (typically 25Hz) accelerometer reading
			thisAccel.iGp[i] = (int16)(thisAccel.iSumGpFast[i] / OVERSAMPLE_RATIO);
    e356:	4649      	mov	r1, r9
    e358:	17cb      	asrs	r3, r1, #31
    e35a:	0f5b      	lsrs	r3, r3, #29
    e35c:	444b      	add	r3, r9
    e35e:	10db      	asrs	r3, r3, #3
    e360:	85eb      	strh	r3, [r5, #46]	; 0x2e
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:250
		// process the HAL-aligned sensor measurements prior to calling the sensor fusion
		for (i = X; i <= Z; i++)
		{
#if defined USE_FXOS8700 || defined USE_MMA8652
			// calculate the fast accelerometer reading for the Kalman filters (to reduce phase errors)
			thisAccel.fGpFast[i] = (float) thisAccel.iGpFast[i] * thisAccel.fgPerCount;
    e362:	60e8      	str	r0, [r5, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:253
			// calculate the average (typically 25Hz) accelerometer reading
			thisAccel.iGp[i] = (int16)(thisAccel.iSumGpFast[i] / OVERSAMPLE_RATIO);
			thisAccel.fGp[i] = (float) thisAccel.iSumGpFast[i] * thisAccel.fgPerCount / (float) OVERSAMPLE_RATIO;
    e364:	4648      	mov	r0, r9
    e366:	f7f2 ffd5 	bl	1314 <__aeabi_i2f>
    e36a:	4659      	mov	r1, fp
    e36c:	f7f2 fd12 	bl	d94 <__aeabi_fmul>
    e370:	21f8      	movs	r1, #248	; 0xf8
    e372:	0589      	lsls	r1, r1, #22
    e374:	f7f2 fd0e 	bl	d94 <__aeabi_fmul>
    e378:	6be7      	ldr	r7, [r4, #60]	; 0x3c
    e37a:	61a8      	str	r0, [r5, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:257
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
			// calculate the fast magnetometer reading for the Kalman filters (to reduce phase errors)
			thisMag.fBpFast[i] = (float) thisMag.iBpFast[i] * thisMag.fuTPerCount;
    e37c:	9808      	ldr	r0, [sp, #32]
    e37e:	f7f2 ffc9 	bl	1314 <__aeabi_i2f>
    e382:	1c39      	adds	r1, r7, #0
    e384:	f7f2 fd06 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:259
			// calculate the average (typically 25Hz) magnetometer reading
			thisMag.iBp[i] = (int16)(thisMag.iSumBpFast[i] / OVERSAMPLE_RATIO);
    e388:	4643      	mov	r3, r8
    e38a:	17da      	asrs	r2, r3, #31
    e38c:	0f52      	lsrs	r2, r2, #29
    e38e:	4442      	add	r2, r8
    e390:	10d2      	asrs	r2, r2, #3
    e392:	234a      	movs	r3, #74	; 0x4a
    e394:	52e2      	strh	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:257
			thisAccel.iGp[i] = (int16)(thisAccel.iSumGpFast[i] / OVERSAMPLE_RATIO);
			thisAccel.fGp[i] = (float) thisAccel.iSumGpFast[i] * thisAccel.fgPerCount / (float) OVERSAMPLE_RATIO;
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
			// calculate the fast magnetometer reading for the Kalman filters (to reduce phase errors)
			thisMag.fBpFast[i] = (float) thisMag.iBpFast[i] * thisMag.fuTPerCount;
    e396:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:260
			// calculate the average (typically 25Hz) magnetometer reading
			thisMag.iBp[i] = (int16)(thisMag.iSumBpFast[i] / OVERSAMPLE_RATIO);
			thisMag.fBp[i] = (float) thisMag.iSumBpFast[i] * thisMag.fuTPerCount / (float) OVERSAMPLE_RATIO;
    e398:	4640      	mov	r0, r8
    e39a:	f7f2 ffbb 	bl	1314 <__aeabi_i2f>
    e39e:	1c39      	adds	r1, r7, #0
    e3a0:	f7f2 fcf8 	bl	d94 <__aeabi_fmul>
    e3a4:	21f8      	movs	r1, #248	; 0xf8
    e3a6:	0589      	lsls	r1, r1, #22
    e3a8:	f7f2 fcf4 	bl	d94 <__aeabi_fmul>
    e3ac:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:264
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			// calculate the average (typically 25Hz) gyro reading
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
    e3ae:	9800      	ldr	r0, [sp, #0]
    e3b0:	214c      	movs	r1, #76	; 0x4c
    e3b2:	17c3      	asrs	r3, r0, #31
    e3b4:	0f5b      	lsrs	r3, r3, #29
    e3b6:	181b      	adds	r3, r3, r0
    e3b8:	10db      	asrs	r3, r3, #3
    e3ba:	5273      	strh	r3, [r6, r1]
    e3bc:	4689      	mov	r9, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:265
			thisGyro.fYp[i] = (float) thisGyro.iSumYpFast[i] * thisGyro.fDegPerSecPerCount / (float) OVERSAMPLE_RATIO;
    e3be:	f7f2 ffa9 	bl	1314 <__aeabi_i2f>
    e3c2:	990d      	ldr	r1, [sp, #52]	; 0x34
    e3c4:	f7f2 fce6 	bl	d94 <__aeabi_fmul>
    e3c8:	21f8      	movs	r1, #248	; 0xf8
    e3ca:	0589      	lsls	r1, r1, #22
    e3cc:	f7f2 fce2 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:269
#endif
			// zero the sensor sums for the next iteration
#if defined USE_FXOS8700 || defined USE_MMA8652
			thisAccel.iSumGpFast[i] = 0;
    e3d0:	2300      	movs	r3, #0
    e3d2:	602b      	str	r3, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:272
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
			thisMag.iSumBpFast[i] = 0;
    e3d4:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:275
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			thisGyro.iSumYpFast[i] = 0;
    e3d6:	6033      	str	r3, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:265
			thisMag.fBp[i] = (float) thisMag.iSumBpFast[i] * thisMag.fuTPerCount / (float) OVERSAMPLE_RATIO;
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			// calculate the average (typically 25Hz) gyro reading
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
			thisGyro.fYp[i] = (float) thisGyro.iSumYpFast[i] * thisGyro.fDegPerSecPerCount / (float) OVERSAMPLE_RATIO;
    e3d8:	60f0      	str	r0, [r6, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:250
		// process the HAL-aligned sensor measurements prior to calling the sensor fusion
		for (i = X; i <= Z; i++)
		{
#if defined USE_FXOS8700 || defined USE_MMA8652
			// calculate the fast accelerometer reading for the Kalman filters (to reduce phase errors)
			thisAccel.fGpFast[i] = (float) thisAccel.iGpFast[i] * thisAccel.fgPerCount;
    e3da:	980b      	ldr	r0, [sp, #44]	; 0x2c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:269
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
			thisGyro.fYp[i] = (float) thisGyro.iSumYpFast[i] * thisGyro.fDegPerSecPerCount / (float) OVERSAMPLE_RATIO;
#endif
			// zero the sensor sums for the next iteration
#if defined USE_FXOS8700 || defined USE_MMA8652
			thisAccel.iSumGpFast[i] = 0;
    e3dc:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:250
		// process the HAL-aligned sensor measurements prior to calling the sensor fusion
		for (i = X; i <= Z; i++)
		{
#if defined USE_FXOS8700 || defined USE_MMA8652
			// calculate the fast accelerometer reading for the Kalman filters (to reduce phase errors)
			thisAccel.fGpFast[i] = (float) thisAccel.iGpFast[i] * thisAccel.fgPerCount;
    e3de:	f7f2 ff99 	bl	1314 <__aeabi_i2f>
    e3e2:	4659      	mov	r1, fp
    e3e4:	f7f2 fcd6 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:252
			// calculate the average (typically 25Hz) accelerometer reading
			thisAccel.iGp[i] = (int16)(thisAccel.iSumGpFast[i] / OVERSAMPLE_RATIO);
    e3e8:	9901      	ldr	r1, [sp, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:250
		// process the HAL-aligned sensor measurements prior to calling the sensor fusion
		for (i = X; i <= Z; i++)
		{
#if defined USE_FXOS8700 || defined USE_MMA8652
			// calculate the fast accelerometer reading for the Kalman filters (to reduce phase errors)
			thisAccel.fGpFast[i] = (float) thisAccel.iGpFast[i] * thisAccel.fgPerCount;
    e3ea:	6128      	str	r0, [r5, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:252
			// calculate the average (typically 25Hz) accelerometer reading
			thisAccel.iGp[i] = (int16)(thisAccel.iSumGpFast[i] / OVERSAMPLE_RATIO);
    e3ec:	17cb      	asrs	r3, r1, #31
    e3ee:	0f5b      	lsrs	r3, r3, #29
    e3f0:	185b      	adds	r3, r3, r1
    e3f2:	10db      	asrs	r3, r3, #3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:253
			thisAccel.fGp[i] = (float) thisAccel.iSumGpFast[i] * thisAccel.fgPerCount / (float) OVERSAMPLE_RATIO;
    e3f4:	1c08      	adds	r0, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:252
		{
#if defined USE_FXOS8700 || defined USE_MMA8652
			// calculate the fast accelerometer reading for the Kalman filters (to reduce phase errors)
			thisAccel.fGpFast[i] = (float) thisAccel.iGpFast[i] * thisAccel.fgPerCount;
			// calculate the average (typically 25Hz) accelerometer reading
			thisAccel.iGp[i] = (int16)(thisAccel.iSumGpFast[i] / OVERSAMPLE_RATIO);
    e3f6:	862b      	strh	r3, [r5, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:253
			thisAccel.fGp[i] = (float) thisAccel.iSumGpFast[i] * thisAccel.fgPerCount / (float) OVERSAMPLE_RATIO;
    e3f8:	f7f2 ff8c 	bl	1314 <__aeabi_i2f>
    e3fc:	4659      	mov	r1, fp
    e3fe:	f7f2 fcc9 	bl	d94 <__aeabi_fmul>
    e402:	21f8      	movs	r1, #248	; 0xf8
    e404:	0589      	lsls	r1, r1, #22
    e406:	f7f2 fcc5 	bl	d94 <__aeabi_fmul>
    e40a:	61e8      	str	r0, [r5, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:257
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
			// calculate the fast magnetometer reading for the Kalman filters (to reduce phase errors)
			thisMag.fBpFast[i] = (float) thisMag.iBpFast[i] * thisMag.fuTPerCount;
    e40c:	9809      	ldr	r0, [sp, #36]	; 0x24
    e40e:	f7f2 ff81 	bl	1314 <__aeabi_i2f>
    e412:	1c39      	adds	r1, r7, #0
    e414:	f7f2 fcbe 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:259
			// calculate the average (typically 25Hz) magnetometer reading
			thisMag.iBp[i] = (int16)(thisMag.iSumBpFast[i] / OVERSAMPLE_RATIO);
    e418:	9a02      	ldr	r2, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:257
			thisAccel.iGp[i] = (int16)(thisAccel.iSumGpFast[i] / OVERSAMPLE_RATIO);
			thisAccel.fGp[i] = (float) thisAccel.iSumGpFast[i] * thisAccel.fgPerCount / (float) OVERSAMPLE_RATIO;
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
			// calculate the fast magnetometer reading for the Kalman filters (to reduce phase errors)
			thisMag.fBpFast[i] = (float) thisMag.iBpFast[i] * thisMag.fuTPerCount;
    e41a:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:259
			// calculate the average (typically 25Hz) magnetometer reading
			thisMag.iBp[i] = (int16)(thisMag.iSumBpFast[i] / OVERSAMPLE_RATIO);
    e41c:	17d3      	asrs	r3, r2, #31
    e41e:	0f5b      	lsrs	r3, r3, #29
    e420:	189b      	adds	r3, r3, r2
    e422:	10db      	asrs	r3, r3, #3
    e424:	4648      	mov	r0, r9
    e426:	5223      	strh	r3, [r4, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:260
			thisMag.fBp[i] = (float) thisMag.iSumBpFast[i] * thisMag.fuTPerCount / (float) OVERSAMPLE_RATIO;
    e428:	1c10      	adds	r0, r2, #0
    e42a:	f7f2 ff73 	bl	1314 <__aeabi_i2f>
    e42e:	1c39      	adds	r1, r7, #0
    e430:	f7f2 fcb0 	bl	d94 <__aeabi_fmul>
    e434:	21f8      	movs	r1, #248	; 0xf8
    e436:	0589      	lsls	r1, r1, #22
    e438:	f7f2 fcac 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:264
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			// calculate the average (typically 25Hz) gyro reading
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
    e43c:	9903      	ldr	r1, [sp, #12]
    e43e:	224e      	movs	r2, #78	; 0x4e
    e440:	17cb      	asrs	r3, r1, #31
    e442:	0f5b      	lsrs	r3, r3, #29
    e444:	185b      	adds	r3, r3, r1
    e446:	10db      	asrs	r3, r3, #3
    e448:	52b3      	strh	r3, [r6, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:260
#if defined USE_FXOS8700 || defined USE_MAG3110
			// calculate the fast magnetometer reading for the Kalman filters (to reduce phase errors)
			thisMag.fBpFast[i] = (float) thisMag.iBpFast[i] * thisMag.fuTPerCount;
			// calculate the average (typically 25Hz) magnetometer reading
			thisMag.iBp[i] = (int16)(thisMag.iSumBpFast[i] / OVERSAMPLE_RATIO);
			thisMag.fBp[i] = (float) thisMag.iSumBpFast[i] * thisMag.fuTPerCount / (float) OVERSAMPLE_RATIO;
    e44a:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:265
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			// calculate the average (typically 25Hz) gyro reading
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
			thisGyro.fYp[i] = (float) thisGyro.iSumYpFast[i] * thisGyro.fDegPerSecPerCount / (float) OVERSAMPLE_RATIO;
    e44c:	1c08      	adds	r0, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:264
			thisMag.iBp[i] = (int16)(thisMag.iSumBpFast[i] / OVERSAMPLE_RATIO);
			thisMag.fBp[i] = (float) thisMag.iSumBpFast[i] * thisMag.fuTPerCount / (float) OVERSAMPLE_RATIO;
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			// calculate the average (typically 25Hz) gyro reading
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
    e44e:	4691      	mov	r9, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:265
			thisGyro.fYp[i] = (float) thisGyro.iSumYpFast[i] * thisGyro.fDegPerSecPerCount / (float) OVERSAMPLE_RATIO;
    e450:	f7f2 ff60 	bl	1314 <__aeabi_i2f>
    e454:	990d      	ldr	r1, [sp, #52]	; 0x34
    e456:	f7f2 fc9d 	bl	d94 <__aeabi_fmul>
    e45a:	21f8      	movs	r1, #248	; 0xf8
    e45c:	0589      	lsls	r1, r1, #22
    e45e:	f7f2 fc99 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:269
#endif
			// zero the sensor sums for the next iteration
#if defined USE_FXOS8700 || defined USE_MMA8652
			thisAccel.iSumGpFast[i] = 0;
    e462:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:265
			thisMag.fBp[i] = (float) thisMag.iSumBpFast[i] * thisMag.fuTPerCount / (float) OVERSAMPLE_RATIO;
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			// calculate the average (typically 25Hz) gyro reading
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
			thisGyro.fYp[i] = (float) thisGyro.iSumYpFast[i] * thisGyro.fDegPerSecPerCount / (float) OVERSAMPLE_RATIO;
    e464:	6130      	str	r0, [r6, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:269
#endif
			// zero the sensor sums for the next iteration
#if defined USE_FXOS8700 || defined USE_MMA8652
			thisAccel.iSumGpFast[i] = 0;
    e466:	6069      	str	r1, [r5, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:272
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
			thisMag.iSumBpFast[i] = 0;
    e468:	6061      	str	r1, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:275
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			thisGyro.iSumYpFast[i] = 0;
    e46a:	6071      	str	r1, [r6, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:250
		// process the HAL-aligned sensor measurements prior to calling the sensor fusion
		for (i = X; i <= Z; i++)
		{
#if defined USE_FXOS8700 || defined USE_MMA8652
			// calculate the fast accelerometer reading for the Kalman filters (to reduce phase errors)
			thisAccel.fGpFast[i] = (float) thisAccel.iGpFast[i] * thisAccel.fgPerCount;
    e46c:	980c      	ldr	r0, [sp, #48]	; 0x30
    e46e:	f7f2 ff51 	bl	1314 <__aeabi_i2f>
    e472:	4659      	mov	r1, fp
    e474:	f7f2 fc8e 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:252
			// calculate the average (typically 25Hz) accelerometer reading
			thisAccel.iGp[i] = (int16)(thisAccel.iSumGpFast[i] / OVERSAMPLE_RATIO);
    e478:	9a04      	ldr	r2, [sp, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:250
		// process the HAL-aligned sensor measurements prior to calling the sensor fusion
		for (i = X; i <= Z; i++)
		{
#if defined USE_FXOS8700 || defined USE_MMA8652
			// calculate the fast accelerometer reading for the Kalman filters (to reduce phase errors)
			thisAccel.fGpFast[i] = (float) thisAccel.iGpFast[i] * thisAccel.fgPerCount;
    e47a:	6168      	str	r0, [r5, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:252
			// calculate the average (typically 25Hz) accelerometer reading
			thisAccel.iGp[i] = (int16)(thisAccel.iSumGpFast[i] / OVERSAMPLE_RATIO);
    e47c:	17d3      	asrs	r3, r2, #31
    e47e:	0f5b      	lsrs	r3, r3, #29
    e480:	189b      	adds	r3, r3, r2
    e482:	10db      	asrs	r3, r3, #3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:253
			thisAccel.fGp[i] = (float) thisAccel.iSumGpFast[i] * thisAccel.fgPerCount / (float) OVERSAMPLE_RATIO;
    e484:	1c10      	adds	r0, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:252
		{
#if defined USE_FXOS8700 || defined USE_MMA8652
			// calculate the fast accelerometer reading for the Kalman filters (to reduce phase errors)
			thisAccel.fGpFast[i] = (float) thisAccel.iGpFast[i] * thisAccel.fgPerCount;
			// calculate the average (typically 25Hz) accelerometer reading
			thisAccel.iGp[i] = (int16)(thisAccel.iSumGpFast[i] / OVERSAMPLE_RATIO);
    e486:	866b      	strh	r3, [r5, #50]	; 0x32
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:253
			thisAccel.fGp[i] = (float) thisAccel.iSumGpFast[i] * thisAccel.fgPerCount / (float) OVERSAMPLE_RATIO;
    e488:	f7f2 ff44 	bl	1314 <__aeabi_i2f>
    e48c:	4659      	mov	r1, fp
    e48e:	f7f2 fc81 	bl	d94 <__aeabi_fmul>
    e492:	21f8      	movs	r1, #248	; 0xf8
    e494:	0589      	lsls	r1, r1, #22
    e496:	f7f2 fc7d 	bl	d94 <__aeabi_fmul>
    e49a:	6228      	str	r0, [r5, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:257
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
			// calculate the fast magnetometer reading for the Kalman filters (to reduce phase errors)
			thisMag.fBpFast[i] = (float) thisMag.iBpFast[i] * thisMag.fuTPerCount;
    e49c:	9807      	ldr	r0, [sp, #28]
    e49e:	f7f2 ff39 	bl	1314 <__aeabi_i2f>
    e4a2:	1c39      	adds	r1, r7, #0
    e4a4:	f7f2 fc76 	bl	d94 <__aeabi_fmul>
    e4a8:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:259
			// calculate the average (typically 25Hz) magnetometer reading
			thisMag.iBp[i] = (int16)(thisMag.iSumBpFast[i] / OVERSAMPLE_RATIO);
    e4aa:	9805      	ldr	r0, [sp, #20]
    e4ac:	4649      	mov	r1, r9
    e4ae:	17c3      	asrs	r3, r0, #31
    e4b0:	0f5b      	lsrs	r3, r3, #29
    e4b2:	181b      	adds	r3, r3, r0
    e4b4:	10db      	asrs	r3, r3, #3
    e4b6:	5263      	strh	r3, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:260
			thisMag.fBp[i] = (float) thisMag.iSumBpFast[i] * thisMag.fuTPerCount / (float) OVERSAMPLE_RATIO;
    e4b8:	f7f2 ff2c 	bl	1314 <__aeabi_i2f>
    e4bc:	1c39      	adds	r1, r7, #0
    e4be:	f7f2 fc69 	bl	d94 <__aeabi_fmul>
    e4c2:	21f8      	movs	r1, #248	; 0xf8
    e4c4:	0589      	lsls	r1, r1, #22
    e4c6:	f7f2 fc65 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:264
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			// calculate the average (typically 25Hz) gyro reading
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
    e4ca:	9b06      	ldr	r3, [sp, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:260
#if defined USE_FXOS8700 || defined USE_MAG3110
			// calculate the fast magnetometer reading for the Kalman filters (to reduce phase errors)
			thisMag.fBpFast[i] = (float) thisMag.iBpFast[i] * thisMag.fuTPerCount;
			// calculate the average (typically 25Hz) magnetometer reading
			thisMag.iBp[i] = (int16)(thisMag.iSumBpFast[i] / OVERSAMPLE_RATIO);
			thisMag.fBp[i] = (float) thisMag.iSumBpFast[i] * thisMag.fuTPerCount / (float) OVERSAMPLE_RATIO;
    e4cc:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:264
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			// calculate the average (typically 25Hz) gyro reading
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
    e4ce:	17da      	asrs	r2, r3, #31
    e4d0:	0f52      	lsrs	r2, r2, #29
    e4d2:	18d2      	adds	r2, r2, r3
    e4d4:	10d2      	asrs	r2, r2, #3
    e4d6:	2350      	movs	r3, #80	; 0x50
    e4d8:	52f2      	strh	r2, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:265
			thisGyro.fYp[i] = (float) thisGyro.iSumYpFast[i] * thisGyro.fDegPerSecPerCount / (float) OVERSAMPLE_RATIO;
    e4da:	9806      	ldr	r0, [sp, #24]
    e4dc:	f7f2 ff1a 	bl	1314 <__aeabi_i2f>
    e4e0:	990d      	ldr	r1, [sp, #52]	; 0x34
    e4e2:	f7f2 fc57 	bl	d94 <__aeabi_fmul>
    e4e6:	21f8      	movs	r1, #248	; 0xf8
    e4e8:	0589      	lsls	r1, r1, #22
    e4ea:	f7f2 fc53 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:280
			thisGyro.iSumYpFast[i] = 0;
#endif
		}

		// zero the counter and set the event flag to start the sensor fusion task
		iCounter = 0;
    e4ee:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:265
			thisMag.fBp[i] = (float) thisMag.iSumBpFast[i] * thisMag.fuTPerCount / (float) OVERSAMPLE_RATIO;
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			// calculate the average (typically 25Hz) gyro reading
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
			thisGyro.fYp[i] = (float) thisGyro.iSumYpFast[i] * thisGyro.fDegPerSecPerCount / (float) OVERSAMPLE_RATIO;
    e4f0:	6170      	str	r0, [r6, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:269
#endif
			// zero the sensor sums for the next iteration
#if defined USE_FXOS8700 || defined USE_MMA8652
			thisAccel.iSumGpFast[i] = 0;
    e4f2:	4640      	mov	r0, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:281
#endif
		}

		// zero the counter and set the event flag to start the sensor fusion task
		iCounter = 0;
		mqxglobals.RunKF_Event_Flag = 1;
    e4f4:	4a10      	ldr	r2, [pc, #64]	; (e538 <RdSensData_Run+0x328>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:280
			thisGyro.iSumYpFast[i] = 0;
#endif
		}

		// zero the counter and set the event flag to start the sensor fusion task
		iCounter = 0;
    e4f6:	7008      	strb	r0, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:281
		mqxglobals.RunKF_Event_Flag = 1;
    e4f8:	2376      	movs	r3, #118	; 0x76
    e4fa:	2101      	movs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:269
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
			thisGyro.fYp[i] = (float) thisGyro.iSumYpFast[i] * thisGyro.fDegPerSecPerCount / (float) OVERSAMPLE_RATIO;
#endif
			// zero the sensor sums for the next iteration
#if defined USE_FXOS8700 || defined USE_MMA8652
			thisAccel.iSumGpFast[i] = 0;
    e4fc:	60a8      	str	r0, [r5, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:272
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
			thisMag.iSumBpFast[i] = 0;
    e4fe:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:275
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			thisGyro.iSumYpFast[i] = 0;
    e500:	60b0      	str	r0, [r6, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:281
#endif
		}

		// zero the counter and set the event flag to start the sensor fusion task
		iCounter = 0;
		mqxglobals.RunKF_Event_Flag = 1;
    e502:	52d1      	strh	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:284

	} // end of over-sampling test
}
    e504:	b00f      	add	sp, #60	; 0x3c
    e506:	bc3c      	pop	{r2, r3, r4, r5}
    e508:	4690      	mov	r8, r2
    e50a:	4699      	mov	r9, r3
    e50c:	46a2      	mov	sl, r4
    e50e:	46ab      	mov	fp, r5
    e510:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:191

	// read the 200Hz sensor data and apply the HAL
#if defined USE_MPL3115
	if (globals.iMPL3115Found)
	{
		MPL3115_ReadData(I2C_DeviceData, &thisPressure);
    e512:	69b0      	ldr	r0, [r6, #24]
    e514:	4907      	ldr	r1, [pc, #28]	; (e534 <RdSensData_Run+0x324>)
    e516:	f7f5 f90f 	bl	3738 <MPL3115_ReadData>
    e51a:	e687      	b.n	e22c <RdSensData_Run+0x1c>
    e51c:	1fffe478 	.word	0x1fffe478
    e520:	1fffe218 	.word	0x1fffe218
    e524:	1fffe4a0 	.word	0x1fffe4a0
    e528:	20000370 	.word	0x20000370
    e52c:	1ffff654 	.word	0x1ffff654
    e530:	1fffe09c 	.word	0x1fffe09c
    e534:	1ffff174 	.word	0x1ffff174
    e538:	1fffe3fc 	.word	0x1fffe3fc

0000e53c <Fusion_Run>:
Fusion_Run():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:288
	} // end of over-sampling test
}

// function runs the sensor fusion algorithms
void Fusion_Run(void)
{
    e53c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e53e:	464e      	mov	r6, r9
    e540:	4645      	mov	r5, r8
    e542:	4657      	mov	r7, sl
    e544:	b4e0      	push	{r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:293
	int8 initiatemagcal;				// flag to initiate a new magnetic calibration

#if defined COMPUTE_3DOF_B_BASIC || defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
	// magnetic DOF: remove hard and soft iron terms from Bp (uT) to get calibrated data Bc (uT)
	fInvertMagCal(&thisMag, &thisMagCal);
    e546:	4e9a      	ldr	r6, [pc, #616]	; (e7b0 <Fusion_Run+0x274>)
    e548:	4d9a      	ldr	r5, [pc, #616]	; (e7b4 <Fusion_Run+0x278>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:288
	} // end of over-sampling test
}

// function runs the sensor fusion algorithms
void Fusion_Run(void)
{
    e54a:	b084      	sub	sp, #16
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:293
	int8 initiatemagcal;				// flag to initiate a new magnetic calibration

#if defined COMPUTE_3DOF_B_BASIC || defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
	// magnetic DOF: remove hard and soft iron terms from Bp (uT) to get calibrated data Bc (uT)
	fInvertMagCal(&thisMag, &thisMagCal);
    e54c:	1c30      	adds	r0, r6, #0
    e54e:	1c29      	adds	r1, r5, #0
    e550:	f7fb fc0a 	bl	9d68 <fInvertMagCal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:297

	// update magnetic buffer checking for i) absence of first all-zero magnetometer output and ii) no calibration in progress
	// an all zero magnetometer reading can occur after power-on at rare intervals but it simply won't be used in the buffer
	if (!((globals.loopcounter < 100) && (thisMag.iBpFast[X] == 0) && (thisMag.iBpFast[Y] == 0) && (thisMag.iBpFast[Z] == 0)) && !thisMagCal.iCalInProgress)
    e554:	4c98      	ldr	r4, [pc, #608]	; (e7b8 <Fusion_Run+0x27c>)
    e556:	68e3      	ldr	r3, [r4, #12]
    e558:	2b63      	cmp	r3, #99	; 0x63
    e55a:	dc03      	bgt.n	e564 <Fusion_Run+0x28>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:297 (discriminator 2)
    e55c:	6c71      	ldr	r1, [r6, #68]	; 0x44
    e55e:	2900      	cmp	r1, #0
    e560:	d100      	bne.n	e564 <Fusion_Run+0x28>
    e562:	e0e9      	b.n	e738 <Fusion_Run+0x1fc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:297 (discriminator 1)
    e564:	4a95      	ldr	r2, [pc, #596]	; (e7bc <Fusion_Run+0x280>)
    e566:	56aa      	ldrsb	r2, [r5, r2]
    e568:	2a00      	cmp	r2, #0
    e56a:	d100      	bne.n	e56e <Fusion_Run+0x32>
    e56c:	e115      	b.n	e79a <Fusion_Run+0x25e>
    e56e:	4994      	ldr	r1, [pc, #592]	; (e7c0 <Fusion_Run+0x284>)
    e570:	4688      	mov	r8, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:306
	}
#endif

	// 1DOF Pressure low pass filter algorithm
#if defined COMPUTE_1DOF_P_BASIC
	thisSV_1DOF_P_BASIC.systick = SYST_CVR & 0x00FFFFFF;
    e572:	4994      	ldr	r1, [pc, #592]	; (e7c4 <Fusion_Run+0x288>)
    e574:	4f94      	ldr	r7, [pc, #592]	; (e7c8 <Fusion_Run+0x28c>)
    e576:	688a      	ldr	r2, [r1, #8]
    e578:	4689      	mov	r9, r1
    e57a:	0212      	lsls	r2, r2, #8
    e57c:	0a12      	lsrs	r2, r2, #8
    e57e:	613a      	str	r2, [r7, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:307
	fRun_1DOF_P_BASIC(&thisSV_1DOF_P_BASIC, &thisPressure, globals.loopcounter);
    e580:	4992      	ldr	r1, [pc, #584]	; (e7cc <Fusion_Run+0x290>)
    e582:	1c1a      	adds	r2, r3, #0
    e584:	1c38      	adds	r0, r7, #0
    e586:	f7f5 ffff 	bl	4588 <fRun_1DOF_P_BASIC>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:308
	thisSV_1DOF_P_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
    e58a:	464a      	mov	r2, r9
    e58c:	6893      	ldr	r3, [r2, #8]
    e58e:	6939      	ldr	r1, [r7, #16]
    e590:	021b      	lsls	r3, r3, #8
    e592:	0a1b      	lsrs	r3, r3, #8
    e594:	1acb      	subs	r3, r1, r3
    e596:	613b      	str	r3, [r7, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:309
	if (thisSV_1DOF_P_BASIC.systick < 0) thisSV_1DOF_P_BASIC.systick += SYST_RVR;	
    e598:	d500      	bpl.n	e59c <Fusion_Run+0x60>
    e59a:	e0ea      	b.n	e772 <Fusion_Run+0x236>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:316

	// 3DOF Accel Basic: call the tilt algorithm, low pass filters and Euler angle calculation
#if defined COMPUTE_3DOF_G_BASIC
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q3))
	{
		thisSV_3DOF_G_BASIC.systick = SYST_CVR & 0x00FFFFFF;		
    e59c:	4a89      	ldr	r2, [pc, #548]	; (e7c4 <Fusion_Run+0x288>)
    e59e:	4f8c      	ldr	r7, [pc, #560]	; (e7d0 <Fusion_Run+0x294>)
    e5a0:	6893      	ldr	r3, [r2, #8]
    e5a2:	4691      	mov	r9, r2
    e5a4:	021b      	lsls	r3, r3, #8
    e5a6:	0a1b      	lsrs	r3, r3, #8
    e5a8:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:317
		fRun_3DOF_G_BASIC(&thisSV_3DOF_G_BASIC, &thisAccel, globals.loopcounter, THISCOORDSYSTEM);
    e5aa:	4641      	mov	r1, r8
    e5ac:	68e2      	ldr	r2, [r4, #12]
    e5ae:	2301      	movs	r3, #1
    e5b0:	1c38      	adds	r0, r7, #0
    e5b2:	f7f6 f80b 	bl	45cc <fRun_3DOF_G_BASIC>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:318
		thisSV_3DOF_G_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
    e5b6:	464a      	mov	r2, r9
    e5b8:	6893      	ldr	r3, [r2, #8]
    e5ba:	6e39      	ldr	r1, [r7, #96]	; 0x60
    e5bc:	021b      	lsls	r3, r3, #8
    e5be:	0a1b      	lsrs	r3, r3, #8
    e5c0:	1acb      	subs	r3, r1, r3
    e5c2:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:319
		if (thisSV_3DOF_G_BASIC.systick < 0) thisSV_3DOF_G_BASIC.systick += SYST_RVR;
    e5c4:	d500      	bpl.n	e5c8 <Fusion_Run+0x8c>
    e5c6:	e0d0      	b.n	e76a <Fusion_Run+0x22e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:327

	// 3DOF Magnetometer Basic: call the 2D vehicle compass algorithm
#if defined COMPUTE_3DOF_B_BASIC
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q3M))
	{
		thisSV_3DOF_B_BASIC.systick = SYST_CVR & 0x00FFFFFF;
    e5c8:	4a7e      	ldr	r2, [pc, #504]	; (e7c4 <Fusion_Run+0x288>)
    e5ca:	4f82      	ldr	r7, [pc, #520]	; (e7d4 <Fusion_Run+0x298>)
    e5cc:	6893      	ldr	r3, [r2, #8]
    e5ce:	4691      	mov	r9, r2
    e5d0:	021b      	lsls	r3, r3, #8
    e5d2:	0a1b      	lsrs	r3, r3, #8
    e5d4:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:328
		fRun_3DOF_B_BASIC(&thisSV_3DOF_B_BASIC, &thisMag, globals.loopcounter, THISCOORDSYSTEM);
    e5d6:	1c31      	adds	r1, r6, #0
    e5d8:	68e2      	ldr	r2, [r4, #12]
    e5da:	2301      	movs	r3, #1
    e5dc:	1c38      	adds	r0, r7, #0
    e5de:	f7f6 f897 	bl	4710 <fRun_3DOF_B_BASIC>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:329
		thisSV_3DOF_B_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
    e5e2:	464a      	mov	r2, r9
    e5e4:	6893      	ldr	r3, [r2, #8]
    e5e6:	6e39      	ldr	r1, [r7, #96]	; 0x60
    e5e8:	021b      	lsls	r3, r3, #8
    e5ea:	0a1b      	lsrs	r3, r3, #8
    e5ec:	1acb      	subs	r3, r1, r3
    e5ee:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:330
		if (thisSV_3DOF_B_BASIC.systick < 0) thisSV_3DOF_B_BASIC.systick += SYST_RVR;
    e5f0:	d500      	bpl.n	e5f4 <Fusion_Run+0xb8>
    e5f2:	e0ce      	b.n	e792 <Fusion_Run+0x256>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:338

	// 3DOF Gyro Basic: call the gyro integration algorithm
#if defined COMPUTE_3DOF_Y_BASIC
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q3G))
	{
		thisSV_3DOF_Y_BASIC.systick = SYST_CVR & 0x00FFFFFF;
    e5f4:	4a73      	ldr	r2, [pc, #460]	; (e7c4 <Fusion_Run+0x288>)
    e5f6:	4f78      	ldr	r7, [pc, #480]	; (e7d8 <Fusion_Run+0x29c>)
    e5f8:	6893      	ldr	r3, [r2, #8]
    e5fa:	4692      	mov	sl, r2
    e5fc:	021b      	lsls	r3, r3, #8
    e5fe:	0a1b      	lsrs	r3, r3, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:339
		fRun_3DOF_Y_BASIC(&thisSV_3DOF_Y_BASIC, &thisGyro, globals.loopcounter, THISCOORDSYSTEM,
    e600:	4a76      	ldr	r2, [pc, #472]	; (e7dc <Fusion_Run+0x2a0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:338

	// 3DOF Gyro Basic: call the gyro integration algorithm
#if defined COMPUTE_3DOF_Y_BASIC
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q3G))
	{
		thisSV_3DOF_Y_BASIC.systick = SYST_CVR & 0x00FFFFFF;
    e602:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:339
		fRun_3DOF_Y_BASIC(&thisSV_3DOF_Y_BASIC, &thisGyro, globals.loopcounter, THISCOORDSYSTEM,
    e604:	2308      	movs	r3, #8
    e606:	9300      	str	r3, [sp, #0]
    e608:	1c11      	adds	r1, r2, #0
    e60a:	2301      	movs	r3, #1
    e60c:	4691      	mov	r9, r2
    e60e:	1c38      	adds	r0, r7, #0
    e610:	68e2      	ldr	r2, [r4, #12]
    e612:	f7f6 f92d 	bl	4870 <fRun_3DOF_Y_BASIC>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:341
				OVERSAMPLE_RATIO);
		thisSV_3DOF_Y_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
    e616:	4651      	mov	r1, sl
    e618:	688b      	ldr	r3, [r1, #8]
    e61a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    e61c:	021b      	lsls	r3, r3, #8
    e61e:	0a1b      	lsrs	r3, r3, #8
    e620:	1ad3      	subs	r3, r2, r3
    e622:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:342
		if (thisSV_3DOF_Y_BASIC.systick < 0) thisSV_3DOF_Y_BASIC.systick += SYST_RVR;
    e624:	d500      	bpl.n	e628 <Fusion_Run+0xec>
    e626:	e0b0      	b.n	e78a <Fusion_Run+0x24e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:350

	// 6DOF Accel / Mag: Basic: call the eCompass orientation algorithm, low pass filters and Euler angle calculation
#if defined COMPUTE_6DOF_GB_BASIC
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q6MA))
	{
		thisSV_6DOF_GB_BASIC.systick = SYST_CVR & 0x00FFFFFF;
    e628:	4b66      	ldr	r3, [pc, #408]	; (e7c4 <Fusion_Run+0x288>)
    e62a:	4f6d      	ldr	r7, [pc, #436]	; (e7e0 <Fusion_Run+0x2a4>)
    e62c:	469a      	mov	sl, r3
    e62e:	689b      	ldr	r3, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:351
		fRun_6DOF_GB_BASIC(&thisSV_6DOF_GB_BASIC, &thisMag, &thisAccel, globals.loopcounter, THISCOORDSYSTEM);
    e630:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:350

	// 6DOF Accel / Mag: Basic: call the eCompass orientation algorithm, low pass filters and Euler angle calculation
#if defined COMPUTE_6DOF_GB_BASIC
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q6MA))
	{
		thisSV_6DOF_GB_BASIC.systick = SYST_CVR & 0x00FFFFFF;
    e632:	021b      	lsls	r3, r3, #8
    e634:	0a1b      	lsrs	r3, r3, #8
    e636:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:351
		fRun_6DOF_GB_BASIC(&thisSV_6DOF_GB_BASIC, &thisMag, &thisAccel, globals.loopcounter, THISCOORDSYSTEM);
    e638:	2301      	movs	r3, #1
    e63a:	9300      	str	r3, [sp, #0]
    e63c:	4642      	mov	r2, r8
    e63e:	68e3      	ldr	r3, [r4, #12]
    e640:	1c38      	adds	r0, r7, #0
    e642:	f7f6 f9df 	bl	4a04 <fRun_6DOF_GB_BASIC>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:352
		thisSV_6DOF_GB_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
    e646:	4652      	mov	r2, sl
    e648:	6893      	ldr	r3, [r2, #8]
    e64a:	6e39      	ldr	r1, [r7, #96]	; 0x60
    e64c:	021b      	lsls	r3, r3, #8
    e64e:	0a1b      	lsrs	r3, r3, #8
    e650:	1acb      	subs	r3, r1, r3
    e652:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:353
		if (thisSV_6DOF_GB_BASIC.systick < 0) thisSV_6DOF_GB_BASIC.systick += SYST_RVR;
    e654:	d500      	bpl.n	e658 <Fusion_Run+0x11c>
    e656:	e094      	b.n	e782 <Fusion_Run+0x246>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:361

	// 6DOF Accel / Gyro: call the Kalman orientation algorithm
#if defined COMPUTE_6DOF_GY_KALMAN
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q6AG))
	{
		thisSV_6DOF_GY_KALMAN.systick = SYST_CVR & 0x00FFFFFF;
    e658:	4a5a      	ldr	r2, [pc, #360]	; (e7c4 <Fusion_Run+0x288>)
    e65a:	4f62      	ldr	r7, [pc, #392]	; (e7e4 <Fusion_Run+0x2a8>)
    e65c:	6893      	ldr	r3, [r2, #8]
    e65e:	4692      	mov	sl, r2
    e660:	021b      	lsls	r3, r3, #8
    e662:	0a1b      	lsrs	r3, r3, #8
    e664:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:362
		fRun_6DOF_GY_KALMAN(&thisSV_6DOF_GY_KALMAN, &thisAccel,  &thisGyro, THISCOORDSYSTEM, OVERSAMPLE_RATIO);
    e666:	2308      	movs	r3, #8
    e668:	9300      	str	r3, [sp, #0]
    e66a:	4641      	mov	r1, r8
    e66c:	464a      	mov	r2, r9
    e66e:	2301      	movs	r3, #1
    e670:	1c38      	adds	r0, r7, #0
    e672:	f7f6 fa9f 	bl	4bb4 <fRun_6DOF_GY_KALMAN>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:363
		thisSV_6DOF_GY_KALMAN.systick -= SYST_CVR & 0x00FFFFFF;
    e676:	4652      	mov	r2, sl
    e678:	6893      	ldr	r3, [r2, #8]
    e67a:	6e39      	ldr	r1, [r7, #96]	; 0x60
    e67c:	021b      	lsls	r3, r3, #8
    e67e:	0a1b      	lsrs	r3, r3, #8
    e680:	1acb      	subs	r3, r1, r3
    e682:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:364
		if (thisSV_6DOF_GY_KALMAN.systick < 0) thisSV_6DOF_GY_KALMAN.systick += SYST_RVR;
    e684:	d500      	bpl.n	e688 <Fusion_Run+0x14c>
    e686:	e078      	b.n	e77a <Fusion_Run+0x23e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:372

	// 9DOF Accel / Mag / Gyro: apply the Kalman filter
#if defined COMPUTE_9DOF_GBY_KALMAN
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q9))
	{
		thisSV_9DOF_GBY_KALMAN.systick = SYST_CVR & 0x00FFFFFF;
    e688:	4a4e      	ldr	r2, [pc, #312]	; (e7c4 <Fusion_Run+0x288>)
    e68a:	4f57      	ldr	r7, [pc, #348]	; (e7e8 <Fusion_Run+0x2ac>)
    e68c:	6893      	ldr	r3, [r2, #8]
    e68e:	4692      	mov	sl, r2
    e690:	021b      	lsls	r3, r3, #8
    e692:	0a1b      	lsrs	r3, r3, #8
    e694:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:373
		fRun_9DOF_GBY_KALMAN(&thisSV_9DOF_GBY_KALMAN, &thisAccel, &thisMag, &thisGyro, &thisMagCal, THISCOORDSYSTEM, OVERSAMPLE_RATIO);
    e696:	2301      	movs	r3, #1
    e698:	9301      	str	r3, [sp, #4]
    e69a:	2308      	movs	r3, #8
    e69c:	9302      	str	r3, [sp, #8]
    e69e:	4641      	mov	r1, r8
    e6a0:	1c32      	adds	r2, r6, #0
    e6a2:	464b      	mov	r3, r9
    e6a4:	9500      	str	r5, [sp, #0]
    e6a6:	1c38      	adds	r0, r7, #0
    e6a8:	f7f7 face 	bl	5c48 <fRun_9DOF_GBY_KALMAN>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:374
		thisSV_9DOF_GBY_KALMAN.systick -= SYST_CVR & 0x00FFFFFF;		
    e6ac:	4652      	mov	r2, sl
    e6ae:	6893      	ldr	r3, [r2, #8]
    e6b0:	6e39      	ldr	r1, [r7, #96]	; 0x60
    e6b2:	021b      	lsls	r3, r3, #8
    e6b4:	0a1b      	lsrs	r3, r3, #8
    e6b6:	1acb      	subs	r3, r1, r3
    e6b8:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:375
		if (thisSV_9DOF_GBY_KALMAN.systick < 0) thisSV_9DOF_GBY_KALMAN.systick += SYST_RVR;
    e6ba:	d452      	bmi.n	e762 <Fusion_Run+0x226>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:382
#endif // COMPUTE_9DOF_GBY_KALMAN

	// 6DOF and 9DOF: decide whether to initiate a magnetic calibration
#if defined COMPUTE_3DOF_B_BASIC || defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
	// check no magnetic calibration is in progress
	if (!thisMagCal.iCalInProgress)
    e6bc:	4b3f      	ldr	r3, [pc, #252]	; (e7bc <Fusion_Run+0x280>)
    e6be:	5cef      	ldrb	r7, [r5, r3]
    e6c0:	2f00      	cmp	r7, #0
    e6c2:	d141      	bne.n	e748 <Fusion_Run+0x20c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:385
	{
		// do the first 4 element calibration immediately there are a minimum of MINMEASUREMENTS4CAL
		initiatemagcal = (!thisMagCal.iMagCalHasRun && (thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS4CAL));
    e6c4:	4b49      	ldr	r3, [pc, #292]	; (e7ec <Fusion_Run+0x2b0>)
    e6c6:	56eb      	ldrsb	r3, [r5, r3]
    e6c8:	2b00      	cmp	r3, #0
    e6ca:	d02c      	beq.n	e726 <Fusion_Run+0x1ea>
    e6cc:	4b48      	ldr	r3, [pc, #288]	; (e7f0 <Fusion_Run+0x2b4>)
    e6ce:	4a49      	ldr	r2, [pc, #292]	; (e7f4 <Fusion_Run+0x2b8>)
    e6d0:	5ad3      	ldrh	r3, [r2, r3]
    e6d2:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:388 (discriminator 4)

		// otherwise initiate a calibration at intervals depending on the number of measurements available
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS4CAL) && 
    e6d4:	4643      	mov	r3, r8
    e6d6:	b29b      	uxth	r3, r3
    e6d8:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:389 (discriminator 4)
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS7CAL) &&
    e6da:	3b28      	subs	r3, #40	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:390 (discriminator 4)
				!(globals.loopcounter % INTERVAL4CAL));
    e6dc:	68e6      	ldr	r6, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:389 (discriminator 4)
		// do the first 4 element calibration immediately there are a minimum of MINMEASUREMENTS4CAL
		initiatemagcal = (!thisMagCal.iMagCalHasRun && (thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS4CAL));

		// otherwise initiate a calibration at intervals depending on the number of measurements available
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS4CAL) && 
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS7CAL) &&
    e6de:	2b3b      	cmp	r3, #59	; 0x3b
    e6e0:	d805      	bhi.n	e6ee <Fusion_Run+0x1b2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:390 (discriminator 1)
				!(globals.loopcounter % INTERVAL4CAL));
    e6e2:	1c30      	adds	r0, r6, #0
    e6e4:	214b      	movs	r1, #75	; 0x4b
    e6e6:	f7f1 ff81 	bl	5ec <__aeabi_idivmod>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:389 (discriminator 1)
		// do the first 4 element calibration immediately there are a minimum of MINMEASUREMENTS4CAL
		initiatemagcal = (!thisMagCal.iMagCalHasRun && (thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS4CAL));

		// otherwise initiate a calibration at intervals depending on the number of measurements available
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS4CAL) && 
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS7CAL) &&
    e6ea:	2900      	cmp	r1, #0
    e6ec:	d05e      	beq.n	e7ac <Fusion_Run+0x270>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:392
				!(globals.loopcounter % INTERVAL4CAL));
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS7CAL) &&
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS10CAL) &&
    e6ee:	464b      	mov	r3, r9
    e6f0:	3b64      	subs	r3, #100	; 0x64
    e6f2:	2b31      	cmp	r3, #49	; 0x31
    e6f4:	d82a      	bhi.n	e74c <Fusion_Run+0x210>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:393 (discriminator 1)
				!(globals.loopcounter % INTERVAL7CAL));
    e6f6:	1c30      	adds	r0, r6, #0
    e6f8:	21fa      	movs	r1, #250	; 0xfa
    e6fa:	f7f1 ff77 	bl	5ec <__aeabi_idivmod>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:392 (discriminator 1)
		// otherwise initiate a calibration at intervals depending on the number of measurements available
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS4CAL) && 
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS7CAL) &&
				!(globals.loopcounter % INTERVAL4CAL));
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS7CAL) &&
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS10CAL) &&
    e6fe:	2900      	cmp	r1, #0
    e700:	d001      	beq.n	e706 <Fusion_Run+0x1ca>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:398 (discriminator 2)
				!(globals.loopcounter % INTERVAL7CAL));
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS10CAL) &&
				!(globals.loopcounter % INTERVAL10CAL));

		// initiate the magnetic calibration if any of the conditions are met
		if (initiatemagcal)
    e702:	2f00      	cmp	r7, #0
    e704:	d007      	beq.n	e716 <Fusion_Run+0x1da>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:401
		{
			// set the flags denoting that a calibration is in progress
			thisMagCal.iCalInProgress = 1;
    e706:	4a2d      	ldr	r2, [pc, #180]	; (e7bc <Fusion_Run+0x280>)
    e708:	2301      	movs	r3, #1
    e70a:	54ab      	strb	r3, [r5, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:402
			thisMagCal.iMagCalHasRun = 1;
    e70c:	4a37      	ldr	r2, [pc, #220]	; (e7ec <Fusion_Run+0x2b0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:405

			// enable the magnetic calibration task to run
			mqxglobals.MagCal_Event_Flag = 1;
    e70e:	493a      	ldr	r1, [pc, #232]	; (e7f8 <Fusion_Run+0x2bc>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:402
		// initiate the magnetic calibration if any of the conditions are met
		if (initiatemagcal)
		{
			// set the flags denoting that a calibration is in progress
			thisMagCal.iCalInProgress = 1;
			thisMagCal.iMagCalHasRun = 1;
    e710:	54ab      	strb	r3, [r5, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:405

			// enable the magnetic calibration task to run
			mqxglobals.MagCal_Event_Flag = 1;
    e712:	2278      	movs	r2, #120	; 0x78
    e714:	528b      	strh	r3, [r1, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:411
		} // end of test whether to call calibration functions
	} // end of test that no calibration is already in progress
#endif

	// increment the loopcounter (used for time stamping magnetic data)
	globals.loopcounter++;
    e716:	3601      	adds	r6, #1
    e718:	60e6      	str	r6, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:414

	return;
}
    e71a:	b004      	add	sp, #16
    e71c:	bc1c      	pop	{r2, r3, r4}
    e71e:	4690      	mov	r8, r2
    e720:	4699      	mov	r9, r3
    e722:	46a2      	mov	sl, r4
    e724:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:385 (discriminator 1)
#if defined COMPUTE_3DOF_B_BASIC || defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
	// check no magnetic calibration is in progress
	if (!thisMagCal.iCalInProgress)
	{
		// do the first 4 element calibration immediately there are a minimum of MINMEASUREMENTS4CAL
		initiatemagcal = (!thisMagCal.iMagCalHasRun && (thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS4CAL));
    e726:	4b32      	ldr	r3, [pc, #200]	; (e7f0 <Fusion_Run+0x2b4>)
    e728:	4a32      	ldr	r2, [pc, #200]	; (e7f4 <Fusion_Run+0x2b8>)
    e72a:	5ad3      	ldrh	r3, [r2, r3]
    e72c:	4698      	mov	r8, r3
    e72e:	b21b      	sxth	r3, r3
    e730:	2b27      	cmp	r3, #39	; 0x27
    e732:	ddcf      	ble.n	e6d4 <Fusion_Run+0x198>
    e734:	2701      	movs	r7, #1
    e736:	e7cd      	b.n	e6d4 <Fusion_Run+0x198>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:297 (discriminator 1)
	// magnetic DOF: remove hard and soft iron terms from Bp (uT) to get calibrated data Bc (uT)
	fInvertMagCal(&thisMag, &thisMagCal);

	// update magnetic buffer checking for i) absence of first all-zero magnetometer output and ii) no calibration in progress
	// an all zero magnetometer reading can occur after power-on at rare intervals but it simply won't be used in the buffer
	if (!((globals.loopcounter < 100) && (thisMag.iBpFast[X] == 0) && (thisMag.iBpFast[Y] == 0) && (thisMag.iBpFast[Z] == 0)) && !thisMagCal.iCalInProgress)
    e738:	2248      	movs	r2, #72	; 0x48
    e73a:	5eb2      	ldrsh	r2, [r6, r2]
    e73c:	2a00      	cmp	r2, #0
    e73e:	d000      	beq.n	e742 <Fusion_Run+0x206>
    e740:	e710      	b.n	e564 <Fusion_Run+0x28>
    e742:	4a1f      	ldr	r2, [pc, #124]	; (e7c0 <Fusion_Run+0x284>)
    e744:	4690      	mov	r8, r2
    e746:	e714      	b.n	e572 <Fusion_Run+0x36>
    e748:	68e6      	ldr	r6, [r4, #12]
    e74a:	e7e4      	b.n	e716 <Fusion_Run+0x1da>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:394
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS7CAL) &&
				!(globals.loopcounter % INTERVAL4CAL));
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS7CAL) &&
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS10CAL) &&
				!(globals.loopcounter % INTERVAL7CAL));
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS10CAL) &&
    e74c:	4641      	mov	r1, r8
    e74e:	b20b      	sxth	r3, r1
    e750:	2b95      	cmp	r3, #149	; 0x95
    e752:	ddd6      	ble.n	e702 <Fusion_Run+0x1c6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:395 (discriminator 1)
				!(globals.loopcounter % INTERVAL10CAL));
    e754:	1c30      	adds	r0, r6, #0
    e756:	4929      	ldr	r1, [pc, #164]	; (e7fc <Fusion_Run+0x2c0>)
    e758:	f7f1 ff48 	bl	5ec <__aeabi_idivmod>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:394 (discriminator 1)
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS7CAL) &&
				!(globals.loopcounter % INTERVAL4CAL));
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS7CAL) &&
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS10CAL) &&
				!(globals.loopcounter % INTERVAL7CAL));
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS10CAL) &&
    e75c:	2900      	cmp	r1, #0
    e75e:	d0d2      	beq.n	e706 <Fusion_Run+0x1ca>
    e760:	e7cf      	b.n	e702 <Fusion_Run+0x1c6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:375 (discriminator 1)
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q9))
	{
		thisSV_9DOF_GBY_KALMAN.systick = SYST_CVR & 0x00FFFFFF;
		fRun_9DOF_GBY_KALMAN(&thisSV_9DOF_GBY_KALMAN, &thisAccel, &thisMag, &thisGyro, &thisMagCal, THISCOORDSYSTEM, OVERSAMPLE_RATIO);
		thisSV_9DOF_GBY_KALMAN.systick -= SYST_CVR & 0x00FFFFFF;		
		if (thisSV_9DOF_GBY_KALMAN.systick < 0) thisSV_9DOF_GBY_KALMAN.systick += SYST_RVR;
    e762:	6852      	ldr	r2, [r2, #4]
    e764:	189b      	adds	r3, r3, r2
    e766:	663b      	str	r3, [r7, #96]	; 0x60
    e768:	e7a8      	b.n	e6bc <Fusion_Run+0x180>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:319 (discriminator 1)
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q3))
	{
		thisSV_3DOF_G_BASIC.systick = SYST_CVR & 0x00FFFFFF;		
		fRun_3DOF_G_BASIC(&thisSV_3DOF_G_BASIC, &thisAccel, globals.loopcounter, THISCOORDSYSTEM);
		thisSV_3DOF_G_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
		if (thisSV_3DOF_G_BASIC.systick < 0) thisSV_3DOF_G_BASIC.systick += SYST_RVR;
    e76a:	6852      	ldr	r2, [r2, #4]
    e76c:	189b      	adds	r3, r3, r2
    e76e:	663b      	str	r3, [r7, #96]	; 0x60
    e770:	e72a      	b.n	e5c8 <Fusion_Run+0x8c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:309 (discriminator 1)
	// 1DOF Pressure low pass filter algorithm
#if defined COMPUTE_1DOF_P_BASIC
	thisSV_1DOF_P_BASIC.systick = SYST_CVR & 0x00FFFFFF;
	fRun_1DOF_P_BASIC(&thisSV_1DOF_P_BASIC, &thisPressure, globals.loopcounter);
	thisSV_1DOF_P_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
	if (thisSV_1DOF_P_BASIC.systick < 0) thisSV_1DOF_P_BASIC.systick += SYST_RVR;	
    e772:	6852      	ldr	r2, [r2, #4]
    e774:	189b      	adds	r3, r3, r2
    e776:	613b      	str	r3, [r7, #16]
    e778:	e710      	b.n	e59c <Fusion_Run+0x60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:364 (discriminator 1)
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q6AG))
	{
		thisSV_6DOF_GY_KALMAN.systick = SYST_CVR & 0x00FFFFFF;
		fRun_6DOF_GY_KALMAN(&thisSV_6DOF_GY_KALMAN, &thisAccel,  &thisGyro, THISCOORDSYSTEM, OVERSAMPLE_RATIO);
		thisSV_6DOF_GY_KALMAN.systick -= SYST_CVR & 0x00FFFFFF;
		if (thisSV_6DOF_GY_KALMAN.systick < 0) thisSV_6DOF_GY_KALMAN.systick += SYST_RVR;
    e77a:	6852      	ldr	r2, [r2, #4]
    e77c:	189b      	adds	r3, r3, r2
    e77e:	663b      	str	r3, [r7, #96]	; 0x60
    e780:	e782      	b.n	e688 <Fusion_Run+0x14c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:353 (discriminator 1)
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q6MA))
	{
		thisSV_6DOF_GB_BASIC.systick = SYST_CVR & 0x00FFFFFF;
		fRun_6DOF_GB_BASIC(&thisSV_6DOF_GB_BASIC, &thisMag, &thisAccel, globals.loopcounter, THISCOORDSYSTEM);
		thisSV_6DOF_GB_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
		if (thisSV_6DOF_GB_BASIC.systick < 0) thisSV_6DOF_GB_BASIC.systick += SYST_RVR;
    e782:	6852      	ldr	r2, [r2, #4]
    e784:	189b      	adds	r3, r3, r2
    e786:	663b      	str	r3, [r7, #96]	; 0x60
    e788:	e766      	b.n	e658 <Fusion_Run+0x11c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:342 (discriminator 1)
	{
		thisSV_3DOF_Y_BASIC.systick = SYST_CVR & 0x00FFFFFF;
		fRun_3DOF_Y_BASIC(&thisSV_3DOF_Y_BASIC, &thisGyro, globals.loopcounter, THISCOORDSYSTEM,
				OVERSAMPLE_RATIO);
		thisSV_3DOF_Y_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
		if (thisSV_3DOF_Y_BASIC.systick < 0) thisSV_3DOF_Y_BASIC.systick += SYST_RVR;
    e78a:	684a      	ldr	r2, [r1, #4]
    e78c:	189b      	adds	r3, r3, r2
    e78e:	663b      	str	r3, [r7, #96]	; 0x60
    e790:	e74a      	b.n	e628 <Fusion_Run+0xec>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:330 (discriminator 1)
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q3M))
	{
		thisSV_3DOF_B_BASIC.systick = SYST_CVR & 0x00FFFFFF;
		fRun_3DOF_B_BASIC(&thisSV_3DOF_B_BASIC, &thisMag, globals.loopcounter, THISCOORDSYSTEM);
		thisSV_3DOF_B_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
		if (thisSV_3DOF_B_BASIC.systick < 0) thisSV_3DOF_B_BASIC.systick += SYST_RVR;
    e792:	6852      	ldr	r2, [r2, #4]
    e794:	189b      	adds	r3, r3, r2
    e796:	663b      	str	r3, [r7, #96]	; 0x60
    e798:	e72c      	b.n	e5f4 <Fusion_Run+0xb8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:300
	// update magnetic buffer checking for i) absence of first all-zero magnetometer output and ii) no calibration in progress
	// an all zero magnetometer reading can occur after power-on at rare intervals but it simply won't be used in the buffer
	if (!((globals.loopcounter < 100) && (thisMag.iBpFast[X] == 0) && (thisMag.iBpFast[Y] == 0) && (thisMag.iBpFast[Z] == 0)) && !thisMagCal.iCalInProgress)
	{
		// update the magnetometer measurement buffer integer magnetometer data (typically at 25Hz)
		iUpdateMagnetometerBuffer(&thisMagBuffer, &thisAccel, &thisMag, globals.loopcounter);
    e79a:	4a09      	ldr	r2, [pc, #36]	; (e7c0 <Fusion_Run+0x284>)
    e79c:	4815      	ldr	r0, [pc, #84]	; (e7f4 <Fusion_Run+0x2b8>)
    e79e:	1c11      	adds	r1, r2, #0
    e7a0:	4690      	mov	r8, r2
    e7a2:	1c32      	adds	r2, r6, #0
    e7a4:	f7fb f8ca 	bl	993c <iUpdateMagnetometerBuffer>
    e7a8:	68e3      	ldr	r3, [r4, #12]
    e7aa:	e6e2      	b.n	e572 <Fusion_Run+0x36>
    e7ac:	2701      	movs	r7, #1
    e7ae:	e79e      	b.n	e6ee <Fusion_Run+0x1b2>
    e7b0:	20000370 	.word	0x20000370
    e7b4:	1ffff23c 	.word	0x1ffff23c
    e7b8:	1fffe478 	.word	0x1fffe478
    e7bc:	00000414 	.word	0x00000414
    e7c0:	1fffe4a0 	.word	0x1fffe4a0
    e7c4:	e000e010 	.word	0xe000e010
    e7c8:	1fffe488 	.word	0x1fffe488
    e7cc:	1ffff174 	.word	0x1ffff174
    e7d0:	1ffff0d0 	.word	0x1ffff0d0
    e7d4:	1fffe4d4 	.word	0x1fffe4d4
    e7d8:	200003c8 	.word	0x200003c8
    e7dc:	1ffff654 	.word	0x1ffff654
    e7e0:	1ffff190 	.word	0x1ffff190
    e7e4:	1ffffee0 	.word	0x1ffffee0
    e7e8:	1ffff6a8 	.word	0x1ffff6a8
    e7ec:	00000415 	.word	0x00000415
    e7f0:	00000b56 	.word	0x00000b56
    e7f4:	1fffe578 	.word	0x1fffe578
    e7f8:	1fffe3fc 	.word	0x1fffe3fc
    e7fc:	000002ee 	.word	0x000002ee

0000e800 <MagCal_Run>:
MagCal_Run():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:418
	return;
}

// function runs the magnetic calibration
void MagCal_Run(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer)
{
    e800:	b5f0      	push	{r4, r5, r6, r7, lr}
    e802:	4647      	mov	r7, r8
    e804:	b480      	push	{r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:423
	int8 i, j;			// loop counters
	int8 isolver;		// magnetic solver used

	// 4 element calibration case
	if (pthisMagBuffer->iMagBufferCount < MINMEASUREMENTS7CAL)
    e806:	4b44      	ldr	r3, [pc, #272]	; (e918 <MagCal_Run+0x118>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:418
	return;
}

// function runs the magnetic calibration
void MagCal_Run(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer)
{
    e808:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:423
	int8 i, j;			// loop counters
	int8 isolver;		// magnetic solver used

	// 4 element calibration case
	if (pthisMagBuffer->iMagBufferCount < MINMEASUREMENTS7CAL)
    e80a:	5ecb      	ldrsh	r3, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:418
	return;
}

// function runs the magnetic calibration
void MagCal_Run(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer)
{
    e80c:	1c0d      	adds	r5, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:423
	int8 i, j;			// loop counters
	int8 isolver;		// magnetic solver used

	// 4 element calibration case
	if (pthisMagBuffer->iMagBufferCount < MINMEASUREMENTS7CAL)
    e80e:	2b63      	cmp	r3, #99	; 0x63
    e810:	dc59      	bgt.n	e8c6 <MagCal_Run+0xc6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:426
	{
		// age the existing fit error to avoid one good calibration locking out future updates
		if (pthisMagCal->iValidMagCal)
    e812:	4b42      	ldr	r3, [pc, #264]	; (e91c <MagCal_Run+0x11c>)
    e814:	56c3      	ldrsb	r3, [r0, r3]
    e816:	2b00      	cmp	r3, #0
    e818:	d167      	bne.n	e8ea <MagCal_Run+0xea>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:432
		{
			pthisMagCal->fFitErrorpc *= (1.0F + (float) INTERVAL4CAL * (float) OVERSAMPLE_RATIO / ((float) SENSORFS * FITERRORAGINGSECS));	
		}
		// call the 4 element matrix inversion calibration
		isolver = 4;
		fUpdateCalibration4INV(pthisMagCal, pthisMagBuffer, &thisMag);
    e81a:	1c20      	adds	r0, r4, #0
    e81c:	1c29      	adds	r1, r5, #0
    e81e:	4a40      	ldr	r2, [pc, #256]	; (e920 <MagCal_Run+0x120>)
    e820:	f7fb fb6e 	bl	9f00 <fUpdateCalibration4INV>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:431
		if (pthisMagCal->iValidMagCal)
		{
			pthisMagCal->fFitErrorpc *= (1.0F + (float) INTERVAL4CAL * (float) OVERSAMPLE_RATIO / ((float) SENSORFS * FITERRORAGINGSECS));	
		}
		// call the 4 element matrix inversion calibration
		isolver = 4;
    e824:	2604      	movs	r6, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:460
		isolver = 10;
		fUpdateCalibration10EIG(pthisMagCal, pthisMagBuffer, &thisMag);
	}

	// the trial geomagnetic field must be in range (earth is 22uT to 67uT)
	if ((pthisMagCal->ftrB >= MINBFITUT) && (pthisMagCal->ftrB <= MAXBFITUT))		
    e826:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
    e828:	493e      	ldr	r1, [pc, #248]	; (e924 <MagCal_Run+0x124>)
    e82a:	1c28      	adds	r0, r5, #0
    e82c:	f7f1 ff58 	bl	6e0 <__aeabi_fcmpge>
    e830:	2800      	cmp	r0, #0
    e832:	d042      	beq.n	e8ba <MagCal_Run+0xba>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:460 (discriminator 1)
    e834:	1c28      	adds	r0, r5, #0
    e836:	493c      	ldr	r1, [pc, #240]	; (e928 <MagCal_Run+0x128>)
    e838:	f7f1 ff3e 	bl	6b8 <__aeabi_fcmple>
    e83c:	2800      	cmp	r0, #0
    e83e:	d03c      	beq.n	e8ba <MagCal_Run+0xba>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:464
	{
		// always accept the calibration if i) no previous calibration exists ii) the calibration fit is reduced or
		// an improved solver was used giving a good trial calibration (4% or under)
		if ((pthisMagCal->iValidMagCal == 0) ||
    e840:	4b36      	ldr	r3, [pc, #216]	; (e91c <MagCal_Run+0x11c>)
    e842:	6f27      	ldr	r7, [r4, #112]	; 0x70
    e844:	5ce3      	ldrb	r3, [r4, r3]
    e846:	4698      	mov	r8, r3
    e848:	2b00      	cmp	r3, #0
    e84a:	d010      	beq.n	e86e <MagCal_Run+0x6e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:464 (discriminator 1)
    e84c:	1c38      	adds	r0, r7, #0
    e84e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    e850:	f7f1 ff32 	bl	6b8 <__aeabi_fcmple>
    e854:	2800      	cmp	r0, #0
    e856:	d10a      	bne.n	e86e <MagCal_Run+0x6e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:465
				(pthisMagCal->ftrFitErrorpc <= pthisMagCal->fFitErrorpc) ||
    e858:	4642      	mov	r2, r8
    e85a:	b253      	sxtb	r3, r2
    e85c:	429e      	cmp	r6, r3
    e85e:	dd2c      	ble.n	e8ba <MagCal_Run+0xba>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:466
				((isolver > pthisMagCal->iValidMagCal) && (pthisMagCal->ftrFitErrorpc <= 4.0F)))
    e860:	2181      	movs	r1, #129	; 0x81
    e862:	1c38      	adds	r0, r7, #0
    e864:	05c9      	lsls	r1, r1, #23
    e866:	f7f1 ff27 	bl	6b8 <__aeabi_fcmple>
    e86a:	2800      	cmp	r0, #0
    e86c:	d025      	beq.n	e8ba <MagCal_Run+0xba>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:469
		{
			// accept the new calibration solution
			pthisMagCal->iValidMagCal = isolver;
    e86e:	4b2b      	ldr	r3, [pc, #172]	; (e91c <MagCal_Run+0x11c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:472
			pthisMagCal->fFitErrorpc = pthisMagCal->ftrFitErrorpc;
			pthisMagCal->fB = pthisMagCal->ftrB;
			pthisMagCal->fFourBsq = 4.0F * pthisMagCal->ftrB * pthisMagCal->ftrB;
    e870:	2181      	movs	r1, #129	; 0x81
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:469
		if ((pthisMagCal->iValidMagCal == 0) ||
				(pthisMagCal->ftrFitErrorpc <= pthisMagCal->fFitErrorpc) ||
				((isolver > pthisMagCal->iValidMagCal) && (pthisMagCal->ftrFitErrorpc <= 4.0F)))
		{
			// accept the new calibration solution
			pthisMagCal->iValidMagCal = isolver;
    e872:	54e6      	strb	r6, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:472
			pthisMagCal->fFitErrorpc = pthisMagCal->ftrFitErrorpc;
			pthisMagCal->fB = pthisMagCal->ftrB;
			pthisMagCal->fFourBsq = 4.0F * pthisMagCal->ftrB * pthisMagCal->ftrB;
    e874:	05c9      	lsls	r1, r1, #23
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:470
				(pthisMagCal->ftrFitErrorpc <= pthisMagCal->fFitErrorpc) ||
				((isolver > pthisMagCal->iValidMagCal) && (pthisMagCal->ftrFitErrorpc <= 4.0F)))
		{
			// accept the new calibration solution
			pthisMagCal->iValidMagCal = isolver;
			pthisMagCal->fFitErrorpc = pthisMagCal->ftrFitErrorpc;
    e876:	63a7      	str	r7, [r4, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:471
			pthisMagCal->fB = pthisMagCal->ftrB;
    e878:	6325      	str	r5, [r4, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:472
			pthisMagCal->fFourBsq = 4.0F * pthisMagCal->ftrB * pthisMagCal->ftrB;
    e87a:	1c28      	adds	r0, r5, #0
    e87c:	f7f2 fa8a 	bl	d94 <__aeabi_fmul>
    e880:	1c01      	adds	r1, r0, #0
    e882:	1c28      	adds	r0, r5, #0
    e884:	f7f2 fa86 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:475
			for (i = X; i <= Z; i++)
			{
				pthisMagCal->fV[i] = pthisMagCal->ftrV[i];
    e888:	6be3      	ldr	r3, [r4, #60]	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:478
				for (j = X; j <= Z; j++)
				{
					pthisMagCal->finvW[i][j] = pthisMagCal->ftrinvW[i][j];
    e88a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:475
			pthisMagCal->fFitErrorpc = pthisMagCal->ftrFitErrorpc;
			pthisMagCal->fB = pthisMagCal->ftrB;
			pthisMagCal->fFourBsq = 4.0F * pthisMagCal->ftrB * pthisMagCal->ftrB;
			for (i = X; i <= Z; i++)
			{
				pthisMagCal->fV[i] = pthisMagCal->ftrV[i];
    e88c:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:478
				for (j = X; j <= Z; j++)
				{
					pthisMagCal->finvW[i][j] = pthisMagCal->ftrinvW[i][j];
    e88e:	60e2      	str	r2, [r4, #12]
    e890:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    e892:	6d22      	ldr	r2, [r4, #80]	; 0x50
    e894:	6123      	str	r3, [r4, #16]
    e896:	6162      	str	r2, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:475
			pthisMagCal->fFitErrorpc = pthisMagCal->ftrFitErrorpc;
			pthisMagCal->fB = pthisMagCal->ftrB;
			pthisMagCal->fFourBsq = 4.0F * pthisMagCal->ftrB * pthisMagCal->ftrB;
			for (i = X; i <= Z; i++)
			{
				pthisMagCal->fV[i] = pthisMagCal->ftrV[i];
    e898:	6c23      	ldr	r3, [r4, #64]	; 0x40
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:478
				for (j = X; j <= Z; j++)
				{
					pthisMagCal->finvW[i][j] = pthisMagCal->ftrinvW[i][j];
    e89a:	6d62      	ldr	r2, [r4, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:475
			pthisMagCal->fFitErrorpc = pthisMagCal->ftrFitErrorpc;
			pthisMagCal->fB = pthisMagCal->ftrB;
			pthisMagCal->fFourBsq = 4.0F * pthisMagCal->ftrB * pthisMagCal->ftrB;
			for (i = X; i <= Z; i++)
			{
				pthisMagCal->fV[i] = pthisMagCal->ftrV[i];
    e89c:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:478
				for (j = X; j <= Z; j++)
				{
					pthisMagCal->finvW[i][j] = pthisMagCal->ftrinvW[i][j];
    e89e:	61a2      	str	r2, [r4, #24]
    e8a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
    e8a2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    e8a4:	61e3      	str	r3, [r4, #28]
    e8a6:	6222      	str	r2, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:475
			pthisMagCal->fFitErrorpc = pthisMagCal->ftrFitErrorpc;
			pthisMagCal->fB = pthisMagCal->ftrB;
			pthisMagCal->fFourBsq = 4.0F * pthisMagCal->ftrB * pthisMagCal->ftrB;
			for (i = X; i <= Z; i++)
			{
				pthisMagCal->fV[i] = pthisMagCal->ftrV[i];
    e8a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:478
				for (j = X; j <= Z; j++)
				{
					pthisMagCal->finvW[i][j] = pthisMagCal->ftrinvW[i][j];
    e8aa:	6e22      	ldr	r2, [r4, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:475
			pthisMagCal->fFitErrorpc = pthisMagCal->ftrFitErrorpc;
			pthisMagCal->fB = pthisMagCal->ftrB;
			pthisMagCal->fFourBsq = 4.0F * pthisMagCal->ftrB * pthisMagCal->ftrB;
			for (i = X; i <= Z; i++)
			{
				pthisMagCal->fV[i] = pthisMagCal->ftrV[i];
    e8ac:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:478
				for (j = X; j <= Z; j++)
				{
					pthisMagCal->finvW[i][j] = pthisMagCal->ftrinvW[i][j];
    e8ae:	6262      	str	r2, [r4, #36]	; 0x24
    e8b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e8b2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:472
		{
			// accept the new calibration solution
			pthisMagCal->iValidMagCal = isolver;
			pthisMagCal->fFitErrorpc = pthisMagCal->ftrFitErrorpc;
			pthisMagCal->fB = pthisMagCal->ftrB;
			pthisMagCal->fFourBsq = 4.0F * pthisMagCal->ftrB * pthisMagCal->ftrB;
    e8b4:	6360      	str	r0, [r4, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:478
			for (i = X; i <= Z; i++)
			{
				pthisMagCal->fV[i] = pthisMagCal->ftrV[i];
				for (j = X; j <= Z; j++)
				{
					pthisMagCal->finvW[i][j] = pthisMagCal->ftrinvW[i][j];
    e8b6:	62a3      	str	r3, [r4, #40]	; 0x28
    e8b8:	62e2      	str	r2, [r4, #44]	; 0x2c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:485
			}
		} // end of test to accept the new calibration 
	} // end of test for geomagenetic field strength in range

	// reset the calibration in progress flag to allow writing to the magnetic buffer
	pthisMagCal->iCalInProgress = 0;
    e8ba:	4b1c      	ldr	r3, [pc, #112]	; (e92c <MagCal_Run+0x12c>)
    e8bc:	2200      	movs	r2, #0
    e8be:	54e2      	strb	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:488

	return;
}
    e8c0:	bc04      	pop	{r2}
    e8c2:	4690      	mov	r8, r2
    e8c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:435
		// call the 4 element matrix inversion calibration
		isolver = 4;
		fUpdateCalibration4INV(pthisMagCal, pthisMagBuffer, &thisMag);
	}
	// 7 element calibration case
	else if (pthisMagBuffer->iMagBufferCount < MINMEASUREMENTS10CAL)
    e8c6:	2b95      	cmp	r3, #149	; 0x95
    e8c8:	dc15      	bgt.n	e8f6 <MagCal_Run+0xf6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:438
	{
		// age the existing fit error to avoid one good calibration locking out future updates
		if (pthisMagCal->iValidMagCal)
    e8ca:	4b14      	ldr	r3, [pc, #80]	; (e91c <MagCal_Run+0x11c>)
    e8cc:	56c3      	ldrsb	r3, [r0, r3]
    e8ce:	2b00      	cmp	r3, #0
    e8d0:	d004      	beq.n	e8dc <MagCal_Run+0xdc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:440
		{
			pthisMagCal->fFitErrorpc *= (1.0F + (float) INTERVAL7CAL * (float) OVERSAMPLE_RATIO / ((float) SENSORFS * FITERRORAGINGSECS));	
    e8d2:	6b80      	ldr	r0, [r0, #56]	; 0x38
    e8d4:	4916      	ldr	r1, [pc, #88]	; (e930 <MagCal_Run+0x130>)
    e8d6:	f7f2 fa5d 	bl	d94 <__aeabi_fmul>
    e8da:	63a0      	str	r0, [r4, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:444
		}
		// call the 7 element eigenpair calibration
		isolver = 7;
		fUpdateCalibration7EIG(pthisMagCal, pthisMagBuffer, &thisMag);
    e8dc:	1c20      	adds	r0, r4, #0
    e8de:	1c29      	adds	r1, r5, #0
    e8e0:	4a0f      	ldr	r2, [pc, #60]	; (e920 <MagCal_Run+0x120>)
    e8e2:	f7fb ff17 	bl	a714 <fUpdateCalibration7EIG>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:443
		if (pthisMagCal->iValidMagCal)
		{
			pthisMagCal->fFitErrorpc *= (1.0F + (float) INTERVAL7CAL * (float) OVERSAMPLE_RATIO / ((float) SENSORFS * FITERRORAGINGSECS));	
		}
		// call the 7 element eigenpair calibration
		isolver = 7;
    e8e6:	2607      	movs	r6, #7
    e8e8:	e79d      	b.n	e826 <MagCal_Run+0x26>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:428
	if (pthisMagBuffer->iMagBufferCount < MINMEASUREMENTS7CAL)
	{
		// age the existing fit error to avoid one good calibration locking out future updates
		if (pthisMagCal->iValidMagCal)
		{
			pthisMagCal->fFitErrorpc *= (1.0F + (float) INTERVAL4CAL * (float) OVERSAMPLE_RATIO / ((float) SENSORFS * FITERRORAGINGSECS));	
    e8ea:	6b80      	ldr	r0, [r0, #56]	; 0x38
    e8ec:	4911      	ldr	r1, [pc, #68]	; (e934 <MagCal_Run+0x134>)
    e8ee:	f7f2 fa51 	bl	d94 <__aeabi_fmul>
    e8f2:	63a0      	str	r0, [r4, #56]	; 0x38
    e8f4:	e791      	b.n	e81a <MagCal_Run+0x1a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:450
	}
	// 10 element calibration case
	else
	{
		// age the existing fit error to avoid one good calibration locking out future updates
		if (pthisMagCal->iValidMagCal)
    e8f6:	4b09      	ldr	r3, [pc, #36]	; (e91c <MagCal_Run+0x11c>)
    e8f8:	56c3      	ldrsb	r3, [r0, r3]
    e8fa:	2b00      	cmp	r3, #0
    e8fc:	d004      	beq.n	e908 <MagCal_Run+0x108>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:452
		{
			pthisMagCal->fFitErrorpc *= (1.0F + (float) INTERVAL10CAL * (float) OVERSAMPLE_RATIO / ((float) SENSORFS * FITERRORAGINGSECS));	
    e8fe:	6b80      	ldr	r0, [r0, #56]	; 0x38
    e900:	490d      	ldr	r1, [pc, #52]	; (e938 <MagCal_Run+0x138>)
    e902:	f7f2 fa47 	bl	d94 <__aeabi_fmul>
    e906:	63a0      	str	r0, [r4, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:456
		}
		// call the 10 element eigenpair calibration
		isolver = 10;
		fUpdateCalibration10EIG(pthisMagCal, pthisMagBuffer, &thisMag);
    e908:	1c20      	adds	r0, r4, #0
    e90a:	1c29      	adds	r1, r5, #0
    e90c:	4a04      	ldr	r2, [pc, #16]	; (e920 <MagCal_Run+0x120>)
    e90e:	f7fc f9f3 	bl	acf8 <fUpdateCalibration10EIG>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/tasks.c:455
		if (pthisMagCal->iValidMagCal)
		{
			pthisMagCal->fFitErrorpc *= (1.0F + (float) INTERVAL10CAL * (float) OVERSAMPLE_RATIO / ((float) SENSORFS * FITERRORAGINGSECS));	
		}
		// call the 10 element eigenpair calibration
		isolver = 10;
    e912:	260a      	movs	r6, #10
    e914:	e787      	b.n	e826 <MagCal_Run+0x26>
    e916:	46c0      	nop			; (mov r8, r8)
    e918:	00000b56 	.word	0x00000b56
    e91c:	00000416 	.word	0x00000416
    e920:	20000370 	.word	0x20000370
    e924:	41200000 	.word	0x41200000
    e928:	42b40000 	.word	0x42b40000
    e92c:	00000414 	.word	0x00000414
    e930:	3f802d83 	.word	0x3f802d83
    e934:	3f800da7 	.word	0x3f800da7
    e938:	3f808889 	.word	0x3f808889

0000e93c <rx_callback>:
rx_callback():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:120
	}
}

// Callback feeding delimited frames to distant IO
void rx_callback(uint8_t* data, uint16_t datasize)
{
    e93c:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:122

	distantio_decode(data,datasize);
    e93e:	f002 fb6f 	bl	11020 <distantio_decode>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:123
}
    e942:	bd08      	pop	{r3, pc}

0000e944 <UserStartup>:
UserStartup():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:49
void rx_callback(uint8_t* data, uint16_t datasize);

uint32_t counter;

void UserStartup(void)
{
    e944:	b530      	push	{r4, r5, lr}
    e946:	b08b      	sub	sp, #44	; 0x2c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:51
	// Init serial
	RNG1_Init();
    e948:	f002 f856 	bl	109f8 <RNG1_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:53

	deviceData.handle = UART_Init(&deviceData);
    e94c:	4c14      	ldr	r4, [pc, #80]	; (e9a0 <UserStartup+0x5c>)
    e94e:	1c20      	adds	r0, r4, #0
    e950:	f002 f992 	bl	10c78 <UART_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:54
	deviceData.rxChar = '\0';
    e954:	2300      	movs	r3, #0
    e956:	7123      	strb	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:55
	deviceData.rxCallback = RNG1_Put;
    e958:	4b12      	ldr	r3, [pc, #72]	; (e9a4 <UserStartup+0x60>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:57

	UART_ReceiveBlock(deviceData.handle, (LDD_TData *)&(deviceData.rxChar), sizeof(deviceData.rxChar));
    e95a:	1d21      	adds	r1, r4, #4
    e95c:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:55
	// Init serial
	RNG1_Init();

	deviceData.handle = UART_Init(&deviceData);
	deviceData.rxChar = '\0';
	deviceData.rxCallback = RNG1_Put;
    e95e:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:53
void UserStartup(void)
{
	// Init serial
	RNG1_Init();

	deviceData.handle = UART_Init(&deviceData);
    e960:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:57
	deviceData.rxChar = '\0';
	deviceData.rxCallback = RNG1_Put;

	UART_ReceiveBlock(deviceData.handle, (LDD_TData *)&(deviceData.rxChar), sizeof(deviceData.rxChar));
    e962:	f002 fa0f 	bl	10d84 <UART_ReceiveBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:61

	// Init bluetooth
	uint8_t data[30];
	strcpy((char *)data, "ATSRM,2,0\r");
    e966:	a902      	add	r1, sp, #8
    e968:	4b0f      	ldr	r3, [pc, #60]	; (e9a8 <UserStartup+0x64>)
    e96a:	1c0a      	adds	r2, r1, #0
    e96c:	cb21      	ldmia	r3!, {r0, r5}
    e96e:	c221      	stmia	r2!, {r0, r5}
    e970:	8818      	ldrh	r0, [r3, #0]
    e972:	8010      	strh	r0, [r2, #0]
    e974:	789b      	ldrb	r3, [r3, #2]
    e976:	7093      	strb	r3, [r2, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:63
	uint16_t ilen = strlen((char *)data);
	sendBytes(deviceData.handle,data,ilen);
    e978:	6820      	ldr	r0, [r4, #0]
    e97a:	220a      	movs	r2, #10
    e97c:	f000 f83a 	bl	e9f4 <sendBytes>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:66

	// Init serial protocol and distant io
	init_protocol();
    e980:	f000 f842 	bl	ea08 <init_protocol>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:67
	init_distantio(deviceData.handle);
    e984:	6820      	ldr	r0, [r4, #0]
    e986:	f002 facf 	bl	10f28 <init_distantio>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:70

	// Register variables
	register_var((void*)&counter, sizeof(counter), dio_type_UINT32, FALSE, "COUNTER");
    e98a:	4b08      	ldr	r3, [pc, #32]	; (e9ac <UserStartup+0x68>)
    e98c:	2104      	movs	r1, #4
    e98e:	9300      	str	r3, [sp, #0]
    e990:	2203      	movs	r2, #3
    e992:	2300      	movs	r3, #0
    e994:	4806      	ldr	r0, [pc, #24]	; (e9b0 <UserStartup+0x6c>)
    e996:	f002 fb0d 	bl	10fb4 <register_var>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:71
}
    e99a:	b00b      	add	sp, #44	; 0x2c
    e99c:	bd30      	pop	{r4, r5, pc}
    e99e:	46c0      	nop			; (mov r8, r8)
    e9a0:	1fffe0a0 	.word	0x1fffe0a0
    e9a4:	000108d9 	.word	0x000108d9
    e9a8:	00013290 	.word	0x00013290
    e9ac:	0001329c 	.word	0x0001329c
    e9b0:	20000448 	.word	0x20000448

0000e9b4 <UserHighFrequencyTaskInit>:
UserHighFrequencyTaskInit():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:80
	// User code to be executed ONE TIME the first time the high frequency task is run.
	//
	// PUT YOUR CODE HERE
	//
	return;
}
    e9b4:	4770      	bx	lr
    e9b6:	46c0      	nop			; (mov r8, r8)

0000e9b8 <UserMediumFrequencyTaskInit>:
UserMediumFrequencyTaskInit():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:89
	// User code to be executed ONE TIME the first time the medium frequency task is run
	//
	// PUT YOUR CODE HERE
	//
	return;
}
    e9b8:	4770      	bx	lr
    e9ba:	46c0      	nop			; (mov r8, r8)

0000e9bc <UserHighFrequencyTaskRun>:
UserHighFrequencyTaskRun():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:102
	// The high frequency task also has highest priority.
	//
	// PUT YOUR CODE HERE
	//
	return;
}
    e9bc:	4770      	bx	lr
    e9be:	46c0      	nop			; (mov r8, r8)

0000e9c0 <UserMediumFrequencyTaskRun>:
UserMediumFrequencyTaskRun():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:105

void UserMediumFrequencyTaskRun(void)
{
    e9c0:	b530      	push	{r4, r5, lr}
    e9c2:	b083      	sub	sp, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:107
	// Process RX data
	if(RNG1_NofFreeElements() > 0)
    e9c4:	f002 f810 	bl	109e8 <RNG1_NofFreeElements>
    e9c8:	2800      	cmp	r0, #0
    e9ca:	d00e      	beq.n	e9ea <UserMediumFrequencyTaskRun+0x2a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:112 (discriminator 1)
	{
		while (RNG1_NofElements()!=0)
		{
		  unsigned char ch;
		  RNG1_Get(&ch);
    e9cc:	466c      	mov	r4, sp
    e9ce:	3407      	adds	r4, #7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:113 (discriminator 1)
		  decode(ch,rx_callback);
    e9d0:	4d07      	ldr	r5, [pc, #28]	; (e9f0 <UserMediumFrequencyTaskRun+0x30>)
    e9d2:	e006      	b.n	e9e2 <UserMediumFrequencyTaskRun+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:112
	if(RNG1_NofFreeElements() > 0)
	{
		while (RNG1_NofElements()!=0)
		{
		  unsigned char ch;
		  RNG1_Get(&ch);
    e9d4:	1c20      	adds	r0, r4, #0
    e9d6:	f001 ffbf 	bl	10958 <RNG1_Get>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:113
		  decode(ch,rx_callback);
    e9da:	7820      	ldrb	r0, [r4, #0]
    e9dc:	1c29      	adds	r1, r5, #0
    e9de:	f000 f831 	bl	ea44 <decode>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:109 (discriminator 1)
void UserMediumFrequencyTaskRun(void)
{
	// Process RX data
	if(RNG1_NofFreeElements() > 0)
	{
		while (RNG1_NofElements()!=0)
    e9e2:	f001 fffb 	bl	109dc <RNG1_NofElements>
    e9e6:	2800      	cmp	r0, #0
    e9e8:	d1f4      	bne.n	e9d4 <UserMediumFrequencyTaskRun+0x14>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:116
		  unsigned char ch;
		  RNG1_Get(&ch);
		  decode(ch,rx_callback);
		}
	}
}
    e9ea:	b003      	add	sp, #12
    e9ec:	bd30      	pop	{r4, r5, pc}
    e9ee:	46c0      	nop			; (mov r8, r8)
    e9f0:	0000e93d 	.word	0x0000e93d

0000e9f4 <sendBytes>:
sendBytes():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/functions.c:18
	UART_SendBlock(handle, ch, sizeof(*ch));
	while(! UART_GetTxCompleteStatus(handle));
}

void sendBytes(LDD_TDeviceData *handle, unsigned char* data, uint16_t size)
{
    e9f4:	b510      	push	{r4, lr}
    e9f6:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/functions.c:19
	UART_SendBlock(handle, data, size);
    e9f8:	f002 f9da 	bl	10db0 <UART_SendBlock>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/functions.c:20 (discriminator 1)
	while(! UART_GetTxCompleteStatus(handle));
    e9fc:	1c20      	adds	r0, r4, #0
    e9fe:	f002 f9fd 	bl	10dfc <UART_GetTxCompleteStatus>
    ea02:	2800      	cmp	r0, #0
    ea04:	d0fa      	beq.n	e9fc <sendBytes+0x8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/functions.c:21
}
    ea06:	bd10      	pop	{r4, pc}

0000ea08 <init_protocol>:
init_protocol():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:37
uint8_t ESC_;


void init_protocol()
{
	protocol_state = IDLE;
    ea08:	4a08      	ldr	r2, [pc, #32]	; (ea2c <init_protocol+0x24>)
    ea0a:	2300      	movs	r3, #0
    ea0c:	7013      	strb	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:38
	escape_state = NONE;
    ea0e:	4a08      	ldr	r2, [pc, #32]	; (ea30 <init_protocol+0x28>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:40
	
	SOF_ = 0xF7;
    ea10:	21f7      	movs	r1, #247	; 0xf7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:38


void init_protocol()
{
	protocol_state = IDLE;
	escape_state = NONE;
    ea12:	7013      	strb	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:40
	
	SOF_ = 0xF7;
    ea14:	4a07      	ldr	r2, [pc, #28]	; (ea34 <init_protocol+0x2c>)
    ea16:	7011      	strb	r1, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:41
	EOF_ = 0x7F;
    ea18:	4a07      	ldr	r2, [pc, #28]	; (ea38 <init_protocol+0x30>)
    ea1a:	217f      	movs	r1, #127	; 0x7f
    ea1c:	7011      	strb	r1, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:42
	ESC_ = 0x7D;
    ea1e:	4a07      	ldr	r2, [pc, #28]	; (ea3c <init_protocol+0x34>)
    ea20:	217d      	movs	r1, #125	; 0x7d
    ea22:	7011      	strb	r1, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:44

	decodingIndex = 0;
    ea24:	4a06      	ldr	r2, [pc, #24]	; (ea40 <init_protocol+0x38>)
    ea26:	8013      	strh	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:45
}
    ea28:	4770      	bx	lr
    ea2a:	46c0      	nop			; (mov r8, r8)
    ea2c:	2000044e 	.word	0x2000044e
    ea30:	2000044f 	.word	0x2000044f
    ea34:	20000452 	.word	0x20000452
    ea38:	20000451 	.word	0x20000451
    ea3c:	20000450 	.word	0x20000450
    ea40:	2000044c 	.word	0x2000044c

0000ea44 <decode>:
decode():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:82
	// Operation is done, call function callback
	callback(encodingBuffer,index);
}

void decode(uint8_t received_byte, void (*callback)(uint8_t*,uint16_t))
{
    ea44:	b538      	push	{r3, r4, r5, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:86
	static uint8_t decodingBuffer[DECODING_BUFFER_SIZE];

	// If a reception was in process
	if(protocol_state == IN_PROCESS)
    ea46:	4b1c      	ldr	r3, [pc, #112]	; (eab8 <decode+0x74>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:82
	// Operation is done, call function callback
	callback(encodingBuffer,index);
}

void decode(uint8_t received_byte, void (*callback)(uint8_t*,uint16_t))
{
    ea48:	1c0c      	adds	r4, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:86
	static uint8_t decodingBuffer[DECODING_BUFFER_SIZE];

	// If a reception was in process
	if(protocol_state == IN_PROCESS)
    ea4a:	781a      	ldrb	r2, [r3, #0]
    ea4c:	2a01      	cmp	r2, #1
    ea4e:	d00c      	beq.n	ea6a <decode+0x26>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:136
			}
		}
	}
	else
	{
		if(received_byte == SOF_)
    ea50:	4a1a      	ldr	r2, [pc, #104]	; (eabc <decode+0x78>)
    ea52:	7812      	ldrb	r2, [r2, #0]
    ea54:	4282      	cmp	r2, r0
    ea56:	d000      	beq.n	ea5a <decode+0x16>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:147
		else
		{
			//Received character outside a valid frame, ignore it
		}
	}
}
    ea58:	bd38      	pop	{r3, r4, r5, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:138
	}
	else
	{
		if(received_byte == SOF_)
		{
			protocol_state = IN_PROCESS;
    ea5a:	2201      	movs	r2, #1
    ea5c:	701a      	strb	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:139
			decodingIndex = 0;
    ea5e:	4b18      	ldr	r3, [pc, #96]	; (eac0 <decode+0x7c>)
    ea60:	2200      	movs	r2, #0
    ea62:	801a      	strh	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:140
			escape_state = NONE;
    ea64:	4b17      	ldr	r3, [pc, #92]	; (eac4 <decode+0x80>)
    ea66:	701a      	strb	r2, [r3, #0]
    ea68:	e7f6      	b.n	ea58 <decode+0x14>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:89

	// If a reception was in process
	if(protocol_state == IN_PROCESS)
	{
		// If the character was previously marked as pure data
		if(escape_state == NEXT)
    ea6a:	4916      	ldr	r1, [pc, #88]	; (eac4 <decode+0x80>)
    ea6c:	780d      	ldrb	r5, [r1, #0]
    ea6e:	2d01      	cmp	r5, #1
    ea70:	d007      	beq.n	ea82 <decode+0x3e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:107
			}
		}
		else
		{
			// End of frame
			if(received_byte == EOF_)
    ea72:	4d15      	ldr	r5, [pc, #84]	; (eac8 <decode+0x84>)
    ea74:	782d      	ldrb	r5, [r5, #0]
    ea76:	4285      	cmp	r5, r0
    ea78:	d016      	beq.n	eaa8 <decode+0x64>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:113
			{
				protocol_state = IDLE;
				// Call the function callback for end of frame
				callback(decodingBuffer,decodingIndex);
			}
			else if(received_byte == ESC_)
    ea7a:	4c14      	ldr	r4, [pc, #80]	; (eacc <decode+0x88>)
    ea7c:	7824      	ldrb	r4, [r4, #0]
    ea7e:	4284      	cmp	r4, r0
    ea80:	d010      	beq.n	eaa4 <decode+0x60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:92
	{
		// If the character was previously marked as pure data
		if(escape_state == NEXT)
		{
			// If max buffer size was reached, cancel reception to avoid overflowing buffer
			if(decodingIndex + 1 >= DECODING_BUFFER_SIZE)
    ea82:	4a0f      	ldr	r2, [pc, #60]	; (eac0 <decode+0x7c>)
    ea84:	8814      	ldrh	r4, [r2, #0]
    ea86:	2cfe      	cmp	r4, #254	; 0xfe
    ea88:	dd05      	ble.n	ea96 <decode+0x52>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:94
			{
				decodingIndex = 0;
    ea8a:	2000      	movs	r0, #0
    ea8c:	2400      	movs	r4, #0
    ea8e:	8014      	strh	r4, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:95
				protocol_state = IDLE;
    ea90:	7018      	strb	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:96
				escape_state = NONE;
    ea92:	7008      	strb	r0, [r1, #0]
    ea94:	e7e0      	b.n	ea58 <decode+0x14>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:128
					protocol_state = IDLE;
					escape_state = NONE;
				}
				else
				{
					decodingBuffer[decodingIndex++] = received_byte;
    ea96:	1c63      	adds	r3, r4, #1
    ea98:	8013      	strh	r3, [r2, #0]
    ea9a:	4b0d      	ldr	r3, [pc, #52]	; (ead0 <decode+0x8c>)
    ea9c:	5518      	strb	r0, [r3, r4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:129
					escape_state = NONE;
    ea9e:	2300      	movs	r3, #0
    eaa0:	700b      	strb	r3, [r1, #0]
    eaa2:	e7d9      	b.n	ea58 <decode+0x14>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:115
				// Call the function callback for end of frame
				callback(decodingBuffer,decodingIndex);
			}
			else if(received_byte == ESC_)
			{
				escape_state = NEXT;
    eaa4:	700a      	strb	r2, [r1, #0]
    eaa6:	e7d7      	b.n	ea58 <decode+0x14>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:109
		else
		{
			// End of frame
			if(received_byte == EOF_)
			{
				protocol_state = IDLE;
    eaa8:	2200      	movs	r2, #0
    eaaa:	701a      	strb	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../SerialProtocol/protocol.c:111
				// Call the function callback for end of frame
				callback(decodingBuffer,decodingIndex);
    eaac:	4b04      	ldr	r3, [pc, #16]	; (eac0 <decode+0x7c>)
    eaae:	4808      	ldr	r0, [pc, #32]	; (ead0 <decode+0x8c>)
    eab0:	8819      	ldrh	r1, [r3, #0]
    eab2:	47a0      	blx	r4
    eab4:	e7d0      	b.n	ea58 <decode+0x14>
    eab6:	46c0      	nop			; (mov r8, r8)
    eab8:	2000044e 	.word	0x2000044e
    eabc:	20000452 	.word	0x20000452
    eac0:	2000044c 	.word	0x2000044c
    eac4:	2000044f 	.word	0x2000044f
    eac8:	20000451 	.word	0x20000451
    eacc:	20000450 	.word	0x20000450
    ead0:	1fffe0ac 	.word	0x1fffe0ac

0000ead4 <__copy_rom_sections_to_ram>:
__copy_rom_sections_to_ram():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:116
    ead4:	4b1c      	ldr	r3, [pc, #112]	; (eb48 <__copy_rom_sections_to_ram+0x74>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:112
    ead6:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:116
    ead8:	2b00      	cmp	r3, #0
    eada:	d100      	bne.n	eade <__copy_rom_sections_to_ram+0xa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:135
    eadc:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:116
    eade:	2700      	movs	r7, #0
    eae0:	2503      	movs	r5, #3
    eae2:	2601      	movs	r6, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:122 (discriminator 1)
    eae4:	19d8      	adds	r0, r3, r7
    eae6:	6802      	ldr	r2, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:127 (discriminator 1)
    eae8:	6841      	ldr	r1, [r0, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:121 (discriminator 1)
    eaea:	2a00      	cmp	r2, #0
    eaec:	d126      	bne.n	eb3c <__copy_rom_sections_to_ram+0x68>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:122
    eaee:	2900      	cmp	r1, #0
    eaf0:	d104      	bne.n	eafc <__copy_rom_sections_to_ram+0x28>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:123
    eaf2:	6882      	ldr	r2, [r0, #8]
    eaf4:	2a00      	cmp	r2, #0
    eaf6:	d0f1      	beq.n	eadc <__copy_rom_sections_to_ram+0x8>
    eaf8:	370c      	adds	r7, #12
    eafa:	e7f3      	b.n	eae4 <__copy_rom_sections_to_ram+0x10>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:127
    eafc:	6880      	ldr	r0, [r0, #8]
__copy_rom_section():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:69
    eafe:	2800      	cmp	r0, #0
    eb00:	d0fa      	beq.n	eaf8 <__copy_rom_sections_to_ram+0x24>
    eb02:	1c14      	adds	r4, r2, #0
    eb04:	430c      	orrs	r4, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:78
    eb06:	4225      	tst	r5, r4
    eb08:	d108      	bne.n	eb1c <__copy_rom_sections_to_ram+0x48>
    eb0a:	2803      	cmp	r0, #3
    eb0c:	d906      	bls.n	eb1c <__copy_rom_sections_to_ram+0x48>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:80
    eb0e:	ca10      	ldmia	r2!, {r4}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:83
    eb10:	3804      	subs	r0, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:80
    eb12:	c110      	stmia	r1!, {r4}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:69
    eb14:	2800      	cmp	r0, #0
    eb16:	d1f4      	bne.n	eb02 <__copy_rom_sections_to_ram+0x2e>
    eb18:	370c      	adds	r7, #12
    eb1a:	e7e3      	b.n	eae4 <__copy_rom_sections_to_ram+0x10>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:85
    eb1c:	4226      	tst	r6, r4
    eb1e:	d107      	bne.n	eb30 <__copy_rom_sections_to_ram+0x5c>
    eb20:	2801      	cmp	r0, #1
    eb22:	d905      	bls.n	eb30 <__copy_rom_sections_to_ram+0x5c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:87
    eb24:	8814      	ldrh	r4, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:90
    eb26:	3802      	subs	r0, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:87
    eb28:	800c      	strh	r4, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:89
    eb2a:	3202      	adds	r2, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:88
    eb2c:	3102      	adds	r1, #2
    eb2e:	e7e6      	b.n	eafe <__copy_rom_sections_to_ram+0x2a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:94
    eb30:	7814      	ldrb	r4, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:97
    eb32:	3801      	subs	r0, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:94
    eb34:	700c      	strb	r4, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:96
    eb36:	3201      	adds	r2, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:95
    eb38:	3101      	adds	r1, #1
    eb3a:	e7e0      	b.n	eafe <__copy_rom_sections_to_ram+0x2a>
__copy_rom_sections_to_ram():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:127
    eb3c:	6880      	ldr	r0, [r0, #8]
__copy_rom_section():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:69
    eb3e:	428a      	cmp	r2, r1
    eb40:	d1dd      	bne.n	eafe <__copy_rom_sections_to_ram+0x2a>
    eb42:	370c      	adds	r7, #12
    eb44:	e7ce      	b.n	eae4 <__copy_rom_sections_to_ram+0x10>
    eb46:	46c0      	nop			; (mov r8, r8)
    eb48:	00013c4c 	.word	0x00013c4c

0000eb4c <__init_registers>:
__init_registers():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:189
    eb4c:	4770      	bx	lr
    eb4e:	46c0      	nop			; (mov r8, r8)

0000eb50 <__init_user>:
__init_user():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:199
    eb50:	4770      	bx	lr
    eb52:	46c0      	nop			; (mov r8, r8)

0000eb54 <__thumb_startup>:
__thumb_startup():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:211
    eb54:	b538      	push	{r3, r4, r5, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:215
    eb56:	f7ff fff9 	bl	eb4c <__init_registers>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:218
    eb5a:	f001 fa91 	bl	10080 <__init_hardware>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:223
    eb5e:	4b18      	ldr	r3, [pc, #96]	; (ebc0 <skip_sp+0x4e>)
    eb60:	1c18      	adds	r0, r3, #0
    eb62:	2800      	cmp	r0, #0
    eb64:	d005      	beq.n	eb72 <skip_sp>
    eb66:	4685      	mov	sp, r0
    eb68:	b081      	sub	sp, #4
    eb6a:	2000      	movs	r0, #0
    eb6c:	43c0      	mvns	r0, r0
    eb6e:	9000      	str	r0, [sp, #0]
    eb70:	b001      	add	sp, #4

0000eb72 <skip_sp>:
zero_fill_bss():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:143
    eb72:	4b14      	ldr	r3, [pc, #80]	; (ebc4 <skip_sp+0x52>)
    eb74:	4a14      	ldr	r2, [pc, #80]	; (ebc8 <skip_sp+0x56>)
    eb76:	1ad2      	subs	r2, r2, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:154
    eb78:	d108      	bne.n	eb8c <skip_sp+0x1a>
__thumb_startup():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:241
    eb7a:	f7ff ffab 	bl	ead4 <__copy_rom_sections_to_ram>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:247
    eb7e:	f7ff ffe7 	bl	eb50 <__init_user>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:249
    eb82:	2000      	movs	r0, #0
    eb84:	4911      	ldr	r1, [pc, #68]	; (ebcc <skip_sp+0x5a>)
    eb86:	f7fc fda9 	bl	b6dc <main>
    eb8a:	e7fe      	b.n	eb8a <skip_sp+0x18>
zero_fill_bss():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:163
    eb8c:	2503      	movs	r5, #3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:169
    eb8e:	2401      	movs	r4, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:177
    eb90:	2000      	movs	r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:163
    eb92:	1c29      	adds	r1, r5, #0
    eb94:	4019      	ands	r1, r3
    eb96:	d106      	bne.n	eba6 <skip_sp+0x34>
    eb98:	2a03      	cmp	r2, #3
    eb9a:	d904      	bls.n	eba6 <skip_sp+0x34>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:165
    eb9c:	c302      	stmia	r3!, {r1}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:167
    eb9e:	3a04      	subs	r2, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:160
    eba0:	2a00      	cmp	r2, #0
    eba2:	d1f6      	bne.n	eb92 <skip_sp+0x20>
    eba4:	e7e9      	b.n	eb7a <skip_sp+0x8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:169
    eba6:	1c21      	adds	r1, r4, #0
    eba8:	4019      	ands	r1, r3
    ebaa:	d105      	bne.n	ebb8 <skip_sp+0x46>
    ebac:	2a01      	cmp	r2, #1
    ebae:	d903      	bls.n	ebb8 <skip_sp+0x46>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:171
    ebb0:	8019      	strh	r1, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:173
    ebb2:	3a02      	subs	r2, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:172
    ebb4:	3302      	adds	r3, #2
    ebb6:	e7f3      	b.n	eba0 <skip_sp+0x2e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:177
    ebb8:	7018      	strb	r0, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:179
    ebba:	3a01      	subs	r2, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:178
    ebbc:	3301      	adds	r3, #1
    ebbe:	e7ef      	b.n	eba0 <skip_sp+0x2e>
    ebc0:	20006000 	.word	0x20006000
    ebc4:	1fffe080 	.word	0x1fffe080
    ebc8:	20001de8 	.word	0x20001de8
    ebcc:	1fffe1ac 	.word	0x1fffe1ac

0000ebd0 <_psp_int_install>:
_psp_int_install():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/int_inst.c:41
 * \brief This function initializes kernel interrupt tables.
 */
#if MQX_USE_INTERRUPTS

void _psp_int_install(void)
{
    ebd0:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/int_inst.c:45
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);
    __set_MSP((uint_32)kernel_data->INTERRUPT_STACK_PTR);
    ebd2:	4b03      	ldr	r3, [pc, #12]	; (ebe0 <_psp_int_install+0x10>)
    ebd4:	681b      	ldr	r3, [r3, #0]
    ebd6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    ebd8:	f004 ffd5 	bl	13b86 <__set_MSP>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/int_inst.c:61
        for (i = 16; i < PSP_MAXIMUM_INTERRUPT_VECTORS; i++) {
            ptr[i] = (uint_32)_int_kernel_isr;
        }
    }
#endif
}
    ebdc:	bd08      	pop	{r3, pc}
    ebde:	46c0      	nop			; (mov r8, r8)
    ebe0:	1fffe000 	.word	0x1fffe000

0000ebe4 <_int_set_vector_table>:
_int_set_vector_table():

   _GET_KERNEL_DATA(kernel_data);
   kernel_data->USERS_VBR = addr;
#endif

   old = _PSP_GET_VTOR();
    ebe4:	4b03      	ldr	r3, [pc, #12]	; (ebf4 <_int_set_vector_table+0x10>)
    ebe6:	22e0      	movs	r2, #224	; 0xe0
    ebe8:	0612      	lsls	r2, r2, #24
    ebea:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/int_vtab.c:62
   _PSP_SET_VTOR(addr);
    ebec:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/int_vtab.c:66

   return (old);

} /* Endbody */
    ebee:	1c08      	adds	r0, r1, #0
    ebf0:	4770      	bx	lr
    ebf2:	46c0      	nop			; (mov r8, r8)
    ebf4:	0000ed08 	.word	0x0000ed08

0000ebf8 <_mem_zero>:
_mem_zero():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:56
      register pointer from_ptr,

      /* [IN] the number of bytes to zero */
      register _mem_size number_of_bytes
   )
{ /* Body */
    ebf8:	b530      	push	{r4, r5, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:71
   uint_8_ptr from8_ptr = (uint_8_ptr) from_ptr;
   uint_16_ptr from16_ptr = (uint_16_ptr) from_ptr;
   register uint_32_ptr from32_ptr = (uint_32_ptr) from_ptr;
   register uint_32 loops;

   if (number_of_bytes > 3) {
    ebfa:	2903      	cmp	r1, #3
    ebfc:	d958      	bls.n	ecb0 <_mem_zero+0xb8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:74

      /* Try to align source on word */
      if ((uint_32)from_ptr & 1) {
    ebfe:	07c3      	lsls	r3, r0, #31
    ec00:	d503      	bpl.n	ec0a <_mem_zero+0x12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:76
         from8_ptr = (uint_8_ptr) from_ptr;
         *from8_ptr++ = 0;
    ec02:	2300      	movs	r3, #0
    ec04:	7003      	strb	r3, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:79

         from_ptr = from8_ptr;
         --number_of_bytes;
    ec06:	3901      	subs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:78
      /* Try to align source on word */
      if ((uint_32)from_ptr & 1) {
         from8_ptr = (uint_8_ptr) from_ptr;
         *from8_ptr++ = 0;

         from_ptr = from8_ptr;
    ec08:	3001      	adds	r0, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:83
         --number_of_bytes;
      } /* Endif */

      /* Try to align source on longword */
      if ((uint_32)from_ptr & 2) {
    ec0a:	0783      	lsls	r3, r0, #30
    ec0c:	d503      	bpl.n	ec16 <_mem_zero+0x1e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:86
         from16_ptr = (uint_16_ptr) from_ptr;

         *from16_ptr++ = 0;
    ec0e:	2300      	movs	r3, #0
    ec10:	8003      	strh	r3, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:89

         from_ptr = from16_ptr;
         number_of_bytes -= 2;
    ec12:	3902      	subs	r1, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:88
      if ((uint_32)from_ptr & 2) {
         from16_ptr = (uint_16_ptr) from_ptr;

         *from16_ptr++ = 0;

         from_ptr = from16_ptr;
    ec14:	3002      	adds	r0, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:99
      /*
      ** so lets copy longwords...
      ** to increase performance, we will do 64 bytes (16 * longwords) at once and after that jumping
      ** This consumes more RAM, more flash, but gets less instruction cycles.
      */
      for (loops = number_of_bytes >> 6; loops != 0; loops--) {
    ec16:	098d      	lsrs	r5, r1, #6
    ec18:	d018      	beq.n	ec4c <_mem_zero+0x54>
    ec1a:	1c03      	adds	r3, r0, #0
    ec1c:	1c2c      	adds	r4, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:101
         /* copy 16 longwords */
         *from32_ptr++ = 0;
    ec1e:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:99 (discriminator 2)
      /*
      ** so lets copy longwords...
      ** to increase performance, we will do 64 bytes (16 * longwords) at once and after that jumping
      ** This consumes more RAM, more flash, but gets less instruction cycles.
      */
      for (loops = number_of_bytes >> 6; loops != 0; loops--) {
    ec20:	3c01      	subs	r4, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:101 (discriminator 2)
         /* copy 16 longwords */
         *from32_ptr++ = 0;
    ec22:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:102 (discriminator 2)
         *from32_ptr++ = 0;
    ec24:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:103 (discriminator 2)
         *from32_ptr++ = 0;
    ec26:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:104 (discriminator 2)
         *from32_ptr++ = 0;
    ec28:	60da      	str	r2, [r3, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:105 (discriminator 2)
         *from32_ptr++ = 0;
    ec2a:	611a      	str	r2, [r3, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:106 (discriminator 2)
         *from32_ptr++ = 0;
    ec2c:	615a      	str	r2, [r3, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:107 (discriminator 2)
         *from32_ptr++ = 0;
    ec2e:	619a      	str	r2, [r3, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:108 (discriminator 2)
         *from32_ptr++ = 0;
    ec30:	61da      	str	r2, [r3, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:109 (discriminator 2)
         *from32_ptr++ = 0;
    ec32:	621a      	str	r2, [r3, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:110 (discriminator 2)
         *from32_ptr++ = 0;
    ec34:	625a      	str	r2, [r3, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:111 (discriminator 2)
         *from32_ptr++ = 0;
    ec36:	629a      	str	r2, [r3, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:112 (discriminator 2)
         *from32_ptr++ = 0;
    ec38:	62da      	str	r2, [r3, #44]	; 0x2c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:113 (discriminator 2)
         *from32_ptr++ = 0;
    ec3a:	631a      	str	r2, [r3, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:114 (discriminator 2)
         *from32_ptr++ = 0;
    ec3c:	635a      	str	r2, [r3, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:115 (discriminator 2)
         *from32_ptr++ = 0;
    ec3e:	639a      	str	r2, [r3, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:116 (discriminator 2)
         *from32_ptr++ = 0;
    ec40:	63da      	str	r2, [r3, #60]	; 0x3c
    ec42:	3340      	adds	r3, #64	; 0x40
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:99 (discriminator 2)
      /*
      ** so lets copy longwords...
      ** to increase performance, we will do 64 bytes (16 * longwords) at once and after that jumping
      ** This consumes more RAM, more flash, but gets less instruction cycles.
      */
      for (loops = number_of_bytes >> 6; loops != 0; loops--) {
    ec44:	2c00      	cmp	r4, #0
    ec46:	d1eb      	bne.n	ec20 <_mem_zero+0x28>
    ec48:	01ad      	lsls	r5, r5, #6
    ec4a:	1940      	adds	r0, r0, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:120
         *from32_ptr++ = 0;
         *from32_ptr++ = 0;
      } /* Endwhile */

      /* Now, write the rest of bytes */
      switch ((number_of_bytes >> 2) & 0xF) {
    ec4c:	233c      	movs	r3, #60	; 0x3c
    ec4e:	4a24      	ldr	r2, [pc, #144]	; (ece0 <_mem_zero+0xe8>)
    ec50:	400b      	ands	r3, r1
    ec52:	58d3      	ldr	r3, [r2, r3]
    ec54:	469f      	mov	pc, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:121
         case 15: *from32_ptr++ = 0;
    ec56:	2300      	movs	r3, #0
    ec58:	6003      	str	r3, [r0, #0]
    ec5a:	3004      	adds	r0, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:122
         case 14: *from32_ptr++ = 0;
    ec5c:	2300      	movs	r3, #0
    ec5e:	6003      	str	r3, [r0, #0]
    ec60:	3004      	adds	r0, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:123
         case 13: *from32_ptr++ = 0;
    ec62:	2200      	movs	r2, #0
    ec64:	1d03      	adds	r3, r0, #4
    ec66:	6002      	str	r2, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:124
         case 12: *from32_ptr++ = 0;
    ec68:	2200      	movs	r2, #0
    ec6a:	1d18      	adds	r0, r3, #4
    ec6c:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:125
         case 11: *from32_ptr++ = 0;
    ec6e:	2200      	movs	r2, #0
    ec70:	1d03      	adds	r3, r0, #4
    ec72:	6002      	str	r2, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:126
         case 10: *from32_ptr++ = 0;
    ec74:	2200      	movs	r2, #0
    ec76:	1d18      	adds	r0, r3, #4
    ec78:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:127
         case 9:  *from32_ptr++ = 0;
    ec7a:	2200      	movs	r2, #0
    ec7c:	1d03      	adds	r3, r0, #4
    ec7e:	6002      	str	r2, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:128
         case 8:  *from32_ptr++ = 0;
    ec80:	2200      	movs	r2, #0
    ec82:	1d18      	adds	r0, r3, #4
    ec84:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:129
         case 7:  *from32_ptr++ = 0;
    ec86:	2200      	movs	r2, #0
    ec88:	1d03      	adds	r3, r0, #4
    ec8a:	6002      	str	r2, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:130
         case 6:  *from32_ptr++ = 0;
    ec8c:	2200      	movs	r2, #0
    ec8e:	1d18      	adds	r0, r3, #4
    ec90:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:131
         case 5:  *from32_ptr++ = 0;
    ec92:	2200      	movs	r2, #0
    ec94:	1d03      	adds	r3, r0, #4
    ec96:	6002      	str	r2, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:132
         case 4:  *from32_ptr++ = 0;
    ec98:	2200      	movs	r2, #0
    ec9a:	1d18      	adds	r0, r3, #4
    ec9c:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:133
         case 3:  *from32_ptr++ = 0;
    ec9e:	2300      	movs	r3, #0
    eca0:	1d02      	adds	r2, r0, #4
    eca2:	6003      	str	r3, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:134
         case 2:  *from32_ptr++ = 0;
    eca4:	2000      	movs	r0, #0
    eca6:	1d13      	adds	r3, r2, #4
    eca8:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:135
         case 1:  *from32_ptr++ = 0;
    ecaa:	2200      	movs	r2, #0
    ecac:	1d18      	adds	r0, r3, #4
    ecae:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:147
#endif /* MQX_USE_BLOCK_MEM_ZERO */
      from_ptr = from32_ptr;
   } /* Endif */

   /* Copy all remaining bytes */
   if (number_of_bytes & 2) {
    ecb0:	078b      	lsls	r3, r1, #30
    ecb2:	d502      	bpl.n	ecba <_mem_zero+0xc2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:150
      from16_ptr = (uint_16_ptr) from_ptr;

      *from16_ptr++ = 0;
    ecb4:	2300      	movs	r3, #0
    ecb6:	8003      	strh	r3, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:152

      from_ptr = from16_ptr;
    ecb8:	3002      	adds	r0, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:154
   } /* Endif */
   if (number_of_bytes & 1) {
    ecba:	07cb      	lsls	r3, r1, #31
    ecbc:	d501      	bpl.n	ecc2 <_mem_zero+0xca>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:155
      * (uint_8_ptr) from_ptr = 0;
    ecbe:	2300      	movs	r3, #0
    ecc0:	7003      	strb	r3, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:158
   } /* Endif */
#endif
} /* Endbody */
    ecc2:	bd30      	pop	{r4, r5, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:120
         *from32_ptr++ = 0;
         *from32_ptr++ = 0;
      } /* Endwhile */

      /* Now, write the rest of bytes */
      switch ((number_of_bytes >> 2) & 0xF) {
    ecc4:	1c03      	adds	r3, r0, #0
    ecc6:	e7f0      	b.n	ecaa <_mem_zero+0xb2>
    ecc8:	1c03      	adds	r3, r0, #0
    ecca:	e7df      	b.n	ec8c <_mem_zero+0x94>
    eccc:	1c03      	adds	r3, r0, #0
    ecce:	e7d7      	b.n	ec80 <_mem_zero+0x88>
    ecd0:	1c03      	adds	r3, r0, #0
    ecd2:	e7e1      	b.n	ec98 <_mem_zero+0xa0>
    ecd4:	1c02      	adds	r2, r0, #0
    ecd6:	e7e5      	b.n	eca4 <_mem_zero+0xac>
    ecd8:	1c03      	adds	r3, r0, #0
    ecda:	e7cb      	b.n	ec74 <_mem_zero+0x7c>
    ecdc:	1c03      	adds	r3, r0, #0
    ecde:	e7c3      	b.n	ec68 <_mem_zero+0x70>
    ece0:	000132a4 	.word	0x000132a4

0000ece4 <_psp_int_init>:
_psp_int_init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_iinit.c:53
      _mqx_uint       first_user_isr_vector_number,

      /* [IN] the last user ISR vector number */
      _mqx_uint       last_user_isr_vector_number
   )
{ /* Body */
    ece4:	b510      	push	{r4, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_iinit.c:57
   uint_32            error;

   /* Install kernel interrupt services */
   error = _int_init(first_user_isr_vector_number, last_user_isr_vector_number);
    ece6:	f000 f981 	bl	efec <_int_init>
    ecea:	1e04      	subs	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_iinit.c:60

   /* Install PSP interrupt services */
   if (error == MQX_OK) {
    ecec:	d101      	bne.n	ecf2 <_psp_int_init+0xe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_iinit.c:61
      _psp_int_install();
    ecee:	f7ff ff6f 	bl	ebd0 <_psp_int_install>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_iinit.c:66
   } /* Endif */

   return error;

} /* Endbody */
    ecf2:	1c20      	adds	r0, r4, #0
    ecf4:	bd10      	pop	{r4, pc}
    ecf6:	46c0      	nop			; (mov r8, r8)

0000ecf8 <_psp_add_ticks>:
_psp_add_ticks():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:53
       PSP_TICK_STRUCT_PTR b_ptr,

       /* [OUT] The result of the addition */
       PSP_TICK_STRUCT_PTR r_ptr
   )
{ /* Body */
    ecf8:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:58
   register uint_32       a_hw_ticks;
   register uint_32       b_hw_ticks;
   register uint_32       hwtpt;

   r_ptr->TICKS[0] = a_ptr->TICKS[0] + b_ptr->TICKS[0];
    ecfa:	6806      	ldr	r6, [r0, #0]
    ecfc:	6847      	ldr	r7, [r0, #4]
    ecfe:	680c      	ldr	r4, [r1, #0]
    ed00:	684d      	ldr	r5, [r1, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:60

   a_hw_ticks  = a_ptr->HW_TICKS[0];
    ed02:	6883      	ldr	r3, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:63
   b_hw_ticks  = b_ptr->HW_TICKS[0];

   hwtpt = _mqx_kernel_data->HW_TICKS_PER_TICK;
    ed04:	480b      	ldr	r0, [pc, #44]	; (ed34 <_psp_add_ticks+0x3c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:58
{ /* Body */
   register uint_32       a_hw_ticks;
   register uint_32       b_hw_ticks;
   register uint_32       hwtpt;

   r_ptr->TICKS[0] = a_ptr->TICKS[0] + b_ptr->TICKS[0];
    ed06:	19a4      	adds	r4, r4, r6
    ed08:	417d      	adcs	r5, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:63

   a_hw_ticks  = a_ptr->HW_TICKS[0];
   b_hw_ticks  = b_ptr->HW_TICKS[0];

   hwtpt = _mqx_kernel_data->HW_TICKS_PER_TICK;
    ed0a:	6806      	ldr	r6, [r0, #0]
    ed0c:	20a8      	movs	r0, #168	; 0xa8
    ed0e:	0040      	lsls	r0, r0, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:61
   register uint_32       hwtpt;

   r_ptr->TICKS[0] = a_ptr->TICKS[0] + b_ptr->TICKS[0];

   a_hw_ticks  = a_ptr->HW_TICKS[0];
   b_hw_ticks  = b_ptr->HW_TICKS[0];
    ed10:	6889      	ldr	r1, [r1, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:63

   hwtpt = _mqx_kernel_data->HW_TICKS_PER_TICK;
    ed12:	5837      	ldr	r7, [r6, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:58
{ /* Body */
   register uint_32       a_hw_ticks;
   register uint_32       b_hw_ticks;
   register uint_32       hwtpt;

   r_ptr->TICKS[0] = a_ptr->TICKS[0] + b_ptr->TICKS[0];
    ed14:	6014      	str	r4, [r2, #0]
    ed16:	6055      	str	r5, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:65
   a_hw_ticks  = a_ptr->HW_TICKS[0];
   b_hw_ticks  = b_ptr->HW_TICKS[0];

   hwtpt = _mqx_kernel_data->HW_TICKS_PER_TICK;

   if ( a_hw_ticks >= (hwtpt - b_hw_ticks)) {
    ed18:	1a78      	subs	r0, r7, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:69
      r_ptr->TICKS[0]++;
      r_ptr->HW_TICKS[0] = a_hw_ticks + (b_hw_ticks - hwtpt);
   } else {
      r_ptr->HW_TICKS[0] = a_hw_ticks + b_hw_ticks;
    ed1a:	18ce      	adds	r6, r1, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:65
   a_hw_ticks  = a_ptr->HW_TICKS[0];
   b_hw_ticks  = b_ptr->HW_TICKS[0];

   hwtpt = _mqx_kernel_data->HW_TICKS_PER_TICK;

   if ( a_hw_ticks >= (hwtpt - b_hw_ticks)) {
    ed1c:	4283      	cmp	r3, r0
    ed1e:	d306      	bcc.n	ed2e <_psp_add_ticks+0x36>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:66
      r_ptr->TICKS[0]++;
    ed20:	2001      	movs	r0, #1
    ed22:	2100      	movs	r1, #0
    ed24:	1824      	adds	r4, r4, r0
    ed26:	414d      	adcs	r5, r1
    ed28:	6014      	str	r4, [r2, #0]
    ed2a:	6055      	str	r5, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:67
      r_ptr->HW_TICKS[0] = a_hw_ticks + (b_hw_ticks - hwtpt);
    ed2c:	1bf6      	subs	r6, r6, r7
    ed2e:	6096      	str	r6, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:72
   } else {
      r_ptr->HW_TICKS[0] = a_hw_ticks + b_hw_ticks;
   } /* Endif */

} /* Endbody */
    ed30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ed32:	46c0      	nop			; (mov r8, r8)
    ed34:	1fffe000 	.word	0x1fffe000

0000ed38 <_psp_normalize_ticks>:
_psp_normalize_ticks():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:47
void _psp_normalize_ticks
   (
       /* [IN/OUT] Tick structure to be normalized */
       PSP_TICK_STRUCT_PTR tick_ptr
   )
{ /* Body */
    ed38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:53
   KERNEL_DATA_STRUCT_PTR  kernel_data;
   register uint_32        ticks_per_tick;

   _GET_KERNEL_DATA(kernel_data);

   ticks_per_tick = kernel_data->HW_TICKS_PER_TICK;
    ed3a:	4b0d      	ldr	r3, [pc, #52]	; (ed70 <_psp_normalize_ticks+0x38>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:55

   if (tick_ptr->HW_TICKS[0] >= ticks_per_tick) {
    ed3c:	6885      	ldr	r5, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:53
   KERNEL_DATA_STRUCT_PTR  kernel_data;
   register uint_32        ticks_per_tick;

   _GET_KERNEL_DATA(kernel_data);

   ticks_per_tick = kernel_data->HW_TICKS_PER_TICK;
    ed3e:	681a      	ldr	r2, [r3, #0]
    ed40:	23a8      	movs	r3, #168	; 0xa8
    ed42:	005b      	lsls	r3, r3, #1
    ed44:	58d6      	ldr	r6, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:47
void _psp_normalize_ticks
   (
       /* [IN/OUT] Tick structure to be normalized */
       PSP_TICK_STRUCT_PTR tick_ptr
   )
{ /* Body */
    ed46:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:55

   _GET_KERNEL_DATA(kernel_data);

   ticks_per_tick = kernel_data->HW_TICKS_PER_TICK;

   if (tick_ptr->HW_TICKS[0] >= ticks_per_tick) {
    ed48:	42ae      	cmp	r6, r5
    ed4a:	d80f      	bhi.n	ed6c <_psp_normalize_ticks+0x34>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:56
      register uint_32 t = tick_ptr->HW_TICKS[0] / ticks_per_tick;
    ed4c:	1c31      	adds	r1, r6, #0
    ed4e:	1c28      	adds	r0, r5, #0
    ed50:	f7f1 fba8 	bl	4a4 <__aeabi_uidiv>
    ed54:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:58
      tick_ptr->TICKS[0] += t;
      tick_ptr->HW_TICKS[0] -= t * ticks_per_tick;
    ed56:	437e      	muls	r6, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:57

   ticks_per_tick = kernel_data->HW_TICKS_PER_TICK;

   if (tick_ptr->HW_TICKS[0] >= ticks_per_tick) {
      register uint_32 t = tick_ptr->HW_TICKS[0] / ticks_per_tick;
      tick_ptr->TICKS[0] += t;
    ed58:	1c02      	adds	r2, r0, #0
    ed5a:	2300      	movs	r3, #0
    ed5c:	6820      	ldr	r0, [r4, #0]
    ed5e:	6861      	ldr	r1, [r4, #4]
    ed60:	1812      	adds	r2, r2, r0
    ed62:	414b      	adcs	r3, r1
    ed64:	6022      	str	r2, [r4, #0]
    ed66:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:58
      tick_ptr->HW_TICKS[0] -= t * ticks_per_tick;
    ed68:	1bad      	subs	r5, r5, r6
    ed6a:	60a5      	str	r5, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:61
   } /* Endif */

} /* Endbody */
    ed6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ed6e:	46c0      	nop			; (mov r8, r8)
    ed70:	1fffe000 	.word	0x1fffe000

0000ed74 <_psp_set_kernel_disable_level>:
_psp_set_kernel_disable_level():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:52
    KERNEL_DATA_STRUCT_PTR          kernel_data;
    MQX_INITIALIZATION_STRUCT_PTR   init_ptr;
    uint_32 temp;
    _mqx_int i;

    _GET_KERNEL_DATA(kernel_data);
    ed74:	4b1a      	ldr	r3, [pc, #104]	; (ede0 <_psp_set_kernel_disable_level+0x6c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:57

    init_ptr = &kernel_data->INIT;

    /* Calculate the enable and disable interrupt values for the kernel. */
    temp = init_ptr->MQX_HARDWARE_INTERRUPT_LEVEL_MAX;
    ed76:	22ae      	movs	r2, #174	; 0xae
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:52
    KERNEL_DATA_STRUCT_PTR          kernel_data;
    MQX_INITIALIZATION_STRUCT_PTR   init_ptr;
    uint_32 temp;
    _mqx_int i;

    _GET_KERNEL_DATA(kernel_data);
    ed78:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:57

    init_ptr = &kernel_data->INIT;

    /* Calculate the enable and disable interrupt values for the kernel. */
    temp = init_ptr->MQX_HARDWARE_INTERRUPT_LEVEL_MAX;
    ed7a:	0052      	lsls	r2, r2, #1
    ed7c:	1899      	adds	r1, r3, r2
    ed7e:	68ca      	ldr	r2, [r1, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:58
    if (temp > 7) {
    ed80:	2a07      	cmp	r2, #7
    ed82:	d922      	bls.n	edca <_psp_set_kernel_disable_level+0x56>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:60
        temp = 7;
        init_ptr->MQX_HARDWARE_INTERRUPT_LEVEL_MAX = 7;
    ed84:	2207      	movs	r2, #7
    ed86:	60ca      	str	r2, [r1, #12]
    ed88:	2280      	movs	r2, #128	; 0x80
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:66
    } else if (temp == 0) {
        temp = 1;
        init_ptr->MQX_HARDWARE_INTERRUPT_LEVEL_MAX = 1;
    }

    kernel_data->DISABLE_SR = CORTEX_PRIOR(temp);
    ed8a:	82da      	strh	r2, [r3, #22]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:70

    /* Set all (till now unused) interrupts level to the disable level */
    for (i = 0; i < sizeof(NVIC_BASE_PTR->IP) / sizeof(NVIC_BASE_PTR->IP[0]); i++)
        NVIC_BASE_PTR->IP[i] = CORTEX_PRIOR((1 << CORTEX_PRIOR_IMPL) - 2);
    ed8c:	21c0      	movs	r1, #192	; 0xc0
    ed8e:	4b15      	ldr	r3, [pc, #84]	; (ede4 <_psp_set_kernel_disable_level+0x70>)
    ed90:	2200      	movs	r2, #0
    ed92:	0089      	lsls	r1, r1, #2
    ed94:	505a      	str	r2, [r3, r1]
    ed96:	21c1      	movs	r1, #193	; 0xc1
    ed98:	0089      	lsls	r1, r1, #2
    ed9a:	505a      	str	r2, [r3, r1]
    ed9c:	21c2      	movs	r1, #194	; 0xc2
    ed9e:	0089      	lsls	r1, r1, #2
    eda0:	505a      	str	r2, [r3, r1]
    eda2:	21c3      	movs	r1, #195	; 0xc3
    eda4:	0089      	lsls	r1, r1, #2
    eda6:	505a      	str	r2, [r3, r1]
    eda8:	21c4      	movs	r1, #196	; 0xc4
    edaa:	0089      	lsls	r1, r1, #2
    edac:	505a      	str	r2, [r3, r1]
    edae:	21c5      	movs	r1, #197	; 0xc5
    edb0:	0089      	lsls	r1, r1, #2
    edb2:	505a      	str	r2, [r3, r1]
    edb4:	21c6      	movs	r1, #198	; 0xc6
    edb6:	0089      	lsls	r1, r1, #2
    edb8:	505a      	str	r2, [r3, r1]
    edba:	21c7      	movs	r1, #199	; 0xc7
    edbc:	0089      	lsls	r1, r1, #2
    edbe:	505a      	str	r2, [r3, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:79
    {
        uint32_t * icer_ptr = (uint32_t *)&NVIC_BASE_PTR->ICER;

        for (i = 0; i < sizeof(NVIC_BASE_PTR->ICER) / sizeof(uint32_t); i++)    {
            /* Disable 32 interrupts in a row */
            *(icer_ptr + i) = 0xFFFFFFFF;
    edc0:	4b09      	ldr	r3, [pc, #36]	; (ede8 <_psp_set_kernel_disable_level+0x74>)
    edc2:	2201      	movs	r2, #1
    edc4:	4252      	negs	r2, r2
    edc6:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:82
        }
    }
}
    edc8:	4770      	bx	lr
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:61
    /* Calculate the enable and disable interrupt values for the kernel. */
    temp = init_ptr->MQX_HARDWARE_INTERRUPT_LEVEL_MAX;
    if (temp > 7) {
        temp = 7;
        init_ptr->MQX_HARDWARE_INTERRUPT_LEVEL_MAX = 7;
    } else if (temp == 0) {
    edca:	2a00      	cmp	r2, #0
    edcc:	d103      	bne.n	edd6 <_psp_set_kernel_disable_level+0x62>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:63
        temp = 1;
        init_ptr->MQX_HARDWARE_INTERRUPT_LEVEL_MAX = 1;
    edce:	2201      	movs	r2, #1
    edd0:	60ca      	str	r2, [r1, #12]
    edd2:	2280      	movs	r2, #128	; 0x80
    edd4:	e7d9      	b.n	ed8a <_psp_set_kernel_disable_level+0x16>
    edd6:	01d2      	lsls	r2, r2, #7
    edd8:	21ff      	movs	r1, #255	; 0xff
    edda:	400a      	ands	r2, r1
    eddc:	e7d5      	b.n	ed8a <_psp_set_kernel_disable_level+0x16>
    edde:	46c0      	nop			; (mov r8, r8)
    ede0:	1fffe000 	.word	0x1fffe000
    ede4:	e000e100 	.word	0xe000e100
    ede8:	e000e180 	.word	0xe000e180

0000edec <_psp_init_readyqs>:
_psp_init_readyqs():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:98

uint_32 _psp_init_readyqs
    (
        void
    )
{ /* Body */
    edec:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:104
   KERNEL_DATA_STRUCT_PTR kernel_data;
   READY_Q_STRUCT_PTR     q_ptr;
   uint_32                priority_levels;
   uint_32                n;

    _GET_KERNEL_DATA(kernel_data);
    edee:	4b1e      	ldr	r3, [pc, #120]	; (ee68 <_psp_init_readyqs+0x7c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:98

uint_32 _psp_init_readyqs
    (
        void
    )
{ /* Body */
    edf0:	464f      	mov	r7, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:104
   KERNEL_DATA_STRUCT_PTR kernel_data;
   READY_Q_STRUCT_PTR     q_ptr;
   uint_32                priority_levels;
   uint_32                n;

    _GET_KERNEL_DATA(kernel_data);
    edf2:	6818      	ldr	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:98

uint_32 _psp_init_readyqs
    (
        void
    )
{ /* Body */
    edf4:	4646      	mov	r6, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:105
   READY_Q_STRUCT_PTR     q_ptr;
   uint_32                priority_levels;
   uint_32                n;

    _GET_KERNEL_DATA(kernel_data);
    kernel_data->READY_Q_LIST = (READY_Q_STRUCT_PTR) NULL;
    edf6:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:98

uint_32 _psp_init_readyqs
    (
        void
    )
{ /* Body */
    edf8:	b4c0      	push	{r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:105
   READY_Q_STRUCT_PTR     q_ptr;
   uint_32                priority_levels;
   uint_32                n;

    _GET_KERNEL_DATA(kernel_data);
    kernel_data->READY_Q_LIST = (READY_Q_STRUCT_PTR) NULL;
    edfa:	6203      	str	r3, [r0, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:106
    priority_levels = kernel_data->LOWEST_TASK_PRIORITY + 2;
    edfc:	23d0      	movs	r3, #208	; 0xd0
    edfe:	58c3      	ldr	r3, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:104
   KERNEL_DATA_STRUCT_PTR kernel_data;
   READY_Q_STRUCT_PTR     q_ptr;
   uint_32                priority_levels;
   uint_32                n;

    _GET_KERNEL_DATA(kernel_data);
    ee00:	4681      	mov	r9, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:121
    #endif /* MQX_CHECK_MEMORY_ALLOCATION_ERRORS */
    _mem_set_type(q_ptr, MEM_TYPE_READYQ);
#endif /* MQX_LITE_VERSION_NUMBER */

    n = priority_levels;
    while (n--) {
    ee02:	1c59      	adds	r1, r3, #1
    ee04:	3302      	adds	r3, #2
    ee06:	d02c      	beq.n	ee62 <_psp_init_readyqs+0x76>
    ee08:	23b4      	movs	r3, #180	; 0xb4
    ee0a:	005b      	lsls	r3, r3, #1
    ee0c:	4a17      	ldr	r2, [pc, #92]	; (ee6c <_psp_init_readyqs+0x80>)
    ee0e:	58c4      	ldr	r4, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:127
        q_ptr->HEAD_READY_Q  = (TD_STRUCT_PTR)q_ptr;
        q_ptr->TAIL_READY_Q  = (TD_STRUCT_PTR)q_ptr;
        q_ptr->PRIORITY      = (uint_16)n;

        if (n + kernel_data->INIT.MQX_HARDWARE_INTERRUPT_LEVEL_MAX < ((1 << CORTEX_PRIOR_IMPL) - 1))
            q_ptr->ENABLE_SR   = CORTEX_PRIOR(n + kernel_data->INIT.MQX_HARDWARE_INTERRUPT_LEVEL_MAX);
    ee10:	25ff      	movs	r5, #255	; 0xff
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:109
    _GET_KERNEL_DATA(kernel_data);
    kernel_data->READY_Q_LIST = (READY_Q_STRUCT_PTR) NULL;
    priority_levels = kernel_data->LOWEST_TASK_PRIORITY + 2;

#ifdef MQX_LITE_VERSION_NUMBER
    q_ptr = &mqx_static_ready_queue[0];
    ee12:	1c13      	adds	r3, r2, #0
    ee14:	46a4      	mov	ip, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:121
    #endif /* MQX_CHECK_MEMORY_ALLOCATION_ERRORS */
    _mem_set_type(q_ptr, MEM_TYPE_READYQ);
#endif /* MQX_LITE_VERSION_NUMBER */

    n = priority_levels;
    while (n--) {
    ee16:	2700      	movs	r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:109
    _GET_KERNEL_DATA(kernel_data);
    kernel_data->READY_Q_LIST = (READY_Q_STRUCT_PTR) NULL;
    priority_levels = kernel_data->LOWEST_TASK_PRIORITY + 2;

#ifdef MQX_LITE_VERSION_NUMBER
    q_ptr = &mqx_static_ready_queue[0];
    ee18:	3b0e      	subs	r3, #14
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:127
        q_ptr->HEAD_READY_Q  = (TD_STRUCT_PTR)q_ptr;
        q_ptr->TAIL_READY_Q  = (TD_STRUCT_PTR)q_ptr;
        q_ptr->PRIORITY      = (uint_16)n;

        if (n + kernel_data->INIT.MQX_HARDWARE_INTERRUPT_LEVEL_MAX < ((1 << CORTEX_PRIOR_IMPL) - 1))
            q_ptr->ENABLE_SR   = CORTEX_PRIOR(n + kernel_data->INIT.MQX_HARDWARE_INTERRUPT_LEVEL_MAX);
    ee1a:	46a8      	mov	r8, r5
    ee1c:	e001      	b.n	ee22 <_psp_init_readyqs+0x36>
    ee1e:	1c1f      	adds	r7, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:132
        else
            q_ptr->ENABLE_SR   = CORTEX_PRIOR((1 << CORTEX_PRIOR_IMPL) - 2);

        q_ptr->NEXT_Q        = kernel_data->READY_Q_LIST;
        kernel_data->READY_Q_LIST = q_ptr++;
    ee20:	1c03      	adds	r3, r0, #0
    ee22:	4660      	mov	r0, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:124

    n = priority_levels;
    while (n--) {
        q_ptr->HEAD_READY_Q  = (TD_STRUCT_PTR)q_ptr;
        q_ptr->TAIL_READY_Q  = (TD_STRUCT_PTR)q_ptr;
        q_ptr->PRIORITY      = (uint_16)n;
    ee24:	b28c      	uxth	r4, r1
    ee26:	180d      	adds	r5, r1, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:122
    _mem_set_type(q_ptr, MEM_TYPE_READYQ);
#endif /* MQX_LITE_VERSION_NUMBER */

    n = priority_levels;
    while (n--) {
        q_ptr->HEAD_READY_Q  = (TD_STRUCT_PTR)q_ptr;
    ee28:	601b      	str	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:123
        q_ptr->TAIL_READY_Q  = (TD_STRUCT_PTR)q_ptr;
    ee2a:	605b      	str	r3, [r3, #4]
    ee2c:	1e96      	subs	r6, r2, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:124
        q_ptr->PRIORITY      = (uint_16)n;
    ee2e:	8014      	strh	r4, [r2, #0]
    ee30:	2000      	movs	r0, #0
    ee32:	2d00      	cmp	r5, #0
    ee34:	d104      	bne.n	ee40 <_psp_init_readyqs+0x54>
    ee36:	4665      	mov	r5, ip
    ee38:	1960      	adds	r0, r4, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:127

        if (n + kernel_data->INIT.MQX_HARDWARE_INTERRUPT_LEVEL_MAX < ((1 << CORTEX_PRIOR_IMPL) - 1))
            q_ptr->ENABLE_SR   = CORTEX_PRIOR(n + kernel_data->INIT.MQX_HARDWARE_INTERRUPT_LEVEL_MAX);
    ee3a:	01c0      	lsls	r0, r0, #7
    ee3c:	4644      	mov	r4, r8
    ee3e:	4020      	ands	r0, r4
    ee40:	8030      	strh	r0, [r6, #0]
    ee42:	1f90      	subs	r0, r2, #6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:131
        else
            q_ptr->ENABLE_SR   = CORTEX_PRIOR((1 << CORTEX_PRIOR_IMPL) - 2);

        q_ptr->NEXT_Q        = kernel_data->READY_Q_LIST;
    ee44:	6007      	str	r7, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:132
        kernel_data->READY_Q_LIST = q_ptr++;
    ee46:	1c18      	adds	r0, r3, #0
    ee48:	3010      	adds	r0, #16
    ee4a:	3210      	adds	r2, #16
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:121
    #endif /* MQX_CHECK_MEMORY_ALLOCATION_ERRORS */
    _mem_set_type(q_ptr, MEM_TYPE_READYQ);
#endif /* MQX_LITE_VERSION_NUMBER */

    n = priority_levels;
    while (n--) {
    ee4c:	3901      	subs	r1, #1
    ee4e:	d2e6      	bcs.n	ee1e <_psp_init_readyqs+0x32>
    ee50:	464d      	mov	r5, r9
    ee52:	622b      	str	r3, [r5, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:140

    /*
    ** Set the current ready q (where the ready queue searches start) to
    ** the head of the list of ready queues.
    */
    kernel_data->CURRENT_READY_Q = kernel_data->READY_Q_LIST;
    ee54:	4648      	mov	r0, r9
    ee56:	6243      	str	r3, [r0, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:158
    }
#endif

    return MQX_OK;

} /* Endbody */
    ee58:	2000      	movs	r0, #0
    ee5a:	bc0c      	pop	{r2, r3}
    ee5c:	4690      	mov	r8, r2
    ee5e:	4699      	mov	r9, r3
    ee60:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:121
    #endif /* MQX_CHECK_MEMORY_ALLOCATION_ERRORS */
    _mem_set_type(q_ptr, MEM_TYPE_READYQ);
#endif /* MQX_LITE_VERSION_NUMBER */

    n = priority_levels;
    while (n--) {
    ee62:	2300      	movs	r3, #0
    ee64:	e7f6      	b.n	ee54 <_psp_init_readyqs+0x68>
    ee66:	46c0      	nop			; (mov r8, r8)
    ee68:	1fffe000 	.word	0x1fffe000
    ee6c:	20000ee6 	.word	0x20000ee6

0000ee70 <_psp_build_stack_frame>:
_psp_build_stack_frame():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:69
{
   uchar_ptr stack_base_ptr;
   PSP_STACK_START_STRUCT_PTR stack_start_ptr;
   boolean res = TRUE;

   stack_base_ptr  = (uchar_ptr)_GET_STACK_BASE(stack_ptr, stack_size);
    ee70:	3a01      	subs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:64
      _mqx_uint        status_register,

      /* [IN] the task creation parameter */
      uint_32          create_parameter
   )
{
    ee72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:69
   uchar_ptr stack_base_ptr;
   PSP_STACK_START_STRUCT_PTR stack_start_ptr;
   boolean res = TRUE;

   stack_base_ptr  = (uchar_ptr)_GET_STACK_BASE(stack_ptr, stack_size);
    ee74:	188a      	adds	r2, r1, r2
    ee76:	260f      	movs	r6, #15
    ee78:	43b2      	bics	r2, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:70
   stack_start_ptr = (PSP_STACK_START_STRUCT_PTR)(stack_base_ptr - sizeof(PSP_STACK_START_STRUCT));
    ee7a:	1c14      	adds	r4, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:73

   td_ptr->STACK_BASE  = (pointer)stack_base_ptr;
   td_ptr->STACK_LIMIT = _GET_STACK_LIMIT(stack_ptr, stack_size);
    ee7c:	310f      	adds	r1, #15
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:70
   uchar_ptr stack_base_ptr;
   PSP_STACK_START_STRUCT_PTR stack_start_ptr;
   boolean res = TRUE;

   stack_base_ptr  = (uchar_ptr)_GET_STACK_BASE(stack_ptr, stack_size);
   stack_start_ptr = (PSP_STACK_START_STRUCT_PTR)(stack_base_ptr - sizeof(PSP_STACK_START_STRUCT));
    ee7e:	3c5c      	subs	r4, #92	; 0x5c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:73

   td_ptr->STACK_BASE  = (pointer)stack_base_ptr;
   td_ptr->STACK_LIMIT = _GET_STACK_LIMIT(stack_ptr, stack_size);
    ee80:	43b1      	bics	r1, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:72
   boolean res = TRUE;

   stack_base_ptr  = (uchar_ptr)_GET_STACK_BASE(stack_ptr, stack_size);
   stack_start_ptr = (PSP_STACK_START_STRUCT_PTR)(stack_base_ptr - sizeof(PSP_STACK_START_STRUCT));

   td_ptr->STACK_BASE  = (pointer)stack_base_ptr;
    ee82:	6102      	str	r2, [r0, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:73
   td_ptr->STACK_LIMIT = _GET_STACK_LIMIT(stack_ptr, stack_size);
    ee84:	6181      	str	r1, [r0, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:74
   td_ptr->STACK_PTR   = stack_start_ptr;
    ee86:	6144      	str	r4, [r0, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:81
   /*
   ** Build the task's initial stack frame. This contains the initialized
   ** registers, and an exception frame which will cause the task to
   ** "return" to the start of the task when it is dispatched.
   */
   _mem_zero(stack_start_ptr, (_mem_size)sizeof(PSP_STACK_START_STRUCT));
    ee88:	215c      	movs	r1, #92	; 0x5c
    ee8a:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:64
      _mqx_uint        status_register,

      /* [IN] the task creation parameter */
      uint_32          create_parameter
   )
{
    ee8c:	1c1f      	adds	r7, r3, #0
    ee8e:	9d07      	ldr	r5, [sp, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:81
   /*
   ** Build the task's initial stack frame. This contains the initialized
   ** registers, and an exception frame which will cause the task to
   ** "return" to the start of the task when it is dispatched.
   */
   _mem_zero(stack_start_ptr, (_mem_size)sizeof(PSP_STACK_START_STRUCT));
    ee90:	f7ff feb2 	bl	ebf8 <_mem_zero>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:82
   stack_start_ptr->INITIAL_CONTEXT.LR = (uint_32)_task_exit_function_internal;
    ee94:	4b06      	ldr	r3, [pc, #24]	; (eeb0 <_psp_build_stack_frame+0x40>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:84
   stack_start_ptr->INITIAL_CONTEXT.R0 = (uint_32)create_parameter;
   stack_start_ptr->INITIAL_CONTEXT.PC = (uint_32)(template_ptr->TASK_ADDRESS) | 1;
    ee96:	687a      	ldr	r2, [r7, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:82
   ** Build the task's initial stack frame. This contains the initialized
   ** registers, and an exception frame which will cause the task to
   ** "return" to the start of the task when it is dispatched.
   */
   _mem_zero(stack_start_ptr, (_mem_size)sizeof(PSP_STACK_START_STRUCT));
   stack_start_ptr->INITIAL_CONTEXT.LR = (uint_32)_task_exit_function_internal;
    ee98:	63a3      	str	r3, [r4, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:84
   stack_start_ptr->INITIAL_CONTEXT.R0 = (uint_32)create_parameter;
   stack_start_ptr->INITIAL_CONTEXT.PC = (uint_32)(template_ptr->TASK_ADDRESS) | 1;
    ee9a:	2301      	movs	r3, #1
    ee9c:	4313      	orrs	r3, r2
    ee9e:	63e3      	str	r3, [r4, #60]	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:85
   stack_start_ptr->INITIAL_CONTEXT.PSR = 0x01000000;
    eea0:	2380      	movs	r3, #128	; 0x80
    eea2:	045b      	lsls	r3, r3, #17
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:83
   ** registers, and an exception frame which will cause the task to
   ** "return" to the start of the task when it is dispatched.
   */
   _mem_zero(stack_start_ptr, (_mem_size)sizeof(PSP_STACK_START_STRUCT));
   stack_start_ptr->INITIAL_CONTEXT.LR = (uint_32)_task_exit_function_internal;
   stack_start_ptr->INITIAL_CONTEXT.R0 = (uint_32)create_parameter;
    eea4:	6265      	str	r5, [r4, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:86
   stack_start_ptr->INITIAL_CONTEXT.PC = (uint_32)(template_ptr->TASK_ADDRESS) | 1;
   stack_start_ptr->INITIAL_CONTEXT.PSR = 0x01000000;
   stack_start_ptr->PARAMETER = create_parameter;
    eea6:	6525      	str	r5, [r4, #80]	; 0x50
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:101
      res = _psp_build_float_context(td_ptr);
   }
#endif /* MQXCFG_ENABLE_FP && PSP_HAS_FPU */

   return res;
}
    eea8:	2001      	movs	r0, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:85
   */
   _mem_zero(stack_start_ptr, (_mem_size)sizeof(PSP_STACK_START_STRUCT));
   stack_start_ptr->INITIAL_CONTEXT.LR = (uint_32)_task_exit_function_internal;
   stack_start_ptr->INITIAL_CONTEXT.R0 = (uint_32)create_parameter;
   stack_start_ptr->INITIAL_CONTEXT.PC = (uint_32)(template_ptr->TASK_ADDRESS) | 1;
   stack_start_ptr->INITIAL_CONTEXT.PSR = 0x01000000;
    eeaa:	6423      	str	r3, [r4, #64]	; 0x40
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:101
      res = _psp_build_float_context(td_ptr);
   }
#endif /* MQXCFG_ENABLE_FP && PSP_HAS_FPU */

   return res;
}
    eeac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eeae:	46c0      	nop			; (mov r8, r8)
    eeb0:	0000f6f9 	.word	0x0000f6f9

0000eeb4 <_psp_destroy_stack_frame>:
_psp_destroy_stack_frame():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_de.c:54
   )
{/* Body */

   /* Nothing to do for this CPU */

}/* Endbody */
    eeb4:	4770      	bx	lr
    eeb6:	46c0      	nop			; (mov r8, r8)

0000eeb8 <_mqx_idle_task>:
_mqx_idle_task():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/idletask.c:59
        uint_32 parameter
    )
{ /* Body */
    volatile KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);
    eeb8:	4b02      	ldr	r3, [pc, #8]	; (eec4 <_mqx_idle_task+0xc>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/idletask.c:56
 */
void _mqx_idle_task
    (
        uint_32 parameter
    )
{ /* Body */
    eeba:	b082      	sub	sp, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/idletask.c:59
    volatile KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);
    eebc:	681b      	ldr	r3, [r3, #0]
    eebe:	9301      	str	r3, [sp, #4]
    eec0:	e7fe      	b.n	eec0 <_mqx_idle_task+0x8>
    eec2:	46c0      	nop			; (mov r8, r8)
    eec4:	1fffe000 	.word	0x1fffe000

0000eec8 <_int_default_isr>:
_int_default_isr():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:62
 */
void _int_default_isr
(
    pointer vector_number
)
{ /* Body */
    eec8:	b538      	push	{r3, r4, r5, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:66
    KERNEL_DATA_STRUCT_PTR kernel_data;
    TD_STRUCT_PTR          td_ptr;

    _GET_KERNEL_DATA(kernel_data);
    eeca:	4d11      	ldr	r5, [pc, #68]	; (ef10 <_int_default_isr+0x48>)
    eecc:	682a      	ldr	r2, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:68

    td_ptr = kernel_data->ACTIVE_PTR;
    eece:	69d4      	ldr	r4, [r2, #28]
_int_disable():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:106
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    _INT_DISABLE_CODE();
    eed0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    eed2:	2b00      	cmp	r3, #0
    eed4:	d100      	bne.n	eed8 <_int_default_isr+0x10>
    eed6:	b672      	cpsid	i
_int_default_isr():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:73
    td_ptr = kernel_data->ACTIVE_PTR;
    _KLOGE5(KLOG_int_default_isr, td_ptr, vector_number,
                    &vector_number, vector_number);

    _int_disable();
    if (td_ptr->STATE != UNHANDLED_INT_BLOCKED)
    eed8:	68a1      	ldr	r1, [r4, #8]
_int_disable():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:106
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    _INT_DISABLE_CODE();
    eeda:	3301      	adds	r3, #1
    eedc:	6563      	str	r3, [r4, #84]	; 0x54
_int_default_isr():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:73
    td_ptr = kernel_data->ACTIVE_PTR;
    _KLOGE5(KLOG_int_default_isr, td_ptr, vector_number,
                    &vector_number, vector_number);

    _int_disable();
    if (td_ptr->STATE != UNHANDLED_INT_BLOCKED)
    eede:	290b      	cmp	r1, #11
    eee0:	d00d      	beq.n	eefe <_int_default_isr+0x36>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:75
    {
        td_ptr->STATE = UNHANDLED_INT_BLOCKED;
    eee2:	230b      	movs	r3, #11
    eee4:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:76
        td_ptr->INFO = (_mqx_uint) vector_number;
    eee6:	63a0      	str	r0, [r4, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:77
        _task_set_error_td_internal(td_ptr, MQX_UNHANDLED_INTERRUPT);
    eee8:	2141      	movs	r1, #65	; 0x41
    eeea:	1c20      	adds	r0, r4, #0
    eeec:	f000 ffac 	bl	fe48 <_task_set_error_td_internal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:78
        _QUEUE_UNLINK(td_ptr);
    eef0:	6862      	ldr	r2, [r4, #4]
    eef2:	6823      	ldr	r3, [r4, #0]
    eef4:	6013      	str	r3, [r2, #0]
    eef6:	605a      	str	r2, [r3, #4]
    eef8:	682a      	ldr	r2, [r5, #0]
    eefa:	69d4      	ldr	r4, [r2, #28]
    eefc:	6d63      	ldr	r3, [r4, #84]	; 0x54
_int_enable():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:129
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    _INT_ENABLE_CODE();
    eefe:	2b00      	cmp	r3, #0
    ef00:	d004      	beq.n	ef0c <_int_default_isr+0x44>
    ef02:	3b01      	subs	r3, #1
    ef04:	6563      	str	r3, [r4, #84]	; 0x54
    ef06:	2b00      	cmp	r3, #0
    ef08:	d100      	bne.n	ef0c <_int_default_isr+0x44>
    ef0a:	b662      	cpsie	i
_int_default_isr():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:82
        _task_set_error_td_internal(td_ptr, MQX_UNHANDLED_INTERRUPT);
        _QUEUE_UNLINK(td_ptr);
    } /* Endif */
    _int_enable();

} /* Endbody */
    ef0c:	bd38      	pop	{r3, r4, r5, pc}
    ef0e:	46c0      	nop			; (mov r8, r8)
    ef10:	1fffe000 	.word	0x1fffe000

0000ef14 <_int_disable>:
_int_disable():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:106
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    _INT_DISABLE_CODE();
    ef14:	4b04      	ldr	r3, [pc, #16]	; (ef28 <_int_disable+0x14>)
    ef16:	681b      	ldr	r3, [r3, #0]
    ef18:	69db      	ldr	r3, [r3, #28]
    ef1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    ef1c:	2a00      	cmp	r2, #0
    ef1e:	d100      	bne.n	ef22 <_int_disable+0xe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:106 (discriminator 1)
    ef20:	b672      	cpsid	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:106 (discriminator 2)
    ef22:	3201      	adds	r2, #1
    ef24:	655a      	str	r2, [r3, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:108 (discriminator 2)

} /* Endbody */
    ef26:	4770      	bx	lr
    ef28:	1fffe000 	.word	0x1fffe000

0000ef2c <_int_enable>:
_int_enable():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:127
 */
void _int_enable(void)
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);
    ef2c:	4b05      	ldr	r3, [pc, #20]	; (ef44 <_int_enable+0x18>)
    ef2e:	6819      	ldr	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:129

    _INT_ENABLE_CODE();
    ef30:	69cb      	ldr	r3, [r1, #28]
    ef32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    ef34:	2a00      	cmp	r2, #0
    ef36:	d004      	beq.n	ef42 <_int_enable+0x16>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:129 (discriminator 1)
    ef38:	3a01      	subs	r2, #1
    ef3a:	655a      	str	r2, [r3, #84]	; 0x54
    ef3c:	2a00      	cmp	r2, #0
    ef3e:	d100      	bne.n	ef42 <_int_enable+0x16>
    ef40:	b662      	cpsie	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:131

} /* Endbody */
    ef42:	4770      	bx	lr
    ef44:	1fffe000 	.word	0x1fffe000

0000ef48 <_int_get_isr_data>:
_int_get_isr_data():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:329

pointer _int_get_isr_data
(
    _mqx_uint vector
)
{ /* Body */
    ef48:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:332
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);
    ef4a:	4b0e      	ldr	r3, [pc, #56]	; (ef84 <_int_get_isr_data+0x3c>)
    ef4c:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:334
#if MQX_CHECK_ERRORS
    if ( kernel_data->INTERRUPT_TABLE_PTR == NULL )
    ef4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ef50:	2a00      	cmp	r2, #0
    ef52:	d011      	beq.n	ef78 <_int_get_isr_data+0x30>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:339
    {
        _task_set_error(MQX_COMPONENT_DOES_NOT_EXIST);
        return(NULL);
    } /* Endif */
    if ((vector < kernel_data->FIRST_USER_ISR_VECTOR) ||
    ef54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    ef56:	4281      	cmp	r1, r0
    ef58:	d809      	bhi.n	ef6e <_int_get_isr_data+0x26>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:339 (discriminator 1)
    ef5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    ef5c:	4298      	cmp	r0, r3
    ef5e:	d806      	bhi.n	ef6e <_int_get_isr_data+0x26>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:347
        _task_set_error(MQX_INVALID_VECTORED_INTERRUPT);
        return(NULL);
    }/* Endif */
#endif

    vector -= kernel_data->FIRST_USER_ISR_VECTOR;
    ef60:	1a40      	subs	r0, r0, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:348
    return(kernel_data->INTERRUPT_TABLE_PTR[vector].APP_ISR_DATA);
    ef62:	0041      	lsls	r1, r0, #1
    ef64:	1808      	adds	r0, r1, r0
    ef66:	0080      	lsls	r0, r0, #2
    ef68:	1812      	adds	r2, r2, r0
    ef6a:	6890      	ldr	r0, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:350

} /* Endbody */
    ef6c:	bd08      	pop	{r3, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:342
        return(NULL);
    } /* Endif */
    if ((vector < kernel_data->FIRST_USER_ISR_VECTOR) ||
        (vector > kernel_data->LAST_USER_ISR_VECTOR))
    {
        _task_set_error(MQX_INVALID_VECTORED_INTERRUPT);
    ef6e:	2014      	movs	r0, #20
    ef70:	f000 fd40 	bl	f9f4 <_task_set_error>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:343
        return(NULL);
    ef74:	2000      	movs	r0, #0
    ef76:	e7f9      	b.n	ef6c <_int_get_isr_data+0x24>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:336

    _GET_KERNEL_DATA(kernel_data);
#if MQX_CHECK_ERRORS
    if ( kernel_data->INTERRUPT_TABLE_PTR == NULL )
    {
        _task_set_error(MQX_COMPONENT_DOES_NOT_EXIST);
    ef78:	2018      	movs	r0, #24
    ef7a:	f000 fd3b 	bl	f9f4 <_task_set_error>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:337
        return(NULL);
    ef7e:	2000      	movs	r0, #0
    ef80:	e7f4      	b.n	ef6c <_int_get_isr_data+0x24>
    ef82:	46c0      	nop			; (mov r8, r8)
    ef84:	1fffe000 	.word	0x1fffe000

0000ef88 <_int_install_isr>:
_int_install_isr():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:558
{ /* Body */
    KERNEL_DATA_STRUCT_PTR     kernel_data;
    INTERRUPT_TABLE_STRUCT_PTR table_ptr;
    INT_ISR_FPTR               old_isr_ptr;

    _GET_KERNEL_DATA(kernel_data);
    ef88:	4b17      	ldr	r3, [pc, #92]	; (efe8 <_int_install_isr+0x60>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:553
(
    _mqx_uint        vector,
    INT_ISR_FPTR     isr_ptr,
    pointer          isr_data
)
{ /* Body */
    ef8a:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:558
    KERNEL_DATA_STRUCT_PTR     kernel_data;
    INTERRUPT_TABLE_STRUCT_PTR table_ptr;
    INT_ISR_FPTR               old_isr_ptr;

    _GET_KERNEL_DATA(kernel_data);
    ef8c:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:563

    _KLOGE4(KLOG_int_install_isr, vector, isr_ptr, isr_data);

#if MQX_CHECK_ERRORS
    if ( kernel_data->INTERRUPT_TABLE_PTR == NULL )
    ef8e:	6b9d      	ldr	r5, [r3, #56]	; 0x38
    ef90:	2d00      	cmp	r5, #0
    ef92:	d023      	beq.n	efdc <_int_install_isr+0x54>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:568
    {
        _task_set_error(MQX_COMPONENT_DOES_NOT_EXIST);
        return(NULL);
    } /* Endif */
    if ((vector < kernel_data->FIRST_USER_ISR_VECTOR) ||
    ef94:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    ef96:	4284      	cmp	r4, r0
    ef98:	d81b      	bhi.n	efd2 <_int_install_isr+0x4a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:568 (discriminator 1)
    ef9a:	6b1e      	ldr	r6, [r3, #48]	; 0x30
    ef9c:	42b0      	cmp	r0, r6
    ef9e:	d818      	bhi.n	efd2 <_int_install_isr+0x4a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:577
        _KLOGX2(KLOG_int_install_isr, NULL);
        return(NULL);
    }/* Endif */
#endif

    table_ptr = &kernel_data->INTERRUPT_TABLE_PTR[vector -
    efa0:	1b00      	subs	r0, r0, r4
    efa2:	0044      	lsls	r4, r0, #1
    efa4:	1824      	adds	r4, r4, r0
    efa6:	00a4      	lsls	r4, r4, #2
    efa8:	192c      	adds	r4, r5, r4
_int_disable():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:106
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    _INT_DISABLE_CODE();
    efaa:	69dd      	ldr	r5, [r3, #28]
    efac:	6d6e      	ldr	r6, [r5, #84]	; 0x54
    efae:	2e00      	cmp	r6, #0
    efb0:	d106      	bne.n	efc0 <_int_install_isr+0x38>
    efb2:	b672      	cpsid	i
_int_install_isr():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:581

    table_ptr = &kernel_data->INTERRUPT_TABLE_PTR[vector -
                                                  kernel_data->FIRST_USER_ISR_VECTOR];

    _int_disable();
    old_isr_ptr = table_ptr->APP_ISR;
    efb4:	6820      	ldr	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:583
    table_ptr->APP_ISR  = isr_ptr;
    table_ptr->APP_ISR_DATA = isr_data;
    efb6:	60a2      	str	r2, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:582
    table_ptr = &kernel_data->INTERRUPT_TABLE_PTR[vector -
                                                  kernel_data->FIRST_USER_ISR_VECTOR];

    _int_disable();
    old_isr_ptr = table_ptr->APP_ISR;
    table_ptr->APP_ISR  = isr_ptr;
    efb8:	6021      	str	r1, [r4, #0]
_int_enable():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:129
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    _INT_ENABLE_CODE();
    efba:	656e      	str	r6, [r5, #84]	; 0x54
    efbc:	b662      	cpsie	i
_int_install_isr():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:590

    _KLOGX2(KLOG_int_install_isr, old_isr_ptr);

    return (old_isr_ptr);

} /* Endbody */
    efbe:	bd70      	pop	{r4, r5, r6, pc}
_int_disable():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:106
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    _INT_DISABLE_CODE();
    efc0:	1c73      	adds	r3, r6, #1
    efc2:	656b      	str	r3, [r5, #84]	; 0x54
_int_install_isr():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:581

    table_ptr = &kernel_data->INTERRUPT_TABLE_PTR[vector -
                                                  kernel_data->FIRST_USER_ISR_VECTOR];

    _int_disable();
    old_isr_ptr = table_ptr->APP_ISR;
    efc4:	6820      	ldr	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:583
    table_ptr->APP_ISR  = isr_ptr;
    table_ptr->APP_ISR_DATA = isr_data;
    efc6:	60a2      	str	r2, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:582
    table_ptr = &kernel_data->INTERRUPT_TABLE_PTR[vector -
                                                  kernel_data->FIRST_USER_ISR_VECTOR];

    _int_disable();
    old_isr_ptr = table_ptr->APP_ISR;
    table_ptr->APP_ISR  = isr_ptr;
    efc8:	6021      	str	r1, [r4, #0]
_int_enable():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:129
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    _INT_ENABLE_CODE();
    efca:	2b00      	cmp	r3, #0
    efcc:	d0f7      	beq.n	efbe <_int_install_isr+0x36>
    efce:	656e      	str	r6, [r5, #84]	; 0x54
    efd0:	e7f5      	b.n	efbe <_int_install_isr+0x36>
_int_install_isr():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:571
        return(NULL);
    } /* Endif */
    if ((vector < kernel_data->FIRST_USER_ISR_VECTOR) ||
        (vector > kernel_data->LAST_USER_ISR_VECTOR))
    {
        _task_set_error(MQX_INVALID_VECTORED_INTERRUPT);
    efd2:	2014      	movs	r0, #20
    efd4:	f000 fd0e 	bl	f9f4 <_task_set_error>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:573
        _KLOGX2(KLOG_int_install_isr, NULL);
        return(NULL);
    efd8:	2000      	movs	r0, #0
    efda:	e7f0      	b.n	efbe <_int_install_isr+0x36>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:565
    _KLOGE4(KLOG_int_install_isr, vector, isr_ptr, isr_data);

#if MQX_CHECK_ERRORS
    if ( kernel_data->INTERRUPT_TABLE_PTR == NULL )
    {
        _task_set_error(MQX_COMPONENT_DOES_NOT_EXIST);
    efdc:	2018      	movs	r0, #24
    efde:	f000 fd09 	bl	f9f4 <_task_set_error>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:566
        return(NULL);
    efe2:	2000      	movs	r0, #0
    efe4:	e7eb      	b.n	efbe <_int_install_isr+0x36>
    efe6:	46c0      	nop			; (mov r8, r8)
    efe8:	1fffe000 	.word	0x1fffe000

0000efec <_int_init>:
_int_init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:971
_mqx_uint _int_init
(
    _mqx_uint          first_user_isr_vector_number,
    _mqx_uint          last_user_isr_vector_number
)
{ /* Body */
    efec:	b530      	push	{r4, r5, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:979
    _mqx_uint                  number;

#if MQX_CHECK_ERRORS
    if (last_user_isr_vector_number < first_user_isr_vector_number)
    {
        return MQX_INVALID_PARAMETER;
    efee:	230c      	movs	r3, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:977
    KERNEL_DATA_STRUCT_PTR     kernel_data;
    INTERRUPT_TABLE_STRUCT_PTR int_table_ptr;
    _mqx_uint                  number;

#if MQX_CHECK_ERRORS
    if (last_user_isr_vector_number < first_user_isr_vector_number)
    eff0:	4281      	cmp	r1, r0
    eff2:	d201      	bcs.n	eff8 <_int_init+0xc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1036

#endif /* MQX_SPARSE_ISR_TABLE */

    return MQX_OK;

} /* Endbody */
    eff4:	1c18      	adds	r0, r3, #0
    eff6:	bd30      	pop	{r4, r5, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:983
    {
        return MQX_INVALID_PARAMETER;
    } /* Endif */
#endif

    _GET_KERNEL_DATA(kernel_data);
    eff8:	4b0b      	ldr	r3, [pc, #44]	; (f028 <_int_init+0x3c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:984
    kernel_data->INT_KERNEL_ISR_ADDR = _int_kernel_isr;
    effa:	4a0c      	ldr	r2, [pc, #48]	; (f02c <_int_init+0x40>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:983
    {
        return MQX_INVALID_PARAMETER;
    } /* Endif */
#endif

    _GET_KERNEL_DATA(kernel_data);
    effc:	681c      	ldr	r4, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:984
    kernel_data->INT_KERNEL_ISR_ADDR = _int_kernel_isr;
    effe:	23c4      	movs	r3, #196	; 0xc4
    f000:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:989

    /* Set the current default ISR for MQX that is called whenever an
     * unhandled interrupt occurs
     */
    kernel_data->DEFAULT_ISR = _int_default_isr;
    f002:	4a0b      	ldr	r2, [pc, #44]	; (f030 <_int_init+0x44>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1011
#endif /* MQX_CHECK_MEMORY_ALLOCATION_ERRORS */

    _mem_set_type(int_table_ptr, MEM_TYPE_INTERRUPT_TABLE);
#endif /* MQX_LITE_VERSION_NUMBER */

    kernel_data->INTERRUPT_TABLE_PTR   = int_table_ptr;
    f004:	4b0b      	ldr	r3, [pc, #44]	; (f034 <_int_init+0x48>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:992
     * unhandled interrupt occurs
     */
    kernel_data->DEFAULT_ISR = _int_default_isr;

#if !MQX_SPARSE_ISR_TABLE
    number = last_user_isr_vector_number - first_user_isr_vector_number + 1;
    f006:	1a0d      	subs	r5, r1, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:989
    kernel_data->INT_KERNEL_ISR_ADDR = _int_kernel_isr;

    /* Set the current default ISR for MQX that is called whenever an
     * unhandled interrupt occurs
     */
    kernel_data->DEFAULT_ISR = _int_default_isr;
    f008:	62a2      	str	r2, [r4, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1011
#endif /* MQX_CHECK_MEMORY_ALLOCATION_ERRORS */

    _mem_set_type(int_table_ptr, MEM_TYPE_INTERRUPT_TABLE);
#endif /* MQX_LITE_VERSION_NUMBER */

    kernel_data->INTERRUPT_TABLE_PTR   = int_table_ptr;
    f00a:	63a3      	str	r3, [r4, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1012
    kernel_data->FIRST_USER_ISR_VECTOR = first_user_isr_vector_number;
    f00c:	62e0      	str	r0, [r4, #44]	; 0x2c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1013
    kernel_data->LAST_USER_ISR_VECTOR  = last_user_isr_vector_number;
    f00e:	6321      	str	r1, [r4, #48]	; 0x30
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1016

#if !MQX_SPARSE_ISR_TABLE
    while (number--)
    f010:	1c69      	adds	r1, r5, #1
    f012:	d007      	beq.n	f024 <_int_init+0x38>
    f014:	1c41      	adds	r1, r0, #1
    f016:	1949      	adds	r1, r1, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1019
    {
        int_table_ptr->APP_ISR      = _int_default_isr;
        int_table_ptr->APP_ISR_DATA = (pointer)(first_user_isr_vector_number++);
    f018:	6098      	str	r0, [r3, #8]
    f01a:	3001      	adds	r0, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1018
    kernel_data->LAST_USER_ISR_VECTOR  = last_user_isr_vector_number;

#if !MQX_SPARSE_ISR_TABLE
    while (number--)
    {
        int_table_ptr->APP_ISR      = _int_default_isr;
    f01c:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1020
        int_table_ptr->APP_ISR_DATA = (pointer)(first_user_isr_vector_number++);
        ++int_table_ptr;
    f01e:	330c      	adds	r3, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1016
    kernel_data->INTERRUPT_TABLE_PTR   = int_table_ptr;
    kernel_data->FIRST_USER_ISR_VECTOR = first_user_isr_vector_number;
    kernel_data->LAST_USER_ISR_VECTOR  = last_user_isr_vector_number;

#if !MQX_SPARSE_ISR_TABLE
    while (number--)
    f020:	4288      	cmp	r0, r1
    f022:	d1f9      	bne.n	f018 <_int_init+0x2c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1034
        int_table_ptr[number] = NULL;
    }

#endif /* MQX_SPARSE_ISR_TABLE */

    return MQX_OK;
    f024:	2300      	movs	r3, #0
    f026:	e7e5      	b.n	eff4 <_int_init+0x8>
    f028:	1fffe000 	.word	0x1fffe000
    f02c:	00013a83 	.word	0x00013a83
    f030:	0000eec9 	.word	0x0000eec9
    f034:	20000fa8 	.word	0x20000fa8

0000f038 <_lwevent_create>:
_lwevent_create():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:198
_mqx_uint _lwevent_create
(
    LWEVENT_STRUCT_PTR  event_ptr,
    _mqx_uint           flags
)
{
    f038:	b538      	push	{r3, r4, r5, lr}
_lwevent_create_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:78
    {
        return MQX_LWEVENT_INVALID;
    }
#endif

    _GET_KERNEL_DATA(kernel_data);
    f03a:	4b1e      	ldr	r3, [pc, #120]	; (f0b4 <_lwevent_create+0x7c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:84

    _KLOGE2(KLOG_lwevent_create, event_ptr);

    _QUEUE_INIT(&event_ptr->WAITING_TASKS, 0);
    event_ptr->VALUE = 0;
    event_ptr->FLAGS = flags;
    f03c:	61c1      	str	r1, [r0, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:78
    {
        return MQX_LWEVENT_INVALID;
    }
#endif

    _GET_KERNEL_DATA(kernel_data);
    f03e:	681d      	ldr	r5, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:82

    _KLOGE2(KLOG_lwevent_create, event_ptr);

    _QUEUE_INIT(&event_ptr->WAITING_TASKS, 0);
    f040:	1c03      	adds	r3, r0, #0
    f042:	3308      	adds	r3, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:86
    event_ptr->VALUE = 0;
    event_ptr->FLAGS = flags;

    if (flags & LWEVENT_AUTO_CLEAR)
    f044:	07c9      	lsls	r1, r1, #31
    f046:	17c9      	asrs	r1, r1, #31
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:82

    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_lwevent_create, event_ptr);

    _QUEUE_INIT(&event_ptr->WAITING_TASKS, 0);
    f048:	6083      	str	r3, [r0, #8]
    f04a:	60c3      	str	r3, [r0, #12]
    f04c:	2300      	movs	r3, #0
    f04e:	8203      	strh	r3, [r0, #16]
    f050:	8243      	strh	r3, [r0, #18]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:83
    event_ptr->VALUE = 0;
    f052:	6183      	str	r3, [r0, #24]
    f054:	6201      	str	r1, [r0, #32]
_lwevent_create():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:198
_mqx_uint _lwevent_create
(
    LWEVENT_STRUCT_PTR  event_ptr,
    _mqx_uint           flags
)
{
    f056:	1c04      	adds	r4, r0, #0
_lwevent_create_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:91
    if (flags & LWEVENT_AUTO_CLEAR)
        event_ptr->AUTO = ~0;
    else
        event_ptr->AUTO = 0;

    _int_disable();
    f058:	f7ff ff5c 	bl	ef14 <_int_disable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:105
        }
    }
    else
#endif
    {
        if (kernel_data->LWEVENTS.NEXT == NULL)
    f05c:	218e      	movs	r1, #142	; 0x8e
    f05e:	0089      	lsls	r1, r1, #2
    f060:	586b      	ldr	r3, [r5, r1]
    f062:	2b00      	cmp	r3, #0
    f064:	d00f      	beq.n	f086 <_lwevent_create+0x4e>
    f066:	186a      	adds	r2, r5, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:112
            /* Initialize the light weight event queue */
            _QUEUE_INIT(&kernel_data->LWEVENTS, 0);
        }
    }

    event_ptr->VALID = LWEVENT_VALID;
    f068:	4913      	ldr	r1, [pc, #76]	; (f0b8 <_lwevent_create+0x80>)
    f06a:	6161      	str	r1, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:135
    }
    else
#endif
    {
        event_chk_ptr = (LWEVENT_STRUCT_PTR) ((pointer) kernel_data->LWEVENTS.NEXT);
        while (event_chk_ptr != (LWEVENT_STRUCT_PTR) ((pointer) &kernel_data->LWEVENTS))
    f06c:	4293      	cmp	r3, r2
    f06e:	d103      	bne.n	f078 <_lwevent_create+0x40>
    f070:	e012      	b.n	f098 <_lwevent_create+0x60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:143
            {
                _int_enable();
                _KLOGX2(KLOG_lwevent_create, MQX_EINVAL);
                return (MQX_EINVAL);
            }
            event_chk_ptr = (LWEVENT_STRUCT_PTR) ((pointer) event_chk_ptr->LINK.NEXT);
    f072:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:135
    }
    else
#endif
    {
        event_chk_ptr = (LWEVENT_STRUCT_PTR) ((pointer) kernel_data->LWEVENTS.NEXT);
        while (event_chk_ptr != (LWEVENT_STRUCT_PTR) ((pointer) &kernel_data->LWEVENTS))
    f074:	4293      	cmp	r3, r2
    f076:	d00f      	beq.n	f098 <_lwevent_create+0x60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:137
        {
            if (event_chk_ptr == event_ptr)
    f078:	429c      	cmp	r4, r3
    f07a:	d1fa      	bne.n	f072 <_lwevent_create+0x3a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:139
            {
                _int_enable();
    f07c:	f7ff ff56 	bl	ef2c <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:141
                _KLOGX2(KLOG_lwevent_create, MQX_EINVAL);
                return (MQX_EINVAL);
    f080:	2082      	movs	r0, #130	; 0x82
    f082:	00c0      	lsls	r0, r0, #3
    f084:	e014      	b.n	f0b0 <_lwevent_create+0x78>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:108
#endif
    {
        if (kernel_data->LWEVENTS.NEXT == NULL)
        {
            /* Initialize the light weight event queue */
            _QUEUE_INIT(&kernel_data->LWEVENTS, 0);
    f086:	208e      	movs	r0, #142	; 0x8e
    f088:	0080      	lsls	r0, r0, #2
    f08a:	182a      	adds	r2, r5, r0
    f08c:	506a      	str	r2, [r5, r1]
    f08e:	8113      	strh	r3, [r2, #8]
    f090:	8153      	strh	r3, [r2, #10]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:112
        }
    }

    event_ptr->VALID = LWEVENT_VALID;
    f092:	4b09      	ldr	r3, [pc, #36]	; (f0b8 <_lwevent_create+0x80>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:108
#endif
    {
        if (kernel_data->LWEVENTS.NEXT == NULL)
        {
            /* Initialize the light weight event queue */
            _QUEUE_INIT(&kernel_data->LWEVENTS, 0);
    f094:	6052      	str	r2, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:112
        }
    }

    event_ptr->VALID = LWEVENT_VALID;
    f096:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:156
        _QUEUE_ENQUEUE(&kernel_data->USR_LWEVENTS, &event_ptr->LINK);
    }
    else
#endif
    {
        _QUEUE_ENQUEUE(&kernel_data->LWEVENTS, &event_ptr->LINK);
    f098:	6853      	ldr	r3, [r2, #4]
    f09a:	6819      	ldr	r1, [r3, #0]
    f09c:	6021      	str	r1, [r4, #0]
    f09e:	601c      	str	r4, [r3, #0]
    f0a0:	6063      	str	r3, [r4, #4]
    f0a2:	604c      	str	r4, [r1, #4]
    f0a4:	8913      	ldrh	r3, [r2, #8]
    f0a6:	3301      	adds	r3, #1
    f0a8:	8113      	strh	r3, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:159
    }

    _int_enable();
    f0aa:	f7ff ff3f 	bl	ef2c <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:162

    _KLOGX2(KLOG_lwevent_create, MQX_OK);
    return (MQX_OK);
    f0ae:	2000      	movs	r0, #0
_lwevent_create():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:207
        return _usr_lwevent_create(event_ptr, flags);
    }
#endif

    return _lwevent_create_internal(event_ptr, flags, FALSE);
}
    f0b0:	bd38      	pop	{r3, r4, r5, pc}
    f0b2:	46c0      	nop			; (mov r8, r8)
    f0b4:	1fffe000 	.word	0x1fffe000
    f0b8:	6c65766e 	.word	0x6c65766e

0000f0bc <_lwevent_set>:
_lwevent_set():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:734
_mqx_uint _lwevent_set
(
    LWEVENT_STRUCT_PTR  event_ptr,
    _mqx_uint           bit_mask
)
{
    f0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:748
    {
        return _usr_lwevent_set(event_ptr, bit_mask);
    }
#endif

    _GET_KERNEL_DATA(kernel_data);
    f0be:	4b46      	ldr	r3, [pc, #280]	; (f1d8 <_lwevent_set+0x11c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:734
_mqx_uint _lwevent_set
(
    LWEVENT_STRUCT_PTR  event_ptr,
    _mqx_uint           bit_mask
)
{
    f0c0:	4656      	mov	r6, sl
    f0c2:	464d      	mov	r5, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:748
    {
        return _usr_lwevent_set(event_ptr, bit_mask);
    }
#endif

    _GET_KERNEL_DATA(kernel_data);
    f0c4:	681a      	ldr	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:734
_mqx_uint _lwevent_set
(
    LWEVENT_STRUCT_PTR  event_ptr,
    _mqx_uint           bit_mask
)
{
    f0c6:	465f      	mov	r7, fp
    f0c8:	4644      	mov	r4, r8
    f0ca:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:752

    _GET_KERNEL_DATA(kernel_data);

    _KLOGE3(KLOG_lwevent_set, event_ptr, bit_mask);

    _INT_DISABLE();
    f0cc:	69d6      	ldr	r6, [r2, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:734
_mqx_uint _lwevent_set
(
    LWEVENT_STRUCT_PTR  event_ptr,
    _mqx_uint           bit_mask
)
{
    f0ce:	b085      	sub	sp, #20
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:752

    _GET_KERNEL_DATA(kernel_data);

    _KLOGE3(KLOG_lwevent_set, event_ptr, bit_mask);

    _INT_DISABLE();
    f0d0:	6d75      	ldr	r5, [r6, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:748
    {
        return _usr_lwevent_set(event_ptr, bit_mask);
    }
#endif

    _GET_KERNEL_DATA(kernel_data);
    f0d2:	4694      	mov	ip, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:752

    _KLOGE3(KLOG_lwevent_set, event_ptr, bit_mask);

    _INT_DISABLE();
    f0d4:	2d00      	cmp	r5, #0
    f0d6:	d100      	bne.n	f0da <_lwevent_set+0x1e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:752 (discriminator 1)
    f0d8:	b672      	cpsid	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:754 (discriminator 2)
#if MQX_CHECK_VALIDITY
    if (event_ptr->VALID != LWEVENT_VALID)
    f0da:	4b40      	ldr	r3, [pc, #256]	; (f1dc <_lwevent_set+0x120>)
    f0dc:	6947      	ldr	r7, [r0, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:752 (discriminator 2)

    _GET_KERNEL_DATA(kernel_data);

    _KLOGE3(KLOG_lwevent_set, event_ptr, bit_mask);

    _INT_DISABLE();
    f0de:	1c6c      	adds	r4, r5, #1
    f0e0:	46a0      	mov	r8, r4
    f0e2:	6574      	str	r4, [r6, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:754 (discriminator 2)
#if MQX_CHECK_VALIDITY
    if (event_ptr->VALID != LWEVENT_VALID)
    f0e4:	429f      	cmp	r7, r3
    f0e6:	d009      	beq.n	f0fc <_lwevent_set+0x40>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:756
    {
        _int_enable();
    f0e8:	f7ff ff20 	bl	ef2c <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:758
        _KLOGX2(KLOG_lwevent_set, MQX_LWEVENT_INVALID);
        return (MQX_LWEVENT_INVALID);
    f0ec:	2039      	movs	r0, #57	; 0x39
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:801
    _CHECK_RUN_SCHEDULER();

    _KLOGX2(KLOG_lwevent_set, MQX_OK);
    return (MQX_OK);

}
    f0ee:	b005      	add	sp, #20
    f0f0:	bc3c      	pop	{r2, r3, r4, r5}
    f0f2:	4690      	mov	r8, r2
    f0f4:	4699      	mov	r9, r3
    f0f6:	46a2      	mov	sl, r4
    f0f8:	46ab      	mov	fp, r5
    f0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:762
        _KLOGX2(KLOG_lwevent_set, MQX_LWEVENT_INVALID);
        return (MQX_LWEVENT_INVALID);
    } /* Endif */
#endif

    set_bits = event_ptr->VALUE | bit_mask;
    f0fc:	6982      	ldr	r2, [r0, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:764

    if (_QUEUE_GET_SIZE(&event_ptr->WAITING_TASKS))
    f0fe:	8a03      	ldrh	r3, [r0, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:762
        _KLOGX2(KLOG_lwevent_set, MQX_LWEVENT_INVALID);
        return (MQX_LWEVENT_INVALID);
    } /* Endif */
#endif

    set_bits = event_ptr->VALUE | bit_mask;
    f100:	4311      	orrs	r1, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:764

    if (_QUEUE_GET_SIZE(&event_ptr->WAITING_TASKS))
    f102:	2b00      	cmp	r3, #0
    f104:	d05c      	beq.n	f1c0 <_lwevent_set+0x104>
    f106:	2308      	movs	r3, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:779
            if (((td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED) && ((td_ptr->LWEVENT_BITS & set_bits)
                            == td_ptr->LWEVENT_BITS)) || ((!(td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED))
                            && (td_ptr->LWEVENT_BITS & set_bits)))
            {
                _QUEUE_REMOVE(&event_ptr->WAITING_TASKS, q_ptr);
                _TIME_DEQUEUE(td_ptr, kernel_data);
    f108:	229a      	movs	r2, #154	; 0x9a
    f10a:	181b      	adds	r3, r3, r0
    f10c:	0052      	lsls	r2, r2, #1
    f10e:	4699      	mov	r9, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:768

    if (_QUEUE_GET_SIZE(&event_ptr->WAITING_TASKS))
    {
        /* Schedule waiting task(s) to run if bits ok */

        q_ptr = event_ptr->WAITING_TASKS.NEXT;
    f110:	6887      	ldr	r7, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:779
            if (((td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED) && ((td_ptr->LWEVENT_BITS & set_bits)
                            == td_ptr->LWEVENT_BITS)) || ((!(td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED))
                            && (td_ptr->LWEVENT_BITS & set_bits)))
            {
                _QUEUE_REMOVE(&event_ptr->WAITING_TASKS, q_ptr);
                _TIME_DEQUEUE(td_ptr, kernel_data);
    f112:	1c13      	adds	r3, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:774
        while (q_ptr != (QUEUE_ELEMENT_STRUCT_PTR) ((pointer) &event_ptr->WAITING_TASKS))
        {
            td_ptr = (pointer) q_ptr;
            _BACKUP_POINTER(td_ptr, TD_STRUCT, AUX_QUEUE);
            next_q_ptr = q_ptr->NEXT;
            if (((td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED) && ((td_ptr->LWEVENT_BITS & set_bits)
    f114:	2480      	movs	r4, #128	; 0x80
    f116:	464a      	mov	r2, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:779
                            == td_ptr->LWEVENT_BITS)) || ((!(td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED))
                            && (td_ptr->LWEVENT_BITS & set_bits)))
            {
                _QUEUE_REMOVE(&event_ptr->WAITING_TASKS, q_ptr);
                _TIME_DEQUEUE(td_ptr, kernel_data);
    f118:	4463      	add	r3, ip
    f11a:	46b2      	mov	sl, r6
    f11c:	46a9      	mov	r9, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:774
        while (q_ptr != (QUEUE_ELEMENT_STRUCT_PTR) ((pointer) &event_ptr->WAITING_TASKS))
        {
            td_ptr = (pointer) q_ptr;
            _BACKUP_POINTER(td_ptr, TD_STRUCT, AUX_QUEUE);
            next_q_ptr = q_ptr->NEXT;
            if (((td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED) && ((td_ptr->LWEVENT_BITS & set_bits)
    f11e:	46a3      	mov	fp, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:779
                            == td_ptr->LWEVENT_BITS)) || ((!(td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED))
                            && (td_ptr->LWEVENT_BITS & set_bits)))
            {
                _QUEUE_REMOVE(&event_ptr->WAITING_TASKS, q_ptr);
                _TIME_DEQUEUE(td_ptr, kernel_data);
    f120:	9303      	str	r3, [sp, #12]
    f122:	1c3e      	adds	r6, r7, #0
    f124:	9200      	str	r2, [sp, #0]
    f126:	4665      	mov	r5, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:769
    if (_QUEUE_GET_SIZE(&event_ptr->WAITING_TASKS))
    {
        /* Schedule waiting task(s) to run if bits ok */

        q_ptr = event_ptr->WAITING_TASKS.NEXT;
        while (q_ptr != (QUEUE_ELEMENT_STRUCT_PTR) ((pointer) &event_ptr->WAITING_TASKS))
    f128:	e039      	b.n	f19e <_lwevent_set+0xe2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:776
            td_ptr = (pointer) q_ptr;
            _BACKUP_POINTER(td_ptr, TD_STRUCT, AUX_QUEUE);
            next_q_ptr = q_ptr->NEXT;
            if (((td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED) && ((td_ptr->LWEVENT_BITS & set_bits)
                            == td_ptr->LWEVENT_BITS)) || ((!(td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED))
                            && (td_ptr->LWEVENT_BITS & set_bits)))
    f12a:	6f9c      	ldr	r4, [r3, #120]	; 0x78
    f12c:	400c      	ands	r4, r1
    f12e:	d034      	beq.n	f19a <_lwevent_set+0xde>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:778
            {
                _QUEUE_REMOVE(&event_ptr->WAITING_TASKS, q_ptr);
    f130:	6876      	ldr	r6, [r6, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:779
                _TIME_DEQUEUE(td_ptr, kernel_data);
    f132:	2780      	movs	r7, #128	; 0x80
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:778
            next_q_ptr = q_ptr->NEXT;
            if (((td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED) && ((td_ptr->LWEVENT_BITS & set_bits)
                            == td_ptr->LWEVENT_BITS)) || ((!(td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED))
                            && (td_ptr->LWEVENT_BITS & set_bits)))
            {
                _QUEUE_REMOVE(&event_ptr->WAITING_TASKS, q_ptr);
    f134:	6032      	str	r2, [r6, #0]
    f136:	6056      	str	r6, [r2, #4]
    f138:	8a06      	ldrh	r6, [r0, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:779
                _TIME_DEQUEUE(td_ptr, kernel_data);
    f13a:	007f      	lsls	r7, r7, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:778
            next_q_ptr = q_ptr->NEXT;
            if (((td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED) && ((td_ptr->LWEVENT_BITS & set_bits)
                            == td_ptr->LWEVENT_BITS)) || ((!(td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED))
                            && (td_ptr->LWEVENT_BITS & set_bits)))
            {
                _QUEUE_REMOVE(&event_ptr->WAITING_TASKS, q_ptr);
    f13c:	3e01      	subs	r6, #1
    f13e:	8206      	strh	r6, [r0, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:779
                _TIME_DEQUEUE(td_ptr, kernel_data);
    f140:	689e      	ldr	r6, [r3, #8]
    f142:	9601      	str	r6, [sp, #4]
    f144:	423e      	tst	r6, r7
    f146:	d012      	beq.n	f16e <_lwevent_set+0xb2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:779 (discriminator 1)
    f148:	685e      	ldr	r6, [r3, #4]
    f14a:	681f      	ldr	r7, [r3, #0]
    f14c:	6037      	str	r7, [r6, #0]
    f14e:	607e      	str	r6, [r7, #4]
    f150:	9e03      	ldr	r6, [sp, #12]
    f152:	2701      	movs	r7, #1
    f154:	8936      	ldrh	r6, [r6, #8]
    f156:	427f      	negs	r7, r7
    f158:	46b4      	mov	ip, r6
    f15a:	44bc      	add	ip, r7
    f15c:	9e03      	ldr	r6, [sp, #12]
    f15e:	4667      	mov	r7, ip
    f160:	8137      	strh	r7, [r6, #8]
    f162:	4f1f      	ldr	r7, [pc, #124]	; (f1e0 <_lwevent_set+0x124>)
    f164:	9e01      	ldr	r6, [sp, #4]
    f166:	403e      	ands	r6, r7
    f168:	2703      	movs	r7, #3
    f16a:	433e      	orrs	r6, r7
    f16c:	609e      	str	r6, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:780
                td_ptr->INFO = 0;
    f16e:	2600      	movs	r6, #0
    f170:	639e      	str	r6, [r3, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:781
                _TASK_READY(td_ptr, kernel_data);
    f172:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    f174:	69de      	ldr	r6, [r3, #28]
    f176:	42be      	cmp	r6, r7
    f178:	d900      	bls.n	f17c <_lwevent_set+0xc0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:781 (discriminator 1)
    f17a:	626e      	str	r6, [r5, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:781 (discriminator 2)
    f17c:	69df      	ldr	r7, [r3, #28]
    f17e:	2602      	movs	r6, #2
    f180:	609e      	str	r6, [r3, #8]
    f182:	687e      	ldr	r6, [r7, #4]
    f184:	46bc      	mov	ip, r7
    f186:	6837      	ldr	r7, [r6, #0]
    f188:	605e      	str	r6, [r3, #4]
    f18a:	601f      	str	r7, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:785 (discriminator 2)

                /* store information about which bits caused task to be unblocked */
                td_ptr->LWEVENT_BITS &= set_bits;
                set_bits &= ~(event_ptr->AUTO & td_ptr->LWEVENT_BITS);
    f18c:	6a07      	ldr	r7, [r0, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:781 (discriminator 2)
                            && (td_ptr->LWEVENT_BITS & set_bits)))
            {
                _QUEUE_REMOVE(&event_ptr->WAITING_TASKS, q_ptr);
                _TIME_DEQUEUE(td_ptr, kernel_data);
                td_ptr->INFO = 0;
                _TASK_READY(td_ptr, kernel_data);
    f18e:	6033      	str	r3, [r6, #0]
    f190:	4666      	mov	r6, ip
    f192:	6073      	str	r3, [r6, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:784 (discriminator 2)

                /* store information about which bits caused task to be unblocked */
                td_ptr->LWEVENT_BITS &= set_bits;
    f194:	679c      	str	r4, [r3, #120]	; 0x78
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:785 (discriminator 2)
                set_bits &= ~(event_ptr->AUTO & td_ptr->LWEVENT_BITS);
    f196:	403c      	ands	r4, r7
    f198:	43a1      	bics	r1, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:734 (discriminator 1)
_mqx_uint _lwevent_set
(
    LWEVENT_STRUCT_PTR  event_ptr,
    _mqx_uint           bit_mask
)
{
    f19a:	1c16      	adds	r6, r2, #0
    f19c:	9a00      	ldr	r2, [sp, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:769 (discriminator 1)
    if (_QUEUE_GET_SIZE(&event_ptr->WAITING_TASKS))
    {
        /* Schedule waiting task(s) to run if bits ok */

        q_ptr = event_ptr->WAITING_TASKS.NEXT;
        while (q_ptr != (QUEUE_ELEMENT_STRUCT_PTR) ((pointer) &event_ptr->WAITING_TASKS))
    f19e:	4296      	cmp	r6, r2
    f1a0:	d00c      	beq.n	f1bc <_lwevent_set+0x100>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:774
        {
            td_ptr = (pointer) q_ptr;
            _BACKUP_POINTER(td_ptr, TD_STRUCT, AUX_QUEUE);
            next_q_ptr = q_ptr->NEXT;
            if (((td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED) && ((td_ptr->LWEVENT_BITS & set_bits)
    f1a2:	1c33      	adds	r3, r6, #0
    f1a4:	3b3c      	subs	r3, #60	; 0x3c
    f1a6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    f1a8:	465f      	mov	r7, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:773
        q_ptr = event_ptr->WAITING_TASKS.NEXT;
        while (q_ptr != (QUEUE_ELEMENT_STRUCT_PTR) ((pointer) &event_ptr->WAITING_TASKS))
        {
            td_ptr = (pointer) q_ptr;
            _BACKUP_POINTER(td_ptr, TD_STRUCT, AUX_QUEUE);
            next_q_ptr = q_ptr->NEXT;
    f1aa:	6832      	ldr	r2, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:774
            if (((td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED) && ((td_ptr->LWEVENT_BITS & set_bits)
    f1ac:	423c      	tst	r4, r7
    f1ae:	d0bc      	beq.n	f12a <_lwevent_set+0x6e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:774 (discriminator 1)
    f1b0:	6f9c      	ldr	r4, [r3, #120]	; 0x78
    f1b2:	6f9f      	ldr	r7, [r3, #120]	; 0x78
    f1b4:	400c      	ands	r4, r1
    f1b6:	42a7      	cmp	r7, r4
    f1b8:	d1ef      	bne.n	f19a <_lwevent_set+0xde>
    f1ba:	e7b9      	b.n	f130 <_lwevent_set+0x74>
    f1bc:	4656      	mov	r6, sl
    f1be:	464d      	mov	r5, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:793
            q_ptr = next_q_ptr;
        } /* Endwhile */
    } /* Endif */

    event_ptr->VALUE = set_bits;
    _INT_ENABLE();
    f1c0:	4643      	mov	r3, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:792
            } /* Endif */
            q_ptr = next_q_ptr;
        } /* Endwhile */
    } /* Endif */

    event_ptr->VALUE = set_bits;
    f1c2:	6181      	str	r1, [r0, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:793
    _INT_ENABLE();
    f1c4:	2b00      	cmp	r3, #0
    f1c6:	d003      	beq.n	f1d0 <_lwevent_set+0x114>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:793 (discriminator 1)
    f1c8:	6575      	str	r5, [r6, #84]	; 0x54
    f1ca:	2d00      	cmp	r5, #0
    f1cc:	d100      	bne.n	f1d0 <_lwevent_set+0x114>
    f1ce:	b662      	cpsie	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:796

    /* May need to let higher priority task run */
    _CHECK_RUN_SCHEDULER();
    f1d0:	f004 fbc2 	bl	13958 <_sched_check_scheduler_internal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:799

    _KLOGX2(KLOG_lwevent_set, MQX_OK);
    return (MQX_OK);
    f1d4:	2000      	movs	r0, #0
    f1d6:	e78a      	b.n	f0ee <_lwevent_set+0x32>
    f1d8:	1fffe000 	.word	0x1fffe000
    f1dc:	6c65766e 	.word	0x6c65766e
    f1e0:	fffffeff 	.word	0xfffffeff

0000f1e4 <_lwevent_wait_for>:
_lwevent_wait_for():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1025
    LWEVENT_STRUCT_PTR  event_ptr,
    _mqx_uint           bit_mask,
    boolean             all,
    MQX_TICK_STRUCT_PTR tick_ptr
)
{
    f1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f1e6:	4647      	mov	r7, r8
    f1e8:	b480      	push	{r7}
_lwevent_wait_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1142
{
    KERNEL_DATA_STRUCT_PTR  kernel_data;
    TD_STRUCT_PTR           td_ptr;
    _mqx_uint               result;

    _GET_KERNEL_DATA(kernel_data);
    f1ea:	4c3a      	ldr	r4, [pc, #232]	; (f2d4 <_lwevent_wait_for+0xf0>)
_lwevent_wait_for():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1025
    LWEVENT_STRUCT_PTR  event_ptr,
    _mqx_uint           bit_mask,
    boolean             all,
    MQX_TICK_STRUCT_PTR tick_ptr
)
{
    f1ec:	1c06      	adds	r6, r0, #0
_lwevent_wait_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1142
{
    KERNEL_DATA_STRUCT_PTR  kernel_data;
    TD_STRUCT_PTR           td_ptr;
    _mqx_uint               result;

    _GET_KERNEL_DATA(kernel_data);
    f1ee:	6824      	ldr	r4, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1147

#if MQX_CHECK_ERRORS
    if (kernel_data->IN_ISR)
    {
        return (MQX_CANNOT_CALL_FUNCTION_FROM_ISR);
    f1f0:	200d      	movs	r0, #13
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1145
    _mqx_uint               result;

    _GET_KERNEL_DATA(kernel_data);

#if MQX_CHECK_ERRORS
    if (kernel_data->IN_ISR)
    f1f2:	8b25      	ldrh	r5, [r4, #24]
    f1f4:	2d00      	cmp	r5, #0
    f1f6:	d002      	beq.n	f1fe <_lwevent_wait_for+0x1a>
_lwevent_wait_for():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1045
    result = _lwevent_wait_internal(event_ptr, bit_mask, all, tick_ptr, FALSE);

    _KLOGX2(KLOG_lwevent_wait_for, result);
    return (result);

}
    f1f8:	bc04      	pop	{r2}
    f1fa:	4690      	mov	r8, r2
    f1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
_lwevent_wait_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1152
        return (MQX_CANNOT_CALL_FUNCTION_FROM_ISR);
    } /* Endif */
#endif

    result = MQX_OK;
    td_ptr = kernel_data->ACTIVE_PTR;
    f1fe:	69e5      	ldr	r5, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1153
    _INT_DISABLE();
    f200:	6d68      	ldr	r0, [r5, #84]	; 0x54
    f202:	2800      	cmp	r0, #0
    f204:	d00b      	beq.n	f21e <_lwevent_wait_for+0x3a>
    f206:	1c47      	adds	r7, r0, #1
    f208:	46b8      	mov	r8, r7
    f20a:	656f      	str	r7, [r5, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1156

#if MQX_CHECK_VALIDITY
    if (event_ptr->VALID != LWEVENT_VALID)
    f20c:	4f32      	ldr	r7, [pc, #200]	; (f2d8 <_lwevent_wait_for+0xf4>)
    f20e:	46bc      	mov	ip, r7
    f210:	6977      	ldr	r7, [r6, #20]
    f212:	4567      	cmp	r7, ip
    f214:	d00c      	beq.n	f230 <_lwevent_wait_for+0x4c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1158
    {
        _int_enable();
    f216:	f7ff fe89 	bl	ef2c <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1159
        return (MQX_LWEVENT_INVALID);
    f21a:	2039      	movs	r0, #57	; 0x39
    f21c:	e7ec      	b.n	f1f8 <_lwevent_wait_for+0x14>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1153
    } /* Endif */
#endif

    result = MQX_OK;
    td_ptr = kernel_data->ACTIVE_PTR;
    _INT_DISABLE();
    f21e:	b672      	cpsid	i
    f220:	1c47      	adds	r7, r0, #1
    f222:	46b8      	mov	r8, r7
    f224:	656f      	str	r7, [r5, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1156

#if MQX_CHECK_VALIDITY
    if (event_ptr->VALID != LWEVENT_VALID)
    f226:	4f2c      	ldr	r7, [pc, #176]	; (f2d8 <_lwevent_wait_for+0xf4>)
    f228:	46bc      	mov	ip, r7
    f22a:	6977      	ldr	r7, [r6, #20]
    f22c:	4567      	cmp	r7, ip
    f22e:	d1f2      	bne.n	f216 <_lwevent_wait_for+0x32>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1163
        _int_enable();
        return (MQX_LWEVENT_INVALID);
    } /* Endif */
#endif

    if (    (all &&  (event_ptr->VALUE & bit_mask) == bit_mask)
    f230:	2a00      	cmp	r2, #0
    f232:	d112      	bne.n	f25a <_lwevent_wait_for+0x76>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1164
         || (!all && (event_ptr->VALUE & bit_mask)))
    f234:	69b2      	ldr	r2, [r6, #24]
    f236:	1c17      	adds	r7, r2, #0
    f238:	400f      	ands	r7, r1
    f23a:	46bc      	mov	ip, r7
    f23c:	d040      	beq.n	f2c0 <_lwevent_wait_for+0xdc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1169
    {
        /* store information about which bits caused task to be unblocked */
        td_ptr->LWEVENT_BITS = event_ptr->VALUE & bit_mask;
        /* clear used automatic events */
        event_ptr->VALUE &= ~(event_ptr->AUTO & bit_mask);
    f23e:	6a37      	ldr	r7, [r6, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1167

    if (    (all &&  (event_ptr->VALUE & bit_mask) == bit_mask)
         || (!all && (event_ptr->VALUE & bit_mask)))
    {
        /* store information about which bits caused task to be unblocked */
        td_ptr->LWEVENT_BITS = event_ptr->VALUE & bit_mask;
    f240:	4663      	mov	r3, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1169
        /* clear used automatic events */
        event_ptr->VALUE &= ~(event_ptr->AUTO & bit_mask);
    f242:	4039      	ands	r1, r7
    f244:	438a      	bics	r2, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1171

        _INT_ENABLE();
    f246:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1167

    if (    (all &&  (event_ptr->VALUE & bit_mask) == bit_mask)
         || (!all && (event_ptr->VALUE & bit_mask)))
    {
        /* store information about which bits caused task to be unblocked */
        td_ptr->LWEVENT_BITS = event_ptr->VALUE & bit_mask;
    f248:	67ab      	str	r3, [r5, #120]	; 0x78
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1169
        /* clear used automatic events */
        event_ptr->VALUE &= ~(event_ptr->AUTO & bit_mask);
    f24a:	61b2      	str	r2, [r6, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1171

        _INT_ENABLE();
    f24c:	2900      	cmp	r1, #0
    f24e:	d002      	beq.n	f256 <_lwevent_wait_for+0x72>
    f250:	6568      	str	r0, [r5, #84]	; 0x54
    f252:	2800      	cmp	r0, #0
    f254:	d032      	beq.n	f2bc <_lwevent_wait_for+0xd8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1172
        return (result);
    f256:	2000      	movs	r0, #0
    f258:	e7ce      	b.n	f1f8 <_lwevent_wait_for+0x14>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1163
        _int_enable();
        return (MQX_LWEVENT_INVALID);
    } /* Endif */
#endif

    if (    (all &&  (event_ptr->VALUE & bit_mask) == bit_mask)
    f25a:	69b2      	ldr	r2, [r6, #24]
    f25c:	1c17      	adds	r7, r2, #0
    f25e:	400f      	ands	r7, r1
    f260:	46bc      	mov	ip, r7
    f262:	42b9      	cmp	r1, r7
    f264:	d0eb      	beq.n	f23e <_lwevent_wait_for+0x5a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1180
    /* Must wait for a event to become available */

    td_ptr->LWEVENT_BITS = bit_mask;
    if (all)
    {
        td_ptr->FLAGS |= TASK_LWEVENT_ALL_BITS_WANTED;
    f266:	6aaf      	ldr	r7, [r5, #40]	; 0x28
    f268:	2280      	movs	r2, #128	; 0x80
    f26a:	433a      	orrs	r2, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1177
        return (result);
    } /* Endif */

    /* Must wait for a event to become available */

    td_ptr->LWEVENT_BITS = bit_mask;
    f26c:	67a9      	str	r1, [r5, #120]	; 0x78
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1180
    if (all)
    {
        td_ptr->FLAGS |= TASK_LWEVENT_ALL_BITS_WANTED;
    f26e:	62aa      	str	r2, [r5, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1188
    {
        td_ptr->FLAGS &= ~TASK_LWEVENT_ALL_BITS_WANTED;
    } /* Endif */

    /* Enqueue at end */
    _QUEUE_ENQUEUE(&event_ptr->WAITING_TASKS, &td_ptr->AUX_QUEUE);
    f270:	68f2      	ldr	r2, [r6, #12]
    f272:	1c28      	adds	r0, r5, #0
    f274:	6811      	ldr	r1, [r2, #0]
    f276:	303c      	adds	r0, #60	; 0x3c
    f278:	63e9      	str	r1, [r5, #60]	; 0x3c
    f27a:	6010      	str	r0, [r2, #0]
    f27c:	642a      	str	r2, [r5, #64]	; 0x40
    f27e:	6048      	str	r0, [r1, #4]
    f280:	8a32      	ldrh	r2, [r6, #16]
    f282:	3201      	adds	r2, #1
    f284:	8232      	strh	r2, [r6, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1191

    /* Now put the task to sleep */
    td_ptr->STATE = LWEVENT_BLOCKED;
    f286:	4a15      	ldr	r2, [pc, #84]	; (f2dc <_lwevent_wait_for+0xf8>)
    f288:	60aa      	str	r2, [r5, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1192
    td_ptr->INFO = (_mqx_uint) &event_ptr->WAITING_TASKS;
    f28a:	1c32      	adds	r2, r6, #0
    f28c:	3208      	adds	r2, #8
    f28e:	63aa      	str	r2, [r5, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1193
    if (tick_ptr)
    f290:	2b00      	cmp	r3, #0
    f292:	d01b      	beq.n	f2cc <_lwevent_wait_for+0xe8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1201
        {
            _time_delay_until(tick_ptr);
        }
        else
        {
            _time_delay_for(tick_ptr);
    f294:	1c18      	adds	r0, r3, #0
    f296:	f000 fddf 	bl	fe58 <_time_delay_for>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1203
        } /* Endif */
        if (td_ptr->INFO)
    f29a:	6bab      	ldr	r3, [r5, #56]	; 0x38
    f29c:	2b00      	cmp	r3, #0
    f29e:	d017      	beq.n	f2d0 <_lwevent_wait_for+0xec>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1207
        {
            /* Must have timed out */
            /*_QUEUE_REMOVE(&event_ptr->WAITING_TASKS, &td_ptr->AUX_QUEUE);*/
            result = LWEVENT_WAIT_TIMEOUT;
    f2a0:	20c4      	movs	r0, #196	; 0xc4
    f2a2:	0080      	lsls	r0, r0, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1216
    {
        _task_block();
    } /* Endif */

#if MQX_COMPONENT_DESTRUCTION
    if (event_ptr->VALID == 0)
    f2a4:	6973      	ldr	r3, [r6, #20]
    f2a6:	2b00      	cmp	r3, #0
    f2a8:	d100      	bne.n	f2ac <_lwevent_wait_for+0xc8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1218
    { /* We've been deleted */
        result = MQX_LWEVENT_INVALID;
    f2aa:	2039      	movs	r0, #57	; 0x39
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1222
    } /* Endif */
#endif

    _INT_ENABLE();
    f2ac:	69e3      	ldr	r3, [r4, #28]
    f2ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    f2b0:	2a00      	cmp	r2, #0
    f2b2:	d0a1      	beq.n	f1f8 <_lwevent_wait_for+0x14>
    f2b4:	3a01      	subs	r2, #1
    f2b6:	655a      	str	r2, [r3, #84]	; 0x54
    f2b8:	2a00      	cmp	r2, #0
    f2ba:	d19d      	bne.n	f1f8 <_lwevent_wait_for+0x14>
    f2bc:	b662      	cpsie	i
    f2be:	e79b      	b.n	f1f8 <_lwevent_wait_for+0x14>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1177
        return (result);
    } /* Endif */

    /* Must wait for a event to become available */

    td_ptr->LWEVENT_BITS = bit_mask;
    f2c0:	67a9      	str	r1, [r5, #120]	; 0x78
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1184
    {
        td_ptr->FLAGS |= TASK_LWEVENT_ALL_BITS_WANTED;
    }
    else
    {
        td_ptr->FLAGS &= ~TASK_LWEVENT_ALL_BITS_WANTED;
    f2c2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    f2c4:	2280      	movs	r2, #128	; 0x80
    f2c6:	4391      	bics	r1, r2
    f2c8:	62a9      	str	r1, [r5, #40]	; 0x28
    f2ca:	e7d1      	b.n	f270 <_lwevent_wait_for+0x8c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1212
            result = LWEVENT_WAIT_TIMEOUT;
        } /* Endif */
    }
    else
    {
        _task_block();
    f2cc:	f004 fbb5 	bl	13a3a <_task_block>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1151
    {
        return (MQX_CANNOT_CALL_FUNCTION_FROM_ISR);
    } /* Endif */
#endif

    result = MQX_OK;
    f2d0:	2000      	movs	r0, #0
    f2d2:	e7e7      	b.n	f2a4 <_lwevent_wait_for+0xc0>
    f2d4:	1fffe000 	.word	0x1fffe000
    f2d8:	6c65766e 	.word	0x6c65766e
    f2dc:	0000042d 	.word	0x0000042d

0000f2e0 <_lwsem_create>:
_lwsem_create():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:173
_mqx_uint _lwsem_create
(
    LWSEM_STRUCT_PTR sem_ptr,
    _mqx_int         initial_number
)
{
    f2e0:	b538      	push	{r3, r4, r5, lr}
_lwsem_create_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:78
    {
        return MQX_INVALID_LWSEM;
    }
#endif /* MQX_ENABLE_USER_MODE */

    _GET_KERNEL_DATA(kernel_data);
    f2e2:	4b16      	ldr	r3, [pc, #88]	; (f33c <_lwsem_create+0x5c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:82

    _KLOGE2(KLOG_lwsem_create, initial_number);

    sem_ptr->VALUE = initial_number;
    f2e4:	6181      	str	r1, [r0, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:78
    {
        return MQX_INVALID_LWSEM;
    }
#endif /* MQX_ENABLE_USER_MODE */

    _GET_KERNEL_DATA(kernel_data);
    f2e6:	681d      	ldr	r5, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:83

    _KLOGE2(KLOG_lwsem_create, initial_number);

    sem_ptr->VALUE = initial_number;
    _QUEUE_INIT(&sem_ptr->TD_QUEUE, 0);
    f2e8:	1c03      	adds	r3, r0, #0
    f2ea:	3308      	adds	r3, #8
    f2ec:	6083      	str	r3, [r0, #8]
    f2ee:	60c3      	str	r3, [r0, #12]
    f2f0:	2300      	movs	r3, #0
    f2f2:	8203      	strh	r3, [r0, #16]
    f2f4:	8243      	strh	r3, [r0, #18]
_lwsem_create():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:173
_mqx_uint _lwsem_create
(
    LWSEM_STRUCT_PTR sem_ptr,
    _mqx_int         initial_number
)
{
    f2f6:	1c04      	adds	r4, r0, #0
_lwsem_create_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:84

    _KLOGE2(KLOG_lwsem_create, initial_number);

    sem_ptr->VALUE = initial_number;
    _QUEUE_INIT(&sem_ptr->TD_QUEUE, 0);
    _int_disable();
    f2f8:	f7ff fe0c 	bl	ef14 <_int_disable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:109
            }
        }
        else
#endif /* MQX_ENABLE_USER_MODE */
        {
            sem_chk_ptr = (LWSEM_STRUCT_PTR) ((pointer) kernel_data->LWSEM.NEXT);
    f2fc:	23f4      	movs	r3, #244	; 0xf4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:110
            while (sem_chk_ptr != (LWSEM_STRUCT_PTR) ((pointer) &kernel_data->LWSEM))
    f2fe:	1c2a      	adds	r2, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:109
            }
        }
        else
#endif /* MQX_ENABLE_USER_MODE */
        {
            sem_chk_ptr = (LWSEM_STRUCT_PTR) ((pointer) kernel_data->LWSEM.NEXT);
    f300:	58eb      	ldr	r3, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:110
            while (sem_chk_ptr != (LWSEM_STRUCT_PTR) ((pointer) &kernel_data->LWSEM))
    f302:	32f4      	adds	r2, #244	; 0xf4
    f304:	4293      	cmp	r3, r2
    f306:	d103      	bne.n	f310 <_lwsem_create+0x30>
    f308:	e009      	b.n	f31e <_lwsem_create+0x3e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:119
                    _int_enable();
                    _KLOGX2(KLOG_lwsem_create, MQX_EINVAL);
                    return (MQX_EINVAL);
                }

                sem_chk_ptr = (LWSEM_STRUCT_PTR) ((pointer) sem_chk_ptr->NEXT);
    f30a:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:110
        }
        else
#endif /* MQX_ENABLE_USER_MODE */
        {
            sem_chk_ptr = (LWSEM_STRUCT_PTR) ((pointer) kernel_data->LWSEM.NEXT);
            while (sem_chk_ptr != (LWSEM_STRUCT_PTR) ((pointer) &kernel_data->LWSEM))
    f30c:	4293      	cmp	r3, r2
    f30e:	d006      	beq.n	f31e <_lwsem_create+0x3e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:112
            {
                if (sem_chk_ptr == sem_ptr)
    f310:	429c      	cmp	r4, r3
    f312:	d1fa      	bne.n	f30a <_lwsem_create+0x2a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:114
                {
                    _int_enable();
    f314:	f7ff fe0a 	bl	ef2c <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:116
                    _KLOGX2(KLOG_lwsem_create, MQX_EINVAL);
                    return (MQX_EINVAL);
    f318:	2082      	movs	r0, #130	; 0x82
    f31a:	00c0      	lsls	r0, r0, #3
    f31c:	e00d      	b.n	f33a <_lwsem_create+0x5a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:132
            _QUEUE_ENQUEUE(&kernel_data->USR_LWSEM, sem_ptr);
        }
        else
#endif /* MQX_ENABLE_USER_MODE */
        {
            _QUEUE_ENQUEUE(&kernel_data->LWSEM, sem_ptr);
    f31e:	6853      	ldr	r3, [r2, #4]
    f320:	6819      	ldr	r1, [r3, #0]
    f322:	6021      	str	r1, [r4, #0]
    f324:	601c      	str	r4, [r3, #0]
    f326:	6063      	str	r3, [r4, #4]
    f328:	604c      	str	r4, [r1, #4]
    f32a:	8913      	ldrh	r3, [r2, #8]
    f32c:	3301      	adds	r3, #1
    f32e:	8113      	strh	r3, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:136
        }
    }

    sem_ptr->VALID = LWSEM_VALID;
    f330:	4b03      	ldr	r3, [pc, #12]	; (f340 <_lwsem_create+0x60>)
    f332:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:137
    _int_enable();
    f334:	f7ff fdfa 	bl	ef2c <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:141

    _KLOGX2(KLOG_lwsem_create, MQX_OK);

    return (MQX_OK);
    f338:	2000      	movs	r0, #0
_lwsem_create():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:182
        return _usr_lwsem_create(sem_ptr, initial_number);
    }
#endif

    return _lwsem_create_internal(sem_ptr, initial_number, FALSE, FALSE);
}
    f33a:	bd38      	pop	{r3, r4, r5, pc}
    f33c:	1fffe000 	.word	0x1fffe000
    f340:	6c77736d 	.word	0x6c77736d

0000f344 <_lwsem_post>:
_lwsem_post():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:535
    {
        return _usr_lwsem_post(sem_ptr);
    }
#endif

    _GET_KERNEL_DATA(kernel_data);
    f344:	4a29      	ldr	r2, [pc, #164]	; (f3ec <_lwsem_post+0xa8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:524
 */
_mqx_uint _lwsem_post
(
    LWSEM_STRUCT_PTR sem_ptr
)
{ /* Body */
    f346:	b538      	push	{r3, r4, r5, lr}
    f348:	1c03      	adds	r3, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:535
    {
        return _usr_lwsem_post(sem_ptr);
    }
#endif

    _GET_KERNEL_DATA(kernel_data);
    f34a:	6814      	ldr	r4, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:540

    _KLOGE2(KLOG_lwsem_post, sem_ptr);

#if MQX_CHECK_VALIDITY
    if (sem_ptr->VALID != LWSEM_VALID)
    f34c:	6959      	ldr	r1, [r3, #20]
    f34e:	4a28      	ldr	r2, [pc, #160]	; (f3f0 <_lwsem_post+0xac>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:543
    {
        _KLOGX2(KLOG_lwsem_post, MQX_INVALID_LWSEM);
        return (MQX_INVALID_LWSEM);
    f350:	201f      	movs	r0, #31
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:540
    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_lwsem_post, sem_ptr);

#if MQX_CHECK_VALIDITY
    if (sem_ptr->VALID != LWSEM_VALID)
    f352:	4291      	cmp	r1, r2
    f354:	d000      	beq.n	f358 <_lwsem_post+0x14>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:567

    _KLOGX2(KLOG_lwsem_post, MQX_OK);

    return (MQX_OK);

}
    f356:	bd38      	pop	{r3, r4, r5, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:547
        _KLOGX2(KLOG_lwsem_post, MQX_INVALID_LWSEM);
        return (MQX_INVALID_LWSEM);
    } /* Endif */
#endif /* MQX_CHECK_VALIDITY */

    _INT_DISABLE();
    f358:	69e2      	ldr	r2, [r4, #28]
    f35a:	6d50      	ldr	r0, [r2, #84]	; 0x54
    f35c:	2800      	cmp	r0, #0
    f35e:	d100      	bne.n	f362 <_lwsem_post+0x1e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:547 (discriminator 1)
    f360:	b672      	cpsid	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:548 (discriminator 2)
    if ((sem_ptr->VALUE >= 0) && (_QUEUE_GET_SIZE(&sem_ptr->TD_QUEUE)))
    f362:	6999      	ldr	r1, [r3, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:547 (discriminator 2)
        _KLOGX2(KLOG_lwsem_post, MQX_INVALID_LWSEM);
        return (MQX_INVALID_LWSEM);
    } /* Endif */
#endif /* MQX_CHECK_VALIDITY */

    _INT_DISABLE();
    f364:	3001      	adds	r0, #1
    f366:	6550      	str	r0, [r2, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:548 (discriminator 2)
    if ((sem_ptr->VALUE >= 0) && (_QUEUE_GET_SIZE(&sem_ptr->TD_QUEUE)))
    f368:	2900      	cmp	r1, #0
    f36a:	db37      	blt.n	f3dc <_lwsem_post+0x98>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:548 (discriminator 1)
    f36c:	8a1d      	ldrh	r5, [r3, #16]
    f36e:	2d00      	cmp	r5, #0
    f370:	d034      	beq.n	f3dc <_lwsem_post+0x98>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:550
    {
        _QUEUE_DEQUEUE(&sem_ptr->TD_QUEUE, td_ptr);
    f372:	689a      	ldr	r2, [r3, #8]
    f374:	3d01      	subs	r5, #1
    f376:	6850      	ldr	r0, [r2, #4]
    f378:	6811      	ldr	r1, [r2, #0]
    f37a:	6001      	str	r1, [r0, #0]
    f37c:	6048      	str	r0, [r1, #4]
    f37e:	821d      	strh	r5, [r3, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:551
        _BACKUP_POINTER(td_ptr, TD_STRUCT, AUX_QUEUE);
    f380:	1c13      	adds	r3, r2, #0
    f382:	3b3c      	subs	r3, #60	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:552
        _TIME_DEQUEUE(td_ptr, kernel_data);
    f384:	689a      	ldr	r2, [r3, #8]
    f386:	05d0      	lsls	r0, r2, #23
    f388:	d50e      	bpl.n	f3a8 <_lwsem_post+0x64>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:552 (discriminator 1)
    f38a:	6858      	ldr	r0, [r3, #4]
    f38c:	6819      	ldr	r1, [r3, #0]
    f38e:	6001      	str	r1, [r0, #0]
    f390:	6048      	str	r0, [r1, #4]
    f392:	209a      	movs	r0, #154	; 0x9a
    f394:	0040      	lsls	r0, r0, #1
    f396:	1821      	adds	r1, r4, r0
    f398:	8908      	ldrh	r0, [r1, #8]
    f39a:	3801      	subs	r0, #1
    f39c:	8108      	strh	r0, [r1, #8]
    f39e:	4915      	ldr	r1, [pc, #84]	; (f3f4 <_lwsem_post+0xb0>)
    f3a0:	400a      	ands	r2, r1
    f3a2:	2103      	movs	r1, #3
    f3a4:	430a      	orrs	r2, r1
    f3a6:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:553
        td_ptr->INFO = 0; /* Signal that post is activating the task */
    f3a8:	2200      	movs	r2, #0
    f3aa:	639a      	str	r2, [r3, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:554
        _TASK_READY(td_ptr, kernel_data);
    f3ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
    f3ae:	69da      	ldr	r2, [r3, #28]
    f3b0:	428a      	cmp	r2, r1
    f3b2:	d818      	bhi.n	f3e6 <_lwsem_post+0xa2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:554 (discriminator 2)
    f3b4:	2102      	movs	r1, #2
    f3b6:	6099      	str	r1, [r3, #8]
    f3b8:	6851      	ldr	r1, [r2, #4]
    f3ba:	6808      	ldr	r0, [r1, #0]
    f3bc:	6059      	str	r1, [r3, #4]
    f3be:	6018      	str	r0, [r3, #0]
    f3c0:	600b      	str	r3, [r1, #0]
    f3c2:	6053      	str	r3, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:555 (discriminator 2)
        _CHECK_RUN_SCHEDULER(); /* Let higher priority task run */
    f3c4:	f004 fac8 	bl	13958 <_sched_check_scheduler_internal>
    f3c8:	69e2      	ldr	r2, [r4, #28]
    f3ca:	6d50      	ldr	r0, [r2, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:561
    }
    else
    {
        ++sem_ptr->VALUE;
    } /* Endif */
    _INT_ENABLE();
    f3cc:	2800      	cmp	r0, #0
    f3ce:	d008      	beq.n	f3e2 <_lwsem_post+0x9e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:561 (discriminator 1)
    f3d0:	3801      	subs	r0, #1
    f3d2:	6550      	str	r0, [r2, #84]	; 0x54
    f3d4:	2800      	cmp	r0, #0
    f3d6:	d104      	bne.n	f3e2 <_lwsem_post+0x9e>
    f3d8:	b662      	cpsie	i
    f3da:	e7bc      	b.n	f356 <_lwsem_post+0x12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:559
        _TASK_READY(td_ptr, kernel_data);
        _CHECK_RUN_SCHEDULER(); /* Let higher priority task run */
    }
    else
    {
        ++sem_ptr->VALUE;
    f3dc:	3101      	adds	r1, #1
    f3de:	6199      	str	r1, [r3, #24]
    f3e0:	e7f4      	b.n	f3cc <_lwsem_post+0x88>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:565
    } /* Endif */
    _INT_ENABLE();

    _KLOGX2(KLOG_lwsem_post, MQX_OK);

    return (MQX_OK);
    f3e2:	2000      	movs	r0, #0
    f3e4:	e7b7      	b.n	f356 <_lwsem_post+0x12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:554 (discriminator 1)
    {
        _QUEUE_DEQUEUE(&sem_ptr->TD_QUEUE, td_ptr);
        _BACKUP_POINTER(td_ptr, TD_STRUCT, AUX_QUEUE);
        _TIME_DEQUEUE(td_ptr, kernel_data);
        td_ptr->INFO = 0; /* Signal that post is activating the task */
        _TASK_READY(td_ptr, kernel_data);
    f3e6:	6262      	str	r2, [r4, #36]	; 0x24
    f3e8:	e7e4      	b.n	f3b4 <_lwsem_post+0x70>
    f3ea:	46c0      	nop			; (mov r8, r8)
    f3ec:	1fffe000 	.word	0x1fffe000
    f3f0:	6c77736d 	.word	0x6c77736d
    f3f4:	fffffeff 	.word	0xfffffeff

0000f3f8 <_lwsem_wait>:
_lwsem_wait():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:765
 */
_mqx_uint _lwsem_wait
(
    LWSEM_STRUCT_PTR sem_ptr
)
{ /* Body */
    f3f8:	b538      	push	{r3, r4, r5, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:776
    {
        return _usr_lwsem_wait(sem_ptr);
    }
#endif

    _GET_KERNEL_DATA(kernel_data);
    f3fa:	4b22      	ldr	r3, [pc, #136]	; (f484 <_lwsem_wait+0x8c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:765
 */
_mqx_uint _lwsem_wait
(
    LWSEM_STRUCT_PTR sem_ptr
)
{ /* Body */
    f3fc:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:776
    {
        return _usr_lwsem_wait(sem_ptr);
    }
#endif

    _GET_KERNEL_DATA(kernel_data);
    f3fe:	681c      	ldr	r4, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:784

#if MQX_CHECK_ERRORS
    if (kernel_data->IN_ISR)
    {
        _KLOGX2(KLOG_lwsem_wait, MQX_CANNOT_CALL_FUNCTION_FROM_ISR);
        return (MQX_CANNOT_CALL_FUNCTION_FROM_ISR);
    f400:	200d      	movs	r0, #13
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:781
    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_lwsem_wait, sem_ptr);

#if MQX_CHECK_ERRORS
    if (kernel_data->IN_ISR)
    f402:	8b22      	ldrh	r2, [r4, #24]
    f404:	2a00      	cmp	r2, #0
    f406:	d000      	beq.n	f40a <_lwsem_wait+0x12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:828
    _INT_ENABLE();

    _KLOGX2(KLOG_lwsem_wait, MQX_OK);

    return (MQX_OK);
}
    f408:	bd38      	pop	{r3, r4, r5, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:789
        return (MQX_CANNOT_CALL_FUNCTION_FROM_ISR);
    }
#endif

#if MQX_CHECK_VALIDITY
    if (sem_ptr->VALID != LWSEM_VALID)
    f40a:	4a1f      	ldr	r2, [pc, #124]	; (f488 <_lwsem_wait+0x90>)
    f40c:	696b      	ldr	r3, [r5, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:792
    {
        _KLOGX2(KLOG_lwsem_wait, MQX_INVALID_LWSEM);
        return (MQX_INVALID_LWSEM);
    f40e:	201f      	movs	r0, #31
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:789
        return (MQX_CANNOT_CALL_FUNCTION_FROM_ISR);
    }
#endif

#if MQX_CHECK_VALIDITY
    if (sem_ptr->VALID != LWSEM_VALID)
    f410:	4293      	cmp	r3, r2
    f412:	d1f9      	bne.n	f408 <_lwsem_wait+0x10>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:796
        _KLOGX2(KLOG_lwsem_wait, MQX_INVALID_LWSEM);
        return (MQX_INVALID_LWSEM);
    }
#endif

    _INT_DISABLE();
    f414:	69e2      	ldr	r2, [r4, #28]
    f416:	6d53      	ldr	r3, [r2, #84]	; 0x54
    f418:	2b00      	cmp	r3, #0
    f41a:	d100      	bne.n	f41e <_lwsem_wait+0x26>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:796 (discriminator 1)
    f41c:	b672      	cpsid	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:796 (discriminator 2)
    f41e:	3301      	adds	r3, #1
    f420:	6553      	str	r3, [r2, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:797 (discriminator 2)
    if (sem_ptr->VALUE <= 0)
    f422:	69ab      	ldr	r3, [r5, #24]
    f424:	2b00      	cmp	r3, #0
    f426:	dd0a      	ble.n	f43e <_lwsem_wait+0x46>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:811
         ** task.
         */
    }
    else
    {
        --sem_ptr->VALUE;
    f428:	3b01      	subs	r3, #1
    f42a:	61ab      	str	r3, [r5, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:823
        /* The semaphore has been deleted */
        _KLOGX2(KLOG_lwsem_wait, MQX_INVALID_LWSEM);
        return (MQX_INVALID_LWSEM);
    } /* Endif */

    _INT_ENABLE();
    f42c:	6d53      	ldr	r3, [r2, #84]	; 0x54
    f42e:	2b00      	cmp	r3, #0
    f430:	d023      	beq.n	f47a <_lwsem_wait+0x82>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:823 (discriminator 1)
    f432:	1e58      	subs	r0, r3, #1
    f434:	6550      	str	r0, [r2, #84]	; 0x54
    f436:	2800      	cmp	r0, #0
    f438:	d11f      	bne.n	f47a <_lwsem_wait+0x82>
    f43a:	b662      	cpsie	i
    f43c:	e7e4      	b.n	f408 <_lwsem_wait+0x10>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:800

    _INT_DISABLE();
    if (sem_ptr->VALUE <= 0)
    {
        td_ptr = kernel_data->ACTIVE_PTR;
        td_ptr->STATE = LWSEM_BLOCKED;
    f43e:	4b13      	ldr	r3, [pc, #76]	; (f48c <_lwsem_wait+0x94>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:802
        td_ptr->INFO = (_mqx_uint) &sem_ptr->TD_QUEUE;
        _QUEUE_UNLINK(td_ptr);
    f440:	6851      	ldr	r1, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:800

    _INT_DISABLE();
    if (sem_ptr->VALUE <= 0)
    {
        td_ptr = kernel_data->ACTIVE_PTR;
        td_ptr->STATE = LWSEM_BLOCKED;
    f442:	6093      	str	r3, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:801
        td_ptr->INFO = (_mqx_uint) &sem_ptr->TD_QUEUE;
    f444:	1c2b      	adds	r3, r5, #0
    f446:	3308      	adds	r3, #8
    f448:	6393      	str	r3, [r2, #56]	; 0x38
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:802
        _QUEUE_UNLINK(td_ptr);
    f44a:	6813      	ldr	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:803
        _QUEUE_ENQUEUE(&sem_ptr->TD_QUEUE, &td_ptr->AUX_QUEUE);
    f44c:	1c10      	adds	r0, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:802
    if (sem_ptr->VALUE <= 0)
    {
        td_ptr = kernel_data->ACTIVE_PTR;
        td_ptr->STATE = LWSEM_BLOCKED;
        td_ptr->INFO = (_mqx_uint) &sem_ptr->TD_QUEUE;
        _QUEUE_UNLINK(td_ptr);
    f44e:	600b      	str	r3, [r1, #0]
    f450:	6059      	str	r1, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:803
        _QUEUE_ENQUEUE(&sem_ptr->TD_QUEUE, &td_ptr->AUX_QUEUE);
    f452:	68eb      	ldr	r3, [r5, #12]
    f454:	303c      	adds	r0, #60	; 0x3c
    f456:	6819      	ldr	r1, [r3, #0]
    f458:	63d1      	str	r1, [r2, #60]	; 0x3c
    f45a:	6018      	str	r0, [r3, #0]
    f45c:	6413      	str	r3, [r2, #64]	; 0x40
    f45e:	6048      	str	r0, [r1, #4]
    f460:	8a2b      	ldrh	r3, [r5, #16]
    f462:	3301      	adds	r3, #1
    f464:	822b      	strh	r3, [r5, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:804
        _sched_execute_scheduler_internal(); /* Let the other tasks run */
    f466:	f004 fa83 	bl	13970 <_sched_execute_scheduler_internal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:815
    {
        --sem_ptr->VALUE;
    }

    /* We must check for component destruction */
    if (sem_ptr->VALID != LWSEM_VALID)
    f46a:	696a      	ldr	r2, [r5, #20]
    f46c:	4b06      	ldr	r3, [pc, #24]	; (f488 <_lwsem_wait+0x90>)
    f46e:	429a      	cmp	r2, r3
    f470:	d005      	beq.n	f47e <_lwsem_wait+0x86>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:817
    {
        _int_enable();
    f472:	f7ff fd5b 	bl	ef2c <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:820
        /* The semaphore has been deleted */
        _KLOGX2(KLOG_lwsem_wait, MQX_INVALID_LWSEM);
        return (MQX_INVALID_LWSEM);
    f476:	201f      	movs	r0, #31
    f478:	e7c6      	b.n	f408 <_lwsem_wait+0x10>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:827

    _INT_ENABLE();

    _KLOGX2(KLOG_lwsem_wait, MQX_OK);

    return (MQX_OK);
    f47a:	2000      	movs	r0, #0
    f47c:	e7c4      	b.n	f408 <_lwsem_wait+0x10>
    f47e:	69e2      	ldr	r2, [r4, #28]
    f480:	e7d4      	b.n	f42c <_lwsem_wait+0x34>
    f482:	46c0      	nop			; (mov r8, r8)
    f484:	1fffe000 	.word	0x1fffe000
    f488:	6c77736d 	.word	0x6c77736d
    f48c:	0000042b 	.word	0x0000042b

0000f490 <_mqx_set_cpu_type>:
_mqx_set_cpu_type():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:178
)
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);
    kernel_data->CPU_TYPE = cpu_type;
    f490:	4b01      	ldr	r3, [pc, #4]	; (f498 <_mqx_set_cpu_type+0x8>)
    f492:	681b      	ldr	r3, [r3, #0]
    f494:	8118      	strh	r0, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:180

} /* Endbody */
    f496:	4770      	bx	lr
    f498:	1fffe000 	.word	0x1fffe000

0000f49c <_mqx_init_kernel_data_internal>:
_mqx_init_kernel_data_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:290
    TASK_TEMPLATE_STRUCT_PTR    task_template_ptr;
    TD_STRUCT_PTR               td_ptr;
    _mqx_uint                   priority_levels;
    _mqx_uint                   i;

    _GET_KERNEL_DATA(kernel_data);
    f49c:	4b37      	ldr	r3, [pc, #220]	; (f57c <_mqx_init_kernel_data_internal+0xe0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:282
 */
void _mqx_init_kernel_data_internal
(
    void
)
{ /* Body */
    f49e:	b510      	push	{r4, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:290
    TASK_TEMPLATE_STRUCT_PTR    task_template_ptr;
    TD_STRUCT_PTR               td_ptr;
    _mqx_uint                   priority_levels;
    _mqx_uint                   i;

    _GET_KERNEL_DATA(kernel_data);
    f4a0:	681c      	ldr	r4, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:293

    /* Store the configuration used when the kernel was compiled */
    kernel_data->CONFIG1 = MQX_CNFG1;
    f4a2:	4b37      	ldr	r3, [pc, #220]	; (f580 <_mqx_init_kernel_data_internal+0xe4>)
    f4a4:	8223      	strh	r3, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:294
    kernel_data->CONFIG2 = MQX_CNFG2;
    f4a6:	23e4      	movs	r3, #228	; 0xe4
    f4a8:	005b      	lsls	r3, r3, #1
    f4aa:	8263      	strh	r3, [r4, #18]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:297

    /* Store the addressability of the processor. How many bits in a byte. */
    kernel_data->ADDRESSING_CAPABILITY = PSP_MEMORY_ADDRESSING_CAPABILITY;
    f4ac:	2308      	movs	r3, #8
    f4ae:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:300

    /* Indicate the endianess of the target */
    kernel_data->ENDIANESS = PSP_ENDIAN;
    f4b0:	2301      	movs	r3, #1
    f4b2:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:305

    /* Store PSP memory alignment information */

#if PSP_MEM_STOREBLOCK_ALIGNMENT != 0
    kernel_data->PSP_CFG_MEM_STOREBLOCK_ALIGNMENT = PSP_MEM_STOREBLOCK_ALIGNMENT;
    f4b4:	2302      	movs	r3, #2
    f4b6:	81e3      	strh	r3, [r4, #14]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:308
#endif

    kernel_data->PSP_CFG_MEMORY_ALIGNMENT = PSP_MEMORY_ALIGNMENT;
    f4b8:	230f      	movs	r3, #15
    f4ba:	8163      	strh	r3, [r4, #10]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:309
    kernel_data->PSP_CFG_STACK_ALIGNMENT = PSP_STACK_ALIGNMENT;
    f4bc:	81a3      	strh	r3, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:322
#if MQX_EXIT_ENABLED
    kernel_data->USERS_VBR = (_mqx_max_type)_int_get_vector_table();
#endif

#if MQX_CHECK_ERRORS
    if (kernel_data->INIT.TASK_TEMPLATE_LIST == NULL) {
    f4be:	23be      	movs	r3, #190	; 0xbe
    f4c0:	005b      	lsls	r3, r3, #1
    f4c2:	58e3      	ldr	r3, [r4, r3]
    f4c4:	2b00      	cmp	r3, #0
    f4c6:	d052      	beq.n	f56e <_mqx_init_kernel_data_internal+0xd2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:338
    /* Initialize the kernel counter. */
    kernel_data->COUNTER = 1U;
#endif

    /* Set up the disable and enable priority levels */
    _psp_set_kernel_disable_level();
    f4c8:	f7ff fc54 	bl	ed74 <_psp_set_kernel_disable_level>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:349
     * during initialization, and for storage of memory blocks assigned
     * to the system.
     */
    td_ptr = (TD_STRUCT_PTR) & kernel_data->SYSTEM_TD;
    kernel_data->ACTIVE_PTR = td_ptr;
    kernel_data->ACTIVE_SR = kernel_data->DISABLE_SR;
    f4cc:	8ae2      	ldrh	r2, [r4, #22]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:347
     * task error code can be called.
     * The system task never runs, but it's TD is used for error codes
     * during initialization, and for storage of memory blocks assigned
     * to the system.
     */
    td_ptr = (TD_STRUCT_PTR) & kernel_data->SYSTEM_TD;
    f4ce:	1c23      	adds	r3, r4, #0
    f4d0:	3348      	adds	r3, #72	; 0x48
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:348
    kernel_data->ACTIVE_PTR = td_ptr;
    f4d2:	61e3      	str	r3, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:349
    kernel_data->ACTIVE_SR = kernel_data->DISABLE_SR;
    f4d4:	8362      	strh	r2, [r4, #26]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:350
    td_ptr->TASK_SR = kernel_data->DISABLE_SR;
    f4d6:	849a      	strh	r2, [r3, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:351
    td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, SYSTEM_TASK_NUMBER);
    f4d8:	23ae      	movs	r3, #174	; 0xae
    f4da:	005b      	lsls	r3, r3, #1
    f4dc:	58e3      	ldr	r3, [r4, r3]
    f4de:	4a29      	ldr	r2, [pc, #164]	; (f584 <_mqx_init_kernel_data_internal+0xe8>)
    f4e0:	041b      	lsls	r3, r3, #16
    f4e2:	4313      	orrs	r3, r2
    f4e4:	6563      	str	r3, [r4, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:352
    td_ptr->STATE = BLOCKED;
    f4e6:	2303      	movs	r3, #3
    f4e8:	6523      	str	r3, [r4, #80]	; 0x50
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:355

    /* Initialize the light weight semaphores queue */
    _QUEUE_INIT(&kernel_data->LWSEM, 0);
    f4ea:	1c23      	adds	r3, r4, #0
    f4ec:	33f4      	adds	r3, #244	; 0xf4
    f4ee:	22f4      	movs	r2, #244	; 0xf4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:363
    _QUEUE_INIT(&kernel_data->USR_LWSEM, 0);
#endif

#if MQX_HAS_TICK
    /* Set up the timeout queue */
    _QUEUE_INIT(&kernel_data->TIMEOUT_QUEUE, 0);
    f4f0:	219a      	movs	r1, #154	; 0x9a
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:355
    td_ptr->TASK_SR = kernel_data->DISABLE_SR;
    td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, SYSTEM_TASK_NUMBER);
    td_ptr->STATE = BLOCKED;

    /* Initialize the light weight semaphores queue */
    _QUEUE_INIT(&kernel_data->LWSEM, 0);
    f4f2:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:363
    _QUEUE_INIT(&kernel_data->USR_LWSEM, 0);
#endif

#if MQX_HAS_TICK
    /* Set up the timeout queue */
    _QUEUE_INIT(&kernel_data->TIMEOUT_QUEUE, 0);
    f4f4:	0049      	lsls	r1, r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:355
    td_ptr->TASK_SR = kernel_data->DISABLE_SR;
    td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, SYSTEM_TASK_NUMBER);
    td_ptr->STATE = BLOCKED;

    /* Initialize the light weight semaphores queue */
    _QUEUE_INIT(&kernel_data->LWSEM, 0);
    f4f6:	2200      	movs	r2, #0
    f4f8:	605b      	str	r3, [r3, #4]
    f4fa:	811a      	strh	r2, [r3, #8]
    f4fc:	815a      	strh	r2, [r3, #10]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:363
    _QUEUE_INIT(&kernel_data->USR_LWSEM, 0);
#endif

#if MQX_HAS_TICK
    /* Set up the timeout queue */
    _QUEUE_INIT(&kernel_data->TIMEOUT_QUEUE, 0);
    f4fe:	1863      	adds	r3, r4, r1
    f500:	5063      	str	r3, [r4, r1]
    f502:	605b      	str	r3, [r3, #4]
    f504:	811a      	strh	r2, [r3, #8]
    f506:	815a      	strh	r2, [r3, #10]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:372
     * Compute the number of MQX priority levels needed. This is done
     * by determining the task that has the lowest priority (highest number)
     */
    priority_levels = 0;

    task_template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;
    f508:	23be      	movs	r3, #190	; 0xbe
    f50a:	005b      	lsls	r3, r3, #1
    f50c:	58e3      	ldr	r3, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:374

    for (i = 0; task_template_ptr->TASK_TEMPLATE_INDEX && (i < MQX_MAXIMUM_NUMBER_OF_TASK_TEMPLATES); ++i, ++task_template_ptr) {
    f50e:	6818      	ldr	r0, [r3, #0]
    f510:	2800      	cmp	r0, #0
    f512:	d030      	beq.n	f576 <_mqx_init_kernel_data_internal+0xda>
    f514:	4a1c      	ldr	r2, [pc, #112]	; (f588 <_mqx_init_kernel_data_internal+0xec>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:370

    /*
     * Compute the number of MQX priority levels needed. This is done
     * by determining the task that has the lowest priority (highest number)
     */
    priority_levels = 0;
    f516:	2100      	movs	r1, #0
    f518:	1898      	adds	r0, r3, r2
    f51a:	e001      	b.n	f520 <_mqx_init_kernel_data_internal+0x84>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:374 (discriminator 2)

    task_template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;

    for (i = 0; task_template_ptr->TASK_TEMPLATE_INDEX && (i < MQX_MAXIMUM_NUMBER_OF_TASK_TEMPLATES); ++i, ++task_template_ptr) {
    f51c:	4283      	cmp	r3, r0
    f51e:	d007      	beq.n	f530 <_mqx_init_kernel_data_internal+0x94>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:375
        if (priority_levels < task_template_ptr->TASK_PRIORITY) {
    f520:	68da      	ldr	r2, [r3, #12]
    f522:	4291      	cmp	r1, r2
    f524:	d200      	bcs.n	f528 <_mqx_init_kernel_data_internal+0x8c>
    f526:	1c11      	adds	r1, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:374
     */
    priority_levels = 0;

    task_template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;

    for (i = 0; task_template_ptr->TASK_TEMPLATE_INDEX && (i < MQX_MAXIMUM_NUMBER_OF_TASK_TEMPLATES); ++i, ++task_template_ptr) {
    f528:	331c      	adds	r3, #28
    f52a:	681a      	ldr	r2, [r3, #0]
    f52c:	2a00      	cmp	r2, #0
    f52e:	d1f5      	bne.n	f51c <_mqx_init_kernel_data_internal+0x80>
    f530:	1c48      	adds	r0, r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:379
        if (priority_levels < task_template_ptr->TASK_PRIORITY) {
            priority_levels = task_template_ptr->TASK_PRIORITY;
        } /* Endif */
    } /* Endfor */
    kernel_data->LOWEST_TASK_PRIORITY = priority_levels;
    f532:	23d0      	movs	r3, #208	; 0xd0
    f534:	50e1      	str	r1, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:387
    /*
     * Initialize the task template for the IDLE Task.
     * NOTE that the idle task runs at 1 level lower than any user task.
     */
    task_template_ptr = (TASK_TEMPLATE_STRUCT_PTR)&kernel_data->IDLE_TASK_TEMPLATE;
    task_template_ptr->TASK_TEMPLATE_INDEX  = IDLE_TASK;
    f536:	4a15      	ldr	r2, [pc, #84]	; (f58c <_mqx_init_kernel_data_internal+0xf0>)
    f538:	2387      	movs	r3, #135	; 0x87
    f53a:	009b      	lsls	r3, r3, #2
    f53c:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:388
    task_template_ptr->TASK_STACKSIZE       = kernel_data->INIT.IDLE_TASK_STACK_SIZE;
    f53e:	22ba      	movs	r2, #186	; 0xba
    f540:	2387      	movs	r3, #135	; 0x87
    f542:	0052      	lsls	r2, r2, #1
    f544:	58a2      	ldr	r2, [r4, r2]
    f546:	009b      	lsls	r3, r3, #2
    f548:	18e3      	adds	r3, r4, r3
    f54a:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:389
    task_template_ptr->TASK_NAME            = "_mqx_idle_task";
    f54c:	4a10      	ldr	r2, [pc, #64]	; (f590 <_mqx_init_kernel_data_internal+0xf4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:391
    task_template_ptr->TASK_ADDRESS         = _mqx_idle_task;
    task_template_ptr->TASK_PRIORITY        = priority_levels + 1;
    f54e:	60d8      	str	r0, [r3, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:389
     * NOTE that the idle task runs at 1 level lower than any user task.
     */
    task_template_ptr = (TASK_TEMPLATE_STRUCT_PTR)&kernel_data->IDLE_TASK_TEMPLATE;
    task_template_ptr->TASK_TEMPLATE_INDEX  = IDLE_TASK;
    task_template_ptr->TASK_STACKSIZE       = kernel_data->INIT.IDLE_TASK_STACK_SIZE;
    task_template_ptr->TASK_NAME            = "_mqx_idle_task";
    f550:	611a      	str	r2, [r3, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:390
    task_template_ptr->TASK_ADDRESS         = _mqx_idle_task;
    f552:	4a10      	ldr	r2, [pc, #64]	; (f594 <_mqx_init_kernel_data_internal+0xf8>)
    f554:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:398

    /*
     * Initialize the linked list of all TDs in the system.
     * Initially zero. Not including system TD
     */
    _QUEUE_INIT(&kernel_data->TD_LIST, 0);
    f556:	3b49      	subs	r3, #73	; 0x49
    f558:	3bff      	subs	r3, #255	; 0xff
    f55a:	22d4      	movs	r2, #212	; 0xd4
    f55c:	50a3      	str	r3, [r4, r2]
    f55e:	2200      	movs	r2, #0
    f560:	811a      	strh	r2, [r3, #8]
    f562:	815a      	strh	r2, [r3, #10]
    f564:	605b      	str	r3, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:401

    /* Set the TD counter */
    kernel_data->TASK_NUMBER = 1;
    f566:	2201      	movs	r2, #1
    f568:	23e0      	movs	r3, #224	; 0xe0
    f56a:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:403

} /* Endbody */
    f56c:	bd10      	pop	{r4, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:323
    kernel_data->USERS_VBR = (_mqx_max_type)_int_get_vector_table();
#endif

#if MQX_CHECK_ERRORS
    if (kernel_data->INIT.TASK_TEMPLATE_LIST == NULL) {
        _mqx_exit(MQX_INVALID_POINTER);
    f56e:	2001      	movs	r0, #1
    f570:	f000 f8be 	bl	f6f0 <_mqx_exit>
    f574:	e7a8      	b.n	f4c8 <_mqx_init_kernel_data_internal+0x2c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:374
     */
    priority_levels = 0;

    task_template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;

    for (i = 0; task_template_ptr->TASK_TEMPLATE_INDEX && (i < MQX_MAXIMUM_NUMBER_OF_TASK_TEMPLATES); ++i, ++task_template_ptr) {
    f576:	2001      	movs	r0, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:370

    /*
     * Compute the number of MQX priority levels needed. This is done
     * by determining the task that has the lowest priority (highest number)
     */
    priority_levels = 0;
    f578:	2100      	movs	r1, #0
    f57a:	e7da      	b.n	f532 <_mqx_init_kernel_data_internal+0x96>
    f57c:	1fffe000 	.word	0x1fffe000
    f580:	000029fa 	.word	0x000029fa
    f584:	0000ffff 	.word	0x0000ffff
    f588:	001bffe4 	.word	0x001bffe4
    f58c:	80000003 	.word	0x80000003
    f590:	000132e4 	.word	0x000132e4
    f594:	0000eeb9 	.word	0x0000eeb9

0000f598 <_mqxlite_init>:
_mqxlite_init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:106
 */
_mqx_uint _mqxlite_init
(
    MQXLITE_INITIALIZATION_STRUCT const * mqx_init
)
{ /* Body */
    f598:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:119
     * specified is aligned
     */
    kernel_data = (KERNEL_DATA_STRUCT_PTR) (mqx_init->START_OF_KERNEL_MEMORY);

    /* Set the global pointer to the kernel data structure */
    _SET_KERNEL_DATA(kernel_data);
    f59a:	4b29      	ldr	r3, [pc, #164]	; (f640 <_mqxlite_init+0xa8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:116
    /*
     * The kernel data structure starts at the start of kernel memory,
     * as specified in the initialization structure. Make sure address
     * specified is aligned
     */
    kernel_data = (KERNEL_DATA_STRUCT_PTR) (mqx_init->START_OF_KERNEL_MEMORY);
    f59c:	6844      	ldr	r4, [r0, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:106
 */
_mqx_uint _mqxlite_init
(
    MQXLITE_INITIALIZATION_STRUCT const * mqx_init
)
{ /* Body */
    f59e:	b082      	sub	sp, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:119
     * specified is aligned
     */
    kernel_data = (KERNEL_DATA_STRUCT_PTR) (mqx_init->START_OF_KERNEL_MEMORY);

    /* Set the global pointer to the kernel data structure */
    _SET_KERNEL_DATA(kernel_data);
    f5a0:	601c      	str	r4, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:130
     * Note that counter will be immediately reset to zero on the subsequent
     * _mem_zero call. */
    {
        MQX_INITIALIZATION_STRUCT  * MQX_init_struct_ptr;

        *(volatile pointer*) kernel_data = (pointer) & _mqx_version_number;
    f5a2:	4b28      	ldr	r3, [pc, #160]	; (f644 <_mqxlite_init+0xac>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:137
        *(volatile pointer*) kernel_data = (pointer) & _mqx_path;
        *(volatile pointer*) kernel_data = (pointer) & _mqxlite_version_number;
        *(volatile pointer*) kernel_data = (pointer) & MQX_init_struct_ptr;
    }
    /* Initialize the kernel data to zero. */
    _mem_zero((pointer) kernel_data, (_mem_size) sizeof(KERNEL_DATA_STRUCT));
    f5a4:	2195      	movs	r1, #149	; 0x95
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:130
     * Note that counter will be immediately reset to zero on the subsequent
     * _mem_zero call. */
    {
        MQX_INITIALIZATION_STRUCT  * MQX_init_struct_ptr;

        *(volatile pointer*) kernel_data = (pointer) & _mqx_version_number;
    f5a6:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:131
        *(volatile pointer*) kernel_data = (pointer) & _mqx_vendor;
    f5a8:	4b27      	ldr	r3, [pc, #156]	; (f648 <_mqxlite_init+0xb0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:106
 */
_mqx_uint _mqxlite_init
(
    MQXLITE_INITIALIZATION_STRUCT const * mqx_init
)
{ /* Body */
    f5aa:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:131
     * _mem_zero call. */
    {
        MQX_INITIALIZATION_STRUCT  * MQX_init_struct_ptr;

        *(volatile pointer*) kernel_data = (pointer) & _mqx_version_number;
        *(volatile pointer*) kernel_data = (pointer) & _mqx_vendor;
    f5ac:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:132
        *(volatile pointer*) kernel_data = (pointer) & _mqx_path;
    f5ae:	4b27      	ldr	r3, [pc, #156]	; (f64c <_mqxlite_init+0xb4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:137
        *(volatile pointer*) kernel_data = (pointer) & _mqxlite_version_number;
        *(volatile pointer*) kernel_data = (pointer) & MQX_init_struct_ptr;
    }
    /* Initialize the kernel data to zero. */
    _mem_zero((pointer) kernel_data, (_mem_size) sizeof(KERNEL_DATA_STRUCT));
    f5b0:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:132
    {
        MQX_INITIALIZATION_STRUCT  * MQX_init_struct_ptr;

        *(volatile pointer*) kernel_data = (pointer) & _mqx_version_number;
        *(volatile pointer*) kernel_data = (pointer) & _mqx_vendor;
        *(volatile pointer*) kernel_data = (pointer) & _mqx_path;
    f5b2:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:133
        *(volatile pointer*) kernel_data = (pointer) & _mqxlite_version_number;
    f5b4:	4b26      	ldr	r3, [pc, #152]	; (f650 <_mqxlite_init+0xb8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:137
        *(volatile pointer*) kernel_data = (pointer) & MQX_init_struct_ptr;
    }
    /* Initialize the kernel data to zero. */
    _mem_zero((pointer) kernel_data, (_mem_size) sizeof(KERNEL_DATA_STRUCT));
    f5b6:	0089      	lsls	r1, r1, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:133
        MQX_INITIALIZATION_STRUCT  * MQX_init_struct_ptr;

        *(volatile pointer*) kernel_data = (pointer) & _mqx_version_number;
        *(volatile pointer*) kernel_data = (pointer) & _mqx_vendor;
        *(volatile pointer*) kernel_data = (pointer) & _mqx_path;
        *(volatile pointer*) kernel_data = (pointer) & _mqxlite_version_number;
    f5b8:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:134
        *(volatile pointer*) kernel_data = (pointer) & MQX_init_struct_ptr;
    f5ba:	ab01      	add	r3, sp, #4
    f5bc:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:137
    }
    /* Initialize the kernel data to zero. */
    _mem_zero((pointer) kernel_data, (_mem_size) sizeof(KERNEL_DATA_STRUCT));
    f5be:	f7ff fb1b 	bl	ebf8 <_mem_zero>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:159
            return (result); /* RETURN TO USER */
        }
    }
#endif /* MQX_CHECK_ERRORS && MQX_VERIFY_KERNEL_DATA */
    /* Copy the MQX initialization structure into kernel data. */
    kernel_data->INIT = *mqx_init;
    f5c2:	21ae      	movs	r1, #174	; 0xae
    f5c4:	0049      	lsls	r1, r1, #1
    f5c6:	1c28      	adds	r0, r5, #0
    f5c8:	1863      	adds	r3, r4, r1
    f5ca:	c846      	ldmia	r0!, {r1, r2, r6}
    f5cc:	c346      	stmia	r3!, {r1, r2, r6}
    f5ce:	c864      	ldmia	r0!, {r2, r5, r6}
    f5d0:	c364      	stmia	r3!, {r2, r5, r6}
    f5d2:	c826      	ldmia	r0!, {r1, r2, r5}
    f5d4:	c326      	stmia	r3!, {r1, r2, r5}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:162

    /* init kernel data structures */
    _mqx_init_kernel_data_internal();
    f5d6:	f7ff ff61 	bl	f49c <_mqx_init_kernel_data_internal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:176


#if MQX_USE_INTERRUPTS

    /* Now obtain the interrupt stack */
    if (kernel_data->INIT.INTERRUPT_STACK_LOCATION) {
    f5da:	23b8      	movs	r3, #184	; 0xb8
    f5dc:	005b      	lsls	r3, r3, #1
    f5de:	58e6      	ldr	r6, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:182
        stack_ptr = kernel_data->INIT.INTERRUPT_STACK_LOCATION;
        result = kernel_data->INIT.INTERRUPT_STACK_SIZE;
    }
    else
    {
        return (MQX_INVALID_PARAMETER);
    f5e0:	250c      	movs	r5, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:176


#if MQX_USE_INTERRUPTS

    /* Now obtain the interrupt stack */
    if (kernel_data->INIT.INTERRUPT_STACK_LOCATION) {
    f5e2:	2e00      	cmp	r6, #0
    f5e4:	d022      	beq.n	f62c <_mqxlite_init+0x94>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:178
        stack_ptr = kernel_data->INIT.INTERRUPT_STACK_LOCATION;
        result = kernel_data->INIT.INTERRUPT_STACK_SIZE;
    f5e6:	23b6      	movs	r3, #182	; 0xb6
    f5e8:	005b      	lsls	r3, r3, #1
    f5ea:	58e5      	ldr	r5, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:186
    {
        return (MQX_INVALID_PARAMETER);
    } /* Endif */

#if MQX_MONITOR_STACK
    _task_fill_stack_internal((_mqx_uint_ptr)stack_ptr, result);
    f5ec:	1c30      	adds	r0, r6, #0
    f5ee:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:189
#endif

    kernel_data->INTERRUPT_STACK_PTR = _GET_STACK_BASE(stack_ptr, result);
    f5f0:	3d01      	subs	r5, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:186
    {
        return (MQX_INVALID_PARAMETER);
    } /* Endif */

#if MQX_MONITOR_STACK
    _task_fill_stack_internal((_mqx_uint_ptr)stack_ptr, result);
    f5f2:	f000 fc0b 	bl	fe0c <_task_fill_stack_internal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:189
#endif

    kernel_data->INTERRUPT_STACK_PTR = _GET_STACK_BASE(stack_ptr, result);
    f5f6:	1976      	adds	r6, r6, r5
    f5f8:	230f      	movs	r3, #15
    f5fa:	439e      	bics	r6, r3
    f5fc:	63e6      	str	r6, [r4, #60]	; 0x3c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:223
    } /* Endif */
#endif

#if MQX_USE_COMPONENTS
    /* Create a light wait semaphore for component creation */
    _lwsem_create((LWSEM_STRUCT_PTR)&kernel_data->COMPONENT_CREATE_LWSEM, 1);
    f5fe:	26c0      	movs	r6, #192	; 0xc0
    f600:	0076      	lsls	r6, r6, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:214
        _mqx_system_stack   = td_ptr->STACK_PTR;
    }
#endif /* MQX_USE_IDLE_TASK */

    /* Build the MQX ready to run queues */
    result = _psp_init_readyqs();
    f602:	f7ff fbf3 	bl	edec <_psp_init_readyqs>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:223
    } /* Endif */
#endif

#if MQX_USE_COMPONENTS
    /* Create a light wait semaphore for component creation */
    _lwsem_create((LWSEM_STRUCT_PTR)&kernel_data->COMPONENT_CREATE_LWSEM, 1);
    f606:	2101      	movs	r1, #1
    f608:	19a0      	adds	r0, r4, r6
    f60a:	f7ff fe69 	bl	f2e0 <_lwsem_create>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:227
#endif

    /* Create a light wait semaphore for task creation/destruction creation */
    _lwsem_create((LWSEM_STRUCT_PTR) & kernel_data->TASK_CREATE_LWSEM, 1);
    f60e:	1c60      	adds	r0, r4, #1
    f610:	2101      	movs	r1, #1
    f612:	30ff      	adds	r0, #255	; 0xff
    f614:	f7ff fe64 	bl	f2e0 <_lwsem_create>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:230

    /* Set the CPU type */
    _mqx_set_cpu_type(MQX_CPU);
    f618:	2080      	movs	r0, #128	; 0x80
    f61a:	01c0      	lsls	r0, r0, #7
    f61c:	f7ff ff38 	bl	f490 <_mqx_set_cpu_type>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:232

    result = _psp_int_init(FIRST_INTERRUPT_VECTOR_USED, LAST_INTERRUPT_VECTOR_USED);
    f620:	200f      	movs	r0, #15
    f622:	212c      	movs	r1, #44	; 0x2c
    f624:	f7ff fb5e 	bl	ece4 <_psp_int_init>
    f628:	1e05      	subs	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:233
    if (result != MQX_OK) {
    f62a:	d002      	beq.n	f632 <_mqxlite_init+0x9a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:250
     */
    system_timer_init(NULL);

    return MQX_OK; /* To satisfy lint */

} /* Endbody */
    f62c:	1c28      	adds	r0, r5, #0
    f62e:	b002      	add	sp, #8
    f630:	bd70      	pop	{r4, r5, r6, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:241

    /* set possible new interrupt vector table
     * if MQX_ROM_VECTORS = 0 switch to ram interrupt table which
     * was initialized in _psp_int_init)
     */
    _int_set_vector_table((uint32_t)(&__vect_table));
    f632:	4808      	ldr	r0, [pc, #32]	; (f654 <_mqxlite_init+0xbc>)
    f634:	f7ff fad6 	bl	ebe4 <_int_set_vector_table>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:246

    /*
     * Initialize System Timer and Ticks parameters in kernel_data structure
     */
    system_timer_init(NULL);
    f638:	2000      	movs	r0, #0
    f63a:	f001 f919 	bl	10870 <system_timer_init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:248

    return MQX_OK; /* To satisfy lint */
    f63e:	e7f5      	b.n	f62c <_mqxlite_init+0x94>
    f640:	1fffe000 	.word	0x1fffe000
    f644:	00013300 	.word	0x00013300
    f648:	000132f8 	.word	0x000132f8
    f64c:	000132f4 	.word	0x000132f4
    f650:	000132fc 	.word	0x000132fc
    f654:	00000000 	.word	0x00000000

0000f658 <_mqxlite>:
_mqxlite():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:288
        return kernel_data->USERS_ERROR;
    } /* Endif */
#endif


    _GET_KERNEL_DATA(kernel_data);
    f658:	4b23      	ldr	r3, [pc, #140]	; (f6e8 <_mqxlite+0x90>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:269
 *
 * \see _mqxlite_init
 * \see _mqx_exit
 */
_mqx_uint _mqxlite(void)
{ /* Body */
    f65a:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:288
        return kernel_data->USERS_ERROR;
    } /* Endif */
#endif


    _GET_KERNEL_DATA(kernel_data);
    f65c:	681e      	ldr	r6, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:293


    /* Create the idle task */
#if MQX_USE_IDLE_TASK
    td_ptr = _task_init_internal((TASK_TEMPLATE_STRUCT_PTR)&kernel_data->IDLE_TASK_TEMPLATE,
    f65e:	2387      	movs	r3, #135	; 0x87
    f660:	009b      	lsls	r3, r3, #2
    f662:	18f0      	adds	r0, r6, r3
    f664:	69f3      	ldr	r3, [r6, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:269
 *
 * \see _mqxlite_init
 * \see _mqx_exit
 */
_mqx_uint _mqxlite(void)
{ /* Body */
    f666:	b083      	sub	sp, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:293
    _GET_KERNEL_DATA(kernel_data);


    /* Create the idle task */
#if MQX_USE_IDLE_TASK
    td_ptr = _task_init_internal((TASK_TEMPLATE_STRUCT_PTR)&kernel_data->IDLE_TASK_TEMPLATE,
    f668:	68d9      	ldr	r1, [r3, #12]
    f66a:	23bc      	movs	r3, #188	; 0xbc
    f66c:	005b      	lsls	r3, r3, #1
    f66e:	58f3      	ldr	r3, [r6, r3]
    f670:	2200      	movs	r2, #0
    f672:	9300      	str	r3, [sp, #0]
    f674:	2389      	movs	r3, #137	; 0x89
    f676:	009b      	lsls	r3, r3, #2
    f678:	58f3      	ldr	r3, [r6, r3]
    f67a:	9301      	str	r3, [sp, #4]
    f67c:	2300      	movs	r3, #0
    f67e:	f000 f9d3 	bl	fa28 <_task_init_internal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:304
                                #endif
                                 FALSE,
                                 kernel_data->INIT.IDLE_TASK_STACK_LOCATION,
                                 kernel_data->IDLE_TASK_TEMPLATE.TASK_STACKSIZE);
    #if MQX_CHECK_ERRORS
        if (td_ptr == NULL) {
    f682:	2800      	cmp	r0, #0
    f684:	d02c      	beq.n	f6e0 <_mqxlite+0x88>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:308
            _mqx_exit(MQX_OUT_OF_MEMORY);
        } /* Endif */
    #endif
    _task_ready_internal(td_ptr);
    f686:	f000 fbcb 	bl	fe20 <_task_ready_internal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:316
    /* Check here for auto-create tasks, and create them here */
    {
        TASK_TEMPLATE_STRUCT_PTR    template_ptr;
        int                         task_index = 0;

        template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;
    f68a:	23be      	movs	r3, #190	; 0xbe
    f68c:	005b      	lsls	r3, r3, #1
    f68e:	58f4      	ldr	r4, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:318

        while (template_ptr->TASK_TEMPLATE_INDEX) {
    f690:	6823      	ldr	r3, [r4, #0]
    f692:	2b00      	cmp	r3, #0
    f694:	d01c      	beq.n	f6d0 <_mqxlite+0x78>
    f696:	4d15      	ldr	r5, [pc, #84]	; (f6ec <_mqxlite+0x94>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:319
            if (template_ptr->TASK_ATTRIBUTES & MQX_AUTO_START_TASK) {
    f698:	2701      	movs	r7, #1
    f69a:	e004      	b.n	f6a6 <_mqxlite+0x4e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:333
                    _mqx_exit(MQX_OUT_OF_MEMORY);
                } /* Endif */
    #endif
                _task_ready_internal(td_ptr);
            } /* Endif */
            ++template_ptr;
    f69c:	341c      	adds	r4, #28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:318
        TASK_TEMPLATE_STRUCT_PTR    template_ptr;
        int                         task_index = 0;

        template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;

        while (template_ptr->TASK_TEMPLATE_INDEX) {
    f69e:	6823      	ldr	r3, [r4, #0]
    f6a0:	3504      	adds	r5, #4
    f6a2:	2b00      	cmp	r3, #0
    f6a4:	d014      	beq.n	f6d0 <_mqxlite+0x78>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:319
            if (template_ptr->TASK_ATTRIBUTES & MQX_AUTO_START_TASK) {
    f6a6:	6963      	ldr	r3, [r4, #20]
    f6a8:	423b      	tst	r3, r7
    f6aa:	d0f7      	beq.n	f69c <_mqxlite+0x44>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:320
                td_ptr = _task_init_internal(template_ptr,
    f6ac:	69f3      	ldr	r3, [r6, #28]
    f6ae:	69a2      	ldr	r2, [r4, #24]
    f6b0:	68d9      	ldr	r1, [r3, #12]
    f6b2:	682b      	ldr	r3, [r5, #0]
    f6b4:	1c20      	adds	r0, r4, #0
    f6b6:	9300      	str	r3, [sp, #0]
    f6b8:	68a3      	ldr	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:333
                    _mqx_exit(MQX_OUT_OF_MEMORY);
                } /* Endif */
    #endif
                _task_ready_internal(td_ptr);
            } /* Endif */
            ++template_ptr;
    f6ba:	341c      	adds	r4, #28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:320

        template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;

        while (template_ptr->TASK_TEMPLATE_INDEX) {
            if (template_ptr->TASK_ATTRIBUTES & MQX_AUTO_START_TASK) {
                td_ptr = _task_init_internal(template_ptr,
    f6bc:	9301      	str	r3, [sp, #4]
    f6be:	2300      	movs	r3, #0
    f6c0:	f000 f9b2 	bl	fa28 <_task_init_internal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:331
    #if MQX_CHECK_MEMORY_ALLOCATION_ERRORS
                if (td_ptr == NULL) {
                    _mqx_exit(MQX_OUT_OF_MEMORY);
                } /* Endif */
    #endif
                _task_ready_internal(td_ptr);
    f6c4:	f000 fbac 	bl	fe20 <_task_ready_internal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:318
        TASK_TEMPLATE_STRUCT_PTR    template_ptr;
        int                         task_index = 0;

        template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;

        while (template_ptr->TASK_TEMPLATE_INDEX) {
    f6c8:	6823      	ldr	r3, [r4, #0]
    f6ca:	3504      	adds	r5, #4
    f6cc:	2b00      	cmp	r3, #0
    f6ce:	d1ea      	bne.n	f6a6 <_mqxlite+0x4e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:339
            ++task_index;
        } /* Endwhile */
    }

    /* System timer start */
    system_timer_start(NULL);
    f6d0:	2000      	movs	r0, #0
    f6d2:	f001 f8f7 	bl	108c4 <system_timer_start>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:341

    _sched_start_internal(); /* WILL NEVER RETURN FROM HERE */
    f6d6:	f004 f939 	bl	1394c <_sched_start_internal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:344

    return MQX_OK; /* To satisfy lint */
} /* Endbody */
    f6da:	2000      	movs	r0, #0
    f6dc:	b003      	add	sp, #12
    f6de:	bdf0      	pop	{r4, r5, r6, r7, pc}
_mqx_exit():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:377
    _mqx_uint error
)
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _int_disable();
    f6e0:	f7ff fc18 	bl	ef14 <_int_disable>
    f6e4:	e7fe      	b.n	f6e4 <_mqxlite+0x8c>
    f6e6:	46c0      	nop			; (mov r8, r8)
    f6e8:	1fffe000 	.word	0x1fffe000
    f6ec:	1fffe004 	.word	0x1fffe004

0000f6f0 <_mqx_exit>:
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:374
 */
void _mqx_exit
(
    _mqx_uint error
)
{ /* Body */
    f6f0:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:377
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _int_disable();
    f6f2:	f7ff fc0f 	bl	ef14 <_int_disable>
    f6f6:	e7fe      	b.n	f6f6 <_mqx_exit+0x6>

0000f6f8 <_task_exit_function_internal>:
_task_exit_function_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3007
 * \private
 *
 * \brief Executes the exit handler for the current task, then destroys the current task.
 */
void _task_exit_function_internal(void)
{
    f6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
_task_destroy_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:785
    TD_STRUCT_PTR            victim_ptr;
    TD_STRUCT_PTR            td_ptr;
    _processor_number        processor;
    uint16_t                  task_num;

    _GET_KERNEL_DATA(kernel_data);
    f6fa:	4b4d      	ldr	r3, [pc, #308]	; (f830 <_task_exit_function_internal+0x138>)
_task_exit_function_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3007
 * \private
 *
 * \brief Executes the exit handler for the current task, then destroys the current task.
 */
void _task_exit_function_internal(void)
{
    f6fc:	4646      	mov	r6, r8
    f6fe:	464f      	mov	r7, r9
    f700:	b4c0      	push	{r6, r7}
_task_destroy_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:785
    TD_STRUCT_PTR            victim_ptr;
    TD_STRUCT_PTR            td_ptr;
    _processor_number        processor;
    uint16_t                  task_num;

    _GET_KERNEL_DATA(kernel_data);
    f702:	681e      	ldr	r6, [r3, #0]
_task_get_td():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2720
#endif

    _GET_KERNEL_DATA(kernel_data);
    if (task_id == MQX_NULL_TASK_ID)
    {
        return((pointer)kernel_data->ACTIVE_PTR);
    f704:	69f5      	ldr	r5, [r6, #28]
_task_destroy_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:819
    }
#endif

    /* Make sure we are not trying to destroy the system task */
#if MQX_CHECK_ERRORS
    if ((victim_ptr == NULL) || (victim_ptr == SYSTEM_TD_PTR(kernel_data))) {
    f706:	2d00      	cmp	r5, #0
    f708:	d055      	beq.n	f7b6 <_task_exit_function_internal+0xbe>
    f70a:	1c33      	adds	r3, r6, #0
    f70c:	3348      	adds	r3, #72	; 0x48
    f70e:	429d      	cmp	r5, r3
    f710:	d051      	beq.n	f7b6 <_task_exit_function_internal+0xbe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:826
        return MQX_INVALID_TASK_ID;
    } /* Endif */
#endif

    /* First, serialize task creation/destruction */
    _lwsem_wait((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
    f712:	1c77      	adds	r7, r6, #1
    f714:	37ff      	adds	r7, #255	; 0xff
    f716:	1c38      	adds	r0, r7, #0
    f718:	f7ff fe6e 	bl	f3f8 <_lwsem_wait>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:828

    _int_disable();
    f71c:	f7ff fbfa 	bl	ef14 <_int_disable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:830

    if (victim_ptr->STATE == DYING) {
    f720:	68ab      	ldr	r3, [r5, #8]
    f722:	2b09      	cmp	r3, #9
    f724:	d100      	bne.n	f728 <_task_exit_function_internal+0x30>
    f726:	e071      	b.n	f80c <_task_exit_function_internal+0x114>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:841
        _KLOGX2(KLOG_task_destroy, MQX_OK);
        return MQX_OK;
    } /* Endif */

    /* remove the victim from any queues it may be in. */
    if (victim_ptr->STATE == READY) {
    f728:	2b02      	cmp	r3, #2
    f72a:	d067      	beq.n	f7fc <_task_exit_function_internal+0x104>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:846
        if (victim_ptr != kernel_data->ACTIVE_PTR) {
            /* Remove other task from ready queue */
            _QUEUE_UNLINK(victim_ptr);
        } /* Endif */
    } else if (victim_ptr->STATE & IS_ON_TIMEOUT_Q) {
    f72c:	05d9      	lsls	r1, r3, #23
    f72e:	d446      	bmi.n	f7be <_task_exit_function_internal+0xc6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:849
        /* Remove from time queue (uses NEXT, PREV field) */
        _TIME_DEQUEUE(victim_ptr, kernel_data);
    } else if (victim_ptr->STATE & TD_IS_ON_QUEUE) {
    f730:	0598      	lsls	r0, r3, #22
    f732:	d507      	bpl.n	f744 <_task_exit_function_internal+0x4c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:855
        /*
         * Remove from queue, where suspended
         * eg, MUTEX_BLOCKED, IO_BLOCKED, TASKQ_BLOCKED
         * (uses NEXT, PREV field)
         */
        _QUEUE_REMOVE(victim_ptr->INFO, victim_ptr);
    f734:	6869      	ldr	r1, [r5, #4]
    f736:	682a      	ldr	r2, [r5, #0]
    f738:	600a      	str	r2, [r1, #0]
    f73a:	6051      	str	r1, [r2, #4]
    f73c:	6baa      	ldr	r2, [r5, #56]	; 0x38
    f73e:	8911      	ldrh	r1, [r2, #8]
    f740:	3901      	subs	r1, #1
    f742:	8111      	strh	r1, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:858
    } /* Endif */

    if (victim_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
    f744:	0559      	lsls	r1, r3, #21
    f746:	d507      	bpl.n	f758 <_task_exit_function_internal+0x60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:864
        /*
         * Remove from queue, where suspended
         * eg, LWSEM_BLOCKED
         * (uses AUX_QUEUE field)
         */
        _QUEUE_REMOVE(victim_ptr->INFO, &victim_ptr->AUX_QUEUE);
    f748:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    f74a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    f74c:	6013      	str	r3, [r2, #0]
    f74e:	605a      	str	r2, [r3, #4]
    f750:	6bab      	ldr	r3, [r5, #56]	; 0x38
    f752:	891a      	ldrh	r2, [r3, #8]
    f754:	3a01      	subs	r2, #1
    f756:	811a      	strh	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:867
    } /* Endif */

    victim_ptr->STATE   = DYING;
    f758:	2309      	movs	r3, #9
    f75a:	60ab      	str	r3, [r5, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:883
    if (kernel_data->DSP_ACTIVE_PTR == victim_ptr) {
        kernel_data->DSP_ACTIVE_PTR = NULL;
    }/* Endif */
#endif

    _int_enable();
    f75c:	f7ff fbe6 	bl	ef2c <_int_enable>
    f760:	2400      	movs	r4, #0
    f762:	1933      	adds	r3, r6, r4
    f764:	33dd      	adds	r3, #221	; 0xdd
    f766:	33ff      	adds	r3, #255	; 0xff
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:889

#if MQX_COMPONENT_DESTRUCTION
    {
        _mqx_uint i;
        for (i = 0; i < MAX_KERNEL_COMPONENTS; ++i) {
            if (kernel_data->COMPONENT_CLEANUP[i] != NULL) {
    f768:	681b      	ldr	r3, [r3, #0]
    f76a:	2b00      	cmp	r3, #0
    f76c:	d001      	beq.n	f772 <_task_exit_function_internal+0x7a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:890
                (*kernel_data->COMPONENT_CLEANUP[i])(victim_ptr);
    f76e:	1c28      	adds	r0, r5, #0
    f770:	4798      	blx	r3
    f772:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:888
    _int_enable();

#if MQX_COMPONENT_DESTRUCTION
    {
        _mqx_uint i;
        for (i = 0; i < MAX_KERNEL_COMPONENTS; ++i) {
    f774:	2c40      	cmp	r4, #64	; 0x40
    f776:	d1f4      	bne.n	f762 <_task_exit_function_internal+0x6a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:929
            block_ptr = next_block_ptr;
        }
    }
#endif /* MQX_LITE_VERSION_NUMBER */

    victim_ptr->TASK_ID = TASK_ID_DYING;
    f778:	2380      	movs	r3, #128	; 0x80
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:900


    /* Save the task number */
    task_num = TASK_NUMBER_FROM_TASKID(victim_ptr->TASK_ID);

    td_ptr = kernel_data->ACTIVE_PTR;
    f77a:	69f2      	ldr	r2, [r6, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:929
            block_ptr = next_block_ptr;
        }
    }
#endif /* MQX_LITE_VERSION_NUMBER */

    victim_ptr->TASK_ID = TASK_ID_DYING;
    f77c:	061b      	lsls	r3, r3, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:933

    /* Start SPR P171-0017-01                */
    /* Remove td from linked list of all tds */
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
    f77e:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:898
    }
#endif


    /* Save the task number */
    task_num = TASK_NUMBER_FROM_TASKID(victim_ptr->TASK_ID);
    f780:	68e8      	ldr	r0, [r5, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:933

    victim_ptr->TASK_ID = TASK_ID_DYING;

    /* Start SPR P171-0017-01                */
    /* Remove td from linked list of all tds */
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
    f782:	31d4      	adds	r1, #212	; 0xd4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:929
            block_ptr = next_block_ptr;
        }
    }
#endif /* MQX_LITE_VERSION_NUMBER */

    victim_ptr->TASK_ID = TASK_ID_DYING;
    f784:	60eb      	str	r3, [r5, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:900


    /* Save the task number */
    task_num = TASK_NUMBER_FROM_TASKID(victim_ptr->TASK_ID);

    td_ptr = kernel_data->ACTIVE_PTR;
    f786:	4691      	mov	r9, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:933

    victim_ptr->TASK_ID = TASK_ID_DYING;

    /* Start SPR P171-0017-01                */
    /* Remove td from linked list of all tds */
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
    f788:	890a      	ldrh	r2, [r1, #8]
    f78a:	2a01      	cmp	r2, #1
    f78c:	d02f      	beq.n	f7ee <_task_exit_function_internal+0xf6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:937
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
        kernel_data->INSERT_TD_PTR = NULL;
    } else if (kernel_data->TASK_NUMBER > task_num) {
    f78e:	23e0      	movs	r3, #224	; 0xe0
    f790:	58f4      	ldr	r4, [r6, r3]
    f792:	0400      	lsls	r0, r0, #16
    f794:	0c00      	lsrs	r0, r0, #16
    f796:	4284      	cmp	r4, r0
    f798:	d821      	bhi.n	f7de <_task_exit_function_internal+0xe6>
    f79a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:943
        kernel_data->TASK_NUMBER   = task_num;
        kernel_data->INSERT_TD_PTR =
                        (TD_STRUCT_PTR)((unsigned char *)victim_ptr->TD_LIST_INFO.PREV -
                                        FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
    } /* Endif */
    _QUEUE_REMOVE(&kernel_data->TD_LIST, &victim_ptr->TD_LIST_INFO);
    f79c:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    f79e:	3a01      	subs	r2, #1
    f7a0:	6018      	str	r0, [r3, #0]
    f7a2:	6043      	str	r3, [r0, #4]
    f7a4:	810a      	strh	r2, [r1, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:947
    /* End SPR P171-0017-01                  */

    /* Free up create/destroy for other tasks */
    _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
    f7a6:	1c38      	adds	r0, r7, #0
    f7a8:	f7ff fdcc 	bl	f344 <_lwsem_post>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:949

    if (victim_ptr == td_ptr) {
    f7ac:	45a9      	cmp	r9, r5
    f7ae:	d033      	beq.n	f818 <_task_exit_function_internal+0x120>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:988
            victim_ptr->FLOAT_CONTEXT_PTR = NULL;
        }
    }
#endif /* MQX_LITE_VERSION_NUMBER */

    _psp_destroy_stack_frame(victim_ptr);
    f7b0:	1c28      	adds	r0, r5, #0
    f7b2:	f7ff fb7f 	bl	eeb4 <_psp_destroy_stack_frame>
_task_exit_function_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3031
    while(TRUE)
    {
        _task_block();
    }
#endif /* MQX_TASK_DESTRUCTION */
}
    f7b6:	bc0c      	pop	{r2, r3}
    f7b8:	4690      	mov	r8, r2
    f7ba:	4699      	mov	r9, r3
    f7bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_task_destroy_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:848
            /* Remove other task from ready queue */
            _QUEUE_UNLINK(victim_ptr);
        } /* Endif */
    } else if (victim_ptr->STATE & IS_ON_TIMEOUT_Q) {
        /* Remove from time queue (uses NEXT, PREV field) */
        _TIME_DEQUEUE(victim_ptr, kernel_data);
    f7be:	6869      	ldr	r1, [r5, #4]
    f7c0:	682a      	ldr	r2, [r5, #0]
    f7c2:	249a      	movs	r4, #154	; 0x9a
    f7c4:	0064      	lsls	r4, r4, #1
    f7c6:	600a      	str	r2, [r1, #0]
    f7c8:	6051      	str	r1, [r2, #4]
    f7ca:	1932      	adds	r2, r6, r4
    f7cc:	8911      	ldrh	r1, [r2, #8]
    f7ce:	3901      	subs	r1, #1
    f7d0:	8111      	strh	r1, [r2, #8]
    f7d2:	4a18      	ldr	r2, [pc, #96]	; (f834 <_task_exit_function_internal+0x13c>)
    f7d4:	4013      	ands	r3, r2
    f7d6:	2203      	movs	r2, #3
    f7d8:	4313      	orrs	r3, r2
    f7da:	60ab      	str	r3, [r5, #8]
    f7dc:	e7b2      	b.n	f744 <_task_exit_function_internal+0x4c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:938
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
        kernel_data->INSERT_TD_PTR = NULL;
    } else if (kernel_data->TASK_NUMBER > task_num) {
        kernel_data->TASK_NUMBER   = task_num;
    f7de:	50f0      	str	r0, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:940
        kernel_data->INSERT_TD_PTR =
                        (TD_STRUCT_PTR)((unsigned char *)victim_ptr->TD_LIST_INFO.PREV -
    f7e0:	2468      	movs	r4, #104	; 0x68
    f7e2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    f7e4:	4264      	negs	r4, r4
    f7e6:	18e4      	adds	r4, r4, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:939
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
        kernel_data->INSERT_TD_PTR = NULL;
    } else if (kernel_data->TASK_NUMBER > task_num) {
        kernel_data->TASK_NUMBER   = task_num;
        kernel_data->INSERT_TD_PTR =
    f7e8:	20e4      	movs	r0, #228	; 0xe4
    f7ea:	5034      	str	r4, [r6, r0]
    f7ec:	e7d6      	b.n	f79c <_task_exit_function_internal+0xa4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:935

    /* Start SPR P171-0017-01                */
    /* Remove td from linked list of all tds */
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
    f7ee:	23e0      	movs	r3, #224	; 0xe0
    f7f0:	50f2      	str	r2, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:936
        kernel_data->INSERT_TD_PTR = NULL;
    f7f2:	2000      	movs	r0, #0
    f7f4:	23e4      	movs	r3, #228	; 0xe4
    f7f6:	50f0      	str	r0, [r6, r3]
    f7f8:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    f7fa:	e7cf      	b.n	f79c <_task_exit_function_internal+0xa4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:842
        return MQX_OK;
    } /* Endif */

    /* remove the victim from any queues it may be in. */
    if (victim_ptr->STATE == READY) {
        if (victim_ptr != kernel_data->ACTIVE_PTR) {
    f7fc:	69f0      	ldr	r0, [r6, #28]
    f7fe:	42a8      	cmp	r0, r5
    f800:	d0aa      	beq.n	f758 <_task_exit_function_internal+0x60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:844
            /* Remove other task from ready queue */
            _QUEUE_UNLINK(victim_ptr);
    f802:	686a      	ldr	r2, [r5, #4]
    f804:	682b      	ldr	r3, [r5, #0]
    f806:	6013      	str	r3, [r2, #0]
    f808:	605a      	str	r2, [r3, #4]
    f80a:	e7a5      	b.n	f758 <_task_exit_function_internal+0x60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:833
    _int_disable();

    if (victim_ptr->STATE == DYING) {
        /* Task is already being destroyed */
        /* SPR P171-0021-01 re-enable interrupts */
        _int_enable();
    f80c:	f7ff fb8e 	bl	ef2c <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:835
        /* END SPR */
        _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
    f810:	1c38      	adds	r0, r7, #0
    f812:	f7ff fd97 	bl	f344 <_lwsem_post>
    f816:	e7ce      	b.n	f7b6 <_task_exit_function_internal+0xbe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:951
    /* Free up create/destroy for other tasks */
    _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);

    if (victim_ptr == td_ptr) {
        /* We are destroying the current task */
        _int_disable();
    f818:	f7ff fb7c 	bl	ef14 <_int_disable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:952
        _QUEUE_UNLINK(victim_ptr);  /* Remove myself from the ready queue */
    f81c:	686a      	ldr	r2, [r5, #4]
    f81e:	682b      	ldr	r3, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:963
                _mem_free(victim_ptr->FLOAT_CONTEXT_PTR);
                victim_ptr->FLOAT_CONTEXT_PTR = NULL;
            }
        }
#endif /* MQX_LITE_VERSION_NUMBER */
        _psp_destroy_stack_frame(victim_ptr);
    f820:	1c28      	adds	r0, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:952
    _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);

    if (victim_ptr == td_ptr) {
        /* We are destroying the current task */
        _int_disable();
        _QUEUE_UNLINK(victim_ptr);  /* Remove myself from the ready queue */
    f822:	6013      	str	r3, [r2, #0]
    f824:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:963
                _mem_free(victim_ptr->FLOAT_CONTEXT_PTR);
                victim_ptr->FLOAT_CONTEXT_PTR = NULL;
            }
        }
#endif /* MQX_LITE_VERSION_NUMBER */
        _psp_destroy_stack_frame(victim_ptr);
    f826:	f7ff fb45 	bl	eeb4 <_psp_destroy_stack_frame>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:976
            _mem_transfer_internal(victim_ptr, SYSTEM_TD_PTR(kernel_data));
            _mem_free(victim_ptr);   /* Free the task descriptor */
        } /* Endif */
#endif /* MQX_LITE_VERSION_NUMBER */
        /* Now we must jump to the scheduler */
        _sched_run_internal();   /* WILL NEVER RETURN FROM HERE */
    f82a:	f004 f892 	bl	13952 <_sched_run_internal>
    f82e:	e7bf      	b.n	f7b0 <_task_exit_function_internal+0xb8>
    f830:	1fffe000 	.word	0x1fffe000
    f834:	fffffeff 	.word	0xfffffeff

0000f838 <_task_destroy>:
_task_destroy():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:1049
 */
_mqx_uint _task_destroy
(
    _task_id task_id
)
{
    f838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
_task_destroy_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:785
    TD_STRUCT_PTR            victim_ptr;
    TD_STRUCT_PTR            td_ptr;
    _processor_number        processor;
    uint16_t                  task_num;

    _GET_KERNEL_DATA(kernel_data);
    f83a:	4b6c      	ldr	r3, [pc, #432]	; (f9ec <_task_destroy+0x1b4>)
_task_destroy():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:1049
 */
_mqx_uint _task_destroy
(
    _task_id task_id
)
{
    f83c:	464f      	mov	r7, r9
    f83e:	4646      	mov	r6, r8
    f840:	b4c0      	push	{r6, r7}
_task_destroy_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:785
    TD_STRUCT_PTR            victim_ptr;
    TD_STRUCT_PTR            td_ptr;
    _processor_number        processor;
    uint16_t                  task_num;

    _GET_KERNEL_DATA(kernel_data);
    f842:	681d      	ldr	r5, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:788
    _KLOGE2(KLOG_task_destroy, task_id);

    if (task_id != MQX_NULL_TASK_ID) {
    f844:	2800      	cmp	r0, #0
    f846:	d00a      	beq.n	f85e <_task_destroy+0x26>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:790
        processor = PROC_NUMBER_FROM_TASKID(task_id);
        if (processor != (_processor_number)kernel_data->INIT.PROCESSOR_NUMBER ) {
    f848:	23ae      	movs	r3, #174	; 0xae
    f84a:	005b      	lsls	r3, r3, #1
    f84c:	5aea      	ldrh	r2, [r5, r3]
    f84e:	0c03      	lsrs	r3, r0, #16
    f850:	429a      	cmp	r2, r3
    f852:	d065      	beq.n	f920 <_task_destroy+0xe8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:821

    /* Make sure we are not trying to destroy the system task */
#if MQX_CHECK_ERRORS
    if ((victim_ptr == NULL) || (victim_ptr == SYSTEM_TD_PTR(kernel_data))) {
        _KLOGX2(KLOG_task_destroy, MQX_INVALID_TASK_ID);
        return MQX_INVALID_TASK_ID;
    f854:	2012      	movs	r0, #18
_task_destroy():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:1058
        return _usr_task_destroy(task_id);
    }
#endif

    return _task_destroy_internal(task_id, FALSE);
}
    f856:	bc0c      	pop	{r2, r3}
    f858:	4690      	mov	r8, r2
    f85a:	4699      	mov	r9, r3
    f85c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_task_get_td():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2720
#endif

    _GET_KERNEL_DATA(kernel_data);
    if (task_id == MQX_NULL_TASK_ID)
    {
        return((pointer)kernel_data->ACTIVE_PTR);
    f85e:	69ee      	ldr	r6, [r5, #28]
    f860:	1c2a      	adds	r2, r5, #0
    f862:	3248      	adds	r2, #72	; 0x48
_task_destroy_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:819
    }
#endif

    /* Make sure we are not trying to destroy the system task */
#if MQX_CHECK_ERRORS
    if ((victim_ptr == NULL) || (victim_ptr == SYSTEM_TD_PTR(kernel_data))) {
    f864:	2e00      	cmp	r6, #0
    f866:	d0f5      	beq.n	f854 <_task_destroy+0x1c>
    f868:	42b2      	cmp	r2, r6
    f86a:	d0f3      	beq.n	f854 <_task_destroy+0x1c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:826
        return MQX_INVALID_TASK_ID;
    } /* Endif */
#endif

    /* First, serialize task creation/destruction */
    _lwsem_wait((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
    f86c:	1c6f      	adds	r7, r5, #1
    f86e:	37ff      	adds	r7, #255	; 0xff
    f870:	1c38      	adds	r0, r7, #0
    f872:	f7ff fdc1 	bl	f3f8 <_lwsem_wait>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:828

    _int_disable();
    f876:	f7ff fb4d 	bl	ef14 <_int_disable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:830

    if (victim_ptr->STATE == DYING) {
    f87a:	68b3      	ldr	r3, [r6, #8]
    f87c:	2b09      	cmp	r3, #9
    f87e:	d100      	bne.n	f882 <_task_destroy+0x4a>
    f880:	e0a0      	b.n	f9c4 <_task_destroy+0x18c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:841
        _KLOGX2(KLOG_task_destroy, MQX_OK);
        return MQX_OK;
    } /* Endif */

    /* remove the victim from any queues it may be in. */
    if (victim_ptr->STATE == READY) {
    f882:	2b02      	cmp	r3, #2
    f884:	d100      	bne.n	f888 <_task_destroy+0x50>
    f886:	e08e      	b.n	f9a6 <_task_destroy+0x16e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:846
        if (victim_ptr != kernel_data->ACTIVE_PTR) {
            /* Remove other task from ready queue */
            _QUEUE_UNLINK(victim_ptr);
        } /* Endif */
    } else if (victim_ptr->STATE & IS_ON_TIMEOUT_Q) {
    f888:	05d9      	lsls	r1, r3, #23
    f88a:	d575      	bpl.n	f978 <_task_destroy+0x140>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:848
        /* Remove from time queue (uses NEXT, PREV field) */
        _TIME_DEQUEUE(victim_ptr, kernel_data);
    f88c:	6871      	ldr	r1, [r6, #4]
    f88e:	6832      	ldr	r2, [r6, #0]
    f890:	249a      	movs	r4, #154	; 0x9a
    f892:	0064      	lsls	r4, r4, #1
    f894:	600a      	str	r2, [r1, #0]
    f896:	6051      	str	r1, [r2, #4]
    f898:	192a      	adds	r2, r5, r4
    f89a:	8911      	ldrh	r1, [r2, #8]
    f89c:	3901      	subs	r1, #1
    f89e:	8111      	strh	r1, [r2, #8]
    f8a0:	4a53      	ldr	r2, [pc, #332]	; (f9f0 <_task_destroy+0x1b8>)
    f8a2:	4013      	ands	r3, r2
    f8a4:	2203      	movs	r2, #3
    f8a6:	4313      	orrs	r3, r2
    f8a8:	60b3      	str	r3, [r6, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:858
         * (uses NEXT, PREV field)
         */
        _QUEUE_REMOVE(victim_ptr->INFO, victim_ptr);
    } /* Endif */

    if (victim_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
    f8aa:	0559      	lsls	r1, r3, #21
    f8ac:	d507      	bpl.n	f8be <_task_destroy+0x86>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:864
        /*
         * Remove from queue, where suspended
         * eg, LWSEM_BLOCKED
         * (uses AUX_QUEUE field)
         */
        _QUEUE_REMOVE(victim_ptr->INFO, &victim_ptr->AUX_QUEUE);
    f8ae:	6c32      	ldr	r2, [r6, #64]	; 0x40
    f8b0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    f8b2:	6013      	str	r3, [r2, #0]
    f8b4:	605a      	str	r2, [r3, #4]
    f8b6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    f8b8:	891a      	ldrh	r2, [r3, #8]
    f8ba:	3a01      	subs	r2, #1
    f8bc:	811a      	strh	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:867
    } /* Endif */

    victim_ptr->STATE   = DYING;
    f8be:	2309      	movs	r3, #9
    f8c0:	60b3      	str	r3, [r6, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:883
    if (kernel_data->DSP_ACTIVE_PTR == victim_ptr) {
        kernel_data->DSP_ACTIVE_PTR = NULL;
    }/* Endif */
#endif

    _int_enable();
    f8c2:	f7ff fb33 	bl	ef2c <_int_enable>
    f8c6:	2400      	movs	r4, #0
    f8c8:	192a      	adds	r2, r5, r4
    f8ca:	32dd      	adds	r2, #221	; 0xdd
    f8cc:	32ff      	adds	r2, #255	; 0xff
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:889

#if MQX_COMPONENT_DESTRUCTION
    {
        _mqx_uint i;
        for (i = 0; i < MAX_KERNEL_COMPONENTS; ++i) {
            if (kernel_data->COMPONENT_CLEANUP[i] != NULL) {
    f8ce:	6812      	ldr	r2, [r2, #0]
    f8d0:	2a00      	cmp	r2, #0
    f8d2:	d001      	beq.n	f8d8 <_task_destroy+0xa0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:890
                (*kernel_data->COMPONENT_CLEANUP[i])(victim_ptr);
    f8d4:	1c30      	adds	r0, r6, #0
    f8d6:	4790      	blx	r2
    f8d8:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:888
    _int_enable();

#if MQX_COMPONENT_DESTRUCTION
    {
        _mqx_uint i;
        for (i = 0; i < MAX_KERNEL_COMPONENTS; ++i) {
    f8da:	2c40      	cmp	r4, #64	; 0x40
    f8dc:	d1f4      	bne.n	f8c8 <_task_destroy+0x90>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:929
            block_ptr = next_block_ptr;
        }
    }
#endif /* MQX_LITE_VERSION_NUMBER */

    victim_ptr->TASK_ID = TASK_ID_DYING;
    f8de:	2380      	movs	r3, #128	; 0x80
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:900


    /* Save the task number */
    task_num = TASK_NUMBER_FROM_TASKID(victim_ptr->TASK_ID);

    td_ptr = kernel_data->ACTIVE_PTR;
    f8e0:	69ea      	ldr	r2, [r5, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:929
            block_ptr = next_block_ptr;
        }
    }
#endif /* MQX_LITE_VERSION_NUMBER */

    victim_ptr->TASK_ID = TASK_ID_DYING;
    f8e2:	061b      	lsls	r3, r3, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:933

    /* Start SPR P171-0017-01                */
    /* Remove td from linked list of all tds */
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
    f8e4:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:898
    }
#endif


    /* Save the task number */
    task_num = TASK_NUMBER_FROM_TASKID(victim_ptr->TASK_ID);
    f8e6:	68f0      	ldr	r0, [r6, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:933

    victim_ptr->TASK_ID = TASK_ID_DYING;

    /* Start SPR P171-0017-01                */
    /* Remove td from linked list of all tds */
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
    f8e8:	31d4      	adds	r1, #212	; 0xd4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:929
            block_ptr = next_block_ptr;
        }
    }
#endif /* MQX_LITE_VERSION_NUMBER */

    victim_ptr->TASK_ID = TASK_ID_DYING;
    f8ea:	60f3      	str	r3, [r6, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:900


    /* Save the task number */
    task_num = TASK_NUMBER_FROM_TASKID(victim_ptr->TASK_ID);

    td_ptr = kernel_data->ACTIVE_PTR;
    f8ec:	4691      	mov	r9, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:933

    victim_ptr->TASK_ID = TASK_ID_DYING;

    /* Start SPR P171-0017-01                */
    /* Remove td from linked list of all tds */
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
    f8ee:	890a      	ldrh	r2, [r1, #8]
    f8f0:	2a01      	cmp	r2, #1
    f8f2:	d060      	beq.n	f9b6 <_task_destroy+0x17e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:937
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
        kernel_data->INSERT_TD_PTR = NULL;
    } else if (kernel_data->TASK_NUMBER > task_num) {
    f8f4:	23e0      	movs	r3, #224	; 0xe0
    f8f6:	58ec      	ldr	r4, [r5, r3]
    f8f8:	0400      	lsls	r0, r0, #16
    f8fa:	0c00      	lsrs	r0, r0, #16
    f8fc:	4284      	cmp	r4, r0
    f8fe:	d846      	bhi.n	f98e <_task_destroy+0x156>
    f900:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:943
        kernel_data->TASK_NUMBER   = task_num;
        kernel_data->INSERT_TD_PTR =
                        (TD_STRUCT_PTR)((unsigned char *)victim_ptr->TD_LIST_INFO.PREV -
                                        FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
    } /* Endif */
    _QUEUE_REMOVE(&kernel_data->TD_LIST, &victim_ptr->TD_LIST_INFO);
    f902:	6eb0      	ldr	r0, [r6, #104]	; 0x68
    f904:	3a01      	subs	r2, #1
    f906:	6018      	str	r0, [r3, #0]
    f908:	6043      	str	r3, [r0, #4]
    f90a:	810a      	strh	r2, [r1, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:947
    /* End SPR P171-0017-01                  */

    /* Free up create/destroy for other tasks */
    _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
    f90c:	1c38      	adds	r0, r7, #0
    f90e:	f7ff fd19 	bl	f344 <_lwsem_post>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:949

    if (victim_ptr == td_ptr) {
    f912:	45b1      	cmp	r9, r6
    f914:	d05d      	beq.n	f9d2 <_task_destroy+0x19a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:988
            victim_ptr->FLOAT_CONTEXT_PTR = NULL;
        }
    }
#endif /* MQX_LITE_VERSION_NUMBER */

    _psp_destroy_stack_frame(victim_ptr);
    f916:	1c30      	adds	r0, r6, #0
    f918:	f7ff facc 	bl	eeb4 <_psp_destroy_stack_frame>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:1009
        _int_enable();
    }
#endif /* MQX_ENABLE_USER_MODE */

    _KLOGX2(KLOG_task_destroy, MQX_OK);
    return(MQX_OK);
    f91c:	2000      	movs	r0, #0
    f91e:	e79a      	b.n	f856 <_task_destroy+0x1e>
_task_get_td():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2724
    {
        return((pointer)kernel_data->ACTIVE_PTR);
    }

    /* check task_id for SYSTEM_TASK_ID */
    if (task_id == kernel_data->SYSTEM_TD.TASK_ID)
    f920:	6d69      	ldr	r1, [r5, #84]	; 0x54
    f922:	4288      	cmp	r0, r1
    f924:	d03b      	beq.n	f99e <_task_destroy+0x166>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2730
    {
        return((void *)&(kernel_data->SYSTEM_TD));
    }

    /* SPR P171-0022-01 Use int disable, not a semaphore */
    _INT_DISABLE();
    f926:	69ec      	ldr	r4, [r5, #28]
    f928:	6d61      	ldr	r1, [r4, #84]	; 0x54
    f92a:	2900      	cmp	r1, #0
    f92c:	d100      	bne.n	f930 <_task_destroy+0xf8>
    f92e:	b672      	cpsid	i
    f930:	1c4e      	adds	r6, r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2735
    /* END SPR */

    td_ptr = (TD_STRUCT_PTR)((unsigned char *)kernel_data->TD_LIST.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));

    size   = _QUEUE_GET_SIZE(&kernel_data->TD_LIST);
    f932:	1c2a      	adds	r2, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2730
    {
        return((void *)&(kernel_data->SYSTEM_TD));
    }

    /* SPR P171-0022-01 Use int disable, not a semaphore */
    _INT_DISABLE();
    f934:	6566      	str	r6, [r4, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2733
    /* END SPR */

    td_ptr = (TD_STRUCT_PTR)((unsigned char *)kernel_data->TD_LIST.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
    f936:	23d4      	movs	r3, #212	; 0xd4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2735

    size   = _QUEUE_GET_SIZE(&kernel_data->TD_LIST);
    f938:	32d4      	adds	r2, #212	; 0xd4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2733

    /* SPR P171-0022-01 Use int disable, not a semaphore */
    _INT_DISABLE();
    /* END SPR */

    td_ptr = (TD_STRUCT_PTR)((unsigned char *)kernel_data->TD_LIST.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
    f93a:	58eb      	ldr	r3, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2735

    size   = _QUEUE_GET_SIZE(&kernel_data->TD_LIST);
    f93c:	8912      	ldrh	r2, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2733

    /* SPR P171-0022-01 Use int disable, not a semaphore */
    _INT_DISABLE();
    /* END SPR */

    td_ptr = (TD_STRUCT_PTR)((unsigned char *)kernel_data->TD_LIST.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
    f93e:	3b68      	subs	r3, #104	; 0x68
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2736

    size   = _QUEUE_GET_SIZE(&kernel_data->TD_LIST);
    while (size--)
    f940:	2a00      	cmp	r2, #0
    f942:	d00c      	beq.n	f95e <_task_destroy+0x126>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2739
    {
        /* END SPR */
        if (td_ptr->TASK_ID == task_id)
    f944:	68df      	ldr	r7, [r3, #12]
    f946:	3a02      	subs	r2, #2
    f948:	42b8      	cmp	r0, r7
    f94a:	d104      	bne.n	f956 <_task_destroy+0x11e>
    f94c:	e00a      	b.n	f964 <_task_destroy+0x12c>
    f94e:	68df      	ldr	r7, [r3, #12]
    f950:	3a01      	subs	r2, #1
    f952:	42b8      	cmp	r0, r7
    f954:	d006      	beq.n	f964 <_task_destroy+0x12c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2746
            /* SPR P171-0022-01 Use int disable, not a semaphore */
            _INT_ENABLE();
            /* END SPR */
            return (void *)td_ptr;
        } /* Endif */
        td_ptr = (TD_STRUCT_PTR)((unsigned char *)td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
    f956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    f958:	3b68      	subs	r3, #104	; 0x68
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2736
    /* END SPR */

    td_ptr = (TD_STRUCT_PTR)((unsigned char *)kernel_data->TD_LIST.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));

    size   = _QUEUE_GET_SIZE(&kernel_data->TD_LIST);
    while (size--)
    f95a:	1c57      	adds	r7, r2, #1
    f95c:	d1f7      	bne.n	f94e <_task_destroy+0x116>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2750
        } /* Endif */
        td_ptr = (TD_STRUCT_PTR)((unsigned char *)td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
    } /* Endwhile */

    /* SPR P171-0022-01 Use int disable, not a semaphore */
    _int_enable();
    f95e:	f7ff fae5 	bl	ef2c <_int_enable>
    f962:	e777      	b.n	f854 <_task_destroy+0x1c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2742
    {
        /* END SPR */
        if (td_ptr->TASK_ID == task_id)
        {
            /* SPR P171-0022-01 Use int disable, not a semaphore */
            _INT_ENABLE();
    f964:	2e00      	cmp	r6, #0
    f966:	d003      	beq.n	f970 <_task_destroy+0x138>
    f968:	6561      	str	r1, [r4, #84]	; 0x54
    f96a:	2900      	cmp	r1, #0
    f96c:	d100      	bne.n	f970 <_task_destroy+0x138>
    f96e:	b662      	cpsie	i
    f970:	1c2a      	adds	r2, r5, #0
    f972:	3248      	adds	r2, #72	; 0x48
    f974:	1c1e      	adds	r6, r3, #0
    f976:	e777      	b.n	f868 <_task_destroy+0x30>
_task_destroy_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:849
            _QUEUE_UNLINK(victim_ptr);
        } /* Endif */
    } else if (victim_ptr->STATE & IS_ON_TIMEOUT_Q) {
        /* Remove from time queue (uses NEXT, PREV field) */
        _TIME_DEQUEUE(victim_ptr, kernel_data);
    } else if (victim_ptr->STATE & TD_IS_ON_QUEUE) {
    f978:	0598      	lsls	r0, r3, #22
    f97a:	d596      	bpl.n	f8aa <_task_destroy+0x72>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:855
        /*
         * Remove from queue, where suspended
         * eg, MUTEX_BLOCKED, IO_BLOCKED, TASKQ_BLOCKED
         * (uses NEXT, PREV field)
         */
        _QUEUE_REMOVE(victim_ptr->INFO, victim_ptr);
    f97c:	6871      	ldr	r1, [r6, #4]
    f97e:	6832      	ldr	r2, [r6, #0]
    f980:	600a      	str	r2, [r1, #0]
    f982:	6051      	str	r1, [r2, #4]
    f984:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    f986:	8911      	ldrh	r1, [r2, #8]
    f988:	3901      	subs	r1, #1
    f98a:	8111      	strh	r1, [r2, #8]
    f98c:	e78d      	b.n	f8aa <_task_destroy+0x72>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:938
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
        kernel_data->INSERT_TD_PTR = NULL;
    } else if (kernel_data->TASK_NUMBER > task_num) {
        kernel_data->TASK_NUMBER   = task_num;
    f98e:	50e8      	str	r0, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:940
        kernel_data->INSERT_TD_PTR =
                        (TD_STRUCT_PTR)((unsigned char *)victim_ptr->TD_LIST_INFO.PREV -
    f990:	2468      	movs	r4, #104	; 0x68
    f992:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
    f994:	4264      	negs	r4, r4
    f996:	18e4      	adds	r4, r4, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:939
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
        kernel_data->INSERT_TD_PTR = NULL;
    } else if (kernel_data->TASK_NUMBER > task_num) {
        kernel_data->TASK_NUMBER   = task_num;
        kernel_data->INSERT_TD_PTR =
    f998:	20e4      	movs	r0, #228	; 0xe4
    f99a:	502c      	str	r4, [r5, r0]
    f99c:	e7b1      	b.n	f902 <_task_destroy+0xca>
_task_get_td():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2726
    }

    /* check task_id for SYSTEM_TASK_ID */
    if (task_id == kernel_data->SYSTEM_TD.TASK_ID)
    {
        return((void *)&(kernel_data->SYSTEM_TD));
    f99e:	1c2e      	adds	r6, r5, #0
    f9a0:	3648      	adds	r6, #72	; 0x48
    f9a2:	1c32      	adds	r2, r6, #0
    f9a4:	e760      	b.n	f868 <_task_destroy+0x30>
_task_destroy_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:842
        return MQX_OK;
    } /* Endif */

    /* remove the victim from any queues it may be in. */
    if (victim_ptr->STATE == READY) {
        if (victim_ptr != kernel_data->ACTIVE_PTR) {
    f9a6:	69e8      	ldr	r0, [r5, #28]
    f9a8:	42b0      	cmp	r0, r6
    f9aa:	d088      	beq.n	f8be <_task_destroy+0x86>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:844
            /* Remove other task from ready queue */
            _QUEUE_UNLINK(victim_ptr);
    f9ac:	6872      	ldr	r2, [r6, #4]
    f9ae:	6833      	ldr	r3, [r6, #0]
    f9b0:	6013      	str	r3, [r2, #0]
    f9b2:	605a      	str	r2, [r3, #4]
    f9b4:	e783      	b.n	f8be <_task_destroy+0x86>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:935

    /* Start SPR P171-0017-01                */
    /* Remove td from linked list of all tds */
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
    f9b6:	23e0      	movs	r3, #224	; 0xe0
    f9b8:	50ea      	str	r2, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:936
        kernel_data->INSERT_TD_PTR = NULL;
    f9ba:	2000      	movs	r0, #0
    f9bc:	23e4      	movs	r3, #228	; 0xe4
    f9be:	50e8      	str	r0, [r5, r3]
    f9c0:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
    f9c2:	e79e      	b.n	f902 <_task_destroy+0xca>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:833
    _int_disable();

    if (victim_ptr->STATE == DYING) {
        /* Task is already being destroyed */
        /* SPR P171-0021-01 re-enable interrupts */
        _int_enable();
    f9c4:	f7ff fab2 	bl	ef2c <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:835
        /* END SPR */
        _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
    f9c8:	1c38      	adds	r0, r7, #0
    f9ca:	f7ff fcbb 	bl	f344 <_lwsem_post>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:837
        _KLOGX2(KLOG_task_destroy, MQX_OK);
        return MQX_OK;
    f9ce:	2000      	movs	r0, #0
    f9d0:	e741      	b.n	f856 <_task_destroy+0x1e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:951
    /* Free up create/destroy for other tasks */
    _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);

    if (victim_ptr == td_ptr) {
        /* We are destroying the current task */
        _int_disable();
    f9d2:	f7ff fa9f 	bl	ef14 <_int_disable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:952
        _QUEUE_UNLINK(victim_ptr);  /* Remove myself from the ready queue */
    f9d6:	6872      	ldr	r2, [r6, #4]
    f9d8:	6833      	ldr	r3, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:963
                _mem_free(victim_ptr->FLOAT_CONTEXT_PTR);
                victim_ptr->FLOAT_CONTEXT_PTR = NULL;
            }
        }
#endif /* MQX_LITE_VERSION_NUMBER */
        _psp_destroy_stack_frame(victim_ptr);
    f9da:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:952
    _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);

    if (victim_ptr == td_ptr) {
        /* We are destroying the current task */
        _int_disable();
        _QUEUE_UNLINK(victim_ptr);  /* Remove myself from the ready queue */
    f9dc:	6013      	str	r3, [r2, #0]
    f9de:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:963
                _mem_free(victim_ptr->FLOAT_CONTEXT_PTR);
                victim_ptr->FLOAT_CONTEXT_PTR = NULL;
            }
        }
#endif /* MQX_LITE_VERSION_NUMBER */
        _psp_destroy_stack_frame(victim_ptr);
    f9e0:	f7ff fa68 	bl	eeb4 <_psp_destroy_stack_frame>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:976
            _mem_transfer_internal(victim_ptr, SYSTEM_TD_PTR(kernel_data));
            _mem_free(victim_ptr);   /* Free the task descriptor */
        } /* Endif */
#endif /* MQX_LITE_VERSION_NUMBER */
        /* Now we must jump to the scheduler */
        _sched_run_internal();   /* WILL NEVER RETURN FROM HERE */
    f9e4:	f003 ffb5 	bl	13952 <_sched_run_internal>
    f9e8:	e795      	b.n	f916 <_task_destroy+0xde>
    f9ea:	46c0      	nop			; (mov r8, r8)
    f9ec:	1fffe000 	.word	0x1fffe000
    f9f0:	fffffeff 	.word	0xfffffeff

0000f9f4 <_task_set_error>:
_task_set_error():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2830
{ /* Body */
#if MQX_TD_HAS_ERROR_CODE
    register KERNEL_DATA_STRUCT_PTR  kernel_data;
    register _mqx_uint               old_error_code;

    _GET_KERNEL_DATA(kernel_data);
    f9f4:	4b0b      	ldr	r3, [pc, #44]	; (fa24 <_task_set_error+0x30>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2825
 */
_mqx_uint _task_set_error
(
    _mqx_uint new_error_code
)
{ /* Body */
    f9f6:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2830
#if MQX_TD_HAS_ERROR_CODE
    register KERNEL_DATA_STRUCT_PTR  kernel_data;
    register _mqx_uint               old_error_code;

    _GET_KERNEL_DATA(kernel_data);
    f9f8:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2835

    _KLOGE2(KLOG_task_set_error, new_error_code);

    /* get the old value */
    if (kernel_data->IN_ISR)
    f9fa:	8b1a      	ldrh	r2, [r3, #24]
    f9fc:	2a00      	cmp	r2, #0
    f9fe:	d00a      	beq.n	fa16 <_task_set_error+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2837
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
    fa00:	6b58      	ldr	r0, [r3, #52]	; 0x34
    fa02:	68c0      	ldr	r0, [r0, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
    fa04:	2900      	cmp	r1, #0
    fa06:	d001      	beq.n	fa0c <_task_set_error+0x18>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844 (discriminator 1)
    fa08:	2800      	cmp	r0, #0
    fa0a:	d103      	bne.n	fa14 <_task_set_error+0x20>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2846
    {
        if (kernel_data->IN_ISR)
    fa0c:	2a00      	cmp	r2, #0
    fa0e:	d105      	bne.n	fa1c <_task_set_error+0x28>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2852
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
        }
        else
        {
            kernel_data->ACTIVE_PTR->TASK_ERROR_CODE = new_error_code;
    fa10:	69db      	ldr	r3, [r3, #28]
    fa12:	6599      	str	r1, [r3, #88]	; 0x58
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2862
    return( old_error_code );
#else
    return MQX_OK;
#endif

}
    fa14:	4770      	bx	lr
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2841
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
    }
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
    fa16:	69d8      	ldr	r0, [r3, #28]
    fa18:	6d80      	ldr	r0, [r0, #88]	; 0x58
    fa1a:	e7f3      	b.n	fa04 <_task_set_error+0x10>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2848

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
    {
        if (kernel_data->IN_ISR)
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
    fa1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    fa1e:	60d9      	str	r1, [r3, #12]
    fa20:	e7f8      	b.n	fa14 <_task_set_error+0x20>
    fa22:	46c0      	nop			; (mov r8, r8)
    fa24:	1fffe000 	.word	0x1fffe000

0000fa28 <_task_init_internal>:
_task_init_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3087
    uint_32                  create_parameter,
    boolean                  dynamic,
    pointer                  input_stack_ptr,
    _mem_size                input_stack_size
)
{ /* Body */
    fa28:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa2a:	4656      	mov	r6, sl
    fa2c:	465f      	mov	r7, fp
    fa2e:	464d      	mov	r5, r9
    fa30:	4644      	mov	r4, r8
    fa32:	b4f0      	push	{r4, r5, r6, r7}
    fa34:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3100

    char_ptr                 stack_ptr;
    _mqx_uint                stack_size;
    _mqx_uint                td_size;

    _GET_KERNEL_DATA(kernel_data);
    fa36:	4b9c      	ldr	r3, [pc, #624]	; (fca8 <_task_init_internal+0x280>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3087
    uint_32                  create_parameter,
    boolean                  dynamic,
    pointer                  input_stack_ptr,
    _mem_size                input_stack_size
)
{ /* Body */
    fa38:	b089      	sub	sp, #36	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3100

    char_ptr                 stack_ptr;
    _mqx_uint                stack_size;
    _mqx_uint                td_size;

    _GET_KERNEL_DATA(kernel_data);
    fa3a:	681e      	ldr	r6, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3103

#if MQX_CHECK_ERRORS
    if (template_ptr->TASK_PRIORITY > kernel_data->LOWEST_TASK_PRIORITY)
    fa3c:	23d0      	movs	r3, #208	; 0xd0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3087
    uint_32                  create_parameter,
    boolean                  dynamic,
    pointer                  input_stack_ptr,
    _mem_size                input_stack_size
)
{ /* Body */
    fa3e:	9005      	str	r0, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3103
    _mqx_uint                td_size;

    _GET_KERNEL_DATA(kernel_data);

#if MQX_CHECK_ERRORS
    if (template_ptr->TASK_PRIORITY > kernel_data->LOWEST_TASK_PRIORITY)
    fa40:	58f3      	ldr	r3, [r6, r3]
    fa42:	68c0      	ldr	r0, [r0, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3087
    uint_32                  create_parameter,
    boolean                  dynamic,
    pointer                  input_stack_ptr,
    _mem_size                input_stack_size
)
{ /* Body */
    fa44:	468a      	mov	sl, r1
    fa46:	4691      	mov	r9, r2
    fa48:	9f12      	ldr	r7, [sp, #72]	; 0x48
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3103
    _mqx_uint                td_size;

    _GET_KERNEL_DATA(kernel_data);

#if MQX_CHECK_ERRORS
    if (template_ptr->TASK_PRIORITY > kernel_data->LOWEST_TASK_PRIORITY)
    fa4a:	4298      	cmp	r0, r3
    fa4c:	d906      	bls.n	fa5c <_task_init_internal+0x34>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3106
    {
#if MQX_USE_IDLE_TASK
        if (template_ptr != &kernel_data->IDLE_TASK_TEMPLATE)
    fa4e:	2187      	movs	r1, #135	; 0x87
    fa50:	0089      	lsls	r1, r1, #2
    fa52:	9d05      	ldr	r5, [sp, #20]
    fa54:	1873      	adds	r3, r6, r1
    fa56:	429d      	cmp	r5, r3
    fa58:	d000      	beq.n	fa5c <_task_init_internal+0x34>
    fa5a:	e0ab      	b.n	fbb4 <_task_init_internal+0x18c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3127
     * must be no smaller than a specified minimum, and it
     * is made to be a multiple of longwords. The space allocated
     * for the stack includes the specified stacksize and the
     * overhead required by the kernel.
     */
    if (input_stack_ptr)
    fa5c:	2f00      	cmp	r7, #0
    fa5e:	d100      	bne.n	fa62 <_task_init_internal+0x3a>
    fa60:	e0bd      	b.n	fbde <_task_init_internal+0x1b6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3132
    {
        /* force stack size, ignore stack size from template */
        stack_size = input_stack_size;
#if MQX_CHECK_ERRORS
        if (stack_size <= (PSP_MINSTACKSIZE+sizeof(TD_STRUCT)))
    fa62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    fa64:	238c      	movs	r3, #140	; 0x8c
    fa66:	005b      	lsls	r3, r3, #1
    fa68:	429a      	cmp	r2, r3
    fa6a:	d800      	bhi.n	fa6e <_task_init_internal+0x46>
    fa6c:	e102      	b.n	fc74 <_task_init_internal+0x24c>
_task_alloc_td_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3525
    uint_16                  task_num;

    _GET_KERNEL_DATA(kernel_data);

#if MQX_CHECK_ERRORS
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) >= (MAX_UINT_16-1))
    fa6e:	1c34      	adds	r4, r6, #0
    fa70:	34d4      	adds	r4, #212	; 0xd4
    fa72:	8922      	ldrh	r2, [r4, #8]
    fa74:	4b8d      	ldr	r3, [pc, #564]	; (fcac <_task_init_internal+0x284>)
    fa76:	429a      	cmp	r2, r3
    fa78:	d900      	bls.n	fa7c <_task_init_internal+0x54>
    fa7a:	e106      	b.n	fc8a <_task_init_internal+0x262>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3549


    if (input_stack_ptr)
    {
        new_td_ptr = (TD_STRUCT_PTR)input_stack_ptr;
        _mem_zero((pointer)new_td_ptr, extra);
    fa7c:	1c38      	adds	r0, r7, #0
    fa7e:	217c      	movs	r1, #124	; 0x7c
    fa80:	f7ff f8ba 	bl	ebf8 <_mem_zero>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3600
        new_td_ptr->TOS_RESERVED = ((uchar_ptr) new_td_ptr) + tos_offset;
    } /* Endif */
#endif

    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
    fa84:	23e0      	movs	r3, #224	; 0xe0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3602
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);
    fa86:	20ae      	movs	r0, #174	; 0xae
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3600
        new_td_ptr->TOS_RESERVED = ((uchar_ptr) new_td_ptr) + tos_offset;
    } /* Endif */
#endif

    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
    fa88:	58f3      	ldr	r3, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3602
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);
    fa8a:	0040      	lsls	r0, r0, #1
    fa8c:	5830      	ldr	r0, [r6, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3600
        new_td_ptr->TOS_RESERVED = ((uchar_ptr) new_td_ptr) + tos_offset;
    } /* Endif */
#endif

    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
    fa8e:	b299      	uxth	r1, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3601
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
    fa90:	22e4      	movs	r2, #228	; 0xe4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3602
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);
    fa92:	041b      	lsls	r3, r3, #16
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3601
    } /* Endif */
#endif

    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
    fa94:	58b2      	ldr	r2, [r6, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3602
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);
    fa96:	0c1b      	lsrs	r3, r3, #16
    fa98:	0400      	lsls	r0, r0, #16
    fa9a:	4303      	orrs	r3, r0
    fa9c:	60fb      	str	r3, [r7, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3610
    {
        q_ptr = (QUEUE_ELEMENT_STRUCT_PTR)((pointer)&kernel_data->TD_LIST);
    }
    else
    {
        q_ptr = &insert_td_ptr->TD_LIST_INFO;
    fa9e:	1c13      	adds	r3, r2, #0
    faa0:	3368      	adds	r3, #104	; 0x68
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3604
    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);

    if (!insert_td_ptr)
    faa2:	2a00      	cmp	r2, #0
    faa4:	d100      	bne.n	faa8 <_task_init_internal+0x80>
    faa6:	e090      	b.n	fbca <_task_init_internal+0x1a2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3613
    else
    {
        q_ptr = &insert_td_ptr->TD_LIST_INFO;
    } /* Endif */

    _QUEUE_INSERT(&kernel_data->TD_LIST, q_ptr, &new_td_ptr->TD_LIST_INFO);
    faa8:	681a      	ldr	r2, [r3, #0]
    faaa:	1c38      	adds	r0, r7, #0
    faac:	3068      	adds	r0, #104	; 0x68
    faae:	66ba      	str	r2, [r7, #104]	; 0x68
    fab0:	6018      	str	r0, [r3, #0]
    fab2:	66fb      	str	r3, [r7, #108]	; 0x6c
    fab4:	6050      	str	r0, [r2, #4]
    fab6:	8923      	ldrh	r3, [r4, #8]
    fab8:	1c38      	adds	r0, r7, #0
    faba:	3301      	adds	r3, #1
    fabc:	8123      	strh	r3, [r4, #8]
    fabe:	9d05      	ldr	r5, [sp, #20]
    fac0:	e003      	b.n	faca <_task_init_internal+0xa2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3627
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
        prev_td_ptr   = next_td_ptr;
        INC_TASK_NUMBER(task_num);
    } while( ((pointer)next_td_ptr != ((pointer)&kernel_data->TD_LIST)) &&
                    (TASK_NUMBER_FROM_TASKID(next_td_ptr->TASK_ID) == task_num) );
    fac2:	8999      	ldrh	r1, [r3, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3626
    {
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
        prev_td_ptr   = next_td_ptr;
        INC_TASK_NUMBER(task_num);
    } while( ((pointer)next_td_ptr != ((pointer)&kernel_data->TD_LIST)) &&
    fac4:	4291      	cmp	r1, r2
    fac6:	d109      	bne.n	fadc <_task_init_internal+0xb4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3624
    prev_td_ptr = new_td_ptr;
    do
    {
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
        prev_td_ptr   = next_td_ptr;
    fac8:	1c18      	adds	r0, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3623
     */
    prev_td_ptr = new_td_ptr;
    do
    {
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
    faca:	6e83      	ldr	r3, [r0, #104]	; 0x68
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3625
        prev_td_ptr   = next_td_ptr;
        INC_TASK_NUMBER(task_num);
    facc:	1c4a      	adds	r2, r1, #1
    face:	b292      	uxth	r2, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3623
     */
    prev_td_ptr = new_td_ptr;
    do
    {
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
    fad0:	3b68      	subs	r3, #104	; 0x68
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3625
        prev_td_ptr   = next_td_ptr;
        INC_TASK_NUMBER(task_num);
    fad2:	2a00      	cmp	r2, #0
    fad4:	d100      	bne.n	fad8 <_task_init_internal+0xb0>
    fad6:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3627
    } while( ((pointer)next_td_ptr != ((pointer)&kernel_data->TD_LIST)) &&
                    (TASK_NUMBER_FROM_TASKID(next_td_ptr->TASK_ID) == task_num) );
    fad8:	42a3      	cmp	r3, r4
    fada:	d1f2      	bne.n	fac2 <_task_init_internal+0x9a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3629

    kernel_data->INSERT_TD_PTR = insert_td_ptr;
    fadc:	23e4      	movs	r3, #228	; 0xe4
    fade:	50f0      	str	r0, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3630
    kernel_data->TASK_NUMBER   = task_num;
    fae0:	23e0      	movs	r3, #224	; 0xe0
    fae2:	9505      	str	r5, [sp, #20]
    fae4:	50f2      	str	r2, [r6, r3]
    fae6:	1c3c      	adds	r4, r7, #0
_task_init_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3139
            _task_set_error(MQX_INVALID_SIZE);
            return(NULL);
        } /* Endif */
#endif
        td_ptr = _task_alloc_td_internal(stack_size, &td_size, input_stack_ptr, template_ptr->TASK_ATTRIBUTES & MQX_USER_TASK);
        stack_size -= td_size;
    fae8:	9913      	ldr	r1, [sp, #76]	; 0x4c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3141

        if (dynamic)
    faea:	4642      	mov	r2, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3139
            _task_set_error(MQX_INVALID_SIZE);
            return(NULL);
        } /* Endif */
#endif
        td_ptr = _task_alloc_td_internal(stack_size, &td_size, input_stack_ptr, template_ptr->TASK_ATTRIBUTES & MQX_USER_TASK);
        stack_size -= td_size;
    faec:	397c      	subs	r1, #124	; 0x7c
    faee:	9102      	str	r1, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3141

        if (dynamic)
    faf0:	2a00      	cmp	r2, #0
    faf2:	d151      	bne.n	fb98 <_task_init_internal+0x170>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3188
    } /* Endif */
#endif
    td_ptr->STATE = BLOCKED;

    /* get begin of new stack */
    if (td_ptr->STACK_ALLOC_BLOCK)
    faf4:	6f62      	ldr	r2, [r4, #116]	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3185
    {
        _task_set_error(MQX_OUT_OF_TASK_DESCRIPTORS);
        return (NULL);
    } /* Endif */
#endif
    td_ptr->STATE = BLOCKED;
    faf6:	2303      	movs	r3, #3
    faf8:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3188

    /* get begin of new stack */
    if (td_ptr->STACK_ALLOC_BLOCK)
    fafa:	4694      	mov	ip, r2
    fafc:	2a00      	cmp	r2, #0
    fafe:	d054      	beq.n	fbaa <_task_init_internal+0x182>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3202
        /* stack start in provided block behind TD */
        stack_ptr = (char *)td_ptr + td_size;
        td_ptr->STACK_ALLOC_BLOCK = stack_ptr;
    }

    if (dynamic)
    fb00:	4640      	mov	r0, r8
    fb02:	2800      	cmp	r0, #0
    fb04:	d135      	bne.n	fb72 <_task_init_internal+0x14a>
_task_fill_stack_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3339
    _mqx_uint_ptr addr_ptr,
    _mqx_uint     size
)
{ /* Body */

    size = (size/sizeof(_mqx_uint)) + 1;  /* Calculate # _mqx_uints */
    fb06:	9a02      	ldr	r2, [sp, #8]
    fb08:	4660      	mov	r0, ip
    fb0a:	0893      	lsrs	r3, r2, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3340
    while (--size)
    fb0c:	d007      	beq.n	fb1e <_task_init_internal+0xf6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3342
    {
        *addr_ptr++ = MQX_STACK_MONITOR_VALUE;
    fb0e:	4968      	ldr	r1, [pc, #416]	; (fcb0 <_task_init_internal+0x288>)
    fb10:	9d05      	ldr	r5, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3340
    _mqx_uint     size
)
{ /* Body */

    size = (size/sizeof(_mqx_uint)) + 1;  /* Calculate # _mqx_uints */
    while (--size)
    fb12:	3b01      	subs	r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3342
    {
        *addr_ptr++ = MQX_STACK_MONITOR_VALUE;
    fb14:	c002      	stmia	r0!, {r1}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3340
    _mqx_uint     size
)
{ /* Body */

    size = (size/sizeof(_mqx_uint)) + 1;  /* Calculate # _mqx_uints */
    while (--size)
    fb16:	2b00      	cmp	r3, #0
    fb18:	d1fb      	bne.n	fb12 <_task_init_internal+0xea>
    fb1a:	9202      	str	r2, [sp, #8]
    fb1c:	9505      	str	r5, [sp, #20]
_task_init_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3226
     *                          8
     *                        ...
     *     highest priority     0
     * With the READY_Q_LIST pointer pointing to the highest priority queue
     */
    ready_q_ptr = kernel_data->READY_Q_LIST - template_ptr->TASK_PRIORITY;
    fb1e:	9b05      	ldr	r3, [sp, #20]
    fb20:	6a31      	ldr	r1, [r6, #32]
    fb22:	68db      	ldr	r3, [r3, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3232
    td_ptr->MY_QUEUE = ready_q_ptr;
#if MQX_HAS_DYNAMIC_PRIORITIES
    td_ptr->HOME_QUEUE  = ready_q_ptr;
#endif
    td_ptr->TASK_SR     = ready_q_ptr->ENABLE_SR;
    td_ptr->FLAGS       = template_ptr->TASK_ATTRIBUTES;
    fb24:	9d05      	ldr	r5, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3226
     *                          8
     *                        ...
     *     highest priority     0
     * With the READY_Q_LIST pointer pointing to the highest priority queue
     */
    ready_q_ptr = kernel_data->READY_Q_LIST - template_ptr->TASK_PRIORITY;
    fb26:	9303      	str	r3, [sp, #12]
    fb28:	011b      	lsls	r3, r3, #4
    fb2a:	1acb      	subs	r3, r1, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3227
    td_ptr->MY_QUEUE = ready_q_ptr;
    fb2c:	61e3      	str	r3, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3229
#if MQX_HAS_DYNAMIC_PRIORITIES
    td_ptr->HOME_QUEUE  = ready_q_ptr;
    fb2e:	6223      	str	r3, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3231
#endif
    td_ptr->TASK_SR     = ready_q_ptr->ENABLE_SR;
    fb30:	899b      	ldrh	r3, [r3, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3232
    td_ptr->FLAGS       = template_ptr->TASK_ATTRIBUTES;
    fb32:	6969      	ldr	r1, [r5, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3231
    ready_q_ptr = kernel_data->READY_Q_LIST - template_ptr->TASK_PRIORITY;
    td_ptr->MY_QUEUE = ready_q_ptr;
#if MQX_HAS_DYNAMIC_PRIORITIES
    td_ptr->HOME_QUEUE  = ready_q_ptr;
#endif
    td_ptr->TASK_SR     = ready_q_ptr->ENABLE_SR;
    fb34:	84a3      	strh	r3, [r4, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3245

#if MQX_SAVE_FP_ALWAYS
    td_ptr->FLAGS |= MQX_FLOATING_POINT_TASK;
#endif /* MQX_SAVE_FP_ALWAYS */

    if (input_stack_ptr)
    fb36:	2f00      	cmp	r7, #0
    fb38:	d001      	beq.n	fb3e <_task_init_internal+0x116>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3247
    {
        td_ptr->FLAGS |= TASK_STACK_PREALLOCATED;
    fb3a:	2020      	movs	r0, #32
    fb3c:	4301      	orrs	r1, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3251
    } /* Endif */

    /* create stack frame - initialize stack parameters in TD and stack itself (registers required by scheduller, etc.) */
    if (FALSE == _psp_build_stack_frame(td_ptr, stack_ptr, stack_size, template_ptr, (_mqx_uint)ready_q_ptr->ENABLE_SR, create_parameter))
    fb3e:	4648      	mov	r0, r9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3247
    td_ptr->FLAGS |= MQX_FLOATING_POINT_TASK;
#endif /* MQX_SAVE_FP_ALWAYS */

    if (input_stack_ptr)
    {
        td_ptr->FLAGS |= TASK_STACK_PREALLOCATED;
    fb40:	62a1      	str	r1, [r4, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3251
    } /* Endif */

    /* create stack frame - initialize stack parameters in TD and stack itself (registers required by scheduller, etc.) */
    if (FALSE == _psp_build_stack_frame(td_ptr, stack_ptr, stack_size, template_ptr, (_mqx_uint)ready_q_ptr->ENABLE_SR, create_parameter))
    fb42:	9a02      	ldr	r2, [sp, #8]
    fb44:	9300      	str	r3, [sp, #0]
    fb46:	9001      	str	r0, [sp, #4]
    fb48:	4661      	mov	r1, ip
    fb4a:	1c20      	adds	r0, r4, #0
    fb4c:	9b05      	ldr	r3, [sp, #20]
    fb4e:	f7ff f98f 	bl	ee70 <_psp_build_stack_frame>
    fb52:	2800      	cmp	r0, #0
    fb54:	d041      	beq.n	fbda <_task_init_internal+0x1b2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3260
    }


    /* Initialize the task's task descriptor. */
#if MQX_TD_HAS_TASK_TEMPLATE_PTR
    td_ptr->TASK_TEMPLATE_PTR = template_ptr;
    fb56:	9d05      	ldr	r5, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3299
    td_ptr->STDOUT_STREAM = kernel_data->PROCESSOR_STDOUT;
    td_ptr->STDERR_STREAM = kernel_data->PROCESSOR_STDERR;
#endif

#if MQX_TD_HAS_PARENT
    td_ptr->PARENT = creator_task_id;
    fb58:	4651      	mov	r1, sl
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3263
    /* Initialize the task's task descriptor. */
#if MQX_TD_HAS_TASK_TEMPLATE_PTR
    td_ptr->TASK_TEMPLATE_PTR = template_ptr;
#endif
#if MQX_TD_HAS_TEMPLATE_INDEX
    td_ptr->TEMPLATE_INDEX    = template_ptr->TASK_TEMPLATE_INDEX;
    fb5a:	6828      	ldr	r0, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3260
    }


    /* Initialize the task's task descriptor. */
#if MQX_TD_HAS_TASK_TEMPLATE_PTR
    td_ptr->TASK_TEMPLATE_PTR = template_ptr;
    fb5c:	6665      	str	r5, [r4, #100]	; 0x64
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3263
#endif
#if MQX_TD_HAS_TEMPLATE_INDEX
    td_ptr->TEMPLATE_INDEX    = template_ptr->TASK_TEMPLATE_INDEX;
    fb5e:	6620      	str	r0, [r4, #96]	; 0x60
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3299
    td_ptr->STDOUT_STREAM = kernel_data->PROCESSOR_STDOUT;
    td_ptr->STDERR_STREAM = kernel_data->PROCESSOR_STDERR;
#endif

#if MQX_TD_HAS_PARENT
    td_ptr->PARENT = creator_task_id;
    fb60:	65e1      	str	r1, [r4, #92]	; 0x5c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3319
        _mem_transfer_internal(td_ptr, td_ptr);
        _mem_transfer_internal(td_ptr->STACK_ALLOC_BLOCK, td_ptr);
    } /* Endif */
#endif /* MQX_LITE_VERSION_NUMBER */

    return (td_ptr);
    fb62:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3321

} /* Endbody */
    fb64:	b009      	add	sp, #36	; 0x24
    fb66:	bc3c      	pop	{r2, r3, r4, r5}
    fb68:	4690      	mov	r8, r2
    fb6a:	4699      	mov	r9, r3
    fb6c:	46a2      	mov	sl, r4
    fb6e:	46ab      	mov	fp, r5
    fb70:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3207
    if (dynamic)
    {
        /* task is creating from temporary template, store template before stack (in stack allocated memory) */
        new_template_ptr = (pointer)stack_ptr;
        stack_ptr +=  sizeof(TASK_TEMPLATE_STRUCT);
        *new_template_ptr = *template_ptr;
    fb72:	9d05      	ldr	r5, [sp, #20]
    fb74:	4663      	mov	r3, ip
    fb76:	cd07      	ldmia	r5!, {r0, r1, r2}
    fb78:	c307      	stmia	r3!, {r0, r1, r2}
    fb7a:	cd07      	ldmia	r5!, {r0, r1, r2}
    fb7c:	c307      	stmia	r3!, {r0, r1, r2}
    fb7e:	682d      	ldr	r5, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3209
        template_ptr = new_template_ptr;
        template_ptr->TASK_TEMPLATE_INDEX |= SYSTEM_TASK_FLAG;
    fb80:	4660      	mov	r0, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3207
    if (dynamic)
    {
        /* task is creating from temporary template, store template before stack (in stack allocated memory) */
        new_template_ptr = (pointer)stack_ptr;
        stack_ptr +=  sizeof(TASK_TEMPLATE_STRUCT);
        *new_template_ptr = *template_ptr;
    fb82:	601d      	str	r5, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3209
        template_ptr = new_template_ptr;
        template_ptr->TASK_TEMPLATE_INDEX |= SYSTEM_TASK_FLAG;
    fb84:	6800      	ldr	r0, [r0, #0]
    fb86:	2380      	movs	r3, #128	; 0x80
    fb88:	061b      	lsls	r3, r3, #24
    fb8a:	4661      	mov	r1, ip
    fb8c:	4303      	orrs	r3, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3206

    if (dynamic)
    {
        /* task is creating from temporary template, store template before stack (in stack allocated memory) */
        new_template_ptr = (pointer)stack_ptr;
        stack_ptr +=  sizeof(TASK_TEMPLATE_STRUCT);
    fb8e:	201c      	movs	r0, #28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3209
        *new_template_ptr = *template_ptr;
        template_ptr = new_template_ptr;
        template_ptr->TASK_TEMPLATE_INDEX |= SYSTEM_TASK_FLAG;
    fb90:	600b      	str	r3, [r1, #0]
    fb92:	9105      	str	r1, [sp, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3206

    if (dynamic)
    {
        /* task is creating from temporary template, store template before stack (in stack allocated memory) */
        new_template_ptr = (pointer)stack_ptr;
        stack_ptr +=  sizeof(TASK_TEMPLATE_STRUCT);
    fb94:	4484      	add	ip, r0
    fb96:	e7b6      	b.n	fb06 <_task_init_internal+0xde>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3143
        td_ptr = _task_alloc_td_internal(stack_size, &td_size, input_stack_ptr, template_ptr->TASK_ATTRIBUTES & MQX_USER_TASK);
        stack_size -= td_size;

        if (dynamic)
        {
            stack_size -=  sizeof(TASK_TEMPLATE_STRUCT);
    fb98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3188
    } /* Endif */
#endif
    td_ptr->STATE = BLOCKED;

    /* get begin of new stack */
    if (td_ptr->STACK_ALLOC_BLOCK)
    fb9a:	6f62      	ldr	r2, [r4, #116]	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3143
        td_ptr = _task_alloc_td_internal(stack_size, &td_size, input_stack_ptr, template_ptr->TASK_ATTRIBUTES & MQX_USER_TASK);
        stack_size -= td_size;

        if (dynamic)
        {
            stack_size -=  sizeof(TASK_TEMPLATE_STRUCT);
    fb9c:	3b98      	subs	r3, #152	; 0x98
    fb9e:	9302      	str	r3, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3185
    {
        _task_set_error(MQX_OUT_OF_TASK_DESCRIPTORS);
        return (NULL);
    } /* Endif */
#endif
    td_ptr->STATE = BLOCKED;
    fba0:	2303      	movs	r3, #3
    fba2:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3188

    /* get begin of new stack */
    if (td_ptr->STACK_ALLOC_BLOCK)
    fba4:	4694      	mov	ip, r2
    fba6:	2a00      	cmp	r2, #0
    fba8:	d1aa      	bne.n	fb00 <_task_init_internal+0xd8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3198
    }
    else
    {
        /* (this will be executed if user provide input_stack_size) */
        /* stack start in provided block behind TD */
        stack_ptr = (char *)td_ptr + td_size;
    fbaa:	257c      	movs	r5, #124	; 0x7c
    fbac:	192d      	adds	r5, r5, r4
    fbae:	46ac      	mov	ip, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3199
        td_ptr->STACK_ALLOC_BLOCK = stack_ptr;
    fbb0:	6765      	str	r5, [r4, #116]	; 0x74
    fbb2:	e7a5      	b.n	fb00 <_task_init_internal+0xd8>
_task_set_error():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2835
    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_task_set_error, new_error_code);

    /* get the old value */
    if (kernel_data->IN_ISR)
    fbb4:	8b33      	ldrh	r3, [r6, #24]
    fbb6:	2b00      	cmp	r3, #0
    fbb8:	d009      	beq.n	fbce <_task_init_internal+0x1a6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2837
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
    fbba:	6b73      	ldr	r3, [r6, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
    fbbc:	68d8      	ldr	r0, [r3, #12]
    fbbe:	2800      	cmp	r0, #0
    fbc0:	d10b      	bne.n	fbda <_task_init_internal+0x1b2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2848
    {
        if (kernel_data->IN_ISR)
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
    fbc2:	220e      	movs	r2, #14
    fbc4:	60da      	str	r2, [r3, #12]
_task_init_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3111
        if (template_ptr != &kernel_data->IDLE_TASK_TEMPLATE)
        {
#endif /* MQX_USE_IDLE_TASK */

            _task_set_error(MQX_INVALID_TASK_PRIORITY);
            return (NULL);
    fbc6:	2000      	movs	r0, #0
    fbc8:	e7cc      	b.n	fb64 <_task_init_internal+0x13c>
_task_alloc_td_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3606
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);

    if (!insert_td_ptr)
    {
        q_ptr = (QUEUE_ELEMENT_STRUCT_PTR)((pointer)&kernel_data->TD_LIST);
    fbca:	1c23      	adds	r3, r4, #0
    fbcc:	e76c      	b.n	faa8 <_task_init_internal+0x80>
_task_set_error():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2841
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
    }
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
    fbce:	69f3      	ldr	r3, [r6, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
    fbd0:	6d99      	ldr	r1, [r3, #88]	; 0x58
    fbd2:	2900      	cmp	r1, #0
    fbd4:	d101      	bne.n	fbda <_task_init_internal+0x1b2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2852
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
        }
        else
        {
            kernel_data->ACTIVE_PTR->TASK_ERROR_CODE = new_error_code;
    fbd6:	220e      	movs	r2, #14
    fbd8:	659a      	str	r2, [r3, #88]	; 0x58
_task_init_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3111
        if (template_ptr != &kernel_data->IDLE_TASK_TEMPLATE)
        {
#endif /* MQX_USE_IDLE_TASK */

            _task_set_error(MQX_INVALID_TASK_PRIORITY);
            return (NULL);
    fbda:	2000      	movs	r0, #0
    fbdc:	e7c2      	b.n	fb64 <_task_init_internal+0x13c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3150

    }
    else
    {
        /* take stack size from template */
        stack_size = template_ptr->TASK_STACKSIZE;
    fbde:	9d05      	ldr	r5, [sp, #20]
    fbe0:	68aa      	ldr	r2, [r5, #8]
    fbe2:	2a9c      	cmp	r2, #156	; 0x9c
    fbe4:	d200      	bcs.n	fbe8 <_task_init_internal+0x1c0>
    fbe6:	229c      	movs	r2, #156	; 0x9c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3158
        {
            stack_size = PSP_MINSTACKSIZE;
        } /* Endif */
#endif
        /* Make the size a multiple of the memory alignment */
        _STACK_ALIGN_VAL_LARGER(stack_size);
    fbe8:	230f      	movs	r3, #15
    fbea:	320f      	adds	r2, #15
    fbec:	439a      	bics	r2, r3
_task_alloc_td_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3525
    uint_16                  task_num;

    _GET_KERNEL_DATA(kernel_data);

#if MQX_CHECK_ERRORS
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) >= (MAX_UINT_16-1))
    fbee:	1c34      	adds	r4, r6, #0
_task_init_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3158
        {
            stack_size = PSP_MINSTACKSIZE;
        } /* Endif */
#endif
        /* Make the size a multiple of the memory alignment */
        _STACK_ALIGN_VAL_LARGER(stack_size);
    fbf0:	9202      	str	r2, [sp, #8]
_task_alloc_td_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3525
    uint_16                  task_num;

    _GET_KERNEL_DATA(kernel_data);

#if MQX_CHECK_ERRORS
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) >= (MAX_UINT_16-1))
    fbf2:	34d4      	adds	r4, #212	; 0xd4
    fbf4:	8920      	ldrh	r0, [r4, #8]
    fbf6:	4b2d      	ldr	r3, [pc, #180]	; (fcac <_task_init_internal+0x284>)
    fbf8:	4683      	mov	fp, r0
    fbfa:	4298      	cmp	r0, r3
    fbfc:	d851      	bhi.n	fca2 <_task_init_internal+0x27a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3600
        new_td_ptr->TOS_RESERVED = ((uchar_ptr) new_td_ptr) + tos_offset;
    } /* Endif */
#endif

    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
    fbfe:	23e0      	movs	r3, #224	; 0xe0
    fc00:	58f3      	ldr	r3, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3601
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
    fc02:	20e4      	movs	r0, #228	; 0xe4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3600
        new_td_ptr->TOS_RESERVED = ((uchar_ptr) new_td_ptr) + tos_offset;
    } /* Endif */
#endif

    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
    fc04:	b299      	uxth	r1, r3
    fc06:	9106      	str	r1, [sp, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3602
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);
    fc08:	21ae      	movs	r1, #174	; 0xae
    fc0a:	0049      	lsls	r1, r1, #1
    fc0c:	5871      	ldr	r1, [r6, r1]
    fc0e:	041b      	lsls	r3, r3, #16
    fc10:	0c1b      	lsrs	r3, r3, #16
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3601
    } /* Endif */
#endif

    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
    fc12:	5832      	ldr	r2, [r6, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3602
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);
    fc14:	0409      	lsls	r1, r1, #16
    fc16:	4319      	orrs	r1, r3
    fc18:	2300      	movs	r3, #0
    fc1a:	60d9      	str	r1, [r3, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3610
    {
        q_ptr = (QUEUE_ELEMENT_STRUCT_PTR)((pointer)&kernel_data->TD_LIST);
    }
    else
    {
        q_ptr = &insert_td_ptr->TD_LIST_INFO;
    fc1c:	1c11      	adds	r1, r2, #0
    fc1e:	3168      	adds	r1, #104	; 0x68
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3604
    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);

    if (!insert_td_ptr)
    fc20:	2a00      	cmp	r2, #0
    fc22:	d03c      	beq.n	fc9e <_task_init_internal+0x276>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3613
    else
    {
        q_ptr = &insert_td_ptr->TD_LIST_INFO;
    } /* Endif */

    _QUEUE_INSERT(&kernel_data->TD_LIST, q_ptr, &new_td_ptr->TD_LIST_INFO);
    fc24:	680d      	ldr	r5, [r1, #0]
    fc26:	2300      	movs	r3, #0
    fc28:	1c28      	adds	r0, r5, #0
    fc2a:	669d      	str	r5, [r3, #104]	; 0x68
    fc2c:	1c1d      	adds	r5, r3, #0
    fc2e:	3568      	adds	r5, #104	; 0x68
    fc30:	600d      	str	r5, [r1, #0]
    fc32:	66d9      	str	r1, [r3, #108]	; 0x6c
    fc34:	4659      	mov	r1, fp
    fc36:	3101      	adds	r1, #1
    fc38:	6045      	str	r5, [r0, #4]
    fc3a:	8121      	strh	r1, [r4, #8]
    fc3c:	9902      	ldr	r1, [sp, #8]
    fc3e:	1c22      	adds	r2, r4, #0
    fc40:	468c      	mov	ip, r1
    fc42:	9d05      	ldr	r5, [sp, #20]
    fc44:	9c06      	ldr	r4, [sp, #24]
    fc46:	e003      	b.n	fc50 <_task_init_internal+0x228>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3627
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
        prev_td_ptr   = next_td_ptr;
        INC_TASK_NUMBER(task_num);
    } while( ((pointer)next_td_ptr != ((pointer)&kernel_data->TD_LIST)) &&
                    (TASK_NUMBER_FROM_TASKID(next_td_ptr->TASK_ID) == task_num) );
    fc48:	898c      	ldrh	r4, [r1, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3626
    {
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
        prev_td_ptr   = next_td_ptr;
        INC_TASK_NUMBER(task_num);
    } while( ((pointer)next_td_ptr != ((pointer)&kernel_data->TD_LIST)) &&
    fc4a:	4284      	cmp	r4, r0
    fc4c:	d109      	bne.n	fc62 <_task_init_internal+0x23a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3624
    prev_td_ptr = new_td_ptr;
    do
    {
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
        prev_td_ptr   = next_td_ptr;
    fc4e:	1c0b      	adds	r3, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3623
     */
    prev_td_ptr = new_td_ptr;
    do
    {
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
    fc50:	6e99      	ldr	r1, [r3, #104]	; 0x68
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3625
        prev_td_ptr   = next_td_ptr;
        INC_TASK_NUMBER(task_num);
    fc52:	1c60      	adds	r0, r4, #1
    fc54:	b280      	uxth	r0, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3623
     */
    prev_td_ptr = new_td_ptr;
    do
    {
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
    fc56:	3968      	subs	r1, #104	; 0x68
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3625
        prev_td_ptr   = next_td_ptr;
        INC_TASK_NUMBER(task_num);
    fc58:	2800      	cmp	r0, #0
    fc5a:	d100      	bne.n	fc5e <_task_init_internal+0x236>
    fc5c:	2001      	movs	r0, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3627
    } while( ((pointer)next_td_ptr != ((pointer)&kernel_data->TD_LIST)) &&
                    (TASK_NUMBER_FROM_TASKID(next_td_ptr->TASK_ID) == task_num) );
    fc5e:	4291      	cmp	r1, r2
    fc60:	d1f2      	bne.n	fc48 <_task_init_internal+0x220>
    fc62:	4661      	mov	r1, ip
    fc64:	9102      	str	r1, [sp, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3629

    kernel_data->INSERT_TD_PTR = insert_td_ptr;
    fc66:	21e4      	movs	r1, #228	; 0xe4
    fc68:	5073      	str	r3, [r6, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3630
    kernel_data->TASK_NUMBER   = task_num;
    fc6a:	23e0      	movs	r3, #224	; 0xe0
    fc6c:	9505      	str	r5, [sp, #20]
    fc6e:	50f0      	str	r0, [r6, r3]
_task_init_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3173
         * Allocate space for a task descriptor and stack.
         * If there is none available,
         * then indicate that the create failed.
         */
        /* function allocate task descriptor, stack and optionally increase stack block size by size required for task template (dynamic = nonzero) */
        td_ptr = _task_alloc_td_internal(dynamic ? (stack_size +  sizeof(TASK_TEMPLATE_STRUCT)) : stack_size,
    fc70:	2400      	movs	r4, #0
    fc72:	e73f      	b.n	faf4 <_task_init_internal+0xcc>
_task_set_error():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2835
    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_task_set_error, new_error_code);

    /* get the old value */
    if (kernel_data->IN_ISR)
    fc74:	8b33      	ldrh	r3, [r6, #24]
    fc76:	2b00      	cmp	r3, #0
    fc78:	d009      	beq.n	fc8e <_task_init_internal+0x266>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2837
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
    fc7a:	6b73      	ldr	r3, [r6, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
    fc7c:	68dd      	ldr	r5, [r3, #12]
    fc7e:	2d00      	cmp	r5, #0
    fc80:	d1ab      	bne.n	fbda <_task_init_internal+0x1b2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2848
    {
        if (kernel_data->IN_ISR)
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
    fc82:	2202      	movs	r2, #2
    fc84:	60da      	str	r2, [r3, #12]
_task_init_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3135
        stack_size = input_stack_size;
#if MQX_CHECK_ERRORS
        if (stack_size <= (PSP_MINSTACKSIZE+sizeof(TD_STRUCT)))
        {
            _task_set_error(MQX_INVALID_SIZE);
            return(NULL);
    fc86:	2000      	movs	r0, #0
    fc88:	e76c      	b.n	fb64 <_task_init_internal+0x13c>
_task_alloc_td_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3528

#if MQX_CHECK_ERRORS
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) >= (MAX_UINT_16-1))
    {
        /* We already have maximum number of tasks in system */
        return NULL;
    fc8a:	2400      	movs	r4, #0
    fc8c:	e72c      	b.n	fae8 <_task_init_internal+0xc0>
_task_set_error():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2841
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
    }
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
    fc8e:	69f3      	ldr	r3, [r6, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
    fc90:	6d98      	ldr	r0, [r3, #88]	; 0x58
    fc92:	2800      	cmp	r0, #0
    fc94:	d1a1      	bne.n	fbda <_task_init_internal+0x1b2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2852
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
        }
        else
        {
            kernel_data->ACTIVE_PTR->TASK_ERROR_CODE = new_error_code;
    fc96:	2202      	movs	r2, #2
    fc98:	659a      	str	r2, [r3, #88]	; 0x58
_task_init_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3135
        stack_size = input_stack_size;
#if MQX_CHECK_ERRORS
        if (stack_size <= (PSP_MINSTACKSIZE+sizeof(TD_STRUCT)))
        {
            _task_set_error(MQX_INVALID_SIZE);
            return(NULL);
    fc9a:	2000      	movs	r0, #0
    fc9c:	e762      	b.n	fb64 <_task_init_internal+0x13c>
_task_alloc_td_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3606
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);

    if (!insert_td_ptr)
    {
        q_ptr = (QUEUE_ELEMENT_STRUCT_PTR)((pointer)&kernel_data->TD_LIST);
    fc9e:	1c21      	adds	r1, r4, #0
    fca0:	e7c0      	b.n	fc24 <_task_init_internal+0x1fc>
_task_init_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3173
         * Allocate space for a task descriptor and stack.
         * If there is none available,
         * then indicate that the create failed.
         */
        /* function allocate task descriptor, stack and optionally increase stack block size by size required for task template (dynamic = nonzero) */
        td_ptr = _task_alloc_td_internal(dynamic ? (stack_size +  sizeof(TASK_TEMPLATE_STRUCT)) : stack_size,
    fca2:	2400      	movs	r4, #0
    fca4:	e726      	b.n	faf4 <_task_init_internal+0xcc>
    fca6:	46c0      	nop			; (mov r8, r8)
    fca8:	1fffe000 	.word	0x1fffe000
    fcac:	0000fffd 	.word	0x0000fffd
    fcb0:	7374616b 	.word	0x7374616b

0000fcb4 <_task_create_at>:
_task_create_at():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:704
    _mqx_uint           template_index,
    uint_32             parameter,
    pointer             stack_ptr,
    _mem_size           stack_size
)
{ /* Body */
    fcb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    fcb6:	4645      	mov	r5, r8
    fcb8:	4657      	mov	r7, sl
    fcba:	464e      	mov	r6, r9
    fcbc:	b4e0      	push	{r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:709
    KERNEL_DATA_STRUCT_PTR kernel_data;
    TD_STRUCT_PTR          td_ptr;
    _task_id               result;

    _GET_KERNEL_DATA(kernel_data);
    fcbe:	4e51      	ldr	r6, [pc, #324]	; (fe04 <FP_CONTEXT_CLEAR_MASK+0x5>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:704
    _mqx_uint           template_index,
    uint_32             parameter,
    pointer             stack_ptr,
    _mem_size           stack_size
)
{ /* Body */
    fcc0:	b082      	sub	sp, #8
    fcc2:	1c17      	adds	r7, r2, #0
    fcc4:	4698      	mov	r8, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:709
    KERNEL_DATA_STRUCT_PTR kernel_data;
    TD_STRUCT_PTR          td_ptr;
    _task_id               result;

    _GET_KERNEL_DATA(kernel_data);
    fcc6:	6835      	ldr	r5, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:714
    _KLOGE5(KLOG_task_create_at, processor_number, template_index, parameter,
                    stack_ptr);

#if MQX_CHECK_ERRORS
    if (template_index & SYSTEM_TASK_FLAG)
    fcc8:	2900      	cmp	r1, #0
    fcca:	da00      	bge.n	fcce <_task_create_at+0x1a>
    fccc:	e07c      	b.n	fdc8 <_task_create_at+0x114>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:724
        return MQX_NULL_TASK_ID;
    } /* Endif */
#endif

#if MQX_CHECK_ERRORS
    if (processor_number != 0)
    fcce:	2800      	cmp	r0, #0
    fcd0:	d162      	bne.n	fd98 <_task_create_at+0xe4>
_task_build_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2924
    boolean                  dynamic;
    uint_32                  create_parameter;

    _GET_KERNEL_DATA(kernel_data);

    if ( template_index )
    fcd2:	2900      	cmp	r1, #0
    fcd4:	d145      	bne.n	fd62 <_task_create_at+0xae>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2947
    }
    else
    {
        task_template_ptr = (TASK_TEMPLATE_STRUCT_PTR)parameter;
        create_parameter  = task_template_ptr->CREATION_PARAMETER;
        dynamic = TRUE;
    fcd6:	2301      	movs	r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2946
        } /* Endif */
    }
    else
    {
        task_template_ptr = (TASK_TEMPLATE_STRUCT_PTR)parameter;
        create_parameter  = task_template_ptr->CREATION_PARAMETER;
    fcd8:	6997      	ldr	r7, [r2, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2945
            task_template_ptr = NULL;
        } /* Endif */
    }
    else
    {
        task_template_ptr = (TASK_TEMPLATE_STRUCT_PTR)parameter;
    fcda:	1c14      	adds	r4, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2947
        create_parameter  = task_template_ptr->CREATION_PARAMETER;
        dynamic = TRUE;
    fcdc:	469a      	mov	sl, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2978
        }
    }
#endif

    /* serialize task creation/destruction */
    _lwsem_wait((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
    fcde:	1c6b      	adds	r3, r5, #1
    fce0:	33ff      	adds	r3, #255	; 0xff
    fce2:	1c18      	adds	r0, r3, #0
    fce4:	4699      	mov	r9, r3
    fce6:	f7ff fb87 	bl	f3f8 <_lwsem_wait>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2981

    /* Create the task, but do not ready it */
    td_ptr = _task_init_internal(task_template_ptr, kernel_data->ACTIVE_PTR->TASK_ID, \
    fcea:	69eb      	ldr	r3, [r5, #28]
    fcec:	4642      	mov	r2, r8
    fcee:	68d9      	ldr	r1, [r3, #12]
    fcf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fcf2:	9200      	str	r2, [sp, #0]
    fcf4:	9301      	str	r3, [sp, #4]
    fcf6:	1c20      	adds	r0, r4, #0
    fcf8:	1c3a      	adds	r2, r7, #0
    fcfa:	4653      	mov	r3, sl
    fcfc:	f7ff fe94 	bl	fa28 <_task_init_internal>
    fd00:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2985
                    create_parameter, dynamic, stack_ptr, stack_size);

    /* Allow other tasks to create */
    _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
    fd02:	4648      	mov	r0, r9
    fd04:	f7ff fb1e 	bl	f344 <_lwsem_post>
_task_create_at():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:734
        return MQX_NULL_TASK_ID;
    } /* Endif */
#endif

    td_ptr = _task_build_internal(template_index, parameter, stack_ptr, stack_size, FALSE);
    if (td_ptr != NULL)
    fd08:	2c00      	cmp	r4, #0
    fd0a:	d068      	beq.n	fdde <_task_create_at+0x12a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:737
    {
        result = td_ptr->TASK_ID;
        _INT_DISABLE();
    fd0c:	69e8      	ldr	r0, [r5, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:736
#endif

    td_ptr = _task_build_internal(template_index, parameter, stack_ptr, stack_size, FALSE);
    if (td_ptr != NULL)
    {
        result = td_ptr->TASK_ID;
    fd0e:	68e2      	ldr	r2, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:737
        _INT_DISABLE();
    fd10:	6d41      	ldr	r1, [r0, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:736
#endif

    td_ptr = _task_build_internal(template_index, parameter, stack_ptr, stack_size, FALSE);
    if (td_ptr != NULL)
    {
        result = td_ptr->TASK_ID;
    fd12:	4690      	mov	r8, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:737
        _INT_DISABLE();
    fd14:	2900      	cmp	r1, #0
    fd16:	d100      	bne.n	fd1a <_task_create_at+0x66>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:737 (discriminator 1)
    fd18:	b672      	cpsid	i
_task_ready_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3368 (discriminator 2)
{ /* Body */
    KERNEL_DATA_STRUCT_PTR       kernel_data;
    register READY_Q_STRUCT_PTR  ready_q_ptr;
    register TD_STRUCT_PTR       old_tail_ptr;

    _GET_KERNEL_DATA(kernel_data);
    fd1a:	6836      	ldr	r6, [r6, #0]
_task_create_at():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:737 (discriminator 2)

    td_ptr = _task_build_internal(template_index, parameter, stack_ptr, stack_size, FALSE);
    if (td_ptr != NULL)
    {
        result = td_ptr->TASK_ID;
        _INT_DISABLE();
    fd1c:	1c4b      	adds	r3, r1, #1
    fd1e:	469c      	mov	ip, r3
    fd20:	6543      	str	r3, [r0, #84]	; 0x54
_task_ready_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3380 (discriminator 2)
     * Ready queues are ALWAYS allocated with higher priority queues in higher
     * memory, thus we need to update the CURRENT_READY_Q field (which
     * always points to the highest priority ready queue with a task
     * on it.
     */
    if ( (uchar_ptr)ready_q_ptr > (uchar_ptr)(kernel_data->CURRENT_READY_Q) )
    fd22:	6a77      	ldr	r7, [r6, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3372 (discriminator 2)

    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_task_ready, td_ptr);

    ready_q_ptr   = td_ptr->MY_QUEUE;
    fd24:	69e3      	ldr	r3, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3373 (discriminator 2)
    old_tail_ptr  = ready_q_ptr->TAIL_READY_Q;
    fd26:	685a      	ldr	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3380 (discriminator 2)
     * Ready queues are ALWAYS allocated with higher priority queues in higher
     * memory, thus we need to update the CURRENT_READY_Q field (which
     * always points to the highest priority ready queue with a task
     * on it.
     */
    if ( (uchar_ptr)ready_q_ptr > (uchar_ptr)(kernel_data->CURRENT_READY_Q) )
    fd28:	42bb      	cmp	r3, r7
    fd2a:	d900      	bls.n	fd2e <_task_create_at+0x7a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3382
    {
        kernel_data->CURRENT_READY_Q = ready_q_ptr;
    fd2c:	6273      	str	r3, [r6, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3385
    } /* Endif */

    td_ptr->STATE              = READY;
    fd2e:	2602      	movs	r6, #2
    fd30:	60a6      	str	r6, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3387
    td_ptr->TD_PREV            = old_tail_ptr;
    td_ptr->TD_NEXT            = old_tail_ptr->TD_NEXT;
    fd32:	6816      	ldr	r6, [r2, #0]
_task_create_at():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:739
    if (td_ptr != NULL)
    {
        result = td_ptr->TASK_ID;
        _INT_DISABLE();
        _task_ready_internal(td_ptr);
        _INT_ENABLE();
    fd34:	4667      	mov	r7, ip
_task_ready_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3386
    {
        kernel_data->CURRENT_READY_Q = ready_q_ptr;
    } /* Endif */

    td_ptr->STATE              = READY;
    td_ptr->TD_PREV            = old_tail_ptr;
    fd36:	6062      	str	r2, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3387
    td_ptr->TD_NEXT            = old_tail_ptr->TD_NEXT;
    fd38:	6026      	str	r6, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3388
    old_tail_ptr->TD_NEXT      = td_ptr;
    fd3a:	6014      	str	r4, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3389
    ready_q_ptr->TAIL_READY_Q  = td_ptr;
    fd3c:	605c      	str	r4, [r3, #4]
_task_create_at():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:739
    if (td_ptr != NULL)
    {
        result = td_ptr->TASK_ID;
        _INT_DISABLE();
        _task_ready_internal(td_ptr);
        _INT_ENABLE();
    fd3e:	2f00      	cmp	r7, #0
    fd40:	d002      	beq.n	fd48 <_task_create_at+0x94>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:739 (discriminator 1)
    fd42:	6541      	str	r1, [r0, #84]	; 0x54
    fd44:	2900      	cmp	r1, #0
    fd46:	d03a      	beq.n	fdbe <_task_create_at+0x10a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:740 (discriminator 1)
        _CHECK_RUN_SCHEDULER(); /* Let a higher priority task run */
    fd48:	f003 fe06 	bl	13958 <_sched_check_scheduler_internal>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:751

#if MQX_TD_HAS_ERROR_CODE
    _KLOGX3(KLOG_task_create_at, result,
                    kernel_data->ACTIVE_PTR->TASK_ERROR_CODE);
#endif
    _tad_task_at_flag++;
    fd4c:	4b2e      	ldr	r3, [pc, #184]	; (fe08 <FP_CONTEXT_CLEAR_MASK+0x9>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:753

    return (result);
    fd4e:	4640      	mov	r0, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:751

#if MQX_TD_HAS_ERROR_CODE
    _KLOGX3(KLOG_task_create_at, result,
                    kernel_data->ACTIVE_PTR->TASK_ERROR_CODE);
#endif
    _tad_task_at_flag++;
    fd50:	681a      	ldr	r2, [r3, #0]
    fd52:	3201      	adds	r2, #1
    fd54:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:755

    return (result);

} /* Endbody */
    fd56:	b002      	add	sp, #8
    fd58:	bc1c      	pop	{r2, r3, r4}
    fd5a:	4690      	mov	r8, r2
    fd5c:	4699      	mov	r9, r3
    fd5e:	46a2      	mov	sl, r4
    fd60:	bdf0      	pop	{r4, r5, r6, r7, pc}
_task_build_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2930
    {
        dynamic = FALSE;
        create_parameter = parameter;

        /* Search all the local task templates for one whose index matches */
        task_template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;
    fd62:	23be      	movs	r3, #190	; 0xbe
    fd64:	005b      	lsls	r3, r3, #1
    fd66:	58ec      	ldr	r4, [r5, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2932

        while ( task_template_ptr->TASK_TEMPLATE_INDEX &&
    fd68:	6823      	ldr	r3, [r4, #0]
    fd6a:	2b00      	cmp	r3, #0
    fd6c:	d008      	beq.n	fd80 <_task_create_at+0xcc>
    fd6e:	4299      	cmp	r1, r3
    fd70:	d102      	bne.n	fd78 <_task_create_at+0xc4>
    fd72:	e026      	b.n	fdc2 <_task_create_at+0x10e>
    fd74:	4281      	cmp	r1, r0
    fd76:	d024      	beq.n	fdc2 <_task_create_at+0x10e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2935
                        (task_template_ptr->TASK_TEMPLATE_INDEX != template_index) )
        {
            ++task_template_ptr;
    fd78:	341c      	adds	r4, #28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2932
        create_parameter = parameter;

        /* Search all the local task templates for one whose index matches */
        task_template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;

        while ( task_template_ptr->TASK_TEMPLATE_INDEX &&
    fd7a:	6820      	ldr	r0, [r4, #0]
    fd7c:	2800      	cmp	r0, #0
    fd7e:	d1f9      	bne.n	fd74 <_task_create_at+0xc0>
_task_set_error():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2835
    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_task_set_error, new_error_code);

    /* get the old value */
    if (kernel_data->IN_ISR)
    fd80:	8b2b      	ldrh	r3, [r5, #24]
    fd82:	2b00      	cmp	r3, #0
    fd84:	d036      	beq.n	fdf4 <_task_create_at+0x140>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2837
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
    fd86:	6b6b      	ldr	r3, [r5, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
    fd88:	68de      	ldr	r6, [r3, #12]
    fd8a:	2e00      	cmp	r6, #0
    fd8c:	d101      	bne.n	fd92 <_task_create_at+0xde>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2848
    {
        if (kernel_data->IN_ISR)
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
    fd8e:	2210      	movs	r2, #16
    fd90:	60da      	str	r2, [r3, #12]
_task_create_at():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:744
        _INT_ENABLE();
        _CHECK_RUN_SCHEDULER(); /* Let a higher priority task run */
    }
    else
    {
        result = MQX_NULL_TASK_ID;
    fd92:	2700      	movs	r7, #0
    fd94:	46b8      	mov	r8, r7
    fd96:	e7d9      	b.n	fd4c <_task_create_at+0x98>
_task_set_error():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2835
    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_task_set_error, new_error_code);

    /* get the old value */
    if (kernel_data->IN_ISR)
    fd98:	8b2b      	ldrh	r3, [r5, #24]
    fd9a:	2b00      	cmp	r3, #0
    fd9c:	d007      	beq.n	fdae <_task_create_at+0xfa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2837
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
    fd9e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
    fda0:	68df      	ldr	r7, [r3, #12]
    fda2:	2f00      	cmp	r7, #0
    fda4:	d109      	bne.n	fdba <_task_create_at+0x106>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2848
    {
        if (kernel_data->IN_ISR)
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
    fda6:	2213      	movs	r2, #19
    fda8:	60da      	str	r2, [r3, #12]
_task_create_at():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:729
    if (processor_number != 0)
    {
        _task_set_error(MQX_INVALID_PROCESSOR_NUMBER);

        _KLOGX3(KLOG_task_create_at, MQX_NULL_TASK_ID, MQX_INVALID_PROCESSOR_NUMBER);
        return MQX_NULL_TASK_ID;
    fdaa:	2000      	movs	r0, #0
    fdac:	e7d3      	b.n	fd56 <_task_create_at+0xa2>
_task_set_error():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2841
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
    }
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
    fdae:	69eb      	ldr	r3, [r5, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
    fdb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    fdb2:	2a00      	cmp	r2, #0
    fdb4:	d101      	bne.n	fdba <_task_create_at+0x106>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2852
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
        }
        else
        {
            kernel_data->ACTIVE_PTR->TASK_ERROR_CODE = new_error_code;
    fdb6:	2213      	movs	r2, #19
    fdb8:	659a      	str	r2, [r3, #88]	; 0x58
_task_create_at():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:729
    if (processor_number != 0)
    {
        _task_set_error(MQX_INVALID_PROCESSOR_NUMBER);

        _KLOGX3(KLOG_task_create_at, MQX_NULL_TASK_ID, MQX_INVALID_PROCESSOR_NUMBER);
        return MQX_NULL_TASK_ID;
    fdba:	2000      	movs	r0, #0
    fdbc:	e7cb      	b.n	fd56 <_task_create_at+0xa2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:739 (discriminator 1)
    if (td_ptr != NULL)
    {
        result = td_ptr->TASK_ID;
        _INT_DISABLE();
        _task_ready_internal(td_ptr);
        _INT_ENABLE();
    fdbe:	b662      	cpsie	i
    fdc0:	e7c2      	b.n	fd48 <_task_create_at+0x94>
_task_build_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2926

    _GET_KERNEL_DATA(kernel_data);

    if ( template_index )
    {
        dynamic = FALSE;
    fdc2:	2200      	movs	r2, #0
    fdc4:	4692      	mov	sl, r2
    fdc6:	e78a      	b.n	fcde <_task_create_at+0x2a>
_task_set_error():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2835
    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_task_set_error, new_error_code);

    /* get the old value */
    if (kernel_data->IN_ISR)
    fdc8:	8b2b      	ldrh	r3, [r5, #24]
    fdca:	2b00      	cmp	r3, #0
    fdcc:	d00a      	beq.n	fde4 <_task_create_at+0x130>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2837
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
    fdce:	6b6b      	ldr	r3, [r5, #52]	; 0x34
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
    fdd0:	68da      	ldr	r2, [r3, #12]
    fdd2:	2a00      	cmp	r2, #0
    fdd4:	d1f1      	bne.n	fdba <_task_create_at+0x106>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2848
    {
        if (kernel_data->IN_ISR)
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
    fdd6:	2215      	movs	r2, #21
    fdd8:	60da      	str	r2, [r3, #12]
_task_create_at():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:719
    if (template_index & SYSTEM_TASK_FLAG)
    {
        _task_set_error(MQX_INVALID_TEMPLATE_INDEX);
        _KLOGX3(KLOG_task_create_at, MQX_NULL_TASK_ID,
                        MQX_INVALID_TEMPLATE_INDEX);
        return MQX_NULL_TASK_ID;
    fdda:	2000      	movs	r0, #0
    fddc:	e7bb      	b.n	fd56 <_task_create_at+0xa2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:744
        _INT_ENABLE();
        _CHECK_RUN_SCHEDULER(); /* Let a higher priority task run */
    }
    else
    {
        result = MQX_NULL_TASK_ID;
    fdde:	2600      	movs	r6, #0
    fde0:	46b0      	mov	r8, r6
    fde2:	e7b3      	b.n	fd4c <_task_create_at+0x98>
_task_set_error():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2841
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
    }
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
    fde4:	69eb      	ldr	r3, [r5, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
    fde6:	6d9e      	ldr	r6, [r3, #88]	; 0x58
    fde8:	2e00      	cmp	r6, #0
    fdea:	d1e6      	bne.n	fdba <_task_create_at+0x106>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2852
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
        }
        else
        {
            kernel_data->ACTIVE_PTR->TASK_ERROR_CODE = new_error_code;
    fdec:	2215      	movs	r2, #21
    fdee:	659a      	str	r2, [r3, #88]	; 0x58
_task_create_at():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:719
    if (template_index & SYSTEM_TASK_FLAG)
    {
        _task_set_error(MQX_INVALID_TEMPLATE_INDEX);
        _KLOGX3(KLOG_task_create_at, MQX_NULL_TASK_ID,
                        MQX_INVALID_TEMPLATE_INDEX);
        return MQX_NULL_TASK_ID;
    fdf0:	2000      	movs	r0, #0
    fdf2:	e7b0      	b.n	fd56 <_task_create_at+0xa2>
_task_set_error():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2841
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
    }
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
    fdf4:	69eb      	ldr	r3, [r5, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
    fdf6:	6d9f      	ldr	r7, [r3, #88]	; 0x58
    fdf8:	2f00      	cmp	r7, #0
    fdfa:	d1ca      	bne.n	fd92 <_task_create_at+0xde>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2852
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
        }
        else
        {
            kernel_data->ACTIVE_PTR->TASK_ERROR_CODE = new_error_code;
    fdfc:	2210      	movs	r2, #16
    fdfe:	659a      	str	r2, [r3, #88]	; 0x58
    fe00:	e7c7      	b.n	fd92 <_task_create_at+0xde>
    fe02:	46c0      	nop			; (mov r8, r8)
    fe04:	1fffe000 	.word	0x1fffe000
    fe08:	20000454 	.word	0x20000454

0000fe0c <_task_fill_stack_internal>:
_task_fill_stack_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3339
    _mqx_uint_ptr addr_ptr,
    _mqx_uint     size
)
{ /* Body */

    size = (size/sizeof(_mqx_uint)) + 1;  /* Calculate # _mqx_uints */
    fe0c:	0889      	lsrs	r1, r1, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3340
    while (--size)
    fe0e:	d004      	beq.n	fe1a <_task_fill_stack_internal+0xe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3342
    {
        *addr_ptr++ = MQX_STACK_MONITOR_VALUE;
    fe10:	4b02      	ldr	r3, [pc, #8]	; (fe1c <_task_fill_stack_internal+0x10>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3340
    _mqx_uint     size
)
{ /* Body */

    size = (size/sizeof(_mqx_uint)) + 1;  /* Calculate # _mqx_uints */
    while (--size)
    fe12:	3901      	subs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3342
    {
        *addr_ptr++ = MQX_STACK_MONITOR_VALUE;
    fe14:	c008      	stmia	r0!, {r3}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3340
    _mqx_uint     size
)
{ /* Body */

    size = (size/sizeof(_mqx_uint)) + 1;  /* Calculate # _mqx_uints */
    while (--size)
    fe16:	2900      	cmp	r1, #0
    fe18:	d1fb      	bne.n	fe12 <_task_fill_stack_internal+0x6>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3345
    {
        *addr_ptr++ = MQX_STACK_MONITOR_VALUE;
    } /* Endwhile */

} /* Endbody */
    fe1a:	4770      	bx	lr
    fe1c:	7374616b 	.word	0x7374616b

0000fe20 <_task_ready_internal>:
_task_ready_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3368
{ /* Body */
    KERNEL_DATA_STRUCT_PTR       kernel_data;
    register READY_Q_STRUCT_PTR  ready_q_ptr;
    register TD_STRUCT_PTR       old_tail_ptr;

    _GET_KERNEL_DATA(kernel_data);
    fe20:	4b08      	ldr	r3, [pc, #32]	; (fe44 <_task_ready_internal+0x24>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3363
 */
void _task_ready_internal
(
    TD_STRUCT_PTR td_ptr
)
{ /* Body */
    fe22:	b510      	push	{r4, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3368
    KERNEL_DATA_STRUCT_PTR       kernel_data;
    register READY_Q_STRUCT_PTR  ready_q_ptr;
    register TD_STRUCT_PTR       old_tail_ptr;

    _GET_KERNEL_DATA(kernel_data);
    fe24:	6819      	ldr	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3372

    _KLOGE2(KLOG_task_ready, td_ptr);

    ready_q_ptr   = td_ptr->MY_QUEUE;
    fe26:	69c3      	ldr	r3, [r0, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3380
     * Ready queues are ALWAYS allocated with higher priority queues in higher
     * memory, thus we need to update the CURRENT_READY_Q field (which
     * always points to the highest priority ready queue with a task
     * on it.
     */
    if ( (uchar_ptr)ready_q_ptr > (uchar_ptr)(kernel_data->CURRENT_READY_Q) )
    fe28:	6a4c      	ldr	r4, [r1, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3373
    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_task_ready, td_ptr);

    ready_q_ptr   = td_ptr->MY_QUEUE;
    old_tail_ptr  = ready_q_ptr->TAIL_READY_Q;
    fe2a:	685a      	ldr	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3380
     * Ready queues are ALWAYS allocated with higher priority queues in higher
     * memory, thus we need to update the CURRENT_READY_Q field (which
     * always points to the highest priority ready queue with a task
     * on it.
     */
    if ( (uchar_ptr)ready_q_ptr > (uchar_ptr)(kernel_data->CURRENT_READY_Q) )
    fe2c:	42a3      	cmp	r3, r4
    fe2e:	d900      	bls.n	fe32 <_task_ready_internal+0x12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3382
    {
        kernel_data->CURRENT_READY_Q = ready_q_ptr;
    fe30:	624b      	str	r3, [r1, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3385
    } /* Endif */

    td_ptr->STATE              = READY;
    fe32:	2102      	movs	r1, #2
    fe34:	6081      	str	r1, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3387
    td_ptr->TD_PREV            = old_tail_ptr;
    td_ptr->TD_NEXT            = old_tail_ptr->TD_NEXT;
    fe36:	6811      	ldr	r1, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3386
    {
        kernel_data->CURRENT_READY_Q = ready_q_ptr;
    } /* Endif */

    td_ptr->STATE              = READY;
    td_ptr->TD_PREV            = old_tail_ptr;
    fe38:	6042      	str	r2, [r0, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3387
    td_ptr->TD_NEXT            = old_tail_ptr->TD_NEXT;
    fe3a:	6001      	str	r1, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3388
    old_tail_ptr->TD_NEXT      = td_ptr;
    fe3c:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3389
    ready_q_ptr->TAIL_READY_Q  = td_ptr;
    fe3e:	6058      	str	r0, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3397
    MQX_ZERO_TICK_STRUCT(&td_ptr->CURRENT_TIME_SLICE);
#endif
    /* END SPR */
    _KLOGX1(KLOG_task_ready);

} /* Endbody */
    fe40:	bd10      	pop	{r4, pc}
    fe42:	46c0      	nop			; (mov r8, r8)
    fe44:	1fffe000 	.word	0x1fffe000

0000fe48 <_task_set_error_td_internal>:
_task_set_error_td_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3660
_mqx_uint _task_set_error_td_internal
(
    TD_STRUCT_PTR td_ptr,
    _mqx_uint new_error_code
)
{ /* Body */
    fe48:	1c03      	adds	r3, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3670
    _KLOGM(_GET_KERNEL_DATA(kernel_data);)

    _KLOGE2(KLOG_task_set_error, new_error_code);

    /* get the old value */
    old_error_code = td_ptr->TASK_ERROR_CODE;
    fe4a:	6d80      	ldr	r0, [r0, #88]	; 0x58
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3671
    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
    fe4c:	2900      	cmp	r1, #0
    fe4e:	d001      	beq.n	fe54 <_task_set_error_td_internal+0xc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3671 (discriminator 1)
    fe50:	2800      	cmp	r0, #0
    fe52:	d100      	bne.n	fe56 <_task_set_error_td_internal+0xe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3673
    {
        td_ptr->TASK_ERROR_CODE = new_error_code;
    fe54:	6599      	str	r1, [r3, #88]	; 0x58
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3682
    return( old_error_code );
#else
    return MQX_OK;
#endif

} /* Endbody */
    fe56:	4770      	bx	lr

0000fe58 <_time_delay_for>:
_time_delay_for():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:88
 */
void _time_delay_for
(
    register MQX_TICK_STRUCT_PTR ticks
)
{ /* Body */
    fe58:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:92
    register KERNEL_DATA_STRUCT_PTR kernel_data;
    register TD_STRUCT_PTR td_ptr;

    _GET_KERNEL_DATA(kernel_data);
    fe5a:	4d2f      	ldr	r5, [pc, #188]	; (ff18 <_time_delay_for+0xc0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:88
 */
void _time_delay_for
(
    register MQX_TICK_STRUCT_PTR ticks
)
{ /* Body */
    fe5c:	4647      	mov	r7, r8
    fe5e:	b480      	push	{r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:92
    register KERNEL_DATA_STRUCT_PTR kernel_data;
    register TD_STRUCT_PTR td_ptr;

    _GET_KERNEL_DATA(kernel_data);
    fe60:	682e      	ldr	r6, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:97

    _KLOGE2(KLOG_time_delay_for, ticks);

#if MQX_CHECK_ERRORS
    if (ticks == NULL) {
    fe62:	2800      	cmp	r0, #0
    fe64:	d054      	beq.n	ff10 <_time_delay_for+0xb8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:104
        _KLOGX2(KLOG_time_delay_for, MQX_INVALID_PARAMETER);
        return;
    } /* Endif */
#endif

    td_ptr = kernel_data->ACTIVE_PTR;
    fe66:	69f4      	ldr	r4, [r6, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:106

    _INT_DISABLE();
    fe68:	6d63      	ldr	r3, [r4, #84]	; 0x54
    fe6a:	2b00      	cmp	r3, #0
    fe6c:	d046      	beq.n	fefc <_time_delay_for+0xa4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:109 (discriminator 2)

    /* Calculate time to wake up the task */
    PSP_ADD_TICKS(ticks, &kernel_data->TIME, &td_ptr->TIMEOUT);
    fe6e:	228e      	movs	r2, #142	; 0x8e
    fe70:	0052      	lsls	r2, r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:106 (discriminator 2)
    } /* Endif */
#endif

    td_ptr = kernel_data->ACTIVE_PTR;

    _INT_DISABLE();
    fe72:	3301      	adds	r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:109 (discriminator 2)

    /* Calculate time to wake up the task */
    PSP_ADD_TICKS(ticks, &kernel_data->TIME, &td_ptr->TIMEOUT);
    fe74:	18b1      	adds	r1, r6, r2
    fe76:	1c22      	adds	r2, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:106 (discriminator 2)
    } /* Endif */
#endif

    td_ptr = kernel_data->ACTIVE_PTR;

    _INT_DISABLE();
    fe78:	6563      	str	r3, [r4, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:109 (discriminator 2)

    /* Calculate time to wake up the task */
    PSP_ADD_TICKS(ticks, &kernel_data->TIME, &td_ptr->TIMEOUT);
    fe7a:	3244      	adds	r2, #68	; 0x44
    fe7c:	f7fe ff3c 	bl	ecf8 <_psp_add_ticks>
_time_delay_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:145 (discriminator 2)
   register TD_STRUCT_PTR           td2_ptr;
   register TD_STRUCT_PTR           tdprev_ptr;
   register _mqx_uint               count;
   register _mqx_int                result;

   _GET_KERNEL_DATA(kernel_data);
    fe80:	682b      	ldr	r3, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:148 (discriminator 2)

   /* Remove task from ready to run queue */
   tdprev_ptr = (TD_STRUCT_PTR)((pointer)&kernel_data->TIMEOUT_QUEUE);
    fe82:	229a      	movs	r2, #154	; 0x9a
    fe84:	0052      	lsls	r2, r2, #1
    fe86:	189f      	adds	r7, r3, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:149 (discriminator 2)
   if ( _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE) ) {
    fe88:	893a      	ldrh	r2, [r7, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:148 (discriminator 2)
   register _mqx_int                result;

   _GET_KERNEL_DATA(kernel_data);

   /* Remove task from ready to run queue */
   tdprev_ptr = (TD_STRUCT_PTR)((pointer)&kernel_data->TIMEOUT_QUEUE);
    fe8a:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:149 (discriminator 2)
   if ( _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE) ) {
    fe8c:	4694      	mov	ip, r2
    fe8e:	2a00      	cmp	r2, #0
    fe90:	d015      	beq.n	febe <_time_delay_for+0x66>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:152

      /* Perform insertion sort by time */
      td2_ptr    = (TD_STRUCT_PTR)((pointer)kernel_data->TIMEOUT_QUEUE.NEXT);
    fe92:	229a      	movs	r2, #154	; 0x9a
    fe94:	0052      	lsls	r2, r2, #1
    fe96:	589b      	ldr	r3, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:158

      /* SPR P171-0023-01 use pre-decrement on while loop */
      count      = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE) + 1;
      while ( --count ) {
      /* END SPR */
         result = PSP_CMP_TICKS(&td2_ptr->TIMEOUT, &td_ptr->TIMEOUT);
    fe98:	6c62      	ldr	r2, [r4, #68]	; 0x44
    fe9a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    fe9c:	4690      	mov	r8, r2
    fe9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:156
      /* Perform insertion sort by time */
      td2_ptr    = (TD_STRUCT_PTR)((pointer)kernel_data->TIMEOUT_QUEUE.NEXT);

      /* SPR P171-0023-01 use pre-decrement on while loop */
      count      = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE) + 1;
      while ( --count ) {
    fea0:	4665      	mov	r5, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:158
      /* END SPR */
         result = PSP_CMP_TICKS(&td2_ptr->TIMEOUT, &td_ptr->TIMEOUT);
    fea2:	428a      	cmp	r2, r1
    fea4:	d22c      	bcs.n	ff00 <_time_delay_for+0xa8>
    fea6:	1c18      	adds	r0, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:156
      /* Perform insertion sort by time */
      td2_ptr    = (TD_STRUCT_PTR)((pointer)kernel_data->TIMEOUT_QUEUE.NEXT);

      /* SPR P171-0023-01 use pre-decrement on while loop */
      count      = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE) + 1;
      while ( --count ) {
    fea8:	3d01      	subs	r5, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:165
            /* Enqueue before td2_ptr */
            break;
         } /* Endif */

         tdprev_ptr = td2_ptr;
         td2_ptr    = td2_ptr->TD_NEXT;
    feaa:	6802      	ldr	r2, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:156
      /* Perform insertion sort by time */
      td2_ptr    = (TD_STRUCT_PTR)((pointer)kernel_data->TIMEOUT_QUEUE.NEXT);

      /* SPR P171-0023-01 use pre-decrement on while loop */
      count      = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE) + 1;
      while ( --count ) {
    feac:	2d00      	cmp	r5, #0
    feae:	d006      	beq.n	febe <_time_delay_for+0x66>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:158
      /* END SPR */
         result = PSP_CMP_TICKS(&td2_ptr->TIMEOUT, &td_ptr->TIMEOUT);
    feb0:	6c93      	ldr	r3, [r2, #72]	; 0x48
    feb2:	428b      	cmp	r3, r1
    feb4:	d32a      	bcc.n	ff0c <_time_delay_for+0xb4>
    feb6:	d102      	bne.n	febe <_time_delay_for+0x66>
    feb8:	6c53      	ldr	r3, [r2, #68]	; 0x44
    feba:	4543      	cmp	r3, r8
    febc:	d326      	bcc.n	ff0c <_time_delay_for+0xb4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:171
      } /* Endwhile */

   } /* Endif */

   /* Remove from ready queue */
   _QUEUE_UNLINK(td_ptr);
    febe:	6862      	ldr	r2, [r4, #4]
    fec0:	6823      	ldr	r3, [r4, #0]
    fec2:	6013      	str	r3, [r2, #0]
    fec4:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:174

   /* Insert into timeout queue */
   _QUEUE_INSERT(&kernel_data->TIMEOUT_QUEUE,tdprev_ptr,td_ptr);
    fec6:	6803      	ldr	r3, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:176

   td_ptr->STATE |= IS_ON_TIMEOUT_Q;
    fec8:	68a2      	ldr	r2, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:174

   /* Remove from ready queue */
   _QUEUE_UNLINK(td_ptr);

   /* Insert into timeout queue */
   _QUEUE_INSERT(&kernel_data->TIMEOUT_QUEUE,tdprev_ptr,td_ptr);
    feca:	6023      	str	r3, [r4, #0]
    fecc:	6004      	str	r4, [r0, #0]
    fece:	6060      	str	r0, [r4, #4]
    fed0:	605c      	str	r4, [r3, #4]
    fed2:	4663      	mov	r3, ip
    fed4:	3301      	adds	r3, #1
    fed6:	813b      	strh	r3, [r7, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:176

   td_ptr->STATE |= IS_ON_TIMEOUT_Q;
    fed8:	2380      	movs	r3, #128	; 0x80
    feda:	005b      	lsls	r3, r3, #1
    fedc:	4313      	orrs	r3, r2
    fede:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:178

   _sched_execute_scheduler_internal();
    fee0:	f003 fd46 	bl	13970 <_sched_execute_scheduler_internal>
_time_delay_for():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:113
    /* Calculate time to wake up the task */
    PSP_ADD_TICKS(ticks, &kernel_data->TIME, &td_ptr->TIMEOUT);

    _time_delay_internal(td_ptr);

    _INT_ENABLE();
    fee4:	69f3      	ldr	r3, [r6, #28]
    fee6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    fee8:	2a00      	cmp	r2, #0
    feea:	d004      	beq.n	fef6 <_time_delay_for+0x9e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:113 (discriminator 1)
    feec:	3a01      	subs	r2, #1
    feee:	655a      	str	r2, [r3, #84]	; 0x54
    fef0:	2a00      	cmp	r2, #0
    fef2:	d100      	bne.n	fef6 <_time_delay_for+0x9e>
    fef4:	b662      	cpsie	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:117

    _KLOGX1( KLOG_time_delay_for);

} /* Endbody */
    fef6:	bc04      	pop	{r2}
    fef8:	4690      	mov	r8, r2
    fefa:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:106 (discriminator 1)
    } /* Endif */
#endif

    td_ptr = kernel_data->ACTIVE_PTR;

    _INT_DISABLE();
    fefc:	b672      	cpsid	i
    fefe:	e7b6      	b.n	fe6e <_time_delay_for+0x16>
_time_delay_internal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:158

      /* SPR P171-0023-01 use pre-decrement on while loop */
      count      = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE) + 1;
      while ( --count ) {
      /* END SPR */
         result = PSP_CMP_TICKS(&td2_ptr->TIMEOUT, &td_ptr->TIMEOUT);
    ff00:	428a      	cmp	r2, r1
    ff02:	d1dc      	bne.n	febe <_time_delay_for+0x66>
    ff04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    ff06:	4542      	cmp	r2, r8
    ff08:	d3cd      	bcc.n	fea6 <_time_delay_for+0x4e>
    ff0a:	e7d8      	b.n	febe <_time_delay_for+0x66>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:165
            /* Enqueue before td2_ptr */
            break;
         } /* Endif */

         tdprev_ptr = td2_ptr;
         td2_ptr    = td2_ptr->TD_NEXT;
    ff0c:	1c10      	adds	r0, r2, #0
    ff0e:	e7cb      	b.n	fea8 <_time_delay_for+0x50>
_time_delay_for():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:98

    _KLOGE2(KLOG_time_delay_for, ticks);

#if MQX_CHECK_ERRORS
    if (ticks == NULL) {
        _task_set_error(MQX_INVALID_PARAMETER);
    ff10:	200c      	movs	r0, #12
    ff12:	f7ff fd6f 	bl	f9f4 <_task_set_error>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:100
        _KLOGX2(KLOG_time_delay_for, MQX_INVALID_PARAMETER);
        return;
    ff16:	e7ee      	b.n	fef6 <_time_delay_for+0x9e>
    ff18:	1fffe000 	.word	0x1fffe000

0000ff1c <_time_notify_kernel>:
_time_notify_kernel():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:823
 */
void _time_notify_kernel
(
    void
)
{ /* Body */
    ff1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:830
    register TD_STRUCT_PTR td_ptr;
    register TD_STRUCT_PTR next_td_ptr;
    register _mqx_uint count;
    register _mqx_int result;

    _GET_KERNEL_DATA(kernel_data);
    ff1e:	4b4a      	ldr	r3, [pc, #296]	; (10048 <_time_notify_kernel+0x12c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:823
 */
void _time_notify_kernel
(
    void
)
{ /* Body */
    ff20:	465f      	mov	r7, fp
    ff22:	4656      	mov	r6, sl
    ff24:	464d      	mov	r5, r9
    ff26:	4644      	mov	r4, r8
    ff28:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:835
    _GET_KERNEL_DATA(kernel_data);

    /*
     * Update the current time.
     */
    PSP_INC_TICKS(&kernel_data->TIME);
    ff2a:	208e      	movs	r0, #142	; 0x8e
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:830
    register TD_STRUCT_PTR td_ptr;
    register TD_STRUCT_PTR next_td_ptr;
    register _mqx_uint count;
    register _mqx_int result;

    _GET_KERNEL_DATA(kernel_data);
    ff2c:	681c      	ldr	r4, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:835

    /*
     * Update the current time.
     */
    PSP_INC_TICKS(&kernel_data->TIME);
    ff2e:	0040      	lsls	r0, r0, #1
    ff30:	1825      	adds	r5, r4, r0
    ff32:	2201      	movs	r2, #1
    ff34:	2300      	movs	r3, #0
    ff36:	682e      	ldr	r6, [r5, #0]
    ff38:	686f      	ldr	r7, [r5, #4]
    ff3a:	1992      	adds	r2, r2, r6
    ff3c:	417b      	adcs	r3, r7
    ff3e:	602a      	str	r2, [r5, #0]
    ff40:	606b      	str	r3, [r5, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:837

    _INT_DISABLE();
    ff42:	69e3      	ldr	r3, [r4, #28]
    ff44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    ff46:	2a00      	cmp	r2, #0
    ff48:	d100      	bne.n	ff4c <_time_notify_kernel+0x30>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:837 (discriminator 1)
    ff4a:	b672      	cpsid	i
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:837 (discriminator 2)
    ff4c:	3201      	adds	r2, #1
    ff4e:	655a      	str	r2, [r3, #84]	; 0x54
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:839 (discriminator 2)

    if (kernel_data->GET_HWTICKS) {
    ff50:	23aa      	movs	r3, #170	; 0xaa
    ff52:	005b      	lsls	r3, r3, #1
    ff54:	58e3      	ldr	r3, [r4, r3]
    ff56:	2b00      	cmp	r3, #0
    ff58:	d006      	beq.n	ff68 <_time_notify_kernel+0x4c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:845
        /* The hardware clock may have counted passed it's reference
         * and have an interrupt pending.  Thus, HW_TICKS may exceed
         * kernel_data->HW_TICKS_PER_TICK and this tick_ptr may need
         * normalizing.  This is done in a moment.
         */
        kernel_data->TIME.HW_TICKS = (*kernel_data->GET_HWTICKS)(kernel_data->GET_HWTICKS_PARAM);
    ff5a:	22ac      	movs	r2, #172	; 0xac
    ff5c:	0052      	lsls	r2, r2, #1
    ff5e:	58a0      	ldr	r0, [r4, r2]
    ff60:	4798      	blx	r3
    ff62:	2392      	movs	r3, #146	; 0x92
    ff64:	005b      	lsls	r3, r3, #1
    ff66:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:858

    /*
     * Check for tasks on the timeout queue, and wake the appropriate
     * ones up.  The timeout queue is a time-priority queue.
     */
    count = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE);
    ff68:	279a      	movs	r7, #154	; 0x9a
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:852

    /* The tick_ptr->HW_TICKS value might exceed the
     * kernel_data->HW_TICKS_PER_TICK and need to be
     * normalized for the PSP.
     */
    PSP_NORMALIZE_TICKS(&kernel_data->TIME);
    ff6a:	1c28      	adds	r0, r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:858

    /*
     * Check for tasks on the timeout queue, and wake the appropriate
     * ones up.  The timeout queue is a time-priority queue.
     */
    count = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE);
    ff6c:	007f      	lsls	r7, r7, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:852

    /* The tick_ptr->HW_TICKS value might exceed the
     * kernel_data->HW_TICKS_PER_TICK and need to be
     * normalized for the PSP.
     */
    PSP_NORMALIZE_TICKS(&kernel_data->TIME);
    ff6e:	f7fe fee3 	bl	ed38 <_psp_normalize_ticks>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:858

    /*
     * Check for tasks on the timeout queue, and wake the appropriate
     * ones up.  The timeout queue is a time-priority queue.
     */
    count = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE);
    ff72:	19e3      	adds	r3, r4, r7
    ff74:	8919      	ldrh	r1, [r3, #8]
    ff76:	1e08      	subs	r0, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:859
    if (count) {
    ff78:	d009      	beq.n	ff8e <_time_notify_kernel+0x72>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:860
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
    ff7a:	239a      	movs	r3, #154	; 0x9a
    ff7c:	005b      	lsls	r3, r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:864
        ++count;
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
    ff7e:	682e      	ldr	r6, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:860
     * Check for tasks on the timeout queue, and wake the appropriate
     * ones up.  The timeout queue is a time-priority queue.
     */
    count = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE);
    if (count) {
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
    ff80:	58e3      	ldr	r3, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:864
        ++count;
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
    ff82:	46b1      	mov	r9, r6
    ff84:	686d      	ldr	r5, [r5, #4]
    ff86:	6c9e      	ldr	r6, [r3, #72]	; 0x48
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:863
    count = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE);
    if (count) {
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
        ++count;
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
    ff88:	681a      	ldr	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:864
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
    ff8a:	42ae      	cmp	r6, r5
    ff8c:	d915      	bls.n	ffba <_time_notify_kernel+0x9e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:900
            } /* Endif */
        } /* Endif */
    } /* Endif */
#endif

    _INT_ENABLE();
    ff8e:	69e3      	ldr	r3, [r4, #28]
    ff90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    ff92:	2a00      	cmp	r2, #0
    ff94:	d003      	beq.n	ff9e <_time_notify_kernel+0x82>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:900 (discriminator 1)
    ff96:	3a01      	subs	r2, #1
    ff98:	655a      	str	r2, [r3, #84]	; 0x54
    ff9a:	2a00      	cmp	r2, #0
    ff9c:	d00b      	beq.n	ffb6 <_time_notify_kernel+0x9a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:910
    }/* Endif */
#endif

#if MQX_USE_LWTIMER
    /* If the lwtimer needs servicing, call its ISR function */
    if (kernel_data->LWTIMER_ISR != NULL) {
    ff9e:	2394      	movs	r3, #148	; 0x94
    ffa0:	009b      	lsls	r3, r3, #2
    ffa2:	58e3      	ldr	r3, [r4, r3]
    ffa4:	2b00      	cmp	r3, #0
    ffa6:	d000      	beq.n	ffaa <_time_notify_kernel+0x8e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:911
        (*kernel_data->LWTIMER_ISR)();
    ffa8:	4798      	blx	r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:915
    }/* Endif */
#endif

} /* Endbody */
    ffaa:	bc3c      	pop	{r2, r3, r4, r5}
    ffac:	4690      	mov	r8, r2
    ffae:	4699      	mov	r9, r3
    ffb0:	46a2      	mov	sl, r4
    ffb2:	46ab      	mov	fp, r5
    ffb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:900 (discriminator 1)
            } /* Endif */
        } /* Endif */
    } /* Endif */
#endif

    _INT_ENABLE();
    ffb6:	b662      	cpsie	i
    ffb8:	e7f1      	b.n	ff9e <_time_notify_kernel+0x82>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:864
    if (count) {
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
        ++count;
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
    ffba:	42ae      	cmp	r6, r5
    ffbc:	d040      	beq.n	10040 <_time_notify_kernel+0x124>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:869
            if (result >= 0) {
                --kernel_data->TIMEOUT_QUEUE.SIZE;
                _QUEUE_UNLINK(td_ptr);
                td_ptr->STATE &= ~IS_ON_TIMEOUT_Q;
                if (td_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
    ffbe:	2780      	movs	r7, #128	; 0x80
    ffc0:	00ff      	lsls	r7, r7, #3
    ffc2:	46bc      	mov	ip, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:868
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
            if (result >= 0) {
                --kernel_data->TIMEOUT_QUEUE.SIZE;
                _QUEUE_UNLINK(td_ptr);
                td_ptr->STATE &= ~IS_ON_TIMEOUT_Q;
    ffc4:	4f21      	ldr	r7, [pc, #132]	; (1004c <_time_notify_kernel+0x130>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:870
                if (td_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
                    td_ptr->STATE &= ~TD_IS_ON_AUX_QUEUE;
    ffc6:	4e22      	ldr	r6, [pc, #136]	; (10050 <_time_notify_kernel+0x134>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:868
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
            if (result >= 0) {
                --kernel_data->TIMEOUT_QUEUE.SIZE;
                _QUEUE_UNLINK(td_ptr);
                td_ptr->STATE &= ~IS_ON_TIMEOUT_Q;
    ffc8:	46ba      	mov	sl, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:873
                if (td_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
                    td_ptr->STATE &= ~TD_IS_ON_AUX_QUEUE;
                    _QUEUE_REMOVE(td_ptr->INFO, &td_ptr->AUX_QUEUE);
                } /* Endif */
                _TASK_READY(td_ptr, kernel_data);
    ffca:	2702      	movs	r7, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:870
            if (result >= 0) {
                --kernel_data->TIMEOUT_QUEUE.SIZE;
                _QUEUE_UNLINK(td_ptr);
                td_ptr->STATE &= ~IS_ON_TIMEOUT_Q;
                if (td_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
                    td_ptr->STATE &= ~TD_IS_ON_AUX_QUEUE;
    ffcc:	46b0      	mov	r8, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:873
                    _QUEUE_REMOVE(td_ptr->INFO, &td_ptr->AUX_QUEUE);
                } /* Endif */
                _TASK_READY(td_ptr, kernel_data);
    ffce:	46bb      	mov	fp, r7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:866
        ++count;
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
            if (result >= 0) {
                --kernel_data->TIMEOUT_QUEUE.SIZE;
    ffd0:	269e      	movs	r6, #158	; 0x9e
    ffd2:	3901      	subs	r1, #1
    ffd4:	0076      	lsls	r6, r6, #1
    ffd6:	53a1      	strh	r1, [r4, r6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:867
                _QUEUE_UNLINK(td_ptr);
    ffd8:	6859      	ldr	r1, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:869
                td_ptr->STATE &= ~IS_ON_TIMEOUT_Q;
                if (td_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
    ffda:	4667      	mov	r7, ip
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:867
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
            if (result >= 0) {
                --kernel_data->TIMEOUT_QUEUE.SIZE;
                _QUEUE_UNLINK(td_ptr);
    ffdc:	600a      	str	r2, [r1, #0]
    ffde:	6051      	str	r1, [r2, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:868
                td_ptr->STATE &= ~IS_ON_TIMEOUT_Q;
    ffe0:	6899      	ldr	r1, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:869
                if (td_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
    ffe2:	4239      	tst	r1, r7
    ffe4:	d120      	bne.n	10028 <_time_notify_kernel+0x10c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:868
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
            if (result >= 0) {
                --kernel_data->TIMEOUT_QUEUE.SIZE;
                _QUEUE_UNLINK(td_ptr);
                td_ptr->STATE &= ~IS_ON_TIMEOUT_Q;
    ffe6:	4656      	mov	r6, sl
    ffe8:	4031      	ands	r1, r6
    ffea:	6099      	str	r1, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:873
                if (td_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
                    td_ptr->STATE &= ~TD_IS_ON_AUX_QUEUE;
                    _QUEUE_REMOVE(td_ptr->INFO, &td_ptr->AUX_QUEUE);
                } /* Endif */
                _TASK_READY(td_ptr, kernel_data);
    ffec:	69d9      	ldr	r1, [r3, #28]
    ffee:	6a67      	ldr	r7, [r4, #36]	; 0x24
    fff0:	42b9      	cmp	r1, r7
    fff2:	d900      	bls.n	fff6 <_time_notify_kernel+0xda>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:873 (discriminator 1)
    fff4:	6261      	str	r1, [r4, #36]	; 0x24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:873 (discriminator 2)
    fff6:	684f      	ldr	r7, [r1, #4]
    fff8:	465e      	mov	r6, fp
    fffa:	609e      	str	r6, [r3, #8]
    fffc:	683e      	ldr	r6, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:862 (discriminator 2)
     */
    count = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE);
    if (count) {
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
        ++count;
        while (--count) {
    fffe:	3801      	subs	r0, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:873 (discriminator 2)
                td_ptr->STATE &= ~IS_ON_TIMEOUT_Q;
                if (td_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
                    td_ptr->STATE &= ~TD_IS_ON_AUX_QUEUE;
                    _QUEUE_REMOVE(td_ptr->INFO, &td_ptr->AUX_QUEUE);
                } /* Endif */
                _TASK_READY(td_ptr, kernel_data);
   10000:	605f      	str	r7, [r3, #4]
   10002:	601e      	str	r6, [r3, #0]
   10004:	603b      	str	r3, [r7, #0]
   10006:	604b      	str	r3, [r1, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:862 (discriminator 2)
     */
    count = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE);
    if (count) {
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
        ++count;
        while (--count) {
   10008:	2800      	cmp	r0, #0
   1000a:	d0c0      	beq.n	ff8e <_time_notify_kernel+0x72>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:864
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
   1000c:	6c93      	ldr	r3, [r2, #72]	; 0x48
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:863
    count = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE);
    if (count) {
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
        ++count;
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
   1000e:	6817      	ldr	r7, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:864
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
   10010:	42ab      	cmp	r3, r5
   10012:	d8bc      	bhi.n	ff8e <_time_notify_kernel+0x72>
   10014:	d102      	bne.n	1001c <_time_notify_kernel+0x100>
   10016:	6c51      	ldr	r1, [r2, #68]	; 0x44
   10018:	4549      	cmp	r1, r9
   1001a:	d8b8      	bhi.n	ff8e <_time_notify_kernel+0x72>
   1001c:	239e      	movs	r3, #158	; 0x9e
   1001e:	005b      	lsls	r3, r3, #1
   10020:	5ae1      	ldrh	r1, [r4, r3]
   10022:	1c13      	adds	r3, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:863
    count = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE);
    if (count) {
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
        ++count;
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
   10024:	1c3a      	adds	r2, r7, #0
   10026:	e7d3      	b.n	ffd0 <_time_notify_kernel+0xb4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:870
            if (result >= 0) {
                --kernel_data->TIMEOUT_QUEUE.SIZE;
                _QUEUE_UNLINK(td_ptr);
                td_ptr->STATE &= ~IS_ON_TIMEOUT_Q;
                if (td_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
                    td_ptr->STATE &= ~TD_IS_ON_AUX_QUEUE;
   10028:	4646      	mov	r6, r8
   1002a:	4031      	ands	r1, r6
   1002c:	6099      	str	r1, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:871
                    _QUEUE_REMOVE(td_ptr->INFO, &td_ptr->AUX_QUEUE);
   1002e:	6c1f      	ldr	r7, [r3, #64]	; 0x40
   10030:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   10032:	6039      	str	r1, [r7, #0]
   10034:	604f      	str	r7, [r1, #4]
   10036:	6b9f      	ldr	r7, [r3, #56]	; 0x38
   10038:	8939      	ldrh	r1, [r7, #8]
   1003a:	3901      	subs	r1, #1
   1003c:	8139      	strh	r1, [r7, #8]
   1003e:	e7d5      	b.n	ffec <_time_notify_kernel+0xd0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:864
    if (count) {
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
        ++count;
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
   10040:	6c5f      	ldr	r7, [r3, #68]	; 0x44
   10042:	454f      	cmp	r7, r9
   10044:	d8a3      	bhi.n	ff8e <_time_notify_kernel+0x72>
   10046:	e7ba      	b.n	ffbe <_time_notify_kernel+0xa2>
   10048:	1fffe000 	.word	0x1fffe000
   1004c:	fffffeff 	.word	0xfffffeff
   10050:	fffffaff 	.word	0xfffffaff

00010054 <_time_set_hwtick_function>:
_time_set_hwtick_function():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:1005
    pointer              parameter
)
{ /* Body */
    register KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);
   10054:	4b04      	ldr	r3, [pc, #16]	; (10068 <_time_set_hwtick_function+0x14>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:1007

    kernel_data->GET_HWTICKS = hwtick_function_ptr;
   10056:	22aa      	movs	r2, #170	; 0xaa
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:1005
    pointer              parameter
)
{ /* Body */
    register KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);
   10058:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:1007

    kernel_data->GET_HWTICKS = hwtick_function_ptr;
   1005a:	0052      	lsls	r2, r2, #1
   1005c:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:1008
    kernel_data->GET_HWTICKS_PARAM = parameter;
   1005e:	22ac      	movs	r2, #172	; 0xac
   10060:	0052      	lsls	r2, r2, #1
   10062:	5099      	str	r1, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:1010

} /* Endbody */
   10064:	4770      	bx	lr
   10066:	46c0      	nop			; (mov r8, r8)
   10068:	1fffe000 	.word	0x1fffe000

0001006c <_time_set_hwticks_per_tick>:
_time_set_hwticks_per_tick():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:1031
{ /* Body */
    register KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    kernel_data->HW_TICKS_PER_TICK = new_val;
   1006c:	4b02      	ldr	r3, [pc, #8]	; (10078 <_time_set_hwticks_per_tick+0xc>)
   1006e:	681a      	ldr	r2, [r3, #0]
   10070:	23a8      	movs	r3, #168	; 0xa8
   10072:	005b      	lsls	r3, r3, #1
   10074:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:1033

} /* Endbody */
   10076:	4770      	bx	lr
   10078:	1fffe000 	.word	0x1fffe000

0001007c <Cpu_Interrupt>:
Cpu_Interrupt():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:302
** ===================================================================
*/
PE_ISR(Cpu_Interrupt)
{
  /* This code can be changed using the CPU component property "Build Options / Unhandled int code" */
  PE_DEBUGHALT();
   1007c:	beff      	bkpt	0x00ff
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:303
}
   1007e:	4770      	bx	lr

00010080 <__init_hardware>:
__init_hardware():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:317

  /*** !!! Here you can place your own code before PE initialization using property "User code before PE initialization" on the build options tab. !!! ***/

  /*** ### MKL46Z256VMC4 "Cpu" init code ... ***/
  /*** PE initialization code after reset ***/
  SCB_VTOR = (uint32_t)(&__vect_table); /* Set the interrupt vector table position */
   10080:	4b39      	ldr	r3, [pc, #228]	; (10168 <__init_hardware+0xe8>)
   10082:	4a3a      	ldr	r2, [pc, #232]	; (1016c <__init_hardware+0xec>)
   10084:	493a      	ldr	r1, [pc, #232]	; (10170 <__init_hardware+0xf0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:311
/*** !!! Here you can place your own code using property "User data declarations" on the build options tab. !!! ***/

/*lint -esym(765,__init_hardware) Disable MISRA rule (8.10) checking for symbols (__init_hardware). The function is linked to the EWL library */
/*lint -esym(765,Cpu_Interrupt) Disable MISRA rule (8.10) checking for symbols (Cpu_Interrupt). */
void __init_hardware(void)
{
   10086:	b510      	push	{r4, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:317

  /*** !!! Here you can place your own code before PE initialization using property "User code before PE initialization" on the build options tab. !!! ***/

  /*** ### MKL46Z256VMC4 "Cpu" init code ... ***/
  /*** PE initialization code after reset ***/
  SCB_VTOR = (uint32_t)(&__vect_table); /* Set the interrupt vector table position */
   10088:	50d1      	str	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:320
  /* Disable the WDOG module */
  /* SIM_COPC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COPT=0,COPCLKS=0,COPW=0 */
  SIM_COPC = SIM_COPC_COPT(0x00);
   1008a:	4b3a      	ldr	r3, [pc, #232]	; (10174 <__init_hardware+0xf4>)
   1008c:	2288      	movs	r2, #136	; 0x88
   1008e:	2100      	movs	r1, #0
   10090:	0152      	lsls	r2, r2, #5
   10092:	5099      	str	r1, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:324

  /* System clock initialization */
  /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=3,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
  SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x03)); /* Set the system prescalers to safe value */
   10094:	4a38      	ldr	r2, [pc, #224]	; (10178 <__init_hardware+0xf8>)
   10096:	21c0      	movs	r1, #192	; 0xc0
   10098:	0289      	lsls	r1, r1, #10
   1009a:	5099      	str	r1, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:326
  /* SIM_SCGC5: PORTE=1,PORTD=1,PORTC=1,PORTA=1 */
  SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK |
   1009c:	4a37      	ldr	r2, [pc, #220]	; (1017c <__init_hardware+0xfc>)
   1009e:	21e8      	movs	r1, #232	; 0xe8
   100a0:	5898      	ldr	r0, [r3, r2]
   100a2:	0189      	lsls	r1, r1, #6
   100a4:	4301      	orrs	r1, r0
   100a6:	5099      	str	r1, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:331
               SIM_SCGC5_PORTD_MASK |
               SIM_SCGC5_PORTC_MASK |
               SIM_SCGC5_PORTA_MASK;   /* Enable clock gate for ports to enable pin routing */
  /* SIM_SCGC5: LPTMR=1 */
  SIM_SCGC5 |= SIM_SCGC5_LPTMR_MASK;
   100a8:	5898      	ldr	r0, [r3, r2]
   100aa:	2101      	movs	r1, #1
   100ac:	4301      	orrs	r1, r0
   100ae:	5099      	str	r1, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:332
  if ((PMC_REGSC & PMC_REGSC_ACKISO_MASK) != 0x0U) {
   100b0:	4b33      	ldr	r3, [pc, #204]	; (10180 <__init_hardware+0x100>)
   100b2:	789a      	ldrb	r2, [r3, #2]
   100b4:	0711      	lsls	r1, r2, #28
   100b6:	d504      	bpl.n	100c2 <__init_hardware+0x42>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:334
    /* PMC_REGSC: ACKISO=1 */
    PMC_REGSC |= PMC_REGSC_ACKISO_MASK; /* Release IO pads after wakeup from VLLS mode. */
   100b8:	7899      	ldrb	r1, [r3, #2]
   100ba:	2208      	movs	r2, #8
   100bc:	430a      	orrs	r2, r1
   100be:	b2d2      	uxtb	r2, r2
   100c0:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:337
  }
  /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=1,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
  SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x01)); /* Update system prescalers */
   100c2:	4b2c      	ldr	r3, [pc, #176]	; (10174 <__init_hardware+0xf4>)
   100c4:	4a2c      	ldr	r2, [pc, #176]	; (10178 <__init_hardware+0xf8>)
   100c6:	2180      	movs	r1, #128	; 0x80
   100c8:	0249      	lsls	r1, r1, #9
   100ca:	5099      	str	r1, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:339
  /* SIM_SOPT2: ??=0,PLLFLLSEL=1 */
  SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
   100cc:	4a2d      	ldr	r2, [pc, #180]	; (10184 <__init_hardware+0x104>)
   100ce:	482e      	ldr	r0, [pc, #184]	; (10188 <__init_hardware+0x108>)
   100d0:	589c      	ldr	r4, [r3, r2]
   100d2:	4020      	ands	r0, r4
   100d4:	4301      	orrs	r1, r0
   100d6:	5099      	str	r1, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:345
               0x00020000U
              )) | (uint32_t)(
               SIM_SOPT2_PLLFLLSEL_MASK
              ));                      /* Select PLL as a clock source for various peripherals */
  /* SIM_SOPT1: OSC32KSEL=3 */
  SIM_SOPT1 |= SIM_SOPT1_OSC32KSEL(0x03); /* LPO 1kHz oscillator drives 32 kHz clock for various peripherals */
   100d8:	6818      	ldr	r0, [r3, #0]
   100da:	21c0      	movs	r1, #192	; 0xc0
   100dc:	0309      	lsls	r1, r1, #12
   100de:	4301      	orrs	r1, r0
   100e0:	6019      	str	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:347
  /* SIM_SOPT2: TPMSRC=1 */
  SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
   100e2:	5898      	ldr	r0, [r3, r2]
   100e4:	4929      	ldr	r1, [pc, #164]	; (1018c <__init_hardware+0x10c>)
   100e6:	4001      	ands	r1, r0
   100e8:	2080      	movs	r0, #128	; 0x80
   100ea:	0440      	lsls	r0, r0, #17
   100ec:	4301      	orrs	r1, r0
   100ee:	5099      	str	r1, [r3, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:353
               SIM_SOPT2_TPMSRC(0x02)
              )) | (uint32_t)(
               SIM_SOPT2_TPMSRC(0x01)
              ));                      /* Set the TPM clock */
  /* PORTA_PCR18: ISF=0,MUX=0 */
  PORTA_PCR18 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
   100f0:	4b27      	ldr	r3, [pc, #156]	; (10190 <__init_hardware+0x110>)
   100f2:	4a28      	ldr	r2, [pc, #160]	; (10194 <__init_hardware+0x114>)
   100f4:	6c99      	ldr	r1, [r3, #72]	; 0x48
   100f6:	4011      	ands	r1, r2
   100f8:	6499      	str	r1, [r3, #72]	; 0x48
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:355
  /* PORTA_PCR19: ISF=0,MUX=0 */
  PORTA_PCR19 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
   100fa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   100fc:	400a      	ands	r2, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:358
  /* Switch to FBE Mode */
  /* MCG_C2: LOCRE0=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=0 */
  MCG_C2 = (uint8_t)((MCG_C2 & (uint8_t)~(uint8_t)(
   100fe:	4926      	ldr	r1, [pc, #152]	; (10198 <__init_hardware+0x118>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:355
               SIM_SOPT2_TPMSRC(0x01)
              ));                      /* Set the TPM clock */
  /* PORTA_PCR18: ISF=0,MUX=0 */
  PORTA_PCR18 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
  /* PORTA_PCR19: ISF=0,MUX=0 */
  PORTA_PCR19 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
   10100:	64da      	str	r2, [r3, #76]	; 0x4c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:358
  /* Switch to FBE Mode */
  /* MCG_C2: LOCRE0=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=0 */
  MCG_C2 = (uint8_t)((MCG_C2 & (uint8_t)~(uint8_t)(
   10102:	784b      	ldrb	r3, [r1, #1]
   10104:	2240      	movs	r2, #64	; 0x40
   10106:	4013      	ands	r3, r2
   10108:	2224      	movs	r2, #36	; 0x24
   1010a:	4313      	orrs	r3, r2
   1010c:	704b      	strb	r3, [r1, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:369
           )) | (uint8_t)(
            MCG_C2_RANGE0(0x02) |
            MCG_C2_EREFS0_MASK
           ));
  /* OSC0_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
  OSC0_CR = OSC_CR_ERCLKEN_MASK;
   1010e:	4b23      	ldr	r3, [pc, #140]	; (1019c <__init_hardware+0x11c>)
   10110:	2280      	movs	r2, #128	; 0x80
   10112:	701a      	strb	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:371
  /* MCG_C1: CLKS=2,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
  MCG_C1 = (MCG_C1_CLKS(0x02) | MCG_C1_FRDIV(0x03) | MCG_C1_IRCLKEN_MASK);
   10114:	239a      	movs	r3, #154	; 0x9a
   10116:	700b      	strb	r3, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:373
  /* MCG_C4: DMX32=0,DRST_DRS=0 */
  MCG_C4 &= (uint8_t)~(uint8_t)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));
   10118:	78cb      	ldrb	r3, [r1, #3]
   1011a:	221f      	movs	r2, #31
   1011c:	4013      	ands	r3, r2
   1011e:	70cb      	strb	r3, [r1, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:375
  /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=3 */
  MCG_C5 = MCG_C5_PRDIV0(0x03);
   10120:	2303      	movs	r3, #3
   10122:	710b      	strb	r3, [r1, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:377
  /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
  MCG_C6 = MCG_C6_VDIV0(0x00);
   10124:	2300      	movs	r3, #0
   10126:	714b      	strb	r3, [r1, #5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:378
  while((MCG_S & MCG_S_IREFST_MASK) != 0x00U) { /* Check that the source of the FLL reference clock is the external reference clock. */
   10128:	2210      	movs	r2, #16
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:378 (discriminator 1)
   1012a:	798b      	ldrb	r3, [r1, #6]
   1012c:	421a      	tst	r2, r3
   1012e:	d1fc      	bne.n	1012a <__init_hardware+0xaa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:380
  }
  while((MCG_S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG output */
   10130:	4819      	ldr	r0, [pc, #100]	; (10198 <__init_hardware+0x118>)
   10132:	210c      	movs	r1, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:380 (discriminator 1)
   10134:	7983      	ldrb	r3, [r0, #6]
   10136:	4a18      	ldr	r2, [pc, #96]	; (10198 <__init_hardware+0x118>)
   10138:	400b      	ands	r3, r1
   1013a:	2b08      	cmp	r3, #8
   1013c:	d1fa      	bne.n	10134 <__init_hardware+0xb4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:384
  }
  /* Switch to PBE Mode */
  /* MCG_C6: LOLIE0=0,PLLS=1,CME0=0,VDIV0=0 */
  MCG_C6 = (MCG_C6_PLLS_MASK | MCG_C6_VDIV0(0x00));
   1013e:	2340      	movs	r3, #64	; 0x40
   10140:	7153      	strb	r3, [r2, #5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:385
  while((MCG_S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG output */
   10142:	210c      	movs	r1, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:385 (discriminator 1)
   10144:	7993      	ldrb	r3, [r2, #6]
   10146:	400b      	ands	r3, r1
   10148:	2b08      	cmp	r3, #8
   1014a:	d1fb      	bne.n	10144 <__init_hardware+0xc4>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:387
  }
  while((MCG_S & MCG_S_LOCK0_MASK) == 0x00U) { /* Wait until locked */
   1014c:	4812      	ldr	r0, [pc, #72]	; (10198 <__init_hardware+0x118>)
   1014e:	2140      	movs	r1, #64	; 0x40
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:387 (discriminator 1)
   10150:	7983      	ldrb	r3, [r0, #6]
   10152:	4a11      	ldr	r2, [pc, #68]	; (10198 <__init_hardware+0x118>)
   10154:	4219      	tst	r1, r3
   10156:	d0fb      	beq.n	10150 <__init_hardware+0xd0>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:391
  }
  /* Switch to PEE Mode */
  /* MCG_C1: CLKS=0,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
  MCG_C1 = (MCG_C1_CLKS(0x00) | MCG_C1_FRDIV(0x03) | MCG_C1_IRCLKEN_MASK);
   10158:	231a      	movs	r3, #26
   1015a:	7013      	strb	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:392
  while((MCG_S & 0x0CU) != 0x0CU) {    /* Wait until output of the PLL is selected */
   1015c:	210c      	movs	r1, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:392 (discriminator 1)
   1015e:	7993      	ldrb	r3, [r2, #6]
   10160:	400b      	ands	r3, r1
   10162:	2b0c      	cmp	r3, #12
   10164:	d1fb      	bne.n	1015e <__init_hardware+0xde>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:398
  }
  /*** End of PE initialization code after reset ***/

  /*** !!! Here you can place your own code after PE initialization using property "User code after PE initialization" on the build options tab. !!! ***/

}
   10166:	bd10      	pop	{r4, pc}
   10168:	00000d08 	.word	0x00000d08
   1016c:	e000e000 	.word	0xe000e000
   10170:	00000000 	.word	0x00000000
   10174:	40047000 	.word	0x40047000
   10178:	00001044 	.word	0x00001044
   1017c:	00001038 	.word	0x00001038
   10180:	4007d000 	.word	0x4007d000
   10184:	00001004 	.word	0x00001004
   10188:	fffcffff 	.word	0xfffcffff
   1018c:	fcffffff 	.word	0xfcffffff
   10190:	40049000 	.word	0x40049000
   10194:	fefff8ff 	.word	0xfefff8ff
   10198:	40064000 	.word	0x40064000
   1019c:	40065000 	.word	0x40065000

000101a0 <PE_low_level_init>:
PE_low_level_init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:414
**         application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void PE_low_level_init(void)
{
   101a0:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:416
  #ifdef PEX_RTOS_INIT
    PEX_RTOS_INIT();                   /* Initialization of the selected RTOS. Macro is defined by the RTOS component. */
   101a2:	4826      	ldr	r0, [pc, #152]	; (1023c <PE_low_level_init+0x9c>)
   101a4:	f7ff f9f8 	bl	f598 <_mqxlite_init>
   101a8:	2800      	cmp	r0, #0
   101aa:	d000      	beq.n	101ae <PE_low_level_init+0xe>
   101ac:	e7fe      	b.n	101ac <PE_low_level_init+0xc>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:421
  #endif
      /* Initialization of the SIM module */
        /* Initialization of the RCM module */
  /* RCM_RPFW: RSTFLTSEL=0 */
  RCM_RPFW &= (uint8_t)~(uint8_t)(RCM_RPFW_RSTFLTSEL(0x1F));
   101ae:	4b24      	ldr	r3, [pc, #144]	; (10240 <PE_low_level_init+0xa0>)
   101b0:	211f      	movs	r1, #31
   101b2:	795a      	ldrb	r2, [r3, #5]
   101b4:	438a      	bics	r2, r1
   101b6:	715a      	strb	r2, [r3, #5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:423
  /* RCM_RPFC: RSTFLTSS=0,RSTFLTSRW=0 */
  RCM_RPFC &= (uint8_t)~(uint8_t)(
   101b8:	791a      	ldrb	r2, [r3, #4]
   101ba:	2107      	movs	r1, #7
   101bc:	438a      	bics	r2, r1
   101be:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:430
               RCM_RPFC_RSTFLTSRW(0x03)
              );
        /* Initialization of the FTFL_FlashConfig module */
      /* Initialization of the PMC module */
  /* PMC_LVDSC1: LVDACK=1,LVDIE=0,LVDRE=1,LVDV=0 */
  PMC_LVDSC1 = (uint8_t)((PMC_LVDSC1 & (uint8_t)~(uint8_t)(
   101c0:	4b20      	ldr	r3, [pc, #128]	; (10244 <PE_low_level_init+0xa4>)
   101c2:	2273      	movs	r2, #115	; 0x73
   101c4:	7819      	ldrb	r1, [r3, #0]
   101c6:	4391      	bics	r1, r2
   101c8:	2250      	movs	r2, #80	; 0x50
   101ca:	430a      	orrs	r2, r1
   101cc:	701a      	strb	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:438
               )) | (uint8_t)(
                PMC_LVDSC1_LVDACK_MASK |
                PMC_LVDSC1_LVDRE_MASK
               ));
  /* PMC_LVDSC2: LVWACK=1,LVWIE=0,LVWV=0 */
  PMC_LVDSC2 = (uint8_t)((PMC_LVDSC2 & (uint8_t)~(uint8_t)(
   101ce:	7859      	ldrb	r1, [r3, #1]
   101d0:	2263      	movs	r2, #99	; 0x63
   101d2:	4391      	bics	r1, r2
   101d4:	2240      	movs	r2, #64	; 0x40
   101d6:	430a      	orrs	r2, r1
   101d8:	705a      	strb	r2, [r3, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:445
                PMC_LVDSC2_LVWV(0x03)
               )) | (uint8_t)(
                PMC_LVDSC2_LVWACK_MASK
               ));
  /* PMC_REGSC: BGEN=0,ACKISO=0,BGBE=0 */
  PMC_REGSC &= (uint8_t)~(uint8_t)(
   101da:	789a      	ldrb	r2, [r3, #2]
   101dc:	2119      	movs	r1, #25
   101de:	438a      	bics	r2, r1
   101e0:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:451
                PMC_REGSC_BGEN_MASK |
                PMC_REGSC_ACKISO_MASK |
                PMC_REGSC_BGBE_MASK
               );
  /* SMC_PMPROT: ??=0,??=0,AVLP=0,??=0,ALLS=0,??=0,AVLLS=0,??=0 */
  SMC_PMPROT = 0x00U;                  /* Setup Power mode protection register */
   101e2:	4b19      	ldr	r3, [pc, #100]	; (10248 <PE_low_level_init+0xa8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:454
  /* Common initialization of the CPU registers */
  /* PORTA_PCR20: ISF=0,MUX=7 */
  PORTA_PCR20 = (uint32_t)((PORTA_PCR20 & (uint32_t)~(uint32_t)(
   101e4:	4a19      	ldr	r2, [pc, #100]	; (1024c <PE_low_level_init+0xac>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:451
                PMC_REGSC_BGEN_MASK |
                PMC_REGSC_ACKISO_MASK |
                PMC_REGSC_BGBE_MASK
               );
  /* SMC_PMPROT: ??=0,??=0,AVLP=0,??=0,ALLS=0,??=0,AVLLS=0,??=0 */
  SMC_PMPROT = 0x00U;                  /* Setup Power mode protection register */
   101e6:	7018      	strb	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:454
  /* Common initialization of the CPU registers */
  /* PORTA_PCR20: ISF=0,MUX=7 */
  PORTA_PCR20 = (uint32_t)((PORTA_PCR20 & (uint32_t)~(uint32_t)(
   101e8:	4b19      	ldr	r3, [pc, #100]	; (10250 <PE_low_level_init+0xb0>)
   101ea:	6d19      	ldr	r1, [r3, #80]	; 0x50
   101ec:	4011      	ands	r1, r2
   101ee:	22e0      	movs	r2, #224	; 0xe0
   101f0:	00d2      	lsls	r2, r2, #3
   101f2:	430a      	orrs	r2, r1
   101f4:	651a      	str	r2, [r3, #80]	; 0x50
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:460
                 PORT_PCR_ISF_MASK
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x07)
                ));
  /* NVIC_IPR1: PRI_6=0 */
  NVIC_IPR1 &= (uint32_t)~(uint32_t)(NVIC_IP_PRI_6(0xFF));
   101f6:	4a17      	ldr	r2, [pc, #92]	; (10254 <PE_low_level_init+0xb4>)
   101f8:	23c1      	movs	r3, #193	; 0xc1
   101fa:	009b      	lsls	r3, r3, #2
   101fc:	58d0      	ldr	r0, [r2, r3]
   101fe:	4916      	ldr	r1, [pc, #88]	; (10258 <PE_low_level_init+0xb8>)
   10200:	4001      	ands	r1, r0
   10202:	50d1      	str	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:462
  /* ### BitIO_LDD "LED_RED" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)LED_RED_Init(NULL);
   10204:	2000      	movs	r0, #0
   10206:	f000 fafd 	bl	10804 <LED_RED_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:464
  /* ### BitIO_LDD "LED_GREEN" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)LED_GREEN_Init(NULL);
   1020a:	2000      	movs	r0, #0
   1020c:	f000 face 	bl	107ac <LED_GREEN_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:466
  /* ### BitIO_LDD "LED_BLUE" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)LED_BLUE_Init(NULL);
   10210:	2000      	movs	r0, #0
   10212:	f000 faa1 	bl	10758 <LED_BLUE_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:468
  /* ### TimerUnit_LDD "FTM" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)FTM_Init(NULL);
   10216:	2000      	movs	r0, #0
   10218:	f000 f82c 	bl	10274 <FTM_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:470
  /* ### Serial_LDD "UART" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)UART_Init(NULL);
   1021c:	2000      	movs	r0, #0
   1021e:	f000 fd2b 	bl	10c78 <UART_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:472
  /* ### I2C_LDD "I2C" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)I2C_Init(NULL);
   10222:	2000      	movs	r0, #0
   10224:	f000 f928 	bl	10478 <I2C_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:474
  /* ### BitIO_LDD "TestPin_KF_Time" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)TestPin_KF_Time_Init(NULL);
   10228:	2000      	movs	r0, #0
   1022a:	f000 fc4f 	bl	10acc <TestPin_KF_Time_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:476
  /* ### BitIO_LDD "TestPin_MagCal_Time" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)TestPin_MagCal_Time_Init(NULL);
   1022e:	2000      	movs	r0, #0
   10230:	f000 fc80 	bl	10b34 <TestPin_MagCal_Time_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:478
  /* ### RingBufferUInt8 "RNG1" init code ... */
  RNG1_Init();
   10234:	f000 fbe0 	bl	109f8 <RNG1_Init>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:479
}
   10238:	bd08      	pop	{r3, pc}
   1023a:	46c0      	nop			; (mov r8, r8)
   1023c:	00013490 	.word	0x00013490
   10240:	4007f000 	.word	0x4007f000
   10244:	4007d000 	.word	0x4007d000
   10248:	4007e000 	.word	0x4007e000
   1024c:	fefff8ff 	.word	0xfefff8ff
   10250:	40049000 	.word	0x40049000
   10254:	e000e100 	.word	0xe000e100
   10258:	ff00ffff 	.word	0xff00ffff

0001025c <FTM_Interrupt>:
FTM_Interrupt():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:294
**         and eventually invokes event(s) of the component.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void FTM_Interrupt(LDD_RTOS_TISRParameter _isrParameter)
{
   1025c:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:298
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  FTM_TDeviceDataPtr DeviceDataPrv = (FTM_TDeviceDataPtr)_isrParameter;

  LPTMR_PDD_ClearInterruptFlag(LPTMR0_BASE_PTR); /* Clear interrupt flag */
   1025e:	4b04      	ldr	r3, [pc, #16]	; (10270 <FTM_Interrupt+0x14>)
   10260:	2280      	movs	r2, #128	; 0x80
   10262:	6819      	ldr	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:299
  FTM_OnCounterRestart(DeviceDataPrv->UserDataPtr); /* Invoke OnCounterRestart event */
   10264:	6880      	ldr	r0, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:298
void FTM_Interrupt(LDD_RTOS_TISRParameter _isrParameter)
{
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  FTM_TDeviceDataPtr DeviceDataPrv = (FTM_TDeviceDataPtr)_isrParameter;

  LPTMR_PDD_ClearInterruptFlag(LPTMR0_BASE_PTR); /* Clear interrupt flag */
   10266:	430a      	orrs	r2, r1
   10268:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:299
  FTM_OnCounterRestart(DeviceDataPrv->UserDataPtr); /* Invoke OnCounterRestart event */
   1026a:	f7f2 fc6b 	bl	2b44 <FTM_OnCounterRestart>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:300
}
   1026e:	bd08      	pop	{r3, pc}
   10270:	40040000 	.word	0x40040000

00010274 <FTM_Init>:
FTM_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:153
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* FTM_Init(LDD_TUserData *UserDataPtr)
{
   10274:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:158
  /* Allocate device structure */
  FTM_TDeviceData *DeviceDataPrv;
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   10276:	4c16      	ldr	r4, [pc, #88]	; (102d0 <FTM_Init+0x5c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:173
  /* LPTMR0_CMR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COMPARE=0x1387 */
  LPTMR0_CMR = LPTMR_CMR_COMPARE(0x1387); /* Set up compare register */
  /* LPTMR0_PSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,PRESCALE=2,PBYP=0,PCS=3 */
  LPTMR0_PSR = (LPTMR_PSR_PRESCALE(0x02) | LPTMR_PSR_PCS(0x03)); /* Set up prescaler register */
  /* NVIC_IPR7: PRI_28=0x80 */
  NVIC_IPR7 = (uint32_t)((NVIC_IPR7 & (uint32_t)~(uint32_t)(
   10278:	26ff      	movs	r6, #255	; 0xff
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:158
{
  /* Allocate device structure */
  FTM_TDeviceData *DeviceDataPrv;
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   1027a:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:162
  /* Interrupt vector(s) allocation */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrData = _int_get_isr_data(LDD_ivIndex_INT_LPTimer);
   1027c:	202c      	movs	r0, #44	; 0x2c
   1027e:	f7fe fe63 	bl	ef48 <_int_get_isr_data>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:163
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrFunction = _int_install_isr(LDD_ivIndex_INT_LPTimer, FTM_Interrupt, DeviceDataPrv);
   10282:	1c22      	adds	r2, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:162
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Interrupt vector(s) allocation */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrData = _int_get_isr_data(LDD_ivIndex_INT_LPTimer);
   10284:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:163
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrFunction = _int_install_isr(LDD_ivIndex_INT_LPTimer, FTM_Interrupt, DeviceDataPrv);
   10286:	4913      	ldr	r1, [pc, #76]	; (102d4 <FTM_Init+0x60>)
   10288:	202c      	movs	r0, #44	; 0x2c
   1028a:	f7fe fe7d 	bl	ef88 <_int_install_isr>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:165
  /* SIM_SCGC5: LPTMR=1 */
  SIM_SCGC5 |= SIM_SCGC5_LPTMR_MASK;
   1028e:	4a12      	ldr	r2, [pc, #72]	; (102d8 <FTM_Init+0x64>)
   10290:	4b12      	ldr	r3, [pc, #72]	; (102dc <FTM_Init+0x68>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:163
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Interrupt vector(s) allocation */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrData = _int_get_isr_data(LDD_ivIndex_INT_LPTimer);
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrFunction = _int_install_isr(LDD_ivIndex_INT_LPTimer, FTM_Interrupt, DeviceDataPrv);
   10292:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:165
  /* SIM_SCGC5: LPTMR=1 */
  SIM_SCGC5 |= SIM_SCGC5_LPTMR_MASK;
   10294:	58d0      	ldr	r0, [r2, r3]
   10296:	2101      	movs	r1, #1
   10298:	4301      	orrs	r1, r0
   1029a:	50d1      	str	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:167
  /* LPTMR0_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,TCF=1,TIE=0,TPS=0,TPP=0,TFC=0,TMS=0,TEN=0 */
  LPTMR0_CSR = (LPTMR_CSR_TCF_MASK | LPTMR_CSR_TPS(0x00)); /* Clear control register */
   1029c:	4b10      	ldr	r3, [pc, #64]	; (102e0 <FTM_Init+0x6c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:169
  /* LPTMR0_CMR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COMPARE=0x1387 */
  LPTMR0_CMR = LPTMR_CMR_COMPARE(0x1387); /* Set up compare register */
   1029e:	4a11      	ldr	r2, [pc, #68]	; (102e4 <FTM_Init+0x70>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:167
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrData = _int_get_isr_data(LDD_ivIndex_INT_LPTimer);
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrFunction = _int_install_isr(LDD_ivIndex_INT_LPTimer, FTM_Interrupt, DeviceDataPrv);
  /* SIM_SCGC5: LPTMR=1 */
  SIM_SCGC5 |= SIM_SCGC5_LPTMR_MASK;
  /* LPTMR0_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,TCF=1,TIE=0,TPS=0,TPP=0,TFC=0,TMS=0,TEN=0 */
  LPTMR0_CSR = (LPTMR_CSR_TCF_MASK | LPTMR_CSR_TPS(0x00)); /* Clear control register */
   102a0:	2080      	movs	r0, #128	; 0x80
   102a2:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:169
  /* LPTMR0_CMR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COMPARE=0x1387 */
  LPTMR0_CMR = LPTMR_CMR_COMPARE(0x1387); /* Set up compare register */
   102a4:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:171
  /* LPTMR0_PSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,PRESCALE=2,PBYP=0,PCS=3 */
  LPTMR0_PSR = (LPTMR_PSR_PRESCALE(0x02) | LPTMR_PSR_PCS(0x03)); /* Set up prescaler register */
   102a6:	2213      	movs	r2, #19
   102a8:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:173
  /* NVIC_IPR7: PRI_28=0x80 */
  NVIC_IPR7 = (uint32_t)((NVIC_IPR7 & (uint32_t)~(uint32_t)(
   102aa:	21c7      	movs	r1, #199	; 0xc7
   102ac:	4a0e      	ldr	r2, [pc, #56]	; (102e8 <FTM_Init+0x74>)
   102ae:	0089      	lsls	r1, r1, #2
   102b0:	5855      	ldr	r5, [r2, r1]
   102b2:	43b5      	bics	r5, r6
   102b4:	4328      	orrs	r0, r5
   102b6:	5050      	str	r0, [r2, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:179
               NVIC_IP_PRI_28(0x7F)
              )) | (uint32_t)(
               NVIC_IP_PRI_28(0x80)
              ));
  /* NVIC_ISER: SETENA|=0x10000000 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x10000000);
   102b8:	6810      	ldr	r0, [r2, #0]
   102ba:	2180      	movs	r1, #128	; 0x80
   102bc:	0549      	lsls	r1, r1, #21
   102be:	4301      	orrs	r1, r0
   102c0:	6011      	str	r1, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:181
  /* LPTMR0_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,TCF=0,TIE=1,TPS=0,TPP=0,TFC=0,TMS=0,TEN=1 */
  LPTMR0_CSR = (LPTMR_CSR_TIE_MASK | LPTMR_CSR_TPS(0x00) | LPTMR_CSR_TEN_MASK); /* Set up control register */
   102c2:	2241      	movs	r2, #65	; 0x41
   102c4:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:183
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_FTM_ID,DeviceDataPrv);
   102c6:	4b09      	ldr	r3, [pc, #36]	; (102ec <FTM_Init+0x78>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:185
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
}
   102c8:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:183
  /* NVIC_ISER: SETENA|=0x10000000 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x10000000);
  /* LPTMR0_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,TCF=0,TIE=1,TPS=0,TPP=0,TFC=0,TMS=0,TEN=1 */
  LPTMR0_CSR = (LPTMR_CSR_TIE_MASK | LPTMR_CSR_TPS(0x00) | LPTMR_CSR_TEN_MASK); /* Set up control register */
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_FTM_ID,DeviceDataPrv);
   102ca:	611c      	str	r4, [r3, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:185
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
}
   102cc:	bd70      	pop	{r4, r5, r6, pc}
   102ce:	46c0      	nop			; (mov r8, r8)
   102d0:	1fffe1d8 	.word	0x1fffe1d8
   102d4:	0001025d 	.word	0x0001025d
   102d8:	40047000 	.word	0x40047000
   102dc:	00001038 	.word	0x00001038
   102e0:	40040000 	.word	0x40040000
   102e4:	00001387 	.word	0x00001387
   102e8:	e000e100 	.word	0xe000e100
   102ec:	1fffe218 	.word	0x1fffe218

000102f0 <FTM_SetPeriodTicks>:
FTM_SetPeriodTicks():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:219
LDD_TError FTM_SetPeriodTicks(LDD_TDeviceData *DeviceDataPtr, FTM_TValueType Ticks)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  /* Parameter test - this test can be disabled by setting the "Ignore range checking"
     property to the "yes" value in the "Configuration inspector" */
  if (Ticks > 65535U) {                /* Is the given value out of range? */
   102f0:	4b05      	ldr	r3, [pc, #20]	; (10308 <FTM_SetPeriodTicks+0x18>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:220
    return ERR_PARAM_TICKS;            /* If yes then error */
   102f2:	2098      	movs	r0, #152	; 0x98
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:219
LDD_TError FTM_SetPeriodTicks(LDD_TDeviceData *DeviceDataPtr, FTM_TValueType Ticks)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  /* Parameter test - this test can be disabled by setting the "Ignore range checking"
     property to the "yes" value in the "Configuration inspector" */
  if (Ticks > 65535U) {                /* Is the given value out of range? */
   102f4:	4299      	cmp	r1, r3
   102f6:	d900      	bls.n	102fa <FTM_SetPeriodTicks+0xa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:224
    return ERR_PARAM_TICKS;            /* If yes then error */
  }
  LPTMR_PDD_WriteCompareReg(LPTMR0_BASE_PTR, (uint16_t)(--Ticks));
  return ERR_OK;                       /* OK */
}
   102f8:	4770      	bx	lr
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:222
  /* Parameter test - this test can be disabled by setting the "Ignore range checking"
     property to the "yes" value in the "Configuration inspector" */
  if (Ticks > 65535U) {                /* Is the given value out of range? */
    return ERR_PARAM_TICKS;            /* If yes then error */
  }
  LPTMR_PDD_WriteCompareReg(LPTMR0_BASE_PTR, (uint16_t)(--Ticks));
   102fa:	3901      	subs	r1, #1
   102fc:	0409      	lsls	r1, r1, #16
   102fe:	4b03      	ldr	r3, [pc, #12]	; (1030c <FTM_SetPeriodTicks+0x1c>)
   10300:	0c09      	lsrs	r1, r1, #16
   10302:	6099      	str	r1, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:223
  return ERR_OK;                       /* OK */
   10304:	2000      	movs	r0, #0
   10306:	e7f7      	b.n	102f8 <FTM_SetPeriodTicks+0x8>
   10308:	0000ffff 	.word	0x0000ffff
   1030c:	40040000 	.word	0x40040000

00010310 <I2C_Interrupt>:
I2C_Interrupt():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:222
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

void I2C_Interrupt(LDD_RTOS_TISRParameter _isrParameter)
{
   10310:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:228
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  I2C_TDeviceDataPtr DeviceDataPrv = (I2C_TDeviceDataPtr)_isrParameter;
  LDD_I2C_TErrorMask ErrorMask = 0x00U; /* Temporary variable for error mask */
  register uint8_t Status;             /* Temporary variable for status register */

  Status = I2C_PDD_ReadStatusReg(I2C1_BASE_PTR); /* Safe status register */
   10312:	4b58      	ldr	r3, [pc, #352]	; (10474 <I2C_Interrupt+0x164>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:229
  I2C_PDD_ClearInterruptFlags(I2C1_BASE_PTR, (Status)); /* Clear interrupt flag */
   10314:	2412      	movs	r4, #18
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:228
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  I2C_TDeviceDataPtr DeviceDataPrv = (I2C_TDeviceDataPtr)_isrParameter;
  LDD_I2C_TErrorMask ErrorMask = 0x00U; /* Temporary variable for error mask */
  register uint8_t Status;             /* Temporary variable for status register */

  Status = I2C_PDD_ReadStatusReg(I2C1_BASE_PTR); /* Safe status register */
   10316:	78da      	ldrb	r2, [r3, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:229
  I2C_PDD_ClearInterruptFlags(I2C1_BASE_PTR, (Status)); /* Clear interrupt flag */
   10318:	78d9      	ldrb	r1, [r3, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:228
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  I2C_TDeviceDataPtr DeviceDataPrv = (I2C_TDeviceDataPtr)_isrParameter;
  LDD_I2C_TErrorMask ErrorMask = 0x00U; /* Temporary variable for error mask */
  register uint8_t Status;             /* Temporary variable for status register */

  Status = I2C_PDD_ReadStatusReg(I2C1_BASE_PTR); /* Safe status register */
   1031a:	b2d2      	uxtb	r2, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:229
  I2C_PDD_ClearInterruptFlags(I2C1_BASE_PTR, (Status)); /* Clear interrupt flag */
   1031c:	43a1      	bics	r1, r4
   1031e:	4311      	orrs	r1, r2
   10320:	70d9      	strb	r1, [r3, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:230
  if (I2C_PDD_GetMasterMode(I2C1_BASE_PTR) == I2C_PDD_MASTER_MODE) { /* Is device in master mode? */
   10322:	7899      	ldrb	r1, [r3, #2]
   10324:	2420      	movs	r4, #32
   10326:	4021      	ands	r1, r4
   10328:	d023      	beq.n	10372 <I2C_Interrupt+0x62>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:231
    if (I2C_PDD_GetTransmitMode(I2C1_BASE_PTR) == I2C_PDD_TX_DIRECTION) { /* Is device in Tx mode? */
   1032a:	789d      	ldrb	r5, [r3, #2]
   1032c:	2110      	movs	r1, #16
   1032e:	4229      	tst	r1, r5
   10330:	d031      	beq.n	10396 <I2C_Interrupt+0x86>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:232
      if ((Status & I2C_PDD_RX_ACKNOWLEDGE) != 0x00U){ /* NACK received? */
   10332:	2501      	movs	r5, #1
   10334:	4215      	tst	r5, r2
   10336:	d150      	bne.n	103da <I2C_Interrupt+0xca>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:241
        DeviceDataPrv->InpLenM = 0x00U; /* No character for reception */
        DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* No character for sending or reception */
        DeviceDataPrv->SerFlag |= (ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Set the flag */
        ErrorMask |= LDD_I2C_MASTER_NACK; /* Set the Master Nack error mask */
      } else {
        if ((DeviceDataPrv->SerFlag & ADDR_COMPLETE) != 0x00U) { /* If 10-bit addr has been completed */
   10338:	7802      	ldrb	r2, [r0, #0]
   1033a:	0796      	lsls	r6, r2, #30
   1033c:	d564      	bpl.n	10408 <I2C_Interrupt+0xf8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:242
          if (DeviceDataPrv->OutLenM != 0x00U) { /* Is any char. for transmitting? */
   1033e:	8a06      	ldrh	r6, [r0, #16]
   10340:	2e00      	cmp	r6, #0
   10342:	d000      	beq.n	10346 <I2C_Interrupt+0x36>
   10344:	e067      	b.n	10416 <I2C_Interrupt+0x106>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:246
            DeviceDataPrv->OutLenM--;  /* Decrease number of chars for the transmit */
            I2C_PDD_WriteDataReg(I2C1_BASE_PTR, *(DeviceDataPrv->OutPtrM)++); /* Send character */
          } else {
            if (DeviceDataPrv->InpLenM != 0x00U) { /* Is any char. for reception? */
   10346:	8906      	ldrh	r6, [r0, #8]
   10348:	2e00      	cmp	r6, #0
   1034a:	d100      	bne.n	1034e <I2C_Interrupt+0x3e>
   1034c:	e06b      	b.n	10426 <I2C_Interrupt+0x116>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:247
              if ((DeviceDataPrv->SerFlag & REP_ADDR_COMPLETE) != 0x00U) { /* If repeated start and addr tx has been completed for 10-bit mode ?*/
   1034e:	2104      	movs	r1, #4
   10350:	0754      	lsls	r4, r2, #29
   10352:	d400      	bmi.n	10356 <I2C_Interrupt+0x46>
   10354:	e074      	b.n	10440 <I2C_Interrupt+0x130>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:248
                if (DeviceDataPrv->InpLenM == 0x01U) { /* If only one char to receive */
   10356:	2e01      	cmp	r6, #1
   10358:	d100      	bne.n	1035c <I2C_Interrupt+0x4c>
   1035a:	e085      	b.n	10468 <I2C_Interrupt+0x158>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:251
                  I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_DISABLE); /* then transmit ACK disable */
                } else {
                  I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_ENABLE); /* else transmit ACK enable */
   1035c:	789a      	ldrb	r2, [r3, #2]
   1035e:	2108      	movs	r1, #8
   10360:	438a      	bics	r2, r1
   10362:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:253 (discriminator 3)
                }
                I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_RX_DIRECTION); /* Switch to Rx mode */
   10364:	4b43      	ldr	r3, [pc, #268]	; (10474 <I2C_Interrupt+0x164>)
   10366:	2110      	movs	r1, #16
   10368:	789a      	ldrb	r2, [r3, #2]
   1036a:	438a      	bics	r2, r1
   1036c:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:254 (discriminator 3)
                (void)I2C_PDD_ReadDataReg(I2C1_BASE_PTR); /* Dummy read character */
   1036e:	791b      	ldrb	r3, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:305
    }
  }
  if (ErrorMask != 0x00U) {            /* Is any error mask set? */
    DeviceDataPrv->ErrorMask |= ErrorMask; /* Update list of error mask value */
  }
}
   10370:	bd70      	pop	{r4, r5, r6, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:293
        DeviceDataPrv->StatusFlag |= MASTER_BLOCK_RECEIVED; /* Set data block received flag */
        I2C_OnMasterBlockReceived(DeviceDataPrv->UserData); /* Invoke OnMasterBlockReceived event */
      }
    }
  } else {
    if ((Status & I2C_PDD_ARBIT_LOST) != 0x00U) { /* Arbitration lost? */
   10372:	2410      	movs	r4, #16
   10374:	4214      	tst	r4, r2
   10376:	d0fb      	beq.n	10370 <I2C_Interrupt+0x60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:294
      DeviceDataPrv->OutLenM = 0x00U;  /* Any character is not for sent */
   10378:	8201      	strh	r1, [r0, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:295
      DeviceDataPrv->InpLenM = 0x00U;  /* Any character is not for reception */
   1037a:	8101      	strh	r1, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:297
      DeviceDataPrv->SendStop = LDD_I2C_SEND_STOP; /* Set variable for sending stop condition (for master mode) */
      DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* Any character is not for sent or reception*/
   1037c:	7801      	ldrb	r1, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:296
    }
  } else {
    if ((Status & I2C_PDD_ARBIT_LOST) != 0x00U) { /* Arbitration lost? */
      DeviceDataPrv->OutLenM = 0x00U;  /* Any character is not for sent */
      DeviceDataPrv->InpLenM = 0x00U;  /* Any character is not for reception */
      DeviceDataPrv->SendStop = LDD_I2C_SEND_STOP; /* Set variable for sending stop condition (for master mode) */
   1037e:	2201      	movs	r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:297
      DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* Any character is not for sent or reception*/
   10380:	4391      	bics	r1, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:296
    }
  } else {
    if ((Status & I2C_PDD_ARBIT_LOST) != 0x00U) { /* Arbitration lost? */
      DeviceDataPrv->OutLenM = 0x00U;  /* Any character is not for sent */
      DeviceDataPrv->InpLenM = 0x00U;  /* Any character is not for reception */
      DeviceDataPrv->SendStop = LDD_I2C_SEND_STOP; /* Set variable for sending stop condition (for master mode) */
   10382:	7082      	strb	r2, [r0, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:297
      DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* Any character is not for sent or reception*/
   10384:	7001      	strb	r1, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:298
      I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_RX_DIRECTION); /* Switch to Rx mode */
   10386:	789a      	ldrb	r2, [r3, #2]
   10388:	43a2      	bics	r2, r4
   1038a:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:299
      ErrorMask |= LDD_I2C_ARBIT_LOST; /* Set the ArbitLost error mask */
   1038c:	2204      	movs	r2, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:303
    }
  }
  if (ErrorMask != 0x00U) {            /* Is any error mask set? */
    DeviceDataPrv->ErrorMask |= ErrorMask; /* Update list of error mask value */
   1038e:	8883      	ldrh	r3, [r0, #4]
   10390:	4313      	orrs	r3, r2
   10392:	8083      	strh	r3, [r0, #4]
   10394:	e7ec      	b.n	10370 <I2C_Interrupt+0x60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:276
          I2C_PDD_WriteDataReg(I2C1_BASE_PTR, DeviceDataPrv->SlaveAddr); /* Send second part of the 10-bit addres */
          DeviceDataPrv->SerFlag |= (ADDR_COMPLETE); /* Address complete */
        }
      }
    } else {
      DeviceDataPrv->InpLenM--;        /* Decrease number of chars for the receive */
   10396:	8902      	ldrh	r2, [r0, #8]
   10398:	3a01      	subs	r2, #1
   1039a:	b292      	uxth	r2, r2
   1039c:	8102      	strh	r2, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:277
      if (DeviceDataPrv->InpLenM != 0x00U) { /* Is any char. for reception? */
   1039e:	2a00      	cmp	r2, #0
   103a0:	d12b      	bne.n	103fa <I2C_Interrupt+0xea>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:282
        if (DeviceDataPrv->InpLenM == 0x01U) {
          I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_DISABLE); /* Transmit NACK */
        }
      } else {
        DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* Clear flag "busy" */
   103a2:	7802      	ldrb	r2, [r0, #0]
   103a4:	2101      	movs	r1, #1
   103a6:	438a      	bics	r2, r1
   103a8:	7002      	strb	r2, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:283
        I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_SLAVE_MODE); /* If no, switch device to slave mode (stop signal sent) */
   103aa:	789a      	ldrb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:284
        I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_ENABLE); /* Transmit ACK */
   103ac:	2108      	movs	r1, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:283
        if (DeviceDataPrv->InpLenM == 0x01U) {
          I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_DISABLE); /* Transmit NACK */
        }
      } else {
        DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* Clear flag "busy" */
        I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_SLAVE_MODE); /* If no, switch device to slave mode (stop signal sent) */
   103ae:	43a2      	bics	r2, r4
   103b0:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:284
        I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_ENABLE); /* Transmit ACK */
   103b2:	789a      	ldrb	r2, [r3, #2]
   103b4:	438a      	bics	r2, r1
   103b6:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:286
      }
      *(DeviceDataPrv->InpPtrM)++ = I2C_PDD_ReadDataReg(I2C1_BASE_PTR); /* Receive character */
   103b8:	68c3      	ldr	r3, [r0, #12]
   103ba:	1c5a      	adds	r2, r3, #1
   103bc:	60c2      	str	r2, [r0, #12]
   103be:	4a2d      	ldr	r2, [pc, #180]	; (10474 <I2C_Interrupt+0x164>)
   103c0:	7912      	ldrb	r2, [r2, #4]
   103c2:	701a      	strb	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:287
      if (DeviceDataPrv->InpLenM == 0x00U) { /* Is any char. for reception? */
   103c4:	8903      	ldrh	r3, [r0, #8]
   103c6:	2b00      	cmp	r3, #0
   103c8:	d1d2      	bne.n	10370 <I2C_Interrupt+0x60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:288
        DeviceDataPrv->StatusFlag |= MASTER_BLOCK_RECEIVED; /* Set data block received flag */
   103ca:	7842      	ldrb	r2, [r0, #1]
   103cc:	2302      	movs	r3, #2
   103ce:	4313      	orrs	r3, r2
   103d0:	7043      	strb	r3, [r0, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:289
        I2C_OnMasterBlockReceived(DeviceDataPrv->UserData); /* Invoke OnMasterBlockReceived event */
   103d2:	6a00      	ldr	r0, [r0, #32]
   103d4:	f7f2 fbd0 	bl	2b78 <I2C_OnMasterBlockReceived>
   103d8:	e7ca      	b.n	10370 <I2C_Interrupt+0x60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:233
  Status = I2C_PDD_ReadStatusReg(I2C1_BASE_PTR); /* Safe status register */
  I2C_PDD_ClearInterruptFlags(I2C1_BASE_PTR, (Status)); /* Clear interrupt flag */
  if (I2C_PDD_GetMasterMode(I2C1_BASE_PTR) == I2C_PDD_MASTER_MODE) { /* Is device in master mode? */
    if (I2C_PDD_GetTransmitMode(I2C1_BASE_PTR) == I2C_PDD_TX_DIRECTION) { /* Is device in Tx mode? */
      if ((Status & I2C_PDD_RX_ACKNOWLEDGE) != 0x00U){ /* NACK received? */
        I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_SLAVE_MODE); /* Switch device to slave mode (stop signal sent) */
   103da:	789a      	ldrb	r2, [r3, #2]
   103dc:	43a2      	bics	r2, r4
   103de:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:234
        I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_RX_DIRECTION); /* Switch to Rx mode */
   103e0:	789a      	ldrb	r2, [r3, #2]
   103e2:	438a      	bics	r2, r1
   103e4:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:235
        DeviceDataPrv->OutLenM = 0x00U; /* No character for sending */
   103e6:	2300      	movs	r3, #0
   103e8:	8203      	strh	r3, [r0, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:236
        DeviceDataPrv->InpLenM = 0x00U; /* No character for reception */
   103ea:	8103      	strh	r3, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:237
        DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* No character for sending or reception */
   103ec:	7803      	ldrb	r3, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:238
        DeviceDataPrv->SerFlag |= (ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Set the flag */
   103ee:	2206      	movs	r2, #6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:237
      if ((Status & I2C_PDD_RX_ACKNOWLEDGE) != 0x00U){ /* NACK received? */
        I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_SLAVE_MODE); /* Switch device to slave mode (stop signal sent) */
        I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_RX_DIRECTION); /* Switch to Rx mode */
        DeviceDataPrv->OutLenM = 0x00U; /* No character for sending */
        DeviceDataPrv->InpLenM = 0x00U; /* No character for reception */
        DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* No character for sending or reception */
   103f0:	43ab      	bics	r3, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:238
        DeviceDataPrv->SerFlag |= (ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Set the flag */
   103f2:	4313      	orrs	r3, r2
   103f4:	7003      	strb	r3, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:239
        ErrorMask |= LDD_I2C_MASTER_NACK; /* Set the Master Nack error mask */
   103f6:	2208      	movs	r2, #8
   103f8:	e7c9      	b.n	1038e <I2C_Interrupt+0x7e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:278
        }
      }
    } else {
      DeviceDataPrv->InpLenM--;        /* Decrease number of chars for the receive */
      if (DeviceDataPrv->InpLenM != 0x00U) { /* Is any char. for reception? */
        if (DeviceDataPrv->InpLenM == 0x01U) {
   103fa:	2a01      	cmp	r2, #1
   103fc:	d1dc      	bne.n	103b8 <I2C_Interrupt+0xa8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:279
          I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_DISABLE); /* Transmit NACK */
   103fe:	7899      	ldrb	r1, [r3, #2]
   10400:	2208      	movs	r2, #8
   10402:	430a      	orrs	r2, r1
   10404:	709a      	strb	r2, [r3, #2]
   10406:	e7d7      	b.n	103b8 <I2C_Interrupt+0xa8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:271
              DeviceDataPrv->StatusFlag |= MASTER_BLOCK_SENT; /* Set data block sent flag */
              I2C_OnMasterBlockSent(DeviceDataPrv->UserData); /* Invoke OnMasterBlockSent event */
            }
          }
        } else {
          I2C_PDD_WriteDataReg(I2C1_BASE_PTR, DeviceDataPrv->SlaveAddr); /* Send second part of the 10-bit addres */
   10408:	7982      	ldrb	r2, [r0, #6]
   1040a:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:272
          DeviceDataPrv->SerFlag |= (ADDR_COMPLETE); /* Address complete */
   1040c:	7802      	ldrb	r2, [r0, #0]
   1040e:	2302      	movs	r3, #2
   10410:	4313      	orrs	r3, r2
   10412:	7003      	strb	r3, [r0, #0]
   10414:	e7ac      	b.n	10370 <I2C_Interrupt+0x60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:244
        ErrorMask |= LDD_I2C_MASTER_NACK; /* Set the Master Nack error mask */
      } else {
        if ((DeviceDataPrv->SerFlag & ADDR_COMPLETE) != 0x00U) { /* If 10-bit addr has been completed */
          if (DeviceDataPrv->OutLenM != 0x00U) { /* Is any char. for transmitting? */
            DeviceDataPrv->OutLenM--;  /* Decrease number of chars for the transmit */
            I2C_PDD_WriteDataReg(I2C1_BASE_PTR, *(DeviceDataPrv->OutPtrM)++); /* Send character */
   10416:	6942      	ldr	r2, [r0, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:243
        DeviceDataPrv->SerFlag |= (ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Set the flag */
        ErrorMask |= LDD_I2C_MASTER_NACK; /* Set the Master Nack error mask */
      } else {
        if ((DeviceDataPrv->SerFlag & ADDR_COMPLETE) != 0x00U) { /* If 10-bit addr has been completed */
          if (DeviceDataPrv->OutLenM != 0x00U) { /* Is any char. for transmitting? */
            DeviceDataPrv->OutLenM--;  /* Decrease number of chars for the transmit */
   10418:	3e01      	subs	r6, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:244
            I2C_PDD_WriteDataReg(I2C1_BASE_PTR, *(DeviceDataPrv->OutPtrM)++); /* Send character */
   1041a:	1c51      	adds	r1, r2, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:243
        DeviceDataPrv->SerFlag |= (ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Set the flag */
        ErrorMask |= LDD_I2C_MASTER_NACK; /* Set the Master Nack error mask */
      } else {
        if ((DeviceDataPrv->SerFlag & ADDR_COMPLETE) != 0x00U) { /* If 10-bit addr has been completed */
          if (DeviceDataPrv->OutLenM != 0x00U) { /* Is any char. for transmitting? */
            DeviceDataPrv->OutLenM--;  /* Decrease number of chars for the transmit */
   1041c:	8206      	strh	r6, [r0, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:244
            I2C_PDD_WriteDataReg(I2C1_BASE_PTR, *(DeviceDataPrv->OutPtrM)++); /* Send character */
   1041e:	6141      	str	r1, [r0, #20]
   10420:	7812      	ldrb	r2, [r2, #0]
   10422:	711a      	strb	r2, [r3, #4]
   10424:	e7a4      	b.n	10370 <I2C_Interrupt+0x60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:261
                I2C_PDD_RepeatStart(I2C1_BASE_PTR); /* Repeat start cycle generated */
                I2C_PDD_WriteDataReg(I2C1_BASE_PTR, (uint8_t)(DeviceDataPrv->SlaveAddrHigh | 0x01U)); /* Send slave address high byte*/
                DeviceDataPrv->SerFlag |= REP_ADDR_COMPLETE;
              }
            } else {
              DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* Clear flag "busy" */
   10426:	43aa      	bics	r2, r5
   10428:	7002      	strb	r2, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:262
              if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
   1042a:	7882      	ldrb	r2, [r0, #2]
   1042c:	2a01      	cmp	r2, #1
   1042e:	d014      	beq.n	1045a <I2C_Interrupt+0x14a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:266
                I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_SLAVE_MODE); /* Switch device to slave mode (stop signal sent) */
                I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_RX_DIRECTION); /* Switch to Rx mode */
              }
              DeviceDataPrv->StatusFlag |= MASTER_BLOCK_SENT; /* Set data block sent flag */
   10430:	7842      	ldrb	r2, [r0, #1]
   10432:	2301      	movs	r3, #1
   10434:	4313      	orrs	r3, r2
   10436:	7043      	strb	r3, [r0, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:267
              I2C_OnMasterBlockSent(DeviceDataPrv->UserData); /* Invoke OnMasterBlockSent event */
   10438:	6a00      	ldr	r0, [r0, #32]
   1043a:	f7f2 fb93 	bl	2b64 <I2C_OnMasterBlockSent>
   1043e:	e797      	b.n	10370 <I2C_Interrupt+0x60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:256
                  I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_ENABLE); /* else transmit ACK enable */
                }
                I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_RX_DIRECTION); /* Switch to Rx mode */
                (void)I2C_PDD_ReadDataReg(I2C1_BASE_PTR); /* Dummy read character */
              } else {                 /* Repeated address has not been completed for 10-bit addressing mode */
                I2C_PDD_RepeatStart(I2C1_BASE_PTR); /* Repeat start cycle generated */
   10440:	789a      	ldrb	r2, [r3, #2]
   10442:	430a      	orrs	r2, r1
   10444:	b2d2      	uxtb	r2, r2
   10446:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:257
                I2C_PDD_WriteDataReg(I2C1_BASE_PTR, (uint8_t)(DeviceDataPrv->SlaveAddrHigh | 0x01U)); /* Send slave address high byte*/
   10448:	79c4      	ldrb	r4, [r0, #7]
   1044a:	2201      	movs	r2, #1
   1044c:	4322      	orrs	r2, r4
   1044e:	b2d2      	uxtb	r2, r2
   10450:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:258
                DeviceDataPrv->SerFlag |= REP_ADDR_COMPLETE;
   10452:	7803      	ldrb	r3, [r0, #0]
   10454:	4319      	orrs	r1, r3
   10456:	7001      	strb	r1, [r0, #0]
   10458:	e78a      	b.n	10370 <I2C_Interrupt+0x60>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:263
              }
            } else {
              DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* Clear flag "busy" */
              if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
                I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_SLAVE_MODE); /* Switch device to slave mode (stop signal sent) */
   1045a:	789a      	ldrb	r2, [r3, #2]
   1045c:	43a2      	bics	r2, r4
   1045e:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:264
                I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_RX_DIRECTION); /* Switch to Rx mode */
   10460:	789a      	ldrb	r2, [r3, #2]
   10462:	438a      	bics	r2, r1
   10464:	709a      	strb	r2, [r3, #2]
   10466:	e7e3      	b.n	10430 <I2C_Interrupt+0x120>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:249
            I2C_PDD_WriteDataReg(I2C1_BASE_PTR, *(DeviceDataPrv->OutPtrM)++); /* Send character */
          } else {
            if (DeviceDataPrv->InpLenM != 0x00U) { /* Is any char. for reception? */
              if ((DeviceDataPrv->SerFlag & REP_ADDR_COMPLETE) != 0x00U) { /* If repeated start and addr tx has been completed for 10-bit mode ?*/
                if (DeviceDataPrv->InpLenM == 0x01U) { /* If only one char to receive */
                  I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_DISABLE); /* then transmit ACK disable */
   10468:	7899      	ldrb	r1, [r3, #2]
   1046a:	2208      	movs	r2, #8
   1046c:	430a      	orrs	r2, r1
   1046e:	709a      	strb	r2, [r3, #2]
   10470:	e778      	b.n	10364 <I2C_Interrupt+0x54>
   10472:	46c0      	nop			; (mov r8, r8)
   10474:	40067000 	.word	0x40067000

00010478 <I2C_Init>:
I2C_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:331
**     @return
**                         - Pointer to the device data structure. 
*/
/* ===================================================================*/
LDD_TDeviceData* I2C_Init(LDD_TUserData *UserDataPtr)
{
   10478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:337
  /* Allocate HAL device structure */
  I2C_TDeviceData *DeviceDataPrv;
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;

  DeviceDataPrv->UserData = UserDataPtr; /* Store the RTOS device structure */
   1047a:	4c27      	ldr	r4, [pc, #156]	; (10518 <I2C_Init+0xa0>)
   1047c:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:342

  /* Allocate interrupt vector */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_I2C1);
   1047e:	2019      	movs	r0, #25
   10480:	f7fe fd62 	bl	ef48 <_int_get_isr_data>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:343
  DeviceDataPrv->SavedISRSettings.isrFunction = _int_install_isr(LDD_ivIndex_INT_I2C1, I2C_Interrupt, DeviceDataPrv);
   10484:	1c22      	adds	r2, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:342
  DeviceDataPrv->UserData = UserDataPtr; /* Store the RTOS device structure */

  /* Allocate interrupt vector */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_I2C1);
   10486:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:343
  DeviceDataPrv->SavedISRSettings.isrFunction = _int_install_isr(LDD_ivIndex_INT_I2C1, I2C_Interrupt, DeviceDataPrv);
   10488:	4924      	ldr	r1, [pc, #144]	; (1051c <I2C_Init+0xa4>)
   1048a:	2019      	movs	r0, #25
   1048c:	f7fe fd7c 	bl	ef88 <_int_install_isr>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:344
  DeviceDataPrv->SerFlag = ADDR_7;     /* Reset all flags start with 7-bit address mode */
   10490:	2320      	movs	r3, #32
   10492:	7023      	strb	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:345
  DeviceDataPrv->SlaveAddr = 0x3CU;    /* Set variable for slave address */
   10494:	233c      	movs	r3, #60	; 0x3c
   10496:	71a3      	strb	r3, [r4, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:346
  DeviceDataPrv->SendStop = LDD_I2C_SEND_STOP; /* Set variable for sending stop condition (for master mode) */
   10498:	2301      	movs	r3, #1
   1049a:	70a3      	strb	r3, [r4, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:347
  DeviceDataPrv->InpLenM = 0x00U;      /* Set zero counter of data of reception */
   1049c:	2300      	movs	r3, #0
   1049e:	8123      	strh	r3, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:348
  DeviceDataPrv->OutLenM = 0x00U;      /* Set zero counter of data of transmission */
   104a0:	8223      	strh	r3, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:350
  DeviceDataPrv->StatusFlag = 0x00U;   /* Clear data block transfer complete flags */
  DeviceDataPrv->ErrorMask = 0x00U;    /* Clear variable for errors mask value */
   104a2:	80a3      	strh	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:347
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_I2C1);
  DeviceDataPrv->SavedISRSettings.isrFunction = _int_install_isr(LDD_ivIndex_INT_I2C1, I2C_Interrupt, DeviceDataPrv);
  DeviceDataPrv->SerFlag = ADDR_7;     /* Reset all flags start with 7-bit address mode */
  DeviceDataPrv->SlaveAddr = 0x3CU;    /* Set variable for slave address */
  DeviceDataPrv->SendStop = LDD_I2C_SEND_STOP; /* Set variable for sending stop condition (for master mode) */
  DeviceDataPrv->InpLenM = 0x00U;      /* Set zero counter of data of reception */
   104a4:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:352
  DeviceDataPrv->OutLenM = 0x00U;      /* Set zero counter of data of transmission */
  DeviceDataPrv->StatusFlag = 0x00U;   /* Clear data block transfer complete flags */
  DeviceDataPrv->ErrorMask = 0x00U;    /* Clear variable for errors mask value */
  /* SIM_SCGC4: I2C1=1 */
  SIM_SCGC4 |= SIM_SCGC4_I2C1_MASK;
   104a6:	491e      	ldr	r1, [pc, #120]	; (10520 <I2C_Init+0xa8>)
   104a8:	4b1e      	ldr	r3, [pc, #120]	; (10524 <I2C_Init+0xac>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:349
  DeviceDataPrv->SerFlag = ADDR_7;     /* Reset all flags start with 7-bit address mode */
  DeviceDataPrv->SlaveAddr = 0x3CU;    /* Set variable for slave address */
  DeviceDataPrv->SendStop = LDD_I2C_SEND_STOP; /* Set variable for sending stop condition (for master mode) */
  DeviceDataPrv->InpLenM = 0x00U;      /* Set zero counter of data of reception */
  DeviceDataPrv->OutLenM = 0x00U;      /* Set zero counter of data of transmission */
  DeviceDataPrv->StatusFlag = 0x00U;   /* Clear data block transfer complete flags */
   104aa:	7062      	strb	r2, [r4, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:352
  DeviceDataPrv->ErrorMask = 0x00U;    /* Clear variable for errors mask value */
  /* SIM_SCGC4: I2C1=1 */
  SIM_SCGC4 |= SIM_SCGC4_I2C1_MASK;
   104ac:	58cd      	ldr	r5, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:343

  /* Allocate interrupt vector */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_I2C1);
  DeviceDataPrv->SavedISRSettings.isrFunction = _int_install_isr(LDD_ivIndex_INT_I2C1, I2C_Interrupt, DeviceDataPrv);
   104ae:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:352
  DeviceDataPrv->InpLenM = 0x00U;      /* Set zero counter of data of reception */
  DeviceDataPrv->OutLenM = 0x00U;      /* Set zero counter of data of transmission */
  DeviceDataPrv->StatusFlag = 0x00U;   /* Clear data block transfer complete flags */
  DeviceDataPrv->ErrorMask = 0x00U;    /* Clear variable for errors mask value */
  /* SIM_SCGC4: I2C1=1 */
  SIM_SCGC4 |= SIM_SCGC4_I2C1_MASK;
   104b0:	2080      	movs	r0, #128	; 0x80
   104b2:	4328      	orrs	r0, r5
   104b4:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:354
  /* I2C1_C1: IICEN=0,IICIE=0,MST=0,TX=0,TXAK=0,RSTA=0,WUEN=0,DMAEN=0 */
  I2C1_C1 = 0x00U;                     /* Clear control register */
   104b6:	4b1c      	ldr	r3, [pc, #112]	; (10528 <I2C_Init+0xb0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:356
  /* I2C1_FLT: SHEN=0,STOPF=1,SSIE=0,STARTF=1,FLT=0 */
  I2C1_FLT = (I2C_FLT_STOPF_MASK | I2C_FLT_STARTF_MASK | I2C_FLT_FLT(0x00)); /* Clear bus status interrupt flags */
   104b8:	2150      	movs	r1, #80	; 0x50
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:354
  DeviceDataPrv->StatusFlag = 0x00U;   /* Clear data block transfer complete flags */
  DeviceDataPrv->ErrorMask = 0x00U;    /* Clear variable for errors mask value */
  /* SIM_SCGC4: I2C1=1 */
  SIM_SCGC4 |= SIM_SCGC4_I2C1_MASK;
  /* I2C1_C1: IICEN=0,IICIE=0,MST=0,TX=0,TXAK=0,RSTA=0,WUEN=0,DMAEN=0 */
  I2C1_C1 = 0x00U;                     /* Clear control register */
   104ba:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:356
  /* I2C1_FLT: SHEN=0,STOPF=1,SSIE=0,STARTF=1,FLT=0 */
  I2C1_FLT = (I2C_FLT_STOPF_MASK | I2C_FLT_STARTF_MASK | I2C_FLT_FLT(0x00)); /* Clear bus status interrupt flags */
   104bc:	7199      	strb	r1, [r3, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:358
  /* I2C1_S: TCF=0,IAAS=0,BUSY=0,ARBL=0,RAM=0,SRW=0,IICIF=1,RXAK=0 */
  I2C1_S = I2C_S_IICIF_MASK;           /* Clear interrupt flag */
   104be:	2102      	movs	r1, #2
   104c0:	70d9      	strb	r1, [r3, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:360
  /* PORTC_PCR2: ISF=0,MUX=2 */
  PORTC_PCR2 = (uint32_t)((PORTC_PCR2 & (uint32_t)~(uint32_t)(
   104c2:	491a      	ldr	r1, [pc, #104]	; (1052c <I2C_Init+0xb4>)
   104c4:	4d1a      	ldr	r5, [pc, #104]	; (10530 <I2C_Init+0xb8>)
   104c6:	688e      	ldr	r6, [r1, #8]
   104c8:	2080      	movs	r0, #128	; 0x80
   104ca:	0080      	lsls	r0, r0, #2
   104cc:	402e      	ands	r6, r5
   104ce:	4306      	orrs	r6, r0
   104d0:	608e      	str	r6, [r1, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:367
                PORT_PCR_MUX(0x05)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x02)
               ));
  /* PORTC_PCR1: ISF=0,MUX=2 */
  PORTC_PCR1 = (uint32_t)((PORTC_PCR1 & (uint32_t)~(uint32_t)(
   104d2:	684e      	ldr	r6, [r1, #4]
   104d4:	4035      	ands	r5, r6
   104d6:	4305      	orrs	r5, r0
   104d8:	604d      	str	r5, [r1, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:374
                PORT_PCR_MUX(0x05)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x02)
               ));
  /* NVIC_IPR2: PRI_9=0x80 */
  NVIC_IPR2 = (uint32_t)((NVIC_IPR2 & (uint32_t)~(uint32_t)(
   104da:	4916      	ldr	r1, [pc, #88]	; (10534 <I2C_Init+0xbc>)
   104dc:	25c2      	movs	r5, #194	; 0xc2
   104de:	00ad      	lsls	r5, r5, #2
   104e0:	594f      	ldr	r7, [r1, r5]
   104e2:	4e15      	ldr	r6, [pc, #84]	; (10538 <I2C_Init+0xc0>)
   104e4:	403e      	ands	r6, r7
   104e6:	2780      	movs	r7, #128	; 0x80
   104e8:	023f      	lsls	r7, r7, #8
   104ea:	433e      	orrs	r6, r7
   104ec:	514e      	str	r6, [r1, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:380
               NVIC_IP_PRI_9(0x7F)
              )) | (uint32_t)(
               NVIC_IP_PRI_9(0x80)
              ));
  /* NVIC_ISER: SETENA|=0x0200 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x0200);
   104ee:	680d      	ldr	r5, [r1, #0]
   104f0:	4328      	orrs	r0, r5
   104f2:	6008      	str	r0, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:382
  /* I2C1_C2: GCAEN=0,ADEXT=0,HDRS=0,SBRC=0,RMEN=0,AD=0 */
  I2C1_C2 = I2C_C2_AD(0x00);
   104f4:	715a      	strb	r2, [r3, #5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:384
  /* I2C1_FLT: SHEN=0,STOPF=0,SSIE=0,STARTF=0,FLT=0 */
  I2C1_FLT = I2C_FLT_FLT(0x00);        /* Set glitch filter register */
   104f6:	719a      	strb	r2, [r3, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:386
  /* I2C1_SMB: FACK=0,ALERTEN=0,SIICAEN=0,TCKSEL=0,SLTF=1,SHTF1=0,SHTF2=0,SHTF2IE=0 */
  I2C1_SMB = I2C_SMB_SLTF_MASK;
   104f8:	2208      	movs	r2, #8
   104fa:	721a      	strb	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:388
  /* I2C1_F: MULT=1,ICR=0x12 */
  I2C1_F = (I2C_F_MULT(0x01) | I2C_F_ICR(0x12)); /* Set prescaler bits */
   104fc:	2252      	movs	r2, #82	; 0x52
   104fe:	705a      	strb	r2, [r3, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:389
  I2C_PDD_EnableDevice(I2C1_BASE_PTR, PDD_ENABLE); /* Enable device */
   10500:	7899      	ldrb	r1, [r3, #2]
   10502:	2280      	movs	r2, #128	; 0x80
   10504:	430a      	orrs	r2, r1
   10506:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:390
  I2C_PDD_EnableInterrupt(I2C1_BASE_PTR); /* Enable interrupt */
   10508:	7899      	ldrb	r1, [r3, #2]
   1050a:	2240      	movs	r2, #64	; 0x40
   1050c:	430a      	orrs	r2, r1
   1050e:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:392
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_I2C_ID,DeviceDataPrv);
   10510:	4b0a      	ldr	r3, [pc, #40]	; (1053c <I2C_Init+0xc4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:394
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the data data structure */
}
   10512:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:392
  /* I2C1_F: MULT=1,ICR=0x12 */
  I2C1_F = (I2C_F_MULT(0x01) | I2C_F_ICR(0x12)); /* Set prescaler bits */
  I2C_PDD_EnableDevice(I2C1_BASE_PTR, PDD_ENABLE); /* Enable device */
  I2C_PDD_EnableInterrupt(I2C1_BASE_PTR); /* Enable interrupt */
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_I2C_ID,DeviceDataPrv);
   10514:	619c      	str	r4, [r3, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:394
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the data data structure */
}
   10516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10518:	1fffe1e4 	.word	0x1fffe1e4
   1051c:	00010311 	.word	0x00010311
   10520:	40047000 	.word	0x40047000
   10524:	00001034 	.word	0x00001034
   10528:	40067000 	.word	0x40067000
   1052c:	4004b000 	.word	0x4004b000
   10530:	fefff8ff 	.word	0xfefff8ff
   10534:	e000e100 	.word	0xe000e100
   10538:	ffff00ff 	.word	0xffff00ff
   1053c:	1fffe218 	.word	0x1fffe218

00010540 <I2C_MasterSendBlock>:
I2C_MasterSendBlock():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:473
**                           the active clock configuration
**                           ERR_BUSY - The I2C device is now running
*/
/* ===================================================================*/
LDD_TError I2C_MasterSendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, LDD_I2C_TSize Size, LDD_I2C_TSendStop SendStop)
{
   10540:	b5f0      	push	{r4, r5, r6, r7, lr}
   10542:	4647      	mov	r7, r8
   10544:	b480      	push	{r7}
   10546:	1c05      	adds	r5, r0, #0
   10548:	4688      	mov	r8, r1
   1054a:	1c16      	adds	r6, r2, #0
   1054c:	1c1f      	adds	r7, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:477
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  if (Size == 0x00U) {                 /* Test variable Size on zero */
    return ERR_OK;                     /* If zero then OK */
   1054e:	2400      	movs	r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:476
/* ===================================================================*/
LDD_TError I2C_MasterSendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, LDD_I2C_TSize Size, LDD_I2C_TSendStop SendStop)
{
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  if (Size == 0x00U) {                 /* Test variable Size on zero */
   10550:	2a00      	cmp	r2, #0
   10552:	d006      	beq.n	10562 <I2C_MasterSendBlock+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:479
    return ERR_OK;                     /* If zero then OK */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
   10554:	7882      	ldrb	r2, [r0, #2]
   10556:	2a01      	cmp	r2, #1
   10558:	d007      	beq.n	1056a <I2C_MasterSendBlock+0x2a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:486
       ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
       (DeviceDataPrv->OutLenM != 0x00U))  {
      return ERR_BUSY;                 /* If yes then error */
    }
  } else {
    if (((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || /* Is the bus busy? */  \
   1055a:	7803      	ldrb	r3, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:483
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
       ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
       (DeviceDataPrv->OutLenM != 0x00U))  {
      return ERR_BUSY;                 /* If yes then error */
   1055c:	2408      	movs	r4, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:486
    }
  } else {
    if (((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || /* Is the bus busy? */  \
   1055e:	07da      	lsls	r2, r3, #31
   10560:	d50b      	bpl.n	1057a <I2C_MasterSendBlock+0x3a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:520
    }
  }
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
  return ERR_OK;                       /* OK */
}
   10562:	1c20      	adds	r0, r4, #0
   10564:	bc04      	pop	{r2}
   10566:	4690      	mov	r8, r2
   10568:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:480

  if (Size == 0x00U) {                 /* Test variable Size on zero */
    return ERR_OK;                     /* If zero then OK */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
   1056a:	4b23      	ldr	r3, [pc, #140]	; (105f8 <I2C_MasterSendBlock+0xb8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:483
       ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
       (DeviceDataPrv->OutLenM != 0x00U))  {
      return ERR_BUSY;                 /* If yes then error */
   1056c:	2408      	movs	r4, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:480

  if (Size == 0x00U) {                 /* Test variable Size on zero */
    return ERR_OK;                     /* If zero then OK */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
   1056e:	78db      	ldrb	r3, [r3, #3]
   10570:	0699      	lsls	r1, r3, #26
   10572:	d4f6      	bmi.n	10562 <I2C_MasterSendBlock+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:481 (discriminator 1)
       ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
   10574:	7803      	ldrb	r3, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:480 (discriminator 1)

  if (Size == 0x00U) {                 /* Test variable Size on zero */
    return ERR_OK;                     /* If zero then OK */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
   10576:	421a      	tst	r2, r3
   10578:	d1f3      	bne.n	10562 <I2C_MasterSendBlock+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:482
       ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
       (DeviceDataPrv->OutLenM != 0x00U))  {
   1057a:	8a2c      	ldrh	r4, [r5, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:481
  if (Size == 0x00U) {                 /* Test variable Size on zero */
    return ERR_OK;                     /* If zero then OK */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
       ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
   1057c:	2c00      	cmp	r4, #0
   1057e:	d001      	beq.n	10584 <I2C_MasterSendBlock+0x44>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:483
       (DeviceDataPrv->OutLenM != 0x00U))  {
      return ERR_BUSY;                 /* If yes then error */
   10580:	2408      	movs	r4, #8
   10582:	e7ee      	b.n	10562 <I2C_MasterSendBlock+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:492
      (DeviceDataPrv->OutLenM != 0x00U))  {
      return ERR_BUSY;                 /* If yes then error */
    }
  }
  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
   10584:	f7fe fcc6 	bl	ef14 <_int_disable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:493
  DeviceDataPrv->SerFlag |= MASTER_IN_PROGRES; /* Set flag "busy" */
   10588:	782a      	ldrb	r2, [r5, #0]
   1058a:	2301      	movs	r3, #1
   1058c:	4313      	orrs	r3, r2
   1058e:	702b      	strb	r3, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:494
  DeviceDataPrv->OutPtrM = (uint8_t *)BufferPtr; /* Save pointer to data for transmitting */
   10590:	4643      	mov	r3, r8
   10592:	616b      	str	r3, [r5, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:497
  DeviceDataPrv->OutLenM = Size;       /* Set the counter of output bufer's content */
  DeviceDataPrv->SendStop = SendStop;  /* Set generating stop condition */
  I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_TX_DIRECTION); /* Set TX mode */
   10594:	4b18      	ldr	r3, [pc, #96]	; (105f8 <I2C_MasterSendBlock+0xb8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:495
  }
  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
  DeviceDataPrv->SerFlag |= MASTER_IN_PROGRES; /* Set flag "busy" */
  DeviceDataPrv->OutPtrM = (uint8_t *)BufferPtr; /* Save pointer to data for transmitting */
  DeviceDataPrv->OutLenM = Size;       /* Set the counter of output bufer's content */
   10596:	822e      	strh	r6, [r5, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:496
  DeviceDataPrv->SendStop = SendStop;  /* Set generating stop condition */
   10598:	70af      	strb	r7, [r5, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:497
  I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_TX_DIRECTION); /* Set TX mode */
   1059a:	7899      	ldrb	r1, [r3, #2]
   1059c:	2210      	movs	r2, #16
   1059e:	430a      	orrs	r2, r1
   105a0:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:498
  if (I2C_PDD_GetMasterMode(I2C1_BASE_PTR) == I2C_PDD_MASTER_MODE) { /* Is device in master mode? */
   105a2:	789a      	ldrb	r2, [r3, #2]
   105a4:	0691      	lsls	r1, r2, #26
   105a6:	d410      	bmi.n	105ca <I2C_MasterSendBlock+0x8a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:501
    I2C_PDD_RepeatStart(I2C1_BASE_PTR); /* If yes then repeat start cycle generated */
  } else {
    I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_MASTER_MODE); /* If no then start signal generated */
   105a8:	7899      	ldrb	r1, [r3, #2]
   105aa:	2220      	movs	r2, #32
   105ac:	430a      	orrs	r2, r1
   105ae:	b2d2      	uxtb	r2, r2
   105b0:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:503
  }
  if ((DeviceDataPrv->SerFlag & ADDR_7) != 0x00U) { /* Is 7-bit addressing set ? */
   105b2:	782b      	ldrb	r3, [r5, #0]
   105b4:	069a      	lsls	r2, r3, #26
   105b6:	d50d      	bpl.n	105d4 <I2C_MasterSendBlock+0x94>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:504
    DeviceDataPrv->SerFlag |= (ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Only one byte of address will be sent 7-bit address mode*/
   105b8:	2206      	movs	r2, #6
   105ba:	4313      	orrs	r3, r2
   105bc:	702b      	strb	r3, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:505
    I2C_PDD_WriteDataReg(I2C1_BASE_PTR, DeviceDataPrv->SlaveAddr); /* Send slave address */
   105be:	79aa      	ldrb	r2, [r5, #6]
   105c0:	4b0d      	ldr	r3, [pc, #52]	; (105f8 <I2C_MasterSendBlock+0xb8>)
   105c2:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:518
        I2C_PDD_WriteDataReg(I2C1_BASE_PTR, 0x00U); /* Send general call address */
      }
    }
  }
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
   105c4:	f7fe fcb2 	bl	ef2c <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:519
  return ERR_OK;                       /* OK */
   105c8:	e7cb      	b.n	10562 <I2C_MasterSendBlock+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:499
  DeviceDataPrv->OutPtrM = (uint8_t *)BufferPtr; /* Save pointer to data for transmitting */
  DeviceDataPrv->OutLenM = Size;       /* Set the counter of output bufer's content */
  DeviceDataPrv->SendStop = SendStop;  /* Set generating stop condition */
  I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_TX_DIRECTION); /* Set TX mode */
  if (I2C_PDD_GetMasterMode(I2C1_BASE_PTR) == I2C_PDD_MASTER_MODE) { /* Is device in master mode? */
    I2C_PDD_RepeatStart(I2C1_BASE_PTR); /* If yes then repeat start cycle generated */
   105ca:	7899      	ldrb	r1, [r3, #2]
   105cc:	2204      	movs	r2, #4
   105ce:	430a      	orrs	r2, r1
   105d0:	709a      	strb	r2, [r3, #2]
   105d2:	e7ee      	b.n	105b2 <I2C_MasterSendBlock+0x72>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:507
  }
  if ((DeviceDataPrv->SerFlag & ADDR_7) != 0x00U) { /* Is 7-bit addressing set ? */
    DeviceDataPrv->SerFlag |= (ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Only one byte of address will be sent 7-bit address mode*/
    I2C_PDD_WriteDataReg(I2C1_BASE_PTR, DeviceDataPrv->SlaveAddr); /* Send slave address */
  } else {
    if ((DeviceDataPrv->SerFlag & ADDR_10) != 0x00U) { /* Is 10-bit addressing set ? */
   105d4:	2210      	movs	r2, #16
   105d6:	401a      	ands	r2, r3
   105d8:	d006      	beq.n	105e8 <I2C_MasterSendBlock+0xa8>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:508
      DeviceDataPrv->SerFlag &= (uint8_t)~(ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Second byte of address will be sent later */
   105da:	2206      	movs	r2, #6
   105dc:	4393      	bics	r3, r2
   105de:	702b      	strb	r3, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:509
      I2C_PDD_WriteDataReg(I2C1_BASE_PTR, DeviceDataPrv->SlaveAddrHigh); /* Send slave address - high byte */
   105e0:	79ea      	ldrb	r2, [r5, #7]
   105e2:	4b05      	ldr	r3, [pc, #20]	; (105f8 <I2C_MasterSendBlock+0xb8>)
   105e4:	711a      	strb	r2, [r3, #4]
   105e6:	e7ed      	b.n	105c4 <I2C_MasterSendBlock+0x84>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:511
    } else {
      if ((DeviceDataPrv->SerFlag & GENERAL_CALL) != 0x00U) { /* Is general call command required ? */
   105e8:	0719      	lsls	r1, r3, #28
   105ea:	d5eb      	bpl.n	105c4 <I2C_MasterSendBlock+0x84>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:512
        DeviceDataPrv->SerFlag |= ADDR_COMPLETE; /* Only one byte of address will be sent in general call address mode*/
   105ec:	2102      	movs	r1, #2
   105ee:	430b      	orrs	r3, r1
   105f0:	702b      	strb	r3, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:513
        I2C_PDD_WriteDataReg(I2C1_BASE_PTR, 0x00U); /* Send general call address */
   105f2:	4b01      	ldr	r3, [pc, #4]	; (105f8 <I2C_MasterSendBlock+0xb8>)
   105f4:	711a      	strb	r2, [r3, #4]
   105f6:	e7e5      	b.n	105c4 <I2C_MasterSendBlock+0x84>
   105f8:	40067000 	.word	0x40067000

000105fc <I2C_MasterReceiveBlock>:
I2C_MasterReceiveBlock():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:605
**                           ERR_PARAM_MODE -  Stop condition isn't
**                           possible generated on end transmission.
*/
/* ===================================================================*/
LDD_TError I2C_MasterReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, LDD_I2C_TSize Size, LDD_I2C_TSendStop SendStop)
{
   105fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   105fe:	4647      	mov	r7, r8
   10600:	b480      	push	{r7}
   10602:	4688      	mov	r8, r1
   10604:	1c07      	adds	r7, r0, #0
   10606:	1c15      	adds	r5, r2, #0
   10608:	1c1e      	adds	r6, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:609
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  if (Size == 0x00U) {                 /* Test variable Size on zero */
    return ERR_OK;                     /* If zero then OK */
   1060a:	2400      	movs	r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:608
/* ===================================================================*/
LDD_TError I2C_MasterReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, LDD_I2C_TSize Size, LDD_I2C_TSendStop SendStop)
{
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  if (Size == 0x00U) {                 /* Test variable Size on zero */
   1060c:	2a00      	cmp	r2, #0
   1060e:	d002      	beq.n	10616 <I2C_MasterReceiveBlock+0x1a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:612
    return ERR_OK;                     /* If zero then OK */
  }
  if (SendStop == LDD_I2C_NO_SEND_STOP) { /* Test variable SendStop on supported value */
    return ERR_PARAM_MODE;             /* If not supported value then error */
   10610:	2481      	movs	r4, #129	; 0x81
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:611
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  if (Size == 0x00U) {                 /* Test variable Size on zero */
    return ERR_OK;                     /* If zero then OK */
  }
  if (SendStop == LDD_I2C_NO_SEND_STOP) { /* Test variable SendStop on supported value */
   10612:	2b00      	cmp	r3, #0
   10614:	d103      	bne.n	1061e <I2C_MasterReceiveBlock+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:653
    }
  }
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
  return ERR_OK;                       /* OK */
}
   10616:	1c20      	adds	r0, r4, #0
   10618:	bc04      	pop	{r2}
   1061a:	4690      	mov	r8, r2
   1061c:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:614
    return ERR_OK;                     /* If zero then OK */
  }
  if (SendStop == LDD_I2C_NO_SEND_STOP) { /* Test variable SendStop on supported value */
    return ERR_PARAM_MODE;             /* If not supported value then error */
  }
  if ((DeviceDataPrv->SerFlag & GENERAL_CALL) != 0x00U) { /* Is the general call flag set (SelectSlaveDevice - address type is general call) ? */
   1061e:	7803      	ldrb	r3, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:615
    return ERR_NOTAVAIL;               /* It is not possible to receive data - Call SelectSlaveDevice method */
   10620:	2409      	movs	r4, #9
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:614
    return ERR_OK;                     /* If zero then OK */
  }
  if (SendStop == LDD_I2C_NO_SEND_STOP) { /* Test variable SendStop on supported value */
    return ERR_PARAM_MODE;             /* If not supported value then error */
  }
  if ((DeviceDataPrv->SerFlag & GENERAL_CALL) != 0x00U) { /* Is the general call flag set (SelectSlaveDevice - address type is general call) ? */
   10622:	0718      	lsls	r0, r3, #28
   10624:	d4f7      	bmi.n	10616 <I2C_MasterReceiveBlock+0x1a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:617
    return ERR_NOTAVAIL;               /* It is not possible to receive data - Call SelectSlaveDevice method */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
   10626:	78ba      	ldrb	r2, [r7, #2]
   10628:	2a01      	cmp	r2, #1
   1062a:	d007      	beq.n	1063c <I2C_MasterReceiveBlock+0x40>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:621
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
      ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
      (DeviceDataPrv->InpLenM != 0x00U)) {
      return ERR_BUSY;                 /* If yes then error */
   1062c:	2408      	movs	r4, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:624
    }
  } else {
    if(((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || /* Is the bus busy? */  \
   1062e:	07d9      	lsls	r1, r3, #31
   10630:	d4f1      	bmi.n	10616 <I2C_MasterReceiveBlock+0x1a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:620
    return ERR_NOTAVAIL;               /* It is not possible to receive data - Call SelectSlaveDevice method */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
      ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
      (DeviceDataPrv->InpLenM != 0x00U)) {
   10632:	893c      	ldrh	r4, [r7, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:619
  if ((DeviceDataPrv->SerFlag & GENERAL_CALL) != 0x00U) { /* Is the general call flag set (SelectSlaveDevice - address type is general call) ? */
    return ERR_NOTAVAIL;               /* It is not possible to receive data - Call SelectSlaveDevice method */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
      ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
   10634:	2c00      	cmp	r4, #0
   10636:	d009      	beq.n	1064c <I2C_MasterReceiveBlock+0x50>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:621
      (DeviceDataPrv->InpLenM != 0x00U)) {
      return ERR_BUSY;                 /* If yes then error */
   10638:	2408      	movs	r4, #8
   1063a:	e7ec      	b.n	10616 <I2C_MasterReceiveBlock+0x1a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:618
  }
  if ((DeviceDataPrv->SerFlag & GENERAL_CALL) != 0x00U) { /* Is the general call flag set (SelectSlaveDevice - address type is general call) ? */
    return ERR_NOTAVAIL;               /* It is not possible to receive data - Call SelectSlaveDevice method */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
   1063c:	491c      	ldr	r1, [pc, #112]	; (106b0 <I2C_MasterReceiveBlock+0xb4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:621
      ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
      (DeviceDataPrv->InpLenM != 0x00U)) {
      return ERR_BUSY;                 /* If yes then error */
   1063e:	2408      	movs	r4, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:618
  }
  if ((DeviceDataPrv->SerFlag & GENERAL_CALL) != 0x00U) { /* Is the general call flag set (SelectSlaveDevice - address type is general call) ? */
    return ERR_NOTAVAIL;               /* It is not possible to receive data - Call SelectSlaveDevice method */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
   10640:	78c9      	ldrb	r1, [r1, #3]
   10642:	0688      	lsls	r0, r1, #26
   10644:	d4e7      	bmi.n	10616 <I2C_MasterReceiveBlock+0x1a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:618 (discriminator 1)
   10646:	421a      	tst	r2, r3
   10648:	d1e5      	bne.n	10616 <I2C_MasterReceiveBlock+0x1a>
   1064a:	e7f2      	b.n	10632 <I2C_MasterReceiveBlock+0x36>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:630
      (DeviceDataPrv->InpLenM != 0x00U)) {
      return ERR_BUSY;               /* If yes then error */
    }
  }
  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
   1064c:	f7fe fc62 	bl	ef14 <_int_disable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:631
  DeviceDataPrv->SerFlag |= MASTER_IN_PROGRES; /* Set flag "busy" */
   10650:	783a      	ldrb	r2, [r7, #0]
   10652:	2301      	movs	r3, #1
   10654:	4313      	orrs	r3, r2
   10656:	703b      	strb	r3, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:632
  DeviceDataPrv->InpPtrM = (uint8_t *)BufferPtr; /* Save pointer to data for reception */
   10658:	4642      	mov	r2, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:635
  DeviceDataPrv->InpLenM = Size;       /* Set the counter of input bufer's content */
  DeviceDataPrv->SendStop = SendStop;  /* Set generating stop condition */
  I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_TX_DIRECTION); /* Set TX mode */
   1065a:	4b15      	ldr	r3, [pc, #84]	; (106b0 <I2C_MasterReceiveBlock+0xb4>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:632
    }
  }
  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
  DeviceDataPrv->SerFlag |= MASTER_IN_PROGRES; /* Set flag "busy" */
  DeviceDataPrv->InpPtrM = (uint8_t *)BufferPtr; /* Save pointer to data for reception */
   1065c:	60fa      	str	r2, [r7, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:633
  DeviceDataPrv->InpLenM = Size;       /* Set the counter of input bufer's content */
   1065e:	813d      	strh	r5, [r7, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:634
  DeviceDataPrv->SendStop = SendStop;  /* Set generating stop condition */
   10660:	70be      	strb	r6, [r7, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:635
  I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_TX_DIRECTION); /* Set TX mode */
   10662:	7899      	ldrb	r1, [r3, #2]
   10664:	2210      	movs	r2, #16
   10666:	430a      	orrs	r2, r1
   10668:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:636
  if (I2C_PDD_GetMasterMode(I2C1_BASE_PTR) == I2C_PDD_MASTER_MODE) { /* Is device in master mode? */
   1066a:	789a      	ldrb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:637
    I2C_PDD_RepeatStart(I2C1_BASE_PTR); /* If yes then repeat start cycle generated */
   1066c:	7899      	ldrb	r1, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:636
  DeviceDataPrv->SerFlag |= MASTER_IN_PROGRES; /* Set flag "busy" */
  DeviceDataPrv->InpPtrM = (uint8_t *)BufferPtr; /* Save pointer to data for reception */
  DeviceDataPrv->InpLenM = Size;       /* Set the counter of input bufer's content */
  DeviceDataPrv->SendStop = SendStop;  /* Set generating stop condition */
  I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_TX_DIRECTION); /* Set TX mode */
  if (I2C_PDD_GetMasterMode(I2C1_BASE_PTR) == I2C_PDD_MASTER_MODE) { /* Is device in master mode? */
   1066e:	0690      	lsls	r0, r2, #26
   10670:	d510      	bpl.n	10694 <I2C_MasterReceiveBlock+0x98>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:637
    I2C_PDD_RepeatStart(I2C1_BASE_PTR); /* If yes then repeat start cycle generated */
   10672:	2204      	movs	r2, #4
   10674:	430a      	orrs	r2, r1
   10676:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:641
  } else {
    I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_MASTER_MODE); /* If no then start signal generated */
  }
  if ((DeviceDataPrv->SerFlag & ADDR_7) != 0x00U) { /* Is 7-bit addressing set ? */
   10678:	783b      	ldrb	r3, [r7, #0]
   1067a:	0699      	lsls	r1, r3, #26
   1067c:	d50f      	bpl.n	1069e <I2C_MasterReceiveBlock+0xa2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:642
    DeviceDataPrv->SerFlag |= (ADDR_COMPLETE|REP_ADDR_COMPLETE); /* Only one byte of address will be sent 7-bit address mode*/
   1067e:	2206      	movs	r2, #6
   10680:	4313      	orrs	r3, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:643
    I2C_PDD_WriteDataReg(I2C1_BASE_PTR, (uint8_t)(DeviceDataPrv->SlaveAddr | 0x01U)); /* Send slave address */
   10682:	79ba      	ldrb	r2, [r7, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:642
    I2C_PDD_RepeatStart(I2C1_BASE_PTR); /* If yes then repeat start cycle generated */
  } else {
    I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_MASTER_MODE); /* If no then start signal generated */
  }
  if ((DeviceDataPrv->SerFlag & ADDR_7) != 0x00U) { /* Is 7-bit addressing set ? */
    DeviceDataPrv->SerFlag |= (ADDR_COMPLETE|REP_ADDR_COMPLETE); /* Only one byte of address will be sent 7-bit address mode*/
   10684:	703b      	strb	r3, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:643
    I2C_PDD_WriteDataReg(I2C1_BASE_PTR, (uint8_t)(DeviceDataPrv->SlaveAddr | 0x01U)); /* Send slave address */
   10686:	2301      	movs	r3, #1
   10688:	431a      	orrs	r2, r3
   1068a:	4b09      	ldr	r3, [pc, #36]	; (106b0 <I2C_MasterReceiveBlock+0xb4>)
   1068c:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:651
      DeviceDataPrv->SerFlag &= (uint8_t)~(ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Second byte of address will be sent later */
      I2C_PDD_WriteDataReg(I2C1_BASE_PTR, DeviceDataPrv->SlaveAddrHigh); /* Send slave address - high byte */
    }
  }
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
   1068e:	f7fe fc4d 	bl	ef2c <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:652
  return ERR_OK;                       /* OK */
   10692:	e7c0      	b.n	10616 <I2C_MasterReceiveBlock+0x1a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:639
  DeviceDataPrv->SendStop = SendStop;  /* Set generating stop condition */
  I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_TX_DIRECTION); /* Set TX mode */
  if (I2C_PDD_GetMasterMode(I2C1_BASE_PTR) == I2C_PDD_MASTER_MODE) { /* Is device in master mode? */
    I2C_PDD_RepeatStart(I2C1_BASE_PTR); /* If yes then repeat start cycle generated */
  } else {
    I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_MASTER_MODE); /* If no then start signal generated */
   10694:	2220      	movs	r2, #32
   10696:	430a      	orrs	r2, r1
   10698:	b2d2      	uxtb	r2, r2
   1069a:	709a      	strb	r2, [r3, #2]
   1069c:	e7ec      	b.n	10678 <I2C_MasterReceiveBlock+0x7c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:645
  }
  if ((DeviceDataPrv->SerFlag & ADDR_7) != 0x00U) { /* Is 7-bit addressing set ? */
    DeviceDataPrv->SerFlag |= (ADDR_COMPLETE|REP_ADDR_COMPLETE); /* Only one byte of address will be sent 7-bit address mode*/
    I2C_PDD_WriteDataReg(I2C1_BASE_PTR, (uint8_t)(DeviceDataPrv->SlaveAddr | 0x01U)); /* Send slave address */
  } else {
    if ((DeviceDataPrv->SerFlag & ADDR_10) != 0x00U) { /* Is 10-bit addressing set ? */
   1069e:	06da      	lsls	r2, r3, #27
   106a0:	d5f5      	bpl.n	1068e <I2C_MasterReceiveBlock+0x92>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:646
      DeviceDataPrv->SerFlag &= (uint8_t)~(ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Second byte of address will be sent later */
   106a2:	2206      	movs	r2, #6
   106a4:	4393      	bics	r3, r2
   106a6:	703b      	strb	r3, [r7, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:647
      I2C_PDD_WriteDataReg(I2C1_BASE_PTR, DeviceDataPrv->SlaveAddrHigh); /* Send slave address - high byte */
   106a8:	79fa      	ldrb	r2, [r7, #7]
   106aa:	4b01      	ldr	r3, [pc, #4]	; (106b0 <I2C_MasterReceiveBlock+0xb4>)
   106ac:	711a      	strb	r2, [r3, #4]
   106ae:	e7ee      	b.n	1068e <I2C_MasterReceiveBlock+0x92>
   106b0:	40067000 	.word	0x40067000

000106b4 <I2C_SelectSlaveDevice>:
I2C_SelectSlaveDevice():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:721
**                           type.
**                           ERR_PARAM_ADDRESS -  Invalid address value.
*/
/* ===================================================================*/
LDD_TError I2C_SelectSlaveDevice(LDD_TDeviceData *DeviceDataPtr, LDD_I2C_TAddrType AddrType, LDD_I2C_TAddr Addr)
{
   106b4:	b530      	push	{r4, r5, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:724
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  if ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) { /* Is the device in the active state? */
   106b6:	7804      	ldrb	r4, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:725
    return ERR_BUSY;                   /* If yes then error */
   106b8:	2308      	movs	r3, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:724
/* ===================================================================*/
LDD_TError I2C_SelectSlaveDevice(LDD_TDeviceData *DeviceDataPtr, LDD_I2C_TAddrType AddrType, LDD_I2C_TAddr Addr)
{
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  if ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) { /* Is the device in the active state? */
   106ba:	07e5      	lsls	r5, r4, #31
   106bc:	d501      	bpl.n	106c2 <I2C_SelectSlaveDevice+0xe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:755
    break;
    default:
      return ERR_PARAM_ADDRESS_TYPE;   /* If value of address type is invalid, return error */
  }
  return ERR_OK;                       /* OK */
}
   106be:	1c18      	adds	r0, r3, #0
   106c0:	bd30      	pop	{r4, r5, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:727
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  if ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) { /* Is the device in the active state? */
    return ERR_BUSY;                   /* If yes then error */
  }
  switch (AddrType) {
   106c2:	2901      	cmp	r1, #1
   106c4:	d016      	beq.n	106f4 <I2C_SelectSlaveDevice+0x40>
   106c6:	2900      	cmp	r1, #0
   106c8:	d008      	beq.n	106dc <I2C_SelectSlaveDevice+0x28>
   106ca:	2902      	cmp	r1, #2
   106cc:	d125      	bne.n	1071a <I2C_SelectSlaveDevice+0x66>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:748
      DeviceDataPrv->SlaveAddrHigh |= 0xF0U;
      DeviceDataPrv->SerFlag &= (uint8_t)~(GENERAL_CALL | ADDR_7); /* Clear the general call flag and 7-bit address mode flag */
      DeviceDataPrv->SerFlag |= ADDR_10; /* Set 10-bit address mode flag */
    break;
    case LDD_I2C_ADDRTYPE_GENERAL_CALL:
      DeviceDataPrv->SerFlag &= (uint8_t)~(ADDR_7 | ADDR_10); /* Clear the 7-bit address flag and 10-bit address mode flag */
   106ce:	2330      	movs	r3, #48	; 0x30
   106d0:	439c      	bics	r4, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:749
      DeviceDataPrv->SerFlag |= GENERAL_CALL; /* Set general call mode flag */
   106d2:	2308      	movs	r3, #8
   106d4:	431c      	orrs	r4, r3
   106d6:	7004      	strb	r4, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:754
    break;
    default:
      return ERR_PARAM_ADDRESS_TYPE;   /* If value of address type is invalid, return error */
  }
  return ERR_OK;                       /* OK */
   106d8:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:750
      DeviceDataPrv->SerFlag |= ADDR_10; /* Set 10-bit address mode flag */
    break;
    case LDD_I2C_ADDRTYPE_GENERAL_CALL:
      DeviceDataPrv->SerFlag &= (uint8_t)~(ADDR_7 | ADDR_10); /* Clear the 7-bit address flag and 10-bit address mode flag */
      DeviceDataPrv->SerFlag |= GENERAL_CALL; /* Set general call mode flag */
    break;
   106da:	e7f0      	b.n	106be <I2C_SelectSlaveDevice+0xa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:730
    return ERR_BUSY;                   /* If yes then error */
  }
  switch (AddrType) {
    case LDD_I2C_ADDRTYPE_7BITS:
      if (Addr > 0x7FU) {              /* Test address value */
        return ERR_PARAM_ADDRESS;      /* If value of address is invalid, return error */
   106dc:	2389      	movs	r3, #137	; 0x89
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:729
  if ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) { /* Is the device in the active state? */
    return ERR_BUSY;                   /* If yes then error */
  }
  switch (AddrType) {
    case LDD_I2C_ADDRTYPE_7BITS:
      if (Addr > 0x7FU) {              /* Test address value */
   106de:	2a7f      	cmp	r2, #127	; 0x7f
   106e0:	d8ed      	bhi.n	106be <I2C_SelectSlaveDevice+0xa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:733
        return ERR_PARAM_ADDRESS;      /* If value of address is invalid, return error */
      }
      DeviceDataPrv->SlaveAddr = (uint8_t)((uint8_t)Addr << 0x01U); /* Set slave address */
      DeviceDataPrv->SerFlag &= (uint8_t)~(GENERAL_CALL | ADDR_10); /* Clear the general call flag and 10-bit address mode flag */
   106e2:	2318      	movs	r3, #24
   106e4:	439c      	bics	r4, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:734
      DeviceDataPrv->SerFlag |= ADDR_7; /* Set 7-bit address mode flag */
   106e6:	2320      	movs	r3, #32
   106e8:	431c      	orrs	r4, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:732
  switch (AddrType) {
    case LDD_I2C_ADDRTYPE_7BITS:
      if (Addr > 0x7FU) {              /* Test address value */
        return ERR_PARAM_ADDRESS;      /* If value of address is invalid, return error */
      }
      DeviceDataPrv->SlaveAddr = (uint8_t)((uint8_t)Addr << 0x01U); /* Set slave address */
   106ea:	0052      	lsls	r2, r2, #1
   106ec:	7182      	strb	r2, [r0, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:734
      DeviceDataPrv->SerFlag &= (uint8_t)~(GENERAL_CALL | ADDR_10); /* Clear the general call flag and 10-bit address mode flag */
      DeviceDataPrv->SerFlag |= ADDR_7; /* Set 7-bit address mode flag */
   106ee:	7004      	strb	r4, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:754
      DeviceDataPrv->SerFlag |= GENERAL_CALL; /* Set general call mode flag */
    break;
    default:
      return ERR_PARAM_ADDRESS_TYPE;   /* If value of address type is invalid, return error */
  }
  return ERR_OK;                       /* OK */
   106f0:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:735
        return ERR_PARAM_ADDRESS;      /* If value of address is invalid, return error */
      }
      DeviceDataPrv->SlaveAddr = (uint8_t)((uint8_t)Addr << 0x01U); /* Set slave address */
      DeviceDataPrv->SerFlag &= (uint8_t)~(GENERAL_CALL | ADDR_10); /* Clear the general call flag and 10-bit address mode flag */
      DeviceDataPrv->SerFlag |= ADDR_7; /* Set 7-bit address mode flag */
    break;
   106f2:	e7e4      	b.n	106be <I2C_SelectSlaveDevice+0xa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:737
    case LDD_I2C_ADDRTYPE_10BITS:
      if (Addr > 0x03FFU) {            /* Test address value */
   106f4:	490a      	ldr	r1, [pc, #40]	; (10720 <I2C_SelectSlaveDevice+0x6c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:730
    return ERR_BUSY;                   /* If yes then error */
  }
  switch (AddrType) {
    case LDD_I2C_ADDRTYPE_7BITS:
      if (Addr > 0x7FU) {              /* Test address value */
        return ERR_PARAM_ADDRESS;      /* If value of address is invalid, return error */
   106f6:	2389      	movs	r3, #137	; 0x89
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:737
      DeviceDataPrv->SlaveAddr = (uint8_t)((uint8_t)Addr << 0x01U); /* Set slave address */
      DeviceDataPrv->SerFlag &= (uint8_t)~(GENERAL_CALL | ADDR_10); /* Clear the general call flag and 10-bit address mode flag */
      DeviceDataPrv->SerFlag |= ADDR_7; /* Set 7-bit address mode flag */
    break;
    case LDD_I2C_ADDRTYPE_10BITS:
      if (Addr > 0x03FFU) {            /* Test address value */
   106f8:	428a      	cmp	r2, r1
   106fa:	d8e0      	bhi.n	106be <I2C_SelectSlaveDevice+0xa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:742
        return ERR_PARAM_ADDRESS;      /* If value of address is invalid, return error */
      }
      DeviceDataPrv->SlaveAddr = (uint8_t)Addr; /* Set slave address - low byte */
      DeviceDataPrv->SlaveAddrHigh = (uint8_t)((uint16_t)Addr >> 0x07U); /* Set slave address - high byte*/
      DeviceDataPrv->SlaveAddrHigh &= 0x06U; /* Format address to 11110xx0 */
   106fc:	2306      	movs	r3, #6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:740
    break;
    case LDD_I2C_ADDRTYPE_10BITS:
      if (Addr > 0x03FFU) {            /* Test address value */
        return ERR_PARAM_ADDRESS;      /* If value of address is invalid, return error */
      }
      DeviceDataPrv->SlaveAddr = (uint8_t)Addr; /* Set slave address - low byte */
   106fe:	7182      	strb	r2, [r0, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:741
      DeviceDataPrv->SlaveAddrHigh = (uint8_t)((uint16_t)Addr >> 0x07U); /* Set slave address - high byte*/
   10700:	09d2      	lsrs	r2, r2, #7
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:742
      DeviceDataPrv->SlaveAddrHigh &= 0x06U; /* Format address to 11110xx0 */
   10702:	401a      	ands	r2, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:743
      DeviceDataPrv->SlaveAddrHigh |= 0xF0U;
   10704:	2310      	movs	r3, #16
   10706:	425b      	negs	r3, r3
   10708:	431a      	orrs	r2, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:744
      DeviceDataPrv->SerFlag &= (uint8_t)~(GENERAL_CALL | ADDR_7); /* Clear the general call flag and 7-bit address mode flag */
   1070a:	2328      	movs	r3, #40	; 0x28
   1070c:	439c      	bics	r4, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:745
      DeviceDataPrv->SerFlag |= ADDR_10; /* Set 10-bit address mode flag */
   1070e:	2310      	movs	r3, #16
   10710:	431c      	orrs	r4, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:743
        return ERR_PARAM_ADDRESS;      /* If value of address is invalid, return error */
      }
      DeviceDataPrv->SlaveAddr = (uint8_t)Addr; /* Set slave address - low byte */
      DeviceDataPrv->SlaveAddrHigh = (uint8_t)((uint16_t)Addr >> 0x07U); /* Set slave address - high byte*/
      DeviceDataPrv->SlaveAddrHigh &= 0x06U; /* Format address to 11110xx0 */
      DeviceDataPrv->SlaveAddrHigh |= 0xF0U;
   10712:	71c2      	strb	r2, [r0, #7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:745
      DeviceDataPrv->SerFlag &= (uint8_t)~(GENERAL_CALL | ADDR_7); /* Clear the general call flag and 7-bit address mode flag */
      DeviceDataPrv->SerFlag |= ADDR_10; /* Set 10-bit address mode flag */
   10714:	7004      	strb	r4, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:754
      DeviceDataPrv->SerFlag |= GENERAL_CALL; /* Set general call mode flag */
    break;
    default:
      return ERR_PARAM_ADDRESS_TYPE;   /* If value of address type is invalid, return error */
  }
  return ERR_OK;                       /* OK */
   10716:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:746
      DeviceDataPrv->SlaveAddrHigh = (uint8_t)((uint16_t)Addr >> 0x07U); /* Set slave address - high byte*/
      DeviceDataPrv->SlaveAddrHigh &= 0x06U; /* Format address to 11110xx0 */
      DeviceDataPrv->SlaveAddrHigh |= 0xF0U;
      DeviceDataPrv->SerFlag &= (uint8_t)~(GENERAL_CALL | ADDR_7); /* Clear the general call flag and 7-bit address mode flag */
      DeviceDataPrv->SerFlag |= ADDR_10; /* Set 10-bit address mode flag */
    break;
   10718:	e7d1      	b.n	106be <I2C_SelectSlaveDevice+0xa>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:752
    case LDD_I2C_ADDRTYPE_GENERAL_CALL:
      DeviceDataPrv->SerFlag &= (uint8_t)~(ADDR_7 | ADDR_10); /* Clear the 7-bit address flag and 10-bit address mode flag */
      DeviceDataPrv->SerFlag |= GENERAL_CALL; /* Set general call mode flag */
    break;
    default:
      return ERR_PARAM_ADDRESS_TYPE;   /* If value of address type is invalid, return error */
   1071a:	238d      	movs	r3, #141	; 0x8d
   1071c:	e7cf      	b.n	106be <I2C_SelectSlaveDevice+0xa>
   1071e:	46c0      	nop			; (mov r8, r8)
   10720:	000003ff 	.word	0x000003ff

00010724 <I2C_GetError>:
I2C_GetError():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:779
**                           ERR_SPEED - This device does not work in
**                           the active clock configuration
*/
/* ===================================================================*/
LDD_TError I2C_GetError(LDD_TDeviceData *DeviceDataPtr, LDD_I2C_TErrorMask *ErrorMaskPtr)
{
   10724:	b538      	push	{r3, r4, r5, lr}
   10726:	1c04      	adds	r4, r0, #0
   10728:	1c0d      	adds	r5, r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:783
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
   1072a:	f7fe fbf3 	bl	ef14 <_int_disable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:784
  *ErrorMaskPtr = DeviceDataPrv->ErrorMask; /* Return last value of error mask */
   1072e:	88a3      	ldrh	r3, [r4, #4]
   10730:	802b      	strh	r3, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:785
  DeviceDataPrv->ErrorMask = 0x00U;
   10732:	2300      	movs	r3, #0
   10734:	80a3      	strh	r3, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:787
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
   10736:	f7fe fbf9 	bl	ef2c <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:789
  return ERR_OK;
}
   1073a:	2000      	movs	r0, #0
   1073c:	bd38      	pop	{r3, r4, r5, pc}
   1073e:	46c0      	nop			; (mov r8, r8)

00010740 <I2C_CheckBus>:
I2C_CheckBus():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:820
LDD_TError I2C_CheckBus(LDD_TDeviceData *DeviceDataPtr, LDD_I2C_TBusState *BusStatePtr)
{
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  (void)DeviceDataPrv;                 /* Suppress unused variable warning if needed */
  *BusStatePtr = (LDD_I2C_TBusState)((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY)?LDD_I2C_BUSY:LDD_I2C_IDLE); /* Return value of Busy bit in status register */
   10740:	4b04      	ldr	r3, [pc, #16]	; (10754 <I2C_CheckBus+0x14>)
   10742:	2201      	movs	r2, #1
   10744:	78db      	ldrb	r3, [r3, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:822
  return ERR_OK;
}
   10746:	2000      	movs	r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:820
LDD_TError I2C_CheckBus(LDD_TDeviceData *DeviceDataPtr, LDD_I2C_TBusState *BusStatePtr)
{
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  (void)DeviceDataPrv;                 /* Suppress unused variable warning if needed */
  *BusStatePtr = (LDD_I2C_TBusState)((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY)?LDD_I2C_BUSY:LDD_I2C_IDLE); /* Return value of Busy bit in status register */
   10748:	095b      	lsrs	r3, r3, #5
   1074a:	4053      	eors	r3, r2
   1074c:	2201      	movs	r2, #1
   1074e:	4013      	ands	r3, r2
   10750:	700b      	strb	r3, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:822
  return ERR_OK;
}
   10752:	4770      	bx	lr
   10754:	40067000 	.word	0x40067000

00010758 <LED_BLUE_Init>:
LED_BLUE_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:134
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Configure pin as output */
  /* GPIOE_PDDR: PDD|=0x80000000 */
  GPIOE_PDDR |= GPIO_PDDR_PDD(0x80000000);
   10758:	4b0b      	ldr	r3, [pc, #44]	; (10788 <LED_BLUE_Init+0x30>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:131
  /* Allocate device structure */
  LED_BLUE_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   1075a:	4a0c      	ldr	r2, [pc, #48]	; (1078c <LED_BLUE_Init+0x34>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:134
  /* Configure pin as output */
  /* GPIOE_PDDR: PDD|=0x80000000 */
  GPIOE_PDDR |= GPIO_PDDR_PDD(0x80000000);
   1075c:	2180      	movs	r1, #128	; 0x80
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:131
  /* Allocate device structure */
  LED_BLUE_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   1075e:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:134
  /* Configure pin as output */
  /* GPIOE_PDDR: PDD|=0x80000000 */
  GPIOE_PDDR |= GPIO_PDDR_PDD(0x80000000);
   10760:	6958      	ldr	r0, [r3, #20]
   10762:	0609      	lsls	r1, r1, #24
   10764:	4308      	orrs	r0, r1
   10766:	6158      	str	r0, [r3, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:137
  /* Set initialization value */
  /* GPIOE_PDOR: PDO|=0x80000000 */
  GPIOE_PDOR |= GPIO_PDOR_PDO(0x80000000);
   10768:	6818      	ldr	r0, [r3, #0]
   1076a:	4301      	orrs	r1, r0
   1076c:	6019      	str	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:140
  /* Initialization of Port Control register */
  /* PORTE_PCR31: ISF=0,MUX=1 */
  PORTE_PCR31 = (uint32_t)((PORTE_PCR31 & (uint32_t)~(uint32_t)(
   1076e:	4b08      	ldr	r3, [pc, #32]	; (10790 <LED_BLUE_Init+0x38>)
   10770:	4908      	ldr	r1, [pc, #32]	; (10794 <LED_BLUE_Init+0x3c>)
   10772:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   10774:	4001      	ands	r1, r0
   10776:	2080      	movs	r0, #128	; 0x80
   10778:	0040      	lsls	r0, r0, #1
   1077a:	4301      	orrs	r1, r0
   1077c:	67d9      	str	r1, [r3, #124]	; 0x7c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:147
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_LED_BLUE_ID,DeviceDataPrv);
   1077e:	4b06      	ldr	r3, [pc, #24]	; (10798 <LED_BLUE_Init+0x40>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:149
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   10780:	1c10      	adds	r0, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:147
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_LED_BLUE_ID,DeviceDataPrv);
   10782:	60da      	str	r2, [r3, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:149
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   10784:	4770      	bx	lr
   10786:	46c0      	nop			; (mov r8, r8)
   10788:	400ff100 	.word	0x400ff100
   1078c:	1fffe208 	.word	0x1fffe208
   10790:	4004d000 	.word	0x4004d000
   10794:	fefff8ff 	.word	0xfefff8ff
   10798:	1fffe218 	.word	0x1fffe218

0001079c <LED_BLUE_SetVal>:
LED_BLUE_SetVal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:250
*/
/* ===================================================================*/
void LED_BLUE_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(LED_BLUE_MODULE_BASE_ADDRESS, LED_BLUE_PORT_MASK);
   1079c:	4b02      	ldr	r3, [pc, #8]	; (107a8 <LED_BLUE_SetVal+0xc>)
   1079e:	2280      	movs	r2, #128	; 0x80
   107a0:	0612      	lsls	r2, r2, #24
   107a2:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:251
}
   107a4:	4770      	bx	lr
   107a6:	46c0      	nop			; (mov r8, r8)
   107a8:	f8000100 	.word	0xf8000100

000107ac <LED_GREEN_Init>:
LED_GREEN_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:134
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Configure pin as output */
  /* GPIOD_PDDR: PDD|=0x20 */
  GPIOD_PDDR |= GPIO_PDDR_PDD(0x20);
   107ac:	4b0a      	ldr	r3, [pc, #40]	; (107d8 <LED_GREEN_Init+0x2c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:131
  /* Allocate device structure */
  LED_GREEN_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   107ae:	4a0b      	ldr	r2, [pc, #44]	; (107dc <LED_GREEN_Init+0x30>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:134
  /* Configure pin as output */
  /* GPIOD_PDDR: PDD|=0x20 */
  GPIOD_PDDR |= GPIO_PDDR_PDD(0x20);
   107b0:	2120      	movs	r1, #32
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:131
  /* Allocate device structure */
  LED_GREEN_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   107b2:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:134
  /* Configure pin as output */
  /* GPIOD_PDDR: PDD|=0x20 */
  GPIOD_PDDR |= GPIO_PDDR_PDD(0x20);
   107b4:	6958      	ldr	r0, [r3, #20]
   107b6:	4308      	orrs	r0, r1
   107b8:	6158      	str	r0, [r3, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:137
  /* Set initialization value */
  /* GPIOD_PDOR: PDO|=0x20 */
  GPIOD_PDOR |= GPIO_PDOR_PDO(0x20);
   107ba:	6818      	ldr	r0, [r3, #0]
   107bc:	4301      	orrs	r1, r0
   107be:	6019      	str	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:140
  /* Initialization of Port Control register */
  /* PORTD_PCR5: ISF=0,MUX=1 */
  PORTD_PCR5 = (uint32_t)((PORTD_PCR5 & (uint32_t)~(uint32_t)(
   107c0:	4b07      	ldr	r3, [pc, #28]	; (107e0 <LED_GREEN_Init+0x34>)
   107c2:	4908      	ldr	r1, [pc, #32]	; (107e4 <LED_GREEN_Init+0x38>)
   107c4:	6958      	ldr	r0, [r3, #20]
   107c6:	4001      	ands	r1, r0
   107c8:	2080      	movs	r0, #128	; 0x80
   107ca:	0040      	lsls	r0, r0, #1
   107cc:	4301      	orrs	r1, r0
   107ce:	6159      	str	r1, [r3, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:147
                PORT_PCR_MUX(0x06)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01)
               ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_LED_GREEN_ID,DeviceDataPrv);
   107d0:	4b05      	ldr	r3, [pc, #20]	; (107e8 <LED_GREEN_Init+0x3c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:149
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   107d2:	1c10      	adds	r0, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:147
                PORT_PCR_MUX(0x06)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01)
               ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_LED_GREEN_ID,DeviceDataPrv);
   107d4:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:149
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   107d6:	4770      	bx	lr
   107d8:	400ff0c0 	.word	0x400ff0c0
   107dc:	1fffe20c 	.word	0x1fffe20c
   107e0:	4004c000 	.word	0x4004c000
   107e4:	fefff8ff 	.word	0xfefff8ff
   107e8:	1fffe218 	.word	0x1fffe218

000107ec <LED_GREEN_SetVal>:
LED_GREEN_SetVal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:250
*/
/* ===================================================================*/
void LED_GREEN_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(LED_GREEN_MODULE_BASE_ADDRESS, LED_GREEN_PORT_MASK);
   107ec:	4b01      	ldr	r3, [pc, #4]	; (107f4 <LED_GREEN_SetVal+0x8>)
   107ee:	2220      	movs	r2, #32
   107f0:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:251
}
   107f2:	4770      	bx	lr
   107f4:	f80000c0 	.word	0xf80000c0

000107f8 <LED_GREEN_NegVal>:
LED_GREEN_NegVal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:270
*/
/* ===================================================================*/
void LED_GREEN_NegVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_TogglePortDataOutputMask(LED_GREEN_MODULE_BASE_ADDRESS, LED_GREEN_PORT_MASK);
   107f8:	4b01      	ldr	r3, [pc, #4]	; (10800 <LED_GREEN_NegVal+0x8>)
   107fa:	2220      	movs	r2, #32
   107fc:	60da      	str	r2, [r3, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:271
}
   107fe:	4770      	bx	lr
   10800:	f80000c0 	.word	0xf80000c0

00010804 <LED_RED_Init>:
LED_RED_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:134
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Configure pin as output */
  /* GPIOE_PDDR: PDD|=0x20000000 */
  GPIOE_PDDR |= GPIO_PDDR_PDD(0x20000000);
   10804:	4b0b      	ldr	r3, [pc, #44]	; (10834 <LED_RED_Init+0x30>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:131
  /* Allocate device structure */
  LED_RED_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   10806:	4a0c      	ldr	r2, [pc, #48]	; (10838 <LED_RED_Init+0x34>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:134
  /* Configure pin as output */
  /* GPIOE_PDDR: PDD|=0x20000000 */
  GPIOE_PDDR |= GPIO_PDDR_PDD(0x20000000);
   10808:	2180      	movs	r1, #128	; 0x80
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:131
  /* Allocate device structure */
  LED_RED_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   1080a:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:134
  /* Configure pin as output */
  /* GPIOE_PDDR: PDD|=0x20000000 */
  GPIOE_PDDR |= GPIO_PDDR_PDD(0x20000000);
   1080c:	6958      	ldr	r0, [r3, #20]
   1080e:	0589      	lsls	r1, r1, #22
   10810:	4308      	orrs	r0, r1
   10812:	6158      	str	r0, [r3, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:137
  /* Set initialization value */
  /* GPIOE_PDOR: PDO|=0x20000000 */
  GPIOE_PDOR |= GPIO_PDOR_PDO(0x20000000);
   10814:	6818      	ldr	r0, [r3, #0]
   10816:	4301      	orrs	r1, r0
   10818:	6019      	str	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:140
  /* Initialization of Port Control register */
  /* PORTE_PCR29: ISF=0,MUX=1 */
  PORTE_PCR29 = (uint32_t)((PORTE_PCR29 & (uint32_t)~(uint32_t)(
   1081a:	4b08      	ldr	r3, [pc, #32]	; (1083c <LED_RED_Init+0x38>)
   1081c:	4908      	ldr	r1, [pc, #32]	; (10840 <LED_RED_Init+0x3c>)
   1081e:	6f58      	ldr	r0, [r3, #116]	; 0x74
   10820:	4001      	ands	r1, r0
   10822:	2080      	movs	r0, #128	; 0x80
   10824:	0040      	lsls	r0, r0, #1
   10826:	4301      	orrs	r1, r0
   10828:	6759      	str	r1, [r3, #116]	; 0x74
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:147
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_LED_RED_ID,DeviceDataPrv);
   1082a:	4b06      	ldr	r3, [pc, #24]	; (10844 <LED_RED_Init+0x40>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:149
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   1082c:	1c10      	adds	r0, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:147
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_LED_RED_ID,DeviceDataPrv);
   1082e:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:149
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   10830:	4770      	bx	lr
   10832:	46c0      	nop			; (mov r8, r8)
   10834:	400ff100 	.word	0x400ff100
   10838:	1fffe210 	.word	0x1fffe210
   1083c:	4004d000 	.word	0x4004d000
   10840:	fefff8ff 	.word	0xfefff8ff
   10844:	1fffe218 	.word	0x1fffe218

00010848 <LED_RED_ClrVal>:
LED_RED_ClrVal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:230
*/
/* ===================================================================*/
void LED_RED_ClrVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_ClearPortDataOutputMask(LED_RED_MODULE_BASE_ADDRESS, LED_RED_PORT_MASK);
   10848:	4b02      	ldr	r3, [pc, #8]	; (10854 <LED_RED_ClrVal+0xc>)
   1084a:	2280      	movs	r2, #128	; 0x80
   1084c:	0592      	lsls	r2, r2, #22
   1084e:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:231
}
   10850:	4770      	bx	lr
   10852:	46c0      	nop			; (mov r8, r8)
   10854:	f8000100 	.word	0xf8000100

00010858 <LED_RED_SetVal>:
LED_RED_SetVal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:250
*/
/* ===================================================================*/
void LED_RED_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(LED_RED_MODULE_BASE_ADDRESS, LED_RED_PORT_MASK);
   10858:	4b02      	ldr	r3, [pc, #8]	; (10864 <LED_RED_SetVal+0xc>)
   1085a:	2280      	movs	r2, #128	; 0x80
   1085c:	0592      	lsls	r2, r2, #22
   1085e:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:251
}
   10860:	4770      	bx	lr
   10862:	46c0      	nop			; (mov r8, r8)
   10864:	f8000100 	.word	0xf8000100

00010868 <SystemTimer1_OnCounterRestart>:
SystemTimer1_OnCounterRestart():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:118
**     Description :
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void SystemTimer1_OnCounterRestart(LDD_TUserData *UserDataPtr)
{
   10868:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:119
    _time_notify_kernel();
   1086a:	f7ff fb57 	bl	ff1c <_time_notify_kernel>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:120
}
   1086e:	bd08      	pop	{r3, pc}

00010870 <system_timer_init>:
system_timer_init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:136


static LDD_TDeviceDataPtr SystemTimerDeviceDataPtr;

uint32_t system_timer_init(const void * timer_data_ptr)
{
   10870:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:138
    uint32_t hw_ticks_per_tick;
    KERNEL_DATA_STRUCT_PTR kernel_data = _mqx_kernel_data;
   10872:	4b11      	ldr	r3, [pc, #68]	; (108b8 <system_timer_init+0x48>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:136


static LDD_TDeviceDataPtr SystemTimerDeviceDataPtr;

uint32_t system_timer_init(const void * timer_data_ptr)
{
   10874:	b082      	sub	sp, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:143
    KERNEL_DATA_STRUCT_PTR kernel_data = _mqx_kernel_data;

    /* Parameter is not used, suppress unused argument warning */
    (void)timer_data_ptr;

    SystemTimerDeviceDataPtr  = SystemTimer1_Init(NULL);
   10876:	2000      	movs	r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:138
static LDD_TDeviceDataPtr SystemTimerDeviceDataPtr;

uint32_t system_timer_init(const void * timer_data_ptr)
{
    uint32_t hw_ticks_per_tick;
    KERNEL_DATA_STRUCT_PTR kernel_data = _mqx_kernel_data;
   10878:	681e      	ldr	r6, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:143

    /* Parameter is not used, suppress unused argument warning */
    (void)timer_data_ptr;

    SystemTimerDeviceDataPtr  = SystemTimer1_Init(NULL);
   1087a:	f000 f8d9 	bl	10a30 <SystemTimer1_Init>
   1087e:	4c0f      	ldr	r4, [pc, #60]	; (108bc <system_timer_init+0x4c>)
SystemTimer1_GetTicsPerSecond():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:128
/* Function returns number of ticks per second for system timer */
uint32_t  SystemTimer1_GetTicsPerSecond(LDD_TDeviceData *DeviceDataPtr)
{
    uint32_t period_ticks;

    SystemTimer1_GetPeriodTicks(DeviceDataPtr, &period_ticks);
   10880:	a901      	add	r1, sp, #4
system_timer_init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:143
    KERNEL_DATA_STRUCT_PTR kernel_data = _mqx_kernel_data;

    /* Parameter is not used, suppress unused argument warning */
    (void)timer_data_ptr;

    SystemTimerDeviceDataPtr  = SystemTimer1_Init(NULL);
   10882:	1c05      	adds	r5, r0, #0
   10884:	6020      	str	r0, [r4, #0]
SystemTimer1_GetTicsPerSecond():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:128
/* Function returns number of ticks per second for system timer */
uint32_t  SystemTimer1_GetTicsPerSecond(LDD_TDeviceData *DeviceDataPtr)
{
    uint32_t period_ticks;

    SystemTimer1_GetPeriodTicks(DeviceDataPtr, &period_ticks);
   10886:	f000 f911 	bl	10aac <SystemTimer1_GetPeriodTicks>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:129
    return SystemTimer1_GetInputFrequency(DeviceDataPtr) / period_ticks;
   1088a:	1c28      	adds	r0, r5, #0
   1088c:	f000 f90a 	bl	10aa4 <SystemTimer1_GetInputFrequency>
   10890:	9901      	ldr	r1, [sp, #4]
   10892:	f7ef fe07 	bl	4a4 <__aeabi_uidiv>
system_timer_init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:146
    (void)timer_data_ptr;

    SystemTimerDeviceDataPtr  = SystemTimer1_Init(NULL);

    /* Set number of system ticks per second */
    kernel_data->TICKS_PER_SECOND = SystemTimer1_GetTicsPerSecond(SystemTimerDeviceDataPtr);
   10896:	23a4      	movs	r3, #164	; 0xa4
   10898:	005b      	lsls	r3, r3, #1
   1089a:	50f0      	str	r0, [r6, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:148

    _time_set_hwtick_function((MQX_GET_HWTICKS_FPTR)&SystemTimer1_GetCounterValue, (pointer)SystemTimerDeviceDataPtr);
   1089c:	6821      	ldr	r1, [r4, #0]
   1089e:	4808      	ldr	r0, [pc, #32]	; (108c0 <system_timer_init+0x50>)
   108a0:	f7ff fbd8 	bl	10054 <_time_set_hwtick_function>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:151

    /* Set number of hardware ticks per system tick */
    SystemTimer1_GetPeriodTicks(SystemTimerDeviceDataPtr, &hw_ticks_per_tick);
   108a4:	a901      	add	r1, sp, #4
   108a6:	6820      	ldr	r0, [r4, #0]
   108a8:	f000 f900 	bl	10aac <SystemTimer1_GetPeriodTicks>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:152
    _time_set_hwticks_per_tick(hw_ticks_per_tick);
   108ac:	9801      	ldr	r0, [sp, #4]
   108ae:	f7ff fbdd 	bl	1006c <_time_set_hwticks_per_tick>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:155
    
    return MQX_OK;
}
   108b2:	2000      	movs	r0, #0
   108b4:	b002      	add	sp, #8
   108b6:	bd70      	pop	{r4, r5, r6, pc}
   108b8:	1fffe000 	.word	0x1fffe000
   108bc:	1fffe214 	.word	0x1fffe214
   108c0:	00010ac1 	.word	0x00010ac1

000108c4 <system_timer_start>:
system_timer_start():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:158

uint32_t system_timer_start(const void * timer_data_ptr)
{
   108c4:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:162
    /* Parameter is not used, suppress unused argument warning */
    (void)timer_data_ptr;                 
    
    SystemTimer1_Enable(SystemTimerDeviceDataPtr);
   108c6:	4b03      	ldr	r3, [pc, #12]	; (108d4 <system_timer_start+0x10>)
   108c8:	6818      	ldr	r0, [r3, #0]
   108ca:	f000 f8e1 	bl	10a90 <SystemTimer1_Enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:165
    
    return MQX_OK;
}
   108ce:	2000      	movs	r0, #0
   108d0:	bd08      	pop	{r3, pc}
   108d2:	46c0      	nop			; (mov r8, r8)
   108d4:	1fffe214 	.word	0x1fffe214

000108d8 <RNG1_Put>:
RNG1_Put():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:63
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
byte RNG1_Put(byte elem)
{
   108d8:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:66
  byte res = ERR_OK;

  EnterCritical();
   108da:	4b1a      	ldr	r3, [pc, #104]	; (10944 <RNG1_Put+0x6c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:63
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
byte RNG1_Put(byte elem)
{
   108dc:	b082      	sub	sp, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:66
  byte res = ERR_OK;

  EnterCritical();
   108de:	466a      	mov	r2, sp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:63
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
byte RNG1_Put(byte elem)
{
   108e0:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:66
  byte res = ERR_OK;

  EnterCritical();
   108e2:	f3ef 8010 	mrs	r0, PRIMASK
   108e6:	b672      	cpsid	i
   108e8:	7010      	strb	r0, [r2, #0]
   108ea:	781a      	ldrb	r2, [r3, #0]
   108ec:	3201      	adds	r2, #1
   108ee:	b2d2      	uxtb	r2, r2
   108f0:	701a      	strb	r2, [r3, #0]
   108f2:	2a01      	cmp	r2, #1
   108f4:	d01d      	beq.n	10932 <RNG1_Put+0x5a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:67
  if (RNG1_inSize==RNG1_BUF_SIZE) {
   108f6:	4a14      	ldr	r2, [pc, #80]	; (10948 <RNG1_Put+0x70>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:68
    res = ERR_TXFULL;
   108f8:	210b      	movs	r1, #11
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:67
byte RNG1_Put(byte elem)
{
  byte res = ERR_OK;

  EnterCritical();
  if (RNG1_inSize==RNG1_BUF_SIZE) {
   108fa:	7814      	ldrb	r4, [r2, #0]
   108fc:	2c40      	cmp	r4, #64	; 0x40
   108fe:	d00b      	beq.n	10918 <RNG1_Put+0x40>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:70
    res = ERR_TXFULL;
  } else {
    RNG1_buffer[RNG1_inIdx] = elem;
   10900:	4912      	ldr	r1, [pc, #72]	; (1094c <RNG1_Put+0x74>)
   10902:	4813      	ldr	r0, [pc, #76]	; (10950 <RNG1_Put+0x78>)
   10904:	780d      	ldrb	r5, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:71
    RNG1_inSize++;
   10906:	3401      	adds	r4, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:70

  EnterCritical();
  if (RNG1_inSize==RNG1_BUF_SIZE) {
    res = ERR_TXFULL;
  } else {
    RNG1_buffer[RNG1_inIdx] = elem;
   10908:	5546      	strb	r6, [r0, r5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:72
    RNG1_inSize++;
    RNG1_inIdx++;
   1090a:	3501      	adds	r5, #1
   1090c:	b2ed      	uxtb	r5, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:71
  EnterCritical();
  if (RNG1_inSize==RNG1_BUF_SIZE) {
    res = ERR_TXFULL;
  } else {
    RNG1_buffer[RNG1_inIdx] = elem;
    RNG1_inSize++;
   1090e:	7014      	strb	r4, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:73
    RNG1_inIdx++;
    if (RNG1_inIdx==RNG1_BUF_SIZE) {
   10910:	2d40      	cmp	r5, #64	; 0x40
   10912:	d013      	beq.n	1093c <RNG1_Put+0x64>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:72
  if (RNG1_inSize==RNG1_BUF_SIZE) {
    res = ERR_TXFULL;
  } else {
    RNG1_buffer[RNG1_inIdx] = elem;
    RNG1_inSize++;
    RNG1_inIdx++;
   10914:	700d      	strb	r5, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:64
**         ---             - Error code
** ===================================================================
*/
byte RNG1_Put(byte elem)
{
  byte res = ERR_OK;
   10916:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:77
    RNG1_inIdx++;
    if (RNG1_inIdx==RNG1_BUF_SIZE) {
      RNG1_inIdx = 0;
    }
  }
  ExitCritical();
   10918:	781a      	ldrb	r2, [r3, #0]
   1091a:	3a01      	subs	r2, #1
   1091c:	b2d2      	uxtb	r2, r2
   1091e:	701a      	strb	r2, [r3, #0]
   10920:	2a00      	cmp	r2, #0
   10922:	d103      	bne.n	1092c <RNG1_Put+0x54>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:77 (discriminator 1)
   10924:	4b0b      	ldr	r3, [pc, #44]	; (10954 <RNG1_Put+0x7c>)
   10926:	7818      	ldrb	r0, [r3, #0]
   10928:	f380 8810 	msr	PRIMASK, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:79
  return res;
}
   1092c:	1c08      	adds	r0, r1, #0
   1092e:	b002      	add	sp, #8
   10930:	bd70      	pop	{r4, r5, r6, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:66 (discriminator 1)
*/
byte RNG1_Put(byte elem)
{
  byte res = ERR_OK;

  EnterCritical();
   10932:	466a      	mov	r2, sp
   10934:	7811      	ldrb	r1, [r2, #0]
   10936:	4a07      	ldr	r2, [pc, #28]	; (10954 <RNG1_Put+0x7c>)
   10938:	7011      	strb	r1, [r2, #0]
   1093a:	e7dc      	b.n	108f6 <RNG1_Put+0x1e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:74
  } else {
    RNG1_buffer[RNG1_inIdx] = elem;
    RNG1_inSize++;
    RNG1_inIdx++;
    if (RNG1_inIdx==RNG1_BUF_SIZE) {
      RNG1_inIdx = 0;
   1093c:	2200      	movs	r2, #0
   1093e:	700a      	strb	r2, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:64
**         ---             - Error code
** ===================================================================
*/
byte RNG1_Put(byte elem)
{
  byte res = ERR_OK;
   10940:	2100      	movs	r1, #0
   10942:	e7e9      	b.n	10918 <RNG1_Put+0x40>
   10944:	1fffe1d4 	.word	0x1fffe1d4
   10948:	1fffe280 	.word	0x1fffe280
   1094c:	1fffe23c 	.word	0x1fffe23c
   10950:	1fffe240 	.word	0x1fffe240
   10954:	20000458 	.word	0x20000458

00010958 <RNG1_Get>:
RNG1_Get():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:95
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
byte RNG1_Get(byte *elemP)
{
   10958:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:98
  byte res = ERR_OK;

  EnterCritical();
   1095a:	4b1b      	ldr	r3, [pc, #108]	; (109c8 <RNG1_Get+0x70>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:95
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
byte RNG1_Get(byte *elemP)
{
   1095c:	b082      	sub	sp, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:98
  byte res = ERR_OK;

  EnterCritical();
   1095e:	466a      	mov	r2, sp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:95
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
byte RNG1_Get(byte *elemP)
{
   10960:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:98
  byte res = ERR_OK;

  EnterCritical();
   10962:	f3ef 8010 	mrs	r0, PRIMASK
   10966:	b672      	cpsid	i
   10968:	7010      	strb	r0, [r2, #0]
   1096a:	781a      	ldrb	r2, [r3, #0]
   1096c:	3201      	adds	r2, #1
   1096e:	b2d2      	uxtb	r2, r2
   10970:	701a      	strb	r2, [r3, #0]
   10972:	2a01      	cmp	r2, #1
   10974:	d01f      	beq.n	109b6 <RNG1_Get+0x5e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:99
  if (RNG1_inSize==0) {
   10976:	4a15      	ldr	r2, [pc, #84]	; (109cc <RNG1_Get+0x74>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:100
    res = ERR_RXEMPTY;
   10978:	240a      	movs	r4, #10
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:99
byte RNG1_Get(byte *elemP)
{
  byte res = ERR_OK;

  EnterCritical();
  if (RNG1_inSize==0) {
   1097a:	7811      	ldrb	r1, [r2, #0]
   1097c:	2900      	cmp	r1, #0
   1097e:	d10c      	bne.n	1099a <RNG1_Get+0x42>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:109
    RNG1_outIdx++;
    if (RNG1_outIdx==RNG1_BUF_SIZE) {
      RNG1_outIdx = 0;
    }
  }
  ExitCritical();
   10980:	781a      	ldrb	r2, [r3, #0]
   10982:	3a01      	subs	r2, #1
   10984:	b2d2      	uxtb	r2, r2
   10986:	701a      	strb	r2, [r3, #0]
   10988:	2a00      	cmp	r2, #0
   1098a:	d103      	bne.n	10994 <RNG1_Get+0x3c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:109 (discriminator 1)
   1098c:	4b10      	ldr	r3, [pc, #64]	; (109d0 <RNG1_Get+0x78>)
   1098e:	7818      	ldrb	r0, [r3, #0]
   10990:	f380 8810 	msr	PRIMASK, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:111
  return res;
}
   10994:	1c20      	adds	r0, r4, #0
   10996:	b002      	add	sp, #8
   10998:	bd70      	pop	{r4, r5, r6, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:102

  EnterCritical();
  if (RNG1_inSize==0) {
    res = ERR_RXEMPTY;
  } else {
    *elemP = RNG1_buffer[RNG1_outIdx];
   1099a:	4c0e      	ldr	r4, [pc, #56]	; (109d4 <RNG1_Get+0x7c>)
   1099c:	4e0e      	ldr	r6, [pc, #56]	; (109d8 <RNG1_Get+0x80>)
   1099e:	7820      	ldrb	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:103
    RNG1_inSize--;
   109a0:	3901      	subs	r1, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:102

  EnterCritical();
  if (RNG1_inSize==0) {
    res = ERR_RXEMPTY;
  } else {
    *elemP = RNG1_buffer[RNG1_outIdx];
   109a2:	5c36      	ldrb	r6, [r6, r0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:104
    RNG1_inSize--;
    RNG1_outIdx++;
   109a4:	3001      	adds	r0, #1
   109a6:	b2c0      	uxtb	r0, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:102

  EnterCritical();
  if (RNG1_inSize==0) {
    res = ERR_RXEMPTY;
  } else {
    *elemP = RNG1_buffer[RNG1_outIdx];
   109a8:	702e      	strb	r6, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:103
    RNG1_inSize--;
   109aa:	7011      	strb	r1, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:105
    RNG1_outIdx++;
    if (RNG1_outIdx==RNG1_BUF_SIZE) {
   109ac:	2840      	cmp	r0, #64	; 0x40
   109ae:	d007      	beq.n	109c0 <RNG1_Get+0x68>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:104
  if (RNG1_inSize==0) {
    res = ERR_RXEMPTY;
  } else {
    *elemP = RNG1_buffer[RNG1_outIdx];
    RNG1_inSize--;
    RNG1_outIdx++;
   109b0:	7020      	strb	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:96
**         ---             - Error code
** ===================================================================
*/
byte RNG1_Get(byte *elemP)
{
  byte res = ERR_OK;
   109b2:	2400      	movs	r4, #0
   109b4:	e7e4      	b.n	10980 <RNG1_Get+0x28>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:98 (discriminator 1)

  EnterCritical();
   109b6:	466a      	mov	r2, sp
   109b8:	7811      	ldrb	r1, [r2, #0]
   109ba:	4a05      	ldr	r2, [pc, #20]	; (109d0 <RNG1_Get+0x78>)
   109bc:	7011      	strb	r1, [r2, #0]
   109be:	e7da      	b.n	10976 <RNG1_Get+0x1e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:106
  } else {
    *elemP = RNG1_buffer[RNG1_outIdx];
    RNG1_inSize--;
    RNG1_outIdx++;
    if (RNG1_outIdx==RNG1_BUF_SIZE) {
      RNG1_outIdx = 0;
   109c0:	2200      	movs	r2, #0
   109c2:	7022      	strb	r2, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:96
**         ---             - Error code
** ===================================================================
*/
byte RNG1_Get(byte *elemP)
{
  byte res = ERR_OK;
   109c4:	2400      	movs	r4, #0
   109c6:	e7db      	b.n	10980 <RNG1_Get+0x28>
   109c8:	1fffe1d4 	.word	0x1fffe1d4
   109cc:	1fffe280 	.word	0x1fffe280
   109d0:	20000458 	.word	0x20000458
   109d4:	1fffe281 	.word	0x1fffe281
   109d8:	1fffe240 	.word	0x1fffe240

000109dc <RNG1_NofElements>:
RNG1_NofElements():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:125
**         ---             - Number of elements in the buffer.
** ===================================================================
*/
byte RNG1_NofElements(void)
{
  return RNG1_inSize;
   109dc:	4b01      	ldr	r3, [pc, #4]	; (109e4 <RNG1_NofElements+0x8>)
   109de:	7818      	ldrb	r0, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:126
}
   109e0:	4770      	bx	lr
   109e2:	46c0      	nop			; (mov r8, r8)
   109e4:	1fffe280 	.word	0x1fffe280

000109e8 <RNG1_NofFreeElements>:
RNG1_NofFreeElements():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:141
**         ---             - Number of elements in the buffer.
** ===================================================================
*/
byte RNG1_NofFreeElements(void)
{
  return (byte)(RNG1_BUF_SIZE-RNG1_inSize);
   109e8:	4b02      	ldr	r3, [pc, #8]	; (109f4 <RNG1_NofFreeElements+0xc>)
   109ea:	2040      	movs	r0, #64	; 0x40
   109ec:	781b      	ldrb	r3, [r3, #0]
   109ee:	1ac0      	subs	r0, r0, r3
   109f0:	b2c0      	uxtb	r0, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:142
}
   109f2:	4770      	bx	lr
   109f4:	1fffe280 	.word	0x1fffe280

000109f8 <RNG1_Init>:
RNG1_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:155
**     Returns     : Nothing
** ===================================================================
*/
void RNG1_Init(void)
{
  RNG1_inIdx = 0;
   109f8:	4a03      	ldr	r2, [pc, #12]	; (10a08 <RNG1_Init+0x10>)
   109fa:	2300      	movs	r3, #0
   109fc:	7013      	strb	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:156
  RNG1_outIdx = 0;
   109fe:	4a03      	ldr	r2, [pc, #12]	; (10a0c <RNG1_Init+0x14>)
   10a00:	7013      	strb	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:157
  RNG1_inSize = 0;
   10a02:	4a03      	ldr	r2, [pc, #12]	; (10a10 <RNG1_Init+0x18>)
   10a04:	7013      	strb	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/RNG1.c:158
}
   10a06:	4770      	bx	lr
   10a08:	1fffe23c 	.word	0x1fffe23c
   10a0c:	1fffe281 	.word	0x1fffe281
   10a10:	1fffe280 	.word	0x1fffe280

00010a14 <SystemTimer1_Interrupt>:
SystemTimer1_Interrupt():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:394
**         and eventually invokes event(s) of the component.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void SystemTimer1_Interrupt(LDD_RTOS_TISRParameter _isrParameter)
{
   10a14:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:398
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  SystemTimer1_TDeviceDataPtr DeviceDataPrv = (SystemTimer1_TDeviceDataPtr)_isrParameter;

  SysTick_PDD_ClearInterruptFlag(SysTick_BASE_PTR); /* Clear interrupt flag */
   10a16:	4b04      	ldr	r3, [pc, #16]	; (10a28 <SystemTimer1_Interrupt+0x14>)
   10a18:	4a04      	ldr	r2, [pc, #16]	; (10a2c <SystemTimer1_Interrupt+0x18>)
   10a1a:	6819      	ldr	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:399
  SystemTimer1_OnCounterRestart(DeviceDataPrv->UserDataPtr); /* Invoke OnCounterRestart event */
   10a1c:	6880      	ldr	r0, [r0, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:398
void SystemTimer1_Interrupt(LDD_RTOS_TISRParameter _isrParameter)
{
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  SystemTimer1_TDeviceDataPtr DeviceDataPrv = (SystemTimer1_TDeviceDataPtr)_isrParameter;

  SysTick_PDD_ClearInterruptFlag(SysTick_BASE_PTR); /* Clear interrupt flag */
   10a1e:	400a      	ands	r2, r1
   10a20:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:399
  SystemTimer1_OnCounterRestart(DeviceDataPrv->UserDataPtr); /* Invoke OnCounterRestart event */
   10a22:	f7ff ff21 	bl	10868 <SystemTimer1_OnCounterRestart>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:400
}
   10a26:	bd08      	pop	{r3, pc}
   10a28:	e000e010 	.word	0xe000e010
   10a2c:	fffeffff 	.word	0xfffeffff

00010a30 <SystemTimer1_Init>:
SystemTimer1_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:157
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* SystemTimer1_Init(LDD_TUserData *UserDataPtr)
{
   10a30:	b538      	push	{r3, r4, r5, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:162
  /* Allocate device structure */
  SystemTimer1_TDeviceData *DeviceDataPrv;
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   10a32:	4c11      	ldr	r4, [pc, #68]	; (10a78 <SystemTimer1_Init+0x48>)
   10a34:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:166
  /* Interrupt vector(s) allocation */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrData = _int_get_isr_data(LDD_ivIndex_INT_SysTick);
   10a36:	200f      	movs	r0, #15
   10a38:	f7fe fa86 	bl	ef48 <_int_get_isr_data>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:167
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrFunction = _int_install_isr(LDD_ivIndex_INT_SysTick, SystemTimer1_Interrupt, DeviceDataPrv);
   10a3c:	1c22      	adds	r2, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:166
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Interrupt vector(s) allocation */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrData = _int_get_isr_data(LDD_ivIndex_INT_SysTick);
   10a3e:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:167
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrFunction = _int_install_isr(LDD_ivIndex_INT_SysTick, SystemTimer1_Interrupt, DeviceDataPrv);
   10a40:	490e      	ldr	r1, [pc, #56]	; (10a7c <SystemTimer1_Init+0x4c>)
   10a42:	200f      	movs	r0, #15
   10a44:	f7fe faa0 	bl	ef88 <_int_install_isr>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:169
  /* SYST_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COUNTFLAG=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CLKSOURCE=0,TICKINT=0,ENABLE=0 */
  SYST_CSR = 0x00U;                    /* Clear control register */
   10a48:	4b0d      	ldr	r3, [pc, #52]	; (10a80 <SystemTimer1_Init+0x50>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:171
  /* SYST_RVR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,RELOAD=0x00493DFF */
  SYST_RVR = SysTick_RVR_RELOAD(0x00493DFF); /* Setup reload value */
   10a4a:	490e      	ldr	r1, [pc, #56]	; (10a84 <SystemTimer1_Init+0x54>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:169
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrData = _int_get_isr_data(LDD_ivIndex_INT_SysTick);
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrFunction = _int_install_isr(LDD_ivIndex_INT_SysTick, SystemTimer1_Interrupt, DeviceDataPrv);
  /* SYST_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COUNTFLAG=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CLKSOURCE=0,TICKINT=0,ENABLE=0 */
  SYST_CSR = 0x00U;                    /* Clear control register */
   10a4c:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:167
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Interrupt vector(s) allocation */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrData = _int_get_isr_data(LDD_ivIndex_INT_SysTick);
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrFunction = _int_install_isr(LDD_ivIndex_INT_SysTick, SystemTimer1_Interrupt, DeviceDataPrv);
   10a4e:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:169
  /* SYST_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COUNTFLAG=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CLKSOURCE=0,TICKINT=0,ENABLE=0 */
  SYST_CSR = 0x00U;                    /* Clear control register */
   10a50:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:171
  /* SYST_RVR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,RELOAD=0x00493DFF */
  SYST_RVR = SysTick_RVR_RELOAD(0x00493DFF); /* Setup reload value */
   10a52:	6059      	str	r1, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:173
  /* SYST_CVR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CURRENT=0 */
  SYST_CVR = SysTick_CVR_CURRENT(0x00); /* Clear current value */
   10a54:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:175
  /* SCB_SHPR3: PRI_15=0x80 */
  SCB_SHPR3 = (uint32_t)((SCB_SHPR3 & (uint32_t)~(uint32_t)(
   10a56:	490c      	ldr	r1, [pc, #48]	; (10a88 <SystemTimer1_Init+0x58>)
   10a58:	22d2      	movs	r2, #210	; 0xd2
   10a5a:	0112      	lsls	r2, r2, #4
   10a5c:	588d      	ldr	r5, [r1, r2]
   10a5e:	2080      	movs	r0, #128	; 0x80
   10a60:	022d      	lsls	r5, r5, #8
   10a62:	0a2d      	lsrs	r5, r5, #8
   10a64:	0600      	lsls	r0, r0, #24
   10a66:	4328      	orrs	r0, r5
   10a68:	5088      	str	r0, [r1, r2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:181
               SCB_SHPR3_PRI_15(0x7F)
              )) | (uint32_t)(
               SCB_SHPR3_PRI_15(0x80)
              ));
  /* SYST_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COUNTFLAG=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CLKSOURCE=1,TICKINT=1,ENABLE=0 */
  SYST_CSR = (SysTick_CSR_CLKSOURCE_MASK | SysTick_CSR_TICKINT_MASK); /* Set up control register */
   10a6a:	2206      	movs	r2, #6
   10a6c:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:183
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_SystemTimer1_ID,DeviceDataPrv);
   10a6e:	4b07      	ldr	r3, [pc, #28]	; (10a8c <SystemTimer1_Init+0x5c>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:185
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
}
   10a70:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:183
               SCB_SHPR3_PRI_15(0x80)
              ));
  /* SYST_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COUNTFLAG=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CLKSOURCE=1,TICKINT=1,ENABLE=0 */
  SYST_CSR = (SysTick_CSR_CLKSOURCE_MASK | SysTick_CSR_TICKINT_MASK); /* Set up control register */
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_SystemTimer1_ID,DeviceDataPrv);
   10a72:	601c      	str	r4, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:185
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
}
   10a74:	bd38      	pop	{r3, r4, r5, pc}
   10a76:	46c0      	nop			; (mov r8, r8)
   10a78:	1fffe284 	.word	0x1fffe284
   10a7c:	00010a15 	.word	0x00010a15
   10a80:	e000e010 	.word	0xe000e010
   10a84:	00493dff 	.word	0x00493dff
   10a88:	e000e000 	.word	0xe000e000
   10a8c:	1fffe218 	.word	0x1fffe218

00010a90 <SystemTimer1_Enable>:
SystemTimer1_Enable():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:238
*/
/* ===================================================================*/
LDD_TError SystemTimer1_Enable(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  SysTick_PDD_EnableDevice(SysTick_BASE_PTR, PDD_ENABLE); /* Enable the device */
   10a90:	4b03      	ldr	r3, [pc, #12]	; (10aa0 <SystemTimer1_Enable+0x10>)
   10a92:	2201      	movs	r2, #1
   10a94:	6819      	ldr	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:240
  return ERR_OK;
}
   10a96:	2000      	movs	r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:238
*/
/* ===================================================================*/
LDD_TError SystemTimer1_Enable(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  SysTick_PDD_EnableDevice(SysTick_BASE_PTR, PDD_ENABLE); /* Enable the device */
   10a98:	430a      	orrs	r2, r1
   10a9a:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:240
  return ERR_OK;
}
   10a9c:	4770      	bx	lr
   10a9e:	46c0      	nop			; (mov r8, r8)
   10aa0:	e000e010 	.word	0xe000e010

00010aa4 <SystemTimer1_GetInputFrequency>:
SystemTimer1_GetInputFrequency():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:288
/* ===================================================================*/
uint32_t SystemTimer1_GetInputFrequency(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  return SystemTimer1_CNT_INP_FREQ_U_0;
}
   10aa4:	4800      	ldr	r0, [pc, #0]	; (10aa8 <SystemTimer1_GetInputFrequency+0x4>)
   10aa6:	4770      	bx	lr
   10aa8:	02dc6c00 	.word	0x02dc6c00

00010aac <SystemTimer1_GetPeriodTicks>:
SystemTimer1_GetPeriodTicks():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:319
LDD_TError SystemTimer1_GetPeriodTicks(LDD_TDeviceData *DeviceDataPtr, SystemTimer1_TValueType *TicksPtr)
{
  uint32_t tmp;

  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  tmp = (SystemTimer1_TValueType)(SysTick_PDD_ReadReloadValueReg(SysTick_BASE_PTR));
   10aac:	4b03      	ldr	r3, [pc, #12]	; (10abc <SystemTimer1_GetPeriodTicks+0x10>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:323
  *TicksPtr = (SystemTimer1_TValueType)++tmp;
  *TicksPtr &= 0x00FFFFFFUL;
  return ERR_OK;                       /* OK */
}
   10aae:	2000      	movs	r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:319
LDD_TError SystemTimer1_GetPeriodTicks(LDD_TDeviceData *DeviceDataPtr, SystemTimer1_TValueType *TicksPtr)
{
  uint32_t tmp;

  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  tmp = (SystemTimer1_TValueType)(SysTick_PDD_ReadReloadValueReg(SysTick_BASE_PTR));
   10ab0:	685b      	ldr	r3, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:320
  *TicksPtr = (SystemTimer1_TValueType)++tmp;
   10ab2:	3301      	adds	r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:321
  *TicksPtr &= 0x00FFFFFFUL;
   10ab4:	021b      	lsls	r3, r3, #8
   10ab6:	0a1b      	lsrs	r3, r3, #8
   10ab8:	600b      	str	r3, [r1, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:323
  return ERR_OK;                       /* OK */
}
   10aba:	4770      	bx	lr
   10abc:	e000e010 	.word	0xe000e010

00010ac0 <SystemTimer1_GetCounterValue>:
SystemTimer1_GetCounterValue():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:380
*/
/* ===================================================================*/
SystemTimer1_TValueType SystemTimer1_GetCounterValue(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  return (SystemTimer1_TValueType)SysTick_PDD_ReadCurrentValueReg(SysTick_BASE_PTR);
   10ac0:	4b01      	ldr	r3, [pc, #4]	; (10ac8 <SystemTimer1_GetCounterValue+0x8>)
   10ac2:	6898      	ldr	r0, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:381
}
   10ac4:	4770      	bx	lr
   10ac6:	46c0      	nop			; (mov r8, r8)
   10ac8:	e000e010 	.word	0xe000e010

00010acc <TestPin_KF_Time_Init>:
TestPin_KF_Time_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:133
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Configure pin as output */
  /* GPIOC_PDDR: PDD|=0x0400 */
  GPIOC_PDDR |= GPIO_PDDR_PDD(0x0400);
   10acc:	4b0b      	ldr	r3, [pc, #44]	; (10afc <TestPin_KF_Time_Init+0x30>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:130
  /* Allocate device structure */
  TestPin_KF_Time_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   10ace:	4a0c      	ldr	r2, [pc, #48]	; (10b00 <TestPin_KF_Time_Init+0x34>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:133
  /* Configure pin as output */
  /* GPIOC_PDDR: PDD|=0x0400 */
  GPIOC_PDDR |= GPIO_PDDR_PDD(0x0400);
   10ad0:	2180      	movs	r1, #128	; 0x80
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:130
  /* Allocate device structure */
  TestPin_KF_Time_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   10ad2:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:133
  /* Configure pin as output */
  /* GPIOC_PDDR: PDD|=0x0400 */
  GPIOC_PDDR |= GPIO_PDDR_PDD(0x0400);
   10ad4:	6958      	ldr	r0, [r3, #20]
   10ad6:	00c9      	lsls	r1, r1, #3
   10ad8:	4301      	orrs	r1, r0
   10ada:	6159      	str	r1, [r3, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:136
  /* Set initialization value */
  /* GPIOC_PDOR: PDO&=~0x0400 */
  GPIOC_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x0400));
   10adc:	6818      	ldr	r0, [r3, #0]
   10ade:	4909      	ldr	r1, [pc, #36]	; (10b04 <TestPin_KF_Time_Init+0x38>)
   10ae0:	4001      	ands	r1, r0
   10ae2:	6019      	str	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:139
  /* Initialization of Port Control register */
  /* PORTC_PCR10: ISF=0,MUX=1 */
  PORTC_PCR10 = (uint32_t)((PORTC_PCR10 & (uint32_t)~(uint32_t)(
   10ae4:	4b08      	ldr	r3, [pc, #32]	; (10b08 <TestPin_KF_Time_Init+0x3c>)
   10ae6:	4909      	ldr	r1, [pc, #36]	; (10b0c <TestPin_KF_Time_Init+0x40>)
   10ae8:	6a98      	ldr	r0, [r3, #40]	; 0x28
   10aea:	4001      	ands	r1, r0
   10aec:	2080      	movs	r0, #128	; 0x80
   10aee:	0040      	lsls	r0, r0, #1
   10af0:	4301      	orrs	r1, r0
   10af2:	6299      	str	r1, [r3, #40]	; 0x28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:146
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TestPin_KF_Time_ID,DeviceDataPrv);
   10af4:	4b06      	ldr	r3, [pc, #24]	; (10b10 <TestPin_KF_Time_Init+0x44>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:148
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   10af6:	1c10      	adds	r0, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:146
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TestPin_KF_Time_ID,DeviceDataPrv);
   10af8:	61da      	str	r2, [r3, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:148
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   10afa:	4770      	bx	lr
   10afc:	400ff080 	.word	0x400ff080
   10b00:	1fffe290 	.word	0x1fffe290
   10b04:	fffffbff 	.word	0xfffffbff
   10b08:	4004b000 	.word	0x4004b000
   10b0c:	fefff8ff 	.word	0xfefff8ff
   10b10:	1fffe218 	.word	0x1fffe218

00010b14 <TestPin_KF_Time_ClrVal>:
TestPin_KF_Time_ClrVal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:229
*/
/* ===================================================================*/
void TestPin_KF_Time_ClrVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_ClearPortDataOutputMask(TestPin_KF_Time_MODULE_BASE_ADDRESS, TestPin_KF_Time_PORT_MASK);
   10b14:	4b02      	ldr	r3, [pc, #8]	; (10b20 <TestPin_KF_Time_ClrVal+0xc>)
   10b16:	2280      	movs	r2, #128	; 0x80
   10b18:	00d2      	lsls	r2, r2, #3
   10b1a:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:230
}
   10b1c:	4770      	bx	lr
   10b1e:	46c0      	nop			; (mov r8, r8)
   10b20:	f8000080 	.word	0xf8000080

00010b24 <TestPin_KF_Time_SetVal>:
TestPin_KF_Time_SetVal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:249
*/
/* ===================================================================*/
void TestPin_KF_Time_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(TestPin_KF_Time_MODULE_BASE_ADDRESS, TestPin_KF_Time_PORT_MASK);
   10b24:	4b02      	ldr	r3, [pc, #8]	; (10b30 <TestPin_KF_Time_SetVal+0xc>)
   10b26:	2280      	movs	r2, #128	; 0x80
   10b28:	00d2      	lsls	r2, r2, #3
   10b2a:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:250
}
   10b2c:	4770      	bx	lr
   10b2e:	46c0      	nop			; (mov r8, r8)
   10b30:	f8000080 	.word	0xf8000080

00010b34 <TestPin_MagCal_Time_Init>:
TestPin_MagCal_Time_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:133
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Configure pin as output */
  /* GPIOC_PDDR: PDD|=0x0800 */
  GPIOC_PDDR |= GPIO_PDDR_PDD(0x0800);
   10b34:	4b0b      	ldr	r3, [pc, #44]	; (10b64 <TestPin_MagCal_Time_Init+0x30>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:130
  /* Allocate device structure */
  TestPin_MagCal_Time_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   10b36:	4a0c      	ldr	r2, [pc, #48]	; (10b68 <TestPin_MagCal_Time_Init+0x34>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:133
  /* Configure pin as output */
  /* GPIOC_PDDR: PDD|=0x0800 */
  GPIOC_PDDR |= GPIO_PDDR_PDD(0x0800);
   10b38:	2180      	movs	r1, #128	; 0x80
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:130
  /* Allocate device structure */
  TestPin_MagCal_Time_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   10b3a:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:133
  /* Configure pin as output */
  /* GPIOC_PDDR: PDD|=0x0800 */
  GPIOC_PDDR |= GPIO_PDDR_PDD(0x0800);
   10b3c:	6958      	ldr	r0, [r3, #20]
   10b3e:	0109      	lsls	r1, r1, #4
   10b40:	4301      	orrs	r1, r0
   10b42:	6159      	str	r1, [r3, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:136
  /* Set initialization value */
  /* GPIOC_PDOR: PDO&=~0x0800 */
  GPIOC_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x0800));
   10b44:	6818      	ldr	r0, [r3, #0]
   10b46:	4909      	ldr	r1, [pc, #36]	; (10b6c <TestPin_MagCal_Time_Init+0x38>)
   10b48:	4001      	ands	r1, r0
   10b4a:	6019      	str	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:139
  /* Initialization of Port Control register */
  /* PORTC_PCR11: ISF=0,MUX=1 */
  PORTC_PCR11 = (uint32_t)((PORTC_PCR11 & (uint32_t)~(uint32_t)(
   10b4c:	4b08      	ldr	r3, [pc, #32]	; (10b70 <TestPin_MagCal_Time_Init+0x3c>)
   10b4e:	4909      	ldr	r1, [pc, #36]	; (10b74 <TestPin_MagCal_Time_Init+0x40>)
   10b50:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   10b52:	4001      	ands	r1, r0
   10b54:	2080      	movs	r0, #128	; 0x80
   10b56:	0040      	lsls	r0, r0, #1
   10b58:	4301      	orrs	r1, r0
   10b5a:	62d9      	str	r1, [r3, #44]	; 0x2c
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:146
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TestPin_MagCal_Time_ID,DeviceDataPrv);
   10b5c:	4b06      	ldr	r3, [pc, #24]	; (10b78 <TestPin_MagCal_Time_Init+0x44>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:148
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   10b5e:	1c10      	adds	r0, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:146
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TestPin_MagCal_Time_ID,DeviceDataPrv);
   10b60:	621a      	str	r2, [r3, #32]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:148
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   10b62:	4770      	bx	lr
   10b64:	400ff080 	.word	0x400ff080
   10b68:	1fffe294 	.word	0x1fffe294
   10b6c:	fffff7ff 	.word	0xfffff7ff
   10b70:	4004b000 	.word	0x4004b000
   10b74:	fefff8ff 	.word	0xfefff8ff
   10b78:	1fffe218 	.word	0x1fffe218

00010b7c <TestPin_MagCal_Time_ClrVal>:
TestPin_MagCal_Time_ClrVal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:229
*/
/* ===================================================================*/
void TestPin_MagCal_Time_ClrVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_ClearPortDataOutputMask(TestPin_MagCal_Time_MODULE_BASE_ADDRESS, TestPin_MagCal_Time_PORT_MASK);
   10b7c:	4b02      	ldr	r3, [pc, #8]	; (10b88 <TestPin_MagCal_Time_ClrVal+0xc>)
   10b7e:	2280      	movs	r2, #128	; 0x80
   10b80:	0112      	lsls	r2, r2, #4
   10b82:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:230
}
   10b84:	4770      	bx	lr
   10b86:	46c0      	nop			; (mov r8, r8)
   10b88:	f8000080 	.word	0xf8000080

00010b8c <TestPin_MagCal_Time_SetVal>:
TestPin_MagCal_Time_SetVal():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:249
*/
/* ===================================================================*/
void TestPin_MagCal_Time_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(TestPin_MagCal_Time_MODULE_BASE_ADDRESS, TestPin_MagCal_Time_PORT_MASK);
   10b8c:	4b02      	ldr	r3, [pc, #8]	; (10b98 <TestPin_MagCal_Time_SetVal+0xc>)
   10b8e:	2280      	movs	r2, #128	; 0x80
   10b90:	0112      	lsls	r2, r2, #4
   10b92:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:250
}
   10b94:	4770      	bx	lr
   10b96:	46c0      	nop			; (mov r8, r8)
   10b98:	f8000080 	.word	0xf8000080

00010b9c <UART_Interrupt>:
UART_Interrupt():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:498
**         interrupt. Calls InterruptTX/InterruptRX methods.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void UART_Interrupt(LDD_RTOS_TISRParameter _isrParameter)
{
   10b9c:	b538      	push	{r3, r4, r5, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:501
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)_isrParameter;
  register uint32_t StatReg = UART0_PDD_ReadInterruptStatusReg(UART0_BASE_PTR); /* Read status register */
   10b9e:	4b35      	ldr	r3, [pc, #212]	; (10c74 <UART_Interrupt+0xd8>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:503

  if (StatReg & (UART0_S1_NF_MASK | UART0_S1_OR_MASK | UART0_S1_FE_MASK | UART0_S1_PF_MASK)) { /* Is any error flag set? */
   10ba0:	220f      	movs	r2, #15
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:501
*/
void UART_Interrupt(LDD_RTOS_TISRParameter _isrParameter)
{
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)_isrParameter;
  register uint32_t StatReg = UART0_PDD_ReadInterruptStatusReg(UART0_BASE_PTR); /* Read status register */
   10ba2:	791c      	ldrb	r4, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:498
**         interrupt. Calls InterruptTX/InterruptRX methods.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void UART_Interrupt(LDD_RTOS_TISRParameter _isrParameter)
{
   10ba4:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:501
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)_isrParameter;
  register uint32_t StatReg = UART0_PDD_ReadInterruptStatusReg(UART0_BASE_PTR); /* Read status register */
   10ba6:	b2e4      	uxtb	r4, r4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:503

  if (StatReg & (UART0_S1_NF_MASK | UART0_S1_OR_MASK | UART0_S1_FE_MASK | UART0_S1_PF_MASK)) { /* Is any error flag set? */
   10ba8:	4222      	tst	r2, r4
   10baa:	d003      	beq.n	10bb4 <UART_Interrupt+0x18>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:504
    UART0_PDD_ClearInterruptFlags(UART0_BASE_PTR, (UART0_S1_NF_MASK | UART0_S1_OR_MASK | UART0_S1_FE_MASK | UART0_S1_PF_MASK));
   10bac:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:505
    (void)UART0_PDD_GetChar8(UART0_BASE_PTR); /* Dummy read 8-bit character from receiver */
   10bae:	79db      	ldrb	r3, [r3, #7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:506
    StatReg &= (uint32_t)(~(uint32_t)UART0_S1_RDRF_MASK); /* Clear the receive data flag to discard the errorneous data */
   10bb0:	2320      	movs	r3, #32
   10bb2:	439c      	bics	r4, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:508
  }
  if (StatReg & UART0_S1_RDRF_MASK) {  /* Is the receiver's interrupt flag set? */
   10bb4:	06a3      	lsls	r3, r4, #26
   10bb6:	d41c      	bmi.n	10bf2 <UART_Interrupt+0x56>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:511
    InterruptRx(DeviceDataPrv);        /* If yes, then invoke the internal service routine. This routine is inlined. */
  }
  if (DeviceDataPrv->SerFlag & ENABLED_TX_INT) { /* Is the transmitter interrupt enabled? */
   10bb8:	882a      	ldrh	r2, [r5, #0]
   10bba:	2301      	movs	r3, #1
   10bbc:	4213      	tst	r3, r2
   10bbe:	d002      	beq.n	10bc6 <UART_Interrupt+0x2a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:512
    if (StatReg & UART0_S1_TDRE_MASK) { /* Is the transmitter empty? */
   10bc0:	2280      	movs	r2, #128	; 0x80
   10bc2:	4222      	tst	r2, r4
   10bc4:	d12c      	bne.n	10c20 <UART_Interrupt+0x84>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:516
      InterruptTx(DeviceDataPrv);      /* If yes, then invoke the internal service routine. This routine is inlined. */
    }
  }
  if ((UART0_PDD_GetTxCompleteInterruptMask(UART0_BASE_PTR) != 0U)  && (StatReg & UART0_S1_TC_MASK)) { /* Is a transmission completed? */
   10bc6:	4b2b      	ldr	r3, [pc, #172]	; (10c74 <UART_Interrupt+0xd8>)
   10bc8:	2240      	movs	r2, #64	; 0x40
   10bca:	78d9      	ldrb	r1, [r3, #3]
   10bcc:	420a      	tst	r2, r1
   10bce:	d001      	beq.n	10bd4 <UART_Interrupt+0x38>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:516 (discriminator 1)
   10bd0:	4222      	tst	r2, r4
   10bd2:	d100      	bne.n	10bd6 <UART_Interrupt+0x3a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:521
    UART0_PDD_DisableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER_COMPLETE); /* If yes then disable TX complete interrupt */
    DeviceDataPrv->SerFlag |= TX_COMPLETED; /* Set the flag */
    UART_OnTxComplete(DeviceDataPrv->UserDataPtr); /* If yes then invoke user event */
  }
}
   10bd4:	bd38      	pop	{r3, r4, r5, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:517
    if (StatReg & UART0_S1_TDRE_MASK) { /* Is the transmitter empty? */
      InterruptTx(DeviceDataPrv);      /* If yes, then invoke the internal service routine. This routine is inlined. */
    }
  }
  if ((UART0_PDD_GetTxCompleteInterruptMask(UART0_BASE_PTR) != 0U)  && (StatReg & UART0_S1_TC_MASK)) { /* Is a transmission completed? */
    UART0_PDD_DisableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER_COMPLETE); /* If yes then disable TX complete interrupt */
   10bd6:	78d9      	ldrb	r1, [r3, #3]
   10bd8:	4391      	bics	r1, r2
   10bda:	70d9      	strb	r1, [r3, #3]
   10bdc:	799a      	ldrb	r2, [r3, #6]
   10bde:	b2d2      	uxtb	r2, r2
   10be0:	719a      	strb	r2, [r3, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:518
    DeviceDataPrv->SerFlag |= TX_COMPLETED; /* Set the flag */
   10be2:	882a      	ldrh	r2, [r5, #0]
   10be4:	2304      	movs	r3, #4
   10be6:	4313      	orrs	r3, r2
   10be8:	802b      	strh	r3, [r5, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:519
    UART_OnTxComplete(DeviceDataPrv->UserDataPtr); /* If yes then invoke user event */
   10bea:	69e8      	ldr	r0, [r5, #28]
   10bec:	f7f1 ffce 	bl	2b8c <UART_OnTxComplete>
   10bf0:	e7f0      	b.n	10bd4 <UART_Interrupt+0x38>
InterruptRx():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:449
*/
static void InterruptRx(UART_TDeviceDataPtr DeviceDataPrv)
{
  register uint16_t Data;              /* Temporary variable for data */

  Data = (uint16_t)UART0_PDD_GetChar8(UART0_BASE_PTR); /* Read an 8-bit character from the receiver */
   10bf2:	4b20      	ldr	r3, [pc, #128]	; (10c74 <UART_Interrupt+0xd8>)
   10bf4:	79db      	ldrb	r3, [r3, #7]
   10bf6:	b2d9      	uxtb	r1, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:450
  if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the receive block operation pending? */
   10bf8:	892b      	ldrh	r3, [r5, #8]
   10bfa:	2b00      	cmp	r3, #0
   10bfc:	d0dc      	beq.n	10bb8 <UART_Interrupt+0x1c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:451
    *(DeviceDataPrv->InpDataPtr++) = (uint8_t)Data; /* Put an 8-bit character to the receive buffer */
   10bfe:	686a      	ldr	r2, [r5, #4]
   10c00:	1c53      	adds	r3, r2, #1
   10c02:	606b      	str	r3, [r5, #4]
   10c04:	7011      	strb	r1, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:452
    DeviceDataPrv->InpRecvDataNum++;   /* Increment received char. counter */
   10c06:	886b      	ldrh	r3, [r5, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:453
    if (DeviceDataPrv->InpRecvDataNum == DeviceDataPrv->InpDataNumReq) { /* Is the requested number of characters received? */
   10c08:	892a      	ldrh	r2, [r5, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:452
  register uint16_t Data;              /* Temporary variable for data */

  Data = (uint16_t)UART0_PDD_GetChar8(UART0_BASE_PTR); /* Read an 8-bit character from the receiver */
  if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the receive block operation pending? */
    *(DeviceDataPrv->InpDataPtr++) = (uint8_t)Data; /* Put an 8-bit character to the receive buffer */
    DeviceDataPrv->InpRecvDataNum++;   /* Increment received char. counter */
   10c0a:	3301      	adds	r3, #1
   10c0c:	b29b      	uxth	r3, r3
   10c0e:	806b      	strh	r3, [r5, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:453
    if (DeviceDataPrv->InpRecvDataNum == DeviceDataPrv->InpDataNumReq) { /* Is the requested number of characters received? */
   10c10:	429a      	cmp	r2, r3
   10c12:	d1d1      	bne.n	10bb8 <UART_Interrupt+0x1c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:454
      DeviceDataPrv->InpDataNumReq = 0x00U; /* If yes then clear number of requested characters to be received. */
   10c14:	2300      	movs	r3, #0
   10c16:	812b      	strh	r3, [r5, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:455
      UART_OnBlockReceived(DeviceDataPrv->UserDataPtr);
   10c18:	69e8      	ldr	r0, [r5, #28]
   10c1a:	f7f1 ffb9 	bl	2b90 <UART_OnBlockReceived>
   10c1e:	e7cb      	b.n	10bb8 <UART_Interrupt+0x1c>
InterruptTx():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:473
** ===================================================================
*/
static void InterruptTx(UART_TDeviceDataPtr DeviceDataPrv)
{

  if (DeviceDataPrv->OutSentDataNum < DeviceDataPrv->OutDataNumReq) { /* Is number of sent characters less than the number of requested incoming characters? */
   10c20:	8969      	ldrh	r1, [r5, #10]
   10c22:	8a2a      	ldrh	r2, [r5, #16]
   10c24:	4291      	cmp	r1, r2
   10c26:	d212      	bcs.n	10c4e <UART_Interrupt+0xb2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:474
    UART0_PDD_PutChar8(UART0_BASE_PTR, *(DeviceDataPrv->OutDataPtr++)); /* Put a 8-bit character to the transmit register */
   10c28:	68eb      	ldr	r3, [r5, #12]
   10c2a:	1c5a      	adds	r2, r3, #1
   10c2c:	60ea      	str	r2, [r5, #12]
   10c2e:	781a      	ldrb	r2, [r3, #0]
   10c30:	4b10      	ldr	r3, [pc, #64]	; (10c74 <UART_Interrupt+0xd8>)
   10c32:	71da      	strb	r2, [r3, #7]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:475
    DeviceDataPrv->OutSentDataNum++;   /* Increment the counter of sent characters. */
   10c34:	896b      	ldrh	r3, [r5, #10]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:476
    if (DeviceDataPrv->OutSentDataNum == DeviceDataPrv->OutDataNumReq) {
   10c36:	8a2a      	ldrh	r2, [r5, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:475
static void InterruptTx(UART_TDeviceDataPtr DeviceDataPrv)
{

  if (DeviceDataPrv->OutSentDataNum < DeviceDataPrv->OutDataNumReq) { /* Is number of sent characters less than the number of requested incoming characters? */
    UART0_PDD_PutChar8(UART0_BASE_PTR, *(DeviceDataPrv->OutDataPtr++)); /* Put a 8-bit character to the transmit register */
    DeviceDataPrv->OutSentDataNum++;   /* Increment the counter of sent characters. */
   10c38:	3301      	adds	r3, #1
   10c3a:	b29b      	uxth	r3, r3
   10c3c:	816b      	strh	r3, [r5, #10]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:476
    if (DeviceDataPrv->OutSentDataNum == DeviceDataPrv->OutDataNumReq) {
   10c3e:	429a      	cmp	r2, r3
   10c40:	d1c1      	bne.n	10bc6 <UART_Interrupt+0x2a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:477
      DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBlock() */
   10c42:	2300      	movs	r3, #0
   10c44:	822b      	strh	r3, [r5, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:478
      UART_OnBlockSent(DeviceDataPrv->UserDataPtr);
   10c46:	69e8      	ldr	r0, [r5, #28]
   10c48:	f7f1 ff8a 	bl	2b60 <UART_OnBlockSent>
   10c4c:	e7bb      	b.n	10bc6 <UART_Interrupt+0x2a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:481
    }
  } else {
    UART0_PDD_DisableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER); /* Disable TX interrupt */
   10c4e:	4a09      	ldr	r2, [pc, #36]	; (10c74 <UART_Interrupt+0xd8>)
   10c50:	207f      	movs	r0, #127	; 0x7f
   10c52:	78d1      	ldrb	r1, [r2, #3]
   10c54:	4001      	ands	r1, r0
   10c56:	70d1      	strb	r1, [r2, #3]
   10c58:	7991      	ldrb	r1, [r2, #6]
   10c5a:	b2c9      	uxtb	r1, r1
   10c5c:	7191      	strb	r1, [r2, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:482
    UART0_PDD_EnableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER_COMPLETE); /* Enable TX complete interrupt */
   10c5e:	78d0      	ldrb	r0, [r2, #3]
   10c60:	2140      	movs	r1, #64	; 0x40
   10c62:	4301      	orrs	r1, r0
   10c64:	70d1      	strb	r1, [r2, #3]
   10c66:	7991      	ldrb	r1, [r2, #6]
   10c68:	b2c9      	uxtb	r1, r1
   10c6a:	7191      	strb	r1, [r2, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:483
    DeviceDataPrv->SerFlag &= (uint16_t)(~(uint16_t)ENABLED_TX_INT); /* Clear the flag ENABLED_TX_INT */
   10c6c:	882a      	ldrh	r2, [r5, #0]
   10c6e:	439a      	bics	r2, r3
   10c70:	802a      	strh	r2, [r5, #0]
   10c72:	e7a8      	b.n	10bc6 <UART_Interrupt+0x2a>
   10c74:	4006a000 	.word	0x4006a000

00010c78 <UART_Init>:
UART_Init():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:163
**     @return
**                         - Device data structure pointer.
*/
/* ===================================================================*/
LDD_TDeviceData* UART_Init(LDD_TUserData *UserDataPtr)
{
   10c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:170
  UART_TDeviceDataPtr DeviceDataPrv;
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;

  /* Clear the receive counters and pointer */
  DeviceDataPrv->InpRecvDataNum = 0x00U; /* Clear the counter of received characters */
   10c7a:	4c37      	ldr	r4, [pc, #220]	; (10d58 <UART_Init+0xe0>)
   10c7c:	2500      	movs	r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:177
  DeviceDataPrv->InpDataPtr = NULL;    /* Clear the buffer pointer for received characters */
  /* Clear the transmit counters and pointer */
  DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters */
  DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBlock() */
  DeviceDataPrv->OutDataPtr = NULL;    /* Clear the buffer pointer for data to be transmitted */
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   10c7e:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:181
  /* Allocate interrupt vectors */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_UART0);
   10c80:	201c      	movs	r0, #28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:170
  UART_TDeviceDataPtr DeviceDataPrv;
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;

  /* Clear the receive counters and pointer */
  DeviceDataPrv->InpRecvDataNum = 0x00U; /* Clear the counter of received characters */
   10c82:	8065      	strh	r5, [r4, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:171
  DeviceDataPrv->InpDataNumReq = 0x00U; /* Clear the counter of characters to receive by ReceiveBlock() */
   10c84:	8125      	strh	r5, [r4, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:172
  DeviceDataPrv->InpDataPtr = NULL;    /* Clear the buffer pointer for received characters */
   10c86:	6065      	str	r5, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:174
  /* Clear the transmit counters and pointer */
  DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters */
   10c88:	8165      	strh	r5, [r4, #10]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:175
  DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBlock() */
   10c8a:	8225      	strh	r5, [r4, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:176
  DeviceDataPrv->OutDataPtr = NULL;    /* Clear the buffer pointer for data to be transmitted */
   10c8c:	60e5      	str	r5, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:181
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Allocate interrupt vectors */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_UART0);
   10c8e:	f7fe f95b 	bl	ef48 <_int_get_isr_data>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:182
  DeviceDataPrv->SavedISRSettings.isrFunction = _int_install_isr(LDD_ivIndex_INT_UART0, UART_Interrupt, DeviceDataPrv);
   10c92:	1c22      	adds	r2, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:181
  DeviceDataPrv->OutDataPtr = NULL;    /* Clear the buffer pointer for data to be transmitted */
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Allocate interrupt vectors */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_UART0);
   10c94:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:182
  DeviceDataPrv->SavedISRSettings.isrFunction = _int_install_isr(LDD_ivIndex_INT_UART0, UART_Interrupt, DeviceDataPrv);
   10c96:	4931      	ldr	r1, [pc, #196]	; (10d5c <UART_Init+0xe4>)
   10c98:	201c      	movs	r0, #28
   10c9a:	f7fe f975 	bl	ef88 <_int_install_isr>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:184
  /* SIM_SCGC4: UART0=1 */
  SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
   10c9e:	4a30      	ldr	r2, [pc, #192]	; (10d60 <UART_Init+0xe8>)
   10ca0:	4b30      	ldr	r3, [pc, #192]	; (10d64 <UART_Init+0xec>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:182
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Allocate interrupt vectors */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_UART0);
  DeviceDataPrv->SavedISRSettings.isrFunction = _int_install_isr(LDD_ivIndex_INT_UART0, UART_Interrupt, DeviceDataPrv);
   10ca2:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:184
  /* SIM_SCGC4: UART0=1 */
  SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
   10ca4:	2180      	movs	r1, #128	; 0x80
   10ca6:	58d0      	ldr	r0, [r2, r3]
   10ca8:	00c9      	lsls	r1, r1, #3
   10caa:	4301      	orrs	r1, r0
   10cac:	50d1      	str	r1, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:186
  /* PORTA_PCR1: ISF=0,MUX=2 */
  PORTA_PCR1 = (uint32_t)((PORTA_PCR1 & (uint32_t)~(uint32_t)(
   10cae:	4b2e      	ldr	r3, [pc, #184]	; (10d68 <UART_Init+0xf0>)
   10cb0:	482e      	ldr	r0, [pc, #184]	; (10d6c <UART_Init+0xf4>)
   10cb2:	685f      	ldr	r7, [r3, #4]
   10cb4:	2180      	movs	r1, #128	; 0x80
   10cb6:	4007      	ands	r7, r0
   10cb8:	0089      	lsls	r1, r1, #2
   10cba:	430f      	orrs	r7, r1
   10cbc:	605f      	str	r7, [r3, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:193
                PORT_PCR_MUX(0x05)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x02)
               ));
  /* PORTA_PCR2: ISF=0,MUX=2 */
  PORTA_PCR2 = (uint32_t)((PORTA_PCR2 & (uint32_t)~(uint32_t)(
   10cbe:	689f      	ldr	r7, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:170
  UART_TDeviceDataPtr DeviceDataPrv;
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;

  /* Clear the receive counters and pointer */
  DeviceDataPrv->InpRecvDataNum = 0x00U; /* Clear the counter of received characters */
   10cc0:	2600      	movs	r6, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:193
                PORT_PCR_MUX(0x05)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x02)
               ));
  /* PORTA_PCR2: ISF=0,MUX=2 */
  PORTA_PCR2 = (uint32_t)((PORTA_PCR2 & (uint32_t)~(uint32_t)(
   10cc2:	4038      	ands	r0, r7
   10cc4:	4301      	orrs	r1, r0
   10cc6:	6099      	str	r1, [r3, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:200
                PORT_PCR_MUX(0x05)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x02)
               ));
  /* NVIC_IPR3: PRI_12=0x80 */
  NVIC_IPR3 = (uint32_t)((NVIC_IPR3 & (uint32_t)~(uint32_t)(
   10cc8:	4b29      	ldr	r3, [pc, #164]	; (10d70 <UART_Init+0xf8>)
   10cca:	21c3      	movs	r1, #195	; 0xc3
   10ccc:	0089      	lsls	r1, r1, #2
   10cce:	5858      	ldr	r0, [r3, r1]
   10cd0:	27ff      	movs	r7, #255	; 0xff
   10cd2:	43b8      	bics	r0, r7
   10cd4:	2780      	movs	r7, #128	; 0x80
   10cd6:	4338      	orrs	r0, r7
   10cd8:	5058      	str	r0, [r3, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:206
               NVIC_IP_PRI_12(0x7F)
              )) | (uint32_t)(
               NVIC_IP_PRI_12(0x80)
              ));
  /* NVIC_ISER: SETENA|=0x1000 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x1000);
   10cda:	6818      	ldr	r0, [r3, #0]
   10cdc:	2180      	movs	r1, #128	; 0x80
   10cde:	0149      	lsls	r1, r1, #5
   10ce0:	4301      	orrs	r1, r0
   10ce2:	6019      	str	r1, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:207
  UART0_PDD_EnableTransmitter(UART0_BASE_PTR, PDD_DISABLE); /* Disable transmitter. */
   10ce4:	4b23      	ldr	r3, [pc, #140]	; (10d74 <UART_Init+0xfc>)
   10ce6:	2008      	movs	r0, #8
   10ce8:	78d9      	ldrb	r1, [r3, #3]
   10cea:	4381      	bics	r1, r0
   10cec:	70d9      	strb	r1, [r3, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:208
  UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_DISABLE); /* Disable receiver. */
   10cee:	78d9      	ldrb	r1, [r3, #3]
   10cf0:	2004      	movs	r0, #4
   10cf2:	4381      	bics	r1, r0
   10cf4:	70d9      	strb	r1, [r3, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:218
  UART0_C3 = 0x00U;                    /*  Set the C3 register */
  /* UART0_C4: MAEN1=0,MAEN2=0,M10=0,OSR=0 */
  UART0_C4 = UART0_C4_OSR(0x00);       /*  Set the C4 register */
  /* UART0_S2: LBKDIF=0,RXEDGIF=0,MSBF=0,RXINV=0,RWUID=0,BRK13=0,LBKDE=0,RAF=0 */
  UART0_S2 = 0x00U;                    /*  Set the S2 register */
  SIM_PDD_SetClockSourceUART0(SIM_BASE_PTR, SIM_PDD_UART0_PLL_FLL_CLOCK);
   10cf6:	4920      	ldr	r1, [pc, #128]	; (10d78 <UART_Init+0x100>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:209
              ));
  /* NVIC_ISER: SETENA|=0x1000 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x1000);
  UART0_PDD_EnableTransmitter(UART0_BASE_PTR, PDD_DISABLE); /* Disable transmitter. */
  UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_DISABLE); /* Disable receiver. */
  DeviceDataPrv->SerFlag = 0x00U;      /* Reset flags */
   10cf8:	8025      	strh	r5, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:211
  /* UART0_C1: LOOPS=0,DOZEEN=0,RSRC=0,M=0,WAKE=0,ILT=0,PE=0,PT=0 */
  UART0_C1 = 0x00U;                    /*  Set the C1 register */
   10cfa:	709e      	strb	r6, [r3, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:213
  /* UART0_C3: R8T9=0,R9T8=0,TXDIR=0,TXINV=0,ORIE=0,NEIE=0,FEIE=0,PEIE=0 */
  UART0_C3 = 0x00U;                    /*  Set the C3 register */
   10cfc:	719e      	strb	r6, [r3, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:215
  /* UART0_C4: MAEN1=0,MAEN2=0,M10=0,OSR=0 */
  UART0_C4 = UART0_C4_OSR(0x00);       /*  Set the C4 register */
   10cfe:	729e      	strb	r6, [r3, #10]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:217
  /* UART0_S2: LBKDIF=0,RXEDGIF=0,MSBF=0,RXINV=0,RWUID=0,BRK13=0,LBKDE=0,RAF=0 */
  UART0_S2 = 0x00U;                    /*  Set the S2 register */
   10d00:	715e      	strb	r6, [r3, #5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:218
  SIM_PDD_SetClockSourceUART0(SIM_BASE_PTR, SIM_PDD_UART0_PLL_FLL_CLOCK);
   10d02:	5855      	ldr	r5, [r2, r1]
   10d04:	481d      	ldr	r0, [pc, #116]	; (10d7c <UART_Init+0x104>)
   10d06:	4028      	ands	r0, r5
   10d08:	2580      	movs	r5, #128	; 0x80
   10d0a:	04ed      	lsls	r5, r5, #19
   10d0c:	4328      	orrs	r0, r5
   10d0e:	5050      	str	r0, [r2, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:219
  UART0_PDD_SetBaudRate(UART0_BASE_PTR, 52U); /* Set the baud rate register. */
   10d10:	7819      	ldrb	r1, [r3, #0]
   10d12:	221f      	movs	r2, #31
   10d14:	4391      	bics	r1, r2
   10d16:	7019      	strb	r1, [r3, #0]
   10d18:	2134      	movs	r1, #52	; 0x34
   10d1a:	7059      	strb	r1, [r3, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:220
  UART0_PDD_SetOversamplingRatio(UART0_BASE_PTR, 3U);
   10d1c:	7a99      	ldrb	r1, [r3, #10]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:228
  UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_ENABLE); /* Enable receiver */
  UART0_PDD_EnableInterrupt(UART0_BASE_PTR, ( UART0_PDD_INTERRUPT_RECEIVER )); /* Enable interrupts */
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_UART_ID,DeviceDataPrv);
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   10d1e:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:220
  UART0_C4 = UART0_C4_OSR(0x00);       /*  Set the C4 register */
  /* UART0_S2: LBKDIF=0,RXEDGIF=0,MSBF=0,RXINV=0,RWUID=0,BRK13=0,LBKDE=0,RAF=0 */
  UART0_S2 = 0x00U;                    /*  Set the S2 register */
  SIM_PDD_SetClockSourceUART0(SIM_BASE_PTR, SIM_PDD_UART0_PLL_FLL_CLOCK);
  UART0_PDD_SetBaudRate(UART0_BASE_PTR, 52U); /* Set the baud rate register. */
  UART0_PDD_SetOversamplingRatio(UART0_BASE_PTR, 3U);
   10d20:	4391      	bics	r1, r2
   10d22:	1c0a      	adds	r2, r1, #0
   10d24:	2103      	movs	r1, #3
   10d26:	430a      	orrs	r2, r1
   10d28:	729a      	strb	r2, [r3, #10]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:221
  UART0_PDD_EnableSamplingOnBothEdges(UART0_BASE_PTR, PDD_ENABLE);
   10d2a:	7ad9      	ldrb	r1, [r3, #11]
   10d2c:	2202      	movs	r2, #2
   10d2e:	430a      	orrs	r2, r1
   10d30:	72da      	strb	r2, [r3, #11]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:222
  UART0_PDD_EnableTransmitter(UART0_BASE_PTR, PDD_ENABLE); /* Enable transmitter */
   10d32:	78d9      	ldrb	r1, [r3, #3]
   10d34:	2208      	movs	r2, #8
   10d36:	430a      	orrs	r2, r1
   10d38:	70da      	strb	r2, [r3, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:223
  UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_ENABLE); /* Enable receiver */
   10d3a:	78d9      	ldrb	r1, [r3, #3]
   10d3c:	2204      	movs	r2, #4
   10d3e:	430a      	orrs	r2, r1
   10d40:	70da      	strb	r2, [r3, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:224
  UART0_PDD_EnableInterrupt(UART0_BASE_PTR, ( UART0_PDD_INTERRUPT_RECEIVER )); /* Enable interrupts */
   10d42:	78d9      	ldrb	r1, [r3, #3]
   10d44:	2220      	movs	r2, #32
   10d46:	430a      	orrs	r2, r1
   10d48:	70da      	strb	r2, [r3, #3]
   10d4a:	799a      	ldrb	r2, [r3, #6]
   10d4c:	b2d2      	uxtb	r2, r2
   10d4e:	719a      	strb	r2, [r3, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:226
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_UART_ID,DeviceDataPrv);
   10d50:	4b0b      	ldr	r3, [pc, #44]	; (10d80 <UART_Init+0x108>)
   10d52:	615c      	str	r4, [r3, #20]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:228
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   10d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10d56:	46c0      	nop			; (mov r8, r8)
   10d58:	1fffe298 	.word	0x1fffe298
   10d5c:	00010b9d 	.word	0x00010b9d
   10d60:	40047000 	.word	0x40047000
   10d64:	00001034 	.word	0x00001034
   10d68:	40049000 	.word	0x40049000
   10d6c:	fefff8ff 	.word	0xfefff8ff
   10d70:	e000e100 	.word	0xe000e100
   10d74:	4006a000 	.word	0x4006a000
   10d78:	00001004 	.word	0x00001004
   10d7c:	f3ffffff 	.word	0xf3ffffff
   10d80:	1fffe218 	.word	0x1fffe218

00010d84 <UART_ReceiveBlock>:
UART_ReceiveBlock():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:275
**                           ERR_BUSY - The previous receive request is
**                           pending.
*/
/* ===================================================================*/
LDD_TError UART_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
{
   10d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10d86:	1c06      	adds	r6, r0, #0
   10d88:	1c0f      	adds	r7, r1, #0
   10d8a:	1c15      	adds	r5, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:279
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)DeviceDataPtr;

  if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
    return ERR_PARAM_SIZE;             /* If no then error */
   10d8c:	2484      	movs	r4, #132	; 0x84
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:278
/* ===================================================================*/
LDD_TError UART_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
{
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)DeviceDataPtr;

  if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
   10d8e:	2a00      	cmp	r2, #0
   10d90:	d101      	bne.n	10d96 <UART_ReceiveBlock+0x12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:292
  DeviceDataPrv->InpDataNumReq = Size; /* Store a number of characters to be received. */
  DeviceDataPrv->InpRecvDataNum = 0x00U; /* Set number of received characters to zero. */
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
  return ERR_OK;                       /* OK */
}
   10d92:	1c20      	adds	r0, r4, #0
   10d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:281
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)DeviceDataPtr;

  if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
    return ERR_PARAM_SIZE;             /* If no then error */
  }
  if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the previous receive operation pending? */
   10d96:	8904      	ldrh	r4, [r0, #8]
   10d98:	2c00      	cmp	r4, #0
   10d9a:	d001      	beq.n	10da0 <UART_ReceiveBlock+0x1c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:282
    return ERR_BUSY;                   /* If yes then error */
   10d9c:	2408      	movs	r4, #8
   10d9e:	e7f8      	b.n	10d92 <UART_ReceiveBlock+0xe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:285
  }
  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
   10da0:	f7fe f8b8 	bl	ef14 <_int_disable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:286
  DeviceDataPrv->InpDataPtr = (uint8_t*)BufferPtr; /* Store a pointer to the input data. */
   10da4:	6077      	str	r7, [r6, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:287
  DeviceDataPrv->InpDataNumReq = Size; /* Store a number of characters to be received. */
   10da6:	8135      	strh	r5, [r6, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:288
  DeviceDataPrv->InpRecvDataNum = 0x00U; /* Set number of received characters to zero. */
   10da8:	8074      	strh	r4, [r6, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:290
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
   10daa:	f7fe f8bf 	bl	ef2c <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:291
  return ERR_OK;                       /* OK */
   10dae:	e7f0      	b.n	10d92 <UART_ReceiveBlock+0xe>

00010db0 <UART_SendBlock>:
UART_SendBlock():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:335
**                           ERR_BUSY - The previous transmit request is
**                           pending.
*/
/* ===================================================================*/
LDD_TError UART_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
{
   10db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10db2:	1c06      	adds	r6, r0, #0
   10db4:	1c0f      	adds	r7, r1, #0
   10db6:	1c15      	adds	r5, r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:339
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)DeviceDataPtr;

  if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
    return ERR_PARAM_SIZE;             /* If no then error */
   10db8:	2484      	movs	r4, #132	; 0x84
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:338
/* ===================================================================*/
LDD_TError UART_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
{
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)DeviceDataPtr;

  if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
   10dba:	2a00      	cmp	r2, #0
   10dbc:	d101      	bne.n	10dc2 <UART_SendBlock+0x12>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:355
  DeviceDataPrv->SerFlag &= (uint16_t)(~(uint16_t)TX_COMPLETED); /* Clear the TX_COMPLETED flag */
  UART0_PDD_EnableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER); /* Enable TX interrupt */
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
  return ERR_OK;                       /* OK */
}
   10dbe:	1c20      	adds	r0, r4, #0
   10dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:341
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)DeviceDataPtr;

  if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
    return ERR_PARAM_SIZE;             /* If no then error */
  }
  if (DeviceDataPrv->OutDataNumReq != 0x00U) { /* Is the previous transmit operation pending? */
   10dc2:	8a04      	ldrh	r4, [r0, #16]
   10dc4:	2c00      	cmp	r4, #0
   10dc6:	d001      	beq.n	10dcc <UART_SendBlock+0x1c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:342
    return ERR_BUSY;                   /* If yes then error */
   10dc8:	2408      	movs	r4, #8
   10dca:	e7f8      	b.n	10dbe <UART_SendBlock+0xe>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:345
  }
  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
   10dcc:	f7fe f8a2 	bl	ef14 <_int_disable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:350
  DeviceDataPrv->OutDataPtr = (uint8_t*)BufferPtr; /* Set a pointer to the output data. */
  DeviceDataPrv->OutDataNumReq = Size; /* Set the counter of characters to be sent. */
  DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters. */
  DeviceDataPrv->SerFlag |= ENABLED_TX_INT; /* Set the flag ENABLED_TX_INT */
  DeviceDataPrv->SerFlag &= (uint16_t)(~(uint16_t)TX_COMPLETED); /* Clear the TX_COMPLETED flag */
   10dd0:	8833      	ldrh	r3, [r6, #0]
   10dd2:	2204      	movs	r2, #4
   10dd4:	4393      	bics	r3, r2
   10dd6:	2201      	movs	r2, #1
   10dd8:	4313      	orrs	r3, r2
   10dda:	8033      	strh	r3, [r6, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:351
  UART0_PDD_EnableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER); /* Enable TX interrupt */
   10ddc:	4b06      	ldr	r3, [pc, #24]	; (10df8 <UART_SendBlock+0x48>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:346
  if (DeviceDataPrv->OutDataNumReq != 0x00U) { /* Is the previous transmit operation pending? */
    return ERR_BUSY;                   /* If yes then error */
  }
  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
  DeviceDataPrv->OutDataPtr = (uint8_t*)BufferPtr; /* Set a pointer to the output data. */
   10dde:	60f7      	str	r7, [r6, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:347
  DeviceDataPrv->OutDataNumReq = Size; /* Set the counter of characters to be sent. */
   10de0:	8235      	strh	r5, [r6, #16]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:348
  DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters. */
   10de2:	8174      	strh	r4, [r6, #10]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:351
  DeviceDataPrv->SerFlag |= ENABLED_TX_INT; /* Set the flag ENABLED_TX_INT */
  DeviceDataPrv->SerFlag &= (uint16_t)(~(uint16_t)TX_COMPLETED); /* Clear the TX_COMPLETED flag */
  UART0_PDD_EnableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER); /* Enable TX interrupt */
   10de4:	78d9      	ldrb	r1, [r3, #3]
   10de6:	2280      	movs	r2, #128	; 0x80
   10de8:	430a      	orrs	r2, r1
   10dea:	70da      	strb	r2, [r3, #3]
   10dec:	799a      	ldrb	r2, [r3, #6]
   10dee:	b2d2      	uxtb	r2, r2
   10df0:	719a      	strb	r2, [r3, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:353
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
   10df2:	f7fe f89b 	bl	ef2c <_int_enable>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:354
  return ERR_OK;                       /* OK */
   10df6:	e7e2      	b.n	10dbe <UART_SendBlock+0xe>
   10df8:	4006a000 	.word	0x4006a000

00010dfc <UART_GetTxCompleteStatus>:
UART_GetTxCompleteStatus():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:428
/* ===================================================================*/
bool UART_GetTxCompleteStatus(LDD_TDeviceData *DeviceDataPtr)
{
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)DeviceDataPtr;

  if ((DeviceDataPrv->SerFlag & TX_COMPLETED) != 0U) { /* Is a transmission completed? */
   10dfc:	8802      	ldrh	r2, [r0, #0]
   10dfe:	2104      	movs	r1, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:432
    DeviceDataPrv->SerFlag &= (uint16_t)(~(uint16_t)TX_COMPLETED); /* If yes then clear the flag and return the result */
    return TRUE;
  }
  return FALSE;
   10e00:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:428
/* ===================================================================*/
bool UART_GetTxCompleteStatus(LDD_TDeviceData *DeviceDataPtr)
{
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)DeviceDataPtr;

  if ((DeviceDataPrv->SerFlag & TX_COMPLETED) != 0U) { /* Is a transmission completed? */
   10e02:	4211      	tst	r1, r2
   10e04:	d002      	beq.n	10e0c <UART_GetTxCompleteStatus+0x10>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:429
    DeviceDataPrv->SerFlag &= (uint16_t)(~(uint16_t)TX_COMPLETED); /* If yes then clear the flag and return the result */
   10e06:	438a      	bics	r2, r1
   10e08:	8002      	strh	r2, [r0, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:430
    return TRUE;
   10e0a:	2301      	movs	r3, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:433
  }
  return FALSE;
}
   10e0c:	1c18      	adds	r0, r3, #0
   10e0e:	4770      	bx	lr

00010e10 <crc16>:
crc16():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/crc.c:103
*/
// Most significant bit first (big-endian)
// x^16+x^12+x^5+1 = (1) 0001 0000 0010 0001 = 0x1021

uint16_t crc16(uint8_t* data, uint16_t len)
{
   10e10:	b530      	push	{r4, r5, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/crc.c:107
	uint16_t rem  = 0;
	uint16_t n = 16;
	// A popular variant complements rem here
	for(uint16_t i = 0 ; i < len ; i++)
   10e12:	2900      	cmp	r1, #0
   10e14:	d100      	bne.n	10e18 <crc16+0x8>
   10e16:	e082      	b.n	10f1e <crc16+0x10e>
   10e18:	3901      	subs	r1, #1
   10e1a:	1c43      	adds	r3, r0, #1
   10e1c:	b289      	uxth	r1, r1
   10e1e:	1859      	adds	r1, r3, r1
   10e20:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/crc.c:104
// Most significant bit first (big-endian)
// x^16+x^12+x^5+1 = (1) 0001 0000 0010 0001 = 0x1021

uint16_t crc16(uint8_t* data, uint16_t len)
{
	uint16_t rem  = 0;
   10e22:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/crc.c:117
		{

			if(rem & 0x8000)
			{
				// if leftmost (most significant) bit is set
				rem  = (rem << 1) ^ 0x1021;
   10e24:	4b3f      	ldr	r3, [pc, #252]	; (10f24 <crc16+0x114>)
   10e26:	e033      	b.n	10e90 <crc16+0x80>
   10e28:	b290      	uxth	r0, r2
   10e2a:	0040      	lsls	r0, r0, #1
   10e2c:	4058      	eors	r0, r3
   10e2e:	b285      	uxth	r5, r0
   10e30:	b210      	sxth	r0, r2
   10e32:	0052      	lsls	r2, r2, #1
   10e34:	2800      	cmp	r0, #0
   10e36:	db3e      	blt.n	10eb6 <crc16+0xa6>
   10e38:	b290      	uxth	r0, r2
   10e3a:	0040      	lsls	r0, r0, #1
   10e3c:	4058      	eors	r0, r3
   10e3e:	b285      	uxth	r5, r0
   10e40:	b210      	sxth	r0, r2
   10e42:	0052      	lsls	r2, r2, #1
   10e44:	2800      	cmp	r0, #0
   10e46:	db3f      	blt.n	10ec8 <crc16+0xb8>
   10e48:	b290      	uxth	r0, r2
   10e4a:	0040      	lsls	r0, r0, #1
   10e4c:	4058      	eors	r0, r3
   10e4e:	b285      	uxth	r5, r0
   10e50:	b210      	sxth	r0, r2
   10e52:	0052      	lsls	r2, r2, #1
   10e54:	2800      	cmp	r0, #0
   10e56:	db40      	blt.n	10eda <crc16+0xca>
   10e58:	b290      	uxth	r0, r2
   10e5a:	0040      	lsls	r0, r0, #1
   10e5c:	4058      	eors	r0, r3
   10e5e:	b285      	uxth	r5, r0
   10e60:	b210      	sxth	r0, r2
   10e62:	0052      	lsls	r2, r2, #1
   10e64:	2800      	cmp	r0, #0
   10e66:	db41      	blt.n	10eec <crc16+0xdc>
   10e68:	b290      	uxth	r0, r2
   10e6a:	0040      	lsls	r0, r0, #1
   10e6c:	4058      	eors	r0, r3
   10e6e:	b285      	uxth	r5, r0
   10e70:	b210      	sxth	r0, r2
   10e72:	0052      	lsls	r2, r2, #1
   10e74:	2800      	cmp	r0, #0
   10e76:	db42      	blt.n	10efe <crc16+0xee>
   10e78:	b290      	uxth	r0, r2
   10e7a:	0040      	lsls	r0, r0, #1
   10e7c:	4058      	eors	r0, r3
   10e7e:	b285      	uxth	r5, r0
   10e80:	b210      	sxth	r0, r2
   10e82:	0052      	lsls	r2, r2, #1
   10e84:	2800      	cmp	r0, #0
   10e86:	db43      	blt.n	10f10 <crc16+0x100>
   10e88:	3401      	adds	r4, #1
   10e8a:	b292      	uxth	r2, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/crc.c:107
uint16_t crc16(uint8_t* data, uint16_t len)
{
	uint16_t rem  = 0;
	uint16_t n = 16;
	// A popular variant complements rem here
	for(uint16_t i = 0 ; i < len ; i++)
   10e8c:	428c      	cmp	r4, r1
   10e8e:	d044      	beq.n	10f1a <crc16+0x10a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/crc.c:109
	{
		rem  = rem ^ (data[i] << (n-8));   // n = 16 in this example
   10e90:	7820      	ldrb	r0, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/crc.c:117
		{

			if(rem & 0x8000)
			{
				// if leftmost (most significant) bit is set
				rem  = (rem << 1) ^ 0x1021;
   10e92:	1c1d      	adds	r5, r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/crc.c:109
	uint16_t rem  = 0;
	uint16_t n = 16;
	// A popular variant complements rem here
	for(uint16_t i = 0 ; i < len ; i++)
	{
		rem  = rem ^ (data[i] << (n-8));   // n = 16 in this example
   10e94:	0200      	lsls	r0, r0, #8
   10e96:	4050      	eors	r0, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/crc.c:117
		{

			if(rem & 0x8000)
			{
				// if leftmost (most significant) bit is set
				rem  = (rem << 1) ^ 0x1021;
   10e98:	0042      	lsls	r2, r0, #1
   10e9a:	4055      	eors	r5, r2
   10e9c:	b200      	sxth	r0, r0
   10e9e:	b2ad      	uxth	r5, r5
   10ea0:	2800      	cmp	r0, #0
   10ea2:	dac1      	bge.n	10e28 <crc16+0x18>
   10ea4:	1c2a      	adds	r2, r5, #0
   10ea6:	b290      	uxth	r0, r2
   10ea8:	0040      	lsls	r0, r0, #1
   10eaa:	4058      	eors	r0, r3
   10eac:	b285      	uxth	r5, r0
   10eae:	b210      	sxth	r0, r2
   10eb0:	0052      	lsls	r2, r2, #1
   10eb2:	2800      	cmp	r0, #0
   10eb4:	dac0      	bge.n	10e38 <crc16+0x28>
   10eb6:	1c2a      	adds	r2, r5, #0
   10eb8:	b290      	uxth	r0, r2
   10eba:	0040      	lsls	r0, r0, #1
   10ebc:	4058      	eors	r0, r3
   10ebe:	b285      	uxth	r5, r0
   10ec0:	b210      	sxth	r0, r2
   10ec2:	0052      	lsls	r2, r2, #1
   10ec4:	2800      	cmp	r0, #0
   10ec6:	dabf      	bge.n	10e48 <crc16+0x38>
   10ec8:	1c2a      	adds	r2, r5, #0
   10eca:	b290      	uxth	r0, r2
   10ecc:	0040      	lsls	r0, r0, #1
   10ece:	4058      	eors	r0, r3
   10ed0:	b285      	uxth	r5, r0
   10ed2:	b210      	sxth	r0, r2
   10ed4:	0052      	lsls	r2, r2, #1
   10ed6:	2800      	cmp	r0, #0
   10ed8:	dabe      	bge.n	10e58 <crc16+0x48>
   10eda:	1c2a      	adds	r2, r5, #0
   10edc:	b290      	uxth	r0, r2
   10ede:	0040      	lsls	r0, r0, #1
   10ee0:	4058      	eors	r0, r3
   10ee2:	b285      	uxth	r5, r0
   10ee4:	b210      	sxth	r0, r2
   10ee6:	0052      	lsls	r2, r2, #1
   10ee8:	2800      	cmp	r0, #0
   10eea:	dabd      	bge.n	10e68 <crc16+0x58>
   10eec:	1c2a      	adds	r2, r5, #0
   10eee:	b290      	uxth	r0, r2
   10ef0:	0040      	lsls	r0, r0, #1
   10ef2:	4058      	eors	r0, r3
   10ef4:	b285      	uxth	r5, r0
   10ef6:	b210      	sxth	r0, r2
   10ef8:	0052      	lsls	r2, r2, #1
   10efa:	2800      	cmp	r0, #0
   10efc:	dabc      	bge.n	10e78 <crc16+0x68>
   10efe:	1c2a      	adds	r2, r5, #0
   10f00:	b290      	uxth	r0, r2
   10f02:	0040      	lsls	r0, r0, #1
   10f04:	4058      	eors	r0, r3
   10f06:	b285      	uxth	r5, r0
   10f08:	b210      	sxth	r0, r2
   10f0a:	0052      	lsls	r2, r2, #1
   10f0c:	2800      	cmp	r0, #0
   10f0e:	dabb      	bge.n	10e88 <crc16+0x78>
   10f10:	1c2a      	adds	r2, r5, #0
   10f12:	3401      	adds	r4, #1
   10f14:	b292      	uxth	r2, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/crc.c:107
uint16_t crc16(uint8_t* data, uint16_t len)
{
	uint16_t rem  = 0;
	uint16_t n = 16;
	// A popular variant complements rem here
	for(uint16_t i = 0 ; i < len ; i++)
   10f16:	428c      	cmp	r4, r1
   10f18:	d1ba      	bne.n	10e90 <crc16+0x80>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/crc.c:128
		 rem  &= 0xffff;      // Trim remainder to 16 bits
		}
	}
 // A popular variant complements rem here
  return rem;
 }
   10f1a:	1c10      	adds	r0, r2, #0
   10f1c:	bd30      	pop	{r4, r5, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/crc.c:104
// Most significant bit first (big-endian)
// x^16+x^12+x^5+1 = (1) 0001 0000 0010 0001 = 0x1021

uint16_t crc16(uint8_t* data, uint16_t len)
{
	uint16_t rem  = 0;
   10f1e:	2200      	movs	r2, #0
   10f20:	e7fb      	b.n	10f1a <crc16+0x10a>
   10f22:	46c0      	nop			; (mov r8, r8)
   10f24:	00001021 	.word	0x00001021

00010f28 <init_distantio>:
init_distantio():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:26

/**
 * Inits the distant io framework
 */
void init_distantio(LDD_TDeviceData *uart_device)
{
   10f28:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f2a:	465f      	mov	r7, fp
   10f2c:	4656      	mov	r6, sl
   10f2e:	4644      	mov	r4, r8
   10f30:	464d      	mov	r5, r9
   10f32:	b4f0      	push	{r4, r5, r6, r7}
   10f34:	b085      	sub	sp, #20
   10f36:	4683      	mov	fp, r0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:28
	uint16_t i;
	char default_name[] = {"undef.  "};
   10f38:	4b1a      	ldr	r3, [pc, #104]	; (10fa4 <init_distantio+0x7c>)
   10f3a:	a801      	add	r0, sp, #4
   10f3c:	1c02      	adds	r2, r0, #0
   10f3e:	4680      	mov	r8, r0
   10f40:	cb03      	ldmia	r3!, {r0, r1}
   10f42:	c203      	stmia	r2!, {r0, r1}
   10f44:	781b      	ldrb	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:29
	Log.amount = 0;
   10f46:	4918      	ldr	r1, [pc, #96]	; (10fa8 <init_distantio+0x80>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:28
 * Inits the distant io framework
 */
void init_distantio(LDD_TDeviceData *uart_device)
{
	uint16_t i;
	char default_name[] = {"undef.  "};
   10f48:	7013      	strb	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:29
	Log.amount = 0;
   10f4a:	23e0      	movs	r3, #224	; 0xe0
   10f4c:	2200      	movs	r2, #0
   10f4e:	009b      	lsls	r3, r3, #2
   10f50:	1c0c      	adds	r4, r1, #0
   10f52:	468a      	mov	sl, r1
   10f54:	52ca      	strh	r2, [r1, r3]
   10f56:	3404      	adds	r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:30
	for(i = 0 ; i < VARIABLES_AMOUNT ; i++)
   10f58:	2500      	movs	r5, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:32
	{
		Log.variables[i].size = 0;
   10f5a:	2700      	movs	r7, #0
   10f5c:	2600      	movs	r6, #0
   10f5e:	1f23      	subs	r3, r4, #4
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:32 (discriminator 2)
   10f60:	8027      	strh	r7, [r4, #0]
   10f62:	2100      	movs	r1, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:33 (discriminator 2)
		Log.variables[i].ptr = 0;
   10f64:	601f      	str	r7, [r3, #0]
   10f66:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:35 (discriminator 2)
		Log.variables[i].writeable = 0;
		Log.variables[i].id = i;
   10f68:	80a5      	strh	r5, [r4, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:30 (discriminator 2)
void init_distantio(LDD_TDeviceData *uart_device)
{
	uint16_t i;
	char default_name[] = {"undef.  "};
	Log.amount = 0;
	for(i = 0 ; i < VARIABLES_AMOUNT ; i++)
   10f6a:	3501      	adds	r5, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:34 (discriminator 2)
	{
		Log.variables[i].size = 0;
		Log.variables[i].ptr = 0;
		Log.variables[i].writeable = 0;
   10f6c:	70a6      	strb	r6, [r4, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:32 (discriminator 2)
	uint16_t i;
	char default_name[] = {"undef.  "};
	Log.amount = 0;
	for(i = 0 ; i < VARIABLES_AMOUNT ; i++)
	{
		Log.variables[i].size = 0;
   10f6e:	4689      	mov	r9, r1
   10f70:	300c      	adds	r0, #12
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:36 (discriminator 2)
		Log.variables[i].ptr = 0;
		Log.variables[i].writeable = 0;
		Log.variables[i].id = i;
		strcpy(Log.variables[i].name,default_name);
   10f72:	4641      	mov	r1, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:30 (discriminator 2)
void init_distantio(LDD_TDeviceData *uart_device)
{
	uint16_t i;
	char default_name[] = {"undef.  "};
	Log.amount = 0;
	for(i = 0 ; i < VARIABLES_AMOUNT ; i++)
   10f74:	b2ad      	uxth	r5, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:36 (discriminator 2)
	{
		Log.variables[i].size = 0;
		Log.variables[i].ptr = 0;
		Log.variables[i].writeable = 0;
		Log.variables[i].id = i;
		strcpy(Log.variables[i].name,default_name);
   10f76:	f002 f91b 	bl	131b0 <strcpy>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:37 (discriminator 2)
		Log.variables[i].send = 0;
   10f7a:	7526      	strb	r6, [r4, #20]
   10f7c:	341c      	adds	r4, #28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:30 (discriminator 2)
void init_distantio(LDD_TDeviceData *uart_device)
{
	uint16_t i;
	char default_name[] = {"undef.  "};
	Log.amount = 0;
	for(i = 0 ; i < VARIABLES_AMOUNT ; i++)
   10f7e:	2d20      	cmp	r5, #32
   10f80:	d1ed      	bne.n	10f5e <init_distantio+0x36>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:39
		Log.variables[i].writeable = 0;
		Log.variables[i].id = i;
		strcpy(Log.variables[i].name,default_name);
		Log.variables[i].send = 0;
	}
	tmp=0;
   10f82:	4b0a      	ldr	r3, [pc, #40]	; (10fac <init_distantio+0x84>)
   10f84:	464a      	mov	r2, r9
   10f86:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:40
	current_group_id = 0;
   10f88:	4b09      	ldr	r3, [pc, #36]	; (10fb0 <init_distantio+0x88>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:41
	Log.handle = uart_device;
   10f8a:	4659      	mov	r1, fp
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:40
		Log.variables[i].id = i;
		strcpy(Log.variables[i].name,default_name);
		Log.variables[i].send = 0;
	}
	tmp=0;
	current_group_id = 0;
   10f8c:	701a      	strb	r2, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:41
	Log.handle = uart_device;
   10f8e:	23e1      	movs	r3, #225	; 0xe1
   10f90:	009b      	lsls	r3, r3, #2
   10f92:	4650      	mov	r0, sl
   10f94:	50c1      	str	r1, [r0, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:42
}
   10f96:	b005      	add	sp, #20
   10f98:	bc3c      	pop	{r2, r3, r4, r5}
   10f9a:	4690      	mov	r8, r2
   10f9c:	4699      	mov	r9, r3
   10f9e:	46a2      	mov	sl, r4
   10fa0:	46ab      	mov	fp, r5
   10fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10fa4:	000134b4 	.word	0x000134b4
   10fa8:	20001a60 	.word	0x20001a60
   10fac:	20001a58 	.word	0x20001a58
   10fb0:	20001a5c 	.word	0x20001a5c

00010fb4 <register_var>:
register_var():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:48

/**
 * Register a variable exchanged with the computer
 */
uint8_t register_var(void* ptr, uint16_t size, dio_type type, bool writeable, char* name)
{
   10fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:52
	uint16_t octets = 0;

	// Too many variables, aborting
	if(Log.amount >= VARIABLES_AMOUNT)
   10fb6:	21e0      	movs	r1, #224	; 0xe0
   10fb8:	4c17      	ldr	r4, [pc, #92]	; (11018 <register_var+0x64>)
   10fba:	0089      	lsls	r1, r1, #2
   10fbc:	5a61      	ldrh	r1, [r4, r1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:48

/**
 * Register a variable exchanged with the computer
 */
uint8_t register_var(void* ptr, uint16_t size, dio_type type, bool writeable, char* name)
{
   10fbe:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:53
	uint16_t octets = 0;

	// Too many variables, aborting
	if(Log.amount >= VARIABLES_AMOUNT)
		return 1;
   10fc0:	2001      	movs	r0, #1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:52
uint8_t register_var(void* ptr, uint16_t size, dio_type type, bool writeable, char* name)
{
	uint16_t octets = 0;

	// Too many variables, aborting
	if(Log.amount >= VARIABLES_AMOUNT)
   10fc2:	291f      	cmp	r1, #31
   10fc4:	d81a      	bhi.n	10ffc <register_var+0x48>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:55
		return 1;

	Log.variables[Log.amount].ptr = ptr;
   10fc6:	00ce      	lsls	r6, r1, #3
   10fc8:	1a70      	subs	r0, r6, r1
   10fca:	0080      	lsls	r0, r0, #2
   10fcc:	5105      	str	r5, [r0, r4]
get_size():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:316
			return 2;

		case dio_type_UINT8:
		case dio_type_INT8:
		default:
			return 1;
   10fce:	2501      	movs	r5, #1
   10fd0:	2a06      	cmp	r2, #6
   10fd2:	d914      	bls.n	10ffe <register_var+0x4a>
register_var():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:56
	// Too many variables, aborting
	if(Log.amount >= VARIABLES_AMOUNT)
		return 1;

	Log.variables[Log.amount].ptr = ptr;
	Log.variables[Log.amount].size = get_size(type);
   10fd4:	1a71      	subs	r1, r6, r1
   10fd6:	0089      	lsls	r1, r1, #2
   10fd8:	1860      	adds	r0, r4, r1
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:57
	Log.variables[Log.amount].writeable = writeable;
   10fda:	7183      	strb	r3, [r0, #6]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:59
	Log.variables[Log.amount].type = type;
	Log.variables[Log.amount].groupID = current_group_id;
   10fdc:	4b0f      	ldr	r3, [pc, #60]	; (1101c <register_var+0x68>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:60
	strcpy(Log.variables[Log.amount].name,name);
   10fde:	3110      	adds	r1, #16
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:59

	Log.variables[Log.amount].ptr = ptr;
	Log.variables[Log.amount].size = get_size(type);
	Log.variables[Log.amount].writeable = writeable;
	Log.variables[Log.amount].type = type;
	Log.variables[Log.amount].groupID = current_group_id;
   10fe0:	781b      	ldrb	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:58
		return 1;

	Log.variables[Log.amount].ptr = ptr;
	Log.variables[Log.amount].size = get_size(type);
	Log.variables[Log.amount].writeable = writeable;
	Log.variables[Log.amount].type = type;
   10fe2:	60c2      	str	r2, [r0, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:59
	Log.variables[Log.amount].groupID = current_group_id;
   10fe4:	7643      	strb	r3, [r0, #25]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:56
	// Too many variables, aborting
	if(Log.amount >= VARIABLES_AMOUNT)
		return 1;

	Log.variables[Log.amount].ptr = ptr;
	Log.variables[Log.amount].size = get_size(type);
   10fe6:	8085      	strh	r5, [r0, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:60
	Log.variables[Log.amount].writeable = writeable;
	Log.variables[Log.amount].type = type;
	Log.variables[Log.amount].groupID = current_group_id;
	strcpy(Log.variables[Log.amount].name,name);
   10fe8:	1860      	adds	r0, r4, r1
   10fea:	9906      	ldr	r1, [sp, #24]
   10fec:	f002 f8e0 	bl	131b0 <strcpy>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:62

	Log.amount++;
   10ff0:	23e0      	movs	r3, #224	; 0xe0
   10ff2:	009b      	lsls	r3, r3, #2
   10ff4:	5ae2      	ldrh	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:64

	return 0;
   10ff6:	2000      	movs	r0, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:62
	Log.variables[Log.amount].writeable = writeable;
	Log.variables[Log.amount].type = type;
	Log.variables[Log.amount].groupID = current_group_id;
	strcpy(Log.variables[Log.amount].name,name);

	Log.amount++;
   10ff8:	3201      	adds	r2, #1
   10ffa:	52e2      	strh	r2, [r4, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:65

	return 0;
}
   10ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10ffe:	1c28      	adds	r0, r5, #0
   11000:	4090      	lsls	r0, r2
   11002:	2749      	movs	r7, #73	; 0x49
get_size():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:307
	switch(type)
	{
		case dio_type_FLOAT:
		case dio_type_UINT32:
		case dio_type_INT32:
			return 4;
   11004:	2504      	movs	r5, #4
   11006:	4207      	tst	r7, r0
   11008:	d1e4      	bne.n	10fd4 <register_var+0x20>
   1100a:	2524      	movs	r5, #36	; 0x24
   1100c:	4028      	ands	r0, r5
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:311

		case dio_type_UINT16:
		case dio_type_INT16:
			return 2;
   1100e:	4245      	negs	r5, r0
   11010:	4168      	adcs	r0, r5
   11012:	2502      	movs	r5, #2
   11014:	1a2d      	subs	r5, r5, r0
   11016:	e7dd      	b.n	10fd4 <register_var+0x20>
   11018:	20001a60 	.word	0x20001a60
   1101c:	20001a5c 	.word	0x20001a5c

00011020 <distantio_decode>:
distantio_decode():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:130
	// Send frame
	sendBytes(Log.handle,buffer,i);
}

void distantio_decode(uint8* data,uint16_t datasize)
{
   11020:	b5f0      	push	{r4, r5, r6, r7, lr}
   11022:	4644      	mov	r4, r8
   11024:	465f      	mov	r7, fp
   11026:	4656      	mov	r6, sl
   11028:	464d      	mov	r5, r9
   1102a:	b4f0      	push	{r4, r5, r6, r7}
   1102c:	1c04      	adds	r4, r0, #0
   1102e:	b085      	sub	sp, #20
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:133
	// First check data size
	// 1 byte cmd + 2 bytes id + 1 byte type + FRAME_SIZE + 2 byte CRC
	if(datasize != PAYLOAD_SIZE)
   11030:	290e      	cmp	r1, #14
   11032:	d006      	beq.n	11042 <distantio_decode+0x22>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:229
			{
				Log.variables[i].send = 0;
			}
			break;
	}
}
   11034:	b005      	add	sp, #20
   11036:	bc3c      	pop	{r2, r3, r4, r5}
   11038:	4690      	mov	r8, r2
   1103a:	4699      	mov	r9, r3
   1103c:	46a2      	mov	sl, r4
   1103e:	46ab      	mov	fp, r5
   11040:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:137
	// 1 byte cmd + 2 bytes id + 1 byte type + FRAME_SIZE + 2 byte CRC
	if(datasize != PAYLOAD_SIZE)
		return;

	// Second, check CRC
	uint16_t crc_value = crc16(data,PAYLOAD_SIZE-2);
   11042:	210c      	movs	r1, #12
   11044:	f7ff fee4 	bl	10e10 <crc16>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:138
	uint16_t crc_rx = ((uint16_t)data[PAYLOAD_SIZE-2] << 8) | data[PAYLOAD_SIZE-1];
   11048:	7b23      	ldrb	r3, [r4, #12]
   1104a:	7b62      	ldrb	r2, [r4, #13]
   1104c:	021b      	lsls	r3, r3, #8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:140

	if(crc_value != crc_rx)
   1104e:	4313      	orrs	r3, r2
   11050:	4298      	cmp	r0, r3
   11052:	d1ef      	bne.n	11034 <distantio_decode+0x14>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:149
	// First, identify command
	uint8_t command = data[0];
	
	// Second, identify ID
	uint8_t a = data[2];
	uint16_t ID = data[1] + (a << 8);
   11054:	78a3      	ldrb	r3, [r4, #2]
   11056:	7862      	ldrb	r2, [r4, #1]
   11058:	021b      	lsls	r3, r3, #8
   1105a:	18d3      	adds	r3, r2, r3
   1105c:	b29a      	uxth	r2, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:154
	
	// Third, identify data type
	uint8_t type = data[3];

	switch(command)
   1105e:	7823      	ldrb	r3, [r4, #0]
   11060:	2b02      	cmp	r3, #2
   11062:	d035      	beq.n	110d0 <distantio_decode+0xb0>
   11064:	d918      	bls.n	11098 <distantio_decode+0x78>
   11066:	2b03      	cmp	r3, #3
   11068:	d025      	beq.n	110b6 <distantio_decode+0x96>
   1106a:	2b04      	cmp	r3, #4
   1106c:	d1e2      	bne.n	11034 <distantio_decode+0x14>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:223 (discriminator 1)
			Log.variables[ID].send = 0;
			break;
		
		// User requested stop all variable read
		case 4:
			for(uint16_t i = 0 ; i < Log.amount ; i++)
   1106e:	495f      	ldr	r1, [pc, #380]	; (111ec <distantio_decode+0x1cc>)
   11070:	23e0      	movs	r3, #224	; 0xe0
   11072:	009b      	lsls	r3, r3, #2
   11074:	5aca      	ldrh	r2, [r1, r3]
   11076:	2a00      	cmp	r2, #0
   11078:	d0dc      	beq.n	11034 <distantio_decode+0x14>
   1107a:	3a01      	subs	r2, #1
   1107c:	b292      	uxth	r2, r2
   1107e:	00d0      	lsls	r0, r2, #3
   11080:	1a82      	subs	r2, r0, r2
   11082:	1c0b      	adds	r3, r1, #0
   11084:	0092      	lsls	r2, r2, #2
   11086:	3134      	adds	r1, #52	; 0x34
   11088:	1889      	adds	r1, r1, r2
   1108a:	3318      	adds	r3, #24
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:225
			{
				Log.variables[i].send = 0;
   1108c:	2200      	movs	r2, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:225 (discriminator 2)
   1108e:	701a      	strb	r2, [r3, #0]
   11090:	331c      	adds	r3, #28
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:223 (discriminator 2)
			Log.variables[ID].send = 0;
			break;
		
		// User requested stop all variable read
		case 4:
			for(uint16_t i = 0 ; i < Log.amount ; i++)
   11092:	428b      	cmp	r3, r1
   11094:	d1fb      	bne.n	1108e <distantio_decode+0x6e>
   11096:	e7cd      	b.n	11034 <distantio_decode+0x14>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:154
	uint16_t ID = data[1] + (a << 8);
	
	// Third, identify data type
	uint8_t type = data[3];

	switch(command)
   11098:	2b00      	cmp	r3, #0
   1109a:	d1cb      	bne.n	11034 <distantio_decode+0x14>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:158
	{
		// User requested variable read
		case 0:
			if(ID >= Log.amount)
   1109c:	4953      	ldr	r1, [pc, #332]	; (111ec <distantio_decode+0x1cc>)
   1109e:	23e0      	movs	r3, #224	; 0xe0
   110a0:	009b      	lsls	r3, r3, #2
   110a2:	5acb      	ldrh	r3, [r1, r3]
   110a4:	4293      	cmp	r3, r2
   110a6:	d9c5      	bls.n	11034 <distantio_decode+0x14>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:161
				return;

			Log.variables[ID].send = 1;
   110a8:	00d3      	lsls	r3, r2, #3
   110aa:	1a9a      	subs	r2, r3, r2
   110ac:	0092      	lsls	r2, r2, #2
   110ae:	1889      	adds	r1, r1, r2
   110b0:	2301      	movs	r3, #1
   110b2:	760b      	strb	r3, [r1, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:162
			break;
   110b4:	e7be      	b.n	11034 <distantio_decode+0x14>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:216
			}
			break;

		// User requested stop variable read
		case 3:
			if(ID >= Log.amount)
   110b6:	494d      	ldr	r1, [pc, #308]	; (111ec <distantio_decode+0x1cc>)
   110b8:	23e0      	movs	r3, #224	; 0xe0
   110ba:	009b      	lsls	r3, r3, #2
   110bc:	5acb      	ldrh	r3, [r1, r3]
   110be:	4293      	cmp	r3, r2
   110c0:	d9b8      	bls.n	11034 <distantio_decode+0x14>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:218
				return;
			Log.variables[ID].send = 0;
   110c2:	00d3      	lsls	r3, r2, #3
   110c4:	1a9a      	subs	r2, r3, r2
   110c6:	0092      	lsls	r2, r2, #2
   110c8:	1889      	adds	r1, r1, r2
   110ca:	2300      	movs	r3, #0
   110cc:	760b      	strb	r3, [r1, #24]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:219
			break;
   110ce:	e7b1      	b.n	11034 <distantio_decode+0x14>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:208 (discriminator 1)
			}*/
			break;
		
		// User requested all descriptors
		case 2:
			for(uint16_t i = 0 ; i < Log.amount ; i++)
   110d0:	4e46      	ldr	r6, [pc, #280]	; (111ec <distantio_decode+0x1cc>)
   110d2:	23e0      	movs	r3, #224	; 0xe0
   110d4:	009b      	lsls	r3, r3, #2
   110d6:	5af3      	ldrh	r3, [r6, r3]
   110d8:	2500      	movs	r5, #0
   110da:	2b00      	cmp	r3, #0
   110dc:	d0aa      	beq.n	11034 <distantio_decode+0x14>
send_descriptor():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:109 (discriminator 2)

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.variables[i].name))
   110de:	2280      	movs	r2, #128	; 0x80
   110e0:	1992      	adds	r2, r2, r6
   110e2:	4690      	mov	r8, r2
   110e4:	2294      	movs	r2, #148	; 0x94
   110e6:	0052      	lsls	r2, r2, #1
   110e8:	1992      	adds	r2, r2, r6
   110ea:	4692      	mov	sl, r2
   110ec:	22a2      	movs	r2, #162	; 0xa2
   110ee:	0052      	lsls	r2, r2, #1
   110f0:	1992      	adds	r2, r2, r6
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:89 (discriminator 2)
	static uint8_t buffer[PAYLOAD_SIZE];
	uint8_t *temp_ptr;
	uint8_t type;

	// Respond to send-descriptor 0x02
	buffer[0] = 0x02;
   110f2:	4c3f      	ldr	r4, [pc, #252]	; (111f0 <distantio_decode+0x1d0>)
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:109 (discriminator 2)

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.variables[i].name))
   110f4:	4691      	mov	r9, r2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:111 (discriminator 2)
		{
			buffer[i] = Log.variables[i].name[k];
   110f6:	46b3      	mov	fp, r6
   110f8:	9601      	str	r6, [sp, #4]
   110fa:	466a      	mov	r2, sp
   110fc:	8115      	strh	r5, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:81 (discriminator 2)
 * Send descriptor
 */

void send_descriptor(uint16_t index)
{
	if(index > Log.amount)
   110fe:	42ab      	cmp	r3, r5
   11100:	d36f      	bcc.n	111e2 <distantio_decode+0x1c2>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:89
	static uint8_t buffer[PAYLOAD_SIZE];
	uint8_t *temp_ptr;
	uint8_t type;

	// Respond to send-descriptor 0x02
	buffer[0] = 0x02;
   11102:	2302      	movs	r3, #2
   11104:	7023      	strb	r3, [r4, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:93

	// Write id
	temp_ptr = (uint8_t*)(&index);
	buffer[1] = *(temp_ptr    );
   11106:	7a13      	ldrb	r3, [r2, #8]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:98
	buffer[2] = *(temp_ptr + 1);

	// Write type & writeable

	type = (uint8_t)(Log.variables[index].type);
   11108:	00ea      	lsls	r2, r5, #3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:93
	// Respond to send-descriptor 0x02
	buffer[0] = 0x02;

	// Write id
	temp_ptr = (uint8_t*)(&index);
	buffer[1] = *(temp_ptr    );
   1110a:	7063      	strb	r3, [r4, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:94
	buffer[2] = *(temp_ptr + 1);
   1110c:	466b      	mov	r3, sp
   1110e:	3309      	adds	r3, #9
   11110:	781b      	ldrb	r3, [r3, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:98

	// Write type & writeable

	type = (uint8_t)(Log.variables[index].type);
   11112:	1b52      	subs	r2, r2, r5
   11114:	0092      	lsls	r2, r2, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:94
	buffer[0] = 0x02;

	// Write id
	temp_ptr = (uint8_t*)(&index);
	buffer[1] = *(temp_ptr    );
	buffer[2] = *(temp_ptr + 1);
   11116:	70a3      	strb	r3, [r4, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:98

	// Write type & writeable

	type = (uint8_t)(Log.variables[index].type);
   11118:	18b2      	adds	r2, r6, r2
   1111a:	7b13      	ldrb	r3, [r2, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:100

	if(Log.variables[index].writeable)
   1111c:	7992      	ldrb	r2, [r2, #6]
   1111e:	2a00      	cmp	r2, #0
   11120:	d001      	beq.n	11126 <distantio_decode+0x106>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:101
		type += 0xF0;
   11122:	3b10      	subs	r3, #16
   11124:	b2db      	uxtb	r3, r3
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:109

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.variables[i].name))
   11126:	4640      	mov	r0, r8
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:103
	type = (uint8_t)(Log.variables[index].type);

	if(Log.variables[index].writeable)
		type += 0xF0;

	buffer[3] = type;
   11128:	70e3      	strb	r3, [r4, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:109

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.variables[i].name))
   1112a:	f002 f849 	bl	131c0 <strlen>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:115
		{
			buffer[i] = Log.variables[i].name[k];
			i++;
		}
		else
			buffer[i++] = 0;
   1112e:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:109

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.variables[i].name))
   11130:	2800      	cmp	r0, #0
   11132:	d001      	beq.n	11138 <distantio_decode+0x118>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:111
		{
			buffer[i] = Log.variables[i].name[k];
   11134:	4642      	mov	r2, r8
   11136:	7813      	ldrb	r3, [r2, #0]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:109

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.variables[i].name))
   11138:	4f2e      	ldr	r7, [pc, #184]	; (111f4 <distantio_decode+0x1d4>)
   1113a:	7123      	strb	r3, [r4, #4]
   1113c:	1c38      	adds	r0, r7, #0
   1113e:	f002 f83f 	bl	131c0 <strlen>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:115
		{
			buffer[i] = Log.variables[i].name[k];
			i++;
		}
		else
			buffer[i++] = 0;
   11142:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:109

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.variables[i].name))
   11144:	2801      	cmp	r0, #1
   11146:	d900      	bls.n	1114a <distantio_decode+0x12a>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:111
		{
			buffer[i] = Log.variables[i].name[k];
   11148:	787b      	ldrb	r3, [r7, #1]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:109

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.variables[i].name))
   1114a:	4f2b      	ldr	r7, [pc, #172]	; (111f8 <distantio_decode+0x1d8>)
   1114c:	7163      	strb	r3, [r4, #5]
   1114e:	1c38      	adds	r0, r7, #0
   11150:	f002 f836 	bl	131c0 <strlen>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:115
		{
			buffer[i] = Log.variables[i].name[k];
			i++;
		}
		else
			buffer[i++] = 0;
   11154:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:109

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.variables[i].name))
   11156:	2802      	cmp	r0, #2
   11158:	d900      	bls.n	1115c <distantio_decode+0x13c>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:111
		{
			buffer[i] = Log.variables[i].name[k];
   1115a:	78bb      	ldrb	r3, [r7, #2]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:109

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.variables[i].name))
   1115c:	4f27      	ldr	r7, [pc, #156]	; (111fc <distantio_decode+0x1dc>)
   1115e:	71a3      	strb	r3, [r4, #6]
   11160:	1c38      	adds	r0, r7, #0
   11162:	f002 f82d 	bl	131c0 <strlen>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:115
		{
			buffer[i] = Log.variables[i].name[k];
			i++;
		}
		else
			buffer[i++] = 0;
   11166:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:109

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.variables[i].name))
   11168:	2803      	cmp	r0, #3
   1116a:	d900      	bls.n	1116e <distantio_decode+0x14e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:111
		{
			buffer[i] = Log.variables[i].name[k];
   1116c:	78fb      	ldrb	r3, [r7, #3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:109

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.variables[i].name))
   1116e:	4f24      	ldr	r7, [pc, #144]	; (11200 <distantio_decode+0x1e0>)
   11170:	71e3      	strb	r3, [r4, #7]
   11172:	1c38      	adds	r0, r7, #0
   11174:	f002 f824 	bl	131c0 <strlen>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:115
		{
			buffer[i] = Log.variables[i].name[k];
			i++;
		}
		else
			buffer[i++] = 0;
   11178:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:109

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.variables[i].name))
   1117a:	2804      	cmp	r0, #4
   1117c:	d900      	bls.n	11180 <distantio_decode+0x160>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:111
		{
			buffer[i] = Log.variables[i].name[k];
   1117e:	793b      	ldrb	r3, [r7, #4]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:109

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.variables[i].name))
   11180:	4f20      	ldr	r7, [pc, #128]	; (11204 <distantio_decode+0x1e4>)
   11182:	7223      	strb	r3, [r4, #8]
   11184:	1c38      	adds	r0, r7, #0
   11186:	f002 f81b 	bl	131c0 <strlen>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:115
		{
			buffer[i] = Log.variables[i].name[k];
			i++;
		}
		else
			buffer[i++] = 0;
   1118a:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:109

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.variables[i].name))
   1118c:	2805      	cmp	r0, #5
   1118e:	d900      	bls.n	11192 <distantio_decode+0x172>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:111
		{
			buffer[i] = Log.variables[i].name[k];
   11190:	797b      	ldrb	r3, [r7, #5]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:109

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.variables[i].name))
   11192:	4650      	mov	r0, sl
   11194:	7263      	strb	r3, [r4, #9]
   11196:	f002 f813 	bl	131c0 <strlen>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:115
		{
			buffer[i] = Log.variables[i].name[k];
			i++;
		}
		else
			buffer[i++] = 0;
   1119a:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:109

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.variables[i].name))
   1119c:	2806      	cmp	r0, #6
   1119e:	d903      	bls.n	111a8 <distantio_decode+0x188>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:111
		{
			buffer[i] = Log.variables[i].name[k];
   111a0:	2397      	movs	r3, #151	; 0x97
   111a2:	9a01      	ldr	r2, [sp, #4]
   111a4:	005b      	lsls	r3, r3, #1
   111a6:	5cd3      	ldrb	r3, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:109

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.variables[i].name))
   111a8:	4648      	mov	r0, r9
   111aa:	72a3      	strb	r3, [r4, #10]
   111ac:	f002 f808 	bl	131c0 <strlen>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:115
		{
			buffer[i] = Log.variables[i].name[k];
			i++;
		}
		else
			buffer[i++] = 0;
   111b0:	2300      	movs	r3, #0
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:109

	//Write name
	uint16_t i = 4;
	for(uint16_t k = 0 ; k < 8 ; k++)
	{
		if(k < strlen(Log.variables[i].name))
   111b2:	2807      	cmp	r0, #7
   111b4:	d903      	bls.n	111be <distantio_decode+0x19e>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:111
		{
			buffer[i] = Log.variables[i].name[k];
   111b6:	234c      	movs	r3, #76	; 0x4c
   111b8:	33ff      	adds	r3, #255	; 0xff
   111ba:	465a      	mov	r2, fp
   111bc:	5cd3      	ldrb	r3, [r2, r3]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:119
		else
			buffer[i++] = 0;
	}

	// Compute crc
	uint16_t crc_value = crc16(buffer,i);
   111be:	210c      	movs	r1, #12
   111c0:	1c20      	adds	r0, r4, #0
   111c2:	72e3      	strb	r3, [r4, #11]
   111c4:	f7ff fe24 	bl	10e10 <crc16>
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:126
	// Write crc into buffer's last byte
	buffer[i++] = crc_value & 0xFF;
	buffer[i++] = (crc_value >> 8) & 0xFF;

	// Send frame
	sendBytes(Log.handle,buffer,i);
   111c8:	23e1      	movs	r3, #225	; 0xe1
   111ca:	009b      	lsls	r3, r3, #2
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:122

	// Compute crc
	uint16_t crc_value = crc16(buffer,i);

	// Write crc into buffer's last byte
	buffer[i++] = crc_value & 0xFF;
   111cc:	7320      	strb	r0, [r4, #12]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:123
	buffer[i++] = (crc_value >> 8) & 0xFF;
   111ce:	0a00      	lsrs	r0, r0, #8
   111d0:	7360      	strb	r0, [r4, #13]
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:126

	// Send frame
	sendBytes(Log.handle,buffer,i);
   111d2:	1c21      	adds	r1, r4, #0
   111d4:	58f0      	ldr	r0, [r6, r3]
   111d6:	220e      	movs	r2, #14
   111d8:	f7fd fc0c 	bl	e9f4 <sendBytes>
   111dc:	23e0      	movs	r3, #224	; 0xe0
   111de:	009b      	lsls	r3, r3, #2
   111e0:	5af3      	ldrh	r3, [r6, r3]
distantio_decode():
C:\Users\B48923\Documents\GitHub\FRDM-Quadcopter\FSFK_KL46Z\FLASH/../DistantIO/distantio.c:208 (discriminator 2)
			}*/
			break;
		
		// User requested all descriptors
		case 2:
			for(uint16_t i = 0 ; i < Log.amount ; i++)
   111e2:	3501      	adds	r5, #1
   111e4:	b2ad      	uxth	r5, r5
   111e6:	429d      	cmp	r5, r3
   111e8:	d387      	bcc.n	110fa <distantio_decode+0xda>
   111ea:	e723      	b.n	11034 <distantio_decode+0x14>
   111ec:	20001a60 	.word	0x20001a60
   111f0:	1fffe2b8 	.word	0x1fffe2b8
   111f4:	20001afc 	.word	0x20001afc
   111f8:	20001b18 	.word	0x20001b18
   111fc:	20001b34 	.word	0x20001b34
   11200:	20001b50 	.word	0x20001b50
   11204:	20001b6c 	.word	0x20001b6c

00011208 <sinf>:
sinf():
   11208:	b500      	push	{lr}
   1120a:	4a1d      	ldr	r2, [pc, #116]	; (11280 <sinf+0x78>)
   1120c:	0043      	lsls	r3, r0, #1
   1120e:	b083      	sub	sp, #12
   11210:	1c01      	adds	r1, r0, #0
   11212:	085b      	lsrs	r3, r3, #1
   11214:	4293      	cmp	r3, r2
   11216:	dd19      	ble.n	1124c <sinf+0x44>
   11218:	4a1a      	ldr	r2, [pc, #104]	; (11284 <sinf+0x7c>)
   1121a:	4293      	cmp	r3, r2
   1121c:	dd03      	ble.n	11226 <sinf+0x1e>
   1121e:	f7ef fee3 	bl	fe8 <__aeabi_fsub>
   11222:	b003      	add	sp, #12
   11224:	bd00      	pop	{pc}
   11226:	4669      	mov	r1, sp
   11228:	f000 ff9a 	bl	12160 <__ieee754_rem_pio2f>
   1122c:	2303      	movs	r3, #3
   1122e:	4018      	ands	r0, r3
   11230:	2801      	cmp	r0, #1
   11232:	d019      	beq.n	11268 <sinf+0x60>
   11234:	2802      	cmp	r0, #2
   11236:	d00e      	beq.n	11256 <sinf+0x4e>
   11238:	2800      	cmp	r0, #0
   1123a:	d01a      	beq.n	11272 <sinf+0x6a>
   1123c:	9800      	ldr	r0, [sp, #0]
   1123e:	9901      	ldr	r1, [sp, #4]
   11240:	f001 f968 	bl	12514 <__kernel_cosf>
   11244:	2380      	movs	r3, #128	; 0x80
   11246:	061b      	lsls	r3, r3, #24
   11248:	18c0      	adds	r0, r0, r3
   1124a:	e7ea      	b.n	11222 <sinf+0x1a>
   1124c:	2100      	movs	r1, #0
   1124e:	2200      	movs	r2, #0
   11250:	f001 fd88 	bl	12d64 <__kernel_sinf>
   11254:	e7e5      	b.n	11222 <sinf+0x1a>
   11256:	9800      	ldr	r0, [sp, #0]
   11258:	9901      	ldr	r1, [sp, #4]
   1125a:	2201      	movs	r2, #1
   1125c:	f001 fd82 	bl	12d64 <__kernel_sinf>
   11260:	2380      	movs	r3, #128	; 0x80
   11262:	061b      	lsls	r3, r3, #24
   11264:	18c0      	adds	r0, r0, r3
   11266:	e7dc      	b.n	11222 <sinf+0x1a>
   11268:	9901      	ldr	r1, [sp, #4]
   1126a:	9800      	ldr	r0, [sp, #0]
   1126c:	f001 f952 	bl	12514 <__kernel_cosf>
   11270:	e7d7      	b.n	11222 <sinf+0x1a>
   11272:	9800      	ldr	r0, [sp, #0]
   11274:	9901      	ldr	r1, [sp, #4]
   11276:	2201      	movs	r2, #1
   11278:	f001 fd74 	bl	12d64 <__kernel_sinf>
   1127c:	e7d1      	b.n	11222 <sinf+0x1a>
   1127e:	46c0      	nop			; (mov r8, r8)
   11280:	3f490fd8 	.word	0x3f490fd8
   11284:	7f7fffff 	.word	0x7f7fffff

00011288 <acosf>:
acosf():
   11288:	b570      	push	{r4, r5, r6, lr}
   1128a:	b08a      	sub	sp, #40	; 0x28
   1128c:	1c04      	adds	r4, r0, #0
   1128e:	f000 fa6f 	bl	11770 <__ieee754_acosf>
   11292:	4e22      	ldr	r6, [pc, #136]	; (1131c <acosf+0x94>)
   11294:	2300      	movs	r3, #0
   11296:	56f3      	ldrsb	r3, [r6, r3]
   11298:	1c05      	adds	r5, r0, #0
   1129a:	3301      	adds	r3, #1
   1129c:	d004      	beq.n	112a8 <acosf+0x20>
   1129e:	1c20      	adds	r0, r4, #0
   112a0:	f001 feea 	bl	13078 <__fpclassifyf>
   112a4:	2800      	cmp	r0, #0
   112a6:	d102      	bne.n	112ae <acosf+0x26>
   112a8:	1c28      	adds	r0, r5, #0
   112aa:	b00a      	add	sp, #40	; 0x28
   112ac:	bd70      	pop	{r4, r5, r6, pc}
   112ae:	1c20      	adds	r0, r4, #0
   112b0:	f001 fe88 	bl	12fc4 <fabsf>
   112b4:	21fe      	movs	r1, #254	; 0xfe
   112b6:	0589      	lsls	r1, r1, #22
   112b8:	f7ef fa08 	bl	6cc <__aeabi_fcmpgt>
   112bc:	2800      	cmp	r0, #0
   112be:	d0f3      	beq.n	112a8 <acosf+0x20>
   112c0:	2301      	movs	r3, #1
   112c2:	9300      	str	r3, [sp, #0]
   112c4:	4b16      	ldr	r3, [pc, #88]	; (11320 <acosf+0x98>)
   112c6:	1c20      	adds	r0, r4, #0
   112c8:	9301      	str	r3, [sp, #4]
   112ca:	2300      	movs	r3, #0
   112cc:	9308      	str	r3, [sp, #32]
   112ce:	f7f1 fb3d 	bl	294c <__aeabi_f2d>
   112d2:	9004      	str	r0, [sp, #16]
   112d4:	9105      	str	r1, [sp, #20]
   112d6:	9002      	str	r0, [sp, #8]
   112d8:	9103      	str	r1, [sp, #12]
   112da:	4812      	ldr	r0, [pc, #72]	; (11324 <acosf+0x9c>)
   112dc:	f001 fdc0 	bl	12e60 <nan>
   112e0:	2300      	movs	r3, #0
   112e2:	56f3      	ldrsb	r3, [r6, r3]
   112e4:	9006      	str	r0, [sp, #24]
   112e6:	9107      	str	r1, [sp, #28]
   112e8:	2b02      	cmp	r3, #2
   112ea:	d00d      	beq.n	11308 <acosf+0x80>
   112ec:	4668      	mov	r0, sp
   112ee:	f001 fdb3 	bl	12e58 <matherr>
   112f2:	2800      	cmp	r0, #0
   112f4:	d008      	beq.n	11308 <acosf+0x80>
   112f6:	9b08      	ldr	r3, [sp, #32]
   112f8:	2b00      	cmp	r3, #0
   112fa:	d10a      	bne.n	11312 <acosf+0x8a>
   112fc:	9806      	ldr	r0, [sp, #24]
   112fe:	9907      	ldr	r1, [sp, #28]
   11300:	f7f1 fb76 	bl	29f0 <__aeabi_d2f>
   11304:	1c05      	adds	r5, r0, #0
   11306:	e7cf      	b.n	112a8 <acosf+0x20>
   11308:	f001 ff44 	bl	13194 <__errno>
   1130c:	2321      	movs	r3, #33	; 0x21
   1130e:	6003      	str	r3, [r0, #0]
   11310:	e7f1      	b.n	112f6 <acosf+0x6e>
   11312:	f001 ff3f 	bl	13194 <__errno>
   11316:	9b08      	ldr	r3, [sp, #32]
   11318:	6003      	str	r3, [r0, #0]
   1131a:	e7ef      	b.n	112fc <acosf+0x74>
   1131c:	1fffe018 	.word	0x1fffe018
   11320:	000134c0 	.word	0x000134c0
   11324:	000134bc 	.word	0x000134bc

00011328 <powf>:
powf():
   11328:	b5f0      	push	{r4, r5, r6, r7, lr}
   1132a:	4646      	mov	r6, r8
   1132c:	464f      	mov	r7, r9
   1132e:	b4c0      	push	{r6, r7}
   11330:	b08b      	sub	sp, #44	; 0x2c
   11332:	1c05      	adds	r5, r0, #0
   11334:	1c0c      	adds	r4, r1, #0
   11336:	f000 fb85 	bl	11a44 <__ieee754_powf>
   1133a:	4ebb      	ldr	r6, [pc, #748]	; (11628 <powf+0x300>)
   1133c:	2300      	movs	r3, #0
   1133e:	56f3      	ldrsb	r3, [r6, r3]
   11340:	4680      	mov	r8, r0
   11342:	1c07      	adds	r7, r0, #0
   11344:	3301      	adds	r3, #1
   11346:	d004      	beq.n	11352 <powf+0x2a>
   11348:	1c20      	adds	r0, r4, #0
   1134a:	f001 fe95 	bl	13078 <__fpclassifyf>
   1134e:	2800      	cmp	r0, #0
   11350:	d105      	bne.n	1135e <powf+0x36>
   11352:	1c38      	adds	r0, r7, #0
   11354:	b00b      	add	sp, #44	; 0x2c
   11356:	bc0c      	pop	{r2, r3}
   11358:	4690      	mov	r8, r2
   1135a:	4699      	mov	r9, r3
   1135c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1135e:	1c28      	adds	r0, r5, #0
   11360:	f001 fe8a 	bl	13078 <__fpclassifyf>
   11364:	4681      	mov	r9, r0
   11366:	2800      	cmp	r0, #0
   11368:	d133      	bne.n	113d2 <powf+0xaa>
   1136a:	1c20      	adds	r0, r4, #0
   1136c:	2100      	movs	r1, #0
   1136e:	f7ef f993 	bl	698 <__aeabi_fcmpeq>
   11372:	2800      	cmp	r0, #0
   11374:	d0ed      	beq.n	11352 <powf+0x2a>
   11376:	2301      	movs	r3, #1
   11378:	9300      	str	r3, [sp, #0]
   1137a:	4bac      	ldr	r3, [pc, #688]	; (1162c <powf+0x304>)
   1137c:	464a      	mov	r2, r9
   1137e:	1c28      	adds	r0, r5, #0
   11380:	9301      	str	r3, [sp, #4]
   11382:	9208      	str	r2, [sp, #32]
   11384:	f7f1 fae2 	bl	294c <__aeabi_f2d>
   11388:	466f      	mov	r7, sp
   1138a:	60b8      	str	r0, [r7, #8]
   1138c:	60f9      	str	r1, [r7, #12]
   1138e:	1c20      	adds	r0, r4, #0
   11390:	f7f1 fadc 	bl	294c <__aeabi_f2d>
   11394:	4b9d      	ldr	r3, [pc, #628]	; (1160c <powf+0x2e4>)
   11396:	4a9c      	ldr	r2, [pc, #624]	; (11608 <powf+0x2e0>)
   11398:	61ba      	str	r2, [r7, #24]
   1139a:	61fb      	str	r3, [r7, #28]
   1139c:	2300      	movs	r3, #0
   1139e:	56f3      	ldrsb	r3, [r6, r3]
   113a0:	6138      	str	r0, [r7, #16]
   113a2:	6179      	str	r1, [r7, #20]
   113a4:	1c5a      	adds	r2, r3, #1
   113a6:	d00e      	beq.n	113c6 <powf+0x9e>
   113a8:	2b02      	cmp	r3, #2
   113aa:	d00c      	beq.n	113c6 <powf+0x9e>
   113ac:	4668      	mov	r0, sp
   113ae:	f001 fd53 	bl	12e58 <matherr>
   113b2:	2800      	cmp	r0, #0
   113b4:	d100      	bne.n	113b8 <powf+0x90>
   113b6:	e0e5      	b.n	11584 <powf+0x25c>
   113b8:	6a3b      	ldr	r3, [r7, #32]
   113ba:	2b00      	cmp	r3, #0
   113bc:	d003      	beq.n	113c6 <powf+0x9e>
   113be:	f001 fee9 	bl	13194 <__errno>
   113c2:	6a3b      	ldr	r3, [r7, #32]
   113c4:	6003      	str	r3, [r0, #0]
   113c6:	69b8      	ldr	r0, [r7, #24]
   113c8:	69f9      	ldr	r1, [r7, #28]
   113ca:	f7f1 fb11 	bl	29f0 <__aeabi_d2f>
   113ce:	1c07      	adds	r7, r0, #0
   113d0:	e7bf      	b.n	11352 <powf+0x2a>
   113d2:	1c28      	adds	r0, r5, #0
   113d4:	2100      	movs	r1, #0
   113d6:	f7ef f95f 	bl	698 <__aeabi_fcmpeq>
   113da:	2800      	cmp	r0, #0
   113dc:	d032      	beq.n	11444 <powf+0x11c>
   113de:	1c20      	adds	r0, r4, #0
   113e0:	2100      	movs	r1, #0
   113e2:	f7ef f959 	bl	698 <__aeabi_fcmpeq>
   113e6:	4680      	mov	r8, r0
   113e8:	2800      	cmp	r0, #0
   113ea:	d069      	beq.n	114c0 <powf+0x198>
   113ec:	2301      	movs	r3, #1
   113ee:	9300      	str	r3, [sp, #0]
   113f0:	4b8e      	ldr	r3, [pc, #568]	; (1162c <powf+0x304>)
   113f2:	1c28      	adds	r0, r5, #0
   113f4:	9301      	str	r3, [sp, #4]
   113f6:	2300      	movs	r3, #0
   113f8:	9308      	str	r3, [sp, #32]
   113fa:	f7f1 faa7 	bl	294c <__aeabi_f2d>
   113fe:	466f      	mov	r7, sp
   11400:	60b8      	str	r0, [r7, #8]
   11402:	60f9      	str	r1, [r7, #12]
   11404:	1c20      	adds	r0, r4, #0
   11406:	f7f1 faa1 	bl	294c <__aeabi_f2d>
   1140a:	4a81      	ldr	r2, [pc, #516]	; (11610 <powf+0x2e8>)
   1140c:	4b81      	ldr	r3, [pc, #516]	; (11614 <powf+0x2ec>)
   1140e:	61ba      	str	r2, [r7, #24]
   11410:	61fb      	str	r3, [r7, #28]
   11412:	2300      	movs	r3, #0
   11414:	56f3      	ldrsb	r3, [r6, r3]
   11416:	6138      	str	r0, [r7, #16]
   11418:	6179      	str	r1, [r7, #20]
   1141a:	2b00      	cmp	r3, #0
   1141c:	d004      	beq.n	11428 <powf+0x100>
   1141e:	4b7b      	ldr	r3, [pc, #492]	; (1160c <powf+0x2e4>)
   11420:	4a79      	ldr	r2, [pc, #484]	; (11608 <powf+0x2e0>)
   11422:	61ba      	str	r2, [r7, #24]
   11424:	61fb      	str	r3, [r7, #28]
   11426:	e7ce      	b.n	113c6 <powf+0x9e>
   11428:	4668      	mov	r0, sp
   1142a:	f001 fd15 	bl	12e58 <matherr>
   1142e:	2800      	cmp	r0, #0
   11430:	d100      	bne.n	11434 <powf+0x10c>
   11432:	e0ac      	b.n	1158e <powf+0x266>
   11434:	6a3b      	ldr	r3, [r7, #32]
   11436:	2b00      	cmp	r3, #0
   11438:	d0c5      	beq.n	113c6 <powf+0x9e>
   1143a:	f001 feab 	bl	13194 <__errno>
   1143e:	6a3a      	ldr	r2, [r7, #32]
   11440:	6002      	str	r2, [r0, #0]
   11442:	e7c0      	b.n	113c6 <powf+0x9e>
   11444:	4640      	mov	r0, r8
   11446:	f001 fdc1 	bl	12fcc <finitef>
   1144a:	4681      	mov	r9, r0
   1144c:	2800      	cmp	r0, #0
   1144e:	d067      	beq.n	11520 <powf+0x1f8>
   11450:	4640      	mov	r0, r8
   11452:	2100      	movs	r1, #0
   11454:	f7ef f920 	bl	698 <__aeabi_fcmpeq>
   11458:	4647      	mov	r7, r8
   1145a:	2800      	cmp	r0, #0
   1145c:	d100      	bne.n	11460 <powf+0x138>
   1145e:	e778      	b.n	11352 <powf+0x2a>
   11460:	1c28      	adds	r0, r5, #0
   11462:	f001 fdb3 	bl	12fcc <finitef>
   11466:	4647      	mov	r7, r8
   11468:	2800      	cmp	r0, #0
   1146a:	d100      	bne.n	1146e <powf+0x146>
   1146c:	e771      	b.n	11352 <powf+0x2a>
   1146e:	1c20      	adds	r0, r4, #0
   11470:	f001 fdac 	bl	12fcc <finitef>
   11474:	2800      	cmp	r0, #0
   11476:	d100      	bne.n	1147a <powf+0x152>
   11478:	e76b      	b.n	11352 <powf+0x2a>
   1147a:	2304      	movs	r3, #4
   1147c:	9300      	str	r3, [sp, #0]
   1147e:	4b6b      	ldr	r3, [pc, #428]	; (1162c <powf+0x304>)
   11480:	1c28      	adds	r0, r5, #0
   11482:	9301      	str	r3, [sp, #4]
   11484:	2300      	movs	r3, #0
   11486:	9308      	str	r3, [sp, #32]
   11488:	f7f1 fa60 	bl	294c <__aeabi_f2d>
   1148c:	466f      	mov	r7, sp
   1148e:	60b8      	str	r0, [r7, #8]
   11490:	60f9      	str	r1, [r7, #12]
   11492:	1c20      	adds	r0, r4, #0
   11494:	f7f1 fa5a 	bl	294c <__aeabi_f2d>
   11498:	4a5d      	ldr	r2, [pc, #372]	; (11610 <powf+0x2e8>)
   1149a:	4b5e      	ldr	r3, [pc, #376]	; (11614 <powf+0x2ec>)
   1149c:	61ba      	str	r2, [r7, #24]
   1149e:	61fb      	str	r3, [r7, #28]
   114a0:	2300      	movs	r3, #0
   114a2:	56f3      	ldrsb	r3, [r6, r3]
   114a4:	6138      	str	r0, [r7, #16]
   114a6:	6179      	str	r1, [r7, #20]
   114a8:	2b02      	cmp	r3, #2
   114aa:	d07a      	beq.n	115a2 <powf+0x27a>
   114ac:	4668      	mov	r0, sp
   114ae:	f001 fcd3 	bl	12e58 <matherr>
   114b2:	2800      	cmp	r0, #0
   114b4:	d075      	beq.n	115a2 <powf+0x27a>
   114b6:	6a3b      	ldr	r3, [r7, #32]
   114b8:	2b00      	cmp	r3, #0
   114ba:	d100      	bne.n	114be <powf+0x196>
   114bc:	e783      	b.n	113c6 <powf+0x9e>
   114be:	e7bc      	b.n	1143a <powf+0x112>
   114c0:	1c20      	adds	r0, r4, #0
   114c2:	f001 fd83 	bl	12fcc <finitef>
   114c6:	2800      	cmp	r0, #0
   114c8:	d100      	bne.n	114cc <powf+0x1a4>
   114ca:	e742      	b.n	11352 <powf+0x2a>
   114cc:	1c20      	adds	r0, r4, #0
   114ce:	2100      	movs	r1, #0
   114d0:	f7ef f8e8 	bl	6a4 <__aeabi_fcmplt>
   114d4:	2800      	cmp	r0, #0
   114d6:	d100      	bne.n	114da <powf+0x1b2>
   114d8:	e73b      	b.n	11352 <powf+0x2a>
   114da:	2301      	movs	r3, #1
   114dc:	9300      	str	r3, [sp, #0]
   114de:	4b53      	ldr	r3, [pc, #332]	; (1162c <powf+0x304>)
   114e0:	1c28      	adds	r0, r5, #0
   114e2:	9301      	str	r3, [sp, #4]
   114e4:	4643      	mov	r3, r8
   114e6:	9308      	str	r3, [sp, #32]
   114e8:	f7f1 fa30 	bl	294c <__aeabi_f2d>
   114ec:	466f      	mov	r7, sp
   114ee:	60b8      	str	r0, [r7, #8]
   114f0:	60f9      	str	r1, [r7, #12]
   114f2:	1c20      	adds	r0, r4, #0
   114f4:	f7f1 fa2a 	bl	294c <__aeabi_f2d>
   114f8:	6138      	str	r0, [r7, #16]
   114fa:	6179      	str	r1, [r7, #20]
   114fc:	7831      	ldrb	r1, [r6, #0]
   114fe:	2900      	cmp	r1, #0
   11500:	d04a      	beq.n	11598 <powf+0x270>
   11502:	4a45      	ldr	r2, [pc, #276]	; (11618 <powf+0x2f0>)
   11504:	4b45      	ldr	r3, [pc, #276]	; (1161c <powf+0x2f4>)
   11506:	61ba      	str	r2, [r7, #24]
   11508:	61fb      	str	r3, [r7, #28]
   1150a:	2902      	cmp	r1, #2
   1150c:	d134      	bne.n	11578 <powf+0x250>
   1150e:	f001 fe41 	bl	13194 <__errno>
   11512:	2321      	movs	r3, #33	; 0x21
   11514:	6003      	str	r3, [r0, #0]
   11516:	6a3a      	ldr	r2, [r7, #32]
   11518:	2a00      	cmp	r2, #0
   1151a:	d100      	bne.n	1151e <powf+0x1f6>
   1151c:	e753      	b.n	113c6 <powf+0x9e>
   1151e:	e74e      	b.n	113be <powf+0x96>
   11520:	1c28      	adds	r0, r5, #0
   11522:	f001 fd53 	bl	12fcc <finitef>
   11526:	2800      	cmp	r0, #0
   11528:	d092      	beq.n	11450 <powf+0x128>
   1152a:	1c20      	adds	r0, r4, #0
   1152c:	f001 fd4e 	bl	12fcc <finitef>
   11530:	2800      	cmp	r0, #0
   11532:	d08d      	beq.n	11450 <powf+0x128>
   11534:	4640      	mov	r0, r8
   11536:	f001 fd9f 	bl	13078 <__fpclassifyf>
   1153a:	466f      	mov	r7, sp
   1153c:	2800      	cmp	r0, #0
   1153e:	d135      	bne.n	115ac <powf+0x284>
   11540:	2301      	movs	r3, #1
   11542:	9300      	str	r3, [sp, #0]
   11544:	4b39      	ldr	r3, [pc, #228]	; (1162c <powf+0x304>)
   11546:	9008      	str	r0, [sp, #32]
   11548:	1c28      	adds	r0, r5, #0
   1154a:	9301      	str	r3, [sp, #4]
   1154c:	f7f1 f9fe 	bl	294c <__aeabi_f2d>
   11550:	60b8      	str	r0, [r7, #8]
   11552:	60f9      	str	r1, [r7, #12]
   11554:	1c20      	adds	r0, r4, #0
   11556:	f7f1 f9f9 	bl	294c <__aeabi_f2d>
   1155a:	7834      	ldrb	r4, [r6, #0]
   1155c:	6138      	str	r0, [r7, #16]
   1155e:	6179      	str	r1, [r7, #20]
   11560:	2c00      	cmp	r4, #0
   11562:	d019      	beq.n	11598 <powf+0x270>
   11564:	482a      	ldr	r0, [pc, #168]	; (11610 <powf+0x2e8>)
   11566:	492b      	ldr	r1, [pc, #172]	; (11614 <powf+0x2ec>)
   11568:	1c02      	adds	r2, r0, #0
   1156a:	1c0b      	adds	r3, r1, #0
   1156c:	f7f0 fa50 	bl	1a10 <__aeabi_ddiv>
   11570:	61b8      	str	r0, [r7, #24]
   11572:	61f9      	str	r1, [r7, #28]
   11574:	2c02      	cmp	r4, #2
   11576:	d0ca      	beq.n	1150e <powf+0x1e6>
   11578:	4668      	mov	r0, sp
   1157a:	f001 fc6d 	bl	12e58 <matherr>
   1157e:	2800      	cmp	r0, #0
   11580:	d1c9      	bne.n	11516 <powf+0x1ee>
   11582:	e7c4      	b.n	1150e <powf+0x1e6>
   11584:	f001 fe06 	bl	13194 <__errno>
   11588:	2321      	movs	r3, #33	; 0x21
   1158a:	6003      	str	r3, [r0, #0]
   1158c:	e714      	b.n	113b8 <powf+0x90>
   1158e:	f001 fe01 	bl	13194 <__errno>
   11592:	2321      	movs	r3, #33	; 0x21
   11594:	6003      	str	r3, [r0, #0]
   11596:	e74d      	b.n	11434 <powf+0x10c>
   11598:	4a1d      	ldr	r2, [pc, #116]	; (11610 <powf+0x2e8>)
   1159a:	4b1e      	ldr	r3, [pc, #120]	; (11614 <powf+0x2ec>)
   1159c:	61ba      	str	r2, [r7, #24]
   1159e:	61fb      	str	r3, [r7, #28]
   115a0:	e7ea      	b.n	11578 <powf+0x250>
   115a2:	f001 fdf7 	bl	13194 <__errno>
   115a6:	2322      	movs	r3, #34	; 0x22
   115a8:	6003      	str	r3, [r0, #0]
   115aa:	e784      	b.n	114b6 <powf+0x18e>
   115ac:	2303      	movs	r3, #3
   115ae:	9300      	str	r3, [sp, #0]
   115b0:	4b1e      	ldr	r3, [pc, #120]	; (1162c <powf+0x304>)
   115b2:	464a      	mov	r2, r9
   115b4:	1c28      	adds	r0, r5, #0
   115b6:	9301      	str	r3, [sp, #4]
   115b8:	9208      	str	r2, [sp, #32]
   115ba:	f7f1 f9c7 	bl	294c <__aeabi_f2d>
   115be:	60b8      	str	r0, [r7, #8]
   115c0:	60f9      	str	r1, [r7, #12]
   115c2:	1c20      	adds	r0, r4, #0
   115c4:	f7f1 f9c2 	bl	294c <__aeabi_f2d>
   115c8:	2300      	movs	r3, #0
   115ca:	56f3      	ldrsb	r3, [r6, r3]
   115cc:	6138      	str	r0, [r7, #16]
   115ce:	6179      	str	r1, [r7, #20]
   115d0:	2b00      	cmp	r3, #0
   115d2:	d12d      	bne.n	11630 <powf+0x308>
   115d4:	4a12      	ldr	r2, [pc, #72]	; (11620 <powf+0x2f8>)
   115d6:	4b13      	ldr	r3, [pc, #76]	; (11624 <powf+0x2fc>)
   115d8:	1c28      	adds	r0, r5, #0
   115da:	61ba      	str	r2, [r7, #24]
   115dc:	61fb      	str	r3, [r7, #28]
   115de:	2100      	movs	r1, #0
   115e0:	f7ef f860 	bl	6a4 <__aeabi_fcmplt>
   115e4:	2800      	cmp	r0, #0
   115e6:	d145      	bne.n	11674 <powf+0x34c>
   115e8:	2300      	movs	r3, #0
   115ea:	56f3      	ldrsb	r3, [r6, r3]
   115ec:	2b02      	cmp	r3, #2
   115ee:	d005      	beq.n	115fc <powf+0x2d4>
   115f0:	4668      	mov	r0, sp
   115f2:	f001 fc31 	bl	12e58 <matherr>
   115f6:	2800      	cmp	r0, #0
   115f8:	d000      	beq.n	115fc <powf+0x2d4>
   115fa:	e71b      	b.n	11434 <powf+0x10c>
   115fc:	f001 fdca 	bl	13194 <__errno>
   11600:	2322      	movs	r3, #34	; 0x22
   11602:	6003      	str	r3, [r0, #0]
   11604:	e716      	b.n	11434 <powf+0x10c>
   11606:	46c0      	nop			; (mov r8, r8)
   11608:	00000000 	.word	0x00000000
   1160c:	3ff00000 	.word	0x3ff00000
	...
   1161c:	fff00000 	.word	0xfff00000
   11620:	e0000000 	.word	0xe0000000
   11624:	47efffff 	.word	0x47efffff
   11628:	1fffe018 	.word	0x1fffe018
   1162c:	000134c8 	.word	0x000134c8
   11630:	4b1e      	ldr	r3, [pc, #120]	; (116ac <powf+0x384>)
   11632:	4a1d      	ldr	r2, [pc, #116]	; (116a8 <powf+0x380>)
   11634:	1c28      	adds	r0, r5, #0
   11636:	61ba      	str	r2, [r7, #24]
   11638:	61fb      	str	r3, [r7, #28]
   1163a:	2100      	movs	r1, #0
   1163c:	f7ef f832 	bl	6a4 <__aeabi_fcmplt>
   11640:	2800      	cmp	r0, #0
   11642:	d0d1      	beq.n	115e8 <powf+0x2c0>
   11644:	21fc      	movs	r1, #252	; 0xfc
   11646:	1c20      	adds	r0, r4, #0
   11648:	0589      	lsls	r1, r1, #22
   1164a:	f7ef fba3 	bl	d94 <__aeabi_fmul>
   1164e:	f7f1 f97d 	bl	294c <__aeabi_f2d>
   11652:	1c04      	adds	r4, r0, #0
   11654:	1c0d      	adds	r5, r1, #0
   11656:	f001 fc0b 	bl	12e70 <rint>
   1165a:	1c02      	adds	r2, r0, #0
   1165c:	1c0b      	adds	r3, r1, #0
   1165e:	1c20      	adds	r0, r4, #0
   11660:	1c29      	adds	r1, r5, #0
   11662:	f7ee ffdf 	bl	624 <__aeabi_dcmpeq>
   11666:	2800      	cmp	r0, #0
   11668:	d1be      	bne.n	115e8 <powf+0x2c0>
   1166a:	4a11      	ldr	r2, [pc, #68]	; (116b0 <powf+0x388>)
   1166c:	4b11      	ldr	r3, [pc, #68]	; (116b4 <powf+0x38c>)
   1166e:	61ba      	str	r2, [r7, #24]
   11670:	61fb      	str	r3, [r7, #28]
   11672:	e7b9      	b.n	115e8 <powf+0x2c0>
   11674:	21fc      	movs	r1, #252	; 0xfc
   11676:	1c20      	adds	r0, r4, #0
   11678:	0589      	lsls	r1, r1, #22
   1167a:	f7ef fb8b 	bl	d94 <__aeabi_fmul>
   1167e:	f7f1 f965 	bl	294c <__aeabi_f2d>
   11682:	1c04      	adds	r4, r0, #0
   11684:	1c0d      	adds	r5, r1, #0
   11686:	f001 fbf3 	bl	12e70 <rint>
   1168a:	1c02      	adds	r2, r0, #0
   1168c:	1c0b      	adds	r3, r1, #0
   1168e:	1c20      	adds	r0, r4, #0
   11690:	1c29      	adds	r1, r5, #0
   11692:	f7ee ffc7 	bl	624 <__aeabi_dcmpeq>
   11696:	2800      	cmp	r0, #0
   11698:	d1a6      	bne.n	115e8 <powf+0x2c0>
   1169a:	4a07      	ldr	r2, [pc, #28]	; (116b8 <powf+0x390>)
   1169c:	4b07      	ldr	r3, [pc, #28]	; (116bc <powf+0x394>)
   1169e:	61ba      	str	r2, [r7, #24]
   116a0:	61fb      	str	r3, [r7, #28]
   116a2:	e7a1      	b.n	115e8 <powf+0x2c0>
   116a4:	46c0      	nop			; (mov r8, r8)
   116a6:	46c0      	nop			; (mov r8, r8)
   116a8:	00000000 	.word	0x00000000
   116ac:	7ff00000 	.word	0x7ff00000
   116b0:	00000000 	.word	0x00000000
   116b4:	fff00000 	.word	0xfff00000
   116b8:	e0000000 	.word	0xe0000000
   116bc:	c7efffff 	.word	0xc7efffff

000116c0 <sqrtf>:
sqrtf():
   116c0:	b570      	push	{r4, r5, r6, lr}
   116c2:	b08a      	sub	sp, #40	; 0x28
   116c4:	1c04      	adds	r4, r0, #0
   116c6:	f000 fec7 	bl	12458 <__ieee754_sqrtf>
   116ca:	4e27      	ldr	r6, [pc, #156]	; (11768 <sqrtf+0xa8>)
   116cc:	2300      	movs	r3, #0
   116ce:	56f3      	ldrsb	r3, [r6, r3]
   116d0:	1c05      	adds	r5, r0, #0
   116d2:	3301      	adds	r3, #1
   116d4:	d00a      	beq.n	116ec <sqrtf+0x2c>
   116d6:	1c20      	adds	r0, r4, #0
   116d8:	f001 fcce 	bl	13078 <__fpclassifyf>
   116dc:	2800      	cmp	r0, #0
   116de:	d005      	beq.n	116ec <sqrtf+0x2c>
   116e0:	1c20      	adds	r0, r4, #0
   116e2:	2100      	movs	r1, #0
   116e4:	f7ee ffde 	bl	6a4 <__aeabi_fcmplt>
   116e8:	2800      	cmp	r0, #0
   116ea:	d102      	bne.n	116f2 <sqrtf+0x32>
   116ec:	1c28      	adds	r0, r5, #0
   116ee:	b00a      	add	sp, #40	; 0x28
   116f0:	bd70      	pop	{r4, r5, r6, pc}
   116f2:	2301      	movs	r3, #1
   116f4:	9300      	str	r3, [sp, #0]
   116f6:	4b1d      	ldr	r3, [pc, #116]	; (1176c <sqrtf+0xac>)
   116f8:	1c20      	adds	r0, r4, #0
   116fa:	9301      	str	r3, [sp, #4]
   116fc:	2300      	movs	r3, #0
   116fe:	9308      	str	r3, [sp, #32]
   11700:	f7f1 f924 	bl	294c <__aeabi_f2d>
   11704:	7834      	ldrb	r4, [r6, #0]
   11706:	9004      	str	r0, [sp, #16]
   11708:	9105      	str	r1, [sp, #20]
   1170a:	9002      	str	r0, [sp, #8]
   1170c:	9103      	str	r1, [sp, #12]
   1170e:	2c00      	cmp	r4, #0
   11710:	d111      	bne.n	11736 <sqrtf+0x76>
   11712:	4b14      	ldr	r3, [pc, #80]	; (11764 <sqrtf+0xa4>)
   11714:	4a12      	ldr	r2, [pc, #72]	; (11760 <sqrtf+0xa0>)
   11716:	9206      	str	r2, [sp, #24]
   11718:	9307      	str	r3, [sp, #28]
   1171a:	4668      	mov	r0, sp
   1171c:	f001 fb9c 	bl	12e58 <matherr>
   11720:	2800      	cmp	r0, #0
   11722:	d012      	beq.n	1174a <sqrtf+0x8a>
   11724:	9b08      	ldr	r3, [sp, #32]
   11726:	2b00      	cmp	r3, #0
   11728:	d114      	bne.n	11754 <sqrtf+0x94>
   1172a:	9806      	ldr	r0, [sp, #24]
   1172c:	9907      	ldr	r1, [sp, #28]
   1172e:	f7f1 f95f 	bl	29f0 <__aeabi_d2f>
   11732:	1c05      	adds	r5, r0, #0
   11734:	e7da      	b.n	116ec <sqrtf+0x2c>
   11736:	490b      	ldr	r1, [pc, #44]	; (11764 <sqrtf+0xa4>)
   11738:	4809      	ldr	r0, [pc, #36]	; (11760 <sqrtf+0xa0>)
   1173a:	1c02      	adds	r2, r0, #0
   1173c:	1c0b      	adds	r3, r1, #0
   1173e:	f7f0 f967 	bl	1a10 <__aeabi_ddiv>
   11742:	9006      	str	r0, [sp, #24]
   11744:	9107      	str	r1, [sp, #28]
   11746:	2c02      	cmp	r4, #2
   11748:	d1e7      	bne.n	1171a <sqrtf+0x5a>
   1174a:	f001 fd23 	bl	13194 <__errno>
   1174e:	2321      	movs	r3, #33	; 0x21
   11750:	6003      	str	r3, [r0, #0]
   11752:	e7e7      	b.n	11724 <sqrtf+0x64>
   11754:	f001 fd1e 	bl	13194 <__errno>
   11758:	9b08      	ldr	r3, [sp, #32]
   1175a:	6003      	str	r3, [r0, #0]
   1175c:	e7e5      	b.n	1172a <sqrtf+0x6a>
   1175e:	46c0      	nop			; (mov r8, r8)
	...
   11768:	1fffe018 	.word	0x1fffe018
   1176c:	000134d0 	.word	0x000134d0

00011770 <__ieee754_acosf>:
__ieee754_acosf():
   11770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11772:	22fe      	movs	r2, #254	; 0xfe
   11774:	0043      	lsls	r3, r0, #1
   11776:	1c04      	adds	r4, r0, #0
   11778:	085b      	lsrs	r3, r3, #1
   1177a:	0592      	lsls	r2, r2, #22
   1177c:	4293      	cmp	r3, r2
   1177e:	d011      	beq.n	117a4 <__ieee754_acosf+0x34>
   11780:	dc09      	bgt.n	11796 <__ieee754_acosf+0x26>
   11782:	4aa0      	ldr	r2, [pc, #640]	; (11a04 <__ieee754_acosf+0x294>)
   11784:	4293      	cmp	r3, r2
   11786:	dc12      	bgt.n	117ae <__ieee754_acosf+0x3e>
   11788:	228c      	movs	r2, #140	; 0x8c
   1178a:	0592      	lsls	r2, r2, #22
   1178c:	4293      	cmp	r3, r2
   1178e:	dd00      	ble.n	11792 <__ieee754_acosf+0x22>
   11790:	e081      	b.n	11896 <__ieee754_acosf+0x126>
   11792:	489d      	ldr	r0, [pc, #628]	; (11a08 <__ieee754_acosf+0x298>)
   11794:	e005      	b.n	117a2 <__ieee754_acosf+0x32>
   11796:	1c21      	adds	r1, r4, #0
   11798:	f7ef fc26 	bl	fe8 <__aeabi_fsub>
   1179c:	1c01      	adds	r1, r0, #0
   1179e:	f7ef f915 	bl	9cc <__aeabi_fdiv>
   117a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   117a4:	2800      	cmp	r0, #0
   117a6:	dc00      	bgt.n	117aa <__ieee754_acosf+0x3a>
   117a8:	e0ca      	b.n	11940 <__ieee754_acosf+0x1d0>
   117aa:	2000      	movs	r0, #0
   117ac:	e7f9      	b.n	117a2 <__ieee754_acosf+0x32>
   117ae:	2800      	cmp	r0, #0
   117b0:	da00      	bge.n	117b4 <__ieee754_acosf+0x44>
   117b2:	e0c7      	b.n	11944 <__ieee754_acosf+0x1d4>
   117b4:	20fe      	movs	r0, #254	; 0xfe
   117b6:	1c21      	adds	r1, r4, #0
   117b8:	0580      	lsls	r0, r0, #22
   117ba:	f7ef fc15 	bl	fe8 <__aeabi_fsub>
   117be:	21fc      	movs	r1, #252	; 0xfc
   117c0:	0589      	lsls	r1, r1, #22
   117c2:	f7ef fae7 	bl	d94 <__aeabi_fmul>
   117c6:	1c04      	adds	r4, r0, #0
   117c8:	f000 fe46 	bl	12458 <__ieee754_sqrtf>
   117cc:	498f      	ldr	r1, [pc, #572]	; (11a0c <__ieee754_acosf+0x29c>)
   117ce:	1c06      	adds	r6, r0, #0
   117d0:	0b05      	lsrs	r5, r0, #12
   117d2:	1c20      	adds	r0, r4, #0
   117d4:	f7ef fade 	bl	d94 <__aeabi_fmul>
   117d8:	498d      	ldr	r1, [pc, #564]	; (11a10 <__ieee754_acosf+0x2a0>)
   117da:	f7ee ff8b 	bl	6f4 <__aeabi_fadd>
   117de:	1c21      	adds	r1, r4, #0
   117e0:	f7ef fad8 	bl	d94 <__aeabi_fmul>
   117e4:	498b      	ldr	r1, [pc, #556]	; (11a14 <__ieee754_acosf+0x2a4>)
   117e6:	f7ef fbff 	bl	fe8 <__aeabi_fsub>
   117ea:	1c21      	adds	r1, r4, #0
   117ec:	f7ef fad2 	bl	d94 <__aeabi_fmul>
   117f0:	4989      	ldr	r1, [pc, #548]	; (11a18 <__ieee754_acosf+0x2a8>)
   117f2:	f7ee ff7f 	bl	6f4 <__aeabi_fadd>
   117f6:	1c21      	adds	r1, r4, #0
   117f8:	f7ef facc 	bl	d94 <__aeabi_fmul>
   117fc:	4987      	ldr	r1, [pc, #540]	; (11a1c <__ieee754_acosf+0x2ac>)
   117fe:	f7ef fbf3 	bl	fe8 <__aeabi_fsub>
   11802:	1c21      	adds	r1, r4, #0
   11804:	f7ef fac6 	bl	d94 <__aeabi_fmul>
   11808:	4985      	ldr	r1, [pc, #532]	; (11a20 <__ieee754_acosf+0x2b0>)
   1180a:	f7ee ff73 	bl	6f4 <__aeabi_fadd>
   1180e:	1c21      	adds	r1, r4, #0
   11810:	f7ef fac0 	bl	d94 <__aeabi_fmul>
   11814:	4983      	ldr	r1, [pc, #524]	; (11a24 <__ieee754_acosf+0x2b4>)
   11816:	1c07      	adds	r7, r0, #0
   11818:	1c20      	adds	r0, r4, #0
   1181a:	f7ef fabb 	bl	d94 <__aeabi_fmul>
   1181e:	4982      	ldr	r1, [pc, #520]	; (11a28 <__ieee754_acosf+0x2b8>)
   11820:	f7ef fbe2 	bl	fe8 <__aeabi_fsub>
   11824:	1c21      	adds	r1, r4, #0
   11826:	f7ef fab5 	bl	d94 <__aeabi_fmul>
   1182a:	4980      	ldr	r1, [pc, #512]	; (11a2c <__ieee754_acosf+0x2bc>)
   1182c:	f7ee ff62 	bl	6f4 <__aeabi_fadd>
   11830:	1c21      	adds	r1, r4, #0
   11832:	f7ef faaf 	bl	d94 <__aeabi_fmul>
   11836:	497e      	ldr	r1, [pc, #504]	; (11a30 <__ieee754_acosf+0x2c0>)
   11838:	f7ef fbd6 	bl	fe8 <__aeabi_fsub>
   1183c:	1c21      	adds	r1, r4, #0
   1183e:	f7ef faa9 	bl	d94 <__aeabi_fmul>
   11842:	21fe      	movs	r1, #254	; 0xfe
   11844:	0589      	lsls	r1, r1, #22
   11846:	f7ee ff55 	bl	6f4 <__aeabi_fadd>
   1184a:	1c01      	adds	r1, r0, #0
   1184c:	1c38      	adds	r0, r7, #0
   1184e:	f7ef f8bd 	bl	9cc <__aeabi_fdiv>
   11852:	1c31      	adds	r1, r6, #0
   11854:	f7ef fa9e 	bl	d94 <__aeabi_fmul>
   11858:	032d      	lsls	r5, r5, #12
   1185a:	1c07      	adds	r7, r0, #0
   1185c:	1c29      	adds	r1, r5, #0
   1185e:	1c28      	adds	r0, r5, #0
   11860:	f7ef fa98 	bl	d94 <__aeabi_fmul>
   11864:	1c01      	adds	r1, r0, #0
   11866:	1c20      	adds	r0, r4, #0
   11868:	f7ef fbbe 	bl	fe8 <__aeabi_fsub>
   1186c:	1c29      	adds	r1, r5, #0
   1186e:	1c04      	adds	r4, r0, #0
   11870:	1c30      	adds	r0, r6, #0
   11872:	f7ee ff3f 	bl	6f4 <__aeabi_fadd>
   11876:	1c01      	adds	r1, r0, #0
   11878:	1c20      	adds	r0, r4, #0
   1187a:	f7ef f8a7 	bl	9cc <__aeabi_fdiv>
   1187e:	1c01      	adds	r1, r0, #0
   11880:	1c38      	adds	r0, r7, #0
   11882:	f7ee ff37 	bl	6f4 <__aeabi_fadd>
   11886:	1c01      	adds	r1, r0, #0
   11888:	1c28      	adds	r0, r5, #0
   1188a:	f7ee ff33 	bl	6f4 <__aeabi_fadd>
   1188e:	1c01      	adds	r1, r0, #0
   11890:	f7ee ff30 	bl	6f4 <__aeabi_fadd>
   11894:	e785      	b.n	117a2 <__ieee754_acosf+0x32>
   11896:	1c21      	adds	r1, r4, #0
   11898:	f7ef fa7c 	bl	d94 <__aeabi_fmul>
   1189c:	495b      	ldr	r1, [pc, #364]	; (11a0c <__ieee754_acosf+0x29c>)
   1189e:	1c05      	adds	r5, r0, #0
   118a0:	f7ef fa78 	bl	d94 <__aeabi_fmul>
   118a4:	495a      	ldr	r1, [pc, #360]	; (11a10 <__ieee754_acosf+0x2a0>)
   118a6:	f7ee ff25 	bl	6f4 <__aeabi_fadd>
   118aa:	1c29      	adds	r1, r5, #0
   118ac:	f7ef fa72 	bl	d94 <__aeabi_fmul>
   118b0:	4958      	ldr	r1, [pc, #352]	; (11a14 <__ieee754_acosf+0x2a4>)
   118b2:	f7ef fb99 	bl	fe8 <__aeabi_fsub>
   118b6:	1c29      	adds	r1, r5, #0
   118b8:	f7ef fa6c 	bl	d94 <__aeabi_fmul>
   118bc:	4956      	ldr	r1, [pc, #344]	; (11a18 <__ieee754_acosf+0x2a8>)
   118be:	f7ee ff19 	bl	6f4 <__aeabi_fadd>
   118c2:	1c29      	adds	r1, r5, #0
   118c4:	f7ef fa66 	bl	d94 <__aeabi_fmul>
   118c8:	4954      	ldr	r1, [pc, #336]	; (11a1c <__ieee754_acosf+0x2ac>)
   118ca:	f7ef fb8d 	bl	fe8 <__aeabi_fsub>
   118ce:	1c29      	adds	r1, r5, #0
   118d0:	f7ef fa60 	bl	d94 <__aeabi_fmul>
   118d4:	4952      	ldr	r1, [pc, #328]	; (11a20 <__ieee754_acosf+0x2b0>)
   118d6:	f7ee ff0d 	bl	6f4 <__aeabi_fadd>
   118da:	1c29      	adds	r1, r5, #0
   118dc:	f7ef fa5a 	bl	d94 <__aeabi_fmul>
   118e0:	4950      	ldr	r1, [pc, #320]	; (11a24 <__ieee754_acosf+0x2b4>)
   118e2:	1c06      	adds	r6, r0, #0
   118e4:	1c28      	adds	r0, r5, #0
   118e6:	f7ef fa55 	bl	d94 <__aeabi_fmul>
   118ea:	494f      	ldr	r1, [pc, #316]	; (11a28 <__ieee754_acosf+0x2b8>)
   118ec:	f7ef fb7c 	bl	fe8 <__aeabi_fsub>
   118f0:	1c29      	adds	r1, r5, #0
   118f2:	f7ef fa4f 	bl	d94 <__aeabi_fmul>
   118f6:	494d      	ldr	r1, [pc, #308]	; (11a2c <__ieee754_acosf+0x2bc>)
   118f8:	f7ee fefc 	bl	6f4 <__aeabi_fadd>
   118fc:	1c29      	adds	r1, r5, #0
   118fe:	f7ef fa49 	bl	d94 <__aeabi_fmul>
   11902:	494b      	ldr	r1, [pc, #300]	; (11a30 <__ieee754_acosf+0x2c0>)
   11904:	f7ef fb70 	bl	fe8 <__aeabi_fsub>
   11908:	1c29      	adds	r1, r5, #0
   1190a:	f7ef fa43 	bl	d94 <__aeabi_fmul>
   1190e:	21fe      	movs	r1, #254	; 0xfe
   11910:	0589      	lsls	r1, r1, #22
   11912:	f7ee feef 	bl	6f4 <__aeabi_fadd>
   11916:	1c01      	adds	r1, r0, #0
   11918:	1c30      	adds	r0, r6, #0
   1191a:	f7ef f857 	bl	9cc <__aeabi_fdiv>
   1191e:	1c01      	adds	r1, r0, #0
   11920:	1c20      	adds	r0, r4, #0
   11922:	f7ef fa37 	bl	d94 <__aeabi_fmul>
   11926:	1c01      	adds	r1, r0, #0
   11928:	4842      	ldr	r0, [pc, #264]	; (11a34 <__ieee754_acosf+0x2c4>)
   1192a:	f7ef fb5d 	bl	fe8 <__aeabi_fsub>
   1192e:	1c01      	adds	r1, r0, #0
   11930:	1c20      	adds	r0, r4, #0
   11932:	f7ef fb59 	bl	fe8 <__aeabi_fsub>
   11936:	1c01      	adds	r1, r0, #0
   11938:	483f      	ldr	r0, [pc, #252]	; (11a38 <__ieee754_acosf+0x2c8>)
   1193a:	f7ef fb55 	bl	fe8 <__aeabi_fsub>
   1193e:	e730      	b.n	117a2 <__ieee754_acosf+0x32>
   11940:	483e      	ldr	r0, [pc, #248]	; (11a3c <__ieee754_acosf+0x2cc>)
   11942:	e72e      	b.n	117a2 <__ieee754_acosf+0x32>
   11944:	21fe      	movs	r1, #254	; 0xfe
   11946:	0589      	lsls	r1, r1, #22
   11948:	f7ee fed4 	bl	6f4 <__aeabi_fadd>
   1194c:	21fc      	movs	r1, #252	; 0xfc
   1194e:	0589      	lsls	r1, r1, #22
   11950:	f7ef fa20 	bl	d94 <__aeabi_fmul>
   11954:	492d      	ldr	r1, [pc, #180]	; (11a0c <__ieee754_acosf+0x29c>)
   11956:	1c04      	adds	r4, r0, #0
   11958:	f7ef fa1c 	bl	d94 <__aeabi_fmul>
   1195c:	492c      	ldr	r1, [pc, #176]	; (11a10 <__ieee754_acosf+0x2a0>)
   1195e:	f7ee fec9 	bl	6f4 <__aeabi_fadd>
   11962:	1c21      	adds	r1, r4, #0
   11964:	f7ef fa16 	bl	d94 <__aeabi_fmul>
   11968:	492a      	ldr	r1, [pc, #168]	; (11a14 <__ieee754_acosf+0x2a4>)
   1196a:	f7ef fb3d 	bl	fe8 <__aeabi_fsub>
   1196e:	1c21      	adds	r1, r4, #0
   11970:	f7ef fa10 	bl	d94 <__aeabi_fmul>
   11974:	4928      	ldr	r1, [pc, #160]	; (11a18 <__ieee754_acosf+0x2a8>)
   11976:	f7ee febd 	bl	6f4 <__aeabi_fadd>
   1197a:	1c21      	adds	r1, r4, #0
   1197c:	f7ef fa0a 	bl	d94 <__aeabi_fmul>
   11980:	4926      	ldr	r1, [pc, #152]	; (11a1c <__ieee754_acosf+0x2ac>)
   11982:	f7ef fb31 	bl	fe8 <__aeabi_fsub>
   11986:	1c21      	adds	r1, r4, #0
   11988:	f7ef fa04 	bl	d94 <__aeabi_fmul>
   1198c:	4924      	ldr	r1, [pc, #144]	; (11a20 <__ieee754_acosf+0x2b0>)
   1198e:	f7ee feb1 	bl	6f4 <__aeabi_fadd>
   11992:	1c21      	adds	r1, r4, #0
   11994:	f7ef f9fe 	bl	d94 <__aeabi_fmul>
   11998:	1c06      	adds	r6, r0, #0
   1199a:	1c20      	adds	r0, r4, #0
   1199c:	f000 fd5c 	bl	12458 <__ieee754_sqrtf>
   119a0:	4920      	ldr	r1, [pc, #128]	; (11a24 <__ieee754_acosf+0x2b4>)
   119a2:	1c05      	adds	r5, r0, #0
   119a4:	1c20      	adds	r0, r4, #0
   119a6:	f7ef f9f5 	bl	d94 <__aeabi_fmul>
   119aa:	491f      	ldr	r1, [pc, #124]	; (11a28 <__ieee754_acosf+0x2b8>)
   119ac:	f7ef fb1c 	bl	fe8 <__aeabi_fsub>
   119b0:	1c21      	adds	r1, r4, #0
   119b2:	f7ef f9ef 	bl	d94 <__aeabi_fmul>
   119b6:	491d      	ldr	r1, [pc, #116]	; (11a2c <__ieee754_acosf+0x2bc>)
   119b8:	f7ee fe9c 	bl	6f4 <__aeabi_fadd>
   119bc:	1c21      	adds	r1, r4, #0
   119be:	f7ef f9e9 	bl	d94 <__aeabi_fmul>
   119c2:	491b      	ldr	r1, [pc, #108]	; (11a30 <__ieee754_acosf+0x2c0>)
   119c4:	f7ef fb10 	bl	fe8 <__aeabi_fsub>
   119c8:	1c21      	adds	r1, r4, #0
   119ca:	f7ef f9e3 	bl	d94 <__aeabi_fmul>
   119ce:	21fe      	movs	r1, #254	; 0xfe
   119d0:	0589      	lsls	r1, r1, #22
   119d2:	f7ee fe8f 	bl	6f4 <__aeabi_fadd>
   119d6:	1c01      	adds	r1, r0, #0
   119d8:	1c30      	adds	r0, r6, #0
   119da:	f7ee fff7 	bl	9cc <__aeabi_fdiv>
   119de:	1c29      	adds	r1, r5, #0
   119e0:	f7ef f9d8 	bl	d94 <__aeabi_fmul>
   119e4:	4913      	ldr	r1, [pc, #76]	; (11a34 <__ieee754_acosf+0x2c4>)
   119e6:	f7ef faff 	bl	fe8 <__aeabi_fsub>
   119ea:	1c01      	adds	r1, r0, #0
   119ec:	1c28      	adds	r0, r5, #0
   119ee:	f7ee fe81 	bl	6f4 <__aeabi_fadd>
   119f2:	1c01      	adds	r1, r0, #0
   119f4:	f7ee fe7e 	bl	6f4 <__aeabi_fadd>
   119f8:	1c01      	adds	r1, r0, #0
   119fa:	4811      	ldr	r0, [pc, #68]	; (11a40 <__ieee754_acosf+0x2d0>)
   119fc:	f7ef faf4 	bl	fe8 <__aeabi_fsub>
   11a00:	e6cf      	b.n	117a2 <__ieee754_acosf+0x32>
   11a02:	46c0      	nop			; (mov r8, r8)
   11a04:	3effffff 	.word	0x3effffff
   11a08:	3fc90fdb 	.word	0x3fc90fdb
   11a0c:	3811ef08 	.word	0x3811ef08
   11a10:	3a4f7f04 	.word	0x3a4f7f04
   11a14:	3d241146 	.word	0x3d241146
   11a18:	3e4e0aa8 	.word	0x3e4e0aa8
   11a1c:	3ea6b090 	.word	0x3ea6b090
   11a20:	3e2aaaab 	.word	0x3e2aaaab
   11a24:	3d9dc62e 	.word	0x3d9dc62e
   11a28:	3f303361 	.word	0x3f303361
   11a2c:	4001572d 	.word	0x4001572d
   11a30:	4019d139 	.word	0x4019d139
   11a34:	33a22168 	.word	0x33a22168
   11a38:	3fc90fda 	.word	0x3fc90fda
   11a3c:	40490fdb 	.word	0x40490fdb
   11a40:	40490fda 	.word	0x40490fda

00011a44 <__ieee754_powf>:
__ieee754_powf():
   11a44:	b5f0      	push	{r4, r5, r6, r7, lr}
   11a46:	465f      	mov	r7, fp
   11a48:	4656      	mov	r6, sl
   11a4a:	464d      	mov	r5, r9
   11a4c:	4644      	mov	r4, r8
   11a4e:	b4f0      	push	{r4, r5, r6, r7}
   11a50:	004e      	lsls	r6, r1, #1
   11a52:	b087      	sub	sp, #28
   11a54:	1c07      	adds	r7, r0, #0
   11a56:	1c0c      	adds	r4, r1, #0
   11a58:	4689      	mov	r9, r1
   11a5a:	0876      	lsrs	r6, r6, #1
   11a5c:	d011      	beq.n	11a82 <__ieee754_powf+0x3e>
   11a5e:	0043      	lsls	r3, r0, #1
   11a60:	085d      	lsrs	r5, r3, #1
   11a62:	23ff      	movs	r3, #255	; 0xff
   11a64:	4682      	mov	sl, r0
   11a66:	05db      	lsls	r3, r3, #23
   11a68:	429d      	cmp	r5, r3
   11a6a:	dd04      	ble.n	11a76 <__ieee754_powf+0x32>
   11a6c:	485d      	ldr	r0, [pc, #372]	; (11be4 <__ieee754_powf+0x1a0>)
   11a6e:	f001 fb21 	bl	130b4 <nanf>
   11a72:	1c01      	adds	r1, r0, #0
   11a74:	e007      	b.n	11a86 <__ieee754_powf+0x42>
   11a76:	429e      	cmp	r6, r3
   11a78:	dd0d      	ble.n	11a96 <__ieee754_powf+0x52>
   11a7a:	23fe      	movs	r3, #254	; 0xfe
   11a7c:	059b      	lsls	r3, r3, #22
   11a7e:	429d      	cmp	r5, r3
   11a80:	d1f4      	bne.n	11a6c <__ieee754_powf+0x28>
   11a82:	21fe      	movs	r1, #254	; 0xfe
   11a84:	0589      	lsls	r1, r1, #22
   11a86:	1c08      	adds	r0, r1, #0
   11a88:	b007      	add	sp, #28
   11a8a:	bc3c      	pop	{r2, r3, r4, r5}
   11a8c:	4690      	mov	r8, r2
   11a8e:	4699      	mov	r9, r3
   11a90:	46a2      	mov	sl, r4
   11a92:	46ab      	mov	fp, r5
   11a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a96:	2100      	movs	r1, #0
   11a98:	9100      	str	r1, [sp, #0]
   11a9a:	2800      	cmp	r0, #0
   11a9c:	db62      	blt.n	11b64 <__ieee754_powf+0x120>
   11a9e:	23ff      	movs	r3, #255	; 0xff
   11aa0:	05db      	lsls	r3, r3, #23
   11aa2:	429e      	cmp	r6, r3
   11aa4:	d053      	beq.n	11b4e <__ieee754_powf+0x10a>
   11aa6:	23fe      	movs	r3, #254	; 0xfe
   11aa8:	059b      	lsls	r3, r3, #22
   11aaa:	429e      	cmp	r6, r3
   11aac:	d06f      	beq.n	11b8e <__ieee754_powf+0x14a>
   11aae:	2380      	movs	r3, #128	; 0x80
   11ab0:	05db      	lsls	r3, r3, #23
   11ab2:	4599      	cmp	r9, r3
   11ab4:	d100      	bne.n	11ab8 <__ieee754_powf+0x74>
   11ab6:	e07f      	b.n	11bb8 <__ieee754_powf+0x174>
   11ab8:	23fc      	movs	r3, #252	; 0xfc
   11aba:	059b      	lsls	r3, r3, #22
   11abc:	1c38      	adds	r0, r7, #0
   11abe:	4599      	cmp	r9, r3
   11ac0:	d018      	beq.n	11af4 <__ieee754_powf+0xb0>
   11ac2:	f001 fa7f 	bl	12fc4 <fabsf>
   11ac6:	1c01      	adds	r1, r0, #0
   11ac8:	2d00      	cmp	r5, #0
   11aca:	d11a      	bne.n	11b02 <__ieee754_powf+0xbe>
   11acc:	464a      	mov	r2, r9
   11ace:	2a00      	cmp	r2, #0
   11ad0:	da00      	bge.n	11ad4 <__ieee754_powf+0x90>
   11ad2:	e080      	b.n	11bd6 <__ieee754_powf+0x192>
   11ad4:	4653      	mov	r3, sl
   11ad6:	2b00      	cmp	r3, #0
   11ad8:	dad5      	bge.n	11a86 <__ieee754_powf+0x42>
   11ada:	4a43      	ldr	r2, [pc, #268]	; (11be8 <__ieee754_powf+0x1a4>)
   11adc:	1c08      	adds	r0, r1, #0
   11ade:	18ab      	adds	r3, r5, r2
   11ae0:	9d00      	ldr	r5, [sp, #0]
   11ae2:	432b      	orrs	r3, r5
   11ae4:	d070      	beq.n	11bc8 <__ieee754_powf+0x184>
   11ae6:	9d00      	ldr	r5, [sp, #0]
   11ae8:	2d01      	cmp	r5, #1
   11aea:	d1cc      	bne.n	11a86 <__ieee754_powf+0x42>
   11aec:	2280      	movs	r2, #128	; 0x80
   11aee:	0612      	lsls	r2, r2, #24
   11af0:	1889      	adds	r1, r1, r2
   11af2:	e7c8      	b.n	11a86 <__ieee754_powf+0x42>
   11af4:	4651      	mov	r1, sl
   11af6:	2900      	cmp	r1, #0
   11af8:	dbe3      	blt.n	11ac2 <__ieee754_powf+0x7e>
   11afa:	f000 fcad 	bl	12458 <__ieee754_sqrtf>
   11afe:	1c01      	adds	r1, r0, #0
   11b00:	e7c1      	b.n	11a86 <__ieee754_powf+0x42>
   11b02:	00ba      	lsls	r2, r7, #2
   11b04:	23fe      	movs	r3, #254	; 0xfe
   11b06:	0892      	lsrs	r2, r2, #2
   11b08:	059b      	lsls	r3, r3, #22
   11b0a:	429a      	cmp	r2, r3
   11b0c:	d0de      	beq.n	11acc <__ieee754_powf+0x88>
   11b0e:	0ffb      	lsrs	r3, r7, #31
   11b10:	3b01      	subs	r3, #1
   11b12:	9301      	str	r3, [sp, #4]
   11b14:	9a01      	ldr	r2, [sp, #4]
   11b16:	9b00      	ldr	r3, [sp, #0]
   11b18:	4313      	orrs	r3, r2
   11b1a:	d053      	beq.n	11bc4 <__ieee754_powf+0x180>
   11b1c:	239a      	movs	r3, #154	; 0x9a
   11b1e:	05db      	lsls	r3, r3, #23
   11b20:	429e      	cmp	r6, r3
   11b22:	dd6d      	ble.n	11c00 <__ieee754_powf+0x1bc>
   11b24:	4b31      	ldr	r3, [pc, #196]	; (11bec <__ieee754_powf+0x1a8>)
   11b26:	429d      	cmp	r5, r3
   11b28:	dc04      	bgt.n	11b34 <__ieee754_powf+0xf0>
   11b2a:	464b      	mov	r3, r9
   11b2c:	2b00      	cmp	r3, #0
   11b2e:	db08      	blt.n	11b42 <__ieee754_powf+0xfe>
   11b30:	2100      	movs	r1, #0
   11b32:	e7a8      	b.n	11a86 <__ieee754_powf+0x42>
   11b34:	4b2e      	ldr	r3, [pc, #184]	; (11bf0 <__ieee754_powf+0x1ac>)
   11b36:	429d      	cmp	r5, r3
   11b38:	dc00      	bgt.n	11b3c <__ieee754_powf+0xf8>
   11b3a:	e2c2      	b.n	120c2 <__ieee754_powf+0x67e>
   11b3c:	464d      	mov	r5, r9
   11b3e:	2d00      	cmp	r5, #0
   11b40:	ddf6      	ble.n	11b30 <__ieee754_powf+0xec>
   11b42:	482c      	ldr	r0, [pc, #176]	; (11bf4 <__ieee754_powf+0x1b0>)
   11b44:	1c01      	adds	r1, r0, #0
   11b46:	f7ef f925 	bl	d94 <__aeabi_fmul>
   11b4a:	1c01      	adds	r1, r0, #0
   11b4c:	e79b      	b.n	11a86 <__ieee754_powf+0x42>
   11b4e:	23fe      	movs	r3, #254	; 0xfe
   11b50:	059b      	lsls	r3, r3, #22
   11b52:	429d      	cmp	r5, r3
   11b54:	d095      	beq.n	11a82 <__ieee754_powf+0x3e>
   11b56:	dd28      	ble.n	11baa <__ieee754_powf+0x166>
   11b58:	464b      	mov	r3, r9
   11b5a:	1c21      	adds	r1, r4, #0
   11b5c:	2b00      	cmp	r3, #0
   11b5e:	db00      	blt.n	11b62 <__ieee754_powf+0x11e>
   11b60:	e791      	b.n	11a86 <__ieee754_powf+0x42>
   11b62:	e7e5      	b.n	11b30 <__ieee754_powf+0xec>
   11b64:	4b24      	ldr	r3, [pc, #144]	; (11bf8 <__ieee754_powf+0x1b4>)
   11b66:	429e      	cmp	r6, r3
   11b68:	dc1c      	bgt.n	11ba4 <__ieee754_powf+0x160>
   11b6a:	4b24      	ldr	r3, [pc, #144]	; (11bfc <__ieee754_powf+0x1b8>)
   11b6c:	429e      	cmp	r6, r3
   11b6e:	dd9a      	ble.n	11aa6 <__ieee754_powf+0x62>
   11b70:	2296      	movs	r2, #150	; 0x96
   11b72:	15f3      	asrs	r3, r6, #23
   11b74:	1ad3      	subs	r3, r2, r3
   11b76:	1c32      	adds	r2, r6, #0
   11b78:	411a      	asrs	r2, r3
   11b7a:	1c11      	adds	r1, r2, #0
   11b7c:	4099      	lsls	r1, r3
   11b7e:	42b1      	cmp	r1, r6
   11b80:	d191      	bne.n	11aa6 <__ieee754_powf+0x62>
   11b82:	2301      	movs	r3, #1
   11b84:	401a      	ands	r2, r3
   11b86:	2302      	movs	r3, #2
   11b88:	1a9b      	subs	r3, r3, r2
   11b8a:	9300      	str	r3, [sp, #0]
   11b8c:	e78b      	b.n	11aa6 <__ieee754_powf+0x62>
   11b8e:	464b      	mov	r3, r9
   11b90:	1c39      	adds	r1, r7, #0
   11b92:	2b00      	cmp	r3, #0
   11b94:	db00      	blt.n	11b98 <__ieee754_powf+0x154>
   11b96:	e776      	b.n	11a86 <__ieee754_powf+0x42>
   11b98:	20fe      	movs	r0, #254	; 0xfe
   11b9a:	0580      	lsls	r0, r0, #22
   11b9c:	f7ee ff16 	bl	9cc <__aeabi_fdiv>
   11ba0:	1c01      	adds	r1, r0, #0
   11ba2:	e770      	b.n	11a86 <__ieee754_powf+0x42>
   11ba4:	2202      	movs	r2, #2
   11ba6:	9200      	str	r2, [sp, #0]
   11ba8:	e779      	b.n	11a9e <__ieee754_powf+0x5a>
   11baa:	464d      	mov	r5, r9
   11bac:	2d00      	cmp	r5, #0
   11bae:	dabf      	bge.n	11b30 <__ieee754_powf+0xec>
   11bb0:	2280      	movs	r2, #128	; 0x80
   11bb2:	0612      	lsls	r2, r2, #24
   11bb4:	18a1      	adds	r1, r4, r2
   11bb6:	e766      	b.n	11a86 <__ieee754_powf+0x42>
   11bb8:	1c39      	adds	r1, r7, #0
   11bba:	1c38      	adds	r0, r7, #0
   11bbc:	f7ef f8ea 	bl	d94 <__aeabi_fmul>
   11bc0:	1c01      	adds	r1, r0, #0
   11bc2:	e760      	b.n	11a86 <__ieee754_powf+0x42>
   11bc4:	1c38      	adds	r0, r7, #0
   11bc6:	1c39      	adds	r1, r7, #0
   11bc8:	f7ef fa0e 	bl	fe8 <__aeabi_fsub>
   11bcc:	1c01      	adds	r1, r0, #0
   11bce:	f7ee fefd 	bl	9cc <__aeabi_fdiv>
   11bd2:	1c01      	adds	r1, r0, #0
   11bd4:	e757      	b.n	11a86 <__ieee754_powf+0x42>
   11bd6:	20fe      	movs	r0, #254	; 0xfe
   11bd8:	0580      	lsls	r0, r0, #22
   11bda:	f7ee fef7 	bl	9cc <__aeabi_fdiv>
   11bde:	1c01      	adds	r1, r0, #0
   11be0:	e778      	b.n	11ad4 <__ieee754_powf+0x90>
   11be2:	46c0      	nop			; (mov r8, r8)
   11be4:	000134bc 	.word	0x000134bc
   11be8:	c0800000 	.word	0xc0800000
   11bec:	3f7ffff7 	.word	0x3f7ffff7
   11bf0:	3f800007 	.word	0x3f800007
   11bf4:	7149f2ca 	.word	0x7149f2ca
   11bf8:	4b7fffff 	.word	0x4b7fffff
   11bfc:	3f7fffff 	.word	0x3f7fffff
   11c00:	4af2      	ldr	r2, [pc, #968]	; (11fcc <__ieee754_powf+0x588>)
   11c02:	2300      	movs	r3, #0
   11c04:	4295      	cmp	r5, r2
   11c06:	dc06      	bgt.n	11c16 <__ieee754_powf+0x1d2>
   11c08:	2197      	movs	r1, #151	; 0x97
   11c0a:	05c9      	lsls	r1, r1, #23
   11c0c:	f7ef f8c2 	bl	d94 <__aeabi_fmul>
   11c10:	2318      	movs	r3, #24
   11c12:	1c05      	adds	r5, r0, #0
   11c14:	425b      	negs	r3, r3
   11c16:	15ea      	asrs	r2, r5, #23
   11c18:	3a7f      	subs	r2, #127	; 0x7f
   11c1a:	18d2      	adds	r2, r2, r3
   11c1c:	9205      	str	r2, [sp, #20]
   11c1e:	026b      	lsls	r3, r5, #9
   11c20:	22fe      	movs	r2, #254	; 0xfe
   11c22:	0a5b      	lsrs	r3, r3, #9
   11c24:	0592      	lsls	r2, r2, #22
   11c26:	431a      	orrs	r2, r3
   11c28:	4692      	mov	sl, r2
   11c2a:	4ae9      	ldr	r2, [pc, #932]	; (11fd0 <__ieee754_powf+0x58c>)
   11c2c:	4293      	cmp	r3, r2
   11c2e:	dc00      	bgt.n	11c32 <__ieee754_powf+0x1ee>
   11c30:	e1b1      	b.n	11f96 <__ieee754_powf+0x552>
   11c32:	4ae8      	ldr	r2, [pc, #928]	; (11fd4 <__ieee754_powf+0x590>)
   11c34:	4293      	cmp	r3, r2
   11c36:	dc00      	bgt.n	11c3a <__ieee754_powf+0x1f6>
   11c38:	e23e      	b.n	120b8 <__ieee754_powf+0x674>
   11c3a:	9d05      	ldr	r5, [sp, #20]
   11c3c:	49e6      	ldr	r1, [pc, #920]	; (11fd8 <__ieee754_powf+0x594>)
   11c3e:	3501      	adds	r5, #1
   11c40:	2200      	movs	r2, #0
   11c42:	9505      	str	r5, [sp, #20]
   11c44:	448a      	add	sl, r1
   11c46:	4691      	mov	r9, r2
   11c48:	2300      	movs	r3, #0
   11c4a:	009b      	lsls	r3, r3, #2
   11c4c:	9302      	str	r3, [sp, #8]
   11c4e:	9d02      	ldr	r5, [sp, #8]
   11c50:	4be2      	ldr	r3, [pc, #904]	; (11fdc <__ieee754_powf+0x598>)
   11c52:	4650      	mov	r0, sl
   11c54:	58eb      	ldr	r3, [r5, r3]
   11c56:	46d3      	mov	fp, sl
   11c58:	1c19      	adds	r1, r3, #0
   11c5a:	4698      	mov	r8, r3
   11c5c:	f7ef f9c4 	bl	fe8 <__aeabi_fsub>
   11c60:	4641      	mov	r1, r8
   11c62:	9003      	str	r0, [sp, #12]
   11c64:	4650      	mov	r0, sl
   11c66:	f7ee fd45 	bl	6f4 <__aeabi_fadd>
   11c6a:	1c01      	adds	r1, r0, #0
   11c6c:	20fe      	movs	r0, #254	; 0xfe
   11c6e:	0580      	lsls	r0, r0, #22
   11c70:	f7ee feac 	bl	9cc <__aeabi_fdiv>
   11c74:	9004      	str	r0, [sp, #16]
   11c76:	9904      	ldr	r1, [sp, #16]
   11c78:	9803      	ldr	r0, [sp, #12]
   11c7a:	f7ef f88b 	bl	d94 <__aeabi_fmul>
   11c7e:	4651      	mov	r1, sl
   11c80:	2380      	movs	r3, #128	; 0x80
   11c82:	104a      	asrs	r2, r1, #1
   11c84:	059b      	lsls	r3, r3, #22
   11c86:	4313      	orrs	r3, r2
   11c88:	2280      	movs	r2, #128	; 0x80
   11c8a:	02d2      	lsls	r2, r2, #11
   11c8c:	189b      	adds	r3, r3, r2
   11c8e:	0b06      	lsrs	r6, r0, #12
   11c90:	4499      	add	r9, r3
   11c92:	0336      	lsls	r6, r6, #12
   11c94:	1c07      	adds	r7, r0, #0
   11c96:	4649      	mov	r1, r9
   11c98:	1c30      	adds	r0, r6, #0
   11c9a:	f7ef f87b 	bl	d94 <__aeabi_fmul>
   11c9e:	1c01      	adds	r1, r0, #0
   11ca0:	9803      	ldr	r0, [sp, #12]
   11ca2:	f7ef f9a1 	bl	fe8 <__aeabi_fsub>
   11ca6:	4641      	mov	r1, r8
   11ca8:	4682      	mov	sl, r0
   11caa:	4648      	mov	r0, r9
   11cac:	f7ef f99c 	bl	fe8 <__aeabi_fsub>
   11cb0:	1c01      	adds	r1, r0, #0
   11cb2:	4658      	mov	r0, fp
   11cb4:	f7ef f998 	bl	fe8 <__aeabi_fsub>
   11cb8:	1c01      	adds	r1, r0, #0
   11cba:	1c30      	adds	r0, r6, #0
   11cbc:	f7ef f86a 	bl	d94 <__aeabi_fmul>
   11cc0:	1c01      	adds	r1, r0, #0
   11cc2:	4650      	mov	r0, sl
   11cc4:	f7ef f990 	bl	fe8 <__aeabi_fsub>
   11cc8:	9904      	ldr	r1, [sp, #16]
   11cca:	f7ef f863 	bl	d94 <__aeabi_fmul>
   11cce:	1c39      	adds	r1, r7, #0
   11cd0:	4683      	mov	fp, r0
   11cd2:	1c38      	adds	r0, r7, #0
   11cd4:	f7ef f85e 	bl	d94 <__aeabi_fmul>
   11cd8:	4680      	mov	r8, r0
   11cda:	4641      	mov	r1, r8
   11cdc:	f7ef f85a 	bl	d94 <__aeabi_fmul>
   11ce0:	49bf      	ldr	r1, [pc, #764]	; (11fe0 <__ieee754_powf+0x59c>)
   11ce2:	4681      	mov	r9, r0
   11ce4:	4640      	mov	r0, r8
   11ce6:	f7ef f855 	bl	d94 <__aeabi_fmul>
   11cea:	49be      	ldr	r1, [pc, #760]	; (11fe4 <__ieee754_powf+0x5a0>)
   11cec:	f7ee fd02 	bl	6f4 <__aeabi_fadd>
   11cf0:	4641      	mov	r1, r8
   11cf2:	f7ef f84f 	bl	d94 <__aeabi_fmul>
   11cf6:	49bc      	ldr	r1, [pc, #752]	; (11fe8 <__ieee754_powf+0x5a4>)
   11cf8:	f7ee fcfc 	bl	6f4 <__aeabi_fadd>
   11cfc:	4641      	mov	r1, r8
   11cfe:	f7ef f849 	bl	d94 <__aeabi_fmul>
   11d02:	49ba      	ldr	r1, [pc, #744]	; (11fec <__ieee754_powf+0x5a8>)
   11d04:	f7ee fcf6 	bl	6f4 <__aeabi_fadd>
   11d08:	4641      	mov	r1, r8
   11d0a:	f7ef f843 	bl	d94 <__aeabi_fmul>
   11d0e:	49b8      	ldr	r1, [pc, #736]	; (11ff0 <__ieee754_powf+0x5ac>)
   11d10:	f7ee fcf0 	bl	6f4 <__aeabi_fadd>
   11d14:	4641      	mov	r1, r8
   11d16:	f7ef f83d 	bl	d94 <__aeabi_fmul>
   11d1a:	49b6      	ldr	r1, [pc, #728]	; (11ff4 <__ieee754_powf+0x5b0>)
   11d1c:	f7ee fcea 	bl	6f4 <__aeabi_fadd>
   11d20:	1c01      	adds	r1, r0, #0
   11d22:	4648      	mov	r0, r9
   11d24:	f7ef f836 	bl	d94 <__aeabi_fmul>
   11d28:	1c31      	adds	r1, r6, #0
   11d2a:	4680      	mov	r8, r0
   11d2c:	1c38      	adds	r0, r7, #0
   11d2e:	f7ee fce1 	bl	6f4 <__aeabi_fadd>
   11d32:	4659      	mov	r1, fp
   11d34:	f7ef f82e 	bl	d94 <__aeabi_fmul>
   11d38:	4641      	mov	r1, r8
   11d3a:	f7ee fcdb 	bl	6f4 <__aeabi_fadd>
   11d3e:	1c31      	adds	r1, r6, #0
   11d40:	4681      	mov	r9, r0
   11d42:	1c30      	adds	r0, r6, #0
   11d44:	f7ef f826 	bl	d94 <__aeabi_fmul>
   11d48:	49ab      	ldr	r1, [pc, #684]	; (11ff8 <__ieee754_powf+0x5b4>)
   11d4a:	4682      	mov	sl, r0
   11d4c:	f7ee fcd2 	bl	6f4 <__aeabi_fadd>
   11d50:	4649      	mov	r1, r9
   11d52:	f7ee fccf 	bl	6f4 <__aeabi_fadd>
   11d56:	0b00      	lsrs	r0, r0, #12
   11d58:	0300      	lsls	r0, r0, #12
   11d5a:	4680      	mov	r8, r0
   11d5c:	4641      	mov	r1, r8
   11d5e:	1c30      	adds	r0, r6, #0
   11d60:	f7ef f818 	bl	d94 <__aeabi_fmul>
   11d64:	4641      	mov	r1, r8
   11d66:	1c06      	adds	r6, r0, #0
   11d68:	4658      	mov	r0, fp
   11d6a:	f7ef f813 	bl	d94 <__aeabi_fmul>
   11d6e:	49a2      	ldr	r1, [pc, #648]	; (11ff8 <__ieee754_powf+0x5b4>)
   11d70:	4683      	mov	fp, r0
   11d72:	4640      	mov	r0, r8
   11d74:	f7ef f938 	bl	fe8 <__aeabi_fsub>
   11d78:	4651      	mov	r1, sl
   11d7a:	f7ef f935 	bl	fe8 <__aeabi_fsub>
   11d7e:	1c01      	adds	r1, r0, #0
   11d80:	4648      	mov	r0, r9
   11d82:	f7ef f931 	bl	fe8 <__aeabi_fsub>
   11d86:	1c39      	adds	r1, r7, #0
   11d88:	f7ef f804 	bl	d94 <__aeabi_fmul>
   11d8c:	1c01      	adds	r1, r0, #0
   11d8e:	4658      	mov	r0, fp
   11d90:	f7ee fcb0 	bl	6f4 <__aeabi_fadd>
   11d94:	4681      	mov	r9, r0
   11d96:	4649      	mov	r1, r9
   11d98:	1c30      	adds	r0, r6, #0
   11d9a:	f7ee fcab 	bl	6f4 <__aeabi_fadd>
   11d9e:	0b07      	lsrs	r7, r0, #12
   11da0:	033f      	lsls	r7, r7, #12
   11da2:	1c38      	adds	r0, r7, #0
   11da4:	4995      	ldr	r1, [pc, #596]	; (11ffc <__ieee754_powf+0x5b8>)
   11da6:	f7ee fff5 	bl	d94 <__aeabi_fmul>
   11daa:	4995      	ldr	r1, [pc, #596]	; (12000 <__ieee754_powf+0x5bc>)
   11dac:	4680      	mov	r8, r0
   11dae:	1c38      	adds	r0, r7, #0
   11db0:	f7ee fff0 	bl	d94 <__aeabi_fmul>
   11db4:	1c31      	adds	r1, r6, #0
   11db6:	4682      	mov	sl, r0
   11db8:	1c38      	adds	r0, r7, #0
   11dba:	f7ef f915 	bl	fe8 <__aeabi_fsub>
   11dbe:	1c01      	adds	r1, r0, #0
   11dc0:	4648      	mov	r0, r9
   11dc2:	f7ef f911 	bl	fe8 <__aeabi_fsub>
   11dc6:	498f      	ldr	r1, [pc, #572]	; (12004 <__ieee754_powf+0x5c0>)
   11dc8:	f7ee ffe4 	bl	d94 <__aeabi_fmul>
   11dcc:	1c01      	adds	r1, r0, #0
   11dce:	4650      	mov	r0, sl
   11dd0:	f7ee fc90 	bl	6f4 <__aeabi_fadd>
   11dd4:	4b8c      	ldr	r3, [pc, #560]	; (12008 <__ieee754_powf+0x5c4>)
   11dd6:	58e9      	ldr	r1, [r5, r3]
   11dd8:	f7ee fc8c 	bl	6f4 <__aeabi_fadd>
   11ddc:	1c07      	adds	r7, r0, #0
   11dde:	9805      	ldr	r0, [sp, #20]
   11de0:	f7ef fa98 	bl	1314 <__aeabi_i2f>
   11de4:	4b89      	ldr	r3, [pc, #548]	; (1200c <__ieee754_powf+0x5c8>)
   11de6:	4681      	mov	r9, r0
   11de8:	58eb      	ldr	r3, [r5, r3]
   11dea:	1c39      	adds	r1, r7, #0
   11dec:	469a      	mov	sl, r3
   11dee:	4640      	mov	r0, r8
   11df0:	f7ee fc80 	bl	6f4 <__aeabi_fadd>
   11df4:	4651      	mov	r1, sl
   11df6:	f7ee fc7d 	bl	6f4 <__aeabi_fadd>
   11dfa:	4649      	mov	r1, r9
   11dfc:	f7ee fc7a 	bl	6f4 <__aeabi_fadd>
   11e00:	0b06      	lsrs	r6, r0, #12
   11e02:	0336      	lsls	r6, r6, #12
   11e04:	4649      	mov	r1, r9
   11e06:	1c30      	adds	r0, r6, #0
   11e08:	f7ef f8ee 	bl	fe8 <__aeabi_fsub>
   11e0c:	4651      	mov	r1, sl
   11e0e:	f7ef f8eb 	bl	fe8 <__aeabi_fsub>
   11e12:	4641      	mov	r1, r8
   11e14:	f7ef f8e8 	bl	fe8 <__aeabi_fsub>
   11e18:	1c01      	adds	r1, r0, #0
   11e1a:	1c38      	adds	r0, r7, #0
   11e1c:	f7ef f8e4 	bl	fe8 <__aeabi_fsub>
   11e20:	9d00      	ldr	r5, [sp, #0]
   11e22:	9b01      	ldr	r3, [sp, #4]
   11e24:	3d01      	subs	r5, #1
   11e26:	4681      	mov	r9, r0
   11e28:	431d      	orrs	r5, r3
   11e2a:	d000      	beq.n	11e2e <__ieee754_powf+0x3ea>
   11e2c:	e0af      	b.n	11f8e <__ieee754_powf+0x54a>
   11e2e:	4d78      	ldr	r5, [pc, #480]	; (12010 <__ieee754_powf+0x5cc>)
   11e30:	46a8      	mov	r8, r5
   11e32:	0b25      	lsrs	r5, r4, #12
   11e34:	032d      	lsls	r5, r5, #12
   11e36:	1c29      	adds	r1, r5, #0
   11e38:	1c20      	adds	r0, r4, #0
   11e3a:	f7ef f8d5 	bl	fe8 <__aeabi_fsub>
   11e3e:	1c31      	adds	r1, r6, #0
   11e40:	f7ee ffa8 	bl	d94 <__aeabi_fmul>
   11e44:	4649      	mov	r1, r9
   11e46:	1c07      	adds	r7, r0, #0
   11e48:	1c20      	adds	r0, r4, #0
   11e4a:	f7ee ffa3 	bl	d94 <__aeabi_fmul>
   11e4e:	1c01      	adds	r1, r0, #0
   11e50:	1c38      	adds	r0, r7, #0
   11e52:	f7ee fc4f 	bl	6f4 <__aeabi_fadd>
   11e56:	1c29      	adds	r1, r5, #0
   11e58:	4681      	mov	r9, r0
   11e5a:	1c30      	adds	r0, r6, #0
   11e5c:	f7ee ff9a 	bl	d94 <__aeabi_fmul>
   11e60:	1c04      	adds	r4, r0, #0
   11e62:	4682      	mov	sl, r0
   11e64:	1c21      	adds	r1, r4, #0
   11e66:	4648      	mov	r0, r9
   11e68:	f7ee fc44 	bl	6f4 <__aeabi_fadd>
   11e6c:	0046      	lsls	r6, r0, #1
   11e6e:	1c05      	adds	r5, r0, #0
   11e70:	1c07      	adds	r7, r0, #0
   11e72:	0876      	lsrs	r6, r6, #1
   11e74:	2800      	cmp	r0, #0
   11e76:	dc00      	bgt.n	11e7a <__ieee754_powf+0x436>
   11e78:	e107      	b.n	1208a <__ieee754_powf+0x646>
   11e7a:	2386      	movs	r3, #134	; 0x86
   11e7c:	05db      	lsls	r3, r3, #23
   11e7e:	429e      	cmp	r6, r3
   11e80:	dd00      	ble.n	11e84 <__ieee754_powf+0x440>
   11e82:	e09a      	b.n	11fba <__ieee754_powf+0x576>
   11e84:	d100      	bne.n	11e88 <__ieee754_powf+0x444>
   11e86:	e089      	b.n	11f9c <__ieee754_powf+0x558>
   11e88:	23fc      	movs	r3, #252	; 0xfc
   11e8a:	059b      	lsls	r3, r3, #22
   11e8c:	429e      	cmp	r6, r3
   11e8e:	dd00      	ble.n	11e92 <__ieee754_powf+0x44e>
   11e90:	e0d4      	b.n	1203c <__ieee754_powf+0x5f8>
   11e92:	2200      	movs	r2, #0
   11e94:	4693      	mov	fp, r2
   11e96:	2600      	movs	r6, #0
   11e98:	0b3f      	lsrs	r7, r7, #12
   11e9a:	033f      	lsls	r7, r7, #12
   11e9c:	1c38      	adds	r0, r7, #0
   11e9e:	495d      	ldr	r1, [pc, #372]	; (12014 <__ieee754_powf+0x5d0>)
   11ea0:	f7ee ff78 	bl	d94 <__aeabi_fmul>
   11ea4:	4651      	mov	r1, sl
   11ea6:	1c05      	adds	r5, r0, #0
   11ea8:	1c38      	adds	r0, r7, #0
   11eaa:	f7ef f89d 	bl	fe8 <__aeabi_fsub>
   11eae:	1c01      	adds	r1, r0, #0
   11eb0:	4648      	mov	r0, r9
   11eb2:	f7ef f899 	bl	fe8 <__aeabi_fsub>
   11eb6:	4958      	ldr	r1, [pc, #352]	; (12018 <__ieee754_powf+0x5d4>)
   11eb8:	f7ee ff6c 	bl	d94 <__aeabi_fmul>
   11ebc:	4957      	ldr	r1, [pc, #348]	; (1201c <__ieee754_powf+0x5d8>)
   11ebe:	1c04      	adds	r4, r0, #0
   11ec0:	1c38      	adds	r0, r7, #0
   11ec2:	f7ee ff67 	bl	d94 <__aeabi_fmul>
   11ec6:	1c01      	adds	r1, r0, #0
   11ec8:	1c20      	adds	r0, r4, #0
   11eca:	f7ee fc13 	bl	6f4 <__aeabi_fadd>
   11ece:	1c07      	adds	r7, r0, #0
   11ed0:	1c39      	adds	r1, r7, #0
   11ed2:	1c28      	adds	r0, r5, #0
   11ed4:	f7ee fc0e 	bl	6f4 <__aeabi_fadd>
   11ed8:	1c29      	adds	r1, r5, #0
   11eda:	1c04      	adds	r4, r0, #0
   11edc:	f7ef f884 	bl	fe8 <__aeabi_fsub>
   11ee0:	1c01      	adds	r1, r0, #0
   11ee2:	1c38      	adds	r0, r7, #0
   11ee4:	f7ef f880 	bl	fe8 <__aeabi_fsub>
   11ee8:	1c21      	adds	r1, r4, #0
   11eea:	1c07      	adds	r7, r0, #0
   11eec:	1c20      	adds	r0, r4, #0
   11eee:	f7ee ff51 	bl	d94 <__aeabi_fmul>
   11ef2:	494b      	ldr	r1, [pc, #300]	; (12020 <__ieee754_powf+0x5dc>)
   11ef4:	1c05      	adds	r5, r0, #0
   11ef6:	f7ee ff4d 	bl	d94 <__aeabi_fmul>
   11efa:	494a      	ldr	r1, [pc, #296]	; (12024 <__ieee754_powf+0x5e0>)
   11efc:	f7ef f874 	bl	fe8 <__aeabi_fsub>
   11f00:	1c29      	adds	r1, r5, #0
   11f02:	f7ee ff47 	bl	d94 <__aeabi_fmul>
   11f06:	4948      	ldr	r1, [pc, #288]	; (12028 <__ieee754_powf+0x5e4>)
   11f08:	f7ee fbf4 	bl	6f4 <__aeabi_fadd>
   11f0c:	1c29      	adds	r1, r5, #0
   11f0e:	f7ee ff41 	bl	d94 <__aeabi_fmul>
   11f12:	4946      	ldr	r1, [pc, #280]	; (1202c <__ieee754_powf+0x5e8>)
   11f14:	f7ef f868 	bl	fe8 <__aeabi_fsub>
   11f18:	1c29      	adds	r1, r5, #0
   11f1a:	f7ee ff3b 	bl	d94 <__aeabi_fmul>
   11f1e:	4944      	ldr	r1, [pc, #272]	; (12030 <__ieee754_powf+0x5ec>)
   11f20:	f7ee fbe8 	bl	6f4 <__aeabi_fadd>
   11f24:	1c29      	adds	r1, r5, #0
   11f26:	f7ee ff35 	bl	d94 <__aeabi_fmul>
   11f2a:	1c01      	adds	r1, r0, #0
   11f2c:	1c20      	adds	r0, r4, #0
   11f2e:	f7ef f85b 	bl	fe8 <__aeabi_fsub>
   11f32:	1c05      	adds	r5, r0, #0
   11f34:	1c29      	adds	r1, r5, #0
   11f36:	1c20      	adds	r0, r4, #0
   11f38:	f7ee ff2c 	bl	d94 <__aeabi_fmul>
   11f3c:	2180      	movs	r1, #128	; 0x80
   11f3e:	4681      	mov	r9, r0
   11f40:	05c9      	lsls	r1, r1, #23
   11f42:	1c28      	adds	r0, r5, #0
   11f44:	f7ef f850 	bl	fe8 <__aeabi_fsub>
   11f48:	1c01      	adds	r1, r0, #0
   11f4a:	4648      	mov	r0, r9
   11f4c:	f7ee fd3e 	bl	9cc <__aeabi_fdiv>
   11f50:	1c39      	adds	r1, r7, #0
   11f52:	1c05      	adds	r5, r0, #0
   11f54:	1c20      	adds	r0, r4, #0
   11f56:	f7ee ff1d 	bl	d94 <__aeabi_fmul>
   11f5a:	1c39      	adds	r1, r7, #0
   11f5c:	f7ee fbca 	bl	6f4 <__aeabi_fadd>
   11f60:	1c01      	adds	r1, r0, #0
   11f62:	1c28      	adds	r0, r5, #0
   11f64:	f7ef f840 	bl	fe8 <__aeabi_fsub>
   11f68:	1c21      	adds	r1, r4, #0
   11f6a:	f7ef f83d 	bl	fe8 <__aeabi_fsub>
   11f6e:	1c01      	adds	r1, r0, #0
   11f70:	20fe      	movs	r0, #254	; 0xfe
   11f72:	0580      	lsls	r0, r0, #22
   11f74:	f7ef f838 	bl	fe8 <__aeabi_fsub>
   11f78:	465b      	mov	r3, fp
   11f7a:	1819      	adds	r1, r3, r0
   11f7c:	15cb      	asrs	r3, r1, #23
   11f7e:	2b00      	cmp	r3, #0
   11f80:	dc00      	bgt.n	11f84 <__ieee754_powf+0x540>
   11f82:	e0d9      	b.n	12138 <__ieee754_powf+0x6f4>
   11f84:	4640      	mov	r0, r8
   11f86:	f7ee ff05 	bl	d94 <__aeabi_fmul>
   11f8a:	1c01      	adds	r1, r0, #0
   11f8c:	e57b      	b.n	11a86 <__ieee754_powf+0x42>
   11f8e:	21fe      	movs	r1, #254	; 0xfe
   11f90:	0589      	lsls	r1, r1, #22
   11f92:	4688      	mov	r8, r1
   11f94:	e74d      	b.n	11e32 <__ieee754_powf+0x3ee>
   11f96:	2300      	movs	r3, #0
   11f98:	4699      	mov	r9, r3
   11f9a:	e656      	b.n	11c4a <__ieee754_powf+0x206>
   11f9c:	4925      	ldr	r1, [pc, #148]	; (12034 <__ieee754_powf+0x5f0>)
   11f9e:	4648      	mov	r0, r9
   11fa0:	f7ee fba8 	bl	6f4 <__aeabi_fadd>
   11fa4:	1c21      	adds	r1, r4, #0
   11fa6:	4682      	mov	sl, r0
   11fa8:	1c28      	adds	r0, r5, #0
   11faa:	f7ef f81d 	bl	fe8 <__aeabi_fsub>
   11fae:	1c01      	adds	r1, r0, #0
   11fb0:	4650      	mov	r0, sl
   11fb2:	f7ee fb8b 	bl	6cc <__aeabi_fcmpgt>
   11fb6:	2800      	cmp	r0, #0
   11fb8:	d040      	beq.n	1203c <__ieee754_powf+0x5f8>
   11fba:	491f      	ldr	r1, [pc, #124]	; (12038 <__ieee754_powf+0x5f4>)
   11fbc:	4640      	mov	r0, r8
   11fbe:	f7ee fee9 	bl	d94 <__aeabi_fmul>
   11fc2:	491d      	ldr	r1, [pc, #116]	; (12038 <__ieee754_powf+0x5f4>)
   11fc4:	f7ee fee6 	bl	d94 <__aeabi_fmul>
   11fc8:	1c01      	adds	r1, r0, #0
   11fca:	e55c      	b.n	11a86 <__ieee754_powf+0x42>
   11fcc:	007fffff 	.word	0x007fffff
   11fd0:	001cc471 	.word	0x001cc471
   11fd4:	005db3d6 	.word	0x005db3d6
   11fd8:	ff800000 	.word	0xff800000
   11fdc:	000134e8 	.word	0x000134e8
   11fe0:	3e53f142 	.word	0x3e53f142
   11fe4:	3e6c3255 	.word	0x3e6c3255
   11fe8:	3e8ba305 	.word	0x3e8ba305
   11fec:	3eaaaaab 	.word	0x3eaaaaab
   11ff0:	3edb6db7 	.word	0x3edb6db7
   11ff4:	3f19999a 	.word	0x3f19999a
   11ff8:	40400000 	.word	0x40400000
   11ffc:	3f763800 	.word	0x3f763800
   12000:	369dc3a0 	.word	0x369dc3a0
   12004:	3f76384f 	.word	0x3f76384f
   12008:	000134e0 	.word	0x000134e0
   1200c:	000134d8 	.word	0x000134d8
   12010:	bf800000 	.word	0xbf800000
   12014:	3f317200 	.word	0x3f317200
   12018:	3f317218 	.word	0x3f317218
   1201c:	35bfbe8c 	.word	0x35bfbe8c
   12020:	3331bb4c 	.word	0x3331bb4c
   12024:	35ddea0e 	.word	0x35ddea0e
   12028:	388ab355 	.word	0x388ab355
   1202c:	3b360b61 	.word	0x3b360b61
   12030:	3e2aaaab 	.word	0x3e2aaaab
   12034:	3338aa3c 	.word	0x3338aa3c
   12038:	7149f2ca 	.word	0x7149f2ca
   1203c:	15f6      	asrs	r6, r6, #23
   1203e:	2080      	movs	r0, #128	; 0x80
   12040:	1c33      	adds	r3, r6, #0
   12042:	0400      	lsls	r0, r0, #16
   12044:	3b7e      	subs	r3, #126	; 0x7e
   12046:	1c02      	adds	r2, r0, #0
   12048:	411a      	asrs	r2, r3
   1204a:	19d3      	adds	r3, r2, r7
   1204c:	005a      	lsls	r2, r3, #1
   1204e:	0e12      	lsrs	r2, r2, #24
   12050:	1c11      	adds	r1, r2, #0
   12052:	4d3c      	ldr	r5, [pc, #240]	; (12144 <__ieee754_powf+0x700>)
   12054:	397f      	subs	r1, #127	; 0x7f
   12056:	410d      	asrs	r5, r1
   12058:	1c29      	adds	r1, r5, #0
   1205a:	1c1d      	adds	r5, r3, #0
   1205c:	025b      	lsls	r3, r3, #9
   1205e:	0a5b      	lsrs	r3, r3, #9
   12060:	2696      	movs	r6, #150	; 0x96
   12062:	4318      	orrs	r0, r3
   12064:	1ab2      	subs	r2, r6, r2
   12066:	438d      	bics	r5, r1
   12068:	1c06      	adds	r6, r0, #0
   1206a:	1c29      	adds	r1, r5, #0
   1206c:	4116      	asrs	r6, r2
   1206e:	2f00      	cmp	r7, #0
   12070:	db60      	blt.n	12134 <__ieee754_powf+0x6f0>
   12072:	1c20      	adds	r0, r4, #0
   12074:	f7ee ffb8 	bl	fe8 <__aeabi_fsub>
   12078:	4682      	mov	sl, r0
   1207a:	4651      	mov	r1, sl
   1207c:	4648      	mov	r0, r9
   1207e:	f7ee fb39 	bl	6f4 <__aeabi_fadd>
   12082:	05f1      	lsls	r1, r6, #23
   12084:	1c07      	adds	r7, r0, #0
   12086:	468b      	mov	fp, r1
   12088:	e706      	b.n	11e98 <__ieee754_powf+0x454>
   1208a:	4b2f      	ldr	r3, [pc, #188]	; (12148 <__ieee754_powf+0x704>)
   1208c:	429e      	cmp	r6, r3
   1208e:	dc0a      	bgt.n	120a6 <__ieee754_powf+0x662>
   12090:	d000      	beq.n	12094 <__ieee754_powf+0x650>
   12092:	e6f9      	b.n	11e88 <__ieee754_powf+0x444>
   12094:	1c21      	adds	r1, r4, #0
   12096:	f7ee ffa7 	bl	fe8 <__aeabi_fsub>
   1209a:	1c01      	adds	r1, r0, #0
   1209c:	4648      	mov	r0, r9
   1209e:	f7ee fb0b 	bl	6b8 <__aeabi_fcmple>
   120a2:	2800      	cmp	r0, #0
   120a4:	d0ca      	beq.n	1203c <__ieee754_powf+0x5f8>
   120a6:	4929      	ldr	r1, [pc, #164]	; (1214c <__ieee754_powf+0x708>)
   120a8:	4640      	mov	r0, r8
   120aa:	f7ee fe73 	bl	d94 <__aeabi_fmul>
   120ae:	4927      	ldr	r1, [pc, #156]	; (1214c <__ieee754_powf+0x708>)
   120b0:	f7ee fe70 	bl	d94 <__aeabi_fmul>
   120b4:	1c01      	adds	r1, r0, #0
   120b6:	e4e6      	b.n	11a86 <__ieee754_powf+0x42>
   120b8:	2380      	movs	r3, #128	; 0x80
   120ba:	039b      	lsls	r3, r3, #14
   120bc:	4699      	mov	r9, r3
   120be:	2301      	movs	r3, #1
   120c0:	e5c3      	b.n	11c4a <__ieee754_powf+0x206>
   120c2:	21fe      	movs	r1, #254	; 0xfe
   120c4:	0589      	lsls	r1, r1, #22
   120c6:	f7ee ff8f 	bl	fe8 <__aeabi_fsub>
   120ca:	4921      	ldr	r1, [pc, #132]	; (12150 <__ieee754_powf+0x70c>)
   120cc:	1c06      	adds	r6, r0, #0
   120ce:	f7ee fe61 	bl	d94 <__aeabi_fmul>
   120d2:	4920      	ldr	r1, [pc, #128]	; (12154 <__ieee754_powf+0x710>)
   120d4:	1c05      	adds	r5, r0, #0
   120d6:	1c30      	adds	r0, r6, #0
   120d8:	f7ee fe5c 	bl	d94 <__aeabi_fmul>
   120dc:	1c31      	adds	r1, r6, #0
   120de:	1c07      	adds	r7, r0, #0
   120e0:	1c30      	adds	r0, r6, #0
   120e2:	f7ee fe57 	bl	d94 <__aeabi_fmul>
   120e6:	21fa      	movs	r1, #250	; 0xfa
   120e8:	4681      	mov	r9, r0
   120ea:	0589      	lsls	r1, r1, #22
   120ec:	1c30      	adds	r0, r6, #0
   120ee:	f7ee fe51 	bl	d94 <__aeabi_fmul>
   120f2:	1c01      	adds	r1, r0, #0
   120f4:	4818      	ldr	r0, [pc, #96]	; (12158 <__ieee754_powf+0x714>)
   120f6:	f7ee ff77 	bl	fe8 <__aeabi_fsub>
   120fa:	1c31      	adds	r1, r6, #0
   120fc:	f7ee fe4a 	bl	d94 <__aeabi_fmul>
   12100:	1c01      	adds	r1, r0, #0
   12102:	20fc      	movs	r0, #252	; 0xfc
   12104:	0580      	lsls	r0, r0, #22
   12106:	f7ee ff6f 	bl	fe8 <__aeabi_fsub>
   1210a:	1c01      	adds	r1, r0, #0
   1210c:	4648      	mov	r0, r9
   1210e:	f7ee fe41 	bl	d94 <__aeabi_fmul>
   12112:	4912      	ldr	r1, [pc, #72]	; (1215c <__ieee754_powf+0x718>)
   12114:	f7ee fe3e 	bl	d94 <__aeabi_fmul>
   12118:	1c01      	adds	r1, r0, #0
   1211a:	1c38      	adds	r0, r7, #0
   1211c:	f7ee ff64 	bl	fe8 <__aeabi_fsub>
   12120:	1c07      	adds	r7, r0, #0
   12122:	1c39      	adds	r1, r7, #0
   12124:	1c28      	adds	r0, r5, #0
   12126:	f7ee fae5 	bl	6f4 <__aeabi_fadd>
   1212a:	0b06      	lsrs	r6, r0, #12
   1212c:	0336      	lsls	r6, r6, #12
   1212e:	1c30      	adds	r0, r6, #0
   12130:	1c29      	adds	r1, r5, #0
   12132:	e66f      	b.n	11e14 <__ieee754_powf+0x3d0>
   12134:	4276      	negs	r6, r6
   12136:	e79c      	b.n	12072 <__ieee754_powf+0x62e>
   12138:	1c31      	adds	r1, r6, #0
   1213a:	f000 ffbf 	bl	130bc <scalbnf>
   1213e:	1c01      	adds	r1, r0, #0
   12140:	e720      	b.n	11f84 <__ieee754_powf+0x540>
   12142:	46c0      	nop			; (mov r8, r8)
   12144:	007fffff 	.word	0x007fffff
   12148:	43160000 	.word	0x43160000
   1214c:	0da24260 	.word	0x0da24260
   12150:	3fb8aa00 	.word	0x3fb8aa00
   12154:	36eca570 	.word	0x36eca570
   12158:	3eaaaaab 	.word	0x3eaaaaab
   1215c:	3fb8aa3b 	.word	0x3fb8aa3b

00012160 <__ieee754_rem_pio2f>:
__ieee754_rem_pio2f():
   12160:	b5f0      	push	{r4, r5, r6, r7, lr}
   12162:	4656      	mov	r6, sl
   12164:	464d      	mov	r5, r9
   12166:	4644      	mov	r4, r8
   12168:	465f      	mov	r7, fp
   1216a:	b4f0      	push	{r4, r5, r6, r7}
   1216c:	0042      	lsls	r2, r0, #1
   1216e:	0856      	lsrs	r6, r2, #1
   12170:	4aab      	ldr	r2, [pc, #684]	; (12420 <__ieee754_rem_pio2f+0x2c0>)
   12172:	b089      	sub	sp, #36	; 0x24
   12174:	1c03      	adds	r3, r0, #0
   12176:	1c0c      	adds	r4, r1, #0
   12178:	1c05      	adds	r5, r0, #0
   1217a:	4296      	cmp	r6, r2
   1217c:	dd68      	ble.n	12250 <__ieee754_rem_pio2f+0xf0>
   1217e:	4aa9      	ldr	r2, [pc, #676]	; (12424 <__ieee754_rem_pio2f+0x2c4>)
   12180:	4296      	cmp	r6, r2
   12182:	dc1a      	bgt.n	121ba <__ieee754_rem_pio2f+0x5a>
   12184:	49a8      	ldr	r1, [pc, #672]	; (12428 <__ieee754_rem_pio2f+0x2c8>)
   12186:	2b00      	cmp	r3, #0
   12188:	dc00      	bgt.n	1218c <__ieee754_rem_pio2f+0x2c>
   1218a:	e0fe      	b.n	1238a <__ieee754_rem_pio2f+0x22a>
   1218c:	f7ee ff2c 	bl	fe8 <__aeabi_fsub>
   12190:	230f      	movs	r3, #15
   12192:	1c32      	adds	r2, r6, #0
   12194:	439a      	bics	r2, r3
   12196:	4ba5      	ldr	r3, [pc, #660]	; (1242c <__ieee754_rem_pio2f+0x2cc>)
   12198:	1c05      	adds	r5, r0, #0
   1219a:	429a      	cmp	r2, r3
   1219c:	d06a      	beq.n	12274 <__ieee754_rem_pio2f+0x114>
   1219e:	49a4      	ldr	r1, [pc, #656]	; (12430 <__ieee754_rem_pio2f+0x2d0>)
   121a0:	f7ee ff22 	bl	fe8 <__aeabi_fsub>
   121a4:	1c01      	adds	r1, r0, #0
   121a6:	6020      	str	r0, [r4, #0]
   121a8:	1c28      	adds	r0, r5, #0
   121aa:	f7ee ff1d 	bl	fe8 <__aeabi_fsub>
   121ae:	49a0      	ldr	r1, [pc, #640]	; (12430 <__ieee754_rem_pio2f+0x2d0>)
   121b0:	f7ee ff1a 	bl	fe8 <__aeabi_fsub>
   121b4:	6060      	str	r0, [r4, #4]
   121b6:	2001      	movs	r0, #1
   121b8:	e04e      	b.n	12258 <__ieee754_rem_pio2f+0xf8>
   121ba:	4a9e      	ldr	r2, [pc, #632]	; (12434 <__ieee754_rem_pio2f+0x2d4>)
   121bc:	4296      	cmp	r6, r2
   121be:	dd6b      	ble.n	12298 <__ieee754_rem_pio2f+0x138>
   121c0:	4a9d      	ldr	r2, [pc, #628]	; (12438 <__ieee754_rem_pio2f+0x2d8>)
   121c2:	4296      	cmp	r6, r2
   121c4:	dc4f      	bgt.n	12266 <__ieee754_rem_pio2f+0x106>
   121c6:	15f7      	asrs	r7, r6, #23
   121c8:	3f86      	subs	r7, #134	; 0x86
   121ca:	05fb      	lsls	r3, r7, #23
   121cc:	1af6      	subs	r6, r6, r3
   121ce:	1c30      	adds	r0, r6, #0
   121d0:	f7ef f880 	bl	12d4 <__aeabi_f2iz>
   121d4:	f7ef f89e 	bl	1314 <__aeabi_i2f>
   121d8:	1c01      	adds	r1, r0, #0
   121da:	9005      	str	r0, [sp, #20]
   121dc:	1c30      	adds	r0, r6, #0
   121de:	f7ee ff03 	bl	fe8 <__aeabi_fsub>
   121e2:	2187      	movs	r1, #135	; 0x87
   121e4:	05c9      	lsls	r1, r1, #23
   121e6:	f7ee fdd5 	bl	d94 <__aeabi_fmul>
   121ea:	4680      	mov	r8, r0
   121ec:	f7ef f872 	bl	12d4 <__aeabi_f2iz>
   121f0:	f7ef f890 	bl	1314 <__aeabi_i2f>
   121f4:	1c06      	adds	r6, r0, #0
   121f6:	9006      	str	r0, [sp, #24]
   121f8:	1c31      	adds	r1, r6, #0
   121fa:	4640      	mov	r0, r8
   121fc:	f7ee fef4 	bl	fe8 <__aeabi_fsub>
   12200:	2187      	movs	r1, #135	; 0x87
   12202:	05c9      	lsls	r1, r1, #23
   12204:	f7ee fdc6 	bl	d94 <__aeabi_fmul>
   12208:	2100      	movs	r1, #0
   1220a:	9007      	str	r0, [sp, #28]
   1220c:	f7ee fa44 	bl	698 <__aeabi_fcmpeq>
   12210:	2800      	cmp	r0, #0
   12212:	d100      	bne.n	12216 <__ieee754_rem_pio2f+0xb6>
   12214:	e0d3      	b.n	123be <__ieee754_rem_pio2f+0x25e>
   12216:	1c30      	adds	r0, r6, #0
   12218:	2100      	movs	r1, #0
   1221a:	f7ee fa3d 	bl	698 <__aeabi_fcmpeq>
   1221e:	1e43      	subs	r3, r0, #1
   12220:	4198      	sbcs	r0, r3
   12222:	2302      	movs	r3, #2
   12224:	1a1b      	subs	r3, r3, r0
   12226:	2202      	movs	r2, #2
   12228:	9200      	str	r2, [sp, #0]
   1222a:	4a84      	ldr	r2, [pc, #528]	; (1243c <__ieee754_rem_pio2f+0x2dc>)
   1222c:	a805      	add	r0, sp, #20
   1222e:	9201      	str	r2, [sp, #4]
   12230:	1c21      	adds	r1, r4, #0
   12232:	1c3a      	adds	r2, r7, #0
   12234:	f000 fa36 	bl	126a4 <__kernel_rem_pio2f>
   12238:	2d00      	cmp	r5, #0
   1223a:	da0d      	bge.n	12258 <__ieee754_rem_pio2f+0xf8>
   1223c:	6822      	ldr	r2, [r4, #0]
   1223e:	2180      	movs	r1, #128	; 0x80
   12240:	0609      	lsls	r1, r1, #24
   12242:	1853      	adds	r3, r2, r1
   12244:	6862      	ldr	r2, [r4, #4]
   12246:	6023      	str	r3, [r4, #0]
   12248:	1853      	adds	r3, r2, r1
   1224a:	6063      	str	r3, [r4, #4]
   1224c:	4240      	negs	r0, r0
   1224e:	e003      	b.n	12258 <__ieee754_rem_pio2f+0xf8>
   12250:	2300      	movs	r3, #0
   12252:	6020      	str	r0, [r4, #0]
   12254:	604b      	str	r3, [r1, #4]
   12256:	2000      	movs	r0, #0
   12258:	b009      	add	sp, #36	; 0x24
   1225a:	bc3c      	pop	{r2, r3, r4, r5}
   1225c:	4690      	mov	r8, r2
   1225e:	4699      	mov	r9, r3
   12260:	46a2      	mov	sl, r4
   12262:	46ab      	mov	fp, r5
   12264:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12266:	1c19      	adds	r1, r3, #0
   12268:	f7ee febe 	bl	fe8 <__aeabi_fsub>
   1226c:	6060      	str	r0, [r4, #4]
   1226e:	6020      	str	r0, [r4, #0]
   12270:	2000      	movs	r0, #0
   12272:	e7f1      	b.n	12258 <__ieee754_rem_pio2f+0xf8>
   12274:	4972      	ldr	r1, [pc, #456]	; (12440 <__ieee754_rem_pio2f+0x2e0>)
   12276:	f7ee feb7 	bl	fe8 <__aeabi_fsub>
   1227a:	4972      	ldr	r1, [pc, #456]	; (12444 <__ieee754_rem_pio2f+0x2e4>)
   1227c:	1c05      	adds	r5, r0, #0
   1227e:	f7ee feb3 	bl	fe8 <__aeabi_fsub>
   12282:	1c01      	adds	r1, r0, #0
   12284:	6020      	str	r0, [r4, #0]
   12286:	1c28      	adds	r0, r5, #0
   12288:	f7ee feae 	bl	fe8 <__aeabi_fsub>
   1228c:	496d      	ldr	r1, [pc, #436]	; (12444 <__ieee754_rem_pio2f+0x2e4>)
   1228e:	f7ee feab 	bl	fe8 <__aeabi_fsub>
   12292:	6060      	str	r0, [r4, #4]
   12294:	2001      	movs	r0, #1
   12296:	e7df      	b.n	12258 <__ieee754_rem_pio2f+0xf8>
   12298:	f000 fe94 	bl	12fc4 <fabsf>
   1229c:	496a      	ldr	r1, [pc, #424]	; (12448 <__ieee754_rem_pio2f+0x2e8>)
   1229e:	4680      	mov	r8, r0
   122a0:	f7ee fd78 	bl	d94 <__aeabi_fmul>
   122a4:	21fc      	movs	r1, #252	; 0xfc
   122a6:	0589      	lsls	r1, r1, #22
   122a8:	f7ee fa24 	bl	6f4 <__aeabi_fadd>
   122ac:	f7ef f812 	bl	12d4 <__aeabi_f2iz>
   122b0:	1c07      	adds	r7, r0, #0
   122b2:	f7ef f82f 	bl	1314 <__aeabi_i2f>
   122b6:	495c      	ldr	r1, [pc, #368]	; (12428 <__ieee754_rem_pio2f+0x2c8>)
   122b8:	4681      	mov	r9, r0
   122ba:	f7ee fd6b 	bl	d94 <__aeabi_fmul>
   122be:	1c01      	adds	r1, r0, #0
   122c0:	4640      	mov	r0, r8
   122c2:	f7ee fe91 	bl	fe8 <__aeabi_fsub>
   122c6:	495a      	ldr	r1, [pc, #360]	; (12430 <__ieee754_rem_pio2f+0x2d0>)
   122c8:	4680      	mov	r8, r0
   122ca:	4648      	mov	r0, r9
   122cc:	f7ee fd62 	bl	d94 <__aeabi_fmul>
   122d0:	4682      	mov	sl, r0
   122d2:	4640      	mov	r0, r8
   122d4:	2f1f      	cmp	r7, #31
   122d6:	dc22      	bgt.n	1231e <__ieee754_rem_pio2f+0x1be>
   122d8:	23ff      	movs	r3, #255	; 0xff
   122da:	1c32      	adds	r2, r6, #0
   122dc:	439a      	bics	r2, r3
   122de:	1e79      	subs	r1, r7, #1
   122e0:	4b5a      	ldr	r3, [pc, #360]	; (1244c <__ieee754_rem_pio2f+0x2ec>)
   122e2:	0089      	lsls	r1, r1, #2
   122e4:	58cb      	ldr	r3, [r1, r3]
   122e6:	429a      	cmp	r2, r3
   122e8:	d019      	beq.n	1231e <__ieee754_rem_pio2f+0x1be>
   122ea:	4651      	mov	r1, sl
   122ec:	f7ee fe7c 	bl	fe8 <__aeabi_fsub>
   122f0:	4683      	mov	fp, r0
   122f2:	6020      	str	r0, [r4, #0]
   122f4:	4659      	mov	r1, fp
   122f6:	4640      	mov	r0, r8
   122f8:	f7ee fe76 	bl	fe8 <__aeabi_fsub>
   122fc:	4651      	mov	r1, sl
   122fe:	f7ee fe73 	bl	fe8 <__aeabi_fsub>
   12302:	1c03      	adds	r3, r0, #0
   12304:	6060      	str	r0, [r4, #4]
   12306:	1c38      	adds	r0, r7, #0
   12308:	2d00      	cmp	r5, #0
   1230a:	daa5      	bge.n	12258 <__ieee754_rem_pio2f+0xf8>
   1230c:	2180      	movs	r1, #128	; 0x80
   1230e:	0609      	lsls	r1, r1, #24
   12310:	1c0e      	adds	r6, r1, #0
   12312:	445e      	add	r6, fp
   12314:	185b      	adds	r3, r3, r1
   12316:	6026      	str	r6, [r4, #0]
   12318:	6063      	str	r3, [r4, #4]
   1231a:	4278      	negs	r0, r7
   1231c:	e79c      	b.n	12258 <__ieee754_rem_pio2f+0xf8>
   1231e:	4651      	mov	r1, sl
   12320:	f7ee fe62 	bl	fe8 <__aeabi_fsub>
   12324:	22ff      	movs	r2, #255	; 0xff
   12326:	0dc3      	lsrs	r3, r0, #23
   12328:	15f6      	asrs	r6, r6, #23
   1232a:	4013      	ands	r3, r2
   1232c:	4683      	mov	fp, r0
   1232e:	9602      	str	r6, [sp, #8]
   12330:	1af3      	subs	r3, r6, r3
   12332:	2b08      	cmp	r3, #8
   12334:	dd41      	ble.n	123ba <__ieee754_rem_pio2f+0x25a>
   12336:	4942      	ldr	r1, [pc, #264]	; (12440 <__ieee754_rem_pio2f+0x2e0>)
   12338:	4648      	mov	r0, r9
   1233a:	f7ee fd2b 	bl	d94 <__aeabi_fmul>
   1233e:	1c06      	adds	r6, r0, #0
   12340:	1c31      	adds	r1, r6, #0
   12342:	4640      	mov	r0, r8
   12344:	f7ee fe50 	bl	fe8 <__aeabi_fsub>
   12348:	9003      	str	r0, [sp, #12]
   1234a:	9903      	ldr	r1, [sp, #12]
   1234c:	4640      	mov	r0, r8
   1234e:	f7ee fe4b 	bl	fe8 <__aeabi_fsub>
   12352:	1c31      	adds	r1, r6, #0
   12354:	f7ee fe48 	bl	fe8 <__aeabi_fsub>
   12358:	493a      	ldr	r1, [pc, #232]	; (12444 <__ieee754_rem_pio2f+0x2e4>)
   1235a:	1c06      	adds	r6, r0, #0
   1235c:	4648      	mov	r0, r9
   1235e:	f7ee fd19 	bl	d94 <__aeabi_fmul>
   12362:	1c31      	adds	r1, r6, #0
   12364:	f7ee fe40 	bl	fe8 <__aeabi_fsub>
   12368:	4682      	mov	sl, r0
   1236a:	4651      	mov	r1, sl
   1236c:	9803      	ldr	r0, [sp, #12]
   1236e:	f7ee fe3b 	bl	fe8 <__aeabi_fsub>
   12372:	22ff      	movs	r2, #255	; 0xff
   12374:	0dc3      	lsrs	r3, r0, #23
   12376:	9902      	ldr	r1, [sp, #8]
   12378:	4013      	ands	r3, r2
   1237a:	4683      	mov	fp, r0
   1237c:	1acb      	subs	r3, r1, r3
   1237e:	2b19      	cmp	r3, #25
   12380:	dc32      	bgt.n	123e8 <__ieee754_rem_pio2f+0x288>
   12382:	9b03      	ldr	r3, [sp, #12]
   12384:	6020      	str	r0, [r4, #0]
   12386:	4698      	mov	r8, r3
   12388:	e7b4      	b.n	122f4 <__ieee754_rem_pio2f+0x194>
   1238a:	f7ee f9b3 	bl	6f4 <__aeabi_fadd>
   1238e:	230f      	movs	r3, #15
   12390:	1c32      	adds	r2, r6, #0
   12392:	439a      	bics	r2, r3
   12394:	4b25      	ldr	r3, [pc, #148]	; (1242c <__ieee754_rem_pio2f+0x2cc>)
   12396:	1c05      	adds	r5, r0, #0
   12398:	429a      	cmp	r2, r3
   1239a:	d012      	beq.n	123c2 <__ieee754_rem_pio2f+0x262>
   1239c:	4924      	ldr	r1, [pc, #144]	; (12430 <__ieee754_rem_pio2f+0x2d0>)
   1239e:	f7ee f9a9 	bl	6f4 <__aeabi_fadd>
   123a2:	1c01      	adds	r1, r0, #0
   123a4:	6020      	str	r0, [r4, #0]
   123a6:	1c28      	adds	r0, r5, #0
   123a8:	f7ee fe1e 	bl	fe8 <__aeabi_fsub>
   123ac:	4920      	ldr	r1, [pc, #128]	; (12430 <__ieee754_rem_pio2f+0x2d0>)
   123ae:	f7ee f9a1 	bl	6f4 <__aeabi_fadd>
   123b2:	6060      	str	r0, [r4, #4]
   123b4:	2001      	movs	r0, #1
   123b6:	4240      	negs	r0, r0
   123b8:	e74e      	b.n	12258 <__ieee754_rem_pio2f+0xf8>
   123ba:	6020      	str	r0, [r4, #0]
   123bc:	e79a      	b.n	122f4 <__ieee754_rem_pio2f+0x194>
   123be:	2303      	movs	r3, #3
   123c0:	e731      	b.n	12226 <__ieee754_rem_pio2f+0xc6>
   123c2:	491f      	ldr	r1, [pc, #124]	; (12440 <__ieee754_rem_pio2f+0x2e0>)
   123c4:	f7ee f996 	bl	6f4 <__aeabi_fadd>
   123c8:	491e      	ldr	r1, [pc, #120]	; (12444 <__ieee754_rem_pio2f+0x2e4>)
   123ca:	1c05      	adds	r5, r0, #0
   123cc:	f7ee f992 	bl	6f4 <__aeabi_fadd>
   123d0:	1c01      	adds	r1, r0, #0
   123d2:	6020      	str	r0, [r4, #0]
   123d4:	1c28      	adds	r0, r5, #0
   123d6:	f7ee fe07 	bl	fe8 <__aeabi_fsub>
   123da:	491a      	ldr	r1, [pc, #104]	; (12444 <__ieee754_rem_pio2f+0x2e4>)
   123dc:	f7ee f98a 	bl	6f4 <__aeabi_fadd>
   123e0:	6060      	str	r0, [r4, #4]
   123e2:	2001      	movs	r0, #1
   123e4:	4240      	negs	r0, r0
   123e6:	e737      	b.n	12258 <__ieee754_rem_pio2f+0xf8>
   123e8:	4919      	ldr	r1, [pc, #100]	; (12450 <__ieee754_rem_pio2f+0x2f0>)
   123ea:	4648      	mov	r0, r9
   123ec:	f7ee fcd2 	bl	d94 <__aeabi_fmul>
   123f0:	1c06      	adds	r6, r0, #0
   123f2:	1c31      	adds	r1, r6, #0
   123f4:	9803      	ldr	r0, [sp, #12]
   123f6:	f7ee fdf7 	bl	fe8 <__aeabi_fsub>
   123fa:	4680      	mov	r8, r0
   123fc:	4641      	mov	r1, r8
   123fe:	9803      	ldr	r0, [sp, #12]
   12400:	f7ee fdf2 	bl	fe8 <__aeabi_fsub>
   12404:	1c31      	adds	r1, r6, #0
   12406:	f7ee fdef 	bl	fe8 <__aeabi_fsub>
   1240a:	4912      	ldr	r1, [pc, #72]	; (12454 <__ieee754_rem_pio2f+0x2f4>)
   1240c:	1c06      	adds	r6, r0, #0
   1240e:	4648      	mov	r0, r9
   12410:	f7ee fcc0 	bl	d94 <__aeabi_fmul>
   12414:	1c31      	adds	r1, r6, #0
   12416:	f7ee fde7 	bl	fe8 <__aeabi_fsub>
   1241a:	4682      	mov	sl, r0
   1241c:	4640      	mov	r0, r8
   1241e:	e764      	b.n	122ea <__ieee754_rem_pio2f+0x18a>
   12420:	3f490fd8 	.word	0x3f490fd8
   12424:	4016cbe3 	.word	0x4016cbe3
   12428:	3fc90f80 	.word	0x3fc90f80
   1242c:	3fc90fd0 	.word	0x3fc90fd0
   12430:	37354443 	.word	0x37354443
   12434:	43490f80 	.word	0x43490f80
   12438:	7f7fffff 	.word	0x7f7fffff
   1243c:	00013570 	.word	0x00013570
   12440:	37354400 	.word	0x37354400
   12444:	2e85a308 	.word	0x2e85a308
   12448:	3f22f984 	.word	0x3f22f984
   1244c:	000134f0 	.word	0x000134f0
   12450:	2e85a300 	.word	0x2e85a300
   12454:	248d3132 	.word	0x248d3132

00012458 <__ieee754_sqrtf>:
__ieee754_sqrtf():
   12458:	492c      	ldr	r1, [pc, #176]	; (1250c <__ieee754_sqrtf+0xb4>)
   1245a:	0042      	lsls	r2, r0, #1
   1245c:	b570      	push	{r4, r5, r6, lr}
   1245e:	1c03      	adds	r3, r0, #0
   12460:	1c04      	adds	r4, r0, #0
   12462:	0852      	lsrs	r2, r2, #1
   12464:	428a      	cmp	r2, r1
   12466:	d83c      	bhi.n	124e2 <__ieee754_sqrtf+0x8a>
   12468:	1c01      	adds	r1, r0, #0
   1246a:	2a00      	cmp	r2, #0
   1246c:	d037      	beq.n	124de <__ieee754_sqrtf+0x86>
   1246e:	2800      	cmp	r0, #0
   12470:	db41      	blt.n	124f6 <__ieee754_sqrtf+0x9e>
   12472:	4927      	ldr	r1, [pc, #156]	; (12510 <__ieee754_sqrtf+0xb8>)
   12474:	15c0      	asrs	r0, r0, #23
   12476:	428a      	cmp	r2, r1
   12478:	d80b      	bhi.n	12492 <__ieee754_sqrtf+0x3a>
   1247a:	2180      	movs	r1, #128	; 0x80
   1247c:	0409      	lsls	r1, r1, #16
   1247e:	4221      	tst	r1, r4
   12480:	d140      	bne.n	12504 <__ieee754_sqrtf+0xac>
   12482:	2200      	movs	r2, #0
   12484:	005b      	lsls	r3, r3, #1
   12486:	3201      	adds	r2, #1
   12488:	420b      	tst	r3, r1
   1248a:	d0fb      	beq.n	12484 <__ieee754_sqrtf+0x2c>
   1248c:	2101      	movs	r1, #1
   1248e:	1a8a      	subs	r2, r1, r2
   12490:	1880      	adds	r0, r0, r2
   12492:	025b      	lsls	r3, r3, #9
   12494:	0a5a      	lsrs	r2, r3, #9
   12496:	1c01      	adds	r1, r0, #0
   12498:	2380      	movs	r3, #128	; 0x80
   1249a:	041b      	lsls	r3, r3, #16
   1249c:	397f      	subs	r1, #127	; 0x7f
   1249e:	4313      	orrs	r3, r2
   124a0:	07ca      	lsls	r2, r1, #31
   124a2:	d426      	bmi.n	124f2 <__ieee754_sqrtf+0x9a>
   124a4:	2280      	movs	r2, #128	; 0x80
   124a6:	1048      	asrs	r0, r1, #1
   124a8:	005b      	lsls	r3, r3, #1
   124aa:	2119      	movs	r1, #25
   124ac:	2600      	movs	r6, #0
   124ae:	2500      	movs	r5, #0
   124b0:	0452      	lsls	r2, r2, #17
   124b2:	18ac      	adds	r4, r5, r2
   124b4:	429c      	cmp	r4, r3
   124b6:	dc02      	bgt.n	124be <__ieee754_sqrtf+0x66>
   124b8:	18a5      	adds	r5, r4, r2
   124ba:	1b1b      	subs	r3, r3, r4
   124bc:	18b6      	adds	r6, r6, r2
   124be:	3901      	subs	r1, #1
   124c0:	005b      	lsls	r3, r3, #1
   124c2:	0852      	lsrs	r2, r2, #1
   124c4:	2900      	cmp	r1, #0
   124c6:	d1f4      	bne.n	124b2 <__ieee754_sqrtf+0x5a>
   124c8:	2b00      	cmp	r3, #0
   124ca:	d002      	beq.n	124d2 <__ieee754_sqrtf+0x7a>
   124cc:	2301      	movs	r3, #1
   124ce:	4033      	ands	r3, r6
   124d0:	18f6      	adds	r6, r6, r3
   124d2:	23fc      	movs	r3, #252	; 0xfc
   124d4:	1076      	asrs	r6, r6, #1
   124d6:	059b      	lsls	r3, r3, #22
   124d8:	18f6      	adds	r6, r6, r3
   124da:	05c1      	lsls	r1, r0, #23
   124dc:	1989      	adds	r1, r1, r6
   124de:	1c08      	adds	r0, r1, #0
   124e0:	bd70      	pop	{r4, r5, r6, pc}
   124e2:	1c21      	adds	r1, r4, #0
   124e4:	f7ee fc56 	bl	d94 <__aeabi_fmul>
   124e8:	1c21      	adds	r1, r4, #0
   124ea:	f7ee f903 	bl	6f4 <__aeabi_fadd>
   124ee:	1c01      	adds	r1, r0, #0
   124f0:	e7f5      	b.n	124de <__ieee754_sqrtf+0x86>
   124f2:	005b      	lsls	r3, r3, #1
   124f4:	e7d6      	b.n	124a4 <__ieee754_sqrtf+0x4c>
   124f6:	f7ee fd77 	bl	fe8 <__aeabi_fsub>
   124fa:	1c01      	adds	r1, r0, #0
   124fc:	f7ee fa66 	bl	9cc <__aeabi_fdiv>
   12500:	1c01      	adds	r1, r0, #0
   12502:	e7ec      	b.n	124de <__ieee754_sqrtf+0x86>
   12504:	2201      	movs	r2, #1
   12506:	1880      	adds	r0, r0, r2
   12508:	e7c3      	b.n	12492 <__ieee754_sqrtf+0x3a>
   1250a:	46c0      	nop			; (mov r8, r8)
   1250c:	7f7fffff 	.word	0x7f7fffff
   12510:	007fffff 	.word	0x007fffff

00012514 <__kernel_cosf>:
__kernel_cosf():
   12514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12516:	464f      	mov	r7, r9
   12518:	4646      	mov	r6, r8
   1251a:	4b57      	ldr	r3, [pc, #348]	; (12678 <__kernel_cosf+0x164>)
   1251c:	b4c0      	push	{r6, r7}
   1251e:	0046      	lsls	r6, r0, #1
   12520:	1c05      	adds	r5, r0, #0
   12522:	1c0f      	adds	r7, r1, #0
   12524:	0876      	lsrs	r6, r6, #1
   12526:	429e      	cmp	r6, r3
   12528:	dc48      	bgt.n	125bc <__kernel_cosf+0xa8>
   1252a:	f7ee fed3 	bl	12d4 <__aeabi_f2iz>
   1252e:	2800      	cmp	r0, #0
   12530:	d100      	bne.n	12534 <__kernel_cosf+0x20>
   12532:	e09e      	b.n	12672 <__kernel_cosf+0x15e>
   12534:	1c29      	adds	r1, r5, #0
   12536:	1c28      	adds	r0, r5, #0
   12538:	f7ee fc2c 	bl	d94 <__aeabi_fmul>
   1253c:	494f      	ldr	r1, [pc, #316]	; (1267c <__kernel_cosf+0x168>)
   1253e:	1c04      	adds	r4, r0, #0
   12540:	f7ee fc28 	bl	d94 <__aeabi_fmul>
   12544:	494e      	ldr	r1, [pc, #312]	; (12680 <__kernel_cosf+0x16c>)
   12546:	f7ee f8d5 	bl	6f4 <__aeabi_fadd>
   1254a:	1c21      	adds	r1, r4, #0
   1254c:	f7ee fc22 	bl	d94 <__aeabi_fmul>
   12550:	494c      	ldr	r1, [pc, #304]	; (12684 <__kernel_cosf+0x170>)
   12552:	f7ee fd49 	bl	fe8 <__aeabi_fsub>
   12556:	1c21      	adds	r1, r4, #0
   12558:	f7ee fc1c 	bl	d94 <__aeabi_fmul>
   1255c:	494a      	ldr	r1, [pc, #296]	; (12688 <__kernel_cosf+0x174>)
   1255e:	f7ee f8c9 	bl	6f4 <__aeabi_fadd>
   12562:	1c21      	adds	r1, r4, #0
   12564:	f7ee fc16 	bl	d94 <__aeabi_fmul>
   12568:	4948      	ldr	r1, [pc, #288]	; (1268c <__kernel_cosf+0x178>)
   1256a:	f7ee fd3d 	bl	fe8 <__aeabi_fsub>
   1256e:	1c21      	adds	r1, r4, #0
   12570:	f7ee fc10 	bl	d94 <__aeabi_fmul>
   12574:	4946      	ldr	r1, [pc, #280]	; (12690 <__kernel_cosf+0x17c>)
   12576:	f7ee f8bd 	bl	6f4 <__aeabi_fadd>
   1257a:	1c21      	adds	r1, r4, #0
   1257c:	f7ee fc0a 	bl	d94 <__aeabi_fmul>
   12580:	4680      	mov	r8, r0
   12582:	21fc      	movs	r1, #252	; 0xfc
   12584:	1c20      	adds	r0, r4, #0
   12586:	0589      	lsls	r1, r1, #22
   12588:	f7ee fc04 	bl	d94 <__aeabi_fmul>
   1258c:	4641      	mov	r1, r8
   1258e:	1c06      	adds	r6, r0, #0
   12590:	1c20      	adds	r0, r4, #0
   12592:	f7ee fbff 	bl	d94 <__aeabi_fmul>
   12596:	1c39      	adds	r1, r7, #0
   12598:	1c04      	adds	r4, r0, #0
   1259a:	1c28      	adds	r0, r5, #0
   1259c:	f7ee fbfa 	bl	d94 <__aeabi_fmul>
   125a0:	1c01      	adds	r1, r0, #0
   125a2:	1c20      	adds	r0, r4, #0
   125a4:	f7ee fd20 	bl	fe8 <__aeabi_fsub>
   125a8:	1c01      	adds	r1, r0, #0
   125aa:	1c30      	adds	r0, r6, #0
   125ac:	f7ee fd1c 	bl	fe8 <__aeabi_fsub>
   125b0:	1c01      	adds	r1, r0, #0
   125b2:	20fe      	movs	r0, #254	; 0xfe
   125b4:	0580      	lsls	r0, r0, #22
   125b6:	f7ee fd17 	bl	fe8 <__aeabi_fsub>
   125ba:	e052      	b.n	12662 <__kernel_cosf+0x14e>
   125bc:	1c29      	adds	r1, r5, #0
   125be:	f7ee fbe9 	bl	d94 <__aeabi_fmul>
   125c2:	492e      	ldr	r1, [pc, #184]	; (1267c <__kernel_cosf+0x168>)
   125c4:	1c04      	adds	r4, r0, #0
   125c6:	f7ee fbe5 	bl	d94 <__aeabi_fmul>
   125ca:	492d      	ldr	r1, [pc, #180]	; (12680 <__kernel_cosf+0x16c>)
   125cc:	f7ee f892 	bl	6f4 <__aeabi_fadd>
   125d0:	1c21      	adds	r1, r4, #0
   125d2:	f7ee fbdf 	bl	d94 <__aeabi_fmul>
   125d6:	492b      	ldr	r1, [pc, #172]	; (12684 <__kernel_cosf+0x170>)
   125d8:	f7ee fd06 	bl	fe8 <__aeabi_fsub>
   125dc:	1c21      	adds	r1, r4, #0
   125de:	f7ee fbd9 	bl	d94 <__aeabi_fmul>
   125e2:	4929      	ldr	r1, [pc, #164]	; (12688 <__kernel_cosf+0x174>)
   125e4:	f7ee f886 	bl	6f4 <__aeabi_fadd>
   125e8:	1c21      	adds	r1, r4, #0
   125ea:	f7ee fbd3 	bl	d94 <__aeabi_fmul>
   125ee:	4927      	ldr	r1, [pc, #156]	; (1268c <__kernel_cosf+0x178>)
   125f0:	f7ee fcfa 	bl	fe8 <__aeabi_fsub>
   125f4:	1c21      	adds	r1, r4, #0
   125f6:	f7ee fbcd 	bl	d94 <__aeabi_fmul>
   125fa:	4925      	ldr	r1, [pc, #148]	; (12690 <__kernel_cosf+0x17c>)
   125fc:	f7ee f87a 	bl	6f4 <__aeabi_fadd>
   12600:	1c21      	adds	r1, r4, #0
   12602:	f7ee fbc7 	bl	d94 <__aeabi_fmul>
   12606:	4b23      	ldr	r3, [pc, #140]	; (12694 <__kernel_cosf+0x180>)
   12608:	4680      	mov	r8, r0
   1260a:	429e      	cmp	r6, r3
   1260c:	ddb9      	ble.n	12582 <__kernel_cosf+0x6e>
   1260e:	4b22      	ldr	r3, [pc, #136]	; (12698 <__kernel_cosf+0x184>)
   12610:	429e      	cmp	r6, r3
   12612:	dc2a      	bgt.n	1266a <__kernel_cosf+0x156>
   12614:	23ff      	movs	r3, #255	; 0xff
   12616:	061b      	lsls	r3, r3, #24
   12618:	18f6      	adds	r6, r6, r3
   1261a:	20fe      	movs	r0, #254	; 0xfe
   1261c:	0580      	lsls	r0, r0, #22
   1261e:	1c31      	adds	r1, r6, #0
   12620:	f7ee fce2 	bl	fe8 <__aeabi_fsub>
   12624:	4681      	mov	r9, r0
   12626:	21fc      	movs	r1, #252	; 0xfc
   12628:	1c20      	adds	r0, r4, #0
   1262a:	0589      	lsls	r1, r1, #22
   1262c:	f7ee fbb2 	bl	d94 <__aeabi_fmul>
   12630:	1c31      	adds	r1, r6, #0
   12632:	f7ee fcd9 	bl	fe8 <__aeabi_fsub>
   12636:	4641      	mov	r1, r8
   12638:	1c06      	adds	r6, r0, #0
   1263a:	1c20      	adds	r0, r4, #0
   1263c:	f7ee fbaa 	bl	d94 <__aeabi_fmul>
   12640:	1c39      	adds	r1, r7, #0
   12642:	1c04      	adds	r4, r0, #0
   12644:	1c28      	adds	r0, r5, #0
   12646:	f7ee fba5 	bl	d94 <__aeabi_fmul>
   1264a:	1c01      	adds	r1, r0, #0
   1264c:	1c20      	adds	r0, r4, #0
   1264e:	f7ee fccb 	bl	fe8 <__aeabi_fsub>
   12652:	1c01      	adds	r1, r0, #0
   12654:	1c30      	adds	r0, r6, #0
   12656:	f7ee fcc7 	bl	fe8 <__aeabi_fsub>
   1265a:	1c01      	adds	r1, r0, #0
   1265c:	4648      	mov	r0, r9
   1265e:	f7ee fcc3 	bl	fe8 <__aeabi_fsub>
   12662:	bc0c      	pop	{r2, r3}
   12664:	4690      	mov	r8, r2
   12666:	4699      	mov	r9, r3
   12668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1266a:	4b0c      	ldr	r3, [pc, #48]	; (1269c <__kernel_cosf+0x188>)
   1266c:	4e0c      	ldr	r6, [pc, #48]	; (126a0 <__kernel_cosf+0x18c>)
   1266e:	4699      	mov	r9, r3
   12670:	e7d9      	b.n	12626 <__kernel_cosf+0x112>
   12672:	20fe      	movs	r0, #254	; 0xfe
   12674:	0580      	lsls	r0, r0, #22
   12676:	e7f4      	b.n	12662 <__kernel_cosf+0x14e>
   12678:	31ffffff 	.word	0x31ffffff
   1267c:	ad47d74e 	.word	0xad47d74e
   12680:	310f74f6 	.word	0x310f74f6
   12684:	3493f27c 	.word	0x3493f27c
   12688:	37d00d01 	.word	0x37d00d01
   1268c:	3ab60b61 	.word	0x3ab60b61
   12690:	3d2aaaab 	.word	0x3d2aaaab
   12694:	3e999999 	.word	0x3e999999
   12698:	3f480000 	.word	0x3f480000
   1269c:	3f380000 	.word	0x3f380000
   126a0:	3e900000 	.word	0x3e900000

000126a4 <__kernel_rem_pio2f>:
__kernel_rem_pio2f():
   126a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   126a6:	4656      	mov	r6, sl
   126a8:	464d      	mov	r5, r9
   126aa:	4644      	mov	r4, r8
   126ac:	465f      	mov	r7, fp
   126ae:	b4f0      	push	{r4, r5, r6, r7}
   126b0:	b0df      	sub	sp, #380	; 0x17c
   126b2:	9c68      	ldr	r4, [sp, #416]	; 0x1a0
   126b4:	930c      	str	r3, [sp, #48]	; 0x30
   126b6:	4bc1      	ldr	r3, [pc, #772]	; (129bc <__kernel_rem_pio2f+0x318>)
   126b8:	910a      	str	r1, [sp, #40]	; 0x28
   126ba:	00a1      	lsls	r1, r4, #2
   126bc:	58c9      	ldr	r1, [r1, r3]
   126be:	1ed3      	subs	r3, r2, #3
   126c0:	9107      	str	r1, [sp, #28]
   126c2:	17d9      	asrs	r1, r3, #31
   126c4:	0f49      	lsrs	r1, r1, #29
   126c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   126c8:	18cb      	adds	r3, r1, r3
   126ca:	10db      	asrs	r3, r3, #3
   126cc:	930b      	str	r3, [sp, #44]	; 0x2c
   126ce:	3c01      	subs	r4, #1
   126d0:	9404      	str	r4, [sp, #16]
   126d2:	43db      	mvns	r3, r3
   126d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   126d6:	17db      	asrs	r3, r3, #31
   126d8:	401c      	ands	r4, r3
   126da:	4682      	mov	sl, r0
   126dc:	9804      	ldr	r0, [sp, #16]
   126de:	43e3      	mvns	r3, r4
   126e0:	940b      	str	r4, [sp, #44]	; 0x2c
   126e2:	00db      	lsls	r3, r3, #3
   126e4:	1a25      	subs	r5, r4, r0
   126e6:	9c07      	ldr	r4, [sp, #28]
   126e8:	189b      	adds	r3, r3, r2
   126ea:	9306      	str	r3, [sp, #24]
   126ec:	1907      	adds	r7, r0, r4
   126ee:	d419      	bmi.n	12724 <__kernel_rem_pio2f+0x80>
   126f0:	9c69      	ldr	r4, [sp, #420]	; 0x1a4
   126f2:	00ab      	lsls	r3, r5, #2
   126f4:	18e4      	adds	r4, r4, r3
   126f6:	197f      	adds	r7, r7, r5
   126f8:	46a0      	mov	r8, r4
   126fa:	3701      	adds	r7, #1
   126fc:	2600      	movs	r6, #0
   126fe:	ac22      	add	r4, sp, #136	; 0x88
   12700:	e008      	b.n	12714 <__kernel_rem_pio2f+0x70>
   12702:	4641      	mov	r1, r8
   12704:	5988      	ldr	r0, [r1, r6]
   12706:	f7ee fe05 	bl	1314 <__aeabi_i2f>
   1270a:	3501      	adds	r5, #1
   1270c:	51a0      	str	r0, [r4, r6]
   1270e:	3604      	adds	r6, #4
   12710:	42bd      	cmp	r5, r7
   12712:	d007      	beq.n	12724 <__kernel_rem_pio2f+0x80>
   12714:	2d00      	cmp	r5, #0
   12716:	daf4      	bge.n	12702 <__kernel_rem_pio2f+0x5e>
   12718:	2000      	movs	r0, #0
   1271a:	3501      	adds	r5, #1
   1271c:	51a0      	str	r0, [r4, r6]
   1271e:	3604      	adds	r6, #4
   12720:	42bd      	cmp	r5, r7
   12722:	d1f7      	bne.n	12714 <__kernel_rem_pio2f+0x70>
   12724:	9c07      	ldr	r4, [sp, #28]
   12726:	2c00      	cmp	r4, #0
   12728:	da00      	bge.n	1272c <__kernel_rem_pio2f+0x88>
   1272a:	e2fc      	b.n	12d26 <__kernel_rem_pio2f+0x682>
   1272c:	9b07      	ldr	r3, [sp, #28]
   1272e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   12730:	3301      	adds	r3, #1
   12732:	00a7      	lsls	r7, r4, #2
   12734:	009b      	lsls	r3, r3, #2
   12736:	a85e      	add	r0, sp, #376	; 0x178
   12738:	4698      	mov	r8, r3
   1273a:	19c3      	adds	r3, r0, r7
   1273c:	3bf4      	subs	r3, #244	; 0xf4
   1273e:	2100      	movs	r1, #0
   12740:	ac4a      	add	r4, sp, #296	; 0x128
   12742:	4699      	mov	r9, r3
   12744:	1c3b      	adds	r3, r7, #0
   12746:	468b      	mov	fp, r1
   12748:	4657      	mov	r7, sl
   1274a:	9408      	str	r4, [sp, #32]
   1274c:	469a      	mov	sl, r3
   1274e:	9c04      	ldr	r4, [sp, #16]
   12750:	2c00      	cmp	r4, #0
   12752:	da00      	bge.n	12756 <__kernel_rem_pio2f+0xb2>
   12754:	e21e      	b.n	12b94 <__kernel_rem_pio2f+0x4f0>
   12756:	464d      	mov	r5, r9
   12758:	445d      	add	r5, fp
   1275a:	2400      	movs	r4, #0
   1275c:	2600      	movs	r6, #0
   1275e:	6829      	ldr	r1, [r5, #0]
   12760:	5938      	ldr	r0, [r7, r4]
   12762:	f7ee fb17 	bl	d94 <__aeabi_fmul>
   12766:	1c01      	adds	r1, r0, #0
   12768:	1c30      	adds	r0, r6, #0
   1276a:	f7ed ffc3 	bl	6f4 <__aeabi_fadd>
   1276e:	3404      	adds	r4, #4
   12770:	1c06      	adds	r6, r0, #0
   12772:	3d04      	subs	r5, #4
   12774:	4554      	cmp	r4, sl
   12776:	d1f2      	bne.n	1275e <__kernel_rem_pio2f+0xba>
   12778:	9c08      	ldr	r4, [sp, #32]
   1277a:	2104      	movs	r1, #4
   1277c:	4658      	mov	r0, fp
   1277e:	448b      	add	fp, r1
   12780:	5026      	str	r6, [r4, r0]
   12782:	45c3      	cmp	fp, r8
   12784:	d1e3      	bne.n	1274e <__kernel_rem_pio2f+0xaa>
   12786:	4653      	mov	r3, sl
   12788:	46ba      	mov	sl, r7
   1278a:	1c1f      	adds	r7, r3, #0
   1278c:	9c07      	ldr	r4, [sp, #28]
   1278e:	9807      	ldr	r0, [sp, #28]
   12790:	00a3      	lsls	r3, r4, #2
   12792:	ac0d      	add	r4, sp, #52	; 0x34
   12794:	18e4      	adds	r4, r4, r3
   12796:	46b8      	mov	r8, r7
   12798:	940d      	str	r4, [sp, #52]	; 0x34
   1279a:	4683      	mov	fp, r0
   1279c:	4657      	mov	r7, sl
   1279e:	465c      	mov	r4, fp
   127a0:	9808      	ldr	r0, [sp, #32]
   127a2:	00a4      	lsls	r4, r4, #2
   127a4:	4659      	mov	r1, fp
   127a6:	9403      	str	r4, [sp, #12]
   127a8:	5904      	ldr	r4, [r0, r4]
   127aa:	2900      	cmp	r1, #0
   127ac:	dd26      	ble.n	127fc <__kernel_rem_pio2f+0x158>
   127ae:	465d      	mov	r5, fp
   127b0:	ae0e      	add	r6, sp, #56	; 0x38
   127b2:	3d01      	subs	r5, #1
   127b4:	9a03      	ldr	r2, [sp, #12]
   127b6:	00ad      	lsls	r5, r5, #2
   127b8:	46b2      	mov	sl, r6
   127ba:	1945      	adds	r5, r0, r5
   127bc:	4492      	add	sl, r2
   127be:	46b9      	mov	r9, r7
   127c0:	21ee      	movs	r1, #238	; 0xee
   127c2:	0589      	lsls	r1, r1, #22
   127c4:	1c20      	adds	r0, r4, #0
   127c6:	f7ee fae5 	bl	d94 <__aeabi_fmul>
   127ca:	f7ee fd83 	bl	12d4 <__aeabi_f2iz>
   127ce:	f7ee fda1 	bl	1314 <__aeabi_i2f>
   127d2:	2187      	movs	r1, #135	; 0x87
   127d4:	05c9      	lsls	r1, r1, #23
   127d6:	1c07      	adds	r7, r0, #0
   127d8:	f7ee fadc 	bl	d94 <__aeabi_fmul>
   127dc:	1c01      	adds	r1, r0, #0
   127de:	1c20      	adds	r0, r4, #0
   127e0:	f7ee fc02 	bl	fe8 <__aeabi_fsub>
   127e4:	f7ee fd76 	bl	12d4 <__aeabi_f2iz>
   127e8:	6829      	ldr	r1, [r5, #0]
   127ea:	c601      	stmia	r6!, {r0}
   127ec:	1c38      	adds	r0, r7, #0
   127ee:	f7ed ff81 	bl	6f4 <__aeabi_fadd>
   127f2:	3d04      	subs	r5, #4
   127f4:	1c04      	adds	r4, r0, #0
   127f6:	4556      	cmp	r6, sl
   127f8:	d1e2      	bne.n	127c0 <__kernel_rem_pio2f+0x11c>
   127fa:	464f      	mov	r7, r9
   127fc:	1c20      	adds	r0, r4, #0
   127fe:	9906      	ldr	r1, [sp, #24]
   12800:	f000 fc5c 	bl	130bc <scalbnf>
   12804:	21f8      	movs	r1, #248	; 0xf8
   12806:	0589      	lsls	r1, r1, #22
   12808:	1c04      	adds	r4, r0, #0
   1280a:	f7ee fac3 	bl	d94 <__aeabi_fmul>
   1280e:	f000 fbe7 	bl	12fe0 <floorf>
   12812:	2182      	movs	r1, #130	; 0x82
   12814:	05c9      	lsls	r1, r1, #23
   12816:	f7ee fabd 	bl	d94 <__aeabi_fmul>
   1281a:	1c01      	adds	r1, r0, #0
   1281c:	1c20      	adds	r0, r4, #0
   1281e:	f7ee fbe3 	bl	fe8 <__aeabi_fsub>
   12822:	1c04      	adds	r4, r0, #0
   12824:	f7ee fd56 	bl	12d4 <__aeabi_f2iz>
   12828:	1c06      	adds	r6, r0, #0
   1282a:	f7ee fd73 	bl	1314 <__aeabi_i2f>
   1282e:	1c01      	adds	r1, r0, #0
   12830:	1c20      	adds	r0, r4, #0
   12832:	f7ee fbd9 	bl	fe8 <__aeabi_fsub>
   12836:	9c06      	ldr	r4, [sp, #24]
   12838:	1c05      	adds	r5, r0, #0
   1283a:	2c00      	cmp	r4, #0
   1283c:	dc00      	bgt.n	12840 <__kernel_rem_pio2f+0x19c>
   1283e:	e18b      	b.n	12b58 <__kernel_rem_pio2f+0x4b4>
   12840:	465a      	mov	r2, fp
   12842:	3a01      	subs	r2, #1
   12844:	0092      	lsls	r2, r2, #2
   12846:	a80e      	add	r0, sp, #56	; 0x38
   12848:	5883      	ldr	r3, [r0, r2]
   1284a:	2108      	movs	r1, #8
   1284c:	1b09      	subs	r1, r1, r4
   1284e:	1c18      	adds	r0, r3, #0
   12850:	4108      	asrs	r0, r1
   12852:	1836      	adds	r6, r6, r0
   12854:	4088      	lsls	r0, r1
   12856:	1a1b      	subs	r3, r3, r0
   12858:	a90e      	add	r1, sp, #56	; 0x38
   1285a:	508b      	str	r3, [r1, r2]
   1285c:	2207      	movs	r2, #7
   1285e:	1b12      	subs	r2, r2, r4
   12860:	4113      	asrs	r3, r2
   12862:	9305      	str	r3, [sp, #20]
   12864:	9c05      	ldr	r4, [sp, #20]
   12866:	2c00      	cmp	r4, #0
   12868:	dd33      	ble.n	128d2 <__kernel_rem_pio2f+0x22e>
   1286a:	4658      	mov	r0, fp
   1286c:	3601      	adds	r6, #1
   1286e:	2800      	cmp	r0, #0
   12870:	dc00      	bgt.n	12874 <__kernel_rem_pio2f+0x1d0>
   12872:	e1a0      	b.n	12bb6 <__kernel_rem_pio2f+0x512>
   12874:	9c03      	ldr	r4, [sp, #12]
   12876:	2280      	movs	r2, #128	; 0x80
   12878:	ab0e      	add	r3, sp, #56	; 0x38
   1287a:	0052      	lsls	r2, r2, #1
   1287c:	1919      	adds	r1, r3, r4
   1287e:	20ff      	movs	r0, #255	; 0xff
   12880:	2400      	movs	r4, #0
   12882:	4694      	mov	ip, r2
   12884:	e008      	b.n	12898 <__kernel_rem_pio2f+0x1f4>
   12886:	2a00      	cmp	r2, #0
   12888:	d003      	beq.n	12892 <__kernel_rem_pio2f+0x1ee>
   1288a:	4664      	mov	r4, ip
   1288c:	1aa2      	subs	r2, r4, r2
   1288e:	601a      	str	r2, [r3, #0]
   12890:	2401      	movs	r4, #1
   12892:	3304      	adds	r3, #4
   12894:	428b      	cmp	r3, r1
   12896:	d008      	beq.n	128aa <__kernel_rem_pio2f+0x206>
   12898:	681a      	ldr	r2, [r3, #0]
   1289a:	2c00      	cmp	r4, #0
   1289c:	d0f3      	beq.n	12886 <__kernel_rem_pio2f+0x1e2>
   1289e:	1a82      	subs	r2, r0, r2
   128a0:	601a      	str	r2, [r3, #0]
   128a2:	3304      	adds	r3, #4
   128a4:	2401      	movs	r4, #1
   128a6:	428b      	cmp	r3, r1
   128a8:	d1f6      	bne.n	12898 <__kernel_rem_pio2f+0x1f4>
   128aa:	9806      	ldr	r0, [sp, #24]
   128ac:	2800      	cmp	r0, #0
   128ae:	dd0d      	ble.n	128cc <__kernel_rem_pio2f+0x228>
   128b0:	2801      	cmp	r0, #1
   128b2:	d100      	bne.n	128b6 <__kernel_rem_pio2f+0x212>
   128b4:	e15b      	b.n	12b6e <__kernel_rem_pio2f+0x4ca>
   128b6:	2802      	cmp	r0, #2
   128b8:	d108      	bne.n	128cc <__kernel_rem_pio2f+0x228>
   128ba:	465b      	mov	r3, fp
   128bc:	3b01      	subs	r3, #1
   128be:	009b      	lsls	r3, r3, #2
   128c0:	a90e      	add	r1, sp, #56	; 0x38
   128c2:	58c9      	ldr	r1, [r1, r3]
   128c4:	223f      	movs	r2, #63	; 0x3f
   128c6:	400a      	ands	r2, r1
   128c8:	a80e      	add	r0, sp, #56	; 0x38
   128ca:	50c2      	str	r2, [r0, r3]
   128cc:	9905      	ldr	r1, [sp, #20]
   128ce:	2902      	cmp	r1, #2
   128d0:	d076      	beq.n	129c0 <__kernel_rem_pio2f+0x31c>
   128d2:	1c28      	adds	r0, r5, #0
   128d4:	2100      	movs	r1, #0
   128d6:	f7ed fedf 	bl	698 <__aeabi_fcmpeq>
   128da:	2800      	cmp	r0, #0
   128dc:	d100      	bne.n	128e0 <__kernel_rem_pio2f+0x23c>
   128de:	e089      	b.n	129f4 <__kernel_rem_pio2f+0x350>
   128e0:	4659      	mov	r1, fp
   128e2:	9c07      	ldr	r4, [sp, #28]
   128e4:	3901      	subs	r1, #1
   128e6:	428c      	cmp	r4, r1
   128e8:	dc0c      	bgt.n	12904 <__kernel_rem_pio2f+0x260>
   128ea:	a80e      	add	r0, sp, #56	; 0x38
   128ec:	008d      	lsls	r5, r1, #2
   128ee:	1943      	adds	r3, r0, r5
   128f0:	980d      	ldr	r0, [sp, #52]	; 0x34
   128f2:	2200      	movs	r2, #0
   128f4:	681c      	ldr	r4, [r3, #0]
   128f6:	3b04      	subs	r3, #4
   128f8:	4322      	orrs	r2, r4
   128fa:	4283      	cmp	r3, r0
   128fc:	d1fa      	bne.n	128f4 <__kernel_rem_pio2f+0x250>
   128fe:	2a00      	cmp	r2, #0
   12900:	d000      	beq.n	12904 <__kernel_rem_pio2f+0x260>
   12902:	e1f5      	b.n	12cf0 <__kernel_rem_pio2f+0x64c>
   12904:	9b07      	ldr	r3, [sp, #28]
   12906:	a80e      	add	r0, sp, #56	; 0x38
   12908:	3b01      	subs	r3, #1
   1290a:	009b      	lsls	r3, r3, #2
   1290c:	58c3      	ldr	r3, [r0, r3]
   1290e:	2b00      	cmp	r3, #0
   12910:	d000      	beq.n	12914 <__kernel_rem_pio2f+0x270>
   12912:	e206      	b.n	12d22 <__kernel_rem_pio2f+0x67e>
   12914:	9b07      	ldr	r3, [sp, #28]
   12916:	2201      	movs	r2, #1
   12918:	3b02      	subs	r3, #2
   1291a:	009b      	lsls	r3, r3, #2
   1291c:	18c3      	adds	r3, r0, r3
   1291e:	3b04      	subs	r3, #4
   12920:	6859      	ldr	r1, [r3, #4]
   12922:	3201      	adds	r2, #1
   12924:	2900      	cmp	r1, #0
   12926:	d0fa      	beq.n	1291e <__kernel_rem_pio2f+0x27a>
   12928:	465b      	mov	r3, fp
   1292a:	445a      	add	r2, fp
   1292c:	3301      	adds	r3, #1
   1292e:	9209      	str	r2, [sp, #36]	; 0x24
   12930:	4293      	cmp	r3, r2
   12932:	dc3d      	bgt.n	129b0 <__kernel_rem_pio2f+0x30c>
   12934:	9c08      	ldr	r4, [sp, #32]
   12936:	4658      	mov	r0, fp
   12938:	009b      	lsls	r3, r3, #2
   1293a:	18e4      	adds	r4, r4, r3
   1293c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1293e:	1a13      	subs	r3, r2, r0
   12940:	009b      	lsls	r3, r3, #2
   12942:	9305      	str	r3, [sp, #20]
   12944:	1c0b      	adds	r3, r1, #0
   12946:	445b      	add	r3, fp
   12948:	46a2      	mov	sl, r4
   1294a:	9c69      	ldr	r4, [sp, #420]	; 0x1a4
   1294c:	009b      	lsls	r3, r3, #2
   1294e:	980c      	ldr	r0, [sp, #48]	; 0x30
   12950:	18e3      	adds	r3, r4, r3
   12952:	9303      	str	r3, [sp, #12]
   12954:	1c03      	adds	r3, r0, #0
   12956:	445b      	add	r3, fp
   12958:	009b      	lsls	r3, r3, #2
   1295a:	a922      	add	r1, sp, #136	; 0x88
   1295c:	18c9      	adds	r1, r1, r3
   1295e:	2200      	movs	r2, #0
   12960:	468b      	mov	fp, r1
   12962:	4691      	mov	r9, r2
   12964:	9c03      	ldr	r4, [sp, #12]
   12966:	1c23      	adds	r3, r4, #0
   12968:	444b      	add	r3, r9
   1296a:	6858      	ldr	r0, [r3, #4]
   1296c:	f7ee fcd2 	bl	1314 <__aeabi_i2f>
   12970:	4659      	mov	r1, fp
   12972:	9c04      	ldr	r4, [sp, #16]
   12974:	4449      	add	r1, r9
   12976:	6008      	str	r0, [r1, #0]
   12978:	2c00      	cmp	r4, #0
   1297a:	db1c      	blt.n	129b6 <__kernel_rem_pio2f+0x312>
   1297c:	1c0d      	adds	r5, r1, #0
   1297e:	2400      	movs	r4, #0
   12980:	2600      	movs	r6, #0
   12982:	6829      	ldr	r1, [r5, #0]
   12984:	5938      	ldr	r0, [r7, r4]
   12986:	f7ee fa05 	bl	d94 <__aeabi_fmul>
   1298a:	1c01      	adds	r1, r0, #0
   1298c:	1c30      	adds	r0, r6, #0
   1298e:	f7ed feb1 	bl	6f4 <__aeabi_fadd>
   12992:	3404      	adds	r4, #4
   12994:	1c06      	adds	r6, r0, #0
   12996:	3d04      	subs	r5, #4
   12998:	4544      	cmp	r4, r8
   1299a:	d1f2      	bne.n	12982 <__kernel_rem_pio2f+0x2de>
   1299c:	4651      	mov	r1, sl
   1299e:	3104      	adds	r1, #4
   129a0:	2204      	movs	r2, #4
   129a2:	9c05      	ldr	r4, [sp, #20]
   129a4:	468a      	mov	sl, r1
   129a6:	4491      	add	r9, r2
   129a8:	3904      	subs	r1, #4
   129aa:	c140      	stmia	r1!, {r6}
   129ac:	45a1      	cmp	r9, r4
   129ae:	d1d9      	bne.n	12964 <__kernel_rem_pio2f+0x2c0>
   129b0:	9809      	ldr	r0, [sp, #36]	; 0x24
   129b2:	4683      	mov	fp, r0
   129b4:	e6f3      	b.n	1279e <__kernel_rem_pio2f+0xfa>
   129b6:	2600      	movs	r6, #0
   129b8:	e7f0      	b.n	1299c <__kernel_rem_pio2f+0x2f8>
   129ba:	46c0      	nop			; (mov r8, r8)
   129bc:	00013888 	.word	0x00013888
   129c0:	20fe      	movs	r0, #254	; 0xfe
   129c2:	1c29      	adds	r1, r5, #0
   129c4:	0580      	lsls	r0, r0, #22
   129c6:	f7ee fb0f 	bl	fe8 <__aeabi_fsub>
   129ca:	1c05      	adds	r5, r0, #0
   129cc:	2c00      	cmp	r4, #0
   129ce:	d100      	bne.n	129d2 <__kernel_rem_pio2f+0x32e>
   129d0:	e77f      	b.n	128d2 <__kernel_rem_pio2f+0x22e>
   129d2:	20fe      	movs	r0, #254	; 0xfe
   129d4:	9906      	ldr	r1, [sp, #24]
   129d6:	0580      	lsls	r0, r0, #22
   129d8:	f000 fb70 	bl	130bc <scalbnf>
   129dc:	1c01      	adds	r1, r0, #0
   129de:	1c28      	adds	r0, r5, #0
   129e0:	f7ee fb02 	bl	fe8 <__aeabi_fsub>
   129e4:	1c05      	adds	r5, r0, #0
   129e6:	1c28      	adds	r0, r5, #0
   129e8:	2100      	movs	r1, #0
   129ea:	f7ed fe55 	bl	698 <__aeabi_fcmpeq>
   129ee:	2800      	cmp	r0, #0
   129f0:	d000      	beq.n	129f4 <__kernel_rem_pio2f+0x350>
   129f2:	e775      	b.n	128e0 <__kernel_rem_pio2f+0x23c>
   129f4:	9c06      	ldr	r4, [sp, #24]
   129f6:	1c28      	adds	r0, r5, #0
   129f8:	4261      	negs	r1, r4
   129fa:	f000 fb5f 	bl	130bc <scalbnf>
   129fe:	2187      	movs	r1, #135	; 0x87
   12a00:	05c9      	lsls	r1, r1, #23
   12a02:	46d9      	mov	r9, fp
   12a04:	1c05      	adds	r5, r0, #0
   12a06:	46b3      	mov	fp, r6
   12a08:	f7ed fe6a 	bl	6e0 <__aeabi_fcmpge>
   12a0c:	2800      	cmp	r0, #0
   12a0e:	d100      	bne.n	12a12 <__kernel_rem_pio2f+0x36e>
   12a10:	e18e      	b.n	12d30 <__kernel_rem_pio2f+0x68c>
   12a12:	21ee      	movs	r1, #238	; 0xee
   12a14:	0589      	lsls	r1, r1, #22
   12a16:	1c28      	adds	r0, r5, #0
   12a18:	f7ee f9bc 	bl	d94 <__aeabi_fmul>
   12a1c:	f7ee fc5a 	bl	12d4 <__aeabi_f2iz>
   12a20:	f7ee fc78 	bl	1314 <__aeabi_i2f>
   12a24:	2187      	movs	r1, #135	; 0x87
   12a26:	05c9      	lsls	r1, r1, #23
   12a28:	1c04      	adds	r4, r0, #0
   12a2a:	f7ee f9b3 	bl	d94 <__aeabi_fmul>
   12a2e:	1c01      	adds	r1, r0, #0
   12a30:	1c28      	adds	r0, r5, #0
   12a32:	f7ee fad9 	bl	fe8 <__aeabi_fsub>
   12a36:	f7ee fc4d 	bl	12d4 <__aeabi_f2iz>
   12a3a:	9a03      	ldr	r2, [sp, #12]
   12a3c:	a90e      	add	r1, sp, #56	; 0x38
   12a3e:	5088      	str	r0, [r1, r2]
   12a40:	9806      	ldr	r0, [sp, #24]
   12a42:	464b      	mov	r3, r9
   12a44:	3008      	adds	r0, #8
   12a46:	3301      	adds	r3, #1
   12a48:	9006      	str	r0, [sp, #24]
   12a4a:	1c20      	adds	r0, r4, #0
   12a4c:	009d      	lsls	r5, r3, #2
   12a4e:	9303      	str	r3, [sp, #12]
   12a50:	f7ee fc40 	bl	12d4 <__aeabi_f2iz>
   12a54:	a90e      	add	r1, sp, #56	; 0x38
   12a56:	5148      	str	r0, [r1, r5]
   12a58:	20fe      	movs	r0, #254	; 0xfe
   12a5a:	0580      	lsls	r0, r0, #22
   12a5c:	9906      	ldr	r1, [sp, #24]
   12a5e:	f000 fb2d 	bl	130bc <scalbnf>
   12a62:	9c03      	ldr	r4, [sp, #12]
   12a64:	1c05      	adds	r5, r0, #0
   12a66:	2c00      	cmp	r4, #0
   12a68:	db4e      	blt.n	12b08 <__kernel_rem_pio2f+0x464>
   12a6a:	46a2      	mov	sl, r4
   12a6c:	2001      	movs	r0, #1
   12a6e:	00a3      	lsls	r3, r4, #2
   12a70:	4482      	add	sl, r0
   12a72:	9c08      	ldr	r4, [sp, #32]
   12a74:	4651      	mov	r1, sl
   12a76:	18e4      	adds	r4, r4, r3
   12a78:	008f      	lsls	r7, r1, #2
   12a7a:	aa0e      	add	r2, sp, #56	; 0x38
   12a7c:	427f      	negs	r7, r7
   12a7e:	18d6      	adds	r6, r2, r3
   12a80:	46a1      	mov	r9, r4
   12a82:	46b8      	mov	r8, r7
   12a84:	2400      	movs	r4, #0
   12a86:	1c37      	adds	r7, r6, #0
   12a88:	464e      	mov	r6, r9
   12a8a:	5938      	ldr	r0, [r7, r4]
   12a8c:	f7ee fc42 	bl	1314 <__aeabi_i2f>
   12a90:	1c29      	adds	r1, r5, #0
   12a92:	f7ee f97f 	bl	d94 <__aeabi_fmul>
   12a96:	21ee      	movs	r1, #238	; 0xee
   12a98:	5130      	str	r0, [r6, r4]
   12a9a:	0589      	lsls	r1, r1, #22
   12a9c:	1c28      	adds	r0, r5, #0
   12a9e:	f7ee f979 	bl	d94 <__aeabi_fmul>
   12aa2:	3c04      	subs	r4, #4
   12aa4:	1c05      	adds	r5, r0, #0
   12aa6:	4544      	cmp	r4, r8
   12aa8:	d1ef      	bne.n	12a8a <__kernel_rem_pio2f+0x3e6>
   12aaa:	ac36      	add	r4, sp, #216	; 0xd8
   12aac:	9a07      	ldr	r2, [sp, #28]
   12aae:	4659      	mov	r1, fp
   12ab0:	2000      	movs	r0, #0
   12ab2:	9404      	str	r4, [sp, #16]
   12ab4:	4caa      	ldr	r4, [pc, #680]	; (12d60 <__kernel_rem_pio2f+0x6bc>)
   12ab6:	46b1      	mov	r9, r6
   12ab8:	4680      	mov	r8, r0
   12aba:	9106      	str	r1, [sp, #24]
   12abc:	4693      	mov	fp, r2
   12abe:	4658      	mov	r0, fp
   12ac0:	2700      	movs	r7, #0
   12ac2:	2800      	cmp	r0, #0
   12ac4:	db13      	blt.n	12aee <__kernel_rem_pio2f+0x44a>
   12ac6:	2600      	movs	r6, #0
   12ac8:	2700      	movs	r7, #0
   12aca:	2500      	movs	r5, #0
   12acc:	e002      	b.n	12ad4 <__kernel_rem_pio2f+0x430>
   12ace:	3604      	adds	r6, #4
   12ad0:	4545      	cmp	r5, r8
   12ad2:	dc0c      	bgt.n	12aee <__kernel_rem_pio2f+0x44a>
   12ad4:	464b      	mov	r3, r9
   12ad6:	5999      	ldr	r1, [r3, r6]
   12ad8:	59a0      	ldr	r0, [r4, r6]
   12ada:	f7ee f95b 	bl	d94 <__aeabi_fmul>
   12ade:	1c01      	adds	r1, r0, #0
   12ae0:	1c38      	adds	r0, r7, #0
   12ae2:	f7ed fe07 	bl	6f4 <__aeabi_fadd>
   12ae6:	3501      	adds	r5, #1
   12ae8:	1c07      	adds	r7, r0, #0
   12aea:	45ab      	cmp	fp, r5
   12aec:	daef      	bge.n	12ace <__kernel_rem_pio2f+0x42a>
   12aee:	4640      	mov	r0, r8
   12af0:	9904      	ldr	r1, [sp, #16]
   12af2:	0083      	lsls	r3, r0, #2
   12af4:	50cf      	str	r7, [r1, r3]
   12af6:	2201      	movs	r2, #1
   12af8:	2304      	movs	r3, #4
   12afa:	425b      	negs	r3, r3
   12afc:	4490      	add	r8, r2
   12afe:	4499      	add	r9, r3
   12b00:	45c2      	cmp	sl, r8
   12b02:	d1dc      	bne.n	12abe <__kernel_rem_pio2f+0x41a>
   12b04:	9906      	ldr	r1, [sp, #24]
   12b06:	468b      	mov	fp, r1
   12b08:	9c68      	ldr	r4, [sp, #416]	; 0x1a0
   12b0a:	2c02      	cmp	r4, #2
   12b0c:	dd00      	ble.n	12b10 <__kernel_rem_pio2f+0x46c>
   12b0e:	e087      	b.n	12c20 <__kernel_rem_pio2f+0x57c>
   12b10:	2c00      	cmp	r4, #0
   12b12:	dc52      	bgt.n	12bba <__kernel_rem_pio2f+0x516>
   12b14:	d116      	bne.n	12b44 <__kernel_rem_pio2f+0x4a0>
   12b16:	9c03      	ldr	r4, [sp, #12]
   12b18:	2c00      	cmp	r4, #0
   12b1a:	da00      	bge.n	12b1e <__kernel_rem_pio2f+0x47a>
   12b1c:	e11e      	b.n	12d5c <__kernel_rem_pio2f+0x6b8>
   12b1e:	a836      	add	r0, sp, #216	; 0xd8
   12b20:	00a4      	lsls	r4, r4, #2
   12b22:	1904      	adds	r4, r0, r4
   12b24:	ad35      	add	r5, sp, #212	; 0xd4
   12b26:	2000      	movs	r0, #0
   12b28:	6821      	ldr	r1, [r4, #0]
   12b2a:	3c04      	subs	r4, #4
   12b2c:	f7ed fde2 	bl	6f4 <__aeabi_fadd>
   12b30:	42ac      	cmp	r4, r5
   12b32:	d1f9      	bne.n	12b28 <__kernel_rem_pio2f+0x484>
   12b34:	9c05      	ldr	r4, [sp, #20]
   12b36:	2c00      	cmp	r4, #0
   12b38:	d002      	beq.n	12b40 <__kernel_rem_pio2f+0x49c>
   12b3a:	2180      	movs	r1, #128	; 0x80
   12b3c:	0609      	lsls	r1, r1, #24
   12b3e:	1840      	adds	r0, r0, r1
   12b40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   12b42:	6020      	str	r0, [r4, #0]
   12b44:	4659      	mov	r1, fp
   12b46:	2007      	movs	r0, #7
   12b48:	4008      	ands	r0, r1
   12b4a:	b05f      	add	sp, #380	; 0x17c
   12b4c:	bc3c      	pop	{r2, r3, r4, r5}
   12b4e:	4690      	mov	r8, r2
   12b50:	4699      	mov	r9, r3
   12b52:	46a2      	mov	sl, r4
   12b54:	46ab      	mov	fp, r5
   12b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12b58:	9c06      	ldr	r4, [sp, #24]
   12b5a:	2c00      	cmp	r4, #0
   12b5c:	d111      	bne.n	12b82 <__kernel_rem_pio2f+0x4de>
   12b5e:	465b      	mov	r3, fp
   12b60:	3b01      	subs	r3, #1
   12b62:	009b      	lsls	r3, r3, #2
   12b64:	a80e      	add	r0, sp, #56	; 0x38
   12b66:	58c3      	ldr	r3, [r0, r3]
   12b68:	121b      	asrs	r3, r3, #8
   12b6a:	9305      	str	r3, [sp, #20]
   12b6c:	e67a      	b.n	12864 <__kernel_rem_pio2f+0x1c0>
   12b6e:	465b      	mov	r3, fp
   12b70:	3b01      	subs	r3, #1
   12b72:	009b      	lsls	r3, r3, #2
   12b74:	a90e      	add	r1, sp, #56	; 0x38
   12b76:	58c9      	ldr	r1, [r1, r3]
   12b78:	227f      	movs	r2, #127	; 0x7f
   12b7a:	400a      	ands	r2, r1
   12b7c:	a80e      	add	r0, sp, #56	; 0x38
   12b7e:	50c2      	str	r2, [r0, r3]
   12b80:	e6a4      	b.n	128cc <__kernel_rem_pio2f+0x228>
   12b82:	21fc      	movs	r1, #252	; 0xfc
   12b84:	0589      	lsls	r1, r1, #22
   12b86:	f7ed fdab 	bl	6e0 <__aeabi_fcmpge>
   12b8a:	2800      	cmp	r0, #0
   12b8c:	d10c      	bne.n	12ba8 <__kernel_rem_pio2f+0x504>
   12b8e:	2400      	movs	r4, #0
   12b90:	9405      	str	r4, [sp, #20]
   12b92:	e69e      	b.n	128d2 <__kernel_rem_pio2f+0x22e>
   12b94:	9c08      	ldr	r4, [sp, #32]
   12b96:	2104      	movs	r1, #4
   12b98:	4658      	mov	r0, fp
   12b9a:	2600      	movs	r6, #0
   12b9c:	448b      	add	fp, r1
   12b9e:	5026      	str	r6, [r4, r0]
   12ba0:	45c3      	cmp	fp, r8
   12ba2:	d000      	beq.n	12ba6 <__kernel_rem_pio2f+0x502>
   12ba4:	e5d3      	b.n	1274e <__kernel_rem_pio2f+0xaa>
   12ba6:	e5ee      	b.n	12786 <__kernel_rem_pio2f+0xe2>
   12ba8:	2402      	movs	r4, #2
   12baa:	4658      	mov	r0, fp
   12bac:	9405      	str	r4, [sp, #20]
   12bae:	3601      	adds	r6, #1
   12bb0:	2800      	cmp	r0, #0
   12bb2:	dd00      	ble.n	12bb6 <__kernel_rem_pio2f+0x512>
   12bb4:	e65e      	b.n	12874 <__kernel_rem_pio2f+0x1d0>
   12bb6:	2400      	movs	r4, #0
   12bb8:	e677      	b.n	128aa <__kernel_rem_pio2f+0x206>
   12bba:	9c03      	ldr	r4, [sp, #12]
   12bbc:	2100      	movs	r1, #0
   12bbe:	2c00      	cmp	r4, #0
   12bc0:	db0d      	blt.n	12bde <__kernel_rem_pio2f+0x53a>
   12bc2:	9c03      	ldr	r4, [sp, #12]
   12bc4:	a836      	add	r0, sp, #216	; 0xd8
   12bc6:	00a3      	lsls	r3, r4, #2
   12bc8:	2100      	movs	r1, #0
   12bca:	18c4      	adds	r4, r0, r3
   12bcc:	ad35      	add	r5, sp, #212	; 0xd4
   12bce:	1c08      	adds	r0, r1, #0
   12bd0:	6821      	ldr	r1, [r4, #0]
   12bd2:	3c04      	subs	r4, #4
   12bd4:	f7ed fd8e 	bl	6f4 <__aeabi_fadd>
   12bd8:	42ac      	cmp	r4, r5
   12bda:	d1f9      	bne.n	12bd0 <__kernel_rem_pio2f+0x52c>
   12bdc:	1c01      	adds	r1, r0, #0
   12bde:	9c05      	ldr	r4, [sp, #20]
   12be0:	1c0b      	adds	r3, r1, #0
   12be2:	2c00      	cmp	r4, #0
   12be4:	d002      	beq.n	12bec <__kernel_rem_pio2f+0x548>
   12be6:	2080      	movs	r0, #128	; 0x80
   12be8:	0600      	lsls	r0, r0, #24
   12bea:	180b      	adds	r3, r1, r0
   12bec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   12bee:	9836      	ldr	r0, [sp, #216]	; 0xd8
   12bf0:	6023      	str	r3, [r4, #0]
   12bf2:	f7ee f9f9 	bl	fe8 <__aeabi_fsub>
   12bf6:	9c03      	ldr	r4, [sp, #12]
   12bf8:	2c00      	cmp	r4, #0
   12bfa:	dd08      	ble.n	12c0e <__kernel_rem_pio2f+0x56a>
   12bfc:	9903      	ldr	r1, [sp, #12]
   12bfe:	ac37      	add	r4, sp, #220	; 0xdc
   12c00:	008d      	lsls	r5, r1, #2
   12c02:	1965      	adds	r5, r4, r5
   12c04:	cc02      	ldmia	r4!, {r1}
   12c06:	f7ed fd75 	bl	6f4 <__aeabi_fadd>
   12c0a:	42ac      	cmp	r4, r5
   12c0c:	d1fa      	bne.n	12c04 <__kernel_rem_pio2f+0x560>
   12c0e:	9c05      	ldr	r4, [sp, #20]
   12c10:	2c00      	cmp	r4, #0
   12c12:	d002      	beq.n	12c1a <__kernel_rem_pio2f+0x576>
   12c14:	2180      	movs	r1, #128	; 0x80
   12c16:	0609      	lsls	r1, r1, #24
   12c18:	1840      	adds	r0, r0, r1
   12c1a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   12c1c:	6060      	str	r0, [r4, #4]
   12c1e:	e791      	b.n	12b44 <__kernel_rem_pio2f+0x4a0>
   12c20:	9c68      	ldr	r4, [sp, #416]	; 0x1a0
   12c22:	2c03      	cmp	r4, #3
   12c24:	d000      	beq.n	12c28 <__kernel_rem_pio2f+0x584>
   12c26:	e78d      	b.n	12b44 <__kernel_rem_pio2f+0x4a0>
   12c28:	9c03      	ldr	r4, [sp, #12]
   12c2a:	2c00      	cmp	r4, #0
   12c2c:	dc00      	bgt.n	12c30 <__kernel_rem_pio2f+0x58c>
   12c2e:	e091      	b.n	12d54 <__kernel_rem_pio2f+0x6b0>
   12c30:	ac36      	add	r4, sp, #216	; 0xd8
   12c32:	9404      	str	r4, [sp, #16]
   12c34:	9b03      	ldr	r3, [sp, #12]
   12c36:	9c03      	ldr	r4, [sp, #12]
   12c38:	3b01      	subs	r3, #1
   12c3a:	00a5      	lsls	r5, r4, #2
   12c3c:	9c04      	ldr	r4, [sp, #16]
   12c3e:	009b      	lsls	r3, r3, #2
   12c40:	5967      	ldr	r7, [r4, r5]
   12c42:	a835      	add	r0, sp, #212	; 0xd4
   12c44:	18e4      	adds	r4, r4, r3
   12c46:	46a1      	mov	r9, r4
   12c48:	4680      	mov	r8, r0
   12c4a:	1c26      	adds	r6, r4, #0
   12c4c:	46aa      	mov	sl, r5
   12c4e:	e000      	b.n	12c52 <__kernel_rem_pio2f+0x5ae>
   12c50:	1c27      	adds	r7, r4, #0
   12c52:	6835      	ldr	r5, [r6, #0]
   12c54:	1c39      	adds	r1, r7, #0
   12c56:	1c28      	adds	r0, r5, #0
   12c58:	f7ed fd4c 	bl	6f4 <__aeabi_fadd>
   12c5c:	1c04      	adds	r4, r0, #0
   12c5e:	1c21      	adds	r1, r4, #0
   12c60:	1c28      	adds	r0, r5, #0
   12c62:	f7ee f9c1 	bl	fe8 <__aeabi_fsub>
   12c66:	1c39      	adds	r1, r7, #0
   12c68:	f7ed fd44 	bl	6f4 <__aeabi_fadd>
   12c6c:	3e04      	subs	r6, #4
   12c6e:	60b0      	str	r0, [r6, #8]
   12c70:	6074      	str	r4, [r6, #4]
   12c72:	4546      	cmp	r6, r8
   12c74:	d1ec      	bne.n	12c50 <__kernel_rem_pio2f+0x5ac>
   12c76:	9c03      	ldr	r4, [sp, #12]
   12c78:	4655      	mov	r5, sl
   12c7a:	2000      	movs	r0, #0
   12c7c:	2c01      	cmp	r4, #1
   12c7e:	dd24      	ble.n	12cca <__kernel_rem_pio2f+0x626>
   12c80:	9c04      	ldr	r4, [sp, #16]
   12c82:	464e      	mov	r6, r9
   12c84:	5967      	ldr	r7, [r4, r5]
   12c86:	46d0      	mov	r8, sl
   12c88:	e000      	b.n	12c8c <__kernel_rem_pio2f+0x5e8>
   12c8a:	1c27      	adds	r7, r4, #0
   12c8c:	6835      	ldr	r5, [r6, #0]
   12c8e:	1c39      	adds	r1, r7, #0
   12c90:	1c28      	adds	r0, r5, #0
   12c92:	f7ed fd2f 	bl	6f4 <__aeabi_fadd>
   12c96:	1c04      	adds	r4, r0, #0
   12c98:	1c21      	adds	r1, r4, #0
   12c9a:	1c28      	adds	r0, r5, #0
   12c9c:	f7ee f9a4 	bl	fe8 <__aeabi_fsub>
   12ca0:	1c39      	adds	r1, r7, #0
   12ca2:	f7ed fd27 	bl	6f4 <__aeabi_fadd>
   12ca6:	6070      	str	r0, [r6, #4]
   12ca8:	9804      	ldr	r0, [sp, #16]
   12caa:	6034      	str	r4, [r6, #0]
   12cac:	3e04      	subs	r6, #4
   12cae:	42b0      	cmp	r0, r6
   12cb0:	d1eb      	bne.n	12c8a <__kernel_rem_pio2f+0x5e6>
   12cb2:	9c04      	ldr	r4, [sp, #16]
   12cb4:	4645      	mov	r5, r8
   12cb6:	1c26      	adds	r6, r4, #0
   12cb8:	1965      	adds	r5, r4, r5
   12cba:	3604      	adds	r6, #4
   12cbc:	2000      	movs	r0, #0
   12cbe:	6829      	ldr	r1, [r5, #0]
   12cc0:	3d04      	subs	r5, #4
   12cc2:	f7ed fd17 	bl	6f4 <__aeabi_fadd>
   12cc6:	42b5      	cmp	r5, r6
   12cc8:	d1f9      	bne.n	12cbe <__kernel_rem_pio2f+0x61a>
   12cca:	9c05      	ldr	r4, [sp, #20]
   12ccc:	2c00      	cmp	r4, #0
   12cce:	d038      	beq.n	12d42 <__kernel_rem_pio2f+0x69e>
   12cd0:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   12cd2:	2480      	movs	r4, #128	; 0x80
   12cd4:	0624      	lsls	r4, r4, #24
   12cd6:	1913      	adds	r3, r2, r4
   12cd8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   12cda:	2180      	movs	r1, #128	; 0x80
   12cdc:	6023      	str	r3, [r4, #0]
   12cde:	9c04      	ldr	r4, [sp, #16]
   12ce0:	0609      	lsls	r1, r1, #24
   12ce2:	6863      	ldr	r3, [r4, #4]
   12ce4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   12ce6:	185b      	adds	r3, r3, r1
   12ce8:	1840      	adds	r0, r0, r1
   12cea:	6063      	str	r3, [r4, #4]
   12cec:	60a0      	str	r0, [r4, #8]
   12cee:	e729      	b.n	12b44 <__kernel_rem_pio2f+0x4a0>
   12cf0:	9c06      	ldr	r4, [sp, #24]
   12cf2:	a80e      	add	r0, sp, #56	; 0x38
   12cf4:	5943      	ldr	r3, [r0, r5]
   12cf6:	3c08      	subs	r4, #8
   12cf8:	46b3      	mov	fp, r6
   12cfa:	9103      	str	r1, [sp, #12]
   12cfc:	9406      	str	r4, [sp, #24]
   12cfe:	2b00      	cmp	r3, #0
   12d00:	d000      	beq.n	12d04 <__kernel_rem_pio2f+0x660>
   12d02:	e6a9      	b.n	12a58 <__kernel_rem_pio2f+0x3b4>
   12d04:	1c0a      	adds	r2, r1, #0
   12d06:	3a01      	subs	r2, #1
   12d08:	0093      	lsls	r3, r2, #2
   12d0a:	18c3      	adds	r3, r0, r3
   12d0c:	1c21      	adds	r1, r4, #0
   12d0e:	e000      	b.n	12d12 <__kernel_rem_pio2f+0x66e>
   12d10:	3a01      	subs	r2, #1
   12d12:	3b04      	subs	r3, #4
   12d14:	685c      	ldr	r4, [r3, #4]
   12d16:	9203      	str	r2, [sp, #12]
   12d18:	3908      	subs	r1, #8
   12d1a:	2c00      	cmp	r4, #0
   12d1c:	d0f8      	beq.n	12d10 <__kernel_rem_pio2f+0x66c>
   12d1e:	9106      	str	r1, [sp, #24]
   12d20:	e69a      	b.n	12a58 <__kernel_rem_pio2f+0x3b4>
   12d22:	2201      	movs	r2, #1
   12d24:	e600      	b.n	12928 <__kernel_rem_pio2f+0x284>
   12d26:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   12d28:	00a7      	lsls	r7, r4, #2
   12d2a:	ac4a      	add	r4, sp, #296	; 0x128
   12d2c:	9408      	str	r4, [sp, #32]
   12d2e:	e52d      	b.n	1278c <__kernel_rem_pio2f+0xe8>
   12d30:	1c28      	adds	r0, r5, #0
   12d32:	f7ee facf 	bl	12d4 <__aeabi_f2iz>
   12d36:	9c03      	ldr	r4, [sp, #12]
   12d38:	aa0e      	add	r2, sp, #56	; 0x38
   12d3a:	5110      	str	r0, [r2, r4]
   12d3c:	464c      	mov	r4, r9
   12d3e:	9403      	str	r4, [sp, #12]
   12d40:	e68a      	b.n	12a58 <__kernel_rem_pio2f+0x3b4>
   12d42:	9936      	ldr	r1, [sp, #216]	; 0xd8
   12d44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   12d46:	6021      	str	r1, [r4, #0]
   12d48:	9c04      	ldr	r4, [sp, #16]
   12d4a:	990a      	ldr	r1, [sp, #40]	; 0x28
   12d4c:	6864      	ldr	r4, [r4, #4]
   12d4e:	6088      	str	r0, [r1, #8]
   12d50:	604c      	str	r4, [r1, #4]
   12d52:	e6f7      	b.n	12b44 <__kernel_rem_pio2f+0x4a0>
   12d54:	ac36      	add	r4, sp, #216	; 0xd8
   12d56:	2000      	movs	r0, #0
   12d58:	9404      	str	r4, [sp, #16]
   12d5a:	e7b6      	b.n	12cca <__kernel_rem_pio2f+0x626>
   12d5c:	2000      	movs	r0, #0
   12d5e:	e6e9      	b.n	12b34 <__kernel_rem_pio2f+0x490>
   12d60:	00013894 	.word	0x00013894

00012d64 <__kernel_sinf>:
__kernel_sinf():
   12d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12d66:	4b35      	ldr	r3, [pc, #212]	; (12e3c <__kernel_sinf+0xd8>)
   12d68:	464f      	mov	r7, r9
   12d6a:	4646      	mov	r6, r8
   12d6c:	0045      	lsls	r5, r0, #1
   12d6e:	b4c0      	push	{r6, r7}
   12d70:	1c04      	adds	r4, r0, #0
   12d72:	1c0f      	adds	r7, r1, #0
   12d74:	4690      	mov	r8, r2
   12d76:	086d      	lsrs	r5, r5, #1
   12d78:	429d      	cmp	r5, r3
   12d7a:	dc05      	bgt.n	12d88 <__kernel_sinf+0x24>
   12d7c:	f7ee faaa 	bl	12d4 <__aeabi_f2iz>
   12d80:	1c03      	adds	r3, r0, #0
   12d82:	1c20      	adds	r0, r4, #0
   12d84:	2b00      	cmp	r3, #0
   12d86:	d046      	beq.n	12e16 <__kernel_sinf+0xb2>
   12d88:	1c21      	adds	r1, r4, #0
   12d8a:	1c20      	adds	r0, r4, #0
   12d8c:	f7ee f802 	bl	d94 <__aeabi_fmul>
   12d90:	1c21      	adds	r1, r4, #0
   12d92:	1c05      	adds	r5, r0, #0
   12d94:	f7ed fffe 	bl	d94 <__aeabi_fmul>
   12d98:	4929      	ldr	r1, [pc, #164]	; (12e40 <__kernel_sinf+0xdc>)
   12d9a:	1c06      	adds	r6, r0, #0
   12d9c:	1c28      	adds	r0, r5, #0
   12d9e:	f7ed fff9 	bl	d94 <__aeabi_fmul>
   12da2:	4928      	ldr	r1, [pc, #160]	; (12e44 <__kernel_sinf+0xe0>)
   12da4:	f7ee f920 	bl	fe8 <__aeabi_fsub>
   12da8:	1c29      	adds	r1, r5, #0
   12daa:	f7ed fff3 	bl	d94 <__aeabi_fmul>
   12dae:	4926      	ldr	r1, [pc, #152]	; (12e48 <__kernel_sinf+0xe4>)
   12db0:	f7ed fca0 	bl	6f4 <__aeabi_fadd>
   12db4:	1c29      	adds	r1, r5, #0
   12db6:	f7ed ffed 	bl	d94 <__aeabi_fmul>
   12dba:	4924      	ldr	r1, [pc, #144]	; (12e4c <__kernel_sinf+0xe8>)
   12dbc:	f7ee f914 	bl	fe8 <__aeabi_fsub>
   12dc0:	1c29      	adds	r1, r5, #0
   12dc2:	f7ed ffe7 	bl	d94 <__aeabi_fmul>
   12dc6:	4922      	ldr	r1, [pc, #136]	; (12e50 <__kernel_sinf+0xec>)
   12dc8:	f7ed fc94 	bl	6f4 <__aeabi_fadd>
   12dcc:	4643      	mov	r3, r8
   12dce:	4681      	mov	r9, r0
   12dd0:	2b00      	cmp	r3, #0
   12dd2:	d024      	beq.n	12e1e <__kernel_sinf+0xba>
   12dd4:	21fc      	movs	r1, #252	; 0xfc
   12dd6:	0589      	lsls	r1, r1, #22
   12dd8:	1c38      	adds	r0, r7, #0
   12dda:	f7ed ffdb 	bl	d94 <__aeabi_fmul>
   12dde:	4649      	mov	r1, r9
   12de0:	4680      	mov	r8, r0
   12de2:	1c30      	adds	r0, r6, #0
   12de4:	f7ed ffd6 	bl	d94 <__aeabi_fmul>
   12de8:	1c01      	adds	r1, r0, #0
   12dea:	4640      	mov	r0, r8
   12dec:	f7ee f8fc 	bl	fe8 <__aeabi_fsub>
   12df0:	1c29      	adds	r1, r5, #0
   12df2:	f7ed ffcf 	bl	d94 <__aeabi_fmul>
   12df6:	1c39      	adds	r1, r7, #0
   12df8:	f7ee f8f6 	bl	fe8 <__aeabi_fsub>
   12dfc:	4915      	ldr	r1, [pc, #84]	; (12e54 <__kernel_sinf+0xf0>)
   12dfe:	1c05      	adds	r5, r0, #0
   12e00:	1c30      	adds	r0, r6, #0
   12e02:	f7ed ffc7 	bl	d94 <__aeabi_fmul>
   12e06:	1c01      	adds	r1, r0, #0
   12e08:	1c28      	adds	r0, r5, #0
   12e0a:	f7ed fc73 	bl	6f4 <__aeabi_fadd>
   12e0e:	1c01      	adds	r1, r0, #0
   12e10:	1c20      	adds	r0, r4, #0
   12e12:	f7ee f8e9 	bl	fe8 <__aeabi_fsub>
   12e16:	bc0c      	pop	{r2, r3}
   12e18:	4690      	mov	r8, r2
   12e1a:	4699      	mov	r9, r3
   12e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12e1e:	4649      	mov	r1, r9
   12e20:	1c28      	adds	r0, r5, #0
   12e22:	f7ed ffb7 	bl	d94 <__aeabi_fmul>
   12e26:	490b      	ldr	r1, [pc, #44]	; (12e54 <__kernel_sinf+0xf0>)
   12e28:	f7ee f8de 	bl	fe8 <__aeabi_fsub>
   12e2c:	1c31      	adds	r1, r6, #0
   12e2e:	f7ed ffb1 	bl	d94 <__aeabi_fmul>
   12e32:	1c21      	adds	r1, r4, #0
   12e34:	f7ed fc5e 	bl	6f4 <__aeabi_fadd>
   12e38:	e7ed      	b.n	12e16 <__kernel_sinf+0xb2>
   12e3a:	46c0      	nop			; (mov r8, r8)
   12e3c:	31ffffff 	.word	0x31ffffff
   12e40:	2f2ec9d3 	.word	0x2f2ec9d3
   12e44:	32d72f34 	.word	0x32d72f34
   12e48:	3638ef1b 	.word	0x3638ef1b
   12e4c:	39500d01 	.word	0x39500d01
   12e50:	3c088889 	.word	0x3c088889
   12e54:	3e2aaaab 	.word	0x3e2aaaab

00012e58 <matherr>:
matherr():
   12e58:	2000      	movs	r0, #0
   12e5a:	4770      	bx	lr
   12e5c:	0000      	movs	r0, r0
	...

00012e60 <nan>:
nan():
   12e60:	4902      	ldr	r1, [pc, #8]	; (12e6c <nan+0xc>)
   12e62:	4801      	ldr	r0, [pc, #4]	; (12e68 <nan+0x8>)
   12e64:	4770      	bx	lr
   12e66:	46c0      	nop			; (mov r8, r8)
   12e68:	00000000 	.word	0x00000000
   12e6c:	7ff80000 	.word	0x7ff80000

00012e70 <rint>:
rint():
   12e70:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e72:	4646      	mov	r6, r8
   12e74:	464f      	mov	r7, r9
   12e76:	b4c0      	push	{r6, r7}
   12e78:	0fca      	lsrs	r2, r1, #31
   12e7a:	4690      	mov	r8, r2
   12e7c:	004b      	lsls	r3, r1, #1
   12e7e:	4a4d      	ldr	r2, [pc, #308]	; (12fb4 <rint+0x144>)
   12e80:	0d5b      	lsrs	r3, r3, #21
   12e82:	189e      	adds	r6, r3, r2
   12e84:	b083      	sub	sp, #12
   12e86:	1c04      	adds	r4, r0, #0
   12e88:	1c0d      	adds	r5, r1, #0
   12e8a:	468c      	mov	ip, r1
   12e8c:	1c07      	adds	r7, r0, #0
   12e8e:	2e13      	cmp	r6, #19
   12e90:	dc3b      	bgt.n	12f0a <rint+0x9a>
   12e92:	2e00      	cmp	r6, #0
   12e94:	db5c      	blt.n	12f50 <rint+0xe0>
   12e96:	4f48      	ldr	r7, [pc, #288]	; (12fb8 <rint+0x148>)
   12e98:	1c02      	adds	r2, r0, #0
   12e9a:	4137      	asrs	r7, r6
   12e9c:	1c3b      	adds	r3, r7, #0
   12e9e:	400b      	ands	r3, r1
   12ea0:	4303      	orrs	r3, r0
   12ea2:	4699      	mov	r9, r3
   12ea4:	4648      	mov	r0, r9
   12ea6:	1c0b      	adds	r3, r1, #0
   12ea8:	2800      	cmp	r0, #0
   12eaa:	d027      	beq.n	12efc <rint+0x8c>
   12eac:	087b      	lsrs	r3, r7, #1
   12eae:	1c1a      	adds	r2, r3, #0
   12eb0:	400a      	ands	r2, r1
   12eb2:	4322      	orrs	r2, r4
   12eb4:	2700      	movs	r7, #0
   12eb6:	2a00      	cmp	r2, #0
   12eb8:	d00a      	beq.n	12ed0 <rint+0x60>
   12eba:	2e13      	cmp	r6, #19
   12ebc:	d100      	bne.n	12ec0 <rint+0x50>
   12ebe:	e076      	b.n	12fae <rint+0x13e>
   12ec0:	1c29      	adds	r1, r5, #0
   12ec2:	2280      	movs	r2, #128	; 0x80
   12ec4:	4399      	bics	r1, r3
   12ec6:	02d2      	lsls	r2, r2, #11
   12ec8:	1c0b      	adds	r3, r1, #0
   12eca:	4132      	asrs	r2, r6
   12ecc:	4313      	orrs	r3, r2
   12ece:	469c      	mov	ip, r3
   12ed0:	4640      	mov	r0, r8
   12ed2:	00c1      	lsls	r1, r0, #3
   12ed4:	4839      	ldr	r0, [pc, #228]	; (12fbc <rint+0x14c>)
   12ed6:	4663      	mov	r3, ip
   12ed8:	1841      	adds	r1, r0, r1
   12eda:	680c      	ldr	r4, [r1, #0]
   12edc:	684d      	ldr	r5, [r1, #4]
   12ede:	1c3a      	adds	r2, r7, #0
   12ee0:	1c20      	adds	r0, r4, #0
   12ee2:	1c29      	adds	r1, r5, #0
   12ee4:	f7ee fa72 	bl	13cc <__aeabi_dadd>
   12ee8:	9000      	str	r0, [sp, #0]
   12eea:	9101      	str	r1, [sp, #4]
   12eec:	9800      	ldr	r0, [sp, #0]
   12eee:	9901      	ldr	r1, [sp, #4]
   12ef0:	1c22      	adds	r2, r4, #0
   12ef2:	1c2b      	adds	r3, r5, #0
   12ef4:	f7ef f9f6 	bl	22e4 <__aeabi_dsub>
   12ef8:	1c02      	adds	r2, r0, #0
   12efa:	1c0b      	adds	r3, r1, #0
   12efc:	1c10      	adds	r0, r2, #0
   12efe:	1c19      	adds	r1, r3, #0
   12f00:	b003      	add	sp, #12
   12f02:	bc0c      	pop	{r2, r3}
   12f04:	4690      	mov	r8, r2
   12f06:	4699      	mov	r9, r3
   12f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f0a:	2e33      	cmp	r6, #51	; 0x33
   12f0c:	dd0b      	ble.n	12f26 <rint+0xb6>
   12f0e:	1c0b      	adds	r3, r1, #0
   12f10:	2180      	movs	r1, #128	; 0x80
   12f12:	1c02      	adds	r2, r0, #0
   12f14:	00c9      	lsls	r1, r1, #3
   12f16:	428e      	cmp	r6, r1
   12f18:	d1f0      	bne.n	12efc <rint+0x8c>
   12f1a:	1c29      	adds	r1, r5, #0
   12f1c:	f7ee fa56 	bl	13cc <__aeabi_dadd>
   12f20:	1c02      	adds	r2, r0, #0
   12f22:	1c0b      	adds	r3, r1, #0
   12f24:	e7ea      	b.n	12efc <rint+0x8c>
   12f26:	4a26      	ldr	r2, [pc, #152]	; (12fc0 <rint+0x150>)
   12f28:	2601      	movs	r6, #1
   12f2a:	18d2      	adds	r2, r2, r3
   12f2c:	4276      	negs	r6, r6
   12f2e:	40d6      	lsrs	r6, r2
   12f30:	4691      	mov	r9, r2
   12f32:	1c0b      	adds	r3, r1, #0
   12f34:	1c02      	adds	r2, r0, #0
   12f36:	4206      	tst	r6, r0
   12f38:	d0e0      	beq.n	12efc <rint+0x8c>
   12f3a:	0876      	lsrs	r6, r6, #1
   12f3c:	4206      	tst	r6, r0
   12f3e:	d0c7      	beq.n	12ed0 <rint+0x60>
   12f40:	2380      	movs	r3, #128	; 0x80
   12f42:	43b4      	bics	r4, r6
   12f44:	05db      	lsls	r3, r3, #23
   12f46:	4648      	mov	r0, r9
   12f48:	4103      	asrs	r3, r0
   12f4a:	1c27      	adds	r7, r4, #0
   12f4c:	431f      	orrs	r7, r3
   12f4e:	e7bf      	b.n	12ed0 <rint+0x60>
   12f50:	004e      	lsls	r6, r1, #1
   12f52:	0876      	lsrs	r6, r6, #1
   12f54:	4306      	orrs	r6, r0
   12f56:	1c02      	adds	r2, r0, #0
   12f58:	1c0b      	adds	r3, r1, #0
   12f5a:	2e00      	cmp	r6, #0
   12f5c:	d0ce      	beq.n	12efc <rint+0x8c>
   12f5e:	0309      	lsls	r1, r1, #12
   12f60:	0b09      	lsrs	r1, r1, #12
   12f62:	4301      	orrs	r1, r0
   12f64:	4248      	negs	r0, r1
   12f66:	4301      	orrs	r1, r0
   12f68:	2080      	movs	r0, #128	; 0x80
   12f6a:	0300      	lsls	r0, r0, #12
   12f6c:	0b09      	lsrs	r1, r1, #12
   12f6e:	4001      	ands	r1, r0
   12f70:	0c68      	lsrs	r0, r5, #17
   12f72:	0440      	lsls	r0, r0, #17
   12f74:	1c0b      	adds	r3, r1, #0
   12f76:	4303      	orrs	r3, r0
   12f78:	4640      	mov	r0, r8
   12f7a:	00c1      	lsls	r1, r0, #3
   12f7c:	480f      	ldr	r0, [pc, #60]	; (12fbc <rint+0x14c>)
   12f7e:	1841      	adds	r1, r0, r1
   12f80:	680c      	ldr	r4, [r1, #0]
   12f82:	684d      	ldr	r5, [r1, #4]
   12f84:	1c29      	adds	r1, r5, #0
   12f86:	1c20      	adds	r0, r4, #0
   12f88:	f7ee fa20 	bl	13cc <__aeabi_dadd>
   12f8c:	9000      	str	r0, [sp, #0]
   12f8e:	9101      	str	r1, [sp, #4]
   12f90:	9800      	ldr	r0, [sp, #0]
   12f92:	9901      	ldr	r1, [sp, #4]
   12f94:	1c2b      	adds	r3, r5, #0
   12f96:	1c22      	adds	r2, r4, #0
   12f98:	f7ef f9a4 	bl	22e4 <__aeabi_dsub>
   12f9c:	1c0d      	adds	r5, r1, #0
   12f9e:	4641      	mov	r1, r8
   12fa0:	1c02      	adds	r2, r0, #0
   12fa2:	07c8      	lsls	r0, r1, #31
   12fa4:	0069      	lsls	r1, r5, #1
   12fa6:	0849      	lsrs	r1, r1, #1
   12fa8:	1c03      	adds	r3, r0, #0
   12faa:	430b      	orrs	r3, r1
   12fac:	e7a6      	b.n	12efc <rint+0x8c>
   12fae:	2780      	movs	r7, #128	; 0x80
   12fb0:	063f      	lsls	r7, r7, #24
   12fb2:	e785      	b.n	12ec0 <rint+0x50>
   12fb4:	fffffc01 	.word	0xfffffc01
   12fb8:	000fffff 	.word	0x000fffff
   12fbc:	000138c0 	.word	0x000138c0
   12fc0:	fffffbed 	.word	0xfffffbed

00012fc4 <fabsf>:
fabsf():
   12fc4:	0040      	lsls	r0, r0, #1
   12fc6:	0840      	lsrs	r0, r0, #1
   12fc8:	4770      	bx	lr
   12fca:	46c0      	nop			; (mov r8, r8)

00012fcc <finitef>:
finitef():
   12fcc:	0043      	lsls	r3, r0, #1
   12fce:	4a03      	ldr	r2, [pc, #12]	; (12fdc <finitef+0x10>)
   12fd0:	085b      	lsrs	r3, r3, #1
   12fd2:	2000      	movs	r0, #0
   12fd4:	429a      	cmp	r2, r3
   12fd6:	4140      	adcs	r0, r0
   12fd8:	4770      	bx	lr
   12fda:	46c0      	nop			; (mov r8, r8)
   12fdc:	7f7fffff 	.word	0x7f7fffff

00012fe0 <floorf>:
floorf():
   12fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
   12fe2:	0043      	lsls	r3, r0, #1
   12fe4:	4647      	mov	r7, r8
   12fe6:	b480      	push	{r7}
   12fe8:	085f      	lsrs	r7, r3, #1
   12fea:	0e1b      	lsrs	r3, r3, #24
   12fec:	1c1e      	adds	r6, r3, #0
   12fee:	3e7f      	subs	r6, #127	; 0x7f
   12ff0:	1c04      	adds	r4, r0, #0
   12ff2:	2e16      	cmp	r6, #22
   12ff4:	dc17      	bgt.n	13026 <floorf+0x46>
   12ff6:	4680      	mov	r8, r0
   12ff8:	2e00      	cmp	r6, #0
   12ffa:	db1d      	blt.n	13038 <floorf+0x58>
   12ffc:	4f1a      	ldr	r7, [pc, #104]	; (13068 <floorf+0x88>)
   12ffe:	1c05      	adds	r5, r0, #0
   13000:	4137      	asrs	r7, r6
   13002:	4207      	tst	r7, r0
   13004:	d00b      	beq.n	1301e <floorf+0x3e>
   13006:	4919      	ldr	r1, [pc, #100]	; (1306c <floorf+0x8c>)
   13008:	f7ed fb74 	bl	6f4 <__aeabi_fadd>
   1300c:	2100      	movs	r1, #0
   1300e:	f7ed fb5d 	bl	6cc <__aeabi_fcmpgt>
   13012:	2800      	cmp	r0, #0
   13014:	d003      	beq.n	1301e <floorf+0x3e>
   13016:	2c00      	cmp	r4, #0
   13018:	db1c      	blt.n	13054 <floorf+0x74>
   1301a:	4645      	mov	r5, r8
   1301c:	43bd      	bics	r5, r7
   1301e:	1c28      	adds	r0, r5, #0
   13020:	bc04      	pop	{r2}
   13022:	4690      	mov	r8, r2
   13024:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13026:	4b12      	ldr	r3, [pc, #72]	; (13070 <floorf+0x90>)
   13028:	1c05      	adds	r5, r0, #0
   1302a:	429f      	cmp	r7, r3
   1302c:	d9f7      	bls.n	1301e <floorf+0x3e>
   1302e:	1c21      	adds	r1, r4, #0
   13030:	f7ed fb60 	bl	6f4 <__aeabi_fadd>
   13034:	1c05      	adds	r5, r0, #0
   13036:	e7f2      	b.n	1301e <floorf+0x3e>
   13038:	490c      	ldr	r1, [pc, #48]	; (1306c <floorf+0x8c>)
   1303a:	f7ed fb5b 	bl	6f4 <__aeabi_fadd>
   1303e:	2100      	movs	r1, #0
   13040:	f7ed fb44 	bl	6cc <__aeabi_fcmpgt>
   13044:	2800      	cmp	r0, #0
   13046:	d003      	beq.n	13050 <floorf+0x70>
   13048:	2c00      	cmp	r4, #0
   1304a:	db09      	blt.n	13060 <floorf+0x80>
   1304c:	2500      	movs	r5, #0
   1304e:	e7e6      	b.n	1301e <floorf+0x3e>
   13050:	1c25      	adds	r5, r4, #0
   13052:	e7e4      	b.n	1301e <floorf+0x3e>
   13054:	2380      	movs	r3, #128	; 0x80
   13056:	041b      	lsls	r3, r3, #16
   13058:	4133      	asrs	r3, r6
   1305a:	191e      	adds	r6, r3, r4
   1305c:	46b0      	mov	r8, r6
   1305e:	e7dc      	b.n	1301a <floorf+0x3a>
   13060:	2f00      	cmp	r7, #0
   13062:	d0f5      	beq.n	13050 <floorf+0x70>
   13064:	4d03      	ldr	r5, [pc, #12]	; (13074 <floorf+0x94>)
   13066:	e7da      	b.n	1301e <floorf+0x3e>
   13068:	007fffff 	.word	0x007fffff
   1306c:	7149f2ca 	.word	0x7149f2ca
   13070:	7f7fffff 	.word	0x7f7fffff
   13074:	bf800000 	.word	0xbf800000

00013078 <__fpclassifyf>:
__fpclassifyf():
   13078:	0043      	lsls	r3, r0, #1
   1307a:	085b      	lsrs	r3, r3, #1
   1307c:	2002      	movs	r0, #2
   1307e:	2b00      	cmp	r3, #0
   13080:	d100      	bne.n	13084 <__fpclassifyf+0xc>
   13082:	4770      	bx	lr
   13084:	4a07      	ldr	r2, [pc, #28]	; (130a4 <__fpclassifyf+0x2c>)
   13086:	2004      	movs	r0, #4
   13088:	1899      	adds	r1, r3, r2
   1308a:	4a07      	ldr	r2, [pc, #28]	; (130a8 <__fpclassifyf+0x30>)
   1308c:	4291      	cmp	r1, r2
   1308e:	d9f8      	bls.n	13082 <__fpclassifyf+0xa>
   13090:	4a06      	ldr	r2, [pc, #24]	; (130ac <__fpclassifyf+0x34>)
   13092:	1e59      	subs	r1, r3, #1
   13094:	2003      	movs	r0, #3
   13096:	4291      	cmp	r1, r2
   13098:	d9f3      	bls.n	13082 <__fpclassifyf+0xa>
   1309a:	4a05      	ldr	r2, [pc, #20]	; (130b0 <__fpclassifyf+0x38>)
   1309c:	189b      	adds	r3, r3, r2
   1309e:	4258      	negs	r0, r3
   130a0:	4158      	adcs	r0, r3
   130a2:	e7ee      	b.n	13082 <__fpclassifyf+0xa>
   130a4:	ff800000 	.word	0xff800000
   130a8:	7effffff 	.word	0x7effffff
   130ac:	007ffffe 	.word	0x007ffffe
   130b0:	80800000 	.word	0x80800000

000130b4 <nanf>:
nanf():
   130b4:	4800      	ldr	r0, [pc, #0]	; (130b8 <nanf+0x4>)
   130b6:	4770      	bx	lr
   130b8:	7fc00000 	.word	0x7fc00000

000130bc <scalbnf>:
scalbnf():
   130bc:	b570      	push	{r4, r5, r6, lr}
   130be:	1c03      	adds	r3, r0, #0
   130c0:	0044      	lsls	r4, r0, #1
   130c2:	1c06      	adds	r6, r0, #0
   130c4:	1c0d      	adds	r5, r1, #0
   130c6:	0860      	lsrs	r0, r4, #1
   130c8:	1c1a      	adds	r2, r3, #0
   130ca:	2800      	cmp	r0, #0
   130cc:	d00f      	beq.n	130ee <scalbnf+0x32>
   130ce:	4927      	ldr	r1, [pc, #156]	; (1316c <scalbnf+0xb0>)
   130d0:	4288      	cmp	r0, r1
   130d2:	d80e      	bhi.n	130f2 <scalbnf+0x36>
   130d4:	4a26      	ldr	r2, [pc, #152]	; (13170 <scalbnf+0xb4>)
   130d6:	4290      	cmp	r0, r2
   130d8:	d911      	bls.n	130fe <scalbnf+0x42>
   130da:	0e24      	lsrs	r4, r4, #24
   130dc:	1964      	adds	r4, r4, r5
   130de:	2cfe      	cmp	r4, #254	; 0xfe
   130e0:	dc2a      	bgt.n	13138 <scalbnf+0x7c>
   130e2:	2c00      	cmp	r4, #0
   130e4:	dd19      	ble.n	1311a <scalbnf+0x5e>
   130e6:	4b23      	ldr	r3, [pc, #140]	; (13174 <scalbnf+0xb8>)
   130e8:	05e2      	lsls	r2, r4, #23
   130ea:	401e      	ands	r6, r3
   130ec:	4332      	orrs	r2, r6
   130ee:	1c10      	adds	r0, r2, #0
   130f0:	bd70      	pop	{r4, r5, r6, pc}
   130f2:	1c18      	adds	r0, r3, #0
   130f4:	1c19      	adds	r1, r3, #0
   130f6:	f7ed fafd 	bl	6f4 <__aeabi_fadd>
   130fa:	1c02      	adds	r2, r0, #0
   130fc:	e7f7      	b.n	130ee <scalbnf+0x32>
   130fe:	2198      	movs	r1, #152	; 0x98
   13100:	1c18      	adds	r0, r3, #0
   13102:	05c9      	lsls	r1, r1, #23
   13104:	f7ed fe46 	bl	d94 <__aeabi_fmul>
   13108:	4a1b      	ldr	r2, [pc, #108]	; (13178 <scalbnf+0xbc>)
   1310a:	1c03      	adds	r3, r0, #0
   1310c:	4295      	cmp	r5, r2
   1310e:	db1c      	blt.n	1314a <scalbnf+0x8e>
   13110:	0044      	lsls	r4, r0, #1
   13112:	0e24      	lsrs	r4, r4, #24
   13114:	1c06      	adds	r6, r0, #0
   13116:	3c19      	subs	r4, #25
   13118:	e7e0      	b.n	130dc <scalbnf+0x20>
   1311a:	1c22      	adds	r2, r4, #0
   1311c:	3216      	adds	r2, #22
   1311e:	da19      	bge.n	13154 <scalbnf+0x98>
   13120:	4a16      	ldr	r2, [pc, #88]	; (1317c <scalbnf+0xc0>)
   13122:	4295      	cmp	r5, r2
   13124:	dc08      	bgt.n	13138 <scalbnf+0x7c>
   13126:	1c19      	adds	r1, r3, #0
   13128:	4815      	ldr	r0, [pc, #84]	; (13180 <scalbnf+0xc4>)
   1312a:	f000 f82d 	bl	13188 <copysignf>
   1312e:	4914      	ldr	r1, [pc, #80]	; (13180 <scalbnf+0xc4>)
   13130:	f7ed fe30 	bl	d94 <__aeabi_fmul>
   13134:	1c02      	adds	r2, r0, #0
   13136:	e7da      	b.n	130ee <scalbnf+0x32>
   13138:	1c19      	adds	r1, r3, #0
   1313a:	4812      	ldr	r0, [pc, #72]	; (13184 <scalbnf+0xc8>)
   1313c:	f000 f824 	bl	13188 <copysignf>
   13140:	4910      	ldr	r1, [pc, #64]	; (13184 <scalbnf+0xc8>)
   13142:	f7ed fe27 	bl	d94 <__aeabi_fmul>
   13146:	1c02      	adds	r2, r0, #0
   13148:	e7d1      	b.n	130ee <scalbnf+0x32>
   1314a:	490d      	ldr	r1, [pc, #52]	; (13180 <scalbnf+0xc4>)
   1314c:	f7ed fe22 	bl	d94 <__aeabi_fmul>
   13150:	1c02      	adds	r2, r0, #0
   13152:	e7cc      	b.n	130ee <scalbnf+0x32>
   13154:	4a07      	ldr	r2, [pc, #28]	; (13174 <scalbnf+0xb8>)
   13156:	1c20      	adds	r0, r4, #0
   13158:	3019      	adds	r0, #25
   1315a:	4016      	ands	r6, r2
   1315c:	05c0      	lsls	r0, r0, #23
   1315e:	21cc      	movs	r1, #204	; 0xcc
   13160:	4330      	orrs	r0, r6
   13162:	0589      	lsls	r1, r1, #22
   13164:	f7ed fe16 	bl	d94 <__aeabi_fmul>
   13168:	1c02      	adds	r2, r0, #0
   1316a:	e7c0      	b.n	130ee <scalbnf+0x32>
   1316c:	7f7fffff 	.word	0x7f7fffff
   13170:	007fffff 	.word	0x007fffff
   13174:	807fffff 	.word	0x807fffff
   13178:	ffff3cb0 	.word	0xffff3cb0
   1317c:	0000c350 	.word	0x0000c350
   13180:	0da24260 	.word	0x0da24260
   13184:	7149f2ca 	.word	0x7149f2ca

00013188 <copysignf>:
copysignf():
   13188:	0040      	lsls	r0, r0, #1
   1318a:	0fc9      	lsrs	r1, r1, #31
   1318c:	07c9      	lsls	r1, r1, #31
   1318e:	0840      	lsrs	r0, r0, #1
   13190:	4308      	orrs	r0, r1
   13192:	4770      	bx	lr

00013194 <__errno>:
__errno():
   13194:	4b01      	ldr	r3, [pc, #4]	; (1319c <__errno+0x8>)
   13196:	6818      	ldr	r0, [r3, #0]
   13198:	4770      	bx	lr
   1319a:	46c0      	nop			; (mov r8, r8)
   1319c:	1fffe07c 	.word	0x1fffe07c

000131a0 <memset>:
memset():
   131a0:	1c03      	adds	r3, r0, #0
   131a2:	1882      	adds	r2, r0, r2
   131a4:	4293      	cmp	r3, r2
   131a6:	d002      	beq.n	131ae <memset+0xe>
   131a8:	7019      	strb	r1, [r3, #0]
   131aa:	3301      	adds	r3, #1
   131ac:	e7fa      	b.n	131a4 <memset+0x4>
   131ae:	4770      	bx	lr

000131b0 <strcpy>:
strcpy():
   131b0:	1c03      	adds	r3, r0, #0
   131b2:	780a      	ldrb	r2, [r1, #0]
   131b4:	3101      	adds	r1, #1
   131b6:	701a      	strb	r2, [r3, #0]
   131b8:	3301      	adds	r3, #1
   131ba:	2a00      	cmp	r2, #0
   131bc:	d1f9      	bne.n	131b2 <strcpy+0x2>
   131be:	4770      	bx	lr

000131c0 <strlen>:
strlen():
   131c0:	2300      	movs	r3, #0
   131c2:	5cc2      	ldrb	r2, [r0, r3]
   131c4:	3301      	adds	r3, #1
   131c6:	2a00      	cmp	r2, #0
   131c8:	d1fb      	bne.n	131c2 <strlen+0x2>
   131ca:	1e58      	subs	r0, r3, #1
   131cc:	4770      	bx	lr
   131ce:	0000      	movs	r0, r0
$d():
   131d0:	00000b18 	.word	0x00000b18
   131d4:	00000aca 	.word	0x00000aca
   131d8:	00000af8 	.word	0x00000af8
   131dc:	00000a52 	.word	0x00000a52
   131e0:	00000af8 	.word	0x00000af8
   131e4:	00000aee 	.word	0x00000aee
   131e8:	00000af8 	.word	0x00000af8
   131ec:	00000a52 	.word	0x00000a52
   131f0:	00000aca 	.word	0x00000aca
   131f4:	00000aca 	.word	0x00000aca
   131f8:	00000aee 	.word	0x00000aee
   131fc:	00000a52 	.word	0x00000a52
   13200:	00000a4a 	.word	0x00000a4a
   13204:	00000a4a 	.word	0x00000a4a
   13208:	00000a4a 	.word	0x00000a4a
   1320c:	00000afe 	.word	0x00000afe
   13210:	00000ebc 	.word	0x00000ebc
   13214:	00000eb6 	.word	0x00000eb6
   13218:	00000eb6 	.word	0x00000eb6
   1321c:	00000eac 	.word	0x00000eac
   13220:	00000e0c 	.word	0x00000e0c
   13224:	00000e0c 	.word	0x00000e0c
   13228:	00000ea2 	.word	0x00000ea2
   1322c:	00000eac 	.word	0x00000eac
   13230:	00000e0c 	.word	0x00000e0c
   13234:	00000ea2 	.word	0x00000ea2
   13238:	00000e0c 	.word	0x00000e0c
   1323c:	00000eac 	.word	0x00000eac
   13240:	00000e0a 	.word	0x00000e0a
   13244:	00000e0a 	.word	0x00000e0a
   13248:	00000e0a 	.word	0x00000e0a
   1324c:	00000f44 	.word	0x00000f44
   13250:	00001bf8 	.word	0x00001bf8
   13254:	00001b94 	.word	0x00001b94
   13258:	00001bdc 	.word	0x00001bdc
   1325c:	00001ac2 	.word	0x00001ac2
   13260:	00001bdc 	.word	0x00001bdc
   13264:	00001bd0 	.word	0x00001bd0
   13268:	00001bdc 	.word	0x00001bdc
   1326c:	00001ac2 	.word	0x00001ac2
   13270:	00001b94 	.word	0x00001b94
   13274:	00001b94 	.word	0x00001b94
   13278:	00001bd0 	.word	0x00001bd0
   1327c:	00001ac2 	.word	0x00001ac2
   13280:	00001ab8 	.word	0x00001ab8
   13284:	00001ab8 	.word	0x00001ab8
   13288:	00001ab8 	.word	0x00001ab8
   1328c:	00001e1c 	.word	0x00001e1c
   13290:	52535441 	.word	0x52535441
   13294:	2c322c4d 	.word	0x2c322c4d
   13298:	00000d30 	.word	0x00000d30
   1329c:	4e554f43 	.word	0x4e554f43
   132a0:	00524554 	.word	0x00524554
   132a4:	0000ecb0 	.word	0x0000ecb0
   132a8:	0000ecc4 	.word	0x0000ecc4
   132ac:	0000ecd4 	.word	0x0000ecd4
   132b0:	0000ec9e 	.word	0x0000ec9e
   132b4:	0000ecd0 	.word	0x0000ecd0
   132b8:	0000ec92 	.word	0x0000ec92
   132bc:	0000ecc8 	.word	0x0000ecc8
   132c0:	0000ec86 	.word	0x0000ec86
   132c4:	0000eccc 	.word	0x0000eccc
   132c8:	0000ec7a 	.word	0x0000ec7a
   132cc:	0000ecd8 	.word	0x0000ecd8
   132d0:	0000ec6e 	.word	0x0000ec6e
   132d4:	0000ecdc 	.word	0x0000ecdc
   132d8:	0000ec62 	.word	0x0000ec62
   132dc:	0000ec5c 	.word	0x0000ec5c
   132e0:	0000ec56 	.word	0x0000ec56
   132e4:	78716d5f 	.word	0x78716d5f
   132e8:	6c64695f 	.word	0x6c64695f
   132ec:	61745f65 	.word	0x61745f65
   132f0:	00006b73 	.word	0x00006b73

000132f4 <_mqx_path>:
   132f4:	0001337c                                |3..

000132f8 <_mqx_vendor>:
   132f8:	000133c0                                .3..

000132fc <_mqxlite_version_number>:
   132fc:	01010001                                ....

00013300 <_mqx_version_number>:
   13300:	04000000 312e3156 0000312e 20677541     ....V1.1.1..Aug 
   13310:	32203132 20353130 31207461 37313a33     21 2015 at 13:17
   13320:	0037333a 20296328 31313032 65724620     :37.(c) 2011 Fre
   13330:	61637365 5320656c 63696d65 75646e6f     escale Semicondu
   13340:	726f7463 6c41202e 6972206c 73746867     ctor. All rights
   13350:	73657220 65767265 00002e64 5f505350      reserved...PSP_
   13360:	49564552 4e4f4953 00000000 5f4e4547     REVISION....GEN_
   13370:	49564552 4e4f4953 00000000 462f3a43     REVISION....C:/F
   13380:	73656572 656c6163 53444b2f 302e335f     reescale/KDS_3.0
   13390:	652f302e 70696c63 502f6573 65636f72     .0/eclipse/Proce
   133a0:	726f7373 65707845 6c2f7472 6d2f6269     ssorExpert/lib/m
   133b0:	696c7871 562f6574 2e312e31 00002f31     qxlite/V1.1.1/..
   133c0:	65657246 6c616373 72462f65 63736565     Freescale/Freesc
   133d0:	20656c61 0058514d 2e302e34 00000030     ale MQX.4.0.0...
   133e0:	6e69616d 00000000 65736472 6164736e     main....rdsensda
   133f0:	00006174 69737566 00006e6f 6367616d     ta..fusion..magc
   13400:	00006c61                                al..

00013404 <MQX_template_list>:
   13404:	00000001 0000c0d1 0000028c 00000008     ................
   13414:	000133e0 00000001 00000000 00000002     .3..............
   13424:	0000c1a9 0000048c 00000009 000133e8     .............3..
	...
   1343c:	00000003 0000c1e9 0000048c 0000000a     ................
   1344c:	000133f4 00000000 00000000 00000004     .3..............
   1345c:	0000c279 0000038c 0000000b 000133fc     y............3..
	...

00013490 <MQX_init_struct>:
   13490:	00000001 20000b74 20000dc8 00000001     ....t.. ... ....
   134a0:	00000110 20000dc8 00000130 20001110     ....... 0...... 
   134b0:	00013404 65646e75 20202e66 00000000     .4..undef.  ....
   134c0:	736f6361 00000066 66776f70 00000000     acosf...powf....
   134d0:	74727173 00000066                       sqrtf...

000134d8 <dp_h>:
   134d8:	00000000 3f15c000                       .......?

000134e0 <dp_l>:
   134e0:	00000000 35d1cfdc                       .......5

000134e8 <bp>:
   134e8:	3f800000 3fc00000                       ...?...?

000134f0 <npio2_hw>:
   134f0:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
   13500:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
   13510:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
   13520:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
   13530:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
   13540:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
   13550:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
   13560:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

00013570 <two_over_pi>:
   13570:	000000a2 000000f9 00000083 0000006e     ............n...
   13580:	0000004e 00000044 00000015 00000029     N...D.......)...
   13590:	000000fc 00000027 00000057 000000d1     ....'...W.......
   135a0:	000000f5 00000034 000000dd 000000c0     ....4...........
   135b0:	000000db 00000062 00000095 00000099     ....b...........
   135c0:	0000003c 00000043 00000090 00000041     <...C.......A...
   135d0:	000000fe 00000051 00000063 000000ab     ....Q...c.......
   135e0:	000000de 000000bb 000000c5 00000061     ............a...
   135f0:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
   13600:	00000042 0000004d 000000d2 000000e0     B...M...........
   13610:	00000006 00000049 0000002e 000000ea     ....I...........
   13620:	00000009 000000d1 00000092 0000001c     ................
   13630:	000000fe 0000001d 000000eb 0000001c     ................
   13640:	000000b1 00000029 000000a7 0000003e     ....).......>...
   13650:	000000e8 00000082 00000035 000000f5     ........5.......
   13660:	0000002e 000000bb 00000044 00000084     ........D.......
   13670:	000000e9 0000009c 00000070 00000026     ........p...&...
   13680:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
   13690:	00000039 00000091 000000d6 00000039     9...........9...
   136a0:	00000083 00000053 00000039 000000f4     ....S...9.......
   136b0:	0000009c 00000084 0000005f 0000008b     ........_.......
   136c0:	000000bd 000000f9 00000028 0000003b     ........(...;...
   136d0:	0000001f 000000f8 00000097 000000ff     ................
   136e0:	000000de 00000005 00000098 0000000f     ................
   136f0:	000000ef 0000002f 00000011 0000008b     ..../...........
   13700:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
   13710:	0000006d 00000036 0000007e 000000cf     m...6...~.......
   13720:	00000027 000000cb 00000009 000000b7     '...............
   13730:	0000004f 00000046 0000003f 00000066     O...F...?...f...
   13740:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
   13750:	00000075 00000027 000000ba 000000c7     u...'...........
   13760:	000000eb 000000e5 000000f1 0000007b     ............{...
   13770:	0000003d 00000007 00000039 000000f7     =.......9.......
   13780:	0000008a 00000052 00000092 000000ea     ....R...........
   13790:	0000006b 000000fb 0000005f 000000b1     k......._.......
   137a0:	0000001f 0000008d 0000005d 00000008     ........].......
   137b0:	00000056 00000003 00000030 00000046     V.......0...F...
   137c0:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
   137d0:	000000f0 000000cf 000000bc 00000020     ............ ...
   137e0:	0000009a 000000f4 00000036 0000001d     ........6.......
   137f0:	000000a9 000000e3 00000091 00000061     ............a...
   13800:	0000005e 000000e6 0000001b 00000008     ^...............
   13810:	00000065 00000099 00000085 0000005f     e..........._...
   13820:	00000014 000000a0 00000068 00000040     ........h...@...
   13830:	0000008d 000000ff 000000d8 00000080     ................
   13840:	0000004d 00000073 00000027 00000031     M...s...'...1...
   13850:	00000006 00000006 00000015 00000056     ............V...
   13860:	000000ca 00000073 000000a8 000000c9     ....s...........
   13870:	00000060 000000e2 0000007b 000000c0     `.......{.......
   13880:	0000008c 0000006b                       ....k...

00013888 <init_jk>:
   13888:	00000004 00000007 00000009              ............

00013894 <PIo2>:
   13894:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
   138a4:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
   138b4:	1fc40000 1bc60000 17440000              ..........D.

000138c0 <TWO52>:
   138c0:	00000000 43300000 00000000 c3300000     ......0C......0.
   138d0:	00000043                                C...

000138d4 <__sf_fake_stdin>:
	...

000138f4 <__sf_fake_stdout>:
	...

00013914 <__sf_fake_stderr>:
	...

00013934 <_init>:
$t():
   13934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13936:	46c0      	nop			; (mov r8, r8)
   13938:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1393a:	bc08      	pop	{r3}
   1393c:	469e      	mov	lr, r3
   1393e:	4770      	bx	lr

00013940 <_fini>:
   13940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13942:	46c0      	nop			; (mov r8, r8)
   13944:	bcf8      	pop	{r3, r4, r5, r6, r7}
   13946:	bc08      	pop	{r3}
   13948:	469e      	mov	lr, r3
   1394a:	4770      	bx	lr

0001394c <_sched_start_internal>:
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:90
   1394c:	4896      	ldr	r0, [pc, #600]	; (13ba8 <__get_CONTROL+0x6>)
   1394e:	6800      	ldr	r0, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:91
   13950:	e029      	b.n	139a6 <sched_internal>

00013952 <_sched_run_internal>:
_sched_run_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:99
   13952:	4895      	ldr	r0, [pc, #596]	; (13ba8 <__get_CONTROL+0x6>)
   13954:	6800      	ldr	r0, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:100
   13956:	e026      	b.n	139a6 <sched_internal>

00013958 <_sched_check_scheduler_internal>:
_sched_check_scheduler_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:108
   13958:	4893      	ldr	r0, [pc, #588]	; (13ba8 <__get_CONTROL+0x6>)
   1395a:	6800      	ldr	r0, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:110
   1395c:	8b01      	ldrh	r1, [r0, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:111
   1395e:	2900      	cmp	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:112
   13960:	d105      	bne.n	1396e <_sched_check_scheduler_internal_end>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:114
   13962:	6a41      	ldr	r1, [r0, #36]	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:115
   13964:	69c2      	ldr	r2, [r0, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:116
   13966:	69d3      	ldr	r3, [r2, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:117
   13968:	4299      	cmp	r1, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:120
   1396a:	d000      	beq.n	1396e <_sched_check_scheduler_internal_end>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:135
   1396c:	e000      	b.n	13970 <_sched_execute_scheduler_internal>

0001396e <_sched_check_scheduler_internal_end>:
_sched_check_scheduler_internal_end():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:138
   1396e:	4770      	bx	lr

00013970 <_sched_execute_scheduler_internal>:
_sched_execute_scheduler_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:168
   13970:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
   13972:	4640      	mov	r0, r8
   13974:	4649      	mov	r1, r9
   13976:	4652      	mov	r2, sl
   13978:	465b      	mov	r3, fp
   1397a:	b40f      	push	{r0, r1, r2, r3}
   1397c:	b4f0      	push	{r4, r5, r6, r7}
   1397e:	f3ef 8410 	mrs	r4, PRIMASK
   13982:	b410      	push	{r4}
   13984:	f3ef 8109 	mrs	r1, PSP
   13988:	f3ef 8500 	mrs	r5, CPSR
   1398c:	4e87      	ldr	r6, [pc, #540]	; (13bac <__get_CONTROL+0xa>)
   1398e:	4335      	orrs	r5, r6
   13990:	4662      	mov	r2, ip
   13992:	4673      	mov	r3, lr
   13994:	4674      	mov	r4, lr
   13996:	4608      	mov	r0, r1
   13998:	3034      	adds	r0, #52	; 0x34
   1399a:	c03c      	stmia	r0!, {r2, r3, r4, r5}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:170
   1399c:	b672      	cpsid	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:172
   1399e:	4882      	ldr	r0, [pc, #520]	; (13ba8 <__get_CONTROL+0x6>)
   139a0:	6800      	ldr	r0, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:173
   139a2:	69c3      	ldr	r3, [r0, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:174
   139a4:	6159      	str	r1, [r3, #20]

000139a6 <sched_internal>:
sched_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:181
   139a6:	6a41      	ldr	r1, [r0, #36]	; 0x24

000139a8 <find_noempty_que>:
find_noempty_que():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:183
   139a8:	680a      	ldr	r2, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:184
   139aa:	428a      	cmp	r2, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:185
   139ac:	d107      	bne.n	139be <switch_task>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:186
   139ae:	6889      	ldr	r1, [r1, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:187
   139b0:	0009      	movs	r1, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:188
   139b2:	d1f9      	bne.n	139a8 <find_noempty_que>

000139b4 <no_one_to_run>:
no_one_to_run():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:193
   139b4:	b662      	cpsie	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:194
   139b6:	bf30      	wfi
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:195
   139b8:	b672      	cpsid	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:198
   139ba:	6a01      	ldr	r1, [r0, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:199
   139bc:	e7f4      	b.n	139a8 <find_noempty_que>

000139be <switch_task>:
switch_task():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:203
   139be:	6241      	str	r1, [r0, #36]	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:204
   139c0:	61c2      	str	r2, [r0, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:206
   139c2:	8c93      	ldrh	r3, [r2, #36]	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:207
   139c4:	8343      	strh	r3, [r0, #26]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:219
   139c6:	6950      	ldr	r0, [r2, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:220
   139c8:	4601      	mov	r1, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:221
   139ca:	3124      	adds	r1, #36	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:222
   139cc:	468c      	mov	ip, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:224
   139ce:	3004      	adds	r0, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:225
   139d0:	c8fe      	ldmia	r0!, {r1, r2, r3, r4, r5, r6, r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:226
   139d2:	46ba      	mov	sl, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:227
   139d4:	46b1      	mov	r9, r6
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:228
   139d6:	46a8      	mov	r8, r5
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:229
   139d8:	4627      	mov	r7, r4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:230
   139da:	461e      	mov	r6, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:231
   139dc:	4615      	mov	r5, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:232
   139de:	460c      	mov	r4, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:234
   139e0:	c802      	ldmia	r0!, {r1}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:235
   139e2:	468b      	mov	fp, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:237
   139e4:	f3ef 8114 	mrs	r1, CONTROL
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:238
   139e8:	2900      	cmp	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:239
   139ea:	d107      	bne.n	139fc <rest_of_stack_frame_restore>

000139ec <return_from_interrupt>:
return_from_interrupt():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:242
   139ec:	4661      	mov	r1, ip
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:243
   139ee:	f381 8809 	msr	PSP, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:245
   139f2:	3924      	subs	r1, #36	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:246
   139f4:	c904      	ldmia	r1!, {r2}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:247
   139f6:	f382 8810 	msr	PRIMASK, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:249
   139fa:	bd00      	pop	{pc}

000139fc <rest_of_stack_frame_restore>:
rest_of_stack_frame_restore():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:253
   139fc:	4661      	mov	r1, ip
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:254
   139fe:	3120      	adds	r1, #32
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:255
   13a00:	f381 8809 	msr	PSP, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:256
   13a04:	3010      	adds	r0, #16
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:258
   13a06:	c80e      	ldmia	r0!, {r1, r2, r3}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:259
   13a08:	468c      	mov	ip, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:260
   13a0a:	4696      	mov	lr, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:262
   13a0c:	c802      	ldmia	r0!, {r1}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:263
   13a0e:	3820      	subs	r0, #32
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:266
   13a10:	4a67      	ldr	r2, [pc, #412]	; (13bb0 <__get_CONTROL+0xe>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:267
   13a12:	400a      	ands	r2, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:268
   13a14:	d004      	beq.n	13a20 <move_pc_at_the_start_of_stackframe>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:269
   13a16:	f3ef 8209 	mrs	r2, PSP
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:270
   13a1a:	3204      	adds	r2, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:271
   13a1c:	f382 8809 	msr	PSP, r2

00013a20 <move_pc_at_the_start_of_stackframe>:
move_pc_at_the_start_of_stackframe():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:273
   13a20:	4602      	mov	r2, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:274
   13a22:	3a24      	subs	r2, #36	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:277
   13a24:	f381 8800 	msr	CPSR_f, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:282
   13a28:	b408      	push	{r3}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:283
   13a2a:	b410      	push	{r4}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:284
   13a2c:	ca10      	ldmia	r2!, {r4}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:286
   13a2e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:300
   13a30:	f384 8810 	msr	PRIMASK, r4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:301
   13a34:	bc10      	pop	{r4}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:302
   13a36:	bd00      	pop	{pc}

00013a38 <_mqx_api_call>:
_mqx_api_call_end():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:324
   13a38:	e7fe      	b.n	13a38 <_mqx_api_call>

00013a3a <_task_block>:
_task_block():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:399
   13a3a:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
   13a3c:	4640      	mov	r0, r8
   13a3e:	4649      	mov	r1, r9
   13a40:	4652      	mov	r2, sl
   13a42:	465b      	mov	r3, fp
   13a44:	b40f      	push	{r0, r1, r2, r3}
   13a46:	b4f0      	push	{r4, r5, r6, r7}
   13a48:	f3ef 8410 	mrs	r4, PRIMASK
   13a4c:	b410      	push	{r4}
   13a4e:	f3ef 8109 	mrs	r1, PSP
   13a52:	f3ef 8500 	mrs	r5, CPSR
   13a56:	4e55      	ldr	r6, [pc, #340]	; (13bac <__get_CONTROL+0xa>)
   13a58:	4335      	orrs	r5, r6
   13a5a:	4662      	mov	r2, ip
   13a5c:	4673      	mov	r3, lr
   13a5e:	4674      	mov	r4, lr
   13a60:	4608      	mov	r0, r1
   13a62:	3034      	adds	r0, #52	; 0x34
   13a64:	c03c      	stmia	r0!, {r2, r3, r4, r5}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:401
   13a66:	b672      	cpsid	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:403
   13a68:	484f      	ldr	r0, [pc, #316]	; (13ba8 <__get_CONTROL+0x6>)
   13a6a:	6800      	ldr	r0, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:404
   13a6c:	69c3      	ldr	r3, [r0, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:405
   13a6e:	6159      	str	r1, [r3, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:409
   13a70:	689a      	ldr	r2, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:410
   13a72:	2101      	movs	r1, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:411
   13a74:	430a      	orrs	r2, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:412
   13a76:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:418
   13a78:	685a      	ldr	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:419
   13a7a:	6819      	ldr	r1, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:420
   13a7c:	6011      	str	r1, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:421
   13a7e:	604a      	str	r2, [r1, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:423
   13a80:	e791      	b.n	139a6 <sched_internal>

00013a82 <_int_kernel_isr>:
_int_kernel_isr():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:441
   13a82:	f3ef 8010 	mrs	r0, PRIMASK
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:442
   13a86:	b672      	cpsid	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:443
   13a88:	b500      	push	{lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:444
   13a8a:	b401      	push	{r0}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:446
   13a8c:	4b46      	ldr	r3, [pc, #280]	; (13ba8 <__get_CONTROL+0x6>)
   13a8e:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:449
   13a90:	8b19      	ldrh	r1, [r3, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:450
   13a92:	3101      	adds	r1, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:451
   13a94:	8319      	strh	r1, [r3, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:454
   13a96:	4847      	ldr	r0, [pc, #284]	; (13bb4 <__get_CONTROL+0x12>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:455
   13a98:	b401      	push	{r0}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:456
   13a9a:	f3ef 8105 	mrs	r1, IPSR
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:457
   13a9e:	6b58      	ldr	r0, [r3, #52]	; 0x34
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:458
   13aa0:	b403      	push	{r0, r1}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:460
   13aa2:	f3ef 8008 	mrs	r0, MSP
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:461
   13aa6:	6358      	str	r0, [r3, #52]	; 0x34
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:463
   13aa8:	4608      	mov	r0, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:480
   13aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:483
   13aac:	2a00      	cmp	r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:484
   13aae:	d100      	bne.n	13ab2 <_isr_skip_run_default1>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:485
   13ab0:	e03a      	b.n	13b28 <_isr_run_default>

00013ab2 <_isr_skip_run_default1>:
_isr_skip_run_default1():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:488
   13ab2:	4290      	cmp	r0, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:489
   13ab4:	d838      	bhi.n	13b28 <_isr_run_default>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:491
   13ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:492
   13ab8:	1a81      	subs	r1, r0, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:493
   13aba:	db35      	blt.n	13b28 <_isr_run_default>

00013abc <_int_kernel_isr_vect_ok>:
_int_kernel_isr_vect_ok():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:535
   13abc:	220c      	movs	r2, #12
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:536
   13abe:	4351      	muls	r1, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:538
   13ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:539
   13ac2:	4411      	add	r1, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:540
   13ac4:	680a      	ldr	r2, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:541
   13ac6:	6888      	ldr	r0, [r1, #8]

00013ac8 <_isr_execute>:
_isr_execute():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:548
   13ac8:	b662      	cpsie	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:550
   13aca:	b408      	push	{r3}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:552
   13acc:	4790      	blx	r2

00013ace <_int_kernel_isr_epilog>:
_int_kernel_isr_epilog():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:556
   13ace:	bc08      	pop	{r3}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:558
   13ad0:	b672      	cpsid	i

00013ad2 <_int_kernel_isr_return_internal>:
_int_kernel_isr_return_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:577
   13ad2:	bc03      	pop	{r0, r1}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:578
   13ad4:	6358      	str	r0, [r3, #52]	; 0x34
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:580
   13ad6:	bc01      	pop	{r0}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:583
   13ad8:	8b19      	ldrh	r1, [r3, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:584
   13ada:	3901      	subs	r1, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:585
   13adc:	8319      	strh	r1, [r3, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:587
   13ade:	2900      	cmp	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:588
   13ae0:	d11e      	bne.n	13b20 <_isr_return_end>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:592
   13ae2:	69da      	ldr	r2, [r3, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:593
   13ae4:	6a90      	ldr	r0, [r2, #40]	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:594
   13ae6:	4934      	ldr	r1, [pc, #208]	; (13bb8 <__get_CONTROL+0x16>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:595
   13ae8:	4208      	tst	r0, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:596
   13aea:	d119      	bne.n	13b20 <_isr_return_end>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:600
   13aec:	6a59      	ldr	r1, [r3, #36]	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:601
   13aee:	6809      	ldr	r1, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:602
   13af0:	4291      	cmp	r1, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:604
   13af2:	d015      	beq.n	13b20 <_isr_return_end>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:608
   13af4:	f3ef 8109 	mrs	r1, PSP
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:610
   13af8:	3118      	adds	r1, #24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:611
   13afa:	c901      	ldmia	r1!, {r0}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:612
   13afc:	3001      	adds	r0, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:613
   13afe:	3904      	subs	r1, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:614
   13b00:	c101      	stmia	r1!, {r0}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:615
   13b02:	3940      	subs	r1, #64	; 0x40
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:617
   13b04:	bc01      	pop	{r0}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:618
   13b06:	c101      	stmia	r1!, {r0}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:619
   13b08:	c1f0      	stmia	r1!, {r4, r5, r6, r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:620
   13b0a:	4642      	mov	r2, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:621
   13b0c:	464b      	mov	r3, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:622
   13b0e:	4654      	mov	r4, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:623
   13b10:	465d      	mov	r5, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:624
   13b12:	c13c      	stmia	r1!, {r2, r3, r4, r5}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:625
   13b14:	3924      	subs	r1, #36	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:628
   13b16:	4824      	ldr	r0, [pc, #144]	; (13ba8 <__get_CONTROL+0x6>)
   13b18:	6800      	ldr	r0, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:629
   13b1a:	69c3      	ldr	r3, [r0, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:630
   13b1c:	6159      	str	r1, [r3, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:632
   13b1e:	e742      	b.n	139a6 <sched_internal>

00013b20 <_isr_return_end>:
_isr_return_end():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:635
   13b20:	bc01      	pop	{r0}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:636
   13b22:	f380 8810 	msr	PRIMASK, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:637
   13b26:	bd00      	pop	{pc}

00013b28 <_isr_run_default>:
_isr_run_default():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:642
   13b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:644
   13b2a:	e7cd      	b.n	13ac8 <_isr_execute>

00013b2c <_psp_exception_return>:
_psp_exception_return():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:658
   13b2c:	b672      	cpsid	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:659
   13b2e:	b4f7      	push	{r0, r1, r2, r4, r5, r6, r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:661
   13b30:	4b1d      	ldr	r3, [pc, #116]	; (13ba8 <__get_CONTROL+0x6>)
   13b32:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:664
   13b34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:665
   13b36:	3210      	adds	r2, #16
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:667
   13b38:	6811      	ldr	r1, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:668
   13b3a:	468e      	mov	lr, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:669
   13b3c:	3204      	adds	r2, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:672
   13b3e:	481f      	ldr	r0, [pc, #124]	; (13bbc <__get_CONTROL+0x1a>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:673
   13b40:	2101      	movs	r1, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:674
   13b42:	4388      	bics	r0, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:675
   13b44:	6190      	str	r0, [r2, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:677
   13b46:	caff      	ldmia	r2, {r0, r1, r2, r3, r4, r5, r6, r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:678
   13b48:	46b8      	mov	r8, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:680
   13b4a:	bc80      	pop	{r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:683
   13b4c:	3f04      	subs	r7, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:684
   13b4e:	c77f      	stmia	r7!, {r0, r1, r2, r3, r4, r5, r6}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:685
   13b50:	3f1c      	subs	r7, #28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:686
   13b52:	4638      	mov	r0, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:687
   13b54:	4647      	mov	r7, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:688
   13b56:	c080      	stmia	r0!, {r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:689
   13b58:	3804      	subs	r0, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:692
   13b5a:	bcf6      	pop	{r1, r2, r4, r5, r6, r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:694
   13b5c:	f380 8808 	msr	MSP, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:696
   13b60:	b662      	cpsie	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:698
   13b62:	4770      	bx	lr

00013b64 <_mem_test_and_set>:
_mem_test_and_set():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:717
   13b64:	b506      	push	{r1, r2, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:719
   13b66:	7801      	ldrb	r1, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:720
   13b68:	4a15      	ldr	r2, [pc, #84]	; (13bc0 <__get_CONTROL+0x1e>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:721
   13b6a:	4211      	tst	r1, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:722
   13b6c:	d103      	bne.n	13b76 <_mem_test_and_set_0x80>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:723
   13b6e:	4311      	orrs	r1, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:724
   13b70:	7001      	strb	r1, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:725
   13b72:	4040      	eors	r0, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:726
   13b74:	e000      	b.n	13b78 <_mem_test_and_set_pop>

00013b76 <_mem_test_and_set_0x80>:
_mem_test_and_set_0x80():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:728
   13b76:	2080      	movs	r0, #128	; 0x80

00013b78 <_mem_test_and_set_pop>:
_mem_test_and_set_pop():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:731
   13b78:	bd06      	pop	{r1, r2, pc}

00013b7a <__get_PSP>:
__get_PSP():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:745
   13b7a:	f3ef 8009 	mrs	r0, PSP
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:746
   13b7e:	4770      	bx	lr

00013b80 <__get_MSP>:
__get_MSP():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:760
   13b80:	f3ef 8008 	mrs	r0, MSP
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:761
   13b84:	4770      	bx	lr

00013b86 <__set_MSP>:
__set_MSP():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:775
   13b86:	f380 8808 	msr	MSP, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:776
   13b8a:	4770      	bx	lr

00013b8c <__get_PSR>:
__get_PSR():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:793
   13b8c:	f3ef 8003 	mrs	r0, PSR
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:795
   13b90:	4770      	bx	lr

00013b92 <__enable_interrupt>:
__enable_interrupt():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:812
   13b92:	b662      	cpsie	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:813
   13b94:	4770      	bx	lr

00013b96 <__disable_interrupt>:
__disable_interrupt():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:828
   13b96:	b672      	cpsid	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:829
   13b98:	4770      	bx	lr

00013b9a <__get_LR>:
__get_LR():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:849
   13b9a:	4670      	mov	r0, lr
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:850
   13b9c:	4770      	bx	lr

00013b9e <__get_PC>:
__get_PC():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:865
   13b9e:	4678      	mov	r0, pc
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:866
   13ba0:	4770      	bx	lr

00013ba2 <__get_CONTROL>:
__get_CONTROL():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:880
   13ba2:	f3ef 8014 	mrs	r0, CONTROL
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:881
   13ba6:	4770      	bx	lr
$d():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:90
   13ba8:	1fffe000 	.word	0x1fffe000
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:168
   13bac:	01000000 	.word	0x01000000
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:266
   13bb0:	00000200 	.word	0x00000200
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:454
   13bb4:	00000000 	.word	0x00000000
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:594
   13bb8:	00001000 	.word	0x00001000
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:672
   13bbc:	00013ace 	.word	0x00013ace
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:720
   13bc0:	00000080 	.word	0x00000080
