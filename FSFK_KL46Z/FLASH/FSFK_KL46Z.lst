
FSFK_KL46Z.elf:     file format elf32-littlearm
FSFK_KL46Z.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000471

Program Header:
    LOAD off    0x00008000 vaddr 0x00000000 paddr 0x00000000 align 2**15
         filesz 0x000000c0 memsz 0x000000c0 flags r--
    LOAD off    0x00008400 vaddr 0x00000400 paddr 0x00000400 align 2**15
         filesz 0x00000010 memsz 0x00000010 flags r--
    LOAD off    0x00008410 vaddr 0x00000410 paddr 0x00000410 align 2**15
         filesz 0x0001559c memsz 0x0001559c flags rwx
    LOAD off    0x0001e000 vaddr 0x1fffe000 paddr 0x000159ac align 2**15
         filesz 0x00000080 memsz 0x000038e0 flags rw-
    LOAD off    0x000218e0 vaddr 0x200018e0 paddr 0x00015a2c align 2**15
         filesz 0x00000018 memsz 0x00000418 flags rw-
private flags = 5000002: [Version5 EABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .interrupts   000000c0  00000000  00000000  00008000  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .cfmprotect   00000010  00000400  00000400  00008400  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00015594  00000410  00000410  00008410  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000004  000159a4  000159a4  0001d9a4  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  000159a8  000159a8  0001d9a8  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  1fffe000  000159ac  0001e000  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003860  1fffe080  00015a2c  0001e080  2**2  ALLOC
  7 .romp         00000018  200018e0  00015a2c  000218e0  2**0  CONTENTS, ALLOC, LOAD, DATA
  8 ._user_heap_stack 00000400  200018f8  00015a44  000218f8  2**0  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000218f8  2**0  CONTENTS, READONLY
 10 .debug_info   0001ff4b  00000000  00000000  00021920  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005149  00000000  00000000  0004186b  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001f480  00000000  00000000  000469b4  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000dc0  00000000  00000000  00065e38  2**3  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002430  00000000  00000000  00066bf8  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009a35  00000000  00000000  00069028  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004834  00000000  00000000  00072a5d  2**0  CONTENTS, READONLY, DEBUGGING
 17 .comment      00000070  00000000  00000000  00077291  2**0  CONTENTS, READONLY
 18 .debug_frame  00002c58  00000000  00000000  00077304  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .interrupts	00000000 .interrupts
00000400 l    d  .cfmprotect	00000000 .cfmprotect
00000410 l    d  .text	00000000 .text
000159a4 l    d  .init_array	00000000 .init_array
000159a8 l    d  .fini_array	00000000 .fini_array
1fffe000 l    d  .data	00000000 .data
1fffe080 l    d  .bss	00000000 .bss
200018e0 l    d  .romp	00000000 .romp
200018f8 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 Vectors.c
00000000 l    df *ABS*	00000000 Cpu.c
00000000 l    df *ABS*	00000000 crtstuff.c
00015714 l     O .text	00000000 __EH_FRAME_BEGIN__
00000410 l     F .text	00000000 __do_global_dtors_aux
1fffe080 l       .bss	00000000 completed.7863
000159a8 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
00000438 l     F .text	00000000 frame_dummy
1fffe084 l       .bss	00000000 object.7868
000159a4 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 ./MQXLITE/psp/cortex_m/core/M0/boot.o
00000000 l       *ABS*	00000000 TD_TD_NEXT
00000004 l       *ABS*	00000000 TD_TD_PREV
00000008 l       *ABS*	00000000 TD_STATE
0000000c l       *ABS*	00000000 TD_TASK_ID
00000010 l       *ABS*	00000000 TD_STACK_BASE
00000014 l       *ABS*	00000000 TD_STACK_PTR
00000018 l       *ABS*	00000000 TD_STACK_LIMIT
0000001c l       *ABS*	00000000 TD_MY_QUEUE
00000020 l       *ABS*	00000000 TD_HOME_QUEUE
00000024 l       *ABS*	00000000 TD_TASK_SR
00000026 l       *ABS*	00000000 TD_RESERVED_1
00000028 l       *ABS*	00000000 TD_FLAGS
00000034 l       *ABS*	00000000 TD_FLOAT_CONTEXT_PTR
00000000 l       *ABS*	00000000 RQ_HEAD_READY_Q
00000004 l       *ABS*	00000000 RQ_TAIL_READY_Q
00000008 l       *ABS*	00000000 RQ_NEXT_Q
0000000c l       *ABS*	00000000 RQ_ENABLE_SR
0000000e l       *ABS*	00000000 RQ_PRIORITY
00000000 l       *ABS*	00000000 IT_APP_ISR
00000004 l       *ABS*	00000000 IT_APP_ISR_EXCEPTION_HANDLER
00000008 l       *ABS*	00000000 IT_APP_ISR_DATA
00000000 l       *ABS*	00000000 HASH_ISR_NUM
00000004 l       *ABS*	00000000 HASH_ISR_ADDR
00000008 l       *ABS*	00000000 HASH_ISR_EXCEPT_HNDL
0000000c l       *ABS*	00000000 HASH_ISR_DATA
00000010 l       *ABS*	00000000 HASH_ISR_NEXT
00000000 l       *ABS*	00000000 KD_ADDRESSING_CAPABILITY
00000004 l       *ABS*	00000000 KD_ENDIANESS
00000008 l       *ABS*	00000000 KD_CPU_TYPE
0000000a l       *ABS*	00000000 KD_PSP_CFG_MEMORY_ALIGNMENT
0000000c l       *ABS*	00000000 KD_PSP_CFG_STACK_ALIGNMENT
0000000e l       *ABS*	00000000 KD_PSP_CFG_MEM_STOREBLOCK_ALIGNMENT
00000010 l       *ABS*	00000000 KD_CONFIG1
00000012 l       *ABS*	00000000 KD_CONFIG2
00000014 l       *ABS*	00000000 KD_FLAGS
00000016 l       *ABS*	00000000 KD_DISABLE_SR
00000018 l       *ABS*	00000000 KD_IN_ISR
0000001a l       *ABS*	00000000 KD_ACTIVE_SR
0000001c l       *ABS*	00000000 KD_ACTIVE_PTR
00000020 l       *ABS*	00000000 KD_READY_Q_LIST
00000024 l       *ABS*	00000000 KD_CURRENT_READY_Q
00000028 l       *ABS*	00000000 KD_DEFAULT_ISR
0000002c l       *ABS*	00000000 KD_FIRST_USER_ISR_VECTOR
00000030 l       *ABS*	00000000 KD_LAST_USER_ISR_VECTOR
00000034 l       *ABS*	00000000 KD_INTERRUPT_CONTEXT_PTR
00000038 l       *ABS*	00000000 KD_INTERRUPT_TABLE_PTR
0000003c l       *ABS*	00000000 KD_INTERRUPT_STACK_PTR
00000040 l       *ABS*	00000000 KD_LOG_CONTROL
00000044 l       *ABS*	00000000 KD_LOG_OLD_TD
00000048 l       *ABS*	00000000 KD_FP_ACTIVE_PTR
0000004c l       *ABS*	00000000 KD_DSP_ACTIVE_PTR
00000050 l       *ABS*	00000000 KD_SYSTEM_TD
00008000 l       *ABS*	00000000 PSP_CNFG_MQX_KERNEL_LOGGING
00004000 l       *ABS*	00000000 PSP_CNFG_FP_REGISTERS_EXIST
00000000 l       *ABS*	00000000 PSP_CNFG
00000002 l       *ABS*	00000000 FP_TASK_MASK
00000200 l       *ABS*	00000000 FP_CONTEXT_SAVED_MASK
0000fdff l       *ABS*	00000000 FP_CONTEXT_CLEAR_MASK
00001000 l       *ABS*	00000000 PREEMPTION_DISABLED
00000000 l       *ABS*	00000000 STORE_ALL_REGISTERS
e000e180 l       *ABS*	00000000 NVIC_ICER
e000e280 l       *ABS*	00000000 NVIC_ICPR
00000000 l    df *ABS*	00000000 _udivsi3.o
000004a8 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _divsi3.o
00000544 l       .text	00000000 .divsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_cmpsf2.o
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 _clzsi2.o
00000000 l    df *ABS*	00000000 Events.c
00000000 l    df *ABS*	00000000 approximations.c
00000000 l    df *ABS*	00000000 drivers.c
00000000 l    df *ABS*	00000000 fusion.c
00000000 l    df *ABS*	00000000 magnetic.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 matrix.c
00000000 l    df *ABS*	00000000 mqx_tasks.c
00000000 l    df *ABS*	00000000 orientation.c
00000000 l    df *ABS*	00000000 tasks.c
1fffe09c l     O .bss	00000001 iCounter.8749
00000000 l    df *ABS*	00000000 user_tasks.c
00000000 l    df *ABS*	00000000 startup.c
00010e8e l       .text	00000000 skip_sp
1fffe0a0 l     O .bss	00000028 argv
00000000 l    df *ABS*	00000000 int_inst.c
00000000 l    df *ABS*	00000000 int_vtab.c
00000000 l    df *ABS*	00000000 mem_zero.c
00000000 l    df *ABS*	00000000 psp_iinit.c
00000000 l    df *ABS*	00000000 psp_tiad.c
00000000 l    df *ABS*	00000000 psp_tinm.c
00000000 l    df *ABS*	00000000 sc_irdyq.c
00000000 l    df *ABS*	00000000 stack_bu.c
00000000 l    df *ABS*	00000000 stack_de.c
00000000 l    df *ABS*	00000000 idletask.c
00000000 l    df *ABS*	00000000 int.c
00000000 l    df *ABS*	00000000 lwevent.c
00000000 l    df *ABS*	00000000 lwsem.c
00000000 l    df *ABS*	00000000 mqx_utils.c
00000000 l    df *ABS*	00000000 mqxlite.c
00000000 l    df *ABS*	00000000 task.c
00000000 l    df *ABS*	00000000 time_ticks.c
00000000 l    df *ABS*	00000000 FTM.c
1fffe0c8 l     O .bss	0000000c DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 I2C.c
1fffe0d4 l     O .bss	00000024 DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 LED_BLUE.c
1fffe0f8 l     O .bss	00000004 DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 LED_GREEN.c
1fffe0fc l     O .bss	00000004 DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 LED_RED.c
1fffe100 l     O .bss	00000004 DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 MQX1.c
1fffe104 l     O .bss	00000004 SystemTimerDeviceDataPtr
00000000 l    df *ABS*	00000000 SystemTimer1.c
1fffe12c l     O .bss	0000000c DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 TestPin_KF_Time.c
1fffe138 l     O .bss	00000004 DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 TestPin_MagCal_Time.c
1fffe13c l     O .bss	00000004 DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 UART.c
1fffe140 l     O .bss	00000020 DeviceDataPrv__DEFAULT_RTOS_ALLOC
00000000 l    df *ABS*	00000000 sf_sin.c
00000000 l    df *ABS*	00000000 wf_acos.c
00000000 l    df *ABS*	00000000 wf_pow.c
00000000 l    df *ABS*	00000000 wf_sqrt.c
00000000 l    df *ABS*	00000000 ef_acos.c
00000000 l    df *ABS*	00000000 ef_pow.c
000152b4 l     O .text	00000008 dp_h
000152bc l     O .text	00000008 dp_l
000152c4 l     O .text	00000008 bp
00000000 l    df *ABS*	00000000 ef_rem_pio2.c
000152cc l     O .text	00000080 npio2_hw
0001534c l     O .text	00000318 two_over_pi
00000000 l    df *ABS*	00000000 ef_sqrt.c
00000000 l    df *ABS*	00000000 kf_cos.c
00000000 l    df *ABS*	00000000 kf_rem_pio2.c
00015664 l     O .text	0000000c init_jk
00015670 l     O .text	0000002c PIo2
00000000 l    df *ABS*	00000000 kf_sin.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
000156a0 l     O .text	00000010 TWO52
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 sf_finite.c
00000000 l    df *ABS*	00000000 sf_floor.c
00000000 l    df *ABS*	00000000 sf_fpclassify.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 sf_copysign.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 task_template_list.c
00000000 l    df *ABS*	00000000 impure.c
1fffe01c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 c:/freescale/kds_3.0.0/toolchain/bin/../lib/gcc/arm-none-eabi/4.8.4/armv6-m/crti.o
00000000 l    df *ABS*	00000000 c:/freescale/kds_3.0.0/toolchain/bin/../lib/gcc/arm-none-eabi/4.8.4/armv6-m/crtn.o
00000000 l    df *ABS*	00000000 ./MQXLITE/psp/cortex_m/core/M0/dispatch.o
00000000 l       *ABS*	00000000 TD_TD_NEXT
00000004 l       *ABS*	00000000 TD_TD_PREV
00000008 l       *ABS*	00000000 TD_STATE
0000000c l       *ABS*	00000000 TD_TASK_ID
00000010 l       *ABS*	00000000 TD_STACK_BASE
00000014 l       *ABS*	00000000 TD_STACK_PTR
00000018 l       *ABS*	00000000 TD_STACK_LIMIT
0000001c l       *ABS*	00000000 TD_MY_QUEUE
00000020 l       *ABS*	00000000 TD_HOME_QUEUE
00000024 l       *ABS*	00000000 TD_TASK_SR
00000026 l       *ABS*	00000000 TD_RESERVED_1
00000028 l       *ABS*	00000000 TD_FLAGS
00000034 l       *ABS*	00000000 TD_FLOAT_CONTEXT_PTR
00000000 l       *ABS*	00000000 RQ_HEAD_READY_Q
00000004 l       *ABS*	00000000 RQ_TAIL_READY_Q
00000008 l       *ABS*	00000000 RQ_NEXT_Q
0000000c l       *ABS*	00000000 RQ_ENABLE_SR
0000000e l       *ABS*	00000000 RQ_PRIORITY
00000000 l       *ABS*	00000000 IT_APP_ISR
00000004 l       *ABS*	00000000 IT_APP_ISR_EXCEPTION_HANDLER
00000008 l       *ABS*	00000000 IT_APP_ISR_DATA
00000000 l       *ABS*	00000000 HASH_ISR_NUM
00000004 l       *ABS*	00000000 HASH_ISR_ADDR
00000008 l       *ABS*	00000000 HASH_ISR_EXCEPT_HNDL
0000000c l       *ABS*	00000000 HASH_ISR_DATA
00000010 l       *ABS*	00000000 HASH_ISR_NEXT
00000000 l       *ABS*	00000000 KD_ADDRESSING_CAPABILITY
00000004 l       *ABS*	00000000 KD_ENDIANESS
00000008 l       *ABS*	00000000 KD_CPU_TYPE
0000000a l       *ABS*	00000000 KD_PSP_CFG_MEMORY_ALIGNMENT
0000000c l       *ABS*	00000000 KD_PSP_CFG_STACK_ALIGNMENT
0000000e l       *ABS*	00000000 KD_PSP_CFG_MEM_STOREBLOCK_ALIGNMENT
00000010 l       *ABS*	00000000 KD_CONFIG1
00000012 l       *ABS*	00000000 KD_CONFIG2
00000014 l       *ABS*	00000000 KD_FLAGS
00000016 l       *ABS*	00000000 KD_DISABLE_SR
00000018 l       *ABS*	00000000 KD_IN_ISR
0000001a l       *ABS*	00000000 KD_ACTIVE_SR
0000001c l       *ABS*	00000000 KD_ACTIVE_PTR
00000020 l       *ABS*	00000000 KD_READY_Q_LIST
00000024 l       *ABS*	00000000 KD_CURRENT_READY_Q
00000028 l       *ABS*	00000000 KD_DEFAULT_ISR
0000002c l       *ABS*	00000000 KD_FIRST_USER_ISR_VECTOR
00000030 l       *ABS*	00000000 KD_LAST_USER_ISR_VECTOR
00000034 l       *ABS*	00000000 KD_INTERRUPT_CONTEXT_PTR
00000038 l       *ABS*	00000000 KD_INTERRUPT_TABLE_PTR
0000003c l       *ABS*	00000000 KD_INTERRUPT_STACK_PTR
00000040 l       *ABS*	00000000 KD_LOG_CONTROL
00000044 l       *ABS*	00000000 KD_LOG_OLD_TD
00000048 l       *ABS*	00000000 KD_FP_ACTIVE_PTR
0000004c l       *ABS*	00000000 KD_DSP_ACTIVE_PTR
00000050 l       *ABS*	00000000 KD_SYSTEM_TD
00008000 l       *ABS*	00000000 PSP_CNFG_MQX_KERNEL_LOGGING
00004000 l       *ABS*	00000000 PSP_CNFG_FP_REGISTERS_EXIST
00000000 l       *ABS*	00000000 PSP_CNFG
00000002 l       *ABS*	00000000 FP_TASK_MASK
00000200 l       *ABS*	00000000 FP_CONTEXT_SAVED_MASK
0000fdff l       *ABS*	00000000 FP_CONTEXT_CLEAR_MASK
00001000 l       *ABS*	00000000 PREEMPTION_DISABLED
00000000 l       *ABS*	00000000 STORE_ALL_REGISTERS
000000aa l       *ABS*	00000000 SVC_MQX_FN
00015786 l       .text	00000000 sched_internal
0001574e l       .text	00000000 _sched_check_scheduler_internal_end
00015788 l       .text	00000000 find_noempty_que
0001579e l       .text	00000000 switch_task
00015794 l       .text	00000000 no_one_to_run
000157dc l       .text	00000000 rest_of_stack_frame_restore
000157cc l       .text	00000000 return_from_interrupt
00015800 l       .text	00000000 move_pc_at_the_start_of_stackframe
00015818 l       .text	00000000 _mqx_api_call_end
00015892 l       .text	00000000 _isr_skip_run_default1
00015908 l       .text	00000000 _isr_run_default
0001589c l       .text	00000000 _int_kernel_isr_vect_ok
000158a8 l       .text	00000000 _isr_execute
000158ae l       .text	00000000 _int_kernel_isr_epilog
000158b2 l       .text	00000000 _int_kernel_isr_return_internal
00015900 l       .text	00000000 _isr_return_end
00015956 l       .text	00000000 _mem_test_and_set_0x80
00015958 l       .text	00000000 _mem_test_and_set_pop
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 PE_LDD.c
00000000 l    df *ABS*	00000000 
00000400 l       *ABS*	00000000 __stack_size
00000000 l       *UND*	00000000 _fstat
1fffe080 l       .bss	00000000 __bss_start__
1fffe000 l       .data	00000000 _sdata
00000000 l       *UND*	00000000 _isatty
00000000 l       *UND*	00000000 _sbrk
00000000 l       *UND*	00000000 __libc_fini_array
000159ac l       .fini_array	00000000 ___ROM_AT
00000000 l       *ABS*	00000000 __heap_size
00000000 l       *UND*	00000000 _printf_float
200018e0 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 __call_exitprocs
00000000 l       *UND*	00000000 _lseek
00000000 l       *UND*	00000000 software_init_hook
000159a8 l       .init_array	00000000 __init_array_end
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 atexit
000159a4 l       .init_array	00000000 __preinit_array_end
20006000 l       *ABS*	00000000 _estack
20006000 l       *ABS*	00000000 __stack
00000000 l       *UND*	00000000 _write
1fffe080 l       .data	00000000 _edata
00000000 l       *UND*	00000000 _read
000159a4 l       .init_array	00000000 __init_array_start
00000000 l       *UND*	00000000 _exit
000159a4 l       .init_array	00000000 __preinit_array_start
00000000 l       *UND*	00000000 _close
200018f8 g       ._user_heap_stack	00000000 __HeapBase
00000644 g     F .text	00000012 .hidden __aeabi_dcmple
1fffe160 g     O .bss	00000010 I2C_Buf
00011d10 g     F .text	00000034 _task_set_error
00011d44 g     F .text	0000028c _task_init_internal
000150e4 g     O .text	00000004 _mqxlite_version_number
000115fc g     F .text	00000064 _lwsem_create
00002058 g     F .text	00000094 .hidden __eqdf2
0001590c g     F .text	00000000 _psp_exception_return
1fffe320 g     O .bss	00000018 thisSV_1DOF_P_BASIC
200002e4 g     O .bss	0000028c Main_task_stack
0000cba0 g     F .text	000005e4 fUpdateCalibration7EIG
0000ddb8 g     F .text	000000a0 f3x3matrixDetA
000159a4 g       .text	00000000 __exception_table_end__
00012b88 g     F .text	00000054 system_timer_init
00011308 g     F .text	0000004c _int_init
0000e558 g     F .text	000000d8 Main_task
00012628 g     F .text	00000168 I2C_Interrupt
00010ddc g     F .text	00000002 UserHighFrequencyTaskRun
00011660 g     F .text	000000b4 _lwsem_post
200018f8 g       ._user_heap_stack	00000000 __heap_addr
00002b78 g     F .text	00000014 I2C_OnMasterBlockReceived
00010f14 g     F .text	000000ec _mem_zero
00015972 g     F .text	00000000 __enable_interrupt
0001118c g     F .text	00000044 _psp_build_stack_frame
00012b70 g     F .text	00000010 LED_RED_SetVal
0000ebec g     F .text	0000006a f3DOFMagnetometerMatrixWin8
00010dd8 g     F .text	00000002 UserMediumFrequencyTaskInit
000130f8 g     F .text	00000398 powf
000159a4 g       .init_array	00000000 __exidx_end
000020ec g     F .text	000000fc .hidden __gtdf2
00014f64 g     F .text	0000000c __errno
00006e90 g     F .text	000001b0 fRun_6DOF_GB_BASIC
1fffe338 g     O .bss	00000034 thisAccel
0000f558 g     F .text	000000ec fNEDAnglesDegFromRotationMatrix
00013f30 g     F .text	000002f8 __ieee754_rem_pio2f
20000570 g     O .bss	0000048c RdSensData_task_stack
000159a4 g       .text	00000000 _etext
0000eb14 g     F .text	0000006a f3DOFMagnetometerMatrixNED
00000614 g     F .text	00000010 .hidden __aeabi_cdcmple
000006f4 g     F .text	000002d8 .hidden __aeabi_fadd
00012e4c g     F .text	0000010c UART_Init
00011714 g     F .text	00000098 _lwsem_wait
1fffe36c g     O .bss	000000a4 thisSV_3DOF_B_BASIC
00000000 g     O .interrupts	000000c0 __vect_table
00012388 g     F .text	00000010 _time_set_hwticks_per_tick
0001062c g     F .text	0000006c Fusion_Init
00013490 g     F .text	000000b0 sqrtf
1fffe170 g     O .bss	00000004 iCommand
00012a3c g     F .text	0000001a I2C_GetError
200009fc g     O .bss	00000254 _mqx_kernel_data_struct
0000dc04 g     F .text	0000003c f3x3matrixAeqMinusA
00000604 g     F .text	00000020 .hidden __aeabi_cdrcmple
00012f84 g     F .text	00000048 UART_SendBlock
00006254 g     F .text	000007c0 fInit_9DOF_GBY_KALMAN
000006cc g     F .text	00000012 .hidden __aeabi_fcmpgt
00015944 g     F .text	00000000 _mem_test_and_set
000021e8 g     F .text	000000fc .hidden __ltdf2
00000000 g       .interrupts	00000000 __VECTOR_TABLE_START
000159a4 g       .init_array	00000000 __DTOR_END__
00003804 g     F .text	000000d4 FXAS21000_Init
1fffe174 g     O .bss	00000100 sUARTOutputBuf
20000c50 g     O .bss	00000110 mqx_interrupt_stack
00003968 g     F .text	00000128 FXOS8700_ReadData
00010f00 g     F .text	00000014 _int_set_vector_table
000004a4 g     F .text	00000088 .hidden __udivsi3
1fffe080 g       .bss	00000000 __START_BSS
00001314 g     F .text	000000b8 .hidden __aeabi_i2f
00011000 g     F .text	00000012 _psp_int_init
00000cfc g     F .text	00000096 .hidden __lesf2
0000fca0 g     F .text	000000b8 fRotationVectorDegFromQuaternion
00012574 g     F .text	00000018 FTM_Interrupt
200018f8 g       ._user_heap_stack	00000000 __HeapLimit
00014e48 g     F .text	0000003c __fpclassifyf
00012b60 g     F .text	00000010 LED_RED_ClrVal
000109c4 g     F .text	000002c4 Fusion_Run
000117ac g     F .text	0000000c _mqx_set_cpu_type
00012174 g     F .text	000000c4 _time_delay_for
00000470 g     F .text	00000000 __boot
00014d9c g     F .text	00000014 finitef
00011230 g     F .text	00000018 _int_disable
00010eec g     F .text	00000014 _psp_int_install
00010244 g     F .text	0000002a fLPFScalar
00012d10 g     F .text	00000048 TestPin_MagCal_Time_Init
00010698 g     F .text	0000032c RdSensData_Run
00014d94 g     F .text	00000006 fabsf
000159a4 g       .text	00000000 __exception_table_start__
00003bb0 g     F .text	000022b8 CreateAndSendBluetoothPacketsViaUART
00000630 g     F .text	00000012 .hidden __aeabi_dcmplt
00011974 g     F .text	00000098 _mqxlite
00003238 g     F .text	00000378 fatan2_deg
000112a4 g     F .text	00000064 _int_install_isr
00012b04 g     F .text	0000000c LED_GREEN_SetVal
000118b4 g     F .text	000000c0 _mqxlite_init
00001a10 g     F .text	00000648 .hidden __aeabi_ddiv
00010e70 g     F .text	0000007c __thumb_startup
00000c18 g     F .text	00000054 .hidden __nesf2
000159a4 g       .init_array	00000000 __exidx_start
00012858 g     F .text	000000bc I2C_MasterSendBlock
00011248 g     F .text	0000001c _int_enable
00015982 g     F .text	00000000 __get_CONTROL
1fffe018 g     O .data	00000001 __fdlib_version
00014b34 g     F .text	000000f4 __kernel_sinf
000150e8 g     O .text	00000004 _mqx_version_number
0000ef50 g     F .text	000002f8 feCompassAndroid
00010e6c  w    F .text	00000002 __init_user
00012b10 g     F .text	0000000c LED_GREEN_NegVal
1fffe410 g     O .bss	00000b58 thisMagBuffer
00012b1c g     F .text	00000044 LED_RED_Init
00013540 g     F .text	000002d4 __ieee754_acosf
0001572c g     F .text	00000000 _sched_start_internal
00015714 g     F .text	00000000 _init
00012790 g     F .text	000000c8 I2C_Init
000029f0 g     F .text	00000118 .hidden __aeabi_d2f
00012ca8 g     F .text	00000048 TestPin_KF_Time_Init
1fffe004 g     O .data	00000014 mqx_task_stack_pointers
00000fe8 g     F .text	000002ec .hidden __aeabi_fsub
0001595a g     F .text	00000000 __get_PSP
0001239c g     F .text	00000120 __init_hardware
000150e0 g     O .text	00000004 _mqx_vendor
00014c40 g     F .text	00000154 rint
00002b44 g     F .text	0000001c FTM_OnCounterRestart
0001597a g     F .text	00000000 __get_LR
00010270 g     F .text	00000148 qAeqBxC
000117b8 g     F .text	000000fc _mqx_init_kernel_data_internal
000006e0 g     F .text	00000012 .hidden __aeabi_fcmpge
0001597e g     F .text	00000000 __get_PC
00012608 g     F .text	00000020 FTM_SetPeriodTicks
000104f0 g     F .text	000000d4 fqAeqNormqA
000142e4 g     F .text	00000190 __kernel_cosf
00006b9c g     F .text	00000160 fRun_3DOF_B_BASIC
0000311c g     F .text	0000011c fatan_deg
0000e2d8 g     F .text	00000280 fmatrixAeqInvA
00000c6c g     F .text	0000008e .hidden __gtsf2
00015278 g     O .text	00000024 MQX_init_struct
1fffe274 g     O .bss	00000020 sUARTInputBuf
000013cc g     F .text	00000644 .hidden __aeabi_dadd
1fffef68 g     O .bss	000000a4 thisSV_3DOF_G_BASIC
000021e8 g     F .text	000000fc .hidden __ledf2
000006b8 g     F .text	00000012 .hidden __aeabi_fcmple
00003b7c g     F .text	00000034 BlueRadios_Init
0000d184 g     F .text	000009e4 fUpdateCalibration10EIG
000113d8 g     F .text	00000128 _lwevent_set
000156f4 g     O .text	00000020 __sf_fake_stderr
00012238 g     F .text	00000138 _time_notify_kernel
000111d4 g     F .text	00000010 _mqx_idle_task
1ffff00c g     O .bss	0000001c thisPressure
00000000  w      *UND*	00000000 __deregister_frame_info
00012d58 g     F .text	00000010 TestPin_MagCal_Time_ClrVal
00015750 g     F .text	00000000 _sched_execute_scheduler_internal
00000540 g     F .text	00000000 .hidden __aeabi_idiv
0000bdc8 g     F .text	0000042c iUpdateMagnetometerBuffer
0000de58 g     F .text	00000480 eigencompute
000159a4 g       .init_array	00000000 __CTOR_LIST__
00003a90 g     F .text	000000ec FXAS21000_ReadData
00000658 g     F .text	00000012 .hidden __aeabi_dcmpgt
00002b08 g     F .text	0000003c .hidden __clzsi2
00011264 g     F .text	00000040 _int_get_isr_data
0000e9a4 g     F .text	00000170 f3DOFTiltWin8
0000eb80 g     F .text	0000006a f3DOFMagnetometerMatrixAndroid
0000066c g     F .text	00000012 .hidden __aeabi_dcmpge
1fffe000 g     O .data	00000004 _mqx_kernel_data
000103b8 g     F .text	00000138 qAeqAxB
200002e0 g     O .bss	00000004 _tad_task_at_flag
000022e4 g     F .text	00000668 .hidden __aeabi_dsub
00012a70 g     F .text	00000044 LED_BLUE_Init
00011500 g     F .text	000000fc _lwevent_wait_for
1fffe294 g     O .bss	0000007c mqxglobals
00012bf0 g     F .text	0000001c SystemTimer1_Interrupt
00012c80 g     F .text	00000008 SystemTimer1_GetInputFrequency
00000400 g     O .cfmprotect	00000010 _cfm
00011354 g     F .text	00000084 _lwevent_create
00000000 g       .interrupts	00000000 __vector_table
000012d4 g     F .text	00000040 .hidden __aeabi_f2iz
00015738 g     F .text	00000000 _sched_check_scheduler_internal
00000c18 g     F .text	00000054 .hidden __eqsf2
0001258c g     F .text	0000007c FTM_Init
20006000 g       *ABS*	00000000 __SP_INIT
0000e870 g     F .text	00000134 f3DOFTiltAndroid
00012b80 g     F .text	00000008 SystemTimer1_OnCounterRestart
00002b60 g     F .text	00000002 UART_OnBlockSent
20000d60 g     O .bss	000000d0 mqx_static_ready_queue
00012370 g     F .text	00000018 _time_set_hwtick_function
000009cc g     F .text	0000024c .hidden __aeabi_fdiv
00012f58 g     F .text	0000002c UART_ReceiveBlock
00010c88 g     F .text	0000013c MagCal_Run
0000c38c g     F .text	00000814 fUpdateCalibration4INV
000124bc g     F .text	000000b8 PE_low_level_init
1ffff028 g     O .bss	000000ac thisSV_6DOF_GB_BASIC
00000600  w    F .text	00000002 .hidden __aeabi_ldiv0
0000bce0 g     F .text	000000e8 fInitMagCalibration
00010df0 g     F .text	00000078 __copy_rom_sections_to_ram
00011090 g     F .text	00000078 _psp_set_kernel_disable_level
0000f730 g     F .text	0000017c fWin8AnglesDegFromRotationMatrix
00013814 g     F .text	0000071c __ieee754_powf
20000e30 g     O .bss	00000168 mqx_static_isr_table
00010dd4 g     F .text	00000002 UserHighFrequencyTaskInit
00012c88 g     F .text	00000014 SystemTimer1_GetPeriodTicks
1ffff0d4 g     O .bss	00000418 thisMagCal
00014e8c g     F .text	000000cc scalbnf
000156b4 g     O .text	00000020 __sf_fake_stdin
0000f8ac g     F .text	00000194 fQuaternionFromRotationVectorDeg
00014f70 g     F .text	00000010 memset
00014228 g     F .text	000000bc __ieee754_sqrtf
0000c1f4 g     F .text	00000198 fInvertMagCal
0000db68 g     F .text	0000000c main
0000dba4 g     F .text	00000060 f3x3matrixAeqAxScalar
0000fa40 g     F .text	00000140 fQuaternionFromRotationMatrix
00015732 g     F .text	00000000 _sched_run_internal
0001596c g     F .text	00000000 __get_PSR
00000cfc g     F .text	00000096 .hidden __ltsf2
000004a4 g     F .text	00000000 .hidden __aeabi_uidiv
0000db74 g     F .text	0000001a f3x3matrixAeqI
00014c28 g     F .text	00000004 matherr
00012398 g     F .text	00000004 Cpu_Interrupt
00002b90 g     F .text	000001b8 UART_OnBlockReceived
00012164 g     F .text	00000010 _task_set_error_td_internal
00012d00 g     F .text	00000010 TestPin_KF_Time_SetVal
1fffe108 g     O .bss	00000024 PE_LDD_DeviceDataList
000111d0 g     F .text	00000002 _psp_destroy_stack_frame
20000f98 g     O .bss	00000130 mqx_idle_task_stack
00012128 g     F .text	00000014 _task_fill_stack_internal
1ffff4ec g     O .bss	00000054 thisGyro
00011fd0 g     F .text	00000158 _task_create_at
00000688 g     F .text	00000010 .hidden __aeabi_cfcmple
00000540 g     F .text	000000ac .hidden __divsi3
00012a58 g     F .text	00000018 I2C_CheckBus
000159a4 g       .init_array	00000000 __CTOR_END__
200010c8 g     O .bss	0000048c Fusion_task_stack
00015960 g     F .text	00000000 __get_MSP
00012c6c g     F .text	00000014 SystemTimer1_Enable
000159a4 g       .init_array	00000000 __DTOR_LIST__
0000ec58 g     F .text	000002f8 feCompassNED
200018e0 g       .bss	00000000 __END_BSS
00002b8c g     F .text	00000002 UART_OnTxComplete
00006a58 g     F .text	00000144 fRun_3DOF_G_BASIC
00002058 g     F .text	00000094 .hidden __nedf2
000105c4 g     F .text	00000010 fqAeq1
00013054 g     F .text	000000a0 acosf
00015720 g     F .text	00000000 _fini
00012bdc g     F .text	00000014 system_timer_start
00014f58 g     F .text	0000000c copysignf
00015a2c g       .fini_array	00000000 _romp_at
00000c6c g     F .text	0000008e .hidden __gesf2
0000f644 g     F .text	000000ec fAndroidAnglesDegFromRotationMatrix
00011a14 g     F .text	00000140 _task_exit_function_internal
00014e84 g     F .text	00000008 nanf
1fffe07c g     O .data	00000004 _impure_ptr
1fffe310 g     O .bss	00000010 globals
00000698 g     F .text	0000000c .hidden __aeabi_fcmpeq
00012d68 g     F .text	00000010 TestPin_MagCal_Time_SetVal
00012d78 g     F .text	000000d4 UART_Interrupt
00000d94 g     F .text	00000254 .hidden __aeabi_fmul
1fffe000 g       .data	00000000 _mtb_end
00000680 g     F .text	00000018 .hidden __aeabi_cfrcmple
000159a4 g       .text	00000000 __sinit__
00010de0 g     F .text	00000010 UserMediumFrequencyTaskRun
00015966 g     F .text	00000000 __set_MSP
00012914 g     F .text	000000b8 I2C_MasterReceiveBlock
000038d8 g     F .text	00000090 MPL3115_ReadData
00012fd4 g     F .text	00000080 sinf
0001581a g     F .text	00000000 _task_block
00012fd0 g     F .text	00000004 UART_GetSentDataNum
00014c30 g     F .text	00000010 nan
00012fcc g     F .text	00000004 UART_GetReceivedDataNum
0000fb80 g     F .text	0000011e fRotationMatrixFromQuaternion
000006a4 g     F .text	00000012 .hidden __aeabi_fcmplt
00015a2c g       .fini_array	00000000 __S_romp
0000052c g     F .text	00000012 .hidden __aeabi_uidivmod
0000e630 g     F .text	00000040 RdSensData_task
00000624 g     F .text	0000000c .hidden __aeabi_dcmpeq
00007040 g     F .text	00001094 fRun_6DOF_GY_KALMAN
00012c0c g     F .text	00000060 SystemTimer1_Init
000035b0 g     F .text	000000d0 MPL3115_Init
0000e744 g     F .text	0000012c f3DOFTiltNED
0000f248 g     F .text	0000030e feCompassWin8
0000db90 g     F .text	00000014 f3x3matrixAeqScalar
00003680 g     F .text	00000184 FXOS8700_Init
00002b64 g     F .text	00000014 I2C_OnMasterBlockSent
00015976 g     F .text	00000000 __disable_interrupt
000150dc g     O .text	00000004 _mqx_path
00011b54 g     F .text	000001bc _task_destroy
00006cfc g     F .text	00000194 fRun_3DOF_Y_BASIC
00002d48 g     F .text	00000154 fasin_deg
00011054 g     F .text	0000003c _psp_normalize_ticks
00010e68  w    F .text	00000002 __init_registers
00000688 g     F .text	00000010 .hidden __aeabi_cfcmpeq
1fffe000 g       .data	00000000 _mtb_start
000156d4 g     O .text	00000020 __sf_fake_stdout
0000dc40 g     F .text	00000176 f3x3matrixAeqInvSymB
00012c9c g     F .text	0000000c SystemTimer1_GetCounterValue
00012cf0 g     F .text	00000010 TestPin_KF_Time_ClrVal
00000600  w    F .text	00000002 .hidden __aeabi_idiv0
00010dc4 g     F .text	00000010 UserStartup
00011a0c g     F .text	00000008 _mqx_exit
20001554 g     O .bss	0000038c MagCal_task_stack
0000fd58 g     F .text	000004ec fLPFOrientationQuaternion
0000e670 g     F .text	00000090 Fusion_task
00014474 g     F .text	000006c0 __kernel_rem_pio2f
0000e700 g     F .text	00000044 MagCal_task
00015862 g     F .text	00000000 _int_kernel_isr
00000614 g     F .text	00000010 .hidden __aeabi_cdcmpeq
000020ec g     F .text	000000fc .hidden __gedf2
000080d4 g     F .text	00003c0c fRun_9DOF_GBY_KALMAN
00005e68 g     F .text	000003ec fInit_6DOF_GY_KALMAN
000105d4 g     F .text	00000058 RdSensData_Init
00014db0 g     F .text	00000098 floorf
0000294c g     F .text	000000a4 .hidden __aeabi_f2d
1ffff540 g     O .bss	00000838 thisSV_9DOF_GBY_KALMAN
000129cc g     F .text	00000070 I2C_SelectSlaveDevice
00012ab4 g     F .text	00000010 LED_BLUE_SetVal
00000000  w      *UND*	00000000 _Jv_RegisterClasses
1ffffd78 g     O .bss	00000490 thisSV_6DOF_GY_KALMAN
00006a14 g     F .text	00000044 fRun_1DOF_P_BASIC
00011108 g     F .text	00000084 _psp_init_readyqs
00011014 g     F .text	00000040 _psp_add_ticks
000111e4 g     F .text	0000004c _int_default_isr
00002e9c g     F .text	00000280 facos_deg
0001213c g     F .text	00000028 _task_ready_internal
000005ec g     F .text	00000012 .hidden __aeabi_idivmod
00012ac4 g     F .text	00000040 LED_GREEN_Init
00000080 g       *ABS*	00000000 ___data_size
20000208 g     O .bss	00000058 thisMag
00000000  w      *UND*	00000000 __register_frame_info
20000260 g     O .bss	00000080 thisSV_3DOF_Y_BASIC
00015818 g     F .text	00000000 _mqx_api_call
000151ec g     O .text	0000008c MQX_template_list



Disassembly of section .text:

00000410 <__do_global_dtors_aux>:
$t():
     410:	b510      	push	{r4, lr}
     412:	4c06      	ldr	r4, [pc, #24]	; (42c <__do_global_dtors_aux+0x1c>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	2b00      	cmp	r3, #0
     418:	d107      	bne.n	42a <__do_global_dtors_aux+0x1a>
     41a:	4b05      	ldr	r3, [pc, #20]	; (430 <__do_global_dtors_aux+0x20>)
     41c:	2b00      	cmp	r3, #0
     41e:	d002      	beq.n	426 <__do_global_dtors_aux+0x16>
     420:	4804      	ldr	r0, [pc, #16]	; (434 <__do_global_dtors_aux+0x24>)
     422:	e000      	b.n	426 <__do_global_dtors_aux+0x16>
     424:	bf00      	nop
     426:	2301      	movs	r3, #1
     428:	7023      	strb	r3, [r4, #0]
     42a:	bd10      	pop	{r4, pc}
$d():
     42c:	1fffe080 	.word	0x1fffe080
     430:	00000000 	.word	0x00000000
     434:	00015714 	.word	0x00015714

00000438 <frame_dummy>:
$t():
     438:	b508      	push	{r3, lr}
     43a:	4b08      	ldr	r3, [pc, #32]	; (45c <frame_dummy+0x24>)
     43c:	2b00      	cmp	r3, #0
     43e:	d003      	beq.n	448 <frame_dummy+0x10>
     440:	4807      	ldr	r0, [pc, #28]	; (460 <frame_dummy+0x28>)
     442:	4908      	ldr	r1, [pc, #32]	; (464 <frame_dummy+0x2c>)
     444:	e000      	b.n	448 <frame_dummy+0x10>
     446:	bf00      	nop
     448:	4807      	ldr	r0, [pc, #28]	; (468 <frame_dummy+0x30>)
     44a:	6803      	ldr	r3, [r0, #0]
     44c:	2b00      	cmp	r3, #0
     44e:	d003      	beq.n	458 <frame_dummy+0x20>
     450:	4b06      	ldr	r3, [pc, #24]	; (46c <frame_dummy+0x34>)
     452:	2b00      	cmp	r3, #0
     454:	d000      	beq.n	458 <frame_dummy+0x20>
     456:	4798      	blx	r3
     458:	bd08      	pop	{r3, pc}
     45a:	46c0      	nop			; (mov r8, r8)
$d():
     45c:	00000000 	.word	0x00000000
     460:	00015714 	.word	0x00015714
     464:	1fffe084 	.word	0x1fffe084
     468:	1fffe080 	.word	0x1fffe080
     46c:	00000000 	.word	0x00000000

00000470 <__boot>:
$t():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:72

 ASM_PUBLIC_BEGIN(__boot)
 ASM_PUBLIC_FUNC(__boot)
ASM_LABEL(__boot)
/* Disable interrupts and clear pending flags */
        ldr r0, =0xFFFFFFFF
     470:	4809      	ldr	r0, [pc, #36]	; (498 <__boot+0x28>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:74
        /* NVIC_ICER - Interrupt Clear-Enable Register     */
        ldr r1, =NVIC_ICER
     472:	490a      	ldr	r1, [pc, #40]	; (49c <__boot+0x2c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:75
        str r0, [r1]
     474:	6008      	str	r0, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:77
        /* NVIC_ICPR - Interrupt Clear-Pending Register */
        ldr r1, =NVIC_ICPR
     476:	490a      	ldr	r1, [pc, #40]	; (4a0 <__boot+0x30>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:78
        str r0, [r1]
     478:	6008      	str	r0, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:81

/* Prepare process stack pointer */
        mrs r0, MSP
     47a:	f3ef 8008 	mrs	r0, MSP
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:82
        msr PSP, r0
     47e:	f380 8809 	msr	PSP, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:85

/* Switch to proccess stack (PSP) */
        mrs r0, CONTROL
     482:	f3ef 8014 	mrs	r0, CONTROL
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:86
        movs r1, #0x2
     486:	2102      	movs	r1, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:87
        orrs r0, r0, r1
     488:	4308      	orrs	r0, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:88
        msr CONTROL, r0
     48a:	f380 8814 	msr	CONTROL, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:89
        isb
     48e:	f3bf 8f6f 	isb	sy
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:95


#if defined(__CODEWARRIOR__) || defined(__GNUC__)
        /* call startup from EWL library */
        ASM_EXTERN(__thumb_startup)
        bl ASM_PREFIX(__thumb_startup)
     492:	f010 fced 	bl	10e70 <__thumb_startup>
     496:	46c0      	nop			; (mov r8, r8)
$d():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:72

 ASM_PUBLIC_BEGIN(__boot)
 ASM_PUBLIC_FUNC(__boot)
ASM_LABEL(__boot)
/* Disable interrupts and clear pending flags */
        ldr r0, =0xFFFFFFFF
     498:	ffffffff 	.word	0xffffffff
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:74
        /* NVIC_ICER - Interrupt Clear-Enable Register     */
        ldr r1, =NVIC_ICER
     49c:	e000e180 	.word	0xe000e180
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/boot.S:77
        str r0, [r1]
        /* NVIC_ICPR - Interrupt Clear-Pending Register */
        ldr r1, =NVIC_ICPR
     4a0:	e000e280 	.word	0xe000e280

000004a4 <__aeabi_uidiv>:
__udivsi3():
     4a4:	2900      	cmp	r1, #0
     4a6:	d034      	beq.n	512 <.udivsi3_skip_div0_test+0x6a>

000004a8 <.udivsi3_skip_div0_test>:
     4a8:	2301      	movs	r3, #1
     4aa:	2200      	movs	r2, #0
     4ac:	b410      	push	{r4}
     4ae:	4288      	cmp	r0, r1
     4b0:	d32c      	bcc.n	50c <.udivsi3_skip_div0_test+0x64>
     4b2:	2401      	movs	r4, #1
     4b4:	0724      	lsls	r4, r4, #28
     4b6:	42a1      	cmp	r1, r4
     4b8:	d204      	bcs.n	4c4 <.udivsi3_skip_div0_test+0x1c>
     4ba:	4281      	cmp	r1, r0
     4bc:	d202      	bcs.n	4c4 <.udivsi3_skip_div0_test+0x1c>
     4be:	0109      	lsls	r1, r1, #4
     4c0:	011b      	lsls	r3, r3, #4
     4c2:	e7f8      	b.n	4b6 <.udivsi3_skip_div0_test+0xe>
     4c4:	00e4      	lsls	r4, r4, #3
     4c6:	42a1      	cmp	r1, r4
     4c8:	d204      	bcs.n	4d4 <.udivsi3_skip_div0_test+0x2c>
     4ca:	4281      	cmp	r1, r0
     4cc:	d202      	bcs.n	4d4 <.udivsi3_skip_div0_test+0x2c>
     4ce:	0049      	lsls	r1, r1, #1
     4d0:	005b      	lsls	r3, r3, #1
     4d2:	e7f8      	b.n	4c6 <.udivsi3_skip_div0_test+0x1e>
     4d4:	4288      	cmp	r0, r1
     4d6:	d301      	bcc.n	4dc <.udivsi3_skip_div0_test+0x34>
     4d8:	1a40      	subs	r0, r0, r1
     4da:	431a      	orrs	r2, r3
     4dc:	084c      	lsrs	r4, r1, #1
     4de:	42a0      	cmp	r0, r4
     4e0:	d302      	bcc.n	4e8 <.udivsi3_skip_div0_test+0x40>
     4e2:	1b00      	subs	r0, r0, r4
     4e4:	085c      	lsrs	r4, r3, #1
     4e6:	4322      	orrs	r2, r4
     4e8:	088c      	lsrs	r4, r1, #2
     4ea:	42a0      	cmp	r0, r4
     4ec:	d302      	bcc.n	4f4 <.udivsi3_skip_div0_test+0x4c>
     4ee:	1b00      	subs	r0, r0, r4
     4f0:	089c      	lsrs	r4, r3, #2
     4f2:	4322      	orrs	r2, r4
     4f4:	08cc      	lsrs	r4, r1, #3
     4f6:	42a0      	cmp	r0, r4
     4f8:	d302      	bcc.n	500 <.udivsi3_skip_div0_test+0x58>
     4fa:	1b00      	subs	r0, r0, r4
     4fc:	08dc      	lsrs	r4, r3, #3
     4fe:	4322      	orrs	r2, r4
     500:	2800      	cmp	r0, #0
     502:	d003      	beq.n	50c <.udivsi3_skip_div0_test+0x64>
     504:	091b      	lsrs	r3, r3, #4
     506:	d001      	beq.n	50c <.udivsi3_skip_div0_test+0x64>
     508:	0909      	lsrs	r1, r1, #4
     50a:	e7e3      	b.n	4d4 <.udivsi3_skip_div0_test+0x2c>
     50c:	1c10      	adds	r0, r2, #0
     50e:	bc10      	pop	{r4}
     510:	4770      	bx	lr
     512:	2800      	cmp	r0, #0
     514:	d001      	beq.n	51a <.udivsi3_skip_div0_test+0x72>
     516:	2000      	movs	r0, #0
     518:	43c0      	mvns	r0, r0
     51a:	b407      	push	{r0, r1, r2}
     51c:	4802      	ldr	r0, [pc, #8]	; (528 <.udivsi3_skip_div0_test+0x80>)
     51e:	a102      	add	r1, pc, #8	; (adr r1, 528 <.udivsi3_skip_div0_test+0x80>)
     520:	1840      	adds	r0, r0, r1
     522:	9002      	str	r0, [sp, #8]
     524:	bd03      	pop	{r0, r1, pc}
     526:	46c0      	nop			; (mov r8, r8)
     528:	000000d9 	.word	0x000000d9

0000052c <__aeabi_uidivmod>:
__aeabi_uidivmod():
     52c:	2900      	cmp	r1, #0
     52e:	d0f0      	beq.n	512 <.udivsi3_skip_div0_test+0x6a>
     530:	b503      	push	{r0, r1, lr}
     532:	f7ff ffb9 	bl	4a8 <.udivsi3_skip_div0_test>
     536:	bc0e      	pop	{r1, r2, r3}
     538:	4342      	muls	r2, r0
     53a:	1a89      	subs	r1, r1, r2
     53c:	4718      	bx	r3
     53e:	46c0      	nop			; (mov r8, r8)

00000540 <__aeabi_idiv>:
__divsi3():
     540:	2900      	cmp	r1, #0
     542:	d041      	beq.n	5c8 <.divsi3_skip_div0_test+0x84>

00000544 <.divsi3_skip_div0_test>:
     544:	b410      	push	{r4}
     546:	1c04      	adds	r4, r0, #0
     548:	404c      	eors	r4, r1
     54a:	46a4      	mov	ip, r4
     54c:	2301      	movs	r3, #1
     54e:	2200      	movs	r2, #0
     550:	2900      	cmp	r1, #0
     552:	d500      	bpl.n	556 <.divsi3_skip_div0_test+0x12>
     554:	4249      	negs	r1, r1
     556:	2800      	cmp	r0, #0
     558:	d500      	bpl.n	55c <.divsi3_skip_div0_test+0x18>
     55a:	4240      	negs	r0, r0
     55c:	4288      	cmp	r0, r1
     55e:	d32c      	bcc.n	5ba <.divsi3_skip_div0_test+0x76>
     560:	2401      	movs	r4, #1
     562:	0724      	lsls	r4, r4, #28
     564:	42a1      	cmp	r1, r4
     566:	d204      	bcs.n	572 <.divsi3_skip_div0_test+0x2e>
     568:	4281      	cmp	r1, r0
     56a:	d202      	bcs.n	572 <.divsi3_skip_div0_test+0x2e>
     56c:	0109      	lsls	r1, r1, #4
     56e:	011b      	lsls	r3, r3, #4
     570:	e7f8      	b.n	564 <.divsi3_skip_div0_test+0x20>
     572:	00e4      	lsls	r4, r4, #3
     574:	42a1      	cmp	r1, r4
     576:	d204      	bcs.n	582 <.divsi3_skip_div0_test+0x3e>
     578:	4281      	cmp	r1, r0
     57a:	d202      	bcs.n	582 <.divsi3_skip_div0_test+0x3e>
     57c:	0049      	lsls	r1, r1, #1
     57e:	005b      	lsls	r3, r3, #1
     580:	e7f8      	b.n	574 <.divsi3_skip_div0_test+0x30>
     582:	4288      	cmp	r0, r1
     584:	d301      	bcc.n	58a <.divsi3_skip_div0_test+0x46>
     586:	1a40      	subs	r0, r0, r1
     588:	431a      	orrs	r2, r3
     58a:	084c      	lsrs	r4, r1, #1
     58c:	42a0      	cmp	r0, r4
     58e:	d302      	bcc.n	596 <.divsi3_skip_div0_test+0x52>
     590:	1b00      	subs	r0, r0, r4
     592:	085c      	lsrs	r4, r3, #1
     594:	4322      	orrs	r2, r4
     596:	088c      	lsrs	r4, r1, #2
     598:	42a0      	cmp	r0, r4
     59a:	d302      	bcc.n	5a2 <.divsi3_skip_div0_test+0x5e>
     59c:	1b00      	subs	r0, r0, r4
     59e:	089c      	lsrs	r4, r3, #2
     5a0:	4322      	orrs	r2, r4
     5a2:	08cc      	lsrs	r4, r1, #3
     5a4:	42a0      	cmp	r0, r4
     5a6:	d302      	bcc.n	5ae <.divsi3_skip_div0_test+0x6a>
     5a8:	1b00      	subs	r0, r0, r4
     5aa:	08dc      	lsrs	r4, r3, #3
     5ac:	4322      	orrs	r2, r4
     5ae:	2800      	cmp	r0, #0
     5b0:	d003      	beq.n	5ba <.divsi3_skip_div0_test+0x76>
     5b2:	091b      	lsrs	r3, r3, #4
     5b4:	d001      	beq.n	5ba <.divsi3_skip_div0_test+0x76>
     5b6:	0909      	lsrs	r1, r1, #4
     5b8:	e7e3      	b.n	582 <.divsi3_skip_div0_test+0x3e>
     5ba:	1c10      	adds	r0, r2, #0
     5bc:	4664      	mov	r4, ip
     5be:	2c00      	cmp	r4, #0
     5c0:	d500      	bpl.n	5c4 <.divsi3_skip_div0_test+0x80>
     5c2:	4240      	negs	r0, r0
     5c4:	bc10      	pop	{r4}
     5c6:	4770      	bx	lr
     5c8:	2800      	cmp	r0, #0
     5ca:	d006      	beq.n	5da <.divsi3_skip_div0_test+0x96>
     5cc:	db03      	blt.n	5d6 <.divsi3_skip_div0_test+0x92>
     5ce:	2000      	movs	r0, #0
     5d0:	43c0      	mvns	r0, r0
     5d2:	0840      	lsrs	r0, r0, #1
     5d4:	e001      	b.n	5da <.divsi3_skip_div0_test+0x96>
     5d6:	2080      	movs	r0, #128	; 0x80
     5d8:	0600      	lsls	r0, r0, #24
     5da:	b407      	push	{r0, r1, r2}
     5dc:	4802      	ldr	r0, [pc, #8]	; (5e8 <.divsi3_skip_div0_test+0xa4>)
     5de:	a102      	add	r1, pc, #8	; (adr r1, 5e8 <.divsi3_skip_div0_test+0xa4>)
     5e0:	1840      	adds	r0, r0, r1
     5e2:	9002      	str	r0, [sp, #8]
     5e4:	bd03      	pop	{r0, r1, pc}
     5e6:	46c0      	nop			; (mov r8, r8)
     5e8:	00000019 	.word	0x00000019

000005ec <__aeabi_idivmod>:
__aeabi_idivmod():
     5ec:	2900      	cmp	r1, #0
     5ee:	d0eb      	beq.n	5c8 <.divsi3_skip_div0_test+0x84>
     5f0:	b503      	push	{r0, r1, lr}
     5f2:	f7ff ffa7 	bl	544 <.divsi3_skip_div0_test>
     5f6:	bc0e      	pop	{r1, r2, r3}
     5f8:	4342      	muls	r2, r0
     5fa:	1a89      	subs	r1, r1, r2
     5fc:	4718      	bx	r3
     5fe:	46c0      	nop			; (mov r8, r8)

00000600 <__aeabi_idiv0>:
__aeabi_ldiv0():
     600:	4770      	bx	lr
     602:	46c0      	nop			; (mov r8, r8)

00000604 <__aeabi_cdrcmple>:
__aeabi_cdrcmple():
     604:	4684      	mov	ip, r0
     606:	1c10      	adds	r0, r2, #0
     608:	4662      	mov	r2, ip
     60a:	468c      	mov	ip, r1
     60c:	1c19      	adds	r1, r3, #0
     60e:	4663      	mov	r3, ip
     610:	e000      	b.n	614 <__aeabi_cdcmpeq>
     612:	46c0      	nop			; (mov r8, r8)

00000614 <__aeabi_cdcmpeq>:
     614:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     616:	f001 fde7 	bl	21e8 <__ledf2>
     61a:	2800      	cmp	r0, #0
     61c:	d401      	bmi.n	622 <__aeabi_cdcmpeq+0xe>
     61e:	2100      	movs	r1, #0
     620:	42c8      	cmn	r0, r1
     622:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00000624 <__aeabi_dcmpeq>:
__aeabi_dcmpeq():
     624:	b510      	push	{r4, lr}
     626:	f001 fd17 	bl	2058 <__eqdf2>
     62a:	4240      	negs	r0, r0
     62c:	3001      	adds	r0, #1
     62e:	bd10      	pop	{r4, pc}

00000630 <__aeabi_dcmplt>:
__aeabi_dcmplt():
     630:	b510      	push	{r4, lr}
     632:	f001 fdd9 	bl	21e8 <__ledf2>
     636:	2800      	cmp	r0, #0
     638:	db01      	blt.n	63e <__aeabi_dcmplt+0xe>
     63a:	2000      	movs	r0, #0
     63c:	bd10      	pop	{r4, pc}
     63e:	2001      	movs	r0, #1
     640:	bd10      	pop	{r4, pc}
     642:	46c0      	nop			; (mov r8, r8)

00000644 <__aeabi_dcmple>:
__aeabi_dcmple():
     644:	b510      	push	{r4, lr}
     646:	f001 fdcf 	bl	21e8 <__ledf2>
     64a:	2800      	cmp	r0, #0
     64c:	dd01      	ble.n	652 <__aeabi_dcmple+0xe>
     64e:	2000      	movs	r0, #0
     650:	bd10      	pop	{r4, pc}
     652:	2001      	movs	r0, #1
     654:	bd10      	pop	{r4, pc}
     656:	46c0      	nop			; (mov r8, r8)

00000658 <__aeabi_dcmpgt>:
__aeabi_dcmpgt():
     658:	b510      	push	{r4, lr}
     65a:	f001 fd47 	bl	20ec <__gedf2>
     65e:	2800      	cmp	r0, #0
     660:	dc01      	bgt.n	666 <__aeabi_dcmpgt+0xe>
     662:	2000      	movs	r0, #0
     664:	bd10      	pop	{r4, pc}
     666:	2001      	movs	r0, #1
     668:	bd10      	pop	{r4, pc}
     66a:	46c0      	nop			; (mov r8, r8)

0000066c <__aeabi_dcmpge>:
__aeabi_dcmpge():
     66c:	b510      	push	{r4, lr}
     66e:	f001 fd3d 	bl	20ec <__gedf2>
     672:	2800      	cmp	r0, #0
     674:	da01      	bge.n	67a <__aeabi_dcmpge+0xe>
     676:	2000      	movs	r0, #0
     678:	bd10      	pop	{r4, pc}
     67a:	2001      	movs	r0, #1
     67c:	bd10      	pop	{r4, pc}
     67e:	46c0      	nop			; (mov r8, r8)

00000680 <__aeabi_cfrcmple>:
__aeabi_cfrcmple():
     680:	4684      	mov	ip, r0
     682:	1c08      	adds	r0, r1, #0
     684:	4661      	mov	r1, ip
     686:	e7ff      	b.n	688 <__aeabi_cfcmpeq>

00000688 <__aeabi_cfcmpeq>:
     688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     68a:	f000 fb37 	bl	cfc <__lesf2>
     68e:	2800      	cmp	r0, #0
     690:	d401      	bmi.n	696 <__aeabi_cfcmpeq+0xe>
     692:	2100      	movs	r1, #0
     694:	42c8      	cmn	r0, r1
     696:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00000698 <__aeabi_fcmpeq>:
__aeabi_fcmpeq():
     698:	b510      	push	{r4, lr}
     69a:	f000 fabd 	bl	c18 <__eqsf2>
     69e:	4240      	negs	r0, r0
     6a0:	3001      	adds	r0, #1
     6a2:	bd10      	pop	{r4, pc}

000006a4 <__aeabi_fcmplt>:
__aeabi_fcmplt():
     6a4:	b510      	push	{r4, lr}
     6a6:	f000 fb29 	bl	cfc <__lesf2>
     6aa:	2800      	cmp	r0, #0
     6ac:	db01      	blt.n	6b2 <__aeabi_fcmplt+0xe>
     6ae:	2000      	movs	r0, #0
     6b0:	bd10      	pop	{r4, pc}
     6b2:	2001      	movs	r0, #1
     6b4:	bd10      	pop	{r4, pc}
     6b6:	46c0      	nop			; (mov r8, r8)

000006b8 <__aeabi_fcmple>:
__aeabi_fcmple():
     6b8:	b510      	push	{r4, lr}
     6ba:	f000 fb1f 	bl	cfc <__lesf2>
     6be:	2800      	cmp	r0, #0
     6c0:	dd01      	ble.n	6c6 <__aeabi_fcmple+0xe>
     6c2:	2000      	movs	r0, #0
     6c4:	bd10      	pop	{r4, pc}
     6c6:	2001      	movs	r0, #1
     6c8:	bd10      	pop	{r4, pc}
     6ca:	46c0      	nop			; (mov r8, r8)

000006cc <__aeabi_fcmpgt>:
__aeabi_fcmpgt():
     6cc:	b510      	push	{r4, lr}
     6ce:	f000 facd 	bl	c6c <__gesf2>
     6d2:	2800      	cmp	r0, #0
     6d4:	dc01      	bgt.n	6da <__aeabi_fcmpgt+0xe>
     6d6:	2000      	movs	r0, #0
     6d8:	bd10      	pop	{r4, pc}
     6da:	2001      	movs	r0, #1
     6dc:	bd10      	pop	{r4, pc}
     6de:	46c0      	nop			; (mov r8, r8)

000006e0 <__aeabi_fcmpge>:
__aeabi_fcmpge():
     6e0:	b510      	push	{r4, lr}
     6e2:	f000 fac3 	bl	c6c <__gesf2>
     6e6:	2800      	cmp	r0, #0
     6e8:	da01      	bge.n	6ee <__aeabi_fcmpge+0xe>
     6ea:	2000      	movs	r0, #0
     6ec:	bd10      	pop	{r4, pc}
     6ee:	2001      	movs	r0, #1
     6f0:	bd10      	pop	{r4, pc}
     6f2:	46c0      	nop			; (mov r8, r8)

000006f4 <__aeabi_fadd>:
__aeabi_fadd():
     6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6f6:	0243      	lsls	r3, r0, #9
     6f8:	0044      	lsls	r4, r0, #1
     6fa:	0fc5      	lsrs	r5, r0, #31
     6fc:	024e      	lsls	r6, r1, #9
     6fe:	0048      	lsls	r0, r1, #1
     700:	0e24      	lsrs	r4, r4, #24
     702:	1c2a      	adds	r2, r5, #0
     704:	099b      	lsrs	r3, r3, #6
     706:	0e00      	lsrs	r0, r0, #24
     708:	0fc9      	lsrs	r1, r1, #31
     70a:	09b6      	lsrs	r6, r6, #6
     70c:	428d      	cmp	r5, r1
     70e:	d05b      	beq.n	7c8 <__aeabi_fadd+0xd4>
     710:	1a22      	subs	r2, r4, r0
     712:	2a00      	cmp	r2, #0
     714:	dc00      	bgt.n	718 <__aeabi_fadd+0x24>
     716:	e089      	b.n	82c <__aeabi_fadd+0x138>
     718:	2800      	cmp	r0, #0
     71a:	d11d      	bne.n	758 <__aeabi_fadd+0x64>
     71c:	2e00      	cmp	r6, #0
     71e:	d000      	beq.n	722 <__aeabi_fadd+0x2e>
     720:	e075      	b.n	80e <__aeabi_fadd+0x11a>
     722:	0758      	lsls	r0, r3, #29
     724:	d004      	beq.n	730 <__aeabi_fadd+0x3c>
     726:	220f      	movs	r2, #15
     728:	401a      	ands	r2, r3
     72a:	2a04      	cmp	r2, #4
     72c:	d000      	beq.n	730 <__aeabi_fadd+0x3c>
     72e:	3304      	adds	r3, #4
     730:	2180      	movs	r1, #128	; 0x80
     732:	04c9      	lsls	r1, r1, #19
     734:	4019      	ands	r1, r3
     736:	1c2a      	adds	r2, r5, #0
     738:	2900      	cmp	r1, #0
     73a:	d03a      	beq.n	7b2 <__aeabi_fadd+0xbe>
     73c:	3401      	adds	r4, #1
     73e:	2cff      	cmp	r4, #255	; 0xff
     740:	d100      	bne.n	744 <__aeabi_fadd+0x50>
     742:	e07f      	b.n	844 <__aeabi_fadd+0x150>
     744:	019b      	lsls	r3, r3, #6
     746:	0a5b      	lsrs	r3, r3, #9
     748:	025b      	lsls	r3, r3, #9
     74a:	b2e4      	uxtb	r4, r4
     74c:	05e4      	lsls	r4, r4, #23
     74e:	0a58      	lsrs	r0, r3, #9
     750:	07d2      	lsls	r2, r2, #31
     752:	4320      	orrs	r0, r4
     754:	4310      	orrs	r0, r2
     756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     758:	2cff      	cmp	r4, #255	; 0xff
     75a:	d0e2      	beq.n	722 <__aeabi_fadd+0x2e>
     75c:	2180      	movs	r1, #128	; 0x80
     75e:	04c9      	lsls	r1, r1, #19
     760:	430e      	orrs	r6, r1
     762:	2a1b      	cmp	r2, #27
     764:	dd00      	ble.n	768 <__aeabi_fadd+0x74>
     766:	e12d      	b.n	9c4 <__aeabi_fadd+0x2d0>
     768:	1c31      	adds	r1, r6, #0
     76a:	2020      	movs	r0, #32
     76c:	40d1      	lsrs	r1, r2
     76e:	1a82      	subs	r2, r0, r2
     770:	4096      	lsls	r6, r2
     772:	1e72      	subs	r2, r6, #1
     774:	4196      	sbcs	r6, r2
     776:	430e      	orrs	r6, r1
     778:	1b9b      	subs	r3, r3, r6
     77a:	0158      	lsls	r0, r3, #5
     77c:	d5d1      	bpl.n	722 <__aeabi_fadd+0x2e>
     77e:	019b      	lsls	r3, r3, #6
     780:	099f      	lsrs	r7, r3, #6
     782:	1c38      	adds	r0, r7, #0
     784:	f002 f9c0 	bl	2b08 <__clzsi2>
     788:	1f42      	subs	r2, r0, #5
     78a:	4097      	lsls	r7, r2
     78c:	4294      	cmp	r4, r2
     78e:	dc5b      	bgt.n	848 <__aeabi_fadd+0x154>
     790:	1b14      	subs	r4, r2, r4
     792:	231f      	movs	r3, #31
     794:	1b1b      	subs	r3, r3, r4
     796:	1c3a      	adds	r2, r7, #0
     798:	409f      	lsls	r7, r3
     79a:	1c61      	adds	r1, r4, #1
     79c:	1c3b      	adds	r3, r7, #0
     79e:	40ca      	lsrs	r2, r1
     7a0:	1e5f      	subs	r7, r3, #1
     7a2:	41bb      	sbcs	r3, r7
     7a4:	4313      	orrs	r3, r2
     7a6:	2400      	movs	r4, #0
     7a8:	e7bb      	b.n	722 <__aeabi_fadd+0x2e>
     7aa:	1e13      	subs	r3, r2, #0
     7ac:	d1b9      	bne.n	722 <__aeabi_fadd+0x2e>
     7ae:	2300      	movs	r3, #0
     7b0:	2200      	movs	r2, #0
     7b2:	08db      	lsrs	r3, r3, #3
     7b4:	2cff      	cmp	r4, #255	; 0xff
     7b6:	d104      	bne.n	7c2 <__aeabi_fadd+0xce>
     7b8:	2b00      	cmp	r3, #0
     7ba:	d043      	beq.n	844 <__aeabi_fadd+0x150>
     7bc:	2080      	movs	r0, #128	; 0x80
     7be:	03c0      	lsls	r0, r0, #15
     7c0:	4303      	orrs	r3, r0
     7c2:	025b      	lsls	r3, r3, #9
     7c4:	0a5b      	lsrs	r3, r3, #9
     7c6:	e7bf      	b.n	748 <__aeabi_fadd+0x54>
     7c8:	1a21      	subs	r1, r4, r0
     7ca:	2900      	cmp	r1, #0
     7cc:	dd40      	ble.n	850 <__aeabi_fadd+0x15c>
     7ce:	2800      	cmp	r0, #0
     7d0:	d023      	beq.n	81a <__aeabi_fadd+0x126>
     7d2:	2cff      	cmp	r4, #255	; 0xff
     7d4:	d0a5      	beq.n	722 <__aeabi_fadd+0x2e>
     7d6:	2080      	movs	r0, #128	; 0x80
     7d8:	04c0      	lsls	r0, r0, #19
     7da:	4306      	orrs	r6, r0
     7dc:	291b      	cmp	r1, #27
     7de:	dd00      	ble.n	7e2 <__aeabi_fadd+0xee>
     7e0:	e0ee      	b.n	9c0 <__aeabi_fadd+0x2cc>
     7e2:	1c30      	adds	r0, r6, #0
     7e4:	2720      	movs	r7, #32
     7e6:	40c8      	lsrs	r0, r1
     7e8:	1a79      	subs	r1, r7, r1
     7ea:	408e      	lsls	r6, r1
     7ec:	1e71      	subs	r1, r6, #1
     7ee:	418e      	sbcs	r6, r1
     7f0:	4306      	orrs	r6, r0
     7f2:	199b      	adds	r3, r3, r6
     7f4:	0159      	lsls	r1, r3, #5
     7f6:	d400      	bmi.n	7fa <__aeabi_fadd+0x106>
     7f8:	e793      	b.n	722 <__aeabi_fadd+0x2e>
     7fa:	3401      	adds	r4, #1
     7fc:	2cff      	cmp	r4, #255	; 0xff
     7fe:	d055      	beq.n	8ac <__aeabi_fadd+0x1b8>
     800:	4971      	ldr	r1, [pc, #452]	; (9c8 <__aeabi_fadd+0x2d4>)
     802:	2201      	movs	r2, #1
     804:	401a      	ands	r2, r3
     806:	400b      	ands	r3, r1
     808:	085b      	lsrs	r3, r3, #1
     80a:	4313      	orrs	r3, r2
     80c:	e789      	b.n	722 <__aeabi_fadd+0x2e>
     80e:	3a01      	subs	r2, #1
     810:	2a00      	cmp	r2, #0
     812:	d0b1      	beq.n	778 <__aeabi_fadd+0x84>
     814:	2cff      	cmp	r4, #255	; 0xff
     816:	d1a4      	bne.n	762 <__aeabi_fadd+0x6e>
     818:	e783      	b.n	722 <__aeabi_fadd+0x2e>
     81a:	2e00      	cmp	r6, #0
     81c:	d100      	bne.n	820 <__aeabi_fadd+0x12c>
     81e:	e780      	b.n	722 <__aeabi_fadd+0x2e>
     820:	3901      	subs	r1, #1
     822:	2900      	cmp	r1, #0
     824:	d0e5      	beq.n	7f2 <__aeabi_fadd+0xfe>
     826:	2cff      	cmp	r4, #255	; 0xff
     828:	d1d8      	bne.n	7dc <__aeabi_fadd+0xe8>
     82a:	e77a      	b.n	722 <__aeabi_fadd+0x2e>
     82c:	2a00      	cmp	r2, #0
     82e:	d11b      	bne.n	868 <__aeabi_fadd+0x174>
     830:	1c62      	adds	r2, r4, #1
     832:	b2d2      	uxtb	r2, r2
     834:	2a01      	cmp	r2, #1
     836:	dd4b      	ble.n	8d0 <__aeabi_fadd+0x1dc>
     838:	1b9f      	subs	r7, r3, r6
     83a:	017a      	lsls	r2, r7, #5
     83c:	d523      	bpl.n	886 <__aeabi_fadd+0x192>
     83e:	1af7      	subs	r7, r6, r3
     840:	1c0d      	adds	r5, r1, #0
     842:	e79e      	b.n	782 <__aeabi_fadd+0x8e>
     844:	2300      	movs	r3, #0
     846:	e77f      	b.n	748 <__aeabi_fadd+0x54>
     848:	4b5f      	ldr	r3, [pc, #380]	; (9c8 <__aeabi_fadd+0x2d4>)
     84a:	1aa4      	subs	r4, r4, r2
     84c:	403b      	ands	r3, r7
     84e:	e768      	b.n	722 <__aeabi_fadd+0x2e>
     850:	2900      	cmp	r1, #0
     852:	d146      	bne.n	8e2 <__aeabi_fadd+0x1ee>
     854:	1c61      	adds	r1, r4, #1
     856:	b2c8      	uxtb	r0, r1
     858:	2801      	cmp	r0, #1
     85a:	dd29      	ble.n	8b0 <__aeabi_fadd+0x1bc>
     85c:	29ff      	cmp	r1, #255	; 0xff
     85e:	d024      	beq.n	8aa <__aeabi_fadd+0x1b6>
     860:	18f3      	adds	r3, r6, r3
     862:	085b      	lsrs	r3, r3, #1
     864:	1c0c      	adds	r4, r1, #0
     866:	e75c      	b.n	722 <__aeabi_fadd+0x2e>
     868:	2c00      	cmp	r4, #0
     86a:	d013      	beq.n	894 <__aeabi_fadd+0x1a0>
     86c:	28ff      	cmp	r0, #255	; 0xff
     86e:	d018      	beq.n	8a2 <__aeabi_fadd+0x1ae>
     870:	2480      	movs	r4, #128	; 0x80
     872:	04e4      	lsls	r4, r4, #19
     874:	4252      	negs	r2, r2
     876:	4323      	orrs	r3, r4
     878:	2a1b      	cmp	r2, #27
     87a:	dd4d      	ble.n	918 <__aeabi_fadd+0x224>
     87c:	2301      	movs	r3, #1
     87e:	1af3      	subs	r3, r6, r3
     880:	1c04      	adds	r4, r0, #0
     882:	1c0d      	adds	r5, r1, #0
     884:	e779      	b.n	77a <__aeabi_fadd+0x86>
     886:	2f00      	cmp	r7, #0
     888:	d000      	beq.n	88c <__aeabi_fadd+0x198>
     88a:	e77a      	b.n	782 <__aeabi_fadd+0x8e>
     88c:	2300      	movs	r3, #0
     88e:	2200      	movs	r2, #0
     890:	2400      	movs	r4, #0
     892:	e78e      	b.n	7b2 <__aeabi_fadd+0xbe>
     894:	2b00      	cmp	r3, #0
     896:	d03b      	beq.n	910 <__aeabi_fadd+0x21c>
     898:	43d2      	mvns	r2, r2
     89a:	2a00      	cmp	r2, #0
     89c:	d0ef      	beq.n	87e <__aeabi_fadd+0x18a>
     89e:	28ff      	cmp	r0, #255	; 0xff
     8a0:	d1ea      	bne.n	878 <__aeabi_fadd+0x184>
     8a2:	1c33      	adds	r3, r6, #0
     8a4:	24ff      	movs	r4, #255	; 0xff
     8a6:	1c0d      	adds	r5, r1, #0
     8a8:	e73b      	b.n	722 <__aeabi_fadd+0x2e>
     8aa:	24ff      	movs	r4, #255	; 0xff
     8ac:	2300      	movs	r3, #0
     8ae:	e780      	b.n	7b2 <__aeabi_fadd+0xbe>
     8b0:	2c00      	cmp	r4, #0
     8b2:	d15c      	bne.n	96e <__aeabi_fadd+0x27a>
     8b4:	2b00      	cmp	r3, #0
     8b6:	d100      	bne.n	8ba <__aeabi_fadd+0x1c6>
     8b8:	e080      	b.n	9bc <__aeabi_fadd+0x2c8>
     8ba:	2e00      	cmp	r6, #0
     8bc:	d100      	bne.n	8c0 <__aeabi_fadd+0x1cc>
     8be:	e730      	b.n	722 <__aeabi_fadd+0x2e>
     8c0:	199b      	adds	r3, r3, r6
     8c2:	0158      	lsls	r0, r3, #5
     8c4:	d400      	bmi.n	8c8 <__aeabi_fadd+0x1d4>
     8c6:	e72c      	b.n	722 <__aeabi_fadd+0x2e>
     8c8:	4a3f      	ldr	r2, [pc, #252]	; (9c8 <__aeabi_fadd+0x2d4>)
     8ca:	2401      	movs	r4, #1
     8cc:	4013      	ands	r3, r2
     8ce:	e728      	b.n	722 <__aeabi_fadd+0x2e>
     8d0:	2c00      	cmp	r4, #0
     8d2:	d115      	bne.n	900 <__aeabi_fadd+0x20c>
     8d4:	2b00      	cmp	r3, #0
     8d6:	d140      	bne.n	95a <__aeabi_fadd+0x266>
     8d8:	2e00      	cmp	r6, #0
     8da:	d063      	beq.n	9a4 <__aeabi_fadd+0x2b0>
     8dc:	1c33      	adds	r3, r6, #0
     8de:	1c0d      	adds	r5, r1, #0
     8e0:	e71f      	b.n	722 <__aeabi_fadd+0x2e>
     8e2:	2c00      	cmp	r4, #0
     8e4:	d121      	bne.n	92a <__aeabi_fadd+0x236>
     8e6:	2b00      	cmp	r3, #0
     8e8:	d054      	beq.n	994 <__aeabi_fadd+0x2a0>
     8ea:	43c9      	mvns	r1, r1
     8ec:	2900      	cmp	r1, #0
     8ee:	d004      	beq.n	8fa <__aeabi_fadd+0x206>
     8f0:	28ff      	cmp	r0, #255	; 0xff
     8f2:	d04c      	beq.n	98e <__aeabi_fadd+0x29a>
     8f4:	291b      	cmp	r1, #27
     8f6:	dd58      	ble.n	9aa <__aeabi_fadd+0x2b6>
     8f8:	2301      	movs	r3, #1
     8fa:	199b      	adds	r3, r3, r6
     8fc:	1c04      	adds	r4, r0, #0
     8fe:	e779      	b.n	7f4 <__aeabi_fadd+0x100>
     900:	2b00      	cmp	r3, #0
     902:	d119      	bne.n	938 <__aeabi_fadd+0x244>
     904:	2e00      	cmp	r6, #0
     906:	d048      	beq.n	99a <__aeabi_fadd+0x2a6>
     908:	1c33      	adds	r3, r6, #0
     90a:	1c0d      	adds	r5, r1, #0
     90c:	24ff      	movs	r4, #255	; 0xff
     90e:	e708      	b.n	722 <__aeabi_fadd+0x2e>
     910:	1c33      	adds	r3, r6, #0
     912:	1c04      	adds	r4, r0, #0
     914:	1c0d      	adds	r5, r1, #0
     916:	e704      	b.n	722 <__aeabi_fadd+0x2e>
     918:	1c1c      	adds	r4, r3, #0
     91a:	2520      	movs	r5, #32
     91c:	40d4      	lsrs	r4, r2
     91e:	1aaa      	subs	r2, r5, r2
     920:	4093      	lsls	r3, r2
     922:	1e5a      	subs	r2, r3, #1
     924:	4193      	sbcs	r3, r2
     926:	4323      	orrs	r3, r4
     928:	e7a9      	b.n	87e <__aeabi_fadd+0x18a>
     92a:	28ff      	cmp	r0, #255	; 0xff
     92c:	d02f      	beq.n	98e <__aeabi_fadd+0x29a>
     92e:	2480      	movs	r4, #128	; 0x80
     930:	04e4      	lsls	r4, r4, #19
     932:	4249      	negs	r1, r1
     934:	4323      	orrs	r3, r4
     936:	e7dd      	b.n	8f4 <__aeabi_fadd+0x200>
     938:	24ff      	movs	r4, #255	; 0xff
     93a:	2e00      	cmp	r6, #0
     93c:	d100      	bne.n	940 <__aeabi_fadd+0x24c>
     93e:	e6f0      	b.n	722 <__aeabi_fadd+0x2e>
     940:	2280      	movs	r2, #128	; 0x80
     942:	08db      	lsrs	r3, r3, #3
     944:	03d2      	lsls	r2, r2, #15
     946:	4213      	tst	r3, r2
     948:	d004      	beq.n	954 <__aeabi_fadd+0x260>
     94a:	08f6      	lsrs	r6, r6, #3
     94c:	4216      	tst	r6, r2
     94e:	d101      	bne.n	954 <__aeabi_fadd+0x260>
     950:	1c33      	adds	r3, r6, #0
     952:	1c0d      	adds	r5, r1, #0
     954:	00db      	lsls	r3, r3, #3
     956:	24ff      	movs	r4, #255	; 0xff
     958:	e6e3      	b.n	722 <__aeabi_fadd+0x2e>
     95a:	2e00      	cmp	r6, #0
     95c:	d100      	bne.n	960 <__aeabi_fadd+0x26c>
     95e:	e6e0      	b.n	722 <__aeabi_fadd+0x2e>
     960:	1b9a      	subs	r2, r3, r6
     962:	0150      	lsls	r0, r2, #5
     964:	d400      	bmi.n	968 <__aeabi_fadd+0x274>
     966:	e720      	b.n	7aa <__aeabi_fadd+0xb6>
     968:	1af3      	subs	r3, r6, r3
     96a:	1c0d      	adds	r5, r1, #0
     96c:	e6d9      	b.n	722 <__aeabi_fadd+0x2e>
     96e:	2b00      	cmp	r3, #0
     970:	d00d      	beq.n	98e <__aeabi_fadd+0x29a>
     972:	24ff      	movs	r4, #255	; 0xff
     974:	2e00      	cmp	r6, #0
     976:	d100      	bne.n	97a <__aeabi_fadd+0x286>
     978:	e6d3      	b.n	722 <__aeabi_fadd+0x2e>
     97a:	2280      	movs	r2, #128	; 0x80
     97c:	08db      	lsrs	r3, r3, #3
     97e:	03d2      	lsls	r2, r2, #15
     980:	4213      	tst	r3, r2
     982:	d0e7      	beq.n	954 <__aeabi_fadd+0x260>
     984:	08f6      	lsrs	r6, r6, #3
     986:	4216      	tst	r6, r2
     988:	d1e4      	bne.n	954 <__aeabi_fadd+0x260>
     98a:	1c33      	adds	r3, r6, #0
     98c:	e7e2      	b.n	954 <__aeabi_fadd+0x260>
     98e:	1c33      	adds	r3, r6, #0
     990:	24ff      	movs	r4, #255	; 0xff
     992:	e6c6      	b.n	722 <__aeabi_fadd+0x2e>
     994:	1c33      	adds	r3, r6, #0
     996:	1c04      	adds	r4, r0, #0
     998:	e6c3      	b.n	722 <__aeabi_fadd+0x2e>
     99a:	2380      	movs	r3, #128	; 0x80
     99c:	2200      	movs	r2, #0
     99e:	049b      	lsls	r3, r3, #18
     9a0:	24ff      	movs	r4, #255	; 0xff
     9a2:	e706      	b.n	7b2 <__aeabi_fadd+0xbe>
     9a4:	1c23      	adds	r3, r4, #0
     9a6:	2200      	movs	r2, #0
     9a8:	e703      	b.n	7b2 <__aeabi_fadd+0xbe>
     9aa:	1c1c      	adds	r4, r3, #0
     9ac:	2720      	movs	r7, #32
     9ae:	40cc      	lsrs	r4, r1
     9b0:	1a79      	subs	r1, r7, r1
     9b2:	408b      	lsls	r3, r1
     9b4:	1e59      	subs	r1, r3, #1
     9b6:	418b      	sbcs	r3, r1
     9b8:	4323      	orrs	r3, r4
     9ba:	e79e      	b.n	8fa <__aeabi_fadd+0x206>
     9bc:	1c33      	adds	r3, r6, #0
     9be:	e6b0      	b.n	722 <__aeabi_fadd+0x2e>
     9c0:	2601      	movs	r6, #1
     9c2:	e716      	b.n	7f2 <__aeabi_fadd+0xfe>
     9c4:	2601      	movs	r6, #1
     9c6:	e6d7      	b.n	778 <__aeabi_fadd+0x84>
     9c8:	fbffffff 	.word	0xfbffffff

000009cc <__aeabi_fdiv>:
__aeabi_fdiv():
     9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ce:	465f      	mov	r7, fp
     9d0:	4656      	mov	r6, sl
     9d2:	464d      	mov	r5, r9
     9d4:	4644      	mov	r4, r8
     9d6:	b4f0      	push	{r4, r5, r6, r7}
     9d8:	0246      	lsls	r6, r0, #9
     9da:	0045      	lsls	r5, r0, #1
     9dc:	0fc0      	lsrs	r0, r0, #31
     9de:	b085      	sub	sp, #20
     9e0:	1c0f      	adds	r7, r1, #0
     9e2:	0a76      	lsrs	r6, r6, #9
     9e4:	0e2d      	lsrs	r5, r5, #24
     9e6:	4680      	mov	r8, r0
     9e8:	d041      	beq.n	a6e <__aeabi_fdiv+0xa2>
     9ea:	2dff      	cmp	r5, #255	; 0xff
     9ec:	d026      	beq.n	a3c <__aeabi_fdiv+0x70>
     9ee:	2480      	movs	r4, #128	; 0x80
     9f0:	0424      	lsls	r4, r4, #16
     9f2:	2100      	movs	r1, #0
     9f4:	4326      	orrs	r6, r4
     9f6:	00f6      	lsls	r6, r6, #3
     9f8:	3d7f      	subs	r5, #127	; 0x7f
     9fa:	4689      	mov	r9, r1
     9fc:	468b      	mov	fp, r1
     9fe:	0ff9      	lsrs	r1, r7, #31
     a00:	027c      	lsls	r4, r7, #9
     a02:	0078      	lsls	r0, r7, #1
     a04:	0a64      	lsrs	r4, r4, #9
     a06:	0e00      	lsrs	r0, r0, #24
     a08:	9100      	str	r1, [sp, #0]
     a0a:	468a      	mov	sl, r1
     a0c:	d03c      	beq.n	a88 <__aeabi_fdiv+0xbc>
     a0e:	28ff      	cmp	r0, #255	; 0xff
     a10:	d034      	beq.n	a7c <__aeabi_fdiv+0xb0>
     a12:	2380      	movs	r3, #128	; 0x80
     a14:	041b      	lsls	r3, r3, #16
     a16:	431c      	orrs	r4, r3
     a18:	2300      	movs	r3, #0
     a1a:	00e4      	lsls	r4, r4, #3
     a1c:	387f      	subs	r0, #127	; 0x7f
     a1e:	9301      	str	r3, [sp, #4]
     a20:	9f00      	ldr	r7, [sp, #0]
     a22:	4643      	mov	r3, r8
     a24:	9a01      	ldr	r2, [sp, #4]
     a26:	407b      	eors	r3, r7
     a28:	4649      	mov	r1, r9
     a2a:	469c      	mov	ip, r3
     a2c:	4311      	orrs	r1, r2
     a2e:	290f      	cmp	r1, #15
     a30:	d900      	bls.n	a34 <__aeabi_fdiv+0x68>
     a32:	e071      	b.n	b18 <__aeabi_fdiv+0x14c>
     a34:	4f76      	ldr	r7, [pc, #472]	; (c10 <__aeabi_fdiv+0x244>)
     a36:	0089      	lsls	r1, r1, #2
     a38:	587f      	ldr	r7, [r7, r1]
     a3a:	46bf      	mov	pc, r7
     a3c:	2e00      	cmp	r6, #0
     a3e:	d13e      	bne.n	abe <__aeabi_fdiv+0xf2>
     a40:	2208      	movs	r2, #8
     a42:	2302      	movs	r3, #2
     a44:	4691      	mov	r9, r2
     a46:	469b      	mov	fp, r3
     a48:	e7d9      	b.n	9fe <__aeabi_fdiv+0x32>
     a4a:	465a      	mov	r2, fp
     a4c:	1c34      	adds	r4, r6, #0
     a4e:	46c2      	mov	sl, r8
     a50:	9201      	str	r2, [sp, #4]
     a52:	9901      	ldr	r1, [sp, #4]
     a54:	2902      	cmp	r1, #2
     a56:	d037      	beq.n	ac8 <__aeabi_fdiv+0xfc>
     a58:	2903      	cmp	r1, #3
     a5a:	d100      	bne.n	a5e <__aeabi_fdiv+0x92>
     a5c:	e0cf      	b.n	bfe <__aeabi_fdiv+0x232>
     a5e:	2901      	cmp	r1, #1
     a60:	d000      	beq.n	a64 <__aeabi_fdiv+0x98>
     a62:	e0ab      	b.n	bbc <__aeabi_fdiv+0x1f0>
     a64:	4653      	mov	r3, sl
     a66:	400b      	ands	r3, r1
     a68:	2200      	movs	r2, #0
     a6a:	2600      	movs	r6, #0
     a6c:	e032      	b.n	ad4 <__aeabi_fdiv+0x108>
     a6e:	2e00      	cmp	r6, #0
     a70:	d119      	bne.n	aa6 <__aeabi_fdiv+0xda>
     a72:	2104      	movs	r1, #4
     a74:	2201      	movs	r2, #1
     a76:	4689      	mov	r9, r1
     a78:	4693      	mov	fp, r2
     a7a:	e7c0      	b.n	9fe <__aeabi_fdiv+0x32>
     a7c:	1c22      	adds	r2, r4, #0
     a7e:	1e53      	subs	r3, r2, #1
     a80:	419a      	sbcs	r2, r3
     a82:	3202      	adds	r2, #2
     a84:	9201      	str	r2, [sp, #4]
     a86:	e7cb      	b.n	a20 <__aeabi_fdiv+0x54>
     a88:	2701      	movs	r7, #1
     a8a:	9701      	str	r7, [sp, #4]
     a8c:	2c00      	cmp	r4, #0
     a8e:	d0c7      	beq.n	a20 <__aeabi_fdiv+0x54>
     a90:	1c20      	adds	r0, r4, #0
     a92:	f002 f839 	bl	2b08 <__clzsi2>
     a96:	1f43      	subs	r3, r0, #5
     a98:	409c      	lsls	r4, r3
     a9a:	2376      	movs	r3, #118	; 0x76
     a9c:	425b      	negs	r3, r3
     a9e:	2100      	movs	r1, #0
     aa0:	1a18      	subs	r0, r3, r0
     aa2:	9101      	str	r1, [sp, #4]
     aa4:	e7bc      	b.n	a20 <__aeabi_fdiv+0x54>
     aa6:	1c30      	adds	r0, r6, #0
     aa8:	f002 f82e 	bl	2b08 <__clzsi2>
     aac:	2576      	movs	r5, #118	; 0x76
     aae:	1f43      	subs	r3, r0, #5
     ab0:	409e      	lsls	r6, r3
     ab2:	426d      	negs	r5, r5
     ab4:	2300      	movs	r3, #0
     ab6:	1a2d      	subs	r5, r5, r0
     ab8:	4699      	mov	r9, r3
     aba:	469b      	mov	fp, r3
     abc:	e79f      	b.n	9fe <__aeabi_fdiv+0x32>
     abe:	230c      	movs	r3, #12
     ac0:	2103      	movs	r1, #3
     ac2:	4699      	mov	r9, r3
     ac4:	468b      	mov	fp, r1
     ac6:	e79a      	b.n	9fe <__aeabi_fdiv+0x32>
     ac8:	46d4      	mov	ip, sl
     aca:	2301      	movs	r3, #1
     acc:	4667      	mov	r7, ip
     ace:	403b      	ands	r3, r7
     ad0:	22ff      	movs	r2, #255	; 0xff
     ad2:	2600      	movs	r6, #0
     ad4:	0276      	lsls	r6, r6, #9
     ad6:	05d2      	lsls	r2, r2, #23
     ad8:	0a70      	lsrs	r0, r6, #9
     ada:	07db      	lsls	r3, r3, #31
     adc:	4310      	orrs	r0, r2
     ade:	4318      	orrs	r0, r3
     ae0:	b005      	add	sp, #20
     ae2:	bc3c      	pop	{r2, r3, r4, r5}
     ae4:	4690      	mov	r8, r2
     ae6:	4699      	mov	r9, r3
     ae8:	46a2      	mov	sl, r4
     aea:	46ab      	mov	fp, r5
     aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
     aee:	2680      	movs	r6, #128	; 0x80
     af0:	2300      	movs	r3, #0
     af2:	03f6      	lsls	r6, r6, #15
     af4:	22ff      	movs	r2, #255	; 0xff
     af6:	e7ed      	b.n	ad4 <__aeabi_fdiv+0x108>
     af8:	2200      	movs	r2, #0
     afa:	2600      	movs	r6, #0
     afc:	e7ea      	b.n	ad4 <__aeabi_fdiv+0x108>
     afe:	2080      	movs	r0, #128	; 0x80
     b00:	03c0      	lsls	r0, r0, #15
     b02:	4206      	tst	r6, r0
     b04:	d03b      	beq.n	b7e <__aeabi_fdiv+0x1b2>
     b06:	4204      	tst	r4, r0
     b08:	d139      	bne.n	b7e <__aeabi_fdiv+0x1b2>
     b0a:	1c06      	adds	r6, r0, #0
     b0c:	4326      	orrs	r6, r4
     b0e:	0276      	lsls	r6, r6, #9
     b10:	0a76      	lsrs	r6, r6, #9
     b12:	9b00      	ldr	r3, [sp, #0]
     b14:	22ff      	movs	r2, #255	; 0xff
     b16:	e7dd      	b.n	ad4 <__aeabi_fdiv+0x108>
     b18:	1a28      	subs	r0, r5, r0
     b1a:	9003      	str	r0, [sp, #12]
     b1c:	0176      	lsls	r6, r6, #5
     b1e:	0164      	lsls	r4, r4, #5
     b20:	42a6      	cmp	r6, r4
     b22:	d339      	bcc.n	b98 <__aeabi_fdiv+0x1cc>
     b24:	1b36      	subs	r6, r6, r4
     b26:	221a      	movs	r2, #26
     b28:	2301      	movs	r3, #1
     b2a:	2001      	movs	r0, #1
     b2c:	1c31      	adds	r1, r6, #0
     b2e:	005b      	lsls	r3, r3, #1
     b30:	0076      	lsls	r6, r6, #1
     b32:	2900      	cmp	r1, #0
     b34:	db01      	blt.n	b3a <__aeabi_fdiv+0x16e>
     b36:	42b4      	cmp	r4, r6
     b38:	d801      	bhi.n	b3e <__aeabi_fdiv+0x172>
     b3a:	1b36      	subs	r6, r6, r4
     b3c:	4303      	orrs	r3, r0
     b3e:	3a01      	subs	r2, #1
     b40:	2a00      	cmp	r2, #0
     b42:	dcf3      	bgt.n	b2c <__aeabi_fdiv+0x160>
     b44:	1e74      	subs	r4, r6, #1
     b46:	41a6      	sbcs	r6, r4
     b48:	1c34      	adds	r4, r6, #0
     b4a:	431c      	orrs	r4, r3
     b4c:	9a03      	ldr	r2, [sp, #12]
     b4e:	327f      	adds	r2, #127	; 0x7f
     b50:	2a00      	cmp	r2, #0
     b52:	dd27      	ble.n	ba4 <__aeabi_fdiv+0x1d8>
     b54:	0763      	lsls	r3, r4, #29
     b56:	d004      	beq.n	b62 <__aeabi_fdiv+0x196>
     b58:	230f      	movs	r3, #15
     b5a:	4023      	ands	r3, r4
     b5c:	2b04      	cmp	r3, #4
     b5e:	d000      	beq.n	b62 <__aeabi_fdiv+0x196>
     b60:	3404      	adds	r4, #4
     b62:	0127      	lsls	r7, r4, #4
     b64:	d503      	bpl.n	b6e <__aeabi_fdiv+0x1a2>
     b66:	4b2b      	ldr	r3, [pc, #172]	; (c14 <__aeabi_fdiv+0x248>)
     b68:	9a03      	ldr	r2, [sp, #12]
     b6a:	401c      	ands	r4, r3
     b6c:	3280      	adds	r2, #128	; 0x80
     b6e:	2afe      	cmp	r2, #254	; 0xfe
     b70:	dd0b      	ble.n	b8a <__aeabi_fdiv+0x1be>
     b72:	2301      	movs	r3, #1
     b74:	4661      	mov	r1, ip
     b76:	400b      	ands	r3, r1
     b78:	22ff      	movs	r2, #255	; 0xff
     b7a:	2600      	movs	r6, #0
     b7c:	e7aa      	b.n	ad4 <__aeabi_fdiv+0x108>
     b7e:	4306      	orrs	r6, r0
     b80:	0276      	lsls	r6, r6, #9
     b82:	0a76      	lsrs	r6, r6, #9
     b84:	4643      	mov	r3, r8
     b86:	22ff      	movs	r2, #255	; 0xff
     b88:	e7a4      	b.n	ad4 <__aeabi_fdiv+0x108>
     b8a:	01a4      	lsls	r4, r4, #6
     b8c:	2301      	movs	r3, #1
     b8e:	4667      	mov	r7, ip
     b90:	0a66      	lsrs	r6, r4, #9
     b92:	b2d2      	uxtb	r2, r2
     b94:	403b      	ands	r3, r7
     b96:	e79d      	b.n	ad4 <__aeabi_fdiv+0x108>
     b98:	9f03      	ldr	r7, [sp, #12]
     b9a:	221b      	movs	r2, #27
     b9c:	3f01      	subs	r7, #1
     b9e:	9703      	str	r7, [sp, #12]
     ba0:	2300      	movs	r3, #0
     ba2:	e7c2      	b.n	b2a <__aeabi_fdiv+0x15e>
     ba4:	237e      	movs	r3, #126	; 0x7e
     ba6:	9f03      	ldr	r7, [sp, #12]
     ba8:	425b      	negs	r3, r3
     baa:	1bdb      	subs	r3, r3, r7
     bac:	2b1b      	cmp	r3, #27
     bae:	dd07      	ble.n	bc0 <__aeabi_fdiv+0x1f4>
     bb0:	2301      	movs	r3, #1
     bb2:	4661      	mov	r1, ip
     bb4:	400b      	ands	r3, r1
     bb6:	2200      	movs	r2, #0
     bb8:	2600      	movs	r6, #0
     bba:	e78b      	b.n	ad4 <__aeabi_fdiv+0x108>
     bbc:	46d4      	mov	ip, sl
     bbe:	e7c5      	b.n	b4c <__aeabi_fdiv+0x180>
     bc0:	1c22      	adds	r2, r4, #0
     bc2:	40da      	lsrs	r2, r3
     bc4:	9b03      	ldr	r3, [sp, #12]
     bc6:	339e      	adds	r3, #158	; 0x9e
     bc8:	409c      	lsls	r4, r3
     bca:	1c23      	adds	r3, r4, #0
     bcc:	1e5c      	subs	r4, r3, #1
     bce:	41a3      	sbcs	r3, r4
     bd0:	4313      	orrs	r3, r2
     bd2:	075a      	lsls	r2, r3, #29
     bd4:	d004      	beq.n	be0 <__aeabi_fdiv+0x214>
     bd6:	220f      	movs	r2, #15
     bd8:	401a      	ands	r2, r3
     bda:	2a04      	cmp	r2, #4
     bdc:	d000      	beq.n	be0 <__aeabi_fdiv+0x214>
     bde:	3304      	adds	r3, #4
     be0:	015f      	lsls	r7, r3, #5
     be2:	d505      	bpl.n	bf0 <__aeabi_fdiv+0x224>
     be4:	2301      	movs	r3, #1
     be6:	4661      	mov	r1, ip
     be8:	400b      	ands	r3, r1
     bea:	2201      	movs	r2, #1
     bec:	2600      	movs	r6, #0
     bee:	e771      	b.n	ad4 <__aeabi_fdiv+0x108>
     bf0:	019e      	lsls	r6, r3, #6
     bf2:	4662      	mov	r2, ip
     bf4:	2301      	movs	r3, #1
     bf6:	4013      	ands	r3, r2
     bf8:	0a76      	lsrs	r6, r6, #9
     bfa:	2200      	movs	r2, #0
     bfc:	e76a      	b.n	ad4 <__aeabi_fdiv+0x108>
     bfe:	2680      	movs	r6, #128	; 0x80
     c00:	03f6      	lsls	r6, r6, #15
     c02:	4326      	orrs	r6, r4
     c04:	0276      	lsls	r6, r6, #9
     c06:	0a76      	lsrs	r6, r6, #9
     c08:	4653      	mov	r3, sl
     c0a:	22ff      	movs	r2, #255	; 0xff
     c0c:	e762      	b.n	ad4 <__aeabi_fdiv+0x108>
     c0e:	46c0      	nop			; (mov r8, r8)
     c10:	00014f80 	.word	0x00014f80
     c14:	f7ffffff 	.word	0xf7ffffff

00000c18 <__eqsf2>:
__nesf2():
     c18:	024a      	lsls	r2, r1, #9
     c1a:	0243      	lsls	r3, r0, #9
     c1c:	b570      	push	{r4, r5, r6, lr}
     c1e:	0a5c      	lsrs	r4, r3, #9
     c20:	0a55      	lsrs	r5, r2, #9
     c22:	0043      	lsls	r3, r0, #1
     c24:	004a      	lsls	r2, r1, #1
     c26:	0e1b      	lsrs	r3, r3, #24
     c28:	0fc6      	lsrs	r6, r0, #31
     c2a:	0e12      	lsrs	r2, r2, #24
     c2c:	0fc9      	lsrs	r1, r1, #31
     c2e:	2bff      	cmp	r3, #255	; 0xff
     c30:	d005      	beq.n	c3e <__eqsf2+0x26>
     c32:	2aff      	cmp	r2, #255	; 0xff
     c34:	d008      	beq.n	c48 <__eqsf2+0x30>
     c36:	2001      	movs	r0, #1
     c38:	4293      	cmp	r3, r2
     c3a:	d00b      	beq.n	c54 <__eqsf2+0x3c>
     c3c:	bd70      	pop	{r4, r5, r6, pc}
     c3e:	2001      	movs	r0, #1
     c40:	2c00      	cmp	r4, #0
     c42:	d1fb      	bne.n	c3c <__eqsf2+0x24>
     c44:	2aff      	cmp	r2, #255	; 0xff
     c46:	d1f6      	bne.n	c36 <__eqsf2+0x1e>
     c48:	2001      	movs	r0, #1
     c4a:	2d00      	cmp	r5, #0
     c4c:	d1f6      	bne.n	c3c <__eqsf2+0x24>
     c4e:	2001      	movs	r0, #1
     c50:	4293      	cmp	r3, r2
     c52:	d1f3      	bne.n	c3c <__eqsf2+0x24>
     c54:	42ac      	cmp	r4, r5
     c56:	d1f1      	bne.n	c3c <__eqsf2+0x24>
     c58:	428e      	cmp	r6, r1
     c5a:	d005      	beq.n	c68 <__eqsf2+0x50>
     c5c:	2b00      	cmp	r3, #0
     c5e:	d1ed      	bne.n	c3c <__eqsf2+0x24>
     c60:	1c20      	adds	r0, r4, #0
     c62:	1e44      	subs	r4, r0, #1
     c64:	41a0      	sbcs	r0, r4
     c66:	e7e9      	b.n	c3c <__eqsf2+0x24>
     c68:	2000      	movs	r0, #0
     c6a:	e7e7      	b.n	c3c <__eqsf2+0x24>

00000c6c <__gesf2>:
__gtsf2():
     c6c:	024a      	lsls	r2, r1, #9
     c6e:	0243      	lsls	r3, r0, #9
     c70:	b5f0      	push	{r4, r5, r6, r7, lr}
     c72:	0a5c      	lsrs	r4, r3, #9
     c74:	0a55      	lsrs	r5, r2, #9
     c76:	0043      	lsls	r3, r0, #1
     c78:	004a      	lsls	r2, r1, #1
     c7a:	0e1b      	lsrs	r3, r3, #24
     c7c:	0fc6      	lsrs	r6, r0, #31
     c7e:	0e12      	lsrs	r2, r2, #24
     c80:	0fc9      	lsrs	r1, r1, #31
     c82:	2bff      	cmp	r3, #255	; 0xff
     c84:	d031      	beq.n	cea <__gesf2+0x7e>
     c86:	2aff      	cmp	r2, #255	; 0xff
     c88:	d034      	beq.n	cf4 <__gesf2+0x88>
     c8a:	2b00      	cmp	r3, #0
     c8c:	d116      	bne.n	cbc <__gesf2+0x50>
     c8e:	4260      	negs	r0, r4
     c90:	4160      	adcs	r0, r4
     c92:	4684      	mov	ip, r0
     c94:	2a00      	cmp	r2, #0
     c96:	d014      	beq.n	cc2 <__gesf2+0x56>
     c98:	2800      	cmp	r0, #0
     c9a:	d120      	bne.n	cde <__gesf2+0x72>
     c9c:	428e      	cmp	r6, r1
     c9e:	d117      	bne.n	cd0 <__gesf2+0x64>
     ca0:	4293      	cmp	r3, r2
     ca2:	dc15      	bgt.n	cd0 <__gesf2+0x64>
     ca4:	db04      	blt.n	cb0 <__gesf2+0x44>
     ca6:	42ac      	cmp	r4, r5
     ca8:	d812      	bhi.n	cd0 <__gesf2+0x64>
     caa:	2000      	movs	r0, #0
     cac:	42ac      	cmp	r4, r5
     cae:	d212      	bcs.n	cd6 <__gesf2+0x6a>
     cb0:	4270      	negs	r0, r6
     cb2:	4170      	adcs	r0, r6
     cb4:	4240      	negs	r0, r0
     cb6:	2301      	movs	r3, #1
     cb8:	4318      	orrs	r0, r3
     cba:	e00c      	b.n	cd6 <__gesf2+0x6a>
     cbc:	2a00      	cmp	r2, #0
     cbe:	d1ed      	bne.n	c9c <__gesf2+0x30>
     cc0:	4694      	mov	ip, r2
     cc2:	426f      	negs	r7, r5
     cc4:	416f      	adcs	r7, r5
     cc6:	4660      	mov	r0, ip
     cc8:	2800      	cmp	r0, #0
     cca:	d105      	bne.n	cd8 <__gesf2+0x6c>
     ccc:	2f00      	cmp	r7, #0
     cce:	d0e5      	beq.n	c9c <__gesf2+0x30>
     cd0:	4270      	negs	r0, r6
     cd2:	2301      	movs	r3, #1
     cd4:	4318      	orrs	r0, r3
     cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cd8:	2000      	movs	r0, #0
     cda:	2f00      	cmp	r7, #0
     cdc:	d1fb      	bne.n	cd6 <__gesf2+0x6a>
     cde:	4248      	negs	r0, r1
     ce0:	4148      	adcs	r0, r1
     ce2:	4240      	negs	r0, r0
     ce4:	2301      	movs	r3, #1
     ce6:	4318      	orrs	r0, r3
     ce8:	e7f5      	b.n	cd6 <__gesf2+0x6a>
     cea:	2c00      	cmp	r4, #0
     cec:	d0cb      	beq.n	c86 <__gesf2+0x1a>
     cee:	2002      	movs	r0, #2
     cf0:	4240      	negs	r0, r0
     cf2:	e7f0      	b.n	cd6 <__gesf2+0x6a>
     cf4:	2d00      	cmp	r5, #0
     cf6:	d0c8      	beq.n	c8a <__gesf2+0x1e>
     cf8:	e7f9      	b.n	cee <__gesf2+0x82>
     cfa:	46c0      	nop			; (mov r8, r8)

00000cfc <__lesf2>:
__lesf2():
     cfc:	024a      	lsls	r2, r1, #9
     cfe:	0243      	lsls	r3, r0, #9
     d00:	b5f0      	push	{r4, r5, r6, r7, lr}
     d02:	0a5c      	lsrs	r4, r3, #9
     d04:	0a55      	lsrs	r5, r2, #9
     d06:	0043      	lsls	r3, r0, #1
     d08:	004a      	lsls	r2, r1, #1
     d0a:	0e1b      	lsrs	r3, r3, #24
     d0c:	0fc6      	lsrs	r6, r0, #31
     d0e:	0e12      	lsrs	r2, r2, #24
     d10:	0fc9      	lsrs	r1, r1, #31
     d12:	2bff      	cmp	r3, #255	; 0xff
     d14:	d027      	beq.n	d66 <__lesf2+0x6a>
     d16:	2aff      	cmp	r2, #255	; 0xff
     d18:	d029      	beq.n	d6e <__lesf2+0x72>
     d1a:	2b00      	cmp	r3, #0
     d1c:	d010      	beq.n	d40 <__lesf2+0x44>
     d1e:	2a00      	cmp	r2, #0
     d20:	d115      	bne.n	d4e <__lesf2+0x52>
     d22:	4694      	mov	ip, r2
     d24:	426f      	negs	r7, r5
     d26:	416f      	adcs	r7, r5
     d28:	4660      	mov	r0, ip
     d2a:	2800      	cmp	r0, #0
     d2c:	d015      	beq.n	d5a <__lesf2+0x5e>
     d2e:	2000      	movs	r0, #0
     d30:	2f00      	cmp	r7, #0
     d32:	d104      	bne.n	d3e <__lesf2+0x42>
     d34:	4248      	negs	r0, r1
     d36:	4148      	adcs	r0, r1
     d38:	4240      	negs	r0, r0
     d3a:	2301      	movs	r3, #1
     d3c:	4318      	orrs	r0, r3
     d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d40:	4260      	negs	r0, r4
     d42:	4160      	adcs	r0, r4
     d44:	4684      	mov	ip, r0
     d46:	2a00      	cmp	r2, #0
     d48:	d0ec      	beq.n	d24 <__lesf2+0x28>
     d4a:	2800      	cmp	r0, #0
     d4c:	d1f2      	bne.n	d34 <__lesf2+0x38>
     d4e:	428e      	cmp	r6, r1
     d50:	d011      	beq.n	d76 <__lesf2+0x7a>
     d52:	4270      	negs	r0, r6
     d54:	2301      	movs	r3, #1
     d56:	4318      	orrs	r0, r3
     d58:	e7f1      	b.n	d3e <__lesf2+0x42>
     d5a:	2f00      	cmp	r7, #0
     d5c:	d0f7      	beq.n	d4e <__lesf2+0x52>
     d5e:	4270      	negs	r0, r6
     d60:	2301      	movs	r3, #1
     d62:	4318      	orrs	r0, r3
     d64:	e7eb      	b.n	d3e <__lesf2+0x42>
     d66:	2002      	movs	r0, #2
     d68:	2c00      	cmp	r4, #0
     d6a:	d1e8      	bne.n	d3e <__lesf2+0x42>
     d6c:	e7d3      	b.n	d16 <__lesf2+0x1a>
     d6e:	2002      	movs	r0, #2
     d70:	2d00      	cmp	r5, #0
     d72:	d1e4      	bne.n	d3e <__lesf2+0x42>
     d74:	e7d1      	b.n	d1a <__lesf2+0x1e>
     d76:	4293      	cmp	r3, r2
     d78:	dceb      	bgt.n	d52 <__lesf2+0x56>
     d7a:	db04      	blt.n	d86 <__lesf2+0x8a>
     d7c:	42ac      	cmp	r4, r5
     d7e:	d8e8      	bhi.n	d52 <__lesf2+0x56>
     d80:	2000      	movs	r0, #0
     d82:	42ac      	cmp	r4, r5
     d84:	d2db      	bcs.n	d3e <__lesf2+0x42>
     d86:	4270      	negs	r0, r6
     d88:	4170      	adcs	r0, r6
     d8a:	4240      	negs	r0, r0
     d8c:	2301      	movs	r3, #1
     d8e:	4318      	orrs	r0, r3
     d90:	e7d5      	b.n	d3e <__lesf2+0x42>
     d92:	46c0      	nop			; (mov r8, r8)

00000d94 <__aeabi_fmul>:
__aeabi_fmul():
     d94:	b5f0      	push	{r4, r5, r6, r7, lr}
     d96:	465f      	mov	r7, fp
     d98:	4656      	mov	r6, sl
     d9a:	464d      	mov	r5, r9
     d9c:	4644      	mov	r4, r8
     d9e:	b4f0      	push	{r4, r5, r6, r7}
     da0:	0244      	lsls	r4, r0, #9
     da2:	0046      	lsls	r6, r0, #1
     da4:	b083      	sub	sp, #12
     da6:	1c0f      	adds	r7, r1, #0
     da8:	0a64      	lsrs	r4, r4, #9
     daa:	0e36      	lsrs	r6, r6, #24
     dac:	0fc5      	lsrs	r5, r0, #31
     dae:	2e00      	cmp	r6, #0
     db0:	d041      	beq.n	e36 <__aeabi_fmul+0xa2>
     db2:	2eff      	cmp	r6, #255	; 0xff
     db4:	d022      	beq.n	dfc <__aeabi_fmul+0x68>
     db6:	2380      	movs	r3, #128	; 0x80
     db8:	041b      	lsls	r3, r3, #16
     dba:	2000      	movs	r0, #0
     dbc:	431c      	orrs	r4, r3
     dbe:	00e4      	lsls	r4, r4, #3
     dc0:	3e7f      	subs	r6, #127	; 0x7f
     dc2:	4682      	mov	sl, r0
     dc4:	4680      	mov	r8, r0
     dc6:	1c39      	adds	r1, r7, #0
     dc8:	004b      	lsls	r3, r1, #1
     dca:	027f      	lsls	r7, r7, #9
     dcc:	0fc9      	lsrs	r1, r1, #31
     dce:	0a7f      	lsrs	r7, r7, #9
     dd0:	0e1b      	lsrs	r3, r3, #24
     dd2:	468b      	mov	fp, r1
     dd4:	d03b      	beq.n	e4e <__aeabi_fmul+0xba>
     dd6:	2bff      	cmp	r3, #255	; 0xff
     dd8:	d034      	beq.n	e44 <__aeabi_fmul+0xb0>
     dda:	2280      	movs	r2, #128	; 0x80
     ddc:	0412      	lsls	r2, r2, #16
     dde:	4317      	orrs	r7, r2
     de0:	00ff      	lsls	r7, r7, #3
     de2:	3b7f      	subs	r3, #127	; 0x7f
     de4:	2100      	movs	r1, #0
     de6:	465a      	mov	r2, fp
     de8:	406a      	eors	r2, r5
     dea:	9201      	str	r2, [sp, #4]
     dec:	4652      	mov	r2, sl
     dee:	430a      	orrs	r2, r1
     df0:	2a0f      	cmp	r2, #15
     df2:	d863      	bhi.n	ebc <__aeabi_fmul+0x128>
     df4:	487a      	ldr	r0, [pc, #488]	; (fe0 <__aeabi_fmul+0x24c>)
     df6:	0092      	lsls	r2, r2, #2
     df8:	5882      	ldr	r2, [r0, r2]
     dfa:	4697      	mov	pc, r2
     dfc:	2c00      	cmp	r4, #0
     dfe:	d13f      	bne.n	e80 <__aeabi_fmul+0xec>
     e00:	2208      	movs	r2, #8
     e02:	2302      	movs	r3, #2
     e04:	4692      	mov	sl, r2
     e06:	4698      	mov	r8, r3
     e08:	e7dd      	b.n	dc6 <__aeabi_fmul+0x32>
     e0a:	9501      	str	r5, [sp, #4]
     e0c:	4640      	mov	r0, r8
     e0e:	2802      	cmp	r0, #2
     e10:	d12a      	bne.n	e68 <__aeabi_fmul+0xd4>
     e12:	9a01      	ldr	r2, [sp, #4]
     e14:	2501      	movs	r5, #1
     e16:	4015      	ands	r5, r2
     e18:	23ff      	movs	r3, #255	; 0xff
     e1a:	2400      	movs	r4, #0
     e1c:	0264      	lsls	r4, r4, #9
     e1e:	05db      	lsls	r3, r3, #23
     e20:	0a60      	lsrs	r0, r4, #9
     e22:	07ed      	lsls	r5, r5, #31
     e24:	4318      	orrs	r0, r3
     e26:	4328      	orrs	r0, r5
     e28:	b003      	add	sp, #12
     e2a:	bc3c      	pop	{r2, r3, r4, r5}
     e2c:	4690      	mov	r8, r2
     e2e:	4699      	mov	r9, r3
     e30:	46a2      	mov	sl, r4
     e32:	46ab      	mov	fp, r5
     e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e36:	2c00      	cmp	r4, #0
     e38:	d127      	bne.n	e8a <__aeabi_fmul+0xf6>
     e3a:	2004      	movs	r0, #4
     e3c:	2201      	movs	r2, #1
     e3e:	4682      	mov	sl, r0
     e40:	4690      	mov	r8, r2
     e42:	e7c0      	b.n	dc6 <__aeabi_fmul+0x32>
     e44:	1c39      	adds	r1, r7, #0
     e46:	1e4a      	subs	r2, r1, #1
     e48:	4191      	sbcs	r1, r2
     e4a:	3102      	adds	r1, #2
     e4c:	e7cb      	b.n	de6 <__aeabi_fmul+0x52>
     e4e:	2101      	movs	r1, #1
     e50:	2f00      	cmp	r7, #0
     e52:	d0c8      	beq.n	de6 <__aeabi_fmul+0x52>
     e54:	1c38      	adds	r0, r7, #0
     e56:	f001 fe57 	bl	2b08 <__clzsi2>
     e5a:	1f43      	subs	r3, r0, #5
     e5c:	409f      	lsls	r7, r3
     e5e:	2376      	movs	r3, #118	; 0x76
     e60:	425b      	negs	r3, r3
     e62:	1a1b      	subs	r3, r3, r0
     e64:	2100      	movs	r1, #0
     e66:	e7be      	b.n	de6 <__aeabi_fmul+0x52>
     e68:	2803      	cmp	r0, #3
     e6a:	d100      	bne.n	e6e <__aeabi_fmul+0xda>
     e6c:	e0ae      	b.n	fcc <__aeabi_fmul+0x238>
     e6e:	2801      	cmp	r0, #1
     e70:	d14f      	bne.n	f12 <__aeabi_fmul+0x17e>
     e72:	9801      	ldr	r0, [sp, #4]
     e74:	4642      	mov	r2, r8
     e76:	4010      	ands	r0, r2
     e78:	b2c5      	uxtb	r5, r0
     e7a:	2300      	movs	r3, #0
     e7c:	2400      	movs	r4, #0
     e7e:	e7cd      	b.n	e1c <__aeabi_fmul+0x88>
     e80:	230c      	movs	r3, #12
     e82:	2003      	movs	r0, #3
     e84:	469a      	mov	sl, r3
     e86:	4680      	mov	r8, r0
     e88:	e79d      	b.n	dc6 <__aeabi_fmul+0x32>
     e8a:	1c20      	adds	r0, r4, #0
     e8c:	f001 fe3c 	bl	2b08 <__clzsi2>
     e90:	2676      	movs	r6, #118	; 0x76
     e92:	1f43      	subs	r3, r0, #5
     e94:	409c      	lsls	r4, r3
     e96:	4276      	negs	r6, r6
     e98:	2300      	movs	r3, #0
     e9a:	1a36      	subs	r6, r6, r0
     e9c:	469a      	mov	sl, r3
     e9e:	4698      	mov	r8, r3
     ea0:	e791      	b.n	dc6 <__aeabi_fmul+0x32>
     ea2:	2480      	movs	r4, #128	; 0x80
     ea4:	2500      	movs	r5, #0
     ea6:	03e4      	lsls	r4, r4, #15
     ea8:	23ff      	movs	r3, #255	; 0xff
     eaa:	e7b7      	b.n	e1c <__aeabi_fmul+0x88>
     eac:	465b      	mov	r3, fp
     eae:	1c3c      	adds	r4, r7, #0
     eb0:	9301      	str	r3, [sp, #4]
     eb2:	4688      	mov	r8, r1
     eb4:	e7aa      	b.n	e0c <__aeabi_fmul+0x78>
     eb6:	1c3c      	adds	r4, r7, #0
     eb8:	4688      	mov	r8, r1
     eba:	e7a7      	b.n	e0c <__aeabi_fmul+0x78>
     ebc:	0c25      	lsrs	r5, r4, #16
     ebe:	0424      	lsls	r4, r4, #16
     ec0:	0c3a      	lsrs	r2, r7, #16
     ec2:	0c24      	lsrs	r4, r4, #16
     ec4:	043f      	lsls	r7, r7, #16
     ec6:	18f6      	adds	r6, r6, r3
     ec8:	0c3f      	lsrs	r7, r7, #16
     eca:	1c21      	adds	r1, r4, #0
     ecc:	1c23      	adds	r3, r4, #0
     ece:	4379      	muls	r1, r7
     ed0:	4353      	muls	r3, r2
     ed2:	436f      	muls	r7, r5
     ed4:	4355      	muls	r5, r2
     ed6:	18fb      	adds	r3, r7, r3
     ed8:	0c0a      	lsrs	r2, r1, #16
     eda:	189b      	adds	r3, r3, r2
     edc:	46b1      	mov	r9, r6
     ede:	429f      	cmp	r7, r3
     ee0:	d902      	bls.n	ee8 <__aeabi_fmul+0x154>
     ee2:	2280      	movs	r2, #128	; 0x80
     ee4:	0252      	lsls	r2, r2, #9
     ee6:	18ad      	adds	r5, r5, r2
     ee8:	0409      	lsls	r1, r1, #16
     eea:	041a      	lsls	r2, r3, #16
     eec:	0c09      	lsrs	r1, r1, #16
     eee:	1852      	adds	r2, r2, r1
     ef0:	0194      	lsls	r4, r2, #6
     ef2:	0c1b      	lsrs	r3, r3, #16
     ef4:	1e61      	subs	r1, r4, #1
     ef6:	418c      	sbcs	r4, r1
     ef8:	0e92      	lsrs	r2, r2, #26
     efa:	18ed      	adds	r5, r5, r3
     efc:	4314      	orrs	r4, r2
     efe:	01ad      	lsls	r5, r5, #6
     f00:	432c      	orrs	r4, r5
     f02:	0123      	lsls	r3, r4, #4
     f04:	d505      	bpl.n	f12 <__aeabi_fmul+0x17e>
     f06:	2201      	movs	r2, #1
     f08:	0863      	lsrs	r3, r4, #1
     f0a:	2001      	movs	r0, #1
     f0c:	4014      	ands	r4, r2
     f0e:	4481      	add	r9, r0
     f10:	431c      	orrs	r4, r3
     f12:	464b      	mov	r3, r9
     f14:	337f      	adds	r3, #127	; 0x7f
     f16:	2b00      	cmp	r3, #0
     f18:	dd2d      	ble.n	f76 <__aeabi_fmul+0x1e2>
     f1a:	0760      	lsls	r0, r4, #29
     f1c:	d004      	beq.n	f28 <__aeabi_fmul+0x194>
     f1e:	220f      	movs	r2, #15
     f20:	4022      	ands	r2, r4
     f22:	2a04      	cmp	r2, #4
     f24:	d000      	beq.n	f28 <__aeabi_fmul+0x194>
     f26:	3404      	adds	r4, #4
     f28:	0122      	lsls	r2, r4, #4
     f2a:	d503      	bpl.n	f34 <__aeabi_fmul+0x1a0>
     f2c:	4b2d      	ldr	r3, [pc, #180]	; (fe4 <__aeabi_fmul+0x250>)
     f2e:	401c      	ands	r4, r3
     f30:	464b      	mov	r3, r9
     f32:	3380      	adds	r3, #128	; 0x80
     f34:	2bfe      	cmp	r3, #254	; 0xfe
     f36:	dd17      	ble.n	f68 <__aeabi_fmul+0x1d4>
     f38:	9b01      	ldr	r3, [sp, #4]
     f3a:	2501      	movs	r5, #1
     f3c:	401d      	ands	r5, r3
     f3e:	2400      	movs	r4, #0
     f40:	23ff      	movs	r3, #255	; 0xff
     f42:	e76b      	b.n	e1c <__aeabi_fmul+0x88>
     f44:	2080      	movs	r0, #128	; 0x80
     f46:	03c0      	lsls	r0, r0, #15
     f48:	4204      	tst	r4, r0
     f4a:	d008      	beq.n	f5e <__aeabi_fmul+0x1ca>
     f4c:	4207      	tst	r7, r0
     f4e:	d106      	bne.n	f5e <__aeabi_fmul+0x1ca>
     f50:	1c04      	adds	r4, r0, #0
     f52:	433c      	orrs	r4, r7
     f54:	0264      	lsls	r4, r4, #9
     f56:	0a64      	lsrs	r4, r4, #9
     f58:	465d      	mov	r5, fp
     f5a:	23ff      	movs	r3, #255	; 0xff
     f5c:	e75e      	b.n	e1c <__aeabi_fmul+0x88>
     f5e:	4304      	orrs	r4, r0
     f60:	0264      	lsls	r4, r4, #9
     f62:	0a64      	lsrs	r4, r4, #9
     f64:	23ff      	movs	r3, #255	; 0xff
     f66:	e759      	b.n	e1c <__aeabi_fmul+0x88>
     f68:	9801      	ldr	r0, [sp, #4]
     f6a:	01a4      	lsls	r4, r4, #6
     f6c:	2501      	movs	r5, #1
     f6e:	0a64      	lsrs	r4, r4, #9
     f70:	b2db      	uxtb	r3, r3
     f72:	4005      	ands	r5, r0
     f74:	e752      	b.n	e1c <__aeabi_fmul+0x88>
     f76:	237e      	movs	r3, #126	; 0x7e
     f78:	425b      	negs	r3, r3
     f7a:	464a      	mov	r2, r9
     f7c:	1a9b      	subs	r3, r3, r2
     f7e:	2b1b      	cmp	r3, #27
     f80:	dd05      	ble.n	f8e <__aeabi_fmul+0x1fa>
     f82:	9b01      	ldr	r3, [sp, #4]
     f84:	2501      	movs	r5, #1
     f86:	401d      	ands	r5, r3
     f88:	2400      	movs	r4, #0
     f8a:	2300      	movs	r3, #0
     f8c:	e746      	b.n	e1c <__aeabi_fmul+0x88>
     f8e:	1c22      	adds	r2, r4, #0
     f90:	40da      	lsrs	r2, r3
     f92:	464b      	mov	r3, r9
     f94:	339e      	adds	r3, #158	; 0x9e
     f96:	409c      	lsls	r4, r3
     f98:	1c23      	adds	r3, r4, #0
     f9a:	1e5c      	subs	r4, r3, #1
     f9c:	41a3      	sbcs	r3, r4
     f9e:	4313      	orrs	r3, r2
     fa0:	0758      	lsls	r0, r3, #29
     fa2:	d004      	beq.n	fae <__aeabi_fmul+0x21a>
     fa4:	220f      	movs	r2, #15
     fa6:	401a      	ands	r2, r3
     fa8:	2a04      	cmp	r2, #4
     faa:	d000      	beq.n	fae <__aeabi_fmul+0x21a>
     fac:	3304      	adds	r3, #4
     fae:	015a      	lsls	r2, r3, #5
     fb0:	d505      	bpl.n	fbe <__aeabi_fmul+0x22a>
     fb2:	9b01      	ldr	r3, [sp, #4]
     fb4:	2501      	movs	r5, #1
     fb6:	401d      	ands	r5, r3
     fb8:	2400      	movs	r4, #0
     fba:	2301      	movs	r3, #1
     fbc:	e72e      	b.n	e1c <__aeabi_fmul+0x88>
     fbe:	9801      	ldr	r0, [sp, #4]
     fc0:	019c      	lsls	r4, r3, #6
     fc2:	2501      	movs	r5, #1
     fc4:	0a64      	lsrs	r4, r4, #9
     fc6:	4005      	ands	r5, r0
     fc8:	2300      	movs	r3, #0
     fca:	e727      	b.n	e1c <__aeabi_fmul+0x88>
     fcc:	2780      	movs	r7, #128	; 0x80
     fce:	03ff      	lsls	r7, r7, #15
     fd0:	9b01      	ldr	r3, [sp, #4]
     fd2:	433c      	orrs	r4, r7
     fd4:	0264      	lsls	r4, r4, #9
     fd6:	2501      	movs	r5, #1
     fd8:	401d      	ands	r5, r3
     fda:	0a64      	lsrs	r4, r4, #9
     fdc:	23ff      	movs	r3, #255	; 0xff
     fde:	e71d      	b.n	e1c <__aeabi_fmul+0x88>
     fe0:	00014fc0 	.word	0x00014fc0
     fe4:	f7ffffff 	.word	0xf7ffffff

00000fe8 <__aeabi_fsub>:
__aeabi_fsub():
     fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fea:	0fc2      	lsrs	r2, r0, #31
     fec:	0243      	lsls	r3, r0, #9
     fee:	0044      	lsls	r4, r0, #1
     ff0:	024d      	lsls	r5, r1, #9
     ff2:	0048      	lsls	r0, r1, #1
     ff4:	0e24      	lsrs	r4, r4, #24
     ff6:	1c16      	adds	r6, r2, #0
     ff8:	099b      	lsrs	r3, r3, #6
     ffa:	0e00      	lsrs	r0, r0, #24
     ffc:	0fc9      	lsrs	r1, r1, #31
     ffe:	09ad      	lsrs	r5, r5, #6
    1000:	28ff      	cmp	r0, #255	; 0xff
    1002:	d100      	bne.n	1006 <PREEMPTION_DISABLED+0x6>
    1004:	e083      	b.n	110e <PREEMPTION_DISABLED+0x10e>
    1006:	2701      	movs	r7, #1
    1008:	4079      	eors	r1, r7
    100a:	428a      	cmp	r2, r1
    100c:	d05c      	beq.n	10c8 <PREEMPTION_DISABLED+0xc8>
    100e:	1a22      	subs	r2, r4, r0
    1010:	2a00      	cmp	r2, #0
    1012:	dc00      	bgt.n	1016 <PREEMPTION_DISABLED+0x16>
    1014:	e08e      	b.n	1134 <PREEMPTION_DISABLED+0x134>
    1016:	2800      	cmp	r0, #0
    1018:	d11e      	bne.n	1058 <PREEMPTION_DISABLED+0x58>
    101a:	2d00      	cmp	r5, #0
    101c:	d000      	beq.n	1020 <PREEMPTION_DISABLED+0x20>
    101e:	e07a      	b.n	1116 <PREEMPTION_DISABLED+0x116>
    1020:	0758      	lsls	r0, r3, #29
    1022:	d004      	beq.n	102e <PREEMPTION_DISABLED+0x2e>
    1024:	220f      	movs	r2, #15
    1026:	401a      	ands	r2, r3
    1028:	2a04      	cmp	r2, #4
    102a:	d000      	beq.n	102e <PREEMPTION_DISABLED+0x2e>
    102c:	3304      	adds	r3, #4
    102e:	2180      	movs	r1, #128	; 0x80
    1030:	04c9      	lsls	r1, r1, #19
    1032:	2201      	movs	r2, #1
    1034:	4019      	ands	r1, r3
    1036:	4032      	ands	r2, r6
    1038:	2900      	cmp	r1, #0
    103a:	d03a      	beq.n	10b2 <PREEMPTION_DISABLED+0xb2>
    103c:	3401      	adds	r4, #1
    103e:	2cff      	cmp	r4, #255	; 0xff
    1040:	d100      	bne.n	1044 <PREEMPTION_DISABLED+0x44>
    1042:	e083      	b.n	114c <PREEMPTION_DISABLED+0x14c>
    1044:	019b      	lsls	r3, r3, #6
    1046:	0a5b      	lsrs	r3, r3, #9
    1048:	025b      	lsls	r3, r3, #9
    104a:	b2e4      	uxtb	r4, r4
    104c:	05e4      	lsls	r4, r4, #23
    104e:	0a58      	lsrs	r0, r3, #9
    1050:	07d2      	lsls	r2, r2, #31
    1052:	4320      	orrs	r0, r4
    1054:	4310      	orrs	r0, r2
    1056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1058:	2cff      	cmp	r4, #255	; 0xff
    105a:	d0e1      	beq.n	1020 <PREEMPTION_DISABLED+0x20>
    105c:	2180      	movs	r1, #128	; 0x80
    105e:	04c9      	lsls	r1, r1, #19
    1060:	430d      	orrs	r5, r1
    1062:	2a1b      	cmp	r2, #27
    1064:	dd00      	ble.n	1068 <PREEMPTION_DISABLED+0x68>
    1066:	e131      	b.n	12cc <PREEMPTION_DISABLED+0x2cc>
    1068:	1c29      	adds	r1, r5, #0
    106a:	2020      	movs	r0, #32
    106c:	40d1      	lsrs	r1, r2
    106e:	1a82      	subs	r2, r0, r2
    1070:	4095      	lsls	r5, r2
    1072:	1e6a      	subs	r2, r5, #1
    1074:	4195      	sbcs	r5, r2
    1076:	430d      	orrs	r5, r1
    1078:	1b5b      	subs	r3, r3, r5
    107a:	0158      	lsls	r0, r3, #5
    107c:	d5d0      	bpl.n	1020 <PREEMPTION_DISABLED+0x20>
    107e:	019b      	lsls	r3, r3, #6
    1080:	099f      	lsrs	r7, r3, #6
    1082:	1c38      	adds	r0, r7, #0
    1084:	f001 fd40 	bl	2b08 <__clzsi2>
    1088:	1f42      	subs	r2, r0, #5
    108a:	4097      	lsls	r7, r2
    108c:	4294      	cmp	r4, r2
    108e:	dc5f      	bgt.n	1150 <PREEMPTION_DISABLED+0x150>
    1090:	1b14      	subs	r4, r2, r4
    1092:	231f      	movs	r3, #31
    1094:	1b1b      	subs	r3, r3, r4
    1096:	1c3a      	adds	r2, r7, #0
    1098:	409f      	lsls	r7, r3
    109a:	1c61      	adds	r1, r4, #1
    109c:	1c3b      	adds	r3, r7, #0
    109e:	40ca      	lsrs	r2, r1
    10a0:	1e5f      	subs	r7, r3, #1
    10a2:	41bb      	sbcs	r3, r7
    10a4:	4313      	orrs	r3, r2
    10a6:	2400      	movs	r4, #0
    10a8:	e7ba      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    10aa:	1e13      	subs	r3, r2, #0
    10ac:	d1b8      	bne.n	1020 <PREEMPTION_DISABLED+0x20>
    10ae:	2300      	movs	r3, #0
    10b0:	2200      	movs	r2, #0
    10b2:	08db      	lsrs	r3, r3, #3
    10b4:	2cff      	cmp	r4, #255	; 0xff
    10b6:	d104      	bne.n	10c2 <PREEMPTION_DISABLED+0xc2>
    10b8:	2b00      	cmp	r3, #0
    10ba:	d047      	beq.n	114c <PREEMPTION_DISABLED+0x14c>
    10bc:	2080      	movs	r0, #128	; 0x80
    10be:	03c0      	lsls	r0, r0, #15
    10c0:	4303      	orrs	r3, r0
    10c2:	025b      	lsls	r3, r3, #9
    10c4:	0a5b      	lsrs	r3, r3, #9
    10c6:	e7bf      	b.n	1048 <PREEMPTION_DISABLED+0x48>
    10c8:	1a21      	subs	r1, r4, r0
    10ca:	2900      	cmp	r1, #0
    10cc:	dd44      	ble.n	1158 <PREEMPTION_DISABLED+0x158>
    10ce:	2800      	cmp	r0, #0
    10d0:	d027      	beq.n	1122 <PREEMPTION_DISABLED+0x122>
    10d2:	2cff      	cmp	r4, #255	; 0xff
    10d4:	d0a4      	beq.n	1020 <PREEMPTION_DISABLED+0x20>
    10d6:	2080      	movs	r0, #128	; 0x80
    10d8:	04c0      	lsls	r0, r0, #19
    10da:	4305      	orrs	r5, r0
    10dc:	291b      	cmp	r1, #27
    10de:	dd00      	ble.n	10e2 <PREEMPTION_DISABLED+0xe2>
    10e0:	e0f2      	b.n	12c8 <PREEMPTION_DISABLED+0x2c8>
    10e2:	1c28      	adds	r0, r5, #0
    10e4:	2720      	movs	r7, #32
    10e6:	40c8      	lsrs	r0, r1
    10e8:	1a79      	subs	r1, r7, r1
    10ea:	408d      	lsls	r5, r1
    10ec:	1e69      	subs	r1, r5, #1
    10ee:	418d      	sbcs	r5, r1
    10f0:	4305      	orrs	r5, r0
    10f2:	195b      	adds	r3, r3, r5
    10f4:	0159      	lsls	r1, r3, #5
    10f6:	d400      	bmi.n	10fa <PREEMPTION_DISABLED+0xfa>
    10f8:	e792      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    10fa:	3401      	adds	r4, #1
    10fc:	2cff      	cmp	r4, #255	; 0xff
    10fe:	d059      	beq.n	11b4 <PREEMPTION_DISABLED+0x1b4>
    1100:	4973      	ldr	r1, [pc, #460]	; (12d0 <PREEMPTION_DISABLED+0x2d0>)
    1102:	2201      	movs	r2, #1
    1104:	401a      	ands	r2, r3
    1106:	400b      	ands	r3, r1
    1108:	085b      	lsrs	r3, r3, #1
    110a:	4313      	orrs	r3, r2
    110c:	e788      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    110e:	2d00      	cmp	r5, #0
    1110:	d000      	beq.n	1114 <PREEMPTION_DISABLED+0x114>
    1112:	e77a      	b.n	100a <PREEMPTION_DISABLED+0xa>
    1114:	e777      	b.n	1006 <PREEMPTION_DISABLED+0x6>
    1116:	3a01      	subs	r2, #1
    1118:	2a00      	cmp	r2, #0
    111a:	d0ad      	beq.n	1078 <PREEMPTION_DISABLED+0x78>
    111c:	2cff      	cmp	r4, #255	; 0xff
    111e:	d1a0      	bne.n	1062 <PREEMPTION_DISABLED+0x62>
    1120:	e77e      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    1122:	2d00      	cmp	r5, #0
    1124:	d100      	bne.n	1128 <PREEMPTION_DISABLED+0x128>
    1126:	e77b      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    1128:	3901      	subs	r1, #1
    112a:	2900      	cmp	r1, #0
    112c:	d0e1      	beq.n	10f2 <PREEMPTION_DISABLED+0xf2>
    112e:	2cff      	cmp	r4, #255	; 0xff
    1130:	d1d4      	bne.n	10dc <PREEMPTION_DISABLED+0xdc>
    1132:	e775      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    1134:	2a00      	cmp	r2, #0
    1136:	d11b      	bne.n	1170 <PREEMPTION_DISABLED+0x170>
    1138:	1c62      	adds	r2, r4, #1
    113a:	b2d2      	uxtb	r2, r2
    113c:	2a01      	cmp	r2, #1
    113e:	dd4b      	ble.n	11d8 <PREEMPTION_DISABLED+0x1d8>
    1140:	1b5f      	subs	r7, r3, r5
    1142:	017a      	lsls	r2, r7, #5
    1144:	d523      	bpl.n	118e <PREEMPTION_DISABLED+0x18e>
    1146:	1aef      	subs	r7, r5, r3
    1148:	1c0e      	adds	r6, r1, #0
    114a:	e79a      	b.n	1082 <PREEMPTION_DISABLED+0x82>
    114c:	2300      	movs	r3, #0
    114e:	e77b      	b.n	1048 <PREEMPTION_DISABLED+0x48>
    1150:	4b5f      	ldr	r3, [pc, #380]	; (12d0 <PREEMPTION_DISABLED+0x2d0>)
    1152:	1aa4      	subs	r4, r4, r2
    1154:	403b      	ands	r3, r7
    1156:	e763      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    1158:	2900      	cmp	r1, #0
    115a:	d146      	bne.n	11ea <PREEMPTION_DISABLED+0x1ea>
    115c:	1c61      	adds	r1, r4, #1
    115e:	b2c8      	uxtb	r0, r1
    1160:	2801      	cmp	r0, #1
    1162:	dd29      	ble.n	11b8 <PREEMPTION_DISABLED+0x1b8>
    1164:	29ff      	cmp	r1, #255	; 0xff
    1166:	d024      	beq.n	11b2 <PREEMPTION_DISABLED+0x1b2>
    1168:	18eb      	adds	r3, r5, r3
    116a:	085b      	lsrs	r3, r3, #1
    116c:	1c0c      	adds	r4, r1, #0
    116e:	e757      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    1170:	2c00      	cmp	r4, #0
    1172:	d013      	beq.n	119c <PREEMPTION_DISABLED+0x19c>
    1174:	28ff      	cmp	r0, #255	; 0xff
    1176:	d018      	beq.n	11aa <PREEMPTION_DISABLED+0x1aa>
    1178:	2480      	movs	r4, #128	; 0x80
    117a:	04e4      	lsls	r4, r4, #19
    117c:	4252      	negs	r2, r2
    117e:	4323      	orrs	r3, r4
    1180:	2a1b      	cmp	r2, #27
    1182:	dd4d      	ble.n	1220 <PREEMPTION_DISABLED+0x220>
    1184:	2301      	movs	r3, #1
    1186:	1aeb      	subs	r3, r5, r3
    1188:	1c04      	adds	r4, r0, #0
    118a:	1c0e      	adds	r6, r1, #0
    118c:	e775      	b.n	107a <PREEMPTION_DISABLED+0x7a>
    118e:	2f00      	cmp	r7, #0
    1190:	d000      	beq.n	1194 <PREEMPTION_DISABLED+0x194>
    1192:	e776      	b.n	1082 <PREEMPTION_DISABLED+0x82>
    1194:	2300      	movs	r3, #0
    1196:	2200      	movs	r2, #0
    1198:	2400      	movs	r4, #0
    119a:	e78a      	b.n	10b2 <PREEMPTION_DISABLED+0xb2>
    119c:	2b00      	cmp	r3, #0
    119e:	d03b      	beq.n	1218 <PREEMPTION_DISABLED+0x218>
    11a0:	43d2      	mvns	r2, r2
    11a2:	2a00      	cmp	r2, #0
    11a4:	d0ef      	beq.n	1186 <PREEMPTION_DISABLED+0x186>
    11a6:	28ff      	cmp	r0, #255	; 0xff
    11a8:	d1ea      	bne.n	1180 <PREEMPTION_DISABLED+0x180>
    11aa:	1c2b      	adds	r3, r5, #0
    11ac:	24ff      	movs	r4, #255	; 0xff
    11ae:	1c0e      	adds	r6, r1, #0
    11b0:	e736      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    11b2:	24ff      	movs	r4, #255	; 0xff
    11b4:	2300      	movs	r3, #0
    11b6:	e77c      	b.n	10b2 <PREEMPTION_DISABLED+0xb2>
    11b8:	2c00      	cmp	r4, #0
    11ba:	d15c      	bne.n	1276 <PREEMPTION_DISABLED+0x276>
    11bc:	2b00      	cmp	r3, #0
    11be:	d100      	bne.n	11c2 <PREEMPTION_DISABLED+0x1c2>
    11c0:	e080      	b.n	12c4 <PREEMPTION_DISABLED+0x2c4>
    11c2:	2d00      	cmp	r5, #0
    11c4:	d100      	bne.n	11c8 <PREEMPTION_DISABLED+0x1c8>
    11c6:	e72b      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    11c8:	195b      	adds	r3, r3, r5
    11ca:	0158      	lsls	r0, r3, #5
    11cc:	d400      	bmi.n	11d0 <PREEMPTION_DISABLED+0x1d0>
    11ce:	e727      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    11d0:	4a3f      	ldr	r2, [pc, #252]	; (12d0 <PREEMPTION_DISABLED+0x2d0>)
    11d2:	2401      	movs	r4, #1
    11d4:	4013      	ands	r3, r2
    11d6:	e723      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    11d8:	2c00      	cmp	r4, #0
    11da:	d115      	bne.n	1208 <PREEMPTION_DISABLED+0x208>
    11dc:	2b00      	cmp	r3, #0
    11de:	d140      	bne.n	1262 <PREEMPTION_DISABLED+0x262>
    11e0:	2d00      	cmp	r5, #0
    11e2:	d063      	beq.n	12ac <PREEMPTION_DISABLED+0x2ac>
    11e4:	1c2b      	adds	r3, r5, #0
    11e6:	1c0e      	adds	r6, r1, #0
    11e8:	e71a      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    11ea:	2c00      	cmp	r4, #0
    11ec:	d121      	bne.n	1232 <PREEMPTION_DISABLED+0x232>
    11ee:	2b00      	cmp	r3, #0
    11f0:	d054      	beq.n	129c <PREEMPTION_DISABLED+0x29c>
    11f2:	43c9      	mvns	r1, r1
    11f4:	2900      	cmp	r1, #0
    11f6:	d004      	beq.n	1202 <PREEMPTION_DISABLED+0x202>
    11f8:	28ff      	cmp	r0, #255	; 0xff
    11fa:	d04c      	beq.n	1296 <PREEMPTION_DISABLED+0x296>
    11fc:	291b      	cmp	r1, #27
    11fe:	dd58      	ble.n	12b2 <PREEMPTION_DISABLED+0x2b2>
    1200:	2301      	movs	r3, #1
    1202:	195b      	adds	r3, r3, r5
    1204:	1c04      	adds	r4, r0, #0
    1206:	e775      	b.n	10f4 <PREEMPTION_DISABLED+0xf4>
    1208:	2b00      	cmp	r3, #0
    120a:	d119      	bne.n	1240 <PREEMPTION_DISABLED+0x240>
    120c:	2d00      	cmp	r5, #0
    120e:	d048      	beq.n	12a2 <PREEMPTION_DISABLED+0x2a2>
    1210:	1c2b      	adds	r3, r5, #0
    1212:	1c0e      	adds	r6, r1, #0
    1214:	24ff      	movs	r4, #255	; 0xff
    1216:	e703      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    1218:	1c2b      	adds	r3, r5, #0
    121a:	1c04      	adds	r4, r0, #0
    121c:	1c0e      	adds	r6, r1, #0
    121e:	e6ff      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    1220:	1c1c      	adds	r4, r3, #0
    1222:	2620      	movs	r6, #32
    1224:	40d4      	lsrs	r4, r2
    1226:	1ab2      	subs	r2, r6, r2
    1228:	4093      	lsls	r3, r2
    122a:	1e5a      	subs	r2, r3, #1
    122c:	4193      	sbcs	r3, r2
    122e:	4323      	orrs	r3, r4
    1230:	e7a9      	b.n	1186 <PREEMPTION_DISABLED+0x186>
    1232:	28ff      	cmp	r0, #255	; 0xff
    1234:	d02f      	beq.n	1296 <PREEMPTION_DISABLED+0x296>
    1236:	2480      	movs	r4, #128	; 0x80
    1238:	04e4      	lsls	r4, r4, #19
    123a:	4249      	negs	r1, r1
    123c:	4323      	orrs	r3, r4
    123e:	e7dd      	b.n	11fc <PREEMPTION_DISABLED+0x1fc>
    1240:	24ff      	movs	r4, #255	; 0xff
    1242:	2d00      	cmp	r5, #0
    1244:	d100      	bne.n	1248 <PREEMPTION_DISABLED+0x248>
    1246:	e6eb      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    1248:	2280      	movs	r2, #128	; 0x80
    124a:	08db      	lsrs	r3, r3, #3
    124c:	03d2      	lsls	r2, r2, #15
    124e:	4213      	tst	r3, r2
    1250:	d004      	beq.n	125c <PREEMPTION_DISABLED+0x25c>
    1252:	08ed      	lsrs	r5, r5, #3
    1254:	4215      	tst	r5, r2
    1256:	d101      	bne.n	125c <PREEMPTION_DISABLED+0x25c>
    1258:	1c2b      	adds	r3, r5, #0
    125a:	1c0e      	adds	r6, r1, #0
    125c:	00db      	lsls	r3, r3, #3
    125e:	24ff      	movs	r4, #255	; 0xff
    1260:	e6de      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    1262:	2d00      	cmp	r5, #0
    1264:	d100      	bne.n	1268 <PREEMPTION_DISABLED+0x268>
    1266:	e6db      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    1268:	1b5a      	subs	r2, r3, r5
    126a:	0150      	lsls	r0, r2, #5
    126c:	d400      	bmi.n	1270 <PREEMPTION_DISABLED+0x270>
    126e:	e71c      	b.n	10aa <PREEMPTION_DISABLED+0xaa>
    1270:	1aeb      	subs	r3, r5, r3
    1272:	1c0e      	adds	r6, r1, #0
    1274:	e6d4      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    1276:	2b00      	cmp	r3, #0
    1278:	d00d      	beq.n	1296 <PREEMPTION_DISABLED+0x296>
    127a:	24ff      	movs	r4, #255	; 0xff
    127c:	2d00      	cmp	r5, #0
    127e:	d100      	bne.n	1282 <PREEMPTION_DISABLED+0x282>
    1280:	e6ce      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    1282:	2280      	movs	r2, #128	; 0x80
    1284:	08db      	lsrs	r3, r3, #3
    1286:	03d2      	lsls	r2, r2, #15
    1288:	4213      	tst	r3, r2
    128a:	d0e7      	beq.n	125c <PREEMPTION_DISABLED+0x25c>
    128c:	08ed      	lsrs	r5, r5, #3
    128e:	4215      	tst	r5, r2
    1290:	d1e4      	bne.n	125c <PREEMPTION_DISABLED+0x25c>
    1292:	1c2b      	adds	r3, r5, #0
    1294:	e7e2      	b.n	125c <PREEMPTION_DISABLED+0x25c>
    1296:	1c2b      	adds	r3, r5, #0
    1298:	24ff      	movs	r4, #255	; 0xff
    129a:	e6c1      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    129c:	1c2b      	adds	r3, r5, #0
    129e:	1c04      	adds	r4, r0, #0
    12a0:	e6be      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    12a2:	2380      	movs	r3, #128	; 0x80
    12a4:	2200      	movs	r2, #0
    12a6:	049b      	lsls	r3, r3, #18
    12a8:	24ff      	movs	r4, #255	; 0xff
    12aa:	e702      	b.n	10b2 <PREEMPTION_DISABLED+0xb2>
    12ac:	1c23      	adds	r3, r4, #0
    12ae:	2200      	movs	r2, #0
    12b0:	e6ff      	b.n	10b2 <PREEMPTION_DISABLED+0xb2>
    12b2:	1c1c      	adds	r4, r3, #0
    12b4:	2720      	movs	r7, #32
    12b6:	40cc      	lsrs	r4, r1
    12b8:	1a79      	subs	r1, r7, r1
    12ba:	408b      	lsls	r3, r1
    12bc:	1e59      	subs	r1, r3, #1
    12be:	418b      	sbcs	r3, r1
    12c0:	4323      	orrs	r3, r4
    12c2:	e79e      	b.n	1202 <PREEMPTION_DISABLED+0x202>
    12c4:	1c2b      	adds	r3, r5, #0
    12c6:	e6ab      	b.n	1020 <PREEMPTION_DISABLED+0x20>
    12c8:	2501      	movs	r5, #1
    12ca:	e712      	b.n	10f2 <PREEMPTION_DISABLED+0xf2>
    12cc:	2501      	movs	r5, #1
    12ce:	e6d3      	b.n	1078 <PREEMPTION_DISABLED+0x78>
    12d0:	fbffffff 	.word	0xfbffffff

000012d4 <__aeabi_f2iz>:
__aeabi_f2iz():
    12d4:	0243      	lsls	r3, r0, #9
    12d6:	0a59      	lsrs	r1, r3, #9
    12d8:	0043      	lsls	r3, r0, #1
    12da:	0fc2      	lsrs	r2, r0, #31
    12dc:	0e1b      	lsrs	r3, r3, #24
    12de:	2000      	movs	r0, #0
    12e0:	2b7e      	cmp	r3, #126	; 0x7e
    12e2:	dd0d      	ble.n	1300 <__aeabi_f2iz+0x2c>
    12e4:	2b9d      	cmp	r3, #157	; 0x9d
    12e6:	dc0c      	bgt.n	1302 <__aeabi_f2iz+0x2e>
    12e8:	2080      	movs	r0, #128	; 0x80
    12ea:	0400      	lsls	r0, r0, #16
    12ec:	4301      	orrs	r1, r0
    12ee:	2b95      	cmp	r3, #149	; 0x95
    12f0:	dc0a      	bgt.n	1308 <__aeabi_f2iz+0x34>
    12f2:	2096      	movs	r0, #150	; 0x96
    12f4:	1ac3      	subs	r3, r0, r3
    12f6:	40d9      	lsrs	r1, r3
    12f8:	4248      	negs	r0, r1
    12fa:	2a00      	cmp	r2, #0
    12fc:	d100      	bne.n	1300 <__aeabi_f2iz+0x2c>
    12fe:	1c08      	adds	r0, r1, #0
    1300:	4770      	bx	lr
    1302:	4b03      	ldr	r3, [pc, #12]	; (1310 <__aeabi_f2iz+0x3c>)
    1304:	18d0      	adds	r0, r2, r3
    1306:	e7fb      	b.n	1300 <__aeabi_f2iz+0x2c>
    1308:	3b96      	subs	r3, #150	; 0x96
    130a:	4099      	lsls	r1, r3
    130c:	e7f4      	b.n	12f8 <__aeabi_f2iz+0x24>
    130e:	46c0      	nop			; (mov r8, r8)
    1310:	7fffffff 	.word	0x7fffffff

00001314 <__aeabi_i2f>:
__aeabi_i2f():
    1314:	b570      	push	{r4, r5, r6, lr}
    1316:	1e04      	subs	r4, r0, #0
    1318:	d03c      	beq.n	1394 <__aeabi_i2f+0x80>
    131a:	0fc6      	lsrs	r6, r0, #31
    131c:	d000      	beq.n	1320 <__aeabi_i2f+0xc>
    131e:	4244      	negs	r4, r0
    1320:	1c20      	adds	r0, r4, #0
    1322:	f001 fbf1 	bl	2b08 <__clzsi2>
    1326:	239e      	movs	r3, #158	; 0x9e
    1328:	1c25      	adds	r5, r4, #0
    132a:	1a1b      	subs	r3, r3, r0
    132c:	2b96      	cmp	r3, #150	; 0x96
    132e:	dc0c      	bgt.n	134a <__aeabi_i2f+0x36>
    1330:	3808      	subs	r0, #8
    1332:	4084      	lsls	r4, r0
    1334:	0264      	lsls	r4, r4, #9
    1336:	0a64      	lsrs	r4, r4, #9
    1338:	b2db      	uxtb	r3, r3
    133a:	1c32      	adds	r2, r6, #0
    133c:	0264      	lsls	r4, r4, #9
    133e:	05db      	lsls	r3, r3, #23
    1340:	0a60      	lsrs	r0, r4, #9
    1342:	07d2      	lsls	r2, r2, #31
    1344:	4318      	orrs	r0, r3
    1346:	4310      	orrs	r0, r2
    1348:	bd70      	pop	{r4, r5, r6, pc}
    134a:	2b99      	cmp	r3, #153	; 0x99
    134c:	dd0a      	ble.n	1364 <__aeabi_i2f+0x50>
    134e:	2205      	movs	r2, #5
    1350:	1a12      	subs	r2, r2, r0
    1352:	1c21      	adds	r1, r4, #0
    1354:	40d1      	lsrs	r1, r2
    1356:	1c0a      	adds	r2, r1, #0
    1358:	1c01      	adds	r1, r0, #0
    135a:	311b      	adds	r1, #27
    135c:	408d      	lsls	r5, r1
    135e:	1e69      	subs	r1, r5, #1
    1360:	418d      	sbcs	r5, r1
    1362:	4315      	orrs	r5, r2
    1364:	2805      	cmp	r0, #5
    1366:	dd01      	ble.n	136c <__aeabi_i2f+0x58>
    1368:	1f42      	subs	r2, r0, #5
    136a:	4095      	lsls	r5, r2
    136c:	4c16      	ldr	r4, [pc, #88]	; (13c8 <__aeabi_i2f+0xb4>)
    136e:	402c      	ands	r4, r5
    1370:	076a      	lsls	r2, r5, #29
    1372:	d004      	beq.n	137e <__aeabi_i2f+0x6a>
    1374:	220f      	movs	r2, #15
    1376:	4015      	ands	r5, r2
    1378:	2d04      	cmp	r5, #4
    137a:	d000      	beq.n	137e <__aeabi_i2f+0x6a>
    137c:	3404      	adds	r4, #4
    137e:	0161      	lsls	r1, r4, #5
    1380:	d50c      	bpl.n	139c <__aeabi_i2f+0x88>
    1382:	239f      	movs	r3, #159	; 0x9f
    1384:	1a18      	subs	r0, r3, r0
    1386:	28ff      	cmp	r0, #255	; 0xff
    1388:	d01a      	beq.n	13c0 <__aeabi_i2f+0xac>
    138a:	01a4      	lsls	r4, r4, #6
    138c:	0a64      	lsrs	r4, r4, #9
    138e:	b2c3      	uxtb	r3, r0
    1390:	1c32      	adds	r2, r6, #0
    1392:	e7d3      	b.n	133c <__aeabi_i2f+0x28>
    1394:	2200      	movs	r2, #0
    1396:	2300      	movs	r3, #0
    1398:	2400      	movs	r4, #0
    139a:	e7cf      	b.n	133c <__aeabi_i2f+0x28>
    139c:	08e4      	lsrs	r4, r4, #3
    139e:	2bff      	cmp	r3, #255	; 0xff
    13a0:	d004      	beq.n	13ac <__aeabi_i2f+0x98>
    13a2:	0264      	lsls	r4, r4, #9
    13a4:	0a64      	lsrs	r4, r4, #9
    13a6:	b2db      	uxtb	r3, r3
    13a8:	1c32      	adds	r2, r6, #0
    13aa:	e7c7      	b.n	133c <__aeabi_i2f+0x28>
    13ac:	2c00      	cmp	r4, #0
    13ae:	d004      	beq.n	13ba <__aeabi_i2f+0xa6>
    13b0:	2080      	movs	r0, #128	; 0x80
    13b2:	03c0      	lsls	r0, r0, #15
    13b4:	4304      	orrs	r4, r0
    13b6:	0264      	lsls	r4, r4, #9
    13b8:	0a64      	lsrs	r4, r4, #9
    13ba:	1c32      	adds	r2, r6, #0
    13bc:	23ff      	movs	r3, #255	; 0xff
    13be:	e7bd      	b.n	133c <__aeabi_i2f+0x28>
    13c0:	1c32      	adds	r2, r6, #0
    13c2:	23ff      	movs	r3, #255	; 0xff
    13c4:	2400      	movs	r4, #0
    13c6:	e7b9      	b.n	133c <__aeabi_i2f+0x28>
    13c8:	fbffffff 	.word	0xfbffffff

000013cc <__aeabi_dadd>:
__aeabi_dadd():
    13cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13ce:	465f      	mov	r7, fp
    13d0:	4656      	mov	r6, sl
    13d2:	4644      	mov	r4, r8
    13d4:	464d      	mov	r5, r9
    13d6:	b4f0      	push	{r4, r5, r6, r7}
    13d8:	030c      	lsls	r4, r1, #12
    13da:	004d      	lsls	r5, r1, #1
    13dc:	0fce      	lsrs	r6, r1, #31
    13de:	0a61      	lsrs	r1, r4, #9
    13e0:	0f44      	lsrs	r4, r0, #29
    13e2:	4321      	orrs	r1, r4
    13e4:	00c4      	lsls	r4, r0, #3
    13e6:	0318      	lsls	r0, r3, #12
    13e8:	4680      	mov	r8, r0
    13ea:	0058      	lsls	r0, r3, #1
    13ec:	0d40      	lsrs	r0, r0, #21
    13ee:	4682      	mov	sl, r0
    13f0:	0fd8      	lsrs	r0, r3, #31
    13f2:	4684      	mov	ip, r0
    13f4:	4640      	mov	r0, r8
    13f6:	0a40      	lsrs	r0, r0, #9
    13f8:	0f53      	lsrs	r3, r2, #29
    13fa:	4303      	orrs	r3, r0
    13fc:	00d0      	lsls	r0, r2, #3
    13fe:	0d6d      	lsrs	r5, r5, #21
    1400:	1c37      	adds	r7, r6, #0
    1402:	4683      	mov	fp, r0
    1404:	4652      	mov	r2, sl
    1406:	4566      	cmp	r6, ip
    1408:	d100      	bne.n	140c <__aeabi_dadd+0x40>
    140a:	e0a4      	b.n	1556 <__aeabi_dadd+0x18a>
    140c:	1aaf      	subs	r7, r5, r2
    140e:	2f00      	cmp	r7, #0
    1410:	dc00      	bgt.n	1414 <__aeabi_dadd+0x48>
    1412:	e109      	b.n	1628 <__aeabi_dadd+0x25c>
    1414:	2a00      	cmp	r2, #0
    1416:	d13b      	bne.n	1490 <__aeabi_dadd+0xc4>
    1418:	4318      	orrs	r0, r3
    141a:	d000      	beq.n	141e <__aeabi_dadd+0x52>
    141c:	e0ea      	b.n	15f4 <__aeabi_dadd+0x228>
    141e:	0763      	lsls	r3, r4, #29
    1420:	d100      	bne.n	1424 <__aeabi_dadd+0x58>
    1422:	e087      	b.n	1534 <__aeabi_dadd+0x168>
    1424:	230f      	movs	r3, #15
    1426:	4023      	ands	r3, r4
    1428:	2b04      	cmp	r3, #4
    142a:	d100      	bne.n	142e <__aeabi_dadd+0x62>
    142c:	e082      	b.n	1534 <__aeabi_dadd+0x168>
    142e:	1d22      	adds	r2, r4, #4
    1430:	42a2      	cmp	r2, r4
    1432:	41a4      	sbcs	r4, r4
    1434:	4264      	negs	r4, r4
    1436:	2380      	movs	r3, #128	; 0x80
    1438:	1909      	adds	r1, r1, r4
    143a:	041b      	lsls	r3, r3, #16
    143c:	400b      	ands	r3, r1
    143e:	1c37      	adds	r7, r6, #0
    1440:	1c14      	adds	r4, r2, #0
    1442:	2b00      	cmp	r3, #0
    1444:	d100      	bne.n	1448 <__aeabi_dadd+0x7c>
    1446:	e07c      	b.n	1542 <__aeabi_dadd+0x176>
    1448:	4bce      	ldr	r3, [pc, #824]	; (1784 <__aeabi_dadd+0x3b8>)
    144a:	3501      	adds	r5, #1
    144c:	429d      	cmp	r5, r3
    144e:	d100      	bne.n	1452 <__aeabi_dadd+0x86>
    1450:	e105      	b.n	165e <__aeabi_dadd+0x292>
    1452:	4bcd      	ldr	r3, [pc, #820]	; (1788 <__aeabi_dadd+0x3bc>)
    1454:	08e4      	lsrs	r4, r4, #3
    1456:	4019      	ands	r1, r3
    1458:	0748      	lsls	r0, r1, #29
    145a:	0249      	lsls	r1, r1, #9
    145c:	4304      	orrs	r4, r0
    145e:	0b0b      	lsrs	r3, r1, #12
    1460:	2000      	movs	r0, #0
    1462:	2100      	movs	r1, #0
    1464:	031b      	lsls	r3, r3, #12
    1466:	0b1a      	lsrs	r2, r3, #12
    1468:	0d0b      	lsrs	r3, r1, #20
    146a:	056d      	lsls	r5, r5, #21
    146c:	051b      	lsls	r3, r3, #20
    146e:	4313      	orrs	r3, r2
    1470:	086a      	lsrs	r2, r5, #1
    1472:	4dc6      	ldr	r5, [pc, #792]	; (178c <__aeabi_dadd+0x3c0>)
    1474:	07ff      	lsls	r7, r7, #31
    1476:	401d      	ands	r5, r3
    1478:	4315      	orrs	r5, r2
    147a:	006d      	lsls	r5, r5, #1
    147c:	086d      	lsrs	r5, r5, #1
    147e:	1c29      	adds	r1, r5, #0
    1480:	4339      	orrs	r1, r7
    1482:	1c20      	adds	r0, r4, #0
    1484:	bc3c      	pop	{r2, r3, r4, r5}
    1486:	4690      	mov	r8, r2
    1488:	4699      	mov	r9, r3
    148a:	46a2      	mov	sl, r4
    148c:	46ab      	mov	fp, r5
    148e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1490:	48bc      	ldr	r0, [pc, #752]	; (1784 <__aeabi_dadd+0x3b8>)
    1492:	4285      	cmp	r5, r0
    1494:	d0c3      	beq.n	141e <__aeabi_dadd+0x52>
    1496:	2080      	movs	r0, #128	; 0x80
    1498:	0400      	lsls	r0, r0, #16
    149a:	4303      	orrs	r3, r0
    149c:	2f38      	cmp	r7, #56	; 0x38
    149e:	dd00      	ble.n	14a2 <__aeabi_dadd+0xd6>
    14a0:	e0f0      	b.n	1684 <__aeabi_dadd+0x2b8>
    14a2:	2f1f      	cmp	r7, #31
    14a4:	dd00      	ble.n	14a8 <__aeabi_dadd+0xdc>
    14a6:	e124      	b.n	16f2 <__aeabi_dadd+0x326>
    14a8:	2020      	movs	r0, #32
    14aa:	1bc0      	subs	r0, r0, r7
    14ac:	1c1a      	adds	r2, r3, #0
    14ae:	4681      	mov	r9, r0
    14b0:	4082      	lsls	r2, r0
    14b2:	4658      	mov	r0, fp
    14b4:	40f8      	lsrs	r0, r7
    14b6:	4302      	orrs	r2, r0
    14b8:	4694      	mov	ip, r2
    14ba:	4658      	mov	r0, fp
    14bc:	464a      	mov	r2, r9
    14be:	4090      	lsls	r0, r2
    14c0:	1e42      	subs	r2, r0, #1
    14c2:	4190      	sbcs	r0, r2
    14c4:	40fb      	lsrs	r3, r7
    14c6:	4662      	mov	r2, ip
    14c8:	4302      	orrs	r2, r0
    14ca:	1c1f      	adds	r7, r3, #0
    14cc:	1aa2      	subs	r2, r4, r2
    14ce:	4294      	cmp	r4, r2
    14d0:	41a4      	sbcs	r4, r4
    14d2:	4264      	negs	r4, r4
    14d4:	1bc9      	subs	r1, r1, r7
    14d6:	1b09      	subs	r1, r1, r4
    14d8:	1c14      	adds	r4, r2, #0
    14da:	020b      	lsls	r3, r1, #8
    14dc:	d59f      	bpl.n	141e <__aeabi_dadd+0x52>
    14de:	0249      	lsls	r1, r1, #9
    14e0:	0a4f      	lsrs	r7, r1, #9
    14e2:	2f00      	cmp	r7, #0
    14e4:	d100      	bne.n	14e8 <__aeabi_dadd+0x11c>
    14e6:	e0c8      	b.n	167a <__aeabi_dadd+0x2ae>
    14e8:	1c38      	adds	r0, r7, #0
    14ea:	f001 fb0d 	bl	2b08 <__clzsi2>
    14ee:	1c02      	adds	r2, r0, #0
    14f0:	3a08      	subs	r2, #8
    14f2:	2a1f      	cmp	r2, #31
    14f4:	dd00      	ble.n	14f8 <__aeabi_dadd+0x12c>
    14f6:	e0b5      	b.n	1664 <__aeabi_dadd+0x298>
    14f8:	2128      	movs	r1, #40	; 0x28
    14fa:	1a09      	subs	r1, r1, r0
    14fc:	1c20      	adds	r0, r4, #0
    14fe:	4097      	lsls	r7, r2
    1500:	40c8      	lsrs	r0, r1
    1502:	4307      	orrs	r7, r0
    1504:	4094      	lsls	r4, r2
    1506:	4295      	cmp	r5, r2
    1508:	dd00      	ble.n	150c <__aeabi_dadd+0x140>
    150a:	e0b2      	b.n	1672 <__aeabi_dadd+0x2a6>
    150c:	1b55      	subs	r5, r2, r5
    150e:	1c69      	adds	r1, r5, #1
    1510:	291f      	cmp	r1, #31
    1512:	dd00      	ble.n	1516 <__aeabi_dadd+0x14a>
    1514:	e0dc      	b.n	16d0 <__aeabi_dadd+0x304>
    1516:	221f      	movs	r2, #31
    1518:	1b55      	subs	r5, r2, r5
    151a:	1c3b      	adds	r3, r7, #0
    151c:	1c22      	adds	r2, r4, #0
    151e:	40ab      	lsls	r3, r5
    1520:	40ca      	lsrs	r2, r1
    1522:	40ac      	lsls	r4, r5
    1524:	1e65      	subs	r5, r4, #1
    1526:	41ac      	sbcs	r4, r5
    1528:	4313      	orrs	r3, r2
    152a:	40cf      	lsrs	r7, r1
    152c:	431c      	orrs	r4, r3
    152e:	1c39      	adds	r1, r7, #0
    1530:	2500      	movs	r5, #0
    1532:	e774      	b.n	141e <__aeabi_dadd+0x52>
    1534:	2380      	movs	r3, #128	; 0x80
    1536:	041b      	lsls	r3, r3, #16
    1538:	400b      	ands	r3, r1
    153a:	1c37      	adds	r7, r6, #0
    153c:	2b00      	cmp	r3, #0
    153e:	d000      	beq.n	1542 <__aeabi_dadd+0x176>
    1540:	e782      	b.n	1448 <__aeabi_dadd+0x7c>
    1542:	4b90      	ldr	r3, [pc, #576]	; (1784 <__aeabi_dadd+0x3b8>)
    1544:	0748      	lsls	r0, r1, #29
    1546:	08e4      	lsrs	r4, r4, #3
    1548:	4304      	orrs	r4, r0
    154a:	08c9      	lsrs	r1, r1, #3
    154c:	429d      	cmp	r5, r3
    154e:	d048      	beq.n	15e2 <__aeabi_dadd+0x216>
    1550:	0309      	lsls	r1, r1, #12
    1552:	0b0b      	lsrs	r3, r1, #12
    1554:	e784      	b.n	1460 <__aeabi_dadd+0x94>
    1556:	1aaa      	subs	r2, r5, r2
    1558:	4694      	mov	ip, r2
    155a:	2a00      	cmp	r2, #0
    155c:	dc00      	bgt.n	1560 <__aeabi_dadd+0x194>
    155e:	e098      	b.n	1692 <__aeabi_dadd+0x2c6>
    1560:	4650      	mov	r0, sl
    1562:	2800      	cmp	r0, #0
    1564:	d052      	beq.n	160c <__aeabi_dadd+0x240>
    1566:	4887      	ldr	r0, [pc, #540]	; (1784 <__aeabi_dadd+0x3b8>)
    1568:	4285      	cmp	r5, r0
    156a:	d100      	bne.n	156e <__aeabi_dadd+0x1a2>
    156c:	e757      	b.n	141e <__aeabi_dadd+0x52>
    156e:	2080      	movs	r0, #128	; 0x80
    1570:	0400      	lsls	r0, r0, #16
    1572:	4303      	orrs	r3, r0
    1574:	4662      	mov	r2, ip
    1576:	2a38      	cmp	r2, #56	; 0x38
    1578:	dd00      	ble.n	157c <__aeabi_dadd+0x1b0>
    157a:	e0fc      	b.n	1776 <__aeabi_dadd+0x3aa>
    157c:	2a1f      	cmp	r2, #31
    157e:	dd00      	ble.n	1582 <__aeabi_dadd+0x1b6>
    1580:	e14a      	b.n	1818 <__aeabi_dadd+0x44c>
    1582:	2220      	movs	r2, #32
    1584:	4660      	mov	r0, ip
    1586:	1a10      	subs	r0, r2, r0
    1588:	1c1a      	adds	r2, r3, #0
    158a:	4082      	lsls	r2, r0
    158c:	4682      	mov	sl, r0
    158e:	4691      	mov	r9, r2
    1590:	4658      	mov	r0, fp
    1592:	4662      	mov	r2, ip
    1594:	40d0      	lsrs	r0, r2
    1596:	464a      	mov	r2, r9
    1598:	4302      	orrs	r2, r0
    159a:	4690      	mov	r8, r2
    159c:	4658      	mov	r0, fp
    159e:	4652      	mov	r2, sl
    15a0:	4090      	lsls	r0, r2
    15a2:	1e42      	subs	r2, r0, #1
    15a4:	4190      	sbcs	r0, r2
    15a6:	4642      	mov	r2, r8
    15a8:	4302      	orrs	r2, r0
    15aa:	4660      	mov	r0, ip
    15ac:	40c3      	lsrs	r3, r0
    15ae:	1912      	adds	r2, r2, r4
    15b0:	42a2      	cmp	r2, r4
    15b2:	41a4      	sbcs	r4, r4
    15b4:	4264      	negs	r4, r4
    15b6:	1859      	adds	r1, r3, r1
    15b8:	1909      	adds	r1, r1, r4
    15ba:	1c14      	adds	r4, r2, #0
    15bc:	0208      	lsls	r0, r1, #8
    15be:	d400      	bmi.n	15c2 <__aeabi_dadd+0x1f6>
    15c0:	e72d      	b.n	141e <__aeabi_dadd+0x52>
    15c2:	4b70      	ldr	r3, [pc, #448]	; (1784 <__aeabi_dadd+0x3b8>)
    15c4:	3501      	adds	r5, #1
    15c6:	429d      	cmp	r5, r3
    15c8:	d100      	bne.n	15cc <__aeabi_dadd+0x200>
    15ca:	e122      	b.n	1812 <__aeabi_dadd+0x446>
    15cc:	4b6e      	ldr	r3, [pc, #440]	; (1788 <__aeabi_dadd+0x3bc>)
    15ce:	0860      	lsrs	r0, r4, #1
    15d0:	4019      	ands	r1, r3
    15d2:	2301      	movs	r3, #1
    15d4:	4023      	ands	r3, r4
    15d6:	1c1c      	adds	r4, r3, #0
    15d8:	4304      	orrs	r4, r0
    15da:	07cb      	lsls	r3, r1, #31
    15dc:	431c      	orrs	r4, r3
    15de:	0849      	lsrs	r1, r1, #1
    15e0:	e71d      	b.n	141e <__aeabi_dadd+0x52>
    15e2:	1c23      	adds	r3, r4, #0
    15e4:	430b      	orrs	r3, r1
    15e6:	d03a      	beq.n	165e <__aeabi_dadd+0x292>
    15e8:	2380      	movs	r3, #128	; 0x80
    15ea:	031b      	lsls	r3, r3, #12
    15ec:	430b      	orrs	r3, r1
    15ee:	031b      	lsls	r3, r3, #12
    15f0:	0b1b      	lsrs	r3, r3, #12
    15f2:	e735      	b.n	1460 <__aeabi_dadd+0x94>
    15f4:	3f01      	subs	r7, #1
    15f6:	2f00      	cmp	r7, #0
    15f8:	d165      	bne.n	16c6 <__aeabi_dadd+0x2fa>
    15fa:	4658      	mov	r0, fp
    15fc:	1a22      	subs	r2, r4, r0
    15fe:	4294      	cmp	r4, r2
    1600:	41a4      	sbcs	r4, r4
    1602:	4264      	negs	r4, r4
    1604:	1ac9      	subs	r1, r1, r3
    1606:	1b09      	subs	r1, r1, r4
    1608:	1c14      	adds	r4, r2, #0
    160a:	e766      	b.n	14da <__aeabi_dadd+0x10e>
    160c:	4658      	mov	r0, fp
    160e:	4318      	orrs	r0, r3
    1610:	d100      	bne.n	1614 <__aeabi_dadd+0x248>
    1612:	e704      	b.n	141e <__aeabi_dadd+0x52>
    1614:	2201      	movs	r2, #1
    1616:	4252      	negs	r2, r2
    1618:	4494      	add	ip, r2
    161a:	4660      	mov	r0, ip
    161c:	2800      	cmp	r0, #0
    161e:	d000      	beq.n	1622 <__aeabi_dadd+0x256>
    1620:	e0c5      	b.n	17ae <__aeabi_dadd+0x3e2>
    1622:	4658      	mov	r0, fp
    1624:	1902      	adds	r2, r0, r4
    1626:	e7c3      	b.n	15b0 <__aeabi_dadd+0x1e4>
    1628:	2f00      	cmp	r7, #0
    162a:	d173      	bne.n	1714 <__aeabi_dadd+0x348>
    162c:	1c68      	adds	r0, r5, #1
    162e:	0540      	lsls	r0, r0, #21
    1630:	0d40      	lsrs	r0, r0, #21
    1632:	2801      	cmp	r0, #1
    1634:	dc00      	bgt.n	1638 <__aeabi_dadd+0x26c>
    1636:	e0de      	b.n	17f6 <__aeabi_dadd+0x42a>
    1638:	465a      	mov	r2, fp
    163a:	1aa2      	subs	r2, r4, r2
    163c:	4294      	cmp	r4, r2
    163e:	41bf      	sbcs	r7, r7
    1640:	1ac8      	subs	r0, r1, r3
    1642:	427f      	negs	r7, r7
    1644:	1bc7      	subs	r7, r0, r7
    1646:	0238      	lsls	r0, r7, #8
    1648:	d400      	bmi.n	164c <__aeabi_dadd+0x280>
    164a:	e089      	b.n	1760 <__aeabi_dadd+0x394>
    164c:	465a      	mov	r2, fp
    164e:	1b14      	subs	r4, r2, r4
    1650:	45a3      	cmp	fp, r4
    1652:	4192      	sbcs	r2, r2
    1654:	1a59      	subs	r1, r3, r1
    1656:	4252      	negs	r2, r2
    1658:	1a8f      	subs	r7, r1, r2
    165a:	4666      	mov	r6, ip
    165c:	e741      	b.n	14e2 <__aeabi_dadd+0x116>
    165e:	2300      	movs	r3, #0
    1660:	2400      	movs	r4, #0
    1662:	e6fd      	b.n	1460 <__aeabi_dadd+0x94>
    1664:	1c27      	adds	r7, r4, #0
    1666:	3828      	subs	r0, #40	; 0x28
    1668:	4087      	lsls	r7, r0
    166a:	2400      	movs	r4, #0
    166c:	4295      	cmp	r5, r2
    166e:	dc00      	bgt.n	1672 <__aeabi_dadd+0x2a6>
    1670:	e74c      	b.n	150c <__aeabi_dadd+0x140>
    1672:	4945      	ldr	r1, [pc, #276]	; (1788 <__aeabi_dadd+0x3bc>)
    1674:	1aad      	subs	r5, r5, r2
    1676:	4039      	ands	r1, r7
    1678:	e6d1      	b.n	141e <__aeabi_dadd+0x52>
    167a:	1c20      	adds	r0, r4, #0
    167c:	f001 fa44 	bl	2b08 <__clzsi2>
    1680:	3020      	adds	r0, #32
    1682:	e734      	b.n	14ee <__aeabi_dadd+0x122>
    1684:	465a      	mov	r2, fp
    1686:	431a      	orrs	r2, r3
    1688:	1e53      	subs	r3, r2, #1
    168a:	419a      	sbcs	r2, r3
    168c:	b2d2      	uxtb	r2, r2
    168e:	2700      	movs	r7, #0
    1690:	e71c      	b.n	14cc <__aeabi_dadd+0x100>
    1692:	2a00      	cmp	r2, #0
    1694:	d000      	beq.n	1698 <__aeabi_dadd+0x2cc>
    1696:	e0dc      	b.n	1852 <__aeabi_dadd+0x486>
    1698:	1c68      	adds	r0, r5, #1
    169a:	0542      	lsls	r2, r0, #21
    169c:	0d52      	lsrs	r2, r2, #21
    169e:	2a01      	cmp	r2, #1
    16a0:	dc00      	bgt.n	16a4 <__aeabi_dadd+0x2d8>
    16a2:	e08d      	b.n	17c0 <__aeabi_dadd+0x3f4>
    16a4:	4d37      	ldr	r5, [pc, #220]	; (1784 <__aeabi_dadd+0x3b8>)
    16a6:	42a8      	cmp	r0, r5
    16a8:	d100      	bne.n	16ac <__aeabi_dadd+0x2e0>
    16aa:	e0f3      	b.n	1894 <__aeabi_dadd+0x4c8>
    16ac:	465d      	mov	r5, fp
    16ae:	192a      	adds	r2, r5, r4
    16b0:	42a2      	cmp	r2, r4
    16b2:	41a4      	sbcs	r4, r4
    16b4:	4264      	negs	r4, r4
    16b6:	1859      	adds	r1, r3, r1
    16b8:	1909      	adds	r1, r1, r4
    16ba:	07cc      	lsls	r4, r1, #31
    16bc:	0852      	lsrs	r2, r2, #1
    16be:	4314      	orrs	r4, r2
    16c0:	0849      	lsrs	r1, r1, #1
    16c2:	1c05      	adds	r5, r0, #0
    16c4:	e6ab      	b.n	141e <__aeabi_dadd+0x52>
    16c6:	482f      	ldr	r0, [pc, #188]	; (1784 <__aeabi_dadd+0x3b8>)
    16c8:	4285      	cmp	r5, r0
    16ca:	d000      	beq.n	16ce <__aeabi_dadd+0x302>
    16cc:	e6e6      	b.n	149c <__aeabi_dadd+0xd0>
    16ce:	e6a6      	b.n	141e <__aeabi_dadd+0x52>
    16d0:	1c2b      	adds	r3, r5, #0
    16d2:	3b1f      	subs	r3, #31
    16d4:	1c3a      	adds	r2, r7, #0
    16d6:	40da      	lsrs	r2, r3
    16d8:	1c13      	adds	r3, r2, #0
    16da:	2920      	cmp	r1, #32
    16dc:	d06c      	beq.n	17b8 <__aeabi_dadd+0x3ec>
    16de:	223f      	movs	r2, #63	; 0x3f
    16e0:	1b55      	subs	r5, r2, r5
    16e2:	40af      	lsls	r7, r5
    16e4:	433c      	orrs	r4, r7
    16e6:	1e60      	subs	r0, r4, #1
    16e8:	4184      	sbcs	r4, r0
    16ea:	431c      	orrs	r4, r3
    16ec:	2100      	movs	r1, #0
    16ee:	2500      	movs	r5, #0
    16f0:	e695      	b.n	141e <__aeabi_dadd+0x52>
    16f2:	1c38      	adds	r0, r7, #0
    16f4:	3820      	subs	r0, #32
    16f6:	1c1a      	adds	r2, r3, #0
    16f8:	40c2      	lsrs	r2, r0
    16fa:	1c10      	adds	r0, r2, #0
    16fc:	2f20      	cmp	r7, #32
    16fe:	d05d      	beq.n	17bc <__aeabi_dadd+0x3f0>
    1700:	2240      	movs	r2, #64	; 0x40
    1702:	1bd7      	subs	r7, r2, r7
    1704:	40bb      	lsls	r3, r7
    1706:	465a      	mov	r2, fp
    1708:	431a      	orrs	r2, r3
    170a:	1e53      	subs	r3, r2, #1
    170c:	419a      	sbcs	r2, r3
    170e:	4302      	orrs	r2, r0
    1710:	2700      	movs	r7, #0
    1712:	e6db      	b.n	14cc <__aeabi_dadd+0x100>
    1714:	2d00      	cmp	r5, #0
    1716:	d03b      	beq.n	1790 <__aeabi_dadd+0x3c4>
    1718:	4d1a      	ldr	r5, [pc, #104]	; (1784 <__aeabi_dadd+0x3b8>)
    171a:	45aa      	cmp	sl, r5
    171c:	d100      	bne.n	1720 <__aeabi_dadd+0x354>
    171e:	e093      	b.n	1848 <__aeabi_dadd+0x47c>
    1720:	2580      	movs	r5, #128	; 0x80
    1722:	042d      	lsls	r5, r5, #16
    1724:	427f      	negs	r7, r7
    1726:	4329      	orrs	r1, r5
    1728:	2f38      	cmp	r7, #56	; 0x38
    172a:	dd00      	ble.n	172e <__aeabi_dadd+0x362>
    172c:	e0ac      	b.n	1888 <__aeabi_dadd+0x4bc>
    172e:	2f1f      	cmp	r7, #31
    1730:	dd00      	ble.n	1734 <__aeabi_dadd+0x368>
    1732:	e129      	b.n	1988 <__aeabi_dadd+0x5bc>
    1734:	2520      	movs	r5, #32
    1736:	1bed      	subs	r5, r5, r7
    1738:	1c08      	adds	r0, r1, #0
    173a:	1c26      	adds	r6, r4, #0
    173c:	40a8      	lsls	r0, r5
    173e:	40fe      	lsrs	r6, r7
    1740:	40ac      	lsls	r4, r5
    1742:	4306      	orrs	r6, r0
    1744:	1e65      	subs	r5, r4, #1
    1746:	41ac      	sbcs	r4, r5
    1748:	4334      	orrs	r4, r6
    174a:	40f9      	lsrs	r1, r7
    174c:	465d      	mov	r5, fp
    174e:	1b2c      	subs	r4, r5, r4
    1750:	45a3      	cmp	fp, r4
    1752:	4192      	sbcs	r2, r2
    1754:	1a5b      	subs	r3, r3, r1
    1756:	4252      	negs	r2, r2
    1758:	1a99      	subs	r1, r3, r2
    175a:	4655      	mov	r5, sl
    175c:	4666      	mov	r6, ip
    175e:	e6bc      	b.n	14da <__aeabi_dadd+0x10e>
    1760:	1c13      	adds	r3, r2, #0
    1762:	433b      	orrs	r3, r7
    1764:	1c14      	adds	r4, r2, #0
    1766:	2b00      	cmp	r3, #0
    1768:	d000      	beq.n	176c <__aeabi_dadd+0x3a0>
    176a:	e6ba      	b.n	14e2 <__aeabi_dadd+0x116>
    176c:	2700      	movs	r7, #0
    176e:	2100      	movs	r1, #0
    1770:	2500      	movs	r5, #0
    1772:	2400      	movs	r4, #0
    1774:	e6e5      	b.n	1542 <__aeabi_dadd+0x176>
    1776:	465a      	mov	r2, fp
    1778:	431a      	orrs	r2, r3
    177a:	1e53      	subs	r3, r2, #1
    177c:	419a      	sbcs	r2, r3
    177e:	b2d2      	uxtb	r2, r2
    1780:	2300      	movs	r3, #0
    1782:	e714      	b.n	15ae <__aeabi_dadd+0x1e2>
    1784:	000007ff 	.word	0x000007ff
    1788:	ff7fffff 	.word	0xff7fffff
    178c:	800fffff 	.word	0x800fffff
    1790:	1c0d      	adds	r5, r1, #0
    1792:	4325      	orrs	r5, r4
    1794:	d058      	beq.n	1848 <__aeabi_dadd+0x47c>
    1796:	43ff      	mvns	r7, r7
    1798:	2f00      	cmp	r7, #0
    179a:	d151      	bne.n	1840 <__aeabi_dadd+0x474>
    179c:	1b04      	subs	r4, r0, r4
    179e:	45a3      	cmp	fp, r4
    17a0:	4192      	sbcs	r2, r2
    17a2:	1a59      	subs	r1, r3, r1
    17a4:	4252      	negs	r2, r2
    17a6:	1a89      	subs	r1, r1, r2
    17a8:	4655      	mov	r5, sl
    17aa:	4666      	mov	r6, ip
    17ac:	e695      	b.n	14da <__aeabi_dadd+0x10e>
    17ae:	4896      	ldr	r0, [pc, #600]	; (1a08 <__aeabi_dadd+0x63c>)
    17b0:	4285      	cmp	r5, r0
    17b2:	d000      	beq.n	17b6 <__aeabi_dadd+0x3ea>
    17b4:	e6de      	b.n	1574 <__aeabi_dadd+0x1a8>
    17b6:	e632      	b.n	141e <__aeabi_dadd+0x52>
    17b8:	2700      	movs	r7, #0
    17ba:	e793      	b.n	16e4 <__aeabi_dadd+0x318>
    17bc:	2300      	movs	r3, #0
    17be:	e7a2      	b.n	1706 <__aeabi_dadd+0x33a>
    17c0:	1c08      	adds	r0, r1, #0
    17c2:	4320      	orrs	r0, r4
    17c4:	2d00      	cmp	r5, #0
    17c6:	d000      	beq.n	17ca <__aeabi_dadd+0x3fe>
    17c8:	e0c4      	b.n	1954 <__aeabi_dadd+0x588>
    17ca:	2800      	cmp	r0, #0
    17cc:	d100      	bne.n	17d0 <__aeabi_dadd+0x404>
    17ce:	e0f7      	b.n	19c0 <__aeabi_dadd+0x5f4>
    17d0:	4658      	mov	r0, fp
    17d2:	4318      	orrs	r0, r3
    17d4:	d100      	bne.n	17d8 <__aeabi_dadd+0x40c>
    17d6:	e622      	b.n	141e <__aeabi_dadd+0x52>
    17d8:	4658      	mov	r0, fp
    17da:	1902      	adds	r2, r0, r4
    17dc:	42a2      	cmp	r2, r4
    17de:	41a4      	sbcs	r4, r4
    17e0:	4264      	negs	r4, r4
    17e2:	1859      	adds	r1, r3, r1
    17e4:	1909      	adds	r1, r1, r4
    17e6:	1c14      	adds	r4, r2, #0
    17e8:	020a      	lsls	r2, r1, #8
    17ea:	d400      	bmi.n	17ee <__aeabi_dadd+0x422>
    17ec:	e617      	b.n	141e <__aeabi_dadd+0x52>
    17ee:	4b87      	ldr	r3, [pc, #540]	; (1a0c <__aeabi_dadd+0x640>)
    17f0:	2501      	movs	r5, #1
    17f2:	4019      	ands	r1, r3
    17f4:	e613      	b.n	141e <__aeabi_dadd+0x52>
    17f6:	1c08      	adds	r0, r1, #0
    17f8:	4320      	orrs	r0, r4
    17fa:	2d00      	cmp	r5, #0
    17fc:	d139      	bne.n	1872 <__aeabi_dadd+0x4a6>
    17fe:	2800      	cmp	r0, #0
    1800:	d171      	bne.n	18e6 <__aeabi_dadd+0x51a>
    1802:	4659      	mov	r1, fp
    1804:	4319      	orrs	r1, r3
    1806:	d003      	beq.n	1810 <__aeabi_dadd+0x444>
    1808:	1c19      	adds	r1, r3, #0
    180a:	465c      	mov	r4, fp
    180c:	4666      	mov	r6, ip
    180e:	e606      	b.n	141e <__aeabi_dadd+0x52>
    1810:	2700      	movs	r7, #0
    1812:	2100      	movs	r1, #0
    1814:	2400      	movs	r4, #0
    1816:	e694      	b.n	1542 <__aeabi_dadd+0x176>
    1818:	4660      	mov	r0, ip
    181a:	3820      	subs	r0, #32
    181c:	1c1a      	adds	r2, r3, #0
    181e:	40c2      	lsrs	r2, r0
    1820:	4660      	mov	r0, ip
    1822:	4691      	mov	r9, r2
    1824:	2820      	cmp	r0, #32
    1826:	d100      	bne.n	182a <__aeabi_dadd+0x45e>
    1828:	e0ac      	b.n	1984 <__aeabi_dadd+0x5b8>
    182a:	2240      	movs	r2, #64	; 0x40
    182c:	1a12      	subs	r2, r2, r0
    182e:	4093      	lsls	r3, r2
    1830:	465a      	mov	r2, fp
    1832:	431a      	orrs	r2, r3
    1834:	1e53      	subs	r3, r2, #1
    1836:	419a      	sbcs	r2, r3
    1838:	464b      	mov	r3, r9
    183a:	431a      	orrs	r2, r3
    183c:	2300      	movs	r3, #0
    183e:	e6b6      	b.n	15ae <__aeabi_dadd+0x1e2>
    1840:	4d71      	ldr	r5, [pc, #452]	; (1a08 <__aeabi_dadd+0x63c>)
    1842:	45aa      	cmp	sl, r5
    1844:	d000      	beq.n	1848 <__aeabi_dadd+0x47c>
    1846:	e76f      	b.n	1728 <__aeabi_dadd+0x35c>
    1848:	1c19      	adds	r1, r3, #0
    184a:	465c      	mov	r4, fp
    184c:	4655      	mov	r5, sl
    184e:	4666      	mov	r6, ip
    1850:	e5e5      	b.n	141e <__aeabi_dadd+0x52>
    1852:	2d00      	cmp	r5, #0
    1854:	d122      	bne.n	189c <__aeabi_dadd+0x4d0>
    1856:	1c0d      	adds	r5, r1, #0
    1858:	4325      	orrs	r5, r4
    185a:	d077      	beq.n	194c <__aeabi_dadd+0x580>
    185c:	43d5      	mvns	r5, r2
    185e:	2d00      	cmp	r5, #0
    1860:	d171      	bne.n	1946 <__aeabi_dadd+0x57a>
    1862:	445c      	add	r4, fp
    1864:	455c      	cmp	r4, fp
    1866:	4192      	sbcs	r2, r2
    1868:	1859      	adds	r1, r3, r1
    186a:	4252      	negs	r2, r2
    186c:	1889      	adds	r1, r1, r2
    186e:	4655      	mov	r5, sl
    1870:	e6a4      	b.n	15bc <__aeabi_dadd+0x1f0>
    1872:	2800      	cmp	r0, #0
    1874:	d14d      	bne.n	1912 <__aeabi_dadd+0x546>
    1876:	4659      	mov	r1, fp
    1878:	4319      	orrs	r1, r3
    187a:	d100      	bne.n	187e <__aeabi_dadd+0x4b2>
    187c:	e094      	b.n	19a8 <__aeabi_dadd+0x5dc>
    187e:	1c19      	adds	r1, r3, #0
    1880:	465c      	mov	r4, fp
    1882:	4666      	mov	r6, ip
    1884:	4d60      	ldr	r5, [pc, #384]	; (1a08 <__aeabi_dadd+0x63c>)
    1886:	e5ca      	b.n	141e <__aeabi_dadd+0x52>
    1888:	430c      	orrs	r4, r1
    188a:	1e61      	subs	r1, r4, #1
    188c:	418c      	sbcs	r4, r1
    188e:	b2e4      	uxtb	r4, r4
    1890:	2100      	movs	r1, #0
    1892:	e75b      	b.n	174c <__aeabi_dadd+0x380>
    1894:	1c05      	adds	r5, r0, #0
    1896:	2100      	movs	r1, #0
    1898:	2400      	movs	r4, #0
    189a:	e652      	b.n	1542 <__aeabi_dadd+0x176>
    189c:	4d5a      	ldr	r5, [pc, #360]	; (1a08 <__aeabi_dadd+0x63c>)
    189e:	45aa      	cmp	sl, r5
    18a0:	d054      	beq.n	194c <__aeabi_dadd+0x580>
    18a2:	4255      	negs	r5, r2
    18a4:	2280      	movs	r2, #128	; 0x80
    18a6:	0410      	lsls	r0, r2, #16
    18a8:	4301      	orrs	r1, r0
    18aa:	2d38      	cmp	r5, #56	; 0x38
    18ac:	dd00      	ble.n	18b0 <__aeabi_dadd+0x4e4>
    18ae:	e081      	b.n	19b4 <__aeabi_dadd+0x5e8>
    18b0:	2d1f      	cmp	r5, #31
    18b2:	dd00      	ble.n	18b6 <__aeabi_dadd+0x4ea>
    18b4:	e092      	b.n	19dc <__aeabi_dadd+0x610>
    18b6:	2220      	movs	r2, #32
    18b8:	1b50      	subs	r0, r2, r5
    18ba:	1c0a      	adds	r2, r1, #0
    18bc:	4684      	mov	ip, r0
    18be:	4082      	lsls	r2, r0
    18c0:	1c20      	adds	r0, r4, #0
    18c2:	40e8      	lsrs	r0, r5
    18c4:	4302      	orrs	r2, r0
    18c6:	4690      	mov	r8, r2
    18c8:	4662      	mov	r2, ip
    18ca:	4094      	lsls	r4, r2
    18cc:	1e60      	subs	r0, r4, #1
    18ce:	4184      	sbcs	r4, r0
    18d0:	4642      	mov	r2, r8
    18d2:	4314      	orrs	r4, r2
    18d4:	40e9      	lsrs	r1, r5
    18d6:	445c      	add	r4, fp
    18d8:	455c      	cmp	r4, fp
    18da:	4192      	sbcs	r2, r2
    18dc:	18cb      	adds	r3, r1, r3
    18de:	4252      	negs	r2, r2
    18e0:	1899      	adds	r1, r3, r2
    18e2:	4655      	mov	r5, sl
    18e4:	e66a      	b.n	15bc <__aeabi_dadd+0x1f0>
    18e6:	4658      	mov	r0, fp
    18e8:	4318      	orrs	r0, r3
    18ea:	d100      	bne.n	18ee <__aeabi_dadd+0x522>
    18ec:	e597      	b.n	141e <__aeabi_dadd+0x52>
    18ee:	4658      	mov	r0, fp
    18f0:	1a27      	subs	r7, r4, r0
    18f2:	42bc      	cmp	r4, r7
    18f4:	4192      	sbcs	r2, r2
    18f6:	1ac8      	subs	r0, r1, r3
    18f8:	4252      	negs	r2, r2
    18fa:	1a80      	subs	r0, r0, r2
    18fc:	0202      	lsls	r2, r0, #8
    18fe:	d566      	bpl.n	19ce <__aeabi_dadd+0x602>
    1900:	4658      	mov	r0, fp
    1902:	1b04      	subs	r4, r0, r4
    1904:	45a3      	cmp	fp, r4
    1906:	4192      	sbcs	r2, r2
    1908:	1a59      	subs	r1, r3, r1
    190a:	4252      	negs	r2, r2
    190c:	1a89      	subs	r1, r1, r2
    190e:	4666      	mov	r6, ip
    1910:	e585      	b.n	141e <__aeabi_dadd+0x52>
    1912:	4658      	mov	r0, fp
    1914:	4318      	orrs	r0, r3
    1916:	d033      	beq.n	1980 <__aeabi_dadd+0x5b4>
    1918:	0748      	lsls	r0, r1, #29
    191a:	08e4      	lsrs	r4, r4, #3
    191c:	4304      	orrs	r4, r0
    191e:	2080      	movs	r0, #128	; 0x80
    1920:	08c9      	lsrs	r1, r1, #3
    1922:	0300      	lsls	r0, r0, #12
    1924:	4201      	tst	r1, r0
    1926:	d008      	beq.n	193a <__aeabi_dadd+0x56e>
    1928:	08dd      	lsrs	r5, r3, #3
    192a:	4205      	tst	r5, r0
    192c:	d105      	bne.n	193a <__aeabi_dadd+0x56e>
    192e:	4659      	mov	r1, fp
    1930:	08ca      	lsrs	r2, r1, #3
    1932:	075c      	lsls	r4, r3, #29
    1934:	4314      	orrs	r4, r2
    1936:	1c29      	adds	r1, r5, #0
    1938:	4666      	mov	r6, ip
    193a:	0f63      	lsrs	r3, r4, #29
    193c:	00c9      	lsls	r1, r1, #3
    193e:	4319      	orrs	r1, r3
    1940:	00e4      	lsls	r4, r4, #3
    1942:	4d31      	ldr	r5, [pc, #196]	; (1a08 <__aeabi_dadd+0x63c>)
    1944:	e56b      	b.n	141e <__aeabi_dadd+0x52>
    1946:	4a30      	ldr	r2, [pc, #192]	; (1a08 <__aeabi_dadd+0x63c>)
    1948:	4592      	cmp	sl, r2
    194a:	d1ae      	bne.n	18aa <__aeabi_dadd+0x4de>
    194c:	1c19      	adds	r1, r3, #0
    194e:	465c      	mov	r4, fp
    1950:	4655      	mov	r5, sl
    1952:	e564      	b.n	141e <__aeabi_dadd+0x52>
    1954:	2800      	cmp	r0, #0
    1956:	d036      	beq.n	19c6 <__aeabi_dadd+0x5fa>
    1958:	4658      	mov	r0, fp
    195a:	4318      	orrs	r0, r3
    195c:	d010      	beq.n	1980 <__aeabi_dadd+0x5b4>
    195e:	2580      	movs	r5, #128	; 0x80
    1960:	0748      	lsls	r0, r1, #29
    1962:	08e4      	lsrs	r4, r4, #3
    1964:	08c9      	lsrs	r1, r1, #3
    1966:	032d      	lsls	r5, r5, #12
    1968:	4304      	orrs	r4, r0
    196a:	4229      	tst	r1, r5
    196c:	d0e5      	beq.n	193a <__aeabi_dadd+0x56e>
    196e:	08d8      	lsrs	r0, r3, #3
    1970:	4228      	tst	r0, r5
    1972:	d1e2      	bne.n	193a <__aeabi_dadd+0x56e>
    1974:	465d      	mov	r5, fp
    1976:	08ea      	lsrs	r2, r5, #3
    1978:	075c      	lsls	r4, r3, #29
    197a:	4314      	orrs	r4, r2
    197c:	1c01      	adds	r1, r0, #0
    197e:	e7dc      	b.n	193a <__aeabi_dadd+0x56e>
    1980:	4d21      	ldr	r5, [pc, #132]	; (1a08 <__aeabi_dadd+0x63c>)
    1982:	e54c      	b.n	141e <__aeabi_dadd+0x52>
    1984:	2300      	movs	r3, #0
    1986:	e753      	b.n	1830 <__aeabi_dadd+0x464>
    1988:	1c3d      	adds	r5, r7, #0
    198a:	3d20      	subs	r5, #32
    198c:	1c0a      	adds	r2, r1, #0
    198e:	40ea      	lsrs	r2, r5
    1990:	1c15      	adds	r5, r2, #0
    1992:	2f20      	cmp	r7, #32
    1994:	d034      	beq.n	1a00 <__aeabi_dadd+0x634>
    1996:	2640      	movs	r6, #64	; 0x40
    1998:	1bf7      	subs	r7, r6, r7
    199a:	40b9      	lsls	r1, r7
    199c:	430c      	orrs	r4, r1
    199e:	1e61      	subs	r1, r4, #1
    19a0:	418c      	sbcs	r4, r1
    19a2:	432c      	orrs	r4, r5
    19a4:	2100      	movs	r1, #0
    19a6:	e6d1      	b.n	174c <__aeabi_dadd+0x380>
    19a8:	2180      	movs	r1, #128	; 0x80
    19aa:	2700      	movs	r7, #0
    19ac:	03c9      	lsls	r1, r1, #15
    19ae:	4d16      	ldr	r5, [pc, #88]	; (1a08 <__aeabi_dadd+0x63c>)
    19b0:	2400      	movs	r4, #0
    19b2:	e5c6      	b.n	1542 <__aeabi_dadd+0x176>
    19b4:	430c      	orrs	r4, r1
    19b6:	1e61      	subs	r1, r4, #1
    19b8:	418c      	sbcs	r4, r1
    19ba:	b2e4      	uxtb	r4, r4
    19bc:	2100      	movs	r1, #0
    19be:	e78a      	b.n	18d6 <__aeabi_dadd+0x50a>
    19c0:	1c19      	adds	r1, r3, #0
    19c2:	465c      	mov	r4, fp
    19c4:	e52b      	b.n	141e <__aeabi_dadd+0x52>
    19c6:	1c19      	adds	r1, r3, #0
    19c8:	465c      	mov	r4, fp
    19ca:	4d0f      	ldr	r5, [pc, #60]	; (1a08 <__aeabi_dadd+0x63c>)
    19cc:	e527      	b.n	141e <__aeabi_dadd+0x52>
    19ce:	1c03      	adds	r3, r0, #0
    19d0:	433b      	orrs	r3, r7
    19d2:	d100      	bne.n	19d6 <__aeabi_dadd+0x60a>
    19d4:	e71c      	b.n	1810 <__aeabi_dadd+0x444>
    19d6:	1c01      	adds	r1, r0, #0
    19d8:	1c3c      	adds	r4, r7, #0
    19da:	e520      	b.n	141e <__aeabi_dadd+0x52>
    19dc:	2020      	movs	r0, #32
    19de:	4240      	negs	r0, r0
    19e0:	1940      	adds	r0, r0, r5
    19e2:	1c0a      	adds	r2, r1, #0
    19e4:	40c2      	lsrs	r2, r0
    19e6:	4690      	mov	r8, r2
    19e8:	2d20      	cmp	r5, #32
    19ea:	d00b      	beq.n	1a04 <__aeabi_dadd+0x638>
    19ec:	2040      	movs	r0, #64	; 0x40
    19ee:	1b45      	subs	r5, r0, r5
    19f0:	40a9      	lsls	r1, r5
    19f2:	430c      	orrs	r4, r1
    19f4:	1e61      	subs	r1, r4, #1
    19f6:	418c      	sbcs	r4, r1
    19f8:	4645      	mov	r5, r8
    19fa:	432c      	orrs	r4, r5
    19fc:	2100      	movs	r1, #0
    19fe:	e76a      	b.n	18d6 <__aeabi_dadd+0x50a>
    1a00:	2100      	movs	r1, #0
    1a02:	e7cb      	b.n	199c <__aeabi_dadd+0x5d0>
    1a04:	2100      	movs	r1, #0
    1a06:	e7f4      	b.n	19f2 <__aeabi_dadd+0x626>
    1a08:	000007ff 	.word	0x000007ff
    1a0c:	ff7fffff 	.word	0xff7fffff

00001a10 <__aeabi_ddiv>:
__aeabi_ddiv():
    1a10:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a12:	4656      	mov	r6, sl
    1a14:	4644      	mov	r4, r8
    1a16:	465f      	mov	r7, fp
    1a18:	464d      	mov	r5, r9
    1a1a:	b4f0      	push	{r4, r5, r6, r7}
    1a1c:	1c1f      	adds	r7, r3, #0
    1a1e:	030b      	lsls	r3, r1, #12
    1a20:	0b1b      	lsrs	r3, r3, #12
    1a22:	4698      	mov	r8, r3
    1a24:	004b      	lsls	r3, r1, #1
    1a26:	b087      	sub	sp, #28
    1a28:	1c04      	adds	r4, r0, #0
    1a2a:	4681      	mov	r9, r0
    1a2c:	0d5b      	lsrs	r3, r3, #21
    1a2e:	0fc8      	lsrs	r0, r1, #31
    1a30:	1c16      	adds	r6, r2, #0
    1a32:	469a      	mov	sl, r3
    1a34:	9000      	str	r0, [sp, #0]
    1a36:	2b00      	cmp	r3, #0
    1a38:	d051      	beq.n	1ade <__aeabi_ddiv+0xce>
    1a3a:	4b6a      	ldr	r3, [pc, #424]	; (1be4 <__aeabi_ddiv+0x1d4>)
    1a3c:	459a      	cmp	sl, r3
    1a3e:	d031      	beq.n	1aa4 <__aeabi_ddiv+0x94>
    1a40:	2280      	movs	r2, #128	; 0x80
    1a42:	4641      	mov	r1, r8
    1a44:	0352      	lsls	r2, r2, #13
    1a46:	430a      	orrs	r2, r1
    1a48:	0f63      	lsrs	r3, r4, #29
    1a4a:	00d2      	lsls	r2, r2, #3
    1a4c:	431a      	orrs	r2, r3
    1a4e:	4b66      	ldr	r3, [pc, #408]	; (1be8 <__aeabi_ddiv+0x1d8>)
    1a50:	4690      	mov	r8, r2
    1a52:	2500      	movs	r5, #0
    1a54:	00e2      	lsls	r2, r4, #3
    1a56:	4691      	mov	r9, r2
    1a58:	449a      	add	sl, r3
    1a5a:	2400      	movs	r4, #0
    1a5c:	9502      	str	r5, [sp, #8]
    1a5e:	033b      	lsls	r3, r7, #12
    1a60:	0b1b      	lsrs	r3, r3, #12
    1a62:	469b      	mov	fp, r3
    1a64:	0ffd      	lsrs	r5, r7, #31
    1a66:	007b      	lsls	r3, r7, #1
    1a68:	1c31      	adds	r1, r6, #0
    1a6a:	0d5b      	lsrs	r3, r3, #21
    1a6c:	9501      	str	r5, [sp, #4]
    1a6e:	d060      	beq.n	1b32 <__aeabi_ddiv+0x122>
    1a70:	4a5c      	ldr	r2, [pc, #368]	; (1be4 <__aeabi_ddiv+0x1d4>)
    1a72:	4293      	cmp	r3, r2
    1a74:	d054      	beq.n	1b20 <__aeabi_ddiv+0x110>
    1a76:	2180      	movs	r1, #128	; 0x80
    1a78:	4658      	mov	r0, fp
    1a7a:	0349      	lsls	r1, r1, #13
    1a7c:	4301      	orrs	r1, r0
    1a7e:	0f72      	lsrs	r2, r6, #29
    1a80:	00c9      	lsls	r1, r1, #3
    1a82:	4311      	orrs	r1, r2
    1a84:	4a58      	ldr	r2, [pc, #352]	; (1be8 <__aeabi_ddiv+0x1d8>)
    1a86:	468b      	mov	fp, r1
    1a88:	189b      	adds	r3, r3, r2
    1a8a:	00f1      	lsls	r1, r6, #3
    1a8c:	2000      	movs	r0, #0
    1a8e:	9a00      	ldr	r2, [sp, #0]
    1a90:	4304      	orrs	r4, r0
    1a92:	406a      	eors	r2, r5
    1a94:	9203      	str	r2, [sp, #12]
    1a96:	2c0f      	cmp	r4, #15
    1a98:	d900      	bls.n	1a9c <__aeabi_ddiv+0x8c>
    1a9a:	e0ad      	b.n	1bf8 <__aeabi_ddiv+0x1e8>
    1a9c:	4e53      	ldr	r6, [pc, #332]	; (1bec <__aeabi_ddiv+0x1dc>)
    1a9e:	00a4      	lsls	r4, r4, #2
    1aa0:	5934      	ldr	r4, [r6, r4]
    1aa2:	46a7      	mov	pc, r4
    1aa4:	4640      	mov	r0, r8
    1aa6:	4304      	orrs	r4, r0
    1aa8:	d16e      	bne.n	1b88 <__aeabi_ddiv+0x178>
    1aaa:	2100      	movs	r1, #0
    1aac:	2502      	movs	r5, #2
    1aae:	2408      	movs	r4, #8
    1ab0:	4688      	mov	r8, r1
    1ab2:	4689      	mov	r9, r1
    1ab4:	9502      	str	r5, [sp, #8]
    1ab6:	e7d2      	b.n	1a5e <__aeabi_ddiv+0x4e>
    1ab8:	9c00      	ldr	r4, [sp, #0]
    1aba:	9802      	ldr	r0, [sp, #8]
    1abc:	46c3      	mov	fp, r8
    1abe:	4649      	mov	r1, r9
    1ac0:	9401      	str	r4, [sp, #4]
    1ac2:	2802      	cmp	r0, #2
    1ac4:	d064      	beq.n	1b90 <__aeabi_ddiv+0x180>
    1ac6:	2803      	cmp	r0, #3
    1ac8:	d100      	bne.n	1acc <__aeabi_ddiv+0xbc>
    1aca:	e2ab      	b.n	2024 <__aeabi_ddiv+0x614>
    1acc:	2801      	cmp	r0, #1
    1ace:	d000      	beq.n	1ad2 <__aeabi_ddiv+0xc2>
    1ad0:	e238      	b.n	1f44 <__aeabi_ddiv+0x534>
    1ad2:	9a01      	ldr	r2, [sp, #4]
    1ad4:	2400      	movs	r4, #0
    1ad6:	4002      	ands	r2, r0
    1ad8:	2500      	movs	r5, #0
    1ada:	46a1      	mov	r9, r4
    1adc:	e060      	b.n	1ba0 <__aeabi_ddiv+0x190>
    1ade:	4643      	mov	r3, r8
    1ae0:	4323      	orrs	r3, r4
    1ae2:	d04a      	beq.n	1b7a <__aeabi_ddiv+0x16a>
    1ae4:	4640      	mov	r0, r8
    1ae6:	2800      	cmp	r0, #0
    1ae8:	d100      	bne.n	1aec <__aeabi_ddiv+0xdc>
    1aea:	e1c0      	b.n	1e6e <__aeabi_ddiv+0x45e>
    1aec:	f001 f80c 	bl	2b08 <__clzsi2>
    1af0:	1e03      	subs	r3, r0, #0
    1af2:	2b27      	cmp	r3, #39	; 0x27
    1af4:	dd00      	ble.n	1af8 <__aeabi_ddiv+0xe8>
    1af6:	e1b3      	b.n	1e60 <__aeabi_ddiv+0x450>
    1af8:	2128      	movs	r1, #40	; 0x28
    1afa:	1a0d      	subs	r5, r1, r0
    1afc:	1c21      	adds	r1, r4, #0
    1afe:	3b08      	subs	r3, #8
    1b00:	4642      	mov	r2, r8
    1b02:	40e9      	lsrs	r1, r5
    1b04:	409a      	lsls	r2, r3
    1b06:	1c0d      	adds	r5, r1, #0
    1b08:	4315      	orrs	r5, r2
    1b0a:	1c22      	adds	r2, r4, #0
    1b0c:	409a      	lsls	r2, r3
    1b0e:	46a8      	mov	r8, r5
    1b10:	4691      	mov	r9, r2
    1b12:	4b37      	ldr	r3, [pc, #220]	; (1bf0 <__aeabi_ddiv+0x1e0>)
    1b14:	2500      	movs	r5, #0
    1b16:	1a1b      	subs	r3, r3, r0
    1b18:	469a      	mov	sl, r3
    1b1a:	2400      	movs	r4, #0
    1b1c:	9502      	str	r5, [sp, #8]
    1b1e:	e79e      	b.n	1a5e <__aeabi_ddiv+0x4e>
    1b20:	465a      	mov	r2, fp
    1b22:	4316      	orrs	r6, r2
    1b24:	2003      	movs	r0, #3
    1b26:	2e00      	cmp	r6, #0
    1b28:	d1b1      	bne.n	1a8e <__aeabi_ddiv+0x7e>
    1b2a:	46b3      	mov	fp, r6
    1b2c:	2100      	movs	r1, #0
    1b2e:	2002      	movs	r0, #2
    1b30:	e7ad      	b.n	1a8e <__aeabi_ddiv+0x7e>
    1b32:	465a      	mov	r2, fp
    1b34:	4332      	orrs	r2, r6
    1b36:	d01b      	beq.n	1b70 <__aeabi_ddiv+0x160>
    1b38:	465b      	mov	r3, fp
    1b3a:	2b00      	cmp	r3, #0
    1b3c:	d100      	bne.n	1b40 <__aeabi_ddiv+0x130>
    1b3e:	e18a      	b.n	1e56 <__aeabi_ddiv+0x446>
    1b40:	4658      	mov	r0, fp
    1b42:	f000 ffe1 	bl	2b08 <__clzsi2>
    1b46:	2827      	cmp	r0, #39	; 0x27
    1b48:	dd00      	ble.n	1b4c <__aeabi_ddiv+0x13c>
    1b4a:	e17d      	b.n	1e48 <__aeabi_ddiv+0x438>
    1b4c:	2228      	movs	r2, #40	; 0x28
    1b4e:	1a17      	subs	r7, r2, r0
    1b50:	1c01      	adds	r1, r0, #0
    1b52:	1c32      	adds	r2, r6, #0
    1b54:	3908      	subs	r1, #8
    1b56:	465b      	mov	r3, fp
    1b58:	40fa      	lsrs	r2, r7
    1b5a:	408b      	lsls	r3, r1
    1b5c:	1c17      	adds	r7, r2, #0
    1b5e:	431f      	orrs	r7, r3
    1b60:	1c33      	adds	r3, r6, #0
    1b62:	408b      	lsls	r3, r1
    1b64:	46bb      	mov	fp, r7
    1b66:	1c19      	adds	r1, r3, #0
    1b68:	4b21      	ldr	r3, [pc, #132]	; (1bf0 <__aeabi_ddiv+0x1e0>)
    1b6a:	1a1b      	subs	r3, r3, r0
    1b6c:	2000      	movs	r0, #0
    1b6e:	e78e      	b.n	1a8e <__aeabi_ddiv+0x7e>
    1b70:	2700      	movs	r7, #0
    1b72:	46bb      	mov	fp, r7
    1b74:	2100      	movs	r1, #0
    1b76:	2001      	movs	r0, #1
    1b78:	e789      	b.n	1a8e <__aeabi_ddiv+0x7e>
    1b7a:	2000      	movs	r0, #0
    1b7c:	2501      	movs	r5, #1
    1b7e:	2404      	movs	r4, #4
    1b80:	4680      	mov	r8, r0
    1b82:	4681      	mov	r9, r0
    1b84:	9502      	str	r5, [sp, #8]
    1b86:	e76a      	b.n	1a5e <__aeabi_ddiv+0x4e>
    1b88:	2503      	movs	r5, #3
    1b8a:	240c      	movs	r4, #12
    1b8c:	9502      	str	r5, [sp, #8]
    1b8e:	e766      	b.n	1a5e <__aeabi_ddiv+0x4e>
    1b90:	9c01      	ldr	r4, [sp, #4]
    1b92:	9403      	str	r4, [sp, #12]
    1b94:	9d03      	ldr	r5, [sp, #12]
    1b96:	2201      	movs	r2, #1
    1b98:	402a      	ands	r2, r5
    1b9a:	2400      	movs	r4, #0
    1b9c:	4d11      	ldr	r5, [pc, #68]	; (1be4 <__aeabi_ddiv+0x1d4>)
    1b9e:	46a1      	mov	r9, r4
    1ba0:	2000      	movs	r0, #0
    1ba2:	2100      	movs	r1, #0
    1ba4:	0324      	lsls	r4, r4, #12
    1ba6:	0b26      	lsrs	r6, r4, #12
    1ba8:	0d0c      	lsrs	r4, r1, #20
    1baa:	0524      	lsls	r4, r4, #20
    1bac:	4b11      	ldr	r3, [pc, #68]	; (1bf4 <__aeabi_ddiv+0x1e4>)
    1bae:	4334      	orrs	r4, r6
    1bb0:	052d      	lsls	r5, r5, #20
    1bb2:	4023      	ands	r3, r4
    1bb4:	432b      	orrs	r3, r5
    1bb6:	005b      	lsls	r3, r3, #1
    1bb8:	085b      	lsrs	r3, r3, #1
    1bba:	07d2      	lsls	r2, r2, #31
    1bbc:	1c19      	adds	r1, r3, #0
    1bbe:	4648      	mov	r0, r9
    1bc0:	4311      	orrs	r1, r2
    1bc2:	b007      	add	sp, #28
    1bc4:	bc3c      	pop	{r2, r3, r4, r5}
    1bc6:	4690      	mov	r8, r2
    1bc8:	4699      	mov	r9, r3
    1bca:	46a2      	mov	sl, r4
    1bcc:	46ab      	mov	fp, r5
    1bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bd0:	2200      	movs	r2, #0
    1bd2:	2480      	movs	r4, #128	; 0x80
    1bd4:	0324      	lsls	r4, r4, #12
    1bd6:	4691      	mov	r9, r2
    1bd8:	4d02      	ldr	r5, [pc, #8]	; (1be4 <__aeabi_ddiv+0x1d4>)
    1bda:	e7e1      	b.n	1ba0 <__aeabi_ddiv+0x190>
    1bdc:	2400      	movs	r4, #0
    1bde:	2500      	movs	r5, #0
    1be0:	46a1      	mov	r9, r4
    1be2:	e7dd      	b.n	1ba0 <__aeabi_ddiv+0x190>
    1be4:	000007ff 	.word	0x000007ff
    1be8:	fffffc01 	.word	0xfffffc01
    1bec:	00015000 	.word	0x00015000
    1bf0:	fffffc0d 	.word	0xfffffc0d
    1bf4:	800fffff 	.word	0x800fffff
    1bf8:	4655      	mov	r5, sl
    1bfa:	1aed      	subs	r5, r5, r3
    1bfc:	9504      	str	r5, [sp, #16]
    1bfe:	45d8      	cmp	r8, fp
    1c00:	d900      	bls.n	1c04 <__aeabi_ddiv+0x1f4>
    1c02:	e153      	b.n	1eac <__aeabi_ddiv+0x49c>
    1c04:	d100      	bne.n	1c08 <__aeabi_ddiv+0x1f8>
    1c06:	e14e      	b.n	1ea6 <__aeabi_ddiv+0x496>
    1c08:	9c04      	ldr	r4, [sp, #16]
    1c0a:	2500      	movs	r5, #0
    1c0c:	3c01      	subs	r4, #1
    1c0e:	464e      	mov	r6, r9
    1c10:	9404      	str	r4, [sp, #16]
    1c12:	4647      	mov	r7, r8
    1c14:	46a9      	mov	r9, r5
    1c16:	4658      	mov	r0, fp
    1c18:	0203      	lsls	r3, r0, #8
    1c1a:	0e0c      	lsrs	r4, r1, #24
    1c1c:	431c      	orrs	r4, r3
    1c1e:	0209      	lsls	r1, r1, #8
    1c20:	0c25      	lsrs	r5, r4, #16
    1c22:	0423      	lsls	r3, r4, #16
    1c24:	0c1b      	lsrs	r3, r3, #16
    1c26:	9100      	str	r1, [sp, #0]
    1c28:	1c38      	adds	r0, r7, #0
    1c2a:	1c29      	adds	r1, r5, #0
    1c2c:	9301      	str	r3, [sp, #4]
    1c2e:	f7fe fc39 	bl	4a4 <__aeabi_uidiv>
    1c32:	9901      	ldr	r1, [sp, #4]
    1c34:	4683      	mov	fp, r0
    1c36:	4341      	muls	r1, r0
    1c38:	1c38      	adds	r0, r7, #0
    1c3a:	468a      	mov	sl, r1
    1c3c:	1c29      	adds	r1, r5, #0
    1c3e:	f7fe fc75 	bl	52c <__aeabi_uidivmod>
    1c42:	0c33      	lsrs	r3, r6, #16
    1c44:	0409      	lsls	r1, r1, #16
    1c46:	4319      	orrs	r1, r3
    1c48:	458a      	cmp	sl, r1
    1c4a:	d90c      	bls.n	1c66 <__aeabi_ddiv+0x256>
    1c4c:	465b      	mov	r3, fp
    1c4e:	1909      	adds	r1, r1, r4
    1c50:	3b01      	subs	r3, #1
    1c52:	428c      	cmp	r4, r1
    1c54:	d900      	bls.n	1c58 <__aeabi_ddiv+0x248>
    1c56:	e147      	b.n	1ee8 <__aeabi_ddiv+0x4d8>
    1c58:	458a      	cmp	sl, r1
    1c5a:	d800      	bhi.n	1c5e <__aeabi_ddiv+0x24e>
    1c5c:	e144      	b.n	1ee8 <__aeabi_ddiv+0x4d8>
    1c5e:	2202      	movs	r2, #2
    1c60:	4252      	negs	r2, r2
    1c62:	4493      	add	fp, r2
    1c64:	1909      	adds	r1, r1, r4
    1c66:	4653      	mov	r3, sl
    1c68:	1acb      	subs	r3, r1, r3
    1c6a:	1c18      	adds	r0, r3, #0
    1c6c:	1c29      	adds	r1, r5, #0
    1c6e:	4698      	mov	r8, r3
    1c70:	f7fe fc18 	bl	4a4 <__aeabi_uidiv>
    1c74:	1c07      	adds	r7, r0, #0
    1c76:	9801      	ldr	r0, [sp, #4]
    1c78:	1c29      	adds	r1, r5, #0
    1c7a:	4378      	muls	r0, r7
    1c7c:	4682      	mov	sl, r0
    1c7e:	4640      	mov	r0, r8
    1c80:	f7fe fc54 	bl	52c <__aeabi_uidivmod>
    1c84:	0436      	lsls	r6, r6, #16
    1c86:	040b      	lsls	r3, r1, #16
    1c88:	0c36      	lsrs	r6, r6, #16
    1c8a:	4333      	orrs	r3, r6
    1c8c:	459a      	cmp	sl, r3
    1c8e:	d909      	bls.n	1ca4 <__aeabi_ddiv+0x294>
    1c90:	191b      	adds	r3, r3, r4
    1c92:	1e7a      	subs	r2, r7, #1
    1c94:	429c      	cmp	r4, r3
    1c96:	d900      	bls.n	1c9a <__aeabi_ddiv+0x28a>
    1c98:	e124      	b.n	1ee4 <__aeabi_ddiv+0x4d4>
    1c9a:	459a      	cmp	sl, r3
    1c9c:	d800      	bhi.n	1ca0 <__aeabi_ddiv+0x290>
    1c9e:	e121      	b.n	1ee4 <__aeabi_ddiv+0x4d4>
    1ca0:	3f02      	subs	r7, #2
    1ca2:	191b      	adds	r3, r3, r4
    1ca4:	465e      	mov	r6, fp
    1ca6:	0432      	lsls	r2, r6, #16
    1ca8:	4317      	orrs	r7, r2
    1caa:	0c38      	lsrs	r0, r7, #16
    1cac:	46bb      	mov	fp, r7
    1cae:	9e00      	ldr	r6, [sp, #0]
    1cb0:	9f00      	ldr	r7, [sp, #0]
    1cb2:	4651      	mov	r1, sl
    1cb4:	0c3f      	lsrs	r7, r7, #16
    1cb6:	0432      	lsls	r2, r6, #16
    1cb8:	1a5b      	subs	r3, r3, r1
    1cba:	4659      	mov	r1, fp
    1cbc:	46ba      	mov	sl, r7
    1cbe:	0c12      	lsrs	r2, r2, #16
    1cc0:	040f      	lsls	r7, r1, #16
    1cc2:	0c3f      	lsrs	r7, r7, #16
    1cc4:	4690      	mov	r8, r2
    1cc6:	4651      	mov	r1, sl
    1cc8:	437a      	muls	r2, r7
    1cca:	434f      	muls	r7, r1
    1ccc:	4641      	mov	r1, r8
    1cce:	4341      	muls	r1, r0
    1cd0:	4656      	mov	r6, sl
    1cd2:	4370      	muls	r0, r6
    1cd4:	19cf      	adds	r7, r1, r7
    1cd6:	0c16      	lsrs	r6, r2, #16
    1cd8:	19be      	adds	r6, r7, r6
    1cda:	42b1      	cmp	r1, r6
    1cdc:	d902      	bls.n	1ce4 <__aeabi_ddiv+0x2d4>
    1cde:	2780      	movs	r7, #128	; 0x80
    1ce0:	027f      	lsls	r7, r7, #9
    1ce2:	19c0      	adds	r0, r0, r7
    1ce4:	0c31      	lsrs	r1, r6, #16
    1ce6:	0412      	lsls	r2, r2, #16
    1ce8:	0436      	lsls	r6, r6, #16
    1cea:	0c12      	lsrs	r2, r2, #16
    1cec:	1840      	adds	r0, r0, r1
    1cee:	18b6      	adds	r6, r6, r2
    1cf0:	4283      	cmp	r3, r0
    1cf2:	d200      	bcs.n	1cf6 <__aeabi_ddiv+0x2e6>
    1cf4:	e0c4      	b.n	1e80 <__aeabi_ddiv+0x470>
    1cf6:	d100      	bne.n	1cfa <__aeabi_ddiv+0x2ea>
    1cf8:	e0be      	b.n	1e78 <__aeabi_ddiv+0x468>
    1cfa:	1a19      	subs	r1, r3, r0
    1cfc:	4648      	mov	r0, r9
    1cfe:	1b86      	subs	r6, r0, r6
    1d00:	45b1      	cmp	r9, r6
    1d02:	41bf      	sbcs	r7, r7
    1d04:	427f      	negs	r7, r7
    1d06:	1bcf      	subs	r7, r1, r7
    1d08:	42a7      	cmp	r7, r4
    1d0a:	d100      	bne.n	1d0e <__aeabi_ddiv+0x2fe>
    1d0c:	e113      	b.n	1f36 <__aeabi_ddiv+0x526>
    1d0e:	1c29      	adds	r1, r5, #0
    1d10:	1c38      	adds	r0, r7, #0
    1d12:	f7fe fbc7 	bl	4a4 <__aeabi_uidiv>
    1d16:	9901      	ldr	r1, [sp, #4]
    1d18:	9002      	str	r0, [sp, #8]
    1d1a:	4341      	muls	r1, r0
    1d1c:	1c38      	adds	r0, r7, #0
    1d1e:	4689      	mov	r9, r1
    1d20:	1c29      	adds	r1, r5, #0
    1d22:	f7fe fc03 	bl	52c <__aeabi_uidivmod>
    1d26:	0c33      	lsrs	r3, r6, #16
    1d28:	0409      	lsls	r1, r1, #16
    1d2a:	4319      	orrs	r1, r3
    1d2c:	4589      	cmp	r9, r1
    1d2e:	d90c      	bls.n	1d4a <__aeabi_ddiv+0x33a>
    1d30:	9b02      	ldr	r3, [sp, #8]
    1d32:	1909      	adds	r1, r1, r4
    1d34:	3b01      	subs	r3, #1
    1d36:	428c      	cmp	r4, r1
    1d38:	d900      	bls.n	1d3c <__aeabi_ddiv+0x32c>
    1d3a:	e0ff      	b.n	1f3c <__aeabi_ddiv+0x52c>
    1d3c:	4589      	cmp	r9, r1
    1d3e:	d800      	bhi.n	1d42 <__aeabi_ddiv+0x332>
    1d40:	e0fc      	b.n	1f3c <__aeabi_ddiv+0x52c>
    1d42:	9f02      	ldr	r7, [sp, #8]
    1d44:	1909      	adds	r1, r1, r4
    1d46:	3f02      	subs	r7, #2
    1d48:	9702      	str	r7, [sp, #8]
    1d4a:	464f      	mov	r7, r9
    1d4c:	1bcf      	subs	r7, r1, r7
    1d4e:	1c38      	adds	r0, r7, #0
    1d50:	1c29      	adds	r1, r5, #0
    1d52:	9705      	str	r7, [sp, #20]
    1d54:	f7fe fba6 	bl	4a4 <__aeabi_uidiv>
    1d58:	1c07      	adds	r7, r0, #0
    1d5a:	9801      	ldr	r0, [sp, #4]
    1d5c:	1c29      	adds	r1, r5, #0
    1d5e:	4378      	muls	r0, r7
    1d60:	4681      	mov	r9, r0
    1d62:	9805      	ldr	r0, [sp, #20]
    1d64:	f7fe fbe2 	bl	52c <__aeabi_uidivmod>
    1d68:	0436      	lsls	r6, r6, #16
    1d6a:	0409      	lsls	r1, r1, #16
    1d6c:	0c36      	lsrs	r6, r6, #16
    1d6e:	430e      	orrs	r6, r1
    1d70:	45b1      	cmp	r9, r6
    1d72:	d909      	bls.n	1d88 <__aeabi_ddiv+0x378>
    1d74:	1936      	adds	r6, r6, r4
    1d76:	1e7b      	subs	r3, r7, #1
    1d78:	42b4      	cmp	r4, r6
    1d7a:	d900      	bls.n	1d7e <__aeabi_ddiv+0x36e>
    1d7c:	e0e0      	b.n	1f40 <__aeabi_ddiv+0x530>
    1d7e:	45b1      	cmp	r9, r6
    1d80:	d800      	bhi.n	1d84 <__aeabi_ddiv+0x374>
    1d82:	e0dd      	b.n	1f40 <__aeabi_ddiv+0x530>
    1d84:	3f02      	subs	r7, #2
    1d86:	1936      	adds	r6, r6, r4
    1d88:	9d02      	ldr	r5, [sp, #8]
    1d8a:	4649      	mov	r1, r9
    1d8c:	1a76      	subs	r6, r6, r1
    1d8e:	0429      	lsls	r1, r5, #16
    1d90:	4339      	orrs	r1, r7
    1d92:	040b      	lsls	r3, r1, #16
    1d94:	4657      	mov	r7, sl
    1d96:	0c0a      	lsrs	r2, r1, #16
    1d98:	0c1b      	lsrs	r3, r3, #16
    1d9a:	4640      	mov	r0, r8
    1d9c:	4645      	mov	r5, r8
    1d9e:	4358      	muls	r0, r3
    1da0:	4355      	muls	r5, r2
    1da2:	437b      	muls	r3, r7
    1da4:	437a      	muls	r2, r7
    1da6:	18eb      	adds	r3, r5, r3
    1da8:	0c07      	lsrs	r7, r0, #16
    1daa:	19db      	adds	r3, r3, r7
    1dac:	429d      	cmp	r5, r3
    1dae:	d902      	bls.n	1db6 <__aeabi_ddiv+0x3a6>
    1db0:	2580      	movs	r5, #128	; 0x80
    1db2:	026d      	lsls	r5, r5, #9
    1db4:	1952      	adds	r2, r2, r5
    1db6:	0c1d      	lsrs	r5, r3, #16
    1db8:	0400      	lsls	r0, r0, #16
    1dba:	041b      	lsls	r3, r3, #16
    1dbc:	0c00      	lsrs	r0, r0, #16
    1dbe:	1952      	adds	r2, r2, r5
    1dc0:	181b      	adds	r3, r3, r0
    1dc2:	4296      	cmp	r6, r2
    1dc4:	d335      	bcc.n	1e32 <__aeabi_ddiv+0x422>
    1dc6:	d100      	bne.n	1dca <__aeabi_ddiv+0x3ba>
    1dc8:	e0fc      	b.n	1fc4 <__aeabi_ddiv+0x5b4>
    1dca:	2301      	movs	r3, #1
    1dcc:	4319      	orrs	r1, r3
    1dce:	9e04      	ldr	r6, [sp, #16]
    1dd0:	4f99      	ldr	r7, [pc, #612]	; (2038 <__aeabi_ddiv+0x628>)
    1dd2:	19f5      	adds	r5, r6, r7
    1dd4:	2d00      	cmp	r5, #0
    1dd6:	dc00      	bgt.n	1dda <__aeabi_ddiv+0x3ca>
    1dd8:	e0a1      	b.n	1f1e <__aeabi_ddiv+0x50e>
    1dda:	0748      	lsls	r0, r1, #29
    1ddc:	d009      	beq.n	1df2 <__aeabi_ddiv+0x3e2>
    1dde:	230f      	movs	r3, #15
    1de0:	400b      	ands	r3, r1
    1de2:	2b04      	cmp	r3, #4
    1de4:	d005      	beq.n	1df2 <__aeabi_ddiv+0x3e2>
    1de6:	1d0b      	adds	r3, r1, #4
    1de8:	428b      	cmp	r3, r1
    1dea:	4189      	sbcs	r1, r1
    1dec:	4249      	negs	r1, r1
    1dee:	448b      	add	fp, r1
    1df0:	1c19      	adds	r1, r3, #0
    1df2:	465a      	mov	r2, fp
    1df4:	01d2      	lsls	r2, r2, #7
    1df6:	d507      	bpl.n	1e08 <__aeabi_ddiv+0x3f8>
    1df8:	4b90      	ldr	r3, [pc, #576]	; (203c <__aeabi_ddiv+0x62c>)
    1dfa:	465c      	mov	r4, fp
    1dfc:	9e04      	ldr	r6, [sp, #16]
    1dfe:	2780      	movs	r7, #128	; 0x80
    1e00:	401c      	ands	r4, r3
    1e02:	00ff      	lsls	r7, r7, #3
    1e04:	46a3      	mov	fp, r4
    1e06:	19f5      	adds	r5, r6, r7
    1e08:	4b8d      	ldr	r3, [pc, #564]	; (2040 <__aeabi_ddiv+0x630>)
    1e0a:	429d      	cmp	r5, r3
    1e0c:	dd7a      	ble.n	1f04 <__aeabi_ddiv+0x4f4>
    1e0e:	9c03      	ldr	r4, [sp, #12]
    1e10:	2201      	movs	r2, #1
    1e12:	4022      	ands	r2, r4
    1e14:	2400      	movs	r4, #0
    1e16:	4d8b      	ldr	r5, [pc, #556]	; (2044 <__aeabi_ddiv+0x634>)
    1e18:	46a1      	mov	r9, r4
    1e1a:	e6c1      	b.n	1ba0 <__aeabi_ddiv+0x190>
    1e1c:	2480      	movs	r4, #128	; 0x80
    1e1e:	0324      	lsls	r4, r4, #12
    1e20:	4647      	mov	r7, r8
    1e22:	4227      	tst	r7, r4
    1e24:	d14c      	bne.n	1ec0 <__aeabi_ddiv+0x4b0>
    1e26:	433c      	orrs	r4, r7
    1e28:	0324      	lsls	r4, r4, #12
    1e2a:	0b24      	lsrs	r4, r4, #12
    1e2c:	9a00      	ldr	r2, [sp, #0]
    1e2e:	4d85      	ldr	r5, [pc, #532]	; (2044 <__aeabi_ddiv+0x634>)
    1e30:	e6b6      	b.n	1ba0 <__aeabi_ddiv+0x190>
    1e32:	1936      	adds	r6, r6, r4
    1e34:	1e48      	subs	r0, r1, #1
    1e36:	42b4      	cmp	r4, r6
    1e38:	d95e      	bls.n	1ef8 <__aeabi_ddiv+0x4e8>
    1e3a:	1c01      	adds	r1, r0, #0
    1e3c:	4296      	cmp	r6, r2
    1e3e:	d1c4      	bne.n	1dca <__aeabi_ddiv+0x3ba>
    1e40:	9e00      	ldr	r6, [sp, #0]
    1e42:	429e      	cmp	r6, r3
    1e44:	d1c1      	bne.n	1dca <__aeabi_ddiv+0x3ba>
    1e46:	e7c2      	b.n	1dce <__aeabi_ddiv+0x3be>
    1e48:	1c03      	adds	r3, r0, #0
    1e4a:	3b28      	subs	r3, #40	; 0x28
    1e4c:	1c31      	adds	r1, r6, #0
    1e4e:	4099      	lsls	r1, r3
    1e50:	468b      	mov	fp, r1
    1e52:	2100      	movs	r1, #0
    1e54:	e688      	b.n	1b68 <__aeabi_ddiv+0x158>
    1e56:	1c30      	adds	r0, r6, #0
    1e58:	f000 fe56 	bl	2b08 <__clzsi2>
    1e5c:	3020      	adds	r0, #32
    1e5e:	e672      	b.n	1b46 <__aeabi_ddiv+0x136>
    1e60:	3b28      	subs	r3, #40	; 0x28
    1e62:	1c21      	adds	r1, r4, #0
    1e64:	4099      	lsls	r1, r3
    1e66:	2200      	movs	r2, #0
    1e68:	4688      	mov	r8, r1
    1e6a:	4691      	mov	r9, r2
    1e6c:	e651      	b.n	1b12 <__aeabi_ddiv+0x102>
    1e6e:	1c20      	adds	r0, r4, #0
    1e70:	f000 fe4a 	bl	2b08 <__clzsi2>
    1e74:	3020      	adds	r0, #32
    1e76:	e63b      	b.n	1af0 <__aeabi_ddiv+0xe0>
    1e78:	2100      	movs	r1, #0
    1e7a:	45b1      	cmp	r9, r6
    1e7c:	d300      	bcc.n	1e80 <__aeabi_ddiv+0x470>
    1e7e:	e73d      	b.n	1cfc <__aeabi_ddiv+0x2ec>
    1e80:	9f00      	ldr	r7, [sp, #0]
    1e82:	465a      	mov	r2, fp
    1e84:	44b9      	add	r9, r7
    1e86:	45b9      	cmp	r9, r7
    1e88:	41bf      	sbcs	r7, r7
    1e8a:	427f      	negs	r7, r7
    1e8c:	193f      	adds	r7, r7, r4
    1e8e:	18fb      	adds	r3, r7, r3
    1e90:	3a01      	subs	r2, #1
    1e92:	429c      	cmp	r4, r3
    1e94:	d21e      	bcs.n	1ed4 <__aeabi_ddiv+0x4c4>
    1e96:	4298      	cmp	r0, r3
    1e98:	d900      	bls.n	1e9c <__aeabi_ddiv+0x48c>
    1e9a:	e07e      	b.n	1f9a <__aeabi_ddiv+0x58a>
    1e9c:	d100      	bne.n	1ea0 <__aeabi_ddiv+0x490>
    1e9e:	e0b5      	b.n	200c <__aeabi_ddiv+0x5fc>
    1ea0:	1a19      	subs	r1, r3, r0
    1ea2:	4693      	mov	fp, r2
    1ea4:	e72a      	b.n	1cfc <__aeabi_ddiv+0x2ec>
    1ea6:	4589      	cmp	r9, r1
    1ea8:	d800      	bhi.n	1eac <__aeabi_ddiv+0x49c>
    1eaa:	e6ad      	b.n	1c08 <__aeabi_ddiv+0x1f8>
    1eac:	4648      	mov	r0, r9
    1eae:	4646      	mov	r6, r8
    1eb0:	4642      	mov	r2, r8
    1eb2:	0877      	lsrs	r7, r6, #1
    1eb4:	07d3      	lsls	r3, r2, #31
    1eb6:	0846      	lsrs	r6, r0, #1
    1eb8:	07c0      	lsls	r0, r0, #31
    1eba:	431e      	orrs	r6, r3
    1ebc:	4681      	mov	r9, r0
    1ebe:	e6aa      	b.n	1c16 <__aeabi_ddiv+0x206>
    1ec0:	4658      	mov	r0, fp
    1ec2:	4220      	tst	r0, r4
    1ec4:	d112      	bne.n	1eec <__aeabi_ddiv+0x4dc>
    1ec6:	4304      	orrs	r4, r0
    1ec8:	0324      	lsls	r4, r4, #12
    1eca:	1c2a      	adds	r2, r5, #0
    1ecc:	0b24      	lsrs	r4, r4, #12
    1ece:	4689      	mov	r9, r1
    1ed0:	4d5c      	ldr	r5, [pc, #368]	; (2044 <__aeabi_ddiv+0x634>)
    1ed2:	e665      	b.n	1ba0 <__aeabi_ddiv+0x190>
    1ed4:	42a3      	cmp	r3, r4
    1ed6:	d1e3      	bne.n	1ea0 <__aeabi_ddiv+0x490>
    1ed8:	9f00      	ldr	r7, [sp, #0]
    1eda:	454f      	cmp	r7, r9
    1edc:	d9db      	bls.n	1e96 <__aeabi_ddiv+0x486>
    1ede:	1a21      	subs	r1, r4, r0
    1ee0:	4693      	mov	fp, r2
    1ee2:	e70b      	b.n	1cfc <__aeabi_ddiv+0x2ec>
    1ee4:	1c17      	adds	r7, r2, #0
    1ee6:	e6dd      	b.n	1ca4 <__aeabi_ddiv+0x294>
    1ee8:	469b      	mov	fp, r3
    1eea:	e6bc      	b.n	1c66 <__aeabi_ddiv+0x256>
    1eec:	433c      	orrs	r4, r7
    1eee:	0324      	lsls	r4, r4, #12
    1ef0:	0b24      	lsrs	r4, r4, #12
    1ef2:	9a00      	ldr	r2, [sp, #0]
    1ef4:	4d53      	ldr	r5, [pc, #332]	; (2044 <__aeabi_ddiv+0x634>)
    1ef6:	e653      	b.n	1ba0 <__aeabi_ddiv+0x190>
    1ef8:	42b2      	cmp	r2, r6
    1efa:	d859      	bhi.n	1fb0 <__aeabi_ddiv+0x5a0>
    1efc:	d100      	bne.n	1f00 <__aeabi_ddiv+0x4f0>
    1efe:	e08a      	b.n	2016 <__aeabi_ddiv+0x606>
    1f00:	1c01      	adds	r1, r0, #0
    1f02:	e762      	b.n	1dca <__aeabi_ddiv+0x3ba>
    1f04:	465f      	mov	r7, fp
    1f06:	08c9      	lsrs	r1, r1, #3
    1f08:	077b      	lsls	r3, r7, #29
    1f0a:	9e03      	ldr	r6, [sp, #12]
    1f0c:	430b      	orrs	r3, r1
    1f0e:	027c      	lsls	r4, r7, #9
    1f10:	056d      	lsls	r5, r5, #21
    1f12:	2201      	movs	r2, #1
    1f14:	4699      	mov	r9, r3
    1f16:	0b24      	lsrs	r4, r4, #12
    1f18:	0d6d      	lsrs	r5, r5, #21
    1f1a:	4032      	ands	r2, r6
    1f1c:	e640      	b.n	1ba0 <__aeabi_ddiv+0x190>
    1f1e:	4b4a      	ldr	r3, [pc, #296]	; (2048 <__aeabi_ddiv+0x638>)
    1f20:	9f04      	ldr	r7, [sp, #16]
    1f22:	1bdb      	subs	r3, r3, r7
    1f24:	2b38      	cmp	r3, #56	; 0x38
    1f26:	dd10      	ble.n	1f4a <__aeabi_ddiv+0x53a>
    1f28:	9c03      	ldr	r4, [sp, #12]
    1f2a:	2201      	movs	r2, #1
    1f2c:	4022      	ands	r2, r4
    1f2e:	2400      	movs	r4, #0
    1f30:	2500      	movs	r5, #0
    1f32:	46a1      	mov	r9, r4
    1f34:	e634      	b.n	1ba0 <__aeabi_ddiv+0x190>
    1f36:	2101      	movs	r1, #1
    1f38:	4249      	negs	r1, r1
    1f3a:	e748      	b.n	1dce <__aeabi_ddiv+0x3be>
    1f3c:	9302      	str	r3, [sp, #8]
    1f3e:	e704      	b.n	1d4a <__aeabi_ddiv+0x33a>
    1f40:	1c1f      	adds	r7, r3, #0
    1f42:	e721      	b.n	1d88 <__aeabi_ddiv+0x378>
    1f44:	9c01      	ldr	r4, [sp, #4]
    1f46:	9403      	str	r4, [sp, #12]
    1f48:	e741      	b.n	1dce <__aeabi_ddiv+0x3be>
    1f4a:	2b1f      	cmp	r3, #31
    1f4c:	dc40      	bgt.n	1fd0 <__aeabi_ddiv+0x5c0>
    1f4e:	483f      	ldr	r0, [pc, #252]	; (204c <__aeabi_ddiv+0x63c>)
    1f50:	9f04      	ldr	r7, [sp, #16]
    1f52:	1c0c      	adds	r4, r1, #0
    1f54:	183a      	adds	r2, r7, r0
    1f56:	4658      	mov	r0, fp
    1f58:	4091      	lsls	r1, r2
    1f5a:	40dc      	lsrs	r4, r3
    1f5c:	4090      	lsls	r0, r2
    1f5e:	4320      	orrs	r0, r4
    1f60:	1c0a      	adds	r2, r1, #0
    1f62:	1e51      	subs	r1, r2, #1
    1f64:	418a      	sbcs	r2, r1
    1f66:	1c01      	adds	r1, r0, #0
    1f68:	4311      	orrs	r1, r2
    1f6a:	465a      	mov	r2, fp
    1f6c:	40da      	lsrs	r2, r3
    1f6e:	1c13      	adds	r3, r2, #0
    1f70:	0748      	lsls	r0, r1, #29
    1f72:	d009      	beq.n	1f88 <__aeabi_ddiv+0x578>
    1f74:	220f      	movs	r2, #15
    1f76:	400a      	ands	r2, r1
    1f78:	2a04      	cmp	r2, #4
    1f7a:	d005      	beq.n	1f88 <__aeabi_ddiv+0x578>
    1f7c:	1d0a      	adds	r2, r1, #4
    1f7e:	428a      	cmp	r2, r1
    1f80:	4189      	sbcs	r1, r1
    1f82:	4249      	negs	r1, r1
    1f84:	185b      	adds	r3, r3, r1
    1f86:	1c11      	adds	r1, r2, #0
    1f88:	021a      	lsls	r2, r3, #8
    1f8a:	d534      	bpl.n	1ff6 <__aeabi_ddiv+0x5e6>
    1f8c:	9c03      	ldr	r4, [sp, #12]
    1f8e:	2201      	movs	r2, #1
    1f90:	4022      	ands	r2, r4
    1f92:	2400      	movs	r4, #0
    1f94:	2501      	movs	r5, #1
    1f96:	46a1      	mov	r9, r4
    1f98:	e602      	b.n	1ba0 <__aeabi_ddiv+0x190>
    1f9a:	9f00      	ldr	r7, [sp, #0]
    1f9c:	2102      	movs	r1, #2
    1f9e:	4249      	negs	r1, r1
    1fa0:	44b9      	add	r9, r7
    1fa2:	448b      	add	fp, r1
    1fa4:	45b9      	cmp	r9, r7
    1fa6:	4189      	sbcs	r1, r1
    1fa8:	4249      	negs	r1, r1
    1faa:	1909      	adds	r1, r1, r4
    1fac:	18cb      	adds	r3, r1, r3
    1fae:	e6a4      	b.n	1cfa <__aeabi_ddiv+0x2ea>
    1fb0:	9d00      	ldr	r5, [sp, #0]
    1fb2:	1e88      	subs	r0, r1, #2
    1fb4:	0069      	lsls	r1, r5, #1
    1fb6:	42a9      	cmp	r1, r5
    1fb8:	41ad      	sbcs	r5, r5
    1fba:	426d      	negs	r5, r5
    1fbc:	192c      	adds	r4, r5, r4
    1fbe:	1936      	adds	r6, r6, r4
    1fc0:	9100      	str	r1, [sp, #0]
    1fc2:	e73a      	b.n	1e3a <__aeabi_ddiv+0x42a>
    1fc4:	2b00      	cmp	r3, #0
    1fc6:	d000      	beq.n	1fca <__aeabi_ddiv+0x5ba>
    1fc8:	e733      	b.n	1e32 <__aeabi_ddiv+0x422>
    1fca:	2400      	movs	r4, #0
    1fcc:	9400      	str	r4, [sp, #0]
    1fce:	e737      	b.n	1e40 <__aeabi_ddiv+0x430>
    1fd0:	4a1f      	ldr	r2, [pc, #124]	; (2050 <__aeabi_ddiv+0x640>)
    1fd2:	9c04      	ldr	r4, [sp, #16]
    1fd4:	465d      	mov	r5, fp
    1fd6:	1b12      	subs	r2, r2, r4
    1fd8:	40d5      	lsrs	r5, r2
    1fda:	1c2a      	adds	r2, r5, #0
    1fdc:	2b20      	cmp	r3, #32
    1fde:	d01f      	beq.n	2020 <__aeabi_ddiv+0x610>
    1fe0:	4e1c      	ldr	r6, [pc, #112]	; (2054 <__aeabi_ddiv+0x644>)
    1fe2:	465f      	mov	r7, fp
    1fe4:	19a3      	adds	r3, r4, r6
    1fe6:	409f      	lsls	r7, r3
    1fe8:	1c3b      	adds	r3, r7, #0
    1fea:	4319      	orrs	r1, r3
    1fec:	1e4b      	subs	r3, r1, #1
    1fee:	4199      	sbcs	r1, r3
    1ff0:	4311      	orrs	r1, r2
    1ff2:	2300      	movs	r3, #0
    1ff4:	e7bc      	b.n	1f70 <__aeabi_ddiv+0x560>
    1ff6:	075a      	lsls	r2, r3, #29
    1ff8:	08c9      	lsrs	r1, r1, #3
    1ffa:	430a      	orrs	r2, r1
    1ffc:	9f03      	ldr	r7, [sp, #12]
    1ffe:	4691      	mov	r9, r2
    2000:	025b      	lsls	r3, r3, #9
    2002:	2201      	movs	r2, #1
    2004:	0b1c      	lsrs	r4, r3, #12
    2006:	403a      	ands	r2, r7
    2008:	2500      	movs	r5, #0
    200a:	e5c9      	b.n	1ba0 <__aeabi_ddiv+0x190>
    200c:	454e      	cmp	r6, r9
    200e:	d8c4      	bhi.n	1f9a <__aeabi_ddiv+0x58a>
    2010:	4693      	mov	fp, r2
    2012:	2100      	movs	r1, #0
    2014:	e672      	b.n	1cfc <__aeabi_ddiv+0x2ec>
    2016:	9f00      	ldr	r7, [sp, #0]
    2018:	429f      	cmp	r7, r3
    201a:	d3c9      	bcc.n	1fb0 <__aeabi_ddiv+0x5a0>
    201c:	1c01      	adds	r1, r0, #0
    201e:	e70f      	b.n	1e40 <__aeabi_ddiv+0x430>
    2020:	2300      	movs	r3, #0
    2022:	e7e2      	b.n	1fea <__aeabi_ddiv+0x5da>
    2024:	2480      	movs	r4, #128	; 0x80
    2026:	0324      	lsls	r4, r4, #12
    2028:	465f      	mov	r7, fp
    202a:	433c      	orrs	r4, r7
    202c:	0324      	lsls	r4, r4, #12
    202e:	0b24      	lsrs	r4, r4, #12
    2030:	9a01      	ldr	r2, [sp, #4]
    2032:	4689      	mov	r9, r1
    2034:	4d03      	ldr	r5, [pc, #12]	; (2044 <__aeabi_ddiv+0x634>)
    2036:	e5b3      	b.n	1ba0 <__aeabi_ddiv+0x190>
    2038:	000003ff 	.word	0x000003ff
    203c:	feffffff 	.word	0xfeffffff
    2040:	000007fe 	.word	0x000007fe
    2044:	000007ff 	.word	0x000007ff
    2048:	fffffc02 	.word	0xfffffc02
    204c:	0000041e 	.word	0x0000041e
    2050:	fffffbe2 	.word	0xfffffbe2
    2054:	0000043e 	.word	0x0000043e

00002058 <__eqdf2>:
__eqdf2():
    2058:	b5f0      	push	{r4, r5, r6, r7, lr}
    205a:	465f      	mov	r7, fp
    205c:	4656      	mov	r6, sl
    205e:	464d      	mov	r5, r9
    2060:	4644      	mov	r4, r8
    2062:	b4f0      	push	{r4, r5, r6, r7}
    2064:	1c0d      	adds	r5, r1, #0
    2066:	1c04      	adds	r4, r0, #0
    2068:	4680      	mov	r8, r0
    206a:	0fe8      	lsrs	r0, r5, #31
    206c:	4681      	mov	r9, r0
    206e:	0318      	lsls	r0, r3, #12
    2070:	030f      	lsls	r7, r1, #12
    2072:	0b00      	lsrs	r0, r0, #12
    2074:	0b3f      	lsrs	r7, r7, #12
    2076:	b083      	sub	sp, #12
    2078:	4684      	mov	ip, r0
    207a:	481b      	ldr	r0, [pc, #108]	; (20e8 <__eqdf2+0x90>)
    207c:	9700      	str	r7, [sp, #0]
    207e:	0049      	lsls	r1, r1, #1
    2080:	005e      	lsls	r6, r3, #1
    2082:	0fdf      	lsrs	r7, r3, #31
    2084:	0d49      	lsrs	r1, r1, #21
    2086:	4692      	mov	sl, r2
    2088:	0d76      	lsrs	r6, r6, #21
    208a:	46bb      	mov	fp, r7
    208c:	4281      	cmp	r1, r0
    208e:	d00c      	beq.n	20aa <__eqdf2+0x52>
    2090:	4815      	ldr	r0, [pc, #84]	; (20e8 <__eqdf2+0x90>)
    2092:	4286      	cmp	r6, r0
    2094:	d010      	beq.n	20b8 <__eqdf2+0x60>
    2096:	2001      	movs	r0, #1
    2098:	42b1      	cmp	r1, r6
    209a:	d015      	beq.n	20c8 <__eqdf2+0x70>
    209c:	b003      	add	sp, #12
    209e:	bc3c      	pop	{r2, r3, r4, r5}
    20a0:	4690      	mov	r8, r2
    20a2:	4699      	mov	r9, r3
    20a4:	46a2      	mov	sl, r4
    20a6:	46ab      	mov	fp, r5
    20a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20aa:	9f00      	ldr	r7, [sp, #0]
    20ac:	2001      	movs	r0, #1
    20ae:	4327      	orrs	r7, r4
    20b0:	d1f4      	bne.n	209c <__eqdf2+0x44>
    20b2:	480d      	ldr	r0, [pc, #52]	; (20e8 <__eqdf2+0x90>)
    20b4:	4286      	cmp	r6, r0
    20b6:	d1ee      	bne.n	2096 <__eqdf2+0x3e>
    20b8:	4660      	mov	r0, ip
    20ba:	4302      	orrs	r2, r0
    20bc:	2001      	movs	r0, #1
    20be:	2a00      	cmp	r2, #0
    20c0:	d1ec      	bne.n	209c <__eqdf2+0x44>
    20c2:	2001      	movs	r0, #1
    20c4:	42b1      	cmp	r1, r6
    20c6:	d1e9      	bne.n	209c <__eqdf2+0x44>
    20c8:	9b00      	ldr	r3, [sp, #0]
    20ca:	4563      	cmp	r3, ip
    20cc:	d1e6      	bne.n	209c <__eqdf2+0x44>
    20ce:	45d0      	cmp	r8, sl
    20d0:	d1e4      	bne.n	209c <__eqdf2+0x44>
    20d2:	45d9      	cmp	r9, fp
    20d4:	d006      	beq.n	20e4 <__eqdf2+0x8c>
    20d6:	2900      	cmp	r1, #0
    20d8:	d1e0      	bne.n	209c <__eqdf2+0x44>
    20da:	431c      	orrs	r4, r3
    20dc:	1c20      	adds	r0, r4, #0
    20de:	1e44      	subs	r4, r0, #1
    20e0:	41a0      	sbcs	r0, r4
    20e2:	e7db      	b.n	209c <__eqdf2+0x44>
    20e4:	2000      	movs	r0, #0
    20e6:	e7d9      	b.n	209c <__eqdf2+0x44>
    20e8:	000007ff 	.word	0x000007ff

000020ec <__gedf2>:
__gtdf2():
    20ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    20ee:	465f      	mov	r7, fp
    20f0:	4656      	mov	r6, sl
    20f2:	464d      	mov	r5, r9
    20f4:	4644      	mov	r4, r8
    20f6:	b4f0      	push	{r4, r5, r6, r7}
    20f8:	0fcd      	lsrs	r5, r1, #31
    20fa:	0fde      	lsrs	r6, r3, #31
    20fc:	46ac      	mov	ip, r5
    20fe:	031d      	lsls	r5, r3, #12
    2100:	0b2d      	lsrs	r5, r5, #12
    2102:	46b1      	mov	r9, r6
    2104:	4e37      	ldr	r6, [pc, #220]	; (21e4 <__gedf2+0xf8>)
    2106:	030f      	lsls	r7, r1, #12
    2108:	004c      	lsls	r4, r1, #1
    210a:	46ab      	mov	fp, r5
    210c:	005d      	lsls	r5, r3, #1
    210e:	4680      	mov	r8, r0
    2110:	0b3f      	lsrs	r7, r7, #12
    2112:	0d64      	lsrs	r4, r4, #21
    2114:	4692      	mov	sl, r2
    2116:	0d6d      	lsrs	r5, r5, #21
    2118:	42b4      	cmp	r4, r6
    211a:	d032      	beq.n	2182 <__gedf2+0x96>
    211c:	4e31      	ldr	r6, [pc, #196]	; (21e4 <__gedf2+0xf8>)
    211e:	42b5      	cmp	r5, r6
    2120:	d035      	beq.n	218e <__gedf2+0xa2>
    2122:	2c00      	cmp	r4, #0
    2124:	d10e      	bne.n	2144 <__gedf2+0x58>
    2126:	4338      	orrs	r0, r7
    2128:	4241      	negs	r1, r0
    212a:	4141      	adcs	r1, r0
    212c:	1c08      	adds	r0, r1, #0
    212e:	2d00      	cmp	r5, #0
    2130:	d00b      	beq.n	214a <__gedf2+0x5e>
    2132:	2900      	cmp	r1, #0
    2134:	d119      	bne.n	216a <__gedf2+0x7e>
    2136:	45cc      	cmp	ip, r9
    2138:	d02d      	beq.n	2196 <__gedf2+0xaa>
    213a:	4665      	mov	r5, ip
    213c:	4268      	negs	r0, r5
    213e:	2301      	movs	r3, #1
    2140:	4318      	orrs	r0, r3
    2142:	e018      	b.n	2176 <__gedf2+0x8a>
    2144:	2d00      	cmp	r5, #0
    2146:	d1f6      	bne.n	2136 <__gedf2+0x4a>
    2148:	1c28      	adds	r0, r5, #0
    214a:	4659      	mov	r1, fp
    214c:	430a      	orrs	r2, r1
    214e:	4253      	negs	r3, r2
    2150:	4153      	adcs	r3, r2
    2152:	2800      	cmp	r0, #0
    2154:	d106      	bne.n	2164 <__gedf2+0x78>
    2156:	2b00      	cmp	r3, #0
    2158:	d0ed      	beq.n	2136 <__gedf2+0x4a>
    215a:	4663      	mov	r3, ip
    215c:	4258      	negs	r0, r3
    215e:	2301      	movs	r3, #1
    2160:	4318      	orrs	r0, r3
    2162:	e008      	b.n	2176 <__gedf2+0x8a>
    2164:	2000      	movs	r0, #0
    2166:	2b00      	cmp	r3, #0
    2168:	d105      	bne.n	2176 <__gedf2+0x8a>
    216a:	464a      	mov	r2, r9
    216c:	4250      	negs	r0, r2
    216e:	4150      	adcs	r0, r2
    2170:	4240      	negs	r0, r0
    2172:	2301      	movs	r3, #1
    2174:	4318      	orrs	r0, r3
    2176:	bc3c      	pop	{r2, r3, r4, r5}
    2178:	4690      	mov	r8, r2
    217a:	4699      	mov	r9, r3
    217c:	46a2      	mov	sl, r4
    217e:	46ab      	mov	fp, r5
    2180:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2182:	1c3e      	adds	r6, r7, #0
    2184:	4306      	orrs	r6, r0
    2186:	d0c9      	beq.n	211c <__gedf2+0x30>
    2188:	2002      	movs	r0, #2
    218a:	4240      	negs	r0, r0
    218c:	e7f3      	b.n	2176 <__gedf2+0x8a>
    218e:	465e      	mov	r6, fp
    2190:	4316      	orrs	r6, r2
    2192:	d0c6      	beq.n	2122 <__gedf2+0x36>
    2194:	e7f8      	b.n	2188 <__gedf2+0x9c>
    2196:	42ac      	cmp	r4, r5
    2198:	dc07      	bgt.n	21aa <__gedf2+0xbe>
    219a:	da0b      	bge.n	21b4 <__gedf2+0xc8>
    219c:	4661      	mov	r1, ip
    219e:	4248      	negs	r0, r1
    21a0:	4148      	adcs	r0, r1
    21a2:	4240      	negs	r0, r0
    21a4:	2301      	movs	r3, #1
    21a6:	4318      	orrs	r0, r3
    21a8:	e7e5      	b.n	2176 <__gedf2+0x8a>
    21aa:	4666      	mov	r6, ip
    21ac:	4270      	negs	r0, r6
    21ae:	2301      	movs	r3, #1
    21b0:	4318      	orrs	r0, r3
    21b2:	e7e0      	b.n	2176 <__gedf2+0x8a>
    21b4:	455f      	cmp	r7, fp
    21b6:	d80a      	bhi.n	21ce <__gedf2+0xe2>
    21b8:	d00e      	beq.n	21d8 <__gedf2+0xec>
    21ba:	2000      	movs	r0, #0
    21bc:	455f      	cmp	r7, fp
    21be:	d2da      	bcs.n	2176 <__gedf2+0x8a>
    21c0:	4665      	mov	r5, ip
    21c2:	4268      	negs	r0, r5
    21c4:	4168      	adcs	r0, r5
    21c6:	4240      	negs	r0, r0
    21c8:	2301      	movs	r3, #1
    21ca:	4318      	orrs	r0, r3
    21cc:	e7d3      	b.n	2176 <__gedf2+0x8a>
    21ce:	4662      	mov	r2, ip
    21d0:	4250      	negs	r0, r2
    21d2:	2301      	movs	r3, #1
    21d4:	4318      	orrs	r0, r3
    21d6:	e7ce      	b.n	2176 <__gedf2+0x8a>
    21d8:	45d0      	cmp	r8, sl
    21da:	d8f8      	bhi.n	21ce <__gedf2+0xe2>
    21dc:	2000      	movs	r0, #0
    21de:	45d0      	cmp	r8, sl
    21e0:	d3ee      	bcc.n	21c0 <__gedf2+0xd4>
    21e2:	e7c8      	b.n	2176 <__gedf2+0x8a>
    21e4:	000007ff 	.word	0x000007ff

000021e8 <__ledf2>:
__ltdf2():
    21e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ea:	4656      	mov	r6, sl
    21ec:	464d      	mov	r5, r9
    21ee:	4644      	mov	r4, r8
    21f0:	465f      	mov	r7, fp
    21f2:	b4f0      	push	{r4, r5, r6, r7}
    21f4:	1c0d      	adds	r5, r1, #0
    21f6:	b083      	sub	sp, #12
    21f8:	1c04      	adds	r4, r0, #0
    21fa:	9001      	str	r0, [sp, #4]
    21fc:	0fe8      	lsrs	r0, r5, #31
    21fe:	4681      	mov	r9, r0
    2200:	0318      	lsls	r0, r3, #12
    2202:	030f      	lsls	r7, r1, #12
    2204:	0b00      	lsrs	r0, r0, #12
    2206:	0b3f      	lsrs	r7, r7, #12
    2208:	4684      	mov	ip, r0
    220a:	4835      	ldr	r0, [pc, #212]	; (22e0 <__ledf2+0xf8>)
    220c:	9700      	str	r7, [sp, #0]
    220e:	0049      	lsls	r1, r1, #1
    2210:	005e      	lsls	r6, r3, #1
    2212:	0fdf      	lsrs	r7, r3, #31
    2214:	0d49      	lsrs	r1, r1, #21
    2216:	4692      	mov	sl, r2
    2218:	0d76      	lsrs	r6, r6, #21
    221a:	46b8      	mov	r8, r7
    221c:	4281      	cmp	r1, r0
    221e:	d034      	beq.n	228a <__ledf2+0xa2>
    2220:	482f      	ldr	r0, [pc, #188]	; (22e0 <__ledf2+0xf8>)
    2222:	4286      	cmp	r6, r0
    2224:	d036      	beq.n	2294 <__ledf2+0xac>
    2226:	2900      	cmp	r1, #0
    2228:	d018      	beq.n	225c <__ledf2+0x74>
    222a:	2e00      	cmp	r6, #0
    222c:	d11f      	bne.n	226e <__ledf2+0x86>
    222e:	1c34      	adds	r4, r6, #0
    2230:	4667      	mov	r7, ip
    2232:	433a      	orrs	r2, r7
    2234:	4253      	negs	r3, r2
    2236:	4153      	adcs	r3, r2
    2238:	2c00      	cmp	r4, #0
    223a:	d01f      	beq.n	227c <__ledf2+0x94>
    223c:	2000      	movs	r0, #0
    223e:	2b00      	cmp	r3, #0
    2240:	d105      	bne.n	224e <__ledf2+0x66>
    2242:	4642      	mov	r2, r8
    2244:	4250      	negs	r0, r2
    2246:	4150      	adcs	r0, r2
    2248:	4240      	negs	r0, r0
    224a:	2301      	movs	r3, #1
    224c:	4318      	orrs	r0, r3
    224e:	b003      	add	sp, #12
    2250:	bc3c      	pop	{r2, r3, r4, r5}
    2252:	4690      	mov	r8, r2
    2254:	4699      	mov	r9, r3
    2256:	46a2      	mov	sl, r4
    2258:	46ab      	mov	fp, r5
    225a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    225c:	9800      	ldr	r0, [sp, #0]
    225e:	4304      	orrs	r4, r0
    2260:	4260      	negs	r0, r4
    2262:	4160      	adcs	r0, r4
    2264:	1c04      	adds	r4, r0, #0
    2266:	2e00      	cmp	r6, #0
    2268:	d0e2      	beq.n	2230 <__ledf2+0x48>
    226a:	2800      	cmp	r0, #0
    226c:	d1e9      	bne.n	2242 <__ledf2+0x5a>
    226e:	45c1      	cmp	r9, r8
    2270:	d015      	beq.n	229e <__ledf2+0xb6>
    2272:	464f      	mov	r7, r9
    2274:	4278      	negs	r0, r7
    2276:	2301      	movs	r3, #1
    2278:	4318      	orrs	r0, r3
    227a:	e7e8      	b.n	224e <__ledf2+0x66>
    227c:	2b00      	cmp	r3, #0
    227e:	d0f6      	beq.n	226e <__ledf2+0x86>
    2280:	464b      	mov	r3, r9
    2282:	4258      	negs	r0, r3
    2284:	2301      	movs	r3, #1
    2286:	4318      	orrs	r0, r3
    2288:	e7e1      	b.n	224e <__ledf2+0x66>
    228a:	9f00      	ldr	r7, [sp, #0]
    228c:	2002      	movs	r0, #2
    228e:	4327      	orrs	r7, r4
    2290:	d1dd      	bne.n	224e <__ledf2+0x66>
    2292:	e7c5      	b.n	2220 <__ledf2+0x38>
    2294:	4667      	mov	r7, ip
    2296:	2002      	movs	r0, #2
    2298:	4317      	orrs	r7, r2
    229a:	d1d8      	bne.n	224e <__ledf2+0x66>
    229c:	e7c3      	b.n	2226 <__ledf2+0x3e>
    229e:	42b1      	cmp	r1, r6
    22a0:	dd04      	ble.n	22ac <__ledf2+0xc4>
    22a2:	464a      	mov	r2, r9
    22a4:	4250      	negs	r0, r2
    22a6:	2301      	movs	r3, #1
    22a8:	4318      	orrs	r0, r3
    22aa:	e7d0      	b.n	224e <__ledf2+0x66>
    22ac:	42b1      	cmp	r1, r6
    22ae:	db07      	blt.n	22c0 <__ledf2+0xd8>
    22b0:	9800      	ldr	r0, [sp, #0]
    22b2:	4560      	cmp	r0, ip
    22b4:	d8e4      	bhi.n	2280 <__ledf2+0x98>
    22b6:	d00a      	beq.n	22ce <__ledf2+0xe6>
    22b8:	9f00      	ldr	r7, [sp, #0]
    22ba:	2000      	movs	r0, #0
    22bc:	4567      	cmp	r7, ip
    22be:	d2c6      	bcs.n	224e <__ledf2+0x66>
    22c0:	464f      	mov	r7, r9
    22c2:	4278      	negs	r0, r7
    22c4:	4178      	adcs	r0, r7
    22c6:	4240      	negs	r0, r0
    22c8:	2301      	movs	r3, #1
    22ca:	4318      	orrs	r0, r3
    22cc:	e7bf      	b.n	224e <__ledf2+0x66>
    22ce:	9a01      	ldr	r2, [sp, #4]
    22d0:	4552      	cmp	r2, sl
    22d2:	d8d5      	bhi.n	2280 <__ledf2+0x98>
    22d4:	9a01      	ldr	r2, [sp, #4]
    22d6:	2000      	movs	r0, #0
    22d8:	4552      	cmp	r2, sl
    22da:	d3f1      	bcc.n	22c0 <__ledf2+0xd8>
    22dc:	e7b7      	b.n	224e <__ledf2+0x66>
    22de:	46c0      	nop			; (mov r8, r8)
    22e0:	000007ff 	.word	0x000007ff

000022e4 <__aeabi_dsub>:
__aeabi_dsub():
    22e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22e6:	465f      	mov	r7, fp
    22e8:	4656      	mov	r6, sl
    22ea:	4644      	mov	r4, r8
    22ec:	464d      	mov	r5, r9
    22ee:	b4f0      	push	{r4, r5, r6, r7}
    22f0:	030c      	lsls	r4, r1, #12
    22f2:	004d      	lsls	r5, r1, #1
    22f4:	0fcf      	lsrs	r7, r1, #31
    22f6:	0a61      	lsrs	r1, r4, #9
    22f8:	0f44      	lsrs	r4, r0, #29
    22fa:	4321      	orrs	r1, r4
    22fc:	00c4      	lsls	r4, r0, #3
    22fe:	0318      	lsls	r0, r3, #12
    2300:	0fde      	lsrs	r6, r3, #31
    2302:	4680      	mov	r8, r0
    2304:	46b4      	mov	ip, r6
    2306:	4646      	mov	r6, r8
    2308:	0058      	lsls	r0, r3, #1
    230a:	0a76      	lsrs	r6, r6, #9
    230c:	0f53      	lsrs	r3, r2, #29
    230e:	4333      	orrs	r3, r6
    2310:	00d6      	lsls	r6, r2, #3
    2312:	4ad1      	ldr	r2, [pc, #836]	; (2658 <__aeabi_dsub+0x374>)
    2314:	0d6d      	lsrs	r5, r5, #21
    2316:	46ba      	mov	sl, r7
    2318:	0d40      	lsrs	r0, r0, #21
    231a:	46b3      	mov	fp, r6
    231c:	4290      	cmp	r0, r2
    231e:	d100      	bne.n	2322 <__aeabi_dsub+0x3e>
    2320:	e0f5      	b.n	250e <__aeabi_dsub+0x22a>
    2322:	4662      	mov	r2, ip
    2324:	2601      	movs	r6, #1
    2326:	4072      	eors	r2, r6
    2328:	4694      	mov	ip, r2
    232a:	4567      	cmp	r7, ip
    232c:	d100      	bne.n	2330 <__aeabi_dsub+0x4c>
    232e:	e0ab      	b.n	2488 <__aeabi_dsub+0x1a4>
    2330:	1a2f      	subs	r7, r5, r0
    2332:	2f00      	cmp	r7, #0
    2334:	dc00      	bgt.n	2338 <__aeabi_dsub+0x54>
    2336:	e111      	b.n	255c <__aeabi_dsub+0x278>
    2338:	2800      	cmp	r0, #0
    233a:	d13e      	bne.n	23ba <__aeabi_dsub+0xd6>
    233c:	4658      	mov	r0, fp
    233e:	4318      	orrs	r0, r3
    2340:	d000      	beq.n	2344 <__aeabi_dsub+0x60>
    2342:	e0f1      	b.n	2528 <__aeabi_dsub+0x244>
    2344:	0760      	lsls	r0, r4, #29
    2346:	d100      	bne.n	234a <__aeabi_dsub+0x66>
    2348:	e097      	b.n	247a <__aeabi_dsub+0x196>
    234a:	230f      	movs	r3, #15
    234c:	4023      	ands	r3, r4
    234e:	2b04      	cmp	r3, #4
    2350:	d100      	bne.n	2354 <__aeabi_dsub+0x70>
    2352:	e122      	b.n	259a <__aeabi_dsub+0x2b6>
    2354:	1d22      	adds	r2, r4, #4
    2356:	42a2      	cmp	r2, r4
    2358:	41a4      	sbcs	r4, r4
    235a:	4264      	negs	r4, r4
    235c:	2380      	movs	r3, #128	; 0x80
    235e:	1909      	adds	r1, r1, r4
    2360:	041b      	lsls	r3, r3, #16
    2362:	2701      	movs	r7, #1
    2364:	4650      	mov	r0, sl
    2366:	400b      	ands	r3, r1
    2368:	4007      	ands	r7, r0
    236a:	1c14      	adds	r4, r2, #0
    236c:	2b00      	cmp	r3, #0
    236e:	d100      	bne.n	2372 <__aeabi_dsub+0x8e>
    2370:	e079      	b.n	2466 <__aeabi_dsub+0x182>
    2372:	4bb9      	ldr	r3, [pc, #740]	; (2658 <__aeabi_dsub+0x374>)
    2374:	3501      	adds	r5, #1
    2376:	429d      	cmp	r5, r3
    2378:	d100      	bne.n	237c <__aeabi_dsub+0x98>
    237a:	e10b      	b.n	2594 <__aeabi_dsub+0x2b0>
    237c:	4bb7      	ldr	r3, [pc, #732]	; (265c <__aeabi_dsub+0x378>)
    237e:	08e4      	lsrs	r4, r4, #3
    2380:	4019      	ands	r1, r3
    2382:	0748      	lsls	r0, r1, #29
    2384:	0249      	lsls	r1, r1, #9
    2386:	4304      	orrs	r4, r0
    2388:	0b0b      	lsrs	r3, r1, #12
    238a:	2000      	movs	r0, #0
    238c:	2100      	movs	r1, #0
    238e:	031b      	lsls	r3, r3, #12
    2390:	0b1a      	lsrs	r2, r3, #12
    2392:	0d0b      	lsrs	r3, r1, #20
    2394:	056d      	lsls	r5, r5, #21
    2396:	051b      	lsls	r3, r3, #20
    2398:	4313      	orrs	r3, r2
    239a:	086a      	lsrs	r2, r5, #1
    239c:	4db0      	ldr	r5, [pc, #704]	; (2660 <__aeabi_dsub+0x37c>)
    239e:	07ff      	lsls	r7, r7, #31
    23a0:	401d      	ands	r5, r3
    23a2:	4315      	orrs	r5, r2
    23a4:	006d      	lsls	r5, r5, #1
    23a6:	086d      	lsrs	r5, r5, #1
    23a8:	1c29      	adds	r1, r5, #0
    23aa:	4339      	orrs	r1, r7
    23ac:	1c20      	adds	r0, r4, #0
    23ae:	bc3c      	pop	{r2, r3, r4, r5}
    23b0:	4690      	mov	r8, r2
    23b2:	4699      	mov	r9, r3
    23b4:	46a2      	mov	sl, r4
    23b6:	46ab      	mov	fp, r5
    23b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23ba:	48a7      	ldr	r0, [pc, #668]	; (2658 <__aeabi_dsub+0x374>)
    23bc:	4285      	cmp	r5, r0
    23be:	d0c1      	beq.n	2344 <__aeabi_dsub+0x60>
    23c0:	2080      	movs	r0, #128	; 0x80
    23c2:	0400      	lsls	r0, r0, #16
    23c4:	4303      	orrs	r3, r0
    23c6:	2f38      	cmp	r7, #56	; 0x38
    23c8:	dd00      	ble.n	23cc <__aeabi_dsub+0xe8>
    23ca:	e0fd      	b.n	25c8 <__aeabi_dsub+0x2e4>
    23cc:	2f1f      	cmp	r7, #31
    23ce:	dd00      	ble.n	23d2 <__aeabi_dsub+0xee>
    23d0:	e131      	b.n	2636 <__aeabi_dsub+0x352>
    23d2:	2020      	movs	r0, #32
    23d4:	1bc0      	subs	r0, r0, r7
    23d6:	1c1a      	adds	r2, r3, #0
    23d8:	465e      	mov	r6, fp
    23da:	4082      	lsls	r2, r0
    23dc:	40fe      	lsrs	r6, r7
    23de:	4332      	orrs	r2, r6
    23e0:	4694      	mov	ip, r2
    23e2:	465a      	mov	r2, fp
    23e4:	4082      	lsls	r2, r0
    23e6:	1c10      	adds	r0, r2, #0
    23e8:	1e42      	subs	r2, r0, #1
    23ea:	4190      	sbcs	r0, r2
    23ec:	40fb      	lsrs	r3, r7
    23ee:	4662      	mov	r2, ip
    23f0:	4302      	orrs	r2, r0
    23f2:	1c1f      	adds	r7, r3, #0
    23f4:	1aa2      	subs	r2, r4, r2
    23f6:	4294      	cmp	r4, r2
    23f8:	41a4      	sbcs	r4, r4
    23fa:	4264      	negs	r4, r4
    23fc:	1bc9      	subs	r1, r1, r7
    23fe:	1b09      	subs	r1, r1, r4
    2400:	1c14      	adds	r4, r2, #0
    2402:	020a      	lsls	r2, r1, #8
    2404:	d59e      	bpl.n	2344 <__aeabi_dsub+0x60>
    2406:	0249      	lsls	r1, r1, #9
    2408:	0a4f      	lsrs	r7, r1, #9
    240a:	2f00      	cmp	r7, #0
    240c:	d100      	bne.n	2410 <__aeabi_dsub+0x12c>
    240e:	e0d6      	b.n	25be <__aeabi_dsub+0x2da>
    2410:	1c38      	adds	r0, r7, #0
    2412:	f000 fb79 	bl	2b08 <__clzsi2>
    2416:	1c02      	adds	r2, r0, #0
    2418:	3a08      	subs	r2, #8
    241a:	2a1f      	cmp	r2, #31
    241c:	dd00      	ble.n	2420 <__aeabi_dsub+0x13c>
    241e:	e0c3      	b.n	25a8 <__aeabi_dsub+0x2c4>
    2420:	2128      	movs	r1, #40	; 0x28
    2422:	1c23      	adds	r3, r4, #0
    2424:	1a09      	subs	r1, r1, r0
    2426:	4097      	lsls	r7, r2
    2428:	40cb      	lsrs	r3, r1
    242a:	431f      	orrs	r7, r3
    242c:	4094      	lsls	r4, r2
    242e:	4295      	cmp	r5, r2
    2430:	dd00      	ble.n	2434 <__aeabi_dsub+0x150>
    2432:	e0c0      	b.n	25b6 <__aeabi_dsub+0x2d2>
    2434:	1b55      	subs	r5, r2, r5
    2436:	1c69      	adds	r1, r5, #1
    2438:	291f      	cmp	r1, #31
    243a:	dd00      	ble.n	243e <__aeabi_dsub+0x15a>
    243c:	e0ea      	b.n	2614 <__aeabi_dsub+0x330>
    243e:	221f      	movs	r2, #31
    2440:	1b55      	subs	r5, r2, r5
    2442:	1c3b      	adds	r3, r7, #0
    2444:	1c22      	adds	r2, r4, #0
    2446:	40ab      	lsls	r3, r5
    2448:	40ca      	lsrs	r2, r1
    244a:	40ac      	lsls	r4, r5
    244c:	1e65      	subs	r5, r4, #1
    244e:	41ac      	sbcs	r4, r5
    2450:	4313      	orrs	r3, r2
    2452:	40cf      	lsrs	r7, r1
    2454:	431c      	orrs	r4, r3
    2456:	1c39      	adds	r1, r7, #0
    2458:	2500      	movs	r5, #0
    245a:	e773      	b.n	2344 <__aeabi_dsub+0x60>
    245c:	2180      	movs	r1, #128	; 0x80
    245e:	4d7e      	ldr	r5, [pc, #504]	; (2658 <__aeabi_dsub+0x374>)
    2460:	2700      	movs	r7, #0
    2462:	03c9      	lsls	r1, r1, #15
    2464:	2400      	movs	r4, #0
    2466:	4b7c      	ldr	r3, [pc, #496]	; (2658 <__aeabi_dsub+0x374>)
    2468:	0748      	lsls	r0, r1, #29
    246a:	08e4      	lsrs	r4, r4, #3
    246c:	4304      	orrs	r4, r0
    246e:	08c9      	lsrs	r1, r1, #3
    2470:	429d      	cmp	r5, r3
    2472:	d050      	beq.n	2516 <__aeabi_dsub+0x232>
    2474:	0309      	lsls	r1, r1, #12
    2476:	0b0b      	lsrs	r3, r1, #12
    2478:	e787      	b.n	238a <__aeabi_dsub+0xa6>
    247a:	2380      	movs	r3, #128	; 0x80
    247c:	041b      	lsls	r3, r3, #16
    247e:	2701      	movs	r7, #1
    2480:	4652      	mov	r2, sl
    2482:	400b      	ands	r3, r1
    2484:	4017      	ands	r7, r2
    2486:	e771      	b.n	236c <__aeabi_dsub+0x88>
    2488:	1a2a      	subs	r2, r5, r0
    248a:	4694      	mov	ip, r2
    248c:	2a00      	cmp	r2, #0
    248e:	dc00      	bgt.n	2492 <__aeabi_dsub+0x1ae>
    2490:	e0a1      	b.n	25d6 <__aeabi_dsub+0x2f2>
    2492:	2800      	cmp	r0, #0
    2494:	d054      	beq.n	2540 <__aeabi_dsub+0x25c>
    2496:	4870      	ldr	r0, [pc, #448]	; (2658 <__aeabi_dsub+0x374>)
    2498:	4285      	cmp	r5, r0
    249a:	d100      	bne.n	249e <__aeabi_dsub+0x1ba>
    249c:	e752      	b.n	2344 <__aeabi_dsub+0x60>
    249e:	2080      	movs	r0, #128	; 0x80
    24a0:	0400      	lsls	r0, r0, #16
    24a2:	4303      	orrs	r3, r0
    24a4:	4660      	mov	r0, ip
    24a6:	2838      	cmp	r0, #56	; 0x38
    24a8:	dd00      	ble.n	24ac <__aeabi_dsub+0x1c8>
    24aa:	e10e      	b.n	26ca <__aeabi_dsub+0x3e6>
    24ac:	281f      	cmp	r0, #31
    24ae:	dd00      	ble.n	24b2 <__aeabi_dsub+0x1ce>
    24b0:	e157      	b.n	2762 <__aeabi_dsub+0x47e>
    24b2:	4662      	mov	r2, ip
    24b4:	2020      	movs	r0, #32
    24b6:	1a80      	subs	r0, r0, r2
    24b8:	1c1e      	adds	r6, r3, #0
    24ba:	4086      	lsls	r6, r0
    24bc:	46b1      	mov	r9, r6
    24be:	465e      	mov	r6, fp
    24c0:	40d6      	lsrs	r6, r2
    24c2:	464a      	mov	r2, r9
    24c4:	4332      	orrs	r2, r6
    24c6:	465e      	mov	r6, fp
    24c8:	4086      	lsls	r6, r0
    24ca:	4690      	mov	r8, r2
    24cc:	1c30      	adds	r0, r6, #0
    24ce:	1e42      	subs	r2, r0, #1
    24d0:	4190      	sbcs	r0, r2
    24d2:	4642      	mov	r2, r8
    24d4:	4302      	orrs	r2, r0
    24d6:	4660      	mov	r0, ip
    24d8:	40c3      	lsrs	r3, r0
    24da:	1912      	adds	r2, r2, r4
    24dc:	42a2      	cmp	r2, r4
    24de:	41a4      	sbcs	r4, r4
    24e0:	4264      	negs	r4, r4
    24e2:	1859      	adds	r1, r3, r1
    24e4:	1909      	adds	r1, r1, r4
    24e6:	1c14      	adds	r4, r2, #0
    24e8:	0208      	lsls	r0, r1, #8
    24ea:	d400      	bmi.n	24ee <__aeabi_dsub+0x20a>
    24ec:	e72a      	b.n	2344 <__aeabi_dsub+0x60>
    24ee:	4b5a      	ldr	r3, [pc, #360]	; (2658 <__aeabi_dsub+0x374>)
    24f0:	3501      	adds	r5, #1
    24f2:	429d      	cmp	r5, r3
    24f4:	d100      	bne.n	24f8 <__aeabi_dsub+0x214>
    24f6:	e131      	b.n	275c <__aeabi_dsub+0x478>
    24f8:	4b58      	ldr	r3, [pc, #352]	; (265c <__aeabi_dsub+0x378>)
    24fa:	0860      	lsrs	r0, r4, #1
    24fc:	4019      	ands	r1, r3
    24fe:	2301      	movs	r3, #1
    2500:	4023      	ands	r3, r4
    2502:	1c1c      	adds	r4, r3, #0
    2504:	4304      	orrs	r4, r0
    2506:	07cb      	lsls	r3, r1, #31
    2508:	431c      	orrs	r4, r3
    250a:	0849      	lsrs	r1, r1, #1
    250c:	e71a      	b.n	2344 <__aeabi_dsub+0x60>
    250e:	431e      	orrs	r6, r3
    2510:	d000      	beq.n	2514 <__aeabi_dsub+0x230>
    2512:	e70a      	b.n	232a <__aeabi_dsub+0x46>
    2514:	e705      	b.n	2322 <__aeabi_dsub+0x3e>
    2516:	1c23      	adds	r3, r4, #0
    2518:	430b      	orrs	r3, r1
    251a:	d03b      	beq.n	2594 <__aeabi_dsub+0x2b0>
    251c:	2380      	movs	r3, #128	; 0x80
    251e:	031b      	lsls	r3, r3, #12
    2520:	430b      	orrs	r3, r1
    2522:	031b      	lsls	r3, r3, #12
    2524:	0b1b      	lsrs	r3, r3, #12
    2526:	e730      	b.n	238a <__aeabi_dsub+0xa6>
    2528:	3f01      	subs	r7, #1
    252a:	2f00      	cmp	r7, #0
    252c:	d16d      	bne.n	260a <__aeabi_dsub+0x326>
    252e:	465e      	mov	r6, fp
    2530:	1ba2      	subs	r2, r4, r6
    2532:	4294      	cmp	r4, r2
    2534:	41a4      	sbcs	r4, r4
    2536:	4264      	negs	r4, r4
    2538:	1ac9      	subs	r1, r1, r3
    253a:	1b09      	subs	r1, r1, r4
    253c:	1c14      	adds	r4, r2, #0
    253e:	e760      	b.n	2402 <__aeabi_dsub+0x11e>
    2540:	4658      	mov	r0, fp
    2542:	4318      	orrs	r0, r3
    2544:	d100      	bne.n	2548 <__aeabi_dsub+0x264>
    2546:	e6fd      	b.n	2344 <__aeabi_dsub+0x60>
    2548:	2601      	movs	r6, #1
    254a:	4276      	negs	r6, r6
    254c:	44b4      	add	ip, r6
    254e:	4660      	mov	r0, ip
    2550:	2800      	cmp	r0, #0
    2552:	d000      	beq.n	2556 <__aeabi_dsub+0x272>
    2554:	e0d0      	b.n	26f8 <__aeabi_dsub+0x414>
    2556:	465e      	mov	r6, fp
    2558:	1932      	adds	r2, r6, r4
    255a:	e7bf      	b.n	24dc <__aeabi_dsub+0x1f8>
    255c:	2f00      	cmp	r7, #0
    255e:	d000      	beq.n	2562 <__aeabi_dsub+0x27e>
    2560:	e080      	b.n	2664 <__aeabi_dsub+0x380>
    2562:	1c68      	adds	r0, r5, #1
    2564:	0540      	lsls	r0, r0, #21
    2566:	0d40      	lsrs	r0, r0, #21
    2568:	2801      	cmp	r0, #1
    256a:	dc00      	bgt.n	256e <__aeabi_dsub+0x28a>
    256c:	e0e8      	b.n	2740 <__aeabi_dsub+0x45c>
    256e:	465a      	mov	r2, fp
    2570:	1aa2      	subs	r2, r4, r2
    2572:	4294      	cmp	r4, r2
    2574:	41bf      	sbcs	r7, r7
    2576:	1ac8      	subs	r0, r1, r3
    2578:	427f      	negs	r7, r7
    257a:	1bc7      	subs	r7, r0, r7
    257c:	023e      	lsls	r6, r7, #8
    257e:	d400      	bmi.n	2582 <__aeabi_dsub+0x29e>
    2580:	e098      	b.n	26b4 <__aeabi_dsub+0x3d0>
    2582:	4658      	mov	r0, fp
    2584:	1b04      	subs	r4, r0, r4
    2586:	45a3      	cmp	fp, r4
    2588:	4192      	sbcs	r2, r2
    258a:	1a59      	subs	r1, r3, r1
    258c:	4252      	negs	r2, r2
    258e:	1a8f      	subs	r7, r1, r2
    2590:	46e2      	mov	sl, ip
    2592:	e73a      	b.n	240a <__aeabi_dsub+0x126>
    2594:	2300      	movs	r3, #0
    2596:	2400      	movs	r4, #0
    2598:	e6f7      	b.n	238a <__aeabi_dsub+0xa6>
    259a:	2380      	movs	r3, #128	; 0x80
    259c:	041b      	lsls	r3, r3, #16
    259e:	2701      	movs	r7, #1
    25a0:	4656      	mov	r6, sl
    25a2:	400b      	ands	r3, r1
    25a4:	4037      	ands	r7, r6
    25a6:	e6e1      	b.n	236c <__aeabi_dsub+0x88>
    25a8:	1c27      	adds	r7, r4, #0
    25aa:	3828      	subs	r0, #40	; 0x28
    25ac:	4087      	lsls	r7, r0
    25ae:	2400      	movs	r4, #0
    25b0:	4295      	cmp	r5, r2
    25b2:	dc00      	bgt.n	25b6 <__aeabi_dsub+0x2d2>
    25b4:	e73e      	b.n	2434 <__aeabi_dsub+0x150>
    25b6:	4929      	ldr	r1, [pc, #164]	; (265c <__aeabi_dsub+0x378>)
    25b8:	1aad      	subs	r5, r5, r2
    25ba:	4039      	ands	r1, r7
    25bc:	e6c2      	b.n	2344 <__aeabi_dsub+0x60>
    25be:	1c20      	adds	r0, r4, #0
    25c0:	f000 faa2 	bl	2b08 <__clzsi2>
    25c4:	3020      	adds	r0, #32
    25c6:	e726      	b.n	2416 <__aeabi_dsub+0x132>
    25c8:	465a      	mov	r2, fp
    25ca:	431a      	orrs	r2, r3
    25cc:	1e53      	subs	r3, r2, #1
    25ce:	419a      	sbcs	r2, r3
    25d0:	b2d2      	uxtb	r2, r2
    25d2:	2700      	movs	r7, #0
    25d4:	e70e      	b.n	23f4 <__aeabi_dsub+0x110>
    25d6:	2a00      	cmp	r2, #0
    25d8:	d000      	beq.n	25dc <__aeabi_dsub+0x2f8>
    25da:	e0de      	b.n	279a <__aeabi_dsub+0x4b6>
    25dc:	1c68      	adds	r0, r5, #1
    25de:	0546      	lsls	r6, r0, #21
    25e0:	0d76      	lsrs	r6, r6, #21
    25e2:	2e01      	cmp	r6, #1
    25e4:	dc00      	bgt.n	25e8 <__aeabi_dsub+0x304>
    25e6:	e090      	b.n	270a <__aeabi_dsub+0x426>
    25e8:	4d1b      	ldr	r5, [pc, #108]	; (2658 <__aeabi_dsub+0x374>)
    25ea:	42a8      	cmp	r0, r5
    25ec:	d100      	bne.n	25f0 <__aeabi_dsub+0x30c>
    25ee:	e0f5      	b.n	27dc <__aeabi_dsub+0x4f8>
    25f0:	465e      	mov	r6, fp
    25f2:	1932      	adds	r2, r6, r4
    25f4:	42a2      	cmp	r2, r4
    25f6:	41a4      	sbcs	r4, r4
    25f8:	4264      	negs	r4, r4
    25fa:	1859      	adds	r1, r3, r1
    25fc:	1909      	adds	r1, r1, r4
    25fe:	07cc      	lsls	r4, r1, #31
    2600:	0852      	lsrs	r2, r2, #1
    2602:	4314      	orrs	r4, r2
    2604:	0849      	lsrs	r1, r1, #1
    2606:	1c05      	adds	r5, r0, #0
    2608:	e69c      	b.n	2344 <__aeabi_dsub+0x60>
    260a:	4813      	ldr	r0, [pc, #76]	; (2658 <__aeabi_dsub+0x374>)
    260c:	4285      	cmp	r5, r0
    260e:	d000      	beq.n	2612 <__aeabi_dsub+0x32e>
    2610:	e6d9      	b.n	23c6 <__aeabi_dsub+0xe2>
    2612:	e697      	b.n	2344 <__aeabi_dsub+0x60>
    2614:	1c2b      	adds	r3, r5, #0
    2616:	3b1f      	subs	r3, #31
    2618:	1c3e      	adds	r6, r7, #0
    261a:	40de      	lsrs	r6, r3
    261c:	1c33      	adds	r3, r6, #0
    261e:	2920      	cmp	r1, #32
    2620:	d06f      	beq.n	2702 <__aeabi_dsub+0x41e>
    2622:	223f      	movs	r2, #63	; 0x3f
    2624:	1b55      	subs	r5, r2, r5
    2626:	40af      	lsls	r7, r5
    2628:	433c      	orrs	r4, r7
    262a:	1e60      	subs	r0, r4, #1
    262c:	4184      	sbcs	r4, r0
    262e:	431c      	orrs	r4, r3
    2630:	2100      	movs	r1, #0
    2632:	2500      	movs	r5, #0
    2634:	e686      	b.n	2344 <__aeabi_dsub+0x60>
    2636:	1c38      	adds	r0, r7, #0
    2638:	3820      	subs	r0, #32
    263a:	1c1e      	adds	r6, r3, #0
    263c:	40c6      	lsrs	r6, r0
    263e:	1c30      	adds	r0, r6, #0
    2640:	2f20      	cmp	r7, #32
    2642:	d060      	beq.n	2706 <__aeabi_dsub+0x422>
    2644:	2240      	movs	r2, #64	; 0x40
    2646:	1bd7      	subs	r7, r2, r7
    2648:	40bb      	lsls	r3, r7
    264a:	465a      	mov	r2, fp
    264c:	431a      	orrs	r2, r3
    264e:	1e53      	subs	r3, r2, #1
    2650:	419a      	sbcs	r2, r3
    2652:	4302      	orrs	r2, r0
    2654:	2700      	movs	r7, #0
    2656:	e6cd      	b.n	23f4 <__aeabi_dsub+0x110>
    2658:	000007ff 	.word	0x000007ff
    265c:	ff7fffff 	.word	0xff7fffff
    2660:	800fffff 	.word	0x800fffff
    2664:	2d00      	cmp	r5, #0
    2666:	d037      	beq.n	26d8 <__aeabi_dsub+0x3f4>
    2668:	4db6      	ldr	r5, [pc, #728]	; (2944 <__aeabi_dsub+0x660>)
    266a:	42a8      	cmp	r0, r5
    266c:	d100      	bne.n	2670 <__aeabi_dsub+0x38c>
    266e:	e08f      	b.n	2790 <__aeabi_dsub+0x4ac>
    2670:	2580      	movs	r5, #128	; 0x80
    2672:	042d      	lsls	r5, r5, #16
    2674:	427f      	negs	r7, r7
    2676:	4329      	orrs	r1, r5
    2678:	2f38      	cmp	r7, #56	; 0x38
    267a:	dd00      	ble.n	267e <__aeabi_dsub+0x39a>
    267c:	e0a8      	b.n	27d0 <__aeabi_dsub+0x4ec>
    267e:	2f1f      	cmp	r7, #31
    2680:	dd00      	ble.n	2684 <__aeabi_dsub+0x3a0>
    2682:	e124      	b.n	28ce <__aeabi_dsub+0x5ea>
    2684:	2520      	movs	r5, #32
    2686:	1bed      	subs	r5, r5, r7
    2688:	1c0e      	adds	r6, r1, #0
    268a:	40ae      	lsls	r6, r5
    268c:	46b0      	mov	r8, r6
    268e:	1c26      	adds	r6, r4, #0
    2690:	40fe      	lsrs	r6, r7
    2692:	4642      	mov	r2, r8
    2694:	40ac      	lsls	r4, r5
    2696:	4316      	orrs	r6, r2
    2698:	1e65      	subs	r5, r4, #1
    269a:	41ac      	sbcs	r4, r5
    269c:	4334      	orrs	r4, r6
    269e:	40f9      	lsrs	r1, r7
    26a0:	465a      	mov	r2, fp
    26a2:	1b14      	subs	r4, r2, r4
    26a4:	45a3      	cmp	fp, r4
    26a6:	4192      	sbcs	r2, r2
    26a8:	1a5b      	subs	r3, r3, r1
    26aa:	4252      	negs	r2, r2
    26ac:	1a99      	subs	r1, r3, r2
    26ae:	1c05      	adds	r5, r0, #0
    26b0:	46e2      	mov	sl, ip
    26b2:	e6a6      	b.n	2402 <__aeabi_dsub+0x11e>
    26b4:	1c13      	adds	r3, r2, #0
    26b6:	433b      	orrs	r3, r7
    26b8:	1c14      	adds	r4, r2, #0
    26ba:	2b00      	cmp	r3, #0
    26bc:	d000      	beq.n	26c0 <__aeabi_dsub+0x3dc>
    26be:	e6a4      	b.n	240a <__aeabi_dsub+0x126>
    26c0:	2700      	movs	r7, #0
    26c2:	2100      	movs	r1, #0
    26c4:	2500      	movs	r5, #0
    26c6:	2400      	movs	r4, #0
    26c8:	e6cd      	b.n	2466 <__aeabi_dsub+0x182>
    26ca:	465a      	mov	r2, fp
    26cc:	431a      	orrs	r2, r3
    26ce:	1e53      	subs	r3, r2, #1
    26d0:	419a      	sbcs	r2, r3
    26d2:	b2d2      	uxtb	r2, r2
    26d4:	2300      	movs	r3, #0
    26d6:	e700      	b.n	24da <__aeabi_dsub+0x1f6>
    26d8:	1c0d      	adds	r5, r1, #0
    26da:	4325      	orrs	r5, r4
    26dc:	d058      	beq.n	2790 <__aeabi_dsub+0x4ac>
    26de:	43ff      	mvns	r7, r7
    26e0:	2f00      	cmp	r7, #0
    26e2:	d151      	bne.n	2788 <__aeabi_dsub+0x4a4>
    26e4:	465a      	mov	r2, fp
    26e6:	1b14      	subs	r4, r2, r4
    26e8:	45a3      	cmp	fp, r4
    26ea:	4192      	sbcs	r2, r2
    26ec:	1a59      	subs	r1, r3, r1
    26ee:	4252      	negs	r2, r2
    26f0:	1a89      	subs	r1, r1, r2
    26f2:	1c05      	adds	r5, r0, #0
    26f4:	46e2      	mov	sl, ip
    26f6:	e684      	b.n	2402 <__aeabi_dsub+0x11e>
    26f8:	4892      	ldr	r0, [pc, #584]	; (2944 <__aeabi_dsub+0x660>)
    26fa:	4285      	cmp	r5, r0
    26fc:	d000      	beq.n	2700 <__aeabi_dsub+0x41c>
    26fe:	e6d1      	b.n	24a4 <__aeabi_dsub+0x1c0>
    2700:	e620      	b.n	2344 <__aeabi_dsub+0x60>
    2702:	2700      	movs	r7, #0
    2704:	e790      	b.n	2628 <__aeabi_dsub+0x344>
    2706:	2300      	movs	r3, #0
    2708:	e79f      	b.n	264a <__aeabi_dsub+0x366>
    270a:	1c08      	adds	r0, r1, #0
    270c:	4320      	orrs	r0, r4
    270e:	2d00      	cmp	r5, #0
    2710:	d000      	beq.n	2714 <__aeabi_dsub+0x430>
    2712:	e0c2      	b.n	289a <__aeabi_dsub+0x5b6>
    2714:	2800      	cmp	r0, #0
    2716:	d100      	bne.n	271a <__aeabi_dsub+0x436>
    2718:	e0ef      	b.n	28fa <__aeabi_dsub+0x616>
    271a:	4658      	mov	r0, fp
    271c:	4318      	orrs	r0, r3
    271e:	d100      	bne.n	2722 <__aeabi_dsub+0x43e>
    2720:	e610      	b.n	2344 <__aeabi_dsub+0x60>
    2722:	4658      	mov	r0, fp
    2724:	1902      	adds	r2, r0, r4
    2726:	42a2      	cmp	r2, r4
    2728:	41a4      	sbcs	r4, r4
    272a:	4264      	negs	r4, r4
    272c:	1859      	adds	r1, r3, r1
    272e:	1909      	adds	r1, r1, r4
    2730:	1c14      	adds	r4, r2, #0
    2732:	020a      	lsls	r2, r1, #8
    2734:	d400      	bmi.n	2738 <__aeabi_dsub+0x454>
    2736:	e605      	b.n	2344 <__aeabi_dsub+0x60>
    2738:	4b83      	ldr	r3, [pc, #524]	; (2948 <__aeabi_dsub+0x664>)
    273a:	2501      	movs	r5, #1
    273c:	4019      	ands	r1, r3
    273e:	e601      	b.n	2344 <__aeabi_dsub+0x60>
    2740:	1c08      	adds	r0, r1, #0
    2742:	4320      	orrs	r0, r4
    2744:	2d00      	cmp	r5, #0
    2746:	d138      	bne.n	27ba <__aeabi_dsub+0x4d6>
    2748:	2800      	cmp	r0, #0
    274a:	d16f      	bne.n	282c <__aeabi_dsub+0x548>
    274c:	4659      	mov	r1, fp
    274e:	4319      	orrs	r1, r3
    2750:	d003      	beq.n	275a <__aeabi_dsub+0x476>
    2752:	1c19      	adds	r1, r3, #0
    2754:	465c      	mov	r4, fp
    2756:	46e2      	mov	sl, ip
    2758:	e5f4      	b.n	2344 <__aeabi_dsub+0x60>
    275a:	2700      	movs	r7, #0
    275c:	2100      	movs	r1, #0
    275e:	2400      	movs	r4, #0
    2760:	e681      	b.n	2466 <__aeabi_dsub+0x182>
    2762:	4660      	mov	r0, ip
    2764:	3820      	subs	r0, #32
    2766:	1c1a      	adds	r2, r3, #0
    2768:	40c2      	lsrs	r2, r0
    276a:	4666      	mov	r6, ip
    276c:	1c10      	adds	r0, r2, #0
    276e:	2e20      	cmp	r6, #32
    2770:	d100      	bne.n	2774 <__aeabi_dsub+0x490>
    2772:	e0aa      	b.n	28ca <__aeabi_dsub+0x5e6>
    2774:	2240      	movs	r2, #64	; 0x40
    2776:	1b92      	subs	r2, r2, r6
    2778:	4093      	lsls	r3, r2
    277a:	465a      	mov	r2, fp
    277c:	431a      	orrs	r2, r3
    277e:	1e53      	subs	r3, r2, #1
    2780:	419a      	sbcs	r2, r3
    2782:	4302      	orrs	r2, r0
    2784:	2300      	movs	r3, #0
    2786:	e6a8      	b.n	24da <__aeabi_dsub+0x1f6>
    2788:	4d6e      	ldr	r5, [pc, #440]	; (2944 <__aeabi_dsub+0x660>)
    278a:	42a8      	cmp	r0, r5
    278c:	d000      	beq.n	2790 <__aeabi_dsub+0x4ac>
    278e:	e773      	b.n	2678 <__aeabi_dsub+0x394>
    2790:	1c19      	adds	r1, r3, #0
    2792:	465c      	mov	r4, fp
    2794:	1c05      	adds	r5, r0, #0
    2796:	46e2      	mov	sl, ip
    2798:	e5d4      	b.n	2344 <__aeabi_dsub+0x60>
    279a:	2d00      	cmp	r5, #0
    279c:	d122      	bne.n	27e4 <__aeabi_dsub+0x500>
    279e:	1c0d      	adds	r5, r1, #0
    27a0:	4325      	orrs	r5, r4
    27a2:	d076      	beq.n	2892 <__aeabi_dsub+0x5ae>
    27a4:	43d5      	mvns	r5, r2
    27a6:	2d00      	cmp	r5, #0
    27a8:	d170      	bne.n	288c <__aeabi_dsub+0x5a8>
    27aa:	445c      	add	r4, fp
    27ac:	455c      	cmp	r4, fp
    27ae:	4192      	sbcs	r2, r2
    27b0:	1859      	adds	r1, r3, r1
    27b2:	4252      	negs	r2, r2
    27b4:	1889      	adds	r1, r1, r2
    27b6:	1c05      	adds	r5, r0, #0
    27b8:	e696      	b.n	24e8 <__aeabi_dsub+0x204>
    27ba:	2800      	cmp	r0, #0
    27bc:	d14c      	bne.n	2858 <__aeabi_dsub+0x574>
    27be:	4659      	mov	r1, fp
    27c0:	4319      	orrs	r1, r3
    27c2:	d100      	bne.n	27c6 <__aeabi_dsub+0x4e2>
    27c4:	e64a      	b.n	245c <__aeabi_dsub+0x178>
    27c6:	1c19      	adds	r1, r3, #0
    27c8:	465c      	mov	r4, fp
    27ca:	46e2      	mov	sl, ip
    27cc:	4d5d      	ldr	r5, [pc, #372]	; (2944 <__aeabi_dsub+0x660>)
    27ce:	e5b9      	b.n	2344 <__aeabi_dsub+0x60>
    27d0:	430c      	orrs	r4, r1
    27d2:	1e61      	subs	r1, r4, #1
    27d4:	418c      	sbcs	r4, r1
    27d6:	b2e4      	uxtb	r4, r4
    27d8:	2100      	movs	r1, #0
    27da:	e761      	b.n	26a0 <__aeabi_dsub+0x3bc>
    27dc:	1c05      	adds	r5, r0, #0
    27de:	2100      	movs	r1, #0
    27e0:	2400      	movs	r4, #0
    27e2:	e640      	b.n	2466 <__aeabi_dsub+0x182>
    27e4:	4d57      	ldr	r5, [pc, #348]	; (2944 <__aeabi_dsub+0x660>)
    27e6:	42a8      	cmp	r0, r5
    27e8:	d053      	beq.n	2892 <__aeabi_dsub+0x5ae>
    27ea:	4255      	negs	r5, r2
    27ec:	2280      	movs	r2, #128	; 0x80
    27ee:	0416      	lsls	r6, r2, #16
    27f0:	4331      	orrs	r1, r6
    27f2:	2d38      	cmp	r5, #56	; 0x38
    27f4:	dc7b      	bgt.n	28ee <__aeabi_dsub+0x60a>
    27f6:	2d1f      	cmp	r5, #31
    27f8:	dd00      	ble.n	27fc <__aeabi_dsub+0x518>
    27fa:	e08c      	b.n	2916 <__aeabi_dsub+0x632>
    27fc:	2220      	movs	r2, #32
    27fe:	1b56      	subs	r6, r2, r5
    2800:	1c0a      	adds	r2, r1, #0
    2802:	46b4      	mov	ip, r6
    2804:	40b2      	lsls	r2, r6
    2806:	1c26      	adds	r6, r4, #0
    2808:	40ee      	lsrs	r6, r5
    280a:	4332      	orrs	r2, r6
    280c:	4690      	mov	r8, r2
    280e:	4662      	mov	r2, ip
    2810:	4094      	lsls	r4, r2
    2812:	1e66      	subs	r6, r4, #1
    2814:	41b4      	sbcs	r4, r6
    2816:	4642      	mov	r2, r8
    2818:	4314      	orrs	r4, r2
    281a:	40e9      	lsrs	r1, r5
    281c:	445c      	add	r4, fp
    281e:	455c      	cmp	r4, fp
    2820:	4192      	sbcs	r2, r2
    2822:	18cb      	adds	r3, r1, r3
    2824:	4252      	negs	r2, r2
    2826:	1899      	adds	r1, r3, r2
    2828:	1c05      	adds	r5, r0, #0
    282a:	e65d      	b.n	24e8 <__aeabi_dsub+0x204>
    282c:	4658      	mov	r0, fp
    282e:	4318      	orrs	r0, r3
    2830:	d100      	bne.n	2834 <__aeabi_dsub+0x550>
    2832:	e587      	b.n	2344 <__aeabi_dsub+0x60>
    2834:	465e      	mov	r6, fp
    2836:	1ba7      	subs	r7, r4, r6
    2838:	42bc      	cmp	r4, r7
    283a:	4192      	sbcs	r2, r2
    283c:	1ac8      	subs	r0, r1, r3
    283e:	4252      	negs	r2, r2
    2840:	1a80      	subs	r0, r0, r2
    2842:	0206      	lsls	r6, r0, #8
    2844:	d560      	bpl.n	2908 <__aeabi_dsub+0x624>
    2846:	4658      	mov	r0, fp
    2848:	1b04      	subs	r4, r0, r4
    284a:	45a3      	cmp	fp, r4
    284c:	4192      	sbcs	r2, r2
    284e:	1a59      	subs	r1, r3, r1
    2850:	4252      	negs	r2, r2
    2852:	1a89      	subs	r1, r1, r2
    2854:	46e2      	mov	sl, ip
    2856:	e575      	b.n	2344 <__aeabi_dsub+0x60>
    2858:	4658      	mov	r0, fp
    285a:	4318      	orrs	r0, r3
    285c:	d033      	beq.n	28c6 <__aeabi_dsub+0x5e2>
    285e:	0748      	lsls	r0, r1, #29
    2860:	08e4      	lsrs	r4, r4, #3
    2862:	4304      	orrs	r4, r0
    2864:	2080      	movs	r0, #128	; 0x80
    2866:	08c9      	lsrs	r1, r1, #3
    2868:	0300      	lsls	r0, r0, #12
    286a:	4201      	tst	r1, r0
    286c:	d008      	beq.n	2880 <__aeabi_dsub+0x59c>
    286e:	08dd      	lsrs	r5, r3, #3
    2870:	4205      	tst	r5, r0
    2872:	d105      	bne.n	2880 <__aeabi_dsub+0x59c>
    2874:	4659      	mov	r1, fp
    2876:	08ca      	lsrs	r2, r1, #3
    2878:	075c      	lsls	r4, r3, #29
    287a:	4314      	orrs	r4, r2
    287c:	1c29      	adds	r1, r5, #0
    287e:	46e2      	mov	sl, ip
    2880:	0f63      	lsrs	r3, r4, #29
    2882:	00c9      	lsls	r1, r1, #3
    2884:	4319      	orrs	r1, r3
    2886:	00e4      	lsls	r4, r4, #3
    2888:	4d2e      	ldr	r5, [pc, #184]	; (2944 <__aeabi_dsub+0x660>)
    288a:	e55b      	b.n	2344 <__aeabi_dsub+0x60>
    288c:	4a2d      	ldr	r2, [pc, #180]	; (2944 <__aeabi_dsub+0x660>)
    288e:	4290      	cmp	r0, r2
    2890:	d1af      	bne.n	27f2 <__aeabi_dsub+0x50e>
    2892:	1c19      	adds	r1, r3, #0
    2894:	465c      	mov	r4, fp
    2896:	1c05      	adds	r5, r0, #0
    2898:	e554      	b.n	2344 <__aeabi_dsub+0x60>
    289a:	2800      	cmp	r0, #0
    289c:	d030      	beq.n	2900 <__aeabi_dsub+0x61c>
    289e:	4658      	mov	r0, fp
    28a0:	4318      	orrs	r0, r3
    28a2:	d010      	beq.n	28c6 <__aeabi_dsub+0x5e2>
    28a4:	2580      	movs	r5, #128	; 0x80
    28a6:	0748      	lsls	r0, r1, #29
    28a8:	08e4      	lsrs	r4, r4, #3
    28aa:	08c9      	lsrs	r1, r1, #3
    28ac:	032d      	lsls	r5, r5, #12
    28ae:	4304      	orrs	r4, r0
    28b0:	4229      	tst	r1, r5
    28b2:	d0e5      	beq.n	2880 <__aeabi_dsub+0x59c>
    28b4:	08d8      	lsrs	r0, r3, #3
    28b6:	4228      	tst	r0, r5
    28b8:	d1e2      	bne.n	2880 <__aeabi_dsub+0x59c>
    28ba:	465d      	mov	r5, fp
    28bc:	08ea      	lsrs	r2, r5, #3
    28be:	075c      	lsls	r4, r3, #29
    28c0:	4314      	orrs	r4, r2
    28c2:	1c01      	adds	r1, r0, #0
    28c4:	e7dc      	b.n	2880 <__aeabi_dsub+0x59c>
    28c6:	4d1f      	ldr	r5, [pc, #124]	; (2944 <__aeabi_dsub+0x660>)
    28c8:	e53c      	b.n	2344 <__aeabi_dsub+0x60>
    28ca:	2300      	movs	r3, #0
    28cc:	e755      	b.n	277a <__aeabi_dsub+0x496>
    28ce:	1c3d      	adds	r5, r7, #0
    28d0:	3d20      	subs	r5, #32
    28d2:	1c0e      	adds	r6, r1, #0
    28d4:	40ee      	lsrs	r6, r5
    28d6:	1c35      	adds	r5, r6, #0
    28d8:	2f20      	cmp	r7, #32
    28da:	d02e      	beq.n	293a <__aeabi_dsub+0x656>
    28dc:	2640      	movs	r6, #64	; 0x40
    28de:	1bf7      	subs	r7, r6, r7
    28e0:	40b9      	lsls	r1, r7
    28e2:	430c      	orrs	r4, r1
    28e4:	1e61      	subs	r1, r4, #1
    28e6:	418c      	sbcs	r4, r1
    28e8:	432c      	orrs	r4, r5
    28ea:	2100      	movs	r1, #0
    28ec:	e6d8      	b.n	26a0 <__aeabi_dsub+0x3bc>
    28ee:	430c      	orrs	r4, r1
    28f0:	1e61      	subs	r1, r4, #1
    28f2:	418c      	sbcs	r4, r1
    28f4:	b2e4      	uxtb	r4, r4
    28f6:	2100      	movs	r1, #0
    28f8:	e790      	b.n	281c <__aeabi_dsub+0x538>
    28fa:	1c19      	adds	r1, r3, #0
    28fc:	465c      	mov	r4, fp
    28fe:	e521      	b.n	2344 <__aeabi_dsub+0x60>
    2900:	1c19      	adds	r1, r3, #0
    2902:	465c      	mov	r4, fp
    2904:	4d0f      	ldr	r5, [pc, #60]	; (2944 <__aeabi_dsub+0x660>)
    2906:	e51d      	b.n	2344 <__aeabi_dsub+0x60>
    2908:	1c03      	adds	r3, r0, #0
    290a:	433b      	orrs	r3, r7
    290c:	d100      	bne.n	2910 <__aeabi_dsub+0x62c>
    290e:	e724      	b.n	275a <__aeabi_dsub+0x476>
    2910:	1c01      	adds	r1, r0, #0
    2912:	1c3c      	adds	r4, r7, #0
    2914:	e516      	b.n	2344 <__aeabi_dsub+0x60>
    2916:	2620      	movs	r6, #32
    2918:	4276      	negs	r6, r6
    291a:	1976      	adds	r6, r6, r5
    291c:	1c0a      	adds	r2, r1, #0
    291e:	40f2      	lsrs	r2, r6
    2920:	4690      	mov	r8, r2
    2922:	2d20      	cmp	r5, #32
    2924:	d00b      	beq.n	293e <__aeabi_dsub+0x65a>
    2926:	2640      	movs	r6, #64	; 0x40
    2928:	1b75      	subs	r5, r6, r5
    292a:	40a9      	lsls	r1, r5
    292c:	430c      	orrs	r4, r1
    292e:	1e61      	subs	r1, r4, #1
    2930:	418c      	sbcs	r4, r1
    2932:	4645      	mov	r5, r8
    2934:	432c      	orrs	r4, r5
    2936:	2100      	movs	r1, #0
    2938:	e770      	b.n	281c <__aeabi_dsub+0x538>
    293a:	2100      	movs	r1, #0
    293c:	e7d1      	b.n	28e2 <__aeabi_dsub+0x5fe>
    293e:	2100      	movs	r1, #0
    2940:	e7f4      	b.n	292c <__aeabi_dsub+0x648>
    2942:	46c0      	nop			; (mov r8, r8)
    2944:	000007ff 	.word	0x000007ff
    2948:	ff7fffff 	.word	0xff7fffff

0000294c <__aeabi_f2d>:
__aeabi_f2d():
    294c:	0043      	lsls	r3, r0, #1
    294e:	0e1b      	lsrs	r3, r3, #24
    2950:	1c5a      	adds	r2, r3, #1
    2952:	0241      	lsls	r1, r0, #9
    2954:	b2d2      	uxtb	r2, r2
    2956:	b570      	push	{r4, r5, r6, lr}
    2958:	0a4c      	lsrs	r4, r1, #9
    295a:	0fc5      	lsrs	r5, r0, #31
    295c:	2a01      	cmp	r2, #1
    295e:	dd17      	ble.n	2990 <__aeabi_f2d+0x44>
    2960:	22e0      	movs	r2, #224	; 0xe0
    2962:	0092      	lsls	r2, r2, #2
    2964:	0764      	lsls	r4, r4, #29
    2966:	0b09      	lsrs	r1, r1, #12
    2968:	1898      	adds	r0, r3, r2
    296a:	2200      	movs	r2, #0
    296c:	2300      	movs	r3, #0
    296e:	0d1e      	lsrs	r6, r3, #20
    2970:	1c22      	adds	r2, r4, #0
    2972:	0534      	lsls	r4, r6, #20
    2974:	430c      	orrs	r4, r1
    2976:	491b      	ldr	r1, [pc, #108]	; (29e4 <__aeabi_f2d+0x98>)
    2978:	0540      	lsls	r0, r0, #21
    297a:	0840      	lsrs	r0, r0, #1
    297c:	4021      	ands	r1, r4
    297e:	4301      	orrs	r1, r0
    2980:	0049      	lsls	r1, r1, #1
    2982:	0849      	lsrs	r1, r1, #1
    2984:	07ed      	lsls	r5, r5, #31
    2986:	1c0b      	adds	r3, r1, #0
    2988:	432b      	orrs	r3, r5
    298a:	1c10      	adds	r0, r2, #0
    298c:	1c19      	adds	r1, r3, #0
    298e:	bd70      	pop	{r4, r5, r6, pc}
    2990:	2b00      	cmp	r3, #0
    2992:	d115      	bne.n	29c0 <__aeabi_f2d+0x74>
    2994:	2c00      	cmp	r4, #0
    2996:	d01c      	beq.n	29d2 <__aeabi_f2d+0x86>
    2998:	1c20      	adds	r0, r4, #0
    299a:	f000 f8b5 	bl	2b08 <__clzsi2>
    299e:	280a      	cmp	r0, #10
    29a0:	dc1a      	bgt.n	29d8 <__aeabi_f2d+0x8c>
    29a2:	210b      	movs	r1, #11
    29a4:	1a09      	subs	r1, r1, r0
    29a6:	1c23      	adds	r3, r4, #0
    29a8:	40cb      	lsrs	r3, r1
    29aa:	1c19      	adds	r1, r3, #0
    29ac:	1c03      	adds	r3, r0, #0
    29ae:	3315      	adds	r3, #21
    29b0:	409c      	lsls	r4, r3
    29b2:	4b0d      	ldr	r3, [pc, #52]	; (29e8 <__aeabi_f2d+0x9c>)
    29b4:	0309      	lsls	r1, r1, #12
    29b6:	1a18      	subs	r0, r3, r0
    29b8:	0540      	lsls	r0, r0, #21
    29ba:	0b09      	lsrs	r1, r1, #12
    29bc:	0d40      	lsrs	r0, r0, #21
    29be:	e7d4      	b.n	296a <__aeabi_f2d+0x1e>
    29c0:	2c00      	cmp	r4, #0
    29c2:	d003      	beq.n	29cc <__aeabi_f2d+0x80>
    29c4:	0764      	lsls	r4, r4, #29
    29c6:	0b09      	lsrs	r1, r1, #12
    29c8:	4808      	ldr	r0, [pc, #32]	; (29ec <__aeabi_f2d+0xa0>)
    29ca:	e7ce      	b.n	296a <__aeabi_f2d+0x1e>
    29cc:	4807      	ldr	r0, [pc, #28]	; (29ec <__aeabi_f2d+0xa0>)
    29ce:	2100      	movs	r1, #0
    29d0:	e7cb      	b.n	296a <__aeabi_f2d+0x1e>
    29d2:	2000      	movs	r0, #0
    29d4:	2100      	movs	r1, #0
    29d6:	e7c8      	b.n	296a <__aeabi_f2d+0x1e>
    29d8:	1c01      	adds	r1, r0, #0
    29da:	390b      	subs	r1, #11
    29dc:	408c      	lsls	r4, r1
    29de:	1c21      	adds	r1, r4, #0
    29e0:	2400      	movs	r4, #0
    29e2:	e7e6      	b.n	29b2 <__aeabi_f2d+0x66>
    29e4:	800fffff 	.word	0x800fffff
    29e8:	00000389 	.word	0x00000389
    29ec:	000007ff 	.word	0x000007ff

000029f0 <__aeabi_d2f>:
__aeabi_d2f():
    29f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    29f2:	004b      	lsls	r3, r1, #1
    29f4:	030d      	lsls	r5, r1, #12
    29f6:	0f42      	lsrs	r2, r0, #29
    29f8:	0d5b      	lsrs	r3, r3, #21
    29fa:	0a6d      	lsrs	r5, r5, #9
    29fc:	4315      	orrs	r5, r2
    29fe:	1c5a      	adds	r2, r3, #1
    2a00:	0552      	lsls	r2, r2, #21
    2a02:	0fcc      	lsrs	r4, r1, #31
    2a04:	00c6      	lsls	r6, r0, #3
    2a06:	0d52      	lsrs	r2, r2, #21
    2a08:	2a01      	cmp	r2, #1
    2a0a:	dd27      	ble.n	2a5c <__aeabi_d2f+0x6c>
    2a0c:	4f39      	ldr	r7, [pc, #228]	; (2af4 <__aeabi_d2f+0x104>)
    2a0e:	19da      	adds	r2, r3, r7
    2a10:	2afe      	cmp	r2, #254	; 0xfe
    2a12:	dc1a      	bgt.n	2a4a <__aeabi_d2f+0x5a>
    2a14:	2a00      	cmp	r2, #0
    2a16:	dd35      	ble.n	2a84 <__aeabi_d2f+0x94>
    2a18:	0180      	lsls	r0, r0, #6
    2a1a:	00ed      	lsls	r5, r5, #3
    2a1c:	1e43      	subs	r3, r0, #1
    2a1e:	4198      	sbcs	r0, r3
    2a20:	4328      	orrs	r0, r5
    2a22:	0f76      	lsrs	r6, r6, #29
    2a24:	4330      	orrs	r0, r6
    2a26:	0743      	lsls	r3, r0, #29
    2a28:	d004      	beq.n	2a34 <__aeabi_d2f+0x44>
    2a2a:	230f      	movs	r3, #15
    2a2c:	4003      	ands	r3, r0
    2a2e:	2b04      	cmp	r3, #4
    2a30:	d000      	beq.n	2a34 <__aeabi_d2f+0x44>
    2a32:	3004      	adds	r0, #4
    2a34:	2180      	movs	r1, #128	; 0x80
    2a36:	04c9      	lsls	r1, r1, #19
    2a38:	4001      	ands	r1, r0
    2a3a:	d027      	beq.n	2a8c <__aeabi_d2f+0x9c>
    2a3c:	3201      	adds	r2, #1
    2a3e:	2aff      	cmp	r2, #255	; 0xff
    2a40:	d01d      	beq.n	2a7e <__aeabi_d2f+0x8e>
    2a42:	0183      	lsls	r3, r0, #6
    2a44:	0a5b      	lsrs	r3, r3, #9
    2a46:	b2d1      	uxtb	r1, r2
    2a48:	e001      	b.n	2a4e <__aeabi_d2f+0x5e>
    2a4a:	21ff      	movs	r1, #255	; 0xff
    2a4c:	2300      	movs	r3, #0
    2a4e:	0258      	lsls	r0, r3, #9
    2a50:	05c9      	lsls	r1, r1, #23
    2a52:	0a40      	lsrs	r0, r0, #9
    2a54:	07e4      	lsls	r4, r4, #31
    2a56:	4308      	orrs	r0, r1
    2a58:	4320      	orrs	r0, r4
    2a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a5c:	2b00      	cmp	r3, #0
    2a5e:	d106      	bne.n	2a6e <__aeabi_d2f+0x7e>
    2a60:	4335      	orrs	r5, r6
    2a62:	d111      	bne.n	2a88 <__aeabi_d2f+0x98>
    2a64:	2100      	movs	r1, #0
    2a66:	2000      	movs	r0, #0
    2a68:	0243      	lsls	r3, r0, #9
    2a6a:	0a5b      	lsrs	r3, r3, #9
    2a6c:	e7ef      	b.n	2a4e <__aeabi_d2f+0x5e>
    2a6e:	432e      	orrs	r6, r5
    2a70:	d0eb      	beq.n	2a4a <__aeabi_d2f+0x5a>
    2a72:	2080      	movs	r0, #128	; 0x80
    2a74:	00ed      	lsls	r5, r5, #3
    2a76:	0480      	lsls	r0, r0, #18
    2a78:	4328      	orrs	r0, r5
    2a7a:	22ff      	movs	r2, #255	; 0xff
    2a7c:	e7d3      	b.n	2a26 <__aeabi_d2f+0x36>
    2a7e:	21ff      	movs	r1, #255	; 0xff
    2a80:	2300      	movs	r3, #0
    2a82:	e7e4      	b.n	2a4e <__aeabi_d2f+0x5e>
    2a84:	3217      	adds	r2, #23
    2a86:	da0d      	bge.n	2aa4 <__aeabi_d2f+0xb4>
    2a88:	2005      	movs	r0, #5
    2a8a:	2200      	movs	r2, #0
    2a8c:	08c0      	lsrs	r0, r0, #3
    2a8e:	b2d1      	uxtb	r1, r2
    2a90:	2aff      	cmp	r2, #255	; 0xff
    2a92:	d1e9      	bne.n	2a68 <__aeabi_d2f+0x78>
    2a94:	2800      	cmp	r0, #0
    2a96:	d0d9      	beq.n	2a4c <__aeabi_d2f+0x5c>
    2a98:	2380      	movs	r3, #128	; 0x80
    2a9a:	03db      	lsls	r3, r3, #15
    2a9c:	4303      	orrs	r3, r0
    2a9e:	025b      	lsls	r3, r3, #9
    2aa0:	0a5b      	lsrs	r3, r3, #9
    2aa2:	e7d4      	b.n	2a4e <__aeabi_d2f+0x5e>
    2aa4:	2280      	movs	r2, #128	; 0x80
    2aa6:	4914      	ldr	r1, [pc, #80]	; (2af8 <__aeabi_d2f+0x108>)
    2aa8:	0412      	lsls	r2, r2, #16
    2aaa:	4315      	orrs	r5, r2
    2aac:	1ac9      	subs	r1, r1, r3
    2aae:	291f      	cmp	r1, #31
    2ab0:	dc0d      	bgt.n	2ace <__aeabi_d2f+0xde>
    2ab2:	4a12      	ldr	r2, [pc, #72]	; (2afc <__aeabi_d2f+0x10c>)
    2ab4:	1c37      	adds	r7, r6, #0
    2ab6:	189b      	adds	r3, r3, r2
    2ab8:	1c28      	adds	r0, r5, #0
    2aba:	409f      	lsls	r7, r3
    2abc:	4098      	lsls	r0, r3
    2abe:	1c3b      	adds	r3, r7, #0
    2ac0:	1e5a      	subs	r2, r3, #1
    2ac2:	4193      	sbcs	r3, r2
    2ac4:	4318      	orrs	r0, r3
    2ac6:	40ce      	lsrs	r6, r1
    2ac8:	4330      	orrs	r0, r6
    2aca:	2200      	movs	r2, #0
    2acc:	e7ab      	b.n	2a26 <__aeabi_d2f+0x36>
    2ace:	4f0c      	ldr	r7, [pc, #48]	; (2b00 <__aeabi_d2f+0x110>)
    2ad0:	1c2a      	adds	r2, r5, #0
    2ad2:	1aff      	subs	r7, r7, r3
    2ad4:	40fa      	lsrs	r2, r7
    2ad6:	1c17      	adds	r7, r2, #0
    2ad8:	2920      	cmp	r1, #32
    2ada:	d009      	beq.n	2af0 <__aeabi_d2f+0x100>
    2adc:	4a09      	ldr	r2, [pc, #36]	; (2b04 <__aeabi_d2f+0x114>)
    2ade:	1898      	adds	r0, r3, r2
    2ae0:	4085      	lsls	r5, r0
    2ae2:	1c28      	adds	r0, r5, #0
    2ae4:	4330      	orrs	r0, r6
    2ae6:	1e46      	subs	r6, r0, #1
    2ae8:	41b0      	sbcs	r0, r6
    2aea:	4338      	orrs	r0, r7
    2aec:	2200      	movs	r2, #0
    2aee:	e79a      	b.n	2a26 <__aeabi_d2f+0x36>
    2af0:	2000      	movs	r0, #0
    2af2:	e7f7      	b.n	2ae4 <__aeabi_d2f+0xf4>
    2af4:	fffffc80 	.word	0xfffffc80
    2af8:	0000039e 	.word	0x0000039e
    2afc:	fffffc82 	.word	0xfffffc82
    2b00:	0000037e 	.word	0x0000037e
    2b04:	fffffca2 	.word	0xfffffca2

00002b08 <__clzsi2>:
__clzsi2():
    2b08:	211c      	movs	r1, #28
    2b0a:	2301      	movs	r3, #1
    2b0c:	041b      	lsls	r3, r3, #16
    2b0e:	4298      	cmp	r0, r3
    2b10:	d301      	bcc.n	2b16 <__clzsi2+0xe>
    2b12:	0c00      	lsrs	r0, r0, #16
    2b14:	3910      	subs	r1, #16
    2b16:	0a1b      	lsrs	r3, r3, #8
    2b18:	4298      	cmp	r0, r3
    2b1a:	d301      	bcc.n	2b20 <__clzsi2+0x18>
    2b1c:	0a00      	lsrs	r0, r0, #8
    2b1e:	3908      	subs	r1, #8
    2b20:	091b      	lsrs	r3, r3, #4
    2b22:	4298      	cmp	r0, r3
    2b24:	d301      	bcc.n	2b2a <__clzsi2+0x22>
    2b26:	0900      	lsrs	r0, r0, #4
    2b28:	3904      	subs	r1, #4
    2b2a:	a202      	add	r2, pc, #8	; (adr r2, 2b34 <__clzsi2+0x2c>)
    2b2c:	5c10      	ldrb	r0, [r2, r0]
    2b2e:	1840      	adds	r0, r0, r1
    2b30:	4770      	bx	lr
    2b32:	46c0      	nop			; (mov r8, r8)
    2b34:	02020304 	.word	0x02020304
    2b38:	01010101 	.word	0x01010101
	...

00002b44 <FTM_OnCounterRestart>:
FTM_OnCounterRestart():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:51
    PORTA_PCR4 |= PORT_PCR_MUX(01) | PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;
	return;
}

void FTM_OnCounterRestart(LDD_TUserData *UserDataPtr)
{
    2b44:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:58
	// read function and indirectly the fusion and magnetic calibration functions which
	// are software locked to the sensor read process

	// always enable the sensor read task
	// update time stamp counter
	mqxglobals.FTMTimestamp += (uint32)mqxglobals.FTMReload;
    2b46:	4805      	ldr	r0, [pc, #20]	; (2b5c <FTM_OnCounterRestart+0x18>)
    2b48:	236c      	movs	r3, #108	; 0x6c
    2b4a:	5ac3      	ldrh	r3, [r0, r3]
    2b4c:	6f02      	ldr	r2, [r0, #112]	; 0x70
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:61
	// enable the (typically 200Hz) sensor read event FSL_SAMPLING_EVENT
	// with a mask of 1 (least significant bit set)
	_lwevent_set(&(mqxglobals.SamplingEventStruct), 1);
    2b4e:	2101      	movs	r1, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:58
	// read function and indirectly the fusion and magnetic calibration functions which
	// are software locked to the sensor read process

	// always enable the sensor read task
	// update time stamp counter
	mqxglobals.FTMTimestamp += (uint32)mqxglobals.FTMReload;
    2b50:	189b      	adds	r3, r3, r2
    2b52:	6703      	str	r3, [r0, #112]	; 0x70
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:61
	// enable the (typically 200Hz) sensor read event FSL_SAMPLING_EVENT
	// with a mask of 1 (least significant bit set)
	_lwevent_set(&(mqxglobals.SamplingEventStruct), 1);
    2b54:	f00e fc40 	bl	113d8 <_lwevent_set>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:64

	return;
}
    2b58:	bd08      	pop	{r3, pc}
    2b5a:	46c0      	nop			; (mov r8, r8)
    2b5c:	1fffe294 	.word	0x1fffe294

00002b60 <UART_OnBlockSent>:
UART_OnBlockSent():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:71

void UART_OnBlockSent(LDD_TUserData *UserDataPtr)
{
	// return with no action
	return;
}
    2b60:	4770      	bx	lr
    2b62:	46c0      	nop			; (mov r8, r8)

00002b64 <I2C_OnMasterBlockSent>:
I2C_OnMasterBlockSent():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:76

void I2C_OnMasterBlockSent(LDD_TUserData *UserDataPtr)
{
	// set the I2C data sent flag
	mqxglobals.I2C_Status |= I2C_SENT_FLAG;
    2b64:	4a03      	ldr	r2, [pc, #12]	; (2b74 <I2C_OnMasterBlockSent+0x10>)
    2b66:	2374      	movs	r3, #116	; 0x74
    2b68:	5cd0      	ldrb	r0, [r2, r3]
    2b6a:	2101      	movs	r1, #1
    2b6c:	4301      	orrs	r1, r0
    2b6e:	54d1      	strb	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:79

	return;
}
    2b70:	4770      	bx	lr
    2b72:	46c0      	nop			; (mov r8, r8)
    2b74:	1fffe294 	.word	0x1fffe294

00002b78 <I2C_OnMasterBlockReceived>:
I2C_OnMasterBlockReceived():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:85


void I2C_OnMasterBlockReceived(LDD_TUserData *UserDataPtr)
{
	// set the I2C data received flag
	mqxglobals.I2C_Status |= I2C_RCVD_FLAG;
    2b78:	4a03      	ldr	r2, [pc, #12]	; (2b88 <I2C_OnMasterBlockReceived+0x10>)
    2b7a:	2374      	movs	r3, #116	; 0x74
    2b7c:	5cd0      	ldrb	r0, [r2, r3]
    2b7e:	2102      	movs	r1, #2
    2b80:	4301      	orrs	r1, r0
    2b82:	54d1      	strb	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:88

	return;
}
    2b84:	4770      	bx	lr
    2b86:	46c0      	nop			; (mov r8, r8)
    2b88:	1fffe294 	.word	0x1fffe294

00002b8c <UART_OnTxComplete>:
UART_OnTxComplete():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:102
{
#ifdef DEEPSLEEP
	SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK; // Enable full STOP mode
#endif
	return;
}
    2b8c:	4770      	bx	lr
    2b8e:	46c0      	nop			; (mov r8, r8)

00002b90 <UART_OnBlockReceived>:
UART_OnBlockReceived():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:105

void UART_OnBlockReceived(LDD_TUserData *UserDataPtr)
{
    2b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:118
	// note also that although this callback is theoretically called whenever a single byte is received, 
	// in practice there may be bursts of more than one byte in the receive buffer.
	// all received bytes are processed before this callback is executed.

	// determine how many bytes are available in the UART receive buffer
	nbytes = UART_GetReceivedDataNum(UART_DeviceData);
    2b92:	4a59      	ldr	r2, [pc, #356]	; (2cf8 <UART_OnBlockReceived+0x168>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:105
#endif
	return;
}

void UART_OnBlockReceived(LDD_TUserData *UserDataPtr)
{
    2b94:	4644      	mov	r4, r8
    2b96:	465f      	mov	r7, fp
    2b98:	4656      	mov	r6, sl
    2b9a:	464d      	mov	r5, r9
    2b9c:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:118
	// note also that although this callback is theoretically called whenever a single byte is received, 
	// in practice there may be bursts of more than one byte in the receive buffer.
	// all received bytes are processed before this callback is executed.

	// determine how many bytes are available in the UART receive buffer
	nbytes = UART_GetReceivedDataNum(UART_DeviceData);
    2b9e:	6950      	ldr	r0, [r2, #20]
    2ba0:	4690      	mov	r8, r2
    2ba2:	f010 fa13 	bl	12fcc <UART_GetReceivedDataNum>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:121

	// parse all received bytes in sUARTInputBuf into the iCommand delay line
	for (i = 0; i < nbytes; i++)
    2ba6:	b203      	sxth	r3, r0
    2ba8:	2b00      	cmp	r3, #0
    2baa:	dc00      	bgt.n	2bae <UART_OnBlockReceived+0x1e>
    2bac:	e0a2      	b.n	2cf4 <UART_OnBlockReceived+0x164>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:222
		break;

		// "RST " = Soft reset
		case ((((('R' << 8) + 'S') << 8) + 'T') << 8) + ' ':	
			Fusion_Init();
			mqxglobals.FTMTimestamp = 0;
    2bae:	4b53      	ldr	r3, [pc, #332]	; (2cfc <UART_OnBlockReceived+0x16c>)
    2bb0:	4f53      	ldr	r7, [pc, #332]	; (2d00 <UART_OnBlockReceived+0x170>)
    2bb2:	4c54      	ldr	r4, [pc, #336]	; (2d04 <UART_OnBlockReceived+0x174>)
    2bb4:	1e46      	subs	r6, r0, #1
    2bb6:	469b      	mov	fp, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:139
			globals.AngularVelocityPacketOn = true;
			iCommand[3] = '~';
		break;
		// "VG- " = disable angular velocity packet transmission
		case ((((('V' << 8) + 'G') << 8) + '-') << 8) + ' ':
			globals.AngularVelocityPacketOn = false; 
    2bb8:	4b53      	ldr	r3, [pc, #332]	; (2d08 <UART_OnBlockReceived+0x178>)
    2bba:	1c7d      	adds	r5, r7, #1
    2bbc:	b2b6      	uxth	r6, r6
    2bbe:	78e1      	ldrb	r1, [r4, #3]
    2bc0:	1c3a      	adds	r2, r7, #0
    2bc2:	19ae      	adds	r6, r5, r6
    2bc4:	4699      	mov	r9, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:134
		isum = ((((((int32)iCommand[0] << 8) + iCommand[1]) << 8) + iCommand[2]) << 8) + iCommand[3];
		switch (isum)
		{
		// "VG+ " = enable angular velocity packet transmission
		case ((((('V' << 8) + 'G') << 8) + '+') << 8) + ' ':
			globals.AngularVelocityPacketOn = true;
    2bc6:	469a      	mov	sl, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:125
	// parse all received bytes in sUARTInputBuf into the iCommand delay line
	for (i = 0; i < nbytes; i++)
	{
		// shuffle the iCommand delay line and add the new command byte
		for (j = 0; j < 3; j++)
			iCommand[j] = iCommand[j + 1];
    2bc8:	7860      	ldrb	r0, [r4, #1]
    2bca:	78a3      	ldrb	r3, [r4, #2]
    2bcc:	7020      	strb	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:129
		iCommand[3] = sUARTInputBuf[i];
		
		// check if we have a valid command yet
		isum = ((((((int32)iCommand[0] << 8) + iCommand[1]) << 8) + iCommand[2]) << 8) + iCommand[3];
    2bce:	0200      	lsls	r0, r0, #8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:125
	// parse all received bytes in sUARTInputBuf into the iCommand delay line
	for (i = 0; i < nbytes; i++)
	{
		// shuffle the iCommand delay line and add the new command byte
		for (j = 0; j < 3; j++)
			iCommand[j] = iCommand[j + 1];
    2bd0:	7063      	strb	r3, [r4, #1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:129
		iCommand[3] = sUARTInputBuf[i];
		
		// check if we have a valid command yet
		isum = ((((((int32)iCommand[0] << 8) + iCommand[1]) << 8) + iCommand[2]) << 8) + iCommand[3];
    2bd2:	18c3      	adds	r3, r0, r3
    2bd4:	021b      	lsls	r3, r3, #8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:126
	for (i = 0; i < nbytes; i++)
	{
		// shuffle the iCommand delay line and add the new command byte
		for (j = 0; j < 3; j++)
			iCommand[j] = iCommand[j + 1];
		iCommand[3] = sUARTInputBuf[i];
    2bd6:	7812      	ldrb	r2, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:129
		
		// check if we have a valid command yet
		isum = ((((((int32)iCommand[0] << 8) + iCommand[1]) << 8) + iCommand[2]) << 8) + iCommand[3];
    2bd8:	185b      	adds	r3, r3, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:125
	// parse all received bytes in sUARTInputBuf into the iCommand delay line
	for (i = 0; i < nbytes; i++)
	{
		// shuffle the iCommand delay line and add the new command byte
		for (j = 0; j < 3; j++)
			iCommand[j] = iCommand[j + 1];
    2bda:	70a1      	strb	r1, [r4, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:129
		iCommand[3] = sUARTInputBuf[i];
		
		// check if we have a valid command yet
		isum = ((((((int32)iCommand[0] << 8) + iCommand[1]) << 8) + iCommand[2]) << 8) + iCommand[3];
    2bdc:	021b      	lsls	r3, r3, #8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:130
		switch (isum)
    2bde:	494b      	ldr	r1, [pc, #300]	; (2d0c <UART_OnBlockReceived+0x17c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:129
		for (j = 0; j < 3; j++)
			iCommand[j] = iCommand[j + 1];
		iCommand[3] = sUARTInputBuf[i];
		
		// check if we have a valid command yet
		isum = ((((((int32)iCommand[0] << 8) + iCommand[1]) << 8) + iCommand[2]) << 8) + iCommand[3];
    2be0:	189b      	adds	r3, r3, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:126
	for (i = 0; i < nbytes; i++)
	{
		// shuffle the iCommand delay line and add the new command byte
		for (j = 0; j < 3; j++)
			iCommand[j] = iCommand[j + 1];
		iCommand[3] = sUARTInputBuf[i];
    2be2:	70e2      	strb	r2, [r4, #3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:130
		
		// check if we have a valid command yet
		isum = ((((((int32)iCommand[0] << 8) + iCommand[1]) << 8) + iCommand[2]) << 8) + iCommand[3];
		switch (isum)
    2be4:	428b      	cmp	r3, r1
    2be6:	d05b      	beq.n	2ca0 <UART_OnBlockReceived+0x110>
    2be8:	dc29      	bgt.n	2c3e <UART_OnBlockReceived+0xae>
    2bea:	4949      	ldr	r1, [pc, #292]	; (2d10 <UART_OnBlockReceived+0x180>)
    2bec:	428b      	cmp	r3, r1
    2bee:	d060      	beq.n	2cb2 <UART_OnBlockReceived+0x122>
    2bf0:	dc4b      	bgt.n	2c8a <UART_OnBlockReceived+0xfa>
    2bf2:	4948      	ldr	r1, [pc, #288]	; (2d14 <UART_OnBlockReceived+0x184>)
    2bf4:	428b      	cmp	r3, r1
    2bf6:	d100      	bne.n	2bfa <UART_OnBlockReceived+0x6a>
    2bf8:	e07a      	b.n	2cf0 <UART_OnBlockReceived+0x160>
    2bfa:	4947      	ldr	r1, [pc, #284]	; (2d18 <UART_OnBlockReceived+0x188>)
    2bfc:	428b      	cmp	r3, r1
    2bfe:	d100      	bne.n	2c02 <UART_OnBlockReceived+0x72>
    2c00:	e074      	b.n	2cec <UART_OnBlockReceived+0x15c>
    2c02:	4946      	ldr	r1, [pc, #280]	; (2d1c <UART_OnBlockReceived+0x18c>)
    2c04:	428b      	cmp	r3, r1
    2c06:	d005      	beq.n	2c14 <UART_OnBlockReceived+0x84>
    2c08:	1c11      	adds	r1, r2, #0
    2c0a:	1e2a      	subs	r2, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:121

	// determine how many bytes are available in the UART receive buffer
	nbytes = UART_GetReceivedDataNum(UART_DeviceData);

	// parse all received bytes in sUARTInputBuf into the iCommand delay line
	for (i = 0; i < nbytes; i++)
    2c0c:	42b2      	cmp	r2, r6
    2c0e:	d00a      	beq.n	2c26 <UART_OnBlockReceived+0x96>
    2c10:	3501      	adds	r5, #1
    2c12:	e7d9      	b.n	2bc8 <UART_OnBlockReceived+0x38>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:210
			iCommand[3] = '~';
		break;
		
		// "ALT+" = Altitude packet on
		case ((((('A' << 8) + 'L') << 8) + 'T') << 8) + '+':
			globals.AltPacketOn = true; 
    2c14:	2201      	movs	r2, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:215
			iCommand[3] = '~';
		break;
		// "ALT-" = Altitude packet off
		case ((((('A' << 8) + 'L') << 8) + 'T') << 8) + '-':
			globals.AltPacketOn = false; 
    2c16:	4b3c      	ldr	r3, [pc, #240]	; (2d08 <UART_OnBlockReceived+0x178>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:217
			iCommand[3] = '~';
		break;
    2c18:	217e      	movs	r1, #126	; 0x7e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:215
			globals.AltPacketOn = true; 
			iCommand[3] = '~';
		break;
		// "ALT-" = Altitude packet off
		case ((((('A' << 8) + 'L') << 8) + 'T') << 8) + '-':
			globals.AltPacketOn = false; 
    2c1a:	70da      	strb	r2, [r3, #3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:216
			iCommand[3] = '~';
    2c1c:	237e      	movs	r3, #126	; 0x7e
    2c1e:	70e3      	strb	r3, [r4, #3]
    2c20:	1e2a      	subs	r2, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:121

	// determine how many bytes are available in the UART receive buffer
	nbytes = UART_GetReceivedDataNum(UART_DeviceData);

	// parse all received bytes in sUARTInputBuf into the iCommand delay line
	for (i = 0; i < nbytes; i++)
    2c22:	42b2      	cmp	r2, r6
    2c24:	d1f4      	bne.n	2c10 <UART_OnBlockReceived+0x80>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:234
		}	
	} // end of loop over received characters

	// generate the next callback event to this function when the next character arrives
	// this function is non-blocking
	UART_ReceiveBlock(UART_DeviceData, sUARTInputBuf, 1);
    2c26:	4643      	mov	r3, r8
    2c28:	1c39      	adds	r1, r7, #0
    2c2a:	6958      	ldr	r0, [r3, #20]
    2c2c:	2201      	movs	r2, #1
    2c2e:	f010 f993 	bl	12f58 <UART_ReceiveBlock>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:237

	return;
}
    2c32:	bc3c      	pop	{r2, r3, r4, r5}
    2c34:	4690      	mov	r8, r2
    2c36:	4699      	mov	r9, r3
    2c38:	46a2      	mov	sl, r4
    2c3a:	46ab      	mov	fp, r5
    2c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:130
			iCommand[j] = iCommand[j + 1];
		iCommand[3] = sUARTInputBuf[i];
		
		// check if we have a valid command yet
		isum = ((((((int32)iCommand[0] << 8) + iCommand[1]) << 8) + iCommand[2]) << 8) + iCommand[3];
		switch (isum)
    2c3e:	4938      	ldr	r1, [pc, #224]	; (2d20 <UART_OnBlockReceived+0x190>)
    2c40:	428b      	cmp	r3, r1
    2c42:	d048      	beq.n	2cd6 <UART_OnBlockReceived+0x146>
    2c44:	dc0f      	bgt.n	2c66 <UART_OnBlockReceived+0xd6>
    2c46:	4937      	ldr	r1, [pc, #220]	; (2d24 <UART_OnBlockReceived+0x194>)
    2c48:	428b      	cmp	r3, r1
    2c4a:	d04d      	beq.n	2ce8 <UART_OnBlockReceived+0x158>
    2c4c:	4936      	ldr	r1, [pc, #216]	; (2d28 <UART_OnBlockReceived+0x198>)
    2c4e:	428b      	cmp	r3, r1
    2c50:	d048      	beq.n	2ce4 <UART_OnBlockReceived+0x154>
    2c52:	4936      	ldr	r1, [pc, #216]	; (2d2c <UART_OnBlockReceived+0x19c>)
    2c54:	428b      	cmp	r3, r1
    2c56:	d1d7      	bne.n	2c08 <UART_OnBlockReceived+0x78>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:178
	#endif
		break;
		// "Q6MA" = transmit 6-axis mag/accel quaternion in standard packet
		case ((((('Q' << 8) + '6') << 8) + 'M') << 8) + 'A':
	#if defined COMPUTE_6DOF_GB_BASIC
			globals.QuaternionPacketType = Q6MA;
    2c58:	2203      	movs	r2, #3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:164
	#endif
		break;
		// "Q3M " = transmit 3-axis magnetometer quaternion in standard packet
		case ((((('Q' << 8) + '3') << 8) + 'M') << 8) + ' ':
	#if defined COMPUTE_3DOF_B_BASIC
			globals.QuaternionPacketType = Q3M;
    2c5a:	4b2b      	ldr	r3, [pc, #172]	; (2d08 <UART_OnBlockReceived+0x178>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:167
			iCommand[3] = '~';
	#endif
		break;
    2c5c:	217e      	movs	r1, #126	; 0x7e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:164
	#endif
		break;
		// "Q3M " = transmit 3-axis magnetometer quaternion in standard packet
		case ((((('Q' << 8) + '3') << 8) + 'M') << 8) + ' ':
	#if defined COMPUTE_3DOF_B_BASIC
			globals.QuaternionPacketType = Q3M;
    2c5e:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:165
			iCommand[3] = '~';
    2c60:	237e      	movs	r3, #126	; 0x7e
    2c62:	70e3      	strb	r3, [r4, #3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:167
	#endif
		break;
    2c64:	e7d1      	b.n	2c0a <UART_OnBlockReceived+0x7a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:130
			iCommand[j] = iCommand[j + 1];
		iCommand[3] = sUARTInputBuf[i];
		
		// check if we have a valid command yet
		isum = ((((((int32)iCommand[0] << 8) + iCommand[1]) << 8) + iCommand[2]) << 8) + iCommand[3];
		switch (isum)
    2c66:	4932      	ldr	r1, [pc, #200]	; (2d30 <UART_OnBlockReceived+0x1a0>)
    2c68:	428b      	cmp	r3, r1
    2c6a:	d02d      	beq.n	2cc8 <UART_OnBlockReceived+0x138>
    2c6c:	4931      	ldr	r1, [pc, #196]	; (2d34 <UART_OnBlockReceived+0x1a4>)
    2c6e:	428b      	cmp	r3, r1
    2c70:	d018      	beq.n	2ca4 <UART_OnBlockReceived+0x114>
    2c72:	4931      	ldr	r1, [pc, #196]	; (2d38 <UART_OnBlockReceived+0x1a8>)
    2c74:	428b      	cmp	r3, r1
    2c76:	d1c7      	bne.n	2c08 <UART_OnBlockReceived+0x78>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:221
			iCommand[3] = '~';
		break;

		// "RST " = Soft reset
		case ((((('R' << 8) + 'S') << 8) + 'T') << 8) + ' ':	
			Fusion_Init();
    2c78:	f00d fcd8 	bl	1062c <Fusion_Init>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:222
			mqxglobals.FTMTimestamp = 0;
    2c7c:	2300      	movs	r3, #0
    2c7e:	465a      	mov	r2, fp
    2c80:	6713      	str	r3, [r2, #112]	; 0x70
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:223
			iCommand[3] = '~';
    2c82:	237e      	movs	r3, #126	; 0x7e
    2c84:	70e3      	strb	r3, [r4, #3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:224
		break;
    2c86:	217e      	movs	r1, #126	; 0x7e
    2c88:	e7bf      	b.n	2c0a <UART_OnBlockReceived+0x7a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:130
			iCommand[j] = iCommand[j + 1];
		iCommand[3] = sUARTInputBuf[i];
		
		// check if we have a valid command yet
		isum = ((((((int32)iCommand[0] << 8) + iCommand[1]) << 8) + iCommand[2]) << 8) + iCommand[3];
		switch (isum)
    2c8a:	492c      	ldr	r1, [pc, #176]	; (2d3c <UART_OnBlockReceived+0x1ac>)
    2c8c:	428b      	cmp	r3, r1
    2c8e:	d019      	beq.n	2cc4 <UART_OnBlockReceived+0x134>
    2c90:	492b      	ldr	r1, [pc, #172]	; (2d40 <UART_OnBlockReceived+0x1b0>)
    2c92:	428b      	cmp	r3, r1
    2c94:	d014      	beq.n	2cc0 <UART_OnBlockReceived+0x130>
    2c96:	492b      	ldr	r1, [pc, #172]	; (2d44 <UART_OnBlockReceived+0x1b4>)
    2c98:	428b      	cmp	r3, r1
    2c9a:	d1b5      	bne.n	2c08 <UART_OnBlockReceived+0x78>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:157
		break;
		
		// "Q3  " = transmit 3-axis accelerometer quaternion in standard packet
		case ((((('Q' << 8) + '3') << 8) + ' ') << 8) + ' ':
	#if defined COMPUTE_3DOF_G_BASIC
			globals.QuaternionPacketType = Q3;
    2c9c:	2200      	movs	r2, #0
    2c9e:	e7dc      	b.n	2c5a <UART_OnBlockReceived+0xca>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:185
	#endif
		break;	
		// "Q6AG" = transmit 6-axis accel/gyro quaternion in standard packet
		case ((((('Q' << 8) + '6') << 8) + 'A') << 8) + 'G':
	#if defined COMPUTE_6DOF_GY_KALMAN
			globals.QuaternionPacketType = Q6AG;
    2ca0:	2204      	movs	r2, #4
    2ca2:	e7da      	b.n	2c5a <UART_OnBlockReceived+0xca>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:139
			globals.AngularVelocityPacketOn = true;
			iCommand[3] = '~';
		break;
		// "VG- " = disable angular velocity packet transmission
		case ((((('V' << 8) + 'G') << 8) + '-') << 8) + ' ':
			globals.AngularVelocityPacketOn = false; 
    2ca4:	2300      	movs	r3, #0
    2ca6:	464a      	mov	r2, r9
    2ca8:	7013      	strb	r3, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:140
			iCommand[3] = '~';
    2caa:	237e      	movs	r3, #126	; 0x7e
    2cac:	70e3      	strb	r3, [r4, #3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:141
		break;
    2cae:	217e      	movs	r1, #126	; 0x7e
    2cb0:	e7ab      	b.n	2c0a <UART_OnBlockReceived+0x7a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:150
			globals.DebugPacketOn = true;
			iCommand[3] = '~';
		break;
		// "DB- " = disable debug packet transmission
		case ((((('D' << 8) + 'B') << 8) + '-') << 8) + ' ':
			globals.DebugPacketOn = false; 
    2cb2:	2200      	movs	r2, #0
    2cb4:	4b14      	ldr	r3, [pc, #80]	; (2d08 <UART_OnBlockReceived+0x178>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:152
			iCommand[3] = '~';
		break;
    2cb6:	217e      	movs	r1, #126	; 0x7e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:150
			globals.DebugPacketOn = true;
			iCommand[3] = '~';
		break;
		// "DB- " = disable debug packet transmission
		case ((((('D' << 8) + 'B') << 8) + '-') << 8) + ' ':
			globals.DebugPacketOn = false; 
    2cb8:	705a      	strb	r2, [r3, #1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:151
			iCommand[3] = '~';
    2cba:	237e      	movs	r3, #126	; 0x7e
    2cbc:	70e3      	strb	r3, [r4, #3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:152
		break;
    2cbe:	e7a4      	b.n	2c0a <UART_OnBlockReceived+0x7a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:164
	#endif
		break;
		// "Q3M " = transmit 3-axis magnetometer quaternion in standard packet
		case ((((('Q' << 8) + '3') << 8) + 'M') << 8) + ' ':
	#if defined COMPUTE_3DOF_B_BASIC
			globals.QuaternionPacketType = Q3M;
    2cc0:	2201      	movs	r2, #1
    2cc2:	e7ca      	b.n	2c5a <UART_OnBlockReceived+0xca>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:171
	#endif
		break;
		// "Q3G " = transmit 3-axis gyro quaternion in standard packet
		case ((((('Q' << 8) + '3') << 8) + 'G') << 8) + ' ':
	#if defined COMPUTE_3DOF_Y_BASIC
			globals.QuaternionPacketType = Q3G; 
    2cc4:	2202      	movs	r2, #2
    2cc6:	e7c8      	b.n	2c5a <UART_OnBlockReceived+0xca>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:134
		isum = ((((((int32)iCommand[0] << 8) + iCommand[1]) << 8) + iCommand[2]) << 8) + iCommand[3];
		switch (isum)
		{
		// "VG+ " = enable angular velocity packet transmission
		case ((((('V' << 8) + 'G') << 8) + '+') << 8) + ' ':
			globals.AngularVelocityPacketOn = true;
    2cc8:	2301      	movs	r3, #1
    2cca:	4652      	mov	r2, sl
    2ccc:	7013      	strb	r3, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:135
			iCommand[3] = '~';
    2cce:	237e      	movs	r3, #126	; 0x7e
    2cd0:	70e3      	strb	r3, [r4, #3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:136
		break;
    2cd2:	217e      	movs	r1, #126	; 0x7e
    2cd4:	e799      	b.n	2c0a <UART_OnBlockReceived+0x7a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:204
			globals.RPCPacketOn = true; 
			iCommand[3] = '~';
		break;
		// "RPC-" = Roll/Pitch/Compass off
		case ((((('R' << 8) + 'P') << 8) + 'C') << 8) + '-':
			globals.RPCPacketOn = false; 
    2cd6:	2200      	movs	r2, #0
    2cd8:	4b0b      	ldr	r3, [pc, #44]	; (2d08 <UART_OnBlockReceived+0x178>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:206
			iCommand[3] = '~';
		break;
    2cda:	217e      	movs	r1, #126	; 0x7e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:204
			globals.RPCPacketOn = true; 
			iCommand[3] = '~';
		break;
		// "RPC-" = Roll/Pitch/Compass off
		case ((((('R' << 8) + 'P') << 8) + 'C') << 8) + '-':
			globals.RPCPacketOn = false; 
    2cdc:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:205
			iCommand[3] = '~';
    2cde:	237e      	movs	r3, #126	; 0x7e
    2ce0:	70e3      	strb	r3, [r4, #3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:206
		break;
    2ce2:	e792      	b.n	2c0a <UART_OnBlockReceived+0x7a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:199
	#endif
		break;
		
		// "RPC+" = Roll/Pitch/Compass on
		case ((((('R' << 8) + 'P') << 8) + 'C') << 8) + '+':
			globals.RPCPacketOn = true; 
    2ce4:	2201      	movs	r2, #1
    2ce6:	e7f7      	b.n	2cd8 <UART_OnBlockReceived+0x148>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:192
	#endif
		break;
		// "Q9  " = transmit 9-axis quaternion in standard packet (default)
		case ((((('Q' << 8) + '9') << 8) + ' ') << 8) + ' ':
	#if defined COMPUTE_9DOF_GBY_KALMAN
			globals.QuaternionPacketType = Q9;
    2ce8:	2205      	movs	r2, #5
    2cea:	e7b6      	b.n	2c5a <UART_OnBlockReceived+0xca>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:145
			iCommand[3] = '~';
		break;
		
		// "DB+ " = enable debug packet transmission
		case ((((('D' << 8) + 'B') << 8) + '+') << 8) + ' ':
			globals.DebugPacketOn = true;
    2cec:	2201      	movs	r2, #1
    2cee:	e7e1      	b.n	2cb4 <UART_OnBlockReceived+0x124>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/Events.c:215
			globals.AltPacketOn = true; 
			iCommand[3] = '~';
		break;
		// "ALT-" = Altitude packet off
		case ((((('A' << 8) + 'L') << 8) + 'T') << 8) + '-':
			globals.AltPacketOn = false; 
    2cf0:	2200      	movs	r2, #0
    2cf2:	e790      	b.n	2c16 <UART_OnBlockReceived+0x86>
    2cf4:	4f02      	ldr	r7, [pc, #8]	; (2d00 <UART_OnBlockReceived+0x170>)
    2cf6:	e796      	b.n	2c26 <UART_OnBlockReceived+0x96>
    2cf8:	1fffe108 	.word	0x1fffe108
    2cfc:	1fffe294 	.word	0x1fffe294
    2d00:	1fffe274 	.word	0x1fffe274
    2d04:	1fffe170 	.word	0x1fffe170
    2d08:	1fffe310 	.word	0x1fffe310
    2d0c:	51364147 	.word	0x51364147
    2d10:	44422d20 	.word	0x44422d20
    2d14:	414c542d 	.word	0x414c542d
    2d18:	44422b20 	.word	0x44422b20
    2d1c:	414c542b 	.word	0x414c542b
    2d20:	5250432d 	.word	0x5250432d
    2d24:	51392020 	.word	0x51392020
    2d28:	5250432b 	.word	0x5250432b
    2d2c:	51364d41 	.word	0x51364d41
    2d30:	56472b20 	.word	0x56472b20
    2d34:	56472d20 	.word	0x56472d20
    2d38:	52535420 	.word	0x52535420
    2d3c:	51334720 	.word	0x51334720
    2d40:	51334d20 	.word	0x51334d20
    2d44:	51332020 	.word	0x51332020

00002d48 <fasin_deg>:
fasin_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:43
// and returns -90 <= angle <= 90 deg
// maximum error is 10.29E-6 deg
float fasin_deg(float x)
{
	// for robustness, check for invalid argument
	if (x >= 1.0F) return 90.0F;
    2d48:	21fe      	movs	r1, #254	; 0xfe
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:41

// function returns an approximation to angle(deg)=asin(x) for x in the range -1 <= x <= 1
// and returns -90 <= angle <= 90 deg
// maximum error is 10.29E-6 deg
float fasin_deg(float x)
{
    2d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:43
	// for robustness, check for invalid argument
	if (x >= 1.0F) return 90.0F;
    2d4c:	0589      	lsls	r1, r1, #22
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:41

// function returns an approximation to angle(deg)=asin(x) for x in the range -1 <= x <= 1
// and returns -90 <= angle <= 90 deg
// maximum error is 10.29E-6 deg
float fasin_deg(float x)
{
    2d4e:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:43
	// for robustness, check for invalid argument
	if (x >= 1.0F) return 90.0F;
    2d50:	f7fd fcc6 	bl	6e0 <__aeabi_fcmpge>
    2d54:	2800      	cmp	r0, #0
    2d56:	d001      	beq.n	2d5c <fasin_deg+0x14>
    2d58:	4847      	ldr	r0, [pc, #284]	; (2e78 <fasin_deg+0x130>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:49
	if (x <= -1.0F) return -90.0F;

	// call the atan which will return an angle in the correct range -90 to 90 deg
	// this line cannot fail from division by zero or negative square root since |x| < 1
	return (fatan_deg(x / sqrtf(1.0F - x * x)));
}
    2d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:44
// maximum error is 10.29E-6 deg
float fasin_deg(float x)
{
	// for robustness, check for invalid argument
	if (x >= 1.0F) return 90.0F;
	if (x <= -1.0F) return -90.0F;
    2d5c:	1c20      	adds	r0, r4, #0
    2d5e:	4947      	ldr	r1, [pc, #284]	; (2e7c <fasin_deg+0x134>)
    2d60:	f7fd fcaa 	bl	6b8 <__aeabi_fcmple>
    2d64:	2800      	cmp	r0, #0
    2d66:	d16a      	bne.n	2e3e <fasin_deg+0xf6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:48

	// call the atan which will return an angle in the correct range -90 to 90 deg
	// this line cannot fail from division by zero or negative square root since |x| < 1
	return (fatan_deg(x / sqrtf(1.0F - x * x)));
    2d68:	1c21      	adds	r1, r4, #0
    2d6a:	1c20      	adds	r0, r4, #0
    2d6c:	f7fe f812 	bl	d94 <__aeabi_fmul>
    2d70:	1c01      	adds	r1, r0, #0
    2d72:	20fe      	movs	r0, #254	; 0xfe
    2d74:	0580      	lsls	r0, r0, #22
    2d76:	f7fe f937 	bl	fe8 <__aeabi_fsub>
    2d7a:	f010 fb89 	bl	13490 <sqrtf>
    2d7e:	1c01      	adds	r1, r0, #0
    2d80:	1c20      	adds	r0, r4, #0
    2d82:	f7fd fe23 	bl	9cc <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:83

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2d86:	2100      	movs	r1, #0
fasin_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:48
	if (x >= 1.0F) return 90.0F;
	if (x <= -1.0F) return -90.0F;

	// call the atan which will return an angle in the correct range -90 to 90 deg
	// this line cannot fail from division by zero or negative square root since |x| < 1
	return (fatan_deg(x / sqrtf(1.0F - x * x)));
    2d88:	1c04      	adds	r4, r0, #0
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:83

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2d8a:	f7fd fc8b 	bl	6a4 <__aeabi_fcmplt>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    2d8e:	2600      	movs	r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:83
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2d90:	2800      	cmp	r0, #0
    2d92:	d14d      	bne.n	2e30 <fasin_deg+0xe8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
		x = -x;
		ixisnegative = 1;
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    2d94:	21fe      	movs	r1, #254	; 0xfe
    2d96:	1c20      	adds	r0, r4, #0
    2d98:	0589      	lsls	r1, r1, #22
    2d9a:	f7fd fc97 	bl	6cc <__aeabi_fcmpgt>
    2d9e:	2800      	cmp	r0, #0
    2da0:	d04b      	beq.n	2e3a <fasin_deg+0xf2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	{
		x = 1.0F / x;
    2da2:	20fe      	movs	r0, #254	; 0xfe
    2da4:	1c21      	adds	r1, r4, #0
    2da6:	0580      	lsls	r0, r0, #22
    2da8:	f7fd fe10 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:93
		ixexceeds1 = 1;
    2dac:	2501      	movs	r5, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
	{
		x = 1.0F / x;
    2dae:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:101
	// at this point, x is in the range 0 to 1 inclusive
	// map argument onto range -tan(15 deg) to tan(15 deg)
	// using tan(angle-30deg) = (tan(angle)-tan(30deg)) / (1 + tan(angle)tan(30deg))
	// tan(15deg) maps to tan(-15 deg) = -tan(15 deg)
	// 1. maps to (sqrt(3) - 1) / (sqrt(3) + 1) = 2 - sqrt(3) = tan(15 deg)
	if (x > TAN15DEG)
    2db0:	1c20      	adds	r0, r4, #0
    2db2:	4933      	ldr	r1, [pc, #204]	; (2e80 <fasin_deg+0x138>)
    2db4:	f7fd fc8a 	bl	6cc <__aeabi_fcmpgt>
    2db8:	2800      	cmp	r0, #0
    2dba:	d042      	beq.n	2e42 <fasin_deg+0xfa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:103
	{
		x = (x - TAN30DEG)/(1.0F + TAN30DEG * x);
    2dbc:	1c20      	adds	r0, r4, #0
    2dbe:	4931      	ldr	r1, [pc, #196]	; (2e84 <fasin_deg+0x13c>)
    2dc0:	f7fe f912 	bl	fe8 <__aeabi_fsub>
    2dc4:	492f      	ldr	r1, [pc, #188]	; (2e84 <fasin_deg+0x13c>)
    2dc6:	1c07      	adds	r7, r0, #0
    2dc8:	1c20      	adds	r0, r4, #0
    2dca:	f7fd ffe3 	bl	d94 <__aeabi_fmul>
    2dce:	21fe      	movs	r1, #254	; 0xfe
    2dd0:	0589      	lsls	r1, r1, #22
    2dd2:	f7fd fc8f 	bl	6f4 <__aeabi_fadd>
    2dd6:	1c01      	adds	r1, r0, #0
    2dd8:	1c38      	adds	r0, r7, #0
    2dda:	f7fd fdf7 	bl	9cc <__aeabi_fdiv>
    2dde:	1c04      	adds	r4, r0, #0
fatan_15deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    2de0:	1c21      	adds	r1, r4, #0
    2de2:	f7fd ffd7 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    2de6:	4928      	ldr	r1, [pc, #160]	; (2e88 <fasin_deg+0x140>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    2de8:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    2dea:	f7fd ffd3 	bl	d94 <__aeabi_fmul>
    2dee:	4927      	ldr	r1, [pc, #156]	; (2e8c <fasin_deg+0x144>)
    2df0:	f7fd fc80 	bl	6f4 <__aeabi_fadd>
    2df4:	1c01      	adds	r1, r0, #0
    2df6:	1c20      	adds	r0, r4, #0
    2df8:	f7fd ffcc 	bl	d94 <__aeabi_fmul>
    2dfc:	4924      	ldr	r1, [pc, #144]	; (2e90 <fasin_deg+0x148>)
    2dfe:	1c04      	adds	r4, r0, #0
    2e00:	1c38      	adds	r0, r7, #0
    2e02:	f7fd fc77 	bl	6f4 <__aeabi_fadd>
    2e06:	1c01      	adds	r1, r0, #0
    2e08:	1c20      	adds	r0, r4, #0
    2e0a:	f7fd fddf 	bl	9cc <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:111

	// call the atan estimator to obtain -15 deg <= angle <= 15 deg
	fangledeg = fatan_15deg(x);

	// undo the distortions applied earlier to obtain -90 deg <= angle <= 90 deg
	if (ixmapped) fangledeg += 30.0F;
    2e0e:	4921      	ldr	r1, [pc, #132]	; (2e94 <fasin_deg+0x14c>)
    2e10:	f7fd fc70 	bl	6f4 <__aeabi_fadd>
    2e14:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:112
	if (ixexceeds1) fangledeg = 90.0F - fangledeg;
    2e16:	2d00      	cmp	r5, #0
    2e18:	d003      	beq.n	2e22 <fasin_deg+0xda>
    2e1a:	4817      	ldr	r0, [pc, #92]	; (2e78 <fasin_deg+0x130>)
    2e1c:	f7fe f8e4 	bl	fe8 <__aeabi_fsub>
    2e20:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:113
	if (ixisnegative) fangledeg = -fangledeg;
    2e22:	2e00      	cmp	r6, #0
    2e24:	d002      	beq.n	2e2c <fasin_deg+0xe4>
    2e26:	2380      	movs	r3, #128	; 0x80
    2e28:	061b      	lsls	r3, r3, #24
    2e2a:	18c9      	adds	r1, r1, r3
fasin_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:48
	if (x >= 1.0F) return 90.0F;
	if (x <= -1.0F) return -90.0F;

	// call the atan which will return an angle in the correct range -90 to 90 deg
	// this line cannot fail from division by zero or negative square root since |x| < 1
	return (fatan_deg(x / sqrtf(1.0F - x * x)));
    2e2c:	1c08      	adds	r0, r1, #0
    2e2e:	e794      	b.n	2d5a <fasin_deg+0x12>
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    2e30:	2380      	movs	r3, #128	; 0x80
    2e32:	061b      	lsls	r3, r3, #24
    2e34:	18e4      	adds	r4, r4, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:86
		ixisnegative = 1;
    2e36:	2601      	movs	r6, #1
    2e38:	e7ac      	b.n	2d94 <fasin_deg+0x4c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    2e3a:	2500      	movs	r5, #0
    2e3c:	e7b8      	b.n	2db0 <fasin_deg+0x68>
fasin_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:44
// maximum error is 10.29E-6 deg
float fasin_deg(float x)
{
	// for robustness, check for invalid argument
	if (x >= 1.0F) return 90.0F;
	if (x <= -1.0F) return -90.0F;
    2e3e:	4816      	ldr	r0, [pc, #88]	; (2e98 <fasin_deg+0x150>)
    2e40:	e78b      	b.n	2d5a <fasin_deg+0x12>
fatan_15deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    2e42:	1c21      	adds	r1, r4, #0
    2e44:	1c20      	adds	r0, r4, #0
    2e46:	f7fd ffa5 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    2e4a:	490f      	ldr	r1, [pc, #60]	; (2e88 <fasin_deg+0x140>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    2e4c:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    2e4e:	f7fd ffa1 	bl	d94 <__aeabi_fmul>
    2e52:	490e      	ldr	r1, [pc, #56]	; (2e8c <fasin_deg+0x144>)
    2e54:	f7fd fc4e 	bl	6f4 <__aeabi_fadd>
    2e58:	1c01      	adds	r1, r0, #0
    2e5a:	1c20      	adds	r0, r4, #0
    2e5c:	f7fd ff9a 	bl	d94 <__aeabi_fmul>
    2e60:	490b      	ldr	r1, [pc, #44]	; (2e90 <fasin_deg+0x148>)
    2e62:	1c04      	adds	r4, r0, #0
    2e64:	1c38      	adds	r0, r7, #0
    2e66:	f7fd fc45 	bl	6f4 <__aeabi_fadd>
    2e6a:	1c01      	adds	r1, r0, #0
    2e6c:	1c20      	adds	r0, r4, #0
    2e6e:	f7fd fdad 	bl	9cc <__aeabi_fdiv>
    2e72:	1c01      	adds	r1, r0, #0
    2e74:	e7cf      	b.n	2e16 <fasin_deg+0xce>
    2e76:	46c0      	nop			; (mov r8, r8)
    2e78:	42b40000 	.word	0x42b40000
    2e7c:	bf800000 	.word	0xbf800000
    2e80:	3e8930a3 	.word	0x3e8930a3
    2e84:	3f13cd3a 	.word	0x3f13cd3a
    2e88:	41c8b20e 	.word	0x41c8b20e
    2e8c:	42c149ee 	.word	0x42c149ee
    2e90:	3fd7e7dc 	.word	0x3fd7e7dc
    2e94:	41f00000 	.word	0x41f00000
    2e98:	c2b40000 	.word	0xc2b40000

00002e9c <facos_deg>:
facos_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:57
// and returns 0 <= angle <= 180 deg
// maximum error is 14.67E-6 deg
float facos_deg(float x)
{
	// for robustness, check for invalid arguments
	if (x >= 1.0F) return 0.0F;
    2e9c:	21fe      	movs	r1, #254	; 0xfe
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:55

// function returns an approximation to angle(deg)=acos(x) for x in the range -1 <= x <= 1
// and returns 0 <= angle <= 180 deg
// maximum error is 14.67E-6 deg
float facos_deg(float x)
{
    2e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:57
	// for robustness, check for invalid arguments
	if (x >= 1.0F) return 0.0F;
    2ea0:	0589      	lsls	r1, r1, #22
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:55

// function returns an approximation to angle(deg)=acos(x) for x in the range -1 <= x <= 1
// and returns 0 <= angle <= 180 deg
// maximum error is 14.67E-6 deg
float facos_deg(float x)
{
    2ea2:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:57
	// for robustness, check for invalid arguments
	if (x >= 1.0F) return 0.0F;
    2ea4:	f7fd fc1c 	bl	6e0 <__aeabi_fcmpge>
    2ea8:	2800      	cmp	r0, #0
    2eaa:	d001      	beq.n	2eb0 <facos_deg+0x14>
    2eac:	2000      	movs	r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:65
	// call the atan which will return an angle in the incorrect range -90 to 90 deg
	// these lines cannot fail from division by zero or negative square root
	if (x == 0.0F) return 90.0F;
	if (x > 0.0F) return fatan_deg((sqrtf(1.0F - x * x) / x));
	return 180.0F + fatan_deg((sqrtf(1.0F - x * x) / x));
}
    2eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:58
// maximum error is 14.67E-6 deg
float facos_deg(float x)
{
	// for robustness, check for invalid arguments
	if (x >= 1.0F) return 0.0F;
	if (x <= -1.0F) return 180.0F;
    2eb0:	1c20      	adds	r0, r4, #0
    2eb2:	4991      	ldr	r1, [pc, #580]	; (30f8 <facos_deg+0x25c>)
    2eb4:	f7fd fc00 	bl	6b8 <__aeabi_fcmple>
    2eb8:	2800      	cmp	r0, #0
    2eba:	d173      	bne.n	2fa4 <facos_deg+0x108>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:62

	// call the atan which will return an angle in the incorrect range -90 to 90 deg
	// these lines cannot fail from division by zero or negative square root
	if (x == 0.0F) return 90.0F;
    2ebc:	1c20      	adds	r0, r4, #0
    2ebe:	2100      	movs	r1, #0
    2ec0:	f7fd fbea 	bl	698 <__aeabi_fcmpeq>
    2ec4:	2800      	cmp	r0, #0
    2ec6:	d16b      	bne.n	2fa0 <facos_deg+0x104>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:63
	if (x > 0.0F) return fatan_deg((sqrtf(1.0F - x * x) / x));
    2ec8:	1c20      	adds	r0, r4, #0
    2eca:	2100      	movs	r1, #0
    2ecc:	f7fd fbfe 	bl	6cc <__aeabi_fcmpgt>
    2ed0:	2800      	cmp	r0, #0
    2ed2:	d069      	beq.n	2fa8 <facos_deg+0x10c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:63 (discriminator 1)
    2ed4:	1c21      	adds	r1, r4, #0
    2ed6:	1c20      	adds	r0, r4, #0
    2ed8:	f7fd ff5c 	bl	d94 <__aeabi_fmul>
    2edc:	1c01      	adds	r1, r0, #0
    2ede:	20fe      	movs	r0, #254	; 0xfe
    2ee0:	0580      	lsls	r0, r0, #22
    2ee2:	f7fe f881 	bl	fe8 <__aeabi_fsub>
    2ee6:	f010 fad3 	bl	13490 <sqrtf>
    2eea:	1c21      	adds	r1, r4, #0
    2eec:	f7fd fd6e 	bl	9cc <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 1)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2ef0:	2100      	movs	r1, #0
facos_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:63 (discriminator 1)
	if (x <= -1.0F) return 180.0F;

	// call the atan which will return an angle in the incorrect range -90 to 90 deg
	// these lines cannot fail from division by zero or negative square root
	if (x == 0.0F) return 90.0F;
	if (x > 0.0F) return fatan_deg((sqrtf(1.0F - x * x) / x));
    2ef2:	1c04      	adds	r4, r0, #0
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 1)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2ef4:	f7fd fbd6 	bl	6a4 <__aeabi_fcmplt>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:80 (discriminator 1)

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    2ef8:	2600      	movs	r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 1)
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2efa:	2800      	cmp	r0, #0
    2efc:	d000      	beq.n	2f00 <facos_deg+0x64>
    2efe:	e0f4      	b.n	30ea <facos_deg+0x24e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
		x = -x;
		ixisnegative = 1;
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    2f00:	21fe      	movs	r1, #254	; 0xfe
    2f02:	1c20      	adds	r0, r4, #0
    2f04:	0589      	lsls	r1, r1, #22
    2f06:	f7fd fbe1 	bl	6cc <__aeabi_fcmpgt>
    2f0a:	2800      	cmp	r0, #0
    2f0c:	d100      	bne.n	2f10 <facos_deg+0x74>
    2f0e:	e0f1      	b.n	30f4 <facos_deg+0x258>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	{
		x = 1.0F / x;
    2f10:	20fe      	movs	r0, #254	; 0xfe
    2f12:	1c21      	adds	r1, r4, #0
    2f14:	0580      	lsls	r0, r0, #22
    2f16:	f7fd fd59 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:93
		ixexceeds1 = 1;
    2f1a:	2501      	movs	r5, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
	{
		x = 1.0F / x;
    2f1c:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:101
	// at this point, x is in the range 0 to 1 inclusive
	// map argument onto range -tan(15 deg) to tan(15 deg)
	// using tan(angle-30deg) = (tan(angle)-tan(30deg)) / (1 + tan(angle)tan(30deg))
	// tan(15deg) maps to tan(-15 deg) = -tan(15 deg)
	// 1. maps to (sqrt(3) - 1) / (sqrt(3) + 1) = 2 - sqrt(3) = tan(15 deg)
	if (x > TAN15DEG)
    2f1e:	1c20      	adds	r0, r4, #0
    2f20:	4976      	ldr	r1, [pc, #472]	; (30fc <facos_deg+0x260>)
    2f22:	f7fd fbd3 	bl	6cc <__aeabi_fcmpgt>
    2f26:	2800      	cmp	r0, #0
    2f28:	d100      	bne.n	2f2c <facos_deg+0x90>
    2f2a:	e0a3      	b.n	3074 <facos_deg+0x1d8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:103
	{
		x = (x - TAN30DEG)/(1.0F + TAN30DEG * x);
    2f2c:	1c20      	adds	r0, r4, #0
    2f2e:	4974      	ldr	r1, [pc, #464]	; (3100 <facos_deg+0x264>)
    2f30:	f7fe f85a 	bl	fe8 <__aeabi_fsub>
    2f34:	4972      	ldr	r1, [pc, #456]	; (3100 <facos_deg+0x264>)
    2f36:	1c07      	adds	r7, r0, #0
    2f38:	1c20      	adds	r0, r4, #0
    2f3a:	f7fd ff2b 	bl	d94 <__aeabi_fmul>
    2f3e:	21fe      	movs	r1, #254	; 0xfe
    2f40:	0589      	lsls	r1, r1, #22
    2f42:	f7fd fbd7 	bl	6f4 <__aeabi_fadd>
    2f46:	1c01      	adds	r1, r0, #0
    2f48:	1c38      	adds	r0, r7, #0
    2f4a:	f7fd fd3f 	bl	9cc <__aeabi_fdiv>
    2f4e:	1c04      	adds	r4, r0, #0
fatan_15deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    2f50:	1c21      	adds	r1, r4, #0
    2f52:	f7fd ff1f 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    2f56:	496b      	ldr	r1, [pc, #428]	; (3104 <facos_deg+0x268>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    2f58:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    2f5a:	f7fd ff1b 	bl	d94 <__aeabi_fmul>
    2f5e:	496a      	ldr	r1, [pc, #424]	; (3108 <facos_deg+0x26c>)
    2f60:	f7fd fbc8 	bl	6f4 <__aeabi_fadd>
    2f64:	1c01      	adds	r1, r0, #0
    2f66:	1c20      	adds	r0, r4, #0
    2f68:	f7fd ff14 	bl	d94 <__aeabi_fmul>
    2f6c:	4967      	ldr	r1, [pc, #412]	; (310c <facos_deg+0x270>)
    2f6e:	1c04      	adds	r4, r0, #0
    2f70:	1c38      	adds	r0, r7, #0
    2f72:	f7fd fbbf 	bl	6f4 <__aeabi_fadd>
    2f76:	1c01      	adds	r1, r0, #0
    2f78:	1c20      	adds	r0, r4, #0
    2f7a:	f7fd fd27 	bl	9cc <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:111

	// call the atan estimator to obtain -15 deg <= angle <= 15 deg
	fangledeg = fatan_15deg(x);

	// undo the distortions applied earlier to obtain -90 deg <= angle <= 90 deg
	if (ixmapped) fangledeg += 30.0F;
    2f7e:	4964      	ldr	r1, [pc, #400]	; (3110 <facos_deg+0x274>)
    2f80:	f7fd fbb8 	bl	6f4 <__aeabi_fadd>
    2f84:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:112
	if (ixexceeds1) fangledeg = 90.0F - fangledeg;
    2f86:	2d00      	cmp	r5, #0
    2f88:	d003      	beq.n	2f92 <facos_deg+0xf6>
    2f8a:	4862      	ldr	r0, [pc, #392]	; (3114 <facos_deg+0x278>)
    2f8c:	f7fe f82c 	bl	fe8 <__aeabi_fsub>
    2f90:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:113
	if (ixisnegative) fangledeg = -fangledeg;
    2f92:	2e00      	cmp	r6, #0
    2f94:	d002      	beq.n	2f9c <facos_deg+0x100>
    2f96:	2380      	movs	r3, #128	; 0x80
    2f98:	061b      	lsls	r3, r3, #24
    2f9a:	18c9      	adds	r1, r1, r3
facos_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:63
	if (x <= -1.0F) return 180.0F;

	// call the atan which will return an angle in the incorrect range -90 to 90 deg
	// these lines cannot fail from division by zero or negative square root
	if (x == 0.0F) return 90.0F;
	if (x > 0.0F) return fatan_deg((sqrtf(1.0F - x * x) / x));
    2f9c:	1c08      	adds	r0, r1, #0
    2f9e:	e786      	b.n	2eae <facos_deg+0x12>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:62
	if (x >= 1.0F) return 0.0F;
	if (x <= -1.0F) return 180.0F;

	// call the atan which will return an angle in the incorrect range -90 to 90 deg
	// these lines cannot fail from division by zero or negative square root
	if (x == 0.0F) return 90.0F;
    2fa0:	485c      	ldr	r0, [pc, #368]	; (3114 <facos_deg+0x278>)
    2fa2:	e784      	b.n	2eae <facos_deg+0x12>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:58
// maximum error is 14.67E-6 deg
float facos_deg(float x)
{
	// for robustness, check for invalid arguments
	if (x >= 1.0F) return 0.0F;
	if (x <= -1.0F) return 180.0F;
    2fa4:	485c      	ldr	r0, [pc, #368]	; (3118 <facos_deg+0x27c>)
    2fa6:	e782      	b.n	2eae <facos_deg+0x12>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:64

	// call the atan which will return an angle in the incorrect range -90 to 90 deg
	// these lines cannot fail from division by zero or negative square root
	if (x == 0.0F) return 90.0F;
	if (x > 0.0F) return fatan_deg((sqrtf(1.0F - x * x) / x));
	return 180.0F + fatan_deg((sqrtf(1.0F - x * x) / x));
    2fa8:	1c21      	adds	r1, r4, #0
    2faa:	1c20      	adds	r0, r4, #0
    2fac:	f7fd fef2 	bl	d94 <__aeabi_fmul>
    2fb0:	1c01      	adds	r1, r0, #0
    2fb2:	20fe      	movs	r0, #254	; 0xfe
    2fb4:	0580      	lsls	r0, r0, #22
    2fb6:	f7fe f817 	bl	fe8 <__aeabi_fsub>
    2fba:	f010 fa69 	bl	13490 <sqrtf>
    2fbe:	1c21      	adds	r1, r4, #0
    2fc0:	f7fd fd04 	bl	9cc <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:83

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2fc4:	2100      	movs	r1, #0
facos_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:64

	// call the atan which will return an angle in the incorrect range -90 to 90 deg
	// these lines cannot fail from division by zero or negative square root
	if (x == 0.0F) return 90.0F;
	if (x > 0.0F) return fatan_deg((sqrtf(1.0F - x * x) / x));
	return 180.0F + fatan_deg((sqrtf(1.0F - x * x) / x));
    2fc6:	1c04      	adds	r4, r0, #0
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:83

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2fc8:	f7fd fb6c 	bl	6a4 <__aeabi_fcmplt>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    2fcc:	2600      	movs	r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:83
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    2fce:	2800      	cmp	r0, #0
    2fd0:	d16a      	bne.n	30a8 <facos_deg+0x20c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
		x = -x;
		ixisnegative = 1;
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    2fd2:	21fe      	movs	r1, #254	; 0xfe
    2fd4:	1c20      	adds	r0, r4, #0
    2fd6:	0589      	lsls	r1, r1, #22
    2fd8:	f7fd fb78 	bl	6cc <__aeabi_fcmpgt>
    2fdc:	2800      	cmp	r0, #0
    2fde:	d068      	beq.n	30b2 <facos_deg+0x216>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	{
		x = 1.0F / x;
    2fe0:	20fe      	movs	r0, #254	; 0xfe
    2fe2:	1c21      	adds	r1, r4, #0
    2fe4:	0580      	lsls	r0, r0, #22
    2fe6:	f7fd fcf1 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:93
		ixexceeds1 = 1;
    2fea:	2501      	movs	r5, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
	{
		x = 1.0F / x;
    2fec:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:101
	// at this point, x is in the range 0 to 1 inclusive
	// map argument onto range -tan(15 deg) to tan(15 deg)
	// using tan(angle-30deg) = (tan(angle)-tan(30deg)) / (1 + tan(angle)tan(30deg))
	// tan(15deg) maps to tan(-15 deg) = -tan(15 deg)
	// 1. maps to (sqrt(3) - 1) / (sqrt(3) + 1) = 2 - sqrt(3) = tan(15 deg)
	if (x > TAN15DEG)
    2fee:	1c20      	adds	r0, r4, #0
    2ff0:	4942      	ldr	r1, [pc, #264]	; (30fc <facos_deg+0x260>)
    2ff2:	f7fd fb6b 	bl	6cc <__aeabi_fcmpgt>
    2ff6:	2800      	cmp	r0, #0
    2ff8:	d05d      	beq.n	30b6 <facos_deg+0x21a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:103
	{
		x = (x - TAN30DEG)/(1.0F + TAN30DEG * x);
    2ffa:	1c20      	adds	r0, r4, #0
    2ffc:	4940      	ldr	r1, [pc, #256]	; (3100 <facos_deg+0x264>)
    2ffe:	f7fd fff3 	bl	fe8 <__aeabi_fsub>
    3002:	493f      	ldr	r1, [pc, #252]	; (3100 <facos_deg+0x264>)
    3004:	1c07      	adds	r7, r0, #0
    3006:	1c20      	adds	r0, r4, #0
    3008:	f7fd fec4 	bl	d94 <__aeabi_fmul>
    300c:	21fe      	movs	r1, #254	; 0xfe
    300e:	0589      	lsls	r1, r1, #22
    3010:	f7fd fb70 	bl	6f4 <__aeabi_fadd>
    3014:	1c01      	adds	r1, r0, #0
    3016:	1c38      	adds	r0, r7, #0
    3018:	f7fd fcd8 	bl	9cc <__aeabi_fdiv>
    301c:	1c04      	adds	r4, r0, #0
fatan_15deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    301e:	1c21      	adds	r1, r4, #0
    3020:	f7fd feb8 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    3024:	4937      	ldr	r1, [pc, #220]	; (3104 <facos_deg+0x268>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    3026:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    3028:	f7fd feb4 	bl	d94 <__aeabi_fmul>
    302c:	4936      	ldr	r1, [pc, #216]	; (3108 <facos_deg+0x26c>)
    302e:	f7fd fb61 	bl	6f4 <__aeabi_fadd>
    3032:	1c01      	adds	r1, r0, #0
    3034:	1c20      	adds	r0, r4, #0
    3036:	f7fd fead 	bl	d94 <__aeabi_fmul>
    303a:	4934      	ldr	r1, [pc, #208]	; (310c <facos_deg+0x270>)
    303c:	1c04      	adds	r4, r0, #0
    303e:	1c38      	adds	r0, r7, #0
    3040:	f7fd fb58 	bl	6f4 <__aeabi_fadd>
    3044:	1c01      	adds	r1, r0, #0
    3046:	1c20      	adds	r0, r4, #0
    3048:	f7fd fcc0 	bl	9cc <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:111

	// call the atan estimator to obtain -15 deg <= angle <= 15 deg
	fangledeg = fatan_15deg(x);

	// undo the distortions applied earlier to obtain -90 deg <= angle <= 90 deg
	if (ixmapped) fangledeg += 30.0F;
    304c:	4930      	ldr	r1, [pc, #192]	; (3110 <facos_deg+0x274>)
    304e:	f7fd fb51 	bl	6f4 <__aeabi_fadd>
    3052:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:112
	if (ixexceeds1) fangledeg = 90.0F - fangledeg;
    3054:	2d00      	cmp	r5, #0
    3056:	d003      	beq.n	3060 <facos_deg+0x1c4>
    3058:	482e      	ldr	r0, [pc, #184]	; (3114 <facos_deg+0x278>)
    305a:	f7fd ffc5 	bl	fe8 <__aeabi_fsub>
    305e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:113
	if (ixisnegative) fangledeg = -fangledeg;
    3060:	2e00      	cmp	r6, #0
    3062:	d002      	beq.n	306a <facos_deg+0x1ce>
    3064:	2380      	movs	r3, #128	; 0x80
    3066:	061b      	lsls	r3, r3, #24
    3068:	18c9      	adds	r1, r1, r3
facos_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:64

	// call the atan which will return an angle in the incorrect range -90 to 90 deg
	// these lines cannot fail from division by zero or negative square root
	if (x == 0.0F) return 90.0F;
	if (x > 0.0F) return fatan_deg((sqrtf(1.0F - x * x) / x));
	return 180.0F + fatan_deg((sqrtf(1.0F - x * x) / x));
    306a:	1c08      	adds	r0, r1, #0
    306c:	492a      	ldr	r1, [pc, #168]	; (3118 <facos_deg+0x27c>)
    306e:	f7fd fb41 	bl	6f4 <__aeabi_fadd>
    3072:	e71c      	b.n	2eae <facos_deg+0x12>
fatan_15deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    3074:	1c21      	adds	r1, r4, #0
    3076:	1c20      	adds	r0, r4, #0
    3078:	f7fd fe8c 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    307c:	4921      	ldr	r1, [pc, #132]	; (3104 <facos_deg+0x268>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    307e:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    3080:	f7fd fe88 	bl	d94 <__aeabi_fmul>
    3084:	4920      	ldr	r1, [pc, #128]	; (3108 <facos_deg+0x26c>)
    3086:	f7fd fb35 	bl	6f4 <__aeabi_fadd>
    308a:	1c01      	adds	r1, r0, #0
    308c:	1c20      	adds	r0, r4, #0
    308e:	f7fd fe81 	bl	d94 <__aeabi_fmul>
    3092:	491e      	ldr	r1, [pc, #120]	; (310c <facos_deg+0x270>)
    3094:	1c04      	adds	r4, r0, #0
    3096:	1c38      	adds	r0, r7, #0
    3098:	f7fd fb2c 	bl	6f4 <__aeabi_fadd>
    309c:	1c01      	adds	r1, r0, #0
    309e:	1c20      	adds	r0, r4, #0
    30a0:	f7fd fc94 	bl	9cc <__aeabi_fdiv>
    30a4:	1c01      	adds	r1, r0, #0
    30a6:	e76e      	b.n	2f86 <facos_deg+0xea>
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    30a8:	2380      	movs	r3, #128	; 0x80
    30aa:	061b      	lsls	r3, r3, #24
    30ac:	18e4      	adds	r4, r4, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:86
		ixisnegative = 1;
    30ae:	2601      	movs	r6, #1
    30b0:	e78f      	b.n	2fd2 <facos_deg+0x136>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    30b2:	2500      	movs	r5, #0
    30b4:	e79b      	b.n	2fee <facos_deg+0x152>
fatan_15deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    30b6:	1c21      	adds	r1, r4, #0
    30b8:	1c20      	adds	r0, r4, #0
    30ba:	f7fd fe6b 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    30be:	4911      	ldr	r1, [pc, #68]	; (3104 <facos_deg+0x268>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    30c0:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    30c2:	f7fd fe67 	bl	d94 <__aeabi_fmul>
    30c6:	4910      	ldr	r1, [pc, #64]	; (3108 <facos_deg+0x26c>)
    30c8:	f7fd fb14 	bl	6f4 <__aeabi_fadd>
    30cc:	1c01      	adds	r1, r0, #0
    30ce:	1c20      	adds	r0, r4, #0
    30d0:	f7fd fe60 	bl	d94 <__aeabi_fmul>
    30d4:	490d      	ldr	r1, [pc, #52]	; (310c <facos_deg+0x270>)
    30d6:	1c04      	adds	r4, r0, #0
    30d8:	1c38      	adds	r0, r7, #0
    30da:	f7fd fb0b 	bl	6f4 <__aeabi_fadd>
    30de:	1c01      	adds	r1, r0, #0
    30e0:	1c20      	adds	r0, r4, #0
    30e2:	f7fd fc73 	bl	9cc <__aeabi_fdiv>
    30e6:	1c01      	adds	r1, r0, #0
    30e8:	e7b4      	b.n	3054 <facos_deg+0x1b8>
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    30ea:	2380      	movs	r3, #128	; 0x80
    30ec:	061b      	lsls	r3, r3, #24
    30ee:	18e4      	adds	r4, r4, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:86
		ixisnegative = 1;
    30f0:	2601      	movs	r6, #1
    30f2:	e705      	b.n	2f00 <facos_deg+0x64>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    30f4:	2500      	movs	r5, #0
    30f6:	e712      	b.n	2f1e <facos_deg+0x82>
    30f8:	bf800000 	.word	0xbf800000
    30fc:	3e8930a3 	.word	0x3e8930a3
    3100:	3f13cd3a 	.word	0x3f13cd3a
    3104:	41c8b20e 	.word	0x41c8b20e
    3108:	42c149ee 	.word	0x42c149ee
    310c:	3fd7e7dc 	.word	0x3fd7e7dc
    3110:	41f00000 	.word	0x41f00000
    3114:	42b40000 	.word	0x42b40000
    3118:	43340000 	.word	0x43340000

0000311c <fatan_deg>:
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:70
}

// function returns angle in range -90 to 90 deg
// maximum error is 9.84E-6 deg
float fatan_deg(float x)
{
    311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:83

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    311e:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:70
}

// function returns angle in range -90 to 90 deg
// maximum error is 9.84E-6 deg
float fatan_deg(float x)
{
    3120:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:83

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    3122:	f7fd fabf 	bl	6a4 <__aeabi_fcmplt>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    3126:	2500      	movs	r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:83
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    3128:	2800      	cmp	r0, #0
    312a:	d168      	bne.n	31fe <fatan_deg+0xe2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
		x = -x;
		ixisnegative = 1;
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    312c:	21fe      	movs	r1, #254	; 0xfe
    312e:	1c20      	adds	r0, r4, #0
    3130:	0589      	lsls	r1, r1, #22
    3132:	f7fd facb 	bl	6cc <__aeabi_fcmpgt>
    3136:	2800      	cmp	r0, #0
    3138:	d100      	bne.n	313c <fatan_deg+0x20>
    313a:	e06c      	b.n	3216 <fatan_deg+0xfa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	{
		x = 1.0F / x;
    313c:	20fe      	movs	r0, #254	; 0xfe
    313e:	1c21      	adds	r1, r4, #0
    3140:	0580      	lsls	r0, r0, #22
    3142:	f7fd fc43 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:93
		ixexceeds1 = 1;
    3146:	2601      	movs	r6, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
	{
		x = 1.0F / x;
    3148:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:101
	// at this point, x is in the range 0 to 1 inclusive
	// map argument onto range -tan(15 deg) to tan(15 deg)
	// using tan(angle-30deg) = (tan(angle)-tan(30deg)) / (1 + tan(angle)tan(30deg))
	// tan(15deg) maps to tan(-15 deg) = -tan(15 deg)
	// 1. maps to (sqrt(3) - 1) / (sqrt(3) + 1) = 2 - sqrt(3) = tan(15 deg)
	if (x > TAN15DEG)
    314a:	1c20      	adds	r0, r4, #0
    314c:	4933      	ldr	r1, [pc, #204]	; (321c <fatan_deg+0x100>)
    314e:	f7fd fabd 	bl	6cc <__aeabi_fcmpgt>
    3152:	2800      	cmp	r0, #0
    3154:	d039      	beq.n	31ca <fatan_deg+0xae>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:103
	{
		x = (x - TAN30DEG)/(1.0F + TAN30DEG * x);
    3156:	1c20      	adds	r0, r4, #0
    3158:	4931      	ldr	r1, [pc, #196]	; (3220 <fatan_deg+0x104>)
    315a:	f7fd ff45 	bl	fe8 <__aeabi_fsub>
    315e:	4930      	ldr	r1, [pc, #192]	; (3220 <fatan_deg+0x104>)
    3160:	1c07      	adds	r7, r0, #0
    3162:	1c20      	adds	r0, r4, #0
    3164:	f7fd fe16 	bl	d94 <__aeabi_fmul>
    3168:	21fe      	movs	r1, #254	; 0xfe
    316a:	0589      	lsls	r1, r1, #22
    316c:	f7fd fac2 	bl	6f4 <__aeabi_fadd>
    3170:	1c01      	adds	r1, r0, #0
    3172:	1c38      	adds	r0, r7, #0
    3174:	f7fd fc2a 	bl	9cc <__aeabi_fdiv>
    3178:	1c04      	adds	r4, r0, #0
fatan_15deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    317a:	1c21      	adds	r1, r4, #0
    317c:	f7fd fe0a 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    3180:	4928      	ldr	r1, [pc, #160]	; (3224 <fatan_deg+0x108>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    3182:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    3184:	f7fd fe06 	bl	d94 <__aeabi_fmul>
    3188:	4927      	ldr	r1, [pc, #156]	; (3228 <fatan_deg+0x10c>)
    318a:	f7fd fab3 	bl	6f4 <__aeabi_fadd>
    318e:	1c01      	adds	r1, r0, #0
    3190:	1c20      	adds	r0, r4, #0
    3192:	f7fd fdff 	bl	d94 <__aeabi_fmul>
    3196:	4925      	ldr	r1, [pc, #148]	; (322c <fatan_deg+0x110>)
    3198:	1c04      	adds	r4, r0, #0
    319a:	1c38      	adds	r0, r7, #0
    319c:	f7fd faaa 	bl	6f4 <__aeabi_fadd>
    31a0:	1c01      	adds	r1, r0, #0
    31a2:	1c20      	adds	r0, r4, #0
    31a4:	f7fd fc12 	bl	9cc <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:111

	// call the atan estimator to obtain -15 deg <= angle <= 15 deg
	fangledeg = fatan_15deg(x);

	// undo the distortions applied earlier to obtain -90 deg <= angle <= 90 deg
	if (ixmapped) fangledeg += 30.0F;
    31a8:	4921      	ldr	r1, [pc, #132]	; (3230 <fatan_deg+0x114>)
    31aa:	f7fd faa3 	bl	6f4 <__aeabi_fadd>
    31ae:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:112
	if (ixexceeds1) fangledeg = 90.0F - fangledeg;
    31b0:	2e00      	cmp	r6, #0
    31b2:	d003      	beq.n	31bc <fatan_deg+0xa0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:112 (discriminator 1)
    31b4:	481f      	ldr	r0, [pc, #124]	; (3234 <fatan_deg+0x118>)
    31b6:	f7fd ff17 	bl	fe8 <__aeabi_fsub>
    31ba:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:113
	if (ixisnegative) fangledeg = -fangledeg;
    31bc:	2d00      	cmp	r5, #0
    31be:	d002      	beq.n	31c6 <fatan_deg+0xaa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:113 (discriminator 1)
    31c0:	2380      	movs	r3, #128	; 0x80
    31c2:	061b      	lsls	r3, r3, #24
    31c4:	18c9      	adds	r1, r1, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:116
	
	return (fangledeg);
}
    31c6:	1c08      	adds	r0, r1, #0
    31c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
fatan_15deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    31ca:	1c21      	adds	r1, r4, #0
    31cc:	1c20      	adds	r0, r4, #0
    31ce:	f7fd fde1 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    31d2:	4914      	ldr	r1, [pc, #80]	; (3224 <fatan_deg+0x108>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    31d4:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    31d6:	f7fd fddd 	bl	d94 <__aeabi_fmul>
    31da:	4913      	ldr	r1, [pc, #76]	; (3228 <fatan_deg+0x10c>)
    31dc:	f7fd fa8a 	bl	6f4 <__aeabi_fadd>
    31e0:	1c01      	adds	r1, r0, #0
    31e2:	1c20      	adds	r0, r4, #0
    31e4:	f7fd fdd6 	bl	d94 <__aeabi_fmul>
    31e8:	4910      	ldr	r1, [pc, #64]	; (322c <fatan_deg+0x110>)
    31ea:	1c04      	adds	r4, r0, #0
    31ec:	1c38      	adds	r0, r7, #0
    31ee:	f7fd fa81 	bl	6f4 <__aeabi_fadd>
    31f2:	1c01      	adds	r1, r0, #0
    31f4:	1c20      	adds	r0, r4, #0
    31f6:	f7fd fbe9 	bl	9cc <__aeabi_fdiv>
    31fa:	1c01      	adds	r1, r0, #0
    31fc:	e7d8      	b.n	31b0 <fatan_deg+0x94>
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    31fe:	2380      	movs	r3, #128	; 0x80
    3200:	061b      	lsls	r3, r3, #24
    3202:	18e4      	adds	r4, r4, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
		ixisnegative = 1;
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    3204:	21fe      	movs	r1, #254	; 0xfe
    3206:	1c20      	adds	r0, r4, #0
    3208:	0589      	lsls	r1, r1, #22
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:86
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
		ixisnegative = 1;
    320a:	2501      	movs	r5, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    320c:	f7fd fa5e 	bl	6cc <__aeabi_fcmpgt>
    3210:	2800      	cmp	r0, #0
    3212:	d000      	beq.n	3216 <fatan_deg+0xfa>
    3214:	e792      	b.n	313c <fatan_deg+0x20>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    3216:	2600      	movs	r6, #0
    3218:	e797      	b.n	314a <fatan_deg+0x2e>
    321a:	46c0      	nop			; (mov r8, r8)
    321c:	3e8930a3 	.word	0x3e8930a3
    3220:	3f13cd3a 	.word	0x3f13cd3a
    3224:	41c8b20e 	.word	0x41c8b20e
    3228:	42c149ee 	.word	0x42c149ee
    322c:	3fd7e7dc 	.word	0x3fd7e7dc
    3230:	41f00000 	.word	0x41f00000
    3234:	42b40000 	.word	0x42b40000

00003238 <fatan2_deg>:
fatan2_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:121
}

// function returns approximate atan2 angle in range -180 to 180 deg
// maximum error is 14.58E-6 deg
float fatan2_deg(float y, float x)
{
    3238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    323a:	1c05      	adds	r5, r0, #0
    323c:	1c0c      	adds	r4, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:123
	// check for zero x to avoid division by zero
	if (x == 0.0F)
    323e:	1c08      	adds	r0, r1, #0
    3240:	2100      	movs	r1, #0
    3242:	f7fd fa29 	bl	698 <__aeabi_fcmpeq>
    3246:	2800      	cmp	r0, #0
    3248:	d008      	beq.n	325c <fatan2_deg+0x24>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:126
	{
		// return 90 deg for positive y
		if (y > 0.0F) return 90.0F;
    324a:	1c28      	adds	r0, r5, #0
    324c:	2100      	movs	r1, #0
    324e:	f7fd fa3d 	bl	6cc <__aeabi_fcmpgt>
    3252:	2800      	cmp	r0, #0
    3254:	d100      	bne.n	3258 <fatan2_deg+0x20>
    3256:	e0b4      	b.n	33c2 <fatan2_deg+0x18a>
    3258:	48cc      	ldr	r0, [pc, #816]	; (358c <fatan2_deg+0x354>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:141
	// compute atan2 for quadrant 2 (90 to 180 deg)
	if ((x < 0.0F) && (y > 0.0F)) return (180.0F + fatan_deg(y / x));
	// compute atan2 for quadrant 3 (-180 to -90 deg)
	return (-180.0F + fatan_deg(y / x));

}
    325a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:135
		return 0.0F;
	}
	
	// from here onwards, x is guaranteed to be non-zero
	// compute atan2 for quadrant 1 (0 to 90 deg) and quadrant 4 (-90 to 0 deg)
	if (x > 0.0F) return (fatan_deg(y / x));
    325c:	1c20      	adds	r0, r4, #0
    325e:	2100      	movs	r1, #0
    3260:	f7fd fa34 	bl	6cc <__aeabi_fcmpgt>
    3264:	2800      	cmp	r0, #0
    3266:	d047      	beq.n	32f8 <fatan2_deg+0xc0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:135 (discriminator 1)
    3268:	1c21      	adds	r1, r4, #0
    326a:	1c28      	adds	r0, r5, #0
    326c:	f7fd fbae 	bl	9cc <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 1)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    3270:	2100      	movs	r1, #0
fatan2_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:135 (discriminator 1)
		return 0.0F;
	}
	
	// from here onwards, x is guaranteed to be non-zero
	// compute atan2 for quadrant 1 (0 to 90 deg) and quadrant 4 (-90 to 0 deg)
	if (x > 0.0F) return (fatan_deg(y / x));
    3272:	1c04      	adds	r4, r0, #0
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 1)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    3274:	f7fd fa16 	bl	6a4 <__aeabi_fcmplt>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:80 (discriminator 1)

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    3278:	2600      	movs	r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 1)
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    327a:	2800      	cmp	r0, #0
    327c:	d000      	beq.n	3280 <fatan2_deg+0x48>
    327e:	e0d9      	b.n	3434 <fatan2_deg+0x1fc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
		x = -x;
		ixisnegative = 1;
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    3280:	21fe      	movs	r1, #254	; 0xfe
    3282:	1c20      	adds	r0, r4, #0
    3284:	0589      	lsls	r1, r1, #22
    3286:	f7fd fa21 	bl	6cc <__aeabi_fcmpgt>
    328a:	2800      	cmp	r0, #0
    328c:	d100      	bne.n	3290 <fatan2_deg+0x58>
    328e:	e0cf      	b.n	3430 <fatan2_deg+0x1f8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	{
		x = 1.0F / x;
    3290:	20fe      	movs	r0, #254	; 0xfe
    3292:	1c21      	adds	r1, r4, #0
    3294:	0580      	lsls	r0, r0, #22
    3296:	f7fd fb99 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:93
		ixexceeds1 = 1;
    329a:	2501      	movs	r5, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
	{
		x = 1.0F / x;
    329c:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:101
	// at this point, x is in the range 0 to 1 inclusive
	// map argument onto range -tan(15 deg) to tan(15 deg)
	// using tan(angle-30deg) = (tan(angle)-tan(30deg)) / (1 + tan(angle)tan(30deg))
	// tan(15deg) maps to tan(-15 deg) = -tan(15 deg)
	// 1. maps to (sqrt(3) - 1) / (sqrt(3) + 1) = 2 - sqrt(3) = tan(15 deg)
	if (x > TAN15DEG)
    329e:	1c20      	adds	r0, r4, #0
    32a0:	49bb      	ldr	r1, [pc, #748]	; (3590 <fatan2_deg+0x358>)
    32a2:	f7fd fa13 	bl	6cc <__aeabi_fcmpgt>
    32a6:	2800      	cmp	r0, #0
    32a8:	d000      	beq.n	32ac <fatan2_deg+0x74>
    32aa:	e093      	b.n	33d4 <fatan2_deg+0x19c>
fatan_15deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    32ac:	1c21      	adds	r1, r4, #0
    32ae:	1c20      	adds	r0, r4, #0
    32b0:	f7fd fd70 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    32b4:	49b7      	ldr	r1, [pc, #732]	; (3594 <fatan2_deg+0x35c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    32b6:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    32b8:	f7fd fd6c 	bl	d94 <__aeabi_fmul>
    32bc:	49b6      	ldr	r1, [pc, #728]	; (3598 <fatan2_deg+0x360>)
    32be:	f7fd fa19 	bl	6f4 <__aeabi_fadd>
    32c2:	1c01      	adds	r1, r0, #0
    32c4:	1c20      	adds	r0, r4, #0
    32c6:	f7fd fd65 	bl	d94 <__aeabi_fmul>
    32ca:	49b4      	ldr	r1, [pc, #720]	; (359c <fatan2_deg+0x364>)
    32cc:	1c04      	adds	r4, r0, #0
    32ce:	1c38      	adds	r0, r7, #0
    32d0:	f7fd fa10 	bl	6f4 <__aeabi_fadd>
    32d4:	1c01      	adds	r1, r0, #0
    32d6:	1c20      	adds	r0, r4, #0
    32d8:	f7fd fb78 	bl	9cc <__aeabi_fdiv>
    32dc:	1c01      	adds	r1, r0, #0
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:112
	// call the atan estimator to obtain -15 deg <= angle <= 15 deg
	fangledeg = fatan_15deg(x);

	// undo the distortions applied earlier to obtain -90 deg <= angle <= 90 deg
	if (ixmapped) fangledeg += 30.0F;
	if (ixexceeds1) fangledeg = 90.0F - fangledeg;
    32de:	2d00      	cmp	r5, #0
    32e0:	d003      	beq.n	32ea <fatan2_deg+0xb2>
    32e2:	48aa      	ldr	r0, [pc, #680]	; (358c <fatan2_deg+0x354>)
    32e4:	f7fd fe80 	bl	fe8 <__aeabi_fsub>
    32e8:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:113
	if (ixisnegative) fangledeg = -fangledeg;
    32ea:	2e00      	cmp	r6, #0
    32ec:	d002      	beq.n	32f4 <fatan2_deg+0xbc>
    32ee:	2380      	movs	r3, #128	; 0x80
    32f0:	061b      	lsls	r3, r3, #24
    32f2:	18c9      	adds	r1, r1, r3
fatan2_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:135
		return 0.0F;
	}
	
	// from here onwards, x is guaranteed to be non-zero
	// compute atan2 for quadrant 1 (0 to 90 deg) and quadrant 4 (-90 to 0 deg)
	if (x > 0.0F) return (fatan_deg(y / x));
    32f4:	1c08      	adds	r0, r1, #0
    32f6:	e7b0      	b.n	325a <fatan2_deg+0x22>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:137
	// compute atan2 for quadrant 2 (90 to 180 deg)
	if ((x < 0.0F) && (y > 0.0F)) return (180.0F + fatan_deg(y / x));
    32f8:	1c20      	adds	r0, r4, #0
    32fa:	2100      	movs	r1, #0
    32fc:	f7fd f9d2 	bl	6a4 <__aeabi_fcmplt>
    3300:	2800      	cmp	r0, #0
    3302:	d000      	beq.n	3306 <fatan2_deg+0xce>
    3304:	e0b5      	b.n	3472 <fatan2_deg+0x23a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:139
	// compute atan2 for quadrant 3 (-180 to -90 deg)
	return (-180.0F + fatan_deg(y / x));
    3306:	1c21      	adds	r1, r4, #0
    3308:	1c28      	adds	r0, r5, #0
    330a:	f7fd fb5f 	bl	9cc <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:83

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    330e:	2100      	movs	r1, #0
fatan2_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:139
	// compute atan2 for quadrant 1 (0 to 90 deg) and quadrant 4 (-90 to 0 deg)
	if (x > 0.0F) return (fatan_deg(y / x));
	// compute atan2 for quadrant 2 (90 to 180 deg)
	if ((x < 0.0F) && (y > 0.0F)) return (180.0F + fatan_deg(y / x));
	// compute atan2 for quadrant 3 (-180 to -90 deg)
	return (-180.0F + fatan_deg(y / x));
    3310:	1c04      	adds	r4, r0, #0
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:83

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    3312:	f7fd f9c7 	bl	6a4 <__aeabi_fcmplt>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    3316:	2600      	movs	r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:83
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    3318:	2800      	cmp	r0, #0
    331a:	d000      	beq.n	331e <fatan2_deg+0xe6>
    331c:	e110      	b.n	3540 <fatan2_deg+0x308>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
		x = -x;
		ixisnegative = 1;
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    331e:	21fe      	movs	r1, #254	; 0xfe
    3320:	1c20      	adds	r0, r4, #0
    3322:	0589      	lsls	r1, r1, #22
    3324:	f7fd f9d2 	bl	6cc <__aeabi_fcmpgt>
    3328:	2800      	cmp	r0, #0
    332a:	d100      	bne.n	332e <fatan2_deg+0xf6>
    332c:	e106      	b.n	353c <fatan2_deg+0x304>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	{
		x = 1.0F / x;
    332e:	20fe      	movs	r0, #254	; 0xfe
    3330:	1c21      	adds	r1, r4, #0
    3332:	0580      	lsls	r0, r0, #22
    3334:	f7fd fb4a 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:93
		ixexceeds1 = 1;
    3338:	2501      	movs	r5, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
	{
		x = 1.0F / x;
    333a:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:101
	// at this point, x is in the range 0 to 1 inclusive
	// map argument onto range -tan(15 deg) to tan(15 deg)
	// using tan(angle-30deg) = (tan(angle)-tan(30deg)) / (1 + tan(angle)tan(30deg))
	// tan(15deg) maps to tan(-15 deg) = -tan(15 deg)
	// 1. maps to (sqrt(3) - 1) / (sqrt(3) + 1) = 2 - sqrt(3) = tan(15 deg)
	if (x > TAN15DEG)
    333c:	1c20      	adds	r0, r4, #0
    333e:	4994      	ldr	r1, [pc, #592]	; (3590 <fatan2_deg+0x358>)
    3340:	f7fd f9c4 	bl	6cc <__aeabi_fcmpgt>
    3344:	2800      	cmp	r0, #0
    3346:	d07a      	beq.n	343e <fatan2_deg+0x206>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:103
	{
		x = (x - TAN30DEG)/(1.0F + TAN30DEG * x);
    3348:	1c20      	adds	r0, r4, #0
    334a:	4995      	ldr	r1, [pc, #596]	; (35a0 <fatan2_deg+0x368>)
    334c:	f7fd fe4c 	bl	fe8 <__aeabi_fsub>
    3350:	4993      	ldr	r1, [pc, #588]	; (35a0 <fatan2_deg+0x368>)
    3352:	1c07      	adds	r7, r0, #0
    3354:	1c20      	adds	r0, r4, #0
    3356:	f7fd fd1d 	bl	d94 <__aeabi_fmul>
    335a:	21fe      	movs	r1, #254	; 0xfe
    335c:	0589      	lsls	r1, r1, #22
    335e:	f7fd f9c9 	bl	6f4 <__aeabi_fadd>
    3362:	1c01      	adds	r1, r0, #0
    3364:	1c38      	adds	r0, r7, #0
    3366:	f7fd fb31 	bl	9cc <__aeabi_fdiv>
    336a:	1c04      	adds	r4, r0, #0
fatan_15deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    336c:	1c21      	adds	r1, r4, #0
    336e:	f7fd fd11 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    3372:	4988      	ldr	r1, [pc, #544]	; (3594 <fatan2_deg+0x35c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    3374:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    3376:	f7fd fd0d 	bl	d94 <__aeabi_fmul>
    337a:	4987      	ldr	r1, [pc, #540]	; (3598 <fatan2_deg+0x360>)
    337c:	f7fd f9ba 	bl	6f4 <__aeabi_fadd>
    3380:	1c01      	adds	r1, r0, #0
    3382:	1c20      	adds	r0, r4, #0
    3384:	f7fd fd06 	bl	d94 <__aeabi_fmul>
    3388:	4984      	ldr	r1, [pc, #528]	; (359c <fatan2_deg+0x364>)
    338a:	1c04      	adds	r4, r0, #0
    338c:	1c38      	adds	r0, r7, #0
    338e:	f7fd f9b1 	bl	6f4 <__aeabi_fadd>
    3392:	1c01      	adds	r1, r0, #0
    3394:	1c20      	adds	r0, r4, #0
    3396:	f7fd fb19 	bl	9cc <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:111

	// call the atan estimator to obtain -15 deg <= angle <= 15 deg
	fangledeg = fatan_15deg(x);

	// undo the distortions applied earlier to obtain -90 deg <= angle <= 90 deg
	if (ixmapped) fangledeg += 30.0F;
    339a:	4982      	ldr	r1, [pc, #520]	; (35a4 <fatan2_deg+0x36c>)
    339c:	f7fd f9aa 	bl	6f4 <__aeabi_fadd>
    33a0:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:112
	if (ixexceeds1) fangledeg = 90.0F - fangledeg;
    33a2:	2d00      	cmp	r5, #0
    33a4:	d003      	beq.n	33ae <fatan2_deg+0x176>
    33a6:	4879      	ldr	r0, [pc, #484]	; (358c <fatan2_deg+0x354>)
    33a8:	f7fd fe1e 	bl	fe8 <__aeabi_fsub>
    33ac:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:113
	if (ixisnegative) fangledeg = -fangledeg;
    33ae:	2e00      	cmp	r6, #0
    33b0:	d002      	beq.n	33b8 <fatan2_deg+0x180>
    33b2:	2380      	movs	r3, #128	; 0x80
    33b4:	061b      	lsls	r3, r3, #24
    33b6:	18c9      	adds	r1, r1, r3
fatan2_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:139
	// compute atan2 for quadrant 1 (0 to 90 deg) and quadrant 4 (-90 to 0 deg)
	if (x > 0.0F) return (fatan_deg(y / x));
	// compute atan2 for quadrant 2 (90 to 180 deg)
	if ((x < 0.0F) && (y > 0.0F)) return (180.0F + fatan_deg(y / x));
	// compute atan2 for quadrant 3 (-180 to -90 deg)
	return (-180.0F + fatan_deg(y / x));
    33b8:	1c08      	adds	r0, r1, #0
    33ba:	497b      	ldr	r1, [pc, #492]	; (35a8 <fatan2_deg+0x370>)
    33bc:	f7fd fe14 	bl	fe8 <__aeabi_fsub>
    33c0:	e74b      	b.n	325a <fatan2_deg+0x22>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:128
	if (x == 0.0F)
	{
		// return 90 deg for positive y
		if (y > 0.0F) return 90.0F;
		// return -90 deg for negative y
		if (y < 0.0F) return -90.0F;
    33c2:	1c28      	adds	r0, r5, #0
    33c4:	2100      	movs	r1, #0
    33c6:	f7fd f96d 	bl	6a4 <__aeabi_fcmplt>
    33ca:	2800      	cmp	r0, #0
    33cc:	d000      	beq.n	33d0 <fatan2_deg+0x198>
    33ce:	e0b3      	b.n	3538 <fatan2_deg+0x300>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:130
		// otherwise y= 0.0 and return 0 deg (invalid arguments)
		return 0.0F;
    33d0:	2000      	movs	r0, #0
    33d2:	e742      	b.n	325a <fatan2_deg+0x22>
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:103
	// using tan(angle-30deg) = (tan(angle)-tan(30deg)) / (1 + tan(angle)tan(30deg))
	// tan(15deg) maps to tan(-15 deg) = -tan(15 deg)
	// 1. maps to (sqrt(3) - 1) / (sqrt(3) + 1) = 2 - sqrt(3) = tan(15 deg)
	if (x > TAN15DEG)
	{
		x = (x - TAN30DEG)/(1.0F + TAN30DEG * x);
    33d4:	1c20      	adds	r0, r4, #0
    33d6:	4972      	ldr	r1, [pc, #456]	; (35a0 <fatan2_deg+0x368>)
    33d8:	f7fd fe06 	bl	fe8 <__aeabi_fsub>
    33dc:	4970      	ldr	r1, [pc, #448]	; (35a0 <fatan2_deg+0x368>)
    33de:	1c07      	adds	r7, r0, #0
    33e0:	1c20      	adds	r0, r4, #0
    33e2:	f7fd fcd7 	bl	d94 <__aeabi_fmul>
    33e6:	21fe      	movs	r1, #254	; 0xfe
    33e8:	0589      	lsls	r1, r1, #22
    33ea:	f7fd f983 	bl	6f4 <__aeabi_fadd>
    33ee:	1c01      	adds	r1, r0, #0
    33f0:	1c38      	adds	r0, r7, #0
    33f2:	f7fd faeb 	bl	9cc <__aeabi_fdiv>
    33f6:	1c04      	adds	r4, r0, #0
fatan_15deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    33f8:	1c21      	adds	r1, r4, #0
    33fa:	f7fd fccb 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    33fe:	4965      	ldr	r1, [pc, #404]	; (3594 <fatan2_deg+0x35c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    3400:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    3402:	f7fd fcc7 	bl	d94 <__aeabi_fmul>
    3406:	4964      	ldr	r1, [pc, #400]	; (3598 <fatan2_deg+0x360>)
    3408:	f7fd f974 	bl	6f4 <__aeabi_fadd>
    340c:	1c01      	adds	r1, r0, #0
    340e:	1c20      	adds	r0, r4, #0
    3410:	f7fd fcc0 	bl	d94 <__aeabi_fmul>
    3414:	4961      	ldr	r1, [pc, #388]	; (359c <fatan2_deg+0x364>)
    3416:	1c04      	adds	r4, r0, #0
    3418:	1c38      	adds	r0, r7, #0
    341a:	f7fd f96b 	bl	6f4 <__aeabi_fadd>
    341e:	1c01      	adds	r1, r0, #0
    3420:	1c20      	adds	r0, r4, #0
    3422:	f7fd fad3 	bl	9cc <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:111

	// call the atan estimator to obtain -15 deg <= angle <= 15 deg
	fangledeg = fatan_15deg(x);

	// undo the distortions applied earlier to obtain -90 deg <= angle <= 90 deg
	if (ixmapped) fangledeg += 30.0F;
    3426:	495f      	ldr	r1, [pc, #380]	; (35a4 <fatan2_deg+0x36c>)
    3428:	f7fd f964 	bl	6f4 <__aeabi_fadd>
    342c:	1c01      	adds	r1, r0, #0
    342e:	e756      	b.n	32de <fatan2_deg+0xa6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    3430:	2500      	movs	r5, #0
    3432:	e734      	b.n	329e <fatan2_deg+0x66>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    3434:	2380      	movs	r3, #128	; 0x80
    3436:	061b      	lsls	r3, r3, #24
    3438:	18e4      	adds	r4, r4, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:86
		ixisnegative = 1;
    343a:	2601      	movs	r6, #1
    343c:	e720      	b.n	3280 <fatan2_deg+0x48>
fatan_15deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    343e:	1c21      	adds	r1, r4, #0
    3440:	1c20      	adds	r0, r4, #0
    3442:	f7fd fca7 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    3446:	4953      	ldr	r1, [pc, #332]	; (3594 <fatan2_deg+0x35c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    3448:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    344a:	f7fd fca3 	bl	d94 <__aeabi_fmul>
    344e:	4952      	ldr	r1, [pc, #328]	; (3598 <fatan2_deg+0x360>)
    3450:	f7fd f950 	bl	6f4 <__aeabi_fadd>
    3454:	1c01      	adds	r1, r0, #0
    3456:	1c20      	adds	r0, r4, #0
    3458:	f7fd fc9c 	bl	d94 <__aeabi_fmul>
    345c:	494f      	ldr	r1, [pc, #316]	; (359c <fatan2_deg+0x364>)
    345e:	1c04      	adds	r4, r0, #0
    3460:	1c38      	adds	r0, r7, #0
    3462:	f7fd f947 	bl	6f4 <__aeabi_fadd>
    3466:	1c01      	adds	r1, r0, #0
    3468:	1c20      	adds	r0, r4, #0
    346a:	f7fd faaf 	bl	9cc <__aeabi_fdiv>
    346e:	1c01      	adds	r1, r0, #0
    3470:	e797      	b.n	33a2 <fatan2_deg+0x16a>
fatan2_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:137 (discriminator 1)
	
	// from here onwards, x is guaranteed to be non-zero
	// compute atan2 for quadrant 1 (0 to 90 deg) and quadrant 4 (-90 to 0 deg)
	if (x > 0.0F) return (fatan_deg(y / x));
	// compute atan2 for quadrant 2 (90 to 180 deg)
	if ((x < 0.0F) && (y > 0.0F)) return (180.0F + fatan_deg(y / x));
    3472:	1c28      	adds	r0, r5, #0
    3474:	2100      	movs	r1, #0
    3476:	f7fd f929 	bl	6cc <__aeabi_fcmpgt>
    347a:	2800      	cmp	r0, #0
    347c:	d100      	bne.n	3480 <fatan2_deg+0x248>
    347e:	e742      	b.n	3306 <fatan2_deg+0xce>
    3480:	1c21      	adds	r1, r4, #0
    3482:	1c28      	adds	r0, r5, #0
    3484:	f7fd faa2 	bl	9cc <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 1)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    3488:	2100      	movs	r1, #0
fatan2_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:137 (discriminator 1)
	
	// from here onwards, x is guaranteed to be non-zero
	// compute atan2 for quadrant 1 (0 to 90 deg) and quadrant 4 (-90 to 0 deg)
	if (x > 0.0F) return (fatan_deg(y / x));
	// compute atan2 for quadrant 2 (90 to 180 deg)
	if ((x < 0.0F) && (y > 0.0F)) return (180.0F + fatan_deg(y / x));
    348a:	1c04      	adds	r4, r0, #0
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 1)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    348c:	f7fd f90a 	bl	6a4 <__aeabi_fcmplt>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:80 (discriminator 1)

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    3490:	2600      	movs	r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:83 (discriminator 1)
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
    3492:	2800      	cmp	r0, #0
    3494:	d173      	bne.n	357e <fatan2_deg+0x346>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:90
		x = -x;
		ixisnegative = 1;
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
    3496:	21fe      	movs	r1, #254	; 0xfe
    3498:	1c20      	adds	r0, r4, #0
    349a:	0589      	lsls	r1, r1, #22
    349c:	f7fd f916 	bl	6cc <__aeabi_fcmpgt>
    34a0:	2800      	cmp	r0, #0
    34a2:	d071      	beq.n	3588 <fatan2_deg+0x350>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	{
		x = 1.0F / x;
    34a4:	20fe      	movs	r0, #254	; 0xfe
    34a6:	1c21      	adds	r1, r4, #0
    34a8:	0580      	lsls	r0, r0, #22
    34aa:	f7fd fa8f 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:93
		ixexceeds1 = 1;
    34ae:	2501      	movs	r5, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:92
	}

	// test for argument above 1 to allow use of atan(x)=pi/2-atan(1/x)
	if (x > 1.0F)
	{
		x = 1.0F / x;
    34b0:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:101
	// at this point, x is in the range 0 to 1 inclusive
	// map argument onto range -tan(15 deg) to tan(15 deg)
	// using tan(angle-30deg) = (tan(angle)-tan(30deg)) / (1 + tan(angle)tan(30deg))
	// tan(15deg) maps to tan(-15 deg) = -tan(15 deg)
	// 1. maps to (sqrt(3) - 1) / (sqrt(3) + 1) = 2 - sqrt(3) = tan(15 deg)
	if (x > TAN15DEG)
    34b2:	1c20      	adds	r0, r4, #0
    34b4:	4936      	ldr	r1, [pc, #216]	; (3590 <fatan2_deg+0x358>)
    34b6:	f7fd f909 	bl	6cc <__aeabi_fcmpgt>
    34ba:	2800      	cmp	r0, #0
    34bc:	d045      	beq.n	354a <fatan2_deg+0x312>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:103
	{
		x = (x - TAN30DEG)/(1.0F + TAN30DEG * x);
    34be:	1c20      	adds	r0, r4, #0
    34c0:	4937      	ldr	r1, [pc, #220]	; (35a0 <fatan2_deg+0x368>)
    34c2:	f7fd fd91 	bl	fe8 <__aeabi_fsub>
    34c6:	4936      	ldr	r1, [pc, #216]	; (35a0 <fatan2_deg+0x368>)
    34c8:	1c07      	adds	r7, r0, #0
    34ca:	1c20      	adds	r0, r4, #0
    34cc:	f7fd fc62 	bl	d94 <__aeabi_fmul>
    34d0:	21fe      	movs	r1, #254	; 0xfe
    34d2:	0589      	lsls	r1, r1, #22
    34d4:	f7fd f90e 	bl	6f4 <__aeabi_fadd>
    34d8:	1c01      	adds	r1, r0, #0
    34da:	1c38      	adds	r0, r7, #0
    34dc:	f7fd fa76 	bl	9cc <__aeabi_fdiv>
    34e0:	1c04      	adds	r4, r0, #0
fatan_15deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    34e2:	1c21      	adds	r1, r4, #0
    34e4:	f7fd fc56 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    34e8:	492a      	ldr	r1, [pc, #168]	; (3594 <fatan2_deg+0x35c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    34ea:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    34ec:	f7fd fc52 	bl	d94 <__aeabi_fmul>
    34f0:	4929      	ldr	r1, [pc, #164]	; (3598 <fatan2_deg+0x360>)
    34f2:	f7fd f8ff 	bl	6f4 <__aeabi_fadd>
    34f6:	1c01      	adds	r1, r0, #0
    34f8:	1c20      	adds	r0, r4, #0
    34fa:	f7fd fc4b 	bl	d94 <__aeabi_fmul>
    34fe:	4927      	ldr	r1, [pc, #156]	; (359c <fatan2_deg+0x364>)
    3500:	1c04      	adds	r4, r0, #0
    3502:	1c38      	adds	r0, r7, #0
    3504:	f7fd f8f6 	bl	6f4 <__aeabi_fadd>
    3508:	1c01      	adds	r1, r0, #0
    350a:	1c20      	adds	r0, r4, #0
    350c:	f7fd fa5e 	bl	9cc <__aeabi_fdiv>
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:111

	// call the atan estimator to obtain -15 deg <= angle <= 15 deg
	fangledeg = fatan_15deg(x);

	// undo the distortions applied earlier to obtain -90 deg <= angle <= 90 deg
	if (ixmapped) fangledeg += 30.0F;
    3510:	4924      	ldr	r1, [pc, #144]	; (35a4 <fatan2_deg+0x36c>)
    3512:	f7fd f8ef 	bl	6f4 <__aeabi_fadd>
    3516:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:112
	if (ixexceeds1) fangledeg = 90.0F - fangledeg;
    3518:	2d00      	cmp	r5, #0
    351a:	d003      	beq.n	3524 <fatan2_deg+0x2ec>
    351c:	481b      	ldr	r0, [pc, #108]	; (358c <fatan2_deg+0x354>)
    351e:	f7fd fd63 	bl	fe8 <__aeabi_fsub>
    3522:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:113
	if (ixisnegative) fangledeg = -fangledeg;
    3524:	2e00      	cmp	r6, #0
    3526:	d002      	beq.n	352e <fatan2_deg+0x2f6>
    3528:	2380      	movs	r3, #128	; 0x80
    352a:	061b      	lsls	r3, r3, #24
    352c:	18c9      	adds	r1, r1, r3
fatan2_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:137
	
	// from here onwards, x is guaranteed to be non-zero
	// compute atan2 for quadrant 1 (0 to 90 deg) and quadrant 4 (-90 to 0 deg)
	if (x > 0.0F) return (fatan_deg(y / x));
	// compute atan2 for quadrant 2 (90 to 180 deg)
	if ((x < 0.0F) && (y > 0.0F)) return (180.0F + fatan_deg(y / x));
    352e:	1c08      	adds	r0, r1, #0
    3530:	491d      	ldr	r1, [pc, #116]	; (35a8 <fatan2_deg+0x370>)
    3532:	f7fd f8df 	bl	6f4 <__aeabi_fadd>
    3536:	e690      	b.n	325a <fatan2_deg+0x22>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:128
	if (x == 0.0F)
	{
		// return 90 deg for positive y
		if (y > 0.0F) return 90.0F;
		// return -90 deg for negative y
		if (y < 0.0F) return -90.0F;
    3538:	481c      	ldr	r0, [pc, #112]	; (35ac <fatan2_deg+0x374>)
    353a:	e68e      	b.n	325a <fatan2_deg+0x22>
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    353c:	2500      	movs	r5, #0
    353e:	e6fd      	b.n	333c <fatan2_deg+0x104>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    3540:	2380      	movs	r3, #128	; 0x80
    3542:	061b      	lsls	r3, r3, #24
    3544:	18e4      	adds	r4, r4, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:86
		ixisnegative = 1;
    3546:	2601      	movs	r6, #1
    3548:	e6e9      	b.n	331e <fatan2_deg+0xe6>
fatan_15deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    354a:	1c21      	adds	r1, r4, #0
    354c:	1c20      	adds	r0, r4, #0
    354e:	f7fd fc21 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    3552:	4910      	ldr	r1, [pc, #64]	; (3594 <fatan2_deg+0x35c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:156
#define PADE_B 25.086941612F	// theoretical Pade[3/2] value is 4/9*180/PI=25.46479
#define PADE_C 1.6867633134F	// theoretical Pade[3/2] value is 5/3=1.66667

	// compute the approximation to the inverse tangent
	// the function is anti-symmetric as required for positive and negative arguments
	x2 = x * x;
    3554:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:157
	return (x * (PADE_A + x2 * PADE_B) / (PADE_C + x2));
    3556:	f7fd fc1d 	bl	d94 <__aeabi_fmul>
    355a:	490f      	ldr	r1, [pc, #60]	; (3598 <fatan2_deg+0x360>)
    355c:	f7fd f8ca 	bl	6f4 <__aeabi_fadd>
    3560:	1c01      	adds	r1, r0, #0
    3562:	1c20      	adds	r0, r4, #0
    3564:	f7fd fc16 	bl	d94 <__aeabi_fmul>
    3568:	490c      	ldr	r1, [pc, #48]	; (359c <fatan2_deg+0x364>)
    356a:	1c04      	adds	r4, r0, #0
    356c:	1c38      	adds	r0, r7, #0
    356e:	f7fd f8c1 	bl	6f4 <__aeabi_fadd>
    3572:	1c01      	adds	r1, r0, #0
    3574:	1c20      	adds	r0, r4, #0
    3576:	f7fd fa29 	bl	9cc <__aeabi_fdiv>
    357a:	1c01      	adds	r1, r0, #0
    357c:	e7cc      	b.n	3518 <fatan2_deg+0x2e0>
fatan_deg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:85
	ixisnegative = ixexceeds1 = ixmapped = 0;
	
	// test for negative argument to allow use of tan(-x)=-tan(x)
	if (x < 0.0F)
	{
		x = -x;
    357e:	2380      	movs	r3, #128	; 0x80
    3580:	061b      	lsls	r3, r3, #24
    3582:	18e4      	adds	r4, r4, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:86
		ixisnegative = 1;
    3584:	2601      	movs	r6, #1
    3586:	e786      	b.n	3496 <fatan2_deg+0x25e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/approximations.c:80

#define TAN15DEG 0.26794919243F		// tan(15 deg) = 2 - sqrt(3)
#define TAN30DEG 0.57735026919F		// tan(30 deg) = 1/sqrt(3)

	// reset all flags
	ixisnegative = ixexceeds1 = ixmapped = 0;
    3588:	2500      	movs	r5, #0
    358a:	e792      	b.n	34b2 <fatan2_deg+0x27a>
    358c:	42b40000 	.word	0x42b40000
    3590:	3e8930a3 	.word	0x3e8930a3
    3594:	41c8b20e 	.word	0x41c8b20e
    3598:	42c149ee 	.word	0x42c149ee
    359c:	3fd7e7dc 	.word	0x3fd7e7dc
    35a0:	3f13cd3a 	.word	0x3f13cd3a
    35a4:	41f00000 	.word	0x41f00000
    35a8:	43340000 	.word	0x43340000
    35ac:	c2b40000 	.word	0xc2b40000

000035b0 <MPL3115_Init>:
MPL3115_Init():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:104
#define MAG3110_CTRL_REG2         		0x11
#define MAG3110_WHO_AM_I_VALUE     		0xC4

// initialize MPL3115 pressure and temperature sensor
int8 MPL3115_Init(LDD_TDeviceData *DeviceDataPtr, struct PressureSensor *pthisPressure)
{
    35b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    35b2:	4657      	mov	r7, sl
    35b4:	464e      	mov	r6, r9
    35b6:	4645      	mov	r5, r8
    35b8:	b4e0      	push	{r5, r6, r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:109
	LDD_I2C_TBusState BusState;		// I2C bus state
	LDD_I2C_TErrorMask  MPL3115_I2C_Error;

	// set up the MPL3115 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, MPL3115_I2C_ADDR);
    35ba:	2260      	movs	r2, #96	; 0x60
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:104
#define MAG3110_CTRL_REG2         		0x11
#define MAG3110_WHO_AM_I_VALUE     		0xC4

// initialize MPL3115 pressure and temperature sensor
int8 MPL3115_Init(LDD_TDeviceData *DeviceDataPtr, struct PressureSensor *pthisPressure)
{
    35bc:	b084      	sub	sp, #16
    35be:	468a      	mov	sl, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:109
	LDD_I2C_TBusState BusState;		// I2C bus state
	LDD_I2C_TErrorMask  MPL3115_I2C_Error;

	// set up the MPL3115 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, MPL3115_I2C_ADDR);
    35c0:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:104
#define MAG3110_CTRL_REG2         		0x11
#define MAG3110_WHO_AM_I_VALUE     		0xC4

// initialize MPL3115 pressure and temperature sensor
int8 MPL3115_Init(LDD_TDeviceData *DeviceDataPtr, struct PressureSensor *pthisPressure)
{
    35c2:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:109
	LDD_I2C_TBusState BusState;		// I2C bus state
	LDD_I2C_TErrorMask  MPL3115_I2C_Error;

	// set up the MPL3115 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, MPL3115_I2C_ADDR);
    35c4:	f00f fa02 	bl	129cc <I2C_SelectSlaveDevice>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:118
	// [6]: RAW=0 
	// [5-3]: OS=000 
	// [2]: RST=0
	// [1]: OST=0
	// [0]: SBYB=0 to enter standby
	I2C_Buf[0] = MPL3115_CTRL_REG1;		// byte 0 is the destination register
    35c8:	492b      	ldr	r1, [pc, #172]	; (3678 <MPL3115_Init+0xc8>)
    35ca:	2326      	movs	r3, #38	; 0x26
    35cc:	700b      	strb	r3, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:120
	I2C_Buf[1] = 0x00;						// byte 1 is the data to write
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;			// reset the I2C sent flag
    35ce:	4e2b      	ldr	r6, [pc, #172]	; (367c <MPL3115_Init+0xcc>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:119
	// [5-3]: OS=000 
	// [2]: RST=0
	// [1]: OST=0
	// [0]: SBYB=0 to enter standby
	I2C_Buf[0] = MPL3115_CTRL_REG1;		// byte 0 is the destination register
	I2C_Buf[1] = 0x00;						// byte 1 is the data to write
    35d0:	2300      	movs	r3, #0
    35d2:	704b      	strb	r3, [r1, #1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:120
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;			// reset the I2C sent flag
    35d4:	2374      	movs	r3, #116	; 0x74
    35d6:	5cf2      	ldrb	r2, [r6, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:118
	// [6]: RAW=0 
	// [5-3]: OS=000 
	// [2]: RST=0
	// [1]: OST=0
	// [0]: SBYB=0 to enter standby
	I2C_Buf[0] = MPL3115_CTRL_REG1;		// byte 0 is the destination register
    35d8:	4689      	mov	r9, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:120
	I2C_Buf[1] = 0x00;						// byte 1 is the data to write
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;			// reset the I2C sent flag
    35da:	2101      	movs	r1, #1
    35dc:	438a      	bics	r2, r1
    35de:	54f2      	strb	r2, [r6, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:123

	// transmit the bytes
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    35e0:	1c20      	adds	r0, r4, #0
    35e2:	2301      	movs	r3, #1
    35e4:	4649      	mov	r1, r9
    35e6:	2202      	movs	r2, #2
    35e8:	f00f f936 	bl	12858 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:134
		// ERR_OK = 0x00: device is present
		// ERR_DISABLED = 0x07: device is disabled
		// ERR_SPEED = 0x01: device does not work in the active speed mode
		I2C_GetError(DeviceDataPtr, &MPL3115_I2C_Error);
	}
	while ((!MPL3115_I2C_Error) && !(mqxglobals.I2C_Status & I2C_SENT_FLAG));
    35ec:	2374      	movs	r3, #116	; 0x74
    35ee:	ad02      	add	r5, sp, #8
    35f0:	4698      	mov	r8, r3
    35f2:	2701      	movs	r7, #1
    35f4:	e003      	b.n	35fe <MPL3115_Init+0x4e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:134 (discriminator 1)
    35f6:	4641      	mov	r1, r8
    35f8:	5c73      	ldrb	r3, [r6, r1]
    35fa:	421f      	tst	r7, r3
    35fc:	d108      	bne.n	3610 <MPL3115_Init+0x60>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:132 (discriminator 1)
	{
		// read the error flag
		// ERR_OK = 0x00: device is present
		// ERR_DISABLED = 0x07: device is disabled
		// ERR_SPEED = 0x01: device does not work in the active speed mode
		I2C_GetError(DeviceDataPtr, &MPL3115_I2C_Error);
    35fe:	1c20      	adds	r0, r4, #0
    3600:	1c29      	adds	r1, r5, #0
    3602:	f00f fa1b 	bl	12a3c <I2C_GetError>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:134 (discriminator 1)
	}
	while ((!MPL3115_I2C_Error) && !(mqxglobals.I2C_Status & I2C_SENT_FLAG));
    3606:	882b      	ldrh	r3, [r5, #0]
    3608:	2b00      	cmp	r3, #0
    360a:	d0f4      	beq.n	35f6 <MPL3115_Init+0x46>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:138

	// return immediately with error condition if MPL3115 is not present
	if (MPL3115_I2C_Error)
		return false;
    360c:	2000      	movs	r0, #0
    360e:	e02b      	b.n	3668 <MPL3115_Init+0xb8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:143 (discriminator 1)

	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    3610:	1c20      	adds	r0, r4, #0
    3612:	4669      	mov	r1, sp
    3614:	f00f fa20 	bl	12a58 <I2C_CheckBus>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:144 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    3618:	466a      	mov	r2, sp
    361a:	7813      	ldrb	r3, [r2, #0]
    361c:	2b01      	cmp	r3, #1
    361e:	d1f7      	bne.n	3610 <MPL3115_Init+0x60>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:157
	// [6]: RAW=0 to disable raw measurements
	// [5-3]: OS=111 for OS ratio=128 for maximum internal averaging with 512ms output interval
	// [2]: RST=0 do not enter reset
	// [1]: OST=0 do not initiate a reading
	// [0]: SBYB=1 to enter active mode
	I2C_Buf[0] = MPL3115_CTRL_REG1;
    3620:	4649      	mov	r1, r9
    3622:	2226      	movs	r2, #38	; 0x26
    3624:	700a      	strb	r2, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:158
	I2C_Buf[1] = 0xB9;
    3626:	22b9      	movs	r2, #185	; 0xb9
    3628:	704a      	strb	r2, [r1, #1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:159
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    362a:	2274      	movs	r2, #116	; 0x74
    362c:	5cb1      	ldrb	r1, [r6, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:160
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    362e:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:159
	// [2]: RST=0 do not enter reset
	// [1]: OST=0 do not initiate a reading
	// [0]: SBYB=1 to enter active mode
	I2C_Buf[0] = MPL3115_CTRL_REG1;
	I2C_Buf[1] = 0xB9;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3630:	4399      	bics	r1, r3
    3632:	54b1      	strb	r1, [r6, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:160
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    3634:	2301      	movs	r3, #1
    3636:	4649      	mov	r1, r9
    3638:	2202      	movs	r2, #2
    363a:	f00f f90d 	bl	12858 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:162
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    363e:	2174      	movs	r1, #116	; 0x74
    3640:	2201      	movs	r2, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:162 (discriminator 1)
    3642:	5c73      	ldrb	r3, [r6, r1]
    3644:	421a      	tst	r2, r3
    3646:	d0fc      	beq.n	3642 <MPL3115_Init+0x92>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:166 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    3648:	1c20      	adds	r0, r4, #0
    364a:	4669      	mov	r1, sp
    364c:	f00f fa04 	bl	12a58 <I2C_CheckBus>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:167 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    3650:	466a      	mov	r2, sp
    3652:	7813      	ldrb	r3, [r2, #0]
    3654:	2b01      	cmp	r3, #1
    3656:	d1f7      	bne.n	3648 <MPL3115_Init+0x98>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:172

	// store the gain terms in the pressure structure
#define MPL3115_MPERCOUNT 0.0000152587890625F		// 1/65536 fixed range for MPL3115	
#define MPL3115_CPERCPOUNT 0.00390625F				// 1/256 fixed range for MPL3115
	pthisPressure->fmPerCount = MPL3115_MPERCOUNT;
    3658:	23de      	movs	r3, #222	; 0xde
    365a:	059b      	lsls	r3, r3, #22
    365c:	4651      	mov	r1, sl
    365e:	610b      	str	r3, [r1, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:173
	pthisPressure->fCPerCount = MPL3115_CPERCPOUNT;
    3660:	23ee      	movs	r3, #238	; 0xee
    3662:	059b      	lsls	r3, r3, #22
    3664:	614b      	str	r3, [r1, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:175

	return (true);
    3666:	2001      	movs	r0, #1
    3668:	b240      	sxtb	r0, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:176
}
    366a:	b004      	add	sp, #16
    366c:	bc1c      	pop	{r2, r3, r4}
    366e:	4690      	mov	r8, r2
    3670:	4699      	mov	r9, r3
    3672:	46a2      	mov	sl, r4
    3674:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3676:	46c0      	nop			; (mov r8, r8)
    3678:	1fffe160 	.word	0x1fffe160
    367c:	1fffe294 	.word	0x1fffe294

00003680 <FXOS8700_Init>:
FXOS8700_Init():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:180

// initialize FXOS8700 accelerometer plus magnetometer sensor
void FXOS8700_Init(LDD_TDeviceData *DeviceDataPtr, struct AccelSensor *pthisAccel, struct MagSensor *pthisMag)
{
    3680:	b5f0      	push	{r4, r5, r6, r7, lr}
    3682:	464f      	mov	r7, r9
    3684:	4646      	mov	r6, r8
    3686:	b4c0      	push	{r6, r7}
    3688:	4689      	mov	r9, r1
    368a:	b083      	sub	sp, #12
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:184
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXOS8700 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXOS8700_I2C_ADDR);
    368c:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:180
	return (true);
}

// initialize FXOS8700 accelerometer plus magnetometer sensor
void FXOS8700_Init(LDD_TDeviceData *DeviceDataPtr, struct AccelSensor *pthisAccel, struct MagSensor *pthisMag)
{
    368e:	4690      	mov	r8, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:184
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXOS8700 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXOS8700_I2C_ADDR);
    3690:	221e      	movs	r2, #30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:180
	return (true);
}

// initialize FXOS8700 accelerometer plus magnetometer sensor
void FXOS8700_Init(LDD_TDeviceData *DeviceDataPtr, struct AccelSensor *pthisAccel, struct MagSensor *pthisMag)
{
    3692:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:184
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXOS8700 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXOS8700_I2C_ADDR);
    3694:	f00f f99a 	bl	129cc <I2C_SelectSlaveDevice>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:189

	// write 0000 0000 = 0x00 to CTRL_REG1 to place FXOS8700 into standby
	// [7-1] = 0000 000
	// [0]: active=0
	I2C_Buf[0] = FXOS8700_CTRL_REG1;
    3698:	4f56      	ldr	r7, [pc, #344]	; (37f4 <FXOS8700_Init+0x174>)
    369a:	232a      	movs	r3, #42	; 0x2a
    369c:	703b      	strb	r3, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:191
	I2C_Buf[1] = 0x00;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    369e:	4d56      	ldr	r5, [pc, #344]	; (37f8 <FXOS8700_Init+0x178>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:190

	// write 0000 0000 = 0x00 to CTRL_REG1 to place FXOS8700 into standby
	// [7-1] = 0000 000
	// [0]: active=0
	I2C_Buf[0] = FXOS8700_CTRL_REG1;
	I2C_Buf[1] = 0x00;
    36a0:	2300      	movs	r3, #0
    36a2:	707b      	strb	r3, [r7, #1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:191
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    36a4:	2374      	movs	r3, #116	; 0x74
    36a6:	5cea      	ldrb	r2, [r5, r3]
    36a8:	2101      	movs	r1, #1
    36aa:	438a      	bics	r2, r1
    36ac:	54ea      	strb	r2, [r5, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:192
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    36ae:	1c39      	adds	r1, r7, #0
    36b0:	2202      	movs	r2, #2
    36b2:	1c30      	adds	r0, r6, #0
    36b4:	2301      	movs	r3, #1
    36b6:	f00f f8cf 	bl	12858 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:194
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    36ba:	2174      	movs	r1, #116	; 0x74
    36bc:	2201      	movs	r2, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:194 (discriminator 1)
    36be:	5c6b      	ldrb	r3, [r5, r1]
    36c0:	421a      	tst	r2, r3
    36c2:	d0fc      	beq.n	36be <FXOS8700_Init+0x3e>
    36c4:	466c      	mov	r4, sp
    36c6:	3407      	adds	r4, #7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:198 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    36c8:	1c30      	adds	r0, r6, #0
    36ca:	1c21      	adds	r1, r4, #0
    36cc:	f00f f9c4 	bl	12a58 <I2C_CheckBus>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:199 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    36d0:	7823      	ldrb	r3, [r4, #0]
    36d2:	2b01      	cmp	r3, #1
    36d4:	d1f8      	bne.n	36c8 <FXOS8700_Init+0x48>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:207
	// [7]: m_acal=0: auto calibration disabled
	// [6]: m_rst=0: one-shot magnetic reset disabled
	// [5]: m_ost=0: one-shot magnetic measurement disabled
	// [4-2]: m_os=111=7: 8x oversampling (for 200Hz) to reduce magnetometer noise
	// [1-0]: m_hms=11=3: select hybrid mode with accel and magnetometer active
	I2C_Buf[0] = FXOS8700_M_CTRL_REG1;
    36d6:	225b      	movs	r2, #91	; 0x5b
    36d8:	703a      	strb	r2, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:208
	I2C_Buf[1] = 0x1F;
    36da:	221f      	movs	r2, #31
    36dc:	707a      	strb	r2, [r7, #1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:209
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    36de:	2274      	movs	r2, #116	; 0x74
    36e0:	5ca9      	ldrb	r1, [r5, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:210
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    36e2:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:209
	// [5]: m_ost=0: one-shot magnetic measurement disabled
	// [4-2]: m_os=111=7: 8x oversampling (for 200Hz) to reduce magnetometer noise
	// [1-0]: m_hms=11=3: select hybrid mode with accel and magnetometer active
	I2C_Buf[0] = FXOS8700_M_CTRL_REG1;
	I2C_Buf[1] = 0x1F;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    36e4:	4399      	bics	r1, r3
    36e6:	54a9      	strb	r1, [r5, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:210
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    36e8:	2301      	movs	r3, #1
    36ea:	1c39      	adds	r1, r7, #0
    36ec:	2202      	movs	r2, #2
    36ee:	f00f f8b3 	bl	12858 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:212
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    36f2:	2174      	movs	r1, #116	; 0x74
    36f4:	2201      	movs	r2, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:212 (discriminator 1)
    36f6:	5c6b      	ldrb	r3, [r5, r1]
    36f8:	421a      	tst	r2, r3
    36fa:	d0fc      	beq.n	36f6 <FXOS8700_Init+0x76>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:216 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    36fc:	1c30      	adds	r0, r6, #0
    36fe:	1c21      	adds	r1, r4, #0
    3700:	f00f f9aa 	bl	12a58 <I2C_CheckBus>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:217 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    3704:	7823      	ldrb	r3, [r4, #0]
    3706:	2b01      	cmp	r3, #1
    3708:	d1f8      	bne.n	36fc <FXOS8700_Init+0x7c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:227
	// [5]: hyb_autoinc_mode=1 to map the magnetometer registers to follow the accelerometer registers
	// [4]: m_maxmin_dis=0 to retain default min/max latching even though not used
	// [3]: m_maxmin_dis_ths=0
	// [2]: m_maxmin_rst=0
	// [1-0]: m_rst_cnt=00 to enable magnetic reset each cycle
	I2C_Buf[0] = FXOS8700_M_CTRL_REG2;
    370a:	225c      	movs	r2, #92	; 0x5c
    370c:	703a      	strb	r2, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:228
	I2C_Buf[1] = 0x20;
    370e:	2220      	movs	r2, #32
    3710:	707a      	strb	r2, [r7, #1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:229
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3712:	2274      	movs	r2, #116	; 0x74
    3714:	5ca9      	ldrb	r1, [r5, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:230
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    3716:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:229
	// [3]: m_maxmin_dis_ths=0
	// [2]: m_maxmin_rst=0
	// [1-0]: m_rst_cnt=00 to enable magnetic reset each cycle
	I2C_Buf[0] = FXOS8700_M_CTRL_REG2;
	I2C_Buf[1] = 0x20;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3718:	4399      	bics	r1, r3
    371a:	54a9      	strb	r1, [r5, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:230
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    371c:	2301      	movs	r3, #1
    371e:	1c39      	adds	r1, r7, #0
    3720:	2202      	movs	r2, #2
    3722:	f00f f899 	bl	12858 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:232
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    3726:	2174      	movs	r1, #116	; 0x74
    3728:	2201      	movs	r2, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:232 (discriminator 1)
    372a:	5c6b      	ldrb	r3, [r5, r1]
    372c:	421a      	tst	r2, r3
    372e:	d0fc      	beq.n	372a <FXOS8700_Init+0xaa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:236 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    3730:	1c30      	adds	r0, r6, #0
    3732:	1c21      	adds	r1, r4, #0
    3734:	f00f f990 	bl	12a58 <I2C_CheckBus>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:237 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    3738:	7823      	ldrb	r3, [r4, #0]
    373a:	2b01      	cmp	r3, #1
    373c:	d1f8      	bne.n	3730 <FXOS8700_Init+0xb0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:247
	// [5]: reserved
	// [4]: hpf_out=0
	// [3]: reserved
	// [2]: reserved
	// [1-0]: fs=01 for 4g mode: 2048 counts / g = 8192 counts / g after 2 bit left shift
	I2C_Buf[0] = FXOS8700_XYZ_DATA_CFG;
    373e:	220e      	movs	r2, #14
    3740:	703a      	strb	r2, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:248
	I2C_Buf[1] = 0x01;
    3742:	707b      	strb	r3, [r7, #1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:249
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3744:	2274      	movs	r2, #116	; 0x74
    3746:	5ca9      	ldrb	r1, [r5, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:250
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    3748:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:249
	// [3]: reserved
	// [2]: reserved
	// [1-0]: fs=01 for 4g mode: 2048 counts / g = 8192 counts / g after 2 bit left shift
	I2C_Buf[0] = FXOS8700_XYZ_DATA_CFG;
	I2C_Buf[1] = 0x01;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    374a:	4399      	bics	r1, r3
    374c:	54a9      	strb	r1, [r5, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:250
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    374e:	2301      	movs	r3, #1
    3750:	1c39      	adds	r1, r7, #0
    3752:	2202      	movs	r2, #2
    3754:	f00f f880 	bl	12858 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:252
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    3758:	2174      	movs	r1, #116	; 0x74
    375a:	2201      	movs	r2, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:252 (discriminator 1)
    375c:	5c6b      	ldrb	r3, [r5, r1]
    375e:	421a      	tst	r2, r3
    3760:	d0fc      	beq.n	375c <FXOS8700_Init+0xdc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:256 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    3762:	1c30      	adds	r0, r6, #0
    3764:	1c21      	adds	r1, r4, #0
    3766:	f00f f977 	bl	12a58 <I2C_CheckBus>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:257 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    376a:	7823      	ldrb	r3, [r4, #0]
    376c:	2b01      	cmp	r3, #1
    376e:	d1f8      	bne.n	3762 <FXOS8700_Init+0xe2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:266
	// [6]: rst=0: reset disabled
	// [5]: unused
	// [4-3]: smods=00
	// [2]: slpe=0: auto sleep disabled
	// [1-0]: mods=10 for high resolution (maximum over sampling)
	I2C_Buf[0] = FXOS8700_CTRL_REG2;
    3770:	222b      	movs	r2, #43	; 0x2b
    3772:	703a      	strb	r2, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:267
	I2C_Buf[1] = 0x02;
    3774:	2202      	movs	r2, #2
    3776:	707a      	strb	r2, [r7, #1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:268
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3778:	2274      	movs	r2, #116	; 0x74
    377a:	5ca9      	ldrb	r1, [r5, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:269
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    377c:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:268
	// [4-3]: smods=00
	// [2]: slpe=0: auto sleep disabled
	// [1-0]: mods=10 for high resolution (maximum over sampling)
	I2C_Buf[0] = FXOS8700_CTRL_REG2;
	I2C_Buf[1] = 0x02;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    377e:	4399      	bics	r1, r3
    3780:	54a9      	strb	r1, [r5, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:269
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    3782:	2301      	movs	r3, #1
    3784:	1c39      	adds	r1, r7, #0
    3786:	2202      	movs	r2, #2
    3788:	f00f f866 	bl	12858 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:271
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    378c:	2174      	movs	r1, #116	; 0x74
    378e:	2201      	movs	r2, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:271 (discriminator 1)
    3790:	5c6b      	ldrb	r3, [r5, r1]
    3792:	421a      	tst	r2, r3
    3794:	d0fc      	beq.n	3790 <FXOS8700_Init+0x110>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:275 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    3796:	1c30      	adds	r0, r6, #0
    3798:	1c21      	adds	r1, r4, #0
    379a:	f00f f95d 	bl	12a58 <I2C_CheckBus>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:276 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    379e:	7823      	ldrb	r3, [r4, #0]
    37a0:	2b01      	cmp	r3, #1
    37a2:	d1f8      	bne.n	3796 <FXOS8700_Init+0x116>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:284
	// [7-6]: aslp_rate=00
	// [5-3]: dr=001=1 for 200Hz data rate (when in hybrid mode)
	// [2]: lnoise=1 for low noise mode (since we're in 4g mode)
	// [1]: f_read=0 for normal 16 bit reads
	// [0]: active=1 to take the part out of standby and enable sampling
	I2C_Buf[0] = FXOS8700_CTRL_REG1;
    37a4:	222a      	movs	r2, #42	; 0x2a
    37a6:	703a      	strb	r2, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:285
	I2C_Buf[1] = 0x0D;
    37a8:	220d      	movs	r2, #13
    37aa:	707a      	strb	r2, [r7, #1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:286
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    37ac:	2274      	movs	r2, #116	; 0x74
    37ae:	5ca9      	ldrb	r1, [r5, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:287
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    37b0:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:286
	// [2]: lnoise=1 for low noise mode (since we're in 4g mode)
	// [1]: f_read=0 for normal 16 bit reads
	// [0]: active=1 to take the part out of standby and enable sampling
	I2C_Buf[0] = FXOS8700_CTRL_REG1;
	I2C_Buf[1] = 0x0D;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    37b2:	4399      	bics	r1, r3
    37b4:	54a9      	strb	r1, [r5, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:287
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    37b6:	2301      	movs	r3, #1
    37b8:	1c39      	adds	r1, r7, #0
    37ba:	2202      	movs	r2, #2
    37bc:	f00f f84c 	bl	12858 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:289
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    37c0:	2174      	movs	r1, #116	; 0x74
    37c2:	2201      	movs	r2, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:289 (discriminator 1)
    37c4:	5c6b      	ldrb	r3, [r5, r1]
    37c6:	421a      	tst	r2, r3
    37c8:	d0fc      	beq.n	37c4 <FXOS8700_Init+0x144>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:293 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    37ca:	1c30      	adds	r0, r6, #0
    37cc:	1c21      	adds	r1, r4, #0
    37ce:	f00f f943 	bl	12a58 <I2C_CheckBus>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:294 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    37d2:	7823      	ldrb	r3, [r4, #0]
    37d4:	2b01      	cmp	r3, #1
    37d6:	d1f8      	bne.n	37ca <FXOS8700_Init+0x14a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:300

	// store the gain terms in the accelerometer and magnetometer sensor structures
#define FXOS8700_UTPERCOUNT 0.1F      				// fixed range for FXOS8700 magnetometer
#define FXOS8700_COUNTSPERUT 10.0F					// must be reciprocal of FUTPERCOUNT
#define FXOS8700_GPERCOUNT 0.0001220703125F			// equal to 1/8192
	pthisAccel->fgPerCount = FXOS8700_GPERCOUNT;
    37d8:	23e4      	movs	r3, #228	; 0xe4
    37da:	464a      	mov	r2, r9
    37dc:	059b      	lsls	r3, r3, #22
    37de:	6253      	str	r3, [r2, #36]	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:301
	pthisMag->fuTPerCount = FXOS8700_UTPERCOUNT;
    37e0:	4b06      	ldr	r3, [pc, #24]	; (37fc <FXOS8700_Init+0x17c>)
    37e2:	4642      	mov	r2, r8
    37e4:	63d3      	str	r3, [r2, #60]	; 0x3c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:302
	pthisMag->fCountsPeruT = FXOS8700_COUNTSPERUT;
    37e6:	4b06      	ldr	r3, [pc, #24]	; (3800 <FXOS8700_Init+0x180>)
    37e8:	6413      	str	r3, [r2, #64]	; 0x40
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:305

	return;
}
    37ea:	b003      	add	sp, #12
    37ec:	bc0c      	pop	{r2, r3}
    37ee:	4690      	mov	r8, r2
    37f0:	4699      	mov	r9, r3
    37f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37f4:	1fffe160 	.word	0x1fffe160
    37f8:	1fffe294 	.word	0x1fffe294
    37fc:	3dcccccd 	.word	0x3dcccccd
    3800:	41200000 	.word	0x41200000

00003804 <FXAS21000_Init>:
FXAS21000_Init():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:309

// initialize FXAS21000 gyroscope sensor
void FXAS21000_Init(LDD_TDeviceData *DeviceDataPtr, struct GyroSensor *pthisGyro)
{
    3804:	b5f0      	push	{r4, r5, r6, r7, lr}
    3806:	4647      	mov	r7, r8
    3808:	b480      	push	{r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:313
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXAS21000 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXAS21000_I2C_ADDR);
    380a:	2220      	movs	r2, #32
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:309
	return;
}

// initialize FXAS21000 gyroscope sensor
void FXAS21000_Init(LDD_TDeviceData *DeviceDataPtr, struct GyroSensor *pthisGyro)
{
    380c:	b082      	sub	sp, #8
    380e:	4688      	mov	r8, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:313
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXAS21000 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXAS21000_I2C_ADDR);
    3810:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:309
	return;
}

// initialize FXAS21000 gyroscope sensor
void FXAS21000_Init(LDD_TDeviceData *DeviceDataPtr, struct GyroSensor *pthisGyro)
{
    3812:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:313
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXAS21000 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXAS21000_I2C_ADDR);
    3814:	f00f f8da 	bl	129cc <I2C_SelectSlaveDevice>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:321
	// [7]: ZR_cond=0
	// [6]: RST=0
	// [5]: ST=0 self test disabled
	// [4-2]: DR[2-0]=000 for 200Hz ODR
	// [1-0]: Active=0, Ready=0 for Standby mode
	I2C_Buf[0] = FXAS21000_CTRL_REG1;
    3818:	4f2c      	ldr	r7, [pc, #176]	; (38cc <FXAS21000_Init+0xc8>)
    381a:	2313      	movs	r3, #19
    381c:	703b      	strb	r3, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:323
	I2C_Buf[1] = 0x00;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    381e:	4d2c      	ldr	r5, [pc, #176]	; (38d0 <FXAS21000_Init+0xcc>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:322
	// [6]: RST=0
	// [5]: ST=0 self test disabled
	// [4-2]: DR[2-0]=000 for 200Hz ODR
	// [1-0]: Active=0, Ready=0 for Standby mode
	I2C_Buf[0] = FXAS21000_CTRL_REG1;
	I2C_Buf[1] = 0x00;
    3820:	2300      	movs	r3, #0
    3822:	707b      	strb	r3, [r7, #1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:323
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3824:	2374      	movs	r3, #116	; 0x74
    3826:	5cea      	ldrb	r2, [r5, r3]
    3828:	2101      	movs	r1, #1
    382a:	438a      	bics	r2, r1
    382c:	54ea      	strb	r2, [r5, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:324
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    382e:	1c39      	adds	r1, r7, #0
    3830:	2202      	movs	r2, #2
    3832:	1c30      	adds	r0, r6, #0
    3834:	2301      	movs	r3, #1
    3836:	f00f f80f 	bl	12858 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:326
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    383a:	2174      	movs	r1, #116	; 0x74
    383c:	2201      	movs	r2, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:326 (discriminator 1)
    383e:	5c6b      	ldrb	r3, [r5, r1]
    3840:	421a      	tst	r2, r3
    3842:	d0fc      	beq.n	383e <FXAS21000_Init+0x3a>
    3844:	466c      	mov	r4, sp
    3846:	3407      	adds	r4, #7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:330 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    3848:	1c30      	adds	r0, r6, #0
    384a:	1c21      	adds	r1, r4, #0
    384c:	f00f f904 	bl	12a58 <I2C_CheckBus>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:331 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    3850:	7823      	ldrb	r3, [r4, #0]
    3852:	2b01      	cmp	r3, #1
    3854:	d1f8      	bne.n	3848 <FXAS21000_Init+0x44>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:339
	// [7-6]: unused=00
	// [5]: SPIW=0 4 wire SPI (irrelevant)
	// [4-3]: SEL[1-0]=00 for 10Hz HPF at 200Hz ODR
	// [2]: HPF_EN=0 disable HPF
	// [1-0]: FS[1-0]=00 for 1600dps
	I2C_Buf[0] = FXAS21000_CTRL_REG0;
    3856:	220d      	movs	r2, #13
    3858:	703a      	strb	r2, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:340
	I2C_Buf[1] = 0x00;
    385a:	2200      	movs	r2, #0
    385c:	707a      	strb	r2, [r7, #1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:341
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    385e:	2274      	movs	r2, #116	; 0x74
    3860:	5ca9      	ldrb	r1, [r5, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:342
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    3862:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:341
	// [4-3]: SEL[1-0]=00 for 10Hz HPF at 200Hz ODR
	// [2]: HPF_EN=0 disable HPF
	// [1-0]: FS[1-0]=00 for 1600dps
	I2C_Buf[0] = FXAS21000_CTRL_REG0;
	I2C_Buf[1] = 0x00;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3864:	4399      	bics	r1, r3
    3866:	54a9      	strb	r1, [r5, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:342
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    3868:	2301      	movs	r3, #1
    386a:	1c39      	adds	r1, r7, #0
    386c:	2202      	movs	r2, #2
    386e:	f00e fff3 	bl	12858 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:344
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    3872:	2174      	movs	r1, #116	; 0x74
    3874:	2201      	movs	r2, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:344 (discriminator 1)
    3876:	5c6b      	ldrb	r3, [r5, r1]
    3878:	421a      	tst	r2, r3
    387a:	d0fc      	beq.n	3876 <FXAS21000_Init+0x72>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:348 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    387c:	1c30      	adds	r0, r6, #0
    387e:	1c21      	adds	r1, r4, #0
    3880:	f00f f8ea 	bl	12a58 <I2C_CheckBus>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:349 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    3884:	7823      	ldrb	r3, [r4, #0]
    3886:	2b01      	cmp	r3, #1
    3888:	d1f8      	bne.n	387c <FXAS21000_Init+0x78>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:357
	// [7]: ZR_cond=0
	// [6]: RST=0
	// [5]: ST=0 self test disabled
	// [4-2]: DR[2-0]=000 for 200Hz ODR
	// [1-0]: Active=1, Ready=0 for Active mode
	I2C_Buf[0] = FXAS21000_CTRL_REG1;
    388a:	2213      	movs	r2, #19
    388c:	703a      	strb	r2, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:358
	I2C_Buf[1] = 0x02;
    388e:	2202      	movs	r2, #2
    3890:	707a      	strb	r2, [r7, #1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:359
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3892:	2274      	movs	r2, #116	; 0x74
    3894:	5ca9      	ldrb	r1, [r5, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:360
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    3896:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:359
	// [5]: ST=0 self test disabled
	// [4-2]: DR[2-0]=000 for 200Hz ODR
	// [1-0]: Active=1, Ready=0 for Active mode
	I2C_Buf[0] = FXAS21000_CTRL_REG1;
	I2C_Buf[1] = 0x02;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3898:	4399      	bics	r1, r3
    389a:	54a9      	strb	r1, [r5, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:360
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 2, LDD_I2C_SEND_STOP);
    389c:	2301      	movs	r3, #1
    389e:	1c39      	adds	r1, r7, #0
    38a0:	2202      	movs	r2, #2
    38a2:	f00e ffd9 	bl	12858 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:362
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    38a6:	2174      	movs	r1, #116	; 0x74
    38a8:	2201      	movs	r2, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:362 (discriminator 1)
    38aa:	5c6b      	ldrb	r3, [r5, r1]
    38ac:	421a      	tst	r2, r3
    38ae:	d0fc      	beq.n	38aa <FXAS21000_Init+0xa6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:366 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    38b0:	1c30      	adds	r0, r6, #0
    38b2:	1c21      	adds	r1, r4, #0
    38b4:	f00f f8d0 	bl	12a58 <I2C_CheckBus>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:367 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    38b8:	7823      	ldrb	r3, [r4, #0]
    38ba:	2b01      	cmp	r3, #1
    38bc:	d1f8      	bne.n	38b0 <FXAS21000_Init+0xac>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:377
	// 16 bit scaling is 0.05, 0.025, 0.0125, 0.00625dps/count for 1600, 800, 400, 200dps ranges
	// 16 bit scaling is 20, 40, 80, 160 counts/dps for 1600, 800, 400, 200dps ranges
	// our I2C driver reads 16 bit data left shifted two bits from FXAS21000
#define FXAS21000_COUNTSPERDEGPERSEC 20.0F     		// 1600dps range
#define FXAS21000_DEGPERSECPERCOUNT 0.05F			// must be reciprocal of FCOUNTSPERDEGPERSEC
	pthisGyro->fDegPerSecPerCount = FXAS21000_DEGPERSECPERCOUNT;
    38be:	4b05      	ldr	r3, [pc, #20]	; (38d4 <FXAS21000_Init+0xd0>)
    38c0:	4642      	mov	r2, r8
    38c2:	6193      	str	r3, [r2, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:380

	return;
}
    38c4:	b002      	add	sp, #8
    38c6:	bc04      	pop	{r2}
    38c8:	4690      	mov	r8, r2
    38ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38cc:	1fffe160 	.word	0x1fffe160
    38d0:	1fffe294 	.word	0x1fffe294
    38d4:	3d4ccccd 	.word	0x3d4ccccd

000038d8 <MPL3115_ReadData>:
MPL3115_ReadData():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:606
	return;
}

// read MPL3115 pressure sensor over I2C
void MPL3115_ReadData(LDD_TDeviceData *DeviceDataPtr, struct PressureSensor *pthisPressure)
{
    38d8:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:610
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the MPL3115 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, MPL3115_I2C_ADDR);
    38da:	2260      	movs	r2, #96	; 0x60
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:606
	return;
}

// read MPL3115 pressure sensor over I2C
void MPL3115_ReadData(LDD_TDeviceData *DeviceDataPtr, struct PressureSensor *pthisPressure)
{
    38dc:	b083      	sub	sp, #12
    38de:	1c0f      	adds	r7, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:610
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the MPL3115 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, MPL3115_I2C_ADDR);
    38e0:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:606
	return;
}

// read MPL3115 pressure sensor over I2C
void MPL3115_ReadData(LDD_TDeviceData *DeviceDataPtr, struct PressureSensor *pthisPressure)
{
    38e2:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:610
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the MPL3115 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, MPL3115_I2C_ADDR);
    38e4:	f00f f872 	bl	129cc <I2C_SelectSlaveDevice>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:613

	// set up the address of the first data register
	I2C_Buf[0] = MPL3115_OUT_P_MSB;
    38e8:	4e1d      	ldr	r6, [pc, #116]	; (3960 <MPL3115_ReadData+0x88>)
    38ea:	2201      	movs	r2, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:614
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    38ec:	4c1d      	ldr	r4, [pc, #116]	; (3964 <MPL3115_ReadData+0x8c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:613

	// set up the MPL3115 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, MPL3115_I2C_ADDR);

	// set up the address of the first data register
	I2C_Buf[0] = MPL3115_OUT_P_MSB;
    38ee:	7032      	strb	r2, [r6, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:614
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    38f0:	2374      	movs	r3, #116	; 0x74
    38f2:	5ce1      	ldrb	r1, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:615
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 1, LDD_I2C_NO_SEND_STOP);
    38f4:	1c28      	adds	r0, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:614
	// set up the MPL3115 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, MPL3115_I2C_ADDR);

	// set up the address of the first data register
	I2C_Buf[0] = MPL3115_OUT_P_MSB;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    38f6:	4391      	bics	r1, r2
    38f8:	54e1      	strb	r1, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:615
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 1, LDD_I2C_NO_SEND_STOP);
    38fa:	2201      	movs	r2, #1
    38fc:	1c31      	adds	r1, r6, #0
    38fe:	2300      	movs	r3, #0
    3900:	f00e ffaa 	bl	12858 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:617
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    3904:	2074      	movs	r0, #116	; 0x74
    3906:	2101      	movs	r1, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:617 (discriminator 1)
    3908:	5c23      	ldrb	r3, [r4, r0]
    390a:	2274      	movs	r2, #116	; 0x74
    390c:	4219      	tst	r1, r3
    390e:	d0fb      	beq.n	3908 <MPL3115_ReadData+0x30>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:620

	// read the 5 bytes of sequential sensor data
	mqxglobals.I2C_Status &= ~I2C_RCVD_FLAG;
    3910:	5ca3      	ldrb	r3, [r4, r2]
    3912:	2102      	movs	r1, #2
    3914:	438b      	bics	r3, r1
    3916:	54a3      	strb	r3, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:621
	I2C_MasterReceiveBlock(DeviceDataPtr, I2C_Buf, 5, LDD_I2C_SEND_STOP);
    3918:	1c31      	adds	r1, r6, #0
    391a:	2205      	movs	r2, #5
    391c:	1c28      	adds	r0, r5, #0
    391e:	2301      	movs	r3, #1
    3920:	f00e fff8 	bl	12914 <I2C_MasterReceiveBlock>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:623
	// wait until the I2C received callback function sets the received flag
	while ((mqxglobals.I2C_Status & I2C_RCVD_FLAG) == 0);
    3924:	2174      	movs	r1, #116	; 0x74
    3926:	2202      	movs	r2, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:623 (discriminator 1)
    3928:	5c63      	ldrb	r3, [r4, r1]
    392a:	421a      	tst	r2, r3
    392c:	d0fc      	beq.n	3928 <MPL3115_ReadData+0x50>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:627 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    392e:	1c28      	adds	r0, r5, #0
    3930:	4669      	mov	r1, sp
    3932:	f00f f891 	bl	12a58 <I2C_CheckBus>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:628 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    3936:	466a      	mov	r2, sp
    3938:	7813      	ldrb	r3, [r2, #0]
    393a:	2b01      	cmp	r3, #1
    393c:	d1f7      	bne.n	392e <MPL3115_ReadData+0x56>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:631

	// place the read buffer into the 32 bit altitude and 16 bit temperature
	pthisPressure->iHpFast = (I2C_Buf[0] << 24) | (I2C_Buf[1] << 16) | (I2C_Buf[2] << 8);
    393e:	7872      	ldrb	r2, [r6, #1]
    3940:	7833      	ldrb	r3, [r6, #0]
    3942:	0412      	lsls	r2, r2, #16
    3944:	061b      	lsls	r3, r3, #24
    3946:	4313      	orrs	r3, r2
    3948:	78b2      	ldrb	r2, [r6, #2]
    394a:	0212      	lsls	r2, r2, #8
    394c:	4313      	orrs	r3, r2
    394e:	603b      	str	r3, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:632
	pthisPressure->iTpFast = (I2C_Buf[3] << 8) | I2C_Buf[4];
    3950:	78f3      	ldrb	r3, [r6, #3]
    3952:	7932      	ldrb	r2, [r6, #4]
    3954:	021b      	lsls	r3, r3, #8
    3956:	4313      	orrs	r3, r2
    3958:	837b      	strh	r3, [r7, #26]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:638

	// use this line if the MPL3115 is to be used in pressure mode
	//pthisPressure->iPpFast = (I2C_Buf[0] << 16) | (I2C_Buf[1] << 8) | (I2C_Buf[2] << 0);

	return;
}
    395a:	b003      	add	sp, #12
    395c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    395e:	46c0      	nop			; (mov r8, r8)
    3960:	1fffe160 	.word	0x1fffe160
    3964:	1fffe294 	.word	0x1fffe294

00003968 <FXOS8700_ReadData>:
FXOS8700_ReadData():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:642

// read FXOS8700 accelerometer and magnetometer data over I2C
void FXOS8700_ReadData(LDD_TDeviceData *DeviceDataPtr, struct AccelSensor *pthisAccel, struct MagSensor *pthisMag)
{
    3968:	b5f0      	push	{r4, r5, r6, r7, lr}
    396a:	4647      	mov	r7, r8
    396c:	b480      	push	{r7}
    396e:	4688      	mov	r8, r1
    3970:	b082      	sub	sp, #8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:646
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXOS8700 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXOS8700_I2C_ADDR);
    3972:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:642
	return;
}

// read FXOS8700 accelerometer and magnetometer data over I2C
void FXOS8700_ReadData(LDD_TDeviceData *DeviceDataPtr, struct AccelSensor *pthisAccel, struct MagSensor *pthisMag)
{
    3974:	1c17      	adds	r7, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:646
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXOS8700 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXOS8700_I2C_ADDR);
    3976:	221e      	movs	r2, #30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:642
	return;
}

// read FXOS8700 accelerometer and magnetometer data over I2C
void FXOS8700_ReadData(LDD_TDeviceData *DeviceDataPtr, struct AccelSensor *pthisAccel, struct MagSensor *pthisMag)
{
    3978:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:646
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXOS8700 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXOS8700_I2C_ADDR);
    397a:	f00f f827 	bl	129cc <I2C_SelectSlaveDevice>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:648
	// set up the address of the first output register
	I2C_Buf[0] = FXOS8700_OUT_X_MSB;
    397e:	4d40      	ldr	r5, [pc, #256]	; (3a80 <FXOS8700_ReadData+0x118>)
    3980:	2201      	movs	r2, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:649
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3982:	4c40      	ldr	r4, [pc, #256]	; (3a84 <FXOS8700_ReadData+0x11c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:648
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXOS8700 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXOS8700_I2C_ADDR);
	// set up the address of the first output register
	I2C_Buf[0] = FXOS8700_OUT_X_MSB;
    3984:	702a      	strb	r2, [r5, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:649
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3986:	2374      	movs	r3, #116	; 0x74
    3988:	5ce1      	ldrb	r1, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:650
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 1, LDD_I2C_NO_SEND_STOP);
    398a:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:649

	// set up the FXOS8700 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXOS8700_I2C_ADDR);
	// set up the address of the first output register
	I2C_Buf[0] = FXOS8700_OUT_X_MSB;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    398c:	4391      	bics	r1, r2
    398e:	54e1      	strb	r1, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:650
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 1, LDD_I2C_NO_SEND_STOP);
    3990:	2201      	movs	r2, #1
    3992:	1c29      	adds	r1, r5, #0
    3994:	2300      	movs	r3, #0
    3996:	f00e ff5f 	bl	12858 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:652
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    399a:	2074      	movs	r0, #116	; 0x74
    399c:	2101      	movs	r1, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:652 (discriminator 1)
    399e:	5c23      	ldrb	r3, [r4, r0]
    39a0:	2274      	movs	r2, #116	; 0x74
    39a2:	4219      	tst	r1, r3
    39a4:	d0fb      	beq.n	399e <FXOS8700_ReadData+0x36>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:655

	// read the 12 bytes of sequential sensor data
	mqxglobals.I2C_Status &= ~I2C_RCVD_FLAG;
    39a6:	5ca3      	ldrb	r3, [r4, r2]
    39a8:	2102      	movs	r1, #2
    39aa:	438b      	bics	r3, r1
    39ac:	54a3      	strb	r3, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:656
	I2C_MasterReceiveBlock(DeviceDataPtr, I2C_Buf, 12, LDD_I2C_SEND_STOP);
    39ae:	1c29      	adds	r1, r5, #0
    39b0:	220c      	movs	r2, #12
    39b2:	1c30      	adds	r0, r6, #0
    39b4:	2301      	movs	r3, #1
    39b6:	f00e ffad 	bl	12914 <I2C_MasterReceiveBlock>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:658
	// wait until the I2C received callback function sets the received flag
	while ((mqxglobals.I2C_Status & I2C_RCVD_FLAG) == 0);
    39ba:	2174      	movs	r1, #116	; 0x74
    39bc:	2202      	movs	r2, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:658 (discriminator 1)
    39be:	5c63      	ldrb	r3, [r4, r1]
    39c0:	421a      	tst	r2, r3
    39c2:	d0fc      	beq.n	39be <FXOS8700_ReadData+0x56>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:662 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    39c4:	1c30      	adds	r0, r6, #0
    39c6:	4669      	mov	r1, sp
    39c8:	f00f f846 	bl	12a58 <I2C_CheckBus>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:663 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    39cc:	466a      	mov	r2, sp
    39ce:	7813      	ldrb	r3, [r2, #0]
    39d0:	2b01      	cmp	r3, #1
    39d2:	d1f7      	bne.n	39c4 <FXOS8700_ReadData+0x5c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:666

	// place the 12 bytes read into the 16 bit accelerometer and magnetometer structures
	pthisAccel->iGpFast[X] = (I2C_Buf[0] << 8) | I2C_Buf[1];
    39d4:	782e      	ldrb	r6, [r5, #0]
    39d6:	786b      	ldrb	r3, [r5, #1]
    39d8:	0236      	lsls	r6, r6, #8
    39da:	431e      	orrs	r6, r3
    39dc:	4643      	mov	r3, r8
    39de:	851e      	strh	r6, [r3, #40]	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:667
	pthisAccel->iGpFast[Y] = (I2C_Buf[2] << 8) | I2C_Buf[3];
    39e0:	78ac      	ldrb	r4, [r5, #2]
    39e2:	78eb      	ldrb	r3, [r5, #3]
    39e4:	0224      	lsls	r4, r4, #8
    39e6:	4642      	mov	r2, r8
    39e8:	431c      	orrs	r4, r3
    39ea:	8554      	strh	r4, [r2, #42]	; 0x2a
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:668
	pthisAccel->iGpFast[Z] = (I2C_Buf[4] << 8) | I2C_Buf[5];
    39ec:	7928      	ldrb	r0, [r5, #4]
    39ee:	796b      	ldrb	r3, [r5, #5]
    39f0:	0200      	lsls	r0, r0, #8
    39f2:	4318      	orrs	r0, r3
    39f4:	8590      	strh	r0, [r2, #44]	; 0x2c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:669
	pthisMag->iBpFast[X] = (I2C_Buf[6] << 8) | I2C_Buf[7];
    39f6:	79a9      	ldrb	r1, [r5, #6]
    39f8:	79eb      	ldrb	r3, [r5, #7]
    39fa:	0209      	lsls	r1, r1, #8
    39fc:	4319      	orrs	r1, r3
    39fe:	2344      	movs	r3, #68	; 0x44
    3a00:	52f9      	strh	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:670
	pthisMag->iBpFast[Y] = (I2C_Buf[8] << 8) | I2C_Buf[9];
    3a02:	7a2a      	ldrb	r2, [r5, #8]
    3a04:	7a6b      	ldrb	r3, [r5, #9]
    3a06:	0212      	lsls	r2, r2, #8
    3a08:	431a      	orrs	r2, r3
    3a0a:	2346      	movs	r3, #70	; 0x46
    3a0c:	52fa      	strh	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:671
	pthisMag->iBpFast[Z] = (I2C_Buf[10] << 8) | I2C_Buf[11];
    3a0e:	7aab      	ldrb	r3, [r5, #10]
    3a10:	7aed      	ldrb	r5, [r5, #11]
    3a12:	021b      	lsls	r3, r3, #8
    3a14:	432b      	orrs	r3, r5
    3a16:	2548      	movs	r5, #72	; 0x48
    3a18:	537b      	strh	r3, [r7, r5]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:675

	// finally check for -32768 in the accelerometer and magnetometer data since
	// this value cannot be negated in a later HAL operation
	if (pthisAccel->iGpFast[X] == -32768) pthisAccel->iGpFast[X]++;
    3a1a:	4d1b      	ldr	r5, [pc, #108]	; (3a88 <FXOS8700_ReadData+0x120>)
    3a1c:	b236      	sxth	r6, r6
    3a1e:	42ae      	cmp	r6, r5
    3a20:	d02a      	beq.n	3a78 <FXOS8700_ReadData+0x110>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:676
	if (pthisAccel->iGpFast[Y] == -32768) pthisAccel->iGpFast[Y]++;
    3a22:	4d19      	ldr	r5, [pc, #100]	; (3a88 <FXOS8700_ReadData+0x120>)
    3a24:	b224      	sxth	r4, r4
    3a26:	42ac      	cmp	r4, r5
    3a28:	d022      	beq.n	3a70 <FXOS8700_ReadData+0x108>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:677
	if (pthisAccel->iGpFast[Z] == -32768) pthisAccel->iGpFast[Z]++;
    3a2a:	4c17      	ldr	r4, [pc, #92]	; (3a88 <FXOS8700_ReadData+0x120>)
    3a2c:	b200      	sxth	r0, r0
    3a2e:	42a0      	cmp	r0, r4
    3a30:	d01a      	beq.n	3a68 <FXOS8700_ReadData+0x100>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:678
	if (pthisMag->iBpFast[X] == -32768) pthisMag->iBpFast[X]++;
    3a32:	4815      	ldr	r0, [pc, #84]	; (3a88 <FXOS8700_ReadData+0x120>)
    3a34:	b209      	sxth	r1, r1
    3a36:	4281      	cmp	r1, r0
    3a38:	d012      	beq.n	3a60 <FXOS8700_ReadData+0xf8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:679
	if (pthisMag->iBpFast[Y] == -32768) pthisMag->iBpFast[Y]++;
    3a3a:	4913      	ldr	r1, [pc, #76]	; (3a88 <FXOS8700_ReadData+0x120>)
    3a3c:	b212      	sxth	r2, r2
    3a3e:	428a      	cmp	r2, r1
    3a40:	d00a      	beq.n	3a58 <FXOS8700_ReadData+0xf0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:680
	if (pthisMag->iBpFast[Z] == -32768) pthisMag->iBpFast[Z]++;
    3a42:	4a11      	ldr	r2, [pc, #68]	; (3a88 <FXOS8700_ReadData+0x120>)
    3a44:	b21b      	sxth	r3, r3
    3a46:	4293      	cmp	r3, r2
    3a48:	d102      	bne.n	3a50 <FXOS8700_ReadData+0xe8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:680 (discriminator 1)
    3a4a:	4a10      	ldr	r2, [pc, #64]	; (3a8c <FXOS8700_ReadData+0x124>)
    3a4c:	2348      	movs	r3, #72	; 0x48
    3a4e:	52fa      	strh	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:683

	return;
}
    3a50:	b002      	add	sp, #8
    3a52:	bc04      	pop	{r2}
    3a54:	4690      	mov	r8, r2
    3a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:679 (discriminator 1)
	// this value cannot be negated in a later HAL operation
	if (pthisAccel->iGpFast[X] == -32768) pthisAccel->iGpFast[X]++;
	if (pthisAccel->iGpFast[Y] == -32768) pthisAccel->iGpFast[Y]++;
	if (pthisAccel->iGpFast[Z] == -32768) pthisAccel->iGpFast[Z]++;
	if (pthisMag->iBpFast[X] == -32768) pthisMag->iBpFast[X]++;
	if (pthisMag->iBpFast[Y] == -32768) pthisMag->iBpFast[Y]++;
    3a58:	490c      	ldr	r1, [pc, #48]	; (3a8c <FXOS8700_ReadData+0x124>)
    3a5a:	2246      	movs	r2, #70	; 0x46
    3a5c:	52b9      	strh	r1, [r7, r2]
    3a5e:	e7f0      	b.n	3a42 <FXOS8700_ReadData+0xda>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:678 (discriminator 1)
	// finally check for -32768 in the accelerometer and magnetometer data since
	// this value cannot be negated in a later HAL operation
	if (pthisAccel->iGpFast[X] == -32768) pthisAccel->iGpFast[X]++;
	if (pthisAccel->iGpFast[Y] == -32768) pthisAccel->iGpFast[Y]++;
	if (pthisAccel->iGpFast[Z] == -32768) pthisAccel->iGpFast[Z]++;
	if (pthisMag->iBpFast[X] == -32768) pthisMag->iBpFast[X]++;
    3a60:	480a      	ldr	r0, [pc, #40]	; (3a8c <FXOS8700_ReadData+0x124>)
    3a62:	2144      	movs	r1, #68	; 0x44
    3a64:	5278      	strh	r0, [r7, r1]
    3a66:	e7e8      	b.n	3a3a <FXOS8700_ReadData+0xd2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:677 (discriminator 1)

	// finally check for -32768 in the accelerometer and magnetometer data since
	// this value cannot be negated in a later HAL operation
	if (pthisAccel->iGpFast[X] == -32768) pthisAccel->iGpFast[X]++;
	if (pthisAccel->iGpFast[Y] == -32768) pthisAccel->iGpFast[Y]++;
	if (pthisAccel->iGpFast[Z] == -32768) pthisAccel->iGpFast[Z]++;
    3a68:	4808      	ldr	r0, [pc, #32]	; (3a8c <FXOS8700_ReadData+0x124>)
    3a6a:	4646      	mov	r6, r8
    3a6c:	85b0      	strh	r0, [r6, #44]	; 0x2c
    3a6e:	e7e0      	b.n	3a32 <FXOS8700_ReadData+0xca>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:676 (discriminator 1)
	pthisMag->iBpFast[Z] = (I2C_Buf[10] << 8) | I2C_Buf[11];

	// finally check for -32768 in the accelerometer and magnetometer data since
	// this value cannot be negated in a later HAL operation
	if (pthisAccel->iGpFast[X] == -32768) pthisAccel->iGpFast[X]++;
	if (pthisAccel->iGpFast[Y] == -32768) pthisAccel->iGpFast[Y]++;
    3a70:	4c06      	ldr	r4, [pc, #24]	; (3a8c <FXOS8700_ReadData+0x124>)
    3a72:	4645      	mov	r5, r8
    3a74:	856c      	strh	r4, [r5, #42]	; 0x2a
    3a76:	e7d8      	b.n	3a2a <FXOS8700_ReadData+0xc2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:675 (discriminator 1)
	pthisMag->iBpFast[Y] = (I2C_Buf[8] << 8) | I2C_Buf[9];
	pthisMag->iBpFast[Z] = (I2C_Buf[10] << 8) | I2C_Buf[11];

	// finally check for -32768 in the accelerometer and magnetometer data since
	// this value cannot be negated in a later HAL operation
	if (pthisAccel->iGpFast[X] == -32768) pthisAccel->iGpFast[X]++;
    3a78:	4d04      	ldr	r5, [pc, #16]	; (3a8c <FXOS8700_ReadData+0x124>)
    3a7a:	4646      	mov	r6, r8
    3a7c:	8535      	strh	r5, [r6, #40]	; 0x28
    3a7e:	e7d0      	b.n	3a22 <FXOS8700_ReadData+0xba>
    3a80:	1fffe160 	.word	0x1fffe160
    3a84:	1fffe294 	.word	0x1fffe294
    3a88:	ffff8000 	.word	0xffff8000
    3a8c:	ffff8001 	.word	0xffff8001

00003a90 <FXAS21000_ReadData>:
FXAS21000_ReadData():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:687
	return;
}

// read FXAS21000 gyro data over I2C
void FXAS21000_ReadData(LDD_TDeviceData *DeviceDataPtr, struct GyroSensor *pthisGyro, int16 irow)
{
    3a90:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a92:	4647      	mov	r7, r8
    3a94:	b480      	push	{r7}
    3a96:	4688      	mov	r8, r1
    3a98:	b082      	sub	sp, #8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:691
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXAS21000 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXAS21000_I2C_ADDR);
    3a9a:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:687
	return;
}

// read FXAS21000 gyro data over I2C
void FXAS21000_ReadData(LDD_TDeviceData *DeviceDataPtr, struct GyroSensor *pthisGyro, int16 irow)
{
    3a9c:	1c17      	adds	r7, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:691
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXAS21000 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXAS21000_I2C_ADDR);
    3a9e:	2220      	movs	r2, #32
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:687
	return;
}

// read FXAS21000 gyro data over I2C
void FXAS21000_ReadData(LDD_TDeviceData *DeviceDataPtr, struct GyroSensor *pthisGyro, int16 irow)
{
    3aa0:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:691
	LDD_I2C_TBusState BusState;		// I2C bus state

	// set up the FXAS21000 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXAS21000_I2C_ADDR);
    3aa2:	f00e ff93 	bl	129cc <I2C_SelectSlaveDevice>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:694

	// set up the address of the first output register
	I2C_Buf[0] = FXAS21000_DATA_REG;
    3aa6:	4e31      	ldr	r6, [pc, #196]	; (3b6c <FXAS21000_ReadData+0xdc>)
    3aa8:	2201      	movs	r2, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:695
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3aaa:	4c31      	ldr	r4, [pc, #196]	; (3b70 <FXAS21000_ReadData+0xe0>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:694

	// set up the FXAS21000 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXAS21000_I2C_ADDR);

	// set up the address of the first output register
	I2C_Buf[0] = FXAS21000_DATA_REG;
    3aac:	7032      	strb	r2, [r6, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:695
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3aae:	2374      	movs	r3, #116	; 0x74
    3ab0:	5ce1      	ldrb	r1, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:696
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 1, LDD_I2C_NO_SEND_STOP);
    3ab2:	1c28      	adds	r0, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:695
	// set up the FXAS21000 I2C address
	I2C_SelectSlaveDevice(DeviceDataPtr, LDD_I2C_ADDRTYPE_7BITS, FXAS21000_I2C_ADDR);

	// set up the address of the first output register
	I2C_Buf[0] = FXAS21000_DATA_REG;
	mqxglobals.I2C_Status &= ~I2C_SENT_FLAG;
    3ab4:	4391      	bics	r1, r2
    3ab6:	54e1      	strb	r1, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:696
	I2C_MasterSendBlock(DeviceDataPtr, I2C_Buf, 1, LDD_I2C_NO_SEND_STOP);
    3ab8:	2201      	movs	r2, #1
    3aba:	1c31      	adds	r1, r6, #0
    3abc:	2300      	movs	r3, #0
    3abe:	f00e fecb 	bl	12858 <I2C_MasterSendBlock>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:698
	// wait until the I2C sent callback function sets the sent flag
	while ((mqxglobals.I2C_Status & I2C_SENT_FLAG) == 0);
    3ac2:	2074      	movs	r0, #116	; 0x74
    3ac4:	2101      	movs	r1, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:698 (discriminator 1)
    3ac6:	5c23      	ldrb	r3, [r4, r0]
    3ac8:	2274      	movs	r2, #116	; 0x74
    3aca:	4219      	tst	r1, r3
    3acc:	d0fb      	beq.n	3ac6 <FXAS21000_ReadData+0x36>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:701

	// read the 6 bytes of sequential sensor data
	mqxglobals.I2C_Status &= ~I2C_RCVD_FLAG;
    3ace:	5ca3      	ldrb	r3, [r4, r2]
    3ad0:	2102      	movs	r1, #2
    3ad2:	438b      	bics	r3, r1
    3ad4:	54a3      	strb	r3, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:702
	I2C_MasterReceiveBlock(DeviceDataPtr, I2C_Buf, 6, LDD_I2C_SEND_STOP);
    3ad6:	1c31      	adds	r1, r6, #0
    3ad8:	2206      	movs	r2, #6
    3ada:	1c28      	adds	r0, r5, #0
    3adc:	2301      	movs	r3, #1
    3ade:	f00e ff19 	bl	12914 <I2C_MasterReceiveBlock>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:704
	// wait until the I2C received callback function sets the received flag
	while ((mqxglobals.I2C_Status & I2C_RCVD_FLAG) == 0);
    3ae2:	2174      	movs	r1, #116	; 0x74
    3ae4:	2202      	movs	r2, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:704 (discriminator 1)
    3ae6:	5c63      	ldrb	r3, [r4, r1]
    3ae8:	421a      	tst	r2, r3
    3aea:	d0fc      	beq.n	3ae6 <FXAS21000_ReadData+0x56>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:708 (discriminator 1)
	// wait until the I2C bus is idle
	do
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
    3aec:	4669      	mov	r1, sp
    3aee:	1c28      	adds	r0, r5, #0
    3af0:	f00e ffb2 	bl	12a58 <I2C_CheckBus>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:709 (discriminator 1)
	} while (BusState != LDD_I2C_IDLE);
    3af4:	4669      	mov	r1, sp
    3af6:	780b      	ldrb	r3, [r1, #0]
    3af8:	2b01      	cmp	r3, #1
    3afa:	d1f7      	bne.n	3aec <FXAS21000_ReadData+0x5c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:712

	// place the read buffer into the 16 bit gyro structure
	pthisGyro->iYpFast[irow][X] = (I2C_Buf[0] << 8) | I2C_Buf[1];
    3afc:	7830      	ldrb	r0, [r6, #0]
    3afe:	007b      	lsls	r3, r7, #1
    3b00:	7874      	ldrb	r4, [r6, #1]
    3b02:	19da      	adds	r2, r3, r7
    3b04:	0052      	lsls	r2, r2, #1
    3b06:	0200      	lsls	r0, r0, #8
    3b08:	4442      	add	r2, r8
    3b0a:	4320      	orrs	r0, r4
    3b0c:	8390      	strh	r0, [r2, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:713
	pthisGyro->iYpFast[irow][Y] = (I2C_Buf[2] << 8) | I2C_Buf[3];
    3b0e:	78b0      	ldrb	r0, [r6, #2]
    3b10:	78f4      	ldrb	r4, [r6, #3]
    3b12:	0200      	lsls	r0, r0, #8
    3b14:	4320      	orrs	r0, r4
    3b16:	83d0      	strh	r0, [r2, #30]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:714
	pthisGyro->iYpFast[irow][Z] = (I2C_Buf[4] << 8) | I2C_Buf[5];
    3b18:	7930      	ldrb	r0, [r6, #4]
    3b1a:	7974      	ldrb	r4, [r6, #5]
    3b1c:	0200      	lsls	r0, r0, #8
    3b1e:	4320      	orrs	r0, r4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:712
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
	} while (BusState != LDD_I2C_IDLE);

	// place the read buffer into the 16 bit gyro structure
	pthisGyro->iYpFast[irow][X] = (I2C_Buf[0] << 8) | I2C_Buf[1];
    3b20:	1c11      	adds	r1, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:714
	pthisGyro->iYpFast[irow][Y] = (I2C_Buf[2] << 8) | I2C_Buf[3];
	pthisGyro->iYpFast[irow][Z] = (I2C_Buf[4] << 8) | I2C_Buf[5];
    3b22:	8410      	strh	r0, [r2, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:718

	// finally check for -32768 which cannot be negated in a later HAL operation
	// this value can be obtained during clipping in rapid rotation
	if (pthisGyro->iYpFast[irow][X] == -32768) pthisGyro->iYpFast[irow][X]++;
    3b24:	221c      	movs	r2, #28
    3b26:	5e88      	ldrsh	r0, [r1, r2]
    3b28:	4a12      	ldr	r2, [pc, #72]	; (3b74 <FXAS21000_ReadData+0xe4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:712
	{
		I2C_CheckBus(DeviceDataPtr, &BusState);
	} while (BusState != LDD_I2C_IDLE);

	// place the read buffer into the 16 bit gyro structure
	pthisGyro->iYpFast[irow][X] = (I2C_Buf[0] << 8) | I2C_Buf[1];
    3b2a:	3118      	adds	r1, #24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:718
	pthisGyro->iYpFast[irow][Y] = (I2C_Buf[2] << 8) | I2C_Buf[3];
	pthisGyro->iYpFast[irow][Z] = (I2C_Buf[4] << 8) | I2C_Buf[5];

	// finally check for -32768 which cannot be negated in a later HAL operation
	// this value can be obtained during clipping in rapid rotation
	if (pthisGyro->iYpFast[irow][X] == -32768) pthisGyro->iYpFast[irow][X]++;
    3b2c:	4290      	cmp	r0, r2
    3b2e:	d01a      	beq.n	3b66 <FXAS21000_ReadData+0xd6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:719
	if (pthisGyro->iYpFast[irow][Y] == -32768) pthisGyro->iYpFast[irow][Y]++;
    3b30:	19da      	adds	r2, r3, r7
    3b32:	0052      	lsls	r2, r2, #1
    3b34:	4442      	add	r2, r8
    3b36:	211e      	movs	r1, #30
    3b38:	5e50      	ldrsh	r0, [r2, r1]
    3b3a:	490e      	ldr	r1, [pc, #56]	; (3b74 <FXAS21000_ReadData+0xe4>)
    3b3c:	321a      	adds	r2, #26
    3b3e:	4288      	cmp	r0, r1
    3b40:	d00e      	beq.n	3b60 <FXAS21000_ReadData+0xd0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:720
	if (pthisGyro->iYpFast[irow][Z] == -32768) pthisGyro->iYpFast[irow][Z]++;
    3b42:	19db      	adds	r3, r3, r7
    3b44:	005b      	lsls	r3, r3, #1
    3b46:	4443      	add	r3, r8
    3b48:	2220      	movs	r2, #32
    3b4a:	5e99      	ldrsh	r1, [r3, r2]
    3b4c:	4a09      	ldr	r2, [pc, #36]	; (3b74 <FXAS21000_ReadData+0xe4>)
    3b4e:	331c      	adds	r3, #28
    3b50:	4291      	cmp	r1, r2
    3b52:	d101      	bne.n	3b58 <FXAS21000_ReadData+0xc8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:720 (discriminator 1)
    3b54:	4a08      	ldr	r2, [pc, #32]	; (3b78 <FXAS21000_ReadData+0xe8>)
    3b56:	809a      	strh	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:723

	return;
}
    3b58:	b002      	add	sp, #8
    3b5a:	bc04      	pop	{r2}
    3b5c:	4690      	mov	r8, r2
    3b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:719 (discriminator 1)
	pthisGyro->iYpFast[irow][Z] = (I2C_Buf[4] << 8) | I2C_Buf[5];

	// finally check for -32768 which cannot be negated in a later HAL operation
	// this value can be obtained during clipping in rapid rotation
	if (pthisGyro->iYpFast[irow][X] == -32768) pthisGyro->iYpFast[irow][X]++;
	if (pthisGyro->iYpFast[irow][Y] == -32768) pthisGyro->iYpFast[irow][Y]++;
    3b60:	4905      	ldr	r1, [pc, #20]	; (3b78 <FXAS21000_ReadData+0xe8>)
    3b62:	8091      	strh	r1, [r2, #4]
    3b64:	e7ed      	b.n	3b42 <FXAS21000_ReadData+0xb2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:718 (discriminator 1)
	pthisGyro->iYpFast[irow][Y] = (I2C_Buf[2] << 8) | I2C_Buf[3];
	pthisGyro->iYpFast[irow][Z] = (I2C_Buf[4] << 8) | I2C_Buf[5];

	// finally check for -32768 which cannot be negated in a later HAL operation
	// this value can be obtained during clipping in rapid rotation
	if (pthisGyro->iYpFast[irow][X] == -32768) pthisGyro->iYpFast[irow][X]++;
    3b66:	4a04      	ldr	r2, [pc, #16]	; (3b78 <FXAS21000_ReadData+0xe8>)
    3b68:	808a      	strh	r2, [r1, #4]
    3b6a:	e7e1      	b.n	3b30 <FXAS21000_ReadData+0xa0>
    3b6c:	1fffe160 	.word	0x1fffe160
    3b70:	1fffe294 	.word	0x1fffe294
    3b74:	ffff8000 	.word	0xffff8000
    3b78:	ffff8001 	.word	0xffff8001

00003b7c <BlueRadios_Init>:
BlueRadios_Init():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:845
	return;
}

// initialize BlueRadios BR-LE4.0-D2A Bluetooth module
void BlueRadios_Init(LDD_TDeviceData *DeviceDataPtr)
{
    3b7c:	b538      	push	{r3, r4, r5, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:853
	// transmit "ATSRM,2,0\r" to minimize traffic from the module
	// command "ATSRM": sets the module response mode which configures how verbose the module will be
	// 2: response mode at to minimal
	// 0: disconnected mode is command mode
	// \r: carriage return escape sequence
	strcpy((char *)sUARTOutputBuf, "ATSRM,2,0\r");
    3b7e:	490a      	ldr	r1, [pc, #40]	; (3ba8 <BlueRadios_Init+0x2c>)
    3b80:	4b0a      	ldr	r3, [pc, #40]	; (3bac <BlueRadios_Init+0x30>)
    3b82:	1c0a      	adds	r2, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:845
	return;
}

// initialize BlueRadios BR-LE4.0-D2A Bluetooth module
void BlueRadios_Init(LDD_TDeviceData *DeviceDataPtr)
{
    3b84:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:853
	// transmit "ATSRM,2,0\r" to minimize traffic from the module
	// command "ATSRM": sets the module response mode which configures how verbose the module will be
	// 2: response mode at to minimal
	// 0: disconnected mode is command mode
	// \r: carriage return escape sequence
	strcpy((char *)sUARTOutputBuf, "ATSRM,2,0\r");
    3b86:	cb21      	ldmia	r3!, {r0, r5}
    3b88:	c221      	stmia	r2!, {r0, r5}
    3b8a:	8818      	ldrh	r0, [r3, #0]
    3b8c:	8010      	strh	r0, [r2, #0]
    3b8e:	789b      	ldrb	r3, [r3, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:855
	ilen = strlen((char *)sUARTOutputBuf);
	UART_SendBlock(DeviceDataPtr, sUARTOutputBuf, ilen);
    3b90:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:853
	// transmit "ATSRM,2,0\r" to minimize traffic from the module
	// command "ATSRM": sets the module response mode which configures how verbose the module will be
	// 2: response mode at to minimal
	// 0: disconnected mode is command mode
	// \r: carriage return escape sequence
	strcpy((char *)sUARTOutputBuf, "ATSRM,2,0\r");
    3b92:	7093      	strb	r3, [r2, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:855
	ilen = strlen((char *)sUARTOutputBuf);
	UART_SendBlock(DeviceDataPtr, sUARTOutputBuf, ilen);
    3b94:	220a      	movs	r2, #10
    3b96:	f00f f9f5 	bl	12f84 <UART_SendBlock>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:858 (discriminator 1)

	// wait until all characters are transmitted
	while (UART_GetSentDataNum(DeviceDataPtr) != ilen)
    3b9a:	1c20      	adds	r0, r4, #0
    3b9c:	f00f fa18 	bl	12fd0 <UART_GetSentDataNum>
    3ba0:	280a      	cmp	r0, #10
    3ba2:	d1fa      	bne.n	3b9a <BlueRadios_Init+0x1e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:862
		;

	return;
}
    3ba4:	bd38      	pop	{r3, r4, r5, pc}
    3ba6:	46c0      	nop			; (mov r8, r8)
    3ba8:	1fffe174 	.word	0x1fffe174
    3bac:	00015080 	.word	0x00015080

00003bb0 <CreateAndSendBluetoothPacketsViaUART>:
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:908
	return;
}

// set bluetooth packets out over UART
void CreateAndSendBluetoothPacketsViaUART(LDD_TDeviceData *DeviceDataPtr)
{
    3bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bb2:	465f      	mov	r7, fp
    3bb4:	4656      	mov	r6, sl
    3bb6:	464d      	mov	r5, r9
    3bb8:	4644      	mov	r4, r8
    3bba:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:927
#ifdef UART_OFF
	SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK; // Enable full STOP mode
	return;  // SERIAL COMM IS NOT RUNNING
#else
	//    LED_RED_ClrVal(NULL);
	SCB_SCR &= (~SCB_SCR_SLEEPDEEP_MASK); // Disable full STOP mode
    3bbc:	4a88      	ldr	r2, [pc, #544]	; (3de0 <CreateAndSendBluetoothPacketsViaUART+0x230>)
    3bbe:	23d1      	movs	r3, #209	; 0xd1
    3bc0:	011b      	lsls	r3, r3, #4
    3bc2:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:908
	return;
}

// set bluetooth packets out over UART
void CreateAndSendBluetoothPacketsViaUART(LDD_TDeviceData *DeviceDataPtr)
{
    3bc4:	b093      	sub	sp, #76	; 0x4c
    3bc6:	9003      	str	r0, [sp, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:927
#ifdef UART_OFF
	SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK; // Enable full STOP mode
	return;  // SERIAL COMM IS NOT RUNNING
#else
	//    LED_RED_ClrVal(NULL);
	SCB_SCR &= (~SCB_SCR_SLEEPDEEP_MASK); // Disable full STOP mode
    3bc8:	2004      	movs	r0, #4
    3bca:	4381      	bics	r1, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:953
	// this packet type is always transmitted
	// total size is 0 to 35 equals 36 bytes 
	// ************************************************************************

	// [0]: packet start byte (need a iIndex++ here since not using sBufAppendItem)
	sUARTOutputBuf[iIndex++] = 0x7E;
    3bcc:	4f85      	ldr	r7, [pc, #532]	; (3de4 <CreateAndSendBluetoothPacketsViaUART+0x234>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:927
#ifdef UART_OFF
	SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK; // Enable full STOP mode
	return;  // SERIAL COMM IS NOT RUNNING
#else
	//    LED_RED_ClrVal(NULL);
	SCB_SCR &= (~SCB_SCR_SLEEPDEEP_MASK); // Disable full STOP mode
    3bce:	50d1      	str	r1, [r2, r3]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3bd0:	4885      	ldr	r0, [pc, #532]	; (3de8 <CreateAndSendBluetoothPacketsViaUART+0x238>)
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:953
	// this packet type is always transmitted
	// total size is 0 to 35 equals 36 bytes 
	// ************************************************************************

	// [0]: packet start byte (need a iIndex++ here since not using sBufAppendItem)
	sUARTOutputBuf[iIndex++] = 0x7E;
    3bd2:	237e      	movs	r3, #126	; 0x7e
    3bd4:	703b      	strb	r3, [r7, #0]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    3bd6:	2301      	movs	r3, #1
    3bd8:	707b      	strb	r3, [r7, #1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3bda:	7a03      	ldrb	r3, [r0, #8]
    3bdc:	4682      	mov	sl, r0
    3bde:	2b7e      	cmp	r3, #126	; 0x7e
    3be0:	d100      	bne.n	3be4 <CreateAndSendBluetoothPacketsViaUART+0x34>
    3be2:	e10d      	b.n	3e00 <CreateAndSendBluetoothPacketsViaUART+0x250>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    3be4:	70bb      	strb	r3, [r7, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    3be6:	2203      	movs	r2, #3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    3be8:	2b7d      	cmp	r3, #125	; 0x7d
    3bea:	d100      	bne.n	3bee <CreateAndSendBluetoothPacketsViaUART+0x3e>
    3bec:	e208      	b.n	4000 <PSP_CNFG_FP_REGISTERS_EXIST>
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:961
	tmpuint8 = 0x01;
	sBufAppendItem(sUARTOutputBuf, &iIndex, &tmpuint8, 1);

	// [2]: packet number byte
	sBufAppendItem(sUARTOutputBuf, &iIndex, &(globals.iPacketNumber), 1);
	globals.iPacketNumber++;
    3bee:	3301      	adds	r3, #1
    3bf0:	4654      	mov	r4, sl
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3bf2:	4d7e      	ldr	r5, [pc, #504]	; (3dec <CreateAndSendBluetoothPacketsViaUART+0x23c>)
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:961
	tmpuint8 = 0x01;
	sBufAppendItem(sUARTOutputBuf, &iIndex, &tmpuint8, 1);

	// [2]: packet number byte
	sBufAppendItem(sUARTOutputBuf, &iIndex, &(globals.iPacketNumber), 1);
	globals.iPacketNumber++;
    3bf4:	7223      	strb	r3, [r4, #8]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3bf6:	2370      	movs	r3, #112	; 0x70
    3bf8:	5ce9      	ldrb	r1, [r5, r3]
    3bfa:	297e      	cmp	r1, #126	; 0x7e
    3bfc:	d100      	bne.n	3c00 <CreateAndSendBluetoothPacketsViaUART+0x50>
    3bfe:	e10d      	b.n	3e1c <CreateAndSendBluetoothPacketsViaUART+0x26c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    3c00:	297d      	cmp	r1, #125	; 0x7d
    3c02:	d100      	bne.n	3c06 <CreateAndSendBluetoothPacketsViaUART+0x56>
    3c04:	e212      	b.n	402c <PSP_CNFG_FP_REGISTERS_EXIST+0x2c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    3c06:	1c53      	adds	r3, r2, #1
    3c08:	54b9      	strb	r1, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3c0a:	2271      	movs	r2, #113	; 0x71
    3c0c:	5ca9      	ldrb	r1, [r5, r2]
    3c0e:	297e      	cmp	r1, #126	; 0x7e
    3c10:	d100      	bne.n	3c14 <CreateAndSendBluetoothPacketsViaUART+0x64>
    3c12:	e10e      	b.n	3e32 <CreateAndSendBluetoothPacketsViaUART+0x282>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    3c14:	297d      	cmp	r1, #125	; 0x7d
    3c16:	d100      	bne.n	3c1a <CreateAndSendBluetoothPacketsViaUART+0x6a>
    3c18:	e202      	b.n	4020 <PSP_CNFG_FP_REGISTERS_EXIST+0x20>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    3c1a:	1c5a      	adds	r2, r3, #1
    3c1c:	54f9      	strb	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3c1e:	2372      	movs	r3, #114	; 0x72
    3c20:	5ce9      	ldrb	r1, [r5, r3]
    3c22:	297e      	cmp	r1, #126	; 0x7e
    3c24:	d100      	bne.n	3c28 <CreateAndSendBluetoothPacketsViaUART+0x78>
    3c26:	e10f      	b.n	3e48 <CreateAndSendBluetoothPacketsViaUART+0x298>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    3c28:	297d      	cmp	r1, #125	; 0x7d
    3c2a:	d100      	bne.n	3c2e <CreateAndSendBluetoothPacketsViaUART+0x7e>
    3c2c:	e1f2      	b.n	4014 <PSP_CNFG_FP_REGISTERS_EXIST+0x14>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    3c2e:	1c53      	adds	r3, r2, #1
    3c30:	54b9      	strb	r1, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3c32:	2273      	movs	r2, #115	; 0x73
    3c34:	5caa      	ldrb	r2, [r5, r2]
    3c36:	2a7e      	cmp	r2, #126	; 0x7e
    3c38:	d100      	bne.n	3c3c <CreateAndSendBluetoothPacketsViaUART+0x8c>
    3c3a:	e110      	b.n	3e5e <CreateAndSendBluetoothPacketsViaUART+0x2ae>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    3c3c:	2a7d      	cmp	r2, #125	; 0x7d
    3c3e:	d100      	bne.n	3c42 <CreateAndSendBluetoothPacketsViaUART+0x92>
    3c40:	e1e2      	b.n	4008 <PSP_CNFG_FP_REGISTERS_EXIST+0x8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    3c42:	1c59      	adds	r1, r3, #1
    3c44:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3c46:	4b6a      	ldr	r3, [pc, #424]	; (3df0 <CreateAndSendBluetoothPacketsViaUART+0x240>)
    3c48:	222e      	movs	r2, #46	; 0x2e
    3c4a:	5c9a      	ldrb	r2, [r3, r2]
    3c4c:	2a7e      	cmp	r2, #126	; 0x7e
    3c4e:	d100      	bne.n	3c52 <CreateAndSendBluetoothPacketsViaUART+0xa2>
    3c50:	e111      	b.n	3e76 <CreateAndSendBluetoothPacketsViaUART+0x2c6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    3c52:	2a7d      	cmp	r2, #125	; 0x7d
    3c54:	d100      	bne.n	3c58 <CreateAndSendBluetoothPacketsViaUART+0xa8>
    3c56:	e1ef      	b.n	4038 <PSP_CNFG_FP_REGISTERS_EXIST+0x38>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    3c58:	1c48      	adds	r0, r1, #1
    3c5a:	547a      	strb	r2, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3c5c:	222f      	movs	r2, #47	; 0x2f
    3c5e:	5c9a      	ldrb	r2, [r3, r2]
    3c60:	2a7e      	cmp	r2, #126	; 0x7e
    3c62:	d100      	bne.n	3c66 <CreateAndSendBluetoothPacketsViaUART+0xb6>
    3c64:	e112      	b.n	3e8c <CreateAndSendBluetoothPacketsViaUART+0x2dc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    3c66:	2a7d      	cmp	r2, #125	; 0x7d
    3c68:	d100      	bne.n	3c6c <CreateAndSendBluetoothPacketsViaUART+0xbc>
    3c6a:	e1f1      	b.n	4050 <PSP_CNFG_FP_REGISTERS_EXIST+0x50>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    3c6c:	1c41      	adds	r1, r0, #1
    3c6e:	543a      	strb	r2, [r7, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3c70:	2230      	movs	r2, #48	; 0x30
    3c72:	5c98      	ldrb	r0, [r3, r2]
    3c74:	287e      	cmp	r0, #126	; 0x7e
    3c76:	d100      	bne.n	3c7a <CreateAndSendBluetoothPacketsViaUART+0xca>
    3c78:	e113      	b.n	3ea2 <CreateAndSendBluetoothPacketsViaUART+0x2f2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    3c7a:	287d      	cmp	r0, #125	; 0x7d
    3c7c:	d100      	bne.n	3c80 <CreateAndSendBluetoothPacketsViaUART+0xd0>
    3c7e:	e1e1      	b.n	4044 <PSP_CNFG_FP_REGISTERS_EXIST+0x44>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    3c80:	1c4a      	adds	r2, r1, #1
    3c82:	5478      	strb	r0, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3c84:	2131      	movs	r1, #49	; 0x31
    3c86:	5c58      	ldrb	r0, [r3, r1]
    3c88:	287e      	cmp	r0, #126	; 0x7e
    3c8a:	d100      	bne.n	3c8e <CreateAndSendBluetoothPacketsViaUART+0xde>
    3c8c:	e114      	b.n	3eb8 <CreateAndSendBluetoothPacketsViaUART+0x308>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    3c8e:	287d      	cmp	r0, #125	; 0x7d
    3c90:	d100      	bne.n	3c94 <CreateAndSendBluetoothPacketsViaUART+0xe4>
    3c92:	e20d      	b.n	40b0 <PSP_CNFG_FP_REGISTERS_EXIST+0xb0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    3c94:	1c51      	adds	r1, r2, #1
    3c96:	54b8      	strb	r0, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3c98:	2232      	movs	r2, #50	; 0x32
    3c9a:	5c98      	ldrb	r0, [r3, r2]
    3c9c:	287e      	cmp	r0, #126	; 0x7e
    3c9e:	d100      	bne.n	3ca2 <CreateAndSendBluetoothPacketsViaUART+0xf2>
    3ca0:	e115      	b.n	3ece <CreateAndSendBluetoothPacketsViaUART+0x31e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    3ca2:	287d      	cmp	r0, #125	; 0x7d
    3ca4:	d100      	bne.n	3ca8 <CreateAndSendBluetoothPacketsViaUART+0xf8>
    3ca6:	e1fd      	b.n	40a4 <PSP_CNFG_FP_REGISTERS_EXIST+0xa4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    3ca8:	1c4a      	adds	r2, r1, #1
    3caa:	5478      	strb	r0, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3cac:	2133      	movs	r1, #51	; 0x33
    3cae:	5c5b      	ldrb	r3, [r3, r1]
    3cb0:	2b7e      	cmp	r3, #126	; 0x7e
    3cb2:	d100      	bne.n	3cb6 <CreateAndSendBluetoothPacketsViaUART+0x106>
    3cb4:	e116      	b.n	3ee4 <CreateAndSendBluetoothPacketsViaUART+0x334>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    3cb6:	2b7d      	cmp	r3, #125	; 0x7d
    3cb8:	d100      	bne.n	3cbc <CreateAndSendBluetoothPacketsViaUART+0x10c>
    3cba:	e1ed      	b.n	4098 <PSP_CNFG_FP_REGISTERS_EXIST+0x98>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    3cbc:	1c51      	adds	r1, r2, #1
    3cbe:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3cc0:	4b4c      	ldr	r3, [pc, #304]	; (3df4 <CreateAndSendBluetoothPacketsViaUART+0x244>)
    3cc2:	2250      	movs	r2, #80	; 0x50
    3cc4:	5c98      	ldrb	r0, [r3, r2]
    3cc6:	287e      	cmp	r0, #126	; 0x7e
    3cc8:	d100      	bne.n	3ccc <CreateAndSendBluetoothPacketsViaUART+0x11c>
    3cca:	e117      	b.n	3efc <CreateAndSendBluetoothPacketsViaUART+0x34c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    3ccc:	287d      	cmp	r0, #125	; 0x7d
    3cce:	d100      	bne.n	3cd2 <CreateAndSendBluetoothPacketsViaUART+0x122>
    3cd0:	e1dc      	b.n	408c <PSP_CNFG_FP_REGISTERS_EXIST+0x8c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    3cd2:	1c4a      	adds	r2, r1, #1
    3cd4:	5478      	strb	r0, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3cd6:	2151      	movs	r1, #81	; 0x51
    3cd8:	5c58      	ldrb	r0, [r3, r1]
    3cda:	287e      	cmp	r0, #126	; 0x7e
    3cdc:	d100      	bne.n	3ce0 <CreateAndSendBluetoothPacketsViaUART+0x130>
    3cde:	e118      	b.n	3f12 <CreateAndSendBluetoothPacketsViaUART+0x362>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    3ce0:	287d      	cmp	r0, #125	; 0x7d
    3ce2:	d100      	bne.n	3ce6 <CreateAndSendBluetoothPacketsViaUART+0x136>
    3ce4:	e1cc      	b.n	4080 <PSP_CNFG_FP_REGISTERS_EXIST+0x80>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    3ce6:	1c51      	adds	r1, r2, #1
    3ce8:	54b8      	strb	r0, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3cea:	2252      	movs	r2, #82	; 0x52
    3cec:	5c98      	ldrb	r0, [r3, r2]
    3cee:	287e      	cmp	r0, #126	; 0x7e
    3cf0:	d100      	bne.n	3cf4 <CreateAndSendBluetoothPacketsViaUART+0x144>
    3cf2:	e119      	b.n	3f28 <CreateAndSendBluetoothPacketsViaUART+0x378>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    3cf4:	287d      	cmp	r0, #125	; 0x7d
    3cf6:	d100      	bne.n	3cfa <CreateAndSendBluetoothPacketsViaUART+0x14a>
    3cf8:	e1bc      	b.n	4074 <PSP_CNFG_FP_REGISTERS_EXIST+0x74>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    3cfa:	1c4a      	adds	r2, r1, #1
    3cfc:	5478      	strb	r0, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3cfe:	2153      	movs	r1, #83	; 0x53
    3d00:	5c58      	ldrb	r0, [r3, r1]
    3d02:	287e      	cmp	r0, #126	; 0x7e
    3d04:	d100      	bne.n	3d08 <CreateAndSendBluetoothPacketsViaUART+0x158>
    3d06:	e11a      	b.n	3f3e <CreateAndSendBluetoothPacketsViaUART+0x38e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    3d08:	287d      	cmp	r0, #125	; 0x7d
    3d0a:	d100      	bne.n	3d0e <CreateAndSendBluetoothPacketsViaUART+0x15e>
    3d0c:	e1ac      	b.n	4068 <PSP_CNFG_FP_REGISTERS_EXIST+0x68>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    3d0e:	1c51      	adds	r1, r2, #1
    3d10:	54b8      	strb	r0, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3d12:	2254      	movs	r2, #84	; 0x54
    3d14:	5c98      	ldrb	r0, [r3, r2]
    3d16:	287e      	cmp	r0, #126	; 0x7e
    3d18:	d100      	bne.n	3d1c <CreateAndSendBluetoothPacketsViaUART+0x16c>
    3d1a:	e11b      	b.n	3f54 <CreateAndSendBluetoothPacketsViaUART+0x3a4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    3d1c:	287d      	cmp	r0, #125	; 0x7d
    3d1e:	d100      	bne.n	3d22 <CreateAndSendBluetoothPacketsViaUART+0x172>
    3d20:	e19c      	b.n	405c <PSP_CNFG_FP_REGISTERS_EXIST+0x5c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    3d22:	1c4a      	adds	r2, r1, #1
    3d24:	5478      	strb	r0, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3d26:	2155      	movs	r1, #85	; 0x55
    3d28:	5c5b      	ldrb	r3, [r3, r1]
    3d2a:	2b7e      	cmp	r3, #126	; 0x7e
    3d2c:	d100      	bne.n	3d30 <CreateAndSendBluetoothPacketsViaUART+0x180>
    3d2e:	e11c      	b.n	3f6a <CreateAndSendBluetoothPacketsViaUART+0x3ba>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    3d30:	2b7d      	cmp	r3, #125	; 0x7d
    3d32:	d100      	bne.n	3d36 <CreateAndSendBluetoothPacketsViaUART+0x186>
    3d34:	e1e7      	b.n	4106 <PSP_CNFG_FP_REGISTERS_EXIST+0x106>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    3d36:	1c51      	adds	r1, r2, #1
    3d38:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3d3a:	4b2f      	ldr	r3, [pc, #188]	; (3df8 <CreateAndSendBluetoothPacketsViaUART+0x248>)
    3d3c:	224c      	movs	r2, #76	; 0x4c
    3d3e:	5c98      	ldrb	r0, [r3, r2]
    3d40:	287e      	cmp	r0, #126	; 0x7e
    3d42:	d100      	bne.n	3d46 <CreateAndSendBluetoothPacketsViaUART+0x196>
    3d44:	e11d      	b.n	3f82 <CreateAndSendBluetoothPacketsViaUART+0x3d2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    3d46:	287d      	cmp	r0, #125	; 0x7d
    3d48:	d100      	bne.n	3d4c <CreateAndSendBluetoothPacketsViaUART+0x19c>
    3d4a:	e1d6      	b.n	40fa <PSP_CNFG_FP_REGISTERS_EXIST+0xfa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    3d4c:	1c4a      	adds	r2, r1, #1
    3d4e:	5478      	strb	r0, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3d50:	214d      	movs	r1, #77	; 0x4d
    3d52:	5c58      	ldrb	r0, [r3, r1]
    3d54:	287e      	cmp	r0, #126	; 0x7e
    3d56:	d100      	bne.n	3d5a <CreateAndSendBluetoothPacketsViaUART+0x1aa>
    3d58:	e11e      	b.n	3f98 <CreateAndSendBluetoothPacketsViaUART+0x3e8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    3d5a:	287d      	cmp	r0, #125	; 0x7d
    3d5c:	d100      	bne.n	3d60 <CreateAndSendBluetoothPacketsViaUART+0x1b0>
    3d5e:	e1c6      	b.n	40ee <PSP_CNFG_FP_REGISTERS_EXIST+0xee>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    3d60:	1c51      	adds	r1, r2, #1
    3d62:	54b8      	strb	r0, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3d64:	224e      	movs	r2, #78	; 0x4e
    3d66:	5c98      	ldrb	r0, [r3, r2]
    3d68:	287e      	cmp	r0, #126	; 0x7e
    3d6a:	d100      	bne.n	3d6e <CreateAndSendBluetoothPacketsViaUART+0x1be>
    3d6c:	e11f      	b.n	3fae <CreateAndSendBluetoothPacketsViaUART+0x3fe>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    3d6e:	287d      	cmp	r0, #125	; 0x7d
    3d70:	d100      	bne.n	3d74 <CreateAndSendBluetoothPacketsViaUART+0x1c4>
    3d72:	e1b6      	b.n	40e2 <PSP_CNFG_FP_REGISTERS_EXIST+0xe2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    3d74:	1c4a      	adds	r2, r1, #1
    3d76:	5478      	strb	r0, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3d78:	214f      	movs	r1, #79	; 0x4f
    3d7a:	5c58      	ldrb	r0, [r3, r1]
    3d7c:	287e      	cmp	r0, #126	; 0x7e
    3d7e:	d100      	bne.n	3d82 <CreateAndSendBluetoothPacketsViaUART+0x1d2>
    3d80:	e120      	b.n	3fc4 <CreateAndSendBluetoothPacketsViaUART+0x414>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    3d82:	287d      	cmp	r0, #125	; 0x7d
    3d84:	d100      	bne.n	3d88 <CreateAndSendBluetoothPacketsViaUART+0x1d8>
    3d86:	e1a6      	b.n	40d6 <PSP_CNFG_FP_REGISTERS_EXIST+0xd6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    3d88:	1c51      	adds	r1, r2, #1
    3d8a:	54b8      	strb	r0, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3d8c:	2250      	movs	r2, #80	; 0x50
    3d8e:	5c98      	ldrb	r0, [r3, r2]
    3d90:	287e      	cmp	r0, #126	; 0x7e
    3d92:	d100      	bne.n	3d96 <CreateAndSendBluetoothPacketsViaUART+0x1e6>
    3d94:	e121      	b.n	3fda <CreateAndSendBluetoothPacketsViaUART+0x42a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    3d96:	287d      	cmp	r0, #125	; 0x7d
    3d98:	d100      	bne.n	3d9c <CreateAndSendBluetoothPacketsViaUART+0x1ec>
    3d9a:	e196      	b.n	40ca <PSP_CNFG_FP_REGISTERS_EXIST+0xca>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    3d9c:	1c4a      	adds	r2, r1, #1
    3d9e:	5478      	strb	r0, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3da0:	2151      	movs	r1, #81	; 0x51
    3da2:	5c5b      	ldrb	r3, [r3, r1]
    3da4:	2b7e      	cmp	r3, #126	; 0x7e
    3da6:	d100      	bne.n	3daa <CreateAndSendBluetoothPacketsViaUART+0x1fa>
    3da8:	e122      	b.n	3ff0 <CreateAndSendBluetoothPacketsViaUART+0x440>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    3daa:	2b7d      	cmp	r3, #125	; 0x7d
    3dac:	d100      	bne.n	3db0 <CreateAndSendBluetoothPacketsViaUART+0x200>
    3dae:	e185      	b.n	40bc <PSP_CNFG_FP_REGISTERS_EXIST+0xbc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    3db0:	1c51      	adds	r1, r2, #1
    3db2:	4689      	mov	r9, r1
    3db4:	54bb      	strb	r3, [r7, r2]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1005

	// initialize default quaternion, flags byte, angular velocity and orientation
	fq.q0 = 1.0F;
	fq.q1 = fq.q2 = fq.q3 = 0.0F;
	flags = 0x00;
	iOmega[X] = iOmega[Y] = iOmega[Z] = 0;
    3db6:	2300      	movs	r3, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1006
	iPhi = iThe = iRho = iDelta = 0;
    3db8:	466a      	mov	r2, sp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1005

	// initialize default quaternion, flags byte, angular velocity and orientation
	fq.q0 = 1.0F;
	fq.q1 = fq.q2 = fq.q3 = 0.0F;
	flags = 0x00;
	iOmega[X] = iOmega[Y] = iOmega[Z] = 0;
    3dba:	ac10      	add	r4, sp, #64	; 0x40
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1006
	iPhi = iThe = iRho = iDelta = 0;
    3dbc:	8613      	strh	r3, [r2, #48]	; 0x30
    3dbe:	8513      	strh	r3, [r2, #40]	; 0x28
    3dc0:	8413      	strh	r3, [r2, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1007
	isystick = 0;
    3dc2:	8713      	strh	r3, [r2, #56]	; 0x38
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1005

	// initialize default quaternion, flags byte, angular velocity and orientation
	fq.q0 = 1.0F;
	fq.q1 = fq.q2 = fq.q3 = 0.0F;
	flags = 0x00;
	iOmega[X] = iOmega[Y] = iOmega[Z] = 0;
    3dc4:	80a3      	strh	r3, [r4, #4]
    3dc6:	8063      	strh	r3, [r4, #2]
    3dc8:	8023      	strh	r3, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1023
	// Aerospace/NED:	0, quaternion nibble    
	// Android:	  		1, quaternion nibble
	// Windows 8: 		2, quaternion nibble

	// set the quaternion, flags, angular velocity and Euler angles
	switch (globals.QuaternionPacketType)
    3dca:	4652      	mov	r2, sl
    3dcc:	7913      	ldrb	r3, [r2, #4]
    3dce:	2b05      	cmp	r3, #5
    3dd0:	d901      	bls.n	3dd6 <CreateAndSendBluetoothPacketsViaUART+0x226>
    3dd2:	f002 f83b 	bl	5e4c <PSP_CNFG_FP_REGISTERS_EXIST+0x1e4c>
    3dd6:	4a09      	ldr	r2, [pc, #36]	; (3dfc <CreateAndSendBluetoothPacketsViaUART+0x24c>)
    3dd8:	009b      	lsls	r3, r3, #2
    3dda:	58d3      	ldr	r3, [r2, r3]
    3ddc:	469f      	mov	pc, r3
    3dde:	46c0      	nop			; (mov r8, r8)
    3de0:	e000e000 	.word	0xe000e000
    3de4:	1fffe174 	.word	0x1fffe174
    3de8:	1fffe310 	.word	0x1fffe310
    3dec:	1fffe294 	.word	0x1fffe294
    3df0:	1fffe338 	.word	0x1fffe338
    3df4:	20000208 	.word	0x20000208
    3df8:	1ffff4ec 	.word	0x1ffff4ec
    3dfc:	00015040 	.word	0x00015040
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:961
	tmpuint8 = 0x01;
	sBufAppendItem(sUARTOutputBuf, &iIndex, &tmpuint8, 1);

	// [2]: packet number byte
	sBufAppendItem(sUARTOutputBuf, &iIndex, &(globals.iPacketNumber), 1);
	globals.iPacketNumber++;
    3e00:	3301      	adds	r3, #1
    3e02:	4654      	mov	r4, sl
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3e04:	4dc3      	ldr	r5, [pc, #780]	; (4114 <PSP_CNFG_FP_REGISTERS_EXIST+0x114>)
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:961
	tmpuint8 = 0x01;
	sBufAppendItem(sUARTOutputBuf, &iIndex, &tmpuint8, 1);

	// [2]: packet number byte
	sBufAppendItem(sUARTOutputBuf, &iIndex, &(globals.iPacketNumber), 1);
	globals.iPacketNumber++;
    3e06:	7223      	strb	r3, [r4, #8]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3e08:	2370      	movs	r3, #112	; 0x70
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    3e0a:	227d      	movs	r2, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3e0c:	5ce9      	ldrb	r1, [r5, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    3e0e:	70ba      	strb	r2, [r7, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3e10:	225e      	movs	r2, #94	; 0x5e
    3e12:	70fa      	strb	r2, [r7, #3]
    3e14:	2204      	movs	r2, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3e16:	297e      	cmp	r1, #126	; 0x7e
    3e18:	d000      	beq.n	3e1c <CreateAndSendBluetoothPacketsViaUART+0x26c>
    3e1a:	e6f1      	b.n	3c00 <CreateAndSendBluetoothPacketsViaUART+0x50>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    3e1c:	237d      	movs	r3, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3e1e:	1c79      	adds	r1, r7, #1
    3e20:	205e      	movs	r0, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    3e22:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3e24:	5488      	strb	r0, [r1, r2]
    3e26:	1c93      	adds	r3, r2, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3e28:	2271      	movs	r2, #113	; 0x71
    3e2a:	5ca9      	ldrb	r1, [r5, r2]
    3e2c:	297e      	cmp	r1, #126	; 0x7e
    3e2e:	d000      	beq.n	3e32 <CreateAndSendBluetoothPacketsViaUART+0x282>
    3e30:	e6f0      	b.n	3c14 <CreateAndSendBluetoothPacketsViaUART+0x64>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    3e32:	227d      	movs	r2, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3e34:	1c79      	adds	r1, r7, #1
    3e36:	205e      	movs	r0, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    3e38:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3e3a:	54c8      	strb	r0, [r1, r3]
    3e3c:	1c9a      	adds	r2, r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3e3e:	2372      	movs	r3, #114	; 0x72
    3e40:	5ce9      	ldrb	r1, [r5, r3]
    3e42:	297e      	cmp	r1, #126	; 0x7e
    3e44:	d000      	beq.n	3e48 <CreateAndSendBluetoothPacketsViaUART+0x298>
    3e46:	e6ef      	b.n	3c28 <CreateAndSendBluetoothPacketsViaUART+0x78>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    3e48:	237d      	movs	r3, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3e4a:	1c79      	adds	r1, r7, #1
    3e4c:	205e      	movs	r0, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    3e4e:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3e50:	5488      	strb	r0, [r1, r2]
    3e52:	1c93      	adds	r3, r2, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3e54:	2273      	movs	r2, #115	; 0x73
    3e56:	5caa      	ldrb	r2, [r5, r2]
    3e58:	2a7e      	cmp	r2, #126	; 0x7e
    3e5a:	d000      	beq.n	3e5e <CreateAndSendBluetoothPacketsViaUART+0x2ae>
    3e5c:	e6ee      	b.n	3c3c <CreateAndSendBluetoothPacketsViaUART+0x8c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    3e5e:	227d      	movs	r2, #125	; 0x7d
    3e60:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3e62:	205e      	movs	r0, #94	; 0x5e
    3e64:	1c7a      	adds	r2, r7, #1
    3e66:	54d0      	strb	r0, [r2, r3]
    3e68:	1c99      	adds	r1, r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3e6a:	4bab      	ldr	r3, [pc, #684]	; (4118 <PSP_CNFG_FP_REGISTERS_EXIST+0x118>)
    3e6c:	222e      	movs	r2, #46	; 0x2e
    3e6e:	5c9a      	ldrb	r2, [r3, r2]
    3e70:	2a7e      	cmp	r2, #126	; 0x7e
    3e72:	d000      	beq.n	3e76 <CreateAndSendBluetoothPacketsViaUART+0x2c6>
    3e74:	e6ed      	b.n	3c52 <CreateAndSendBluetoothPacketsViaUART+0xa2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    3e76:	227d      	movs	r2, #125	; 0x7d
    3e78:	547a      	strb	r2, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3e7a:	245e      	movs	r4, #94	; 0x5e
    3e7c:	1c7a      	adds	r2, r7, #1
    3e7e:	5454      	strb	r4, [r2, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3e80:	222f      	movs	r2, #47	; 0x2f
    3e82:	5c9a      	ldrb	r2, [r3, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
    3e84:	1c88      	adds	r0, r1, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3e86:	2a7e      	cmp	r2, #126	; 0x7e
    3e88:	d000      	beq.n	3e8c <CreateAndSendBluetoothPacketsViaUART+0x2dc>
    3e8a:	e6ec      	b.n	3c66 <CreateAndSendBluetoothPacketsViaUART+0xb6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    3e8c:	227d      	movs	r2, #125	; 0x7d
    3e8e:	543a      	strb	r2, [r7, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3e90:	245e      	movs	r4, #94	; 0x5e
    3e92:	1c7a      	adds	r2, r7, #1
    3e94:	5414      	strb	r4, [r2, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3e96:	2230      	movs	r2, #48	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
    3e98:	1c81      	adds	r1, r0, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3e9a:	5c98      	ldrb	r0, [r3, r2]
    3e9c:	287e      	cmp	r0, #126	; 0x7e
    3e9e:	d000      	beq.n	3ea2 <CreateAndSendBluetoothPacketsViaUART+0x2f2>
    3ea0:	e6eb      	b.n	3c7a <CreateAndSendBluetoothPacketsViaUART+0xca>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    3ea2:	227d      	movs	r2, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3ea4:	1c78      	adds	r0, r7, #1
    3ea6:	245e      	movs	r4, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    3ea8:	547a      	strb	r2, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3eaa:	5444      	strb	r4, [r0, r1]
    3eac:	1c8a      	adds	r2, r1, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3eae:	2131      	movs	r1, #49	; 0x31
    3eb0:	5c58      	ldrb	r0, [r3, r1]
    3eb2:	287e      	cmp	r0, #126	; 0x7e
    3eb4:	d000      	beq.n	3eb8 <CreateAndSendBluetoothPacketsViaUART+0x308>
    3eb6:	e6ea      	b.n	3c8e <CreateAndSendBluetoothPacketsViaUART+0xde>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    3eb8:	217d      	movs	r1, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3eba:	1c78      	adds	r0, r7, #1
    3ebc:	245e      	movs	r4, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    3ebe:	54b9      	strb	r1, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3ec0:	5484      	strb	r4, [r0, r2]
    3ec2:	1c91      	adds	r1, r2, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3ec4:	2232      	movs	r2, #50	; 0x32
    3ec6:	5c98      	ldrb	r0, [r3, r2]
    3ec8:	287e      	cmp	r0, #126	; 0x7e
    3eca:	d000      	beq.n	3ece <CreateAndSendBluetoothPacketsViaUART+0x31e>
    3ecc:	e6e9      	b.n	3ca2 <CreateAndSendBluetoothPacketsViaUART+0xf2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    3ece:	227d      	movs	r2, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3ed0:	1c78      	adds	r0, r7, #1
    3ed2:	245e      	movs	r4, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    3ed4:	547a      	strb	r2, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3ed6:	5444      	strb	r4, [r0, r1]
    3ed8:	1c8a      	adds	r2, r1, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3eda:	2133      	movs	r1, #51	; 0x33
    3edc:	5c5b      	ldrb	r3, [r3, r1]
    3ede:	2b7e      	cmp	r3, #126	; 0x7e
    3ee0:	d000      	beq.n	3ee4 <CreateAndSendBluetoothPacketsViaUART+0x334>
    3ee2:	e6e8      	b.n	3cb6 <CreateAndSendBluetoothPacketsViaUART+0x106>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    3ee4:	237d      	movs	r3, #125	; 0x7d
    3ee6:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3ee8:	205e      	movs	r0, #94	; 0x5e
    3eea:	1c7b      	adds	r3, r7, #1
    3eec:	5498      	strb	r0, [r3, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3eee:	4b8b      	ldr	r3, [pc, #556]	; (411c <PSP_CNFG_FP_REGISTERS_EXIST+0x11c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
    3ef0:	1c91      	adds	r1, r2, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3ef2:	2250      	movs	r2, #80	; 0x50
    3ef4:	5c98      	ldrb	r0, [r3, r2]
    3ef6:	287e      	cmp	r0, #126	; 0x7e
    3ef8:	d000      	beq.n	3efc <CreateAndSendBluetoothPacketsViaUART+0x34c>
    3efa:	e6e7      	b.n	3ccc <CreateAndSendBluetoothPacketsViaUART+0x11c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    3efc:	227d      	movs	r2, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3efe:	1c78      	adds	r0, r7, #1
    3f00:	245e      	movs	r4, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    3f02:	547a      	strb	r2, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3f04:	5444      	strb	r4, [r0, r1]
    3f06:	1c8a      	adds	r2, r1, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3f08:	2151      	movs	r1, #81	; 0x51
    3f0a:	5c58      	ldrb	r0, [r3, r1]
    3f0c:	287e      	cmp	r0, #126	; 0x7e
    3f0e:	d000      	beq.n	3f12 <CreateAndSendBluetoothPacketsViaUART+0x362>
    3f10:	e6e6      	b.n	3ce0 <CreateAndSendBluetoothPacketsViaUART+0x130>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    3f12:	217d      	movs	r1, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3f14:	1c78      	adds	r0, r7, #1
    3f16:	245e      	movs	r4, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    3f18:	54b9      	strb	r1, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3f1a:	5484      	strb	r4, [r0, r2]
    3f1c:	1c91      	adds	r1, r2, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3f1e:	2252      	movs	r2, #82	; 0x52
    3f20:	5c98      	ldrb	r0, [r3, r2]
    3f22:	287e      	cmp	r0, #126	; 0x7e
    3f24:	d000      	beq.n	3f28 <CreateAndSendBluetoothPacketsViaUART+0x378>
    3f26:	e6e5      	b.n	3cf4 <CreateAndSendBluetoothPacketsViaUART+0x144>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    3f28:	227d      	movs	r2, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3f2a:	1c78      	adds	r0, r7, #1
    3f2c:	245e      	movs	r4, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    3f2e:	547a      	strb	r2, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3f30:	5444      	strb	r4, [r0, r1]
    3f32:	1c8a      	adds	r2, r1, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3f34:	2153      	movs	r1, #83	; 0x53
    3f36:	5c58      	ldrb	r0, [r3, r1]
    3f38:	287e      	cmp	r0, #126	; 0x7e
    3f3a:	d000      	beq.n	3f3e <CreateAndSendBluetoothPacketsViaUART+0x38e>
    3f3c:	e6e4      	b.n	3d08 <CreateAndSendBluetoothPacketsViaUART+0x158>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    3f3e:	217d      	movs	r1, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3f40:	1c78      	adds	r0, r7, #1
    3f42:	245e      	movs	r4, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    3f44:	54b9      	strb	r1, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3f46:	5484      	strb	r4, [r0, r2]
    3f48:	1c91      	adds	r1, r2, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3f4a:	2254      	movs	r2, #84	; 0x54
    3f4c:	5c98      	ldrb	r0, [r3, r2]
    3f4e:	287e      	cmp	r0, #126	; 0x7e
    3f50:	d000      	beq.n	3f54 <CreateAndSendBluetoothPacketsViaUART+0x3a4>
    3f52:	e6e3      	b.n	3d1c <CreateAndSendBluetoothPacketsViaUART+0x16c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    3f54:	227d      	movs	r2, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3f56:	1c78      	adds	r0, r7, #1
    3f58:	245e      	movs	r4, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    3f5a:	547a      	strb	r2, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3f5c:	5444      	strb	r4, [r0, r1]
    3f5e:	1c8a      	adds	r2, r1, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3f60:	2155      	movs	r1, #85	; 0x55
    3f62:	5c5b      	ldrb	r3, [r3, r1]
    3f64:	2b7e      	cmp	r3, #126	; 0x7e
    3f66:	d000      	beq.n	3f6a <CreateAndSendBluetoothPacketsViaUART+0x3ba>
    3f68:	e6e2      	b.n	3d30 <CreateAndSendBluetoothPacketsViaUART+0x180>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    3f6a:	237d      	movs	r3, #125	; 0x7d
    3f6c:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3f6e:	205e      	movs	r0, #94	; 0x5e
    3f70:	1c7b      	adds	r3, r7, #1
    3f72:	5498      	strb	r0, [r3, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3f74:	4b6a      	ldr	r3, [pc, #424]	; (4120 <PSP_CNFG_FP_REGISTERS_EXIST+0x120>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
    3f76:	1c91      	adds	r1, r2, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3f78:	224c      	movs	r2, #76	; 0x4c
    3f7a:	5c98      	ldrb	r0, [r3, r2]
    3f7c:	287e      	cmp	r0, #126	; 0x7e
    3f7e:	d000      	beq.n	3f82 <CreateAndSendBluetoothPacketsViaUART+0x3d2>
    3f80:	e6e1      	b.n	3d46 <CreateAndSendBluetoothPacketsViaUART+0x196>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    3f82:	227d      	movs	r2, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3f84:	1c78      	adds	r0, r7, #1
    3f86:	245e      	movs	r4, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    3f88:	547a      	strb	r2, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3f8a:	5444      	strb	r4, [r0, r1]
    3f8c:	1c8a      	adds	r2, r1, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3f8e:	214d      	movs	r1, #77	; 0x4d
    3f90:	5c58      	ldrb	r0, [r3, r1]
    3f92:	287e      	cmp	r0, #126	; 0x7e
    3f94:	d000      	beq.n	3f98 <CreateAndSendBluetoothPacketsViaUART+0x3e8>
    3f96:	e6e0      	b.n	3d5a <CreateAndSendBluetoothPacketsViaUART+0x1aa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    3f98:	217d      	movs	r1, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3f9a:	1c78      	adds	r0, r7, #1
    3f9c:	245e      	movs	r4, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    3f9e:	54b9      	strb	r1, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3fa0:	5484      	strb	r4, [r0, r2]
    3fa2:	1c91      	adds	r1, r2, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3fa4:	224e      	movs	r2, #78	; 0x4e
    3fa6:	5c98      	ldrb	r0, [r3, r2]
    3fa8:	287e      	cmp	r0, #126	; 0x7e
    3faa:	d000      	beq.n	3fae <CreateAndSendBluetoothPacketsViaUART+0x3fe>
    3fac:	e6df      	b.n	3d6e <CreateAndSendBluetoothPacketsViaUART+0x1be>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    3fae:	227d      	movs	r2, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3fb0:	1c78      	adds	r0, r7, #1
    3fb2:	245e      	movs	r4, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    3fb4:	547a      	strb	r2, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3fb6:	5444      	strb	r4, [r0, r1]
    3fb8:	1c8a      	adds	r2, r1, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3fba:	214f      	movs	r1, #79	; 0x4f
    3fbc:	5c58      	ldrb	r0, [r3, r1]
    3fbe:	287e      	cmp	r0, #126	; 0x7e
    3fc0:	d000      	beq.n	3fc4 <CreateAndSendBluetoothPacketsViaUART+0x414>
    3fc2:	e6de      	b.n	3d82 <CreateAndSendBluetoothPacketsViaUART+0x1d2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    3fc4:	217d      	movs	r1, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3fc6:	1c78      	adds	r0, r7, #1
    3fc8:	245e      	movs	r4, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    3fca:	54b9      	strb	r1, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3fcc:	5484      	strb	r4, [r0, r2]
    3fce:	1c91      	adds	r1, r2, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3fd0:	2250      	movs	r2, #80	; 0x50
    3fd2:	5c98      	ldrb	r0, [r3, r2]
    3fd4:	287e      	cmp	r0, #126	; 0x7e
    3fd6:	d000      	beq.n	3fda <CreateAndSendBluetoothPacketsViaUART+0x42a>
    3fd8:	e6dd      	b.n	3d96 <CreateAndSendBluetoothPacketsViaUART+0x1e6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    3fda:	227d      	movs	r2, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3fdc:	1c78      	adds	r0, r7, #1
    3fde:	245e      	movs	r4, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    3fe0:	547a      	strb	r2, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3fe2:	5444      	strb	r4, [r0, r1]
    3fe4:	1c8a      	adds	r2, r1, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    3fe6:	2151      	movs	r1, #81	; 0x51
    3fe8:	5c5b      	ldrb	r3, [r3, r1]
    3fea:	2b7e      	cmp	r3, #126	; 0x7e
    3fec:	d000      	beq.n	3ff0 <CreateAndSendBluetoothPacketsViaUART+0x440>
    3fee:	e6dc      	b.n	3daa <CreateAndSendBluetoothPacketsViaUART+0x1fa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    3ff0:	237d      	movs	r3, #125	; 0x7d
    3ff2:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    3ff4:	1c96      	adds	r6, r2, #2
    3ff6:	1c7b      	adds	r3, r7, #1
    3ff8:	215e      	movs	r1, #94	; 0x5e
    3ffa:	46b1      	mov	r9, r6
    3ffc:	5499      	strb	r1, [r3, r2]
    3ffe:	e6da      	b.n	3db6 <CreateAndSendBluetoothPacketsViaUART+0x206>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5D;
    4000:	225d      	movs	r2, #93	; 0x5d
    4002:	70fa      	strb	r2, [r7, #3]
    4004:	2204      	movs	r2, #4
    4006:	e5f2      	b.n	3bee <CreateAndSendBluetoothPacketsViaUART+0x3e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    4008:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    400a:	205d      	movs	r0, #93	; 0x5d
    400c:	1c7a      	adds	r2, r7, #1
    400e:	1c99      	adds	r1, r3, #2
    4010:	54d0      	strb	r0, [r2, r3]
    4012:	e618      	b.n	3c46 <CreateAndSendBluetoothPacketsViaUART+0x96>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    4014:	54b9      	strb	r1, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    4016:	205d      	movs	r0, #93	; 0x5d
    4018:	1c79      	adds	r1, r7, #1
    401a:	1c93      	adds	r3, r2, #2
    401c:	5488      	strb	r0, [r1, r2]
    401e:	e608      	b.n	3c32 <CreateAndSendBluetoothPacketsViaUART+0x82>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    4020:	54f9      	strb	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    4022:	205d      	movs	r0, #93	; 0x5d
    4024:	1c79      	adds	r1, r7, #1
    4026:	1c9a      	adds	r2, r3, #2
    4028:	54c8      	strb	r0, [r1, r3]
    402a:	e5f8      	b.n	3c1e <CreateAndSendBluetoothPacketsViaUART+0x6e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    402c:	54b9      	strb	r1, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    402e:	205d      	movs	r0, #93	; 0x5d
    4030:	1c79      	adds	r1, r7, #1
    4032:	1c93      	adds	r3, r2, #2
    4034:	5488      	strb	r0, [r1, r2]
    4036:	e5e8      	b.n	3c0a <CreateAndSendBluetoothPacketsViaUART+0x5a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    4038:	547a      	strb	r2, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    403a:	245d      	movs	r4, #93	; 0x5d
    403c:	1c7a      	adds	r2, r7, #1
    403e:	1c88      	adds	r0, r1, #2
    4040:	5454      	strb	r4, [r2, r1]
    4042:	e60b      	b.n	3c5c <CreateAndSendBluetoothPacketsViaUART+0xac>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    4044:	5478      	strb	r0, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    4046:	245d      	movs	r4, #93	; 0x5d
    4048:	1c78      	adds	r0, r7, #1
    404a:	1c8a      	adds	r2, r1, #2
    404c:	5444      	strb	r4, [r0, r1]
    404e:	e619      	b.n	3c84 <CreateAndSendBluetoothPacketsViaUART+0xd4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    4050:	543a      	strb	r2, [r7, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    4052:	245d      	movs	r4, #93	; 0x5d
    4054:	1c7a      	adds	r2, r7, #1
    4056:	1c81      	adds	r1, r0, #2
    4058:	5414      	strb	r4, [r2, r0]
    405a:	e609      	b.n	3c70 <CreateAndSendBluetoothPacketsViaUART+0xc0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    405c:	5478      	strb	r0, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    405e:	245d      	movs	r4, #93	; 0x5d
    4060:	1c78      	adds	r0, r7, #1
    4062:	1c8a      	adds	r2, r1, #2
    4064:	5444      	strb	r4, [r0, r1]
    4066:	e65e      	b.n	3d26 <CreateAndSendBluetoothPacketsViaUART+0x176>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    4068:	54b8      	strb	r0, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    406a:	245d      	movs	r4, #93	; 0x5d
    406c:	1c78      	adds	r0, r7, #1
    406e:	1c91      	adds	r1, r2, #2
    4070:	5484      	strb	r4, [r0, r2]
    4072:	e64e      	b.n	3d12 <CreateAndSendBluetoothPacketsViaUART+0x162>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    4074:	5478      	strb	r0, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    4076:	245d      	movs	r4, #93	; 0x5d
    4078:	1c78      	adds	r0, r7, #1
    407a:	1c8a      	adds	r2, r1, #2
    407c:	5444      	strb	r4, [r0, r1]
    407e:	e63e      	b.n	3cfe <CreateAndSendBluetoothPacketsViaUART+0x14e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    4080:	54b8      	strb	r0, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    4082:	245d      	movs	r4, #93	; 0x5d
    4084:	1c78      	adds	r0, r7, #1
    4086:	1c91      	adds	r1, r2, #2
    4088:	5484      	strb	r4, [r0, r2]
    408a:	e62e      	b.n	3cea <CreateAndSendBluetoothPacketsViaUART+0x13a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    408c:	5478      	strb	r0, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    408e:	245d      	movs	r4, #93	; 0x5d
    4090:	1c78      	adds	r0, r7, #1
    4092:	1c8a      	adds	r2, r1, #2
    4094:	5444      	strb	r4, [r0, r1]
    4096:	e61e      	b.n	3cd6 <CreateAndSendBluetoothPacketsViaUART+0x126>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    4098:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    409a:	205d      	movs	r0, #93	; 0x5d
    409c:	1c7b      	adds	r3, r7, #1
    409e:	1c91      	adds	r1, r2, #2
    40a0:	5498      	strb	r0, [r3, r2]
    40a2:	e60d      	b.n	3cc0 <CreateAndSendBluetoothPacketsViaUART+0x110>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    40a4:	5478      	strb	r0, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    40a6:	245d      	movs	r4, #93	; 0x5d
    40a8:	1c78      	adds	r0, r7, #1
    40aa:	1c8a      	adds	r2, r1, #2
    40ac:	5444      	strb	r4, [r0, r1]
    40ae:	e5fd      	b.n	3cac <CreateAndSendBluetoothPacketsViaUART+0xfc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    40b0:	54b8      	strb	r0, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    40b2:	245d      	movs	r4, #93	; 0x5d
    40b4:	1c78      	adds	r0, r7, #1
    40b6:	1c91      	adds	r1, r2, #2
    40b8:	5484      	strb	r4, [r0, r2]
    40ba:	e5ed      	b.n	3c98 <CreateAndSendBluetoothPacketsViaUART+0xe8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    40bc:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    40be:	1c90      	adds	r0, r2, #2
    40c0:	1c7b      	adds	r3, r7, #1
    40c2:	215d      	movs	r1, #93	; 0x5d
    40c4:	4681      	mov	r9, r0
    40c6:	5499      	strb	r1, [r3, r2]
    40c8:	e675      	b.n	3db6 <CreateAndSendBluetoothPacketsViaUART+0x206>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    40ca:	5478      	strb	r0, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    40cc:	245d      	movs	r4, #93	; 0x5d
    40ce:	1c78      	adds	r0, r7, #1
    40d0:	1c8a      	adds	r2, r1, #2
    40d2:	5444      	strb	r4, [r0, r1]
    40d4:	e664      	b.n	3da0 <CreateAndSendBluetoothPacketsViaUART+0x1f0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    40d6:	54b8      	strb	r0, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    40d8:	245d      	movs	r4, #93	; 0x5d
    40da:	1c78      	adds	r0, r7, #1
    40dc:	1c91      	adds	r1, r2, #2
    40de:	5484      	strb	r4, [r0, r2]
    40e0:	e654      	b.n	3d8c <CreateAndSendBluetoothPacketsViaUART+0x1dc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    40e2:	5478      	strb	r0, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    40e4:	245d      	movs	r4, #93	; 0x5d
    40e6:	1c78      	adds	r0, r7, #1
    40e8:	1c8a      	adds	r2, r1, #2
    40ea:	5444      	strb	r4, [r0, r1]
    40ec:	e644      	b.n	3d78 <CreateAndSendBluetoothPacketsViaUART+0x1c8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    40ee:	54b8      	strb	r0, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    40f0:	245d      	movs	r4, #93	; 0x5d
    40f2:	1c78      	adds	r0, r7, #1
    40f4:	1c91      	adds	r1, r2, #2
    40f6:	5484      	strb	r4, [r0, r2]
    40f8:	e634      	b.n	3d64 <CreateAndSendBluetoothPacketsViaUART+0x1b4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    40fa:	5478      	strb	r0, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    40fc:	245d      	movs	r4, #93	; 0x5d
    40fe:	1c78      	adds	r0, r7, #1
    4100:	1c8a      	adds	r2, r1, #2
    4102:	5444      	strb	r4, [r0, r1]
    4104:	e624      	b.n	3d50 <CreateAndSendBluetoothPacketsViaUART+0x1a0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    4106:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    4108:	205d      	movs	r0, #93	; 0x5d
    410a:	1c7b      	adds	r3, r7, #1
    410c:	1c91      	adds	r1, r2, #2
    410e:	5498      	strb	r0, [r3, r2]
    4110:	e613      	b.n	3d3a <CreateAndSendBluetoothPacketsViaUART+0x18a>
    4112:	46c0      	nop			; (mov r8, r8)
    4114:	1fffe294 	.word	0x1fffe294
    4118:	1fffe338 	.word	0x1fffe338
    411c:	20000208 	.word	0x20000208
    4120:	1ffff4ec 	.word	0x1ffff4ec
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1085
		isystick = (uint16)(thisSV_6DOF_GB_BASIC.systick / 20);
#endif
		break;
	case Q6AG:	
#ifdef COMPUTE_6DOF_GY_KALMAN
		fq = thisSV_6DOF_GY_KALMAN.fqPl;
    4124:	4ec7      	ldr	r6, [pc, #796]	; (4444 <PSP_CNFG_FP_REGISTERS_EXIST+0x444>)
    4126:	6c30      	ldr	r0, [r6, #64]	; 0x40
    4128:	6c71      	ldr	r1, [r6, #68]	; 0x44
    412a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    412c:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    412e:	9002      	str	r0, [sp, #8]
    4130:	9104      	str	r1, [sp, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1087
		flags |= 0x04;
		iOmega[X] = (int16)(thisSV_6DOF_GY_KALMAN.fOmega[X] * 20.0F);
    4132:	6d70      	ldr	r0, [r6, #84]	; 0x54
    4134:	49c4      	ldr	r1, [pc, #784]	; (4448 <PSP_CNFG_FP_REGISTERS_EXIST+0x448>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1085
		isystick = (uint16)(thisSV_6DOF_GB_BASIC.systick / 20);
#endif
		break;
	case Q6AG:	
#ifdef COMPUTE_6DOF_GY_KALMAN
		fq = thisSV_6DOF_GY_KALMAN.fqPl;
    4136:	469b      	mov	fp, r3
    4138:	4690      	mov	r8, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1087
		flags |= 0x04;
		iOmega[X] = (int16)(thisSV_6DOF_GY_KALMAN.fOmega[X] * 20.0F);
    413a:	f7fc fe2b 	bl	d94 <__aeabi_fmul>
    413e:	f7fd f8c9 	bl	12d4 <__aeabi_f2iz>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1088
		iOmega[Y] = (int16)(thisSV_6DOF_GY_KALMAN.fOmega[Y] * 20.0F);
    4142:	49c1      	ldr	r1, [pc, #772]	; (4448 <PSP_CNFG_FP_REGISTERS_EXIST+0x448>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1087
		break;
	case Q6AG:	
#ifdef COMPUTE_6DOF_GY_KALMAN
		fq = thisSV_6DOF_GY_KALMAN.fqPl;
		flags |= 0x04;
		iOmega[X] = (int16)(thisSV_6DOF_GY_KALMAN.fOmega[X] * 20.0F);
    4144:	8020      	strh	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1088
		iOmega[Y] = (int16)(thisSV_6DOF_GY_KALMAN.fOmega[Y] * 20.0F);
    4146:	6db0      	ldr	r0, [r6, #88]	; 0x58
    4148:	f7fc fe24 	bl	d94 <__aeabi_fmul>
    414c:	f7fd f8c2 	bl	12d4 <__aeabi_f2iz>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1089
		iOmega[Z] = (int16)(thisSV_6DOF_GY_KALMAN.fOmega[Z] * 20.0F);
    4150:	49bd      	ldr	r1, [pc, #756]	; (4448 <PSP_CNFG_FP_REGISTERS_EXIST+0x448>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1088
	case Q6AG:	
#ifdef COMPUTE_6DOF_GY_KALMAN
		fq = thisSV_6DOF_GY_KALMAN.fqPl;
		flags |= 0x04;
		iOmega[X] = (int16)(thisSV_6DOF_GY_KALMAN.fOmega[X] * 20.0F);
		iOmega[Y] = (int16)(thisSV_6DOF_GY_KALMAN.fOmega[Y] * 20.0F);
    4152:	8060      	strh	r0, [r4, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1089
		iOmega[Z] = (int16)(thisSV_6DOF_GY_KALMAN.fOmega[Z] * 20.0F);
    4154:	6df0      	ldr	r0, [r6, #92]	; 0x5c
    4156:	f7fc fe1d 	bl	d94 <__aeabi_fmul>
    415a:	f7fd f8bb 	bl	12d4 <__aeabi_f2iz>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1090
		iPhi = (int16) (10.0F * thisSV_6DOF_GY_KALMAN.fPhiPl);
    415e:	49bb      	ldr	r1, [pc, #748]	; (444c <PSP_CNFG_FP_REGISTERS_EXIST+0x44c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1089
#ifdef COMPUTE_6DOF_GY_KALMAN
		fq = thisSV_6DOF_GY_KALMAN.fqPl;
		flags |= 0x04;
		iOmega[X] = (int16)(thisSV_6DOF_GY_KALMAN.fOmega[X] * 20.0F);
		iOmega[Y] = (int16)(thisSV_6DOF_GY_KALMAN.fOmega[Y] * 20.0F);
		iOmega[Z] = (int16)(thisSV_6DOF_GY_KALMAN.fOmega[Z] * 20.0F);
    4160:	80a0      	strh	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1090
		iPhi = (int16) (10.0F * thisSV_6DOF_GY_KALMAN.fPhiPl);
    4162:	6830      	ldr	r0, [r6, #0]
    4164:	f7fc fe16 	bl	d94 <__aeabi_fmul>
    4168:	f7fd f8b4 	bl	12d4 <__aeabi_f2iz>
    416c:	466a      	mov	r2, sp
    416e:	8410      	strh	r0, [r2, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1091
		iThe = (int16) (10.0F * thisSV_6DOF_GY_KALMAN.fThePl);
    4170:	49b6      	ldr	r1, [pc, #728]	; (444c <PSP_CNFG_FP_REGISTERS_EXIST+0x44c>)
    4172:	6870      	ldr	r0, [r6, #4]
    4174:	f7fc fe0e 	bl	d94 <__aeabi_fmul>
    4178:	f7fd f8ac 	bl	12d4 <__aeabi_f2iz>
    417c:	466b      	mov	r3, sp
    417e:	8518      	strh	r0, [r3, #40]	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1092
		iRho = (int16) (10.0F * thisSV_6DOF_GY_KALMAN.fRhoPl);
    4180:	49b2      	ldr	r1, [pc, #712]	; (444c <PSP_CNFG_FP_REGISTERS_EXIST+0x44c>)
    4182:	68f0      	ldr	r0, [r6, #12]
    4184:	f7fc fe06 	bl	d94 <__aeabi_fmul>
    4188:	f7fd f8a4 	bl	12d4 <__aeabi_f2iz>
    418c:	4669      	mov	r1, sp
    418e:	8608      	strh	r0, [r1, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1094
		iDelta = 0;
		isystick = (uint16)(thisSV_6DOF_GY_KALMAN.systick / 20);
    4190:	6e30      	ldr	r0, [r6, #96]	; 0x60
    4192:	2114      	movs	r1, #20
    4194:	f7fc f9d4 	bl	540 <__aeabi_idiv>
    4198:	466a      	mov	r2, sp
    419a:	8710      	strh	r0, [r2, #56]	; 0x38
    419c:	49ac      	ldr	r1, [pc, #688]	; (4450 <PSP_CNFG_FP_REGISTERS_EXIST+0x450>)
    419e:	4640      	mov	r0, r8
    41a0:	f7fc fdf8 	bl	d94 <__aeabi_fmul>
    41a4:	f7fd f896 	bl	12d4 <__aeabi_f2iz>
    41a8:	b280      	uxth	r0, r0
    41aa:	49a9      	ldr	r1, [pc, #676]	; (4450 <PSP_CNFG_FP_REGISTERS_EXIST+0x450>)
    41ac:	4680      	mov	r8, r0
    41ae:	4658      	mov	r0, fp
    41b0:	f7fc fdf0 	bl	d94 <__aeabi_fmul>
    41b4:	f7fd f88e 	bl	12d4 <__aeabi_f2iz>
    41b8:	b280      	uxth	r0, r0
    41ba:	49a5      	ldr	r1, [pc, #660]	; (4450 <PSP_CNFG_FP_REGISTERS_EXIST+0x450>)
    41bc:	4683      	mov	fp, r0
    41be:	9802      	ldr	r0, [sp, #8]
    41c0:	f7fc fde8 	bl	d94 <__aeabi_fmul>
    41c4:	f7fd f886 	bl	12d4 <__aeabi_f2iz>
    41c8:	b280      	uxth	r0, r0
    41ca:	9001      	str	r0, [sp, #4]
    41cc:	49a0      	ldr	r1, [pc, #640]	; (4450 <PSP_CNFG_FP_REGISTERS_EXIST+0x450>)
    41ce:	9804      	ldr	r0, [sp, #16]
    41d0:	f7fc fde0 	bl	d94 <__aeabi_fmul>
    41d4:	f7fd f87e 	bl	12d4 <__aeabi_f2iz>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1093
		iOmega[Y] = (int16)(thisSV_6DOF_GY_KALMAN.fOmega[Y] * 20.0F);
		iOmega[Z] = (int16)(thisSV_6DOF_GY_KALMAN.fOmega[Z] * 20.0F);
		iPhi = (int16) (10.0F * thisSV_6DOF_GY_KALMAN.fPhiPl);
		iThe = (int16) (10.0F * thisSV_6DOF_GY_KALMAN.fThePl);
		iRho = (int16) (10.0F * thisSV_6DOF_GY_KALMAN.fRhoPl);
		iDelta = 0;
    41d8:	2600      	movs	r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1096
		isystick = (uint16)(thisSV_6DOF_GY_KALMAN.systick / 20);
#endif
		break;
    41da:	2314      	movs	r3, #20
    41dc:	9304      	str	r3, [sp, #16]
    41de:	b280      	uxth	r0, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1093
		iOmega[Y] = (int16)(thisSV_6DOF_GY_KALMAN.fOmega[Y] * 20.0F);
		iOmega[Z] = (int16)(thisSV_6DOF_GY_KALMAN.fOmega[Z] * 20.0F);
		iPhi = (int16) (10.0F * thisSV_6DOF_GY_KALMAN.fPhiPl);
		iThe = (int16) (10.0F * thisSV_6DOF_GY_KALMAN.fThePl);
		iRho = (int16) (10.0F * thisSV_6DOF_GY_KALMAN.fRhoPl);
		iDelta = 0;
    41e0:	9602      	str	r6, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1117
		// use the default data already initialized
		break;
	}

	// [32-25]: scale the quaternion (30K = 1.0F) and add to the buffer
	tmpint16 = (int16)(fq.q0 * 30000.0F);
    41e2:	4642      	mov	r2, r8
    41e4:	4669      	mov	r1, sp
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    41e6:	b2d3      	uxtb	r3, r2
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1117
		// use the default data already initialized
		break;
	}

	// [32-25]: scale the quaternion (30K = 1.0F) and add to the buffer
	tmpint16 = (int16)(fq.q0 * 30000.0F);
    41e8:	830a      	strh	r2, [r1, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    41ea:	2b7e      	cmp	r3, #126	; 0x7e
    41ec:	d100      	bne.n	41f0 <PSP_CNFG_FP_REGISTERS_EXIST+0x1f0>
    41ee:	e35e      	b.n	48ae <PSP_CNFG_FP_REGISTERS_EXIST+0x8ae>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    41f0:	464a      	mov	r2, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    41f2:	2b7d      	cmp	r3, #125	; 0x7d
    41f4:	d101      	bne.n	41fa <PSP_CNFG_FP_REGISTERS_EXIST+0x1fa>
    41f6:	f001 f915 	bl	5424 <PSP_CNFG_FP_REGISTERS_EXIST+0x1424>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    41fa:	4649      	mov	r1, r9
    41fc:	3201      	adds	r2, #1
    41fe:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4200:	466b      	mov	r3, sp
    4202:	7e5b      	ldrb	r3, [r3, #25]
    4204:	469c      	mov	ip, r3
    4206:	2b7e      	cmp	r3, #126	; 0x7e
    4208:	d100      	bne.n	420c <PSP_CNFG_FP_REGISTERS_EXIST+0x20c>
    420a:	e35f      	b.n	48cc <PSP_CNFG_FP_REGISTERS_EXIST+0x8cc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    420c:	2b7d      	cmp	r3, #125	; 0x7d
    420e:	d101      	bne.n	4214 <PSP_CNFG_FP_REGISTERS_EXIST+0x214>
    4210:	f001 f937 	bl	5482 <PSP_CNFG_FP_REGISTERS_EXIST+0x1482>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4214:	4666      	mov	r6, ip
    4216:	1c53      	adds	r3, r2, #1
    4218:	54be      	strb	r6, [r7, r2]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1119
	}

	// [32-25]: scale the quaternion (30K = 1.0F) and add to the buffer
	tmpint16 = (int16)(fq.q0 * 30000.0F);
	sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
	tmpint16 = (int16)(fq.q1 * 30000.0F);
    421a:	465a      	mov	r2, fp
    421c:	4669      	mov	r1, sp
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    421e:	b2d6      	uxtb	r6, r2
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1119
	}

	// [32-25]: scale the quaternion (30K = 1.0F) and add to the buffer
	tmpint16 = (int16)(fq.q0 * 30000.0F);
	sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
	tmpint16 = (int16)(fq.q1 * 30000.0F);
    4220:	830a      	strh	r2, [r1, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4222:	2e7e      	cmp	r6, #126	; 0x7e
    4224:	d100      	bne.n	4228 <PSP_CNFG_FP_REGISTERS_EXIST+0x228>
    4226:	e35e      	b.n	48e6 <PSP_CNFG_FP_REGISTERS_EXIST+0x8e6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4228:	2e7d      	cmp	r6, #125	; 0x7d
    422a:	d101      	bne.n	4230 <PSP_CNFG_FP_REGISTERS_EXIST+0x230>
    422c:	f001 f922 	bl	5474 <PSP_CNFG_FP_REGISTERS_EXIST+0x1474>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4230:	1c5a      	adds	r2, r3, #1
    4232:	54fe      	strb	r6, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4234:	466b      	mov	r3, sp
    4236:	7e5b      	ldrb	r3, [r3, #25]
    4238:	469c      	mov	ip, r3
    423a:	2b7e      	cmp	r3, #126	; 0x7e
    423c:	d100      	bne.n	4240 <PSP_CNFG_FP_REGISTERS_EXIST+0x240>
    423e:	e35e      	b.n	48fe <PSP_CNFG_FP_REGISTERS_EXIST+0x8fe>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4240:	2b7d      	cmp	r3, #125	; 0x7d
    4242:	d101      	bne.n	4248 <PSP_CNFG_FP_REGISTERS_EXIST+0x248>
    4244:	f001 f90f 	bl	5466 <PSP_CNFG_FP_REGISTERS_EXIST+0x1466>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4248:	4666      	mov	r6, ip
    424a:	1c53      	adds	r3, r2, #1
    424c:	54be      	strb	r6, [r7, r2]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1121
	// [32-25]: scale the quaternion (30K = 1.0F) and add to the buffer
	tmpint16 = (int16)(fq.q0 * 30000.0F);
	sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
	tmpint16 = (int16)(fq.q1 * 30000.0F);
	sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
	tmpint16 = (int16)(fq.q2 * 30000.0F);
    424e:	9e01      	ldr	r6, [sp, #4]
    4250:	4669      	mov	r1, sp
    4252:	830e      	strh	r6, [r1, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4254:	b2f6      	uxtb	r6, r6
    4256:	2e7e      	cmp	r6, #126	; 0x7e
    4258:	d100      	bne.n	425c <PSP_CNFG_FP_REGISTERS_EXIST+0x25c>
    425a:	e35d      	b.n	4918 <PSP_CNFG_FP_REGISTERS_EXIST+0x918>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    425c:	2e7d      	cmp	r6, #125	; 0x7d
    425e:	d101      	bne.n	4264 <PSP_CNFG_FP_REGISTERS_EXIST+0x264>
    4260:	f001 f8fa 	bl	5458 <PSP_CNFG_FP_REGISTERS_EXIST+0x1458>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4264:	1c5a      	adds	r2, r3, #1
    4266:	54fe      	strb	r6, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4268:	466b      	mov	r3, sp
    426a:	7e5e      	ldrb	r6, [r3, #25]
    426c:	2e7e      	cmp	r6, #126	; 0x7e
    426e:	d100      	bne.n	4272 <PSP_CNFG_FP_REGISTERS_EXIST+0x272>
    4270:	e35d      	b.n	492e <PSP_CNFG_FP_REGISTERS_EXIST+0x92e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4272:	2e7d      	cmp	r6, #125	; 0x7d
    4274:	d101      	bne.n	427a <PSP_CNFG_FP_REGISTERS_EXIST+0x27a>
    4276:	f001 f919 	bl	54ac <PSP_CNFG_FP_REGISTERS_EXIST+0x14ac>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    427a:	1c53      	adds	r3, r2, #1
    427c:	54be      	strb	r6, [r7, r2]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1123
	sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
	tmpint16 = (int16)(fq.q1 * 30000.0F);
	sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
	tmpint16 = (int16)(fq.q2 * 30000.0F);
	sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
	tmpint16 = (int16)(fq.q3 * 30000.0F);
    427e:	466a      	mov	r2, sp
    4280:	8310      	strh	r0, [r2, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4282:	b2c0      	uxtb	r0, r0
    4284:	287e      	cmp	r0, #126	; 0x7e
    4286:	d100      	bne.n	428a <PSP_CNFG_FP_REGISTERS_EXIST+0x28a>
    4288:	e35d      	b.n	4946 <PSP_CNFG_FP_REGISTERS_EXIST+0x946>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    428a:	287d      	cmp	r0, #125	; 0x7d
    428c:	d101      	bne.n	4292 <PSP_CNFG_FP_REGISTERS_EXIST+0x292>
    428e:	f001 f906 	bl	549e <PSP_CNFG_FP_REGISTERS_EXIST+0x149e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4292:	1c5a      	adds	r2, r3, #1
    4294:	54f8      	strb	r0, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4296:	466e      	mov	r6, sp
    4298:	7e73      	ldrb	r3, [r6, #25]
    429a:	2b7e      	cmp	r3, #126	; 0x7e
    429c:	d100      	bne.n	42a0 <PSP_CNFG_FP_REGISTERS_EXIST+0x2a0>
    429e:	e35d      	b.n	495c <PSP_CNFG_FP_REGISTERS_EXIST+0x95c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    42a0:	2b7d      	cmp	r3, #125	; 0x7d
    42a2:	d101      	bne.n	42a8 <PSP_CNFG_FP_REGISTERS_EXIST+0x2a8>
    42a4:	f001 f8f4 	bl	5490 <PSP_CNFG_FP_REGISTERS_EXIST+0x1490>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    42a8:	1c50      	adds	r0, r2, #1
    42aa:	54bb      	strb	r3, [r7, r2]
    42ac:	9904      	ldr	r1, [sp, #16]
    42ae:	183a      	adds	r2, r7, r0
    42b0:	7011      	strb	r1, [r2, #0]
    42b2:	1c7b      	adds	r3, r7, #1
    42b4:	2107      	movs	r1, #7
    42b6:	5419      	strb	r1, [r3, r0]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1143
	// [34]: add the board ID byte
	tmpuint8 = THIS_BOARD_ID;
	sBufAppendItem(sUARTOutputBuf, &iIndex, &tmpuint8, 1);

	// [35]: add the tail byte for the standard packet type 1
	sUARTOutputBuf[iIndex++] = 0x7E;
    42b8:	217e      	movs	r1, #126	; 0x7e
    42ba:	7091      	strb	r1, [r2, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1150
	// ************************************************************************
	// Variable length debug packet type 2
	// currently total size is 0 to 7 equals 8 bytes 
	// ************************************************************************

	if (globals.DebugPacketOn)
    42bc:	4656      	mov	r6, sl
    42be:	7872      	ldrb	r2, [r6, #1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1143
	// [34]: add the board ID byte
	tmpuint8 = THIS_BOARD_ID;
	sBufAppendItem(sUARTOutputBuf, &iIndex, &tmpuint8, 1);

	// [35]: add the tail byte for the standard packet type 1
	sUARTOutputBuf[iIndex++] = 0x7E;
    42c0:	1cc3      	adds	r3, r0, #3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1150
	// ************************************************************************
	// Variable length debug packet type 2
	// currently total size is 0 to 7 equals 8 bytes 
	// ************************************************************************

	if (globals.DebugPacketOn)
    42c2:	2a00      	cmp	r2, #0
    42c4:	d001      	beq.n	42ca <PSP_CNFG_FP_REGISTERS_EXIST+0x2ca>
    42c6:	f000 ffc6 	bl	5256 <PSP_CNFG_FP_REGISTERS_EXIST+0x1256>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1179
	// ************************************************************************
	// Angular Velocity Bluetooth transmit packet type 3
	// total bytes for packet type 2 is range 0 to 13 = 14 bytes
	// ************************************************************************

	if (globals.AngularVelocityPacketOn)
    42ca:	4656      	mov	r6, sl
    42cc:	7832      	ldrb	r2, [r6, #0]
    42ce:	2a00      	cmp	r2, #0
    42d0:	d001      	beq.n	42d6 <PSP_CNFG_FP_REGISTERS_EXIST+0x2d6>
    42d2:	f000 feeb 	bl	50ac <PSP_CNFG_FP_REGISTERS_EXIST+0x10ac>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1209
	// ************************************************************************
	// Roll, Pitch, Compass Euler angles packet type 4
	// total bytes for packet type 4 is range 0 to 13 = 14 bytes
	// ************************************************************************

	if 	(globals.RPCPacketOn)
    42d6:	4651      	mov	r1, sl
    42d8:	788a      	ldrb	r2, [r1, #2]
    42da:	2a00      	cmp	r2, #0
    42dc:	d001      	beq.n	42e2 <PSP_CNFG_FP_REGISTERS_EXIST+0x2e2>
    42de:	f000 fe07 	bl	4ef0 <PSP_CNFG_FP_REGISTERS_EXIST+0xef0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1240
	// Altitude / Temperature packet type 5
	// total bytes for packet type 5 is range 0 to 13 = 14 bytes
	// ************************************************************************

#ifdef COMPUTE_1DOF_P_BASIC
	if (globals.AltPacketOn && globals.iMPL3115Found)
    42e2:	4651      	mov	r1, sl
    42e4:	78ca      	ldrb	r2, [r1, #3]
    42e6:	2a00      	cmp	r2, #0
    42e8:	d005      	beq.n	42f6 <PSP_CNFG_FP_REGISTERS_EXIST+0x2f6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1240 (discriminator 1)
    42ea:	2209      	movs	r2, #9
    42ec:	568a      	ldrsb	r2, [r1, r2]
    42ee:	2a00      	cmp	r2, #0
    42f0:	d001      	beq.n	42f6 <PSP_CNFG_FP_REGISTERS_EXIST+0x2f6>
    42f2:	f001 f981 	bl	55f8 <PSP_CNFG_FP_REGISTERS_EXIST+0x15f8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1276
	// currently total size is 0 to 15 equals 16 bytes 
	// ************************************************************************

#if defined COMPUTE_3DOF_B_BASIC || defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
	// [0]: packet start byte
	sUARTOutputBuf[iIndex++] = 0x7E;
    42f6:	227e      	movs	r2, #126	; 0x7e
    42f8:	54fa      	strb	r2, [r7, r3]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    42fa:	2106      	movs	r1, #6
    42fc:	1c7a      	adds	r2, r7, #1
    42fe:	54d1      	strb	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4300:	4652      	mov	r2, sl
    4302:	7a11      	ldrb	r1, [r2, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4304:	1c98      	adds	r0, r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4306:	297e      	cmp	r1, #126	; 0x7e
    4308:	d101      	bne.n	430e <PSP_CNFG_FP_REGISTERS_EXIST+0x30e>
    430a:	f000 fcf7 	bl	4cfc <PSP_CNFG_FP_REGISTERS_EXIST+0xcfc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    430e:	297d      	cmp	r1, #125	; 0x7d
    4310:	d101      	bne.n	4316 <PSP_CNFG_FP_REGISTERS_EXIST+0x316>
    4312:	f000 fd02 	bl	4d1a <PSP_CNFG_FP_REGISTERS_EXIST+0xd1a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4316:	1cda      	adds	r2, r3, #3
    4318:	5439      	strb	r1, [r7, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    431a:	4c4e      	ldr	r4, [pc, #312]	; (4454 <PSP_CNFG_FP_REGISTERS_EXIST+0x454>)
    431c:	4b4e      	ldr	r3, [pc, #312]	; (4458 <PSP_CNFG_FP_REGISTERS_EXIST+0x458>)
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1284
	tmpuint8 = 0x06;
	sBufAppendItem(sUARTOutputBuf, &iIndex, &tmpuint8, 1);

	// [2]: packet number byte
	sBufAppendItem(sUARTOutputBuf, &iIndex, &(globals.iPacketNumber), 1);
	globals.iPacketNumber++;
    431e:	3101      	adds	r1, #1
    4320:	4650      	mov	r0, sl
    4322:	7201      	strb	r1, [r0, #8]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4324:	5ce1      	ldrb	r1, [r4, r3]
    4326:	297e      	cmp	r1, #126	; 0x7e
    4328:	d101      	bne.n	432e <PSP_CNFG_FP_REGISTERS_EXIST+0x32e>
    432a:	f000 fcdf 	bl	4cec <PSP_CNFG_FP_REGISTERS_EXIST+0xcec>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    432e:	297d      	cmp	r1, #125	; 0x7d
    4330:	d101      	bne.n	4336 <PSP_CNFG_FP_REGISTERS_EXIST+0x336>
    4332:	f000 fceb 	bl	4d0c <PSP_CNFG_FP_REGISTERS_EXIST+0xd0c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4336:	1c53      	adds	r3, r2, #1
    4338:	54b9      	strb	r1, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    433a:	4a48      	ldr	r2, [pc, #288]	; (445c <PSP_CNFG_FP_REGISTERS_EXIST+0x45c>)
    433c:	5ca2      	ldrb	r2, [r4, r2]
    433e:	2a7e      	cmp	r2, #126	; 0x7e
    4340:	d101      	bne.n	4346 <PSP_CNFG_FP_REGISTERS_EXIST+0x346>
    4342:	f000 fcca 	bl	4cda <PSP_CNFG_FP_REGISTERS_EXIST+0xcda>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4346:	2a7d      	cmp	r2, #125	; 0x7d
    4348:	d101      	bne.n	434e <PSP_CNFG_FP_REGISTERS_EXIST+0x34e>
    434a:	f000 fced 	bl	4d28 <PSP_CNFG_FP_REGISTERS_EXIST+0xd28>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    434e:	1c5d      	adds	r5, r3, #1
    4350:	46a8      	mov	r8, r5
    4352:	54fa      	strb	r2, [r7, r3]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1290

	// [4-3]: number of active measurements in the magnetic buffer
	sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&(thisMagBuffer.iMagBufferCount), 2);	
	
	// [6-5]: fit error (%) with resolution 0.1% 
	if (thisMagCal.fFitErrorpc > 3276.7F)
    4354:	4d42      	ldr	r5, [pc, #264]	; (4460 <PSP_CNFG_FP_REGISTERS_EXIST+0x460>)
    4356:	4943      	ldr	r1, [pc, #268]	; (4464 <PSP_CNFG_FP_REGISTERS_EXIST+0x464>)
    4358:	6bae      	ldr	r6, [r5, #56]	; 0x38
    435a:	1c30      	adds	r0, r6, #0
    435c:	f7fc f9b6 	bl	6cc <__aeabi_fcmpgt>
    4360:	2800      	cmp	r0, #0
    4362:	d001      	beq.n	4368 <PSP_CNFG_FP_REGISTERS_EXIST+0x368>
    4364:	f000 fc9a 	bl	4c9c <PSP_CNFG_FP_REGISTERS_EXIST+0xc9c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1293
		tmpint16 = 32767;
	else
		tmpint16 = (int16) (thisMagCal.fFitErrorpc * 10.0F);		
    4368:	1c30      	adds	r0, r6, #0
    436a:	4938      	ldr	r1, [pc, #224]	; (444c <PSP_CNFG_FP_REGISTERS_EXIST+0x44c>)
    436c:	f7fc fd12 	bl	d94 <__aeabi_fmul>
    4370:	f7fc ffb0 	bl	12d4 <__aeabi_f2iz>
    4374:	466e      	mov	r6, sp
    4376:	b280      	uxth	r0, r0
    4378:	8330      	strh	r0, [r6, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    437a:	b2c0      	uxtb	r0, r0
    437c:	287e      	cmp	r0, #126	; 0x7e
    437e:	d101      	bne.n	4384 <PSP_CNFG_FP_REGISTERS_EXIST+0x384>
    4380:	f000 fc94 	bl	4cac <PSP_CNFG_FP_REGISTERS_EXIST+0xcac>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4384:	287d      	cmp	r0, #125	; 0x7d
    4386:	d101      	bne.n	438c <PSP_CNFG_FP_REGISTERS_EXIST+0x38c>
    4388:	f001 f854 	bl	5434 <PSP_CNFG_FP_REGISTERS_EXIST+0x1434>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    438c:	4643      	mov	r3, r8
    438e:	4641      	mov	r1, r8
    4390:	3301      	adds	r3, #1
    4392:	5478      	strb	r0, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4394:	4669      	mov	r1, sp
    4396:	7e4a      	ldrb	r2, [r1, #25]
    4398:	2a7e      	cmp	r2, #126	; 0x7e
    439a:	d101      	bne.n	43a0 <PSP_CNFG_FP_REGISTERS_EXIST+0x3a0>
    439c:	f000 fc94 	bl	4cc8 <PSP_CNFG_FP_REGISTERS_EXIST+0xcc8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    43a0:	2a7d      	cmp	r2, #125	; 0x7d
    43a2:	d101      	bne.n	43a8 <PSP_CNFG_FP_REGISTERS_EXIST+0x3a8>
    43a4:	f001 f850 	bl	5448 <PSP_CNFG_FP_REGISTERS_EXIST+0x1448>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    43a8:	1c58      	adds	r0, r3, #1
    43aa:	4683      	mov	fp, r0
    43ac:	54fa      	strb	r2, [r7, r3]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1297
	else
		tmpint16 = (int16) (thisMagCal.fFitErrorpc * 10.0F);		
	sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);		

	// always calculate magnetic buffer row and column (low overhead and saves warnings)
	k = globals.MagneticPacketID - 10;
    43ae:	4651      	mov	r1, sl
    43b0:	88ce      	ldrh	r6, [r1, #6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1298
	j = k / MAGBUFFSIZEX;
    43b2:	210c      	movs	r1, #12
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1297
	else
		tmpint16 = (int16) (thisMagCal.fFitErrorpc * 10.0F);		
	sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);		

	// always calculate magnetic buffer row and column (low overhead and saves warnings)
	k = globals.MagneticPacketID - 10;
    43b4:	b2b2      	uxth	r2, r6
    43b6:	1c13      	adds	r3, r2, #0
    43b8:	3b0a      	subs	r3, #10
    43ba:	b29b      	uxth	r3, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1298
	j = k / MAGBUFFSIZEX;
    43bc:	b218      	sxth	r0, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1297
	else
		tmpint16 = (int16) (thisMagCal.fFitErrorpc * 10.0F);		
	sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);		

	// always calculate magnetic buffer row and column (low overhead and saves warnings)
	k = globals.MagneticPacketID - 10;
    43be:	4698      	mov	r8, r3
    43c0:	4691      	mov	r9, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1298
	j = k / MAGBUFFSIZEX;
    43c2:	f7fc f8bd 	bl	540 <__aeabi_idiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1299
	i = k - j * MAGBUFFSIZEX;
    43c6:	210c      	movs	r1, #12
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1298
		tmpint16 = (int16) (thisMagCal.fFitErrorpc * 10.0F);		
	sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);		

	// always calculate magnetic buffer row and column (low overhead and saves warnings)
	k = globals.MagneticPacketID - 10;
	j = k / MAGBUFFSIZEX;
    43c8:	b280      	uxth	r0, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1299
	i = k - j * MAGBUFFSIZEX;
    43ca:	4249      	negs	r1, r1
    43cc:	4341      	muls	r1, r0
    43ce:	4441      	add	r1, r8
    43d0:	b289      	uxth	r1, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1306
	// [8-7]: int16: ID of magnetic variable to be transmitted
	// ID 0 to 4 inclusive are magnetic calibration coefficients
	// ID 5 to 9 inclusive are for future expansion
	// ID 10 to (MAGBUFFSIZEX=12) * (MAGBUFFSIZEY=24)-1 or 10 to 10+288-1 are magnetic buffer elements
	// where the convention is used that a negative value indicates empty buffer element (index=-1)
	if ((globals.MagneticPacketID >= 10) && (thisMagBuffer.index[i][j] == -1))
    43d2:	b233      	sxth	r3, r6
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1299
	sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);		

	// always calculate magnetic buffer row and column (low overhead and saves warnings)
	k = globals.MagneticPacketID - 10;
	j = k / MAGBUFFSIZEX;
	i = k - j * MAGBUFFSIZEX;
    43d4:	9105      	str	r1, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1306
	// [8-7]: int16: ID of magnetic variable to be transmitted
	// ID 0 to 4 inclusive are magnetic calibration coefficients
	// ID 5 to 9 inclusive are for future expansion
	// ID 10 to (MAGBUFFSIZEX=12) * (MAGBUFFSIZEY=24)-1 or 10 to 10+288-1 are magnetic buffer elements
	// where the convention is used that a negative value indicates empty buffer element (index=-1)
	if ((globals.MagneticPacketID >= 10) && (thisMagBuffer.index[i][j] == -1))
    43d6:	2b09      	cmp	r3, #9
    43d8:	dd0e      	ble.n	43f8 <PSP_CNFG_FP_REGISTERS_EXIST+0x3f8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1306 (discriminator 1)
    43da:	b20b      	sxth	r3, r1
    43dc:	005a      	lsls	r2, r3, #1
    43de:	4694      	mov	ip, r2
    43e0:	4463      	add	r3, ip
    43e2:	b201      	sxth	r1, r0
    43e4:	00db      	lsls	r3, r3, #3
    43e6:	185b      	adds	r3, r3, r1
    43e8:	33b1      	adds	r3, #177	; 0xb1
    43ea:	33ff      	adds	r3, #255	; 0xff
    43ec:	009b      	lsls	r3, r3, #2
    43ee:	58e3      	ldr	r3, [r4, r3]
    43f0:	3301      	adds	r3, #1
    43f2:	d101      	bne.n	43f8 <PSP_CNFG_FP_REGISTERS_EXIST+0x3f8>
    43f4:	f001 fa1a 	bl	582c <PSP_CNFG_FP_REGISTERS_EXIST+0x182c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1315
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
	}
	else
	{
		// use positive ID unchanged for variable or active magnetic buffer entry
		tmpint16 = globals.MagneticPacketID;
    43f8:	4669      	mov	r1, sp
    43fa:	830e      	strh	r6, [r1, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    43fc:	b2f6      	uxtb	r6, r6
    43fe:	2e7e      	cmp	r6, #126	; 0x7e
    4400:	d101      	bne.n	4406 <PSP_CNFG_FP_REGISTERS_EXIST+0x406>
    4402:	f000 ff94 	bl	532e <PSP_CNFG_FP_REGISTERS_EXIST+0x132e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    4406:	465b      	mov	r3, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4408:	2e7d      	cmp	r6, #125	; 0x7d
    440a:	d101      	bne.n	4410 <PSP_CNFG_FP_REGISTERS_EXIST+0x410>
    440c:	f001 f86f 	bl	54ee <PSP_CNFG_FP_REGISTERS_EXIST+0x14ee>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4410:	465a      	mov	r2, fp
    4412:	3301      	adds	r3, #1
    4414:	54be      	strb	r6, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4416:	466e      	mov	r6, sp
    4418:	7e72      	ldrb	r2, [r6, #25]
    441a:	2a7e      	cmp	r2, #126	; 0x7e
    441c:	d101      	bne.n	4422 <PSP_CNFG_FP_REGISTERS_EXIST+0x422>
    441e:	f000 ff97 	bl	5350 <PSP_CNFG_FP_REGISTERS_EXIST+0x1350>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4422:	2a7d      	cmp	r2, #125	; 0x7d
    4424:	d101      	bne.n	442a <PSP_CNFG_FP_REGISTERS_EXIST+0x42a>
    4426:	f001 f86c 	bl	5502 <PSP_CNFG_FP_REGISTERS_EXIST+0x1502>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    442a:	1c5e      	adds	r6, r3, #1
    442c:	54fa      	strb	r2, [r7, r3]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1322
	}

	// [10-9]: int16: variable 1 to be transmitted this iteration
	// [12-11]: int16: variable 2 to be transmitted this iteration
	// [14-13]: int16: variable 3 to be transmitted this iteration
	switch (globals.MagneticPacketID)
    442e:	4651      	mov	r1, sl
    4430:	88cb      	ldrh	r3, [r1, #6]
    4432:	2b09      	cmp	r3, #9
    4434:	d901      	bls.n	443a <PSP_CNFG_FP_REGISTERS_EXIST+0x43a>
    4436:	f000 ff97 	bl	5368 <PSP_CNFG_FP_REGISTERS_EXIST+0x1368>
    443a:	4a0b      	ldr	r2, [pc, #44]	; (4468 <PSP_CNFG_FP_REGISTERS_EXIST+0x468>)
    443c:	009b      	lsls	r3, r3, #2
    443e:	58d3      	ldr	r3, [r2, r3]
    4440:	469f      	mov	pc, r3
    4442:	46c0      	nop			; (mov r8, r8)
    4444:	1ffffd78 	.word	0x1ffffd78
    4448:	41a00000 	.word	0x41a00000
    444c:	41200000 	.word	0x41200000
    4450:	46ea6000 	.word	0x46ea6000
    4454:	1fffe410 	.word	0x1fffe410
    4458:	00000b56 	.word	0x00000b56
    445c:	00000b57 	.word	0x00000b57
    4460:	1ffff0d4 	.word	0x1ffff0d4
    4464:	454ccb33 	.word	0x454ccb33
    4468:	00015058 	.word	0x00015058
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1355
		tmpint16 = (int16)(thisMagCal.finvW[Z][Z] * 1000.0F);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
		break;
	case 3: 
		// items 1 to 3: off-diagonal soft iron range -32. to +32. encoded with 0.001 resolution
		tmpint16 = (int16)(thisMagCal.finvW[X][Y] * 1000.0F);	
    446c:	49d7      	ldr	r1, [pc, #860]	; (47cc <PSP_CNFG_FP_REGISTERS_EXIST+0x7cc>)
    446e:	6928      	ldr	r0, [r5, #16]
    4470:	f7fc fc90 	bl	d94 <__aeabi_fmul>
    4474:	f7fc ff2e 	bl	12d4 <__aeabi_f2iz>
    4478:	4669      	mov	r1, sp
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    447a:	b2c3      	uxtb	r3, r0
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1355
		tmpint16 = (int16)(thisMagCal.finvW[Z][Z] * 1000.0F);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
		break;
	case 3: 
		// items 1 to 3: off-diagonal soft iron range -32. to +32. encoded with 0.001 resolution
		tmpint16 = (int16)(thisMagCal.finvW[X][Y] * 1000.0F);	
    447c:	8308      	strh	r0, [r1, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    447e:	2b7e      	cmp	r3, #126	; 0x7e
    4480:	d101      	bne.n	4486 <PSP_CNFG_FP_REGISTERS_EXIST+0x486>
    4482:	f001 fabc 	bl	59fe <PSP_CNFG_FP_REGISTERS_EXIST+0x19fe>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4486:	2b7d      	cmp	r3, #125	; 0x7d
    4488:	d101      	bne.n	448e <PSP_CNFG_FP_REGISTERS_EXIST+0x48e>
    448a:	f001 fc1c 	bl	5cc6 <PSP_CNFG_FP_REGISTERS_EXIST+0x1cc6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    448e:	1c72      	adds	r2, r6, #1
    4490:	55bb      	strb	r3, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4492:	466c      	mov	r4, sp
    4494:	7e63      	ldrb	r3, [r4, #25]
    4496:	2b7e      	cmp	r3, #126	; 0x7e
    4498:	d101      	bne.n	449e <PSP_CNFG_FP_REGISTERS_EXIST+0x49e>
    449a:	f001 fb8e 	bl	5bba <PSP_CNFG_FP_REGISTERS_EXIST+0x1bba>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    449e:	2b7d      	cmp	r3, #125	; 0x7d
    44a0:	d101      	bne.n	44a6 <PSP_CNFG_FP_REGISTERS_EXIST+0x4a6>
    44a2:	f001 fc09 	bl	5cb8 <PSP_CNFG_FP_REGISTERS_EXIST+0x1cb8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    44a6:	1c54      	adds	r4, r2, #1
    44a8:	54bb      	strb	r3, [r7, r2]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1357
		break;
	case 3: 
		// items 1 to 3: off-diagonal soft iron range -32. to +32. encoded with 0.001 resolution
		tmpint16 = (int16)(thisMagCal.finvW[X][Y] * 1000.0F);	
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
		tmpint16 = (int16)(thisMagCal.finvW[X][Z] * 1000.0F);
    44aa:	49c8      	ldr	r1, [pc, #800]	; (47cc <PSP_CNFG_FP_REGISTERS_EXIST+0x7cc>)
    44ac:	6968      	ldr	r0, [r5, #20]
    44ae:	f7fc fc71 	bl	d94 <__aeabi_fmul>
    44b2:	f7fc ff0f 	bl	12d4 <__aeabi_f2iz>
    44b6:	466e      	mov	r6, sp
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    44b8:	b2c3      	uxtb	r3, r0
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1357
		break;
	case 3: 
		// items 1 to 3: off-diagonal soft iron range -32. to +32. encoded with 0.001 resolution
		tmpint16 = (int16)(thisMagCal.finvW[X][Y] * 1000.0F);	
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
		tmpint16 = (int16)(thisMagCal.finvW[X][Z] * 1000.0F);
    44ba:	8330      	strh	r0, [r6, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    44bc:	2b7e      	cmp	r3, #126	; 0x7e
    44be:	d101      	bne.n	44c4 <PSP_CNFG_FP_REGISTERS_EXIST+0x4c4>
    44c0:	f001 fb73 	bl	5baa <PSP_CNFG_FP_REGISTERS_EXIST+0x1baa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    44c4:	2b7d      	cmp	r3, #125	; 0x7d
    44c6:	d101      	bne.n	44cc <PSP_CNFG_FP_REGISTERS_EXIST+0x4cc>
    44c8:	f001 fbef 	bl	5caa <PSP_CNFG_FP_REGISTERS_EXIST+0x1caa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    44cc:	1c62      	adds	r2, r4, #1
    44ce:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    44d0:	4668      	mov	r0, sp
    44d2:	7e43      	ldrb	r3, [r0, #25]
    44d4:	2b7e      	cmp	r3, #126	; 0x7e
    44d6:	d101      	bne.n	44dc <PSP_CNFG_FP_REGISTERS_EXIST+0x4dc>
    44d8:	f001 fb5f 	bl	5b9a <PSP_CNFG_FP_REGISTERS_EXIST+0x1b9a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    44dc:	2b7d      	cmp	r3, #125	; 0x7d
    44de:	d101      	bne.n	44e4 <PSP_CNFG_FP_REGISTERS_EXIST+0x4e4>
    44e0:	f001 fbdc 	bl	5c9c <PSP_CNFG_FP_REGISTERS_EXIST+0x1c9c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    44e4:	1c54      	adds	r4, r2, #1
    44e6:	54bb      	strb	r3, [r7, r2]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1359
		// items 1 to 3: off-diagonal soft iron range -32. to +32. encoded with 0.001 resolution
		tmpint16 = (int16)(thisMagCal.finvW[X][Y] * 1000.0F);	
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
		tmpint16 = (int16)(thisMagCal.finvW[X][Z] * 1000.0F);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
		tmpint16 = (int16)(thisMagCal.finvW[Y][Z] * 1000.0F);
    44e8:	6a28      	ldr	r0, [r5, #32]
    44ea:	49b8      	ldr	r1, [pc, #736]	; (47cc <PSP_CNFG_FP_REGISTERS_EXIST+0x7cc>)
    44ec:	f7fc fc52 	bl	d94 <__aeabi_fmul>
    44f0:	f7fc fef0 	bl	12d4 <__aeabi_f2iz>
    44f4:	4669      	mov	r1, sp
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    44f6:	b2c3      	uxtb	r3, r0
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1359
		// items 1 to 3: off-diagonal soft iron range -32. to +32. encoded with 0.001 resolution
		tmpint16 = (int16)(thisMagCal.finvW[X][Y] * 1000.0F);	
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
		tmpint16 = (int16)(thisMagCal.finvW[X][Z] * 1000.0F);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
		tmpint16 = (int16)(thisMagCal.finvW[Y][Z] * 1000.0F);
    44f8:	8308      	strh	r0, [r1, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    44fa:	2b7e      	cmp	r3, #126	; 0x7e
    44fc:	d101      	bne.n	4502 <PSP_CNFG_FP_REGISTERS_EXIST+0x502>
    44fe:	f001 f9b0 	bl	5862 <PSP_CNFG_FP_REGISTERS_EXIST+0x1862>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4502:	2b7d      	cmp	r3, #125	; 0x7d
    4504:	d101      	bne.n	450a <PSP_CNFG_FP_REGISTERS_EXIST+0x50a>
    4506:	f001 fa15 	bl	5934 <PSP_CNFG_FP_REGISTERS_EXIST+0x1934>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    450a:	1c61      	adds	r1, r4, #1
    450c:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    450e:	466b      	mov	r3, sp
    4510:	7e5a      	ldrb	r2, [r3, #25]
    4512:	2a7e      	cmp	r2, #126	; 0x7e
    4514:	d100      	bne.n	4518 <PSP_CNFG_FP_REGISTERS_EXIST+0x518>
    4516:	e07d      	b.n	4614 <PSP_CNFG_FP_REGISTERS_EXIST+0x614>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4518:	2a7d      	cmp	r2, #125	; 0x7d
    451a:	d100      	bne.n	451e <PSP_CNFG_FP_REGISTERS_EXIST+0x51e>
    451c:	e111      	b.n	4742 <PSP_CNFG_FP_REGISTERS_EXIST+0x742>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    451e:	1c4b      	adds	r3, r1, #1
    4520:	547a      	strb	r2, [r7, r1]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1383
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&(thisMagBuffer.iBpFast[Z][i][j]), 2);
		break;
	}

	// wrap the variable ID back to zero if necessary
	globals.MagneticPacketID++;
    4522:	4650      	mov	r0, sl
    4524:	88c2      	ldrh	r2, [r0, #6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1384
	if (globals.MagneticPacketID >= (10 + MAGBUFFSIZEX * MAGBUFFSIZEY))
    4526:	212a      	movs	r1, #42	; 0x2a
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1383
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&(thisMagBuffer.iBpFast[Z][i][j]), 2);
		break;
	}

	// wrap the variable ID back to zero if necessary
	globals.MagneticPacketID++;
    4528:	3201      	adds	r2, #1
    452a:	b292      	uxth	r2, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1384
	if (globals.MagneticPacketID >= (10 + MAGBUFFSIZEX * MAGBUFFSIZEY))
    452c:	b210      	sxth	r0, r2
    452e:	31ff      	adds	r1, #255	; 0xff
    4530:	4288      	cmp	r0, r1
    4532:	dd01      	ble.n	4538 <PSP_CNFG_FP_REGISTERS_EXIST+0x538>
    4534:	f000 fc00 	bl	4d38 <PSP_CNFG_FP_REGISTERS_EXIST+0xd38>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1383
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&(thisMagBuffer.iBpFast[Z][i][j]), 2);
		break;
	}

	// wrap the variable ID back to zero if necessary
	globals.MagneticPacketID++;
    4538:	4651      	mov	r1, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1388
	if (globals.MagneticPacketID >= (10 + MAGBUFFSIZEX * MAGBUFFSIZEY))
		globals.MagneticPacketID = 0;

	// [15]: add the tail byte for the magnetic packet type 6
	sUARTOutputBuf[iIndex++] = 0x7E;
    453a:	207e      	movs	r0, #126	; 0x7e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1383
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&(thisMagBuffer.iBpFast[Z][i][j]), 2);
		break;
	}

	// wrap the variable ID back to zero if necessary
	globals.MagneticPacketID++;
    453c:	80ca      	strh	r2, [r1, #6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1388
	if (globals.MagneticPacketID >= (10 + MAGBUFFSIZEX * MAGBUFFSIZEY))
		globals.MagneticPacketID = 0;

	// [15]: add the tail byte for the magnetic packet type 6
	sUARTOutputBuf[iIndex++] = 0x7E;
    453e:	54f8      	strb	r0, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1398
	// total bytes for packet type 7 is range 0 to 21 inclusive = 22 bytes
	// ************************************************************************

#if defined COMPUTE_6DOF_GY_KALMAN || defined COMPUTE_9DOF_GBY_KALMAN
	// only send this packet if a Kalman filter quaternion is requested
	if ((globals.QuaternionPacketType == Q6AG) || (globals.QuaternionPacketType == Q9))
    4540:	4655      	mov	r5, sl
    4542:	7929      	ldrb	r1, [r5, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1388
	globals.MagneticPacketID++;
	if (globals.MagneticPacketID >= (10 + MAGBUFFSIZEX * MAGBUFFSIZEY))
		globals.MagneticPacketID = 0;

	// [15]: add the tail byte for the magnetic packet type 6
	sUARTOutputBuf[iIndex++] = 0x7E;
    4544:	1c5a      	adds	r2, r3, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1398
	// total bytes for packet type 7 is range 0 to 21 inclusive = 22 bytes
	// ************************************************************************

#if defined COMPUTE_6DOF_GY_KALMAN || defined COMPUTE_9DOF_GBY_KALMAN
	// only send this packet if a Kalman filter quaternion is requested
	if ((globals.QuaternionPacketType == Q6AG) || (globals.QuaternionPacketType == Q9))
    4546:	1f0c      	subs	r4, r1, #4
    4548:	2c01      	cmp	r4, #1
    454a:	d801      	bhi.n	4550 <PSP_CNFG_FP_REGISTERS_EXIST+0x550>
    454c:	f000 fc01 	bl	4d52 <PSP_CNFG_FP_REGISTERS_EXIST+0xd52>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1503
	// the final iIndex++ gives the number of bytes to transmit
	// which is one more than the last index in the buffer.
	// this function is non-blocking
	// ************************************************************************

	UART_SendBlock(DeviceDataPtr, sUARTOutputBuf, iIndex);
    4550:	b292      	uxth	r2, r2
    4552:	9803      	ldr	r0, [sp, #12]
    4554:	1c39      	adds	r1, r7, #0
    4556:	f00e fd15 	bl	12f84 <UART_SendBlock>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1506

	return;
}
    455a:	b013      	add	sp, #76	; 0x4c
    455c:	bc3c      	pop	{r2, r3, r4, r5}
    455e:	4690      	mov	r8, r2
    4560:	4699      	mov	r9, r3
    4562:	46a2      	mov	sl, r4
    4564:	46ab      	mov	fp, r5
    4566:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1346
		tmpint16 = (int16)(thisMagCal.fV[Z] * 10.0F);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
		break;			
	case 2:
		// items 1 to 3: diagonal soft iron range -32. to +32. encoded with 0.001 resolution
		tmpint16 = (int16)(thisMagCal.finvW[X][X] * 1000.0F);
    4568:	4998      	ldr	r1, [pc, #608]	; (47cc <PSP_CNFG_FP_REGISTERS_EXIST+0x7cc>)
    456a:	68e8      	ldr	r0, [r5, #12]
    456c:	f7fc fc12 	bl	d94 <__aeabi_fmul>
    4570:	f7fc feb0 	bl	12d4 <__aeabi_f2iz>
    4574:	466c      	mov	r4, sp
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4576:	b2c3      	uxtb	r3, r0
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1346
		tmpint16 = (int16)(thisMagCal.fV[Z] * 10.0F);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
		break;			
	case 2:
		// items 1 to 3: diagonal soft iron range -32. to +32. encoded with 0.001 resolution
		tmpint16 = (int16)(thisMagCal.finvW[X][X] * 1000.0F);
    4578:	8320      	strh	r0, [r4, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    457a:	2b7e      	cmp	r3, #126	; 0x7e
    457c:	d101      	bne.n	4582 <PSP_CNFG_FP_REGISTERS_EXIST+0x582>
    457e:	f001 fb04 	bl	5b8a <PSP_CNFG_FP_REGISTERS_EXIST+0x1b8a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4582:	2b7d      	cmp	r3, #125	; 0x7d
    4584:	d101      	bne.n	458a <PSP_CNFG_FP_REGISTERS_EXIST+0x58a>
    4586:	f001 fb82 	bl	5c8e <PSP_CNFG_FP_REGISTERS_EXIST+0x1c8e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    458a:	1c72      	adds	r2, r6, #1
    458c:	55bb      	strb	r3, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    458e:	466e      	mov	r6, sp
    4590:	7e73      	ldrb	r3, [r6, #25]
    4592:	2b7e      	cmp	r3, #126	; 0x7e
    4594:	d101      	bne.n	459a <PSP_CNFG_FP_REGISTERS_EXIST+0x59a>
    4596:	f001 faf0 	bl	5b7a <PSP_CNFG_FP_REGISTERS_EXIST+0x1b7a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    459a:	2b7d      	cmp	r3, #125	; 0x7d
    459c:	d101      	bne.n	45a2 <PSP_CNFG_FP_REGISTERS_EXIST+0x5a2>
    459e:	f001 fb53 	bl	5c48 <PSP_CNFG_FP_REGISTERS_EXIST+0x1c48>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    45a2:	1c54      	adds	r4, r2, #1
    45a4:	54bb      	strb	r3, [r7, r2]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1348
		break;			
	case 2:
		// items 1 to 3: diagonal soft iron range -32. to +32. encoded with 0.001 resolution
		tmpint16 = (int16)(thisMagCal.finvW[X][X] * 1000.0F);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
		tmpint16 = (int16)(thisMagCal.finvW[Y][Y] * 1000.0F);
    45a6:	4989      	ldr	r1, [pc, #548]	; (47cc <PSP_CNFG_FP_REGISTERS_EXIST+0x7cc>)
    45a8:	69e8      	ldr	r0, [r5, #28]
    45aa:	f7fc fbf3 	bl	d94 <__aeabi_fmul>
    45ae:	f7fc fe91 	bl	12d4 <__aeabi_f2iz>
    45b2:	4669      	mov	r1, sp
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    45b4:	b2c3      	uxtb	r3, r0
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1348
		break;			
	case 2:
		// items 1 to 3: diagonal soft iron range -32. to +32. encoded with 0.001 resolution
		tmpint16 = (int16)(thisMagCal.finvW[X][X] * 1000.0F);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
		tmpint16 = (int16)(thisMagCal.finvW[Y][Y] * 1000.0F);
    45b6:	8308      	strh	r0, [r1, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    45b8:	2b7e      	cmp	r3, #126	; 0x7e
    45ba:	d101      	bne.n	45c0 <PSP_CNFG_FP_REGISTERS_EXIST+0x5c0>
    45bc:	f001 fad5 	bl	5b6a <PSP_CNFG_FP_REGISTERS_EXIST+0x1b6a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    45c0:	2b7d      	cmp	r3, #125	; 0x7d
    45c2:	d101      	bne.n	45c8 <PSP_CNFG_FP_REGISTERS_EXIST+0x5c8>
    45c4:	f001 fb39 	bl	5c3a <PSP_CNFG_FP_REGISTERS_EXIST+0x1c3a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    45c8:	1c62      	adds	r2, r4, #1
    45ca:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    45cc:	466c      	mov	r4, sp
    45ce:	7e63      	ldrb	r3, [r4, #25]
    45d0:	2b7e      	cmp	r3, #126	; 0x7e
    45d2:	d101      	bne.n	45d8 <PSP_CNFG_FP_REGISTERS_EXIST+0x5d8>
    45d4:	f001 fac1 	bl	5b5a <PSP_CNFG_FP_REGISTERS_EXIST+0x1b5a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    45d8:	2b7d      	cmp	r3, #125	; 0x7d
    45da:	d101      	bne.n	45e0 <PSP_CNFG_FP_REGISTERS_EXIST+0x5e0>
    45dc:	f001 fb26 	bl	5c2c <PSP_CNFG_FP_REGISTERS_EXIST+0x1c2c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    45e0:	1c54      	adds	r4, r2, #1
    45e2:	54bb      	strb	r3, [r7, r2]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1350
		// items 1 to 3: diagonal soft iron range -32. to +32. encoded with 0.001 resolution
		tmpint16 = (int16)(thisMagCal.finvW[X][X] * 1000.0F);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
		tmpint16 = (int16)(thisMagCal.finvW[Y][Y] * 1000.0F);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
		tmpint16 = (int16)(thisMagCal.finvW[Z][Z] * 1000.0F);
    45e4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    45e6:	4979      	ldr	r1, [pc, #484]	; (47cc <PSP_CNFG_FP_REGISTERS_EXIST+0x7cc>)
    45e8:	f7fc fbd4 	bl	d94 <__aeabi_fmul>
    45ec:	f7fc fe72 	bl	12d4 <__aeabi_f2iz>
    45f0:	466d      	mov	r5, sp
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    45f2:	b2c3      	uxtb	r3, r0
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1350
		// items 1 to 3: diagonal soft iron range -32. to +32. encoded with 0.001 resolution
		tmpint16 = (int16)(thisMagCal.finvW[X][X] * 1000.0F);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
		tmpint16 = (int16)(thisMagCal.finvW[Y][Y] * 1000.0F);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
		tmpint16 = (int16)(thisMagCal.finvW[Z][Z] * 1000.0F);
    45f4:	8328      	strh	r0, [r5, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    45f6:	2b7e      	cmp	r3, #126	; 0x7e
    45f8:	d101      	bne.n	45fe <PSP_CNFG_FP_REGISTERS_EXIST+0x5fe>
    45fa:	f001 faa6 	bl	5b4a <PSP_CNFG_FP_REGISTERS_EXIST+0x1b4a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    45fe:	2b7d      	cmp	r3, #125	; 0x7d
    4600:	d101      	bne.n	4606 <PSP_CNFG_FP_REGISTERS_EXIST+0x606>
    4602:	f001 fb0c 	bl	5c1e <PSP_CNFG_FP_REGISTERS_EXIST+0x1c1e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4606:	1c61      	adds	r1, r4, #1
    4608:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    460a:	466e      	mov	r6, sp
    460c:	7e72      	ldrb	r2, [r6, #25]
    460e:	2a7e      	cmp	r2, #126	; 0x7e
    4610:	d000      	beq.n	4614 <PSP_CNFG_FP_REGISTERS_EXIST+0x614>
    4612:	e781      	b.n	4518 <PSP_CNFG_FP_REGISTERS_EXIST+0x518>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    4614:	237d      	movs	r3, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    4616:	1c7a      	adds	r2, r7, #1
    4618:	205e      	movs	r0, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    461a:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    461c:	1c8b      	adds	r3, r1, #2
    461e:	5450      	strb	r0, [r2, r1]
    4620:	e77f      	b.n	4522 <PSP_CNFG_FP_REGISTERS_EXIST+0x522>
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1337
		tmpint16 = iDelta;
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
		break;
	case 1:
		// items 1 to 3: hard iron components range -3276uT to +3276uT encoded with 0.1uT resolution
		tmpint16 = (int16)(thisMagCal.fV[X] * 10.0F);
    4622:	496b      	ldr	r1, [pc, #428]	; (47d0 <PSP_CNFG_FP_REGISTERS_EXIST+0x7d0>)
    4624:	6828      	ldr	r0, [r5, #0]
    4626:	f7fc fbb5 	bl	d94 <__aeabi_fmul>
    462a:	f7fc fe53 	bl	12d4 <__aeabi_f2iz>
    462e:	4669      	mov	r1, sp
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4630:	b2c3      	uxtb	r3, r0
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1337
		tmpint16 = iDelta;
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
		break;
	case 1:
		// items 1 to 3: hard iron components range -3276uT to +3276uT encoded with 0.1uT resolution
		tmpint16 = (int16)(thisMagCal.fV[X] * 10.0F);
    4632:	8308      	strh	r0, [r1, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4634:	2b7e      	cmp	r3, #126	; 0x7e
    4636:	d101      	bne.n	463c <PSP_CNFG_FP_REGISTERS_EXIST+0x63c>
    4638:	f001 fa7f 	bl	5b3a <PSP_CNFG_FP_REGISTERS_EXIST+0x1b3a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    463c:	2b7d      	cmp	r3, #125	; 0x7d
    463e:	d101      	bne.n	4644 <PSP_CNFG_FP_REGISTERS_EXIST+0x644>
    4640:	f001 fb1e 	bl	5c80 <PSP_CNFG_FP_REGISTERS_EXIST+0x1c80>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4644:	1c72      	adds	r2, r6, #1
    4646:	55bb      	strb	r3, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4648:	466c      	mov	r4, sp
    464a:	7e63      	ldrb	r3, [r4, #25]
    464c:	2b7e      	cmp	r3, #126	; 0x7e
    464e:	d101      	bne.n	4654 <PSP_CNFG_FP_REGISTERS_EXIST+0x654>
    4650:	f001 fa6b 	bl	5b2a <PSP_CNFG_FP_REGISTERS_EXIST+0x1b2a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4654:	2b7d      	cmp	r3, #125	; 0x7d
    4656:	d101      	bne.n	465c <PSP_CNFG_FP_REGISTERS_EXIST+0x65c>
    4658:	f001 fb0b 	bl	5c72 <PSP_CNFG_FP_REGISTERS_EXIST+0x1c72>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    465c:	1c54      	adds	r4, r2, #1
    465e:	54bb      	strb	r3, [r7, r2]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1339
		break;
	case 1:
		// items 1 to 3: hard iron components range -3276uT to +3276uT encoded with 0.1uT resolution
		tmpint16 = (int16)(thisMagCal.fV[X] * 10.0F);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
		tmpint16 = (int16)(thisMagCal.fV[Y] * 10.0F);
    4660:	495b      	ldr	r1, [pc, #364]	; (47d0 <PSP_CNFG_FP_REGISTERS_EXIST+0x7d0>)
    4662:	6868      	ldr	r0, [r5, #4]
    4664:	f7fc fb96 	bl	d94 <__aeabi_fmul>
    4668:	f7fc fe34 	bl	12d4 <__aeabi_f2iz>
    466c:	466e      	mov	r6, sp
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    466e:	b2c3      	uxtb	r3, r0
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1339
		break;
	case 1:
		// items 1 to 3: hard iron components range -3276uT to +3276uT encoded with 0.1uT resolution
		tmpint16 = (int16)(thisMagCal.fV[X] * 10.0F);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
		tmpint16 = (int16)(thisMagCal.fV[Y] * 10.0F);
    4670:	8330      	strh	r0, [r6, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4672:	2b7e      	cmp	r3, #126	; 0x7e
    4674:	d101      	bne.n	467a <PSP_CNFG_FP_REGISTERS_EXIST+0x67a>
    4676:	f001 fa50 	bl	5b1a <PSP_CNFG_FP_REGISTERS_EXIST+0x1b1a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    467a:	2b7d      	cmp	r3, #125	; 0x7d
    467c:	d101      	bne.n	4682 <PSP_CNFG_FP_REGISTERS_EXIST+0x682>
    467e:	f001 faf1 	bl	5c64 <PSP_CNFG_FP_REGISTERS_EXIST+0x1c64>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4682:	1c62      	adds	r2, r4, #1
    4684:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4686:	4668      	mov	r0, sp
    4688:	7e43      	ldrb	r3, [r0, #25]
    468a:	2b7e      	cmp	r3, #126	; 0x7e
    468c:	d101      	bne.n	4692 <PSP_CNFG_FP_REGISTERS_EXIST+0x692>
    468e:	f001 fa3c 	bl	5b0a <PSP_CNFG_FP_REGISTERS_EXIST+0x1b0a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4692:	2b7d      	cmp	r3, #125	; 0x7d
    4694:	d101      	bne.n	469a <PSP_CNFG_FP_REGISTERS_EXIST+0x69a>
    4696:	f001 fade 	bl	5c56 <PSP_CNFG_FP_REGISTERS_EXIST+0x1c56>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    469a:	1c54      	adds	r4, r2, #1
    469c:	54bb      	strb	r3, [r7, r2]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1341
		// items 1 to 3: hard iron components range -3276uT to +3276uT encoded with 0.1uT resolution
		tmpint16 = (int16)(thisMagCal.fV[X] * 10.0F);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
		tmpint16 = (int16)(thisMagCal.fV[Y] * 10.0F);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);		
		tmpint16 = (int16)(thisMagCal.fV[Z] * 10.0F);
    469e:	68a8      	ldr	r0, [r5, #8]
    46a0:	494b      	ldr	r1, [pc, #300]	; (47d0 <PSP_CNFG_FP_REGISTERS_EXIST+0x7d0>)
    46a2:	e723      	b.n	44ec <PSP_CNFG_FP_REGISTERS_EXIST+0x4ec>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1326
	// [14-13]: int16: variable 3 to be transmitted this iteration
	switch (globals.MagneticPacketID)
	{
	case 0:	
		// item 1: currently unused
		tmpint16 = 0;			
    46a4:	2300      	movs	r3, #0
    46a6:	466a      	mov	r2, sp
    46a8:	8313      	strh	r3, [r2, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    46aa:	2b7e      	cmp	r3, #126	; 0x7e
    46ac:	d101      	bne.n	46b2 <PSP_CNFG_FP_REGISTERS_EXIST+0x6b2>
    46ae:	f001 fa24 	bl	5afa <PSP_CNFG_FP_REGISTERS_EXIST+0x1afa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    46b2:	2b7d      	cmp	r3, #125	; 0x7d
    46b4:	d101      	bne.n	46ba <PSP_CNFG_FP_REGISTERS_EXIST+0x6ba>
    46b6:	f001 fb5c 	bl	5d72 <PSP_CNFG_FP_REGISTERS_EXIST+0x1d72>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    46ba:	1c72      	adds	r2, r6, #1
    46bc:	19be      	adds	r6, r7, r6
    46be:	7033      	strb	r3, [r6, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    46c0:	466c      	mov	r4, sp
    46c2:	7e63      	ldrb	r3, [r4, #25]
    46c4:	2b7e      	cmp	r3, #126	; 0x7e
    46c6:	d101      	bne.n	46cc <PSP_CNFG_FP_REGISTERS_EXIST+0x6cc>
    46c8:	f001 fa0f 	bl	5aea <PSP_CNFG_FP_REGISTERS_EXIST+0x1aea>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    46cc:	2b7d      	cmp	r3, #125	; 0x7d
    46ce:	d101      	bne.n	46d4 <PSP_CNFG_FP_REGISTERS_EXIST+0x6d4>
    46d0:	f001 fb48 	bl	5d64 <PSP_CNFG_FP_REGISTERS_EXIST+0x1d64>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    46d4:	1c54      	adds	r4, r2, #1
    46d6:	54bb      	strb	r3, [r7, r2]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1329
	case 0:	
		// item 1: currently unused
		tmpint16 = 0;			
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);		
		// item 2: geomagnetic field strength with resolution 0.1uT
		tmpint16 = (int16)(thisMagCal.fB * 10.0F);
    46d8:	6b28      	ldr	r0, [r5, #48]	; 0x30
    46da:	493d      	ldr	r1, [pc, #244]	; (47d0 <PSP_CNFG_FP_REGISTERS_EXIST+0x7d0>)
    46dc:	f7fc fb5a 	bl	d94 <__aeabi_fmul>
    46e0:	f7fc fdf8 	bl	12d4 <__aeabi_f2iz>
    46e4:	466d      	mov	r5, sp
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    46e6:	b2c3      	uxtb	r3, r0
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1329
	case 0:	
		// item 1: currently unused
		tmpint16 = 0;			
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);		
		// item 2: geomagnetic field strength with resolution 0.1uT
		tmpint16 = (int16)(thisMagCal.fB * 10.0F);
    46e8:	8328      	strh	r0, [r5, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    46ea:	2b7e      	cmp	r3, #126	; 0x7e
    46ec:	d101      	bne.n	46f2 <PSP_CNFG_FP_REGISTERS_EXIST+0x6f2>
    46ee:	f001 f9f4 	bl	5ada <PSP_CNFG_FP_REGISTERS_EXIST+0x1ada>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    46f2:	2b7d      	cmp	r3, #125	; 0x7d
    46f4:	d101      	bne.n	46fa <PSP_CNFG_FP_REGISTERS_EXIST+0x6fa>
    46f6:	f001 fb2e 	bl	5d56 <PSP_CNFG_FP_REGISTERS_EXIST+0x1d56>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    46fa:	1c61      	adds	r1, r4, #1
    46fc:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    46fe:	466e      	mov	r6, sp
    4700:	7e73      	ldrb	r3, [r6, #25]
    4702:	2b7e      	cmp	r3, #126	; 0x7e
    4704:	d101      	bne.n	470a <PSP_CNFG_FP_REGISTERS_EXIST+0x70a>
    4706:	f001 f9e0 	bl	5aca <PSP_CNFG_FP_REGISTERS_EXIST+0x1aca>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    470a:	2b7d      	cmp	r3, #125	; 0x7d
    470c:	d101      	bne.n	4712 <PSP_CNFG_FP_REGISTERS_EXIST+0x712>
    470e:	f001 fb1b 	bl	5d48 <PSP_CNFG_FP_REGISTERS_EXIST+0x1d48>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4712:	1c4a      	adds	r2, r1, #1
    4714:	547b      	strb	r3, [r7, r1]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1332
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);		
		// item 2: geomagnetic field strength with resolution 0.1uT
		tmpint16 = (int16)(thisMagCal.fB * 10.0F);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
		// item 3: magnetic inclination angle with resolution 0.1 deg	
		tmpint16 = iDelta;
    4716:	9c02      	ldr	r4, [sp, #8]
    4718:	4668      	mov	r0, sp
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    471a:	b2e3      	uxtb	r3, r4
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1332
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);		
		// item 2: geomagnetic field strength with resolution 0.1uT
		tmpint16 = (int16)(thisMagCal.fB * 10.0F);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
		// item 3: magnetic inclination angle with resolution 0.1 deg	
		tmpint16 = iDelta;
    471c:	8304      	strh	r4, [r0, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    471e:	2b7e      	cmp	r3, #126	; 0x7e
    4720:	d101      	bne.n	4726 <PSP_CNFG_FP_REGISTERS_EXIST+0x726>
    4722:	f001 f9ca 	bl	5aba <PSP_CNFG_FP_REGISTERS_EXIST+0x1aba>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4726:	2b7d      	cmp	r3, #125	; 0x7d
    4728:	d101      	bne.n	472e <PSP_CNFG_FP_REGISTERS_EXIST+0x72e>
    472a:	f001 fb40 	bl	5dae <PSP_CNFG_FP_REGISTERS_EXIST+0x1dae>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    472e:	1c51      	adds	r1, r2, #1
    4730:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4732:	466d      	mov	r5, sp
    4734:	7e6a      	ldrb	r2, [r5, #25]
    4736:	2a7e      	cmp	r2, #126	; 0x7e
    4738:	d100      	bne.n	473c <PSP_CNFG_FP_REGISTERS_EXIST+0x73c>
    473a:	e76b      	b.n	4614 <PSP_CNFG_FP_REGISTERS_EXIST+0x614>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    473c:	2a7d      	cmp	r2, #125	; 0x7d
    473e:	d000      	beq.n	4742 <PSP_CNFG_FP_REGISTERS_EXIST+0x742>
    4740:	e6ed      	b.n	451e <PSP_CNFG_FP_REGISTERS_EXIST+0x51e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
		{
			pDest[(*pIndex)++] = 0x7D;
    4742:	547a      	strb	r2, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    4744:	205d      	movs	r0, #93	; 0x5d
    4746:	1c7a      	adds	r2, r7, #1
    4748:	1c8b      	adds	r3, r1, #2
    474a:	5450      	strb	r0, [r2, r1]
    474c:	e6e9      	b.n	4522 <PSP_CNFG_FP_REGISTERS_EXIST+0x522>
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1369
	case 6:		
	case 7:		
	case 8:		
	case 9:		
		// cases 4 to 9 inclusive are for future expansion so transmit zeroes for now
		tmpint16 = 0;		
    474e:	2300      	movs	r3, #0
    4750:	466c      	mov	r4, sp
    4752:	8323      	strh	r3, [r4, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4754:	2b7e      	cmp	r3, #126	; 0x7e
    4756:	d101      	bne.n	475c <PSP_CNFG_FP_REGISTERS_EXIST+0x75c>
    4758:	f001 f9a7 	bl	5aaa <PSP_CNFG_FP_REGISTERS_EXIST+0x1aaa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    475c:	2b7d      	cmp	r3, #125	; 0x7d
    475e:	d101      	bne.n	4764 <PSP_CNFG_FP_REGISTERS_EXIST+0x764>
    4760:	f001 fb1d 	bl	5d9e <PSP_CNFG_FP_REGISTERS_EXIST+0x1d9e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4764:	1c71      	adds	r1, r6, #1
    4766:	19be      	adds	r6, r7, r6
    4768:	7033      	strb	r3, [r6, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    476a:	466d      	mov	r5, sp
    476c:	7e6b      	ldrb	r3, [r5, #25]
    476e:	2b7e      	cmp	r3, #126	; 0x7e
    4770:	d101      	bne.n	4776 <PSP_CNFG_FP_REGISTERS_EXIST+0x776>
    4772:	f001 f992 	bl	5a9a <PSP_CNFG_FP_REGISTERS_EXIST+0x1a9a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4776:	2b7d      	cmp	r3, #125	; 0x7d
    4778:	d101      	bne.n	477e <PSP_CNFG_FP_REGISTERS_EXIST+0x77e>
    477a:	f001 fb09 	bl	5d90 <PSP_CNFG_FP_REGISTERS_EXIST+0x1d90>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    477e:	1c4a      	adds	r2, r1, #1
    4780:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4782:	466e      	mov	r6, sp
    4784:	7e33      	ldrb	r3, [r6, #24]
    4786:	2b7e      	cmp	r3, #126	; 0x7e
    4788:	d101      	bne.n	478e <PSP_CNFG_FP_REGISTERS_EXIST+0x78e>
    478a:	f001 f97e 	bl	5a8a <PSP_CNFG_FP_REGISTERS_EXIST+0x1a8a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    478e:	2b7d      	cmp	r3, #125	; 0x7d
    4790:	d101      	bne.n	4796 <PSP_CNFG_FP_REGISTERS_EXIST+0x796>
    4792:	f001 faf6 	bl	5d82 <PSP_CNFG_FP_REGISTERS_EXIST+0x1d82>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4796:	1c51      	adds	r1, r2, #1
    4798:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    479a:	4668      	mov	r0, sp
    479c:	7e43      	ldrb	r3, [r0, #25]
    479e:	2b7e      	cmp	r3, #126	; 0x7e
    47a0:	d101      	bne.n	47a6 <PSP_CNFG_FP_REGISTERS_EXIST+0x7a6>
    47a2:	f001 f96a 	bl	5a7a <PSP_CNFG_FP_REGISTERS_EXIST+0x1a7a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    47a6:	2b7d      	cmp	r3, #125	; 0x7d
    47a8:	d101      	bne.n	47ae <PSP_CNFG_FP_REGISTERS_EXIST+0x7ae>
    47aa:	f001 faae 	bl	5d0a <PSP_CNFG_FP_REGISTERS_EXIST+0x1d0a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    47ae:	1c4a      	adds	r2, r1, #1
    47b0:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    47b2:	4669      	mov	r1, sp
    47b4:	7e0b      	ldrb	r3, [r1, #24]
    47b6:	2b7e      	cmp	r3, #126	; 0x7e
    47b8:	d101      	bne.n	47be <PSP_CNFG_FP_REGISTERS_EXIST+0x7be>
    47ba:	f001 f956 	bl	5a6a <PSP_CNFG_FP_REGISTERS_EXIST+0x1a6a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    47be:	2b7d      	cmp	r3, #125	; 0x7d
    47c0:	d101      	bne.n	47c6 <PSP_CNFG_FP_REGISTERS_EXIST+0x7c6>
    47c2:	f001 fa9b 	bl	5cfc <PSP_CNFG_FP_REGISTERS_EXIST+0x1cfc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    47c6:	1c51      	adds	r1, r2, #1
    47c8:	54bb      	strb	r3, [r7, r2]
    47ca:	e6a0      	b.n	450e <PSP_CNFG_FP_REGISTERS_EXIST+0x50e>
    47cc:	447a0000 	.word	0x447a0000
    47d0:	41200000 	.word	0x41200000
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1099
		isystick = (uint16)(thisSV_6DOF_GY_KALMAN.systick / 20);
#endif
		break;
	case Q9:
#ifdef COMPUTE_9DOF_GBY_KALMAN
		fq = thisSV_9DOF_GBY_KALMAN.fqPl;
    47d4:	4ef6      	ldr	r6, [pc, #984]	; (4bb0 <PSP_CNFG_FP_REGISTERS_EXIST+0xbb0>)
    47d6:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    47d8:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
    47da:	6c73      	ldr	r3, [r6, #68]	; 0x44
    47dc:	6c32      	ldr	r2, [r6, #64]	; 0x40
    47de:	4680      	mov	r8, r0
    47e0:	468b      	mov	fp, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1101
		flags |= 0x08;
		iOmega[X] = (int16)(thisSV_9DOF_GBY_KALMAN.fOmega[X] * 20.0F);
    47e2:	6d70      	ldr	r0, [r6, #84]	; 0x54
    47e4:	49f3      	ldr	r1, [pc, #972]	; (4bb4 <PSP_CNFG_FP_REGISTERS_EXIST+0xbb4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1099
		isystick = (uint16)(thisSV_6DOF_GY_KALMAN.systick / 20);
#endif
		break;
	case Q9:
#ifdef COMPUTE_9DOF_GBY_KALMAN
		fq = thisSV_9DOF_GBY_KALMAN.fqPl;
    47e6:	9305      	str	r3, [sp, #20]
    47e8:	9204      	str	r2, [sp, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1101
		flags |= 0x08;
		iOmega[X] = (int16)(thisSV_9DOF_GBY_KALMAN.fOmega[X] * 20.0F);
    47ea:	f7fc fad3 	bl	d94 <__aeabi_fmul>
    47ee:	f7fc fd71 	bl	12d4 <__aeabi_f2iz>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1102
		iOmega[Y] = (int16)(thisSV_9DOF_GBY_KALMAN.fOmega[Y] * 20.0F);
    47f2:	49f0      	ldr	r1, [pc, #960]	; (4bb4 <PSP_CNFG_FP_REGISTERS_EXIST+0xbb4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1101
		break;
	case Q9:
#ifdef COMPUTE_9DOF_GBY_KALMAN
		fq = thisSV_9DOF_GBY_KALMAN.fqPl;
		flags |= 0x08;
		iOmega[X] = (int16)(thisSV_9DOF_GBY_KALMAN.fOmega[X] * 20.0F);
    47f4:	8020      	strh	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1102
		iOmega[Y] = (int16)(thisSV_9DOF_GBY_KALMAN.fOmega[Y] * 20.0F);
    47f6:	6db0      	ldr	r0, [r6, #88]	; 0x58
    47f8:	f7fc facc 	bl	d94 <__aeabi_fmul>
    47fc:	f7fc fd6a 	bl	12d4 <__aeabi_f2iz>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1103
		iOmega[Z] = (int16)(thisSV_9DOF_GBY_KALMAN.fOmega[Z] * 20.0F);
    4800:	49ec      	ldr	r1, [pc, #944]	; (4bb4 <PSP_CNFG_FP_REGISTERS_EXIST+0xbb4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1102
	case Q9:
#ifdef COMPUTE_9DOF_GBY_KALMAN
		fq = thisSV_9DOF_GBY_KALMAN.fqPl;
		flags |= 0x08;
		iOmega[X] = (int16)(thisSV_9DOF_GBY_KALMAN.fOmega[X] * 20.0F);
		iOmega[Y] = (int16)(thisSV_9DOF_GBY_KALMAN.fOmega[Y] * 20.0F);
    4802:	8060      	strh	r0, [r4, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1103
		iOmega[Z] = (int16)(thisSV_9DOF_GBY_KALMAN.fOmega[Z] * 20.0F);
    4804:	6df0      	ldr	r0, [r6, #92]	; 0x5c
    4806:	f7fc fac5 	bl	d94 <__aeabi_fmul>
    480a:	f7fc fd63 	bl	12d4 <__aeabi_f2iz>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1104
		iPhi = (int16) (10.0F * thisSV_9DOF_GBY_KALMAN.fPhiPl);
    480e:	49ea      	ldr	r1, [pc, #936]	; (4bb8 <PSP_CNFG_FP_REGISTERS_EXIST+0xbb8>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1103
#ifdef COMPUTE_9DOF_GBY_KALMAN
		fq = thisSV_9DOF_GBY_KALMAN.fqPl;
		flags |= 0x08;
		iOmega[X] = (int16)(thisSV_9DOF_GBY_KALMAN.fOmega[X] * 20.0F);
		iOmega[Y] = (int16)(thisSV_9DOF_GBY_KALMAN.fOmega[Y] * 20.0F);
		iOmega[Z] = (int16)(thisSV_9DOF_GBY_KALMAN.fOmega[Z] * 20.0F);
    4810:	80a0      	strh	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1104
		iPhi = (int16) (10.0F * thisSV_9DOF_GBY_KALMAN.fPhiPl);
    4812:	6830      	ldr	r0, [r6, #0]
    4814:	f7fc fabe 	bl	d94 <__aeabi_fmul>
    4818:	f7fc fd5c 	bl	12d4 <__aeabi_f2iz>
    481c:	4669      	mov	r1, sp
    481e:	8408      	strh	r0, [r1, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1105
		iThe = (int16) (10.0F * thisSV_9DOF_GBY_KALMAN.fThePl);
    4820:	6870      	ldr	r0, [r6, #4]
    4822:	49e5      	ldr	r1, [pc, #916]	; (4bb8 <PSP_CNFG_FP_REGISTERS_EXIST+0xbb8>)
    4824:	f7fc fab6 	bl	d94 <__aeabi_fmul>
    4828:	f7fc fd54 	bl	12d4 <__aeabi_f2iz>
    482c:	466a      	mov	r2, sp
    482e:	8510      	strh	r0, [r2, #40]	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1106
		iRho = (int16) (10.0F * thisSV_9DOF_GBY_KALMAN.fRhoPl);
    4830:	49e1      	ldr	r1, [pc, #900]	; (4bb8 <PSP_CNFG_FP_REGISTERS_EXIST+0xbb8>)
    4832:	68f0      	ldr	r0, [r6, #12]
    4834:	f7fc faae 	bl	d94 <__aeabi_fmul>
    4838:	f7fc fd4c 	bl	12d4 <__aeabi_f2iz>
    483c:	466b      	mov	r3, sp
    483e:	8618      	strh	r0, [r3, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1107
		iDelta = (int16) (10.0F * thisSV_9DOF_GBY_KALMAN.fDeltaPl);
    4840:	23b8      	movs	r3, #184	; 0xb8
    4842:	58f0      	ldr	r0, [r6, r3]
    4844:	49dc      	ldr	r1, [pc, #880]	; (4bb8 <PSP_CNFG_FP_REGISTERS_EXIST+0xbb8>)
    4846:	f7fc faa5 	bl	d94 <__aeabi_fmul>
    484a:	f7fc fd43 	bl	12d4 <__aeabi_f2iz>
    484e:	b280      	uxth	r0, r0
    4850:	9002      	str	r0, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1108
		isystick = (uint16)(thisSV_9DOF_GBY_KALMAN.systick / 20);
    4852:	2114      	movs	r1, #20
    4854:	6e30      	ldr	r0, [r6, #96]	; 0x60
    4856:	f7fb fe73 	bl	540 <__aeabi_idiv>
    485a:	466e      	mov	r6, sp
    485c:	49d7      	ldr	r1, [pc, #860]	; (4bbc <PSP_CNFG_FP_REGISTERS_EXIST+0xbbc>)
    485e:	8730      	strh	r0, [r6, #56]	; 0x38
    4860:	4640      	mov	r0, r8
    4862:	f7fc fa97 	bl	d94 <__aeabi_fmul>
    4866:	f7fc fd35 	bl	12d4 <__aeabi_f2iz>
    486a:	b280      	uxth	r0, r0
    486c:	49d3      	ldr	r1, [pc, #844]	; (4bbc <PSP_CNFG_FP_REGISTERS_EXIST+0xbbc>)
    486e:	4680      	mov	r8, r0
    4870:	4658      	mov	r0, fp
    4872:	f7fc fa8f 	bl	d94 <__aeabi_fmul>
    4876:	f7fc fd2d 	bl	12d4 <__aeabi_f2iz>
    487a:	b280      	uxth	r0, r0
    487c:	49cf      	ldr	r1, [pc, #828]	; (4bbc <PSP_CNFG_FP_REGISTERS_EXIST+0xbbc>)
    487e:	4683      	mov	fp, r0
    4880:	9804      	ldr	r0, [sp, #16]
    4882:	f7fc fa87 	bl	d94 <__aeabi_fmul>
    4886:	f7fc fd25 	bl	12d4 <__aeabi_f2iz>
    488a:	b280      	uxth	r0, r0
    488c:	49cb      	ldr	r1, [pc, #812]	; (4bbc <PSP_CNFG_FP_REGISTERS_EXIST+0xbbc>)
    488e:	9001      	str	r0, [sp, #4]
    4890:	9805      	ldr	r0, [sp, #20]
    4892:	f7fc fa7f 	bl	d94 <__aeabi_fmul>
    4896:	f7fc fd1d 	bl	12d4 <__aeabi_f2iz>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1110
#endif
		break;
    489a:	2118      	movs	r1, #24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1117
		// use the default data already initialized
		break;
	}

	// [32-25]: scale the quaternion (30K = 1.0F) and add to the buffer
	tmpint16 = (int16)(fq.q0 * 30000.0F);
    489c:	4642      	mov	r2, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1110
		iThe = (int16) (10.0F * thisSV_9DOF_GBY_KALMAN.fThePl);
		iRho = (int16) (10.0F * thisSV_9DOF_GBY_KALMAN.fRhoPl);
		iDelta = (int16) (10.0F * thisSV_9DOF_GBY_KALMAN.fDeltaPl);
		isystick = (uint16)(thisSV_9DOF_GBY_KALMAN.systick / 20);
#endif
		break;
    489e:	9104      	str	r1, [sp, #16]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    48a0:	b2d3      	uxtb	r3, r2
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1117
		// use the default data already initialized
		break;
	}

	// [32-25]: scale the quaternion (30K = 1.0F) and add to the buffer
	tmpint16 = (int16)(fq.q0 * 30000.0F);
    48a2:	4669      	mov	r1, sp
    48a4:	b280      	uxth	r0, r0
    48a6:	830a      	strh	r2, [r1, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    48a8:	2b7e      	cmp	r3, #126	; 0x7e
    48aa:	d000      	beq.n	48ae <PSP_CNFG_FP_REGISTERS_EXIST+0x8ae>
    48ac:	e4a0      	b.n	41f0 <PSP_CNFG_FP_REGISTERS_EXIST+0x1f0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    48ae:	237d      	movs	r3, #125	; 0x7d
    48b0:	464e      	mov	r6, r9
    48b2:	55bb      	strb	r3, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    48b4:	215e      	movs	r1, #94	; 0x5e
    48b6:	464b      	mov	r3, r9
    48b8:	1c7e      	adds	r6, r7, #1
    48ba:	54f1      	strb	r1, [r6, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    48bc:	466b      	mov	r3, sp
    48be:	7e5b      	ldrb	r3, [r3, #25]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
    48c0:	464a      	mov	r2, r9
    48c2:	3202      	adds	r2, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    48c4:	469c      	mov	ip, r3
    48c6:	2b7e      	cmp	r3, #126	; 0x7e
    48c8:	d000      	beq.n	48cc <PSP_CNFG_FP_REGISTERS_EXIST+0x8cc>
    48ca:	e49f      	b.n	420c <PSP_CNFG_FP_REGISTERS_EXIST+0x20c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    48cc:	237d      	movs	r3, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    48ce:	1c7e      	adds	r6, r7, #1
    48d0:	215e      	movs	r1, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    48d2:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    48d4:	54b1      	strb	r1, [r6, r2]
    48d6:	1c93      	adds	r3, r2, #2
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1119
	}

	// [32-25]: scale the quaternion (30K = 1.0F) and add to the buffer
	tmpint16 = (int16)(fq.q0 * 30000.0F);
	sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
	tmpint16 = (int16)(fq.q1 * 30000.0F);
    48d8:	465a      	mov	r2, fp
    48da:	4669      	mov	r1, sp
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    48dc:	b2d6      	uxtb	r6, r2
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1119
	}

	// [32-25]: scale the quaternion (30K = 1.0F) and add to the buffer
	tmpint16 = (int16)(fq.q0 * 30000.0F);
	sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
	tmpint16 = (int16)(fq.q1 * 30000.0F);
    48de:	830a      	strh	r2, [r1, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    48e0:	2e7e      	cmp	r6, #126	; 0x7e
    48e2:	d000      	beq.n	48e6 <PSP_CNFG_FP_REGISTERS_EXIST+0x8e6>
    48e4:	e4a0      	b.n	4228 <PSP_CNFG_FP_REGISTERS_EXIST+0x228>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    48e6:	227d      	movs	r2, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    48e8:	1c7e      	adds	r6, r7, #1
    48ea:	215e      	movs	r1, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    48ec:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    48ee:	54f1      	strb	r1, [r6, r3]
    48f0:	1c9a      	adds	r2, r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    48f2:	466b      	mov	r3, sp
    48f4:	7e5b      	ldrb	r3, [r3, #25]
    48f6:	469c      	mov	ip, r3
    48f8:	2b7e      	cmp	r3, #126	; 0x7e
    48fa:	d000      	beq.n	48fe <PSP_CNFG_FP_REGISTERS_EXIST+0x8fe>
    48fc:	e4a0      	b.n	4240 <PSP_CNFG_FP_REGISTERS_EXIST+0x240>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    48fe:	237d      	movs	r3, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    4900:	1c7e      	adds	r6, r7, #1
    4902:	215e      	movs	r1, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    4904:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    4906:	54b1      	strb	r1, [r6, r2]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1121
	// [32-25]: scale the quaternion (30K = 1.0F) and add to the buffer
	tmpint16 = (int16)(fq.q0 * 30000.0F);
	sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
	tmpint16 = (int16)(fq.q1 * 30000.0F);
	sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
	tmpint16 = (int16)(fq.q2 * 30000.0F);
    4908:	9e01      	ldr	r6, [sp, #4]
    490a:	4669      	mov	r1, sp
    490c:	830e      	strh	r6, [r1, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    490e:	b2f6      	uxtb	r6, r6
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
    4910:	1c93      	adds	r3, r2, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4912:	2e7e      	cmp	r6, #126	; 0x7e
    4914:	d000      	beq.n	4918 <PSP_CNFG_FP_REGISTERS_EXIST+0x918>
    4916:	e4a1      	b.n	425c <PSP_CNFG_FP_REGISTERS_EXIST+0x25c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    4918:	227d      	movs	r2, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    491a:	1c7e      	adds	r6, r7, #1
    491c:	215e      	movs	r1, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    491e:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    4920:	54f1      	strb	r1, [r6, r3]
    4922:	1c9a      	adds	r2, r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4924:	466b      	mov	r3, sp
    4926:	7e5e      	ldrb	r6, [r3, #25]
    4928:	2e7e      	cmp	r6, #126	; 0x7e
    492a:	d000      	beq.n	492e <PSP_CNFG_FP_REGISTERS_EXIST+0x92e>
    492c:	e4a1      	b.n	4272 <PSP_CNFG_FP_REGISTERS_EXIST+0x272>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    492e:	237d      	movs	r3, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    4930:	1c7e      	adds	r6, r7, #1
    4932:	215e      	movs	r1, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    4934:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    4936:	54b1      	strb	r1, [r6, r2]
    4938:	1c93      	adds	r3, r2, #2
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1123
	sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
	tmpint16 = (int16)(fq.q1 * 30000.0F);
	sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
	tmpint16 = (int16)(fq.q2 * 30000.0F);
	sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
	tmpint16 = (int16)(fq.q3 * 30000.0F);
    493a:	466a      	mov	r2, sp
    493c:	8310      	strh	r0, [r2, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    493e:	b2c0      	uxtb	r0, r0
    4940:	287e      	cmp	r0, #126	; 0x7e
    4942:	d000      	beq.n	4946 <PSP_CNFG_FP_REGISTERS_EXIST+0x946>
    4944:	e4a1      	b.n	428a <PSP_CNFG_FP_REGISTERS_EXIST+0x28a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    4946:	227d      	movs	r2, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    4948:	265e      	movs	r6, #94	; 0x5e
    494a:	1c78      	adds	r0, r7, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    494c:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    494e:	54c6      	strb	r6, [r0, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4950:	466e      	mov	r6, sp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
    4952:	1c9a      	adds	r2, r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4954:	7e73      	ldrb	r3, [r6, #25]
    4956:	2b7e      	cmp	r3, #126	; 0x7e
    4958:	d000      	beq.n	495c <PSP_CNFG_FP_REGISTERS_EXIST+0x95c>
    495a:	e4a1      	b.n	42a0 <PSP_CNFG_FP_REGISTERS_EXIST+0x2a0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    495c:	237d      	movs	r3, #125	; 0x7d
    495e:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    4960:	265e      	movs	r6, #94	; 0x5e
    4962:	1c7b      	adds	r3, r7, #1
    4964:	1c90      	adds	r0, r2, #2
    4966:	549e      	strb	r6, [r3, r2]
    4968:	e4a0      	b.n	42ac <PSP_CNFG_FP_REGISTERS_EXIST+0x2ac>
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1027
	// set the quaternion, flags, angular velocity and Euler angles
	switch (globals.QuaternionPacketType)
	{
	case Q3:
#ifdef COMPUTE_3DOF_G_BASIC
		fq = thisSV_3DOF_G_BASIC.fLPq;
    496a:	4e95      	ldr	r6, [pc, #596]	; (4bc0 <PSP_CNFG_FP_REGISTERS_EXIST+0xbc0>)
    496c:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
    496e:	6c31      	ldr	r1, [r6, #64]	; 0x40
    4970:	6c72      	ldr	r2, [r6, #68]	; 0x44
    4972:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    4974:	4683      	mov	fp, r0
    4976:	9102      	str	r1, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1029
		flags |= 0x01;
		iOmega[X] = (int16)(thisSV_3DOF_G_BASIC.fOmega[X] * 20.0F);
    4978:	6d70      	ldr	r0, [r6, #84]	; 0x54
    497a:	498e      	ldr	r1, [pc, #568]	; (4bb4 <PSP_CNFG_FP_REGISTERS_EXIST+0xbb4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1027
	// set the quaternion, flags, angular velocity and Euler angles
	switch (globals.QuaternionPacketType)
	{
	case Q3:
#ifdef COMPUTE_3DOF_G_BASIC
		fq = thisSV_3DOF_G_BASIC.fLPq;
    497c:	9204      	str	r2, [sp, #16]
    497e:	4698      	mov	r8, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1029
		flags |= 0x01;
		iOmega[X] = (int16)(thisSV_3DOF_G_BASIC.fOmega[X] * 20.0F);
    4980:	f7fc fa08 	bl	d94 <__aeabi_fmul>
    4984:	f7fc fca6 	bl	12d4 <__aeabi_f2iz>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1030
		iOmega[Y] = (int16)(thisSV_3DOF_G_BASIC.fOmega[Y] * 20.0F);
    4988:	498a      	ldr	r1, [pc, #552]	; (4bb4 <PSP_CNFG_FP_REGISTERS_EXIST+0xbb4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1029
	{
	case Q3:
#ifdef COMPUTE_3DOF_G_BASIC
		fq = thisSV_3DOF_G_BASIC.fLPq;
		flags |= 0x01;
		iOmega[X] = (int16)(thisSV_3DOF_G_BASIC.fOmega[X] * 20.0F);
    498a:	8020      	strh	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1030
		iOmega[Y] = (int16)(thisSV_3DOF_G_BASIC.fOmega[Y] * 20.0F);
    498c:	6db0      	ldr	r0, [r6, #88]	; 0x58
    498e:	f7fc fa01 	bl	d94 <__aeabi_fmul>
    4992:	f7fc fc9f 	bl	12d4 <__aeabi_f2iz>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1031
		iOmega[Z] = (int16)(thisSV_3DOF_G_BASIC.fOmega[Z] * 20.0F);
    4996:	4987      	ldr	r1, [pc, #540]	; (4bb4 <PSP_CNFG_FP_REGISTERS_EXIST+0xbb4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1030
	case Q3:
#ifdef COMPUTE_3DOF_G_BASIC
		fq = thisSV_3DOF_G_BASIC.fLPq;
		flags |= 0x01;
		iOmega[X] = (int16)(thisSV_3DOF_G_BASIC.fOmega[X] * 20.0F);
		iOmega[Y] = (int16)(thisSV_3DOF_G_BASIC.fOmega[Y] * 20.0F);
    4998:	8060      	strh	r0, [r4, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1031
		iOmega[Z] = (int16)(thisSV_3DOF_G_BASIC.fOmega[Z] * 20.0F);
    499a:	6df0      	ldr	r0, [r6, #92]	; 0x5c
    499c:	f7fc f9fa 	bl	d94 <__aeabi_fmul>
    49a0:	f7fc fc98 	bl	12d4 <__aeabi_f2iz>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1032
		iPhi = (int16) (10.0F * thisSV_3DOF_G_BASIC.fLPPhi);
    49a4:	4984      	ldr	r1, [pc, #528]	; (4bb8 <PSP_CNFG_FP_REGISTERS_EXIST+0xbb8>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1031
#ifdef COMPUTE_3DOF_G_BASIC
		fq = thisSV_3DOF_G_BASIC.fLPq;
		flags |= 0x01;
		iOmega[X] = (int16)(thisSV_3DOF_G_BASIC.fOmega[X] * 20.0F);
		iOmega[Y] = (int16)(thisSV_3DOF_G_BASIC.fOmega[Y] * 20.0F);
		iOmega[Z] = (int16)(thisSV_3DOF_G_BASIC.fOmega[Z] * 20.0F);
    49a6:	80a0      	strh	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1032
		iPhi = (int16) (10.0F * thisSV_3DOF_G_BASIC.fLPPhi);
    49a8:	6830      	ldr	r0, [r6, #0]
    49aa:	f7fc f9f3 	bl	d94 <__aeabi_fmul>
    49ae:	f7fc fc91 	bl	12d4 <__aeabi_f2iz>
    49b2:	466b      	mov	r3, sp
    49b4:	8418      	strh	r0, [r3, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1033
		iThe = (int16) (10.0F * thisSV_3DOF_G_BASIC.fLPThe);
    49b6:	4980      	ldr	r1, [pc, #512]	; (4bb8 <PSP_CNFG_FP_REGISTERS_EXIST+0xbb8>)
    49b8:	6870      	ldr	r0, [r6, #4]
    49ba:	f7fc f9eb 	bl	d94 <__aeabi_fmul>
    49be:	f7fc fc89 	bl	12d4 <__aeabi_f2iz>
    49c2:	4669      	mov	r1, sp
    49c4:	8508      	strh	r0, [r1, #40]	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1034
		iRho = (int16) (10.0F * thisSV_3DOF_G_BASIC.fLPRho);
    49c6:	68f0      	ldr	r0, [r6, #12]
    49c8:	497b      	ldr	r1, [pc, #492]	; (4bb8 <PSP_CNFG_FP_REGISTERS_EXIST+0xbb8>)
    49ca:	f7fc f9e3 	bl	d94 <__aeabi_fmul>
    49ce:	f7fc fc81 	bl	12d4 <__aeabi_f2iz>
    49d2:	466a      	mov	r2, sp
    49d4:	8610      	strh	r0, [r2, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1036
		iDelta = 0;
		isystick = (uint16)(thisSV_3DOF_G_BASIC.systick / 20);
    49d6:	2114      	movs	r1, #20
    49d8:	6e30      	ldr	r0, [r6, #96]	; 0x60
    49da:	f7fb fdb1 	bl	540 <__aeabi_idiv>
    49de:	466b      	mov	r3, sp
    49e0:	8718      	strh	r0, [r3, #56]	; 0x38
    49e2:	4976      	ldr	r1, [pc, #472]	; (4bbc <PSP_CNFG_FP_REGISTERS_EXIST+0xbbc>)
    49e4:	4640      	mov	r0, r8
    49e6:	f7fc f9d5 	bl	d94 <__aeabi_fmul>
    49ea:	f7fc fc73 	bl	12d4 <__aeabi_f2iz>
    49ee:	b280      	uxth	r0, r0
    49f0:	4972      	ldr	r1, [pc, #456]	; (4bbc <PSP_CNFG_FP_REGISTERS_EXIST+0xbbc>)
    49f2:	4680      	mov	r8, r0
    49f4:	4658      	mov	r0, fp
    49f6:	f7fc f9cd 	bl	d94 <__aeabi_fmul>
    49fa:	f7fc fc6b 	bl	12d4 <__aeabi_f2iz>
    49fe:	b280      	uxth	r0, r0
    4a00:	496e      	ldr	r1, [pc, #440]	; (4bbc <PSP_CNFG_FP_REGISTERS_EXIST+0xbbc>)
    4a02:	4683      	mov	fp, r0
    4a04:	9802      	ldr	r0, [sp, #8]
    4a06:	f7fc f9c5 	bl	d94 <__aeabi_fmul>
    4a0a:	f7fc fc63 	bl	12d4 <__aeabi_f2iz>
    4a0e:	b280      	uxth	r0, r0
    4a10:	9001      	str	r0, [sp, #4]
    4a12:	496a      	ldr	r1, [pc, #424]	; (4bbc <PSP_CNFG_FP_REGISTERS_EXIST+0xbbc>)
    4a14:	9804      	ldr	r0, [sp, #16]
    4a16:	f7fc f9bd 	bl	d94 <__aeabi_fmul>
    4a1a:	f7fc fc5b 	bl	12d4 <__aeabi_f2iz>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1038
#endif
		break;
    4a1e:	2611      	movs	r6, #17
    4a20:	9604      	str	r6, [sp, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1035
		iOmega[Y] = (int16)(thisSV_3DOF_G_BASIC.fOmega[Y] * 20.0F);
		iOmega[Z] = (int16)(thisSV_3DOF_G_BASIC.fOmega[Z] * 20.0F);
		iPhi = (int16) (10.0F * thisSV_3DOF_G_BASIC.fLPPhi);
		iThe = (int16) (10.0F * thisSV_3DOF_G_BASIC.fLPThe);
		iRho = (int16) (10.0F * thisSV_3DOF_G_BASIC.fLPRho);
		iDelta = 0;
    4a22:	2600      	movs	r6, #0
    4a24:	b280      	uxth	r0, r0
    4a26:	9602      	str	r6, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1038
		isystick = (uint16)(thisSV_3DOF_G_BASIC.systick / 20);
#endif
		break;
    4a28:	f7ff fbdb 	bl	41e2 <PSP_CNFG_FP_REGISTERS_EXIST+0x1e2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1041
	case Q3M:
#ifdef COMPUTE_3DOF_B_BASIC
		fq = thisSV_3DOF_B_BASIC.fLPq;
    4a2c:	4e65      	ldr	r6, [pc, #404]	; (4bc4 <PSP_CNFG_FP_REGISTERS_EXIST+0xbc4>)
    4a2e:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    4a30:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
    4a32:	6c73      	ldr	r3, [r6, #68]	; 0x44
    4a34:	6c32      	ldr	r2, [r6, #64]	; 0x40
    4a36:	4680      	mov	r8, r0
    4a38:	468b      	mov	fp, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1044
		//	flags |= 0x02;
		flags |= 0x06;
		iOmega[X] = (int16)(thisSV_3DOF_B_BASIC.fOmega[X] * 20.0F);
    4a3a:	6d70      	ldr	r0, [r6, #84]	; 0x54
    4a3c:	495d      	ldr	r1, [pc, #372]	; (4bb4 <PSP_CNFG_FP_REGISTERS_EXIST+0xbb4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1041
		isystick = (uint16)(thisSV_3DOF_G_BASIC.systick / 20);
#endif
		break;
	case Q3M:
#ifdef COMPUTE_3DOF_B_BASIC
		fq = thisSV_3DOF_B_BASIC.fLPq;
    4a3e:	9304      	str	r3, [sp, #16]
    4a40:	9202      	str	r2, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1044
		//	flags |= 0x02;
		flags |= 0x06;
		iOmega[X] = (int16)(thisSV_3DOF_B_BASIC.fOmega[X] * 20.0F);
    4a42:	f7fc f9a7 	bl	d94 <__aeabi_fmul>
    4a46:	f7fc fc45 	bl	12d4 <__aeabi_f2iz>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1045
		iOmega[Y] = (int16)(thisSV_3DOF_B_BASIC.fOmega[Y] * 20.0F);
    4a4a:	495a      	ldr	r1, [pc, #360]	; (4bb4 <PSP_CNFG_FP_REGISTERS_EXIST+0xbb4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1044
	case Q3M:
#ifdef COMPUTE_3DOF_B_BASIC
		fq = thisSV_3DOF_B_BASIC.fLPq;
		//	flags |= 0x02;
		flags |= 0x06;
		iOmega[X] = (int16)(thisSV_3DOF_B_BASIC.fOmega[X] * 20.0F);
    4a4c:	8020      	strh	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1045
		iOmega[Y] = (int16)(thisSV_3DOF_B_BASIC.fOmega[Y] * 20.0F);
    4a4e:	6db0      	ldr	r0, [r6, #88]	; 0x58
    4a50:	f7fc f9a0 	bl	d94 <__aeabi_fmul>
    4a54:	f7fc fc3e 	bl	12d4 <__aeabi_f2iz>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1046
		iOmega[Z] = (int16)(thisSV_3DOF_B_BASIC.fOmega[Z] * 20.0F);
    4a58:	4956      	ldr	r1, [pc, #344]	; (4bb4 <PSP_CNFG_FP_REGISTERS_EXIST+0xbb4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1045
#ifdef COMPUTE_3DOF_B_BASIC
		fq = thisSV_3DOF_B_BASIC.fLPq;
		//	flags |= 0x02;
		flags |= 0x06;
		iOmega[X] = (int16)(thisSV_3DOF_B_BASIC.fOmega[X] * 20.0F);
		iOmega[Y] = (int16)(thisSV_3DOF_B_BASIC.fOmega[Y] * 20.0F);
    4a5a:	8060      	strh	r0, [r4, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1046
		iOmega[Z] = (int16)(thisSV_3DOF_B_BASIC.fOmega[Z] * 20.0F);
    4a5c:	6df0      	ldr	r0, [r6, #92]	; 0x5c
    4a5e:	f7fc f999 	bl	d94 <__aeabi_fmul>
    4a62:	f7fc fc37 	bl	12d4 <__aeabi_f2iz>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1047
		iPhi = (int16) (10.0F * thisSV_3DOF_B_BASIC.fLPPhi);
    4a66:	4954      	ldr	r1, [pc, #336]	; (4bb8 <PSP_CNFG_FP_REGISTERS_EXIST+0xbb8>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1046
		fq = thisSV_3DOF_B_BASIC.fLPq;
		//	flags |= 0x02;
		flags |= 0x06;
		iOmega[X] = (int16)(thisSV_3DOF_B_BASIC.fOmega[X] * 20.0F);
		iOmega[Y] = (int16)(thisSV_3DOF_B_BASIC.fOmega[Y] * 20.0F);
		iOmega[Z] = (int16)(thisSV_3DOF_B_BASIC.fOmega[Z] * 20.0F);
    4a68:	80a0      	strh	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1047
		iPhi = (int16) (10.0F * thisSV_3DOF_B_BASIC.fLPPhi);
    4a6a:	6830      	ldr	r0, [r6, #0]
    4a6c:	f7fc f992 	bl	d94 <__aeabi_fmul>
    4a70:	f7fc fc30 	bl	12d4 <__aeabi_f2iz>
    4a74:	4669      	mov	r1, sp
    4a76:	8408      	strh	r0, [r1, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1048
		iThe = (int16) (10.0F * thisSV_3DOF_B_BASIC.fLPThe);
    4a78:	6870      	ldr	r0, [r6, #4]
    4a7a:	494f      	ldr	r1, [pc, #316]	; (4bb8 <PSP_CNFG_FP_REGISTERS_EXIST+0xbb8>)
    4a7c:	f7fc f98a 	bl	d94 <__aeabi_fmul>
    4a80:	f7fc fc28 	bl	12d4 <__aeabi_f2iz>
    4a84:	466a      	mov	r2, sp
    4a86:	8510      	strh	r0, [r2, #40]	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1049
		iRho = (int16) (10.0F * thisSV_3DOF_B_BASIC.fLPRho);
    4a88:	494b      	ldr	r1, [pc, #300]	; (4bb8 <PSP_CNFG_FP_REGISTERS_EXIST+0xbb8>)
    4a8a:	68f0      	ldr	r0, [r6, #12]
    4a8c:	f7fc f982 	bl	d94 <__aeabi_fmul>
    4a90:	f7fc fc20 	bl	12d4 <__aeabi_f2iz>
    4a94:	466b      	mov	r3, sp
    4a96:	8618      	strh	r0, [r3, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1051
		iDelta = 0;
		isystick = (uint16)(thisSV_3DOF_B_BASIC.systick / 20);
    4a98:	2114      	movs	r1, #20
    4a9a:	6e30      	ldr	r0, [r6, #96]	; 0x60
    4a9c:	f7fb fd50 	bl	540 <__aeabi_idiv>
    4aa0:	466e      	mov	r6, sp
    4aa2:	8730      	strh	r0, [r6, #56]	; 0x38
    4aa4:	4945      	ldr	r1, [pc, #276]	; (4bbc <PSP_CNFG_FP_REGISTERS_EXIST+0xbbc>)
    4aa6:	4640      	mov	r0, r8
    4aa8:	f7fc f974 	bl	d94 <__aeabi_fmul>
    4aac:	f7fc fc12 	bl	12d4 <__aeabi_f2iz>
    4ab0:	b280      	uxth	r0, r0
    4ab2:	4942      	ldr	r1, [pc, #264]	; (4bbc <PSP_CNFG_FP_REGISTERS_EXIST+0xbbc>)
    4ab4:	4680      	mov	r8, r0
    4ab6:	4658      	mov	r0, fp
    4ab8:	f7fc f96c 	bl	d94 <__aeabi_fmul>
    4abc:	f7fc fc0a 	bl	12d4 <__aeabi_f2iz>
    4ac0:	b280      	uxth	r0, r0
    4ac2:	493e      	ldr	r1, [pc, #248]	; (4bbc <PSP_CNFG_FP_REGISTERS_EXIST+0xbbc>)
    4ac4:	4683      	mov	fp, r0
    4ac6:	9802      	ldr	r0, [sp, #8]
    4ac8:	f7fc f964 	bl	d94 <__aeabi_fmul>
    4acc:	f7fc fc02 	bl	12d4 <__aeabi_f2iz>
    4ad0:	b280      	uxth	r0, r0
    4ad2:	493a      	ldr	r1, [pc, #232]	; (4bbc <PSP_CNFG_FP_REGISTERS_EXIST+0xbbc>)
    4ad4:	9001      	str	r0, [sp, #4]
    4ad6:	9804      	ldr	r0, [sp, #16]
    4ad8:	f7fc f95c 	bl	d94 <__aeabi_fmul>
    4adc:	f7fc fbfa 	bl	12d4 <__aeabi_f2iz>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1050
		iOmega[Y] = (int16)(thisSV_3DOF_B_BASIC.fOmega[Y] * 20.0F);
		iOmega[Z] = (int16)(thisSV_3DOF_B_BASIC.fOmega[Z] * 20.0F);
		iPhi = (int16) (10.0F * thisSV_3DOF_B_BASIC.fLPPhi);
		iThe = (int16) (10.0F * thisSV_3DOF_B_BASIC.fLPThe);
		iRho = (int16) (10.0F * thisSV_3DOF_B_BASIC.fLPRho);
		iDelta = 0;
    4ae0:	2600      	movs	r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1053
		isystick = (uint16)(thisSV_3DOF_B_BASIC.systick / 20);
#endif
		break;
    4ae2:	2116      	movs	r1, #22
    4ae4:	9104      	str	r1, [sp, #16]
    4ae6:	b280      	uxth	r0, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1050
		iOmega[Y] = (int16)(thisSV_3DOF_B_BASIC.fOmega[Y] * 20.0F);
		iOmega[Z] = (int16)(thisSV_3DOF_B_BASIC.fOmega[Z] * 20.0F);
		iPhi = (int16) (10.0F * thisSV_3DOF_B_BASIC.fLPPhi);
		iThe = (int16) (10.0F * thisSV_3DOF_B_BASIC.fLPThe);
		iRho = (int16) (10.0F * thisSV_3DOF_B_BASIC.fLPRho);
		iDelta = 0;
    4ae8:	9602      	str	r6, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1053
		isystick = (uint16)(thisSV_3DOF_B_BASIC.systick / 20);
#endif
		break;
    4aea:	f7ff fb7a 	bl	41e2 <PSP_CNFG_FP_REGISTERS_EXIST+0x1e2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1056
	case Q3G:
#ifdef COMPUTE_3DOF_Y_BASIC
		fq = thisSV_3DOF_Y_BASIC.fq;
    4aee:	4e36      	ldr	r6, [pc, #216]	; (4bc8 <PSP_CNFG_FP_REGISTERS_EXIST+0xbc8>)
    4af0:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    4af2:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
    4af4:	6c73      	ldr	r3, [r6, #68]	; 0x44
    4af6:	6c32      	ldr	r2, [r6, #64]	; 0x40
    4af8:	4680      	mov	r8, r0
    4afa:	468b      	mov	fp, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1059
		//flags |= 0x01;
		flags |= 0x03;
		iOmega[X] = (int16)(thisSV_3DOF_Y_BASIC.fOmega[X] * 20.0F);
    4afc:	6d70      	ldr	r0, [r6, #84]	; 0x54
    4afe:	492d      	ldr	r1, [pc, #180]	; (4bb4 <PSP_CNFG_FP_REGISTERS_EXIST+0xbb4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1056
		isystick = (uint16)(thisSV_3DOF_B_BASIC.systick / 20);
#endif
		break;
	case Q3G:
#ifdef COMPUTE_3DOF_Y_BASIC
		fq = thisSV_3DOF_Y_BASIC.fq;
    4b00:	9304      	str	r3, [sp, #16]
    4b02:	9202      	str	r2, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1059
		//flags |= 0x01;
		flags |= 0x03;
		iOmega[X] = (int16)(thisSV_3DOF_Y_BASIC.fOmega[X] * 20.0F);
    4b04:	f7fc f946 	bl	d94 <__aeabi_fmul>
    4b08:	f7fc fbe4 	bl	12d4 <__aeabi_f2iz>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1060
		iOmega[Y] = (int16)(thisSV_3DOF_Y_BASIC.fOmega[Y] * 20.0F);
    4b0c:	4929      	ldr	r1, [pc, #164]	; (4bb4 <PSP_CNFG_FP_REGISTERS_EXIST+0xbb4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1059
	case Q3G:
#ifdef COMPUTE_3DOF_Y_BASIC
		fq = thisSV_3DOF_Y_BASIC.fq;
		//flags |= 0x01;
		flags |= 0x03;
		iOmega[X] = (int16)(thisSV_3DOF_Y_BASIC.fOmega[X] * 20.0F);
    4b0e:	8020      	strh	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1060
		iOmega[Y] = (int16)(thisSV_3DOF_Y_BASIC.fOmega[Y] * 20.0F);
    4b10:	6db0      	ldr	r0, [r6, #88]	; 0x58
    4b12:	f7fc f93f 	bl	d94 <__aeabi_fmul>
    4b16:	f7fc fbdd 	bl	12d4 <__aeabi_f2iz>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1061
		iOmega[Z] = (int16)(thisSV_3DOF_Y_BASIC.fOmega[Z] * 20.0F);
    4b1a:	4926      	ldr	r1, [pc, #152]	; (4bb4 <PSP_CNFG_FP_REGISTERS_EXIST+0xbb4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1060
#ifdef COMPUTE_3DOF_Y_BASIC
		fq = thisSV_3DOF_Y_BASIC.fq;
		//flags |= 0x01;
		flags |= 0x03;
		iOmega[X] = (int16)(thisSV_3DOF_Y_BASIC.fOmega[X] * 20.0F);
		iOmega[Y] = (int16)(thisSV_3DOF_Y_BASIC.fOmega[Y] * 20.0F);
    4b1c:	8060      	strh	r0, [r4, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1061
		iOmega[Z] = (int16)(thisSV_3DOF_Y_BASIC.fOmega[Z] * 20.0F);
    4b1e:	6df0      	ldr	r0, [r6, #92]	; 0x5c
    4b20:	f7fc f938 	bl	d94 <__aeabi_fmul>
    4b24:	f7fc fbd6 	bl	12d4 <__aeabi_f2iz>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1062
		iPhi = (int16) (10.0F * thisSV_3DOF_Y_BASIC.fPhi);
    4b28:	4923      	ldr	r1, [pc, #140]	; (4bb8 <PSP_CNFG_FP_REGISTERS_EXIST+0xbb8>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1061
		fq = thisSV_3DOF_Y_BASIC.fq;
		//flags |= 0x01;
		flags |= 0x03;
		iOmega[X] = (int16)(thisSV_3DOF_Y_BASIC.fOmega[X] * 20.0F);
		iOmega[Y] = (int16)(thisSV_3DOF_Y_BASIC.fOmega[Y] * 20.0F);
		iOmega[Z] = (int16)(thisSV_3DOF_Y_BASIC.fOmega[Z] * 20.0F);
    4b2a:	80a0      	strh	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1062
		iPhi = (int16) (10.0F * thisSV_3DOF_Y_BASIC.fPhi);
    4b2c:	6830      	ldr	r0, [r6, #0]
    4b2e:	f7fc f931 	bl	d94 <__aeabi_fmul>
    4b32:	f7fc fbcf 	bl	12d4 <__aeabi_f2iz>
    4b36:	4669      	mov	r1, sp
    4b38:	8408      	strh	r0, [r1, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1063
		iThe = (int16) (10.0F * thisSV_3DOF_Y_BASIC.fThe);
    4b3a:	6870      	ldr	r0, [r6, #4]
    4b3c:	491e      	ldr	r1, [pc, #120]	; (4bb8 <PSP_CNFG_FP_REGISTERS_EXIST+0xbb8>)
    4b3e:	f7fc f929 	bl	d94 <__aeabi_fmul>
    4b42:	f7fc fbc7 	bl	12d4 <__aeabi_f2iz>
    4b46:	466a      	mov	r2, sp
    4b48:	8510      	strh	r0, [r2, #40]	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1064
		iRho = (int16) (10.0F * thisSV_3DOF_Y_BASIC.fRho);
    4b4a:	491b      	ldr	r1, [pc, #108]	; (4bb8 <PSP_CNFG_FP_REGISTERS_EXIST+0xbb8>)
    4b4c:	68f0      	ldr	r0, [r6, #12]
    4b4e:	f7fc f921 	bl	d94 <__aeabi_fmul>
    4b52:	f7fc fbbf 	bl	12d4 <__aeabi_f2iz>
    4b56:	466b      	mov	r3, sp
    4b58:	8618      	strh	r0, [r3, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1066
		iDelta = 0;
		isystick = (uint16)(thisSV_3DOF_Y_BASIC.systick / 20);
    4b5a:	2114      	movs	r1, #20
    4b5c:	6e30      	ldr	r0, [r6, #96]	; 0x60
    4b5e:	f7fb fcef 	bl	540 <__aeabi_idiv>
    4b62:	466e      	mov	r6, sp
    4b64:	8730      	strh	r0, [r6, #56]	; 0x38
    4b66:	4915      	ldr	r1, [pc, #84]	; (4bbc <PSP_CNFG_FP_REGISTERS_EXIST+0xbbc>)
    4b68:	4640      	mov	r0, r8
    4b6a:	f7fc f913 	bl	d94 <__aeabi_fmul>
    4b6e:	f7fc fbb1 	bl	12d4 <__aeabi_f2iz>
    4b72:	b280      	uxth	r0, r0
    4b74:	4911      	ldr	r1, [pc, #68]	; (4bbc <PSP_CNFG_FP_REGISTERS_EXIST+0xbbc>)
    4b76:	4680      	mov	r8, r0
    4b78:	4658      	mov	r0, fp
    4b7a:	f7fc f90b 	bl	d94 <__aeabi_fmul>
    4b7e:	f7fc fba9 	bl	12d4 <__aeabi_f2iz>
    4b82:	b280      	uxth	r0, r0
    4b84:	490d      	ldr	r1, [pc, #52]	; (4bbc <PSP_CNFG_FP_REGISTERS_EXIST+0xbbc>)
    4b86:	4683      	mov	fp, r0
    4b88:	9802      	ldr	r0, [sp, #8]
    4b8a:	f7fc f903 	bl	d94 <__aeabi_fmul>
    4b8e:	f7fc fba1 	bl	12d4 <__aeabi_f2iz>
    4b92:	b280      	uxth	r0, r0
    4b94:	4909      	ldr	r1, [pc, #36]	; (4bbc <PSP_CNFG_FP_REGISTERS_EXIST+0xbbc>)
    4b96:	9001      	str	r0, [sp, #4]
    4b98:	9804      	ldr	r0, [sp, #16]
    4b9a:	f7fc f8fb 	bl	d94 <__aeabi_fmul>
    4b9e:	f7fc fb99 	bl	12d4 <__aeabi_f2iz>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1065
		iOmega[Y] = (int16)(thisSV_3DOF_Y_BASIC.fOmega[Y] * 20.0F);
		iOmega[Z] = (int16)(thisSV_3DOF_Y_BASIC.fOmega[Z] * 20.0F);
		iPhi = (int16) (10.0F * thisSV_3DOF_Y_BASIC.fPhi);
		iThe = (int16) (10.0F * thisSV_3DOF_Y_BASIC.fThe);
		iRho = (int16) (10.0F * thisSV_3DOF_Y_BASIC.fRho);
		iDelta = 0;
    4ba2:	2600      	movs	r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1068
		isystick = (uint16)(thisSV_3DOF_Y_BASIC.systick / 20);
#endif
		break;
    4ba4:	2113      	movs	r1, #19
    4ba6:	9104      	str	r1, [sp, #16]
    4ba8:	b280      	uxth	r0, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1065
		iOmega[Y] = (int16)(thisSV_3DOF_Y_BASIC.fOmega[Y] * 20.0F);
		iOmega[Z] = (int16)(thisSV_3DOF_Y_BASIC.fOmega[Z] * 20.0F);
		iPhi = (int16) (10.0F * thisSV_3DOF_Y_BASIC.fPhi);
		iThe = (int16) (10.0F * thisSV_3DOF_Y_BASIC.fThe);
		iRho = (int16) (10.0F * thisSV_3DOF_Y_BASIC.fRho);
		iDelta = 0;
    4baa:	9602      	str	r6, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1068
		isystick = (uint16)(thisSV_3DOF_Y_BASIC.systick / 20);
#endif
		break;
    4bac:	f7ff fb19 	bl	41e2 <PSP_CNFG_FP_REGISTERS_EXIST+0x1e2>
    4bb0:	1ffff540 	.word	0x1ffff540
    4bb4:	41a00000 	.word	0x41a00000
    4bb8:	41200000 	.word	0x41200000
    4bbc:	46ea6000 	.word	0x46ea6000
    4bc0:	1fffef68 	.word	0x1fffef68
    4bc4:	1fffe36c 	.word	0x1fffe36c
    4bc8:	20000260 	.word	0x20000260
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1071
	case Q6MA:
#ifdef COMPUTE_6DOF_GB_BASIC
		fq = thisSV_6DOF_GB_BASIC.fLPq;
    4bcc:	4ebf      	ldr	r6, [pc, #764]	; (4ecc <PSP_CNFG_FP_REGISTERS_EXIST+0xecc>)
    4bce:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    4bd0:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
    4bd2:	6c73      	ldr	r3, [r6, #68]	; 0x44
    4bd4:	6c32      	ldr	r2, [r6, #64]	; 0x40
    4bd6:	4680      	mov	r8, r0
    4bd8:	468b      	mov	fp, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1073
		flags |= 0x02;
		iOmega[X] = (int16)(thisSV_6DOF_GB_BASIC.fOmega[X] * 20.0F);
    4bda:	6d70      	ldr	r0, [r6, #84]	; 0x54
    4bdc:	49bc      	ldr	r1, [pc, #752]	; (4ed0 <PSP_CNFG_FP_REGISTERS_EXIST+0xed0>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1071
		isystick = (uint16)(thisSV_3DOF_Y_BASIC.systick / 20);
#endif
		break;
	case Q6MA:
#ifdef COMPUTE_6DOF_GB_BASIC
		fq = thisSV_6DOF_GB_BASIC.fLPq;
    4bde:	9305      	str	r3, [sp, #20]
    4be0:	9204      	str	r2, [sp, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1073
		flags |= 0x02;
		iOmega[X] = (int16)(thisSV_6DOF_GB_BASIC.fOmega[X] * 20.0F);
    4be2:	f7fc f8d7 	bl	d94 <__aeabi_fmul>
    4be6:	f7fc fb75 	bl	12d4 <__aeabi_f2iz>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1074
		iOmega[Y] = (int16)(thisSV_6DOF_GB_BASIC.fOmega[Y] * 20.0F);
    4bea:	49b9      	ldr	r1, [pc, #740]	; (4ed0 <PSP_CNFG_FP_REGISTERS_EXIST+0xed0>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1073
		break;
	case Q6MA:
#ifdef COMPUTE_6DOF_GB_BASIC
		fq = thisSV_6DOF_GB_BASIC.fLPq;
		flags |= 0x02;
		iOmega[X] = (int16)(thisSV_6DOF_GB_BASIC.fOmega[X] * 20.0F);
    4bec:	8020      	strh	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1074
		iOmega[Y] = (int16)(thisSV_6DOF_GB_BASIC.fOmega[Y] * 20.0F);
    4bee:	6db0      	ldr	r0, [r6, #88]	; 0x58
    4bf0:	f7fc f8d0 	bl	d94 <__aeabi_fmul>
    4bf4:	f7fc fb6e 	bl	12d4 <__aeabi_f2iz>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1075
		iOmega[Z] = (int16)(thisSV_6DOF_GB_BASIC.fOmega[Z] * 20.0F);
    4bf8:	49b5      	ldr	r1, [pc, #724]	; (4ed0 <PSP_CNFG_FP_REGISTERS_EXIST+0xed0>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1074
	case Q6MA:
#ifdef COMPUTE_6DOF_GB_BASIC
		fq = thisSV_6DOF_GB_BASIC.fLPq;
		flags |= 0x02;
		iOmega[X] = (int16)(thisSV_6DOF_GB_BASIC.fOmega[X] * 20.0F);
		iOmega[Y] = (int16)(thisSV_6DOF_GB_BASIC.fOmega[Y] * 20.0F);
    4bfa:	8060      	strh	r0, [r4, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1075
		iOmega[Z] = (int16)(thisSV_6DOF_GB_BASIC.fOmega[Z] * 20.0F);
    4bfc:	6df0      	ldr	r0, [r6, #92]	; 0x5c
    4bfe:	f7fc f8c9 	bl	d94 <__aeabi_fmul>
    4c02:	f7fc fb67 	bl	12d4 <__aeabi_f2iz>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1076
		iPhi = (int16) (10.0F * thisSV_6DOF_GB_BASIC.fLPPhi);
    4c06:	49b3      	ldr	r1, [pc, #716]	; (4ed4 <PSP_CNFG_FP_REGISTERS_EXIST+0xed4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1075
#ifdef COMPUTE_6DOF_GB_BASIC
		fq = thisSV_6DOF_GB_BASIC.fLPq;
		flags |= 0x02;
		iOmega[X] = (int16)(thisSV_6DOF_GB_BASIC.fOmega[X] * 20.0F);
		iOmega[Y] = (int16)(thisSV_6DOF_GB_BASIC.fOmega[Y] * 20.0F);
		iOmega[Z] = (int16)(thisSV_6DOF_GB_BASIC.fOmega[Z] * 20.0F);
    4c08:	80a0      	strh	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1076
		iPhi = (int16) (10.0F * thisSV_6DOF_GB_BASIC.fLPPhi);
    4c0a:	6830      	ldr	r0, [r6, #0]
    4c0c:	f7fc f8c2 	bl	d94 <__aeabi_fmul>
    4c10:	f7fc fb60 	bl	12d4 <__aeabi_f2iz>
    4c14:	4669      	mov	r1, sp
    4c16:	8408      	strh	r0, [r1, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1077
		iThe = (int16) (10.0F * thisSV_6DOF_GB_BASIC.fLPThe);
    4c18:	6870      	ldr	r0, [r6, #4]
    4c1a:	49ae      	ldr	r1, [pc, #696]	; (4ed4 <PSP_CNFG_FP_REGISTERS_EXIST+0xed4>)
    4c1c:	f7fc f8ba 	bl	d94 <__aeabi_fmul>
    4c20:	f7fc fb58 	bl	12d4 <__aeabi_f2iz>
    4c24:	466a      	mov	r2, sp
    4c26:	8510      	strh	r0, [r2, #40]	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1078
		iRho = (int16) (10.0F * thisSV_6DOF_GB_BASIC.fLPRho);
    4c28:	49aa      	ldr	r1, [pc, #680]	; (4ed4 <PSP_CNFG_FP_REGISTERS_EXIST+0xed4>)
    4c2a:	68f0      	ldr	r0, [r6, #12]
    4c2c:	f7fc f8b2 	bl	d94 <__aeabi_fmul>
    4c30:	f7fc fb50 	bl	12d4 <__aeabi_f2iz>
    4c34:	466b      	mov	r3, sp
    4c36:	8618      	strh	r0, [r3, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1079
		iDelta = (int16) (10.0F * thisSV_6DOF_GB_BASIC.fLPDelta);
    4c38:	239c      	movs	r3, #156	; 0x9c
    4c3a:	58f0      	ldr	r0, [r6, r3]
    4c3c:	49a5      	ldr	r1, [pc, #660]	; (4ed4 <PSP_CNFG_FP_REGISTERS_EXIST+0xed4>)
    4c3e:	f7fc f8a9 	bl	d94 <__aeabi_fmul>
    4c42:	f7fc fb47 	bl	12d4 <__aeabi_f2iz>
    4c46:	b280      	uxth	r0, r0
    4c48:	9002      	str	r0, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1080
		isystick = (uint16)(thisSV_6DOF_GB_BASIC.systick / 20);
    4c4a:	2114      	movs	r1, #20
    4c4c:	6e30      	ldr	r0, [r6, #96]	; 0x60
    4c4e:	f7fb fc77 	bl	540 <__aeabi_idiv>
    4c52:	466e      	mov	r6, sp
    4c54:	49a0      	ldr	r1, [pc, #640]	; (4ed8 <PSP_CNFG_FP_REGISTERS_EXIST+0xed8>)
    4c56:	8730      	strh	r0, [r6, #56]	; 0x38
    4c58:	4640      	mov	r0, r8
    4c5a:	f7fc f89b 	bl	d94 <__aeabi_fmul>
    4c5e:	f7fc fb39 	bl	12d4 <__aeabi_f2iz>
    4c62:	b280      	uxth	r0, r0
    4c64:	499c      	ldr	r1, [pc, #624]	; (4ed8 <PSP_CNFG_FP_REGISTERS_EXIST+0xed8>)
    4c66:	4680      	mov	r8, r0
    4c68:	4658      	mov	r0, fp
    4c6a:	f7fc f893 	bl	d94 <__aeabi_fmul>
    4c6e:	f7fc fb31 	bl	12d4 <__aeabi_f2iz>
    4c72:	b280      	uxth	r0, r0
    4c74:	4998      	ldr	r1, [pc, #608]	; (4ed8 <PSP_CNFG_FP_REGISTERS_EXIST+0xed8>)
    4c76:	4683      	mov	fp, r0
    4c78:	9804      	ldr	r0, [sp, #16]
    4c7a:	f7fc f88b 	bl	d94 <__aeabi_fmul>
    4c7e:	f7fc fb29 	bl	12d4 <__aeabi_f2iz>
    4c82:	b280      	uxth	r0, r0
    4c84:	4994      	ldr	r1, [pc, #592]	; (4ed8 <PSP_CNFG_FP_REGISTERS_EXIST+0xed8>)
    4c86:	9001      	str	r0, [sp, #4]
    4c88:	9805      	ldr	r0, [sp, #20]
    4c8a:	f7fc f883 	bl	d94 <__aeabi_fmul>
    4c8e:	f7fc fb21 	bl	12d4 <__aeabi_f2iz>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1082
#endif
		break;
    4c92:	2112      	movs	r1, #18
    4c94:	b280      	uxth	r0, r0
    4c96:	9104      	str	r1, [sp, #16]
    4c98:	f7ff faa3 	bl	41e2 <PSP_CNFG_FP_REGISTERS_EXIST+0x1e2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1291
	// [4-3]: number of active measurements in the magnetic buffer
	sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&(thisMagBuffer.iMagBufferCount), 2);	
	
	// [6-5]: fit error (%) with resolution 0.1% 
	if (thisMagCal.fFitErrorpc > 3276.7F)
		tmpint16 = 32767;
    4c9c:	488f      	ldr	r0, [pc, #572]	; (4edc <PSP_CNFG_FP_REGISTERS_EXIST+0xedc>)
    4c9e:	466e      	mov	r6, sp
    4ca0:	8330      	strh	r0, [r6, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4ca2:	b2c0      	uxtb	r0, r0
    4ca4:	287e      	cmp	r0, #126	; 0x7e
    4ca6:	d001      	beq.n	4cac <PSP_CNFG_FP_REGISTERS_EXIST+0xcac>
    4ca8:	f7ff fb6c 	bl	4384 <PSP_CNFG_FP_REGISTERS_EXIST+0x384>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    4cac:	237d      	movs	r3, #125	; 0x7d
    4cae:	4640      	mov	r0, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    4cb0:	1c7a      	adds	r2, r7, #1
    4cb2:	215e      	movs	r1, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    4cb4:	543b      	strb	r3, [r7, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    4cb6:	5411      	strb	r1, [r2, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4cb8:	4669      	mov	r1, sp
    4cba:	7e4a      	ldrb	r2, [r1, #25]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
    4cbc:	4643      	mov	r3, r8
    4cbe:	3302      	adds	r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4cc0:	2a7e      	cmp	r2, #126	; 0x7e
    4cc2:	d001      	beq.n	4cc8 <PSP_CNFG_FP_REGISTERS_EXIST+0xcc8>
    4cc4:	f7ff fb6c 	bl	43a0 <PSP_CNFG_FP_REGISTERS_EXIST+0x3a0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    4cc8:	227d      	movs	r2, #125	; 0x7d
    4cca:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    4ccc:	1c9a      	adds	r2, r3, #2
    4cce:	4693      	mov	fp, r2
    4cd0:	215e      	movs	r1, #94	; 0x5e
    4cd2:	1c7a      	adds	r2, r7, #1
    4cd4:	54d1      	strb	r1, [r2, r3]
    4cd6:	f7ff fb6a 	bl	43ae <PSP_CNFG_FP_REGISTERS_EXIST+0x3ae>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    4cda:	227d      	movs	r2, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    4cdc:	1c99      	adds	r1, r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    4cde:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    4ce0:	4688      	mov	r8, r1
    4ce2:	1c7a      	adds	r2, r7, #1
    4ce4:	215e      	movs	r1, #94	; 0x5e
    4ce6:	54d1      	strb	r1, [r2, r3]
    4ce8:	f7ff fb34 	bl	4354 <PSP_CNFG_FP_REGISTERS_EXIST+0x354>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    4cec:	237d      	movs	r3, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    4cee:	1c79      	adds	r1, r7, #1
    4cf0:	205e      	movs	r0, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    4cf2:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    4cf4:	1c93      	adds	r3, r2, #2
    4cf6:	5488      	strb	r0, [r1, r2]
    4cf8:	f7ff fb1f 	bl	433a <PSP_CNFG_FP_REGISTERS_EXIST+0x33a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    4cfc:	227d      	movs	r2, #125	; 0x7d
    4cfe:	543a      	strb	r2, [r7, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    4d00:	245e      	movs	r4, #94	; 0x5e
    4d02:	1cf8      	adds	r0, r7, #3
    4d04:	1d1a      	adds	r2, r3, #4
    4d06:	54c4      	strb	r4, [r0, r3]
    4d08:	f7ff fb07 	bl	431a <PSP_CNFG_FP_REGISTERS_EXIST+0x31a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    4d0c:	54b9      	strb	r1, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    4d0e:	205d      	movs	r0, #93	; 0x5d
    4d10:	1c79      	adds	r1, r7, #1
    4d12:	1c93      	adds	r3, r2, #2
    4d14:	5488      	strb	r0, [r1, r2]
    4d16:	f7ff fb10 	bl	433a <PSP_CNFG_FP_REGISTERS_EXIST+0x33a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    4d1a:	5439      	strb	r1, [r7, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    4d1c:	245d      	movs	r4, #93	; 0x5d
    4d1e:	1cf8      	adds	r0, r7, #3
    4d20:	1d1a      	adds	r2, r3, #4
    4d22:	54c4      	strb	r4, [r0, r3]
    4d24:	f7ff faf9 	bl	431a <PSP_CNFG_FP_REGISTERS_EXIST+0x31a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    4d28:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    4d2a:	1c9a      	adds	r2, r3, #2
    4d2c:	4690      	mov	r8, r2
    4d2e:	215d      	movs	r1, #93	; 0x5d
    4d30:	1c7a      	adds	r2, r7, #1
    4d32:	54d1      	strb	r1, [r2, r3]
    4d34:	f7ff fb0e 	bl	4354 <PSP_CNFG_FP_REGISTERS_EXIST+0x354>
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1385
	}

	// wrap the variable ID back to zero if necessary
	globals.MagneticPacketID++;
	if (globals.MagneticPacketID >= (10 + MAGBUFFSIZEX * MAGBUFFSIZEY))
		globals.MagneticPacketID = 0;
    4d38:	2200      	movs	r2, #0
    4d3a:	4654      	mov	r4, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1388

	// [15]: add the tail byte for the magnetic packet type 6
	sUARTOutputBuf[iIndex++] = 0x7E;
    4d3c:	207e      	movs	r0, #126	; 0x7e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1385
	}

	// wrap the variable ID back to zero if necessary
	globals.MagneticPacketID++;
	if (globals.MagneticPacketID >= (10 + MAGBUFFSIZEX * MAGBUFFSIZEY))
		globals.MagneticPacketID = 0;
    4d3e:	80e2      	strh	r2, [r4, #6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1388

	// [15]: add the tail byte for the magnetic packet type 6
	sUARTOutputBuf[iIndex++] = 0x7E;
    4d40:	54f8      	strb	r0, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1398
	// total bytes for packet type 7 is range 0 to 21 inclusive = 22 bytes
	// ************************************************************************

#if defined COMPUTE_6DOF_GY_KALMAN || defined COMPUTE_9DOF_GBY_KALMAN
	// only send this packet if a Kalman filter quaternion is requested
	if ((globals.QuaternionPacketType == Q6AG) || (globals.QuaternionPacketType == Q9))
    4d42:	4655      	mov	r5, sl
    4d44:	7929      	ldrb	r1, [r5, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1388
	globals.MagneticPacketID++;
	if (globals.MagneticPacketID >= (10 + MAGBUFFSIZEX * MAGBUFFSIZEY))
		globals.MagneticPacketID = 0;

	// [15]: add the tail byte for the magnetic packet type 6
	sUARTOutputBuf[iIndex++] = 0x7E;
    4d46:	1c5a      	adds	r2, r3, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1398
	// total bytes for packet type 7 is range 0 to 21 inclusive = 22 bytes
	// ************************************************************************

#if defined COMPUTE_6DOF_GY_KALMAN || defined COMPUTE_9DOF_GBY_KALMAN
	// only send this packet if a Kalman filter quaternion is requested
	if ((globals.QuaternionPacketType == Q6AG) || (globals.QuaternionPacketType == Q9))
    4d48:	1f0c      	subs	r4, r1, #4
    4d4a:	2c01      	cmp	r4, #1
    4d4c:	d901      	bls.n	4d52 <PSP_CNFG_FP_REGISTERS_EXIST+0xd52>
    4d4e:	f7ff fbff 	bl	4550 <PSP_CNFG_FP_REGISTERS_EXIST+0x550>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1401
	{
		// [0]: packet start byte
		sUARTOutputBuf[iIndex++] = 0x7E;
    4d52:	54b8      	strb	r0, [r7, r2]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4d54:	2407      	movs	r4, #7
    4d56:	1cba      	adds	r2, r7, #2
    4d58:	54d4      	strb	r4, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4d5a:	7a2a      	ldrb	r2, [r5, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4d5c:	1cd8      	adds	r0, r3, #3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4d5e:	2a7e      	cmp	r2, #126	; 0x7e
    4d60:	d100      	bne.n	4d64 <PSP_CNFG_FP_REGISTERS_EXIST+0xd64>
    4d62:	e3aa      	b.n	54ba <PSP_CNFG_FP_REGISTERS_EXIST+0x14ba>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4d64:	2a7d      	cmp	r2, #125	; 0x7d
    4d66:	d100      	bne.n	4d6a <PSP_CNFG_FP_REGISTERS_EXIST+0xd6a>
    4d68:	e3ae      	b.n	54c8 <PSP_CNFG_FP_REGISTERS_EXIST+0x14c8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4d6a:	1d1c      	adds	r4, r3, #4
    4d6c:	543a      	strb	r2, [r7, r0]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1409
		tmpuint8 = 0x07;
		sBufAppendItem(sUARTOutputBuf, &iIndex, &tmpuint8, 1);

		// [2]: packet number byte
		sBufAppendItem(sUARTOutputBuf, &iIndex, &(globals.iPacketNumber), 1);
		globals.iPacketNumber++;
    4d6e:	3201      	adds	r2, #1
    4d70:	4656      	mov	r6, sl
    4d72:	7232      	strb	r2, [r6, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1427
			if (globals.QuaternionPacketType == Q9)
				ftmp = thisSV_9DOF_GBY_KALMAN.fThErrPl[i] * 1000.0F;
#endif
			// check for clipping
			if (ftmp > 32767.0F)
				tmpint16 = 32767;
    4d74:	4859      	ldr	r0, [pc, #356]	; (4edc <PSP_CNFG_FP_REGISTERS_EXIST+0xedc>)
    4d76:	4a5a      	ldr	r2, [pc, #360]	; (4ee0 <PSP_CNFG_FP_REGISTERS_EXIST+0xee0>)
    4d78:	4b5a      	ldr	r3, [pc, #360]	; (4ee4 <PSP_CNFG_FP_REGISTERS_EXIST+0xee4>)
    4d7a:	7936      	ldrb	r6, [r6, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1409
		tmpuint8 = 0x07;
		sBufAppendItem(sUARTOutputBuf, &iIndex, &tmpuint8, 1);

		// [2]: packet number byte
		sBufAppendItem(sUARTOutputBuf, &iIndex, &(globals.iPacketNumber), 1);
		globals.iPacketNumber++;
    4d7c:	2500      	movs	r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1427
			if (globals.QuaternionPacketType == Q9)
				ftmp = thisSV_9DOF_GBY_KALMAN.fThErrPl[i] * 1000.0F;
#endif
			// check for clipping
			if (ftmp > 32767.0F)
				tmpint16 = 32767;
    4d7e:	4683      	mov	fp, r0
    4d80:	4691      	mov	r9, r2
    4d82:	4698      	mov	r8, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1418
		// [8-7]: fThErrPl[Z] resolution 0.001 deg
		for (i = X; i <= Z; i++)
		{
			ftmp = 0.0F;
#if defined COMPUTE_6DOF_GY_KALMAN
			if (globals.QuaternionPacketType == Q6AG)
    4d84:	2904      	cmp	r1, #4
    4d86:	d01f      	beq.n	4dc8 <PSP_CNFG_FP_REGISTERS_EXIST+0xdc8>
    4d88:	2000      	movs	r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1422
				ftmp = thisSV_6DOF_GY_KALMAN.fThErrPl[i] * 1000.0F;
#endif
#if defined COMPUTE_9DOF_GBY_KALMAN
			if (globals.QuaternionPacketType == Q9)
    4d8a:	2905      	cmp	r1, #5
    4d8c:	d100      	bne.n	4d90 <PSP_CNFG_FP_REGISTERS_EXIST+0xd90>
    4d8e:	e3f3      	b.n	5578 <PSP_CNFG_FP_REGISTERS_EXIST+0x1578>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1431
			if (ftmp > 32767.0F)
				tmpint16 = 32767;
			else if (ftmp < -32768.0F)
				tmpint16 = -32768;
			else
				tmpint16 = (int16) ftmp;
    4d90:	466a      	mov	r2, sp
    4d92:	8310      	strh	r0, [r2, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4d94:	4668      	mov	r0, sp
    4d96:	7e03      	ldrb	r3, [r0, #24]
    4d98:	2b7e      	cmp	r3, #126	; 0x7e
    4d9a:	d029      	beq.n	4df0 <PSP_CNFG_FP_REGISTERS_EXIST+0xdf0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4d9c:	2b7d      	cmp	r3, #125	; 0x7d
    4d9e:	d101      	bne.n	4da4 <PSP_CNFG_FP_REGISTERS_EXIST+0xda4>
    4da0:	f000 fd2f 	bl	5802 <PSP_CNFG_FP_REGISTERS_EXIST+0x1802>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4da4:	1c62      	adds	r2, r4, #1
    4da6:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4da8:	4669      	mov	r1, sp
    4daa:	7e4b      	ldrb	r3, [r1, #25]
    4dac:	2b7e      	cmp	r3, #126	; 0x7e
    4dae:	d029      	beq.n	4e04 <PSP_CNFG_FP_REGISTERS_EXIST+0xe04>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4db0:	2b7d      	cmp	r3, #125	; 0x7d
    4db2:	d101      	bne.n	4db8 <PSP_CNFG_FP_REGISTERS_EXIST+0xdb8>
    4db4:	f000 fd17 	bl	57e6 <PSP_CNFG_FP_REGISTERS_EXIST+0x17e6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4db8:	1c54      	adds	r4, r2, #1
    4dba:	54bb      	strb	r3, [r7, r2]
    4dbc:	3504      	adds	r5, #4
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1414
		globals.iPacketNumber++;

		// [4-3]: fThErrPl[X] resolution 0.001 deg
		// [6-5]: fThErrPl[Y] resolution 0.001 deg
		// [8-7]: fThErrPl[Z] resolution 0.001 deg
		for (i = X; i <= Z; i++)
    4dbe:	2d0c      	cmp	r5, #12
    4dc0:	d029      	beq.n	4e16 <PSP_CNFG_FP_REGISTERS_EXIST+0xe16>
    4dc2:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1418
		{
			ftmp = 0.0F;
#if defined COMPUTE_6DOF_GY_KALMAN
			if (globals.QuaternionPacketType == Q6AG)
    4dc4:	2904      	cmp	r1, #4
    4dc6:	d1df      	bne.n	4d88 <PSP_CNFG_FP_REGISTERS_EXIST+0xd88>
    4dc8:	4640      	mov	r0, r8
    4dca:	182b      	adds	r3, r5, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1419
				ftmp = thisSV_6DOF_GY_KALMAN.fThErrPl[i] * 1000.0F;
    4dcc:	6f18      	ldr	r0, [r3, #112]	; 0x70
    4dce:	4946      	ldr	r1, [pc, #280]	; (4ee8 <PSP_CNFG_FP_REGISTERS_EXIST+0xee8>)
    4dd0:	f7fb ffe0 	bl	d94 <__aeabi_fmul>
    4dd4:	9002      	str	r0, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1426
#if defined COMPUTE_9DOF_GBY_KALMAN
			if (globals.QuaternionPacketType == Q9)
				ftmp = thisSV_9DOF_GBY_KALMAN.fThErrPl[i] * 1000.0F;
#endif
			// check for clipping
			if (ftmp > 32767.0F)
    4dd6:	4945      	ldr	r1, [pc, #276]	; (4eec <PSP_CNFG_FP_REGISTERS_EXIST+0xeec>)
    4dd8:	f7fb fc78 	bl	6cc <__aeabi_fcmpgt>
    4ddc:	2800      	cmp	r0, #0
    4dde:	d100      	bne.n	4de2 <PSP_CNFG_FP_REGISTERS_EXIST+0xde2>
    4de0:	e378      	b.n	54d4 <PSP_CNFG_FP_REGISTERS_EXIST+0x14d4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1427
				tmpint16 = 32767;
    4de2:	465b      	mov	r3, fp
    4de4:	466a      	mov	r2, sp
    4de6:	8313      	strh	r3, [r2, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4de8:	4668      	mov	r0, sp
    4dea:	7e03      	ldrb	r3, [r0, #24]
    4dec:	2b7e      	cmp	r3, #126	; 0x7e
    4dee:	d1d5      	bne.n	4d9c <PSP_CNFG_FP_REGISTERS_EXIST+0xd9c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    4df0:	237d      	movs	r3, #125	; 0x7d
    4df2:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    4df4:	215e      	movs	r1, #94	; 0x5e
    4df6:	1c7b      	adds	r3, r7, #1
    4df8:	5519      	strb	r1, [r3, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4dfa:	4669      	mov	r1, sp
    4dfc:	7e4b      	ldrb	r3, [r1, #25]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
    4dfe:	1ca2      	adds	r2, r4, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4e00:	2b7e      	cmp	r3, #126	; 0x7e
    4e02:	d1d5      	bne.n	4db0 <PSP_CNFG_FP_REGISTERS_EXIST+0xdb0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    4e04:	237d      	movs	r3, #125	; 0x7d
    4e06:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    4e08:	215e      	movs	r1, #94	; 0x5e
    4e0a:	1c7b      	adds	r3, r7, #1
    4e0c:	3504      	adds	r5, #4
    4e0e:	1c94      	adds	r4, r2, #2
    4e10:	5499      	strb	r1, [r3, r2]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1414
		globals.iPacketNumber++;

		// [4-3]: fThErrPl[X] resolution 0.001 deg
		// [6-5]: fThErrPl[Y] resolution 0.001 deg
		// [8-7]: fThErrPl[Z] resolution 0.001 deg
		for (i = X; i <= Z; i++)
    4e12:	2d0c      	cmp	r5, #12
    4e14:	d1d5      	bne.n	4dc2 <PSP_CNFG_FP_REGISTERS_EXIST+0xdc2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1444
		// [14-13]: fbPl[Z] resolution 0.001 deg/sec
		for (i = X; i <= Z; i++)
		{
			ftmp = 0.0F;
#if defined COMPUTE_6DOF_GY_KALMAN
			if (globals.QuaternionPacketType == Q6AG)
    4e16:	4652      	mov	r2, sl
    4e18:	4e32      	ldr	r6, [pc, #200]	; (4ee4 <PSP_CNFG_FP_REGISTERS_EXIST+0xee4>)
    4e1a:	7912      	ldrb	r2, [r2, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1453
			if (globals.QuaternionPacketType == Q9)
				ftmp = (thisSV_9DOF_GBY_KALMAN.fbPl[i] * 1000.0F);
#endif
			// check for clipping
			if (ftmp > 32767.0F)
				tmpint16 = 32767;
    4e1c:	4b2f      	ldr	r3, [pc, #188]	; (4edc <PSP_CNFG_FP_REGISTERS_EXIST+0xedc>)
    4e1e:	46b3      	mov	fp, r6
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1444
		// [14-13]: fbPl[Z] resolution 0.001 deg/sec
		for (i = X; i <= Z; i++)
		{
			ftmp = 0.0F;
#if defined COMPUTE_6DOF_GY_KALMAN
			if (globals.QuaternionPacketType == Q6AG)
    4e20:	2500      	movs	r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1453
			if (globals.QuaternionPacketType == Q9)
				ftmp = (thisSV_9DOF_GBY_KALMAN.fbPl[i] * 1000.0F);
#endif
			// check for clipping
			if (ftmp > 32767.0F)
				tmpint16 = 32767;
    4e22:	4698      	mov	r8, r3
    4e24:	1c16      	adds	r6, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1444
		// [14-13]: fbPl[Z] resolution 0.001 deg/sec
		for (i = X; i <= Z; i++)
		{
			ftmp = 0.0F;
#if defined COMPUTE_6DOF_GY_KALMAN
			if (globals.QuaternionPacketType == Q6AG)
    4e26:	2e04      	cmp	r6, #4
    4e28:	d100      	bne.n	4e2c <PSP_CNFG_FP_REGISTERS_EXIST+0xe2c>
    4e2a:	e39d      	b.n	5568 <PSP_CNFG_FP_REGISTERS_EXIST+0x1568>
    4e2c:	2000      	movs	r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1448
				ftmp = (thisSV_6DOF_GY_KALMAN.fbPl[i] * 1000.0F);
#endif
#if defined COMPUTE_9DOF_GBY_KALMAN
			if (globals.QuaternionPacketType == Q9)
    4e2e:	2e05      	cmp	r6, #5
    4e30:	d100      	bne.n	4e34 <PSP_CNFG_FP_REGISTERS_EXIST+0xe34>
    4e32:	e37b      	b.n	552c <PSP_CNFG_FP_REGISTERS_EXIST+0x152c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1457
			if (ftmp > 32767.0F)
				tmpint16 = 32767;
			else if (ftmp < -32768.0F)
				tmpint16 = -32768;
			else
				tmpint16 = (int16) ftmp;
    4e34:	466a      	mov	r2, sp
    4e36:	8310      	strh	r0, [r2, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4e38:	4668      	mov	r0, sp
    4e3a:	7e03      	ldrb	r3, [r0, #24]
    4e3c:	2b7e      	cmp	r3, #126	; 0x7e
    4e3e:	d100      	bne.n	4e42 <PSP_CNFG_FP_REGISTERS_EXIST+0xe42>
    4e40:	e36d      	b.n	551e <PSP_CNFG_FP_REGISTERS_EXIST+0x151e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4e42:	2b7d      	cmp	r3, #125	; 0x7d
    4e44:	d101      	bne.n	4e4a <PSP_CNFG_FP_REGISTERS_EXIST+0xe4a>
    4e46:	f000 fcd5 	bl	57f4 <PSP_CNFG_FP_REGISTERS_EXIST+0x17f4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4e4a:	1c62      	adds	r2, r4, #1
    4e4c:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4e4e:	4669      	mov	r1, sp
    4e50:	7e4b      	ldrb	r3, [r1, #25]
    4e52:	2b7e      	cmp	r3, #126	; 0x7e
    4e54:	d100      	bne.n	4e58 <PSP_CNFG_FP_REGISTERS_EXIST+0xe58>
    4e56:	e35b      	b.n	5510 <PSP_CNFG_FP_REGISTERS_EXIST+0x1510>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4e58:	2b7d      	cmp	r3, #125	; 0x7d
    4e5a:	d101      	bne.n	4e60 <PSP_CNFG_FP_REGISTERS_EXIST+0xe60>
    4e5c:	f000 fcdf 	bl	581e <PSP_CNFG_FP_REGISTERS_EXIST+0x181e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4e60:	1c54      	adds	r4, r2, #1
    4e62:	54bb      	strb	r3, [r7, r2]
    4e64:	3504      	adds	r5, #4
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1440
		}

		// [10-9]: fbPl[X] resolution 0.001 deg/sec
		// [12-11]: fbPl[Y] resolution 0.001 deg/sec
		// [14-13]: fbPl[Z] resolution 0.001 deg/sec
		for (i = X; i <= Z; i++)
    4e66:	2d0c      	cmp	r5, #12
    4e68:	d1dd      	bne.n	4e26 <PSP_CNFG_FP_REGISTERS_EXIST+0xe26>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1470
		// [20-19]: fbErrPl[Z] resolution 0.0001deg/s		
		for (i = X; i <= Z; i++)
		{
			ftmp = 0.0F;
#if defined COMPUTE_6DOF_GY_KALMAN
			if (globals.QuaternionPacketType == Q6AG)
    4e6a:	4652      	mov	r2, sl
    4e6c:	4e1c      	ldr	r6, [pc, #112]	; (4ee0 <PSP_CNFG_FP_REGISTERS_EXIST+0xee0>)
    4e6e:	7912      	ldrb	r2, [r2, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1479
			if (globals.QuaternionPacketType == Q9)
				ftmp = (thisSV_9DOF_GBY_KALMAN.fbErrPl[i] * 10000.0F);
#endif
			// check for clipping
			if (ftmp > 32767.0F)
				tmpint16 = 32767;
    4e70:	4b1a      	ldr	r3, [pc, #104]	; (4edc <PSP_CNFG_FP_REGISTERS_EXIST+0xedc>)
    4e72:	481c      	ldr	r0, [pc, #112]	; (4ee4 <PSP_CNFG_FP_REGISTERS_EXIST+0xee4>)
    4e74:	46b2      	mov	sl, r6
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1470
		// [20-19]: fbErrPl[Z] resolution 0.0001deg/s		
		for (i = X; i <= Z; i++)
		{
			ftmp = 0.0F;
#if defined COMPUTE_6DOF_GY_KALMAN
			if (globals.QuaternionPacketType == Q6AG)
    4e76:	2500      	movs	r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1479
			if (globals.QuaternionPacketType == Q9)
				ftmp = (thisSV_9DOF_GBY_KALMAN.fbErrPl[i] * 10000.0F);
#endif
			// check for clipping
			if (ftmp > 32767.0F)
				tmpint16 = 32767;
    4e78:	4698      	mov	r8, r3
    4e7a:	4681      	mov	r9, r0
    4e7c:	1c16      	adds	r6, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1470
		// [20-19]: fbErrPl[Z] resolution 0.0001deg/s		
		for (i = X; i <= Z; i++)
		{
			ftmp = 0.0F;
#if defined COMPUTE_6DOF_GY_KALMAN
			if (globals.QuaternionPacketType == Q6AG)
    4e7e:	2e04      	cmp	r6, #4
    4e80:	d100      	bne.n	4e84 <PSP_CNFG_FP_REGISTERS_EXIST+0xe84>
    4e82:	e3b1      	b.n	55e8 <PSP_CNFG_FP_REGISTERS_EXIST+0x15e8>
    4e84:	2000      	movs	r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1474
				ftmp = (thisSV_6DOF_GY_KALMAN.fbErrPl[i] * 10000.0F);
#endif
#if defined COMPUTE_9DOF_GBY_KALMAN
			if (globals.QuaternionPacketType == Q9)
    4e86:	2e05      	cmp	r6, #5
    4e88:	d100      	bne.n	4e8c <PSP_CNFG_FP_REGISTERS_EXIST+0xe8c>
    4e8a:	e38f      	b.n	55ac <PSP_CNFG_FP_REGISTERS_EXIST+0x15ac>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1483
			if (ftmp > 32767.0F)
				tmpint16 = 32767;
			else if (ftmp < -32768.0F)
				tmpint16 = -32768;
			else
				tmpint16 = (int16) ftmp;
    4e8c:	466b      	mov	r3, sp
    4e8e:	8318      	strh	r0, [r3, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4e90:	4668      	mov	r0, sp
    4e92:	7e03      	ldrb	r3, [r0, #24]
    4e94:	2b7e      	cmp	r3, #126	; 0x7e
    4e96:	d100      	bne.n	4e9a <PSP_CNFG_FP_REGISTERS_EXIST+0xe9a>
    4e98:	e376      	b.n	5588 <PSP_CNFG_FP_REGISTERS_EXIST+0x1588>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4e9a:	2b7d      	cmp	r3, #125	; 0x7d
    4e9c:	d101      	bne.n	4ea2 <PSP_CNFG_FP_REGISTERS_EXIST+0xea2>
    4e9e:	f000 fcb7 	bl	5810 <PSP_CNFG_FP_REGISTERS_EXIST+0x1810>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4ea2:	1c62      	adds	r2, r4, #1
    4ea4:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4ea6:	4669      	mov	r1, sp
    4ea8:	7e4b      	ldrb	r3, [r1, #25]
    4eaa:	2b7e      	cmp	r3, #126	; 0x7e
    4eac:	d100      	bne.n	4eb0 <PSP_CNFG_FP_REGISTERS_EXIST+0xeb0>
    4eae:	e376      	b.n	559e <PSP_CNFG_FP_REGISTERS_EXIST+0x159e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4eb0:	2b7d      	cmp	r3, #125	; 0x7d
    4eb2:	d101      	bne.n	4eb8 <PSP_CNFG_FP_REGISTERS_EXIST+0xeb8>
    4eb4:	f000 fc90 	bl	57d8 <PSP_CNFG_FP_REGISTERS_EXIST+0x17d8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4eb8:	1c54      	adds	r4, r2, #1
    4eba:	54bb      	strb	r3, [r7, r2]
    4ebc:	3504      	adds	r5, #4
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1466
		}

		// [16-15]: fbErrPl[X] resolution 0.0001deg/s
		// [18-17]: fbErrPl[Y] resolution 0.0001deg/s
		// [20-19]: fbErrPl[Z] resolution 0.0001deg/s		
		for (i = X; i <= Z; i++)
    4ebe:	2d0c      	cmp	r5, #12
    4ec0:	d1dd      	bne.n	4e7e <PSP_CNFG_FP_REGISTERS_EXIST+0xe7e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1490
			// add the data to the packet
			sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);
		}

		// [21]: add the tail byte for the Kalman packet type 7
		sUARTOutputBuf[iIndex++] = 0x7E;
    4ec2:	237e      	movs	r3, #126	; 0x7e
    4ec4:	1c62      	adds	r2, r4, #1
    4ec6:	553b      	strb	r3, [r7, r4]
    4ec8:	f7ff fb42 	bl	4550 <PSP_CNFG_FP_REGISTERS_EXIST+0x550>
    4ecc:	1ffff028 	.word	0x1ffff028
    4ed0:	41a00000 	.word	0x41a00000
    4ed4:	41200000 	.word	0x41200000
    4ed8:	46ea6000 	.word	0x46ea6000
    4edc:	00007fff 	.word	0x00007fff
    4ee0:	1ffff540 	.word	0x1ffff540
    4ee4:	1ffffd78 	.word	0x1ffffd78
    4ee8:	447a0000 	.word	0x447a0000
    4eec:	46fffe00 	.word	0x46fffe00
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1212
	// ************************************************************************

	if 	(globals.RPCPacketOn)
	{
		// [0]: packet start byte
		sUARTOutputBuf[iIndex++] = 0x7E;
    4ef0:	227e      	movs	r2, #126	; 0x7e
    4ef2:	54fa      	strb	r2, [r7, r3]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4ef4:	2104      	movs	r1, #4
    4ef6:	1c7a      	adds	r2, r7, #1
    4ef8:	54d1      	strb	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4efa:	4652      	mov	r2, sl
    4efc:	7a11      	ldrb	r1, [r2, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4efe:	1c98      	adds	r0, r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4f00:	297e      	cmp	r1, #126	; 0x7e
    4f02:	d079      	beq.n	4ff8 <PSP_CNFG_FP_REGISTERS_EXIST+0xff8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4f04:	297d      	cmp	r1, #125	; 0x7d
    4f06:	d100      	bne.n	4f0a <PSP_CNFG_FP_REGISTERS_EXIST+0xf0a>
    4f08:	e0b2      	b.n	5070 <PSP_CNFG_FP_REGISTERS_EXIST+0x1070>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4f0a:	1cda      	adds	r2, r3, #3
    4f0c:	5439      	strb	r1, [r7, r0]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1220
		tmpuint8 = 0x04;
		sBufAppendItem(sUARTOutputBuf, &iIndex, &tmpuint8, 1);

		// [2]: packet number byte
		sBufAppendItem(sUARTOutputBuf, &iIndex, &(globals.iPacketNumber), 1);
		globals.iPacketNumber++;
    4f0e:	3101      	adds	r1, #1
    4f10:	4653      	mov	r3, sl
    4f12:	7219      	strb	r1, [r3, #8]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4f14:	2370      	movs	r3, #112	; 0x70
    4f16:	5ce9      	ldrb	r1, [r5, r3]
    4f18:	297e      	cmp	r1, #126	; 0x7e
    4f1a:	d07a      	beq.n	5012 <PSP_CNFG_FP_REGISTERS_EXIST+0x1012>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4f1c:	297d      	cmp	r1, #125	; 0x7d
    4f1e:	d100      	bne.n	4f22 <PSP_CNFG_FP_REGISTERS_EXIST+0xf22>
    4f20:	e0b2      	b.n	5088 <PSP_CNFG_FP_REGISTERS_EXIST+0x1088>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4f22:	1c53      	adds	r3, r2, #1
    4f24:	54b9      	strb	r1, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4f26:	2271      	movs	r2, #113	; 0x71
    4f28:	5ca9      	ldrb	r1, [r5, r2]
    4f2a:	297e      	cmp	r1, #126	; 0x7e
    4f2c:	d07b      	beq.n	5026 <PSP_CNFG_FP_REGISTERS_EXIST+0x1026>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4f2e:	297d      	cmp	r1, #125	; 0x7d
    4f30:	d100      	bne.n	4f34 <PSP_CNFG_FP_REGISTERS_EXIST+0xf34>
    4f32:	e0a3      	b.n	507c <PSP_CNFG_FP_REGISTERS_EXIST+0x107c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4f34:	1c5a      	adds	r2, r3, #1
    4f36:	54f9      	strb	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4f38:	2372      	movs	r3, #114	; 0x72
    4f3a:	5ce9      	ldrb	r1, [r5, r3]
    4f3c:	297e      	cmp	r1, #126	; 0x7e
    4f3e:	d07c      	beq.n	503a <PSP_CNFG_FP_REGISTERS_EXIST+0x103a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4f40:	297d      	cmp	r1, #125	; 0x7d
    4f42:	d100      	bne.n	4f46 <PSP_CNFG_FP_REGISTERS_EXIST+0xf46>
    4f44:	e0a6      	b.n	5094 <PSP_CNFG_FP_REGISTERS_EXIST+0x1094>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4f46:	1c53      	adds	r3, r2, #1
    4f48:	54b9      	strb	r1, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4f4a:	2273      	movs	r2, #115	; 0x73
    4f4c:	5caa      	ldrb	r2, [r5, r2]
    4f4e:	2a7e      	cmp	r2, #126	; 0x7e
    4f50:	d07d      	beq.n	504e <PSP_CNFG_FP_REGISTERS_EXIST+0x104e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4f52:	2a7d      	cmp	r2, #125	; 0x7d
    4f54:	d100      	bne.n	4f58 <PSP_CNFG_FP_REGISTERS_EXIST+0xf58>
    4f56:	e0a3      	b.n	50a0 <PSP_CNFG_FP_REGISTERS_EXIST+0x10a0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4f58:	1c59      	adds	r1, r3, #1
    4f5a:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4f5c:	ac08      	add	r4, sp, #32
    4f5e:	7823      	ldrb	r3, [r4, #0]
    4f60:	2b7e      	cmp	r3, #126	; 0x7e
    4f62:	d07e      	beq.n	5062 <PSP_CNFG_FP_REGISTERS_EXIST+0x1062>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4f64:	2b7d      	cmp	r3, #125	; 0x7d
    4f66:	d101      	bne.n	4f6c <PSP_CNFG_FP_REGISTERS_EXIST+0xf6c>
    4f68:	f000 fd3b 	bl	59e2 <PSP_CNFG_FP_REGISTERS_EXIST+0x19e2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4f6c:	1c4a      	adds	r2, r1, #1
    4f6e:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4f70:	466b      	mov	r3, sp
    4f72:	3321      	adds	r3, #33	; 0x21
    4f74:	781b      	ldrb	r3, [r3, #0]
    4f76:	2b7e      	cmp	r3, #126	; 0x7e
    4f78:	d101      	bne.n	4f7e <PSP_CNFG_FP_REGISTERS_EXIST+0xf7e>
    4f7a:	f000 fca5 	bl	58c8 <PSP_CNFG_FP_REGISTERS_EXIST+0x18c8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4f7e:	2b7d      	cmp	r3, #125	; 0x7d
    4f80:	d101      	bne.n	4f86 <PSP_CNFG_FP_REGISTERS_EXIST+0xf86>
    4f82:	f000 fd04 	bl	598e <PSP_CNFG_FP_REGISTERS_EXIST+0x198e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4f86:	1c51      	adds	r1, r2, #1
    4f88:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4f8a:	ae0a      	add	r6, sp, #40	; 0x28
    4f8c:	7833      	ldrb	r3, [r6, #0]
    4f8e:	2b7e      	cmp	r3, #126	; 0x7e
    4f90:	d101      	bne.n	4f96 <PSP_CNFG_FP_REGISTERS_EXIST+0xf96>
    4f92:	f000 fca9 	bl	58e8 <PSP_CNFG_FP_REGISTERS_EXIST+0x18e8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4f96:	2b7d      	cmp	r3, #125	; 0x7d
    4f98:	d101      	bne.n	4f9e <PSP_CNFG_FP_REGISTERS_EXIST+0xf9e>
    4f9a:	f000 fd29 	bl	59f0 <PSP_CNFG_FP_REGISTERS_EXIST+0x19f0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4f9e:	1c4a      	adds	r2, r1, #1
    4fa0:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4fa2:	466b      	mov	r3, sp
    4fa4:	3329      	adds	r3, #41	; 0x29
    4fa6:	781b      	ldrb	r3, [r3, #0]
    4fa8:	2b7e      	cmp	r3, #126	; 0x7e
    4faa:	d101      	bne.n	4fb0 <PSP_CNFG_FP_REGISTERS_EXIST+0xfb0>
    4fac:	f000 fc94 	bl	58d8 <PSP_CNFG_FP_REGISTERS_EXIST+0x18d8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4fb0:	2b7d      	cmp	r3, #125	; 0x7d
    4fb2:	d101      	bne.n	4fb8 <PSP_CNFG_FP_REGISTERS_EXIST+0xfb8>
    4fb4:	f000 fcf9 	bl	59aa <PSP_CNFG_FP_REGISTERS_EXIST+0x19aa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4fb8:	1c51      	adds	r1, r2, #1
    4fba:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4fbc:	a80c      	add	r0, sp, #48	; 0x30
    4fbe:	7803      	ldrb	r3, [r0, #0]
    4fc0:	2b7e      	cmp	r3, #126	; 0x7e
    4fc2:	d101      	bne.n	4fc8 <PSP_CNFG_FP_REGISTERS_EXIST+0xfc8>
    4fc4:	f000 fca0 	bl	5908 <PSP_CNFG_FP_REGISTERS_EXIST+0x1908>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4fc8:	2b7d      	cmp	r3, #125	; 0x7d
    4fca:	d101      	bne.n	4fd0 <PSP_CNFG_FP_REGISTERS_EXIST+0xfd0>
    4fcc:	f000 fce6 	bl	599c <PSP_CNFG_FP_REGISTERS_EXIST+0x199c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4fd0:	1c4a      	adds	r2, r1, #1
    4fd2:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    4fd4:	466b      	mov	r3, sp
    4fd6:	3331      	adds	r3, #49	; 0x31
    4fd8:	781b      	ldrb	r3, [r3, #0]
    4fda:	2b7e      	cmp	r3, #126	; 0x7e
    4fdc:	d101      	bne.n	4fe2 <PSP_CNFG_FP_REGISTERS_EXIST+0xfe2>
    4fde:	f000 fc8b 	bl	58f8 <PSP_CNFG_FP_REGISTERS_EXIST+0x18f8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    4fe2:	2b7d      	cmp	r3, #125	; 0x7d
    4fe4:	d101      	bne.n	4fea <PSP_CNFG_FP_REGISTERS_EXIST+0xfea>
    4fe6:	f000 fcf5 	bl	59d4 <PSP_CNFG_FP_REGISTERS_EXIST+0x19d4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    4fea:	1c51      	adds	r1, r2, #1
    4fec:	54bb      	strb	r3, [r7, r2]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1231
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&iPhi, 2);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&iThe, 2);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&iRho, 2);

		// [13]: add the tail byte for the roll, pitch, compass angle packet type 4
		sUARTOutputBuf[iIndex++] = 0x7E;
    4fee:	227e      	movs	r2, #126	; 0x7e
    4ff0:	1c4b      	adds	r3, r1, #1
    4ff2:	547a      	strb	r2, [r7, r1]
    4ff4:	f7ff f975 	bl	42e2 <PSP_CNFG_FP_REGISTERS_EXIST+0x2e2>
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    4ff8:	227d      	movs	r2, #125	; 0x7d
    4ffa:	543a      	strb	r2, [r7, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    4ffc:	245e      	movs	r4, #94	; 0x5e
    4ffe:	1cf8      	adds	r0, r7, #3
    5000:	54c4      	strb	r4, [r0, r3]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1220
		tmpuint8 = 0x04;
		sBufAppendItem(sUARTOutputBuf, &iIndex, &tmpuint8, 1);

		// [2]: packet number byte
		sBufAppendItem(sUARTOutputBuf, &iIndex, &(globals.iPacketNumber), 1);
		globals.iPacketNumber++;
    5002:	3101      	adds	r1, #1
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
    5004:	1d1a      	adds	r2, r3, #4
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1220
		tmpuint8 = 0x04;
		sBufAppendItem(sUARTOutputBuf, &iIndex, &tmpuint8, 1);

		// [2]: packet number byte
		sBufAppendItem(sUARTOutputBuf, &iIndex, &(globals.iPacketNumber), 1);
		globals.iPacketNumber++;
    5006:	4653      	mov	r3, sl
    5008:	7219      	strb	r1, [r3, #8]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    500a:	2370      	movs	r3, #112	; 0x70
    500c:	5ce9      	ldrb	r1, [r5, r3]
    500e:	297e      	cmp	r1, #126	; 0x7e
    5010:	d184      	bne.n	4f1c <PSP_CNFG_FP_REGISTERS_EXIST+0xf1c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    5012:	237d      	movs	r3, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5014:	1c79      	adds	r1, r7, #1
    5016:	205e      	movs	r0, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5018:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    501a:	5488      	strb	r0, [r1, r2]
    501c:	1c93      	adds	r3, r2, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    501e:	2271      	movs	r2, #113	; 0x71
    5020:	5ca9      	ldrb	r1, [r5, r2]
    5022:	297e      	cmp	r1, #126	; 0x7e
    5024:	d183      	bne.n	4f2e <PSP_CNFG_FP_REGISTERS_EXIST+0xf2e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    5026:	227d      	movs	r2, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5028:	1c79      	adds	r1, r7, #1
    502a:	205e      	movs	r0, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    502c:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    502e:	54c8      	strb	r0, [r1, r3]
    5030:	1c9a      	adds	r2, r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    5032:	2372      	movs	r3, #114	; 0x72
    5034:	5ce9      	ldrb	r1, [r5, r3]
    5036:	297e      	cmp	r1, #126	; 0x7e
    5038:	d182      	bne.n	4f40 <PSP_CNFG_FP_REGISTERS_EXIST+0xf40>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    503a:	237d      	movs	r3, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    503c:	1c79      	adds	r1, r7, #1
    503e:	205e      	movs	r0, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5040:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5042:	5488      	strb	r0, [r1, r2]
    5044:	1c93      	adds	r3, r2, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    5046:	2273      	movs	r2, #115	; 0x73
    5048:	5caa      	ldrb	r2, [r5, r2]
    504a:	2a7e      	cmp	r2, #126	; 0x7e
    504c:	d181      	bne.n	4f52 <PSP_CNFG_FP_REGISTERS_EXIST+0xf52>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    504e:	227d      	movs	r2, #125	; 0x7d
    5050:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5052:	205e      	movs	r0, #94	; 0x5e
    5054:	1c7a      	adds	r2, r7, #1
    5056:	54d0      	strb	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    5058:	ac08      	add	r4, sp, #32
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
    505a:	1c99      	adds	r1, r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    505c:	7823      	ldrb	r3, [r4, #0]
    505e:	2b7e      	cmp	r3, #126	; 0x7e
    5060:	d180      	bne.n	4f64 <PSP_CNFG_FP_REGISTERS_EXIST+0xf64>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    5062:	237d      	movs	r3, #125	; 0x7d
    5064:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5066:	205e      	movs	r0, #94	; 0x5e
    5068:	1c7b      	adds	r3, r7, #1
    506a:	1c8a      	adds	r2, r1, #2
    506c:	5458      	strb	r0, [r3, r1]
    506e:	e77f      	b.n	4f70 <PSP_CNFG_FP_REGISTERS_EXIST+0xf70>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5070:	5439      	strb	r1, [r7, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5072:	245d      	movs	r4, #93	; 0x5d
    5074:	1cf8      	adds	r0, r7, #3
    5076:	1d1a      	adds	r2, r3, #4
    5078:	54c4      	strb	r4, [r0, r3]
    507a:	e748      	b.n	4f0e <PSP_CNFG_FP_REGISTERS_EXIST+0xf0e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    507c:	54f9      	strb	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    507e:	205d      	movs	r0, #93	; 0x5d
    5080:	1c79      	adds	r1, r7, #1
    5082:	1c9a      	adds	r2, r3, #2
    5084:	54c8      	strb	r0, [r1, r3]
    5086:	e757      	b.n	4f38 <PSP_CNFG_FP_REGISTERS_EXIST+0xf38>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5088:	54b9      	strb	r1, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    508a:	205d      	movs	r0, #93	; 0x5d
    508c:	1c79      	adds	r1, r7, #1
    508e:	1c93      	adds	r3, r2, #2
    5090:	5488      	strb	r0, [r1, r2]
    5092:	e748      	b.n	4f26 <PSP_CNFG_FP_REGISTERS_EXIST+0xf26>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5094:	54b9      	strb	r1, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5096:	205d      	movs	r0, #93	; 0x5d
    5098:	1c79      	adds	r1, r7, #1
    509a:	1c93      	adds	r3, r2, #2
    509c:	5488      	strb	r0, [r1, r2]
    509e:	e754      	b.n	4f4a <PSP_CNFG_FP_REGISTERS_EXIST+0xf4a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    50a0:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    50a2:	205d      	movs	r0, #93	; 0x5d
    50a4:	1c7a      	adds	r2, r7, #1
    50a6:	1c99      	adds	r1, r3, #2
    50a8:	54d0      	strb	r0, [r2, r3]
    50aa:	e757      	b.n	4f5c <PSP_CNFG_FP_REGISTERS_EXIST+0xf5c>
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1182
	// ************************************************************************

	if (globals.AngularVelocityPacketOn)
	{
		// [0]: packet start byte
		sUARTOutputBuf[iIndex++] = 0x7E;
    50ac:	227e      	movs	r2, #126	; 0x7e
    50ae:	54fa      	strb	r2, [r7, r3]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    50b0:	2103      	movs	r1, #3
    50b2:	1c7a      	adds	r2, r7, #1
    50b4:	54d1      	strb	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    50b6:	7a31      	ldrb	r1, [r6, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    50b8:	1c98      	adds	r0, r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    50ba:	297e      	cmp	r1, #126	; 0x7e
    50bc:	d072      	beq.n	51a4 <PSP_CNFG_FP_REGISTERS_EXIST+0x11a4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    50be:	297d      	cmp	r1, #125	; 0x7d
    50c0:	d100      	bne.n	50c4 <PSP_CNFG_FP_REGISTERS_EXIST+0x10c4>
    50c2:	e0b0      	b.n	5226 <PSP_CNFG_FP_REGISTERS_EXIST+0x1226>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    50c4:	1cda      	adds	r2, r3, #3
    50c6:	5439      	strb	r1, [r7, r0]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1190
		tmpuint8 = 0x03;
		sBufAppendItem(sUARTOutputBuf, &iIndex, &tmpuint8, 1);

		// [2]: packet number byte
		sBufAppendItem(sUARTOutputBuf, &iIndex, &(globals.iPacketNumber), 1);
		globals.iPacketNumber++;
    50c8:	3101      	adds	r1, #1
    50ca:	4650      	mov	r0, sl
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    50cc:	2370      	movs	r3, #112	; 0x70
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1190
		tmpuint8 = 0x03;
		sBufAppendItem(sUARTOutputBuf, &iIndex, &tmpuint8, 1);

		// [2]: packet number byte
		sBufAppendItem(sUARTOutputBuf, &iIndex, &(globals.iPacketNumber), 1);
		globals.iPacketNumber++;
    50ce:	7201      	strb	r1, [r0, #8]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    50d0:	5ce9      	ldrb	r1, [r5, r3]
    50d2:	297e      	cmp	r1, #126	; 0x7e
    50d4:	d073      	beq.n	51be <PSP_CNFG_FP_REGISTERS_EXIST+0x11be>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    50d6:	297d      	cmp	r1, #125	; 0x7d
    50d8:	d100      	bne.n	50dc <PSP_CNFG_FP_REGISTERS_EXIST+0x10dc>
    50da:	e09e      	b.n	521a <PSP_CNFG_FP_REGISTERS_EXIST+0x121a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    50dc:	1c53      	adds	r3, r2, #1
    50de:	54b9      	strb	r1, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    50e0:	2271      	movs	r2, #113	; 0x71
    50e2:	5ca9      	ldrb	r1, [r5, r2]
    50e4:	297e      	cmp	r1, #126	; 0x7e
    50e6:	d074      	beq.n	51d2 <PSP_CNFG_FP_REGISTERS_EXIST+0x11d2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    50e8:	297d      	cmp	r1, #125	; 0x7d
    50ea:	d100      	bne.n	50ee <PSP_CNFG_FP_REGISTERS_EXIST+0x10ee>
    50ec:	e0a7      	b.n	523e <PSP_CNFG_FP_REGISTERS_EXIST+0x123e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    50ee:	1c5a      	adds	r2, r3, #1
    50f0:	54f9      	strb	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    50f2:	2372      	movs	r3, #114	; 0x72
    50f4:	5ce9      	ldrb	r1, [r5, r3]
    50f6:	297e      	cmp	r1, #126	; 0x7e
    50f8:	d075      	beq.n	51e6 <PSP_CNFG_FP_REGISTERS_EXIST+0x11e6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    50fa:	297d      	cmp	r1, #125	; 0x7d
    50fc:	d100      	bne.n	5100 <PSP_CNFG_FP_REGISTERS_EXIST+0x1100>
    50fe:	e098      	b.n	5232 <PSP_CNFG_FP_REGISTERS_EXIST+0x1232>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    5100:	1c53      	adds	r3, r2, #1
    5102:	54b9      	strb	r1, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    5104:	2273      	movs	r2, #115	; 0x73
    5106:	5caa      	ldrb	r2, [r5, r2]
    5108:	2a7e      	cmp	r2, #126	; 0x7e
    510a:	d076      	beq.n	51fa <PSP_CNFG_FP_REGISTERS_EXIST+0x11fa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    510c:	2a7d      	cmp	r2, #125	; 0x7d
    510e:	d100      	bne.n	5112 <PSP_CNFG_FP_REGISTERS_EXIST+0x1112>
    5110:	e09b      	b.n	524a <PSP_CNFG_FP_REGISTERS_EXIST+0x124a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    5112:	1c59      	adds	r1, r3, #1
    5114:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    5116:	7823      	ldrb	r3, [r4, #0]
    5118:	2b7e      	cmp	r3, #126	; 0x7e
    511a:	d077      	beq.n	520c <PSP_CNFG_FP_REGISTERS_EXIST+0x120c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    511c:	2b7d      	cmp	r3, #125	; 0x7d
    511e:	d101      	bne.n	5124 <PSP_CNFG_FP_REGISTERS_EXIST+0x1124>
    5120:	f000 fc27 	bl	5972 <PSP_CNFG_FP_REGISTERS_EXIST+0x1972>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    5124:	1c4a      	adds	r2, r1, #1
    5126:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    5128:	466b      	mov	r3, sp
    512a:	3341      	adds	r3, #65	; 0x41
    512c:	781b      	ldrb	r3, [r3, #0]
    512e:	2b7e      	cmp	r3, #126	; 0x7e
    5130:	d100      	bne.n	5134 <PSP_CNFG_FP_REGISTERS_EXIST+0x1134>
    5132:	e3a5      	b.n	5880 <PSP_CNFG_FP_REGISTERS_EXIST+0x1880>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    5134:	2b7d      	cmp	r3, #125	; 0x7d
    5136:	d101      	bne.n	513c <PSP_CNFG_FP_REGISTERS_EXIST+0x113c>
    5138:	f000 fc45 	bl	59c6 <PSP_CNFG_FP_REGISTERS_EXIST+0x19c6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    513c:	1c51      	adds	r1, r2, #1
    513e:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    5140:	466b      	mov	r3, sp
    5142:	3342      	adds	r3, #66	; 0x42
    5144:	781b      	ldrb	r3, [r3, #0]
    5146:	2b7e      	cmp	r3, #126	; 0x7e
    5148:	d100      	bne.n	514c <PSP_CNFG_FP_REGISTERS_EXIST+0x114c>
    514a:	e3a7      	b.n	589c <PSP_CNFG_FP_REGISTERS_EXIST+0x189c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    514c:	2b7d      	cmp	r3, #125	; 0x7d
    514e:	d101      	bne.n	5154 <PSP_CNFG_FP_REGISTERS_EXIST+0x1154>
    5150:	f000 fc16 	bl	5980 <PSP_CNFG_FP_REGISTERS_EXIST+0x1980>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    5154:	1c4a      	adds	r2, r1, #1
    5156:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    5158:	466b      	mov	r3, sp
    515a:	3343      	adds	r3, #67	; 0x43
    515c:	781b      	ldrb	r3, [r3, #0]
    515e:	2b7e      	cmp	r3, #126	; 0x7e
    5160:	d100      	bne.n	5164 <PSP_CNFG_FP_REGISTERS_EXIST+0x1164>
    5162:	e394      	b.n	588e <PSP_CNFG_FP_REGISTERS_EXIST+0x188e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    5164:	2b7d      	cmp	r3, #125	; 0x7d
    5166:	d100      	bne.n	516a <PSP_CNFG_FP_REGISTERS_EXIST+0x116a>
    5168:	e3eb      	b.n	5942 <PSP_CNFG_FP_REGISTERS_EXIST+0x1942>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    516a:	1c51      	adds	r1, r2, #1
    516c:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    516e:	ab11      	add	r3, sp, #68	; 0x44
    5170:	781b      	ldrb	r3, [r3, #0]
    5172:	2b7e      	cmp	r3, #126	; 0x7e
    5174:	d100      	bne.n	5178 <PSP_CNFG_FP_REGISTERS_EXIST+0x1178>
    5176:	e3d6      	b.n	5926 <PSP_CNFG_FP_REGISTERS_EXIST+0x1926>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    5178:	2b7d      	cmp	r3, #125	; 0x7d
    517a:	d101      	bne.n	5180 <PSP_CNFG_FP_REGISTERS_EXIST+0x1180>
    517c:	f000 fc1c 	bl	59b8 <PSP_CNFG_FP_REGISTERS_EXIST+0x19b8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    5180:	1c4a      	adds	r2, r1, #1
    5182:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    5184:	466b      	mov	r3, sp
    5186:	3345      	adds	r3, #69	; 0x45
    5188:	781b      	ldrb	r3, [r3, #0]
    518a:	2b7e      	cmp	r3, #126	; 0x7e
    518c:	d100      	bne.n	5190 <PSP_CNFG_FP_REGISTERS_EXIST+0x1190>
    518e:	e3c3      	b.n	5918 <PSP_CNFG_FP_REGISTERS_EXIST+0x1918>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    5190:	2b7d      	cmp	r3, #125	; 0x7d
    5192:	d100      	bne.n	5196 <PSP_CNFG_FP_REGISTERS_EXIST+0x1196>
    5194:	e3e7      	b.n	5966 <PSP_CNFG_FP_REGISTERS_EXIST+0x1966>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    5196:	1c51      	adds	r1, r2, #1
    5198:	54bb      	strb	r3, [r7, r2]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1201
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&iOmega[X], 2);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&iOmega[Y], 2);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&iOmega[Z], 2);

		// [13]: add the tail byte for the angular velocity packet type 3
		sUARTOutputBuf[iIndex++] = 0x7E;
    519a:	227e      	movs	r2, #126	; 0x7e
    519c:	1c4b      	adds	r3, r1, #1
    519e:	547a      	strb	r2, [r7, r1]
    51a0:	f7ff f899 	bl	42d6 <PSP_CNFG_FP_REGISTERS_EXIST+0x2d6>
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    51a4:	227d      	movs	r2, #125	; 0x7d
    51a6:	543a      	strb	r2, [r7, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    51a8:	265e      	movs	r6, #94	; 0x5e
    51aa:	1cf8      	adds	r0, r7, #3
    51ac:	54c6      	strb	r6, [r0, r3]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1190
		tmpuint8 = 0x03;
		sBufAppendItem(sUARTOutputBuf, &iIndex, &tmpuint8, 1);

		// [2]: packet number byte
		sBufAppendItem(sUARTOutputBuf, &iIndex, &(globals.iPacketNumber), 1);
		globals.iPacketNumber++;
    51ae:	3101      	adds	r1, #1
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
    51b0:	1d1a      	adds	r2, r3, #4
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1190
		tmpuint8 = 0x03;
		sBufAppendItem(sUARTOutputBuf, &iIndex, &tmpuint8, 1);

		// [2]: packet number byte
		sBufAppendItem(sUARTOutputBuf, &iIndex, &(globals.iPacketNumber), 1);
		globals.iPacketNumber++;
    51b2:	4650      	mov	r0, sl
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    51b4:	2370      	movs	r3, #112	; 0x70
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1190
		tmpuint8 = 0x03;
		sBufAppendItem(sUARTOutputBuf, &iIndex, &tmpuint8, 1);

		// [2]: packet number byte
		sBufAppendItem(sUARTOutputBuf, &iIndex, &(globals.iPacketNumber), 1);
		globals.iPacketNumber++;
    51b6:	7201      	strb	r1, [r0, #8]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    51b8:	5ce9      	ldrb	r1, [r5, r3]
    51ba:	297e      	cmp	r1, #126	; 0x7e
    51bc:	d18b      	bne.n	50d6 <PSP_CNFG_FP_REGISTERS_EXIST+0x10d6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    51be:	237d      	movs	r3, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    51c0:	1c79      	adds	r1, r7, #1
    51c2:	205e      	movs	r0, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    51c4:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    51c6:	5488      	strb	r0, [r1, r2]
    51c8:	1c93      	adds	r3, r2, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    51ca:	2271      	movs	r2, #113	; 0x71
    51cc:	5ca9      	ldrb	r1, [r5, r2]
    51ce:	297e      	cmp	r1, #126	; 0x7e
    51d0:	d18a      	bne.n	50e8 <PSP_CNFG_FP_REGISTERS_EXIST+0x10e8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    51d2:	227d      	movs	r2, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    51d4:	1c79      	adds	r1, r7, #1
    51d6:	205e      	movs	r0, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    51d8:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    51da:	54c8      	strb	r0, [r1, r3]
    51dc:	1c9a      	adds	r2, r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    51de:	2372      	movs	r3, #114	; 0x72
    51e0:	5ce9      	ldrb	r1, [r5, r3]
    51e2:	297e      	cmp	r1, #126	; 0x7e
    51e4:	d189      	bne.n	50fa <PSP_CNFG_FP_REGISTERS_EXIST+0x10fa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    51e6:	237d      	movs	r3, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    51e8:	1c79      	adds	r1, r7, #1
    51ea:	205e      	movs	r0, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    51ec:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    51ee:	5488      	strb	r0, [r1, r2]
    51f0:	1c93      	adds	r3, r2, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    51f2:	2273      	movs	r2, #115	; 0x73
    51f4:	5caa      	ldrb	r2, [r5, r2]
    51f6:	2a7e      	cmp	r2, #126	; 0x7e
    51f8:	d188      	bne.n	510c <PSP_CNFG_FP_REGISTERS_EXIST+0x110c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    51fa:	227d      	movs	r2, #125	; 0x7d
    51fc:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    51fe:	205e      	movs	r0, #94	; 0x5e
    5200:	1c7a      	adds	r2, r7, #1
    5202:	54d0      	strb	r0, [r2, r3]
    5204:	1c99      	adds	r1, r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    5206:	7823      	ldrb	r3, [r4, #0]
    5208:	2b7e      	cmp	r3, #126	; 0x7e
    520a:	d187      	bne.n	511c <PSP_CNFG_FP_REGISTERS_EXIST+0x111c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    520c:	237d      	movs	r3, #125	; 0x7d
    520e:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5210:	205e      	movs	r0, #94	; 0x5e
    5212:	1c7b      	adds	r3, r7, #1
    5214:	1c8a      	adds	r2, r1, #2
    5216:	5458      	strb	r0, [r3, r1]
    5218:	e786      	b.n	5128 <PSP_CNFG_FP_REGISTERS_EXIST+0x1128>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    521a:	54b9      	strb	r1, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    521c:	205d      	movs	r0, #93	; 0x5d
    521e:	1c79      	adds	r1, r7, #1
    5220:	1c93      	adds	r3, r2, #2
    5222:	5488      	strb	r0, [r1, r2]
    5224:	e75c      	b.n	50e0 <PSP_CNFG_FP_REGISTERS_EXIST+0x10e0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5226:	5439      	strb	r1, [r7, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5228:	265d      	movs	r6, #93	; 0x5d
    522a:	1cf8      	adds	r0, r7, #3
    522c:	1d1a      	adds	r2, r3, #4
    522e:	54c6      	strb	r6, [r0, r3]
    5230:	e74a      	b.n	50c8 <PSP_CNFG_FP_REGISTERS_EXIST+0x10c8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5232:	54b9      	strb	r1, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5234:	205d      	movs	r0, #93	; 0x5d
    5236:	1c79      	adds	r1, r7, #1
    5238:	1c93      	adds	r3, r2, #2
    523a:	5488      	strb	r0, [r1, r2]
    523c:	e762      	b.n	5104 <PSP_CNFG_FP_REGISTERS_EXIST+0x1104>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    523e:	54f9      	strb	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5240:	205d      	movs	r0, #93	; 0x5d
    5242:	1c79      	adds	r1, r7, #1
    5244:	1c9a      	adds	r2, r3, #2
    5246:	54c8      	strb	r0, [r1, r3]
    5248:	e753      	b.n	50f2 <PSP_CNFG_FP_REGISTERS_EXIST+0x10f2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    524a:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    524c:	205d      	movs	r0, #93	; 0x5d
    524e:	1c7a      	adds	r2, r7, #1
    5250:	1c99      	adds	r1, r3, #2
    5252:	54d0      	strb	r0, [r2, r3]
    5254:	e75f      	b.n	5116 <PSP_CNFG_FP_REGISTERS_EXIST+0x1116>
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1153
	// ************************************************************************

	if (globals.DebugPacketOn)
	{
		// [0]: packet start byte
		sUARTOutputBuf[iIndex++] = 0x7E;
    5256:	54f9      	strb	r1, [r7, r3]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    5258:	2202      	movs	r2, #2
    525a:	1d3b      	adds	r3, r7, #4
    525c:	541a      	strb	r2, [r3, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    525e:	7a33      	ldrb	r3, [r6, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    5260:	1d41      	adds	r1, r0, #5
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    5262:	2b7e      	cmp	r3, #126	; 0x7e
    5264:	d032      	beq.n	52cc <PSP_CNFG_FP_REGISTERS_EXIST+0x12cc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    5266:	2b7d      	cmp	r3, #125	; 0x7d
    5268:	d04f      	beq.n	530a <PSP_CNFG_FP_REGISTERS_EXIST+0x130a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    526a:	1d82      	adds	r2, r0, #6
    526c:	547b      	strb	r3, [r7, r1]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1161
		tmpuint8 = 0x02;
		sBufAppendItem(sUARTOutputBuf, &iIndex, &tmpuint8, 1);

		// [2]: packet number byte
		sBufAppendItem(sUARTOutputBuf, &iIndex, &(globals.iPacketNumber), 1);
		globals.iPacketNumber++;
    526e:	3301      	adds	r3, #1
    5270:	4650      	mov	r0, sl
    5272:	7203      	strb	r3, [r0, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1164

		// [4-3] software version number
		tmpint16 = THISBUILD;
    5274:	23d3      	movs	r3, #211	; 0xd3
    5276:	005b      	lsls	r3, r3, #1
    5278:	466e      	mov	r6, sp
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    527a:	b2d9      	uxtb	r1, r3
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1164
		// [2]: packet number byte
		sBufAppendItem(sUARTOutputBuf, &iIndex, &(globals.iPacketNumber), 1);
		globals.iPacketNumber++;

		// [4-3] software version number
		tmpint16 = THISBUILD;
    527c:	8333      	strh	r3, [r6, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    527e:	297e      	cmp	r1, #126	; 0x7e
    5280:	d03c      	beq.n	52fc <PSP_CNFG_FP_REGISTERS_EXIST+0x12fc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    5282:	297d      	cmp	r1, #125	; 0x7d
    5284:	d047      	beq.n	5316 <PSP_CNFG_FP_REGISTERS_EXIST+0x1316>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    5286:	1c53      	adds	r3, r2, #1
    5288:	54b9      	strb	r1, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    528a:	4668      	mov	r0, sp
    528c:	7e42      	ldrb	r2, [r0, #25]
    528e:	2a7e      	cmp	r2, #126	; 0x7e
    5290:	d023      	beq.n	52da <PSP_CNFG_FP_REGISTERS_EXIST+0x12da>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    5292:	2a7d      	cmp	r2, #125	; 0x7d
    5294:	d045      	beq.n	5322 <PSP_CNFG_FP_REGISTERS_EXIST+0x1322>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    5296:	1c59      	adds	r1, r3, #1
    5298:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    529a:	aa0e      	add	r2, sp, #56	; 0x38
    529c:	7813      	ldrb	r3, [r2, #0]
    529e:	2b7e      	cmp	r3, #126	; 0x7e
    52a0:	d025      	beq.n	52ee <PSP_CNFG_FP_REGISTERS_EXIST+0x12ee>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    52a2:	2b7d      	cmp	r3, #125	; 0x7d
    52a4:	d100      	bne.n	52a8 <PSP_CNFG_FP_REGISTERS_EXIST+0x12a8>
    52a6:	e358      	b.n	595a <PSP_CNFG_FP_REGISTERS_EXIST+0x195a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    52a8:	1c4a      	adds	r2, r1, #1
    52aa:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    52ac:	466b      	mov	r3, sp
    52ae:	3339      	adds	r3, #57	; 0x39
    52b0:	781b      	ldrb	r3, [r3, #0]
    52b2:	2b7e      	cmp	r3, #126	; 0x7e
    52b4:	d100      	bne.n	52b8 <PSP_CNFG_FP_REGISTERS_EXIST+0x12b8>
    52b6:	e2dc      	b.n	5872 <PSP_CNFG_FP_REGISTERS_EXIST+0x1872>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    52b8:	2b7d      	cmp	r3, #125	; 0x7d
    52ba:	d100      	bne.n	52be <PSP_CNFG_FP_REGISTERS_EXIST+0x12be>
    52bc:	e347      	b.n	594e <PSP_CNFG_FP_REGISTERS_EXIST+0x194e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    52be:	1c51      	adds	r1, r2, #1
    52c0:	54bb      	strb	r3, [r7, r2]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1171
		
		// [6-5] systick count / 20
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&isystick, 2);

		// [7 in practice but can be variable]: add the tail byte for the debug packet type 2
		sUARTOutputBuf[iIndex++] = 0x7E;
    52c2:	227e      	movs	r2, #126	; 0x7e
    52c4:	1c4b      	adds	r3, r1, #1
    52c6:	547a      	strb	r2, [r7, r1]
    52c8:	f7fe ffff 	bl	42ca <PSP_CNFG_FP_REGISTERS_EXIST+0x2ca>
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    52cc:	227d      	movs	r2, #125	; 0x7d
    52ce:	547a      	strb	r2, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    52d0:	265e      	movs	r6, #94	; 0x5e
    52d2:	1db9      	adds	r1, r7, #6
    52d4:	1dc2      	adds	r2, r0, #7
    52d6:	540e      	strb	r6, [r1, r0]
    52d8:	e7c9      	b.n	526e <PSP_CNFG_FP_REGISTERS_EXIST+0x126e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    52da:	227d      	movs	r2, #125	; 0x7d
    52dc:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    52de:	205e      	movs	r0, #94	; 0x5e
    52e0:	1c7a      	adds	r2, r7, #1
    52e2:	54d0      	strb	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    52e4:	aa0e      	add	r2, sp, #56	; 0x38
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
    52e6:	1c99      	adds	r1, r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    52e8:	7813      	ldrb	r3, [r2, #0]
    52ea:	2b7e      	cmp	r3, #126	; 0x7e
    52ec:	d1d9      	bne.n	52a2 <PSP_CNFG_FP_REGISTERS_EXIST+0x12a2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    52ee:	237d      	movs	r3, #125	; 0x7d
    52f0:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    52f2:	205e      	movs	r0, #94	; 0x5e
    52f4:	1c7b      	adds	r3, r7, #1
    52f6:	1c8a      	adds	r2, r1, #2
    52f8:	5458      	strb	r0, [r3, r1]
    52fa:	e7d7      	b.n	52ac <PSP_CNFG_FP_REGISTERS_EXIST+0x12ac>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    52fc:	237d      	movs	r3, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    52fe:	1c79      	adds	r1, r7, #1
    5300:	205e      	movs	r0, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5302:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5304:	1c93      	adds	r3, r2, #2
    5306:	5488      	strb	r0, [r1, r2]
    5308:	e7bf      	b.n	528a <PSP_CNFG_FP_REGISTERS_EXIST+0x128a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    530a:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    530c:	265d      	movs	r6, #93	; 0x5d
    530e:	1db9      	adds	r1, r7, #6
    5310:	1dc2      	adds	r2, r0, #7
    5312:	540e      	strb	r6, [r1, r0]
    5314:	e7ab      	b.n	526e <PSP_CNFG_FP_REGISTERS_EXIST+0x126e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5316:	54b9      	strb	r1, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5318:	205d      	movs	r0, #93	; 0x5d
    531a:	1c79      	adds	r1, r7, #1
    531c:	1c93      	adds	r3, r2, #2
    531e:	5488      	strb	r0, [r1, r2]
    5320:	e7b3      	b.n	528a <PSP_CNFG_FP_REGISTERS_EXIST+0x128a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5322:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5324:	205d      	movs	r0, #93	; 0x5d
    5326:	1c7a      	adds	r2, r7, #1
    5328:	1c99      	adds	r1, r3, #2
    532a:	54d0      	strb	r0, [r2, r3]
    532c:	e7b5      	b.n	529a <PSP_CNFG_FP_REGISTERS_EXIST+0x129a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
    532e:	1c7e      	adds	r6, r7, #1
    5330:	46b4      	mov	ip, r6
    5332:	4661      	mov	r1, ip
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5334:	237d      	movs	r3, #125	; 0x7d
    5336:	465a      	mov	r2, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5338:	265e      	movs	r6, #94	; 0x5e
    533a:	4459      	add	r1, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    533c:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    533e:	700e      	strb	r6, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    5340:	466e      	mov	r6, sp
    5342:	7e72      	ldrb	r2, [r6, #25]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
    5344:	465b      	mov	r3, fp
    5346:	3302      	adds	r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    5348:	2a7e      	cmp	r2, #126	; 0x7e
    534a:	d001      	beq.n	5350 <PSP_CNFG_FP_REGISTERS_EXIST+0x1350>
    534c:	f7ff f869 	bl	4422 <PSP_CNFG_FP_REGISTERS_EXIST+0x422>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    5350:	227d      	movs	r2, #125	; 0x7d
    5352:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5354:	1c79      	adds	r1, r7, #1
    5356:	225e      	movs	r2, #94	; 0x5e
    5358:	54ca      	strb	r2, [r1, r3]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1322
	}

	// [10-9]: int16: variable 1 to be transmitted this iteration
	// [12-11]: int16: variable 2 to be transmitted this iteration
	// [14-13]: int16: variable 3 to be transmitted this iteration
	switch (globals.MagneticPacketID)
    535a:	4651      	mov	r1, sl
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
    535c:	1c9e      	adds	r6, r3, #2
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1322
	}

	// [10-9]: int16: variable 1 to be transmitted this iteration
	// [12-11]: int16: variable 2 to be transmitted this iteration
	// [14-13]: int16: variable 3 to be transmitted this iteration
	switch (globals.MagneticPacketID)
    535e:	88cb      	ldrh	r3, [r1, #6]
    5360:	2b09      	cmp	r3, #9
    5362:	d801      	bhi.n	5368 <PSP_CNFG_FP_REGISTERS_EXIST+0x1368>
    5364:	f7ff f869 	bl	443a <PSP_CNFG_FP_REGISTERS_EXIST+0x43a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1376
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);	
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);	
		break;
	default:
		// 10 and upwards: this handles the magnetic buffer elements
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&(thisMagBuffer.iBpFast[X][i][j]), 2);
    5368:	9d05      	ldr	r5, [sp, #20]
    536a:	b200      	sxth	r0, r0
    536c:	b229      	sxth	r1, r5
    536e:	004b      	lsls	r3, r1, #1
    5370:	185d      	adds	r5, r3, r1
    5372:	00ed      	lsls	r5, r5, #3
    5374:	182d      	adds	r5, r5, r0
    5376:	006d      	lsls	r5, r5, #1
    5378:	192d      	adds	r5, r5, r4
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    537a:	782a      	ldrb	r2, [r5, #0]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1376
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);	
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);	
		break;
	default:
		// 10 and upwards: this handles the magnetic buffer elements
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&(thisMagBuffer.iBpFast[X][i][j]), 2);
    537c:	46a9      	mov	r9, r5
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    537e:	2a7e      	cmp	r2, #126	; 0x7e
    5380:	d100      	bne.n	5384 <PSP_CNFG_FP_REGISTERS_EXIST+0x1384>
    5382:	e36a      	b.n	5a5a <PSP_CNFG_FP_REGISTERS_EXIST+0x1a5a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    5384:	2a7d      	cmp	r2, #125	; 0x7d
    5386:	d101      	bne.n	538c <PSP_CNFG_FP_REGISTERS_EXIST+0x138c>
    5388:	f000 fcb0 	bl	5cec <PSP_CNFG_FP_REGISTERS_EXIST+0x1cec>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    538c:	1c75      	adds	r5, r6, #1
    538e:	46a8      	mov	r8, r5
    5390:	55ba      	strb	r2, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    5392:	464e      	mov	r6, r9
    5394:	7872      	ldrb	r2, [r6, #1]
    5396:	2a7e      	cmp	r2, #126	; 0x7e
    5398:	d100      	bne.n	539c <PSP_CNFG_FP_REGISTERS_EXIST+0x139c>
    539a:	e352      	b.n	5a42 <PSP_CNFG_FP_REGISTERS_EXIST+0x1a42>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    539c:	2a7d      	cmp	r2, #125	; 0x7d
    539e:	d101      	bne.n	53a4 <PSP_CNFG_FP_REGISTERS_EXIST+0x13a4>
    53a0:	f000 fc98 	bl	5cd4 <PSP_CNFG_FP_REGISTERS_EXIST+0x1cd4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    53a4:	2501      	movs	r5, #1
    53a6:	46ab      	mov	fp, r5
    53a8:	4646      	mov	r6, r8
    53aa:	44c3      	add	fp, r8
    53ac:	55ba      	strb	r2, [r7, r6]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1377
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);	
		break;
	default:
		// 10 and upwards: this handles the magnetic buffer elements
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&(thisMagBuffer.iBpFast[X][i][j]), 2);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&(thisMagBuffer.iBpFast[Y][i][j]), 2);
    53ae:	185a      	adds	r2, r3, r1
    53b0:	00d2      	lsls	r2, r2, #3
    53b2:	1812      	adds	r2, r2, r0
    53b4:	3221      	adds	r2, #33	; 0x21
    53b6:	32ff      	adds	r2, #255	; 0xff
    53b8:	0052      	lsls	r2, r2, #1
    53ba:	1912      	adds	r2, r2, r4
    53bc:	4690      	mov	r8, r2
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    53be:	7812      	ldrb	r2, [r2, #0]
    53c0:	2a7e      	cmp	r2, #126	; 0x7e
    53c2:	d100      	bne.n	53c6 <PSP_CNFG_FP_REGISTERS_EXIST+0x13c6>
    53c4:	e334      	b.n	5a30 <PSP_CNFG_FP_REGISTERS_EXIST+0x1a30>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    53c6:	465e      	mov	r6, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    53c8:	2a7d      	cmp	r2, #125	; 0x7d
    53ca:	d101      	bne.n	53d0 <PSP_CNFG_FP_REGISTERS_EXIST+0x13d0>
    53cc:	f000 fcb4 	bl	5d38 <PSP_CNFG_FP_REGISTERS_EXIST+0x1d38>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    53d0:	465d      	mov	r5, fp
    53d2:	3601      	adds	r6, #1
    53d4:	557a      	strb	r2, [r7, r5]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    53d6:	4645      	mov	r5, r8
    53d8:	786a      	ldrb	r2, [r5, #1]
    53da:	2a7e      	cmp	r2, #126	; 0x7e
    53dc:	d100      	bne.n	53e0 <PSP_CNFG_FP_REGISTERS_EXIST+0x13e0>
    53de:	e31f      	b.n	5a20 <PSP_CNFG_FP_REGISTERS_EXIST+0x1a20>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    53e0:	2a7d      	cmp	r2, #125	; 0x7d
    53e2:	d101      	bne.n	53e8 <PSP_CNFG_FP_REGISTERS_EXIST+0x13e8>
    53e4:	f000 fca0 	bl	5d28 <PSP_CNFG_FP_REGISTERS_EXIST+0x1d28>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    53e8:	1c75      	adds	r5, r6, #1
    53ea:	46a9      	mov	r9, r5
    53ec:	55ba      	strb	r2, [r7, r6]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1378
		break;
	default:
		// 10 and upwards: this handles the magnetic buffer elements
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&(thisMagBuffer.iBpFast[X][i][j]), 2);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&(thisMagBuffer.iBpFast[Y][i][j]), 2);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&(thisMagBuffer.iBpFast[Z][i][j]), 2);
    53ee:	185b      	adds	r3, r3, r1
    53f0:	00db      	lsls	r3, r3, #3
    53f2:	2690      	movs	r6, #144	; 0x90
    53f4:	181b      	adds	r3, r3, r0
    53f6:	00b6      	lsls	r6, r6, #2
    53f8:	199b      	adds	r3, r3, r6
    53fa:	005b      	lsls	r3, r3, #1
    53fc:	18e4      	adds	r4, r4, r3
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    53fe:	7823      	ldrb	r3, [r4, #0]
    5400:	2b7e      	cmp	r3, #126	; 0x7e
    5402:	d100      	bne.n	5406 <PSP_CNFG_FP_REGISTERS_EXIST+0x1406>
    5404:	e303      	b.n	5a0e <PSP_CNFG_FP_REGISTERS_EXIST+0x1a0e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5406:	4649      	mov	r1, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    5408:	2b7d      	cmp	r3, #125	; 0x7d
    540a:	d101      	bne.n	5410 <PSP_CNFG_FP_REGISTERS_EXIST+0x1410>
    540c:	f000 fc84 	bl	5d18 <PSP_CNFG_FP_REGISTERS_EXIST+0x1d18>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    5410:	4648      	mov	r0, r9
    5412:	3101      	adds	r1, #1
    5414:	543b      	strb	r3, [r7, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    5416:	7862      	ldrb	r2, [r4, #1]
    5418:	2a7e      	cmp	r2, #126	; 0x7e
    541a:	d001      	beq.n	5420 <PSP_CNFG_FP_REGISTERS_EXIST+0x1420>
    541c:	f7ff f87c 	bl	4518 <PSP_CNFG_FP_REGISTERS_EXIST+0x518>
    5420:	f7ff f8f8 	bl	4614 <PSP_CNFG_FP_REGISTERS_EXIST+0x614>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5424:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5426:	1c7e      	adds	r6, r7, #1
    5428:	235d      	movs	r3, #93	; 0x5d
    542a:	4649      	mov	r1, r9
    542c:	3202      	adds	r2, #2
    542e:	5473      	strb	r3, [r6, r1]
    5430:	f7fe fee6 	bl	4200 <PSP_CNFG_FP_REGISTERS_EXIST+0x200>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5434:	4642      	mov	r2, r8
    5436:	54b8      	strb	r0, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5438:	4643      	mov	r3, r8
    543a:	1c7a      	adds	r2, r7, #1
    543c:	215d      	movs	r1, #93	; 0x5d
    543e:	4646      	mov	r6, r8
    5440:	3302      	adds	r3, #2
    5442:	5591      	strb	r1, [r2, r6]
    5444:	f7fe ffa6 	bl	4394 <PSP_CNFG_FP_REGISTERS_EXIST+0x394>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5448:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    544a:	1c9e      	adds	r6, r3, #2
    544c:	1c7a      	adds	r2, r7, #1
    544e:	215d      	movs	r1, #93	; 0x5d
    5450:	46b3      	mov	fp, r6
    5452:	54d1      	strb	r1, [r2, r3]
    5454:	f7fe ffab 	bl	43ae <PSP_CNFG_FP_REGISTERS_EXIST+0x3ae>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5458:	54fe      	strb	r6, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    545a:	215d      	movs	r1, #93	; 0x5d
    545c:	1c7e      	adds	r6, r7, #1
    545e:	1c9a      	adds	r2, r3, #2
    5460:	54f1      	strb	r1, [r6, r3]
    5462:	f7fe ff01 	bl	4268 <PSP_CNFG_FP_REGISTERS_EXIST+0x268>
    5466:	1c7e      	adds	r6, r7, #1
    5468:	215d      	movs	r1, #93	; 0x5d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    546a:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    546c:	1c93      	adds	r3, r2, #2
    546e:	54b1      	strb	r1, [r6, r2]
    5470:	f7fe feed 	bl	424e <PSP_CNFG_FP_REGISTERS_EXIST+0x24e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5474:	54fe      	strb	r6, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5476:	215d      	movs	r1, #93	; 0x5d
    5478:	1c7e      	adds	r6, r7, #1
    547a:	1c9a      	adds	r2, r3, #2
    547c:	54f1      	strb	r1, [r6, r3]
    547e:	f7fe fed9 	bl	4234 <PSP_CNFG_FP_REGISTERS_EXIST+0x234>
    5482:	1c7e      	adds	r6, r7, #1
    5484:	215d      	movs	r1, #93	; 0x5d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5486:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5488:	1c93      	adds	r3, r2, #2
    548a:	54b1      	strb	r1, [r6, r2]
    548c:	f7fe fec5 	bl	421a <PSP_CNFG_FP_REGISTERS_EXIST+0x21a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5490:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5492:	265d      	movs	r6, #93	; 0x5d
    5494:	1c7b      	adds	r3, r7, #1
    5496:	1c90      	adds	r0, r2, #2
    5498:	549e      	strb	r6, [r3, r2]
    549a:	f7fe ff07 	bl	42ac <PSP_CNFG_FP_REGISTERS_EXIST+0x2ac>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    549e:	54f8      	strb	r0, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    54a0:	265d      	movs	r6, #93	; 0x5d
    54a2:	1c78      	adds	r0, r7, #1
    54a4:	1c9a      	adds	r2, r3, #2
    54a6:	54c6      	strb	r6, [r0, r3]
    54a8:	f7fe fef5 	bl	4296 <PSP_CNFG_FP_REGISTERS_EXIST+0x296>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    54ac:	54be      	strb	r6, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    54ae:	215d      	movs	r1, #93	; 0x5d
    54b0:	1c7e      	adds	r6, r7, #1
    54b2:	1c93      	adds	r3, r2, #2
    54b4:	54b1      	strb	r1, [r6, r2]
    54b6:	f7fe fee2 	bl	427e <PSP_CNFG_FP_REGISTERS_EXIST+0x27e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    54ba:	247d      	movs	r4, #125	; 0x7d
    54bc:	543c      	strb	r4, [r7, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    54be:	255e      	movs	r5, #94	; 0x5e
    54c0:	1d38      	adds	r0, r7, #4
    54c2:	1d5c      	adds	r4, r3, #5
    54c4:	54c5      	strb	r5, [r0, r3]
    54c6:	e452      	b.n	4d6e <PSP_CNFG_FP_REGISTERS_EXIST+0xd6e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    54c8:	543a      	strb	r2, [r7, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    54ca:	255d      	movs	r5, #93	; 0x5d
    54cc:	1d38      	adds	r0, r7, #4
    54ce:	1d5c      	adds	r4, r3, #5
    54d0:	54c5      	strb	r5, [r0, r3]
    54d2:	e44c      	b.n	4d6e <PSP_CNFG_FP_REGISTERS_EXIST+0xd6e>
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1428
				ftmp = thisSV_9DOF_GBY_KALMAN.fThErrPl[i] * 1000.0F;
#endif
			// check for clipping
			if (ftmp > 32767.0F)
				tmpint16 = 32767;
			else if (ftmp < -32768.0F)
    54d4:	21c7      	movs	r1, #199	; 0xc7
    54d6:	9802      	ldr	r0, [sp, #8]
    54d8:	0609      	lsls	r1, r1, #24
    54da:	f7fb f8e3 	bl	6a4 <__aeabi_fcmplt>
    54de:	2800      	cmp	r0, #0
    54e0:	d000      	beq.n	54e4 <PSP_CNFG_FP_REGISTERS_EXIST+0x14e4>
    54e2:	e16a      	b.n	57ba <PSP_CNFG_FP_REGISTERS_EXIST+0x17ba>
    54e4:	9802      	ldr	r0, [sp, #8]
    54e6:	f7fb fef5 	bl	12d4 <__aeabi_f2iz>
    54ea:	b280      	uxth	r0, r0
    54ec:	e450      	b.n	4d90 <PSP_CNFG_FP_REGISTERS_EXIST+0xd90>
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    54ee:	54fe      	strb	r6, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    54f0:	1c7e      	adds	r6, r7, #1
    54f2:	46b4      	mov	ip, r6
    54f4:	4661      	mov	r1, ip
    54f6:	265d      	movs	r6, #93	; 0x5d
    54f8:	4459      	add	r1, fp
    54fa:	3302      	adds	r3, #2
    54fc:	700e      	strb	r6, [r1, #0]
    54fe:	f7fe ff8a 	bl	4416 <PSP_CNFG_FP_REGISTERS_EXIST+0x416>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5502:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5504:	1c79      	adds	r1, r7, #1
    5506:	225d      	movs	r2, #93	; 0x5d
    5508:	1c9e      	adds	r6, r3, #2
    550a:	54ca      	strb	r2, [r1, r3]
    550c:	f7fe ff8f 	bl	442e <PSP_CNFG_FP_REGISTERS_EXIST+0x42e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5510:	237d      	movs	r3, #125	; 0x7d
    5512:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5514:	215e      	movs	r1, #94	; 0x5e
    5516:	1c7b      	adds	r3, r7, #1
    5518:	1c94      	adds	r4, r2, #2
    551a:	5499      	strb	r1, [r3, r2]
    551c:	e4a2      	b.n	4e64 <PSP_CNFG_FP_REGISTERS_EXIST+0xe64>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    551e:	237d      	movs	r3, #125	; 0x7d
    5520:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5522:	215e      	movs	r1, #94	; 0x5e
    5524:	1c7b      	adds	r3, r7, #1
    5526:	1ca2      	adds	r2, r4, #2
    5528:	5519      	strb	r1, [r3, r4]
    552a:	e490      	b.n	4e4e <PSP_CNFG_FP_REGISTERS_EXIST+0xe4e>
    552c:	49df      	ldr	r1, [pc, #892]	; (58ac <PSP_CNFG_FP_REGISTERS_EXIST+0x18ac>)
    552e:	186b      	adds	r3, r5, r1
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1449
			if (globals.QuaternionPacketType == Q6AG)
				ftmp = (thisSV_6DOF_GY_KALMAN.fbPl[i] * 1000.0F);
#endif
#if defined COMPUTE_9DOF_GBY_KALMAN
			if (globals.QuaternionPacketType == Q9)
				ftmp = (thisSV_9DOF_GBY_KALMAN.fbPl[i] * 1000.0F);
    5530:	6e58      	ldr	r0, [r3, #100]	; 0x64
    5532:	49df      	ldr	r1, [pc, #892]	; (58b0 <PSP_CNFG_FP_REGISTERS_EXIST+0x18b0>)
    5534:	f7fb fc2e 	bl	d94 <__aeabi_fmul>
    5538:	4681      	mov	r9, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1452
#endif
			// check for clipping
			if (ftmp > 32767.0F)
    553a:	4648      	mov	r0, r9
    553c:	49dd      	ldr	r1, [pc, #884]	; (58b4 <PSP_CNFG_FP_REGISTERS_EXIST+0x18b4>)
    553e:	f7fb f8c5 	bl	6cc <__aeabi_fcmpgt>
    5542:	2800      	cmp	r0, #0
    5544:	d003      	beq.n	554e <PSP_CNFG_FP_REGISTERS_EXIST+0x154e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1453
				tmpint16 = 32767;
    5546:	4643      	mov	r3, r8
    5548:	466a      	mov	r2, sp
    554a:	8313      	strh	r3, [r2, #24]
    554c:	e474      	b.n	4e38 <PSP_CNFG_FP_REGISTERS_EXIST+0xe38>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1454
			else if (ftmp < -32768.0F)
    554e:	21c7      	movs	r1, #199	; 0xc7
    5550:	4648      	mov	r0, r9
    5552:	0609      	lsls	r1, r1, #24
    5554:	f7fb f8a6 	bl	6a4 <__aeabi_fcmplt>
    5558:	2800      	cmp	r0, #0
    555a:	d000      	beq.n	555e <PSP_CNFG_FP_REGISTERS_EXIST+0x155e>
    555c:	e132      	b.n	57c4 <PSP_CNFG_FP_REGISTERS_EXIST+0x17c4>
    555e:	4648      	mov	r0, r9
    5560:	f7fb feb8 	bl	12d4 <__aeabi_f2iz>
    5564:	b280      	uxth	r0, r0
    5566:	e465      	b.n	4e34 <PSP_CNFG_FP_REGISTERS_EXIST+0xe34>
    5568:	4658      	mov	r0, fp
    556a:	182b      	adds	r3, r5, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1445
		for (i = X; i <= Z; i++)
		{
			ftmp = 0.0F;
#if defined COMPUTE_6DOF_GY_KALMAN
			if (globals.QuaternionPacketType == Q6AG)
				ftmp = (thisSV_6DOF_GY_KALMAN.fbPl[i] * 1000.0F);
    556c:	6e58      	ldr	r0, [r3, #100]	; 0x64
    556e:	49d0      	ldr	r1, [pc, #832]	; (58b0 <PSP_CNFG_FP_REGISTERS_EXIST+0x18b0>)
    5570:	f7fb fc10 	bl	d94 <__aeabi_fmul>
    5574:	4681      	mov	r9, r0
    5576:	e7e0      	b.n	553a <PSP_CNFG_FP_REGISTERS_EXIST+0x153a>
    5578:	4649      	mov	r1, r9
    557a:	186b      	adds	r3, r5, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1423
			if (globals.QuaternionPacketType == Q6AG)
				ftmp = thisSV_6DOF_GY_KALMAN.fThErrPl[i] * 1000.0F;
#endif
#if defined COMPUTE_9DOF_GBY_KALMAN
			if (globals.QuaternionPacketType == Q9)
				ftmp = thisSV_9DOF_GBY_KALMAN.fThErrPl[i] * 1000.0F;
    557c:	6f18      	ldr	r0, [r3, #112]	; 0x70
    557e:	49cc      	ldr	r1, [pc, #816]	; (58b0 <PSP_CNFG_FP_REGISTERS_EXIST+0x18b0>)
    5580:	f7fb fc08 	bl	d94 <__aeabi_fmul>
    5584:	9002      	str	r0, [sp, #8]
    5586:	e426      	b.n	4dd6 <PSP_CNFG_FP_REGISTERS_EXIST+0xdd6>
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5588:	237d      	movs	r3, #125	; 0x7d
    558a:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    558c:	215e      	movs	r1, #94	; 0x5e
    558e:	1c7b      	adds	r3, r7, #1
    5590:	5519      	strb	r1, [r3, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    5592:	4669      	mov	r1, sp
    5594:	7e4b      	ldrb	r3, [r1, #25]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
    5596:	1ca2      	adds	r2, r4, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    5598:	2b7e      	cmp	r3, #126	; 0x7e
    559a:	d000      	beq.n	559e <PSP_CNFG_FP_REGISTERS_EXIST+0x159e>
    559c:	e488      	b.n	4eb0 <PSP_CNFG_FP_REGISTERS_EXIST+0xeb0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    559e:	237d      	movs	r3, #125	; 0x7d
    55a0:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    55a2:	215e      	movs	r1, #94	; 0x5e
    55a4:	1c7b      	adds	r3, r7, #1
    55a6:	1c94      	adds	r4, r2, #2
    55a8:	5499      	strb	r1, [r3, r2]
    55aa:	e487      	b.n	4ebc <PSP_CNFG_FP_REGISTERS_EXIST+0xebc>
    55ac:	4652      	mov	r2, sl
    55ae:	18ab      	adds	r3, r5, r2
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1475
			if (globals.QuaternionPacketType == Q6AG)
				ftmp = (thisSV_6DOF_GY_KALMAN.fbErrPl[i] * 10000.0F);
#endif
#if defined COMPUTE_9DOF_GBY_KALMAN
			if (globals.QuaternionPacketType == Q9)
				ftmp = (thisSV_9DOF_GBY_KALMAN.fbErrPl[i] * 10000.0F);
    55b0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    55b2:	49c1      	ldr	r1, [pc, #772]	; (58b8 <PSP_CNFG_FP_REGISTERS_EXIST+0x18b8>)
    55b4:	f7fb fbee 	bl	d94 <__aeabi_fmul>
    55b8:	4683      	mov	fp, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1478
#endif
			// check for clipping
			if (ftmp > 32767.0F)
    55ba:	4658      	mov	r0, fp
    55bc:	49bd      	ldr	r1, [pc, #756]	; (58b4 <PSP_CNFG_FP_REGISTERS_EXIST+0x18b4>)
    55be:	f7fb f885 	bl	6cc <__aeabi_fcmpgt>
    55c2:	2800      	cmp	r0, #0
    55c4:	d003      	beq.n	55ce <PSP_CNFG_FP_REGISTERS_EXIST+0x15ce>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1479
				tmpint16 = 32767;
    55c6:	4640      	mov	r0, r8
    55c8:	466b      	mov	r3, sp
    55ca:	8318      	strh	r0, [r3, #24]
    55cc:	e460      	b.n	4e90 <PSP_CNFG_FP_REGISTERS_EXIST+0xe90>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1480
			else if (ftmp < -32768.0F)
    55ce:	21c7      	movs	r1, #199	; 0xc7
    55d0:	4658      	mov	r0, fp
    55d2:	0609      	lsls	r1, r1, #24
    55d4:	f7fb f866 	bl	6a4 <__aeabi_fcmplt>
    55d8:	2800      	cmp	r0, #0
    55da:	d000      	beq.n	55de <PSP_CNFG_FP_REGISTERS_EXIST+0x15de>
    55dc:	e0f7      	b.n	57ce <PSP_CNFG_FP_REGISTERS_EXIST+0x17ce>
    55de:	4658      	mov	r0, fp
    55e0:	f7fb fe78 	bl	12d4 <__aeabi_f2iz>
    55e4:	b280      	uxth	r0, r0
    55e6:	e451      	b.n	4e8c <PSP_CNFG_FP_REGISTERS_EXIST+0xe8c>
    55e8:	4649      	mov	r1, r9
    55ea:	186b      	adds	r3, r5, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1471
		for (i = X; i <= Z; i++)
		{
			ftmp = 0.0F;
#if defined COMPUTE_6DOF_GY_KALMAN
			if (globals.QuaternionPacketType == Q6AG)
				ftmp = (thisSV_6DOF_GY_KALMAN.fbErrPl[i] * 10000.0F);
    55ec:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    55ee:	49b2      	ldr	r1, [pc, #712]	; (58b8 <PSP_CNFG_FP_REGISTERS_EXIST+0x18b8>)
    55f0:	f7fb fbd0 	bl	d94 <__aeabi_fmul>
    55f4:	4683      	mov	fp, r0
    55f6:	e7e0      	b.n	55ba <PSP_CNFG_FP_REGISTERS_EXIST+0x15ba>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1243

#ifdef COMPUTE_1DOF_P_BASIC
	if (globals.AltPacketOn && globals.iMPL3115Found)
	{
		// [0]: packet start byte
		sUARTOutputBuf[iIndex++] = 0x7E;
    55f8:	227e      	movs	r2, #126	; 0x7e
    55fa:	54fa      	strb	r2, [r7, r3]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    55fc:	2105      	movs	r1, #5
    55fe:	1c7a      	adds	r2, r7, #1
    5600:	54d1      	strb	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    5602:	4652      	mov	r2, sl
    5604:	7a11      	ldrb	r1, [r2, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    5606:	1c98      	adds	r0, r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    5608:	297e      	cmp	r1, #126	; 0x7e
    560a:	d100      	bne.n	560e <PSP_CNFG_FP_REGISTERS_EXIST+0x160e>
    560c:	e081      	b.n	5712 <PSP_CNFG_FP_REGISTERS_EXIST+0x1712>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    560e:	297d      	cmp	r1, #125	; 0x7d
    5610:	d100      	bne.n	5614 <PSP_CNFG_FP_REGISTERS_EXIST+0x1614>
    5612:	e0b4      	b.n	577e <PSP_CNFG_FP_REGISTERS_EXIST+0x177e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    5614:	1cda      	adds	r2, r3, #3
    5616:	5439      	strb	r1, [r7, r0]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1251
		tmpuint8 = 0x05;
		sBufAppendItem(sUARTOutputBuf, &iIndex, &tmpuint8, 1);

		// [2]: packet number byte
		sBufAppendItem(sUARTOutputBuf, &iIndex, &(globals.iPacketNumber), 1);
		globals.iPacketNumber++;
    5618:	3101      	adds	r1, #1
    561a:	4653      	mov	r3, sl
    561c:	7219      	strb	r1, [r3, #8]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    561e:	2370      	movs	r3, #112	; 0x70
    5620:	5ce9      	ldrb	r1, [r5, r3]
    5622:	297e      	cmp	r1, #126	; 0x7e
    5624:	d100      	bne.n	5628 <PSP_CNFG_FP_REGISTERS_EXIST+0x1628>
    5626:	e082      	b.n	572e <PSP_CNFG_FP_REGISTERS_EXIST+0x172e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    5628:	297d      	cmp	r1, #125	; 0x7d
    562a:	d100      	bne.n	562e <PSP_CNFG_FP_REGISTERS_EXIST+0x162e>
    562c:	e0b3      	b.n	5796 <PSP_CNFG_FP_REGISTERS_EXIST+0x1796>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    562e:	1c53      	adds	r3, r2, #1
    5630:	54b9      	strb	r1, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    5632:	2271      	movs	r2, #113	; 0x71
    5634:	5ca9      	ldrb	r1, [r5, r2]
    5636:	297e      	cmp	r1, #126	; 0x7e
    5638:	d100      	bne.n	563c <PSP_CNFG_FP_REGISTERS_EXIST+0x163c>
    563a:	e083      	b.n	5744 <PSP_CNFG_FP_REGISTERS_EXIST+0x1744>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    563c:	297d      	cmp	r1, #125	; 0x7d
    563e:	d100      	bne.n	5642 <PSP_CNFG_FP_REGISTERS_EXIST+0x1642>
    5640:	e0a3      	b.n	578a <PSP_CNFG_FP_REGISTERS_EXIST+0x178a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    5642:	1c5a      	adds	r2, r3, #1
    5644:	54f9      	strb	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    5646:	2372      	movs	r3, #114	; 0x72
    5648:	5ce9      	ldrb	r1, [r5, r3]
    564a:	297e      	cmp	r1, #126	; 0x7e
    564c:	d100      	bne.n	5650 <PSP_CNFG_FP_REGISTERS_EXIST+0x1650>
    564e:	e084      	b.n	575a <PSP_CNFG_FP_REGISTERS_EXIST+0x175a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    5650:	297d      	cmp	r1, #125	; 0x7d
    5652:	d100      	bne.n	5656 <PSP_CNFG_FP_REGISTERS_EXIST+0x1656>
    5654:	e0ab      	b.n	57ae <PSP_CNFG_FP_REGISTERS_EXIST+0x17ae>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    5656:	1c53      	adds	r3, r2, #1
    5658:	54b9      	strb	r1, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    565a:	2273      	movs	r2, #115	; 0x73
    565c:	5caa      	ldrb	r2, [r5, r2]
    565e:	2a7e      	cmp	r2, #126	; 0x7e
    5660:	d100      	bne.n	5664 <PSP_CNFG_FP_REGISTERS_EXIST+0x1664>
    5662:	e085      	b.n	5770 <PSP_CNFG_FP_REGISTERS_EXIST+0x1770>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    5664:	2a7d      	cmp	r2, #125	; 0x7d
    5666:	d100      	bne.n	566a <PSP_CNFG_FP_REGISTERS_EXIST+0x166a>
    5668:	e09b      	b.n	57a2 <PSP_CNFG_FP_REGISTERS_EXIST+0x17a2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    566a:	1c5c      	adds	r4, r3, #1
    566c:	54fa      	strb	r2, [r7, r3]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1257

		// [6-3]: time stamp (4 bytes)
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&(mqxglobals.FTMTimestamp), 4);

		// [10-7]: altitude (4 bytes, metres times 1000)
		tmpint32 = (int32)(thisSV_1DOF_P_BASIC.fLPHp * 1000.0F);
    566e:	4d93      	ldr	r5, [pc, #588]	; (58bc <PSP_CNFG_FP_REGISTERS_EXIST+0x18bc>)
    5670:	498f      	ldr	r1, [pc, #572]	; (58b0 <PSP_CNFG_FP_REGISTERS_EXIST+0x18b0>)
    5672:	6828      	ldr	r0, [r5, #0]
    5674:	f7fb fb8e 	bl	d94 <__aeabi_fmul>
    5678:	f7fb fe2c 	bl	12d4 <__aeabi_f2iz>
    567c:	900f      	str	r0, [sp, #60]	; 0x3c
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    567e:	b2c0      	uxtb	r0, r0
    5680:	287e      	cmp	r0, #126	; 0x7e
    5682:	d100      	bne.n	5686 <PSP_CNFG_FP_REGISTERS_EXIST+0x1686>
    5684:	e2a1      	b.n	5bca <PSP_CNFG_FP_REGISTERS_EXIST+0x1bca>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    5686:	287d      	cmp	r0, #125	; 0x7d
    5688:	d100      	bne.n	568c <PSP_CNFG_FP_REGISTERS_EXIST+0x168c>
    568a:	e397      	b.n	5dbc <PSP_CNFG_FP_REGISTERS_EXIST+0x1dbc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    568c:	1c62      	adds	r2, r4, #1
    568e:	5538      	strb	r0, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    5690:	466b      	mov	r3, sp
    5692:	333d      	adds	r3, #61	; 0x3d
    5694:	781b      	ldrb	r3, [r3, #0]
    5696:	2b7e      	cmp	r3, #126	; 0x7e
    5698:	d100      	bne.n	569c <PSP_CNFG_FP_REGISTERS_EXIST+0x169c>
    569a:	e2b9      	b.n	5c10 <PSP_CNFG_FP_REGISTERS_EXIST+0x1c10>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    569c:	2b7d      	cmp	r3, #125	; 0x7d
    569e:	d100      	bne.n	56a2 <PSP_CNFG_FP_REGISTERS_EXIST+0x16a2>
    56a0:	e39e      	b.n	5de0 <PSP_CNFG_FP_REGISTERS_EXIST+0x1de0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    56a2:	1c51      	adds	r1, r2, #1
    56a4:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    56a6:	466b      	mov	r3, sp
    56a8:	333e      	adds	r3, #62	; 0x3e
    56aa:	781b      	ldrb	r3, [r3, #0]
    56ac:	2b7e      	cmp	r3, #126	; 0x7e
    56ae:	d100      	bne.n	56b2 <PSP_CNFG_FP_REGISTERS_EXIST+0x16b2>
    56b0:	e2a7      	b.n	5c02 <PSP_CNFG_FP_REGISTERS_EXIST+0x1c02>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    56b2:	2b7d      	cmp	r3, #125	; 0x7d
    56b4:	d100      	bne.n	56b8 <PSP_CNFG_FP_REGISTERS_EXIST+0x16b8>
    56b6:	e38d      	b.n	5dd4 <PSP_CNFG_FP_REGISTERS_EXIST+0x1dd4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    56b8:	1c4a      	adds	r2, r1, #1
    56ba:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    56bc:	466b      	mov	r3, sp
    56be:	333f      	adds	r3, #63	; 0x3f
    56c0:	781b      	ldrb	r3, [r3, #0]
    56c2:	2b7e      	cmp	r3, #126	; 0x7e
    56c4:	d100      	bne.n	56c8 <PSP_CNFG_FP_REGISTERS_EXIST+0x16c8>
    56c6:	e295      	b.n	5bf4 <PSP_CNFG_FP_REGISTERS_EXIST+0x1bf4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    56c8:	2b7d      	cmp	r3, #125	; 0x7d
    56ca:	d100      	bne.n	56ce <PSP_CNFG_FP_REGISTERS_EXIST+0x16ce>
    56cc:	e37c      	b.n	5dc8 <PSP_CNFG_FP_REGISTERS_EXIST+0x1dc8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    56ce:	1c54      	adds	r4, r2, #1
    56d0:	54bb      	strb	r3, [r7, r2]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1261
		// [10-7]: altitude (4 bytes, metres times 1000)
		tmpint32 = (int32)(thisSV_1DOF_P_BASIC.fLPHp * 1000.0F);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint32, 4);

		// [12-11]: temperature (2 bytes, deg C times 100)
		tmpint16 = (int16)(thisSV_1DOF_P_BASIC.fLPTp * 100.0F);
    56d2:	6868      	ldr	r0, [r5, #4]
    56d4:	497a      	ldr	r1, [pc, #488]	; (58c0 <PSP_CNFG_FP_REGISTERS_EXIST+0x18c0>)
    56d6:	f7fb fb5d 	bl	d94 <__aeabi_fmul>
    56da:	f7fb fdfb 	bl	12d4 <__aeabi_f2iz>
    56de:	466d      	mov	r5, sp
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    56e0:	b2c3      	uxtb	r3, r0
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1261
		// [10-7]: altitude (4 bytes, metres times 1000)
		tmpint32 = (int32)(thisSV_1DOF_P_BASIC.fLPHp * 1000.0F);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint32, 4);

		// [12-11]: temperature (2 bytes, deg C times 100)
		tmpint16 = (int16)(thisSV_1DOF_P_BASIC.fLPTp * 100.0F);
    56e2:	8328      	strh	r0, [r5, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    56e4:	2b7e      	cmp	r3, #126	; 0x7e
    56e6:	d100      	bne.n	56ea <PSP_CNFG_FP_REGISTERS_EXIST+0x16ea>
    56e8:	e27d      	b.n	5be6 <PSP_CNFG_FP_REGISTERS_EXIST+0x1be6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    56ea:	2b7d      	cmp	r3, #125	; 0x7d
    56ec:	d100      	bne.n	56f0 <PSP_CNFG_FP_REGISTERS_EXIST+0x16f0>
    56ee:	e383      	b.n	5df8 <PSP_CNFG_FP_REGISTERS_EXIST+0x1df8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    56f0:	1c62      	adds	r2, r4, #1
    56f2:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    56f4:	466e      	mov	r6, sp
    56f6:	7e73      	ldrb	r3, [r6, #25]
    56f8:	2b7e      	cmp	r3, #126	; 0x7e
    56fa:	d100      	bne.n	56fe <PSP_CNFG_FP_REGISTERS_EXIST+0x16fe>
    56fc:	e26c      	b.n	5bd8 <PSP_CNFG_FP_REGISTERS_EXIST+0x1bd8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    56fe:	2b7d      	cmp	r3, #125	; 0x7d
    5700:	d100      	bne.n	5704 <PSP_CNFG_FP_REGISTERS_EXIST+0x1704>
    5702:	e373      	b.n	5dec <PSP_CNFG_FP_REGISTERS_EXIST+0x1dec>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    5704:	1c51      	adds	r1, r2, #1
    5706:	54bb      	strb	r3, [r7, r2]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1265
		// [12-11]: temperature (2 bytes, deg C times 100)
		tmpint16 = (int16)(thisSV_1DOF_P_BASIC.fLPTp * 100.0F);
		sBufAppendItem(sUARTOutputBuf, &iIndex, (uint8*)&tmpint16, 2);

		// [13]: add the tail byte for the altitude / temperature packet type 5
		sUARTOutputBuf[iIndex++] = 0x7E;
    5708:	227e      	movs	r2, #126	; 0x7e
    570a:	1c4b      	adds	r3, r1, #1
    570c:	547a      	strb	r2, [r7, r1]
    570e:	f7fe fdf2 	bl	42f6 <PSP_CNFG_FP_REGISTERS_EXIST+0x2f6>
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5712:	227d      	movs	r2, #125	; 0x7d
    5714:	543a      	strb	r2, [r7, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5716:	245e      	movs	r4, #94	; 0x5e
    5718:	1cf8      	adds	r0, r7, #3
    571a:	54c4      	strb	r4, [r0, r3]
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1251
		tmpuint8 = 0x05;
		sBufAppendItem(sUARTOutputBuf, &iIndex, &tmpuint8, 1);

		// [2]: packet number byte
		sBufAppendItem(sUARTOutputBuf, &iIndex, &(globals.iPacketNumber), 1);
		globals.iPacketNumber++;
    571c:	3101      	adds	r1, #1
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
    571e:	1d1a      	adds	r2, r3, #4
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1251
		tmpuint8 = 0x05;
		sBufAppendItem(sUARTOutputBuf, &iIndex, &tmpuint8, 1);

		// [2]: packet number byte
		sBufAppendItem(sUARTOutputBuf, &iIndex, &(globals.iPacketNumber), 1);
		globals.iPacketNumber++;
    5720:	4653      	mov	r3, sl
    5722:	7219      	strb	r1, [r3, #8]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    5724:	2370      	movs	r3, #112	; 0x70
    5726:	5ce9      	ldrb	r1, [r5, r3]
    5728:	297e      	cmp	r1, #126	; 0x7e
    572a:	d000      	beq.n	572e <PSP_CNFG_FP_REGISTERS_EXIST+0x172e>
    572c:	e77c      	b.n	5628 <PSP_CNFG_FP_REGISTERS_EXIST+0x1628>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    572e:	237d      	movs	r3, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5730:	1c79      	adds	r1, r7, #1
    5732:	205e      	movs	r0, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5734:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5736:	5488      	strb	r0, [r1, r2]
    5738:	1c93      	adds	r3, r2, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    573a:	2271      	movs	r2, #113	; 0x71
    573c:	5ca9      	ldrb	r1, [r5, r2]
    573e:	297e      	cmp	r1, #126	; 0x7e
    5740:	d000      	beq.n	5744 <PSP_CNFG_FP_REGISTERS_EXIST+0x1744>
    5742:	e77b      	b.n	563c <PSP_CNFG_FP_REGISTERS_EXIST+0x163c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    5744:	227d      	movs	r2, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5746:	1c79      	adds	r1, r7, #1
    5748:	205e      	movs	r0, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    574a:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    574c:	54c8      	strb	r0, [r1, r3]
    574e:	1c9a      	adds	r2, r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    5750:	2372      	movs	r3, #114	; 0x72
    5752:	5ce9      	ldrb	r1, [r5, r3]
    5754:	297e      	cmp	r1, #126	; 0x7e
    5756:	d000      	beq.n	575a <PSP_CNFG_FP_REGISTERS_EXIST+0x175a>
    5758:	e77a      	b.n	5650 <PSP_CNFG_FP_REGISTERS_EXIST+0x1650>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    575a:	237d      	movs	r3, #125	; 0x7d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    575c:	1c79      	adds	r1, r7, #1
    575e:	205e      	movs	r0, #94	; 0x5e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5760:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5762:	5488      	strb	r0, [r1, r2]
    5764:	1c93      	adds	r3, r2, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    5766:	2273      	movs	r2, #115	; 0x73
    5768:	5caa      	ldrb	r2, [r5, r2]
    576a:	2a7e      	cmp	r2, #126	; 0x7e
    576c:	d000      	beq.n	5770 <PSP_CNFG_FP_REGISTERS_EXIST+0x1770>
    576e:	e779      	b.n	5664 <PSP_CNFG_FP_REGISTERS_EXIST+0x1664>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
		{
			pDest[(*pIndex)++] = 0x7D;
    5770:	227d      	movs	r2, #125	; 0x7d
    5772:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5774:	215e      	movs	r1, #94	; 0x5e
    5776:	1c7a      	adds	r2, r7, #1
    5778:	1c9c      	adds	r4, r3, #2
    577a:	54d1      	strb	r1, [r2, r3]
    577c:	e777      	b.n	566e <PSP_CNFG_FP_REGISTERS_EXIST+0x166e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    577e:	5439      	strb	r1, [r7, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5780:	245d      	movs	r4, #93	; 0x5d
    5782:	1cf8      	adds	r0, r7, #3
    5784:	1d1a      	adds	r2, r3, #4
    5786:	54c4      	strb	r4, [r0, r3]
    5788:	e746      	b.n	5618 <PSP_CNFG_FP_REGISTERS_EXIST+0x1618>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    578a:	54f9      	strb	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    578c:	205d      	movs	r0, #93	; 0x5d
    578e:	1c79      	adds	r1, r7, #1
    5790:	1c9a      	adds	r2, r3, #2
    5792:	54c8      	strb	r0, [r1, r3]
    5794:	e757      	b.n	5646 <PSP_CNFG_FP_REGISTERS_EXIST+0x1646>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5796:	54b9      	strb	r1, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5798:	205d      	movs	r0, #93	; 0x5d
    579a:	1c79      	adds	r1, r7, #1
    579c:	1c93      	adds	r3, r2, #2
    579e:	5488      	strb	r0, [r1, r2]
    57a0:	e747      	b.n	5632 <PSP_CNFG_FP_REGISTERS_EXIST+0x1632>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    57a2:	54fa      	strb	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    57a4:	215d      	movs	r1, #93	; 0x5d
    57a6:	1c7a      	adds	r2, r7, #1
    57a8:	1c9c      	adds	r4, r3, #2
    57aa:	54d1      	strb	r1, [r2, r3]
    57ac:	e75f      	b.n	566e <PSP_CNFG_FP_REGISTERS_EXIST+0x166e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    57ae:	54b9      	strb	r1, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    57b0:	205d      	movs	r0, #93	; 0x5d
    57b2:	1c79      	adds	r1, r7, #1
    57b4:	1c93      	adds	r3, r2, #2
    57b6:	5488      	strb	r0, [r1, r2]
    57b8:	e74f      	b.n	565a <PSP_CNFG_FP_REGISTERS_EXIST+0x165a>
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1429
#endif
			// check for clipping
			if (ftmp > 32767.0F)
				tmpint16 = 32767;
			else if (ftmp < -32768.0F)
				tmpint16 = -32768;
    57ba:	4942      	ldr	r1, [pc, #264]	; (58c4 <PSP_CNFG_FP_REGISTERS_EXIST+0x18c4>)
    57bc:	4668      	mov	r0, sp
    57be:	8301      	strh	r1, [r0, #24]
    57c0:	f7ff fae8 	bl	4d94 <PSP_CNFG_FP_REGISTERS_EXIST+0xd94>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1455
#endif
			// check for clipping
			if (ftmp > 32767.0F)
				tmpint16 = 32767;
			else if (ftmp < -32768.0F)
				tmpint16 = -32768;
    57c4:	493f      	ldr	r1, [pc, #252]	; (58c4 <PSP_CNFG_FP_REGISTERS_EXIST+0x18c4>)
    57c6:	4668      	mov	r0, sp
    57c8:	8301      	strh	r1, [r0, #24]
    57ca:	f7ff fb35 	bl	4e38 <PSP_CNFG_FP_REGISTERS_EXIST+0xe38>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1481
#endif
			// check for clipping
			if (ftmp > 32767.0F)
				tmpint16 = 32767;
			else if (ftmp < -32768.0F)
				tmpint16 = -32768;
    57ce:	4a3d      	ldr	r2, [pc, #244]	; (58c4 <PSP_CNFG_FP_REGISTERS_EXIST+0x18c4>)
    57d0:	4669      	mov	r1, sp
    57d2:	830a      	strh	r2, [r1, #24]
    57d4:	f7ff fb5c 	bl	4e90 <PSP_CNFG_FP_REGISTERS_EXIST+0xe90>
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    57d8:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    57da:	215d      	movs	r1, #93	; 0x5d
    57dc:	1c7b      	adds	r3, r7, #1
    57de:	1c94      	adds	r4, r2, #2
    57e0:	5499      	strb	r1, [r3, r2]
    57e2:	f7ff fb6b 	bl	4ebc <PSP_CNFG_FP_REGISTERS_EXIST+0xebc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    57e6:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    57e8:	215d      	movs	r1, #93	; 0x5d
    57ea:	1c7b      	adds	r3, r7, #1
    57ec:	1c94      	adds	r4, r2, #2
    57ee:	5499      	strb	r1, [r3, r2]
    57f0:	f7ff fae4 	bl	4dbc <PSP_CNFG_FP_REGISTERS_EXIST+0xdbc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    57f4:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    57f6:	215d      	movs	r1, #93	; 0x5d
    57f8:	1c7b      	adds	r3, r7, #1
    57fa:	1ca2      	adds	r2, r4, #2
    57fc:	5519      	strb	r1, [r3, r4]
    57fe:	f7ff fb26 	bl	4e4e <PSP_CNFG_FP_REGISTERS_EXIST+0xe4e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5802:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5804:	215d      	movs	r1, #93	; 0x5d
    5806:	1c7b      	adds	r3, r7, #1
    5808:	1ca2      	adds	r2, r4, #2
    580a:	5519      	strb	r1, [r3, r4]
    580c:	f7ff facc 	bl	4da8 <PSP_CNFG_FP_REGISTERS_EXIST+0xda8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5810:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5812:	215d      	movs	r1, #93	; 0x5d
    5814:	1c7b      	adds	r3, r7, #1
    5816:	1ca2      	adds	r2, r4, #2
    5818:	5519      	strb	r1, [r3, r4]
    581a:	f7ff fb44 	bl	4ea6 <PSP_CNFG_FP_REGISTERS_EXIST+0xea6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    581e:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5820:	215d      	movs	r1, #93	; 0x5d
    5822:	1c7b      	adds	r3, r7, #1
    5824:	1c94      	adds	r4, r2, #2
    5826:	5499      	strb	r1, [r3, r2]
    5828:	f7ff fb1c 	bl	4e64 <PSP_CNFG_FP_REGISTERS_EXIST+0xe64>
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1309
	// ID 10 to (MAGBUFFSIZEX=12) * (MAGBUFFSIZEY=24)-1 or 10 to 10+288-1 are magnetic buffer elements
	// where the convention is used that a negative value indicates empty buffer element (index=-1)
	if ((globals.MagneticPacketID >= 10) && (thisMagBuffer.index[i][j] == -1))
	{
		// use negative ID to indicate inactive magnetic buffer element
		tmpint16 = -globals.MagneticPacketID;
    582c:	464e      	mov	r6, r9
    582e:	4273      	negs	r3, r6
    5830:	4669      	mov	r1, sp
    5832:	830b      	strh	r3, [r1, #24]
sBufAppendItem():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    5834:	b2db      	uxtb	r3, r3
    5836:	2b7e      	cmp	r3, #126	; 0x7e
    5838:	d100      	bne.n	583c <PSP_CNFG_FP_REGISTERS_EXIST+0x183c>
    583a:	e2eb      	b.n	5e14 <PSP_CNFG_FP_REGISTERS_EXIST+0x1e14>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    583c:	2b7d      	cmp	r3, #125	; 0x7d
    583e:	d100      	bne.n	5842 <PSP_CNFG_FP_REGISTERS_EXIST+0x1842>
    5840:	e2f3      	b.n	5e2a <PSP_CNFG_FP_REGISTERS_EXIST+0x1e2a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    5842:	4659      	mov	r1, fp
    5844:	465a      	mov	r2, fp
    5846:	3101      	adds	r1, #1
    5848:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:885

	// loop over number of bytes to add to the destination buffer
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
    584a:	466e      	mov	r6, sp
    584c:	7e73      	ldrb	r3, [r6, #25]
    584e:	2b7e      	cmp	r3, #126	; 0x7e
    5850:	d100      	bne.n	5854 <PSP_CNFG_FP_REGISTERS_EXIST+0x1854>
    5852:	e2d7      	b.n	5e04 <PSP_CNFG_FP_REGISTERS_EXIST+0x1e04>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:891
		{
			pDest[(*pIndex)++] = 0x7D;
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
    5854:	2b7d      	cmp	r3, #125	; 0x7d
    5856:	d100      	bne.n	585a <PSP_CNFG_FP_REGISTERS_EXIST+0x185a>
    5858:	e2f1      	b.n	5e3e <PSP_CNFG_FP_REGISTERS_EXIST+0x1e3e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:899
			pDest[(*pIndex)++] = 0x5D;
		}
		else
			// general case, simply add this byte without change
		{
			pDest[(*pIndex)++] = pSource[i];
    585a:	1c4e      	adds	r6, r1, #1
    585c:	547b      	strb	r3, [r7, r1]
    585e:	f7fe fde6 	bl	442e <PSP_CNFG_FP_REGISTERS_EXIST+0x42e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5862:	237d      	movs	r3, #125	; 0x7d
    5864:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5866:	225e      	movs	r2, #94	; 0x5e
    5868:	1c7b      	adds	r3, r7, #1
    586a:	1ca1      	adds	r1, r4, #2
    586c:	551a      	strb	r2, [r3, r4]
    586e:	f7fe fe4e 	bl	450e <PSP_CNFG_FP_REGISTERS_EXIST+0x50e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5872:	237d      	movs	r3, #125	; 0x7d
    5874:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5876:	205e      	movs	r0, #94	; 0x5e
    5878:	1c7b      	adds	r3, r7, #1
    587a:	1c91      	adds	r1, r2, #2
    587c:	5498      	strb	r0, [r3, r2]
    587e:	e520      	b.n	52c2 <PSP_CNFG_FP_REGISTERS_EXIST+0x12c2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5880:	237d      	movs	r3, #125	; 0x7d
    5882:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5884:	205e      	movs	r0, #94	; 0x5e
    5886:	1c7b      	adds	r3, r7, #1
    5888:	1c91      	adds	r1, r2, #2
    588a:	5498      	strb	r0, [r3, r2]
    588c:	e458      	b.n	5140 <PSP_CNFG_FP_REGISTERS_EXIST+0x1140>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    588e:	237d      	movs	r3, #125	; 0x7d
    5890:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5892:	205e      	movs	r0, #94	; 0x5e
    5894:	1c7b      	adds	r3, r7, #1
    5896:	1c91      	adds	r1, r2, #2
    5898:	5498      	strb	r0, [r3, r2]
    589a:	e468      	b.n	516e <PSP_CNFG_FP_REGISTERS_EXIST+0x116e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    589c:	237d      	movs	r3, #125	; 0x7d
    589e:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    58a0:	205e      	movs	r0, #94	; 0x5e
    58a2:	1c7b      	adds	r3, r7, #1
    58a4:	1c8a      	adds	r2, r1, #2
    58a6:	5458      	strb	r0, [r3, r1]
    58a8:	e456      	b.n	5158 <PSP_CNFG_FP_REGISTERS_EXIST+0x1158>
    58aa:	46c0      	nop			; (mov r8, r8)
    58ac:	1ffff540 	.word	0x1ffff540
    58b0:	447a0000 	.word	0x447a0000
    58b4:	46fffe00 	.word	0x46fffe00
    58b8:	461c4000 	.word	0x461c4000
    58bc:	1fffe320 	.word	0x1fffe320
    58c0:	42c80000 	.word	0x42c80000
    58c4:	ffff8000 	.word	0xffff8000
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    58c8:	237d      	movs	r3, #125	; 0x7d
    58ca:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    58cc:	205e      	movs	r0, #94	; 0x5e
    58ce:	1c7b      	adds	r3, r7, #1
    58d0:	1c91      	adds	r1, r2, #2
    58d2:	5498      	strb	r0, [r3, r2]
    58d4:	f7ff fb59 	bl	4f8a <PSP_CNFG_FP_REGISTERS_EXIST+0xf8a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    58d8:	237d      	movs	r3, #125	; 0x7d
    58da:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    58dc:	205e      	movs	r0, #94	; 0x5e
    58de:	1c7b      	adds	r3, r7, #1
    58e0:	1c91      	adds	r1, r2, #2
    58e2:	5498      	strb	r0, [r3, r2]
    58e4:	f7ff fb6a 	bl	4fbc <PSP_CNFG_FP_REGISTERS_EXIST+0xfbc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    58e8:	237d      	movs	r3, #125	; 0x7d
    58ea:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    58ec:	205e      	movs	r0, #94	; 0x5e
    58ee:	1c7b      	adds	r3, r7, #1
    58f0:	1c8a      	adds	r2, r1, #2
    58f2:	5458      	strb	r0, [r3, r1]
    58f4:	f7ff fb55 	bl	4fa2 <PSP_CNFG_FP_REGISTERS_EXIST+0xfa2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    58f8:	237d      	movs	r3, #125	; 0x7d
    58fa:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    58fc:	205e      	movs	r0, #94	; 0x5e
    58fe:	1c7b      	adds	r3, r7, #1
    5900:	1c91      	adds	r1, r2, #2
    5902:	5498      	strb	r0, [r3, r2]
    5904:	f7ff fb73 	bl	4fee <PSP_CNFG_FP_REGISTERS_EXIST+0xfee>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5908:	237d      	movs	r3, #125	; 0x7d
    590a:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    590c:	205e      	movs	r0, #94	; 0x5e
    590e:	1c7b      	adds	r3, r7, #1
    5910:	1c8a      	adds	r2, r1, #2
    5912:	5458      	strb	r0, [r3, r1]
    5914:	f7ff fb5e 	bl	4fd4 <PSP_CNFG_FP_REGISTERS_EXIST+0xfd4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5918:	237d      	movs	r3, #125	; 0x7d
    591a:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    591c:	205e      	movs	r0, #94	; 0x5e
    591e:	1c7b      	adds	r3, r7, #1
    5920:	1c91      	adds	r1, r2, #2
    5922:	5498      	strb	r0, [r3, r2]
    5924:	e439      	b.n	519a <PSP_CNFG_FP_REGISTERS_EXIST+0x119a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5926:	237d      	movs	r3, #125	; 0x7d
    5928:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    592a:	205e      	movs	r0, #94	; 0x5e
    592c:	1c7b      	adds	r3, r7, #1
    592e:	1c8a      	adds	r2, r1, #2
    5930:	5458      	strb	r0, [r3, r1]
    5932:	e427      	b.n	5184 <PSP_CNFG_FP_REGISTERS_EXIST+0x1184>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5934:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5936:	225d      	movs	r2, #93	; 0x5d
    5938:	1c7b      	adds	r3, r7, #1
    593a:	1ca1      	adds	r1, r4, #2
    593c:	551a      	strb	r2, [r3, r4]
    593e:	f7fe fde6 	bl	450e <PSP_CNFG_FP_REGISTERS_EXIST+0x50e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5942:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5944:	205d      	movs	r0, #93	; 0x5d
    5946:	1c7b      	adds	r3, r7, #1
    5948:	1c91      	adds	r1, r2, #2
    594a:	5498      	strb	r0, [r3, r2]
    594c:	e40f      	b.n	516e <PSP_CNFG_FP_REGISTERS_EXIST+0x116e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    594e:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5950:	205d      	movs	r0, #93	; 0x5d
    5952:	1c7b      	adds	r3, r7, #1
    5954:	1c91      	adds	r1, r2, #2
    5956:	5498      	strb	r0, [r3, r2]
    5958:	e4b3      	b.n	52c2 <PSP_CNFG_FP_REGISTERS_EXIST+0x12c2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    595a:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    595c:	205d      	movs	r0, #93	; 0x5d
    595e:	1c7b      	adds	r3, r7, #1
    5960:	1c8a      	adds	r2, r1, #2
    5962:	5458      	strb	r0, [r3, r1]
    5964:	e4a2      	b.n	52ac <PSP_CNFG_FP_REGISTERS_EXIST+0x12ac>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5966:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5968:	205d      	movs	r0, #93	; 0x5d
    596a:	1c7b      	adds	r3, r7, #1
    596c:	1c91      	adds	r1, r2, #2
    596e:	5498      	strb	r0, [r3, r2]
    5970:	e413      	b.n	519a <PSP_CNFG_FP_REGISTERS_EXIST+0x119a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5972:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5974:	205d      	movs	r0, #93	; 0x5d
    5976:	1c7b      	adds	r3, r7, #1
    5978:	1c8a      	adds	r2, r1, #2
    597a:	5458      	strb	r0, [r3, r1]
    597c:	f7ff fbd4 	bl	5128 <PSP_CNFG_FP_REGISTERS_EXIST+0x1128>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5980:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5982:	205d      	movs	r0, #93	; 0x5d
    5984:	1c7b      	adds	r3, r7, #1
    5986:	1c8a      	adds	r2, r1, #2
    5988:	5458      	strb	r0, [r3, r1]
    598a:	f7ff fbe5 	bl	5158 <PSP_CNFG_FP_REGISTERS_EXIST+0x1158>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    598e:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5990:	205d      	movs	r0, #93	; 0x5d
    5992:	1c7b      	adds	r3, r7, #1
    5994:	1c91      	adds	r1, r2, #2
    5996:	5498      	strb	r0, [r3, r2]
    5998:	f7ff faf7 	bl	4f8a <PSP_CNFG_FP_REGISTERS_EXIST+0xf8a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    599c:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    599e:	205d      	movs	r0, #93	; 0x5d
    59a0:	1c7b      	adds	r3, r7, #1
    59a2:	1c8a      	adds	r2, r1, #2
    59a4:	5458      	strb	r0, [r3, r1]
    59a6:	f7ff fb15 	bl	4fd4 <PSP_CNFG_FP_REGISTERS_EXIST+0xfd4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    59aa:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    59ac:	205d      	movs	r0, #93	; 0x5d
    59ae:	1c7b      	adds	r3, r7, #1
    59b0:	1c91      	adds	r1, r2, #2
    59b2:	5498      	strb	r0, [r3, r2]
    59b4:	f7ff fb02 	bl	4fbc <PSP_CNFG_FP_REGISTERS_EXIST+0xfbc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    59b8:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    59ba:	205d      	movs	r0, #93	; 0x5d
    59bc:	1c7b      	adds	r3, r7, #1
    59be:	1c8a      	adds	r2, r1, #2
    59c0:	5458      	strb	r0, [r3, r1]
    59c2:	f7ff fbdf 	bl	5184 <PSP_CNFG_FP_REGISTERS_EXIST+0x1184>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    59c6:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    59c8:	205d      	movs	r0, #93	; 0x5d
    59ca:	1c7b      	adds	r3, r7, #1
    59cc:	1c91      	adds	r1, r2, #2
    59ce:	5498      	strb	r0, [r3, r2]
    59d0:	f7ff fbb6 	bl	5140 <PSP_CNFG_FP_REGISTERS_EXIST+0x1140>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    59d4:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    59d6:	205d      	movs	r0, #93	; 0x5d
    59d8:	1c7b      	adds	r3, r7, #1
    59da:	1c91      	adds	r1, r2, #2
    59dc:	5498      	strb	r0, [r3, r2]
    59de:	f7ff fb06 	bl	4fee <PSP_CNFG_FP_REGISTERS_EXIST+0xfee>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    59e2:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    59e4:	205d      	movs	r0, #93	; 0x5d
    59e6:	1c7b      	adds	r3, r7, #1
    59e8:	1c8a      	adds	r2, r1, #2
    59ea:	5458      	strb	r0, [r3, r1]
    59ec:	f7ff fac0 	bl	4f70 <PSP_CNFG_FP_REGISTERS_EXIST+0xf70>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    59f0:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    59f2:	205d      	movs	r0, #93	; 0x5d
    59f4:	1c7b      	adds	r3, r7, #1
    59f6:	1c8a      	adds	r2, r1, #2
    59f8:	5458      	strb	r0, [r3, r1]
    59fa:	f7ff fad2 	bl	4fa2 <PSP_CNFG_FP_REGISTERS_EXIST+0xfa2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    59fe:	237d      	movs	r3, #125	; 0x7d
    5a00:	55bb      	strb	r3, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5a02:	215e      	movs	r1, #94	; 0x5e
    5a04:	1c7b      	adds	r3, r7, #1
    5a06:	1cb2      	adds	r2, r6, #2
    5a08:	5599      	strb	r1, [r3, r6]
    5a0a:	f7fe fd42 	bl	4492 <PSP_CNFG_FP_REGISTERS_EXIST+0x492>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5a0e:	237d      	movs	r3, #125	; 0x7d
    5a10:	464e      	mov	r6, r9
    5a12:	55bb      	strb	r3, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5a14:	4649      	mov	r1, r9
    5a16:	1c7b      	adds	r3, r7, #1
    5a18:	225e      	movs	r2, #94	; 0x5e
    5a1a:	3102      	adds	r1, #2
    5a1c:	559a      	strb	r2, [r3, r6]
    5a1e:	e4fa      	b.n	5416 <PSP_CNFG_FP_REGISTERS_EXIST+0x1416>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5a20:	227d      	movs	r2, #125	; 0x7d
    5a22:	55ba      	strb	r2, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5a24:	1cb2      	adds	r2, r6, #2
    5a26:	4691      	mov	r9, r2
    5a28:	1c7d      	adds	r5, r7, #1
    5a2a:	225e      	movs	r2, #94	; 0x5e
    5a2c:	55aa      	strb	r2, [r5, r6]
    5a2e:	e4de      	b.n	53ee <PSP_CNFG_FP_REGISTERS_EXIST+0x13ee>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5a30:	227d      	movs	r2, #125	; 0x7d
    5a32:	465e      	mov	r6, fp
    5a34:	55ba      	strb	r2, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5a36:	1c7a      	adds	r2, r7, #1
    5a38:	255e      	movs	r5, #94	; 0x5e
    5a3a:	445a      	add	r2, fp
    5a3c:	3602      	adds	r6, #2
    5a3e:	7015      	strb	r5, [r2, #0]
    5a40:	e4c9      	b.n	53d6 <PSP_CNFG_FP_REGISTERS_EXIST+0x13d6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5a42:	227d      	movs	r2, #125	; 0x7d
    5a44:	4645      	mov	r5, r8
    5a46:	557a      	strb	r2, [r7, r5]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5a48:	1c7a      	adds	r2, r7, #1
    5a4a:	2602      	movs	r6, #2
    5a4c:	1c15      	adds	r5, r2, #0
    5a4e:	46b3      	mov	fp, r6
    5a50:	4445      	add	r5, r8
    5a52:	265e      	movs	r6, #94	; 0x5e
    5a54:	44c3      	add	fp, r8
    5a56:	702e      	strb	r6, [r5, #0]
    5a58:	e4a9      	b.n	53ae <PSP_CNFG_FP_REGISTERS_EXIST+0x13ae>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5a5a:	227d      	movs	r2, #125	; 0x7d
    5a5c:	55ba      	strb	r2, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5a5e:	1cb2      	adds	r2, r6, #2
    5a60:	4690      	mov	r8, r2
    5a62:	255e      	movs	r5, #94	; 0x5e
    5a64:	1c7a      	adds	r2, r7, #1
    5a66:	5595      	strb	r5, [r2, r6]
    5a68:	e493      	b.n	5392 <PSP_CNFG_FP_REGISTERS_EXIST+0x1392>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5a6a:	237d      	movs	r3, #125	; 0x7d
    5a6c:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5a6e:	205e      	movs	r0, #94	; 0x5e
    5a70:	1c7b      	adds	r3, r7, #1
    5a72:	1c91      	adds	r1, r2, #2
    5a74:	5498      	strb	r0, [r3, r2]
    5a76:	f7fe fd4a 	bl	450e <PSP_CNFG_FP_REGISTERS_EXIST+0x50e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5a7a:	237d      	movs	r3, #125	; 0x7d
    5a7c:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5a7e:	205e      	movs	r0, #94	; 0x5e
    5a80:	1c7b      	adds	r3, r7, #1
    5a82:	1c8a      	adds	r2, r1, #2
    5a84:	5458      	strb	r0, [r3, r1]
    5a86:	f7fe fe94 	bl	47b2 <PSP_CNFG_FP_REGISTERS_EXIST+0x7b2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5a8a:	237d      	movs	r3, #125	; 0x7d
    5a8c:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5a8e:	205e      	movs	r0, #94	; 0x5e
    5a90:	1c7b      	adds	r3, r7, #1
    5a92:	1c91      	adds	r1, r2, #2
    5a94:	5498      	strb	r0, [r3, r2]
    5a96:	f7fe fe80 	bl	479a <PSP_CNFG_FP_REGISTERS_EXIST+0x79a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5a9a:	237d      	movs	r3, #125	; 0x7d
    5a9c:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5a9e:	205e      	movs	r0, #94	; 0x5e
    5aa0:	1c7b      	adds	r3, r7, #1
    5aa2:	1c8a      	adds	r2, r1, #2
    5aa4:	5458      	strb	r0, [r3, r1]
    5aa6:	f7fe fe6c 	bl	4782 <PSP_CNFG_FP_REGISTERS_EXIST+0x782>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5aaa:	237d      	movs	r3, #125	; 0x7d
    5aac:	55bb      	strb	r3, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5aae:	225e      	movs	r2, #94	; 0x5e
    5ab0:	1c7b      	adds	r3, r7, #1
    5ab2:	1cb1      	adds	r1, r6, #2
    5ab4:	559a      	strb	r2, [r3, r6]
    5ab6:	f7fe fe58 	bl	476a <PSP_CNFG_FP_REGISTERS_EXIST+0x76a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5aba:	237d      	movs	r3, #125	; 0x7d
    5abc:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5abe:	205e      	movs	r0, #94	; 0x5e
    5ac0:	1c7b      	adds	r3, r7, #1
    5ac2:	1c91      	adds	r1, r2, #2
    5ac4:	5498      	strb	r0, [r3, r2]
    5ac6:	f7fe fe34 	bl	4732 <PSP_CNFG_FP_REGISTERS_EXIST+0x732>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5aca:	237d      	movs	r3, #125	; 0x7d
    5acc:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5ace:	205e      	movs	r0, #94	; 0x5e
    5ad0:	1c7b      	adds	r3, r7, #1
    5ad2:	1c8a      	adds	r2, r1, #2
    5ad4:	5458      	strb	r0, [r3, r1]
    5ad6:	f7fe fe1e 	bl	4716 <PSP_CNFG_FP_REGISTERS_EXIST+0x716>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5ada:	237d      	movs	r3, #125	; 0x7d
    5adc:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5ade:	225e      	movs	r2, #94	; 0x5e
    5ae0:	1c7b      	adds	r3, r7, #1
    5ae2:	1ca1      	adds	r1, r4, #2
    5ae4:	551a      	strb	r2, [r3, r4]
    5ae6:	f7fe fe0a 	bl	46fe <PSP_CNFG_FP_REGISTERS_EXIST+0x6fe>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5aea:	237d      	movs	r3, #125	; 0x7d
    5aec:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5aee:	215e      	movs	r1, #94	; 0x5e
    5af0:	1c7b      	adds	r3, r7, #1
    5af2:	1c94      	adds	r4, r2, #2
    5af4:	5499      	strb	r1, [r3, r2]
    5af6:	f7fe fdef 	bl	46d8 <PSP_CNFG_FP_REGISTERS_EXIST+0x6d8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5afa:	237d      	movs	r3, #125	; 0x7d
    5afc:	55bb      	strb	r3, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5afe:	215e      	movs	r1, #94	; 0x5e
    5b00:	1c7b      	adds	r3, r7, #1
    5b02:	1cb2      	adds	r2, r6, #2
    5b04:	5599      	strb	r1, [r3, r6]
    5b06:	f7fe fddb 	bl	46c0 <PSP_CNFG_FP_REGISTERS_EXIST+0x6c0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5b0a:	237d      	movs	r3, #125	; 0x7d
    5b0c:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5b0e:	215e      	movs	r1, #94	; 0x5e
    5b10:	1c7b      	adds	r3, r7, #1
    5b12:	1c94      	adds	r4, r2, #2
    5b14:	5499      	strb	r1, [r3, r2]
    5b16:	f7fe fdc2 	bl	469e <PSP_CNFG_FP_REGISTERS_EXIST+0x69e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5b1a:	237d      	movs	r3, #125	; 0x7d
    5b1c:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5b1e:	215e      	movs	r1, #94	; 0x5e
    5b20:	1c7b      	adds	r3, r7, #1
    5b22:	1ca2      	adds	r2, r4, #2
    5b24:	5519      	strb	r1, [r3, r4]
    5b26:	f7fe fdae 	bl	4686 <PSP_CNFG_FP_REGISTERS_EXIST+0x686>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5b2a:	237d      	movs	r3, #125	; 0x7d
    5b2c:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5b2e:	215e      	movs	r1, #94	; 0x5e
    5b30:	1c7b      	adds	r3, r7, #1
    5b32:	1c94      	adds	r4, r2, #2
    5b34:	5499      	strb	r1, [r3, r2]
    5b36:	f7fe fd93 	bl	4660 <PSP_CNFG_FP_REGISTERS_EXIST+0x660>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5b3a:	237d      	movs	r3, #125	; 0x7d
    5b3c:	55bb      	strb	r3, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5b3e:	215e      	movs	r1, #94	; 0x5e
    5b40:	1c7b      	adds	r3, r7, #1
    5b42:	1cb2      	adds	r2, r6, #2
    5b44:	5599      	strb	r1, [r3, r6]
    5b46:	f7fe fd7f 	bl	4648 <PSP_CNFG_FP_REGISTERS_EXIST+0x648>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5b4a:	237d      	movs	r3, #125	; 0x7d
    5b4c:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5b4e:	225e      	movs	r2, #94	; 0x5e
    5b50:	1c7b      	adds	r3, r7, #1
    5b52:	1ca1      	adds	r1, r4, #2
    5b54:	551a      	strb	r2, [r3, r4]
    5b56:	f7fe fd58 	bl	460a <PSP_CNFG_FP_REGISTERS_EXIST+0x60a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5b5a:	237d      	movs	r3, #125	; 0x7d
    5b5c:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5b5e:	215e      	movs	r1, #94	; 0x5e
    5b60:	1c7b      	adds	r3, r7, #1
    5b62:	1c94      	adds	r4, r2, #2
    5b64:	5499      	strb	r1, [r3, r2]
    5b66:	f7fe fd3d 	bl	45e4 <PSP_CNFG_FP_REGISTERS_EXIST+0x5e4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5b6a:	237d      	movs	r3, #125	; 0x7d
    5b6c:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5b6e:	215e      	movs	r1, #94	; 0x5e
    5b70:	1c7b      	adds	r3, r7, #1
    5b72:	1ca2      	adds	r2, r4, #2
    5b74:	5519      	strb	r1, [r3, r4]
    5b76:	f7fe fd29 	bl	45cc <PSP_CNFG_FP_REGISTERS_EXIST+0x5cc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5b7a:	237d      	movs	r3, #125	; 0x7d
    5b7c:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5b7e:	215e      	movs	r1, #94	; 0x5e
    5b80:	1c7b      	adds	r3, r7, #1
    5b82:	1c94      	adds	r4, r2, #2
    5b84:	5499      	strb	r1, [r3, r2]
    5b86:	f7fe fd0e 	bl	45a6 <PSP_CNFG_FP_REGISTERS_EXIST+0x5a6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5b8a:	237d      	movs	r3, #125	; 0x7d
    5b8c:	55bb      	strb	r3, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5b8e:	215e      	movs	r1, #94	; 0x5e
    5b90:	1c7b      	adds	r3, r7, #1
    5b92:	1cb2      	adds	r2, r6, #2
    5b94:	5599      	strb	r1, [r3, r6]
    5b96:	f7fe fcfa 	bl	458e <PSP_CNFG_FP_REGISTERS_EXIST+0x58e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5b9a:	237d      	movs	r3, #125	; 0x7d
    5b9c:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5b9e:	215e      	movs	r1, #94	; 0x5e
    5ba0:	1c7b      	adds	r3, r7, #1
    5ba2:	1c94      	adds	r4, r2, #2
    5ba4:	5499      	strb	r1, [r3, r2]
    5ba6:	f7fe fc9f 	bl	44e8 <PSP_CNFG_FP_REGISTERS_EXIST+0x4e8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5baa:	237d      	movs	r3, #125	; 0x7d
    5bac:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5bae:	215e      	movs	r1, #94	; 0x5e
    5bb0:	1c7b      	adds	r3, r7, #1
    5bb2:	1ca2      	adds	r2, r4, #2
    5bb4:	5519      	strb	r1, [r3, r4]
    5bb6:	f7fe fc8b 	bl	44d0 <PSP_CNFG_FP_REGISTERS_EXIST+0x4d0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5bba:	237d      	movs	r3, #125	; 0x7d
    5bbc:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5bbe:	215e      	movs	r1, #94	; 0x5e
    5bc0:	1c7b      	adds	r3, r7, #1
    5bc2:	1c94      	adds	r4, r2, #2
    5bc4:	5499      	strb	r1, [r3, r2]
    5bc6:	f7fe fc70 	bl	44aa <PSP_CNFG_FP_REGISTERS_EXIST+0x4aa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5bca:	237d      	movs	r3, #125	; 0x7d
    5bcc:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5bce:	215e      	movs	r1, #94	; 0x5e
    5bd0:	1c7b      	adds	r3, r7, #1
    5bd2:	1ca2      	adds	r2, r4, #2
    5bd4:	5519      	strb	r1, [r3, r4]
    5bd6:	e55b      	b.n	5690 <PSP_CNFG_FP_REGISTERS_EXIST+0x1690>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5bd8:	237d      	movs	r3, #125	; 0x7d
    5bda:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5bdc:	205e      	movs	r0, #94	; 0x5e
    5bde:	1c7b      	adds	r3, r7, #1
    5be0:	1c91      	adds	r1, r2, #2
    5be2:	5498      	strb	r0, [r3, r2]
    5be4:	e590      	b.n	5708 <PSP_CNFG_FP_REGISTERS_EXIST+0x1708>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5be6:	237d      	movs	r3, #125	; 0x7d
    5be8:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5bea:	215e      	movs	r1, #94	; 0x5e
    5bec:	1c7b      	adds	r3, r7, #1
    5bee:	1ca2      	adds	r2, r4, #2
    5bf0:	5519      	strb	r1, [r3, r4]
    5bf2:	e57f      	b.n	56f4 <PSP_CNFG_FP_REGISTERS_EXIST+0x16f4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5bf4:	237d      	movs	r3, #125	; 0x7d
    5bf6:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5bf8:	215e      	movs	r1, #94	; 0x5e
    5bfa:	1c7b      	adds	r3, r7, #1
    5bfc:	1c94      	adds	r4, r2, #2
    5bfe:	5499      	strb	r1, [r3, r2]
    5c00:	e567      	b.n	56d2 <PSP_CNFG_FP_REGISTERS_EXIST+0x16d2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5c02:	237d      	movs	r3, #125	; 0x7d
    5c04:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5c06:	205e      	movs	r0, #94	; 0x5e
    5c08:	1c7b      	adds	r3, r7, #1
    5c0a:	1c8a      	adds	r2, r1, #2
    5c0c:	5458      	strb	r0, [r3, r1]
    5c0e:	e555      	b.n	56bc <PSP_CNFG_FP_REGISTERS_EXIST+0x16bc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5c10:	237d      	movs	r3, #125	; 0x7d
    5c12:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5c14:	205e      	movs	r0, #94	; 0x5e
    5c16:	1c7b      	adds	r3, r7, #1
    5c18:	1c91      	adds	r1, r2, #2
    5c1a:	5498      	strb	r0, [r3, r2]
    5c1c:	e543      	b.n	56a6 <PSP_CNFG_FP_REGISTERS_EXIST+0x16a6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5c1e:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5c20:	225d      	movs	r2, #93	; 0x5d
    5c22:	1c7b      	adds	r3, r7, #1
    5c24:	1ca1      	adds	r1, r4, #2
    5c26:	551a      	strb	r2, [r3, r4]
    5c28:	f7fe fcef 	bl	460a <PSP_CNFG_FP_REGISTERS_EXIST+0x60a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5c2c:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5c2e:	215d      	movs	r1, #93	; 0x5d
    5c30:	1c7b      	adds	r3, r7, #1
    5c32:	1c94      	adds	r4, r2, #2
    5c34:	5499      	strb	r1, [r3, r2]
    5c36:	f7fe fcd5 	bl	45e4 <PSP_CNFG_FP_REGISTERS_EXIST+0x5e4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5c3a:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5c3c:	215d      	movs	r1, #93	; 0x5d
    5c3e:	1c7b      	adds	r3, r7, #1
    5c40:	1ca2      	adds	r2, r4, #2
    5c42:	5519      	strb	r1, [r3, r4]
    5c44:	f7fe fcc2 	bl	45cc <PSP_CNFG_FP_REGISTERS_EXIST+0x5cc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5c48:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5c4a:	215d      	movs	r1, #93	; 0x5d
    5c4c:	1c7b      	adds	r3, r7, #1
    5c4e:	1c94      	adds	r4, r2, #2
    5c50:	5499      	strb	r1, [r3, r2]
    5c52:	f7fe fca8 	bl	45a6 <PSP_CNFG_FP_REGISTERS_EXIST+0x5a6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5c56:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5c58:	215d      	movs	r1, #93	; 0x5d
    5c5a:	1c7b      	adds	r3, r7, #1
    5c5c:	1c94      	adds	r4, r2, #2
    5c5e:	5499      	strb	r1, [r3, r2]
    5c60:	f7fe fd1d 	bl	469e <PSP_CNFG_FP_REGISTERS_EXIST+0x69e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5c64:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5c66:	215d      	movs	r1, #93	; 0x5d
    5c68:	1c7b      	adds	r3, r7, #1
    5c6a:	1ca2      	adds	r2, r4, #2
    5c6c:	5519      	strb	r1, [r3, r4]
    5c6e:	f7fe fd0a 	bl	4686 <PSP_CNFG_FP_REGISTERS_EXIST+0x686>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5c72:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5c74:	215d      	movs	r1, #93	; 0x5d
    5c76:	1c7b      	adds	r3, r7, #1
    5c78:	1c94      	adds	r4, r2, #2
    5c7a:	5499      	strb	r1, [r3, r2]
    5c7c:	f7fe fcf0 	bl	4660 <PSP_CNFG_FP_REGISTERS_EXIST+0x660>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5c80:	55bb      	strb	r3, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5c82:	215d      	movs	r1, #93	; 0x5d
    5c84:	1c7b      	adds	r3, r7, #1
    5c86:	1cb2      	adds	r2, r6, #2
    5c88:	5599      	strb	r1, [r3, r6]
    5c8a:	f7fe fcdd 	bl	4648 <PSP_CNFG_FP_REGISTERS_EXIST+0x648>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5c8e:	55bb      	strb	r3, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5c90:	215d      	movs	r1, #93	; 0x5d
    5c92:	1c7b      	adds	r3, r7, #1
    5c94:	1cb2      	adds	r2, r6, #2
    5c96:	5599      	strb	r1, [r3, r6]
    5c98:	f7fe fc79 	bl	458e <PSP_CNFG_FP_REGISTERS_EXIST+0x58e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5c9c:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5c9e:	215d      	movs	r1, #93	; 0x5d
    5ca0:	1c7b      	adds	r3, r7, #1
    5ca2:	1c94      	adds	r4, r2, #2
    5ca4:	5499      	strb	r1, [r3, r2]
    5ca6:	f7fe fc1f 	bl	44e8 <PSP_CNFG_FP_REGISTERS_EXIST+0x4e8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5caa:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5cac:	215d      	movs	r1, #93	; 0x5d
    5cae:	1c7b      	adds	r3, r7, #1
    5cb0:	1ca2      	adds	r2, r4, #2
    5cb2:	5519      	strb	r1, [r3, r4]
    5cb4:	f7fe fc0c 	bl	44d0 <PSP_CNFG_FP_REGISTERS_EXIST+0x4d0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5cb8:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5cba:	215d      	movs	r1, #93	; 0x5d
    5cbc:	1c7b      	adds	r3, r7, #1
    5cbe:	1c94      	adds	r4, r2, #2
    5cc0:	5499      	strb	r1, [r3, r2]
    5cc2:	f7fe fbf2 	bl	44aa <PSP_CNFG_FP_REGISTERS_EXIST+0x4aa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5cc6:	55bb      	strb	r3, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5cc8:	215d      	movs	r1, #93	; 0x5d
    5cca:	1c7b      	adds	r3, r7, #1
    5ccc:	1cb2      	adds	r2, r6, #2
    5cce:	5599      	strb	r1, [r3, r6]
    5cd0:	f7fe fbdf 	bl	4492 <PSP_CNFG_FP_REGISTERS_EXIST+0x492>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5cd4:	4646      	mov	r6, r8
    5cd6:	55ba      	strb	r2, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5cd8:	1c7d      	adds	r5, r7, #1
    5cda:	2202      	movs	r2, #2
    5cdc:	4693      	mov	fp, r2
    5cde:	1c2a      	adds	r2, r5, #0
    5ce0:	265d      	movs	r6, #93	; 0x5d
    5ce2:	4442      	add	r2, r8
    5ce4:	44c3      	add	fp, r8
    5ce6:	7016      	strb	r6, [r2, #0]
    5ce8:	f7ff fb61 	bl	53ae <PSP_CNFG_FP_REGISTERS_EXIST+0x13ae>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5cec:	55ba      	strb	r2, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5cee:	1cb2      	adds	r2, r6, #2
    5cf0:	4690      	mov	r8, r2
    5cf2:	255d      	movs	r5, #93	; 0x5d
    5cf4:	1c7a      	adds	r2, r7, #1
    5cf6:	5595      	strb	r5, [r2, r6]
    5cf8:	f7ff fb4b 	bl	5392 <PSP_CNFG_FP_REGISTERS_EXIST+0x1392>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5cfc:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5cfe:	205d      	movs	r0, #93	; 0x5d
    5d00:	1c7b      	adds	r3, r7, #1
    5d02:	1c91      	adds	r1, r2, #2
    5d04:	5498      	strb	r0, [r3, r2]
    5d06:	f7fe fc02 	bl	450e <PSP_CNFG_FP_REGISTERS_EXIST+0x50e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5d0a:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5d0c:	205d      	movs	r0, #93	; 0x5d
    5d0e:	1c7b      	adds	r3, r7, #1
    5d10:	1c8a      	adds	r2, r1, #2
    5d12:	5458      	strb	r0, [r3, r1]
    5d14:	f7fe fd4d 	bl	47b2 <PSP_CNFG_FP_REGISTERS_EXIST+0x7b2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5d18:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5d1a:	225d      	movs	r2, #93	; 0x5d
    5d1c:	1c7b      	adds	r3, r7, #1
    5d1e:	464d      	mov	r5, r9
    5d20:	3102      	adds	r1, #2
    5d22:	555a      	strb	r2, [r3, r5]
    5d24:	f7ff fb77 	bl	5416 <PSP_CNFG_FP_REGISTERS_EXIST+0x1416>
    5d28:	1cb5      	adds	r5, r6, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5d2a:	55ba      	strb	r2, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5d2c:	46a9      	mov	r9, r5
    5d2e:	1c7a      	adds	r2, r7, #1
    5d30:	255d      	movs	r5, #93	; 0x5d
    5d32:	5595      	strb	r5, [r2, r6]
    5d34:	f7ff fb5b 	bl	53ee <PSP_CNFG_FP_REGISTERS_EXIST+0x13ee>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5d38:	55ba      	strb	r2, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5d3a:	1c7a      	adds	r2, r7, #1
    5d3c:	255d      	movs	r5, #93	; 0x5d
    5d3e:	445a      	add	r2, fp
    5d40:	3602      	adds	r6, #2
    5d42:	7015      	strb	r5, [r2, #0]
    5d44:	f7ff fb47 	bl	53d6 <PSP_CNFG_FP_REGISTERS_EXIST+0x13d6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5d48:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5d4a:	205d      	movs	r0, #93	; 0x5d
    5d4c:	1c7b      	adds	r3, r7, #1
    5d4e:	1c8a      	adds	r2, r1, #2
    5d50:	5458      	strb	r0, [r3, r1]
    5d52:	f7fe fce0 	bl	4716 <PSP_CNFG_FP_REGISTERS_EXIST+0x716>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5d56:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5d58:	225d      	movs	r2, #93	; 0x5d
    5d5a:	1c7b      	adds	r3, r7, #1
    5d5c:	1ca1      	adds	r1, r4, #2
    5d5e:	551a      	strb	r2, [r3, r4]
    5d60:	f7fe fccd 	bl	46fe <PSP_CNFG_FP_REGISTERS_EXIST+0x6fe>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5d64:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5d66:	215d      	movs	r1, #93	; 0x5d
    5d68:	1c7b      	adds	r3, r7, #1
    5d6a:	1c94      	adds	r4, r2, #2
    5d6c:	5499      	strb	r1, [r3, r2]
    5d6e:	f7fe fcb3 	bl	46d8 <PSP_CNFG_FP_REGISTERS_EXIST+0x6d8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5d72:	19ba      	adds	r2, r7, r6
    5d74:	7013      	strb	r3, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5d76:	215d      	movs	r1, #93	; 0x5d
    5d78:	1c7b      	adds	r3, r7, #1
    5d7a:	1cb2      	adds	r2, r6, #2
    5d7c:	5599      	strb	r1, [r3, r6]
    5d7e:	f7fe fc9f 	bl	46c0 <PSP_CNFG_FP_REGISTERS_EXIST+0x6c0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5d82:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5d84:	205d      	movs	r0, #93	; 0x5d
    5d86:	1c7b      	adds	r3, r7, #1
    5d88:	1c91      	adds	r1, r2, #2
    5d8a:	5498      	strb	r0, [r3, r2]
    5d8c:	f7fe fd05 	bl	479a <PSP_CNFG_FP_REGISTERS_EXIST+0x79a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5d90:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5d92:	205d      	movs	r0, #93	; 0x5d
    5d94:	1c7b      	adds	r3, r7, #1
    5d96:	1c8a      	adds	r2, r1, #2
    5d98:	5458      	strb	r0, [r3, r1]
    5d9a:	f7fe fcf2 	bl	4782 <PSP_CNFG_FP_REGISTERS_EXIST+0x782>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5d9e:	19ba      	adds	r2, r7, r6
    5da0:	7013      	strb	r3, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5da2:	1c7b      	adds	r3, r7, #1
    5da4:	225d      	movs	r2, #93	; 0x5d
    5da6:	1cb1      	adds	r1, r6, #2
    5da8:	559a      	strb	r2, [r3, r6]
    5daa:	f7fe fcde 	bl	476a <PSP_CNFG_FP_REGISTERS_EXIST+0x76a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5dae:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5db0:	205d      	movs	r0, #93	; 0x5d
    5db2:	1c7b      	adds	r3, r7, #1
    5db4:	1c91      	adds	r1, r2, #2
    5db6:	5498      	strb	r0, [r3, r2]
    5db8:	f7fe fcbb 	bl	4732 <PSP_CNFG_FP_REGISTERS_EXIST+0x732>
    5dbc:	1c7b      	adds	r3, r7, #1
    5dbe:	215d      	movs	r1, #93	; 0x5d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5dc0:	5538      	strb	r0, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5dc2:	1ca2      	adds	r2, r4, #2
    5dc4:	5519      	strb	r1, [r3, r4]
    5dc6:	e463      	b.n	5690 <PSP_CNFG_FP_REGISTERS_EXIST+0x1690>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5dc8:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5dca:	215d      	movs	r1, #93	; 0x5d
    5dcc:	1c7b      	adds	r3, r7, #1
    5dce:	1c94      	adds	r4, r2, #2
    5dd0:	5499      	strb	r1, [r3, r2]
    5dd2:	e47e      	b.n	56d2 <PSP_CNFG_FP_REGISTERS_EXIST+0x16d2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5dd4:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5dd6:	205d      	movs	r0, #93	; 0x5d
    5dd8:	1c7b      	adds	r3, r7, #1
    5dda:	1c8a      	adds	r2, r1, #2
    5ddc:	5458      	strb	r0, [r3, r1]
    5dde:	e46d      	b.n	56bc <PSP_CNFG_FP_REGISTERS_EXIST+0x16bc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5de0:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5de2:	205d      	movs	r0, #93	; 0x5d
    5de4:	1c7b      	adds	r3, r7, #1
    5de6:	1c91      	adds	r1, r2, #2
    5de8:	5498      	strb	r0, [r3, r2]
    5dea:	e45c      	b.n	56a6 <PSP_CNFG_FP_REGISTERS_EXIST+0x16a6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5dec:	54bb      	strb	r3, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5dee:	205d      	movs	r0, #93	; 0x5d
    5df0:	1c7b      	adds	r3, r7, #1
    5df2:	1c91      	adds	r1, r2, #2
    5df4:	5498      	strb	r0, [r3, r2]
    5df6:	e487      	b.n	5708 <PSP_CNFG_FP_REGISTERS_EXIST+0x1708>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5df8:	553b      	strb	r3, [r7, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5dfa:	215d      	movs	r1, #93	; 0x5d
    5dfc:	1c7b      	adds	r3, r7, #1
    5dfe:	1ca2      	adds	r2, r4, #2
    5e00:	5519      	strb	r1, [r3, r4]
    5e02:	e477      	b.n	56f4 <PSP_CNFG_FP_REGISTERS_EXIST+0x16f4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5e04:	237d      	movs	r3, #125	; 0x7d
    5e06:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5e08:	1c7a      	adds	r2, r7, #1
    5e0a:	235e      	movs	r3, #94	; 0x5e
    5e0c:	1c8e      	adds	r6, r1, #2
    5e0e:	5453      	strb	r3, [r2, r1]
    5e10:	f7fe fb0d 	bl	442e <PSP_CNFG_FP_REGISTERS_EXIST+0x42e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5e14:	237d      	movs	r3, #125	; 0x7d
    5e16:	465e      	mov	r6, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5e18:	1c7a      	adds	r2, r7, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:887
	for (i = 0; i < iBytesToCopy; i++)
	{
		// check for special case 1: replace 0x7E (start and end byte) with 0x7D and 0x5E
		if (pSource[i] == 0x7E)
		{
			pDest[(*pIndex)++] = 0x7D;
    5e1a:	55bb      	strb	r3, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:888
			pDest[(*pIndex)++] = 0x5E;
    5e1c:	1c13      	adds	r3, r2, #0
    5e1e:	4659      	mov	r1, fp
    5e20:	265e      	movs	r6, #94	; 0x5e
    5e22:	445b      	add	r3, fp
    5e24:	3102      	adds	r1, #2
    5e26:	701e      	strb	r6, [r3, #0]
    5e28:	e50f      	b.n	584a <PSP_CNFG_FP_REGISTERS_EXIST+0x184a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5e2a:	465e      	mov	r6, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5e2c:	1c7a      	adds	r2, r7, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5e2e:	55bb      	strb	r3, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5e30:	1c13      	adds	r3, r2, #0
    5e32:	4659      	mov	r1, fp
    5e34:	265d      	movs	r6, #93	; 0x5d
    5e36:	445b      	add	r3, fp
    5e38:	3102      	adds	r1, #2
    5e3a:	701e      	strb	r6, [r3, #0]
    5e3c:	e505      	b.n	584a <PSP_CNFG_FP_REGISTERS_EXIST+0x184a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:893
			pDest[(*pIndex)++] = 0x5E;
		}
		// check for special case 2: replace 0x7D with 0x7D and 0x5D
		else if (pSource[i] == 0x7D)
		{
			pDest[(*pIndex)++] = 0x7D;
    5e3e:	547b      	strb	r3, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:894
			pDest[(*pIndex)++] = 0x5D;
    5e40:	1c7a      	adds	r2, r7, #1
    5e42:	235d      	movs	r3, #93	; 0x5d
    5e44:	1c8e      	adds	r6, r1, #2
    5e46:	5453      	strb	r3, [r2, r1]
    5e48:	f7fe faf1 	bl	442e <PSP_CNFG_FP_REGISTERS_EXIST+0x42e>
CreateAndSendBluetoothPacketsViaUART():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1023
	// Aerospace/NED:	0, quaternion nibble    
	// Android:	  		1, quaternion nibble
	// Windows 8: 		2, quaternion nibble

	// set the quaternion, flags, angular velocity and Euler angles
	switch (globals.QuaternionPacketType)
    5e4c:	2210      	movs	r2, #16
    5e4e:	9204      	str	r2, [sp, #16]
    5e50:	4a04      	ldr	r2, [pc, #16]	; (5e64 <PSP_CNFG_FP_REGISTERS_EXIST+0x1e64>)
    5e52:	2600      	movs	r6, #0
    5e54:	2000      	movs	r0, #0
    5e56:	9601      	str	r6, [sp, #4]
    5e58:	46b3      	mov	fp, r6
    5e5a:	4690      	mov	r8, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/drivers.c:1006
	// initialize default quaternion, flags byte, angular velocity and orientation
	fq.q0 = 1.0F;
	fq.q1 = fq.q2 = fq.q3 = 0.0F;
	flags = 0x00;
	iOmega[X] = iOmega[Y] = iOmega[Z] = 0;
	iPhi = iThe = iRho = iDelta = 0;
    5e5c:	9602      	str	r6, [sp, #8]
    5e5e:	f7fe f9c0 	bl	41e2 <PSP_CNFG_FP_REGISTERS_EXIST+0x1e2>
    5e62:	46c0      	nop			; (mov r8, r8)
    5e64:	00007530 	.word	0x00007530

00005e68 <fInit_6DOF_GY_KALMAN>:
fInit_6DOF_GY_KALMAN():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:140
	return;
} // end fInit_6DOF_GB_BASIC

// function initalizes the 6DOF accel + gyro Kalman filter algorithm
void fInit_6DOF_GY_KALMAN(struct SV_6DOF_GY_KALMAN *pthisSV, int16 iSensorFS, int16 iOverSampleRatio)
{
    5e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:144
	int8 i, j;				// loop counters

	// reset the flag denoting that a first 6DOF orientation lock has been achieved
	pthisSV->iFirstOrientationLock = 0;
    5e6a:	4be1      	ldr	r3, [pc, #900]	; (61f0 <fInit_6DOF_GY_KALMAN+0x388>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:140
	return;
} // end fInit_6DOF_GB_BASIC

// function initalizes the 6DOF accel + gyro Kalman filter algorithm
void fInit_6DOF_GY_KALMAN(struct SV_6DOF_GY_KALMAN *pthisSV, int16 iSensorFS, int16 iOverSampleRatio)
{
    5e6c:	464f      	mov	r7, r9
    5e6e:	4646      	mov	r6, r8
    5e70:	b4c0      	push	{r6, r7}
    5e72:	1c17      	adds	r7, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:144
	int8 i, j;				// loop counters

	// reset the flag denoting that a first 6DOF orientation lock has been achieved
	pthisSV->iFirstOrientationLock = 0;
    5e74:	2200      	movs	r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:140
	return;
} // end fInit_6DOF_GB_BASIC

// function initalizes the 6DOF accel + gyro Kalman filter algorithm
void fInit_6DOF_GY_KALMAN(struct SV_6DOF_GY_KALMAN *pthisSV, int16 iSensorFS, int16 iOverSampleRatio)
{
    5e76:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:144
	int8 i, j;				// loop counters

	// reset the flag denoting that a first 6DOF orientation lock has been achieved
	pthisSV->iFirstOrientationLock = 0;
    5e78:	52c2      	strh	r2, [r0, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:147

	// compute and store useful product terms to save floating point calculations later
	pthisSV->fFastdeltat = 1.0F / (float) iSensorFS;
    5e7a:	1c08      	adds	r0, r1, #0
    5e7c:	f7fb fa4a 	bl	1314 <__aeabi_i2f>
    5e80:	1c01      	adds	r1, r0, #0
    5e82:	20fe      	movs	r0, #254	; 0xfe
    5e84:	0580      	lsls	r0, r0, #22
    5e86:	f7fa fda1 	bl	9cc <__aeabi_fdiv>
    5e8a:	4bda      	ldr	r3, [pc, #872]	; (61f4 <fInit_6DOF_GY_KALMAN+0x38c>)
    5e8c:	1c05      	adds	r5, r0, #0
    5e8e:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:148
	pthisSV->fdeltat = (float) iOverSampleRatio * pthisSV->fFastdeltat;
    5e90:	1c38      	adds	r0, r7, #0
    5e92:	f7fb fa3f 	bl	1314 <__aeabi_i2f>
    5e96:	1c01      	adds	r1, r0, #0
    5e98:	1c28      	adds	r0, r5, #0
    5e9a:	f7fa ff7b 	bl	d94 <__aeabi_fmul>
    5e9e:	2390      	movs	r3, #144	; 0x90
    5ea0:	00db      	lsls	r3, r3, #3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:149
	pthisSV->fdeltatsq = pthisSV->fdeltat * pthisSV->fdeltat;
    5ea2:	4ad5      	ldr	r2, [pc, #852]	; (61f8 <fInit_6DOF_GY_KALMAN+0x390>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:148
	// reset the flag denoting that a first 6DOF orientation lock has been achieved
	pthisSV->iFirstOrientationLock = 0;

	// compute and store useful product terms to save floating point calculations later
	pthisSV->fFastdeltat = 1.0F / (float) iSensorFS;
	pthisSV->fdeltat = (float) iOverSampleRatio * pthisSV->fFastdeltat;
    5ea4:	1c01      	adds	r1, r0, #0
    5ea6:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:149
	pthisSV->fdeltatsq = pthisSV->fdeltat * pthisSV->fdeltat;
    5ea8:	4691      	mov	r9, r2
    5eaa:	f7fa ff73 	bl	d94 <__aeabi_fmul>
    5eae:	464b      	mov	r3, r9
    5eb0:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:150
	pthisSV->fcasq = FCA_6DOF_GY_KALMAN * FCA_6DOF_GY_KALMAN;
    5eb2:	27fa      	movs	r7, #250	; 0xfa
    5eb4:	238f      	movs	r3, #143	; 0x8f
    5eb6:	05bf      	lsls	r7, r7, #22
    5eb8:	00db      	lsls	r3, r3, #3
    5eba:	50e7      	str	r7, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:151
	pthisSV->fQwbplusQvG = FQWB_6DOF_GY_KALMAN + FQVG_6DOF_GY_KALMAN;
    5ebc:	4acf      	ldr	r2, [pc, #828]	; (61fc <fInit_6DOF_GY_KALMAN+0x394>)
    5ebe:	2391      	movs	r3, #145	; 0x91
    5ec0:	00db      	lsls	r3, r3, #3
    5ec2:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:158
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fC3x9[i][j]= 0.0F;
    5ec4:	4bce      	ldr	r3, [pc, #824]	; (6200 <fInit_6DOF_GY_KALMAN+0x398>)
    5ec6:	2500      	movs	r5, #0
    5ec8:	50e5      	str	r5, [r4, r3]
    5eca:	2382      	movs	r3, #130	; 0x82
    5ecc:	00db      	lsls	r3, r3, #3
    5ece:	50e5      	str	r5, [r4, r3]
    5ed0:	4bcc      	ldr	r3, [pc, #816]	; (6204 <fInit_6DOF_GY_KALMAN+0x39c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:151
	// compute and store useful product terms to save floating point calculations later
	pthisSV->fFastdeltat = 1.0F / (float) iSensorFS;
	pthisSV->fdeltat = (float) iOverSampleRatio * pthisSV->fFastdeltat;
	pthisSV->fdeltatsq = pthisSV->fdeltat * pthisSV->fdeltat;
	pthisSV->fcasq = FCA_6DOF_GY_KALMAN * FCA_6DOF_GY_KALMAN;
	pthisSV->fQwbplusQvG = FQWB_6DOF_GY_KALMAN + FQVG_6DOF_GY_KALMAN;
    5ed2:	4690      	mov	r8, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:158
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fC3x9[i][j]= 0.0F;
    5ed4:	50e5      	str	r5, [r4, r3]
    5ed6:	2383      	movs	r3, #131	; 0x83
    5ed8:	00db      	lsls	r3, r3, #3
    5eda:	50e5      	str	r5, [r4, r3]
    5edc:	4bca      	ldr	r3, [pc, #808]	; (6208 <fInit_6DOF_GY_KALMAN+0x3a0>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:161
		}
	}
	pthisSV->fC3x9[0][6] = pthisSV->fC3x9[1][7] = pthisSV->fC3x9[2][8] = 1.0F;
    5ede:	4acb      	ldr	r2, [pc, #812]	; (620c <fInit_6DOF_GY_KALMAN+0x3a4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:158
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fC3x9[i][j]= 0.0F;
    5ee0:	50e5      	str	r5, [r4, r3]
    5ee2:	2384      	movs	r3, #132	; 0x84
    5ee4:	00db      	lsls	r3, r3, #3
    5ee6:	50e5      	str	r5, [r4, r3]
    5ee8:	2385      	movs	r3, #133	; 0x85
    5eea:	00db      	lsls	r3, r3, #3
    5eec:	50e5      	str	r5, [r4, r3]
    5eee:	4bc8      	ldr	r3, [pc, #800]	; (6210 <fInit_6DOF_GY_KALMAN+0x3a8>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:164
		}
	}
	pthisSV->fC3x9[0][6] = pthisSV->fC3x9[1][7] = pthisSV->fC3x9[2][8] = 1.0F;

	// zero a posteriori orientation, error vector xe+ (thetae+, be+, ae+) and b+
	f3x3matrixAeqI(pthisSV->fRPl);
    5ef0:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:158
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fC3x9[i][j]= 0.0F;
    5ef2:	50e5      	str	r5, [r4, r3]
    5ef4:	2386      	movs	r3, #134	; 0x86
    5ef6:	00db      	lsls	r3, r3, #3
    5ef8:	50e5      	str	r5, [r4, r3]
    5efa:	4bc6      	ldr	r3, [pc, #792]	; (6214 <fInit_6DOF_GY_KALMAN+0x3ac>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:164
		}
	}
	pthisSV->fC3x9[0][6] = pthisSV->fC3x9[1][7] = pthisSV->fC3x9[2][8] = 1.0F;

	// zero a posteriori orientation, error vector xe+ (thetae+, be+, ae+) and b+
	f3x3matrixAeqI(pthisSV->fRPl);
    5efc:	3014      	adds	r0, #20
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:158
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fC3x9[i][j]= 0.0F;
    5efe:	50e5      	str	r5, [r4, r3]
    5f00:	2387      	movs	r3, #135	; 0x87
    5f02:	00db      	lsls	r3, r3, #3
    5f04:	50e5      	str	r5, [r4, r3]
    5f06:	4bc4      	ldr	r3, [pc, #784]	; (6218 <fInit_6DOF_GY_KALMAN+0x3b0>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:144
void fInit_6DOF_GY_KALMAN(struct SV_6DOF_GY_KALMAN *pthisSV, int16 iSensorFS, int16 iOverSampleRatio)
{
	int8 i, j;				// loop counters

	// reset the flag denoting that a first 6DOF orientation lock has been achieved
	pthisSV->iFirstOrientationLock = 0;
    5f08:	2600      	movs	r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:158
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fC3x9[i][j]= 0.0F;
    5f0a:	50e5      	str	r5, [r4, r3]
    5f0c:	2388      	movs	r3, #136	; 0x88
    5f0e:	00db      	lsls	r3, r3, #3
    5f10:	50e5      	str	r5, [r4, r3]
    5f12:	4bc2      	ldr	r3, [pc, #776]	; (621c <fInit_6DOF_GY_KALMAN+0x3b4>)
    5f14:	50e5      	str	r5, [r4, r3]
    5f16:	2389      	movs	r3, #137	; 0x89
    5f18:	00db      	lsls	r3, r3, #3
    5f1a:	50e5      	str	r5, [r4, r3]
    5f1c:	238a      	movs	r3, #138	; 0x8a
    5f1e:	00db      	lsls	r3, r3, #3
    5f20:	50e5      	str	r5, [r4, r3]
    5f22:	4bbf      	ldr	r3, [pc, #764]	; (6220 <fInit_6DOF_GY_KALMAN+0x3b8>)
    5f24:	50e5      	str	r5, [r4, r3]
    5f26:	238b      	movs	r3, #139	; 0x8b
    5f28:	00db      	lsls	r3, r3, #3
    5f2a:	50e5      	str	r5, [r4, r3]
    5f2c:	4bbd      	ldr	r3, [pc, #756]	; (6224 <fInit_6DOF_GY_KALMAN+0x3bc>)
    5f2e:	50e5      	str	r5, [r4, r3]
    5f30:	238c      	movs	r3, #140	; 0x8c
    5f32:	00db      	lsls	r3, r3, #3
    5f34:	50e5      	str	r5, [r4, r3]
    5f36:	4bbc      	ldr	r3, [pc, #752]	; (6228 <fInit_6DOF_GY_KALMAN+0x3c0>)
    5f38:	50e5      	str	r5, [r4, r3]
    5f3a:	238d      	movs	r3, #141	; 0x8d
    5f3c:	00db      	lsls	r3, r3, #3
    5f3e:	50e5      	str	r5, [r4, r3]
    5f40:	4bba      	ldr	r3, [pc, #744]	; (622c <fInit_6DOF_GY_KALMAN+0x3c4>)
    5f42:	50e5      	str	r5, [r4, r3]
    5f44:	238e      	movs	r3, #142	; 0x8e
    5f46:	00db      	lsls	r3, r3, #3
    5f48:	50e5      	str	r5, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:161
		}
	}
	pthisSV->fC3x9[0][6] = pthisSV->fC3x9[1][7] = pthisSV->fC3x9[2][8] = 1.0F;
    5f4a:	23fe      	movs	r3, #254	; 0xfe
    5f4c:	059b      	lsls	r3, r3, #22
    5f4e:	50a3      	str	r3, [r4, r2]
    5f50:	4ab7      	ldr	r2, [pc, #732]	; (6230 <fInit_6DOF_GY_KALMAN+0x3c8>)
    5f52:	50a3      	str	r3, [r4, r2]
    5f54:	4ab7      	ldr	r2, [pc, #732]	; (6234 <fInit_6DOF_GY_KALMAN+0x3cc>)
    5f56:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:164

	// zero a posteriori orientation, error vector xe+ (thetae+, be+, ae+) and b+
	f3x3matrixAeqI(pthisSV->fRPl);
    5f58:	f007 fe0c 	bl	db74 <f3x3matrixAeqI>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:165
	fqAeq1(&(pthisSV->fqPl));
    5f5c:	1c20      	adds	r0, r4, #0
    5f5e:	3038      	adds	r0, #56	; 0x38
    5f60:	f00a fb30 	bl	105c4 <fqAeq1>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:168
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = pthisSV->fbPl[i] = 0.0F;
    5f64:	1c23      	adds	r3, r4, #0
    5f66:	3364      	adds	r3, #100	; 0x64
    5f68:	701e      	strb	r6, [r3, #0]
    5f6a:	705e      	strb	r6, [r3, #1]
    5f6c:	709e      	strb	r6, [r3, #2]
    5f6e:	70de      	strb	r6, [r3, #3]
    5f70:	711e      	strb	r6, [r3, #4]
    5f72:	715e      	strb	r6, [r3, #5]
    5f74:	719e      	strb	r6, [r3, #6]
    5f76:	71de      	strb	r6, [r3, #7]
    5f78:	721e      	strb	r6, [r3, #8]
    5f7a:	725e      	strb	r6, [r3, #9]
    5f7c:	729e      	strb	r6, [r3, #10]
    5f7e:	72de      	strb	r6, [r3, #11]
    5f80:	3380      	adds	r3, #128	; 0x80
    5f82:	701e      	strb	r6, [r3, #0]
    5f84:	705e      	strb	r6, [r3, #1]
    5f86:	709e      	strb	r6, [r3, #2]
    5f88:	70de      	strb	r6, [r3, #3]
    5f8a:	711e      	strb	r6, [r3, #4]
    5f8c:	715e      	strb	r6, [r3, #5]
    5f8e:	719e      	strb	r6, [r3, #6]
    5f90:	71de      	strb	r6, [r3, #7]
    5f92:	721e      	strb	r6, [r3, #8]
    5f94:	725e      	strb	r6, [r3, #9]
    5f96:	729e      	strb	r6, [r3, #10]
    5f98:	72de      	strb	r6, [r3, #11]
    5f9a:	3b68      	subs	r3, #104	; 0x68
    5f9c:	701e      	strb	r6, [r3, #0]
    5f9e:	705e      	strb	r6, [r3, #1]
    5fa0:	709e      	strb	r6, [r3, #2]
    5fa2:	70de      	strb	r6, [r3, #3]
    5fa4:	711e      	strb	r6, [r3, #4]
    5fa6:	715e      	strb	r6, [r3, #5]
    5fa8:	719e      	strb	r6, [r3, #6]
    5faa:	71de      	strb	r6, [r3, #7]
    5fac:	721e      	strb	r6, [r3, #8]
    5fae:	725e      	strb	r6, [r3, #9]
    5fb0:	729e      	strb	r6, [r3, #10]
    5fb2:	72de      	strb	r6, [r3, #11]
    5fb4:	3b0c      	subs	r3, #12
    5fb6:	701e      	strb	r6, [r3, #0]
    5fb8:	705e      	strb	r6, [r3, #1]
    5fba:	709e      	strb	r6, [r3, #2]
    5fbc:	70de      	strb	r6, [r3, #3]
    5fbe:	711e      	strb	r6, [r3, #4]
    5fc0:	715e      	strb	r6, [r3, #5]
    5fc2:	719e      	strb	r6, [r3, #6]
    5fc4:	71de      	strb	r6, [r3, #7]
    5fc6:	721e      	strb	r6, [r3, #8]
    5fc8:	725e      	strb	r6, [r3, #9]
    5fca:	729e      	strb	r6, [r3, #10]
    5fcc:	72de      	strb	r6, [r3, #11]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:173
	}

	// initialize noise variance for Qv and Qw matrix updates
	pthisSV->fQvAA = FQVA_6DOF_GY_KALMAN + FQWA_6DOF_GY_KALMAN + 
			FDEGTORAD * FDEGTORAD * pthisSV->fdeltatsq * (FQWB_6DOF_GY_KALMAN + FQVG_6DOF_GY_KALMAN);
    5fce:	464b      	mov	r3, r9
    5fd0:	58e0      	ldr	r0, [r4, r3]
    5fd2:	4999      	ldr	r1, [pc, #612]	; (6238 <fInit_6DOF_GY_KALMAN+0x3d0>)
    5fd4:	f7fa fede 	bl	d94 <__aeabi_fmul>
    5fd8:	4641      	mov	r1, r8
    5fda:	f7fa fedb 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:172
	{
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = pthisSV->fbPl[i] = 0.0F;
	}

	// initialize noise variance for Qv and Qw matrix updates
	pthisSV->fQvAA = FQVA_6DOF_GY_KALMAN + FQWA_6DOF_GY_KALMAN + 
    5fde:	4997      	ldr	r1, [pc, #604]	; (623c <fInit_6DOF_GY_KALMAN+0x3d4>)
    5fe0:	f7fa fb88 	bl	6f4 <__aeabi_fadd>
    5fe4:	238a      	movs	r3, #138	; 0x8a
    5fe6:	005b      	lsls	r3, r3, #1
    5fe8:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:182
	// zero the matrix Qw
	for (i = 0; i < 9; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fQw9x9[i][j] = 0.0F;
    5fea:	23b3      	movs	r3, #179	; 0xb3
    5fec:	009b      	lsls	r3, r3, #2
    5fee:	50e5      	str	r5, [r4, r3]
    5ff0:	23b4      	movs	r3, #180	; 0xb4
    5ff2:	009b      	lsls	r3, r3, #2
    5ff4:	50e5      	str	r5, [r4, r3]
    5ff6:	23b6      	movs	r3, #182	; 0xb6
    5ff8:	009b      	lsls	r3, r3, #2
    5ffa:	50e5      	str	r5, [r4, r3]
    5ffc:	23b7      	movs	r3, #183	; 0xb7
    5ffe:	009b      	lsls	r3, r3, #2
    6000:	50e5      	str	r5, [r4, r3]
    6002:	23b8      	movs	r3, #184	; 0xb8
    6004:	009b      	lsls	r3, r3, #2
    6006:	50e5      	str	r5, [r4, r3]
    6008:	23b9      	movs	r3, #185	; 0xb9
    600a:	009b      	lsls	r3, r3, #2
    600c:	50e5      	str	r5, [r4, r3]
    600e:	23ba      	movs	r3, #186	; 0xba
    6010:	009b      	lsls	r3, r3, #2
    6012:	50e5      	str	r5, [r4, r3]
    6014:	23bb      	movs	r3, #187	; 0xbb
    6016:	009b      	lsls	r3, r3, #2
    6018:	50e5      	str	r5, [r4, r3]
    601a:	23bd      	movs	r3, #189	; 0xbd
    601c:	009b      	lsls	r3, r3, #2
    601e:	50e5      	str	r5, [r4, r3]
    6020:	23be      	movs	r3, #190	; 0xbe
    6022:	009b      	lsls	r3, r3, #2
    6024:	50e5      	str	r5, [r4, r3]
    6026:	23c0      	movs	r3, #192	; 0xc0
    6028:	009b      	lsls	r3, r3, #2
    602a:	50e5      	str	r5, [r4, r3]
    602c:	23c1      	movs	r3, #193	; 0xc1
    602e:	009b      	lsls	r3, r3, #2
    6030:	50e5      	str	r5, [r4, r3]
    6032:	23c2      	movs	r3, #194	; 0xc2
    6034:	009b      	lsls	r3, r3, #2
    6036:	50e5      	str	r5, [r4, r3]
    6038:	23c3      	movs	r3, #195	; 0xc3
    603a:	009b      	lsls	r3, r3, #2
    603c:	50e5      	str	r5, [r4, r3]
    603e:	23c4      	movs	r3, #196	; 0xc4
    6040:	009b      	lsls	r3, r3, #2
    6042:	50e5      	str	r5, [r4, r3]
    6044:	23c5      	movs	r3, #197	; 0xc5
    6046:	009b      	lsls	r3, r3, #2
    6048:	50e5      	str	r5, [r4, r3]
    604a:	23c7      	movs	r3, #199	; 0xc7
    604c:	009b      	lsls	r3, r3, #2
    604e:	50e5      	str	r5, [r4, r3]
    6050:	23c8      	movs	r3, #200	; 0xc8
    6052:	009b      	lsls	r3, r3, #2
    6054:	50e5      	str	r5, [r4, r3]
    6056:	23ca      	movs	r3, #202	; 0xca
    6058:	009b      	lsls	r3, r3, #2
    605a:	50e5      	str	r5, [r4, r3]
    605c:	23cb      	movs	r3, #203	; 0xcb
    605e:	009b      	lsls	r3, r3, #2
    6060:	50e5      	str	r5, [r4, r3]
    6062:	23cc      	movs	r3, #204	; 0xcc
    6064:	009b      	lsls	r3, r3, #2
    6066:	50e5      	str	r5, [r4, r3]
    6068:	23ce      	movs	r3, #206	; 0xce
    606a:	009b      	lsls	r3, r3, #2
    606c:	50e5      	str	r5, [r4, r3]
    606e:	23cf      	movs	r3, #207	; 0xcf
    6070:	009b      	lsls	r3, r3, #2
    6072:	50e5      	str	r5, [r4, r3]
    6074:	23d1      	movs	r3, #209	; 0xd1
    6076:	009b      	lsls	r3, r3, #2
    6078:	50e5      	str	r5, [r4, r3]
    607a:	23d2      	movs	r3, #210	; 0xd2
    607c:	009b      	lsls	r3, r3, #2
    607e:	50e5      	str	r5, [r4, r3]
    6080:	23d3      	movs	r3, #211	; 0xd3
    6082:	009b      	lsls	r3, r3, #2
    6084:	50e5      	str	r5, [r4, r3]
    6086:	23d4      	movs	r3, #212	; 0xd4
    6088:	009b      	lsls	r3, r3, #2
    608a:	50e5      	str	r5, [r4, r3]
    608c:	23d5      	movs	r3, #213	; 0xd5
    608e:	009b      	lsls	r3, r3, #2
    6090:	50e5      	str	r5, [r4, r3]
    6092:	23d6      	movs	r3, #214	; 0xd6
    6094:	009b      	lsls	r3, r3, #2
    6096:	50e5      	str	r5, [r4, r3]
    6098:	23d8      	movs	r3, #216	; 0xd8
    609a:	009b      	lsls	r3, r3, #2
    609c:	50e5      	str	r5, [r4, r3]
    609e:	23d9      	movs	r3, #217	; 0xd9
    60a0:	009b      	lsls	r3, r3, #2
    60a2:	50e5      	str	r5, [r4, r3]
    60a4:	23db      	movs	r3, #219	; 0xdb
    60a6:	009b      	lsls	r3, r3, #2
    60a8:	50e5      	str	r5, [r4, r3]
    60aa:	23dc      	movs	r3, #220	; 0xdc
    60ac:	009b      	lsls	r3, r3, #2
    60ae:	50e5      	str	r5, [r4, r3]
    60b0:	23dd      	movs	r3, #221	; 0xdd
    60b2:	009b      	lsls	r3, r3, #2
    60b4:	50e5      	str	r5, [r4, r3]
    60b6:	23de      	movs	r3, #222	; 0xde
    60b8:	009b      	lsls	r3, r3, #2
    60ba:	50e5      	str	r5, [r4, r3]
    60bc:	23df      	movs	r3, #223	; 0xdf
    60be:	009b      	lsls	r3, r3, #2
    60c0:	50e5      	str	r5, [r4, r3]
    60c2:	23e0      	movs	r3, #224	; 0xe0
    60c4:	009b      	lsls	r3, r3, #2
    60c6:	50e5      	str	r5, [r4, r3]
    60c8:	23e2      	movs	r3, #226	; 0xe2
    60ca:	009b      	lsls	r3, r3, #2
    60cc:	50e5      	str	r5, [r4, r3]
    60ce:	23e3      	movs	r3, #227	; 0xe3
    60d0:	009b      	lsls	r3, r3, #2
    60d2:	50e5      	str	r5, [r4, r3]
    60d4:	23e5      	movs	r3, #229	; 0xe5
    60d6:	009b      	lsls	r3, r3, #2
    60d8:	50e5      	str	r5, [r4, r3]
    60da:	23e6      	movs	r3, #230	; 0xe6
    60dc:	009b      	lsls	r3, r3, #2
    60de:	50e5      	str	r5, [r4, r3]
    60e0:	23e7      	movs	r3, #231	; 0xe7
    60e2:	009b      	lsls	r3, r3, #2
    60e4:	50e5      	str	r5, [r4, r3]
    60e6:	23e8      	movs	r3, #232	; 0xe8
    60e8:	009b      	lsls	r3, r3, #2
    60ea:	50e5      	str	r5, [r4, r3]
    60ec:	23e9      	movs	r3, #233	; 0xe9
    60ee:	009b      	lsls	r3, r3, #2
    60f0:	50e5      	str	r5, [r4, r3]
    60f2:	23ea      	movs	r3, #234	; 0xea
    60f4:	009b      	lsls	r3, r3, #2
    60f6:	50e5      	str	r5, [r4, r3]
    60f8:	23eb      	movs	r3, #235	; 0xeb
    60fa:	009b      	lsls	r3, r3, #2
    60fc:	50e5      	str	r5, [r4, r3]
    60fe:	23ec      	movs	r3, #236	; 0xec
    6100:	009b      	lsls	r3, r3, #2
    6102:	50e5      	str	r5, [r4, r3]
    6104:	23ed      	movs	r3, #237	; 0xed
    6106:	009b      	lsls	r3, r3, #2
    6108:	50e5      	str	r5, [r4, r3]
    610a:	23ef      	movs	r3, #239	; 0xef
    610c:	009b      	lsls	r3, r3, #2
    610e:	50e5      	str	r5, [r4, r3]
    6110:	23f0      	movs	r3, #240	; 0xf0
    6112:	009b      	lsls	r3, r3, #2
    6114:	50e5      	str	r5, [r4, r3]
    6116:	23f1      	movs	r3, #241	; 0xf1
    6118:	009b      	lsls	r3, r3, #2
    611a:	50e5      	str	r5, [r4, r3]
    611c:	23f2      	movs	r3, #242	; 0xf2
    611e:	009b      	lsls	r3, r3, #2
    6120:	50e5      	str	r5, [r4, r3]
    6122:	23f3      	movs	r3, #243	; 0xf3
    6124:	009b      	lsls	r3, r3, #2
    6126:	50e5      	str	r5, [r4, r3]
    6128:	23f4      	movs	r3, #244	; 0xf4
    612a:	009b      	lsls	r3, r3, #2
    612c:	50e5      	str	r5, [r4, r3]
    612e:	23f5      	movs	r3, #245	; 0xf5
    6130:	009b      	lsls	r3, r3, #2
    6132:	50e5      	str	r5, [r4, r3]
    6134:	23f6      	movs	r3, #246	; 0xf6
    6136:	009b      	lsls	r3, r3, #2
    6138:	50e5      	str	r5, [r4, r3]
    613a:	23f7      	movs	r3, #247	; 0xf7
    613c:	009b      	lsls	r3, r3, #2
    613e:	50e5      	str	r5, [r4, r3]
    6140:	23f9      	movs	r3, #249	; 0xf9
    6142:	009b      	lsls	r3, r3, #2
    6144:	50e5      	str	r5, [r4, r3]
    6146:	23fa      	movs	r3, #250	; 0xfa
    6148:	009b      	lsls	r3, r3, #2
    614a:	50e5      	str	r5, [r4, r3]
    614c:	23fb      	movs	r3, #251	; 0xfb
    614e:	009b      	lsls	r3, r3, #2
    6150:	50e5      	str	r5, [r4, r3]
    6152:	23fc      	movs	r3, #252	; 0xfc
    6154:	009b      	lsls	r3, r3, #2
    6156:	50e5      	str	r5, [r4, r3]
    6158:	23fd      	movs	r3, #253	; 0xfd
    615a:	009b      	lsls	r3, r3, #2
    615c:	50e5      	str	r5, [r4, r3]
    615e:	23fe      	movs	r3, #254	; 0xfe
    6160:	009b      	lsls	r3, r3, #2
    6162:	50e5      	str	r5, [r4, r3]
    6164:	23ff      	movs	r3, #255	; 0xff
    6166:	009b      	lsls	r3, r3, #2
    6168:	50e5      	str	r5, [r4, r3]
    616a:	2380      	movs	r3, #128	; 0x80
    616c:	00db      	lsls	r3, r3, #3
    616e:	50e5      	str	r5, [r4, r3]
    6170:	4b33      	ldr	r3, [pc, #204]	; (6240 <fInit_6DOF_GY_KALMAN+0x3d8>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:189
	}
	// loop over non-zero values
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw9x9[i][i] = FQWINITTHTH_6DOF_GY_KALMAN;
    6172:	4a34      	ldr	r2, [pc, #208]	; (6244 <fInit_6DOF_GY_KALMAN+0x3dc>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:182
	// zero the matrix Qw
	for (i = 0; i < 9; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fQw9x9[i][j] = 0.0F;
    6174:	50e5      	str	r5, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:189
	}
	// loop over non-zero values
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw9x9[i][i] = FQWINITTHTH_6DOF_GY_KALMAN;
    6176:	23b2      	movs	r3, #178	; 0xb2
    6178:	009b      	lsls	r3, r3, #2
    617a:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:191
		// b_e * b_e terms
		pthisSV->fQw9x9[i + 3][i + 3] = FQWINITBB_6DOF_GY_KALMAN;
    617c:	23d0      	movs	r3, #208	; 0xd0
    617e:	009b      	lsls	r3, r3, #2
    6180:	50e7      	str	r7, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:193
		// th_e * b_e terms
		pthisSV->fQw9x9[i][i + 3] = pthisSV->fQw9x9[i + 3][i] = FQWINITTHB_6DOF_GY_KALMAN;
    6182:	23cd      	movs	r3, #205	; 0xcd
    6184:	009b      	lsls	r3, r3, #2
    6186:	50e5      	str	r5, [r4, r3]
    6188:	23b5      	movs	r3, #181	; 0xb5
    618a:	009b      	lsls	r3, r3, #2
    618c:	50e5      	str	r5, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:195
		// a_e * a_e terms
		pthisSV->fQw9x9[i + 6][i + 6] = FQWINITAA_6DOF_GY_KALMAN;
    618e:	21ee      	movs	r1, #238	; 0xee
    6190:	4b2d      	ldr	r3, [pc, #180]	; (6248 <fInit_6DOF_GY_KALMAN+0x3e0>)
    6192:	0089      	lsls	r1, r1, #2
    6194:	5063      	str	r3, [r4, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:189
	}
	// loop over non-zero values
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw9x9[i][i] = FQWINITTHTH_6DOF_GY_KALMAN;
    6196:	21bc      	movs	r1, #188	; 0xbc
    6198:	0089      	lsls	r1, r1, #2
    619a:	5062      	str	r2, [r4, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:191
		// b_e * b_e terms
		pthisSV->fQw9x9[i + 3][i + 3] = FQWINITBB_6DOF_GY_KALMAN;
    619c:	21da      	movs	r1, #218	; 0xda
    619e:	0089      	lsls	r1, r1, #2
    61a0:	5067      	str	r7, [r4, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:193
		// th_e * b_e terms
		pthisSV->fQw9x9[i][i + 3] = pthisSV->fQw9x9[i + 3][i] = FQWINITTHB_6DOF_GY_KALMAN;
    61a2:	21d7      	movs	r1, #215	; 0xd7
    61a4:	0089      	lsls	r1, r1, #2
    61a6:	5065      	str	r5, [r4, r1]
    61a8:	21bf      	movs	r1, #191	; 0xbf
    61aa:	0089      	lsls	r1, r1, #2
    61ac:	5065      	str	r5, [r4, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:195
		// a_e * a_e terms
		pthisSV->fQw9x9[i + 6][i + 6] = FQWINITAA_6DOF_GY_KALMAN;
    61ae:	21f8      	movs	r1, #248	; 0xf8
    61b0:	0089      	lsls	r1, r1, #2
    61b2:	5063      	str	r3, [r4, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:189
	}
	// loop over non-zero values
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw9x9[i][i] = FQWINITTHTH_6DOF_GY_KALMAN;
    61b4:	21c6      	movs	r1, #198	; 0xc6
    61b6:	0089      	lsls	r1, r1, #2
    61b8:	5062      	str	r2, [r4, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:191
		// b_e * b_e terms
		pthisSV->fQw9x9[i + 3][i + 3] = FQWINITBB_6DOF_GY_KALMAN;
    61ba:	22e4      	movs	r2, #228	; 0xe4
    61bc:	0092      	lsls	r2, r2, #2
    61be:	50a7      	str	r7, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:193
		// th_e * b_e terms
		pthisSV->fQw9x9[i][i + 3] = pthisSV->fQw9x9[i + 3][i] = FQWINITTHB_6DOF_GY_KALMAN;
    61c0:	22e1      	movs	r2, #225	; 0xe1
    61c2:	0092      	lsls	r2, r2, #2
    61c4:	50a5      	str	r5, [r4, r2]
    61c6:	22c9      	movs	r2, #201	; 0xc9
    61c8:	0092      	lsls	r2, r2, #2
    61ca:	50a5      	str	r5, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:195
		// a_e * a_e terms
		pthisSV->fQw9x9[i + 6][i + 6] = FQWINITAA_6DOF_GY_KALMAN;
    61cc:	2281      	movs	r2, #129	; 0x81
    61ce:	00d2      	lsls	r2, r2, #3
    61d0:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:199
	}

	// update the default quaternion type supported to the most sophisticated
	if (globals.DefaultQuaternionPacketType < Q6AG)
    61d2:	4b1e      	ldr	r3, [pc, #120]	; (624c <fInit_6DOF_GY_KALMAN+0x3e4>)
    61d4:	795a      	ldrb	r2, [r3, #5]
    61d6:	2a03      	cmp	r2, #3
    61d8:	d802      	bhi.n	61e0 <fInit_6DOF_GY_KALMAN+0x378>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:200
		globals.QuaternionPacketType = globals.DefaultQuaternionPacketType = Q6AG; 
    61da:	2204      	movs	r2, #4
    61dc:	715a      	strb	r2, [r3, #5]
    61de:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:203

	// clear the reset flag
	pthisSV->resetflag = false;
    61e0:	4b1b      	ldr	r3, [pc, #108]	; (6250 <fInit_6DOF_GY_KALMAN+0x3e8>)
    61e2:	2200      	movs	r2, #0
    61e4:	54e2      	strb	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:206

	return;
} // end fInit_6DOF_GY_KALMAN
    61e6:	bc0c      	pop	{r2, r3}
    61e8:	4690      	mov	r8, r2
    61ea:	4699      	mov	r9, r3
    61ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    61ee:	46c0      	nop			; (mov r8, r8)
    61f0:	0000048c 	.word	0x0000048c
    61f4:	0000047c 	.word	0x0000047c
    61f8:	00000484 	.word	0x00000484
    61fc:	3e99999a 	.word	0x3e99999a
    6200:	0000040c 	.word	0x0000040c
    6204:	00000414 	.word	0x00000414
    6208:	0000041c 	.word	0x0000041c
    620c:	00000474 	.word	0x00000474
    6210:	0000042c 	.word	0x0000042c
    6214:	00000434 	.word	0x00000434
    6218:	0000043c 	.word	0x0000043c
    621c:	00000444 	.word	0x00000444
    6220:	00000454 	.word	0x00000454
    6224:	0000045c 	.word	0x0000045c
    6228:	00000464 	.word	0x00000464
    622c:	0000046c 	.word	0x0000046c
    6230:	0000044c 	.word	0x0000044c
    6234:	00000424 	.word	0x00000424
    6238:	399fb50f 	.word	0x399fb50f
    623c:	38d5e8d5 	.word	0x38d5e8d5
    6240:	00000404 	.word	0x00000404
    6244:	3ca3d70a 	.word	0x3ca3d70a
    6248:	38d1b717 	.word	0x38d1b717
    624c:	1fffe310 	.word	0x1fffe310
    6250:	0000048e 	.word	0x0000048e

00006254 <fInit_9DOF_GBY_KALMAN>:
fInit_9DOF_GBY_KALMAN():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:210

// function initializes the 9DOF Kalman filter
void fInit_9DOF_GBY_KALMAN(struct SV_9DOF_GBY_KALMAN *pthisSV, int16 ithisCoordSystem, int16 iSensorFS, int16 iOverSampleRatio)
{
    6254:	b5f0      	push	{r4, r5, r6, r7, lr}
    6256:	4647      	mov	r7, r8
    6258:	4698      	mov	r8, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:214
	int8 i, j;				// loop counters

	// reset the flag denoting that a first 9DOF orientation lock has been achieved
	pthisSV->iFirstOrientationLock = 0;
    625a:	4bfd      	ldr	r3, [pc, #1012]	; (6650 <fInit_9DOF_GBY_KALMAN+0x3fc>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:210
	return;
} // end fInit_6DOF_GY_KALMAN

// function initializes the 9DOF Kalman filter
void fInit_9DOF_GBY_KALMAN(struct SV_9DOF_GBY_KALMAN *pthisSV, int16 ithisCoordSystem, int16 iSensorFS, int16 iOverSampleRatio)
{
    625c:	b480      	push	{r7}
    625e:	1c0f      	adds	r7, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:214
	int8 i, j;				// loop counters

	// reset the flag denoting that a first 9DOF orientation lock has been achieved
	pthisSV->iFirstOrientationLock = 0;
    6260:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:210
	return;
} // end fInit_6DOF_GY_KALMAN

// function initializes the 9DOF Kalman filter
void fInit_9DOF_GBY_KALMAN(struct SV_9DOF_GBY_KALMAN *pthisSV, int16 ithisCoordSystem, int16 iSensorFS, int16 iOverSampleRatio)
{
    6262:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:214
	int8 i, j;				// loop counters

	// reset the flag denoting that a first 9DOF orientation lock has been achieved
	pthisSV->iFirstOrientationLock = 0;
    6264:	52c1      	strh	r1, [r0, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:217

	// compute and store useful product terms to save floating point calculations later
	pthisSV->fFastdeltat = 1.0F / (float) iSensorFS;
    6266:	1c10      	adds	r0, r2, #0
    6268:	f7fb f854 	bl	1314 <__aeabi_i2f>
    626c:	1c01      	adds	r1, r0, #0
    626e:	20fe      	movs	r0, #254	; 0xfe
    6270:	0580      	lsls	r0, r0, #22
    6272:	f7fa fbab 	bl	9cc <__aeabi_fdiv>
    6276:	4bf7      	ldr	r3, [pc, #988]	; (6654 <fInit_9DOF_GBY_KALMAN+0x400>)
    6278:	1c05      	adds	r5, r0, #0
    627a:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:218
	pthisSV->fdeltat = (float) iOverSampleRatio * pthisSV->fFastdeltat;
    627c:	4640      	mov	r0, r8
    627e:	f7fb f849 	bl	1314 <__aeabi_i2f>
    6282:	1c01      	adds	r1, r0, #0
    6284:	1c28      	adds	r0, r5, #0
    6286:	f7fa fd85 	bl	d94 <__aeabi_fmul>
    628a:	4bf3      	ldr	r3, [pc, #972]	; (6658 <fInit_9DOF_GBY_KALMAN+0x404>)
    628c:	1c01      	adds	r1, r0, #0
    628e:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:219
	pthisSV->fdeltatsq = pthisSV->fdeltat * pthisSV->fdeltat;
    6290:	f7fa fd80 	bl	d94 <__aeabi_fmul>
    6294:	4bf1      	ldr	r3, [pc, #964]	; (665c <fInit_9DOF_GBY_KALMAN+0x408>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:220
	pthisSV->fcasq = FCA_9DOF_GBY_KALMAN * FCA_9DOF_GBY_KALMAN;
    6296:	4af2      	ldr	r2, [pc, #968]	; (6660 <fInit_9DOF_GBY_KALMAN+0x40c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:219
	pthisSV->iFirstOrientationLock = 0;

	// compute and store useful product terms to save floating point calculations later
	pthisSV->fFastdeltat = 1.0F / (float) iSensorFS;
	pthisSV->fdeltat = (float) iOverSampleRatio * pthisSV->fFastdeltat;
	pthisSV->fdeltatsq = pthisSV->fdeltat * pthisSV->fdeltat;
    6298:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:220
	pthisSV->fcasq = FCA_9DOF_GBY_KALMAN * FCA_9DOF_GBY_KALMAN;
    629a:	23fa      	movs	r3, #250	; 0xfa
    629c:	059b      	lsls	r3, r3, #22
    629e:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:221
	pthisSV->fcdsq = FCD_9DOF_GBY_KALMAN * FCD_9DOF_GBY_KALMAN;
    62a0:	2282      	movs	r2, #130	; 0x82
    62a2:	0112      	lsls	r2, r2, #4
    62a4:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:222
	pthisSV->fQwbplusQvG = FQWB_9DOF_GBY_KALMAN + FQVG_9DOF_GBY_KALMAN;
    62a6:	4aef      	ldr	r2, [pc, #956]	; (6664 <fInit_9DOF_GBY_KALMAN+0x410>)
    62a8:	2383      	movs	r3, #131	; 0x83
    62aa:	011b      	lsls	r3, r3, #4
    62ac:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:229
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 6; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fC6x12[i][j]= 0.0F;
    62ae:	23d7      	movs	r3, #215	; 0xd7
    62b0:	2500      	movs	r5, #0
    62b2:	00db      	lsls	r3, r3, #3
    62b4:	50e5      	str	r5, [r4, r3]
    62b6:	4bec      	ldr	r3, [pc, #944]	; (6668 <fInit_9DOF_GBY_KALMAN+0x414>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:232
		}
	}
	pthisSV->fC6x12[0][6] = pthisSV->fC6x12[1][7] = pthisSV->fC6x12[2][8] = 1.0F; 
    62b8:	22e7      	movs	r2, #231	; 0xe7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:229
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 6; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fC6x12[i][j]= 0.0F;
    62ba:	50e5      	str	r5, [r4, r3]
    62bc:	23d8      	movs	r3, #216	; 0xd8
    62be:	00db      	lsls	r3, r3, #3
    62c0:	50e5      	str	r5, [r4, r3]
    62c2:	4bea      	ldr	r3, [pc, #936]	; (666c <fInit_9DOF_GBY_KALMAN+0x418>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:232
		}
	}
	pthisSV->fC6x12[0][6] = pthisSV->fC6x12[1][7] = pthisSV->fC6x12[2][8] = 1.0F; 
    62c4:	00d2      	lsls	r2, r2, #3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:229
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 6; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fC6x12[i][j]= 0.0F;
    62c6:	50e5      	str	r5, [r4, r3]
    62c8:	23d9      	movs	r3, #217	; 0xd9
    62ca:	00db      	lsls	r3, r3, #3
    62cc:	50e5      	str	r5, [r4, r3]
    62ce:	4be8      	ldr	r3, [pc, #928]	; (6670 <fInit_9DOF_GBY_KALMAN+0x41c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:236
	}
	pthisSV->fC6x12[0][6] = pthisSV->fC6x12[1][7] = pthisSV->fC6x12[2][8] = 1.0F; 
	pthisSV->fC6x12[3][9] = pthisSV->fC6x12[4][10] = pthisSV->fC6x12[5][11] = -1.0F; 

	// zero a posteriori orientation, error vector xe+ (thetae+, be+, de+, ae+) and b+ and inertial
	f3x3matrixAeqI(pthisSV->fRPl);
    62d0:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:229
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 6; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fC6x12[i][j]= 0.0F;
    62d2:	50e5      	str	r5, [r4, r3]
    62d4:	4be7      	ldr	r3, [pc, #924]	; (6674 <fInit_9DOF_GBY_KALMAN+0x420>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:236
	}
	pthisSV->fC6x12[0][6] = pthisSV->fC6x12[1][7] = pthisSV->fC6x12[2][8] = 1.0F; 
	pthisSV->fC6x12[3][9] = pthisSV->fC6x12[4][10] = pthisSV->fC6x12[5][11] = -1.0F; 

	// zero a posteriori orientation, error vector xe+ (thetae+, be+, de+, ae+) and b+ and inertial
	f3x3matrixAeqI(pthisSV->fRPl);
    62d6:	3014      	adds	r0, #20
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:229
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 6; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fC6x12[i][j]= 0.0F;
    62d8:	50e5      	str	r5, [r4, r3]
    62da:	23db      	movs	r3, #219	; 0xdb
    62dc:	00db      	lsls	r3, r3, #3
    62de:	50e5      	str	r5, [r4, r3]
    62e0:	4be5      	ldr	r3, [pc, #916]	; (6678 <fInit_9DOF_GBY_KALMAN+0x424>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:214
void fInit_9DOF_GBY_KALMAN(struct SV_9DOF_GBY_KALMAN *pthisSV, int16 ithisCoordSystem, int16 iSensorFS, int16 iOverSampleRatio)
{
	int8 i, j;				// loop counters

	// reset the flag denoting that a first 9DOF orientation lock has been achieved
	pthisSV->iFirstOrientationLock = 0;
    62e2:	2600      	movs	r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:229
	// initialize the fixed entries in the measurement matrix C
	for (i = 0; i < 6; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fC6x12[i][j]= 0.0F;
    62e4:	50e5      	str	r5, [r4, r3]
    62e6:	23dc      	movs	r3, #220	; 0xdc
    62e8:	00db      	lsls	r3, r3, #3
    62ea:	50e5      	str	r5, [r4, r3]
    62ec:	4be3      	ldr	r3, [pc, #908]	; (667c <fInit_9DOF_GBY_KALMAN+0x428>)
    62ee:	50e5      	str	r5, [r4, r3]
    62f0:	23dd      	movs	r3, #221	; 0xdd
    62f2:	00db      	lsls	r3, r3, #3
    62f4:	50e5      	str	r5, [r4, r3]
    62f6:	4be2      	ldr	r3, [pc, #904]	; (6680 <fInit_9DOF_GBY_KALMAN+0x42c>)
    62f8:	50e5      	str	r5, [r4, r3]
    62fa:	23de      	movs	r3, #222	; 0xde
    62fc:	00db      	lsls	r3, r3, #3
    62fe:	50e5      	str	r5, [r4, r3]
    6300:	4be0      	ldr	r3, [pc, #896]	; (6684 <fInit_9DOF_GBY_KALMAN+0x430>)
    6302:	50e5      	str	r5, [r4, r3]
    6304:	23df      	movs	r3, #223	; 0xdf
    6306:	00db      	lsls	r3, r3, #3
    6308:	50e5      	str	r5, [r4, r3]
    630a:	4bdf      	ldr	r3, [pc, #892]	; (6688 <fInit_9DOF_GBY_KALMAN+0x434>)
    630c:	50e5      	str	r5, [r4, r3]
    630e:	23e0      	movs	r3, #224	; 0xe0
    6310:	00db      	lsls	r3, r3, #3
    6312:	50e5      	str	r5, [r4, r3]
    6314:	23e1      	movs	r3, #225	; 0xe1
    6316:	00db      	lsls	r3, r3, #3
    6318:	50e5      	str	r5, [r4, r3]
    631a:	4bdc      	ldr	r3, [pc, #880]	; (668c <fInit_9DOF_GBY_KALMAN+0x438>)
    631c:	50e5      	str	r5, [r4, r3]
    631e:	23e2      	movs	r3, #226	; 0xe2
    6320:	00db      	lsls	r3, r3, #3
    6322:	50e5      	str	r5, [r4, r3]
    6324:	4bda      	ldr	r3, [pc, #872]	; (6690 <fInit_9DOF_GBY_KALMAN+0x43c>)
    6326:	50e5      	str	r5, [r4, r3]
    6328:	23e3      	movs	r3, #227	; 0xe3
    632a:	00db      	lsls	r3, r3, #3
    632c:	50e5      	str	r5, [r4, r3]
    632e:	4bd9      	ldr	r3, [pc, #868]	; (6694 <fInit_9DOF_GBY_KALMAN+0x440>)
    6330:	50e5      	str	r5, [r4, r3]
    6332:	23e4      	movs	r3, #228	; 0xe4
    6334:	00db      	lsls	r3, r3, #3
    6336:	50e5      	str	r5, [r4, r3]
    6338:	4bd7      	ldr	r3, [pc, #860]	; (6698 <fInit_9DOF_GBY_KALMAN+0x444>)
    633a:	50e5      	str	r5, [r4, r3]
    633c:	23e5      	movs	r3, #229	; 0xe5
    633e:	00db      	lsls	r3, r3, #3
    6340:	50e5      	str	r5, [r4, r3]
    6342:	4bd6      	ldr	r3, [pc, #856]	; (669c <fInit_9DOF_GBY_KALMAN+0x448>)
    6344:	50e5      	str	r5, [r4, r3]
    6346:	23e6      	movs	r3, #230	; 0xe6
    6348:	00db      	lsls	r3, r3, #3
    634a:	50e5      	str	r5, [r4, r3]
    634c:	4bd4      	ldr	r3, [pc, #848]	; (66a0 <fInit_9DOF_GBY_KALMAN+0x44c>)
    634e:	50e5      	str	r5, [r4, r3]
    6350:	4bd4      	ldr	r3, [pc, #848]	; (66a4 <fInit_9DOF_GBY_KALMAN+0x450>)
    6352:	50e5      	str	r5, [r4, r3]
    6354:	23e8      	movs	r3, #232	; 0xe8
    6356:	00db      	lsls	r3, r3, #3
    6358:	50e5      	str	r5, [r4, r3]
    635a:	4bd3      	ldr	r3, [pc, #844]	; (66a8 <fInit_9DOF_GBY_KALMAN+0x454>)
    635c:	50e5      	str	r5, [r4, r3]
    635e:	23e9      	movs	r3, #233	; 0xe9
    6360:	00db      	lsls	r3, r3, #3
    6362:	50e5      	str	r5, [r4, r3]
    6364:	4bd1      	ldr	r3, [pc, #836]	; (66ac <fInit_9DOF_GBY_KALMAN+0x458>)
    6366:	50e5      	str	r5, [r4, r3]
    6368:	23ea      	movs	r3, #234	; 0xea
    636a:	00db      	lsls	r3, r3, #3
    636c:	50e5      	str	r5, [r4, r3]
    636e:	4bd0      	ldr	r3, [pc, #832]	; (66b0 <fInit_9DOF_GBY_KALMAN+0x45c>)
    6370:	50e5      	str	r5, [r4, r3]
    6372:	23eb      	movs	r3, #235	; 0xeb
    6374:	00db      	lsls	r3, r3, #3
    6376:	50e5      	str	r5, [r4, r3]
    6378:	4bce      	ldr	r3, [pc, #824]	; (66b4 <fInit_9DOF_GBY_KALMAN+0x460>)
    637a:	50e5      	str	r5, [r4, r3]
    637c:	23ec      	movs	r3, #236	; 0xec
    637e:	00db      	lsls	r3, r3, #3
    6380:	50e5      	str	r5, [r4, r3]
    6382:	4bcd      	ldr	r3, [pc, #820]	; (66b8 <fInit_9DOF_GBY_KALMAN+0x464>)
    6384:	50e5      	str	r5, [r4, r3]
    6386:	23ed      	movs	r3, #237	; 0xed
    6388:	00db      	lsls	r3, r3, #3
    638a:	50e5      	str	r5, [r4, r3]
    638c:	23ee      	movs	r3, #238	; 0xee
    638e:	00db      	lsls	r3, r3, #3
    6390:	50e5      	str	r5, [r4, r3]
    6392:	4bca      	ldr	r3, [pc, #808]	; (66bc <fInit_9DOF_GBY_KALMAN+0x468>)
    6394:	50e5      	str	r5, [r4, r3]
    6396:	23ef      	movs	r3, #239	; 0xef
    6398:	00db      	lsls	r3, r3, #3
    639a:	50e5      	str	r5, [r4, r3]
    639c:	4bc8      	ldr	r3, [pc, #800]	; (66c0 <fInit_9DOF_GBY_KALMAN+0x46c>)
    639e:	50e5      	str	r5, [r4, r3]
    63a0:	23f0      	movs	r3, #240	; 0xf0
    63a2:	00db      	lsls	r3, r3, #3
    63a4:	50e5      	str	r5, [r4, r3]
    63a6:	4bc7      	ldr	r3, [pc, #796]	; (66c4 <fInit_9DOF_GBY_KALMAN+0x470>)
    63a8:	50e5      	str	r5, [r4, r3]
    63aa:	23f1      	movs	r3, #241	; 0xf1
    63ac:	00db      	lsls	r3, r3, #3
    63ae:	50e5      	str	r5, [r4, r3]
    63b0:	4bc5      	ldr	r3, [pc, #788]	; (66c8 <fInit_9DOF_GBY_KALMAN+0x474>)
    63b2:	50e5      	str	r5, [r4, r3]
    63b4:	23f2      	movs	r3, #242	; 0xf2
    63b6:	00db      	lsls	r3, r3, #3
    63b8:	50e5      	str	r5, [r4, r3]
    63ba:	4bc4      	ldr	r3, [pc, #784]	; (66cc <fInit_9DOF_GBY_KALMAN+0x478>)
    63bc:	50e5      	str	r5, [r4, r3]
    63be:	23f3      	movs	r3, #243	; 0xf3
    63c0:	00db      	lsls	r3, r3, #3
    63c2:	50e5      	str	r5, [r4, r3]
    63c4:	4bc2      	ldr	r3, [pc, #776]	; (66d0 <fInit_9DOF_GBY_KALMAN+0x47c>)
    63c6:	50e5      	str	r5, [r4, r3]
    63c8:	4bc2      	ldr	r3, [pc, #776]	; (66d4 <fInit_9DOF_GBY_KALMAN+0x480>)
    63ca:	50e5      	str	r5, [r4, r3]
    63cc:	23f5      	movs	r3, #245	; 0xf5
    63ce:	00db      	lsls	r3, r3, #3
    63d0:	50e5      	str	r5, [r4, r3]
    63d2:	4bc1      	ldr	r3, [pc, #772]	; (66d8 <fInit_9DOF_GBY_KALMAN+0x484>)
    63d4:	50e5      	str	r5, [r4, r3]
    63d6:	23f6      	movs	r3, #246	; 0xf6
    63d8:	00db      	lsls	r3, r3, #3
    63da:	50e5      	str	r5, [r4, r3]
    63dc:	4bbf      	ldr	r3, [pc, #764]	; (66dc <fInit_9DOF_GBY_KALMAN+0x488>)
    63de:	50e5      	str	r5, [r4, r3]
    63e0:	23f7      	movs	r3, #247	; 0xf7
    63e2:	00db      	lsls	r3, r3, #3
    63e4:	50e5      	str	r5, [r4, r3]
    63e6:	4bbe      	ldr	r3, [pc, #760]	; (66e0 <fInit_9DOF_GBY_KALMAN+0x48c>)
    63e8:	50e5      	str	r5, [r4, r3]
    63ea:	23f8      	movs	r3, #248	; 0xf8
    63ec:	00db      	lsls	r3, r3, #3
    63ee:	50e5      	str	r5, [r4, r3]
    63f0:	4bbc      	ldr	r3, [pc, #752]	; (66e4 <fInit_9DOF_GBY_KALMAN+0x490>)
    63f2:	50e5      	str	r5, [r4, r3]
    63f4:	23f9      	movs	r3, #249	; 0xf9
    63f6:	00db      	lsls	r3, r3, #3
    63f8:	50e5      	str	r5, [r4, r3]
    63fa:	4bbb      	ldr	r3, [pc, #748]	; (66e8 <fInit_9DOF_GBY_KALMAN+0x494>)
    63fc:	50e5      	str	r5, [r4, r3]
    63fe:	23fa      	movs	r3, #250	; 0xfa
    6400:	00db      	lsls	r3, r3, #3
    6402:	50e5      	str	r5, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:232
		}
	}
	pthisSV->fC6x12[0][6] = pthisSV->fC6x12[1][7] = pthisSV->fC6x12[2][8] = 1.0F; 
    6404:	23fe      	movs	r3, #254	; 0xfe
    6406:	059b      	lsls	r3, r3, #22
    6408:	50a3      	str	r3, [r4, r2]
    640a:	4ab8      	ldr	r2, [pc, #736]	; (66ec <fInit_9DOF_GBY_KALMAN+0x498>)
    640c:	50a3      	str	r3, [r4, r2]
    640e:	22da      	movs	r2, #218	; 0xda
    6410:	00d2      	lsls	r2, r2, #3
    6412:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:233
	pthisSV->fC6x12[3][9] = pthisSV->fC6x12[4][10] = pthisSV->fC6x12[5][11] = -1.0F; 
    6414:	4bb6      	ldr	r3, [pc, #728]	; (66f0 <fInit_9DOF_GBY_KALMAN+0x49c>)
    6416:	4ab7      	ldr	r2, [pc, #732]	; (66f4 <fInit_9DOF_GBY_KALMAN+0x4a0>)
    6418:	50a3      	str	r3, [r4, r2]
    641a:	22f4      	movs	r2, #244	; 0xf4
    641c:	00d2      	lsls	r2, r2, #3
    641e:	50a3      	str	r3, [r4, r2]
    6420:	4ab5      	ldr	r2, [pc, #724]	; (66f8 <fInit_9DOF_GBY_KALMAN+0x4a4>)
    6422:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:236

	// zero a posteriori orientation, error vector xe+ (thetae+, be+, de+, ae+) and b+ and inertial
	f3x3matrixAeqI(pthisSV->fRPl);
    6424:	f007 fba6 	bl	db74 <f3x3matrixAeqI>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:237
	fqAeq1(&(pthisSV->fqPl));
    6428:	1c20      	adds	r0, r4, #0
    642a:	3038      	adds	r0, #56	; 0x38
    642c:	f00a f8ca 	bl	105c4 <fqAeq1>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:240
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = pthisSV->fdErrSePl[i] = pthisSV->fbPl[i] = 0.0F;
    6430:	1c23      	adds	r3, r4, #0
    6432:	3364      	adds	r3, #100	; 0x64
    6434:	701e      	strb	r6, [r3, #0]
    6436:	705e      	strb	r6, [r3, #1]
    6438:	709e      	strb	r6, [r3, #2]
    643a:	70de      	strb	r6, [r3, #3]
    643c:	711e      	strb	r6, [r3, #4]
    643e:	715e      	strb	r6, [r3, #5]
    6440:	719e      	strb	r6, [r3, #6]
    6442:	71de      	strb	r6, [r3, #7]
    6444:	721e      	strb	r6, [r3, #8]
    6446:	725e      	strb	r6, [r3, #9]
    6448:	729e      	strb	r6, [r3, #10]
    644a:	72de      	strb	r6, [r3, #11]
    644c:	3330      	adds	r3, #48	; 0x30
    644e:	701e      	strb	r6, [r3, #0]
    6450:	705e      	strb	r6, [r3, #1]
    6452:	709e      	strb	r6, [r3, #2]
    6454:	70de      	strb	r6, [r3, #3]
    6456:	711e      	strb	r6, [r3, #4]
    6458:	715e      	strb	r6, [r3, #5]
    645a:	719e      	strb	r6, [r3, #6]
    645c:	71de      	strb	r6, [r3, #7]
    645e:	721e      	strb	r6, [r3, #8]
    6460:	725e      	strb	r6, [r3, #9]
    6462:	729e      	strb	r6, [r3, #10]
    6464:	72de      	strb	r6, [r3, #11]
    6466:	731e      	strb	r6, [r3, #12]
    6468:	735e      	strb	r6, [r3, #13]
    646a:	739e      	strb	r6, [r3, #14]
    646c:	73de      	strb	r6, [r3, #15]
    646e:	741e      	strb	r6, [r3, #16]
    6470:	745e      	strb	r6, [r3, #17]
    6472:	749e      	strb	r6, [r3, #18]
    6474:	74de      	strb	r6, [r3, #19]
    6476:	751e      	strb	r6, [r3, #20]
    6478:	755e      	strb	r6, [r3, #21]
    647a:	759e      	strb	r6, [r3, #22]
    647c:	75de      	strb	r6, [r3, #23]
    647e:	3b18      	subs	r3, #24
    6480:	701e      	strb	r6, [r3, #0]
    6482:	705e      	strb	r6, [r3, #1]
    6484:	709e      	strb	r6, [r3, #2]
    6486:	70de      	strb	r6, [r3, #3]
    6488:	711e      	strb	r6, [r3, #4]
    648a:	715e      	strb	r6, [r3, #5]
    648c:	719e      	strb	r6, [r3, #6]
    648e:	71de      	strb	r6, [r3, #7]
    6490:	721e      	strb	r6, [r3, #8]
    6492:	725e      	strb	r6, [r3, #9]
    6494:	729e      	strb	r6, [r3, #10]
    6496:	72de      	strb	r6, [r3, #11]
    6498:	3b0c      	subs	r3, #12
    649a:	701e      	strb	r6, [r3, #0]
    649c:	705e      	strb	r6, [r3, #1]
    649e:	709e      	strb	r6, [r3, #2]
    64a0:	70de      	strb	r6, [r3, #3]
    64a2:	711e      	strb	r6, [r3, #4]
    64a4:	715e      	strb	r6, [r3, #5]
    64a6:	719e      	strb	r6, [r3, #6]
    64a8:	71de      	strb	r6, [r3, #7]
    64aa:	721e      	strb	r6, [r3, #8]
    64ac:	725e      	strb	r6, [r3, #9]
    64ae:	729e      	strb	r6, [r3, #10]
    64b0:	72de      	strb	r6, [r3, #11]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:244
	}

	// initialize the reference geomagnetic vector (uT, global frame)
	pthisSV->fDeltaPl = 0.0F;
    64b2:	23b8      	movs	r3, #184	; 0xb8
    64b4:	50e5      	str	r5, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:245
	if (ithisCoordSystem == NED)
    64b6:	2f00      	cmp	r7, #0
    64b8:	d000      	beq.n	64bc <fInit_9DOF_GBY_KALMAN+0x268>
    64ba:	e245      	b.n	6948 <fInit_9DOF_GBY_KALMAN+0x6f4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:248
	{
		// initialize NED geomagnetic vector to zero degrees inclination
		pthisSV->fmGl[X] = DEFAULTB;
    64bc:	4a8f      	ldr	r2, [pc, #572]	; (66fc <fInit_9DOF_GBY_KALMAN+0x4a8>)
    64be:	2382      	movs	r3, #130	; 0x82
    64c0:	005b      	lsls	r3, r3, #1
    64c2:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:249
		pthisSV->fmGl[Y] = 0.0F;
    64c4:	2384      	movs	r3, #132	; 0x84
    64c6:	005b      	lsls	r3, r3, #1
    64c8:	50e5      	str	r5, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:250
		pthisSV->fmGl[Z] = 0.0F;
    64ca:	2386      	movs	r3, #134	; 0x86
    64cc:	005b      	lsls	r3, r3, #1
    64ce:	50e5      	str	r5, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:261
		pthisSV->fmGl[Y] = DEFAULTB;
		pthisSV->fmGl[Z] = 0.0F;
	}

	// initialize noise variances for Qv and Qw matrix updates
	pthisSV->fQvAA = FQVA_9DOF_GBY_KALMAN + FQWA_9DOF_GBY_KALMAN + FDEGTORAD * FDEGTORAD * pthisSV->fdeltatsq * (FQWB_9DOF_GBY_KALMAN + FQVG_9DOF_GBY_KALMAN);
    64d0:	4b62      	ldr	r3, [pc, #392]	; (665c <fInit_9DOF_GBY_KALMAN+0x408>)
    64d2:	498b      	ldr	r1, [pc, #556]	; (6700 <fInit_9DOF_GBY_KALMAN+0x4ac>)
    64d4:	58e0      	ldr	r0, [r4, r3]
    64d6:	f7fa fc5d 	bl	d94 <__aeabi_fmul>
    64da:	4962      	ldr	r1, [pc, #392]	; (6664 <fInit_9DOF_GBY_KALMAN+0x410>)
    64dc:	1c05      	adds	r5, r0, #0
    64de:	f7fa fc59 	bl	d94 <__aeabi_fmul>
    64e2:	4988      	ldr	r1, [pc, #544]	; (6704 <fInit_9DOF_GBY_KALMAN+0x4b0>)
    64e4:	f7fa f906 	bl	6f4 <__aeabi_fadd>
    64e8:	2388      	movs	r3, #136	; 0x88
    64ea:	005b      	lsls	r3, r3, #1
    64ec:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:262
	pthisSV->fQvMM = FQVM_9DOF_GBY_KALMAN + FQWD_9DOF_GBY_KALMAN + FDEGTORAD * FDEGTORAD * pthisSV->fdeltatsq * DEFAULTB * DEFAULTB * (FQWB_9DOF_GBY_KALMAN + FQVG_9DOF_GBY_KALMAN);
    64ee:	4983      	ldr	r1, [pc, #524]	; (66fc <fInit_9DOF_GBY_KALMAN+0x4a8>)
    64f0:	1c28      	adds	r0, r5, #0
    64f2:	f7fa fc4f 	bl	d94 <__aeabi_fmul>
    64f6:	4981      	ldr	r1, [pc, #516]	; (66fc <fInit_9DOF_GBY_KALMAN+0x4a8>)
    64f8:	f7fa fc4c 	bl	d94 <__aeabi_fmul>
    64fc:	4959      	ldr	r1, [pc, #356]	; (6664 <fInit_9DOF_GBY_KALMAN+0x410>)
    64fe:	f7fa fc49 	bl	d94 <__aeabi_fmul>
    6502:	4981      	ldr	r1, [pc, #516]	; (6708 <fInit_9DOF_GBY_KALMAN+0x4b4>)
    6504:	f7fa f8f6 	bl	6f4 <__aeabi_fadd>
    6508:	238a      	movs	r3, #138	; 0x8a
    650a:	005b      	lsls	r3, r3, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:271
	// zero the matrix Qw
	for (i = 0; i < 12; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fQw12x12[i][j] = 0.0F;
    650c:	4a7f      	ldr	r2, [pc, #508]	; (670c <fInit_9DOF_GBY_KALMAN+0x4b8>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:262
		pthisSV->fmGl[Z] = 0.0F;
	}

	// initialize noise variances for Qv and Qw matrix updates
	pthisSV->fQvAA = FQVA_9DOF_GBY_KALMAN + FQWA_9DOF_GBY_KALMAN + FDEGTORAD * FDEGTORAD * pthisSV->fdeltatsq * (FQWB_9DOF_GBY_KALMAN + FQVG_9DOF_GBY_KALMAN);
	pthisSV->fQvMM = FQVM_9DOF_GBY_KALMAN + FQWD_9DOF_GBY_KALMAN + FDEGTORAD * FDEGTORAD * pthisSV->fdeltatsq * DEFAULTB * DEFAULTB * (FQWB_9DOF_GBY_KALMAN + FQVG_9DOF_GBY_KALMAN);
    650e:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:271
	// zero the matrix Qw
	for (i = 0; i < 12; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fQw12x12[i][j] = 0.0F;
    6510:	2300      	movs	r3, #0
    6512:	50a3      	str	r3, [r4, r2]
    6514:	2290      	movs	r2, #144	; 0x90
    6516:	00d2      	lsls	r2, r2, #3
    6518:	50a3      	str	r3, [r4, r2]
    651a:	2291      	movs	r2, #145	; 0x91
    651c:	00d2      	lsls	r2, r2, #3
    651e:	50a3      	str	r3, [r4, r2]
    6520:	4a7b      	ldr	r2, [pc, #492]	; (6710 <fInit_9DOF_GBY_KALMAN+0x4bc>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:278
	}
	// loop over non-zero values
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw12x12[i][i] = FQWINITTHTH_9DOF_GBY_KALMAN;
    6522:	4d7c      	ldr	r5, [pc, #496]	; (6714 <fInit_9DOF_GBY_KALMAN+0x4c0>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:271
	// zero the matrix Qw
	for (i = 0; i < 12; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fQw12x12[i][j] = 0.0F;
    6524:	50a3      	str	r3, [r4, r2]
    6526:	2292      	movs	r2, #146	; 0x92
    6528:	00d2      	lsls	r2, r2, #3
    652a:	50a3      	str	r3, [r4, r2]
    652c:	4a7a      	ldr	r2, [pc, #488]	; (6718 <fInit_9DOF_GBY_KALMAN+0x4c4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:280
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw12x12[i][i] = FQWINITTHTH_9DOF_GBY_KALMAN;
		// b_e * b_e terms
		pthisSV->fQw12x12[i + 3][i + 3] = FQWINITBB_9DOF_GBY_KALMAN;
    652e:	20fa      	movs	r0, #250	; 0xfa
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:271
	// zero the matrix Qw
	for (i = 0; i < 12; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fQw12x12[i][j] = 0.0F;
    6530:	50a3      	str	r3, [r4, r2]
    6532:	2293      	movs	r2, #147	; 0x93
    6534:	00d2      	lsls	r2, r2, #3
    6536:	50a3      	str	r3, [r4, r2]
    6538:	4a78      	ldr	r2, [pc, #480]	; (671c <fInit_9DOF_GBY_KALMAN+0x4c8>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:280
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw12x12[i][i] = FQWINITTHTH_9DOF_GBY_KALMAN;
		// b_e * b_e terms
		pthisSV->fQw12x12[i + 3][i + 3] = FQWINITBB_9DOF_GBY_KALMAN;
    653a:	0580      	lsls	r0, r0, #22
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:271
	// zero the matrix Qw
	for (i = 0; i < 12; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fQw12x12[i][j] = 0.0F;
    653c:	50a3      	str	r3, [r4, r2]
    653e:	2294      	movs	r2, #148	; 0x94
    6540:	00d2      	lsls	r2, r2, #3
    6542:	50a3      	str	r3, [r4, r2]
    6544:	4a76      	ldr	r2, [pc, #472]	; (6720 <fInit_9DOF_GBY_KALMAN+0x4cc>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:284
		// b_e * b_e terms
		pthisSV->fQw12x12[i + 3][i + 3] = FQWINITBB_9DOF_GBY_KALMAN;
		// th_e * b_e terms
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = FQWINITTHB_9DOF_GBY_KALMAN;
		// a_e * a_e terms
		pthisSV->fQw12x12[i + 6][i + 6] = FQWINITAA_9DOF_GBY_KALMAN;
    6546:	4977      	ldr	r1, [pc, #476]	; (6724 <fInit_9DOF_GBY_KALMAN+0x4d0>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:271
	// zero the matrix Qw
	for (i = 0; i < 12; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fQw12x12[i][j] = 0.0F;
    6548:	50a3      	str	r3, [r4, r2]
    654a:	2295      	movs	r2, #149	; 0x95
    654c:	00d2      	lsls	r2, r2, #3
    654e:	50a3      	str	r3, [r4, r2]
    6550:	2296      	movs	r2, #150	; 0x96
    6552:	00d2      	lsls	r2, r2, #3
    6554:	50a3      	str	r3, [r4, r2]
    6556:	4a74      	ldr	r2, [pc, #464]	; (6728 <fInit_9DOF_GBY_KALMAN+0x4d4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:286
		// th_e * b_e terms
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = FQWINITTHB_9DOF_GBY_KALMAN;
		// a_e * a_e terms
		pthisSV->fQw12x12[i + 6][i + 6] = FQWINITAA_9DOF_GBY_KALMAN;
		// d_e * d_e terms
		pthisSV->fQw12x12[i + 9][i + 9] = FQWINITDD_9DOF_GBY_KALMAN;
    6558:	4e74      	ldr	r6, [pc, #464]	; (672c <fInit_9DOF_GBY_KALMAN+0x4d8>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:271
	// zero the matrix Qw
	for (i = 0; i < 12; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fQw12x12[i][j] = 0.0F;
    655a:	50a3      	str	r3, [r4, r2]
    655c:	4a74      	ldr	r2, [pc, #464]	; (6730 <fInit_9DOF_GBY_KALMAN+0x4dc>)
    655e:	50a3      	str	r3, [r4, r2]
    6560:	2298      	movs	r2, #152	; 0x98
    6562:	00d2      	lsls	r2, r2, #3
    6564:	50a3      	str	r3, [r4, r2]
    6566:	4a73      	ldr	r2, [pc, #460]	; (6734 <fInit_9DOF_GBY_KALMAN+0x4e0>)
    6568:	50a3      	str	r3, [r4, r2]
    656a:	2299      	movs	r2, #153	; 0x99
    656c:	00d2      	lsls	r2, r2, #3
    656e:	50a3      	str	r3, [r4, r2]
    6570:	4a71      	ldr	r2, [pc, #452]	; (6738 <fInit_9DOF_GBY_KALMAN+0x4e4>)
    6572:	50a3      	str	r3, [r4, r2]
    6574:	229a      	movs	r2, #154	; 0x9a
    6576:	00d2      	lsls	r2, r2, #3
    6578:	50a3      	str	r3, [r4, r2]
    657a:	4a70      	ldr	r2, [pc, #448]	; (673c <fInit_9DOF_GBY_KALMAN+0x4e8>)
    657c:	50a3      	str	r3, [r4, r2]
    657e:	229b      	movs	r2, #155	; 0x9b
    6580:	00d2      	lsls	r2, r2, #3
    6582:	50a3      	str	r3, [r4, r2]
    6584:	4a6e      	ldr	r2, [pc, #440]	; (6740 <fInit_9DOF_GBY_KALMAN+0x4ec>)
    6586:	50a3      	str	r3, [r4, r2]
    6588:	4a6e      	ldr	r2, [pc, #440]	; (6744 <fInit_9DOF_GBY_KALMAN+0x4f0>)
    658a:	50a3      	str	r3, [r4, r2]
    658c:	229d      	movs	r2, #157	; 0x9d
    658e:	00d2      	lsls	r2, r2, #3
    6590:	50a3      	str	r3, [r4, r2]
    6592:	229e      	movs	r2, #158	; 0x9e
    6594:	00d2      	lsls	r2, r2, #3
    6596:	50a3      	str	r3, [r4, r2]
    6598:	4a6b      	ldr	r2, [pc, #428]	; (6748 <fInit_9DOF_GBY_KALMAN+0x4f4>)
    659a:	50a3      	str	r3, [r4, r2]
    659c:	229f      	movs	r2, #159	; 0x9f
    659e:	00d2      	lsls	r2, r2, #3
    65a0:	50a3      	str	r3, [r4, r2]
    65a2:	4a6a      	ldr	r2, [pc, #424]	; (674c <fInit_9DOF_GBY_KALMAN+0x4f8>)
    65a4:	50a3      	str	r3, [r4, r2]
    65a6:	22a0      	movs	r2, #160	; 0xa0
    65a8:	00d2      	lsls	r2, r2, #3
    65aa:	50a3      	str	r3, [r4, r2]
    65ac:	4a68      	ldr	r2, [pc, #416]	; (6750 <fInit_9DOF_GBY_KALMAN+0x4fc>)
    65ae:	50a3      	str	r3, [r4, r2]
    65b0:	4a68      	ldr	r2, [pc, #416]	; (6754 <fInit_9DOF_GBY_KALMAN+0x500>)
    65b2:	50a3      	str	r3, [r4, r2]
    65b4:	22a2      	movs	r2, #162	; 0xa2
    65b6:	00d2      	lsls	r2, r2, #3
    65b8:	50a3      	str	r3, [r4, r2]
    65ba:	22a3      	movs	r2, #163	; 0xa3
    65bc:	00d2      	lsls	r2, r2, #3
    65be:	50a3      	str	r3, [r4, r2]
    65c0:	4a65      	ldr	r2, [pc, #404]	; (6758 <fInit_9DOF_GBY_KALMAN+0x504>)
    65c2:	50a3      	str	r3, [r4, r2]
    65c4:	22a4      	movs	r2, #164	; 0xa4
    65c6:	00d2      	lsls	r2, r2, #3
    65c8:	50a3      	str	r3, [r4, r2]
    65ca:	4a64      	ldr	r2, [pc, #400]	; (675c <fInit_9DOF_GBY_KALMAN+0x508>)
    65cc:	50a3      	str	r3, [r4, r2]
    65ce:	22a5      	movs	r2, #165	; 0xa5
    65d0:	00d2      	lsls	r2, r2, #3
    65d2:	50a3      	str	r3, [r4, r2]
    65d4:	4a62      	ldr	r2, [pc, #392]	; (6760 <fInit_9DOF_GBY_KALMAN+0x50c>)
    65d6:	50a3      	str	r3, [r4, r2]
    65d8:	22a6      	movs	r2, #166	; 0xa6
    65da:	00d2      	lsls	r2, r2, #3
    65dc:	50a3      	str	r3, [r4, r2]
    65de:	4a61      	ldr	r2, [pc, #388]	; (6764 <fInit_9DOF_GBY_KALMAN+0x510>)
    65e0:	50a3      	str	r3, [r4, r2]
    65e2:	22a7      	movs	r2, #167	; 0xa7
    65e4:	00d2      	lsls	r2, r2, #3
    65e6:	50a3      	str	r3, [r4, r2]
    65e8:	22a8      	movs	r2, #168	; 0xa8
    65ea:	00d2      	lsls	r2, r2, #3
    65ec:	50a3      	str	r3, [r4, r2]
    65ee:	4a5e      	ldr	r2, [pc, #376]	; (6768 <fInit_9DOF_GBY_KALMAN+0x514>)
    65f0:	50a3      	str	r3, [r4, r2]
    65f2:	4a5e      	ldr	r2, [pc, #376]	; (676c <fInit_9DOF_GBY_KALMAN+0x518>)
    65f4:	50a3      	str	r3, [r4, r2]
    65f6:	22aa      	movs	r2, #170	; 0xaa
    65f8:	00d2      	lsls	r2, r2, #3
    65fa:	50a3      	str	r3, [r4, r2]
    65fc:	4a5c      	ldr	r2, [pc, #368]	; (6770 <fInit_9DOF_GBY_KALMAN+0x51c>)
    65fe:	50a3      	str	r3, [r4, r2]
    6600:	22ab      	movs	r2, #171	; 0xab
    6602:	00d2      	lsls	r2, r2, #3
    6604:	50a3      	str	r3, [r4, r2]
    6606:	4a5b      	ldr	r2, [pc, #364]	; (6774 <fInit_9DOF_GBY_KALMAN+0x520>)
    6608:	50a3      	str	r3, [r4, r2]
    660a:	22ac      	movs	r2, #172	; 0xac
    660c:	00d2      	lsls	r2, r2, #3
    660e:	50a3      	str	r3, [r4, r2]
    6610:	4a59      	ldr	r2, [pc, #356]	; (6778 <fInit_9DOF_GBY_KALMAN+0x524>)
    6612:	50a3      	str	r3, [r4, r2]
    6614:	22ad      	movs	r2, #173	; 0xad
    6616:	00d2      	lsls	r2, r2, #3
    6618:	50a3      	str	r3, [r4, r2]
    661a:	4a58      	ldr	r2, [pc, #352]	; (677c <fInit_9DOF_GBY_KALMAN+0x528>)
    661c:	50a3      	str	r3, [r4, r2]
    661e:	4a58      	ldr	r2, [pc, #352]	; (6780 <fInit_9DOF_GBY_KALMAN+0x52c>)
    6620:	50a3      	str	r3, [r4, r2]
    6622:	22af      	movs	r2, #175	; 0xaf
    6624:	00d2      	lsls	r2, r2, #3
    6626:	50a3      	str	r3, [r4, r2]
    6628:	22b0      	movs	r2, #176	; 0xb0
    662a:	00d2      	lsls	r2, r2, #3
    662c:	50a3      	str	r3, [r4, r2]
    662e:	4a55      	ldr	r2, [pc, #340]	; (6784 <fInit_9DOF_GBY_KALMAN+0x530>)
    6630:	50a3      	str	r3, [r4, r2]
    6632:	22b1      	movs	r2, #177	; 0xb1
    6634:	00d2      	lsls	r2, r2, #3
    6636:	50a3      	str	r3, [r4, r2]
    6638:	4a53      	ldr	r2, [pc, #332]	; (6788 <fInit_9DOF_GBY_KALMAN+0x534>)
    663a:	50a3      	str	r3, [r4, r2]
    663c:	22b2      	movs	r2, #178	; 0xb2
    663e:	00d2      	lsls	r2, r2, #3
    6640:	50a3      	str	r3, [r4, r2]
    6642:	4a52      	ldr	r2, [pc, #328]	; (678c <fInit_9DOF_GBY_KALMAN+0x538>)
    6644:	50a3      	str	r3, [r4, r2]
    6646:	22b3      	movs	r2, #179	; 0xb3
    6648:	00d2      	lsls	r2, r2, #3
    664a:	50a3      	str	r3, [r4, r2]
    664c:	e0a0      	b.n	6790 <fInit_9DOF_GBY_KALMAN+0x53c>
    664e:	46c0      	nop			; (mov r8, r8)
    6650:	00000834 	.word	0x00000834
    6654:	00000824 	.word	0x00000824
    6658:	00000828 	.word	0x00000828
    665c:	0000082c 	.word	0x0000082c
    6660:	0000081c 	.word	0x0000081c
    6664:	3e99999a 	.word	0x3e99999a
    6668:	000006bc 	.word	0x000006bc
    666c:	000006c4 	.word	0x000006c4
    6670:	000006cc 	.word	0x000006cc
    6674:	000006d4 	.word	0x000006d4
    6678:	000006dc 	.word	0x000006dc
    667c:	000006e4 	.word	0x000006e4
    6680:	000006ec 	.word	0x000006ec
    6684:	000006f4 	.word	0x000006f4
    6688:	000006fc 	.word	0x000006fc
    668c:	0000070c 	.word	0x0000070c
    6690:	00000714 	.word	0x00000714
    6694:	0000071c 	.word	0x0000071c
    6698:	00000724 	.word	0x00000724
    669c:	0000072c 	.word	0x0000072c
    66a0:	00000734 	.word	0x00000734
    66a4:	0000073c 	.word	0x0000073c
    66a8:	00000744 	.word	0x00000744
    66ac:	0000074c 	.word	0x0000074c
    66b0:	00000754 	.word	0x00000754
    66b4:	0000075c 	.word	0x0000075c
    66b8:	00000764 	.word	0x00000764
    66bc:	00000774 	.word	0x00000774
    66c0:	0000077c 	.word	0x0000077c
    66c4:	00000784 	.word	0x00000784
    66c8:	0000078c 	.word	0x0000078c
    66cc:	00000794 	.word	0x00000794
    66d0:	0000079c 	.word	0x0000079c
    66d4:	000007a4 	.word	0x000007a4
    66d8:	000007ac 	.word	0x000007ac
    66dc:	000007b4 	.word	0x000007b4
    66e0:	000007bc 	.word	0x000007bc
    66e4:	000007c4 	.word	0x000007c4
    66e8:	000007cc 	.word	0x000007cc
    66ec:	00000704 	.word	0x00000704
    66f0:	bf800000 	.word	0xbf800000
    66f4:	000007d4 	.word	0x000007d4
    66f8:	0000076c 	.word	0x0000076c
    66fc:	42480000 	.word	0x42480000
    6700:	399fb50f 	.word	0x399fb50f
    6704:	38d5e8d5 	.word	0x38d5e8d5
    6708:	3f19999a 	.word	0x3f19999a
    670c:	0000047c 	.word	0x0000047c
    6710:	0000048c 	.word	0x0000048c
    6714:	3ca3d70a 	.word	0x3ca3d70a
    6718:	00000494 	.word	0x00000494
    671c:	0000049c 	.word	0x0000049c
    6720:	000004a4 	.word	0x000004a4
    6724:	38d1b717 	.word	0x38d1b717
    6728:	000004b4 	.word	0x000004b4
    672c:	0000064c 	.word	0x0000064c
    6730:	000004bc 	.word	0x000004bc
    6734:	000004c4 	.word	0x000004c4
    6738:	000004cc 	.word	0x000004cc
    673c:	000004d4 	.word	0x000004d4
    6740:	000004dc 	.word	0x000004dc
    6744:	000004e4 	.word	0x000004e4
    6748:	000004f4 	.word	0x000004f4
    674c:	000004fc 	.word	0x000004fc
    6750:	00000504 	.word	0x00000504
    6754:	0000050c 	.word	0x0000050c
    6758:	0000051c 	.word	0x0000051c
    675c:	00000524 	.word	0x00000524
    6760:	0000052c 	.word	0x0000052c
    6764:	00000534 	.word	0x00000534
    6768:	00000544 	.word	0x00000544
    676c:	0000054c 	.word	0x0000054c
    6770:	00000554 	.word	0x00000554
    6774:	0000055c 	.word	0x0000055c
    6778:	00000564 	.word	0x00000564
    677c:	0000056c 	.word	0x0000056c
    6780:	00000574 	.word	0x00000574
    6784:	00000584 	.word	0x00000584
    6788:	0000058c 	.word	0x0000058c
    678c:	00000594 	.word	0x00000594
    6790:	4a73      	ldr	r2, [pc, #460]	; (6960 <fInit_9DOF_GBY_KALMAN+0x70c>)
    6792:	50a3      	str	r3, [r4, r2]
    6794:	22b4      	movs	r2, #180	; 0xb4
    6796:	00d2      	lsls	r2, r2, #3
    6798:	50a3      	str	r3, [r4, r2]
    679a:	4a72      	ldr	r2, [pc, #456]	; (6964 <fInit_9DOF_GBY_KALMAN+0x710>)
    679c:	50a3      	str	r3, [r4, r2]
    679e:	22b5      	movs	r2, #181	; 0xb5
    67a0:	00d2      	lsls	r2, r2, #3
    67a2:	50a3      	str	r3, [r4, r2]
    67a4:	4a70      	ldr	r2, [pc, #448]	; (6968 <fInit_9DOF_GBY_KALMAN+0x714>)
    67a6:	50a3      	str	r3, [r4, r2]
    67a8:	4a70      	ldr	r2, [pc, #448]	; (696c <fInit_9DOF_GBY_KALMAN+0x718>)
    67aa:	50a3      	str	r3, [r4, r2]
    67ac:	22b7      	movs	r2, #183	; 0xb7
    67ae:	00d2      	lsls	r2, r2, #3
    67b0:	50a3      	str	r3, [r4, r2]
    67b2:	4a6f      	ldr	r2, [pc, #444]	; (6970 <fInit_9DOF_GBY_KALMAN+0x71c>)
    67b4:	50a3      	str	r3, [r4, r2]
    67b6:	22b8      	movs	r2, #184	; 0xb8
    67b8:	00d2      	lsls	r2, r2, #3
    67ba:	50a3      	str	r3, [r4, r2]
    67bc:	4a6d      	ldr	r2, [pc, #436]	; (6974 <fInit_9DOF_GBY_KALMAN+0x720>)
    67be:	50a3      	str	r3, [r4, r2]
    67c0:	22b9      	movs	r2, #185	; 0xb9
    67c2:	00d2      	lsls	r2, r2, #3
    67c4:	50a3      	str	r3, [r4, r2]
    67c6:	4a6c      	ldr	r2, [pc, #432]	; (6978 <fInit_9DOF_GBY_KALMAN+0x724>)
    67c8:	50a3      	str	r3, [r4, r2]
    67ca:	22ba      	movs	r2, #186	; 0xba
    67cc:	00d2      	lsls	r2, r2, #3
    67ce:	50a3      	str	r3, [r4, r2]
    67d0:	4a6a      	ldr	r2, [pc, #424]	; (697c <fInit_9DOF_GBY_KALMAN+0x728>)
    67d2:	50a3      	str	r3, [r4, r2]
    67d4:	22bb      	movs	r2, #187	; 0xbb
    67d6:	00d2      	lsls	r2, r2, #3
    67d8:	50a3      	str	r3, [r4, r2]
    67da:	4a69      	ldr	r2, [pc, #420]	; (6980 <fInit_9DOF_GBY_KALMAN+0x72c>)
    67dc:	50a3      	str	r3, [r4, r2]
    67de:	22bc      	movs	r2, #188	; 0xbc
    67e0:	00d2      	lsls	r2, r2, #3
    67e2:	50a3      	str	r3, [r4, r2]
    67e4:	22bd      	movs	r2, #189	; 0xbd
    67e6:	00d2      	lsls	r2, r2, #3
    67e8:	50a3      	str	r3, [r4, r2]
    67ea:	4a66      	ldr	r2, [pc, #408]	; (6984 <fInit_9DOF_GBY_KALMAN+0x730>)
    67ec:	50a3      	str	r3, [r4, r2]
    67ee:	22be      	movs	r2, #190	; 0xbe
    67f0:	00d2      	lsls	r2, r2, #3
    67f2:	50a3      	str	r3, [r4, r2]
    67f4:	4a64      	ldr	r2, [pc, #400]	; (6988 <fInit_9DOF_GBY_KALMAN+0x734>)
    67f6:	50a3      	str	r3, [r4, r2]
    67f8:	22bf      	movs	r2, #191	; 0xbf
    67fa:	00d2      	lsls	r2, r2, #3
    67fc:	50a3      	str	r3, [r4, r2]
    67fe:	4a63      	ldr	r2, [pc, #396]	; (698c <fInit_9DOF_GBY_KALMAN+0x738>)
    6800:	50a3      	str	r3, [r4, r2]
    6802:	22c0      	movs	r2, #192	; 0xc0
    6804:	00d2      	lsls	r2, r2, #3
    6806:	50a3      	str	r3, [r4, r2]
    6808:	4a61      	ldr	r2, [pc, #388]	; (6990 <fInit_9DOF_GBY_KALMAN+0x73c>)
    680a:	50a3      	str	r3, [r4, r2]
    680c:	22c1      	movs	r2, #193	; 0xc1
    680e:	00d2      	lsls	r2, r2, #3
    6810:	50a3      	str	r3, [r4, r2]
    6812:	4a60      	ldr	r2, [pc, #384]	; (6994 <fInit_9DOF_GBY_KALMAN+0x740>)
    6814:	50a3      	str	r3, [r4, r2]
    6816:	22c2      	movs	r2, #194	; 0xc2
    6818:	00d2      	lsls	r2, r2, #3
    681a:	50a3      	str	r3, [r4, r2]
    681c:	4a5e      	ldr	r2, [pc, #376]	; (6998 <fInit_9DOF_GBY_KALMAN+0x744>)
    681e:	50a3      	str	r3, [r4, r2]
    6820:	4a5e      	ldr	r2, [pc, #376]	; (699c <fInit_9DOF_GBY_KALMAN+0x748>)
    6822:	50a3      	str	r3, [r4, r2]
    6824:	22c4      	movs	r2, #196	; 0xc4
    6826:	00d2      	lsls	r2, r2, #3
    6828:	50a3      	str	r3, [r4, r2]
    682a:	4a5d      	ldr	r2, [pc, #372]	; (69a0 <fInit_9DOF_GBY_KALMAN+0x74c>)
    682c:	50a3      	str	r3, [r4, r2]
    682e:	22c5      	movs	r2, #197	; 0xc5
    6830:	00d2      	lsls	r2, r2, #3
    6832:	50a3      	str	r3, [r4, r2]
    6834:	4a5b      	ldr	r2, [pc, #364]	; (69a4 <fInit_9DOF_GBY_KALMAN+0x750>)
    6836:	50a3      	str	r3, [r4, r2]
    6838:	22c6      	movs	r2, #198	; 0xc6
    683a:	00d2      	lsls	r2, r2, #3
    683c:	50a3      	str	r3, [r4, r2]
    683e:	4a5a      	ldr	r2, [pc, #360]	; (69a8 <fInit_9DOF_GBY_KALMAN+0x754>)
    6840:	50a3      	str	r3, [r4, r2]
    6842:	22c7      	movs	r2, #199	; 0xc7
    6844:	00d2      	lsls	r2, r2, #3
    6846:	50a3      	str	r3, [r4, r2]
    6848:	4a58      	ldr	r2, [pc, #352]	; (69ac <fInit_9DOF_GBY_KALMAN+0x758>)
    684a:	50a3      	str	r3, [r4, r2]
    684c:	22c8      	movs	r2, #200	; 0xc8
    684e:	00d2      	lsls	r2, r2, #3
    6850:	50a3      	str	r3, [r4, r2]
    6852:	4a57      	ldr	r2, [pc, #348]	; (69b0 <fInit_9DOF_GBY_KALMAN+0x75c>)
    6854:	50a3      	str	r3, [r4, r2]
    6856:	22c9      	movs	r2, #201	; 0xc9
    6858:	00d2      	lsls	r2, r2, #3
    685a:	50a3      	str	r3, [r4, r2]
    685c:	22ca      	movs	r2, #202	; 0xca
    685e:	00d2      	lsls	r2, r2, #3
    6860:	50a3      	str	r3, [r4, r2]
    6862:	4a54      	ldr	r2, [pc, #336]	; (69b4 <fInit_9DOF_GBY_KALMAN+0x760>)
    6864:	50a3      	str	r3, [r4, r2]
    6866:	22cb      	movs	r2, #203	; 0xcb
    6868:	00d2      	lsls	r2, r2, #3
    686a:	50a3      	str	r3, [r4, r2]
    686c:	4a52      	ldr	r2, [pc, #328]	; (69b8 <fInit_9DOF_GBY_KALMAN+0x764>)
    686e:	50a3      	str	r3, [r4, r2]
    6870:	22cc      	movs	r2, #204	; 0xcc
    6872:	00d2      	lsls	r2, r2, #3
    6874:	50a3      	str	r3, [r4, r2]
    6876:	4a51      	ldr	r2, [pc, #324]	; (69bc <fInit_9DOF_GBY_KALMAN+0x768>)
    6878:	50a3      	str	r3, [r4, r2]
    687a:	22cd      	movs	r2, #205	; 0xcd
    687c:	00d2      	lsls	r2, r2, #3
    687e:	50a3      	str	r3, [r4, r2]
    6880:	4a4f      	ldr	r2, [pc, #316]	; (69c0 <fInit_9DOF_GBY_KALMAN+0x76c>)
    6882:	50a3      	str	r3, [r4, r2]
    6884:	22ce      	movs	r2, #206	; 0xce
    6886:	00d2      	lsls	r2, r2, #3
    6888:	50a3      	str	r3, [r4, r2]
    688a:	4a4e      	ldr	r2, [pc, #312]	; (69c4 <fInit_9DOF_GBY_KALMAN+0x770>)
    688c:	50a3      	str	r3, [r4, r2]
    688e:	22cf      	movs	r2, #207	; 0xcf
    6890:	00d2      	lsls	r2, r2, #3
    6892:	50a3      	str	r3, [r4, r2]
    6894:	4a4c      	ldr	r2, [pc, #304]	; (69c8 <fInit_9DOF_GBY_KALMAN+0x774>)
    6896:	50a3      	str	r3, [r4, r2]
    6898:	4a4c      	ldr	r2, [pc, #304]	; (69cc <fInit_9DOF_GBY_KALMAN+0x778>)
    689a:	50a3      	str	r3, [r4, r2]
    689c:	22d1      	movs	r2, #209	; 0xd1
    689e:	00d2      	lsls	r2, r2, #3
    68a0:	50a3      	str	r3, [r4, r2]
    68a2:	4a4b      	ldr	r2, [pc, #300]	; (69d0 <fInit_9DOF_GBY_KALMAN+0x77c>)
    68a4:	50a3      	str	r3, [r4, r2]
    68a6:	22d2      	movs	r2, #210	; 0xd2
    68a8:	00d2      	lsls	r2, r2, #3
    68aa:	50a3      	str	r3, [r4, r2]
    68ac:	4a49      	ldr	r2, [pc, #292]	; (69d4 <fInit_9DOF_GBY_KALMAN+0x780>)
    68ae:	50a3      	str	r3, [r4, r2]
    68b0:	22d3      	movs	r2, #211	; 0xd3
    68b2:	00d2      	lsls	r2, r2, #3
    68b4:	50a3      	str	r3, [r4, r2]
    68b6:	4a48      	ldr	r2, [pc, #288]	; (69d8 <fInit_9DOF_GBY_KALMAN+0x784>)
    68b8:	50a3      	str	r3, [r4, r2]
    68ba:	22d4      	movs	r2, #212	; 0xd4
    68bc:	00d2      	lsls	r2, r2, #3
    68be:	50a3      	str	r3, [r4, r2]
    68c0:	4a46      	ldr	r2, [pc, #280]	; (69dc <fInit_9DOF_GBY_KALMAN+0x788>)
    68c2:	50a3      	str	r3, [r4, r2]
    68c4:	22d5      	movs	r2, #213	; 0xd5
    68c6:	00d2      	lsls	r2, r2, #3
    68c8:	50a3      	str	r3, [r4, r2]
    68ca:	4a45      	ldr	r2, [pc, #276]	; (69e0 <fInit_9DOF_GBY_KALMAN+0x78c>)
    68cc:	50a3      	str	r3, [r4, r2]
    68ce:	22d6      	movs	r2, #214	; 0xd6
    68d0:	00d2      	lsls	r2, r2, #3
    68d2:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:278
	}
	// loop over non-zero values
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw12x12[i][i] = FQWINITTHTH_9DOF_GBY_KALMAN;
    68d4:	228f      	movs	r2, #143	; 0x8f
    68d6:	00d2      	lsls	r2, r2, #3
    68d8:	50a5      	str	r5, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:280
		// b_e * b_e terms
		pthisSV->fQw12x12[i + 3][i + 3] = FQWINITBB_9DOF_GBY_KALMAN;
    68da:	4a42      	ldr	r2, [pc, #264]	; (69e4 <fInit_9DOF_GBY_KALMAN+0x790>)
    68dc:	50a0      	str	r0, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:282
		// th_e * b_e terms
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = FQWINITTHB_9DOF_GBY_KALMAN;
    68de:	22a1      	movs	r2, #161	; 0xa1
    68e0:	00d2      	lsls	r2, r2, #3
    68e2:	50a3      	str	r3, [r4, r2]
    68e4:	4a40      	ldr	r2, [pc, #256]	; (69e8 <fInit_9DOF_GBY_KALMAN+0x794>)
    68e6:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:284
		// a_e * a_e terms
		pthisSV->fQw12x12[i + 6][i + 6] = FQWINITAA_9DOF_GBY_KALMAN;
    68e8:	22b6      	movs	r2, #182	; 0xb6
    68ea:	00d2      	lsls	r2, r2, #3
    68ec:	50a1      	str	r1, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:286
		// d_e * d_e terms
		pthisSV->fQw12x12[i + 9][i + 9] = FQWINITDD_9DOF_GBY_KALMAN;
    68ee:	4a3f      	ldr	r2, [pc, #252]	; (69ec <fInit_9DOF_GBY_KALMAN+0x798>)
    68f0:	51a2      	str	r2, [r4, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:278
	}
	// loop over non-zero values
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw12x12[i][i] = FQWINITTHTH_9DOF_GBY_KALMAN;
    68f2:	4e3f      	ldr	r6, [pc, #252]	; (69f0 <fInit_9DOF_GBY_KALMAN+0x79c>)
    68f4:	51a5      	str	r5, [r4, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:280
		// b_e * b_e terms
		pthisSV->fQw12x12[i + 3][i + 3] = FQWINITBB_9DOF_GBY_KALMAN;
    68f6:	26a9      	movs	r6, #169	; 0xa9
    68f8:	00f6      	lsls	r6, r6, #3
    68fa:	51a0      	str	r0, [r4, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:282
		// th_e * b_e terms
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = FQWINITTHB_9DOF_GBY_KALMAN;
    68fc:	4e3d      	ldr	r6, [pc, #244]	; (69f4 <fInit_9DOF_GBY_KALMAN+0x7a0>)
    68fe:	51a3      	str	r3, [r4, r6]
    6900:	2697      	movs	r6, #151	; 0x97
    6902:	00f6      	lsls	r6, r6, #3
    6904:	51a3      	str	r3, [r4, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:284
		// a_e * a_e terms
		pthisSV->fQw12x12[i + 6][i + 6] = FQWINITAA_9DOF_GBY_KALMAN;
    6906:	4e3c      	ldr	r6, [pc, #240]	; (69f8 <fInit_9DOF_GBY_KALMAN+0x7a4>)
    6908:	51a1      	str	r1, [r4, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:286
		// d_e * d_e terms
		pthisSV->fQw12x12[i + 9][i + 9] = FQWINITDD_9DOF_GBY_KALMAN;
    690a:	26d0      	movs	r6, #208	; 0xd0
    690c:	00f6      	lsls	r6, r6, #3
    690e:	51a2      	str	r2, [r4, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:278
	}
	// loop over non-zero values
	for (i = 0; i < 3; i++)
	{
		// theta_e * theta_e terms
		pthisSV->fQw12x12[i][i] = FQWINITTHTH_9DOF_GBY_KALMAN;
    6910:	269c      	movs	r6, #156	; 0x9c
    6912:	00f6      	lsls	r6, r6, #3
    6914:	51a5      	str	r5, [r4, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:280
		// b_e * b_e terms
		pthisSV->fQw12x12[i + 3][i + 3] = FQWINITBB_9DOF_GBY_KALMAN;
    6916:	4d39      	ldr	r5, [pc, #228]	; (69fc <fInit_9DOF_GBY_KALMAN+0x7a8>)
    6918:	5160      	str	r0, [r4, r5]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:282
		// th_e * b_e terms
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = FQWINITTHB_9DOF_GBY_KALMAN;
    691a:	20ae      	movs	r0, #174	; 0xae
    691c:	00c0      	lsls	r0, r0, #3
    691e:	5023      	str	r3, [r4, r0]
    6920:	4837      	ldr	r0, [pc, #220]	; (6a00 <fInit_9DOF_GBY_KALMAN+0x7ac>)
    6922:	5023      	str	r3, [r4, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:284
		// a_e * a_e terms
		pthisSV->fQw12x12[i + 6][i + 6] = FQWINITAA_9DOF_GBY_KALMAN;
    6924:	23c3      	movs	r3, #195	; 0xc3
    6926:	00db      	lsls	r3, r3, #3
    6928:	50e1      	str	r1, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:286
		// d_e * d_e terms
		pthisSV->fQw12x12[i + 9][i + 9] = FQWINITDD_9DOF_GBY_KALMAN;
    692a:	4b36      	ldr	r3, [pc, #216]	; (6a04 <fInit_9DOF_GBY_KALMAN+0x7b0>)
    692c:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:290
	}

	// update the default quaternion type supported to the most sophisticated
	if (globals.DefaultQuaternionPacketType < Q9)
    692e:	4b36      	ldr	r3, [pc, #216]	; (6a08 <fInit_9DOF_GBY_KALMAN+0x7b4>)
    6930:	795a      	ldrb	r2, [r3, #5]
    6932:	2a04      	cmp	r2, #4
    6934:	d802      	bhi.n	693c <fInit_9DOF_GBY_KALMAN+0x6e8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:291
		globals.QuaternionPacketType = globals.DefaultQuaternionPacketType = Q9; 
    6936:	2205      	movs	r2, #5
    6938:	715a      	strb	r2, [r3, #5]
    693a:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:294

	// clear the reset flag
	pthisSV->resetflag = false;
    693c:	4b33      	ldr	r3, [pc, #204]	; (6a0c <fInit_9DOF_GBY_KALMAN+0x7b8>)
    693e:	2200      	movs	r2, #0
    6940:	54e2      	strb	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:297

	return;
} // end fInit_9DOF_GBY_KALMAN
    6942:	bc04      	pop	{r2}
    6944:	4690      	mov	r8, r2
    6946:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:255
		pthisSV->fmGl[Z] = 0.0F;
	}
	else
	{
		// initialize Android and Win8 geomagnetic vector to zero degrees inclination
		pthisSV->fmGl[X] = 0.0F;
    6948:	2382      	movs	r3, #130	; 0x82
    694a:	005b      	lsls	r3, r3, #1
    694c:	50e5      	str	r5, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:256
		pthisSV->fmGl[Y] = DEFAULTB;
    694e:	4a30      	ldr	r2, [pc, #192]	; (6a10 <fInit_9DOF_GBY_KALMAN+0x7bc>)
    6950:	2384      	movs	r3, #132	; 0x84
    6952:	005b      	lsls	r3, r3, #1
    6954:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:257
		pthisSV->fmGl[Z] = 0.0F;
    6956:	2386      	movs	r3, #134	; 0x86
    6958:	005b      	lsls	r3, r3, #1
    695a:	50e5      	str	r5, [r4, r3]
    695c:	e5b8      	b.n	64d0 <fInit_9DOF_GBY_KALMAN+0x27c>
    695e:	46c0      	nop			; (mov r8, r8)
    6960:	0000059c 	.word	0x0000059c
    6964:	000005a4 	.word	0x000005a4
    6968:	000005ac 	.word	0x000005ac
    696c:	000005b4 	.word	0x000005b4
    6970:	000005bc 	.word	0x000005bc
    6974:	000005c4 	.word	0x000005c4
    6978:	000005cc 	.word	0x000005cc
    697c:	000005d4 	.word	0x000005d4
    6980:	000005dc 	.word	0x000005dc
    6984:	000005ec 	.word	0x000005ec
    6988:	000005f4 	.word	0x000005f4
    698c:	000005fc 	.word	0x000005fc
    6990:	00000604 	.word	0x00000604
    6994:	0000060c 	.word	0x0000060c
    6998:	00000614 	.word	0x00000614
    699c:	0000061c 	.word	0x0000061c
    69a0:	00000624 	.word	0x00000624
    69a4:	0000062c 	.word	0x0000062c
    69a8:	00000634 	.word	0x00000634
    69ac:	0000063c 	.word	0x0000063c
    69b0:	00000644 	.word	0x00000644
    69b4:	00000654 	.word	0x00000654
    69b8:	0000065c 	.word	0x0000065c
    69bc:	00000664 	.word	0x00000664
    69c0:	0000066c 	.word	0x0000066c
    69c4:	00000674 	.word	0x00000674
    69c8:	0000067c 	.word	0x0000067c
    69cc:	00000684 	.word	0x00000684
    69d0:	0000068c 	.word	0x0000068c
    69d4:	00000694 	.word	0x00000694
    69d8:	0000069c 	.word	0x0000069c
    69dc:	000006a4 	.word	0x000006a4
    69e0:	000006ac 	.word	0x000006ac
    69e4:	00000514 	.word	0x00000514
    69e8:	00000484 	.word	0x00000484
    69ec:	3f19999a 	.word	0x3f19999a
    69f0:	000004ac 	.word	0x000004ac
    69f4:	0000053c 	.word	0x0000053c
    69f8:	000005e4 	.word	0x000005e4
    69fc:	0000057c 	.word	0x0000057c
    6a00:	000004ec 	.word	0x000004ec
    6a04:	000006b4 	.word	0x000006b4
    6a08:	1fffe310 	.word	0x1fffe310
    6a0c:	00000836 	.word	0x00000836
    6a10:	42480000 	.word	0x42480000

00006a14 <fRun_1DOF_P_BASIC>:
fRun_1DOF_P_BASIC():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:301
	return;
} // end fInit_9DOF_GBY_KALMAN

// 1DOF pressure function
void fRun_1DOF_P_BASIC(struct SV_1DOF_P_BASIC *pthisSV, struct PressureSensor *pthisPressure, int32 loopcounter)
{
    6a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:303
	// do a reset and return if requested
	if (pthisSV->resetflag)
    6a16:	2514      	movs	r5, #20
    6a18:	5745      	ldrsb	r5, [r0, r5]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:301
	return;
} // end fInit_9DOF_GBY_KALMAN

// 1DOF pressure function
void fRun_1DOF_P_BASIC(struct SV_1DOF_P_BASIC *pthisSV, struct PressureSensor *pthisPressure, int32 loopcounter)
{
    6a1a:	1c04      	adds	r4, r0, #0
    6a1c:	1c0f      	adds	r7, r1, #0
    6a1e:	1c16      	adds	r6, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:303
	// do a reset and return if requested
	if (pthisSV->resetflag)
    6a20:	2d00      	cmp	r5, #0
    6a22:	d006      	beq.n	6a32 <fRun_1DOF_P_BASIC+0x1e>
fInit_1DOF_P_BASIC():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:42
#include "string.h"

void fInit_1DOF_P_BASIC(struct SV_1DOF_P_BASIC *pthisSV, float flpftimesecs, int16 iSensorFS, int16 iOverSampleRatio)
{
	// set algorithm sampling interval (typically 25Hz) and low pass filter
	pthisSV->fdeltat = (float) iOverSampleRatio / (float) iSensorFS;
    6a24:	4b0a      	ldr	r3, [pc, #40]	; (6a50 <fRun_1DOF_P_BASIC+0x3c>)
    6a26:	6083      	str	r3, [r0, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:43
	pthisSV->flpf = pthisSV->fdeltat / flpftimesecs;
    6a28:	4b0a      	ldr	r3, [pc, #40]	; (6a54 <fRun_1DOF_P_BASIC+0x40>)
    6a2a:	60c3      	str	r3, [r0, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:50
	{
		pthisSV->flpf = 1.0F;
	}

	// clear the reset flag
	pthisSV->resetflag = false;
    6a2c:	2300      	movs	r3, #0
    6a2e:	7503      	strb	r3, [r0, #20]
fRun_1DOF_P_BASIC():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:314
	// low pass filter the block averaged (typically 25Hz) height and temperature readings
	fLPFScalar(&(pthisPressure->fHp), &(pthisSV->fLPHp), pthisSV->flpf, loopcounter);
	fLPFScalar(&(pthisPressure->fTp), &(pthisSV->fLPTp), pthisSV->flpf, loopcounter);

	return;
} // end fRun_1DOF_P_BASIC
    6a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:310
		fInit_1DOF_P_BASIC(pthisSV, 1.5F, SENSORFS, OVERSAMPLE_RATIO);
		return;
	}

	// low pass filter the block averaged (typically 25Hz) height and temperature readings
	fLPFScalar(&(pthisPressure->fHp), &(pthisSV->fLPHp), pthisSV->flpf, loopcounter);
    6a32:	1c08      	adds	r0, r1, #0
    6a34:	68e2      	ldr	r2, [r4, #12]
    6a36:	1c21      	adds	r1, r4, #0
    6a38:	1c33      	adds	r3, r6, #0
    6a3a:	3008      	adds	r0, #8
    6a3c:	f009 fc02 	bl	10244 <fLPFScalar>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:311
	fLPFScalar(&(pthisPressure->fTp), &(pthisSV->fLPTp), pthisSV->flpf, loopcounter);
    6a40:	1c38      	adds	r0, r7, #0
    6a42:	300c      	adds	r0, #12
    6a44:	1d21      	adds	r1, r4, #4
    6a46:	68e2      	ldr	r2, [r4, #12]
    6a48:	1c33      	adds	r3, r6, #0
    6a4a:	f009 fbfb 	bl	10244 <fLPFScalar>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:313

	return;
    6a4e:	e7ef      	b.n	6a30 <fRun_1DOF_P_BASIC+0x1c>
    6a50:	3d23d70a 	.word	0x3d23d70a
    6a54:	3cda740d 	.word	0x3cda740d

00006a58 <fRun_3DOF_G_BASIC>:
fRun_3DOF_G_BASIC():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:318
} // end fRun_1DOF_P_BASIC

// 3DOF orientation function which calls tilt functions and implements low pass filters
void fRun_3DOF_G_BASIC(struct SV_3DOF_G_BASIC *pthisSV, struct AccelSensor *pthisAccel, int32 loopcounter, int16 ithisCoordSystem)
{
    6a58:	b570      	push	{r4, r5, r6, lr}
    6a5a:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:320
	// do a reset and return if requested
	if (pthisSV->resetflag)
    6a5c:	20a0      	movs	r0, #160	; 0xa0
    6a5e:	5625      	ldrsb	r5, [r4, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:318
	return;
} // end fRun_1DOF_P_BASIC

// 3DOF orientation function which calls tilt functions and implements low pass filters
void fRun_3DOF_G_BASIC(struct SV_3DOF_G_BASIC *pthisSV, struct AccelSensor *pthisAccel, int32 loopcounter, int16 ithisCoordSystem)
{
    6a60:	b082      	sub	sp, #8
    6a62:	1c16      	adds	r6, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:320
	// do a reset and return if requested
	if (pthisSV->resetflag)
    6a64:	2d00      	cmp	r5, #0
    6a66:	d136      	bne.n	6ad6 <fRun_3DOF_G_BASIC+0x7e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:330

	// apply the tilt estimation algorithm to get the instantaneous orientation matrix
	if (ithisCoordSystem == NED)
	{
		// call NED tilt function
		f3DOFTiltNED(pthisSV->fR, pthisAccel->fGp);
    6a68:	1c25      	adds	r5, r4, #0
    6a6a:	3564      	adds	r5, #100	; 0x64
    6a6c:	3118      	adds	r1, #24
    6a6e:	1c28      	adds	r0, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:327
		fInit_3DOF_G_BASIC(pthisSV, 0.2F, SENSORFS, OVERSAMPLE_RATIO);
		return;
	}

	// apply the tilt estimation algorithm to get the instantaneous orientation matrix
	if (ithisCoordSystem == NED)
    6a70:	2b00      	cmp	r3, #0
    6a72:	d039      	beq.n	6ae8 <fRun_3DOF_G_BASIC+0x90>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:332
	{
		// call NED tilt function
		f3DOFTiltNED(pthisSV->fR, pthisAccel->fGp);
	}
	else if (ithisCoordSystem == ANDROID)
    6a74:	2b01      	cmp	r3, #1
    6a76:	d062      	beq.n	6b3e <fRun_3DOF_G_BASIC+0xe6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:340
		f3DOFTiltAndroid(pthisSV->fR, pthisAccel->fGp);
	}
	else
	{
		// call Windows 8 tilt function
		f3DOFTiltWin8(pthisSV->fR, pthisAccel->fGp);
    6a78:	f007 ff94 	bl	e9a4 <f3DOFTiltWin8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:344
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    6a7c:	1c28      	adds	r0, r5, #0
    6a7e:	3524      	adds	r5, #36	; 0x24
    6a80:	1c29      	adds	r1, r5, #0
    6a82:	f008 ffdd 	bl	fa40 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:347

	// low pass filter the orientation quaternion 
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    6a86:	239c      	movs	r3, #156	; 0x9c
    6a88:	1c21      	adds	r1, r4, #0
    6a8a:	58e2      	ldr	r2, [r4, r3]
    6a8c:	1c28      	adds	r0, r5, #0
    6a8e:	3154      	adds	r1, #84	; 0x54
    6a90:	3d50      	subs	r5, #80	; 0x50
    6a92:	9601      	str	r6, [sp, #4]
    6a94:	2398      	movs	r3, #152	; 0x98
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:350

	// compute the low pass rotation matrix and rotation vector
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    6a96:	1c26      	adds	r6, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:347

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion 
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    6a98:	58e3      	ldr	r3, [r4, r3]
    6a9a:	9100      	str	r1, [sp, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:350

	// compute the low pass rotation matrix and rotation vector
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    6a9c:	3614      	adds	r6, #20
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:347

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion 
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    6a9e:	1c29      	adds	r1, r5, #0
    6aa0:	f009 f95a 	bl	fd58 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:350

	// compute the low pass rotation matrix and rotation vector
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    6aa4:	1c30      	adds	r0, r6, #0
    6aa6:	1c29      	adds	r1, r5, #0
    6aa8:	f009 f86a 	bl	fb80 <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:351
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    6aac:	1c21      	adds	r1, r4, #0
    6aae:	1c28      	adds	r0, r5, #0
    6ab0:	3148      	adds	r1, #72	; 0x48
    6ab2:	f009 f8f5 	bl	fca0 <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:369
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}
	else
	{
		// calculate Windows 8 Euler angles
		fWin8AnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    6ab6:	1c23      	adds	r3, r4, #0
    6ab8:	330c      	adds	r3, #12
    6aba:	9300      	str	r3, [sp, #0]
    6abc:	3304      	adds	r3, #4
    6abe:	9301      	str	r3, [sp, #4]
    6ac0:	1d22      	adds	r2, r4, #4
    6ac2:	1c30      	adds	r0, r6, #0
    6ac4:	1c21      	adds	r1, r4, #0
    6ac6:	3b08      	subs	r3, #8
    6ac8:	f008 fe32 	bl	f730 <fWin8AnglesDegFromRotationMatrix>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:374
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}

	// force the yaw and compass angles to zero
	pthisSV->fLPPsi = pthisSV->fLPRho = 0.0F;
    6acc:	2300      	movs	r3, #0
    6ace:	60e3      	str	r3, [r4, #12]
    6ad0:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:377

	return;
} // end fRun_3DOF_G_BASIC
    6ad2:	b002      	add	sp, #8
    6ad4:	bd70      	pop	{r4, r5, r6, pc}
fInit_3DOF_G_BASIC():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:58
} // end fInit_1DOF_P_BASIC

void fInit_3DOF_G_BASIC(struct SV_3DOF_G_BASIC *pthisSV, float flpftimesecs, int16 iSensorFS, int16 iOverSampleRatio)
{
	// set algorithm sampling interval (typically 25Hz)
	pthisSV->fdeltat = (float) iOverSampleRatio / (float) iSensorFS;
    6ad6:	4a2f      	ldr	r2, [pc, #188]	; (6b94 <fRun_3DOF_G_BASIC+0x13c>)
    6ad8:	2398      	movs	r3, #152	; 0x98
    6ada:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:62

	// set low pass filter constant with maximum value 1.0 (all pass) decreasing to 0.0 (increasing low pass)
	if (flpftimesecs > pthisSV->fdeltat)
		pthisSV->flpf = pthisSV->fdeltat / flpftimesecs;
    6adc:	4a2e      	ldr	r2, [pc, #184]	; (6b98 <fRun_3DOF_G_BASIC+0x140>)
    6ade:	239c      	movs	r3, #156	; 0x9c
    6ae0:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:71
	// update the default quaternion type supported to the most sophisticated
	if (globals.DefaultQuaternionPacketType < Q3)
		globals.QuaternionPacketType = globals.DefaultQuaternionPacketType = Q3; 

	// clear the reset flag
	pthisSV->resetflag = false;
    6ae2:	2300      	movs	r3, #0
    6ae4:	5423      	strb	r3, [r4, r0]
    6ae6:	e7f4      	b.n	6ad2 <fRun_3DOF_G_BASIC+0x7a>
fRun_3DOF_G_BASIC():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:330

	// apply the tilt estimation algorithm to get the instantaneous orientation matrix
	if (ithisCoordSystem == NED)
	{
		// call NED tilt function
		f3DOFTiltNED(pthisSV->fR, pthisAccel->fGp);
    6ae8:	f007 fe2c 	bl	e744 <f3DOFTiltNED>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:344
		// call Windows 8 tilt function
		f3DOFTiltWin8(pthisSV->fR, pthisAccel->fGp);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    6aec:	1c28      	adds	r0, r5, #0
    6aee:	3524      	adds	r5, #36	; 0x24
    6af0:	1c29      	adds	r1, r5, #0
    6af2:	f008 ffa5 	bl	fa40 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:347

	// low pass filter the orientation quaternion 
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    6af6:	239c      	movs	r3, #156	; 0x9c
    6af8:	1c21      	adds	r1, r4, #0
    6afa:	58e2      	ldr	r2, [r4, r3]
    6afc:	9601      	str	r6, [sp, #4]
    6afe:	1c28      	adds	r0, r5, #0
    6b00:	3154      	adds	r1, #84	; 0x54
    6b02:	3d50      	subs	r5, #80	; 0x50
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:350

	// compute the low pass rotation matrix and rotation vector
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    6b04:	1c26      	adds	r6, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:347

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion 
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    6b06:	2398      	movs	r3, #152	; 0x98
    6b08:	58e3      	ldr	r3, [r4, r3]
    6b0a:	9100      	str	r1, [sp, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:350

	// compute the low pass rotation matrix and rotation vector
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    6b0c:	3614      	adds	r6, #20
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:347

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion 
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    6b0e:	1c29      	adds	r1, r5, #0
    6b10:	f009 f922 	bl	fd58 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:350

	// compute the low pass rotation matrix and rotation vector
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    6b14:	1c30      	adds	r0, r6, #0
    6b16:	1c29      	adds	r1, r5, #0
    6b18:	f009 f832 	bl	fb80 <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:351
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    6b1c:	1c21      	adds	r1, r4, #0
    6b1e:	1c28      	adds	r0, r5, #0
    6b20:	3148      	adds	r1, #72	; 0x48
    6b22:	f009 f8bd 	bl	fca0 <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:357

	// calculate the Euler angles from the low pass orientation matrix
	if (ithisCoordSystem == NED)
	{
		// calculate NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    6b26:	1c23      	adds	r3, r4, #0
    6b28:	330c      	adds	r3, #12
    6b2a:	9300      	str	r3, [sp, #0]
    6b2c:	3304      	adds	r3, #4
    6b2e:	9301      	str	r3, [sp, #4]
    6b30:	1d22      	adds	r2, r4, #4
    6b32:	1c30      	adds	r0, r6, #0
    6b34:	1c21      	adds	r1, r4, #0
    6b36:	3b08      	subs	r3, #8
    6b38:	f008 fd0e 	bl	f558 <fNEDAnglesDegFromRotationMatrix>
    6b3c:	e7c6      	b.n	6acc <fRun_3DOF_G_BASIC+0x74>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:335
		f3DOFTiltNED(pthisSV->fR, pthisAccel->fGp);
	}
	else if (ithisCoordSystem == ANDROID)
	{
		// call Android tilt function
		f3DOFTiltAndroid(pthisSV->fR, pthisAccel->fGp);
    6b3e:	f007 fe97 	bl	e870 <f3DOFTiltAndroid>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:344
		// call Windows 8 tilt function
		f3DOFTiltWin8(pthisSV->fR, pthisAccel->fGp);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    6b42:	1c28      	adds	r0, r5, #0
    6b44:	3524      	adds	r5, #36	; 0x24
    6b46:	1c29      	adds	r1, r5, #0
    6b48:	f008 ff7a 	bl	fa40 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:347

	// low pass filter the orientation quaternion 
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    6b4c:	239c      	movs	r3, #156	; 0x9c
    6b4e:	1c21      	adds	r1, r4, #0
    6b50:	58e2      	ldr	r2, [r4, r3]
    6b52:	9601      	str	r6, [sp, #4]
    6b54:	1c28      	adds	r0, r5, #0
    6b56:	3154      	adds	r1, #84	; 0x54
    6b58:	3d50      	subs	r5, #80	; 0x50
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:350

	// compute the low pass rotation matrix and rotation vector
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    6b5a:	1c26      	adds	r6, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:347

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion 
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    6b5c:	2398      	movs	r3, #152	; 0x98
    6b5e:	58e3      	ldr	r3, [r4, r3]
    6b60:	9100      	str	r1, [sp, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:350

	// compute the low pass rotation matrix and rotation vector
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    6b62:	3614      	adds	r6, #20
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:347

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion 
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    6b64:	1c29      	adds	r1, r5, #0
    6b66:	f009 f8f7 	bl	fd58 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:350

	// compute the low pass rotation matrix and rotation vector
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    6b6a:	1c30      	adds	r0, r6, #0
    6b6c:	1c29      	adds	r1, r5, #0
    6b6e:	f009 f807 	bl	fb80 <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:351
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    6b72:	1c21      	adds	r1, r4, #0
    6b74:	1c28      	adds	r0, r5, #0
    6b76:	3148      	adds	r1, #72	; 0x48
    6b78:	f009 f892 	bl	fca0 <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:363
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}
	else if (ithisCoordSystem == ANDROID)
	{
		// calculate Android Euler angles
		fAndroidAnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    6b7c:	1c23      	adds	r3, r4, #0
    6b7e:	330c      	adds	r3, #12
    6b80:	9300      	str	r3, [sp, #0]
    6b82:	3304      	adds	r3, #4
    6b84:	9301      	str	r3, [sp, #4]
    6b86:	1d22      	adds	r2, r4, #4
    6b88:	1c30      	adds	r0, r6, #0
    6b8a:	1c21      	adds	r1, r4, #0
    6b8c:	3b08      	subs	r3, #8
    6b8e:	f008 fd59 	bl	f644 <fAndroidAnglesDegFromRotationMatrix>
    6b92:	e79b      	b.n	6acc <fRun_3DOF_G_BASIC+0x74>
    6b94:	3d23d70a 	.word	0x3d23d70a
    6b98:	3e4ccccc 	.word	0x3e4ccccc

00006b9c <fRun_3DOF_B_BASIC>:
fRun_3DOF_B_BASIC():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:381
	return;
} // end fRun_3DOF_G_BASIC

// 2D automobile eCompass
void fRun_3DOF_B_BASIC(struct SV_3DOF_B_BASIC *pthisSV, struct MagSensor *pthisMag, int32 loopcounter, int16 ithisCoordSystem)
{
    6b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b9e:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:383
	// do a reset and return if requested
	if (pthisSV->resetflag)
    6ba0:	20a0      	movs	r0, #160	; 0xa0
    6ba2:	5620      	ldrsb	r0, [r4, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:381
	return;
} // end fRun_3DOF_G_BASIC

// 2D automobile eCompass
void fRun_3DOF_B_BASIC(struct SV_3DOF_B_BASIC *pthisSV, struct MagSensor *pthisMag, int32 loopcounter, int16 ithisCoordSystem)
{
    6ba4:	b083      	sub	sp, #12
    6ba6:	1c15      	adds	r5, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:383
	// do a reset and return if requested
	if (pthisSV->resetflag)
    6ba8:	2800      	cmp	r0, #0
    6baa:	d011      	beq.n	6bd0 <fRun_3DOF_B_BASIC+0x34>
fInit_3DOF_B_BASIC():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:79
} // end fInit_3DOF_G_BASIC

void fInit_3DOF_B_BASIC(struct SV_3DOF_B_BASIC *pthisSV, float flpftimesecs, int16 iSensorFS, int16 iOverSampleRatio)
{
	// set algorithm sampling interval (typically 25Hz)
	pthisSV->fdeltat = (float) iOverSampleRatio / (float) iSensorFS;
    6bac:	4a50      	ldr	r2, [pc, #320]	; (6cf0 <fRun_3DOF_B_BASIC+0x154>)
    6bae:	2398      	movs	r3, #152	; 0x98
    6bb0:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:83

	// set low pass filter constant with maximum value 1.0 (all pass) decreasing to 0.0 (increasing low pass)
	if (flpftimesecs > pthisSV->fdeltat)
		pthisSV->flpf = pthisSV->fdeltat / flpftimesecs;
    6bb2:	4a50      	ldr	r2, [pc, #320]	; (6cf4 <fRun_3DOF_B_BASIC+0x158>)
    6bb4:	239c      	movs	r3, #156	; 0x9c
    6bb6:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:88
	else
		pthisSV->flpf = 1.0F;

	// update the default quaternion type supported to the most sophisticated
	if (globals.DefaultQuaternionPacketType < Q3M)
    6bb8:	4b4f      	ldr	r3, [pc, #316]	; (6cf8 <fRun_3DOF_B_BASIC+0x15c>)
    6bba:	795a      	ldrb	r2, [r3, #5]
    6bbc:	2a00      	cmp	r2, #0
    6bbe:	d102      	bne.n	6bc6 <fRun_3DOF_B_BASIC+0x2a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:89
		globals.QuaternionPacketType = globals.DefaultQuaternionPacketType = Q3M; 
    6bc0:	2201      	movs	r2, #1
    6bc2:	715a      	strb	r2, [r3, #5]
    6bc4:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:92

	// clear the reset flag
	pthisSV->resetflag = false;
    6bc6:	2200      	movs	r2, #0
    6bc8:	23a0      	movs	r3, #160	; 0xa0
    6bca:	54e2      	strb	r2, [r4, r3]
fRun_3DOF_B_BASIC():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:435
		fWin8AnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}

	return;
}
    6bcc:	b003      	add	sp, #12
    6bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:393

	// calculate the 3DOF magnetometer orientation matrix from fBc
	if (ithisCoordSystem == NED)
	{
		// call NED magnetic rotation matrix function
		f3DOFMagnetometerMatrixNED(pthisSV->fR, pthisMag->fBc);
    6bd0:	1c26      	adds	r6, r4, #0
    6bd2:	3664      	adds	r6, #100	; 0x64
    6bd4:	3130      	adds	r1, #48	; 0x30
    6bd6:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:390
		fInit_3DOF_B_BASIC(pthisSV, 0.6F, SENSORFS, OVERSAMPLE_RATIO);
		return;
	}

	// calculate the 3DOF magnetometer orientation matrix from fBc
	if (ithisCoordSystem == NED)
    6bd8:	2b00      	cmp	r3, #0
    6bda:	d02e      	beq.n	6c3a <fRun_3DOF_B_BASIC+0x9e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:395
	{
		// call NED magnetic rotation matrix function
		f3DOFMagnetometerMatrixNED(pthisSV->fR, pthisMag->fBc);
	}
	else if (ithisCoordSystem == ANDROID)
    6bdc:	2b01      	cmp	r3, #1
    6bde:	d059      	beq.n	6c94 <fRun_3DOF_B_BASIC+0xf8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:407
		// call Windows 8 magnetic rotation matrix function
		f3DOFMagnetometerMatrixWin8(pthisSV->fR, pthisMag->fBc);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    6be0:	1c27      	adds	r7, r4, #0
    6be2:	3788      	adds	r7, #136	; 0x88
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:403
		f3DOFMagnetometerMatrixAndroid(pthisSV->fR, pthisMag->fBc);
	}
	else
	{
		// call Windows 8 magnetic rotation matrix function
		f3DOFMagnetometerMatrixWin8(pthisSV->fR, pthisMag->fBc);
    6be4:	f008 f802 	bl	ebec <f3DOFMagnetometerMatrixWin8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:407
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    6be8:	1c30      	adds	r0, r6, #0
    6bea:	1c39      	adds	r1, r7, #0
    6bec:	f008 ff28 	bl	fa40 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    6bf0:	239c      	movs	r3, #156	; 0x9c
    6bf2:	1c21      	adds	r1, r4, #0
    6bf4:	58e2      	ldr	r2, [r4, r3]
    6bf6:	3e2c      	subs	r6, #44	; 0x2c
    6bf8:	9501      	str	r5, [sp, #4]
    6bfa:	3154      	adds	r1, #84	; 0x54
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    6bfc:	1c25      	adds	r5, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    6bfe:	2398      	movs	r3, #152	; 0x98
    6c00:	58e3      	ldr	r3, [r4, r3]
    6c02:	9100      	str	r1, [sp, #0]
    6c04:	1c38      	adds	r0, r7, #0
    6c06:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    6c08:	3514      	adds	r5, #20
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    6c0a:	f009 f8a5 	bl	fd58 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    6c0e:	1c28      	adds	r0, r5, #0
    6c10:	1c31      	adds	r1, r6, #0
    6c12:	f008 ffb5 	bl	fb80 <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:412
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    6c16:	1c21      	adds	r1, r4, #0
    6c18:	1c30      	adds	r0, r6, #0
    6c1a:	3148      	adds	r1, #72	; 0x48
    6c1c:	f009 f840 	bl	fca0 <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:430
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}
	else
	{
		// calculate Windows 8 Euler angles
		fWin8AnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    6c20:	1c21      	adds	r1, r4, #0
    6c22:	310c      	adds	r1, #12
    6c24:	1c23      	adds	r3, r4, #0
    6c26:	9100      	str	r1, [sp, #0]
    6c28:	3104      	adds	r1, #4
    6c2a:	9101      	str	r1, [sp, #4]
    6c2c:	1d22      	adds	r2, r4, #4
    6c2e:	3308      	adds	r3, #8
    6c30:	1c28      	adds	r0, r5, #0
    6c32:	1c21      	adds	r1, r4, #0
    6c34:	f008 fd7c 	bl	f730 <fWin8AnglesDegFromRotationMatrix>
    6c38:	e7c8      	b.n	6bcc <fRun_3DOF_B_BASIC+0x30>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:407
		// call Windows 8 magnetic rotation matrix function
		f3DOFMagnetometerMatrixWin8(pthisSV->fR, pthisMag->fBc);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    6c3a:	1c27      	adds	r7, r4, #0
    6c3c:	3788      	adds	r7, #136	; 0x88
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:393

	// calculate the 3DOF magnetometer orientation matrix from fBc
	if (ithisCoordSystem == NED)
	{
		// call NED magnetic rotation matrix function
		f3DOFMagnetometerMatrixNED(pthisSV->fR, pthisMag->fBc);
    6c3e:	f007 ff69 	bl	eb14 <f3DOFMagnetometerMatrixNED>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:407
		// call Windows 8 magnetic rotation matrix function
		f3DOFMagnetometerMatrixWin8(pthisSV->fR, pthisMag->fBc);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    6c42:	1c30      	adds	r0, r6, #0
    6c44:	1c39      	adds	r1, r7, #0
    6c46:	f008 fefb 	bl	fa40 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    6c4a:	239c      	movs	r3, #156	; 0x9c
    6c4c:	1c21      	adds	r1, r4, #0
    6c4e:	58e2      	ldr	r2, [r4, r3]
    6c50:	3e2c      	subs	r6, #44	; 0x2c
    6c52:	9501      	str	r5, [sp, #4]
    6c54:	3154      	adds	r1, #84	; 0x54
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    6c56:	1c25      	adds	r5, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    6c58:	2398      	movs	r3, #152	; 0x98
    6c5a:	58e3      	ldr	r3, [r4, r3]
    6c5c:	9100      	str	r1, [sp, #0]
    6c5e:	1c38      	adds	r0, r7, #0
    6c60:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    6c62:	3514      	adds	r5, #20
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    6c64:	f009 f878 	bl	fd58 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    6c68:	1c28      	adds	r0, r5, #0
    6c6a:	1c31      	adds	r1, r6, #0
    6c6c:	f008 ff88 	bl	fb80 <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:412
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    6c70:	1c21      	adds	r1, r4, #0
    6c72:	1c30      	adds	r0, r6, #0
    6c74:	3148      	adds	r1, #72	; 0x48
    6c76:	f009 f813 	bl	fca0 <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:418

	// calculate the Euler angles from the low pass orientation matrix
	if (ithisCoordSystem == NED)
	{
		// calculate NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    6c7a:	1c21      	adds	r1, r4, #0
    6c7c:	310c      	adds	r1, #12
    6c7e:	1c23      	adds	r3, r4, #0
    6c80:	9100      	str	r1, [sp, #0]
    6c82:	3104      	adds	r1, #4
    6c84:	9101      	str	r1, [sp, #4]
    6c86:	1d22      	adds	r2, r4, #4
    6c88:	3308      	adds	r3, #8
    6c8a:	1c28      	adds	r0, r5, #0
    6c8c:	1c21      	adds	r1, r4, #0
    6c8e:	f008 fc63 	bl	f558 <fNEDAnglesDegFromRotationMatrix>
    6c92:	e79b      	b.n	6bcc <fRun_3DOF_B_BASIC+0x30>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:407
		// call Windows 8 magnetic rotation matrix function
		f3DOFMagnetometerMatrixWin8(pthisSV->fR, pthisMag->fBc);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    6c94:	1c27      	adds	r7, r4, #0
    6c96:	3788      	adds	r7, #136	; 0x88
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:398
		f3DOFMagnetometerMatrixNED(pthisSV->fR, pthisMag->fBc);
	}
	else if (ithisCoordSystem == ANDROID)
	{
		// call Android magnetic rotation matrix function
		f3DOFMagnetometerMatrixAndroid(pthisSV->fR, pthisMag->fBc);
    6c98:	f007 ff72 	bl	eb80 <f3DOFMagnetometerMatrixAndroid>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:407
		// call Windows 8 magnetic rotation matrix function
		f3DOFMagnetometerMatrixWin8(pthisSV->fR, pthisMag->fBc);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    6c9c:	1c30      	adds	r0, r6, #0
    6c9e:	1c39      	adds	r1, r7, #0
    6ca0:	f008 fece 	bl	fa40 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    6ca4:	239c      	movs	r3, #156	; 0x9c
    6ca6:	1c21      	adds	r1, r4, #0
    6ca8:	58e2      	ldr	r2, [r4, r3]
    6caa:	3e2c      	subs	r6, #44	; 0x2c
    6cac:	9501      	str	r5, [sp, #4]
    6cae:	3154      	adds	r1, #84	; 0x54
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    6cb0:	1c25      	adds	r5, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    6cb2:	2398      	movs	r3, #152	; 0x98
    6cb4:	58e3      	ldr	r3, [r4, r3]
    6cb6:	9100      	str	r1, [sp, #0]
    6cb8:	1c38      	adds	r0, r7, #0
    6cba:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    6cbc:	3514      	adds	r5, #20
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:410

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    6cbe:	f009 f84b 	bl	fd58 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:411
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    6cc2:	1c28      	adds	r0, r5, #0
    6cc4:	1c31      	adds	r1, r6, #0
    6cc6:	f008 ff5b 	bl	fb80 <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:412
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    6cca:	1c21      	adds	r1, r4, #0
    6ccc:	1c30      	adds	r0, r6, #0
    6cce:	3148      	adds	r1, #72	; 0x48
    6cd0:	f008 ffe6 	bl	fca0 <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:424
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}
	else if (ithisCoordSystem == ANDROID)
	{
		// calculate Android Euler angles
		fAndroidAnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    6cd4:	1c21      	adds	r1, r4, #0
    6cd6:	310c      	adds	r1, #12
    6cd8:	1c23      	adds	r3, r4, #0
    6cda:	9100      	str	r1, [sp, #0]
    6cdc:	3104      	adds	r1, #4
    6cde:	9101      	str	r1, [sp, #4]
    6ce0:	1d22      	adds	r2, r4, #4
    6ce2:	3308      	adds	r3, #8
    6ce4:	1c28      	adds	r0, r5, #0
    6ce6:	1c21      	adds	r1, r4, #0
    6ce8:	f008 fcac 	bl	f644 <fAndroidAnglesDegFromRotationMatrix>
    6cec:	e76e      	b.n	6bcc <fRun_3DOF_B_BASIC+0x30>
    6cee:	46c0      	nop			; (mov r8, r8)
    6cf0:	3d23d70a 	.word	0x3d23d70a
    6cf4:	3d888888 	.word	0x3d888888
    6cf8:	1fffe310 	.word	0x1fffe310

00006cfc <fRun_3DOF_Y_BASIC>:
fRun_3DOF_Y_BASIC():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:439
	return;
}

// basic gyro integration function
void fRun_3DOF_Y_BASIC(struct SV_3DOF_Y_BASIC *pthisSV, struct GyroSensor *pthisGyro, int32 loopcounter, int16 ithisCoordSystem, int16 iOverSampleRatio)
{
    6cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6cfe:	464d      	mov	r5, r9
    6d00:	4644      	mov	r4, r8
    6d02:	465f      	mov	r7, fp
    6d04:	4656      	mov	r6, sl
    6d06:	b4f0      	push	{r4, r5, r6, r7}
    6d08:	b089      	sub	sp, #36	; 0x24
    6d0a:	9303      	str	r3, [sp, #12]
    6d0c:	ab12      	add	r3, sp, #72	; 0x48
    6d0e:	4689      	mov	r9, r1
    6d10:	2200      	movs	r2, #0
    6d12:	5e99      	ldrsh	r1, [r3, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:444
	float rvec[3];							// rotation vector
	int8 i, j;								// loop counters

	// do a reset and return if requested
	if (pthisSV->resetflag)
    6d14:	237c      	movs	r3, #124	; 0x7c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:439
	return;
}

// basic gyro integration function
void fRun_3DOF_Y_BASIC(struct SV_3DOF_Y_BASIC *pthisSV, struct GyroSensor *pthisGyro, int32 loopcounter, int16 ithisCoordSystem, int16 iOverSampleRatio)
{
    6d16:	9102      	str	r1, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:444
	float rvec[3];							// rotation vector
	int8 i, j;								// loop counters

	// do a reset and return if requested
	if (pthisSV->resetflag)
    6d18:	56c3      	ldrsb	r3, [r0, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:439
	return;
}

// basic gyro integration function
void fRun_3DOF_Y_BASIC(struct SV_3DOF_Y_BASIC *pthisSV, struct GyroSensor *pthisGyro, int32 loopcounter, int16 ithisCoordSystem, int16 iOverSampleRatio)
{
    6d1a:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:444
	float rvec[3];							// rotation vector
	int8 i, j;								// loop counters

	// do a reset and return if requested
	if (pthisSV->resetflag)
    6d1c:	2b00      	cmp	r3, #0
    6d1e:	d000      	beq.n	6d22 <fRun_3DOF_Y_BASIC+0x26>
    6d20:	e076      	b.n	6e10 <fRun_3DOF_Y_BASIC+0x114>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:453 (discriminator 1)
	}

	// set the angular velocity to the raw gyro reading: omega[k] = yG[k]
	for (i = X; i <= Z; i++)
	{
		pthisSV->fOmega[i] = pthisGyro->fYp[i];
    6d22:	464b      	mov	r3, r9
    6d24:	68db      	ldr	r3, [r3, #12]
    6d26:	4649      	mov	r1, r9
    6d28:	464a      	mov	r2, r9
    6d2a:	6909      	ldr	r1, [r1, #16]
    6d2c:	6543      	str	r3, [r0, #84]	; 0x54
    6d2e:	6952      	ldr	r2, [r2, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:457 (discriminator 1)
	}

	// integrate the buffered high frequency (typically 200Hz) gyro readings
	for (j = 0; j < iOverSampleRatio; j++)
    6d30:	9b02      	ldr	r3, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:453 (discriminator 1)
	}

	// set the angular velocity to the raw gyro reading: omega[k] = yG[k]
	for (i = X; i <= Z; i++)
	{
		pthisSV->fOmega[i] = pthisGyro->fYp[i];
    6d32:	6581      	str	r1, [r0, #88]	; 0x58
    6d34:	65c2      	str	r2, [r0, #92]	; 0x5c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:457 (discriminator 1)
	}

	// integrate the buffered high frequency (typically 200Hz) gyro readings
	for (j = 0; j < iOverSampleRatio; j++)
    6d36:	2b00      	cmp	r3, #0
    6d38:	dc00      	bgt.n	6d3c <fRun_3DOF_Y_BASIC+0x40>
    6d3a:	e09f      	b.n	6e7c <fRun_3DOF_Y_BASIC+0x180>
    6d3c:	2338      	movs	r3, #56	; 0x38
    6d3e:	2264      	movs	r2, #100	; 0x64
    6d40:	469b      	mov	fp, r3
    6d42:	4692      	mov	sl, r2
    6d44:	44c2      	add	sl, r8
    6d46:	44c3      	add	fp, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:457
    6d48:	2700      	movs	r7, #0
    6d4a:	2300      	movs	r3, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:462
	{
		// compute the incremental fast (typically 200Hz) rotation vector rvec (deg)
		for (i = X; i <= Z; i++)
		{
			rvec[i] = ((float)pthisGyro->iYpFast[j][i] * pthisGyro->fDegPerSecPerCount) * pthisSV->fFastdeltat;
    6d4c:	005e      	lsls	r6, r3, #1
    6d4e:	18f6      	adds	r6, r6, r3
    6d50:	4649      	mov	r1, r9
    6d52:	0076      	lsls	r6, r6, #1
    6d54:	4642      	mov	r2, r8
    6d56:	698d      	ldr	r5, [r1, #24]
    6d58:	444e      	add	r6, r9
    6d5a:	6f54      	ldr	r4, [r2, #116]	; 0x74
    6d5c:	231c      	movs	r3, #28
    6d5e:	5ef0      	ldrsh	r0, [r6, r3]
    6d60:	f7fa fad8 	bl	1314 <__aeabi_i2f>
    6d64:	1c29      	adds	r1, r5, #0
    6d66:	f7fa f815 	bl	d94 <__aeabi_fmul>
    6d6a:	1c21      	adds	r1, r4, #0
    6d6c:	f7fa f812 	bl	d94 <__aeabi_fmul>
    6d70:	9005      	str	r0, [sp, #20]
    6d72:	211e      	movs	r1, #30
    6d74:	5e70      	ldrsh	r0, [r6, r1]
    6d76:	f7fa facd 	bl	1314 <__aeabi_i2f>
    6d7a:	1c29      	adds	r1, r5, #0
    6d7c:	f7fa f80a 	bl	d94 <__aeabi_fmul>
    6d80:	1c21      	adds	r1, r4, #0
    6d82:	f7fa f807 	bl	d94 <__aeabi_fmul>
    6d86:	9006      	str	r0, [sp, #24]
    6d88:	2220      	movs	r2, #32
    6d8a:	5eb0      	ldrsh	r0, [r6, r2]
    6d8c:	f7fa fac2 	bl	1314 <__aeabi_i2f>
    6d90:	1c01      	adds	r1, r0, #0
    6d92:	1c28      	adds	r0, r5, #0
    6d94:	f7f9 fffe 	bl	d94 <__aeabi_fmul>
    6d98:	1c01      	adds	r1, r0, #0
    6d9a:	1c20      	adds	r0, r4, #0
    6d9c:	f7f9 fffa 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:466
		}

		// compute the incremental quaternion fDeltaq from the rotation vector
		fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), rvec, 1.0F);
    6da0:	22fe      	movs	r2, #254	; 0xfe
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:462
	for (j = 0; j < iOverSampleRatio; j++)
	{
		// compute the incremental fast (typically 200Hz) rotation vector rvec (deg)
		for (i = X; i <= Z; i++)
		{
			rvec[i] = ((float)pthisGyro->iYpFast[j][i] * pthisGyro->fDegPerSecPerCount) * pthisSV->fFastdeltat;
    6da2:	9007      	str	r0, [sp, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:466
		}

		// compute the incremental quaternion fDeltaq from the rotation vector
		fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), rvec, 1.0F);
    6da4:	a905      	add	r1, sp, #20
    6da6:	4650      	mov	r0, sl
    6da8:	0592      	lsls	r2, r2, #22
    6daa:	f008 fd7f 	bl	f8ac <fQuaternionFromRotationVectorDeg>
    6dae:	3701      	adds	r7, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:469

		// incrementally rotate the orientation quaternion fq
		qAeqAxB(&(pthisSV->fq), &(pthisSV->fDeltaq));
    6db0:	4651      	mov	r1, sl
    6db2:	4658      	mov	r0, fp
    6db4:	f009 fb00 	bl	103b8 <qAeqAxB>
    6db8:	b2ff      	uxtb	r7, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:457
	{
		pthisSV->fOmega[i] = pthisGyro->fYp[i];
	}

	// integrate the buffered high frequency (typically 200Hz) gyro readings
	for (j = 0; j < iOverSampleRatio; j++)
    6dba:	9902      	ldr	r1, [sp, #8]
    6dbc:	b27b      	sxtb	r3, r7
    6dbe:	428b      	cmp	r3, r1
    6dc0:	dbc4      	blt.n	6d4c <fRun_3DOF_Y_BASIC+0x50>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:477
	// re-normalize the orientation quaternion to stop error propagation
	// the renormalization function ensures that the scalar component q0 is non-negative
	fqAeqNormqA(&(pthisSV->fq));

	// get the rotation matrix from the quaternion
	fRotationMatrixFromQuaternion(pthisSV->fR, &(pthisSV->fq));
    6dc2:	4644      	mov	r4, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:474
		qAeqAxB(&(pthisSV->fq), &(pthisSV->fDeltaq));
	}

	// re-normalize the orientation quaternion to stop error propagation
	// the renormalization function ensures that the scalar component q0 is non-negative
	fqAeqNormqA(&(pthisSV->fq));
    6dc4:	4658      	mov	r0, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:477

	// get the rotation matrix from the quaternion
	fRotationMatrixFromQuaternion(pthisSV->fR, &(pthisSV->fq));
    6dc6:	3414      	adds	r4, #20
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:474
		qAeqAxB(&(pthisSV->fq), &(pthisSV->fDeltaq));
	}

	// re-normalize the orientation quaternion to stop error propagation
	// the renormalization function ensures that the scalar component q0 is non-negative
	fqAeqNormqA(&(pthisSV->fq));
    6dc8:	f009 fb92 	bl	104f0 <fqAeqNormqA>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:477

	// get the rotation matrix from the quaternion
	fRotationMatrixFromQuaternion(pthisSV->fR, &(pthisSV->fq));
    6dcc:	1c20      	adds	r0, r4, #0
    6dce:	4659      	mov	r1, fp
    6dd0:	f008 fed6 	bl	fb80 <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:480

	// compute the rotation vector from the a posteriori quaternion
	fRotationVectorDegFromQuaternion(&(pthisSV->fq), pthisSV->fRVec);
    6dd4:	4641      	mov	r1, r8
    6dd6:	4658      	mov	r0, fp
    6dd8:	3148      	adds	r1, #72	; 0x48
    6dda:	f008 ff61 	bl	fca0 <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:486

	// *********************************************************************************
	// compute the Euler angles from the orientation matrix
	// *********************************************************************************

	if (ithisCoordSystem == NED)
    6dde:	9a03      	ldr	r2, [sp, #12]
    6de0:	2a00      	cmp	r2, #0
    6de2:	d02f      	beq.n	6e44 <fRun_3DOF_Y_BASIC+0x148>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:492
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fR, &(pthisSV->fPhi), &(pthisSV->fThe), &(pthisSV->fPsi),
				&(pthisSV->fRho), &(pthisSV->fChi));
	}
	else if (ithisCoordSystem == ANDROID)
    6de4:	2a01      	cmp	r2, #1
    6de6:	d03b      	beq.n	6e60 <fRun_3DOF_Y_BASIC+0x164>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:501
				&(pthisSV->fRho), &(pthisSV->fChi));
	}
	else
	{
		// calculate Win8 Euler angles
		fWin8AnglesDegFromRotationMatrix(pthisSV->fR, &(pthisSV->fPhi), &(pthisSV->fThe), &(pthisSV->fPsi),
    6de8:	4641      	mov	r1, r8
    6dea:	310c      	adds	r1, #12
    6dec:	4642      	mov	r2, r8
    6dee:	4643      	mov	r3, r8
    6df0:	9100      	str	r1, [sp, #0]
    6df2:	3104      	adds	r1, #4
    6df4:	9101      	str	r1, [sp, #4]
    6df6:	3204      	adds	r2, #4
    6df8:	3308      	adds	r3, #8
    6dfa:	1c20      	adds	r0, r4, #0
    6dfc:	4641      	mov	r1, r8
    6dfe:	f008 fc97 	bl	f730 <fWin8AnglesDegFromRotationMatrix>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:506
				&(pthisSV->fRho), &(pthisSV->fChi));
	}

	return;
} // end fRun_3DOF_Y_BASIC
    6e02:	b009      	add	sp, #36	; 0x24
    6e04:	bc3c      	pop	{r2, r3, r4, r5}
    6e06:	4690      	mov	r8, r2
    6e08:	4699      	mov	r9, r3
    6e0a:	46a2      	mov	sl, r4
    6e0c:	46ab      	mov	fp, r5
    6e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
fInit_3DOF_Y_BASIC():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:100
} // end fInit_3DOF_B_BASIC

void fInit_3DOF_Y_BASIC(struct SV_3DOF_Y_BASIC *pthisSV, int16 iSensorFS, int16 iOverSampleRatio)
{
	// compute the sampling time intervals (secs)
	pthisSV->fFastdeltat = 1.0F / (float) iSensorFS;
    6e10:	4b1c      	ldr	r3, [pc, #112]	; (6e84 <fRun_3DOF_Y_BASIC+0x188>)
    6e12:	4641      	mov	r1, r8
    6e14:	674b      	str	r3, [r1, #116]	; 0x74
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:101
	pthisSV->fdeltat = (float) iOverSampleRatio * pthisSV->fFastdeltat;
    6e16:	4b1c      	ldr	r3, [pc, #112]	; (6e88 <fRun_3DOF_Y_BASIC+0x18c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:104

	// initialize orientation estimates
	f3x3matrixAeqI(pthisSV->fR);
    6e18:	4640      	mov	r0, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:101

void fInit_3DOF_Y_BASIC(struct SV_3DOF_Y_BASIC *pthisSV, int16 iSensorFS, int16 iOverSampleRatio)
{
	// compute the sampling time intervals (secs)
	pthisSV->fFastdeltat = 1.0F / (float) iSensorFS;
	pthisSV->fdeltat = (float) iOverSampleRatio * pthisSV->fFastdeltat;
    6e1a:	678b      	str	r3, [r1, #120]	; 0x78
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:104

	// initialize orientation estimates
	f3x3matrixAeqI(pthisSV->fR);
    6e1c:	3014      	adds	r0, #20
    6e1e:	f006 fea9 	bl	db74 <f3x3matrixAeqI>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:105
	fqAeq1(&(pthisSV->fq));
    6e22:	4640      	mov	r0, r8
    6e24:	3038      	adds	r0, #56	; 0x38
    6e26:	f009 fbcd 	bl	105c4 <fqAeq1>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:108

	// update the default quaternion type supported to the most sophisticated
	if (globals.DefaultQuaternionPacketType < Q3G)
    6e2a:	4b18      	ldr	r3, [pc, #96]	; (6e8c <fRun_3DOF_Y_BASIC+0x190>)
    6e2c:	795a      	ldrb	r2, [r3, #5]
    6e2e:	2a01      	cmp	r2, #1
    6e30:	d904      	bls.n	6e3c <fRun_3DOF_Y_BASIC+0x140>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:112
		globals.QuaternionPacketType = globals.DefaultQuaternionPacketType = Q3G; 

	// clear the reset flag
	pthisSV->resetflag = false;
    6e32:	2200      	movs	r2, #0
    6e34:	237c      	movs	r3, #124	; 0x7c
    6e36:	4641      	mov	r1, r8
    6e38:	54ca      	strb	r2, [r1, r3]
    6e3a:	e7e2      	b.n	6e02 <fRun_3DOF_Y_BASIC+0x106>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:109
	f3x3matrixAeqI(pthisSV->fR);
	fqAeq1(&(pthisSV->fq));

	// update the default quaternion type supported to the most sophisticated
	if (globals.DefaultQuaternionPacketType < Q3G)
		globals.QuaternionPacketType = globals.DefaultQuaternionPacketType = Q3G; 
    6e3c:	2202      	movs	r2, #2
    6e3e:	715a      	strb	r2, [r3, #5]
    6e40:	711a      	strb	r2, [r3, #4]
    6e42:	e7f6      	b.n	6e32 <fRun_3DOF_Y_BASIC+0x136>
fRun_3DOF_Y_BASIC():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:489
	// *********************************************************************************

	if (ithisCoordSystem == NED)
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fR, &(pthisSV->fPhi), &(pthisSV->fThe), &(pthisSV->fPsi),
    6e44:	4641      	mov	r1, r8
    6e46:	310c      	adds	r1, #12
    6e48:	4642      	mov	r2, r8
    6e4a:	4643      	mov	r3, r8
    6e4c:	9100      	str	r1, [sp, #0]
    6e4e:	3104      	adds	r1, #4
    6e50:	9101      	str	r1, [sp, #4]
    6e52:	3204      	adds	r2, #4
    6e54:	3308      	adds	r3, #8
    6e56:	1c20      	adds	r0, r4, #0
    6e58:	4641      	mov	r1, r8
    6e5a:	f008 fb7d 	bl	f558 <fNEDAnglesDegFromRotationMatrix>
    6e5e:	e7d0      	b.n	6e02 <fRun_3DOF_Y_BASIC+0x106>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:495
				&(pthisSV->fRho), &(pthisSV->fChi));
	}
	else if (ithisCoordSystem == ANDROID)
	{
		// calculate the Android Euler angles
		fAndroidAnglesDegFromRotationMatrix(pthisSV->fR, &(pthisSV->fPhi), &(pthisSV->fThe), &(pthisSV->fPsi),
    6e60:	4641      	mov	r1, r8
    6e62:	310c      	adds	r1, #12
    6e64:	4642      	mov	r2, r8
    6e66:	4643      	mov	r3, r8
    6e68:	9100      	str	r1, [sp, #0]
    6e6a:	3104      	adds	r1, #4
    6e6c:	9101      	str	r1, [sp, #4]
    6e6e:	3204      	adds	r2, #4
    6e70:	3308      	adds	r3, #8
    6e72:	1c20      	adds	r0, r4, #0
    6e74:	4641      	mov	r1, r8
    6e76:	f008 fbe5 	bl	f644 <fAndroidAnglesDegFromRotationMatrix>
    6e7a:	e7c2      	b.n	6e02 <fRun_3DOF_Y_BASIC+0x106>
    6e7c:	2138      	movs	r1, #56	; 0x38
    6e7e:	468b      	mov	fp, r1
    6e80:	44c3      	add	fp, r8
    6e82:	e79e      	b.n	6dc2 <fRun_3DOF_Y_BASIC+0xc6>
    6e84:	3ba3d70a 	.word	0x3ba3d70a
    6e88:	3d23d70a 	.word	0x3d23d70a
    6e8c:	1fffe310 	.word	0x1fffe310

00006e90 <fRun_6DOF_GB_BASIC>:
fRun_6DOF_GB_BASIC():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:510
	return;
} // end fRun_3DOF_Y_BASIC

// 6DOF orientation function which calls ecompass and implements low pass filters
void fRun_6DOF_GB_BASIC(struct SV_6DOF_GB_BASIC *pthisSV, struct MagSensor *pthisMag, struct AccelSensor *pthisAccel, int32 loopcounter, int16 ithisCoordSystem)
{
    6e90:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e92:	4647      	mov	r7, r8
    6e94:	b480      	push	{r7}
    6e96:	b082      	sub	sp, #8
    6e98:	1c04      	adds	r4, r0, #0
    6e9a:	a808      	add	r0, sp, #32
    6e9c:	1c1d      	adds	r5, r3, #0
    6e9e:	2300      	movs	r3, #0
    6ea0:	5ec6      	ldrsh	r6, [r0, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:512
	// do a reset and return if requested
	if (pthisSV->resetflag)
    6ea2:	20a8      	movs	r0, #168	; 0xa8
    6ea4:	5620      	ldrsb	r0, [r4, r0]
    6ea6:	2800      	cmp	r0, #0
    6ea8:	d013      	beq.n	6ed2 <fRun_6DOF_GB_BASIC+0x42>
fInit_6DOF_GB_BASIC():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:120
} // end fInit_3DOF_Y_BASIC

void fInit_6DOF_GB_BASIC(struct SV_6DOF_GB_BASIC *pthisSV, float flpftimesecs, int16 iSensorFS, int16 iOverSampleRatio)
{
	// set algorithm sampling interval (typically 25Hz)
	pthisSV->fdeltat = (float) iOverSampleRatio / (float) iSensorFS;
    6eaa:	4a62      	ldr	r2, [pc, #392]	; (7034 <fRun_6DOF_GB_BASIC+0x1a4>)
    6eac:	23a0      	movs	r3, #160	; 0xa0
    6eae:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:124

	// set low pass filter constant with maximum value 1.0 (all pass) decreasing to 0.0 (increasing low pass)
	if (flpftimesecs > pthisSV->fdeltat)
		pthisSV->flpf = pthisSV->fdeltat / flpftimesecs;
    6eb0:	4a61      	ldr	r2, [pc, #388]	; (7038 <fRun_6DOF_GB_BASIC+0x1a8>)
    6eb2:	23a4      	movs	r3, #164	; 0xa4
    6eb4:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:129
	else
		pthisSV->flpf = 1.0F;

	// update the default quaternion type supported to the most sophisticated
	if (globals.DefaultQuaternionPacketType < Q6MA)
    6eb6:	4b61      	ldr	r3, [pc, #388]	; (703c <fRun_6DOF_GB_BASIC+0x1ac>)
    6eb8:	795a      	ldrb	r2, [r3, #5]
    6eba:	2a02      	cmp	r2, #2
    6ebc:	d802      	bhi.n	6ec4 <fRun_6DOF_GB_BASIC+0x34>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:130
		globals.QuaternionPacketType = globals.DefaultQuaternionPacketType = Q6MA; 
    6ebe:	2203      	movs	r2, #3
    6ec0:	715a      	strb	r2, [r3, #5]
    6ec2:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:133

	// clear the reset flag
	pthisSV->resetflag = false;
    6ec4:	2200      	movs	r2, #0
    6ec6:	23a8      	movs	r3, #168	; 0xa8
    6ec8:	54e2      	strb	r2, [r4, r3]
fRun_6DOF_GB_BASIC():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:567

	// low pass filter the geomagnetic inclination angle with a simple exponential filter
	fLPFScalar(&(pthisSV->fDelta), &(pthisSV->fLPDelta), pthisSV->flpf, loopcounter);

	return;
}  // end fRun_6DOF_GB_BASIC
    6eca:	b002      	add	sp, #8
    6ecc:	bc04      	pop	{r2}
    6ece:	4690      	mov	r8, r2
    6ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:519
		fInit_6DOF_GB_BASIC(pthisSV, 0.6F, SENSORFS, OVERSAMPLE_RATIO);
		return;
	}

	// call the eCompass algorithm to get the instantaneous orientation matrix and inclination angle
	if (ithisCoordSystem == NED)
    6ed2:	2e00      	cmp	r6, #0
    6ed4:	d040      	beq.n	6f58 <fRun_6DOF_GB_BASIC+0xc8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:524
	{
		// call the NED eCompass
		feCompassNED(pthisSV->fR, &(pthisSV->fDelta), pthisMag->fBc, pthisAccel->fGp);
	}
	else if  (ithisCoordSystem == ANDROID)
    6ed6:	2e01      	cmp	r6, #1
    6ed8:	d075      	beq.n	6fc6 <fRun_6DOF_GB_BASIC+0x136>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:532
		feCompassAndroid(pthisSV->fR, &(pthisSV->fDelta), pthisMag->fBc, pthisAccel->fGp);
	}
	else
	{
		// call the Win8 eCompass
		feCompassWin8(pthisSV->fR, &(pthisSV->fDelta), pthisMag->fBc, pthisAccel->fGp);
    6eda:	3130      	adds	r1, #48	; 0x30
    6edc:	1c26      	adds	r6, r4, #0
    6ede:	1c27      	adds	r7, r4, #0
    6ee0:	468c      	mov	ip, r1
    6ee2:	3764      	adds	r7, #100	; 0x64
    6ee4:	1c13      	adds	r3, r2, #0
    6ee6:	3698      	adds	r6, #152	; 0x98
    6ee8:	4662      	mov	r2, ip
    6eea:	3318      	adds	r3, #24
    6eec:	1c38      	adds	r0, r7, #0
    6eee:	1c31      	adds	r1, r6, #0
    6ef0:	f008 f9aa 	bl	f248 <feCompassWin8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:536
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    6ef4:	1c38      	adds	r0, r7, #0
    6ef6:	3724      	adds	r7, #36	; 0x24
    6ef8:	1c39      	adds	r1, r7, #0
    6efa:	f008 fda1 	bl	fa40 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:539

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    6efe:	23a4      	movs	r3, #164	; 0xa4
    6f00:	1c21      	adds	r1, r4, #0
    6f02:	58e2      	ldr	r2, [r4, r3]
    6f04:	1c38      	adds	r0, r7, #0
    6f06:	3154      	adds	r1, #84	; 0x54
    6f08:	3f50      	subs	r7, #80	; 0x50
    6f0a:	23a0      	movs	r3, #160	; 0xa0
    6f0c:	58e3      	ldr	r3, [r4, r3]
    6f0e:	9100      	str	r1, [sp, #0]
    6f10:	9501      	str	r5, [sp, #4]
    6f12:	1c39      	adds	r1, r7, #0
    6f14:	f008 ff20 	bl	fd58 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:540
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    6f18:	2314      	movs	r3, #20
    6f1a:	191b      	adds	r3, r3, r4
    6f1c:	1c18      	adds	r0, r3, #0
    6f1e:	1c39      	adds	r1, r7, #0
    6f20:	4698      	mov	r8, r3
    6f22:	f008 fe2d 	bl	fb80 <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:541
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    6f26:	1c21      	adds	r1, r4, #0
    6f28:	1c38      	adds	r0, r7, #0
    6f2a:	3148      	adds	r1, #72	; 0x48
    6f2c:	f008 feb8 	bl	fca0 <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:559
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}
	else
	{
		// calculate the Windows 8 Euler angles
		fWin8AnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    6f30:	1c23      	adds	r3, r4, #0
    6f32:	330c      	adds	r3, #12
    6f34:	9300      	str	r3, [sp, #0]
    6f36:	3304      	adds	r3, #4
    6f38:	9301      	str	r3, [sp, #4]
    6f3a:	1d22      	adds	r2, r4, #4
    6f3c:	4640      	mov	r0, r8
    6f3e:	1c21      	adds	r1, r4, #0
    6f40:	3b08      	subs	r3, #8
    6f42:	f008 fbf5 	bl	f730 <fWin8AnglesDegFromRotationMatrix>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:564
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}

	// low pass filter the geomagnetic inclination angle with a simple exponential filter
	fLPFScalar(&(pthisSV->fDelta), &(pthisSV->fLPDelta), pthisSV->flpf, loopcounter);
    6f46:	1c21      	adds	r1, r4, #0
    6f48:	23a4      	movs	r3, #164	; 0xa4
    6f4a:	58e2      	ldr	r2, [r4, r3]
    6f4c:	319c      	adds	r1, #156	; 0x9c
    6f4e:	1c30      	adds	r0, r6, #0
    6f50:	1c2b      	adds	r3, r5, #0
    6f52:	f009 f977 	bl	10244 <fLPFScalar>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:566

	return;
    6f56:	e7b8      	b.n	6eca <fRun_6DOF_GB_BASIC+0x3a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:522

	// call the eCompass algorithm to get the instantaneous orientation matrix and inclination angle
	if (ithisCoordSystem == NED)
	{
		// call the NED eCompass
		feCompassNED(pthisSV->fR, &(pthisSV->fDelta), pthisMag->fBc, pthisAccel->fGp);
    6f58:	1c26      	adds	r6, r4, #0
    6f5a:	3130      	adds	r1, #48	; 0x30
    6f5c:	1c27      	adds	r7, r4, #0
    6f5e:	468c      	mov	ip, r1
    6f60:	3764      	adds	r7, #100	; 0x64
    6f62:	3698      	adds	r6, #152	; 0x98
    6f64:	1c13      	adds	r3, r2, #0
    6f66:	3318      	adds	r3, #24
    6f68:	4662      	mov	r2, ip
    6f6a:	1c38      	adds	r0, r7, #0
    6f6c:	1c31      	adds	r1, r6, #0
    6f6e:	f007 fe73 	bl	ec58 <feCompassNED>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:536
		// call the Win8 eCompass
		feCompassWin8(pthisSV->fR, &(pthisSV->fDelta), pthisMag->fBc, pthisAccel->fGp);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    6f72:	1c38      	adds	r0, r7, #0
    6f74:	3724      	adds	r7, #36	; 0x24
    6f76:	1c39      	adds	r1, r7, #0
    6f78:	f008 fd62 	bl	fa40 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:539

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    6f7c:	23a4      	movs	r3, #164	; 0xa4
    6f7e:	1c21      	adds	r1, r4, #0
    6f80:	58e2      	ldr	r2, [r4, r3]
    6f82:	1c38      	adds	r0, r7, #0
    6f84:	3154      	adds	r1, #84	; 0x54
    6f86:	3f50      	subs	r7, #80	; 0x50
    6f88:	23a0      	movs	r3, #160	; 0xa0
    6f8a:	58e3      	ldr	r3, [r4, r3]
    6f8c:	9100      	str	r1, [sp, #0]
    6f8e:	9501      	str	r5, [sp, #4]
    6f90:	1c39      	adds	r1, r7, #0
    6f92:	f008 fee1 	bl	fd58 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:540
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    6f96:	2314      	movs	r3, #20
    6f98:	191b      	adds	r3, r3, r4
    6f9a:	1c18      	adds	r0, r3, #0
    6f9c:	1c39      	adds	r1, r7, #0
    6f9e:	4698      	mov	r8, r3
    6fa0:	f008 fdee 	bl	fb80 <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:541
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    6fa4:	1c21      	adds	r1, r4, #0
    6fa6:	1c38      	adds	r0, r7, #0
    6fa8:	3148      	adds	r1, #72	; 0x48
    6faa:	f008 fe79 	bl	fca0 <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:547

	// compute the low pass filtered Euler angles
	if (ithisCoordSystem == NED)
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    6fae:	1c23      	adds	r3, r4, #0
    6fb0:	330c      	adds	r3, #12
    6fb2:	9300      	str	r3, [sp, #0]
    6fb4:	3304      	adds	r3, #4
    6fb6:	9301      	str	r3, [sp, #4]
    6fb8:	1d22      	adds	r2, r4, #4
    6fba:	4640      	mov	r0, r8
    6fbc:	1c21      	adds	r1, r4, #0
    6fbe:	3b08      	subs	r3, #8
    6fc0:	f008 faca 	bl	f558 <fNEDAnglesDegFromRotationMatrix>
    6fc4:	e7bf      	b.n	6f46 <fRun_6DOF_GB_BASIC+0xb6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:527
		feCompassNED(pthisSV->fR, &(pthisSV->fDelta), pthisMag->fBc, pthisAccel->fGp);
	}
	else if  (ithisCoordSystem == ANDROID)
	{
		// call the Android eCompass
		feCompassAndroid(pthisSV->fR, &(pthisSV->fDelta), pthisMag->fBc, pthisAccel->fGp);
    6fc6:	1c26      	adds	r6, r4, #0
    6fc8:	3130      	adds	r1, #48	; 0x30
    6fca:	1c27      	adds	r7, r4, #0
    6fcc:	468c      	mov	ip, r1
    6fce:	3764      	adds	r7, #100	; 0x64
    6fd0:	3698      	adds	r6, #152	; 0x98
    6fd2:	1c13      	adds	r3, r2, #0
    6fd4:	3318      	adds	r3, #24
    6fd6:	4662      	mov	r2, ip
    6fd8:	1c38      	adds	r0, r7, #0
    6fda:	1c31      	adds	r1, r6, #0
    6fdc:	f007 ffb8 	bl	ef50 <feCompassAndroid>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:536
		// call the Win8 eCompass
		feCompassWin8(pthisSV->fR, &(pthisSV->fDelta), pthisMag->fBc, pthisAccel->fGp);
	}

	// compute the instanteneous quaternion from the instantaneous rotation matrix
	fQuaternionFromRotationMatrix(pthisSV->fR, &(pthisSV->fq));
    6fe0:	1c38      	adds	r0, r7, #0
    6fe2:	3724      	adds	r7, #36	; 0x24
    6fe4:	1c39      	adds	r1, r7, #0
    6fe6:	f008 fd2b 	bl	fa40 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:539

	// low pass filter the orientation quaternion and compute the low pass rotation matrix
	fLPFOrientationQuaternion(&(pthisSV->fq), &(pthisSV->fLPq), pthisSV->flpf, pthisSV->fdeltat, pthisSV->fOmega, loopcounter);
    6fea:	23a4      	movs	r3, #164	; 0xa4
    6fec:	1c21      	adds	r1, r4, #0
    6fee:	58e2      	ldr	r2, [r4, r3]
    6ff0:	1c38      	adds	r0, r7, #0
    6ff2:	3154      	adds	r1, #84	; 0x54
    6ff4:	3f50      	subs	r7, #80	; 0x50
    6ff6:	23a0      	movs	r3, #160	; 0xa0
    6ff8:	58e3      	ldr	r3, [r4, r3]
    6ffa:	9100      	str	r1, [sp, #0]
    6ffc:	9501      	str	r5, [sp, #4]
    6ffe:	1c39      	adds	r1, r7, #0
    7000:	f008 feaa 	bl	fd58 <fLPFOrientationQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:540
	fRotationMatrixFromQuaternion(pthisSV->fLPR, &(pthisSV->fLPq));
    7004:	2314      	movs	r3, #20
    7006:	191b      	adds	r3, r3, r4
    7008:	1c18      	adds	r0, r3, #0
    700a:	1c39      	adds	r1, r7, #0
    700c:	4698      	mov	r8, r3
    700e:	f008 fdb7 	bl	fb80 <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:541
	fRotationVectorDegFromQuaternion(&(pthisSV->fLPq), pthisSV->fLPRVec);
    7012:	1c21      	adds	r1, r4, #0
    7014:	1c38      	adds	r0, r7, #0
    7016:	3148      	adds	r1, #72	; 0x48
    7018:	f008 fe42 	bl	fca0 <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:553
				&(pthisSV->fLPRho), &(pthisSV->fLPChi));
	}
	else if (ithisCoordSystem == ANDROID)
	{
		// calculate the Android Euler angles
		fAndroidAnglesDegFromRotationMatrix(pthisSV->fLPR, &(pthisSV->fLPPhi), &(pthisSV->fLPThe), &(pthisSV->fLPPsi),
    701c:	1c23      	adds	r3, r4, #0
    701e:	330c      	adds	r3, #12
    7020:	9300      	str	r3, [sp, #0]
    7022:	3304      	adds	r3, #4
    7024:	9301      	str	r3, [sp, #4]
    7026:	1d22      	adds	r2, r4, #4
    7028:	4640      	mov	r0, r8
    702a:	1c21      	adds	r1, r4, #0
    702c:	3b08      	subs	r3, #8
    702e:	f008 fb09 	bl	f644 <fAndroidAnglesDegFromRotationMatrix>
    7032:	e788      	b.n	6f46 <fRun_6DOF_GB_BASIC+0xb6>
    7034:	3d23d70a 	.word	0x3d23d70a
    7038:	3d888888 	.word	0x3d888888
    703c:	1fffe310 	.word	0x1fffe310

00007040 <fRun_6DOF_GY_KALMAN>:
fRun_6DOF_GY_KALMAN():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:572
}  // end fRun_6DOF_GB_BASIC

// 6DOF accel + gyro Kalman filter algorithm 
void fRun_6DOF_GY_KALMAN(struct SV_6DOF_GY_KALMAN *pthisSV, struct AccelSensor *pthisAccel, struct GyroSensor *pthisGyro,
		int16 ithisCoordSystem, int16 iOverSampleRatio)
{	
    7040:	b5f0      	push	{r4, r5, r6, r7, lr}
    7042:	465f      	mov	r7, fp
    7044:	464d      	mov	r5, r9
    7046:	4644      	mov	r4, r8
    7048:	4656      	mov	r6, sl
    704a:	b4f0      	push	{r4, r5, r6, r7}
    704c:	b0b5      	sub	sp, #212	; 0xd4
    704e:	930e      	str	r3, [sp, #56]	; 0x38
    7050:	ab3e      	add	r3, sp, #248	; 0xf8
    7052:	4683      	mov	fp, r0
    7054:	9107      	str	r1, [sp, #28]
    7056:	2100      	movs	r1, #0
    7058:	5e58      	ldrsh	r0, [r3, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:600
	int8 iColInd[3];
	int8 iRowInd[3];
	int8 iPivot[3];

	// do a reset and return if requested
	if (pthisSV->resetflag)
    705a:	4be9      	ldr	r3, [pc, #932]	; (7400 <fRun_6DOF_GY_KALMAN+0x3c0>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:572
}  // end fRun_6DOF_GB_BASIC

// 6DOF accel + gyro Kalman filter algorithm 
void fRun_6DOF_GY_KALMAN(struct SV_6DOF_GY_KALMAN *pthisSV, struct AccelSensor *pthisAccel, struct GyroSensor *pthisGyro,
		int16 ithisCoordSystem, int16 iOverSampleRatio)
{	
    705c:	4690      	mov	r8, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:600
	int8 iColInd[3];
	int8 iRowInd[3];
	int8 iPivot[3];

	// do a reset and return if requested
	if (pthisSV->resetflag)
    705e:	465a      	mov	r2, fp
    7060:	56d3      	ldrsb	r3, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:572
}  // end fRun_6DOF_GB_BASIC

// 6DOF accel + gyro Kalman filter algorithm 
void fRun_6DOF_GY_KALMAN(struct SV_6DOF_GY_KALMAN *pthisSV, struct AccelSensor *pthisAccel, struct GyroSensor *pthisGyro,
		int16 ithisCoordSystem, int16 iOverSampleRatio)
{	
    7062:	4681      	mov	r9, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:600
	int8 iColInd[3];
	int8 iRowInd[3];
	int8 iPivot[3];

	// do a reset and return if requested
	if (pthisSV->resetflag)
    7064:	2b00      	cmp	r3, #0
    7066:	d001      	beq.n	706c <fRun_6DOF_GY_KALMAN+0x2c>
    7068:	f000 ffc2 	bl	7ff0 <fRun_6DOF_GY_KALMAN+0xfb0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:607
		fInit_6DOF_GY_KALMAN(pthisSV, SENSORFS, OVERSAMPLE_RATIO);
		return;
	}

	// do a once-only orientation lock to accelerometer tilt 
	if (!pthisSV->iFirstOrientationLock)
    706c:	4be5      	ldr	r3, [pc, #916]	; (7404 <fRun_6DOF_GY_KALMAN+0x3c4>)
    706e:	465c      	mov	r4, fp
    7070:	5ee3      	ldrsh	r3, [r4, r3]
    7072:	2b00      	cmp	r3, #0
    7074:	d11c      	bne.n	70b0 <fRun_6DOF_GY_KALMAN+0x70>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:610
	{
		// get the 3DOF orientation matrix and initial inclination angle
		if (ithisCoordSystem == NED)
    7076:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    7078:	2c00      	cmp	r4, #0
    707a:	d101      	bne.n	7080 <fRun_6DOF_GY_KALMAN+0x40>
    707c:	f000 ffc1 	bl	8002 <PSP_CNFG_MQX_KERNEL_LOGGING+0x2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:615
		{
			// call NED tilt function
			f3DOFTiltNED(pthisSV->fRPl, pthisAccel->fGpFast);
		}
		else if (ithisCoordSystem == ANDROID)
    7080:	2c01      	cmp	r4, #1
    7082:	d101      	bne.n	7088 <fRun_6DOF_GY_KALMAN+0x48>
    7084:	f001 f814 	bl	80b0 <PSP_CNFG_MQX_KERNEL_LOGGING+0xb0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:623
			f3DOFTiltAndroid(pthisSV->fRPl, pthisAccel->fGpFast);
		}
		else
		{
			// call Windows 8 tilt function
			f3DOFTiltWin8(pthisSV->fRPl, pthisAccel->fGpFast);
    7088:	465c      	mov	r4, fp
    708a:	9907      	ldr	r1, [sp, #28]
    708c:	3414      	adds	r4, #20
    708e:	1c20      	adds	r0, r4, #0
    7090:	310c      	adds	r1, #12
    7092:	940d      	str	r4, [sp, #52]	; 0x34
    7094:	f007 fc86 	bl	e9a4 <f3DOFTiltWin8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:627
		}

		// get the orientation quaternion from the orientation matrix
		fQuaternionFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fqPl));
    7098:	465c      	mov	r4, fp
    709a:	3438      	adds	r4, #56	; 0x38
    709c:	980d      	ldr	r0, [sp, #52]	; 0x34
    709e:	1c21      	adds	r1, r4, #0
    70a0:	940b      	str	r4, [sp, #44]	; 0x2c
    70a2:	f008 fccd 	bl	fa40 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:630

		// set the orientation lock flag so this initial alignment is only performed once
		pthisSV->iFirstOrientationLock = 1;
    70a6:	4bd7      	ldr	r3, [pc, #860]	; (7404 <fRun_6DOF_GY_KALMAN+0x3c4>)
    70a8:	2201      	movs	r2, #1
    70aa:	4658      	mov	r0, fp
    70ac:	52c2      	strh	r2, [r0, r3]
    70ae:	e004      	b.n	70ba <fRun_6DOF_GY_KALMAN+0x7a>
    70b0:	465c      	mov	r4, fp
    70b2:	3414      	adds	r4, #20
    70b4:	940d      	str	r4, [sp, #52]	; 0x34
    70b6:	3424      	adds	r4, #36	; 0x24
    70b8:	940b      	str	r4, [sp, #44]	; 0x2c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:643 (discriminator 1)
	// omega[k] = yG[k] - b-[k] = yG[k] - b+[k-1] (deg/s)
	// this involves a small angle approximation but the resulting angular velocity is
	// only computed for transmission over bluetooth and not used for orientation determination.
	for (i = X; i <= Z; i++)
	{
		pthisSV->fOmega[i] = pthisGyro->fYp[i] - pthisSV->fbPl[i];
    70ba:	465a      	mov	r2, fp
    70bc:	4641      	mov	r1, r8
    70be:	68c8      	ldr	r0, [r1, #12]
    70c0:	6e51      	ldr	r1, [r2, #100]	; 0x64
    70c2:	f7f9 ff91 	bl	fe8 <__aeabi_fsub>
    70c6:	4644      	mov	r4, r8
    70c8:	465b      	mov	r3, fp
    70ca:	6e99      	ldr	r1, [r3, #104]	; 0x68
    70cc:	6558      	str	r0, [r3, #84]	; 0x54
    70ce:	6920      	ldr	r0, [r4, #16]
    70d0:	f7f9 ff8a 	bl	fe8 <__aeabi_fsub>
    70d4:	4659      	mov	r1, fp
    70d6:	6588      	str	r0, [r1, #88]	; 0x58
    70d8:	6960      	ldr	r0, [r4, #20]
    70da:	6ec9      	ldr	r1, [r1, #108]	; 0x6c
    70dc:	f7f9 ff84 	bl	fe8 <__aeabi_fsub>
    70e0:	465a      	mov	r2, fp
    70e2:	65d0      	str	r0, [r2, #92]	; 0x5c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:647 (discriminator 1)
	}

	// initialize the a priori orientation quaternion to the a posteriori orientation estimate
	pthisSV->fqMi = pthisSV->fqPl;
    70e4:	32b8      	adds	r2, #184	; 0xb8
    70e6:	9208      	str	r2, [sp, #32]
    70e8:	1c13      	adds	r3, r2, #0
    70ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    70ec:	ca13      	ldmia	r2!, {r0, r1, r4}
    70ee:	c313      	stmia	r3!, {r0, r1, r4}
    70f0:	6812      	ldr	r2, [r2, #0]
    70f2:	465c      	mov	r4, fp
    70f4:	601a      	str	r2, [r3, #0]
    70f6:	34c8      	adds	r4, #200	; 0xc8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:650 (discriminator 1)

	// integrate the buffered high frequency (typically 200Hz) gyro readings
	for (j = 0; j < iOverSampleRatio; j++)
    70f8:	464a      	mov	r2, r9
    70fa:	9406      	str	r4, [sp, #24]
    70fc:	2a00      	cmp	r2, #0
    70fe:	dd4c      	ble.n	719a <fRun_6DOF_GY_KALMAN+0x15a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:655
	{
		// compute the incremental fast (typically 200Hz) rotation vector rvec (deg)
		for (i = X; i <= Z; i++)
		{
			rvec[i] = (((float)pthisGyro->iYpFast[j][i] * pthisGyro->fDegPerSecPerCount) - pthisSV->fbPl[i]) * pthisSV->fFastdeltat;
    7100:	48c1      	ldr	r0, [pc, #772]	; (7408 <fRun_6DOF_GY_KALMAN+0x3c8>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:650

	// initialize the a priori orientation quaternion to the a posteriori orientation estimate
	pthisSV->fqMi = pthisSV->fqPl;

	// integrate the buffered high frequency (typically 200Hz) gyro readings
	for (j = 0; j < iOverSampleRatio; j++)
    7102:	2700      	movs	r7, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:655
	{
		// compute the incremental fast (typically 200Hz) rotation vector rvec (deg)
		for (i = X; i <= Z; i++)
		{
			rvec[i] = (((float)pthisGyro->iYpFast[j][i] * pthisGyro->fDegPerSecPerCount) - pthisSV->fbPl[i]) * pthisSV->fFastdeltat;
    7104:	465c      	mov	r4, fp
    7106:	2300      	movs	r3, #0
    7108:	46cb      	mov	fp, r9
    710a:	4682      	mov	sl, r0
    710c:	46b9      	mov	r9, r7
    710e:	005f      	lsls	r7, r3, #1
    7110:	18ff      	adds	r7, r7, r3
    7112:	4641      	mov	r1, r8
    7114:	007f      	lsls	r7, r7, #1
    7116:	698e      	ldr	r6, [r1, #24]
    7118:	4447      	add	r7, r8
    711a:	4652      	mov	r2, sl
    711c:	231c      	movs	r3, #28
    711e:	5ef8      	ldrsh	r0, [r7, r3]
    7120:	58a5      	ldr	r5, [r4, r2]
    7122:	f7fa f8f7 	bl	1314 <__aeabi_i2f>
    7126:	1c31      	adds	r1, r6, #0
    7128:	f7f9 fe34 	bl	d94 <__aeabi_fmul>
    712c:	6e61      	ldr	r1, [r4, #100]	; 0x64
    712e:	f7f9 ff5b 	bl	fe8 <__aeabi_fsub>
    7132:	1c29      	adds	r1, r5, #0
    7134:	f7f9 fe2e 	bl	d94 <__aeabi_fmul>
    7138:	9013      	str	r0, [sp, #76]	; 0x4c
    713a:	211e      	movs	r1, #30
    713c:	5e78      	ldrsh	r0, [r7, r1]
    713e:	f7fa f8e9 	bl	1314 <__aeabi_i2f>
    7142:	1c31      	adds	r1, r6, #0
    7144:	f7f9 fe26 	bl	d94 <__aeabi_fmul>
    7148:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    714a:	f7f9 ff4d 	bl	fe8 <__aeabi_fsub>
    714e:	1c29      	adds	r1, r5, #0
    7150:	f7f9 fe20 	bl	d94 <__aeabi_fmul>
    7154:	9014      	str	r0, [sp, #80]	; 0x50
    7156:	2220      	movs	r2, #32
    7158:	5eb8      	ldrsh	r0, [r7, r2]
    715a:	f7fa f8db 	bl	1314 <__aeabi_i2f>
    715e:	1c01      	adds	r1, r0, #0
    7160:	1c30      	adds	r0, r6, #0
    7162:	f7f9 fe17 	bl	d94 <__aeabi_fmul>
    7166:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    7168:	f7f9 ff3e 	bl	fe8 <__aeabi_fsub>
    716c:	1c01      	adds	r1, r0, #0
    716e:	1c28      	adds	r0, r5, #0
    7170:	f7f9 fe10 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:659
		}

		// compute the incremental quaternion fDeltaq from the rotation vector
		fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), rvec, 1.0F);
    7174:	22fe      	movs	r2, #254	; 0xfe
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:655
	for (j = 0; j < iOverSampleRatio; j++)
	{
		// compute the incremental fast (typically 200Hz) rotation vector rvec (deg)
		for (i = X; i <= Z; i++)
		{
			rvec[i] = (((float)pthisGyro->iYpFast[j][i] * pthisGyro->fDegPerSecPerCount) - pthisSV->fbPl[i]) * pthisSV->fFastdeltat;
    7176:	9015      	str	r0, [sp, #84]	; 0x54
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:659
		}

		// compute the incremental quaternion fDeltaq from the rotation vector
		fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), rvec, 1.0F);
    7178:	a913      	add	r1, sp, #76	; 0x4c
    717a:	9806      	ldr	r0, [sp, #24]
    717c:	0592      	lsls	r2, r2, #22
    717e:	f008 fb95 	bl	f8ac <fQuaternionFromRotationVectorDeg>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:663

		// incrementally rotate the a priori orientation quaternion fqMi
		// the a posteriori orientation is re-normalized later so this update is stable
		qAeqAxB(&(pthisSV->fqMi), &(pthisSV->fDeltaq));
    7182:	9808      	ldr	r0, [sp, #32]
    7184:	9906      	ldr	r1, [sp, #24]
    7186:	f009 f917 	bl	103b8 <qAeqAxB>
    718a:	464b      	mov	r3, r9
    718c:	3301      	adds	r3, #1
    718e:	b2db      	uxtb	r3, r3
    7190:	4699      	mov	r9, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:650

	// initialize the a priori orientation quaternion to the a posteriori orientation estimate
	pthisSV->fqMi = pthisSV->fqPl;

	// integrate the buffered high frequency (typically 200Hz) gyro readings
	for (j = 0; j < iOverSampleRatio; j++)
    7192:	b25b      	sxtb	r3, r3
    7194:	455b      	cmp	r3, fp
    7196:	dbba      	blt.n	710e <fRun_6DOF_GY_KALMAN+0xce>
    7198:	46a3      	mov	fp, r4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:667
		// the a posteriori orientation is re-normalized later so this update is stable
		qAeqAxB(&(pthisSV->fqMi), &(pthisSV->fDeltaq));
	}

	// get the a priori rotation matrix from the a priori quaternion
	fRotationMatrixFromQuaternion(pthisSV->fRMi, &(pthisSV->fqMi));
    719a:	4658      	mov	r0, fp
    719c:	3094      	adds	r0, #148	; 0x94
    719e:	9908      	ldr	r1, [sp, #32]
    71a0:	f008 fcee 	bl	fb80 <fRotationMatrixFromQuaternion>
    71a4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:686
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    71a6:	239c      	movs	r3, #156	; 0x9c
    71a8:	2c00      	cmp	r4, #0
    71aa:	d101      	bne.n	71b0 <fRun_6DOF_GY_KALMAN+0x170>
    71ac:	f000 fed5 	bl	7f5a <fRun_6DOF_GY_KALMAN+0xf1a>
    71b0:	4658      	mov	r0, fp
    71b2:	2c02      	cmp	r4, #2
    71b4:	d101      	bne.n	71ba <fRun_6DOF_GY_KALMAN+0x17a>
    71b6:	f000 ff2e 	bl	8016 <PSP_CNFG_MQX_KERNEL_LOGGING+0x16>
    71ba:	58c4      	ldr	r4, [r0, r3]
    71bc:	2180      	movs	r1, #128	; 0x80
    71be:	0609      	lsls	r1, r1, #24
    71c0:	1864      	adds	r4, r4, r1
    71c2:	23fc      	movs	r3, #252	; 0xfc
    71c4:	50c4      	str	r4, [r0, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    71c6:	21fc      	movs	r1, #252	; 0xfc
    71c8:	23d8      	movs	r3, #216	; 0xd8
    71ca:	58c0      	ldr	r0, [r0, r3]
    71cc:	0589      	lsls	r1, r1, #22
    71ce:	f7f9 fde1 	bl	d94 <__aeabi_fmul>
    71d2:	2384      	movs	r3, #132	; 0x84
    71d4:	465a      	mov	r2, fp
    71d6:	005b      	lsls	r3, r3, #1
    71d8:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:701
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
		}
		else
		{
			// Android has negative sign for gravity: y = a - g, g = -y + a
			pthisSV->fgErrSeMi[i] = -pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    71da:	9b07      	ldr	r3, [sp, #28]
    71dc:	68d9      	ldr	r1, [r3, #12]
    71de:	f7f9 ff03 	bl	fe8 <__aeabi_fsub>
    71e2:	1c21      	adds	r1, r4, #0
    71e4:	f7f9 ff00 	bl	fe8 <__aeabi_fsub>
    71e8:	465c      	mov	r4, fp
    71ea:	23f0      	movs	r3, #240	; 0xf0
    71ec:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:686
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    71ee:	23a8      	movs	r3, #168	; 0xa8
    71f0:	58e4      	ldr	r4, [r4, r3]
    71f2:	2080      	movs	r0, #128	; 0x80
    71f4:	0600      	lsls	r0, r0, #24
    71f6:	2380      	movs	r3, #128	; 0x80
    71f8:	1824      	adds	r4, r4, r0
    71fa:	4659      	mov	r1, fp
    71fc:	005b      	lsls	r3, r3, #1
    71fe:	50cc      	str	r4, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    7200:	23dc      	movs	r3, #220	; 0xdc
    7202:	58c8      	ldr	r0, [r1, r3]
    7204:	21fc      	movs	r1, #252	; 0xfc
    7206:	0589      	lsls	r1, r1, #22
    7208:	f7f9 fdc4 	bl	d94 <__aeabi_fmul>
    720c:	2386      	movs	r3, #134	; 0x86
    720e:	465a      	mov	r2, fp
    7210:	005b      	lsls	r3, r3, #1
    7212:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:701
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
		}
		else
		{
			// Android has negative sign for gravity: y = a - g, g = -y + a
			pthisSV->fgErrSeMi[i] = -pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    7214:	9b07      	ldr	r3, [sp, #28]
    7216:	6919      	ldr	r1, [r3, #16]
    7218:	f7f9 fee6 	bl	fe8 <__aeabi_fsub>
    721c:	1c21      	adds	r1, r4, #0
    721e:	f7f9 fee3 	bl	fe8 <__aeabi_fsub>
    7222:	465c      	mov	r4, fp
    7224:	23f4      	movs	r3, #244	; 0xf4
    7226:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:686
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    7228:	23b4      	movs	r3, #180	; 0xb4
    722a:	58e4      	ldr	r4, [r4, r3]
    722c:	2080      	movs	r0, #128	; 0x80
    722e:	0600      	lsls	r0, r0, #24
    7230:	2382      	movs	r3, #130	; 0x82
    7232:	4659      	mov	r1, fp
    7234:	1824      	adds	r4, r4, r0
    7236:	005b      	lsls	r3, r3, #1
    7238:	50cc      	str	r4, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    723a:	23e0      	movs	r3, #224	; 0xe0
    723c:	58c8      	ldr	r0, [r1, r3]
    723e:	21fc      	movs	r1, #252	; 0xfc
    7240:	0589      	lsls	r1, r1, #22
    7242:	f7f9 fda7 	bl	d94 <__aeabi_fmul>
    7246:	2388      	movs	r3, #136	; 0x88
    7248:	005b      	lsls	r3, r3, #1
    724a:	465a      	mov	r2, fp
    724c:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:701
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
		}
		else
		{
			// Android has negative sign for gravity: y = a - g, g = -y + a
			pthisSV->fgErrSeMi[i] = -pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    724e:	9b07      	ldr	r3, [sp, #28]
    7250:	6959      	ldr	r1, [r3, #20]
    7252:	f7f9 fec9 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    7256:	1c21      	adds	r1, r4, #0
    7258:	f7f9 fec6 	bl	fe8 <__aeabi_fsub>
    725c:	465c      	mov	r4, fp
    725e:	23f8      	movs	r3, #248	; 0xf8
    7260:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:710
	// *********************************************************************************
	// update variable elements of measurement matrix C
	// *********************************************************************************

	// update measurement matrix C (3x9) with -alpha(g-)x from gyro (g, sensor frame)
	pthisSV->fC3x9[0][1] = FDEGTORAD * pthisSV->fgSeGyMi[Z];
    7262:	2382      	movs	r3, #130	; 0x82
    7264:	005b      	lsls	r3, r3, #1
    7266:	58e0      	ldr	r0, [r4, r3]
    7268:	4968      	ldr	r1, [pc, #416]	; (740c <fRun_6DOF_GY_KALMAN+0x3cc>)
    726a:	f7f9 fd93 	bl	d94 <__aeabi_fmul>
    726e:	2382      	movs	r3, #130	; 0x82
    7270:	465a      	mov	r2, fp
    7272:	00db      	lsls	r3, r3, #3
    7274:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:711
	pthisSV->fC3x9[0][2] = -FDEGTORAD * pthisSV->fgSeGyMi[Y];
    7276:	2380      	movs	r3, #128	; 0x80
    7278:	005b      	lsls	r3, r3, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:710
	// *********************************************************************************
	// update variable elements of measurement matrix C
	// *********************************************************************************

	// update measurement matrix C (3x9) with -alpha(g-)x from gyro (g, sensor frame)
	pthisSV->fC3x9[0][1] = FDEGTORAD * pthisSV->fgSeGyMi[Z];
    727a:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:711
	pthisSV->fC3x9[0][2] = -FDEGTORAD * pthisSV->fgSeGyMi[Y];
    727c:	4964      	ldr	r1, [pc, #400]	; (7410 <fRun_6DOF_GY_KALMAN+0x3d0>)
    727e:	58e0      	ldr	r0, [r4, r3]
    7280:	f7f9 fd88 	bl	d94 <__aeabi_fmul>
    7284:	4b63      	ldr	r3, [pc, #396]	; (7414 <fRun_6DOF_GY_KALMAN+0x3d4>)
    7286:	465c      	mov	r4, fp
    7288:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:712
	pthisSV->fC3x9[1][2] = FDEGTORAD * pthisSV->fgSeGyMi[X];
    728a:	23fc      	movs	r3, #252	; 0xfc
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:711
	// update variable elements of measurement matrix C
	// *********************************************************************************

	// update measurement matrix C (3x9) with -alpha(g-)x from gyro (g, sensor frame)
	pthisSV->fC3x9[0][1] = FDEGTORAD * pthisSV->fgSeGyMi[Z];
	pthisSV->fC3x9[0][2] = -FDEGTORAD * pthisSV->fgSeGyMi[Y];
    728c:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:712
	pthisSV->fC3x9[1][2] = FDEGTORAD * pthisSV->fgSeGyMi[X];
    728e:	495f      	ldr	r1, [pc, #380]	; (740c <fRun_6DOF_GY_KALMAN+0x3cc>)
    7290:	58e0      	ldr	r0, [r4, r3]
    7292:	f7f9 fd7f 	bl	d94 <__aeabi_fmul>
    7296:	2387      	movs	r3, #135	; 0x87
    7298:	00db      	lsls	r3, r3, #3
    729a:	50e0      	str	r0, [r4, r3]
    729c:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:713
	pthisSV->fC3x9[1][0] = -pthisSV->fC3x9[0][1];
    729e:	2080      	movs	r0, #128	; 0x80
    72a0:	0600      	lsls	r0, r0, #24
    72a2:	2386      	movs	r3, #134	; 0x86
    72a4:	183a      	adds	r2, r7, r0
    72a6:	00db      	lsls	r3, r3, #3
    72a8:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:714
	pthisSV->fC3x9[2][0] = -pthisSV->fC3x9[0][2];
    72aa:	4b5b      	ldr	r3, [pc, #364]	; (7418 <fRun_6DOF_GY_KALMAN+0x3d8>)
    72ac:	1832      	adds	r2, r6, r0
    72ae:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:715
	pthisSV->fC3x9[2][1] = -pthisSV->fC3x9[1][2];
    72b0:	238b      	movs	r3, #139	; 0x8b
    72b2:	182a      	adds	r2, r5, r0
    72b4:	00db      	lsls	r3, r3, #3
    72b6:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:716
	pthisSV->fC3x9[0][4] = -pthisSV->fdeltat * pthisSV->fC3x9[0][1];
    72b8:	2390      	movs	r3, #144	; 0x90
    72ba:	00db      	lsls	r3, r3, #3
    72bc:	58e4      	ldr	r4, [r4, r3]
    72be:	1824      	adds	r4, r4, r0
    72c0:	1c21      	adds	r1, r4, #0
    72c2:	1c38      	adds	r0, r7, #0
    72c4:	f7f9 fd66 	bl	d94 <__aeabi_fmul>
    72c8:	4b54      	ldr	r3, [pc, #336]	; (741c <fRun_6DOF_GY_KALMAN+0x3dc>)
    72ca:	4659      	mov	r1, fp
    72cc:	50c8      	str	r0, [r1, r3]
    72ce:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:717
	pthisSV->fC3x9[0][5] = -pthisSV->fdeltat * pthisSV->fC3x9[0][2];
    72d0:	1c21      	adds	r1, r4, #0
    72d2:	1c30      	adds	r0, r6, #0
    72d4:	f7f9 fd5e 	bl	d94 <__aeabi_fmul>
    72d8:	2384      	movs	r3, #132	; 0x84
    72da:	00db      	lsls	r3, r3, #3
    72dc:	465a      	mov	r2, fp
    72de:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:718
	pthisSV->fC3x9[1][5] = -pthisSV->fdeltat * pthisSV->fC3x9[1][2];
    72e0:	1c21      	adds	r1, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:717
	pthisSV->fC3x9[1][2] = FDEGTORAD * pthisSV->fgSeGyMi[X];
	pthisSV->fC3x9[1][0] = -pthisSV->fC3x9[0][1];
	pthisSV->fC3x9[2][0] = -pthisSV->fC3x9[0][2];
	pthisSV->fC3x9[2][1] = -pthisSV->fC3x9[1][2];
	pthisSV->fC3x9[0][4] = -pthisSV->fdeltat * pthisSV->fC3x9[0][1];
	pthisSV->fC3x9[0][5] = -pthisSV->fdeltat * pthisSV->fC3x9[0][2];
    72e2:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:718
	pthisSV->fC3x9[1][5] = -pthisSV->fdeltat * pthisSV->fC3x9[1][2];
    72e4:	1c28      	adds	r0, r5, #0
    72e6:	f7f9 fd55 	bl	d94 <__aeabi_fmul>
    72ea:	4b4d      	ldr	r3, [pc, #308]	; (7420 <fRun_6DOF_GY_KALMAN+0x3e0>)
    72ec:	465c      	mov	r4, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:719
	pthisSV->fC3x9[1][3]= -pthisSV->fC3x9[0][4];
    72ee:	2180      	movs	r1, #128	; 0x80
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:718
	pthisSV->fC3x9[1][0] = -pthisSV->fC3x9[0][1];
	pthisSV->fC3x9[2][0] = -pthisSV->fC3x9[0][2];
	pthisSV->fC3x9[2][1] = -pthisSV->fC3x9[1][2];
	pthisSV->fC3x9[0][4] = -pthisSV->fdeltat * pthisSV->fC3x9[0][1];
	pthisSV->fC3x9[0][5] = -pthisSV->fdeltat * pthisSV->fC3x9[0][2];
	pthisSV->fC3x9[1][5] = -pthisSV->fdeltat * pthisSV->fC3x9[1][2];
    72f0:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:719
	pthisSV->fC3x9[1][3]= -pthisSV->fC3x9[0][4];
    72f2:	0609      	lsls	r1, r1, #24
    72f4:	4b4b      	ldr	r3, [pc, #300]	; (7424 <fRun_6DOF_GY_KALMAN+0x3e4>)
    72f6:	187f      	adds	r7, r7, r1
    72f8:	50e7      	str	r7, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:720
	pthisSV->fC3x9[2][3]= -pthisSV->fC3x9[0][5];
    72fa:	238c      	movs	r3, #140	; 0x8c
    72fc:	00db      	lsls	r3, r3, #3
    72fe:	1876      	adds	r6, r6, r1
    7300:	50e6      	str	r6, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:721
	pthisSV->fC3x9[2][4]= -pthisSV->fC3x9[1][5];
    7302:	4b49      	ldr	r3, [pc, #292]	; (7428 <fRun_6DOF_GY_KALMAN+0x3e8>)
    7304:	1840      	adds	r0, r0, r1
    7306:	50e0      	str	r0, [r4, r3]
    7308:	23b2      	movs	r3, #178	; 0xb2
    730a:	009b      	lsls	r3, r3, #2
    730c:	1c1c      	adds	r4, r3, #0
    730e:	445c      	add	r4, fp
    7310:	4846      	ldr	r0, [pc, #280]	; (742c <fRun_6DOF_GY_KALMAN+0x3ec>)
    7312:	1c23      	adds	r3, r4, #0
    7314:	9409      	str	r4, [sp, #36]	; 0x24
    7316:	ac37      	add	r4, sp, #220	; 0xdc
    7318:	940a      	str	r4, [sp, #40]	; 0x28
    731a:	1c04      	adds	r4, r0, #0
    731c:	aa1c      	add	r2, sp, #112	; 0x70
    731e:	445c      	add	r4, fp
    7320:	4692      	mov	sl, r2
    7322:	1c1f      	adds	r7, r3, #0
    7324:	9407      	str	r4, [sp, #28]
    7326:	200c      	movs	r0, #12
    7328:	4240      	negs	r0, r0
    732a:	4680      	mov	r8, r0
    732c:	9907      	ldr	r1, [sp, #28]
    732e:	44d0      	add	r8, sl
    7330:	4689      	mov	r9, r1
    7332:	4646      	mov	r6, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:741
		pftmpA9x3ij = ftmpA9x3[i];

		for (j = 0; j < 3; j++) // loop over columns of ftmpA9x3
		{
			// zero ftmpA9x3[i][j]
			*pftmpA9x3ij = 0.0F;
    7334:	2200      	movs	r2, #0
    7336:	6032      	str	r2, [r6, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:744

			// initialize pfC3x9jk for current j, k=0
			pfC3x9jk = pthisSV->fC3x9[j];
    7338:	46b0      	mov	r8, r6
    733a:	2400      	movs	r4, #0
    733c:	464e      	mov	r6, r9
    733e:	e009      	b.n	7354 <fRun_6DOF_GY_KALMAN+0x314>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:755
			for (k = 0; k < 9; k++)
			{
				if ((*pfQw9x9ik != 0.0F) && (*pfC3x9jk != 0.0F))
				{
					if (*pfC3x9jk == 1.0F)
						*pftmpA9x3ij += *pfQw9x9ik;
    7340:	4641      	mov	r1, r8
    7342:	6808      	ldr	r0, [r1, #0]
    7344:	1c29      	adds	r1, r5, #0
    7346:	f7f9 f9d5 	bl	6f4 <__aeabi_fadd>
    734a:	4642      	mov	r2, r8
    734c:	6010      	str	r0, [r2, #0]
    734e:	3404      	adds	r4, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:750

			// initialize pfQw9x9ik for current i, k=0
			pfQw9x9ik = pthisSV->fQw9x9[i];

			// sum matrix products over inner loop over k
			for (k = 0; k < 9; k++)
    7350:	2c24      	cmp	r4, #36	; 0x24
    7352:	d026      	beq.n	73a2 <fRun_6DOF_GY_KALMAN+0x362>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:752
			{
				if ((*pfQw9x9ik != 0.0F) && (*pfC3x9jk != 0.0F))
    7354:	593d      	ldr	r5, [r7, r4]
    7356:	2100      	movs	r1, #0
    7358:	1c28      	adds	r0, r5, #0
    735a:	f7f9 f99d 	bl	698 <__aeabi_fcmpeq>
    735e:	2800      	cmp	r0, #0
    7360:	d1f5      	bne.n	734e <fRun_6DOF_GY_KALMAN+0x30e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:752 (discriminator 1)
    7362:	5933      	ldr	r3, [r6, r4]
    7364:	2100      	movs	r1, #0
    7366:	1c18      	adds	r0, r3, #0
    7368:	4699      	mov	r9, r3
    736a:	f7f9 f995 	bl	698 <__aeabi_fcmpeq>
    736e:	2800      	cmp	r0, #0
    7370:	d1ed      	bne.n	734e <fRun_6DOF_GY_KALMAN+0x30e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:754
				{
					if (*pfC3x9jk == 1.0F)
    7372:	21fe      	movs	r1, #254	; 0xfe
    7374:	4648      	mov	r0, r9
    7376:	0589      	lsls	r1, r1, #22
    7378:	f7f9 f98e 	bl	698 <__aeabi_fcmpeq>
    737c:	2800      	cmp	r0, #0
    737e:	d1df      	bne.n	7340 <fRun_6DOF_GY_KALMAN+0x300>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:756
						*pftmpA9x3ij += *pfQw9x9ik;
					else if (*pfC3x9jk == -1.0F)
    7380:	4648      	mov	r0, r9
    7382:	492b      	ldr	r1, [pc, #172]	; (7430 <fRun_6DOF_GY_KALMAN+0x3f0>)
    7384:	f7f9 f988 	bl	698 <__aeabi_fcmpeq>
    7388:	2800      	cmp	r0, #0
    738a:	d100      	bne.n	738e <fRun_6DOF_GY_KALMAN+0x34e>
    738c:	e1b2      	b.n	76f4 <fRun_6DOF_GY_KALMAN+0x6b4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:757
						*pftmpA9x3ij -= *pfQw9x9ik;
    738e:	4643      	mov	r3, r8
    7390:	6818      	ldr	r0, [r3, #0]
    7392:	1c29      	adds	r1, r5, #0
    7394:	f7f9 fe28 	bl	fe8 <__aeabi_fsub>
    7398:	3404      	adds	r4, #4
    739a:	4641      	mov	r1, r8
    739c:	6008      	str	r0, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:750

			// initialize pfQw9x9ik for current i, k=0
			pfQw9x9ik = pthisSV->fQw9x9[i];

			// sum matrix products over inner loop over k
			for (k = 0; k < 9; k++)
    739e:	2c24      	cmp	r4, #36	; 0x24
    73a0:	d1d8      	bne.n	7354 <fRun_6DOF_GY_KALMAN+0x314>
    73a2:	46b1      	mov	r9, r6
    73a4:	4646      	mov	r6, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:769
				pfQw9x9ik++;

			} // end of loop over k

			// increment pftmpA9x3ij for next iteration of j
			pftmpA9x3ij++;
    73a6:	3604      	adds	r6, #4
    73a8:	44a1      	add	r9, r4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:738
	for (i = 0; i < 9; i++) // loop over rows of ftmpA9x3
	{
		// initialize pftmpA9x3ij for current i, j=0
		pftmpA9x3ij = ftmpA9x3[i];

		for (j = 0; j < 3; j++) // loop over columns of ftmpA9x3
    73aa:	4556      	cmp	r6, sl
    73ac:	d1c2      	bne.n	7334 <fRun_6DOF_GY_KALMAN+0x2f4>
    73ae:	200c      	movs	r0, #12
    73b0:	46b0      	mov	r8, r6
    73b2:	4682      	mov	sl, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:733
	// *********************************************************************************

	// set ftmpA9x3 = P- * C^T = Qw * C^T where Qw and C are both sparse
	// C also has a significant number of +1 and -1 entries
	// ftmpA9x3 is also sparse but not symmetric
	for (i = 0; i < 9; i++) // loop over rows of ftmpA9x3
    73b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    73b6:	44c2      	add	sl, r8
    73b8:	3724      	adds	r7, #36	; 0x24
    73ba:	45a2      	cmp	sl, r4
    73bc:	d1b3      	bne.n	7326 <fRun_6DOF_GY_KALMAN+0x2e6>
    73be:	218c      	movs	r1, #140	; 0x8c
    73c0:	0049      	lsls	r1, r1, #1
    73c2:	1c0c      	adds	r4, r1, #0
    73c4:	445c      	add	r4, fp
    73c6:	2086      	movs	r0, #134	; 0x86
    73c8:	00c0      	lsls	r0, r0, #3
    73ca:	940f      	str	r4, [sp, #60]	; 0x3c
    73cc:	940a      	str	r4, [sp, #40]	; 0x28
    73ce:	2400      	movs	r4, #0
    73d0:	4680      	mov	r8, r0
    73d2:	9407      	str	r4, [sp, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:785
		pfPPlus9x9ij = pthisSV->fPPlus9x9[i] + i;

		for (j = i; j < 3; j++) // loop over above diagonal columns of P+
		{
			// zero P+[i][j] 
			*pfPPlus9x9ij = 0.0F;
    73d4:	465c      	mov	r4, fp
    73d6:	44d8      	add	r8, fp
    73d8:	940c      	str	r4, [sp, #48]	; 0x30
    73da:	2124      	movs	r1, #36	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:780
	// = C * (Qw * C^T) + Qv = C * ftmpA9x3 + Qv
	// both C and ftmpA9x3 are sparse but not symmetric
	for (i = 0; i < 3; i++) // loop over rows of P+
	{
		// initialize pfPPlus9x9ij for current i, j=i
		pfPPlus9x9ij = pthisSV->fPPlus9x9[i] + i;
    73dc:	9a07      	ldr	r2, [sp, #28]
    73de:	980a      	ldr	r0, [sp, #40]	; 0x28
    73e0:	4249      	negs	r1, r1
    73e2:	468b      	mov	fp, r1
    73e4:	4681      	mov	r9, r0
    73e6:	44c3      	add	fp, r8
    73e8:	4692      	mov	sl, r2
    73ea:	b255      	sxtb	r5, r2
    73ec:	4647      	mov	r7, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:785

		for (j = i; j < 3; j++) // loop over above diagonal columns of P+
		{
			// zero P+[i][j] 
			*pfPPlus9x9ij = 0.0F;
    73ee:	2100      	movs	r1, #0
    73f0:	4648      	mov	r0, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:791

			// initialize pfC3x9ik for current i, k=0
			pfC3x9ik = pthisSV->fC3x9[i];

			// initialize pftmpA9x3kj for current j, k=0
			pftmpA9x3kj = *ftmpA9x3 + j;
    73f2:	00ad      	lsls	r5, r5, #2
    73f4:	aa19      	add	r2, sp, #100	; 0x64
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:785
		pfPPlus9x9ij = pthisSV->fPPlus9x9[i] + i;

		for (j = i; j < 3; j++) // loop over above diagonal columns of P+
		{
			// zero P+[i][j] 
			*pfPPlus9x9ij = 0.0F;
    73f6:	6001      	str	r1, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:791

			// initialize pfC3x9ik for current i, k=0
			pfC3x9ik = pthisSV->fC3x9[i];

			// initialize pftmpA9x3kj for current j, k=0
			pftmpA9x3kj = *ftmpA9x3 + j;
    73f8:	1955      	adds	r5, r2, r5
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:788
		{
			// zero P+[i][j] 
			*pfPPlus9x9ij = 0.0F;

			// initialize pfC3x9ik for current i, k=0
			pfC3x9ik = pthisSV->fC3x9[i];
    73fa:	465c      	mov	r4, fp
    73fc:	e025      	b.n	744a <fRun_6DOF_GY_KALMAN+0x40a>
    73fe:	46c0      	nop			; (mov r8, r8)
    7400:	0000048e 	.word	0x0000048e
    7404:	0000048c 	.word	0x0000048c
    7408:	0000047c 	.word	0x0000047c
    740c:	3c8efa35 	.word	0x3c8efa35
    7410:	bc8efa35 	.word	0xbc8efa35
    7414:	00000414 	.word	0x00000414
    7418:	00000454 	.word	0x00000454
    741c:	0000041c 	.word	0x0000041c
    7420:	00000444 	.word	0x00000444
    7424:	0000043c 	.word	0x0000043c
    7428:	00000464 	.word	0x00000464
    742c:	0000040c 	.word	0x0000040c
    7430:	bf800000 	.word	0xbf800000
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:799
			for (k = 0; k < 9; k++)
			{
				if ((*pfC3x9ik != 0.0F) && (*pftmpA9x3kj != 0.0F))
				{
					if (*pfC3x9ik == 1.0F)
						*pfPPlus9x9ij += *pftmpA9x3kj;
    7434:	4649      	mov	r1, r9
    7436:	6808      	ldr	r0, [r1, #0]
    7438:	4641      	mov	r1, r8
    743a:	f7f9 f95b 	bl	6f4 <__aeabi_fadd>
    743e:	464a      	mov	r2, r9
    7440:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:807
					else
						*pfPPlus9x9ij += *pfC3x9ik * *pftmpA9x3kj;
				}

				// update pfC3x9ik and pftmpA9x3kj for next iteration of k
				pfC3x9ik++;						
    7442:	3404      	adds	r4, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:808
				pftmpA9x3kj += 3;
    7444:	350c      	adds	r5, #12
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:794

			// initialize pftmpA9x3kj for current j, k=0
			pftmpA9x3kj = *ftmpA9x3 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 9; k++)
    7446:	42bc      	cmp	r4, r7
    7448:	d027      	beq.n	749a <fRun_6DOF_GY_KALMAN+0x45a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:796
			{
				if ((*pfC3x9ik != 0.0F) && (*pftmpA9x3kj != 0.0F))
    744a:	6826      	ldr	r6, [r4, #0]
    744c:	2100      	movs	r1, #0
    744e:	1c30      	adds	r0, r6, #0
    7450:	f7f9 f922 	bl	698 <__aeabi_fcmpeq>
    7454:	2800      	cmp	r0, #0
    7456:	d1f4      	bne.n	7442 <fRun_6DOF_GY_KALMAN+0x402>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:796 (discriminator 1)
    7458:	682b      	ldr	r3, [r5, #0]
    745a:	2100      	movs	r1, #0
    745c:	1c18      	adds	r0, r3, #0
    745e:	4698      	mov	r8, r3
    7460:	f7f9 f91a 	bl	698 <__aeabi_fcmpeq>
    7464:	2800      	cmp	r0, #0
    7466:	d1ec      	bne.n	7442 <fRun_6DOF_GY_KALMAN+0x402>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:798
				{
					if (*pfC3x9ik == 1.0F)
    7468:	21fe      	movs	r1, #254	; 0xfe
    746a:	1c30      	adds	r0, r6, #0
    746c:	0589      	lsls	r1, r1, #22
    746e:	f7f9 f913 	bl	698 <__aeabi_fcmpeq>
    7472:	2800      	cmp	r0, #0
    7474:	d1de      	bne.n	7434 <fRun_6DOF_GY_KALMAN+0x3f4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:800
						*pfPPlus9x9ij += *pftmpA9x3kj;
					else if (*pfC3x9ik == -1.0F)
    7476:	1c30      	adds	r0, r6, #0
    7478:	49a7      	ldr	r1, [pc, #668]	; (7718 <fRun_6DOF_GY_KALMAN+0x6d8>)
    747a:	f7f9 f90d 	bl	698 <__aeabi_fcmpeq>
    747e:	2800      	cmp	r0, #0
    7480:	d100      	bne.n	7484 <fRun_6DOF_GY_KALMAN+0x444>
    7482:	e12b      	b.n	76dc <fRun_6DOF_GY_KALMAN+0x69c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:801
						*pfPPlus9x9ij -= *pftmpA9x3kj;
    7484:	464b      	mov	r3, r9
    7486:	6818      	ldr	r0, [r3, #0]
    7488:	4641      	mov	r1, r8
    748a:	f7f9 fdad 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:807
					else
						*pfPPlus9x9ij += *pfC3x9ik * *pftmpA9x3kj;
				}

				// update pfC3x9ik and pftmpA9x3kj for next iteration of k
				pfC3x9ik++;						
    748e:	3404      	adds	r4, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:801
				if ((*pfC3x9ik != 0.0F) && (*pftmpA9x3kj != 0.0F))
				{
					if (*pfC3x9ik == 1.0F)
						*pfPPlus9x9ij += *pftmpA9x3kj;
					else if (*pfC3x9ik == -1.0F)
						*pfPPlus9x9ij -= *pftmpA9x3kj;
    7490:	4649      	mov	r1, r9
    7492:	6008      	str	r0, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:808
						*pfPPlus9x9ij += *pfC3x9ik * *pftmpA9x3kj;
				}

				// update pfC3x9ik and pftmpA9x3kj for next iteration of k
				pfC3x9ik++;						
				pftmpA9x3kj += 3;
    7494:	350c      	adds	r5, #12
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:794

			// initialize pftmpA9x3kj for current j, k=0
			pftmpA9x3kj = *ftmpA9x3 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 9; k++)
    7496:	42bc      	cmp	r4, r7
    7498:	d1d7      	bne.n	744a <fRun_6DOF_GY_KALMAN+0x40a>
    749a:	4653      	mov	r3, sl
    749c:	3301      	adds	r3, #1
    749e:	b2db      	uxtb	r3, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:813
				pftmpA9x3kj += 3;

			} // end of loop over k

			// increment pfPPlus9x9ij for next iteration of j
			pfPPlus9x9ij++;
    74a0:	2004      	movs	r0, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:782
	for (i = 0; i < 3; i++) // loop over rows of P+
	{
		// initialize pfPPlus9x9ij for current i, j=i
		pfPPlus9x9ij = pthisSV->fPPlus9x9[i] + i;

		for (j = i; j < 3; j++) // loop over above diagonal columns of P+
    74a2:	b25d      	sxtb	r5, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:813
				pftmpA9x3kj += 3;

			} // end of loop over k

			// increment pfPPlus9x9ij for next iteration of j
			pfPPlus9x9ij++;
    74a4:	4481      	add	r9, r0
    74a6:	469a      	mov	sl, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:782
	for (i = 0; i < 3; i++) // loop over rows of P+
	{
		// initialize pfPPlus9x9ij for current i, j=i
		pfPPlus9x9ij = pthisSV->fPPlus9x9[i] + i;

		for (j = i; j < 3; j++) // loop over above diagonal columns of P+
    74a8:	2d02      	cmp	r5, #2
    74aa:	dda0      	ble.n	73ee <fRun_6DOF_GY_KALMAN+0x3ae>
    74ac:	9b07      	ldr	r3, [sp, #28]
    74ae:	3424      	adds	r4, #36	; 0x24
    74b0:	46a0      	mov	r8, r4
    74b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    74b4:	3301      	adds	r3, #1
    74b6:	b2db      	uxtb	r3, r3
    74b8:	3428      	adds	r4, #40	; 0x28
    74ba:	940a      	str	r4, [sp, #40]	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:777
	} // end of loop over i

	// set symmetric P+ (3x3 scratch sub-matrix) to C * P- * C^T + Qv
	// = C * (Qw * C^T) + Qv = C * ftmpA9x3 + Qv
	// both C and ftmpA9x3 are sparse but not symmetric
	for (i = 0; i < 3; i++) // loop over rows of P+
    74bc:	b25c      	sxtb	r4, r3
    74be:	9307      	str	r3, [sp, #28]
    74c0:	2c03      	cmp	r4, #3
    74c2:	d18a      	bne.n	73da <fRun_6DOF_GY_KALMAN+0x39a>
    74c4:	980c      	ldr	r0, [sp, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:819

		} // end of loop over j
	} // end of loop over i

	// add in noise covariance terms to the diagonal
	pthisSV->fPPlus9x9[0][0] +=  pthisSV->fQvAA;
    74c6:	238a      	movs	r3, #138	; 0x8a
    74c8:	005b      	lsls	r3, r3, #1
    74ca:	58c6      	ldr	r6, [r0, r3]
    74cc:	258c      	movs	r5, #140	; 0x8c
    74ce:	006d      	lsls	r5, r5, #1
    74d0:	4683      	mov	fp, r0
    74d2:	1c31      	adds	r1, r6, #0
    74d4:	5940      	ldr	r0, [r0, r5]
    74d6:	f7f9 f90d 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:820
	pthisSV->fPPlus9x9[1][1] +=  pthisSV->fQvAA;
    74da:	23a0      	movs	r3, #160	; 0xa0
    74dc:	005b      	lsls	r3, r3, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:819

		} // end of loop over j
	} // end of loop over i

	// add in noise covariance terms to the diagonal
	pthisSV->fPPlus9x9[0][0] +=  pthisSV->fQvAA;
    74de:	465a      	mov	r2, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:820
	pthisSV->fPPlus9x9[1][1] +=  pthisSV->fQvAA;
    74e0:	4699      	mov	r9, r3
    74e2:	465b      	mov	r3, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:819

		} // end of loop over j
	} // end of loop over i

	// add in noise covariance terms to the diagonal
	pthisSV->fPPlus9x9[0][0] +=  pthisSV->fQvAA;
    74e4:	5150      	str	r0, [r2, r5]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:820
	pthisSV->fPPlus9x9[1][1] +=  pthisSV->fQvAA;
    74e6:	444b      	add	r3, r9
    74e8:	6819      	ldr	r1, [r3, #0]
    74ea:	1c30      	adds	r0, r6, #0
    74ec:	f7f9 f902 	bl	6f4 <__aeabi_fadd>
    74f0:	4659      	mov	r1, fp
    74f2:	4449      	add	r1, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:821
	pthisSV->fPPlus9x9[2][2] +=  pthisSV->fQvAA;
    74f4:	27b4      	movs	r7, #180	; 0xb4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:820
		} // end of loop over j
	} // end of loop over i

	// add in noise covariance terms to the diagonal
	pthisSV->fPPlus9x9[0][0] +=  pthisSV->fQvAA;
	pthisSV->fPPlus9x9[1][1] +=  pthisSV->fQvAA;
    74f6:	6008      	str	r0, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:821
	pthisSV->fPPlus9x9[2][2] +=  pthisSV->fQvAA;
    74f8:	007f      	lsls	r7, r7, #1
    74fa:	465a      	mov	r2, fp
    74fc:	59d1      	ldr	r1, [r2, r7]
    74fe:	1c30      	adds	r0, r6, #0
    7500:	f7f9 f8f8 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:824

	// copy above diagonal terms of P+ (3x3 scratch sub-matrix) to below diagonal terms
	pthisSV->fPPlus9x9[1][0] = pthisSV->fPPlus9x9[0][1];
    7504:	268e      	movs	r6, #142	; 0x8e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:821
	} // end of loop over i

	// add in noise covariance terms to the diagonal
	pthisSV->fPPlus9x9[0][0] +=  pthisSV->fQvAA;
	pthisSV->fPPlus9x9[1][1] +=  pthisSV->fQvAA;
	pthisSV->fPPlus9x9[2][2] +=  pthisSV->fQvAA;
    7506:	465b      	mov	r3, fp
    7508:	51d8      	str	r0, [r3, r7]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:824

	// copy above diagonal terms of P+ (3x3 scratch sub-matrix) to below diagonal terms
	pthisSV->fPPlus9x9[1][0] = pthisSV->fPPlus9x9[0][1];
    750a:	0076      	lsls	r6, r6, #1
    750c:	5998      	ldr	r0, [r3, r6]
    750e:	229e      	movs	r2, #158	; 0x9e
    7510:	0052      	lsls	r2, r2, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:825
	pthisSV->fPPlus9x9[2][0] = pthisSV->fPPlus9x9[0][2];
    7512:	2790      	movs	r7, #144	; 0x90
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:824
	pthisSV->fPPlus9x9[0][0] +=  pthisSV->fQvAA;
	pthisSV->fPPlus9x9[1][1] +=  pthisSV->fQvAA;
	pthisSV->fPPlus9x9[2][2] +=  pthisSV->fQvAA;

	// copy above diagonal terms of P+ (3x3 scratch sub-matrix) to below diagonal terms
	pthisSV->fPPlus9x9[1][0] = pthisSV->fPPlus9x9[0][1];
    7514:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:825
	pthisSV->fPPlus9x9[2][0] = pthisSV->fPPlus9x9[0][2];
    7516:	007f      	lsls	r7, r7, #1
    7518:	59db      	ldr	r3, [r3, r7]
    751a:	20b0      	movs	r0, #176	; 0xb0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:824
	pthisSV->fPPlus9x9[0][0] +=  pthisSV->fQvAA;
	pthisSV->fPPlus9x9[1][1] +=  pthisSV->fQvAA;
	pthisSV->fPPlus9x9[2][2] +=  pthisSV->fQvAA;

	// copy above diagonal terms of P+ (3x3 scratch sub-matrix) to below diagonal terms
	pthisSV->fPPlus9x9[1][0] = pthisSV->fPPlus9x9[0][1];
    751c:	4659      	mov	r1, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:825
	pthisSV->fPPlus9x9[2][0] = pthisSV->fPPlus9x9[0][2];
    751e:	0040      	lsls	r0, r0, #1
    7520:	500b      	str	r3, [r1, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:826
	pthisSV->fPPlus9x9[2][1] = pthisSV->fPPlus9x9[1][2];
    7522:	23a2      	movs	r3, #162	; 0xa2
    7524:	005b      	lsls	r3, r3, #1
    7526:	58cb      	ldr	r3, [r1, r3]
    7528:	22b2      	movs	r2, #178	; 0xb2
    752a:	0052      	lsls	r2, r2, #1
    752c:	508b      	str	r3, [r1, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:831

	// calculate inverse of P+ (3x3 scratch sub-matrix) = inv(C * P- * C^T + Qv) = inv(C * Qw * C^T + Qv)
	for (i = 0; i < 3; i++)
	{
		pfRows[i] = pthisSV->fPPlus9x9[i];
    752e:	209e      	movs	r0, #158	; 0x9e
    7530:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7532:	22b0      	movs	r2, #176	; 0xb0
    7534:	0040      	lsls	r0, r0, #1
    7536:	0052      	lsls	r2, r2, #1
    7538:	9316      	str	r3, [sp, #88]	; 0x58
    753a:	1c01      	adds	r1, r0, #0
    753c:	1c13      	adds	r3, r2, #0
    753e:	4459      	add	r1, fp
    7540:	445b      	add	r3, fp
    7542:	9107      	str	r1, [sp, #28]
    7544:	9117      	str	r1, [sp, #92]	; 0x5c
    7546:	9318      	str	r3, [sp, #96]	; 0x60
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:833
	}
	fmatrixAeqInvA(pfRows, iColInd, iRowInd, iPivot, 3);
    7548:	9400      	str	r4, [sp, #0]
    754a:	a816      	add	r0, sp, #88	; 0x58
    754c:	a910      	add	r1, sp, #64	; 0x40
    754e:	ab12      	add	r3, sp, #72	; 0x48
    7550:	aa11      	add	r2, sp, #68	; 0x44
    7552:	f006 fec1 	bl	e2d8 <fmatrixAeqInvA>
    7556:	2397      	movs	r3, #151	; 0x97
    7558:	009b      	lsls	r3, r3, #2
    755a:	1c1c      	adds	r4, r3, #0
    755c:	445c      	add	r4, fp
    755e:	a819      	add	r0, sp, #100	; 0x64
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:847
		pfK9x3ij = pthisSV->fK9x3[i];

		for (j = 0; j < 3; j++) // loop over columns of K9x3
		{
			// zero the matrix element fK9x3[i][j]
			*pfK9x3ij = 0.0F;
    7560:	2100      	movs	r1, #0
    7562:	940a      	str	r4, [sp, #40]	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:833
	// calculate inverse of P+ (3x3 scratch sub-matrix) = inv(C * P- * C^T + Qv) = inv(C * Qw * C^T + Qv)
	for (i = 0; i < 3; i++)
	{
		pfRows[i] = pthisSV->fPPlus9x9[i];
	}
	fmatrixAeqInvA(pfRows, iColInd, iRowInd, iPivot, 3);
    7564:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:847
		pfK9x3ij = pthisSV->fK9x3[i];

		for (j = 0; j < 3; j++) // loop over columns of K9x3
		{
			// zero the matrix element fK9x3[i][j]
			*pfK9x3ij = 0.0F;
    7566:	468a      	mov	sl, r1
    7568:	e0aa      	b.n	76c0 <fRun_6DOF_GY_KALMAN+0x680>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    756a:	238c      	movs	r3, #140	; 0x8c
    756c:	465a      	mov	r2, fp
    756e:	005b      	lsls	r3, r3, #1
    7570:	58d1      	ldr	r1, [r2, r3]
    7572:	1c38      	adds	r0, r7, #0
    7574:	f7f9 fc0e 	bl	d94 <__aeabi_fmul>
    7578:	2100      	movs	r1, #0
    757a:	f7f9 f8bb 	bl	6f4 <__aeabi_fadd>
    757e:	4681      	mov	r9, r0
    7580:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    7582:	4641      	mov	r1, r8
    7584:	684e      	ldr	r6, [r1, #4]
    7586:	2100      	movs	r1, #0
    7588:	1c30      	adds	r0, r6, #0
    758a:	f7f9 f885 	bl	698 <__aeabi_fcmpeq>
    758e:	2800      	cmp	r0, #0
    7590:	d10c      	bne.n	75ac <fRun_6DOF_GY_KALMAN+0x56c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    7592:	239e      	movs	r3, #158	; 0x9e
    7594:	465a      	mov	r2, fp
    7596:	005b      	lsls	r3, r3, #1
    7598:	58d1      	ldr	r1, [r2, r3]
    759a:	1c30      	adds	r0, r6, #0
    759c:	f7f9 fbfa 	bl	d94 <__aeabi_fmul>
    75a0:	1c01      	adds	r1, r0, #0
    75a2:	4648      	mov	r0, r9
    75a4:	f7f9 f8a6 	bl	6f4 <__aeabi_fadd>
    75a8:	4681      	mov	r9, r0
    75aa:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    75ac:	4640      	mov	r0, r8
    75ae:	6885      	ldr	r5, [r0, #8]
    75b0:	2100      	movs	r1, #0
    75b2:	1c28      	adds	r0, r5, #0
    75b4:	f7f9 f870 	bl	698 <__aeabi_fcmpeq>
    75b8:	2800      	cmp	r0, #0
    75ba:	d10a      	bne.n	75d2 <fRun_6DOF_GY_KALMAN+0x592>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    75bc:	23b0      	movs	r3, #176	; 0xb0
    75be:	465a      	mov	r2, fp
    75c0:	005b      	lsls	r3, r3, #1
    75c2:	58d1      	ldr	r1, [r2, r3]
    75c4:	1c28      	adds	r0, r5, #0
    75c6:	f7f9 fbe5 	bl	d94 <__aeabi_fmul>
    75ca:	4649      	mov	r1, r9
    75cc:	f7f9 f892 	bl	6f4 <__aeabi_fadd>
    75d0:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:847
		pfK9x3ij = pthisSV->fK9x3[i];

		for (j = 0; j < 3; j++) // loop over columns of K9x3
		{
			// zero the matrix element fK9x3[i][j]
			*pfK9x3ij = 0.0F;
    75d2:	4650      	mov	r0, sl
    75d4:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    75d6:	2100      	movs	r1, #0
    75d8:	1c38      	adds	r0, r7, #0
    75da:	f7f9 f85d 	bl	698 <__aeabi_fcmpeq>
    75de:	2800      	cmp	r0, #0
    75e0:	d000      	beq.n	75e4 <fRun_6DOF_GY_KALMAN+0x5a4>
    75e2:	e093      	b.n	770c <fRun_6DOF_GY_KALMAN+0x6cc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    75e4:	238e      	movs	r3, #142	; 0x8e
    75e6:	465a      	mov	r2, fp
    75e8:	005b      	lsls	r3, r3, #1
    75ea:	58d1      	ldr	r1, [r2, r3]
    75ec:	1c38      	adds	r0, r7, #0
    75ee:	f7f9 fbd1 	bl	d94 <__aeabi_fmul>
    75f2:	2100      	movs	r1, #0
    75f4:	f7f9 f87e 	bl	6f4 <__aeabi_fadd>
    75f8:	4681      	mov	r9, r0
    75fa:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    75fc:	1c30      	adds	r0, r6, #0
    75fe:	2100      	movs	r1, #0
    7600:	f7f9 f84a 	bl	698 <__aeabi_fcmpeq>
    7604:	2800      	cmp	r0, #0
    7606:	d10c      	bne.n	7622 <fRun_6DOF_GY_KALMAN+0x5e2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    7608:	23a0      	movs	r3, #160	; 0xa0
    760a:	465a      	mov	r2, fp
    760c:	005b      	lsls	r3, r3, #1
    760e:	58d1      	ldr	r1, [r2, r3]
    7610:	1c30      	adds	r0, r6, #0
    7612:	f7f9 fbbf 	bl	d94 <__aeabi_fmul>
    7616:	1c01      	adds	r1, r0, #0
    7618:	4648      	mov	r0, r9
    761a:	f7f9 f86b 	bl	6f4 <__aeabi_fadd>
    761e:	4681      	mov	r9, r0
    7620:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    7622:	1c28      	adds	r0, r5, #0
    7624:	2100      	movs	r1, #0
    7626:	f7f9 f837 	bl	698 <__aeabi_fcmpeq>
    762a:	2800      	cmp	r0, #0
    762c:	d10a      	bne.n	7644 <fRun_6DOF_GY_KALMAN+0x604>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    762e:	23b2      	movs	r3, #178	; 0xb2
    7630:	465a      	mov	r2, fp
    7632:	005b      	lsls	r3, r3, #1
    7634:	58d1      	ldr	r1, [r2, r3]
    7636:	1c28      	adds	r0, r5, #0
    7638:	f7f9 fbac 	bl	d94 <__aeabi_fmul>
    763c:	4649      	mov	r1, r9
    763e:	f7f9 f859 	bl	6f4 <__aeabi_fadd>
    7642:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:847
		pfK9x3ij = pthisSV->fK9x3[i];

		for (j = 0; j < 3; j++) // loop over columns of K9x3
		{
			// zero the matrix element fK9x3[i][j]
			*pfK9x3ij = 0.0F;
    7644:	4650      	mov	r0, sl
    7646:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    7648:	2100      	movs	r1, #0
    764a:	1c38      	adds	r0, r7, #0
    764c:	f7f9 f824 	bl	698 <__aeabi_fcmpeq>
    7650:	2800      	cmp	r0, #0
    7652:	d15e      	bne.n	7712 <fRun_6DOF_GY_KALMAN+0x6d2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    7654:	2390      	movs	r3, #144	; 0x90
    7656:	465a      	mov	r2, fp
    7658:	005b      	lsls	r3, r3, #1
    765a:	58d1      	ldr	r1, [r2, r3]
    765c:	1c38      	adds	r0, r7, #0
    765e:	f7f9 fb99 	bl	d94 <__aeabi_fmul>
    7662:	2100      	movs	r1, #0
    7664:	f7f9 f846 	bl	6f4 <__aeabi_fadd>
    7668:	1c07      	adds	r7, r0, #0
    766a:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    766c:	1c30      	adds	r0, r6, #0
    766e:	2100      	movs	r1, #0
    7670:	f7f9 f812 	bl	698 <__aeabi_fcmpeq>
    7674:	2800      	cmp	r0, #0
    7676:	d10c      	bne.n	7692 <fRun_6DOF_GY_KALMAN+0x652>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    7678:	23a2      	movs	r3, #162	; 0xa2
    767a:	005b      	lsls	r3, r3, #1
    767c:	465a      	mov	r2, fp
    767e:	58d1      	ldr	r1, [r2, r3]
    7680:	1c30      	adds	r0, r6, #0
    7682:	f7f9 fb87 	bl	d94 <__aeabi_fmul>
    7686:	1c01      	adds	r1, r0, #0
    7688:	1c38      	adds	r0, r7, #0
    768a:	f7f9 f833 	bl	6f4 <__aeabi_fadd>
    768e:	1c07      	adds	r7, r0, #0
    7690:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    7692:	1c28      	adds	r0, r5, #0
    7694:	2100      	movs	r1, #0
    7696:	f7f8 ffff 	bl	698 <__aeabi_fcmpeq>
    769a:	2800      	cmp	r0, #0
    769c:	d10a      	bne.n	76b4 <fRun_6DOF_GY_KALMAN+0x674>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:860
				{
					*pfK9x3ij += *pftmpA9x3ik * *pfPPlus9x9kj;
    769e:	23b4      	movs	r3, #180	; 0xb4
    76a0:	005b      	lsls	r3, r3, #1
    76a2:	465a      	mov	r2, fp
    76a4:	58d1      	ldr	r1, [r2, r3]
    76a6:	1c28      	adds	r0, r5, #0
    76a8:	f7f9 fb74 	bl	d94 <__aeabi_fmul>
    76ac:	1c39      	adds	r1, r7, #0
    76ae:	f7f9 f821 	bl	6f4 <__aeabi_fadd>
    76b2:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:839

	// set K = P- * C^T * inv(C * P- * C^T + Qv) = Qw * C^T * inv(C * Qw * C^T + Qv)
	// = ftmpA9x3 * P+ (3x3 sub-matrix)
	// ftmpA9x3 = Qw * C^T is sparse but P+ (3x3 sub-matrix) is not
	// K is not symmetric because C is not symmetric
	for (i = 0; i < 9; i++) // loop over rows of K9x3
    76b4:	9809      	ldr	r0, [sp, #36]	; 0x24
    76b6:	230c      	movs	r3, #12
    76b8:	340c      	adds	r4, #12
    76ba:	4498      	add	r8, r3
    76bc:	42a0      	cmp	r0, r4
    76be:	d02d      	beq.n	771c <fRun_6DOF_GY_KALMAN+0x6dc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    76c0:	4643      	mov	r3, r8
    76c2:	681f      	ldr	r7, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:847
		pfK9x3ij = pthisSV->fK9x3[i];

		for (j = 0; j < 3; j++) // loop over columns of K9x3
		{
			// zero the matrix element fK9x3[i][j]
			*pfK9x3ij = 0.0F;
    76c4:	4652      	mov	r2, sl
    76c6:	6022      	str	r2, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    76c8:	1c38      	adds	r0, r7, #0
    76ca:	2100      	movs	r1, #0
    76cc:	f7f8 ffe4 	bl	698 <__aeabi_fcmpeq>
    76d0:	2800      	cmp	r0, #0
    76d2:	d100      	bne.n	76d6 <fRun_6DOF_GY_KALMAN+0x696>
    76d4:	e749      	b.n	756a <fRun_6DOF_GY_KALMAN+0x52a>
    76d6:	2000      	movs	r0, #0
    76d8:	4681      	mov	r9, r0
    76da:	e752      	b.n	7582 <fRun_6DOF_GY_KALMAN+0x542>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:803
					if (*pfC3x9ik == 1.0F)
						*pfPPlus9x9ij += *pftmpA9x3kj;
					else if (*pfC3x9ik == -1.0F)
						*pfPPlus9x9ij -= *pftmpA9x3kj;
					else
						*pfPPlus9x9ij += *pfC3x9ik * *pftmpA9x3kj;
    76dc:	4641      	mov	r1, r8
    76de:	1c30      	adds	r0, r6, #0
    76e0:	f7f9 fb58 	bl	d94 <__aeabi_fmul>
    76e4:	464a      	mov	r2, r9
    76e6:	1c01      	adds	r1, r0, #0
    76e8:	6810      	ldr	r0, [r2, #0]
    76ea:	f7f9 f803 	bl	6f4 <__aeabi_fadd>
    76ee:	464b      	mov	r3, r9
    76f0:	6018      	str	r0, [r3, #0]
    76f2:	e6a6      	b.n	7442 <fRun_6DOF_GY_KALMAN+0x402>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:759
					if (*pfC3x9jk == 1.0F)
						*pftmpA9x3ij += *pfQw9x9ik;
					else if (*pfC3x9jk == -1.0F)
						*pftmpA9x3ij -= *pfQw9x9ik;
					else
						*pftmpA9x3ij += *pfQw9x9ik * *pfC3x9jk;
    76f4:	4649      	mov	r1, r9
    76f6:	1c28      	adds	r0, r5, #0
    76f8:	f7f9 fb4c 	bl	d94 <__aeabi_fmul>
    76fc:	4642      	mov	r2, r8
    76fe:	1c01      	adds	r1, r0, #0
    7700:	6810      	ldr	r0, [r2, #0]
    7702:	f7f8 fff7 	bl	6f4 <__aeabi_fadd>
    7706:	4643      	mov	r3, r8
    7708:	6018      	str	r0, [r3, #0]
    770a:	e620      	b.n	734e <fRun_6DOF_GY_KALMAN+0x30e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    770c:	2000      	movs	r0, #0
    770e:	4681      	mov	r9, r0
    7710:	e774      	b.n	75fc <fRun_6DOF_GY_KALMAN+0x5bc>
    7712:	2700      	movs	r7, #0
    7714:	e7aa      	b.n	766c <fRun_6DOF_GY_KALMAN+0x62c>
    7716:	46c0      	nop			; (mov r8, r8)
    7718:	bf800000 	.word	0xbf800000
    771c:	4659      	mov	r1, fp
    771e:	23f0      	movs	r3, #240	; 0xf0
    7720:	58cd      	ldr	r5, [r1, r3]
    7722:	23f4      	movs	r3, #244	; 0xf4
    7724:	58cc      	ldr	r4, [r1, r3]
    7726:	23f8      	movs	r3, #248	; 0xf8
    7728:	58cf      	ldr	r7, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:889

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    772a:	23a0      	movs	r3, #160	; 0xa0
    772c:	009b      	lsls	r3, r3, #2
    772e:	58c9      	ldr	r1, [r1, r3]
    7730:	1c28      	adds	r0, r5, #0
    7732:	f7f9 fb2f 	bl	d94 <__aeabi_fmul>
    7736:	2100      	movs	r1, #0
    7738:	f7f8 ffdc 	bl	6f4 <__aeabi_fadd>
    773c:	23a1      	movs	r3, #161	; 0xa1
    773e:	009b      	lsls	r3, r3, #2
    7740:	465a      	mov	r2, fp
    7742:	58d1      	ldr	r1, [r2, r3]
    7744:	1c06      	adds	r6, r0, #0
    7746:	1c20      	adds	r0, r4, #0
    7748:	f7f9 fb24 	bl	d94 <__aeabi_fmul>
    774c:	1c01      	adds	r1, r0, #0
    774e:	1c30      	adds	r0, r6, #0
    7750:	f7f8 ffd0 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    7754:	23a9      	movs	r3, #169	; 0xa9
    7756:	009b      	lsls	r3, r3, #2
    7758:	465a      	mov	r2, fp
    775a:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:889

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    775c:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    775e:	1c28      	adds	r0, r5, #0
    7760:	f7f9 fb18 	bl	d94 <__aeabi_fmul>
    7764:	2100      	movs	r1, #0
    7766:	f7f8 ffc5 	bl	6f4 <__aeabi_fadd>
    776a:	23aa      	movs	r3, #170	; 0xaa
    776c:	009b      	lsls	r3, r3, #2
    776e:	465a      	mov	r2, fp
    7770:	58d1      	ldr	r1, [r2, r3]
    7772:	1c06      	adds	r6, r0, #0
    7774:	1c20      	adds	r0, r4, #0
    7776:	f7f9 fb0d 	bl	d94 <__aeabi_fmul>
    777a:	1c01      	adds	r1, r0, #0
    777c:	1c30      	adds	r0, r6, #0
    777e:	f7f8 ffb9 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:888
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = 0.0F;

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
    7782:	2397      	movs	r3, #151	; 0x97
    7784:	009b      	lsls	r3, r3, #2
    7786:	465a      	mov	r2, fp
    7788:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    778a:	4681      	mov	r9, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:888
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = 0.0F;

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
    778c:	1c28      	adds	r0, r5, #0
    778e:	f7f9 fb01 	bl	d94 <__aeabi_fmul>
    7792:	2100      	movs	r1, #0
    7794:	f7f8 ffae 	bl	6f4 <__aeabi_fadd>
    7798:	2398      	movs	r3, #152	; 0x98
    779a:	009b      	lsls	r3, r3, #2
    779c:	465a      	mov	r2, fp
    779e:	58d1      	ldr	r1, [r2, r3]
    77a0:	1c06      	adds	r6, r0, #0
    77a2:	1c20      	adds	r0, r4, #0
    77a4:	f7f9 faf6 	bl	d94 <__aeabi_fmul>
    77a8:	1c01      	adds	r1, r0, #0
    77aa:	1c30      	adds	r0, r6, #0
    77ac:	f7f8 ffa2 	bl	6f4 <__aeabi_fadd>
    77b0:	2399      	movs	r3, #153	; 0x99
    77b2:	009b      	lsls	r3, r3, #2
    77b4:	465a      	mov	r2, fp
    77b6:	58d1      	ldr	r1, [r2, r3]
    77b8:	1c06      	adds	r6, r0, #0
    77ba:	1c38      	adds	r0, r7, #0
    77bc:	f7f9 faea 	bl	d94 <__aeabi_fmul>
    77c0:	1c01      	adds	r1, r0, #0
    77c2:	1c30      	adds	r0, r6, #0
    77c4:	f7f8 ff96 	bl	6f4 <__aeabi_fadd>
    77c8:	465b      	mov	r3, fp
    77ca:	6718      	str	r0, [r3, #112]	; 0x70
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:889
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    77cc:	23a2      	movs	r3, #162	; 0xa2
    77ce:	009b      	lsls	r3, r3, #2
    77d0:	465a      	mov	r2, fp
    77d2:	58d1      	ldr	r1, [r2, r3]
    77d4:	1c38      	adds	r0, r7, #0
    77d6:	f7f9 fadd 	bl	d94 <__aeabi_fmul>
    77da:	1c01      	adds	r1, r0, #0
    77dc:	4640      	mov	r0, r8
    77de:	f7f8 ff89 	bl	6f4 <__aeabi_fadd>
    77e2:	465b      	mov	r3, fp
    77e4:	67d8      	str	r0, [r3, #124]	; 0x7c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    77e6:	23ab      	movs	r3, #171	; 0xab
    77e8:	009b      	lsls	r3, r3, #2
    77ea:	465a      	mov	r2, fp
    77ec:	20e4      	movs	r0, #228	; 0xe4
    77ee:	58d1      	ldr	r1, [r2, r3]
    77f0:	4682      	mov	sl, r0
    77f2:	1c38      	adds	r0, r7, #0
    77f4:	f7f9 face 	bl	d94 <__aeabi_fmul>
    77f8:	1c01      	adds	r1, r0, #0
    77fa:	4648      	mov	r0, r9
    77fc:	f7f8 ff7a 	bl	6f4 <__aeabi_fadd>
    7800:	465b      	mov	r3, fp
    7802:	4453      	add	r3, sl
    7804:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:889

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    7806:	23a3      	movs	r3, #163	; 0xa3
    7808:	009b      	lsls	r3, r3, #2
    780a:	465a      	mov	r2, fp
    780c:	58d1      	ldr	r1, [r2, r3]
    780e:	1c28      	adds	r0, r5, #0
    7810:	f7f9 fac0 	bl	d94 <__aeabi_fmul>
    7814:	2100      	movs	r1, #0
    7816:	f7f8 ff6d 	bl	6f4 <__aeabi_fadd>
    781a:	23a4      	movs	r3, #164	; 0xa4
    781c:	009b      	lsls	r3, r3, #2
    781e:	465a      	mov	r2, fp
    7820:	58d1      	ldr	r1, [r2, r3]
    7822:	1c06      	adds	r6, r0, #0
    7824:	1c20      	adds	r0, r4, #0
    7826:	f7f9 fab5 	bl	d94 <__aeabi_fmul>
    782a:	1c01      	adds	r1, r0, #0
    782c:	1c30      	adds	r0, r6, #0
    782e:	f7f8 ff61 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    7832:	23ac      	movs	r3, #172	; 0xac
    7834:	009b      	lsls	r3, r3, #2
    7836:	465a      	mov	r2, fp
    7838:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:889

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    783a:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    783c:	1c28      	adds	r0, r5, #0
    783e:	f7f9 faa9 	bl	d94 <__aeabi_fmul>
    7842:	2100      	movs	r1, #0
    7844:	f7f8 ff56 	bl	6f4 <__aeabi_fadd>
    7848:	23ad      	movs	r3, #173	; 0xad
    784a:	009b      	lsls	r3, r3, #2
    784c:	465a      	mov	r2, fp
    784e:	58d1      	ldr	r1, [r2, r3]
    7850:	1c06      	adds	r6, r0, #0
    7852:	1c20      	adds	r0, r4, #0
    7854:	f7f9 fa9e 	bl	d94 <__aeabi_fmul>
    7858:	1c01      	adds	r1, r0, #0
    785a:	1c30      	adds	r0, r6, #0
    785c:	f7f8 ff4a 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:888
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = 0.0F;

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
    7860:	239a      	movs	r3, #154	; 0x9a
    7862:	009b      	lsls	r3, r3, #2
    7864:	465a      	mov	r2, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    7866:	900c      	str	r0, [sp, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:888
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = 0.0F;

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
    7868:	58d1      	ldr	r1, [r2, r3]
    786a:	1c28      	adds	r0, r5, #0
    786c:	f7f9 fa92 	bl	d94 <__aeabi_fmul>
    7870:	2100      	movs	r1, #0
    7872:	f7f8 ff3f 	bl	6f4 <__aeabi_fadd>
    7876:	239b      	movs	r3, #155	; 0x9b
    7878:	009b      	lsls	r3, r3, #2
    787a:	465a      	mov	r2, fp
    787c:	58d1      	ldr	r1, [r2, r3]
    787e:	1c06      	adds	r6, r0, #0
    7880:	1c20      	adds	r0, r4, #0
    7882:	f7f9 fa87 	bl	d94 <__aeabi_fmul>
    7886:	1c01      	adds	r1, r0, #0
    7888:	1c30      	adds	r0, r6, #0
    788a:	f7f8 ff33 	bl	6f4 <__aeabi_fadd>
    788e:	239c      	movs	r3, #156	; 0x9c
    7890:	009b      	lsls	r3, r3, #2
    7892:	465a      	mov	r2, fp
    7894:	58d1      	ldr	r1, [r2, r3]
    7896:	1c06      	adds	r6, r0, #0
    7898:	1c38      	adds	r0, r7, #0
    789a:	f7f9 fa7b 	bl	d94 <__aeabi_fmul>
    789e:	1c01      	adds	r1, r0, #0
    78a0:	1c30      	adds	r0, r6, #0
    78a2:	f7f8 ff27 	bl	6f4 <__aeabi_fadd>
    78a6:	465b      	mov	r3, fp
    78a8:	6758      	str	r0, [r3, #116]	; 0x74
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:889
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    78aa:	23a5      	movs	r3, #165	; 0xa5
    78ac:	009b      	lsls	r3, r3, #2
    78ae:	465a      	mov	r2, fp
    78b0:	2080      	movs	r0, #128	; 0x80
    78b2:	58d1      	ldr	r1, [r2, r3]
    78b4:	4681      	mov	r9, r0
    78b6:	1c38      	adds	r0, r7, #0
    78b8:	f7f9 fa6c 	bl	d94 <__aeabi_fmul>
    78bc:	1c01      	adds	r1, r0, #0
    78be:	4640      	mov	r0, r8
    78c0:	f7f8 ff18 	bl	6f4 <__aeabi_fadd>
    78c4:	465b      	mov	r3, fp
    78c6:	444b      	add	r3, r9
    78c8:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    78ca:	23ae      	movs	r3, #174	; 0xae
    78cc:	009b      	lsls	r3, r3, #2
    78ce:	465a      	mov	r2, fp
    78d0:	20e8      	movs	r0, #232	; 0xe8
    78d2:	58d1      	ldr	r1, [r2, r3]
    78d4:	4680      	mov	r8, r0
    78d6:	1c38      	adds	r0, r7, #0
    78d8:	f7f9 fa5c 	bl	d94 <__aeabi_fmul>
    78dc:	1c01      	adds	r1, r0, #0
    78de:	980c      	ldr	r0, [sp, #48]	; 0x30
    78e0:	f7f8 ff08 	bl	6f4 <__aeabi_fadd>
    78e4:	465b      	mov	r3, fp
    78e6:	4443      	add	r3, r8
    78e8:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:889

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    78ea:	23a6      	movs	r3, #166	; 0xa6
    78ec:	009b      	lsls	r3, r3, #2
    78ee:	465a      	mov	r2, fp
    78f0:	58d1      	ldr	r1, [r2, r3]
    78f2:	1c28      	adds	r0, r5, #0
    78f4:	f7f9 fa4e 	bl	d94 <__aeabi_fmul>
    78f8:	2100      	movs	r1, #0
    78fa:	f7f8 fefb 	bl	6f4 <__aeabi_fadd>
    78fe:	23a7      	movs	r3, #167	; 0xa7
    7900:	009b      	lsls	r3, r3, #2
    7902:	465a      	mov	r2, fp
    7904:	58d1      	ldr	r1, [r2, r3]
    7906:	1c06      	adds	r6, r0, #0
    7908:	1c20      	adds	r0, r4, #0
    790a:	f7f9 fa43 	bl	d94 <__aeabi_fmul>
    790e:	1c01      	adds	r1, r0, #0
    7910:	1c30      	adds	r0, r6, #0
    7912:	f7f8 feef 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    7916:	23af      	movs	r3, #175	; 0xaf
    7918:	009b      	lsls	r3, r3, #2
    791a:	465a      	mov	r2, fp
    791c:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:889

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    791e:	900c      	str	r0, [sp, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    7920:	1c28      	adds	r0, r5, #0
    7922:	f7f9 fa37 	bl	d94 <__aeabi_fmul>
    7926:	2100      	movs	r1, #0
    7928:	f7f8 fee4 	bl	6f4 <__aeabi_fadd>
    792c:	23b0      	movs	r3, #176	; 0xb0
    792e:	009b      	lsls	r3, r3, #2
    7930:	465a      	mov	r2, fp
    7932:	58d1      	ldr	r1, [r2, r3]
    7934:	1c06      	adds	r6, r0, #0
    7936:	1c20      	adds	r0, r4, #0
    7938:	f7f9 fa2c 	bl	d94 <__aeabi_fmul>
    793c:	1c01      	adds	r1, r0, #0
    793e:	1c30      	adds	r0, r6, #0
    7940:	f7f8 fed8 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:888
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = 0.0F;

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
    7944:	239d      	movs	r3, #157	; 0x9d
    7946:	465a      	mov	r2, fp
    7948:	009b      	lsls	r3, r3, #2
    794a:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    794c:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:888
		pthisSV->fThErrPl[i] = pthisSV->fbErrPl[i] = pthisSV->faErrSePl[i] = 0.0F;

		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
    794e:	1c28      	adds	r0, r5, #0
    7950:	f7f9 fa20 	bl	d94 <__aeabi_fmul>
    7954:	2100      	movs	r1, #0
    7956:	f7f8 fecd 	bl	6f4 <__aeabi_fadd>
    795a:	239e      	movs	r3, #158	; 0x9e
    795c:	009b      	lsls	r3, r3, #2
    795e:	1c05      	adds	r5, r0, #0
    7960:	1c20      	adds	r0, r4, #0
    7962:	465c      	mov	r4, fp
    7964:	58e1      	ldr	r1, [r4, r3]
    7966:	f7f9 fa15 	bl	d94 <__aeabi_fmul>
    796a:	1c01      	adds	r1, r0, #0
    796c:	1c28      	adds	r0, r5, #0
    796e:	f7f8 fec1 	bl	6f4 <__aeabi_fadd>
    7972:	239f      	movs	r3, #159	; 0x9f
    7974:	009b      	lsls	r3, r3, #2
    7976:	465a      	mov	r2, fp
    7978:	58d1      	ldr	r1, [r2, r3]
    797a:	1c04      	adds	r4, r0, #0
    797c:	1c38      	adds	r0, r7, #0
    797e:	f7f9 fa09 	bl	d94 <__aeabi_fmul>
    7982:	1c01      	adds	r1, r0, #0
    7984:	1c20      	adds	r0, r4, #0
    7986:	f7f8 feb5 	bl	6f4 <__aeabi_fadd>
    798a:	465b      	mov	r3, fp
    798c:	6798      	str	r0, [r3, #120]	; 0x78
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:889
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
    798e:	23a8      	movs	r3, #168	; 0xa8
    7990:	009b      	lsls	r3, r3, #2
    7992:	465a      	mov	r2, fp
    7994:	58d1      	ldr	r1, [r2, r3]
    7996:	1c38      	adds	r0, r7, #0
    7998:	f7f9 f9fc 	bl	d94 <__aeabi_fmul>
    799c:	1c01      	adds	r1, r0, #0
    799e:	980c      	ldr	r0, [sp, #48]	; 0x30
    79a0:	f7f8 fea8 	bl	6f4 <__aeabi_fadd>
    79a4:	2484      	movs	r4, #132	; 0x84
    79a6:	465b      	mov	r3, fp
    79a8:	5118      	str	r0, [r3, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    79aa:	23b1      	movs	r3, #177	; 0xb1
    79ac:	009b      	lsls	r3, r3, #2
    79ae:	465a      	mov	r2, fp
    79b0:	58d1      	ldr	r1, [r2, r3]
    79b2:	1c38      	adds	r0, r7, #0
    79b4:	f7f9 f9ee 	bl	d94 <__aeabi_fmul>
    79b8:	1c01      	adds	r1, r0, #0
    79ba:	1c30      	adds	r0, r6, #0
    79bc:	f7f8 fe9a 	bl	6f4 <__aeabi_fadd>
    79c0:	25ec      	movs	r5, #236	; 0xec
    79c2:	465b      	mov	r3, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:899
	// *********************************************************************************
	// apply the a posteriori error corrections to the a posteriori state vector
	// *********************************************************************************

	// get the a posteriori delta quaternion
	fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), pthisSV->fThErrPl, -1.0F);
    79c4:	4659      	mov	r1, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:890
		// accumulate the error vector terms K * ze-
		for (k = 0; k < 3; k++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK9x3[i][k] * pthisSV->fgErrSeMi[k];
			pthisSV->fbErrPl[i] += pthisSV->fK9x3[i + 3][k] * pthisSV->fgErrSeMi[k];
			pthisSV->faErrSePl[i] += pthisSV->fK9x3[i + 6][k] * pthisSV->fgErrSeMi[k];
    79c6:	5158      	str	r0, [r3, r5]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:899
	// *********************************************************************************
	// apply the a posteriori error corrections to the a posteriori state vector
	// *********************************************************************************

	// get the a posteriori delta quaternion
	fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), pthisSV->fThErrPl, -1.0F);
    79c8:	3170      	adds	r1, #112	; 0x70
    79ca:	9806      	ldr	r0, [sp, #24]
    79cc:	4aa3      	ldr	r2, [pc, #652]	; (7c5c <fRun_6DOF_GY_KALMAN+0xc1c>)
    79ce:	f007 ff6d 	bl	f8ac <fQuaternionFromRotationVectorDeg>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:903

	// compute the a posteriori orientation quaternion fqPl = fqMi * Deltaq(-thetae+)
	// the resulting quaternion may have negative scalar component q0
	qAeqBxC(&(pthisSV->fqPl), &(pthisSV->fqMi), &(pthisSV->fDeltaq));
    79d2:	9a06      	ldr	r2, [sp, #24]
    79d4:	9908      	ldr	r1, [sp, #32]
    79d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    79d8:	f008 fc4a 	bl	10270 <qAeqBxC>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:907

	// normalize the a posteriori orientation quaternion to stop error propagation 
	// the renormalization function ensures that the scalar component q0 is non-negative
	fqAeqNormqA(&(pthisSV->fqPl));
    79dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    79de:	f008 fd87 	bl	104f0 <fqAeqNormqA>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:910

	// compute the a posteriori rotation matrix from the a posteriori quaternion
	fRotationMatrixFromQuaternion(pthisSV->fRPl, &(pthisSV->fqPl));
    79e2:	980d      	ldr	r0, [sp, #52]	; 0x34
    79e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    79e6:	f008 f8cb 	bl	fb80 <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:913

	// compute the rotation vector from the a posteriori quaternion
	fRotationVectorDegFromQuaternion(&(pthisSV->fqPl), pthisSV->fRVecPl);
    79ea:	4659      	mov	r1, fp
    79ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
    79ee:	3148      	adds	r1, #72	; 0x48
    79f0:	f008 f956 	bl	fca0 <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:919

	// update the a posteriori gyro offset vector b+ and linear acceleration vector a+ (sensor frame)
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    79f4:	4659      	mov	r1, fp
    79f6:	6e48      	ldr	r0, [r1, #100]	; 0x64
    79f8:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
    79fa:	f7f9 faf5 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:921
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    79fe:	2384      	movs	r3, #132	; 0x84
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:919

	// update the a posteriori gyro offset vector b+ and linear acceleration vector a+ (sensor frame)
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    7a00:	465a      	mov	r2, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:921
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    7a02:	005b      	lsls	r3, r3, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:919

	// update the a posteriori gyro offset vector b+ and linear acceleration vector a+ (sensor frame)
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    7a04:	6650      	str	r0, [r2, #100]	; 0x64
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:921
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    7a06:	58d0      	ldr	r0, [r2, r3]
    7a08:	465b      	mov	r3, fp
    7a0a:	4453      	add	r3, sl
    7a0c:	6819      	ldr	r1, [r3, #0]
    7a0e:	f7f9 faeb 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:919

	// update the a posteriori gyro offset vector b+ and linear acceleration vector a+ (sensor frame)
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    7a12:	465a      	mov	r2, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:921
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    7a14:	23d8      	movs	r3, #216	; 0xd8
    7a16:	4659      	mov	r1, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:919

	// update the a posteriori gyro offset vector b+ and linear acceleration vector a+ (sensor frame)
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    7a18:	444a      	add	r2, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:921
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    7a1a:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:919

	// update the a posteriori gyro offset vector b+ and linear acceleration vector a+ (sensor frame)
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    7a1c:	6e88      	ldr	r0, [r1, #104]	; 0x68
    7a1e:	6811      	ldr	r1, [r2, #0]
    7a20:	f7f9 fae2 	bl	fe8 <__aeabi_fsub>
    7a24:	465b      	mov	r3, fp
    7a26:	6698      	str	r0, [r3, #104]	; 0x68
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:921
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    7a28:	465a      	mov	r2, fp
    7a2a:	2386      	movs	r3, #134	; 0x86
    7a2c:	4442      	add	r2, r8
    7a2e:	005b      	lsls	r3, r3, #1
    7a30:	4659      	mov	r1, fp
    7a32:	58c8      	ldr	r0, [r1, r3]
    7a34:	6811      	ldr	r1, [r2, #0]
    7a36:	f7f9 fad7 	bl	fe8 <__aeabi_fsub>
    7a3a:	23dc      	movs	r3, #220	; 0xdc
    7a3c:	4659      	mov	r1, fp
    7a3e:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:919

	// update the a posteriori gyro offset vector b+ and linear acceleration vector a+ (sensor frame)
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    7a40:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    7a42:	5909      	ldr	r1, [r1, r4]
    7a44:	f7f9 fad0 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:921
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    7a48:	2388      	movs	r3, #136	; 0x88
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:919

	// update the a posteriori gyro offset vector b+ and linear acceleration vector a+ (sensor frame)
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    7a4a:	465a      	mov	r2, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:921
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    7a4c:	005b      	lsls	r3, r3, #1
    7a4e:	5951      	ldr	r1, [r2, r5]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:919

	// update the a posteriori gyro offset vector b+ and linear acceleration vector a+ (sensor frame)
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    7a50:	66d0      	str	r0, [r2, #108]	; 0x6c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:921
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    7a52:	58d0      	ldr	r0, [r2, r3]
    7a54:	f7f9 fac8 	bl	fe8 <__aeabi_fsub>
    7a58:	465c      	mov	r4, fp
    7a5a:	23e0      	movs	r3, #224	; 0xe0
    7a5c:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:931
	// *********************************************************************************

	if (ithisCoordSystem == NED)
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
    7a5e:	465b      	mov	r3, fp
    7a60:	330c      	adds	r3, #12
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:928

	// *********************************************************************************
	// compute the a posteriori Euler angles from the orientation matrix
	// *********************************************************************************

	if (ithisCoordSystem == NED)
    7a62:	9c0e      	ldr	r4, [sp, #56]	; 0x38
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:931
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
    7a64:	465a      	mov	r2, fp
    7a66:	9300      	str	r3, [sp, #0]
    7a68:	3304      	adds	r3, #4
    7a6a:	9301      	str	r3, [sp, #4]
    7a6c:	3204      	adds	r2, #4
    7a6e:	980d      	ldr	r0, [sp, #52]	; 0x34
    7a70:	4659      	mov	r1, fp
    7a72:	3b08      	subs	r3, #8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:928

	// *********************************************************************************
	// compute the a posteriori Euler angles from the orientation matrix
	// *********************************************************************************

	if (ithisCoordSystem == NED)
    7a74:	2c00      	cmp	r4, #0
    7a76:	d100      	bne.n	7a7a <fRun_6DOF_GY_KALMAN+0xa3a>
    7a78:	e2b7      	b.n	7fea <fRun_6DOF_GY_KALMAN+0xfaa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:934
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
				&(pthisSV->fRhoPl), &(pthisSV->fChiPl));
	}
	else if (ithisCoordSystem == ANDROID)
    7a7a:	2c01      	cmp	r4, #1
    7a7c:	d100      	bne.n	7a80 <fRun_6DOF_GY_KALMAN+0xa40>
    7a7e:	e2bd      	b.n	7ffc <fRun_6DOF_GY_KALMAN+0xfbc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:943
				&(pthisSV->fRhoPl), &(pthisSV->fChiPl));
	}
	else
	{
		// calculate Win8 Euler angles
		fWin8AnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
    7a80:	f007 fe56 	bl	f730 <fWin8AnglesDegFromRotationMatrix>
    7a84:	20d4      	movs	r0, #212	; 0xd4
    7a86:	0040      	lsls	r0, r0, #1
    7a88:	9c07      	ldr	r4, [sp, #28]
    7a8a:	1c01      	adds	r1, r0, #0
    7a8c:	4459      	add	r1, fp
    7a8e:	465b      	mov	r3, fp
    7a90:	9107      	str	r1, [sp, #28]
    7a92:	9308      	str	r3, [sp, #32]
    7a94:	46a3      	mov	fp, r4
    7a96:	21b4      	movs	r1, #180	; 0xb4
    7a98:	0089      	lsls	r1, r1, #2
    7a9a:	2024      	movs	r0, #36	; 0x24
    7a9c:	4240      	negs	r0, r0
    7a9e:	1c0c      	adds	r4, r1, #0
    7aa0:	21bd      	movs	r1, #189	; 0xbd
    7aa2:	4681      	mov	r9, r0
    7aa4:	0089      	lsls	r1, r1, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:858
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 3; k++)
			{
				if (*pftmpA9x3ik != 0.0F)
    7aa6:	9809      	ldr	r0, [sp, #36]	; 0x24
    7aa8:	445c      	add	r4, fp
    7aaa:	4688      	mov	r8, r1
    7aac:	44d9      	add	r9, fp
    7aae:	9406      	str	r4, [sp, #24]
    7ab0:	4682      	mov	sl, r0
    7ab2:	44d8      	add	r8, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:965
		pfPPlus9x9ij = pthisSV->fPPlus9x9[i];

		for (j = 0; j < 9; j++) // loop over the columns of P+
		{
			// zero P+[i][j] 
			*pfPPlus9x9ij = 0.0F;
    7ab4:	2300      	movs	r3, #0
    7ab6:	464a      	mov	r2, r9
    7ab8:	6013      	str	r3, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:971

			// initialize pfC3x9ik for current i, k=0
			pfC3x9ik = pthisSV->fC3x9[i];

			// initialize pfQw9x9kj for current j, k=0
			pfQw9x9kj = &pthisSV->fQw9x9[0][j];
    7aba:	4655      	mov	r5, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:968
		{
			// zero P+[i][j] 
			*pfPPlus9x9ij = 0.0F;

			// initialize pfC3x9ik for current i, k=0
			pfC3x9ik = pthisSV->fC3x9[i];
    7abc:	9c06      	ldr	r4, [sp, #24]
    7abe:	4647      	mov	r7, r8
    7ac0:	e00a      	b.n	7ad8 <fRun_6DOF_GY_KALMAN+0xa98>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:979
			for (k = 0; k < 9; k++)
			{
				if ((*pfC3x9ik != 0.0F) && (*pfQw9x9kj != 0.0F))
				{
					if (*pfC3x9ik == 1.0F)
						*pfPPlus9x9ij += *pfQw9x9kj;
    7ac2:	4649      	mov	r1, r9
    7ac4:	6808      	ldr	r0, [r1, #0]
    7ac6:	4641      	mov	r1, r8
    7ac8:	f7f8 fe14 	bl	6f4 <__aeabi_fadd>
    7acc:	464a      	mov	r2, r9
    7ace:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:987
					else
						*pfPPlus9x9ij += *pfC3x9ik * *pfQw9x9kj;
				}

				// update pfC3x9ik and pfQw9x9kj for next iteration of k
				pfC3x9ik++;
    7ad0:	3404      	adds	r4, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:988
				pfQw9x9kj += 9;
    7ad2:	3524      	adds	r5, #36	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:974

			// initialize pfQw9x9kj for current j, k=0
			pfQw9x9kj = &pthisSV->fQw9x9[0][j];

			// sum matrix products over inner loop over k
			for (k = 0; k < 9; k++)
    7ad4:	42a7      	cmp	r7, r4
    7ad6:	d026      	beq.n	7b26 <fRun_6DOF_GY_KALMAN+0xae6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:976
			{
				if ((*pfC3x9ik != 0.0F) && (*pfQw9x9kj != 0.0F))
    7ad8:	6826      	ldr	r6, [r4, #0]
    7ada:	2100      	movs	r1, #0
    7adc:	1c30      	adds	r0, r6, #0
    7ade:	f7f8 fddb 	bl	698 <__aeabi_fcmpeq>
    7ae2:	2800      	cmp	r0, #0
    7ae4:	d1f4      	bne.n	7ad0 <fRun_6DOF_GY_KALMAN+0xa90>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:976 (discriminator 1)
    7ae6:	6828      	ldr	r0, [r5, #0]
    7ae8:	2100      	movs	r1, #0
    7aea:	4680      	mov	r8, r0
    7aec:	f7f8 fdd4 	bl	698 <__aeabi_fcmpeq>
    7af0:	2800      	cmp	r0, #0
    7af2:	d1ed      	bne.n	7ad0 <fRun_6DOF_GY_KALMAN+0xa90>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:978
				{
					if (*pfC3x9ik == 1.0F)
    7af4:	21fe      	movs	r1, #254	; 0xfe
    7af6:	1c30      	adds	r0, r6, #0
    7af8:	0589      	lsls	r1, r1, #22
    7afa:	f7f8 fdcd 	bl	698 <__aeabi_fcmpeq>
    7afe:	2800      	cmp	r0, #0
    7b00:	d1df      	bne.n	7ac2 <fRun_6DOF_GY_KALMAN+0xa82>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:980
						*pfPPlus9x9ij += *pfQw9x9kj;
					else if (*pfC3x9ik == -1.0F)
    7b02:	1c30      	adds	r0, r6, #0
    7b04:	4955      	ldr	r1, [pc, #340]	; (7c5c <fRun_6DOF_GY_KALMAN+0xc1c>)
    7b06:	f7f8 fdc7 	bl	698 <__aeabi_fcmpeq>
    7b0a:	2800      	cmp	r0, #0
    7b0c:	d100      	bne.n	7b10 <fRun_6DOF_GY_KALMAN+0xad0>
    7b0e:	e099      	b.n	7c44 <fRun_6DOF_GY_KALMAN+0xc04>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:981
						*pfPPlus9x9ij -= *pfQw9x9kj;
    7b10:	464b      	mov	r3, r9
    7b12:	6818      	ldr	r0, [r3, #0]
    7b14:	4641      	mov	r1, r8
    7b16:	f7f9 fa67 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:987
					else
						*pfPPlus9x9ij += *pfC3x9ik * *pfQw9x9kj;
				}

				// update pfC3x9ik and pfQw9x9kj for next iteration of k
				pfC3x9ik++;
    7b1a:	3404      	adds	r4, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:981
				if ((*pfC3x9ik != 0.0F) && (*pfQw9x9kj != 0.0F))
				{
					if (*pfC3x9ik == 1.0F)
						*pfPPlus9x9ij += *pfQw9x9kj;
					else if (*pfC3x9ik == -1.0F)
						*pfPPlus9x9ij -= *pfQw9x9kj;
    7b1c:	4649      	mov	r1, r9
    7b1e:	6008      	str	r0, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:988
						*pfPPlus9x9ij += *pfC3x9ik * *pfQw9x9kj;
				}

				// update pfC3x9ik and pfQw9x9kj for next iteration of k
				pfC3x9ik++;
				pfQw9x9kj += 9;
    7b20:	3524      	adds	r5, #36	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:974

			// initialize pfQw9x9kj for current j, k=0
			pfQw9x9kj = &pthisSV->fQw9x9[0][j];

			// sum matrix products over inner loop over k
			for (k = 0; k < 9; k++)
    7b22:	42a7      	cmp	r7, r4
    7b24:	d1d8      	bne.n	7ad8 <fRun_6DOF_GY_KALMAN+0xa98>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:993
				pfQw9x9kj += 9;

			} // end of loop over k

			// increment pfPPlus9x9ij for next iteration of j
			pfPPlus9x9ij++;
    7b26:	2404      	movs	r4, #4
    7b28:	44a1      	add	r9, r4
    7b2a:	46b8      	mov	r8, r7
    7b2c:	44a2      	add	sl, r4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:962
	for (i = 0; i < 3; i++) // loop over the rows of P+
	{
		// initialize pfPPlus9x9ij for current i, j=0
		pfPPlus9x9ij = pthisSV->fPPlus9x9[i];

		for (j = 0; j < 9; j++) // loop over the columns of P+
    7b2e:	45d9      	cmp	r9, fp
    7b30:	d1c0      	bne.n	7ab4 <fRun_6DOF_GY_KALMAN+0xa74>
    7b32:	2024      	movs	r0, #36	; 0x24
    7b34:	4683      	mov	fp, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:957
	// ***********************************************************************************

	// set P+ (3x9 scratch sub-matrix) to the product C (3x9) * Qw (9x9)
	// where both C and Qw are sparse and C has a significant number of +1 entries
	// the resulting matrix is sparse but not symmetric
	for (i = 0; i < 3; i++) // loop over the rows of P+
    7b36:	9c07      	ldr	r4, [sp, #28]
    7b38:	44cb      	add	fp, r9
    7b3a:	45a3      	cmp	fp, r4
    7b3c:	d1ab      	bne.n	7a96 <fRun_6DOF_GY_KALMAN+0xa56>
    7b3e:	990a      	ldr	r1, [sp, #40]	; 0x28
    7b40:	9808      	ldr	r0, [sp, #32]
    7b42:	4688      	mov	r8, r1
    7b44:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7b46:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7b48:	2300      	movs	r3, #0
    7b4a:	4692      	mov	sl, r2
    7b4c:	4699      	mov	r9, r3
    7b4e:	9006      	str	r0, [sp, #24]
    7b50:	468b      	mov	fp, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1005
	// where working array P+ (6x12 sub-matrix) is sparse but K is not sparse
	// only on and above diagonal terms of P+ are computed since P+ is symmetric
	for (i = 0; i < 9; i++)
	{
		// initialize pfQw9x9ij for i, j=i
		pfQw9x9ij = pthisSV->fQw9x9[i] + i;
    7b52:	464e      	mov	r6, r9
    7b54:	4654      	mov	r4, sl
    7b56:	b275      	sxtb	r5, r6
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1013
		{
			// initialize pfK9x3ik for i, k=0
			pfK9x3ik = pthisSV->fK9x3[i];

			// initialize pfPPlus9x9kj for j, k=0
			pfPPlus9x9kj = *pthisSV->fPPlus9x9 + j;
    7b58:	00ad      	lsls	r5, r5, #2
    7b5a:	445d      	add	r5, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1019

			// compute on and above diagonal matrix entry
			for (k = 0; k < 3; k++)
			{
				// check for non-zero values since P+ (3x9 scratch sub-matrix) is sparse
				if (*pfPPlus9x9kj != 0.0F)
    7b5c:	682f      	ldr	r7, [r5, #0]
    7b5e:	2100      	movs	r1, #0
    7b60:	1c38      	adds	r0, r7, #0
    7b62:	f7f8 fd99 	bl	698 <__aeabi_fcmpeq>
    7b66:	2800      	cmp	r0, #0
    7b68:	d109      	bne.n	7b7e <fRun_6DOF_GY_KALMAN+0xb3e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1021
				{
					*pfQw9x9ij -= *pfK9x3ik * *pfPPlus9x9kj;
    7b6a:	4643      	mov	r3, r8
    7b6c:	6819      	ldr	r1, [r3, #0]
    7b6e:	1c38      	adds	r0, r7, #0
    7b70:	f7f9 f910 	bl	d94 <__aeabi_fmul>
    7b74:	1c01      	adds	r1, r0, #0
    7b76:	6820      	ldr	r0, [r4, #0]
    7b78:	f7f9 fa36 	bl	fe8 <__aeabi_fsub>
    7b7c:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1019

			// compute on and above diagonal matrix entry
			for (k = 0; k < 3; k++)
			{
				// check for non-zero values since P+ (3x9 scratch sub-matrix) is sparse
				if (*pfPPlus9x9kj != 0.0F)
    7b7e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    7b80:	2100      	movs	r1, #0
    7b82:	1c38      	adds	r0, r7, #0
    7b84:	f7f8 fd88 	bl	698 <__aeabi_fcmpeq>
    7b88:	2800      	cmp	r0, #0
    7b8a:	d109      	bne.n	7ba0 <fRun_6DOF_GY_KALMAN+0xb60>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1021
				{
					*pfQw9x9ij -= *pfK9x3ik * *pfPPlus9x9kj;
    7b8c:	4642      	mov	r2, r8
    7b8e:	6851      	ldr	r1, [r2, #4]
    7b90:	1c38      	adds	r0, r7, #0
    7b92:	f7f9 f8ff 	bl	d94 <__aeabi_fmul>
    7b96:	1c01      	adds	r1, r0, #0
    7b98:	6820      	ldr	r0, [r4, #0]
    7b9a:	f7f9 fa25 	bl	fe8 <__aeabi_fsub>
    7b9e:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1019

			// compute on and above diagonal matrix entry
			for (k = 0; k < 3; k++)
			{
				// check for non-zero values since P+ (3x9 scratch sub-matrix) is sparse
				if (*pfPPlus9x9kj != 0.0F)
    7ba0:	6cad      	ldr	r5, [r5, #72]	; 0x48
    7ba2:	2100      	movs	r1, #0
    7ba4:	1c28      	adds	r0, r5, #0
    7ba6:	f7f8 fd77 	bl	698 <__aeabi_fcmpeq>
    7baa:	2800      	cmp	r0, #0
    7bac:	d109      	bne.n	7bc2 <fRun_6DOF_GY_KALMAN+0xb82>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1021
				{
					*pfQw9x9ij -= *pfK9x3ik * *pfPPlus9x9kj;
    7bae:	4643      	mov	r3, r8
    7bb0:	6899      	ldr	r1, [r3, #8]
    7bb2:	1c28      	adds	r0, r5, #0
    7bb4:	f7f9 f8ee 	bl	d94 <__aeabi_fmul>
    7bb8:	1c01      	adds	r1, r0, #0
    7bba:	6820      	ldr	r0, [r4, #0]
    7bbc:	f7f9 fa14 	bl	fe8 <__aeabi_fsub>
    7bc0:	6020      	str	r0, [r4, #0]
    7bc2:	3601      	adds	r6, #1
    7bc4:	b2f6      	uxtb	r6, r6
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1007
	for (i = 0; i < 9; i++)
	{
		// initialize pfQw9x9ij for i, j=i
		pfQw9x9ij = pthisSV->fQw9x9[i] + i;

		for (j = i; j < 9; j++)
    7bc6:	b275      	sxtb	r5, r6
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1031
				pfPPlus9x9kj += 9;

			} // end of loop over k

			// increment pfQw9x9ij for next iteration of j
			pfQw9x9ij++;
    7bc8:	3404      	adds	r4, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1007
	for (i = 0; i < 9; i++)
	{
		// initialize pfQw9x9ij for i, j=i
		pfQw9x9ij = pthisSV->fQw9x9[i] + i;

		for (j = i; j < 9; j++)
    7bca:	2d08      	cmp	r5, #8
    7bcc:	ddc4      	ble.n	7b58 <fRun_6DOF_GY_KALMAN+0xb18>
    7bce:	464b      	mov	r3, r9
    7bd0:	3301      	adds	r3, #1
    7bd2:	b2db      	uxtb	r3, r3
    7bd4:	2428      	movs	r4, #40	; 0x28
    7bd6:	200c      	movs	r0, #12
    7bd8:	4699      	mov	r9, r3
    7bda:	44a2      	add	sl, r4
    7bdc:	4480      	add	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1002

	// compute P+ = (I9 - K * C) * Qw = Qw - K * (C * Qw) = Qw - K * P+ (3x9 sub-matrix)
	// storing result P+ in Qw and over-writing Qw which is OK since Qw is later computed from P+
	// where working array P+ (6x12 sub-matrix) is sparse but K is not sparse
	// only on and above diagonal terms of P+ are computed since P+ is symmetric
	for (i = 0; i < 9; i++)
    7bde:	2b09      	cmp	r3, #9
    7be0:	d1b7      	bne.n	7b52 <fRun_6DOF_GY_KALMAN+0xb12>
    7be2:	9906      	ldr	r1, [sp, #24]
    7be4:	228e      	movs	r2, #142	; 0x8e
    7be6:	0052      	lsls	r2, r2, #1
    7be8:	468b      	mov	fp, r1
    7bea:	1c16      	adds	r6, r2, #0
    7bec:	2300      	movs	r3, #0
    7bee:	445e      	add	r6, fp
    7bf0:	1c1d      	adds	r5, r3, #0
    7bf2:	469c      	mov	ip, r3
    7bf4:	46b0      	mov	r8, r6
    7bf6:	1c0f      	adds	r7, r1, #0
    7bf8:	24d6      	movs	r4, #214	; 0xd6
    7bfa:	0064      	lsls	r4, r4, #1
    7bfc:	1c23      	adds	r3, r4, #0
    7bfe:	4443      	add	r3, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1046
		// initialize pfPPlus9x9ij and pfQw9x9ij for i, j=i
		pfPPlus9x9ij = pthisSV->fPPlus9x9[i] + i;
		pfQw9x9ij = pthisSV->fQw9x9[i] + i;

		// copy the on-diagonal elements and increment pointers to enter loop at j=i+1
		*(pfPPlus9x9ij++) = *(pfQw9x9ij++);
    7c00:	681a      	ldr	r2, [r3, #0]
    7c02:	4643      	mov	r3, r8
    7c04:	3b04      	subs	r3, #4
    7c06:	601a      	str	r2, [r3, #0]
    7c08:	4663      	mov	r3, ip
    7c0a:	3301      	adds	r3, #1
    7c0c:	b2db      	uxtb	r3, r3
    7c0e:	469c      	mov	ip, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1049

		// loop over above diagonal columns j copying to below-diagonal elements
		for (j = i + 1; j < 9; j++)
    7c10:	b25b      	sxtb	r3, r3
    7c12:	2b09      	cmp	r3, #9
    7c14:	d024      	beq.n	7c60 <fRun_6DOF_GY_KALMAN+0xc20>
    7c16:	21d8      	movs	r1, #216	; 0xd8
    7c18:	0049      	lsls	r1, r1, #1
    7c1a:	1c0c      	adds	r4, r1, #0
    7c1c:	4444      	add	r4, r8
    7c1e:	4640      	mov	r0, r8
    7c20:	4662      	mov	r2, ip
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1051 (discriminator 2)
		{
			*(pfPPlus9x9ij++)= pthisSV->fPPlus9x9[j][i] = *(pfQw9x9ij++);
    7c22:	00de      	lsls	r6, r3, #3
    7c24:	18f3      	adds	r3, r6, r3
    7c26:	195b      	adds	r3, r3, r5
    7c28:	cc02      	ldmia	r4!, {r1}
    7c2a:	3346      	adds	r3, #70	; 0x46
    7c2c:	3201      	adds	r2, #1
    7c2e:	009b      	lsls	r3, r3, #2
    7c30:	b2d2      	uxtb	r2, r2
    7c32:	51d9      	str	r1, [r3, r7]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1049 (discriminator 2)

		// copy the on-diagonal elements and increment pointers to enter loop at j=i+1
		*(pfPPlus9x9ij++) = *(pfQw9x9ij++);

		// loop over above diagonal columns j copying to below-diagonal elements
		for (j = i + 1; j < 9; j++)
    7c34:	b253      	sxtb	r3, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1051 (discriminator 2)
		{
			*(pfPPlus9x9ij++)= pthisSV->fPPlus9x9[j][i] = *(pfQw9x9ij++);
    7c36:	c002      	stmia	r0!, {r1}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1049 (discriminator 2)

		// copy the on-diagonal elements and increment pointers to enter loop at j=i+1
		*(pfPPlus9x9ij++) = *(pfQw9x9ij++);

		// loop over above diagonal columns j copying to below-diagonal elements
		for (j = i + 1; j < 9; j++)
    7c38:	2b09      	cmp	r3, #9
    7c3a:	d1f2      	bne.n	7c22 <fRun_6DOF_GY_KALMAN+0xbe2>
    7c3c:	2228      	movs	r2, #40	; 0x28
    7c3e:	3501      	adds	r5, #1
    7c40:	4490      	add	r8, r2
    7c42:	e7d9      	b.n	7bf8 <fRun_6DOF_GY_KALMAN+0xbb8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:983
					if (*pfC3x9ik == 1.0F)
						*pfPPlus9x9ij += *pfQw9x9kj;
					else if (*pfC3x9ik == -1.0F)
						*pfPPlus9x9ij -= *pfQw9x9kj;
					else
						*pfPPlus9x9ij += *pfC3x9ik * *pfQw9x9kj;
    7c44:	4641      	mov	r1, r8
    7c46:	1c30      	adds	r0, r6, #0
    7c48:	f7f9 f8a4 	bl	d94 <__aeabi_fmul>
    7c4c:	464a      	mov	r2, r9
    7c4e:	1c01      	adds	r1, r0, #0
    7c50:	6810      	ldr	r0, [r2, #0]
    7c52:	f7f8 fd4f 	bl	6f4 <__aeabi_fadd>
    7c56:	464b      	mov	r3, r9
    7c58:	6018      	str	r0, [r3, #0]
    7c5a:	e739      	b.n	7ad0 <fRun_6DOF_GY_KALMAN+0xa90>
    7c5c:	bf800000 	.word	0xbf800000
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1066
	// zero the matrix Qw (9x9)
	for (i = 0; i < 9; i++)
	{
		for (j = 0; j < 9; j++)
		{
			pthisSV->fQw9x9[i][j] = 0.0F;
    7c60:	22b3      	movs	r2, #179	; 0xb3
    7c62:	2300      	movs	r3, #0
    7c64:	0092      	lsls	r2, r2, #2
    7c66:	50bb      	str	r3, [r7, r2]
    7c68:	22b4      	movs	r2, #180	; 0xb4
    7c6a:	0092      	lsls	r2, r2, #2
    7c6c:	50bb      	str	r3, [r7, r2]
    7c6e:	22b6      	movs	r2, #182	; 0xb6
    7c70:	0092      	lsls	r2, r2, #2
    7c72:	50bb      	str	r3, [r7, r2]
    7c74:	22b7      	movs	r2, #183	; 0xb7
    7c76:	0092      	lsls	r2, r2, #2
    7c78:	50bb      	str	r3, [r7, r2]
    7c7a:	22b8      	movs	r2, #184	; 0xb8
    7c7c:	0092      	lsls	r2, r2, #2
    7c7e:	50bb      	str	r3, [r7, r2]
    7c80:	22b9      	movs	r2, #185	; 0xb9
    7c82:	0092      	lsls	r2, r2, #2
    7c84:	50bb      	str	r3, [r7, r2]
    7c86:	22ba      	movs	r2, #186	; 0xba
    7c88:	0092      	lsls	r2, r2, #2
    7c8a:	50bb      	str	r3, [r7, r2]
    7c8c:	22bb      	movs	r2, #187	; 0xbb
    7c8e:	0092      	lsls	r2, r2, #2
    7c90:	50bb      	str	r3, [r7, r2]
    7c92:	22bd      	movs	r2, #189	; 0xbd
    7c94:	0092      	lsls	r2, r2, #2
    7c96:	50bb      	str	r3, [r7, r2]
    7c98:	22be      	movs	r2, #190	; 0xbe
    7c9a:	0092      	lsls	r2, r2, #2
    7c9c:	50bb      	str	r3, [r7, r2]
    7c9e:	22c0      	movs	r2, #192	; 0xc0
    7ca0:	0092      	lsls	r2, r2, #2
    7ca2:	50bb      	str	r3, [r7, r2]
    7ca4:	22c1      	movs	r2, #193	; 0xc1
    7ca6:	0092      	lsls	r2, r2, #2
    7ca8:	50bb      	str	r3, [r7, r2]
    7caa:	22c2      	movs	r2, #194	; 0xc2
    7cac:	0092      	lsls	r2, r2, #2
    7cae:	50bb      	str	r3, [r7, r2]
    7cb0:	22c3      	movs	r2, #195	; 0xc3
    7cb2:	0092      	lsls	r2, r2, #2
    7cb4:	50bb      	str	r3, [r7, r2]
    7cb6:	22c4      	movs	r2, #196	; 0xc4
    7cb8:	0092      	lsls	r2, r2, #2
    7cba:	50bb      	str	r3, [r7, r2]
    7cbc:	22c5      	movs	r2, #197	; 0xc5
    7cbe:	0092      	lsls	r2, r2, #2
    7cc0:	50bb      	str	r3, [r7, r2]
    7cc2:	22c7      	movs	r2, #199	; 0xc7
    7cc4:	0092      	lsls	r2, r2, #2
    7cc6:	50bb      	str	r3, [r7, r2]
    7cc8:	22c8      	movs	r2, #200	; 0xc8
    7cca:	0092      	lsls	r2, r2, #2
    7ccc:	50bb      	str	r3, [r7, r2]
    7cce:	22ca      	movs	r2, #202	; 0xca
    7cd0:	0092      	lsls	r2, r2, #2
    7cd2:	50bb      	str	r3, [r7, r2]
    7cd4:	22cb      	movs	r2, #203	; 0xcb
    7cd6:	0092      	lsls	r2, r2, #2
    7cd8:	50bb      	str	r3, [r7, r2]
    7cda:	22cc      	movs	r2, #204	; 0xcc
    7cdc:	0092      	lsls	r2, r2, #2
    7cde:	50bb      	str	r3, [r7, r2]
    7ce0:	22ce      	movs	r2, #206	; 0xce
    7ce2:	0092      	lsls	r2, r2, #2
    7ce4:	50bb      	str	r3, [r7, r2]
    7ce6:	22cf      	movs	r2, #207	; 0xcf
    7ce8:	0092      	lsls	r2, r2, #2
    7cea:	50bb      	str	r3, [r7, r2]
    7cec:	22d1      	movs	r2, #209	; 0xd1
    7cee:	0092      	lsls	r2, r2, #2
    7cf0:	50bb      	str	r3, [r7, r2]
    7cf2:	22d2      	movs	r2, #210	; 0xd2
    7cf4:	0092      	lsls	r2, r2, #2
    7cf6:	50bb      	str	r3, [r7, r2]
    7cf8:	22d3      	movs	r2, #211	; 0xd3
    7cfa:	0092      	lsls	r2, r2, #2
    7cfc:	50bb      	str	r3, [r7, r2]
    7cfe:	22d4      	movs	r2, #212	; 0xd4
    7d00:	0092      	lsls	r2, r2, #2
    7d02:	50bb      	str	r3, [r7, r2]
    7d04:	22d5      	movs	r2, #213	; 0xd5
    7d06:	0092      	lsls	r2, r2, #2
    7d08:	50bb      	str	r3, [r7, r2]
    7d0a:	22d6      	movs	r2, #214	; 0xd6
    7d0c:	0092      	lsls	r2, r2, #2
    7d0e:	50bb      	str	r3, [r7, r2]
    7d10:	22d8      	movs	r2, #216	; 0xd8
    7d12:	0092      	lsls	r2, r2, #2
    7d14:	50bb      	str	r3, [r7, r2]
    7d16:	22d9      	movs	r2, #217	; 0xd9
    7d18:	0092      	lsls	r2, r2, #2
    7d1a:	50bb      	str	r3, [r7, r2]
    7d1c:	22db      	movs	r2, #219	; 0xdb
    7d1e:	0092      	lsls	r2, r2, #2
    7d20:	50bb      	str	r3, [r7, r2]
    7d22:	22dc      	movs	r2, #220	; 0xdc
    7d24:	0092      	lsls	r2, r2, #2
    7d26:	50bb      	str	r3, [r7, r2]
    7d28:	22dd      	movs	r2, #221	; 0xdd
    7d2a:	0092      	lsls	r2, r2, #2
    7d2c:	50bb      	str	r3, [r7, r2]
    7d2e:	22de      	movs	r2, #222	; 0xde
    7d30:	0092      	lsls	r2, r2, #2
    7d32:	50bb      	str	r3, [r7, r2]
    7d34:	22df      	movs	r2, #223	; 0xdf
    7d36:	0092      	lsls	r2, r2, #2
    7d38:	50bb      	str	r3, [r7, r2]
    7d3a:	22e0      	movs	r2, #224	; 0xe0
    7d3c:	0092      	lsls	r2, r2, #2
    7d3e:	50bb      	str	r3, [r7, r2]
    7d40:	22e2      	movs	r2, #226	; 0xe2
    7d42:	0092      	lsls	r2, r2, #2
    7d44:	50bb      	str	r3, [r7, r2]
    7d46:	22e3      	movs	r2, #227	; 0xe3
    7d48:	0092      	lsls	r2, r2, #2
    7d4a:	50bb      	str	r3, [r7, r2]
    7d4c:	22e5      	movs	r2, #229	; 0xe5
    7d4e:	0092      	lsls	r2, r2, #2
    7d50:	50bb      	str	r3, [r7, r2]
    7d52:	22e6      	movs	r2, #230	; 0xe6
    7d54:	0092      	lsls	r2, r2, #2
    7d56:	50bb      	str	r3, [r7, r2]
    7d58:	22e7      	movs	r2, #231	; 0xe7
    7d5a:	0092      	lsls	r2, r2, #2
    7d5c:	50bb      	str	r3, [r7, r2]
    7d5e:	22e8      	movs	r2, #232	; 0xe8
    7d60:	0092      	lsls	r2, r2, #2
    7d62:	50bb      	str	r3, [r7, r2]
    7d64:	22e9      	movs	r2, #233	; 0xe9
    7d66:	0092      	lsls	r2, r2, #2
    7d68:	50bb      	str	r3, [r7, r2]
    7d6a:	22ea      	movs	r2, #234	; 0xea
    7d6c:	0092      	lsls	r2, r2, #2
    7d6e:	50bb      	str	r3, [r7, r2]
    7d70:	22eb      	movs	r2, #235	; 0xeb
    7d72:	0092      	lsls	r2, r2, #2
    7d74:	50bb      	str	r3, [r7, r2]
    7d76:	22ec      	movs	r2, #236	; 0xec
    7d78:	0092      	lsls	r2, r2, #2
    7d7a:	50bb      	str	r3, [r7, r2]
    7d7c:	22ed      	movs	r2, #237	; 0xed
    7d7e:	0092      	lsls	r2, r2, #2
    7d80:	50bb      	str	r3, [r7, r2]
    7d82:	22ef      	movs	r2, #239	; 0xef
    7d84:	0092      	lsls	r2, r2, #2
    7d86:	50bb      	str	r3, [r7, r2]
    7d88:	22f0      	movs	r2, #240	; 0xf0
    7d8a:	0092      	lsls	r2, r2, #2
    7d8c:	50bb      	str	r3, [r7, r2]
    7d8e:	22f1      	movs	r2, #241	; 0xf1
    7d90:	0092      	lsls	r2, r2, #2
    7d92:	50bb      	str	r3, [r7, r2]
    7d94:	22f2      	movs	r2, #242	; 0xf2
    7d96:	0092      	lsls	r2, r2, #2
    7d98:	50bb      	str	r3, [r7, r2]
    7d9a:	22f3      	movs	r2, #243	; 0xf3
    7d9c:	0092      	lsls	r2, r2, #2
    7d9e:	50bb      	str	r3, [r7, r2]
    7da0:	22f4      	movs	r2, #244	; 0xf4
    7da2:	0092      	lsls	r2, r2, #2
    7da4:	50bb      	str	r3, [r7, r2]
    7da6:	22f5      	movs	r2, #245	; 0xf5
    7da8:	0092      	lsls	r2, r2, #2
    7daa:	50bb      	str	r3, [r7, r2]
    7dac:	22f6      	movs	r2, #246	; 0xf6
    7dae:	0092      	lsls	r2, r2, #2
    7db0:	50bb      	str	r3, [r7, r2]
    7db2:	22f7      	movs	r2, #247	; 0xf7
    7db4:	0092      	lsls	r2, r2, #2
    7db6:	50bb      	str	r3, [r7, r2]
    7db8:	22f9      	movs	r2, #249	; 0xf9
    7dba:	0092      	lsls	r2, r2, #2
    7dbc:	50bb      	str	r3, [r7, r2]
    7dbe:	22fa      	movs	r2, #250	; 0xfa
    7dc0:	0092      	lsls	r2, r2, #2
    7dc2:	50bb      	str	r3, [r7, r2]
    7dc4:	22fb      	movs	r2, #251	; 0xfb
    7dc6:	0092      	lsls	r2, r2, #2
    7dc8:	50bb      	str	r3, [r7, r2]
    7dca:	22fc      	movs	r2, #252	; 0xfc
    7dcc:	0092      	lsls	r2, r2, #2
    7dce:	50bb      	str	r3, [r7, r2]
    7dd0:	22fd      	movs	r2, #253	; 0xfd
    7dd2:	0092      	lsls	r2, r2, #2
    7dd4:	50bb      	str	r3, [r7, r2]
    7dd6:	22fe      	movs	r2, #254	; 0xfe
    7dd8:	0092      	lsls	r2, r2, #2
    7dda:	50bb      	str	r3, [r7, r2]
    7ddc:	22ff      	movs	r2, #255	; 0xff
    7dde:	0092      	lsls	r2, r2, #2
    7de0:	50bb      	str	r3, [r7, r2]
    7de2:	2280      	movs	r2, #128	; 0x80
    7de4:	00d2      	lsls	r2, r2, #3
    7de6:	50bb      	str	r3, [r7, r2]
    7de8:	4ab6      	ldr	r2, [pc, #728]	; (80c4 <PSP_CNFG_MQX_KERNEL_LOGGING+0xc4>)
    7dea:	46bb      	mov	fp, r7
    7dec:	50bb      	str	r3, [r7, r2]
    7dee:	4bb6      	ldr	r3, [pc, #728]	; (80c8 <PSP_CNFG_MQX_KERNEL_LOGGING+0xc8>)
    7df0:	465c      	mov	r4, fp
    7df2:	58fe      	ldr	r6, [r7, r3]
    7df4:	2391      	movs	r3, #145	; 0x91
    7df6:	00db      	lsls	r3, r3, #3
    7df8:	58ff      	ldr	r7, [r7, r3]
    7dfa:	2390      	movs	r3, #144	; 0x90
    7dfc:	00db      	lsls	r3, r3, #3
    7dfe:	58e5      	ldr	r5, [r4, r3]
    7e00:	238f      	movs	r3, #143	; 0x8f
    7e02:	00db      	lsls	r3, r3, #3
    7e04:	58e4      	ldr	r4, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1074

	// update the covariance matrix components
	for (i = 0; i < 3; i++)
	{
		// Qw[th-th-] = Qw[0-2][0-2] = E[th-(th-)^T] = Q[th+th+] + deltat^2 * (Q[b+b+] + (Qwb + QvG) * I)
		pthisSV->fQw9x9[i][i] = pthisSV->fPPlus9x9[i][i] + pthisSV->fdeltatsq * (pthisSV->fPPlus9x9[i + 3][i + 3] + pthisSV->fQwbplusQvG);
    7e06:	23c8      	movs	r3, #200	; 0xc8
    7e08:	4659      	mov	r1, fp
    7e0a:	005b      	lsls	r3, r3, #1
    7e0c:	58cb      	ldr	r3, [r1, r3]
    7e0e:	2080      	movs	r0, #128	; 0x80
    7e10:	0600      	lsls	r0, r0, #24
    7e12:	182d      	adds	r5, r5, r0
    7e14:	1c39      	adds	r1, r7, #0
    7e16:	1c18      	adds	r0, r3, #0
    7e18:	4698      	mov	r8, r3
    7e1a:	f7f8 fc6b 	bl	6f4 <__aeabi_fadd>
    7e1e:	1c31      	adds	r1, r6, #0
    7e20:	f7f8 ffb8 	bl	d94 <__aeabi_fmul>
    7e24:	238c      	movs	r3, #140	; 0x8c
    7e26:	465a      	mov	r2, fp
    7e28:	005b      	lsls	r3, r3, #1
    7e2a:	1c01      	adds	r1, r0, #0
    7e2c:	58d0      	ldr	r0, [r2, r3]
    7e2e:	f7f8 fc61 	bl	6f4 <__aeabi_fadd>
    7e32:	23b2      	movs	r3, #178	; 0xb2
    7e34:	009b      	lsls	r3, r3, #2
    7e36:	4659      	mov	r1, fp
    7e38:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1077

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw9x9[i + 3][i + 3] = pthisSV->fPPlus9x9[i + 3][i + 3] + FQWB_6DOF_GY_KALMAN;
    7e3a:	4640      	mov	r0, r8
    7e3c:	49a3      	ldr	r1, [pc, #652]	; (80cc <PSP_CNFG_MQX_KERNEL_LOGGING+0xcc>)
    7e3e:	f7f8 fc59 	bl	6f4 <__aeabi_fadd>
    7e42:	23d0      	movs	r3, #208	; 0xd0
    7e44:	465a      	mov	r2, fp
    7e46:	009b      	lsls	r3, r3, #2
    7e48:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1080

		// Qw[th-b-] = Qw[0-2][3-5] = E[th-(b-)^T] = -deltat * (Q[b+b+] + Qwb * I) = -deltat * Qw[b-b-]
		pthisSV->fQw9x9[i][i + 3] = pthisSV->fQw9x9[i + 3][i] = -pthisSV->fdeltat * pthisSV->fQw9x9[i + 3][i + 3];
    7e4a:	1c29      	adds	r1, r5, #0
    7e4c:	f7f8 ffa2 	bl	d94 <__aeabi_fmul>
    7e50:	23cd      	movs	r3, #205	; 0xcd
    7e52:	4659      	mov	r1, fp
    7e54:	009b      	lsls	r3, r3, #2
    7e56:	50c8      	str	r0, [r1, r3]
    7e58:	23b5      	movs	r3, #181	; 0xb5
    7e5a:	009b      	lsls	r3, r3, #2
    7e5c:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1083

		// Qw[a-a-] = Qw[6-8][6-8] = E[a-(a-)^T] = ca^2 * Q[a+a+] + Qwa * I
		pthisSV->fQw9x9[i + 6][i + 6] = pthisSV->fcasq * pthisSV->fPPlus9x9[i + 6][i + 6] + FQWA_6DOF_GY_KALMAN;
    7e5e:	2382      	movs	r3, #130	; 0x82
    7e60:	009b      	lsls	r3, r3, #2
    7e62:	58c9      	ldr	r1, [r1, r3]
    7e64:	1c20      	adds	r0, r4, #0
    7e66:	f7f8 ff95 	bl	d94 <__aeabi_fmul>
    7e6a:	4999      	ldr	r1, [pc, #612]	; (80d0 <PSP_CNFG_MQX_KERNEL_LOGGING+0xd0>)
    7e6c:	f7f8 fc42 	bl	6f4 <__aeabi_fadd>
    7e70:	23ee      	movs	r3, #238	; 0xee
    7e72:	465a      	mov	r2, fp
    7e74:	009b      	lsls	r3, r3, #2
    7e76:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1074

	// update the covariance matrix components
	for (i = 0; i < 3; i++)
	{
		// Qw[th-th-] = Qw[0-2][0-2] = E[th-(th-)^T] = Q[th+th+] + deltat^2 * (Q[b+b+] + (Qwb + QvG) * I)
		pthisSV->fQw9x9[i][i] = pthisSV->fPPlus9x9[i][i] + pthisSV->fdeltatsq * (pthisSV->fPPlus9x9[i + 3][i + 3] + pthisSV->fQwbplusQvG);
    7e78:	23dc      	movs	r3, #220	; 0xdc
    7e7a:	005b      	lsls	r3, r3, #1
    7e7c:	58d3      	ldr	r3, [r2, r3]
    7e7e:	1c39      	adds	r1, r7, #0
    7e80:	1c18      	adds	r0, r3, #0
    7e82:	4698      	mov	r8, r3
    7e84:	f7f8 fc36 	bl	6f4 <__aeabi_fadd>
    7e88:	1c31      	adds	r1, r6, #0
    7e8a:	f7f8 ff83 	bl	d94 <__aeabi_fmul>
    7e8e:	23a0      	movs	r3, #160	; 0xa0
    7e90:	465a      	mov	r2, fp
    7e92:	005b      	lsls	r3, r3, #1
    7e94:	1c01      	adds	r1, r0, #0
    7e96:	58d0      	ldr	r0, [r2, r3]
    7e98:	f7f8 fc2c 	bl	6f4 <__aeabi_fadd>
    7e9c:	23bc      	movs	r3, #188	; 0xbc
    7e9e:	009b      	lsls	r3, r3, #2
    7ea0:	4659      	mov	r1, fp
    7ea2:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1077

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw9x9[i + 3][i + 3] = pthisSV->fPPlus9x9[i + 3][i + 3] + FQWB_6DOF_GY_KALMAN;
    7ea4:	4640      	mov	r0, r8
    7ea6:	4989      	ldr	r1, [pc, #548]	; (80cc <PSP_CNFG_MQX_KERNEL_LOGGING+0xcc>)
    7ea8:	f7f8 fc24 	bl	6f4 <__aeabi_fadd>
    7eac:	23da      	movs	r3, #218	; 0xda
    7eae:	465a      	mov	r2, fp
    7eb0:	009b      	lsls	r3, r3, #2
    7eb2:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1080

		// Qw[th-b-] = Qw[0-2][3-5] = E[th-(b-)^T] = -deltat * (Q[b+b+] + Qwb * I) = -deltat * Qw[b-b-]
		pthisSV->fQw9x9[i][i + 3] = pthisSV->fQw9x9[i + 3][i] = -pthisSV->fdeltat * pthisSV->fQw9x9[i + 3][i + 3];
    7eb4:	1c29      	adds	r1, r5, #0
    7eb6:	f7f8 ff6d 	bl	d94 <__aeabi_fmul>
    7eba:	23d7      	movs	r3, #215	; 0xd7
    7ebc:	4659      	mov	r1, fp
    7ebe:	009b      	lsls	r3, r3, #2
    7ec0:	50c8      	str	r0, [r1, r3]
    7ec2:	23bf      	movs	r3, #191	; 0xbf
    7ec4:	009b      	lsls	r3, r3, #2
    7ec6:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1083

		// Qw[a-a-] = Qw[6-8][6-8] = E[a-(a-)^T] = ca^2 * Q[a+a+] + Qwa * I
		pthisSV->fQw9x9[i + 6][i + 6] = pthisSV->fcasq * pthisSV->fPPlus9x9[i + 6][i + 6] + FQWA_6DOF_GY_KALMAN;
    7ec8:	238c      	movs	r3, #140	; 0x8c
    7eca:	009b      	lsls	r3, r3, #2
    7ecc:	58c9      	ldr	r1, [r1, r3]
    7ece:	1c20      	adds	r0, r4, #0
    7ed0:	f7f8 ff60 	bl	d94 <__aeabi_fmul>
    7ed4:	497e      	ldr	r1, [pc, #504]	; (80d0 <PSP_CNFG_MQX_KERNEL_LOGGING+0xd0>)
    7ed6:	f7f8 fc0d 	bl	6f4 <__aeabi_fadd>
    7eda:	23f8      	movs	r3, #248	; 0xf8
    7edc:	465a      	mov	r2, fp
    7ede:	009b      	lsls	r3, r3, #2
    7ee0:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1074

	// update the covariance matrix components
	for (i = 0; i < 3; i++)
	{
		// Qw[th-th-] = Qw[0-2][0-2] = E[th-(th-)^T] = Q[th+th+] + deltat^2 * (Q[b+b+] + (Qwb + QvG) * I)
		pthisSV->fQw9x9[i][i] = pthisSV->fPPlus9x9[i][i] + pthisSV->fdeltatsq * (pthisSV->fPPlus9x9[i + 3][i + 3] + pthisSV->fQwbplusQvG);
    7ee2:	23f0      	movs	r3, #240	; 0xf0
    7ee4:	005b      	lsls	r3, r3, #1
    7ee6:	58d3      	ldr	r3, [r2, r3]
    7ee8:	1c39      	adds	r1, r7, #0
    7eea:	1c18      	adds	r0, r3, #0
    7eec:	4698      	mov	r8, r3
    7eee:	f7f8 fc01 	bl	6f4 <__aeabi_fadd>
    7ef2:	1c31      	adds	r1, r6, #0
    7ef4:	f7f8 ff4e 	bl	d94 <__aeabi_fmul>
    7ef8:	23b4      	movs	r3, #180	; 0xb4
    7efa:	465a      	mov	r2, fp
    7efc:	005b      	lsls	r3, r3, #1
    7efe:	1c01      	adds	r1, r0, #0
    7f00:	58d0      	ldr	r0, [r2, r3]
    7f02:	f7f8 fbf7 	bl	6f4 <__aeabi_fadd>
    7f06:	23c6      	movs	r3, #198	; 0xc6
    7f08:	009b      	lsls	r3, r3, #2
    7f0a:	4659      	mov	r1, fp
    7f0c:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1077

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw9x9[i + 3][i + 3] = pthisSV->fPPlus9x9[i + 3][i + 3] + FQWB_6DOF_GY_KALMAN;
    7f0e:	496f      	ldr	r1, [pc, #444]	; (80cc <PSP_CNFG_MQX_KERNEL_LOGGING+0xcc>)
    7f10:	4640      	mov	r0, r8
    7f12:	f7f8 fbef 	bl	6f4 <__aeabi_fadd>
    7f16:	23e4      	movs	r3, #228	; 0xe4
    7f18:	465a      	mov	r2, fp
    7f1a:	009b      	lsls	r3, r3, #2
    7f1c:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1080

		// Qw[th-b-] = Qw[0-2][3-5] = E[th-(b-)^T] = -deltat * (Q[b+b+] + Qwb * I) = -deltat * Qw[b-b-]
		pthisSV->fQw9x9[i][i + 3] = pthisSV->fQw9x9[i + 3][i] = -pthisSV->fdeltat * pthisSV->fQw9x9[i + 3][i + 3];
    7f1e:	1c29      	adds	r1, r5, #0
    7f20:	f7f8 ff38 	bl	d94 <__aeabi_fmul>
    7f24:	23e1      	movs	r3, #225	; 0xe1
    7f26:	4659      	mov	r1, fp
    7f28:	009b      	lsls	r3, r3, #2
    7f2a:	50c8      	str	r0, [r1, r3]
    7f2c:	23c9      	movs	r3, #201	; 0xc9
    7f2e:	009b      	lsls	r3, r3, #2
    7f30:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1083

		// Qw[a-a-] = Qw[6-8][6-8] = E[a-(a-)^T] = ca^2 * Q[a+a+] + Qwa * I
		pthisSV->fQw9x9[i + 6][i + 6] = pthisSV->fcasq * pthisSV->fPPlus9x9[i + 6][i + 6] + FQWA_6DOF_GY_KALMAN;
    7f32:	2396      	movs	r3, #150	; 0x96
    7f34:	009b      	lsls	r3, r3, #2
    7f36:	58c9      	ldr	r1, [r1, r3]
    7f38:	1c20      	adds	r0, r4, #0
    7f3a:	f7f8 ff2b 	bl	d94 <__aeabi_fmul>
    7f3e:	4964      	ldr	r1, [pc, #400]	; (80d0 <PSP_CNFG_MQX_KERNEL_LOGGING+0xd0>)
    7f40:	f7f8 fbd8 	bl	6f4 <__aeabi_fadd>
    7f44:	2381      	movs	r3, #129	; 0x81
    7f46:	00db      	lsls	r3, r3, #3
    7f48:	465a      	mov	r2, fp
    7f4a:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1087
	}

	return;
} // end fRun_6DOF_GY_KALMAN
    7f4c:	b035      	add	sp, #212	; 0xd4
    7f4e:	bc3c      	pop	{r2, r3, r4, r5}
    7f50:	4690      	mov	r8, r2
    7f52:	4699      	mov	r9, r3
    7f54:	46a2      	mov	sl, r4
    7f56:	46ab      	mov	fp, r5
    7f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:681
	for (i = X; i <= Z; i++)
	{
		if (ithisCoordSystem == NED)
		{
			// NED gravity is along positive z axis
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
    7f5a:	4659      	mov	r1, fp
    7f5c:	58cc      	ldr	r4, [r1, r3]
    7f5e:	23fc      	movs	r3, #252	; 0xfc
    7f60:	50cc      	str	r4, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    7f62:	23d8      	movs	r3, #216	; 0xd8
    7f64:	58c8      	ldr	r0, [r1, r3]
    7f66:	21fc      	movs	r1, #252	; 0xfc
    7f68:	0589      	lsls	r1, r1, #22
    7f6a:	f7f8 ff13 	bl	d94 <__aeabi_fmul>
    7f6e:	2384      	movs	r3, #132	; 0x84
    7f70:	465a      	mov	r2, fp
    7f72:	005b      	lsls	r3, r3, #1
    7f74:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    7f76:	9b07      	ldr	r3, [sp, #28]
    7f78:	68d9      	ldr	r1, [r3, #12]
    7f7a:	f7f8 fbbb 	bl	6f4 <__aeabi_fadd>
    7f7e:	1c21      	adds	r1, r4, #0
    7f80:	f7f9 f832 	bl	fe8 <__aeabi_fsub>
    7f84:	465c      	mov	r4, fp
    7f86:	23f0      	movs	r3, #240	; 0xf0
    7f88:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:681
	for (i = X; i <= Z; i++)
	{
		if (ithisCoordSystem == NED)
		{
			// NED gravity is along positive z axis
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
    7f8a:	23a8      	movs	r3, #168	; 0xa8
    7f8c:	58e4      	ldr	r4, [r4, r3]
    7f8e:	2380      	movs	r3, #128	; 0x80
    7f90:	005b      	lsls	r3, r3, #1
    7f92:	4658      	mov	r0, fp
    7f94:	50c4      	str	r4, [r0, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    7f96:	21fc      	movs	r1, #252	; 0xfc
    7f98:	23dc      	movs	r3, #220	; 0xdc
    7f9a:	58c0      	ldr	r0, [r0, r3]
    7f9c:	0589      	lsls	r1, r1, #22
    7f9e:	f7f8 fef9 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    7fa2:	9a07      	ldr	r2, [sp, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    7fa4:	2386      	movs	r3, #134	; 0x86
    7fa6:	005b      	lsls	r3, r3, #1
    7fa8:	4659      	mov	r1, fp
    7faa:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    7fac:	6911      	ldr	r1, [r2, #16]
    7fae:	f7f8 fba1 	bl	6f4 <__aeabi_fadd>
    7fb2:	1c21      	adds	r1, r4, #0
    7fb4:	f7f9 f818 	bl	fe8 <__aeabi_fsub>
    7fb8:	465c      	mov	r4, fp
    7fba:	23f4      	movs	r3, #244	; 0xf4
    7fbc:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:681
	for (i = X; i <= Z; i++)
	{
		if (ithisCoordSystem == NED)
		{
			// NED gravity is along positive z axis
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
    7fbe:	23b4      	movs	r3, #180	; 0xb4
    7fc0:	58e4      	ldr	r4, [r4, r3]
    7fc2:	2382      	movs	r3, #130	; 0x82
    7fc4:	005b      	lsls	r3, r3, #1
    7fc6:	4658      	mov	r0, fp
    7fc8:	50c4      	str	r4, [r0, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    7fca:	21fc      	movs	r1, #252	; 0xfc
    7fcc:	23e0      	movs	r3, #224	; 0xe0
    7fce:	58c0      	ldr	r0, [r0, r3]
    7fd0:	0589      	lsls	r1, r1, #22
    7fd2:	f7f8 fedf 	bl	d94 <__aeabi_fmul>
    7fd6:	2388      	movs	r3, #136	; 0x88
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    7fd8:	9a07      	ldr	r2, [sp, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    7fda:	4659      	mov	r1, fp
    7fdc:	005b      	lsls	r3, r3, #1
    7fde:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    7fe0:	6951      	ldr	r1, [r2, #20]
    7fe2:	f7f8 fb87 	bl	6f4 <__aeabi_fadd>
    7fe6:	f7ff f936 	bl	7256 <fRun_6DOF_GY_KALMAN+0x216>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:931
	// *********************************************************************************

	if (ithisCoordSystem == NED)
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
    7fea:	f007 fab5 	bl	f558 <fNEDAnglesDegFromRotationMatrix>
    7fee:	e549      	b.n	7a84 <fRun_6DOF_GY_KALMAN+0xa44>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:602
	int8 iPivot[3];

	// do a reset and return if requested
	if (pthisSV->resetflag)
	{
		fInit_6DOF_GY_KALMAN(pthisSV, SENSORFS, OVERSAMPLE_RATIO);
    7ff0:	4658      	mov	r0, fp
    7ff2:	21c8      	movs	r1, #200	; 0xc8
    7ff4:	2208      	movs	r2, #8
    7ff6:	f7fd ff37 	bl	5e68 <fInit_6DOF_GY_KALMAN>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:603
		return;
    7ffa:	e7a7      	b.n	7f4c <fRun_6DOF_GY_KALMAN+0xf0c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:937
				&(pthisSV->fRhoPl), &(pthisSV->fChiPl));
	}
	else if (ithisCoordSystem == ANDROID)
	{
		// calculate the Android Euler angles
		fAndroidAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
    7ffc:	f007 fb22 	bl	f644 <fAndroidAnglesDegFromRotationMatrix>
    8000:	e540      	b.n	7a84 <fRun_6DOF_GY_KALMAN+0xa44>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:613
	{
		// get the 3DOF orientation matrix and initial inclination angle
		if (ithisCoordSystem == NED)
		{
			// call NED tilt function
			f3DOFTiltNED(pthisSV->fRPl, pthisAccel->fGpFast);
    8002:	465c      	mov	r4, fp
    8004:	9907      	ldr	r1, [sp, #28]
    8006:	3414      	adds	r4, #20
    8008:	1c20      	adds	r0, r4, #0
    800a:	310c      	adds	r1, #12
    800c:	940d      	str	r4, [sp, #52]	; 0x34
    800e:	f006 fb99 	bl	e744 <f3DOFTiltNED>
    8012:	f7ff f841 	bl	7098 <fRun_6DOF_GY_KALMAN+0x58>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:686
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    8016:	58c4      	ldr	r4, [r0, r3]
    8018:	2180      	movs	r1, #128	; 0x80
    801a:	0609      	lsls	r1, r1, #24
    801c:	1864      	adds	r4, r4, r1
    801e:	23fc      	movs	r3, #252	; 0xfc
    8020:	50c4      	str	r4, [r0, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    8022:	21fc      	movs	r1, #252	; 0xfc
    8024:	23d8      	movs	r3, #216	; 0xd8
    8026:	58c0      	ldr	r0, [r0, r3]
    8028:	0589      	lsls	r1, r1, #22
    802a:	f7f8 feb3 	bl	d94 <__aeabi_fmul>
    802e:	2384      	movs	r3, #132	; 0x84
    8030:	465a      	mov	r2, fp
    8032:	005b      	lsls	r3, r3, #1
    8034:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    8036:	9b07      	ldr	r3, [sp, #28]
    8038:	68d9      	ldr	r1, [r3, #12]
    803a:	f7f8 fb5b 	bl	6f4 <__aeabi_fadd>
    803e:	1c21      	adds	r1, r4, #0
    8040:	f7f8 ffd2 	bl	fe8 <__aeabi_fsub>
    8044:	465c      	mov	r4, fp
    8046:	23f0      	movs	r3, #240	; 0xf0
    8048:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:686
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    804a:	23a8      	movs	r3, #168	; 0xa8
    804c:	58e4      	ldr	r4, [r4, r3]
    804e:	2080      	movs	r0, #128	; 0x80
    8050:	0600      	lsls	r0, r0, #24
    8052:	2380      	movs	r3, #128	; 0x80
    8054:	1824      	adds	r4, r4, r0
    8056:	4659      	mov	r1, fp
    8058:	005b      	lsls	r3, r3, #1
    805a:	50cc      	str	r4, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    805c:	23dc      	movs	r3, #220	; 0xdc
    805e:	58c8      	ldr	r0, [r1, r3]
    8060:	21fc      	movs	r1, #252	; 0xfc
    8062:	0589      	lsls	r1, r1, #22
    8064:	f7f8 fe96 	bl	d94 <__aeabi_fmul>
    8068:	2386      	movs	r3, #134	; 0x86
    806a:	465a      	mov	r2, fp
    806c:	005b      	lsls	r3, r3, #1
    806e:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    8070:	9b07      	ldr	r3, [sp, #28]
    8072:	6919      	ldr	r1, [r3, #16]
    8074:	f7f8 fb3e 	bl	6f4 <__aeabi_fadd>
    8078:	1c21      	adds	r1, r4, #0
    807a:	f7f8 ffb5 	bl	fe8 <__aeabi_fsub>
    807e:	465c      	mov	r4, fp
    8080:	23f4      	movs	r3, #244	; 0xf4
    8082:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:686
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    8084:	23b4      	movs	r3, #180	; 0xb4
    8086:	58e4      	ldr	r4, [r4, r3]
    8088:	2080      	movs	r0, #128	; 0x80
    808a:	0600      	lsls	r0, r0, #24
    808c:	2382      	movs	r3, #130	; 0x82
    808e:	4659      	mov	r1, fp
    8090:	1824      	adds	r4, r4, r0
    8092:	005b      	lsls	r3, r3, #1
    8094:	50cc      	str	r4, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:690
		}

		// compute a priori acceleration (a-) (g, sensor frame) from a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_6DOF_GY_KALMAN * pthisSV->faSePl[i];
    8096:	23e0      	movs	r3, #224	; 0xe0
    8098:	58c8      	ldr	r0, [r1, r3]
    809a:	21fc      	movs	r1, #252	; 0xfc
    809c:	0589      	lsls	r1, r1, #22
    809e:	f7f8 fe79 	bl	d94 <__aeabi_fmul>
    80a2:	2388      	movs	r3, #136	; 0x88
    80a4:	005b      	lsls	r3, r3, #1
    80a6:	465a      	mov	r2, fp
    80a8:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:696

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    80aa:	9b07      	ldr	r3, [sp, #28]
    80ac:	6959      	ldr	r1, [r3, #20]
    80ae:	e798      	b.n	7fe2 <fRun_6DOF_GY_KALMAN+0xfa2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:618
			f3DOFTiltNED(pthisSV->fRPl, pthisAccel->fGpFast);
		}
		else if (ithisCoordSystem == ANDROID)
		{
			// call Android tilt function
			f3DOFTiltAndroid(pthisSV->fRPl, pthisAccel->fGpFast);
    80b0:	465c      	mov	r4, fp
    80b2:	9907      	ldr	r1, [sp, #28]
    80b4:	3414      	adds	r4, #20
    80b6:	1c20      	adds	r0, r4, #0
    80b8:	310c      	adds	r1, #12
    80ba:	940d      	str	r4, [sp, #52]	; 0x34
    80bc:	f006 fbd8 	bl	e870 <f3DOFTiltAndroid>
    80c0:	f7fe ffea 	bl	7098 <fRun_6DOF_GY_KALMAN+0x58>
    80c4:	00000404 	.word	0x00000404
    80c8:	00000484 	.word	0x00000484
    80cc:	3089705f 	.word	0x3089705f
    80d0:	38d1b717 	.word	0x38d1b717

000080d4 <fRun_9DOF_GBY_KALMAN>:
fRun_9DOF_GBY_KALMAN():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1092
} // end fRun_6DOF_GY_KALMAN

// 9DOF orientation function implemented using a 12 element Kalman filter
void fRun_9DOF_GBY_KALMAN(struct SV_9DOF_GBY_KALMAN *pthisSV, struct AccelSensor *pthisAccel, struct MagSensor *pthisMag, struct GyroSensor *pthisGyro,
		struct MagCalibration *pthisMagCal, int16 ithisCoordSystem, int16 iOverSampleRatio)
{	
    80d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    80d6:	465f      	mov	r7, fp
    80d8:	464d      	mov	r5, r9
    80da:	4644      	mov	r4, r8
    80dc:	4656      	mov	r6, sl
    80de:	b4f0      	push	{r4, r5, r6, r7}
    80e0:	b0ef      	sub	sp, #444	; 0x1bc
    80e2:	4699      	mov	r9, r3
    80e4:	ab78      	add	r3, sp, #480	; 0x1e0
    80e6:	cb10      	ldmia	r3!, {r4}
    80e8:	4683      	mov	fp, r0
    80ea:	2000      	movs	r0, #0
    80ec:	5e1f      	ldrsh	r7, [r3, r0]
    80ee:	ab7a      	add	r3, sp, #488	; 0x1e8
    80f0:	970f      	str	r7, [sp, #60]	; 0x3c
    80f2:	2700      	movs	r7, #0
    80f4:	5fdc      	ldrsh	r4, [r3, r7]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1123
	int8 iColInd[6];
	int8 iRowInd[6];
	int8 iPivot[6];

	// do a reset and return if requested
	if (pthisSV->resetflag)
    80f6:	4bb1      	ldr	r3, [pc, #708]	; (83bc <fRun_9DOF_GBY_KALMAN+0x2e8>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1092
} // end fRun_6DOF_GY_KALMAN

// 9DOF orientation function implemented using a 12 element Kalman filter
void fRun_9DOF_GBY_KALMAN(struct SV_9DOF_GBY_KALMAN *pthisSV, struct AccelSensor *pthisAccel, struct MagSensor *pthisMag, struct GyroSensor *pthisGyro,
		struct MagCalibration *pthisMagCal, int16 ithisCoordSystem, int16 iOverSampleRatio)
{	
    80f8:	910c      	str	r1, [sp, #48]	; 0x30
    80fa:	9205      	str	r2, [sp, #20]
    80fc:	9406      	str	r4, [sp, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1123
	int8 iColInd[6];
	int8 iRowInd[6];
	int8 iPivot[6];

	// do a reset and return if requested
	if (pthisSV->resetflag)
    80fe:	4658      	mov	r0, fp
    8100:	56c3      	ldrsb	r3, [r0, r3]
    8102:	2b00      	cmp	r3, #0
    8104:	d001      	beq.n	810a <fRun_9DOF_GBY_KALMAN+0x36>
    8106:	f003 fcf7 	bl	baf8 <fRun_9DOF_GBY_KALMAN+0x3a24>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1134
	// *********************************************************************************
	// initial orientation lock to accelerometer and magnetometer eCompass orientation
	// *********************************************************************************

	// do a once-only orientation lock after the first valid magnetic calibration 
	if (pthisMagCal->iValidMagCal && !pthisSV->iFirstOrientationLock)
    810a:	4bad      	ldr	r3, [pc, #692]	; (83c0 <fRun_9DOF_GBY_KALMAN+0x2ec>)
    810c:	9c78      	ldr	r4, [sp, #480]	; 0x1e0
    810e:	56e3      	ldrsb	r3, [r4, r3]
    8110:	2b00      	cmp	r3, #0
    8112:	d020      	beq.n	8156 <fRun_9DOF_GBY_KALMAN+0x82>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1134 (discriminator 1)
    8114:	4bab      	ldr	r3, [pc, #684]	; (83c4 <fRun_9DOF_GBY_KALMAN+0x2f0>)
    8116:	465f      	mov	r7, fp
    8118:	5efb      	ldrsh	r3, [r7, r3]
    811a:	2b00      	cmp	r3, #0
    811c:	d11b      	bne.n	8156 <fRun_9DOF_GBY_KALMAN+0x82>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1137
	{
		// get the 6DOF orientation matrix and initial inclination angle
		if (ithisCoordSystem == NED)
    811e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    8120:	2c00      	cmp	r4, #0
    8122:	d101      	bne.n	8128 <fRun_9DOF_GBY_KALMAN+0x54>
    8124:	f003 fd92 	bl	bc4c <fRun_9DOF_GBY_KALMAN+0x3b78>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1141
		{
			feCompassNED(pthisSV->fRPl, &(pthisSV->fDeltaPl), pthisMag->fBcFast, pthisAccel->fGpFast);
		}
		else if (ithisCoordSystem == ANDROID)
    8128:	2c01      	cmp	r4, #1
    812a:	d101      	bne.n	8130 <fRun_9DOF_GBY_KALMAN+0x5c>
    812c:	f003 fdba 	bl	bca4 <fRun_9DOF_GBY_KALMAN+0x3bd0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1145
		{
			feCompassAndroid(pthisSV->fRPl, &(pthisSV->fDeltaPl), pthisMag->fBcFast, pthisAccel->fGpFast);
		}
		else if (ithisCoordSystem == WIN8)
    8130:	2c02      	cmp	r4, #2
    8132:	d101      	bne.n	8138 <fRun_9DOF_GBY_KALMAN+0x64>
    8134:	f003 fda4 	bl	bc80 <fRun_9DOF_GBY_KALMAN+0x3bac>
    8138:	465f      	mov	r7, fp
    813a:	3714      	adds	r7, #20
    813c:	970e      	str	r7, [sp, #56]	; 0x38
    813e:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1151
		{
			feCompassWin8(pthisSV->fRPl, &(pthisSV->fDeltaPl), pthisMag->fBcFast, pthisAccel->fGpFast);
		}

		// get the orientation quaternion from the orientation matrix
		fQuaternionFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fqPl));
    8140:	465f      	mov	r7, fp
    8142:	3738      	adds	r7, #56	; 0x38
    8144:	1c39      	adds	r1, r7, #0
    8146:	9710      	str	r7, [sp, #64]	; 0x40
    8148:	f007 fc7a 	bl	fa40 <fQuaternionFromRotationMatrix>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1154

		// set the orientation lock flag so this initial alignment is only performed once
		pthisSV->iFirstOrientationLock = 1;
    814c:	4b9d      	ldr	r3, [pc, #628]	; (83c4 <fRun_9DOF_GBY_KALMAN+0x2f0>)
    814e:	2201      	movs	r2, #1
    8150:	4658      	mov	r0, fp
    8152:	52c2      	strh	r2, [r0, r3]
    8154:	e005      	b.n	8162 <fRun_9DOF_GBY_KALMAN+0x8e>
    8156:	465f      	mov	r7, fp
    8158:	465c      	mov	r4, fp
    815a:	3714      	adds	r7, #20
    815c:	3438      	adds	r4, #56	; 0x38
    815e:	970e      	str	r7, [sp, #56]	; 0x38
    8160:	9410      	str	r4, [sp, #64]	; 0x40
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1163
	// calculate a priori rotation matrix
	// *********************************************************************************

	// compute the angular velocity from the averaged high frequency gyro reading.
	// omega[k] = yG[k] - b-[k] = yG[k] - b+[k-1] (deg/s)
	pthisSV->fOmega[X] = pthisGyro->fYp[X] - pthisSV->fbPl[X];
    8162:	4659      	mov	r1, fp
    8164:	6e49      	ldr	r1, [r1, #100]	; 0x64
    8166:	464a      	mov	r2, r9
    8168:	68d0      	ldr	r0, [r2, #12]
    816a:	9103      	str	r1, [sp, #12]
    816c:	f7f8 ff3c 	bl	fe8 <__aeabi_fsub>
    8170:	465b      	mov	r3, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1164
	pthisSV->fOmega[Y] = pthisGyro->fYp[Y] - pthisSV->fbPl[Y];
    8172:	6e9c      	ldr	r4, [r3, #104]	; 0x68
    8174:	464f      	mov	r7, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1163
	// calculate a priori rotation matrix
	// *********************************************************************************

	// compute the angular velocity from the averaged high frequency gyro reading.
	// omega[k] = yG[k] - b-[k] = yG[k] - b+[k-1] (deg/s)
	pthisSV->fOmega[X] = pthisGyro->fYp[X] - pthisSV->fbPl[X];
    8176:	6558      	str	r0, [r3, #84]	; 0x54
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1164
	pthisSV->fOmega[Y] = pthisGyro->fYp[Y] - pthisSV->fbPl[Y];
    8178:	1c21      	adds	r1, r4, #0
    817a:	6938      	ldr	r0, [r7, #16]
    817c:	f7f8 ff34 	bl	fe8 <__aeabi_fsub>
    8180:	4659      	mov	r1, fp
    8182:	46a2      	mov	sl, r4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1165
	pthisSV->fOmega[Z] = pthisGyro->fYp[Z] - pthisSV->fbPl[Z];
    8184:	6ecc      	ldr	r4, [r1, #108]	; 0x6c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1164
	// *********************************************************************************

	// compute the angular velocity from the averaged high frequency gyro reading.
	// omega[k] = yG[k] - b-[k] = yG[k] - b+[k-1] (deg/s)
	pthisSV->fOmega[X] = pthisGyro->fYp[X] - pthisSV->fbPl[X];
	pthisSV->fOmega[Y] = pthisGyro->fYp[Y] - pthisSV->fbPl[Y];
    8186:	6588      	str	r0, [r1, #88]	; 0x58
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1165
	pthisSV->fOmega[Z] = pthisGyro->fYp[Z] - pthisSV->fbPl[Z];
    8188:	6978      	ldr	r0, [r7, #20]
    818a:	1c21      	adds	r1, r4, #0
    818c:	9404      	str	r4, [sp, #16]
    818e:	f7f8 ff2b 	bl	fe8 <__aeabi_fsub>
    8192:	465f      	mov	r7, fp
    8194:	65f8      	str	r0, [r7, #92]	; 0x5c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1168

	// initialize the a priori orientation quaternion to the previous a posteriori estimate
	pthisSV->fqMi = pthisSV->fqPl;
    8196:	488c      	ldr	r0, [pc, #560]	; (83c8 <fRun_9DOF_GBY_KALMAN+0x2f4>)
    8198:	9a10      	ldr	r2, [sp, #64]	; 0x40
    819a:	1c04      	adds	r4, r0, #0
    819c:	445c      	add	r4, fp
    819e:	940b      	str	r4, [sp, #44]	; 0x2c
    81a0:	1c23      	adds	r3, r4, #0
    81a2:	ca83      	ldmia	r2!, {r0, r1, r7}
    81a4:	c383      	stmia	r3!, {r0, r1, r7}
    81a6:	6812      	ldr	r2, [r2, #0]
    81a8:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1171

	// integrate the buffered high frequency (typically 200Hz) gyro readings
	for (j = 0; j < iOverSampleRatio; j++)
    81aa:	9c06      	ldr	r4, [sp, #24]
    81ac:	2c00      	cmp	r4, #0
    81ae:	dc01      	bgt.n	81b4 <fRun_9DOF_GBY_KALMAN+0xe0>
    81b0:	f003 fcac 	bl	bb0c <fRun_9DOF_GBY_KALMAN+0x3a38>
    81b4:	4885      	ldr	r0, [pc, #532]	; (83cc <fRun_9DOF_GBY_KALMAN+0x2f8>)
    81b6:	2700      	movs	r7, #0
    81b8:	1c04      	adds	r4, r0, #0
    81ba:	445c      	add	r4, fp
    81bc:	9409      	str	r4, [sp, #36]	; 0x24
    81be:	46b8      	mov	r8, r7
    81c0:	2300      	movs	r3, #0
    81c2:	ac1d      	add	r4, sp, #116	; 0x74
    81c4:	e008      	b.n	81d8 <fRun_9DOF_GBY_KALMAN+0x104>
    81c6:	4658      	mov	r0, fp
    81c8:	4659      	mov	r1, fp
    81ca:	465a      	mov	r2, fp
    81cc:	6e40      	ldr	r0, [r0, #100]	; 0x64
    81ce:	6e89      	ldr	r1, [r1, #104]	; 0x68
    81d0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
    81d2:	9003      	str	r0, [sp, #12]
    81d4:	468a      	mov	sl, r1
    81d6:	9204      	str	r2, [sp, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1176
	{
		// compute the incremental fast (typically 200Hz) rotation vector rvec (deg)
		for (i = X; i <= Z; i++)
		{
			rvec[i] = (((float)pthisGyro->iYpFast[j][i] * pthisGyro->fDegPerSecPerCount) - pthisSV->fbPl[i]) * pthisSV->fFastdeltat;
    81d8:	005f      	lsls	r7, r3, #1
    81da:	18ff      	adds	r7, r7, r3
    81dc:	4648      	mov	r0, r9
    81de:	007f      	lsls	r7, r7, #1
    81e0:	4a7b      	ldr	r2, [pc, #492]	; (83d0 <fRun_9DOF_GBY_KALMAN+0x2fc>)
    81e2:	6986      	ldr	r6, [r0, #24]
    81e4:	444f      	add	r7, r9
    81e6:	231c      	movs	r3, #28
    81e8:	5ef8      	ldrsh	r0, [r7, r3]
    81ea:	4659      	mov	r1, fp
    81ec:	588d      	ldr	r5, [r1, r2]
    81ee:	f7f9 f891 	bl	1314 <__aeabi_i2f>
    81f2:	1c31      	adds	r1, r6, #0
    81f4:	f7f8 fdce 	bl	d94 <__aeabi_fmul>
    81f8:	9903      	ldr	r1, [sp, #12]
    81fa:	f7f8 fef5 	bl	fe8 <__aeabi_fsub>
    81fe:	1c29      	adds	r1, r5, #0
    8200:	f7f8 fdc8 	bl	d94 <__aeabi_fmul>
    8204:	6020      	str	r0, [r4, #0]
    8206:	211e      	movs	r1, #30
    8208:	5e78      	ldrsh	r0, [r7, r1]
    820a:	f7f9 f883 	bl	1314 <__aeabi_i2f>
    820e:	1c31      	adds	r1, r6, #0
    8210:	f7f8 fdc0 	bl	d94 <__aeabi_fmul>
    8214:	4651      	mov	r1, sl
    8216:	f7f8 fee7 	bl	fe8 <__aeabi_fsub>
    821a:	1c29      	adds	r1, r5, #0
    821c:	f7f8 fdba 	bl	d94 <__aeabi_fmul>
    8220:	6060      	str	r0, [r4, #4]
    8222:	2220      	movs	r2, #32
    8224:	5eb8      	ldrsh	r0, [r7, r2]
    8226:	f7f9 f875 	bl	1314 <__aeabi_i2f>
    822a:	1c01      	adds	r1, r0, #0
    822c:	1c30      	adds	r0, r6, #0
    822e:	f7f8 fdb1 	bl	d94 <__aeabi_fmul>
    8232:	9904      	ldr	r1, [sp, #16]
    8234:	f7f8 fed8 	bl	fe8 <__aeabi_fsub>
    8238:	1c01      	adds	r1, r0, #0
    823a:	1c28      	adds	r0, r5, #0
    823c:	f7f8 fdaa 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1180
		}

		// compute the incremental quaternion fDeltaq from the rotation vector
		fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), rvec, 1.0F);
    8240:	22fe      	movs	r2, #254	; 0xfe
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1176
	for (j = 0; j < iOverSampleRatio; j++)
	{
		// compute the incremental fast (typically 200Hz) rotation vector rvec (deg)
		for (i = X; i <= Z; i++)
		{
			rvec[i] = (((float)pthisGyro->iYpFast[j][i] * pthisGyro->fDegPerSecPerCount) - pthisSV->fbPl[i]) * pthisSV->fFastdeltat;
    8242:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1180
		}

		// compute the incremental quaternion fDeltaq from the rotation vector
		fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), rvec, 1.0F);
    8244:	ac1d      	add	r4, sp, #116	; 0x74
    8246:	9809      	ldr	r0, [sp, #36]	; 0x24
    8248:	1c21      	adds	r1, r4, #0
    824a:	0592      	lsls	r2, r2, #22
    824c:	f007 fb2e 	bl	f8ac <fQuaternionFromRotationVectorDeg>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1184

		// incrementally rotate the a priori orientation quaternion fqMi
		// the a posteriori quaternion fqPl is re-normalized later so this update is stable
		qAeqAxB(&(pthisSV->fqMi), &(pthisSV->fDeltaq));
    8250:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8252:	9909      	ldr	r1, [sp, #36]	; 0x24
    8254:	f008 f8b0 	bl	103b8 <qAeqAxB>
    8258:	4643      	mov	r3, r8
    825a:	3301      	adds	r3, #1
    825c:	b2db      	uxtb	r3, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1171

	// initialize the a priori orientation quaternion to the previous a posteriori estimate
	pthisSV->fqMi = pthisSV->fqPl;

	// integrate the buffered high frequency (typically 200Hz) gyro readings
	for (j = 0; j < iOverSampleRatio; j++)
    825e:	9f06      	ldr	r7, [sp, #24]
    8260:	4698      	mov	r8, r3
    8262:	b25b      	sxtb	r3, r3
    8264:	42bb      	cmp	r3, r7
    8266:	dbae      	blt.n	81c6 <fRun_9DOF_GBY_KALMAN+0xf2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1188
		// the a posteriori quaternion fqPl is re-normalized later so this update is stable
		qAeqAxB(&(pthisSV->fqMi), &(pthisSV->fDeltaq));
	}

	// get the a priori rotation matrix from the a priori quaternion
	fRotationMatrixFromQuaternion(pthisSV->fRMi, &(pthisSV->fqMi));
    8268:	27fb      	movs	r7, #251	; 0xfb
    826a:	00ff      	lsls	r7, r7, #3
    826c:	1c38      	adds	r0, r7, #0
    826e:	4458      	add	r0, fp
    8270:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8272:	f007 fc85 	bl	fb80 <fRotationMatrixFromQuaternion>
    8276:	2386      	movs	r3, #134	; 0x86
    8278:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    827a:	005b      	lsls	r3, r3, #1
    827c:	4658      	mov	r0, fp
    827e:	58c4      	ldr	r4, [r0, r3]
    8280:	2f00      	cmp	r7, #0
    8282:	d100      	bne.n	8286 <fRun_9DOF_GBY_KALMAN+0x1b2>
    8284:	e0ac      	b.n	83e0 <fRun_9DOF_GBY_KALMAN+0x30c>
    8286:	2384      	movs	r3, #132	; 0x84
    8288:	005b      	lsls	r3, r3, #1
    828a:	2f02      	cmp	r7, #2
    828c:	d101      	bne.n	8292 <fRun_9DOF_GBY_KALMAN+0x1be>
    828e:	f003 f84b 	bl	b328 <fRun_9DOF_GBY_KALMAN+0x3254>
    8292:	58c7      	ldr	r7, [r0, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1208
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    8294:	23fc      	movs	r3, #252	; 0xfc
    8296:	00db      	lsls	r3, r3, #3
    8298:	58c5      	ldr	r5, [r0, r3]
    829a:	2080      	movs	r0, #128	; 0x80
    829c:	0600      	lsls	r0, r0, #24
    829e:	182a      	adds	r2, r5, r0
    82a0:	4659      	mov	r1, fp
    82a2:	23ec      	movs	r3, #236	; 0xec
    82a4:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    82a6:	23bc      	movs	r3, #188	; 0xbc
    82a8:	58c8      	ldr	r0, [r1, r3]
    82aa:	21fc      	movs	r1, #252	; 0xfc
    82ac:	0589      	lsls	r1, r1, #22
    82ae:	f7f8 fd71 	bl	d94 <__aeabi_fmul>
    82b2:	465a      	mov	r2, fp
    82b4:	23ac      	movs	r3, #172	; 0xac
    82b6:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1223
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
		}
		else
		{
			// Android has negative sign for gravity: y = a - g, g = -y + a
			pthisSV->fgErrSeMi[i] = -pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    82b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    82ba:	68d9      	ldr	r1, [r3, #12]
    82bc:	f7f8 fe94 	bl	fe8 <__aeabi_fsub>
    82c0:	1c01      	adds	r1, r0, #0
    82c2:	1c28      	adds	r0, r5, #0
    82c4:	f7f8 fa16 	bl	6f4 <__aeabi_fadd>
    82c8:	23d4      	movs	r3, #212	; 0xd4
    82ca:	4659      	mov	r1, fp
    82cc:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    82ce:	4b41      	ldr	r3, [pc, #260]	; (83d4 <fRun_9DOF_GBY_KALMAN+0x300>)
    82d0:	1c38      	adds	r0, r7, #0
    82d2:	58c9      	ldr	r1, [r1, r3]
    82d4:	f7f8 fd5e 	bl	d94 <__aeabi_fmul>
    82d8:	1c21      	adds	r1, r4, #0
    82da:	1c06      	adds	r6, r0, #0
    82dc:	1c28      	adds	r0, r5, #0
    82de:	f7f8 fd59 	bl	d94 <__aeabi_fmul>
    82e2:	1c01      	adds	r1, r0, #0
    82e4:	1c30      	adds	r0, r6, #0
    82e6:	f7f8 fa05 	bl	6f4 <__aeabi_fadd>
    82ea:	465a      	mov	r2, fp
    82ec:	23f8      	movs	r3, #248	; 0xf8
    82ee:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    82f0:	9b05      	ldr	r3, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    82f2:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    82f4:	6a58      	ldr	r0, [r3, #36]	; 0x24
    82f6:	f7f8 fe77 	bl	fe8 <__aeabi_fsub>
    82fa:	4659      	mov	r1, fp
    82fc:	23e0      	movs	r3, #224	; 0xe0
    82fe:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1208
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    8300:	4b35      	ldr	r3, [pc, #212]	; (83d8 <fRun_9DOF_GBY_KALMAN+0x304>)
    8302:	58cd      	ldr	r5, [r1, r3]
    8304:	2380      	movs	r3, #128	; 0x80
    8306:	061b      	lsls	r3, r3, #24
    8308:	18ea      	adds	r2, r5, r3
    830a:	23f0      	movs	r3, #240	; 0xf0
    830c:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    830e:	23c0      	movs	r3, #192	; 0xc0
    8310:	58c8      	ldr	r0, [r1, r3]
    8312:	21fc      	movs	r1, #252	; 0xfc
    8314:	0589      	lsls	r1, r1, #22
    8316:	f7f8 fd3d 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1223
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
		}
		else
		{
			// Android has negative sign for gravity: y = a - g, g = -y + a
			pthisSV->fgErrSeMi[i] = -pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    831a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    831c:	23b0      	movs	r3, #176	; 0xb0
    831e:	4659      	mov	r1, fp
    8320:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1223
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
		}
		else
		{
			// Android has negative sign for gravity: y = a - g, g = -y + a
			pthisSV->fgErrSeMi[i] = -pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    8322:	6911      	ldr	r1, [r2, #16]
    8324:	f7f8 fe60 	bl	fe8 <__aeabi_fsub>
    8328:	1c01      	adds	r1, r0, #0
    832a:	1c28      	adds	r0, r5, #0
    832c:	f7f8 f9e2 	bl	6f4 <__aeabi_fadd>
    8330:	23d8      	movs	r3, #216	; 0xd8
    8332:	4659      	mov	r1, fp
    8334:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    8336:	23fd      	movs	r3, #253	; 0xfd
    8338:	00db      	lsls	r3, r3, #3
    833a:	58c9      	ldr	r1, [r1, r3]
    833c:	1c38      	adds	r0, r7, #0
    833e:	f7f8 fd29 	bl	d94 <__aeabi_fmul>
    8342:	1c21      	adds	r1, r4, #0
    8344:	1c06      	adds	r6, r0, #0
    8346:	1c28      	adds	r0, r5, #0
    8348:	f7f8 fd24 	bl	d94 <__aeabi_fmul>
    834c:	1c01      	adds	r1, r0, #0
    834e:	1c30      	adds	r0, r6, #0
    8350:	f7f8 f9d0 	bl	6f4 <__aeabi_fadd>
    8354:	465a      	mov	r2, fp
    8356:	23fc      	movs	r3, #252	; 0xfc
    8358:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    835a:	9b05      	ldr	r3, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    835c:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    835e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8360:	f7f8 fe42 	bl	fe8 <__aeabi_fsub>
    8364:	4659      	mov	r1, fp
    8366:	23e4      	movs	r3, #228	; 0xe4
    8368:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1208
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    836a:	23ff      	movs	r3, #255	; 0xff
    836c:	00db      	lsls	r3, r3, #3
    836e:	58cd      	ldr	r5, [r1, r3]
    8370:	2380      	movs	r3, #128	; 0x80
    8372:	061b      	lsls	r3, r3, #24
    8374:	18ea      	adds	r2, r5, r3
    8376:	23f4      	movs	r3, #244	; 0xf4
    8378:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    837a:	23c4      	movs	r3, #196	; 0xc4
    837c:	58c8      	ldr	r0, [r1, r3]
    837e:	21fc      	movs	r1, #252	; 0xfc
    8380:	0589      	lsls	r1, r1, #22
    8382:	f7f8 fd07 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1223
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
		}
		else
		{
			// Android has negative sign for gravity: y = a - g, g = -y + a
			pthisSV->fgErrSeMi[i] = -pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    8386:	9a0c      	ldr	r2, [sp, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    8388:	4659      	mov	r1, fp
    838a:	23b4      	movs	r3, #180	; 0xb4
    838c:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1223
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
		}
		else
		{
			// Android has negative sign for gravity: y = a - g, g = -y + a
			pthisSV->fgErrSeMi[i] = -pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    838e:	6951      	ldr	r1, [r2, #20]
    8390:	f7f8 fe2a 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    8394:	1c01      	adds	r1, r0, #0
    8396:	1c28      	adds	r0, r5, #0
    8398:	f7f8 f9ac 	bl	6f4 <__aeabi_fadd>
    839c:	23dc      	movs	r3, #220	; 0xdc
    839e:	4659      	mov	r1, fp
    83a0:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    83a2:	4b0e      	ldr	r3, [pc, #56]	; (83dc <fRun_9DOF_GBY_KALMAN+0x308>)
    83a4:	1c38      	adds	r0, r7, #0
    83a6:	58c9      	ldr	r1, [r1, r3]
    83a8:	f7f8 fcf4 	bl	d94 <__aeabi_fmul>
    83ac:	1c21      	adds	r1, r4, #0
    83ae:	1c06      	adds	r6, r0, #0
    83b0:	1c28      	adds	r0, r5, #0
    83b2:	f7f8 fcef 	bl	d94 <__aeabi_fmul>
    83b6:	1c01      	adds	r1, r0, #0
    83b8:	1c30      	adds	r0, r6, #0
    83ba:	e09b      	b.n	84f4 <fRun_9DOF_GBY_KALMAN+0x420>
    83bc:	00000836 	.word	0x00000836
    83c0:	00000416 	.word	0x00000416
    83c4:	00000834 	.word	0x00000834
    83c8:	0000080c 	.word	0x0000080c
    83cc:	000007fc 	.word	0x000007fc
    83d0:	00000824 	.word	0x00000824
    83d4:	000007dc 	.word	0x000007dc
    83d8:	000007ec 	.word	0x000007ec
    83dc:	000007f4 	.word	0x000007f4
    83e0:	2382      	movs	r3, #130	; 0x82
    83e2:	005b      	lsls	r3, r3, #1
    83e4:	58c5      	ldr	r5, [r0, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1203
		// compute the a priori gyro estimate of the gravitational vector (g, sensor frame)
		// using an absolute rotation of the global frame gravity vector (with magnitude 1g)
		if (ithisCoordSystem == NED)
		{
			// NED gravity is along positive z axis
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
    83e6:	23fc      	movs	r3, #252	; 0xfc
    83e8:	00db      	lsls	r3, r3, #3
    83ea:	58c6      	ldr	r6, [r0, r3]
    83ec:	23ec      	movs	r3, #236	; 0xec
    83ee:	50c6      	str	r6, [r0, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    83f0:	21fc      	movs	r1, #252	; 0xfc
    83f2:	23bc      	movs	r3, #188	; 0xbc
    83f4:	58c0      	ldr	r0, [r0, r3]
    83f6:	0589      	lsls	r1, r1, #22
    83f8:	f7f8 fccc 	bl	d94 <__aeabi_fmul>
    83fc:	465f      	mov	r7, fp
    83fe:	23ac      	movs	r3, #172	; 0xac
    8400:	50f8      	str	r0, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    8402:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    8404:	68f9      	ldr	r1, [r7, #12]
    8406:	f7f8 f975 	bl	6f4 <__aeabi_fadd>
    840a:	1c31      	adds	r1, r6, #0
    840c:	f7f8 fdec 	bl	fe8 <__aeabi_fsub>
    8410:	23d4      	movs	r3, #212	; 0xd4
    8412:	4659      	mov	r1, fp
    8414:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1231
		// compute the a priori gyro estimate of the geomagnetic vector (uT, sensor frame)
		// using an absolute rotation of the global frame geomagnetic vector (with magnitude B uT)
		if (ithisCoordSystem == NED)
		{
			// NED y component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    8416:	23fb      	movs	r3, #251	; 0xfb
    8418:	00db      	lsls	r3, r3, #3
    841a:	58c9      	ldr	r1, [r1, r3]
    841c:	1c28      	adds	r0, r5, #0
    841e:	f7f8 fcb9 	bl	d94 <__aeabi_fmul>
    8422:	1c21      	adds	r1, r4, #0
    8424:	1c07      	adds	r7, r0, #0
    8426:	1c30      	adds	r0, r6, #0
    8428:	f7f8 fcb4 	bl	d94 <__aeabi_fmul>
    842c:	1c01      	adds	r1, r0, #0
    842e:	1c38      	adds	r0, r7, #0
    8430:	f7f8 f960 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    8434:	9f05      	ldr	r7, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1231
		// compute the a priori gyro estimate of the geomagnetic vector (uT, sensor frame)
		// using an absolute rotation of the global frame geomagnetic vector (with magnitude B uT)
		if (ithisCoordSystem == NED)
		{
			// NED y component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    8436:	465a      	mov	r2, fp
    8438:	23f8      	movs	r3, #248	; 0xf8
    843a:	50d0      	str	r0, [r2, r3]
    843c:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    843e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    8440:	f7f8 fdd2 	bl	fe8 <__aeabi_fsub>
    8444:	4659      	mov	r1, fp
    8446:	23e0      	movs	r3, #224	; 0xe0
    8448:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1203
		// compute the a priori gyro estimate of the gravitational vector (g, sensor frame)
		// using an absolute rotation of the global frame gravity vector (with magnitude 1g)
		if (ithisCoordSystem == NED)
		{
			// NED gravity is along positive z axis
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
    844a:	4bbe      	ldr	r3, [pc, #760]	; (8744 <fRun_9DOF_GBY_KALMAN+0x670>)
    844c:	58ce      	ldr	r6, [r1, r3]
    844e:	23f0      	movs	r3, #240	; 0xf0
    8450:	50ce      	str	r6, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    8452:	23c0      	movs	r3, #192	; 0xc0
    8454:	58c8      	ldr	r0, [r1, r3]
    8456:	21fc      	movs	r1, #252	; 0xfc
    8458:	0589      	lsls	r1, r1, #22
    845a:	f7f8 fc9b 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    845e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    8460:	465a      	mov	r2, fp
    8462:	23b0      	movs	r3, #176	; 0xb0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    8464:	6939      	ldr	r1, [r7, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    8466:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    8468:	f7f8 f944 	bl	6f4 <__aeabi_fadd>
    846c:	1c31      	adds	r1, r6, #0
    846e:	f7f8 fdbb 	bl	fe8 <__aeabi_fsub>
    8472:	23d8      	movs	r3, #216	; 0xd8
    8474:	4659      	mov	r1, fp
    8476:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1231
		// compute the a priori gyro estimate of the geomagnetic vector (uT, sensor frame)
		// using an absolute rotation of the global frame geomagnetic vector (with magnitude B uT)
		if (ithisCoordSystem == NED)
		{
			// NED y component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    8478:	4bb3      	ldr	r3, [pc, #716]	; (8748 <fRun_9DOF_GBY_KALMAN+0x674>)
    847a:	1c28      	adds	r0, r5, #0
    847c:	58c9      	ldr	r1, [r1, r3]
    847e:	f7f8 fc89 	bl	d94 <__aeabi_fmul>
    8482:	1c21      	adds	r1, r4, #0
    8484:	1c07      	adds	r7, r0, #0
    8486:	1c30      	adds	r0, r6, #0
    8488:	f7f8 fc84 	bl	d94 <__aeabi_fmul>
    848c:	1c01      	adds	r1, r0, #0
    848e:	1c38      	adds	r0, r7, #0
    8490:	f7f8 f930 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    8494:	9f05      	ldr	r7, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1231
		// compute the a priori gyro estimate of the geomagnetic vector (uT, sensor frame)
		// using an absolute rotation of the global frame geomagnetic vector (with magnitude B uT)
		if (ithisCoordSystem == NED)
		{
			// NED y component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    8496:	465a      	mov	r2, fp
    8498:	23fc      	movs	r3, #252	; 0xfc
    849a:	50d0      	str	r0, [r2, r3]
    849c:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    849e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    84a0:	f7f8 fda2 	bl	fe8 <__aeabi_fsub>
    84a4:	4659      	mov	r1, fp
    84a6:	23e4      	movs	r3, #228	; 0xe4
    84a8:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1203
		// compute the a priori gyro estimate of the gravitational vector (g, sensor frame)
		// using an absolute rotation of the global frame gravity vector (with magnitude 1g)
		if (ithisCoordSystem == NED)
		{
			// NED gravity is along positive z axis
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
    84aa:	23ff      	movs	r3, #255	; 0xff
    84ac:	00db      	lsls	r3, r3, #3
    84ae:	58ce      	ldr	r6, [r1, r3]
    84b0:	23f4      	movs	r3, #244	; 0xf4
    84b2:	50ce      	str	r6, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    84b4:	23c4      	movs	r3, #196	; 0xc4
    84b6:	58c8      	ldr	r0, [r1, r3]
    84b8:	21fc      	movs	r1, #252	; 0xfc
    84ba:	0589      	lsls	r1, r1, #22
    84bc:	f7f8 fc6a 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    84c0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    84c2:	465a      	mov	r2, fp
    84c4:	23b4      	movs	r3, #180	; 0xb4
    84c6:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    84c8:	6979      	ldr	r1, [r7, #20]
    84ca:	f7f8 f913 	bl	6f4 <__aeabi_fadd>
    84ce:	1c31      	adds	r1, r6, #0
    84d0:	f7f8 fd8a 	bl	fe8 <__aeabi_fsub>
    84d4:	23dc      	movs	r3, #220	; 0xdc
    84d6:	4659      	mov	r1, fp
    84d8:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1231
		// compute the a priori gyro estimate of the geomagnetic vector (uT, sensor frame)
		// using an absolute rotation of the global frame geomagnetic vector (with magnitude B uT)
		if (ithisCoordSystem == NED)
		{
			// NED y component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    84da:	23fe      	movs	r3, #254	; 0xfe
    84dc:	00db      	lsls	r3, r3, #3
    84de:	58c9      	ldr	r1, [r1, r3]
    84e0:	1c28      	adds	r0, r5, #0
    84e2:	f7f8 fc57 	bl	d94 <__aeabi_fmul>
    84e6:	1c21      	adds	r1, r4, #0
    84e8:	1c05      	adds	r5, r0, #0
    84ea:	1c30      	adds	r0, r6, #0
    84ec:	f7f8 fc52 	bl	d94 <__aeabi_fmul>
    84f0:	1c01      	adds	r1, r0, #0
    84f2:	1c28      	adds	r0, r5, #0
    84f4:	f7f8 f8fe 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    84f8:	9c05      	ldr	r4, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1231
		// compute the a priori gyro estimate of the geomagnetic vector (uT, sensor frame)
		// using an absolute rotation of the global frame geomagnetic vector (with magnitude B uT)
		if (ithisCoordSystem == NED)
		{
			// NED y component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    84fa:	2380      	movs	r3, #128	; 0x80
    84fc:	465a      	mov	r2, fp
    84fe:	005b      	lsls	r3, r3, #1
    8500:	50d0      	str	r0, [r2, r3]
    8502:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    8504:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8506:	f7f8 fd6f 	bl	fe8 <__aeabi_fsub>
    850a:	465f      	mov	r7, fp
    850c:	23e8      	movs	r3, #232	; 0xe8
    850e:	50f8      	str	r0, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1248
	// *********************************************************************************
	// update variable elements of measurement matrix C
	// *********************************************************************************

	// update measurement matrix C with -alpha(g-)x and -alpha(m-)x from gyro (g, uT, sensor frame)
	pthisSV->fC6x12[0][1] = FDEGTORAD * pthisSV->fgSeGyMi[Z];
    8510:	23f4      	movs	r3, #244	; 0xf4
    8512:	58f8      	ldr	r0, [r7, r3]
    8514:	498d      	ldr	r1, [pc, #564]	; (874c <fRun_9DOF_GBY_KALMAN+0x678>)
    8516:	f7f8 fc3d 	bl	d94 <__aeabi_fmul>
    851a:	4b8d      	ldr	r3, [pc, #564]	; (8750 <fRun_9DOF_GBY_KALMAN+0x67c>)
    851c:	465a      	mov	r2, fp
    851e:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1249
	pthisSV->fC6x12[0][2] = -FDEGTORAD * pthisSV->fgSeGyMi[Y];
    8520:	23f0      	movs	r3, #240	; 0xf0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1248
	// *********************************************************************************
	// update variable elements of measurement matrix C
	// *********************************************************************************

	// update measurement matrix C with -alpha(g-)x and -alpha(m-)x from gyro (g, uT, sensor frame)
	pthisSV->fC6x12[0][1] = FDEGTORAD * pthisSV->fgSeGyMi[Z];
    8522:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1249
	pthisSV->fC6x12[0][2] = -FDEGTORAD * pthisSV->fgSeGyMi[Y];
    8524:	498b      	ldr	r1, [pc, #556]	; (8754 <fRun_9DOF_GBY_KALMAN+0x680>)
    8526:	58f8      	ldr	r0, [r7, r3]
    8528:	f7f8 fc34 	bl	d94 <__aeabi_fmul>
    852c:	23d8      	movs	r3, #216	; 0xd8
    852e:	465c      	mov	r4, fp
    8530:	00db      	lsls	r3, r3, #3
    8532:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1250
	pthisSV->fC6x12[1][2] = FDEGTORAD * pthisSV->fgSeGyMi[X];
    8534:	23ec      	movs	r3, #236	; 0xec
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1249
	// update variable elements of measurement matrix C
	// *********************************************************************************

	// update measurement matrix C with -alpha(g-)x and -alpha(m-)x from gyro (g, uT, sensor frame)
	pthisSV->fC6x12[0][1] = FDEGTORAD * pthisSV->fgSeGyMi[Z];
	pthisSV->fC6x12[0][2] = -FDEGTORAD * pthisSV->fgSeGyMi[Y];
    8536:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1250
	pthisSV->fC6x12[1][2] = FDEGTORAD * pthisSV->fgSeGyMi[X];
    8538:	4984      	ldr	r1, [pc, #528]	; (874c <fRun_9DOF_GBY_KALMAN+0x678>)
    853a:	58f8      	ldr	r0, [r7, r3]
    853c:	f7f8 fc2a 	bl	d94 <__aeabi_fmul>
    8540:	23de      	movs	r3, #222	; 0xde
    8542:	00db      	lsls	r3, r3, #3
    8544:	50e0      	str	r0, [r4, r3]
    8546:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1251
	pthisSV->fC6x12[1][0] = -pthisSV->fC6x12[0][1];
    8548:	2080      	movs	r0, #128	; 0x80
    854a:	0600      	lsls	r0, r0, #24
    854c:	23dd      	movs	r3, #221	; 0xdd
    854e:	182a      	adds	r2, r5, r0
    8550:	00db      	lsls	r3, r3, #3
    8552:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1252
	pthisSV->fC6x12[2][0] = -pthisSV->fC6x12[0][2];
    8554:	23e3      	movs	r3, #227	; 0xe3
    8556:	1832      	adds	r2, r6, r0
    8558:	00db      	lsls	r3, r3, #3
    855a:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1253
	pthisSV->fC6x12[2][1] = -pthisSV->fC6x12[1][2];
    855c:	4b7e      	ldr	r3, [pc, #504]	; (8758 <fRun_9DOF_GBY_KALMAN+0x684>)
    855e:	183a      	adds	r2, r7, r0
    8560:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1254
	pthisSV->fC6x12[3][1] = FDEGTORAD * pthisSV->fmSeGyMi[Z];
    8562:	2380      	movs	r3, #128	; 0x80
    8564:	005b      	lsls	r3, r3, #1
    8566:	58e0      	ldr	r0, [r4, r3]
    8568:	4978      	ldr	r1, [pc, #480]	; (874c <fRun_9DOF_GBY_KALMAN+0x678>)
    856a:	f7f8 fc13 	bl	d94 <__aeabi_fmul>
    856e:	4b7b      	ldr	r3, [pc, #492]	; (875c <fRun_9DOF_GBY_KALMAN+0x688>)
    8570:	4680      	mov	r8, r0
    8572:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1255
	pthisSV->fC6x12[3][2] = -FDEGTORAD * pthisSV->fmSeGyMi[Y];
    8574:	23fc      	movs	r3, #252	; 0xfc
    8576:	58e0      	ldr	r0, [r4, r3]
    8578:	4976      	ldr	r1, [pc, #472]	; (8754 <fRun_9DOF_GBY_KALMAN+0x680>)
    857a:	f7f8 fc0b 	bl	d94 <__aeabi_fmul>
    857e:	23ea      	movs	r3, #234	; 0xea
    8580:	00db      	lsls	r3, r3, #3
    8582:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1256
	pthisSV->fC6x12[4][2] = FDEGTORAD * pthisSV->fmSeGyMi[X];
    8584:	23f8      	movs	r3, #248	; 0xf8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1255
	pthisSV->fC6x12[1][2] = FDEGTORAD * pthisSV->fgSeGyMi[X];
	pthisSV->fC6x12[1][0] = -pthisSV->fC6x12[0][1];
	pthisSV->fC6x12[2][0] = -pthisSV->fC6x12[0][2];
	pthisSV->fC6x12[2][1] = -pthisSV->fC6x12[1][2];
	pthisSV->fC6x12[3][1] = FDEGTORAD * pthisSV->fmSeGyMi[Z];
	pthisSV->fC6x12[3][2] = -FDEGTORAD * pthisSV->fmSeGyMi[Y];
    8586:	4681      	mov	r9, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1256
	pthisSV->fC6x12[4][2] = FDEGTORAD * pthisSV->fmSeGyMi[X];
    8588:	4970      	ldr	r1, [pc, #448]	; (874c <fRun_9DOF_GBY_KALMAN+0x678>)
    858a:	58e0      	ldr	r0, [r4, r3]
    858c:	f7f8 fc02 	bl	d94 <__aeabi_fmul>
    8590:	23f0      	movs	r3, #240	; 0xf0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1257
	pthisSV->fC6x12[4][0] = -pthisSV->fC6x12[3][1];
    8592:	2180      	movs	r1, #128	; 0x80
    8594:	0609      	lsls	r1, r1, #24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1256
	pthisSV->fC6x12[1][0] = -pthisSV->fC6x12[0][1];
	pthisSV->fC6x12[2][0] = -pthisSV->fC6x12[0][2];
	pthisSV->fC6x12[2][1] = -pthisSV->fC6x12[1][2];
	pthisSV->fC6x12[3][1] = FDEGTORAD * pthisSV->fmSeGyMi[Z];
	pthisSV->fC6x12[3][2] = -FDEGTORAD * pthisSV->fmSeGyMi[Y];
	pthisSV->fC6x12[4][2] = FDEGTORAD * pthisSV->fmSeGyMi[X];
    8596:	00db      	lsls	r3, r3, #3
    8598:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1257
	pthisSV->fC6x12[4][0] = -pthisSV->fC6x12[3][1];
    859a:	1c0a      	adds	r2, r1, #0
    859c:	23ef      	movs	r3, #239	; 0xef
    859e:	4442      	add	r2, r8
    85a0:	00db      	lsls	r3, r3, #3
    85a2:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1258
	pthisSV->fC6x12[5][0] = -pthisSV->fC6x12[3][2];
    85a4:	1c0a      	adds	r2, r1, #0
    85a6:	23f5      	movs	r3, #245	; 0xf5
    85a8:	444a      	add	r2, r9
    85aa:	00db      	lsls	r3, r3, #3
    85ac:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1256
	pthisSV->fC6x12[1][0] = -pthisSV->fC6x12[0][1];
	pthisSV->fC6x12[2][0] = -pthisSV->fC6x12[0][2];
	pthisSV->fC6x12[2][1] = -pthisSV->fC6x12[1][2];
	pthisSV->fC6x12[3][1] = FDEGTORAD * pthisSV->fmSeGyMi[Z];
	pthisSV->fC6x12[3][2] = -FDEGTORAD * pthisSV->fmSeGyMi[Y];
	pthisSV->fC6x12[4][2] = FDEGTORAD * pthisSV->fmSeGyMi[X];
    85ae:	4682      	mov	sl, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1259
	pthisSV->fC6x12[4][0] = -pthisSV->fC6x12[3][1];
	pthisSV->fC6x12[5][0] = -pthisSV->fC6x12[3][2];
	pthisSV->fC6x12[5][1] = -pthisSV->fC6x12[4][2];
    85b0:	1c0a      	adds	r2, r1, #0
    85b2:	4b6b      	ldr	r3, [pc, #428]	; (8760 <fRun_9DOF_GBY_KALMAN+0x68c>)
    85b4:	4452      	add	r2, sl
    85b6:	4658      	mov	r0, fp
    85b8:	50c2      	str	r2, [r0, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1260
	pthisSV->fC6x12[0][4] = -pthisSV->fdeltat * pthisSV->fC6x12[0][1];
    85ba:	4b6a      	ldr	r3, [pc, #424]	; (8764 <fRun_9DOF_GBY_KALMAN+0x690>)
    85bc:	58c4      	ldr	r4, [r0, r3]
    85be:	1c28      	adds	r0, r5, #0
    85c0:	1864      	adds	r4, r4, r1
    85c2:	1c21      	adds	r1, r4, #0
    85c4:	f7f8 fbe6 	bl	d94 <__aeabi_fmul>
    85c8:	23d9      	movs	r3, #217	; 0xd9
    85ca:	465a      	mov	r2, fp
    85cc:	00db      	lsls	r3, r3, #3
    85ce:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1261
	pthisSV->fC6x12[0][5] = -pthisSV->fdeltat * pthisSV->fC6x12[0][2];
    85d0:	1c21      	adds	r1, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1260
	pthisSV->fC6x12[3][2] = -FDEGTORAD * pthisSV->fmSeGyMi[Y];
	pthisSV->fC6x12[4][2] = FDEGTORAD * pthisSV->fmSeGyMi[X];
	pthisSV->fC6x12[4][0] = -pthisSV->fC6x12[3][1];
	pthisSV->fC6x12[5][0] = -pthisSV->fC6x12[3][2];
	pthisSV->fC6x12[5][1] = -pthisSV->fC6x12[4][2];
	pthisSV->fC6x12[0][4] = -pthisSV->fdeltat * pthisSV->fC6x12[0][1];
    85d2:	9003      	str	r0, [sp, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1261
	pthisSV->fC6x12[0][5] = -pthisSV->fdeltat * pthisSV->fC6x12[0][2];
    85d4:	1c30      	adds	r0, r6, #0
    85d6:	f7f8 fbdd 	bl	d94 <__aeabi_fmul>
    85da:	4b63      	ldr	r3, [pc, #396]	; (8768 <fRun_9DOF_GBY_KALMAN+0x694>)
    85dc:	1c05      	adds	r5, r0, #0
    85de:	4658      	mov	r0, fp
    85e0:	50c5      	str	r5, [r0, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1262
	pthisSV->fC6x12[1][5] = -pthisSV->fdeltat * pthisSV->fC6x12[1][2];
    85e2:	1c21      	adds	r1, r4, #0
    85e4:	1c38      	adds	r0, r7, #0
    85e6:	f7f8 fbd5 	bl	d94 <__aeabi_fmul>
    85ea:	4b60      	ldr	r3, [pc, #384]	; (876c <fRun_9DOF_GBY_KALMAN+0x698>)
    85ec:	4659      	mov	r1, fp
    85ee:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1263
	pthisSV->fC6x12[1][3]= -pthisSV->fC6x12[0][4];
    85f0:	2780      	movs	r7, #128	; 0x80
    85f2:	9b03      	ldr	r3, [sp, #12]
    85f4:	063f      	lsls	r7, r7, #24
    85f6:	19da      	adds	r2, r3, r7
    85f8:	4b5d      	ldr	r3, [pc, #372]	; (8770 <fRun_9DOF_GBY_KALMAN+0x69c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1264
	pthisSV->fC6x12[2][3]= -pthisSV->fC6x12[0][5];
    85fa:	19ed      	adds	r5, r5, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1263
	pthisSV->fC6x12[5][0] = -pthisSV->fC6x12[3][2];
	pthisSV->fC6x12[5][1] = -pthisSV->fC6x12[4][2];
	pthisSV->fC6x12[0][4] = -pthisSV->fdeltat * pthisSV->fC6x12[0][1];
	pthisSV->fC6x12[0][5] = -pthisSV->fdeltat * pthisSV->fC6x12[0][2];
	pthisSV->fC6x12[1][5] = -pthisSV->fdeltat * pthisSV->fC6x12[1][2];
	pthisSV->fC6x12[1][3]= -pthisSV->fC6x12[0][4];
    85fc:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1264
	pthisSV->fC6x12[2][3]= -pthisSV->fC6x12[0][5];
    85fe:	4b5d      	ldr	r3, [pc, #372]	; (8774 <fRun_9DOF_GBY_KALMAN+0x6a0>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1265
	pthisSV->fC6x12[2][4]= -pthisSV->fC6x12[1][5];
    8600:	19c0      	adds	r0, r0, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1264
	pthisSV->fC6x12[5][1] = -pthisSV->fC6x12[4][2];
	pthisSV->fC6x12[0][4] = -pthisSV->fdeltat * pthisSV->fC6x12[0][1];
	pthisSV->fC6x12[0][5] = -pthisSV->fdeltat * pthisSV->fC6x12[0][2];
	pthisSV->fC6x12[1][5] = -pthisSV->fdeltat * pthisSV->fC6x12[1][2];
	pthisSV->fC6x12[1][3]= -pthisSV->fC6x12[0][4];
	pthisSV->fC6x12[2][3]= -pthisSV->fC6x12[0][5];
    8602:	50cd      	str	r5, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1265
	pthisSV->fC6x12[2][4]= -pthisSV->fC6x12[1][5];
    8604:	23e5      	movs	r3, #229	; 0xe5
    8606:	00db      	lsls	r3, r3, #3
    8608:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1266
	pthisSV->fC6x12[3][4] = -pthisSV->fdeltat * pthisSV->fC6x12[3][1];
    860a:	1c21      	adds	r1, r4, #0
    860c:	4640      	mov	r0, r8
    860e:	f7f8 fbc1 	bl	d94 <__aeabi_fmul>
    8612:	23eb      	movs	r3, #235	; 0xeb
    8614:	1c06      	adds	r6, r0, #0
    8616:	00db      	lsls	r3, r3, #3
    8618:	4658      	mov	r0, fp
    861a:	50c6      	str	r6, [r0, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1267
	pthisSV->fC6x12[3][5] = -pthisSV->fdeltat * pthisSV->fC6x12[3][2];
    861c:	1c21      	adds	r1, r4, #0
    861e:	4648      	mov	r0, r9
    8620:	f7f8 fbb8 	bl	d94 <__aeabi_fmul>
    8624:	4b54      	ldr	r3, [pc, #336]	; (8778 <fRun_9DOF_GBY_KALMAN+0x6a4>)
    8626:	4659      	mov	r1, fp
    8628:	50c8      	str	r0, [r1, r3]
    862a:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1268
	pthisSV->fC6x12[4][5] = -pthisSV->fdeltat * pthisSV->fC6x12[4][2];
    862c:	1c21      	adds	r1, r4, #0
    862e:	4650      	mov	r0, sl
    8630:	f7f8 fbb0 	bl	d94 <__aeabi_fmul>
    8634:	4b51      	ldr	r3, [pc, #324]	; (877c <fRun_9DOF_GBY_KALMAN+0x6a8>)
    8636:	465a      	mov	r2, fp
    8638:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1269
	pthisSV->fC6x12[4][3] = -pthisSV->fC6x12[3][4];
    863a:	4b51      	ldr	r3, [pc, #324]	; (8780 <fRun_9DOF_GBY_KALMAN+0x6ac>)
    863c:	19f6      	adds	r6, r6, r7
    863e:	50d6      	str	r6, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1270
	pthisSV->fC6x12[5][3] = -pthisSV->fC6x12[3][5];
    8640:	4b50      	ldr	r3, [pc, #320]	; (8784 <fRun_9DOF_GBY_KALMAN+0x6b0>)
    8642:	19ed      	adds	r5, r5, r7
    8644:	50d5      	str	r5, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1271
	pthisSV->fC6x12[5][4] = -pthisSV->fC6x12[4][5];
    8646:	23f7      	movs	r3, #247	; 0xf7
    8648:	19c0      	adds	r0, r0, r7
    864a:	00db      	lsls	r3, r3, #3
    864c:	248f      	movs	r4, #143	; 0x8f
    864e:	50d0      	str	r0, [r2, r3]
    8650:	00e4      	lsls	r4, r4, #3
    8652:	20d7      	movs	r0, #215	; 0xd7
    8654:	1c27      	adds	r7, r4, #0
    8656:	00c0      	lsls	r0, r0, #3
    8658:	ac74      	add	r4, sp, #464	; 0x1d0
    865a:	9404      	str	r4, [sp, #16]
    865c:	1c04      	adds	r4, r0, #0
    865e:	ab2c      	add	r3, sp, #176	; 0xb0
    8660:	445f      	add	r7, fp
    8662:	445c      	add	r4, fp
    8664:	469a      	mov	sl, r3
    8666:	9706      	str	r7, [sp, #24]
    8668:	9403      	str	r4, [sp, #12]
    866a:	2018      	movs	r0, #24
    866c:	4240      	negs	r0, r0
    866e:	4680      	mov	r8, r0
    8670:	9903      	ldr	r1, [sp, #12]
    8672:	44d0      	add	r8, sl
    8674:	4689      	mov	r9, r1
    8676:	4646      	mov	r6, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1291
		pftmpA12x6ij = ftmpA12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of ftmpA12x6
		{
			// zero ftmpA12x6[i][j]
			*pftmpA12x6ij = 0.0F;
    8678:	2200      	movs	r2, #0
    867a:	6032      	str	r2, [r6, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1294

			// initialize pfC6x12jk for current j, k=0
			pfC6x12jk = pthisSV->fC6x12[j];
    867c:	46b0      	mov	r8, r6
    867e:	2400      	movs	r4, #0
    8680:	464e      	mov	r6, r9
    8682:	e009      	b.n	8698 <fRun_9DOF_GBY_KALMAN+0x5c4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1305
			for (k = 0; k < 12; k++)
			{
				if ((*pfQw12x12ik != 0.0F) && (*pfC6x12jk != 0.0F))
				{
					if (*pfC6x12jk == 1.0F)
						*pftmpA12x6ij += *pfQw12x12ik;
    8684:	4641      	mov	r1, r8
    8686:	6808      	ldr	r0, [r1, #0]
    8688:	1c29      	adds	r1, r5, #0
    868a:	f7f8 f833 	bl	6f4 <__aeabi_fadd>
    868e:	4642      	mov	r2, r8
    8690:	6010      	str	r0, [r2, #0]
    8692:	3404      	adds	r4, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1300

			// initialize pfQw12x12ik for current i, k=0
			pfQw12x12ik = pthisSV->fQw12x12[i];

			// sum matrix products over inner loop over k
			for (k = 0; k < 12; k++)
    8694:	2c30      	cmp	r4, #48	; 0x30
    8696:	d027      	beq.n	86e8 <fRun_9DOF_GBY_KALMAN+0x614>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1302
			{
				if ((*pfQw12x12ik != 0.0F) && (*pfC6x12jk != 0.0F))
    8698:	593d      	ldr	r5, [r7, r4]
    869a:	2100      	movs	r1, #0
    869c:	1c28      	adds	r0, r5, #0
    869e:	f7f7 fffb 	bl	698 <__aeabi_fcmpeq>
    86a2:	2800      	cmp	r0, #0
    86a4:	d1f5      	bne.n	8692 <fRun_9DOF_GBY_KALMAN+0x5be>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1302 (discriminator 1)
    86a6:	5933      	ldr	r3, [r6, r4]
    86a8:	2100      	movs	r1, #0
    86aa:	1c18      	adds	r0, r3, #0
    86ac:	4699      	mov	r9, r3
    86ae:	f7f7 fff3 	bl	698 <__aeabi_fcmpeq>
    86b2:	2800      	cmp	r0, #0
    86b4:	d1ed      	bne.n	8692 <fRun_9DOF_GBY_KALMAN+0x5be>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1304
				{
					if (*pfC6x12jk == 1.0F)
    86b6:	21fe      	movs	r1, #254	; 0xfe
    86b8:	4648      	mov	r0, r9
    86ba:	0589      	lsls	r1, r1, #22
    86bc:	f7f7 ffec 	bl	698 <__aeabi_fcmpeq>
    86c0:	2800      	cmp	r0, #0
    86c2:	d1df      	bne.n	8684 <fRun_9DOF_GBY_KALMAN+0x5b0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1306
						*pftmpA12x6ij += *pfQw12x12ik;
					else if (*pfC6x12jk == -1.0F)
    86c4:	4648      	mov	r0, r9
    86c6:	4930      	ldr	r1, [pc, #192]	; (8788 <fRun_9DOF_GBY_KALMAN+0x6b4>)
    86c8:	f7f7 ffe6 	bl	698 <__aeabi_fcmpeq>
    86cc:	2800      	cmp	r0, #0
    86ce:	d101      	bne.n	86d4 <fRun_9DOF_GBY_KALMAN+0x600>
    86d0:	f000 fe19 	bl	9306 <fRun_9DOF_GBY_KALMAN+0x1232>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1307
						*pftmpA12x6ij -= *pfQw12x12ik;
    86d4:	4643      	mov	r3, r8
    86d6:	6818      	ldr	r0, [r3, #0]
    86d8:	1c29      	adds	r1, r5, #0
    86da:	f7f8 fc85 	bl	fe8 <__aeabi_fsub>
    86de:	3404      	adds	r4, #4
    86e0:	4641      	mov	r1, r8
    86e2:	6008      	str	r0, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1300

			// initialize pfQw12x12ik for current i, k=0
			pfQw12x12ik = pthisSV->fQw12x12[i];

			// sum matrix products over inner loop over k
			for (k = 0; k < 12; k++)
    86e4:	2c30      	cmp	r4, #48	; 0x30
    86e6:	d1d7      	bne.n	8698 <fRun_9DOF_GBY_KALMAN+0x5c4>
    86e8:	46b1      	mov	r9, r6
    86ea:	4646      	mov	r6, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1319
				pfQw12x12ik++;

			} // end of loop over k

			// increment pftmpA12x6ij for next iteration of j
			pftmpA12x6ij++;
    86ec:	3604      	adds	r6, #4
    86ee:	44a1      	add	r9, r4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1288
	for (i = 0; i < 12; i++) // loop over rows of ftmpA12x6
	{
		// initialize pftmpA12x6ij for current i, j=0
		pftmpA12x6ij = ftmpA12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of ftmpA12x6
    86f0:	4556      	cmp	r6, sl
    86f2:	d1c1      	bne.n	8678 <fRun_9DOF_GBY_KALMAN+0x5a4>
    86f4:	2018      	movs	r0, #24
    86f6:	46b0      	mov	r8, r6
    86f8:	4682      	mov	sl, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1283
	// *********************************************************************************

	// set ftmpA12x6 = P- * C^T = Qw * C^T where Qw and C are both sparse
	// C also has a significant number of +1 and -1 entries
	// ftmpA12x6 is also sparse but not symmetric
	for (i = 0; i < 12; i++) // loop over rows of ftmpA12x6
    86fa:	9c04      	ldr	r4, [sp, #16]
    86fc:	44c2      	add	sl, r8
    86fe:	3730      	adds	r7, #48	; 0x30
    8700:	45a2      	cmp	sl, r4
    8702:	d1b2      	bne.n	866a <fRun_9DOF_GBY_KALMAN+0x596>
    8704:	208c      	movs	r0, #140	; 0x8c
    8706:	0040      	lsls	r0, r0, #1
    8708:	27dd      	movs	r7, #221	; 0xdd
    870a:	1c04      	adds	r4, r0, #0
    870c:	445c      	add	r4, fp
    870e:	00ff      	lsls	r7, r7, #3
    8710:	46b8      	mov	r8, r7
    8712:	9411      	str	r4, [sp, #68]	; 0x44
    8714:	9404      	str	r4, [sp, #16]
    8716:	2700      	movs	r7, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1335
		pfPPlus12x12ij = pthisSV->fPPlus12x12[i] + i;

		for (j = i; j < 6; j++) // loop over above diagonal columns of P+
		{
			// zero P+[i][j] 
			*pfPPlus12x12ij = 0.0F;
    8718:	465c      	mov	r4, fp
    871a:	44d8      	add	r8, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1283
	// *********************************************************************************

	// set ftmpA12x6 = P- * C^T = Qw * C^T where Qw and C are both sparse
	// C also has a significant number of +1 and -1 entries
	// ftmpA12x6 is also sparse but not symmetric
	for (i = 0; i < 12; i++) // loop over rows of ftmpA12x6
    871c:	9703      	str	r7, [sp, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1335
		pfPPlus12x12ij = pthisSV->fPPlus12x12[i] + i;

		for (j = i; j < 6; j++) // loop over above diagonal columns of P+
		{
			// zero P+[i][j] 
			*pfPPlus12x12ij = 0.0F;
    871e:	9405      	str	r4, [sp, #20]
    8720:	2030      	movs	r0, #48	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1330
	// = C * (Qw * C^T) + Qv = C * ftmpA12x6 + Qv
	// both C and ftmpA12x6 are sparse but not symmetric
	for (i = 0; i < 6; i++) // loop over rows of P+
	{
		// initialize pfPPlus12x12ij for current i, j=i
		pfPPlus12x12ij = pthisSV->fPPlus12x12[i] + i;
    8722:	9f04      	ldr	r7, [sp, #16]
    8724:	9903      	ldr	r1, [sp, #12]
    8726:	4240      	negs	r0, r0
    8728:	4683      	mov	fp, r0
    872a:	46b9      	mov	r9, r7
    872c:	44c3      	add	fp, r8
    872e:	468a      	mov	sl, r1
    8730:	b24d      	sxtb	r5, r1
    8732:	4647      	mov	r7, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1335

		for (j = i; j < 6; j++) // loop over above diagonal columns of P+
		{
			// zero P+[i][j] 
			*pfPPlus12x12ij = 0.0F;
    8734:	2100      	movs	r1, #0
    8736:	4648      	mov	r0, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1341

			// initialize pfC6x12ik for current i, k=0
			pfC6x12ik = pthisSV->fC6x12[i];

			// initialize pftmpA12x6kj for current j, k=0
			pftmpA12x6kj = *ftmpA12x6 + j;
    8738:	00ad      	lsls	r5, r5, #2
    873a:	aa26      	add	r2, sp, #152	; 0x98
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1335
		pfPPlus12x12ij = pthisSV->fPPlus12x12[i] + i;

		for (j = i; j < 6; j++) // loop over above diagonal columns of P+
		{
			// zero P+[i][j] 
			*pfPPlus12x12ij = 0.0F;
    873c:	6001      	str	r1, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1341

			// initialize pfC6x12ik for current i, k=0
			pfC6x12ik = pthisSV->fC6x12[i];

			// initialize pftmpA12x6kj for current j, k=0
			pftmpA12x6kj = *ftmpA12x6 + j;
    873e:	1955      	adds	r5, r2, r5
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1338
		{
			// zero P+[i][j] 
			*pfPPlus12x12ij = 0.0F;

			// initialize pfC6x12ik for current i, k=0
			pfC6x12ik = pthisSV->fC6x12[i];
    8740:	465c      	mov	r4, fp
    8742:	e02e      	b.n	87a2 <fRun_9DOF_GBY_KALMAN+0x6ce>
    8744:	000007ec 	.word	0x000007ec
    8748:	000007e4 	.word	0x000007e4
    874c:	3c8efa35 	.word	0x3c8efa35
    8750:	000006bc 	.word	0x000006bc
    8754:	bc8efa35 	.word	0xbc8efa35
    8758:	0000071c 	.word	0x0000071c
    875c:	0000074c 	.word	0x0000074c
    8760:	000007ac 	.word	0x000007ac
    8764:	00000828 	.word	0x00000828
    8768:	000006cc 	.word	0x000006cc
    876c:	000006fc 	.word	0x000006fc
    8770:	000006f4 	.word	0x000006f4
    8774:	00000724 	.word	0x00000724
    8778:	0000075c 	.word	0x0000075c
    877c:	0000078c 	.word	0x0000078c
    8780:	00000784 	.word	0x00000784
    8784:	000007b4 	.word	0x000007b4
    8788:	bf800000 	.word	0xbf800000
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1349
			for (k = 0; k < 12; k++)
			{
				if ((*pfC6x12ik != 0.0F) && (*pftmpA12x6kj != 0.0F))
				{
					if (*pfC6x12ik == 1.0F)
						*pfPPlus12x12ij += *pftmpA12x6kj;
    878c:	4649      	mov	r1, r9
    878e:	6808      	ldr	r0, [r1, #0]
    8790:	4641      	mov	r1, r8
    8792:	f7f7 ffaf 	bl	6f4 <__aeabi_fadd>
    8796:	464a      	mov	r2, r9
    8798:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1357
					else
						*pfPPlus12x12ij += *pfC6x12ik * *pftmpA12x6kj;
				}

				// update pfC6x12ik and pftmpA12x6kj for next iteration of k
				pfC6x12ik++;						
    879a:	3404      	adds	r4, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1358
				pftmpA12x6kj += 6;
    879c:	3518      	adds	r5, #24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1344

			// initialize pftmpA12x6kj for current j, k=0
			pftmpA12x6kj = *ftmpA12x6 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 12; k++)
    879e:	42bc      	cmp	r4, r7
    87a0:	d02c      	beq.n	87fc <fRun_9DOF_GBY_KALMAN+0x728>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1346
			{
				if ((*pfC6x12ik != 0.0F) && (*pftmpA12x6kj != 0.0F))
    87a2:	6826      	ldr	r6, [r4, #0]
    87a4:	2100      	movs	r1, #0
    87a6:	1c30      	adds	r0, r6, #0
    87a8:	f7f7 ff76 	bl	698 <__aeabi_fcmpeq>
    87ac:	2800      	cmp	r0, #0
    87ae:	d1f4      	bne.n	879a <fRun_9DOF_GBY_KALMAN+0x6c6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1346 (discriminator 1)
    87b0:	682b      	ldr	r3, [r5, #0]
    87b2:	2100      	movs	r1, #0
    87b4:	1c18      	adds	r0, r3, #0
    87b6:	4698      	mov	r8, r3
    87b8:	f7f7 ff6e 	bl	698 <__aeabi_fcmpeq>
    87bc:	2800      	cmp	r0, #0
    87be:	d1ec      	bne.n	879a <fRun_9DOF_GBY_KALMAN+0x6c6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1348
				{
					if (*pfC6x12ik == 1.0F)
    87c0:	21fe      	movs	r1, #254	; 0xfe
    87c2:	1c30      	adds	r0, r6, #0
    87c4:	0589      	lsls	r1, r1, #22
    87c6:	f7f7 ff67 	bl	698 <__aeabi_fcmpeq>
    87ca:	2800      	cmp	r0, #0
    87cc:	d1de      	bne.n	878c <fRun_9DOF_GBY_KALMAN+0x6b8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1350
						*pfPPlus12x12ij += *pftmpA12x6kj;
					else if (*pfC6x12ik == -1.0F)
    87ce:	1c30      	adds	r0, r6, #0
    87d0:	4909      	ldr	r1, [pc, #36]	; (87f8 <fRun_9DOF_GBY_KALMAN+0x724>)
    87d2:	f7f7 ff61 	bl	698 <__aeabi_fcmpeq>
    87d6:	2800      	cmp	r0, #0
    87d8:	d101      	bne.n	87de <fRun_9DOF_GBY_KALMAN+0x70a>
    87da:	f000 fda1 	bl	9320 <fRun_9DOF_GBY_KALMAN+0x124c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1351
						*pfPPlus12x12ij -= *pftmpA12x6kj;
    87de:	464b      	mov	r3, r9
    87e0:	6818      	ldr	r0, [r3, #0]
    87e2:	4641      	mov	r1, r8
    87e4:	f7f8 fc00 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1357
					else
						*pfPPlus12x12ij += *pfC6x12ik * *pftmpA12x6kj;
				}

				// update pfC6x12ik and pftmpA12x6kj for next iteration of k
				pfC6x12ik++;						
    87e8:	3404      	adds	r4, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1351
				if ((*pfC6x12ik != 0.0F) && (*pftmpA12x6kj != 0.0F))
				{
					if (*pfC6x12ik == 1.0F)
						*pfPPlus12x12ij += *pftmpA12x6kj;
					else if (*pfC6x12ik == -1.0F)
						*pfPPlus12x12ij -= *pftmpA12x6kj;
    87ea:	4649      	mov	r1, r9
    87ec:	6008      	str	r0, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1358
						*pfPPlus12x12ij += *pfC6x12ik * *pftmpA12x6kj;
				}

				// update pfC6x12ik and pftmpA12x6kj for next iteration of k
				pfC6x12ik++;						
				pftmpA12x6kj += 6;
    87ee:	3518      	adds	r5, #24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1344

			// initialize pftmpA12x6kj for current j, k=0
			pftmpA12x6kj = *ftmpA12x6 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 12; k++)
    87f0:	42bc      	cmp	r4, r7
    87f2:	d1d6      	bne.n	87a2 <fRun_9DOF_GBY_KALMAN+0x6ce>
    87f4:	e002      	b.n	87fc <fRun_9DOF_GBY_KALMAN+0x728>
    87f6:	46c0      	nop			; (mov r8, r8)
    87f8:	bf800000 	.word	0xbf800000
    87fc:	4653      	mov	r3, sl
    87fe:	3301      	adds	r3, #1
    8800:	b2db      	uxtb	r3, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1363
				pftmpA12x6kj += 6;

			} // end of loop over k

			// increment pfPPlus12x12ij for next iteration of j
			pfPPlus12x12ij++;
    8802:	2004      	movs	r0, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1332
	for (i = 0; i < 6; i++) // loop over rows of P+
	{
		// initialize pfPPlus12x12ij for current i, j=i
		pfPPlus12x12ij = pthisSV->fPPlus12x12[i] + i;

		for (j = i; j < 6; j++) // loop over above diagonal columns of P+
    8804:	b25d      	sxtb	r5, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1363
				pftmpA12x6kj += 6;

			} // end of loop over k

			// increment pfPPlus12x12ij for next iteration of j
			pfPPlus12x12ij++;
    8806:	4481      	add	r9, r0
    8808:	469a      	mov	sl, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1332
	for (i = 0; i < 6; i++) // loop over rows of P+
	{
		// initialize pfPPlus12x12ij for current i, j=i
		pfPPlus12x12ij = pthisSV->fPPlus12x12[i] + i;

		for (j = i; j < 6; j++) // loop over above diagonal columns of P+
    880a:	2d05      	cmp	r5, #5
    880c:	dd92      	ble.n	8734 <fRun_9DOF_GBY_KALMAN+0x660>
    880e:	9b03      	ldr	r3, [sp, #12]
    8810:	3430      	adds	r4, #48	; 0x30
    8812:	46a0      	mov	r8, r4
    8814:	9c04      	ldr	r4, [sp, #16]
    8816:	3301      	adds	r3, #1
    8818:	b2db      	uxtb	r3, r3
    881a:	3434      	adds	r4, #52	; 0x34
    881c:	9303      	str	r3, [sp, #12]
    881e:	9404      	str	r4, [sp, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1327
	} // end of loop over i

	// set symmetric P+ (6x6 scratch sub-matrix) to C * P- * C^T + Qv
	// = C * (Qw * C^T) + Qv = C * ftmpA12x6 + Qv
	// both C and ftmpA12x6 are sparse but not symmetric
	for (i = 0; i < 6; i++) // loop over rows of P+
    8820:	2b06      	cmp	r3, #6
    8822:	d000      	beq.n	8826 <fRun_9DOF_GBY_KALMAN+0x752>
    8824:	e77c      	b.n	8720 <fRun_9DOF_GBY_KALMAN+0x64c>
    8826:	9f05      	ldr	r7, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1369

		} // end of loop over j
	} // end of loop over i

	// add in noise covariance terms to the diagonal
	pthisSV->fPPlus12x12[0][0] +=  pthisSV->fQvAA;
    8828:	2388      	movs	r3, #136	; 0x88
    882a:	005b      	lsls	r3, r3, #1
    882c:	58fc      	ldr	r4, [r7, r3]
    882e:	258c      	movs	r5, #140	; 0x8c
    8830:	006d      	lsls	r5, r5, #1
    8832:	5978      	ldr	r0, [r7, r5]
    8834:	1c21      	adds	r1, r4, #0
    8836:	f7f7 ff5d 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1370
	pthisSV->fPPlus12x12[1][1] +=  pthisSV->fQvAA;
    883a:	26a6      	movs	r6, #166	; 0xa6
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1369

		} // end of loop over j
	} // end of loop over i

	// add in noise covariance terms to the diagonal
	pthisSV->fPPlus12x12[0][0] +=  pthisSV->fQvAA;
    883c:	5178      	str	r0, [r7, r5]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1370
	pthisSV->fPPlus12x12[1][1] +=  pthisSV->fQvAA;
    883e:	0076      	lsls	r6, r6, #1
    8840:	59b9      	ldr	r1, [r7, r6]
    8842:	1c20      	adds	r0, r4, #0
    8844:	f7f7 ff56 	bl	6f4 <__aeabi_fadd>
    8848:	51b8      	str	r0, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1371
	pthisSV->fPPlus12x12[2][2] +=  pthisSV->fQvAA;
    884a:	26c0      	movs	r6, #192	; 0xc0
    884c:	0076      	lsls	r6, r6, #1
    884e:	59b9      	ldr	r1, [r7, r6]
    8850:	1c20      	adds	r0, r4, #0
    8852:	f7f7 ff4f 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1372
	pthisSV->fPPlus12x12[3][3] +=  pthisSV->fQvMM;
    8856:	238a      	movs	r3, #138	; 0x8a
    8858:	005b      	lsls	r3, r3, #1
    885a:	58fc      	ldr	r4, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1371
	} // end of loop over i

	// add in noise covariance terms to the diagonal
	pthisSV->fPPlus12x12[0][0] +=  pthisSV->fQvAA;
	pthisSV->fPPlus12x12[1][1] +=  pthisSV->fQvAA;
	pthisSV->fPPlus12x12[2][2] +=  pthisSV->fQvAA;
    885c:	51b8      	str	r0, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1372
	pthisSV->fPPlus12x12[3][3] +=  pthisSV->fQvMM;
    885e:	26da      	movs	r6, #218	; 0xda
    8860:	0076      	lsls	r6, r6, #1
    8862:	59b8      	ldr	r0, [r7, r6]
    8864:	1c21      	adds	r1, r4, #0
    8866:	f7f7 ff45 	bl	6f4 <__aeabi_fadd>
    886a:	51b8      	str	r0, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1373
	pthisSV->fPPlus12x12[4][4] +=  pthisSV->fQvMM;
    886c:	26f4      	movs	r6, #244	; 0xf4
    886e:	0076      	lsls	r6, r6, #1
    8870:	59b9      	ldr	r1, [r7, r6]
    8872:	1c20      	adds	r0, r4, #0
    8874:	f7f7 ff3e 	bl	6f4 <__aeabi_fadd>
    8878:	51b8      	str	r0, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1374
	pthisSV->fPPlus12x12[5][5] +=  pthisSV->fQvMM;
    887a:	2687      	movs	r6, #135	; 0x87
    887c:	00b6      	lsls	r6, r6, #2
    887e:	59b9      	ldr	r1, [r7, r6]
    8880:	1c20      	adds	r0, r4, #0
    8882:	f7f7 ff37 	bl	6f4 <__aeabi_fadd>
    8886:	46bb      	mov	fp, r7
    8888:	51b8      	str	r0, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1379

	// copy above diagonal elements of P+ (6x6 scratch sub-matrix) to below diagonal
	for (i = 1; i < 6; i++) 	
		for (j = 0; j < i; j++) 
			pthisSV->fPPlus12x12[i][j] = pthisSV->fPPlus12x12[j][i];
    888a:	23d4      	movs	r3, #212	; 0xd4
    888c:	27a4      	movs	r7, #164	; 0xa4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1377
	pthisSV->fPPlus12x12[3][3] +=  pthisSV->fQvMM;
	pthisSV->fPPlus12x12[4][4] +=  pthisSV->fQvMM;
	pthisSV->fPPlus12x12[5][5] +=  pthisSV->fQvMM;

	// copy above diagonal elements of P+ (6x6 scratch sub-matrix) to below diagonal
	for (i = 1; i < 6; i++) 	
    888e:	2001      	movs	r0, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1379
		for (j = 0; j < i; j++) 
			pthisSV->fPPlus12x12[i][j] = pthisSV->fPPlus12x12[j][i];
    8890:	007f      	lsls	r7, r7, #1
    8892:	26bc      	movs	r6, #188	; 0xbc
    8894:	005b      	lsls	r3, r3, #1
    8896:	46b9      	mov	r9, r7
    8898:	0076      	lsls	r6, r6, #1
    889a:	469c      	mov	ip, r3
    889c:	4680      	mov	r8, r0
    889e:	465c      	mov	r4, fp
    88a0:	4640      	mov	r0, r8
    88a2:	b243      	sxtb	r3, r0
    88a4:	005a      	lsls	r2, r3, #1
    88a6:	18d2      	adds	r2, r2, r3
    88a8:	0099      	lsls	r1, r3, #2
    88aa:	0112      	lsls	r2, r2, #4
    88ac:	278c      	movs	r7, #140	; 0x8c
    88ae:	007f      	lsls	r7, r7, #1
    88b0:	1861      	adds	r1, r4, r1
    88b2:	18a2      	adds	r2, r4, r2
    88b4:	19d0      	adds	r0, r2, r7
    88b6:	594f      	ldr	r7, [r1, r5]
    88b8:	6007      	str	r7, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1378
	pthisSV->fPPlus12x12[4][4] +=  pthisSV->fQvMM;
	pthisSV->fPPlus12x12[5][5] +=  pthisSV->fQvMM;

	// copy above diagonal elements of P+ (6x6 scratch sub-matrix) to below diagonal
	for (i = 1; i < 6; i++) 	
		for (j = 0; j < i; j++) 
    88ba:	2b01      	cmp	r3, #1
    88bc:	d101      	bne.n	88c2 <fRun_9DOF_GBY_KALMAN+0x7ee>
    88be:	f001 fc71 	bl	a1a4 <fRun_9DOF_GBY_KALMAN+0x20d0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1379
			pthisSV->fPPlus12x12[i][j] = pthisSV->fPPlus12x12[j][i];
    88c2:	4648      	mov	r0, r9
    88c4:	5808      	ldr	r0, [r1, r0]
    88c6:	278e      	movs	r7, #142	; 0x8e
    88c8:	9002      	str	r0, [sp, #8]
    88ca:	007f      	lsls	r7, r7, #1
    88cc:	19d0      	adds	r0, r2, r7
    88ce:	9f02      	ldr	r7, [sp, #8]
    88d0:	6007      	str	r7, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1378
	pthisSV->fPPlus12x12[4][4] +=  pthisSV->fQvMM;
	pthisSV->fPPlus12x12[5][5] +=  pthisSV->fQvMM;

	// copy above diagonal elements of P+ (6x6 scratch sub-matrix) to below diagonal
	for (i = 1; i < 6; i++) 	
		for (j = 0; j < i; j++) 
    88d2:	2b02      	cmp	r3, #2
    88d4:	d101      	bne.n	88da <fRun_9DOF_GBY_KALMAN+0x806>
    88d6:	f001 fc65 	bl	a1a4 <fRun_9DOF_GBY_KALMAN+0x20d0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1379
			pthisSV->fPPlus12x12[i][j] = pthisSV->fPPlus12x12[j][i];
    88da:	2790      	movs	r7, #144	; 0x90
    88dc:	007f      	lsls	r7, r7, #1
    88de:	19d0      	adds	r0, r2, r7
    88e0:	598f      	ldr	r7, [r1, r6]
    88e2:	6007      	str	r7, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1378
	pthisSV->fPPlus12x12[4][4] +=  pthisSV->fQvMM;
	pthisSV->fPPlus12x12[5][5] +=  pthisSV->fQvMM;

	// copy above diagonal elements of P+ (6x6 scratch sub-matrix) to below diagonal
	for (i = 1; i < 6; i++) 	
		for (j = 0; j < i; j++) 
    88e4:	2b03      	cmp	r3, #3
    88e6:	d101      	bne.n	88ec <fRun_9DOF_GBY_KALMAN+0x818>
    88e8:	f001 fc5c 	bl	a1a4 <fRun_9DOF_GBY_KALMAN+0x20d0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1379
			pthisSV->fPPlus12x12[i][j] = pthisSV->fPPlus12x12[j][i];
    88ec:	4660      	mov	r0, ip
    88ee:	5809      	ldr	r1, [r1, r0]
    88f0:	3225      	adds	r2, #37	; 0x25
    88f2:	32ff      	adds	r2, #255	; 0xff
    88f4:	6011      	str	r1, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1378
	pthisSV->fPPlus12x12[4][4] +=  pthisSV->fQvMM;
	pthisSV->fPPlus12x12[5][5] +=  pthisSV->fQvMM;

	// copy above diagonal elements of P+ (6x6 scratch sub-matrix) to below diagonal
	for (i = 1; i < 6; i++) 	
		for (j = 0; j < i; j++) 
    88f6:	2b05      	cmp	r3, #5
    88f8:	d001      	beq.n	88fe <fRun_9DOF_GBY_KALMAN+0x82a>
    88fa:	f001 fc53 	bl	a1a4 <fRun_9DOF_GBY_KALMAN+0x20d0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1379
			pthisSV->fPPlus12x12[i][j] = pthisSV->fPPlus12x12[j][i];
    88fe:	23f6      	movs	r3, #246	; 0xf6
    8900:	005b      	lsls	r3, r3, #1
    8902:	46a3      	mov	fp, r4
    8904:	591a      	ldr	r2, [r3, r4]
    8906:	2186      	movs	r1, #134	; 0x86
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1384

	// calculate inverse of P+ (6x6 scratch sub-matrix) = inv(C * P- * C^T + Qv) = inv(C * Qw * C^T + Qv)
	for (i = 0; i < 6; i++)
	{
		pfRows[i] = pthisSV->fPPlus12x12[i];
    8908:	9c11      	ldr	r4, [sp, #68]	; 0x44
    890a:	27a4      	movs	r7, #164	; 0xa4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1379
	pthisSV->fPPlus12x12[5][5] +=  pthisSV->fQvMM;

	// copy above diagonal elements of P+ (6x6 scratch sub-matrix) to below diagonal
	for (i = 1; i < 6; i++) 	
		for (j = 0; j < i; j++) 
			pthisSV->fPPlus12x12[i][j] = pthisSV->fPPlus12x12[j][i];
    890c:	0089      	lsls	r1, r1, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1384

	// calculate inverse of P+ (6x6 scratch sub-matrix) = inv(C * P- * C^T + Qv) = inv(C * Qw * C^T + Qv)
	for (i = 0; i < 6; i++)
	{
		pfRows[i] = pthisSV->fPPlus12x12[i];
    890e:	007f      	lsls	r7, r7, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1379
	pthisSV->fPPlus12x12[5][5] +=  pthisSV->fQvMM;

	// copy above diagonal elements of P+ (6x6 scratch sub-matrix) to below diagonal
	for (i = 1; i < 6; i++) 	
		for (j = 0; j < i; j++) 
			pthisSV->fPPlus12x12[i][j] = pthisSV->fPPlus12x12[j][i];
    8910:	1c0b      	adds	r3, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1384

	// calculate inverse of P+ (6x6 scratch sub-matrix) = inv(C * P- * C^T + Qv) = inv(C * Qw * C^T + Qv)
	for (i = 0; i < 6; i++)
	{
		pfRows[i] = pthisSV->fPPlus12x12[i];
    8912:	9420      	str	r4, [sp, #128]	; 0x80
    8914:	1c3c      	adds	r4, r7, #0
    8916:	27bc      	movs	r7, #188	; 0xbc
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1379
	pthisSV->fPPlus12x12[5][5] +=  pthisSV->fQvMM;

	// copy above diagonal elements of P+ (6x6 scratch sub-matrix) to below diagonal
	for (i = 1; i < 6; i++) 	
		for (j = 0; j < i; j++) 
			pthisSV->fPPlus12x12[i][j] = pthisSV->fPPlus12x12[j][i];
    8918:	445b      	add	r3, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1384

	// calculate inverse of P+ (6x6 scratch sub-matrix) = inv(C * P- * C^T + Qv) = inv(C * Qw * C^T + Qv)
	for (i = 0; i < 6; i++)
	{
		pfRows[i] = pthisSV->fPPlus12x12[i];
    891a:	007f      	lsls	r7, r7, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1379
	pthisSV->fPPlus12x12[5][5] +=  pthisSV->fQvMM;

	// copy above diagonal elements of P+ (6x6 scratch sub-matrix) to below diagonal
	for (i = 1; i < 6; i++) 	
		for (j = 0; j < i; j++) 
			pthisSV->fPPlus12x12[i][j] = pthisSV->fPPlus12x12[j][i];
    891c:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1384

	// calculate inverse of P+ (6x6 scratch sub-matrix) = inv(C * P- * C^T + Qv) = inv(C * Qw * C^T + Qv)
	for (i = 0; i < 6; i++)
	{
		pfRows[i] = pthisSV->fPPlus12x12[i];
    891e:	20d4      	movs	r0, #212	; 0xd4
    8920:	1c3b      	adds	r3, r7, #0
    8922:	445b      	add	r3, fp
    8924:	0040      	lsls	r0, r0, #1
    8926:	9322      	str	r3, [sp, #136]	; 0x88
    8928:	21ec      	movs	r1, #236	; 0xec
    892a:	1c03      	adds	r3, r0, #0
    892c:	445b      	add	r3, fp
    892e:	0049      	lsls	r1, r1, #1
    8930:	9323      	str	r3, [sp, #140]	; 0x8c
    8932:	2282      	movs	r2, #130	; 0x82
    8934:	1c0b      	adds	r3, r1, #0
    8936:	445b      	add	r3, fp
    8938:	0092      	lsls	r2, r2, #2
    893a:	9324      	str	r3, [sp, #144]	; 0x90
    893c:	1c13      	adds	r3, r2, #0
    893e:	445b      	add	r3, fp
    8940:	445c      	add	r4, fp
    8942:	9325      	str	r3, [sp, #148]	; 0x94
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1386
	}
	fmatrixAeqInvA(pfRows, iColInd, iRowInd, iPivot, 3);
    8944:	2303      	movs	r3, #3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1384
			pthisSV->fPPlus12x12[i][j] = pthisSV->fPPlus12x12[j][i];

	// calculate inverse of P+ (6x6 scratch sub-matrix) = inv(C * P- * C^T + Qv) = inv(C * Qw * C^T + Qv)
	for (i = 0; i < 6; i++)
	{
		pfRows[i] = pthisSV->fPPlus12x12[i];
    8946:	9412      	str	r4, [sp, #72]	; 0x48
    8948:	9421      	str	r4, [sp, #132]	; 0x84
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1386
	}
	fmatrixAeqInvA(pfRows, iColInd, iRowInd, iPivot, 3);
    894a:	9300      	str	r3, [sp, #0]
    894c:	a820      	add	r0, sp, #128	; 0x80
    894e:	240c      	movs	r4, #12
    8950:	a917      	add	r1, sp, #92	; 0x5c
    8952:	aa19      	add	r2, sp, #100	; 0x64
    8954:	ab1b      	add	r3, sp, #108	; 0x6c
    8956:	f005 fcbf 	bl	e2d8 <fmatrixAeqInvA>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1392

	// set K = P- * C^T * inv(C * P- * C^T + Qv) = Qw * C^T * inv(C * Qw * C^T + Qv)
	// = ftmpA12x6 * P+ (6x6 sub-matrix)
	// ftmpA12x6 = Qw * C^T is sparse but P+ (6x6 sub-matrix) is not
	// K is not symmetric because C is not symmetric
	for (i = 0; i < 12; i++) // loop over rows of K12x6
    895a:	2700      	movs	r7, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1386
	// calculate inverse of P+ (6x6 scratch sub-matrix) = inv(C * P- * C^T + Qv) = inv(C * Qw * C^T + Qv)
	for (i = 0; i < 6; i++)
	{
		pfRows[i] = pthisSV->fPPlus12x12[i];
	}
	fmatrixAeqInvA(pfRows, iColInd, iRowInd, iPivot, 3);
    895c:	9408      	str	r4, [sp, #32]
    895e:	2000      	movs	r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8960:	465c      	mov	r4, fp
    8962:	9d11      	ldr	r5, [sp, #68]	; 0x44
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1392

	// set K = P- * C^T * inv(C * P- * C^T + Qv) = Qw * C^T * inv(C * Qw * C^T + Qv)
	// = ftmpA12x6 * P+ (6x6 sub-matrix)
	// ftmpA12x6 = Qw * C^T is sparse but P+ (6x6 sub-matrix) is not
	// K is not symmetric because C is not symmetric
	for (i = 0; i < 12; i++) // loop over rows of K12x6
    8964:	9707      	str	r7, [sp, #28]
    8966:	4682      	mov	sl, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8968:	940a      	str	r4, [sp, #40]	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1395
	// ftmpA12x6 = Qw * C^T is sparse but P+ (6x6 sub-matrix) is not
	// K is not symmetric because C is not symmetric
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];
    896a:	9f07      	ldr	r7, [sp, #28]
    896c:	20d6      	movs	r0, #214	; 0xd6
    896e:	b27b      	sxtb	r3, r7
    8970:	005a      	lsls	r2, r3, #1
    8972:	18d3      	adds	r3, r2, r3
    8974:	00db      	lsls	r3, r3, #3
    8976:	0080      	lsls	r0, r0, #2
    8978:	aa26      	add	r2, sp, #152	; 0x98
    897a:	181c      	adds	r4, r3, r0
    897c:	990a      	ldr	r1, [sp, #40]	; 0x28
    897e:	18d3      	adds	r3, r2, r3
    8980:	681f      	ldr	r7, [r3, #0]
    8982:	68d8      	ldr	r0, [r3, #12]
    8984:	190c      	adds	r4, r1, r4
    8986:	6919      	ldr	r1, [r3, #16]
    8988:	9703      	str	r7, [sp, #12]
    898a:	685e      	ldr	r6, [r3, #4]
    898c:	689f      	ldr	r7, [r3, #8]
    898e:	695b      	ldr	r3, [r3, #20]
    8990:	9005      	str	r0, [sp, #20]
    8992:	9104      	str	r1, [sp, #16]
    8994:	9803      	ldr	r0, [sp, #12]
    8996:	2100      	movs	r1, #0
    8998:	4698      	mov	r8, r3
    899a:	f7f7 fe7d 	bl	698 <__aeabi_fcmpeq>
    899e:	2800      	cmp	r0, #0
    89a0:	d101      	bne.n	89a6 <fRun_9DOF_GBY_KALMAN+0x8d2>
    89a2:	f000 fcd1 	bl	9348 <fRun_9DOF_GBY_KALMAN+0x1274>
    89a6:	4640      	mov	r0, r8
    89a8:	2100      	movs	r1, #0
    89aa:	f7f7 fe75 	bl	698 <__aeabi_fcmpeq>
    89ae:	2800      	cmp	r0, #0
    89b0:	d101      	bne.n	89b6 <fRun_9DOF_GBY_KALMAN+0x8e2>
    89b2:	f000 ff25 	bl	9800 <fRun_9DOF_GBY_KALMAN+0x172c>
    89b6:	9804      	ldr	r0, [sp, #16]
    89b8:	2100      	movs	r1, #0
    89ba:	f7f7 fe6d 	bl	698 <__aeabi_fcmpeq>
    89be:	2800      	cmp	r0, #0
    89c0:	d101      	bne.n	89c6 <fRun_9DOF_GBY_KALMAN+0x8f2>
    89c2:	f001 f825 	bl	9a10 <fRun_9DOF_GBY_KALMAN+0x193c>
    89c6:	9805      	ldr	r0, [sp, #20]
    89c8:	2100      	movs	r1, #0
    89ca:	f7f7 fe65 	bl	698 <__aeabi_fcmpeq>
    89ce:	2800      	cmp	r0, #0
    89d0:	d101      	bne.n	89d6 <fRun_9DOF_GBY_KALMAN+0x902>
    89d2:	f001 fd1d 	bl	a410 <fRun_9DOF_GBY_KALMAN+0x233c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    89d6:	4652      	mov	r2, sl
    89d8:	6022      	str	r2, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    89da:	1c30      	adds	r0, r6, #0
    89dc:	2100      	movs	r1, #0
    89de:	f7f7 fe5b 	bl	698 <__aeabi_fcmpeq>
    89e2:	2800      	cmp	r0, #0
    89e4:	d101      	bne.n	89ea <fRun_9DOF_GBY_KALMAN+0x916>
    89e6:	f002 fc94 	bl	b312 <fRun_9DOF_GBY_KALMAN+0x323e>
    89ea:	2300      	movs	r3, #0
    89ec:	4698      	mov	r8, r3
    89ee:	1c38      	adds	r0, r7, #0
    89f0:	2100      	movs	r1, #0
    89f2:	f7f7 fe51 	bl	698 <__aeabi_fcmpeq>
    89f6:	2800      	cmp	r0, #0
    89f8:	d107      	bne.n	8a0a <fRun_9DOF_GBY_KALMAN+0x936>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    89fa:	6e29      	ldr	r1, [r5, #96]	; 0x60
    89fc:	1c38      	adds	r0, r7, #0
    89fe:	f7f8 f9c9 	bl	d94 <__aeabi_fmul>
    8a02:	4641      	mov	r1, r8
    8a04:	f7f7 fe76 	bl	6f4 <__aeabi_fadd>
    8a08:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8a0a:	4650      	mov	r0, sl
    8a0c:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8a0e:	2100      	movs	r1, #0
    8a10:	1c30      	adds	r0, r6, #0
    8a12:	f7f7 fe41 	bl	698 <__aeabi_fcmpeq>
    8a16:	2800      	cmp	r0, #0
    8a18:	d001      	beq.n	8a1e <fRun_9DOF_GBY_KALMAN+0x94a>
    8a1a:	f002 fff3 	bl	ba04 <fRun_9DOF_GBY_KALMAN+0x3930>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8a1e:	6b69      	ldr	r1, [r5, #52]	; 0x34
    8a20:	1c30      	adds	r0, r6, #0
    8a22:	f7f8 f9b7 	bl	d94 <__aeabi_fmul>
    8a26:	2100      	movs	r1, #0
    8a28:	f7f7 fe64 	bl	6f4 <__aeabi_fadd>
    8a2c:	4680      	mov	r8, r0
    8a2e:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8a30:	1c38      	adds	r0, r7, #0
    8a32:	2100      	movs	r1, #0
    8a34:	f7f7 fe30 	bl	698 <__aeabi_fcmpeq>
    8a38:	2800      	cmp	r0, #0
    8a3a:	d107      	bne.n	8a4c <fRun_9DOF_GBY_KALMAN+0x978>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8a3c:	6e69      	ldr	r1, [r5, #100]	; 0x64
    8a3e:	1c38      	adds	r0, r7, #0
    8a40:	f7f8 f9a8 	bl	d94 <__aeabi_fmul>
    8a44:	4641      	mov	r1, r8
    8a46:	f7f7 fe55 	bl	6f4 <__aeabi_fadd>
    8a4a:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8a4c:	4652      	mov	r2, sl
    8a4e:	60a2      	str	r2, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8a50:	1c30      	adds	r0, r6, #0
    8a52:	2100      	movs	r1, #0
    8a54:	f7f7 fe20 	bl	698 <__aeabi_fcmpeq>
    8a58:	2800      	cmp	r0, #0
    8a5a:	d001      	beq.n	8a60 <fRun_9DOF_GBY_KALMAN+0x98c>
    8a5c:	f002 ffdd 	bl	ba1a <fRun_9DOF_GBY_KALMAN+0x3946>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8a60:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    8a62:	1c30      	adds	r0, r6, #0
    8a64:	f7f8 f996 	bl	d94 <__aeabi_fmul>
    8a68:	2100      	movs	r1, #0
    8a6a:	f7f7 fe43 	bl	6f4 <__aeabi_fadd>
    8a6e:	4680      	mov	r8, r0
    8a70:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8a72:	1c38      	adds	r0, r7, #0
    8a74:	2100      	movs	r1, #0
    8a76:	f7f7 fe0f 	bl	698 <__aeabi_fcmpeq>
    8a7a:	2800      	cmp	r0, #0
    8a7c:	d107      	bne.n	8a8e <fRun_9DOF_GBY_KALMAN+0x9ba>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8a7e:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    8a80:	1c38      	adds	r0, r7, #0
    8a82:	f7f8 f987 	bl	d94 <__aeabi_fmul>
    8a86:	4641      	mov	r1, r8
    8a88:	f7f7 fe34 	bl	6f4 <__aeabi_fadd>
    8a8c:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8a8e:	4650      	mov	r0, sl
    8a90:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8a92:	2100      	movs	r1, #0
    8a94:	1c30      	adds	r0, r6, #0
    8a96:	f7f7 fdff 	bl	698 <__aeabi_fcmpeq>
    8a9a:	2800      	cmp	r0, #0
    8a9c:	d001      	beq.n	8aa2 <fRun_9DOF_GBY_KALMAN+0x9ce>
    8a9e:	f002 ffb8 	bl	ba12 <fRun_9DOF_GBY_KALMAN+0x393e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8aa2:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    8aa4:	1c30      	adds	r0, r6, #0
    8aa6:	f7f8 f975 	bl	d94 <__aeabi_fmul>
    8aaa:	2100      	movs	r1, #0
    8aac:	f7f7 fe22 	bl	6f4 <__aeabi_fadd>
    8ab0:	4680      	mov	r8, r0
    8ab2:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8ab4:	1c38      	adds	r0, r7, #0
    8ab6:	2100      	movs	r1, #0
    8ab8:	f7f7 fdee 	bl	698 <__aeabi_fcmpeq>
    8abc:	2800      	cmp	r0, #0
    8abe:	d107      	bne.n	8ad0 <fRun_9DOF_GBY_KALMAN+0x9fc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8ac0:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
    8ac2:	1c38      	adds	r0, r7, #0
    8ac4:	f7f8 f966 	bl	d94 <__aeabi_fmul>
    8ac8:	4641      	mov	r1, r8
    8aca:	f7f7 fe13 	bl	6f4 <__aeabi_fadd>
    8ace:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8ad0:	4652      	mov	r2, sl
    8ad2:	6122      	str	r2, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8ad4:	1c30      	adds	r0, r6, #0
    8ad6:	2100      	movs	r1, #0
    8ad8:	f7f7 fdde 	bl	698 <__aeabi_fcmpeq>
    8adc:	2800      	cmp	r0, #0
    8ade:	d001      	beq.n	8ae4 <fRun_9DOF_GBY_KALMAN+0xa10>
    8ae0:	f002 ff8c 	bl	b9fc <fRun_9DOF_GBY_KALMAN+0x3928>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8ae4:	6c29      	ldr	r1, [r5, #64]	; 0x40
    8ae6:	1c30      	adds	r0, r6, #0
    8ae8:	f7f8 f954 	bl	d94 <__aeabi_fmul>
    8aec:	2100      	movs	r1, #0
    8aee:	f7f7 fe01 	bl	6f4 <__aeabi_fadd>
    8af2:	4680      	mov	r8, r0
    8af4:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8af6:	1c38      	adds	r0, r7, #0
    8af8:	2100      	movs	r1, #0
    8afa:	f7f7 fdcd 	bl	698 <__aeabi_fcmpeq>
    8afe:	2800      	cmp	r0, #0
    8b00:	d107      	bne.n	8b12 <fRun_9DOF_GBY_KALMAN+0xa3e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8b02:	6f29      	ldr	r1, [r5, #112]	; 0x70
    8b04:	1c38      	adds	r0, r7, #0
    8b06:	f7f8 f945 	bl	d94 <__aeabi_fmul>
    8b0a:	4641      	mov	r1, r8
    8b0c:	f7f7 fdf2 	bl	6f4 <__aeabi_fadd>
    8b10:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    8b12:	4650      	mov	r0, sl
    8b14:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8b16:	2100      	movs	r1, #0
    8b18:	1c30      	adds	r0, r6, #0
    8b1a:	f7f7 fdbd 	bl	698 <__aeabi_fcmpeq>
    8b1e:	2800      	cmp	r0, #0
    8b20:	d001      	beq.n	8b26 <fRun_9DOF_GBY_KALMAN+0xa52>
    8b22:	f002 ff73 	bl	ba0c <fRun_9DOF_GBY_KALMAN+0x3938>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8b26:	6c69      	ldr	r1, [r5, #68]	; 0x44
    8b28:	1c30      	adds	r0, r6, #0
    8b2a:	f7f8 f933 	bl	d94 <__aeabi_fmul>
    8b2e:	2100      	movs	r1, #0
    8b30:	f7f7 fde0 	bl	6f4 <__aeabi_fadd>
    8b34:	1c06      	adds	r6, r0, #0
    8b36:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    8b38:	1c38      	adds	r0, r7, #0
    8b3a:	2100      	movs	r1, #0
    8b3c:	f7f7 fdac 	bl	698 <__aeabi_fcmpeq>
    8b40:	2800      	cmp	r0, #0
    8b42:	d107      	bne.n	8b54 <fRun_9DOF_GBY_KALMAN+0xa80>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    8b44:	6f69      	ldr	r1, [r5, #116]	; 0x74
    8b46:	1c38      	adds	r0, r7, #0
    8b48:	f7f8 f924 	bl	d94 <__aeabi_fmul>
    8b4c:	1c31      	adds	r1, r6, #0
    8b4e:	f7f7 fdd1 	bl	6f4 <__aeabi_fadd>
    8b52:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1392

	// set K = P- * C^T * inv(C * P- * C^T + Qv) = Qw * C^T * inv(C * Qw * C^T + Qv)
	// = ftmpA12x6 * P+ (6x6 sub-matrix)
	// ftmpA12x6 = Qw * C^T is sparse but P+ (6x6 sub-matrix) is not
	// K is not symmetric because C is not symmetric
	for (i = 0; i < 12; i++) // loop over rows of K12x6
    8b54:	9b07      	ldr	r3, [sp, #28]
    8b56:	3301      	adds	r3, #1
    8b58:	b2db      	uxtb	r3, r3
    8b5a:	9307      	str	r3, [sp, #28]
    8b5c:	9b08      	ldr	r3, [sp, #32]
    8b5e:	3b01      	subs	r3, #1
    8b60:	b2db      	uxtb	r3, r3
    8b62:	9308      	str	r3, [sp, #32]
    8b64:	2b00      	cmp	r3, #0
    8b66:	d000      	beq.n	8b6a <fRun_9DOF_GBY_KALMAN+0xa96>
    8b68:	e6ff      	b.n	896a <fRun_9DOF_GBY_KALMAN+0x896>
    8b6a:	990a      	ldr	r1, [sp, #40]	; 0x28
    8b6c:	23d4      	movs	r3, #212	; 0xd4
    8b6e:	58cf      	ldr	r7, [r1, r3]
    8b70:	23d8      	movs	r3, #216	; 0xd8
    8b72:	58ce      	ldr	r6, [r1, r3]
    8b74:	23dc      	movs	r3, #220	; 0xdc
    8b76:	58cd      	ldr	r5, [r1, r3]
    8b78:	23e0      	movs	r3, #224	; 0xe0
    8b7a:	58cc      	ldr	r4, [r1, r3]
    8b7c:	23e4      	movs	r3, #228	; 0xe4
    8b7e:	58cb      	ldr	r3, [r1, r3]
    8b80:	468b      	mov	fp, r1
    8b82:	4699      	mov	r9, r3
    8b84:	23e8      	movs	r3, #232	; 0xe8
    8b86:	58cb      	ldr	r3, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    8b88:	1c38      	adds	r0, r7, #0
    8b8a:	469a      	mov	sl, r3
    8b8c:	23d6      	movs	r3, #214	; 0xd6
    8b8e:	009b      	lsls	r3, r3, #2
    8b90:	58c9      	ldr	r1, [r1, r3]
    8b92:	f7f8 f8ff 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    8b96:	23d7      	movs	r3, #215	; 0xd7
    8b98:	009b      	lsls	r3, r3, #2
    8b9a:	465a      	mov	r2, fp
    8b9c:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    8b9e:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    8ba0:	1c30      	adds	r0, r6, #0
    8ba2:	f7f8 f8f7 	bl	d94 <__aeabi_fmul>
    8ba6:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    8ba8:	4640      	mov	r0, r8
    8baa:	f7f7 fda3 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1438
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
    8bae:	23d8      	movs	r3, #216	; 0xd8
    8bb0:	009b      	lsls	r3, r3, #2
    8bb2:	465a      	mov	r2, fp
    8bb4:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    8bb6:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1438
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
    8bb8:	1c28      	adds	r0, r5, #0
    8bba:	f7f8 f8eb 	bl	d94 <__aeabi_fmul>
    8bbe:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    8bc0:	4640      	mov	r0, r8
    8bc2:	f7f7 fd97 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    8bc6:	465b      	mov	r3, fp
    8bc8:	6718      	str	r0, [r3, #112]	; 0x70
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    8bca:	23e8      	movs	r3, #232	; 0xe8
    8bcc:	009b      	lsls	r3, r3, #2
    8bce:	465a      	mov	r2, fp
    8bd0:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    8bd2:	9005      	str	r0, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    8bd4:	1c38      	adds	r0, r7, #0
    8bd6:	f7f8 f8dd 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    8bda:	23e9      	movs	r3, #233	; 0xe9
    8bdc:	009b      	lsls	r3, r3, #2
    8bde:	465a      	mov	r2, fp
    8be0:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    8be2:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    8be4:	1c30      	adds	r0, r6, #0
    8be6:	f7f8 f8d5 	bl	d94 <__aeabi_fmul>
    8bea:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    8bec:	4640      	mov	r0, r8
    8bee:	f7f7 fd81 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1441
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
    8bf2:	23ea      	movs	r3, #234	; 0xea
    8bf4:	009b      	lsls	r3, r3, #2
    8bf6:	465a      	mov	r2, fp
    8bf8:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    8bfa:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1441
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
    8bfc:	1c28      	adds	r0, r5, #0
    8bfe:	f7f8 f8c9 	bl	d94 <__aeabi_fmul>
    8c02:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    8c04:	4640      	mov	r0, r8
    8c06:	f7f7 fd75 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    8c0a:	465b      	mov	r3, fp
    8c0c:	67d8      	str	r0, [r3, #124]	; 0x7c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    8c0e:	23fa      	movs	r3, #250	; 0xfa
    8c10:	009b      	lsls	r3, r3, #2
    8c12:	465a      	mov	r2, fp
    8c14:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    8c16:	9007      	str	r0, [sp, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    8c18:	1c38      	adds	r0, r7, #0
    8c1a:	f7f8 f8bb 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    8c1e:	23fb      	movs	r3, #251	; 0xfb
    8c20:	009b      	lsls	r3, r3, #2
    8c22:	465a      	mov	r2, fp
    8c24:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    8c26:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    8c28:	1c30      	adds	r0, r6, #0
    8c2a:	f7f8 f8b3 	bl	d94 <__aeabi_fmul>
    8c2e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    8c30:	4640      	mov	r0, r8
    8c32:	f7f7 fd5f 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1444
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
    8c36:	23fc      	movs	r3, #252	; 0xfc
    8c38:	009b      	lsls	r3, r3, #2
    8c3a:	465a      	mov	r2, fp
    8c3c:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    8c3e:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1444
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
    8c40:	1c28      	adds	r0, r5, #0
    8c42:	f7f8 f8a7 	bl	d94 <__aeabi_fmul>
    8c46:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    8c48:	4640      	mov	r0, r8
    8c4a:	f7f7 fd53 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    8c4e:	465b      	mov	r3, fp
    8c50:	21a0      	movs	r1, #160	; 0xa0
    8c52:	5058      	str	r0, [r3, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    8c54:	2386      	movs	r3, #134	; 0x86
    8c56:	00db      	lsls	r3, r3, #3
    8c58:	465a      	mov	r2, fp
    8c5a:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    8c5c:	9008      	str	r0, [sp, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    8c5e:	1c38      	adds	r0, r7, #0
    8c60:	f7f8 f898 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    8c64:	4bfd      	ldr	r3, [pc, #1012]	; (905c <fRun_9DOF_GBY_KALMAN+0xf88>)
    8c66:	465a      	mov	r2, fp
    8c68:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    8c6a:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    8c6c:	1c30      	adds	r0, r6, #0
    8c6e:	f7f8 f891 	bl	d94 <__aeabi_fmul>
    8c72:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    8c74:	4640      	mov	r0, r8
    8c76:	f7f7 fd3d 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    8c7a:	2387      	movs	r3, #135	; 0x87
    8c7c:	00db      	lsls	r3, r3, #3
    8c7e:	465a      	mov	r2, fp
    8c80:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    8c82:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    8c84:	1c28      	adds	r0, r5, #0
    8c86:	f7f8 f885 	bl	d94 <__aeabi_fmul>
    8c8a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    8c8c:	4640      	mov	r0, r8
    8c8e:	f7f7 fd31 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    8c92:	4bf3      	ldr	r3, [pc, #972]	; (9060 <fRun_9DOF_GBY_KALMAN+0xf8c>)
    8c94:	465a      	mov	r2, fp
    8c96:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    8c98:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    8c9a:	1c20      	adds	r0, r4, #0
    8c9c:	f7f8 f87a 	bl	d94 <__aeabi_fmul>
    8ca0:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    8ca2:	4640      	mov	r0, r8
    8ca4:	f7f7 fd26 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    8ca8:	2388      	movs	r3, #136	; 0x88
    8caa:	00db      	lsls	r3, r3, #3
    8cac:	465a      	mov	r2, fp
    8cae:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    8cb0:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    8cb2:	4648      	mov	r0, r9
    8cb4:	f7f8 f86e 	bl	d94 <__aeabi_fmul>
    8cb8:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    8cba:	4640      	mov	r0, r8
    8cbc:	f7f7 fd1a 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1450
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
    8cc0:	4be8      	ldr	r3, [pc, #928]	; (9064 <fRun_9DOF_GBY_KALMAN+0xf90>)
    8cc2:	465a      	mov	r2, fp
    8cc4:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    8cc6:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1450
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
    8cc8:	4650      	mov	r0, sl
    8cca:	f7f8 f863 	bl	d94 <__aeabi_fmul>
    8cce:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    8cd0:	4640      	mov	r0, r8
    8cd2:	f7f7 fd0f 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    8cd6:	2394      	movs	r3, #148	; 0x94
    8cd8:	4659      	mov	r1, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    8cda:	9003      	str	r0, [sp, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    8cdc:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    8cde:	23dc      	movs	r3, #220	; 0xdc
    8ce0:	009b      	lsls	r3, r3, #2
    8ce2:	58c9      	ldr	r1, [r1, r3]
    8ce4:	1c38      	adds	r0, r7, #0
    8ce6:	f7f8 f855 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    8cea:	23dd      	movs	r3, #221	; 0xdd
    8cec:	009b      	lsls	r3, r3, #2
    8cee:	465a      	mov	r2, fp
    8cf0:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    8cf2:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    8cf4:	1c30      	adds	r0, r6, #0
    8cf6:	f7f8 f84d 	bl	d94 <__aeabi_fmul>
    8cfa:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    8cfc:	4640      	mov	r0, r8
    8cfe:	f7f7 fcf9 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1438
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
    8d02:	23de      	movs	r3, #222	; 0xde
    8d04:	009b      	lsls	r3, r3, #2
    8d06:	465a      	mov	r2, fp
    8d08:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    8d0a:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1438
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
    8d0c:	1c28      	adds	r0, r5, #0
    8d0e:	f7f8 f841 	bl	d94 <__aeabi_fmul>
    8d12:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    8d14:	4640      	mov	r0, r8
    8d16:	f7f7 fced 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    8d1a:	465b      	mov	r3, fp
    8d1c:	6758      	str	r0, [r3, #116]	; 0x74
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    8d1e:	23ee      	movs	r3, #238	; 0xee
    8d20:	009b      	lsls	r3, r3, #2
    8d22:	465a      	mov	r2, fp
    8d24:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    8d26:	900a      	str	r0, [sp, #40]	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    8d28:	1c38      	adds	r0, r7, #0
    8d2a:	f7f8 f833 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    8d2e:	23ef      	movs	r3, #239	; 0xef
    8d30:	009b      	lsls	r3, r3, #2
    8d32:	465a      	mov	r2, fp
    8d34:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    8d36:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    8d38:	1c30      	adds	r0, r6, #0
    8d3a:	f7f8 f82b 	bl	d94 <__aeabi_fmul>
    8d3e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    8d40:	4640      	mov	r0, r8
    8d42:	f7f7 fcd7 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1441
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
    8d46:	23f0      	movs	r3, #240	; 0xf0
    8d48:	009b      	lsls	r3, r3, #2
    8d4a:	465a      	mov	r2, fp
    8d4c:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    8d4e:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1441
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
    8d50:	1c28      	adds	r0, r5, #0
    8d52:	f7f8 f81f 	bl	d94 <__aeabi_fmul>
    8d56:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    8d58:	4640      	mov	r0, r8
    8d5a:	f7f7 fccb 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    8d5e:	465b      	mov	r3, fp
    8d60:	2180      	movs	r1, #128	; 0x80
    8d62:	5058      	str	r0, [r3, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    8d64:	2380      	movs	r3, #128	; 0x80
    8d66:	00db      	lsls	r3, r3, #3
    8d68:	465a      	mov	r2, fp
    8d6a:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    8d6c:	900d      	str	r0, [sp, #52]	; 0x34
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    8d6e:	1c38      	adds	r0, r7, #0
    8d70:	f7f8 f810 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    8d74:	4bbc      	ldr	r3, [pc, #752]	; (9068 <fRun_9DOF_GBY_KALMAN+0xf94>)
    8d76:	465a      	mov	r2, fp
    8d78:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    8d7a:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    8d7c:	1c30      	adds	r0, r6, #0
    8d7e:	f7f8 f809 	bl	d94 <__aeabi_fmul>
    8d82:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    8d84:	4640      	mov	r0, r8
    8d86:	f7f7 fcb5 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1444
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
    8d8a:	2381      	movs	r3, #129	; 0x81
    8d8c:	00db      	lsls	r3, r3, #3
    8d8e:	465a      	mov	r2, fp
    8d90:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    8d92:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1444
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
    8d94:	1c28      	adds	r0, r5, #0
    8d96:	f7f7 fffd 	bl	d94 <__aeabi_fmul>
    8d9a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    8d9c:	4640      	mov	r0, r8
    8d9e:	f7f7 fca9 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    8da2:	465b      	mov	r3, fp
    8da4:	21a4      	movs	r1, #164	; 0xa4
    8da6:	5058      	str	r0, [r3, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    8da8:	2389      	movs	r3, #137	; 0x89
    8daa:	00db      	lsls	r3, r3, #3
    8dac:	465a      	mov	r2, fp
    8dae:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    8db0:	9013      	str	r0, [sp, #76]	; 0x4c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    8db2:	1c38      	adds	r0, r7, #0
    8db4:	f7f7 ffee 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    8db8:	4bac      	ldr	r3, [pc, #688]	; (906c <fRun_9DOF_GBY_KALMAN+0xf98>)
    8dba:	465a      	mov	r2, fp
    8dbc:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    8dbe:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    8dc0:	1c30      	adds	r0, r6, #0
    8dc2:	f7f7 ffe7 	bl	d94 <__aeabi_fmul>
    8dc6:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    8dc8:	4640      	mov	r0, r8
    8dca:	f7f7 fc93 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    8dce:	238a      	movs	r3, #138	; 0x8a
    8dd0:	00db      	lsls	r3, r3, #3
    8dd2:	465a      	mov	r2, fp
    8dd4:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    8dd6:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    8dd8:	1c28      	adds	r0, r5, #0
    8dda:	f7f7 ffdb 	bl	d94 <__aeabi_fmul>
    8dde:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    8de0:	4640      	mov	r0, r8
    8de2:	f7f7 fc87 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    8de6:	4ba2      	ldr	r3, [pc, #648]	; (9070 <fRun_9DOF_GBY_KALMAN+0xf9c>)
    8de8:	465a      	mov	r2, fp
    8dea:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    8dec:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    8dee:	1c20      	adds	r0, r4, #0
    8df0:	f7f7 ffd0 	bl	d94 <__aeabi_fmul>
    8df4:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    8df6:	4640      	mov	r0, r8
    8df8:	f7f7 fc7c 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    8dfc:	238b      	movs	r3, #139	; 0x8b
    8dfe:	00db      	lsls	r3, r3, #3
    8e00:	465a      	mov	r2, fp
    8e02:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    8e04:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    8e06:	4648      	mov	r0, r9
    8e08:	f7f7 ffc4 	bl	d94 <__aeabi_fmul>
    8e0c:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    8e0e:	4640      	mov	r0, r8
    8e10:	f7f7 fc70 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1450
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
    8e14:	4b97      	ldr	r3, [pc, #604]	; (9074 <fRun_9DOF_GBY_KALMAN+0xfa0>)
    8e16:	465a      	mov	r2, fp
    8e18:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    8e1a:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1450
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
    8e1c:	4650      	mov	r0, sl
    8e1e:	f7f7 ffb9 	bl	d94 <__aeabi_fmul>
    8e22:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    8e24:	4640      	mov	r0, r8
    8e26:	f7f7 fc65 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    8e2a:	2398      	movs	r3, #152	; 0x98
    8e2c:	4659      	mov	r1, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    8e2e:	9004      	str	r0, [sp, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    8e30:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    8e32:	23e2      	movs	r3, #226	; 0xe2
    8e34:	009b      	lsls	r3, r3, #2
    8e36:	58c9      	ldr	r1, [r1, r3]
    8e38:	1c38      	adds	r0, r7, #0
    8e3a:	f7f7 ffab 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    8e3e:	23e3      	movs	r3, #227	; 0xe3
    8e40:	009b      	lsls	r3, r3, #2
    8e42:	465a      	mov	r2, fp
    8e44:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    8e46:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    8e48:	1c30      	adds	r0, r6, #0
    8e4a:	f7f7 ffa3 	bl	d94 <__aeabi_fmul>
    8e4e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    8e50:	4640      	mov	r0, r8
    8e52:	f7f7 fc4f 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1438
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
    8e56:	23e4      	movs	r3, #228	; 0xe4
    8e58:	009b      	lsls	r3, r3, #2
    8e5a:	465a      	mov	r2, fp
    8e5c:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    8e5e:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1438
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
    8e60:	1c28      	adds	r0, r5, #0
    8e62:	f7f7 ff97 	bl	d94 <__aeabi_fmul>
    8e66:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    8e68:	4640      	mov	r0, r8
    8e6a:	f7f7 fc43 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1436

	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
    8e6e:	465b      	mov	r3, fp
    8e70:	6798      	str	r0, [r3, #120]	; 0x78
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    8e72:	23f4      	movs	r3, #244	; 0xf4
    8e74:	009b      	lsls	r3, r3, #2
    8e76:	465a      	mov	r2, fp
    8e78:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1437
	// first calculate all four error vector components using accelerometer error component only
	// for fThErrPl, fbErrPl, faErrSePl but also magnetometer for fdErrSePl
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
    8e7a:	9014      	str	r0, [sp, #80]	; 0x50
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    8e7c:	1c38      	adds	r0, r7, #0
    8e7e:	f7f7 ff89 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    8e82:	23f5      	movs	r3, #245	; 0xf5
    8e84:	009b      	lsls	r3, r3, #2
    8e86:	465a      	mov	r2, fp
    8e88:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    8e8a:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    8e8c:	1c30      	adds	r0, r6, #0
    8e8e:	f7f7 ff81 	bl	d94 <__aeabi_fmul>
    8e92:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    8e94:	4640      	mov	r0, r8
    8e96:	f7f7 fc2d 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1441
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
    8e9a:	23f6      	movs	r3, #246	; 0xf6
    8e9c:	009b      	lsls	r3, r3, #2
    8e9e:	465a      	mov	r2, fp
    8ea0:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    8ea2:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1441
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
    8ea4:	1c28      	adds	r0, r5, #0
    8ea6:	f7f7 ff75 	bl	d94 <__aeabi_fmul>
    8eaa:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    8eac:	4640      	mov	r0, r8
    8eae:	f7f7 fc21 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1439
	for (i = X; i <= Z; i++)
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
    8eb2:	465b      	mov	r3, fp
    8eb4:	2184      	movs	r1, #132	; 0x84
    8eb6:	5058      	str	r0, [r3, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    8eb8:	2383      	movs	r3, #131	; 0x83
    8eba:	00db      	lsls	r3, r3, #3
    8ebc:	465a      	mov	r2, fp
    8ebe:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1440
	{
		pthisSV->fThErrPl[i] = pthisSV->fK12x6[i][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
    8ec0:	9015      	str	r0, [sp, #84]	; 0x54
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    8ec2:	1c38      	adds	r0, r7, #0
    8ec4:	f7f7 ff66 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    8ec8:	4b6b      	ldr	r3, [pc, #428]	; (9078 <fRun_9DOF_GBY_KALMAN+0xfa4>)
    8eca:	465a      	mov	r2, fp
    8ecc:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    8ece:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    8ed0:	1c30      	adds	r0, r6, #0
    8ed2:	f7f7 ff5f 	bl	d94 <__aeabi_fmul>
    8ed6:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    8ed8:	4640      	mov	r0, r8
    8eda:	f7f7 fc0b 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1444
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
    8ede:	2384      	movs	r3, #132	; 0x84
    8ee0:	00db      	lsls	r3, r3, #3
    8ee2:	465a      	mov	r2, fp
    8ee4:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    8ee6:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1444
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
    8ee8:	1c28      	adds	r0, r5, #0
    8eea:	f7f7 ff53 	bl	d94 <__aeabi_fmul>
    8eee:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    8ef0:	4640      	mov	r0, r8
    8ef2:	f7f7 fbff 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1442
				pthisSV->fK12x6[i][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
    8ef6:	465b      	mov	r3, fp
    8ef8:	21a8      	movs	r1, #168	; 0xa8
    8efa:	5058      	str	r0, [r3, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    8efc:	238c      	movs	r3, #140	; 0x8c
    8efe:	00db      	lsls	r3, r3, #3
    8f00:	465a      	mov	r2, fp
    8f02:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1443
				pthisSV->fK12x6[i][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fbErrPl[i] = pthisSV->fK12x6[i + 3][0] * pthisSV->fgErrSeMi[X] + 
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
    8f04:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    8f06:	1c38      	adds	r0, r7, #0
    8f08:	f7f7 ff44 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    8f0c:	4b5b      	ldr	r3, [pc, #364]	; (907c <fRun_9DOF_GBY_KALMAN+0xfa8>)
    8f0e:	465a      	mov	r2, fp
    8f10:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    8f12:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    8f14:	1c30      	adds	r0, r6, #0
    8f16:	f7f7 ff3d 	bl	d94 <__aeabi_fmul>
    8f1a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    8f1c:	1c38      	adds	r0, r7, #0
    8f1e:	f7f7 fbe9 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    8f22:	238d      	movs	r3, #141	; 0x8d
    8f24:	465f      	mov	r7, fp
    8f26:	00db      	lsls	r3, r3, #3
    8f28:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    8f2a:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    8f2c:	1c28      	adds	r0, r5, #0
    8f2e:	f7f7 ff31 	bl	d94 <__aeabi_fmul>
    8f32:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    8f34:	1c30      	adds	r0, r6, #0
    8f36:	f7f7 fbdd 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    8f3a:	4b51      	ldr	r3, [pc, #324]	; (9080 <fRun_9DOF_GBY_KALMAN+0xfac>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1446
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
    8f3c:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    8f3e:	58f9      	ldr	r1, [r7, r3]
    8f40:	1c20      	adds	r0, r4, #0
    8f42:	f7f7 ff27 	bl	d94 <__aeabi_fmul>
    8f46:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    8f48:	1c28      	adds	r0, r5, #0
    8f4a:	f7f7 fbd3 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    8f4e:	238e      	movs	r3, #142	; 0x8e
    8f50:	00db      	lsls	r3, r3, #3
    8f52:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1447
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
    8f54:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    8f56:	4648      	mov	r0, r9
    8f58:	f7f7 ff1c 	bl	d94 <__aeabi_fmul>
    8f5c:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    8f5e:	1c28      	adds	r0, r5, #0
    8f60:	f7f7 fbc8 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1450
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
    8f64:	4b47      	ldr	r3, [pc, #284]	; (9084 <fRun_9DOF_GBY_KALMAN+0xfb0>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1448
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
    8f66:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1450
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
    8f68:	58f9      	ldr	r1, [r7, r3]
    8f6a:	4650      	mov	r0, sl
    8f6c:	f7f7 ff12 	bl	d94 <__aeabi_fmul>
    8f70:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    8f72:	1c28      	adds	r0, r5, #0
    8f74:	f7f7 fbbe 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1445
				pthisSV->fK12x6[i + 3][1] * pthisSV->fgErrSeMi[Y] + 
				pthisSV->fK12x6[i + 3][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->faErrSePl[i] = pthisSV->fK12x6[i + 6][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 6][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
    8f78:	239c      	movs	r3, #156	; 0x9c
    8f7a:	50f8      	str	r0, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1456
	}

	// set the magnetic jamming flag if there is a significant magnetic error power after calibration
	ftmp = pthisSV->fdErrSePl[X] * pthisSV->fdErrSePl[X] + pthisSV->fdErrSePl[Y] * pthisSV->fdErrSePl[Y] +
			pthisSV->fdErrSePl[Z] * pthisSV->fdErrSePl[Z];
	iMagJamming = (pthisMagCal->iValidMagCal) && (ftmp > pthisMagCal->fFourBsq);
    8f7c:	4b42      	ldr	r3, [pc, #264]	; (9088 <fRun_9DOF_GBY_KALMAN+0xfb4>)
    8f7e:	9f78      	ldr	r7, [sp, #480]	; 0x1e0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1449
				pthisSV->fK12x6[i + 6][2] * pthisSV->fgErrSeMi[Z];
		pthisSV->fdErrSePl[i] = pthisSV->fK12x6[i + 9][0] * pthisSV->fgErrSeMi[X] +
				pthisSV->fK12x6[i + 9][1] * pthisSV->fgErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][2] * pthisSV->fgErrSeMi[Z] +
				pthisSV->fK12x6[i + 9][3] * pthisSV->fmErrSeMi[X] +
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
    8f80:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1456
	}

	// set the magnetic jamming flag if there is a significant magnetic error power after calibration
	ftmp = pthisSV->fdErrSePl[X] * pthisSV->fdErrSePl[X] + pthisSV->fdErrSePl[Y] * pthisSV->fdErrSePl[Y] +
			pthisSV->fdErrSePl[Z] * pthisSV->fdErrSePl[Z];
	iMagJamming = (pthisMagCal->iValidMagCal) && (ftmp > pthisMagCal->fFourBsq);
    8f82:	56fb      	ldrsb	r3, [r7, r3]
    8f84:	2b00      	cmp	r3, #0
    8f86:	d101      	bne.n	8f8c <fRun_9DOF_GBY_KALMAN+0xeb8>
    8f88:	f001 fa3e 	bl	a408 <fRun_9DOF_GBY_KALMAN+0x2334>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1454 (discriminator 1)
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
	}

	// set the magnetic jamming flag if there is a significant magnetic error power after calibration
	ftmp = pthisSV->fdErrSePl[X] * pthisSV->fdErrSePl[X] + pthisSV->fdErrSePl[Y] * pthisSV->fdErrSePl[Y] +
    8f8c:	9803      	ldr	r0, [sp, #12]
    8f8e:	1c01      	adds	r1, r0, #0
    8f90:	f7f7 ff00 	bl	d94 <__aeabi_fmul>
    8f94:	1c06      	adds	r6, r0, #0
    8f96:	9804      	ldr	r0, [sp, #16]
    8f98:	1c01      	adds	r1, r0, #0
    8f9a:	f7f7 fefb 	bl	d94 <__aeabi_fmul>
    8f9e:	1c01      	adds	r1, r0, #0
    8fa0:	1c30      	adds	r0, r6, #0
    8fa2:	f7f7 fba7 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1455 (discriminator 1)
			pthisSV->fdErrSePl[Z] * pthisSV->fdErrSePl[Z];
    8fa6:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1454 (discriminator 1)
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
	}

	// set the magnetic jamming flag if there is a significant magnetic error power after calibration
	ftmp = pthisSV->fdErrSePl[X] * pthisSV->fdErrSePl[X] + pthisSV->fdErrSePl[Y] * pthisSV->fdErrSePl[Y] +
    8fa8:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1455 (discriminator 1)
			pthisSV->fdErrSePl[Z] * pthisSV->fdErrSePl[Z];
    8faa:	1c28      	adds	r0, r5, #0
    8fac:	f7f7 fef2 	bl	d94 <__aeabi_fmul>
    8fb0:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1454 (discriminator 1)
				pthisSV->fK12x6[i + 9][4] * pthisSV->fmErrSeMi[Y] +
				pthisSV->fK12x6[i + 9][5] * pthisSV->fmErrSeMi[Z];
	}

	// set the magnetic jamming flag if there is a significant magnetic error power after calibration
	ftmp = pthisSV->fdErrSePl[X] * pthisSV->fdErrSePl[X] + pthisSV->fdErrSePl[Y] * pthisSV->fdErrSePl[Y] +
    8fb2:	1c30      	adds	r0, r6, #0
    8fb4:	f7f7 fb9e 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1456 (discriminator 1)
			pthisSV->fdErrSePl[Z] * pthisSV->fdErrSePl[Z];
	iMagJamming = (pthisMagCal->iValidMagCal) && (ftmp > pthisMagCal->fFourBsq);
    8fb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
    8fba:	f7f7 fb87 	bl	6cc <__aeabi_fcmpgt>
    8fbe:	2701      	movs	r7, #1
    8fc0:	9704      	str	r7, [sp, #16]
    8fc2:	2800      	cmp	r0, #0
    8fc4:	d101      	bne.n	8fca <fRun_9DOF_GBY_KALMAN+0xef6>
    8fc6:	f001 f8f3 	bl	a1b0 <fRun_9DOF_GBY_KALMAN+0x20dc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1480
	// *********************************************************************************
	// apply the a posteriori error corrections to the a posteriori state vector
	// *********************************************************************************

	// get the a posteriori delta quaternion
	fQuaternionFromRotationVectorDeg(&(pthisSV->fDeltaq), pthisSV->fThErrPl, -1.0F);
    8fca:	4659      	mov	r1, fp
    8fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
    8fce:	3170      	adds	r1, #112	; 0x70
    8fd0:	4a2e      	ldr	r2, [pc, #184]	; (908c <fRun_9DOF_GBY_KALMAN+0xfb8>)
    8fd2:	f006 fc6b 	bl	f8ac <fQuaternionFromRotationVectorDeg>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1484

	// compute the a posteriori orientation quaternion fqPl = fqMi * Deltaq(-thetae+)
	// the resulting quaternion may have negative scalar component q0
	qAeqBxC(&(pthisSV->fqPl), &(pthisSV->fqMi), &(pthisSV->fDeltaq));
    8fd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8fd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8fda:	9810      	ldr	r0, [sp, #64]	; 0x40
    8fdc:	f007 f948 	bl	10270 <qAeqBxC>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1488

	// normalize the a posteriori orientation quaternion to stop error propagation 
	// the renormalization function ensures that the scalar component q0 is non-negative
	fqAeqNormqA(&(pthisSV->fqPl));
    8fe0:	9810      	ldr	r0, [sp, #64]	; 0x40
    8fe2:	f007 fa85 	bl	104f0 <fqAeqNormqA>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1491

	// compute the a posteriori rotation matrix from the a posteriori quaternion
	fRotationMatrixFromQuaternion(pthisSV->fRPl, &(pthisSV->fqPl));
    8fe6:	980e      	ldr	r0, [sp, #56]	; 0x38
    8fe8:	9910      	ldr	r1, [sp, #64]	; 0x40
    8fea:	f006 fdc9 	bl	fb80 <fRotationMatrixFromQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1494

	// compute the rotation vector from the a posteriori quaternion
	fRotationVectorDegFromQuaternion(&(pthisSV->fqPl), pthisSV->fRVecPl);
    8fee:	4659      	mov	r1, fp
    8ff0:	9810      	ldr	r0, [sp, #64]	; 0x40
    8ff2:	3148      	adds	r1, #72	; 0x48
    8ff4:	f006 fe54 	bl	fca0 <fRotationVectorDegFromQuaternion>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1501
	// update the a posteriori gyro offset vector b+ and
	// assign the entire linear acceleration error vector to update the linear acceleration
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    8ff8:	465b      	mov	r3, fp
    8ffa:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
    8ffc:	6e58      	ldr	r0, [r3, #100]	; 0x64
    8ffe:	f7f7 fff3 	bl	fe8 <__aeabi_fsub>
    9002:	465c      	mov	r4, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1503
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    9004:	23ac      	movs	r3, #172	; 0xac
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1501
	// update the a posteriori gyro offset vector b+ and
	// assign the entire linear acceleration error vector to update the linear acceleration
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    9006:	6660      	str	r0, [r4, #100]	; 0x64
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1503
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    9008:	58e0      	ldr	r0, [r4, r3]
    900a:	23a0      	movs	r3, #160	; 0xa0
    900c:	58e1      	ldr	r1, [r4, r3]
    900e:	f7f7 ffeb 	bl	fe8 <__aeabi_fsub>
    9012:	23bc      	movs	r3, #188	; 0xbc
    9014:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1501
	// update the a posteriori gyro offset vector b+ and
	// assign the entire linear acceleration error vector to update the linear acceleration
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    9016:	2380      	movs	r3, #128	; 0x80
    9018:	58e1      	ldr	r1, [r4, r3]
    901a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    901c:	f7f7 ffe4 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1503
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    9020:	23b0      	movs	r3, #176	; 0xb0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1501
	// update the a posteriori gyro offset vector b+ and
	// assign the entire linear acceleration error vector to update the linear acceleration
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    9022:	66a0      	str	r0, [r4, #104]	; 0x68
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1503
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    9024:	58e0      	ldr	r0, [r4, r3]
    9026:	23a4      	movs	r3, #164	; 0xa4
    9028:	58e1      	ldr	r1, [r4, r3]
    902a:	f7f7 ffdd 	bl	fe8 <__aeabi_fsub>
    902e:	23c0      	movs	r3, #192	; 0xc0
    9030:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1501
	// update the a posteriori gyro offset vector b+ and
	// assign the entire linear acceleration error vector to update the linear acceleration
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    9032:	2384      	movs	r3, #132	; 0x84
    9034:	58e1      	ldr	r1, [r4, r3]
    9036:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    9038:	f7f7 ffd6 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1503
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    903c:	23b4      	movs	r3, #180	; 0xb4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1501
	// update the a posteriori gyro offset vector b+ and
	// assign the entire linear acceleration error vector to update the linear acceleration
	for (i = X; i <= Z; i++)
	{
		// b+[k] = b-[k] - be+[k] = b+[k] - be+[k] (deg/s)
		pthisSV->fbPl[i] -= pthisSV->fbErrPl[i];
    903e:	66e0      	str	r0, [r4, #108]	; 0x6c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1503
		// a+ = a- - ae+ (g, sensor frame)
		pthisSV->faSePl[i] = pthisSV->faSeMi[i] - pthisSV->faErrSePl[i];
    9040:	58e0      	ldr	r0, [r4, r3]
    9042:	23a8      	movs	r3, #168	; 0xa8
    9044:	58e1      	ldr	r1, [r4, r3]
    9046:	f7f7 ffcf 	bl	fe8 <__aeabi_fsub>
    904a:	23c4      	movs	r3, #196	; 0xc4
    904c:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1509
	}

	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
    904e:	6967      	ldr	r7, [r4, #20]
    9050:	9c0c      	ldr	r4, [sp, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1510
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
    9052:	4659      	mov	r1, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1509
	}

	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
    9054:	68e5      	ldr	r5, [r4, #12]
    9056:	6920      	ldr	r0, [r4, #16]
    9058:	9705      	str	r7, [sp, #20]
    905a:	e019      	b.n	9090 <fRun_9DOF_GBY_KALMAN+0xfbc>
    905c:	00000434 	.word	0x00000434
    9060:	0000043c 	.word	0x0000043c
    9064:	00000444 	.word	0x00000444
    9068:	00000404 	.word	0x00000404
    906c:	0000044c 	.word	0x0000044c
    9070:	00000454 	.word	0x00000454
    9074:	0000045c 	.word	0x0000045c
    9078:	0000041c 	.word	0x0000041c
    907c:	00000464 	.word	0x00000464
    9080:	0000046c 	.word	0x0000046c
    9084:	00000474 	.word	0x00000474
    9088:	00000416 	.word	0x00000416
    908c:	bf800000 	.word	0xbf800000
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1510
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
    9090:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1509
	}

	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
    9092:	465f      	mov	r7, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1510
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
    9094:	6962      	ldr	r2, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1509
	}

	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
    9096:	6a3f      	ldr	r7, [r7, #32]
    9098:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1510
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
    909a:	9108      	str	r1, [sp, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1509
	}

	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
    909c:	9805      	ldr	r0, [sp, #20]
    909e:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1510
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
    90a0:	4691      	mov	r9, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1509
	}

	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
    90a2:	9707      	str	r7, [sp, #28]
    90a4:	f7f7 fe76 	bl	d94 <__aeabi_fmul>
    90a8:	4641      	mov	r1, r8
    90aa:	1c04      	adds	r4, r0, #0
    90ac:	9807      	ldr	r0, [sp, #28]
    90ae:	f7f7 fe71 	bl	d94 <__aeabi_fmul>
    90b2:	1c01      	adds	r1, r0, #0
    90b4:	1c20      	adds	r0, r4, #0
    90b6:	f7f7 fb1d 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1510
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
    90ba:	4649      	mov	r1, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1509
	}

	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
    90bc:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1510
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
    90be:	9808      	ldr	r0, [sp, #32]
    90c0:	f7f7 fe68 	bl	d94 <__aeabi_fmul>
    90c4:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1509
	}

	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
    90c6:	1c20      	adds	r0, r4, #0
    90c8:	f7f7 fb14 	bl	6f4 <__aeabi_fadd>
    90cc:	24c8      	movs	r4, #200	; 0xc8
    90ce:	465b      	mov	r3, fp
    90d0:	5118      	str	r0, [r3, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1511
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
    90d2:	699f      	ldr	r7, [r3, #24]
    90d4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    90d6:	9709      	str	r7, [sp, #36]	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1512
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
    90d8:	6b1f      	ldr	r7, [r3, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1511
	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
    90da:	9909      	ldr	r1, [sp, #36]	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1509
	}

	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
    90dc:	4682      	mov	sl, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1511
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
    90de:	1c28      	adds	r0, r5, #0
    90e0:	940b      	str	r4, [sp, #44]	; 0x2c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1512
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
    90e2:	970a      	str	r7, [sp, #40]	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1511
	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
    90e4:	f7f7 fe56 	bl	d94 <__aeabi_fmul>
    90e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    90ea:	1c04      	adds	r4, r0, #0
    90ec:	4640      	mov	r0, r8
    90ee:	f7f7 fe51 	bl	d94 <__aeabi_fmul>
    90f2:	1c01      	adds	r1, r0, #0
    90f4:	1c20      	adds	r0, r4, #0
    90f6:	f7f7 fafd 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1512
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
    90fa:	990a      	ldr	r1, [sp, #40]	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1511
	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
    90fc:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1512
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
    90fe:	4648      	mov	r0, r9
    9100:	f7f7 fe48 	bl	d94 <__aeabi_fmul>
    9104:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1511
	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
    9106:	1c20      	adds	r0, r4, #0
    9108:	f7f7 faf4 	bl	6f4 <__aeabi_fadd>
    910c:	4659      	mov	r1, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1513
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Z] = pthisSV->fRPl[X][Z] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Z] * pthisAccel->fGpFast[Y] +
    910e:	69cc      	ldr	r4, [r1, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1511
	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
    9110:	22cc      	movs	r2, #204	; 0xcc
    9112:	5088      	str	r0, [r1, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1513
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Z] = pthisSV->fRPl[X][Z] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Z] * pthisAccel->fGpFast[Y] +
    9114:	6a8e      	ldr	r6, [r1, #40]	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1514
			pthisSV->fRPl[Z][Z] * pthisAccel->fGpFast[Z];
    9116:	6b4f      	ldr	r7, [r1, #52]	; 0x34
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1511
	// compute the linear acceleration in the global frame from the accelerometer measurement (sensor frame).
	// de-rotate the accelerometer measurement from the sensor to global frame using the inverse (transpose) 
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
    9118:	9003      	str	r0, [sp, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1513
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Z] = pthisSV->fRPl[X][Z] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Z] * pthisAccel->fGpFast[Y] +
    911a:	1c21      	adds	r1, r4, #0
    911c:	1c28      	adds	r0, r5, #0
    911e:	f7f7 fe39 	bl	d94 <__aeabi_fmul>
    9122:	1c31      	adds	r1, r6, #0
    9124:	1c05      	adds	r5, r0, #0
    9126:	4640      	mov	r0, r8
    9128:	f7f7 fe34 	bl	d94 <__aeabi_fmul>
    912c:	1c01      	adds	r1, r0, #0
    912e:	1c28      	adds	r0, r5, #0
    9130:	f7f7 fae0 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1514
			pthisSV->fRPl[Z][Z] * pthisAccel->fGpFast[Z];
    9134:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1513
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Z] = pthisSV->fRPl[X][Z] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Z] * pthisAccel->fGpFast[Y] +
    9136:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1514
			pthisSV->fRPl[Z][Z] * pthisAccel->fGpFast[Z];
    9138:	4648      	mov	r0, r9
    913a:	f7f7 fe2b 	bl	d94 <__aeabi_fmul>
    913e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1513
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Z] = pthisSV->fRPl[X][Z] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Z] * pthisAccel->fGpFast[Y] +
    9140:	1c28      	adds	r0, r5, #0
    9142:	f7f7 fad7 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1516
			pthisSV->fRPl[Z][Z] * pthisAccel->fGpFast[Z];
	// remove gravity and correct the sign if the coordinate system is gravity positive / acceleration negative 
	switch (ithisCoordSystem)
    9146:	990f      	ldr	r1, [sp, #60]	; 0x3c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1513
	// of the a posteriori rotation matrix
	pthisSV->faGlPl[X] = pthisSV->fRPl[X][X] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][X] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][X] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Y] = pthisSV->fRPl[X][Y] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Y] * pthisAccel->fGpFast[Y] +
			pthisSV->fRPl[Z][Y] * pthisAccel->fGpFast[Z];
	pthisSV->faGlPl[Z] = pthisSV->fRPl[X][Z] * pthisAccel->fGpFast[X] + pthisSV->fRPl[Y][Z] * pthisAccel->fGpFast[Y] +
    9148:	25d0      	movs	r5, #208	; 0xd0
    914a:	465b      	mov	r3, fp
    914c:	5158      	str	r0, [r3, r5]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1516
			pthisSV->fRPl[Z][Z] * pthisAccel->fGpFast[Z];
	// remove gravity and correct the sign if the coordinate system is gravity positive / acceleration negative 
	switch (ithisCoordSystem)
    914e:	2900      	cmp	r1, #0
    9150:	d101      	bne.n	9156 <fRun_9DOF_GBY_KALMAN+0x1082>
    9152:	f002 fc37 	bl	b9c4 <fRun_9DOF_GBY_KALMAN+0x38f0>
    9156:	2901      	cmp	r1, #1
    9158:	d101      	bne.n	915e <fRun_9DOF_GBY_KALMAN+0x108a>
    915a:	f001 ff9c 	bl	b096 <fRun_9DOF_GBY_KALMAN+0x2fc2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1533
		pthisSV->faGlPl[Z] = pthisSV->faGlPl[Z] - 1.0F;
		break;
	case WIN8:
	default:
		// gravity positive ENU
		pthisSV->faGlPl[X] = -pthisSV->faGlPl[X];
    915e:	2180      	movs	r1, #128	; 0x80
    9160:	0609      	lsls	r1, r1, #24
    9162:	1c0b      	adds	r3, r1, #0
    9164:	4453      	add	r3, sl
    9166:	465a      	mov	r2, fp
    9168:	21c8      	movs	r1, #200	; 0xc8
    916a:	5053      	str	r3, [r2, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1534
		pthisSV->faGlPl[Y] = -pthisSV->faGlPl[Y];
    916c:	9a03      	ldr	r2, [sp, #12]
    916e:	2180      	movs	r1, #128	; 0x80
    9170:	0609      	lsls	r1, r1, #24
    9172:	1853      	adds	r3, r2, r1
    9174:	465a      	mov	r2, fp
    9176:	21cc      	movs	r1, #204	; 0xcc
    9178:	5053      	str	r3, [r2, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1535
		pthisSV->faGlPl[Z] = -(pthisSV->faGlPl[Z] + 1.0F);
    917a:	21fe      	movs	r1, #254	; 0xfe
    917c:	0589      	lsls	r1, r1, #22
    917e:	f7f7 fab9 	bl	6f4 <__aeabi_fadd>
    9182:	2280      	movs	r2, #128	; 0x80
    9184:	0612      	lsls	r2, r2, #24
    9186:	1880      	adds	r0, r0, r2
    9188:	465b      	mov	r3, fp
    918a:	5158      	str	r0, [r3, r5]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1540
		break;
	}

	// update the reference geomagnetic vector using magnetic disturbance error if valid calibration and no jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
    918c:	4b6b      	ldr	r3, [pc, #428]	; (933c <fRun_9DOF_GBY_KALMAN+0x1268>)
    918e:	9878      	ldr	r0, [sp, #480]	; 0x1e0
    9190:	56c3      	ldrsb	r3, [r0, r3]
    9192:	2b00      	cmp	r3, #0
    9194:	d101      	bne.n	919a <fRun_9DOF_GBY_KALMAN+0x10c6>
    9196:	f001 ff8b 	bl	b0b0 <fRun_9DOF_GBY_KALMAN+0x2fdc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1540 (discriminator 1)
    919a:	9904      	ldr	r1, [sp, #16]
    919c:	2900      	cmp	r1, #0
    919e:	d001      	beq.n	91a4 <fRun_9DOF_GBY_KALMAN+0x10d0>
    91a0:	f001 ff86 	bl	b0b0 <fRun_9DOF_GBY_KALMAN+0x2fdc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1546
	{
		if (ithisCoordSystem == NED)
		{
			// de-rotate the NED magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[X] = pthisSV->fRPl[X][X] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][X] * pthisSV->fdErrSePl[Y] +
    91a4:	4658      	mov	r0, fp
    91a6:	2394      	movs	r3, #148	; 0x94
    91a8:	58c3      	ldr	r3, [r0, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1542
	}

	// update the reference geomagnetic vector using magnetic disturbance error if valid calibration and no jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		if (ithisCoordSystem == NED)
    91aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1546
		{
			// de-rotate the NED magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[X] = pthisSV->fRPl[X][X] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][X] * pthisSV->fdErrSePl[Y] +
    91ac:	4698      	mov	r8, r3
    91ae:	2398      	movs	r3, #152	; 0x98
    91b0:	58c3      	ldr	r3, [r0, r3]
    91b2:	4699      	mov	r9, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1547
					pthisSV->fRPl[Z][X] * pthisSV->fdErrSePl[Z];
    91b4:	239c      	movs	r3, #156	; 0x9c
    91b6:	58c3      	ldr	r3, [r0, r3]
    91b8:	469a      	mov	sl, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1542
	}

	// update the reference geomagnetic vector using magnetic disturbance error if valid calibration and no jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		if (ithisCoordSystem == NED)
    91ba:	2a00      	cmp	r2, #0
    91bc:	d001      	beq.n	91c2 <fRun_9DOF_GBY_KALMAN+0x10ee>
    91be:	f002 fcaf 	bl	bb20 <fRun_9DOF_GBY_KALMAN+0x3a4c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1546
		{
			// de-rotate the NED magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[X] = pthisSV->fRPl[X][X] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][X] * pthisSV->fdErrSePl[Y] +
    91c2:	4641      	mov	r1, r8
    91c4:	9805      	ldr	r0, [sp, #20]
    91c6:	f7f7 fde5 	bl	d94 <__aeabi_fmul>
    91ca:	4649      	mov	r1, r9
    91cc:	1c05      	adds	r5, r0, #0
    91ce:	9807      	ldr	r0, [sp, #28]
    91d0:	f7f7 fde0 	bl	d94 <__aeabi_fmul>
    91d4:	1c01      	adds	r1, r0, #0
    91d6:	1c28      	adds	r0, r5, #0
    91d8:	f7f7 fa8c 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1547
					pthisSV->fRPl[Z][X] * pthisSV->fdErrSePl[Z];
    91dc:	4651      	mov	r1, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1546
	{
		if (ithisCoordSystem == NED)
		{
			// de-rotate the NED magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[X] = pthisSV->fRPl[X][X] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][X] * pthisSV->fdErrSePl[Y] +
    91de:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1547
					pthisSV->fRPl[Z][X] * pthisSV->fdErrSePl[Z];
    91e0:	9808      	ldr	r0, [sp, #32]
    91e2:	f7f7 fdd7 	bl	d94 <__aeabi_fmul>
    91e6:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1546
	{
		if (ithisCoordSystem == NED)
		{
			// de-rotate the NED magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[X] = pthisSV->fRPl[X][X] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][X] * pthisSV->fdErrSePl[Y] +
    91e8:	1c28      	adds	r0, r5, #0
    91ea:	f7f7 fa83 	bl	6f4 <__aeabi_fadd>
    91ee:	2388      	movs	r3, #136	; 0x88
    91f0:	4659      	mov	r1, fp
    91f2:	50c8      	str	r0, [r1, r3]
    91f4:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1548
					pthisSV->fRPl[Z][X] * pthisSV->fdErrSePl[Z];
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
    91f6:	4641      	mov	r1, r8
    91f8:	1c20      	adds	r0, r4, #0
    91fa:	f7f7 fdcb 	bl	d94 <__aeabi_fmul>
    91fe:	4649      	mov	r1, r9
    9200:	1c04      	adds	r4, r0, #0
    9202:	1c30      	adds	r0, r6, #0
    9204:	f7f7 fdc6 	bl	d94 <__aeabi_fmul>
    9208:	1c01      	adds	r1, r0, #0
    920a:	1c20      	adds	r0, r4, #0
    920c:	f7f7 fa72 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1549
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];
    9210:	4651      	mov	r1, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1548
		{
			// de-rotate the NED magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[X] = pthisSV->fRPl[X][X] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][X] * pthisSV->fdErrSePl[Y] +
					pthisSV->fRPl[Z][X] * pthisSV->fdErrSePl[Z];
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
    9212:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1549
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];
    9214:	1c38      	adds	r0, r7, #0
    9216:	f7f7 fdbd 	bl	d94 <__aeabi_fmul>
    921a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1548
		{
			// de-rotate the NED magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[X] = pthisSV->fRPl[X][X] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][X] * pthisSV->fdErrSePl[Y] +
					pthisSV->fRPl[Z][X] * pthisSV->fdErrSePl[Z];
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
    921c:	1c20      	adds	r0, r4, #0
    921e:	f7f7 fa69 	bl	6f4 <__aeabi_fadd>
    9222:	465a      	mov	r2, fp
    9224:	2390      	movs	r3, #144	; 0x90
    9226:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1553
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];

			// compute components of the new geomagnetic vector
			// the north pointing component fadj must always be non-negative
			fopp = pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z];
    9228:	2386      	movs	r3, #134	; 0x86
    922a:	005b      	lsls	r3, r3, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1548
		{
			// de-rotate the NED magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[X] = pthisSV->fRPl[X][X] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][X] * pthisSV->fdErrSePl[Y] +
					pthisSV->fRPl[Z][X] * pthisSV->fdErrSePl[Z];
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
    922c:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1553
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];

			// compute components of the new geomagnetic vector
			// the north pointing component fadj must always be non-negative
			fopp = pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z];
    922e:	58d0      	ldr	r0, [r2, r3]
    9230:	f7f7 feda 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1554
			fadj = pthisSV->fmGl[X] - pthisSV->fdErrGlPl[X];
    9234:	2382      	movs	r3, #130	; 0x82
    9236:	005b      	lsls	r3, r3, #1
    9238:	465c      	mov	r4, fp
    923a:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1553
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];

			// compute components of the new geomagnetic vector
			// the north pointing component fadj must always be non-negative
			fopp = pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z];
    923c:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1554
			fadj = pthisSV->fmGl[X] - pthisSV->fdErrGlPl[X];
    923e:	58e0      	ldr	r0, [r4, r3]
    9240:	f7f7 fed2 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1555
			if (fadj < 0.0F)
    9244:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1554
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];

			// compute components of the new geomagnetic vector
			// the north pointing component fadj must always be non-negative
			fopp = pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z];
			fadj = pthisSV->fmGl[X] - pthisSV->fdErrGlPl[X];
    9246:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1555
			if (fadj < 0.0F)
    9248:	f7f7 fa2c 	bl	6a4 <__aeabi_fcmplt>
    924c:	2800      	cmp	r0, #0
    924e:	d001      	beq.n	9254 <fRun_9DOF_GBY_KALMAN+0x1180>
    9250:	f002 fd0e 	bl	bc70 <fRun_9DOF_GBY_KALMAN+0x3b9c>
    9254:	1c20      	adds	r0, r4, #0
    9256:	1c21      	adds	r1, r4, #0
    9258:	f7f7 fd9c 	bl	d94 <__aeabi_fmul>
    925c:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1559
			{
				fadj = 0.0F;
			}
			fhyp = sqrtf(fopp * fopp + fadj * fadj);
    925e:	1c31      	adds	r1, r6, #0
    9260:	1c30      	adds	r0, r6, #0
    9262:	f7f7 fd97 	bl	d94 <__aeabi_fmul>
    9266:	1c29      	adds	r1, r5, #0
    9268:	f7f7 fa44 	bl	6f4 <__aeabi_fadd>
    926c:	f00a f910 	bl	13490 <sqrtf>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1562

			// check for the pathological condition of zero geomagnetic field
			if (fhyp != 0.0F)
    9270:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1559
			fadj = pthisSV->fmGl[X] - pthisSV->fdErrGlPl[X];
			if (fadj < 0.0F)
			{
				fadj = 0.0F;
			}
			fhyp = sqrtf(fopp * fopp + fadj * fadj);
    9272:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1562

			// check for the pathological condition of zero geomagnetic field
			if (fhyp != 0.0F)
    9274:	f7f7 fa10 	bl	698 <__aeabi_fcmpeq>
    9278:	2800      	cmp	r0, #0
    927a:	d136      	bne.n	92ea <fRun_9DOF_GBY_KALMAN+0x1216>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1565
			{
				// compute the sine and cosine of the new geomagnetic vector
				ftmp = 1.0F / fhyp;
    927c:	20fe      	movs	r0, #254	; 0xfe
    927e:	1c29      	adds	r1, r5, #0
    9280:	0580      	lsls	r0, r0, #22
    9282:	f7f7 fba3 	bl	9cc <__aeabi_fdiv>
    9286:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1566
				fsindelta = fopp * ftmp;
    9288:	1c29      	adds	r1, r5, #0
    928a:	1c30      	adds	r0, r6, #0
    928c:	f7f7 fd82 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1570
				fcosdelta = fadj * ftmp;

				// limit the inclination angle between limits to prevent runaway
				if (fsindelta > SINDELTAMAX)
    9290:	492b      	ldr	r1, [pc, #172]	; (9340 <fRun_9DOF_GBY_KALMAN+0x126c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1566
			// check for the pathological condition of zero geomagnetic field
			if (fhyp != 0.0F)
			{
				// compute the sine and cosine of the new geomagnetic vector
				ftmp = 1.0F / fhyp;
				fsindelta = fopp * ftmp;
    9292:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1570
				fcosdelta = fadj * ftmp;

				// limit the inclination angle between limits to prevent runaway
				if (fsindelta > SINDELTAMAX)
    9294:	f7f7 fa1a 	bl	6cc <__aeabi_fcmpgt>
    9298:	2800      	cmp	r0, #0
    929a:	d001      	beq.n	92a0 <fRun_9DOF_GBY_KALMAN+0x11cc>
    929c:	f002 fc3c 	bl	bb18 <fRun_9DOF_GBY_KALMAN+0x3a44>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1575
				{
					fsindelta = SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
				}
				else if (fsindelta < -SINDELTAMAX)
    92a0:	1c30      	adds	r0, r6, #0
    92a2:	4928      	ldr	r1, [pc, #160]	; (9344 <fRun_9DOF_GBY_KALMAN+0x1270>)
    92a4:	f7f7 f9fe 	bl	6a4 <__aeabi_fcmplt>
    92a8:	2800      	cmp	r0, #0
    92aa:	d001      	beq.n	92b0 <fRun_9DOF_GBY_KALMAN+0x11dc>
    92ac:	f002 fce4 	bl	bc78 <fRun_9DOF_GBY_KALMAN+0x3ba4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1567
			if (fhyp != 0.0F)
			{
				// compute the sine and cosine of the new geomagnetic vector
				ftmp = 1.0F / fhyp;
				fsindelta = fopp * ftmp;
				fcosdelta = fadj * ftmp;
    92b0:	1c20      	adds	r0, r4, #0
    92b2:	1c29      	adds	r1, r5, #0
    92b4:	f7f7 fd6e 	bl	d94 <__aeabi_fmul>
    92b8:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1582
					fsindelta = -SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
				}

				// compute the new geomagnetic vector (always north pointing)
				pthisSV->fDeltaPl = fasin_deg(fsindelta);
    92ba:	1c30      	adds	r0, r6, #0
    92bc:	f7f9 fd44 	bl	2d48 <fasin_deg>
    92c0:	465f      	mov	r7, fp
    92c2:	23b8      	movs	r3, #184	; 0xb8
    92c4:	50f8      	str	r0, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1583
				pthisSV->fmGl[X] = pthisMagCal->fB * fcosdelta;
    92c6:	9f78      	ldr	r7, [sp, #480]	; 0x1e0
    92c8:	1c21      	adds	r1, r4, #0
    92ca:	6b3d      	ldr	r5, [r7, #48]	; 0x30
    92cc:	1c28      	adds	r0, r5, #0
    92ce:	f7f7 fd61 	bl	d94 <__aeabi_fmul>
    92d2:	2382      	movs	r3, #130	; 0x82
    92d4:	005b      	lsls	r3, r3, #1
    92d6:	4659      	mov	r1, fp
    92d8:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1584
				pthisSV->fmGl[Z] = pthisMagCal->fB * fsindelta;
    92da:	1c30      	adds	r0, r6, #0
    92dc:	1c29      	adds	r1, r5, #0
    92de:	f7f7 fd59 	bl	d94 <__aeabi_fmul>
    92e2:	2386      	movs	r3, #134	; 0x86
    92e4:	005b      	lsls	r3, r3, #1
    92e6:	465a      	mov	r2, fp
    92e8:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1641
	// *********************************************************************************

	if (ithisCoordSystem == NED)
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
    92ea:	465b      	mov	r3, fp
    92ec:	330c      	adds	r3, #12
    92ee:	465a      	mov	r2, fp
    92f0:	9300      	str	r3, [sp, #0]
    92f2:	3304      	adds	r3, #4
    92f4:	9301      	str	r3, [sp, #4]
    92f6:	3204      	adds	r2, #4
    92f8:	980e      	ldr	r0, [sp, #56]	; 0x38
    92fa:	4659      	mov	r1, fp
    92fc:	3b08      	subs	r3, #8
    92fe:	f006 f92b 	bl	f558 <fNEDAnglesDegFromRotationMatrix>
    9302:	f001 feeb 	bl	b0dc <fRun_9DOF_GBY_KALMAN+0x3008>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1309
					if (*pfC6x12jk == 1.0F)
						*pftmpA12x6ij += *pfQw12x12ik;
					else if (*pfC6x12jk == -1.0F)
						*pftmpA12x6ij -= *pfQw12x12ik;
					else
						*pftmpA12x6ij += *pfQw12x12ik * *pfC6x12jk;
    9306:	4649      	mov	r1, r9
    9308:	1c28      	adds	r0, r5, #0
    930a:	f7f7 fd43 	bl	d94 <__aeabi_fmul>
    930e:	4642      	mov	r2, r8
    9310:	1c01      	adds	r1, r0, #0
    9312:	6810      	ldr	r0, [r2, #0]
    9314:	f7f7 f9ee 	bl	6f4 <__aeabi_fadd>
    9318:	4643      	mov	r3, r8
    931a:	6018      	str	r0, [r3, #0]
    931c:	f7ff f9b9 	bl	8692 <fRun_9DOF_GBY_KALMAN+0x5be>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1353
					if (*pfC6x12ik == 1.0F)
						*pfPPlus12x12ij += *pftmpA12x6kj;
					else if (*pfC6x12ik == -1.0F)
						*pfPPlus12x12ij -= *pftmpA12x6kj;
					else
						*pfPPlus12x12ij += *pfC6x12ik * *pftmpA12x6kj;
    9320:	4641      	mov	r1, r8
    9322:	1c30      	adds	r0, r6, #0
    9324:	f7f7 fd36 	bl	d94 <__aeabi_fmul>
    9328:	464a      	mov	r2, r9
    932a:	1c01      	adds	r1, r0, #0
    932c:	6810      	ldr	r0, [r2, #0]
    932e:	f7f7 f9e1 	bl	6f4 <__aeabi_fadd>
    9332:	464b      	mov	r3, r9
    9334:	6018      	str	r0, [r3, #0]
    9336:	f7ff fa30 	bl	879a <fRun_9DOF_GBY_KALMAN+0x6c6>
    933a:	46c0      	nop			; (mov r8, r8)
    933c:	00000416 	.word	0x00000416
    9340:	3f6803ca 	.word	0x3f6803ca
    9344:	bf6803ca 	.word	0xbf6803ca
    9348:	4640      	movvs	r0, r8
    934a:	2100      	movs	r1, #0
    934c:	f7f7 f9a4 	bl	698 <__aeabi_fcmpeq>
    9350:	2800      	cmp	r0, #0
    9352:	d100      	bne.n	9356 <fRun_9DOF_GBY_KALMAN+0x1282>
    9354:	e109      	b.n	956a <fRun_9DOF_GBY_KALMAN+0x1496>
    9356:	9804      	ldr	r0, [sp, #16]
    9358:	2100      	movs	r1, #0
    935a:	f7f7 f99d 	bl	698 <__aeabi_fcmpeq>
    935e:	2800      	cmp	r0, #0
    9360:	d101      	bne.n	9366 <fRun_9DOF_GBY_KALMAN+0x1292>
    9362:	f000 fde5 	bl	9f30 <fRun_9DOF_GBY_KALMAN+0x1e5c>
    9366:	9805      	ldr	r0, [sp, #20]
    9368:	2100      	movs	r1, #0
    936a:	f7f7 f995 	bl	698 <__aeabi_fcmpeq>
    936e:	2800      	cmp	r0, #0
    9370:	d101      	bne.n	9376 <fRun_9DOF_GBY_KALMAN+0x12a2>
    9372:	f001 f951 	bl	a618 <fRun_9DOF_GBY_KALMAN+0x2544>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9376:	4650      	mov	r0, sl
    9378:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    937a:	6829      	ldr	r1, [r5, #0]
    937c:	9803      	ldr	r0, [sp, #12]
    937e:	f7f7 fd09 	bl	d94 <__aeabi_fmul>
    9382:	2100      	movs	r1, #0
    9384:	f7f7 f9b6 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9388:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    938a:	4680      	mov	r8, r0
    938c:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    938e:	1c30      	adds	r0, r6, #0
    9390:	f7f7 f982 	bl	698 <__aeabi_fcmpeq>
    9394:	2800      	cmp	r0, #0
    9396:	d109      	bne.n	93ac <fRun_9DOF_GBY_KALMAN+0x12d8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9398:	6b29      	ldr	r1, [r5, #48]	; 0x30
    939a:	1c30      	adds	r0, r6, #0
    939c:	f7f7 fcfa 	bl	d94 <__aeabi_fmul>
    93a0:	1c01      	adds	r1, r0, #0
    93a2:	4640      	mov	r0, r8
    93a4:	f7f7 f9a6 	bl	6f4 <__aeabi_fadd>
    93a8:	4680      	mov	r8, r0
    93aa:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    93ac:	1c38      	adds	r0, r7, #0
    93ae:	2100      	movs	r1, #0
    93b0:	f7f7 f972 	bl	698 <__aeabi_fcmpeq>
    93b4:	2800      	cmp	r0, #0
    93b6:	d107      	bne.n	93c8 <fRun_9DOF_GBY_KALMAN+0x12f4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    93b8:	6e29      	ldr	r1, [r5, #96]	; 0x60
    93ba:	1c38      	adds	r0, r7, #0
    93bc:	f7f7 fcea 	bl	d94 <__aeabi_fmul>
    93c0:	4641      	mov	r1, r8
    93c2:	f7f7 f997 	bl	6f4 <__aeabi_fadd>
    93c6:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    93c8:	4651      	mov	r1, sl
    93ca:	6061      	str	r1, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    93cc:	6869      	ldr	r1, [r5, #4]
    93ce:	9803      	ldr	r0, [sp, #12]
    93d0:	f7f7 fce0 	bl	d94 <__aeabi_fmul>
    93d4:	2100      	movs	r1, #0
    93d6:	f7f7 f98d 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    93da:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    93dc:	4680      	mov	r8, r0
    93de:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    93e0:	1c30      	adds	r0, r6, #0
    93e2:	f7f7 f959 	bl	698 <__aeabi_fcmpeq>
    93e6:	2800      	cmp	r0, #0
    93e8:	d109      	bne.n	93fe <fRun_9DOF_GBY_KALMAN+0x132a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    93ea:	6b69      	ldr	r1, [r5, #52]	; 0x34
    93ec:	1c30      	adds	r0, r6, #0
    93ee:	f7f7 fcd1 	bl	d94 <__aeabi_fmul>
    93f2:	1c01      	adds	r1, r0, #0
    93f4:	4640      	mov	r0, r8
    93f6:	f7f7 f97d 	bl	6f4 <__aeabi_fadd>
    93fa:	4680      	mov	r8, r0
    93fc:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    93fe:	1c38      	adds	r0, r7, #0
    9400:	2100      	movs	r1, #0
    9402:	f7f7 f949 	bl	698 <__aeabi_fcmpeq>
    9406:	2800      	cmp	r0, #0
    9408:	d107      	bne.n	941a <fRun_9DOF_GBY_KALMAN+0x1346>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    940a:	6e69      	ldr	r1, [r5, #100]	; 0x64
    940c:	1c38      	adds	r0, r7, #0
    940e:	f7f7 fcc1 	bl	d94 <__aeabi_fmul>
    9412:	4641      	mov	r1, r8
    9414:	f7f7 f96e 	bl	6f4 <__aeabi_fadd>
    9418:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    941a:	4652      	mov	r2, sl
    941c:	60a2      	str	r2, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    941e:	68a9      	ldr	r1, [r5, #8]
    9420:	9803      	ldr	r0, [sp, #12]
    9422:	f7f7 fcb7 	bl	d94 <__aeabi_fmul>
    9426:	2100      	movs	r1, #0
    9428:	f7f7 f964 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    942c:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    942e:	4680      	mov	r8, r0
    9430:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9432:	1c30      	adds	r0, r6, #0
    9434:	f7f7 f930 	bl	698 <__aeabi_fcmpeq>
    9438:	2800      	cmp	r0, #0
    943a:	d109      	bne.n	9450 <fRun_9DOF_GBY_KALMAN+0x137c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    943c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    943e:	1c30      	adds	r0, r6, #0
    9440:	f7f7 fca8 	bl	d94 <__aeabi_fmul>
    9444:	1c01      	adds	r1, r0, #0
    9446:	4640      	mov	r0, r8
    9448:	f7f7 f954 	bl	6f4 <__aeabi_fadd>
    944c:	4680      	mov	r8, r0
    944e:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9450:	1c38      	adds	r0, r7, #0
    9452:	2100      	movs	r1, #0
    9454:	f7f7 f920 	bl	698 <__aeabi_fcmpeq>
    9458:	2800      	cmp	r0, #0
    945a:	d107      	bne.n	946c <fRun_9DOF_GBY_KALMAN+0x1398>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    945c:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    945e:	1c38      	adds	r0, r7, #0
    9460:	f7f7 fc98 	bl	d94 <__aeabi_fmul>
    9464:	4641      	mov	r1, r8
    9466:	f7f7 f945 	bl	6f4 <__aeabi_fadd>
    946a:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    946c:	4653      	mov	r3, sl
    946e:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9470:	68e9      	ldr	r1, [r5, #12]
    9472:	9803      	ldr	r0, [sp, #12]
    9474:	f7f7 fc8e 	bl	d94 <__aeabi_fmul>
    9478:	2100      	movs	r1, #0
    947a:	f7f7 f93b 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    947e:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9480:	4680      	mov	r8, r0
    9482:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9484:	1c30      	adds	r0, r6, #0
    9486:	f7f7 f907 	bl	698 <__aeabi_fcmpeq>
    948a:	2800      	cmp	r0, #0
    948c:	d109      	bne.n	94a2 <fRun_9DOF_GBY_KALMAN+0x13ce>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    948e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    9490:	1c30      	adds	r0, r6, #0
    9492:	f7f7 fc7f 	bl	d94 <__aeabi_fmul>
    9496:	1c01      	adds	r1, r0, #0
    9498:	4640      	mov	r0, r8
    949a:	f7f7 f92b 	bl	6f4 <__aeabi_fadd>
    949e:	4680      	mov	r8, r0
    94a0:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    94a2:	1c38      	adds	r0, r7, #0
    94a4:	2100      	movs	r1, #0
    94a6:	f7f7 f8f7 	bl	698 <__aeabi_fcmpeq>
    94aa:	2800      	cmp	r0, #0
    94ac:	d107      	bne.n	94be <fRun_9DOF_GBY_KALMAN+0x13ea>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    94ae:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
    94b0:	1c38      	adds	r0, r7, #0
    94b2:	f7f7 fc6f 	bl	d94 <__aeabi_fmul>
    94b6:	4641      	mov	r1, r8
    94b8:	f7f7 f91c 	bl	6f4 <__aeabi_fadd>
    94bc:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    94be:	4650      	mov	r0, sl
    94c0:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    94c2:	6929      	ldr	r1, [r5, #16]
    94c4:	9803      	ldr	r0, [sp, #12]
    94c6:	f7f7 fc65 	bl	d94 <__aeabi_fmul>
    94ca:	2100      	movs	r1, #0
    94cc:	f7f7 f912 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    94d0:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    94d2:	4680      	mov	r8, r0
    94d4:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    94d6:	1c30      	adds	r0, r6, #0
    94d8:	f7f7 f8de 	bl	698 <__aeabi_fcmpeq>
    94dc:	2800      	cmp	r0, #0
    94de:	d109      	bne.n	94f4 <fRun_9DOF_GBY_KALMAN+0x1420>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    94e0:	6c29      	ldr	r1, [r5, #64]	; 0x40
    94e2:	1c30      	adds	r0, r6, #0
    94e4:	f7f7 fc56 	bl	d94 <__aeabi_fmul>
    94e8:	1c01      	adds	r1, r0, #0
    94ea:	4640      	mov	r0, r8
    94ec:	f7f7 f902 	bl	6f4 <__aeabi_fadd>
    94f0:	4680      	mov	r8, r0
    94f2:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    94f4:	1c38      	adds	r0, r7, #0
    94f6:	2100      	movs	r1, #0
    94f8:	f7f7 f8ce 	bl	698 <__aeabi_fcmpeq>
    94fc:	2800      	cmp	r0, #0
    94fe:	d107      	bne.n	9510 <fRun_9DOF_GBY_KALMAN+0x143c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9500:	6f29      	ldr	r1, [r5, #112]	; 0x70
    9502:	1c38      	adds	r0, r7, #0
    9504:	f7f7 fc46 	bl	d94 <__aeabi_fmul>
    9508:	4641      	mov	r1, r8
    950a:	f7f7 f8f3 	bl	6f4 <__aeabi_fadd>
    950e:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9510:	4651      	mov	r1, sl
    9512:	6161      	str	r1, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9514:	6969      	ldr	r1, [r5, #20]
    9516:	9803      	ldr	r0, [sp, #12]
    9518:	f7f7 fc3c 	bl	d94 <__aeabi_fmul>
    951c:	2100      	movs	r1, #0
    951e:	f7f7 f8e9 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9522:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9524:	4680      	mov	r8, r0
    9526:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9528:	1c30      	adds	r0, r6, #0
    952a:	f7f7 f8b5 	bl	698 <__aeabi_fcmpeq>
    952e:	2800      	cmp	r0, #0
    9530:	d109      	bne.n	9546 <fRun_9DOF_GBY_KALMAN+0x1472>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9532:	6c69      	ldr	r1, [r5, #68]	; 0x44
    9534:	1c30      	adds	r0, r6, #0
    9536:	f7f7 fc2d 	bl	d94 <__aeabi_fmul>
    953a:	1c01      	adds	r1, r0, #0
    953c:	4640      	mov	r0, r8
    953e:	f7f7 f8d9 	bl	6f4 <__aeabi_fadd>
    9542:	4680      	mov	r8, r0
    9544:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9546:	1c38      	adds	r0, r7, #0
    9548:	2100      	movs	r1, #0
    954a:	f7f7 f8a5 	bl	698 <__aeabi_fcmpeq>
    954e:	2800      	cmp	r0, #0
    9550:	d001      	beq.n	9556 <fRun_9DOF_GBY_KALMAN+0x1482>
    9552:	f7ff faff 	bl	8b54 <fRun_9DOF_GBY_KALMAN+0xa80>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9556:	6f69      	ldr	r1, [r5, #116]	; 0x74
    9558:	1c38      	adds	r0, r7, #0
    955a:	f7f7 fc1b 	bl	d94 <__aeabi_fmul>
    955e:	4641      	mov	r1, r8
    9560:	f7f7 f8c8 	bl	6f4 <__aeabi_fadd>
    9564:	6160      	str	r0, [r4, #20]
    9566:	f7ff faf5 	bl	8b54 <fRun_9DOF_GBY_KALMAN+0xa80>
    956a:	9804      	ldr	r0, [sp, #16]
    956c:	2100      	movs	r1, #0
    956e:	f7f7 f893 	bl	698 <__aeabi_fcmpeq>
    9572:	2800      	cmp	r0, #0
    9574:	d100      	bne.n	9578 <fRun_9DOF_GBY_KALMAN+0x14a4>
    9576:	e34b      	b.n	9c10 <fRun_9DOF_GBY_KALMAN+0x1b3c>
    9578:	9805      	ldr	r0, [sp, #20]
    957a:	2100      	movs	r1, #0
    957c:	f7f7 f88c 	bl	698 <__aeabi_fcmpeq>
    9580:	2800      	cmp	r0, #0
    9582:	d101      	bne.n	9588 <fRun_9DOF_GBY_KALMAN+0x14b4>
    9584:	f001 fcee 	bl	af64 <fRun_9DOF_GBY_KALMAN+0x2e90>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9588:	4652      	mov	r2, sl
    958a:	6022      	str	r2, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    958c:	6829      	ldr	r1, [r5, #0]
    958e:	9803      	ldr	r0, [sp, #12]
    9590:	f7f7 fc00 	bl	d94 <__aeabi_fmul>
    9594:	2100      	movs	r1, #0
    9596:	f7f7 f8ad 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    959a:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    959c:	4681      	mov	r9, r0
    959e:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    95a0:	1c30      	adds	r0, r6, #0
    95a2:	f7f7 f879 	bl	698 <__aeabi_fcmpeq>
    95a6:	2800      	cmp	r0, #0
    95a8:	d109      	bne.n	95be <fRun_9DOF_GBY_KALMAN+0x14ea>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    95aa:	6b29      	ldr	r1, [r5, #48]	; 0x30
    95ac:	1c30      	adds	r0, r6, #0
    95ae:	f7f7 fbf1 	bl	d94 <__aeabi_fmul>
    95b2:	1c01      	adds	r1, r0, #0
    95b4:	4648      	mov	r0, r9
    95b6:	f7f7 f89d 	bl	6f4 <__aeabi_fadd>
    95ba:	4681      	mov	r9, r0
    95bc:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    95be:	1c38      	adds	r0, r7, #0
    95c0:	2100      	movs	r1, #0
    95c2:	f7f7 f869 	bl	698 <__aeabi_fcmpeq>
    95c6:	2800      	cmp	r0, #0
    95c8:	d109      	bne.n	95de <fRun_9DOF_GBY_KALMAN+0x150a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    95ca:	6e29      	ldr	r1, [r5, #96]	; 0x60
    95cc:	1c38      	adds	r0, r7, #0
    95ce:	f7f7 fbe1 	bl	d94 <__aeabi_fmul>
    95d2:	1c01      	adds	r1, r0, #0
    95d4:	4648      	mov	r0, r9
    95d6:	f7f7 f88d 	bl	6f4 <__aeabi_fadd>
    95da:	4681      	mov	r9, r0
    95dc:	6020      	str	r0, [r4, #0]
    95de:	23f0      	movs	r3, #240	; 0xf0
    95e0:	58e9      	ldr	r1, [r5, r3]
    95e2:	4640      	mov	r0, r8
    95e4:	f7f7 fbd6 	bl	d94 <__aeabi_fmul>
    95e8:	4649      	mov	r1, r9
    95ea:	f7f7 f883 	bl	6f4 <__aeabi_fadd>
    95ee:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    95f0:	4650      	mov	r0, sl
    95f2:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    95f4:	6869      	ldr	r1, [r5, #4]
    95f6:	9803      	ldr	r0, [sp, #12]
    95f8:	f7f7 fbcc 	bl	d94 <__aeabi_fmul>
    95fc:	2100      	movs	r1, #0
    95fe:	f7f7 f879 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9602:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9604:	4681      	mov	r9, r0
    9606:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9608:	1c30      	adds	r0, r6, #0
    960a:	f7f7 f845 	bl	698 <__aeabi_fcmpeq>
    960e:	2800      	cmp	r0, #0
    9610:	d109      	bne.n	9626 <fRun_9DOF_GBY_KALMAN+0x1552>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9612:	6b69      	ldr	r1, [r5, #52]	; 0x34
    9614:	1c30      	adds	r0, r6, #0
    9616:	f7f7 fbbd 	bl	d94 <__aeabi_fmul>
    961a:	1c01      	adds	r1, r0, #0
    961c:	4648      	mov	r0, r9
    961e:	f7f7 f869 	bl	6f4 <__aeabi_fadd>
    9622:	4681      	mov	r9, r0
    9624:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9626:	1c38      	adds	r0, r7, #0
    9628:	2100      	movs	r1, #0
    962a:	f7f7 f835 	bl	698 <__aeabi_fcmpeq>
    962e:	2800      	cmp	r0, #0
    9630:	d109      	bne.n	9646 <fRun_9DOF_GBY_KALMAN+0x1572>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9632:	6e69      	ldr	r1, [r5, #100]	; 0x64
    9634:	1c38      	adds	r0, r7, #0
    9636:	f7f7 fbad 	bl	d94 <__aeabi_fmul>
    963a:	1c01      	adds	r1, r0, #0
    963c:	4648      	mov	r0, r9
    963e:	f7f7 f859 	bl	6f4 <__aeabi_fadd>
    9642:	4681      	mov	r9, r0
    9644:	6060      	str	r0, [r4, #4]
    9646:	22f4      	movs	r2, #244	; 0xf4
    9648:	58a9      	ldr	r1, [r5, r2]
    964a:	4640      	mov	r0, r8
    964c:	f7f7 fba2 	bl	d94 <__aeabi_fmul>
    9650:	4649      	mov	r1, r9
    9652:	f7f7 f84f 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9656:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9658:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    965a:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    965c:	68a9      	ldr	r1, [r5, #8]
    965e:	9803      	ldr	r0, [sp, #12]
    9660:	f7f7 fb98 	bl	d94 <__aeabi_fmul>
    9664:	2100      	movs	r1, #0
    9666:	f7f7 f845 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    966a:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    966c:	4681      	mov	r9, r0
    966e:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9670:	1c30      	adds	r0, r6, #0
    9672:	f7f7 f811 	bl	698 <__aeabi_fcmpeq>
    9676:	2800      	cmp	r0, #0
    9678:	d109      	bne.n	968e <fRun_9DOF_GBY_KALMAN+0x15ba>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    967a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    967c:	1c30      	adds	r0, r6, #0
    967e:	f7f7 fb89 	bl	d94 <__aeabi_fmul>
    9682:	1c01      	adds	r1, r0, #0
    9684:	4648      	mov	r0, r9
    9686:	f7f7 f835 	bl	6f4 <__aeabi_fadd>
    968a:	4681      	mov	r9, r0
    968c:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    968e:	1c38      	adds	r0, r7, #0
    9690:	2100      	movs	r1, #0
    9692:	f7f7 f801 	bl	698 <__aeabi_fcmpeq>
    9696:	2800      	cmp	r0, #0
    9698:	d109      	bne.n	96ae <fRun_9DOF_GBY_KALMAN+0x15da>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    969a:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    969c:	1c38      	adds	r0, r7, #0
    969e:	f7f7 fb79 	bl	d94 <__aeabi_fmul>
    96a2:	1c01      	adds	r1, r0, #0
    96a4:	4648      	mov	r0, r9
    96a6:	f7f7 f825 	bl	6f4 <__aeabi_fadd>
    96aa:	4681      	mov	r9, r0
    96ac:	60a0      	str	r0, [r4, #8]
    96ae:	22f8      	movs	r2, #248	; 0xf8
    96b0:	58a9      	ldr	r1, [r5, r2]
    96b2:	4640      	mov	r0, r8
    96b4:	f7f7 fb6e 	bl	d94 <__aeabi_fmul>
    96b8:	4649      	mov	r1, r9
    96ba:	f7f7 f81b 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    96be:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    96c0:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    96c2:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    96c4:	68e9      	ldr	r1, [r5, #12]
    96c6:	9803      	ldr	r0, [sp, #12]
    96c8:	f7f7 fb64 	bl	d94 <__aeabi_fmul>
    96cc:	2100      	movs	r1, #0
    96ce:	f7f7 f811 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    96d2:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    96d4:	4681      	mov	r9, r0
    96d6:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    96d8:	1c30      	adds	r0, r6, #0
    96da:	f7f6 ffdd 	bl	698 <__aeabi_fcmpeq>
    96de:	2800      	cmp	r0, #0
    96e0:	d109      	bne.n	96f6 <fRun_9DOF_GBY_KALMAN+0x1622>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    96e2:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    96e4:	1c30      	adds	r0, r6, #0
    96e6:	f7f7 fb55 	bl	d94 <__aeabi_fmul>
    96ea:	1c01      	adds	r1, r0, #0
    96ec:	4648      	mov	r0, r9
    96ee:	f7f7 f801 	bl	6f4 <__aeabi_fadd>
    96f2:	4681      	mov	r9, r0
    96f4:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    96f6:	1c38      	adds	r0, r7, #0
    96f8:	2100      	movs	r1, #0
    96fa:	f7f6 ffcd 	bl	698 <__aeabi_fcmpeq>
    96fe:	2800      	cmp	r0, #0
    9700:	d109      	bne.n	9716 <fRun_9DOF_GBY_KALMAN+0x1642>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9702:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
    9704:	1c38      	adds	r0, r7, #0
    9706:	f7f7 fb45 	bl	d94 <__aeabi_fmul>
    970a:	1c01      	adds	r1, r0, #0
    970c:	4648      	mov	r0, r9
    970e:	f7f6 fff1 	bl	6f4 <__aeabi_fadd>
    9712:	4681      	mov	r9, r0
    9714:	60e0      	str	r0, [r4, #12]
    9716:	22fc      	movs	r2, #252	; 0xfc
    9718:	58a9      	ldr	r1, [r5, r2]
    971a:	4640      	mov	r0, r8
    971c:	f7f7 fb3a 	bl	d94 <__aeabi_fmul>
    9720:	4649      	mov	r1, r9
    9722:	f7f6 ffe7 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9726:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9728:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    972a:	6123      	str	r3, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    972c:	6929      	ldr	r1, [r5, #16]
    972e:	9803      	ldr	r0, [sp, #12]
    9730:	f7f7 fb30 	bl	d94 <__aeabi_fmul>
    9734:	2100      	movs	r1, #0
    9736:	f7f6 ffdd 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    973a:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    973c:	4681      	mov	r9, r0
    973e:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9740:	1c30      	adds	r0, r6, #0
    9742:	f7f6 ffa9 	bl	698 <__aeabi_fcmpeq>
    9746:	2800      	cmp	r0, #0
    9748:	d109      	bne.n	975e <fRun_9DOF_GBY_KALMAN+0x168a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    974a:	6c29      	ldr	r1, [r5, #64]	; 0x40
    974c:	1c30      	adds	r0, r6, #0
    974e:	f7f7 fb21 	bl	d94 <__aeabi_fmul>
    9752:	1c01      	adds	r1, r0, #0
    9754:	4648      	mov	r0, r9
    9756:	f7f6 ffcd 	bl	6f4 <__aeabi_fadd>
    975a:	4681      	mov	r9, r0
    975c:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    975e:	1c38      	adds	r0, r7, #0
    9760:	2100      	movs	r1, #0
    9762:	f7f6 ff99 	bl	698 <__aeabi_fcmpeq>
    9766:	2800      	cmp	r0, #0
    9768:	d109      	bne.n	977e <fRun_9DOF_GBY_KALMAN+0x16aa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    976a:	6f29      	ldr	r1, [r5, #112]	; 0x70
    976c:	1c38      	adds	r0, r7, #0
    976e:	f7f7 fb11 	bl	d94 <__aeabi_fmul>
    9772:	1c01      	adds	r1, r0, #0
    9774:	4648      	mov	r0, r9
    9776:	f7f6 ffbd 	bl	6f4 <__aeabi_fadd>
    977a:	4681      	mov	r9, r0
    977c:	6120      	str	r0, [r4, #16]
    977e:	2280      	movs	r2, #128	; 0x80
    9780:	0052      	lsls	r2, r2, #1
    9782:	58a9      	ldr	r1, [r5, r2]
    9784:	4640      	mov	r0, r8
    9786:	f7f7 fb05 	bl	d94 <__aeabi_fmul>
    978a:	4649      	mov	r1, r9
    978c:	f7f6 ffb2 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9790:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9792:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9794:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9796:	6969      	ldr	r1, [r5, #20]
    9798:	9803      	ldr	r0, [sp, #12]
    979a:	f7f7 fafb 	bl	d94 <__aeabi_fmul>
    979e:	2100      	movs	r1, #0
    97a0:	f7f6 ffa8 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    97a4:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    97a6:	4681      	mov	r9, r0
    97a8:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    97aa:	1c30      	adds	r0, r6, #0
    97ac:	f7f6 ff74 	bl	698 <__aeabi_fcmpeq>
    97b0:	2800      	cmp	r0, #0
    97b2:	d109      	bne.n	97c8 <fRun_9DOF_GBY_KALMAN+0x16f4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    97b4:	6c69      	ldr	r1, [r5, #68]	; 0x44
    97b6:	1c30      	adds	r0, r6, #0
    97b8:	f7f7 faec 	bl	d94 <__aeabi_fmul>
    97bc:	1c01      	adds	r1, r0, #0
    97be:	4648      	mov	r0, r9
    97c0:	f7f6 ff98 	bl	6f4 <__aeabi_fadd>
    97c4:	4681      	mov	r9, r0
    97c6:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    97c8:	1c38      	adds	r0, r7, #0
    97ca:	2100      	movs	r1, #0
    97cc:	f7f6 ff64 	bl	698 <__aeabi_fcmpeq>
    97d0:	2800      	cmp	r0, #0
    97d2:	d109      	bne.n	97e8 <fRun_9DOF_GBY_KALMAN+0x1714>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    97d4:	6f69      	ldr	r1, [r5, #116]	; 0x74
    97d6:	1c38      	adds	r0, r7, #0
    97d8:	f7f7 fadc 	bl	d94 <__aeabi_fmul>
    97dc:	1c01      	adds	r1, r0, #0
    97de:	4648      	mov	r0, r9
    97e0:	f7f6 ff88 	bl	6f4 <__aeabi_fadd>
    97e4:	4681      	mov	r9, r0
    97e6:	6160      	str	r0, [r4, #20]
    97e8:	2782      	movs	r7, #130	; 0x82
    97ea:	007f      	lsls	r7, r7, #1
    97ec:	59e9      	ldr	r1, [r5, r7]
    97ee:	4640      	mov	r0, r8
    97f0:	f7f7 fad0 	bl	d94 <__aeabi_fmul>
    97f4:	4649      	mov	r1, r9
    97f6:	f7f6 ff7d 	bl	6f4 <__aeabi_fadd>
    97fa:	6160      	str	r0, [r4, #20]
    97fc:	f7ff f9aa 	bl	8b54 <fRun_9DOF_GBY_KALMAN+0xa80>
    9800:	9804      	ldr	r0, [sp, #16]
    9802:	2100      	movs	r1, #0
    9804:	f7f6 ff48 	bl	698 <__aeabi_fcmpeq>
    9808:	2800      	cmp	r0, #0
    980a:	d100      	bne.n	980e <fRun_9DOF_GBY_KALMAN+0x173a>
    980c:	e255      	b.n	9cba <fRun_9DOF_GBY_KALMAN+0x1be6>
    980e:	9805      	ldr	r0, [sp, #20]
    9810:	2100      	movs	r1, #0
    9812:	f7f6 ff41 	bl	698 <__aeabi_fcmpeq>
    9816:	2800      	cmp	r0, #0
    9818:	d101      	bne.n	981e <fRun_9DOF_GBY_KALMAN+0x174a>
    981a:	f001 fa09 	bl	ac30 <fRun_9DOF_GBY_KALMAN+0x2b5c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    981e:	4650      	mov	r0, sl
    9820:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9822:	2100      	movs	r1, #0
    9824:	1c30      	adds	r0, r6, #0
    9826:	f7f6 ff37 	bl	698 <__aeabi_fcmpeq>
    982a:	2800      	cmp	r0, #0
    982c:	d101      	bne.n	9832 <fRun_9DOF_GBY_KALMAN+0x175e>
    982e:	f001 fc27 	bl	b080 <fRun_9DOF_GBY_KALMAN+0x2fac>
    9832:	2100      	movs	r1, #0
    9834:	4689      	mov	r9, r1
    9836:	1c38      	adds	r0, r7, #0
    9838:	2100      	movs	r1, #0
    983a:	f7f6 ff2d 	bl	698 <__aeabi_fcmpeq>
    983e:	2800      	cmp	r0, #0
    9840:	d109      	bne.n	9856 <fRun_9DOF_GBY_KALMAN+0x1782>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9842:	6e29      	ldr	r1, [r5, #96]	; 0x60
    9844:	1c38      	adds	r0, r7, #0
    9846:	f7f7 faa5 	bl	d94 <__aeabi_fmul>
    984a:	1c01      	adds	r1, r0, #0
    984c:	4648      	mov	r0, r9
    984e:	f7f6 ff51 	bl	6f4 <__aeabi_fadd>
    9852:	4681      	mov	r9, r0
    9854:	6020      	str	r0, [r4, #0]
    9856:	22f0      	movs	r2, #240	; 0xf0
    9858:	58a9      	ldr	r1, [r5, r2]
    985a:	4640      	mov	r0, r8
    985c:	f7f7 fa9a 	bl	d94 <__aeabi_fmul>
    9860:	4649      	mov	r1, r9
    9862:	f7f6 ff47 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9866:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9868:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    986a:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    986c:	1c30      	adds	r0, r6, #0
    986e:	2100      	movs	r1, #0
    9870:	f7f6 ff12 	bl	698 <__aeabi_fcmpeq>
    9874:	2800      	cmp	r0, #0
    9876:	d001      	beq.n	987c <fRun_9DOF_GBY_KALMAN+0x17a8>
    9878:	f002 f909 	bl	ba8e <fRun_9DOF_GBY_KALMAN+0x39ba>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    987c:	6b69      	ldr	r1, [r5, #52]	; 0x34
    987e:	1c30      	adds	r0, r6, #0
    9880:	f7f7 fa88 	bl	d94 <__aeabi_fmul>
    9884:	2100      	movs	r1, #0
    9886:	f7f6 ff35 	bl	6f4 <__aeabi_fadd>
    988a:	4681      	mov	r9, r0
    988c:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    988e:	1c38      	adds	r0, r7, #0
    9890:	2100      	movs	r1, #0
    9892:	f7f6 ff01 	bl	698 <__aeabi_fcmpeq>
    9896:	2800      	cmp	r0, #0
    9898:	d109      	bne.n	98ae <fRun_9DOF_GBY_KALMAN+0x17da>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    989a:	6e69      	ldr	r1, [r5, #100]	; 0x64
    989c:	1c38      	adds	r0, r7, #0
    989e:	f7f7 fa79 	bl	d94 <__aeabi_fmul>
    98a2:	1c01      	adds	r1, r0, #0
    98a4:	4648      	mov	r0, r9
    98a6:	f7f6 ff25 	bl	6f4 <__aeabi_fadd>
    98aa:	4681      	mov	r9, r0
    98ac:	6060      	str	r0, [r4, #4]
    98ae:	22f4      	movs	r2, #244	; 0xf4
    98b0:	58a9      	ldr	r1, [r5, r2]
    98b2:	4640      	mov	r0, r8
    98b4:	f7f7 fa6e 	bl	d94 <__aeabi_fmul>
    98b8:	4649      	mov	r1, r9
    98ba:	f7f6 ff1b 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    98be:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    98c0:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    98c2:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    98c4:	1c30      	adds	r0, r6, #0
    98c6:	2100      	movs	r1, #0
    98c8:	f7f6 fee6 	bl	698 <__aeabi_fcmpeq>
    98cc:	2800      	cmp	r0, #0
    98ce:	d001      	beq.n	98d4 <fRun_9DOF_GBY_KALMAN+0x1800>
    98d0:	f002 f8d9 	bl	ba86 <fRun_9DOF_GBY_KALMAN+0x39b2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    98d4:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    98d6:	1c30      	adds	r0, r6, #0
    98d8:	f7f7 fa5c 	bl	d94 <__aeabi_fmul>
    98dc:	2100      	movs	r1, #0
    98de:	f7f6 ff09 	bl	6f4 <__aeabi_fadd>
    98e2:	4681      	mov	r9, r0
    98e4:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    98e6:	1c38      	adds	r0, r7, #0
    98e8:	2100      	movs	r1, #0
    98ea:	f7f6 fed5 	bl	698 <__aeabi_fcmpeq>
    98ee:	2800      	cmp	r0, #0
    98f0:	d109      	bne.n	9906 <fRun_9DOF_GBY_KALMAN+0x1832>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    98f2:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    98f4:	1c38      	adds	r0, r7, #0
    98f6:	f7f7 fa4d 	bl	d94 <__aeabi_fmul>
    98fa:	1c01      	adds	r1, r0, #0
    98fc:	4648      	mov	r0, r9
    98fe:	f7f6 fef9 	bl	6f4 <__aeabi_fadd>
    9902:	4681      	mov	r9, r0
    9904:	60a0      	str	r0, [r4, #8]
    9906:	22f8      	movs	r2, #248	; 0xf8
    9908:	58a9      	ldr	r1, [r5, r2]
    990a:	4640      	mov	r0, r8
    990c:	f7f7 fa42 	bl	d94 <__aeabi_fmul>
    9910:	4649      	mov	r1, r9
    9912:	f7f6 feef 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9916:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9918:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    991a:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    991c:	1c30      	adds	r0, r6, #0
    991e:	2100      	movs	r1, #0
    9920:	f7f6 feba 	bl	698 <__aeabi_fcmpeq>
    9924:	2800      	cmp	r0, #0
    9926:	d001      	beq.n	992c <fRun_9DOF_GBY_KALMAN+0x1858>
    9928:	f002 f8a9 	bl	ba7e <fRun_9DOF_GBY_KALMAN+0x39aa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    992c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    992e:	1c30      	adds	r0, r6, #0
    9930:	f7f7 fa30 	bl	d94 <__aeabi_fmul>
    9934:	2100      	movs	r1, #0
    9936:	f7f6 fedd 	bl	6f4 <__aeabi_fadd>
    993a:	4681      	mov	r9, r0
    993c:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    993e:	1c38      	adds	r0, r7, #0
    9940:	2100      	movs	r1, #0
    9942:	f7f6 fea9 	bl	698 <__aeabi_fcmpeq>
    9946:	2800      	cmp	r0, #0
    9948:	d109      	bne.n	995e <fRun_9DOF_GBY_KALMAN+0x188a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    994a:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
    994c:	1c38      	adds	r0, r7, #0
    994e:	f7f7 fa21 	bl	d94 <__aeabi_fmul>
    9952:	1c01      	adds	r1, r0, #0
    9954:	4648      	mov	r0, r9
    9956:	f7f6 fecd 	bl	6f4 <__aeabi_fadd>
    995a:	4681      	mov	r9, r0
    995c:	60e0      	str	r0, [r4, #12]
    995e:	22fc      	movs	r2, #252	; 0xfc
    9960:	58a9      	ldr	r1, [r5, r2]
    9962:	4640      	mov	r0, r8
    9964:	f7f7 fa16 	bl	d94 <__aeabi_fmul>
    9968:	4649      	mov	r1, r9
    996a:	f7f6 fec3 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    996e:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9970:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9972:	6123      	str	r3, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9974:	1c30      	adds	r0, r6, #0
    9976:	2100      	movs	r1, #0
    9978:	f7f6 fe8e 	bl	698 <__aeabi_fcmpeq>
    997c:	2800      	cmp	r0, #0
    997e:	d001      	beq.n	9984 <fRun_9DOF_GBY_KALMAN+0x18b0>
    9980:	f002 f81c 	bl	b9bc <fRun_9DOF_GBY_KALMAN+0x38e8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9984:	6c29      	ldr	r1, [r5, #64]	; 0x40
    9986:	1c30      	adds	r0, r6, #0
    9988:	f7f7 fa04 	bl	d94 <__aeabi_fmul>
    998c:	2100      	movs	r1, #0
    998e:	f7f6 feb1 	bl	6f4 <__aeabi_fadd>
    9992:	4681      	mov	r9, r0
    9994:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9996:	1c38      	adds	r0, r7, #0
    9998:	2100      	movs	r1, #0
    999a:	f7f6 fe7d 	bl	698 <__aeabi_fcmpeq>
    999e:	2800      	cmp	r0, #0
    99a0:	d109      	bne.n	99b6 <fRun_9DOF_GBY_KALMAN+0x18e2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    99a2:	6f29      	ldr	r1, [r5, #112]	; 0x70
    99a4:	1c38      	adds	r0, r7, #0
    99a6:	f7f7 f9f5 	bl	d94 <__aeabi_fmul>
    99aa:	1c01      	adds	r1, r0, #0
    99ac:	4648      	mov	r0, r9
    99ae:	f7f6 fea1 	bl	6f4 <__aeabi_fadd>
    99b2:	4681      	mov	r9, r0
    99b4:	6120      	str	r0, [r4, #16]
    99b6:	2280      	movs	r2, #128	; 0x80
    99b8:	0052      	lsls	r2, r2, #1
    99ba:	58a9      	ldr	r1, [r5, r2]
    99bc:	4640      	mov	r0, r8
    99be:	f7f7 f9e9 	bl	d94 <__aeabi_fmul>
    99c2:	4649      	mov	r1, r9
    99c4:	f7f6 fe96 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    99c8:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    99ca:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    99cc:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    99ce:	1c30      	adds	r0, r6, #0
    99d0:	2100      	movs	r1, #0
    99d2:	f7f6 fe61 	bl	698 <__aeabi_fcmpeq>
    99d6:	2800      	cmp	r0, #0
    99d8:	d001      	beq.n	99de <fRun_9DOF_GBY_KALMAN+0x190a>
    99da:	f002 f80c 	bl	b9f6 <fRun_9DOF_GBY_KALMAN+0x3922>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    99de:	6c69      	ldr	r1, [r5, #68]	; 0x44
    99e0:	1c30      	adds	r0, r6, #0
    99e2:	f7f7 f9d7 	bl	d94 <__aeabi_fmul>
    99e6:	2100      	movs	r1, #0
    99e8:	f7f6 fe84 	bl	6f4 <__aeabi_fadd>
    99ec:	1c06      	adds	r6, r0, #0
    99ee:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    99f0:	1c38      	adds	r0, r7, #0
    99f2:	2100      	movs	r1, #0
    99f4:	f7f6 fe50 	bl	698 <__aeabi_fcmpeq>
    99f8:	2800      	cmp	r0, #0
    99fa:	d001      	beq.n	9a00 <fRun_9DOF_GBY_KALMAN+0x192c>
    99fc:	f001 fa4c 	bl	ae98 <fRun_9DOF_GBY_KALMAN+0x2dc4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9a00:	6f69      	ldr	r1, [r5, #116]	; 0x74
    9a02:	1c38      	adds	r0, r7, #0
    9a04:	f7f7 f9c6 	bl	d94 <__aeabi_fmul>
    9a08:	1c01      	adds	r1, r0, #0
    9a0a:	1c30      	adds	r0, r6, #0
    9a0c:	f001 fa40 	bl	ae90 <fRun_9DOF_GBY_KALMAN+0x2dbc>
    9a10:	9805      	ldr	r0, [sp, #20]
    9a12:	2100      	movs	r1, #0
    9a14:	f7f6 fe40 	bl	698 <__aeabi_fcmpeq>
    9a18:	2800      	cmp	r0, #0
    9a1a:	d101      	bne.n	9a20 <fRun_9DOF_GBY_KALMAN+0x194c>
    9a1c:	f000 ff2e 	bl	a87c <fRun_9DOF_GBY_KALMAN+0x27a8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9a20:	4650      	mov	r0, sl
    9a22:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9a24:	2100      	movs	r1, #0
    9a26:	1c30      	adds	r0, r6, #0
    9a28:	f7f6 fe36 	bl	698 <__aeabi_fcmpeq>
    9a2c:	2800      	cmp	r0, #0
    9a2e:	d101      	bne.n	9a34 <fRun_9DOF_GBY_KALMAN+0x1960>
    9a30:	f001 fb1b 	bl	b06a <fRun_9DOF_GBY_KALMAN+0x2f96>
    9a34:	2100      	movs	r1, #0
    9a36:	4688      	mov	r8, r1
    9a38:	1c38      	adds	r0, r7, #0
    9a3a:	2100      	movs	r1, #0
    9a3c:	f7f6 fe2c 	bl	698 <__aeabi_fcmpeq>
    9a40:	2800      	cmp	r0, #0
    9a42:	d109      	bne.n	9a58 <fRun_9DOF_GBY_KALMAN+0x1984>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9a44:	6e29      	ldr	r1, [r5, #96]	; 0x60
    9a46:	1c38      	adds	r0, r7, #0
    9a48:	f7f7 f9a4 	bl	d94 <__aeabi_fmul>
    9a4c:	1c01      	adds	r1, r0, #0
    9a4e:	4640      	mov	r0, r8
    9a50:	f7f6 fe50 	bl	6f4 <__aeabi_fadd>
    9a54:	4680      	mov	r8, r0
    9a56:	6020      	str	r0, [r4, #0]
    9a58:	22c0      	movs	r2, #192	; 0xc0
    9a5a:	58a9      	ldr	r1, [r5, r2]
    9a5c:	9804      	ldr	r0, [sp, #16]
    9a5e:	f7f7 f999 	bl	d94 <__aeabi_fmul>
    9a62:	4641      	mov	r1, r8
    9a64:	f7f6 fe46 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9a68:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9a6a:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9a6c:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9a6e:	1c30      	adds	r0, r6, #0
    9a70:	2100      	movs	r1, #0
    9a72:	f7f6 fe11 	bl	698 <__aeabi_fcmpeq>
    9a76:	2800      	cmp	r0, #0
    9a78:	d001      	beq.n	9a7e <fRun_9DOF_GBY_KALMAN+0x19aa>
    9a7a:	f002 f81b 	bl	bab4 <fRun_9DOF_GBY_KALMAN+0x39e0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9a7e:	6b69      	ldr	r1, [r5, #52]	; 0x34
    9a80:	1c30      	adds	r0, r6, #0
    9a82:	f7f7 f987 	bl	d94 <__aeabi_fmul>
    9a86:	2100      	movs	r1, #0
    9a88:	f7f6 fe34 	bl	6f4 <__aeabi_fadd>
    9a8c:	4680      	mov	r8, r0
    9a8e:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9a90:	1c38      	adds	r0, r7, #0
    9a92:	2100      	movs	r1, #0
    9a94:	f7f6 fe00 	bl	698 <__aeabi_fcmpeq>
    9a98:	2800      	cmp	r0, #0
    9a9a:	d109      	bne.n	9ab0 <fRun_9DOF_GBY_KALMAN+0x19dc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9a9c:	6e69      	ldr	r1, [r5, #100]	; 0x64
    9a9e:	1c38      	adds	r0, r7, #0
    9aa0:	f7f7 f978 	bl	d94 <__aeabi_fmul>
    9aa4:	1c01      	adds	r1, r0, #0
    9aa6:	4640      	mov	r0, r8
    9aa8:	f7f6 fe24 	bl	6f4 <__aeabi_fadd>
    9aac:	4680      	mov	r8, r0
    9aae:	6060      	str	r0, [r4, #4]
    9ab0:	23c4      	movs	r3, #196	; 0xc4
    9ab2:	58e9      	ldr	r1, [r5, r3]
    9ab4:	9804      	ldr	r0, [sp, #16]
    9ab6:	f7f7 f96d 	bl	d94 <__aeabi_fmul>
    9aba:	4641      	mov	r1, r8
    9abc:	f7f6 fe1a 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9ac0:	4651      	mov	r1, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9ac2:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9ac4:	60a1      	str	r1, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9ac6:	1c30      	adds	r0, r6, #0
    9ac8:	2100      	movs	r1, #0
    9aca:	f7f6 fde5 	bl	698 <__aeabi_fcmpeq>
    9ace:	2800      	cmp	r0, #0
    9ad0:	d001      	beq.n	9ad6 <fRun_9DOF_GBY_KALMAN+0x1a02>
    9ad2:	f001 ffeb 	bl	baac <fRun_9DOF_GBY_KALMAN+0x39d8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9ad6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    9ad8:	1c30      	adds	r0, r6, #0
    9ada:	f7f7 f95b 	bl	d94 <__aeabi_fmul>
    9ade:	2100      	movs	r1, #0
    9ae0:	f7f6 fe08 	bl	6f4 <__aeabi_fadd>
    9ae4:	4680      	mov	r8, r0
    9ae6:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9ae8:	1c38      	adds	r0, r7, #0
    9aea:	2100      	movs	r1, #0
    9aec:	f7f6 fdd4 	bl	698 <__aeabi_fcmpeq>
    9af0:	2800      	cmp	r0, #0
    9af2:	d109      	bne.n	9b08 <fRun_9DOF_GBY_KALMAN+0x1a34>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9af4:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    9af6:	1c38      	adds	r0, r7, #0
    9af8:	f7f7 f94c 	bl	d94 <__aeabi_fmul>
    9afc:	1c01      	adds	r1, r0, #0
    9afe:	4640      	mov	r0, r8
    9b00:	f7f6 fdf8 	bl	6f4 <__aeabi_fadd>
    9b04:	4680      	mov	r8, r0
    9b06:	60a0      	str	r0, [r4, #8]
    9b08:	23c8      	movs	r3, #200	; 0xc8
    9b0a:	58e9      	ldr	r1, [r5, r3]
    9b0c:	9804      	ldr	r0, [sp, #16]
    9b0e:	f7f7 f941 	bl	d94 <__aeabi_fmul>
    9b12:	4641      	mov	r1, r8
    9b14:	f7f6 fdee 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9b18:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9b1a:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9b1c:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9b1e:	1c30      	adds	r0, r6, #0
    9b20:	2100      	movs	r1, #0
    9b22:	f7f6 fdb9 	bl	698 <__aeabi_fcmpeq>
    9b26:	2800      	cmp	r0, #0
    9b28:	d001      	beq.n	9b2e <fRun_9DOF_GBY_KALMAN+0x1a5a>
    9b2a:	f001 ffbb 	bl	baa4 <fRun_9DOF_GBY_KALMAN+0x39d0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9b2e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    9b30:	1c30      	adds	r0, r6, #0
    9b32:	f7f7 f92f 	bl	d94 <__aeabi_fmul>
    9b36:	2100      	movs	r1, #0
    9b38:	f7f6 fddc 	bl	6f4 <__aeabi_fadd>
    9b3c:	4680      	mov	r8, r0
    9b3e:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9b40:	1c38      	adds	r0, r7, #0
    9b42:	2100      	movs	r1, #0
    9b44:	f7f6 fda8 	bl	698 <__aeabi_fcmpeq>
    9b48:	2800      	cmp	r0, #0
    9b4a:	d109      	bne.n	9b60 <fRun_9DOF_GBY_KALMAN+0x1a8c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9b4c:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
    9b4e:	1c38      	adds	r0, r7, #0
    9b50:	f7f7 f920 	bl	d94 <__aeabi_fmul>
    9b54:	1c01      	adds	r1, r0, #0
    9b56:	4640      	mov	r0, r8
    9b58:	f7f6 fdcc 	bl	6f4 <__aeabi_fadd>
    9b5c:	4680      	mov	r8, r0
    9b5e:	60e0      	str	r0, [r4, #12]
    9b60:	23cc      	movs	r3, #204	; 0xcc
    9b62:	58e9      	ldr	r1, [r5, r3]
    9b64:	9804      	ldr	r0, [sp, #16]
    9b66:	f7f7 f915 	bl	d94 <__aeabi_fmul>
    9b6a:	4641      	mov	r1, r8
    9b6c:	f7f6 fdc2 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9b70:	4651      	mov	r1, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9b72:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9b74:	6121      	str	r1, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9b76:	1c30      	adds	r0, r6, #0
    9b78:	2100      	movs	r1, #0
    9b7a:	f7f6 fd8d 	bl	698 <__aeabi_fcmpeq>
    9b7e:	2800      	cmp	r0, #0
    9b80:	d001      	beq.n	9b86 <fRun_9DOF_GBY_KALMAN+0x1ab2>
    9b82:	f001 ff8b 	bl	ba9c <fRun_9DOF_GBY_KALMAN+0x39c8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9b86:	6c29      	ldr	r1, [r5, #64]	; 0x40
    9b88:	1c30      	adds	r0, r6, #0
    9b8a:	f7f7 f903 	bl	d94 <__aeabi_fmul>
    9b8e:	2100      	movs	r1, #0
    9b90:	f7f6 fdb0 	bl	6f4 <__aeabi_fadd>
    9b94:	4680      	mov	r8, r0
    9b96:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9b98:	1c38      	adds	r0, r7, #0
    9b9a:	2100      	movs	r1, #0
    9b9c:	f7f6 fd7c 	bl	698 <__aeabi_fcmpeq>
    9ba0:	2800      	cmp	r0, #0
    9ba2:	d109      	bne.n	9bb8 <fRun_9DOF_GBY_KALMAN+0x1ae4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9ba4:	6f29      	ldr	r1, [r5, #112]	; 0x70
    9ba6:	1c38      	adds	r0, r7, #0
    9ba8:	f7f7 f8f4 	bl	d94 <__aeabi_fmul>
    9bac:	1c01      	adds	r1, r0, #0
    9bae:	4640      	mov	r0, r8
    9bb0:	f7f6 fda0 	bl	6f4 <__aeabi_fadd>
    9bb4:	4680      	mov	r8, r0
    9bb6:	6120      	str	r0, [r4, #16]
    9bb8:	23d0      	movs	r3, #208	; 0xd0
    9bba:	58e9      	ldr	r1, [r5, r3]
    9bbc:	9804      	ldr	r0, [sp, #16]
    9bbe:	f7f7 f8e9 	bl	d94 <__aeabi_fmul>
    9bc2:	4641      	mov	r1, r8
    9bc4:	f7f6 fd96 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9bc8:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9bca:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9bcc:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9bce:	1c30      	adds	r0, r6, #0
    9bd0:	2100      	movs	r1, #0
    9bd2:	f7f6 fd61 	bl	698 <__aeabi_fcmpeq>
    9bd6:	2800      	cmp	r0, #0
    9bd8:	d001      	beq.n	9bde <fRun_9DOF_GBY_KALMAN+0x1b0a>
    9bda:	f001 ff5c 	bl	ba96 <fRun_9DOF_GBY_KALMAN+0x39c2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9bde:	6c69      	ldr	r1, [r5, #68]	; 0x44
    9be0:	1c30      	adds	r0, r6, #0
    9be2:	f7f7 f8d7 	bl	d94 <__aeabi_fmul>
    9be6:	2100      	movs	r1, #0
    9be8:	f7f6 fd84 	bl	6f4 <__aeabi_fadd>
    9bec:	1c06      	adds	r6, r0, #0
    9bee:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9bf0:	1c38      	adds	r0, r7, #0
    9bf2:	2100      	movs	r1, #0
    9bf4:	f7f6 fd50 	bl	698 <__aeabi_fcmpeq>
    9bf8:	2800      	cmp	r0, #0
    9bfa:	d001      	beq.n	9c00 <fRun_9DOF_GBY_KALMAN+0x1b2c>
    9bfc:	f000 ff71 	bl	aae2 <fRun_9DOF_GBY_KALMAN+0x2a0e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9c00:	6f69      	ldr	r1, [r5, #116]	; 0x74
    9c02:	1c38      	adds	r0, r7, #0
    9c04:	f7f7 f8c6 	bl	d94 <__aeabi_fmul>
    9c08:	1c01      	adds	r1, r0, #0
    9c0a:	1c30      	adds	r0, r6, #0
    9c0c:	f000 ff65 	bl	aada <fRun_9DOF_GBY_KALMAN+0x2a06>
    9c10:	9805      	ldr	r0, [sp, #20]
    9c12:	2100      	movs	r1, #0
    9c14:	f7f6 fd40 	bl	698 <__aeabi_fcmpeq>
    9c18:	2800      	cmp	r0, #0
    9c1a:	d101      	bne.n	9c20 <fRun_9DOF_GBY_KALMAN+0x1b4c>
    9c1c:	f001 f948 	bl	aeb0 <fRun_9DOF_GBY_KALMAN+0x2ddc>
    9c20:	1c23      	adds	r3, r4, #0
    9c22:	3318      	adds	r3, #24
    9c24:	46b9      	mov	r9, r7
    9c26:	9305      	str	r3, [sp, #20]
    9c28:	46ab      	mov	fp, r5
    9c2a:	1c37      	adds	r7, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9c2c:	4650      	mov	r0, sl
    9c2e:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9c30:	6829      	ldr	r1, [r5, #0]
    9c32:	9803      	ldr	r0, [sp, #12]
    9c34:	f7f7 f8ae 	bl	d94 <__aeabi_fmul>
    9c38:	2100      	movs	r1, #0
    9c3a:	f7f6 fd5b 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9c3e:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9c40:	1c06      	adds	r6, r0, #0
    9c42:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9c44:	1c38      	adds	r0, r7, #0
    9c46:	f7f6 fd27 	bl	698 <__aeabi_fcmpeq>
    9c4a:	2800      	cmp	r0, #0
    9c4c:	d109      	bne.n	9c62 <fRun_9DOF_GBY_KALMAN+0x1b8e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9c4e:	6b29      	ldr	r1, [r5, #48]	; 0x30
    9c50:	1c38      	adds	r0, r7, #0
    9c52:	f7f7 f89f 	bl	d94 <__aeabi_fmul>
    9c56:	1c01      	adds	r1, r0, #0
    9c58:	1c30      	adds	r0, r6, #0
    9c5a:	f7f6 fd4b 	bl	6f4 <__aeabi_fadd>
    9c5e:	1c06      	adds	r6, r0, #0
    9c60:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9c62:	4648      	mov	r0, r9
    9c64:	2100      	movs	r1, #0
    9c66:	f7f6 fd17 	bl	698 <__aeabi_fcmpeq>
    9c6a:	2800      	cmp	r0, #0
    9c6c:	d109      	bne.n	9c82 <fRun_9DOF_GBY_KALMAN+0x1bae>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9c6e:	6e29      	ldr	r1, [r5, #96]	; 0x60
    9c70:	4648      	mov	r0, r9
    9c72:	f7f7 f88f 	bl	d94 <__aeabi_fmul>
    9c76:	1c01      	adds	r1, r0, #0
    9c78:	1c30      	adds	r0, r6, #0
    9c7a:	f7f6 fd3b 	bl	6f4 <__aeabi_fadd>
    9c7e:	1c06      	adds	r6, r0, #0
    9c80:	6020      	str	r0, [r4, #0]
    9c82:	1c2b      	adds	r3, r5, #0
    9c84:	33c0      	adds	r3, #192	; 0xc0
    9c86:	6819      	ldr	r1, [r3, #0]
    9c88:	9804      	ldr	r0, [sp, #16]
    9c8a:	f7f7 f883 	bl	d94 <__aeabi_fmul>
    9c8e:	1c31      	adds	r1, r6, #0
    9c90:	f7f6 fd30 	bl	6f4 <__aeabi_fadd>
    9c94:	1c2b      	adds	r3, r5, #0
    9c96:	6020      	str	r0, [r4, #0]
    9c98:	33f0      	adds	r3, #240	; 0xf0
    9c9a:	6819      	ldr	r1, [r3, #0]
    9c9c:	1c06      	adds	r6, r0, #0
    9c9e:	4640      	mov	r0, r8
    9ca0:	f7f7 f878 	bl	d94 <__aeabi_fmul>
    9ca4:	1c31      	adds	r1, r6, #0
    9ca6:	f7f6 fd25 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1397
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
    9caa:	9905      	ldr	r1, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9cac:	c401      	stmia	r4!, {r0}
    9cae:	3504      	adds	r5, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1397
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
    9cb0:	428c      	cmp	r4, r1
    9cb2:	d1bb      	bne.n	9c2c <fRun_9DOF_GBY_KALMAN+0x1b58>
    9cb4:	465d      	mov	r5, fp
    9cb6:	f7fe ff4d 	bl	8b54 <fRun_9DOF_GBY_KALMAN+0xa80>
    9cba:	9805      	ldr	r0, [sp, #20]
    9cbc:	2100      	movs	r1, #0
    9cbe:	f7f6 fceb 	bl	698 <__aeabi_fcmpeq>
    9cc2:	2800      	cmp	r0, #0
    9cc4:	d101      	bne.n	9cca <fRun_9DOF_GBY_KALMAN+0x1bf6>
    9cc6:	f000 ff17 	bl	aaf8 <fRun_9DOF_GBY_KALMAN+0x2a24>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9cca:	4650      	mov	r0, sl
    9ccc:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9cce:	2100      	movs	r1, #0
    9cd0:	1c30      	adds	r0, r6, #0
    9cd2:	f7f6 fce1 	bl	698 <__aeabi_fcmpeq>
    9cd6:	2800      	cmp	r0, #0
    9cd8:	d101      	bne.n	9cde <fRun_9DOF_GBY_KALMAN+0x1c0a>
    9cda:	f001 f9bb 	bl	b054 <fRun_9DOF_GBY_KALMAN+0x2f80>
    9cde:	2100      	movs	r1, #0
    9ce0:	4689      	mov	r9, r1
    9ce2:	1c38      	adds	r0, r7, #0
    9ce4:	2100      	movs	r1, #0
    9ce6:	f7f6 fcd7 	bl	698 <__aeabi_fcmpeq>
    9cea:	2800      	cmp	r0, #0
    9cec:	d109      	bne.n	9d02 <fRun_9DOF_GBY_KALMAN+0x1c2e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9cee:	6e29      	ldr	r1, [r5, #96]	; 0x60
    9cf0:	1c38      	adds	r0, r7, #0
    9cf2:	f7f7 f84f 	bl	d94 <__aeabi_fmul>
    9cf6:	1c01      	adds	r1, r0, #0
    9cf8:	4648      	mov	r0, r9
    9cfa:	f7f6 fcfb 	bl	6f4 <__aeabi_fadd>
    9cfe:	4681      	mov	r9, r0
    9d00:	6020      	str	r0, [r4, #0]
    9d02:	22c0      	movs	r2, #192	; 0xc0
    9d04:	58a9      	ldr	r1, [r5, r2]
    9d06:	9804      	ldr	r0, [sp, #16]
    9d08:	f7f7 f844 	bl	d94 <__aeabi_fmul>
    9d0c:	4649      	mov	r1, r9
    9d0e:	f7f6 fcf1 	bl	6f4 <__aeabi_fadd>
    9d12:	23f0      	movs	r3, #240	; 0xf0
    9d14:	6020      	str	r0, [r4, #0]
    9d16:	58e9      	ldr	r1, [r5, r3]
    9d18:	4681      	mov	r9, r0
    9d1a:	4640      	mov	r0, r8
    9d1c:	f7f7 f83a 	bl	d94 <__aeabi_fmul>
    9d20:	4649      	mov	r1, r9
    9d22:	f7f6 fce7 	bl	6f4 <__aeabi_fadd>
    9d26:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9d28:	4650      	mov	r0, sl
    9d2a:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9d2c:	2100      	movs	r1, #0
    9d2e:	1c30      	adds	r0, r6, #0
    9d30:	f7f6 fcb2 	bl	698 <__aeabi_fcmpeq>
    9d34:	2800      	cmp	r0, #0
    9d36:	d001      	beq.n	9d3c <fRun_9DOF_GBY_KALMAN+0x1c68>
    9d38:	f001 fec0 	bl	babc <fRun_9DOF_GBY_KALMAN+0x39e8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9d3c:	6b69      	ldr	r1, [r5, #52]	; 0x34
    9d3e:	1c30      	adds	r0, r6, #0
    9d40:	f7f7 f828 	bl	d94 <__aeabi_fmul>
    9d44:	2100      	movs	r1, #0
    9d46:	f7f6 fcd5 	bl	6f4 <__aeabi_fadd>
    9d4a:	4681      	mov	r9, r0
    9d4c:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9d4e:	1c38      	adds	r0, r7, #0
    9d50:	2100      	movs	r1, #0
    9d52:	f7f6 fca1 	bl	698 <__aeabi_fcmpeq>
    9d56:	2800      	cmp	r0, #0
    9d58:	d109      	bne.n	9d6e <fRun_9DOF_GBY_KALMAN+0x1c9a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9d5a:	6e69      	ldr	r1, [r5, #100]	; 0x64
    9d5c:	1c38      	adds	r0, r7, #0
    9d5e:	f7f7 f819 	bl	d94 <__aeabi_fmul>
    9d62:	1c01      	adds	r1, r0, #0
    9d64:	4648      	mov	r0, r9
    9d66:	f7f6 fcc5 	bl	6f4 <__aeabi_fadd>
    9d6a:	4681      	mov	r9, r0
    9d6c:	6060      	str	r0, [r4, #4]
    9d6e:	23c4      	movs	r3, #196	; 0xc4
    9d70:	58e9      	ldr	r1, [r5, r3]
    9d72:	9804      	ldr	r0, [sp, #16]
    9d74:	f7f7 f80e 	bl	d94 <__aeabi_fmul>
    9d78:	4649      	mov	r1, r9
    9d7a:	f7f6 fcbb 	bl	6f4 <__aeabi_fadd>
    9d7e:	22f4      	movs	r2, #244	; 0xf4
    9d80:	6060      	str	r0, [r4, #4]
    9d82:	58a9      	ldr	r1, [r5, r2]
    9d84:	4681      	mov	r9, r0
    9d86:	4640      	mov	r0, r8
    9d88:	f7f7 f804 	bl	d94 <__aeabi_fmul>
    9d8c:	4649      	mov	r1, r9
    9d8e:	f7f6 fcb1 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9d92:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9d94:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9d96:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9d98:	1c30      	adds	r0, r6, #0
    9d9a:	2100      	movs	r1, #0
    9d9c:	f7f6 fc7c 	bl	698 <__aeabi_fcmpeq>
    9da0:	2800      	cmp	r0, #0
    9da2:	d001      	beq.n	9da8 <fRun_9DOF_GBY_KALMAN+0x1cd4>
    9da4:	f001 fe48 	bl	ba38 <fRun_9DOF_GBY_KALMAN+0x3964>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9da8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    9daa:	1c30      	adds	r0, r6, #0
    9dac:	f7f6 fff2 	bl	d94 <__aeabi_fmul>
    9db0:	2100      	movs	r1, #0
    9db2:	f7f6 fc9f 	bl	6f4 <__aeabi_fadd>
    9db6:	4681      	mov	r9, r0
    9db8:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9dba:	1c38      	adds	r0, r7, #0
    9dbc:	2100      	movs	r1, #0
    9dbe:	f7f6 fc6b 	bl	698 <__aeabi_fcmpeq>
    9dc2:	2800      	cmp	r0, #0
    9dc4:	d109      	bne.n	9dda <fRun_9DOF_GBY_KALMAN+0x1d06>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9dc6:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    9dc8:	1c38      	adds	r0, r7, #0
    9dca:	f7f6 ffe3 	bl	d94 <__aeabi_fmul>
    9dce:	1c01      	adds	r1, r0, #0
    9dd0:	4648      	mov	r0, r9
    9dd2:	f7f6 fc8f 	bl	6f4 <__aeabi_fadd>
    9dd6:	4681      	mov	r9, r0
    9dd8:	60a0      	str	r0, [r4, #8]
    9dda:	23c8      	movs	r3, #200	; 0xc8
    9ddc:	58e9      	ldr	r1, [r5, r3]
    9dde:	9804      	ldr	r0, [sp, #16]
    9de0:	f7f6 ffd8 	bl	d94 <__aeabi_fmul>
    9de4:	4649      	mov	r1, r9
    9de6:	f7f6 fc85 	bl	6f4 <__aeabi_fadd>
    9dea:	22f8      	movs	r2, #248	; 0xf8
    9dec:	60a0      	str	r0, [r4, #8]
    9dee:	58a9      	ldr	r1, [r5, r2]
    9df0:	4681      	mov	r9, r0
    9df2:	4640      	mov	r0, r8
    9df4:	f7f6 ffce 	bl	d94 <__aeabi_fmul>
    9df8:	4649      	mov	r1, r9
    9dfa:	f7f6 fc7b 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9dfe:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9e00:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9e02:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9e04:	1c30      	adds	r0, r6, #0
    9e06:	2100      	movs	r1, #0
    9e08:	f7f6 fc46 	bl	698 <__aeabi_fcmpeq>
    9e0c:	2800      	cmp	r0, #0
    9e0e:	d001      	beq.n	9e14 <fRun_9DOF_GBY_KALMAN+0x1d40>
    9e10:	f001 fe0e 	bl	ba30 <fRun_9DOF_GBY_KALMAN+0x395c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9e14:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    9e16:	1c30      	adds	r0, r6, #0
    9e18:	f7f6 ffbc 	bl	d94 <__aeabi_fmul>
    9e1c:	2100      	movs	r1, #0
    9e1e:	f7f6 fc69 	bl	6f4 <__aeabi_fadd>
    9e22:	4681      	mov	r9, r0
    9e24:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9e26:	1c38      	adds	r0, r7, #0
    9e28:	2100      	movs	r1, #0
    9e2a:	f7f6 fc35 	bl	698 <__aeabi_fcmpeq>
    9e2e:	2800      	cmp	r0, #0
    9e30:	d109      	bne.n	9e46 <fRun_9DOF_GBY_KALMAN+0x1d72>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9e32:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
    9e34:	1c38      	adds	r0, r7, #0
    9e36:	f7f6 ffad 	bl	d94 <__aeabi_fmul>
    9e3a:	1c01      	adds	r1, r0, #0
    9e3c:	4648      	mov	r0, r9
    9e3e:	f7f6 fc59 	bl	6f4 <__aeabi_fadd>
    9e42:	4681      	mov	r9, r0
    9e44:	60e0      	str	r0, [r4, #12]
    9e46:	23cc      	movs	r3, #204	; 0xcc
    9e48:	58e9      	ldr	r1, [r5, r3]
    9e4a:	9804      	ldr	r0, [sp, #16]
    9e4c:	f7f6 ffa2 	bl	d94 <__aeabi_fmul>
    9e50:	4649      	mov	r1, r9
    9e52:	f7f6 fc4f 	bl	6f4 <__aeabi_fadd>
    9e56:	22fc      	movs	r2, #252	; 0xfc
    9e58:	60e0      	str	r0, [r4, #12]
    9e5a:	58a9      	ldr	r1, [r5, r2]
    9e5c:	4681      	mov	r9, r0
    9e5e:	4640      	mov	r0, r8
    9e60:	f7f6 ff98 	bl	d94 <__aeabi_fmul>
    9e64:	4649      	mov	r1, r9
    9e66:	f7f6 fc45 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9e6a:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9e6c:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9e6e:	6123      	str	r3, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9e70:	1c30      	adds	r0, r6, #0
    9e72:	2100      	movs	r1, #0
    9e74:	f7f6 fc10 	bl	698 <__aeabi_fcmpeq>
    9e78:	2800      	cmp	r0, #0
    9e7a:	d001      	beq.n	9e80 <fRun_9DOF_GBY_KALMAN+0x1dac>
    9e7c:	f001 fdd4 	bl	ba28 <fRun_9DOF_GBY_KALMAN+0x3954>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9e80:	6c29      	ldr	r1, [r5, #64]	; 0x40
    9e82:	1c30      	adds	r0, r6, #0
    9e84:	f7f6 ff86 	bl	d94 <__aeabi_fmul>
    9e88:	2100      	movs	r1, #0
    9e8a:	f7f6 fc33 	bl	6f4 <__aeabi_fadd>
    9e8e:	4681      	mov	r9, r0
    9e90:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9e92:	1c38      	adds	r0, r7, #0
    9e94:	2100      	movs	r1, #0
    9e96:	f7f6 fbff 	bl	698 <__aeabi_fcmpeq>
    9e9a:	2800      	cmp	r0, #0
    9e9c:	d109      	bne.n	9eb2 <fRun_9DOF_GBY_KALMAN+0x1dde>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9e9e:	6f29      	ldr	r1, [r5, #112]	; 0x70
    9ea0:	1c38      	adds	r0, r7, #0
    9ea2:	f7f6 ff77 	bl	d94 <__aeabi_fmul>
    9ea6:	1c01      	adds	r1, r0, #0
    9ea8:	4648      	mov	r0, r9
    9eaa:	f7f6 fc23 	bl	6f4 <__aeabi_fadd>
    9eae:	4681      	mov	r9, r0
    9eb0:	6120      	str	r0, [r4, #16]
    9eb2:	23d0      	movs	r3, #208	; 0xd0
    9eb4:	58e9      	ldr	r1, [r5, r3]
    9eb6:	9804      	ldr	r0, [sp, #16]
    9eb8:	f7f6 ff6c 	bl	d94 <__aeabi_fmul>
    9ebc:	4649      	mov	r1, r9
    9ebe:	f7f6 fc19 	bl	6f4 <__aeabi_fadd>
    9ec2:	2280      	movs	r2, #128	; 0x80
    9ec4:	6120      	str	r0, [r4, #16]
    9ec6:	0052      	lsls	r2, r2, #1
    9ec8:	58a9      	ldr	r1, [r5, r2]
    9eca:	4681      	mov	r9, r0
    9ecc:	4640      	mov	r0, r8
    9ece:	f7f6 ff61 	bl	d94 <__aeabi_fmul>
    9ed2:	4649      	mov	r1, r9
    9ed4:	f7f6 fc0e 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9ed8:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9eda:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9edc:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9ede:	1c30      	adds	r0, r6, #0
    9ee0:	2100      	movs	r1, #0
    9ee2:	f7f6 fbd9 	bl	698 <__aeabi_fcmpeq>
    9ee6:	2800      	cmp	r0, #0
    9ee8:	d001      	beq.n	9eee <fRun_9DOF_GBY_KALMAN+0x1e1a>
    9eea:	f001 fd9a 	bl	ba22 <fRun_9DOF_GBY_KALMAN+0x394e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9eee:	6c69      	ldr	r1, [r5, #68]	; 0x44
    9ef0:	1c30      	adds	r0, r6, #0
    9ef2:	f7f6 ff4f 	bl	d94 <__aeabi_fmul>
    9ef6:	2100      	movs	r1, #0
    9ef8:	f7f6 fbfc 	bl	6f4 <__aeabi_fadd>
    9efc:	1c06      	adds	r6, r0, #0
    9efe:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9f00:	1c38      	adds	r0, r7, #0
    9f02:	2100      	movs	r1, #0
    9f04:	f7f6 fbc8 	bl	698 <__aeabi_fcmpeq>
    9f08:	2800      	cmp	r0, #0
    9f0a:	d109      	bne.n	9f20 <fRun_9DOF_GBY_KALMAN+0x1e4c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9f0c:	6f69      	ldr	r1, [r5, #116]	; 0x74
    9f0e:	1c38      	adds	r0, r7, #0
    9f10:	f7f6 ff40 	bl	d94 <__aeabi_fmul>
    9f14:	1c01      	adds	r1, r0, #0
    9f16:	1c30      	adds	r0, r6, #0
    9f18:	f7f6 fbec 	bl	6f4 <__aeabi_fadd>
    9f1c:	1c06      	adds	r6, r0, #0
    9f1e:	6160      	str	r0, [r4, #20]
    9f20:	23d4      	movs	r3, #212	; 0xd4
    9f22:	58e9      	ldr	r1, [r5, r3]
    9f24:	9804      	ldr	r0, [sp, #16]
    9f26:	f7f6 ff35 	bl	d94 <__aeabi_fmul>
    9f2a:	1c31      	adds	r1, r6, #0
    9f2c:	f000 ffb0 	bl	ae90 <fRun_9DOF_GBY_KALMAN+0x2dbc>
    9f30:	9805      	ldr	r0, [sp, #20]
    9f32:	2100      	movs	r1, #0
    9f34:	f7f6 fbb0 	bl	698 <__aeabi_fcmpeq>
    9f38:	2800      	cmp	r0, #0
    9f3a:	d101      	bne.n	9f40 <fRun_9DOF_GBY_KALMAN+0x1e6c>
    9f3c:	f000 fe2c 	bl	ab98 <fRun_9DOF_GBY_KALMAN+0x2ac4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9f40:	4650      	mov	r0, sl
    9f42:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9f44:	6829      	ldr	r1, [r5, #0]
    9f46:	9803      	ldr	r0, [sp, #12]
    9f48:	f7f6 ff24 	bl	d94 <__aeabi_fmul>
    9f4c:	2100      	movs	r1, #0
    9f4e:	f7f6 fbd1 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9f52:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9f54:	4680      	mov	r8, r0
    9f56:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9f58:	1c30      	adds	r0, r6, #0
    9f5a:	f7f6 fb9d 	bl	698 <__aeabi_fcmpeq>
    9f5e:	2800      	cmp	r0, #0
    9f60:	d109      	bne.n	9f76 <fRun_9DOF_GBY_KALMAN+0x1ea2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9f62:	6b29      	ldr	r1, [r5, #48]	; 0x30
    9f64:	1c30      	adds	r0, r6, #0
    9f66:	f7f6 ff15 	bl	d94 <__aeabi_fmul>
    9f6a:	1c01      	adds	r1, r0, #0
    9f6c:	4640      	mov	r0, r8
    9f6e:	f7f6 fbc1 	bl	6f4 <__aeabi_fadd>
    9f72:	4680      	mov	r8, r0
    9f74:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9f76:	1c38      	adds	r0, r7, #0
    9f78:	2100      	movs	r1, #0
    9f7a:	f7f6 fb8d 	bl	698 <__aeabi_fcmpeq>
    9f7e:	2800      	cmp	r0, #0
    9f80:	d109      	bne.n	9f96 <fRun_9DOF_GBY_KALMAN+0x1ec2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9f82:	6e29      	ldr	r1, [r5, #96]	; 0x60
    9f84:	1c38      	adds	r0, r7, #0
    9f86:	f7f6 ff05 	bl	d94 <__aeabi_fmul>
    9f8a:	1c01      	adds	r1, r0, #0
    9f8c:	4640      	mov	r0, r8
    9f8e:	f7f6 fbb1 	bl	6f4 <__aeabi_fadd>
    9f92:	4680      	mov	r8, r0
    9f94:	6020      	str	r0, [r4, #0]
    9f96:	22c0      	movs	r2, #192	; 0xc0
    9f98:	58a9      	ldr	r1, [r5, r2]
    9f9a:	9804      	ldr	r0, [sp, #16]
    9f9c:	f7f6 fefa 	bl	d94 <__aeabi_fmul>
    9fa0:	4641      	mov	r1, r8
    9fa2:	f7f6 fba7 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9fa6:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9fa8:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    9faa:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9fac:	6869      	ldr	r1, [r5, #4]
    9fae:	9803      	ldr	r0, [sp, #12]
    9fb0:	f7f6 fef0 	bl	d94 <__aeabi_fmul>
    9fb4:	2100      	movs	r1, #0
    9fb6:	f7f6 fb9d 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9fba:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9fbc:	4680      	mov	r8, r0
    9fbe:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9fc0:	1c30      	adds	r0, r6, #0
    9fc2:	f7f6 fb69 	bl	698 <__aeabi_fcmpeq>
    9fc6:	2800      	cmp	r0, #0
    9fc8:	d109      	bne.n	9fde <fRun_9DOF_GBY_KALMAN+0x1f0a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9fca:	6b69      	ldr	r1, [r5, #52]	; 0x34
    9fcc:	1c30      	adds	r0, r6, #0
    9fce:	f7f6 fee1 	bl	d94 <__aeabi_fmul>
    9fd2:	1c01      	adds	r1, r0, #0
    9fd4:	4640      	mov	r0, r8
    9fd6:	f7f6 fb8d 	bl	6f4 <__aeabi_fadd>
    9fda:	4680      	mov	r8, r0
    9fdc:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    9fde:	1c38      	adds	r0, r7, #0
    9fe0:	2100      	movs	r1, #0
    9fe2:	f7f6 fb59 	bl	698 <__aeabi_fcmpeq>
    9fe6:	2800      	cmp	r0, #0
    9fe8:	d109      	bne.n	9ffe <fRun_9DOF_GBY_KALMAN+0x1f2a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    9fea:	6e69      	ldr	r1, [r5, #100]	; 0x64
    9fec:	1c38      	adds	r0, r7, #0
    9fee:	f7f6 fed1 	bl	d94 <__aeabi_fmul>
    9ff2:	1c01      	adds	r1, r0, #0
    9ff4:	4640      	mov	r0, r8
    9ff6:	f7f6 fb7d 	bl	6f4 <__aeabi_fadd>
    9ffa:	4680      	mov	r8, r0
    9ffc:	6060      	str	r0, [r4, #4]
    9ffe:	23c4      	movs	r3, #196	; 0xc4
    a000:	58e9      	ldr	r1, [r5, r3]
    a002:	9804      	ldr	r0, [sp, #16]
    a004:	f7f6 fec6 	bl	d94 <__aeabi_fmul>
    a008:	4641      	mov	r1, r8
    a00a:	f7f6 fb73 	bl	6f4 <__aeabi_fadd>
    a00e:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a010:	4650      	mov	r0, sl
    a012:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a014:	68a9      	ldr	r1, [r5, #8]
    a016:	9803      	ldr	r0, [sp, #12]
    a018:	f7f6 febc 	bl	d94 <__aeabi_fmul>
    a01c:	2100      	movs	r1, #0
    a01e:	f7f6 fb69 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a022:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a024:	4680      	mov	r8, r0
    a026:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a028:	1c30      	adds	r0, r6, #0
    a02a:	f7f6 fb35 	bl	698 <__aeabi_fcmpeq>
    a02e:	2800      	cmp	r0, #0
    a030:	d109      	bne.n	a046 <fRun_9DOF_GBY_KALMAN+0x1f72>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a032:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    a034:	1c30      	adds	r0, r6, #0
    a036:	f7f6 fead 	bl	d94 <__aeabi_fmul>
    a03a:	1c01      	adds	r1, r0, #0
    a03c:	4640      	mov	r0, r8
    a03e:	f7f6 fb59 	bl	6f4 <__aeabi_fadd>
    a042:	4680      	mov	r8, r0
    a044:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a046:	1c38      	adds	r0, r7, #0
    a048:	2100      	movs	r1, #0
    a04a:	f7f6 fb25 	bl	698 <__aeabi_fcmpeq>
    a04e:	2800      	cmp	r0, #0
    a050:	d109      	bne.n	a066 <fRun_9DOF_GBY_KALMAN+0x1f92>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a052:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    a054:	1c38      	adds	r0, r7, #0
    a056:	f7f6 fe9d 	bl	d94 <__aeabi_fmul>
    a05a:	1c01      	adds	r1, r0, #0
    a05c:	4640      	mov	r0, r8
    a05e:	f7f6 fb49 	bl	6f4 <__aeabi_fadd>
    a062:	4680      	mov	r8, r0
    a064:	60a0      	str	r0, [r4, #8]
    a066:	23c8      	movs	r3, #200	; 0xc8
    a068:	58e9      	ldr	r1, [r5, r3]
    a06a:	9804      	ldr	r0, [sp, #16]
    a06c:	f7f6 fe92 	bl	d94 <__aeabi_fmul>
    a070:	4641      	mov	r1, r8
    a072:	f7f6 fb3f 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a076:	4651      	mov	r1, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a078:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a07a:	60e1      	str	r1, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a07c:	68e9      	ldr	r1, [r5, #12]
    a07e:	9803      	ldr	r0, [sp, #12]
    a080:	f7f6 fe88 	bl	d94 <__aeabi_fmul>
    a084:	2100      	movs	r1, #0
    a086:	f7f6 fb35 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a08a:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a08c:	4680      	mov	r8, r0
    a08e:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a090:	1c30      	adds	r0, r6, #0
    a092:	f7f6 fb01 	bl	698 <__aeabi_fcmpeq>
    a096:	2800      	cmp	r0, #0
    a098:	d109      	bne.n	a0ae <fRun_9DOF_GBY_KALMAN+0x1fda>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a09a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    a09c:	1c30      	adds	r0, r6, #0
    a09e:	f7f6 fe79 	bl	d94 <__aeabi_fmul>
    a0a2:	1c01      	adds	r1, r0, #0
    a0a4:	4640      	mov	r0, r8
    a0a6:	f7f6 fb25 	bl	6f4 <__aeabi_fadd>
    a0aa:	4680      	mov	r8, r0
    a0ac:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a0ae:	1c38      	adds	r0, r7, #0
    a0b0:	2100      	movs	r1, #0
    a0b2:	f7f6 faf1 	bl	698 <__aeabi_fcmpeq>
    a0b6:	2800      	cmp	r0, #0
    a0b8:	d109      	bne.n	a0ce <fRun_9DOF_GBY_KALMAN+0x1ffa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a0ba:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
    a0bc:	1c38      	adds	r0, r7, #0
    a0be:	f7f6 fe69 	bl	d94 <__aeabi_fmul>
    a0c2:	1c01      	adds	r1, r0, #0
    a0c4:	4640      	mov	r0, r8
    a0c6:	f7f6 fb15 	bl	6f4 <__aeabi_fadd>
    a0ca:	4680      	mov	r8, r0
    a0cc:	60e0      	str	r0, [r4, #12]
    a0ce:	23cc      	movs	r3, #204	; 0xcc
    a0d0:	58e9      	ldr	r1, [r5, r3]
    a0d2:	9804      	ldr	r0, [sp, #16]
    a0d4:	f7f6 fe5e 	bl	d94 <__aeabi_fmul>
    a0d8:	4641      	mov	r1, r8
    a0da:	f7f6 fb0b 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a0de:	4652      	mov	r2, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a0e0:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a0e2:	6122      	str	r2, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a0e4:	6929      	ldr	r1, [r5, #16]
    a0e6:	9803      	ldr	r0, [sp, #12]
    a0e8:	f7f6 fe54 	bl	d94 <__aeabi_fmul>
    a0ec:	2100      	movs	r1, #0
    a0ee:	f7f6 fb01 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a0f2:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a0f4:	4680      	mov	r8, r0
    a0f6:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a0f8:	1c30      	adds	r0, r6, #0
    a0fa:	f7f6 facd 	bl	698 <__aeabi_fcmpeq>
    a0fe:	2800      	cmp	r0, #0
    a100:	d109      	bne.n	a116 <fRun_9DOF_GBY_KALMAN+0x2042>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a102:	6c29      	ldr	r1, [r5, #64]	; 0x40
    a104:	1c30      	adds	r0, r6, #0
    a106:	f7f6 fe45 	bl	d94 <__aeabi_fmul>
    a10a:	1c01      	adds	r1, r0, #0
    a10c:	4640      	mov	r0, r8
    a10e:	f7f6 faf1 	bl	6f4 <__aeabi_fadd>
    a112:	4680      	mov	r8, r0
    a114:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a116:	1c38      	adds	r0, r7, #0
    a118:	2100      	movs	r1, #0
    a11a:	f7f6 fabd 	bl	698 <__aeabi_fcmpeq>
    a11e:	2800      	cmp	r0, #0
    a120:	d109      	bne.n	a136 <fRun_9DOF_GBY_KALMAN+0x2062>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a122:	6f29      	ldr	r1, [r5, #112]	; 0x70
    a124:	1c38      	adds	r0, r7, #0
    a126:	f7f6 fe35 	bl	d94 <__aeabi_fmul>
    a12a:	1c01      	adds	r1, r0, #0
    a12c:	4640      	mov	r0, r8
    a12e:	f7f6 fae1 	bl	6f4 <__aeabi_fadd>
    a132:	4680      	mov	r8, r0
    a134:	6120      	str	r0, [r4, #16]
    a136:	23d0      	movs	r3, #208	; 0xd0
    a138:	58e9      	ldr	r1, [r5, r3]
    a13a:	9804      	ldr	r0, [sp, #16]
    a13c:	f7f6 fe2a 	bl	d94 <__aeabi_fmul>
    a140:	4641      	mov	r1, r8
    a142:	f7f6 fad7 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a146:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a148:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a14a:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a14c:	6969      	ldr	r1, [r5, #20]
    a14e:	9803      	ldr	r0, [sp, #12]
    a150:	f7f6 fe20 	bl	d94 <__aeabi_fmul>
    a154:	2100      	movs	r1, #0
    a156:	f7f6 facd 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a15a:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a15c:	4680      	mov	r8, r0
    a15e:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a160:	1c30      	adds	r0, r6, #0
    a162:	f7f6 fa99 	bl	698 <__aeabi_fcmpeq>
    a166:	2800      	cmp	r0, #0
    a168:	d109      	bne.n	a17e <fRun_9DOF_GBY_KALMAN+0x20aa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a16a:	6c69      	ldr	r1, [r5, #68]	; 0x44
    a16c:	1c30      	adds	r0, r6, #0
    a16e:	f7f6 fe11 	bl	d94 <__aeabi_fmul>
    a172:	1c01      	adds	r1, r0, #0
    a174:	4640      	mov	r0, r8
    a176:	f7f6 fabd 	bl	6f4 <__aeabi_fadd>
    a17a:	4680      	mov	r8, r0
    a17c:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a17e:	1c38      	adds	r0, r7, #0
    a180:	2100      	movs	r1, #0
    a182:	f7f6 fa89 	bl	698 <__aeabi_fcmpeq>
    a186:	2800      	cmp	r0, #0
    a188:	d101      	bne.n	a18e <fRun_9DOF_GBY_KALMAN+0x20ba>
    a18a:	f000 ff57 	bl	b03c <fRun_9DOF_GBY_KALMAN+0x2f68>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a18e:	9804      	ldr	r0, [sp, #16]
    a190:	23d4      	movs	r3, #212	; 0xd4
    a192:	58e9      	ldr	r1, [r5, r3]
    a194:	f7f6 fdfe 	bl	d94 <__aeabi_fmul>
    a198:	4641      	mov	r1, r8
    a19a:	f7f6 faab 	bl	6f4 <__aeabi_fadd>
    a19e:	6160      	str	r0, [r4, #20]
    a1a0:	f7fe fcd8 	bl	8b54 <fRun_9DOF_GBY_KALMAN+0xa80>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1377
	pthisSV->fPPlus12x12[3][3] +=  pthisSV->fQvMM;
	pthisSV->fPPlus12x12[4][4] +=  pthisSV->fQvMM;
	pthisSV->fPPlus12x12[5][5] +=  pthisSV->fQvMM;

	// copy above diagonal elements of P+ (6x6 scratch sub-matrix) to below diagonal
	for (i = 1; i < 6; i++) 	
    a1a4:	4643      	mov	r3, r8
    a1a6:	3301      	adds	r3, #1
    a1a8:	b2db      	uxtb	r3, r3
    a1aa:	4698      	mov	r8, r3
    a1ac:	f7fe fb78 	bl	88a0 <fRun_9DOF_GBY_KALMAN+0x7cc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    a1b0:	23d9      	movs	r3, #217	; 0xd9
    a1b2:	465a      	mov	r2, fp
    a1b4:	009b      	lsls	r3, r3, #2
    a1b6:	58d1      	ldr	r1, [r2, r3]
    a1b8:	1c20      	adds	r0, r4, #0
    a1ba:	f7f6 fdeb 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    a1be:	23da      	movs	r3, #218	; 0xda
    a1c0:	465f      	mov	r7, fp
    a1c2:	009b      	lsls	r3, r3, #2
    a1c4:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    a1c6:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    a1c8:	4648      	mov	r0, r9
    a1ca:	f7f6 fde3 	bl	d94 <__aeabi_fmul>
    a1ce:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    a1d0:	1c28      	adds	r0, r5, #0
    a1d2:	f7f6 fa8f 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1465
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
    a1d6:	23db      	movs	r3, #219	; 0xdb
    a1d8:	009b      	lsls	r3, r3, #2
    a1da:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    a1dc:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1465
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
    a1de:	4650      	mov	r0, sl
    a1e0:	f7f6 fdd8 	bl	d94 <__aeabi_fmul>
    a1e4:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    a1e6:	1c28      	adds	r0, r5, #0
    a1e8:	f7f6 fa84 	bl	6f4 <__aeabi_fadd>
    a1ec:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    a1ee:	9805      	ldr	r0, [sp, #20]
    a1f0:	f7f6 fa80 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    a1f4:	23eb      	movs	r3, #235	; 0xeb
    a1f6:	009b      	lsls	r3, r3, #2
    a1f8:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    a1fa:	6738      	str	r0, [r7, #112]	; 0x70
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    a1fc:	1c20      	adds	r0, r4, #0
    a1fe:	f7f6 fdc9 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    a202:	23ec      	movs	r3, #236	; 0xec
    a204:	009b      	lsls	r3, r3, #2
    a206:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    a208:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    a20a:	4648      	mov	r0, r9
    a20c:	f7f6 fdc2 	bl	d94 <__aeabi_fmul>
    a210:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    a212:	1c28      	adds	r0, r5, #0
    a214:	f7f6 fa6e 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1468
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
    a218:	23ed      	movs	r3, #237	; 0xed
    a21a:	009b      	lsls	r3, r3, #2
    a21c:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    a21e:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1468
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
    a220:	4650      	mov	r0, sl
    a222:	f7f6 fdb7 	bl	d94 <__aeabi_fmul>
    a226:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    a228:	1c28      	adds	r0, r5, #0
    a22a:	f7f6 fa63 	bl	6f4 <__aeabi_fadd>
    a22e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    a230:	9807      	ldr	r0, [sp, #28]
    a232:	f7f6 fa5f 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    a236:	23fd      	movs	r3, #253	; 0xfd
    a238:	009b      	lsls	r3, r3, #2
    a23a:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    a23c:	67f8      	str	r0, [r7, #124]	; 0x7c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    a23e:	1c20      	adds	r0, r4, #0
    a240:	f7f6 fda8 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    a244:	23fe      	movs	r3, #254	; 0xfe
    a246:	009b      	lsls	r3, r3, #2
    a248:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    a24a:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    a24c:	4648      	mov	r0, r9
    a24e:	f7f6 fda1 	bl	d94 <__aeabi_fmul>
    a252:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    a254:	1c28      	adds	r0, r5, #0
    a256:	f7f6 fa4d 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1471
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 6][5] * pthisSV->fmErrSeMi[Z]; 
    a25a:	23ff      	movs	r3, #255	; 0xff
    a25c:	009b      	lsls	r3, r3, #2
    a25e:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    a260:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1471
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 6][5] * pthisSV->fmErrSeMi[Z]; 
    a262:	4650      	mov	r0, sl
    a264:	f7f6 fd96 	bl	d94 <__aeabi_fmul>
    a268:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    a26a:	1c28      	adds	r0, r5, #0
    a26c:	f7f6 fa42 	bl	6f4 <__aeabi_fadd>
    a270:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    a272:	9808      	ldr	r0, [sp, #32]
    a274:	f7f6 fa3e 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    a278:	23df      	movs	r3, #223	; 0xdf
    a27a:	009b      	lsls	r3, r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    a27c:	21a0      	movs	r1, #160	; 0xa0
    a27e:	5078      	str	r0, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    a280:	58f9      	ldr	r1, [r7, r3]
    a282:	1c20      	adds	r0, r4, #0
    a284:	f7f6 fd86 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    a288:	23e0      	movs	r3, #224	; 0xe0
    a28a:	009b      	lsls	r3, r3, #2
    a28c:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    a28e:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    a290:	4648      	mov	r0, r9
    a292:	f7f6 fd7f 	bl	d94 <__aeabi_fmul>
    a296:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    a298:	1c28      	adds	r0, r5, #0
    a29a:	f7f6 fa2b 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1465
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
    a29e:	23e1      	movs	r3, #225	; 0xe1
    a2a0:	009b      	lsls	r3, r3, #2
    a2a2:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    a2a4:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1465
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
    a2a6:	4650      	mov	r0, sl
    a2a8:	f7f6 fd74 	bl	d94 <__aeabi_fmul>
    a2ac:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    a2ae:	1c28      	adds	r0, r5, #0
    a2b0:	f7f6 fa20 	bl	6f4 <__aeabi_fadd>
    a2b4:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    a2b6:	980a      	ldr	r0, [sp, #40]	; 0x28
    a2b8:	f7f6 fa1c 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    a2bc:	23f1      	movs	r3, #241	; 0xf1
    a2be:	009b      	lsls	r3, r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    a2c0:	6778      	str	r0, [r7, #116]	; 0x74
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    a2c2:	58f9      	ldr	r1, [r7, r3]
    a2c4:	1c20      	adds	r0, r4, #0
    a2c6:	f7f6 fd65 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    a2ca:	23f2      	movs	r3, #242	; 0xf2
    a2cc:	009b      	lsls	r3, r3, #2
    a2ce:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    a2d0:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    a2d2:	4648      	mov	r0, r9
    a2d4:	f7f6 fd5e 	bl	d94 <__aeabi_fmul>
    a2d8:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    a2da:	1c28      	adds	r0, r5, #0
    a2dc:	f7f6 fa0a 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1468
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
    a2e0:	23f3      	movs	r3, #243	; 0xf3
    a2e2:	009b      	lsls	r3, r3, #2
    a2e4:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    a2e6:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1468
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
    a2e8:	4650      	mov	r0, sl
    a2ea:	f7f6 fd53 	bl	d94 <__aeabi_fmul>
    a2ee:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    a2f0:	1c28      	adds	r0, r5, #0
    a2f2:	f7f6 f9ff 	bl	6f4 <__aeabi_fadd>
    a2f6:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    a2f8:	980d      	ldr	r0, [sp, #52]	; 0x34
    a2fa:	f7f6 f9fb 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    a2fe:	4bc2      	ldr	r3, [pc, #776]	; (a608 <fRun_9DOF_GBY_KALMAN+0x2534>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    a300:	2280      	movs	r2, #128	; 0x80
    a302:	50b8      	str	r0, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    a304:	58f9      	ldr	r1, [r7, r3]
    a306:	1c20      	adds	r0, r4, #0
    a308:	f7f6 fd44 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    a30c:	2382      	movs	r3, #130	; 0x82
    a30e:	00db      	lsls	r3, r3, #3
    a310:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    a312:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    a314:	4648      	mov	r0, r9
    a316:	f7f6 fd3d 	bl	d94 <__aeabi_fmul>
    a31a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    a31c:	1c28      	adds	r0, r5, #0
    a31e:	f7f6 f9e9 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1471
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 6][5] * pthisSV->fmErrSeMi[Z]; 
    a322:	4bba      	ldr	r3, [pc, #744]	; (a60c <fRun_9DOF_GBY_KALMAN+0x2538>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    a324:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1471
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 6][5] * pthisSV->fmErrSeMi[Z]; 
    a326:	58f9      	ldr	r1, [r7, r3]
    a328:	4650      	mov	r0, sl
    a32a:	f7f6 fd33 	bl	d94 <__aeabi_fmul>
    a32e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    a330:	1c28      	adds	r0, r5, #0
    a332:	f7f6 f9df 	bl	6f4 <__aeabi_fadd>
    a336:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    a338:	9813      	ldr	r0, [sp, #76]	; 0x4c
    a33a:	f7f6 f9db 	bl	6f4 <__aeabi_fadd>
    a33e:	23a4      	movs	r3, #164	; 0xa4
    a340:	50f8      	str	r0, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    a342:	23e5      	movs	r3, #229	; 0xe5
    a344:	009b      	lsls	r3, r3, #2
    a346:	58f9      	ldr	r1, [r7, r3]
    a348:	1c20      	adds	r0, r4, #0
    a34a:	f7f6 fd23 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    a34e:	23e6      	movs	r3, #230	; 0xe6
    a350:	009b      	lsls	r3, r3, #2
    a352:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    a354:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    a356:	4648      	mov	r0, r9
    a358:	f7f6 fd1c 	bl	d94 <__aeabi_fmul>
    a35c:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    a35e:	1c28      	adds	r0, r5, #0
    a360:	f7f6 f9c8 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1465
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
    a364:	23e7      	movs	r3, #231	; 0xe7
    a366:	009b      	lsls	r3, r3, #2
    a368:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    a36a:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1465
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
    a36c:	4650      	mov	r0, sl
    a36e:	f7f6 fd11 	bl	d94 <__aeabi_fmul>
    a372:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1464
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
    a374:	1c28      	adds	r0, r5, #0
    a376:	f7f6 f9bd 	bl	6f4 <__aeabi_fadd>
    a37a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    a37c:	9814      	ldr	r0, [sp, #80]	; 0x50
    a37e:	f7f6 f9b9 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    a382:	23f7      	movs	r3, #247	; 0xf7
    a384:	009b      	lsls	r3, r3, #2
    a386:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1463
	// add the remaining magnetic error terms if there is calibration and no magnetic jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
	{
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
    a388:	67b8      	str	r0, [r7, #120]	; 0x78
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    a38a:	1c20      	adds	r0, r4, #0
    a38c:	f7f6 fd02 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    a390:	23f8      	movs	r3, #248	; 0xf8
    a392:	009b      	lsls	r3, r3, #2
    a394:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    a396:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    a398:	4648      	mov	r0, r9
    a39a:	f7f6 fcfb 	bl	d94 <__aeabi_fmul>
    a39e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    a3a0:	1c28      	adds	r0, r5, #0
    a3a2:	f7f6 f9a7 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1468
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
    a3a6:	23f9      	movs	r3, #249	; 0xf9
    a3a8:	009b      	lsls	r3, r3, #2
    a3aa:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    a3ac:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1468
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
    a3ae:	4650      	mov	r0, sl
    a3b0:	f7f6 fcf0 	bl	d94 <__aeabi_fmul>
    a3b4:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1467
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
    a3b6:	1c28      	adds	r0, r5, #0
    a3b8:	f7f6 f99c 	bl	6f4 <__aeabi_fadd>
    a3bc:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    a3be:	9815      	ldr	r0, [sp, #84]	; 0x54
    a3c0:	f7f6 f998 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    a3c4:	4b92      	ldr	r3, [pc, #584]	; (a610 <fRun_9DOF_GBY_KALMAN+0x253c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1466
		for (i = X; i <= Z; i++)
		{
			pthisSV->fThErrPl[i] += pthisSV->fK12x6[i][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
    a3c6:	2184      	movs	r1, #132	; 0x84
    a3c8:	5078      	str	r0, [r7, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    a3ca:	58f9      	ldr	r1, [r7, r3]
    a3cc:	1c20      	adds	r0, r4, #0
    a3ce:	f7f6 fce1 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    a3d2:	2385      	movs	r3, #133	; 0x85
    a3d4:	00db      	lsls	r3, r3, #3
    a3d6:	58f9      	ldr	r1, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    a3d8:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    a3da:	4648      	mov	r0, r9
    a3dc:	f7f6 fcda 	bl	d94 <__aeabi_fmul>
    a3e0:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    a3e2:	1c20      	adds	r0, r4, #0
    a3e4:	f7f6 f986 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1471
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 6][5] * pthisSV->fmErrSeMi[Z]; 
    a3e8:	4b8a      	ldr	r3, [pc, #552]	; (a614 <fRun_9DOF_GBY_KALMAN+0x2540>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    a3ea:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1471
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 6][5] * pthisSV->fmErrSeMi[Z]; 
    a3ec:	58f9      	ldr	r1, [r7, r3]
    a3ee:	4650      	mov	r0, sl
    a3f0:	f7f6 fcd0 	bl	d94 <__aeabi_fmul>
    a3f4:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1470
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 6][4] * pthisSV->fmErrSeMi[Y] +
    a3f6:	1c20      	adds	r0, r4, #0
    a3f8:	f7f6 f97c 	bl	6f4 <__aeabi_fadd>
    a3fc:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1469
					pthisSV->fK12x6[i][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i][5] * pthisSV->fmErrSeMi[Z];
			pthisSV->fbErrPl[i] += pthisSV->fK12x6[i + 3][3] * pthisSV->fmErrSeMi[X] +
					pthisSV->fK12x6[i + 3][4] * pthisSV->fmErrSeMi[Y] +
					pthisSV->fK12x6[i + 3][5] * pthisSV->fmErrSeMi[Z]; 
			pthisSV->faErrSePl[i] += pthisSV->fK12x6[i + 6][3] * pthisSV->fmErrSeMi[X] +
    a3fe:	4640      	mov	r0, r8
    a400:	f7f6 f978 	bl	6f4 <__aeabi_fadd>
    a404:	22a8      	movs	r2, #168	; 0xa8
    a406:	50b8      	str	r0, [r7, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1456
	}

	// set the magnetic jamming flag if there is a significant magnetic error power after calibration
	ftmp = pthisSV->fdErrSePl[X] * pthisSV->fdErrSePl[X] + pthisSV->fdErrSePl[Y] * pthisSV->fdErrSePl[Y] +
			pthisSV->fdErrSePl[Z] * pthisSV->fdErrSePl[Z];
	iMagJamming = (pthisMagCal->iValidMagCal) && (ftmp > pthisMagCal->fFourBsq);
    a408:	2400      	movs	r4, #0
    a40a:	9404      	str	r4, [sp, #16]
    a40c:	f7fe fddd 	bl	8fca <fRun_9DOF_GBY_KALMAN+0xef6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a410:	4651      	mov	r1, sl
    a412:	6021      	str	r1, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a414:	1c30      	adds	r0, r6, #0
    a416:	2100      	movs	r1, #0
    a418:	f7f6 f93e 	bl	698 <__aeabi_fcmpeq>
    a41c:	2800      	cmp	r0, #0
    a41e:	d101      	bne.n	a424 <fRun_9DOF_GBY_KALMAN+0x2350>
    a420:	f000 fe01 	bl	b026 <fRun_9DOF_GBY_KALMAN+0x2f52>
    a424:	2200      	movs	r2, #0
    a426:	4690      	mov	r8, r2
    a428:	1c38      	adds	r0, r7, #0
    a42a:	2100      	movs	r1, #0
    a42c:	f7f6 f934 	bl	698 <__aeabi_fcmpeq>
    a430:	2800      	cmp	r0, #0
    a432:	d109      	bne.n	a448 <fRun_9DOF_GBY_KALMAN+0x2374>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a434:	6e29      	ldr	r1, [r5, #96]	; 0x60
    a436:	1c38      	adds	r0, r7, #0
    a438:	f7f6 fcac 	bl	d94 <__aeabi_fmul>
    a43c:	1c01      	adds	r1, r0, #0
    a43e:	4640      	mov	r0, r8
    a440:	f7f6 f958 	bl	6f4 <__aeabi_fadd>
    a444:	4680      	mov	r8, r0
    a446:	6020      	str	r0, [r4, #0]
    a448:	2390      	movs	r3, #144	; 0x90
    a44a:	58e9      	ldr	r1, [r5, r3]
    a44c:	9805      	ldr	r0, [sp, #20]
    a44e:	f7f6 fca1 	bl	d94 <__aeabi_fmul>
    a452:	4641      	mov	r1, r8
    a454:	f7f6 f94e 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a458:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a45a:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a45c:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a45e:	1c30      	adds	r0, r6, #0
    a460:	2100      	movs	r1, #0
    a462:	f7f6 f919 	bl	698 <__aeabi_fcmpeq>
    a466:	2800      	cmp	r0, #0
    a468:	d001      	beq.n	a46e <fRun_9DOF_GBY_KALMAN+0x239a>
    a46a:	f001 fb41 	bl	baf0 <fRun_9DOF_GBY_KALMAN+0x3a1c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a46e:	6b69      	ldr	r1, [r5, #52]	; 0x34
    a470:	1c30      	adds	r0, r6, #0
    a472:	f7f6 fc8f 	bl	d94 <__aeabi_fmul>
    a476:	2100      	movs	r1, #0
    a478:	f7f6 f93c 	bl	6f4 <__aeabi_fadd>
    a47c:	4680      	mov	r8, r0
    a47e:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a480:	1c38      	adds	r0, r7, #0
    a482:	2100      	movs	r1, #0
    a484:	f7f6 f908 	bl	698 <__aeabi_fcmpeq>
    a488:	2800      	cmp	r0, #0
    a48a:	d109      	bne.n	a4a0 <fRun_9DOF_GBY_KALMAN+0x23cc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a48c:	6e69      	ldr	r1, [r5, #100]	; 0x64
    a48e:	1c38      	adds	r0, r7, #0
    a490:	f7f6 fc80 	bl	d94 <__aeabi_fmul>
    a494:	1c01      	adds	r1, r0, #0
    a496:	4640      	mov	r0, r8
    a498:	f7f6 f92c 	bl	6f4 <__aeabi_fadd>
    a49c:	4680      	mov	r8, r0
    a49e:	6060      	str	r0, [r4, #4]
    a4a0:	2394      	movs	r3, #148	; 0x94
    a4a2:	58e9      	ldr	r1, [r5, r3]
    a4a4:	9805      	ldr	r0, [sp, #20]
    a4a6:	f7f6 fc75 	bl	d94 <__aeabi_fmul>
    a4aa:	4641      	mov	r1, r8
    a4ac:	f7f6 f922 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a4b0:	4651      	mov	r1, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a4b2:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a4b4:	60a1      	str	r1, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a4b6:	1c30      	adds	r0, r6, #0
    a4b8:	2100      	movs	r1, #0
    a4ba:	f7f6 f8ed 	bl	698 <__aeabi_fcmpeq>
    a4be:	2800      	cmp	r0, #0
    a4c0:	d001      	beq.n	a4c6 <fRun_9DOF_GBY_KALMAN+0x23f2>
    a4c2:	f001 fb11 	bl	bae8 <fRun_9DOF_GBY_KALMAN+0x3a14>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a4c6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    a4c8:	1c30      	adds	r0, r6, #0
    a4ca:	f7f6 fc63 	bl	d94 <__aeabi_fmul>
    a4ce:	2100      	movs	r1, #0
    a4d0:	f7f6 f910 	bl	6f4 <__aeabi_fadd>
    a4d4:	4680      	mov	r8, r0
    a4d6:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a4d8:	1c38      	adds	r0, r7, #0
    a4da:	2100      	movs	r1, #0
    a4dc:	f7f6 f8dc 	bl	698 <__aeabi_fcmpeq>
    a4e0:	2800      	cmp	r0, #0
    a4e2:	d109      	bne.n	a4f8 <fRun_9DOF_GBY_KALMAN+0x2424>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a4e4:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    a4e6:	1c38      	adds	r0, r7, #0
    a4e8:	f7f6 fc54 	bl	d94 <__aeabi_fmul>
    a4ec:	1c01      	adds	r1, r0, #0
    a4ee:	4640      	mov	r0, r8
    a4f0:	f7f6 f900 	bl	6f4 <__aeabi_fadd>
    a4f4:	4680      	mov	r8, r0
    a4f6:	60a0      	str	r0, [r4, #8]
    a4f8:	2398      	movs	r3, #152	; 0x98
    a4fa:	58e9      	ldr	r1, [r5, r3]
    a4fc:	9805      	ldr	r0, [sp, #20]
    a4fe:	f7f6 fc49 	bl	d94 <__aeabi_fmul>
    a502:	4641      	mov	r1, r8
    a504:	f7f6 f8f6 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a508:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a50a:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a50c:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a50e:	1c30      	adds	r0, r6, #0
    a510:	2100      	movs	r1, #0
    a512:	f7f6 f8c1 	bl	698 <__aeabi_fcmpeq>
    a516:	2800      	cmp	r0, #0
    a518:	d001      	beq.n	a51e <fRun_9DOF_GBY_KALMAN+0x244a>
    a51a:	f001 fae1 	bl	bae0 <fRun_9DOF_GBY_KALMAN+0x3a0c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a51e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    a520:	1c30      	adds	r0, r6, #0
    a522:	f7f6 fc37 	bl	d94 <__aeabi_fmul>
    a526:	2100      	movs	r1, #0
    a528:	f7f6 f8e4 	bl	6f4 <__aeabi_fadd>
    a52c:	4680      	mov	r8, r0
    a52e:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a530:	1c38      	adds	r0, r7, #0
    a532:	2100      	movs	r1, #0
    a534:	f7f6 f8b0 	bl	698 <__aeabi_fcmpeq>
    a538:	2800      	cmp	r0, #0
    a53a:	d109      	bne.n	a550 <fRun_9DOF_GBY_KALMAN+0x247c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a53c:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
    a53e:	1c38      	adds	r0, r7, #0
    a540:	f7f6 fc28 	bl	d94 <__aeabi_fmul>
    a544:	1c01      	adds	r1, r0, #0
    a546:	4640      	mov	r0, r8
    a548:	f7f6 f8d4 	bl	6f4 <__aeabi_fadd>
    a54c:	4680      	mov	r8, r0
    a54e:	60e0      	str	r0, [r4, #12]
    a550:	239c      	movs	r3, #156	; 0x9c
    a552:	58e9      	ldr	r1, [r5, r3]
    a554:	9805      	ldr	r0, [sp, #20]
    a556:	f7f6 fc1d 	bl	d94 <__aeabi_fmul>
    a55a:	4641      	mov	r1, r8
    a55c:	f7f6 f8ca 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a560:	4651      	mov	r1, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a562:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a564:	6121      	str	r1, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a566:	1c30      	adds	r0, r6, #0
    a568:	2100      	movs	r1, #0
    a56a:	f7f6 f895 	bl	698 <__aeabi_fcmpeq>
    a56e:	2800      	cmp	r0, #0
    a570:	d001      	beq.n	a576 <fRun_9DOF_GBY_KALMAN+0x24a2>
    a572:	f001 fab1 	bl	bad8 <fRun_9DOF_GBY_KALMAN+0x3a04>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a576:	6c29      	ldr	r1, [r5, #64]	; 0x40
    a578:	1c30      	adds	r0, r6, #0
    a57a:	f7f6 fc0b 	bl	d94 <__aeabi_fmul>
    a57e:	2100      	movs	r1, #0
    a580:	f7f6 f8b8 	bl	6f4 <__aeabi_fadd>
    a584:	4680      	mov	r8, r0
    a586:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a588:	1c38      	adds	r0, r7, #0
    a58a:	2100      	movs	r1, #0
    a58c:	f7f6 f884 	bl	698 <__aeabi_fcmpeq>
    a590:	2800      	cmp	r0, #0
    a592:	d109      	bne.n	a5a8 <fRun_9DOF_GBY_KALMAN+0x24d4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a594:	6f29      	ldr	r1, [r5, #112]	; 0x70
    a596:	1c38      	adds	r0, r7, #0
    a598:	f7f6 fbfc 	bl	d94 <__aeabi_fmul>
    a59c:	1c01      	adds	r1, r0, #0
    a59e:	4640      	mov	r0, r8
    a5a0:	f7f6 f8a8 	bl	6f4 <__aeabi_fadd>
    a5a4:	4680      	mov	r8, r0
    a5a6:	6120      	str	r0, [r4, #16]
    a5a8:	23a0      	movs	r3, #160	; 0xa0
    a5aa:	58e9      	ldr	r1, [r5, r3]
    a5ac:	9805      	ldr	r0, [sp, #20]
    a5ae:	f7f6 fbf1 	bl	d94 <__aeabi_fmul>
    a5b2:	4641      	mov	r1, r8
    a5b4:	f7f6 f89e 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a5b8:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a5ba:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a5bc:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a5be:	1c30      	adds	r0, r6, #0
    a5c0:	2100      	movs	r1, #0
    a5c2:	f7f6 f869 	bl	698 <__aeabi_fcmpeq>
    a5c6:	2800      	cmp	r0, #0
    a5c8:	d001      	beq.n	a5ce <fRun_9DOF_GBY_KALMAN+0x24fa>
    a5ca:	f001 fa7b 	bl	bac4 <fRun_9DOF_GBY_KALMAN+0x39f0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a5ce:	6c69      	ldr	r1, [r5, #68]	; 0x44
    a5d0:	1c30      	adds	r0, r6, #0
    a5d2:	f7f6 fbdf 	bl	d94 <__aeabi_fmul>
    a5d6:	2100      	movs	r1, #0
    a5d8:	f7f6 f88c 	bl	6f4 <__aeabi_fadd>
    a5dc:	1c06      	adds	r6, r0, #0
    a5de:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a5e0:	1c38      	adds	r0, r7, #0
    a5e2:	2100      	movs	r1, #0
    a5e4:	f7f6 f858 	bl	698 <__aeabi_fcmpeq>
    a5e8:	2800      	cmp	r0, #0
    a5ea:	d109      	bne.n	a600 <fRun_9DOF_GBY_KALMAN+0x252c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a5ec:	6f69      	ldr	r1, [r5, #116]	; 0x74
    a5ee:	1c38      	adds	r0, r7, #0
    a5f0:	f7f6 fbd0 	bl	d94 <__aeabi_fmul>
    a5f4:	1c01      	adds	r1, r0, #0
    a5f6:	1c30      	adds	r0, r6, #0
    a5f8:	f7f6 f87c 	bl	6f4 <__aeabi_fadd>
    a5fc:	1c06      	adds	r6, r0, #0
    a5fe:	6160      	str	r0, [r4, #20]
    a600:	9805      	ldr	r0, [sp, #20]
    a602:	23a4      	movs	r3, #164	; 0xa4
    a604:	e26f      	b.n	aae6 <fRun_9DOF_GBY_KALMAN+0x2a12>
    a606:	46c0      	nop			; (mov r8, r8)
    a608:	0000040c 	.word	0x0000040c
    a60c:	00000414 	.word	0x00000414
    a610:	00000424 	.word	0x00000424
    a614:	0000042c 	.word	0x0000042c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a618:	4652      	mov	r2, sl
    a61a:	6022      	str	r2, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a61c:	6829      	ldr	r1, [r5, #0]
    a61e:	9803      	ldr	r0, [sp, #12]
    a620:	f7f6 fbb8 	bl	d94 <__aeabi_fmul>
    a624:	2100      	movs	r1, #0
    a626:	f7f6 f865 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a62a:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a62c:	4680      	mov	r8, r0
    a62e:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a630:	1c30      	adds	r0, r6, #0
    a632:	f7f6 f831 	bl	698 <__aeabi_fcmpeq>
    a636:	2800      	cmp	r0, #0
    a638:	d109      	bne.n	a64e <fRun_9DOF_GBY_KALMAN+0x257a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a63a:	6b29      	ldr	r1, [r5, #48]	; 0x30
    a63c:	1c30      	adds	r0, r6, #0
    a63e:	f7f6 fba9 	bl	d94 <__aeabi_fmul>
    a642:	1c01      	adds	r1, r0, #0
    a644:	4640      	mov	r0, r8
    a646:	f7f6 f855 	bl	6f4 <__aeabi_fadd>
    a64a:	4680      	mov	r8, r0
    a64c:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a64e:	1c38      	adds	r0, r7, #0
    a650:	2100      	movs	r1, #0
    a652:	f7f6 f821 	bl	698 <__aeabi_fcmpeq>
    a656:	2800      	cmp	r0, #0
    a658:	d109      	bne.n	a66e <fRun_9DOF_GBY_KALMAN+0x259a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a65a:	6e29      	ldr	r1, [r5, #96]	; 0x60
    a65c:	1c38      	adds	r0, r7, #0
    a65e:	f7f6 fb99 	bl	d94 <__aeabi_fmul>
    a662:	1c01      	adds	r1, r0, #0
    a664:	4640      	mov	r0, r8
    a666:	f7f6 f845 	bl	6f4 <__aeabi_fadd>
    a66a:	4680      	mov	r8, r0
    a66c:	6020      	str	r0, [r4, #0]
    a66e:	2390      	movs	r3, #144	; 0x90
    a670:	58e9      	ldr	r1, [r5, r3]
    a672:	9805      	ldr	r0, [sp, #20]
    a674:	f7f6 fb8e 	bl	d94 <__aeabi_fmul>
    a678:	4641      	mov	r1, r8
    a67a:	f7f6 f83b 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a67e:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a680:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a682:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a684:	6869      	ldr	r1, [r5, #4]
    a686:	9803      	ldr	r0, [sp, #12]
    a688:	f7f6 fb84 	bl	d94 <__aeabi_fmul>
    a68c:	2100      	movs	r1, #0
    a68e:	f7f6 f831 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a692:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a694:	4680      	mov	r8, r0
    a696:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a698:	1c30      	adds	r0, r6, #0
    a69a:	f7f5 fffd 	bl	698 <__aeabi_fcmpeq>
    a69e:	2800      	cmp	r0, #0
    a6a0:	d109      	bne.n	a6b6 <fRun_9DOF_GBY_KALMAN+0x25e2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a6a2:	6b69      	ldr	r1, [r5, #52]	; 0x34
    a6a4:	1c30      	adds	r0, r6, #0
    a6a6:	f7f6 fb75 	bl	d94 <__aeabi_fmul>
    a6aa:	1c01      	adds	r1, r0, #0
    a6ac:	4640      	mov	r0, r8
    a6ae:	f7f6 f821 	bl	6f4 <__aeabi_fadd>
    a6b2:	4680      	mov	r8, r0
    a6b4:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a6b6:	1c38      	adds	r0, r7, #0
    a6b8:	2100      	movs	r1, #0
    a6ba:	f7f5 ffed 	bl	698 <__aeabi_fcmpeq>
    a6be:	2800      	cmp	r0, #0
    a6c0:	d109      	bne.n	a6d6 <fRun_9DOF_GBY_KALMAN+0x2602>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a6c2:	6e69      	ldr	r1, [r5, #100]	; 0x64
    a6c4:	1c38      	adds	r0, r7, #0
    a6c6:	f7f6 fb65 	bl	d94 <__aeabi_fmul>
    a6ca:	1c01      	adds	r1, r0, #0
    a6cc:	4640      	mov	r0, r8
    a6ce:	f7f6 f811 	bl	6f4 <__aeabi_fadd>
    a6d2:	4680      	mov	r8, r0
    a6d4:	6060      	str	r0, [r4, #4]
    a6d6:	2394      	movs	r3, #148	; 0x94
    a6d8:	58e9      	ldr	r1, [r5, r3]
    a6da:	9805      	ldr	r0, [sp, #20]
    a6dc:	f7f6 fb5a 	bl	d94 <__aeabi_fmul>
    a6e0:	4641      	mov	r1, r8
    a6e2:	f7f6 f807 	bl	6f4 <__aeabi_fadd>
    a6e6:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a6e8:	4650      	mov	r0, sl
    a6ea:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a6ec:	68a9      	ldr	r1, [r5, #8]
    a6ee:	9803      	ldr	r0, [sp, #12]
    a6f0:	f7f6 fb50 	bl	d94 <__aeabi_fmul>
    a6f4:	2100      	movs	r1, #0
    a6f6:	f7f5 fffd 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a6fa:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a6fc:	4680      	mov	r8, r0
    a6fe:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a700:	1c30      	adds	r0, r6, #0
    a702:	f7f5 ffc9 	bl	698 <__aeabi_fcmpeq>
    a706:	2800      	cmp	r0, #0
    a708:	d109      	bne.n	a71e <fRun_9DOF_GBY_KALMAN+0x264a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a70a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    a70c:	1c30      	adds	r0, r6, #0
    a70e:	f7f6 fb41 	bl	d94 <__aeabi_fmul>
    a712:	1c01      	adds	r1, r0, #0
    a714:	4640      	mov	r0, r8
    a716:	f7f5 ffed 	bl	6f4 <__aeabi_fadd>
    a71a:	4680      	mov	r8, r0
    a71c:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a71e:	1c38      	adds	r0, r7, #0
    a720:	2100      	movs	r1, #0
    a722:	f7f5 ffb9 	bl	698 <__aeabi_fcmpeq>
    a726:	2800      	cmp	r0, #0
    a728:	d109      	bne.n	a73e <fRun_9DOF_GBY_KALMAN+0x266a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a72a:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    a72c:	1c38      	adds	r0, r7, #0
    a72e:	f7f6 fb31 	bl	d94 <__aeabi_fmul>
    a732:	1c01      	adds	r1, r0, #0
    a734:	4640      	mov	r0, r8
    a736:	f7f5 ffdd 	bl	6f4 <__aeabi_fadd>
    a73a:	4680      	mov	r8, r0
    a73c:	60a0      	str	r0, [r4, #8]
    a73e:	2398      	movs	r3, #152	; 0x98
    a740:	58e9      	ldr	r1, [r5, r3]
    a742:	9805      	ldr	r0, [sp, #20]
    a744:	f7f6 fb26 	bl	d94 <__aeabi_fmul>
    a748:	4641      	mov	r1, r8
    a74a:	f7f5 ffd3 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a74e:	4651      	mov	r1, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a750:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a752:	60e1      	str	r1, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a754:	68e9      	ldr	r1, [r5, #12]
    a756:	9803      	ldr	r0, [sp, #12]
    a758:	f7f6 fb1c 	bl	d94 <__aeabi_fmul>
    a75c:	2100      	movs	r1, #0
    a75e:	f7f5 ffc9 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a762:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a764:	4680      	mov	r8, r0
    a766:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a768:	1c30      	adds	r0, r6, #0
    a76a:	f7f5 ff95 	bl	698 <__aeabi_fcmpeq>
    a76e:	2800      	cmp	r0, #0
    a770:	d109      	bne.n	a786 <fRun_9DOF_GBY_KALMAN+0x26b2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a772:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    a774:	1c30      	adds	r0, r6, #0
    a776:	f7f6 fb0d 	bl	d94 <__aeabi_fmul>
    a77a:	1c01      	adds	r1, r0, #0
    a77c:	4640      	mov	r0, r8
    a77e:	f7f5 ffb9 	bl	6f4 <__aeabi_fadd>
    a782:	4680      	mov	r8, r0
    a784:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a786:	1c38      	adds	r0, r7, #0
    a788:	2100      	movs	r1, #0
    a78a:	f7f5 ff85 	bl	698 <__aeabi_fcmpeq>
    a78e:	2800      	cmp	r0, #0
    a790:	d109      	bne.n	a7a6 <fRun_9DOF_GBY_KALMAN+0x26d2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a792:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
    a794:	1c38      	adds	r0, r7, #0
    a796:	f7f6 fafd 	bl	d94 <__aeabi_fmul>
    a79a:	1c01      	adds	r1, r0, #0
    a79c:	4640      	mov	r0, r8
    a79e:	f7f5 ffa9 	bl	6f4 <__aeabi_fadd>
    a7a2:	4680      	mov	r8, r0
    a7a4:	60e0      	str	r0, [r4, #12]
    a7a6:	239c      	movs	r3, #156	; 0x9c
    a7a8:	58e9      	ldr	r1, [r5, r3]
    a7aa:	9805      	ldr	r0, [sp, #20]
    a7ac:	f7f6 faf2 	bl	d94 <__aeabi_fmul>
    a7b0:	4641      	mov	r1, r8
    a7b2:	f7f5 ff9f 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a7b6:	4652      	mov	r2, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a7b8:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a7ba:	6122      	str	r2, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a7bc:	6929      	ldr	r1, [r5, #16]
    a7be:	9803      	ldr	r0, [sp, #12]
    a7c0:	f7f6 fae8 	bl	d94 <__aeabi_fmul>
    a7c4:	2100      	movs	r1, #0
    a7c6:	f7f5 ff95 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a7ca:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a7cc:	4680      	mov	r8, r0
    a7ce:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a7d0:	1c30      	adds	r0, r6, #0
    a7d2:	f7f5 ff61 	bl	698 <__aeabi_fcmpeq>
    a7d6:	2800      	cmp	r0, #0
    a7d8:	d109      	bne.n	a7ee <fRun_9DOF_GBY_KALMAN+0x271a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a7da:	6c29      	ldr	r1, [r5, #64]	; 0x40
    a7dc:	1c30      	adds	r0, r6, #0
    a7de:	f7f6 fad9 	bl	d94 <__aeabi_fmul>
    a7e2:	1c01      	adds	r1, r0, #0
    a7e4:	4640      	mov	r0, r8
    a7e6:	f7f5 ff85 	bl	6f4 <__aeabi_fadd>
    a7ea:	4680      	mov	r8, r0
    a7ec:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a7ee:	1c38      	adds	r0, r7, #0
    a7f0:	2100      	movs	r1, #0
    a7f2:	f7f5 ff51 	bl	698 <__aeabi_fcmpeq>
    a7f6:	2800      	cmp	r0, #0
    a7f8:	d109      	bne.n	a80e <fRun_9DOF_GBY_KALMAN+0x273a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a7fa:	6f29      	ldr	r1, [r5, #112]	; 0x70
    a7fc:	1c38      	adds	r0, r7, #0
    a7fe:	f7f6 fac9 	bl	d94 <__aeabi_fmul>
    a802:	1c01      	adds	r1, r0, #0
    a804:	4640      	mov	r0, r8
    a806:	f7f5 ff75 	bl	6f4 <__aeabi_fadd>
    a80a:	4680      	mov	r8, r0
    a80c:	6120      	str	r0, [r4, #16]
    a80e:	23a0      	movs	r3, #160	; 0xa0
    a810:	58e9      	ldr	r1, [r5, r3]
    a812:	9805      	ldr	r0, [sp, #20]
    a814:	f7f6 fabe 	bl	d94 <__aeabi_fmul>
    a818:	4641      	mov	r1, r8
    a81a:	f7f5 ff6b 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a81e:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a820:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a822:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a824:	6969      	ldr	r1, [r5, #20]
    a826:	9803      	ldr	r0, [sp, #12]
    a828:	f7f6 fab4 	bl	d94 <__aeabi_fmul>
    a82c:	2100      	movs	r1, #0
    a82e:	f7f5 ff61 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a832:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a834:	4680      	mov	r8, r0
    a836:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a838:	1c30      	adds	r0, r6, #0
    a83a:	f7f5 ff2d 	bl	698 <__aeabi_fcmpeq>
    a83e:	2800      	cmp	r0, #0
    a840:	d109      	bne.n	a856 <fRun_9DOF_GBY_KALMAN+0x2782>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a842:	6c69      	ldr	r1, [r5, #68]	; 0x44
    a844:	1c30      	adds	r0, r6, #0
    a846:	f7f6 faa5 	bl	d94 <__aeabi_fmul>
    a84a:	1c01      	adds	r1, r0, #0
    a84c:	4640      	mov	r0, r8
    a84e:	f7f5 ff51 	bl	6f4 <__aeabi_fadd>
    a852:	4680      	mov	r8, r0
    a854:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a856:	1c38      	adds	r0, r7, #0
    a858:	2100      	movs	r1, #0
    a85a:	f7f5 ff1d 	bl	698 <__aeabi_fcmpeq>
    a85e:	2800      	cmp	r0, #0
    a860:	d109      	bne.n	a876 <fRun_9DOF_GBY_KALMAN+0x27a2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a862:	6f69      	ldr	r1, [r5, #116]	; 0x74
    a864:	1c38      	adds	r0, r7, #0
    a866:	f7f6 fa95 	bl	d94 <__aeabi_fmul>
    a86a:	1c01      	adds	r1, r0, #0
    a86c:	4640      	mov	r0, r8
    a86e:	f7f5 ff41 	bl	6f4 <__aeabi_fadd>
    a872:	4680      	mov	r8, r0
    a874:	6160      	str	r0, [r4, #20]
    a876:	9805      	ldr	r0, [sp, #20]
    a878:	23a4      	movs	r3, #164	; 0xa4
    a87a:	e48a      	b.n	a192 <fRun_9DOF_GBY_KALMAN+0x20be>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a87c:	4650      	mov	r0, sl
    a87e:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a880:	2100      	movs	r1, #0
    a882:	1c30      	adds	r0, r6, #0
    a884:	f7f5 ff08 	bl	698 <__aeabi_fcmpeq>
    a888:	2800      	cmp	r0, #0
    a88a:	d100      	bne.n	a88e <fRun_9DOF_GBY_KALMAN+0x27ba>
    a88c:	e3c1      	b.n	b012 <fRun_9DOF_GBY_KALMAN+0x2f3e>
    a88e:	2100      	movs	r1, #0
    a890:	4688      	mov	r8, r1
    a892:	1c38      	adds	r0, r7, #0
    a894:	2100      	movs	r1, #0
    a896:	f7f5 feff 	bl	698 <__aeabi_fcmpeq>
    a89a:	2800      	cmp	r0, #0
    a89c:	d109      	bne.n	a8b2 <fRun_9DOF_GBY_KALMAN+0x27de>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a89e:	6e29      	ldr	r1, [r5, #96]	; 0x60
    a8a0:	1c38      	adds	r0, r7, #0
    a8a2:	f7f6 fa77 	bl	d94 <__aeabi_fmul>
    a8a6:	1c01      	adds	r1, r0, #0
    a8a8:	4640      	mov	r0, r8
    a8aa:	f7f5 ff23 	bl	6f4 <__aeabi_fadd>
    a8ae:	4680      	mov	r8, r0
    a8b0:	6020      	str	r0, [r4, #0]
    a8b2:	2390      	movs	r3, #144	; 0x90
    a8b4:	58e9      	ldr	r1, [r5, r3]
    a8b6:	9805      	ldr	r0, [sp, #20]
    a8b8:	f7f6 fa6c 	bl	d94 <__aeabi_fmul>
    a8bc:	4641      	mov	r1, r8
    a8be:	f7f5 ff19 	bl	6f4 <__aeabi_fadd>
    a8c2:	22c0      	movs	r2, #192	; 0xc0
    a8c4:	6020      	str	r0, [r4, #0]
    a8c6:	58a9      	ldr	r1, [r5, r2]
    a8c8:	4680      	mov	r8, r0
    a8ca:	9804      	ldr	r0, [sp, #16]
    a8cc:	f7f6 fa62 	bl	d94 <__aeabi_fmul>
    a8d0:	4641      	mov	r1, r8
    a8d2:	f7f5 ff0f 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a8d6:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a8d8:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a8da:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a8dc:	1c30      	adds	r0, r6, #0
    a8de:	2100      	movs	r1, #0
    a8e0:	f7f5 feda 	bl	698 <__aeabi_fcmpeq>
    a8e4:	2800      	cmp	r0, #0
    a8e6:	d001      	beq.n	a8ec <fRun_9DOF_GBY_KALMAN+0x2818>
    a8e8:	f001 f8b2 	bl	ba50 <fRun_9DOF_GBY_KALMAN+0x397c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a8ec:	6b69      	ldr	r1, [r5, #52]	; 0x34
    a8ee:	1c30      	adds	r0, r6, #0
    a8f0:	f7f6 fa50 	bl	d94 <__aeabi_fmul>
    a8f4:	2100      	movs	r1, #0
    a8f6:	f7f5 fefd 	bl	6f4 <__aeabi_fadd>
    a8fa:	4680      	mov	r8, r0
    a8fc:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a8fe:	1c38      	adds	r0, r7, #0
    a900:	2100      	movs	r1, #0
    a902:	f7f5 fec9 	bl	698 <__aeabi_fcmpeq>
    a906:	2800      	cmp	r0, #0
    a908:	d109      	bne.n	a91e <fRun_9DOF_GBY_KALMAN+0x284a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a90a:	6e69      	ldr	r1, [r5, #100]	; 0x64
    a90c:	1c38      	adds	r0, r7, #0
    a90e:	f7f6 fa41 	bl	d94 <__aeabi_fmul>
    a912:	1c01      	adds	r1, r0, #0
    a914:	4640      	mov	r0, r8
    a916:	f7f5 feed 	bl	6f4 <__aeabi_fadd>
    a91a:	4680      	mov	r8, r0
    a91c:	6060      	str	r0, [r4, #4]
    a91e:	2394      	movs	r3, #148	; 0x94
    a920:	58e9      	ldr	r1, [r5, r3]
    a922:	9805      	ldr	r0, [sp, #20]
    a924:	f7f6 fa36 	bl	d94 <__aeabi_fmul>
    a928:	4641      	mov	r1, r8
    a92a:	f7f5 fee3 	bl	6f4 <__aeabi_fadd>
    a92e:	23c4      	movs	r3, #196	; 0xc4
    a930:	6060      	str	r0, [r4, #4]
    a932:	58e9      	ldr	r1, [r5, r3]
    a934:	4680      	mov	r8, r0
    a936:	9804      	ldr	r0, [sp, #16]
    a938:	f7f6 fa2c 	bl	d94 <__aeabi_fmul>
    a93c:	4641      	mov	r1, r8
    a93e:	f7f5 fed9 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a942:	4651      	mov	r1, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a944:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a946:	60a1      	str	r1, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a948:	1c30      	adds	r0, r6, #0
    a94a:	2100      	movs	r1, #0
    a94c:	f7f5 fea4 	bl	698 <__aeabi_fcmpeq>
    a950:	2800      	cmp	r0, #0
    a952:	d001      	beq.n	a958 <fRun_9DOF_GBY_KALMAN+0x2884>
    a954:	f001 f878 	bl	ba48 <fRun_9DOF_GBY_KALMAN+0x3974>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a958:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    a95a:	1c30      	adds	r0, r6, #0
    a95c:	f7f6 fa1a 	bl	d94 <__aeabi_fmul>
    a960:	2100      	movs	r1, #0
    a962:	f7f5 fec7 	bl	6f4 <__aeabi_fadd>
    a966:	4680      	mov	r8, r0
    a968:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a96a:	1c38      	adds	r0, r7, #0
    a96c:	2100      	movs	r1, #0
    a96e:	f7f5 fe93 	bl	698 <__aeabi_fcmpeq>
    a972:	2800      	cmp	r0, #0
    a974:	d109      	bne.n	a98a <fRun_9DOF_GBY_KALMAN+0x28b6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a976:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    a978:	1c38      	adds	r0, r7, #0
    a97a:	f7f6 fa0b 	bl	d94 <__aeabi_fmul>
    a97e:	1c01      	adds	r1, r0, #0
    a980:	4640      	mov	r0, r8
    a982:	f7f5 feb7 	bl	6f4 <__aeabi_fadd>
    a986:	4680      	mov	r8, r0
    a988:	60a0      	str	r0, [r4, #8]
    a98a:	2398      	movs	r3, #152	; 0x98
    a98c:	58e9      	ldr	r1, [r5, r3]
    a98e:	9805      	ldr	r0, [sp, #20]
    a990:	f7f6 fa00 	bl	d94 <__aeabi_fmul>
    a994:	4641      	mov	r1, r8
    a996:	f7f5 fead 	bl	6f4 <__aeabi_fadd>
    a99a:	23c8      	movs	r3, #200	; 0xc8
    a99c:	60a0      	str	r0, [r4, #8]
    a99e:	58e9      	ldr	r1, [r5, r3]
    a9a0:	4680      	mov	r8, r0
    a9a2:	9804      	ldr	r0, [sp, #16]
    a9a4:	f7f6 f9f6 	bl	d94 <__aeabi_fmul>
    a9a8:	4641      	mov	r1, r8
    a9aa:	f7f5 fea3 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a9ae:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a9b0:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    a9b2:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a9b4:	1c30      	adds	r0, r6, #0
    a9b6:	2100      	movs	r1, #0
    a9b8:	f7f5 fe6e 	bl	698 <__aeabi_fcmpeq>
    a9bc:	2800      	cmp	r0, #0
    a9be:	d001      	beq.n	a9c4 <fRun_9DOF_GBY_KALMAN+0x28f0>
    a9c0:	f001 f83e 	bl	ba40 <fRun_9DOF_GBY_KALMAN+0x396c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a9c4:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    a9c6:	1c30      	adds	r0, r6, #0
    a9c8:	f7f6 f9e4 	bl	d94 <__aeabi_fmul>
    a9cc:	2100      	movs	r1, #0
    a9ce:	f7f5 fe91 	bl	6f4 <__aeabi_fadd>
    a9d2:	4680      	mov	r8, r0
    a9d4:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    a9d6:	1c38      	adds	r0, r7, #0
    a9d8:	2100      	movs	r1, #0
    a9da:	f7f5 fe5d 	bl	698 <__aeabi_fcmpeq>
    a9de:	2800      	cmp	r0, #0
    a9e0:	d109      	bne.n	a9f6 <fRun_9DOF_GBY_KALMAN+0x2922>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    a9e2:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
    a9e4:	1c38      	adds	r0, r7, #0
    a9e6:	f7f6 f9d5 	bl	d94 <__aeabi_fmul>
    a9ea:	1c01      	adds	r1, r0, #0
    a9ec:	4640      	mov	r0, r8
    a9ee:	f7f5 fe81 	bl	6f4 <__aeabi_fadd>
    a9f2:	4680      	mov	r8, r0
    a9f4:	60e0      	str	r0, [r4, #12]
    a9f6:	239c      	movs	r3, #156	; 0x9c
    a9f8:	58e9      	ldr	r1, [r5, r3]
    a9fa:	9805      	ldr	r0, [sp, #20]
    a9fc:	f7f6 f9ca 	bl	d94 <__aeabi_fmul>
    aa00:	4641      	mov	r1, r8
    aa02:	f7f5 fe77 	bl	6f4 <__aeabi_fadd>
    aa06:	23cc      	movs	r3, #204	; 0xcc
    aa08:	60e0      	str	r0, [r4, #12]
    aa0a:	58e9      	ldr	r1, [r5, r3]
    aa0c:	4680      	mov	r8, r0
    aa0e:	9804      	ldr	r0, [sp, #16]
    aa10:	f7f6 f9c0 	bl	d94 <__aeabi_fmul>
    aa14:	4641      	mov	r1, r8
    aa16:	f7f5 fe6d 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    aa1a:	4651      	mov	r1, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    aa1c:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    aa1e:	6121      	str	r1, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    aa20:	1c30      	adds	r0, r6, #0
    aa22:	2100      	movs	r1, #0
    aa24:	f7f5 fe38 	bl	698 <__aeabi_fcmpeq>
    aa28:	2800      	cmp	r0, #0
    aa2a:	d001      	beq.n	aa30 <fRun_9DOF_GBY_KALMAN+0x295c>
    aa2c:	f001 f850 	bl	bad0 <fRun_9DOF_GBY_KALMAN+0x39fc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    aa30:	6c29      	ldr	r1, [r5, #64]	; 0x40
    aa32:	1c30      	adds	r0, r6, #0
    aa34:	f7f6 f9ae 	bl	d94 <__aeabi_fmul>
    aa38:	2100      	movs	r1, #0
    aa3a:	f7f5 fe5b 	bl	6f4 <__aeabi_fadd>
    aa3e:	4680      	mov	r8, r0
    aa40:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    aa42:	1c38      	adds	r0, r7, #0
    aa44:	2100      	movs	r1, #0
    aa46:	f7f5 fe27 	bl	698 <__aeabi_fcmpeq>
    aa4a:	2800      	cmp	r0, #0
    aa4c:	d109      	bne.n	aa62 <fRun_9DOF_GBY_KALMAN+0x298e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    aa4e:	6f29      	ldr	r1, [r5, #112]	; 0x70
    aa50:	1c38      	adds	r0, r7, #0
    aa52:	f7f6 f99f 	bl	d94 <__aeabi_fmul>
    aa56:	1c01      	adds	r1, r0, #0
    aa58:	4640      	mov	r0, r8
    aa5a:	f7f5 fe4b 	bl	6f4 <__aeabi_fadd>
    aa5e:	4680      	mov	r8, r0
    aa60:	6120      	str	r0, [r4, #16]
    aa62:	23a0      	movs	r3, #160	; 0xa0
    aa64:	58e9      	ldr	r1, [r5, r3]
    aa66:	9805      	ldr	r0, [sp, #20]
    aa68:	f7f6 f994 	bl	d94 <__aeabi_fmul>
    aa6c:	4641      	mov	r1, r8
    aa6e:	f7f5 fe41 	bl	6f4 <__aeabi_fadd>
    aa72:	23d0      	movs	r3, #208	; 0xd0
    aa74:	6120      	str	r0, [r4, #16]
    aa76:	58e9      	ldr	r1, [r5, r3]
    aa78:	4680      	mov	r8, r0
    aa7a:	9804      	ldr	r0, [sp, #16]
    aa7c:	f7f6 f98a 	bl	d94 <__aeabi_fmul>
    aa80:	4641      	mov	r1, r8
    aa82:	f7f5 fe37 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    aa86:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    aa88:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    aa8a:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    aa8c:	1c30      	adds	r0, r6, #0
    aa8e:	2100      	movs	r1, #0
    aa90:	f7f5 fe02 	bl	698 <__aeabi_fcmpeq>
    aa94:	2800      	cmp	r0, #0
    aa96:	d001      	beq.n	aa9c <fRun_9DOF_GBY_KALMAN+0x29c8>
    aa98:	f001 f817 	bl	baca <fRun_9DOF_GBY_KALMAN+0x39f6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    aa9c:	6c69      	ldr	r1, [r5, #68]	; 0x44
    aa9e:	1c30      	adds	r0, r6, #0
    aaa0:	f7f6 f978 	bl	d94 <__aeabi_fmul>
    aaa4:	2100      	movs	r1, #0
    aaa6:	f7f5 fe25 	bl	6f4 <__aeabi_fadd>
    aaaa:	1c06      	adds	r6, r0, #0
    aaac:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    aaae:	1c38      	adds	r0, r7, #0
    aab0:	2100      	movs	r1, #0
    aab2:	f7f5 fdf1 	bl	698 <__aeabi_fcmpeq>
    aab6:	2800      	cmp	r0, #0
    aab8:	d109      	bne.n	aace <fRun_9DOF_GBY_KALMAN+0x29fa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    aaba:	6f69      	ldr	r1, [r5, #116]	; 0x74
    aabc:	1c38      	adds	r0, r7, #0
    aabe:	f7f6 f969 	bl	d94 <__aeabi_fmul>
    aac2:	1c01      	adds	r1, r0, #0
    aac4:	1c30      	adds	r0, r6, #0
    aac6:	f7f5 fe15 	bl	6f4 <__aeabi_fadd>
    aaca:	1c06      	adds	r6, r0, #0
    aacc:	6160      	str	r0, [r4, #20]
    aace:	23a4      	movs	r3, #164	; 0xa4
    aad0:	58e9      	ldr	r1, [r5, r3]
    aad2:	9805      	ldr	r0, [sp, #20]
    aad4:	f7f6 f95e 	bl	d94 <__aeabi_fmul>
    aad8:	1c31      	adds	r1, r6, #0
    aada:	f7f5 fe0b 	bl	6f4 <__aeabi_fadd>
    aade:	1c06      	adds	r6, r0, #0
    aae0:	6160      	str	r0, [r4, #20]
    aae2:	9804      	ldr	r0, [sp, #16]
    aae4:	23d4      	movs	r3, #212	; 0xd4
    aae6:	58e9      	ldr	r1, [r5, r3]
    aae8:	f7f6 f954 	bl	d94 <__aeabi_fmul>
    aaec:	1c31      	adds	r1, r6, #0
    aaee:	f7f5 fe01 	bl	6f4 <__aeabi_fadd>
    aaf2:	6160      	str	r0, [r4, #20]
    aaf4:	f7fe f82e 	bl	8b54 <fRun_9DOF_GBY_KALMAN+0xa80>
    aaf8:	2090      	movs	r0, #144	; 0x90
    aafa:	1c21      	adds	r1, r4, #0
    aafc:	1940      	adds	r0, r0, r5
    aafe:	3118      	adds	r1, #24
    ab00:	46ab      	mov	fp, r5
    ab02:	46b9      	mov	r9, r7
    ab04:	9103      	str	r1, [sp, #12]
    ab06:	1c05      	adds	r5, r0, #0
    ab08:	1c37      	adds	r7, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    ab0a:	4652      	mov	r2, sl
    ab0c:	6022      	str	r2, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    ab0e:	1c38      	adds	r0, r7, #0
    ab10:	2100      	movs	r1, #0
    ab12:	f7f5 fdc1 	bl	698 <__aeabi_fcmpeq>
    ab16:	2600      	movs	r6, #0
    ab18:	2800      	cmp	r0, #0
    ab1a:	d10a      	bne.n	ab32 <fRun_9DOF_GBY_KALMAN+0x2a5e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    ab1c:	1c2b      	adds	r3, r5, #0
    ab1e:	3b60      	subs	r3, #96	; 0x60
    ab20:	6819      	ldr	r1, [r3, #0]
    ab22:	1c38      	adds	r0, r7, #0
    ab24:	f7f6 f936 	bl	d94 <__aeabi_fmul>
    ab28:	2100      	movs	r1, #0
    ab2a:	f7f5 fde3 	bl	6f4 <__aeabi_fadd>
    ab2e:	1c06      	adds	r6, r0, #0
    ab30:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    ab32:	4648      	mov	r0, r9
    ab34:	2100      	movs	r1, #0
    ab36:	f7f5 fdaf 	bl	698 <__aeabi_fcmpeq>
    ab3a:	2800      	cmp	r0, #0
    ab3c:	d10b      	bne.n	ab56 <fRun_9DOF_GBY_KALMAN+0x2a82>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    ab3e:	1c2b      	adds	r3, r5, #0
    ab40:	3b30      	subs	r3, #48	; 0x30
    ab42:	6819      	ldr	r1, [r3, #0]
    ab44:	4648      	mov	r0, r9
    ab46:	f7f6 f925 	bl	d94 <__aeabi_fmul>
    ab4a:	1c01      	adds	r1, r0, #0
    ab4c:	1c30      	adds	r0, r6, #0
    ab4e:	f7f5 fdd1 	bl	6f4 <__aeabi_fadd>
    ab52:	1c06      	adds	r6, r0, #0
    ab54:	6020      	str	r0, [r4, #0]
    ab56:	6829      	ldr	r1, [r5, #0]
    ab58:	9805      	ldr	r0, [sp, #20]
    ab5a:	f7f6 f91b 	bl	d94 <__aeabi_fmul>
    ab5e:	1c31      	adds	r1, r6, #0
    ab60:	f7f5 fdc8 	bl	6f4 <__aeabi_fadd>
    ab64:	6020      	str	r0, [r4, #0]
    ab66:	6b29      	ldr	r1, [r5, #48]	; 0x30
    ab68:	1c06      	adds	r6, r0, #0
    ab6a:	9804      	ldr	r0, [sp, #16]
    ab6c:	f7f6 f912 	bl	d94 <__aeabi_fmul>
    ab70:	1c31      	adds	r1, r6, #0
    ab72:	f7f5 fdbf 	bl	6f4 <__aeabi_fadd>
    ab76:	6020      	str	r0, [r4, #0]
    ab78:	6e29      	ldr	r1, [r5, #96]	; 0x60
    ab7a:	1c06      	adds	r6, r0, #0
    ab7c:	4640      	mov	r0, r8
    ab7e:	f7f6 f909 	bl	d94 <__aeabi_fmul>
    ab82:	1c31      	adds	r1, r6, #0
    ab84:	f7f5 fdb6 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1397
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
    ab88:	9b03      	ldr	r3, [sp, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    ab8a:	c401      	stmia	r4!, {r0}
    ab8c:	3504      	adds	r5, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1397
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
    ab8e:	429c      	cmp	r4, r3
    ab90:	d1bb      	bne.n	ab0a <fRun_9DOF_GBY_KALMAN+0x2a36>
    ab92:	465d      	mov	r5, fp
    ab94:	f7fd ffde 	bl	8b54 <fRun_9DOF_GBY_KALMAN+0xa80>
    ab98:	2018      	movs	r0, #24
    ab9a:	1900      	adds	r0, r0, r4
    ab9c:	46b8      	mov	r8, r7
    ab9e:	4683      	mov	fp, r0
    aba0:	46a9      	mov	r9, r5
    aba2:	1c37      	adds	r7, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    aba4:	4651      	mov	r1, sl
    aba6:	6021      	str	r1, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    aba8:	6829      	ldr	r1, [r5, #0]
    abaa:	9803      	ldr	r0, [sp, #12]
    abac:	f7f6 f8f2 	bl	d94 <__aeabi_fmul>
    abb0:	2100      	movs	r1, #0
    abb2:	f7f5 fd9f 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    abb6:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    abb8:	1c06      	adds	r6, r0, #0
    abba:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    abbc:	1c38      	adds	r0, r7, #0
    abbe:	f7f5 fd6b 	bl	698 <__aeabi_fcmpeq>
    abc2:	2800      	cmp	r0, #0
    abc4:	d109      	bne.n	abda <fRun_9DOF_GBY_KALMAN+0x2b06>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    abc6:	6b29      	ldr	r1, [r5, #48]	; 0x30
    abc8:	1c38      	adds	r0, r7, #0
    abca:	f7f6 f8e3 	bl	d94 <__aeabi_fmul>
    abce:	1c01      	adds	r1, r0, #0
    abd0:	1c30      	adds	r0, r6, #0
    abd2:	f7f5 fd8f 	bl	6f4 <__aeabi_fadd>
    abd6:	1c06      	adds	r6, r0, #0
    abd8:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    abda:	4640      	mov	r0, r8
    abdc:	2100      	movs	r1, #0
    abde:	f7f5 fd5b 	bl	698 <__aeabi_fcmpeq>
    abe2:	2800      	cmp	r0, #0
    abe4:	d109      	bne.n	abfa <fRun_9DOF_GBY_KALMAN+0x2b26>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    abe6:	6e29      	ldr	r1, [r5, #96]	; 0x60
    abe8:	4640      	mov	r0, r8
    abea:	f7f6 f8d3 	bl	d94 <__aeabi_fmul>
    abee:	1c01      	adds	r1, r0, #0
    abf0:	1c30      	adds	r0, r6, #0
    abf2:	f7f5 fd7f 	bl	6f4 <__aeabi_fadd>
    abf6:	1c06      	adds	r6, r0, #0
    abf8:	6020      	str	r0, [r4, #0]
    abfa:	1c2b      	adds	r3, r5, #0
    abfc:	3390      	adds	r3, #144	; 0x90
    abfe:	6819      	ldr	r1, [r3, #0]
    ac00:	9805      	ldr	r0, [sp, #20]
    ac02:	f7f6 f8c7 	bl	d94 <__aeabi_fmul>
    ac06:	1c31      	adds	r1, r6, #0
    ac08:	f7f5 fd74 	bl	6f4 <__aeabi_fadd>
    ac0c:	1c2b      	adds	r3, r5, #0
    ac0e:	6020      	str	r0, [r4, #0]
    ac10:	33c0      	adds	r3, #192	; 0xc0
    ac12:	6819      	ldr	r1, [r3, #0]
    ac14:	1c06      	adds	r6, r0, #0
    ac16:	9804      	ldr	r0, [sp, #16]
    ac18:	f7f6 f8bc 	bl	d94 <__aeabi_fmul>
    ac1c:	1c31      	adds	r1, r6, #0
    ac1e:	f7f5 fd69 	bl	6f4 <__aeabi_fadd>
    ac22:	c401      	stmia	r4!, {r0}
    ac24:	3504      	adds	r5, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1397
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
    ac26:	455c      	cmp	r4, fp
    ac28:	d1bc      	bne.n	aba4 <fRun_9DOF_GBY_KALMAN+0x2ad0>
    ac2a:	464d      	mov	r5, r9
    ac2c:	f7fd ff92 	bl	8b54 <fRun_9DOF_GBY_KALMAN+0xa80>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    ac30:	4650      	mov	r0, sl
    ac32:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    ac34:	2100      	movs	r1, #0
    ac36:	1c30      	adds	r0, r6, #0
    ac38:	f7f5 fd2e 	bl	698 <__aeabi_fcmpeq>
    ac3c:	2800      	cmp	r0, #0
    ac3e:	d100      	bne.n	ac42 <fRun_9DOF_GBY_KALMAN+0x2b6e>
    ac40:	e1dd      	b.n	affe <fRun_9DOF_GBY_KALMAN+0x2f2a>
    ac42:	2100      	movs	r1, #0
    ac44:	4689      	mov	r9, r1
    ac46:	1c38      	adds	r0, r7, #0
    ac48:	2100      	movs	r1, #0
    ac4a:	f7f5 fd25 	bl	698 <__aeabi_fcmpeq>
    ac4e:	2800      	cmp	r0, #0
    ac50:	d109      	bne.n	ac66 <fRun_9DOF_GBY_KALMAN+0x2b92>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    ac52:	6e29      	ldr	r1, [r5, #96]	; 0x60
    ac54:	1c38      	adds	r0, r7, #0
    ac56:	f7f6 f89d 	bl	d94 <__aeabi_fmul>
    ac5a:	1c01      	adds	r1, r0, #0
    ac5c:	4648      	mov	r0, r9
    ac5e:	f7f5 fd49 	bl	6f4 <__aeabi_fadd>
    ac62:	4681      	mov	r9, r0
    ac64:	6020      	str	r0, [r4, #0]
    ac66:	2390      	movs	r3, #144	; 0x90
    ac68:	58e9      	ldr	r1, [r5, r3]
    ac6a:	9805      	ldr	r0, [sp, #20]
    ac6c:	f7f6 f892 	bl	d94 <__aeabi_fmul>
    ac70:	4649      	mov	r1, r9
    ac72:	f7f5 fd3f 	bl	6f4 <__aeabi_fadd>
    ac76:	22f0      	movs	r2, #240	; 0xf0
    ac78:	6020      	str	r0, [r4, #0]
    ac7a:	58a9      	ldr	r1, [r5, r2]
    ac7c:	4681      	mov	r9, r0
    ac7e:	4640      	mov	r0, r8
    ac80:	f7f6 f888 	bl	d94 <__aeabi_fmul>
    ac84:	4649      	mov	r1, r9
    ac86:	f7f5 fd35 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    ac8a:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    ac8c:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    ac8e:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    ac90:	1c30      	adds	r0, r6, #0
    ac92:	2100      	movs	r1, #0
    ac94:	f7f5 fd00 	bl	698 <__aeabi_fcmpeq>
    ac98:	2800      	cmp	r0, #0
    ac9a:	d001      	beq.n	aca0 <fRun_9DOF_GBY_KALMAN+0x2bcc>
    ac9c:	f000 feeb 	bl	ba76 <fRun_9DOF_GBY_KALMAN+0x39a2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    aca0:	6b69      	ldr	r1, [r5, #52]	; 0x34
    aca2:	1c30      	adds	r0, r6, #0
    aca4:	f7f6 f876 	bl	d94 <__aeabi_fmul>
    aca8:	2100      	movs	r1, #0
    acaa:	f7f5 fd23 	bl	6f4 <__aeabi_fadd>
    acae:	4681      	mov	r9, r0
    acb0:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    acb2:	1c38      	adds	r0, r7, #0
    acb4:	2100      	movs	r1, #0
    acb6:	f7f5 fcef 	bl	698 <__aeabi_fcmpeq>
    acba:	2800      	cmp	r0, #0
    acbc:	d109      	bne.n	acd2 <fRun_9DOF_GBY_KALMAN+0x2bfe>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    acbe:	6e69      	ldr	r1, [r5, #100]	; 0x64
    acc0:	1c38      	adds	r0, r7, #0
    acc2:	f7f6 f867 	bl	d94 <__aeabi_fmul>
    acc6:	1c01      	adds	r1, r0, #0
    acc8:	4648      	mov	r0, r9
    acca:	f7f5 fd13 	bl	6f4 <__aeabi_fadd>
    acce:	4681      	mov	r9, r0
    acd0:	6060      	str	r0, [r4, #4]
    acd2:	2394      	movs	r3, #148	; 0x94
    acd4:	58e9      	ldr	r1, [r5, r3]
    acd6:	9805      	ldr	r0, [sp, #20]
    acd8:	f7f6 f85c 	bl	d94 <__aeabi_fmul>
    acdc:	4649      	mov	r1, r9
    acde:	f7f5 fd09 	bl	6f4 <__aeabi_fadd>
    ace2:	22f4      	movs	r2, #244	; 0xf4
    ace4:	6060      	str	r0, [r4, #4]
    ace6:	58a9      	ldr	r1, [r5, r2]
    ace8:	4681      	mov	r9, r0
    acea:	4640      	mov	r0, r8
    acec:	f7f6 f852 	bl	d94 <__aeabi_fmul>
    acf0:	4649      	mov	r1, r9
    acf2:	f7f5 fcff 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    acf6:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    acf8:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    acfa:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    acfc:	1c30      	adds	r0, r6, #0
    acfe:	2100      	movs	r1, #0
    ad00:	f7f5 fcca 	bl	698 <__aeabi_fcmpeq>
    ad04:	2800      	cmp	r0, #0
    ad06:	d001      	beq.n	ad0c <fRun_9DOF_GBY_KALMAN+0x2c38>
    ad08:	f000 feb1 	bl	ba6e <fRun_9DOF_GBY_KALMAN+0x399a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    ad0c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    ad0e:	1c30      	adds	r0, r6, #0
    ad10:	f7f6 f840 	bl	d94 <__aeabi_fmul>
    ad14:	2100      	movs	r1, #0
    ad16:	f7f5 fced 	bl	6f4 <__aeabi_fadd>
    ad1a:	4681      	mov	r9, r0
    ad1c:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    ad1e:	1c38      	adds	r0, r7, #0
    ad20:	2100      	movs	r1, #0
    ad22:	f7f5 fcb9 	bl	698 <__aeabi_fcmpeq>
    ad26:	2800      	cmp	r0, #0
    ad28:	d109      	bne.n	ad3e <fRun_9DOF_GBY_KALMAN+0x2c6a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    ad2a:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    ad2c:	1c38      	adds	r0, r7, #0
    ad2e:	f7f6 f831 	bl	d94 <__aeabi_fmul>
    ad32:	1c01      	adds	r1, r0, #0
    ad34:	4648      	mov	r0, r9
    ad36:	f7f5 fcdd 	bl	6f4 <__aeabi_fadd>
    ad3a:	4681      	mov	r9, r0
    ad3c:	60a0      	str	r0, [r4, #8]
    ad3e:	2398      	movs	r3, #152	; 0x98
    ad40:	58e9      	ldr	r1, [r5, r3]
    ad42:	9805      	ldr	r0, [sp, #20]
    ad44:	f7f6 f826 	bl	d94 <__aeabi_fmul>
    ad48:	4649      	mov	r1, r9
    ad4a:	f7f5 fcd3 	bl	6f4 <__aeabi_fadd>
    ad4e:	22f8      	movs	r2, #248	; 0xf8
    ad50:	60a0      	str	r0, [r4, #8]
    ad52:	58a9      	ldr	r1, [r5, r2]
    ad54:	4681      	mov	r9, r0
    ad56:	4640      	mov	r0, r8
    ad58:	f7f6 f81c 	bl	d94 <__aeabi_fmul>
    ad5c:	4649      	mov	r1, r9
    ad5e:	f7f5 fcc9 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    ad62:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    ad64:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    ad66:	60e3      	str	r3, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    ad68:	1c30      	adds	r0, r6, #0
    ad6a:	2100      	movs	r1, #0
    ad6c:	f7f5 fc94 	bl	698 <__aeabi_fcmpeq>
    ad70:	2800      	cmp	r0, #0
    ad72:	d001      	beq.n	ad78 <fRun_9DOF_GBY_KALMAN+0x2ca4>
    ad74:	f000 fe77 	bl	ba66 <fRun_9DOF_GBY_KALMAN+0x3992>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    ad78:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    ad7a:	1c30      	adds	r0, r6, #0
    ad7c:	f7f6 f80a 	bl	d94 <__aeabi_fmul>
    ad80:	2100      	movs	r1, #0
    ad82:	f7f5 fcb7 	bl	6f4 <__aeabi_fadd>
    ad86:	4681      	mov	r9, r0
    ad88:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    ad8a:	1c38      	adds	r0, r7, #0
    ad8c:	2100      	movs	r1, #0
    ad8e:	f7f5 fc83 	bl	698 <__aeabi_fcmpeq>
    ad92:	2800      	cmp	r0, #0
    ad94:	d109      	bne.n	adaa <fRun_9DOF_GBY_KALMAN+0x2cd6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    ad96:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
    ad98:	1c38      	adds	r0, r7, #0
    ad9a:	f7f5 fffb 	bl	d94 <__aeabi_fmul>
    ad9e:	1c01      	adds	r1, r0, #0
    ada0:	4648      	mov	r0, r9
    ada2:	f7f5 fca7 	bl	6f4 <__aeabi_fadd>
    ada6:	4681      	mov	r9, r0
    ada8:	60e0      	str	r0, [r4, #12]
    adaa:	239c      	movs	r3, #156	; 0x9c
    adac:	58e9      	ldr	r1, [r5, r3]
    adae:	9805      	ldr	r0, [sp, #20]
    adb0:	f7f5 fff0 	bl	d94 <__aeabi_fmul>
    adb4:	4649      	mov	r1, r9
    adb6:	f7f5 fc9d 	bl	6f4 <__aeabi_fadd>
    adba:	22fc      	movs	r2, #252	; 0xfc
    adbc:	60e0      	str	r0, [r4, #12]
    adbe:	58a9      	ldr	r1, [r5, r2]
    adc0:	4681      	mov	r9, r0
    adc2:	4640      	mov	r0, r8
    adc4:	f7f5 ffe6 	bl	d94 <__aeabi_fmul>
    adc8:	4649      	mov	r1, r9
    adca:	f7f5 fc93 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    adce:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    add0:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    add2:	6123      	str	r3, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    add4:	1c30      	adds	r0, r6, #0
    add6:	2100      	movs	r1, #0
    add8:	f7f5 fc5e 	bl	698 <__aeabi_fcmpeq>
    addc:	2800      	cmp	r0, #0
    adde:	d001      	beq.n	ade4 <fRun_9DOF_GBY_KALMAN+0x2d10>
    ade0:	f000 fe3d 	bl	ba5e <fRun_9DOF_GBY_KALMAN+0x398a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    ade4:	6c29      	ldr	r1, [r5, #64]	; 0x40
    ade6:	1c30      	adds	r0, r6, #0
    ade8:	f7f5 ffd4 	bl	d94 <__aeabi_fmul>
    adec:	2100      	movs	r1, #0
    adee:	f7f5 fc81 	bl	6f4 <__aeabi_fadd>
    adf2:	4681      	mov	r9, r0
    adf4:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    adf6:	1c38      	adds	r0, r7, #0
    adf8:	2100      	movs	r1, #0
    adfa:	f7f5 fc4d 	bl	698 <__aeabi_fcmpeq>
    adfe:	2800      	cmp	r0, #0
    ae00:	d109      	bne.n	ae16 <fRun_9DOF_GBY_KALMAN+0x2d42>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    ae02:	6f29      	ldr	r1, [r5, #112]	; 0x70
    ae04:	1c38      	adds	r0, r7, #0
    ae06:	f7f5 ffc5 	bl	d94 <__aeabi_fmul>
    ae0a:	1c01      	adds	r1, r0, #0
    ae0c:	4648      	mov	r0, r9
    ae0e:	f7f5 fc71 	bl	6f4 <__aeabi_fadd>
    ae12:	4681      	mov	r9, r0
    ae14:	6120      	str	r0, [r4, #16]
    ae16:	23a0      	movs	r3, #160	; 0xa0
    ae18:	58e9      	ldr	r1, [r5, r3]
    ae1a:	9805      	ldr	r0, [sp, #20]
    ae1c:	f7f5 ffba 	bl	d94 <__aeabi_fmul>
    ae20:	4649      	mov	r1, r9
    ae22:	f7f5 fc67 	bl	6f4 <__aeabi_fadd>
    ae26:	2280      	movs	r2, #128	; 0x80
    ae28:	6120      	str	r0, [r4, #16]
    ae2a:	0052      	lsls	r2, r2, #1
    ae2c:	58a9      	ldr	r1, [r5, r2]
    ae2e:	4681      	mov	r9, r0
    ae30:	4640      	mov	r0, r8
    ae32:	f7f5 ffaf 	bl	d94 <__aeabi_fmul>
    ae36:	4649      	mov	r1, r9
    ae38:	f7f5 fc5c 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    ae3c:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    ae3e:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    ae40:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    ae42:	1c30      	adds	r0, r6, #0
    ae44:	2100      	movs	r1, #0
    ae46:	f7f5 fc27 	bl	698 <__aeabi_fcmpeq>
    ae4a:	2800      	cmp	r0, #0
    ae4c:	d001      	beq.n	ae52 <fRun_9DOF_GBY_KALMAN+0x2d7e>
    ae4e:	f000 fe03 	bl	ba58 <fRun_9DOF_GBY_KALMAN+0x3984>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    ae52:	6c69      	ldr	r1, [r5, #68]	; 0x44
    ae54:	1c30      	adds	r0, r6, #0
    ae56:	f7f5 ff9d 	bl	d94 <__aeabi_fmul>
    ae5a:	2100      	movs	r1, #0
    ae5c:	f7f5 fc4a 	bl	6f4 <__aeabi_fadd>
    ae60:	1c06      	adds	r6, r0, #0
    ae62:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    ae64:	1c38      	adds	r0, r7, #0
    ae66:	2100      	movs	r1, #0
    ae68:	f7f5 fc16 	bl	698 <__aeabi_fcmpeq>
    ae6c:	2800      	cmp	r0, #0
    ae6e:	d109      	bne.n	ae84 <fRun_9DOF_GBY_KALMAN+0x2db0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    ae70:	6f69      	ldr	r1, [r5, #116]	; 0x74
    ae72:	1c38      	adds	r0, r7, #0
    ae74:	f7f5 ff8e 	bl	d94 <__aeabi_fmul>
    ae78:	1c01      	adds	r1, r0, #0
    ae7a:	1c30      	adds	r0, r6, #0
    ae7c:	f7f5 fc3a 	bl	6f4 <__aeabi_fadd>
    ae80:	1c06      	adds	r6, r0, #0
    ae82:	6160      	str	r0, [r4, #20]
    ae84:	23a4      	movs	r3, #164	; 0xa4
    ae86:	58e9      	ldr	r1, [r5, r3]
    ae88:	9805      	ldr	r0, [sp, #20]
    ae8a:	f7f5 ff83 	bl	d94 <__aeabi_fmul>
    ae8e:	1c31      	adds	r1, r6, #0
    ae90:	f7f5 fc30 	bl	6f4 <__aeabi_fadd>
    ae94:	1c06      	adds	r6, r0, #0
    ae96:	6160      	str	r0, [r4, #20]
    ae98:	2782      	movs	r7, #130	; 0x82
    ae9a:	007f      	lsls	r7, r7, #1
    ae9c:	59e9      	ldr	r1, [r5, r7]
    ae9e:	4640      	mov	r0, r8
    aea0:	f7f5 ff78 	bl	d94 <__aeabi_fmul>
    aea4:	1c31      	adds	r1, r6, #0
    aea6:	f7f5 fc25 	bl	6f4 <__aeabi_fadd>
    aeaa:	6160      	str	r0, [r4, #20]
    aeac:	f7fd fe52 	bl	8b54 <fRun_9DOF_GBY_KALMAN+0xa80>
    aeb0:	1c22      	adds	r2, r4, #0
    aeb2:	3218      	adds	r2, #24
    aeb4:	46b9      	mov	r9, r7
    aeb6:	920d      	str	r2, [sp, #52]	; 0x34
    aeb8:	46ab      	mov	fp, r5
    aeba:	1c37      	adds	r7, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    aebc:	4653      	mov	r3, sl
    aebe:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    aec0:	6829      	ldr	r1, [r5, #0]
    aec2:	9803      	ldr	r0, [sp, #12]
    aec4:	f7f5 ff66 	bl	d94 <__aeabi_fmul>
    aec8:	2100      	movs	r1, #0
    aeca:	f7f5 fc13 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    aece:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    aed0:	1c06      	adds	r6, r0, #0
    aed2:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    aed4:	1c38      	adds	r0, r7, #0
    aed6:	f7f5 fbdf 	bl	698 <__aeabi_fcmpeq>
    aeda:	2800      	cmp	r0, #0
    aedc:	d109      	bne.n	aef2 <fRun_9DOF_GBY_KALMAN+0x2e1e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    aede:	6b29      	ldr	r1, [r5, #48]	; 0x30
    aee0:	1c38      	adds	r0, r7, #0
    aee2:	f7f5 ff57 	bl	d94 <__aeabi_fmul>
    aee6:	1c01      	adds	r1, r0, #0
    aee8:	1c30      	adds	r0, r6, #0
    aeea:	f7f5 fc03 	bl	6f4 <__aeabi_fadd>
    aeee:	1c06      	adds	r6, r0, #0
    aef0:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    aef2:	4648      	mov	r0, r9
    aef4:	2100      	movs	r1, #0
    aef6:	f7f5 fbcf 	bl	698 <__aeabi_fcmpeq>
    aefa:	2800      	cmp	r0, #0
    aefc:	d109      	bne.n	af12 <fRun_9DOF_GBY_KALMAN+0x2e3e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    aefe:	6e29      	ldr	r1, [r5, #96]	; 0x60
    af00:	4648      	mov	r0, r9
    af02:	f7f5 ff47 	bl	d94 <__aeabi_fmul>
    af06:	1c01      	adds	r1, r0, #0
    af08:	1c30      	adds	r0, r6, #0
    af0a:	f7f5 fbf3 	bl	6f4 <__aeabi_fadd>
    af0e:	1c06      	adds	r6, r0, #0
    af10:	6020      	str	r0, [r4, #0]
    af12:	1c2b      	adds	r3, r5, #0
    af14:	3390      	adds	r3, #144	; 0x90
    af16:	6819      	ldr	r1, [r3, #0]
    af18:	9805      	ldr	r0, [sp, #20]
    af1a:	f7f5 ff3b 	bl	d94 <__aeabi_fmul>
    af1e:	1c31      	adds	r1, r6, #0
    af20:	f7f5 fbe8 	bl	6f4 <__aeabi_fadd>
    af24:	1c2b      	adds	r3, r5, #0
    af26:	6020      	str	r0, [r4, #0]
    af28:	33c0      	adds	r3, #192	; 0xc0
    af2a:	6819      	ldr	r1, [r3, #0]
    af2c:	1c06      	adds	r6, r0, #0
    af2e:	9804      	ldr	r0, [sp, #16]
    af30:	f7f5 ff30 	bl	d94 <__aeabi_fmul>
    af34:	1c01      	adds	r1, r0, #0
    af36:	1c30      	adds	r0, r6, #0
    af38:	f7f5 fbdc 	bl	6f4 <__aeabi_fadd>
    af3c:	1c2b      	adds	r3, r5, #0
    af3e:	6020      	str	r0, [r4, #0]
    af40:	33f0      	adds	r3, #240	; 0xf0
    af42:	6819      	ldr	r1, [r3, #0]
    af44:	1c06      	adds	r6, r0, #0
    af46:	4640      	mov	r0, r8
    af48:	f7f5 ff24 	bl	d94 <__aeabi_fmul>
    af4c:	1c01      	adds	r1, r0, #0
    af4e:	1c30      	adds	r0, r6, #0
    af50:	f7f5 fbd0 	bl	6f4 <__aeabi_fadd>
    af54:	c401      	stmia	r4!, {r0}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1397
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
    af56:	980d      	ldr	r0, [sp, #52]	; 0x34
    af58:	3504      	adds	r5, #4
    af5a:	4284      	cmp	r4, r0
    af5c:	d1ae      	bne.n	aebc <fRun_9DOF_GBY_KALMAN+0x2de8>
    af5e:	465d      	mov	r5, fp
    af60:	f7fd fdf8 	bl	8b54 <fRun_9DOF_GBY_KALMAN+0xa80>
    af64:	1c20      	adds	r0, r4, #0
    af66:	3018      	adds	r0, #24
    af68:	46b9      	mov	r9, r7
    af6a:	9004      	str	r0, [sp, #16]
    af6c:	46ab      	mov	fp, r5
    af6e:	1c37      	adds	r7, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1400
		{
			// zero the matrix element fK12x6[i][j]
			*pfK12x6ij = 0.0F;
    af70:	4651      	mov	r1, sl
    af72:	6021      	str	r1, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    af74:	6829      	ldr	r1, [r5, #0]
    af76:	9803      	ldr	r0, [sp, #12]
    af78:	f7f5 ff0c 	bl	d94 <__aeabi_fmul>
    af7c:	2100      	movs	r1, #0
    af7e:	f7f5 fbb9 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    af82:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    af84:	1c06      	adds	r6, r0, #0
    af86:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    af88:	1c38      	adds	r0, r7, #0
    af8a:	f7f5 fb85 	bl	698 <__aeabi_fcmpeq>
    af8e:	2800      	cmp	r0, #0
    af90:	d109      	bne.n	afa6 <fRun_9DOF_GBY_KALMAN+0x2ed2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    af92:	6b29      	ldr	r1, [r5, #48]	; 0x30
    af94:	1c38      	adds	r0, r7, #0
    af96:	f7f5 fefd 	bl	d94 <__aeabi_fmul>
    af9a:	1c01      	adds	r1, r0, #0
    af9c:	1c30      	adds	r0, r6, #0
    af9e:	f7f5 fba9 	bl	6f4 <__aeabi_fadd>
    afa2:	1c06      	adds	r6, r0, #0
    afa4:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    afa6:	4648      	mov	r0, r9
    afa8:	2100      	movs	r1, #0
    afaa:	f7f5 fb75 	bl	698 <__aeabi_fcmpeq>
    afae:	2800      	cmp	r0, #0
    afb0:	d109      	bne.n	afc6 <fRun_9DOF_GBY_KALMAN+0x2ef2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    afb2:	6e29      	ldr	r1, [r5, #96]	; 0x60
    afb4:	4648      	mov	r0, r9
    afb6:	f7f5 feed 	bl	d94 <__aeabi_fmul>
    afba:	1c01      	adds	r1, r0, #0
    afbc:	1c30      	adds	r0, r6, #0
    afbe:	f7f5 fb99 	bl	6f4 <__aeabi_fadd>
    afc2:	1c06      	adds	r6, r0, #0
    afc4:	6020      	str	r0, [r4, #0]
    afc6:	1c2b      	adds	r3, r5, #0
    afc8:	3390      	adds	r3, #144	; 0x90
    afca:	6819      	ldr	r1, [r3, #0]
    afcc:	9805      	ldr	r0, [sp, #20]
    afce:	f7f5 fee1 	bl	d94 <__aeabi_fmul>
    afd2:	1c31      	adds	r1, r6, #0
    afd4:	f7f5 fb8e 	bl	6f4 <__aeabi_fadd>
    afd8:	1c2b      	adds	r3, r5, #0
    afda:	6020      	str	r0, [r4, #0]
    afdc:	33f0      	adds	r3, #240	; 0xf0
    afde:	6819      	ldr	r1, [r3, #0]
    afe0:	1c06      	adds	r6, r0, #0
    afe2:	4640      	mov	r0, r8
    afe4:	f7f5 fed6 	bl	d94 <__aeabi_fmul>
    afe8:	1c31      	adds	r1, r6, #0
    afea:	f7f5 fb83 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1397
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
    afee:	9a04      	ldr	r2, [sp, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    aff0:	c401      	stmia	r4!, {r0}
    aff2:	3504      	adds	r5, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1397
	for (i = 0; i < 12; i++) // loop over rows of K12x6
	{
		// initialize pfK12x6ij for current i, j=0
		pfK12x6ij = pthisSV->fK12x6[i];

		for (j = 0; j < 6; j++) // loop over columns of K12x6
    aff4:	4294      	cmp	r4, r2
    aff6:	d1bb      	bne.n	af70 <fRun_9DOF_GBY_KALMAN+0x2e9c>
    aff8:	465d      	mov	r5, fp
    affa:	f7fd fdab 	bl	8b54 <fRun_9DOF_GBY_KALMAN+0xa80>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    affe:	6b29      	ldr	r1, [r5, #48]	; 0x30
    b000:	1c30      	adds	r0, r6, #0
    b002:	f7f5 fec7 	bl	d94 <__aeabi_fmul>
    b006:	2100      	movs	r1, #0
    b008:	f7f5 fb74 	bl	6f4 <__aeabi_fadd>
    b00c:	4681      	mov	r9, r0
    b00e:	6020      	str	r0, [r4, #0]
    b010:	e619      	b.n	ac46 <fRun_9DOF_GBY_KALMAN+0x2b72>
    b012:	6b29      	ldr	r1, [r5, #48]	; 0x30
    b014:	1c30      	adds	r0, r6, #0
    b016:	f7f5 febd 	bl	d94 <__aeabi_fmul>
    b01a:	2100      	movs	r1, #0
    b01c:	f7f5 fb6a 	bl	6f4 <__aeabi_fadd>
    b020:	4680      	mov	r8, r0
    b022:	6020      	str	r0, [r4, #0]
    b024:	e435      	b.n	a892 <fRun_9DOF_GBY_KALMAN+0x27be>
    b026:	6b29      	ldr	r1, [r5, #48]	; 0x30
    b028:	1c30      	adds	r0, r6, #0
    b02a:	f7f5 feb3 	bl	d94 <__aeabi_fmul>
    b02e:	2100      	movs	r1, #0
    b030:	f7f5 fb60 	bl	6f4 <__aeabi_fadd>
    b034:	4680      	mov	r8, r0
    b036:	6020      	str	r0, [r4, #0]
    b038:	f7ff f9f6 	bl	a428 <fRun_9DOF_GBY_KALMAN+0x2354>
    b03c:	6f69      	ldr	r1, [r5, #116]	; 0x74
    b03e:	1c38      	adds	r0, r7, #0
    b040:	f7f5 fea8 	bl	d94 <__aeabi_fmul>
    b044:	1c01      	adds	r1, r0, #0
    b046:	4640      	mov	r0, r8
    b048:	f7f5 fb54 	bl	6f4 <__aeabi_fadd>
    b04c:	4680      	mov	r8, r0
    b04e:	6160      	str	r0, [r4, #20]
    b050:	f7ff f89d 	bl	a18e <fRun_9DOF_GBY_KALMAN+0x20ba>
    b054:	6b29      	ldr	r1, [r5, #48]	; 0x30
    b056:	1c30      	adds	r0, r6, #0
    b058:	f7f5 fe9c 	bl	d94 <__aeabi_fmul>
    b05c:	2100      	movs	r1, #0
    b05e:	f7f5 fb49 	bl	6f4 <__aeabi_fadd>
    b062:	4681      	mov	r9, r0
    b064:	6020      	str	r0, [r4, #0]
    b066:	f7fe fe3c 	bl	9ce2 <fRun_9DOF_GBY_KALMAN+0x1c0e>
    b06a:	6b29      	ldr	r1, [r5, #48]	; 0x30
    b06c:	1c30      	adds	r0, r6, #0
    b06e:	f7f5 fe91 	bl	d94 <__aeabi_fmul>
    b072:	2100      	movs	r1, #0
    b074:	f7f5 fb3e 	bl	6f4 <__aeabi_fadd>
    b078:	4680      	mov	r8, r0
    b07a:	6020      	str	r0, [r4, #0]
    b07c:	f7fe fcdc 	bl	9a38 <fRun_9DOF_GBY_KALMAN+0x1964>
    b080:	6b29      	ldr	r1, [r5, #48]	; 0x30
    b082:	1c30      	adds	r0, r6, #0
    b084:	f7f5 fe86 	bl	d94 <__aeabi_fmul>
    b088:	2100      	movs	r1, #0
    b08a:	f7f5 fb33 	bl	6f4 <__aeabi_fadd>
    b08e:	4681      	mov	r9, r0
    b090:	6020      	str	r0, [r4, #0]
    b092:	f7fe fbd0 	bl	9836 <fRun_9DOF_GBY_KALMAN+0x1762>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1528
		break;
	case ANDROID:
		// acceleration positive ENU
		pthisSV->faGlPl[X] = pthisSV->faGlPl[X];
		pthisSV->faGlPl[Y] = pthisSV->faGlPl[Y];
		pthisSV->faGlPl[Z] = pthisSV->faGlPl[Z] - 1.0F;
    b096:	21fe      	movs	r1, #254	; 0xfe
    b098:	0589      	lsls	r1, r1, #22
    b09a:	f7f5 ffa5 	bl	fe8 <__aeabi_fsub>
    b09e:	465a      	mov	r2, fp
    b0a0:	5150      	str	r0, [r2, r5]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1540
		pthisSV->faGlPl[Z] = -(pthisSV->faGlPl[Z] + 1.0F);
		break;
	}

	// update the reference geomagnetic vector using magnetic disturbance error if valid calibration and no jamming
	if (pthisMagCal->iValidMagCal && !iMagJamming)
    b0a2:	4be9      	ldr	r3, [pc, #932]	; (b448 <fRun_9DOF_GBY_KALMAN+0x3374>)
    b0a4:	9878      	ldr	r0, [sp, #480]	; 0x1e0
    b0a6:	56c3      	ldrsb	r3, [r0, r3]
    b0a8:	2b00      	cmp	r3, #0
    b0aa:	d001      	beq.n	b0b0 <fRun_9DOF_GBY_KALMAN+0x2fdc>
    b0ac:	f7fe f875 	bl	919a <fRun_9DOF_GBY_KALMAN+0x10c6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1638

	// *********************************************************************************
	// compute the a posteriori Euler angles from the orientation matrix
	// *********************************************************************************

	if (ithisCoordSystem == NED)
    b0b0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    b0b2:	2f00      	cmp	r7, #0
    b0b4:	d101      	bne.n	b0ba <fRun_9DOF_GBY_KALMAN+0x2fe6>
    b0b6:	f7fe f918 	bl	92ea <fRun_9DOF_GBY_KALMAN+0x1216>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1647
				&(pthisSV->fRhoPl), &(pthisSV->fChiPl));
	}
	else if (ithisCoordSystem == ANDROID)
	{
		// calculate the Android Euler angles
		fAndroidAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
    b0ba:	465b      	mov	r3, fp
    b0bc:	330c      	adds	r3, #12
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1644
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
				&(pthisSV->fRhoPl), &(pthisSV->fChiPl));
	}
	else if (ithisCoordSystem == ANDROID)
    b0be:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1647
	{
		// calculate the Android Euler angles
		fAndroidAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
    b0c0:	465a      	mov	r2, fp
    b0c2:	9300      	str	r3, [sp, #0]
    b0c4:	3304      	adds	r3, #4
    b0c6:	9301      	str	r3, [sp, #4]
    b0c8:	3204      	adds	r2, #4
    b0ca:	980e      	ldr	r0, [sp, #56]	; 0x38
    b0cc:	4659      	mov	r1, fp
    b0ce:	3b08      	subs	r3, #8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1644
	{
		// calculate the NED Euler angles
		fNEDAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
				&(pthisSV->fRhoPl), &(pthisSV->fChiPl));
	}
	else if (ithisCoordSystem == ANDROID)
    b0d0:	2c01      	cmp	r4, #1
    b0d2:	d101      	bne.n	b0d8 <fRun_9DOF_GBY_KALMAN+0x3004>
    b0d4:	f000 fd16 	bl	bb04 <fRun_9DOF_GBY_KALMAN+0x3a30>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1653
				&(pthisSV->fRhoPl), &(pthisSV->fChiPl));
	}
	else
	{
		// calculate Win8 Euler angles
		fWin8AnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
    b0d8:	f004 fb2a 	bl	f730 <fWin8AnglesDegFromRotationMatrix>
    b0dc:	209a      	movs	r0, #154	; 0x9a
    b0de:	0080      	lsls	r0, r0, #2
    b0e0:	9c12      	ldr	r4, [sp, #72]	; 0x48
    b0e2:	1c07      	adds	r7, r0, #0
    b0e4:	445f      	add	r7, fp
    b0e6:	4659      	mov	r1, fp
    b0e8:	9704      	str	r7, [sp, #16]
    b0ea:	9105      	str	r1, [sp, #20]
    b0ec:	46a3      	mov	fp, r4
    b0ee:	20ae      	movs	r0, #174	; 0xae
    b0f0:	00c0      	lsls	r0, r0, #3
    b0f2:	2730      	movs	r7, #48	; 0x30
    b0f4:	427f      	negs	r7, r7
    b0f6:	1c04      	adds	r4, r0, #0
    b0f8:	20b4      	movs	r0, #180	; 0xb4
    b0fa:	46b9      	mov	r9, r7
    b0fc:	00c0      	lsls	r0, r0, #3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1622
					fsindelta = SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
				}
				else if (fsindelta < -SINDELTAMAX)
				{
					fsindelta = -SINDELTAMAX;
    b0fe:	9f06      	ldr	r7, [sp, #24]
    b100:	445c      	add	r4, fp
    b102:	4680      	mov	r8, r0
    b104:	44d9      	add	r9, fp
    b106:	9403      	str	r4, [sp, #12]
    b108:	46ba      	mov	sl, r7
    b10a:	44d8      	add	r8, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1675
		pfPPlus12x12ij = pthisSV->fPPlus12x12[i];

		for (j = 0; j < 12; j++)
		{
			// zero P+[i][j] 
			*pfPPlus12x12ij = 0.0F;
    b10c:	2200      	movs	r2, #0
    b10e:	4649      	mov	r1, r9
    b110:	600a      	str	r2, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1681

			// initialize pfC6x12ik for current i, k=0
			pfC6x12ik = pthisSV->fC6x12[i];

			// initialize pfQw12x12kj for current j, k=0
			pfQw12x12kj = &pthisSV->fQw12x12[0][j];
    b112:	4655      	mov	r5, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1678
		{
			// zero P+[i][j] 
			*pfPPlus12x12ij = 0.0F;

			// initialize pfC6x12ik for current i, k=0
			pfC6x12ik = pthisSV->fC6x12[i];
    b114:	9c03      	ldr	r4, [sp, #12]
    b116:	4647      	mov	r7, r8
    b118:	e00a      	b.n	b130 <fRun_9DOF_GBY_KALMAN+0x305c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1689
			for (k = 0; k < 12; k++)
			{
				if ((*pfC6x12ik != 0.0F) && (*pfQw12x12kj != 0.0F))
				{
					if (*pfC6x12ik == 1.0F)
						*pfPPlus12x12ij += *pfQw12x12kj;
    b11a:	4649      	mov	r1, r9
    b11c:	6808      	ldr	r0, [r1, #0]
    b11e:	4641      	mov	r1, r8
    b120:	f7f5 fae8 	bl	6f4 <__aeabi_fadd>
    b124:	464a      	mov	r2, r9
    b126:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1697
					else
						*pfPPlus12x12ij += *pfC6x12ik * *pfQw12x12kj;
				}

				// update pfC6x12ik and pfQw12x12kj for next iteration of k
				pfC6x12ik++;
    b128:	3404      	adds	r4, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1698
				pfQw12x12kj += 12;
    b12a:	3530      	adds	r5, #48	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1684

			// initialize pfQw12x12kj for current j, k=0
			pfQw12x12kj = &pthisSV->fQw12x12[0][j];

			// sum matrix products over inner loop over k
			for (k = 0; k < 12; k++)
    b12c:	42bc      	cmp	r4, r7
    b12e:	d027      	beq.n	b180 <fRun_9DOF_GBY_KALMAN+0x30ac>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1686
			{
				if ((*pfC6x12ik != 0.0F) && (*pfQw12x12kj != 0.0F))
    b130:	6826      	ldr	r6, [r4, #0]
    b132:	2100      	movs	r1, #0
    b134:	1c30      	adds	r0, r6, #0
    b136:	f7f5 faaf 	bl	698 <__aeabi_fcmpeq>
    b13a:	2800      	cmp	r0, #0
    b13c:	d1f4      	bne.n	b128 <fRun_9DOF_GBY_KALMAN+0x3054>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1686 (discriminator 1)
    b13e:	682b      	ldr	r3, [r5, #0]
    b140:	2100      	movs	r1, #0
    b142:	1c18      	adds	r0, r3, #0
    b144:	4698      	mov	r8, r3
    b146:	f7f5 faa7 	bl	698 <__aeabi_fcmpeq>
    b14a:	2800      	cmp	r0, #0
    b14c:	d1ec      	bne.n	b128 <fRun_9DOF_GBY_KALMAN+0x3054>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1688
				{
					if (*pfC6x12ik == 1.0F)
    b14e:	21fe      	movs	r1, #254	; 0xfe
    b150:	1c30      	adds	r0, r6, #0
    b152:	0589      	lsls	r1, r1, #22
    b154:	f7f5 faa0 	bl	698 <__aeabi_fcmpeq>
    b158:	2800      	cmp	r0, #0
    b15a:	d1de      	bne.n	b11a <fRun_9DOF_GBY_KALMAN+0x3046>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1690
						*pfPPlus12x12ij += *pfQw12x12kj;
					else if (*pfC6x12ik == -1.0F)
    b15c:	1c30      	adds	r0, r6, #0
    b15e:	49bb      	ldr	r1, [pc, #748]	; (b44c <fRun_9DOF_GBY_KALMAN+0x3378>)
    b160:	f7f5 fa9a 	bl	698 <__aeabi_fcmpeq>
    b164:	2800      	cmp	r0, #0
    b166:	d100      	bne.n	b16a <fRun_9DOF_GBY_KALMAN+0x3096>
    b168:	e161      	b.n	b42e <fRun_9DOF_GBY_KALMAN+0x335a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1691
						*pfPPlus12x12ij -= *pfQw12x12kj;
    b16a:	464b      	mov	r3, r9
    b16c:	6818      	ldr	r0, [r3, #0]
    b16e:	4641      	mov	r1, r8
    b170:	f7f5 ff3a 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1697
					else
						*pfPPlus12x12ij += *pfC6x12ik * *pfQw12x12kj;
				}

				// update pfC6x12ik and pfQw12x12kj for next iteration of k
				pfC6x12ik++;
    b174:	3404      	adds	r4, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1691
				if ((*pfC6x12ik != 0.0F) && (*pfQw12x12kj != 0.0F))
				{
					if (*pfC6x12ik == 1.0F)
						*pfPPlus12x12ij += *pfQw12x12kj;
					else if (*pfC6x12ik == -1.0F)
						*pfPPlus12x12ij -= *pfQw12x12kj;
    b176:	4649      	mov	r1, r9
    b178:	6008      	str	r0, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1698
						*pfPPlus12x12ij += *pfC6x12ik * *pfQw12x12kj;
				}

				// update pfC6x12ik and pfQw12x12kj for next iteration of k
				pfC6x12ik++;
				pfQw12x12kj += 12;
    b17a:	3530      	adds	r5, #48	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1684

			// initialize pfQw12x12kj for current j, k=0
			pfQw12x12kj = &pthisSV->fQw12x12[0][j];

			// sum matrix products over inner loop over k
			for (k = 0; k < 12; k++)
    b17c:	42bc      	cmp	r4, r7
    b17e:	d1d7      	bne.n	b130 <fRun_9DOF_GBY_KALMAN+0x305c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1703
				pfQw12x12kj += 12;

			} // end of loop over k

			// increment pfPPlus12x12ij for next iteration of j
			pfPPlus12x12ij++;
    b180:	2404      	movs	r4, #4
    b182:	44a1      	add	r9, r4
    b184:	46b8      	mov	r8, r7
    b186:	44a2      	add	sl, r4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1672
	for (i = 0; i < 6; i++)
	{
		// initialize pfPPlus12x12ij for current i, j=0
		pfPPlus12x12ij = pthisSV->fPPlus12x12[i];

		for (j = 0; j < 12; j++)
    b188:	45d9      	cmp	r9, fp
    b18a:	d1bf      	bne.n	b10c <fRun_9DOF_GBY_KALMAN+0x3038>
    b18c:	2730      	movs	r7, #48	; 0x30
    b18e:	46bb      	mov	fp, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1667
	// ***********************************************************************************

	// set P+ (6x12 scratch sub-matrix) to the product C (6x12) * Qw (12x12)
	// where both C and Qw are sparse and C has a significant number of +1 and -1 entries
	// the resulting matrix is sparse but not symmetric
	for (i = 0; i < 6; i++)
    b190:	9c04      	ldr	r4, [sp, #16]
    b192:	44cb      	add	fp, r9
    b194:	45a3      	cmp	fp, r4
    b196:	d1aa      	bne.n	b0ee <fRun_9DOF_GBY_KALMAN+0x301a>
    b198:	9f05      	ldr	r7, [sp, #20]
    b19a:	2400      	movs	r4, #0
    b19c:	46bb      	mov	fp, r7
    b19e:	20d6      	movs	r0, #214	; 0xd6
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1729

			// compute on and above diagonal matrix entry
			for (k = 0; k < 6; k++)
			{
				// check for non-zero values since P+ (6x12 scratch sub-matrix) is sparse
				if (*pfPPlus12x12kj != 0.0F)
    b1a0:	27c0      	movs	r7, #192	; 0xc0
    b1a2:	0080      	lsls	r0, r0, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1667
	// ***********************************************************************************

	// set P+ (6x12 scratch sub-matrix) to the product C (6x12) * Qw (12x12)
	// where both C and Qw are sparse and C has a significant number of +1 and -1 entries
	// the resulting matrix is sparse but not symmetric
	for (i = 0; i < 6; i++)
    b1a4:	9403      	str	r4, [sp, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1729

			// compute on and above diagonal matrix entry
			for (k = 0; k < 6; k++)
			{
				// check for non-zero values since P+ (6x12 scratch sub-matrix) is sparse
				if (*pfPPlus12x12kj != 0.0F)
    b1a6:	46ba      	mov	sl, r7
    b1a8:	465c      	mov	r4, fp
    b1aa:	9f11      	ldr	r7, [sp, #68]	; 0x44
    b1ac:	1c06      	adds	r6, r0, #0
    b1ae:	9404      	str	r4, [sp, #16]
    b1b0:	20f0      	movs	r0, #240	; 0xf0
    b1b2:	9c06      	ldr	r4, [sp, #24]
    b1b4:	445e      	add	r6, fp
    b1b6:	4681      	mov	r9, r0
    b1b8:	46bb      	mov	fp, r7
    b1ba:	9f03      	ldr	r7, [sp, #12]
    b1bc:	b27d      	sxtb	r5, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1723
		{
			// initialize pfK12x6ik for current i, k=0
			pfK12x6ik = pthisSV->fK12x6[i];

			// initialize pfPPlus12x12kj for current j, k=0
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;
    b1be:	00ad      	lsls	r5, r5, #2
    b1c0:	445d      	add	r5, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1729

			// compute on and above diagonal matrix entry
			for (k = 0; k < 6; k++)
			{
				// check for non-zero values since P+ (6x12 scratch sub-matrix) is sparse
				if (*pfPPlus12x12kj != 0.0F)
    b1c2:	6828      	ldr	r0, [r5, #0]
    b1c4:	2100      	movs	r1, #0
    b1c6:	4680      	mov	r8, r0
    b1c8:	f7f5 fa66 	bl	698 <__aeabi_fcmpeq>
    b1cc:	2800      	cmp	r0, #0
    b1ce:	d108      	bne.n	b1e2 <fRun_9DOF_GBY_KALMAN+0x310e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1731
				{
					*pfQw12x12ij -= *pfK12x6ik * *pfPPlus12x12kj;
    b1d0:	6831      	ldr	r1, [r6, #0]
    b1d2:	4640      	mov	r0, r8
    b1d4:	f7f5 fdde 	bl	d94 <__aeabi_fmul>
    b1d8:	1c01      	adds	r1, r0, #0
    b1da:	6820      	ldr	r0, [r4, #0]
    b1dc:	f7f5 ff04 	bl	fe8 <__aeabi_fsub>
    b1e0:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1729

			// compute on and above diagonal matrix entry
			for (k = 0; k < 6; k++)
			{
				// check for non-zero values since P+ (6x12 scratch sub-matrix) is sparse
				if (*pfPPlus12x12kj != 0.0F)
    b1e2:	6b29      	ldr	r1, [r5, #48]	; 0x30
    b1e4:	4688      	mov	r8, r1
    b1e6:	1c08      	adds	r0, r1, #0
    b1e8:	2100      	movs	r1, #0
    b1ea:	f7f5 fa55 	bl	698 <__aeabi_fcmpeq>
    b1ee:	2800      	cmp	r0, #0
    b1f0:	d108      	bne.n	b204 <fRun_9DOF_GBY_KALMAN+0x3130>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1731
				{
					*pfQw12x12ij -= *pfK12x6ik * *pfPPlus12x12kj;
    b1f2:	6871      	ldr	r1, [r6, #4]
    b1f4:	4640      	mov	r0, r8
    b1f6:	f7f5 fdcd 	bl	d94 <__aeabi_fmul>
    b1fa:	1c01      	adds	r1, r0, #0
    b1fc:	6820      	ldr	r0, [r4, #0]
    b1fe:	f7f5 fef3 	bl	fe8 <__aeabi_fsub>
    b202:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1729

			// compute on and above diagonal matrix entry
			for (k = 0; k < 6; k++)
			{
				// check for non-zero values since P+ (6x12 scratch sub-matrix) is sparse
				if (*pfPPlus12x12kj != 0.0F)
    b204:	6e2a      	ldr	r2, [r5, #96]	; 0x60
    b206:	2100      	movs	r1, #0
    b208:	1c10      	adds	r0, r2, #0
    b20a:	4690      	mov	r8, r2
    b20c:	f7f5 fa44 	bl	698 <__aeabi_fcmpeq>
    b210:	2800      	cmp	r0, #0
    b212:	d108      	bne.n	b226 <fRun_9DOF_GBY_KALMAN+0x3152>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1731
				{
					*pfQw12x12ij -= *pfK12x6ik * *pfPPlus12x12kj;
    b214:	68b1      	ldr	r1, [r6, #8]
    b216:	4640      	mov	r0, r8
    b218:	f7f5 fdbc 	bl	d94 <__aeabi_fmul>
    b21c:	1c01      	adds	r1, r0, #0
    b21e:	6820      	ldr	r0, [r4, #0]
    b220:	f7f5 fee2 	bl	fe8 <__aeabi_fsub>
    b224:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1729

			// compute on and above diagonal matrix entry
			for (k = 0; k < 6; k++)
			{
				// check for non-zero values since P+ (6x12 scratch sub-matrix) is sparse
				if (*pfPPlus12x12kj != 0.0F)
    b226:	2390      	movs	r3, #144	; 0x90
    b228:	58eb      	ldr	r3, [r5, r3]
    b22a:	2100      	movs	r1, #0
    b22c:	1c18      	adds	r0, r3, #0
    b22e:	4698      	mov	r8, r3
    b230:	f7f5 fa32 	bl	698 <__aeabi_fcmpeq>
    b234:	2800      	cmp	r0, #0
    b236:	d108      	bne.n	b24a <fRun_9DOF_GBY_KALMAN+0x3176>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1731
				{
					*pfQw12x12ij -= *pfK12x6ik * *pfPPlus12x12kj;
    b238:	68f1      	ldr	r1, [r6, #12]
    b23a:	4640      	mov	r0, r8
    b23c:	f7f5 fdaa 	bl	d94 <__aeabi_fmul>
    b240:	1c01      	adds	r1, r0, #0
    b242:	6820      	ldr	r0, [r4, #0]
    b244:	f7f5 fed0 	bl	fe8 <__aeabi_fsub>
    b248:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1729

			// compute on and above diagonal matrix entry
			for (k = 0; k < 6; k++)
			{
				// check for non-zero values since P+ (6x12 scratch sub-matrix) is sparse
				if (*pfPPlus12x12kj != 0.0F)
    b24a:	4650      	mov	r0, sl
    b24c:	5828      	ldr	r0, [r5, r0]
    b24e:	2100      	movs	r1, #0
    b250:	4680      	mov	r8, r0
    b252:	f7f5 fa21 	bl	698 <__aeabi_fcmpeq>
    b256:	2800      	cmp	r0, #0
    b258:	d108      	bne.n	b26c <fRun_9DOF_GBY_KALMAN+0x3198>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1731
				{
					*pfQw12x12ij -= *pfK12x6ik * *pfPPlus12x12kj;
    b25a:	6931      	ldr	r1, [r6, #16]
    b25c:	4640      	mov	r0, r8
    b25e:	f7f5 fd99 	bl	d94 <__aeabi_fmul>
    b262:	1c01      	adds	r1, r0, #0
    b264:	6820      	ldr	r0, [r4, #0]
    b266:	f7f5 febf 	bl	fe8 <__aeabi_fsub>
    b26a:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1729

			// compute on and above diagonal matrix entry
			for (k = 0; k < 6; k++)
			{
				// check for non-zero values since P+ (6x12 scratch sub-matrix) is sparse
				if (*pfPPlus12x12kj != 0.0F)
    b26c:	4649      	mov	r1, r9
    b26e:	586d      	ldr	r5, [r5, r1]
    b270:	2100      	movs	r1, #0
    b272:	1c28      	adds	r0, r5, #0
    b274:	f7f5 fa10 	bl	698 <__aeabi_fcmpeq>
    b278:	2800      	cmp	r0, #0
    b27a:	d108      	bne.n	b28e <fRun_9DOF_GBY_KALMAN+0x31ba>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1731
				{
					*pfQw12x12ij -= *pfK12x6ik * *pfPPlus12x12kj;
    b27c:	6971      	ldr	r1, [r6, #20]
    b27e:	1c28      	adds	r0, r5, #0
    b280:	f7f5 fd88 	bl	d94 <__aeabi_fmul>
    b284:	1c01      	adds	r1, r0, #0
    b286:	6820      	ldr	r0, [r4, #0]
    b288:	f7f5 feae 	bl	fe8 <__aeabi_fsub>
    b28c:	6020      	str	r0, [r4, #0]
    b28e:	3701      	adds	r7, #1
    b290:	b2ff      	uxtb	r7, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1717
	for (i = 0; i < 12; i++)
	{
		// initialize pfQw12x12ij for current i, j=i
		pfQw12x12ij = pthisSV->fQw12x12[i] + i;

		for (j = i; j < 12; j++)
    b292:	b27d      	sxtb	r5, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1741
				pfPPlus12x12kj += 12;

			} // end of loop over k

			// increment pfQw12x12ij for next iteration of j
			pfQw12x12ij++;
    b294:	3404      	adds	r4, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1717
	for (i = 0; i < 12; i++)
	{
		// initialize pfQw12x12ij for current i, j=i
		pfQw12x12ij = pthisSV->fQw12x12[i] + i;

		for (j = i; j < 12; j++)
    b296:	2d0b      	cmp	r5, #11
    b298:	dd91      	ble.n	b1be <fRun_9DOF_GBY_KALMAN+0x30ea>
    b29a:	9b03      	ldr	r3, [sp, #12]
    b29c:	9c06      	ldr	r4, [sp, #24]
    b29e:	3301      	adds	r3, #1
    b2a0:	b2db      	uxtb	r3, r3
    b2a2:	3434      	adds	r4, #52	; 0x34
    b2a4:	9303      	str	r3, [sp, #12]
    b2a6:	9406      	str	r4, [sp, #24]
    b2a8:	3618      	adds	r6, #24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1712

	// compute P+ = (I12 - K * C) * Qw = Qw - K * (C * Qw) = Qw - K * P+ (6x12 sub-matrix)
	// storing result P+ in Qw and over-writing Qw which is OK since Qw is later computed from P+
	// where working array P+ (6x12 sub-matrix) is sparse but K is not sparse
	// only on and above diagonal terms of P+ are computed since P+ is symmetric
	for (i = 0; i < 12; i++)
    b2aa:	2b0c      	cmp	r3, #12
    b2ac:	d185      	bne.n	b1ba <fRun_9DOF_GBY_KALMAN+0x30e6>
    b2ae:	9f04      	ldr	r7, [sp, #16]
    b2b0:	208e      	movs	r0, #142	; 0x8e
    b2b2:	0040      	lsls	r0, r0, #1
    b2b4:	46bb      	mov	fp, r7
    b2b6:	1c06      	adds	r6, r0, #0
    b2b8:	2100      	movs	r1, #0
    b2ba:	445e      	add	r6, fp
    b2bc:	1c0d      	adds	r5, r1, #0
    b2be:	468c      	mov	ip, r1
    b2c0:	46b0      	mov	r8, r6
    b2c2:	22d7      	movs	r2, #215	; 0xd7
    b2c4:	0092      	lsls	r2, r2, #2
    b2c6:	1c13      	adds	r3, r2, #0
    b2c8:	4443      	add	r3, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1756
		// initialize pfPPlus12x12ij and pfQw12x12ij for current i, j=i
		pfPPlus12x12ij = pthisSV->fPPlus12x12[i] + i;
		pfQw12x12ij = pthisSV->fQw12x12[i] + i;

		// copy the on-diagonal elements and increment pointers to enter loop at j=i+1
		*(pfPPlus12x12ij++) = *(pfQw12x12ij++);
    b2ca:	681a      	ldr	r2, [r3, #0]
    b2cc:	4643      	mov	r3, r8
    b2ce:	3b04      	subs	r3, #4
    b2d0:	601a      	str	r2, [r3, #0]
    b2d2:	4663      	mov	r3, ip
    b2d4:	3301      	adds	r3, #1
    b2d6:	b2db      	uxtb	r3, r3
    b2d8:	469c      	mov	ip, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1759

		// loop over above diagonal columns j copying to below-diagonal elements
		for (j = i + 1; j < 12; j++)
    b2da:	b25b      	sxtb	r3, r3
    b2dc:	2b0c      	cmp	r3, #12
    b2de:	d100      	bne.n	b2e2 <fRun_9DOF_GBY_KALMAN+0x320e>
    b2e0:	e0ba      	b.n	b458 <fRun_9DOF_GBY_KALMAN+0x3384>
    b2e2:	20d8      	movs	r0, #216	; 0xd8
    b2e4:	0080      	lsls	r0, r0, #2
    b2e6:	1c04      	adds	r4, r0, #0
    b2e8:	4444      	add	r4, r8
    b2ea:	4640      	mov	r0, r8
    b2ec:	4662      	mov	r2, ip
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1761 (discriminator 2)
		{
			*(pfPPlus12x12ij++)= pthisSV->fPPlus12x12[j][i] = *(pfQw12x12ij++);
    b2ee:	005e      	lsls	r6, r3, #1
    b2f0:	18f3      	adds	r3, r6, r3
    b2f2:	009b      	lsls	r3, r3, #2
    b2f4:	195b      	adds	r3, r3, r5
    b2f6:	cc02      	ldmia	r4!, {r1}
    b2f8:	3346      	adds	r3, #70	; 0x46
    b2fa:	3201      	adds	r2, #1
    b2fc:	009b      	lsls	r3, r3, #2
    b2fe:	b2d2      	uxtb	r2, r2
    b300:	51d9      	str	r1, [r3, r7]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1759 (discriminator 2)

		// copy the on-diagonal elements and increment pointers to enter loop at j=i+1
		*(pfPPlus12x12ij++) = *(pfQw12x12ij++);

		// loop over above diagonal columns j copying to below-diagonal elements
		for (j = i + 1; j < 12; j++)
    b302:	b253      	sxtb	r3, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1761 (discriminator 2)
		{
			*(pfPPlus12x12ij++)= pthisSV->fPPlus12x12[j][i] = *(pfQw12x12ij++);
    b304:	c002      	stmia	r0!, {r1}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1759 (discriminator 2)

		// copy the on-diagonal elements and increment pointers to enter loop at j=i+1
		*(pfPPlus12x12ij++) = *(pfQw12x12ij++);

		// loop over above diagonal columns j copying to below-diagonal elements
		for (j = i + 1; j < 12; j++)
    b306:	2b0c      	cmp	r3, #12
    b308:	d1f1      	bne.n	b2ee <fRun_9DOF_GBY_KALMAN+0x321a>
    b30a:	2034      	movs	r0, #52	; 0x34
    b30c:	3501      	adds	r5, #1
    b30e:	4480      	add	r8, r0
    b310:	e7d7      	b.n	b2c2 <fRun_9DOF_GBY_KALMAN+0x31ee>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1413
			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
				{
					*pfK12x6ij += *pftmpA12x6ik * *pfPPlus12x12kj;
    b312:	6b29      	ldr	r1, [r5, #48]	; 0x30
    b314:	1c30      	adds	r0, r6, #0
    b316:	f7f5 fd3d 	bl	d94 <__aeabi_fmul>
    b31a:	2100      	movs	r1, #0
    b31c:	f7f5 f9ea 	bl	6f4 <__aeabi_fadd>
    b320:	4680      	mov	r8, r0
    b322:	6020      	str	r0, [r4, #0]
    b324:	f7fd fb63 	bl	89ee <fRun_9DOF_GBY_KALMAN+0x91a>
    b328:	4658      	mov	r0, fp
    b32a:	58c7      	ldr	r7, [r0, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1208
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    b32c:	23fc      	movs	r3, #252	; 0xfc
    b32e:	00db      	lsls	r3, r3, #3
    b330:	58c5      	ldr	r5, [r0, r3]
    b332:	2180      	movs	r1, #128	; 0x80
    b334:	0609      	lsls	r1, r1, #24
    b336:	186a      	adds	r2, r5, r1
    b338:	23ec      	movs	r3, #236	; 0xec
    b33a:	50c2      	str	r2, [r0, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    b33c:	21fc      	movs	r1, #252	; 0xfc
    b33e:	23bc      	movs	r3, #188	; 0xbc
    b340:	58c0      	ldr	r0, [r0, r3]
    b342:	0589      	lsls	r1, r1, #22
    b344:	f7f5 fd26 	bl	d94 <__aeabi_fmul>
    b348:	465a      	mov	r2, fp
    b34a:	23ac      	movs	r3, #172	; 0xac
    b34c:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    b34e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b350:	68d9      	ldr	r1, [r3, #12]
    b352:	f7f5 f9cf 	bl	6f4 <__aeabi_fadd>
    b356:	1c01      	adds	r1, r0, #0
    b358:	1c28      	adds	r0, r5, #0
    b35a:	f7f5 f9cb 	bl	6f4 <__aeabi_fadd>
    b35e:	4659      	mov	r1, fp
    b360:	23d4      	movs	r3, #212	; 0xd4
    b362:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    b364:	4b3a      	ldr	r3, [pc, #232]	; (b450 <fRun_9DOF_GBY_KALMAN+0x337c>)
    b366:	1c38      	adds	r0, r7, #0
    b368:	58c9      	ldr	r1, [r1, r3]
    b36a:	f7f5 fd13 	bl	d94 <__aeabi_fmul>
    b36e:	1c21      	adds	r1, r4, #0
    b370:	1c06      	adds	r6, r0, #0
    b372:	1c28      	adds	r0, r5, #0
    b374:	f7f5 fd0e 	bl	d94 <__aeabi_fmul>
    b378:	1c01      	adds	r1, r0, #0
    b37a:	1c30      	adds	r0, r6, #0
    b37c:	f7f5 f9ba 	bl	6f4 <__aeabi_fadd>
    b380:	465a      	mov	r2, fp
    b382:	23f8      	movs	r3, #248	; 0xf8
    b384:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    b386:	9b05      	ldr	r3, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    b388:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    b38a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    b38c:	f7f5 fe2c 	bl	fe8 <__aeabi_fsub>
    b390:	4659      	mov	r1, fp
    b392:	23e0      	movs	r3, #224	; 0xe0
    b394:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1208
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    b396:	4b2f      	ldr	r3, [pc, #188]	; (b454 <fRun_9DOF_GBY_KALMAN+0x3380>)
    b398:	58cd      	ldr	r5, [r1, r3]
    b39a:	2380      	movs	r3, #128	; 0x80
    b39c:	061b      	lsls	r3, r3, #24
    b39e:	18ea      	adds	r2, r5, r3
    b3a0:	23f0      	movs	r3, #240	; 0xf0
    b3a2:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    b3a4:	23c0      	movs	r3, #192	; 0xc0
    b3a6:	58c8      	ldr	r0, [r1, r3]
    b3a8:	21fc      	movs	r1, #252	; 0xfc
    b3aa:	0589      	lsls	r1, r1, #22
    b3ac:	f7f5 fcf2 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    b3b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    b3b2:	23b0      	movs	r3, #176	; 0xb0
    b3b4:	4659      	mov	r1, fp
    b3b6:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    b3b8:	6911      	ldr	r1, [r2, #16]
    b3ba:	f7f5 f99b 	bl	6f4 <__aeabi_fadd>
    b3be:	1c01      	adds	r1, r0, #0
    b3c0:	1c28      	adds	r0, r5, #0
    b3c2:	f7f5 f997 	bl	6f4 <__aeabi_fadd>
    b3c6:	4659      	mov	r1, fp
    b3c8:	23d8      	movs	r3, #216	; 0xd8
    b3ca:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    b3cc:	23fd      	movs	r3, #253	; 0xfd
    b3ce:	00db      	lsls	r3, r3, #3
    b3d0:	58c9      	ldr	r1, [r1, r3]
    b3d2:	1c38      	adds	r0, r7, #0
    b3d4:	f7f5 fcde 	bl	d94 <__aeabi_fmul>
    b3d8:	1c21      	adds	r1, r4, #0
    b3da:	1c06      	adds	r6, r0, #0
    b3dc:	1c28      	adds	r0, r5, #0
    b3de:	f7f5 fcd9 	bl	d94 <__aeabi_fmul>
    b3e2:	1c01      	adds	r1, r0, #0
    b3e4:	1c30      	adds	r0, r6, #0
    b3e6:	f7f5 f985 	bl	6f4 <__aeabi_fadd>
    b3ea:	465a      	mov	r2, fp
    b3ec:	23fc      	movs	r3, #252	; 0xfc
    b3ee:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    b3f0:	9b05      	ldr	r3, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1236
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][X] * pthisSV->fmGl[X] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
		}
		else
		{
			// Android and Windows 8 x component of geomagnetic vector in global frame is zero
			pthisSV->fmSeGyMi[i] = pthisSV->fRMi[i][Y] * pthisSV->fmGl[Y] + pthisSV->fRMi[i][Z] * pthisSV->fmGl[Z];
    b3f2:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1240
		}

		// compute the a priori geomagnetic error vector (magnetometer minus gyro estimates) (g, sensor frame)
		pthisSV->fmErrSeMi[i] = pthisMag->fBcFast[i] - pthisSV->fmSeGyMi[i];
    b3f4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    b3f6:	f7f5 fdf7 	bl	fe8 <__aeabi_fsub>
    b3fa:	4659      	mov	r1, fp
    b3fc:	23e4      	movs	r3, #228	; 0xe4
    b3fe:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1208
			pthisSV->fgSeGyMi[i] = pthisSV->fRMi[i][Z];
		}
		else
		{
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
    b400:	23ff      	movs	r3, #255	; 0xff
    b402:	00db      	lsls	r3, r3, #3
    b404:	58cd      	ldr	r5, [r1, r3]
    b406:	2380      	movs	r3, #128	; 0x80
    b408:	061b      	lsls	r3, r3, #24
    b40a:	18ea      	adds	r2, r5, r3
    b40c:	23f4      	movs	r3, #244	; 0xf4
    b40e:	50ca      	str	r2, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    b410:	23c4      	movs	r3, #196	; 0xc4
    b412:	58c8      	ldr	r0, [r1, r3]
    b414:	21fc      	movs	r1, #252	; 0xfc
    b416:	0589      	lsls	r1, r1, #22
    b418:	f7f5 fcbc 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    b41c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1212
			// Android and Win8 gravity are along negative z axis
			pthisSV->fgSeGyMi[i] = -pthisSV->fRMi[i][Z];
		}

		// compute a priori acceleration (a-) (g, sensor frame) from decayed a posteriori estimate (g, sensor frame)
		pthisSV->faSeMi[i] = FCA_9DOF_GBY_KALMAN * pthisSV->faSePl[i];
    b41e:	4659      	mov	r1, fp
    b420:	23b4      	movs	r3, #180	; 0xb4
    b422:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1218

		// compute the a priori gravity error vector (accelerometer minus gyro estimates) (g, sensor frame)
		if ((ithisCoordSystem == NED) || (ithisCoordSystem == WIN8))
		{
			// NED and Windows 8 have positive sign for gravity: y = g - a and g = y + a
			pthisSV->fgErrSeMi[i] = pthisAccel->fGpFast[i] + pthisSV->faSeMi[i] - pthisSV->fgSeGyMi[i];
    b424:	6951      	ldr	r1, [r2, #20]
    b426:	f7f5 f965 	bl	6f4 <__aeabi_fadd>
    b42a:	f7fc ffb3 	bl	8394 <fRun_9DOF_GBY_KALMAN+0x2c0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1693
					if (*pfC6x12ik == 1.0F)
						*pfPPlus12x12ij += *pfQw12x12kj;
					else if (*pfC6x12ik == -1.0F)
						*pfPPlus12x12ij -= *pfQw12x12kj;
					else
						*pfPPlus12x12ij += *pfC6x12ik * *pfQw12x12kj;
    b42e:	4641      	mov	r1, r8
    b430:	1c30      	adds	r0, r6, #0
    b432:	f7f5 fcaf 	bl	d94 <__aeabi_fmul>
    b436:	464a      	mov	r2, r9
    b438:	1c01      	adds	r1, r0, #0
    b43a:	6810      	ldr	r0, [r2, #0]
    b43c:	f7f5 f95a 	bl	6f4 <__aeabi_fadd>
    b440:	464b      	mov	r3, r9
    b442:	6018      	str	r0, [r3, #0]
    b444:	e670      	b.n	b128 <fRun_9DOF_GBY_KALMAN+0x3054>
    b446:	46c0      	nop			; (mov r8, r8)
    b448:	00000416 	.word	0x00000416
    b44c:	bf800000 	.word	0xbf800000
    b450:	000007dc 	.word	0x000007dc
    b454:	000007ec 	.word	0x000007ec
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1776
	// zero the matrix Qw
	for (i = 0; i < 12; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fQw12x12[i][j] = 0.0F;
    b458:	4afe      	ldr	r2, [pc, #1016]	; (b854 <fRun_9DOF_GBY_KALMAN+0x3780>)
    b45a:	2300      	movs	r3, #0
    b45c:	50bb      	str	r3, [r7, r2]
    b45e:	49fe      	ldr	r1, [pc, #1016]	; (b858 <fRun_9DOF_GBY_KALMAN+0x3784>)
    b460:	2290      	movs	r2, #144	; 0x90
    b462:	00d2      	lsls	r2, r2, #3
    b464:	50bb      	str	r3, [r7, r2]
    b466:	4689      	mov	r9, r1
    b468:	1c3a      	adds	r2, r7, #0
    b46a:	444a      	add	r2, r9
    b46c:	6013      	str	r3, [r2, #0]
    b46e:	2291      	movs	r2, #145	; 0x91
    b470:	00d2      	lsls	r2, r2, #3
    b472:	50bb      	str	r3, [r7, r2]
    b474:	4af9      	ldr	r2, [pc, #996]	; (b85c <fRun_9DOF_GBY_KALMAN+0x3788>)
    b476:	46bb      	mov	fp, r7
    b478:	50bb      	str	r3, [r7, r2]
    b47a:	2292      	movs	r2, #146	; 0x92
    b47c:	00d2      	lsls	r2, r2, #3
    b47e:	50bb      	str	r3, [r7, r2]
    b480:	4af7      	ldr	r2, [pc, #988]	; (b860 <fRun_9DOF_GBY_KALMAN+0x378c>)
    b482:	1c3c      	adds	r4, r7, #0
    b484:	50bb      	str	r3, [r7, r2]
    b486:	2293      	movs	r2, #147	; 0x93
    b488:	00d2      	lsls	r2, r2, #3
    b48a:	50bb      	str	r3, [r7, r2]
    b48c:	4af5      	ldr	r2, [pc, #980]	; (b864 <fRun_9DOF_GBY_KALMAN+0x3790>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1784

	// update the covariance matrix components
	for (i = 0; i < 3; i++)
	{
		// Qw[th-th-] = Qw[0-2][0-2] = E[th-(th-)^T] = Q[th+th+] + deltat^2 * (Q[b+b+] + (Qwb + QvG) * I)
		pthisSV->fQw12x12[i][i] = pthisSV->fPPlus12x12[i][i] + pthisSV->fdeltatsq * (pthisSV->fPPlus12x12[i + 3][i + 3] + pthisSV->fQwbplusQvG);
    b48e:	4659      	mov	r1, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1776
	// zero the matrix Qw
	for (i = 0; i < 12; i++)
	{
		for (j = 0; j < 12; j++)
		{
			pthisSV->fQw12x12[i][j] = 0.0F;
    b490:	50bb      	str	r3, [r7, r2]
    b492:	2294      	movs	r2, #148	; 0x94
    b494:	00d2      	lsls	r2, r2, #3
    b496:	50bb      	str	r3, [r7, r2]
    b498:	4af3      	ldr	r2, [pc, #972]	; (b868 <fRun_9DOF_GBY_KALMAN+0x3794>)
    b49a:	2080      	movs	r0, #128	; 0x80
    b49c:	50bb      	str	r3, [r7, r2]
    b49e:	2295      	movs	r2, #149	; 0x95
    b4a0:	00d2      	lsls	r2, r2, #3
    b4a2:	50bb      	str	r3, [r7, r2]
    b4a4:	2296      	movs	r2, #150	; 0x96
    b4a6:	00d2      	lsls	r2, r2, #3
    b4a8:	50bb      	str	r3, [r7, r2]
    b4aa:	4af0      	ldr	r2, [pc, #960]	; (b86c <fRun_9DOF_GBY_KALMAN+0x3798>)
    b4ac:	0600      	lsls	r0, r0, #24
    b4ae:	50bb      	str	r3, [r7, r2]
    b4b0:	4aef      	ldr	r2, [pc, #956]	; (b870 <fRun_9DOF_GBY_KALMAN+0x379c>)
    b4b2:	50bb      	str	r3, [r7, r2]
    b4b4:	2298      	movs	r2, #152	; 0x98
    b4b6:	00d2      	lsls	r2, r2, #3
    b4b8:	50bb      	str	r3, [r7, r2]
    b4ba:	4aee      	ldr	r2, [pc, #952]	; (b874 <fRun_9DOF_GBY_KALMAN+0x37a0>)
    b4bc:	50bb      	str	r3, [r7, r2]
    b4be:	2299      	movs	r2, #153	; 0x99
    b4c0:	00d2      	lsls	r2, r2, #3
    b4c2:	50bb      	str	r3, [r7, r2]
    b4c4:	4aec      	ldr	r2, [pc, #944]	; (b878 <fRun_9DOF_GBY_KALMAN+0x37a4>)
    b4c6:	50bb      	str	r3, [r7, r2]
    b4c8:	229a      	movs	r2, #154	; 0x9a
    b4ca:	00d2      	lsls	r2, r2, #3
    b4cc:	50bb      	str	r3, [r7, r2]
    b4ce:	4aeb      	ldr	r2, [pc, #940]	; (b87c <fRun_9DOF_GBY_KALMAN+0x37a8>)
    b4d0:	50bb      	str	r3, [r7, r2]
    b4d2:	229b      	movs	r2, #155	; 0x9b
    b4d4:	00d2      	lsls	r2, r2, #3
    b4d6:	50bb      	str	r3, [r7, r2]
    b4d8:	4ae9      	ldr	r2, [pc, #932]	; (b880 <fRun_9DOF_GBY_KALMAN+0x37ac>)
    b4da:	50bb      	str	r3, [r7, r2]
    b4dc:	4ae9      	ldr	r2, [pc, #932]	; (b884 <fRun_9DOF_GBY_KALMAN+0x37b0>)
    b4de:	50bb      	str	r3, [r7, r2]
    b4e0:	229d      	movs	r2, #157	; 0x9d
    b4e2:	00d2      	lsls	r2, r2, #3
    b4e4:	50bb      	str	r3, [r7, r2]
    b4e6:	229e      	movs	r2, #158	; 0x9e
    b4e8:	00d2      	lsls	r2, r2, #3
    b4ea:	50bb      	str	r3, [r7, r2]
    b4ec:	4ae6      	ldr	r2, [pc, #920]	; (b888 <fRun_9DOF_GBY_KALMAN+0x37b4>)
    b4ee:	50bb      	str	r3, [r7, r2]
    b4f0:	229f      	movs	r2, #159	; 0x9f
    b4f2:	00d2      	lsls	r2, r2, #3
    b4f4:	50bb      	str	r3, [r7, r2]
    b4f6:	4ae5      	ldr	r2, [pc, #916]	; (b88c <fRun_9DOF_GBY_KALMAN+0x37b8>)
    b4f8:	50bb      	str	r3, [r7, r2]
    b4fa:	22a0      	movs	r2, #160	; 0xa0
    b4fc:	00d2      	lsls	r2, r2, #3
    b4fe:	50bb      	str	r3, [r7, r2]
    b500:	4ae3      	ldr	r2, [pc, #908]	; (b890 <fRun_9DOF_GBY_KALMAN+0x37bc>)
    b502:	50bb      	str	r3, [r7, r2]
    b504:	4ae3      	ldr	r2, [pc, #908]	; (b894 <fRun_9DOF_GBY_KALMAN+0x37c0>)
    b506:	50bb      	str	r3, [r7, r2]
    b508:	22a2      	movs	r2, #162	; 0xa2
    b50a:	00d2      	lsls	r2, r2, #3
    b50c:	50bb      	str	r3, [r7, r2]
    b50e:	22a3      	movs	r2, #163	; 0xa3
    b510:	00d2      	lsls	r2, r2, #3
    b512:	50bb      	str	r3, [r7, r2]
    b514:	4ae0      	ldr	r2, [pc, #896]	; (b898 <fRun_9DOF_GBY_KALMAN+0x37c4>)
    b516:	50bb      	str	r3, [r7, r2]
    b518:	22a4      	movs	r2, #164	; 0xa4
    b51a:	00d2      	lsls	r2, r2, #3
    b51c:	50bb      	str	r3, [r7, r2]
    b51e:	4adf      	ldr	r2, [pc, #892]	; (b89c <fRun_9DOF_GBY_KALMAN+0x37c8>)
    b520:	50bb      	str	r3, [r7, r2]
    b522:	22a5      	movs	r2, #165	; 0xa5
    b524:	00d2      	lsls	r2, r2, #3
    b526:	50bb      	str	r3, [r7, r2]
    b528:	4add      	ldr	r2, [pc, #884]	; (b8a0 <fRun_9DOF_GBY_KALMAN+0x37cc>)
    b52a:	50bb      	str	r3, [r7, r2]
    b52c:	22a6      	movs	r2, #166	; 0xa6
    b52e:	00d2      	lsls	r2, r2, #3
    b530:	50bb      	str	r3, [r7, r2]
    b532:	4adc      	ldr	r2, [pc, #880]	; (b8a4 <fRun_9DOF_GBY_KALMAN+0x37d0>)
    b534:	50bb      	str	r3, [r7, r2]
    b536:	22a7      	movs	r2, #167	; 0xa7
    b538:	00d2      	lsls	r2, r2, #3
    b53a:	50bb      	str	r3, [r7, r2]
    b53c:	22a8      	movs	r2, #168	; 0xa8
    b53e:	00d2      	lsls	r2, r2, #3
    b540:	50bb      	str	r3, [r7, r2]
    b542:	4ad9      	ldr	r2, [pc, #868]	; (b8a8 <fRun_9DOF_GBY_KALMAN+0x37d4>)
    b544:	50bb      	str	r3, [r7, r2]
    b546:	4ad9      	ldr	r2, [pc, #868]	; (b8ac <fRun_9DOF_GBY_KALMAN+0x37d8>)
    b548:	50bb      	str	r3, [r7, r2]
    b54a:	22aa      	movs	r2, #170	; 0xaa
    b54c:	00d2      	lsls	r2, r2, #3
    b54e:	50bb      	str	r3, [r7, r2]
    b550:	4ad7      	ldr	r2, [pc, #860]	; (b8b0 <fRun_9DOF_GBY_KALMAN+0x37dc>)
    b552:	50bb      	str	r3, [r7, r2]
    b554:	22ab      	movs	r2, #171	; 0xab
    b556:	00d2      	lsls	r2, r2, #3
    b558:	50bb      	str	r3, [r7, r2]
    b55a:	4ad6      	ldr	r2, [pc, #856]	; (b8b4 <fRun_9DOF_GBY_KALMAN+0x37e0>)
    b55c:	50bb      	str	r3, [r7, r2]
    b55e:	22ac      	movs	r2, #172	; 0xac
    b560:	00d2      	lsls	r2, r2, #3
    b562:	50bb      	str	r3, [r7, r2]
    b564:	4ad4      	ldr	r2, [pc, #848]	; (b8b8 <fRun_9DOF_GBY_KALMAN+0x37e4>)
    b566:	50bb      	str	r3, [r7, r2]
    b568:	22ad      	movs	r2, #173	; 0xad
    b56a:	00d2      	lsls	r2, r2, #3
    b56c:	50bb      	str	r3, [r7, r2]
    b56e:	4ad3      	ldr	r2, [pc, #844]	; (b8bc <fRun_9DOF_GBY_KALMAN+0x37e8>)
    b570:	50bb      	str	r3, [r7, r2]
    b572:	4ad3      	ldr	r2, [pc, #844]	; (b8c0 <fRun_9DOF_GBY_KALMAN+0x37ec>)
    b574:	50bb      	str	r3, [r7, r2]
    b576:	22af      	movs	r2, #175	; 0xaf
    b578:	00d2      	lsls	r2, r2, #3
    b57a:	50bb      	str	r3, [r7, r2]
    b57c:	22b0      	movs	r2, #176	; 0xb0
    b57e:	00d2      	lsls	r2, r2, #3
    b580:	50bb      	str	r3, [r7, r2]
    b582:	4ad0      	ldr	r2, [pc, #832]	; (b8c4 <fRun_9DOF_GBY_KALMAN+0x37f0>)
    b584:	50bb      	str	r3, [r7, r2]
    b586:	22b1      	movs	r2, #177	; 0xb1
    b588:	00d2      	lsls	r2, r2, #3
    b58a:	50bb      	str	r3, [r7, r2]
    b58c:	4ace      	ldr	r2, [pc, #824]	; (b8c8 <fRun_9DOF_GBY_KALMAN+0x37f4>)
    b58e:	50bb      	str	r3, [r7, r2]
    b590:	22b2      	movs	r2, #178	; 0xb2
    b592:	00d2      	lsls	r2, r2, #3
    b594:	50bb      	str	r3, [r7, r2]
    b596:	4acd      	ldr	r2, [pc, #820]	; (b8cc <fRun_9DOF_GBY_KALMAN+0x37f8>)
    b598:	50bb      	str	r3, [r7, r2]
    b59a:	22b3      	movs	r2, #179	; 0xb3
    b59c:	00d2      	lsls	r2, r2, #3
    b59e:	50bb      	str	r3, [r7, r2]
    b5a0:	4acb      	ldr	r2, [pc, #812]	; (b8d0 <fRun_9DOF_GBY_KALMAN+0x37fc>)
    b5a2:	50bb      	str	r3, [r7, r2]
    b5a4:	22b4      	movs	r2, #180	; 0xb4
    b5a6:	00d2      	lsls	r2, r2, #3
    b5a8:	50bb      	str	r3, [r7, r2]
    b5aa:	4aca      	ldr	r2, [pc, #808]	; (b8d4 <fRun_9DOF_GBY_KALMAN+0x3800>)
    b5ac:	50bb      	str	r3, [r7, r2]
    b5ae:	22b5      	movs	r2, #181	; 0xb5
    b5b0:	00d2      	lsls	r2, r2, #3
    b5b2:	50bb      	str	r3, [r7, r2]
    b5b4:	4ac8      	ldr	r2, [pc, #800]	; (b8d8 <fRun_9DOF_GBY_KALMAN+0x3804>)
    b5b6:	50bb      	str	r3, [r7, r2]
    b5b8:	4ac8      	ldr	r2, [pc, #800]	; (b8dc <fRun_9DOF_GBY_KALMAN+0x3808>)
    b5ba:	50bb      	str	r3, [r7, r2]
    b5bc:	22b7      	movs	r2, #183	; 0xb7
    b5be:	00d2      	lsls	r2, r2, #3
    b5c0:	50bb      	str	r3, [r7, r2]
    b5c2:	4ac7      	ldr	r2, [pc, #796]	; (b8e0 <fRun_9DOF_GBY_KALMAN+0x380c>)
    b5c4:	50bb      	str	r3, [r7, r2]
    b5c6:	22b8      	movs	r2, #184	; 0xb8
    b5c8:	00d2      	lsls	r2, r2, #3
    b5ca:	50bb      	str	r3, [r7, r2]
    b5cc:	4ac5      	ldr	r2, [pc, #788]	; (b8e4 <fRun_9DOF_GBY_KALMAN+0x3810>)
    b5ce:	50bb      	str	r3, [r7, r2]
    b5d0:	22b9      	movs	r2, #185	; 0xb9
    b5d2:	00d2      	lsls	r2, r2, #3
    b5d4:	50bb      	str	r3, [r7, r2]
    b5d6:	4ac4      	ldr	r2, [pc, #784]	; (b8e8 <fRun_9DOF_GBY_KALMAN+0x3814>)
    b5d8:	50bb      	str	r3, [r7, r2]
    b5da:	22ba      	movs	r2, #186	; 0xba
    b5dc:	00d2      	lsls	r2, r2, #3
    b5de:	50bb      	str	r3, [r7, r2]
    b5e0:	4ac2      	ldr	r2, [pc, #776]	; (b8ec <fRun_9DOF_GBY_KALMAN+0x3818>)
    b5e2:	50bb      	str	r3, [r7, r2]
    b5e4:	22bb      	movs	r2, #187	; 0xbb
    b5e6:	00d2      	lsls	r2, r2, #3
    b5e8:	50bb      	str	r3, [r7, r2]
    b5ea:	4ac1      	ldr	r2, [pc, #772]	; (b8f0 <fRun_9DOF_GBY_KALMAN+0x381c>)
    b5ec:	50bb      	str	r3, [r7, r2]
    b5ee:	22bc      	movs	r2, #188	; 0xbc
    b5f0:	00d2      	lsls	r2, r2, #3
    b5f2:	50bb      	str	r3, [r7, r2]
    b5f4:	22bd      	movs	r2, #189	; 0xbd
    b5f6:	00d2      	lsls	r2, r2, #3
    b5f8:	50bb      	str	r3, [r7, r2]
    b5fa:	4abe      	ldr	r2, [pc, #760]	; (b8f4 <fRun_9DOF_GBY_KALMAN+0x3820>)
    b5fc:	50bb      	str	r3, [r7, r2]
    b5fe:	22be      	movs	r2, #190	; 0xbe
    b600:	00d2      	lsls	r2, r2, #3
    b602:	50bb      	str	r3, [r7, r2]
    b604:	4abc      	ldr	r2, [pc, #752]	; (b8f8 <fRun_9DOF_GBY_KALMAN+0x3824>)
    b606:	50bb      	str	r3, [r7, r2]
    b608:	22bf      	movs	r2, #191	; 0xbf
    b60a:	00d2      	lsls	r2, r2, #3
    b60c:	50bb      	str	r3, [r7, r2]
    b60e:	4abb      	ldr	r2, [pc, #748]	; (b8fc <fRun_9DOF_GBY_KALMAN+0x3828>)
    b610:	50bb      	str	r3, [r7, r2]
    b612:	22c0      	movs	r2, #192	; 0xc0
    b614:	00d2      	lsls	r2, r2, #3
    b616:	50bb      	str	r3, [r7, r2]
    b618:	4ab9      	ldr	r2, [pc, #740]	; (b900 <fRun_9DOF_GBY_KALMAN+0x382c>)
    b61a:	50bb      	str	r3, [r7, r2]
    b61c:	22c1      	movs	r2, #193	; 0xc1
    b61e:	00d2      	lsls	r2, r2, #3
    b620:	50bb      	str	r3, [r7, r2]
    b622:	4ab8      	ldr	r2, [pc, #736]	; (b904 <fRun_9DOF_GBY_KALMAN+0x3830>)
    b624:	50bb      	str	r3, [r7, r2]
    b626:	22c2      	movs	r2, #194	; 0xc2
    b628:	00d2      	lsls	r2, r2, #3
    b62a:	50bb      	str	r3, [r7, r2]
    b62c:	4ab6      	ldr	r2, [pc, #728]	; (b908 <fRun_9DOF_GBY_KALMAN+0x3834>)
    b62e:	50bb      	str	r3, [r7, r2]
    b630:	4ab6      	ldr	r2, [pc, #728]	; (b90c <fRun_9DOF_GBY_KALMAN+0x3838>)
    b632:	50bb      	str	r3, [r7, r2]
    b634:	22c4      	movs	r2, #196	; 0xc4
    b636:	00d2      	lsls	r2, r2, #3
    b638:	50bb      	str	r3, [r7, r2]
    b63a:	4ab5      	ldr	r2, [pc, #724]	; (b910 <fRun_9DOF_GBY_KALMAN+0x383c>)
    b63c:	50bb      	str	r3, [r7, r2]
    b63e:	22c5      	movs	r2, #197	; 0xc5
    b640:	00d2      	lsls	r2, r2, #3
    b642:	50bb      	str	r3, [r7, r2]
    b644:	4ab3      	ldr	r2, [pc, #716]	; (b914 <fRun_9DOF_GBY_KALMAN+0x3840>)
    b646:	50bb      	str	r3, [r7, r2]
    b648:	22c6      	movs	r2, #198	; 0xc6
    b64a:	00d2      	lsls	r2, r2, #3
    b64c:	50bb      	str	r3, [r7, r2]
    b64e:	4ab2      	ldr	r2, [pc, #712]	; (b918 <fRun_9DOF_GBY_KALMAN+0x3844>)
    b650:	50bb      	str	r3, [r7, r2]
    b652:	22c7      	movs	r2, #199	; 0xc7
    b654:	00d2      	lsls	r2, r2, #3
    b656:	50bb      	str	r3, [r7, r2]
    b658:	4ab0      	ldr	r2, [pc, #704]	; (b91c <fRun_9DOF_GBY_KALMAN+0x3848>)
    b65a:	50bb      	str	r3, [r7, r2]
    b65c:	22c8      	movs	r2, #200	; 0xc8
    b65e:	00d2      	lsls	r2, r2, #3
    b660:	50bb      	str	r3, [r7, r2]
    b662:	4aaf      	ldr	r2, [pc, #700]	; (b920 <fRun_9DOF_GBY_KALMAN+0x384c>)
    b664:	50bb      	str	r3, [r7, r2]
    b666:	22c9      	movs	r2, #201	; 0xc9
    b668:	00d2      	lsls	r2, r2, #3
    b66a:	50bb      	str	r3, [r7, r2]
    b66c:	22ca      	movs	r2, #202	; 0xca
    b66e:	00d2      	lsls	r2, r2, #3
    b670:	50bb      	str	r3, [r7, r2]
    b672:	4aac      	ldr	r2, [pc, #688]	; (b924 <fRun_9DOF_GBY_KALMAN+0x3850>)
    b674:	50bb      	str	r3, [r7, r2]
    b676:	22cb      	movs	r2, #203	; 0xcb
    b678:	00d2      	lsls	r2, r2, #3
    b67a:	50bb      	str	r3, [r7, r2]
    b67c:	4aaa      	ldr	r2, [pc, #680]	; (b928 <fRun_9DOF_GBY_KALMAN+0x3854>)
    b67e:	50bb      	str	r3, [r7, r2]
    b680:	22cc      	movs	r2, #204	; 0xcc
    b682:	00d2      	lsls	r2, r2, #3
    b684:	50bb      	str	r3, [r7, r2]
    b686:	4aa9      	ldr	r2, [pc, #676]	; (b92c <fRun_9DOF_GBY_KALMAN+0x3858>)
    b688:	50bb      	str	r3, [r7, r2]
    b68a:	22cd      	movs	r2, #205	; 0xcd
    b68c:	00d2      	lsls	r2, r2, #3
    b68e:	50bb      	str	r3, [r7, r2]
    b690:	4aa7      	ldr	r2, [pc, #668]	; (b930 <fRun_9DOF_GBY_KALMAN+0x385c>)
    b692:	50bb      	str	r3, [r7, r2]
    b694:	22ce      	movs	r2, #206	; 0xce
    b696:	00d2      	lsls	r2, r2, #3
    b698:	50bb      	str	r3, [r7, r2]
    b69a:	4aa6      	ldr	r2, [pc, #664]	; (b934 <fRun_9DOF_GBY_KALMAN+0x3860>)
    b69c:	50bb      	str	r3, [r7, r2]
    b69e:	22cf      	movs	r2, #207	; 0xcf
    b6a0:	00d2      	lsls	r2, r2, #3
    b6a2:	50bb      	str	r3, [r7, r2]
    b6a4:	4aa4      	ldr	r2, [pc, #656]	; (b938 <fRun_9DOF_GBY_KALMAN+0x3864>)
    b6a6:	50bb      	str	r3, [r7, r2]
    b6a8:	4aa4      	ldr	r2, [pc, #656]	; (b93c <fRun_9DOF_GBY_KALMAN+0x3868>)
    b6aa:	50bb      	str	r3, [r7, r2]
    b6ac:	22d1      	movs	r2, #209	; 0xd1
    b6ae:	00d2      	lsls	r2, r2, #3
    b6b0:	50bb      	str	r3, [r7, r2]
    b6b2:	4aa3      	ldr	r2, [pc, #652]	; (b940 <fRun_9DOF_GBY_KALMAN+0x386c>)
    b6b4:	50bb      	str	r3, [r7, r2]
    b6b6:	22d2      	movs	r2, #210	; 0xd2
    b6b8:	00d2      	lsls	r2, r2, #3
    b6ba:	50bb      	str	r3, [r7, r2]
    b6bc:	4aa1      	ldr	r2, [pc, #644]	; (b944 <fRun_9DOF_GBY_KALMAN+0x3870>)
    b6be:	50bb      	str	r3, [r7, r2]
    b6c0:	22d3      	movs	r2, #211	; 0xd3
    b6c2:	00d2      	lsls	r2, r2, #3
    b6c4:	50bb      	str	r3, [r7, r2]
    b6c6:	4aa0      	ldr	r2, [pc, #640]	; (b948 <fRun_9DOF_GBY_KALMAN+0x3874>)
    b6c8:	50bb      	str	r3, [r7, r2]
    b6ca:	22d4      	movs	r2, #212	; 0xd4
    b6cc:	00d2      	lsls	r2, r2, #3
    b6ce:	50bb      	str	r3, [r7, r2]
    b6d0:	4a9e      	ldr	r2, [pc, #632]	; (b94c <fRun_9DOF_GBY_KALMAN+0x3878>)
    b6d2:	50bb      	str	r3, [r7, r2]
    b6d4:	22d5      	movs	r2, #213	; 0xd5
    b6d6:	00d2      	lsls	r2, r2, #3
    b6d8:	50bb      	str	r3, [r7, r2]
    b6da:	4a9d      	ldr	r2, [pc, #628]	; (b950 <fRun_9DOF_GBY_KALMAN+0x387c>)
    b6dc:	50bb      	str	r3, [r7, r2]
    b6de:	22d6      	movs	r2, #214	; 0xd6
    b6e0:	00d2      	lsls	r2, r2, #3
    b6e2:	50bb      	str	r3, [r7, r2]
    b6e4:	4b9b      	ldr	r3, [pc, #620]	; (b954 <fRun_9DOF_GBY_KALMAN+0x3880>)
    b6e6:	58ff      	ldr	r7, [r7, r3]
    b6e8:	2383      	movs	r3, #131	; 0x83
    b6ea:	011b      	lsls	r3, r3, #4
    b6ec:	58e3      	ldr	r3, [r4, r3]
    b6ee:	4698      	mov	r8, r3
    b6f0:	4b99      	ldr	r3, [pc, #612]	; (b958 <fRun_9DOF_GBY_KALMAN+0x3884>)
    b6f2:	58e6      	ldr	r6, [r4, r3]
    b6f4:	4b99      	ldr	r3, [pc, #612]	; (b95c <fRun_9DOF_GBY_KALMAN+0x3888>)
    b6f6:	1836      	adds	r6, r6, r0
    b6f8:	58e5      	ldr	r5, [r4, r3]
    b6fa:	2382      	movs	r3, #130	; 0x82
    b6fc:	011b      	lsls	r3, r3, #4
    b6fe:	58e4      	ldr	r4, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1784

	// update the covariance matrix components
	for (i = 0; i < 3; i++)
	{
		// Qw[th-th-] = Qw[0-2][0-2] = E[th-(th-)^T] = Q[th+th+] + deltat^2 * (Q[b+b+] + (Qwb + QvG) * I)
		pthisSV->fQw12x12[i][i] = pthisSV->fPPlus12x12[i][i] + pthisSV->fdeltatsq * (pthisSV->fPPlus12x12[i + 3][i + 3] + pthisSV->fQwbplusQvG);
    b700:	23da      	movs	r3, #218	; 0xda
    b702:	005b      	lsls	r3, r3, #1
    b704:	58cb      	ldr	r3, [r1, r3]
    b706:	4641      	mov	r1, r8
    b708:	1c18      	adds	r0, r3, #0
    b70a:	469a      	mov	sl, r3
    b70c:	f7f4 fff2 	bl	6f4 <__aeabi_fadd>
    b710:	1c39      	adds	r1, r7, #0
    b712:	f7f5 fb3f 	bl	d94 <__aeabi_fmul>
    b716:	238c      	movs	r3, #140	; 0x8c
    b718:	465a      	mov	r2, fp
    b71a:	005b      	lsls	r3, r3, #1
    b71c:	1c01      	adds	r1, r0, #0
    b71e:	58d0      	ldr	r0, [r2, r3]
    b720:	f7f4 ffe8 	bl	6f4 <__aeabi_fadd>
    b724:	238f      	movs	r3, #143	; 0x8f
    b726:	00db      	lsls	r3, r3, #3
    b728:	4659      	mov	r1, fp
    b72a:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1787

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw12x12[i + 3][i + 3] = pthisSV->fPPlus12x12[i + 3][i + 3] + FQWB_9DOF_GBY_KALMAN;
    b72c:	498c      	ldr	r1, [pc, #560]	; (b960 <fRun_9DOF_GBY_KALMAN+0x388c>)
    b72e:	4650      	mov	r0, sl
    b730:	f7f4 ffe0 	bl	6f4 <__aeabi_fadd>
    b734:	4b8b      	ldr	r3, [pc, #556]	; (b964 <fRun_9DOF_GBY_KALMAN+0x3890>)
    b736:	465a      	mov	r2, fp
    b738:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1790

		// Qw[th-b-] = Qw[0-2][3-5] = E[th-(b-)^T] = -deltat * (Q[b+b+] + Qwb * I) = -deltat * Qw[b-b-]
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = -pthisSV->fdeltat * pthisSV->fQw12x12[i + 3][i + 3];
    b73a:	1c31      	adds	r1, r6, #0
    b73c:	f7f5 fb2a 	bl	d94 <__aeabi_fmul>
    b740:	23a1      	movs	r3, #161	; 0xa1
    b742:	00db      	lsls	r3, r3, #3
    b744:	4659      	mov	r1, fp
    b746:	50c8      	str	r0, [r1, r3]
    b748:	465a      	mov	r2, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1793

		// Qw[a-a-] = Qw[6-8][6-8] = E[a-(a-)^T] = ca^2 * Q[a+a+] + Qwa * I
		pthisSV->fQw12x12[i + 6][i + 6] = pthisSV->fcasq * pthisSV->fPPlus12x12[i + 6][i + 6] + FQWA_9DOF_GBY_KALMAN;
    b74a:	2394      	movs	r3, #148	; 0x94
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1790

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw12x12[i + 3][i + 3] = pthisSV->fPPlus12x12[i + 3][i + 3] + FQWB_9DOF_GBY_KALMAN;

		// Qw[th-b-] = Qw[0-2][3-5] = E[th-(b-)^T] = -deltat * (Q[b+b+] + Qwb * I) = -deltat * Qw[b-b-]
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = -pthisSV->fdeltat * pthisSV->fQw12x12[i + 3][i + 3];
    b74c:	444a      	add	r2, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1793

		// Qw[a-a-] = Qw[6-8][6-8] = E[a-(a-)^T] = ca^2 * Q[a+a+] + Qwa * I
		pthisSV->fQw12x12[i + 6][i + 6] = pthisSV->fcasq * pthisSV->fPPlus12x12[i + 6][i + 6] + FQWA_9DOF_GBY_KALMAN;
    b74e:	009b      	lsls	r3, r3, #2
    b750:	58c9      	ldr	r1, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1790

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw12x12[i + 3][i + 3] = pthisSV->fPPlus12x12[i + 3][i + 3] + FQWB_9DOF_GBY_KALMAN;

		// Qw[th-b-] = Qw[0-2][3-5] = E[th-(b-)^T] = -deltat * (Q[b+b+] + Qwb * I) = -deltat * Qw[b-b-]
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = -pthisSV->fdeltat * pthisSV->fQw12x12[i + 3][i + 3];
    b752:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1793

		// Qw[a-a-] = Qw[6-8][6-8] = E[a-(a-)^T] = ca^2 * Q[a+a+] + Qwa * I
		pthisSV->fQw12x12[i + 6][i + 6] = pthisSV->fcasq * pthisSV->fPPlus12x12[i + 6][i + 6] + FQWA_9DOF_GBY_KALMAN;
    b754:	1c28      	adds	r0, r5, #0
    b756:	f7f5 fb1d 	bl	d94 <__aeabi_fmul>
    b75a:	4983      	ldr	r1, [pc, #524]	; (b968 <fRun_9DOF_GBY_KALMAN+0x3894>)
    b75c:	f7f4 ffca 	bl	6f4 <__aeabi_fadd>
    b760:	23b6      	movs	r3, #182	; 0xb6
    b762:	00db      	lsls	r3, r3, #3
    b764:	4659      	mov	r1, fp
    b766:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1796

		// Qw[d-d-] = Qw[9-11][9-11] = E[d-(d-)^T] = cd^2 * Q[d+d+] + Qwd * I
		pthisSV->fQw12x12[i + 9][i + 9] = pthisSV->fcdsq * pthisSV->fPPlus12x12[i + 9][i + 9] + FQWD_9DOF_GBY_KALMAN;
    b768:	23bb      	movs	r3, #187	; 0xbb
    b76a:	009b      	lsls	r3, r3, #2
    b76c:	58c9      	ldr	r1, [r1, r3]
    b76e:	1c20      	adds	r0, r4, #0
    b770:	f7f5 fb10 	bl	d94 <__aeabi_fmul>
    b774:	21fc      	movs	r1, #252	; 0xfc
    b776:	0589      	lsls	r1, r1, #22
    b778:	f7f4 ffbc 	bl	6f4 <__aeabi_fadd>
    b77c:	4b7b      	ldr	r3, [pc, #492]	; (b96c <fRun_9DOF_GBY_KALMAN+0x3898>)
    b77e:	465a      	mov	r2, fp
    b780:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1784

	// update the covariance matrix components
	for (i = 0; i < 3; i++)
	{
		// Qw[th-th-] = Qw[0-2][0-2] = E[th-(th-)^T] = Q[th+th+] + deltat^2 * (Q[b+b+] + (Qwb + QvG) * I)
		pthisSV->fQw12x12[i][i] = pthisSV->fPPlus12x12[i][i] + pthisSV->fdeltatsq * (pthisSV->fPPlus12x12[i + 3][i + 3] + pthisSV->fQwbplusQvG);
    b782:	23f4      	movs	r3, #244	; 0xf4
    b784:	005b      	lsls	r3, r3, #1
    b786:	58d3      	ldr	r3, [r2, r3]
    b788:	4641      	mov	r1, r8
    b78a:	1c18      	adds	r0, r3, #0
    b78c:	4699      	mov	r9, r3
    b78e:	f7f4 ffb1 	bl	6f4 <__aeabi_fadd>
    b792:	1c39      	adds	r1, r7, #0
    b794:	f7f5 fafe 	bl	d94 <__aeabi_fmul>
    b798:	23a6      	movs	r3, #166	; 0xa6
    b79a:	465a      	mov	r2, fp
    b79c:	005b      	lsls	r3, r3, #1
    b79e:	1c01      	adds	r1, r0, #0
    b7a0:	58d0      	ldr	r0, [r2, r3]
    b7a2:	f7f4 ffa7 	bl	6f4 <__aeabi_fadd>
    b7a6:	4b72      	ldr	r3, [pc, #456]	; (b970 <fRun_9DOF_GBY_KALMAN+0x389c>)
    b7a8:	4659      	mov	r1, fp
    b7aa:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1787

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw12x12[i + 3][i + 3] = pthisSV->fPPlus12x12[i + 3][i + 3] + FQWB_9DOF_GBY_KALMAN;
    b7ac:	4648      	mov	r0, r9
    b7ae:	496c      	ldr	r1, [pc, #432]	; (b960 <fRun_9DOF_GBY_KALMAN+0x388c>)
    b7b0:	f7f4 ffa0 	bl	6f4 <__aeabi_fadd>
    b7b4:	23a9      	movs	r3, #169	; 0xa9
    b7b6:	465a      	mov	r2, fp
    b7b8:	00db      	lsls	r3, r3, #3
    b7ba:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1790

		// Qw[th-b-] = Qw[0-2][3-5] = E[th-(b-)^T] = -deltat * (Q[b+b+] + Qwb * I) = -deltat * Qw[b-b-]
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = -pthisSV->fdeltat * pthisSV->fQw12x12[i + 3][i + 3];
    b7bc:	1c31      	adds	r1, r6, #0
    b7be:	f7f5 fae9 	bl	d94 <__aeabi_fmul>
    b7c2:	4b6c      	ldr	r3, [pc, #432]	; (b974 <fRun_9DOF_GBY_KALMAN+0x38a0>)
    b7c4:	4659      	mov	r1, fp
    b7c6:	50c8      	str	r0, [r1, r3]
    b7c8:	2397      	movs	r3, #151	; 0x97
    b7ca:	00db      	lsls	r3, r3, #3
    b7cc:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1793

		// Qw[a-a-] = Qw[6-8][6-8] = E[a-(a-)^T] = ca^2 * Q[a+a+] + Qwa * I
		pthisSV->fQw12x12[i + 6][i + 6] = pthisSV->fcasq * pthisSV->fPPlus12x12[i + 6][i + 6] + FQWA_9DOF_GBY_KALMAN;
    b7ce:	23a1      	movs	r3, #161	; 0xa1
    b7d0:	009b      	lsls	r3, r3, #2
    b7d2:	58c9      	ldr	r1, [r1, r3]
    b7d4:	1c28      	adds	r0, r5, #0
    b7d6:	f7f5 fadd 	bl	d94 <__aeabi_fmul>
    b7da:	4963      	ldr	r1, [pc, #396]	; (b968 <fRun_9DOF_GBY_KALMAN+0x3894>)
    b7dc:	f7f4 ff8a 	bl	6f4 <__aeabi_fadd>
    b7e0:	4b65      	ldr	r3, [pc, #404]	; (b978 <fRun_9DOF_GBY_KALMAN+0x38a4>)
    b7e2:	465a      	mov	r2, fp
    b7e4:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1796

		// Qw[d-d-] = Qw[9-11][9-11] = E[d-(d-)^T] = cd^2 * Q[d+d+] + Qwd * I
		pthisSV->fQw12x12[i + 9][i + 9] = pthisSV->fcdsq * pthisSV->fPPlus12x12[i + 9][i + 9] + FQWD_9DOF_GBY_KALMAN;
    b7e6:	23c8      	movs	r3, #200	; 0xc8
    b7e8:	009b      	lsls	r3, r3, #2
    b7ea:	58d1      	ldr	r1, [r2, r3]
    b7ec:	1c20      	adds	r0, r4, #0
    b7ee:	f7f5 fad1 	bl	d94 <__aeabi_fmul>
    b7f2:	21fc      	movs	r1, #252	; 0xfc
    b7f4:	0589      	lsls	r1, r1, #22
    b7f6:	f7f4 ff7d 	bl	6f4 <__aeabi_fadd>
    b7fa:	23d0      	movs	r3, #208	; 0xd0
    b7fc:	4659      	mov	r1, fp
    b7fe:	00db      	lsls	r3, r3, #3
    b800:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1784

	// update the covariance matrix components
	for (i = 0; i < 3; i++)
	{
		// Qw[th-th-] = Qw[0-2][0-2] = E[th-(th-)^T] = Q[th+th+] + deltat^2 * (Q[b+b+] + (Qwb + QvG) * I)
		pthisSV->fQw12x12[i][i] = pthisSV->fPPlus12x12[i][i] + pthisSV->fdeltatsq * (pthisSV->fPPlus12x12[i + 3][i + 3] + pthisSV->fQwbplusQvG);
    b802:	2387      	movs	r3, #135	; 0x87
    b804:	009b      	lsls	r3, r3, #2
    b806:	58cb      	ldr	r3, [r1, r3]
    b808:	4641      	mov	r1, r8
    b80a:	1c18      	adds	r0, r3, #0
    b80c:	4699      	mov	r9, r3
    b80e:	f7f4 ff71 	bl	6f4 <__aeabi_fadd>
    b812:	1c39      	adds	r1, r7, #0
    b814:	f7f5 fabe 	bl	d94 <__aeabi_fmul>
    b818:	23c0      	movs	r3, #192	; 0xc0
    b81a:	465a      	mov	r2, fp
    b81c:	005b      	lsls	r3, r3, #1
    b81e:	1c01      	adds	r1, r0, #0
    b820:	58d0      	ldr	r0, [r2, r3]
    b822:	f7f4 ff67 	bl	6f4 <__aeabi_fadd>
    b826:	239c      	movs	r3, #156	; 0x9c
    b828:	465f      	mov	r7, fp
    b82a:	00db      	lsls	r3, r3, #3
    b82c:	50f8      	str	r0, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1787

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw12x12[i + 3][i + 3] = pthisSV->fPPlus12x12[i + 3][i + 3] + FQWB_9DOF_GBY_KALMAN;
    b82e:	494c      	ldr	r1, [pc, #304]	; (b960 <fRun_9DOF_GBY_KALMAN+0x388c>)
    b830:	4648      	mov	r0, r9
    b832:	f7f4 ff5f 	bl	6f4 <__aeabi_fadd>
    b836:	4b51      	ldr	r3, [pc, #324]	; (b97c <fRun_9DOF_GBY_KALMAN+0x38a8>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1790

		// Qw[th-b-] = Qw[0-2][3-5] = E[th-(b-)^T] = -deltat * (Q[b+b+] + Qwb * I) = -deltat * Qw[b-b-]
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = -pthisSV->fdeltat * pthisSV->fQw12x12[i + 3][i + 3];
    b838:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1787
	{
		// Qw[th-th-] = Qw[0-2][0-2] = E[th-(th-)^T] = Q[th+th+] + deltat^2 * (Q[b+b+] + (Qwb + QvG) * I)
		pthisSV->fQw12x12[i][i] = pthisSV->fPPlus12x12[i][i] + pthisSV->fdeltatsq * (pthisSV->fPPlus12x12[i + 3][i + 3] + pthisSV->fQwbplusQvG);

		// Qw[b-b-] = Qw[3-5][3-5] = E[b-(b-)^T] = Q[b+b+] + Qwb * I
		pthisSV->fQw12x12[i + 3][i + 3] = pthisSV->fPPlus12x12[i + 3][i + 3] + FQWB_9DOF_GBY_KALMAN;
    b83a:	50f8      	str	r0, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1790

		// Qw[th-b-] = Qw[0-2][3-5] = E[th-(b-)^T] = -deltat * (Q[b+b+] + Qwb * I) = -deltat * Qw[b-b-]
		pthisSV->fQw12x12[i][i + 3] = pthisSV->fQw12x12[i + 3][i] = -pthisSV->fdeltat * pthisSV->fQw12x12[i + 3][i + 3];
    b83c:	f7f5 faaa 	bl	d94 <__aeabi_fmul>
    b840:	23ae      	movs	r3, #174	; 0xae
    b842:	00db      	lsls	r3, r3, #3
    b844:	50f8      	str	r0, [r7, r3]
    b846:	4b4e      	ldr	r3, [pc, #312]	; (b980 <fRun_9DOF_GBY_KALMAN+0x38ac>)
    b848:	50f8      	str	r0, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1793

		// Qw[a-a-] = Qw[6-8][6-8] = E[a-(a-)^T] = ca^2 * Q[a+a+] + Qwa * I
		pthisSV->fQw12x12[i + 6][i + 6] = pthisSV->fcasq * pthisSV->fPPlus12x12[i + 6][i + 6] + FQWA_9DOF_GBY_KALMAN;
    b84a:	23ae      	movs	r3, #174	; 0xae
    b84c:	009b      	lsls	r3, r3, #2
    b84e:	58f9      	ldr	r1, [r7, r3]
    b850:	e098      	b.n	b984 <fRun_9DOF_GBY_KALMAN+0x38b0>
    b852:	46c0      	nop			; (mov r8, r8)
    b854:	0000047c 	.word	0x0000047c
    b858:	00000484 	.word	0x00000484
    b85c:	0000048c 	.word	0x0000048c
    b860:	00000494 	.word	0x00000494
    b864:	0000049c 	.word	0x0000049c
    b868:	000004a4 	.word	0x000004a4
    b86c:	000004b4 	.word	0x000004b4
    b870:	000004bc 	.word	0x000004bc
    b874:	000004c4 	.word	0x000004c4
    b878:	000004cc 	.word	0x000004cc
    b87c:	000004d4 	.word	0x000004d4
    b880:	000004dc 	.word	0x000004dc
    b884:	000004e4 	.word	0x000004e4
    b888:	000004f4 	.word	0x000004f4
    b88c:	000004fc 	.word	0x000004fc
    b890:	00000504 	.word	0x00000504
    b894:	0000050c 	.word	0x0000050c
    b898:	0000051c 	.word	0x0000051c
    b89c:	00000524 	.word	0x00000524
    b8a0:	0000052c 	.word	0x0000052c
    b8a4:	00000534 	.word	0x00000534
    b8a8:	00000544 	.word	0x00000544
    b8ac:	0000054c 	.word	0x0000054c
    b8b0:	00000554 	.word	0x00000554
    b8b4:	0000055c 	.word	0x0000055c
    b8b8:	00000564 	.word	0x00000564
    b8bc:	0000056c 	.word	0x0000056c
    b8c0:	00000574 	.word	0x00000574
    b8c4:	00000584 	.word	0x00000584
    b8c8:	0000058c 	.word	0x0000058c
    b8cc:	00000594 	.word	0x00000594
    b8d0:	0000059c 	.word	0x0000059c
    b8d4:	000005a4 	.word	0x000005a4
    b8d8:	000005ac 	.word	0x000005ac
    b8dc:	000005b4 	.word	0x000005b4
    b8e0:	000005bc 	.word	0x000005bc
    b8e4:	000005c4 	.word	0x000005c4
    b8e8:	000005cc 	.word	0x000005cc
    b8ec:	000005d4 	.word	0x000005d4
    b8f0:	000005dc 	.word	0x000005dc
    b8f4:	000005ec 	.word	0x000005ec
    b8f8:	000005f4 	.word	0x000005f4
    b8fc:	000005fc 	.word	0x000005fc
    b900:	00000604 	.word	0x00000604
    b904:	0000060c 	.word	0x0000060c
    b908:	00000614 	.word	0x00000614
    b90c:	0000061c 	.word	0x0000061c
    b910:	00000624 	.word	0x00000624
    b914:	0000062c 	.word	0x0000062c
    b918:	00000634 	.word	0x00000634
    b91c:	0000063c 	.word	0x0000063c
    b920:	00000644 	.word	0x00000644
    b924:	00000654 	.word	0x00000654
    b928:	0000065c 	.word	0x0000065c
    b92c:	00000664 	.word	0x00000664
    b930:	0000066c 	.word	0x0000066c
    b934:	00000674 	.word	0x00000674
    b938:	0000067c 	.word	0x0000067c
    b93c:	00000684 	.word	0x00000684
    b940:	0000068c 	.word	0x0000068c
    b944:	00000694 	.word	0x00000694
    b948:	0000069c 	.word	0x0000069c
    b94c:	000006a4 	.word	0x000006a4
    b950:	000006ac 	.word	0x000006ac
    b954:	0000082c 	.word	0x0000082c
    b958:	00000828 	.word	0x00000828
    b95c:	0000081c 	.word	0x0000081c
    b960:	3089705f 	.word	0x3089705f
    b964:	00000514 	.word	0x00000514
    b968:	38d1b717 	.word	0x38d1b717
    b96c:	0000064c 	.word	0x0000064c
    b970:	000004ac 	.word	0x000004ac
    b974:	0000053c 	.word	0x0000053c
    b978:	000005e4 	.word	0x000005e4
    b97c:	0000057c 	.word	0x0000057c
    b980:	000004ec 	.word	0x000004ec
    b984:	1c28      	adds	r0, r5, #0
    b986:	f7f5 fa05 	bl	d94 <__aeabi_fmul>
    b98a:	49cf      	ldr	r1, [pc, #828]	; (bcc8 <fRun_9DOF_GBY_KALMAN+0x3bf4>)
    b98c:	f7f4 feb2 	bl	6f4 <__aeabi_fadd>
    b990:	23c3      	movs	r3, #195	; 0xc3
    b992:	00db      	lsls	r3, r3, #3
    b994:	50f8      	str	r0, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1796

		// Qw[d-d-] = Qw[9-11][9-11] = E[d-(d-)^T] = cd^2 * Q[d+d+] + Qwd * I
		pthisSV->fQw12x12[i + 9][i + 9] = pthisSV->fcdsq * pthisSV->fPPlus12x12[i + 9][i + 9] + FQWD_9DOF_GBY_KALMAN;
    b996:	23d5      	movs	r3, #213	; 0xd5
    b998:	009b      	lsls	r3, r3, #2
    b99a:	58f9      	ldr	r1, [r7, r3]
    b99c:	1c20      	adds	r0, r4, #0
    b99e:	f7f5 f9f9 	bl	d94 <__aeabi_fmul>
    b9a2:	21fc      	movs	r1, #252	; 0xfc
    b9a4:	0589      	lsls	r1, r1, #22
    b9a6:	f7f4 fea5 	bl	6f4 <__aeabi_fadd>
    b9aa:	4bc8      	ldr	r3, [pc, #800]	; (bccc <fRun_9DOF_GBY_KALMAN+0x3bf8>)
    b9ac:	50f8      	str	r0, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1800
	}

	return;
}  // end fRun_9DOF_GBY_KALMAN
    b9ae:	b06f      	add	sp, #444	; 0x1bc
    b9b0:	bc3c      	pop	{r2, r3, r4, r5}
    b9b2:	4690      	mov	r8, r2
    b9b4:	4699      	mov	r9, r3
    b9b6:	46a2      	mov	sl, r4
    b9b8:	46ab      	mov	fp, r5
    b9ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    b9bc:	2000      	movs	r0, #0
    b9be:	4681      	mov	r9, r0
    b9c0:	f7fd ffe9 	bl	9996 <fRun_9DOF_GBY_KALMAN+0x18c2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1520
	// remove gravity and correct the sign if the coordinate system is gravity positive / acceleration negative 
	switch (ithisCoordSystem)
	{
	case NED:
		// gravity positive NED
		pthisSV->faGlPl[X] = -pthisSV->faGlPl[X];
    b9c4:	2280      	movs	r2, #128	; 0x80
    b9c6:	0612      	lsls	r2, r2, #24
    b9c8:	1c13      	adds	r3, r2, #0
    b9ca:	4453      	add	r3, sl
    b9cc:	4659      	mov	r1, fp
    b9ce:	22c8      	movs	r2, #200	; 0xc8
    b9d0:	508b      	str	r3, [r1, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1521
		pthisSV->faGlPl[Y] = -pthisSV->faGlPl[Y];
    b9d2:	9903      	ldr	r1, [sp, #12]
    b9d4:	2280      	movs	r2, #128	; 0x80
    b9d6:	0612      	lsls	r2, r2, #24
    b9d8:	188b      	adds	r3, r1, r2
    b9da:	4659      	mov	r1, fp
    b9dc:	22cc      	movs	r2, #204	; 0xcc
    b9de:	508b      	str	r3, [r1, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1522
		pthisSV->faGlPl[Z] = -(pthisSV->faGlPl[Z] - 1.0F);
    b9e0:	21fe      	movs	r1, #254	; 0xfe
    b9e2:	0589      	lsls	r1, r1, #22
    b9e4:	f7f5 fb00 	bl	fe8 <__aeabi_fsub>
    b9e8:	2380      	movs	r3, #128	; 0x80
    b9ea:	061b      	lsls	r3, r3, #24
    b9ec:	18c0      	adds	r0, r0, r3
    b9ee:	4659      	mov	r1, fp
    b9f0:	5148      	str	r0, [r1, r5]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1523
		break;
    b9f2:	f7fd fbcb 	bl	918c <fRun_9DOF_GBY_KALMAN+0x10b8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1411
			pfPPlus12x12kj = *pthisSV->fPPlus12x12 + j;

			// sum matrix products over inner loop over k
			for (k = 0; k < 6; k++)
			{
				if (*pftmpA12x6ik != 0.0F)
    b9f6:	2600      	movs	r6, #0
    b9f8:	f7fd fffa 	bl	99f0 <fRun_9DOF_GBY_KALMAN+0x191c>
    b9fc:	2300      	movs	r3, #0
    b9fe:	4698      	mov	r8, r3
    ba00:	f7fd f879 	bl	8af6 <fRun_9DOF_GBY_KALMAN+0xa22>
    ba04:	2100      	movs	r1, #0
    ba06:	4688      	mov	r8, r1
    ba08:	f7fd f812 	bl	8a30 <fRun_9DOF_GBY_KALMAN+0x95c>
    ba0c:	2600      	movs	r6, #0
    ba0e:	f7fd f893 	bl	8b38 <fRun_9DOF_GBY_KALMAN+0xa64>
    ba12:	2100      	movs	r1, #0
    ba14:	4688      	mov	r8, r1
    ba16:	f7fd f84d 	bl	8ab4 <fRun_9DOF_GBY_KALMAN+0x9e0>
    ba1a:	2300      	movs	r3, #0
    ba1c:	4698      	mov	r8, r3
    ba1e:	f7fd f828 	bl	8a72 <fRun_9DOF_GBY_KALMAN+0x99e>
    ba22:	2600      	movs	r6, #0
    ba24:	f7fe fa6c 	bl	9f00 <fRun_9DOF_GBY_KALMAN+0x1e2c>
    ba28:	2000      	movs	r0, #0
    ba2a:	4681      	mov	r9, r0
    ba2c:	f7fe fa31 	bl	9e92 <fRun_9DOF_GBY_KALMAN+0x1dbe>
    ba30:	2000      	movs	r0, #0
    ba32:	4681      	mov	r9, r0
    ba34:	f7fe f9f7 	bl	9e26 <fRun_9DOF_GBY_KALMAN+0x1d52>
    ba38:	2000      	movs	r0, #0
    ba3a:	4681      	mov	r9, r0
    ba3c:	f7fe f9bd 	bl	9dba <fRun_9DOF_GBY_KALMAN+0x1ce6>
    ba40:	2000      	movs	r0, #0
    ba42:	4680      	mov	r8, r0
    ba44:	f7fe ffc7 	bl	a9d6 <fRun_9DOF_GBY_KALMAN+0x2902>
    ba48:	2200      	movs	r2, #0
    ba4a:	4690      	mov	r8, r2
    ba4c:	f7fe ff8d 	bl	a96a <fRun_9DOF_GBY_KALMAN+0x2896>
    ba50:	2000      	movs	r0, #0
    ba52:	4680      	mov	r8, r0
    ba54:	f7fe ff53 	bl	a8fe <fRun_9DOF_GBY_KALMAN+0x282a>
    ba58:	2600      	movs	r6, #0
    ba5a:	f7ff fa03 	bl	ae64 <fRun_9DOF_GBY_KALMAN+0x2d90>
    ba5e:	2000      	movs	r0, #0
    ba60:	4681      	mov	r9, r0
    ba62:	f7ff f9c8 	bl	adf6 <fRun_9DOF_GBY_KALMAN+0x2d22>
    ba66:	2000      	movs	r0, #0
    ba68:	4681      	mov	r9, r0
    ba6a:	f7ff f98e 	bl	ad8a <fRun_9DOF_GBY_KALMAN+0x2cb6>
    ba6e:	2000      	movs	r0, #0
    ba70:	4681      	mov	r9, r0
    ba72:	f7ff f954 	bl	ad1e <fRun_9DOF_GBY_KALMAN+0x2c4a>
    ba76:	2000      	movs	r0, #0
    ba78:	4681      	mov	r9, r0
    ba7a:	f7ff f91a 	bl	acb2 <fRun_9DOF_GBY_KALMAN+0x2bde>
    ba7e:	2000      	movs	r0, #0
    ba80:	4681      	mov	r9, r0
    ba82:	f7fd ff5c 	bl	993e <fRun_9DOF_GBY_KALMAN+0x186a>
    ba86:	2000      	movs	r0, #0
    ba88:	4681      	mov	r9, r0
    ba8a:	f7fd ff2c 	bl	98e6 <fRun_9DOF_GBY_KALMAN+0x1812>
    ba8e:	2000      	movs	r0, #0
    ba90:	4681      	mov	r9, r0
    ba92:	f7fd fefc 	bl	988e <fRun_9DOF_GBY_KALMAN+0x17ba>
    ba96:	2600      	movs	r6, #0
    ba98:	f7fe f8aa 	bl	9bf0 <fRun_9DOF_GBY_KALMAN+0x1b1c>
    ba9c:	2200      	movs	r2, #0
    ba9e:	4690      	mov	r8, r2
    baa0:	f7fe f87a 	bl	9b98 <fRun_9DOF_GBY_KALMAN+0x1ac4>
    baa4:	2000      	movs	r0, #0
    baa6:	4680      	mov	r8, r0
    baa8:	f7fe f84a 	bl	9b40 <fRun_9DOF_GBY_KALMAN+0x1a6c>
    baac:	2200      	movs	r2, #0
    baae:	4690      	mov	r8, r2
    bab0:	f7fe f81a 	bl	9ae8 <fRun_9DOF_GBY_KALMAN+0x1a14>
    bab4:	2000      	movs	r0, #0
    bab6:	4680      	mov	r8, r0
    bab8:	f7fd ffea 	bl	9a90 <fRun_9DOF_GBY_KALMAN+0x19bc>
    babc:	2100      	movs	r1, #0
    babe:	4689      	mov	r9, r1
    bac0:	f7fe f945 	bl	9d4e <fRun_9DOF_GBY_KALMAN+0x1c7a>
    bac4:	2600      	movs	r6, #0
    bac6:	f7fe fd8b 	bl	a5e0 <fRun_9DOF_GBY_KALMAN+0x250c>
    baca:	2600      	movs	r6, #0
    bacc:	f7fe ffef 	bl	aaae <fRun_9DOF_GBY_KALMAN+0x29da>
    bad0:	2200      	movs	r2, #0
    bad2:	4690      	mov	r8, r2
    bad4:	f7fe ffb5 	bl	aa42 <fRun_9DOF_GBY_KALMAN+0x296e>
    bad8:	2200      	movs	r2, #0
    bada:	4690      	mov	r8, r2
    badc:	f7fe fd54 	bl	a588 <fRun_9DOF_GBY_KALMAN+0x24b4>
    bae0:	2000      	movs	r0, #0
    bae2:	4680      	mov	r8, r0
    bae4:	f7fe fd24 	bl	a530 <fRun_9DOF_GBY_KALMAN+0x245c>
    bae8:	2200      	movs	r2, #0
    baea:	4690      	mov	r8, r2
    baec:	f7fe fcf4 	bl	a4d8 <fRun_9DOF_GBY_KALMAN+0x2404>
    baf0:	2000      	movs	r0, #0
    baf2:	4680      	mov	r8, r0
    baf4:	f7fe fcc4 	bl	a480 <fRun_9DOF_GBY_KALMAN+0x23ac>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1125
	int8 iPivot[6];

	// do a reset and return if requested
	if (pthisSV->resetflag)
	{
		fInit_9DOF_GBY_KALMAN(pthisSV, THISCOORDSYSTEM, SENSORFS, OVERSAMPLE_RATIO);
    baf8:	2101      	movs	r1, #1
    bafa:	22c8      	movs	r2, #200	; 0xc8
    bafc:	2308      	movs	r3, #8
    bafe:	f7fa fba9 	bl	6254 <fInit_9DOF_GBY_KALMAN>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1126
		return;
    bb02:	e754      	b.n	b9ae <fRun_9DOF_GBY_KALMAN+0x38da>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1647
				&(pthisSV->fRhoPl), &(pthisSV->fChiPl));
	}
	else if (ithisCoordSystem == ANDROID)
	{
		// calculate the Android Euler angles
		fAndroidAnglesDegFromRotationMatrix(pthisSV->fRPl, &(pthisSV->fPhiPl), &(pthisSV->fThePl), &(pthisSV->fPsiPl),
    bb04:	f003 fd9e 	bl	f644 <fAndroidAnglesDegFromRotationMatrix>
    bb08:	f7ff fae8 	bl	b0dc <fRun_9DOF_GBY_KALMAN+0x3008>
    bb0c:	4f70      	ldr	r7, [pc, #448]	; (bcd0 <fRun_9DOF_GBY_KALMAN+0x3bfc>)
    bb0e:	1c3c      	adds	r4, r7, #0
    bb10:	445c      	add	r4, fp
    bb12:	9409      	str	r4, [sp, #36]	; 0x24
    bb14:	f7fc fba8 	bl	8268 <fRun_9DOF_GBY_KALMAN+0x194>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1573

				// limit the inclination angle between limits to prevent runaway
				if (fsindelta > SINDELTAMAX)
				{
					fsindelta = SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
    bb18:	4c6e      	ldr	r4, [pc, #440]	; (bcd4 <fRun_9DOF_GBY_KALMAN+0x3c00>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1572
				fcosdelta = fadj * ftmp;

				// limit the inclination angle between limits to prevent runaway
				if (fsindelta > SINDELTAMAX)
				{
					fsindelta = SINDELTAMAX;
    bb1a:	4e6f      	ldr	r6, [pc, #444]	; (bcd8 <fRun_9DOF_GBY_KALMAN+0x3c04>)
    bb1c:	f7fd fbcd 	bl	92ba <fRun_9DOF_GBY_KALMAN+0x11e6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1591
		} // end NED
		else
		{
			// de-rotate the Android and Windows 8 magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[Y] = pthisSV->fRPl[X][Y] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Y] * pthisSV->fdErrSePl[Y] +
    bb20:	4641      	mov	r1, r8
    bb22:	9809      	ldr	r0, [sp, #36]	; 0x24
    bb24:	f7f5 f936 	bl	d94 <__aeabi_fmul>
    bb28:	4649      	mov	r1, r9
    bb2a:	1c05      	adds	r5, r0, #0
    bb2c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    bb2e:	f7f5 f931 	bl	d94 <__aeabi_fmul>
    bb32:	1c01      	adds	r1, r0, #0
    bb34:	1c28      	adds	r0, r5, #0
    bb36:	f7f4 fddd 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1592
					pthisSV->fRPl[Z][Y] * pthisSV->fdErrSePl[Z];
    bb3a:	4651      	mov	r1, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1591
		} // end NED
		else
		{
			// de-rotate the Android and Windows 8 magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[Y] = pthisSV->fRPl[X][Y] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Y] * pthisSV->fdErrSePl[Y] +
    bb3c:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1592
					pthisSV->fRPl[Z][Y] * pthisSV->fdErrSePl[Z];
    bb3e:	980a      	ldr	r0, [sp, #40]	; 0x28
    bb40:	f7f5 f928 	bl	d94 <__aeabi_fmul>
    bb44:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1591
		} // end NED
		else
		{
			// de-rotate the Android and Windows 8 magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[Y] = pthisSV->fRPl[X][Y] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Y] * pthisSV->fdErrSePl[Y] +
    bb46:	1c28      	adds	r0, r5, #0
    bb48:	f7f4 fdd4 	bl	6f4 <__aeabi_fadd>
    bb4c:	238c      	movs	r3, #140	; 0x8c
    bb4e:	4659      	mov	r1, fp
    bb50:	50c8      	str	r0, [r1, r3]
    bb52:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1593
					pthisSV->fRPl[Z][Y] * pthisSV->fdErrSePl[Z];
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
    bb54:	4641      	mov	r1, r8
    bb56:	1c20      	adds	r0, r4, #0
    bb58:	f7f5 f91c 	bl	d94 <__aeabi_fmul>
    bb5c:	4649      	mov	r1, r9
    bb5e:	1c04      	adds	r4, r0, #0
    bb60:	1c30      	adds	r0, r6, #0
    bb62:	f7f5 f917 	bl	d94 <__aeabi_fmul>
    bb66:	1c01      	adds	r1, r0, #0
    bb68:	1c20      	adds	r0, r4, #0
    bb6a:	f7f4 fdc3 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1594
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];
    bb6e:	4651      	mov	r1, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1593
		{
			// de-rotate the Android and Windows 8 magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[Y] = pthisSV->fRPl[X][Y] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Y] * pthisSV->fdErrSePl[Y] +
					pthisSV->fRPl[Z][Y] * pthisSV->fdErrSePl[Z];
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
    bb70:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1594
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];
    bb72:	1c38      	adds	r0, r7, #0
    bb74:	f7f5 f90e 	bl	d94 <__aeabi_fmul>
    bb78:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1593
		{
			// de-rotate the Android and Windows 8 magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[Y] = pthisSV->fRPl[X][Y] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Y] * pthisSV->fdErrSePl[Y] +
					pthisSV->fRPl[Z][Y] * pthisSV->fdErrSePl[Z];
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
    bb7a:	1c20      	adds	r0, r4, #0
    bb7c:	f7f4 fdba 	bl	6f4 <__aeabi_fadd>
    bb80:	465a      	mov	r2, fp
    bb82:	2390      	movs	r3, #144	; 0x90
    bb84:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1598
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];

			// compute components of the new geomagnetic vector
			// the north pointing component fadj must always be non-negative
			fopp = -(pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z]);
    bb86:	2386      	movs	r3, #134	; 0x86
    bb88:	005b      	lsls	r3, r3, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1593
		{
			// de-rotate the Android and Windows 8 magnetic disturbance error de+ from the sensor to the global reference frame
			// using the inverse (transpose) of the a posteriori rotation matrix
			pthisSV->fdErrGlPl[Y] = pthisSV->fRPl[X][Y] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Y] * pthisSV->fdErrSePl[Y] +
					pthisSV->fRPl[Z][Y] * pthisSV->fdErrSePl[Z];
			pthisSV->fdErrGlPl[Z] = pthisSV->fRPl[X][Z] * pthisSV->fdErrSePl[X] + pthisSV->fRPl[Y][Z] * pthisSV->fdErrSePl[Y] +
    bb8a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1598
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];

			// compute components of the new geomagnetic vector
			// the north pointing component fadj must always be non-negative
			fopp = -(pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z]);
    bb8c:	58d0      	ldr	r0, [r2, r3]
    bb8e:	f7f5 fa2b 	bl	fe8 <__aeabi_fsub>
    bb92:	2380      	movs	r3, #128	; 0x80
    bb94:	061b      	lsls	r3, r3, #24
    bb96:	18c4      	adds	r4, r0, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1599
			fadj = pthisSV->fmGl[Y] - pthisSV->fdErrGlPl[Y];
    bb98:	2384      	movs	r3, #132	; 0x84
    bb9a:	005b      	lsls	r3, r3, #1
    bb9c:	465f      	mov	r7, fp
    bb9e:	1c29      	adds	r1, r5, #0
    bba0:	58f8      	ldr	r0, [r7, r3]
    bba2:	f7f5 fa21 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1600
			if (fadj < 0.0F)
    bba6:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1599
					pthisSV->fRPl[Z][Z] * pthisSV->fdErrSePl[Z];

			// compute components of the new geomagnetic vector
			// the north pointing component fadj must always be non-negative
			fopp = -(pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z]);
			fadj = pthisSV->fmGl[Y] - pthisSV->fdErrGlPl[Y];
    bba8:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1600
			if (fadj < 0.0F)
    bbaa:	f7f4 fd7b 	bl	6a4 <__aeabi_fcmplt>
    bbae:	2800      	cmp	r0, #0
    bbb0:	d175      	bne.n	bc9e <fRun_9DOF_GBY_KALMAN+0x3bca>
    bbb2:	1c28      	adds	r0, r5, #0
    bbb4:	1c29      	adds	r1, r5, #0
    bbb6:	f7f5 f8ed 	bl	d94 <__aeabi_fmul>
    bbba:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1604
			{
				fadj = 0.0F;
			}
			fhyp = sqrtf(fopp * fopp + fadj * fadj);
    bbbc:	1c21      	adds	r1, r4, #0
    bbbe:	1c20      	adds	r0, r4, #0
    bbc0:	f7f5 f8e8 	bl	d94 <__aeabi_fmul>
    bbc4:	1c31      	adds	r1, r6, #0
    bbc6:	f7f4 fd95 	bl	6f4 <__aeabi_fadd>
    bbca:	f007 fc61 	bl	13490 <sqrtf>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1607

			// check for the pathological condition of zero geomagnetic field
			if (fhyp != 0.0F)
    bbce:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1604
			fadj = pthisSV->fmGl[Y] - pthisSV->fdErrGlPl[Y];
			if (fadj < 0.0F)
			{
				fadj = 0.0F;
			}
			fhyp = sqrtf(fopp * fopp + fadj * fadj);
    bbd0:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1607

			// check for the pathological condition of zero geomagnetic field
			if (fhyp != 0.0F)
    bbd2:	f7f4 fd61 	bl	698 <__aeabi_fcmpeq>
    bbd6:	2800      	cmp	r0, #0
    bbd8:	d001      	beq.n	bbde <fRun_9DOF_GBY_KALMAN+0x3b0a>
    bbda:	f7ff fa6e 	bl	b0ba <fRun_9DOF_GBY_KALMAN+0x2fe6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1610
			{
				// compute the sine and cosine of the new geomagnetic vector
				ftmp = 1.0F / fhyp;
    bbde:	20fe      	movs	r0, #254	; 0xfe
    bbe0:	1c31      	adds	r1, r6, #0
    bbe2:	0580      	lsls	r0, r0, #22
    bbe4:	f7f4 fef2 	bl	9cc <__aeabi_fdiv>
    bbe8:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1611
				fsindelta = fopp * ftmp;
    bbea:	1c31      	adds	r1, r6, #0
    bbec:	1c20      	adds	r0, r4, #0
    bbee:	f7f5 f8d1 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1615
				fcosdelta = fadj * ftmp;

				// limit the inclination angle between limits to prevent runaway
				if (fsindelta > SINDELTAMAX)
    bbf2:	4939      	ldr	r1, [pc, #228]	; (bcd8 <fRun_9DOF_GBY_KALMAN+0x3c04>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1611
			// check for the pathological condition of zero geomagnetic field
			if (fhyp != 0.0F)
			{
				// compute the sine and cosine of the new geomagnetic vector
				ftmp = 1.0F / fhyp;
				fsindelta = fopp * ftmp;
    bbf4:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1615
				fcosdelta = fadj * ftmp;

				// limit the inclination angle between limits to prevent runaway
				if (fsindelta > SINDELTAMAX)
    bbf6:	f7f4 fd69 	bl	6cc <__aeabi_fcmpgt>
    bbfa:	2800      	cmp	r0, #0
    bbfc:	d135      	bne.n	bc6a <fRun_9DOF_GBY_KALMAN+0x3b96>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1620
				{
					fsindelta = SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
				}
				else if (fsindelta < -SINDELTAMAX)
    bbfe:	1c20      	adds	r0, r4, #0
    bc00:	4936      	ldr	r1, [pc, #216]	; (bcdc <fRun_9DOF_GBY_KALMAN+0x3c08>)
    bc02:	f7f4 fd4f 	bl	6a4 <__aeabi_fcmplt>
    bc06:	2800      	cmp	r0, #0
    bc08:	d15b      	bne.n	bcc2 <fRun_9DOF_GBY_KALMAN+0x3bee>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1612
			if (fhyp != 0.0F)
			{
				// compute the sine and cosine of the new geomagnetic vector
				ftmp = 1.0F / fhyp;
				fsindelta = fopp * ftmp;
				fcosdelta = fadj * ftmp;
    bc0a:	1c28      	adds	r0, r5, #0
    bc0c:	1c31      	adds	r1, r6, #0
    bc0e:	f7f5 f8c1 	bl	d94 <__aeabi_fmul>
    bc12:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1627
					fsindelta = -SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
				}

				// compute the new geomagnetic vector (always north pointing)
				pthisSV->fDeltaPl = fasin_deg(fsindelta);
    bc14:	1c20      	adds	r0, r4, #0
    bc16:	f7f7 f897 	bl	2d48 <fasin_deg>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1628
				pthisSV->fmGl[Y] = pthisMagCal->fB * fcosdelta;
    bc1a:	9f78      	ldr	r7, [sp, #480]	; 0x1e0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1627
					fsindelta = -SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
				}

				// compute the new geomagnetic vector (always north pointing)
				pthisSV->fDeltaPl = fasin_deg(fsindelta);
    bc1c:	23b8      	movs	r3, #184	; 0xb8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1628
				pthisSV->fmGl[Y] = pthisMagCal->fB * fcosdelta;
    bc1e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1627
					fsindelta = -SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
				}

				// compute the new geomagnetic vector (always north pointing)
				pthisSV->fDeltaPl = fasin_deg(fsindelta);
    bc20:	4659      	mov	r1, fp
    bc22:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1628
				pthisSV->fmGl[Y] = pthisMagCal->fB * fcosdelta;
    bc24:	1c29      	adds	r1, r5, #0
    bc26:	1c30      	adds	r0, r6, #0
    bc28:	f7f5 f8b4 	bl	d94 <__aeabi_fmul>
    bc2c:	2384      	movs	r3, #132	; 0x84
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1629
				pthisSV->fmGl[Z] = -pthisMagCal->fB * fsindelta;
    bc2e:	2280      	movs	r2, #128	; 0x80
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1628
					fcosdelta = COSDELTAMAX;
				}

				// compute the new geomagnetic vector (always north pointing)
				pthisSV->fDeltaPl = fasin_deg(fsindelta);
				pthisSV->fmGl[Y] = pthisMagCal->fB * fcosdelta;
    bc30:	005b      	lsls	r3, r3, #1
    bc32:	4659      	mov	r1, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1629
				pthisSV->fmGl[Z] = -pthisMagCal->fB * fsindelta;
    bc34:	0612      	lsls	r2, r2, #24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1628
					fcosdelta = COSDELTAMAX;
				}

				// compute the new geomagnetic vector (always north pointing)
				pthisSV->fDeltaPl = fasin_deg(fsindelta);
				pthisSV->fmGl[Y] = pthisMagCal->fB * fcosdelta;
    bc36:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1629
				pthisSV->fmGl[Z] = -pthisMagCal->fB * fsindelta;
    bc38:	1c21      	adds	r1, r4, #0
    bc3a:	18b0      	adds	r0, r6, r2
    bc3c:	f7f5 f8aa 	bl	d94 <__aeabi_fmul>
    bc40:	2386      	movs	r3, #134	; 0x86
    bc42:	005b      	lsls	r3, r3, #1
    bc44:	465c      	mov	r4, fp
    bc46:	50e0      	str	r0, [r4, r3]
    bc48:	f7ff fa37 	bl	b0ba <fRun_9DOF_GBY_KALMAN+0x2fe6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1139
	if (pthisMagCal->iValidMagCal && !pthisSV->iFirstOrientationLock)
	{
		// get the 6DOF orientation matrix and initial inclination angle
		if (ithisCoordSystem == NED)
		{
			feCompassNED(pthisSV->fRPl, &(pthisSV->fDeltaPl), pthisMag->fBcFast, pthisAccel->fGpFast);
    bc4c:	9a05      	ldr	r2, [sp, #20]
    bc4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bc50:	465f      	mov	r7, fp
    bc52:	3714      	adds	r7, #20
    bc54:	4659      	mov	r1, fp
    bc56:	1c38      	adds	r0, r7, #0
    bc58:	31b8      	adds	r1, #184	; 0xb8
    bc5a:	3224      	adds	r2, #36	; 0x24
    bc5c:	330c      	adds	r3, #12
    bc5e:	970e      	str	r7, [sp, #56]	; 0x38
    bc60:	f002 fffa 	bl	ec58 <feCompassNED>
    bc64:	980e      	ldr	r0, [sp, #56]	; 0x38
    bc66:	f7fc fa6b 	bl	8140 <fRun_9DOF_GBY_KALMAN+0x6c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1618

				// limit the inclination angle between limits to prevent runaway
				if (fsindelta > SINDELTAMAX)
				{
					fsindelta = SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
    bc6a:	4d1a      	ldr	r5, [pc, #104]	; (bcd4 <fRun_9DOF_GBY_KALMAN+0x3c00>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1617
				fcosdelta = fadj * ftmp;

				// limit the inclination angle between limits to prevent runaway
				if (fsindelta > SINDELTAMAX)
				{
					fsindelta = SINDELTAMAX;
    bc6c:	4c1a      	ldr	r4, [pc, #104]	; (bcd8 <fRun_9DOF_GBY_KALMAN+0x3c04>)
    bc6e:	e7d1      	b.n	bc14 <fRun_9DOF_GBY_KALMAN+0x3b40>
    bc70:	2500      	movs	r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1557
			// the north pointing component fadj must always be non-negative
			fopp = pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z];
			fadj = pthisSV->fmGl[X] - pthisSV->fdErrGlPl[X];
			if (fadj < 0.0F)
			{
				fadj = 0.0F;
    bc72:	1c2c      	adds	r4, r5, #0
    bc74:	f7fd faf3 	bl	925e <fRun_9DOF_GBY_KALMAN+0x118a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1578
					fcosdelta = COSDELTAMAX;
				}
				else if (fsindelta < -SINDELTAMAX)
				{
					fsindelta = -SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
    bc78:	4c16      	ldr	r4, [pc, #88]	; (bcd4 <fRun_9DOF_GBY_KALMAN+0x3c00>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1577
					fsindelta = SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
				}
				else if (fsindelta < -SINDELTAMAX)
				{
					fsindelta = -SINDELTAMAX;
    bc7a:	4e18      	ldr	r6, [pc, #96]	; (bcdc <fRun_9DOF_GBY_KALMAN+0x3c08>)
    bc7c:	f7fd fb1d 	bl	92ba <fRun_9DOF_GBY_KALMAN+0x11e6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1147
		{
			feCompassAndroid(pthisSV->fRPl, &(pthisSV->fDeltaPl), pthisMag->fBcFast, pthisAccel->fGpFast);
		}
		else if (ithisCoordSystem == WIN8)
		{
			feCompassWin8(pthisSV->fRPl, &(pthisSV->fDeltaPl), pthisMag->fBcFast, pthisAccel->fGpFast);
    bc80:	9a05      	ldr	r2, [sp, #20]
    bc82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bc84:	465c      	mov	r4, fp
    bc86:	3414      	adds	r4, #20
    bc88:	4659      	mov	r1, fp
    bc8a:	1c20      	adds	r0, r4, #0
    bc8c:	31b8      	adds	r1, #184	; 0xb8
    bc8e:	3224      	adds	r2, #36	; 0x24
    bc90:	330c      	adds	r3, #12
    bc92:	940e      	str	r4, [sp, #56]	; 0x38
    bc94:	f003 fad8 	bl	f248 <feCompassWin8>
    bc98:	980e      	ldr	r0, [sp, #56]	; 0x38
    bc9a:	f7fc fa51 	bl	8140 <fRun_9DOF_GBY_KALMAN+0x6c>
    bc9e:	2600      	movs	r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1602
			// the north pointing component fadj must always be non-negative
			fopp = -(pthisSV->fmGl[Z] - pthisSV->fdErrGlPl[Z]);
			fadj = pthisSV->fmGl[Y] - pthisSV->fdErrGlPl[Y];
			if (fadj < 0.0F)
			{
				fadj = 0.0F;
    bca0:	1c35      	adds	r5, r6, #0
    bca2:	e78b      	b.n	bbbc <fRun_9DOF_GBY_KALMAN+0x3ae8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1143
		{
			feCompassNED(pthisSV->fRPl, &(pthisSV->fDeltaPl), pthisMag->fBcFast, pthisAccel->fGpFast);
		}
		else if (ithisCoordSystem == ANDROID)
		{
			feCompassAndroid(pthisSV->fRPl, &(pthisSV->fDeltaPl), pthisMag->fBcFast, pthisAccel->fGpFast);
    bca4:	9a05      	ldr	r2, [sp, #20]
    bca6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bca8:	465f      	mov	r7, fp
    bcaa:	3714      	adds	r7, #20
    bcac:	4659      	mov	r1, fp
    bcae:	1c38      	adds	r0, r7, #0
    bcb0:	31b8      	adds	r1, #184	; 0xb8
    bcb2:	3224      	adds	r2, #36	; 0x24
    bcb4:	330c      	adds	r3, #12
    bcb6:	970e      	str	r7, [sp, #56]	; 0x38
    bcb8:	f003 f94a 	bl	ef50 <feCompassAndroid>
    bcbc:	980e      	ldr	r0, [sp, #56]	; 0x38
    bcbe:	f7fc fa3f 	bl	8140 <fRun_9DOF_GBY_KALMAN+0x6c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1623
					fcosdelta = COSDELTAMAX;
				}
				else if (fsindelta < -SINDELTAMAX)
				{
					fsindelta = -SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
    bcc2:	4d04      	ldr	r5, [pc, #16]	; (bcd4 <fRun_9DOF_GBY_KALMAN+0x3c00>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/fusion.c:1622
					fsindelta = SINDELTAMAX;
					fcosdelta = COSDELTAMAX;
				}
				else if (fsindelta < -SINDELTAMAX)
				{
					fsindelta = -SINDELTAMAX;
    bcc4:	4c05      	ldr	r4, [pc, #20]	; (bcdc <fRun_9DOF_GBY_KALMAN+0x3c08>)
    bcc6:	e7a5      	b.n	bc14 <fRun_9DOF_GBY_KALMAN+0x3b40>
    bcc8:	38d1b717 	.word	0x38d1b717
    bccc:	000006b4 	.word	0x000006b4
    bcd0:	000007fc 	.word	0x000007fc
    bcd4:	3ed8616d 	.word	0x3ed8616d
    bcd8:	3f6803ca 	.word	0x3f6803ca
    bcdc:	bf6803ca 	.word	0xbf6803ca

0000bce0 <fInitMagCalibration>:
fInitMagCalibration():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:41
#include "string.h"
#include "include_all.h"

// function resets the magnetometer buffer and magnetic calibration
void fInitMagCalibration(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer)
{
    bce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bce2:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:45
	int8 j, k;   // loop counters

	// initialize the calibration hard and soft iron estimate to null
	f3x3matrixAeqI(pthisMagCal->finvW);
    bce4:	300c      	adds	r0, #12
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:41
#include "string.h"
#include "include_all.h"

// function resets the magnetometer buffer and magnetic calibration
void fInitMagCalibration(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer)
{
    bce6:	1c0f      	adds	r7, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:45
	int8 j, k;   // loop counters

	// initialize the calibration hard and soft iron estimate to null
	f3x3matrixAeqI(pthisMagCal->finvW);
    bce8:	f001 ff44 	bl	db74 <f3x3matrixAeqI>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:46
	pthisMagCal->fV[X] = pthisMagCal->fV[Y] = pthisMagCal->fV[Z] = 0.0F;
    bcec:	2300      	movs	r3, #0
    bcee:	60a3      	str	r3, [r4, #8]
    bcf0:	6063      	str	r3, [r4, #4]
    bcf2:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:47
	pthisMagCal->fB = DEFAULTB;
    bcf4:	4b23      	ldr	r3, [pc, #140]	; (bd84 <fInitMagCalibration+0xa4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:50
	pthisMagCal->fFourBsq = 4.0F * pthisMagCal->fB * pthisMagCal->fB;
	pthisMagCal->fFitErrorpc = 1000.0F;
	pthisMagCal->iValidMagCal = 0;
    bcf6:	4a24      	ldr	r2, [pc, #144]	; (bd88 <fInitMagCalibration+0xa8>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:47
	int8 j, k;   // loop counters

	// initialize the calibration hard and soft iron estimate to null
	f3x3matrixAeqI(pthisMagCal->finvW);
	pthisMagCal->fV[X] = pthisMagCal->fV[Y] = pthisMagCal->fV[Z] = 0.0F;
	pthisMagCal->fB = DEFAULTB;
    bcf8:	6323      	str	r3, [r4, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:48
	pthisMagCal->fFourBsq = 4.0F * pthisMagCal->fB * pthisMagCal->fB;
    bcfa:	4b24      	ldr	r3, [pc, #144]	; (bd8c <fInitMagCalibration+0xac>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:56
	pthisMagCal->iCalInProgress = 0;
	pthisMagCal->iMagCalHasRun = 0;

	// set magnetic buffer index to invalid value -1 to denote invalid
	pthisMagBuffer->iMagBufferCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
    bcfc:	2590      	movs	r5, #144	; 0x90
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:48

	// initialize the calibration hard and soft iron estimate to null
	f3x3matrixAeqI(pthisMagCal->finvW);
	pthisMagCal->fV[X] = pthisMagCal->fV[Y] = pthisMagCal->fV[Z] = 0.0F;
	pthisMagCal->fB = DEFAULTB;
	pthisMagCal->fFourBsq = 4.0F * pthisMagCal->fB * pthisMagCal->fB;
    bcfe:	6363      	str	r3, [r4, #52]	; 0x34
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:49
	pthisMagCal->fFitErrorpc = 1000.0F;
    bd00:	4b23      	ldr	r3, [pc, #140]	; (bd90 <fInitMagCalibration+0xb0>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:56
	pthisMagCal->iCalInProgress = 0;
	pthisMagCal->iMagCalHasRun = 0;

	// set magnetic buffer index to invalid value -1 to denote invalid
	pthisMagBuffer->iMagBufferCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
    bd02:	00ed      	lsls	r5, r5, #3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:49
	// initialize the calibration hard and soft iron estimate to null
	f3x3matrixAeqI(pthisMagCal->finvW);
	pthisMagCal->fV[X] = pthisMagCal->fV[Y] = pthisMagCal->fV[Z] = 0.0F;
	pthisMagCal->fB = DEFAULTB;
	pthisMagCal->fFourBsq = 4.0F * pthisMagCal->fB * pthisMagCal->fB;
	pthisMagCal->fFitErrorpc = 1000.0F;
    bd04:	63a3      	str	r3, [r4, #56]	; 0x38
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:50
	pthisMagCal->iValidMagCal = 0;
    bd06:	2300      	movs	r3, #0
    bd08:	54a3      	strb	r3, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:51
	pthisMagCal->iCalInProgress = 0;
    bd0a:	4a22      	ldr	r2, [pc, #136]	; (bd94 <fInitMagCalibration+0xb4>)
    bd0c:	54a3      	strb	r3, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:52
	pthisMagCal->iMagCalHasRun = 0;
    bd0e:	4a22      	ldr	r2, [pc, #136]	; (bd98 <fInitMagCalibration+0xb8>)
    bd10:	54a3      	strb	r3, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:55

	// set magnetic buffer index to invalid value -1 to denote invalid
	pthisMagBuffer->iMagBufferCount = 0;
    bd12:	4a22      	ldr	r2, [pc, #136]	; (bd9c <fInitMagCalibration+0xbc>)
    bd14:	2400      	movs	r4, #0
    bd16:	52bb      	strh	r3, [r7, r2]
    bd18:	23d8      	movs	r3, #216	; 0xd8
    bd1a:	00db      	lsls	r3, r3, #3
    bd1c:	18fe      	adds	r6, r7, r3
    bd1e:	2101      	movs	r1, #1
    bd20:	1930      	adds	r0, r6, r4
    bd22:	4249      	negs	r1, r1
    bd24:	2260      	movs	r2, #96	; 0x60
    bd26:	3460      	adds	r4, #96	; 0x60
    bd28:	f009 f922 	bl	14f70 <memset>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:56 (discriminator 1)
	for (j = 0; j < MAGBUFFSIZEX; j++)
    bd2c:	42ac      	cmp	r4, r5
    bd2e:	d1f6      	bne.n	bd1e <fInitMagCalibration+0x3e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:70
	// entries cover the range 100 * tan(-PI/2 + PI/MAGBUFFSIZEX), 100 * tan(-PI/2 + 2*PI/MAGBUFFSIZEX) to
	// 100 * tan(-PI/2 + (MAGBUFFSIZEX - 1) * PI/MAGBUFFSIZEX).
	// for MAGBUFFSIZEX=12, the entries range in value from -373 to +373
	for (j = 0; j < (MAGBUFFSIZEX - 1); j++)
	{
		pthisMagBuffer->tanarray[j] = (int16) (100.0F * tanf(PI * (-0.5F + (float) (j + 1) / MAGBUFFSIZEX)));
    bd30:	4a1b      	ldr	r2, [pc, #108]	; (bda0 <fInitMagCalibration+0xc0>)
    bd32:	23b4      	movs	r3, #180	; 0xb4
    bd34:	011b      	lsls	r3, r3, #4
    bd36:	52fa      	strh	r2, [r7, r3]
    bd38:	4b1a      	ldr	r3, [pc, #104]	; (bda4 <fInitMagCalibration+0xc4>)
    bd3a:	22ad      	movs	r2, #173	; 0xad
    bd3c:	4252      	negs	r2, r2
    bd3e:	52fa      	strh	r2, [r7, r3]
    bd40:	4b19      	ldr	r3, [pc, #100]	; (bda8 <fInitMagCalibration+0xc8>)
    bd42:	2264      	movs	r2, #100	; 0x64
    bd44:	4252      	negs	r2, r2
    bd46:	52fa      	strh	r2, [r7, r3]
    bd48:	4b18      	ldr	r3, [pc, #96]	; (bdac <fInitMagCalibration+0xcc>)
    bd4a:	2239      	movs	r2, #57	; 0x39
    bd4c:	4252      	negs	r2, r2
    bd4e:	52fa      	strh	r2, [r7, r3]
    bd50:	4b17      	ldr	r3, [pc, #92]	; (bdb0 <fInitMagCalibration+0xd0>)
    bd52:	221a      	movs	r2, #26
    bd54:	4252      	negs	r2, r2
    bd56:	52fa      	strh	r2, [r7, r3]
    bd58:	4b16      	ldr	r3, [pc, #88]	; (bdb4 <fInitMagCalibration+0xd4>)
    bd5a:	2200      	movs	r2, #0
    bd5c:	52fa      	strh	r2, [r7, r3]
    bd5e:	4b16      	ldr	r3, [pc, #88]	; (bdb8 <fInitMagCalibration+0xd8>)
    bd60:	221a      	movs	r2, #26
    bd62:	52fa      	strh	r2, [r7, r3]
    bd64:	4b15      	ldr	r3, [pc, #84]	; (bdbc <fInitMagCalibration+0xdc>)
    bd66:	2239      	movs	r2, #57	; 0x39
    bd68:	52fa      	strh	r2, [r7, r3]
    bd6a:	23b5      	movs	r3, #181	; 0xb5
    bd6c:	2264      	movs	r2, #100	; 0x64
    bd6e:	011b      	lsls	r3, r3, #4
    bd70:	52fa      	strh	r2, [r7, r3]
    bd72:	4b13      	ldr	r3, [pc, #76]	; (bdc0 <fInitMagCalibration+0xe0>)
    bd74:	22ad      	movs	r2, #173	; 0xad
    bd76:	52fa      	strh	r2, [r7, r3]
    bd78:	4b12      	ldr	r3, [pc, #72]	; (bdc4 <fInitMagCalibration+0xe4>)
    bd7a:	2276      	movs	r2, #118	; 0x76
    bd7c:	32ff      	adds	r2, #255	; 0xff
    bd7e:	52fa      	strh	r2, [r7, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:74
	}

	return;
}
    bd80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bd82:	46c0      	nop			; (mov r8, r8)
    bd84:	42480000 	.word	0x42480000
    bd88:	00000416 	.word	0x00000416
    bd8c:	461c4000 	.word	0x461c4000
    bd90:	447a0000 	.word	0x447a0000
    bd94:	00000414 	.word	0x00000414
    bd98:	00000415 	.word	0x00000415
    bd9c:	00000b56 	.word	0x00000b56
    bda0:	fffffe8b 	.word	0xfffffe8b
    bda4:	00000b42 	.word	0x00000b42
    bda8:	00000b44 	.word	0x00000b44
    bdac:	00000b46 	.word	0x00000b46
    bdb0:	00000b48 	.word	0x00000b48
    bdb4:	00000b4a 	.word	0x00000b4a
    bdb8:	00000b4c 	.word	0x00000b4c
    bdbc:	00000b4e 	.word	0x00000b4e
    bdc0:	00000b52 	.word	0x00000b52
    bdc4:	00000b54 	.word	0x00000b54

0000bdc8 <iUpdateMagnetometerBuffer>:
iUpdateMagnetometerBuffer():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:79

// function updates the magnetic measurement buffer with most recent magnetic data (typically 25Hz)
void iUpdateMagnetometerBuffer(struct MagneticBuffer *pthisMagBuffer, struct AccelSensor *pthisAccel,
		struct MagSensor *pthisMag, int32 loopcounter)
{
    bdc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    bdca:	465f      	mov	r7, fp
    bdcc:	4656      	mov	r6, sl
    bdce:	464d      	mov	r5, r9
    bdd0:	4644      	mov	r4, r8
    bdd2:	b4f0      	push	{r4, r5, r6, r7}
    bdd4:	1c0f      	adds	r7, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:88
	int16 itanj, itank;				// indexing accelerometer ratios
	int8 j, k, l, m;				// counters
	int8 itooclose;					// flag denoting measurement is too close to existing ones

	// calculate the magnetometer buffer bins from the accelerometer tangent ratios
	if (pthisAccel->iGp[X] == 0) return;
    bdd6:	8dc9      	ldrh	r1, [r1, #46]	; 0x2e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:79
}

// function updates the magnetic measurement buffer with most recent magnetic data (typically 25Hz)
void iUpdateMagnetometerBuffer(struct MagneticBuffer *pthisMagBuffer, struct AccelSensor *pthisAccel,
		struct MagSensor *pthisMag, int32 loopcounter)
{
    bdd8:	b089      	sub	sp, #36	; 0x24
    bdda:	1c04      	adds	r4, r0, #0
    bddc:	1c16      	adds	r6, r2, #0
    bdde:	1c1d      	adds	r5, r3, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:88
	int16 itanj, itank;				// indexing accelerometer ratios
	int8 j, k, l, m;				// counters
	int8 itooclose;					// flag denoting measurement is too close to existing ones

	// calculate the magnetometer buffer bins from the accelerometer tangent ratios
	if (pthisAccel->iGp[X] == 0) return;
    bde0:	2900      	cmp	r1, #0
    bde2:	d100      	bne.n	bde6 <iUpdateMagnetometerBuffer+0x1e>
    bde4:	e0e2      	b.n	bfac <iUpdateMagnetometerBuffer+0x1e4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:89
	itanj = (100 * (int32)pthisAccel->iGp[Y]) / ((int32)pthisAccel->iGp[X]);
    bde6:	b208      	sxth	r0, r1
    bde8:	4680      	mov	r8, r0
    bdea:	2130      	movs	r1, #48	; 0x30
    bdec:	5e78      	ldrsh	r0, [r7, r1]
    bdee:	2264      	movs	r2, #100	; 0x64
    bdf0:	4641      	mov	r1, r8
    bdf2:	4350      	muls	r0, r2
    bdf4:	4691      	mov	r9, r2
    bdf6:	f7f4 fba3 	bl	540 <__aeabi_idiv>
    bdfa:	b280      	uxth	r0, r0
    bdfc:	4682      	mov	sl, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:90
	itank = (100 * (int32)pthisAccel->iGp[Z]) / ((int32)pthisAccel->iGp[X]);
    bdfe:	2132      	movs	r1, #50	; 0x32
    be00:	5e78      	ldrsh	r0, [r7, r1]
    be02:	464a      	mov	r2, r9
    be04:	4350      	muls	r0, r2
    be06:	4641      	mov	r1, r8
    be08:	f7f4 fb9a 	bl	540 <__aeabi_idiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:95
	// map tangent ratios to bins j and k using equal angle bins: C guarantees left to right execution of the test
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
    be0c:	22b4      	movs	r2, #180	; 0xb4
    be0e:	0112      	lsls	r2, r2, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:90
	int8 itooclose;					// flag denoting measurement is too close to existing ones

	// calculate the magnetometer buffer bins from the accelerometer tangent ratios
	if (pthisAccel->iGp[X] == 0) return;
	itanj = (100 * (int32)pthisAccel->iGp[Y]) / ((int32)pthisAccel->iGp[X]);
	itank = (100 * (int32)pthisAccel->iGp[Z]) / ((int32)pthisAccel->iGp[X]);
    be10:	b283      	uxth	r3, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:95
	// map tangent ratios to bins j and k using equal angle bins: C guarantees left to right execution of the test
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
    be12:	5ea1      	ldrsh	r1, [r4, r2]
    be14:	4650      	mov	r0, sl
    be16:	b202      	sxth	r2, r0
    be18:	4291      	cmp	r1, r2
    be1a:	dd00      	ble.n	be1e <iUpdateMagnetometerBuffer+0x56>
    be1c:	e1bf      	b.n	c19e <iUpdateMagnetometerBuffer+0x3d6>
    be1e:	48ab      	ldr	r0, [pc, #684]	; (c0cc <iUpdateMagnetometerBuffer+0x304>)
    be20:	5e20      	ldrsh	r0, [r4, r0]
    be22:	4290      	cmp	r0, r2
    be24:	dd00      	ble.n	be28 <iUpdateMagnetometerBuffer+0x60>
    be26:	e1be      	b.n	c1a6 <iUpdateMagnetometerBuffer+0x3de>
    be28:	48a9      	ldr	r0, [pc, #676]	; (c0d0 <iUpdateMagnetometerBuffer+0x308>)
    be2a:	5e20      	ldrsh	r0, [r4, r0]
    be2c:	4290      	cmp	r0, r2
    be2e:	dd00      	ble.n	be32 <iUpdateMagnetometerBuffer+0x6a>
    be30:	e1c3      	b.n	c1ba <iUpdateMagnetometerBuffer+0x3f2>
    be32:	48a8      	ldr	r0, [pc, #672]	; (c0d4 <iUpdateMagnetometerBuffer+0x30c>)
    be34:	5e20      	ldrsh	r0, [r4, r0]
    be36:	4290      	cmp	r0, r2
    be38:	dd00      	ble.n	be3c <iUpdateMagnetometerBuffer+0x74>
    be3a:	e1bc      	b.n	c1b6 <iUpdateMagnetometerBuffer+0x3ee>
    be3c:	48a6      	ldr	r0, [pc, #664]	; (c0d8 <iUpdateMagnetometerBuffer+0x310>)
    be3e:	5e20      	ldrsh	r0, [r4, r0]
    be40:	4290      	cmp	r0, r2
    be42:	dd00      	ble.n	be46 <iUpdateMagnetometerBuffer+0x7e>
    be44:	e1a9      	b.n	c19a <iUpdateMagnetometerBuffer+0x3d2>
    be46:	48a5      	ldr	r0, [pc, #660]	; (c0dc <iUpdateMagnetometerBuffer+0x314>)
    be48:	5e20      	ldrsh	r0, [r4, r0]
    be4a:	4290      	cmp	r0, r2
    be4c:	dd00      	ble.n	be50 <iUpdateMagnetometerBuffer+0x88>
    be4e:	e1ba      	b.n	c1c6 <iUpdateMagnetometerBuffer+0x3fe>
    be50:	48a3      	ldr	r0, [pc, #652]	; (c0e0 <iUpdateMagnetometerBuffer+0x318>)
    be52:	5e20      	ldrsh	r0, [r4, r0]
    be54:	4290      	cmp	r0, r2
    be56:	dd00      	ble.n	be5a <iUpdateMagnetometerBuffer+0x92>
    be58:	e1bd      	b.n	c1d6 <iUpdateMagnetometerBuffer+0x40e>
    be5a:	48a2      	ldr	r0, [pc, #648]	; (c0e4 <iUpdateMagnetometerBuffer+0x31c>)
    be5c:	5e20      	ldrsh	r0, [r4, r0]
    be5e:	4290      	cmp	r0, r2
    be60:	dd00      	ble.n	be64 <iUpdateMagnetometerBuffer+0x9c>
    be62:	e1ba      	b.n	c1da <iUpdateMagnetometerBuffer+0x412>
    be64:	20b5      	movs	r0, #181	; 0xb5
    be66:	0100      	lsls	r0, r0, #4
    be68:	5e20      	ldrsh	r0, [r4, r0]
    be6a:	4290      	cmp	r0, r2
    be6c:	dd00      	ble.n	be70 <iUpdateMagnetometerBuffer+0xa8>
    be6e:	e1ac      	b.n	c1ca <iUpdateMagnetometerBuffer+0x402>
    be70:	489d      	ldr	r0, [pc, #628]	; (c0e8 <iUpdateMagnetometerBuffer+0x320>)
    be72:	5e20      	ldrsh	r0, [r4, r0]
    be74:	4290      	cmp	r0, r2
    be76:	dd00      	ble.n	be7a <iUpdateMagnetometerBuffer+0xb2>
    be78:	e1b7      	b.n	c1ea <iUpdateMagnetometerBuffer+0x422>
    be7a:	489c      	ldr	r0, [pc, #624]	; (c0ec <iUpdateMagnetometerBuffer+0x324>)
    be7c:	5e20      	ldrsh	r0, [r4, r0]
    be7e:	4290      	cmp	r0, r2
    be80:	dd00      	ble.n	be84 <iUpdateMagnetometerBuffer+0xbc>
    be82:	e1b0      	b.n	c1e6 <iUpdateMagnetometerBuffer+0x41e>
    be84:	220b      	movs	r2, #11
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:96 (discriminator 1)
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
    be86:	b21b      	sxth	r3, r3
    be88:	4299      	cmp	r1, r3
    be8a:	dd00      	ble.n	be8e <iUpdateMagnetometerBuffer+0xc6>
    be8c:	e18d      	b.n	c1aa <iUpdateMagnetometerBuffer+0x3e2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:96
    be8e:	498f      	ldr	r1, [pc, #572]	; (c0cc <iUpdateMagnetometerBuffer+0x304>)
    be90:	5e61      	ldrsh	r1, [r4, r1]
    be92:	4299      	cmp	r1, r3
    be94:	dd00      	ble.n	be98 <iUpdateMagnetometerBuffer+0xd0>
    be96:	e184      	b.n	c1a2 <iUpdateMagnetometerBuffer+0x3da>
    be98:	498d      	ldr	r1, [pc, #564]	; (c0d0 <iUpdateMagnetometerBuffer+0x308>)
    be9a:	5e61      	ldrsh	r1, [r4, r1]
    be9c:	4299      	cmp	r1, r3
    be9e:	dd00      	ble.n	bea2 <iUpdateMagnetometerBuffer+0xda>
    bea0:	e185      	b.n	c1ae <iUpdateMagnetometerBuffer+0x3e6>
    bea2:	498c      	ldr	r1, [pc, #560]	; (c0d4 <iUpdateMagnetometerBuffer+0x30c>)
    bea4:	5e61      	ldrsh	r1, [r4, r1]
    bea6:	4299      	cmp	r1, r3
    bea8:	dd00      	ble.n	beac <iUpdateMagnetometerBuffer+0xe4>
    beaa:	e182      	b.n	c1b2 <iUpdateMagnetometerBuffer+0x3ea>
    beac:	498a      	ldr	r1, [pc, #552]	; (c0d8 <iUpdateMagnetometerBuffer+0x310>)
    beae:	5e61      	ldrsh	r1, [r4, r1]
    beb0:	4299      	cmp	r1, r3
    beb2:	dd00      	ble.n	beb6 <iUpdateMagnetometerBuffer+0xee>
    beb4:	e183      	b.n	c1be <iUpdateMagnetometerBuffer+0x3f6>
    beb6:	4989      	ldr	r1, [pc, #548]	; (c0dc <iUpdateMagnetometerBuffer+0x314>)
    beb8:	5e61      	ldrsh	r1, [r4, r1]
    beba:	4299      	cmp	r1, r3
    bebc:	dd00      	ble.n	bec0 <iUpdateMagnetometerBuffer+0xf8>
    bebe:	e180      	b.n	c1c2 <iUpdateMagnetometerBuffer+0x3fa>
    bec0:	4987      	ldr	r1, [pc, #540]	; (c0e0 <iUpdateMagnetometerBuffer+0x318>)
    bec2:	5e61      	ldrsh	r1, [r4, r1]
    bec4:	4299      	cmp	r1, r3
    bec6:	dd00      	ble.n	beca <iUpdateMagnetometerBuffer+0x102>
    bec8:	e189      	b.n	c1de <iUpdateMagnetometerBuffer+0x416>
    beca:	4986      	ldr	r1, [pc, #536]	; (c0e4 <iUpdateMagnetometerBuffer+0x31c>)
    becc:	5e61      	ldrsh	r1, [r4, r1]
    bece:	4299      	cmp	r1, r3
    bed0:	dd00      	ble.n	bed4 <iUpdateMagnetometerBuffer+0x10c>
    bed2:	e17c      	b.n	c1ce <iUpdateMagnetometerBuffer+0x406>
    bed4:	21b5      	movs	r1, #181	; 0xb5
    bed6:	0109      	lsls	r1, r1, #4
    bed8:	5e61      	ldrsh	r1, [r4, r1]
    beda:	4299      	cmp	r1, r3
    bedc:	dd00      	ble.n	bee0 <iUpdateMagnetometerBuffer+0x118>
    bede:	e178      	b.n	c1d2 <iUpdateMagnetometerBuffer+0x40a>
    bee0:	4981      	ldr	r1, [pc, #516]	; (c0e8 <iUpdateMagnetometerBuffer+0x320>)
    bee2:	5e61      	ldrsh	r1, [r4, r1]
    bee4:	4299      	cmp	r1, r3
    bee6:	dd00      	ble.n	beea <iUpdateMagnetometerBuffer+0x122>
    bee8:	e17b      	b.n	c1e2 <iUpdateMagnetometerBuffer+0x41a>
    beea:	4980      	ldr	r1, [pc, #512]	; (c0ec <iUpdateMagnetometerBuffer+0x324>)
    beec:	5e60      	ldrsh	r0, [r4, r1]
    beee:	17d9      	asrs	r1, r3, #31
    bef0:	0fc7      	lsrs	r7, r0, #31
    bef2:	4283      	cmp	r3, r0
    bef4:	4179      	adcs	r1, r7
    bef6:	310a      	adds	r1, #10
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:97
	if (pthisAccel->iGp[X] < 0) k += MAGBUFFSIZEX;
    bef8:	4640      	mov	r0, r8
    befa:	2800      	cmp	r0, #0
    befc:	da00      	bge.n	bf00 <iUpdateMagnetometerBuffer+0x138>
    befe:	e093      	b.n	c028 <iUpdateMagnetometerBuffer+0x260>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:101

	// case 1: buffer is full and this bin has a measurement: over-write without increasing number of measurements
	// this is the most common option at run time
	if ((pthisMagBuffer->iMagBufferCount == MAXMEASUREMENTS) && (pthisMagBuffer->index[j][k] != -1))
    bf00:	4f7b      	ldr	r7, [pc, #492]	; (c0f0 <iUpdateMagnetometerBuffer+0x328>)
    bf02:	5be3      	ldrh	r3, [r4, r7]
    bf04:	9303      	str	r3, [sp, #12]
    bf06:	b21b      	sxth	r3, r3
    bf08:	2bf0      	cmp	r3, #240	; 0xf0
    bf0a:	d100      	bne.n	bf0e <iUpdateMagnetometerBuffer+0x146>
    bf0c:	e06f      	b.n	bfee <iUpdateMagnetometerBuffer+0x226>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:152
		pthisMagBuffer->index[l][m] = -1;
		return;
	} // end case 2

	// case 3: buffer is not full and this bin is empty: store and increment number of measurements
	if ((pthisMagBuffer->iMagBufferCount < MAXMEASUREMENTS) && (pthisMagBuffer->index[j][k] == -1))
    bf0e:	2bef      	cmp	r3, #239	; 0xef
    bf10:	dc4c      	bgt.n	bfac <iUpdateMagnetometerBuffer+0x1e4>
    bf12:	0053      	lsls	r3, r2, #1
    bf14:	189a      	adds	r2, r3, r2
    bf16:	00d2      	lsls	r2, r2, #3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:152 (discriminator 1)
    bf18:	b249      	sxtb	r1, r1
    bf1a:	1851      	adds	r1, r2, r1
    bf1c:	0088      	lsls	r0, r1, #2
    bf1e:	22d8      	movs	r2, #216	; 0xd8
    bf20:	1820      	adds	r0, r4, r0
    bf22:	00d2      	lsls	r2, r2, #3
    bf24:	5883      	ldr	r3, [r0, r2]
    bf26:	3301      	adds	r3, #1
    bf28:	d047      	beq.n	bfba <iUpdateMagnetometerBuffer+0x1f2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:172
	{
		// calculate the vector difference between current measurement and the buffer entry
		idelta = 0;
		for (i = X; i <= Z; i++)
		{
			idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
    bf2a:	2344      	movs	r3, #68	; 0x44
    bf2c:	5af3      	ldrh	r3, [r6, r3]
    bf2e:	0049      	lsls	r1, r1, #1
    bf30:	9304      	str	r3, [sp, #16]
    bf32:	b21b      	sxth	r3, r3
    bf34:	4698      	mov	r8, r3
    bf36:	2346      	movs	r3, #70	; 0x46
    bf38:	5af3      	ldrh	r3, [r6, r3]
    bf3a:	468b      	mov	fp, r1
    bf3c:	9306      	str	r3, [sp, #24]
    bf3e:	b21b      	sxth	r3, r3
    bf40:	469c      	mov	ip, r3
    bf42:	1863      	adds	r3, r4, r1
    bf44:	2190      	movs	r1, #144	; 0x90
    bf46:	0089      	lsls	r1, r1, #2
    bf48:	468a      	mov	sl, r1
    bf4a:	5e5f      	ldrsh	r7, [r3, r1]
    bf4c:	4661      	mov	r1, ip
    bf4e:	1bc9      	subs	r1, r1, r7
    bf50:	17cf      	asrs	r7, r1, #31
    bf52:	19c9      	adds	r1, r1, r7
    bf54:	4079      	eors	r1, r7
    bf56:	465f      	mov	r7, fp
    bf58:	4689      	mov	r9, r1
    bf5a:	5f39      	ldrsh	r1, [r7, r4]
    bf5c:	4647      	mov	r7, r8
    bf5e:	1a79      	subs	r1, r7, r1
    bf60:	17cf      	asrs	r7, r1, #31
    bf62:	19c9      	adds	r1, r1, r7
    bf64:	4079      	eors	r1, r7
    bf66:	4449      	add	r1, r9
    bf68:	9101      	str	r1, [sp, #4]
    bf6a:	2148      	movs	r1, #72	; 0x48
    bf6c:	5a71      	ldrh	r1, [r6, r1]
    bf6e:	2790      	movs	r7, #144	; 0x90
    bf70:	9105      	str	r1, [sp, #20]
    bf72:	b209      	sxth	r1, r1
    bf74:	9107      	str	r1, [sp, #28]
    bf76:	00ff      	lsls	r7, r7, #3
    bf78:	5fdf      	ldrsh	r7, [r3, r7]
    bf7a:	9907      	ldr	r1, [sp, #28]
    bf7c:	1bc9      	subs	r1, r1, r7
    bf7e:	17cf      	asrs	r7, r1, #31
    bf80:	19c9      	adds	r1, r1, r7
    bf82:	4079      	eors	r1, r7
    bf84:	4689      	mov	r9, r1
    bf86:	9901      	ldr	r1, [sp, #4]
    bf88:	4489      	add	r9, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:175
		}
		// check to see if the current reading is close to this existing magnetic buffer entry
		if (idelta < MESHDELTACOUNTS)
    bf8a:	464f      	mov	r7, r9
    bf8c:	2f31      	cmp	r7, #49	; 0x31
    bf8e:	dd00      	ble.n	bf92 <iUpdateMagnetometerBuffer+0x1ca>
    bf90:	e085      	b.n	c09e <iUpdateMagnetometerBuffer+0x2d6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:180 (discriminator 1)
		{
			// simply over-write the measurement and return
			for (i = X; i <= Z; i++)
			{
				pthisMagBuffer->iBpFast[i][j][k] = pthisMag->iBpFast[i];
    bf92:	9f04      	ldr	r7, [sp, #16]
    bf94:	4659      	mov	r1, fp
    bf96:	530f      	strh	r7, [r1, r4]
    bf98:	2146      	movs	r1, #70	; 0x46
    bf9a:	5a74      	ldrh	r4, [r6, r1]
    bf9c:	4657      	mov	r7, sl
    bf9e:	53dc      	strh	r4, [r3, r7]
    bfa0:	2148      	movs	r1, #72	; 0x48
    bfa2:	5a74      	ldrh	r4, [r6, r1]
    bfa4:	2690      	movs	r6, #144	; 0x90
    bfa6:	00f6      	lsls	r6, r6, #3
    bfa8:	539c      	strh	r4, [r3, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:182 (discriminator 1)
			}
			pthisMagBuffer->index[j][k] = loopcounter;
    bfaa:	5085      	str	r5, [r0, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:242
		return;
	} // end case 4

	// this line should be unreachable
	return;
}
    bfac:	b009      	add	sp, #36	; 0x24
    bfae:	bc3c      	pop	{r2, r3, r4, r5}
    bfb0:	4690      	mov	r8, r2
    bfb2:	4699      	mov	r9, r3
    bfb4:	46a2      	mov	sl, r4
    bfb6:	46ab      	mov	fp, r5
    bfb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:157 (discriminator 1)
	if ((pthisMagBuffer->iMagBufferCount < MAXMEASUREMENTS) && (pthisMagBuffer->index[j][k] == -1))
	{
		// store the fast (unaveraged at typically 200Hz) integer magnetometer reading into the buffer bin j, k
		for (i = X; i <= Z; i++)
		{
			pthisMagBuffer->iBpFast[i][j][k] = pthisMag->iBpFast[i];
    bfba:	2344      	movs	r3, #68	; 0x44
    bfbc:	5af3      	ldrh	r3, [r6, r3]
    bfbe:	0049      	lsls	r1, r1, #1
    bfc0:	530b      	strh	r3, [r1, r4]
    bfc2:	2346      	movs	r3, #70	; 0x46
    bfc4:	5af3      	ldrh	r3, [r6, r3]
    bfc6:	1909      	adds	r1, r1, r4
    bfc8:	469c      	mov	ip, r3
    bfca:	2390      	movs	r3, #144	; 0x90
    bfcc:	009b      	lsls	r3, r3, #2
    bfce:	4698      	mov	r8, r3
    bfd0:	4689      	mov	r9, r1
    bfd2:	4663      	mov	r3, ip
    bfd4:	4441      	add	r1, r8
    bfd6:	800b      	strh	r3, [r1, #0]
    bfd8:	2348      	movs	r3, #72	; 0x48
    bfda:	5af6      	ldrh	r6, [r6, r3]
    bfdc:	2390      	movs	r3, #144	; 0x90
    bfde:	00db      	lsls	r3, r3, #3
    bfe0:	4649      	mov	r1, r9
    bfe2:	52ce      	strh	r6, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:160 (discriminator 1)
		}
		pthisMagBuffer->index[j][k] = loopcounter;
		(pthisMagBuffer->iMagBufferCount)++;
    bfe4:	9b03      	ldr	r3, [sp, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:159 (discriminator 1)
		// store the fast (unaveraged at typically 200Hz) integer magnetometer reading into the buffer bin j, k
		for (i = X; i <= Z; i++)
		{
			pthisMagBuffer->iBpFast[i][j][k] = pthisMag->iBpFast[i];
		}
		pthisMagBuffer->index[j][k] = loopcounter;
    bfe6:	5085      	str	r5, [r0, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:160 (discriminator 1)
		(pthisMagBuffer->iMagBufferCount)++;
    bfe8:	3301      	adds	r3, #1
    bfea:	53e3      	strh	r3, [r4, r7]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:161 (discriminator 1)
		return;
    bfec:	e7de      	b.n	bfac <iUpdateMagnetometerBuffer+0x1e4>
    bfee:	0053      	lsls	r3, r2, #1
    bff0:	189a      	adds	r2, r3, r2
    bff2:	00d2      	lsls	r2, r2, #3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:101 (discriminator 1)
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
	if (pthisAccel->iGp[X] < 0) k += MAGBUFFSIZEX;

	// case 1: buffer is full and this bin has a measurement: over-write without increasing number of measurements
	// this is the most common option at run time
	if ((pthisMagBuffer->iMagBufferCount == MAXMEASUREMENTS) && (pthisMagBuffer->index[j][k] != -1))
    bff4:	b249      	sxtb	r1, r1
    bff6:	1851      	adds	r1, r2, r1
    bff8:	008a      	lsls	r2, r1, #2
    bffa:	23d8      	movs	r3, #216	; 0xd8
    bffc:	18a2      	adds	r2, r4, r2
    bffe:	00db      	lsls	r3, r3, #3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:106 (discriminator 1)
	{
		// store the fast (unaveraged at typically 200Hz) integer magnetometer reading into the buffer bin j, k
		for (i = X; i <= Z; i++)
		{
			pthisMagBuffer->iBpFast[i][j][k] = pthisMag->iBpFast[i];
    c000:	2044      	movs	r0, #68	; 0x44
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:101 (discriminator 1)
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
	if (pthisAccel->iGp[X] < 0) k += MAGBUFFSIZEX;

	// case 1: buffer is full and this bin has a measurement: over-write without increasing number of measurements
	// this is the most common option at run time
	if ((pthisMagBuffer->iMagBufferCount == MAXMEASUREMENTS) && (pthisMagBuffer->index[j][k] != -1))
    c002:	58d7      	ldr	r7, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:106 (discriminator 1)
	{
		// store the fast (unaveraged at typically 200Hz) integer magnetometer reading into the buffer bin j, k
		for (i = X; i <= Z; i++)
		{
			pthisMagBuffer->iBpFast[i][j][k] = pthisMag->iBpFast[i];
    c004:	5a30      	ldrh	r0, [r6, r0]
    c006:	0049      	lsls	r1, r1, #1
    c008:	5308      	strh	r0, [r1, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:101 (discriminator 1)
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
	if (pthisAccel->iGp[X] < 0) k += MAGBUFFSIZEX;

	// case 1: buffer is full and this bin has a measurement: over-write without increasing number of measurements
	// this is the most common option at run time
	if ((pthisMagBuffer->iMagBufferCount == MAXMEASUREMENTS) && (pthisMagBuffer->index[j][k] != -1))
    c00a:	3701      	adds	r7, #1
    c00c:	d00f      	beq.n	c02e <iUpdateMagnetometerBuffer+0x266>
    c00e:	1864      	adds	r4, r4, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:106 (discriminator 1)
	{
		// store the fast (unaveraged at typically 200Hz) integer magnetometer reading into the buffer bin j, k
		for (i = X; i <= Z; i++)
		{
			pthisMagBuffer->iBpFast[i][j][k] = pthisMag->iBpFast[i];
    c010:	2146      	movs	r1, #70	; 0x46
    c012:	5a70      	ldrh	r0, [r6, r1]
    c014:	2190      	movs	r1, #144	; 0x90
    c016:	0089      	lsls	r1, r1, #2
    c018:	5260      	strh	r0, [r4, r1]
    c01a:	2148      	movs	r1, #72	; 0x48
    c01c:	5a70      	ldrh	r0, [r6, r1]
    c01e:	2190      	movs	r1, #144	; 0x90
    c020:	00c9      	lsls	r1, r1, #3
    c022:	5260      	strh	r0, [r4, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:108 (discriminator 1)
		}
		pthisMagBuffer->index[j][k] = loopcounter;
    c024:	50d5      	str	r5, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:109 (discriminator 1)
		return;
    c026:	e7c1      	b.n	bfac <iUpdateMagnetometerBuffer+0x1e4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:97 (discriminator 1)
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
	if (pthisAccel->iGp[X] < 0) k += MAGBUFFSIZEX;
    c028:	310c      	adds	r1, #12
    c02a:	b2c9      	uxtb	r1, r1
    c02c:	e768      	b.n	bf00 <iUpdateMagnetometerBuffer+0x138>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:119 (discriminator 1)
	if ((pthisMagBuffer->iMagBufferCount == MAXMEASUREMENTS) && (pthisMagBuffer->index[j][k] == -1))
	{		
		// store the fast (unaveraged at typically 200Hz) integer magnetometer reading into the buffer bin j, k
		for (i = X; i <= Z; i++)
		{
			pthisMagBuffer->iBpFast[i][j][k] = pthisMag->iBpFast[i];
    c02e:	2046      	movs	r0, #70	; 0x46
    c030:	5a37      	ldrh	r7, [r6, r0]
    c032:	2090      	movs	r0, #144	; 0x90
    c034:	1861      	adds	r1, r4, r1
    c036:	0080      	lsls	r0, r0, #2
    c038:	520f      	strh	r7, [r1, r0]
    c03a:	2048      	movs	r0, #72	; 0x48
    c03c:	5a36      	ldrh	r6, [r6, r0]
    c03e:	2090      	movs	r0, #144	; 0x90
    c040:	00c0      	lsls	r0, r0, #3
    c042:	520e      	strh	r6, [r1, r0]
    c044:	20d8      	movs	r0, #216	; 0xd8
    c046:	00c0      	lsls	r0, r0, #3
    c048:	1900      	adds	r0, r0, r4
    c04a:	4684      	mov	ip, r0
    c04c:	46e0      	mov	r8, ip
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:121 (discriminator 1)
		}
		pthisMagBuffer->index[j][k] = loopcounter;
    c04e:	50d5      	str	r5, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:126 (discriminator 1)

		// set l and m to the oldest active entry and disable it
		i = loopcounter;
		l = m = 0; // to avoid compiler complaint
		for (j = 0; j < MAGBUFFSIZEX; j++)
    c050:	2000      	movs	r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:125 (discriminator 1)
		}
		pthisMagBuffer->index[j][k] = loopcounter;

		// set l and m to the oldest active entry and disable it
		i = loopcounter;
		l = m = 0; // to avoid compiler complaint
    c052:	2600      	movs	r6, #0
    c054:	2700      	movs	r7, #0
    c056:	46a4      	mov	ip, r4
    c058:	4642      	mov	r2, r8
    c05a:	2300      	movs	r3, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:131
		for (j = 0; j < MAGBUFFSIZEX; j++)
		{
			for (k = 0; k < MAGBUFFSIZEY; k++)
			{
				// check if the time stamp is older than the oldest found so far (normally fails this test)
				if (pthisMagBuffer->index[j][k] < i)
    c05c:	6811      	ldr	r1, [r2, #0]
    c05e:	42a9      	cmp	r1, r5
    c060:	da04      	bge.n	c06c <iUpdateMagnetometerBuffer+0x2a4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:134
				{
					// check if this bin is active (normally passes this test)
					if (pthisMagBuffer->index[j][k] != -1)
    c062:	1c4c      	adds	r4, r1, #1
    c064:	d002      	beq.n	c06c <iUpdateMagnetometerBuffer+0x2a4>
    c066:	1c1e      	adds	r6, r3, #0
    c068:	1c07      	adds	r7, r0, #0
    c06a:	1c0d      	adds	r5, r1, #0
    c06c:	3301      	adds	r3, #1
    c06e:	b2db      	uxtb	r3, r3
    c070:	3204      	adds	r2, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:128
		// set l and m to the oldest active entry and disable it
		i = loopcounter;
		l = m = 0; // to avoid compiler complaint
		for (j = 0; j < MAGBUFFSIZEX; j++)
		{
			for (k = 0; k < MAGBUFFSIZEY; k++)
    c072:	2b18      	cmp	r3, #24
    c074:	d1f2      	bne.n	c05c <iUpdateMagnetometerBuffer+0x294>
    c076:	3001      	adds	r0, #1
    c078:	2160      	movs	r1, #96	; 0x60
    c07a:	b2c0      	uxtb	r0, r0
    c07c:	4488      	add	r8, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:126
		pthisMagBuffer->index[j][k] = loopcounter;

		// set l and m to the oldest active entry and disable it
		i = loopcounter;
		l = m = 0; // to avoid compiler complaint
		for (j = 0; j < MAGBUFFSIZEX; j++)
    c07e:	280c      	cmp	r0, #12
    c080:	d1ea      	bne.n	c058 <iUpdateMagnetometerBuffer+0x290>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:147
				} // end of test for older
			} // end of loop over k
		} // end of loop over j

		// deactivate the oldest measurement (no need to zero the measurement data)
		pthisMagBuffer->index[l][m] = -1;
    c082:	b27f      	sxtb	r7, r7
    c084:	007b      	lsls	r3, r7, #1
    c086:	19db      	adds	r3, r3, r7
    c088:	b276      	sxtb	r6, r6
    c08a:	00db      	lsls	r3, r3, #3
    c08c:	199b      	adds	r3, r3, r6
    c08e:	33b1      	adds	r3, #177	; 0xb1
    c090:	33ff      	adds	r3, #255	; 0xff
    c092:	2201      	movs	r2, #1
    c094:	4664      	mov	r4, ip
    c096:	009b      	lsls	r3, r3, #2
    c098:	4252      	negs	r2, r2
    c09a:	511a      	str	r2, [r3, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:148
		return;
    c09c:	e786      	b.n	bfac <iUpdateMagnetometerBuffer+0x1e4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:205
					{
						// calculate the vector difference between current measurement and the buffer entry
						idelta = 0;
						for (i = X; i <= Z; i++)
						{
							idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
    c09e:	2090      	movs	r0, #144	; 0x90
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:175
		for (i = X; i <= Z; i++)
		{
			idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
		}
		// check to see if the current reading is close to this existing magnetic buffer entry
		if (idelta < MESHDELTACOUNTS)
    c0a0:	2600      	movs	r6, #0
    c0a2:	2700      	movs	r7, #0
    c0a4:	2300      	movs	r3, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:205
					{
						// calculate the vector difference between current measurement and the buffer entry
						idelta = 0;
						for (i = X; i <= Z; i++)
						{
							idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
    c0a6:	00c0      	lsls	r0, r0, #3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:175
		for (i = X; i <= Z; i++)
		{
			idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
		}
		// check to see if the current reading is close to this existing magnetic buffer entry
		if (idelta < MESHDELTACOUNTS)
    c0a8:	9602      	str	r6, [sp, #8]
    c0aa:	9701      	str	r7, [sp, #4]
    c0ac:	469b      	mov	fp, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:205
					{
						// calculate the vector difference between current measurement and the buffer entry
						idelta = 0;
						for (i = X; i <= Z; i++)
						{
							idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
    c0ae:	9f07      	ldr	r7, [sp, #28]
    c0b0:	4681      	mov	r9, r0
    c0b2:	4666      	mov	r6, ip
    c0b4:	9507      	str	r5, [sp, #28]
    c0b6:	4658      	mov	r0, fp
    c0b8:	4659      	mov	r1, fp
    c0ba:	0045      	lsls	r5, r0, #1
    c0bc:	b2c9      	uxtb	r1, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:199 (discriminator 1)
				// loop over the buffer k from 0 potentially up to MAGBUFFSIZEY - 1 
				k = 0;
				while (!itooclose && (k < MAGBUFFSIZEY))
				{
					// check whether this buffer entry already has a measurement or not
					if (pthisMagBuffer->index[j][k] != -1)
    c0be:	445d      	add	r5, fp
    c0c0:	468c      	mov	ip, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:125 (discriminator 1)
		}
		pthisMagBuffer->index[j][k] = loopcounter;

		// set l and m to the oldest active entry and disable it
		i = loopcounter;
		l = m = 0; // to avoid compiler complaint
    c0c2:	2300      	movs	r3, #0
    c0c4:	2200      	movs	r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:199 (discriminator 1)
				// loop over the buffer k from 0 potentially up to MAGBUFFSIZEY - 1 
				k = 0;
				while (!itooclose && (k < MAGBUFFSIZEY))
				{
					// check whether this buffer entry already has a measurement or not
					if (pthisMagBuffer->index[j][k] != -1)
    c0c6:	00ed      	lsls	r5, r5, #3
    c0c8:	9600      	str	r6, [sp, #0]
    c0ca:	e032      	b.n	c132 <iUpdateMagnetometerBuffer+0x36a>
    c0cc:	00000b42 	.word	0x00000b42
    c0d0:	00000b44 	.word	0x00000b44
    c0d4:	00000b46 	.word	0x00000b46
    c0d8:	00000b48 	.word	0x00000b48
    c0dc:	00000b4a 	.word	0x00000b4a
    c0e0:	00000b4c 	.word	0x00000b4c
    c0e4:	00000b4e 	.word	0x00000b4e
    c0e8:	00000b52 	.word	0x00000b52
    c0ec:	00000b54 	.word	0x00000b54
    c0f0:	00000b56 	.word	0x00000b56
    c0f4:	0051      	lsls	r1, r2, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:205
					{
						// calculate the vector difference between current measurement and the buffer entry
						idelta = 0;
						for (i = X; i <= Z; i++)
						{
							idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
    c0f6:	5f08      	ldrsh	r0, [r1, r4]
    c0f8:	1862      	adds	r2, r4, r1
    c0fa:	4641      	mov	r1, r8
    c0fc:	1a08      	subs	r0, r1, r0
    c0fe:	17c6      	asrs	r6, r0, #31
    c100:	1980      	adds	r0, r0, r6
    c102:	4070      	eors	r0, r6
    c104:	4656      	mov	r6, sl
    c106:	5f91      	ldrsh	r1, [r2, r6]
    c108:	9e00      	ldr	r6, [sp, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:220
					{
						// store the location of this empty bin for future use
						l = j;
						m = k;
					} // end of test for valid measurement in this bin
					k++;
    c10a:	3301      	adds	r3, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:205
					{
						// calculate the vector difference between current measurement and the buffer entry
						idelta = 0;
						for (i = X; i <= Z; i++)
						{
							idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
    c10c:	1a71      	subs	r1, r6, r1
    c10e:	17ce      	asrs	r6, r1, #31
    c110:	1989      	adds	r1, r1, r6
    c112:	4071      	eors	r1, r6
    c114:	464e      	mov	r6, r9
    c116:	1841      	adds	r1, r0, r1
    c118:	5f90      	ldrsh	r0, [r2, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:220
					{
						// store the location of this empty bin for future use
						l = j;
						m = k;
					} // end of test for valid measurement in this bin
					k++;
    c11a:	b2db      	uxtb	r3, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:205
					{
						// calculate the vector difference between current measurement and the buffer entry
						idelta = 0;
						for (i = X; i <= Z; i++)
						{
							idelta += abs((int32)pthisMag->iBpFast[i] - (int32)pthisMagBuffer->iBpFast[i][j][k]);
    c11c:	1a38      	subs	r0, r7, r0
    c11e:	17c2      	asrs	r2, r0, #31
    c120:	1880      	adds	r0, r0, r2
    c122:	4050      	eors	r0, r2
    c124:	1809      	adds	r1, r1, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:196
			j = 0;
			while (!itooclose && (j < MAGBUFFSIZEX))
			{
				// loop over the buffer k from 0 potentially up to MAGBUFFSIZEY - 1 
				k = 0;
				while (!itooclose && (k < MAGBUFFSIZEY))
    c126:	2931      	cmp	r1, #49	; 0x31
    c128:	dc00      	bgt.n	c12c <iUpdateMagnetometerBuffer+0x364>
    c12a:	e73f      	b.n	bfac <iUpdateMagnetometerBuffer+0x1e4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:196 (discriminator 2)
    c12c:	b25a      	sxtb	r2, r3
    c12e:	2a18      	cmp	r2, #24
    c130:	d00f      	beq.n	c152 <iUpdateMagnetometerBuffer+0x38a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:199
				{
					// check whether this buffer entry already has a measurement or not
					if (pthisMagBuffer->index[j][k] != -1)
    c132:	20d8      	movs	r0, #216	; 0xd8
    c134:	18aa      	adds	r2, r5, r2
    c136:	0040      	lsls	r0, r0, #1
    c138:	1811      	adds	r1, r2, r0
    c13a:	0089      	lsls	r1, r1, #2
    c13c:	5909      	ldr	r1, [r1, r4]
    c13e:	3101      	adds	r1, #1
    c140:	d1d8      	bne.n	c0f4 <iUpdateMagnetometerBuffer+0x32c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:220
					{
						// store the location of this empty bin for future use
						l = j;
						m = k;
					} // end of test for valid measurement in this bin
					k++;
    c142:	1c5a      	adds	r2, r3, #1
    c144:	9302      	str	r3, [sp, #8]
    c146:	b2d3      	uxtb	r3, r2
    c148:	4662      	mov	r2, ip
    c14a:	9201      	str	r2, [sp, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:196
			j = 0;
			while (!itooclose && (j < MAGBUFFSIZEX))
			{
				// loop over the buffer k from 0 potentially up to MAGBUFFSIZEY - 1 
				k = 0;
				while (!itooclose && (k < MAGBUFFSIZEY))
    c14c:	b25a      	sxtb	r2, r3
    c14e:	2a18      	cmp	r2, #24
    c150:	d1ef      	bne.n	c132 <iUpdateMagnetometerBuffer+0x36a>
    c152:	2301      	movs	r3, #1
    c154:	449b      	add	fp, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:192
			itooclose = 0;
			// to avoid compiler warning
			l = m = 0;
			// loop over the buffer j from 0 potentially up to MAGBUFFSIZEX - 1 
			j = 0;
			while (!itooclose && (j < MAGBUFFSIZEX))
    c156:	4658      	mov	r0, fp
    c158:	9e00      	ldr	r6, [sp, #0]
    c15a:	280c      	cmp	r0, #12
    c15c:	d1ab      	bne.n	c0b6 <iUpdateMagnetometerBuffer+0x2ee>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:231
			// l and m are guaranteed to be set if no entries too close are detected
			if (!itooclose)
			{
				for (i = X; i <= Z; i++)
				{
					pthisMagBuffer->iBpFast[i][l][m] = pthisMag->iBpFast[i];
    c15e:	9901      	ldr	r1, [sp, #4]
    c160:	9b02      	ldr	r3, [sp, #8]
    c162:	b24a      	sxtb	r2, r1
    c164:	b259      	sxtb	r1, r3
    c166:	0053      	lsls	r3, r2, #1
    c168:	189b      	adds	r3, r3, r2
    c16a:	00db      	lsls	r3, r3, #3
    c16c:	185b      	adds	r3, r3, r1
    c16e:	9e04      	ldr	r6, [sp, #16]
    c170:	005a      	lsls	r2, r3, #1
    c172:	2190      	movs	r1, #144	; 0x90
    c174:	9f06      	ldr	r7, [sp, #24]
    c176:	5316      	strh	r6, [r2, r4]
    c178:	0089      	lsls	r1, r1, #2
    c17a:	18a2      	adds	r2, r4, r2
    c17c:	5257      	strh	r7, [r2, r1]
    c17e:	9805      	ldr	r0, [sp, #20]
    c180:	2190      	movs	r1, #144	; 0x90
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:233
				}
				pthisMagBuffer->index[l][m] = loopcounter;
    c182:	33b1      	adds	r3, #177	; 0xb1
    c184:	9d07      	ldr	r5, [sp, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:231
			// l and m are guaranteed to be set if no entries too close are detected
			if (!itooclose)
			{
				for (i = X; i <= Z; i++)
				{
					pthisMagBuffer->iBpFast[i][l][m] = pthisMag->iBpFast[i];
    c186:	00c9      	lsls	r1, r1, #3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:233
				}
				pthisMagBuffer->index[l][m] = loopcounter;
    c188:	33ff      	adds	r3, #255	; 0xff
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:231
			// l and m are guaranteed to be set if no entries too close are detected
			if (!itooclose)
			{
				for (i = X; i <= Z; i++)
				{
					pthisMagBuffer->iBpFast[i][l][m] = pthisMag->iBpFast[i];
    c18a:	5250      	strh	r0, [r2, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:233
				}
				pthisMagBuffer->index[l][m] = loopcounter;
    c18c:	009b      	lsls	r3, r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:234
				(pthisMagBuffer->iMagBufferCount)++;
    c18e:	9a03      	ldr	r2, [sp, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:233
			{
				for (i = X; i <= Z; i++)
				{
					pthisMagBuffer->iBpFast[i][l][m] = pthisMag->iBpFast[i];
				}
				pthisMagBuffer->index[l][m] = loopcounter;
    c190:	511d      	str	r5, [r3, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:234
				(pthisMagBuffer->iMagBufferCount)++;
    c192:	4b17      	ldr	r3, [pc, #92]	; (c1f0 <iUpdateMagnetometerBuffer+0x428>)
    c194:	3201      	adds	r2, #1
    c196:	52e2      	strh	r2, [r4, r3]
    c198:	e708      	b.n	bfac <iUpdateMagnetometerBuffer+0x1e4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:95
	itank = (100 * (int32)pthisAccel->iGp[Z]) / ((int32)pthisAccel->iGp[X]);
	// map tangent ratios to bins j and k using equal angle bins: C guarantees left to right execution of the test
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
    c19a:	2204      	movs	r2, #4
    c19c:	e673      	b.n	be86 <iUpdateMagnetometerBuffer+0xbe>
    c19e:	2200      	movs	r2, #0
    c1a0:	e671      	b.n	be86 <iUpdateMagnetometerBuffer+0xbe>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:96
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
    c1a2:	2101      	movs	r1, #1
    c1a4:	e6a8      	b.n	bef8 <iUpdateMagnetometerBuffer+0x130>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:95
	itank = (100 * (int32)pthisAccel->iGp[Z]) / ((int32)pthisAccel->iGp[X]);
	// map tangent ratios to bins j and k using equal angle bins: C guarantees left to right execution of the test
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
    c1a6:	2201      	movs	r2, #1
    c1a8:	e66d      	b.n	be86 <iUpdateMagnetometerBuffer+0xbe>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:96
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
    c1aa:	2100      	movs	r1, #0
    c1ac:	e6a4      	b.n	bef8 <iUpdateMagnetometerBuffer+0x130>
    c1ae:	2102      	movs	r1, #2
    c1b0:	e6a2      	b.n	bef8 <iUpdateMagnetometerBuffer+0x130>
    c1b2:	2103      	movs	r1, #3
    c1b4:	e6a0      	b.n	bef8 <iUpdateMagnetometerBuffer+0x130>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:95
	itank = (100 * (int32)pthisAccel->iGp[Z]) / ((int32)pthisAccel->iGp[X]);
	// map tangent ratios to bins j and k using equal angle bins: C guarantees left to right execution of the test
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
    c1b6:	2203      	movs	r2, #3
    c1b8:	e665      	b.n	be86 <iUpdateMagnetometerBuffer+0xbe>
    c1ba:	2202      	movs	r2, #2
    c1bc:	e663      	b.n	be86 <iUpdateMagnetometerBuffer+0xbe>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:96
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
    c1be:	2104      	movs	r1, #4
    c1c0:	e69a      	b.n	bef8 <iUpdateMagnetometerBuffer+0x130>
    c1c2:	2105      	movs	r1, #5
    c1c4:	e698      	b.n	bef8 <iUpdateMagnetometerBuffer+0x130>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:95
	itank = (100 * (int32)pthisAccel->iGp[Z]) / ((int32)pthisAccel->iGp[X]);
	// map tangent ratios to bins j and k using equal angle bins: C guarantees left to right execution of the test
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
    c1c6:	2205      	movs	r2, #5
    c1c8:	e65d      	b.n	be86 <iUpdateMagnetometerBuffer+0xbe>
    c1ca:	2208      	movs	r2, #8
    c1cc:	e65b      	b.n	be86 <iUpdateMagnetometerBuffer+0xbe>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:96
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
    c1ce:	2107      	movs	r1, #7
    c1d0:	e692      	b.n	bef8 <iUpdateMagnetometerBuffer+0x130>
    c1d2:	2108      	movs	r1, #8
    c1d4:	e690      	b.n	bef8 <iUpdateMagnetometerBuffer+0x130>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:95
	itank = (100 * (int32)pthisAccel->iGp[Z]) / ((int32)pthisAccel->iGp[X]);
	// map tangent ratios to bins j and k using equal angle bins: C guarantees left to right execution of the test
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
    c1d6:	2206      	movs	r2, #6
    c1d8:	e655      	b.n	be86 <iUpdateMagnetometerBuffer+0xbe>
    c1da:	2207      	movs	r2, #7
    c1dc:	e653      	b.n	be86 <iUpdateMagnetometerBuffer+0xbe>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:96
	while ((k < (MAGBUFFSIZEX - 1) && (itank >= pthisMagBuffer->tanarray[k]))) k++;
    c1de:	2106      	movs	r1, #6
    c1e0:	e68a      	b.n	bef8 <iUpdateMagnetometerBuffer+0x130>
    c1e2:	2109      	movs	r1, #9
    c1e4:	e688      	b.n	bef8 <iUpdateMagnetometerBuffer+0x130>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:95
	itank = (100 * (int32)pthisAccel->iGp[Z]) / ((int32)pthisAccel->iGp[X]);
	// map tangent ratios to bins j and k using equal angle bins: C guarantees left to right execution of the test
	// and add an offset of MAGBUFFSIZEX bins to k to mimic atan2 on this ratio
	// j will vary from 0 to MAGBUFFSIZEX - 1 and k from 0 to 2 * MAGBUFFSIZEX - 1
	j = k = 0;
	while ((j < (MAGBUFFSIZEX - 1) && (itanj >= pthisMagBuffer->tanarray[j]))) j++;
    c1e6:	220a      	movs	r2, #10
    c1e8:	e64d      	b.n	be86 <iUpdateMagnetometerBuffer+0xbe>
    c1ea:	2209      	movs	r2, #9
    c1ec:	e64b      	b.n	be86 <iUpdateMagnetometerBuffer+0xbe>
    c1ee:	46c0      	nop			; (mov r8, r8)
    c1f0:	00000b56 	.word	0x00000b56

0000c1f4 <fInvertMagCal>:
fInvertMagCal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:246
	return;
}

// function maps the uncalibrated magnetometer data Bp (uT) onto calibrated data Bc (uT)
void fInvertMagCal(struct MagSensor *pthisMag, struct MagCalibration *pthisMagCal)
{
    c1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c1f6:	4657      	mov	r7, sl
    c1f8:	464e      	mov	r6, r9
    c1fa:	4645      	mov	r5, r8
    c1fc:	b4e0      	push	{r5, r6, r7}
    c1fe:	1c0c      	adds	r4, r1, #0
    c200:	b084      	sub	sp, #16
    c202:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:255

	// calculate fBc and iBc for the 6DOF eCompass algorithms
	// remove the computed hard iron offsets (uT): ftmp[]=fBp[]-V[]
	for (i = X; i <= Z; i++)
	{
		ftmp[i] = pthisMag->fBp[i] - pthisMagCal->fV[i];
    c204:	6809      	ldr	r1, [r1, #0]
    c206:	6980      	ldr	r0, [r0, #24]
    c208:	f7f4 feee 	bl	fe8 <__aeabi_fsub>
    c20c:	6861      	ldr	r1, [r4, #4]
    c20e:	4681      	mov	r9, r0
    c210:	69e8      	ldr	r0, [r5, #28]
    c212:	f7f4 fee9 	bl	fe8 <__aeabi_fsub>
    c216:	68a1      	ldr	r1, [r4, #8]
    c218:	4680      	mov	r8, r0
    c21a:	6a28      	ldr	r0, [r5, #32]
    c21c:	f7f4 fee4 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:260
	}
	// remove the computed soft iron offsets (uT and counts): fBc=inv(W)*(fBp[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBc[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
    c220:	68e1      	ldr	r1, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:255

	// calculate fBc and iBc for the 6DOF eCompass algorithms
	// remove the computed hard iron offsets (uT): ftmp[]=fBp[]-V[]
	for (i = X; i <= Z; i++)
	{
		ftmp[i] = pthisMag->fBp[i] - pthisMagCal->fV[i];
    c222:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:260
	}
	// remove the computed soft iron offsets (uT and counts): fBc=inv(W)*(fBp[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBc[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
    c224:	4648      	mov	r0, r9
    c226:	f7f4 fdb5 	bl	d94 <__aeabi_fmul>
    c22a:	6921      	ldr	r1, [r4, #16]
    c22c:	4682      	mov	sl, r0
    c22e:	4640      	mov	r0, r8
    c230:	f7f4 fdb0 	bl	d94 <__aeabi_fmul>
    c234:	1c01      	adds	r1, r0, #0
    c236:	4650      	mov	r0, sl
    c238:	f7f4 fa5c 	bl	6f4 <__aeabi_fadd>
    c23c:	6961      	ldr	r1, [r4, #20]
    c23e:	4682      	mov	sl, r0
    c240:	1c38      	adds	r0, r7, #0
    c242:	f7f4 fda7 	bl	d94 <__aeabi_fmul>
    c246:	1c01      	adds	r1, r0, #0
    c248:	4650      	mov	r0, sl
    c24a:	f7f4 fa53 	bl	6f4 <__aeabi_fadd>
    c24e:	6c2e      	ldr	r6, [r5, #64]	; 0x40
    c250:	6328      	str	r0, [r5, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:261
		pthisMag->iBc[i] = (int16) (pthisMag->fBc[i] * pthisMag->fCountsPeruT);
    c252:	1c31      	adds	r1, r6, #0
    c254:	f7f4 fd9e 	bl	d94 <__aeabi_fmul>
    c258:	f7f5 f83c 	bl	12d4 <__aeabi_f2iz>
    c25c:	2350      	movs	r3, #80	; 0x50
    c25e:	52e8      	strh	r0, [r5, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:260
		ftmp[i] = pthisMag->fBp[i] - pthisMagCal->fV[i];
	}
	// remove the computed soft iron offsets (uT and counts): fBc=inv(W)*(fBp[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBc[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
    c260:	69a1      	ldr	r1, [r4, #24]
    c262:	4648      	mov	r0, r9
    c264:	f7f4 fd96 	bl	d94 <__aeabi_fmul>
    c268:	69e1      	ldr	r1, [r4, #28]
    c26a:	4682      	mov	sl, r0
    c26c:	4640      	mov	r0, r8
    c26e:	f7f4 fd91 	bl	d94 <__aeabi_fmul>
    c272:	1c01      	adds	r1, r0, #0
    c274:	4650      	mov	r0, sl
    c276:	f7f4 fa3d 	bl	6f4 <__aeabi_fadd>
    c27a:	6a21      	ldr	r1, [r4, #32]
    c27c:	4682      	mov	sl, r0
    c27e:	1c38      	adds	r0, r7, #0
    c280:	f7f4 fd88 	bl	d94 <__aeabi_fmul>
    c284:	1c01      	adds	r1, r0, #0
    c286:	4650      	mov	r0, sl
    c288:	f7f4 fa34 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:261
		pthisMag->iBc[i] = (int16) (pthisMag->fBc[i] * pthisMag->fCountsPeruT);
    c28c:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:260
		ftmp[i] = pthisMag->fBp[i] - pthisMagCal->fV[i];
	}
	// remove the computed soft iron offsets (uT and counts): fBc=inv(W)*(fBp[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBc[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
    c28e:	6368      	str	r0, [r5, #52]	; 0x34
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:261
		pthisMag->iBc[i] = (int16) (pthisMag->fBc[i] * pthisMag->fCountsPeruT);
    c290:	f7f4 fd80 	bl	d94 <__aeabi_fmul>
    c294:	f7f5 f81e 	bl	12d4 <__aeabi_f2iz>
    c298:	2352      	movs	r3, #82	; 0x52
    c29a:	52e8      	strh	r0, [r5, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:260
		ftmp[i] = pthisMag->fBp[i] - pthisMagCal->fV[i];
	}
	// remove the computed soft iron offsets (uT and counts): fBc=inv(W)*(fBp[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBc[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
    c29c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    c29e:	4648      	mov	r0, r9
    c2a0:	f7f4 fd78 	bl	d94 <__aeabi_fmul>
    c2a4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    c2a6:	4681      	mov	r9, r0
    c2a8:	4640      	mov	r0, r8
    c2aa:	f7f4 fd73 	bl	d94 <__aeabi_fmul>
    c2ae:	1c01      	adds	r1, r0, #0
    c2b0:	4648      	mov	r0, r9
    c2b2:	f7f4 fa1f 	bl	6f4 <__aeabi_fadd>
    c2b6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    c2b8:	4680      	mov	r8, r0
    c2ba:	1c38      	adds	r0, r7, #0
    c2bc:	f7f4 fd6a 	bl	d94 <__aeabi_fmul>
    c2c0:	1c01      	adds	r1, r0, #0
    c2c2:	4640      	mov	r0, r8
    c2c4:	f7f4 fa16 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:261
		pthisMag->iBc[i] = (int16) (pthisMag->fBc[i] * pthisMag->fCountsPeruT);
    c2c8:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:260
		ftmp[i] = pthisMag->fBp[i] - pthisMagCal->fV[i];
	}
	// remove the computed soft iron offsets (uT and counts): fBc=inv(W)*(fBp[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBc[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
    c2ca:	63a8      	str	r0, [r5, #56]	; 0x38
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:261
		pthisMag->iBc[i] = (int16) (pthisMag->fBc[i] * pthisMag->fCountsPeruT);
    c2cc:	f7f4 fd62 	bl	d94 <__aeabi_fmul>
    c2d0:	f7f5 f800 	bl	12d4 <__aeabi_f2iz>
    c2d4:	2354      	movs	r3, #84	; 0x54
    c2d6:	52e8      	strh	r0, [r5, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:268
	
	// calculate fBcFast for the Kalman filter algorithms
	// remove the computed hard iron offsets (uT): ftmp[]=fBpFast[]-V[]
	for (i = X; i <= Z; i++)
	{
		ftmp[i] = pthisMag->fBpFast[i] - pthisMagCal->fV[i];
    c2d8:	6821      	ldr	r1, [r4, #0]
    c2da:	68e8      	ldr	r0, [r5, #12]
    c2dc:	f7f4 fe84 	bl	fe8 <__aeabi_fsub>
    c2e0:	6861      	ldr	r1, [r4, #4]
    c2e2:	4680      	mov	r8, r0
    c2e4:	6928      	ldr	r0, [r5, #16]
    c2e6:	f7f4 fe7f 	bl	fe8 <__aeabi_fsub>
    c2ea:	68a1      	ldr	r1, [r4, #8]
    c2ec:	1c07      	adds	r7, r0, #0
    c2ee:	6968      	ldr	r0, [r5, #20]
    c2f0:	f7f4 fe7a 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:273
	}
	// remove the computed soft iron offsets (uT and counts): fBcFast=inv(W)*(fBpFast[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBcFast[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
    c2f4:	68e1      	ldr	r1, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:268
	
	// calculate fBcFast for the Kalman filter algorithms
	// remove the computed hard iron offsets (uT): ftmp[]=fBpFast[]-V[]
	for (i = X; i <= Z; i++)
	{
		ftmp[i] = pthisMag->fBpFast[i] - pthisMagCal->fV[i];
    c2f6:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:273
	}
	// remove the computed soft iron offsets (uT and counts): fBcFast=inv(W)*(fBpFast[]-V[])
	for (i = X; i <= Z; i++)
	{
		pthisMag->fBcFast[i] = pthisMagCal->finvW[i][X] * ftmp[X] + pthisMagCal->finvW[i][Y] * ftmp[Y] + pthisMagCal->finvW[i][Z] * ftmp[Z];
    c2f8:	4640      	mov	r0, r8
    c2fa:	f7f4 fd4b 	bl	d94 <__aeabi_fmul>
    c2fe:	6921      	ldr	r1, [r4, #16]
    c300:	4681      	mov	r9, r0
    c302:	1c38      	adds	r0, r7, #0
    c304:	f7f4 fd46 	bl	d94 <__aeabi_fmul>
    c308:	1c01      	adds	r1, r0, #0
    c30a:	4648      	mov	r0, r9
    c30c:	f7f4 f9f2 	bl	6f4 <__aeabi_fadd>
    c310:	6961      	ldr	r1, [r4, #20]
    c312:	4681      	mov	r9, r0
    c314:	1c30      	adds	r0, r6, #0
    c316:	f7f4 fd3d 	bl	d94 <__aeabi_fmul>
    c31a:	1c01      	adds	r1, r0, #0
    c31c:	4648      	mov	r0, r9
    c31e:	f7f4 f9e9 	bl	6f4 <__aeabi_fadd>
    c322:	69a1      	ldr	r1, [r4, #24]
    c324:	6268      	str	r0, [r5, #36]	; 0x24
    c326:	4640      	mov	r0, r8
    c328:	f7f4 fd34 	bl	d94 <__aeabi_fmul>
    c32c:	69e1      	ldr	r1, [r4, #28]
    c32e:	4681      	mov	r9, r0
    c330:	1c38      	adds	r0, r7, #0
    c332:	f7f4 fd2f 	bl	d94 <__aeabi_fmul>
    c336:	1c01      	adds	r1, r0, #0
    c338:	4648      	mov	r0, r9
    c33a:	f7f4 f9db 	bl	6f4 <__aeabi_fadd>
    c33e:	6a21      	ldr	r1, [r4, #32]
    c340:	4681      	mov	r9, r0
    c342:	1c30      	adds	r0, r6, #0
    c344:	f7f4 fd26 	bl	d94 <__aeabi_fmul>
    c348:	1c01      	adds	r1, r0, #0
    c34a:	4648      	mov	r0, r9
    c34c:	f7f4 f9d2 	bl	6f4 <__aeabi_fadd>
    c350:	6a61      	ldr	r1, [r4, #36]	; 0x24
    c352:	62a8      	str	r0, [r5, #40]	; 0x28
    c354:	4640      	mov	r0, r8
    c356:	f7f4 fd1d 	bl	d94 <__aeabi_fmul>
    c35a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    c35c:	4680      	mov	r8, r0
    c35e:	1c38      	adds	r0, r7, #0
    c360:	f7f4 fd18 	bl	d94 <__aeabi_fmul>
    c364:	1c01      	adds	r1, r0, #0
    c366:	4640      	mov	r0, r8
    c368:	f7f4 f9c4 	bl	6f4 <__aeabi_fadd>
    c36c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    c36e:	1c07      	adds	r7, r0, #0
    c370:	1c30      	adds	r0, r6, #0
    c372:	f7f4 fd0f 	bl	d94 <__aeabi_fmul>
    c376:	1c01      	adds	r1, r0, #0
    c378:	1c38      	adds	r0, r7, #0
    c37a:	f7f4 f9bb 	bl	6f4 <__aeabi_fadd>
    c37e:	62e8      	str	r0, [r5, #44]	; 0x2c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:277
	}

	return;
}
    c380:	b004      	add	sp, #16
    c382:	bc1c      	pop	{r2, r3, r4}
    c384:	4690      	mov	r8, r2
    c386:	4699      	mov	r9, r3
    c388:	46a2      	mov	sl, r4
    c38a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c38c <fUpdateCalibration4INV>:
fUpdateCalibration4INV():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:281

// 4 element calibration using 4x4 matrix inverse
void fUpdateCalibration4INV(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer, struct MagSensor *pthisMag)
{
    c38c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c38e:	4656      	mov	r6, sl
    c390:	464d      	mov	r5, r9
    c392:	4644      	mov	r4, r8
    c394:	465f      	mov	r7, fp
    c396:	b4f0      	push	{r4, r5, r6, r7}
    c398:	b09b      	sub	sp, #108	; 0x6c
    c39a:	1c04      	adds	r4, r0, #0
    c39c:	910e      	str	r1, [sp, #56]	; 0x38
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:298
	int8 iColInd[4];
	int8 iRowInd[4];
	int8 iPivot[4];

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;
    c39e:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    c3a0:	49a0      	ldr	r1, [pc, #640]	; (c624 <fUpdateCalibration4INV+0x298>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:281
	return;
}

// 4 element calibration using 4x4 matrix inverse
void fUpdateCalibration4INV(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer, struct MagSensor *pthisMag)
{
    c3a2:	920f      	str	r2, [sp, #60]	; 0x3c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:298
	int8 iColInd[4];
	int8 iRowInd[4];
	int8 iPivot[4];

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;
    c3a4:	f7f4 fb12 	bl	9cc <__aeabi_fdiv>
    c3a8:	9006      	str	r0, [sp, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:301

	// the trial inverse soft iron matrix invW always equals the identity matrix for 4 element calibration
	f3x3matrixAeqI(pthisMagCal->ftrinvW);
    c3aa:	1c20      	adds	r0, r4, #0
    c3ac:	3048      	adds	r0, #72	; 0x48
    c3ae:	f001 fbe1 	bl	db74 <f3x3matrixAeqI>
    c3b2:	499d      	ldr	r1, [pc, #628]	; (c628 <fUpdateCalibration4INV+0x29c>)
    c3b4:	2600      	movs	r6, #0
    c3b6:	1865      	adds	r5, r4, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:307

	// zero fSumBp4=Y^T.Y, fvecB=X^T.Y (4x1) and on and above diagonal elements of fmatA=X^T*X (4x4)
	fSumBp4 = 0.0F;
	for (i = 0; i < 4; i++)
	{
		pthisMagCal->fvecB[i] = 0.0F;
    c3b8:	2100      	movs	r1, #0
    c3ba:	00b0      	lsls	r0, r6, #2
    c3bc:	b2f3      	uxtb	r3, r6
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:310
		for (j = i; j < 4; j++)
		{
			pthisMagCal->fmatA[i][j] = 0.0F;
    c3be:	1980      	adds	r0, r0, r6
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:307

	// zero fSumBp4=Y^T.Y, fvecB=X^T.Y (4x1) and on and above diagonal elements of fmatA=X^T*X (4x4)
	fSumBp4 = 0.0F;
	for (i = 0; i < 4; i++)
	{
		pthisMagCal->fvecB[i] = 0.0F;
    c3c0:	6029      	str	r1, [r5, #0]
    c3c2:	b25a      	sxtb	r2, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:310
		for (j = i; j < 4; j++)
		{
			pthisMagCal->fmatA[i][j] = 0.0F;
    c3c4:	0040      	lsls	r0, r0, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:310 (discriminator 2)
    c3c6:	1882      	adds	r2, r0, r2
    c3c8:	322e      	adds	r2, #46	; 0x2e
    c3ca:	0092      	lsls	r2, r2, #2
    c3cc:	3301      	adds	r3, #1
    c3ce:	18a2      	adds	r2, r4, r2
    c3d0:	b2db      	uxtb	r3, r3
    c3d2:	6051      	str	r1, [r2, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:308 (discriminator 2)
	// zero fSumBp4=Y^T.Y, fvecB=X^T.Y (4x1) and on and above diagonal elements of fmatA=X^T*X (4x4)
	fSumBp4 = 0.0F;
	for (i = 0; i < 4; i++)
	{
		pthisMagCal->fvecB[i] = 0.0F;
		for (j = i; j < 4; j++)
    c3d4:	b25a      	sxtb	r2, r3
    c3d6:	2a03      	cmp	r2, #3
    c3d8:	ddf5      	ble.n	c3c6 <fUpdateCalibration4INV+0x3a>
    c3da:	3601      	adds	r6, #1
    c3dc:	3504      	adds	r5, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:305
	// the trial inverse soft iron matrix invW always equals the identity matrix for 4 element calibration
	f3x3matrixAeqI(pthisMagCal->ftrinvW);

	// zero fSumBp4=Y^T.Y, fvecB=X^T.Y (4x1) and on and above diagonal elements of fmatA=X^T*X (4x4)
	fSumBp4 = 0.0F;
	for (i = 0; i < 4; i++)
    c3de:	2e04      	cmp	r6, #4
    c3e0:	d1eb      	bne.n	c3ba <fUpdateCalibration4INV+0x2e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:315
			pthisMagCal->fmatA[i][j] = 0.0F;
		}
	}

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
    c3e2:	2652      	movs	r6, #82	; 0x52
    c3e4:	2300      	movs	r3, #0
    c3e6:	446e      	add	r6, sp
    c3e8:	aa15      	add	r2, sp, #84	; 0x54
    c3ea:	8033      	strh	r3, [r6, #0]
    c3ec:	2600      	movs	r6, #0
    c3ee:	8013      	strh	r3, [r2, #0]
    c3f0:	960b      	str	r6, [sp, #44]	; 0x2c
    c3f2:	960a      	str	r6, [sp, #40]	; 0x28
    c3f4:	21e4      	movs	r1, #228	; 0xe4
    c3f6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    c3f8:	22ba      	movs	r2, #186	; 0xba
    c3fa:	00c9      	lsls	r1, r1, #3
    c3fc:	0112      	lsls	r2, r2, #4
    c3fe:	1871      	adds	r1, r6, r1
    c400:	18b2      	adds	r2, r6, r2
    c402:	960c      	str	r6, [sp, #48]	; 0x30
    c404:	2600      	movs	r6, #0
    c406:	9609      	str	r6, [sp, #36]	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:318

	// use from MINEQUATIONS up to MAXEQUATIONS entries from magnetic buffer to compute matrices
	iCount = 0;
    c408:	9605      	str	r6, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:304

	// the trial inverse soft iron matrix invW always equals the identity matrix for 4 element calibration
	f3x3matrixAeqI(pthisMagCal->ftrinvW);

	// zero fSumBp4=Y^T.Y, fvecB=X^T.Y (4x1) and on and above diagonal elements of fmatA=X^T*X (4x4)
	fSumBp4 = 0.0F;
    c40a:	2600      	movs	r6, #0
    c40c:	9108      	str	r1, [sp, #32]
    c40e:	920d      	str	r2, [sp, #52]	; 0x34
    c410:	9607      	str	r6, [sp, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:301 (discriminator 1)

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;

	// the trial inverse soft iron matrix invW always equals the identity matrix for 4 element calibration
	f3x3matrixAeqI(pthisMagCal->ftrinvW);
    c412:	9b08      	ldr	r3, [sp, #32]
    c414:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c416:	4698      	mov	r8, r3
    c418:	2360      	movs	r3, #96	; 0x60
    c41a:	425b      	negs	r3, r3
    c41c:	4498      	add	r8, r3
    c41e:	4692      	mov	sl, r2
    c420:	46c1      	mov	r9, r8
    c422:	e0e4      	b.n	c5ee <fUpdateCalibration4INV+0x262>
    c424:	4651      	mov	r1, sl
    c426:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c428:	2000      	movs	r0, #0
    c42a:	5e08      	ldrsh	r0, [r1, r0]
    c42c:	b233      	sxth	r3, r6
    c42e:	1ac0      	subs	r0, r0, r3
    c430:	f7f4 ff70 	bl	1314 <__aeabi_i2f>
    c434:	2190      	movs	r1, #144	; 0x90
    c436:	0089      	lsls	r1, r1, #2
    c438:	1c0b      	adds	r3, r1, #0
    c43a:	4453      	add	r3, sl
    c43c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    c43e:	1c07      	adds	r7, r0, #0
    c440:	2200      	movs	r2, #0
    c442:	5e98      	ldrsh	r0, [r3, r2]
    c444:	b233      	sxth	r3, r6
    c446:	1ac0      	subs	r0, r0, r3
    c448:	f7f4 ff64 	bl	1314 <__aeabi_i2f>
    c44c:	2190      	movs	r1, #144	; 0x90
    c44e:	00c9      	lsls	r1, r1, #3
    c450:	1c0b      	adds	r3, r1, #0
    c452:	4453      	add	r3, sl
    c454:	990a      	ldr	r1, [sp, #40]	; 0x28
    c456:	1c06      	adds	r6, r0, #0
    c458:	2200      	movs	r2, #0
    c45a:	5e98      	ldrsh	r0, [r3, r2]
    c45c:	b20b      	sxth	r3, r1
    c45e:	1ac0      	subs	r0, r0, r3
    c460:	f7f4 ff58 	bl	1314 <__aeabi_i2f>
    c464:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:337 (discriminator 1)
				}

				// store scaled and offset fBp[XYZ] in fvecA[0-2] and fBp[XYZ]^2 in fvecA[3-5]
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    c466:	1c39      	adds	r1, r7, #0
    c468:	9806      	ldr	r0, [sp, #24]
    c46a:	f7f4 fc93 	bl	d94 <__aeabi_fmul>
    c46e:	22f7      	movs	r2, #247	; 0xf7
    c470:	1c07      	adds	r7, r0, #0
    c472:	0092      	lsls	r2, r2, #2
    c474:	50a0      	str	r0, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:338 (discriminator 1)
					pthisMagCal->fvecA[l + 3] = pthisMagCal->fvecA[l] * pthisMagCal->fvecA[l];
    c476:	1c39      	adds	r1, r7, #0
    c478:	f7f4 fc8c 	bl	d94 <__aeabi_fmul>
    c47c:	23fa      	movs	r3, #250	; 0xfa
    c47e:	009b      	lsls	r3, r3, #2
    c480:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:337 (discriminator 1)
				}

				// store scaled and offset fBp[XYZ] in fvecA[0-2] and fBp[XYZ]^2 in fvecA[3-5]
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    c482:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:338 (discriminator 1)
					pthisMagCal->fvecA[l + 3] = pthisMagCal->fvecA[l] * pthisMagCal->fvecA[l];
    c484:	9002      	str	r0, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:337 (discriminator 1)
				}

				// store scaled and offset fBp[XYZ] in fvecA[0-2] and fBp[XYZ]^2 in fvecA[3-5]
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    c486:	9806      	ldr	r0, [sp, #24]
    c488:	f7f4 fc84 	bl	d94 <__aeabi_fmul>
    c48c:	21f8      	movs	r1, #248	; 0xf8
    c48e:	1c06      	adds	r6, r0, #0
    c490:	0089      	lsls	r1, r1, #2
    c492:	5060      	str	r0, [r4, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:338 (discriminator 1)
					pthisMagCal->fvecA[l + 3] = pthisMagCal->fvecA[l] * pthisMagCal->fvecA[l];
    c494:	1c31      	adds	r1, r6, #0
    c496:	f7f4 fc7d 	bl	d94 <__aeabi_fmul>
    c49a:	22fb      	movs	r2, #251	; 0xfb
    c49c:	0092      	lsls	r2, r2, #2
    c49e:	50a0      	str	r0, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:337 (discriminator 1)
				}

				// store scaled and offset fBp[XYZ] in fvecA[0-2] and fBp[XYZ]^2 in fvecA[3-5]
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    c4a0:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:338 (discriminator 1)
					pthisMagCal->fvecA[l + 3] = pthisMagCal->fvecA[l] * pthisMagCal->fvecA[l];
    c4a2:	9003      	str	r0, [sp, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:337 (discriminator 1)
				}

				// store scaled and offset fBp[XYZ] in fvecA[0-2] and fBp[XYZ]^2 in fvecA[3-5]
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    c4a4:	9806      	ldr	r0, [sp, #24]
    c4a6:	f7f4 fc75 	bl	d94 <__aeabi_fmul>
    c4aa:	23f9      	movs	r3, #249	; 0xf9
    c4ac:	009b      	lsls	r3, r3, #2
    c4ae:	1c05      	adds	r5, r0, #0
    c4b0:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:338 (discriminator 1)
					pthisMagCal->fvecA[l + 3] = pthisMagCal->fvecA[l] * pthisMagCal->fvecA[l];
    c4b2:	1c29      	adds	r1, r5, #0
    c4b4:	f7f4 fc6e 	bl	d94 <__aeabi_fmul>
    c4b8:	21fc      	movs	r1, #252	; 0xfc
    c4ba:	0089      	lsls	r1, r1, #2
    c4bc:	5060      	str	r0, [r4, r1]
    c4be:	9004      	str	r0, [sp, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:342 (discriminator 1)
				}

				// calculate fBp2 = fBp[X]^2 + fBp[Y]^2 + fBp[Z]^2 (scaled uT^2) 
				fBp2 = pthisMagCal->fvecA[3] + pthisMagCal->fvecA[4] + pthisMagCal->fvecA[5];
    c4c0:	9903      	ldr	r1, [sp, #12]
    c4c2:	9802      	ldr	r0, [sp, #8]
    c4c4:	f7f4 f916 	bl	6f4 <__aeabi_fadd>
    c4c8:	9904      	ldr	r1, [sp, #16]
    c4ca:	f7f4 f913 	bl	6f4 <__aeabi_fadd>
    c4ce:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:345 (discriminator 1)

				// accumulate fBp^4 over all measurements into fSumBp4=Y^T.Y
				fSumBp4 += fBp2 * fBp2;
    c4d0:	4641      	mov	r1, r8
    c4d2:	f7f4 fc5f 	bl	d94 <__aeabi_fmul>
    c4d6:	1c01      	adds	r1, r0, #0
    c4d8:	9807      	ldr	r0, [sp, #28]
    c4da:	f7f4 f90b 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:350 (discriminator 1)

				// now we have fBp2, accumulate fvecB[0-2] = X^T.Y =sum(fBp2.fBp[XYZ])
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecB[l] += pthisMagCal->fvecA[l] * fBp2;
    c4de:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:345 (discriminator 1)

				// calculate fBp2 = fBp[X]^2 + fBp[Y]^2 + fBp[Z]^2 (scaled uT^2) 
				fBp2 = pthisMagCal->fvecA[3] + pthisMagCal->fvecA[4] + pthisMagCal->fvecA[5];

				// accumulate fBp^4 over all measurements into fSumBp4=Y^T.Y
				fSumBp4 += fBp2 * fBp2;
    c4e0:	9007      	str	r0, [sp, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:350 (discriminator 1)

				// now we have fBp2, accumulate fvecB[0-2] = X^T.Y =sum(fBp2.fBp[XYZ])
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecB[l] += pthisMagCal->fvecA[l] * fBp2;
    c4e2:	4640      	mov	r0, r8
    c4e4:	f7f4 fc56 	bl	d94 <__aeabi_fmul>
    c4e8:	4a4f      	ldr	r2, [pc, #316]	; (c628 <fUpdateCalibration4INV+0x29c>)
    c4ea:	1c01      	adds	r1, r0, #0
    c4ec:	58a0      	ldr	r0, [r4, r2]
    c4ee:	f7f4 f901 	bl	6f4 <__aeabi_fadd>
    c4f2:	4b4d      	ldr	r3, [pc, #308]	; (c628 <fUpdateCalibration4INV+0x29c>)
    c4f4:	1c31      	adds	r1, r6, #0
    c4f6:	50e0      	str	r0, [r4, r3]
    c4f8:	4640      	mov	r0, r8
    c4fa:	f7f4 fc4b 	bl	d94 <__aeabi_fmul>
    c4fe:	2281      	movs	r2, #129	; 0x81
    c500:	00d2      	lsls	r2, r2, #3
    c502:	1c01      	adds	r1, r0, #0
    c504:	58a0      	ldr	r0, [r4, r2]
    c506:	f7f4 f8f5 	bl	6f4 <__aeabi_fadd>
    c50a:	4948      	ldr	r1, [pc, #288]	; (c62c <fUpdateCalibration4INV+0x2a0>)
    c50c:	2381      	movs	r3, #129	; 0x81
    c50e:	00db      	lsls	r3, r3, #3
    c510:	50e0      	str	r0, [r4, r3]
    c512:	468b      	mov	fp, r1
    c514:	4640      	mov	r0, r8
    c516:	1c29      	adds	r1, r5, #0
    c518:	f7f4 fc3c 	bl	d94 <__aeabi_fmul>
    c51c:	465a      	mov	r2, fp
    c51e:	1c01      	adds	r1, r0, #0
    c520:	58a0      	ldr	r0, [r4, r2]
    c522:	f7f4 f8e7 	bl	6f4 <__aeabi_fadd>
    c526:	465b      	mov	r3, fp
    c528:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:354 (discriminator 1)
				}

				//accumulate fvecB[3] = X^T.Y =sum(fBp2)
				pthisMagCal->fvecB[3] += fBp2;
    c52a:	2382      	movs	r3, #130	; 0x82
    c52c:	00db      	lsls	r3, r3, #3
    c52e:	58e0      	ldr	r0, [r4, r3]
    c530:	4641      	mov	r1, r8
    c532:	469b      	mov	fp, r3
    c534:	f7f4 f8de 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:357 (discriminator 1)

				// accumulate on and above-diagonal terms of fmatA = X^T.X ignoring fmatA[3][3]
				pthisMagCal->fmatA[0][0] += pthisMagCal->fvecA[X + 3];
    c538:	22bc      	movs	r2, #188	; 0xbc
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:354 (discriminator 1)
				{
					pthisMagCal->fvecB[l] += pthisMagCal->fvecA[l] * fBp2;
				}

				//accumulate fvecB[3] = X^T.Y =sum(fBp2)
				pthisMagCal->fvecB[3] += fBp2;
    c53a:	4659      	mov	r1, fp
    c53c:	5060      	str	r0, [r4, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:357 (discriminator 1)

				// accumulate on and above-diagonal terms of fmatA = X^T.X ignoring fmatA[3][3]
				pthisMagCal->fmatA[0][0] += pthisMagCal->fvecA[X + 3];
    c53e:	58a0      	ldr	r0, [r4, r2]
    c540:	9902      	ldr	r1, [sp, #8]
    c542:	4690      	mov	r8, r2
    c544:	f7f4 f8d6 	bl	6f4 <__aeabi_fadd>
    c548:	4641      	mov	r1, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:358 (discriminator 1)
				pthisMagCal->fmatA[0][1] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Y];
    c54a:	22c0      	movs	r2, #192	; 0xc0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:357 (discriminator 1)

				//accumulate fvecB[3] = X^T.Y =sum(fBp2)
				pthisMagCal->fvecB[3] += fBp2;

				// accumulate on and above-diagonal terms of fmatA = X^T.X ignoring fmatA[3][3]
				pthisMagCal->fmatA[0][0] += pthisMagCal->fvecA[X + 3];
    c54c:	5060      	str	r0, [r4, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:358 (discriminator 1)
				pthisMagCal->fmatA[0][1] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Y];
    c54e:	1c31      	adds	r1, r6, #0
    c550:	1c38      	adds	r0, r7, #0
    c552:	4690      	mov	r8, r2
    c554:	f7f4 fc1e 	bl	d94 <__aeabi_fmul>
    c558:	4643      	mov	r3, r8
    c55a:	1c01      	adds	r1, r0, #0
    c55c:	58e0      	ldr	r0, [r4, r3]
    c55e:	f7f4 f8c9 	bl	6f4 <__aeabi_fadd>
    c562:	4641      	mov	r1, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:359 (discriminator 1)
				pthisMagCal->fmatA[0][2] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Z];
    c564:	22c4      	movs	r2, #196	; 0xc4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:358 (discriminator 1)
				//accumulate fvecB[3] = X^T.Y =sum(fBp2)
				pthisMagCal->fvecB[3] += fBp2;

				// accumulate on and above-diagonal terms of fmatA = X^T.X ignoring fmatA[3][3]
				pthisMagCal->fmatA[0][0] += pthisMagCal->fvecA[X + 3];
				pthisMagCal->fmatA[0][1] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Y];
    c566:	5060      	str	r0, [r4, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:359 (discriminator 1)
				pthisMagCal->fmatA[0][2] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Z];
    c568:	1c38      	adds	r0, r7, #0
    c56a:	1c29      	adds	r1, r5, #0
    c56c:	4690      	mov	r8, r2
    c56e:	f7f4 fc11 	bl	d94 <__aeabi_fmul>
    c572:	4643      	mov	r3, r8
    c574:	1c01      	adds	r1, r0, #0
    c576:	58e0      	ldr	r0, [r4, r3]
    c578:	f7f4 f8bc 	bl	6f4 <__aeabi_fadd>
    c57c:	4641      	mov	r1, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:360 (discriminator 1)
				pthisMagCal->fmatA[0][3] += pthisMagCal->fvecA[X];
    c57e:	22c8      	movs	r2, #200	; 0xc8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:359 (discriminator 1)
				pthisMagCal->fvecB[3] += fBp2;

				// accumulate on and above-diagonal terms of fmatA = X^T.X ignoring fmatA[3][3]
				pthisMagCal->fmatA[0][0] += pthisMagCal->fvecA[X + 3];
				pthisMagCal->fmatA[0][1] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Y];
				pthisMagCal->fmatA[0][2] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Z];
    c580:	5060      	str	r0, [r4, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:360 (discriminator 1)
				pthisMagCal->fmatA[0][3] += pthisMagCal->fvecA[X];
    c582:	58a0      	ldr	r0, [r4, r2]
    c584:	1c39      	adds	r1, r7, #0
    c586:	4690      	mov	r8, r2
    c588:	f7f4 f8b4 	bl	6f4 <__aeabi_fadd>
    c58c:	4641      	mov	r1, r8
    c58e:	5060      	str	r0, [r4, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:361 (discriminator 1)
				pthisMagCal->fmatA[1][1] += pthisMagCal->fvecA[Y + 3];
    c590:	27e8      	movs	r7, #232	; 0xe8
    c592:	59e0      	ldr	r0, [r4, r7]
    c594:	9903      	ldr	r1, [sp, #12]
    c596:	f7f4 f8ad 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:362 (discriminator 1)
				pthisMagCal->fmatA[1][2] += pthisMagCal->fvecA[Y] * pthisMagCal->fvecA[Z];
    c59a:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:361 (discriminator 1)
				// accumulate on and above-diagonal terms of fmatA = X^T.X ignoring fmatA[3][3]
				pthisMagCal->fmatA[0][0] += pthisMagCal->fvecA[X + 3];
				pthisMagCal->fmatA[0][1] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Y];
				pthisMagCal->fmatA[0][2] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Z];
				pthisMagCal->fmatA[0][3] += pthisMagCal->fvecA[X];
				pthisMagCal->fmatA[1][1] += pthisMagCal->fvecA[Y + 3];
    c59c:	51e0      	str	r0, [r4, r7]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:362 (discriminator 1)
				pthisMagCal->fmatA[1][2] += pthisMagCal->fvecA[Y] * pthisMagCal->fvecA[Z];
    c59e:	1c30      	adds	r0, r6, #0
    c5a0:	f7f4 fbf8 	bl	d94 <__aeabi_fmul>
    c5a4:	27ec      	movs	r7, #236	; 0xec
    c5a6:	1c01      	adds	r1, r0, #0
    c5a8:	59e0      	ldr	r0, [r4, r7]
    c5aa:	f7f4 f8a3 	bl	6f4 <__aeabi_fadd>
    c5ae:	51e0      	str	r0, [r4, r7]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:363 (discriminator 1)
				pthisMagCal->fmatA[1][3] += pthisMagCal->fvecA[Y];
    c5b0:	27f0      	movs	r7, #240	; 0xf0
    c5b2:	59e0      	ldr	r0, [r4, r7]
    c5b4:	1c31      	adds	r1, r6, #0
    c5b6:	f7f4 f89d 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:364 (discriminator 1)
				pthisMagCal->fmatA[2][2] += pthisMagCal->fvecA[Z + 3];
    c5ba:	268a      	movs	r6, #138	; 0x8a
    c5bc:	0076      	lsls	r6, r6, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:363 (discriminator 1)
				pthisMagCal->fmatA[0][1] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Y];
				pthisMagCal->fmatA[0][2] += pthisMagCal->fvecA[X] * pthisMagCal->fvecA[Z];
				pthisMagCal->fmatA[0][3] += pthisMagCal->fvecA[X];
				pthisMagCal->fmatA[1][1] += pthisMagCal->fvecA[Y + 3];
				pthisMagCal->fmatA[1][2] += pthisMagCal->fvecA[Y] * pthisMagCal->fvecA[Z];
				pthisMagCal->fmatA[1][3] += pthisMagCal->fvecA[Y];
    c5be:	51e0      	str	r0, [r4, r7]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:364 (discriminator 1)
				pthisMagCal->fmatA[2][2] += pthisMagCal->fvecA[Z + 3];
    c5c0:	59a0      	ldr	r0, [r4, r6]
    c5c2:	9904      	ldr	r1, [sp, #16]
    c5c4:	f7f4 f896 	bl	6f4 <__aeabi_fadd>
    c5c8:	51a0      	str	r0, [r4, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:365 (discriminator 1)
				pthisMagCal->fmatA[2][3] += pthisMagCal->fvecA[Z];
    c5ca:	268c      	movs	r6, #140	; 0x8c
    c5cc:	0076      	lsls	r6, r6, #1
    c5ce:	59a0      	ldr	r0, [r4, r6]
    c5d0:	1c29      	adds	r1, r5, #0
    c5d2:	f7f4 f88f 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:368 (discriminator 1)

				// increment the counter for next iteration
				iCount++;
    c5d6:	9b05      	ldr	r3, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:365 (discriminator 1)
				pthisMagCal->fmatA[0][3] += pthisMagCal->fvecA[X];
				pthisMagCal->fmatA[1][1] += pthisMagCal->fvecA[Y + 3];
				pthisMagCal->fmatA[1][2] += pthisMagCal->fvecA[Y] * pthisMagCal->fvecA[Z];
				pthisMagCal->fmatA[1][3] += pthisMagCal->fvecA[Y];
				pthisMagCal->fmatA[2][2] += pthisMagCal->fvecA[Z + 3];
				pthisMagCal->fmatA[2][3] += pthisMagCal->fvecA[Z];
    c5d8:	51a0      	str	r0, [r4, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:368 (discriminator 1)

				// increment the counter for next iteration
				iCount++;
    c5da:	3301      	adds	r3, #1
    c5dc:	b29b      	uxth	r3, r3
    c5de:	9305      	str	r3, [sp, #20]
    c5e0:	2204      	movs	r2, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:321

	// use from MINEQUATIONS up to MAXEQUATIONS entries from magnetic buffer to compute matrices
	iCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
	{
		for (k = 0; k < MAGBUFFSIZEY; k++)
    c5e2:	9e08      	ldr	r6, [sp, #32]
    c5e4:	2302      	movs	r3, #2
    c5e6:	4491      	add	r9, r2
    c5e8:	449a      	add	sl, r3
    c5ea:	45b1      	cmp	r9, r6
    c5ec:	d020      	beq.n	c630 <fUpdateCalibration4INV+0x2a4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:323
		{
			if (pthisMagBuffer->index[j][k] != -1)
    c5ee:	4649      	mov	r1, r9
    c5f0:	6809      	ldr	r1, [r1, #0]
    c5f2:	3101      	adds	r1, #1
    c5f4:	d0f4      	beq.n	c5e0 <fUpdateCalibration4INV+0x254>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:326
			{
				// use first valid magnetic buffer entry as estimate (in counts) for offset
				if (iCount == 0)
    c5f6:	9e05      	ldr	r6, [sp, #20]
    c5f8:	2e00      	cmp	r6, #0
    c5fa:	d000      	beq.n	c5fe <fUpdateCalibration4INV+0x272>
    c5fc:	e712      	b.n	c424 <fUpdateCalibration4INV+0x98>
    c5fe:	2290      	movs	r2, #144	; 0x90
    c600:	00d2      	lsls	r2, r2, #3
    c602:	1c13      	adds	r3, r2, #0
    c604:	4453      	add	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:330
				{
					for (l = X; l <= Z; l++)
					{
						iOffset[l] = pthisMagBuffer->iBpFast[l][j][k];
    c606:	881b      	ldrh	r3, [r3, #0]
    c608:	2690      	movs	r6, #144	; 0x90
    c60a:	00b6      	lsls	r6, r6, #2
    c60c:	930a      	str	r3, [sp, #40]	; 0x28
    c60e:	1c33      	adds	r3, r6, #0
    c610:	4453      	add	r3, sl
    c612:	4651      	mov	r1, sl
    c614:	881b      	ldrh	r3, [r3, #0]
    c616:	8809      	ldrh	r1, [r1, #0]
    c618:	2500      	movs	r5, #0
    c61a:	930b      	str	r3, [sp, #44]	; 0x2c
    c61c:	9109      	str	r1, [sp, #36]	; 0x24
    c61e:	1c2e      	adds	r6, r5, #0
    c620:	1c2f      	adds	r7, r5, #0
    c622:	e720      	b.n	c466 <fUpdateCalibration4INV+0xda>
    c624:	42480000 	.word	0x42480000
    c628:	00000404 	.word	0x00000404
    c62c:	0000040c 	.word	0x0000040c
    c630:	464e      	mov	r6, r9
    c632:	3660      	adds	r6, #96	; 0x60
    c634:	9608      	str	r6, [sp, #32]
    c636:	9e0c      	ldr	r6, [sp, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:319
	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;

	// use from MINEQUATIONS up to MAXEQUATIONS entries from magnetic buffer to compute matrices
	iCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
    c638:	990d      	ldr	r1, [sp, #52]	; 0x34
    c63a:	3630      	adds	r6, #48	; 0x30
    c63c:	960c      	str	r6, [sp, #48]	; 0x30
    c63e:	9e08      	ldr	r6, [sp, #32]
    c640:	428e      	cmp	r6, r1
    c642:	d000      	beq.n	c646 <fUpdateCalibration4INV+0x2ba>
    c644:	e6e5      	b.n	c412 <fUpdateCalibration4INV+0x86>
    c646:	9909      	ldr	r1, [sp, #36]	; 0x24
    c648:	ae14      	add	r6, sp, #80	; 0x50
    c64a:	8031      	strh	r1, [r6, #0]
    c64c:	2252      	movs	r2, #82	; 0x52
    c64e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    c650:	446a      	add	r2, sp
    c652:	8016      	strh	r6, [r2, #0]
    c654:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    c656:	a915      	add	r1, sp, #84	; 0x54
    c658:	800e      	strh	r6, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:374
			}
		}
	}

	// set the last element of the measurement matrix to the number of buffer elements used
	pthisMagCal->fmatA[3][3] = (float) iCount;
    c65a:	9e05      	ldr	r6, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:377

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;
    c65c:	2700      	movs	r7, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:374
			}
		}
	}

	// set the last element of the measurement matrix to the number of buffer elements used
	pthisMagCal->fmatA[3][3] = (float) iCount;
    c65e:	b230      	sxth	r0, r6
    c660:	f7f4 fe58 	bl	1314 <__aeabi_i2f>
    c664:	23a0      	movs	r3, #160	; 0xa0
    c666:	005b      	lsls	r3, r3, #1
    c668:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:377

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;
    c66a:	9905      	ldr	r1, [sp, #20]
    c66c:	4bfc      	ldr	r3, [pc, #1008]	; (ca60 <fUpdateCalibration4INV+0x6d4>)
    c66e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:384
	// use above diagonal elements of symmetric fmatA to set both fmatB and fmatA to X^T.X
	for (i = 0; i < 4; i++)
	{
		for (j = i; j < 4; j++)
		{
			pthisMagCal->fmatB[i][j] = pthisMagCal->fmatB[j][i] = pthisMagCal->fmatA[j][i] = pthisMagCal->fmatA[i][j];
    c670:	25bc      	movs	r5, #188	; 0xbc
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:377

	// set the last element of the measurement matrix to the number of buffer elements used
	pthisMagCal->fmatA[3][3] = (float) iCount;

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;
    c672:	52f1      	strh	r1, [r6, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:384
	// use above diagonal elements of symmetric fmatA to set both fmatB and fmatA to X^T.X
	for (i = 0; i < 4; i++)
	{
		for (j = i; j < 4; j++)
		{
			pthisMagCal->fmatB[i][j] = pthisMagCal->fmatB[j][i] = pthisMagCal->fmatA[j][i] = pthisMagCal->fmatA[i][j];
    c674:	2393      	movs	r3, #147	; 0x93
    c676:	009b      	lsls	r3, r3, #2
    c678:	4698      	mov	r8, r3
    c67a:	00be      	lsls	r6, r7, #2
    c67c:	19f6      	adds	r6, r6, r7
    c67e:	b2f9      	uxtb	r1, r7
    c680:	0076      	lsls	r6, r6, #1
    c682:	b24b      	sxtb	r3, r1
    c684:	46b1      	mov	r9, r6
    c686:	009e      	lsls	r6, r3, #2
    c688:	464a      	mov	r2, r9
    c68a:	46b4      	mov	ip, r6
    c68c:	1898      	adds	r0, r3, r2
    c68e:	4463      	add	r3, ip
    c690:	0080      	lsls	r0, r0, #2
    c692:	005b      	lsls	r3, r3, #1
    c694:	1820      	adds	r0, r4, r0
    c696:	19db      	adds	r3, r3, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:384 (discriminator 2)
    c698:	5942      	ldr	r2, [r0, r5]
    c69a:	009b      	lsls	r3, r3, #2
    c69c:	3101      	adds	r1, #1
    c69e:	18e3      	adds	r3, r4, r3
    c6a0:	4646      	mov	r6, r8
    c6a2:	b2c9      	uxtb	r1, r1
    c6a4:	515a      	str	r2, [r3, r5]
    c6a6:	519a      	str	r2, [r3, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:382 (discriminator 2)
	pthisMagBuffer->iMagBufferCount = iCount;

	// use above diagonal elements of symmetric fmatA to set both fmatB and fmatA to X^T.X
	for (i = 0; i < 4; i++)
	{
		for (j = i; j < 4; j++)
    c6a8:	b24b      	sxtb	r3, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:384 (discriminator 2)
		{
			pthisMagCal->fmatB[i][j] = pthisMagCal->fmatB[j][i] = pthisMagCal->fmatA[j][i] = pthisMagCal->fmatA[i][j];
    c6aa:	5182      	str	r2, [r0, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:382 (discriminator 2)
	pthisMagBuffer->iMagBufferCount = iCount;

	// use above diagonal elements of symmetric fmatA to set both fmatB and fmatA to X^T.X
	for (i = 0; i < 4; i++)
	{
		for (j = i; j < 4; j++)
    c6ac:	2b03      	cmp	r3, #3
    c6ae:	ddea      	ble.n	c686 <fUpdateCalibration4INV+0x2fa>
    c6b0:	3701      	adds	r7, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:380

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;

	// use above diagonal elements of symmetric fmatA to set both fmatB and fmatA to X^T.X
	for (i = 0; i < 4; i++)
    c6b2:	2f04      	cmp	r7, #4
    c6b4:	d1e1      	bne.n	c67a <fUpdateCalibration4INV+0x2ee>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:391 (discriminator 1)
	}

	// calculate in situ inverse of fmatB = inv(X^T.X) (4x4) while fmatA still holds X^T.X
	for (i = 0; i < 4; i++)
	{
		pfRows[i] = pthisMagCal->fmatB[i];
    c6b6:	2193      	movs	r1, #147	; 0x93
    c6b8:	0089      	lsls	r1, r1, #2
    c6ba:	229d      	movs	r2, #157	; 0x9d
    c6bc:	1863      	adds	r3, r4, r1
    c6be:	0092      	lsls	r2, r2, #2
    c6c0:	26a7      	movs	r6, #167	; 0xa7
    c6c2:	9316      	str	r3, [sp, #88]	; 0x58
    c6c4:	00b6      	lsls	r6, r6, #2
    c6c6:	18a3      	adds	r3, r4, r2
    c6c8:	21b1      	movs	r1, #177	; 0xb1
    c6ca:	9317      	str	r3, [sp, #92]	; 0x5c
    c6cc:	0089      	lsls	r1, r1, #2
    c6ce:	19a3      	adds	r3, r4, r6
    c6d0:	9318      	str	r3, [sp, #96]	; 0x60
    c6d2:	1863      	adds	r3, r4, r1
    c6d4:	9319      	str	r3, [sp, #100]	; 0x64
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:393 (discriminator 1)
	}
	fmatrixAeqInvA(pfRows, iColInd, iRowInd, iPivot, 4);
    c6d6:	9700      	str	r7, [sp, #0]
    c6d8:	a816      	add	r0, sp, #88	; 0x58
    c6da:	a911      	add	r1, sp, #68	; 0x44
    c6dc:	aa12      	add	r2, sp, #72	; 0x48
    c6de:	ab13      	add	r3, sp, #76	; 0x4c
    c6e0:	f001 fdfa 	bl	e2d8 <fmatrixAeqInvA>
    c6e4:	2381      	movs	r3, #129	; 0x81
    c6e6:	00db      	lsls	r3, r3, #3
    c6e8:	58e3      	ldr	r3, [r4, r3]
    c6ea:	4ade      	ldr	r2, [pc, #888]	; (ca64 <fUpdateCalibration4INV+0x6d8>)
    c6ec:	2182      	movs	r1, #130	; 0x82
    c6ee:	00c9      	lsls	r1, r1, #3
    c6f0:	58a2      	ldr	r2, [r4, r2]
    c6f2:	4699      	mov	r9, r3
    c6f4:	5861      	ldr	r1, [r4, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:401 (discriminator 1)
	for (i = 0; i < 4; i++)
	{
		pthisMagCal->fvecA[i] = 0.0F;
		for (k = 0; k < 4; k++)
		{
			pthisMagCal->fvecA[i] += pthisMagCal->fmatB[i][k] * pthisMagCal->fvecB[k];
    c6f6:	2393      	movs	r3, #147	; 0x93
    c6f8:	009b      	lsls	r3, r3, #2
    c6fa:	1c10      	adds	r0, r2, #0
    c6fc:	468b      	mov	fp, r1
    c6fe:	58e1      	ldr	r1, [r4, r3]
    c700:	4690      	mov	r8, r2
    c702:	f7f4 fb47 	bl	d94 <__aeabi_fmul>
    c706:	2100      	movs	r1, #0
    c708:	f7f3 fff4 	bl	6f4 <__aeabi_fadd>
    c70c:	2394      	movs	r3, #148	; 0x94
    c70e:	009b      	lsls	r3, r3, #2
    c710:	58e1      	ldr	r1, [r4, r3]
    c712:	1c05      	adds	r5, r0, #0
    c714:	4648      	mov	r0, r9
    c716:	f7f4 fb3d 	bl	d94 <__aeabi_fmul>
    c71a:	1c01      	adds	r1, r0, #0
    c71c:	1c28      	adds	r0, r5, #0
    c71e:	f7f3 ffe9 	bl	6f4 <__aeabi_fadd>
    c722:	4ed1      	ldr	r6, [pc, #836]	; (ca68 <fUpdateCalibration4INV+0x6dc>)
    c724:	2395      	movs	r3, #149	; 0x95
    c726:	59a6      	ldr	r6, [r4, r6]
    c728:	009b      	lsls	r3, r3, #2
    c72a:	58e1      	ldr	r1, [r4, r3]
    c72c:	1c05      	adds	r5, r0, #0
    c72e:	1c30      	adds	r0, r6, #0
    c730:	f7f4 fb30 	bl	d94 <__aeabi_fmul>
    c734:	1c01      	adds	r1, r0, #0
    c736:	1c28      	adds	r0, r5, #0
    c738:	f7f3 ffdc 	bl	6f4 <__aeabi_fadd>
    c73c:	2396      	movs	r3, #150	; 0x96
    c73e:	009b      	lsls	r3, r3, #2
    c740:	58e1      	ldr	r1, [r4, r3]
    c742:	1c05      	adds	r5, r0, #0
    c744:	4658      	mov	r0, fp
    c746:	f7f4 fb25 	bl	d94 <__aeabi_fmul>
    c74a:	1c01      	adds	r1, r0, #0
    c74c:	1c28      	adds	r0, r5, #0
    c74e:	f7f3 ffd1 	bl	6f4 <__aeabi_fadd>
    c752:	23f7      	movs	r3, #247	; 0xf7
    c754:	009b      	lsls	r3, r3, #2
    c756:	50e0      	str	r0, [r4, r3]
    c758:	239d      	movs	r3, #157	; 0x9d
    c75a:	009b      	lsls	r3, r3, #2
    c75c:	1c07      	adds	r7, r0, #0
    c75e:	58e1      	ldr	r1, [r4, r3]
    c760:	4640      	mov	r0, r8
    c762:	f7f4 fb17 	bl	d94 <__aeabi_fmul>
    c766:	2100      	movs	r1, #0
    c768:	f7f3 ffc4 	bl	6f4 <__aeabi_fadd>
    c76c:	239e      	movs	r3, #158	; 0x9e
    c76e:	009b      	lsls	r3, r3, #2
    c770:	58e1      	ldr	r1, [r4, r3]
    c772:	1c05      	adds	r5, r0, #0
    c774:	4648      	mov	r0, r9
    c776:	f7f4 fb0d 	bl	d94 <__aeabi_fmul>
    c77a:	1c01      	adds	r1, r0, #0
    c77c:	1c28      	adds	r0, r5, #0
    c77e:	f7f3 ffb9 	bl	6f4 <__aeabi_fadd>
    c782:	239f      	movs	r3, #159	; 0x9f
    c784:	009b      	lsls	r3, r3, #2
    c786:	58e1      	ldr	r1, [r4, r3]
    c788:	1c05      	adds	r5, r0, #0
    c78a:	1c30      	adds	r0, r6, #0
    c78c:	f7f4 fb02 	bl	d94 <__aeabi_fmul>
    c790:	1c01      	adds	r1, r0, #0
    c792:	1c28      	adds	r0, r5, #0
    c794:	f7f3 ffae 	bl	6f4 <__aeabi_fadd>
    c798:	23a0      	movs	r3, #160	; 0xa0
    c79a:	009b      	lsls	r3, r3, #2
    c79c:	58e1      	ldr	r1, [r4, r3]
    c79e:	1c05      	adds	r5, r0, #0
    c7a0:	4658      	mov	r0, fp
    c7a2:	f7f4 faf7 	bl	d94 <__aeabi_fmul>
    c7a6:	1c01      	adds	r1, r0, #0
    c7a8:	1c28      	adds	r0, r5, #0
    c7aa:	f7f3 ffa3 	bl	6f4 <__aeabi_fadd>
    c7ae:	23f8      	movs	r3, #248	; 0xf8
    c7b0:	009b      	lsls	r3, r3, #2
    c7b2:	50e0      	str	r0, [r4, r3]
    c7b4:	23a7      	movs	r3, #167	; 0xa7
    c7b6:	009b      	lsls	r3, r3, #2
    c7b8:	58e1      	ldr	r1, [r4, r3]
    c7ba:	46b2      	mov	sl, r6
    c7bc:	1c06      	adds	r6, r0, #0
    c7be:	4640      	mov	r0, r8
    c7c0:	f7f4 fae8 	bl	d94 <__aeabi_fmul>
    c7c4:	2100      	movs	r1, #0
    c7c6:	f7f3 ff95 	bl	6f4 <__aeabi_fadd>
    c7ca:	23a8      	movs	r3, #168	; 0xa8
    c7cc:	009b      	lsls	r3, r3, #2
    c7ce:	58e1      	ldr	r1, [r4, r3]
    c7d0:	1c05      	adds	r5, r0, #0
    c7d2:	4648      	mov	r0, r9
    c7d4:	f7f4 fade 	bl	d94 <__aeabi_fmul>
    c7d8:	1c01      	adds	r1, r0, #0
    c7da:	1c28      	adds	r0, r5, #0
    c7dc:	f7f3 ff8a 	bl	6f4 <__aeabi_fadd>
    c7e0:	23a9      	movs	r3, #169	; 0xa9
    c7e2:	009b      	lsls	r3, r3, #2
    c7e4:	58e1      	ldr	r1, [r4, r3]
    c7e6:	1c05      	adds	r5, r0, #0
    c7e8:	4650      	mov	r0, sl
    c7ea:	f7f4 fad3 	bl	d94 <__aeabi_fmul>
    c7ee:	1c01      	adds	r1, r0, #0
    c7f0:	1c28      	adds	r0, r5, #0
    c7f2:	f7f3 ff7f 	bl	6f4 <__aeabi_fadd>
    c7f6:	23aa      	movs	r3, #170	; 0xaa
    c7f8:	009b      	lsls	r3, r3, #2
    c7fa:	58e1      	ldr	r1, [r4, r3]
    c7fc:	1c05      	adds	r5, r0, #0
    c7fe:	4658      	mov	r0, fp
    c800:	f7f4 fac8 	bl	d94 <__aeabi_fmul>
    c804:	1c01      	adds	r1, r0, #0
    c806:	1c28      	adds	r0, r5, #0
    c808:	f7f3 ff74 	bl	6f4 <__aeabi_fadd>
    c80c:	23f9      	movs	r3, #249	; 0xf9
    c80e:	009b      	lsls	r3, r3, #2
    c810:	50e0      	str	r0, [r4, r3]
    c812:	23b1      	movs	r3, #177	; 0xb1
    c814:	009b      	lsls	r3, r3, #2
    c816:	1c05      	adds	r5, r0, #0
    c818:	58e1      	ldr	r1, [r4, r3]
    c81a:	4640      	mov	r0, r8
    c81c:	f7f4 faba 	bl	d94 <__aeabi_fmul>
    c820:	2100      	movs	r1, #0
    c822:	f7f3 ff67 	bl	6f4 <__aeabi_fadd>
    c826:	23b2      	movs	r3, #178	; 0xb2
    c828:	009b      	lsls	r3, r3, #2
    c82a:	58e1      	ldr	r1, [r4, r3]
    c82c:	9002      	str	r0, [sp, #8]
    c82e:	4648      	mov	r0, r9
    c830:	f7f4 fab0 	bl	d94 <__aeabi_fmul>
    c834:	1c01      	adds	r1, r0, #0
    c836:	9802      	ldr	r0, [sp, #8]
    c838:	f7f3 ff5c 	bl	6f4 <__aeabi_fadd>
    c83c:	23b3      	movs	r3, #179	; 0xb3
    c83e:	009b      	lsls	r3, r3, #2
    c840:	58e1      	ldr	r1, [r4, r3]
    c842:	9002      	str	r0, [sp, #8]
    c844:	4650      	mov	r0, sl
    c846:	f7f4 faa5 	bl	d94 <__aeabi_fmul>
    c84a:	1c01      	adds	r1, r0, #0
    c84c:	9802      	ldr	r0, [sp, #8]
    c84e:	f7f3 ff51 	bl	6f4 <__aeabi_fadd>
    c852:	23b4      	movs	r3, #180	; 0xb4
    c854:	009b      	lsls	r3, r3, #2
    c856:	58e1      	ldr	r1, [r4, r3]
    c858:	9002      	str	r0, [sp, #8]
    c85a:	4658      	mov	r0, fp
    c85c:	f7f4 fa9a 	bl	d94 <__aeabi_fmul>
    c860:	1c01      	adds	r1, r0, #0
    c862:	9802      	ldr	r0, [sp, #8]
    c864:	f7f3 ff46 	bl	6f4 <__aeabi_fadd>
    c868:	23fa      	movs	r3, #250	; 0xfa
    c86a:	009b      	lsls	r3, r3, #2
    c86c:	50e0      	str	r0, [r4, r3]
    c86e:	9002      	str	r0, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:411 (discriminator 1)
	// = fSumBp4 - 2 * fvecA^T.fvecB + fvecA^T.fmatA.fvecA
	// first set P = Y^T.Y - 2 * beta^T.(X^T.Y) = fSumBp4 - 2 * fvecA^T.fvecB
	fE = 0.0F;
	for (i = 0; i < 4; i++)
	{
		fE += pthisMagCal->fvecA[i] * pthisMagCal->fvecB[i];
    c870:	4641      	mov	r1, r8
    c872:	1c38      	adds	r0, r7, #0
    c874:	f7f4 fa8e 	bl	d94 <__aeabi_fmul>
    c878:	2100      	movs	r1, #0
    c87a:	f7f3 ff3b 	bl	6f4 <__aeabi_fadd>
    c87e:	4649      	mov	r1, r9
    c880:	4680      	mov	r8, r0
    c882:	1c30      	adds	r0, r6, #0
    c884:	f7f4 fa86 	bl	d94 <__aeabi_fmul>
    c888:	4641      	mov	r1, r8
    c88a:	f7f3 ff33 	bl	6f4 <__aeabi_fadd>
    c88e:	4651      	mov	r1, sl
    c890:	4680      	mov	r8, r0
    c892:	1c28      	adds	r0, r5, #0
    c894:	f7f4 fa7e 	bl	d94 <__aeabi_fmul>
    c898:	4641      	mov	r1, r8
    c89a:	f7f3 ff2b 	bl	6f4 <__aeabi_fadd>
    c89e:	4659      	mov	r1, fp
    c8a0:	4680      	mov	r8, r0
    c8a2:	9802      	ldr	r0, [sp, #8]
    c8a4:	f7f4 fa76 	bl	d94 <__aeabi_fmul>
    c8a8:	1c01      	adds	r1, r0, #0
    c8aa:	4640      	mov	r0, r8
    c8ac:	f7f3 ff22 	bl	6f4 <__aeabi_fadd>
    c8b0:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:413 (discriminator 1)
	}
	fE = fSumBp4 - 2.0F * fE;
    c8b2:	f7f3 ff1f 	bl	6f4 <__aeabi_fadd>
    c8b6:	1c01      	adds	r1, r0, #0
    c8b8:	9807      	ldr	r0, [sp, #28]
    c8ba:	f7f4 fb95 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:421 (discriminator 1)
	for (i = 0; i < 4; i++)
	{
		pthisMagCal->fvecB[i] = 0.0F;
		for (k = 0; k < 4; k++)
		{
			pthisMagCal->fvecB[i] += pthisMagCal->fmatA[i][k] * pthisMagCal->fvecA[k];
    c8be:	23bc      	movs	r3, #188	; 0xbc
    c8c0:	58e1      	ldr	r1, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:413 (discriminator 1)
	fE = 0.0F;
	for (i = 0; i < 4; i++)
	{
		fE += pthisMagCal->fvecA[i] * pthisMagCal->fvecB[i];
	}
	fE = fSumBp4 - 2.0F * fE;
    c8c2:	9003      	str	r0, [sp, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:421 (discriminator 1)
	for (i = 0; i < 4; i++)
	{
		pthisMagCal->fvecB[i] = 0.0F;
		for (k = 0; k < 4; k++)
		{
			pthisMagCal->fvecB[i] += pthisMagCal->fmatA[i][k] * pthisMagCal->fvecA[k];
    c8c4:	1c38      	adds	r0, r7, #0
    c8c6:	f7f4 fa65 	bl	d94 <__aeabi_fmul>
    c8ca:	2100      	movs	r1, #0
    c8cc:	f7f3 ff12 	bl	6f4 <__aeabi_fadd>
    c8d0:	23c0      	movs	r3, #192	; 0xc0
    c8d2:	58e1      	ldr	r1, [r4, r3]
    c8d4:	4680      	mov	r8, r0
    c8d6:	1c30      	adds	r0, r6, #0
    c8d8:	f7f4 fa5c 	bl	d94 <__aeabi_fmul>
    c8dc:	1c01      	adds	r1, r0, #0
    c8de:	4640      	mov	r0, r8
    c8e0:	f7f3 ff08 	bl	6f4 <__aeabi_fadd>
    c8e4:	23c4      	movs	r3, #196	; 0xc4
    c8e6:	58e1      	ldr	r1, [r4, r3]
    c8e8:	4680      	mov	r8, r0
    c8ea:	1c28      	adds	r0, r5, #0
    c8ec:	f7f4 fa52 	bl	d94 <__aeabi_fmul>
    c8f0:	1c01      	adds	r1, r0, #0
    c8f2:	4640      	mov	r0, r8
    c8f4:	f7f3 fefe 	bl	6f4 <__aeabi_fadd>
    c8f8:	23c8      	movs	r3, #200	; 0xc8
    c8fa:	58e1      	ldr	r1, [r4, r3]
    c8fc:	4680      	mov	r8, r0
    c8fe:	9802      	ldr	r0, [sp, #8]
    c900:	f7f4 fa48 	bl	d94 <__aeabi_fmul>
    c904:	1c01      	adds	r1, r0, #0
    c906:	4640      	mov	r0, r8
    c908:	f7f3 fef4 	bl	6f4 <__aeabi_fadd>
    c90c:	4a55      	ldr	r2, [pc, #340]	; (ca64 <fUpdateCalibration4INV+0x6d8>)
    c90e:	23e4      	movs	r3, #228	; 0xe4
    c910:	50a0      	str	r0, [r4, r2]
    c912:	4681      	mov	r9, r0
    c914:	58e1      	ldr	r1, [r4, r3]
    c916:	1c38      	adds	r0, r7, #0
    c918:	f7f4 fa3c 	bl	d94 <__aeabi_fmul>
    c91c:	2100      	movs	r1, #0
    c91e:	f7f3 fee9 	bl	6f4 <__aeabi_fadd>
    c922:	23e8      	movs	r3, #232	; 0xe8
    c924:	58e1      	ldr	r1, [r4, r3]
    c926:	4680      	mov	r8, r0
    c928:	1c30      	adds	r0, r6, #0
    c92a:	f7f4 fa33 	bl	d94 <__aeabi_fmul>
    c92e:	1c01      	adds	r1, r0, #0
    c930:	4640      	mov	r0, r8
    c932:	f7f3 fedf 	bl	6f4 <__aeabi_fadd>
    c936:	23ec      	movs	r3, #236	; 0xec
    c938:	58e1      	ldr	r1, [r4, r3]
    c93a:	4680      	mov	r8, r0
    c93c:	1c28      	adds	r0, r5, #0
    c93e:	f7f4 fa29 	bl	d94 <__aeabi_fmul>
    c942:	1c01      	adds	r1, r0, #0
    c944:	4640      	mov	r0, r8
    c946:	f7f3 fed5 	bl	6f4 <__aeabi_fadd>
    c94a:	23f0      	movs	r3, #240	; 0xf0
    c94c:	58e1      	ldr	r1, [r4, r3]
    c94e:	4680      	mov	r8, r0
    c950:	9802      	ldr	r0, [sp, #8]
    c952:	f7f4 fa1f 	bl	d94 <__aeabi_fmul>
    c956:	1c01      	adds	r1, r0, #0
    c958:	4640      	mov	r0, r8
    c95a:	f7f3 fecb 	bl	6f4 <__aeabi_fadd>
    c95e:	2381      	movs	r3, #129	; 0x81
    c960:	00db      	lsls	r3, r3, #3
    c962:	50e0      	str	r0, [r4, r3]
    c964:	2386      	movs	r3, #134	; 0x86
    c966:	005b      	lsls	r3, r3, #1
    c968:	58e1      	ldr	r1, [r4, r3]
    c96a:	4682      	mov	sl, r0
    c96c:	1c38      	adds	r0, r7, #0
    c96e:	f7f4 fa11 	bl	d94 <__aeabi_fmul>
    c972:	2100      	movs	r1, #0
    c974:	f7f3 febe 	bl	6f4 <__aeabi_fadd>
    c978:	2388      	movs	r3, #136	; 0x88
    c97a:	005b      	lsls	r3, r3, #1
    c97c:	58e1      	ldr	r1, [r4, r3]
    c97e:	4680      	mov	r8, r0
    c980:	1c30      	adds	r0, r6, #0
    c982:	f7f4 fa07 	bl	d94 <__aeabi_fmul>
    c986:	1c01      	adds	r1, r0, #0
    c988:	4640      	mov	r0, r8
    c98a:	f7f3 feb3 	bl	6f4 <__aeabi_fadd>
    c98e:	238a      	movs	r3, #138	; 0x8a
    c990:	005b      	lsls	r3, r3, #1
    c992:	58e1      	ldr	r1, [r4, r3]
    c994:	4680      	mov	r8, r0
    c996:	1c28      	adds	r0, r5, #0
    c998:	f7f4 f9fc 	bl	d94 <__aeabi_fmul>
    c99c:	1c01      	adds	r1, r0, #0
    c99e:	4640      	mov	r0, r8
    c9a0:	f7f3 fea8 	bl	6f4 <__aeabi_fadd>
    c9a4:	238c      	movs	r3, #140	; 0x8c
    c9a6:	005b      	lsls	r3, r3, #1
    c9a8:	58e1      	ldr	r1, [r4, r3]
    c9aa:	4680      	mov	r8, r0
    c9ac:	9802      	ldr	r0, [sp, #8]
    c9ae:	f7f4 f9f1 	bl	d94 <__aeabi_fmul>
    c9b2:	1c01      	adds	r1, r0, #0
    c9b4:	4640      	mov	r0, r8
    c9b6:	f7f3 fe9d 	bl	6f4 <__aeabi_fadd>
    c9ba:	492b      	ldr	r1, [pc, #172]	; (ca68 <fUpdateCalibration4INV+0x6dc>)
    c9bc:	239a      	movs	r3, #154	; 0x9a
    c9be:	005b      	lsls	r3, r3, #1
    c9c0:	5060      	str	r0, [r4, r1]
    c9c2:	4683      	mov	fp, r0
    c9c4:	58e1      	ldr	r1, [r4, r3]
    c9c6:	1c38      	adds	r0, r7, #0
    c9c8:	f7f4 f9e4 	bl	d94 <__aeabi_fmul>
    c9cc:	2100      	movs	r1, #0
    c9ce:	f7f3 fe91 	bl	6f4 <__aeabi_fadd>
    c9d2:	239c      	movs	r3, #156	; 0x9c
    c9d4:	005b      	lsls	r3, r3, #1
    c9d6:	58e1      	ldr	r1, [r4, r3]
    c9d8:	4680      	mov	r8, r0
    c9da:	1c30      	adds	r0, r6, #0
    c9dc:	f7f4 f9da 	bl	d94 <__aeabi_fmul>
    c9e0:	1c01      	adds	r1, r0, #0
    c9e2:	4640      	mov	r0, r8
    c9e4:	f7f3 fe86 	bl	6f4 <__aeabi_fadd>
    c9e8:	239e      	movs	r3, #158	; 0x9e
    c9ea:	005b      	lsls	r3, r3, #1
    c9ec:	58e1      	ldr	r1, [r4, r3]
    c9ee:	4680      	mov	r8, r0
    c9f0:	1c28      	adds	r0, r5, #0
    c9f2:	f7f4 f9cf 	bl	d94 <__aeabi_fmul>
    c9f6:	1c01      	adds	r1, r0, #0
    c9f8:	4640      	mov	r0, r8
    c9fa:	f7f3 fe7b 	bl	6f4 <__aeabi_fadd>
    c9fe:	23a0      	movs	r3, #160	; 0xa0
    ca00:	005b      	lsls	r3, r3, #1
    ca02:	58e1      	ldr	r1, [r4, r3]
    ca04:	4680      	mov	r8, r0
    ca06:	9802      	ldr	r0, [sp, #8]
    ca08:	f7f4 f9c4 	bl	d94 <__aeabi_fmul>
    ca0c:	1c01      	adds	r1, r0, #0
    ca0e:	4640      	mov	r0, r8
    ca10:	f7f3 fe70 	bl	6f4 <__aeabi_fadd>
    ca14:	2282      	movs	r2, #130	; 0x82
    ca16:	00d2      	lsls	r2, r2, #3
    ca18:	50a0      	str	r0, [r4, r2]
    ca1a:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:428 (discriminator 1)
	} 

	// complete calculation of P by adding beta^T.(X^T.X).beta = fvecA^T * fvecB
	for (i = 0; i < 4; i++)
	{
		fE += pthisMagCal->fvecB[i] * pthisMagCal->fvecA[i];
    ca1c:	1c39      	adds	r1, r7, #0
    ca1e:	4648      	mov	r0, r9
    ca20:	f7f4 f9b8 	bl	d94 <__aeabi_fmul>
    ca24:	1c01      	adds	r1, r0, #0
    ca26:	9803      	ldr	r0, [sp, #12]
    ca28:	f7f3 fe64 	bl	6f4 <__aeabi_fadd>
    ca2c:	1c31      	adds	r1, r6, #0
    ca2e:	4681      	mov	r9, r0
    ca30:	4650      	mov	r0, sl
    ca32:	f7f4 f9af 	bl	d94 <__aeabi_fmul>
    ca36:	4649      	mov	r1, r9
    ca38:	f7f3 fe5c 	bl	6f4 <__aeabi_fadd>
    ca3c:	1c29      	adds	r1, r5, #0
    ca3e:	4681      	mov	r9, r0
    ca40:	4658      	mov	r0, fp
    ca42:	f7f4 f9a7 	bl	d94 <__aeabi_fmul>
    ca46:	4649      	mov	r1, r9
    ca48:	f7f3 fe54 	bl	6f4 <__aeabi_fadd>
    ca4c:	9902      	ldr	r1, [sp, #8]
    ca4e:	4681      	mov	r9, r0
    ca50:	4640      	mov	r0, r8
    ca52:	f7f4 f99f 	bl	d94 <__aeabi_fmul>
    ca56:	4649      	mov	r1, r9
    ca58:	f7f3 fe4c 	bl	6f4 <__aeabi_fadd>
    ca5c:	e006      	b.n	ca6c <fUpdateCalibration4INV+0x6e0>
    ca5e:	46c0      	nop			; (mov r8, r8)
    ca60:	00000b56 	.word	0x00000b56
    ca64:	00000404 	.word	0x00000404
    ca68:	0000040c 	.word	0x0000040c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:434 (discriminator 1)
	}

	// compute the hard iron vector (in uT but offset and scaled by FMATRIXSCALING)
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = 0.5F * pthisMagCal->fvecA[l];
    ca6c:	21fc      	movs	r1, #252	; 0xfc
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:428 (discriminator 1)
	} 

	// complete calculation of P by adding beta^T.(X^T.X).beta = fvecA^T * fvecB
	for (i = 0; i < 4; i++)
	{
		fE += pthisMagCal->fvecB[i] * pthisMagCal->fvecA[i];
    ca6e:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:434 (discriminator 1)
	}

	// compute the hard iron vector (in uT but offset and scaled by FMATRIXSCALING)
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = 0.5F * pthisMagCal->fvecA[l];
    ca70:	0589      	lsls	r1, r1, #22
    ca72:	1c38      	adds	r0, r7, #0
    ca74:	f7f4 f98e 	bl	d94 <__aeabi_fmul>
    ca78:	21fc      	movs	r1, #252	; 0xfc
    ca7a:	1c07      	adds	r7, r0, #0
    ca7c:	63e0      	str	r0, [r4, #60]	; 0x3c
    ca7e:	0589      	lsls	r1, r1, #22
    ca80:	1c30      	adds	r0, r6, #0
    ca82:	f7f4 f987 	bl	d94 <__aeabi_fmul>
    ca86:	21fc      	movs	r1, #252	; 0xfc
    ca88:	1c06      	adds	r6, r0, #0
    ca8a:	6420      	str	r0, [r4, #64]	; 0x40
    ca8c:	0589      	lsls	r1, r1, #22
    ca8e:	1c28      	adds	r0, r5, #0
    ca90:	f7f4 f980 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:438 (discriminator 1)
	}

	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    ca94:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:434 (discriminator 1)
	}

	// compute the hard iron vector (in uT but offset and scaled by FMATRIXSCALING)
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = 0.5F * pthisMagCal->fvecA[l];
    ca96:	1c05      	adds	r5, r0, #0
    ca98:	6460      	str	r0, [r4, #68]	; 0x44
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:438 (discriminator 1)
	}

	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    ca9a:	1c38      	adds	r0, r7, #0
    ca9c:	f7f4 f97a 	bl	d94 <__aeabi_fmul>
    caa0:	9902      	ldr	r1, [sp, #8]
    caa2:	f7f3 fe27 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:439 (discriminator 1)
			pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] + pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z]);
    caa6:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:438 (discriminator 1)
	{
		pthisMagCal->ftrV[l] = 0.5F * pthisMagCal->fvecA[l];
	}

	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    caa8:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:439 (discriminator 1)
			pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] + pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z]);
    caaa:	1c30      	adds	r0, r6, #0
    caac:	f7f4 f972 	bl	d94 <__aeabi_fmul>
    cab0:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:438 (discriminator 1)
	{
		pthisMagCal->ftrV[l] = 0.5F * pthisMagCal->fvecA[l];
	}

	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    cab2:	1c38      	adds	r0, r7, #0
    cab4:	f7f3 fe1e 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:439 (discriminator 1)
			pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] + pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z]);
    cab8:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:438 (discriminator 1)
	{
		pthisMagCal->ftrV[l] = 0.5F * pthisMagCal->fvecA[l];
	}

	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    caba:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:439 (discriminator 1)
			pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] + pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z]);
    cabc:	1c28      	adds	r0, r5, #0
    cabe:	f7f4 f969 	bl	d94 <__aeabi_fmul>
    cac2:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:438 (discriminator 1)
	{
		pthisMagCal->ftrV[l] = 0.5F * pthisMagCal->fvecA[l];
	}

	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    cac4:	1c30      	adds	r0, r6, #0
    cac6:	f7f3 fe15 	bl	6f4 <__aeabi_fadd>
    caca:	f006 fce1 	bl	13490 <sqrtf>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:442 (discriminator 1)
			pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] + pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z]);

	// calculate the trial fit error (percent) normalized to number of measurements and scaled geomagnetic field strength
	pthisMagCal->ftrFitErrorpc = sqrtf(fE / (float) pthisMagBuffer->iMagBufferCount) * 100.0F /
    cace:	4b31      	ldr	r3, [pc, #196]	; (cb94 <fUpdateCalibration4INV+0x808>)
    cad0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:438 (discriminator 1)
	{
		pthisMagCal->ftrV[l] = 0.5F * pthisMagCal->fvecA[l];
	}

	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    cad2:	66e0      	str	r0, [r4, #108]	; 0x6c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:442 (discriminator 1)
			pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] + pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z]);

	// calculate the trial fit error (percent) normalized to number of measurements and scaled geomagnetic field strength
	pthisMagCal->ftrFitErrorpc = sqrtf(fE / (float) pthisMagBuffer->iMagBufferCount) * 100.0F /
    cad4:	5ef0      	ldrsh	r0, [r6, r3]
    cad6:	f7f4 fc1d 	bl	1314 <__aeabi_i2f>
    cada:	1c01      	adds	r1, r0, #0
    cadc:	4640      	mov	r0, r8
    cade:	f7f3 ff75 	bl	9cc <__aeabi_fdiv>
    cae2:	f006 fcd5 	bl	13490 <sqrtf>
    cae6:	492c      	ldr	r1, [pc, #176]	; (cb98 <fUpdateCalibration4INV+0x80c>)
    cae8:	f7f4 f954 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:443 (discriminator 1)
			(2.0F * pthisMagCal->ftrB * pthisMagCal->ftrB);
    caec:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:442 (discriminator 1)
	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] + pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z]);

	// calculate the trial fit error (percent) normalized to number of measurements and scaled geomagnetic field strength
	pthisMagCal->ftrFitErrorpc = sqrtf(fE / (float) pthisMagBuffer->iMagBufferCount) * 100.0F /
    caee:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:443 (discriminator 1)
			(2.0F * pthisMagCal->ftrB * pthisMagCal->ftrB);
    caf0:	1c39      	adds	r1, r7, #0
    caf2:	1c38      	adds	r0, r7, #0
    caf4:	f7f3 fdfe 	bl	6f4 <__aeabi_fadd>
    caf8:	1c01      	adds	r1, r0, #0
    cafa:	1c38      	adds	r0, r7, #0
    cafc:	f7f4 f94a 	bl	d94 <__aeabi_fmul>
    cb00:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:442 (discriminator 1)
	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] + pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z]);

	// calculate the trial fit error (percent) normalized to number of measurements and scaled geomagnetic field strength
	pthisMagCal->ftrFitErrorpc = sqrtf(fE / (float) pthisMagBuffer->iMagBufferCount) * 100.0F /
    cb02:	1c28      	adds	r0, r5, #0
    cb04:	f7f3 ff62 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:448 (discriminator 1)
			(2.0F * pthisMagCal->ftrB * pthisMagCal->ftrB);

	// correct the hard iron estimate for FMATRIXSCALING and the offsets applied (result in uT)
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = pthisMagCal->ftrV[l] * DEFAULTB + (float)iOffset[l] * pthisMag->fuTPerCount;
    cb08:	4924      	ldr	r1, [pc, #144]	; (cb9c <fUpdateCalibration4INV+0x810>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:442 (discriminator 1)
	// compute the scaled geomagnetic field strength B (in uT but scaled by FMATRIXSCALING)
	pthisMagCal->ftrB = sqrtf(pthisMagCal->fvecA[3] + pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] + pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z]);

	// calculate the trial fit error (percent) normalized to number of measurements and scaled geomagnetic field strength
	pthisMagCal->ftrFitErrorpc = sqrtf(fE / (float) pthisMagBuffer->iMagBufferCount) * 100.0F /
    cb0a:	6720      	str	r0, [r4, #112]	; 0x70
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:448 (discriminator 1)
			(2.0F * pthisMagCal->ftrB * pthisMagCal->ftrB);

	// correct the hard iron estimate for FMATRIXSCALING and the offsets applied (result in uT)
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = pthisMagCal->ftrV[l] * DEFAULTB + (float)iOffset[l] * pthisMag->fuTPerCount;
    cb0c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    cb0e:	f7f4 f941 	bl	d94 <__aeabi_fmul>
    cb12:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    cb14:	a914      	add	r1, sp, #80	; 0x50
    cb16:	6bf5      	ldr	r5, [r6, #60]	; 0x3c
    cb18:	1c06      	adds	r6, r0, #0
    cb1a:	2000      	movs	r0, #0
    cb1c:	5e08      	ldrsh	r0, [r1, r0]
    cb1e:	f7f4 fbf9 	bl	1314 <__aeabi_i2f>
    cb22:	1c29      	adds	r1, r5, #0
    cb24:	f7f4 f936 	bl	d94 <__aeabi_fmul>
    cb28:	1c01      	adds	r1, r0, #0
    cb2a:	1c30      	adds	r0, r6, #0
    cb2c:	f7f3 fde2 	bl	6f4 <__aeabi_fadd>
    cb30:	491a      	ldr	r1, [pc, #104]	; (cb9c <fUpdateCalibration4INV+0x810>)
    cb32:	63e0      	str	r0, [r4, #60]	; 0x3c
    cb34:	6c20      	ldr	r0, [r4, #64]	; 0x40
    cb36:	f7f4 f92d 	bl	d94 <__aeabi_fmul>
    cb3a:	2252      	movs	r2, #82	; 0x52
    cb3c:	446a      	add	r2, sp
    cb3e:	1c06      	adds	r6, r0, #0
    cb40:	2000      	movs	r0, #0
    cb42:	5e10      	ldrsh	r0, [r2, r0]
    cb44:	f7f4 fbe6 	bl	1314 <__aeabi_i2f>
    cb48:	1c29      	adds	r1, r5, #0
    cb4a:	f7f4 f923 	bl	d94 <__aeabi_fmul>
    cb4e:	1c01      	adds	r1, r0, #0
    cb50:	1c30      	adds	r0, r6, #0
    cb52:	f7f3 fdcf 	bl	6f4 <__aeabi_fadd>
    cb56:	4911      	ldr	r1, [pc, #68]	; (cb9c <fUpdateCalibration4INV+0x810>)
    cb58:	6420      	str	r0, [r4, #64]	; 0x40
    cb5a:	6c60      	ldr	r0, [r4, #68]	; 0x44
    cb5c:	f7f4 f91a 	bl	d94 <__aeabi_fmul>
    cb60:	ab15      	add	r3, sp, #84	; 0x54
    cb62:	1c06      	adds	r6, r0, #0
    cb64:	2000      	movs	r0, #0
    cb66:	5e18      	ldrsh	r0, [r3, r0]
    cb68:	f7f4 fbd4 	bl	1314 <__aeabi_i2f>
    cb6c:	1c29      	adds	r1, r5, #0
    cb6e:	f7f4 f911 	bl	d94 <__aeabi_fmul>
    cb72:	1c01      	adds	r1, r0, #0
    cb74:	1c30      	adds	r0, r6, #0
    cb76:	f7f3 fdbd 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:452 (discriminator 1)
	}

	// correct the geomagnetic field strength B to correct scaling (result in uT)
	pthisMagCal->ftrB *= DEFAULTB;
    cb7a:	4908      	ldr	r1, [pc, #32]	; (cb9c <fUpdateCalibration4INV+0x810>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:448 (discriminator 1)
			(2.0F * pthisMagCal->ftrB * pthisMagCal->ftrB);

	// correct the hard iron estimate for FMATRIXSCALING and the offsets applied (result in uT)
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = pthisMagCal->ftrV[l] * DEFAULTB + (float)iOffset[l] * pthisMag->fuTPerCount;
    cb7c:	6460      	str	r0, [r4, #68]	; 0x44
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:452 (discriminator 1)
	}

	// correct the geomagnetic field strength B to correct scaling (result in uT)
	pthisMagCal->ftrB *= DEFAULTB;
    cb7e:	1c38      	adds	r0, r7, #0
    cb80:	f7f4 f908 	bl	d94 <__aeabi_fmul>
    cb84:	66e0      	str	r0, [r4, #108]	; 0x6c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:455 (discriminator 1)

	return;
}
    cb86:	b01b      	add	sp, #108	; 0x6c
    cb88:	bc3c      	pop	{r2, r3, r4, r5}
    cb8a:	4690      	mov	r8, r2
    cb8c:	4699      	mov	r9, r3
    cb8e:	46a2      	mov	sl, r4
    cb90:	46ab      	mov	fp, r5
    cb92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cb94:	00000b56 	.word	0x00000b56
    cb98:	42c80000 	.word	0x42c80000
    cb9c:	42480000 	.word	0x42480000

0000cba0 <fUpdateCalibration7EIG>:
fUpdateCalibration7EIG():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:459

// 7 element calibration using direct eigen-decomposition
void fUpdateCalibration7EIG(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer, struct MagSensor *pthisMag)
{
    cba0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cba2:	465f      	mov	r7, fp
    cba4:	464d      	mov	r5, r9
    cba6:	4656      	mov	r6, sl
    cba8:	4644      	mov	r4, r8
    cbaa:	b4f0      	push	{r4, r5, r6, r7}
    cbac:	b093      	sub	sp, #76	; 0x4c
    cbae:	4683      	mov	fp, r0
    cbb0:	910c      	str	r1, [sp, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:469
	int16 iOffset[3];						// offset to remove large DC hard iron bias
	int16 iCount;							// number of measurements counted
	int8 i, j, k, l, m, n;					// loop counters

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;
    cbb2:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    cbb4:	496e      	ldr	r1, [pc, #440]	; (cd70 <fUpdateCalibration7EIG+0x1d0>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:459
	return;
}

// 7 element calibration using direct eigen-decomposition
void fUpdateCalibration7EIG(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer, struct MagSensor *pthisMag)
{
    cbb6:	920e      	str	r2, [sp, #56]	; 0x38
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:469
	int16 iOffset[3];						// offset to remove large DC hard iron bias
	int16 iCount;							// number of measurements counted
	int8 i, j, k, l, m, n;					// loop counters

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;
    cbb8:	f7f3 ff08 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:472

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
    cbbc:	2142      	movs	r1, #66	; 0x42
    cbbe:	2300      	movs	r3, #0
    cbc0:	4469      	add	r1, sp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:469
	int16 iOffset[3];						// offset to remove large DC hard iron bias
	int16 iCount;							// number of measurements counted
	int8 i, j, k, l, m, n;					// loop counters

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;
    cbc2:	9006      	str	r0, [sp, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:472

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
    cbc4:	aa10      	add	r2, sp, #64	; 0x40
    cbc6:	a811      	add	r0, sp, #68	; 0x44
    cbc8:	8003      	strh	r3, [r0, #0]
    cbca:	800b      	strh	r3, [r1, #0]
    cbcc:	8013      	strh	r3, [r2, #0]
    cbce:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:479
	// zero the on and above diagonal elements of the 7x7 symmetric measurement matrix fmatA
	for (m = 0; m < 7; m++)
	{
		for (n = m; n < 7; n++)
		{
			pthisMagCal->fmatA[m][n] = 0.0F;
    cbd0:	2000      	movs	r0, #0
    cbd2:	465d      	mov	r5, fp
    cbd4:	008c      	lsls	r4, r1, #2
    cbd6:	b2cb      	uxtb	r3, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:479 (discriminator 1)
    cbd8:	1864      	adds	r4, r4, r1
    cbda:	b25a      	sxtb	r2, r3
    cbdc:	0064      	lsls	r4, r4, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:479 (discriminator 2)
    cbde:	18a2      	adds	r2, r4, r2
    cbe0:	322e      	adds	r2, #46	; 0x2e
    cbe2:	0092      	lsls	r2, r2, #2
    cbe4:	3301      	adds	r3, #1
    cbe6:	18aa      	adds	r2, r5, r2
    cbe8:	b2db      	uxtb	r3, r3
    cbea:	6050      	str	r0, [r2, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:477 (discriminator 2)
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;

	// zero the on and above diagonal elements of the 7x7 symmetric measurement matrix fmatA
	for (m = 0; m < 7; m++)
	{
		for (n = m; n < 7; n++)
    cbec:	b25a      	sxtb	r2, r3
    cbee:	2a06      	cmp	r2, #6
    cbf0:	ddf5      	ble.n	cbde <fUpdateCalibration7EIG+0x3e>
    cbf2:	3101      	adds	r1, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:475

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;

	// zero the on and above diagonal elements of the 7x7 symmetric measurement matrix fmatA
	for (m = 0; m < 7; m++)
    cbf4:	2907      	cmp	r1, #7
    cbf6:	d1ed      	bne.n	cbd4 <fUpdateCalibration7EIG+0x34>
    cbf8:	ab10      	add	r3, sp, #64	; 0x40
    cbfa:	881b      	ldrh	r3, [r3, #0]
    cbfc:	2442      	movs	r4, #66	; 0x42
    cbfe:	9309      	str	r3, [sp, #36]	; 0x24
    cc00:	446c      	add	r4, sp
    cc02:	8824      	ldrh	r4, [r4, #0]
    cc04:	46ab      	mov	fp, r5
    cc06:	940b      	str	r4, [sp, #44]	; 0x2c
    cc08:	ad11      	add	r5, sp, #68	; 0x44
    cc0a:	882d      	ldrh	r5, [r5, #0]
    cc0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    cc0e:	950a      	str	r5, [sp, #40]	; 0x28
    cc10:	25e4      	movs	r5, #228	; 0xe4
    cc12:	00ed      	lsls	r5, r5, #3
    cc14:	1965      	adds	r5, r4, r5
    cc16:	9507      	str	r5, [sp, #28]
    cc18:	25ba      	movs	r5, #186	; 0xba
    cc1a:	012d      	lsls	r5, r5, #4
    cc1c:	1965      	adds	r5, r4, r5
    cc1e:	950f      	str	r5, [sp, #60]	; 0x3c
    cc20:	25f7      	movs	r5, #247	; 0xf7
    cc22:	940d      	str	r4, [sp, #52]	; 0x34
    cc24:	00ad      	lsls	r5, r5, #2
    cc26:	2400      	movs	r4, #0
    cc28:	9405      	str	r4, [sp, #20]
    cc2a:	1c2c      	adds	r4, r5, #0
    cc2c:	445c      	add	r4, fp
    cc2e:	9408      	str	r4, [sp, #32]
    cc30:	465e      	mov	r6, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:472 (discriminator 1)

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
    cc32:	9c07      	ldr	r4, [sp, #28]
    cc34:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    cc36:	3c60      	subs	r4, #96	; 0x60
    cc38:	9503      	str	r5, [sp, #12]
    cc3a:	9404      	str	r4, [sp, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:489
	iCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
	{
		for (k = 0; k < MAGBUFFSIZEY; k++)
		{
			if (pthisMagBuffer->index[j][k] != -1)
    cc3c:	9d04      	ldr	r5, [sp, #16]
    cc3e:	682d      	ldr	r5, [r5, #0]
    cc40:	3501      	adds	r5, #1
    cc42:	d100      	bne.n	cc46 <fUpdateCalibration7EIG+0xa6>
    cc44:	e0b6      	b.n	cdb4 <fUpdateCalibration7EIG+0x214>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:492
			{
				// use first valid magnetic buffer entry as offset estimate (bit counts)
				if (iCount == 0)
    cc46:	9c05      	ldr	r4, [sp, #20]
    cc48:	9d03      	ldr	r5, [sp, #12]
    cc4a:	2c00      	cmp	r4, #0
    cc4c:	d100      	bne.n	cc50 <fUpdateCalibration7EIG+0xb0>
    cc4e:	e271      	b.n	d134 <fUpdateCalibration7EIG+0x594>
    cc50:	9c09      	ldr	r4, [sp, #36]	; 0x24
    cc52:	2000      	movs	r0, #0
    cc54:	5e28      	ldrsh	r0, [r5, r0]
    cc56:	b223      	sxth	r3, r4
    cc58:	1ac0      	subs	r0, r0, r3
    cc5a:	f7f4 fb5b 	bl	1314 <__aeabi_i2f>
    cc5e:	9d03      	ldr	r5, [sp, #12]
    cc60:	1c07      	adds	r7, r0, #0
    cc62:	2090      	movs	r0, #144	; 0x90
    cc64:	0080      	lsls	r0, r0, #2
    cc66:	182b      	adds	r3, r5, r0
    cc68:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    cc6a:	2100      	movs	r1, #0
    cc6c:	5e58      	ldrsh	r0, [r3, r1]
    cc6e:	b223      	sxth	r3, r4
    cc70:	1ac0      	subs	r0, r0, r3
    cc72:	f7f4 fb4f 	bl	1314 <__aeabi_i2f>
    cc76:	9c03      	ldr	r4, [sp, #12]
    cc78:	1c05      	adds	r5, r0, #0
    cc7a:	2090      	movs	r0, #144	; 0x90
    cc7c:	00c0      	lsls	r0, r0, #3
    cc7e:	1823      	adds	r3, r4, r0
    cc80:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    cc82:	2100      	movs	r1, #0
    cc84:	5e58      	ldrsh	r0, [r3, r1]
    cc86:	b223      	sxth	r3, r4
    cc88:	1ac0      	subs	r0, r0, r3
    cc8a:	f7f4 fb43 	bl	1314 <__aeabi_i2f>
    cc8e:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:503 (discriminator 1)
				}

				// apply the offset and scaling and store in fvecA
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l + 3] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    cc90:	1c39      	adds	r1, r7, #0
    cc92:	9806      	ldr	r0, [sp, #24]
    cc94:	f7f4 f87e 	bl	d94 <__aeabi_fmul>
    cc98:	1c07      	adds	r7, r0, #0
    cc9a:	20fa      	movs	r0, #250	; 0xfa
    cc9c:	0080      	lsls	r0, r0, #2
    cc9e:	5037      	str	r7, [r6, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:504 (discriminator 1)
					pthisMagCal->fvecA[l] = pthisMagCal->fvecA[l + 3] * pthisMagCal->fvecA[l + 3];
    cca0:	1c39      	adds	r1, r7, #0
    cca2:	1c38      	adds	r0, r7, #0
    cca4:	f7f4 f876 	bl	d94 <__aeabi_fmul>
    cca8:	21f7      	movs	r1, #247	; 0xf7
    ccaa:	0089      	lsls	r1, r1, #2
    ccac:	4682      	mov	sl, r0
    ccae:	5070      	str	r0, [r6, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:503 (discriminator 1)
				}

				// apply the offset and scaling and store in fvecA
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l + 3] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    ccb0:	1c29      	adds	r1, r5, #0
    ccb2:	9806      	ldr	r0, [sp, #24]
    ccb4:	f7f4 f86e 	bl	d94 <__aeabi_fmul>
    ccb8:	22fb      	movs	r2, #251	; 0xfb
    ccba:	0092      	lsls	r2, r2, #2
    ccbc:	1c05      	adds	r5, r0, #0
    ccbe:	50b0      	str	r0, [r6, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:504 (discriminator 1)
					pthisMagCal->fvecA[l] = pthisMagCal->fvecA[l + 3] * pthisMagCal->fvecA[l + 3];
    ccc0:	1c29      	adds	r1, r5, #0
    ccc2:	f7f4 f867 	bl	d94 <__aeabi_fmul>
    ccc6:	23f8      	movs	r3, #248	; 0xf8
    ccc8:	009b      	lsls	r3, r3, #2
    ccca:	50f0      	str	r0, [r6, r3]
    cccc:	4681      	mov	r9, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:503 (discriminator 1)
				}

				// apply the offset and scaling and store in fvecA
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l + 3] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    ccce:	1c21      	adds	r1, r4, #0
    ccd0:	9806      	ldr	r0, [sp, #24]
    ccd2:	f7f4 f85f 	bl	d94 <__aeabi_fmul>
    ccd6:	1c04      	adds	r4, r0, #0
    ccd8:	20fc      	movs	r0, #252	; 0xfc
    ccda:	0080      	lsls	r0, r0, #2
    ccdc:	5034      	str	r4, [r6, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:504 (discriminator 1)
					pthisMagCal->fvecA[l] = pthisMagCal->fvecA[l + 3] * pthisMagCal->fvecA[l + 3];
    ccde:	1c21      	adds	r1, r4, #0
    cce0:	1c20      	adds	r0, r4, #0
    cce2:	f7f4 f857 	bl	d94 <__aeabi_fmul>
    cce6:	21f9      	movs	r1, #249	; 0xf9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:513 (discriminator 1)
				// with the exception of fmatA[6][6] which will sum to the number of measurements
				// and remembering that fvecA[6] equals 1.0F
				// update the right hand column [6] of fmatA except for fmatA[6][6]
				for (m = 0; m < 6; m++)
				{
					pthisMagCal->fmatA[m][6] += pthisMagCal->fvecA[m];
    cce8:	22d4      	movs	r2, #212	; 0xd4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:504 (discriminator 1)

				// apply the offset and scaling and store in fvecA
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l + 3] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
					pthisMagCal->fvecA[l] = pthisMagCal->fvecA[l + 3] * pthisMagCal->fvecA[l + 3];
    ccea:	0089      	lsls	r1, r1, #2
    ccec:	4680      	mov	r8, r0
    ccee:	5070      	str	r0, [r6, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:513 (discriminator 1)
				// with the exception of fmatA[6][6] which will sum to the number of measurements
				// and remembering that fvecA[6] equals 1.0F
				// update the right hand column [6] of fmatA except for fmatA[6][6]
				for (m = 0; m < 6; m++)
				{
					pthisMagCal->fmatA[m][6] += pthisMagCal->fvecA[m];
    ccf0:	58b0      	ldr	r0, [r6, r2]
    ccf2:	4651      	mov	r1, sl
    ccf4:	f7f3 fcfe 	bl	6f4 <__aeabi_fadd>
    ccf8:	23d4      	movs	r3, #212	; 0xd4
    ccfa:	50f0      	str	r0, [r6, r3]
    ccfc:	21fc      	movs	r1, #252	; 0xfc
    ccfe:	5870      	ldr	r0, [r6, r1]
    cd00:	4649      	mov	r1, r9
    cd02:	f7f3 fcf7 	bl	6f4 <__aeabi_fadd>
    cd06:	22fc      	movs	r2, #252	; 0xfc
    cd08:	2392      	movs	r3, #146	; 0x92
    cd0a:	50b0      	str	r0, [r6, r2]
    cd0c:	005b      	lsls	r3, r3, #1
    cd0e:	58f0      	ldr	r0, [r6, r3]
    cd10:	4641      	mov	r1, r8
    cd12:	4699      	mov	r9, r3
    cd14:	f7f3 fcee 	bl	6f4 <__aeabi_fadd>
    cd18:	464b      	mov	r3, r9
    cd1a:	50f0      	str	r0, [r6, r3]
    cd1c:	23a6      	movs	r3, #166	; 0xa6
    cd1e:	005b      	lsls	r3, r3, #1
    cd20:	58f0      	ldr	r0, [r6, r3]
    cd22:	1c39      	adds	r1, r7, #0
    cd24:	4698      	mov	r8, r3
    cd26:	f7f3 fce5 	bl	6f4 <__aeabi_fadd>
    cd2a:	27ba      	movs	r7, #186	; 0xba
    cd2c:	4641      	mov	r1, r8
    cd2e:	5070      	str	r0, [r6, r1]
    cd30:	007f      	lsls	r7, r7, #1
    cd32:	59f0      	ldr	r0, [r6, r7]
    cd34:	1c29      	adds	r1, r5, #0
    cd36:	f7f3 fcdd 	bl	6f4 <__aeabi_fadd>
    cd3a:	25ce      	movs	r5, #206	; 0xce
    cd3c:	51f0      	str	r0, [r6, r7]
    cd3e:	006d      	lsls	r5, r5, #1
    cd40:	5970      	ldr	r0, [r6, r5]
    cd42:	1c21      	adds	r1, r4, #0
    cd44:	f7f3 fcd6 	bl	6f4 <__aeabi_fadd>
    cd48:	9a08      	ldr	r2, [sp, #32]
    cd4a:	2300      	movs	r3, #0
    cd4c:	5170      	str	r0, [r6, r5]
    cd4e:	4693      	mov	fp, r2
    cd50:	469a      	mov	sl, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:520 (discriminator 1)
				// update the on and above diagonal terms except for right hand column 6
				for (m = 0; m < 6; m++)
				{
					for (n = m; n < 6; n++)
					{
						pthisMagCal->fmatA[m][n] += pthisMagCal->fvecA[m] * pthisMagCal->fvecA[n];
    cd52:	27bc      	movs	r7, #188	; 0xbc
    cd54:	465a      	mov	r2, fp
    cd56:	6812      	ldr	r2, [r2, #0]
    cd58:	4651      	mov	r1, sl
    cd5a:	4655      	mov	r5, sl
    cd5c:	b2cc      	uxtb	r4, r1
    cd5e:	4691      	mov	r9, r2
    cd60:	1c11      	adds	r1, r2, #0
    cd62:	00aa      	lsls	r2, r5, #2
    cd64:	4452      	add	r2, sl
    cd66:	0052      	lsls	r2, r2, #1
    cd68:	b263      	sxtb	r3, r4
    cd6a:	4690      	mov	r8, r2
    cd6c:	e007      	b.n	cd7e <fUpdateCalibration7EIG+0x1de>
    cd6e:	46c0      	nop			; (mov r8, r8)
    cd70:	42480000 	.word	0x42480000
    cd74:	1c1a      	adds	r2, r3, #0
    cd76:	32f6      	adds	r2, #246	; 0xf6
    cd78:	0092      	lsls	r2, r2, #2
    cd7a:	18b2      	adds	r2, r6, r2
    cd7c:	6851      	ldr	r1, [r2, #4]
    cd7e:	4443      	add	r3, r8
    cd80:	009b      	lsls	r3, r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:520 (discriminator 2)
    cd82:	4648      	mov	r0, r9
    cd84:	18f5      	adds	r5, r6, r3
    cd86:	f7f4 f805 	bl	d94 <__aeabi_fmul>
    cd8a:	1c01      	adds	r1, r0, #0
    cd8c:	59e8      	ldr	r0, [r5, r7]
    cd8e:	f7f3 fcb1 	bl	6f4 <__aeabi_fadd>
    cd92:	3401      	adds	r4, #1
    cd94:	b2e4      	uxtb	r4, r4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:518 (discriminator 2)
					pthisMagCal->fmatA[m][6] += pthisMagCal->fvecA[m];
				}
				// update the on and above diagonal terms except for right hand column 6
				for (m = 0; m < 6; m++)
				{
					for (n = m; n < 6; n++)
    cd96:	b263      	sxtb	r3, r4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:520 (discriminator 2)
					{
						pthisMagCal->fmatA[m][n] += pthisMagCal->fvecA[m] * pthisMagCal->fvecA[n];
    cd98:	51e8      	str	r0, [r5, r7]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:518 (discriminator 2)
					pthisMagCal->fmatA[m][6] += pthisMagCal->fvecA[m];
				}
				// update the on and above diagonal terms except for right hand column 6
				for (m = 0; m < 6; m++)
				{
					for (n = m; n < 6; n++)
    cd9a:	2b05      	cmp	r3, #5
    cd9c:	ddea      	ble.n	cd74 <fUpdateCalibration7EIG+0x1d4>
    cd9e:	2401      	movs	r4, #1
    cda0:	44a2      	add	sl, r4
    cda2:	2504      	movs	r5, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:516
				for (m = 0; m < 6; m++)
				{
					pthisMagCal->fmatA[m][6] += pthisMagCal->fvecA[m];
				}
				// update the on and above diagonal terms except for right hand column 6
				for (m = 0; m < 6; m++)
    cda4:	4650      	mov	r0, sl
    cda6:	44ab      	add	fp, r5
    cda8:	2806      	cmp	r0, #6
    cdaa:	d1d3      	bne.n	cd54 <fUpdateCalibration7EIG+0x1b4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:525
						pthisMagCal->fmatA[m][n] += pthisMagCal->fvecA[m] * pthisMagCal->fvecA[n];
					}
				}

				// increment the measurement counter for the next iteration
				iCount++;
    cdac:	9b05      	ldr	r3, [sp, #20]
    cdae:	3301      	adds	r3, #1
    cdb0:	b29b      	uxth	r3, r3
    cdb2:	9305      	str	r3, [sp, #20]
    cdb4:	9d03      	ldr	r5, [sp, #12]
    cdb6:	9c04      	ldr	r4, [sp, #16]
    cdb8:	3502      	adds	r5, #2
    cdba:	9503      	str	r5, [sp, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:487

	// place from MINEQUATIONS to MAXEQUATIONS entries into product matrix fmatA
	iCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
	{
		for (k = 0; k < MAGBUFFSIZEY; k++)
    cdbc:	9d07      	ldr	r5, [sp, #28]
    cdbe:	3404      	adds	r4, #4
    cdc0:	9404      	str	r4, [sp, #16]
    cdc2:	42ac      	cmp	r4, r5
    cdc4:	d000      	beq.n	cdc8 <fUpdateCalibration7EIG+0x228>
    cdc6:	e739      	b.n	cc3c <fUpdateCalibration7EIG+0x9c>
    cdc8:	3460      	adds	r4, #96	; 0x60
    cdca:	9407      	str	r4, [sp, #28]
    cdcc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:485
		}
	}

	// place from MINEQUATIONS to MAXEQUATIONS entries into product matrix fmatA
	iCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
    cdce:	9d07      	ldr	r5, [sp, #28]
    cdd0:	3430      	adds	r4, #48	; 0x30
    cdd2:	940d      	str	r4, [sp, #52]	; 0x34
    cdd4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    cdd6:	42a5      	cmp	r5, r4
    cdd8:	d000      	beq.n	cddc <fUpdateCalibration7EIG+0x23c>
    cdda:	e72a      	b.n	cc32 <fUpdateCalibration7EIG+0x92>
    cddc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    cdde:	ad10      	add	r5, sp, #64	; 0x40
    cde0:	802c      	strh	r4, [r5, #0]
    cde2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    cde4:	2542      	movs	r5, #66	; 0x42
    cde6:	446d      	add	r5, sp
    cde8:	802c      	strh	r4, [r5, #0]
    cdea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    cdec:	ad11      	add	r5, sp, #68	; 0x44
    cdee:	802c      	strh	r4, [r5, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:531
			}
		}
	}

	// finally set the last element fmatA[6][6] to the number of measurements
	pthisMagCal->fmatA[6][6] = (float) iCount;
    cdf0:	9d05      	ldr	r5, [sp, #20]
    cdf2:	46b3      	mov	fp, r6
    cdf4:	b228      	sxth	r0, r5
    cdf6:	f7f4 fa8d 	bl	1314 <__aeabi_i2f>
    cdfa:	23e2      	movs	r3, #226	; 0xe2
    cdfc:	005b      	lsls	r3, r3, #1
    cdfe:	50f0      	str	r0, [r6, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:534

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;
    ce00:	9d05      	ldr	r5, [sp, #20]
    ce02:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    ce04:	4bdb      	ldr	r3, [pc, #876]	; (d174 <fUpdateCalibration7EIG+0x5d4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:541
	// copy the above diagonal elements of fmatA to below the diagonal
	for (m = 1; m < 7; m++)
	{
		for (n = 0; n < m; n++)
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    ce06:	20bc      	movs	r0, #188	; 0xbc
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:534

	// finally set the last element fmatA[6][6] to the number of measurements
	pthisMagCal->fmatA[6][6] = (float) iCount;

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;
    ce08:	52e5      	strh	r5, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:541
	// copy the above diagonal elements of fmatA to below the diagonal
	for (m = 1; m < 7; m++)
	{
		for (n = 0; n < m; n++)
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    ce0a:	259a      	movs	r5, #154	; 0x9a
    ce0c:	24ae      	movs	r4, #174	; 0xae
    ce0e:	2686      	movs	r6, #134	; 0x86
    ce10:	006d      	lsls	r5, r5, #1
    ce12:	0064      	lsls	r4, r4, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:537

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of fmatA to below the diagonal
	for (m = 1; m < 7; m++)
    ce14:	2201      	movs	r2, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:541
	{
		for (n = 0; n < m; n++)
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    ce16:	4684      	mov	ip, r0
    ce18:	27e4      	movs	r7, #228	; 0xe4
    ce1a:	0076      	lsls	r6, r6, #1
    ce1c:	46a9      	mov	r9, r5
    ce1e:	46a2      	mov	sl, r4
    ce20:	b253      	sxtb	r3, r2
    ce22:	0099      	lsls	r1, r3, #2
    ce24:	465c      	mov	r4, fp
    ce26:	1860      	adds	r0, r4, r1
    ce28:	4665      	mov	r5, ip
    ce2a:	18c9      	adds	r1, r1, r3
    ce2c:	5945      	ldr	r5, [r0, r5]
    ce2e:	00c9      	lsls	r1, r1, #3
    ce30:	4459      	add	r1, fp
    ce32:	24bc      	movs	r4, #188	; 0xbc
    ce34:	5065      	str	r5, [r4, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:539
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of fmatA to below the diagonal
	for (m = 1; m < 7; m++)
	{
		for (n = 0; n < m; n++)
    ce36:	2b01      	cmp	r3, #1
    ce38:	d100      	bne.n	ce3c <fUpdateCalibration7EIG+0x29c>
    ce3a:	e197      	b.n	d16c <fUpdateCalibration7EIG+0x5cc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:541
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    ce3c:	59c4      	ldr	r4, [r0, r7]
    ce3e:	25c0      	movs	r5, #192	; 0xc0
    ce40:	506c      	str	r4, [r5, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:539
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of fmatA to below the diagonal
	for (m = 1; m < 7; m++)
	{
		for (n = 0; n < m; n++)
    ce42:	2b02      	cmp	r3, #2
    ce44:	d100      	bne.n	ce48 <fUpdateCalibration7EIG+0x2a8>
    ce46:	e191      	b.n	d16c <fUpdateCalibration7EIG+0x5cc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:541
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    ce48:	5984      	ldr	r4, [r0, r6]
    ce4a:	25c4      	movs	r5, #196	; 0xc4
    ce4c:	506c      	str	r4, [r5, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:539
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of fmatA to below the diagonal
	for (m = 1; m < 7; m++)
	{
		for (n = 0; n < m; n++)
    ce4e:	2b03      	cmp	r3, #3
    ce50:	d100      	bne.n	ce54 <fUpdateCalibration7EIG+0x2b4>
    ce52:	e18b      	b.n	d16c <fUpdateCalibration7EIG+0x5cc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:541
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    ce54:	464d      	mov	r5, r9
    ce56:	5945      	ldr	r5, [r0, r5]
    ce58:	24c8      	movs	r4, #200	; 0xc8
    ce5a:	5065      	str	r5, [r4, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:539
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of fmatA to below the diagonal
	for (m = 1; m < 7; m++)
	{
		for (n = 0; n < m; n++)
    ce5c:	2b04      	cmp	r3, #4
    ce5e:	d100      	bne.n	ce62 <fUpdateCalibration7EIG+0x2c2>
    ce60:	e184      	b.n	d16c <fUpdateCalibration7EIG+0x5cc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:541
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    ce62:	4655      	mov	r5, sl
    ce64:	5940      	ldr	r0, [r0, r5]
    ce66:	31c8      	adds	r1, #200	; 0xc8
    ce68:	6048      	str	r0, [r1, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:539
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of fmatA to below the diagonal
	for (m = 1; m < 7; m++)
	{
		for (n = 0; n < m; n++)
    ce6a:	2b06      	cmp	r3, #6
    ce6c:	d000      	beq.n	ce70 <fUpdateCalibration7EIG+0x2d0>
    ce6e:	e17d      	b.n	d16c <fUpdateCalibration7EIG+0x5cc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:541
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    ce70:	20cc      	movs	r0, #204	; 0xcc
    ce72:	0040      	lsls	r0, r0, #1
    ce74:	1c03      	adds	r3, r0, #0
    ce76:	21de      	movs	r1, #222	; 0xde
    ce78:	445b      	add	r3, fp
    ce7a:	0049      	lsls	r1, r1, #1
    ce7c:	685a      	ldr	r2, [r3, #4]
    ce7e:	1c0b      	adds	r3, r1, #0
    ce80:	445b      	add	r3, fp
    ce82:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:546
		}
	}

	// set tmpA7x1 to the unsorted eigenvalues and fmatB to the unsorted eigenvectors of fmatA
	eigencompute(pthisMagCal->fmatA, pthisMagCal->fvecA, pthisMagCal->fmatB, 7);
    ce84:	2393      	movs	r3, #147	; 0x93
    ce86:	009b      	lsls	r3, r3, #2
    ce88:	1c1a      	adds	r2, r3, #0
    ce8a:	4658      	mov	r0, fp
    ce8c:	30bc      	adds	r0, #188	; 0xbc
    ce8e:	9908      	ldr	r1, [sp, #32]
    ce90:	445a      	add	r2, fp
    ce92:	2307      	movs	r3, #7
    ce94:	f000 ffe0 	bl	de58 <eigencompute>
    ce98:	23f7      	movs	r3, #247	; 0xf7
    ce9a:	009b      	lsls	r3, r3, #2
    ce9c:	465c      	mov	r4, fp
    ce9e:	58e5      	ldr	r5, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:552

	// find the smallest eigenvalue
	j = 0;
	for (i = 1; i < 7; i++)
	{
		if (pthisMagCal->fvecA[i] < pthisMagCal->fvecA[j])
    cea0:	23f8      	movs	r3, #248	; 0xf8
    cea2:	009b      	lsls	r3, r3, #2
    cea4:	58e4      	ldr	r4, [r4, r3]
    cea6:	1c29      	adds	r1, r5, #0
    cea8:	1c20      	adds	r0, r4, #0
    ceaa:	f7f3 fbfb 	bl	6a4 <__aeabi_fcmplt>
    ceae:	1c06      	adds	r6, r0, #0
    ceb0:	1e73      	subs	r3, r6, #1
    ceb2:	419e      	sbcs	r6, r3
    ceb4:	2800      	cmp	r0, #0
    ceb6:	d100      	bne.n	ceba <fUpdateCalibration7EIG+0x31a>
    ceb8:	1c2c      	adds	r4, r5, #0
    ceba:	23f9      	movs	r3, #249	; 0xf9
    cebc:	009b      	lsls	r3, r3, #2
    cebe:	4658      	mov	r0, fp
    cec0:	58c5      	ldr	r5, [r0, r3]
    cec2:	1c21      	adds	r1, r4, #0
    cec4:	1c28      	adds	r0, r5, #0
    cec6:	f7f3 fbed 	bl	6a4 <__aeabi_fcmplt>
    ceca:	2702      	movs	r7, #2
    cecc:	2800      	cmp	r0, #0
    cece:	d100      	bne.n	ced2 <fUpdateCalibration7EIG+0x332>
    ced0:	1c37      	adds	r7, r6, #0
    ced2:	1c28      	adds	r0, r5, #0
    ced4:	1c21      	adds	r1, r4, #0
    ced6:	b2ff      	uxtb	r7, r7
    ced8:	f7f3 fbe4 	bl	6a4 <__aeabi_fcmplt>
    cedc:	2800      	cmp	r0, #0
    cede:	d100      	bne.n	cee2 <fUpdateCalibration7EIG+0x342>
    cee0:	1c25      	adds	r5, r4, #0
    cee2:	23fa      	movs	r3, #250	; 0xfa
    cee4:	009b      	lsls	r3, r3, #2
    cee6:	4659      	mov	r1, fp
    cee8:	58cc      	ldr	r4, [r1, r3]
    ceea:	1c29      	adds	r1, r5, #0
    ceec:	1c20      	adds	r0, r4, #0
    ceee:	f7f3 fbd9 	bl	6a4 <__aeabi_fcmplt>
    cef2:	2603      	movs	r6, #3
    cef4:	2800      	cmp	r0, #0
    cef6:	d100      	bne.n	cefa <fUpdateCalibration7EIG+0x35a>
    cef8:	1c3e      	adds	r6, r7, #0
    cefa:	1c20      	adds	r0, r4, #0
    cefc:	1c29      	adds	r1, r5, #0
    cefe:	b2f6      	uxtb	r6, r6
    cf00:	f7f3 fbd0 	bl	6a4 <__aeabi_fcmplt>
    cf04:	2800      	cmp	r0, #0
    cf06:	d100      	bne.n	cf0a <fUpdateCalibration7EIG+0x36a>
    cf08:	1c2c      	adds	r4, r5, #0
    cf0a:	23fb      	movs	r3, #251	; 0xfb
    cf0c:	009b      	lsls	r3, r3, #2
    cf0e:	465a      	mov	r2, fp
    cf10:	58d5      	ldr	r5, [r2, r3]
    cf12:	1c21      	adds	r1, r4, #0
    cf14:	1c28      	adds	r0, r5, #0
    cf16:	f7f3 fbc5 	bl	6a4 <__aeabi_fcmplt>
    cf1a:	2704      	movs	r7, #4
    cf1c:	2800      	cmp	r0, #0
    cf1e:	d100      	bne.n	cf22 <fUpdateCalibration7EIG+0x382>
    cf20:	1c37      	adds	r7, r6, #0
    cf22:	1c28      	adds	r0, r5, #0
    cf24:	1c21      	adds	r1, r4, #0
    cf26:	b2ff      	uxtb	r7, r7
    cf28:	f7f3 fbbc 	bl	6a4 <__aeabi_fcmplt>
    cf2c:	2800      	cmp	r0, #0
    cf2e:	d100      	bne.n	cf32 <fUpdateCalibration7EIG+0x392>
    cf30:	1c25      	adds	r5, r4, #0
    cf32:	23fc      	movs	r3, #252	; 0xfc
    cf34:	009b      	lsls	r3, r3, #2
    cf36:	465c      	mov	r4, fp
    cf38:	58e6      	ldr	r6, [r4, r3]
    cf3a:	1c29      	adds	r1, r5, #0
    cf3c:	1c30      	adds	r0, r6, #0
    cf3e:	f7f3 fbb1 	bl	6a4 <__aeabi_fcmplt>
    cf42:	1c33      	adds	r3, r6, #0
    cf44:	2800      	cmp	r0, #0
    cf46:	d100      	bne.n	cf4a <fUpdateCalibration7EIG+0x3aa>
    cf48:	1c2b      	adds	r3, r5, #0
    cf4a:	1c18      	adds	r0, r3, #0
    cf4c:	23fd      	movs	r3, #253	; 0xfd
    cf4e:	009b      	lsls	r3, r3, #2
    cf50:	465a      	mov	r2, fp
    cf52:	58d1      	ldr	r1, [r2, r3]
    cf54:	f7f3 fbba 	bl	6cc <__aeabi_fcmpgt>
    cf58:	2406      	movs	r4, #6
    cf5a:	2800      	cmp	r0, #0
    cf5c:	d108      	bne.n	cf70 <fUpdateCalibration7EIG+0x3d0>
    cf5e:	1c30      	adds	r0, r6, #0
    cf60:	1c29      	adds	r1, r5, #0
    cf62:	f7f3 fb9f 	bl	6a4 <__aeabi_fcmplt>
    cf66:	2405      	movs	r4, #5
    cf68:	2800      	cmp	r0, #0
    cf6a:	d100      	bne.n	cf6e <fUpdateCalibration7EIG+0x3ce>
    cf6c:	1c3c      	adds	r4, r7, #0
    cf6e:	b264      	sxtb	r4, r4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:560
		}
	}

	// set ellipsoid matrix A to the solution vector with smallest eigenvalue, compute its determinant
	// and the hard iron offset (scaled and offset)
	f3x3matrixAeqScalar(pthisMagCal->fA, 0.0F);
    cf70:	465e      	mov	r6, fp
    cf72:	3674      	adds	r6, #116	; 0x74
    cf74:	1c30      	adds	r0, r6, #0
    cf76:	2100      	movs	r1, #0
    cf78:	f000 fe0a 	bl	db90 <f3x3matrixAeqScalar>
    cf7c:	00a4      	lsls	r4, r4, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:564
	det = 1.0F;
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->fA[l][l] = pthisMagCal->fmatB[l][j];
    cf7e:	2393      	movs	r3, #147	; 0x93
    cf80:	445c      	add	r4, fp
    cf82:	009b      	lsls	r3, r3, #2
    cf84:	58e7      	ldr	r7, [r4, r3]
    cf86:	465b      	mov	r3, fp
    cf88:	675f      	str	r7, [r3, #116]	; 0x74
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:566
		det *= pthisMagCal->fA[l][l];
		pthisMagCal->ftrV[l] = -0.5F * pthisMagCal->fmatB[l + 3][j] / pthisMagCal->fA[l][l];
    cf8a:	23b1      	movs	r3, #177	; 0xb1
    cf8c:	009b      	lsls	r3, r3, #2
    cf8e:	21bf      	movs	r1, #191	; 0xbf
    cf90:	58e0      	ldr	r0, [r4, r3]
    cf92:	0609      	lsls	r1, r1, #24
    cf94:	f7f3 fefe 	bl	d94 <__aeabi_fmul>
    cf98:	1c39      	adds	r1, r7, #0
    cf9a:	f7f3 fd17 	bl	9cc <__aeabi_fdiv>
    cf9e:	465d      	mov	r5, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:564
	// and the hard iron offset (scaled and offset)
	f3x3matrixAeqScalar(pthisMagCal->fA, 0.0F);
	det = 1.0F;
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->fA[l][l] = pthisMagCal->fmatB[l][j];
    cfa0:	239d      	movs	r3, #157	; 0x9d
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:566
		det *= pthisMagCal->fA[l][l];
		pthisMagCal->ftrV[l] = -0.5F * pthisMagCal->fmatB[l + 3][j] / pthisMagCal->fA[l][l];
    cfa2:	63e8      	str	r0, [r5, #60]	; 0x3c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:564
	// and the hard iron offset (scaled and offset)
	f3x3matrixAeqScalar(pthisMagCal->fA, 0.0F);
	det = 1.0F;
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->fA[l][l] = pthisMagCal->fmatB[l][j];
    cfa4:	009b      	lsls	r3, r3, #2
    cfa6:	58e5      	ldr	r5, [r4, r3]
    cfa8:	4658      	mov	r0, fp
    cfaa:	2384      	movs	r3, #132	; 0x84
    cfac:	50c5      	str	r5, [r0, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:565
		det *= pthisMagCal->fA[l][l];
    cfae:	1c29      	adds	r1, r5, #0
    cfb0:	1c38      	adds	r0, r7, #0
    cfb2:	f7f3 feef 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:566
		pthisMagCal->ftrV[l] = -0.5F * pthisMagCal->fmatB[l + 3][j] / pthisMagCal->fA[l][l];
    cfb6:	23bb      	movs	r3, #187	; 0xbb
    cfb8:	009b      	lsls	r3, r3, #2
    cfba:	21bf      	movs	r1, #191	; 0xbf
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:565
	f3x3matrixAeqScalar(pthisMagCal->fA, 0.0F);
	det = 1.0F;
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->fA[l][l] = pthisMagCal->fmatB[l][j];
		det *= pthisMagCal->fA[l][l];
    cfbc:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:566
		pthisMagCal->ftrV[l] = -0.5F * pthisMagCal->fmatB[l + 3][j] / pthisMagCal->fA[l][l];
    cfbe:	0609      	lsls	r1, r1, #24
    cfc0:	58e0      	ldr	r0, [r4, r3]
    cfc2:	f7f3 fee7 	bl	d94 <__aeabi_fmul>
    cfc6:	1c29      	adds	r1, r5, #0
    cfc8:	f7f3 fd00 	bl	9cc <__aeabi_fdiv>
    cfcc:	4659      	mov	r1, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:564
	// and the hard iron offset (scaled and offset)
	f3x3matrixAeqScalar(pthisMagCal->fA, 0.0F);
	det = 1.0F;
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->fA[l][l] = pthisMagCal->fmatB[l][j];
    cfce:	23a7      	movs	r3, #167	; 0xa7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:566
		det *= pthisMagCal->fA[l][l];
		pthisMagCal->ftrV[l] = -0.5F * pthisMagCal->fmatB[l + 3][j] / pthisMagCal->fA[l][l];
    cfd0:	6408      	str	r0, [r1, #64]	; 0x40
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:564
	// and the hard iron offset (scaled and offset)
	f3x3matrixAeqScalar(pthisMagCal->fA, 0.0F);
	det = 1.0F;
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->fA[l][l] = pthisMagCal->fmatB[l][j];
    cfd2:	009b      	lsls	r3, r3, #2
    cfd4:	58e7      	ldr	r7, [r4, r3]
    cfd6:	2394      	movs	r3, #148	; 0x94
    cfd8:	50cf      	str	r7, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:565
		det *= pthisMagCal->fA[l][l];
    cfda:	1c38      	adds	r0, r7, #0
    cfdc:	4641      	mov	r1, r8
    cfde:	f7f3 fed9 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:566
		pthisMagCal->ftrV[l] = -0.5F * pthisMagCal->fmatB[l + 3][j] / pthisMagCal->fA[l][l];
    cfe2:	23c5      	movs	r3, #197	; 0xc5
    cfe4:	009b      	lsls	r3, r3, #2
    cfe6:	21bf      	movs	r1, #191	; 0xbf
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:565
	f3x3matrixAeqScalar(pthisMagCal->fA, 0.0F);
	det = 1.0F;
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->fA[l][l] = pthisMagCal->fmatB[l][j];
		det *= pthisMagCal->fA[l][l];
    cfe8:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:566
		pthisMagCal->ftrV[l] = -0.5F * pthisMagCal->fmatB[l + 3][j] / pthisMagCal->fA[l][l];
    cfea:	0609      	lsls	r1, r1, #24
    cfec:	58e0      	ldr	r0, [r4, r3]
    cfee:	f7f3 fed1 	bl	d94 <__aeabi_fmul>
    cff2:	1c39      	adds	r1, r7, #0
    cff4:	f7f3 fcea 	bl	9cc <__aeabi_fdiv>
    cff8:	465a      	mov	r2, fp
    cffa:	6450      	str	r0, [r2, #68]	; 0x44
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:570
	}

	// negate A if it has negative determinant
	if (det < 0.0F)
    cffc:	2100      	movs	r1, #0
    cffe:	1c28      	adds	r0, r5, #0
    d000:	f7f3 fb50 	bl	6a4 <__aeabi_fcmplt>
    d004:	2800      	cmp	r0, #0
    d006:	d000      	beq.n	d00a <fUpdateCalibration7EIG+0x46a>
    d008:	e0a4      	b.n	d154 <fUpdateCalibration7EIG+0x5b4>
    d00a:	23cf      	movs	r3, #207	; 0xcf
    d00c:	009b      	lsls	r3, r3, #2
    d00e:	58e7      	ldr	r7, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:581

	// set ftmp to the square of the trial geomagnetic field strength B (counts times FMATRIXSCALING)
	ftmp = -pthisMagCal->fmatB[6][j];
	for (l = X; l <= Z; l++)
	{
		ftmp += pthisMagCal->fA[l][l] * pthisMagCal->ftrV[l] * pthisMagCal->ftrV[l];
    d010:	465a      	mov	r2, fp
    d012:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    d014:	465b      	mov	r3, fp
    d016:	6f59      	ldr	r1, [r3, #116]	; 0x74
    d018:	1c10      	adds	r0, r2, #0
    d01a:	4690      	mov	r8, r2
    d01c:	f7f3 feba 	bl	d94 <__aeabi_fmul>
    d020:	1c01      	adds	r1, r0, #0
    d022:	4640      	mov	r0, r8
    d024:	f7f3 feb6 	bl	d94 <__aeabi_fmul>
    d028:	1c39      	adds	r1, r7, #0
    d02a:	f7f3 ffdd 	bl	fe8 <__aeabi_fsub>
    d02e:	4680      	mov	r8, r0
    d030:	4658      	mov	r0, fp
    d032:	6c07      	ldr	r7, [r0, #64]	; 0x40
    d034:	2384      	movs	r3, #132	; 0x84
    d036:	465a      	mov	r2, fp
    d038:	58d1      	ldr	r1, [r2, r3]
    d03a:	1c38      	adds	r0, r7, #0
    d03c:	f7f3 feaa 	bl	d94 <__aeabi_fmul>
    d040:	1c01      	adds	r1, r0, #0
    d042:	1c38      	adds	r0, r7, #0
    d044:	f7f3 fea6 	bl	d94 <__aeabi_fmul>
    d048:	1c01      	adds	r1, r0, #0
    d04a:	4640      	mov	r0, r8
    d04c:	f7f3 fb52 	bl	6f4 <__aeabi_fadd>
    d050:	465b      	mov	r3, fp
    d052:	6c5f      	ldr	r7, [r3, #68]	; 0x44
    d054:	465a      	mov	r2, fp
    d056:	2394      	movs	r3, #148	; 0x94
    d058:	58d1      	ldr	r1, [r2, r3]
    d05a:	4680      	mov	r8, r0
    d05c:	1c38      	adds	r0, r7, #0
    d05e:	f7f3 fe99 	bl	d94 <__aeabi_fmul>
    d062:	1c01      	adds	r1, r0, #0
    d064:	1c38      	adds	r0, r7, #0
    d066:	f7f3 fe95 	bl	d94 <__aeabi_fmul>
    d06a:	4641      	mov	r1, r8
    d06c:	f7f3 fb42 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:585
	}

	// calculate the trial normalized fit error as a percentage
	pthisMagCal->ftrFitErrorpc = 50.0F * sqrtf(fabs(pthisMagCal->fvecA[j]) / (float) pthisMagBuffer->iMagBufferCount) / fabs(ftmp);
    d070:	23f7      	movs	r3, #247	; 0xf7
    d072:	009b      	lsls	r3, r3, #2
    d074:	990c      	ldr	r1, [sp, #48]	; 0x30
    d076:	58e4      	ldr	r4, [r4, r3]
    d078:	4b3e      	ldr	r3, [pc, #248]	; (d174 <fUpdateCalibration7EIG+0x5d4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:581

	// set ftmp to the square of the trial geomagnetic field strength B (counts times FMATRIXSCALING)
	ftmp = -pthisMagCal->fmatB[6][j];
	for (l = X; l <= Z; l++)
	{
		ftmp += pthisMagCal->fA[l][l] * pthisMagCal->ftrV[l] * pthisMagCal->ftrV[l];
    d07a:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:585
	}

	// calculate the trial normalized fit error as a percentage
	pthisMagCal->ftrFitErrorpc = 50.0F * sqrtf(fabs(pthisMagCal->fvecA[j]) / (float) pthisMagBuffer->iMagBufferCount) / fabs(ftmp);
    d07c:	5ec8      	ldrsh	r0, [r1, r3]
    d07e:	f7f4 f949 	bl	1314 <__aeabi_i2f>
    d082:	0064      	lsls	r4, r4, #1
    d084:	0864      	lsrs	r4, r4, #1
    d086:	1c01      	adds	r1, r0, #0
    d088:	1c20      	adds	r0, r4, #0
    d08a:	f7f3 fc9f 	bl	9cc <__aeabi_fdiv>
    d08e:	007c      	lsls	r4, r7, #1
    d090:	f006 f9fe 	bl	13490 <sqrtf>
    d094:	0864      	lsrs	r4, r4, #1
    d096:	4938      	ldr	r1, [pc, #224]	; (d178 <fUpdateCalibration7EIG+0x5d8>)
    d098:	f7f3 fe7c 	bl	d94 <__aeabi_fmul>
    d09c:	1c21      	adds	r1, r4, #0
    d09e:	f7f3 fc95 	bl	9cc <__aeabi_fdiv>
    d0a2:	465a      	mov	r2, fp
    d0a4:	6710      	str	r0, [r2, #112]	; 0x70
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:588

	// normalize the ellipsoid matrix A to unit determinant
	f3x3matrixAeqAxScalar(pthisMagCal->fA, powf(det, -(ONETHIRD)));
    d0a6:	4935      	ldr	r1, [pc, #212]	; (d17c <fUpdateCalibration7EIG+0x5dc>)
    d0a8:	1c28      	adds	r0, r5, #0
    d0aa:	f006 f825 	bl	130f8 <powf>
    d0ae:	1c01      	adds	r1, r0, #0
    d0b0:	1c30      	adds	r0, r6, #0
    d0b2:	f000 fd77 	bl	dba4 <f3x3matrixAeqAxScalar>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:591

	// convert the geomagnetic field strength B into uT for normalized soft iron matrix A and normalize
	pthisMagCal->ftrB = sqrtf(fabs(ftmp)) * DEFAULTB * powf(det, -(ONESIXTH));
    d0b6:	1c20      	adds	r0, r4, #0
    d0b8:	f006 f9ea 	bl	13490 <sqrtf>
    d0bc:	4930      	ldr	r1, [pc, #192]	; (d180 <fUpdateCalibration7EIG+0x5e0>)
    d0be:	1c07      	adds	r7, r0, #0
    d0c0:	1c28      	adds	r0, r5, #0
    d0c2:	f006 f819 	bl	130f8 <powf>
    d0c6:	492c      	ldr	r1, [pc, #176]	; (d178 <fUpdateCalibration7EIG+0x5d8>)
    d0c8:	1c04      	adds	r4, r0, #0
    d0ca:	1c38      	adds	r0, r7, #0
    d0cc:	f7f3 fe62 	bl	d94 <__aeabi_fmul>
    d0d0:	1c21      	adds	r1, r4, #0
    d0d2:	f7f3 fe5f 	bl	d94 <__aeabi_fmul>
    d0d6:	465b      	mov	r3, fp
    d0d8:	66d8      	str	r0, [r3, #108]	; 0x6c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:594

	// compute trial invW from the square root of A also with normalized determinant and hard iron offset in uT
	f3x3matrixAeqI(pthisMagCal->ftrinvW);
    d0da:	4658      	mov	r0, fp
    d0dc:	3048      	adds	r0, #72	; 0x48
    d0de:	f000 fd49 	bl	db74 <f3x3matrixAeqI>
    d0e2:	1c35      	adds	r5, r6, #0
    d0e4:	465e      	mov	r6, fp
    d0e6:	363c      	adds	r6, #60	; 0x3c
    d0e8:	2400      	movs	r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:597 (discriminator 2)
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrinvW[l][l] = sqrtf(fabs(pthisMagCal->fA[l][l]));
    d0ea:	6829      	ldr	r1, [r5, #0]
    d0ec:	0048      	lsls	r0, r1, #1
    d0ee:	0840      	lsrs	r0, r0, #1
    d0f0:	f006 f9ce 	bl	13490 <sqrtf>
    d0f4:	1c2b      	adds	r3, r5, #0
    d0f6:	3b2c      	subs	r3, #44	; 0x2c
    d0f8:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:598 (discriminator 2)
		pthisMagCal->ftrV[l] = pthisMagCal->ftrV[l] * DEFAULTB + (float)iOffset[l] * pthisMag->fuTPerCount;
    d0fa:	491f      	ldr	r1, [pc, #124]	; (d178 <fUpdateCalibration7EIG+0x5d8>)
    d0fc:	6830      	ldr	r0, [r6, #0]
    d0fe:	f7f3 fe49 	bl	d94 <__aeabi_fmul>
    d102:	aa10      	add	r2, sp, #64	; 0x40
    d104:	1c07      	adds	r7, r0, #0
    d106:	5f10      	ldrsh	r0, [r2, r4]
    d108:	f7f4 f904 	bl	1314 <__aeabi_i2f>
    d10c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d10e:	3402      	adds	r4, #2
    d110:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    d112:	f7f3 fe3f 	bl	d94 <__aeabi_fmul>
    d116:	1c01      	adds	r1, r0, #0
    d118:	1c38      	adds	r0, r7, #0
    d11a:	f7f3 faeb 	bl	6f4 <__aeabi_fadd>
    d11e:	3510      	adds	r5, #16
    d120:	c601      	stmia	r6!, {r0}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:595 (discriminator 2)
	// convert the geomagnetic field strength B into uT for normalized soft iron matrix A and normalize
	pthisMagCal->ftrB = sqrtf(fabs(ftmp)) * DEFAULTB * powf(det, -(ONESIXTH));

	// compute trial invW from the square root of A also with normalized determinant and hard iron offset in uT
	f3x3matrixAeqI(pthisMagCal->ftrinvW);
	for (l = X; l <= Z; l++)
    d122:	2c06      	cmp	r4, #6
    d124:	d1e1      	bne.n	d0ea <fUpdateCalibration7EIG+0x54a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:602
		pthisMagCal->ftrinvW[l][l] = sqrtf(fabs(pthisMagCal->fA[l][l]));
		pthisMagCal->ftrV[l] = pthisMagCal->ftrV[l] * DEFAULTB + (float)iOffset[l] * pthisMag->fuTPerCount;
	}

	return;
}
    d126:	b013      	add	sp, #76	; 0x4c
    d128:	bc3c      	pop	{r2, r3, r4, r5}
    d12a:	4690      	mov	r8, r2
    d12c:	4699      	mov	r9, r3
    d12e:	46a2      	mov	sl, r4
    d130:	46ab      	mov	fp, r5
    d132:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d134:	2090      	movs	r0, #144	; 0x90
    d136:	00c0      	lsls	r0, r0, #3
    d138:	182b      	adds	r3, r5, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:496
				// use first valid magnetic buffer entry as offset estimate (bit counts)
				if (iCount == 0)
				{
					for (l = X; l <= Z; l++)
					{
						iOffset[l] = pthisMagBuffer->iBpFast[l][j][k];
    d13a:	881b      	ldrh	r3, [r3, #0]
    d13c:	2190      	movs	r1, #144	; 0x90
    d13e:	0089      	lsls	r1, r1, #2
    d140:	882c      	ldrh	r4, [r5, #0]
    d142:	930a      	str	r3, [sp, #40]	; 0x28
    d144:	186b      	adds	r3, r5, r1
    d146:	881b      	ldrh	r3, [r3, #0]
    d148:	9409      	str	r4, [sp, #36]	; 0x24
    d14a:	2400      	movs	r4, #0
    d14c:	930b      	str	r3, [sp, #44]	; 0x2c
    d14e:	1c25      	adds	r5, r4, #0
    d150:	1c27      	adds	r7, r4, #0
    d152:	e59d      	b.n	cc90 <fUpdateCalibration7EIG+0xf0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:572
	}

	// negate A if it has negative determinant
	if (det < 0.0F)
	{
		f3x3matrixAeqMinusA(pthisMagCal->fA);
    d154:	1c30      	adds	r0, r6, #0
    d156:	f000 fd55 	bl	dc04 <f3x3matrixAeqMinusA>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:573
		pthisMagCal->fmatB[6][j] = -pthisMagCal->fmatB[6][j];
    d15a:	23cf      	movs	r3, #207	; 0xcf
    d15c:	009b      	lsls	r3, r3, #2
    d15e:	58e0      	ldr	r0, [r4, r3]
    d160:	2180      	movs	r1, #128	; 0x80
    d162:	0609      	lsls	r1, r1, #24
    d164:	1847      	adds	r7, r0, r1
    d166:	50e7      	str	r7, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:574
		det = -det;
    d168:	186d      	adds	r5, r5, r1
    d16a:	e751      	b.n	d010 <fUpdateCalibration7EIG+0x470>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:537

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of fmatA to below the diagonal
	for (m = 1; m < 7; m++)
    d16c:	3201      	adds	r2, #1
    d16e:	b2d2      	uxtb	r2, r2
    d170:	e656      	b.n	ce20 <fUpdateCalibration7EIG+0x280>
    d172:	46c0      	nop			; (mov r8, r8)
    d174:	00000b56 	.word	0x00000b56
    d178:	42480000 	.word	0x42480000
    d17c:	beaaaaab 	.word	0xbeaaaaab
    d180:	be2aaaab 	.word	0xbe2aaaab

0000d184 <fUpdateCalibration10EIG>:
fUpdateCalibration10EIG():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:606
	return;
}

// 10 element calibration using direct eigen-decomposition
void fUpdateCalibration10EIG(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer, struct MagSensor *pthisMag)
{
    d184:	b5f0      	push	{r4, r5, r6, r7, lr}
    d186:	465f      	mov	r7, fp
    d188:	464d      	mov	r5, r9
    d18a:	4656      	mov	r6, sl
    d18c:	4644      	mov	r4, r8
    d18e:	b4f0      	push	{r4, r5, r6, r7}
    d190:	b099      	sub	sp, #100	; 0x64
    d192:	4683      	mov	fp, r0
    d194:	9112      	str	r1, [sp, #72]	; 0x48
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:616
	int16 iOffset[3];						// offset to remove large DC hard iron bias in matrix
	int16 iCount;							// number of measurements counted
	int8 i, j, k, l, m, n;					// loop counters

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;
    d196:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    d198:	498a      	ldr	r1, [pc, #552]	; (d3c4 <fUpdateCalibration10EIG+0x240>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:606
	return;
}

// 10 element calibration using direct eigen-decomposition
void fUpdateCalibration10EIG(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer, struct MagSensor *pthisMag)
{
    d19a:	9214      	str	r2, [sp, #80]	; 0x50
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:616
	int16 iOffset[3];						// offset to remove large DC hard iron bias in matrix
	int16 iCount;							// number of measurements counted
	int8 i, j, k, l, m, n;					// loop counters

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;
    d19c:	f7f3 fc16 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:619

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
    d1a0:	215a      	movs	r1, #90	; 0x5a
    d1a2:	2300      	movs	r3, #0
    d1a4:	4469      	add	r1, sp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:616
	int16 iOffset[3];						// offset to remove large DC hard iron bias in matrix
	int16 iCount;							// number of measurements counted
	int8 i, j, k, l, m, n;					// loop counters

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;
    d1a6:	900a      	str	r0, [sp, #40]	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:619

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
    d1a8:	aa16      	add	r2, sp, #88	; 0x58
    d1aa:	a817      	add	r0, sp, #92	; 0x5c
    d1ac:	8003      	strh	r3, [r0, #0]
    d1ae:	800b      	strh	r3, [r1, #0]
    d1b0:	8013      	strh	r3, [r2, #0]
    d1b2:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:626
	// zero the on and above diagonal elements of the 10x10 symmetric measurement matrix fmatA
	for (m = 0; m < 10; m++)
	{
		for (n = m; n < 10; n++)
		{
			pthisMagCal->fmatA[m][n] = 0.0F;
    d1b4:	2000      	movs	r0, #0
    d1b6:	465d      	mov	r5, fp
    d1b8:	008c      	lsls	r4, r1, #2
    d1ba:	b2cb      	uxtb	r3, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:626 (discriminator 1)
    d1bc:	1864      	adds	r4, r4, r1
    d1be:	b25a      	sxtb	r2, r3
    d1c0:	0064      	lsls	r4, r4, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:626 (discriminator 2)
    d1c2:	18a2      	adds	r2, r4, r2
    d1c4:	322e      	adds	r2, #46	; 0x2e
    d1c6:	0092      	lsls	r2, r2, #2
    d1c8:	3301      	adds	r3, #1
    d1ca:	18aa      	adds	r2, r5, r2
    d1cc:	b2db      	uxtb	r3, r3
    d1ce:	6050      	str	r0, [r2, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:624 (discriminator 2)
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;

	// zero the on and above diagonal elements of the 10x10 symmetric measurement matrix fmatA
	for (m = 0; m < 10; m++)
	{
		for (n = m; n < 10; n++)
    d1d0:	b25a      	sxtb	r2, r3
    d1d2:	2a09      	cmp	r2, #9
    d1d4:	ddf5      	ble.n	d1c2 <fUpdateCalibration10EIG+0x3e>
    d1d6:	3101      	adds	r1, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:622

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;

	// zero the on and above diagonal elements of the 10x10 symmetric measurement matrix fmatA
	for (m = 0; m < 10; m++)
    d1d8:	290a      	cmp	r1, #10
    d1da:	d1ed      	bne.n	d1b8 <fUpdateCalibration10EIG+0x34>
    d1dc:	ab16      	add	r3, sp, #88	; 0x58
    d1de:	881b      	ldrh	r3, [r3, #0]
    d1e0:	245a      	movs	r4, #90	; 0x5a
    d1e2:	930f      	str	r3, [sp, #60]	; 0x3c
    d1e4:	446c      	add	r4, sp
    d1e6:	8824      	ldrh	r4, [r4, #0]
    d1e8:	46ab      	mov	fp, r5
    d1ea:	9411      	str	r4, [sp, #68]	; 0x44
    d1ec:	ad17      	add	r5, sp, #92	; 0x5c
    d1ee:	882d      	ldrh	r5, [r5, #0]
    d1f0:	9c12      	ldr	r4, [sp, #72]	; 0x48
    d1f2:	9510      	str	r5, [sp, #64]	; 0x40
    d1f4:	25e4      	movs	r5, #228	; 0xe4
    d1f6:	00ed      	lsls	r5, r5, #3
    d1f8:	1965      	adds	r5, r4, r5
    d1fa:	950d      	str	r5, [sp, #52]	; 0x34
    d1fc:	25ba      	movs	r5, #186	; 0xba
    d1fe:	012d      	lsls	r5, r5, #4
    d200:	1965      	adds	r5, r4, r5
    d202:	9515      	str	r5, [sp, #84]	; 0x54
    d204:	25f7      	movs	r5, #247	; 0xf7
    d206:	9413      	str	r4, [sp, #76]	; 0x4c
    d208:	00ad      	lsls	r5, r5, #2
    d20a:	2400      	movs	r4, #0
    d20c:	9409      	str	r4, [sp, #36]	; 0x24
    d20e:	1c2c      	adds	r4, r5, #0
    d210:	445c      	add	r4, fp
    d212:	940e      	str	r4, [sp, #56]	; 0x38
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:619 (discriminator 1)

	// compute fscaling to reduce multiplications later
	fscaling = pthisMag->fuTPerCount / DEFAULTB;

	// the offsets are guaranteed to be set from the first element but to avoid compiler error
	iOffset[X] = iOffset[Y] = iOffset[Z] = 0;
    d214:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    d216:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    d218:	3c60      	subs	r4, #96	; 0x60
    d21a:	9408      	str	r4, [sp, #32]
    d21c:	9506      	str	r5, [sp, #24]
    d21e:	9d08      	ldr	r5, [sp, #32]
    d220:	465c      	mov	r4, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:636
	iCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
	{
		for (k = 0; k < MAGBUFFSIZEY; k++)
		{
			if (pthisMagBuffer->index[j][k] != -1)
    d222:	682d      	ldr	r5, [r5, #0]
    d224:	3501      	adds	r5, #1
    d226:	d100      	bne.n	d22a <fUpdateCalibration10EIG+0xa6>
    d228:	e0ee      	b.n	d408 <fUpdateCalibration10EIG+0x284>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:639
			{
				// use first valid magnetic buffer entry as estimate for offset to help solution (bit counts)
				if (iCount == 0)
    d22a:	9d09      	ldr	r5, [sp, #36]	; 0x24
    d22c:	2d00      	cmp	r5, #0
    d22e:	d101      	bne.n	d234 <fUpdateCalibration10EIG+0xb0>
    d230:	f000 fc5f 	bl	daf2 <fUpdateCalibration10EIG+0x96e>
    d234:	9d06      	ldr	r5, [sp, #24]
    d236:	2000      	movs	r0, #0
    d238:	5e28      	ldrsh	r0, [r5, r0]
    d23a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    d23c:	b22b      	sxth	r3, r5
    d23e:	1ac0      	subs	r0, r0, r3
    d240:	f7f4 f868 	bl	1314 <__aeabi_i2f>
    d244:	9d06      	ldr	r5, [sp, #24]
    d246:	1c07      	adds	r7, r0, #0
    d248:	2090      	movs	r0, #144	; 0x90
    d24a:	0080      	lsls	r0, r0, #2
    d24c:	182b      	adds	r3, r5, r0
    d24e:	9d11      	ldr	r5, [sp, #68]	; 0x44
    d250:	2100      	movs	r1, #0
    d252:	5e58      	ldrsh	r0, [r3, r1]
    d254:	b22b      	sxth	r3, r5
    d256:	1ac0      	subs	r0, r0, r3
    d258:	f7f4 f85c 	bl	1314 <__aeabi_i2f>
    d25c:	2190      	movs	r1, #144	; 0x90
    d25e:	1c05      	adds	r5, r0, #0
    d260:	9806      	ldr	r0, [sp, #24]
    d262:	00c9      	lsls	r1, r1, #3
    d264:	1843      	adds	r3, r0, r1
    d266:	9910      	ldr	r1, [sp, #64]	; 0x40
    d268:	2200      	movs	r2, #0
    d26a:	5e98      	ldrsh	r0, [r3, r2]
    d26c:	b20b      	sxth	r3, r1
    d26e:	1ac0      	subs	r0, r0, r3
    d270:	f7f4 f850 	bl	1314 <__aeabi_i2f>
    d274:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:650 (discriminator 1)
				}

				// apply the fixed offset and scaling and enter into fvecA[6-8]
				for (l = X; l <= Z; l++)
				{
					pthisMagCal->fvecA[l + 6] = (float)((int32)pthisMagBuffer->iBpFast[l][j][k] - (int32)iOffset[l]) * fscaling;
    d276:	1c39      	adds	r1, r7, #0
    d278:	980a      	ldr	r0, [sp, #40]	; 0x28
    d27a:	f7f3 fd8b 	bl	d94 <__aeabi_fmul>
    d27e:	21fd      	movs	r1, #253	; 0xfd
    d280:	0089      	lsls	r1, r1, #2
    d282:	4680      	mov	r8, r0
    d284:	5060      	str	r0, [r4, r1]
    d286:	990a      	ldr	r1, [sp, #40]	; 0x28
    d288:	1c28      	adds	r0, r5, #0
    d28a:	f7f3 fd83 	bl	d94 <__aeabi_fmul>
    d28e:	22fe      	movs	r2, #254	; 0xfe
    d290:	0092      	lsls	r2, r2, #2
    d292:	1c05      	adds	r5, r0, #0
    d294:	50a0      	str	r0, [r4, r2]
    d296:	1c31      	adds	r1, r6, #0
    d298:	980a      	ldr	r0, [sp, #40]	; 0x28
    d29a:	f7f3 fd7b 	bl	d94 <__aeabi_fmul>
    d29e:	23ff      	movs	r3, #255	; 0xff
    d2a0:	009b      	lsls	r3, r3, #2
    d2a2:	4683      	mov	fp, r0
    d2a4:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:654 (discriminator 1)
				}

				// compute measurement vector elements fvecA[0-5] from fvecA[6-8]
				pthisMagCal->fvecA[0] = pthisMagCal->fvecA[6] * pthisMagCal->fvecA[6];
    d2a6:	4641      	mov	r1, r8
    d2a8:	4640      	mov	r0, r8
    d2aa:	f7f3 fd73 	bl	d94 <__aeabi_fmul>
    d2ae:	21f7      	movs	r1, #247	; 0xf7
    d2b0:	0089      	lsls	r1, r1, #2
    d2b2:	5060      	str	r0, [r4, r1]
    d2b4:	9007      	str	r0, [sp, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:655 (discriminator 1)
				pthisMagCal->fvecA[1] = 2.0F * pthisMagCal->fvecA[6] * pthisMagCal->fvecA[7];
    d2b6:	4641      	mov	r1, r8
    d2b8:	4640      	mov	r0, r8
    d2ba:	f7f3 fa1b 	bl	6f4 <__aeabi_fadd>
    d2be:	1c29      	adds	r1, r5, #0
    d2c0:	1c06      	adds	r6, r0, #0
    d2c2:	f7f3 fd67 	bl	d94 <__aeabi_fmul>
    d2c6:	22f8      	movs	r2, #248	; 0xf8
    d2c8:	0092      	lsls	r2, r2, #2
    d2ca:	50a0      	str	r0, [r4, r2]
    d2cc:	4681      	mov	r9, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:656 (discriminator 1)
				pthisMagCal->fvecA[2] = 2.0F * pthisMagCal->fvecA[6] * pthisMagCal->fvecA[8];
    d2ce:	4659      	mov	r1, fp
    d2d0:	1c30      	adds	r0, r6, #0
    d2d2:	f7f3 fd5f 	bl	d94 <__aeabi_fmul>
    d2d6:	23f9      	movs	r3, #249	; 0xf9
    d2d8:	009b      	lsls	r3, r3, #2
    d2da:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:657 (discriminator 1)
				pthisMagCal->fvecA[3] = pthisMagCal->fvecA[7] * pthisMagCal->fvecA[7];
    d2dc:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:656 (discriminator 1)
				}

				// compute measurement vector elements fvecA[0-5] from fvecA[6-8]
				pthisMagCal->fvecA[0] = pthisMagCal->fvecA[6] * pthisMagCal->fvecA[6];
				pthisMagCal->fvecA[1] = 2.0F * pthisMagCal->fvecA[6] * pthisMagCal->fvecA[7];
				pthisMagCal->fvecA[2] = 2.0F * pthisMagCal->fvecA[6] * pthisMagCal->fvecA[8];
    d2de:	900b      	str	r0, [sp, #44]	; 0x2c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:657 (discriminator 1)
				pthisMagCal->fvecA[3] = pthisMagCal->fvecA[7] * pthisMagCal->fvecA[7];
    d2e0:	1c28      	adds	r0, r5, #0
    d2e2:	f7f3 fd57 	bl	d94 <__aeabi_fmul>
    d2e6:	1c07      	adds	r7, r0, #0
    d2e8:	20fa      	movs	r0, #250	; 0xfa
    d2ea:	0080      	lsls	r0, r0, #2
    d2ec:	5027      	str	r7, [r4, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:658 (discriminator 1)
				pthisMagCal->fvecA[4] = 2.0F * pthisMagCal->fvecA[7] * pthisMagCal->fvecA[8];
    d2ee:	1c29      	adds	r1, r5, #0
    d2f0:	1c28      	adds	r0, r5, #0
    d2f2:	f7f3 f9ff 	bl	6f4 <__aeabi_fadd>
    d2f6:	4659      	mov	r1, fp
    d2f8:	f7f3 fd4c 	bl	d94 <__aeabi_fmul>
    d2fc:	21fb      	movs	r1, #251	; 0xfb
    d2fe:	0089      	lsls	r1, r1, #2
    d300:	1c06      	adds	r6, r0, #0
    d302:	5060      	str	r0, [r4, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:659 (discriminator 1)
				pthisMagCal->fvecA[5] = pthisMagCal->fvecA[8] * pthisMagCal->fvecA[8];
    d304:	4659      	mov	r1, fp
    d306:	4658      	mov	r0, fp
    d308:	f7f3 fd44 	bl	d94 <__aeabi_fmul>
    d30c:	23fc      	movs	r3, #252	; 0xfc
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:666 (discriminator 1)
				// accumulate the on-and above-diagonal terms of fmatA=Sigma{fvecA^T * fvecA}
				// with the exception of fmatA[9][9] which equals the number of measurements
				// update the right hand column [9] of fmatA[0-8][9] ignoring fmatA[9][9]
				for (m = 0; m < 9; m++)
				{
					pthisMagCal->fmatA[m][9] += pthisMagCal->fvecA[m];
    d30e:	22e0      	movs	r2, #224	; 0xe0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:659 (discriminator 1)
				pthisMagCal->fvecA[0] = pthisMagCal->fvecA[6] * pthisMagCal->fvecA[6];
				pthisMagCal->fvecA[1] = 2.0F * pthisMagCal->fvecA[6] * pthisMagCal->fvecA[7];
				pthisMagCal->fvecA[2] = 2.0F * pthisMagCal->fvecA[6] * pthisMagCal->fvecA[8];
				pthisMagCal->fvecA[3] = pthisMagCal->fvecA[7] * pthisMagCal->fvecA[7];
				pthisMagCal->fvecA[4] = 2.0F * pthisMagCal->fvecA[7] * pthisMagCal->fvecA[8];
				pthisMagCal->fvecA[5] = pthisMagCal->fvecA[8] * pthisMagCal->fvecA[8];
    d310:	009b      	lsls	r3, r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:666 (discriminator 1)
				// accumulate the on-and above-diagonal terms of fmatA=Sigma{fvecA^T * fvecA}
				// with the exception of fmatA[9][9] which equals the number of measurements
				// update the right hand column [9] of fmatA[0-8][9] ignoring fmatA[9][9]
				for (m = 0; m < 9; m++)
				{
					pthisMagCal->fmatA[m][9] += pthisMagCal->fvecA[m];
    d312:	58a1      	ldr	r1, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:659 (discriminator 1)
				pthisMagCal->fvecA[0] = pthisMagCal->fvecA[6] * pthisMagCal->fvecA[6];
				pthisMagCal->fvecA[1] = 2.0F * pthisMagCal->fvecA[6] * pthisMagCal->fvecA[7];
				pthisMagCal->fvecA[2] = 2.0F * pthisMagCal->fvecA[6] * pthisMagCal->fvecA[8];
				pthisMagCal->fvecA[3] = pthisMagCal->fvecA[7] * pthisMagCal->fvecA[7];
				pthisMagCal->fvecA[4] = 2.0F * pthisMagCal->fvecA[7] * pthisMagCal->fvecA[8];
				pthisMagCal->fvecA[5] = pthisMagCal->fvecA[8] * pthisMagCal->fvecA[8];
    d314:	50e0      	str	r0, [r4, r3]
    d316:	900c      	str	r0, [sp, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:666 (discriminator 1)
				// accumulate the on-and above-diagonal terms of fmatA=Sigma{fvecA^T * fvecA}
				// with the exception of fmatA[9][9] which equals the number of measurements
				// update the right hand column [9] of fmatA[0-8][9] ignoring fmatA[9][9]
				for (m = 0; m < 9; m++)
				{
					pthisMagCal->fmatA[m][9] += pthisMagCal->fvecA[m];
    d318:	9807      	ldr	r0, [sp, #28]
    d31a:	4692      	mov	sl, r2
    d31c:	f7f3 f9ea 	bl	6f4 <__aeabi_fadd>
    d320:	4651      	mov	r1, sl
    d322:	2384      	movs	r3, #132	; 0x84
    d324:	005b      	lsls	r3, r3, #1
    d326:	5060      	str	r0, [r4, r1]
    d328:	58e1      	ldr	r1, [r4, r3]
    d32a:	4648      	mov	r0, r9
    d32c:	469a      	mov	sl, r3
    d32e:	f7f3 f9e1 	bl	6f4 <__aeabi_fadd>
    d332:	4652      	mov	r2, sl
    d334:	2398      	movs	r3, #152	; 0x98
    d336:	50a0      	str	r0, [r4, r2]
    d338:	005b      	lsls	r3, r3, #1
    d33a:	58e1      	ldr	r1, [r4, r3]
    d33c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d33e:	4699      	mov	r9, r3
    d340:	f7f3 f9d8 	bl	6f4 <__aeabi_fadd>
    d344:	464b      	mov	r3, r9
    d346:	50e0      	str	r0, [r4, r3]
    d348:	23ac      	movs	r3, #172	; 0xac
    d34a:	005b      	lsls	r3, r3, #1
    d34c:	58e1      	ldr	r1, [r4, r3]
    d34e:	1c38      	adds	r0, r7, #0
    d350:	4699      	mov	r9, r3
    d352:	f7f3 f9cf 	bl	6f4 <__aeabi_fadd>
    d356:	27c0      	movs	r7, #192	; 0xc0
    d358:	4649      	mov	r1, r9
    d35a:	5060      	str	r0, [r4, r1]
    d35c:	007f      	lsls	r7, r7, #1
    d35e:	59e1      	ldr	r1, [r4, r7]
    d360:	1c30      	adds	r0, r6, #0
    d362:	f7f3 f9c7 	bl	6f4 <__aeabi_fadd>
    d366:	26d4      	movs	r6, #212	; 0xd4
    d368:	51e0      	str	r0, [r4, r7]
    d36a:	0076      	lsls	r6, r6, #1
    d36c:	59a1      	ldr	r1, [r4, r6]
    d36e:	980c      	ldr	r0, [sp, #48]	; 0x30
    d370:	f7f3 f9c0 	bl	6f4 <__aeabi_fadd>
    d374:	51a0      	str	r0, [r4, r6]
    d376:	26e8      	movs	r6, #232	; 0xe8
    d378:	0076      	lsls	r6, r6, #1
    d37a:	59a0      	ldr	r0, [r4, r6]
    d37c:	4641      	mov	r1, r8
    d37e:	f7f3 f9b9 	bl	6f4 <__aeabi_fadd>
    d382:	51a0      	str	r0, [r4, r6]
    d384:	26fc      	movs	r6, #252	; 0xfc
    d386:	0076      	lsls	r6, r6, #1
    d388:	1c29      	adds	r1, r5, #0
    d38a:	59a0      	ldr	r0, [r4, r6]
    d38c:	f7f3 f9b2 	bl	6f4 <__aeabi_fadd>
    d390:	2588      	movs	r5, #136	; 0x88
    d392:	00ad      	lsls	r5, r5, #2
    d394:	51a0      	str	r0, [r4, r6]
    d396:	4659      	mov	r1, fp
    d398:	5960      	ldr	r0, [r4, r5]
    d39a:	f7f3 f9ab 	bl	6f4 <__aeabi_fadd>
    d39e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d3a0:	2300      	movs	r3, #0
    d3a2:	5160      	str	r0, [r4, r5]
    d3a4:	4693      	mov	fp, r2
    d3a6:	469a      	mov	sl, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:673 (discriminator 1)
				// update the on and above diagonal terms of fmatA ignoring right hand column 9
				for (m = 0; m < 9; m++)
				{
					for (n = m; n < 9; n++)
					{
						pthisMagCal->fmatA[m][n] += pthisMagCal->fvecA[m] * pthisMagCal->fvecA[n];
    d3a8:	27bc      	movs	r7, #188	; 0xbc
    d3aa:	4652      	mov	r2, sl
    d3ac:	4651      	mov	r1, sl
    d3ae:	b2d5      	uxtb	r5, r2
    d3b0:	465b      	mov	r3, fp
    d3b2:	008a      	lsls	r2, r1, #2
    d3b4:	681b      	ldr	r3, [r3, #0]
    d3b6:	4452      	add	r2, sl
    d3b8:	0052      	lsls	r2, r2, #1
    d3ba:	4699      	mov	r9, r3
    d3bc:	1c18      	adds	r0, r3, #0
    d3be:	4690      	mov	r8, r2
    d3c0:	b26b      	sxtb	r3, r5
    d3c2:	e006      	b.n	d3d2 <fUpdateCalibration10EIG+0x24e>
    d3c4:	42480000 	.word	0x42480000
    d3c8:	1c1a      	adds	r2, r3, #0
    d3ca:	32f6      	adds	r2, #246	; 0xf6
    d3cc:	0092      	lsls	r2, r2, #2
    d3ce:	18a2      	adds	r2, r4, r2
    d3d0:	6850      	ldr	r0, [r2, #4]
    d3d2:	4443      	add	r3, r8
    d3d4:	009b      	lsls	r3, r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:673 (discriminator 2)
    d3d6:	4649      	mov	r1, r9
    d3d8:	18e6      	adds	r6, r4, r3
    d3da:	f7f3 fcdb 	bl	d94 <__aeabi_fmul>
    d3de:	1c01      	adds	r1, r0, #0
    d3e0:	59f0      	ldr	r0, [r6, r7]
    d3e2:	f7f3 f987 	bl	6f4 <__aeabi_fadd>
    d3e6:	3501      	adds	r5, #1
    d3e8:	b2ed      	uxtb	r5, r5
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:671 (discriminator 2)
					pthisMagCal->fmatA[m][9] += pthisMagCal->fvecA[m];
				}
				// update the on and above diagonal terms of fmatA ignoring right hand column 9
				for (m = 0; m < 9; m++)
				{
					for (n = m; n < 9; n++)
    d3ea:	b26b      	sxtb	r3, r5
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:673 (discriminator 2)
					{
						pthisMagCal->fmatA[m][n] += pthisMagCal->fvecA[m] * pthisMagCal->fvecA[n];
    d3ec:	51f0      	str	r0, [r6, r7]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:671 (discriminator 2)
					pthisMagCal->fmatA[m][9] += pthisMagCal->fvecA[m];
				}
				// update the on and above diagonal terms of fmatA ignoring right hand column 9
				for (m = 0; m < 9; m++)
				{
					for (n = m; n < 9; n++)
    d3ee:	2b08      	cmp	r3, #8
    d3f0:	ddea      	ble.n	d3c8 <fUpdateCalibration10EIG+0x244>
    d3f2:	2501      	movs	r5, #1
    d3f4:	44aa      	add	sl, r5
    d3f6:	2004      	movs	r0, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:669
				for (m = 0; m < 9; m++)
				{
					pthisMagCal->fmatA[m][9] += pthisMagCal->fvecA[m];
				}
				// update the on and above diagonal terms of fmatA ignoring right hand column 9
				for (m = 0; m < 9; m++)
    d3f8:	4651      	mov	r1, sl
    d3fa:	4483      	add	fp, r0
    d3fc:	2909      	cmp	r1, #9
    d3fe:	d1d4      	bne.n	d3aa <fUpdateCalibration10EIG+0x226>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:678
						pthisMagCal->fmatA[m][n] += pthisMagCal->fvecA[m] * pthisMagCal->fvecA[n];
					}
				}

				// increment the measurement counter for the next iteration
				iCount++;
    d400:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d402:	3301      	adds	r3, #1
    d404:	b29b      	uxth	r3, r3
    d406:	9309      	str	r3, [sp, #36]	; 0x24
    d408:	9d08      	ldr	r5, [sp, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:634

	// sum between MINEQUATIONS to MAXEQUATIONS entries into the 10x10 product matrix fmatA
	iCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
	{
		for (k = 0; k < MAGBUFFSIZEY; k++)
    d40a:	980d      	ldr	r0, [sp, #52]	; 0x34
    d40c:	3504      	adds	r5, #4
    d40e:	9508      	str	r5, [sp, #32]
    d410:	9d06      	ldr	r5, [sp, #24]
    d412:	3502      	adds	r5, #2
    d414:	9506      	str	r5, [sp, #24]
    d416:	9d08      	ldr	r5, [sp, #32]
    d418:	4285      	cmp	r5, r0
    d41a:	d000      	beq.n	d41e <fUpdateCalibration10EIG+0x29a>
    d41c:	e701      	b.n	d222 <fUpdateCalibration10EIG+0x9e>
    d41e:	46a3      	mov	fp, r4
    d420:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    d422:	3560      	adds	r5, #96	; 0x60
    d424:	3430      	adds	r4, #48	; 0x30
    d426:	9413      	str	r4, [sp, #76]	; 0x4c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:632
		}
	}

	// sum between MINEQUATIONS to MAXEQUATIONS entries into the 10x10 product matrix fmatA
	iCount = 0;
	for (j = 0; j < MAGBUFFSIZEX; j++)
    d428:	9c15      	ldr	r4, [sp, #84]	; 0x54
    d42a:	950d      	str	r5, [sp, #52]	; 0x34
    d42c:	42a5      	cmp	r5, r4
    d42e:	d000      	beq.n	d432 <fUpdateCalibration10EIG+0x2ae>
    d430:	e6f0      	b.n	d214 <fUpdateCalibration10EIG+0x90>
    d432:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    d434:	ad16      	add	r5, sp, #88	; 0x58
    d436:	802c      	strh	r4, [r5, #0]
    d438:	9c11      	ldr	r4, [sp, #68]	; 0x44
    d43a:	255a      	movs	r5, #90	; 0x5a
    d43c:	446d      	add	r5, sp
    d43e:	802c      	strh	r4, [r5, #0]
    d440:	9c10      	ldr	r4, [sp, #64]	; 0x40
    d442:	ad17      	add	r5, sp, #92	; 0x5c
    d444:	802c      	strh	r4, [r5, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:684
			}
		}
	}

	// set the last element fmatA[9][9] to the number of measurements
	pthisMagCal->fmatA[9][9] = (float) iCount;
    d446:	9d09      	ldr	r5, [sp, #36]	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    d448:	27bc      	movs	r7, #188	; 0xbc
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:684
			}
		}
	}

	// set the last element fmatA[9][9] to the number of measurements
	pthisMagCal->fmatA[9][9] = (float) iCount;
    d44a:	b228      	sxth	r0, r5
    d44c:	f7f3 ff62 	bl	1314 <__aeabi_i2f>
    d450:	2392      	movs	r3, #146	; 0x92
    d452:	009b      	lsls	r3, r3, #2
    d454:	4659      	mov	r1, fp
    d456:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:687

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;
    d458:	9d09      	ldr	r5, [sp, #36]	; 0x24
    d45a:	4b9f      	ldr	r3, [pc, #636]	; (d6d8 <fUpdateCalibration10EIG+0x554>)
    d45c:	9c12      	ldr	r4, [sp, #72]	; 0x48
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:690

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
    d45e:	2001      	movs	r0, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:687

	// set the last element fmatA[9][9] to the number of measurements
	pthisMagCal->fmatA[9][9] = (float) iCount;

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;
    d460:	52e5      	strh	r5, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    d462:	23ae      	movs	r3, #174	; 0xae
    d464:	005b      	lsls	r3, r3, #1
    d466:	4698      	mov	r8, r3
    d468:	23c2      	movs	r3, #194	; 0xc2
    d46a:	005b      	lsls	r3, r3, #1
    d46c:	4699      	mov	r9, r3
    d46e:	23d6      	movs	r3, #214	; 0xd6
    d470:	005b      	lsls	r3, r3, #1
    d472:	26e4      	movs	r6, #228	; 0xe4
    d474:	469a      	mov	sl, r3
    d476:	b243      	sxtb	r3, r0
    d478:	009a      	lsls	r2, r3, #2
    d47a:	465c      	mov	r4, fp
    d47c:	18a1      	adds	r1, r4, r2
    d47e:	18d2      	adds	r2, r2, r3
    d480:	00d2      	lsls	r2, r2, #3
    d482:	59cc      	ldr	r4, [r1, r7]
    d484:	445a      	add	r2, fp
    d486:	25bc      	movs	r5, #188	; 0xbc
    d488:	50ac      	str	r4, [r5, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:692
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
    d48a:	2b01      	cmp	r3, #1
    d48c:	d100      	bne.n	d490 <fUpdateCalibration10EIG+0x30c>
    d48e:	e342      	b.n	db16 <fUpdateCalibration10EIG+0x992>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    d490:	598c      	ldr	r4, [r1, r6]
    d492:	25c0      	movs	r5, #192	; 0xc0
    d494:	50ac      	str	r4, [r5, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:692
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
    d496:	2b02      	cmp	r3, #2
    d498:	d100      	bne.n	d49c <fUpdateCalibration10EIG+0x318>
    d49a:	e33c      	b.n	db16 <fUpdateCalibration10EIG+0x992>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    d49c:	2586      	movs	r5, #134	; 0x86
    d49e:	006d      	lsls	r5, r5, #1
    d4a0:	594d      	ldr	r5, [r1, r5]
    d4a2:	24c4      	movs	r4, #196	; 0xc4
    d4a4:	50a5      	str	r5, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:692
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
    d4a6:	2b03      	cmp	r3, #3
    d4a8:	d100      	bne.n	d4ac <fUpdateCalibration10EIG+0x328>
    d4aa:	e334      	b.n	db16 <fUpdateCalibration10EIG+0x992>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    d4ac:	259a      	movs	r5, #154	; 0x9a
    d4ae:	006d      	lsls	r5, r5, #1
    d4b0:	594d      	ldr	r5, [r1, r5]
    d4b2:	24c8      	movs	r4, #200	; 0xc8
    d4b4:	50a5      	str	r5, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:692
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
    d4b6:	2b04      	cmp	r3, #4
    d4b8:	d100      	bne.n	d4bc <fUpdateCalibration10EIG+0x338>
    d4ba:	e32c      	b.n	db16 <fUpdateCalibration10EIG+0x992>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    d4bc:	4645      	mov	r5, r8
    d4be:	594d      	ldr	r5, [r1, r5]
    d4c0:	24cc      	movs	r4, #204	; 0xcc
    d4c2:	50a5      	str	r5, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:692
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
    d4c4:	2b05      	cmp	r3, #5
    d4c6:	d100      	bne.n	d4ca <fUpdateCalibration10EIG+0x346>
    d4c8:	e325      	b.n	db16 <fUpdateCalibration10EIG+0x992>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    d4ca:	464d      	mov	r5, r9
    d4cc:	594d      	ldr	r5, [r1, r5]
    d4ce:	24d0      	movs	r4, #208	; 0xd0
    d4d0:	50a5      	str	r5, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:692
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
    d4d2:	2b06      	cmp	r3, #6
    d4d4:	d100      	bne.n	d4d8 <fUpdateCalibration10EIG+0x354>
    d4d6:	e31e      	b.n	db16 <fUpdateCalibration10EIG+0x992>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    d4d8:	4655      	mov	r5, sl
    d4da:	594d      	ldr	r5, [r1, r5]
    d4dc:	24d4      	movs	r4, #212	; 0xd4
    d4de:	50a5      	str	r5, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:692
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
    d4e0:	2b07      	cmp	r3, #7
    d4e2:	d100      	bne.n	d4e6 <fUpdateCalibration10EIG+0x362>
    d4e4:	e317      	b.n	db16 <fUpdateCalibration10EIG+0x992>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    d4e6:	25ea      	movs	r5, #234	; 0xea
    d4e8:	006d      	lsls	r5, r5, #1
    d4ea:	5949      	ldr	r1, [r1, r5]
    d4ec:	32d4      	adds	r2, #212	; 0xd4
    d4ee:	6051      	str	r1, [r2, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:692
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
    d4f0:	2b09      	cmp	r3, #9
    d4f2:	d000      	beq.n	d4f6 <fUpdateCalibration10EIG+0x372>
    d4f4:	e30f      	b.n	db16 <fUpdateCalibration10EIG+0x992>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    d4f6:	2087      	movs	r0, #135	; 0x87
    d4f8:	0080      	lsls	r0, r0, #2
    d4fa:	1c03      	adds	r3, r0, #0
    d4fc:	2190      	movs	r1, #144	; 0x90
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:699
		}
	}

	// set pthisMagCal->fvecA to the unsorted eigenvalues and fmatB to the unsorted normalized eigenvectors of fmatA
	eigencompute(pthisMagCal->fmatA, pthisMagCal->fvecA, pthisMagCal->fmatB, 10);
    d4fe:	465c      	mov	r4, fp
    d500:	2593      	movs	r5, #147	; 0x93
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    d502:	445b      	add	r3, fp
    d504:	0089      	lsls	r1, r1, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:699
		}
	}

	// set pthisMagCal->fvecA to the unsorted eigenvalues and fmatB to the unsorted normalized eigenvectors of fmatA
	eigencompute(pthisMagCal->fmatA, pthisMagCal->fvecA, pthisMagCal->fmatB, 10);
    d506:	34bc      	adds	r4, #188	; 0xbc
    d508:	00ad      	lsls	r5, r5, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    d50a:	685a      	ldr	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:699
		}
	}

	// set pthisMagCal->fvecA to the unsorted eigenvalues and fmatB to the unsorted normalized eigenvectors of fmatA
	eigencompute(pthisMagCal->fmatA, pthisMagCal->fvecA, pthisMagCal->fmatB, 10);
    d50c:	940a      	str	r4, [sp, #40]	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    d50e:	1c0b      	adds	r3, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:699
		}
	}

	// set pthisMagCal->fvecA to the unsorted eigenvalues and fmatB to the unsorted normalized eigenvectors of fmatA
	eigencompute(pthisMagCal->fmatA, pthisMagCal->fvecA, pthisMagCal->fmatB, 10);
    d510:	1c2c      	adds	r4, r5, #0
    d512:	445c      	add	r4, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:694
	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
	{
		for (n = 0; n < m; n++)
		{
			pthisMagCal->fmatA[m][n] = pthisMagCal->fmatA[n][m];
    d514:	445b      	add	r3, fp
    d516:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:699
		}
	}

	// set pthisMagCal->fvecA to the unsorted eigenvalues and fmatB to the unsorted normalized eigenvectors of fmatA
	eigencompute(pthisMagCal->fmatA, pthisMagCal->fvecA, pthisMagCal->fmatB, 10);
    d518:	980a      	ldr	r0, [sp, #40]	; 0x28
    d51a:	1c22      	adds	r2, r4, #0
    d51c:	990e      	ldr	r1, [sp, #56]	; 0x38
    d51e:	230a      	movs	r3, #10
    d520:	9408      	str	r4, [sp, #32]
    d522:	f000 fc99 	bl	de58 <eigencompute>
    d526:	23f7      	movs	r3, #247	; 0xf7
    d528:	009b      	lsls	r3, r3, #2
    d52a:	465d      	mov	r5, fp
    d52c:	58ec      	ldr	r4, [r5, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:705

	// set ellipsoid matrix A from elements of the solution vector column j with smallest eigenvalue
	j = 0;
	for (i = 1; i < 10; i++)
	{
		if (pthisMagCal->fvecA[i] < pthisMagCal->fvecA[j])
    d52e:	23f8      	movs	r3, #248	; 0xf8
    d530:	009b      	lsls	r3, r3, #2
    d532:	58ed      	ldr	r5, [r5, r3]
    d534:	1c20      	adds	r0, r4, #0
    d536:	1c29      	adds	r1, r5, #0
    d538:	f7f3 f8c8 	bl	6cc <__aeabi_fcmpgt>
    d53c:	1c06      	adds	r6, r0, #0
    d53e:	1e73      	subs	r3, r6, #1
    d540:	419e      	sbcs	r6, r3
    d542:	2800      	cmp	r0, #0
    d544:	d100      	bne.n	d548 <fUpdateCalibration10EIG+0x3c4>
    d546:	1c25      	adds	r5, r4, #0
    d548:	23f9      	movs	r3, #249	; 0xf9
    d54a:	009b      	lsls	r3, r3, #2
    d54c:	4658      	mov	r0, fp
    d54e:	58c4      	ldr	r4, [r0, r3]
    d550:	1c29      	adds	r1, r5, #0
    d552:	1c20      	adds	r0, r4, #0
    d554:	f7f3 f8a6 	bl	6a4 <__aeabi_fcmplt>
    d558:	2702      	movs	r7, #2
    d55a:	2800      	cmp	r0, #0
    d55c:	d100      	bne.n	d560 <fUpdateCalibration10EIG+0x3dc>
    d55e:	1c37      	adds	r7, r6, #0
    d560:	1c20      	adds	r0, r4, #0
    d562:	1c29      	adds	r1, r5, #0
    d564:	b2ff      	uxtb	r7, r7
    d566:	f7f3 f89d 	bl	6a4 <__aeabi_fcmplt>
    d56a:	2800      	cmp	r0, #0
    d56c:	d100      	bne.n	d570 <fUpdateCalibration10EIG+0x3ec>
    d56e:	1c2c      	adds	r4, r5, #0
    d570:	23fa      	movs	r3, #250	; 0xfa
    d572:	009b      	lsls	r3, r3, #2
    d574:	4659      	mov	r1, fp
    d576:	58cd      	ldr	r5, [r1, r3]
    d578:	1c21      	adds	r1, r4, #0
    d57a:	1c28      	adds	r0, r5, #0
    d57c:	f7f3 f892 	bl	6a4 <__aeabi_fcmplt>
    d580:	2603      	movs	r6, #3
    d582:	2800      	cmp	r0, #0
    d584:	d100      	bne.n	d588 <fUpdateCalibration10EIG+0x404>
    d586:	1c3e      	adds	r6, r7, #0
    d588:	1c28      	adds	r0, r5, #0
    d58a:	1c21      	adds	r1, r4, #0
    d58c:	b2f6      	uxtb	r6, r6
    d58e:	f7f3 f889 	bl	6a4 <__aeabi_fcmplt>
    d592:	2800      	cmp	r0, #0
    d594:	d100      	bne.n	d598 <fUpdateCalibration10EIG+0x414>
    d596:	1c25      	adds	r5, r4, #0
    d598:	23fb      	movs	r3, #251	; 0xfb
    d59a:	009b      	lsls	r3, r3, #2
    d59c:	465a      	mov	r2, fp
    d59e:	58d4      	ldr	r4, [r2, r3]
    d5a0:	1c29      	adds	r1, r5, #0
    d5a2:	1c20      	adds	r0, r4, #0
    d5a4:	f7f3 f87e 	bl	6a4 <__aeabi_fcmplt>
    d5a8:	2704      	movs	r7, #4
    d5aa:	2800      	cmp	r0, #0
    d5ac:	d100      	bne.n	d5b0 <fUpdateCalibration10EIG+0x42c>
    d5ae:	1c37      	adds	r7, r6, #0
    d5b0:	1c20      	adds	r0, r4, #0
    d5b2:	1c29      	adds	r1, r5, #0
    d5b4:	b2ff      	uxtb	r7, r7
    d5b6:	f7f3 f875 	bl	6a4 <__aeabi_fcmplt>
    d5ba:	2800      	cmp	r0, #0
    d5bc:	d100      	bne.n	d5c0 <fUpdateCalibration10EIG+0x43c>
    d5be:	1c2c      	adds	r4, r5, #0
    d5c0:	23fc      	movs	r3, #252	; 0xfc
    d5c2:	009b      	lsls	r3, r3, #2
    d5c4:	4658      	mov	r0, fp
    d5c6:	58c5      	ldr	r5, [r0, r3]
    d5c8:	1c21      	adds	r1, r4, #0
    d5ca:	1c28      	adds	r0, r5, #0
    d5cc:	f7f3 f86a 	bl	6a4 <__aeabi_fcmplt>
    d5d0:	2605      	movs	r6, #5
    d5d2:	2800      	cmp	r0, #0
    d5d4:	d100      	bne.n	d5d8 <fUpdateCalibration10EIG+0x454>
    d5d6:	1c3e      	adds	r6, r7, #0
    d5d8:	1c28      	adds	r0, r5, #0
    d5da:	1c21      	adds	r1, r4, #0
    d5dc:	b2f6      	uxtb	r6, r6
    d5de:	f7f3 f861 	bl	6a4 <__aeabi_fcmplt>
    d5e2:	2800      	cmp	r0, #0
    d5e4:	d100      	bne.n	d5e8 <fUpdateCalibration10EIG+0x464>
    d5e6:	1c25      	adds	r5, r4, #0
    d5e8:	23fd      	movs	r3, #253	; 0xfd
    d5ea:	009b      	lsls	r3, r3, #2
    d5ec:	4659      	mov	r1, fp
    d5ee:	58cc      	ldr	r4, [r1, r3]
    d5f0:	1c29      	adds	r1, r5, #0
    d5f2:	1c20      	adds	r0, r4, #0
    d5f4:	f7f3 f856 	bl	6a4 <__aeabi_fcmplt>
    d5f8:	2706      	movs	r7, #6
    d5fa:	2800      	cmp	r0, #0
    d5fc:	d100      	bne.n	d600 <fUpdateCalibration10EIG+0x47c>
    d5fe:	1c37      	adds	r7, r6, #0
    d600:	1c20      	adds	r0, r4, #0
    d602:	1c29      	adds	r1, r5, #0
    d604:	b2ff      	uxtb	r7, r7
    d606:	f7f3 f84d 	bl	6a4 <__aeabi_fcmplt>
    d60a:	2800      	cmp	r0, #0
    d60c:	d100      	bne.n	d610 <fUpdateCalibration10EIG+0x48c>
    d60e:	1c2c      	adds	r4, r5, #0
    d610:	23fe      	movs	r3, #254	; 0xfe
    d612:	009b      	lsls	r3, r3, #2
    d614:	465a      	mov	r2, fp
    d616:	58d5      	ldr	r5, [r2, r3]
    d618:	1c21      	adds	r1, r4, #0
    d61a:	1c28      	adds	r0, r5, #0
    d61c:	f7f3 f842 	bl	6a4 <__aeabi_fcmplt>
    d620:	2607      	movs	r6, #7
    d622:	2800      	cmp	r0, #0
    d624:	d100      	bne.n	d628 <fUpdateCalibration10EIG+0x4a4>
    d626:	1c3e      	adds	r6, r7, #0
    d628:	1c28      	adds	r0, r5, #0
    d62a:	1c21      	adds	r1, r4, #0
    d62c:	b2f6      	uxtb	r6, r6
    d62e:	f7f3 f839 	bl	6a4 <__aeabi_fcmplt>
    d632:	2800      	cmp	r0, #0
    d634:	d100      	bne.n	d638 <fUpdateCalibration10EIG+0x4b4>
    d636:	1c25      	adds	r5, r4, #0
    d638:	23ff      	movs	r3, #255	; 0xff
    d63a:	009b      	lsls	r3, r3, #2
    d63c:	465c      	mov	r4, fp
    d63e:	58e7      	ldr	r7, [r4, r3]
    d640:	1c29      	adds	r1, r5, #0
    d642:	1c38      	adds	r0, r7, #0
    d644:	f7f3 f82e 	bl	6a4 <__aeabi_fcmplt>
    d648:	1c3b      	adds	r3, r7, #0
    d64a:	2800      	cmp	r0, #0
    d64c:	d100      	bne.n	d650 <fUpdateCalibration10EIG+0x4cc>
    d64e:	1c2b      	adds	r3, r5, #0
    d650:	1c18      	adds	r0, r3, #0
    d652:	2380      	movs	r3, #128	; 0x80
    d654:	00db      	lsls	r3, r3, #3
    d656:	465a      	mov	r2, fp
    d658:	58d1      	ldr	r1, [r2, r3]
    d65a:	f7f3 f837 	bl	6cc <__aeabi_fcmpgt>
    d65e:	2409      	movs	r4, #9
    d660:	2800      	cmp	r0, #0
    d662:	d108      	bne.n	d676 <fUpdateCalibration10EIG+0x4f2>
    d664:	1c38      	adds	r0, r7, #0
    d666:	1c29      	adds	r1, r5, #0
    d668:	f7f3 f81c 	bl	6a4 <__aeabi_fcmplt>
    d66c:	2408      	movs	r4, #8
    d66e:	2800      	cmp	r0, #0
    d670:	d100      	bne.n	d674 <fUpdateCalibration10EIG+0x4f0>
    d672:	1c34      	adds	r4, r6, #0
    d674:	b264      	sxtb	r4, r4
    d676:	00a4      	lsls	r4, r4, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:710
		{
			j = i;
		}
	}
	pthisMagCal->fA[0][0] = pthisMagCal->fmatB[0][j];
    d678:	2393      	movs	r3, #147	; 0x93
    d67a:	445c      	add	r4, fp
    d67c:	009b      	lsls	r3, r3, #2
    d67e:	58e3      	ldr	r3, [r4, r3]
    d680:	465d      	mov	r5, fp
    d682:	676b      	str	r3, [r5, #116]	; 0x74
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:711
	pthisMagCal->fA[0][1] = pthisMagCal->fA[1][0] = pthisMagCal->fmatB[1][j];
    d684:	239d      	movs	r3, #157	; 0x9d
    d686:	009b      	lsls	r3, r3, #2
    d688:	58e3      	ldr	r3, [r4, r3]
    d68a:	2280      	movs	r2, #128	; 0x80
    d68c:	50ab      	str	r3, [r5, r2]
    d68e:	67ab      	str	r3, [r5, #120]	; 0x78
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:712
	pthisMagCal->fA[0][2] = pthisMagCal->fA[2][0] = pthisMagCal->fmatB[2][j];
    d690:	23a7      	movs	r3, #167	; 0xa7
    d692:	009b      	lsls	r3, r3, #2
    d694:	58e3      	ldr	r3, [r4, r3]
    d696:	228c      	movs	r2, #140	; 0x8c
    d698:	50ab      	str	r3, [r5, r2]
    d69a:	67eb      	str	r3, [r5, #124]	; 0x7c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:713
	pthisMagCal->fA[1][1] = pthisMagCal->fmatB[3][j];
    d69c:	23b1      	movs	r3, #177	; 0xb1
    d69e:	009b      	lsls	r3, r3, #2
    d6a0:	58e2      	ldr	r2, [r4, r3]
    d6a2:	2384      	movs	r3, #132	; 0x84
    d6a4:	50ea      	str	r2, [r5, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:714
	pthisMagCal->fA[1][2] = pthisMagCal->fA[2][1] = pthisMagCal->fmatB[4][j];
    d6a6:	23bb      	movs	r3, #187	; 0xbb
    d6a8:	009b      	lsls	r3, r3, #2
    d6aa:	58e3      	ldr	r3, [r4, r3]
    d6ac:	2290      	movs	r2, #144	; 0x90
    d6ae:	50ab      	str	r3, [r5, r2]
    d6b0:	2288      	movs	r2, #136	; 0x88
    d6b2:	50ab      	str	r3, [r5, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:715
	pthisMagCal->fA[2][2] = pthisMagCal->fmatB[5][j];
    d6b4:	23c5      	movs	r3, #197	; 0xc5
    d6b6:	009b      	lsls	r3, r3, #2
    d6b8:	58e2      	ldr	r2, [r4, r3]
    d6ba:	2394      	movs	r3, #148	; 0x94
    d6bc:	50ea      	str	r2, [r5, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:718

	// negate entire solution if A has negative determinant
	det = f3x3matrixDetA(pthisMagCal->fA);
    d6be:	3574      	adds	r5, #116	; 0x74
    d6c0:	1c28      	adds	r0, r5, #0
    d6c2:	9506      	str	r5, [sp, #24]
    d6c4:	f000 fb78 	bl	ddb8 <f3x3matrixDetA>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:719
	if (det < 0.0F)
    d6c8:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:718
	pthisMagCal->fA[1][1] = pthisMagCal->fmatB[3][j];
	pthisMagCal->fA[1][2] = pthisMagCal->fA[2][1] = pthisMagCal->fmatB[4][j];
	pthisMagCal->fA[2][2] = pthisMagCal->fmatB[5][j];

	// negate entire solution if A has negative determinant
	det = f3x3matrixDetA(pthisMagCal->fA);
    d6ca:	4682      	mov	sl, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:719
	if (det < 0.0F)
    d6cc:	f7f2 ffea 	bl	6a4 <__aeabi_fcmplt>
    d6d0:	2800      	cmp	r0, #0
    d6d2:	d000      	beq.n	d6d6 <fUpdateCalibration10EIG+0x552>
    d6d4:	e222      	b.n	db1c <fUpdateCalibration10EIG+0x998>
    d6d6:	e001      	b.n	d6dc <fUpdateCalibration10EIG+0x558>
    d6d8:	00000b56 	.word	0x00000b56
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:730
		pthisMagCal->fmatB[9][j] = -pthisMagCal->fmatB[9][j];
		det = -det;
	}

	// compute the inverse of the ellipsoid matrix
	f3x3matrixAeqInvSymB(pthisMagCal->finvA, pthisMagCal->fA);
    d6dc:	4658      	mov	r0, fp
    d6de:	3098      	adds	r0, #152	; 0x98
    d6e0:	9906      	ldr	r1, [sp, #24]
    d6e2:	f000 faad 	bl	dc40 <f3x3matrixAeqInvSymB>
    d6e6:	23cf      	movs	r3, #207	; 0xcf
    d6e8:	009b      	lsls	r3, r3, #2
    d6ea:	58e3      	ldr	r3, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:738
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = 0.0F;
		for (m = X; m <= Z; m++)
		{
			pthisMagCal->ftrV[l] += pthisMagCal->finvA[l][m] * pthisMagCal->fmatB[m + 6][j];
    d6ec:	465a      	mov	r2, fp
    d6ee:	4698      	mov	r8, r3
    d6f0:	23d9      	movs	r3, #217	; 0xd9
    d6f2:	009b      	lsls	r3, r3, #2
    d6f4:	58e3      	ldr	r3, [r4, r3]
    d6f6:	4640      	mov	r0, r8
    d6f8:	4699      	mov	r9, r3
    d6fa:	23e3      	movs	r3, #227	; 0xe3
    d6fc:	009b      	lsls	r3, r3, #2
    d6fe:	58e3      	ldr	r3, [r4, r3]
    d700:	9309      	str	r3, [sp, #36]	; 0x24
    d702:	2398      	movs	r3, #152	; 0x98
    d704:	58d1      	ldr	r1, [r2, r3]
    d706:	f7f3 fb45 	bl	d94 <__aeabi_fmul>
    d70a:	2100      	movs	r1, #0
    d70c:	f7f2 fff2 	bl	6f4 <__aeabi_fadd>
    d710:	239c      	movs	r3, #156	; 0x9c
    d712:	465a      	mov	r2, fp
    d714:	58d1      	ldr	r1, [r2, r3]
    d716:	1c05      	adds	r5, r0, #0
    d718:	4648      	mov	r0, r9
    d71a:	f7f3 fb3b 	bl	d94 <__aeabi_fmul>
    d71e:	1c01      	adds	r1, r0, #0
    d720:	1c28      	adds	r0, r5, #0
    d722:	f7f2 ffe7 	bl	6f4 <__aeabi_fadd>
    d726:	465a      	mov	r2, fp
    d728:	23a0      	movs	r3, #160	; 0xa0
    d72a:	58d1      	ldr	r1, [r2, r3]
    d72c:	1c05      	adds	r5, r0, #0
    d72e:	9809      	ldr	r0, [sp, #36]	; 0x24
    d730:	f7f3 fb30 	bl	d94 <__aeabi_fmul>
    d734:	1c01      	adds	r1, r0, #0
    d736:	1c28      	adds	r0, r5, #0
    d738:	f7f2 ffdc 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:740
		}
		pthisMagCal->ftrV[l] *= -0.5F;
    d73c:	21bf      	movs	r1, #191	; 0xbf
    d73e:	0609      	lsls	r1, r1, #24
    d740:	f7f3 fb28 	bl	d94 <__aeabi_fmul>
    d744:	465b      	mov	r3, fp
    d746:	63d8      	str	r0, [r3, #60]	; 0x3c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:738
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = 0.0F;
		for (m = X; m <= Z; m++)
		{
			pthisMagCal->ftrV[l] += pthisMagCal->finvA[l][m] * pthisMagCal->fmatB[m + 6][j];
    d748:	465d      	mov	r5, fp
    d74a:	23a4      	movs	r3, #164	; 0xa4
    d74c:	58e9      	ldr	r1, [r5, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:740
		}
		pthisMagCal->ftrV[l] *= -0.5F;
    d74e:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:738
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = 0.0F;
		for (m = X; m <= Z; m++)
		{
			pthisMagCal->ftrV[l] += pthisMagCal->finvA[l][m] * pthisMagCal->fmatB[m + 6][j];
    d750:	4640      	mov	r0, r8
    d752:	f7f3 fb1f 	bl	d94 <__aeabi_fmul>
    d756:	2100      	movs	r1, #0
    d758:	f7f2 ffcc 	bl	6f4 <__aeabi_fadd>
    d75c:	23a8      	movs	r3, #168	; 0xa8
    d75e:	465a      	mov	r2, fp
    d760:	58d1      	ldr	r1, [r2, r3]
    d762:	1c05      	adds	r5, r0, #0
    d764:	4648      	mov	r0, r9
    d766:	f7f3 fb15 	bl	d94 <__aeabi_fmul>
    d76a:	1c01      	adds	r1, r0, #0
    d76c:	1c28      	adds	r0, r5, #0
    d76e:	f7f2 ffc1 	bl	6f4 <__aeabi_fadd>
    d772:	465a      	mov	r2, fp
    d774:	23ac      	movs	r3, #172	; 0xac
    d776:	58d1      	ldr	r1, [r2, r3]
    d778:	1c05      	adds	r5, r0, #0
    d77a:	9809      	ldr	r0, [sp, #36]	; 0x24
    d77c:	f7f3 fb0a 	bl	d94 <__aeabi_fmul>
    d780:	1c01      	adds	r1, r0, #0
    d782:	1c28      	adds	r0, r5, #0
    d784:	f7f2 ffb6 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:740
		}
		pthisMagCal->ftrV[l] *= -0.5F;
    d788:	21bf      	movs	r1, #191	; 0xbf
    d78a:	0609      	lsls	r1, r1, #24
    d78c:	f7f3 fb02 	bl	d94 <__aeabi_fmul>
    d790:	465b      	mov	r3, fp
    d792:	6418      	str	r0, [r3, #64]	; 0x40
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:738
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = 0.0F;
		for (m = X; m <= Z; m++)
		{
			pthisMagCal->ftrV[l] += pthisMagCal->finvA[l][m] * pthisMagCal->fmatB[m + 6][j];
    d794:	465d      	mov	r5, fp
    d796:	23b0      	movs	r3, #176	; 0xb0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:740
		}
		pthisMagCal->ftrV[l] *= -0.5F;
    d798:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:738
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = 0.0F;
		for (m = X; m <= Z; m++)
		{
			pthisMagCal->ftrV[l] += pthisMagCal->finvA[l][m] * pthisMagCal->fmatB[m + 6][j];
    d79a:	58e9      	ldr	r1, [r5, r3]
    d79c:	4640      	mov	r0, r8
    d79e:	f7f3 faf9 	bl	d94 <__aeabi_fmul>
    d7a2:	2100      	movs	r1, #0
    d7a4:	f7f2 ffa6 	bl	6f4 <__aeabi_fadd>
    d7a8:	23b4      	movs	r3, #180	; 0xb4
    d7aa:	465a      	mov	r2, fp
    d7ac:	58d1      	ldr	r1, [r2, r3]
    d7ae:	1c05      	adds	r5, r0, #0
    d7b0:	4648      	mov	r0, r9
    d7b2:	f7f3 faef 	bl	d94 <__aeabi_fmul>
    d7b6:	1c01      	adds	r1, r0, #0
    d7b8:	1c28      	adds	r0, r5, #0
    d7ba:	f7f2 ff9b 	bl	6f4 <__aeabi_fadd>
    d7be:	465a      	mov	r2, fp
    d7c0:	23b8      	movs	r3, #184	; 0xb8
    d7c2:	58d1      	ldr	r1, [r2, r3]
    d7c4:	1c05      	adds	r5, r0, #0
    d7c6:	9809      	ldr	r0, [sp, #36]	; 0x24
    d7c8:	f7f3 fae4 	bl	d94 <__aeabi_fmul>
    d7cc:	1c01      	adds	r1, r0, #0
    d7ce:	1c28      	adds	r0, r5, #0
    d7d0:	f7f2 ff90 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:740
		}
		pthisMagCal->ftrV[l] *= -0.5F;
    d7d4:	21bf      	movs	r1, #191	; 0xbf
    d7d6:	0609      	lsls	r1, r1, #24
    d7d8:	f7f3 fadc 	bl	d94 <__aeabi_fmul>
    d7dc:	465b      	mov	r3, fp
    d7de:	1c05      	adds	r5, r0, #0
    d7e0:	6458      	str	r0, [r3, #68]	; 0x44
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:744
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    d7e2:	6f59      	ldr	r1, [r3, #116]	; 0x74
    d7e4:	1c38      	adds	r0, r7, #0
    d7e6:	f7f3 fad5 	bl	d94 <__aeabi_fmul>
    d7ea:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:745
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
    d7ec:	4658      	mov	r0, fp
    d7ee:	6f80      	ldr	r0, [r0, #120]	; 0x78
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:746
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
    d7f0:	465a      	mov	r2, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:745
		pthisMagCal->ftrV[l] *= -0.5F;
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
    d7f2:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:748
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
    d7f4:	465b      	mov	r3, fp
    d7f6:	2088      	movs	r0, #136	; 0x88
    d7f8:	581b      	ldr	r3, [r3, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:746
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
    d7fa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:749
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[2][2] * pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z] - pthisMagCal->fmatB[9][j]));
    d7fc:	2094      	movs	r0, #148	; 0x94
    d7fe:	4681      	mov	r9, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:744
		}
		pthisMagCal->ftrV[l] *= -0.5F;
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    d800:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:746
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
    d802:	9209      	str	r2, [sp, #36]	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:748
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
    d804:	9307      	str	r3, [sp, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:744
		}
		pthisMagCal->ftrV[l] *= -0.5F;
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    d806:	f7f3 fac5 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:745
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
    d80a:	4641      	mov	r1, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:744
		}
		pthisMagCal->ftrV[l] *= -0.5F;
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    d80c:	900b      	str	r0, [sp, #44]	; 0x2c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:745
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
    d80e:	4640      	mov	r0, r8
    d810:	f7f2 ff70 	bl	6f4 <__aeabi_fadd>
    d814:	1c01      	adds	r1, r0, #0
    d816:	1c38      	adds	r0, r7, #0
    d818:	f7f3 fabc 	bl	d94 <__aeabi_fmul>
    d81c:	1c31      	adds	r1, r6, #0
    d81e:	f7f3 fab9 	bl	d94 <__aeabi_fmul>
    d822:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:744
		}
		pthisMagCal->ftrV[l] *= -0.5F;
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    d824:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d826:	f7f2 ff65 	bl	6f4 <__aeabi_fadd>
    d82a:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:746
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
    d82c:	9809      	ldr	r0, [sp, #36]	; 0x24
    d82e:	1c01      	adds	r1, r0, #0
    d830:	f7f2 ff60 	bl	6f4 <__aeabi_fadd>
    d834:	1c01      	adds	r1, r0, #0
    d836:	1c38      	adds	r0, r7, #0
    d838:	f7f3 faac 	bl	d94 <__aeabi_fmul>
    d83c:	1c01      	adds	r1, r0, #0
    d83e:	1c28      	adds	r0, r5, #0
    d840:	f7f3 faa8 	bl	d94 <__aeabi_fmul>
    d844:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:745
		pthisMagCal->ftrV[l] *= -0.5F;
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
    d846:	4640      	mov	r0, r8
    d848:	f7f2 ff54 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:747
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
    d84c:	2384      	movs	r3, #132	; 0x84
    d84e:	465a      	mov	r2, fp
    d850:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:745
		pthisMagCal->ftrV[l] *= -0.5F;
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
    d852:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:747
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
    d854:	1c30      	adds	r0, r6, #0
    d856:	f7f3 fa9d 	bl	d94 <__aeabi_fmul>
    d85a:	1c01      	adds	r1, r0, #0
    d85c:	1c30      	adds	r0, r6, #0
    d85e:	f7f3 fa99 	bl	d94 <__aeabi_fmul>
    d862:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:746
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
    d864:	1c38      	adds	r0, r7, #0
    d866:	f7f2 ff45 	bl	6f4 <__aeabi_fadd>
    d86a:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:748
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
    d86c:	9807      	ldr	r0, [sp, #28]
    d86e:	1c01      	adds	r1, r0, #0
    d870:	f7f2 ff40 	bl	6f4 <__aeabi_fadd>
    d874:	1c01      	adds	r1, r0, #0
    d876:	1c30      	adds	r0, r6, #0
    d878:	f7f3 fa8c 	bl	d94 <__aeabi_fmul>
    d87c:	1c01      	adds	r1, r0, #0
    d87e:	1c28      	adds	r0, r5, #0
    d880:	f7f3 fa88 	bl	d94 <__aeabi_fmul>
    d884:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:747

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
    d886:	1c38      	adds	r0, r7, #0
    d888:	f7f2 ff34 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:749
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[2][2] * pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z] - pthisMagCal->fmatB[9][j]));
    d88c:	465a      	mov	r2, fp
    d88e:	444a      	add	r2, r9
    d890:	6811      	ldr	r1, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:747

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
    d892:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:749
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[2][2] * pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z] - pthisMagCal->fmatB[9][j]));
    d894:	1c28      	adds	r0, r5, #0
    d896:	f7f3 fa7d 	bl	d94 <__aeabi_fmul>
    d89a:	1c01      	adds	r1, r0, #0
    d89c:	1c28      	adds	r0, r5, #0
    d89e:	f7f3 fa79 	bl	d94 <__aeabi_fmul>
    d8a2:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:748
	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
			2.0F * pthisMagCal->fA[0][1] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[0][2] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
    d8a4:	1c30      	adds	r0, r6, #0
    d8a6:	f7f2 ff25 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:749
			pthisMagCal->fA[2][2] * pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z] - pthisMagCal->fmatB[9][j]));
    d8aa:	23ed      	movs	r3, #237	; 0xed
    d8ac:	009b      	lsls	r3, r3, #2
    d8ae:	58e1      	ldr	r1, [r4, r3]
    d8b0:	f7f3 fb9a 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:744
		}
		pthisMagCal->ftrV[l] *= -0.5F;
	}

	// compute the trial geomagnetic field strength B in bit counts times FMATRIXSCALING
	pthisMagCal->ftrB = sqrtf(fabs(pthisMagCal->fA[0][0] * pthisMagCal->ftrV[X] * pthisMagCal->ftrV[X] +
    d8b4:	0040      	lsls	r0, r0, #1
    d8b6:	0840      	lsrs	r0, r0, #1
    d8b8:	f005 fdea 	bl	13490 <sqrtf>
    d8bc:	465b      	mov	r3, fp
    d8be:	66d8      	str	r0, [r3, #108]	; 0x6c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:752
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[2][2] * pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z] - pthisMagCal->fmatB[9][j]));

	// calculate the trial normalized fit error as a percentage
	pthisMagCal->ftrFitErrorpc = 50.0F * sqrtf(fabs(pthisMagCal->fvecA[j]) / (float) pthisMagBuffer->iMagBufferCount) /
    d8c0:	23f7      	movs	r3, #247	; 0xf7
    d8c2:	009b      	lsls	r3, r3, #2
    d8c4:	58e4      	ldr	r4, [r4, r3]
    d8c6:	9d12      	ldr	r5, [sp, #72]	; 0x48
    d8c8:	4ba3      	ldr	r3, [pc, #652]	; (db58 <fUpdateCalibration10EIG+0x9d4>)
    d8ca:	0064      	lsls	r4, r4, #1
    d8cc:	5ee8      	ldrsh	r0, [r5, r3]
    d8ce:	f7f3 fd21 	bl	1314 <__aeabi_i2f>
    d8d2:	0864      	lsrs	r4, r4, #1
    d8d4:	1c01      	adds	r1, r0, #0
    d8d6:	1c20      	adds	r0, r4, #0
    d8d8:	f7f3 f878 	bl	9cc <__aeabi_fdiv>
    d8dc:	f005 fdd8 	bl	13490 <sqrtf>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:753
			(pthisMagCal->ftrB * pthisMagCal->ftrB);
    d8e0:	4659      	mov	r1, fp
    d8e2:	6ecc      	ldr	r4, [r1, #108]	; 0x6c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:752
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[2][2] * pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z] - pthisMagCal->fmatB[9][j]));

	// calculate the trial normalized fit error as a percentage
	pthisMagCal->ftrFitErrorpc = 50.0F * sqrtf(fabs(pthisMagCal->fvecA[j]) / (float) pthisMagBuffer->iMagBufferCount) /
    d8e4:	499d      	ldr	r1, [pc, #628]	; (db5c <fUpdateCalibration10EIG+0x9d8>)
    d8e6:	f7f3 fa55 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:753
			(pthisMagCal->ftrB * pthisMagCal->ftrB);
    d8ea:	1c21      	adds	r1, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:752
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[2][2] * pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z] - pthisMagCal->fmatB[9][j]));

	// calculate the trial normalized fit error as a percentage
	pthisMagCal->ftrFitErrorpc = 50.0F * sqrtf(fabs(pthisMagCal->fvecA[j]) / (float) pthisMagBuffer->iMagBufferCount) /
    d8ec:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:753
			(pthisMagCal->ftrB * pthisMagCal->ftrB);
    d8ee:	1c20      	adds	r0, r4, #0
    d8f0:	f7f3 fa50 	bl	d94 <__aeabi_fmul>
    d8f4:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:752
			pthisMagCal->fA[1][1] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Y] +
			2.0F * pthisMagCal->fA[1][2] * pthisMagCal->ftrV[Y] * pthisMagCal->ftrV[Z] +
			pthisMagCal->fA[2][2] * pthisMagCal->ftrV[Z] * pthisMagCal->ftrV[Z] - pthisMagCal->fmatB[9][j]));

	// calculate the trial normalized fit error as a percentage
	pthisMagCal->ftrFitErrorpc = 50.0F * sqrtf(fabs(pthisMagCal->fvecA[j]) / (float) pthisMagBuffer->iMagBufferCount) /
    d8f6:	1c28      	adds	r0, r5, #0
    d8f8:	f7f3 f868 	bl	9cc <__aeabi_fdiv>
    d8fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d8fe:	465a      	mov	r2, fp
    d900:	6710      	str	r0, [r2, #112]	; 0x70
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:758
			(pthisMagCal->ftrB * pthisMagCal->ftrB);

	// correct for the measurement matrix offset and scaling and get the computed hard iron offset in uT
	for (l = X; l <= Z; l++)
	{
		pthisMagCal->ftrV[l] = pthisMagCal->ftrV[l] * DEFAULTB + (float)iOffset[l] * pthisMag->fuTPerCount;
    d902:	4996      	ldr	r1, [pc, #600]	; (db5c <fUpdateCalibration10EIG+0x9d8>)
    d904:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    d906:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    d908:	f7f3 fa44 	bl	d94 <__aeabi_fmul>
    d90c:	a916      	add	r1, sp, #88	; 0x58
    d90e:	1c06      	adds	r6, r0, #0
    d910:	2000      	movs	r0, #0
    d912:	5e08      	ldrsh	r0, [r1, r0]
    d914:	f7f3 fcfe 	bl	1314 <__aeabi_i2f>
    d918:	1c29      	adds	r1, r5, #0
    d91a:	f7f3 fa3b 	bl	d94 <__aeabi_fmul>
    d91e:	1c01      	adds	r1, r0, #0
    d920:	1c30      	adds	r0, r6, #0
    d922:	f7f2 fee7 	bl	6f4 <__aeabi_fadd>
    d926:	465a      	mov	r2, fp
    d928:	63d0      	str	r0, [r2, #60]	; 0x3c
    d92a:	498c      	ldr	r1, [pc, #560]	; (db5c <fUpdateCalibration10EIG+0x9d8>)
    d92c:	6c10      	ldr	r0, [r2, #64]	; 0x40
    d92e:	f7f3 fa31 	bl	d94 <__aeabi_fmul>
    d932:	235a      	movs	r3, #90	; 0x5a
    d934:	446b      	add	r3, sp
    d936:	1c06      	adds	r6, r0, #0
    d938:	2000      	movs	r0, #0
    d93a:	5e18      	ldrsh	r0, [r3, r0]
    d93c:	f7f3 fcea 	bl	1314 <__aeabi_i2f>
    d940:	1c29      	adds	r1, r5, #0
    d942:	f7f3 fa27 	bl	d94 <__aeabi_fmul>
    d946:	1c01      	adds	r1, r0, #0
    d948:	1c30      	adds	r0, r6, #0
    d94a:	f7f2 fed3 	bl	6f4 <__aeabi_fadd>
    d94e:	4659      	mov	r1, fp
    d950:	6408      	str	r0, [r1, #64]	; 0x40
    d952:	6c48      	ldr	r0, [r1, #68]	; 0x44
    d954:	4981      	ldr	r1, [pc, #516]	; (db5c <fUpdateCalibration10EIG+0x9d8>)
    d956:	f7f3 fa1d 	bl	d94 <__aeabi_fmul>
    d95a:	aa17      	add	r2, sp, #92	; 0x5c
    d95c:	1c06      	adds	r6, r0, #0
    d95e:	2000      	movs	r0, #0
    d960:	5e10      	ldrsh	r0, [r2, r0]
    d962:	f7f3 fcd7 	bl	1314 <__aeabi_i2f>
    d966:	1c29      	adds	r1, r5, #0
    d968:	f7f3 fa14 	bl	d94 <__aeabi_fmul>
    d96c:	1c01      	adds	r1, r0, #0
    d96e:	1c30      	adds	r0, r6, #0
    d970:	f7f2 fec0 	bl	6f4 <__aeabi_fadd>
    d974:	465b      	mov	r3, fp
    d976:	6458      	str	r0, [r3, #68]	; 0x44
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:762
	}

	// convert the trial geomagnetic field strength B into uT for un-normalized soft iron matrix A
	pthisMagCal->ftrB *= DEFAULTB;
    d978:	4978      	ldr	r1, [pc, #480]	; (db5c <fUpdateCalibration10EIG+0x9d8>)
    d97a:	1c20      	adds	r0, r4, #0
    d97c:	f7f3 fa0a 	bl	d94 <__aeabi_fmul>
    d980:	465c      	mov	r4, fp
    d982:	66e0      	str	r0, [r4, #108]	; 0x6c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:765

	// normalize the ellipsoid matrix A to unit determinant and correct B by root of this multiplicative factor
	f3x3matrixAeqAxScalar(pthisMagCal->fA, powf(det, -(ONETHIRD)));
    d984:	4976      	ldr	r1, [pc, #472]	; (db60 <fUpdateCalibration10EIG+0x9dc>)
    d986:	4650      	mov	r0, sl
    d988:	f005 fbb6 	bl	130f8 <powf>
    d98c:	1c01      	adds	r1, r0, #0
    d98e:	9806      	ldr	r0, [sp, #24]
    d990:	f000 f908 	bl	dba4 <f3x3matrixAeqAxScalar>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:766
	pthisMagCal->ftrB *= powf(det, -(ONESIXTH));
    d994:	4973      	ldr	r1, [pc, #460]	; (db64 <fUpdateCalibration10EIG+0x9e0>)
    d996:	4650      	mov	r0, sl
    d998:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
    d99a:	f005 fbad 	bl	130f8 <powf>
    d99e:	1c01      	adds	r1, r0, #0
    d9a0:	1c20      	adds	r0, r4, #0
    d9a2:	f7f3 f9f7 	bl	d94 <__aeabi_fmul>
    d9a6:	465d      	mov	r5, fp
    d9a8:	66e8      	str	r0, [r5, #108]	; 0x6c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:775
	// where fmatA holds the 3x3 matrix fA in its top left elements
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			pthisMagCal->fmatA[i][j] = pthisMagCal->fA[i][j];
    d9aa:	6f68      	ldr	r0, [r5, #116]	; 0x74
    d9ac:	6fa9      	ldr	r1, [r5, #120]	; 0x78
    d9ae:	23bc      	movs	r3, #188	; 0xbc
    d9b0:	50e8      	str	r0, [r5, r3]
    d9b2:	6fea      	ldr	r2, [r5, #124]	; 0x7c
    d9b4:	23c0      	movs	r3, #192	; 0xc0
    d9b6:	50e9      	str	r1, [r5, r3]
    d9b8:	23c4      	movs	r3, #196	; 0xc4
    d9ba:	50ea      	str	r2, [r5, r3]
    d9bc:	2380      	movs	r3, #128	; 0x80
    d9be:	58ea      	ldr	r2, [r5, r3]
    d9c0:	23e4      	movs	r3, #228	; 0xe4
    d9c2:	50ea      	str	r2, [r5, r3]
    d9c4:	2384      	movs	r3, #132	; 0x84
    d9c6:	58ea      	ldr	r2, [r5, r3]
    d9c8:	2488      	movs	r4, #136	; 0x88
    d9ca:	23e8      	movs	r3, #232	; 0xe8
    d9cc:	50ea      	str	r2, [r5, r3]
    d9ce:	592a      	ldr	r2, [r5, r4]
    d9d0:	23ec      	movs	r3, #236	; 0xec
    d9d2:	50ea      	str	r2, [r5, r3]
    d9d4:	238c      	movs	r3, #140	; 0x8c
    d9d6:	58ea      	ldr	r2, [r5, r3]
    d9d8:	2386      	movs	r3, #134	; 0x86
    d9da:	005b      	lsls	r3, r3, #1
    d9dc:	50ea      	str	r2, [r5, r3]
    d9de:	2390      	movs	r3, #144	; 0x90
    d9e0:	58ea      	ldr	r2, [r5, r3]
    d9e2:	2388      	movs	r3, #136	; 0x88
    d9e4:	005b      	lsls	r3, r3, #1
    d9e6:	50ea      	str	r2, [r5, r3]
    d9e8:	444d      	add	r5, r9
    d9ea:	682a      	ldr	r2, [r5, #0]
    d9ec:	238a      	movs	r3, #138	; 0x8a
    d9ee:	005b      	lsls	r3, r3, #1
    d9f0:	4658      	mov	r0, fp
    d9f2:	50c2      	str	r2, [r0, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:778
		}
	}
	eigencompute(pthisMagCal->fmatA, pthisMagCal->fvecA, pthisMagCal->fmatB, 3);
    d9f4:	990e      	ldr	r1, [sp, #56]	; 0x38
    d9f6:	980a      	ldr	r0, [sp, #40]	; 0x28
    d9f8:	9a08      	ldr	r2, [sp, #32]
    d9fa:	2303      	movs	r3, #3
    d9fc:	f000 fa2c 	bl	de58 <eigencompute>
    da00:	9c08      	ldr	r4, [sp, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:781

	// set pthisMagCal->fmatB to be eigenvectors . diag(sqrt(sqrt(eigenvalues))) = fmatB . diag(sqrt(sqrt(fvecA))
	for (j = 0; j < 3; j++) // loop over columns j
    da02:	2500      	movs	r5, #0
    da04:	21c8      	movs	r1, #200	; 0xc8
    da06:	0049      	lsls	r1, r1, #1
    da08:	1863      	adds	r3, r4, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:783
	{
		ftmp = sqrtf(sqrtf(fabs(pthisMagCal->fvecA[j])));
    da0a:	6818      	ldr	r0, [r3, #0]
    da0c:	3501      	adds	r5, #1
    da0e:	0040      	lsls	r0, r0, #1
    da10:	0840      	lsrs	r0, r0, #1
    da12:	f005 fd3d 	bl	13490 <sqrtf>
    da16:	f005 fd3b 	bl	13490 <sqrtf>
    da1a:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:786
		for (i = 0; i < 3; i++) // loop over rows i
		{
			pthisMagCal->fmatB[i][j] *= ftmp;
    da1c:	1c31      	adds	r1, r6, #0
    da1e:	6820      	ldr	r0, [r4, #0]
    da20:	f7f3 f9b8 	bl	d94 <__aeabi_fmul>
    da24:	1c31      	adds	r1, r6, #0
    da26:	6020      	str	r0, [r4, #0]
    da28:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    da2a:	f7f3 f9b3 	bl	d94 <__aeabi_fmul>
    da2e:	1c31      	adds	r1, r6, #0
    da30:	62a0      	str	r0, [r4, #40]	; 0x28
    da32:	6d20      	ldr	r0, [r4, #80]	; 0x50
    da34:	f7f3 f9ae 	bl	d94 <__aeabi_fmul>
    da38:	b2ed      	uxtb	r5, r5
    da3a:	6520      	str	r0, [r4, #80]	; 0x50
    da3c:	3404      	adds	r4, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:781
		}
	}
	eigencompute(pthisMagCal->fmatA, pthisMagCal->fvecA, pthisMagCal->fmatB, 3);

	// set pthisMagCal->fmatB to be eigenvectors . diag(sqrt(sqrt(eigenvalues))) = fmatB . diag(sqrt(sqrt(fvecA))
	for (j = 0; j < 3; j++) // loop over columns j
    da3e:	2d03      	cmp	r5, #3
    da40:	d1e0      	bne.n	da04 <fUpdateCalibration10EIG+0x880>
    da42:	9e08      	ldr	r6, [sp, #32]
    da44:	2400      	movs	r4, #0
    da46:	6875      	ldr	r5, [r6, #4]
    da48:	6833      	ldr	r3, [r6, #0]
    da4a:	9508      	str	r5, [sp, #32]
    da4c:	68b5      	ldr	r5, [r6, #8]
    da4e:	469a      	mov	sl, r3
    da50:	9506      	str	r5, [sp, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:781 (discriminator 1)
    da52:	46a9      	mov	r9, r5
    da54:	1c18      	adds	r0, r3, #0
    da56:	9d08      	ldr	r5, [sp, #32]
    da58:	0063      	lsls	r3, r4, #1
    da5a:	b2e7      	uxtb	r7, r4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:802 (discriminator 1)
		{
			pthisMagCal->ftrinvW[i][j] = 0.0F;
			// accumulate the matrix product
			for (k = 0; k < 3; k++)
			{
				pthisMagCal->ftrinvW[i][j] += pthisMagCal->fmatB[i][k] * pthisMagCal->fmatB[j][k];
    da5c:	191b      	adds	r3, r3, r4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:781 (discriminator 1)
		}
	}
	eigencompute(pthisMagCal->fmatA, pthisMagCal->fvecA, pthisMagCal->fmatB, 3);

	// set pthisMagCal->fmatB to be eigenvectors . diag(sqrt(sqrt(eigenvalues))) = fmatB . diag(sqrt(sqrt(fvecA))
	for (j = 0; j < 3; j++) // loop over columns j
    da5e:	46a8      	mov	r8, r5
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:802 (discriminator 1)
		{
			pthisMagCal->ftrinvW[i][j] = 0.0F;
			// accumulate the matrix product
			for (k = 0; k < 3; k++)
			{
				pthisMagCal->ftrinvW[i][j] += pthisMagCal->fmatB[i][k] * pthisMagCal->fmatB[j][k];
    da60:	930a      	str	r3, [sp, #40]	; 0x28
    da62:	b27d      	sxtb	r5, r7
    da64:	e011      	b.n	da8a <fUpdateCalibration10EIG+0x906>
    da66:	00ab      	lsls	r3, r5, #2
    da68:	195b      	adds	r3, r3, r5
    da6a:	00db      	lsls	r3, r3, #3
    da6c:	2092      	movs	r0, #146	; 0x92
    da6e:	445b      	add	r3, fp
    da70:	0080      	lsls	r0, r0, #2
    da72:	2193      	movs	r1, #147	; 0x93
    da74:	181a      	adds	r2, r3, r0
    da76:	0089      	lsls	r1, r1, #2
    da78:	6850      	ldr	r0, [r2, #4]
    da7a:	185a      	adds	r2, r3, r1
    da7c:	6852      	ldr	r2, [r2, #4]
    da7e:	4690      	mov	r8, r2
    da80:	2294      	movs	r2, #148	; 0x94
    da82:	0092      	lsls	r2, r2, #2
    da84:	189b      	adds	r3, r3, r2
    da86:	685b      	ldr	r3, [r3, #4]
    da88:	4699      	mov	r9, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:802
    da8a:	4651      	mov	r1, sl
    da8c:	f7f3 f982 	bl	d94 <__aeabi_fmul>
    da90:	2100      	movs	r1, #0
    da92:	f7f2 fe2f 	bl	6f4 <__aeabi_fadd>
    da96:	9908      	ldr	r1, [sp, #32]
    da98:	9009      	str	r0, [sp, #36]	; 0x24
    da9a:	4640      	mov	r0, r8
    da9c:	f7f3 f97a 	bl	d94 <__aeabi_fmul>
    daa0:	1c01      	adds	r1, r0, #0
    daa2:	9809      	ldr	r0, [sp, #36]	; 0x24
    daa4:	f7f2 fe26 	bl	6f4 <__aeabi_fadd>
    daa8:	9906      	ldr	r1, [sp, #24]
    daaa:	4680      	mov	r8, r0
    daac:	4648      	mov	r0, r9
    daae:	f7f3 f971 	bl	d94 <__aeabi_fmul>
    dab2:	1c01      	adds	r1, r0, #0
    dab4:	4640      	mov	r0, r8
    dab6:	f7f2 fe1d 	bl	6f4 <__aeabi_fadd>
    daba:	990a      	ldr	r1, [sp, #40]	; 0x28
    dabc:	465a      	mov	r2, fp
    dabe:	194b      	adds	r3, r1, r5
    dac0:	3312      	adds	r3, #18
    dac2:	009b      	lsls	r3, r3, #2
    dac4:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:805
			}
			// copy to below diagonal element
			pthisMagCal->ftrinvW[j][i] = pthisMagCal->ftrinvW[i][j];
    dac6:	006b      	lsls	r3, r5, #1
    dac8:	195b      	adds	r3, r3, r5
    daca:	191b      	adds	r3, r3, r4
    dacc:	3701      	adds	r7, #1
    dace:	3312      	adds	r3, #18
    dad0:	b2ff      	uxtb	r7, r7
    dad2:	009b      	lsls	r3, r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:796
	// = fmatB * fmatB^T = sqrt(fA) (guaranteed symmetric)
	// loop over rows
	for (i = 0; i < 3; i++)
	{
		// loop over on and above diagonal columns
		for (j = i; j < 3; j++)
    dad4:	b27d      	sxtb	r5, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:805
			for (k = 0; k < 3; k++)
			{
				pthisMagCal->ftrinvW[i][j] += pthisMagCal->fmatB[i][k] * pthisMagCal->fmatB[j][k];
			}
			// copy to below diagonal element
			pthisMagCal->ftrinvW[j][i] = pthisMagCal->ftrinvW[i][j];
    dad6:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:796
	// = fmatB * fmatB^T = sqrt(fA) (guaranteed symmetric)
	// loop over rows
	for (i = 0; i < 3; i++)
	{
		// loop over on and above diagonal columns
		for (j = i; j < 3; j++)
    dad8:	2d02      	cmp	r5, #2
    dada:	ddc4      	ble.n	da66 <fUpdateCalibration10EIG+0x8e2>
    dadc:	3401      	adds	r4, #1
    dade:	3628      	adds	r6, #40	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:793
	}

	// set ftrinvW to eigenvectors * diag(sqrt(eigenvalues)) * eigenvectors^T
	// = fmatB * fmatB^T = sqrt(fA) (guaranteed symmetric)
	// loop over rows
	for (i = 0; i < 3; i++)
    dae0:	2c03      	cmp	r4, #3
    dae2:	d1b0      	bne.n	da46 <fUpdateCalibration10EIG+0x8c2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:810
			pthisMagCal->ftrinvW[j][i] = pthisMagCal->ftrinvW[i][j];
		}
	}

	return;
}
    dae4:	b019      	add	sp, #100	; 0x64
    dae6:	bc3c      	pop	{r2, r3, r4, r5}
    dae8:	4690      	mov	r8, r2
    daea:	4699      	mov	r9, r3
    daec:	46a2      	mov	sl, r4
    daee:	46ab      	mov	fp, r5
    daf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    daf2:	9d06      	ldr	r5, [sp, #24]
    daf4:	2090      	movs	r0, #144	; 0x90
    daf6:	00c0      	lsls	r0, r0, #3
    daf8:	182b      	adds	r3, r5, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:643
				// use first valid magnetic buffer entry as estimate for offset to help solution (bit counts)
				if (iCount == 0)
				{
					for (l = X; l <= Z; l++)
					{
						iOffset[l] = pthisMagBuffer->iBpFast[l][j][k];
    dafa:	881b      	ldrh	r3, [r3, #0]
    dafc:	2190      	movs	r1, #144	; 0x90
    dafe:	0089      	lsls	r1, r1, #2
    db00:	9310      	str	r3, [sp, #64]	; 0x40
    db02:	186b      	adds	r3, r5, r1
    db04:	881b      	ldrh	r3, [r3, #0]
    db06:	882d      	ldrh	r5, [r5, #0]
    db08:	2600      	movs	r6, #0
    db0a:	950f      	str	r5, [sp, #60]	; 0x3c
    db0c:	9311      	str	r3, [sp, #68]	; 0x44
    db0e:	1c35      	adds	r5, r6, #0
    db10:	1c37      	adds	r7, r6, #0
    db12:	f7ff fbb0 	bl	d276 <fUpdateCalibration10EIG+0xf2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:690

	// store the number of measurements accumulated (defensive programming, should never be needed)
	pthisMagBuffer->iMagBufferCount = iCount;

	// copy the above diagonal elements of symmetric product matrix fmatA to below the diagonal
	for (m = 1; m < 10; m++)
    db16:	3001      	adds	r0, #1
    db18:	b2c0      	uxtb	r0, r0
    db1a:	e4ac      	b.n	d476 <fUpdateCalibration10EIG+0x2f2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:721

	// negate entire solution if A has negative determinant
	det = f3x3matrixDetA(pthisMagCal->fA);
	if (det < 0.0F)
	{
		f3x3matrixAeqMinusA(pthisMagCal->fA);
    db1c:	9806      	ldr	r0, [sp, #24]
    db1e:	f000 f871 	bl	dc04 <f3x3matrixAeqMinusA>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:722
		pthisMagCal->fmatB[6][j] = -pthisMagCal->fmatB[6][j];
    db22:	23cf      	movs	r3, #207	; 0xcf
    db24:	009b      	lsls	r3, r3, #2
    db26:	58e0      	ldr	r0, [r4, r3]
    db28:	2180      	movs	r1, #128	; 0x80
    db2a:	0609      	lsls	r1, r1, #24
    db2c:	1842      	adds	r2, r0, r1
    db2e:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:723
		pthisMagCal->fmatB[7][j] = -pthisMagCal->fmatB[7][j];
    db30:	23d9      	movs	r3, #217	; 0xd9
    db32:	009b      	lsls	r3, r3, #2
    db34:	58e5      	ldr	r5, [r4, r3]
    db36:	186a      	adds	r2, r5, r1
    db38:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:724
		pthisMagCal->fmatB[8][j] = -pthisMagCal->fmatB[8][j];
    db3a:	23e3      	movs	r3, #227	; 0xe3
    db3c:	009b      	lsls	r3, r3, #2
    db3e:	58e0      	ldr	r0, [r4, r3]
    db40:	1842      	adds	r2, r0, r1
    db42:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:725
		pthisMagCal->fmatB[9][j] = -pthisMagCal->fmatB[9][j];
    db44:	23ed      	movs	r3, #237	; 0xed
    db46:	009b      	lsls	r3, r3, #2
    db48:	58e5      	ldr	r5, [r4, r3]
    db4a:	186a      	adds	r2, r5, r1
    db4c:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/magnetic.c:726
		det = -det;
    db4e:	1c0b      	adds	r3, r1, #0
    db50:	4453      	add	r3, sl
    db52:	469a      	mov	sl, r3
    db54:	e5c2      	b.n	d6dc <fUpdateCalibration10EIG+0x558>
    db56:	46c0      	nop			; (mov r8, r8)
    db58:	00000b56 	.word	0x00000b56
    db5c:	42480000 	.word	0x42480000
    db60:	beaaaaab 	.word	0xbeaaaaab
    db64:	be2aaaab 	.word	0xbe2aaaab

0000db68 <main>:
main():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/main.c:65
/* User includes (#include below this line is not maintained by Processor Expert) */

/*lint -save  -e970 Disable MISRA rule (6.3) checking. */
int main(void)
/*lint -restore Enable MISRA rule (6.3) checking. */
{
    db68:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/main.c:69
  /* Write your local variable definition here */

  /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
  PE_low_level_init();
    db6a:	f004 fca7 	bl	124bc <PE_low_level_init>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/main.c:78
  /* For example: for(;;) { } */

  /*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
    db6e:	f003 ff01 	bl	11974 <_mqxlite>
    db72:	e7fe      	b.n	db72 <main+0xa>

0000db74 <f3x3matrixAeqI>:
f3x3matrixAeqI():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
		}
		A[i][i] = 1.0F;
    db74:	22fe      	movs	r2, #254	; 0xfe
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:51
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
    db76:	2300      	movs	r3, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		}
		A[i][i] = 1.0F;
    db78:	0592      	lsls	r2, r2, #22
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:51
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
    db7a:	6043      	str	r3, [r0, #4]
    db7c:	6083      	str	r3, [r0, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		}
		A[i][i] = 1.0F;
    db7e:	6002      	str	r2, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:51
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
    db80:	60c3      	str	r3, [r0, #12]
    db82:	6143      	str	r3, [r0, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		}
		A[i][i] = 1.0F;
    db84:	6102      	str	r2, [r0, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:51
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
    db86:	6183      	str	r3, [r0, #24]
    db88:	61c3      	str	r3, [r0, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		}
		A[i][i] = 1.0F;
    db8a:	6202      	str	r2, [r0, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:56
	}
	return;
}
    db8c:	4770      	bx	lr
    db8e:	46c0      	nop			; (mov r8, r8)

0000db90 <f3x3matrixAeqScalar>:
f3x3matrixAeqScalar():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:91
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = Scalar;
    db90:	6001      	str	r1, [r0, #0]
    db92:	6041      	str	r1, [r0, #4]
    db94:	6081      	str	r1, [r0, #8]
    db96:	60c1      	str	r1, [r0, #12]
    db98:	6101      	str	r1, [r0, #16]
    db9a:	6141      	str	r1, [r0, #20]
    db9c:	6181      	str	r1, [r0, #24]
    db9e:	61c1      	str	r1, [r0, #28]
    dba0:	6201      	str	r1, [r0, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:95
		}
	}
	return;
}
    dba2:	4770      	bx	lr

0000dba4 <f3x3matrixAeqAxScalar>:
f3x3matrixAeqAxScalar():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:99

// function multiplies all elements of 3x3 matrix A by the specified scalar
void f3x3matrixAeqAxScalar(float A[][3], float Scalar)
{
    dba4:	b538      	push	{r3, r4, r5, lr}
    dba6:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:109
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) *= Scalar;
    dba8:	6800      	ldr	r0, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:99
	return;
}

// function multiplies all elements of 3x3 matrix A by the specified scalar
void f3x3matrixAeqAxScalar(float A[][3], float Scalar)
{
    dbaa:	1c0d      	adds	r5, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:109
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) *= Scalar;
    dbac:	f7f3 f8f2 	bl	d94 <__aeabi_fmul>
    dbb0:	1c29      	adds	r1, r5, #0
    dbb2:	6020      	str	r0, [r4, #0]
    dbb4:	6860      	ldr	r0, [r4, #4]
    dbb6:	f7f3 f8ed 	bl	d94 <__aeabi_fmul>
    dbba:	1c29      	adds	r1, r5, #0
    dbbc:	6060      	str	r0, [r4, #4]
    dbbe:	68a0      	ldr	r0, [r4, #8]
    dbc0:	f7f3 f8e8 	bl	d94 <__aeabi_fmul>
    dbc4:	1c29      	adds	r1, r5, #0
    dbc6:	60a0      	str	r0, [r4, #8]
    dbc8:	68e0      	ldr	r0, [r4, #12]
    dbca:	f7f3 f8e3 	bl	d94 <__aeabi_fmul>
    dbce:	1c29      	adds	r1, r5, #0
    dbd0:	60e0      	str	r0, [r4, #12]
    dbd2:	6920      	ldr	r0, [r4, #16]
    dbd4:	f7f3 f8de 	bl	d94 <__aeabi_fmul>
    dbd8:	1c29      	adds	r1, r5, #0
    dbda:	6120      	str	r0, [r4, #16]
    dbdc:	6960      	ldr	r0, [r4, #20]
    dbde:	f7f3 f8d9 	bl	d94 <__aeabi_fmul>
    dbe2:	1c29      	adds	r1, r5, #0
    dbe4:	6160      	str	r0, [r4, #20]
    dbe6:	69a0      	ldr	r0, [r4, #24]
    dbe8:	f7f3 f8d4 	bl	d94 <__aeabi_fmul>
    dbec:	1c29      	adds	r1, r5, #0
    dbee:	61a0      	str	r0, [r4, #24]
    dbf0:	69e0      	ldr	r0, [r4, #28]
    dbf2:	f7f3 f8cf 	bl	d94 <__aeabi_fmul>
    dbf6:	1c29      	adds	r1, r5, #0
    dbf8:	61e0      	str	r0, [r4, #28]
    dbfa:	6a20      	ldr	r0, [r4, #32]
    dbfc:	f7f3 f8ca 	bl	d94 <__aeabi_fmul>
    dc00:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:114
		}
	}

	return;
}
    dc02:	bd38      	pop	{r3, r4, r5, pc}

0000dc04 <f3x3matrixAeqMinusA>:
f3x3matrixAeqMinusA():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:128
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*pAij = -*pAij;
    dc04:	6801      	ldr	r1, [r0, #0]
    dc06:	2280      	movs	r2, #128	; 0x80
    dc08:	0612      	lsls	r2, r2, #24
    dc0a:	188b      	adds	r3, r1, r2
    dc0c:	6841      	ldr	r1, [r0, #4]
    dc0e:	6003      	str	r3, [r0, #0]
    dc10:	188b      	adds	r3, r1, r2
    dc12:	6881      	ldr	r1, [r0, #8]
    dc14:	6043      	str	r3, [r0, #4]
    dc16:	188b      	adds	r3, r1, r2
    dc18:	68c1      	ldr	r1, [r0, #12]
    dc1a:	6083      	str	r3, [r0, #8]
    dc1c:	188b      	adds	r3, r1, r2
    dc1e:	6901      	ldr	r1, [r0, #16]
    dc20:	60c3      	str	r3, [r0, #12]
    dc22:	188b      	adds	r3, r1, r2
    dc24:	6941      	ldr	r1, [r0, #20]
    dc26:	6103      	str	r3, [r0, #16]
    dc28:	188b      	adds	r3, r1, r2
    dc2a:	6981      	ldr	r1, [r0, #24]
    dc2c:	6143      	str	r3, [r0, #20]
    dc2e:	188b      	adds	r3, r1, r2
    dc30:	69c1      	ldr	r1, [r0, #28]
    dc32:	6183      	str	r3, [r0, #24]
    dc34:	188b      	adds	r3, r1, r2
    dc36:	6a01      	ldr	r1, [r0, #32]
    dc38:	61c3      	str	r3, [r0, #28]
    dc3a:	188b      	adds	r3, r1, r2
    dc3c:	6203      	str	r3, [r0, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:134
			pAij++;
		}
	}

	return;
}
    dc3e:	4770      	bx	lr

0000dc40 <f3x3matrixAeqInvSymB>:
f3x3matrixAeqInvSymB():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:139

// function directly calculates the symmetric inverse of a symmetric 3x3 matrix
// only the on and above diagonal terms in B are used and need to be specified
void f3x3matrixAeqInvSymB(float A[][3], float B[][3])
{
    dc40:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc42:	465f      	mov	r7, fp
    dc44:	4656      	mov	r6, sl
    dc46:	464d      	mov	r5, r9
    dc48:	4644      	mov	r4, r8
    dc4a:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:146
	float fB12B02mB01B22;	// B[1][2] * B[0][2] - B[0][1] * B[2][2]
	float fB01B12mB11B02;	// B[0][1] * B[1][2] - B[1][1] * B[0][2]
	float ftmp;				// determinant and then reciprocal

	// calculate useful products
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
    dc4c:	690b      	ldr	r3, [r1, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:139
}

// function directly calculates the symmetric inverse of a symmetric 3x3 matrix
// only the on and above diagonal terms in B are used and need to be specified
void f3x3matrixAeqInvSymB(float A[][3], float B[][3])
{
    dc4e:	b083      	sub	sp, #12
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:146
	float fB12B02mB01B22;	// B[1][2] * B[0][2] - B[0][1] * B[2][2]
	float fB01B12mB11B02;	// B[0][1] * B[1][2] - B[1][1] * B[0][2]
	float ftmp;				// determinant and then reciprocal

	// calculate useful products
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
    dc50:	4699      	mov	r9, r3
    dc52:	6a0b      	ldr	r3, [r1, #32]
    dc54:	694e      	ldr	r6, [r1, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:139
}

// function directly calculates the symmetric inverse of a symmetric 3x3 matrix
// only the on and above diagonal terms in B are used and need to be specified
void f3x3matrixAeqInvSymB(float A[][3], float B[][3])
{
    dc56:	1c0d      	adds	r5, r1, #0
    dc58:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:146
	float fB12B02mB01B22;	// B[1][2] * B[0][2] - B[0][1] * B[2][2]
	float fB01B12mB11B02;	// B[0][1] * B[1][2] - B[1][1] * B[0][2]
	float ftmp;				// determinant and then reciprocal

	// calculate useful products
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
    dc5a:	1c19      	adds	r1, r3, #0
    dc5c:	4648      	mov	r0, r9
    dc5e:	469a      	mov	sl, r3
    dc60:	f7f3 f898 	bl	d94 <__aeabi_fmul>
    dc64:	1c31      	adds	r1, r6, #0
    dc66:	1c07      	adds	r7, r0, #0
    dc68:	1c30      	adds	r0, r6, #0
    dc6a:	f7f3 f893 	bl	d94 <__aeabi_fmul>
    dc6e:	1c01      	adds	r1, r0, #0
    dc70:	1c38      	adds	r0, r7, #0
    dc72:	f7f3 f9b9 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:147
	fB12B02mB01B22 = B[1][2] * B[0][2] - B[0][1] * B[2][2];
    dc76:	68af      	ldr	r7, [r5, #8]
    dc78:	686b      	ldr	r3, [r5, #4]
    dc7a:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:146
	float fB12B02mB01B22;	// B[1][2] * B[0][2] - B[0][1] * B[2][2]
	float fB01B12mB11B02;	// B[0][1] * B[1][2] - B[1][1] * B[0][2]
	float ftmp;				// determinant and then reciprocal

	// calculate useful products
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
    dc7c:	4683      	mov	fp, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:147
	fB12B02mB01B22 = B[1][2] * B[0][2] - B[0][1] * B[2][2];
    dc7e:	1c30      	adds	r0, r6, #0
    dc80:	4698      	mov	r8, r3
    dc82:	f7f3 f887 	bl	d94 <__aeabi_fmul>
    dc86:	4641      	mov	r1, r8
    dc88:	9001      	str	r0, [sp, #4]
    dc8a:	4650      	mov	r0, sl
    dc8c:	f7f3 f882 	bl	d94 <__aeabi_fmul>
    dc90:	1c01      	adds	r1, r0, #0
    dc92:	9801      	ldr	r0, [sp, #4]
    dc94:	f7f3 f9a8 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:148
	fB01B12mB11B02 = B[0][1] * B[1][2] - B[1][1] * B[0][2];
    dc98:	4641      	mov	r1, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:147
	float fB01B12mB11B02;	// B[0][1] * B[1][2] - B[1][1] * B[0][2]
	float ftmp;				// determinant and then reciprocal

	// calculate useful products
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
	fB12B02mB01B22 = B[1][2] * B[0][2] - B[0][1] * B[2][2];
    dc9a:	4682      	mov	sl, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:148
	fB01B12mB11B02 = B[0][1] * B[1][2] - B[1][1] * B[0][2];
    dc9c:	1c30      	adds	r0, r6, #0
    dc9e:	f7f3 f879 	bl	d94 <__aeabi_fmul>
    dca2:	1c39      	adds	r1, r7, #0
    dca4:	1c06      	adds	r6, r0, #0
    dca6:	4648      	mov	r0, r9
    dca8:	f7f3 f874 	bl	d94 <__aeabi_fmul>
    dcac:	1c01      	adds	r1, r0, #0
    dcae:	1c30      	adds	r0, r6, #0
    dcb0:	f7f3 f99a 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:151

	// set ftmp to the determinant of the input matrix B
	ftmp = B[0][0] * fB11B22mB12B12 + B[0][1] * fB12B02mB01B22 + B[0][2] * fB01B12mB11B02;
    dcb4:	6829      	ldr	r1, [r5, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:148
	float ftmp;				// determinant and then reciprocal

	// calculate useful products
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
	fB12B02mB01B22 = B[1][2] * B[0][2] - B[0][1] * B[2][2];
	fB01B12mB11B02 = B[0][1] * B[1][2] - B[1][1] * B[0][2];
    dcb6:	4681      	mov	r9, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:151

	// set ftmp to the determinant of the input matrix B
	ftmp = B[0][0] * fB11B22mB12B12 + B[0][1] * fB12B02mB01B22 + B[0][2] * fB01B12mB11B02;
    dcb8:	4658      	mov	r0, fp
    dcba:	f7f3 f86b 	bl	d94 <__aeabi_fmul>
    dcbe:	4651      	mov	r1, sl
    dcc0:	1c06      	adds	r6, r0, #0
    dcc2:	4640      	mov	r0, r8
    dcc4:	f7f3 f866 	bl	d94 <__aeabi_fmul>
    dcc8:	1c01      	adds	r1, r0, #0
    dcca:	1c30      	adds	r0, r6, #0
    dccc:	f7f2 fd12 	bl	6f4 <__aeabi_fadd>
    dcd0:	4649      	mov	r1, r9
    dcd2:	1c06      	adds	r6, r0, #0
    dcd4:	1c38      	adds	r0, r7, #0
    dcd6:	f7f3 f85d 	bl	d94 <__aeabi_fmul>
    dcda:	1c01      	adds	r1, r0, #0
    dcdc:	1c30      	adds	r0, r6, #0
    dcde:	f7f2 fd09 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:154

	// set A to the inverse of B for any determinant except zero
	if (ftmp != 0.0F)
    dce2:	2600      	movs	r6, #0
    dce4:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:151
	fB11B22mB12B12 = B[1][1] * B[2][2] - B[1][2] * B[1][2];
	fB12B02mB01B22 = B[1][2] * B[0][2] - B[0][1] * B[2][2];
	fB01B12mB11B02 = B[0][1] * B[1][2] - B[1][1] * B[0][2];

	// set ftmp to the determinant of the input matrix B
	ftmp = B[0][0] * fB11B22mB12B12 + B[0][1] * fB12B02mB01B22 + B[0][2] * fB01B12mB11B02;
    dce6:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:154

	// set A to the inverse of B for any determinant except zero
	if (ftmp != 0.0F)
    dce8:	f7f2 fcd6 	bl	698 <__aeabi_fcmpeq>
    dcec:	2800      	cmp	r0, #0
    dcee:	d011      	beq.n	dd14 <f3x3matrixAeqInvSymB+0xd4>
f3x3matrixAeqI():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
		}
		A[i][i] = 1.0F;
    dcf0:	23fe      	movs	r3, #254	; 0xfe
    dcf2:	059b      	lsls	r3, r3, #22
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:51
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
    dcf4:	6066      	str	r6, [r4, #4]
    dcf6:	60a6      	str	r6, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		}
		A[i][i] = 1.0F;
    dcf8:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:51
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
    dcfa:	60e6      	str	r6, [r4, #12]
    dcfc:	6166      	str	r6, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		}
		A[i][i] = 1.0F;
    dcfe:	6123      	str	r3, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:51
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < 3; j++)
		{
			*(pAij++) = 0.0F;
    dd00:	61a6      	str	r6, [r4, #24]
    dd02:	61e6      	str	r6, [r4, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:53
		}
		A[i][i] = 1.0F;
    dd04:	6223      	str	r3, [r4, #32]
f3x3matrixAeqInvSymB():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:170
	{
		// provide the identity matrix if the determinant is zero
		f3x3matrixAeqI(A);
	}
	return;
}
    dd06:	b003      	add	sp, #12
    dd08:	bc3c      	pop	{r2, r3, r4, r5}
    dd0a:	4690      	mov	r8, r2
    dd0c:	4699      	mov	r9, r3
    dd0e:	46a2      	mov	sl, r4
    dd10:	46ab      	mov	fp, r5
    dd12:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:156
	ftmp = B[0][0] * fB11B22mB12B12 + B[0][1] * fB12B02mB01B22 + B[0][2] * fB01B12mB11B02;

	// set A to the inverse of B for any determinant except zero
	if (ftmp != 0.0F)
	{
		ftmp = 1.0F / ftmp;
    dd14:	20fe      	movs	r0, #254	; 0xfe
    dd16:	1c39      	adds	r1, r7, #0
    dd18:	0580      	lsls	r0, r0, #22
    dd1a:	f7f2 fe57 	bl	9cc <__aeabi_fdiv>
    dd1e:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:157
		A[0][0] = fB11B22mB12B12 * ftmp;
    dd20:	1c31      	adds	r1, r6, #0
    dd22:	4658      	mov	r0, fp
    dd24:	f7f3 f836 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:158
		A[1][0] = A[0][1] = fB12B02mB01B22 * ftmp;
    dd28:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:157

	// set A to the inverse of B for any determinant except zero
	if (ftmp != 0.0F)
	{
		ftmp = 1.0F / ftmp;
		A[0][0] = fB11B22mB12B12 * ftmp;
    dd2a:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:158
		A[1][0] = A[0][1] = fB12B02mB01B22 * ftmp;
    dd2c:	4650      	mov	r0, sl
    dd2e:	f7f3 f831 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:159
		A[2][0] = A[0][2] = fB01B12mB11B02 * ftmp;
    dd32:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:158
	// set A to the inverse of B for any determinant except zero
	if (ftmp != 0.0F)
	{
		ftmp = 1.0F / ftmp;
		A[0][0] = fB11B22mB12B12 * ftmp;
		A[1][0] = A[0][1] = fB12B02mB01B22 * ftmp;
    dd34:	6060      	str	r0, [r4, #4]
    dd36:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:159
		A[2][0] = A[0][2] = fB01B12mB11B02 * ftmp;
    dd38:	4648      	mov	r0, r9
    dd3a:	f7f3 f82b 	bl	d94 <__aeabi_fmul>
    dd3e:	60a0      	str	r0, [r4, #8]
    dd40:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:160
		A[1][1] = (B[0][0] * B[2][2] - B[0][2] * B[0][2]) * ftmp;
    dd42:	682f      	ldr	r7, [r5, #0]
    dd44:	68ab      	ldr	r3, [r5, #8]
    dd46:	6a29      	ldr	r1, [r5, #32]
    dd48:	1c38      	adds	r0, r7, #0
    dd4a:	4698      	mov	r8, r3
    dd4c:	f7f3 f822 	bl	d94 <__aeabi_fmul>
    dd50:	4641      	mov	r1, r8
    dd52:	4681      	mov	r9, r0
    dd54:	4640      	mov	r0, r8
    dd56:	f7f3 f81d 	bl	d94 <__aeabi_fmul>
    dd5a:	1c01      	adds	r1, r0, #0
    dd5c:	4648      	mov	r0, r9
    dd5e:	f7f3 f943 	bl	fe8 <__aeabi_fsub>
    dd62:	1c31      	adds	r1, r6, #0
    dd64:	f7f3 f816 	bl	d94 <__aeabi_fmul>
    dd68:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:161
		A[2][1] = A[1][2] = (B[0][2] * B[0][1] - B[0][0] * B[1][2]) * ftmp;
    dd6a:	6869      	ldr	r1, [r5, #4]
    dd6c:	4640      	mov	r0, r8
    dd6e:	f7f3 f811 	bl	d94 <__aeabi_fmul>
    dd72:	6969      	ldr	r1, [r5, #20]
    dd74:	4680      	mov	r8, r0
    dd76:	1c38      	adds	r0, r7, #0
    dd78:	f7f3 f80c 	bl	d94 <__aeabi_fmul>
    dd7c:	1c01      	adds	r1, r0, #0
    dd7e:	4640      	mov	r0, r8
    dd80:	f7f3 f932 	bl	fe8 <__aeabi_fsub>
    dd84:	1c31      	adds	r1, r6, #0
    dd86:	f7f3 f805 	bl	d94 <__aeabi_fmul>
    dd8a:	6160      	str	r0, [r4, #20]
    dd8c:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:162
		A[2][2] = (B[0][0] * B[1][1] - B[0][1] * B[0][1]) * ftmp;
    dd8e:	686b      	ldr	r3, [r5, #4]
    dd90:	6929      	ldr	r1, [r5, #16]
    dd92:	1c38      	adds	r0, r7, #0
    dd94:	4698      	mov	r8, r3
    dd96:	f7f2 fffd 	bl	d94 <__aeabi_fmul>
    dd9a:	4641      	mov	r1, r8
    dd9c:	1c05      	adds	r5, r0, #0
    dd9e:	4640      	mov	r0, r8
    dda0:	f7f2 fff8 	bl	d94 <__aeabi_fmul>
    dda4:	1c01      	adds	r1, r0, #0
    dda6:	1c28      	adds	r0, r5, #0
    dda8:	f7f3 f91e 	bl	fe8 <__aeabi_fsub>
    ddac:	1c31      	adds	r1, r6, #0
    ddae:	f7f2 fff1 	bl	d94 <__aeabi_fmul>
    ddb2:	6220      	str	r0, [r4, #32]
    ddb4:	e7a7      	b.n	dd06 <f3x3matrixAeqInvSymB+0xc6>
    ddb6:	46c0      	nop			; (mov r8, r8)

0000ddb8 <f3x3matrixDetA>:
f3x3matrixDetA():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:174
	return;
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
    ddb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:175
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
    ddba:	6a03      	ldr	r3, [r0, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:174
	return;
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
    ddbc:	465f      	mov	r7, fp
    ddbe:	4656      	mov	r6, sl
    ddc0:	464d      	mov	r5, r9
    ddc2:	4644      	mov	r4, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:175
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
    ddc4:	4699      	mov	r9, r3
    ddc6:	6943      	ldr	r3, [r0, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:174
	return;
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
    ddc8:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:175
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
    ddca:	6906      	ldr	r6, [r0, #16]
    ddcc:	469a      	mov	sl, r3
    ddce:	69c3      	ldr	r3, [r0, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:174
	return;
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
    ddd0:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:176
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
			A[X][Y] * (A[Y][Z] * A[Z][X] - A[Y][X] * A[Z][Z]) +
    ddd2:	6985      	ldr	r5, [r0, #24]
    ddd4:	68c7      	ldr	r7, [r0, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:175
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
    ddd6:	4649      	mov	r1, r9
    ddd8:	1c30      	adds	r0, r6, #0
    ddda:	4698      	mov	r8, r3
    dddc:	f7f2 ffda 	bl	d94 <__aeabi_fmul>
    dde0:	4641      	mov	r1, r8
    dde2:	4683      	mov	fp, r0
    dde4:	4650      	mov	r0, sl
    dde6:	f7f2 ffd5 	bl	d94 <__aeabi_fmul>
    ddea:	1c01      	adds	r1, r0, #0
    ddec:	4658      	mov	r0, fp
    ddee:	f7f3 f8fb 	bl	fe8 <__aeabi_fsub>
    ddf2:	6821      	ldr	r1, [r4, #0]
    ddf4:	f7f2 ffce 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:176
			A[X][Y] * (A[Y][Z] * A[Z][X] - A[Y][X] * A[Z][Z]) +
    ddf8:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:175
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
    ddfa:	4683      	mov	fp, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:176
			A[X][Y] * (A[Y][Z] * A[Z][X] - A[Y][X] * A[Z][Z]) +
    ddfc:	4650      	mov	r0, sl
    ddfe:	f7f2 ffc9 	bl	d94 <__aeabi_fmul>
    de02:	1c39      	adds	r1, r7, #0
    de04:	4682      	mov	sl, r0
    de06:	4648      	mov	r0, r9
    de08:	f7f2 ffc4 	bl	d94 <__aeabi_fmul>
    de0c:	1c01      	adds	r1, r0, #0
    de0e:	4650      	mov	r0, sl
    de10:	f7f3 f8ea 	bl	fe8 <__aeabi_fsub>
    de14:	6861      	ldr	r1, [r4, #4]
    de16:	f7f2 ffbd 	bl	d94 <__aeabi_fmul>
    de1a:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:175
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
    de1c:	4658      	mov	r0, fp
    de1e:	f7f2 fc69 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:177
			A[X][Y] * (A[Y][Z] * A[Z][X] - A[Y][X] * A[Z][Z]) +
			A[X][Z] * (A[Y][X] * A[Z][Y] - A[Y][Y] * A[Z][X]));
    de22:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:175
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
    de24:	4681      	mov	r9, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:177
			A[X][Y] * (A[Y][Z] * A[Z][X] - A[Y][X] * A[Z][Z]) +
			A[X][Z] * (A[Y][X] * A[Z][Y] - A[Y][Y] * A[Z][X]));
    de26:	4640      	mov	r0, r8
    de28:	f7f2 ffb4 	bl	d94 <__aeabi_fmul>
    de2c:	1c29      	adds	r1, r5, #0
    de2e:	1c07      	adds	r7, r0, #0
    de30:	1c30      	adds	r0, r6, #0
    de32:	f7f2 ffaf 	bl	d94 <__aeabi_fmul>
    de36:	1c01      	adds	r1, r0, #0
    de38:	1c38      	adds	r0, r7, #0
    de3a:	f7f3 f8d5 	bl	fe8 <__aeabi_fsub>
    de3e:	68a1      	ldr	r1, [r4, #8]
    de40:	f7f2 ffa8 	bl	d94 <__aeabi_fmul>
    de44:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:175
}

// function calculates the determinant of a 3x3 matrix
float f3x3matrixDetA(float A[][3])
{
	return (A[X][X] * (A[Y][Y] * A[Z][Z] - A[Y][Z] * A[Z][Y]) +
    de46:	4648      	mov	r0, r9
    de48:	f7f2 fc54 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:178
			A[X][Y] * (A[Y][Z] * A[Z][X] - A[Y][X] * A[Z][Z]) +
			A[X][Z] * (A[Y][X] * A[Z][Y] - A[Y][Y] * A[Z][X]));
}
    de4c:	bc3c      	pop	{r2, r3, r4, r5}
    de4e:	4690      	mov	r8, r2
    de50:	4699      	mov	r9, r3
    de52:	46a2      	mov	sl, r4
    de54:	46ab      	mov	fp, r5
    de56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000de58 <eigencompute>:
eigencompute():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:187
// A[][] is changed on output.
// eigval[0..n-1] returns the eigenvalues of A[][].
// eigvec[0..n-1][0..n-1] returns the normalized eigenvectors of A[][]
// the eigenvectors are not sorted by value
void eigencompute(float A[][10], float eigval[], float eigvec[][10], int8 n)
{
    de58:	b5f0      	push	{r4, r5, r6, r7, lr}
    de5a:	465f      	mov	r7, fp
    de5c:	4656      	mov	r6, sl
    de5e:	464d      	mov	r5, r9
    de60:	4644      	mov	r4, r8
    de62:	b4f0      	push	{r4, r5, r6, r7}
    de64:	b095      	sub	sp, #84	; 0x54
    de66:	9005      	str	r0, [sp, #20]
    de68:	910b      	str	r1, [sp, #44]	; 0x2c
    de6a:	920d      	str	r2, [sp, #52]	; 0x34
    de6c:	9304      	str	r3, [sp, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:205
	int8 j;
	// timeout ctr for number of passes of the algorithm
	int8 ctr;

	// initialize eigenvectors matrix and eigenvalues array
	for (ir = 0; ir < n; ir++)
    de6e:	2b00      	cmp	r3, #0
    de70:	dc00      	bgt.n	de74 <eigencompute+0x1c>
    de72:	e228      	b.n	e2c6 <eigencompute+0x46e>
    de74:	1c18      	adds	r0, r3, #0
    de76:	3801      	subs	r0, #1
    de78:	b2c3      	uxtb	r3, r0
    de7a:	1c15      	adds	r5, r2, #0
    de7c:	3301      	adds	r3, #1
    de7e:	222c      	movs	r2, #44	; 0x2c
    de80:	435a      	muls	r2, r3
    de82:	1c0e      	adds	r6, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:211
	{
		// loop over all columns
		for (ic = 0; ic < n; ic++)
		{
			// set on diagonal and off-diagonal elements to zero
			eigvec[ir][ic] = 0.0F;
    de84:	9904      	ldr	r1, [sp, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:215
		}

		// correct the diagonal elements to 1.0
		eigvec[ir][ir] = 1.0F;
    de86:	27fe      	movs	r7, #254	; 0xfe
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:211
	{
		// loop over all columns
		for (ic = 0; ic < n; ic++)
		{
			// set on diagonal and off-diagonal elements to zero
			eigvec[ir][ic] = 0.0F;
    de88:	0089      	lsls	r1, r1, #2
    de8a:	9011      	str	r0, [sp, #68]	; 0x44
    de8c:	4691      	mov	r9, r2
    de8e:	4688      	mov	r8, r1
    de90:	2400      	movs	r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:215
		}

		// correct the diagonal elements to 1.0
		eigvec[ir][ir] = 1.0F;
    de92:	05bf      	lsls	r7, r7, #22
    de94:	1c28      	adds	r0, r5, #0
    de96:	4642      	mov	r2, r8
    de98:	2100      	movs	r1, #0
    de9a:	f007 f869 	bl	14f70 <memset>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:215 (discriminator 1)
    de9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:218 (discriminator 1)

		// initialize the array of eigenvalues to the diagonal elements of m
		eigval[ir] = A[ir][ir];
    dea0:	9b05      	ldr	r3, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:215 (discriminator 1)
			// set on diagonal and off-diagonal elements to zero
			eigvec[ir][ic] = 0.0F;
		}

		// correct the diagonal elements to 1.0
		eigvec[ir][ir] = 1.0F;
    dea2:	5117      	str	r7, [r2, r4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:218 (discriminator 1)

		// initialize the array of eigenvalues to the diagonal elements of m
		eigval[ir] = A[ir][ir];
    dea4:	591b      	ldr	r3, [r3, r4]
    dea6:	342c      	adds	r4, #44	; 0x2c
    dea8:	c608      	stmia	r6!, {r3}
    deaa:	3528      	adds	r5, #40	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:205 (discriminator 1)
	int8 j;
	// timeout ctr for number of passes of the algorithm
	int8 ctr;

	// initialize eigenvectors matrix and eigenvalues array
	for (ir = 0; ir < n; ir++)
    deac:	454c      	cmp	r4, r9
    deae:	d1f1      	bne.n	de94 <eigencompute+0x3c>
    deb0:	9811      	ldr	r0, [sp, #68]	; 0x44
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:211
	{
		// loop over all columns
		for (ic = 0; ic < n; ic++)
		{
			// set on diagonal and off-diagonal elements to zero
			eigvec[ir][ic] = 0.0F;
    deb2:	2110      	movs	r1, #16
    deb4:	b2c3      	uxtb	r3, r0
    deb6:	009a      	lsls	r2, r3, #2
    deb8:	18d3      	adds	r3, r2, r3
    deba:	005b      	lsls	r3, r3, #1
    debc:	9310      	str	r3, [sp, #64]	; 0x40
    debe:	9113      	str	r1, [sp, #76]	; 0x4c
    dec0:	9b05      	ldr	r3, [sp, #20]
    dec2:	9911      	ldr	r1, [sp, #68]	; 0x44
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:226
	// initialize the counter and loop until converged or NITERATIONS reached
	ctr = 0;
	do
	{
		// compute the absolute value of the above diagonal elements as exit criterion
		residue = 0.0F;
    dec4:	2200      	movs	r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:228
		// loop over rows excluding last row
		for (ir = 0; ir < n - 1; ir++)
    dec6:	2600      	movs	r6, #0
    dec8:	9d04      	ldr	r5, [sp, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:226
	// initialize the counter and loop until converged or NITERATIONS reached
	ctr = 0;
	do
	{
		// compute the absolute value of the above diagonal elements as exit criterion
		residue = 0.0F;
    deca:	9212      	str	r2, [sp, #72]	; 0x48
    decc:	1c37      	adds	r7, r6, #0
    dece:	1c10      	adds	r0, r2, #0
    ded0:	4699      	mov	r9, r3
    ded2:	4688      	mov	r8, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:228 (discriminator 1)
		// loop over rows excluding last row
		for (ir = 0; ir < n - 1; ir++)
    ded4:	b27a      	sxtb	r2, r7
    ded6:	4542      	cmp	r2, r8
    ded8:	da17      	bge.n	df0a <eigencompute+0xb2>
    deda:	3701      	adds	r7, #1
    dedc:	b2ff      	uxtb	r7, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:231
		{
			// loop over above diagonal columns
			for (ic = ir + 1; ic < n; ic++)
    dede:	b27b      	sxtb	r3, r7
    dee0:	429d      	cmp	r5, r3
    dee2:	ddf7      	ble.n	ded4 <eigencompute+0x7c>
    dee4:	0096      	lsls	r6, r2, #2
    dee6:	18b6      	adds	r6, r6, r2
    dee8:	00f6      	lsls	r6, r6, #3
    deea:	444e      	add	r6, r9
    deec:	1c3c      	adds	r4, r7, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:234 (discriminator 2)
			{
				// accumulate the residual off diagonal terms which are being driven to zero
				residue += fabs(A[ir][ic]);
    deee:	009b      	lsls	r3, r3, #2
    def0:	5999      	ldr	r1, [r3, r6]
    def2:	3401      	adds	r4, #1
    def4:	0049      	lsls	r1, r1, #1
    def6:	0849      	lsrs	r1, r1, #1
    def8:	b2e4      	uxtb	r4, r4
    defa:	f7f2 fbfb 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:231 (discriminator 2)
		residue = 0.0F;
		// loop over rows excluding last row
		for (ir = 0; ir < n - 1; ir++)
		{
			// loop over above diagonal columns
			for (ic = ir + 1; ic < n; ic++)
    defe:	b263      	sxtb	r3, r4
    df00:	429d      	cmp	r5, r3
    df02:	dcf4      	bgt.n	deee <eigencompute+0x96>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:228
	do
	{
		// compute the absolute value of the above diagonal elements as exit criterion
		residue = 0.0F;
		// loop over rows excluding last row
		for (ir = 0; ir < n - 1; ir++)
    df04:	b27a      	sxtb	r2, r7
    df06:	4542      	cmp	r2, r8
    df08:	dbe7      	blt.n	deda <eigencompute+0x82>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:239
				residue += fabs(A[ir][ic]);
			}
		}

		// check if we still have work to do
		if (residue > 0.0F)
    df0a:	2100      	movs	r1, #0
    df0c:	9012      	str	r0, [sp, #72]	; 0x48
    df0e:	f7f2 fbdd 	bl	6cc <__aeabi_fcmpgt>
    df12:	2200      	movs	r2, #0
    df14:	2800      	cmp	r0, #0
    df16:	d100      	bne.n	df1a <eigencompute+0xc2>
    df18:	e1bb      	b.n	e292 <eigencompute+0x43a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:242 (discriminator 1)
		{
			// loop over all rows with the exception of the last row (since only rotating above diagonal elements)
			for (ir = 0; ir < n - 1; ir++)
    df1a:	9811      	ldr	r0, [sp, #68]	; 0x44
    df1c:	b253      	sxtb	r3, r2
    df1e:	4283      	cmp	r3, r0
    df20:	db00      	blt.n	df24 <eigencompute+0xcc>
    df22:	e1b6      	b.n	e292 <eigencompute+0x43a>
    df24:	3201      	adds	r2, #1
    df26:	b2d2      	uxtb	r2, r2
    df28:	b2d0      	uxtb	r0, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:245
			{
				// loop over columns ic (where ic is always greater than ir since above diagonal)
				for (ic = ir + 1; ic < n; ic++)
    df2a:	b241      	sxtb	r1, r0
    df2c:	9009      	str	r0, [sp, #36]	; 0x24
    df2e:	9804      	ldr	r0, [sp, #16]
    df30:	910a      	str	r1, [sp, #40]	; 0x28
    df32:	4288      	cmp	r0, r1
    df34:	dc00      	bgt.n	df38 <eigencompute+0xe0>
    df36:	e1a6      	b.n	e286 <eigencompute+0x42e>
    df38:	0099      	lsls	r1, r3, #2
    df3a:	468b      	mov	fp, r1
    df3c:	9805      	ldr	r0, [sp, #20]
    df3e:	445b      	add	r3, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:251
				{
					// only continue with this element if the element is non-zero
					if (fabs(A[ir][ic]) > 0.0F)
					{
						// calculate cot(2*phi) where phi is the Jacobi rotation angle
						cot2phi = 0.5F * (eigval[ic] - eigval[ir]) / (A[ir][ic]);
    df40:	990b      	ldr	r1, [sp, #44]	; 0x2c
    df42:	00db      	lsls	r3, r3, #3
    df44:	18c3      	adds	r3, r0, r3
    df46:	9301      	str	r3, [sp, #4]
    df48:	1c0b      	adds	r3, r1, #0
    df4a:	445b      	add	r3, fp
    df4c:	9307      	str	r3, [sp, #28]
    df4e:	1e53      	subs	r3, r2, #1
    df50:	3a02      	subs	r2, #2
    df52:	b2d2      	uxtb	r2, r2
    df54:	0091      	lsls	r1, r2, #2
    df56:	188a      	adds	r2, r1, r2
    df58:	0052      	lsls	r2, r2, #1
    df5a:	920e      	str	r2, [sp, #56]	; 0x38
    df5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    df5e:	9809      	ldr	r0, [sp, #36]	; 0x24
    df60:	990a      	ldr	r1, [sp, #40]	; 0x28
    df62:	3228      	adds	r2, #40	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:291
							// eigvec[j][ic] = eigvec[j][ic] + sin(phi) * (eigvec[j][ir] - tan(phi/2) * eigvec[j][ic])
							eigvec[j][ic] = eigvec[j][ic] + sinphi * (ftmp - tanhalfphi * eigvec[j][ic]);
						}

						// apply the jacobi rotation only to those elements of matrix m that can change
						for (j = 0; j <= ir - 1; j++)
    df64:	b25b      	sxtb	r3, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:251
				{
					// only continue with this element if the element is non-zero
					if (fabs(A[ir][ic]) > 0.0F)
					{
						// calculate cot(2*phi) where phi is the Jacobi rotation angle
						cot2phi = 0.5F * (eigval[ic] - eigval[ir]) / (A[ir][ic]);
    df66:	9006      	str	r0, [sp, #24]
    df68:	9103      	str	r1, [sp, #12]
    df6a:	920f      	str	r2, [sp, #60]	; 0x3c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:291
							// eigvec[j][ic] = eigvec[j][ic] + sin(phi) * (eigvec[j][ir] - tan(phi/2) * eigvec[j][ic])
							eigvec[j][ic] = eigvec[j][ic] + sinphi * (ftmp - tanhalfphi * eigvec[j][ic]);
						}

						// apply the jacobi rotation only to those elements of matrix m that can change
						for (j = 0; j <= ir - 1; j++)
    df6c:	930c      	str	r3, [sp, #48]	; 0x30
    df6e:	465f      	mov	r7, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:248
			{
				// loop over columns ic (where ic is always greater than ir since above diagonal)
				for (ic = ir + 1; ic < n; ic++)
				{
					// only continue with this element if the element is non-zero
					if (fabs(A[ir][ic]) > 0.0F)
    df70:	9b03      	ldr	r3, [sp, #12]
    df72:	9901      	ldr	r1, [sp, #4]
    df74:	0098      	lsls	r0, r3, #2
    df76:	180e      	adds	r6, r1, r0
    df78:	6834      	ldr	r4, [r6, #0]
    df7a:	9002      	str	r0, [sp, #8]
    df7c:	0060      	lsls	r0, r4, #1
    df7e:	0840      	lsrs	r0, r0, #1
    df80:	2100      	movs	r1, #0
    df82:	9308      	str	r3, [sp, #32]
    df84:	f7f2 fba2 	bl	6cc <__aeabi_fcmpgt>
    df88:	2800      	cmp	r0, #0
    df8a:	d100      	bne.n	df8e <eigencompute+0x136>
    df8c:	e171      	b.n	e272 <eigencompute+0x41a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:251
					{
						// calculate cot(2*phi) where phi is the Jacobi rotation angle
						cot2phi = 0.5F * (eigval[ic] - eigval[ir]) / (A[ir][ic]);
    df8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    df90:	4692      	mov	sl, r2
    df92:	9a02      	ldr	r2, [sp, #8]
    df94:	4492      	add	sl, r2
    df96:	9a07      	ldr	r2, [sp, #28]
    df98:	4653      	mov	r3, sl
    df9a:	6811      	ldr	r1, [r2, #0]
    df9c:	6818      	ldr	r0, [r3, #0]
    df9e:	f7f3 f823 	bl	fe8 <__aeabi_fsub>
    dfa2:	21fc      	movs	r1, #252	; 0xfc
    dfa4:	0589      	lsls	r1, r1, #22
    dfa6:	f7f2 fef5 	bl	d94 <__aeabi_fmul>
    dfaa:	1c21      	adds	r1, r4, #0
    dfac:	f7f2 fd0e 	bl	9cc <__aeabi_fdiv>
    dfb0:	4681      	mov	r9, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:254

						// calculate tan(phi) correcting sign to ensure the smaller solution is used
						tanphi = 1.0F / (fabs(cot2phi) + sqrtf(1.0F + cot2phi * cot2phi));
    dfb2:	4649      	mov	r1, r9
    dfb4:	f7f2 feee 	bl	d94 <__aeabi_fmul>
    dfb8:	21fe      	movs	r1, #254	; 0xfe
    dfba:	0589      	lsls	r1, r1, #22
    dfbc:	f7f2 fb9a 	bl	6f4 <__aeabi_fadd>
    dfc0:	f005 fa66 	bl	13490 <sqrtf>
    dfc4:	464b      	mov	r3, r9
    dfc6:	4680      	mov	r8, r0
    dfc8:	0058      	lsls	r0, r3, #1
    dfca:	0840      	lsrs	r0, r0, #1
    dfcc:	f7f4 fcbe 	bl	294c <__aeabi_f2d>
    dfd0:	1c04      	adds	r4, r0, #0
    dfd2:	4640      	mov	r0, r8
    dfd4:	1c0d      	adds	r5, r1, #0
    dfd6:	f7f4 fcb9 	bl	294c <__aeabi_f2d>
    dfda:	1c02      	adds	r2, r0, #0
    dfdc:	1c0b      	adds	r3, r1, #0
    dfde:	1c20      	adds	r0, r4, #0
    dfe0:	1c29      	adds	r1, r5, #0
    dfe2:	f7f3 f9f3 	bl	13cc <__aeabi_dadd>
    dfe6:	1c02      	adds	r2, r0, #0
    dfe8:	1c0b      	adds	r3, r1, #0
    dfea:	49ba      	ldr	r1, [pc, #744]	; (e2d4 <eigencompute+0x47c>)
    dfec:	48b8      	ldr	r0, [pc, #736]	; (e2d0 <eigencompute+0x478>)
    dfee:	f7f3 fd0f 	bl	1a10 <__aeabi_ddiv>
    dff2:	f7f4 fcfd 	bl	29f0 <__aeabi_d2f>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:255
						if (cot2phi < 0.0F)
    dff6:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:254
					{
						// calculate cot(2*phi) where phi is the Jacobi rotation angle
						cot2phi = 0.5F * (eigval[ic] - eigval[ir]) / (A[ir][ic]);

						// calculate tan(phi) correcting sign to ensure the smaller solution is used
						tanphi = 1.0F / (fabs(cot2phi) + sqrtf(1.0F + cot2phi * cot2phi));
    dff8:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:255
						if (cot2phi < 0.0F)
    dffa:	4648      	mov	r0, r9
    dffc:	f7f2 fb52 	bl	6a4 <__aeabi_fcmplt>
    e000:	2800      	cmp	r0, #0
    e002:	d000      	beq.n	e006 <eigencompute+0x1ae>
    e004:	e159      	b.n	e2ba <eigencompute+0x462>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:261
						{
							tanphi = -tanphi;
						}

						// calculate the sine and cosine of the Jacobi rotation angle phi
						cosphi = 1.0F / sqrtf(1.0F + tanphi * tanphi);
    e006:	4641      	mov	r1, r8
    e008:	4640      	mov	r0, r8
    e00a:	f7f2 fec3 	bl	d94 <__aeabi_fmul>
    e00e:	21fe      	movs	r1, #254	; 0xfe
    e010:	0589      	lsls	r1, r1, #22
    e012:	f7f2 fb6f 	bl	6f4 <__aeabi_fadd>
    e016:	f005 fa3b 	bl	13490 <sqrtf>
    e01a:	1c01      	adds	r1, r0, #0
    e01c:	20fe      	movs	r0, #254	; 0xfe
    e01e:	0580      	lsls	r0, r0, #22
    e020:	f7f2 fcd4 	bl	9cc <__aeabi_fdiv>
    e024:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:262
						sinphi = tanphi * cosphi;
    e026:	1c29      	adds	r1, r5, #0
    e028:	4640      	mov	r0, r8
    e02a:	f7f2 feb3 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:265

						// calculate tan(phi/2)
						tanhalfphi = sinphi / (1.0F + cosphi);
    e02e:	21fe      	movs	r1, #254	; 0xfe
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:262
							tanphi = -tanphi;
						}

						// calculate the sine and cosine of the Jacobi rotation angle phi
						cosphi = 1.0F / sqrtf(1.0F + tanphi * tanphi);
						sinphi = tanphi * cosphi;
    e030:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:265

						// calculate tan(phi/2)
						tanhalfphi = sinphi / (1.0F + cosphi);
    e032:	0589      	lsls	r1, r1, #22
    e034:	1c28      	adds	r0, r5, #0
    e036:	f7f2 fb5d 	bl	6f4 <__aeabi_fadd>
    e03a:	1c01      	adds	r1, r0, #0
    e03c:	1c20      	adds	r0, r4, #0
    e03e:	f7f2 fcc5 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:268

						// set tmp = tan(phi) times current matrix element used in update of leading diagonal elements
						ftmp = tanphi * A[ir][ic];
    e042:	6831      	ldr	r1, [r6, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:265
						// calculate the sine and cosine of the Jacobi rotation angle phi
						cosphi = 1.0F / sqrtf(1.0F + tanphi * tanphi);
						sinphi = tanphi * cosphi;

						// calculate tan(phi/2)
						tanhalfphi = sinphi / (1.0F + cosphi);
    e044:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:268

						// set tmp = tan(phi) times current matrix element used in update of leading diagonal elements
						ftmp = tanphi * A[ir][ic];
    e046:	4640      	mov	r0, r8
    e048:	f7f2 fea4 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:272

						// apply the jacobi rotation to diagonal elements [ir][ir] and [ic][ic] stored in the eigenvalue array
						// eigval[ir] = eigval[ir] - tan(phi) *  A[ir][ic]
						eigval[ir] -= ftmp;
    e04c:	9907      	ldr	r1, [sp, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:268

						// calculate tan(phi/2)
						tanhalfphi = sinphi / (1.0F + cosphi);

						// set tmp = tan(phi) times current matrix element used in update of leading diagonal elements
						ftmp = tanphi * A[ir][ic];
    e04e:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:272

						// apply the jacobi rotation to diagonal elements [ir][ir] and [ic][ic] stored in the eigenvalue array
						// eigval[ir] = eigval[ir] - tan(phi) *  A[ir][ic]
						eigval[ir] -= ftmp;
    e050:	6808      	ldr	r0, [r1, #0]
    e052:	4641      	mov	r1, r8
    e054:	f7f2 ffc8 	bl	fe8 <__aeabi_fsub>
    e058:	9a07      	ldr	r2, [sp, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:274
						// eigval[ic] = eigval[ic] + tan(phi) * A[ir][ic]
						eigval[ic] += ftmp;
    e05a:	4653      	mov	r3, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:272
						// set tmp = tan(phi) times current matrix element used in update of leading diagonal elements
						ftmp = tanphi * A[ir][ic];

						// apply the jacobi rotation to diagonal elements [ir][ir] and [ic][ic] stored in the eigenvalue array
						// eigval[ir] = eigval[ir] - tan(phi) *  A[ir][ic]
						eigval[ir] -= ftmp;
    e05c:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:274
						// eigval[ic] = eigval[ic] + tan(phi) * A[ir][ic]
						eigval[ic] += ftmp;
    e05e:	6818      	ldr	r0, [r3, #0]
    e060:	4641      	mov	r1, r8
    e062:	f7f2 fb47 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:280

						// by definition, applying the jacobi rotation on element ir, ic results in 0.0
						A[ir][ic] = 0.0F;

						// apply the jacobi rotation to all elements of the eigenvector matrix
						for (j = 0; j < n; j++)
    e066:	9b04      	ldr	r3, [sp, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:274

						// apply the jacobi rotation to diagonal elements [ir][ir] and [ic][ic] stored in the eigenvalue array
						// eigval[ir] = eigval[ir] - tan(phi) *  A[ir][ic]
						eigval[ir] -= ftmp;
						// eigval[ic] = eigval[ic] + tan(phi) * A[ir][ic]
						eigval[ic] += ftmp;
    e068:	4651      	mov	r1, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:277

						// by definition, applying the jacobi rotation on element ir, ic results in 0.0
						A[ir][ic] = 0.0F;
    e06a:	2200      	movs	r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:274

						// apply the jacobi rotation to diagonal elements [ir][ir] and [ic][ic] stored in the eigenvalue array
						// eigval[ir] = eigval[ir] - tan(phi) *  A[ir][ic]
						eigval[ir] -= ftmp;
						// eigval[ic] = eigval[ic] + tan(phi) * A[ir][ic]
						eigval[ic] += ftmp;
    e06c:	6008      	str	r0, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:277

						// by definition, applying the jacobi rotation on element ir, ic results in 0.0
						A[ir][ic] = 0.0F;
    e06e:	6032      	str	r2, [r6, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:280

						// apply the jacobi rotation to all elements of the eigenvector matrix
						for (j = 0; j < n; j++)
    e070:	2b00      	cmp	r3, #0
    e072:	dd3a      	ble.n	e0ea <eigencompute+0x292>
    e074:	990d      	ldr	r1, [sp, #52]	; 0x34
    e076:	9a02      	ldr	r2, [sp, #8]
    e078:	9803      	ldr	r0, [sp, #12]
    e07a:	188e      	adds	r6, r1, r2
    e07c:	9910      	ldr	r1, [sp, #64]	; 0x40
    e07e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    e080:	1843      	adds	r3, r0, r1
    e082:	009b      	lsls	r3, r3, #2
    e084:	18d2      	adds	r2, r2, r3
    e086:	0083      	lsls	r3, r0, #2
    e088:	425b      	negs	r3, r3
    e08a:	46b9      	mov	r9, r7
    e08c:	4693      	mov	fp, r2
    e08e:	469a      	mov	sl, r3
    e090:	46a8      	mov	r8, r5
    e092:	1c27      	adds	r7, r4, #0
    e094:	4653      	mov	r3, sl
    e096:	18f5      	adds	r5, r6, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:283 (discriminator 2)
						{
							// store eigvec[j][ir]
							ftmp = eigvec[j][ir];
    e098:	4648      	mov	r0, r9
    e09a:	582c      	ldr	r4, [r5, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:285 (discriminator 2)
							// eigvec[j][ir] = eigvec[j][ir] - sin(phi) * (eigvec[j][ic] + tan(phi/2) * eigvec[j][ir])
							eigvec[j][ir] = ftmp - sinphi * (eigvec[j][ic] + tanhalfphi * ftmp);
    e09c:	4640      	mov	r0, r8
    e09e:	1c21      	adds	r1, r4, #0
    e0a0:	f7f2 fe78 	bl	d94 <__aeabi_fmul>
    e0a4:	6831      	ldr	r1, [r6, #0]
    e0a6:	f7f2 fb25 	bl	6f4 <__aeabi_fadd>
    e0aa:	1c39      	adds	r1, r7, #0
    e0ac:	f7f2 fe72 	bl	d94 <__aeabi_fmul>
    e0b0:	1c01      	adds	r1, r0, #0
    e0b2:	1c20      	adds	r0, r4, #0
    e0b4:	f7f2 ff98 	bl	fe8 <__aeabi_fsub>
    e0b8:	4649      	mov	r1, r9
    e0ba:	5068      	str	r0, [r5, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:287 (discriminator 2)
							// eigvec[j][ic] = eigvec[j][ic] + sin(phi) * (eigvec[j][ir] - tan(phi/2) * eigvec[j][ic])
							eigvec[j][ic] = eigvec[j][ic] + sinphi * (ftmp - tanhalfphi * eigvec[j][ic]);
    e0bc:	6835      	ldr	r5, [r6, #0]
    e0be:	4641      	mov	r1, r8
    e0c0:	1c28      	adds	r0, r5, #0
    e0c2:	f7f2 fe67 	bl	d94 <__aeabi_fmul>
    e0c6:	1c01      	adds	r1, r0, #0
    e0c8:	1c20      	adds	r0, r4, #0
    e0ca:	f7f2 ff8d 	bl	fe8 <__aeabi_fsub>
    e0ce:	1c39      	adds	r1, r7, #0
    e0d0:	f7f2 fe60 	bl	d94 <__aeabi_fmul>
    e0d4:	1c01      	adds	r1, r0, #0
    e0d6:	1c28      	adds	r0, r5, #0
    e0d8:	f7f2 fb0c 	bl	6f4 <__aeabi_fadd>
    e0dc:	6030      	str	r0, [r6, #0]
    e0de:	3628      	adds	r6, #40	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:280 (discriminator 2)

						// by definition, applying the jacobi rotation on element ir, ic results in 0.0
						A[ir][ic] = 0.0F;

						// apply the jacobi rotation to all elements of the eigenvector matrix
						for (j = 0; j < n; j++)
    e0e0:	455e      	cmp	r6, fp
    e0e2:	d1d7      	bne.n	e094 <eigencompute+0x23c>
    e0e4:	1c3c      	adds	r4, r7, #0
    e0e6:	4645      	mov	r5, r8
    e0e8:	464f      	mov	r7, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:291
							// eigvec[j][ic] = eigvec[j][ic] + sin(phi) * (eigvec[j][ir] - tan(phi/2) * eigvec[j][ic])
							eigvec[j][ic] = eigvec[j][ic] + sinphi * (ftmp - tanhalfphi * eigvec[j][ic]);
						}

						// apply the jacobi rotation only to those elements of matrix m that can change
						for (j = 0; j <= ir - 1; j++)
    e0ea:	980c      	ldr	r0, [sp, #48]	; 0x30
    e0ec:	2800      	cmp	r0, #0
    e0ee:	dd3c      	ble.n	e16a <eigencompute+0x312>
    e0f0:	9805      	ldr	r0, [sp, #20]
    e0f2:	9902      	ldr	r1, [sp, #8]
    e0f4:	9a03      	ldr	r2, [sp, #12]
    e0f6:	1846      	adds	r6, r0, r1
    e0f8:	980e      	ldr	r0, [sp, #56]	; 0x38
    e0fa:	9903      	ldr	r1, [sp, #12]
    e0fc:	1813      	adds	r3, r2, r0
    e0fe:	9a05      	ldr	r2, [sp, #20]
    e100:	009b      	lsls	r3, r3, #2
    e102:	3228      	adds	r2, #40	; 0x28
    e104:	18d2      	adds	r2, r2, r3
    e106:	008b      	lsls	r3, r1, #2
    e108:	425b      	negs	r3, r3
    e10a:	46b9      	mov	r9, r7
    e10c:	4693      	mov	fp, r2
    e10e:	469a      	mov	sl, r3
    e110:	46a8      	mov	r8, r5
    e112:	1c27      	adds	r7, r4, #0
    e114:	4652      	mov	r2, sl
    e116:	18b5      	adds	r5, r6, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:294 (discriminator 2)
						{
							// store A[j][ir]
							ftmp = A[j][ir];
    e118:	464b      	mov	r3, r9
    e11a:	58ec      	ldr	r4, [r5, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:296 (discriminator 2)
							// A[j][ir] = A[j][ir] - sin(phi) * (A[j][ic] + tan(phi/2) * A[j][ir])
							A[j][ir] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
    e11c:	4640      	mov	r0, r8
    e11e:	1c21      	adds	r1, r4, #0
    e120:	f7f2 fe38 	bl	d94 <__aeabi_fmul>
    e124:	6831      	ldr	r1, [r6, #0]
    e126:	f7f2 fae5 	bl	6f4 <__aeabi_fadd>
    e12a:	1c39      	adds	r1, r7, #0
    e12c:	f7f2 fe32 	bl	d94 <__aeabi_fmul>
    e130:	1c01      	adds	r1, r0, #0
    e132:	1c20      	adds	r0, r4, #0
    e134:	f7f2 ff58 	bl	fe8 <__aeabi_fsub>
    e138:	4649      	mov	r1, r9
    e13a:	5068      	str	r0, [r5, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:298 (discriminator 2)
							// A[j][ic] = A[j][ic] + sin(phi) * (A[j][ir] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
    e13c:	6835      	ldr	r5, [r6, #0]
    e13e:	4641      	mov	r1, r8
    e140:	1c28      	adds	r0, r5, #0
    e142:	f7f2 fe27 	bl	d94 <__aeabi_fmul>
    e146:	1c01      	adds	r1, r0, #0
    e148:	1c20      	adds	r0, r4, #0
    e14a:	f7f2 ff4d 	bl	fe8 <__aeabi_fsub>
    e14e:	1c39      	adds	r1, r7, #0
    e150:	f7f2 fe20 	bl	d94 <__aeabi_fmul>
    e154:	1c01      	adds	r1, r0, #0
    e156:	1c28      	adds	r0, r5, #0
    e158:	f7f2 facc 	bl	6f4 <__aeabi_fadd>
    e15c:	6030      	str	r0, [r6, #0]
    e15e:	3628      	adds	r6, #40	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:291 (discriminator 2)
							// eigvec[j][ic] = eigvec[j][ic] + sin(phi) * (eigvec[j][ir] - tan(phi/2) * eigvec[j][ic])
							eigvec[j][ic] = eigvec[j][ic] + sinphi * (ftmp - tanhalfphi * eigvec[j][ic]);
						}

						// apply the jacobi rotation only to those elements of matrix m that can change
						for (j = 0; j <= ir - 1; j++)
    e160:	455e      	cmp	r6, fp
    e162:	d1d7      	bne.n	e114 <eigencompute+0x2bc>
    e164:	1c3c      	adds	r4, r7, #0
    e166:	4645      	mov	r5, r8
    e168:	464f      	mov	r7, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:300
							// A[j][ir] = A[j][ir] - sin(phi) * (A[j][ic] + tan(phi/2) * A[j][ir])
							A[j][ir] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
							// A[j][ic] = A[j][ic] + sin(phi) * (A[j][ir] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
						}
						for (j = ir + 1; j <= ic - 1; j++)
    e16a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e16c:	9b03      	ldr	r3, [sp, #12]
    e16e:	429a      	cmp	r2, r3
    e170:	da3a      	bge.n	e1e8 <eigencompute+0x390>
    e172:	9809      	ldr	r0, [sp, #36]	; 0x24
    e174:	1c2a      	adds	r2, r5, #0
    e176:	b243      	sxtb	r3, r0
    e178:	1c05      	adds	r5, r0, #0
    e17a:	9803      	ldr	r0, [sp, #12]
    e17c:	46a0      	mov	r8, r4
    e17e:	46bb      	mov	fp, r7
    e180:	4682      	mov	sl, r0
    e182:	4691      	mov	r9, r2
    e184:	9901      	ldr	r1, [sp, #4]
    e186:	009e      	lsls	r6, r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:305 (discriminator 2)
						{
							// store A[ir][j]
							ftmp = A[ir][j];
							// A[ir][j] = A[ir][j] - sin(phi) * (A[j][ic] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
    e188:	9a05      	ldr	r2, [sp, #20]
    e18a:	198f      	adds	r7, r1, r6
    e18c:	18f6      	adds	r6, r6, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:303 (discriminator 2)
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
						}
						for (j = ir + 1; j <= ic - 1; j++)
						{
							// store A[ir][j]
							ftmp = A[ir][j];
    e18e:	683c      	ldr	r4, [r7, #0]
    e190:	9b02      	ldr	r3, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:305 (discriminator 2)
							// A[ir][j] = A[ir][j] - sin(phi) * (A[j][ic] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
    e192:	00f6      	lsls	r6, r6, #3
    e194:	1996      	adds	r6, r2, r6
    e196:	18f6      	adds	r6, r6, r3
    e198:	1c21      	adds	r1, r4, #0
    e19a:	4648      	mov	r0, r9
    e19c:	f7f2 fdfa 	bl	d94 <__aeabi_fmul>
    e1a0:	6831      	ldr	r1, [r6, #0]
    e1a2:	f7f2 faa7 	bl	6f4 <__aeabi_fadd>
    e1a6:	4641      	mov	r1, r8
    e1a8:	f7f2 fdf4 	bl	d94 <__aeabi_fmul>
    e1ac:	1c01      	adds	r1, r0, #0
    e1ae:	1c20      	adds	r0, r4, #0
    e1b0:	f7f2 ff1a 	bl	fe8 <__aeabi_fsub>
    e1b4:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:307 (discriminator 2)
							// A[j][ic] = A[j][ic] + sin(phi) * (A[ir][j] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
    e1b6:	6837      	ldr	r7, [r6, #0]
    e1b8:	4649      	mov	r1, r9
    e1ba:	1c38      	adds	r0, r7, #0
    e1bc:	f7f2 fdea 	bl	d94 <__aeabi_fmul>
    e1c0:	1c01      	adds	r1, r0, #0
    e1c2:	1c20      	adds	r0, r4, #0
    e1c4:	f7f2 ff10 	bl	fe8 <__aeabi_fsub>
    e1c8:	4641      	mov	r1, r8
    e1ca:	f7f2 fde3 	bl	d94 <__aeabi_fmul>
    e1ce:	1c01      	adds	r1, r0, #0
    e1d0:	1c38      	adds	r0, r7, #0
    e1d2:	f7f2 fa8f 	bl	6f4 <__aeabi_fadd>
    e1d6:	3501      	adds	r5, #1
    e1d8:	b2ed      	uxtb	r5, r5
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:300 (discriminator 2)
							// A[j][ir] = A[j][ir] - sin(phi) * (A[j][ic] + tan(phi/2) * A[j][ir])
							A[j][ir] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
							// A[j][ic] = A[j][ic] + sin(phi) * (A[j][ir] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
						}
						for (j = ir + 1; j <= ic - 1; j++)
    e1da:	b26b      	sxtb	r3, r5
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:307 (discriminator 2)
							// store A[ir][j]
							ftmp = A[ir][j];
							// A[ir][j] = A[ir][j] - sin(phi) * (A[j][ic] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
							// A[j][ic] = A[j][ic] + sin(phi) * (A[ir][j] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
    e1dc:	6030      	str	r0, [r6, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:300 (discriminator 2)
							// A[j][ir] = A[j][ir] - sin(phi) * (A[j][ic] + tan(phi/2) * A[j][ir])
							A[j][ir] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
							// A[j][ic] = A[j][ic] + sin(phi) * (A[j][ir] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
						}
						for (j = ir + 1; j <= ic - 1; j++)
    e1de:	4553      	cmp	r3, sl
    e1e0:	dbd0      	blt.n	e184 <eigencompute+0x32c>
    e1e2:	4644      	mov	r4, r8
    e1e4:	464d      	mov	r5, r9
    e1e6:	465f      	mov	r7, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:309
							// A[ir][j] = A[ir][j] - sin(phi) * (A[j][ic] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
							// A[j][ic] = A[j][ic] + sin(phi) * (A[ir][j] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
						}
						for (j = ic + 1; j < n; j++)
    e1e8:	9b06      	ldr	r3, [sp, #24]
    e1ea:	3301      	adds	r3, #1
    e1ec:	b2db      	uxtb	r3, r3
    e1ee:	b25a      	sxtb	r2, r3
    e1f0:	9306      	str	r3, [sp, #24]
    e1f2:	9b04      	ldr	r3, [sp, #16]
    e1f4:	9203      	str	r2, [sp, #12]
    e1f6:	4293      	cmp	r3, r2
    e1f8:	dd45      	ble.n	e286 <eigencompute+0x42e>
    e1fa:	9802      	ldr	r0, [sp, #8]
    e1fc:	9908      	ldr	r1, [sp, #32]
    e1fe:	1c16      	adds	r6, r2, #0
    e200:	1843      	adds	r3, r0, r1
    e202:	9a05      	ldr	r2, [sp, #20]
    e204:	00db      	lsls	r3, r3, #3
    e206:	18d2      	adds	r2, r2, r3
    e208:	9b06      	ldr	r3, [sp, #24]
    e20a:	4693      	mov	fp, r2
    e20c:	4699      	mov	r9, r3
    e20e:	1c2b      	adds	r3, r5, #0
    e210:	46a0      	mov	r8, r4
    e212:	464d      	mov	r5, r9
    e214:	46ba      	mov	sl, r7
    e216:	4699      	mov	r9, r3
    e218:	9801      	ldr	r0, [sp, #4]
    e21a:	00b6      	lsls	r6, r6, #2
    e21c:	1987      	adds	r7, r0, r6
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:312 (discriminator 2)
						{
							// store A[ir][j]
							ftmp = A[ir][j];
    e21e:	683c      	ldr	r4, [r7, #0]
    e220:	445e      	add	r6, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:314 (discriminator 2)
							// A[ir][j] = A[ir][j] - sin(phi) * (A[ic][j] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[ic][j] + tanhalfphi * ftmp);
    e222:	1c21      	adds	r1, r4, #0
    e224:	4648      	mov	r0, r9
    e226:	f7f2 fdb5 	bl	d94 <__aeabi_fmul>
    e22a:	6831      	ldr	r1, [r6, #0]
    e22c:	f7f2 fa62 	bl	6f4 <__aeabi_fadd>
    e230:	4641      	mov	r1, r8
    e232:	f7f2 fdaf 	bl	d94 <__aeabi_fmul>
    e236:	1c01      	adds	r1, r0, #0
    e238:	1c20      	adds	r0, r4, #0
    e23a:	f7f2 fed5 	bl	fe8 <__aeabi_fsub>
    e23e:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:316 (discriminator 2)
							// A[ic][j] = A[ic][j] + sin(phi) * (A[ir][j] - tan(phi/2) * A[ic][j])
							A[ic][j] = A[ic][j] + sinphi * (ftmp - tanhalfphi * A[ic][j]);
    e240:	6837      	ldr	r7, [r6, #0]
    e242:	4649      	mov	r1, r9
    e244:	1c38      	adds	r0, r7, #0
    e246:	f7f2 fda5 	bl	d94 <__aeabi_fmul>
    e24a:	1c01      	adds	r1, r0, #0
    e24c:	1c20      	adds	r0, r4, #0
    e24e:	f7f2 fecb 	bl	fe8 <__aeabi_fsub>
    e252:	4641      	mov	r1, r8
    e254:	f7f2 fd9e 	bl	d94 <__aeabi_fmul>
    e258:	1c01      	adds	r1, r0, #0
    e25a:	1c38      	adds	r0, r7, #0
    e25c:	f7f2 fa4a 	bl	6f4 <__aeabi_fadd>
    e260:	3501      	adds	r5, #1
    e262:	b2ed      	uxtb	r5, r5
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:309 (discriminator 2)
							// A[ir][j] = A[ir][j] - sin(phi) * (A[j][ic] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
							// A[j][ic] = A[j][ic] + sin(phi) * (A[ir][j] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
						}
						for (j = ic + 1; j < n; j++)
    e264:	9904      	ldr	r1, [sp, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:316 (discriminator 2)
							// store A[ir][j]
							ftmp = A[ir][j];
							// A[ir][j] = A[ir][j] - sin(phi) * (A[ic][j] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[ic][j] + tanhalfphi * ftmp);
							// A[ic][j] = A[ic][j] + sin(phi) * (A[ir][j] - tan(phi/2) * A[ic][j])
							A[ic][j] = A[ic][j] + sinphi * (ftmp - tanhalfphi * A[ic][j]);
    e266:	6030      	str	r0, [r6, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:309 (discriminator 2)
							// A[ir][j] = A[ir][j] - sin(phi) * (A[j][ic] + tan(phi/2) * A[ir][j])
							A[ir][j] = ftmp - sinphi * (A[j][ic] + tanhalfphi * ftmp);
							// A[j][ic] = A[j][ic] + sin(phi) * (A[ir][j] - tan(phi/2) * A[j][ic])
							A[j][ic] = A[j][ic] + sinphi * (ftmp - tanhalfphi * A[j][ic]);
						}
						for (j = ic + 1; j < n; j++)
    e268:	b26e      	sxtb	r6, r5
    e26a:	42b1      	cmp	r1, r6
    e26c:	dcd4      	bgt.n	e218 <eigencompute+0x3c0>
    e26e:	4657      	mov	r7, sl
    e270:	e67e      	b.n	df70 <eigencompute+0x118>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:245
		{
			// loop over all rows with the exception of the last row (since only rotating above diagonal elements)
			for (ir = 0; ir < n - 1; ir++)
			{
				// loop over columns ic (where ic is always greater than ir since above diagonal)
				for (ic = ir + 1; ic < n; ic++)
    e272:	9b06      	ldr	r3, [sp, #24]
    e274:	3301      	adds	r3, #1
    e276:	b2db      	uxtb	r3, r3
    e278:	b25a      	sxtb	r2, r3
    e27a:	9306      	str	r3, [sp, #24]
    e27c:	9b04      	ldr	r3, [sp, #16]
    e27e:	9203      	str	r2, [sp, #12]
    e280:	4293      	cmp	r3, r2
    e282:	dd00      	ble.n	e286 <eigencompute+0x42e>
    e284:	e674      	b.n	df70 <eigencompute+0x118>
    e286:	9a09      	ldr	r2, [sp, #36]	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:242

		// check if we still have work to do
		if (residue > 0.0F)
		{
			// loop over all rows with the exception of the last row (since only rotating above diagonal elements)
			for (ir = 0; ir < n - 1; ir++)
    e288:	9811      	ldr	r0, [sp, #68]	; 0x44
    e28a:	b253      	sxtb	r3, r2
    e28c:	4283      	cmp	r3, r0
    e28e:	da00      	bge.n	e292 <eigencompute+0x43a>
    e290:	e648      	b.n	df24 <eigencompute+0xcc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:322
						}
					}   // end of test for matrix element already zero
				}   // end of loop over columns
			}   // end of loop over rows
		}  // end of test for non-zero residue
	} while ((residue > 0.0F) && (ctr++ < NITERATIONS)); // end of main loop
    e292:	9812      	ldr	r0, [sp, #72]	; 0x48
    e294:	2100      	movs	r1, #0
    e296:	f7f2 fa19 	bl	6cc <__aeabi_fcmpgt>
    e29a:	2800      	cmp	r0, #0
    e29c:	d006      	beq.n	e2ac <eigencompute+0x454>
    e29e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e2a0:	3b01      	subs	r3, #1
    e2a2:	b2db      	uxtb	r3, r3
    e2a4:	9313      	str	r3, [sp, #76]	; 0x4c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:322 (discriminator 1)
    e2a6:	2b00      	cmp	r3, #0
    e2a8:	d000      	beq.n	e2ac <eigencompute+0x454>
    e2aa:	e609      	b.n	dec0 <eigencompute+0x68>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:325

	return;
}
    e2ac:	b015      	add	sp, #84	; 0x54
    e2ae:	bc3c      	pop	{r2, r3, r4, r5}
    e2b0:	4690      	mov	r8, r2
    e2b2:	4699      	mov	r9, r3
    e2b4:	46a2      	mov	sl, r4
    e2b6:	46ab      	mov	fp, r5
    e2b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:257

						// calculate tan(phi) correcting sign to ensure the smaller solution is used
						tanphi = 1.0F / (fabs(cot2phi) + sqrtf(1.0F + cot2phi * cot2phi));
						if (cot2phi < 0.0F)
						{
							tanphi = -tanphi;
    e2ba:	2080      	movs	r0, #128	; 0x80
    e2bc:	0600      	lsls	r0, r0, #24
    e2be:	1c03      	adds	r3, r0, #0
    e2c0:	4443      	add	r3, r8
    e2c2:	4698      	mov	r8, r3
    e2c4:	e69f      	b.n	e006 <eigencompute+0x1ae>
    e2c6:	3b01      	subs	r3, #1
    e2c8:	9311      	str	r3, [sp, #68]	; 0x44
    e2ca:	e5f1      	b.n	deb0 <eigencompute+0x58>
    e2cc:	46c0      	nop			; (mov r8, r8)
    e2ce:	46c0      	nop			; (mov r8, r8)
    e2d0:	00000000 	.word	0x00000000
    e2d4:	3ff00000 	.word	0x3ff00000

0000e2d8 <fmatrixAeqInvA>:
fmatrixAeqInvA():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:330
}

// function uses Gauss-Jordan elimination to compute the inverse of matrix A in situ
// on exit, A is replaced with its inverse
void fmatrixAeqInvA(float *A[], int8 iColInd[], int8 iRowInd[], int8 iPivot[], int8 isize)
{
    e2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e2da:	465f      	mov	r7, fp
    e2dc:	4656      	mov	r6, sl
    e2de:	464d      	mov	r5, r9
    e2e0:	4644      	mov	r4, r8
    e2e2:	b4f0      	push	{r4, r5, r6, r7}
    e2e4:	b08d      	sub	sp, #52	; 0x34
    e2e6:	469a      	mov	sl, r3
    e2e8:	ab16      	add	r3, sp, #88	; 0x58
    e2ea:	781b      	ldrb	r3, [r3, #0]
    e2ec:	9004      	str	r0, [sp, #16]
    e2ee:	b25b      	sxtb	r3, r3
    e2f0:	9108      	str	r1, [sp, #32]
    e2f2:	9209      	str	r2, [sp, #36]	; 0x24
    e2f4:	469b      	mov	fp, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:342

	// to avoid compiler warnings
	iPivotRow = iPivotCol = 0;

	// initialize the pivot array to 0
	for (j = 0; j < isize; j++)
    e2f6:	2b00      	cmp	r3, #0
    e2f8:	dc00      	bgt.n	e2fc <fmatrixAeqInvA+0x24>
    e2fa:	e110      	b.n	e51e <fmatrixAeqInvA+0x246>
    e2fc:	465e      	mov	r6, fp
    e2fe:	1c1a      	adds	r2, r3, #0
    e300:	3e01      	subs	r6, #1
    e302:	4650      	mov	r0, sl
    e304:	2100      	movs	r1, #0
    e306:	f006 fe33 	bl	14f70 <memset>
    e30a:	b2f3      	uxtb	r3, r6
    e30c:	1c5a      	adds	r2, r3, #1
    e30e:	009b      	lsls	r3, r3, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:344
	{
		iPivot[j] = 0;
    e310:	2700      	movs	r7, #0
    e312:	9606      	str	r6, [sp, #24]
    e314:	0092      	lsls	r2, r2, #2
    e316:	2600      	movs	r6, #0
    e318:	3304      	adds	r3, #4
    e31a:	9707      	str	r7, [sp, #28]
    e31c:	9702      	str	r7, [sp, #8]
    e31e:	920a      	str	r2, [sp, #40]	; 0x28
    e320:	9603      	str	r6, [sp, #12]
    e322:	930b      	str	r3, [sp, #44]	; 0x2c
    e324:	4657      	mov	r7, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:330 (discriminator 1)
}

// function uses Gauss-Jordan elimination to compute the inverse of matrix A in situ
// on exit, A is replaced with its inverse
void fmatrixAeqInvA(float *A[], int8 iColInd[], int8 iRowInd[], int8 iPivot[], int8 isize)
{
    e326:	9904      	ldr	r1, [sp, #16]
    e328:	2200      	movs	r2, #0
    e32a:	2300      	movs	r3, #0
    e32c:	4689      	mov	r9, r1
    e32e:	4692      	mov	sl, r2
    e330:	4698      	mov	r8, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:356
		largest = 0.0F;
		// loop over candidate rows j
		for (j = 0; j < isize; j++)
		{
			// check if row j has been previously pivoted
			if (iPivot[j] != 1)
    e332:	4651      	mov	r1, sl
    e334:	4656      	mov	r6, sl
    e336:	567b      	ldrsb	r3, [r7, r1]
    e338:	b2f6      	uxtb	r6, r6
    e33a:	9601      	str	r6, [sp, #4]
    e33c:	2b01      	cmp	r3, #1
    e33e:	d03e      	beq.n	e3be <fmatrixAeqInvA+0xe6>
    e340:	2400      	movs	r4, #0
    e342:	e013      	b.n	e36c <fmatrixAeqInvA+0x94>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:365
				{
					// check if column k has previously been pivoted
					if (iPivot[k] == 0)
					{
						// check if the pivot element is the largest found so far
						if (fabs(A[j][k]) >= largest)
    e344:	464a      	mov	r2, r9
    e346:	6812      	ldr	r2, [r2, #0]
    e348:	00a3      	lsls	r3, r4, #2
    e34a:	589e      	ldr	r6, [r3, r2]
    e34c:	4641      	mov	r1, r8
    e34e:	0076      	lsls	r6, r6, #1
    e350:	0876      	lsrs	r6, r6, #1
    e352:	1c30      	adds	r0, r6, #0
    e354:	f7f2 f9c4 	bl	6e0 <__aeabi_fcmpge>
    e358:	2800      	cmp	r0, #0
    e35a:	d003      	beq.n	e364 <fmatrixAeqInvA+0x8c>
    e35c:	9b01      	ldr	r3, [sp, #4]
    e35e:	9503      	str	r5, [sp, #12]
    e360:	9302      	str	r3, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:370
						{
							// and store this location as the current best candidate for pivoting
							iPivotRow = j;
							iPivotCol = k;
							largest = (float) fabs(A[iPivotRow][iPivotCol]);
    e362:	46b0      	mov	r8, r6
    e364:	3401      	adds	r4, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:359
		{
			// check if row j has been previously pivoted
			if (iPivot[j] != 1)
			{
				// loop over candidate columns k
				for (k = 0; k < isize; k++)
    e366:	b263      	sxtb	r3, r4
    e368:	459b      	cmp	fp, r3
    e36a:	dd28      	ble.n	e3be <fmatrixAeqInvA+0xe6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:362
				{
					// check if column k has previously been pivoted
					if (iPivot[k] == 0)
    e36c:	5d3b      	ldrb	r3, [r7, r4]
    e36e:	b2e5      	uxtb	r5, r4
    e370:	2b00      	cmp	r3, #0
    e372:	d0e7      	beq.n	e344 <fmatrixAeqInvA+0x6c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:373
							iPivotRow = j;
							iPivotCol = k;
							largest = (float) fabs(A[iPivotRow][iPivotCol]);
						}
					}
					else if (iPivot[k] > 1)
    e374:	b25b      	sxtb	r3, r3
    e376:	2b01      	cmp	r3, #1
    e378:	ddf4      	ble.n	e364 <fmatrixAeqInvA+0x8c>
fmatrixAeqI():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:74
		pAij = A[i];
		for (j = 0; j < rc; j++)
		{
			*(pAij++) = 0.0F;
		}
		A[i][i] = 1.0F;
    e37a:	26fe      	movs	r6, #254	; 0xfe
    e37c:	9f04      	ldr	r7, [sp, #16]
    e37e:	05b6      	lsls	r6, r6, #22
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:66
	// rc = rows and columns in A

	float *pAij;	// pointer to A[i][j]
	int8 i, j;		// loop counters

	for (i = 0; i < rc; i++)
    e380:	2500      	movs	r5, #0
    e382:	2300      	movs	r3, #0
    e384:	4658      	mov	r0, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:72
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < rc; j++)
		{
			*(pAij++) = 0.0F;
    e386:	2400      	movs	r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:74
		}
		A[i][i] = 1.0F;
    e388:	46b4      	mov	ip, r6
    e38a:	46b8      	mov	r8, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:69
	int8 i, j;		// loop counters

	for (i = 0; i < rc; i++)
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
    e38c:	009e      	lsls	r6, r3, #2
    e38e:	4641      	mov	r1, r8
    e390:	598f      	ldr	r7, [r1, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:70
		for (j = 0; j < rc; j++)
    e392:	2300      	movs	r3, #0
    e394:	1c3a      	adds	r2, r7, #0
    e396:	3301      	adds	r3, #1
    e398:	b2db      	uxtb	r3, r3
    e39a:	b259      	sxtb	r1, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:72
		{
			*(pAij++) = 0.0F;
    e39c:	c210      	stmia	r2!, {r4}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:70

	for (i = 0; i < rc; i++)
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < rc; j++)
    e39e:	4281      	cmp	r1, r0
    e3a0:	dbf9      	blt.n	e396 <fmatrixAeqInvA+0xbe>
    e3a2:	3501      	adds	r5, #1
    e3a4:	b2ed      	uxtb	r5, r5
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:74
		{
			*(pAij++) = 0.0F;
		}
		A[i][i] = 1.0F;
    e3a6:	4662      	mov	r2, ip
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:66
	// rc = rows and columns in A

	float *pAij;	// pointer to A[i][j]
	int8 i, j;		// loop counters

	for (i = 0; i < rc; i++)
    e3a8:	b26b      	sxtb	r3, r5
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:74
		pAij = A[i];
		for (j = 0; j < rc; j++)
		{
			*(pAij++) = 0.0F;
		}
		A[i][i] = 1.0F;
    e3aa:	51ba      	str	r2, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:66
	// rc = rows and columns in A

	float *pAij;	// pointer to A[i][j]
	int8 i, j;		// loop counters

	for (i = 0; i < rc; i++)
    e3ac:	4283      	cmp	r3, r0
    e3ae:	dbed      	blt.n	e38c <fmatrixAeqInvA+0xb4>
fmatrixAeqInvA():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:459
			}
		}
	}

	return;
}
    e3b0:	b00d      	add	sp, #52	; 0x34
    e3b2:	bc3c      	pop	{r2, r3, r4, r5}
    e3b4:	4690      	mov	r8, r2
    e3b6:	4699      	mov	r9, r3
    e3b8:	46a2      	mov	sl, r4
    e3ba:	46ab      	mov	fp, r5
    e3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e3be:	2601      	movs	r6, #1
    e3c0:	44b2      	add	sl, r6
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:353
	for (i = 0; i < isize; i++)
	{
		// zero the largest element found for pivoting
		largest = 0.0F;
		// loop over candidate rows j
		for (j = 0; j < isize; j++)
    e3c2:	4652      	mov	r2, sl
    e3c4:	2104      	movs	r1, #4
    e3c6:	b253      	sxtb	r3, r2
    e3c8:	4489      	add	r9, r1
    e3ca:	459b      	cmp	fp, r3
    e3cc:	dcb1      	bgt.n	e332 <fmatrixAeqInvA+0x5a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:383
					}
				}
			}
		}
		// increment the entry in iPivot to denote it has been selected for pivoting
		iPivot[iPivotCol]++;
    e3ce:	9e03      	ldr	r6, [sp, #12]
    e3d0:	b276      	sxtb	r6, r6
    e3d2:	19bb      	adds	r3, r7, r6
    e3d4:	781a      	ldrb	r2, [r3, #0]
    e3d6:	9605      	str	r6, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:386

		// check the pivot rows iPivotRow and iPivotCol are not the same before swapping
		if (iPivotRow != iPivotCol)
    e3d8:	9e02      	ldr	r6, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:383
					}
				}
			}
		}
		// increment the entry in iPivot to denote it has been selected for pivoting
		iPivot[iPivotCol]++;
    e3da:	3201      	adds	r2, #1
    e3dc:	701a      	strb	r2, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:386

		// check the pivot rows iPivotRow and iPivotCol are not the same before swapping
		if (iPivotRow != iPivotCol)
    e3de:	b273      	sxtb	r3, r6
    e3e0:	9e05      	ldr	r6, [sp, #20]
    e3e2:	42b3      	cmp	r3, r6
    e3e4:	d100      	bne.n	e3e8 <fmatrixAeqInvA+0x110>
    e3e6:	e095      	b.n	e514 <fmatrixAeqInvA+0x23c>
    e3e8:	9e04      	ldr	r6, [sp, #16]
    e3ea:	009b      	lsls	r3, r3, #2
    e3ec:	5999      	ldr	r1, [r3, r6]
    e3ee:	9e05      	ldr	r6, [sp, #20]
    e3f0:	9a04      	ldr	r2, [sp, #16]
    e3f2:	00b6      	lsls	r6, r6, #2
    e3f4:	1994      	adds	r4, r2, r6
    e3f6:	6822      	ldr	r2, [r4, #0]
    e3f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    e3fa:	9601      	str	r6, [sp, #4]
    e3fc:	2300      	movs	r3, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:392 (discriminator 2)
		{
			// loop over columns l
			for (l = 0; l < isize; l++)
			{
				// and swap all elements of rows iPivotRow and iPivotCol
				ftmp = A[iPivotRow][l];
    e3fe:	58c8      	ldr	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:393 (discriminator 2)
				A[iPivotRow][l] = A[iPivotCol][l];
    e400:	58d6      	ldr	r6, [r2, r3]
    e402:	50ce      	str	r6, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:394 (discriminator 2)
				A[iPivotCol][l] = ftmp;
    e404:	50d0      	str	r0, [r2, r3]
    e406:	3304      	adds	r3, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:389 (discriminator 2)

		// check the pivot rows iPivotRow and iPivotCol are not the same before swapping
		if (iPivotRow != iPivotCol)
		{
			// loop over columns l
			for (l = 0; l < isize; l++)
    e408:	42ab      	cmp	r3, r5
    e40a:	d1f8      	bne.n	e3fe <fmatrixAeqInvA+0x126>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:399
				A[iPivotCol][l] = ftmp;
			}
		}

		// record that on the i-th iteration rows iPivotRow and iPivotCol were swapped
		iRowInd[i] = iPivotRow;
    e40c:	9907      	ldr	r1, [sp, #28]
    e40e:	9a02      	ldr	r2, [sp, #8]
    e410:	9e09      	ldr	r6, [sp, #36]	; 0x24
    e412:	5472      	strb	r2, [r6, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:400
		iColInd[i] = iPivotCol;
    e414:	9e08      	ldr	r6, [sp, #32]
    e416:	9a03      	ldr	r2, [sp, #12]
    e418:	5472      	strb	r2, [r6, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:403

		// check for zero on-diagonal element (singular matrix) and return with identity matrix if detected
		if (A[iPivotCol][iPivotCol] == 0.0F)
    e41a:	6823      	ldr	r3, [r4, #0]
    e41c:	9e01      	ldr	r6, [sp, #4]
    e41e:	4698      	mov	r8, r3
    e420:	1c35      	adds	r5, r6, #0
    e422:	4445      	add	r5, r8
    e424:	682c      	ldr	r4, [r5, #0]
    e426:	2100      	movs	r1, #0
    e428:	1c20      	adds	r0, r4, #0
    e42a:	f7f2 f935 	bl	698 <__aeabi_fcmpeq>
    e42e:	2800      	cmp	r0, #0
    e430:	d178      	bne.n	e524 <fmatrixAeqInvA+0x24c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:411
			fmatrixAeqI(A, isize);
			return;
		}

		// calculate the reciprocal of the pivot element knowing it's non-zero
		recippiv = 1.0F / A[iPivotCol][iPivotCol];
    e432:	20fe      	movs	r0, #254	; 0xfe
    e434:	1c21      	adds	r1, r4, #0
    e436:	0580      	lsls	r0, r0, #22
    e438:	f7f2 fac8 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:413
		// by definition, the diagonal element normalizes to 1
		A[iPivotCol][iPivotCol] = 1.0F;
    e43c:	23fe      	movs	r3, #254	; 0xfe
    e43e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e440:	059b      	lsls	r3, r3, #22
    e442:	602b      	str	r3, [r5, #0]
    e444:	1c0d      	adds	r5, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:411
			fmatrixAeqI(A, isize);
			return;
		}

		// calculate the reciprocal of the pivot element knowing it's non-zero
		recippiv = 1.0F / A[iPivotCol][iPivotCol];
    e446:	1c06      	adds	r6, r0, #0
    e448:	4644      	mov	r4, r8
    e44a:	4445      	add	r5, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:418 (discriminator 2)
		A[iPivotCol][iPivotCol] = 1.0F;
		// multiply all of row iPivotCol by the reciprocal of the pivot element including the diagonal element
		// the diagonal element A[iPivotCol][iPivotCol] now has value equal to the reciprocal of its previous value
		for (l = 0; l < isize; l++)
		{
			A[iPivotCol][l] *= recippiv;
    e44c:	6820      	ldr	r0, [r4, #0]
    e44e:	1c31      	adds	r1, r6, #0
    e450:	f7f2 fca0 	bl	d94 <__aeabi_fmul>
    e454:	c401      	stmia	r4!, {r0}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:416 (discriminator 2)
		recippiv = 1.0F / A[iPivotCol][iPivotCol];
		// by definition, the diagonal element normalizes to 1
		A[iPivotCol][iPivotCol] = 1.0F;
		// multiply all of row iPivotCol by the reciprocal of the pivot element including the diagonal element
		// the diagonal element A[iPivotCol][iPivotCol] now has value equal to the reciprocal of its previous value
		for (l = 0; l < isize; l++)
    e456:	42ac      	cmp	r4, r5
    e458:	d1f8      	bne.n	e44c <fmatrixAeqInvA+0x174>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:416
    e45a:	9a04      	ldr	r2, [sp, #16]
    e45c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    e45e:	2300      	movs	r3, #0
    e460:	9700      	str	r7, [sp, #0]
    e462:	4691      	mov	r9, r2
    e464:	4647      	mov	r7, r8
    e466:	469a      	mov	sl, r3
    e468:	46b0      	mov	r8, r6
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:423
			A[iPivotCol][l] *= recippiv;
		}
		// loop over all rows m of A
		for (m = 0; m < isize; m++)
		{
			if (m != iPivotCol)
    e46a:	9e05      	ldr	r6, [sp, #20]
    e46c:	429e      	cmp	r6, r3
    e46e:	d017      	beq.n	e4a0 <fmatrixAeqInvA+0x1c8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:426
			{
				// scaling factor for this row m is in column iPivotCol
				scaling = A[m][iPivotCol];
    e470:	464b      	mov	r3, r9
    e472:	681d      	ldr	r5, [r3, #0]
    e474:	9e01      	ldr	r6, [sp, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:428
				// zero this element
				A[m][iPivotCol] = 0.0F;
    e476:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:426
		for (m = 0; m < isize; m++)
		{
			if (m != iPivotCol)
			{
				// scaling factor for this row m is in column iPivotCol
				scaling = A[m][iPivotCol];
    e478:	19ab      	adds	r3, r5, r6
    e47a:	681e      	ldr	r6, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:428
				// zero this element
				A[m][iPivotCol] = 0.0F;
    e47c:	6019      	str	r1, [r3, #0]
    e47e:	1c33      	adds	r3, r6, #0
    e480:	2400      	movs	r4, #0
    e482:	4646      	mov	r6, r8
    e484:	4698      	mov	r8, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:432 (discriminator 2)
				// loop over all columns l of A and perform elimination
				for (l = 0; l < isize; l++)
				{
					A[m][l] -= A[iPivotCol][l] * scaling;
    e486:	5939      	ldr	r1, [r7, r4]
    e488:	4640      	mov	r0, r8
    e48a:	f7f2 fc83 	bl	d94 <__aeabi_fmul>
    e48e:	1c01      	adds	r1, r0, #0
    e490:	5928      	ldr	r0, [r5, r4]
    e492:	f7f2 fda9 	bl	fe8 <__aeabi_fsub>
    e496:	5128      	str	r0, [r5, r4]
    e498:	3404      	adds	r4, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:430 (discriminator 2)
				// scaling factor for this row m is in column iPivotCol
				scaling = A[m][iPivotCol];
				// zero this element
				A[m][iPivotCol] = 0.0F;
				// loop over all columns l of A and perform elimination
				for (l = 0; l < isize; l++)
    e49a:	42a6      	cmp	r6, r4
    e49c:	d1f3      	bne.n	e486 <fmatrixAeqInvA+0x1ae>
    e49e:	46b0      	mov	r8, r6
    e4a0:	4653      	mov	r3, sl
    e4a2:	3301      	adds	r3, #1
    e4a4:	b2db      	uxtb	r3, r3
    e4a6:	469a      	mov	sl, r3
    e4a8:	2104      	movs	r1, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:421
		for (l = 0; l < isize; l++)
		{
			A[iPivotCol][l] *= recippiv;
		}
		// loop over all rows m of A
		for (m = 0; m < isize; m++)
    e4aa:	b25b      	sxtb	r3, r3
    e4ac:	4489      	add	r9, r1
    e4ae:	459b      	cmp	fp, r3
    e4b0:	d1db      	bne.n	e46a <fmatrixAeqInvA+0x192>
    e4b2:	9e07      	ldr	r6, [sp, #28]
    e4b4:	9f00      	ldr	r7, [sp, #0]
    e4b6:	3601      	adds	r6, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:348
	{
		iPivot[j] = 0;
	}

	// main loop i over the dimensions of the square matrix A
	for (i = 0; i < isize; i++)
    e4b8:	b273      	sxtb	r3, r6
    e4ba:	9607      	str	r6, [sp, #28]
    e4bc:	459b      	cmp	fp, r3
    e4be:	dd00      	ble.n	e4c2 <fmatrixAeqInvA+0x1ea>
    e4c0:	e731      	b.n	e326 <fmatrixAeqInvA+0x4e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:439
			}
		}
	} // end of loop i over the matrix dimensions

	// finally, loop in inverse order to apply the missing column swaps
	for (l = isize - 1; l >= 0; l--)
    e4c2:	9f06      	ldr	r7, [sp, #24]
    e4c4:	b2fe      	uxtb	r6, r7
    e4c6:	b2f7      	uxtb	r7, r6
    e4c8:	b27b      	sxtb	r3, r7
    e4ca:	2b00      	cmp	r3, #0
    e4cc:	da00      	bge.n	e4d0 <fmatrixAeqInvA+0x1f8>
    e4ce:	e76f      	b.n	e3b0 <fmatrixAeqInvA+0xd8>
    e4d0:	9a04      	ldr	r2, [sp, #16]
    e4d2:	00b6      	lsls	r6, r6, #2
    e4d4:	3204      	adds	r2, #4
    e4d6:	1996      	adds	r6, r2, r6
    e4d8:	46bc      	mov	ip, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:446
		// set i and j to the two columns to be swapped
		i = iRowInd[l];
		j = iColInd[l];

		// check that the two columns i and j to be swapped are not the same
		if (i != j)
    e4da:	9f09      	ldr	r7, [sp, #36]	; 0x24
    e4dc:	56fd      	ldrsb	r5, [r7, r3]
    e4de:	9f08      	ldr	r7, [sp, #32]
    e4e0:	56fc      	ldrsb	r4, [r7, r3]
    e4e2:	42a5      	cmp	r5, r4
    e4e4:	d00e      	beq.n	e504 <fmatrixAeqInvA+0x22c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:449 (discriminator 1)
		{
			// loop over all rows k to swap columns i and j of A
			for (k = 0; k < isize; k++)
    e4e6:	4659      	mov	r1, fp
    e4e8:	2900      	cmp	r1, #0
    e4ea:	dd0b      	ble.n	e504 <fmatrixAeqInvA+0x22c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:449
    e4ec:	9b04      	ldr	r3, [sp, #16]
    e4ee:	00ad      	lsls	r5, r5, #2
    e4f0:	00a4      	lsls	r4, r4, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:451 (discriminator 2)
			{
				ftmp = A[k][i];
    e4f2:	cb04      	ldmia	r3!, {r2}
    e4f4:	1951      	adds	r1, r2, r5
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:452 (discriminator 2)
				A[k][i] = A[k][j];
    e4f6:	1912      	adds	r2, r2, r4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:451 (discriminator 2)
		if (i != j)
		{
			// loop over all rows k to swap columns i and j of A
			for (k = 0; k < isize; k++)
			{
				ftmp = A[k][i];
    e4f8:	6808      	ldr	r0, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:452 (discriminator 2)
				A[k][i] = A[k][j];
    e4fa:	6817      	ldr	r7, [r2, #0]
    e4fc:	600f      	str	r7, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:453 (discriminator 2)
				A[k][j] = ftmp;
    e4fe:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:449 (discriminator 2)

		// check that the two columns i and j to be swapped are not the same
		if (i != j)
		{
			// loop over all rows k to swap columns i and j of A
			for (k = 0; k < isize; k++)
    e500:	42b3      	cmp	r3, r6
    e502:	d1f6      	bne.n	e4f2 <fmatrixAeqInvA+0x21a>
    e504:	4667      	mov	r7, ip
    e506:	3f01      	subs	r7, #1
    e508:	b2ff      	uxtb	r7, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:439
			}
		}
	} // end of loop i over the matrix dimensions

	// finally, loop in inverse order to apply the missing column swaps
	for (l = isize - 1; l >= 0; l--)
    e50a:	b27b      	sxtb	r3, r7
    e50c:	46bc      	mov	ip, r7
    e50e:	2b00      	cmp	r3, #0
    e510:	dae3      	bge.n	e4da <fmatrixAeqInvA+0x202>
    e512:	e74d      	b.n	e3b0 <fmatrixAeqInvA+0xd8>
    e514:	9904      	ldr	r1, [sp, #16]
    e516:	00b6      	lsls	r6, r6, #2
    e518:	9601      	str	r6, [sp, #4]
    e51a:	198c      	adds	r4, r1, r6
    e51c:	e776      	b.n	e40c <fmatrixAeqInvA+0x134>
    e51e:	3b01      	subs	r3, #1
    e520:	9306      	str	r3, [sp, #24]
    e522:	e7ce      	b.n	e4c2 <fmatrixAeqInvA+0x1ea>
fmatrixAeqI():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:74
		pAij = A[i];
		for (j = 0; j < rc; j++)
		{
			*(pAij++) = 0.0F;
		}
		A[i][i] = 1.0F;
    e524:	27fe      	movs	r7, #254	; 0xfe
    e526:	05bf      	lsls	r7, r7, #22
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:66
	// rc = rows and columns in A

	float *pAij;	// pointer to A[i][j]
	int8 i, j;		// loop counters

	for (i = 0; i < rc; i++)
    e528:	2500      	movs	r5, #0
    e52a:	2300      	movs	r3, #0
    e52c:	4658      	mov	r0, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:72
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < rc; j++)
		{
			*(pAij++) = 0.0F;
    e52e:	2400      	movs	r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:74
		}
		A[i][i] = 1.0F;
    e530:	46bc      	mov	ip, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:69
	int8 i, j;		// loop counters

	for (i = 0; i < rc; i++)
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
    e532:	9904      	ldr	r1, [sp, #16]
    e534:	009e      	lsls	r6, r3, #2
    e536:	598f      	ldr	r7, [r1, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:70
		for (j = 0; j < rc; j++)
    e538:	2300      	movs	r3, #0
    e53a:	1c3a      	adds	r2, r7, #0
    e53c:	3301      	adds	r3, #1
    e53e:	b2db      	uxtb	r3, r3
    e540:	b259      	sxtb	r1, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:72
		{
			*(pAij++) = 0.0F;
    e542:	c210      	stmia	r2!, {r4}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:70

	for (i = 0; i < rc; i++)
	{
		// set pAij to &A[i][j=0]
		pAij = A[i];
		for (j = 0; j < rc; j++)
    e544:	4281      	cmp	r1, r0
    e546:	dbf9      	blt.n	e53c <fmatrixAeqInvA+0x264>
    e548:	3501      	adds	r5, #1
    e54a:	b2ed      	uxtb	r5, r5
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:74
		{
			*(pAij++) = 0.0F;
		}
		A[i][i] = 1.0F;
    e54c:	4662      	mov	r2, ip
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:66
	// rc = rows and columns in A

	float *pAij;	// pointer to A[i][j]
	int8 i, j;		// loop counters

	for (i = 0; i < rc; i++)
    e54e:	b26b      	sxtb	r3, r5
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:74
		pAij = A[i];
		for (j = 0; j < rc; j++)
		{
			*(pAij++) = 0.0F;
		}
		A[i][i] = 1.0F;
    e550:	51ba      	str	r2, [r7, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/matrix.c:66
	// rc = rows and columns in A

	float *pAij;	// pointer to A[i][j]
	int8 i, j;		// loop counters

	for (i = 0; i < rc; i++)
    e552:	4283      	cmp	r3, r0
    e554:	dbed      	blt.n	e532 <fmatrixAeqInvA+0x25a>
    e556:	e72b      	b.n	e3b0 <fmatrixAeqInvA+0xd8>

0000e558 <Main_task>:
Main_task():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:55
struct ProjectGlobals globals;
struct MQXLiteGlobals mqxglobals;

// Main task
void Main_task(uint32_t task_init_data)
{
    e558:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:57
	// switch the red LED on (line low sets LED on)
	LED_RED_ClrVal(NULL);
    e55a:	2000      	movs	r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:55
struct ProjectGlobals globals;
struct MQXLiteGlobals mqxglobals;

// Main task
void Main_task(uint32_t task_init_data)
{
    e55c:	b082      	sub	sp, #8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:57
	// switch the red LED on (line low sets LED on)
	LED_RED_ClrVal(NULL);
    e55e:	f004 faff 	bl	12b60 <LED_RED_ClrVal>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:58
	LED_GREEN_SetVal(NULL);
    e562:	2000      	movs	r0, #0
    e564:	f004 face 	bl	12b04 <LED_GREEN_SetVal>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:59
	LED_BLUE_SetVal(NULL);
    e568:	2000      	movs	r0, #0
    e56a:	f004 faa3 	bl	12ab4 <LED_BLUE_SetVal>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:62

	// create the sensor sampling event (typically 200Hz)
	_lwevent_create(&(mqxglobals.SamplingEventStruct), LWEVENT_AUTO_CLEAR);
    e56e:	4c26      	ldr	r4, [pc, #152]	; (e608 <Main_task+0xb0>)
    e570:	2101      	movs	r1, #1
    e572:	1c20      	adds	r0, r4, #0
    e574:	f002 feee 	bl	11354 <_lwevent_create>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:64
	// create the Kalman filter sensor fusion event (typically 25Hz)
	_lwevent_create(&(mqxglobals.RunKFEventStruct), LWEVENT_AUTO_CLEAR);
    e578:	1c20      	adds	r0, r4, #0
    e57a:	2101      	movs	r1, #1
    e57c:	3024      	adds	r0, #36	; 0x24
    e57e:	f002 fee9 	bl	11354 <_lwevent_create>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:69
	// create the magnetic calibration event (typically once per minute)
	_lwevent_create(&(mqxglobals.MagCalEventStruct), LWEVENT_AUTO_CLEAR);

	// create the sensor read task (controlled by sensor sampling event SamplingEventStruct)	
	_task_create_at(0, RDSENSDATA_TASK, 0, RdSensData_task_stack, RDSENSDATA_TASK_STACK_SIZE);
    e582:	4d22      	ldr	r5, [pc, #136]	; (e60c <Main_task+0xb4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:66
	// create the sensor sampling event (typically 200Hz)
	_lwevent_create(&(mqxglobals.SamplingEventStruct), LWEVENT_AUTO_CLEAR);
	// create the Kalman filter sensor fusion event (typically 25Hz)
	_lwevent_create(&(mqxglobals.RunKFEventStruct), LWEVENT_AUTO_CLEAR);
	// create the magnetic calibration event (typically once per minute)
	_lwevent_create(&(mqxglobals.MagCalEventStruct), LWEVENT_AUTO_CLEAR);
    e584:	1c20      	adds	r0, r4, #0
    e586:	2101      	movs	r1, #1
    e588:	3048      	adds	r0, #72	; 0x48
    e58a:	f002 fee3 	bl	11354 <_lwevent_create>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:69

	// create the sensor read task (controlled by sensor sampling event SamplingEventStruct)	
	_task_create_at(0, RDSENSDATA_TASK, 0, RdSensData_task_stack, RDSENSDATA_TASK_STACK_SIZE);
    e58e:	9500      	str	r5, [sp, #0]
    e590:	2102      	movs	r1, #2
    e592:	2200      	movs	r2, #0
    e594:	4b1e      	ldr	r3, [pc, #120]	; (e610 <Main_task+0xb8>)
    e596:	2000      	movs	r0, #0
    e598:	f003 fd1a 	bl	11fd0 <_task_create_at>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:71
	// create the sensor fusion task (controlled by sensor fusion event RunKFEventStruct)	
	_task_create_at(0, FUSION_TASK, 0, Fusion_task_stack, FUSION_TASK_STACK_SIZE);
    e59c:	9500      	str	r5, [sp, #0]
    e59e:	2103      	movs	r1, #3
    e5a0:	2200      	movs	r2, #0
    e5a2:	4b1c      	ldr	r3, [pc, #112]	; (e614 <Main_task+0xbc>)
    e5a4:	2000      	movs	r0, #0
    e5a6:	f003 fd13 	bl	11fd0 <_task_create_at>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:73
	// create the magnetic calibration task (controlled by MagCalEventStruct)	
	_task_create_at(0, MAGCAL_TASK, 0, MagCal_task_stack, MAGCAL_TASK_STACK_SIZE);
    e5aa:	23e3      	movs	r3, #227	; 0xe3
    e5ac:	009b      	lsls	r3, r3, #2
    e5ae:	9300      	str	r3, [sp, #0]
    e5b0:	2200      	movs	r2, #0
    e5b2:	4b19      	ldr	r3, [pc, #100]	; (e618 <Main_task+0xc0>)
    e5b4:	2104      	movs	r1, #4
    e5b6:	2000      	movs	r0, #0
    e5b8:	f003 fd0a 	bl	11fd0 <_task_create_at>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:78
	// and this main task uses about 512 bytes stack for a grand total of 3K task stack space

	// set the sensor sampling frequency (typically 200Hz)
	// this is set to 200Hz by default in PE but we want to set it using value in proj_config.h 
	FTM_SetPeriodTicks(FTM_DeviceData, (uint16) (FTM_INCLK_HZ / SENSORFS));
    e5bc:	4e17      	ldr	r6, [pc, #92]	; (e61c <Main_task+0xc4>)
    e5be:	4d18      	ldr	r5, [pc, #96]	; (e620 <Main_task+0xc8>)
    e5c0:	1c31      	adds	r1, r6, #0
    e5c2:	6928      	ldr	r0, [r5, #16]
    e5c4:	f004 f820 	bl	12608 <FTM_SetPeriodTicks>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:81
	
	// initialize globals
	mqxglobals.FTMReload = (uint16)(FTM_INCLK_HZ / SENSORFS);
    e5c8:	236c      	movs	r3, #108	; 0x6c
    e5ca:	52e6      	strh	r6, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:83
	mqxglobals.FTMTimestamp = 0;
	globals.iPacketNumber = 0;
    e5cc:	4b15      	ldr	r3, [pc, #84]	; (e624 <Main_task+0xcc>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:82
	// this is set to 200Hz by default in PE but we want to set it using value in proj_config.h 
	FTM_SetPeriodTicks(FTM_DeviceData, (uint16) (FTM_INCLK_HZ / SENSORFS));
	
	// initialize globals
	mqxglobals.FTMReload = (uint16)(FTM_INCLK_HZ / SENSORFS);
	mqxglobals.FTMTimestamp = 0;
    e5ce:	2200      	movs	r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:84
	globals.iPacketNumber = 0;
	globals.AngularVelocityPacketOn = true;
    e5d0:	2101      	movs	r1, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:82
	// this is set to 200Hz by default in PE but we want to set it using value in proj_config.h 
	FTM_SetPeriodTicks(FTM_DeviceData, (uint16) (FTM_INCLK_HZ / SENSORFS));
	
	// initialize globals
	mqxglobals.FTMReload = (uint16)(FTM_INCLK_HZ / SENSORFS);
	mqxglobals.FTMTimestamp = 0;
    e5d2:	6722      	str	r2, [r4, #112]	; 0x70
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:83
	globals.iPacketNumber = 0;
    e5d4:	721a      	strb	r2, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:84
	globals.AngularVelocityPacketOn = true;
    e5d6:	7019      	strb	r1, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:85
	globals.DebugPacketOn = true;
    e5d8:	7059      	strb	r1, [r3, #1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:86
	globals.RPCPacketOn = true;
    e5da:	7099      	strb	r1, [r3, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:87
	globals.AltPacketOn = true;
    e5dc:	70d9      	strb	r1, [r3, #3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:88
	globals.iMPL3115Found = false;
    e5de:	725a      	strb	r2, [r3, #9]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:89
	globals.MagneticPacketID = 0;
    e5e0:	80da      	strh	r2, [r3, #6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:92

	// initialize the BlueRadios Bluetooth module and other user tasks
	UserStartup();
    e5e2:	f002 fbef 	bl	10dc4 <UserStartup>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:96
	
	// initialize the incoming command buffer to all '~' = 0x7E and trigger a callback 
	// when any single command character is received into the UART buffer
	iCommand[0] = iCommand[1] = iCommand[2] = iCommand[3] = '~';
    e5e6:	4b10      	ldr	r3, [pc, #64]	; (e628 <Main_task+0xd0>)
    e5e8:	227e      	movs	r2, #126	; 0x7e
    e5ea:	70da      	strb	r2, [r3, #3]
    e5ec:	709a      	strb	r2, [r3, #2]
    e5ee:	705a      	strb	r2, [r3, #1]
    e5f0:	701a      	strb	r2, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:97
	UART_ReceiveBlock(UART_DeviceData, sUARTInputBuf, 1);
    e5f2:	490e      	ldr	r1, [pc, #56]	; (e62c <Main_task+0xd4>)
    e5f4:	2201      	movs	r2, #1
    e5f6:	6968      	ldr	r0, [r5, #20]
    e5f8:	f004 fcae 	bl	12f58 <UART_ReceiveBlock>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:100

	// destroy this task (main task) now that the three new tasks are created
	_task_destroy(MQX_NULL_TASK_ID);
    e5fc:	2000      	movs	r0, #0
    e5fe:	f003 faa9 	bl	11b54 <_task_destroy>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:103

	return;
}
    e602:	b002      	add	sp, #8
    e604:	bd70      	pop	{r4, r5, r6, pc}
    e606:	46c0      	nop			; (mov r8, r8)
    e608:	1fffe294 	.word	0x1fffe294
    e60c:	0000048c 	.word	0x0000048c
    e610:	20000570 	.word	0x20000570
    e614:	200010c8 	.word	0x200010c8
    e618:	20001554 	.word	0x20001554
    e61c:	00001388 	.word	0x00001388
    e620:	1fffe108 	.word	0x1fffe108
    e624:	1fffe310 	.word	0x1fffe310
    e628:	1fffe170 	.word	0x1fffe170
    e62c:	1fffe274 	.word	0x1fffe274

0000e630 <RdSensData_task>:
RdSensData_task():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:107

// sensor read task
void RdSensData_task(uint32_t task_init_data)
{
    e630:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:109
	// initialize the physical sensors over I2C and the sensor data structures
	RdSensData_Init();
    e632:	f001 ffcf 	bl	105d4 <RdSensData_Init>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:112

	// initialize the user high frequency (typically 200Hz) task
	UserHighFrequencyTaskInit();
    e636:	f002 fbcd 	bl	10dd4 <UserHighFrequencyTaskInit>
    e63a:	4c0c      	ldr	r4, [pc, #48]	; (e66c <RdSensData_task+0x3c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:124
		// FALSE means any bit (of the 1 bit enabled by the mask) unblocks
		// and NULL means timeout is infinite
		_lwevent_wait_for(&(mqxglobals.SamplingEventStruct), 1, FALSE, NULL);

		// reset the Kalman filter task flag
		mqxglobals.RunKF_Event_Flag = 0;
    e63c:	2576      	movs	r5, #118	; 0x76
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:133
		UserHighFrequencyTaskRun();

		// use the Kalman filter flag set by the sensor read task (typically every 8 iterations)
		// with a mask of 1 (least significant bit set) to enable the Kalman filter task to run
		if (mqxglobals.RunKF_Event_Flag)
			_lwevent_set(&(mqxglobals.RunKFEventStruct), 1);
    e63e:	1c26      	adds	r6, r4, #0
    e640:	3624      	adds	r6, #36	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:121
	{
		// wait here for the sampling event (hardware clock, typically at 200Hz)
		// the Kalman filter and magnetic fusion tasks execute while this task is blocked here
		// FALSE means any bit (of the 1 bit enabled by the mask) unblocks
		// and NULL means timeout is infinite
		_lwevent_wait_for(&(mqxglobals.SamplingEventStruct), 1, FALSE, NULL);
    e642:	2101      	movs	r1, #1
    e644:	2200      	movs	r2, #0
    e646:	2300      	movs	r3, #0
    e648:	1c20      	adds	r0, r4, #0
    e64a:	f002 ff59 	bl	11500 <_lwevent_wait_for>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:124

		// reset the Kalman filter task flag
		mqxglobals.RunKF_Event_Flag = 0;
    e64e:	2300      	movs	r3, #0
    e650:	5363      	strh	r3, [r4, r5]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:126
		// read the sensors
		RdSensData_Run();
    e652:	f002 f821 	bl	10698 <RdSensData_Run>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:128
		// run the user high frequency task
		UserHighFrequencyTaskRun();
    e656:	f002 fbc1 	bl	10ddc <UserHighFrequencyTaskRun>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:132

		// use the Kalman filter flag set by the sensor read task (typically every 8 iterations)
		// with a mask of 1 (least significant bit set) to enable the Kalman filter task to run
		if (mqxglobals.RunKF_Event_Flag)
    e65a:	5b63      	ldrh	r3, [r4, r5]
    e65c:	2b00      	cmp	r3, #0
    e65e:	d0f0      	beq.n	e642 <RdSensData_task+0x12>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:133
			_lwevent_set(&(mqxglobals.RunKFEventStruct), 1);
    e660:	1c30      	adds	r0, r6, #0
    e662:	2101      	movs	r1, #1
    e664:	f002 feb8 	bl	113d8 <_lwevent_set>
    e668:	e7eb      	b.n	e642 <RdSensData_task+0x12>
    e66a:	46c0      	nop			; (mov r8, r8)
    e66c:	1fffe294 	.word	0x1fffe294

0000e670 <Fusion_task>:
Fusion_task():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:140
	}  // end of infinite loop
}

// Kalman filter sensor fusion task
void Fusion_task(uint32_t task_init_data)
{
    e670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e672:	464f      	mov	r7, r9
    e674:	4646      	mov	r6, r8
    e676:	b4c0      	push	{r6, r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:144
	uint16_t LedGreenCounter = 0;

	// initialize the sensor fusion algorithms
	Fusion_Init();
    e678:	f001 ffd8 	bl	1062c <Fusion_Init>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:147

	// initialize the user medium frequency (typically 25Hz) task
	UserMediumFrequencyTaskInit();
    e67c:	f002 fbac 	bl	10dd8 <UserMediumFrequencyTaskInit>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:153

	// infinite loop controlled by MQX-Lite events
	while(1)
	{
		// ensure the red LED (power up check) is off (line high)
		LED_RED_SetVal(NULL);
    e680:	2000      	movs	r0, #0
    e682:	f004 fa75 	bl	12b70 <LED_RED_SetVal>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:156
		
		// set the output test pin to zero (for timing measurements)
		TestPin_KF_Time_ClrVal(NULL);
    e686:	2000      	movs	r0, #0
    e688:	f004 fb32 	bl	12cf0 <TestPin_KF_Time_ClrVal>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:161

		// wait for the sensor fusion event to occur
		// FALSE means any bit (of the 1 bit enabled by the mask) unblocks
		// and NULL means timeout is infinite
		_lwevent_wait_for(&(mqxglobals.RunKFEventStruct), 1, FALSE, NULL);
    e68c:	4f1b      	ldr	r7, [pc, #108]	; (e6fc <Fusion_task+0x8c>)
    e68e:	2300      	movs	r3, #0
    e690:	2101      	movs	r1, #1
    e692:	2200      	movs	r2, #0
    e694:	1c38      	adds	r0, r7, #0
    e696:	f002 ff33 	bl	11500 <_lwevent_wait_for>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:164

		// set the output test pin to high to denote sensor fusion running
		TestPin_KF_Time_SetVal(NULL);
    e69a:	2000      	movs	r0, #0
    e69c:	f004 fb30 	bl	12d00 <TestPin_KF_Time_SetVal>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:174
			LED_GREEN_NegVal(NULL);
			LedGreenCounter = 0;
		}

		// reset the magnetic calibration flag (this is set by the fusion algorithm)
		mqxglobals.MagCal_Event_Flag = 0;
    e6a0:	2300      	movs	r3, #0
    e6a2:	4698      	mov	r8, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:186
		// enable the magnetic calibration event if the flag for a new magnetic calibration
		// with a mask of 1 (least significant bit set)
		// was set by the sensor fusion algorithms
		if (mqxglobals.MagCal_Event_Flag)
		{
			_lwevent_set(&(mqxglobals.MagCalEventStruct), 1);
    e6a4:	2324      	movs	r3, #36	; 0x24
    e6a6:	1c3e      	adds	r6, r7, #0
    e6a8:	19db      	adds	r3, r3, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:167

		// set the output test pin to high to denote sensor fusion running
		TestPin_KF_Time_SetVal(NULL);

		// flash the green LED to denote the sensor fusion is running
		if (++LedGreenCounter >= 5)
    e6aa:	2401      	movs	r4, #1
    e6ac:	3e24      	subs	r6, #36	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:174
			LED_GREEN_NegVal(NULL);
			LedGreenCounter = 0;
		}

		// reset the magnetic calibration flag (this is set by the fusion algorithm)
		mqxglobals.MagCal_Event_Flag = 0;
    e6ae:	2578      	movs	r5, #120	; 0x78
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:186
		// enable the magnetic calibration event if the flag for a new magnetic calibration
		// with a mask of 1 (least significant bit set)
		// was set by the sensor fusion algorithms
		if (mqxglobals.MagCal_Event_Flag)
		{
			_lwevent_set(&(mqxglobals.MagCalEventStruct), 1);
    e6b0:	4699      	mov	r9, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:174
			LED_GREEN_NegVal(NULL);
			LedGreenCounter = 0;
		}

		// reset the magnetic calibration flag (this is set by the fusion algorithm)
		mqxglobals.MagCal_Event_Flag = 0;
    e6b2:	4643      	mov	r3, r8
    e6b4:	5373      	strh	r3, [r6, r5]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:176
		// call the sensor fusion algorithms
		Fusion_Run();
    e6b6:	f002 f985 	bl	109c4 <Fusion_Run>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:179

		// run the user medium frequency (typically 25Hz) user task
		UserMediumFrequencyTaskRun();
    e6ba:	f002 fb91 	bl	10de0 <UserMediumFrequencyTaskRun>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:184

		// enable the magnetic calibration event if the flag for a new magnetic calibration
		// with a mask of 1 (least significant bit set)
		// was set by the sensor fusion algorithms
		if (mqxglobals.MagCal_Event_Flag)
    e6be:	5b73      	ldrh	r3, [r6, r5]
    e6c0:	2b00      	cmp	r3, #0
    e6c2:	d003      	beq.n	e6cc <Fusion_task+0x5c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:186
		{
			_lwevent_set(&(mqxglobals.MagCalEventStruct), 1);
    e6c4:	4648      	mov	r0, r9
    e6c6:	2101      	movs	r1, #1
    e6c8:	f002 fe86 	bl	113d8 <_lwevent_set>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:153

	// infinite loop controlled by MQX-Lite events
	while(1)
	{
		// ensure the red LED (power up check) is off (line high)
		LED_RED_SetVal(NULL);
    e6cc:	2000      	movs	r0, #0
    e6ce:	f004 fa4f 	bl	12b70 <LED_RED_SetVal>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:156
		
		// set the output test pin to zero (for timing measurements)
		TestPin_KF_Time_ClrVal(NULL);
    e6d2:	2000      	movs	r0, #0
    e6d4:	f004 fb0c 	bl	12cf0 <TestPin_KF_Time_ClrVal>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:167

		// set the output test pin to high to denote sensor fusion running
		TestPin_KF_Time_SetVal(NULL);

		// flash the green LED to denote the sensor fusion is running
		if (++LedGreenCounter >= 5)
    e6d8:	3401      	adds	r4, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:161
		TestPin_KF_Time_ClrVal(NULL);

		// wait for the sensor fusion event to occur
		// FALSE means any bit (of the 1 bit enabled by the mask) unblocks
		// and NULL means timeout is infinite
		_lwevent_wait_for(&(mqxglobals.RunKFEventStruct), 1, FALSE, NULL);
    e6da:	2101      	movs	r1, #1
    e6dc:	2200      	movs	r2, #0
    e6de:	2300      	movs	r3, #0
    e6e0:	1c38      	adds	r0, r7, #0
    e6e2:	f002 ff0d 	bl	11500 <_lwevent_wait_for>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:167

		// set the output test pin to high to denote sensor fusion running
		TestPin_KF_Time_SetVal(NULL);

		// flash the green LED to denote the sensor fusion is running
		if (++LedGreenCounter >= 5)
    e6e6:	b2a4      	uxth	r4, r4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:164
		// FALSE means any bit (of the 1 bit enabled by the mask) unblocks
		// and NULL means timeout is infinite
		_lwevent_wait_for(&(mqxglobals.RunKFEventStruct), 1, FALSE, NULL);

		// set the output test pin to high to denote sensor fusion running
		TestPin_KF_Time_SetVal(NULL);
    e6e8:	2000      	movs	r0, #0
    e6ea:	f004 fb09 	bl	12d00 <TestPin_KF_Time_SetVal>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:167

		// flash the green LED to denote the sensor fusion is running
		if (++LedGreenCounter >= 5)
    e6ee:	2c04      	cmp	r4, #4
    e6f0:	d9df      	bls.n	e6b2 <Fusion_task+0x42>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:169
		{
			LED_GREEN_NegVal(NULL);
    e6f2:	2000      	movs	r0, #0
    e6f4:	f004 fa0c 	bl	12b10 <LED_GREEN_NegVal>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:170
			LedGreenCounter = 0;
    e6f8:	2400      	movs	r4, #0
    e6fa:	e7da      	b.n	e6b2 <Fusion_task+0x42>
    e6fc:	1fffe2b8 	.word	0x1fffe2b8

0000e700 <MagCal_task>:
MagCal_task():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:196
	return;
}

// magnetic calibration task
void MagCal_task(uint32_t task_init_data)
{
    e700:	b570      	push	{r4, r5, r6, lr}
    e702:	4e0d      	ldr	r6, [pc, #52]	; (e738 <MagCal_task+0x38>)
    e704:	4d0d      	ldr	r5, [pc, #52]	; (e73c <MagCal_task+0x3c>)
    e706:	4c0e      	ldr	r4, [pc, #56]	; (e740 <MagCal_task+0x40>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:200 (discriminator 1)
	while(1)
	{
		// set the RED LED off and set test pin off ready for magnetic calibration to run
		LED_RED_SetVal(NULL);           
    e708:	2000      	movs	r0, #0
    e70a:	f004 fa31 	bl	12b70 <LED_RED_SetVal>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:201 (discriminator 1)
		TestPin_MagCal_Time_ClrVal(NULL);  
    e70e:	2000      	movs	r0, #0
    e710:	f004 fb22 	bl	12d58 <TestPin_MagCal_Time_ClrVal>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:207 (discriminator 1)

		// wait for the magnetic calibration event
		// this event will never be enabled for build options which don't require magnetic calibration
		// FALSE means any bit (of the 1 bit enabled by the mask) unblocks
		// and NULL means timeout is infinite
		_lwevent_wait_for(&(mqxglobals.MagCalEventStruct), 1, FALSE, NULL);
    e714:	2101      	movs	r1, #1
    e716:	2200      	movs	r2, #0
    e718:	2300      	movs	r3, #0
    e71a:	1c30      	adds	r0, r6, #0
    e71c:	f002 fef0 	bl	11500 <_lwevent_wait_for>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:210 (discriminator 1)

		// set the red LED on and test pin pin on
		LED_RED_ClrVal(NULL);            
    e720:	2000      	movs	r0, #0
    e722:	f004 fa1d 	bl	12b60 <LED_RED_ClrVal>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:211 (discriminator 1)
		TestPin_MagCal_Time_SetVal(NULL);  
    e726:	2000      	movs	r0, #0
    e728:	f004 fb1e 	bl	12d68 <TestPin_MagCal_Time_SetVal>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/mqx_tasks.c:216 (discriminator 1)

		// prevent compilation errors when magnetic calibration is not required
#if defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
		// and run the magnetic calibration
		MagCal_Run(&thisMagCal, &thisMagBuffer);
    e72c:	1c28      	adds	r0, r5, #0
    e72e:	1c21      	adds	r1, r4, #0
    e730:	f002 faaa 	bl	10c88 <MagCal_Run>
    e734:	e7e8      	b.n	e708 <MagCal_task+0x8>
    e736:	46c0      	nop			; (mov r8, r8)
    e738:	1fffe2dc 	.word	0x1fffe2dc
    e73c:	1ffff0d4 	.word	0x1ffff0d4
    e740:	1fffe410 	.word	0x1fffe410

0000e744 <f3DOFTiltNED>:
f3DOFTiltNED():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:46
#define CORRUPTQUAT 0.001F	// threshold for deciding rotation quaternion is corrupt
#define SMALLMODULUS 0.01F	// limit where rounding errors may appear

// Aerospace NED accelerometer 3DOF tilt function computing rotation matrix fR
void f3DOFTiltNED(float fR[][3], float fGp[])
{
    e744:	b5f0      	push	{r4, r5, r6, r7, lr}
    e746:	4645      	mov	r5, r8
    e748:	4657      	mov	r7, sl
    e74a:	464e      	mov	r6, r9
    e74c:	b4e0      	push	{r5, r6, r7}
    e74e:	1c0d      	adds	r5, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:57
	float fmodGyz;			// modulus of the y, z accelerometer readings
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable

	// compute the accelerometer squared magnitudes
	fmodGyz = fGp[Y] * fGp[Y] + fGp[Z] * fGp[Z];
    e750:	6849      	ldr	r1, [r1, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:46
#define CORRUPTQUAT 0.001F	// threshold for deciding rotation quaternion is corrupt
#define SMALLMODULUS 0.01F	// limit where rounding errors may appear

// Aerospace NED accelerometer 3DOF tilt function computing rotation matrix fR
void f3DOFTiltNED(float fR[][3], float fGp[])
{
    e752:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:57
	float fmodGyz;			// modulus of the y, z accelerometer readings
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable

	// compute the accelerometer squared magnitudes
	fmodGyz = fGp[Y] * fGp[Y] + fGp[Z] * fGp[Z];
    e754:	1c08      	adds	r0, r1, #0
    e756:	f7f2 fb1d 	bl	d94 <__aeabi_fmul>
    e75a:	68ae      	ldr	r6, [r5, #8]
    e75c:	1c07      	adds	r7, r0, #0
    e75e:	1c31      	adds	r1, r6, #0
    e760:	1c30      	adds	r0, r6, #0
    e762:	f7f2 fb17 	bl	d94 <__aeabi_fmul>
    e766:	1c01      	adds	r1, r0, #0
    e768:	1c38      	adds	r0, r7, #0
    e76a:	f7f1 ffc3 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:58
	fmodGxyz = fmodGyz + fGp[X] * fGp[X];
    e76e:	6829      	ldr	r1, [r5, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:57
	float fmodGyz;			// modulus of the y, z accelerometer readings
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable

	// compute the accelerometer squared magnitudes
	fmodGyz = fGp[Y] * fGp[Y] + fGp[Z] * fGp[Z];
    e770:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:58
	fmodGxyz = fmodGyz + fGp[X] * fGp[X];
    e772:	1c08      	adds	r0, r1, #0
    e774:	f7f2 fb0e 	bl	d94 <__aeabi_fmul>
    e778:	1c39      	adds	r1, r7, #0
    e77a:	f7f1 ffbb 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:61

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
    e77e:	2600      	movs	r6, #0
    e780:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:58
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable

	// compute the accelerometer squared magnitudes
	fmodGyz = fGp[Y] * fGp[Y] + fGp[Z] * fGp[Z];
	fmodGxyz = fmodGyz + fGp[X] * fGp[X];
    e782:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:61

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
    e784:	f7f1 ff88 	bl	698 <__aeabi_fcmpeq>
    e788:	2800      	cmp	r0, #0
    e78a:	d167      	bne.n	e85c <f3DOFTiltNED+0x118>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:68
		f3x3matrixAeqI(fR);
		return;
	}

	// check for vertical up or down gimbal lock case
	if (fmodGyz == 0.0F)
    e78c:	1c38      	adds	r0, r7, #0
    e78e:	1c31      	adds	r1, r6, #0
    e790:	f7f1 ff82 	bl	698 <__aeabi_fcmpeq>
    e794:	2800      	cmp	r0, #0
    e796:	d010      	beq.n	e7ba <f3DOFTiltNED+0x76>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:71
	{
		f3x3matrixAeqScalar(fR, 0.0F);
		fR[Y][Y] = 1.0F;
    e798:	27fe      	movs	r7, #254	; 0xfe
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:70
	}

	// check for vertical up or down gimbal lock case
	if (fmodGyz == 0.0F)
	{
		f3x3matrixAeqScalar(fR, 0.0F);
    e79a:	1c20      	adds	r0, r4, #0
    e79c:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:71
		fR[Y][Y] = 1.0F;
    e79e:	05bf      	lsls	r7, r7, #22
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:70
	}

	// check for vertical up or down gimbal lock case
	if (fmodGyz == 0.0F)
	{
		f3x3matrixAeqScalar(fR, 0.0F);
    e7a0:	f7ff f9f6 	bl	db90 <f3x3matrixAeqScalar>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:71
		fR[Y][Y] = 1.0F;
    e7a4:	6127      	str	r7, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:72
		if (fGp[X] >= 0.0F)
    e7a6:	6828      	ldr	r0, [r5, #0]
    e7a8:	1c31      	adds	r1, r6, #0
    e7aa:	f7f1 ff99 	bl	6e0 <__aeabi_fcmpge>
    e7ae:	2800      	cmp	r0, #0
    e7b0:	d058      	beq.n	e864 <f3DOFTiltNED+0x120>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:75
		{
			fR[X][Z] = 1.0F;
			fR[Z][X] = -1.0F;
    e7b2:	4b2e      	ldr	r3, [pc, #184]	; (e86c <f3DOFTiltNED+0x128>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:74
	{
		f3x3matrixAeqScalar(fR, 0.0F);
		fR[Y][Y] = 1.0F;
		if (fGp[X] >= 0.0F)
		{
			fR[X][Z] = 1.0F;
    e7b4:	60a7      	str	r7, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:75
			fR[Z][X] = -1.0F;
    e7b6:	61a3      	str	r3, [r4, #24]
    e7b8:	e04b      	b.n	e852 <f3DOFTiltNED+0x10e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:86
		}
		return;
	}

	// compute moduli for the general case
	fmodGyz = sqrtf(fmodGyz);
    e7ba:	1c38      	adds	r0, r7, #0
    e7bc:	f004 fe68 	bl	13490 <sqrtf>
    e7c0:	4682      	mov	sl, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:87
	fmodGxyz = sqrtf(fmodGxyz);
    e7c2:	4640      	mov	r0, r8
    e7c4:	f004 fe64 	bl	13490 <sqrtf>
    e7c8:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:88
	frecipmodGxyz = 1.0F / fmodGxyz;
    e7ca:	20fe      	movs	r0, #254	; 0xfe
    e7cc:	1c39      	adds	r1, r7, #0
    e7ce:	0580      	lsls	r0, r0, #22
    e7d0:	f7f2 f8fc 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:89
	ftmp = fmodGxyz / fmodGyz;
    e7d4:	4651      	mov	r1, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:88
	}

	// compute moduli for the general case
	fmodGyz = sqrtf(fmodGyz);
	fmodGxyz = sqrtf(fmodGxyz);
	frecipmodGxyz = 1.0F / fmodGxyz;
    e7d6:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:89
	ftmp = fmodGxyz / fmodGyz;
    e7d8:	1c38      	adds	r0, r7, #0
    e7da:	f7f2 f8f7 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:94

	// normalize the accelerometer reading into the z column
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i] * frecipmodGxyz;
    e7de:	4641      	mov	r1, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:89

	// compute moduli for the general case
	fmodGyz = sqrtf(fmodGyz);
	fmodGxyz = sqrtf(fmodGxyz);
	frecipmodGxyz = 1.0F / fmodGxyz;
	ftmp = fmodGxyz / fmodGyz;
    e7e0:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:94

	// normalize the accelerometer reading into the z column
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i] * frecipmodGxyz;
    e7e2:	6828      	ldr	r0, [r5, #0]
    e7e4:	f7f2 fad6 	bl	d94 <__aeabi_fmul>
    e7e8:	60a0      	str	r0, [r4, #8]
    e7ea:	6868      	ldr	r0, [r5, #4]
    e7ec:	4641      	mov	r1, r8
    e7ee:	f7f2 fad1 	bl	d94 <__aeabi_fmul>
    e7f2:	6160      	str	r0, [r4, #20]
    e7f4:	4681      	mov	r9, r0
    e7f6:	4641      	mov	r1, r8
    e7f8:	68a8      	ldr	r0, [r5, #8]
    e7fa:	f7f2 facb 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:98
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
    e7fe:	4641      	mov	r1, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:94
	ftmp = fmodGxyz / fmodGyz;

	// normalize the accelerometer reading into the z column
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i] * frecipmodGxyz;
    e800:	1c05      	adds	r5, r0, #0
    e802:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:98
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
    e804:	4650      	mov	r0, sl
    e806:	f7f2 fac5 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:99
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
    e80a:	68a3      	ldr	r3, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:98
	{
		fR[i][Z] = fGp[i] * frecipmodGxyz;
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
    e80c:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:99
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
    e80e:	4698      	mov	r8, r3
    e810:	2380      	movs	r3, #128	; 0x80
    e812:	061b      	lsls	r3, r3, #24
    e814:	4498      	add	r8, r3
    e816:	4649      	mov	r1, r9
    e818:	4640      	mov	r0, r8
    e81a:	f7f2 fabb 	bl	d94 <__aeabi_fmul>
    e81e:	1c39      	adds	r1, r7, #0
    e820:	f7f2 fab8 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:100
	fR[Z][X] = -fR[X][Z] * fR[Z][Z] * ftmp;
    e824:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:99
		fR[i][Z] = fGp[i] * frecipmodGxyz;
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
    e826:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:100
	fR[Z][X] = -fR[X][Z] * fR[Z][Z] * ftmp;
    e828:	4640      	mov	r0, r8
    e82a:	f7f2 fab3 	bl	d94 <__aeabi_fmul>
    e82e:	1c39      	adds	r1, r7, #0
    e830:	f7f2 fab0 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:104

	// // construct y column of orientation matrix
	fR[X][Y] = 0.0F;
	fR[Y][Y] = fR[Z][Z] * ftmp;
    e834:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:100
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
	fR[Z][X] = -fR[X][Z] * fR[Z][Z] * ftmp;
    e836:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:103

	// // construct y column of orientation matrix
	fR[X][Y] = 0.0F;
    e838:	6066      	str	r6, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:104
	fR[Y][Y] = fR[Z][Z] * ftmp;
    e83a:	1c38      	adds	r0, r7, #0
    e83c:	f7f2 faaa 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:105
	fR[Z][Y] = -fR[Y][Z] * ftmp;
    e840:	2380      	movs	r3, #128	; 0x80
    e842:	061b      	lsls	r3, r3, #24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:104
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
	fR[Z][X] = -fR[X][Z] * fR[Z][Z] * ftmp;

	// // construct y column of orientation matrix
	fR[X][Y] = 0.0F;
	fR[Y][Y] = fR[Z][Z] * ftmp;
    e844:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:105
	fR[Z][Y] = -fR[Y][Z] * ftmp;
    e846:	1c18      	adds	r0, r3, #0
    e848:	4448      	add	r0, r9
    e84a:	1c39      	adds	r1, r7, #0
    e84c:	f7f2 faa2 	bl	d94 <__aeabi_fmul>
    e850:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:108

	return;
}
    e852:	bc1c      	pop	{r2, r3, r4}
    e854:	4690      	mov	r8, r2
    e856:	4699      	mov	r9, r3
    e858:	46a2      	mov	sl, r4
    e85a:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:63
	fmodGxyz = fmodGyz + fGp[X] * fGp[X];

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
	{
		f3x3matrixAeqI(fR);
    e85c:	1c20      	adds	r0, r4, #0
    e85e:	f7ff f989 	bl	db74 <f3x3matrixAeqI>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:64
		return;
    e862:	e7f6      	b.n	e852 <f3DOFTiltNED+0x10e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:79
			fR[X][Z] = 1.0F;
			fR[Z][X] = -1.0F;
		}
		else
		{
			fR[X][Z] = -1.0F;
    e864:	4b01      	ldr	r3, [pc, #4]	; (e86c <f3DOFTiltNED+0x128>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:80
			fR[Z][X] = 1.0F;
    e866:	61a7      	str	r7, [r4, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:79
			fR[X][Z] = 1.0F;
			fR[Z][X] = -1.0F;
		}
		else
		{
			fR[X][Z] = -1.0F;
    e868:	60a3      	str	r3, [r4, #8]
    e86a:	e7f2      	b.n	e852 <f3DOFTiltNED+0x10e>
    e86c:	bf800000 	.word	0xbf800000

0000e870 <f3DOFTiltAndroid>:
f3DOFTiltAndroid():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:112
	return;
}

// Android accelerometer 3DOF tilt function computing rotation matrix fR
void f3DOFTiltAndroid(float fR[][3], float fGp[])
{
    e870:	b5f0      	push	{r4, r5, r6, r7, lr}
    e872:	4645      	mov	r5, r8
    e874:	4657      	mov	r7, sl
    e876:	464e      	mov	r6, r9
    e878:	b4e0      	push	{r5, r6, r7}
    e87a:	1c0d      	adds	r5, r1, #0
f3DOFTiltNED():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:57
	float fmodGyz;			// modulus of the y, z accelerometer readings
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable

	// compute the accelerometer squared magnitudes
	fmodGyz = fGp[Y] * fGp[Y] + fGp[Z] * fGp[Z];
    e87c:	6849      	ldr	r1, [r1, #4]
f3DOFTiltAndroid():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:112
	return;
}

// Android accelerometer 3DOF tilt function computing rotation matrix fR
void f3DOFTiltAndroid(float fR[][3], float fGp[])
{
    e87e:	1c04      	adds	r4, r0, #0
f3DOFTiltNED():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:57
	float fmodGyz;			// modulus of the y, z accelerometer readings
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable

	// compute the accelerometer squared magnitudes
	fmodGyz = fGp[Y] * fGp[Y] + fGp[Z] * fGp[Z];
    e880:	1c08      	adds	r0, r1, #0
    e882:	f7f2 fa87 	bl	d94 <__aeabi_fmul>
    e886:	68ae      	ldr	r6, [r5, #8]
    e888:	1c07      	adds	r7, r0, #0
    e88a:	1c31      	adds	r1, r6, #0
    e88c:	1c30      	adds	r0, r6, #0
    e88e:	f7f2 fa81 	bl	d94 <__aeabi_fmul>
    e892:	1c01      	adds	r1, r0, #0
    e894:	1c38      	adds	r0, r7, #0
    e896:	f7f1 ff2d 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:58
	fmodGxyz = fmodGyz + fGp[X] * fGp[X];
    e89a:	6829      	ldr	r1, [r5, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:57
	float fmodGyz;			// modulus of the y, z accelerometer readings
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable

	// compute the accelerometer squared magnitudes
	fmodGyz = fGp[Y] * fGp[Y] + fGp[Z] * fGp[Z];
    e89c:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:58
	fmodGxyz = fmodGyz + fGp[X] * fGp[X];
    e89e:	1c08      	adds	r0, r1, #0
    e8a0:	f7f2 fa78 	bl	d94 <__aeabi_fmul>
    e8a4:	1c01      	adds	r1, r0, #0
    e8a6:	1c38      	adds	r0, r7, #0
    e8a8:	f7f1 ff24 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:61

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
    e8ac:	2600      	movs	r6, #0
    e8ae:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:58
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable

	// compute the accelerometer squared magnitudes
	fmodGyz = fGp[Y] * fGp[Y] + fGp[Z] * fGp[Z];
	fmodGxyz = fmodGyz + fGp[X] * fGp[X];
    e8b0:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:61

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
    e8b2:	f7f1 fef1 	bl	698 <__aeabi_fcmpeq>
    e8b6:	2800      	cmp	r0, #0
    e8b8:	d169      	bne.n	e98e <f3DOFTiltAndroid+0x11e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:68
		f3x3matrixAeqI(fR);
		return;
	}

	// check for vertical up or down gimbal lock case
	if (fmodGyz == 0.0F)
    e8ba:	1c38      	adds	r0, r7, #0
    e8bc:	1c31      	adds	r1, r6, #0
    e8be:	f7f1 feeb 	bl	698 <__aeabi_fcmpeq>
    e8c2:	2800      	cmp	r0, #0
    e8c4:	d010      	beq.n	e8e8 <f3DOFTiltAndroid+0x78>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:71
	{
		f3x3matrixAeqScalar(fR, 0.0F);
		fR[Y][Y] = 1.0F;
    e8c6:	27fe      	movs	r7, #254	; 0xfe
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:70
	}

	// check for vertical up or down gimbal lock case
	if (fmodGyz == 0.0F)
	{
		f3x3matrixAeqScalar(fR, 0.0F);
    e8c8:	1c20      	adds	r0, r4, #0
    e8ca:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:71
		fR[Y][Y] = 1.0F;
    e8cc:	05bf      	lsls	r7, r7, #22
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:70
	}

	// check for vertical up or down gimbal lock case
	if (fmodGyz == 0.0F)
	{
		f3x3matrixAeqScalar(fR, 0.0F);
    e8ce:	f7ff f95f 	bl	db90 <f3x3matrixAeqScalar>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:71
		fR[Y][Y] = 1.0F;
    e8d2:	6127      	str	r7, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:72
		if (fGp[X] >= 0.0F)
    e8d4:	6828      	ldr	r0, [r5, #0]
    e8d6:	1c31      	adds	r1, r6, #0
    e8d8:	f7f1 ff02 	bl	6e0 <__aeabi_fcmpge>
    e8dc:	2800      	cmp	r0, #0
    e8de:	d05a      	beq.n	e996 <f3DOFTiltAndroid+0x126>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:75
		{
			fR[X][Z] = 1.0F;
			fR[Z][X] = -1.0F;
    e8e0:	4b2f      	ldr	r3, [pc, #188]	; (e9a0 <f3DOFTiltAndroid+0x130>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:74
	{
		f3x3matrixAeqScalar(fR, 0.0F);
		fR[Y][Y] = 1.0F;
		if (fGp[X] >= 0.0F)
		{
			fR[X][Z] = 1.0F;
    e8e2:	60a7      	str	r7, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:75
			fR[Z][X] = -1.0F;
    e8e4:	61a3      	str	r3, [r4, #24]
    e8e6:	e04d      	b.n	e984 <f3DOFTiltAndroid+0x114>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:86
		}
		return;
	}

	// compute moduli for the general case
	fmodGyz = sqrtf(fmodGyz);
    e8e8:	1c38      	adds	r0, r7, #0
    e8ea:	f004 fdd1 	bl	13490 <sqrtf>
    e8ee:	4682      	mov	sl, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:87
	fmodGxyz = sqrtf(fmodGxyz);
    e8f0:	4640      	mov	r0, r8
    e8f2:	f004 fdcd 	bl	13490 <sqrtf>
    e8f6:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:88
	frecipmodGxyz = 1.0F / fmodGxyz;
    e8f8:	20fe      	movs	r0, #254	; 0xfe
    e8fa:	1c39      	adds	r1, r7, #0
    e8fc:	0580      	lsls	r0, r0, #22
    e8fe:	f7f2 f865 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:89
	ftmp = fmodGxyz / fmodGyz;
    e902:	4651      	mov	r1, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:88
	}

	// compute moduli for the general case
	fmodGyz = sqrtf(fmodGyz);
	fmodGxyz = sqrtf(fmodGxyz);
	frecipmodGxyz = 1.0F / fmodGxyz;
    e904:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:89
	ftmp = fmodGxyz / fmodGyz;
    e906:	1c38      	adds	r0, r7, #0
    e908:	f7f2 f860 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:94

	// normalize the accelerometer reading into the z column
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i] * frecipmodGxyz;
    e90c:	6829      	ldr	r1, [r5, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:89

	// compute moduli for the general case
	fmodGyz = sqrtf(fmodGyz);
	fmodGxyz = sqrtf(fmodGxyz);
	frecipmodGxyz = 1.0F / fmodGxyz;
	ftmp = fmodGxyz / fmodGyz;
    e90e:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:94

	// normalize the accelerometer reading into the z column
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i] * frecipmodGxyz;
    e910:	4640      	mov	r0, r8
    e912:	f7f2 fa3f 	bl	d94 <__aeabi_fmul>
    e916:	60a0      	str	r0, [r4, #8]
    e918:	6869      	ldr	r1, [r5, #4]
    e91a:	4640      	mov	r0, r8
    e91c:	f7f2 fa3a 	bl	d94 <__aeabi_fmul>
    e920:	6160      	str	r0, [r4, #20]
    e922:	68a9      	ldr	r1, [r5, #8]
    e924:	4681      	mov	r9, r0
    e926:	4640      	mov	r0, r8
    e928:	f7f2 fa34 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:98
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
    e92c:	4641      	mov	r1, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:94
	ftmp = fmodGxyz / fmodGyz;

	// normalize the accelerometer reading into the z column
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i] * frecipmodGxyz;
    e92e:	1c05      	adds	r5, r0, #0
    e930:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:98
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
    e932:	4650      	mov	r0, sl
    e934:	f7f2 fa2e 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:99
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
    e938:	68a3      	ldr	r3, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:98
	{
		fR[i][Z] = fGp[i] * frecipmodGxyz;
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
    e93a:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:99
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
    e93c:	4698      	mov	r8, r3
    e93e:	2380      	movs	r3, #128	; 0x80
    e940:	061b      	lsls	r3, r3, #24
    e942:	4498      	add	r8, r3
    e944:	4649      	mov	r1, r9
    e946:	4640      	mov	r0, r8
    e948:	f7f2 fa24 	bl	d94 <__aeabi_fmul>
    e94c:	1c01      	adds	r1, r0, #0
    e94e:	1c38      	adds	r0, r7, #0
    e950:	f7f2 fa20 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:100
	fR[Z][X] = -fR[X][Z] * fR[Z][Z] * ftmp;
    e954:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:99
		fR[i][Z] = fGp[i] * frecipmodGxyz;
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
    e956:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:100
	fR[Z][X] = -fR[X][Z] * fR[Z][Z] * ftmp;
    e958:	4640      	mov	r0, r8
    e95a:	f7f2 fa1b 	bl	d94 <__aeabi_fmul>
    e95e:	1c01      	adds	r1, r0, #0
    e960:	1c38      	adds	r0, r7, #0
    e962:	f7f2 fa17 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:104

	// // construct y column of orientation matrix
	fR[X][Y] = 0.0F;
	fR[Y][Y] = fR[Z][Z] * ftmp;
    e966:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:100
	}

	// construct x column of orientation matrix
	fR[X][X] = fmodGyz * frecipmodGxyz;
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
	fR[Z][X] = -fR[X][Z] * fR[Z][Z] * ftmp;
    e968:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:103

	// // construct y column of orientation matrix
	fR[X][Y] = 0.0F;
    e96a:	6066      	str	r6, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:104
	fR[Y][Y] = fR[Z][Z] * ftmp;
    e96c:	1c38      	adds	r0, r7, #0
    e96e:	f7f2 fa11 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:105
	fR[Z][Y] = -fR[Y][Z] * ftmp;
    e972:	2380      	movs	r3, #128	; 0x80
    e974:	061b      	lsls	r3, r3, #24
    e976:	1c19      	adds	r1, r3, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:104
	fR[Y][X] = -fR[X][Z] * fR[Y][Z] * ftmp;
	fR[Z][X] = -fR[X][Z] * fR[Z][Z] * ftmp;

	// // construct y column of orientation matrix
	fR[X][Y] = 0.0F;
	fR[Y][Y] = fR[Z][Z] * ftmp;
    e978:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:105
	fR[Z][Y] = -fR[Y][Z] * ftmp;
    e97a:	4449      	add	r1, r9
    e97c:	1c38      	adds	r0, r7, #0
    e97e:	f7f2 fa09 	bl	d94 <__aeabi_fmul>
    e982:	61e0      	str	r0, [r4, #28]
f3DOFTiltAndroid():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:117
{
	// the Android tilt matrix is mathematically identical to the NED tilt matrix
	// the Android self-consistency twist occurs at 90 deg roll
	f3DOFTiltNED(fR, fGp);
	return;
}
    e984:	bc1c      	pop	{r2, r3, r4}
    e986:	4690      	mov	r8, r2
    e988:	4699      	mov	r9, r3
    e98a:	46a2      	mov	sl, r4
    e98c:	bdf0      	pop	{r4, r5, r6, r7, pc}
f3DOFTiltNED():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:63
	fmodGxyz = fmodGyz + fGp[X] * fGp[X];

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
	{
		f3x3matrixAeqI(fR);
    e98e:	1c20      	adds	r0, r4, #0
    e990:	f7ff f8f0 	bl	db74 <f3x3matrixAeqI>
    e994:	e7f6      	b.n	e984 <f3DOFTiltAndroid+0x114>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:79
			fR[X][Z] = 1.0F;
			fR[Z][X] = -1.0F;
		}
		else
		{
			fR[X][Z] = -1.0F;
    e996:	4b02      	ldr	r3, [pc, #8]	; (e9a0 <f3DOFTiltAndroid+0x130>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:80
			fR[Z][X] = 1.0F;
    e998:	61a7      	str	r7, [r4, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:79
			fR[X][Z] = 1.0F;
			fR[Z][X] = -1.0F;
		}
		else
		{
			fR[X][Z] = -1.0F;
    e99a:	60a3      	str	r3, [r4, #8]
    e99c:	e7f2      	b.n	e984 <f3DOFTiltAndroid+0x114>
    e99e:	46c0      	nop			; (mov r8, r8)
    e9a0:	bf800000 	.word	0xbf800000

0000e9a4 <f3DOFTiltWin8>:
f3DOFTiltWin8():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:121
	return;
}

// Windows 8 accelerometer 3DOF tilt function computing rotation matrix fR
void f3DOFTiltWin8(float fR[][3], float fGp[])
{
    e9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e9a6:	465f      	mov	r7, fp
    e9a8:	4656      	mov	r6, sl
    e9aa:	464d      	mov	r5, r9
    e9ac:	4644      	mov	r4, r8
    e9ae:	b4f0      	push	{r4, r5, r6, r7}
    e9b0:	1c0d      	adds	r5, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:132
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable
	int8 i;					// counter

	// compute the accelerometer squared magnitudes
	fmodGxz = fGp[X] * fGp[X] + fGp[Z] * fGp[Z];
    e9b2:	6809      	ldr	r1, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:121
	return;
}

// Windows 8 accelerometer 3DOF tilt function computing rotation matrix fR
void f3DOFTiltWin8(float fR[][3], float fGp[])
{
    e9b4:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:132
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable
	int8 i;					// counter

	// compute the accelerometer squared magnitudes
	fmodGxz = fGp[X] * fGp[X] + fGp[Z] * fGp[Z];
    e9b6:	1c08      	adds	r0, r1, #0
    e9b8:	f7f2 f9ec 	bl	d94 <__aeabi_fmul>
    e9bc:	68ae      	ldr	r6, [r5, #8]
    e9be:	1c07      	adds	r7, r0, #0
    e9c0:	1c31      	adds	r1, r6, #0
    e9c2:	1c30      	adds	r0, r6, #0
    e9c4:	f7f2 f9e6 	bl	d94 <__aeabi_fmul>
    e9c8:	1c01      	adds	r1, r0, #0
    e9ca:	1c38      	adds	r0, r7, #0
    e9cc:	f7f1 fe92 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:133
	fmodGxyz = fmodGxz + fGp[Y] * fGp[Y];
    e9d0:	6869      	ldr	r1, [r5, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:132
	float frecipmodGxyz;	// reciprocal of modulus
	float ftmp;				// scratch variable
	int8 i;					// counter

	// compute the accelerometer squared magnitudes
	fmodGxz = fGp[X] * fGp[X] + fGp[Z] * fGp[Z];
    e9d2:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:133
	fmodGxyz = fmodGxz + fGp[Y] * fGp[Y];
    e9d4:	1c08      	adds	r0, r1, #0
    e9d6:	f7f2 f9dd 	bl	d94 <__aeabi_fmul>
    e9da:	1c31      	adds	r1, r6, #0
    e9dc:	f7f1 fe8a 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:136

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
    e9e0:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:133
	float ftmp;				// scratch variable
	int8 i;					// counter

	// compute the accelerometer squared magnitudes
	fmodGxz = fGp[X] * fGp[X] + fGp[Z] * fGp[Z];
	fmodGxyz = fmodGxz + fGp[Y] * fGp[Y];
    e9e2:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:136

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
    e9e4:	f7f1 fe58 	bl	698 <__aeabi_fcmpeq>
    e9e8:	2800      	cmp	r0, #0
    e9ea:	d000      	beq.n	e9ee <f3DOFTiltWin8+0x4a>
    e9ec:	e07e      	b.n	eaec <f3DOFTiltWin8+0x148>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:143
		f3x3matrixAeqI(fR);
		return;
	}

	// check for vertical up or down gimbal lock case
	if (fmodGxz == 0.0F)
    e9ee:	1c30      	adds	r0, r6, #0
    e9f0:	2100      	movs	r1, #0
    e9f2:	f7f1 fe51 	bl	698 <__aeabi_fcmpeq>
    e9f6:	2800      	cmp	r0, #0
    e9f8:	d167      	bne.n	eaca <f3DOFTiltWin8+0x126>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:161
		}
		return;
	}

	// compute moduli for the general case
	fmodGxz = sqrtf(fmodGxz);
    e9fa:	1c30      	adds	r0, r6, #0
    e9fc:	f004 fd48 	bl	13490 <sqrtf>
    ea00:	4683      	mov	fp, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:162
	fmodGxyz = sqrtf(fmodGxyz);
    ea02:	1c38      	adds	r0, r7, #0
    ea04:	f004 fd44 	bl	13490 <sqrtf>
    ea08:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:163
	frecipmodGxyz = 1.0F / fmodGxyz;
    ea0a:	20fe      	movs	r0, #254	; 0xfe
    ea0c:	1c31      	adds	r1, r6, #0
    ea0e:	0580      	lsls	r0, r0, #22
    ea10:	f7f1 ffdc 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:164
	ftmp = fmodGxyz / fmodGxz;
    ea14:	4659      	mov	r1, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:163
	}

	// compute moduli for the general case
	fmodGxz = sqrtf(fmodGxz);
	fmodGxyz = sqrtf(fmodGxyz);
	frecipmodGxyz = 1.0F / fmodGxyz;
    ea16:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:164
	ftmp = fmodGxyz / fmodGxz;
    ea18:	1c30      	adds	r0, r6, #0
    ea1a:	f7f1 ffd7 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:165
	if (fGp[Z] < 0.0F)
    ea1e:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:164

	// compute moduli for the general case
	fmodGxz = sqrtf(fmodGxz);
	fmodGxyz = sqrtf(fmodGxyz);
	frecipmodGxyz = 1.0F / fmodGxyz;
	ftmp = fmodGxyz / fmodGxz;
    ea20:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:165
	if (fGp[Z] < 0.0F)
    ea22:	68a8      	ldr	r0, [r5, #8]
    ea24:	f7f1 fe3e 	bl	6a4 <__aeabi_fcmplt>
    ea28:	2800      	cmp	r0, #0
    ea2a:	d163      	bne.n	eaf4 <f3DOFTiltWin8+0x150>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:173
	}

	// normalize the negated accelerometer reading into the z column
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i] * frecipmodGxyz;
    ea2c:	682b      	ldr	r3, [r5, #0]
    ea2e:	2280      	movs	r2, #128	; 0x80
    ea30:	0612      	lsls	r2, r2, #24
    ea32:	1898      	adds	r0, r3, r2
    ea34:	1c39      	adds	r1, r7, #0
    ea36:	f7f2 f9ad 	bl	d94 <__aeabi_fmul>
    ea3a:	60a0      	str	r0, [r4, #8]
    ea3c:	686b      	ldr	r3, [r5, #4]
    ea3e:	2280      	movs	r2, #128	; 0x80
    ea40:	0612      	lsls	r2, r2, #24
    ea42:	4682      	mov	sl, r0
    ea44:	1c39      	adds	r1, r7, #0
    ea46:	1898      	adds	r0, r3, r2
    ea48:	f7f2 f9a4 	bl	d94 <__aeabi_fmul>
    ea4c:	6160      	str	r0, [r4, #20]
    ea4e:	68ab      	ldr	r3, [r5, #8]
    ea50:	2280      	movs	r2, #128	; 0x80
    ea52:	0612      	lsls	r2, r2, #24
    ea54:	1c39      	adds	r1, r7, #0
    ea56:	4680      	mov	r8, r0
    ea58:	1898      	adds	r0, r3, r2
    ea5a:	f7f2 f99b 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:177
	}

	// construct x column of orientation matrix
	fR[X][X] = -fR[Z][Z] * ftmp;
    ea5e:	2380      	movs	r3, #128	; 0x80
    ea60:	061b      	lsls	r3, r3, #24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:173
	}

	// normalize the negated accelerometer reading into the z column
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i] * frecipmodGxyz;
    ea62:	4681      	mov	r9, r0
    ea64:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:177
	}

	// construct x column of orientation matrix
	fR[X][X] = -fR[Z][Z] * ftmp;
    ea66:	1c18      	adds	r0, r3, #0
    ea68:	1c31      	adds	r1, r6, #0
    ea6a:	4448      	add	r0, r9
    ea6c:	f7f2 f992 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:178
	fR[Y][X] = 0.0F;
    ea70:	2200      	movs	r2, #0
    ea72:	60e2      	str	r2, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:177
	{
		fR[i][Z] = -fGp[i] * frecipmodGxyz;
	}

	// construct x column of orientation matrix
	fR[X][X] = -fR[Z][Z] * ftmp;
    ea74:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:179
	fR[Y][X] = 0.0F;
	fR[Z][X] = fR[X][Z] * ftmp;;
    ea76:	1c31      	adds	r1, r6, #0
    ea78:	4650      	mov	r0, sl
    ea7a:	f7f2 f98b 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:182

	// // construct y column of orientation matrix
	fR[X][Y] = fR[X][Z] * fR[Y][Z] * ftmp;
    ea7e:	4641      	mov	r1, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:179
	}

	// construct x column of orientation matrix
	fR[X][X] = -fR[Z][Z] * ftmp;
	fR[Y][X] = 0.0F;
	fR[Z][X] = fR[X][Z] * ftmp;;
    ea80:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:182

	// // construct y column of orientation matrix
	fR[X][Y] = fR[X][Z] * fR[Y][Z] * ftmp;
    ea82:	4650      	mov	r0, sl
    ea84:	f7f2 f986 	bl	d94 <__aeabi_fmul>
    ea88:	1c31      	adds	r1, r6, #0
    ea8a:	f7f2 f983 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:183
	fR[Y][Y] = -fmodGxz * frecipmodGxyz;
    ea8e:	2380      	movs	r3, #128	; 0x80
    ea90:	061b      	lsls	r3, r3, #24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:182
	fR[X][X] = -fR[Z][Z] * ftmp;
	fR[Y][X] = 0.0F;
	fR[Z][X] = fR[X][Z] * ftmp;;

	// // construct y column of orientation matrix
	fR[X][Y] = fR[X][Z] * fR[Y][Z] * ftmp;
    ea92:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:183
	fR[Y][Y] = -fmodGxz * frecipmodGxyz;
    ea94:	1c18      	adds	r0, r3, #0
    ea96:	1c39      	adds	r1, r7, #0
    ea98:	4458      	add	r0, fp
    ea9a:	f7f2 f97b 	bl	d94 <__aeabi_fmul>
    ea9e:	6120      	str	r0, [r4, #16]
    eaa0:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:184
	if (fGp[Z] < 0.0F)
    eaa2:	2100      	movs	r1, #0
    eaa4:	68a8      	ldr	r0, [r5, #8]
    eaa6:	f7f1 fdfd 	bl	6a4 <__aeabi_fcmplt>
    eaaa:	2800      	cmp	r0, #0
    eaac:	d12a      	bne.n	eb04 <f3DOFTiltWin8+0x160>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:188
	{
		fR[Y][Y] = -fR[Y][Y];
	}	
	fR[Z][Y] = fR[Y][Z] * fR[Z][Z] * ftmp;
    eaae:	4641      	mov	r1, r8
    eab0:	4648      	mov	r0, r9
    eab2:	f7f2 f96f 	bl	d94 <__aeabi_fmul>
    eab6:	1c31      	adds	r1, r6, #0
    eab8:	f7f2 f96c 	bl	d94 <__aeabi_fmul>
    eabc:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:191

	return;
}
    eabe:	bc3c      	pop	{r2, r3, r4, r5}
    eac0:	4690      	mov	r8, r2
    eac2:	4699      	mov	r9, r3
    eac4:	46a2      	mov	sl, r4
    eac6:	46ab      	mov	fp, r5
    eac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:146

	// check for vertical up or down gimbal lock case
	if (fmodGxz == 0.0F)
	{
		f3x3matrixAeqScalar(fR, 0.0F);
		fR[X][X] = 1.0F;
    eaca:	26fe      	movs	r6, #254	; 0xfe
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:145
	}

	// check for vertical up or down gimbal lock case
	if (fmodGxz == 0.0F)
	{
		f3x3matrixAeqScalar(fR, 0.0F);
    eacc:	1c20      	adds	r0, r4, #0
    eace:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:146
		fR[X][X] = 1.0F;
    ead0:	05b6      	lsls	r6, r6, #22
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:145
	}

	// check for vertical up or down gimbal lock case
	if (fmodGxz == 0.0F)
	{
		f3x3matrixAeqScalar(fR, 0.0F);
    ead2:	f7ff f85d 	bl	db90 <f3x3matrixAeqScalar>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:146
		fR[X][X] = 1.0F;
    ead6:	6026      	str	r6, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:147
		if (fGp[Y] >= 0.0F)
    ead8:	6868      	ldr	r0, [r5, #4]
    eada:	2100      	movs	r1, #0
    eadc:	f7f1 fe00 	bl	6e0 <__aeabi_fcmpge>
    eae0:	2800      	cmp	r0, #0
    eae2:	d00b      	beq.n	eafc <f3DOFTiltWin8+0x158>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:149
		{
			fR[Y][Z] = -1.0F;
    eae4:	4b0a      	ldr	r3, [pc, #40]	; (eb10 <f3DOFTiltWin8+0x16c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:150
			fR[Z][Y] = 1.0F;
    eae6:	61e6      	str	r6, [r4, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:149
	{
		f3x3matrixAeqScalar(fR, 0.0F);
		fR[X][X] = 1.0F;
		if (fGp[Y] >= 0.0F)
		{
			fR[Y][Z] = -1.0F;
    eae8:	6163      	str	r3, [r4, #20]
    eaea:	e7e8      	b.n	eabe <f3DOFTiltWin8+0x11a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:138
	fmodGxyz = fmodGxz + fGp[Y] * fGp[Y];

	// check for freefall special case where no solution is possible
	if (fmodGxyz == 0.0F)
	{
		f3x3matrixAeqI(fR);
    eaec:	1c20      	adds	r0, r4, #0
    eaee:	f7ff f841 	bl	db74 <f3x3matrixAeqI>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:139
		return;
    eaf2:	e7e4      	b.n	eabe <f3DOFTiltWin8+0x11a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:167
	fmodGxyz = sqrtf(fmodGxyz);
	frecipmodGxyz = 1.0F / fmodGxyz;
	ftmp = fmodGxyz / fmodGxz;
	if (fGp[Z] < 0.0F)
	{
		ftmp = -ftmp;
    eaf4:	2280      	movs	r2, #128	; 0x80
    eaf6:	0612      	lsls	r2, r2, #24
    eaf8:	18b6      	adds	r6, r6, r2
    eafa:	e797      	b.n	ea2c <f3DOFTiltWin8+0x88>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:155
			fR[Z][Y] = 1.0F;
		}
		else
		{
			fR[Y][Z] = 1.0F;
			fR[Z][Y] = -1.0F;
    eafc:	4b04      	ldr	r3, [pc, #16]	; (eb10 <f3DOFTiltWin8+0x16c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:154
			fR[Y][Z] = -1.0F;
			fR[Z][Y] = 1.0F;
		}
		else
		{
			fR[Y][Z] = 1.0F;
    eafe:	6166      	str	r6, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:155
			fR[Z][Y] = -1.0F;
    eb00:	61e3      	str	r3, [r4, #28]
    eb02:	e7dc      	b.n	eabe <f3DOFTiltWin8+0x11a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:186
	// // construct y column of orientation matrix
	fR[X][Y] = fR[X][Z] * fR[Y][Z] * ftmp;
	fR[Y][Y] = -fmodGxz * frecipmodGxyz;
	if (fGp[Z] < 0.0F)
	{
		fR[Y][Y] = -fR[Y][Y];
    eb04:	2280      	movs	r2, #128	; 0x80
    eb06:	0612      	lsls	r2, r2, #24
    eb08:	18bf      	adds	r7, r7, r2
    eb0a:	6127      	str	r7, [r4, #16]
    eb0c:	e7cf      	b.n	eaae <f3DOFTiltWin8+0x10a>
    eb0e:	46c0      	nop			; (mov r8, r8)
    eb10:	bf800000 	.word	0xbf800000

0000eb14 <f3DOFMagnetometerMatrixNED>:
f3DOFMagnetometerMatrixNED():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:195
	return;
}

// Aerospace NED magnetometer 3DOF flat eCompass function computing rotation matrix fR
void f3DOFMagnetometerMatrixNED(float fR[][3], float fBc[])
{	
    eb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eb16:	1c0e      	adds	r6, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:200
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    eb18:	6809      	ldr	r1, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:195
	return;
}

// Aerospace NED magnetometer 3DOF flat eCompass function computing rotation matrix fR
void f3DOFMagnetometerMatrixNED(float fR[][3], float fBc[])
{	
    eb1a:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:200
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    eb1c:	1c08      	adds	r0, r1, #0
    eb1e:	f7f2 f939 	bl	d94 <__aeabi_fmul>
    eb22:	6875      	ldr	r5, [r6, #4]
    eb24:	1c07      	adds	r7, r0, #0
    eb26:	1c29      	adds	r1, r5, #0
    eb28:	1c28      	adds	r0, r5, #0
    eb2a:	f7f2 f933 	bl	d94 <__aeabi_fmul>
    eb2e:	1c01      	adds	r1, r0, #0
    eb30:	1c38      	adds	r0, r7, #0
    eb32:	f7f1 fddf 	bl	6f4 <__aeabi_fadd>
    eb36:	f004 fcab 	bl	13490 <sqrtf>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:203

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
    eb3a:	2500      	movs	r5, #0
    eb3c:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:200
{	
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    eb3e:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:203

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
    eb40:	f7f1 fdaa 	bl	698 <__aeabi_fcmpeq>
    eb44:	2800      	cmp	r0, #0
    eb46:	d116      	bne.n	eb76 <f3DOFMagnetometerMatrixNED+0x62>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:211
		return;
	}

	// define the fixed entries in the z row and column
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
	fR[Z][Z] = 1.0F;
    eb48:	23fe      	movs	r3, #254	; 0xfe
    eb4a:	059b      	lsls	r3, r3, #22
    eb4c:	6223      	str	r3, [r4, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:210
		f3x3matrixAeqI(fR);
		return;
	}

	// define the fixed entries in the z row and column
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
    eb4e:	6165      	str	r5, [r4, #20]
    eb50:	60a5      	str	r5, [r4, #8]
    eb52:	61e5      	str	r5, [r4, #28]
    eb54:	61a5      	str	r5, [r4, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:214
	fR[Z][Z] = 1.0F;
	
	// define the remaining entries
	fR[X][X] = fR[Y][Y] = fBc[X] / fmodBxy;
    eb56:	6830      	ldr	r0, [r6, #0]
    eb58:	1c39      	adds	r1, r7, #0
    eb5a:	f7f1 ff37 	bl	9cc <__aeabi_fdiv>
    eb5e:	6120      	str	r0, [r4, #16]
    eb60:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:215
	fR[Y][X] = fBc[Y] / fmodBxy;
    eb62:	6870      	ldr	r0, [r6, #4]
    eb64:	1c39      	adds	r1, r7, #0
    eb66:	f7f1 ff31 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:216
	fR[X][Y] = -fR[Y][X];
    eb6a:	2380      	movs	r3, #128	; 0x80
    eb6c:	061b      	lsls	r3, r3, #24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:215
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
	fR[Z][Z] = 1.0F;
	
	// define the remaining entries
	fR[X][X] = fR[Y][Y] = fBc[X] / fmodBxy;
	fR[Y][X] = fBc[Y] / fmodBxy;
    eb6e:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:216
	fR[X][Y] = -fR[Y][X];
    eb70:	18c0      	adds	r0, r0, r3
    eb72:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:219

	return;
}
    eb74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:205
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
	{
		f3x3matrixAeqI(fR);
    eb76:	1c20      	adds	r0, r4, #0
    eb78:	f7fe fffc 	bl	db74 <f3x3matrixAeqI>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:206
		return;
    eb7c:	e7fa      	b.n	eb74 <f3DOFMagnetometerMatrixNED+0x60>
    eb7e:	46c0      	nop			; (mov r8, r8)

0000eb80 <f3DOFMagnetometerMatrixAndroid>:
f3DOFMagnetometerMatrixAndroid():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:223
	return;
}

// Android magnetometer 3DOF flat eCompass function computing rotation matrix fR
void f3DOFMagnetometerMatrixAndroid(float fR[][3], float fBc[])
{	
    eb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eb82:	1c0e      	adds	r6, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:228
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    eb84:	6809      	ldr	r1, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:223
	return;
}

// Android magnetometer 3DOF flat eCompass function computing rotation matrix fR
void f3DOFMagnetometerMatrixAndroid(float fR[][3], float fBc[])
{	
    eb86:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:228
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    eb88:	1c08      	adds	r0, r1, #0
    eb8a:	f7f2 f903 	bl	d94 <__aeabi_fmul>
    eb8e:	6875      	ldr	r5, [r6, #4]
    eb90:	1c07      	adds	r7, r0, #0
    eb92:	1c29      	adds	r1, r5, #0
    eb94:	1c28      	adds	r0, r5, #0
    eb96:	f7f2 f8fd 	bl	d94 <__aeabi_fmul>
    eb9a:	1c01      	adds	r1, r0, #0
    eb9c:	1c38      	adds	r0, r7, #0
    eb9e:	f7f1 fda9 	bl	6f4 <__aeabi_fadd>
    eba2:	f004 fc75 	bl	13490 <sqrtf>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:231

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
    eba6:	2500      	movs	r5, #0
    eba8:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:228
{	
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    ebaa:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:231

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
    ebac:	f7f1 fd74 	bl	698 <__aeabi_fcmpeq>
    ebb0:	2800      	cmp	r0, #0
    ebb2:	d116      	bne.n	ebe2 <f3DOFMagnetometerMatrixAndroid+0x62>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:239
		return;
	}

	// define the fixed entries in the z row and column
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
	fR[Z][Z] = 1.0F;
    ebb4:	23fe      	movs	r3, #254	; 0xfe
    ebb6:	059b      	lsls	r3, r3, #22
    ebb8:	6223      	str	r3, [r4, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:238
		f3x3matrixAeqI(fR);
		return;
	}

	// define the fixed entries in the z row and column
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
    ebba:	6165      	str	r5, [r4, #20]
    ebbc:	60a5      	str	r5, [r4, #8]
    ebbe:	61e5      	str	r5, [r4, #28]
    ebc0:	61a5      	str	r5, [r4, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:242
	fR[Z][Z] = 1.0F;
	
	// define the remaining entries
	fR[X][X] = fR[Y][Y] = fBc[Y] / fmodBxy;
    ebc2:	6870      	ldr	r0, [r6, #4]
    ebc4:	1c39      	adds	r1, r7, #0
    ebc6:	f7f1 ff01 	bl	9cc <__aeabi_fdiv>
    ebca:	6120      	str	r0, [r4, #16]
    ebcc:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:243
	fR[X][Y] = fBc[X] / fmodBxy;
    ebce:	6830      	ldr	r0, [r6, #0]
    ebd0:	1c39      	adds	r1, r7, #0
    ebd2:	f7f1 fefb 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:244
	fR[Y][X] = -fR[X][Y];
    ebd6:	2380      	movs	r3, #128	; 0x80
    ebd8:	061b      	lsls	r3, r3, #24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:243
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
	fR[Z][Z] = 1.0F;
	
	// define the remaining entries
	fR[X][X] = fR[Y][Y] = fBc[Y] / fmodBxy;
	fR[X][Y] = fBc[X] / fmodBxy;
    ebda:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:244
	fR[Y][X] = -fR[X][Y];
    ebdc:	18c0      	adds	r0, r0, r3
    ebde:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:247

	return;
}
    ebe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:233
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
	{
		f3x3matrixAeqI(fR);
    ebe2:	1c20      	adds	r0, r4, #0
    ebe4:	f7fe ffc6 	bl	db74 <f3x3matrixAeqI>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:234
		return;
    ebe8:	e7fa      	b.n	ebe0 <f3DOFMagnetometerMatrixAndroid+0x60>
    ebea:	46c0      	nop			; (mov r8, r8)

0000ebec <f3DOFMagnetometerMatrixWin8>:
f3DOFMagnetometerMatrixWin8():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:251
	return;
}

// Windows 8 magnetometer 3DOF flat eCompass function computing rotation matrix fR
void f3DOFMagnetometerMatrixWin8(float fR[][3], float fBc[])
{	
    ebec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ebee:	1c0e      	adds	r6, r1, #0
f3DOFMagnetometerMatrixAndroid():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:228
{	
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    ebf0:	6809      	ldr	r1, [r1, #0]
f3DOFMagnetometerMatrixWin8():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:251
	return;
}

// Windows 8 magnetometer 3DOF flat eCompass function computing rotation matrix fR
void f3DOFMagnetometerMatrixWin8(float fR[][3], float fBc[])
{	
    ebf2:	1c04      	adds	r4, r0, #0
f3DOFMagnetometerMatrixAndroid():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:228
{	
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    ebf4:	1c08      	adds	r0, r1, #0
    ebf6:	f7f2 f8cd 	bl	d94 <__aeabi_fmul>
    ebfa:	6875      	ldr	r5, [r6, #4]
    ebfc:	1c07      	adds	r7, r0, #0
    ebfe:	1c29      	adds	r1, r5, #0
    ec00:	1c28      	adds	r0, r5, #0
    ec02:	f7f2 f8c7 	bl	d94 <__aeabi_fmul>
    ec06:	1c01      	adds	r1, r0, #0
    ec08:	1c38      	adds	r0, r7, #0
    ec0a:	f7f1 fd73 	bl	6f4 <__aeabi_fadd>
    ec0e:	f004 fc3f 	bl	13490 <sqrtf>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:231

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
    ec12:	2500      	movs	r5, #0
    ec14:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:228
{	
	// local variables
	float fmodBxy;			// modulus of the x, y magnetometer readings

	// compute the magnitude of the horizontal (x and y) magnetometer reading
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);
    ec16:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:231

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
    ec18:	f7f1 fd3e 	bl	698 <__aeabi_fcmpeq>
    ec1c:	2800      	cmp	r0, #0
    ec1e:	d116      	bne.n	ec4e <f3DOFMagnetometerMatrixWin8+0x62>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:239
		return;
	}

	// define the fixed entries in the z row and column
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
	fR[Z][Z] = 1.0F;
    ec20:	23fe      	movs	r3, #254	; 0xfe
    ec22:	059b      	lsls	r3, r3, #22
    ec24:	6223      	str	r3, [r4, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:238
		f3x3matrixAeqI(fR);
		return;
	}

	// define the fixed entries in the z row and column
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
    ec26:	6165      	str	r5, [r4, #20]
    ec28:	60a5      	str	r5, [r4, #8]
    ec2a:	61e5      	str	r5, [r4, #28]
    ec2c:	61a5      	str	r5, [r4, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:242
	fR[Z][Z] = 1.0F;
	
	// define the remaining entries
	fR[X][X] = fR[Y][Y] = fBc[Y] / fmodBxy;
    ec2e:	6870      	ldr	r0, [r6, #4]
    ec30:	1c39      	adds	r1, r7, #0
    ec32:	f7f1 fecb 	bl	9cc <__aeabi_fdiv>
    ec36:	6120      	str	r0, [r4, #16]
    ec38:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:243
	fR[X][Y] = fBc[X] / fmodBxy;
    ec3a:	6830      	ldr	r0, [r6, #0]
    ec3c:	1c39      	adds	r1, r7, #0
    ec3e:	f7f1 fec5 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:244
	fR[Y][X] = -fR[X][Y];
    ec42:	2380      	movs	r3, #128	; 0x80
    ec44:	061b      	lsls	r3, r3, #24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:243
	fR[Z][X] = fR[Z][Y] = fR[X][Z] = fR[Y][Z] = 0.0F;
	fR[Z][Z] = 1.0F;
	
	// define the remaining entries
	fR[X][X] = fR[Y][Y] = fBc[Y] / fmodBxy;
	fR[X][Y] = fBc[X] / fmodBxy;
    ec46:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:244
	fR[Y][X] = -fR[X][Y];
    ec48:	18c0      	adds	r0, r0, r3
    ec4a:	60e0      	str	r0, [r4, #12]
f3DOFMagnetometerMatrixWin8():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:256
{	
	// call the Android function since it is identical to the Windows 8 matrix
	f3DOFMagnetometerMatrixAndroid(fR, fBc);

	return;
}
    ec4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
f3DOFMagnetometerMatrixAndroid():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:233
	fmodBxy = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y]);

	// check for zero field special case where no solution is possible
	if (fmodBxy == 0.0F)
	{
		f3x3matrixAeqI(fR);
    ec4e:	1c20      	adds	r0, r4, #0
    ec50:	f7fe ff90 	bl	db74 <f3x3matrixAeqI>
    ec54:	e7fa      	b.n	ec4c <f3DOFMagnetometerMatrixWin8+0x60>
f3DOFMagnetometerMatrixWin8():
    ec56:	46c0      	nop			; (mov r8, r8)

0000ec58 <feCompassNED>:
feCompassNED():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:260
	return;
}

// NED: 6DOF e-Compass function computing rotation matrix fR
void feCompassNED(float fR[][3], float *pfDelta, float fBc[], float fGp[])
{
    ec58:	b5f0      	push	{r4, r5, r6, r7, lr}
    ec5a:	465f      	mov	r7, fp
    ec5c:	4656      	mov	r6, sl
    ec5e:	464d      	mov	r5, r9
    ec60:	4644      	mov	r4, r8
    ec62:	b4f0      	push	{r4, r5, r6, r7}
    ec64:	b089      	sub	sp, #36	; 0x24
    ec66:	9200      	str	r2, [sp, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:269
	float fGdotBc;					// dot product of vectors G.Bc
	float ftmp;						// scratch variable
	int8 i, j;						// loop counters

	// set the inclination angle to zero in case it is not computed later
	*pfDelta = 0.0F;
    ec68:	2200      	movs	r2, #0
    ec6a:	600a      	str	r2, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:274

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    ec6c:	681d      	ldr	r5, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:260
	return;
}

// NED: 6DOF e-Compass function computing rotation matrix fR
void feCompassNED(float fR[][3], float *pfDelta, float fBc[], float fGp[])
{
    ec6e:	9301      	str	r3, [sp, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:275

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
		fR[i][X] = fBc[i];
    ec70:	9b00      	ldr	r3, [sp, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:274
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    ec72:	6085      	str	r5, [r0, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:275
		fR[i][X] = fBc[i];
    ec74:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:274
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    ec76:	9a01      	ldr	r2, [sp, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:275
		fR[i][X] = fBc[i];
    ec78:	6003      	str	r3, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:274
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    ec7a:	6856      	ldr	r6, [r2, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:275
		fR[i][X] = fBc[i];
    ec7c:	4699      	mov	r9, r3
    ec7e:	9b00      	ldr	r3, [sp, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:274
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    ec80:	6146      	str	r6, [r0, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:275
		fR[i][X] = fBc[i];
    ec82:	685b      	ldr	r3, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:260
	return;
}

// NED: 6DOF e-Compass function computing rotation matrix fR
void feCompassNED(float fR[][3], float *pfDelta, float fBc[], float fGp[])
{
    ec84:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:275

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
		fR[i][X] = fBc[i];
    ec86:	60c3      	str	r3, [r0, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:274
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    ec88:	6897      	ldr	r7, [r2, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:275
		fR[i][X] = fBc[i];
    ec8a:	9a00      	ldr	r2, [sp, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:274
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    ec8c:	6207      	str	r7, [r0, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:275
		fR[i][X] = fBc[i];
    ec8e:	6892      	ldr	r2, [r2, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:260
	return;
}

// NED: 6DOF e-Compass function computing rotation matrix fR
void feCompassNED(float fR[][3], float *pfDelta, float fBc[], float fGp[])
{
    ec90:	9102      	str	r1, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:275

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
		fR[i][X] = fBc[i];
    ec92:	6182      	str	r2, [r0, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:279
	}

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    ec94:	1c11      	adds	r1, r2, #0
    ec96:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:275

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and x axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
		fR[i][X] = fBc[i];
    ec98:	469b      	mov	fp, r3
    ec9a:	4692      	mov	sl, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:279
	}

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    ec9c:	f7f2 f87a 	bl	d94 <__aeabi_fmul>
    eca0:	4659      	mov	r1, fp
    eca2:	4680      	mov	r8, r0
    eca4:	1c38      	adds	r0, r7, #0
    eca6:	f7f2 f875 	bl	d94 <__aeabi_fmul>
    ecaa:	1c01      	adds	r1, r0, #0
    ecac:	4640      	mov	r0, r8
    ecae:	f7f2 f99b 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:280
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    ecb2:	4649      	mov	r1, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:279
		fR[i][Z] = fGp[i];
		fR[i][X] = fBc[i];
	}

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    ecb4:	4680      	mov	r8, r0
    ecb6:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:280
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    ecb8:	1c38      	adds	r0, r7, #0
    ecba:	f7f2 f86b 	bl	d94 <__aeabi_fmul>
    ecbe:	1c29      	adds	r1, r5, #0
    ecc0:	9003      	str	r0, [sp, #12]
    ecc2:	4650      	mov	r0, sl
    ecc4:	f7f2 f866 	bl	d94 <__aeabi_fmul>
    ecc8:	1c01      	adds	r1, r0, #0
    ecca:	9803      	ldr	r0, [sp, #12]
    eccc:	f7f2 f98c 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:281
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    ecd0:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:280
		fR[i][X] = fBc[i];
	}

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    ecd2:	4682      	mov	sl, r0
    ecd4:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:281
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    ecd6:	4658      	mov	r0, fp
    ecd8:	f7f2 f85c 	bl	d94 <__aeabi_fmul>
    ecdc:	4649      	mov	r1, r9
    ecde:	4683      	mov	fp, r0
    ece0:	1c30      	adds	r0, r6, #0
    ece2:	f7f2 f857 	bl	d94 <__aeabi_fmul>
    ece6:	1c01      	adds	r1, r0, #0
    ece8:	4658      	mov	r0, fp
    ecea:	f7f2 f97d 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:284

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
    ecee:	4651      	mov	r1, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:281
	}

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    ecf0:	4683      	mov	fp, r0
    ecf2:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:284

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
    ecf4:	1c38      	adds	r0, r7, #0
    ecf6:	f7f2 f84d 	bl	d94 <__aeabi_fmul>
    ecfa:	4659      	mov	r1, fp
    ecfc:	4681      	mov	r9, r0
    ecfe:	1c30      	adds	r0, r6, #0
    ed00:	f7f2 f848 	bl	d94 <__aeabi_fmul>
    ed04:	1c01      	adds	r1, r0, #0
    ed06:	4648      	mov	r0, r9
    ed08:	f7f2 f96e 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:285
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    ed0c:	4659      	mov	r1, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:284
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
    ed0e:	4681      	mov	r9, r0
    ed10:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:285
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    ed12:	1c28      	adds	r0, r5, #0
    ed14:	f7f2 f83e 	bl	d94 <__aeabi_fmul>
    ed18:	4641      	mov	r1, r8
    ed1a:	4683      	mov	fp, r0
    ed1c:	1c38      	adds	r0, r7, #0
    ed1e:	f7f2 f839 	bl	d94 <__aeabi_fmul>
    ed22:	1c01      	adds	r1, r0, #0
    ed24:	4658      	mov	r0, fp
    ed26:	f7f2 f95f 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:286
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    ed2a:	4641      	mov	r1, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:285
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    ed2c:	1c07      	adds	r7, r0, #0
    ed2e:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:286
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    ed30:	1c30      	adds	r0, r6, #0
    ed32:	f7f2 f82f 	bl	d94 <__aeabi_fmul>
    ed36:	4651      	mov	r1, sl
    ed38:	1c06      	adds	r6, r0, #0
    ed3a:	1c28      	adds	r0, r5, #0
    ed3c:	f7f2 f82a 	bl	d94 <__aeabi_fmul>
    ed40:	1c01      	adds	r1, r0, #0
    ed42:	1c30      	adds	r0, r6, #0
    ed44:	f7f2 f950 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:289

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
    ed48:	4649      	mov	r1, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:286
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    ed4a:	1c05      	adds	r5, r0, #0
    ed4c:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:289

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
    ed4e:	4648      	mov	r0, r9
    ed50:	f7f2 f820 	bl	d94 <__aeabi_fmul>
    ed54:	1c39      	adds	r1, r7, #0
    ed56:	1c06      	adds	r6, r0, #0
    ed58:	1c38      	adds	r0, r7, #0
    ed5a:	f7f2 f81b 	bl	d94 <__aeabi_fmul>
    ed5e:	1c01      	adds	r1, r0, #0
    ed60:	1c30      	adds	r0, r6, #0
    ed62:	f7f1 fcc7 	bl	6f4 <__aeabi_fadd>
    ed66:	1c29      	adds	r1, r5, #0
    ed68:	1c06      	adds	r6, r0, #0
    ed6a:	1c28      	adds	r0, r5, #0
    ed6c:	f7f2 f812 	bl	d94 <__aeabi_fmul>
    ed70:	1c01      	adds	r1, r0, #0
    ed72:	1c30      	adds	r0, r6, #0
    ed74:	f7f1 fcbe 	bl	6f4 <__aeabi_fadd>
    ed78:	f004 fb8a 	bl	13490 <sqrtf>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:290
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
    ed7c:	6861      	ldr	r1, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:289
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
    ed7e:	1c05      	adds	r5, r0, #0
    ed80:	9005      	str	r0, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:290
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
    ed82:	1c08      	adds	r0, r1, #0
    ed84:	f7f2 f806 	bl	d94 <__aeabi_fmul>
    ed88:	6927      	ldr	r7, [r4, #16]
    ed8a:	4680      	mov	r8, r0
    ed8c:	1c39      	adds	r1, r7, #0
    ed8e:	1c38      	adds	r0, r7, #0
    ed90:	f7f2 f800 	bl	d94 <__aeabi_fmul>
    ed94:	1c01      	adds	r1, r0, #0
    ed96:	4640      	mov	r0, r8
    ed98:	f7f1 fcac 	bl	6f4 <__aeabi_fadd>
    ed9c:	69e6      	ldr	r6, [r4, #28]
    ed9e:	1c07      	adds	r7, r0, #0
    eda0:	1c31      	adds	r1, r6, #0
    eda2:	1c30      	adds	r0, r6, #0
    eda4:	f7f1 fff6 	bl	d94 <__aeabi_fmul>
    eda8:	1c01      	adds	r1, r0, #0
    edaa:	1c38      	adds	r0, r7, #0
    edac:	f7f1 fca2 	bl	6f4 <__aeabi_fadd>
    edb0:	f004 fb6e 	bl	13490 <sqrtf>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:291
	fmod[Z] = sqrtf(fR[X][Z] * fR[X][Z] + fR[Y][Z] * fR[Y][Z] + fR[Z][Z] * fR[Z][Z]);
    edb4:	68a1      	ldr	r1, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:290
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
    edb6:	9006      	str	r0, [sp, #24]
    edb8:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:291
	fmod[Z] = sqrtf(fR[X][Z] * fR[X][Z] + fR[Y][Z] * fR[Y][Z] + fR[Z][Z] * fR[Z][Z]);
    edba:	1c08      	adds	r0, r1, #0
    edbc:	f7f1 ffea 	bl	d94 <__aeabi_fmul>
    edc0:	6967      	ldr	r7, [r4, #20]
    edc2:	4681      	mov	r9, r0
    edc4:	1c39      	adds	r1, r7, #0
    edc6:	1c38      	adds	r0, r7, #0
    edc8:	f7f1 ffe4 	bl	d94 <__aeabi_fmul>
    edcc:	1c01      	adds	r1, r0, #0
    edce:	4648      	mov	r0, r9
    edd0:	f7f1 fc90 	bl	6f4 <__aeabi_fadd>
    edd4:	6a26      	ldr	r6, [r4, #32]
    edd6:	1c07      	adds	r7, r0, #0
    edd8:	1c31      	adds	r1, r6, #0
    edda:	1c30      	adds	r0, r6, #0
    eddc:	f7f1 ffda 	bl	d94 <__aeabi_fmul>
    ede0:	1c01      	adds	r1, r0, #0
    ede2:	1c38      	adds	r0, r7, #0
    ede4:	f7f1 fc86 	bl	6f4 <__aeabi_fadd>
    ede8:	f004 fb52 	bl	13490 <sqrtf>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:294

	// normalize the rotation matrix columns
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
    edec:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:291
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
	fmod[Z] = sqrtf(fR[X][Z] * fR[X][Z] + fR[Y][Z] * fR[Y][Z] + fR[Z][Z] * fR[Z][Z]);
    edee:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:294

	// normalize the rotation matrix columns
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
    edf0:	1c28      	adds	r0, r5, #0
    edf2:	f7f1 fc51 	bl	698 <__aeabi_fcmpeq>
    edf6:	2800      	cmp	r0, #0
    edf8:	d000      	beq.n	edfc <feCompassNED+0x1a4>
    edfa:	e09f      	b.n	ef3c <feCompassNED+0x2e4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:294 (discriminator 1)
    edfc:	4640      	mov	r0, r8
    edfe:	2100      	movs	r1, #0
    ee00:	f7f1 fc4a 	bl	698 <__aeabi_fcmpeq>
    ee04:	2800      	cmp	r0, #0
    ee06:	d000      	beq.n	ee0a <feCompassNED+0x1b2>
    ee08:	e098      	b.n	ef3c <feCompassNED+0x2e4>
    ee0a:	1c30      	adds	r0, r6, #0
    ee0c:	2100      	movs	r1, #0
    ee0e:	f7f1 fc43 	bl	698 <__aeabi_fcmpeq>
    ee12:	2800      	cmp	r0, #0
    ee14:	d000      	beq.n	ee18 <feCompassNED+0x1c0>
    ee16:	e091      	b.n	ef3c <feCompassNED+0x2e4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:299
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    ee18:	20fe      	movs	r0, #254	; 0xfe
    ee1a:	9905      	ldr	r1, [sp, #20]
    ee1c:	0580      	lsls	r0, r0, #22
    ee1e:	f7f1 fdd5 	bl	9cc <__aeabi_fdiv>
    ee22:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:304
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    ee24:	1c29      	adds	r1, r5, #0
    ee26:	6820      	ldr	r0, [r4, #0]
    ee28:	f7f1 ffb4 	bl	d94 <__aeabi_fmul>
    ee2c:	1c29      	adds	r1, r5, #0
    ee2e:	6020      	str	r0, [r4, #0]
    ee30:	68e0      	ldr	r0, [r4, #12]
    ee32:	f7f1 ffaf 	bl	d94 <__aeabi_fmul>
    ee36:	1c29      	adds	r1, r5, #0
    ee38:	60e0      	str	r0, [r4, #12]
    ee3a:	69a0      	ldr	r0, [r4, #24]
    ee3c:	f7f1 ffaa 	bl	d94 <__aeabi_fmul>
    ee40:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:299
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    ee42:	20fe      	movs	r0, #254	; 0xfe
    ee44:	9906      	ldr	r1, [sp, #24]
    ee46:	0580      	lsls	r0, r0, #22
    ee48:	f7f1 fdc0 	bl	9cc <__aeabi_fdiv>
    ee4c:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:304
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    ee4e:	1c29      	adds	r1, r5, #0
    ee50:	6860      	ldr	r0, [r4, #4]
    ee52:	f7f1 ff9f 	bl	d94 <__aeabi_fmul>
    ee56:	1c29      	adds	r1, r5, #0
    ee58:	6060      	str	r0, [r4, #4]
    ee5a:	6920      	ldr	r0, [r4, #16]
    ee5c:	f7f1 ff9a 	bl	d94 <__aeabi_fmul>
    ee60:	1c29      	adds	r1, r5, #0
    ee62:	6120      	str	r0, [r4, #16]
    ee64:	69e0      	ldr	r0, [r4, #28]
    ee66:	f7f1 ff95 	bl	d94 <__aeabi_fmul>
    ee6a:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:299
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    ee6c:	20fe      	movs	r0, #254	; 0xfe
    ee6e:	1c31      	adds	r1, r6, #0
    ee70:	0580      	lsls	r0, r0, #22
    ee72:	f7f1 fdab 	bl	9cc <__aeabi_fdiv>
    ee76:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:304
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    ee78:	1c29      	adds	r1, r5, #0
    ee7a:	68a0      	ldr	r0, [r4, #8]
    ee7c:	f7f1 ff8a 	bl	d94 <__aeabi_fmul>
    ee80:	1c29      	adds	r1, r5, #0
    ee82:	60a0      	str	r0, [r4, #8]
    ee84:	6960      	ldr	r0, [r4, #20]
    ee86:	f7f1 ff85 	bl	d94 <__aeabi_fmul>
    ee8a:	1c29      	adds	r1, r5, #0
    ee8c:	6160      	str	r0, [r4, #20]
    ee8e:	6a20      	ldr	r0, [r4, #32]
    ee90:	f7f1 ff80 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:316
		f3x3matrixAeqI(fR);
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
    ee94:	9b00      	ldr	r3, [sp, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:304
			ftmp = 1.0F / fmod[j];
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    ee96:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:316
		f3x3matrixAeqI(fR);
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
    ee98:	6819      	ldr	r1, [r3, #0]
    ee9a:	685d      	ldr	r5, [r3, #4]
    ee9c:	1c08      	adds	r0, r1, #0
    ee9e:	689c      	ldr	r4, [r3, #8]
    eea0:	f7f1 ff78 	bl	d94 <__aeabi_fmul>
    eea4:	1c29      	adds	r1, r5, #0
    eea6:	1c07      	adds	r7, r0, #0
    eea8:	1c28      	adds	r0, r5, #0
    eeaa:	f7f1 ff73 	bl	d94 <__aeabi_fmul>
    eeae:	1c01      	adds	r1, r0, #0
    eeb0:	1c38      	adds	r0, r7, #0
    eeb2:	f7f1 fc1f 	bl	6f4 <__aeabi_fadd>
    eeb6:	1c21      	adds	r1, r4, #0
    eeb8:	1c05      	adds	r5, r0, #0
    eeba:	1c20      	adds	r0, r4, #0
    eebc:	f7f1 ff6a 	bl	d94 <__aeabi_fmul>
    eec0:	1c01      	adds	r1, r0, #0
    eec2:	1c28      	adds	r0, r5, #0
    eec4:	f7f1 fc16 	bl	6f4 <__aeabi_fadd>
    eec8:	f004 fae2 	bl	13490 <sqrtf>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:317
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    eecc:	9b00      	ldr	r3, [sp, #0]
    eece:	9a01      	ldr	r2, [sp, #4]
    eed0:	681f      	ldr	r7, [r3, #0]
    eed2:	6812      	ldr	r2, [r2, #0]
    eed4:	685b      	ldr	r3, [r3, #4]
    eed6:	4690      	mov	r8, r2
    eed8:	4699      	mov	r9, r3
    eeda:	9a01      	ldr	r2, [sp, #4]
    eedc:	9b00      	ldr	r3, [sp, #0]
    eede:	6855      	ldr	r5, [r2, #4]
    eee0:	689b      	ldr	r3, [r3, #8]
    eee2:	6892      	ldr	r2, [r2, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:318
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
    eee4:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:316
		f3x3matrixAeqI(fR);
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
    eee6:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:317
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    eee8:	4692      	mov	sl, r2
    eeea:	469b      	mov	fp, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:318
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
    eeec:	f7f1 fbd4 	bl	698 <__aeabi_fcmpeq>
    eef0:	2800      	cmp	r0, #0
    eef2:	d126      	bne.n	ef42 <feCompassNED+0x2ea>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:317
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    eef4:	1c39      	adds	r1, r7, #0
    eef6:	4640      	mov	r0, r8
    eef8:	f7f1 ff4c 	bl	d94 <__aeabi_fmul>
    eefc:	4649      	mov	r1, r9
    eefe:	1c07      	adds	r7, r0, #0
    ef00:	1c28      	adds	r0, r5, #0
    ef02:	f7f1 ff47 	bl	d94 <__aeabi_fmul>
    ef06:	1c01      	adds	r1, r0, #0
    ef08:	1c38      	adds	r0, r7, #0
    ef0a:	f7f1 fbf3 	bl	6f4 <__aeabi_fadd>
    ef0e:	4659      	mov	r1, fp
    ef10:	1c05      	adds	r5, r0, #0
    ef12:	4650      	mov	r0, sl
    ef14:	f7f1 ff3e 	bl	d94 <__aeabi_fmul>
    ef18:	1c01      	adds	r1, r0, #0
    ef1a:	1c28      	adds	r0, r5, #0
    ef1c:	f7f1 fbea 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:320
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
	{
		*pfDelta = fasin_deg(fGdotBc / (fmod[Z] * fmodBc));
    ef20:	1c21      	adds	r1, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:317
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    ef22:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:320
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
	{
		*pfDelta = fasin_deg(fGdotBc / (fmod[Z] * fmodBc));
    ef24:	1c30      	adds	r0, r6, #0
    ef26:	f7f1 ff35 	bl	d94 <__aeabi_fmul>
    ef2a:	1c01      	adds	r1, r0, #0
    ef2c:	1c28      	adds	r0, r5, #0
    ef2e:	f7f1 fd4d 	bl	9cc <__aeabi_fdiv>
    ef32:	f7f3 ff09 	bl	2d48 <fasin_deg>
    ef36:	9a02      	ldr	r2, [sp, #8]
    ef38:	6010      	str	r0, [r2, #0]
    ef3a:	e002      	b.n	ef42 <feCompassNED+0x2ea>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:311
		}
	}
	else
	{
		// no solution is possible to set rotation to identity matrix
		f3x3matrixAeqI(fR);
    ef3c:	1c20      	adds	r0, r4, #0
    ef3e:	f7fe fe19 	bl	db74 <f3x3matrixAeqI>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:324
	{
		*pfDelta = fasin_deg(fGdotBc / (fmod[Z] * fmodBc));
	}

	return;
}
    ef42:	b009      	add	sp, #36	; 0x24
    ef44:	bc3c      	pop	{r2, r3, r4, r5}
    ef46:	4690      	mov	r8, r2
    ef48:	4699      	mov	r9, r3
    ef4a:	46a2      	mov	sl, r4
    ef4c:	46ab      	mov	fp, r5
    ef4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ef50 <feCompassAndroid>:
feCompassAndroid():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:328

// Android: 6DOF e-Compass function computing rotation matrix fR
void feCompassAndroid(float fR[][3],  float *pfDelta, float fBc[], float fGp[])
{
    ef50:	b5f0      	push	{r4, r5, r6, r7, lr}
    ef52:	465f      	mov	r7, fp
    ef54:	4656      	mov	r6, sl
    ef56:	464d      	mov	r5, r9
    ef58:	4644      	mov	r4, r8
    ef5a:	b4f0      	push	{r4, r5, r6, r7}
    ef5c:	b089      	sub	sp, #36	; 0x24
    ef5e:	9201      	str	r2, [sp, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:337
	float fGdotBc;					// dot product of vectors G.Bc
	float ftmp;						// scratch variable
	int8 i, j;						// loop counters

	// set the inclination angle to zero in case it is not computed later
	*pfDelta = 0.0F;
    ef60:	2200      	movs	r2, #0
    ef62:	600a      	str	r2, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:328
	return;
}

// Android: 6DOF e-Compass function computing rotation matrix fR
void feCompassAndroid(float fR[][3],  float *pfDelta, float fBc[], float fGp[])
{
    ef64:	9302      	str	r3, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:342
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    ef66:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:343
		fR[i][Y] = fBc[i];
    ef68:	9a01      	ldr	r2, [sp, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:342
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    ef6a:	6083      	str	r3, [r0, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:343
		fR[i][Y] = fBc[i];
    ef6c:	6812      	ldr	r2, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:342
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    ef6e:	4699      	mov	r9, r3
    ef70:	9b02      	ldr	r3, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:343
		fR[i][Y] = fBc[i];
    ef72:	6042      	str	r2, [r0, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:342
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    ef74:	685b      	ldr	r3, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:343
		fR[i][Y] = fBc[i];
    ef76:	4693      	mov	fp, r2
    ef78:	9a01      	ldr	r2, [sp, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:342
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    ef7a:	6143      	str	r3, [r0, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:343
		fR[i][Y] = fBc[i];
    ef7c:	6855      	ldr	r5, [r2, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:342
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    ef7e:	4698      	mov	r8, r3
    ef80:	9b02      	ldr	r3, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:343
		fR[i][Y] = fBc[i];
    ef82:	6105      	str	r5, [r0, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:342
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    ef84:	689b      	ldr	r3, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:328
	return;
}

// Android: 6DOF e-Compass function computing rotation matrix fR
void feCompassAndroid(float fR[][3],  float *pfDelta, float fBc[], float fGp[])
{
    ef86:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:342
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    ef88:	6203      	str	r3, [r0, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:343
		fR[i][Y] = fBc[i];
    ef8a:	6896      	ldr	r6, [r2, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:328
	return;
}

// Android: 6DOF e-Compass function computing rotation matrix fR
void feCompassAndroid(float fR[][3],  float *pfDelta, float fBc[], float fGp[])
{
    ef8c:	9103      	str	r1, [sp, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:343

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
		fR[i][Y] = fBc[i];
    ef8e:	61c6      	str	r6, [r0, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:347
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
    ef90:	1c19      	adds	r1, r3, #0
    ef92:	1c28      	adds	r0, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:342
	*pfDelta = 0.0F;

	// place the un-normalized gravity and geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = fGp[i];
    ef94:	469a      	mov	sl, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:347
		fR[i][Y] = fBc[i];
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
    ef96:	f7f1 fefd 	bl	d94 <__aeabi_fmul>
    ef9a:	4641      	mov	r1, r8
    ef9c:	1c07      	adds	r7, r0, #0
    ef9e:	1c30      	adds	r0, r6, #0
    efa0:	f7f1 fef8 	bl	d94 <__aeabi_fmul>
    efa4:	1c01      	adds	r1, r0, #0
    efa6:	1c38      	adds	r0, r7, #0
    efa8:	f7f2 f81e 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:348
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    efac:	4649      	mov	r1, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:347
		fR[i][Z] = fGp[i];
		fR[i][Y] = fBc[i];
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
    efae:	1c07      	adds	r7, r0, #0
    efb0:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:348
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    efb2:	1c30      	adds	r0, r6, #0
    efb4:	f7f1 feee 	bl	d94 <__aeabi_fmul>
    efb8:	4659      	mov	r1, fp
    efba:	1c06      	adds	r6, r0, #0
    efbc:	4650      	mov	r0, sl
    efbe:	f7f1 fee9 	bl	d94 <__aeabi_fmul>
    efc2:	1c01      	adds	r1, r0, #0
    efc4:	1c30      	adds	r0, r6, #0
    efc6:	f7f2 f80f 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:349
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    efca:	4659      	mov	r1, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:348
		fR[i][Y] = fBc[i];
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    efcc:	1c06      	adds	r6, r0, #0
    efce:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:349
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    efd0:	4640      	mov	r0, r8
    efd2:	f7f1 fedf 	bl	d94 <__aeabi_fmul>
    efd6:	4649      	mov	r1, r9
    efd8:	4683      	mov	fp, r0
    efda:	1c28      	adds	r0, r5, #0
    efdc:	f7f1 feda 	bl	d94 <__aeabi_fmul>
    efe0:	1c01      	adds	r1, r0, #0
    efe2:	4658      	mov	r0, fp
    efe4:	f7f2 f800 	bl	fe8 <__aeabi_fsub>
    efe8:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:352

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    efea:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:349
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    efec:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:352

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    efee:	4640      	mov	r0, r8
    eff0:	f7f1 fed0 	bl	d94 <__aeabi_fmul>
    eff4:	1c31      	adds	r1, r6, #0
    eff6:	4683      	mov	fp, r0
    eff8:	4650      	mov	r0, sl
    effa:	f7f1 fecb 	bl	d94 <__aeabi_fmul>
    effe:	1c01      	adds	r1, r0, #0
    f000:	4658      	mov	r0, fp
    f002:	f7f1 fff1 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:353
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    f006:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:352
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    f008:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:353
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    f00a:	4650      	mov	r0, sl
    f00c:	f7f1 fec2 	bl	d94 <__aeabi_fmul>
    f010:	1c29      	adds	r1, r5, #0
    f012:	4682      	mov	sl, r0
    f014:	4648      	mov	r0, r9
    f016:	f7f1 febd 	bl	d94 <__aeabi_fmul>
    f01a:	1c01      	adds	r1, r0, #0
    f01c:	4650      	mov	r0, sl
    f01e:	f7f1 ffe3 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:354
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    f022:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:353
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    f024:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:354
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    f026:	4648      	mov	r0, r9
    f028:	f7f1 feb4 	bl	d94 <__aeabi_fmul>
    f02c:	1c39      	adds	r1, r7, #0
    f02e:	4681      	mov	r9, r0
    f030:	4640      	mov	r0, r8
    f032:	f7f1 feaf 	bl	d94 <__aeabi_fmul>
    f036:	1c01      	adds	r1, r0, #0
    f038:	4648      	mov	r0, r9
    f03a:	f7f1 ffd5 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:357

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
    f03e:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:354
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    f040:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:357

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
    f042:	1c38      	adds	r0, r7, #0
    f044:	f7f1 fea6 	bl	d94 <__aeabi_fmul>
    f048:	1c31      	adds	r1, r6, #0
    f04a:	1c07      	adds	r7, r0, #0
    f04c:	1c30      	adds	r0, r6, #0
    f04e:	f7f1 fea1 	bl	d94 <__aeabi_fmul>
    f052:	1c01      	adds	r1, r0, #0
    f054:	1c38      	adds	r0, r7, #0
    f056:	f7f1 fb4d 	bl	6f4 <__aeabi_fadd>
    f05a:	1c29      	adds	r1, r5, #0
    f05c:	1c06      	adds	r6, r0, #0
    f05e:	1c28      	adds	r0, r5, #0
    f060:	f7f1 fe98 	bl	d94 <__aeabi_fmul>
    f064:	1c01      	adds	r1, r0, #0
    f066:	1c30      	adds	r0, r6, #0
    f068:	f7f1 fb44 	bl	6f4 <__aeabi_fadd>
    f06c:	f004 fa10 	bl	13490 <sqrtf>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:358
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
    f070:	6861      	ldr	r1, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:357
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
    f072:	1c05      	adds	r5, r0, #0
    f074:	9005      	str	r0, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:358
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
    f076:	1c08      	adds	r0, r1, #0
    f078:	f7f1 fe8c 	bl	d94 <__aeabi_fmul>
    f07c:	6927      	ldr	r7, [r4, #16]
    f07e:	4680      	mov	r8, r0
    f080:	1c39      	adds	r1, r7, #0
    f082:	1c38      	adds	r0, r7, #0
    f084:	f7f1 fe86 	bl	d94 <__aeabi_fmul>
    f088:	1c01      	adds	r1, r0, #0
    f08a:	4640      	mov	r0, r8
    f08c:	f7f1 fb32 	bl	6f4 <__aeabi_fadd>
    f090:	69e6      	ldr	r6, [r4, #28]
    f092:	1c07      	adds	r7, r0, #0
    f094:	1c31      	adds	r1, r6, #0
    f096:	1c30      	adds	r0, r6, #0
    f098:	f7f1 fe7c 	bl	d94 <__aeabi_fmul>
    f09c:	1c01      	adds	r1, r0, #0
    f09e:	1c38      	adds	r0, r7, #0
    f0a0:	f7f1 fb28 	bl	6f4 <__aeabi_fadd>
    f0a4:	f004 f9f4 	bl	13490 <sqrtf>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:359
	fmod[Z] = sqrtf(fR[X][Z] * fR[X][Z] + fR[Y][Z] * fR[Y][Z] + fR[Z][Z] * fR[Z][Z]);
    f0a8:	68a1      	ldr	r1, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:358
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
    f0aa:	9006      	str	r0, [sp, #24]
    f0ac:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:359
	fmod[Z] = sqrtf(fR[X][Z] * fR[X][Z] + fR[Y][Z] * fR[Y][Z] + fR[Z][Z] * fR[Z][Z]);
    f0ae:	1c08      	adds	r0, r1, #0
    f0b0:	f7f1 fe70 	bl	d94 <__aeabi_fmul>
    f0b4:	6967      	ldr	r7, [r4, #20]
    f0b6:	4681      	mov	r9, r0
    f0b8:	1c39      	adds	r1, r7, #0
    f0ba:	1c38      	adds	r0, r7, #0
    f0bc:	f7f1 fe6a 	bl	d94 <__aeabi_fmul>
    f0c0:	1c01      	adds	r1, r0, #0
    f0c2:	4648      	mov	r0, r9
    f0c4:	f7f1 fb16 	bl	6f4 <__aeabi_fadd>
    f0c8:	6a26      	ldr	r6, [r4, #32]
    f0ca:	1c07      	adds	r7, r0, #0
    f0cc:	1c31      	adds	r1, r6, #0
    f0ce:	1c30      	adds	r0, r6, #0
    f0d0:	f7f1 fe60 	bl	d94 <__aeabi_fmul>
    f0d4:	1c01      	adds	r1, r0, #0
    f0d6:	1c38      	adds	r0, r7, #0
    f0d8:	f7f1 fb0c 	bl	6f4 <__aeabi_fadd>
    f0dc:	f004 f9d8 	bl	13490 <sqrtf>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:362

	// normalize the rotation matrix columns
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
    f0e0:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:359
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
	fmod[Z] = sqrtf(fR[X][Z] * fR[X][Z] + fR[Y][Z] * fR[Y][Z] + fR[Z][Z] * fR[Z][Z]);
    f0e2:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:362

	// normalize the rotation matrix columns
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
    f0e4:	1c28      	adds	r0, r5, #0
    f0e6:	f7f1 fad7 	bl	698 <__aeabi_fcmpeq>
    f0ea:	2800      	cmp	r0, #0
    f0ec:	d000      	beq.n	f0f0 <feCompassAndroid+0x1a0>
    f0ee:	e0a1      	b.n	f234 <feCompassAndroid+0x2e4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:362 (discriminator 1)
    f0f0:	4640      	mov	r0, r8
    f0f2:	2100      	movs	r1, #0
    f0f4:	f7f1 fad0 	bl	698 <__aeabi_fcmpeq>
    f0f8:	2800      	cmp	r0, #0
    f0fa:	d000      	beq.n	f0fe <feCompassAndroid+0x1ae>
    f0fc:	e09a      	b.n	f234 <feCompassAndroid+0x2e4>
    f0fe:	1c30      	adds	r0, r6, #0
    f100:	2100      	movs	r1, #0
    f102:	f7f1 fac9 	bl	698 <__aeabi_fcmpeq>
    f106:	2800      	cmp	r0, #0
    f108:	d000      	beq.n	f10c <feCompassAndroid+0x1bc>
    f10a:	e093      	b.n	f234 <feCompassAndroid+0x2e4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:367
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    f10c:	20fe      	movs	r0, #254	; 0xfe
    f10e:	9905      	ldr	r1, [sp, #20]
    f110:	0580      	lsls	r0, r0, #22
    f112:	f7f1 fc5b 	bl	9cc <__aeabi_fdiv>
    f116:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:372
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    f118:	1c29      	adds	r1, r5, #0
    f11a:	6820      	ldr	r0, [r4, #0]
    f11c:	f7f1 fe3a 	bl	d94 <__aeabi_fmul>
    f120:	1c29      	adds	r1, r5, #0
    f122:	6020      	str	r0, [r4, #0]
    f124:	68e0      	ldr	r0, [r4, #12]
    f126:	f7f1 fe35 	bl	d94 <__aeabi_fmul>
    f12a:	1c29      	adds	r1, r5, #0
    f12c:	60e0      	str	r0, [r4, #12]
    f12e:	69a0      	ldr	r0, [r4, #24]
    f130:	f7f1 fe30 	bl	d94 <__aeabi_fmul>
    f134:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:367
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    f136:	20fe      	movs	r0, #254	; 0xfe
    f138:	9906      	ldr	r1, [sp, #24]
    f13a:	0580      	lsls	r0, r0, #22
    f13c:	f7f1 fc46 	bl	9cc <__aeabi_fdiv>
    f140:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:372
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    f142:	1c29      	adds	r1, r5, #0
    f144:	6860      	ldr	r0, [r4, #4]
    f146:	f7f1 fe25 	bl	d94 <__aeabi_fmul>
    f14a:	1c29      	adds	r1, r5, #0
    f14c:	6060      	str	r0, [r4, #4]
    f14e:	6920      	ldr	r0, [r4, #16]
    f150:	f7f1 fe20 	bl	d94 <__aeabi_fmul>
    f154:	1c29      	adds	r1, r5, #0
    f156:	6120      	str	r0, [r4, #16]
    f158:	69e0      	ldr	r0, [r4, #28]
    f15a:	f7f1 fe1b 	bl	d94 <__aeabi_fmul>
    f15e:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:367
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    f160:	20fe      	movs	r0, #254	; 0xfe
    f162:	1c31      	adds	r1, r6, #0
    f164:	0580      	lsls	r0, r0, #22
    f166:	f7f1 fc31 	bl	9cc <__aeabi_fdiv>
    f16a:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:372
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    f16c:	1c29      	adds	r1, r5, #0
    f16e:	68a0      	ldr	r0, [r4, #8]
    f170:	f7f1 fe10 	bl	d94 <__aeabi_fmul>
    f174:	1c29      	adds	r1, r5, #0
    f176:	60a0      	str	r0, [r4, #8]
    f178:	6960      	ldr	r0, [r4, #20]
    f17a:	f7f1 fe0b 	bl	d94 <__aeabi_fmul>
    f17e:	1c29      	adds	r1, r5, #0
    f180:	6160      	str	r0, [r4, #20]
    f182:	6a20      	ldr	r0, [r4, #32]
    f184:	f7f1 fe06 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:384
		f3x3matrixAeqI(fR);
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
    f188:	9a01      	ldr	r2, [sp, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:372
			ftmp = 1.0F / fmod[j];
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    f18a:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:384
		f3x3matrixAeqI(fR);
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
    f18c:	6811      	ldr	r1, [r2, #0]
    f18e:	6855      	ldr	r5, [r2, #4]
    f190:	1c08      	adds	r0, r1, #0
    f192:	6894      	ldr	r4, [r2, #8]
    f194:	f7f1 fdfe 	bl	d94 <__aeabi_fmul>
    f198:	1c29      	adds	r1, r5, #0
    f19a:	1c07      	adds	r7, r0, #0
    f19c:	1c28      	adds	r0, r5, #0
    f19e:	f7f1 fdf9 	bl	d94 <__aeabi_fmul>
    f1a2:	1c01      	adds	r1, r0, #0
    f1a4:	1c38      	adds	r0, r7, #0
    f1a6:	f7f1 faa5 	bl	6f4 <__aeabi_fadd>
    f1aa:	1c21      	adds	r1, r4, #0
    f1ac:	1c05      	adds	r5, r0, #0
    f1ae:	1c20      	adds	r0, r4, #0
    f1b0:	f7f1 fdf0 	bl	d94 <__aeabi_fmul>
    f1b4:	1c01      	adds	r1, r0, #0
    f1b6:	1c28      	adds	r0, r5, #0
    f1b8:	f7f1 fa9c 	bl	6f4 <__aeabi_fadd>
    f1bc:	f004 f968 	bl	13490 <sqrtf>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:385
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    f1c0:	9b02      	ldr	r3, [sp, #8]
    f1c2:	9a01      	ldr	r2, [sp, #4]
    f1c4:	681f      	ldr	r7, [r3, #0]
    f1c6:	6815      	ldr	r5, [r2, #0]
    f1c8:	685b      	ldr	r3, [r3, #4]
    f1ca:	6852      	ldr	r2, [r2, #4]
    f1cc:	4698      	mov	r8, r3
    f1ce:	4691      	mov	r9, r2
    f1d0:	9b02      	ldr	r3, [sp, #8]
    f1d2:	9a01      	ldr	r2, [sp, #4]
    f1d4:	689b      	ldr	r3, [r3, #8]
    f1d6:	6892      	ldr	r2, [r2, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:386
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
    f1d8:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:384
		f3x3matrixAeqI(fR);
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
    f1da:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:385
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    f1dc:	469a      	mov	sl, r3
    f1de:	4693      	mov	fp, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:386
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
    f1e0:	f7f1 fa5a 	bl	698 <__aeabi_fcmpeq>
    f1e4:	2800      	cmp	r0, #0
    f1e6:	d128      	bne.n	f23a <feCompassAndroid+0x2ea>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:385
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    f1e8:	1c29      	adds	r1, r5, #0
    f1ea:	1c38      	adds	r0, r7, #0
    f1ec:	f7f1 fdd2 	bl	d94 <__aeabi_fmul>
    f1f0:	4649      	mov	r1, r9
    f1f2:	1c05      	adds	r5, r0, #0
    f1f4:	4640      	mov	r0, r8
    f1f6:	f7f1 fdcd 	bl	d94 <__aeabi_fmul>
    f1fa:	1c01      	adds	r1, r0, #0
    f1fc:	1c28      	adds	r0, r5, #0
    f1fe:	f7f1 fa79 	bl	6f4 <__aeabi_fadd>
    f202:	4659      	mov	r1, fp
    f204:	1c05      	adds	r5, r0, #0
    f206:	4650      	mov	r0, sl
    f208:	f7f1 fdc4 	bl	d94 <__aeabi_fmul>
    f20c:	1c01      	adds	r1, r0, #0
    f20e:	1c28      	adds	r0, r5, #0
    f210:	f7f1 fa70 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:388
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
	{
		*pfDelta = fasin_deg(-fGdotBc / (fmod[Z] * fmodBc));
    f214:	2380      	movs	r3, #128	; 0x80
    f216:	061b      	lsls	r3, r3, #24
    f218:	18c5      	adds	r5, r0, r3
    f21a:	1c21      	adds	r1, r4, #0
    f21c:	1c30      	adds	r0, r6, #0
    f21e:	f7f1 fdb9 	bl	d94 <__aeabi_fmul>
    f222:	1c01      	adds	r1, r0, #0
    f224:	1c28      	adds	r0, r5, #0
    f226:	f7f1 fbd1 	bl	9cc <__aeabi_fdiv>
    f22a:	f7f3 fd8d 	bl	2d48 <fasin_deg>
    f22e:	9a03      	ldr	r2, [sp, #12]
    f230:	6010      	str	r0, [r2, #0]
    f232:	e002      	b.n	f23a <feCompassAndroid+0x2ea>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:379
		}
	}
	else
	{
		// no solution is possible to set rotation to identity matrix
		f3x3matrixAeqI(fR);
    f234:	1c20      	adds	r0, r4, #0
    f236:	f7fe fc9d 	bl	db74 <f3x3matrixAeqI>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:392
	{
		*pfDelta = fasin_deg(-fGdotBc / (fmod[Z] * fmodBc));
	}

	return;
}
    f23a:	b009      	add	sp, #36	; 0x24
    f23c:	bc3c      	pop	{r2, r3, r4, r5}
    f23e:	4690      	mov	r8, r2
    f240:	4699      	mov	r9, r3
    f242:	46a2      	mov	sl, r4
    f244:	46ab      	mov	fp, r5
    f246:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f248 <feCompassWin8>:
feCompassWin8():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:396

// Win8: 6DOF e-Compass function computing rotation matrix fR
void feCompassWin8(float fR[][3],  float *pfDelta, float fBc[], float fGp[])
{
    f248:	b5f0      	push	{r4, r5, r6, r7, lr}
    f24a:	465f      	mov	r7, fp
    f24c:	4656      	mov	r6, sl
    f24e:	464d      	mov	r5, r9
    f250:	4644      	mov	r4, r8
    f252:	b4f0      	push	{r4, r5, r6, r7}
    f254:	b089      	sub	sp, #36	; 0x24
    f256:	9202      	str	r2, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:405
	float fGdotBc;					// dot product of vectors G.Bc
	float ftmp;						// scratch variable
	int8 i, j;						// loop counters

	// set the inclination angle to zero in case it is not computed later
	*pfDelta = 0.0F;
    f258:	2200      	movs	r2, #0
    f25a:	600a      	str	r2, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:396
	return;
}

// Win8: 6DOF e-Compass function computing rotation matrix fR
void feCompassWin8(float fR[][3],  float *pfDelta, float fBc[], float fGp[])
{
    f25c:	469a      	mov	sl, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:410
	*pfDelta = 0.0F;

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
    f25e:	2280      	movs	r2, #128	; 0x80
    f260:	681b      	ldr	r3, [r3, #0]
    f262:	0612      	lsls	r2, r2, #24
    f264:	189a      	adds	r2, r3, r2
    f266:	9201      	str	r2, [sp, #4]
    f268:	9b01      	ldr	r3, [sp, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:411
		fR[i][Y] = fBc[i];
    f26a:	9a02      	ldr	r2, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:410
	*pfDelta = 0.0F;

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
    f26c:	6083      	str	r3, [r0, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:411
		fR[i][Y] = fBc[i];
    f26e:	6812      	ldr	r2, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:396
	return;
}

// Win8: 6DOF e-Compass function computing rotation matrix fR
void feCompassWin8(float fR[][3],  float *pfDelta, float fBc[], float fGp[])
{
    f270:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:411

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
		fR[i][Y] = fBc[i];
    f272:	6042      	str	r2, [r0, #4]
    f274:	4693      	mov	fp, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:410
	*pfDelta = 0.0F;

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
    f276:	4652      	mov	r2, sl
    f278:	6853      	ldr	r3, [r2, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:411
		fR[i][Y] = fBc[i];
    f27a:	9a02      	ldr	r2, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:410
	*pfDelta = 0.0F;

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
    f27c:	4698      	mov	r8, r3
    f27e:	2380      	movs	r3, #128	; 0x80
    f280:	061b      	lsls	r3, r3, #24
    f282:	4498      	add	r8, r3
    f284:	4643      	mov	r3, r8
    f286:	6143      	str	r3, [r0, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:411
		fR[i][Y] = fBc[i];
    f288:	6855      	ldr	r5, [r2, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:410
	*pfDelta = 0.0F;

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
    f28a:	4652      	mov	r2, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:411
		fR[i][Y] = fBc[i];
    f28c:	6105      	str	r5, [r0, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:410
	*pfDelta = 0.0F;

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
    f28e:	6893      	ldr	r3, [r2, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:411
		fR[i][Y] = fBc[i];
    f290:	9a02      	ldr	r2, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:410
	*pfDelta = 0.0F;

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
    f292:	4699      	mov	r9, r3
    f294:	2380      	movs	r3, #128	; 0x80
    f296:	061b      	lsls	r3, r3, #24
    f298:	4499      	add	r9, r3
    f29a:	464b      	mov	r3, r9
    f29c:	6203      	str	r3, [r0, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:411
		fR[i][Y] = fBc[i];
    f29e:	6896      	ldr	r6, [r2, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:396
	return;
}

// Win8: 6DOF e-Compass function computing rotation matrix fR
void feCompassWin8(float fR[][3],  float *pfDelta, float fBc[], float fGp[])
{
    f2a0:	9103      	str	r1, [sp, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:411

	// place the negated un-normalized gravity and un-normalized geomagnetic vectors into the rotation matrix z and y axes
	for (i = X; i <= Z; i++)
	{
		fR[i][Z] = -fGp[i];
		fR[i][Y] = fBc[i];
    f2a2:	61c6      	str	r6, [r0, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:415
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
    f2a4:	4649      	mov	r1, r9
    f2a6:	1c28      	adds	r0, r5, #0
    f2a8:	f7f1 fd74 	bl	d94 <__aeabi_fmul>
    f2ac:	4641      	mov	r1, r8
    f2ae:	1c07      	adds	r7, r0, #0
    f2b0:	1c30      	adds	r0, r6, #0
    f2b2:	f7f1 fd6f 	bl	d94 <__aeabi_fmul>
    f2b6:	1c01      	adds	r1, r0, #0
    f2b8:	1c38      	adds	r0, r7, #0
    f2ba:	f7f1 fe95 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:416
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    f2be:	9901      	ldr	r1, [sp, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:415
		fR[i][Z] = -fGp[i];
		fR[i][Y] = fBc[i];
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
    f2c0:	1c07      	adds	r7, r0, #0
    f2c2:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:416
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    f2c4:	1c30      	adds	r0, r6, #0
    f2c6:	f7f1 fd65 	bl	d94 <__aeabi_fmul>
    f2ca:	4659      	mov	r1, fp
    f2cc:	1c06      	adds	r6, r0, #0
    f2ce:	4648      	mov	r0, r9
    f2d0:	f7f1 fd60 	bl	d94 <__aeabi_fmul>
    f2d4:	1c01      	adds	r1, r0, #0
    f2d6:	1c30      	adds	r0, r6, #0
    f2d8:	f7f1 fe86 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:417
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    f2dc:	4659      	mov	r1, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:416
		fR[i][Y] = fBc[i];
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
    f2de:	1c06      	adds	r6, r0, #0
    f2e0:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:417
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    f2e2:	4640      	mov	r0, r8
    f2e4:	f7f1 fd56 	bl	d94 <__aeabi_fmul>
    f2e8:	9901      	ldr	r1, [sp, #4]
    f2ea:	4683      	mov	fp, r0
    f2ec:	1c28      	adds	r0, r5, #0
    f2ee:	f7f1 fd51 	bl	d94 <__aeabi_fmul>
    f2f2:	1c01      	adds	r1, r0, #0
    f2f4:	4658      	mov	r0, fp
    f2f6:	f7f1 fe77 	bl	fe8 <__aeabi_fsub>
    f2fa:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:420

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    f2fc:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:417
	}

	// set x vector to vector product of y and z vectors
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];
    f2fe:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:420

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    f300:	4640      	mov	r0, r8
    f302:	f7f1 fd47 	bl	d94 <__aeabi_fmul>
    f306:	1c31      	adds	r1, r6, #0
    f308:	4683      	mov	fp, r0
    f30a:	4648      	mov	r0, r9
    f30c:	f7f1 fd42 	bl	d94 <__aeabi_fmul>
    f310:	1c01      	adds	r1, r0, #0
    f312:	4658      	mov	r0, fp
    f314:	f7f1 fe68 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:421
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    f318:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:420
	fR[X][X] = fR[Y][Y] * fR[Z][Z] - fR[Z][Y] * fR[Y][Z];
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
    f31a:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:421
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    f31c:	4648      	mov	r0, r9
    f31e:	f7f1 fd39 	bl	d94 <__aeabi_fmul>
    f322:	1c29      	adds	r1, r5, #0
    f324:	4681      	mov	r9, r0
    f326:	9801      	ldr	r0, [sp, #4]
    f328:	f7f1 fd34 	bl	d94 <__aeabi_fmul>
    f32c:	1c01      	adds	r1, r0, #0
    f32e:	4648      	mov	r0, r9
    f330:	f7f1 fe5a 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:422
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    f334:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:421
	fR[Y][X] = fR[Z][Y] * fR[X][Z] - fR[X][Y] * fR[Z][Z];
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
    f336:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:422
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    f338:	9801      	ldr	r0, [sp, #4]
    f33a:	f7f1 fd2b 	bl	d94 <__aeabi_fmul>
    f33e:	1c39      	adds	r1, r7, #0
    f340:	4681      	mov	r9, r0
    f342:	4640      	mov	r0, r8
    f344:	f7f1 fd26 	bl	d94 <__aeabi_fmul>
    f348:	1c01      	adds	r1, r0, #0
    f34a:	4648      	mov	r0, r9
    f34c:	f7f1 fe4c 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:425

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
    f350:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:422
	fR[Z][X] = fR[X][Y] * fR[Y][Z] - fR[Y][Y] * fR[X][Z];

	// set y vector to vector product of z and x vectors
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];
    f352:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:425

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
    f354:	1c38      	adds	r0, r7, #0
    f356:	f7f1 fd1d 	bl	d94 <__aeabi_fmul>
    f35a:	1c31      	adds	r1, r6, #0
    f35c:	1c07      	adds	r7, r0, #0
    f35e:	1c30      	adds	r0, r6, #0
    f360:	f7f1 fd18 	bl	d94 <__aeabi_fmul>
    f364:	1c01      	adds	r1, r0, #0
    f366:	1c38      	adds	r0, r7, #0
    f368:	f7f1 f9c4 	bl	6f4 <__aeabi_fadd>
    f36c:	1c29      	adds	r1, r5, #0
    f36e:	1c06      	adds	r6, r0, #0
    f370:	1c28      	adds	r0, r5, #0
    f372:	f7f1 fd0f 	bl	d94 <__aeabi_fmul>
    f376:	1c01      	adds	r1, r0, #0
    f378:	1c30      	adds	r0, r6, #0
    f37a:	f7f1 f9bb 	bl	6f4 <__aeabi_fadd>
    f37e:	f004 f887 	bl	13490 <sqrtf>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:426
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
    f382:	6861      	ldr	r1, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:425
	fR[X][Y] = fR[Y][Z] * fR[Z][X] - fR[Z][Z] * fR[Y][X];
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
    f384:	1c05      	adds	r5, r0, #0
    f386:	9005      	str	r0, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:426
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
    f388:	1c08      	adds	r0, r1, #0
    f38a:	f7f1 fd03 	bl	d94 <__aeabi_fmul>
    f38e:	6927      	ldr	r7, [r4, #16]
    f390:	4680      	mov	r8, r0
    f392:	1c39      	adds	r1, r7, #0
    f394:	1c38      	adds	r0, r7, #0
    f396:	f7f1 fcfd 	bl	d94 <__aeabi_fmul>
    f39a:	1c01      	adds	r1, r0, #0
    f39c:	4640      	mov	r0, r8
    f39e:	f7f1 f9a9 	bl	6f4 <__aeabi_fadd>
    f3a2:	69e6      	ldr	r6, [r4, #28]
    f3a4:	1c07      	adds	r7, r0, #0
    f3a6:	1c31      	adds	r1, r6, #0
    f3a8:	1c30      	adds	r0, r6, #0
    f3aa:	f7f1 fcf3 	bl	d94 <__aeabi_fmul>
    f3ae:	1c01      	adds	r1, r0, #0
    f3b0:	1c38      	adds	r0, r7, #0
    f3b2:	f7f1 f99f 	bl	6f4 <__aeabi_fadd>
    f3b6:	f004 f86b 	bl	13490 <sqrtf>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:427
	fmod[Z] = sqrtf(fR[X][Z] * fR[X][Z] + fR[Y][Z] * fR[Y][Z] + fR[Z][Z] * fR[Z][Z]);
    f3ba:	68a1      	ldr	r1, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:426
	fR[Y][Y] = fR[Z][Z] * fR[X][X] - fR[X][Z] * fR[Z][X];
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
    f3bc:	9006      	str	r0, [sp, #24]
    f3be:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:427
	fmod[Z] = sqrtf(fR[X][Z] * fR[X][Z] + fR[Y][Z] * fR[Y][Z] + fR[Z][Z] * fR[Z][Z]);
    f3c0:	1c08      	adds	r0, r1, #0
    f3c2:	f7f1 fce7 	bl	d94 <__aeabi_fmul>
    f3c6:	6967      	ldr	r7, [r4, #20]
    f3c8:	4681      	mov	r9, r0
    f3ca:	1c39      	adds	r1, r7, #0
    f3cc:	1c38      	adds	r0, r7, #0
    f3ce:	f7f1 fce1 	bl	d94 <__aeabi_fmul>
    f3d2:	1c01      	adds	r1, r0, #0
    f3d4:	4648      	mov	r0, r9
    f3d6:	f7f1 f98d 	bl	6f4 <__aeabi_fadd>
    f3da:	6a26      	ldr	r6, [r4, #32]
    f3dc:	1c07      	adds	r7, r0, #0
    f3de:	1c31      	adds	r1, r6, #0
    f3e0:	1c30      	adds	r0, r6, #0
    f3e2:	f7f1 fcd7 	bl	d94 <__aeabi_fmul>
    f3e6:	1c01      	adds	r1, r0, #0
    f3e8:	1c38      	adds	r0, r7, #0
    f3ea:	f7f1 f983 	bl	6f4 <__aeabi_fadd>
    f3ee:	f004 f84f 	bl	13490 <sqrtf>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:430

	// normalize the rotation matrix columns
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
    f3f2:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:427
	fR[Z][Y] = fR[X][Z] * fR[Y][X] - fR[Y][Z] * fR[X][X];

	// calculate the rotation matrix column moduli
	fmod[X] = sqrtf(fR[X][X] * fR[X][X] + fR[Y][X] * fR[Y][X] + fR[Z][X] * fR[Z][X]);
	fmod[Y] = sqrtf(fR[X][Y] * fR[X][Y] + fR[Y][Y] * fR[Y][Y] + fR[Z][Y] * fR[Z][Y]);
	fmod[Z] = sqrtf(fR[X][Z] * fR[X][Z] + fR[Y][Z] * fR[Y][Z] + fR[Z][Z] * fR[Z][Z]);
    f3f4:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:430

	// normalize the rotation matrix columns
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
    f3f6:	1c28      	adds	r0, r5, #0
    f3f8:	f7f1 f94e 	bl	698 <__aeabi_fcmpeq>
    f3fc:	2800      	cmp	r0, #0
    f3fe:	d000      	beq.n	f402 <feCompassWin8+0x1ba>
    f400:	e09f      	b.n	f542 <feCompassWin8+0x2fa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:430 (discriminator 1)
    f402:	4640      	mov	r0, r8
    f404:	2100      	movs	r1, #0
    f406:	f7f1 f947 	bl	698 <__aeabi_fcmpeq>
    f40a:	2800      	cmp	r0, #0
    f40c:	d000      	beq.n	f410 <feCompassWin8+0x1c8>
    f40e:	e098      	b.n	f542 <feCompassWin8+0x2fa>
    f410:	1c30      	adds	r0, r6, #0
    f412:	2100      	movs	r1, #0
    f414:	f7f1 f940 	bl	698 <__aeabi_fcmpeq>
    f418:	2800      	cmp	r0, #0
    f41a:	d000      	beq.n	f41e <feCompassWin8+0x1d6>
    f41c:	e091      	b.n	f542 <feCompassWin8+0x2fa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:435
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    f41e:	20fe      	movs	r0, #254	; 0xfe
    f420:	9905      	ldr	r1, [sp, #20]
    f422:	0580      	lsls	r0, r0, #22
    f424:	f7f1 fad2 	bl	9cc <__aeabi_fdiv>
    f428:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:440
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    f42a:	1c29      	adds	r1, r5, #0
    f42c:	6820      	ldr	r0, [r4, #0]
    f42e:	f7f1 fcb1 	bl	d94 <__aeabi_fmul>
    f432:	1c29      	adds	r1, r5, #0
    f434:	6020      	str	r0, [r4, #0]
    f436:	68e0      	ldr	r0, [r4, #12]
    f438:	f7f1 fcac 	bl	d94 <__aeabi_fmul>
    f43c:	1c29      	adds	r1, r5, #0
    f43e:	60e0      	str	r0, [r4, #12]
    f440:	69a0      	ldr	r0, [r4, #24]
    f442:	f7f1 fca7 	bl	d94 <__aeabi_fmul>
    f446:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:435
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    f448:	20fe      	movs	r0, #254	; 0xfe
    f44a:	9906      	ldr	r1, [sp, #24]
    f44c:	0580      	lsls	r0, r0, #22
    f44e:	f7f1 fabd 	bl	9cc <__aeabi_fdiv>
    f452:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:440
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    f454:	1c29      	adds	r1, r5, #0
    f456:	6860      	ldr	r0, [r4, #4]
    f458:	f7f1 fc9c 	bl	d94 <__aeabi_fmul>
    f45c:	1c29      	adds	r1, r5, #0
    f45e:	6060      	str	r0, [r4, #4]
    f460:	6920      	ldr	r0, [r4, #16]
    f462:	f7f1 fc97 	bl	d94 <__aeabi_fmul>
    f466:	1c29      	adds	r1, r5, #0
    f468:	6120      	str	r0, [r4, #16]
    f46a:	69e0      	ldr	r0, [r4, #28]
    f46c:	f7f1 fc92 	bl	d94 <__aeabi_fmul>
    f470:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:435
	if (!((fmod[X] == 0.0F) || (fmod[Y] == 0.0F) || (fmod[Z] == 0.0F)))
	{
		// loop over columns j
		for (j = X; j <= Z; j++)
		{
			ftmp = 1.0F / fmod[j];
    f472:	20fe      	movs	r0, #254	; 0xfe
    f474:	1c31      	adds	r1, r6, #0
    f476:	0580      	lsls	r0, r0, #22
    f478:	f7f1 faa8 	bl	9cc <__aeabi_fdiv>
    f47c:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:440
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    f47e:	1c29      	adds	r1, r5, #0
    f480:	68a0      	ldr	r0, [r4, #8]
    f482:	f7f1 fc87 	bl	d94 <__aeabi_fmul>
    f486:	1c29      	adds	r1, r5, #0
    f488:	60a0      	str	r0, [r4, #8]
    f48a:	6960      	ldr	r0, [r4, #20]
    f48c:	f7f1 fc82 	bl	d94 <__aeabi_fmul>
    f490:	1c29      	adds	r1, r5, #0
    f492:	6160      	str	r0, [r4, #20]
    f494:	6a20      	ldr	r0, [r4, #32]
    f496:	f7f1 fc7d 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:452
		f3x3matrixAeqI(fR);
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
    f49a:	9b02      	ldr	r3, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:440
			ftmp = 1.0F / fmod[j];
			// loop over rows i
			for (i = X; i <= Z; i++)
			{
				// normalize by the column modulus
				fR[i][j] *= ftmp;
    f49c:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:452
		f3x3matrixAeqI(fR);
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
    f49e:	6819      	ldr	r1, [r3, #0]
    f4a0:	685d      	ldr	r5, [r3, #4]
    f4a2:	1c08      	adds	r0, r1, #0
    f4a4:	689c      	ldr	r4, [r3, #8]
    f4a6:	f7f1 fc75 	bl	d94 <__aeabi_fmul>
    f4aa:	1c29      	adds	r1, r5, #0
    f4ac:	1c07      	adds	r7, r0, #0
    f4ae:	1c28      	adds	r0, r5, #0
    f4b0:	f7f1 fc70 	bl	d94 <__aeabi_fmul>
    f4b4:	1c01      	adds	r1, r0, #0
    f4b6:	1c38      	adds	r0, r7, #0
    f4b8:	f7f1 f91c 	bl	6f4 <__aeabi_fadd>
    f4bc:	1c21      	adds	r1, r4, #0
    f4be:	1c05      	adds	r5, r0, #0
    f4c0:	1c20      	adds	r0, r4, #0
    f4c2:	f7f1 fc67 	bl	d94 <__aeabi_fmul>
    f4c6:	1c01      	adds	r1, r0, #0
    f4c8:	1c28      	adds	r0, r5, #0
    f4ca:	f7f1 f913 	bl	6f4 <__aeabi_fadd>
    f4ce:	f003 ffdf 	bl	13490 <sqrtf>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:453
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    f4d2:	9b02      	ldr	r3, [sp, #8]
    f4d4:	4652      	mov	r2, sl
    f4d6:	681d      	ldr	r5, [r3, #0]
    f4d8:	685b      	ldr	r3, [r3, #4]
    f4da:	6817      	ldr	r7, [r2, #0]
    f4dc:	6852      	ldr	r2, [r2, #4]
    f4de:	4699      	mov	r9, r3
    f4e0:	9b02      	ldr	r3, [sp, #8]
    f4e2:	4690      	mov	r8, r2
    f4e4:	4652      	mov	r2, sl
    f4e6:	6892      	ldr	r2, [r2, #8]
    f4e8:	689b      	ldr	r3, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:454
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
    f4ea:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:452
		f3x3matrixAeqI(fR);
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
    f4ec:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:453
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    f4ee:	4692      	mov	sl, r2
    f4f0:	469b      	mov	fp, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:454
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
    f4f2:	f7f1 f8d1 	bl	698 <__aeabi_fcmpeq>
    f4f6:	2800      	cmp	r0, #0
    f4f8:	d126      	bne.n	f548 <feCompassWin8+0x300>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:453
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    f4fa:	1c29      	adds	r1, r5, #0
    f4fc:	1c38      	adds	r0, r7, #0
    f4fe:	f7f1 fc49 	bl	d94 <__aeabi_fmul>
    f502:	4649      	mov	r1, r9
    f504:	1c05      	adds	r5, r0, #0
    f506:	4640      	mov	r0, r8
    f508:	f7f1 fc44 	bl	d94 <__aeabi_fmul>
    f50c:	1c01      	adds	r1, r0, #0
    f50e:	1c28      	adds	r0, r5, #0
    f510:	f7f1 f8f0 	bl	6f4 <__aeabi_fadd>
    f514:	4659      	mov	r1, fp
    f516:	1c05      	adds	r5, r0, #0
    f518:	4650      	mov	r0, sl
    f51a:	f7f1 fc3b 	bl	d94 <__aeabi_fmul>
    f51e:	1c01      	adds	r1, r0, #0
    f520:	1c28      	adds	r0, r5, #0
    f522:	f7f1 f8e7 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:456
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
	{
		*pfDelta = fasin_deg(fGdotBc / (fmod[Z] * fmodBc));
    f526:	1c21      	adds	r1, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:453
		return;
	}

	// compute the geomagnetic inclination angle
	fmodBc = sqrtf(fBc[X] * fBc[X] + fBc[Y] * fBc[Y] + fBc[Z] * fBc[Z]);
	fGdotBc = fGp[X] * fBc[X] + fGp[Y] * fBc[Y] + fGp[Z] * fBc[Z];
    f528:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:456
	if (!((fmod[Z] == 0.0F) || (fmodBc == 0.0F)))
	{
		*pfDelta = fasin_deg(fGdotBc / (fmod[Z] * fmodBc));
    f52a:	1c30      	adds	r0, r6, #0
    f52c:	f7f1 fc32 	bl	d94 <__aeabi_fmul>
    f530:	1c01      	adds	r1, r0, #0
    f532:	1c28      	adds	r0, r5, #0
    f534:	f7f1 fa4a 	bl	9cc <__aeabi_fdiv>
    f538:	f7f3 fc06 	bl	2d48 <fasin_deg>
    f53c:	9a03      	ldr	r2, [sp, #12]
    f53e:	6010      	str	r0, [r2, #0]
    f540:	e002      	b.n	f548 <feCompassWin8+0x300>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:447
		}
	}
	else
	{
		// no solution is possible to set rotation to identity matrix
		f3x3matrixAeqI(fR);
    f542:	1c20      	adds	r0, r4, #0
    f544:	f7fe fb16 	bl	db74 <f3x3matrixAeqI>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:460
	{
		*pfDelta = fasin_deg(fGdotBc / (fmod[Z] * fmodBc));
	}

	return;
}
    f548:	b009      	add	sp, #36	; 0x24
    f54a:	bc3c      	pop	{r2, r3, r4, r5}
    f54c:	4690      	mov	r8, r2
    f54e:	4699      	mov	r9, r3
    f550:	46a2      	mov	sl, r4
    f552:	46ab      	mov	fp, r5
    f554:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f556:	46c0      	nop			; (mov r8, r8)

0000f558 <fNEDAnglesDegFromRotationMatrix>:
fNEDAnglesDegFromRotationMatrix():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:465

// extract the NED angles in degrees from the NED rotation matrix
void fNEDAnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
    f558:	b5f0      	push	{r4, r5, r6, r7, lr}
    f55a:	4647      	mov	r7, r8
    f55c:	b480      	push	{r7}
    f55e:	1c16      	adds	r6, r2, #0
    f560:	1c1f      	adds	r7, r3, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:467
	// calculate the pitch angle -90.0 <= Theta <= 90.0 deg
	*pfTheDeg = fasin_deg(-R[X][Z]);
    f562:	6882      	ldr	r2, [r0, #8]
    f564:	2380      	movs	r3, #128	; 0x80
    f566:	061b      	lsls	r3, r3, #24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:465
}

// extract the NED angles in degrees from the NED rotation matrix
void fNEDAnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
    f568:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:467
	// calculate the pitch angle -90.0 <= Theta <= 90.0 deg
	*pfTheDeg = fasin_deg(-R[X][Z]);
    f56a:	18d0      	adds	r0, r2, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:465
}

// extract the NED angles in degrees from the NED rotation matrix
void fNEDAnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
    f56c:	4688      	mov	r8, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:467
	// calculate the pitch angle -90.0 <= Theta <= 90.0 deg
	*pfTheDeg = fasin_deg(-R[X][Z]);
    f56e:	f7f3 fbeb 	bl	2d48 <fasin_deg>
    f572:	6030      	str	r0, [r6, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:470

	// calculate the roll angle range -180.0 <= Phi < 180.0 deg
	*pfPhiDeg = fatan2_deg(R[Y][Z], R[Z][Z]);
    f574:	6a21      	ldr	r1, [r4, #32]
    f576:	6960      	ldr	r0, [r4, #20]
    f578:	f7f3 fe5e 	bl	3238 <fatan2_deg>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:473

	// map +180 roll onto the functionally equivalent -180 deg roll
	if (*pfPhiDeg == 180.0F)
    f57c:	492c      	ldr	r1, [pc, #176]	; (f630 <fNEDAnglesDegFromRotationMatrix+0xd8>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:470
{
	// calculate the pitch angle -90.0 <= Theta <= 90.0 deg
	*pfTheDeg = fasin_deg(-R[X][Z]);

	// calculate the roll angle range -180.0 <= Phi < 180.0 deg
	*pfPhiDeg = fatan2_deg(R[Y][Z], R[Z][Z]);
    f57e:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:473

	// map +180 roll onto the functionally equivalent -180 deg roll
	if (*pfPhiDeg == 180.0F)
    f580:	f7f1 f88a 	bl	698 <__aeabi_fcmpeq>
    f584:	2800      	cmp	r0, #0
    f586:	d000      	beq.n	f58a <fNEDAnglesDegFromRotationMatrix+0x32>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:475
	{
		*pfPhiDeg = -180.0F;
    f588:	4d2a      	ldr	r5, [pc, #168]	; (f634 <fNEDAnglesDegFromRotationMatrix+0xdc>)
    f58a:	4642      	mov	r2, r8
    f58c:	6015      	str	r5, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:479
	}

	// calculate the yaw (compass) angle 0.0 <= Psi < 360.0 deg
	if (*pfTheDeg == 90.0F)
    f58e:	6835      	ldr	r5, [r6, #0]
    f590:	4929      	ldr	r1, [pc, #164]	; (f638 <fNEDAnglesDegFromRotationMatrix+0xe0>)
    f592:	1c28      	adds	r0, r5, #0
    f594:	f7f1 f880 	bl	698 <__aeabi_fcmpeq>
    f598:	2800      	cmp	r0, #0
    f59a:	d13d      	bne.n	f618 <fNEDAnglesDegFromRotationMatrix+0xc0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:484
	{
		// vertical upwards gimbal lock case
		*pfPsiDeg = fatan2_deg(R[Z][Y], R[Y][Y]) + *pfPhiDeg;
	}
	else if (*pfTheDeg == -90.0F)
    f59c:	1c28      	adds	r0, r5, #0
    f59e:	4927      	ldr	r1, [pc, #156]	; (f63c <fNEDAnglesDegFromRotationMatrix+0xe4>)
    f5a0:	f7f1 f87a 	bl	698 <__aeabi_fcmpeq>
    f5a4:	2800      	cmp	r0, #0
    f5a6:	d11d      	bne.n	f5e4 <fNEDAnglesDegFromRotationMatrix+0x8c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:492
		*pfPsiDeg = fatan2_deg(-R[Z][Y], R[Y][Y]) - *pfPhiDeg;
	}
	else
	{
		// general case
		*pfPsiDeg = fatan2_deg(R[X][Y], R[X][X]);
    f5a8:	6860      	ldr	r0, [r4, #4]
    f5aa:	6821      	ldr	r1, [r4, #0]
    f5ac:	f7f3 fe44 	bl	3238 <fatan2_deg>
    f5b0:	1c05      	adds	r5, r0, #0
    f5b2:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:496
	}

	// map yaw angle Psi onto range 0.0 <= Psi < 360.0 deg
	if (*pfPsiDeg < 0.0F)
    f5b4:	1c28      	adds	r0, r5, #0
    f5b6:	2100      	movs	r1, #0
    f5b8:	f7f1 f874 	bl	6a4 <__aeabi_fcmplt>
    f5bc:	2800      	cmp	r0, #0
    f5be:	d124      	bne.n	f60a <fNEDAnglesDegFromRotationMatrix+0xb2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:502
	{
		*pfPsiDeg += 360.0F;
	}

	// check for rounding errors mapping small negative angle to 360 deg
	if (*pfPsiDeg >= 360.0F)
    f5c0:	1c28      	adds	r0, r5, #0
    f5c2:	491f      	ldr	r1, [pc, #124]	; (f640 <fNEDAnglesDegFromRotationMatrix+0xe8>)
    f5c4:	f7f1 f88c 	bl	6e0 <__aeabi_fcmpge>
    f5c8:	2800      	cmp	r0, #0
    f5ca:	d001      	beq.n	f5d0 <fNEDAnglesDegFromRotationMatrix+0x78>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:504
	{
		*pfPsiDeg = 0.0F;
    f5cc:	2500      	movs	r5, #0
    f5ce:	603d      	str	r5, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:508
	}

	// for NED, the compass heading Rho equals the yaw angle Psi
	*pfRhoDeg = *pfPsiDeg;
    f5d0:	9b06      	ldr	r3, [sp, #24]
    f5d2:	601d      	str	r5, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:511

	// calculate the tilt angle from vertical Chi (0 <= Chi <= 180 deg) 
	*pfChiDeg = facos_deg(R[Z][Z]);
    f5d4:	6a20      	ldr	r0, [r4, #32]
    f5d6:	f7f3 fc61 	bl	2e9c <facos_deg>
    f5da:	9a07      	ldr	r2, [sp, #28]
    f5dc:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:514

	return;
}
    f5de:	bc04      	pop	{r2}
    f5e0:	4690      	mov	r8, r2
    f5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:487
		*pfPsiDeg = fatan2_deg(R[Z][Y], R[Y][Y]) + *pfPhiDeg;
	}
	else if (*pfTheDeg == -90.0F)
	{
		// vertical downwards gimbal lock case
		*pfPsiDeg = fatan2_deg(-R[Z][Y], R[Y][Y]) - *pfPhiDeg;
    f5e4:	69e2      	ldr	r2, [r4, #28]
    f5e6:	2380      	movs	r3, #128	; 0x80
    f5e8:	061b      	lsls	r3, r3, #24
    f5ea:	18d0      	adds	r0, r2, r3
    f5ec:	6921      	ldr	r1, [r4, #16]
    f5ee:	f7f3 fe23 	bl	3238 <fatan2_deg>
    f5f2:	4642      	mov	r2, r8
    f5f4:	6811      	ldr	r1, [r2, #0]
    f5f6:	f7f1 fcf7 	bl	fe8 <__aeabi_fsub>
    f5fa:	1c05      	adds	r5, r0, #0
    f5fc:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:496
		// general case
		*pfPsiDeg = fatan2_deg(R[X][Y], R[X][X]);
	}

	// map yaw angle Psi onto range 0.0 <= Psi < 360.0 deg
	if (*pfPsiDeg < 0.0F)
    f5fe:	2100      	movs	r1, #0
    f600:	1c28      	adds	r0, r5, #0
    f602:	f7f1 f84f 	bl	6a4 <__aeabi_fcmplt>
    f606:	2800      	cmp	r0, #0
    f608:	d0da      	beq.n	f5c0 <fNEDAnglesDegFromRotationMatrix+0x68>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:498
	{
		*pfPsiDeg += 360.0F;
    f60a:	1c28      	adds	r0, r5, #0
    f60c:	490c      	ldr	r1, [pc, #48]	; (f640 <fNEDAnglesDegFromRotationMatrix+0xe8>)
    f60e:	f7f1 f871 	bl	6f4 <__aeabi_fadd>
    f612:	1c05      	adds	r5, r0, #0
    f614:	6038      	str	r0, [r7, #0]
    f616:	e7d3      	b.n	f5c0 <fNEDAnglesDegFromRotationMatrix+0x68>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:482

	// calculate the yaw (compass) angle 0.0 <= Psi < 360.0 deg
	if (*pfTheDeg == 90.0F)
	{
		// vertical upwards gimbal lock case
		*pfPsiDeg = fatan2_deg(R[Z][Y], R[Y][Y]) + *pfPhiDeg;
    f618:	6921      	ldr	r1, [r4, #16]
    f61a:	69e0      	ldr	r0, [r4, #28]
    f61c:	f7f3 fe0c 	bl	3238 <fatan2_deg>
    f620:	4643      	mov	r3, r8
    f622:	6819      	ldr	r1, [r3, #0]
    f624:	f7f1 f866 	bl	6f4 <__aeabi_fadd>
    f628:	1c05      	adds	r5, r0, #0
    f62a:	6038      	str	r0, [r7, #0]
    f62c:	e7c2      	b.n	f5b4 <fNEDAnglesDegFromRotationMatrix+0x5c>
    f62e:	46c0      	nop			; (mov r8, r8)
    f630:	43340000 	.word	0x43340000
    f634:	c3340000 	.word	0xc3340000
    f638:	42b40000 	.word	0x42b40000
    f63c:	c2b40000 	.word	0xc2b40000
    f640:	43b40000 	.word	0x43b40000

0000f644 <fAndroidAnglesDegFromRotationMatrix>:
fAndroidAnglesDegFromRotationMatrix():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:519
}

// extract the Android angles in degrees from the Android rotation matrix
void fAndroidAnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
    f644:	b5f0      	push	{r4, r5, r6, r7, lr}
    f646:	4647      	mov	r7, r8
    f648:	b480      	push	{r7}
    f64a:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:521
	// calculate the roll angle -90.0 <= Phi <= 90.0 deg
	*pfPhiDeg = fasin_deg(R[X][Z]);
    f64c:	6880      	ldr	r0, [r0, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:519
}

// extract the Android angles in degrees from the Android rotation matrix
void fAndroidAnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
    f64e:	1c0e      	adds	r6, r1, #0
    f650:	4690      	mov	r8, r2
    f652:	1c1f      	adds	r7, r3, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:521
	// calculate the roll angle -90.0 <= Phi <= 90.0 deg
	*pfPhiDeg = fasin_deg(R[X][Z]);
    f654:	f7f3 fb78 	bl	2d48 <fasin_deg>
    f658:	6030      	str	r0, [r6, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:524

	// calculate the pitch angle -180.0 <= The < 180.0 deg
	*pfTheDeg = fatan2_deg(-R[Y][Z], R[Z][Z]);
    f65a:	6962      	ldr	r2, [r4, #20]
    f65c:	2380      	movs	r3, #128	; 0x80
    f65e:	061b      	lsls	r3, r3, #24
    f660:	6a21      	ldr	r1, [r4, #32]
    f662:	18d0      	adds	r0, r2, r3
    f664:	f7f3 fde8 	bl	3238 <fatan2_deg>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:527

	// map +180 pitch onto the functionally equivalent -180 deg pitch
	if (*pfTheDeg == 180.0F)
    f668:	492c      	ldr	r1, [pc, #176]	; (f71c <fAndroidAnglesDegFromRotationMatrix+0xd8>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:524
{
	// calculate the roll angle -90.0 <= Phi <= 90.0 deg
	*pfPhiDeg = fasin_deg(R[X][Z]);

	// calculate the pitch angle -180.0 <= The < 180.0 deg
	*pfTheDeg = fatan2_deg(-R[Y][Z], R[Z][Z]);
    f66a:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:527

	// map +180 pitch onto the functionally equivalent -180 deg pitch
	if (*pfTheDeg == 180.0F)
    f66c:	f7f1 f814 	bl	698 <__aeabi_fcmpeq>
    f670:	2800      	cmp	r0, #0
    f672:	d000      	beq.n	f676 <fAndroidAnglesDegFromRotationMatrix+0x32>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:529
	{
		*pfTheDeg = -180.0F;
    f674:	4d2a      	ldr	r5, [pc, #168]	; (f720 <fAndroidAnglesDegFromRotationMatrix+0xdc>)
    f676:	4642      	mov	r2, r8
    f678:	6015      	str	r5, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:533
	}

	// calculate the yaw (compass) angle 0.0 <= Psi < 360.0 deg
	if (*pfPhiDeg == 90.0F)
    f67a:	6835      	ldr	r5, [r6, #0]
    f67c:	4929      	ldr	r1, [pc, #164]	; (f724 <fAndroidAnglesDegFromRotationMatrix+0xe0>)
    f67e:	1c28      	adds	r0, r5, #0
    f680:	f7f1 f80a 	bl	698 <__aeabi_fcmpeq>
    f684:	2800      	cmp	r0, #0
    f686:	d13d      	bne.n	f704 <fAndroidAnglesDegFromRotationMatrix+0xc0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:538
	{
		// vertical downwards gimbal lock case
		*pfPsiDeg = fatan2_deg(R[Y][X], R[Y][Y]) - *pfTheDeg;
	}
	else if (*pfPhiDeg == -90.0F)
    f688:	1c28      	adds	r0, r5, #0
    f68a:	4927      	ldr	r1, [pc, #156]	; (f728 <fAndroidAnglesDegFromRotationMatrix+0xe4>)
    f68c:	f7f1 f804 	bl	698 <__aeabi_fcmpeq>
    f690:	2800      	cmp	r0, #0
    f692:	d120      	bne.n	f6d6 <fAndroidAnglesDegFromRotationMatrix+0x92>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:546
		*pfPsiDeg = fatan2_deg(R[Y][X], R[Y][Y]) + *pfTheDeg;
	}
	else
	{
		// // general case
		*pfPsiDeg = fatan2_deg(-R[X][Y], R[X][X]);
    f694:	6863      	ldr	r3, [r4, #4]
    f696:	2280      	movs	r2, #128	; 0x80
    f698:	0612      	lsls	r2, r2, #24
    f69a:	1898      	adds	r0, r3, r2
    f69c:	6821      	ldr	r1, [r4, #0]
    f69e:	f7f3 fdcb 	bl	3238 <fatan2_deg>
    f6a2:	1c05      	adds	r5, r0, #0
    f6a4:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:550
	}

	// map yaw angle Psi onto range 0.0 <= Psi < 360.0 deg
	if (*pfPsiDeg < 0.0F)
    f6a6:	1c28      	adds	r0, r5, #0
    f6a8:	2100      	movs	r1, #0
    f6aa:	f7f0 fffb 	bl	6a4 <__aeabi_fcmplt>
    f6ae:	2800      	cmp	r0, #0
    f6b0:	d121      	bne.n	f6f6 <fAndroidAnglesDegFromRotationMatrix+0xb2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:556
	{
		*pfPsiDeg += 360.0F;
	}

	// check for rounding errors mapping small negative angle to 360 deg
	if (*pfPsiDeg >= 360.0F)
    f6b2:	1c28      	adds	r0, r5, #0
    f6b4:	491d      	ldr	r1, [pc, #116]	; (f72c <fAndroidAnglesDegFromRotationMatrix+0xe8>)
    f6b6:	f7f1 f813 	bl	6e0 <__aeabi_fcmpge>
    f6ba:	2800      	cmp	r0, #0
    f6bc:	d001      	beq.n	f6c2 <fAndroidAnglesDegFromRotationMatrix+0x7e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:558
	{
		*pfPsiDeg = 0.0F;
    f6be:	2500      	movs	r5, #0
    f6c0:	603d      	str	r5, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:563
	}

	// the compass heading angle Rho equals the yaw angle Psi
	// this definition is compliant with Motorola Xoom tablet behavior
	*pfRhoDeg = *pfPsiDeg;
    f6c2:	9b06      	ldr	r3, [sp, #24]
    f6c4:	601d      	str	r5, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:566

	// calculate the tilt angle from vertical Chi (0 <= Chi <= 180 deg) 
	*pfChiDeg = facos_deg(R[Z][Z]);
    f6c6:	6a20      	ldr	r0, [r4, #32]
    f6c8:	f7f3 fbe8 	bl	2e9c <facos_deg>
    f6cc:	9a07      	ldr	r2, [sp, #28]
    f6ce:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:569

	return;
}
    f6d0:	bc04      	pop	{r2}
    f6d2:	4690      	mov	r8, r2
    f6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:541
		*pfPsiDeg = fatan2_deg(R[Y][X], R[Y][Y]) - *pfTheDeg;
	}
	else if (*pfPhiDeg == -90.0F)
	{
		// vertical upwards gimbal lock case
		*pfPsiDeg = fatan2_deg(R[Y][X], R[Y][Y]) + *pfTheDeg;
    f6d6:	6921      	ldr	r1, [r4, #16]
    f6d8:	68e0      	ldr	r0, [r4, #12]
    f6da:	f7f3 fdad 	bl	3238 <fatan2_deg>
    f6de:	4642      	mov	r2, r8
    f6e0:	6811      	ldr	r1, [r2, #0]
    f6e2:	f7f1 f807 	bl	6f4 <__aeabi_fadd>
    f6e6:	1c05      	adds	r5, r0, #0
    f6e8:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:550
		// // general case
		*pfPsiDeg = fatan2_deg(-R[X][Y], R[X][X]);
	}

	// map yaw angle Psi onto range 0.0 <= Psi < 360.0 deg
	if (*pfPsiDeg < 0.0F)
    f6ea:	2100      	movs	r1, #0
    f6ec:	1c28      	adds	r0, r5, #0
    f6ee:	f7f0 ffd9 	bl	6a4 <__aeabi_fcmplt>
    f6f2:	2800      	cmp	r0, #0
    f6f4:	d0dd      	beq.n	f6b2 <fAndroidAnglesDegFromRotationMatrix+0x6e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:552
	{
		*pfPsiDeg += 360.0F;
    f6f6:	1c28      	adds	r0, r5, #0
    f6f8:	490c      	ldr	r1, [pc, #48]	; (f72c <fAndroidAnglesDegFromRotationMatrix+0xe8>)
    f6fa:	f7f0 fffb 	bl	6f4 <__aeabi_fadd>
    f6fe:	1c05      	adds	r5, r0, #0
    f700:	6038      	str	r0, [r7, #0]
    f702:	e7d6      	b.n	f6b2 <fAndroidAnglesDegFromRotationMatrix+0x6e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:536

	// calculate the yaw (compass) angle 0.0 <= Psi < 360.0 deg
	if (*pfPhiDeg == 90.0F)
	{
		// vertical downwards gimbal lock case
		*pfPsiDeg = fatan2_deg(R[Y][X], R[Y][Y]) - *pfTheDeg;
    f704:	6921      	ldr	r1, [r4, #16]
    f706:	68e0      	ldr	r0, [r4, #12]
    f708:	f7f3 fd96 	bl	3238 <fatan2_deg>
    f70c:	4643      	mov	r3, r8
    f70e:	6819      	ldr	r1, [r3, #0]
    f710:	f7f1 fc6a 	bl	fe8 <__aeabi_fsub>
    f714:	1c05      	adds	r5, r0, #0
    f716:	6038      	str	r0, [r7, #0]
    f718:	e7c5      	b.n	f6a6 <fAndroidAnglesDegFromRotationMatrix+0x62>
    f71a:	46c0      	nop			; (mov r8, r8)
    f71c:	43340000 	.word	0x43340000
    f720:	c3340000 	.word	0xc3340000
    f724:	42b40000 	.word	0x42b40000
    f728:	c2b40000 	.word	0xc2b40000
    f72c:	43b40000 	.word	0x43b40000

0000f730 <fWin8AnglesDegFromRotationMatrix>:
fWin8AnglesDegFromRotationMatrix():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:574
}

// extract the Windows 8 angles in degrees from the Windows 8 rotation matrix
void fWin8AnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
    f730:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:576
	// calculate the roll angle -90.0 <= Phi <= 90.0 deg
	if (R[Z][Z] == 0.0F)
    f732:	6a05      	ldr	r5, [r0, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:574
}

// extract the Windows 8 angles in degrees from the Windows 8 rotation matrix
void fWin8AnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
    f734:	4647      	mov	r7, r8
    f736:	b480      	push	{r7}
    f738:	1c04      	adds	r4, r0, #0
    f73a:	4688      	mov	r8, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:576
	// calculate the roll angle -90.0 <= Phi <= 90.0 deg
	if (R[Z][Z] == 0.0F)
    f73c:	1c28      	adds	r0, r5, #0
    f73e:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:574
}

// extract the Windows 8 angles in degrees from the Windows 8 rotation matrix
void fWin8AnglesDegFromRotationMatrix(float R[][3], float *pfPhiDeg, float *pfTheDeg, float *pfPsiDeg,
		float *pfRhoDeg, float *pfChiDeg)
{
    f740:	1c16      	adds	r6, r2, #0
    f742:	1c1f      	adds	r7, r3, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:576
	// calculate the roll angle -90.0 <= Phi <= 90.0 deg
	if (R[Z][Z] == 0.0F)
    f744:	f7f0 ffa8 	bl	698 <__aeabi_fcmpeq>
    f748:	2800      	cmp	r0, #0
    f74a:	d100      	bne.n	f74e <fWin8AnglesDegFromRotationMatrix+0x1e>
    f74c:	e08f      	b.n	f86e <fWin8AnglesDegFromRotationMatrix+0x13e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:578
	{
		if (R[X][Z] >= 0.0F)
    f74e:	68a0      	ldr	r0, [r4, #8]
    f750:	2100      	movs	r1, #0
    f752:	f7f0 ffc5 	bl	6e0 <__aeabi_fcmpge>
    f756:	2800      	cmp	r0, #0
    f758:	d100      	bne.n	f75c <fWin8AnglesDegFromRotationMatrix+0x2c>
    f75a:	e09b      	b.n	f894 <fWin8AnglesDegFromRotationMatrix+0x164>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:581
		{
			// tan(phi) is -infinity
			*pfPhiDeg = -90.0F;
    f75c:	4b4f      	ldr	r3, [pc, #316]	; (f89c <fWin8AnglesDegFromRotationMatrix+0x16c>)
    f75e:	4642      	mov	r2, r8
    f760:	6013      	str	r3, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:596
		// general case
		*pfPhiDeg = fatan_deg(-R[X][Z] / R[Z][Z]);
	}

	// first calculate the pitch angle The in the range -90.0 <= The <= 90.0 deg
	*pfTheDeg = fasin_deg(R[Y][Z]);
    f762:	6960      	ldr	r0, [r4, #20]
    f764:	f7f3 faf0 	bl	2d48 <fasin_deg>
    f768:	6030      	str	r0, [r6, #0]
    f76a:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:600

	// use R[Z][Z]=cos(Phi)*cos(The) to correct the quadrant of The remembering
	// cos(Phi) is non-negative so that cos(The) has the same sign as R[Z][Z].
	if (R[Z][Z] < 0.0F)
    f76c:	2100      	movs	r1, #0
    f76e:	6a20      	ldr	r0, [r4, #32]
    f770:	f7f0 ff98 	bl	6a4 <__aeabi_fcmplt>
    f774:	2800      	cmp	r0, #0
    f776:	d000      	beq.n	f77a <fWin8AnglesDegFromRotationMatrix+0x4a>
    f778:	e085      	b.n	f886 <fWin8AnglesDegFromRotationMatrix+0x156>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:607
		// wrap The around +90 deg and -90 deg giving result 90 to 270 deg
		*pfTheDeg = 180.0F - *pfTheDeg;
	}

	// map the pitch angle The to the range -180.0 <= The < 180.0 deg
	if (*pfTheDeg >= 180.0F)
    f77a:	1c28      	adds	r0, r5, #0
    f77c:	4948      	ldr	r1, [pc, #288]	; (f8a0 <fWin8AnglesDegFromRotationMatrix+0x170>)
    f77e:	f7f0 ffaf 	bl	6e0 <__aeabi_fcmpge>
    f782:	2800      	cmp	r0, #0
    f784:	d005      	beq.n	f792 <fWin8AnglesDegFromRotationMatrix+0x62>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:609
	{
		*pfTheDeg -= 360.0F;
    f786:	1c28      	adds	r0, r5, #0
    f788:	4946      	ldr	r1, [pc, #280]	; (f8a4 <fWin8AnglesDegFromRotationMatrix+0x174>)
    f78a:	f7f1 fc2d 	bl	fe8 <__aeabi_fsub>
    f78e:	1c05      	adds	r5, r0, #0
    f790:	6030      	str	r0, [r6, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:613
	}

	// calculate the yaw angle Psi
	if (*pfTheDeg == 90.0F)
    f792:	1c28      	adds	r0, r5, #0
    f794:	4944      	ldr	r1, [pc, #272]	; (f8a8 <fWin8AnglesDegFromRotationMatrix+0x178>)
    f796:	f7f0 ff7f 	bl	698 <__aeabi_fcmpeq>
    f79a:	2800      	cmp	r0, #0
    f79c:	d15c      	bne.n	f858 <fWin8AnglesDegFromRotationMatrix+0x128>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:618
	{
		// vertical upwards gimbal lock case: -270 <= Psi < 90 deg
		*pfPsiDeg = fatan2_deg(R[X][Y], R[X][X]) - *pfPhiDeg;
	}
	else if (*pfTheDeg == -90.0F)
    f79e:	1c28      	adds	r0, r5, #0
    f7a0:	493e      	ldr	r1, [pc, #248]	; (f89c <fWin8AnglesDegFromRotationMatrix+0x16c>)
    f7a2:	f7f0 ff79 	bl	698 <__aeabi_fcmpeq>
    f7a6:	2800      	cmp	r0, #0
    f7a8:	d021      	beq.n	f7ee <fWin8AnglesDegFromRotationMatrix+0xbe>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:621
	{
		// vertical downwards gimbal lock case: -270 <= Psi < 90 deg
		*pfPsiDeg = fatan2_deg(R[X][Y], R[X][X]) + *pfPhiDeg;
    f7aa:	6821      	ldr	r1, [r4, #0]
    f7ac:	6860      	ldr	r0, [r4, #4]
    f7ae:	f7f3 fd43 	bl	3238 <fatan2_deg>
    f7b2:	4643      	mov	r3, r8
    f7b4:	6819      	ldr	r1, [r3, #0]
    f7b6:	f7f0 ff9d 	bl	6f4 <__aeabi_fadd>
    f7ba:	1c05      	adds	r5, r0, #0
    f7bc:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:636
			*pfPsiDeg += 180.0F;
		}
	}

	// map yaw angle Psi onto range 0.0 <= Psi < 360.0 deg
	if (*pfPsiDeg < 0.0F)
    f7be:	1c28      	adds	r0, r5, #0
    f7c0:	2100      	movs	r1, #0
    f7c2:	f7f0 ff6f 	bl	6a4 <__aeabi_fcmplt>
    f7c6:	2800      	cmp	r0, #0
    f7c8:	d12e      	bne.n	f828 <fWin8AnglesDegFromRotationMatrix+0xf8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:642
	{
		*pfPsiDeg += 360.0F;
	}

	// check for any rounding error mapping small negative angle to 360 deg
	if (*pfPsiDeg >= 360.0F)
    f7ca:	1c28      	adds	r0, r5, #0
    f7cc:	4935      	ldr	r1, [pc, #212]	; (f8a4 <fWin8AnglesDegFromRotationMatrix+0x174>)
    f7ce:	f7f0 ff87 	bl	6e0 <__aeabi_fcmpge>
    f7d2:	2800      	cmp	r0, #0
    f7d4:	d034      	beq.n	f840 <fWin8AnglesDegFromRotationMatrix+0x110>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:644
	{
		*pfPsiDeg = 0.0F;
    f7d6:	2500      	movs	r5, #0
    f7d8:	603d      	str	r5, [r7, #0]
    f7da:	9a06      	ldr	r2, [sp, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:660

	// calculate the tilt angle from vertical Chi (0 <= Chi <= 180 deg) 
	*pfChiDeg = facos_deg(R[Z][Z]);

	return;
}
    f7dc:	6015      	str	r5, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:657
	{
		*pfRhoDeg = 0.0F;
	}

	// calculate the tilt angle from vertical Chi (0 <= Chi <= 180 deg) 
	*pfChiDeg = facos_deg(R[Z][Z]);
    f7de:	6a20      	ldr	r0, [r4, #32]
    f7e0:	f7f3 fb5c 	bl	2e9c <facos_deg>
    f7e4:	9b07      	ldr	r3, [sp, #28]
    f7e6:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:660

	return;
}
    f7e8:	bc04      	pop	{r2}
    f7ea:	4690      	mov	r8, r2
    f7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:626
		*pfPsiDeg = fatan2_deg(R[X][Y], R[X][X]) + *pfPhiDeg;
	}
	else
	{
		// general case: -180 <= Psi < 180 deg
		*pfPsiDeg = fatan2_deg(-R[Y][X], R[Y][Y]);
    f7ee:	68e2      	ldr	r2, [r4, #12]
    f7f0:	2380      	movs	r3, #128	; 0x80
    f7f2:	061b      	lsls	r3, r3, #24
    f7f4:	6921      	ldr	r1, [r4, #16]
    f7f6:	18d0      	adds	r0, r2, r3
    f7f8:	f7f3 fd1e 	bl	3238 <fatan2_deg>
    f7fc:	6038      	str	r0, [r7, #0]
    f7fe:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:629

		// correct the quadrant for Psi using the value of The (deg) to give -180 <= Psi < 380 deg
		if (fabs(*pfTheDeg) >= 90.0F)
    f800:	6830      	ldr	r0, [r6, #0]
    f802:	4929      	ldr	r1, [pc, #164]	; (f8a8 <fWin8AnglesDegFromRotationMatrix+0x178>)
    f804:	0040      	lsls	r0, r0, #1
    f806:	0840      	lsrs	r0, r0, #1
    f808:	f7f0 ff6a 	bl	6e0 <__aeabi_fcmpge>
    f80c:	2800      	cmp	r0, #0
    f80e:	d0d6      	beq.n	f7be <fWin8AnglesDegFromRotationMatrix+0x8e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:631
		{
			*pfPsiDeg += 180.0F;
    f810:	1c28      	adds	r0, r5, #0
    f812:	4923      	ldr	r1, [pc, #140]	; (f8a0 <fWin8AnglesDegFromRotationMatrix+0x170>)
    f814:	f7f0 ff6e 	bl	6f4 <__aeabi_fadd>
    f818:	1c05      	adds	r5, r0, #0
    f81a:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:636
		}
	}

	// map yaw angle Psi onto range 0.0 <= Psi < 360.0 deg
	if (*pfPsiDeg < 0.0F)
    f81c:	2100      	movs	r1, #0
    f81e:	1c28      	adds	r0, r5, #0
    f820:	f7f0 ff40 	bl	6a4 <__aeabi_fcmplt>
    f824:	2800      	cmp	r0, #0
    f826:	d0d0      	beq.n	f7ca <fWin8AnglesDegFromRotationMatrix+0x9a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:638
	{
		*pfPsiDeg += 360.0F;
    f828:	1c28      	adds	r0, r5, #0
    f82a:	491e      	ldr	r1, [pc, #120]	; (f8a4 <fWin8AnglesDegFromRotationMatrix+0x174>)
    f82c:	f7f0 ff62 	bl	6f4 <__aeabi_fadd>
    f830:	1c05      	adds	r5, r0, #0
    f832:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:642
	}

	// check for any rounding error mapping small negative angle to 360 deg
	if (*pfPsiDeg >= 360.0F)
    f834:	491b      	ldr	r1, [pc, #108]	; (f8a4 <fWin8AnglesDegFromRotationMatrix+0x174>)
    f836:	1c28      	adds	r0, r5, #0
    f838:	f7f0 ff52 	bl	6e0 <__aeabi_fcmpge>
    f83c:	2800      	cmp	r0, #0
    f83e:	d1ca      	bne.n	f7d6 <fWin8AnglesDegFromRotationMatrix+0xa6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:648
	{
		*pfPsiDeg = 0.0F;
	}

	// compute the compass angle Rho = 360 - Psi
	*pfRhoDeg = 360.0F - *pfPsiDeg;
    f840:	1c29      	adds	r1, r5, #0
    f842:	4818      	ldr	r0, [pc, #96]	; (f8a4 <fWin8AnglesDegFromRotationMatrix+0x174>)
    f844:	f7f1 fbd0 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:651

	// check for rounding errors mapping small negative angle to 360 deg and zero degree case
	if (*pfRhoDeg >= 360.0F)
    f848:	4916      	ldr	r1, [pc, #88]	; (f8a4 <fWin8AnglesDegFromRotationMatrix+0x174>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:648
	{
		*pfPsiDeg = 0.0F;
	}

	// compute the compass angle Rho = 360 - Psi
	*pfRhoDeg = 360.0F - *pfPsiDeg;
    f84a:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:651

	// check for rounding errors mapping small negative angle to 360 deg and zero degree case
	if (*pfRhoDeg >= 360.0F)
    f84c:	f7f0 ff48 	bl	6e0 <__aeabi_fcmpge>
    f850:	2800      	cmp	r0, #0
    f852:	d0c2      	beq.n	f7da <fWin8AnglesDegFromRotationMatrix+0xaa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:653
	{
		*pfRhoDeg = 0.0F;
    f854:	2500      	movs	r5, #0
    f856:	e7c0      	b.n	f7da <fWin8AnglesDegFromRotationMatrix+0xaa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:616

	// calculate the yaw angle Psi
	if (*pfTheDeg == 90.0F)
	{
		// vertical upwards gimbal lock case: -270 <= Psi < 90 deg
		*pfPsiDeg = fatan2_deg(R[X][Y], R[X][X]) - *pfPhiDeg;
    f858:	6821      	ldr	r1, [r4, #0]
    f85a:	6860      	ldr	r0, [r4, #4]
    f85c:	f7f3 fcec 	bl	3238 <fatan2_deg>
    f860:	4642      	mov	r2, r8
    f862:	6811      	ldr	r1, [r2, #0]
    f864:	f7f1 fbc0 	bl	fe8 <__aeabi_fsub>
    f868:	1c05      	adds	r5, r0, #0
    f86a:	6038      	str	r0, [r7, #0]
    f86c:	e7a7      	b.n	f7be <fWin8AnglesDegFromRotationMatrix+0x8e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:592
		}
	}
	else
	{
		// general case
		*pfPhiDeg = fatan_deg(-R[X][Z] / R[Z][Z]);
    f86e:	68a3      	ldr	r3, [r4, #8]
    f870:	2280      	movs	r2, #128	; 0x80
    f872:	0612      	lsls	r2, r2, #24
    f874:	1898      	adds	r0, r3, r2
    f876:	1c29      	adds	r1, r5, #0
    f878:	f7f1 f8a8 	bl	9cc <__aeabi_fdiv>
    f87c:	f7f3 fc4e 	bl	311c <fatan_deg>
    f880:	4643      	mov	r3, r8
    f882:	6018      	str	r0, [r3, #0]
    f884:	e76d      	b.n	f762 <fWin8AnglesDegFromRotationMatrix+0x32>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:603
	// use R[Z][Z]=cos(Phi)*cos(The) to correct the quadrant of The remembering
	// cos(Phi) is non-negative so that cos(The) has the same sign as R[Z][Z].
	if (R[Z][Z] < 0.0F)
	{
		// wrap The around +90 deg and -90 deg giving result 90 to 270 deg
		*pfTheDeg = 180.0F - *pfTheDeg;
    f886:	1c29      	adds	r1, r5, #0
    f888:	4805      	ldr	r0, [pc, #20]	; (f8a0 <fWin8AnglesDegFromRotationMatrix+0x170>)
    f88a:	f7f1 fbad 	bl	fe8 <__aeabi_fsub>
    f88e:	1c05      	adds	r5, r0, #0
    f890:	6030      	str	r0, [r6, #0]
    f892:	e772      	b.n	f77a <fWin8AnglesDegFromRotationMatrix+0x4a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:586
			*pfPhiDeg = -90.0F;
		}
		else
		{
			// tan(phi) is +infinity
			*pfPhiDeg = 90.0F;
    f894:	4b04      	ldr	r3, [pc, #16]	; (f8a8 <fWin8AnglesDegFromRotationMatrix+0x178>)
    f896:	4642      	mov	r2, r8
    f898:	6013      	str	r3, [r2, #0]
    f89a:	e762      	b.n	f762 <fWin8AnglesDegFromRotationMatrix+0x32>
    f89c:	c2b40000 	.word	0xc2b40000
    f8a0:	43340000 	.word	0x43340000
    f8a4:	43b40000 	.word	0x43b40000
    f8a8:	42b40000 	.word	0x42b40000

0000f8ac <fQuaternionFromRotationVectorDeg>:
fQuaternionFromRotationVectorDeg():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:664
	return;
}

// computes normalized rotation quaternion from a rotation vector (deg)
void fQuaternionFromRotationVectorDeg(struct fquaternion *pq, const float rvecdeg[], float fscaling)
{
    f8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    f8ae:	1c0c      	adds	r4, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:674
	float sinhalfeta;		// sin(eta/2)
	float fvecsq;			// q1^2+q2^2+q3^2
	float ftmp;				// scratch variable

	// compute the scaled rotation angle eta (deg) which can be both positve or negative
	fetadeg = fscaling * sqrtf(rvecdeg[X] * rvecdeg[X] + rvecdeg[Y] * rvecdeg[Y] + rvecdeg[Z] * rvecdeg[Z]);
    f8b0:	6809      	ldr	r1, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:664
	return;
}

// computes normalized rotation quaternion from a rotation vector (deg)
void fQuaternionFromRotationVectorDeg(struct fquaternion *pq, const float rvecdeg[], float fscaling)
{
    f8b2:	464e      	mov	r6, r9
    f8b4:	4645      	mov	r5, r8
    f8b6:	4657      	mov	r7, sl
    f8b8:	b4e0      	push	{r5, r6, r7}
    f8ba:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:674
	float sinhalfeta;		// sin(eta/2)
	float fvecsq;			// q1^2+q2^2+q3^2
	float ftmp;				// scratch variable

	// compute the scaled rotation angle eta (deg) which can be both positve or negative
	fetadeg = fscaling * sqrtf(rvecdeg[X] * rvecdeg[X] + rvecdeg[Y] * rvecdeg[Y] + rvecdeg[Z] * rvecdeg[Z]);
    f8bc:	1c08      	adds	r0, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:664
	return;
}

// computes normalized rotation quaternion from a rotation vector (deg)
void fQuaternionFromRotationVectorDeg(struct fquaternion *pq, const float rvecdeg[], float fscaling)
{
    f8be:	4691      	mov	r9, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:674
	float sinhalfeta;		// sin(eta/2)
	float fvecsq;			// q1^2+q2^2+q3^2
	float ftmp;				// scratch variable

	// compute the scaled rotation angle eta (deg) which can be both positve or negative
	fetadeg = fscaling * sqrtf(rvecdeg[X] * rvecdeg[X] + rvecdeg[Y] * rvecdeg[Y] + rvecdeg[Z] * rvecdeg[Z]);
    f8c0:	f7f1 fa68 	bl	d94 <__aeabi_fmul>
    f8c4:	6867      	ldr	r7, [r4, #4]
    f8c6:	4680      	mov	r8, r0
    f8c8:	1c39      	adds	r1, r7, #0
    f8ca:	1c38      	adds	r0, r7, #0
    f8cc:	f7f1 fa62 	bl	d94 <__aeabi_fmul>
    f8d0:	1c01      	adds	r1, r0, #0
    f8d2:	4640      	mov	r0, r8
    f8d4:	f7f0 ff0e 	bl	6f4 <__aeabi_fadd>
    f8d8:	68a6      	ldr	r6, [r4, #8]
    f8da:	1c07      	adds	r7, r0, #0
    f8dc:	1c31      	adds	r1, r6, #0
    f8de:	1c30      	adds	r0, r6, #0
    f8e0:	f7f1 fa58 	bl	d94 <__aeabi_fmul>
    f8e4:	1c01      	adds	r1, r0, #0
    f8e6:	1c38      	adds	r0, r7, #0
    f8e8:	f7f0 ff04 	bl	6f4 <__aeabi_fadd>
    f8ec:	f003 fdd0 	bl	13490 <sqrtf>
    f8f0:	4649      	mov	r1, r9
    f8f2:	f7f1 fa4f 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:675
	fetarad = fetadeg * FDEGTORAD;
    f8f6:	494d      	ldr	r1, [pc, #308]	; (fa2c <fQuaternionFromRotationVectorDeg+0x180>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:674
	float sinhalfeta;		// sin(eta/2)
	float fvecsq;			// q1^2+q2^2+q3^2
	float ftmp;				// scratch variable

	// compute the scaled rotation angle eta (deg) which can be both positve or negative
	fetadeg = fscaling * sqrtf(rvecdeg[X] * rvecdeg[X] + rvecdeg[Y] * rvecdeg[Y] + rvecdeg[Z] * rvecdeg[Z]);
    f8f8:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:675
	fetarad = fetadeg * FDEGTORAD;
    f8fa:	f7f1 fa4b 	bl	d94 <__aeabi_fmul>
    f8fe:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:676
	fetarad2 = fetarad * fetarad;
    f900:	1c31      	adds	r1, r6, #0
    f902:	f7f1 fa47 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:680

	// calculate the sine and cosine using small angle approximations or exact
	// angles under sqrt(0.02)=0.141 rad is 8.1 deg and 1620 deg/s (=936deg/s in 3 axes) at 200Hz and 405 deg/s at 50Hz
	if (fetarad2 <= 0.02F)
    f906:	494a      	ldr	r1, [pc, #296]	; (fa30 <fQuaternionFromRotationVectorDeg+0x184>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:676
	float ftmp;				// scratch variable

	// compute the scaled rotation angle eta (deg) which can be both positve or negative
	fetadeg = fscaling * sqrtf(rvecdeg[X] * rvecdeg[X] + rvecdeg[Y] * rvecdeg[Y] + rvecdeg[Z] * rvecdeg[Z]);
	fetarad = fetadeg * FDEGTORAD;
	fetarad2 = fetarad * fetarad;
    f908:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:680

	// calculate the sine and cosine using small angle approximations or exact
	// angles under sqrt(0.02)=0.141 rad is 8.1 deg and 1620 deg/s (=936deg/s in 3 axes) at 200Hz and 405 deg/s at 50Hz
	if (fetarad2 <= 0.02F)
    f90a:	f7f0 fed5 	bl	6b8 <__aeabi_fcmple>
    f90e:	2800      	cmp	r0, #0
    f910:	d04f      	beq.n	f9b2 <fQuaternionFromRotationVectorDeg+0x106>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:683
	{
		// use MacLaurin series up to and including third order
		sinhalfeta = fetarad * (0.5F - ONEOVER48 * fetarad2);
    f912:	1c38      	adds	r0, r7, #0
    f914:	4947      	ldr	r1, [pc, #284]	; (fa34 <fQuaternionFromRotationVectorDeg+0x188>)
    f916:	f7f1 fa3d 	bl	d94 <__aeabi_fmul>
    f91a:	1c01      	adds	r1, r0, #0
    f91c:	20fc      	movs	r0, #252	; 0xfc
    f91e:	0580      	lsls	r0, r0, #22
    f920:	f7f1 fb62 	bl	fe8 <__aeabi_fsub>
    f924:	1c31      	adds	r1, r6, #0
    f926:	f7f1 fa35 	bl	d94 <__aeabi_fmul>
    f92a:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:699
		// use exact calculation
		sinhalfeta = (float)sinf(0.5F * fetarad);
	}

	// compute the vector quaternion components q1, q2, q3
	if (fetadeg != 0.0F)
    f92c:	2600      	movs	r6, #0
    f92e:	4640      	mov	r0, r8
    f930:	1c31      	adds	r1, r6, #0
    f932:	f7f0 feb1 	bl	698 <__aeabi_fcmpeq>
    f936:	2800      	cmp	r0, #0
    f938:	d161      	bne.n	f9fe <fQuaternionFromRotationVectorDeg+0x152>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:702
	{
		// general case with non-zero rotation angle
		ftmp = fscaling * sinhalfeta / fetadeg;
    f93a:	1c39      	adds	r1, r7, #0
    f93c:	4648      	mov	r0, r9
    f93e:	f7f1 fa29 	bl	d94 <__aeabi_fmul>
    f942:	4641      	mov	r1, r8
    f944:	f7f1 f842 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:703
		pq->q1 = rvecdeg[X] * ftmp;		// q1 = nx * sin(eta/2)
    f948:	6821      	ldr	r1, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:702

	// compute the vector quaternion components q1, q2, q3
	if (fetadeg != 0.0F)
	{
		// general case with non-zero rotation angle
		ftmp = fscaling * sinhalfeta / fetadeg;
    f94a:	4681      	mov	r9, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:703
		pq->q1 = rvecdeg[X] * ftmp;		// q1 = nx * sin(eta/2)
    f94c:	f7f1 fa22 	bl	d94 <__aeabi_fmul>
    f950:	6068      	str	r0, [r5, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:704
		pq->q2 = rvecdeg[Y] * ftmp;		// q2 = ny * sin(eta/2)
    f952:	6861      	ldr	r1, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:703
	// compute the vector quaternion components q1, q2, q3
	if (fetadeg != 0.0F)
	{
		// general case with non-zero rotation angle
		ftmp = fscaling * sinhalfeta / fetadeg;
		pq->q1 = rvecdeg[X] * ftmp;		// q1 = nx * sin(eta/2)
    f954:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:704
		pq->q2 = rvecdeg[Y] * ftmp;		// q2 = ny * sin(eta/2)
    f956:	4648      	mov	r0, r9
    f958:	f7f1 fa1c 	bl	d94 <__aeabi_fmul>
    f95c:	60a8      	str	r0, [r5, #8]
    f95e:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:705
		pq->q3 = rvecdeg[Z] * ftmp;		// q3 = nz * sin(eta/2)
    f960:	68a1      	ldr	r1, [r4, #8]
    f962:	4648      	mov	r0, r9
    f964:	f7f1 fa16 	bl	d94 <__aeabi_fmul>
    f968:	4641      	mov	r1, r8
    f96a:	1c04      	adds	r4, r0, #0
    f96c:	60e8      	str	r0, [r5, #12]
    f96e:	4640      	mov	r0, r8
    f970:	f7f1 fa10 	bl	d94 <__aeabi_fmul>
    f974:	1c39      	adds	r1, r7, #0
    f976:	4680      	mov	r8, r0
    f978:	1c38      	adds	r0, r7, #0
    f97a:	f7f1 fa0b 	bl	d94 <__aeabi_fmul>
    f97e:	1c01      	adds	r1, r0, #0
    f980:	4640      	mov	r0, r8
    f982:	f7f0 feb7 	bl	6f4 <__aeabi_fadd>
    f986:	1c21      	adds	r1, r4, #0
    f988:	1c07      	adds	r7, r0, #0
    f98a:	1c20      	adds	r0, r4, #0
    f98c:	f7f1 fa02 	bl	d94 <__aeabi_fmul>
    f990:	1c01      	adds	r1, r0, #0
    f992:	1c38      	adds	r0, r7, #0
    f994:	f7f0 feae 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:716
	}

	// compute the scalar quaternion component q0 by explicit normalization
	// taking care to avoid rounding errors giving negative operand to sqrt
	fvecsq = pq->q1 * pq->q1 + pq->q2 * pq->q2 + pq->q3 * pq->q3;
	if (fvecsq <= 1.0F)
    f998:	21fe      	movs	r1, #254	; 0xfe
    f99a:	0589      	lsls	r1, r1, #22
    f99c:	1c04      	adds	r4, r0, #0
    f99e:	f7f0 fe8b 	bl	6b8 <__aeabi_fcmple>
    f9a2:	2800      	cmp	r0, #0
    f9a4:	d12f      	bne.n	fa06 <fQuaternionFromRotationVectorDeg+0x15a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:724
		pq->q0 = sqrtf(1.0F - fvecsq);
	}
	else
	{
		// rounding errors are present
		pq->q0 = 0.0F;
    f9a6:	602e      	str	r6, [r5, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:728
	}

	return;
}
    f9a8:	bc1c      	pop	{r2, r3, r4}
    f9aa:	4690      	mov	r8, r2
    f9ac:	4699      	mov	r9, r3
    f9ae:	46a2      	mov	sl, r4
    f9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:685
	if (fetarad2 <= 0.02F)
	{
		// use MacLaurin series up to and including third order
		sinhalfeta = fetarad * (0.5F - ONEOVER48 * fetarad2);
	}
	else if  (fetarad2 <= 0.06F)
    f9b2:	1c38      	adds	r0, r7, #0
    f9b4:	4920      	ldr	r1, [pc, #128]	; (fa38 <fQuaternionFromRotationVectorDeg+0x18c>)
    f9b6:	f7f0 fe7f 	bl	6b8 <__aeabi_fcmple>
    f9ba:	2800      	cmp	r0, #0
    f9bc:	d02c      	beq.n	fa18 <fQuaternionFromRotationVectorDeg+0x16c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:690
	{
		// use MacLaurin series up to and including fifth order
		// angles under sqrt(0.06)=0.245 rad is 14.0 deg and 2807 deg/s (=1623deg/s in 3 axes) at 200Hz and 703 deg/s at 50Hz
		fetarad4 = fetarad2 * fetarad2;
		sinhalfeta = fetarad * (0.5F - ONEOVER48 * fetarad2 + ONEOVER3840 * fetarad4);
    f9be:	1c38      	adds	r0, r7, #0
    f9c0:	491c      	ldr	r1, [pc, #112]	; (fa34 <fQuaternionFromRotationVectorDeg+0x188>)
    f9c2:	f7f1 f9e7 	bl	d94 <__aeabi_fmul>
    f9c6:	1c01      	adds	r1, r0, #0
    f9c8:	20fc      	movs	r0, #252	; 0xfc
    f9ca:	0580      	lsls	r0, r0, #22
    f9cc:	f7f1 fb0c 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:689
	}
	else if  (fetarad2 <= 0.06F)
	{
		// use MacLaurin series up to and including fifth order
		// angles under sqrt(0.06)=0.245 rad is 14.0 deg and 2807 deg/s (=1623deg/s in 3 axes) at 200Hz and 703 deg/s at 50Hz
		fetarad4 = fetarad2 * fetarad2;
    f9d0:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:690
		sinhalfeta = fetarad * (0.5F - ONEOVER48 * fetarad2 + ONEOVER3840 * fetarad4);
    f9d2:	4682      	mov	sl, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:689
	}
	else if  (fetarad2 <= 0.06F)
	{
		// use MacLaurin series up to and including fifth order
		// angles under sqrt(0.06)=0.245 rad is 14.0 deg and 2807 deg/s (=1623deg/s in 3 axes) at 200Hz and 703 deg/s at 50Hz
		fetarad4 = fetarad2 * fetarad2;
    f9d4:	1c38      	adds	r0, r7, #0
    f9d6:	f7f1 f9dd 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:690
		sinhalfeta = fetarad * (0.5F - ONEOVER48 * fetarad2 + ONEOVER3840 * fetarad4);
    f9da:	4918      	ldr	r1, [pc, #96]	; (fa3c <fQuaternionFromRotationVectorDeg+0x190>)
    f9dc:	f7f1 f9da 	bl	d94 <__aeabi_fmul>
    f9e0:	1c01      	adds	r1, r0, #0
    f9e2:	4650      	mov	r0, sl
    f9e4:	f7f0 fe86 	bl	6f4 <__aeabi_fadd>
    f9e8:	1c31      	adds	r1, r6, #0
    f9ea:	f7f1 f9d3 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:699
		// use exact calculation
		sinhalfeta = (float)sinf(0.5F * fetarad);
	}

	// compute the vector quaternion components q1, q2, q3
	if (fetadeg != 0.0F)
    f9ee:	2600      	movs	r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:690
	else if  (fetarad2 <= 0.06F)
	{
		// use MacLaurin series up to and including fifth order
		// angles under sqrt(0.06)=0.245 rad is 14.0 deg and 2807 deg/s (=1623deg/s in 3 axes) at 200Hz and 703 deg/s at 50Hz
		fetarad4 = fetarad2 * fetarad2;
		sinhalfeta = fetarad * (0.5F - ONEOVER48 * fetarad2 + ONEOVER3840 * fetarad4);
    f9f0:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:699
		// use exact calculation
		sinhalfeta = (float)sinf(0.5F * fetarad);
	}

	// compute the vector quaternion components q1, q2, q3
	if (fetadeg != 0.0F)
    f9f2:	1c31      	adds	r1, r6, #0
    f9f4:	4640      	mov	r0, r8
    f9f6:	f7f0 fe4f 	bl	698 <__aeabi_fcmpeq>
    f9fa:	2800      	cmp	r0, #0
    f9fc:	d09d      	beq.n	f93a <fQuaternionFromRotationVectorDeg+0x8e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:710
		pq->q3 = rvecdeg[Z] * ftmp;		// q3 = nz * sin(eta/2)
	}
	else
	{
		// zero rotation angle giving zero vector component
		pq->q1 = pq->q2 = pq->q3 = 0.0F;
    f9fe:	60ee      	str	r6, [r5, #12]
    fa00:	60ae      	str	r6, [r5, #8]
    fa02:	606e      	str	r6, [r5, #4]
    fa04:	1c34      	adds	r4, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:719
	// taking care to avoid rounding errors giving negative operand to sqrt
	fvecsq = pq->q1 * pq->q1 + pq->q2 * pq->q2 + pq->q3 * pq->q3;
	if (fvecsq <= 1.0F)
	{
		// normal case
		pq->q0 = sqrtf(1.0F - fvecsq);
    fa06:	20fe      	movs	r0, #254	; 0xfe
    fa08:	1c21      	adds	r1, r4, #0
    fa0a:	0580      	lsls	r0, r0, #22
    fa0c:	f7f1 faec 	bl	fe8 <__aeabi_fsub>
    fa10:	f003 fd3e 	bl	13490 <sqrtf>
    fa14:	6028      	str	r0, [r5, #0]
    fa16:	e7c7      	b.n	f9a8 <fQuaternionFromRotationVectorDeg+0xfc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:695
		sinhalfeta = fetarad * (0.5F - ONEOVER48 * fetarad2 + ONEOVER3840 * fetarad4);
	}
	else
	{
		// use exact calculation
		sinhalfeta = (float)sinf(0.5F * fetarad);
    fa18:	21fc      	movs	r1, #252	; 0xfc
    fa1a:	0589      	lsls	r1, r1, #22
    fa1c:	1c30      	adds	r0, r6, #0
    fa1e:	f7f1 f9b9 	bl	d94 <__aeabi_fmul>
    fa22:	f003 fad7 	bl	12fd4 <sinf>
    fa26:	1c07      	adds	r7, r0, #0
    fa28:	e780      	b.n	f92c <fQuaternionFromRotationVectorDeg+0x80>
    fa2a:	46c0      	nop			; (mov r8, r8)
    fa2c:	3c8efa35 	.word	0x3c8efa35
    fa30:	3ca3d70a 	.word	0x3ca3d70a
    fa34:	3caaaaab 	.word	0x3caaaaab
    fa38:	3d75c28f 	.word	0x3d75c28f
    fa3c:	39888889 	.word	0x39888889

0000fa40 <fQuaternionFromRotationMatrix>:
fQuaternionFromRotationMatrix():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:732
	return;
}

// compute the orientation quaternion from a 3x3 rotation matrix
void fQuaternionFromRotationMatrix(float R[][3], struct fquaternion *pq)
{
    fa40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fa42:	1c0d      	adds	r5, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:741
	// the quaternion is not explicitly normalized in this function on the assumption that it
	// is supplied with a normalized rotation matrix. if the rotation matrix is normalized then
	// the quaternion will also be normalized even if the case of small q0

	// get q0^2 and q0
	fq0sq = 0.25F * (1.0F + R[X][X] + R[Y][Y] + R[Z][Z]);
    fa44:	21fe      	movs	r1, #254	; 0xfe
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:732
	return;
}

// compute the orientation quaternion from a 3x3 rotation matrix
void fQuaternionFromRotationMatrix(float R[][3], struct fquaternion *pq)
{
    fa46:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:741
	// the quaternion is not explicitly normalized in this function on the assumption that it
	// is supplied with a normalized rotation matrix. if the rotation matrix is normalized then
	// the quaternion will also be normalized even if the case of small q0

	// get q0^2 and q0
	fq0sq = 0.25F * (1.0F + R[X][X] + R[Y][Y] + R[Z][Z]);
    fa48:	0589      	lsls	r1, r1, #22
    fa4a:	6800      	ldr	r0, [r0, #0]
    fa4c:	f7f0 fe52 	bl	6f4 <__aeabi_fadd>
    fa50:	6921      	ldr	r1, [r4, #16]
    fa52:	f7f0 fe4f 	bl	6f4 <__aeabi_fadd>
    fa56:	6a21      	ldr	r1, [r4, #32]
    fa58:	f7f0 fe4c 	bl	6f4 <__aeabi_fadd>
    fa5c:	21fa      	movs	r1, #250	; 0xfa
    fa5e:	0589      	lsls	r1, r1, #22
    fa60:	f7f1 f998 	bl	d94 <__aeabi_fmul>
    fa64:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:742
	pq->q0 = sqrtf(fabs(fq0sq));
    fa66:	0040      	lsls	r0, r0, #1
    fa68:	0840      	lsrs	r0, r0, #1
    fa6a:	f003 fd11 	bl	13490 <sqrtf>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:745

	// normal case when q0 is not small meaning rotation angle not near 180 deg
	if (pq->q0 > SMALLQ0)
    fa6e:	4943      	ldr	r1, [pc, #268]	; (fb7c <fQuaternionFromRotationMatrix+0x13c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:742
	// is supplied with a normalized rotation matrix. if the rotation matrix is normalized then
	// the quaternion will also be normalized even if the case of small q0

	// get q0^2 and q0
	fq0sq = 0.25F * (1.0F + R[X][X] + R[Y][Y] + R[Z][Z]);
	pq->q0 = sqrtf(fabs(fq0sq));
    fa70:	6028      	str	r0, [r5, #0]
    fa72:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:745

	// normal case when q0 is not small meaning rotation angle not near 180 deg
	if (pq->q0 > SMALLQ0)
    fa74:	f7f0 fe2a 	bl	6cc <__aeabi_fcmpgt>
    fa78:	2800      	cmp	r0, #0
    fa7a:	d01e      	beq.n	faba <fQuaternionFromRotationMatrix+0x7a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:748
	{
		// calculate q1 to q3
		recip4q0 = 0.25F / pq->q0;
    fa7c:	20fa      	movs	r0, #250	; 0xfa
    fa7e:	1c31      	adds	r1, r6, #0
    fa80:	0580      	lsls	r0, r0, #22
    fa82:	f7f0 ffa3 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:749
		pq->q1 = recip4q0 * (R[Y][Z] - R[Z][Y]);
    fa86:	69e1      	ldr	r1, [r4, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:748

	// normal case when q0 is not small meaning rotation angle not near 180 deg
	if (pq->q0 > SMALLQ0)
	{
		// calculate q1 to q3
		recip4q0 = 0.25F / pq->q0;
    fa88:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:749
		pq->q1 = recip4q0 * (R[Y][Z] - R[Z][Y]);
    fa8a:	6960      	ldr	r0, [r4, #20]
    fa8c:	f7f1 faac 	bl	fe8 <__aeabi_fsub>
    fa90:	1c31      	adds	r1, r6, #0
    fa92:	f7f1 f97f 	bl	d94 <__aeabi_fmul>
    fa96:	6068      	str	r0, [r5, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:750
		pq->q2 = recip4q0 * (R[Z][X] - R[X][Z]);
    fa98:	68a1      	ldr	r1, [r4, #8]
    fa9a:	69a0      	ldr	r0, [r4, #24]
    fa9c:	f7f1 faa4 	bl	fe8 <__aeabi_fsub>
    faa0:	1c31      	adds	r1, r6, #0
    faa2:	f7f1 f977 	bl	d94 <__aeabi_fmul>
    faa6:	60a8      	str	r0, [r5, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:751
		pq->q3 = recip4q0 * (R[X][Y] - R[Y][X]);
    faa8:	68e1      	ldr	r1, [r4, #12]
    faaa:	6860      	ldr	r0, [r4, #4]
    faac:	f7f1 fa9c 	bl	fe8 <__aeabi_fsub>
    fab0:	1c31      	adds	r1, r6, #0
    fab2:	f7f1 f96f 	bl	d94 <__aeabi_fmul>
    fab6:	60e8      	str	r0, [r5, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:769
		if ((R[Z][X] - R[X][Z]) < 0.0F) pq->q2 = -pq->q2;
		if ((R[X][Y] - R[Y][X]) < 0.0F) pq->q3 = -pq->q3;
	} // end of special case

	return;
}
    fab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:758
	else
	{
		// special case of near 180 deg corresponds to nearly symmetric matrix
		// which is not numerically well conditioned for division by small q0
		// instead get absolute values of q1 to q3 from leading diagonal
		pq->q1 = sqrtf(fabs(0.5F * (1.0F + R[X][X]) - fq0sq));
    faba:	21fe      	movs	r1, #254	; 0xfe
    fabc:	6820      	ldr	r0, [r4, #0]
    fabe:	0589      	lsls	r1, r1, #22
    fac0:	f7f0 fe18 	bl	6f4 <__aeabi_fadd>
    fac4:	21fc      	movs	r1, #252	; 0xfc
    fac6:	0589      	lsls	r1, r1, #22
    fac8:	f7f1 f964 	bl	d94 <__aeabi_fmul>
    facc:	1c39      	adds	r1, r7, #0
    face:	f7f1 fa8b 	bl	fe8 <__aeabi_fsub>
    fad2:	0040      	lsls	r0, r0, #1
    fad4:	0840      	lsrs	r0, r0, #1
    fad6:	f003 fcdb 	bl	13490 <sqrtf>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:759
		pq->q2 = sqrtf(fabs(0.5F * (1.0F + R[Y][Y]) - fq0sq));
    fada:	21fe      	movs	r1, #254	; 0xfe
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:758
	else
	{
		// special case of near 180 deg corresponds to nearly symmetric matrix
		// which is not numerically well conditioned for division by small q0
		// instead get absolute values of q1 to q3 from leading diagonal
		pq->q1 = sqrtf(fabs(0.5F * (1.0F + R[X][X]) - fq0sq));
    fadc:	6068      	str	r0, [r5, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:759
		pq->q2 = sqrtf(fabs(0.5F * (1.0F + R[Y][Y]) - fq0sq));
    fade:	6920      	ldr	r0, [r4, #16]
    fae0:	0589      	lsls	r1, r1, #22
    fae2:	f7f0 fe07 	bl	6f4 <__aeabi_fadd>
    fae6:	21fc      	movs	r1, #252	; 0xfc
    fae8:	0589      	lsls	r1, r1, #22
    faea:	f7f1 f953 	bl	d94 <__aeabi_fmul>
    faee:	1c39      	adds	r1, r7, #0
    faf0:	f7f1 fa7a 	bl	fe8 <__aeabi_fsub>
    faf4:	0040      	lsls	r0, r0, #1
    faf6:	0840      	lsrs	r0, r0, #1
    faf8:	f003 fcca 	bl	13490 <sqrtf>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:760
		pq->q3 = sqrtf(fabs(0.5F * (1.0F + R[Z][Z]) - fq0sq));
    fafc:	21fe      	movs	r1, #254	; 0xfe
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:759
	{
		// special case of near 180 deg corresponds to nearly symmetric matrix
		// which is not numerically well conditioned for division by small q0
		// instead get absolute values of q1 to q3 from leading diagonal
		pq->q1 = sqrtf(fabs(0.5F * (1.0F + R[X][X]) - fq0sq));
		pq->q2 = sqrtf(fabs(0.5F * (1.0F + R[Y][Y]) - fq0sq));
    fafe:	60a8      	str	r0, [r5, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:760
		pq->q3 = sqrtf(fabs(0.5F * (1.0F + R[Z][Z]) - fq0sq));
    fb00:	6a20      	ldr	r0, [r4, #32]
    fb02:	0589      	lsls	r1, r1, #22
    fb04:	f7f0 fdf6 	bl	6f4 <__aeabi_fadd>
    fb08:	21fc      	movs	r1, #252	; 0xfc
    fb0a:	0589      	lsls	r1, r1, #22
    fb0c:	f7f1 f942 	bl	d94 <__aeabi_fmul>
    fb10:	1c39      	adds	r1, r7, #0
    fb12:	f7f1 fa69 	bl	fe8 <__aeabi_fsub>
    fb16:	0040      	lsls	r0, r0, #1
    fb18:	0840      	lsrs	r0, r0, #1
    fb1a:	f003 fcb9 	bl	13490 <sqrtf>
    fb1e:	60e8      	str	r0, [r5, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:763

		// correct the signs of q1 to q3 by examining the signs of differenced off-diagonal terms
		if ((R[Y][Z] - R[Z][Y]) < 0.0F) pq->q1 = -pq->q1;
    fb20:	69e1      	ldr	r1, [r4, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:760
		// special case of near 180 deg corresponds to nearly symmetric matrix
		// which is not numerically well conditioned for division by small q0
		// instead get absolute values of q1 to q3 from leading diagonal
		pq->q1 = sqrtf(fabs(0.5F * (1.0F + R[X][X]) - fq0sq));
		pq->q2 = sqrtf(fabs(0.5F * (1.0F + R[Y][Y]) - fq0sq));
		pq->q3 = sqrtf(fabs(0.5F * (1.0F + R[Z][Z]) - fq0sq));
    fb22:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:763

		// correct the signs of q1 to q3 by examining the signs of differenced off-diagonal terms
		if ((R[Y][Z] - R[Z][Y]) < 0.0F) pq->q1 = -pq->q1;
    fb24:	6960      	ldr	r0, [r4, #20]
    fb26:	f7f1 fa5f 	bl	fe8 <__aeabi_fsub>
    fb2a:	2100      	movs	r1, #0
    fb2c:	f7f0 fdba 	bl	6a4 <__aeabi_fcmplt>
    fb30:	2800      	cmp	r0, #0
    fb32:	d11c      	bne.n	fb6e <fQuaternionFromRotationMatrix+0x12e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:764
		if ((R[Z][X] - R[X][Z]) < 0.0F) pq->q2 = -pq->q2;
    fb34:	68a1      	ldr	r1, [r4, #8]
    fb36:	69a0      	ldr	r0, [r4, #24]
    fb38:	f7f1 fa56 	bl	fe8 <__aeabi_fsub>
    fb3c:	2100      	movs	r1, #0
    fb3e:	f7f0 fdb1 	bl	6a4 <__aeabi_fcmplt>
    fb42:	2800      	cmp	r0, #0
    fb44:	d10d      	bne.n	fb62 <fQuaternionFromRotationMatrix+0x122>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:765
		if ((R[X][Y] - R[Y][X]) < 0.0F) pq->q3 = -pq->q3;
    fb46:	68e1      	ldr	r1, [r4, #12]
    fb48:	6860      	ldr	r0, [r4, #4]
    fb4a:	f7f1 fa4d 	bl	fe8 <__aeabi_fsub>
    fb4e:	2100      	movs	r1, #0
    fb50:	f7f0 fda8 	bl	6a4 <__aeabi_fcmplt>
    fb54:	2800      	cmp	r0, #0
    fb56:	d0af      	beq.n	fab8 <fQuaternionFromRotationMatrix+0x78>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:765 (discriminator 1)
    fb58:	2380      	movs	r3, #128	; 0x80
    fb5a:	061b      	lsls	r3, r3, #24
    fb5c:	18f6      	adds	r6, r6, r3
    fb5e:	60ee      	str	r6, [r5, #12]
    fb60:	e7aa      	b.n	fab8 <fQuaternionFromRotationMatrix+0x78>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:764 (discriminator 1)
		pq->q2 = sqrtf(fabs(0.5F * (1.0F + R[Y][Y]) - fq0sq));
		pq->q3 = sqrtf(fabs(0.5F * (1.0F + R[Z][Z]) - fq0sq));

		// correct the signs of q1 to q3 by examining the signs of differenced off-diagonal terms
		if ((R[Y][Z] - R[Z][Y]) < 0.0F) pq->q1 = -pq->q1;
		if ((R[Z][X] - R[X][Z]) < 0.0F) pq->q2 = -pq->q2;
    fb62:	68a9      	ldr	r1, [r5, #8]
    fb64:	2280      	movs	r2, #128	; 0x80
    fb66:	0612      	lsls	r2, r2, #24
    fb68:	188b      	adds	r3, r1, r2
    fb6a:	60ab      	str	r3, [r5, #8]
    fb6c:	e7eb      	b.n	fb46 <fQuaternionFromRotationMatrix+0x106>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:763 (discriminator 1)
		pq->q1 = sqrtf(fabs(0.5F * (1.0F + R[X][X]) - fq0sq));
		pq->q2 = sqrtf(fabs(0.5F * (1.0F + R[Y][Y]) - fq0sq));
		pq->q3 = sqrtf(fabs(0.5F * (1.0F + R[Z][Z]) - fq0sq));

		// correct the signs of q1 to q3 by examining the signs of differenced off-diagonal terms
		if ((R[Y][Z] - R[Z][Y]) < 0.0F) pq->q1 = -pq->q1;
    fb6e:	6869      	ldr	r1, [r5, #4]
    fb70:	2280      	movs	r2, #128	; 0x80
    fb72:	0612      	lsls	r2, r2, #24
    fb74:	188b      	adds	r3, r1, r2
    fb76:	606b      	str	r3, [r5, #4]
    fb78:	e7dc      	b.n	fb34 <fQuaternionFromRotationMatrix+0xf4>
    fb7a:	46c0      	nop			; (mov r8, r8)
    fb7c:	3c23d70a 	.word	0x3c23d70a

0000fb80 <fRotationMatrixFromQuaternion>:
fRotationMatrixFromQuaternion():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:773
	return;
}

// compute the rotation matrix from an orientation quaternion
void fRotationMatrixFromQuaternion(float R[][3], const struct fquaternion *pq)
{
    fb80:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb82:	465f      	mov	r7, fp
    fb84:	4656      	mov	r6, sl
    fb86:	464d      	mov	r5, r9
    fb88:	4644      	mov	r4, r8
    fb8a:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:781
	float f2q1q1, f2q1q2, f2q1q3;
	float f2q2q2, f2q2q3;
	float f2q3q3;

	// calculate products
	f2q = 2.0F * pq->q0;
    fb8c:	680e      	ldr	r6, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:773
	return;
}

// compute the rotation matrix from an orientation quaternion
void fRotationMatrixFromQuaternion(float R[][3], const struct fquaternion *pq)
{
    fb8e:	b087      	sub	sp, #28
    fb90:	1c04      	adds	r4, r0, #0
    fb92:	1c0d      	adds	r5, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:781
	float f2q1q1, f2q1q2, f2q1q3;
	float f2q2q2, f2q2q3;
	float f2q3q3;

	// calculate products
	f2q = 2.0F * pq->q0;
    fb94:	1c30      	adds	r0, r6, #0
    fb96:	1c31      	adds	r1, r6, #0
    fb98:	f7f0 fdac 	bl	6f4 <__aeabi_fadd>
    fb9c:	4681      	mov	r9, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:782
	f2q0q0 = f2q * pq->q0;
    fb9e:	4649      	mov	r1, r9
    fba0:	1c30      	adds	r0, r6, #0
    fba2:	f7f1 f8f7 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:783
	f2q0q1 = f2q * pq->q1;
    fba6:	686f      	ldr	r7, [r5, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:782
	float f2q2q2, f2q2q3;
	float f2q3q3;

	// calculate products
	f2q = 2.0F * pq->q0;
	f2q0q0 = f2q * pq->q0;
    fba8:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:783
	f2q0q1 = f2q * pq->q1;
    fbaa:	4649      	mov	r1, r9
    fbac:	1c38      	adds	r0, r7, #0
    fbae:	f7f1 f8f1 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:784
	f2q0q2 = f2q * pq->q2;
    fbb2:	68ae      	ldr	r6, [r5, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:783
	float f2q3q3;

	// calculate products
	f2q = 2.0F * pq->q0;
	f2q0q0 = f2q * pq->q0;
	f2q0q1 = f2q * pq->q1;
    fbb4:	9001      	str	r0, [sp, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:784
	f2q0q2 = f2q * pq->q2;
    fbb6:	4649      	mov	r1, r9
    fbb8:	1c30      	adds	r0, r6, #0
    fbba:	f7f1 f8eb 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:785
	f2q0q3 = f2q * pq->q3;
    fbbe:	68ed      	ldr	r5, [r5, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:784

	// calculate products
	f2q = 2.0F * pq->q0;
	f2q0q0 = f2q * pq->q0;
	f2q0q1 = f2q * pq->q1;
	f2q0q2 = f2q * pq->q2;
    fbc0:	9002      	str	r0, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:785
	f2q0q3 = f2q * pq->q3;
    fbc2:	4649      	mov	r1, r9
    fbc4:	1c28      	adds	r0, r5, #0
    fbc6:	f7f1 f8e5 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:786
	f2q = 2.0F * pq->q1;
    fbca:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:785
	// calculate products
	f2q = 2.0F * pq->q0;
	f2q0q0 = f2q * pq->q0;
	f2q0q1 = f2q * pq->q1;
	f2q0q2 = f2q * pq->q2;
	f2q0q3 = f2q * pq->q3;
    fbcc:	9003      	str	r0, [sp, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:786
	f2q = 2.0F * pq->q1;
    fbce:	1c38      	adds	r0, r7, #0
    fbd0:	f7f0 fd90 	bl	6f4 <__aeabi_fadd>
    fbd4:	4681      	mov	r9, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:788
	f2q1q1 = f2q * pq->q1;
	f2q1q2 = f2q * pq->q2;
    fbd6:	4649      	mov	r1, r9
    fbd8:	1c30      	adds	r0, r6, #0
    fbda:	f7f1 f8db 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:789
	f2q1q3 = f2q * pq->q3;
    fbde:	4649      	mov	r1, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:788
	f2q0q1 = f2q * pq->q1;
	f2q0q2 = f2q * pq->q2;
	f2q0q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q1;
	f2q1q1 = f2q * pq->q1;
	f2q1q2 = f2q * pq->q2;
    fbe0:	4683      	mov	fp, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:789
	f2q1q3 = f2q * pq->q3;
    fbe2:	1c28      	adds	r0, r5, #0
    fbe4:	f7f1 f8d6 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:790
	f2q = 2.0F * pq->q2;
    fbe8:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:789
	f2q0q2 = f2q * pq->q2;
	f2q0q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q1;
	f2q1q1 = f2q * pq->q1;
	f2q1q2 = f2q * pq->q2;
	f2q1q3 = f2q * pq->q3;
    fbea:	9004      	str	r0, [sp, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:790
	f2q = 2.0F * pq->q2;
    fbec:	1c30      	adds	r0, r6, #0
    fbee:	f7f0 fd81 	bl	6f4 <__aeabi_fadd>
    fbf2:	9005      	str	r0, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:792
	f2q2q2 = f2q * pq->q2;
	f2q2q3 = f2q * pq->q3;
    fbf4:	9905      	ldr	r1, [sp, #20]
    fbf6:	1c28      	adds	r0, r5, #0
    fbf8:	f7f1 f8cc 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:787
	f2q0q0 = f2q * pq->q0;
	f2q0q1 = f2q * pq->q1;
	f2q0q2 = f2q * pq->q2;
	f2q0q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q1;
	f2q1q1 = f2q * pq->q1;
    fbfc:	4649      	mov	r1, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:792
	f2q1q2 = f2q * pq->q2;
	f2q1q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q2;
	f2q2q2 = f2q * pq->q2;
	f2q2q3 = f2q * pq->q3;
    fbfe:	4682      	mov	sl, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:787
	f2q0q0 = f2q * pq->q0;
	f2q0q1 = f2q * pq->q1;
	f2q0q2 = f2q * pq->q2;
	f2q0q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q1;
	f2q1q1 = f2q * pq->q1;
    fc00:	1c38      	adds	r0, r7, #0
    fc02:	f7f1 f8c7 	bl	d94 <__aeabi_fmul>
    fc06:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:796
	f2q2q2 = f2q * pq->q2;
	f2q2q3 = f2q * pq->q3;
	f2q3q3 = 2.0F * pq->q3 * pq->q3;

	// calculate the rotation matrix assuming the quaternion is normalized
	R[X][X] = f2q0q0 + f2q1q1 - 1.0F;
    fc08:	4640      	mov	r0, r8
    fc0a:	f7f0 fd73 	bl	6f4 <__aeabi_fadd>
    fc0e:	21fe      	movs	r1, #254	; 0xfe
    fc10:	0589      	lsls	r1, r1, #22
    fc12:	f7f1 f9e9 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:797
	R[X][Y] = f2q1q2 + f2q0q3;
    fc16:	9903      	ldr	r1, [sp, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:796
	f2q2q2 = f2q * pq->q2;
	f2q2q3 = f2q * pq->q3;
	f2q3q3 = 2.0F * pq->q3 * pq->q3;

	// calculate the rotation matrix assuming the quaternion is normalized
	R[X][X] = f2q0q0 + f2q1q1 - 1.0F;
    fc18:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:797
	R[X][Y] = f2q1q2 + f2q0q3;
    fc1a:	4658      	mov	r0, fp
    fc1c:	f7f0 fd6a 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:798
	R[X][Z] = f2q1q3 - f2q0q2;
    fc20:	9902      	ldr	r1, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:797
	f2q2q3 = f2q * pq->q3;
	f2q3q3 = 2.0F * pq->q3 * pq->q3;

	// calculate the rotation matrix assuming the quaternion is normalized
	R[X][X] = f2q0q0 + f2q1q1 - 1.0F;
	R[X][Y] = f2q1q2 + f2q0q3;
    fc22:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:798
	R[X][Z] = f2q1q3 - f2q0q2;
    fc24:	9804      	ldr	r0, [sp, #16]
    fc26:	f7f1 f9df 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:799
	R[Y][X] = f2q1q2 - f2q0q3;
    fc2a:	9903      	ldr	r1, [sp, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:798
	f2q3q3 = 2.0F * pq->q3 * pq->q3;

	// calculate the rotation matrix assuming the quaternion is normalized
	R[X][X] = f2q0q0 + f2q1q1 - 1.0F;
	R[X][Y] = f2q1q2 + f2q0q3;
	R[X][Z] = f2q1q3 - f2q0q2;
    fc2c:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:799
	R[Y][X] = f2q1q2 - f2q0q3;
    fc2e:	4658      	mov	r0, fp
    fc30:	f7f1 f9da 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:791
	f2q = 2.0F * pq->q1;
	f2q1q1 = f2q * pq->q1;
	f2q1q2 = f2q * pq->q2;
	f2q1q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q2;
	f2q2q2 = f2q * pq->q2;
    fc34:	9905      	ldr	r1, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:799

	// calculate the rotation matrix assuming the quaternion is normalized
	R[X][X] = f2q0q0 + f2q1q1 - 1.0F;
	R[X][Y] = f2q1q2 + f2q0q3;
	R[X][Z] = f2q1q3 - f2q0q2;
	R[Y][X] = f2q1q2 - f2q0q3;
    fc36:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:791
	f2q = 2.0F * pq->q1;
	f2q1q1 = f2q * pq->q1;
	f2q1q2 = f2q * pq->q2;
	f2q1q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q2;
	f2q2q2 = f2q * pq->q2;
    fc38:	1c30      	adds	r0, r6, #0
    fc3a:	f7f1 f8ab 	bl	d94 <__aeabi_fmul>
    fc3e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:800
	// calculate the rotation matrix assuming the quaternion is normalized
	R[X][X] = f2q0q0 + f2q1q1 - 1.0F;
	R[X][Y] = f2q1q2 + f2q0q3;
	R[X][Z] = f2q1q3 - f2q0q2;
	R[Y][X] = f2q1q2 - f2q0q3;
	R[Y][Y] = f2q0q0 + f2q2q2 - 1.0F;
    fc40:	4640      	mov	r0, r8
    fc42:	f7f0 fd57 	bl	6f4 <__aeabi_fadd>
    fc46:	21fe      	movs	r1, #254	; 0xfe
    fc48:	0589      	lsls	r1, r1, #22
    fc4a:	f7f1 f9cd 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:801
	R[Y][Z] = f2q2q3 + f2q0q1;
    fc4e:	9901      	ldr	r1, [sp, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:800
	// calculate the rotation matrix assuming the quaternion is normalized
	R[X][X] = f2q0q0 + f2q1q1 - 1.0F;
	R[X][Y] = f2q1q2 + f2q0q3;
	R[X][Z] = f2q1q3 - f2q0q2;
	R[Y][X] = f2q1q2 - f2q0q3;
	R[Y][Y] = f2q0q0 + f2q2q2 - 1.0F;
    fc50:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:801
	R[Y][Z] = f2q2q3 + f2q0q1;
    fc52:	4650      	mov	r0, sl
    fc54:	f7f0 fd4e 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:802
	R[Z][X] = f2q1q3 + f2q0q2;
    fc58:	9902      	ldr	r1, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:801
	R[X][X] = f2q0q0 + f2q1q1 - 1.0F;
	R[X][Y] = f2q1q2 + f2q0q3;
	R[X][Z] = f2q1q3 - f2q0q2;
	R[Y][X] = f2q1q2 - f2q0q3;
	R[Y][Y] = f2q0q0 + f2q2q2 - 1.0F;
	R[Y][Z] = f2q2q3 + f2q0q1;
    fc5a:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:802
	R[Z][X] = f2q1q3 + f2q0q2;
    fc5c:	9804      	ldr	r0, [sp, #16]
    fc5e:	f7f0 fd49 	bl	6f4 <__aeabi_fadd>
    fc62:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:803
	R[Z][Y] = f2q2q3 - f2q0q1;
    fc64:	9901      	ldr	r1, [sp, #4]
    fc66:	4650      	mov	r0, sl
    fc68:	f7f1 f9be 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:793
	f2q1q2 = f2q * pq->q2;
	f2q1q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q2;
	f2q2q2 = f2q * pq->q2;
	f2q2q3 = f2q * pq->q3;
	f2q3q3 = 2.0F * pq->q3 * pq->q3;
    fc6c:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:803
	R[X][Z] = f2q1q3 - f2q0q2;
	R[Y][X] = f2q1q2 - f2q0q3;
	R[Y][Y] = f2q0q0 + f2q2q2 - 1.0F;
	R[Y][Z] = f2q2q3 + f2q0q1;
	R[Z][X] = f2q1q3 + f2q0q2;
	R[Z][Y] = f2q2q3 - f2q0q1;
    fc6e:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:793
	f2q1q2 = f2q * pq->q2;
	f2q1q3 = f2q * pq->q3;
	f2q = 2.0F * pq->q2;
	f2q2q2 = f2q * pq->q2;
	f2q2q3 = f2q * pq->q3;
	f2q3q3 = 2.0F * pq->q3 * pq->q3;
    fc70:	1c28      	adds	r0, r5, #0
    fc72:	f7f0 fd3f 	bl	6f4 <__aeabi_fadd>
    fc76:	1c01      	adds	r1, r0, #0
    fc78:	1c28      	adds	r0, r5, #0
    fc7a:	f7f1 f88b 	bl	d94 <__aeabi_fmul>
    fc7e:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:804
	R[Y][X] = f2q1q2 - f2q0q3;
	R[Y][Y] = f2q0q0 + f2q2q2 - 1.0F;
	R[Y][Z] = f2q2q3 + f2q0q1;
	R[Z][X] = f2q1q3 + f2q0q2;
	R[Z][Y] = f2q2q3 - f2q0q1;
	R[Z][Z] = f2q0q0 + f2q3q3 - 1.0F;
    fc80:	4640      	mov	r0, r8
    fc82:	f7f0 fd37 	bl	6f4 <__aeabi_fadd>
    fc86:	21fe      	movs	r1, #254	; 0xfe
    fc88:	0589      	lsls	r1, r1, #22
    fc8a:	f7f1 f9ad 	bl	fe8 <__aeabi_fsub>
    fc8e:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:807

	return;
}
    fc90:	b007      	add	sp, #28
    fc92:	bc3c      	pop	{r2, r3, r4, r5}
    fc94:	4690      	mov	r8, r2
    fc96:	4699      	mov	r9, r3
    fc98:	46a2      	mov	sl, r4
    fc9a:	46ab      	mov	fp, r5
    fc9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fc9e:	46c0      	nop			; (mov r8, r8)

0000fca0 <fRotationVectorDegFromQuaternion>:
fRotationVectorDegFromQuaternion():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:880
	return;
}

// computes rotation vector (deg) from rotation quaternion
void fRotationVectorDegFromQuaternion(struct fquaternion *pq, float rvecdeg[])
{
    fca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:887
	float fetadeg;			// rotation angle (deg)
	float sinhalfeta;		// sin(eta/2)
	float ftmp;				// scratch variable

	// calculate the rotation angle in the range 0 <= eta < 360 deg
	if ((pq->q0 >= 1.0F) || (pq->q0 <= -1.0F))
    fca2:	6806      	ldr	r6, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:880
	return;
}

// computes rotation vector (deg) from rotation quaternion
void fRotationVectorDegFromQuaternion(struct fquaternion *pq, float rvecdeg[])
{
    fca4:	1c0c      	adds	r4, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:887
	float fetadeg;			// rotation angle (deg)
	float sinhalfeta;		// sin(eta/2)
	float ftmp;				// scratch variable

	// calculate the rotation angle in the range 0 <= eta < 360 deg
	if ((pq->q0 >= 1.0F) || (pq->q0 <= -1.0F))
    fca6:	21fe      	movs	r1, #254	; 0xfe
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:880
	return;
}

// computes rotation vector (deg) from rotation quaternion
void fRotationVectorDegFromQuaternion(struct fquaternion *pq, float rvecdeg[])
{
    fca8:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:887
	float fetadeg;			// rotation angle (deg)
	float sinhalfeta;		// sin(eta/2)
	float ftmp;				// scratch variable

	// calculate the rotation angle in the range 0 <= eta < 360 deg
	if ((pq->q0 >= 1.0F) || (pq->q0 <= -1.0F))
    fcaa:	0589      	lsls	r1, r1, #22
    fcac:	1c30      	adds	r0, r6, #0
    fcae:	f7f0 fd17 	bl	6e0 <__aeabi_fcmpge>
    fcb2:	2800      	cmp	r0, #0
    fcb4:	d004      	beq.n	fcc0 <fRotationVectorDegFromQuaternion+0x20>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:914

	// calculate the rotation vector (deg)
	if (sinhalfeta == 0.0F)
	{
		// the rotation angle eta is zero and the axis is irrelevant 
		rvecdeg[X] = rvecdeg[Y] = rvecdeg[Z] = 0.0F;
    fcb6:	2300      	movs	r3, #0
    fcb8:	60a3      	str	r3, [r4, #8]
    fcba:	6063      	str	r3, [r4, #4]
    fcbc:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:926
		rvecdeg[Y] = pq->q2 * ftmp;
		rvecdeg[Z] = pq->q3 * ftmp;
	}

	return;
}
    fcbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:887 (discriminator 1)
	float fetadeg;			// rotation angle (deg)
	float sinhalfeta;		// sin(eta/2)
	float ftmp;				// scratch variable

	// calculate the rotation angle in the range 0 <= eta < 360 deg
	if ((pq->q0 >= 1.0F) || (pq->q0 <= -1.0F))
    fcc0:	1c30      	adds	r0, r6, #0
    fcc2:	4920      	ldr	r1, [pc, #128]	; (fd44 <fRotationVectorDegFromQuaternion+0xa4>)
    fcc4:	f7f0 fcf8 	bl	6b8 <__aeabi_fcmple>
    fcc8:	2800      	cmp	r0, #0
    fcca:	d1f4      	bne.n	fcb6 <fRotationVectorDegFromQuaternion+0x16>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:896
		fetadeg = 0.0F;
	}
	else
	{
		// general case returning 0 < eta < 360 deg 
		fetarad = 2.0F * acosf(pq->q0); 
    fccc:	1c30      	adds	r0, r6, #0
    fcce:	f003 f9c1 	bl	13054 <acosf>
    fcd2:	1c01      	adds	r1, r0, #0
    fcd4:	f7f0 fd0e 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:897
		fetadeg = fetarad * FRADTODEG;
    fcd8:	491b      	ldr	r1, [pc, #108]	; (fd48 <fRotationVectorDegFromQuaternion+0xa8>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:896
		fetadeg = 0.0F;
	}
	else
	{
		// general case returning 0 < eta < 360 deg 
		fetarad = 2.0F * acosf(pq->q0); 
    fcda:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:897
		fetadeg = fetarad * FRADTODEG;
    fcdc:	f7f1 f85a 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:901
	}

	// map the rotation angle onto the range -180 deg <= eta < 180 deg 
	if (fetadeg >= 180.0F)
    fce0:	491a      	ldr	r1, [pc, #104]	; (fd4c <fRotationVectorDegFromQuaternion+0xac>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:897
	}
	else
	{
		// general case returning 0 < eta < 360 deg 
		fetarad = 2.0F * acosf(pq->q0); 
		fetadeg = fetarad * FRADTODEG;
    fce2:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:901
	}

	// map the rotation angle onto the range -180 deg <= eta < 180 deg 
	if (fetadeg >= 180.0F)
    fce4:	f7f0 fcfc 	bl	6e0 <__aeabi_fcmpge>
    fce8:	2800      	cmp	r0, #0
    fcea:	d028      	beq.n	fd3e <fRotationVectorDegFromQuaternion+0x9e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:903
	{
		fetadeg -= 360.0F;
    fcec:	1c30      	adds	r0, r6, #0
    fcee:	4918      	ldr	r1, [pc, #96]	; (fd50 <fRotationVectorDegFromQuaternion+0xb0>)
    fcf0:	f7f1 f97a 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:904
		fetarad = fetadeg * FDEGTORAD;
    fcf4:	4917      	ldr	r1, [pc, #92]	; (fd54 <fRotationVectorDegFromQuaternion+0xb4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:903
	}

	// map the rotation angle onto the range -180 deg <= eta < 180 deg 
	if (fetadeg >= 180.0F)
	{
		fetadeg -= 360.0F;
    fcf6:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:904
		fetarad = fetadeg * FDEGTORAD;
    fcf8:	f7f1 f84c 	bl	d94 <__aeabi_fmul>
    fcfc:	21fc      	movs	r1, #252	; 0xfc
    fcfe:	0589      	lsls	r1, r1, #22
    fd00:	f7f1 f848 	bl	d94 <__aeabi_fmul>
    fd04:	f003 f966 	bl	12fd4 <sinf>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:911

	// calculate sin(eta/2) which will be in the range -1 to +1
	sinhalfeta = (float)sinf(0.5F * fetarad);

	// calculate the rotation vector (deg)
	if (sinhalfeta == 0.0F)
    fd08:	2100      	movs	r1, #0
    fd0a:	1c07      	adds	r7, r0, #0
    fd0c:	f7f0 fcc4 	bl	698 <__aeabi_fcmpeq>
    fd10:	2800      	cmp	r0, #0
    fd12:	d1d0      	bne.n	fcb6 <fRotationVectorDegFromQuaternion+0x16>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:919
		rvecdeg[X] = rvecdeg[Y] = rvecdeg[Z] = 0.0F;
	}
	else
	{
		// general case with non-zero rotation angle
		ftmp = fetadeg / sinhalfeta;
    fd14:	1c30      	adds	r0, r6, #0
    fd16:	1c39      	adds	r1, r7, #0
    fd18:	f7f0 fe58 	bl	9cc <__aeabi_fdiv>
    fd1c:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:920
		rvecdeg[X] = pq->q1 * ftmp;
    fd1e:	1c31      	adds	r1, r6, #0
    fd20:	6868      	ldr	r0, [r5, #4]
    fd22:	f7f1 f837 	bl	d94 <__aeabi_fmul>
    fd26:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:921
		rvecdeg[Y] = pq->q2 * ftmp;
    fd28:	68a8      	ldr	r0, [r5, #8]
    fd2a:	1c31      	adds	r1, r6, #0
    fd2c:	f7f1 f832 	bl	d94 <__aeabi_fmul>
    fd30:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:922
		rvecdeg[Z] = pq->q3 * ftmp;
    fd32:	68e8      	ldr	r0, [r5, #12]
    fd34:	1c31      	adds	r1, r6, #0
    fd36:	f7f1 f82d 	bl	d94 <__aeabi_fmul>
    fd3a:	60a0      	str	r0, [r4, #8]
    fd3c:	e7bf      	b.n	fcbe <fRotationVectorDegFromQuaternion+0x1e>
    fd3e:	1c38      	adds	r0, r7, #0
    fd40:	e7dc      	b.n	fcfc <fRotationVectorDegFromQuaternion+0x5c>
    fd42:	46c0      	nop			; (mov r8, r8)
    fd44:	bf800000 	.word	0xbf800000
    fd48:	42652ee1 	.word	0x42652ee1
    fd4c:	43340000 	.word	0x43340000
    fd50:	43b40000 	.word	0x43b40000
    fd54:	3c8efa35 	.word	0x3c8efa35

0000fd58 <fLPFOrientationQuaternion>:
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:931
}

// function low pass filters an orientation quaternion and computes virtual gyro rotation rate
void fLPFOrientationQuaternion(struct fquaternion *pq, struct fquaternion *pLPq, float flpf, float fdeltat,
		float fOmega[], int32 loopcounter)
{
    fd58:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd5a:	465f      	mov	r7, fp
    fd5c:	4656      	mov	r6, sl
    fd5e:	464d      	mov	r5, r9
    fd60:	4644      	mov	r4, r8
    fd62:	b4f0      	push	{r4, r5, r6, r7}
    fd64:	b089      	sub	sp, #36	; 0x24
    fd66:	1c0f      	adds	r7, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:938
	struct fquaternion fdeltaq;			// delta rotation quaternion
	float rvecdeg[3];					// rotation vector (deg)
	float ftmp;							// scratch variable

	// initialize delay line on first pass: LPq[n]=q[n]
	if (loopcounter == 0)
    fd68:	9913      	ldr	r1, [sp, #76]	; 0x4c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:931
}

// function low pass filters an orientation quaternion and computes virtual gyro rotation rate
void fLPFOrientationQuaternion(struct fquaternion *pq, struct fquaternion *pLPq, float flpf, float fdeltat,
		float fOmega[], int32 loopcounter)
{
    fd6a:	9206      	str	r2, [sp, #24]
    fd6c:	9307      	str	r3, [sp, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:938
	struct fquaternion fdeltaq;			// delta rotation quaternion
	float rvecdeg[3];					// rotation vector (deg)
	float ftmp;							// scratch variable

	// initialize delay line on first pass: LPq[n]=q[n]
	if (loopcounter == 0)
    fd6e:	2900      	cmp	r1, #0
    fd70:	d105      	bne.n	fd7e <fLPFOrientationQuaternion+0x26>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:940
	{
		*pLPq = *pq;
    fd72:	1c3b      	adds	r3, r7, #0
    fd74:	1c02      	adds	r2, r0, #0
    fd76:	ca32      	ldmia	r2!, {r1, r4, r5}
    fd78:	c332      	stmia	r3!, {r1, r4, r5}
    fd7a:	6812      	ldr	r2, [r2, #0]
    fd7c:	601a      	str	r2, [r3, #0]
qconjgAxB():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1044
// function compute the quaternion product conjg(qA) * qB
struct fquaternion qconjgAxB(const struct fquaternion *pqA, const struct fquaternion *pqB)
{
	struct fquaternion qProd;

	qProd.q0 = pqA->q0 * pqB->q0 + pqA->q1 * pqB->q1 + pqA->q2 * pqB->q2 + pqA->q3 * pqB->q3;
    fd7e:	6844      	ldr	r4, [r0, #4]
    fd80:	6803      	ldr	r3, [r0, #0]
    fd82:	683a      	ldr	r2, [r7, #0]
    fd84:	9401      	str	r4, [sp, #4]
    fd86:	68f9      	ldr	r1, [r7, #12]
    fd88:	68bc      	ldr	r4, [r7, #8]
    fd8a:	68c6      	ldr	r6, [r0, #12]
    fd8c:	468a      	mov	sl, r1
    fd8e:	9402      	str	r4, [sp, #8]
    fd90:	1c19      	adds	r1, r3, #0
    fd92:	6884      	ldr	r4, [r0, #8]
    fd94:	1c10      	adds	r0, r2, #0
    fd96:	4690      	mov	r8, r2
    fd98:	469b      	mov	fp, r3
    fd9a:	f7f0 fffb 	bl	d94 <__aeabi_fmul>
    fd9e:	687d      	ldr	r5, [r7, #4]
    fda0:	4681      	mov	r9, r0
    fda2:	9901      	ldr	r1, [sp, #4]
    fda4:	1c28      	adds	r0, r5, #0
    fda6:	f7f0 fff5 	bl	d94 <__aeabi_fmul>
    fdaa:	1c01      	adds	r1, r0, #0
    fdac:	4648      	mov	r0, r9
    fdae:	f7f0 fca1 	bl	6f4 <__aeabi_fadd>
    fdb2:	1c21      	adds	r1, r4, #0
    fdb4:	4681      	mov	r9, r0
    fdb6:	9802      	ldr	r0, [sp, #8]
    fdb8:	f7f0 ffec 	bl	d94 <__aeabi_fmul>
    fdbc:	1c01      	adds	r1, r0, #0
    fdbe:	4648      	mov	r0, r9
    fdc0:	f7f0 fc98 	bl	6f4 <__aeabi_fadd>
    fdc4:	1c31      	adds	r1, r6, #0
    fdc6:	4681      	mov	r9, r0
    fdc8:	4650      	mov	r0, sl
    fdca:	f7f0 ffe3 	bl	d94 <__aeabi_fmul>
    fdce:	1c01      	adds	r1, r0, #0
    fdd0:	4648      	mov	r0, r9
    fdd2:	f7f0 fc8f 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1045
	qProd.q1 = pqA->q0 * pqB->q1 - pqA->q1 * pqB->q0 - pqA->q2 * pqB->q3 + pqA->q3 * pqB->q2;
    fdd6:	9901      	ldr	r1, [sp, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1044
// function compute the quaternion product conjg(qA) * qB
struct fquaternion qconjgAxB(const struct fquaternion *pqA, const struct fquaternion *pqB)
{
	struct fquaternion qProd;

	qProd.q0 = pqA->q0 * pqB->q0 + pqA->q1 * pqB->q1 + pqA->q2 * pqB->q2 + pqA->q3 * pqB->q3;
    fdd8:	9004      	str	r0, [sp, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1045
	qProd.q1 = pqA->q0 * pqB->q1 - pqA->q1 * pqB->q0 - pqA->q2 * pqB->q3 + pqA->q3 * pqB->q2;
    fdda:	4640      	mov	r0, r8
    fddc:	f7f0 ffda 	bl	d94 <__aeabi_fmul>
    fde0:	1c29      	adds	r1, r5, #0
    fde2:	4681      	mov	r9, r0
    fde4:	4658      	mov	r0, fp
    fde6:	f7f0 ffd5 	bl	d94 <__aeabi_fmul>
    fdea:	1c01      	adds	r1, r0, #0
    fdec:	4648      	mov	r0, r9
    fdee:	f7f1 f8fb 	bl	fe8 <__aeabi_fsub>
    fdf2:	1c31      	adds	r1, r6, #0
    fdf4:	4681      	mov	r9, r0
    fdf6:	9802      	ldr	r0, [sp, #8]
    fdf8:	f7f0 ffcc 	bl	d94 <__aeabi_fmul>
    fdfc:	1c01      	adds	r1, r0, #0
    fdfe:	4648      	mov	r0, r9
    fe00:	f7f1 f8f2 	bl	fe8 <__aeabi_fsub>
    fe04:	4651      	mov	r1, sl
    fe06:	4681      	mov	r9, r0
    fe08:	1c20      	adds	r0, r4, #0
    fe0a:	f7f0 ffc3 	bl	d94 <__aeabi_fmul>
    fe0e:	1c01      	adds	r1, r0, #0
    fe10:	4648      	mov	r0, r9
    fe12:	f7f0 fc6f 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1046
	qProd.q2 = pqA->q0 * pqB->q2 + pqA->q1 * pqB->q3 - pqA->q2 * pqB->q0 - pqA->q3 * pqB->q1;
    fe16:	1c21      	adds	r1, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1045
struct fquaternion qconjgAxB(const struct fquaternion *pqA, const struct fquaternion *pqB)
{
	struct fquaternion qProd;

	qProd.q0 = pqA->q0 * pqB->q0 + pqA->q1 * pqB->q1 + pqA->q2 * pqB->q2 + pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 - pqA->q1 * pqB->q0 - pqA->q2 * pqB->q3 + pqA->q3 * pqB->q2;
    fe18:	9005      	str	r0, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1046
	qProd.q2 = pqA->q0 * pqB->q2 + pqA->q1 * pqB->q3 - pqA->q2 * pqB->q0 - pqA->q3 * pqB->q1;
    fe1a:	4640      	mov	r0, r8
    fe1c:	f7f0 ffba 	bl	d94 <__aeabi_fmul>
    fe20:	1c31      	adds	r1, r6, #0
    fe22:	4681      	mov	r9, r0
    fe24:	1c28      	adds	r0, r5, #0
    fe26:	f7f0 ffb5 	bl	d94 <__aeabi_fmul>
    fe2a:	1c01      	adds	r1, r0, #0
    fe2c:	4648      	mov	r0, r9
    fe2e:	f7f0 fc61 	bl	6f4 <__aeabi_fadd>
    fe32:	9902      	ldr	r1, [sp, #8]
    fe34:	4681      	mov	r9, r0
    fe36:	4658      	mov	r0, fp
    fe38:	f7f0 ffac 	bl	d94 <__aeabi_fmul>
    fe3c:	1c01      	adds	r1, r0, #0
    fe3e:	4648      	mov	r0, r9
    fe40:	f7f1 f8d2 	bl	fe8 <__aeabi_fsub>
    fe44:	4651      	mov	r1, sl
    fe46:	4681      	mov	r9, r0
    fe48:	9801      	ldr	r0, [sp, #4]
    fe4a:	f7f0 ffa3 	bl	d94 <__aeabi_fmul>
    fe4e:	1c01      	adds	r1, r0, #0
    fe50:	4648      	mov	r0, r9
    fe52:	f7f1 f8c9 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1047
	qProd.q3 = pqA->q0 * pqB->q3 - pqA->q1 * pqB->q2 + pqA->q2 * pqB->q1 - pqA->q3 * pqB->q0;
    fe56:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1046
{
	struct fquaternion qProd;

	qProd.q0 = pqA->q0 * pqB->q0 + pqA->q1 * pqB->q1 + pqA->q2 * pqB->q2 + pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 - pqA->q1 * pqB->q0 - pqA->q2 * pqB->q3 + pqA->q3 * pqB->q2;
	qProd.q2 = pqA->q0 * pqB->q2 + pqA->q1 * pqB->q3 - pqA->q2 * pqB->q0 - pqA->q3 * pqB->q1;
    fe58:	4681      	mov	r9, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1047
	qProd.q3 = pqA->q0 * pqB->q3 - pqA->q1 * pqB->q2 + pqA->q2 * pqB->q1 - pqA->q3 * pqB->q0;
    fe5a:	4640      	mov	r0, r8
    fe5c:	f7f0 ff9a 	bl	d94 <__aeabi_fmul>
    fe60:	1c21      	adds	r1, r4, #0
    fe62:	1c06      	adds	r6, r0, #0
    fe64:	1c28      	adds	r0, r5, #0
    fe66:	f7f0 ff95 	bl	d94 <__aeabi_fmul>
    fe6a:	1c01      	adds	r1, r0, #0
    fe6c:	1c30      	adds	r0, r6, #0
    fe6e:	f7f1 f8bb 	bl	fe8 <__aeabi_fsub>
    fe72:	9902      	ldr	r1, [sp, #8]
    fe74:	1c04      	adds	r4, r0, #0
    fe76:	9801      	ldr	r0, [sp, #4]
    fe78:	f7f0 ff8c 	bl	d94 <__aeabi_fmul>
    fe7c:	1c01      	adds	r1, r0, #0
    fe7e:	1c20      	adds	r0, r4, #0
    fe80:	f7f0 fc38 	bl	6f4 <__aeabi_fadd>
    fe84:	4651      	mov	r1, sl
    fe86:	1c04      	adds	r4, r0, #0
    fe88:	4658      	mov	r0, fp
    fe8a:	f7f0 ff83 	bl	d94 <__aeabi_fmul>
    fe8e:	1c01      	adds	r1, r0, #0
    fe90:	1c20      	adds	r0, r4, #0
    fe92:	f7f1 f8a9 	bl	fe8 <__aeabi_fsub>
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:945
		*pLPq = *pq;
	}

	// set fdeltaqn to the delta rotation quaternion conjg(fLPq[n-1) . fqn
	fdeltaq = qconjgAxB(pLPq, pq);
	if (fdeltaq.q0 < 0.0F)
    fe96:	2100      	movs	r1, #0
qconjgAxB():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1047
	struct fquaternion qProd;

	qProd.q0 = pqA->q0 * pqB->q0 + pqA->q1 * pqB->q1 + pqA->q2 * pqB->q2 + pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 - pqA->q1 * pqB->q0 - pqA->q2 * pqB->q3 + pqA->q3 * pqB->q2;
	qProd.q2 = pqA->q0 * pqB->q2 + pqA->q1 * pqB->q3 - pqA->q2 * pqB->q0 - pqA->q3 * pqB->q1;
	qProd.q3 = pqA->q0 * pqB->q3 - pqA->q1 * pqB->q2 + pqA->q2 * pqB->q1 - pqA->q3 * pqB->q0;
    fe98:	4680      	mov	r8, r0
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:945
		*pLPq = *pq;
	}

	// set fdeltaqn to the delta rotation quaternion conjg(fLPq[n-1) . fqn
	fdeltaq = qconjgAxB(pLPq, pq);
	if (fdeltaq.q0 < 0.0F)
    fe9a:	9804      	ldr	r0, [sp, #16]
    fe9c:	f7f0 fc02 	bl	6a4 <__aeabi_fcmplt>
    fea0:	2800      	cmp	r0, #0
    fea2:	d000      	beq.n	fea6 <FP_CONTEXT_CLEAR_MASK+0xa7>
    fea4:	e17b      	b.n	1019e <FP_CONTEXT_CLEAR_MASK+0x39f>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:955
		fdeltaq.q3 = -fdeltaq.q3;
	}

	// set ftmp to a scaled lpf value which equals flpf in the limit of small rotations (q0=1)
	// but which rises as the delta rotation angle increases (q0 tends to zero)
	ftmp = flpf + 0.75F * (1.0F - fdeltaq.q0);
    fea6:	20fe      	movs	r0, #254	; 0xfe
    fea8:	9904      	ldr	r1, [sp, #16]
    feaa:	0580      	lsls	r0, r0, #22
    feac:	f7f1 f89c 	bl	fe8 <__aeabi_fsub>
    feb0:	21fd      	movs	r1, #253	; 0xfd
    feb2:	0589      	lsls	r1, r1, #22
    feb4:	f7f0 ff6e 	bl	d94 <__aeabi_fmul>
    feb8:	9906      	ldr	r1, [sp, #24]
    feba:	f7f0 fc1b 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:956
	if (ftmp > 1.0F)
    febe:	21fe      	movs	r1, #254	; 0xfe
    fec0:	0589      	lsls	r1, r1, #22
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:955
		fdeltaq.q3 = -fdeltaq.q3;
	}

	// set ftmp to a scaled lpf value which equals flpf in the limit of small rotations (q0=1)
	// but which rises as the delta rotation angle increases (q0 tends to zero)
	ftmp = flpf + 0.75F * (1.0F - fdeltaq.q0);
    fec2:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:956
	if (ftmp > 1.0F)
    fec4:	f7f0 fc02 	bl	6cc <__aeabi_fcmpgt>
    fec8:	2800      	cmp	r0, #0
    feca:	d001      	beq.n	fed0 <FP_CONTEXT_CLEAR_MASK+0xd1>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:958
	{
		ftmp = 1.0F;
    fecc:	26fe      	movs	r6, #254	; 0xfe
    fece:	05b6      	lsls	r6, r6, #22
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:962
	}

	// scale the delta rotation by the corrected lpf value
	fdeltaq.q1 *= ftmp;
    fed0:	1c30      	adds	r0, r6, #0
    fed2:	9905      	ldr	r1, [sp, #20]
    fed4:	f7f0 ff5e 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:963
	fdeltaq.q2 *= ftmp;
    fed8:	4649      	mov	r1, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:962
	{
		ftmp = 1.0F;
	}

	// scale the delta rotation by the corrected lpf value
	fdeltaq.q1 *= ftmp;
    feda:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:963
	fdeltaq.q2 *= ftmp;
    fedc:	1c30      	adds	r0, r6, #0
    fede:	f7f0 ff59 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:964
	fdeltaq.q3 *= ftmp;
    fee2:	4641      	mov	r1, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:963
		ftmp = 1.0F;
	}

	// scale the delta rotation by the corrected lpf value
	fdeltaq.q1 *= ftmp;
	fdeltaq.q2 *= ftmp;
    fee4:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:964
	fdeltaq.q3 *= ftmp;
    fee6:	1c30      	adds	r0, r6, #0
    fee8:	f7f0 ff54 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:967

	// compute the scalar component q0
	ftmp = fdeltaq.q1 * fdeltaq.q1 + fdeltaq.q2 * fdeltaq.q2 + fdeltaq.q3 * fdeltaq.q3;
    feec:	1c21      	adds	r1, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:964
	}

	// scale the delta rotation by the corrected lpf value
	fdeltaq.q1 *= ftmp;
	fdeltaq.q2 *= ftmp;
	fdeltaq.q3 *= ftmp;
    feee:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:967

	// compute the scalar component q0
	ftmp = fdeltaq.q1 * fdeltaq.q1 + fdeltaq.q2 * fdeltaq.q2 + fdeltaq.q3 * fdeltaq.q3;
    fef0:	1c20      	adds	r0, r4, #0
    fef2:	f7f0 ff4f 	bl	d94 <__aeabi_fmul>
    fef6:	1c29      	adds	r1, r5, #0
    fef8:	4680      	mov	r8, r0
    fefa:	1c28      	adds	r0, r5, #0
    fefc:	f7f0 ff4a 	bl	d94 <__aeabi_fmul>
    ff00:	1c01      	adds	r1, r0, #0
    ff02:	4640      	mov	r0, r8
    ff04:	f7f0 fbf6 	bl	6f4 <__aeabi_fadd>
    ff08:	1c31      	adds	r1, r6, #0
    ff0a:	4680      	mov	r8, r0
    ff0c:	1c30      	adds	r0, r6, #0
    ff0e:	f7f0 ff41 	bl	d94 <__aeabi_fmul>
    ff12:	1c01      	adds	r1, r0, #0
    ff14:	4640      	mov	r0, r8
    ff16:	f7f0 fbed 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:968
	if (ftmp <= 1.0F)
    ff1a:	21fe      	movs	r1, #254	; 0xfe
    ff1c:	0589      	lsls	r1, r1, #22
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:967
	fdeltaq.q1 *= ftmp;
	fdeltaq.q2 *= ftmp;
	fdeltaq.q3 *= ftmp;

	// compute the scalar component q0
	ftmp = fdeltaq.q1 * fdeltaq.q1 + fdeltaq.q2 * fdeltaq.q2 + fdeltaq.q3 * fdeltaq.q3;
    ff1e:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:968
	if (ftmp <= 1.0F)
    ff20:	f7f0 fbca 	bl	6b8 <__aeabi_fcmple>
    ff24:	2800      	cmp	r0, #0
    ff26:	d000      	beq.n	ff2a <FP_CONTEXT_CLEAR_MASK+0x12b>
    ff28:	e14d      	b.n	101c6 <FP_CONTEXT_CLEAR_MASK+0x3c7>
fRotationVectorDegFromQuaternion():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:897
	}
	else
	{
		// general case returning 0 < eta < 360 deg 
		fetarad = 2.0F * acosf(pq->q0); 
		fetadeg = fetarad * FRADTODEG;
    ff2a:	49bf      	ldr	r1, [pc, #764]	; (10228 <FP_CONTEXT_CLEAR_MASK+0x429>)
    ff2c:	48bf      	ldr	r0, [pc, #764]	; (1022c <FP_CONTEXT_CLEAR_MASK+0x42d>)
    ff2e:	f7f0 ff31 	bl	d94 <__aeabi_fmul>
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:976
		fdeltaq.q0 = sqrtf(1.0F - ftmp);
	}
	else
	{
		// rounding errors present so simply set scalar component to 0
		fdeltaq.q0 = 0.0F;
    ff32:	2100      	movs	r1, #0
fRotationVectorDegFromQuaternion():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:897
	}
	else
	{
		// general case returning 0 < eta < 360 deg 
		fetarad = 2.0F * acosf(pq->q0); 
		fetadeg = fetarad * FRADTODEG;
    ff34:	4680      	mov	r8, r0
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:976
		fdeltaq.q0 = sqrtf(1.0F - ftmp);
	}
	else
	{
		// rounding errors present so simply set scalar component to 0
		fdeltaq.q0 = 0.0F;
    ff36:	9101      	str	r1, [sp, #4]
fRotationVectorDegFromQuaternion():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:903
	}

	// map the rotation angle onto the range -180 deg <= eta < 180 deg 
	if (fetadeg >= 180.0F)
	{
		fetadeg -= 360.0F;
    ff38:	4640      	mov	r0, r8
    ff3a:	49bd      	ldr	r1, [pc, #756]	; (10230 <FP_CONTEXT_CLEAR_MASK+0x431>)
    ff3c:	f7f1 f854 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:904
		fetarad = fetadeg * FDEGTORAD;
    ff40:	49bc      	ldr	r1, [pc, #752]	; (10234 <FP_CONTEXT_CLEAR_MASK+0x435>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:903
	}

	// map the rotation angle onto the range -180 deg <= eta < 180 deg 
	if (fetadeg >= 180.0F)
	{
		fetadeg -= 360.0F;
    ff42:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:904
		fetarad = fetadeg * FDEGTORAD;
    ff44:	f7f0 ff26 	bl	d94 <__aeabi_fmul>
    ff48:	21fc      	movs	r1, #252	; 0xfc
    ff4a:	0589      	lsls	r1, r1, #22
    ff4c:	f7f0 ff22 	bl	d94 <__aeabi_fmul>
    ff50:	f003 f840 	bl	12fd4 <sinf>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:911

	// calculate sin(eta/2) which will be in the range -1 to +1
	sinhalfeta = (float)sinf(0.5F * fetarad);

	// calculate the rotation vector (deg)
	if (sinhalfeta == 0.0F)
    ff54:	2100      	movs	r1, #0
    ff56:	4681      	mov	r9, r0
    ff58:	f7f0 fb9e 	bl	698 <__aeabi_fcmpeq>
    ff5c:	2800      	cmp	r0, #0
    ff5e:	d000      	beq.n	ff62 <FP_CONTEXT_CLEAR_MASK+0x163>
    ff60:	e12c      	b.n	101bc <FP_CONTEXT_CLEAR_MASK+0x3bd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:919
		rvecdeg[X] = rvecdeg[Y] = rvecdeg[Z] = 0.0F;
	}
	else
	{
		// general case with non-zero rotation angle
		ftmp = fetadeg / sinhalfeta;
    ff62:	4649      	mov	r1, r9
    ff64:	4640      	mov	r0, r8
    ff66:	f7f0 fd31 	bl	9cc <__aeabi_fdiv>
    ff6a:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:920
		rvecdeg[X] = pq->q1 * ftmp;
    ff6c:	4641      	mov	r1, r8
    ff6e:	1c20      	adds	r0, r4, #0
    ff70:	f7f0 ff10 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:921
		rvecdeg[Y] = pq->q2 * ftmp;
    ff74:	4641      	mov	r1, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:920
	}
	else
	{
		// general case with non-zero rotation angle
		ftmp = fetadeg / sinhalfeta;
		rvecdeg[X] = pq->q1 * ftmp;
    ff76:	4683      	mov	fp, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:921
		rvecdeg[Y] = pq->q2 * ftmp;
    ff78:	1c28      	adds	r0, r5, #0
    ff7a:	f7f0 ff0b 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:922
		rvecdeg[Z] = pq->q3 * ftmp;
    ff7e:	4641      	mov	r1, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:921
	else
	{
		// general case with non-zero rotation angle
		ftmp = fetadeg / sinhalfeta;
		rvecdeg[X] = pq->q1 * ftmp;
		rvecdeg[Y] = pq->q2 * ftmp;
    ff80:	4682      	mov	sl, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:922
		rvecdeg[Z] = pq->q3 * ftmp;
    ff82:	1c30      	adds	r0, r6, #0
    ff84:	f7f0 ff06 	bl	d94 <__aeabi_fmul>
    ff88:	4681      	mov	r9, r0
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:981
		fdeltaq.q0 = 0.0F;
	}

	// calculate the delta rotation vector from fdeltaqn and the virtual gyro angular velocity (deg/s)
	fRotationVectorDegFromQuaternion(&fdeltaq, rvecdeg);
	ftmp = 1.0F / fdeltat;
    ff8a:	20fe      	movs	r0, #254	; 0xfe
    ff8c:	9907      	ldr	r1, [sp, #28]
    ff8e:	0580      	lsls	r0, r0, #22
    ff90:	f7f0 fd1c 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:982
	fOmega[X] = rvecdeg[X] * ftmp;
    ff94:	4659      	mov	r1, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:981
		fdeltaq.q0 = 0.0F;
	}

	// calculate the delta rotation vector from fdeltaqn and the virtual gyro angular velocity (deg/s)
	fRotationVectorDegFromQuaternion(&fdeltaq, rvecdeg);
	ftmp = 1.0F / fdeltat;
    ff96:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:982
	fOmega[X] = rvecdeg[X] * ftmp;
    ff98:	f7f0 fefc 	bl	d94 <__aeabi_fmul>
    ff9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:983
	fOmega[Y] = rvecdeg[Y] * ftmp;
    ff9e:	4651      	mov	r1, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:982
	}

	// calculate the delta rotation vector from fdeltaqn and the virtual gyro angular velocity (deg/s)
	fRotationVectorDegFromQuaternion(&fdeltaq, rvecdeg);
	ftmp = 1.0F / fdeltat;
	fOmega[X] = rvecdeg[X] * ftmp;
    ffa0:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:983
	fOmega[Y] = rvecdeg[Y] * ftmp;
    ffa2:	4640      	mov	r0, r8
    ffa4:	f7f0 fef6 	bl	d94 <__aeabi_fmul>
    ffa8:	9912      	ldr	r1, [sp, #72]	; 0x48
    ffaa:	6048      	str	r0, [r1, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:984
	fOmega[Z] = rvecdeg[Z] * ftmp;
    ffac:	4641      	mov	r1, r8
    ffae:	4648      	mov	r0, r9
    ffb0:	f7f0 fef0 	bl	d94 <__aeabi_fmul>
    ffb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ffb6:	6090      	str	r0, [r2, #8]
qAeqAxB():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1028
void qAeqAxB(struct fquaternion *pqA, const struct fquaternion *pqB)
{
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
    ffb8:	683b      	ldr	r3, [r7, #0]
    ffba:	6879      	ldr	r1, [r7, #4]
    ffbc:	68ba      	ldr	r2, [r7, #8]
    ffbe:	4699      	mov	r9, r3
    ffc0:	68fb      	ldr	r3, [r7, #12]
    ffc2:	4688      	mov	r8, r1
    ffc4:	4648      	mov	r0, r9
    ffc6:	9901      	ldr	r1, [sp, #4]
    ffc8:	469b      	mov	fp, r3
    ffca:	9202      	str	r2, [sp, #8]
    ffcc:	f7f0 fee2 	bl	d94 <__aeabi_fmul>
    ffd0:	4641      	mov	r1, r8
    ffd2:	4682      	mov	sl, r0
    ffd4:	1c20      	adds	r0, r4, #0
    ffd6:	f7f0 fedd 	bl	d94 <__aeabi_fmul>
    ffda:	1c01      	adds	r1, r0, #0
    ffdc:	4650      	mov	r0, sl
    ffde:	f7f1 f803 	bl	fe8 <__aeabi_fsub>
    ffe2:	9902      	ldr	r1, [sp, #8]
    ffe4:	4682      	mov	sl, r0
    ffe6:	1c28      	adds	r0, r5, #0
    ffe8:	f7f0 fed4 	bl	d94 <__aeabi_fmul>
    ffec:	1c01      	adds	r1, r0, #0
    ffee:	4650      	mov	r0, sl
    fff0:	f7f0 fffa 	bl	fe8 <__aeabi_fsub>
    fff4:	4659      	mov	r1, fp
    fff6:	4682      	mov	sl, r0
    fff8:	1c30      	adds	r0, r6, #0
    fffa:	f7f0 fecb 	bl	d94 <__aeabi_fmul>
    fffe:	1c01      	adds	r1, r0, #0
   10000:	4650      	mov	r0, sl
   10002:	f7f0 fff1 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1029
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
   10006:	4649      	mov	r1, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1028
void qAeqAxB(struct fquaternion *pqA, const struct fquaternion *pqB)
{
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
   10008:	9003      	str	r0, [sp, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1029
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
   1000a:	1c20      	adds	r0, r4, #0
   1000c:	f7f0 fec2 	bl	d94 <__aeabi_fmul>
   10010:	9901      	ldr	r1, [sp, #4]
   10012:	4682      	mov	sl, r0
   10014:	4640      	mov	r0, r8
   10016:	f7f0 febd 	bl	d94 <__aeabi_fmul>
   1001a:	1c01      	adds	r1, r0, #0
   1001c:	4650      	mov	r0, sl
   1001e:	f7f0 fb69 	bl	6f4 <__aeabi_fadd>
   10022:	9902      	ldr	r1, [sp, #8]
   10024:	4682      	mov	sl, r0
   10026:	1c30      	adds	r0, r6, #0
   10028:	f7f0 feb4 	bl	d94 <__aeabi_fmul>
   1002c:	1c01      	adds	r1, r0, #0
   1002e:	4650      	mov	r0, sl
   10030:	f7f0 fb60 	bl	6f4 <__aeabi_fadd>
   10034:	4659      	mov	r1, fp
   10036:	4682      	mov	sl, r0
   10038:	1c28      	adds	r0, r5, #0
   1003a:	f7f0 feab 	bl	d94 <__aeabi_fmul>
   1003e:	1c01      	adds	r1, r0, #0
   10040:	4650      	mov	r0, sl
   10042:	f7f0 ffd1 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1030
	qProd.q2 = pqA->q0 * pqB->q2 - pqA->q1 * pqB->q3 + pqA->q2 * pqB->q0 + pqA->q3 * pqB->q1;
   10046:	4649      	mov	r1, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1029
{
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
   10048:	9004      	str	r0, [sp, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1030
	qProd.q2 = pqA->q0 * pqB->q2 - pqA->q1 * pqB->q3 + pqA->q2 * pqB->q0 + pqA->q3 * pqB->q1;
   1004a:	1c28      	adds	r0, r5, #0
   1004c:	f7f0 fea2 	bl	d94 <__aeabi_fmul>
   10050:	4641      	mov	r1, r8
   10052:	4682      	mov	sl, r0
   10054:	1c30      	adds	r0, r6, #0
   10056:	f7f0 fe9d 	bl	d94 <__aeabi_fmul>
   1005a:	1c01      	adds	r1, r0, #0
   1005c:	4650      	mov	r0, sl
   1005e:	f7f0 ffc3 	bl	fe8 <__aeabi_fsub>
   10062:	9901      	ldr	r1, [sp, #4]
   10064:	4682      	mov	sl, r0
   10066:	9802      	ldr	r0, [sp, #8]
   10068:	f7f0 fe94 	bl	d94 <__aeabi_fmul>
   1006c:	1c01      	adds	r1, r0, #0
   1006e:	4650      	mov	r0, sl
   10070:	f7f0 fb40 	bl	6f4 <__aeabi_fadd>
   10074:	4659      	mov	r1, fp
   10076:	4682      	mov	sl, r0
   10078:	1c20      	adds	r0, r4, #0
   1007a:	f7f0 fe8b 	bl	d94 <__aeabi_fmul>
   1007e:	1c01      	adds	r1, r0, #0
   10080:	4650      	mov	r0, sl
   10082:	f7f0 fb37 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1031
	qProd.q3 = pqA->q0 * pqB->q3 + pqA->q1 * pqB->q2 - pqA->q2 * pqB->q1 + pqA->q3 * pqB->q0;
   10086:	4649      	mov	r1, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1030
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
	qProd.q2 = pqA->q0 * pqB->q2 - pqA->q1 * pqB->q3 + pqA->q2 * pqB->q0 + pqA->q3 * pqB->q1;
   10088:	4682      	mov	sl, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1031
	qProd.q3 = pqA->q0 * pqB->q3 + pqA->q1 * pqB->q2 - pqA->q2 * pqB->q1 + pqA->q3 * pqB->q0;
   1008a:	1c30      	adds	r0, r6, #0
   1008c:	f7f0 fe82 	bl	d94 <__aeabi_fmul>
   10090:	4641      	mov	r1, r8
   10092:	1c06      	adds	r6, r0, #0
   10094:	1c28      	adds	r0, r5, #0
   10096:	f7f0 fe7d 	bl	d94 <__aeabi_fmul>
   1009a:	1c01      	adds	r1, r0, #0
   1009c:	1c30      	adds	r0, r6, #0
   1009e:	f7f0 fb29 	bl	6f4 <__aeabi_fadd>
   100a2:	9902      	ldr	r1, [sp, #8]
   100a4:	1c05      	adds	r5, r0, #0
   100a6:	1c20      	adds	r0, r4, #0
   100a8:	f7f0 fe74 	bl	d94 <__aeabi_fmul>
   100ac:	1c01      	adds	r1, r0, #0
   100ae:	1c28      	adds	r0, r5, #0
   100b0:	f7f0 ff9a 	bl	fe8 <__aeabi_fsub>
   100b4:	9901      	ldr	r1, [sp, #4]
   100b6:	1c04      	adds	r4, r0, #0
   100b8:	4658      	mov	r0, fp
   100ba:	f7f0 fe6b 	bl	d94 <__aeabi_fmul>
   100be:	1c01      	adds	r1, r0, #0
   100c0:	1c20      	adds	r0, r4, #0
   100c2:	f7f0 fb17 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1034

	// copy the result back into qA
	*pqA = qProd;
   100c6:	9d03      	ldr	r5, [sp, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1031

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
	qProd.q2 = pqA->q0 * pqB->q2 - pqA->q1 * pqB->q3 + pqA->q2 * pqB->q0 + pqA->q3 * pqB->q1;
	qProd.q3 = pqA->q0 * pqB->q3 + pqA->q1 * pqB->q2 - pqA->q2 * pqB->q1 + pqA->q3 * pqB->q0;
   100c8:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1034

	// copy the result back into qA
	*pqA = qProd;
   100ca:	603d      	str	r5, [r7, #0]
   100cc:	9d04      	ldr	r5, [sp, #16]
   100ce:	60f8      	str	r0, [r7, #12]
fqAeqNormqA():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1058
void fqAeqNormqA(struct fquaternion *pqA)
{
	float fNorm;					// quaternion Norm

	// calculate the quaternion Norm
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
   100d0:	9803      	ldr	r0, [sp, #12]
qAeqAxB():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1034
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
	qProd.q2 = pqA->q0 * pqB->q2 - pqA->q1 * pqB->q3 + pqA->q2 * pqB->q0 + pqA->q3 * pqB->q1;
	qProd.q3 = pqA->q0 * pqB->q3 + pqA->q1 * pqB->q2 - pqA->q2 * pqB->q1 + pqA->q3 * pqB->q0;

	// copy the result back into qA
	*pqA = qProd;
   100d2:	4651      	mov	r1, sl
   100d4:	607d      	str	r5, [r7, #4]
   100d6:	60b9      	str	r1, [r7, #8]
fqAeqNormqA():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1058
void fqAeqNormqA(struct fquaternion *pqA)
{
	float fNorm;					// quaternion Norm

	// calculate the quaternion Norm
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
   100d8:	1c01      	adds	r1, r0, #0
   100da:	f7f0 fe5b 	bl	d94 <__aeabi_fmul>
   100de:	1c05      	adds	r5, r0, #0
   100e0:	9804      	ldr	r0, [sp, #16]
   100e2:	1c01      	adds	r1, r0, #0
   100e4:	f7f0 fe56 	bl	d94 <__aeabi_fmul>
   100e8:	1c01      	adds	r1, r0, #0
   100ea:	1c28      	adds	r0, r5, #0
   100ec:	f7f0 fb02 	bl	6f4 <__aeabi_fadd>
   100f0:	4651      	mov	r1, sl
   100f2:	1c05      	adds	r5, r0, #0
   100f4:	4650      	mov	r0, sl
   100f6:	f7f0 fe4d 	bl	d94 <__aeabi_fmul>
   100fa:	1c01      	adds	r1, r0, #0
   100fc:	1c28      	adds	r0, r5, #0
   100fe:	f7f0 faf9 	bl	6f4 <__aeabi_fadd>
   10102:	1c21      	adds	r1, r4, #0
   10104:	1c05      	adds	r5, r0, #0
   10106:	1c20      	adds	r0, r4, #0
   10108:	f7f0 fe44 	bl	d94 <__aeabi_fmul>
   1010c:	1c01      	adds	r1, r0, #0
   1010e:	1c28      	adds	r0, r5, #0
   10110:	f7f0 faf0 	bl	6f4 <__aeabi_fadd>
   10114:	f003 f9bc 	bl	13490 <sqrtf>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1059
	if (fNorm > CORRUPTQUAT)
   10118:	4947      	ldr	r1, [pc, #284]	; (10238 <FP_CONTEXT_CLEAR_MASK+0x439>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1058
void fqAeqNormqA(struct fquaternion *pqA)
{
	float fNorm;					// quaternion Norm

	// calculate the quaternion Norm
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
   1011a:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1059
	if (fNorm > CORRUPTQUAT)
   1011c:	f7f0 fad6 	bl	6cc <__aeabi_fcmpgt>
   10120:	2800      	cmp	r0, #0
   10122:	d034      	beq.n	1018e <FP_CONTEXT_CLEAR_MASK+0x38f>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1062
	{
		// general case
		fNorm = 1.0F / fNorm;
   10124:	20fe      	movs	r0, #254	; 0xfe
   10126:	1c21      	adds	r1, r4, #0
   10128:	0580      	lsls	r0, r0, #22
   1012a:	f7f0 fc4f 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1063
		pqA->q0 *= fNorm;
   1012e:	6839      	ldr	r1, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1062
	// calculate the quaternion Norm
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
	if (fNorm > CORRUPTQUAT)
	{
		// general case
		fNorm = 1.0F / fNorm;
   10130:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1063
		pqA->q0 *= fNorm;
   10132:	f7f0 fe2f 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1064
		pqA->q1 *= fNorm;
   10136:	6879      	ldr	r1, [r7, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1063
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
	if (fNorm > CORRUPTQUAT)
	{
		// general case
		fNorm = 1.0F / fNorm;
		pqA->q0 *= fNorm;
   10138:	1c05      	adds	r5, r0, #0
   1013a:	6038      	str	r0, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1064
		pqA->q1 *= fNorm;
   1013c:	1c20      	adds	r0, r4, #0
   1013e:	f7f0 fe29 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1065
		pqA->q2 *= fNorm;
   10142:	68b9      	ldr	r1, [r7, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1064
	if (fNorm > CORRUPTQUAT)
	{
		// general case
		fNorm = 1.0F / fNorm;
		pqA->q0 *= fNorm;
		pqA->q1 *= fNorm;
   10144:	6078      	str	r0, [r7, #4]
   10146:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1065
		pqA->q2 *= fNorm;
   10148:	1c20      	adds	r0, r4, #0
   1014a:	f7f0 fe23 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1066
		pqA->q3 *= fNorm;
   1014e:	68f9      	ldr	r1, [r7, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1065
	{
		// general case
		fNorm = 1.0F / fNorm;
		pqA->q0 *= fNorm;
		pqA->q1 *= fNorm;
		pqA->q2 *= fNorm;
   10150:	60b8      	str	r0, [r7, #8]
   10152:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1066
		pqA->q3 *= fNorm;
   10154:	1c20      	adds	r0, r4, #0
   10156:	f7f0 fe1d 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1076
		pqA->q0 = 1.0F;
		pqA->q1 = pqA->q2 = pqA->q3 = 0.0F;
	}

	// correct a negative scalar component if the function was called with negative q0
	if (pqA->q0 < 0.0F)
   1015a:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1066
		// general case
		fNorm = 1.0F / fNorm;
		pqA->q0 *= fNorm;
		pqA->q1 *= fNorm;
		pqA->q2 *= fNorm;
		pqA->q3 *= fNorm;
   1015c:	1c04      	adds	r4, r0, #0
   1015e:	60f8      	str	r0, [r7, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1076
		pqA->q0 = 1.0F;
		pqA->q1 = pqA->q2 = pqA->q3 = 0.0F;
	}

	// correct a negative scalar component if the function was called with negative q0
	if (pqA->q0 < 0.0F)
   10160:	1c28      	adds	r0, r5, #0
   10162:	f7f0 fa9f 	bl	6a4 <__aeabi_fcmplt>
   10166:	2800      	cmp	r0, #0
   10168:	d00a      	beq.n	10180 <FP_CONTEXT_CLEAR_MASK+0x381>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1078
	{
		pqA->q0 = -pqA->q0;
   1016a:	2280      	movs	r2, #128	; 0x80
   1016c:	0612      	lsls	r2, r2, #24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1079
		pqA->q1 = -pqA->q1;
   1016e:	1c13      	adds	r3, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1078
	}

	// correct a negative scalar component if the function was called with negative q0
	if (pqA->q0 < 0.0F)
	{
		pqA->q0 = -pqA->q0;
   10170:	18ad      	adds	r5, r5, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1079
		pqA->q1 = -pqA->q1;
   10172:	4443      	add	r3, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1080
		pqA->q2 = -pqA->q2;
   10174:	18b6      	adds	r6, r6, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1081
		pqA->q3 = -pqA->q3;
   10176:	18a4      	adds	r4, r4, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1078
	}

	// correct a negative scalar component if the function was called with negative q0
	if (pqA->q0 < 0.0F)
	{
		pqA->q0 = -pqA->q0;
   10178:	603d      	str	r5, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1079
		pqA->q1 = -pqA->q1;
   1017a:	607b      	str	r3, [r7, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1080
		pqA->q2 = -pqA->q2;
   1017c:	60be      	str	r6, [r7, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1081
		pqA->q3 = -pqA->q3;
   1017e:	60fc      	str	r4, [r7, #12]
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:994
	// renormalize the low pass filtered quaternion to prevent error accumulation
	// the renormalization function ensures that q0 is non-negative
	fqAeqNormqA(pLPq);

	return;
}
   10180:	b009      	add	sp, #36	; 0x24
   10182:	bc3c      	pop	{r2, r3, r4, r5}
   10184:	4690      	mov	r8, r2
   10186:	4699      	mov	r9, r3
   10188:	46a2      	mov	sl, r4
   1018a:	46ab      	mov	fp, r5
   1018c:	bdf0      	pop	{r4, r5, r6, r7, pc}
fqAeqNormqA():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1071
		pqA->q3 *= fNorm;
	}
	else
	{
		// return with identity quaternion since the quaternion is corrupted
		pqA->q0 = 1.0F;
   1018e:	23fe      	movs	r3, #254	; 0xfe
   10190:	059b      	lsls	r3, r3, #22
   10192:	603b      	str	r3, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1072
		pqA->q1 = pqA->q2 = pqA->q3 = 0.0F;
   10194:	2300      	movs	r3, #0
   10196:	60fb      	str	r3, [r7, #12]
   10198:	60bb      	str	r3, [r7, #8]
   1019a:	607b      	str	r3, [r7, #4]
   1019c:	e7f0      	b.n	10180 <FP_CONTEXT_CLEAR_MASK+0x381>
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:947

	// set fdeltaqn to the delta rotation quaternion conjg(fLPq[n-1) . fqn
	fdeltaq = qconjgAxB(pLPq, pq);
	if (fdeltaq.q0 < 0.0F)
	{
		fdeltaq.q0 = -fdeltaq.q0;
   1019e:	9a04      	ldr	r2, [sp, #16]
   101a0:	2480      	movs	r4, #128	; 0x80
   101a2:	0624      	lsls	r4, r4, #24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:948
		fdeltaq.q1 = -fdeltaq.q1;
   101a4:	9d05      	ldr	r5, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:947

	// set fdeltaqn to the delta rotation quaternion conjg(fLPq[n-1) . fqn
	fdeltaq = qconjgAxB(pLPq, pq);
	if (fdeltaq.q0 < 0.0F)
	{
		fdeltaq.q0 = -fdeltaq.q0;
   101a6:	1913      	adds	r3, r2, r4
   101a8:	9304      	str	r3, [sp, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:948
		fdeltaq.q1 = -fdeltaq.q1;
   101aa:	192b      	adds	r3, r5, r4
   101ac:	9305      	str	r3, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:950
		fdeltaq.q2 = -fdeltaq.q2;
		fdeltaq.q3 = -fdeltaq.q3;
   101ae:	1c26      	adds	r6, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:949
	fdeltaq = qconjgAxB(pLPq, pq);
	if (fdeltaq.q0 < 0.0F)
	{
		fdeltaq.q0 = -fdeltaq.q0;
		fdeltaq.q1 = -fdeltaq.q1;
		fdeltaq.q2 = -fdeltaq.q2;
   101b0:	1c23      	adds	r3, r4, #0
   101b2:	444b      	add	r3, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:950
		fdeltaq.q3 = -fdeltaq.q3;
   101b4:	4446      	add	r6, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:949
	fdeltaq = qconjgAxB(pLPq, pq);
	if (fdeltaq.q0 < 0.0F)
	{
		fdeltaq.q0 = -fdeltaq.q0;
		fdeltaq.q1 = -fdeltaq.q1;
		fdeltaq.q2 = -fdeltaq.q2;
   101b6:	4699      	mov	r9, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:950
		fdeltaq.q3 = -fdeltaq.q3;
   101b8:	46b0      	mov	r8, r6
   101ba:	e674      	b.n	fea6 <FP_CONTEXT_CLEAR_MASK+0xa7>
fRotationVectorDegFromQuaternion():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:914

	// calculate the rotation vector (deg)
	if (sinhalfeta == 0.0F)
	{
		// the rotation angle eta is zero and the axis is irrelevant 
		rvecdeg[X] = rvecdeg[Y] = rvecdeg[Z] = 0.0F;
   101bc:	2200      	movs	r2, #0
   101be:	4691      	mov	r9, r2
   101c0:	4692      	mov	sl, r2
   101c2:	4693      	mov	fp, r2
   101c4:	e6e1      	b.n	ff8a <FP_CONTEXT_CLEAR_MASK+0x18b>
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:971
	// compute the scalar component q0
	ftmp = fdeltaq.q1 * fdeltaq.q1 + fdeltaq.q2 * fdeltaq.q2 + fdeltaq.q3 * fdeltaq.q3;
	if (ftmp <= 1.0F)
	{
		// normal case
		fdeltaq.q0 = sqrtf(1.0F - ftmp);
   101c6:	20fe      	movs	r0, #254	; 0xfe
   101c8:	4641      	mov	r1, r8
   101ca:	0580      	lsls	r0, r0, #22
   101cc:	f7f0 ff0c 	bl	fe8 <__aeabi_fsub>
   101d0:	f003 f95e 	bl	13490 <sqrtf>
fRotationVectorDegFromQuaternion():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:887
	float fetadeg;			// rotation angle (deg)
	float sinhalfeta;		// sin(eta/2)
	float ftmp;				// scratch variable

	// calculate the rotation angle in the range 0 <= eta < 360 deg
	if ((pq->q0 >= 1.0F) || (pq->q0 <= -1.0F))
   101d4:	21fe      	movs	r1, #254	; 0xfe
   101d6:	0589      	lsls	r1, r1, #22
fLPFOrientationQuaternion():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:971
	// compute the scalar component q0
	ftmp = fdeltaq.q1 * fdeltaq.q1 + fdeltaq.q2 * fdeltaq.q2 + fdeltaq.q3 * fdeltaq.q3;
	if (ftmp <= 1.0F)
	{
		// normal case
		fdeltaq.q0 = sqrtf(1.0F - ftmp);
   101d8:	9001      	str	r0, [sp, #4]
fRotationVectorDegFromQuaternion():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:887
	float fetadeg;			// rotation angle (deg)
	float sinhalfeta;		// sin(eta/2)
	float ftmp;				// scratch variable

	// calculate the rotation angle in the range 0 <= eta < 360 deg
	if ((pq->q0 >= 1.0F) || (pq->q0 <= -1.0F))
   101da:	f7f0 fa81 	bl	6e0 <__aeabi_fcmpge>
   101de:	2800      	cmp	r0, #0
   101e0:	d004      	beq.n	101ec <FP_CONTEXT_CLEAR_MASK+0x3ed>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:914

	// calculate the rotation vector (deg)
	if (sinhalfeta == 0.0F)
	{
		// the rotation angle eta is zero and the axis is irrelevant 
		rvecdeg[X] = rvecdeg[Y] = rvecdeg[Z] = 0.0F;
   101e2:	2300      	movs	r3, #0
   101e4:	4699      	mov	r9, r3
   101e6:	469a      	mov	sl, r3
   101e8:	469b      	mov	fp, r3
   101ea:	e6ce      	b.n	ff8a <FP_CONTEXT_CLEAR_MASK+0x18b>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:887
	float fetadeg;			// rotation angle (deg)
	float sinhalfeta;		// sin(eta/2)
	float ftmp;				// scratch variable

	// calculate the rotation angle in the range 0 <= eta < 360 deg
	if ((pq->q0 >= 1.0F) || (pq->q0 <= -1.0F))
   101ec:	9801      	ldr	r0, [sp, #4]
   101ee:	4913      	ldr	r1, [pc, #76]	; (1023c <FP_CONTEXT_CLEAR_MASK+0x43d>)
   101f0:	f7f0 fa62 	bl	6b8 <__aeabi_fcmple>
   101f4:	2800      	cmp	r0, #0
   101f6:	d112      	bne.n	1021e <FP_CONTEXT_CLEAR_MASK+0x41f>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:896
		fetadeg = 0.0F;
	}
	else
	{
		// general case returning 0 < eta < 360 deg 
		fetarad = 2.0F * acosf(pq->q0); 
   101f8:	9801      	ldr	r0, [sp, #4]
   101fa:	f002 ff2b 	bl	13054 <acosf>
   101fe:	1c01      	adds	r1, r0, #0
   10200:	f7f0 fa78 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:897
		fetadeg = fetarad * FRADTODEG;
   10204:	4908      	ldr	r1, [pc, #32]	; (10228 <FP_CONTEXT_CLEAR_MASK+0x429>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:896
		fetadeg = 0.0F;
	}
	else
	{
		// general case returning 0 < eta < 360 deg 
		fetarad = 2.0F * acosf(pq->q0); 
   10206:	4681      	mov	r9, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:897
		fetadeg = fetarad * FRADTODEG;
   10208:	f7f0 fdc4 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:901
	}

	// map the rotation angle onto the range -180 deg <= eta < 180 deg 
	if (fetadeg >= 180.0F)
   1020c:	490c      	ldr	r1, [pc, #48]	; (10240 <FP_CONTEXT_CLEAR_MASK+0x441>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:897
	}
	else
	{
		// general case returning 0 < eta < 360 deg 
		fetarad = 2.0F * acosf(pq->q0); 
		fetadeg = fetarad * FRADTODEG;
   1020e:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:901
	}

	// map the rotation angle onto the range -180 deg <= eta < 180 deg 
	if (fetadeg >= 180.0F)
   10210:	f7f0 fa66 	bl	6e0 <__aeabi_fcmpge>
   10214:	2800      	cmp	r0, #0
   10216:	d000      	beq.n	1021a <FP_CONTEXT_CLEAR_MASK+0x41b>
   10218:	e68e      	b.n	ff38 <FP_CONTEXT_CLEAR_MASK+0x139>
   1021a:	4648      	mov	r0, r9
   1021c:	e694      	b.n	ff48 <FP_CONTEXT_CLEAR_MASK+0x149>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:914

	// calculate the rotation vector (deg)
	if (sinhalfeta == 0.0F)
	{
		// the rotation angle eta is zero and the axis is irrelevant 
		rvecdeg[X] = rvecdeg[Y] = rvecdeg[Z] = 0.0F;
   1021e:	2100      	movs	r1, #0
   10220:	4689      	mov	r9, r1
   10222:	468a      	mov	sl, r1
   10224:	468b      	mov	fp, r1
   10226:	e6b0      	b.n	ff8a <FP_CONTEXT_CLEAR_MASK+0x18b>
   10228:	42652ee1 	.word	0x42652ee1
   1022c:	40490fdb 	.word	0x40490fdb
   10230:	43b40000 	.word	0x43b40000
   10234:	3c8efa35 	.word	0x3c8efa35
   10238:	3a83126f 	.word	0x3a83126f
   1023c:	bf800000 	.word	0xbf800000
   10240:	43340000 	.word	0x43340000

00010244 <fLPFScalar>:
fLPFScalar():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:998
	return;
}

// function low pass filters a scalar
void fLPFScalar(float *pfS, float *pfLPS, float flpf, int32 loopcounter)
{
   10244:	b570      	push	{r4, r5, r6, lr}
   10246:	1c0d      	adds	r5, r1, #0
   10248:	1c16      	adds	r6, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1000
	// set S[LP,n]=S[n] on first pass
	if (loopcounter == 0)
   1024a:	2b00      	cmp	r3, #0
   1024c:	d10d      	bne.n	1026a <fLPFScalar+0x26>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1002
	{
		*pfLPS = *pfS;
   1024e:	6804      	ldr	r4, [r0, #0]
   10250:	600c      	str	r4, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1006
	}

	// apply the exponential low pass filter
	*pfLPS += flpf * (*pfS - *pfLPS);
   10252:	6800      	ldr	r0, [r0, #0]
   10254:	1c21      	adds	r1, r4, #0
   10256:	f7f0 fec7 	bl	fe8 <__aeabi_fsub>
   1025a:	1c31      	adds	r1, r6, #0
   1025c:	f7f0 fd9a 	bl	d94 <__aeabi_fmul>
   10260:	1c21      	adds	r1, r4, #0
   10262:	f7f0 fa47 	bl	6f4 <__aeabi_fadd>
   10266:	6028      	str	r0, [r5, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1009

	return;
}
   10268:	bd70      	pop	{r4, r5, r6, pc}
   1026a:	680c      	ldr	r4, [r1, #0]
   1026c:	e7f1      	b.n	10252 <fLPFScalar+0xe>
   1026e:	46c0      	nop			; (mov r8, r8)

00010270 <qAeqBxC>:
qAeqBxC():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1013

// function compute the quaternion product qA * qB
void qAeqBxC(struct fquaternion *pqA, const struct fquaternion *pqB, const struct fquaternion *pqC)
{
   10270:	b5f0      	push	{r4, r5, r6, r7, lr}
   10272:	465f      	mov	r7, fp
   10274:	4656      	mov	r6, sl
   10276:	464d      	mov	r5, r9
   10278:	4644      	mov	r4, r8
   1027a:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1014
	pqA->q0 = pqB->q0 * pqC->q0 - pqB->q1 * pqC->q1 - pqB->q2 * pqC->q2 - pqB->q3 * pqC->q3;
   1027c:	684b      	ldr	r3, [r1, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1013
	return;
}

// function compute the quaternion product qA * qB
void qAeqBxC(struct fquaternion *pqA, const struct fquaternion *pqB, const struct fquaternion *pqC)
{
   1027e:	b085      	sub	sp, #20
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1014
	pqA->q0 = pqB->q0 * pqC->q0 - pqB->q1 * pqC->q1 - pqB->q2 * pqC->q2 - pqB->q3 * pqC->q3;
   10280:	9301      	str	r3, [sp, #4]
   10282:	6853      	ldr	r3, [r2, #4]
   10284:	68cf      	ldr	r7, [r1, #12]
   10286:	9303      	str	r3, [sp, #12]
   10288:	688b      	ldr	r3, [r1, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1013
	return;
}

// function compute the quaternion product qA * qB
void qAeqBxC(struct fquaternion *pqA, const struct fquaternion *pqB, const struct fquaternion *pqC)
{
   1028a:	1c06      	adds	r6, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1014
	pqA->q0 = pqB->q0 * pqC->q0 - pqB->q1 * pqC->q1 - pqB->q2 * pqC->q2 - pqB->q3 * pqC->q3;
   1028c:	469b      	mov	fp, r3
   1028e:	6893      	ldr	r3, [r2, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1013
	return;
}

// function compute the quaternion product qA * qB
void qAeqBxC(struct fquaternion *pqA, const struct fquaternion *pqB, const struct fquaternion *pqC)
{
   10290:	1c0c      	adds	r4, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1014
	pqA->q0 = pqB->q0 * pqC->q0 - pqB->q1 * pqC->q1 - pqB->q2 * pqC->q2 - pqB->q3 * pqC->q3;
   10292:	9302      	str	r3, [sp, #8]
   10294:	68d3      	ldr	r3, [r2, #12]
   10296:	6808      	ldr	r0, [r1, #0]
   10298:	6811      	ldr	r1, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1013
	return;
}

// function compute the quaternion product qA * qB
void qAeqBxC(struct fquaternion *pqA, const struct fquaternion *pqB, const struct fquaternion *pqC)
{
   1029a:	1c15      	adds	r5, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1014
	pqA->q0 = pqB->q0 * pqC->q0 - pqB->q1 * pqC->q1 - pqB->q2 * pqC->q2 - pqB->q3 * pqC->q3;
   1029c:	4698      	mov	r8, r3
   1029e:	f7f0 fd79 	bl	d94 <__aeabi_fmul>
   102a2:	9903      	ldr	r1, [sp, #12]
   102a4:	4681      	mov	r9, r0
   102a6:	9801      	ldr	r0, [sp, #4]
   102a8:	f7f0 fd74 	bl	d94 <__aeabi_fmul>
   102ac:	1c01      	adds	r1, r0, #0
   102ae:	4648      	mov	r0, r9
   102b0:	f7f0 fe9a 	bl	fe8 <__aeabi_fsub>
   102b4:	9902      	ldr	r1, [sp, #8]
   102b6:	4681      	mov	r9, r0
   102b8:	4658      	mov	r0, fp
   102ba:	f7f0 fd6b 	bl	d94 <__aeabi_fmul>
   102be:	1c01      	adds	r1, r0, #0
   102c0:	4648      	mov	r0, r9
   102c2:	f7f0 fe91 	bl	fe8 <__aeabi_fsub>
   102c6:	4641      	mov	r1, r8
   102c8:	4681      	mov	r9, r0
   102ca:	1c38      	adds	r0, r7, #0
   102cc:	f7f0 fd62 	bl	d94 <__aeabi_fmul>
   102d0:	1c01      	adds	r1, r0, #0
   102d2:	4648      	mov	r0, r9
   102d4:	f7f0 fe88 	bl	fe8 <__aeabi_fsub>
   102d8:	6030      	str	r0, [r6, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1015
	pqA->q1 = pqB->q0 * pqC->q1 + pqB->q1 * pqC->q0 + pqB->q2 * pqC->q3 - pqB->q3 * pqC->q2;
   102da:	6823      	ldr	r3, [r4, #0]
   102dc:	9803      	ldr	r0, [sp, #12]
   102de:	469a      	mov	sl, r3
   102e0:	682b      	ldr	r3, [r5, #0]
   102e2:	4651      	mov	r1, sl
   102e4:	4699      	mov	r9, r3
   102e6:	f7f0 fd55 	bl	d94 <__aeabi_fmul>
   102ea:	4649      	mov	r1, r9
   102ec:	9003      	str	r0, [sp, #12]
   102ee:	9801      	ldr	r0, [sp, #4]
   102f0:	f7f0 fd50 	bl	d94 <__aeabi_fmul>
   102f4:	1c01      	adds	r1, r0, #0
   102f6:	9803      	ldr	r0, [sp, #12]
   102f8:	f7f0 f9fc 	bl	6f4 <__aeabi_fadd>
   102fc:	4641      	mov	r1, r8
   102fe:	9001      	str	r0, [sp, #4]
   10300:	4658      	mov	r0, fp
   10302:	f7f0 fd47 	bl	d94 <__aeabi_fmul>
   10306:	1c01      	adds	r1, r0, #0
   10308:	9801      	ldr	r0, [sp, #4]
   1030a:	f7f0 f9f3 	bl	6f4 <__aeabi_fadd>
   1030e:	1c39      	adds	r1, r7, #0
   10310:	9001      	str	r0, [sp, #4]
   10312:	9802      	ldr	r0, [sp, #8]
   10314:	f7f0 fd3e 	bl	d94 <__aeabi_fmul>
   10318:	1c01      	adds	r1, r0, #0
   1031a:	9801      	ldr	r0, [sp, #4]
   1031c:	f7f0 fe64 	bl	fe8 <__aeabi_fsub>
   10320:	6070      	str	r0, [r6, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1016
	pqA->q2 = pqB->q0 * pqC->q2 - pqB->q1 * pqC->q3 + pqB->q2 * pqC->q0 + pqB->q3 * pqC->q1;
   10322:	6863      	ldr	r3, [r4, #4]
   10324:	9802      	ldr	r0, [sp, #8]
   10326:	9301      	str	r3, [sp, #4]
   10328:	686b      	ldr	r3, [r5, #4]
   1032a:	4651      	mov	r1, sl
   1032c:	9303      	str	r3, [sp, #12]
   1032e:	f7f0 fd31 	bl	d94 <__aeabi_fmul>
   10332:	9901      	ldr	r1, [sp, #4]
   10334:	9002      	str	r0, [sp, #8]
   10336:	4640      	mov	r0, r8
   10338:	f7f0 fd2c 	bl	d94 <__aeabi_fmul>
   1033c:	1c01      	adds	r1, r0, #0
   1033e:	9802      	ldr	r0, [sp, #8]
   10340:	f7f0 fe52 	bl	fe8 <__aeabi_fsub>
   10344:	4649      	mov	r1, r9
   10346:	9002      	str	r0, [sp, #8]
   10348:	4658      	mov	r0, fp
   1034a:	f7f0 fd23 	bl	d94 <__aeabi_fmul>
   1034e:	1c01      	adds	r1, r0, #0
   10350:	9802      	ldr	r0, [sp, #8]
   10352:	f7f0 f9cf 	bl	6f4 <__aeabi_fadd>
   10356:	9903      	ldr	r1, [sp, #12]
   10358:	4683      	mov	fp, r0
   1035a:	1c38      	adds	r0, r7, #0
   1035c:	f7f0 fd1a 	bl	d94 <__aeabi_fmul>
   10360:	1c01      	adds	r1, r0, #0
   10362:	4658      	mov	r0, fp
   10364:	f7f0 f9c6 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1017
	pqA->q3 = pqB->q0 * pqC->q3 + pqB->q1 * pqC->q2 - pqB->q2 * pqC->q1 + pqB->q3 * pqC->q0;
   10368:	4651      	mov	r1, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1016
// function compute the quaternion product qA * qB
void qAeqBxC(struct fquaternion *pqA, const struct fquaternion *pqB, const struct fquaternion *pqC)
{
	pqA->q0 = pqB->q0 * pqC->q0 - pqB->q1 * pqC->q1 - pqB->q2 * pqC->q2 - pqB->q3 * pqC->q3;
	pqA->q1 = pqB->q0 * pqC->q1 + pqB->q1 * pqC->q0 + pqB->q2 * pqC->q3 - pqB->q3 * pqC->q2;
	pqA->q2 = pqB->q0 * pqC->q2 - pqB->q1 * pqC->q3 + pqB->q2 * pqC->q0 + pqB->q3 * pqC->q1;
   1036a:	60b0      	str	r0, [r6, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1017
	pqA->q3 = pqB->q0 * pqC->q3 + pqB->q1 * pqC->q2 - pqB->q2 * pqC->q1 + pqB->q3 * pqC->q0;
   1036c:	4640      	mov	r0, r8
   1036e:	f7f0 fd11 	bl	d94 <__aeabi_fmul>
   10372:	68a9      	ldr	r1, [r5, #8]
   10374:	4680      	mov	r8, r0
   10376:	9801      	ldr	r0, [sp, #4]
   10378:	f7f0 fd0c 	bl	d94 <__aeabi_fmul>
   1037c:	1c01      	adds	r1, r0, #0
   1037e:	4640      	mov	r0, r8
   10380:	f7f0 f9b8 	bl	6f4 <__aeabi_fadd>
   10384:	68a1      	ldr	r1, [r4, #8]
   10386:	1c05      	adds	r5, r0, #0
   10388:	9803      	ldr	r0, [sp, #12]
   1038a:	f7f0 fd03 	bl	d94 <__aeabi_fmul>
   1038e:	1c01      	adds	r1, r0, #0
   10390:	1c28      	adds	r0, r5, #0
   10392:	f7f0 fe29 	bl	fe8 <__aeabi_fsub>
   10396:	4649      	mov	r1, r9
   10398:	1c04      	adds	r4, r0, #0
   1039a:	1c38      	adds	r0, r7, #0
   1039c:	f7f0 fcfa 	bl	d94 <__aeabi_fmul>
   103a0:	1c01      	adds	r1, r0, #0
   103a2:	1c20      	adds	r0, r4, #0
   103a4:	f7f0 f9a6 	bl	6f4 <__aeabi_fadd>
   103a8:	60f0      	str	r0, [r6, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1020

	return;
}
   103aa:	b005      	add	sp, #20
   103ac:	bc3c      	pop	{r2, r3, r4, r5}
   103ae:	4690      	mov	r8, r2
   103b0:	4699      	mov	r9, r3
   103b2:	46a2      	mov	sl, r4
   103b4:	46ab      	mov	fp, r5
   103b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000103b8 <qAeqAxB>:
qAeqAxB():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1024

// function compute the quaternion product qA = qA * qB
void qAeqAxB(struct fquaternion *pqA, const struct fquaternion *pqB)
{
   103b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   103ba:	465f      	mov	r7, fp
   103bc:	4656      	mov	r6, sl
   103be:	464d      	mov	r5, r9
   103c0:	4644      	mov	r4, r8
   103c2:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1028
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
   103c4:	6803      	ldr	r3, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1024
	return;
}

// function compute the quaternion product qA = qA * qB
void qAeqAxB(struct fquaternion *pqA, const struct fquaternion *pqB)
{
   103c6:	b083      	sub	sp, #12
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1028
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
   103c8:	469b      	mov	fp, r3
   103ca:	6843      	ldr	r3, [r0, #4]
   103cc:	680e      	ldr	r6, [r1, #0]
   103ce:	4699      	mov	r9, r3
   103d0:	6883      	ldr	r3, [r0, #8]
   103d2:	684f      	ldr	r7, [r1, #4]
   103d4:	9301      	str	r3, [sp, #4]
   103d6:	688b      	ldr	r3, [r1, #8]
   103d8:	68c9      	ldr	r1, [r1, #12]
   103da:	68c5      	ldr	r5, [r0, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1024
	return;
}

// function compute the quaternion product qA = qA * qB
void qAeqAxB(struct fquaternion *pqA, const struct fquaternion *pqB)
{
   103dc:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1028
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
   103de:	468a      	mov	sl, r1
   103e0:	4658      	mov	r0, fp
   103e2:	1c31      	adds	r1, r6, #0
   103e4:	4698      	mov	r8, r3
   103e6:	f7f0 fcd5 	bl	d94 <__aeabi_fmul>
   103ea:	1c39      	adds	r1, r7, #0
   103ec:	9000      	str	r0, [sp, #0]
   103ee:	4648      	mov	r0, r9
   103f0:	f7f0 fcd0 	bl	d94 <__aeabi_fmul>
   103f4:	1c01      	adds	r1, r0, #0
   103f6:	9800      	ldr	r0, [sp, #0]
   103f8:	f7f0 fdf6 	bl	fe8 <__aeabi_fsub>
   103fc:	4641      	mov	r1, r8
   103fe:	9000      	str	r0, [sp, #0]
   10400:	9801      	ldr	r0, [sp, #4]
   10402:	f7f0 fcc7 	bl	d94 <__aeabi_fmul>
   10406:	1c01      	adds	r1, r0, #0
   10408:	9800      	ldr	r0, [sp, #0]
   1040a:	f7f0 fded 	bl	fe8 <__aeabi_fsub>
   1040e:	4651      	mov	r1, sl
   10410:	9000      	str	r0, [sp, #0]
   10412:	1c28      	adds	r0, r5, #0
   10414:	f7f0 fcbe 	bl	d94 <__aeabi_fmul>
   10418:	1c01      	adds	r1, r0, #0
   1041a:	9800      	ldr	r0, [sp, #0]
   1041c:	f7f0 fde4 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1029
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
   10420:	1c39      	adds	r1, r7, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1034
	qProd.q2 = pqA->q0 * pqB->q2 - pqA->q1 * pqB->q3 + pqA->q2 * pqB->q0 + pqA->q3 * pqB->q1;
	qProd.q3 = pqA->q0 * pqB->q3 + pqA->q1 * pqB->q2 - pqA->q2 * pqB->q1 + pqA->q3 * pqB->q0;

	// copy the result back into qA
	*pqA = qProd;
   10422:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1029
{
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
   10424:	4658      	mov	r0, fp
   10426:	f7f0 fcb5 	bl	d94 <__aeabi_fmul>
   1042a:	4649      	mov	r1, r9
   1042c:	9000      	str	r0, [sp, #0]
   1042e:	1c30      	adds	r0, r6, #0
   10430:	f7f0 fcb0 	bl	d94 <__aeabi_fmul>
   10434:	1c01      	adds	r1, r0, #0
   10436:	9800      	ldr	r0, [sp, #0]
   10438:	f7f0 f95c 	bl	6f4 <__aeabi_fadd>
   1043c:	4651      	mov	r1, sl
   1043e:	9000      	str	r0, [sp, #0]
   10440:	9801      	ldr	r0, [sp, #4]
   10442:	f7f0 fca7 	bl	d94 <__aeabi_fmul>
   10446:	1c01      	adds	r1, r0, #0
   10448:	9800      	ldr	r0, [sp, #0]
   1044a:	f7f0 f953 	bl	6f4 <__aeabi_fadd>
   1044e:	1c29      	adds	r1, r5, #0
   10450:	9000      	str	r0, [sp, #0]
   10452:	4640      	mov	r0, r8
   10454:	f7f0 fc9e 	bl	d94 <__aeabi_fmul>
   10458:	1c01      	adds	r1, r0, #0
   1045a:	9800      	ldr	r0, [sp, #0]
   1045c:	f7f0 fdc4 	bl	fe8 <__aeabi_fsub>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1030
	qProd.q2 = pqA->q0 * pqB->q2 - pqA->q1 * pqB->q3 + pqA->q2 * pqB->q0 + pqA->q3 * pqB->q1;
   10460:	4641      	mov	r1, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1034
	qProd.q3 = pqA->q0 * pqB->q3 + pqA->q1 * pqB->q2 - pqA->q2 * pqB->q1 + pqA->q3 * pqB->q0;

	// copy the result back into qA
	*pqA = qProd;
   10462:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1030
	struct fquaternion qProd;

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
	qProd.q2 = pqA->q0 * pqB->q2 - pqA->q1 * pqB->q3 + pqA->q2 * pqB->q0 + pqA->q3 * pqB->q1;
   10464:	4658      	mov	r0, fp
   10466:	f7f0 fc95 	bl	d94 <__aeabi_fmul>
   1046a:	4651      	mov	r1, sl
   1046c:	9000      	str	r0, [sp, #0]
   1046e:	4648      	mov	r0, r9
   10470:	f7f0 fc90 	bl	d94 <__aeabi_fmul>
   10474:	1c01      	adds	r1, r0, #0
   10476:	9800      	ldr	r0, [sp, #0]
   10478:	f7f0 fdb6 	bl	fe8 <__aeabi_fsub>
   1047c:	9000      	str	r0, [sp, #0]
   1047e:	9901      	ldr	r1, [sp, #4]
   10480:	1c30      	adds	r0, r6, #0
   10482:	f7f0 fc87 	bl	d94 <__aeabi_fmul>
   10486:	1c01      	adds	r1, r0, #0
   10488:	9800      	ldr	r0, [sp, #0]
   1048a:	f7f0 f933 	bl	6f4 <__aeabi_fadd>
   1048e:	1c29      	adds	r1, r5, #0
   10490:	9000      	str	r0, [sp, #0]
   10492:	1c38      	adds	r0, r7, #0
   10494:	f7f0 fc7e 	bl	d94 <__aeabi_fmul>
   10498:	1c01      	adds	r1, r0, #0
   1049a:	9800      	ldr	r0, [sp, #0]
   1049c:	f7f0 f92a 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1031
	qProd.q3 = pqA->q0 * pqB->q3 + pqA->q1 * pqB->q2 - pqA->q2 * pqB->q1 + pqA->q3 * pqB->q0;
   104a0:	4651      	mov	r1, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1034

	// copy the result back into qA
	*pqA = qProd;
   104a2:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1031

	// perform the quaternion product
	qProd.q0 = pqA->q0 * pqB->q0 - pqA->q1 * pqB->q1 - pqA->q2 * pqB->q2 - pqA->q3 * pqB->q3;
	qProd.q1 = pqA->q0 * pqB->q1 + pqA->q1 * pqB->q0 + pqA->q2 * pqB->q3 - pqA->q3 * pqB->q2;
	qProd.q2 = pqA->q0 * pqB->q2 - pqA->q1 * pqB->q3 + pqA->q2 * pqB->q0 + pqA->q3 * pqB->q1;
	qProd.q3 = pqA->q0 * pqB->q3 + pqA->q1 * pqB->q2 - pqA->q2 * pqB->q1 + pqA->q3 * pqB->q0;
   104a4:	4658      	mov	r0, fp
   104a6:	f7f0 fc75 	bl	d94 <__aeabi_fmul>
   104aa:	4641      	mov	r1, r8
   104ac:	4682      	mov	sl, r0
   104ae:	4648      	mov	r0, r9
   104b0:	f7f0 fc70 	bl	d94 <__aeabi_fmul>
   104b4:	1c01      	adds	r1, r0, #0
   104b6:	4650      	mov	r0, sl
   104b8:	f7f0 f91c 	bl	6f4 <__aeabi_fadd>
   104bc:	9901      	ldr	r1, [sp, #4]
   104be:	4680      	mov	r8, r0
   104c0:	1c38      	adds	r0, r7, #0
   104c2:	f7f0 fc67 	bl	d94 <__aeabi_fmul>
   104c6:	1c01      	adds	r1, r0, #0
   104c8:	4640      	mov	r0, r8
   104ca:	f7f0 fd8d 	bl	fe8 <__aeabi_fsub>
   104ce:	1c29      	adds	r1, r5, #0
   104d0:	1c07      	adds	r7, r0, #0
   104d2:	1c30      	adds	r0, r6, #0
   104d4:	f7f0 fc5e 	bl	d94 <__aeabi_fmul>
   104d8:	1c01      	adds	r1, r0, #0
   104da:	1c38      	adds	r0, r7, #0
   104dc:	f7f0 f90a 	bl	6f4 <__aeabi_fadd>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1034

	// copy the result back into qA
	*pqA = qProd;
   104e0:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1037

	return;
}
   104e2:	b003      	add	sp, #12
   104e4:	bc3c      	pop	{r2, r3, r4, r5}
   104e6:	4690      	mov	r8, r2
   104e8:	4699      	mov	r9, r3
   104ea:	46a2      	mov	sl, r4
   104ec:	46ab      	mov	fp, r5
   104ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000104f0 <fqAeqNormqA>:
fqAeqNormqA():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1054
	return qProd;
}

// function normalizes a rotation quaternion and ensures q0 is non-negative
void fqAeqNormqA(struct fquaternion *pqA)
{
   104f0:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1058
	float fNorm;					// quaternion Norm

	// calculate the quaternion Norm
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
   104f2:	6801      	ldr	r1, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1054
	return qProd;
}

// function normalizes a rotation quaternion and ensures q0 is non-negative
void fqAeqNormqA(struct fquaternion *pqA)
{
   104f4:	4647      	mov	r7, r8
   104f6:	b480      	push	{r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1058
	float fNorm;					// quaternion Norm

	// calculate the quaternion Norm
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
   104f8:	6886      	ldr	r6, [r0, #8]
   104fa:	6847      	ldr	r7, [r0, #4]
   104fc:	68c5      	ldr	r5, [r0, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1054
	return qProd;
}

// function normalizes a rotation quaternion and ensures q0 is non-negative
void fqAeqNormqA(struct fquaternion *pqA)
{
   104fe:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1058
	float fNorm;					// quaternion Norm

	// calculate the quaternion Norm
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
   10500:	1c08      	adds	r0, r1, #0
   10502:	f7f0 fc47 	bl	d94 <__aeabi_fmul>
   10506:	1c39      	adds	r1, r7, #0
   10508:	4680      	mov	r8, r0
   1050a:	1c38      	adds	r0, r7, #0
   1050c:	f7f0 fc42 	bl	d94 <__aeabi_fmul>
   10510:	1c01      	adds	r1, r0, #0
   10512:	4640      	mov	r0, r8
   10514:	f7f0 f8ee 	bl	6f4 <__aeabi_fadd>
   10518:	1c31      	adds	r1, r6, #0
   1051a:	1c07      	adds	r7, r0, #0
   1051c:	1c30      	adds	r0, r6, #0
   1051e:	f7f0 fc39 	bl	d94 <__aeabi_fmul>
   10522:	1c01      	adds	r1, r0, #0
   10524:	1c38      	adds	r0, r7, #0
   10526:	f7f0 f8e5 	bl	6f4 <__aeabi_fadd>
   1052a:	1c29      	adds	r1, r5, #0
   1052c:	1c06      	adds	r6, r0, #0
   1052e:	1c28      	adds	r0, r5, #0
   10530:	f7f0 fc30 	bl	d94 <__aeabi_fmul>
   10534:	1c01      	adds	r1, r0, #0
   10536:	1c30      	adds	r0, r6, #0
   10538:	f7f0 f8dc 	bl	6f4 <__aeabi_fadd>
   1053c:	f002 ffa8 	bl	13490 <sqrtf>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1059
	if (fNorm > CORRUPTQUAT)
   10540:	491f      	ldr	r1, [pc, #124]	; (105c0 <fqAeqNormqA+0xd0>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1058
void fqAeqNormqA(struct fquaternion *pqA)
{
	float fNorm;					// quaternion Norm

	// calculate the quaternion Norm
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
   10542:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1059
	if (fNorm > CORRUPTQUAT)
   10544:	f7f0 f8c2 	bl	6cc <__aeabi_fcmpgt>
   10548:	2800      	cmp	r0, #0
   1054a:	d030      	beq.n	105ae <fqAeqNormqA+0xbe>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1062
	{
		// general case
		fNorm = 1.0F / fNorm;
   1054c:	20fe      	movs	r0, #254	; 0xfe
   1054e:	1c29      	adds	r1, r5, #0
   10550:	0580      	lsls	r0, r0, #22
   10552:	f7f0 fa3b 	bl	9cc <__aeabi_fdiv>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1063
		pqA->q0 *= fNorm;
   10556:	6821      	ldr	r1, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1062
	// calculate the quaternion Norm
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
	if (fNorm > CORRUPTQUAT)
	{
		// general case
		fNorm = 1.0F / fNorm;
   10558:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1063
		pqA->q0 *= fNorm;
   1055a:	f7f0 fc1b 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1064
		pqA->q1 *= fNorm;
   1055e:	6861      	ldr	r1, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1063
	fNorm = sqrtf(pqA->q0 * pqA->q0 + pqA->q1 * pqA->q1 + pqA->q2 * pqA->q2 + pqA->q3 * pqA->q3);
	if (fNorm > CORRUPTQUAT)
	{
		// general case
		fNorm = 1.0F / fNorm;
		pqA->q0 *= fNorm;
   10560:	1c06      	adds	r6, r0, #0
   10562:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1064
		pqA->q1 *= fNorm;
   10564:	1c28      	adds	r0, r5, #0
   10566:	f7f0 fc15 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1065
		pqA->q2 *= fNorm;
   1056a:	68a1      	ldr	r1, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1064
	if (fNorm > CORRUPTQUAT)
	{
		// general case
		fNorm = 1.0F / fNorm;
		pqA->q0 *= fNorm;
		pqA->q1 *= fNorm;
   1056c:	6060      	str	r0, [r4, #4]
   1056e:	4680      	mov	r8, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1065
		pqA->q2 *= fNorm;
   10570:	1c28      	adds	r0, r5, #0
   10572:	f7f0 fc0f 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1066
		pqA->q3 *= fNorm;
   10576:	68e1      	ldr	r1, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1065
	{
		// general case
		fNorm = 1.0F / fNorm;
		pqA->q0 *= fNorm;
		pqA->q1 *= fNorm;
		pqA->q2 *= fNorm;
   10578:	60a0      	str	r0, [r4, #8]
   1057a:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1066
		pqA->q3 *= fNorm;
   1057c:	1c28      	adds	r0, r5, #0
   1057e:	f7f0 fc09 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1076
		pqA->q0 = 1.0F;
		pqA->q1 = pqA->q2 = pqA->q3 = 0.0F;
	}

	// correct a negative scalar component if the function was called with negative q0
	if (pqA->q0 < 0.0F)
   10582:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1066
		// general case
		fNorm = 1.0F / fNorm;
		pqA->q0 *= fNorm;
		pqA->q1 *= fNorm;
		pqA->q2 *= fNorm;
		pqA->q3 *= fNorm;
   10584:	1c05      	adds	r5, r0, #0
   10586:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1076
		pqA->q0 = 1.0F;
		pqA->q1 = pqA->q2 = pqA->q3 = 0.0F;
	}

	// correct a negative scalar component if the function was called with negative q0
	if (pqA->q0 < 0.0F)
   10588:	1c30      	adds	r0, r6, #0
   1058a:	f7f0 f88b 	bl	6a4 <__aeabi_fcmplt>
   1058e:	2800      	cmp	r0, #0
   10590:	d00a      	beq.n	105a8 <fqAeqNormqA+0xb8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1078
	{
		pqA->q0 = -pqA->q0;
   10592:	2280      	movs	r2, #128	; 0x80
   10594:	0612      	lsls	r2, r2, #24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1079
		pqA->q1 = -pqA->q1;
   10596:	1c13      	adds	r3, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1078
	}

	// correct a negative scalar component if the function was called with negative q0
	if (pqA->q0 < 0.0F)
	{
		pqA->q0 = -pqA->q0;
   10598:	18b6      	adds	r6, r6, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1079
		pqA->q1 = -pqA->q1;
   1059a:	4443      	add	r3, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1080
		pqA->q2 = -pqA->q2;
   1059c:	18bf      	adds	r7, r7, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1081
		pqA->q3 = -pqA->q3;
   1059e:	18ad      	adds	r5, r5, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1078
	}

	// correct a negative scalar component if the function was called with negative q0
	if (pqA->q0 < 0.0F)
	{
		pqA->q0 = -pqA->q0;
   105a0:	6026      	str	r6, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1079
		pqA->q1 = -pqA->q1;
   105a2:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1080
		pqA->q2 = -pqA->q2;
   105a4:	60a7      	str	r7, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1081
		pqA->q3 = -pqA->q3;
   105a6:	60e5      	str	r5, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1085
	}

	return;
}
   105a8:	bc04      	pop	{r2}
   105aa:	4690      	mov	r8, r2
   105ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1071
		pqA->q3 *= fNorm;
	}
	else
	{
		// return with identity quaternion since the quaternion is corrupted
		pqA->q0 = 1.0F;
   105ae:	23fe      	movs	r3, #254	; 0xfe
   105b0:	059b      	lsls	r3, r3, #22
   105b2:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1072
		pqA->q1 = pqA->q2 = pqA->q3 = 0.0F;
   105b4:	2300      	movs	r3, #0
   105b6:	60e3      	str	r3, [r4, #12]
   105b8:	60a3      	str	r3, [r4, #8]
   105ba:	6063      	str	r3, [r4, #4]
   105bc:	e7f4      	b.n	105a8 <fqAeqNormqA+0xb8>
   105be:	46c0      	nop			; (mov r8, r8)
   105c0:	3a83126f 	.word	0x3a83126f

000105c4 <fqAeq1>:
fqAeq1():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1090
}

// set a quaternion to the unit quaternion
void fqAeq1(struct fquaternion *pqA)
{
	pqA->q0 = 1.0F;
   105c4:	23fe      	movs	r3, #254	; 0xfe
   105c6:	059b      	lsls	r3, r3, #22
   105c8:	6003      	str	r3, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1091
	pqA->q1 = pqA->q2 = pqA->q3 = 0.0F;
   105ca:	2300      	movs	r3, #0
   105cc:	60c3      	str	r3, [r0, #12]
   105ce:	6083      	str	r3, [r0, #8]
   105d0:	6043      	str	r3, [r0, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/orientation.c:1094

	return;
}
   105d2:	4770      	bx	lr

000105d4 <RdSensData_Init>:
RdSensData_Init():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:99
struct SV_9DOF_GBY_KALMAN thisSV_9DOF_GBY_KALMAN;
#endif

// function initializes the sensors and the sensor data structures
void RdSensData_Init(void)
{
   105d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:118
#endif
	}

	// initialize the physical sensors over I2C
#if defined USE_MPL3115
	globals.iMPL3115Found = MPL3115_Init(I2C_DeviceData, &thisPressure);
   105d6:	4f0f      	ldr	r7, [pc, #60]	; (10614 <RdSensData_Init+0x40>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:106

	// zero sums of sensor data (typically 200Hz) on first execution
	for (i = X; i <= Z; i++)
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] = 0;
   105d8:	4e0f      	ldr	r6, [pc, #60]	; (10618 <RdSensData_Init+0x44>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:109
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
		thisMag.iSumBpFast[i] = 0;
   105da:	4d10      	ldr	r5, [pc, #64]	; (1061c <RdSensData_Init+0x48>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:112
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
		thisGyro.iSumYpFast[i] = 0;
   105dc:	4c10      	ldr	r4, [pc, #64]	; (10620 <RdSensData_Init+0x4c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:106

	// zero sums of sensor data (typically 200Hz) on first execution
	for (i = X; i <= Z; i++)
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] = 0;
   105de:	2300      	movs	r3, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:118
#endif
	}

	// initialize the physical sensors over I2C
#if defined USE_MPL3115
	globals.iMPL3115Found = MPL3115_Init(I2C_DeviceData, &thisPressure);
   105e0:	69b8      	ldr	r0, [r7, #24]
   105e2:	4910      	ldr	r1, [pc, #64]	; (10624 <RdSensData_Init+0x50>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:106

	// zero sums of sensor data (typically 200Hz) on first execution
	for (i = X; i <= Z; i++)
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] = 0;
   105e4:	6033      	str	r3, [r6, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:109
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
		thisMag.iSumBpFast[i] = 0;
   105e6:	602b      	str	r3, [r5, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:106

	// zero sums of sensor data (typically 200Hz) on first execution
	for (i = X; i <= Z; i++)
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] = 0;
   105e8:	6073      	str	r3, [r6, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:109
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
		thisMag.iSumBpFast[i] = 0;
   105ea:	606b      	str	r3, [r5, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:106

	// zero sums of sensor data (typically 200Hz) on first execution
	for (i = X; i <= Z; i++)
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] = 0;
   105ec:	60b3      	str	r3, [r6, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:109
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
		thisMag.iSumBpFast[i] = 0;
   105ee:	60ab      	str	r3, [r5, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:112
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
		thisGyro.iSumYpFast[i] = 0;
   105f0:	6023      	str	r3, [r4, #0]
   105f2:	6063      	str	r3, [r4, #4]
   105f4:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:118
#endif
	}

	// initialize the physical sensors over I2C
#if defined USE_MPL3115
	globals.iMPL3115Found = MPL3115_Init(I2C_DeviceData, &thisPressure);
   105f6:	f7f2 ffdb 	bl	35b0 <MPL3115_Init>
   105fa:	4b0b      	ldr	r3, [pc, #44]	; (10628 <RdSensData_Init+0x54>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:121
#endif
#if defined USE_FXOS8700
	FXOS8700_Init(I2C_DeviceData, &thisAccel, &thisMag);
   105fc:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:118
#endif
	}

	// initialize the physical sensors over I2C
#if defined USE_MPL3115
	globals.iMPL3115Found = MPL3115_Init(I2C_DeviceData, &thisPressure);
   105fe:	7258      	strb	r0, [r3, #9]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:121
#endif
#if defined USE_FXOS8700
	FXOS8700_Init(I2C_DeviceData, &thisAccel, &thisMag);
   10600:	1c2a      	adds	r2, r5, #0
   10602:	69b8      	ldr	r0, [r7, #24]
   10604:	f7f3 f83c 	bl	3680 <FXOS8700_Init>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:124
#endif
#if defined USE_FXAS21000
	FXAS21000_Init(I2C_DeviceData, &thisGyro);
   10608:	69b8      	ldr	r0, [r7, #24]
   1060a:	1c21      	adds	r1, r4, #0
   1060c:	f7f3 f8fa 	bl	3804 <FXAS21000_Init>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:137
#if defined USE_MAG3110
	MAG3110_Init(I2C_DeviceData, &thisMag);
#endif

	return;
}
   10610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10612:	46c0      	nop			; (mov r8, r8)
   10614:	1fffe108 	.word	0x1fffe108
   10618:	1fffe338 	.word	0x1fffe338
   1061c:	20000208 	.word	0x20000208
   10620:	1ffff4ec 	.word	0x1ffff4ec
   10624:	1ffff00c 	.word	0x1ffff00c
   10628:	1fffe310 	.word	0x1fffe310

0001062c <Fusion_Init>:
Fusion_Init():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:141

// function initializes the sensor fusion and magnetic calibration and sets loopcounter to zero
void Fusion_Init(void)
{
   1062c:	b510      	push	{r4, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:144
	// magnetic DOF: reset magnetic calibration and magnetometer data buffer (not needed for 3DOF)
#if defined COMPUTE_3DOF_B_BASIC || defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
	fInitMagCalibration(&thisMagCal, &thisMagBuffer);
   1062e:	480e      	ldr	r0, [pc, #56]	; (10668 <Fusion_Init+0x3c>)
   10630:	490e      	ldr	r1, [pc, #56]	; (1066c <Fusion_Init+0x40>)
   10632:	f7fb fb55 	bl	bce0 <fInitMagCalibration>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:154
	
	// force a reset of all the algorithms next time they execute
	// the initialization will result in the default and current quaternion being set to the most sophisticated
	// algorithm supported by the build
#if defined COMPUTE_1DOF_P_BASIC
	thisSV_1DOF_P_BASIC.resetflag = true;					
   10636:	480e      	ldr	r0, [pc, #56]	; (10670 <Fusion_Init+0x44>)
   10638:	2301      	movs	r3, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:157
#endif
#if defined COMPUTE_3DOF_G_BASIC
	thisSV_3DOF_G_BASIC.resetflag = true;				
   1063a:	4c0e      	ldr	r4, [pc, #56]	; (10674 <Fusion_Init+0x48>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:154
	
	// force a reset of all the algorithms next time they execute
	// the initialization will result in the default and current quaternion being set to the most sophisticated
	// algorithm supported by the build
#if defined COMPUTE_1DOF_P_BASIC
	thisSV_1DOF_P_BASIC.resetflag = true;					
   1063c:	7503      	strb	r3, [r0, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:157
#endif
#if defined COMPUTE_3DOF_G_BASIC
	thisSV_3DOF_G_BASIC.resetflag = true;				
   1063e:	20a0      	movs	r0, #160	; 0xa0
   10640:	5423      	strb	r3, [r4, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:160
#endif
#if defined COMPUTE_3DOF_B_BASIC
	thisSV_3DOF_B_BASIC.resetflag = true;	
   10642:	4c0d      	ldr	r4, [pc, #52]	; (10678 <Fusion_Init+0x4c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:148
#if defined COMPUTE_3DOF_B_BASIC || defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
	fInitMagCalibration(&thisMagCal, &thisMagBuffer);
#endif

	// reset the default quaternion type to the simplest Q3 (it will be updated during the initializations)
	globals.DefaultQuaternionPacketType = Q3;
   10644:	4a0d      	ldr	r2, [pc, #52]	; (1067c <Fusion_Init+0x50>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:160
#endif
#if defined COMPUTE_3DOF_G_BASIC
	thisSV_3DOF_G_BASIC.resetflag = true;				
#endif
#if defined COMPUTE_3DOF_B_BASIC
	thisSV_3DOF_B_BASIC.resetflag = true;	
   10646:	5423      	strb	r3, [r4, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:163
#endif
#if defined COMPUTE_3DOF_Y_BASIC
	thisSV_3DOF_Y_BASIC.resetflag = true;				
   10648:	4c0d      	ldr	r4, [pc, #52]	; (10680 <Fusion_Init+0x54>)
   1064a:	207c      	movs	r0, #124	; 0x7c
   1064c:	5423      	strb	r3, [r4, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:166
#endif
#if defined COMPUTE_6DOF_GB_BASIC
	thisSV_6DOF_GB_BASIC.resetflag = true;				
   1064e:	4c0d      	ldr	r4, [pc, #52]	; (10684 <Fusion_Init+0x58>)
   10650:	20a8      	movs	r0, #168	; 0xa8
   10652:	5423      	strb	r3, [r4, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:169
#endif
#if defined COMPUTE_6DOF_GY_KALMAN
	thisSV_6DOF_GY_KALMAN.resetflag = true;
   10654:	4c0c      	ldr	r4, [pc, #48]	; (10688 <Fusion_Init+0x5c>)
   10656:	480d      	ldr	r0, [pc, #52]	; (1068c <Fusion_Init+0x60>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:148
#if defined COMPUTE_3DOF_B_BASIC || defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
	fInitMagCalibration(&thisMagCal, &thisMagBuffer);
#endif

	// reset the default quaternion type to the simplest Q3 (it will be updated during the initializations)
	globals.DefaultQuaternionPacketType = Q3;
   10658:	2100      	movs	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:169
#endif
#if defined COMPUTE_6DOF_GB_BASIC
	thisSV_6DOF_GB_BASIC.resetflag = true;				
#endif
#if defined COMPUTE_6DOF_GY_KALMAN
	thisSV_6DOF_GY_KALMAN.resetflag = true;
   1065a:	5423      	strb	r3, [r4, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:172
#endif
#if defined COMPUTE_9DOF_GBY_KALMAN
	thisSV_9DOF_GBY_KALMAN.resetflag = true;
   1065c:	480c      	ldr	r0, [pc, #48]	; (10690 <Fusion_Init+0x64>)
   1065e:	4c0d      	ldr	r4, [pc, #52]	; (10694 <Fusion_Init+0x68>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:148
#if defined COMPUTE_3DOF_B_BASIC || defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
	fInitMagCalibration(&thisMagCal, &thisMagBuffer);
#endif

	// reset the default quaternion type to the simplest Q3 (it will be updated during the initializations)
	globals.DefaultQuaternionPacketType = Q3;
   10660:	7151      	strb	r1, [r2, #5]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:172
#endif
#if defined COMPUTE_6DOF_GY_KALMAN
	thisSV_6DOF_GY_KALMAN.resetflag = true;
#endif
#if defined COMPUTE_9DOF_GBY_KALMAN
	thisSV_9DOF_GBY_KALMAN.resetflag = true;
   10662:	5423      	strb	r3, [r4, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:176
#endif

	// reset the loop counter to zero for first iteration
	globals.loopcounter = 0;
   10664:	60d1      	str	r1, [r2, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:179

	return;
}
   10666:	bd10      	pop	{r4, pc}
   10668:	1ffff0d4 	.word	0x1ffff0d4
   1066c:	1fffe410 	.word	0x1fffe410
   10670:	1fffe320 	.word	0x1fffe320
   10674:	1fffef68 	.word	0x1fffef68
   10678:	1fffe36c 	.word	0x1fffe36c
   1067c:	1fffe310 	.word	0x1fffe310
   10680:	20000260 	.word	0x20000260
   10684:	1ffff028 	.word	0x1ffff028
   10688:	1ffffd78 	.word	0x1ffffd78
   1068c:	0000048e 	.word	0x0000048e
   10690:	00000836 	.word	0x00000836
   10694:	1ffff540 	.word	0x1ffff540

00010698 <RdSensData_Run>:
RdSensData_Run():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:183

// this function is called at (typically 200Hz) by MQX to read sensor data
void RdSensData_Run(void)
{
   10698:	b5f0      	push	{r4, r5, r6, r7, lr}
   1069a:	4656      	mov	r6, sl
   1069c:	465f      	mov	r7, fp
   1069e:	464d      	mov	r5, r9
   106a0:	4644      	mov	r4, r8
   106a2:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:189
	static int8 iCounter = 0;		// the number of gyro readings summed
	int8 i;							// loop counter

	// read the 200Hz sensor data and apply the HAL
#if defined USE_MPL3115
	if (globals.iMPL3115Found)
   106a4:	4bbf      	ldr	r3, [pc, #764]	; (109a4 <RdSensData_Run+0x30c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:183
	return;
}

// this function is called at (typically 200Hz) by MQX to read sensor data
void RdSensData_Run(void)
{
   106a6:	b08f      	sub	sp, #60	; 0x3c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:189
	static int8 iCounter = 0;		// the number of gyro readings summed
	int8 i;							// loop counter

	// read the 200Hz sensor data and apply the HAL
#if defined USE_MPL3115
	if (globals.iMPL3115Found)
   106a8:	7a5b      	ldrb	r3, [r3, #9]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:191
	{
		MPL3115_ReadData(I2C_DeviceData, &thisPressure);
   106aa:	4ebf      	ldr	r6, [pc, #764]	; (109a8 <RdSensData_Run+0x310>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:189
	static int8 iCounter = 0;		// the number of gyro readings summed
	int8 i;							// loop counter

	// read the 200Hz sensor data and apply the HAL
#if defined USE_MPL3115
	if (globals.iMPL3115Found)
   106ac:	b25b      	sxtb	r3, r3
   106ae:	2b00      	cmp	r3, #0
   106b0:	d000      	beq.n	106b4 <RdSensData_Run+0x1c>
   106b2:	e172      	b.n	1099a <RdSensData_Run+0x302>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:195
	{
		MPL3115_ReadData(I2C_DeviceData, &thisPressure);
	}
#endif
#if defined USE_FXOS8700
	FXOS8700_ReadData(I2C_DeviceData, &thisAccel, &thisMag);
   106b4:	4dbd      	ldr	r5, [pc, #756]	; (109ac <RdSensData_Run+0x314>)
   106b6:	4cbe      	ldr	r4, [pc, #760]	; (109b0 <RdSensData_Run+0x318>)
   106b8:	69b0      	ldr	r0, [r6, #24]
   106ba:	1c29      	adds	r1, r5, #0
   106bc:	1c22      	adds	r2, r4, #0
   106be:	f7f3 f953 	bl	3968 <FXOS8700_ReadData>
ApplyAccelHAL():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:500
	itmp16 = thisAccel.iGpFast[X];
	thisAccel.iGpFast[X] = thisAccel.iGpFast[Y];
	thisAccel.iGpFast[Y] = itmp16;
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisAccel.iGpFast[X] = -thisAccel.iGpFast[X];
   106c2:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
ApplyMagHAL():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:521
	thisMag.iBpFast[X] = -thisMag.iBpFast[Y];
	thisMag.iBpFast[Y] = -itmp16;
	thisMag.iBpFast[Z] = -thisMag.iBpFast[Z];
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisMag.iBpFast[X] = -thisMag.iBpFast[X];
   106c4:	2044      	movs	r0, #68	; 0x44
ApplyAccelHAL():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:500
	itmp16 = thisAccel.iGpFast[X];
	thisAccel.iGpFast[X] = thisAccel.iGpFast[Y];
	thisAccel.iGpFast[Y] = itmp16;
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisAccel.iGpFast[X] = -thisAccel.iGpFast[X];
   106c6:	425b      	negs	r3, r3
   106c8:	852b      	strh	r3, [r5, #40]	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:501
	thisAccel.iGpFast[Y] = -thisAccel.iGpFast[Y];
   106ca:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
ApplyMagHAL():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:522
	thisMag.iBpFast[Y] = -itmp16;
	thisMag.iBpFast[Z] = -thisMag.iBpFast[Z];
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisMag.iBpFast[X] = -thisMag.iBpFast[X];
	thisMag.iBpFast[Y] = -thisMag.iBpFast[Y];	
   106cc:	2746      	movs	r7, #70	; 0x46
ApplyAccelHAL():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:501
	thisAccel.iGpFast[X] = thisAccel.iGpFast[Y];
	thisAccel.iGpFast[Y] = itmp16;
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisAccel.iGpFast[X] = -thisAccel.iGpFast[X];
	thisAccel.iGpFast[Y] = -thisAccel.iGpFast[Y];
   106ce:	425b      	negs	r3, r3
   106d0:	856b      	strh	r3, [r5, #42]	; 0x2a
ApplyMagHAL():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:521
	thisMag.iBpFast[X] = -thisMag.iBpFast[Y];
	thisMag.iBpFast[Y] = -itmp16;
	thisMag.iBpFast[Z] = -thisMag.iBpFast[Z];
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisMag.iBpFast[X] = -thisMag.iBpFast[X];
   106d2:	5a23      	ldrh	r3, [r4, r0]
   106d4:	4680      	mov	r8, r0
   106d6:	425b      	negs	r3, r3
   106d8:	5223      	strh	r3, [r4, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:522
	thisMag.iBpFast[Y] = -thisMag.iBpFast[Y];	
   106da:	5be3      	ldrh	r3, [r4, r7]
RdSensData_Run():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:200
	FXOS8700_ReadData(I2C_DeviceData, &thisAccel, &thisMag);
	ApplyAccelHAL(&thisAccel);
	ApplyMagHAL(&thisMag);
#endif
#if defined USE_FXAS21000
	FXAS21000_ReadData(I2C_DeviceData, &thisGyro, iCounter);
   106dc:	69b0      	ldr	r0, [r6, #24]
ApplyMagHAL():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:522
	thisMag.iBpFast[Y] = -itmp16;
	thisMag.iBpFast[Z] = -thisMag.iBpFast[Z];
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisMag.iBpFast[X] = -thisMag.iBpFast[X];
	thisMag.iBpFast[Y] = -thisMag.iBpFast[Y];	
   106de:	425b      	negs	r3, r3
RdSensData_Run():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:200
	FXOS8700_ReadData(I2C_DeviceData, &thisAccel, &thisMag);
	ApplyAccelHAL(&thisAccel);
	ApplyMagHAL(&thisMag);
#endif
#if defined USE_FXAS21000
	FXAS21000_ReadData(I2C_DeviceData, &thisGyro, iCounter);
   106e0:	4eb4      	ldr	r6, [pc, #720]	; (109b4 <RdSensData_Run+0x31c>)
ApplyMagHAL():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:522
	thisMag.iBpFast[Y] = -itmp16;
	thisMag.iBpFast[Z] = -thisMag.iBpFast[Z];
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisMag.iBpFast[X] = -thisMag.iBpFast[X];
	thisMag.iBpFast[Y] = -thisMag.iBpFast[Y];	
   106e2:	53e3      	strh	r3, [r4, r7]
RdSensData_Run():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:200
	FXOS8700_ReadData(I2C_DeviceData, &thisAccel, &thisMag);
	ApplyAccelHAL(&thisAccel);
	ApplyMagHAL(&thisMag);
#endif
#if defined USE_FXAS21000
	FXAS21000_ReadData(I2C_DeviceData, &thisGyro, iCounter);
   106e4:	4bb4      	ldr	r3, [pc, #720]	; (109b8 <RdSensData_Run+0x320>)
   106e6:	2200      	movs	r2, #0
   106e8:	469a      	mov	sl, r3
   106ea:	569a      	ldrsb	r2, [r3, r2]
   106ec:	1c31      	adds	r1, r6, #0
   106ee:	f7f3 f9cf 	bl	3a90 <FXAS21000_ReadData>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:201
	ApplyGyroHAL(&thisGyro, iCounter);
   106f2:	4652      	mov	r2, sl
   106f4:	7812      	ldrb	r2, [r2, #0]
ApplyGyroHAL():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:548
	thisGyro.iYpFast[irow][X] = -thisGyro.iYpFast[irow][Y];
	thisGyro.iYpFast[irow][Y] = -itmp16;
	thisGyro.iYpFast[irow][Z] = -thisGyro.iYpFast[irow][Z];
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisGyro.iYpFast[irow][X] = -thisGyro.iYpFast[irow][X];
   106f6:	b253      	sxtb	r3, r2
RdSensData_Run():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:201
	ApplyAccelHAL(&thisAccel);
	ApplyMagHAL(&thisMag);
#endif
#if defined USE_FXAS21000
	FXAS21000_ReadData(I2C_DeviceData, &thisGyro, iCounter);
	ApplyGyroHAL(&thisGyro, iCounter);
   106f8:	4693      	mov	fp, r2
ApplyGyroHAL():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:548
	thisGyro.iYpFast[irow][X] = -thisGyro.iYpFast[irow][Y];
	thisGyro.iYpFast[irow][Y] = -itmp16;
	thisGyro.iYpFast[irow][Z] = -thisGyro.iYpFast[irow][Z];
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisGyro.iYpFast[irow][X] = -thisGyro.iYpFast[irow][X];
   106fa:	005a      	lsls	r2, r3, #1
   106fc:	18d3      	adds	r3, r2, r3
   106fe:	005b      	lsls	r3, r3, #1
   10700:	18f3      	adds	r3, r6, r3
   10702:	8b98      	ldrh	r0, [r3, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:549
	thisGyro.iYpFast[irow][Y] = -thisGyro.iYpFast[irow][Y];
   10704:	1c1a      	adds	r2, r3, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:548
	thisGyro.iYpFast[irow][X] = -thisGyro.iYpFast[irow][Y];
	thisGyro.iYpFast[irow][Y] = -itmp16;
	thisGyro.iYpFast[irow][Z] = -thisGyro.iYpFast[irow][Z];
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisGyro.iYpFast[irow][X] = -thisGyro.iYpFast[irow][X];
   10706:	4240      	negs	r0, r0
   10708:	9000      	str	r0, [sp, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:549
	thisGyro.iYpFast[irow][Y] = -thisGyro.iYpFast[irow][Y];
   1070a:	8bd9      	ldrh	r1, [r3, #30]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:548
	thisGyro.iYpFast[irow][X] = -thisGyro.iYpFast[irow][Y];
	thisGyro.iYpFast[irow][Y] = -itmp16;
	thisGyro.iYpFast[irow][Z] = -thisGyro.iYpFast[irow][Z];
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisGyro.iYpFast[irow][X] = -thisGyro.iYpFast[irow][X];
   1070c:	8398      	strh	r0, [r3, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:549
	thisGyro.iYpFast[irow][Y] = -thisGyro.iYpFast[irow][Y];
   1070e:	4249      	negs	r1, r1
   10710:	83d1      	strh	r1, [r2, #30]
RdSensData_Run():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:220

	// sum the 200Hz HAL-aligned sensor data
	for (i = X; i <= Z; i++)
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] += (int32) thisAccel.iGpFast[i];
   10712:	2028      	movs	r0, #40	; 0x28
   10714:	5e29      	ldrsh	r1, [r5, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:223
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
		thisMag.iSumBpFast[i] += (int32) thisMag.iBpFast[i];
   10716:	4640      	mov	r0, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:220

	// sum the 200Hz HAL-aligned sensor data
	for (i = X; i <= Z; i++)
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] += (int32) thisAccel.iGpFast[i];
   10718:	910a      	str	r1, [sp, #40]	; 0x28
   1071a:	6829      	ldr	r1, [r5, #0]
ApplyGyroHAL():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:549
	thisGyro.iYpFast[irow][Y] = -itmp16;
	thisGyro.iYpFast[irow][Z] = -thisGyro.iYpFast[irow][Z];
#endif // NED
#if THISCOORDSYSTEM == ANDROID
	thisGyro.iYpFast[irow][X] = -thisGyro.iYpFast[irow][X];
	thisGyro.iYpFast[irow][Y] = -thisGyro.iYpFast[irow][Y];
   1071c:	321a      	adds	r2, #26
RdSensData_Run():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:220

	// sum the 200Hz HAL-aligned sensor data
	for (i = X; i <= Z; i++)
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] += (int32) thisAccel.iGpFast[i];
   1071e:	4689      	mov	r9, r1
   10720:	990a      	ldr	r1, [sp, #40]	; 0x28
   10722:	4489      	add	r9, r1
   10724:	4649      	mov	r1, r9
   10726:	6029      	str	r1, [r5, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:223
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
		thisMag.iSumBpFast[i] += (int32) thisMag.iBpFast[i];
   10728:	5e20      	ldrsh	r0, [r4, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:226
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
		thisGyro.iSumYpFast[i] += (int32) thisGyro.iYpFast[iCounter][i];
   1072a:	9900      	ldr	r1, [sp, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:223
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] += (int32) thisAccel.iGpFast[i];
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
		thisMag.iSumBpFast[i] += (int32) thisMag.iBpFast[i];
   1072c:	9008      	str	r0, [sp, #32]
   1072e:	6820      	ldr	r0, [r4, #0]
   10730:	4680      	mov	r8, r0
   10732:	9808      	ldr	r0, [sp, #32]
   10734:	4480      	add	r8, r0
   10736:	4640      	mov	r0, r8
   10738:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:226
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
		thisGyro.iSumYpFast[i] += (int32) thisGyro.iYpFast[iCounter][i];
   1073a:	b208      	sxth	r0, r1
   1073c:	6831      	ldr	r1, [r6, #0]
   1073e:	1808      	adds	r0, r1, r0
   10740:	9000      	str	r0, [sp, #0]
   10742:	6030      	str	r0, [r6, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:220

	// sum the 200Hz HAL-aligned sensor data
	for (i = X; i <= Z; i++)
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] += (int32) thisAccel.iGpFast[i];
   10744:	212a      	movs	r1, #42	; 0x2a
   10746:	5e68      	ldrsh	r0, [r5, r1]
   10748:	6869      	ldr	r1, [r5, #4]
   1074a:	900b      	str	r0, [sp, #44]	; 0x2c
   1074c:	1808      	adds	r0, r1, r0
   1074e:	9001      	str	r0, [sp, #4]
   10750:	6068      	str	r0, [r5, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:223
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
		thisMag.iSumBpFast[i] += (int32) thisMag.iBpFast[i];
   10752:	5fe0      	ldrsh	r0, [r4, r7]
   10754:	6861      	ldr	r1, [r4, #4]
   10756:	9009      	str	r0, [sp, #36]	; 0x24
   10758:	1808      	adds	r0, r1, r0
   1075a:	9002      	str	r0, [sp, #8]
   1075c:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:226
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
		thisGyro.iSumYpFast[i] += (int32) thisGyro.iYpFast[iCounter][i];
   1075e:	2004      	movs	r0, #4
   10760:	5e12      	ldrsh	r2, [r2, r0]
   10762:	6871      	ldr	r1, [r6, #4]
   10764:	188a      	adds	r2, r1, r2
   10766:	9203      	str	r2, [sp, #12]
   10768:	6072      	str	r2, [r6, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:220

	// sum the 200Hz HAL-aligned sensor data
	for (i = X; i <= Z; i++)
	{
#if defined USE_FXOS8700 || defined USE_MMA8652
		thisAccel.iSumGpFast[i] += (int32) thisAccel.iGpFast[i];
   1076a:	202c      	movs	r0, #44	; 0x2c
   1076c:	5e2a      	ldrsh	r2, [r5, r0]
   1076e:	68a9      	ldr	r1, [r5, #8]
   10770:	920c      	str	r2, [sp, #48]	; 0x30
   10772:	1889      	adds	r1, r1, r2
   10774:	9104      	str	r1, [sp, #16]
   10776:	60a9      	str	r1, [r5, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:223
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
		thisMag.iSumBpFast[i] += (int32) thisMag.iBpFast[i];
   10778:	2248      	movs	r2, #72	; 0x48
   1077a:	5ea0      	ldrsh	r0, [r4, r2]
   1077c:	68a2      	ldr	r2, [r4, #8]
   1077e:	9007      	str	r0, [sp, #28]
   10780:	1812      	adds	r2, r2, r0
   10782:	9205      	str	r2, [sp, #20]
   10784:	60a2      	str	r2, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:226
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
		thisGyro.iSumYpFast[i] += (int32) thisGyro.iYpFast[iCounter][i];
   10786:	2020      	movs	r0, #32
   10788:	5e1b      	ldrsh	r3, [r3, r0]
   1078a:	68b1      	ldr	r1, [r6, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:231
#endif
	}

	// increment the decimation counter for the next iteration
	iCounter++;
   1078c:	4652      	mov	r2, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:226
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
		thisMag.iSumBpFast[i] += (int32) thisMag.iBpFast[i];
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
		thisGyro.iSumYpFast[i] += (int32) thisGyro.iYpFast[iCounter][i];
   1078e:	18cb      	adds	r3, r1, r3
   10790:	9306      	str	r3, [sp, #24]
   10792:	60b3      	str	r3, [r6, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:231
#endif
	}

	// increment the decimation counter for the next iteration
	iCounter++;
   10794:	465b      	mov	r3, fp
   10796:	3301      	adds	r3, #1
   10798:	b2db      	uxtb	r3, r3
   1079a:	7013      	strb	r3, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:234

	// every OVERSAMPLE_RATIO iterations process the summed over-sampled readings
	if (iCounter == OVERSAMPLE_RATIO)
   1079c:	2b08      	cmp	r3, #8
   1079e:	d000      	beq.n	107a2 <RdSensData_Run+0x10a>
   107a0:	e0f4      	b.n	1098c <RdSensData_Run+0x2f4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:239
	{
#if defined USE_MPL3115
		// for pressure and temperature, use the most recent measurement in preference to averaging
		// since the MPL3115 is configured for maximum 512 sample over-sampling already
		thisPressure.iHp = thisPressure.iHpFast;;
   107a2:	4f86      	ldr	r7, [pc, #536]	; (109bc <RdSensData_Run+0x324>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:240
		thisPressure.iTp = thisPressure.iTpFast;
   107a4:	8b7b      	ldrh	r3, [r7, #26]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:239
	if (iCounter == OVERSAMPLE_RATIO)
	{
#if defined USE_MPL3115
		// for pressure and temperature, use the most recent measurement in preference to averaging
		// since the MPL3115 is configured for maximum 512 sample over-sampling already
		thisPressure.iHp = thisPressure.iHpFast;;
   107a6:	6838      	ldr	r0, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:240
		thisPressure.iTp = thisPressure.iTpFast;
   107a8:	833b      	strh	r3, [r7, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:239
	if (iCounter == OVERSAMPLE_RATIO)
	{
#if defined USE_MPL3115
		// for pressure and temperature, use the most recent measurement in preference to averaging
		// since the MPL3115 is configured for maximum 512 sample over-sampling already
		thisPressure.iHp = thisPressure.iHpFast;;
   107aa:	6078      	str	r0, [r7, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:240
		thisPressure.iTp = thisPressure.iTpFast;
   107ac:	469b      	mov	fp, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:241
		thisPressure.fHp = (float) thisPressure.iHp * thisPressure.fmPerCount;
   107ae:	f7f0 fdb1 	bl	1314 <__aeabi_i2f>
   107b2:	6939      	ldr	r1, [r7, #16]
   107b4:	f7f0 faee 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:242
		thisPressure.fTp = (float) thisPressure.iTp * thisPressure.fCPerCount;
   107b8:	465a      	mov	r2, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:241
#if defined USE_MPL3115
		// for pressure and temperature, use the most recent measurement in preference to averaging
		// since the MPL3115 is configured for maximum 512 sample over-sampling already
		thisPressure.iHp = thisPressure.iHpFast;;
		thisPressure.iTp = thisPressure.iTpFast;
		thisPressure.fHp = (float) thisPressure.iHp * thisPressure.fmPerCount;
   107ba:	60b8      	str	r0, [r7, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:242
		thisPressure.fTp = (float) thisPressure.iTp * thisPressure.fCPerCount;
   107bc:	b210      	sxth	r0, r2
   107be:	f7f0 fda9 	bl	1314 <__aeabi_i2f>
   107c2:	6979      	ldr	r1, [r7, #20]
   107c4:	f7f0 fae6 	bl	d94 <__aeabi_fmul>
   107c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   107ca:	60f8      	str	r0, [r7, #12]
   107cc:	69b0      	ldr	r0, [r6, #24]
   107ce:	469b      	mov	fp, r3
   107d0:	900d      	str	r0, [sp, #52]	; 0x34
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:250
		// process the HAL-aligned sensor measurements prior to calling the sensor fusion
		for (i = X; i <= Z; i++)
		{
#if defined USE_FXOS8700 || defined USE_MMA8652
			// calculate the fast accelerometer reading for the Kalman filters (to reduce phase errors)
			thisAccel.fGpFast[i] = (float) thisAccel.iGpFast[i] * thisAccel.fgPerCount;
   107d2:	980a      	ldr	r0, [sp, #40]	; 0x28
   107d4:	f7f0 fd9e 	bl	1314 <__aeabi_i2f>
   107d8:	4659      	mov	r1, fp
   107da:	f7f0 fadb 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:252
			// calculate the average (typically 25Hz) accelerometer reading
			thisAccel.iGp[i] = (int16)(thisAccel.iSumGpFast[i] / OVERSAMPLE_RATIO);
   107de:	4649      	mov	r1, r9
   107e0:	17cb      	asrs	r3, r1, #31
   107e2:	0f5b      	lsrs	r3, r3, #29
   107e4:	444b      	add	r3, r9
   107e6:	10db      	asrs	r3, r3, #3
   107e8:	85eb      	strh	r3, [r5, #46]	; 0x2e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:250
		// process the HAL-aligned sensor measurements prior to calling the sensor fusion
		for (i = X; i <= Z; i++)
		{
#if defined USE_FXOS8700 || defined USE_MMA8652
			// calculate the fast accelerometer reading for the Kalman filters (to reduce phase errors)
			thisAccel.fGpFast[i] = (float) thisAccel.iGpFast[i] * thisAccel.fgPerCount;
   107ea:	60e8      	str	r0, [r5, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:253
			// calculate the average (typically 25Hz) accelerometer reading
			thisAccel.iGp[i] = (int16)(thisAccel.iSumGpFast[i] / OVERSAMPLE_RATIO);
			thisAccel.fGp[i] = (float) thisAccel.iSumGpFast[i] * thisAccel.fgPerCount / (float) OVERSAMPLE_RATIO;
   107ec:	4648      	mov	r0, r9
   107ee:	f7f0 fd91 	bl	1314 <__aeabi_i2f>
   107f2:	4659      	mov	r1, fp
   107f4:	f7f0 face 	bl	d94 <__aeabi_fmul>
   107f8:	21f8      	movs	r1, #248	; 0xf8
   107fa:	0589      	lsls	r1, r1, #22
   107fc:	f7f0 faca 	bl	d94 <__aeabi_fmul>
   10800:	6be7      	ldr	r7, [r4, #60]	; 0x3c
   10802:	61a8      	str	r0, [r5, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:257
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
			// calculate the fast magnetometer reading for the Kalman filters (to reduce phase errors)
			thisMag.fBpFast[i] = (float) thisMag.iBpFast[i] * thisMag.fuTPerCount;
   10804:	9808      	ldr	r0, [sp, #32]
   10806:	f7f0 fd85 	bl	1314 <__aeabi_i2f>
   1080a:	1c39      	adds	r1, r7, #0
   1080c:	f7f0 fac2 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:259
			// calculate the average (typically 25Hz) magnetometer reading
			thisMag.iBp[i] = (int16)(thisMag.iSumBpFast[i] / OVERSAMPLE_RATIO);
   10810:	4643      	mov	r3, r8
   10812:	17da      	asrs	r2, r3, #31
   10814:	0f52      	lsrs	r2, r2, #29
   10816:	4442      	add	r2, r8
   10818:	10d2      	asrs	r2, r2, #3
   1081a:	234a      	movs	r3, #74	; 0x4a
   1081c:	52e2      	strh	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:257
			thisAccel.iGp[i] = (int16)(thisAccel.iSumGpFast[i] / OVERSAMPLE_RATIO);
			thisAccel.fGp[i] = (float) thisAccel.iSumGpFast[i] * thisAccel.fgPerCount / (float) OVERSAMPLE_RATIO;
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
			// calculate the fast magnetometer reading for the Kalman filters (to reduce phase errors)
			thisMag.fBpFast[i] = (float) thisMag.iBpFast[i] * thisMag.fuTPerCount;
   1081e:	60e0      	str	r0, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:260
			// calculate the average (typically 25Hz) magnetometer reading
			thisMag.iBp[i] = (int16)(thisMag.iSumBpFast[i] / OVERSAMPLE_RATIO);
			thisMag.fBp[i] = (float) thisMag.iSumBpFast[i] * thisMag.fuTPerCount / (float) OVERSAMPLE_RATIO;
   10820:	4640      	mov	r0, r8
   10822:	f7f0 fd77 	bl	1314 <__aeabi_i2f>
   10826:	1c39      	adds	r1, r7, #0
   10828:	f7f0 fab4 	bl	d94 <__aeabi_fmul>
   1082c:	21f8      	movs	r1, #248	; 0xf8
   1082e:	0589      	lsls	r1, r1, #22
   10830:	f7f0 fab0 	bl	d94 <__aeabi_fmul>
   10834:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:264
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			// calculate the average (typically 25Hz) gyro reading
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
   10836:	9800      	ldr	r0, [sp, #0]
   10838:	214c      	movs	r1, #76	; 0x4c
   1083a:	17c3      	asrs	r3, r0, #31
   1083c:	0f5b      	lsrs	r3, r3, #29
   1083e:	181b      	adds	r3, r3, r0
   10840:	10db      	asrs	r3, r3, #3
   10842:	5273      	strh	r3, [r6, r1]
   10844:	4689      	mov	r9, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:265
			thisGyro.fYp[i] = (float) thisGyro.iSumYpFast[i] * thisGyro.fDegPerSecPerCount / (float) OVERSAMPLE_RATIO;
   10846:	f7f0 fd65 	bl	1314 <__aeabi_i2f>
   1084a:	990d      	ldr	r1, [sp, #52]	; 0x34
   1084c:	f7f0 faa2 	bl	d94 <__aeabi_fmul>
   10850:	21f8      	movs	r1, #248	; 0xf8
   10852:	0589      	lsls	r1, r1, #22
   10854:	f7f0 fa9e 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:269
#endif
			// zero the sensor sums for the next iteration
#if defined USE_FXOS8700 || defined USE_MMA8652
			thisAccel.iSumGpFast[i] = 0;
   10858:	2300      	movs	r3, #0
   1085a:	602b      	str	r3, [r5, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:272
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
			thisMag.iSumBpFast[i] = 0;
   1085c:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:275
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			thisGyro.iSumYpFast[i] = 0;
   1085e:	6033      	str	r3, [r6, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:265
			thisMag.fBp[i] = (float) thisMag.iSumBpFast[i] * thisMag.fuTPerCount / (float) OVERSAMPLE_RATIO;
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			// calculate the average (typically 25Hz) gyro reading
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
			thisGyro.fYp[i] = (float) thisGyro.iSumYpFast[i] * thisGyro.fDegPerSecPerCount / (float) OVERSAMPLE_RATIO;
   10860:	60f0      	str	r0, [r6, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:250
		// process the HAL-aligned sensor measurements prior to calling the sensor fusion
		for (i = X; i <= Z; i++)
		{
#if defined USE_FXOS8700 || defined USE_MMA8652
			// calculate the fast accelerometer reading for the Kalman filters (to reduce phase errors)
			thisAccel.fGpFast[i] = (float) thisAccel.iGpFast[i] * thisAccel.fgPerCount;
   10862:	980b      	ldr	r0, [sp, #44]	; 0x2c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:269
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
			thisGyro.fYp[i] = (float) thisGyro.iSumYpFast[i] * thisGyro.fDegPerSecPerCount / (float) OVERSAMPLE_RATIO;
#endif
			// zero the sensor sums for the next iteration
#if defined USE_FXOS8700 || defined USE_MMA8652
			thisAccel.iSumGpFast[i] = 0;
   10864:	4698      	mov	r8, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:250
		// process the HAL-aligned sensor measurements prior to calling the sensor fusion
		for (i = X; i <= Z; i++)
		{
#if defined USE_FXOS8700 || defined USE_MMA8652
			// calculate the fast accelerometer reading for the Kalman filters (to reduce phase errors)
			thisAccel.fGpFast[i] = (float) thisAccel.iGpFast[i] * thisAccel.fgPerCount;
   10866:	f7f0 fd55 	bl	1314 <__aeabi_i2f>
   1086a:	4659      	mov	r1, fp
   1086c:	f7f0 fa92 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:252
			// calculate the average (typically 25Hz) accelerometer reading
			thisAccel.iGp[i] = (int16)(thisAccel.iSumGpFast[i] / OVERSAMPLE_RATIO);
   10870:	9901      	ldr	r1, [sp, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:250
		// process the HAL-aligned sensor measurements prior to calling the sensor fusion
		for (i = X; i <= Z; i++)
		{
#if defined USE_FXOS8700 || defined USE_MMA8652
			// calculate the fast accelerometer reading for the Kalman filters (to reduce phase errors)
			thisAccel.fGpFast[i] = (float) thisAccel.iGpFast[i] * thisAccel.fgPerCount;
   10872:	6128      	str	r0, [r5, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:252
			// calculate the average (typically 25Hz) accelerometer reading
			thisAccel.iGp[i] = (int16)(thisAccel.iSumGpFast[i] / OVERSAMPLE_RATIO);
   10874:	17cb      	asrs	r3, r1, #31
   10876:	0f5b      	lsrs	r3, r3, #29
   10878:	185b      	adds	r3, r3, r1
   1087a:	10db      	asrs	r3, r3, #3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:253
			thisAccel.fGp[i] = (float) thisAccel.iSumGpFast[i] * thisAccel.fgPerCount / (float) OVERSAMPLE_RATIO;
   1087c:	1c08      	adds	r0, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:252
		{
#if defined USE_FXOS8700 || defined USE_MMA8652
			// calculate the fast accelerometer reading for the Kalman filters (to reduce phase errors)
			thisAccel.fGpFast[i] = (float) thisAccel.iGpFast[i] * thisAccel.fgPerCount;
			// calculate the average (typically 25Hz) accelerometer reading
			thisAccel.iGp[i] = (int16)(thisAccel.iSumGpFast[i] / OVERSAMPLE_RATIO);
   1087e:	862b      	strh	r3, [r5, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:253
			thisAccel.fGp[i] = (float) thisAccel.iSumGpFast[i] * thisAccel.fgPerCount / (float) OVERSAMPLE_RATIO;
   10880:	f7f0 fd48 	bl	1314 <__aeabi_i2f>
   10884:	4659      	mov	r1, fp
   10886:	f7f0 fa85 	bl	d94 <__aeabi_fmul>
   1088a:	21f8      	movs	r1, #248	; 0xf8
   1088c:	0589      	lsls	r1, r1, #22
   1088e:	f7f0 fa81 	bl	d94 <__aeabi_fmul>
   10892:	61e8      	str	r0, [r5, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:257
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
			// calculate the fast magnetometer reading for the Kalman filters (to reduce phase errors)
			thisMag.fBpFast[i] = (float) thisMag.iBpFast[i] * thisMag.fuTPerCount;
   10894:	9809      	ldr	r0, [sp, #36]	; 0x24
   10896:	f7f0 fd3d 	bl	1314 <__aeabi_i2f>
   1089a:	1c39      	adds	r1, r7, #0
   1089c:	f7f0 fa7a 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:259
			// calculate the average (typically 25Hz) magnetometer reading
			thisMag.iBp[i] = (int16)(thisMag.iSumBpFast[i] / OVERSAMPLE_RATIO);
   108a0:	9a02      	ldr	r2, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:257
			thisAccel.iGp[i] = (int16)(thisAccel.iSumGpFast[i] / OVERSAMPLE_RATIO);
			thisAccel.fGp[i] = (float) thisAccel.iSumGpFast[i] * thisAccel.fgPerCount / (float) OVERSAMPLE_RATIO;
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
			// calculate the fast magnetometer reading for the Kalman filters (to reduce phase errors)
			thisMag.fBpFast[i] = (float) thisMag.iBpFast[i] * thisMag.fuTPerCount;
   108a2:	6120      	str	r0, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:259
			// calculate the average (typically 25Hz) magnetometer reading
			thisMag.iBp[i] = (int16)(thisMag.iSumBpFast[i] / OVERSAMPLE_RATIO);
   108a4:	17d3      	asrs	r3, r2, #31
   108a6:	0f5b      	lsrs	r3, r3, #29
   108a8:	189b      	adds	r3, r3, r2
   108aa:	10db      	asrs	r3, r3, #3
   108ac:	4648      	mov	r0, r9
   108ae:	5223      	strh	r3, [r4, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:260
			thisMag.fBp[i] = (float) thisMag.iSumBpFast[i] * thisMag.fuTPerCount / (float) OVERSAMPLE_RATIO;
   108b0:	1c10      	adds	r0, r2, #0
   108b2:	f7f0 fd2f 	bl	1314 <__aeabi_i2f>
   108b6:	1c39      	adds	r1, r7, #0
   108b8:	f7f0 fa6c 	bl	d94 <__aeabi_fmul>
   108bc:	21f8      	movs	r1, #248	; 0xf8
   108be:	0589      	lsls	r1, r1, #22
   108c0:	f7f0 fa68 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:264
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			// calculate the average (typically 25Hz) gyro reading
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
   108c4:	9903      	ldr	r1, [sp, #12]
   108c6:	224e      	movs	r2, #78	; 0x4e
   108c8:	17cb      	asrs	r3, r1, #31
   108ca:	0f5b      	lsrs	r3, r3, #29
   108cc:	185b      	adds	r3, r3, r1
   108ce:	10db      	asrs	r3, r3, #3
   108d0:	52b3      	strh	r3, [r6, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:260
#if defined USE_FXOS8700 || defined USE_MAG3110
			// calculate the fast magnetometer reading for the Kalman filters (to reduce phase errors)
			thisMag.fBpFast[i] = (float) thisMag.iBpFast[i] * thisMag.fuTPerCount;
			// calculate the average (typically 25Hz) magnetometer reading
			thisMag.iBp[i] = (int16)(thisMag.iSumBpFast[i] / OVERSAMPLE_RATIO);
			thisMag.fBp[i] = (float) thisMag.iSumBpFast[i] * thisMag.fuTPerCount / (float) OVERSAMPLE_RATIO;
   108d2:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:265
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			// calculate the average (typically 25Hz) gyro reading
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
			thisGyro.fYp[i] = (float) thisGyro.iSumYpFast[i] * thisGyro.fDegPerSecPerCount / (float) OVERSAMPLE_RATIO;
   108d4:	1c08      	adds	r0, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:264
			thisMag.iBp[i] = (int16)(thisMag.iSumBpFast[i] / OVERSAMPLE_RATIO);
			thisMag.fBp[i] = (float) thisMag.iSumBpFast[i] * thisMag.fuTPerCount / (float) OVERSAMPLE_RATIO;
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			// calculate the average (typically 25Hz) gyro reading
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
   108d6:	4691      	mov	r9, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:265
			thisGyro.fYp[i] = (float) thisGyro.iSumYpFast[i] * thisGyro.fDegPerSecPerCount / (float) OVERSAMPLE_RATIO;
   108d8:	f7f0 fd1c 	bl	1314 <__aeabi_i2f>
   108dc:	990d      	ldr	r1, [sp, #52]	; 0x34
   108de:	f7f0 fa59 	bl	d94 <__aeabi_fmul>
   108e2:	21f8      	movs	r1, #248	; 0xf8
   108e4:	0589      	lsls	r1, r1, #22
   108e6:	f7f0 fa55 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:269
#endif
			// zero the sensor sums for the next iteration
#if defined USE_FXOS8700 || defined USE_MMA8652
			thisAccel.iSumGpFast[i] = 0;
   108ea:	4641      	mov	r1, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:265
			thisMag.fBp[i] = (float) thisMag.iSumBpFast[i] * thisMag.fuTPerCount / (float) OVERSAMPLE_RATIO;
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			// calculate the average (typically 25Hz) gyro reading
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
			thisGyro.fYp[i] = (float) thisGyro.iSumYpFast[i] * thisGyro.fDegPerSecPerCount / (float) OVERSAMPLE_RATIO;
   108ec:	6130      	str	r0, [r6, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:269
#endif
			// zero the sensor sums for the next iteration
#if defined USE_FXOS8700 || defined USE_MMA8652
			thisAccel.iSumGpFast[i] = 0;
   108ee:	6069      	str	r1, [r5, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:272
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
			thisMag.iSumBpFast[i] = 0;
   108f0:	6061      	str	r1, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:275
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			thisGyro.iSumYpFast[i] = 0;
   108f2:	6071      	str	r1, [r6, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:250
		// process the HAL-aligned sensor measurements prior to calling the sensor fusion
		for (i = X; i <= Z; i++)
		{
#if defined USE_FXOS8700 || defined USE_MMA8652
			// calculate the fast accelerometer reading for the Kalman filters (to reduce phase errors)
			thisAccel.fGpFast[i] = (float) thisAccel.iGpFast[i] * thisAccel.fgPerCount;
   108f4:	980c      	ldr	r0, [sp, #48]	; 0x30
   108f6:	f7f0 fd0d 	bl	1314 <__aeabi_i2f>
   108fa:	4659      	mov	r1, fp
   108fc:	f7f0 fa4a 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:252
			// calculate the average (typically 25Hz) accelerometer reading
			thisAccel.iGp[i] = (int16)(thisAccel.iSumGpFast[i] / OVERSAMPLE_RATIO);
   10900:	9a04      	ldr	r2, [sp, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:250
		// process the HAL-aligned sensor measurements prior to calling the sensor fusion
		for (i = X; i <= Z; i++)
		{
#if defined USE_FXOS8700 || defined USE_MMA8652
			// calculate the fast accelerometer reading for the Kalman filters (to reduce phase errors)
			thisAccel.fGpFast[i] = (float) thisAccel.iGpFast[i] * thisAccel.fgPerCount;
   10902:	6168      	str	r0, [r5, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:252
			// calculate the average (typically 25Hz) accelerometer reading
			thisAccel.iGp[i] = (int16)(thisAccel.iSumGpFast[i] / OVERSAMPLE_RATIO);
   10904:	17d3      	asrs	r3, r2, #31
   10906:	0f5b      	lsrs	r3, r3, #29
   10908:	189b      	adds	r3, r3, r2
   1090a:	10db      	asrs	r3, r3, #3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:253
			thisAccel.fGp[i] = (float) thisAccel.iSumGpFast[i] * thisAccel.fgPerCount / (float) OVERSAMPLE_RATIO;
   1090c:	1c10      	adds	r0, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:252
		{
#if defined USE_FXOS8700 || defined USE_MMA8652
			// calculate the fast accelerometer reading for the Kalman filters (to reduce phase errors)
			thisAccel.fGpFast[i] = (float) thisAccel.iGpFast[i] * thisAccel.fgPerCount;
			// calculate the average (typically 25Hz) accelerometer reading
			thisAccel.iGp[i] = (int16)(thisAccel.iSumGpFast[i] / OVERSAMPLE_RATIO);
   1090e:	866b      	strh	r3, [r5, #50]	; 0x32
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:253
			thisAccel.fGp[i] = (float) thisAccel.iSumGpFast[i] * thisAccel.fgPerCount / (float) OVERSAMPLE_RATIO;
   10910:	f7f0 fd00 	bl	1314 <__aeabi_i2f>
   10914:	4659      	mov	r1, fp
   10916:	f7f0 fa3d 	bl	d94 <__aeabi_fmul>
   1091a:	21f8      	movs	r1, #248	; 0xf8
   1091c:	0589      	lsls	r1, r1, #22
   1091e:	f7f0 fa39 	bl	d94 <__aeabi_fmul>
   10922:	6228      	str	r0, [r5, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:257
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
			// calculate the fast magnetometer reading for the Kalman filters (to reduce phase errors)
			thisMag.fBpFast[i] = (float) thisMag.iBpFast[i] * thisMag.fuTPerCount;
   10924:	9807      	ldr	r0, [sp, #28]
   10926:	f7f0 fcf5 	bl	1314 <__aeabi_i2f>
   1092a:	1c39      	adds	r1, r7, #0
   1092c:	f7f0 fa32 	bl	d94 <__aeabi_fmul>
   10930:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:259
			// calculate the average (typically 25Hz) magnetometer reading
			thisMag.iBp[i] = (int16)(thisMag.iSumBpFast[i] / OVERSAMPLE_RATIO);
   10932:	9805      	ldr	r0, [sp, #20]
   10934:	4649      	mov	r1, r9
   10936:	17c3      	asrs	r3, r0, #31
   10938:	0f5b      	lsrs	r3, r3, #29
   1093a:	181b      	adds	r3, r3, r0
   1093c:	10db      	asrs	r3, r3, #3
   1093e:	5263      	strh	r3, [r4, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:260
			thisMag.fBp[i] = (float) thisMag.iSumBpFast[i] * thisMag.fuTPerCount / (float) OVERSAMPLE_RATIO;
   10940:	f7f0 fce8 	bl	1314 <__aeabi_i2f>
   10944:	1c39      	adds	r1, r7, #0
   10946:	f7f0 fa25 	bl	d94 <__aeabi_fmul>
   1094a:	21f8      	movs	r1, #248	; 0xf8
   1094c:	0589      	lsls	r1, r1, #22
   1094e:	f7f0 fa21 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:264
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			// calculate the average (typically 25Hz) gyro reading
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
   10952:	9b06      	ldr	r3, [sp, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:260
#if defined USE_FXOS8700 || defined USE_MAG3110
			// calculate the fast magnetometer reading for the Kalman filters (to reduce phase errors)
			thisMag.fBpFast[i] = (float) thisMag.iBpFast[i] * thisMag.fuTPerCount;
			// calculate the average (typically 25Hz) magnetometer reading
			thisMag.iBp[i] = (int16)(thisMag.iSumBpFast[i] / OVERSAMPLE_RATIO);
			thisMag.fBp[i] = (float) thisMag.iSumBpFast[i] * thisMag.fuTPerCount / (float) OVERSAMPLE_RATIO;
   10954:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:264
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			// calculate the average (typically 25Hz) gyro reading
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
   10956:	17da      	asrs	r2, r3, #31
   10958:	0f52      	lsrs	r2, r2, #29
   1095a:	18d2      	adds	r2, r2, r3
   1095c:	10d2      	asrs	r2, r2, #3
   1095e:	2350      	movs	r3, #80	; 0x50
   10960:	52f2      	strh	r2, [r6, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:265
			thisGyro.fYp[i] = (float) thisGyro.iSumYpFast[i] * thisGyro.fDegPerSecPerCount / (float) OVERSAMPLE_RATIO;
   10962:	9806      	ldr	r0, [sp, #24]
   10964:	f7f0 fcd6 	bl	1314 <__aeabi_i2f>
   10968:	990d      	ldr	r1, [sp, #52]	; 0x34
   1096a:	f7f0 fa13 	bl	d94 <__aeabi_fmul>
   1096e:	21f8      	movs	r1, #248	; 0xf8
   10970:	0589      	lsls	r1, r1, #22
   10972:	f7f0 fa0f 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:280
			thisGyro.iSumYpFast[i] = 0;
#endif
		}

		// zero the counter and set the event flag to start the sensor fusion task
		iCounter = 0;
   10976:	4651      	mov	r1, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:265
			thisMag.fBp[i] = (float) thisMag.iSumBpFast[i] * thisMag.fuTPerCount / (float) OVERSAMPLE_RATIO;
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			// calculate the average (typically 25Hz) gyro reading
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
			thisGyro.fYp[i] = (float) thisGyro.iSumYpFast[i] * thisGyro.fDegPerSecPerCount / (float) OVERSAMPLE_RATIO;
   10978:	6170      	str	r0, [r6, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:269
#endif
			// zero the sensor sums for the next iteration
#if defined USE_FXOS8700 || defined USE_MMA8652
			thisAccel.iSumGpFast[i] = 0;
   1097a:	4640      	mov	r0, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:281
#endif
		}

		// zero the counter and set the event flag to start the sensor fusion task
		iCounter = 0;
		mqxglobals.RunKF_Event_Flag = 1;
   1097c:	4a10      	ldr	r2, [pc, #64]	; (109c0 <RdSensData_Run+0x328>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:280
			thisGyro.iSumYpFast[i] = 0;
#endif
		}

		// zero the counter and set the event flag to start the sensor fusion task
		iCounter = 0;
   1097e:	7008      	strb	r0, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:281
		mqxglobals.RunKF_Event_Flag = 1;
   10980:	2376      	movs	r3, #118	; 0x76
   10982:	2101      	movs	r1, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:269
			thisGyro.iYp[i] = (int16)(thisGyro.iSumYpFast[i] / OVERSAMPLE_RATIO);
			thisGyro.fYp[i] = (float) thisGyro.iSumYpFast[i] * thisGyro.fDegPerSecPerCount / (float) OVERSAMPLE_RATIO;
#endif
			// zero the sensor sums for the next iteration
#if defined USE_FXOS8700 || defined USE_MMA8652
			thisAccel.iSumGpFast[i] = 0;
   10984:	60a8      	str	r0, [r5, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:272
#endif
#if defined USE_FXOS8700 || defined USE_MAG3110
			thisMag.iSumBpFast[i] = 0;
   10986:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:275
#endif
#if defined USE_FXAS21000 || defined USE_FXAS21002
			thisGyro.iSumYpFast[i] = 0;
   10988:	60b0      	str	r0, [r6, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:281
#endif
		}

		// zero the counter and set the event flag to start the sensor fusion task
		iCounter = 0;
		mqxglobals.RunKF_Event_Flag = 1;
   1098a:	52d1      	strh	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:284

	} // end of over-sampling test
}
   1098c:	b00f      	add	sp, #60	; 0x3c
   1098e:	bc3c      	pop	{r2, r3, r4, r5}
   10990:	4690      	mov	r8, r2
   10992:	4699      	mov	r9, r3
   10994:	46a2      	mov	sl, r4
   10996:	46ab      	mov	fp, r5
   10998:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:191

	// read the 200Hz sensor data and apply the HAL
#if defined USE_MPL3115
	if (globals.iMPL3115Found)
	{
		MPL3115_ReadData(I2C_DeviceData, &thisPressure);
   1099a:	69b0      	ldr	r0, [r6, #24]
   1099c:	4907      	ldr	r1, [pc, #28]	; (109bc <RdSensData_Run+0x324>)
   1099e:	f7f2 ff9b 	bl	38d8 <MPL3115_ReadData>
   109a2:	e687      	b.n	106b4 <RdSensData_Run+0x1c>
   109a4:	1fffe310 	.word	0x1fffe310
   109a8:	1fffe108 	.word	0x1fffe108
   109ac:	1fffe338 	.word	0x1fffe338
   109b0:	20000208 	.word	0x20000208
   109b4:	1ffff4ec 	.word	0x1ffff4ec
   109b8:	1fffe09c 	.word	0x1fffe09c
   109bc:	1ffff00c 	.word	0x1ffff00c
   109c0:	1fffe294 	.word	0x1fffe294

000109c4 <Fusion_Run>:
Fusion_Run():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:288
	} // end of over-sampling test
}

// function runs the sensor fusion algorithms
void Fusion_Run(void)
{
   109c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   109c6:	464e      	mov	r6, r9
   109c8:	4645      	mov	r5, r8
   109ca:	4657      	mov	r7, sl
   109cc:	b4e0      	push	{r5, r6, r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:293
	int8 initiatemagcal;				// flag to initiate a new magnetic calibration

#if defined COMPUTE_3DOF_B_BASIC || defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
	// magnetic DOF: remove hard and soft iron terms from Bp (uT) to get calibrated data Bc (uT)
	fInvertMagCal(&thisMag, &thisMagCal);
   109ce:	4e9a      	ldr	r6, [pc, #616]	; (10c38 <Fusion_Run+0x274>)
   109d0:	4d9a      	ldr	r5, [pc, #616]	; (10c3c <Fusion_Run+0x278>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:288
	} // end of over-sampling test
}

// function runs the sensor fusion algorithms
void Fusion_Run(void)
{
   109d2:	b084      	sub	sp, #16
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:293
	int8 initiatemagcal;				// flag to initiate a new magnetic calibration

#if defined COMPUTE_3DOF_B_BASIC || defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
	// magnetic DOF: remove hard and soft iron terms from Bp (uT) to get calibrated data Bc (uT)
	fInvertMagCal(&thisMag, &thisMagCal);
   109d4:	1c30      	adds	r0, r6, #0
   109d6:	1c29      	adds	r1, r5, #0
   109d8:	f7fb fc0c 	bl	c1f4 <fInvertMagCal>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:297

	// update magnetic buffer checking for i) absence of first all-zero magnetometer output and ii) no calibration in progress
	// an all zero magnetometer reading can occur after power-on at rare intervals but it simply won't be used in the buffer
	if (!((globals.loopcounter < 100) && (thisMag.iBpFast[X] == 0) && (thisMag.iBpFast[Y] == 0) && (thisMag.iBpFast[Z] == 0)) && !thisMagCal.iCalInProgress)
   109dc:	4c98      	ldr	r4, [pc, #608]	; (10c40 <Fusion_Run+0x27c>)
   109de:	68e3      	ldr	r3, [r4, #12]
   109e0:	2b63      	cmp	r3, #99	; 0x63
   109e2:	dc03      	bgt.n	109ec <Fusion_Run+0x28>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:297 (discriminator 2)
   109e4:	6c71      	ldr	r1, [r6, #68]	; 0x44
   109e6:	2900      	cmp	r1, #0
   109e8:	d100      	bne.n	109ec <Fusion_Run+0x28>
   109ea:	e0e9      	b.n	10bc0 <Fusion_Run+0x1fc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:297 (discriminator 1)
   109ec:	4a95      	ldr	r2, [pc, #596]	; (10c44 <Fusion_Run+0x280>)
   109ee:	56aa      	ldrsb	r2, [r5, r2]
   109f0:	2a00      	cmp	r2, #0
   109f2:	d100      	bne.n	109f6 <Fusion_Run+0x32>
   109f4:	e115      	b.n	10c22 <Fusion_Run+0x25e>
   109f6:	4994      	ldr	r1, [pc, #592]	; (10c48 <Fusion_Run+0x284>)
   109f8:	4688      	mov	r8, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:306
	}
#endif

	// 1DOF Pressure low pass filter algorithm
#if defined COMPUTE_1DOF_P_BASIC
	thisSV_1DOF_P_BASIC.systick = SYST_CVR & 0x00FFFFFF;
   109fa:	4994      	ldr	r1, [pc, #592]	; (10c4c <Fusion_Run+0x288>)
   109fc:	4f94      	ldr	r7, [pc, #592]	; (10c50 <Fusion_Run+0x28c>)
   109fe:	688a      	ldr	r2, [r1, #8]
   10a00:	4689      	mov	r9, r1
   10a02:	0212      	lsls	r2, r2, #8
   10a04:	0a12      	lsrs	r2, r2, #8
   10a06:	613a      	str	r2, [r7, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:307
	fRun_1DOF_P_BASIC(&thisSV_1DOF_P_BASIC, &thisPressure, globals.loopcounter);
   10a08:	4992      	ldr	r1, [pc, #584]	; (10c54 <Fusion_Run+0x290>)
   10a0a:	1c1a      	adds	r2, r3, #0
   10a0c:	1c38      	adds	r0, r7, #0
   10a0e:	f7f6 f801 	bl	6a14 <fRun_1DOF_P_BASIC>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:308
	thisSV_1DOF_P_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
   10a12:	464a      	mov	r2, r9
   10a14:	6893      	ldr	r3, [r2, #8]
   10a16:	6939      	ldr	r1, [r7, #16]
   10a18:	021b      	lsls	r3, r3, #8
   10a1a:	0a1b      	lsrs	r3, r3, #8
   10a1c:	1acb      	subs	r3, r1, r3
   10a1e:	613b      	str	r3, [r7, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:309
	if (thisSV_1DOF_P_BASIC.systick < 0) thisSV_1DOF_P_BASIC.systick += SYST_RVR;	
   10a20:	d500      	bpl.n	10a24 <Fusion_Run+0x60>
   10a22:	e0ea      	b.n	10bfa <Fusion_Run+0x236>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:316

	// 3DOF Accel Basic: call the tilt algorithm, low pass filters and Euler angle calculation
#if defined COMPUTE_3DOF_G_BASIC
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q3))
	{
		thisSV_3DOF_G_BASIC.systick = SYST_CVR & 0x00FFFFFF;		
   10a24:	4a89      	ldr	r2, [pc, #548]	; (10c4c <Fusion_Run+0x288>)
   10a26:	4f8c      	ldr	r7, [pc, #560]	; (10c58 <Fusion_Run+0x294>)
   10a28:	6893      	ldr	r3, [r2, #8]
   10a2a:	4691      	mov	r9, r2
   10a2c:	021b      	lsls	r3, r3, #8
   10a2e:	0a1b      	lsrs	r3, r3, #8
   10a30:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:317
		fRun_3DOF_G_BASIC(&thisSV_3DOF_G_BASIC, &thisAccel, globals.loopcounter, THISCOORDSYSTEM);
   10a32:	4641      	mov	r1, r8
   10a34:	68e2      	ldr	r2, [r4, #12]
   10a36:	2301      	movs	r3, #1
   10a38:	1c38      	adds	r0, r7, #0
   10a3a:	f7f6 f80d 	bl	6a58 <fRun_3DOF_G_BASIC>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:318
		thisSV_3DOF_G_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
   10a3e:	464a      	mov	r2, r9
   10a40:	6893      	ldr	r3, [r2, #8]
   10a42:	6e39      	ldr	r1, [r7, #96]	; 0x60
   10a44:	021b      	lsls	r3, r3, #8
   10a46:	0a1b      	lsrs	r3, r3, #8
   10a48:	1acb      	subs	r3, r1, r3
   10a4a:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:319
		if (thisSV_3DOF_G_BASIC.systick < 0) thisSV_3DOF_G_BASIC.systick += SYST_RVR;
   10a4c:	d500      	bpl.n	10a50 <Fusion_Run+0x8c>
   10a4e:	e0d0      	b.n	10bf2 <Fusion_Run+0x22e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:327

	// 3DOF Magnetometer Basic: call the 2D vehicle compass algorithm
#if defined COMPUTE_3DOF_B_BASIC
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q3M))
	{
		thisSV_3DOF_B_BASIC.systick = SYST_CVR & 0x00FFFFFF;
   10a50:	4a7e      	ldr	r2, [pc, #504]	; (10c4c <Fusion_Run+0x288>)
   10a52:	4f82      	ldr	r7, [pc, #520]	; (10c5c <Fusion_Run+0x298>)
   10a54:	6893      	ldr	r3, [r2, #8]
   10a56:	4691      	mov	r9, r2
   10a58:	021b      	lsls	r3, r3, #8
   10a5a:	0a1b      	lsrs	r3, r3, #8
   10a5c:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:328
		fRun_3DOF_B_BASIC(&thisSV_3DOF_B_BASIC, &thisMag, globals.loopcounter, THISCOORDSYSTEM);
   10a5e:	1c31      	adds	r1, r6, #0
   10a60:	68e2      	ldr	r2, [r4, #12]
   10a62:	2301      	movs	r3, #1
   10a64:	1c38      	adds	r0, r7, #0
   10a66:	f7f6 f899 	bl	6b9c <fRun_3DOF_B_BASIC>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:329
		thisSV_3DOF_B_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
   10a6a:	464a      	mov	r2, r9
   10a6c:	6893      	ldr	r3, [r2, #8]
   10a6e:	6e39      	ldr	r1, [r7, #96]	; 0x60
   10a70:	021b      	lsls	r3, r3, #8
   10a72:	0a1b      	lsrs	r3, r3, #8
   10a74:	1acb      	subs	r3, r1, r3
   10a76:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:330
		if (thisSV_3DOF_B_BASIC.systick < 0) thisSV_3DOF_B_BASIC.systick += SYST_RVR;
   10a78:	d500      	bpl.n	10a7c <Fusion_Run+0xb8>
   10a7a:	e0ce      	b.n	10c1a <Fusion_Run+0x256>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:338

	// 3DOF Gyro Basic: call the gyro integration algorithm
#if defined COMPUTE_3DOF_Y_BASIC
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q3G))
	{
		thisSV_3DOF_Y_BASIC.systick = SYST_CVR & 0x00FFFFFF;
   10a7c:	4a73      	ldr	r2, [pc, #460]	; (10c4c <Fusion_Run+0x288>)
   10a7e:	4f78      	ldr	r7, [pc, #480]	; (10c60 <Fusion_Run+0x29c>)
   10a80:	6893      	ldr	r3, [r2, #8]
   10a82:	4692      	mov	sl, r2
   10a84:	021b      	lsls	r3, r3, #8
   10a86:	0a1b      	lsrs	r3, r3, #8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:339
		fRun_3DOF_Y_BASIC(&thisSV_3DOF_Y_BASIC, &thisGyro, globals.loopcounter, THISCOORDSYSTEM,
   10a88:	4a76      	ldr	r2, [pc, #472]	; (10c64 <Fusion_Run+0x2a0>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:338

	// 3DOF Gyro Basic: call the gyro integration algorithm
#if defined COMPUTE_3DOF_Y_BASIC
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q3G))
	{
		thisSV_3DOF_Y_BASIC.systick = SYST_CVR & 0x00FFFFFF;
   10a8a:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:339
		fRun_3DOF_Y_BASIC(&thisSV_3DOF_Y_BASIC, &thisGyro, globals.loopcounter, THISCOORDSYSTEM,
   10a8c:	2308      	movs	r3, #8
   10a8e:	9300      	str	r3, [sp, #0]
   10a90:	1c11      	adds	r1, r2, #0
   10a92:	2301      	movs	r3, #1
   10a94:	4691      	mov	r9, r2
   10a96:	1c38      	adds	r0, r7, #0
   10a98:	68e2      	ldr	r2, [r4, #12]
   10a9a:	f7f6 f92f 	bl	6cfc <fRun_3DOF_Y_BASIC>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:341
				OVERSAMPLE_RATIO);
		thisSV_3DOF_Y_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
   10a9e:	4651      	mov	r1, sl
   10aa0:	688b      	ldr	r3, [r1, #8]
   10aa2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   10aa4:	021b      	lsls	r3, r3, #8
   10aa6:	0a1b      	lsrs	r3, r3, #8
   10aa8:	1ad3      	subs	r3, r2, r3
   10aaa:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:342
		if (thisSV_3DOF_Y_BASIC.systick < 0) thisSV_3DOF_Y_BASIC.systick += SYST_RVR;
   10aac:	d500      	bpl.n	10ab0 <Fusion_Run+0xec>
   10aae:	e0b0      	b.n	10c12 <Fusion_Run+0x24e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:350

	// 6DOF Accel / Mag: Basic: call the eCompass orientation algorithm, low pass filters and Euler angle calculation
#if defined COMPUTE_6DOF_GB_BASIC
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q6MA))
	{
		thisSV_6DOF_GB_BASIC.systick = SYST_CVR & 0x00FFFFFF;
   10ab0:	4b66      	ldr	r3, [pc, #408]	; (10c4c <Fusion_Run+0x288>)
   10ab2:	4f6d      	ldr	r7, [pc, #436]	; (10c68 <Fusion_Run+0x2a4>)
   10ab4:	469a      	mov	sl, r3
   10ab6:	689b      	ldr	r3, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:351
		fRun_6DOF_GB_BASIC(&thisSV_6DOF_GB_BASIC, &thisMag, &thisAccel, globals.loopcounter, THISCOORDSYSTEM);
   10ab8:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:350

	// 6DOF Accel / Mag: Basic: call the eCompass orientation algorithm, low pass filters and Euler angle calculation
#if defined COMPUTE_6DOF_GB_BASIC
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q6MA))
	{
		thisSV_6DOF_GB_BASIC.systick = SYST_CVR & 0x00FFFFFF;
   10aba:	021b      	lsls	r3, r3, #8
   10abc:	0a1b      	lsrs	r3, r3, #8
   10abe:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:351
		fRun_6DOF_GB_BASIC(&thisSV_6DOF_GB_BASIC, &thisMag, &thisAccel, globals.loopcounter, THISCOORDSYSTEM);
   10ac0:	2301      	movs	r3, #1
   10ac2:	9300      	str	r3, [sp, #0]
   10ac4:	4642      	mov	r2, r8
   10ac6:	68e3      	ldr	r3, [r4, #12]
   10ac8:	1c38      	adds	r0, r7, #0
   10aca:	f7f6 f9e1 	bl	6e90 <fRun_6DOF_GB_BASIC>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:352
		thisSV_6DOF_GB_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
   10ace:	4652      	mov	r2, sl
   10ad0:	6893      	ldr	r3, [r2, #8]
   10ad2:	6e39      	ldr	r1, [r7, #96]	; 0x60
   10ad4:	021b      	lsls	r3, r3, #8
   10ad6:	0a1b      	lsrs	r3, r3, #8
   10ad8:	1acb      	subs	r3, r1, r3
   10ada:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:353
		if (thisSV_6DOF_GB_BASIC.systick < 0) thisSV_6DOF_GB_BASIC.systick += SYST_RVR;
   10adc:	d500      	bpl.n	10ae0 <Fusion_Run+0x11c>
   10ade:	e094      	b.n	10c0a <Fusion_Run+0x246>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:361

	// 6DOF Accel / Gyro: call the Kalman orientation algorithm
#if defined COMPUTE_6DOF_GY_KALMAN
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q6AG))
	{
		thisSV_6DOF_GY_KALMAN.systick = SYST_CVR & 0x00FFFFFF;
   10ae0:	4a5a      	ldr	r2, [pc, #360]	; (10c4c <Fusion_Run+0x288>)
   10ae2:	4f62      	ldr	r7, [pc, #392]	; (10c6c <Fusion_Run+0x2a8>)
   10ae4:	6893      	ldr	r3, [r2, #8]
   10ae6:	4692      	mov	sl, r2
   10ae8:	021b      	lsls	r3, r3, #8
   10aea:	0a1b      	lsrs	r3, r3, #8
   10aec:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:362
		fRun_6DOF_GY_KALMAN(&thisSV_6DOF_GY_KALMAN, &thisAccel,  &thisGyro, THISCOORDSYSTEM, OVERSAMPLE_RATIO);
   10aee:	2308      	movs	r3, #8
   10af0:	9300      	str	r3, [sp, #0]
   10af2:	4641      	mov	r1, r8
   10af4:	464a      	mov	r2, r9
   10af6:	2301      	movs	r3, #1
   10af8:	1c38      	adds	r0, r7, #0
   10afa:	f7f6 faa1 	bl	7040 <fRun_6DOF_GY_KALMAN>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:363
		thisSV_6DOF_GY_KALMAN.systick -= SYST_CVR & 0x00FFFFFF;
   10afe:	4652      	mov	r2, sl
   10b00:	6893      	ldr	r3, [r2, #8]
   10b02:	6e39      	ldr	r1, [r7, #96]	; 0x60
   10b04:	021b      	lsls	r3, r3, #8
   10b06:	0a1b      	lsrs	r3, r3, #8
   10b08:	1acb      	subs	r3, r1, r3
   10b0a:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:364
		if (thisSV_6DOF_GY_KALMAN.systick < 0) thisSV_6DOF_GY_KALMAN.systick += SYST_RVR;
   10b0c:	d500      	bpl.n	10b10 <Fusion_Run+0x14c>
   10b0e:	e078      	b.n	10c02 <Fusion_Run+0x23e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:372

	// 9DOF Accel / Mag / Gyro: apply the Kalman filter
#if defined COMPUTE_9DOF_GBY_KALMAN
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q9))
	{
		thisSV_9DOF_GBY_KALMAN.systick = SYST_CVR & 0x00FFFFFF;
   10b10:	4a4e      	ldr	r2, [pc, #312]	; (10c4c <Fusion_Run+0x288>)
   10b12:	4f57      	ldr	r7, [pc, #348]	; (10c70 <Fusion_Run+0x2ac>)
   10b14:	6893      	ldr	r3, [r2, #8]
   10b16:	4692      	mov	sl, r2
   10b18:	021b      	lsls	r3, r3, #8
   10b1a:	0a1b      	lsrs	r3, r3, #8
   10b1c:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:373
		fRun_9DOF_GBY_KALMAN(&thisSV_9DOF_GBY_KALMAN, &thisAccel, &thisMag, &thisGyro, &thisMagCal, THISCOORDSYSTEM, OVERSAMPLE_RATIO);
   10b1e:	2301      	movs	r3, #1
   10b20:	9301      	str	r3, [sp, #4]
   10b22:	2308      	movs	r3, #8
   10b24:	9302      	str	r3, [sp, #8]
   10b26:	4641      	mov	r1, r8
   10b28:	1c32      	adds	r2, r6, #0
   10b2a:	464b      	mov	r3, r9
   10b2c:	9500      	str	r5, [sp, #0]
   10b2e:	1c38      	adds	r0, r7, #0
   10b30:	f7f7 fad0 	bl	80d4 <fRun_9DOF_GBY_KALMAN>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:374
		thisSV_9DOF_GBY_KALMAN.systick -= SYST_CVR & 0x00FFFFFF;		
   10b34:	4652      	mov	r2, sl
   10b36:	6893      	ldr	r3, [r2, #8]
   10b38:	6e39      	ldr	r1, [r7, #96]	; 0x60
   10b3a:	021b      	lsls	r3, r3, #8
   10b3c:	0a1b      	lsrs	r3, r3, #8
   10b3e:	1acb      	subs	r3, r1, r3
   10b40:	663b      	str	r3, [r7, #96]	; 0x60
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:375
		if (thisSV_9DOF_GBY_KALMAN.systick < 0) thisSV_9DOF_GBY_KALMAN.systick += SYST_RVR;
   10b42:	d452      	bmi.n	10bea <Fusion_Run+0x226>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:382
#endif // COMPUTE_9DOF_GBY_KALMAN

	// 6DOF and 9DOF: decide whether to initiate a magnetic calibration
#if defined COMPUTE_3DOF_B_BASIC || defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
	// check no magnetic calibration is in progress
	if (!thisMagCal.iCalInProgress)
   10b44:	4b3f      	ldr	r3, [pc, #252]	; (10c44 <Fusion_Run+0x280>)
   10b46:	5cef      	ldrb	r7, [r5, r3]
   10b48:	2f00      	cmp	r7, #0
   10b4a:	d141      	bne.n	10bd0 <Fusion_Run+0x20c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:385
	{
		// do the first 4 element calibration immediately there are a minimum of MINMEASUREMENTS4CAL
		initiatemagcal = (!thisMagCal.iMagCalHasRun && (thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS4CAL));
   10b4c:	4b49      	ldr	r3, [pc, #292]	; (10c74 <Fusion_Run+0x2b0>)
   10b4e:	56eb      	ldrsb	r3, [r5, r3]
   10b50:	2b00      	cmp	r3, #0
   10b52:	d02c      	beq.n	10bae <Fusion_Run+0x1ea>
   10b54:	4b48      	ldr	r3, [pc, #288]	; (10c78 <Fusion_Run+0x2b4>)
   10b56:	4a49      	ldr	r2, [pc, #292]	; (10c7c <Fusion_Run+0x2b8>)
   10b58:	5ad3      	ldrh	r3, [r2, r3]
   10b5a:	4698      	mov	r8, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:388 (discriminator 4)

		// otherwise initiate a calibration at intervals depending on the number of measurements available
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS4CAL) && 
   10b5c:	4643      	mov	r3, r8
   10b5e:	b29b      	uxth	r3, r3
   10b60:	4699      	mov	r9, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:389 (discriminator 4)
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS7CAL) &&
   10b62:	3b28      	subs	r3, #40	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:390 (discriminator 4)
				!(globals.loopcounter % INTERVAL4CAL));
   10b64:	68e6      	ldr	r6, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:389 (discriminator 4)
		// do the first 4 element calibration immediately there are a minimum of MINMEASUREMENTS4CAL
		initiatemagcal = (!thisMagCal.iMagCalHasRun && (thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS4CAL));

		// otherwise initiate a calibration at intervals depending on the number of measurements available
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS4CAL) && 
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS7CAL) &&
   10b66:	2b3b      	cmp	r3, #59	; 0x3b
   10b68:	d805      	bhi.n	10b76 <Fusion_Run+0x1b2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:390 (discriminator 1)
				!(globals.loopcounter % INTERVAL4CAL));
   10b6a:	1c30      	adds	r0, r6, #0
   10b6c:	214b      	movs	r1, #75	; 0x4b
   10b6e:	f7ef fd3d 	bl	5ec <__aeabi_idivmod>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:389 (discriminator 1)
		// do the first 4 element calibration immediately there are a minimum of MINMEASUREMENTS4CAL
		initiatemagcal = (!thisMagCal.iMagCalHasRun && (thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS4CAL));

		// otherwise initiate a calibration at intervals depending on the number of measurements available
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS4CAL) && 
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS7CAL) &&
   10b72:	2900      	cmp	r1, #0
   10b74:	d05e      	beq.n	10c34 <Fusion_Run+0x270>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:392
				!(globals.loopcounter % INTERVAL4CAL));
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS7CAL) &&
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS10CAL) &&
   10b76:	464b      	mov	r3, r9
   10b78:	3b64      	subs	r3, #100	; 0x64
   10b7a:	2b31      	cmp	r3, #49	; 0x31
   10b7c:	d82a      	bhi.n	10bd4 <Fusion_Run+0x210>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:393 (discriminator 1)
				!(globals.loopcounter % INTERVAL7CAL));
   10b7e:	1c30      	adds	r0, r6, #0
   10b80:	21fa      	movs	r1, #250	; 0xfa
   10b82:	f7ef fd33 	bl	5ec <__aeabi_idivmod>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:392 (discriminator 1)
		// otherwise initiate a calibration at intervals depending on the number of measurements available
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS4CAL) && 
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS7CAL) &&
				!(globals.loopcounter % INTERVAL4CAL));
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS7CAL) &&
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS10CAL) &&
   10b86:	2900      	cmp	r1, #0
   10b88:	d001      	beq.n	10b8e <Fusion_Run+0x1ca>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:398 (discriminator 2)
				!(globals.loopcounter % INTERVAL7CAL));
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS10CAL) &&
				!(globals.loopcounter % INTERVAL10CAL));

		// initiate the magnetic calibration if any of the conditions are met
		if (initiatemagcal)
   10b8a:	2f00      	cmp	r7, #0
   10b8c:	d007      	beq.n	10b9e <Fusion_Run+0x1da>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:401
		{
			// set the flags denoting that a calibration is in progress
			thisMagCal.iCalInProgress = 1;
   10b8e:	4a2d      	ldr	r2, [pc, #180]	; (10c44 <Fusion_Run+0x280>)
   10b90:	2301      	movs	r3, #1
   10b92:	54ab      	strb	r3, [r5, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:402
			thisMagCal.iMagCalHasRun = 1;
   10b94:	4a37      	ldr	r2, [pc, #220]	; (10c74 <Fusion_Run+0x2b0>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:405

			// enable the magnetic calibration task to run
			mqxglobals.MagCal_Event_Flag = 1;
   10b96:	493a      	ldr	r1, [pc, #232]	; (10c80 <Fusion_Run+0x2bc>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:402
		// initiate the magnetic calibration if any of the conditions are met
		if (initiatemagcal)
		{
			// set the flags denoting that a calibration is in progress
			thisMagCal.iCalInProgress = 1;
			thisMagCal.iMagCalHasRun = 1;
   10b98:	54ab      	strb	r3, [r5, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:405

			// enable the magnetic calibration task to run
			mqxglobals.MagCal_Event_Flag = 1;
   10b9a:	2278      	movs	r2, #120	; 0x78
   10b9c:	528b      	strh	r3, [r1, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:411
		} // end of test whether to call calibration functions
	} // end of test that no calibration is already in progress
#endif

	// increment the loopcounter (used for time stamping magnetic data)
	globals.loopcounter++;
   10b9e:	3601      	adds	r6, #1
   10ba0:	60e6      	str	r6, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:414

	return;
}
   10ba2:	b004      	add	sp, #16
   10ba4:	bc1c      	pop	{r2, r3, r4}
   10ba6:	4690      	mov	r8, r2
   10ba8:	4699      	mov	r9, r3
   10baa:	46a2      	mov	sl, r4
   10bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:385 (discriminator 1)
#if defined COMPUTE_3DOF_B_BASIC || defined COMPUTE_6DOF_GB_BASIC || defined COMPUTE_9DOF_GBY_KALMAN
	// check no magnetic calibration is in progress
	if (!thisMagCal.iCalInProgress)
	{
		// do the first 4 element calibration immediately there are a minimum of MINMEASUREMENTS4CAL
		initiatemagcal = (!thisMagCal.iMagCalHasRun && (thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS4CAL));
   10bae:	4b32      	ldr	r3, [pc, #200]	; (10c78 <Fusion_Run+0x2b4>)
   10bb0:	4a32      	ldr	r2, [pc, #200]	; (10c7c <Fusion_Run+0x2b8>)
   10bb2:	5ad3      	ldrh	r3, [r2, r3]
   10bb4:	4698      	mov	r8, r3
   10bb6:	b21b      	sxth	r3, r3
   10bb8:	2b27      	cmp	r3, #39	; 0x27
   10bba:	ddcf      	ble.n	10b5c <Fusion_Run+0x198>
   10bbc:	2701      	movs	r7, #1
   10bbe:	e7cd      	b.n	10b5c <Fusion_Run+0x198>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:297 (discriminator 1)
	// magnetic DOF: remove hard and soft iron terms from Bp (uT) to get calibrated data Bc (uT)
	fInvertMagCal(&thisMag, &thisMagCal);

	// update magnetic buffer checking for i) absence of first all-zero magnetometer output and ii) no calibration in progress
	// an all zero magnetometer reading can occur after power-on at rare intervals but it simply won't be used in the buffer
	if (!((globals.loopcounter < 100) && (thisMag.iBpFast[X] == 0) && (thisMag.iBpFast[Y] == 0) && (thisMag.iBpFast[Z] == 0)) && !thisMagCal.iCalInProgress)
   10bc0:	2248      	movs	r2, #72	; 0x48
   10bc2:	5eb2      	ldrsh	r2, [r6, r2]
   10bc4:	2a00      	cmp	r2, #0
   10bc6:	d000      	beq.n	10bca <Fusion_Run+0x206>
   10bc8:	e710      	b.n	109ec <Fusion_Run+0x28>
   10bca:	4a1f      	ldr	r2, [pc, #124]	; (10c48 <Fusion_Run+0x284>)
   10bcc:	4690      	mov	r8, r2
   10bce:	e714      	b.n	109fa <Fusion_Run+0x36>
   10bd0:	68e6      	ldr	r6, [r4, #12]
   10bd2:	e7e4      	b.n	10b9e <Fusion_Run+0x1da>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:394
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS7CAL) &&
				!(globals.loopcounter % INTERVAL4CAL));
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS7CAL) &&
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS10CAL) &&
				!(globals.loopcounter % INTERVAL7CAL));
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS10CAL) &&
   10bd4:	4641      	mov	r1, r8
   10bd6:	b20b      	sxth	r3, r1
   10bd8:	2b95      	cmp	r3, #149	; 0x95
   10bda:	ddd6      	ble.n	10b8a <Fusion_Run+0x1c6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:395 (discriminator 1)
				!(globals.loopcounter % INTERVAL10CAL));
   10bdc:	1c30      	adds	r0, r6, #0
   10bde:	4929      	ldr	r1, [pc, #164]	; (10c84 <Fusion_Run+0x2c0>)
   10be0:	f7ef fd04 	bl	5ec <__aeabi_idivmod>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:394 (discriminator 1)
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS7CAL) &&
				!(globals.loopcounter % INTERVAL4CAL));
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS7CAL) &&
				(thisMagBuffer.iMagBufferCount < MINMEASUREMENTS10CAL) &&
				!(globals.loopcounter % INTERVAL7CAL));
		initiatemagcal |= ((thisMagBuffer.iMagBufferCount >= MINMEASUREMENTS10CAL) &&
   10be4:	2900      	cmp	r1, #0
   10be6:	d0d2      	beq.n	10b8e <Fusion_Run+0x1ca>
   10be8:	e7cf      	b.n	10b8a <Fusion_Run+0x1c6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:375 (discriminator 1)
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q9))
	{
		thisSV_9DOF_GBY_KALMAN.systick = SYST_CVR & 0x00FFFFFF;
		fRun_9DOF_GBY_KALMAN(&thisSV_9DOF_GBY_KALMAN, &thisAccel, &thisMag, &thisGyro, &thisMagCal, THISCOORDSYSTEM, OVERSAMPLE_RATIO);
		thisSV_9DOF_GBY_KALMAN.systick -= SYST_CVR & 0x00FFFFFF;		
		if (thisSV_9DOF_GBY_KALMAN.systick < 0) thisSV_9DOF_GBY_KALMAN.systick += SYST_RVR;
   10bea:	6852      	ldr	r2, [r2, #4]
   10bec:	189b      	adds	r3, r3, r2
   10bee:	663b      	str	r3, [r7, #96]	; 0x60
   10bf0:	e7a8      	b.n	10b44 <Fusion_Run+0x180>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:319 (discriminator 1)
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q3))
	{
		thisSV_3DOF_G_BASIC.systick = SYST_CVR & 0x00FFFFFF;		
		fRun_3DOF_G_BASIC(&thisSV_3DOF_G_BASIC, &thisAccel, globals.loopcounter, THISCOORDSYSTEM);
		thisSV_3DOF_G_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
		if (thisSV_3DOF_G_BASIC.systick < 0) thisSV_3DOF_G_BASIC.systick += SYST_RVR;
   10bf2:	6852      	ldr	r2, [r2, #4]
   10bf4:	189b      	adds	r3, r3, r2
   10bf6:	663b      	str	r3, [r7, #96]	; 0x60
   10bf8:	e72a      	b.n	10a50 <Fusion_Run+0x8c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:309 (discriminator 1)
	// 1DOF Pressure low pass filter algorithm
#if defined COMPUTE_1DOF_P_BASIC
	thisSV_1DOF_P_BASIC.systick = SYST_CVR & 0x00FFFFFF;
	fRun_1DOF_P_BASIC(&thisSV_1DOF_P_BASIC, &thisPressure, globals.loopcounter);
	thisSV_1DOF_P_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
	if (thisSV_1DOF_P_BASIC.systick < 0) thisSV_1DOF_P_BASIC.systick += SYST_RVR;	
   10bfa:	6852      	ldr	r2, [r2, #4]
   10bfc:	189b      	adds	r3, r3, r2
   10bfe:	613b      	str	r3, [r7, #16]
   10c00:	e710      	b.n	10a24 <Fusion_Run+0x60>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:364 (discriminator 1)
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q6AG))
	{
		thisSV_6DOF_GY_KALMAN.systick = SYST_CVR & 0x00FFFFFF;
		fRun_6DOF_GY_KALMAN(&thisSV_6DOF_GY_KALMAN, &thisAccel,  &thisGyro, THISCOORDSYSTEM, OVERSAMPLE_RATIO);
		thisSV_6DOF_GY_KALMAN.systick -= SYST_CVR & 0x00FFFFFF;
		if (thisSV_6DOF_GY_KALMAN.systick < 0) thisSV_6DOF_GY_KALMAN.systick += SYST_RVR;
   10c02:	6852      	ldr	r2, [r2, #4]
   10c04:	189b      	adds	r3, r3, r2
   10c06:	663b      	str	r3, [r7, #96]	; 0x60
   10c08:	e782      	b.n	10b10 <Fusion_Run+0x14c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:353 (discriminator 1)
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q6MA))
	{
		thisSV_6DOF_GB_BASIC.systick = SYST_CVR & 0x00FFFFFF;
		fRun_6DOF_GB_BASIC(&thisSV_6DOF_GB_BASIC, &thisMag, &thisAccel, globals.loopcounter, THISCOORDSYSTEM);
		thisSV_6DOF_GB_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
		if (thisSV_6DOF_GB_BASIC.systick < 0) thisSV_6DOF_GB_BASIC.systick += SYST_RVR;
   10c0a:	6852      	ldr	r2, [r2, #4]
   10c0c:	189b      	adds	r3, r3, r2
   10c0e:	663b      	str	r3, [r7, #96]	; 0x60
   10c10:	e766      	b.n	10ae0 <Fusion_Run+0x11c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:342 (discriminator 1)
	{
		thisSV_3DOF_Y_BASIC.systick = SYST_CVR & 0x00FFFFFF;
		fRun_3DOF_Y_BASIC(&thisSV_3DOF_Y_BASIC, &thisGyro, globals.loopcounter, THISCOORDSYSTEM,
				OVERSAMPLE_RATIO);
		thisSV_3DOF_Y_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
		if (thisSV_3DOF_Y_BASIC.systick < 0) thisSV_3DOF_Y_BASIC.systick += SYST_RVR;
   10c12:	684a      	ldr	r2, [r1, #4]
   10c14:	189b      	adds	r3, r3, r2
   10c16:	663b      	str	r3, [r7, #96]	; 0x60
   10c18:	e74a      	b.n	10ab0 <Fusion_Run+0xec>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:330 (discriminator 1)
	if (PARALLELNOTSEQUENTIAL || (globals.QuaternionPacketType == Q3M))
	{
		thisSV_3DOF_B_BASIC.systick = SYST_CVR & 0x00FFFFFF;
		fRun_3DOF_B_BASIC(&thisSV_3DOF_B_BASIC, &thisMag, globals.loopcounter, THISCOORDSYSTEM);
		thisSV_3DOF_B_BASIC.systick -= SYST_CVR & 0x00FFFFFF;
		if (thisSV_3DOF_B_BASIC.systick < 0) thisSV_3DOF_B_BASIC.systick += SYST_RVR;
   10c1a:	6852      	ldr	r2, [r2, #4]
   10c1c:	189b      	adds	r3, r3, r2
   10c1e:	663b      	str	r3, [r7, #96]	; 0x60
   10c20:	e72c      	b.n	10a7c <Fusion_Run+0xb8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:300
	// update magnetic buffer checking for i) absence of first all-zero magnetometer output and ii) no calibration in progress
	// an all zero magnetometer reading can occur after power-on at rare intervals but it simply won't be used in the buffer
	if (!((globals.loopcounter < 100) && (thisMag.iBpFast[X] == 0) && (thisMag.iBpFast[Y] == 0) && (thisMag.iBpFast[Z] == 0)) && !thisMagCal.iCalInProgress)
	{
		// update the magnetometer measurement buffer integer magnetometer data (typically at 25Hz)
		iUpdateMagnetometerBuffer(&thisMagBuffer, &thisAccel, &thisMag, globals.loopcounter);
   10c22:	4a09      	ldr	r2, [pc, #36]	; (10c48 <Fusion_Run+0x284>)
   10c24:	4815      	ldr	r0, [pc, #84]	; (10c7c <Fusion_Run+0x2b8>)
   10c26:	1c11      	adds	r1, r2, #0
   10c28:	4690      	mov	r8, r2
   10c2a:	1c32      	adds	r2, r6, #0
   10c2c:	f7fb f8cc 	bl	bdc8 <iUpdateMagnetometerBuffer>
   10c30:	68e3      	ldr	r3, [r4, #12]
   10c32:	e6e2      	b.n	109fa <Fusion_Run+0x36>
   10c34:	2701      	movs	r7, #1
   10c36:	e79e      	b.n	10b76 <Fusion_Run+0x1b2>
   10c38:	20000208 	.word	0x20000208
   10c3c:	1ffff0d4 	.word	0x1ffff0d4
   10c40:	1fffe310 	.word	0x1fffe310
   10c44:	00000414 	.word	0x00000414
   10c48:	1fffe338 	.word	0x1fffe338
   10c4c:	e000e010 	.word	0xe000e010
   10c50:	1fffe320 	.word	0x1fffe320
   10c54:	1ffff00c 	.word	0x1ffff00c
   10c58:	1fffef68 	.word	0x1fffef68
   10c5c:	1fffe36c 	.word	0x1fffe36c
   10c60:	20000260 	.word	0x20000260
   10c64:	1ffff4ec 	.word	0x1ffff4ec
   10c68:	1ffff028 	.word	0x1ffff028
   10c6c:	1ffffd78 	.word	0x1ffffd78
   10c70:	1ffff540 	.word	0x1ffff540
   10c74:	00000415 	.word	0x00000415
   10c78:	00000b56 	.word	0x00000b56
   10c7c:	1fffe410 	.word	0x1fffe410
   10c80:	1fffe294 	.word	0x1fffe294
   10c84:	000002ee 	.word	0x000002ee

00010c88 <MagCal_Run>:
MagCal_Run():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:418
	return;
}

// function runs the magnetic calibration
void MagCal_Run(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer)
{
   10c88:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c8a:	4647      	mov	r7, r8
   10c8c:	b480      	push	{r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:423
	int8 i, j;			// loop counters
	int8 isolver;		// magnetic solver used

	// 4 element calibration case
	if (pthisMagBuffer->iMagBufferCount < MINMEASUREMENTS7CAL)
   10c8e:	4b44      	ldr	r3, [pc, #272]	; (10da0 <MagCal_Run+0x118>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:418
	return;
}

// function runs the magnetic calibration
void MagCal_Run(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer)
{
   10c90:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:423
	int8 i, j;			// loop counters
	int8 isolver;		// magnetic solver used

	// 4 element calibration case
	if (pthisMagBuffer->iMagBufferCount < MINMEASUREMENTS7CAL)
   10c92:	5ecb      	ldrsh	r3, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:418
	return;
}

// function runs the magnetic calibration
void MagCal_Run(struct MagCalibration *pthisMagCal, struct MagneticBuffer *pthisMagBuffer)
{
   10c94:	1c0d      	adds	r5, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:423
	int8 i, j;			// loop counters
	int8 isolver;		// magnetic solver used

	// 4 element calibration case
	if (pthisMagBuffer->iMagBufferCount < MINMEASUREMENTS7CAL)
   10c96:	2b63      	cmp	r3, #99	; 0x63
   10c98:	dc59      	bgt.n	10d4e <MagCal_Run+0xc6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:426
	{
		// age the existing fit error to avoid one good calibration locking out future updates
		if (pthisMagCal->iValidMagCal)
   10c9a:	4b42      	ldr	r3, [pc, #264]	; (10da4 <MagCal_Run+0x11c>)
   10c9c:	56c3      	ldrsb	r3, [r0, r3]
   10c9e:	2b00      	cmp	r3, #0
   10ca0:	d167      	bne.n	10d72 <MagCal_Run+0xea>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:432
		{
			pthisMagCal->fFitErrorpc *= (1.0F + (float) INTERVAL4CAL * (float) OVERSAMPLE_RATIO / ((float) SENSORFS * FITERRORAGINGSECS));	
		}
		// call the 4 element matrix inversion calibration
		isolver = 4;
		fUpdateCalibration4INV(pthisMagCal, pthisMagBuffer, &thisMag);
   10ca2:	1c20      	adds	r0, r4, #0
   10ca4:	1c29      	adds	r1, r5, #0
   10ca6:	4a40      	ldr	r2, [pc, #256]	; (10da8 <MagCal_Run+0x120>)
   10ca8:	f7fb fb70 	bl	c38c <fUpdateCalibration4INV>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:431
		if (pthisMagCal->iValidMagCal)
		{
			pthisMagCal->fFitErrorpc *= (1.0F + (float) INTERVAL4CAL * (float) OVERSAMPLE_RATIO / ((float) SENSORFS * FITERRORAGINGSECS));	
		}
		// call the 4 element matrix inversion calibration
		isolver = 4;
   10cac:	2604      	movs	r6, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:460
		isolver = 10;
		fUpdateCalibration10EIG(pthisMagCal, pthisMagBuffer, &thisMag);
	}

	// the trial geomagnetic field must be in range (earth is 22uT to 67uT)
	if ((pthisMagCal->ftrB >= MINBFITUT) && (pthisMagCal->ftrB <= MAXBFITUT))		
   10cae:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
   10cb0:	493e      	ldr	r1, [pc, #248]	; (10dac <MagCal_Run+0x124>)
   10cb2:	1c28      	adds	r0, r5, #0
   10cb4:	f7ef fd14 	bl	6e0 <__aeabi_fcmpge>
   10cb8:	2800      	cmp	r0, #0
   10cba:	d042      	beq.n	10d42 <MagCal_Run+0xba>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:460 (discriminator 1)
   10cbc:	1c28      	adds	r0, r5, #0
   10cbe:	493c      	ldr	r1, [pc, #240]	; (10db0 <MagCal_Run+0x128>)
   10cc0:	f7ef fcfa 	bl	6b8 <__aeabi_fcmple>
   10cc4:	2800      	cmp	r0, #0
   10cc6:	d03c      	beq.n	10d42 <MagCal_Run+0xba>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:464
	{
		// always accept the calibration if i) no previous calibration exists ii) the calibration fit is reduced or
		// an improved solver was used giving a good trial calibration (4% or under)
		if ((pthisMagCal->iValidMagCal == 0) ||
   10cc8:	4b36      	ldr	r3, [pc, #216]	; (10da4 <MagCal_Run+0x11c>)
   10cca:	6f27      	ldr	r7, [r4, #112]	; 0x70
   10ccc:	5ce3      	ldrb	r3, [r4, r3]
   10cce:	4698      	mov	r8, r3
   10cd0:	2b00      	cmp	r3, #0
   10cd2:	d010      	beq.n	10cf6 <MagCal_Run+0x6e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:464 (discriminator 1)
   10cd4:	1c38      	adds	r0, r7, #0
   10cd6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   10cd8:	f7ef fcee 	bl	6b8 <__aeabi_fcmple>
   10cdc:	2800      	cmp	r0, #0
   10cde:	d10a      	bne.n	10cf6 <MagCal_Run+0x6e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:465
				(pthisMagCal->ftrFitErrorpc <= pthisMagCal->fFitErrorpc) ||
   10ce0:	4642      	mov	r2, r8
   10ce2:	b253      	sxtb	r3, r2
   10ce4:	429e      	cmp	r6, r3
   10ce6:	dd2c      	ble.n	10d42 <MagCal_Run+0xba>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:466
				((isolver > pthisMagCal->iValidMagCal) && (pthisMagCal->ftrFitErrorpc <= 4.0F)))
   10ce8:	2181      	movs	r1, #129	; 0x81
   10cea:	1c38      	adds	r0, r7, #0
   10cec:	05c9      	lsls	r1, r1, #23
   10cee:	f7ef fce3 	bl	6b8 <__aeabi_fcmple>
   10cf2:	2800      	cmp	r0, #0
   10cf4:	d025      	beq.n	10d42 <MagCal_Run+0xba>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:469
		{
			// accept the new calibration solution
			pthisMagCal->iValidMagCal = isolver;
   10cf6:	4b2b      	ldr	r3, [pc, #172]	; (10da4 <MagCal_Run+0x11c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:472
			pthisMagCal->fFitErrorpc = pthisMagCal->ftrFitErrorpc;
			pthisMagCal->fB = pthisMagCal->ftrB;
			pthisMagCal->fFourBsq = 4.0F * pthisMagCal->ftrB * pthisMagCal->ftrB;
   10cf8:	2181      	movs	r1, #129	; 0x81
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:469
		if ((pthisMagCal->iValidMagCal == 0) ||
				(pthisMagCal->ftrFitErrorpc <= pthisMagCal->fFitErrorpc) ||
				((isolver > pthisMagCal->iValidMagCal) && (pthisMagCal->ftrFitErrorpc <= 4.0F)))
		{
			// accept the new calibration solution
			pthisMagCal->iValidMagCal = isolver;
   10cfa:	54e6      	strb	r6, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:472
			pthisMagCal->fFitErrorpc = pthisMagCal->ftrFitErrorpc;
			pthisMagCal->fB = pthisMagCal->ftrB;
			pthisMagCal->fFourBsq = 4.0F * pthisMagCal->ftrB * pthisMagCal->ftrB;
   10cfc:	05c9      	lsls	r1, r1, #23
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:470
				(pthisMagCal->ftrFitErrorpc <= pthisMagCal->fFitErrorpc) ||
				((isolver > pthisMagCal->iValidMagCal) && (pthisMagCal->ftrFitErrorpc <= 4.0F)))
		{
			// accept the new calibration solution
			pthisMagCal->iValidMagCal = isolver;
			pthisMagCal->fFitErrorpc = pthisMagCal->ftrFitErrorpc;
   10cfe:	63a7      	str	r7, [r4, #56]	; 0x38
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:471
			pthisMagCal->fB = pthisMagCal->ftrB;
   10d00:	6325      	str	r5, [r4, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:472
			pthisMagCal->fFourBsq = 4.0F * pthisMagCal->ftrB * pthisMagCal->ftrB;
   10d02:	1c28      	adds	r0, r5, #0
   10d04:	f7f0 f846 	bl	d94 <__aeabi_fmul>
   10d08:	1c01      	adds	r1, r0, #0
   10d0a:	1c28      	adds	r0, r5, #0
   10d0c:	f7f0 f842 	bl	d94 <__aeabi_fmul>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:475
			for (i = X; i <= Z; i++)
			{
				pthisMagCal->fV[i] = pthisMagCal->ftrV[i];
   10d10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:478
				for (j = X; j <= Z; j++)
				{
					pthisMagCal->finvW[i][j] = pthisMagCal->ftrinvW[i][j];
   10d12:	6ca2      	ldr	r2, [r4, #72]	; 0x48
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:475
			pthisMagCal->fFitErrorpc = pthisMagCal->ftrFitErrorpc;
			pthisMagCal->fB = pthisMagCal->ftrB;
			pthisMagCal->fFourBsq = 4.0F * pthisMagCal->ftrB * pthisMagCal->ftrB;
			for (i = X; i <= Z; i++)
			{
				pthisMagCal->fV[i] = pthisMagCal->ftrV[i];
   10d14:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:478
				for (j = X; j <= Z; j++)
				{
					pthisMagCal->finvW[i][j] = pthisMagCal->ftrinvW[i][j];
   10d16:	60e2      	str	r2, [r4, #12]
   10d18:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   10d1a:	6d22      	ldr	r2, [r4, #80]	; 0x50
   10d1c:	6123      	str	r3, [r4, #16]
   10d1e:	6162      	str	r2, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:475
			pthisMagCal->fFitErrorpc = pthisMagCal->ftrFitErrorpc;
			pthisMagCal->fB = pthisMagCal->ftrB;
			pthisMagCal->fFourBsq = 4.0F * pthisMagCal->ftrB * pthisMagCal->ftrB;
			for (i = X; i <= Z; i++)
			{
				pthisMagCal->fV[i] = pthisMagCal->ftrV[i];
   10d20:	6c23      	ldr	r3, [r4, #64]	; 0x40
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:478
				for (j = X; j <= Z; j++)
				{
					pthisMagCal->finvW[i][j] = pthisMagCal->ftrinvW[i][j];
   10d22:	6d62      	ldr	r2, [r4, #84]	; 0x54
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:475
			pthisMagCal->fFitErrorpc = pthisMagCal->ftrFitErrorpc;
			pthisMagCal->fB = pthisMagCal->ftrB;
			pthisMagCal->fFourBsq = 4.0F * pthisMagCal->ftrB * pthisMagCal->ftrB;
			for (i = X; i <= Z; i++)
			{
				pthisMagCal->fV[i] = pthisMagCal->ftrV[i];
   10d24:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:478
				for (j = X; j <= Z; j++)
				{
					pthisMagCal->finvW[i][j] = pthisMagCal->ftrinvW[i][j];
   10d26:	61a2      	str	r2, [r4, #24]
   10d28:	6da3      	ldr	r3, [r4, #88]	; 0x58
   10d2a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   10d2c:	61e3      	str	r3, [r4, #28]
   10d2e:	6222      	str	r2, [r4, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:475
			pthisMagCal->fFitErrorpc = pthisMagCal->ftrFitErrorpc;
			pthisMagCal->fB = pthisMagCal->ftrB;
			pthisMagCal->fFourBsq = 4.0F * pthisMagCal->ftrB * pthisMagCal->ftrB;
			for (i = X; i <= Z; i++)
			{
				pthisMagCal->fV[i] = pthisMagCal->ftrV[i];
   10d30:	6c63      	ldr	r3, [r4, #68]	; 0x44
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:478
				for (j = X; j <= Z; j++)
				{
					pthisMagCal->finvW[i][j] = pthisMagCal->ftrinvW[i][j];
   10d32:	6e22      	ldr	r2, [r4, #96]	; 0x60
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:475
			pthisMagCal->fFitErrorpc = pthisMagCal->ftrFitErrorpc;
			pthisMagCal->fB = pthisMagCal->ftrB;
			pthisMagCal->fFourBsq = 4.0F * pthisMagCal->ftrB * pthisMagCal->ftrB;
			for (i = X; i <= Z; i++)
			{
				pthisMagCal->fV[i] = pthisMagCal->ftrV[i];
   10d34:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:478
				for (j = X; j <= Z; j++)
				{
					pthisMagCal->finvW[i][j] = pthisMagCal->ftrinvW[i][j];
   10d36:	6262      	str	r2, [r4, #36]	; 0x24
   10d38:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10d3a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:472
		{
			// accept the new calibration solution
			pthisMagCal->iValidMagCal = isolver;
			pthisMagCal->fFitErrorpc = pthisMagCal->ftrFitErrorpc;
			pthisMagCal->fB = pthisMagCal->ftrB;
			pthisMagCal->fFourBsq = 4.0F * pthisMagCal->ftrB * pthisMagCal->ftrB;
   10d3c:	6360      	str	r0, [r4, #52]	; 0x34
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:478
			for (i = X; i <= Z; i++)
			{
				pthisMagCal->fV[i] = pthisMagCal->ftrV[i];
				for (j = X; j <= Z; j++)
				{
					pthisMagCal->finvW[i][j] = pthisMagCal->ftrinvW[i][j];
   10d3e:	62a3      	str	r3, [r4, #40]	; 0x28
   10d40:	62e2      	str	r2, [r4, #44]	; 0x2c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:485
			}
		} // end of test to accept the new calibration 
	} // end of test for geomagenetic field strength in range

	// reset the calibration in progress flag to allow writing to the magnetic buffer
	pthisMagCal->iCalInProgress = 0;
   10d42:	4b1c      	ldr	r3, [pc, #112]	; (10db4 <MagCal_Run+0x12c>)
   10d44:	2200      	movs	r2, #0
   10d46:	54e2      	strb	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:488

	return;
}
   10d48:	bc04      	pop	{r2}
   10d4a:	4690      	mov	r8, r2
   10d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:435
		// call the 4 element matrix inversion calibration
		isolver = 4;
		fUpdateCalibration4INV(pthisMagCal, pthisMagBuffer, &thisMag);
	}
	// 7 element calibration case
	else if (pthisMagBuffer->iMagBufferCount < MINMEASUREMENTS10CAL)
   10d4e:	2b95      	cmp	r3, #149	; 0x95
   10d50:	dc15      	bgt.n	10d7e <MagCal_Run+0xf6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:438
	{
		// age the existing fit error to avoid one good calibration locking out future updates
		if (pthisMagCal->iValidMagCal)
   10d52:	4b14      	ldr	r3, [pc, #80]	; (10da4 <MagCal_Run+0x11c>)
   10d54:	56c3      	ldrsb	r3, [r0, r3]
   10d56:	2b00      	cmp	r3, #0
   10d58:	d004      	beq.n	10d64 <MagCal_Run+0xdc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:440
		{
			pthisMagCal->fFitErrorpc *= (1.0F + (float) INTERVAL7CAL * (float) OVERSAMPLE_RATIO / ((float) SENSORFS * FITERRORAGINGSECS));	
   10d5a:	6b80      	ldr	r0, [r0, #56]	; 0x38
   10d5c:	4916      	ldr	r1, [pc, #88]	; (10db8 <MagCal_Run+0x130>)
   10d5e:	f7f0 f819 	bl	d94 <__aeabi_fmul>
   10d62:	63a0      	str	r0, [r4, #56]	; 0x38
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:444
		}
		// call the 7 element eigenpair calibration
		isolver = 7;
		fUpdateCalibration7EIG(pthisMagCal, pthisMagBuffer, &thisMag);
   10d64:	1c20      	adds	r0, r4, #0
   10d66:	1c29      	adds	r1, r5, #0
   10d68:	4a0f      	ldr	r2, [pc, #60]	; (10da8 <MagCal_Run+0x120>)
   10d6a:	f7fb ff19 	bl	cba0 <fUpdateCalibration7EIG>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:443
		if (pthisMagCal->iValidMagCal)
		{
			pthisMagCal->fFitErrorpc *= (1.0F + (float) INTERVAL7CAL * (float) OVERSAMPLE_RATIO / ((float) SENSORFS * FITERRORAGINGSECS));	
		}
		// call the 7 element eigenpair calibration
		isolver = 7;
   10d6e:	2607      	movs	r6, #7
   10d70:	e79d      	b.n	10cae <MagCal_Run+0x26>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:428
	if (pthisMagBuffer->iMagBufferCount < MINMEASUREMENTS7CAL)
	{
		// age the existing fit error to avoid one good calibration locking out future updates
		if (pthisMagCal->iValidMagCal)
		{
			pthisMagCal->fFitErrorpc *= (1.0F + (float) INTERVAL4CAL * (float) OVERSAMPLE_RATIO / ((float) SENSORFS * FITERRORAGINGSECS));	
   10d72:	6b80      	ldr	r0, [r0, #56]	; 0x38
   10d74:	4911      	ldr	r1, [pc, #68]	; (10dbc <MagCal_Run+0x134>)
   10d76:	f7f0 f80d 	bl	d94 <__aeabi_fmul>
   10d7a:	63a0      	str	r0, [r4, #56]	; 0x38
   10d7c:	e791      	b.n	10ca2 <MagCal_Run+0x1a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:450
	}
	// 10 element calibration case
	else
	{
		// age the existing fit error to avoid one good calibration locking out future updates
		if (pthisMagCal->iValidMagCal)
   10d7e:	4b09      	ldr	r3, [pc, #36]	; (10da4 <MagCal_Run+0x11c>)
   10d80:	56c3      	ldrsb	r3, [r0, r3]
   10d82:	2b00      	cmp	r3, #0
   10d84:	d004      	beq.n	10d90 <MagCal_Run+0x108>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:452
		{
			pthisMagCal->fFitErrorpc *= (1.0F + (float) INTERVAL10CAL * (float) OVERSAMPLE_RATIO / ((float) SENSORFS * FITERRORAGINGSECS));	
   10d86:	6b80      	ldr	r0, [r0, #56]	; 0x38
   10d88:	490d      	ldr	r1, [pc, #52]	; (10dc0 <MagCal_Run+0x138>)
   10d8a:	f7f0 f803 	bl	d94 <__aeabi_fmul>
   10d8e:	63a0      	str	r0, [r4, #56]	; 0x38
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:456
		}
		// call the 10 element eigenpair calibration
		isolver = 10;
		fUpdateCalibration10EIG(pthisMagCal, pthisMagBuffer, &thisMag);
   10d90:	1c20      	adds	r0, r4, #0
   10d92:	1c29      	adds	r1, r5, #0
   10d94:	4a04      	ldr	r2, [pc, #16]	; (10da8 <MagCal_Run+0x120>)
   10d96:	f7fc f9f5 	bl	d184 <fUpdateCalibration10EIG>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/tasks.c:455
		if (pthisMagCal->iValidMagCal)
		{
			pthisMagCal->fFitErrorpc *= (1.0F + (float) INTERVAL10CAL * (float) OVERSAMPLE_RATIO / ((float) SENSORFS * FITERRORAGINGSECS));	
		}
		// call the 10 element eigenpair calibration
		isolver = 10;
   10d9a:	260a      	movs	r6, #10
   10d9c:	e787      	b.n	10cae <MagCal_Run+0x26>
   10d9e:	46c0      	nop			; (mov r8, r8)
   10da0:	00000b56 	.word	0x00000b56
   10da4:	00000416 	.word	0x00000416
   10da8:	20000208 	.word	0x20000208
   10dac:	41200000 	.word	0x41200000
   10db0:	42b40000 	.word	0x42b40000
   10db4:	00000414 	.word	0x00000414
   10db8:	3f802d83 	.word	0x3f802d83
   10dbc:	3f800da7 	.word	0x3f800da7
   10dc0:	3f808889 	.word	0x3f808889

00010dc4 <UserStartup>:
UserStartup():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:38
#include "mqx_tasks.h"
#include "UART.h"
#include "include_all.h"

void UserStartup(void)
{
   10dc4:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:44
	// The following UART functions initialize Bluetooth communications used by the
	// Freescale Sensor Fusion Toolbox.  If the developer is not using the toolbox,
	// these can be removed.
	//
	// initialize BlueRadios Bluetooth module
	BlueRadios_Init(UART_DeviceData);
   10dc6:	4b02      	ldr	r3, [pc, #8]	; (10dd0 <UserStartup+0xc>)
   10dc8:	6958      	ldr	r0, [r3, #20]
   10dca:	f7f2 fed7 	bl	3b7c <BlueRadios_Init>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:52
	//
	// PUT YOUR CODE HERE
	//

	return;
}
   10dce:	bd08      	pop	{r3, pc}
   10dd0:	1fffe108 	.word	0x1fffe108

00010dd4 <UserHighFrequencyTaskInit>:
UserHighFrequencyTaskInit():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:61
	// User code to be executed ONE TIME the first time the high frequency task is run.
	//
	// PUT YOUR CODE HERE
	//
	return;
}
   10dd4:	4770      	bx	lr
   10dd6:	46c0      	nop			; (mov r8, r8)

00010dd8 <UserMediumFrequencyTaskInit>:
UserMediumFrequencyTaskInit():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:70
	// User code to be executed ONE TIME the first time the medium frequency task is run
	//
	// PUT YOUR CODE HERE
	//
	return;
}
   10dd8:	4770      	bx	lr
   10dda:	46c0      	nop			; (mov r8, r8)

00010ddc <UserHighFrequencyTaskRun>:
UserHighFrequencyTaskRun():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:83
	// The high frequency task also has highest priority.
	//
	// PUT YOUR CODE HERE
	//
	return;
}
   10ddc:	4770      	bx	lr
   10dde:	46c0      	nop			; (mov r8, r8)

00010de0 <UserMediumFrequencyTaskRun>:
UserMediumFrequencyTaskRun():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:86

void UserMediumFrequencyTaskRun(void)
{
   10de0:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:103
#define MAXPACKETRATE 25
#define RATERESOLUTION 1000
	if (((int32)MAXPACKETRATE * (int32)OVERSAMPLE_RATIO) >= (int32)SENSORFS)
	{
		// no UART bandwidth problem: transmit the packets over UART (USB and Bluetooth)
		CreateAndSendBluetoothPacketsViaUART(UART_DeviceData);
   10de2:	4b02      	ldr	r3, [pc, #8]	; (10dec <UserMediumFrequencyTaskRun+0xc>)
   10de4:	6958      	ldr	r0, [r3, #20]
   10de6:	f7f2 fee3 	bl	3bb0 <CreateAndSendBluetoothPacketsViaUART>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Sources/user_tasks.c:123
	//
	// PUT YOUR CODE HERE
	//
	
	return;
}
   10dea:	bd08      	pop	{r3, pc}
   10dec:	1fffe108 	.word	0x1fffe108

00010df0 <__copy_rom_sections_to_ram>:
__copy_rom_sections_to_ram():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:116
void __copy_rom_sections_to_ram(void)
{

	int				index;

	if (__S_romp == 0L) return;
   10df0:	4b1c      	ldr	r3, [pc, #112]	; (10e64 <__copy_rom_sections_to_ram+0x74>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:112
 *  It is a table of RomInfo
 *	structures.  The final entry in the table has all-zero
 *	fields.
 */
void __copy_rom_sections_to_ram(void)
{
   10df2:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:116

	int				index;

	if (__S_romp == 0L) return;
   10df4:	2b00      	cmp	r3, #0
   10df6:	d100      	bne.n	10dfa <__copy_rom_sections_to_ram+0xa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:135

		__flush_cache( __S_romp[index].Target, __S_romp[index].Size);


	}
}
   10df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:116
void __copy_rom_sections_to_ram(void)
{

	int				index;

	if (__S_romp == 0L) return;
   10dfa:	2700      	movs	r7, #0
   10dfc:	2503      	movs	r5, #3
   10dfe:	2601      	movs	r6, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:122 (discriminator 1)

	/*
	 *	Go through the entire table, copying sections from ROM to RAM.
	 */
	for (index = 0;
		 __S_romp[index].Source != 0 ||
   10e00:	19d8      	adds	r0, r3, r7
   10e02:	6802      	ldr	r2, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:127 (discriminator 1)
		 __S_romp[index].Target != 0 ||
		 __S_romp[index].Size != 0;
		 ++index)
	{
		__copy_rom_section( __S_romp[index].Target,
   10e04:	6841      	ldr	r1, [r0, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:121 (discriminator 1)
	if (__S_romp == 0L) return;

	/*
	 *	Go through the entire table, copying sections from ROM to RAM.
	 */
	for (index = 0;
   10e06:	2a00      	cmp	r2, #0
   10e08:	d126      	bne.n	10e58 <__copy_rom_sections_to_ram+0x68>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:122
		 __S_romp[index].Source != 0 ||
   10e0a:	2900      	cmp	r1, #0
   10e0c:	d104      	bne.n	10e18 <__copy_rom_sections_to_ram+0x28>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:123
		 __S_romp[index].Target != 0 ||
   10e0e:	6882      	ldr	r2, [r0, #8]
   10e10:	2a00      	cmp	r2, #0
   10e12:	d0f1      	beq.n	10df8 <__copy_rom_sections_to_ram+0x8>
   10e14:	370c      	adds	r7, #12
   10e16:	e7f3      	b.n	10e00 <__copy_rom_sections_to_ram+0x10>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:127
		 __S_romp[index].Size != 0;
		 ++index)
	{
		__copy_rom_section( __S_romp[index].Target,
   10e18:	6880      	ldr	r0, [r0, #8]
__copy_rom_section():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:69
	const int size_short = sizeof(short);
	const int mask_short = sizeof(short)-1;

	const int size_char = sizeof(char);

	if( dst == src || size == 0)
   10e1a:	2800      	cmp	r0, #0
   10e1c:	d0fa      	beq.n	10e14 <__copy_rom_sections_to_ram+0x24>
   10e1e:	1c14      	adds	r4, r2, #0
   10e20:	430c      	orrs	r4, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:78


	while( len > 0)
	{

		if( !(src & mask_int) && !(dst & mask_int) && len >= size_int)
   10e22:	4225      	tst	r5, r4
   10e24:	d108      	bne.n	10e38 <__copy_rom_sections_to_ram+0x48>
   10e26:	2803      	cmp	r0, #3
   10e28:	d906      	bls.n	10e38 <__copy_rom_sections_to_ram+0x48>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:80
		{
			*((int *)dst)  = *((int*)src);
   10e2a:	ca10      	ldmia	r2!, {r4}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:83
			dst += size_int;
			src += size_int;
			len -= size_int;
   10e2c:	3804      	subs	r0, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:80
	while( len > 0)
	{

		if( !(src & mask_int) && !(dst & mask_int) && len >= size_int)
		{
			*((int *)dst)  = *((int*)src);
   10e2e:	c110      	stmia	r1!, {r4}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:69
	const int size_short = sizeof(short);
	const int mask_short = sizeof(short)-1;

	const int size_char = sizeof(char);

	if( dst == src || size == 0)
   10e30:	2800      	cmp	r0, #0
   10e32:	d1f4      	bne.n	10e1e <__copy_rom_sections_to_ram+0x2e>
   10e34:	370c      	adds	r7, #12
   10e36:	e7e3      	b.n	10e00 <__copy_rom_sections_to_ram+0x10>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:85
			*((int *)dst)  = *((int*)src);
			dst += size_int;
			src += size_int;
			len -= size_int;
		}
		else if( !(src & mask_short) && !(dst & mask_short) && len >= size_short)
   10e38:	4226      	tst	r6, r4
   10e3a:	d107      	bne.n	10e4c <__copy_rom_sections_to_ram+0x5c>
   10e3c:	2801      	cmp	r0, #1
   10e3e:	d905      	bls.n	10e4c <__copy_rom_sections_to_ram+0x5c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:87
		{
			*((short *)dst)  = *((short*)src);
   10e40:	8814      	ldrh	r4, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:90
			dst += size_short;
			src += size_short;
			len -= size_short;
   10e42:	3802      	subs	r0, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:87
			src += size_int;
			len -= size_int;
		}
		else if( !(src & mask_short) && !(dst & mask_short) && len >= size_short)
		{
			*((short *)dst)  = *((short*)src);
   10e44:	800c      	strh	r4, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:89
			dst += size_short;
			src += size_short;
   10e46:	3202      	adds	r2, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:88
			len -= size_int;
		}
		else if( !(src & mask_short) && !(dst & mask_short) && len >= size_short)
		{
			*((short *)dst)  = *((short*)src);
			dst += size_short;
   10e48:	3102      	adds	r1, #2
   10e4a:	e7e6      	b.n	10e1a <__copy_rom_sections_to_ram+0x2a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:94
			src += size_short;
			len -= size_short;
		}
		else
		{
			*((char *)dst)  = *((char*)src);
   10e4c:	7814      	ldrb	r4, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:97
			dst += size_char;
			src += size_char;
			len -= size_char;
   10e4e:	3801      	subs	r0, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:94
			src += size_short;
			len -= size_short;
		}
		else
		{
			*((char *)dst)  = *((char*)src);
   10e50:	700c      	strb	r4, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:96
			dst += size_char;
			src += size_char;
   10e52:	3201      	adds	r2, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:95
			len -= size_short;
		}
		else
		{
			*((char *)dst)  = *((char*)src);
			dst += size_char;
   10e54:	3101      	adds	r1, #1
   10e56:	e7e0      	b.n	10e1a <__copy_rom_sections_to_ram+0x2a>
__copy_rom_sections_to_ram():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:127
		 __S_romp[index].Source != 0 ||
		 __S_romp[index].Target != 0 ||
		 __S_romp[index].Size != 0;
		 ++index)
	{
		__copy_rom_section( __S_romp[index].Target,
   10e58:	6880      	ldr	r0, [r0, #8]
__copy_rom_section():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:69
	const int size_short = sizeof(short);
	const int mask_short = sizeof(short)-1;

	const int size_char = sizeof(char);

	if( dst == src || size == 0)
   10e5a:	428a      	cmp	r2, r1
   10e5c:	d1dd      	bne.n	10e1a <__copy_rom_sections_to_ram+0x2a>
   10e5e:	370c      	adds	r7, #12
   10e60:	e7ce      	b.n	10e00 <__copy_rom_sections_to_ram+0x10>
   10e62:	46c0      	nop			; (mov r8, r8)
   10e64:	00015a2c 	.word	0x00015a2c

00010e68 <__init_registers>:
__init_registers():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:189

// __init_registers, __init_hardware, __init_user suggested by Kobler
void __attribute__ ((weak)) __init_registers(void)
{

}
   10e68:	4770      	bx	lr
   10e6a:	46c0      	nop			; (mov r8, r8)

00010e6c <__init_user>:
__init_user():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:199
}

void __attribute__ ((weak)) __init_user(void)
{

}
   10e6c:	4770      	bx	lr
   10e6e:	46c0      	nop			; (mov r8, r8)

00010e70 <__thumb_startup>:
__thumb_startup():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:211
{
	__thumb_startup();
}

void __thumb_startup(void)
{
   10e70:	b538      	push	{r3, r4, r5, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:215
int addr = (int)__SP_INIT;

		// Setup registers
		__init_registers();
   10e72:	f7ff fff9 	bl	10e68 <__init_registers>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:218

		// setup hardware
		__init_hardware();
   10e76:	f001 fa91 	bl	1239c <__init_hardware>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:223

		// setup the stack before we attempt anything else
		// skip stack setup if __SP_INIT is 0
		// assume sp is already setup.
		__asm (
   10e7a:	4b18      	ldr	r3, [pc, #96]	; (10edc <skip_sp+0x4e>)
   10e7c:	1c18      	adds	r0, r3, #0
   10e7e:	2800      	cmp	r0, #0
   10e80:	d005      	beq.n	10e8e <skip_sp>
   10e82:	4685      	mov	sp, r0
   10e84:	b081      	sub	sp, #4
   10e86:	2000      	movs	r0, #0
   10e88:	43c0      	mvns	r0, r0
   10e8a:	9000      	str	r0, [sp, #0]
   10e8c:	b001      	add	sp, #4

00010e8e <skip_sp>:
zero_fill_bss():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:143
static void zero_fill_bss(void)
{
	extern char __START_BSS[];
	extern char __END_BSS[];

	unsigned long len = __END_BSS - __START_BSS;
   10e8e:	4b14      	ldr	r3, [pc, #80]	; (10ee0 <skip_sp+0x52>)
   10e90:	4a14      	ldr	r2, [pc, #80]	; (10ee4 <skip_sp+0x56>)
   10e92:	1ad2      	subs	r2, r2, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:154
	const int size_short = sizeof(short);
	const int mask_short = sizeof(short)-1;

	const int size_char = sizeof(char);

	if( len == 0)
   10e94:	d108      	bne.n	10ea8 <skip_sp+0x1a>
__thumb_startup():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:241

		//	zero-fill the .bss section
		zero_fill_bss();

    // SUPPORT_ROM_TO_RAM
			__copy_rom_sections_to_ram();
   10e96:	f7ff ffab 	bl	10df0 <__copy_rom_sections_to_ram>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:247

		//	call C++ static initializers
    //  __call_static_initializers();

		// initializations before main, user specific
		__init_user();
   10e9a:	f7ff ffe7 	bl	10e6c <__init_user>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:249

		main(0, argv);
   10e9e:	2000      	movs	r0, #0
   10ea0:	4911      	ldr	r1, [pc, #68]	; (10ee8 <skip_sp+0x5a>)
   10ea2:	f7fc fe61 	bl	db68 <main>
   10ea6:	e7fe      	b.n	10ea6 <skip_sp+0x18>
zero_fill_bss():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:163


	while( len > 0)
	{

		if( !(dst & mask_int) && len >= size_int)
   10ea8:	2503      	movs	r5, #3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:169
		{
			*((int *)dst)  = 0;
			dst += size_int;
			len -= size_int;
		}
		else if( !(dst & mask_short) && len >= size_short)
   10eaa:	2401      	movs	r4, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:177
			dst += size_short;
			len -= size_short;
		}
		else
		{
			*((char *)dst)  = 0;
   10eac:	2000      	movs	r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:163


	while( len > 0)
	{

		if( !(dst & mask_int) && len >= size_int)
   10eae:	1c29      	adds	r1, r5, #0
   10eb0:	4019      	ands	r1, r3
   10eb2:	d106      	bne.n	10ec2 <skip_sp+0x34>
   10eb4:	2a03      	cmp	r2, #3
   10eb6:	d904      	bls.n	10ec2 <skip_sp+0x34>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:165
		{
			*((int *)dst)  = 0;
   10eb8:	c302      	stmia	r3!, {r1}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:167
			dst += size_int;
			len -= size_int;
   10eba:	3a04      	subs	r2, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:160
	{
		return;
	}


	while( len > 0)
   10ebc:	2a00      	cmp	r2, #0
   10ebe:	d1f6      	bne.n	10eae <skip_sp+0x20>
   10ec0:	e7e9      	b.n	10e96 <skip_sp+0x8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:169
		{
			*((int *)dst)  = 0;
			dst += size_int;
			len -= size_int;
		}
		else if( !(dst & mask_short) && len >= size_short)
   10ec2:	1c21      	adds	r1, r4, #0
   10ec4:	4019      	ands	r1, r3
   10ec6:	d105      	bne.n	10ed4 <skip_sp+0x46>
   10ec8:	2a01      	cmp	r2, #1
   10eca:	d903      	bls.n	10ed4 <skip_sp+0x46>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:171
		{
			*((short *)dst)  = 0;
   10ecc:	8019      	strh	r1, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:173
			dst += size_short;
			len -= size_short;
   10ece:	3a02      	subs	r2, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:172
			len -= size_int;
		}
		else if( !(dst & mask_short) && len >= size_short)
		{
			*((short *)dst)  = 0;
			dst += size_short;
   10ed0:	3302      	adds	r3, #2
   10ed2:	e7f3      	b.n	10ebc <skip_sp+0x2e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:177
			len -= size_short;
		}
		else
		{
			*((char *)dst)  = 0;
   10ed4:	7018      	strb	r0, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:179
			dst += size_char;
			len -= size_char;
   10ed6:	3a01      	subs	r2, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Project_Settings/Startup_Code/startup.c:178
			len -= size_short;
		}
		else
		{
			*((char *)dst)  = 0;
			dst += size_char;
   10ed8:	3301      	adds	r3, #1
   10eda:	e7ef      	b.n	10ebc <skip_sp+0x2e>
   10edc:	20006000 	.word	0x20006000
   10ee0:	1fffe080 	.word	0x1fffe080
   10ee4:	200018e0 	.word	0x200018e0
   10ee8:	1fffe0a0 	.word	0x1fffe0a0

00010eec <_psp_int_install>:
_psp_int_install():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/int_inst.c:41
 * \brief This function initializes kernel interrupt tables.
 */
#if MQX_USE_INTERRUPTS

void _psp_int_install(void)
{
   10eec:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/int_inst.c:45
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);
    __set_MSP((uint_32)kernel_data->INTERRUPT_STACK_PTR);
   10eee:	4b03      	ldr	r3, [pc, #12]	; (10efc <_psp_int_install+0x10>)
   10ef0:	681b      	ldr	r3, [r3, #0]
   10ef2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   10ef4:	f004 fd37 	bl	15966 <__set_MSP>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/int_inst.c:61
        for (i = 16; i < PSP_MAXIMUM_INTERRUPT_VECTORS; i++) {
            ptr[i] = (uint_32)_int_kernel_isr;
        }
    }
#endif
}
   10ef8:	bd08      	pop	{r3, pc}
   10efa:	46c0      	nop			; (mov r8, r8)
   10efc:	1fffe000 	.word	0x1fffe000

00010f00 <_int_set_vector_table>:
_int_set_vector_table():

   _GET_KERNEL_DATA(kernel_data);
   kernel_data->USERS_VBR = addr;
#endif

   old = _PSP_GET_VTOR();
   10f00:	4b03      	ldr	r3, [pc, #12]	; (10f10 <_int_set_vector_table+0x10>)
   10f02:	22e0      	movs	r2, #224	; 0xe0
   10f04:	0612      	lsls	r2, r2, #24
   10f06:	58d1      	ldr	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/int_vtab.c:62
   _PSP_SET_VTOR(addr);
   10f08:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/int_vtab.c:66

   return (old);

} /* Endbody */
   10f0a:	1c08      	adds	r0, r1, #0
   10f0c:	4770      	bx	lr
   10f0e:	46c0      	nop			; (mov r8, r8)
   10f10:	0000ed08 	.word	0x0000ed08

00010f14 <_mem_zero>:
_mem_zero():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:56
      register pointer from_ptr,

      /* [IN] the number of bytes to zero */
      register _mem_size number_of_bytes
   )
{ /* Body */
   10f14:	b530      	push	{r4, r5, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:71
   uint_8_ptr from8_ptr = (uint_8_ptr) from_ptr;
   uint_16_ptr from16_ptr = (uint_16_ptr) from_ptr;
   register uint_32_ptr from32_ptr = (uint_32_ptr) from_ptr;
   register uint_32 loops;

   if (number_of_bytes > 3) {
   10f16:	2903      	cmp	r1, #3
   10f18:	d958      	bls.n	10fcc <_mem_zero+0xb8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:74

      /* Try to align source on word */
      if ((uint_32)from_ptr & 1) {
   10f1a:	07c3      	lsls	r3, r0, #31
   10f1c:	d503      	bpl.n	10f26 <_mem_zero+0x12>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:76
         from8_ptr = (uint_8_ptr) from_ptr;
         *from8_ptr++ = 0;
   10f1e:	2300      	movs	r3, #0
   10f20:	7003      	strb	r3, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:79

         from_ptr = from8_ptr;
         --number_of_bytes;
   10f22:	3901      	subs	r1, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:78
      /* Try to align source on word */
      if ((uint_32)from_ptr & 1) {
         from8_ptr = (uint_8_ptr) from_ptr;
         *from8_ptr++ = 0;

         from_ptr = from8_ptr;
   10f24:	3001      	adds	r0, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:83
         --number_of_bytes;
      } /* Endif */

      /* Try to align source on longword */
      if ((uint_32)from_ptr & 2) {
   10f26:	0783      	lsls	r3, r0, #30
   10f28:	d503      	bpl.n	10f32 <_mem_zero+0x1e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:86
         from16_ptr = (uint_16_ptr) from_ptr;

         *from16_ptr++ = 0;
   10f2a:	2300      	movs	r3, #0
   10f2c:	8003      	strh	r3, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:89

         from_ptr = from16_ptr;
         number_of_bytes -= 2;
   10f2e:	3902      	subs	r1, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:88
      if ((uint_32)from_ptr & 2) {
         from16_ptr = (uint_16_ptr) from_ptr;

         *from16_ptr++ = 0;

         from_ptr = from16_ptr;
   10f30:	3002      	adds	r0, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:99
      /*
      ** so lets copy longwords...
      ** to increase performance, we will do 64 bytes (16 * longwords) at once and after that jumping
      ** This consumes more RAM, more flash, but gets less instruction cycles.
      */
      for (loops = number_of_bytes >> 6; loops != 0; loops--) {
   10f32:	098d      	lsrs	r5, r1, #6
   10f34:	d018      	beq.n	10f68 <_mem_zero+0x54>
   10f36:	1c03      	adds	r3, r0, #0
   10f38:	1c2c      	adds	r4, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:101
         /* copy 16 longwords */
         *from32_ptr++ = 0;
   10f3a:	2200      	movs	r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:99 (discriminator 2)
      /*
      ** so lets copy longwords...
      ** to increase performance, we will do 64 bytes (16 * longwords) at once and after that jumping
      ** This consumes more RAM, more flash, but gets less instruction cycles.
      */
      for (loops = number_of_bytes >> 6; loops != 0; loops--) {
   10f3c:	3c01      	subs	r4, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:101 (discriminator 2)
         /* copy 16 longwords */
         *from32_ptr++ = 0;
   10f3e:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:102 (discriminator 2)
         *from32_ptr++ = 0;
   10f40:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:103 (discriminator 2)
         *from32_ptr++ = 0;
   10f42:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:104 (discriminator 2)
         *from32_ptr++ = 0;
   10f44:	60da      	str	r2, [r3, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:105 (discriminator 2)
         *from32_ptr++ = 0;
   10f46:	611a      	str	r2, [r3, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:106 (discriminator 2)
         *from32_ptr++ = 0;
   10f48:	615a      	str	r2, [r3, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:107 (discriminator 2)
         *from32_ptr++ = 0;
   10f4a:	619a      	str	r2, [r3, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:108 (discriminator 2)
         *from32_ptr++ = 0;
   10f4c:	61da      	str	r2, [r3, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:109 (discriminator 2)
         *from32_ptr++ = 0;
   10f4e:	621a      	str	r2, [r3, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:110 (discriminator 2)
         *from32_ptr++ = 0;
   10f50:	625a      	str	r2, [r3, #36]	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:111 (discriminator 2)
         *from32_ptr++ = 0;
   10f52:	629a      	str	r2, [r3, #40]	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:112 (discriminator 2)
         *from32_ptr++ = 0;
   10f54:	62da      	str	r2, [r3, #44]	; 0x2c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:113 (discriminator 2)
         *from32_ptr++ = 0;
   10f56:	631a      	str	r2, [r3, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:114 (discriminator 2)
         *from32_ptr++ = 0;
   10f58:	635a      	str	r2, [r3, #52]	; 0x34
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:115 (discriminator 2)
         *from32_ptr++ = 0;
   10f5a:	639a      	str	r2, [r3, #56]	; 0x38
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:116 (discriminator 2)
         *from32_ptr++ = 0;
   10f5c:	63da      	str	r2, [r3, #60]	; 0x3c
   10f5e:	3340      	adds	r3, #64	; 0x40
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:99 (discriminator 2)
      /*
      ** so lets copy longwords...
      ** to increase performance, we will do 64 bytes (16 * longwords) at once and after that jumping
      ** This consumes more RAM, more flash, but gets less instruction cycles.
      */
      for (loops = number_of_bytes >> 6; loops != 0; loops--) {
   10f60:	2c00      	cmp	r4, #0
   10f62:	d1eb      	bne.n	10f3c <_mem_zero+0x28>
   10f64:	01ad      	lsls	r5, r5, #6
   10f66:	1940      	adds	r0, r0, r5
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:120
         *from32_ptr++ = 0;
         *from32_ptr++ = 0;
      } /* Endwhile */

      /* Now, write the rest of bytes */
      switch ((number_of_bytes >> 2) & 0xF) {
   10f68:	233c      	movs	r3, #60	; 0x3c
   10f6a:	4a24      	ldr	r2, [pc, #144]	; (10ffc <_mem_zero+0xe8>)
   10f6c:	400b      	ands	r3, r1
   10f6e:	58d3      	ldr	r3, [r2, r3]
   10f70:	469f      	mov	pc, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:121
         case 15: *from32_ptr++ = 0;
   10f72:	2300      	movs	r3, #0
   10f74:	6003      	str	r3, [r0, #0]
   10f76:	3004      	adds	r0, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:122
         case 14: *from32_ptr++ = 0;
   10f78:	2300      	movs	r3, #0
   10f7a:	6003      	str	r3, [r0, #0]
   10f7c:	3004      	adds	r0, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:123
         case 13: *from32_ptr++ = 0;
   10f7e:	2200      	movs	r2, #0
   10f80:	1d03      	adds	r3, r0, #4
   10f82:	6002      	str	r2, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:124
         case 12: *from32_ptr++ = 0;
   10f84:	2200      	movs	r2, #0
   10f86:	1d18      	adds	r0, r3, #4
   10f88:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:125
         case 11: *from32_ptr++ = 0;
   10f8a:	2200      	movs	r2, #0
   10f8c:	1d03      	adds	r3, r0, #4
   10f8e:	6002      	str	r2, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:126
         case 10: *from32_ptr++ = 0;
   10f90:	2200      	movs	r2, #0
   10f92:	1d18      	adds	r0, r3, #4
   10f94:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:127
         case 9:  *from32_ptr++ = 0;
   10f96:	2200      	movs	r2, #0
   10f98:	1d03      	adds	r3, r0, #4
   10f9a:	6002      	str	r2, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:128
         case 8:  *from32_ptr++ = 0;
   10f9c:	2200      	movs	r2, #0
   10f9e:	1d18      	adds	r0, r3, #4
   10fa0:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:129
         case 7:  *from32_ptr++ = 0;
   10fa2:	2200      	movs	r2, #0
   10fa4:	1d03      	adds	r3, r0, #4
   10fa6:	6002      	str	r2, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:130
         case 6:  *from32_ptr++ = 0;
   10fa8:	2200      	movs	r2, #0
   10faa:	1d18      	adds	r0, r3, #4
   10fac:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:131
         case 5:  *from32_ptr++ = 0;
   10fae:	2200      	movs	r2, #0
   10fb0:	1d03      	adds	r3, r0, #4
   10fb2:	6002      	str	r2, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:132
         case 4:  *from32_ptr++ = 0;
   10fb4:	2200      	movs	r2, #0
   10fb6:	1d18      	adds	r0, r3, #4
   10fb8:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:133
         case 3:  *from32_ptr++ = 0;
   10fba:	2300      	movs	r3, #0
   10fbc:	1d02      	adds	r2, r0, #4
   10fbe:	6003      	str	r3, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:134
         case 2:  *from32_ptr++ = 0;
   10fc0:	2000      	movs	r0, #0
   10fc2:	1d13      	adds	r3, r2, #4
   10fc4:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:135
         case 1:  *from32_ptr++ = 0;
   10fc6:	2200      	movs	r2, #0
   10fc8:	1d18      	adds	r0, r3, #4
   10fca:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:147
#endif /* MQX_USE_BLOCK_MEM_ZERO */
      from_ptr = from32_ptr;
   } /* Endif */

   /* Copy all remaining bytes */
   if (number_of_bytes & 2) {
   10fcc:	078b      	lsls	r3, r1, #30
   10fce:	d502      	bpl.n	10fd6 <_mem_zero+0xc2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:150
      from16_ptr = (uint_16_ptr) from_ptr;

      *from16_ptr++ = 0;
   10fd0:	2300      	movs	r3, #0
   10fd2:	8003      	strh	r3, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:152

      from_ptr = from16_ptr;
   10fd4:	3002      	adds	r0, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:154
   } /* Endif */
   if (number_of_bytes & 1) {
   10fd6:	07cb      	lsls	r3, r1, #31
   10fd8:	d501      	bpl.n	10fde <_mem_zero+0xca>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:155
      * (uint_8_ptr) from_ptr = 0;
   10fda:	2300      	movs	r3, #0
   10fdc:	7003      	strb	r3, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:158
   } /* Endif */
#endif
} /* Endbody */
   10fde:	bd30      	pop	{r4, r5, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/mem_zero.c:120
         *from32_ptr++ = 0;
         *from32_ptr++ = 0;
      } /* Endwhile */

      /* Now, write the rest of bytes */
      switch ((number_of_bytes >> 2) & 0xF) {
   10fe0:	1c03      	adds	r3, r0, #0
   10fe2:	e7f0      	b.n	10fc6 <_mem_zero+0xb2>
   10fe4:	1c03      	adds	r3, r0, #0
   10fe6:	e7df      	b.n	10fa8 <_mem_zero+0x94>
   10fe8:	1c03      	adds	r3, r0, #0
   10fea:	e7d7      	b.n	10f9c <_mem_zero+0x88>
   10fec:	1c03      	adds	r3, r0, #0
   10fee:	e7e1      	b.n	10fb4 <_mem_zero+0xa0>
   10ff0:	1c02      	adds	r2, r0, #0
   10ff2:	e7e5      	b.n	10fc0 <_mem_zero+0xac>
   10ff4:	1c03      	adds	r3, r0, #0
   10ff6:	e7cb      	b.n	10f90 <_mem_zero+0x7c>
   10ff8:	1c03      	adds	r3, r0, #0
   10ffa:	e7c3      	b.n	10f84 <_mem_zero+0x70>
   10ffc:	0001508c 	.word	0x0001508c

00011000 <_psp_int_init>:
_psp_int_init():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_iinit.c:53
      _mqx_uint       first_user_isr_vector_number,

      /* [IN] the last user ISR vector number */
      _mqx_uint       last_user_isr_vector_number
   )
{ /* Body */
   11000:	b510      	push	{r4, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_iinit.c:57
   uint_32            error;

   /* Install kernel interrupt services */
   error = _int_init(first_user_isr_vector_number, last_user_isr_vector_number);
   11002:	f000 f981 	bl	11308 <_int_init>
   11006:	1e04      	subs	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_iinit.c:60

   /* Install PSP interrupt services */
   if (error == MQX_OK) {
   11008:	d101      	bne.n	1100e <_psp_int_init+0xe>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_iinit.c:61
      _psp_int_install();
   1100a:	f7ff ff6f 	bl	10eec <_psp_int_install>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_iinit.c:66
   } /* Endif */

   return error;

} /* Endbody */
   1100e:	1c20      	adds	r0, r4, #0
   11010:	bd10      	pop	{r4, pc}
   11012:	46c0      	nop			; (mov r8, r8)

00011014 <_psp_add_ticks>:
_psp_add_ticks():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:53
       PSP_TICK_STRUCT_PTR b_ptr,

       /* [OUT] The result of the addition */
       PSP_TICK_STRUCT_PTR r_ptr
   )
{ /* Body */
   11014:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:58
   register uint_32       a_hw_ticks;
   register uint_32       b_hw_ticks;
   register uint_32       hwtpt;

   r_ptr->TICKS[0] = a_ptr->TICKS[0] + b_ptr->TICKS[0];
   11016:	6806      	ldr	r6, [r0, #0]
   11018:	6847      	ldr	r7, [r0, #4]
   1101a:	680c      	ldr	r4, [r1, #0]
   1101c:	684d      	ldr	r5, [r1, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:60

   a_hw_ticks  = a_ptr->HW_TICKS[0];
   1101e:	6883      	ldr	r3, [r0, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:63
   b_hw_ticks  = b_ptr->HW_TICKS[0];

   hwtpt = _mqx_kernel_data->HW_TICKS_PER_TICK;
   11020:	480b      	ldr	r0, [pc, #44]	; (11050 <_psp_add_ticks+0x3c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:58
{ /* Body */
   register uint_32       a_hw_ticks;
   register uint_32       b_hw_ticks;
   register uint_32       hwtpt;

   r_ptr->TICKS[0] = a_ptr->TICKS[0] + b_ptr->TICKS[0];
   11022:	19a4      	adds	r4, r4, r6
   11024:	417d      	adcs	r5, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:63

   a_hw_ticks  = a_ptr->HW_TICKS[0];
   b_hw_ticks  = b_ptr->HW_TICKS[0];

   hwtpt = _mqx_kernel_data->HW_TICKS_PER_TICK;
   11026:	6806      	ldr	r6, [r0, #0]
   11028:	20a8      	movs	r0, #168	; 0xa8
   1102a:	0040      	lsls	r0, r0, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:61
   register uint_32       hwtpt;

   r_ptr->TICKS[0] = a_ptr->TICKS[0] + b_ptr->TICKS[0];

   a_hw_ticks  = a_ptr->HW_TICKS[0];
   b_hw_ticks  = b_ptr->HW_TICKS[0];
   1102c:	6889      	ldr	r1, [r1, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:63

   hwtpt = _mqx_kernel_data->HW_TICKS_PER_TICK;
   1102e:	5837      	ldr	r7, [r6, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:58
{ /* Body */
   register uint_32       a_hw_ticks;
   register uint_32       b_hw_ticks;
   register uint_32       hwtpt;

   r_ptr->TICKS[0] = a_ptr->TICKS[0] + b_ptr->TICKS[0];
   11030:	6014      	str	r4, [r2, #0]
   11032:	6055      	str	r5, [r2, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:65
   a_hw_ticks  = a_ptr->HW_TICKS[0];
   b_hw_ticks  = b_ptr->HW_TICKS[0];

   hwtpt = _mqx_kernel_data->HW_TICKS_PER_TICK;

   if ( a_hw_ticks >= (hwtpt - b_hw_ticks)) {
   11034:	1a78      	subs	r0, r7, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:69
      r_ptr->TICKS[0]++;
      r_ptr->HW_TICKS[0] = a_hw_ticks + (b_hw_ticks - hwtpt);
   } else {
      r_ptr->HW_TICKS[0] = a_hw_ticks + b_hw_ticks;
   11036:	18ce      	adds	r6, r1, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:65
   a_hw_ticks  = a_ptr->HW_TICKS[0];
   b_hw_ticks  = b_ptr->HW_TICKS[0];

   hwtpt = _mqx_kernel_data->HW_TICKS_PER_TICK;

   if ( a_hw_ticks >= (hwtpt - b_hw_ticks)) {
   11038:	4283      	cmp	r3, r0
   1103a:	d306      	bcc.n	1104a <_psp_add_ticks+0x36>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:66
      r_ptr->TICKS[0]++;
   1103c:	2001      	movs	r0, #1
   1103e:	2100      	movs	r1, #0
   11040:	1824      	adds	r4, r4, r0
   11042:	414d      	adcs	r5, r1
   11044:	6014      	str	r4, [r2, #0]
   11046:	6055      	str	r5, [r2, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:67
      r_ptr->HW_TICKS[0] = a_hw_ticks + (b_hw_ticks - hwtpt);
   11048:	1bf6      	subs	r6, r6, r7
   1104a:	6096      	str	r6, [r2, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tiad.c:72
   } else {
      r_ptr->HW_TICKS[0] = a_hw_ticks + b_hw_ticks;
   } /* Endif */

} /* Endbody */
   1104c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1104e:	46c0      	nop			; (mov r8, r8)
   11050:	1fffe000 	.word	0x1fffe000

00011054 <_psp_normalize_ticks>:
_psp_normalize_ticks():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:47
void _psp_normalize_ticks
   (
       /* [IN/OUT] Tick structure to be normalized */
       PSP_TICK_STRUCT_PTR tick_ptr
   )
{ /* Body */
   11054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:53
   KERNEL_DATA_STRUCT_PTR  kernel_data;
   register uint_32        ticks_per_tick;

   _GET_KERNEL_DATA(kernel_data);

   ticks_per_tick = kernel_data->HW_TICKS_PER_TICK;
   11056:	4b0d      	ldr	r3, [pc, #52]	; (1108c <_psp_normalize_ticks+0x38>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:55

   if (tick_ptr->HW_TICKS[0] >= ticks_per_tick) {
   11058:	6885      	ldr	r5, [r0, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:53
   KERNEL_DATA_STRUCT_PTR  kernel_data;
   register uint_32        ticks_per_tick;

   _GET_KERNEL_DATA(kernel_data);

   ticks_per_tick = kernel_data->HW_TICKS_PER_TICK;
   1105a:	681a      	ldr	r2, [r3, #0]
   1105c:	23a8      	movs	r3, #168	; 0xa8
   1105e:	005b      	lsls	r3, r3, #1
   11060:	58d6      	ldr	r6, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:47
void _psp_normalize_ticks
   (
       /* [IN/OUT] Tick structure to be normalized */
       PSP_TICK_STRUCT_PTR tick_ptr
   )
{ /* Body */
   11062:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:55

   _GET_KERNEL_DATA(kernel_data);

   ticks_per_tick = kernel_data->HW_TICKS_PER_TICK;

   if (tick_ptr->HW_TICKS[0] >= ticks_per_tick) {
   11064:	42ae      	cmp	r6, r5
   11066:	d80f      	bhi.n	11088 <_psp_normalize_ticks+0x34>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:56
      register uint_32 t = tick_ptr->HW_TICKS[0] / ticks_per_tick;
   11068:	1c31      	adds	r1, r6, #0
   1106a:	1c28      	adds	r0, r5, #0
   1106c:	f7ef fa1a 	bl	4a4 <__aeabi_uidiv>
   11070:	1c07      	adds	r7, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:58
      tick_ptr->TICKS[0] += t;
      tick_ptr->HW_TICKS[0] -= t * ticks_per_tick;
   11072:	437e      	muls	r6, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:57

   ticks_per_tick = kernel_data->HW_TICKS_PER_TICK;

   if (tick_ptr->HW_TICKS[0] >= ticks_per_tick) {
      register uint_32 t = tick_ptr->HW_TICKS[0] / ticks_per_tick;
      tick_ptr->TICKS[0] += t;
   11074:	1c02      	adds	r2, r0, #0
   11076:	2300      	movs	r3, #0
   11078:	6820      	ldr	r0, [r4, #0]
   1107a:	6861      	ldr	r1, [r4, #4]
   1107c:	1812      	adds	r2, r2, r0
   1107e:	414b      	adcs	r3, r1
   11080:	6022      	str	r2, [r4, #0]
   11082:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:58
      tick_ptr->HW_TICKS[0] -= t * ticks_per_tick;
   11084:	1bad      	subs	r5, r5, r6
   11086:	60a5      	str	r5, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/psp_tinm.c:61
   } /* Endif */

} /* Endbody */
   11088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1108a:	46c0      	nop			; (mov r8, r8)
   1108c:	1fffe000 	.word	0x1fffe000

00011090 <_psp_set_kernel_disable_level>:
_psp_set_kernel_disable_level():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:52
    KERNEL_DATA_STRUCT_PTR          kernel_data;
    MQX_INITIALIZATION_STRUCT_PTR   init_ptr;
    uint_32 temp;
    _mqx_int i;

    _GET_KERNEL_DATA(kernel_data);
   11090:	4b1a      	ldr	r3, [pc, #104]	; (110fc <_psp_set_kernel_disable_level+0x6c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:57

    init_ptr = &kernel_data->INIT;

    /* Calculate the enable and disable interrupt values for the kernel. */
    temp = init_ptr->MQX_HARDWARE_INTERRUPT_LEVEL_MAX;
   11092:	22ae      	movs	r2, #174	; 0xae
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:52
    KERNEL_DATA_STRUCT_PTR          kernel_data;
    MQX_INITIALIZATION_STRUCT_PTR   init_ptr;
    uint_32 temp;
    _mqx_int i;

    _GET_KERNEL_DATA(kernel_data);
   11094:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:57

    init_ptr = &kernel_data->INIT;

    /* Calculate the enable and disable interrupt values for the kernel. */
    temp = init_ptr->MQX_HARDWARE_INTERRUPT_LEVEL_MAX;
   11096:	0052      	lsls	r2, r2, #1
   11098:	1899      	adds	r1, r3, r2
   1109a:	68ca      	ldr	r2, [r1, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:58
    if (temp > 7) {
   1109c:	2a07      	cmp	r2, #7
   1109e:	d922      	bls.n	110e6 <_psp_set_kernel_disable_level+0x56>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:60
        temp = 7;
        init_ptr->MQX_HARDWARE_INTERRUPT_LEVEL_MAX = 7;
   110a0:	2207      	movs	r2, #7
   110a2:	60ca      	str	r2, [r1, #12]
   110a4:	2280      	movs	r2, #128	; 0x80
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:66
    } else if (temp == 0) {
        temp = 1;
        init_ptr->MQX_HARDWARE_INTERRUPT_LEVEL_MAX = 1;
    }

    kernel_data->DISABLE_SR = CORTEX_PRIOR(temp);
   110a6:	82da      	strh	r2, [r3, #22]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:70

    /* Set all (till now unused) interrupts level to the disable level */
    for (i = 0; i < sizeof(NVIC_BASE_PTR->IP) / sizeof(NVIC_BASE_PTR->IP[0]); i++)
        NVIC_BASE_PTR->IP[i] = CORTEX_PRIOR((1 << CORTEX_PRIOR_IMPL) - 2);
   110a8:	21c0      	movs	r1, #192	; 0xc0
   110aa:	4b15      	ldr	r3, [pc, #84]	; (11100 <_psp_set_kernel_disable_level+0x70>)
   110ac:	2200      	movs	r2, #0
   110ae:	0089      	lsls	r1, r1, #2
   110b0:	505a      	str	r2, [r3, r1]
   110b2:	21c1      	movs	r1, #193	; 0xc1
   110b4:	0089      	lsls	r1, r1, #2
   110b6:	505a      	str	r2, [r3, r1]
   110b8:	21c2      	movs	r1, #194	; 0xc2
   110ba:	0089      	lsls	r1, r1, #2
   110bc:	505a      	str	r2, [r3, r1]
   110be:	21c3      	movs	r1, #195	; 0xc3
   110c0:	0089      	lsls	r1, r1, #2
   110c2:	505a      	str	r2, [r3, r1]
   110c4:	21c4      	movs	r1, #196	; 0xc4
   110c6:	0089      	lsls	r1, r1, #2
   110c8:	505a      	str	r2, [r3, r1]
   110ca:	21c5      	movs	r1, #197	; 0xc5
   110cc:	0089      	lsls	r1, r1, #2
   110ce:	505a      	str	r2, [r3, r1]
   110d0:	21c6      	movs	r1, #198	; 0xc6
   110d2:	0089      	lsls	r1, r1, #2
   110d4:	505a      	str	r2, [r3, r1]
   110d6:	21c7      	movs	r1, #199	; 0xc7
   110d8:	0089      	lsls	r1, r1, #2
   110da:	505a      	str	r2, [r3, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:79
    {
        uint32_t * icer_ptr = (uint32_t *)&NVIC_BASE_PTR->ICER;

        for (i = 0; i < sizeof(NVIC_BASE_PTR->ICER) / sizeof(uint32_t); i++)    {
            /* Disable 32 interrupts in a row */
            *(icer_ptr + i) = 0xFFFFFFFF;
   110dc:	4b09      	ldr	r3, [pc, #36]	; (11104 <_psp_set_kernel_disable_level+0x74>)
   110de:	2201      	movs	r2, #1
   110e0:	4252      	negs	r2, r2
   110e2:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:82
        }
    }
}
   110e4:	4770      	bx	lr
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:61
    /* Calculate the enable and disable interrupt values for the kernel. */
    temp = init_ptr->MQX_HARDWARE_INTERRUPT_LEVEL_MAX;
    if (temp > 7) {
        temp = 7;
        init_ptr->MQX_HARDWARE_INTERRUPT_LEVEL_MAX = 7;
    } else if (temp == 0) {
   110e6:	2a00      	cmp	r2, #0
   110e8:	d103      	bne.n	110f2 <_psp_set_kernel_disable_level+0x62>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:63
        temp = 1;
        init_ptr->MQX_HARDWARE_INTERRUPT_LEVEL_MAX = 1;
   110ea:	2201      	movs	r2, #1
   110ec:	60ca      	str	r2, [r1, #12]
   110ee:	2280      	movs	r2, #128	; 0x80
   110f0:	e7d9      	b.n	110a6 <_psp_set_kernel_disable_level+0x16>
   110f2:	01d2      	lsls	r2, r2, #7
   110f4:	21ff      	movs	r1, #255	; 0xff
   110f6:	400a      	ands	r2, r1
   110f8:	e7d5      	b.n	110a6 <_psp_set_kernel_disable_level+0x16>
   110fa:	46c0      	nop			; (mov r8, r8)
   110fc:	1fffe000 	.word	0x1fffe000
   11100:	e000e100 	.word	0xe000e100
   11104:	e000e180 	.word	0xe000e180

00011108 <_psp_init_readyqs>:
_psp_init_readyqs():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:98

uint_32 _psp_init_readyqs
    (
        void
    )
{ /* Body */
   11108:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:104
   KERNEL_DATA_STRUCT_PTR kernel_data;
   READY_Q_STRUCT_PTR     q_ptr;
   uint_32                priority_levels;
   uint_32                n;

    _GET_KERNEL_DATA(kernel_data);
   1110a:	4b1e      	ldr	r3, [pc, #120]	; (11184 <_psp_init_readyqs+0x7c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:98

uint_32 _psp_init_readyqs
    (
        void
    )
{ /* Body */
   1110c:	464f      	mov	r7, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:104
   KERNEL_DATA_STRUCT_PTR kernel_data;
   READY_Q_STRUCT_PTR     q_ptr;
   uint_32                priority_levels;
   uint_32                n;

    _GET_KERNEL_DATA(kernel_data);
   1110e:	6818      	ldr	r0, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:98

uint_32 _psp_init_readyqs
    (
        void
    )
{ /* Body */
   11110:	4646      	mov	r6, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:105
   READY_Q_STRUCT_PTR     q_ptr;
   uint_32                priority_levels;
   uint_32                n;

    _GET_KERNEL_DATA(kernel_data);
    kernel_data->READY_Q_LIST = (READY_Q_STRUCT_PTR) NULL;
   11112:	2300      	movs	r3, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:98

uint_32 _psp_init_readyqs
    (
        void
    )
{ /* Body */
   11114:	b4c0      	push	{r6, r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:105
   READY_Q_STRUCT_PTR     q_ptr;
   uint_32                priority_levels;
   uint_32                n;

    _GET_KERNEL_DATA(kernel_data);
    kernel_data->READY_Q_LIST = (READY_Q_STRUCT_PTR) NULL;
   11116:	6203      	str	r3, [r0, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:106
    priority_levels = kernel_data->LOWEST_TASK_PRIORITY + 2;
   11118:	23d0      	movs	r3, #208	; 0xd0
   1111a:	58c3      	ldr	r3, [r0, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:104
   KERNEL_DATA_STRUCT_PTR kernel_data;
   READY_Q_STRUCT_PTR     q_ptr;
   uint_32                priority_levels;
   uint_32                n;

    _GET_KERNEL_DATA(kernel_data);
   1111c:	4681      	mov	r9, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:121
    #endif /* MQX_CHECK_MEMORY_ALLOCATION_ERRORS */
    _mem_set_type(q_ptr, MEM_TYPE_READYQ);
#endif /* MQX_LITE_VERSION_NUMBER */

    n = priority_levels;
    while (n--) {
   1111e:	1c59      	adds	r1, r3, #1
   11120:	3302      	adds	r3, #2
   11122:	d02c      	beq.n	1117e <_psp_init_readyqs+0x76>
   11124:	23b4      	movs	r3, #180	; 0xb4
   11126:	005b      	lsls	r3, r3, #1
   11128:	4a17      	ldr	r2, [pc, #92]	; (11188 <_psp_init_readyqs+0x80>)
   1112a:	58c4      	ldr	r4, [r0, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:127
        q_ptr->HEAD_READY_Q  = (TD_STRUCT_PTR)q_ptr;
        q_ptr->TAIL_READY_Q  = (TD_STRUCT_PTR)q_ptr;
        q_ptr->PRIORITY      = (uint_16)n;

        if (n + kernel_data->INIT.MQX_HARDWARE_INTERRUPT_LEVEL_MAX < ((1 << CORTEX_PRIOR_IMPL) - 1))
            q_ptr->ENABLE_SR   = CORTEX_PRIOR(n + kernel_data->INIT.MQX_HARDWARE_INTERRUPT_LEVEL_MAX);
   1112c:	25ff      	movs	r5, #255	; 0xff
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:109
    _GET_KERNEL_DATA(kernel_data);
    kernel_data->READY_Q_LIST = (READY_Q_STRUCT_PTR) NULL;
    priority_levels = kernel_data->LOWEST_TASK_PRIORITY + 2;

#ifdef MQX_LITE_VERSION_NUMBER
    q_ptr = &mqx_static_ready_queue[0];
   1112e:	1c13      	adds	r3, r2, #0
   11130:	46a4      	mov	ip, r4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:121
    #endif /* MQX_CHECK_MEMORY_ALLOCATION_ERRORS */
    _mem_set_type(q_ptr, MEM_TYPE_READYQ);
#endif /* MQX_LITE_VERSION_NUMBER */

    n = priority_levels;
    while (n--) {
   11132:	2700      	movs	r7, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:109
    _GET_KERNEL_DATA(kernel_data);
    kernel_data->READY_Q_LIST = (READY_Q_STRUCT_PTR) NULL;
    priority_levels = kernel_data->LOWEST_TASK_PRIORITY + 2;

#ifdef MQX_LITE_VERSION_NUMBER
    q_ptr = &mqx_static_ready_queue[0];
   11134:	3b0e      	subs	r3, #14
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:127
        q_ptr->HEAD_READY_Q  = (TD_STRUCT_PTR)q_ptr;
        q_ptr->TAIL_READY_Q  = (TD_STRUCT_PTR)q_ptr;
        q_ptr->PRIORITY      = (uint_16)n;

        if (n + kernel_data->INIT.MQX_HARDWARE_INTERRUPT_LEVEL_MAX < ((1 << CORTEX_PRIOR_IMPL) - 1))
            q_ptr->ENABLE_SR   = CORTEX_PRIOR(n + kernel_data->INIT.MQX_HARDWARE_INTERRUPT_LEVEL_MAX);
   11136:	46a8      	mov	r8, r5
   11138:	e001      	b.n	1113e <_psp_init_readyqs+0x36>
   1113a:	1c1f      	adds	r7, r3, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:132
        else
            q_ptr->ENABLE_SR   = CORTEX_PRIOR((1 << CORTEX_PRIOR_IMPL) - 2);

        q_ptr->NEXT_Q        = kernel_data->READY_Q_LIST;
        kernel_data->READY_Q_LIST = q_ptr++;
   1113c:	1c03      	adds	r3, r0, #0
   1113e:	4660      	mov	r0, ip
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:124

    n = priority_levels;
    while (n--) {
        q_ptr->HEAD_READY_Q  = (TD_STRUCT_PTR)q_ptr;
        q_ptr->TAIL_READY_Q  = (TD_STRUCT_PTR)q_ptr;
        q_ptr->PRIORITY      = (uint_16)n;
   11140:	b28c      	uxth	r4, r1
   11142:	180d      	adds	r5, r1, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:122
    _mem_set_type(q_ptr, MEM_TYPE_READYQ);
#endif /* MQX_LITE_VERSION_NUMBER */

    n = priority_levels;
    while (n--) {
        q_ptr->HEAD_READY_Q  = (TD_STRUCT_PTR)q_ptr;
   11144:	601b      	str	r3, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:123
        q_ptr->TAIL_READY_Q  = (TD_STRUCT_PTR)q_ptr;
   11146:	605b      	str	r3, [r3, #4]
   11148:	1e96      	subs	r6, r2, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:124
        q_ptr->PRIORITY      = (uint_16)n;
   1114a:	8014      	strh	r4, [r2, #0]
   1114c:	2000      	movs	r0, #0
   1114e:	2d00      	cmp	r5, #0
   11150:	d104      	bne.n	1115c <_psp_init_readyqs+0x54>
   11152:	4665      	mov	r5, ip
   11154:	1960      	adds	r0, r4, r5
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:127

        if (n + kernel_data->INIT.MQX_HARDWARE_INTERRUPT_LEVEL_MAX < ((1 << CORTEX_PRIOR_IMPL) - 1))
            q_ptr->ENABLE_SR   = CORTEX_PRIOR(n + kernel_data->INIT.MQX_HARDWARE_INTERRUPT_LEVEL_MAX);
   11156:	01c0      	lsls	r0, r0, #7
   11158:	4644      	mov	r4, r8
   1115a:	4020      	ands	r0, r4
   1115c:	8030      	strh	r0, [r6, #0]
   1115e:	1f90      	subs	r0, r2, #6
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:131
        else
            q_ptr->ENABLE_SR   = CORTEX_PRIOR((1 << CORTEX_PRIOR_IMPL) - 2);

        q_ptr->NEXT_Q        = kernel_data->READY_Q_LIST;
   11160:	6007      	str	r7, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:132
        kernel_data->READY_Q_LIST = q_ptr++;
   11162:	1c18      	adds	r0, r3, #0
   11164:	3010      	adds	r0, #16
   11166:	3210      	adds	r2, #16
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:121
    #endif /* MQX_CHECK_MEMORY_ALLOCATION_ERRORS */
    _mem_set_type(q_ptr, MEM_TYPE_READYQ);
#endif /* MQX_LITE_VERSION_NUMBER */

    n = priority_levels;
    while (n--) {
   11168:	3901      	subs	r1, #1
   1116a:	d2e6      	bcs.n	1113a <_psp_init_readyqs+0x32>
   1116c:	464d      	mov	r5, r9
   1116e:	622b      	str	r3, [r5, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:140

    /*
    ** Set the current ready q (where the ready queue searches start) to
    ** the head of the list of ready queues.
    */
    kernel_data->CURRENT_READY_Q = kernel_data->READY_Q_LIST;
   11170:	4648      	mov	r0, r9
   11172:	6243      	str	r3, [r0, #36]	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:158
    }
#endif

    return MQX_OK;

} /* Endbody */
   11174:	2000      	movs	r0, #0
   11176:	bc0c      	pop	{r2, r3}
   11178:	4690      	mov	r8, r2
   1117a:	4699      	mov	r9, r3
   1117c:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/sc_irdyq.c:121
    #endif /* MQX_CHECK_MEMORY_ALLOCATION_ERRORS */
    _mem_set_type(q_ptr, MEM_TYPE_READYQ);
#endif /* MQX_LITE_VERSION_NUMBER */

    n = priority_levels;
    while (n--) {
   1117e:	2300      	movs	r3, #0
   11180:	e7f6      	b.n	11170 <_psp_init_readyqs+0x68>
   11182:	46c0      	nop			; (mov r8, r8)
   11184:	1fffe000 	.word	0x1fffe000
   11188:	20000d6e 	.word	0x20000d6e

0001118c <_psp_build_stack_frame>:
_psp_build_stack_frame():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:69
{
   uchar_ptr stack_base_ptr;
   PSP_STACK_START_STRUCT_PTR stack_start_ptr;
   boolean res = TRUE;

   stack_base_ptr  = (uchar_ptr)_GET_STACK_BASE(stack_ptr, stack_size);
   1118c:	3a01      	subs	r2, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:64
      _mqx_uint        status_register,

      /* [IN] the task creation parameter */
      uint_32          create_parameter
   )
{
   1118e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:69
   uchar_ptr stack_base_ptr;
   PSP_STACK_START_STRUCT_PTR stack_start_ptr;
   boolean res = TRUE;

   stack_base_ptr  = (uchar_ptr)_GET_STACK_BASE(stack_ptr, stack_size);
   11190:	188a      	adds	r2, r1, r2
   11192:	260f      	movs	r6, #15
   11194:	43b2      	bics	r2, r6
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:70
   stack_start_ptr = (PSP_STACK_START_STRUCT_PTR)(stack_base_ptr - sizeof(PSP_STACK_START_STRUCT));
   11196:	1c14      	adds	r4, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:73

   td_ptr->STACK_BASE  = (pointer)stack_base_ptr;
   td_ptr->STACK_LIMIT = _GET_STACK_LIMIT(stack_ptr, stack_size);
   11198:	310f      	adds	r1, #15
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:70
   uchar_ptr stack_base_ptr;
   PSP_STACK_START_STRUCT_PTR stack_start_ptr;
   boolean res = TRUE;

   stack_base_ptr  = (uchar_ptr)_GET_STACK_BASE(stack_ptr, stack_size);
   stack_start_ptr = (PSP_STACK_START_STRUCT_PTR)(stack_base_ptr - sizeof(PSP_STACK_START_STRUCT));
   1119a:	3c5c      	subs	r4, #92	; 0x5c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:73

   td_ptr->STACK_BASE  = (pointer)stack_base_ptr;
   td_ptr->STACK_LIMIT = _GET_STACK_LIMIT(stack_ptr, stack_size);
   1119c:	43b1      	bics	r1, r6
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:72
   boolean res = TRUE;

   stack_base_ptr  = (uchar_ptr)_GET_STACK_BASE(stack_ptr, stack_size);
   stack_start_ptr = (PSP_STACK_START_STRUCT_PTR)(stack_base_ptr - sizeof(PSP_STACK_START_STRUCT));

   td_ptr->STACK_BASE  = (pointer)stack_base_ptr;
   1119e:	6102      	str	r2, [r0, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:73
   td_ptr->STACK_LIMIT = _GET_STACK_LIMIT(stack_ptr, stack_size);
   111a0:	6181      	str	r1, [r0, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:74
   td_ptr->STACK_PTR   = stack_start_ptr;
   111a2:	6144      	str	r4, [r0, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:81
   /*
   ** Build the task's initial stack frame. This contains the initialized
   ** registers, and an exception frame which will cause the task to
   ** "return" to the start of the task when it is dispatched.
   */
   _mem_zero(stack_start_ptr, (_mem_size)sizeof(PSP_STACK_START_STRUCT));
   111a4:	215c      	movs	r1, #92	; 0x5c
   111a6:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:64
      _mqx_uint        status_register,

      /* [IN] the task creation parameter */
      uint_32          create_parameter
   )
{
   111a8:	1c1f      	adds	r7, r3, #0
   111aa:	9d07      	ldr	r5, [sp, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:81
   /*
   ** Build the task's initial stack frame. This contains the initialized
   ** registers, and an exception frame which will cause the task to
   ** "return" to the start of the task when it is dispatched.
   */
   _mem_zero(stack_start_ptr, (_mem_size)sizeof(PSP_STACK_START_STRUCT));
   111ac:	f7ff feb2 	bl	10f14 <_mem_zero>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:82
   stack_start_ptr->INITIAL_CONTEXT.LR = (uint_32)_task_exit_function_internal;
   111b0:	4b06      	ldr	r3, [pc, #24]	; (111cc <_psp_build_stack_frame+0x40>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:84
   stack_start_ptr->INITIAL_CONTEXT.R0 = (uint_32)create_parameter;
   stack_start_ptr->INITIAL_CONTEXT.PC = (uint_32)(template_ptr->TASK_ADDRESS) | 1;
   111b2:	687a      	ldr	r2, [r7, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:82
   ** Build the task's initial stack frame. This contains the initialized
   ** registers, and an exception frame which will cause the task to
   ** "return" to the start of the task when it is dispatched.
   */
   _mem_zero(stack_start_ptr, (_mem_size)sizeof(PSP_STACK_START_STRUCT));
   stack_start_ptr->INITIAL_CONTEXT.LR = (uint_32)_task_exit_function_internal;
   111b4:	63a3      	str	r3, [r4, #56]	; 0x38
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:84
   stack_start_ptr->INITIAL_CONTEXT.R0 = (uint_32)create_parameter;
   stack_start_ptr->INITIAL_CONTEXT.PC = (uint_32)(template_ptr->TASK_ADDRESS) | 1;
   111b6:	2301      	movs	r3, #1
   111b8:	4313      	orrs	r3, r2
   111ba:	63e3      	str	r3, [r4, #60]	; 0x3c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:85
   stack_start_ptr->INITIAL_CONTEXT.PSR = 0x01000000;
   111bc:	2380      	movs	r3, #128	; 0x80
   111be:	045b      	lsls	r3, r3, #17
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:83
   ** registers, and an exception frame which will cause the task to
   ** "return" to the start of the task when it is dispatched.
   */
   _mem_zero(stack_start_ptr, (_mem_size)sizeof(PSP_STACK_START_STRUCT));
   stack_start_ptr->INITIAL_CONTEXT.LR = (uint_32)_task_exit_function_internal;
   stack_start_ptr->INITIAL_CONTEXT.R0 = (uint_32)create_parameter;
   111c0:	6265      	str	r5, [r4, #36]	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:86
   stack_start_ptr->INITIAL_CONTEXT.PC = (uint_32)(template_ptr->TASK_ADDRESS) | 1;
   stack_start_ptr->INITIAL_CONTEXT.PSR = 0x01000000;
   stack_start_ptr->PARAMETER = create_parameter;
   111c2:	6525      	str	r5, [r4, #80]	; 0x50
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:101
      res = _psp_build_float_context(td_ptr);
   }
#endif /* MQXCFG_ENABLE_FP && PSP_HAS_FPU */

   return res;
}
   111c4:	2001      	movs	r0, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:85
   */
   _mem_zero(stack_start_ptr, (_mem_size)sizeof(PSP_STACK_START_STRUCT));
   stack_start_ptr->INITIAL_CONTEXT.LR = (uint_32)_task_exit_function_internal;
   stack_start_ptr->INITIAL_CONTEXT.R0 = (uint_32)create_parameter;
   stack_start_ptr->INITIAL_CONTEXT.PC = (uint_32)(template_ptr->TASK_ADDRESS) | 1;
   stack_start_ptr->INITIAL_CONTEXT.PSR = 0x01000000;
   111c6:	6423      	str	r3, [r4, #64]	; 0x40
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_bu.c:101
      res = _psp_build_float_context(td_ptr);
   }
#endif /* MQXCFG_ENABLE_FP && PSP_HAS_FPU */

   return res;
}
   111c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   111ca:	46c0      	nop			; (mov r8, r8)
   111cc:	00011a15 	.word	0x00011a15

000111d0 <_psp_destroy_stack_frame>:
_psp_destroy_stack_frame():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/stack_de.c:54
   )
{/* Body */

   /* Nothing to do for this CPU */

}/* Endbody */
   111d0:	4770      	bx	lr
   111d2:	46c0      	nop			; (mov r8, r8)

000111d4 <_mqx_idle_task>:
_mqx_idle_task():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/idletask.c:59
        uint_32 parameter
    )
{ /* Body */
    volatile KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);
   111d4:	4b02      	ldr	r3, [pc, #8]	; (111e0 <_mqx_idle_task+0xc>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/idletask.c:56
 */
void _mqx_idle_task
    (
        uint_32 parameter
    )
{ /* Body */
   111d6:	b082      	sub	sp, #8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/idletask.c:59
    volatile KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);
   111d8:	681b      	ldr	r3, [r3, #0]
   111da:	9301      	str	r3, [sp, #4]
   111dc:	e7fe      	b.n	111dc <_mqx_idle_task+0x8>
   111de:	46c0      	nop			; (mov r8, r8)
   111e0:	1fffe000 	.word	0x1fffe000

000111e4 <_int_default_isr>:
_int_default_isr():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:62
 */
void _int_default_isr
(
    pointer vector_number
)
{ /* Body */
   111e4:	b538      	push	{r3, r4, r5, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:66
    KERNEL_DATA_STRUCT_PTR kernel_data;
    TD_STRUCT_PTR          td_ptr;

    _GET_KERNEL_DATA(kernel_data);
   111e6:	4d11      	ldr	r5, [pc, #68]	; (1122c <_int_default_isr+0x48>)
   111e8:	682a      	ldr	r2, [r5, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:68

    td_ptr = kernel_data->ACTIVE_PTR;
   111ea:	69d4      	ldr	r4, [r2, #28]
_int_disable():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:106
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    _INT_DISABLE_CODE();
   111ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
   111ee:	2b00      	cmp	r3, #0
   111f0:	d100      	bne.n	111f4 <_int_default_isr+0x10>
   111f2:	b672      	cpsid	i
_int_default_isr():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:73
    td_ptr = kernel_data->ACTIVE_PTR;
    _KLOGE5(KLOG_int_default_isr, td_ptr, vector_number,
                    &vector_number, vector_number);

    _int_disable();
    if (td_ptr->STATE != UNHANDLED_INT_BLOCKED)
   111f4:	68a1      	ldr	r1, [r4, #8]
_int_disable():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:106
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    _INT_DISABLE_CODE();
   111f6:	3301      	adds	r3, #1
   111f8:	6563      	str	r3, [r4, #84]	; 0x54
_int_default_isr():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:73
    td_ptr = kernel_data->ACTIVE_PTR;
    _KLOGE5(KLOG_int_default_isr, td_ptr, vector_number,
                    &vector_number, vector_number);

    _int_disable();
    if (td_ptr->STATE != UNHANDLED_INT_BLOCKED)
   111fa:	290b      	cmp	r1, #11
   111fc:	d00d      	beq.n	1121a <_int_default_isr+0x36>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:75
    {
        td_ptr->STATE = UNHANDLED_INT_BLOCKED;
   111fe:	230b      	movs	r3, #11
   11200:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:76
        td_ptr->INFO = (_mqx_uint) vector_number;
   11202:	63a0      	str	r0, [r4, #56]	; 0x38
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:77
        _task_set_error_td_internal(td_ptr, MQX_UNHANDLED_INTERRUPT);
   11204:	2141      	movs	r1, #65	; 0x41
   11206:	1c20      	adds	r0, r4, #0
   11208:	f000 ffac 	bl	12164 <_task_set_error_td_internal>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:78
        _QUEUE_UNLINK(td_ptr);
   1120c:	6862      	ldr	r2, [r4, #4]
   1120e:	6823      	ldr	r3, [r4, #0]
   11210:	6013      	str	r3, [r2, #0]
   11212:	605a      	str	r2, [r3, #4]
   11214:	682a      	ldr	r2, [r5, #0]
   11216:	69d4      	ldr	r4, [r2, #28]
   11218:	6d63      	ldr	r3, [r4, #84]	; 0x54
_int_enable():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:129
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    _INT_ENABLE_CODE();
   1121a:	2b00      	cmp	r3, #0
   1121c:	d004      	beq.n	11228 <_int_default_isr+0x44>
   1121e:	3b01      	subs	r3, #1
   11220:	6563      	str	r3, [r4, #84]	; 0x54
   11222:	2b00      	cmp	r3, #0
   11224:	d100      	bne.n	11228 <_int_default_isr+0x44>
   11226:	b662      	cpsie	i
_int_default_isr():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:82
        _task_set_error_td_internal(td_ptr, MQX_UNHANDLED_INTERRUPT);
        _QUEUE_UNLINK(td_ptr);
    } /* Endif */
    _int_enable();

} /* Endbody */
   11228:	bd38      	pop	{r3, r4, r5, pc}
   1122a:	46c0      	nop			; (mov r8, r8)
   1122c:	1fffe000 	.word	0x1fffe000

00011230 <_int_disable>:
_int_disable():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:106
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    _INT_DISABLE_CODE();
   11230:	4b04      	ldr	r3, [pc, #16]	; (11244 <_int_disable+0x14>)
   11232:	681b      	ldr	r3, [r3, #0]
   11234:	69db      	ldr	r3, [r3, #28]
   11236:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   11238:	2a00      	cmp	r2, #0
   1123a:	d100      	bne.n	1123e <_int_disable+0xe>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:106 (discriminator 1)
   1123c:	b672      	cpsid	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:106 (discriminator 2)
   1123e:	3201      	adds	r2, #1
   11240:	655a      	str	r2, [r3, #84]	; 0x54
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:108 (discriminator 2)

} /* Endbody */
   11242:	4770      	bx	lr
   11244:	1fffe000 	.word	0x1fffe000

00011248 <_int_enable>:
_int_enable():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:127
 */
void _int_enable(void)
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);
   11248:	4b05      	ldr	r3, [pc, #20]	; (11260 <_int_enable+0x18>)
   1124a:	6819      	ldr	r1, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:129

    _INT_ENABLE_CODE();
   1124c:	69cb      	ldr	r3, [r1, #28]
   1124e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   11250:	2a00      	cmp	r2, #0
   11252:	d004      	beq.n	1125e <_int_enable+0x16>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:129 (discriminator 1)
   11254:	3a01      	subs	r2, #1
   11256:	655a      	str	r2, [r3, #84]	; 0x54
   11258:	2a00      	cmp	r2, #0
   1125a:	d100      	bne.n	1125e <_int_enable+0x16>
   1125c:	b662      	cpsie	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:131

} /* Endbody */
   1125e:	4770      	bx	lr
   11260:	1fffe000 	.word	0x1fffe000

00011264 <_int_get_isr_data>:
_int_get_isr_data():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:329

pointer _int_get_isr_data
(
    _mqx_uint vector
)
{ /* Body */
   11264:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:332
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);
   11266:	4b0e      	ldr	r3, [pc, #56]	; (112a0 <_int_get_isr_data+0x3c>)
   11268:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:334
#if MQX_CHECK_ERRORS
    if ( kernel_data->INTERRUPT_TABLE_PTR == NULL )
   1126a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1126c:	2a00      	cmp	r2, #0
   1126e:	d011      	beq.n	11294 <_int_get_isr_data+0x30>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:339
    {
        _task_set_error(MQX_COMPONENT_DOES_NOT_EXIST);
        return(NULL);
    } /* Endif */
    if ((vector < kernel_data->FIRST_USER_ISR_VECTOR) ||
   11270:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   11272:	4281      	cmp	r1, r0
   11274:	d809      	bhi.n	1128a <_int_get_isr_data+0x26>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:339 (discriminator 1)
   11276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   11278:	4298      	cmp	r0, r3
   1127a:	d806      	bhi.n	1128a <_int_get_isr_data+0x26>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:347
        _task_set_error(MQX_INVALID_VECTORED_INTERRUPT);
        return(NULL);
    }/* Endif */
#endif

    vector -= kernel_data->FIRST_USER_ISR_VECTOR;
   1127c:	1a40      	subs	r0, r0, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:348
    return(kernel_data->INTERRUPT_TABLE_PTR[vector].APP_ISR_DATA);
   1127e:	0041      	lsls	r1, r0, #1
   11280:	1808      	adds	r0, r1, r0
   11282:	0080      	lsls	r0, r0, #2
   11284:	1812      	adds	r2, r2, r0
   11286:	6890      	ldr	r0, [r2, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:350

} /* Endbody */
   11288:	bd08      	pop	{r3, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:342
        return(NULL);
    } /* Endif */
    if ((vector < kernel_data->FIRST_USER_ISR_VECTOR) ||
        (vector > kernel_data->LAST_USER_ISR_VECTOR))
    {
        _task_set_error(MQX_INVALID_VECTORED_INTERRUPT);
   1128a:	2014      	movs	r0, #20
   1128c:	f000 fd40 	bl	11d10 <_task_set_error>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:343
        return(NULL);
   11290:	2000      	movs	r0, #0
   11292:	e7f9      	b.n	11288 <_int_get_isr_data+0x24>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:336

    _GET_KERNEL_DATA(kernel_data);
#if MQX_CHECK_ERRORS
    if ( kernel_data->INTERRUPT_TABLE_PTR == NULL )
    {
        _task_set_error(MQX_COMPONENT_DOES_NOT_EXIST);
   11294:	2018      	movs	r0, #24
   11296:	f000 fd3b 	bl	11d10 <_task_set_error>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:337
        return(NULL);
   1129a:	2000      	movs	r0, #0
   1129c:	e7f4      	b.n	11288 <_int_get_isr_data+0x24>
   1129e:	46c0      	nop			; (mov r8, r8)
   112a0:	1fffe000 	.word	0x1fffe000

000112a4 <_int_install_isr>:
_int_install_isr():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:558
{ /* Body */
    KERNEL_DATA_STRUCT_PTR     kernel_data;
    INTERRUPT_TABLE_STRUCT_PTR table_ptr;
    INT_ISR_FPTR               old_isr_ptr;

    _GET_KERNEL_DATA(kernel_data);
   112a4:	4b17      	ldr	r3, [pc, #92]	; (11304 <_int_install_isr+0x60>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:553
(
    _mqx_uint        vector,
    INT_ISR_FPTR     isr_ptr,
    pointer          isr_data
)
{ /* Body */
   112a6:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:558
    KERNEL_DATA_STRUCT_PTR     kernel_data;
    INTERRUPT_TABLE_STRUCT_PTR table_ptr;
    INT_ISR_FPTR               old_isr_ptr;

    _GET_KERNEL_DATA(kernel_data);
   112a8:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:563

    _KLOGE4(KLOG_int_install_isr, vector, isr_ptr, isr_data);

#if MQX_CHECK_ERRORS
    if ( kernel_data->INTERRUPT_TABLE_PTR == NULL )
   112aa:	6b9d      	ldr	r5, [r3, #56]	; 0x38
   112ac:	2d00      	cmp	r5, #0
   112ae:	d023      	beq.n	112f8 <_int_install_isr+0x54>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:568
    {
        _task_set_error(MQX_COMPONENT_DOES_NOT_EXIST);
        return(NULL);
    } /* Endif */
    if ((vector < kernel_data->FIRST_USER_ISR_VECTOR) ||
   112b0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   112b2:	4284      	cmp	r4, r0
   112b4:	d81b      	bhi.n	112ee <_int_install_isr+0x4a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:568 (discriminator 1)
   112b6:	6b1e      	ldr	r6, [r3, #48]	; 0x30
   112b8:	42b0      	cmp	r0, r6
   112ba:	d818      	bhi.n	112ee <_int_install_isr+0x4a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:577
        _KLOGX2(KLOG_int_install_isr, NULL);
        return(NULL);
    }/* Endif */
#endif

    table_ptr = &kernel_data->INTERRUPT_TABLE_PTR[vector -
   112bc:	1b00      	subs	r0, r0, r4
   112be:	0044      	lsls	r4, r0, #1
   112c0:	1824      	adds	r4, r4, r0
   112c2:	00a4      	lsls	r4, r4, #2
   112c4:	192c      	adds	r4, r5, r4
_int_disable():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:106
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    _INT_DISABLE_CODE();
   112c6:	69dd      	ldr	r5, [r3, #28]
   112c8:	6d6e      	ldr	r6, [r5, #84]	; 0x54
   112ca:	2e00      	cmp	r6, #0
   112cc:	d106      	bne.n	112dc <_int_install_isr+0x38>
   112ce:	b672      	cpsid	i
_int_install_isr():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:581

    table_ptr = &kernel_data->INTERRUPT_TABLE_PTR[vector -
                                                  kernel_data->FIRST_USER_ISR_VECTOR];

    _int_disable();
    old_isr_ptr = table_ptr->APP_ISR;
   112d0:	6820      	ldr	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:583
    table_ptr->APP_ISR  = isr_ptr;
    table_ptr->APP_ISR_DATA = isr_data;
   112d2:	60a2      	str	r2, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:582
    table_ptr = &kernel_data->INTERRUPT_TABLE_PTR[vector -
                                                  kernel_data->FIRST_USER_ISR_VECTOR];

    _int_disable();
    old_isr_ptr = table_ptr->APP_ISR;
    table_ptr->APP_ISR  = isr_ptr;
   112d4:	6021      	str	r1, [r4, #0]
_int_enable():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:129
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    _INT_ENABLE_CODE();
   112d6:	656e      	str	r6, [r5, #84]	; 0x54
   112d8:	b662      	cpsie	i
_int_install_isr():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:590

    _KLOGX2(KLOG_int_install_isr, old_isr_ptr);

    return (old_isr_ptr);

} /* Endbody */
   112da:	bd70      	pop	{r4, r5, r6, pc}
_int_disable():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:106
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    _INT_DISABLE_CODE();
   112dc:	1c73      	adds	r3, r6, #1
   112de:	656b      	str	r3, [r5, #84]	; 0x54
_int_install_isr():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:581

    table_ptr = &kernel_data->INTERRUPT_TABLE_PTR[vector -
                                                  kernel_data->FIRST_USER_ISR_VECTOR];

    _int_disable();
    old_isr_ptr = table_ptr->APP_ISR;
   112e0:	6820      	ldr	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:583
    table_ptr->APP_ISR  = isr_ptr;
    table_ptr->APP_ISR_DATA = isr_data;
   112e2:	60a2      	str	r2, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:582
    table_ptr = &kernel_data->INTERRUPT_TABLE_PTR[vector -
                                                  kernel_data->FIRST_USER_ISR_VECTOR];

    _int_disable();
    old_isr_ptr = table_ptr->APP_ISR;
    table_ptr->APP_ISR  = isr_ptr;
   112e4:	6021      	str	r1, [r4, #0]
_int_enable():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:129
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    _INT_ENABLE_CODE();
   112e6:	2b00      	cmp	r3, #0
   112e8:	d0f7      	beq.n	112da <_int_install_isr+0x36>
   112ea:	656e      	str	r6, [r5, #84]	; 0x54
   112ec:	e7f5      	b.n	112da <_int_install_isr+0x36>
_int_install_isr():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:571
        return(NULL);
    } /* Endif */
    if ((vector < kernel_data->FIRST_USER_ISR_VECTOR) ||
        (vector > kernel_data->LAST_USER_ISR_VECTOR))
    {
        _task_set_error(MQX_INVALID_VECTORED_INTERRUPT);
   112ee:	2014      	movs	r0, #20
   112f0:	f000 fd0e 	bl	11d10 <_task_set_error>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:573
        _KLOGX2(KLOG_int_install_isr, NULL);
        return(NULL);
   112f4:	2000      	movs	r0, #0
   112f6:	e7f0      	b.n	112da <_int_install_isr+0x36>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:565
    _KLOGE4(KLOG_int_install_isr, vector, isr_ptr, isr_data);

#if MQX_CHECK_ERRORS
    if ( kernel_data->INTERRUPT_TABLE_PTR == NULL )
    {
        _task_set_error(MQX_COMPONENT_DOES_NOT_EXIST);
   112f8:	2018      	movs	r0, #24
   112fa:	f000 fd09 	bl	11d10 <_task_set_error>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:566
        return(NULL);
   112fe:	2000      	movs	r0, #0
   11300:	e7eb      	b.n	112da <_int_install_isr+0x36>
   11302:	46c0      	nop			; (mov r8, r8)
   11304:	1fffe000 	.word	0x1fffe000

00011308 <_int_init>:
_int_init():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:971
_mqx_uint _int_init
(
    _mqx_uint          first_user_isr_vector_number,
    _mqx_uint          last_user_isr_vector_number
)
{ /* Body */
   11308:	b530      	push	{r4, r5, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:979
    _mqx_uint                  number;

#if MQX_CHECK_ERRORS
    if (last_user_isr_vector_number < first_user_isr_vector_number)
    {
        return MQX_INVALID_PARAMETER;
   1130a:	230c      	movs	r3, #12
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:977
    KERNEL_DATA_STRUCT_PTR     kernel_data;
    INTERRUPT_TABLE_STRUCT_PTR int_table_ptr;
    _mqx_uint                  number;

#if MQX_CHECK_ERRORS
    if (last_user_isr_vector_number < first_user_isr_vector_number)
   1130c:	4281      	cmp	r1, r0
   1130e:	d201      	bcs.n	11314 <_int_init+0xc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1036

#endif /* MQX_SPARSE_ISR_TABLE */

    return MQX_OK;

} /* Endbody */
   11310:	1c18      	adds	r0, r3, #0
   11312:	bd30      	pop	{r4, r5, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:983
    {
        return MQX_INVALID_PARAMETER;
    } /* Endif */
#endif

    _GET_KERNEL_DATA(kernel_data);
   11314:	4b0b      	ldr	r3, [pc, #44]	; (11344 <_int_init+0x3c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:984
    kernel_data->INT_KERNEL_ISR_ADDR = _int_kernel_isr;
   11316:	4a0c      	ldr	r2, [pc, #48]	; (11348 <_int_init+0x40>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:983
    {
        return MQX_INVALID_PARAMETER;
    } /* Endif */
#endif

    _GET_KERNEL_DATA(kernel_data);
   11318:	681c      	ldr	r4, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:984
    kernel_data->INT_KERNEL_ISR_ADDR = _int_kernel_isr;
   1131a:	23c4      	movs	r3, #196	; 0xc4
   1131c:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:989

    /* Set the current default ISR for MQX that is called whenever an
     * unhandled interrupt occurs
     */
    kernel_data->DEFAULT_ISR = _int_default_isr;
   1131e:	4a0b      	ldr	r2, [pc, #44]	; (1134c <_int_init+0x44>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1011
#endif /* MQX_CHECK_MEMORY_ALLOCATION_ERRORS */

    _mem_set_type(int_table_ptr, MEM_TYPE_INTERRUPT_TABLE);
#endif /* MQX_LITE_VERSION_NUMBER */

    kernel_data->INTERRUPT_TABLE_PTR   = int_table_ptr;
   11320:	4b0b      	ldr	r3, [pc, #44]	; (11350 <_int_init+0x48>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:992
     * unhandled interrupt occurs
     */
    kernel_data->DEFAULT_ISR = _int_default_isr;

#if !MQX_SPARSE_ISR_TABLE
    number = last_user_isr_vector_number - first_user_isr_vector_number + 1;
   11322:	1a0d      	subs	r5, r1, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:989
    kernel_data->INT_KERNEL_ISR_ADDR = _int_kernel_isr;

    /* Set the current default ISR for MQX that is called whenever an
     * unhandled interrupt occurs
     */
    kernel_data->DEFAULT_ISR = _int_default_isr;
   11324:	62a2      	str	r2, [r4, #40]	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1011
#endif /* MQX_CHECK_MEMORY_ALLOCATION_ERRORS */

    _mem_set_type(int_table_ptr, MEM_TYPE_INTERRUPT_TABLE);
#endif /* MQX_LITE_VERSION_NUMBER */

    kernel_data->INTERRUPT_TABLE_PTR   = int_table_ptr;
   11326:	63a3      	str	r3, [r4, #56]	; 0x38
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1012
    kernel_data->FIRST_USER_ISR_VECTOR = first_user_isr_vector_number;
   11328:	62e0      	str	r0, [r4, #44]	; 0x2c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1013
    kernel_data->LAST_USER_ISR_VECTOR  = last_user_isr_vector_number;
   1132a:	6321      	str	r1, [r4, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1016

#if !MQX_SPARSE_ISR_TABLE
    while (number--)
   1132c:	1c69      	adds	r1, r5, #1
   1132e:	d007      	beq.n	11340 <_int_init+0x38>
   11330:	1c41      	adds	r1, r0, #1
   11332:	1949      	adds	r1, r1, r5
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1019
    {
        int_table_ptr->APP_ISR      = _int_default_isr;
        int_table_ptr->APP_ISR_DATA = (pointer)(first_user_isr_vector_number++);
   11334:	6098      	str	r0, [r3, #8]
   11336:	3001      	adds	r0, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1018
    kernel_data->LAST_USER_ISR_VECTOR  = last_user_isr_vector_number;

#if !MQX_SPARSE_ISR_TABLE
    while (number--)
    {
        int_table_ptr->APP_ISR      = _int_default_isr;
   11338:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1020
        int_table_ptr->APP_ISR_DATA = (pointer)(first_user_isr_vector_number++);
        ++int_table_ptr;
   1133a:	330c      	adds	r3, #12
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1016
    kernel_data->INTERRUPT_TABLE_PTR   = int_table_ptr;
    kernel_data->FIRST_USER_ISR_VECTOR = first_user_isr_vector_number;
    kernel_data->LAST_USER_ISR_VECTOR  = last_user_isr_vector_number;

#if !MQX_SPARSE_ISR_TABLE
    while (number--)
   1133c:	4288      	cmp	r0, r1
   1133e:	d1f9      	bne.n	11334 <_int_init+0x2c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/int.c:1034
        int_table_ptr[number] = NULL;
    }

#endif /* MQX_SPARSE_ISR_TABLE */

    return MQX_OK;
   11340:	2300      	movs	r3, #0
   11342:	e7e5      	b.n	11310 <_int_init+0x8>
   11344:	1fffe000 	.word	0x1fffe000
   11348:	00015863 	.word	0x00015863
   1134c:	000111e5 	.word	0x000111e5
   11350:	20000e30 	.word	0x20000e30

00011354 <_lwevent_create>:
_lwevent_create():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:198
_mqx_uint _lwevent_create
(
    LWEVENT_STRUCT_PTR  event_ptr,
    _mqx_uint           flags
)
{
   11354:	b538      	push	{r3, r4, r5, lr}
_lwevent_create_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:78
    {
        return MQX_LWEVENT_INVALID;
    }
#endif

    _GET_KERNEL_DATA(kernel_data);
   11356:	4b1e      	ldr	r3, [pc, #120]	; (113d0 <_lwevent_create+0x7c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:84

    _KLOGE2(KLOG_lwevent_create, event_ptr);

    _QUEUE_INIT(&event_ptr->WAITING_TASKS, 0);
    event_ptr->VALUE = 0;
    event_ptr->FLAGS = flags;
   11358:	61c1      	str	r1, [r0, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:78
    {
        return MQX_LWEVENT_INVALID;
    }
#endif

    _GET_KERNEL_DATA(kernel_data);
   1135a:	681d      	ldr	r5, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:82

    _KLOGE2(KLOG_lwevent_create, event_ptr);

    _QUEUE_INIT(&event_ptr->WAITING_TASKS, 0);
   1135c:	1c03      	adds	r3, r0, #0
   1135e:	3308      	adds	r3, #8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:86
    event_ptr->VALUE = 0;
    event_ptr->FLAGS = flags;

    if (flags & LWEVENT_AUTO_CLEAR)
   11360:	07c9      	lsls	r1, r1, #31
   11362:	17c9      	asrs	r1, r1, #31
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:82

    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_lwevent_create, event_ptr);

    _QUEUE_INIT(&event_ptr->WAITING_TASKS, 0);
   11364:	6083      	str	r3, [r0, #8]
   11366:	60c3      	str	r3, [r0, #12]
   11368:	2300      	movs	r3, #0
   1136a:	8203      	strh	r3, [r0, #16]
   1136c:	8243      	strh	r3, [r0, #18]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:83
    event_ptr->VALUE = 0;
   1136e:	6183      	str	r3, [r0, #24]
   11370:	6201      	str	r1, [r0, #32]
_lwevent_create():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:198
_mqx_uint _lwevent_create
(
    LWEVENT_STRUCT_PTR  event_ptr,
    _mqx_uint           flags
)
{
   11372:	1c04      	adds	r4, r0, #0
_lwevent_create_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:91
    if (flags & LWEVENT_AUTO_CLEAR)
        event_ptr->AUTO = ~0;
    else
        event_ptr->AUTO = 0;

    _int_disable();
   11374:	f7ff ff5c 	bl	11230 <_int_disable>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:105
        }
    }
    else
#endif
    {
        if (kernel_data->LWEVENTS.NEXT == NULL)
   11378:	218e      	movs	r1, #142	; 0x8e
   1137a:	0089      	lsls	r1, r1, #2
   1137c:	586b      	ldr	r3, [r5, r1]
   1137e:	2b00      	cmp	r3, #0
   11380:	d00f      	beq.n	113a2 <_lwevent_create+0x4e>
   11382:	186a      	adds	r2, r5, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:112
            /* Initialize the light weight event queue */
            _QUEUE_INIT(&kernel_data->LWEVENTS, 0);
        }
    }

    event_ptr->VALID = LWEVENT_VALID;
   11384:	4913      	ldr	r1, [pc, #76]	; (113d4 <_lwevent_create+0x80>)
   11386:	6161      	str	r1, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:135
    }
    else
#endif
    {
        event_chk_ptr = (LWEVENT_STRUCT_PTR) ((pointer) kernel_data->LWEVENTS.NEXT);
        while (event_chk_ptr != (LWEVENT_STRUCT_PTR) ((pointer) &kernel_data->LWEVENTS))
   11388:	4293      	cmp	r3, r2
   1138a:	d103      	bne.n	11394 <_lwevent_create+0x40>
   1138c:	e012      	b.n	113b4 <_lwevent_create+0x60>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:143
            {
                _int_enable();
                _KLOGX2(KLOG_lwevent_create, MQX_EINVAL);
                return (MQX_EINVAL);
            }
            event_chk_ptr = (LWEVENT_STRUCT_PTR) ((pointer) event_chk_ptr->LINK.NEXT);
   1138e:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:135
    }
    else
#endif
    {
        event_chk_ptr = (LWEVENT_STRUCT_PTR) ((pointer) kernel_data->LWEVENTS.NEXT);
        while (event_chk_ptr != (LWEVENT_STRUCT_PTR) ((pointer) &kernel_data->LWEVENTS))
   11390:	4293      	cmp	r3, r2
   11392:	d00f      	beq.n	113b4 <_lwevent_create+0x60>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:137
        {
            if (event_chk_ptr == event_ptr)
   11394:	429c      	cmp	r4, r3
   11396:	d1fa      	bne.n	1138e <_lwevent_create+0x3a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:139
            {
                _int_enable();
   11398:	f7ff ff56 	bl	11248 <_int_enable>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:141
                _KLOGX2(KLOG_lwevent_create, MQX_EINVAL);
                return (MQX_EINVAL);
   1139c:	2082      	movs	r0, #130	; 0x82
   1139e:	00c0      	lsls	r0, r0, #3
   113a0:	e014      	b.n	113cc <_lwevent_create+0x78>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:108
#endif
    {
        if (kernel_data->LWEVENTS.NEXT == NULL)
        {
            /* Initialize the light weight event queue */
            _QUEUE_INIT(&kernel_data->LWEVENTS, 0);
   113a2:	208e      	movs	r0, #142	; 0x8e
   113a4:	0080      	lsls	r0, r0, #2
   113a6:	182a      	adds	r2, r5, r0
   113a8:	506a      	str	r2, [r5, r1]
   113aa:	8113      	strh	r3, [r2, #8]
   113ac:	8153      	strh	r3, [r2, #10]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:112
        }
    }

    event_ptr->VALID = LWEVENT_VALID;
   113ae:	4b09      	ldr	r3, [pc, #36]	; (113d4 <_lwevent_create+0x80>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:108
#endif
    {
        if (kernel_data->LWEVENTS.NEXT == NULL)
        {
            /* Initialize the light weight event queue */
            _QUEUE_INIT(&kernel_data->LWEVENTS, 0);
   113b0:	6052      	str	r2, [r2, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:112
        }
    }

    event_ptr->VALID = LWEVENT_VALID;
   113b2:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:156
        _QUEUE_ENQUEUE(&kernel_data->USR_LWEVENTS, &event_ptr->LINK);
    }
    else
#endif
    {
        _QUEUE_ENQUEUE(&kernel_data->LWEVENTS, &event_ptr->LINK);
   113b4:	6853      	ldr	r3, [r2, #4]
   113b6:	6819      	ldr	r1, [r3, #0]
   113b8:	6021      	str	r1, [r4, #0]
   113ba:	601c      	str	r4, [r3, #0]
   113bc:	6063      	str	r3, [r4, #4]
   113be:	604c      	str	r4, [r1, #4]
   113c0:	8913      	ldrh	r3, [r2, #8]
   113c2:	3301      	adds	r3, #1
   113c4:	8113      	strh	r3, [r2, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:159
    }

    _int_enable();
   113c6:	f7ff ff3f 	bl	11248 <_int_enable>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:162

    _KLOGX2(KLOG_lwevent_create, MQX_OK);
    return (MQX_OK);
   113ca:	2000      	movs	r0, #0
_lwevent_create():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:207
        return _usr_lwevent_create(event_ptr, flags);
    }
#endif

    return _lwevent_create_internal(event_ptr, flags, FALSE);
}
   113cc:	bd38      	pop	{r3, r4, r5, pc}
   113ce:	46c0      	nop			; (mov r8, r8)
   113d0:	1fffe000 	.word	0x1fffe000
   113d4:	6c65766e 	.word	0x6c65766e

000113d8 <_lwevent_set>:
_lwevent_set():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:734
_mqx_uint _lwevent_set
(
    LWEVENT_STRUCT_PTR  event_ptr,
    _mqx_uint           bit_mask
)
{
   113d8:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:748
    {
        return _usr_lwevent_set(event_ptr, bit_mask);
    }
#endif

    _GET_KERNEL_DATA(kernel_data);
   113da:	4b46      	ldr	r3, [pc, #280]	; (114f4 <_lwevent_set+0x11c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:734
_mqx_uint _lwevent_set
(
    LWEVENT_STRUCT_PTR  event_ptr,
    _mqx_uint           bit_mask
)
{
   113dc:	4656      	mov	r6, sl
   113de:	464d      	mov	r5, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:748
    {
        return _usr_lwevent_set(event_ptr, bit_mask);
    }
#endif

    _GET_KERNEL_DATA(kernel_data);
   113e0:	681a      	ldr	r2, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:734
_mqx_uint _lwevent_set
(
    LWEVENT_STRUCT_PTR  event_ptr,
    _mqx_uint           bit_mask
)
{
   113e2:	465f      	mov	r7, fp
   113e4:	4644      	mov	r4, r8
   113e6:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:752

    _GET_KERNEL_DATA(kernel_data);

    _KLOGE3(KLOG_lwevent_set, event_ptr, bit_mask);

    _INT_DISABLE();
   113e8:	69d6      	ldr	r6, [r2, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:734
_mqx_uint _lwevent_set
(
    LWEVENT_STRUCT_PTR  event_ptr,
    _mqx_uint           bit_mask
)
{
   113ea:	b085      	sub	sp, #20
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:752

    _GET_KERNEL_DATA(kernel_data);

    _KLOGE3(KLOG_lwevent_set, event_ptr, bit_mask);

    _INT_DISABLE();
   113ec:	6d75      	ldr	r5, [r6, #84]	; 0x54
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:748
    {
        return _usr_lwevent_set(event_ptr, bit_mask);
    }
#endif

    _GET_KERNEL_DATA(kernel_data);
   113ee:	4694      	mov	ip, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:752

    _KLOGE3(KLOG_lwevent_set, event_ptr, bit_mask);

    _INT_DISABLE();
   113f0:	2d00      	cmp	r5, #0
   113f2:	d100      	bne.n	113f6 <_lwevent_set+0x1e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:752 (discriminator 1)
   113f4:	b672      	cpsid	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:754 (discriminator 2)
#if MQX_CHECK_VALIDITY
    if (event_ptr->VALID != LWEVENT_VALID)
   113f6:	4b40      	ldr	r3, [pc, #256]	; (114f8 <_lwevent_set+0x120>)
   113f8:	6947      	ldr	r7, [r0, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:752 (discriminator 2)

    _GET_KERNEL_DATA(kernel_data);

    _KLOGE3(KLOG_lwevent_set, event_ptr, bit_mask);

    _INT_DISABLE();
   113fa:	1c6c      	adds	r4, r5, #1
   113fc:	46a0      	mov	r8, r4
   113fe:	6574      	str	r4, [r6, #84]	; 0x54
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:754 (discriminator 2)
#if MQX_CHECK_VALIDITY
    if (event_ptr->VALID != LWEVENT_VALID)
   11400:	429f      	cmp	r7, r3
   11402:	d009      	beq.n	11418 <_lwevent_set+0x40>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:756
    {
        _int_enable();
   11404:	f7ff ff20 	bl	11248 <_int_enable>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:758
        _KLOGX2(KLOG_lwevent_set, MQX_LWEVENT_INVALID);
        return (MQX_LWEVENT_INVALID);
   11408:	2039      	movs	r0, #57	; 0x39
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:801
    _CHECK_RUN_SCHEDULER();

    _KLOGX2(KLOG_lwevent_set, MQX_OK);
    return (MQX_OK);

}
   1140a:	b005      	add	sp, #20
   1140c:	bc3c      	pop	{r2, r3, r4, r5}
   1140e:	4690      	mov	r8, r2
   11410:	4699      	mov	r9, r3
   11412:	46a2      	mov	sl, r4
   11414:	46ab      	mov	fp, r5
   11416:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:762
        _KLOGX2(KLOG_lwevent_set, MQX_LWEVENT_INVALID);
        return (MQX_LWEVENT_INVALID);
    } /* Endif */
#endif

    set_bits = event_ptr->VALUE | bit_mask;
   11418:	6982      	ldr	r2, [r0, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:764

    if (_QUEUE_GET_SIZE(&event_ptr->WAITING_TASKS))
   1141a:	8a03      	ldrh	r3, [r0, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:762
        _KLOGX2(KLOG_lwevent_set, MQX_LWEVENT_INVALID);
        return (MQX_LWEVENT_INVALID);
    } /* Endif */
#endif

    set_bits = event_ptr->VALUE | bit_mask;
   1141c:	4311      	orrs	r1, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:764

    if (_QUEUE_GET_SIZE(&event_ptr->WAITING_TASKS))
   1141e:	2b00      	cmp	r3, #0
   11420:	d05c      	beq.n	114dc <_lwevent_set+0x104>
   11422:	2308      	movs	r3, #8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:779
            if (((td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED) && ((td_ptr->LWEVENT_BITS & set_bits)
                            == td_ptr->LWEVENT_BITS)) || ((!(td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED))
                            && (td_ptr->LWEVENT_BITS & set_bits)))
            {
                _QUEUE_REMOVE(&event_ptr->WAITING_TASKS, q_ptr);
                _TIME_DEQUEUE(td_ptr, kernel_data);
   11424:	229a      	movs	r2, #154	; 0x9a
   11426:	181b      	adds	r3, r3, r0
   11428:	0052      	lsls	r2, r2, #1
   1142a:	4699      	mov	r9, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:768

    if (_QUEUE_GET_SIZE(&event_ptr->WAITING_TASKS))
    {
        /* Schedule waiting task(s) to run if bits ok */

        q_ptr = event_ptr->WAITING_TASKS.NEXT;
   1142c:	6887      	ldr	r7, [r0, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:779
            if (((td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED) && ((td_ptr->LWEVENT_BITS & set_bits)
                            == td_ptr->LWEVENT_BITS)) || ((!(td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED))
                            && (td_ptr->LWEVENT_BITS & set_bits)))
            {
                _QUEUE_REMOVE(&event_ptr->WAITING_TASKS, q_ptr);
                _TIME_DEQUEUE(td_ptr, kernel_data);
   1142e:	1c13      	adds	r3, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:774
        while (q_ptr != (QUEUE_ELEMENT_STRUCT_PTR) ((pointer) &event_ptr->WAITING_TASKS))
        {
            td_ptr = (pointer) q_ptr;
            _BACKUP_POINTER(td_ptr, TD_STRUCT, AUX_QUEUE);
            next_q_ptr = q_ptr->NEXT;
            if (((td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED) && ((td_ptr->LWEVENT_BITS & set_bits)
   11430:	2480      	movs	r4, #128	; 0x80
   11432:	464a      	mov	r2, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:779
                            == td_ptr->LWEVENT_BITS)) || ((!(td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED))
                            && (td_ptr->LWEVENT_BITS & set_bits)))
            {
                _QUEUE_REMOVE(&event_ptr->WAITING_TASKS, q_ptr);
                _TIME_DEQUEUE(td_ptr, kernel_data);
   11434:	4463      	add	r3, ip
   11436:	46b2      	mov	sl, r6
   11438:	46a9      	mov	r9, r5
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:774
        while (q_ptr != (QUEUE_ELEMENT_STRUCT_PTR) ((pointer) &event_ptr->WAITING_TASKS))
        {
            td_ptr = (pointer) q_ptr;
            _BACKUP_POINTER(td_ptr, TD_STRUCT, AUX_QUEUE);
            next_q_ptr = q_ptr->NEXT;
            if (((td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED) && ((td_ptr->LWEVENT_BITS & set_bits)
   1143a:	46a3      	mov	fp, r4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:779
                            == td_ptr->LWEVENT_BITS)) || ((!(td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED))
                            && (td_ptr->LWEVENT_BITS & set_bits)))
            {
                _QUEUE_REMOVE(&event_ptr->WAITING_TASKS, q_ptr);
                _TIME_DEQUEUE(td_ptr, kernel_data);
   1143c:	9303      	str	r3, [sp, #12]
   1143e:	1c3e      	adds	r6, r7, #0
   11440:	9200      	str	r2, [sp, #0]
   11442:	4665      	mov	r5, ip
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:769
    if (_QUEUE_GET_SIZE(&event_ptr->WAITING_TASKS))
    {
        /* Schedule waiting task(s) to run if bits ok */

        q_ptr = event_ptr->WAITING_TASKS.NEXT;
        while (q_ptr != (QUEUE_ELEMENT_STRUCT_PTR) ((pointer) &event_ptr->WAITING_TASKS))
   11444:	e039      	b.n	114ba <_lwevent_set+0xe2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:776
            td_ptr = (pointer) q_ptr;
            _BACKUP_POINTER(td_ptr, TD_STRUCT, AUX_QUEUE);
            next_q_ptr = q_ptr->NEXT;
            if (((td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED) && ((td_ptr->LWEVENT_BITS & set_bits)
                            == td_ptr->LWEVENT_BITS)) || ((!(td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED))
                            && (td_ptr->LWEVENT_BITS & set_bits)))
   11446:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   11448:	400c      	ands	r4, r1
   1144a:	d034      	beq.n	114b6 <_lwevent_set+0xde>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:778
            {
                _QUEUE_REMOVE(&event_ptr->WAITING_TASKS, q_ptr);
   1144c:	6876      	ldr	r6, [r6, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:779
                _TIME_DEQUEUE(td_ptr, kernel_data);
   1144e:	2780      	movs	r7, #128	; 0x80
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:778
            next_q_ptr = q_ptr->NEXT;
            if (((td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED) && ((td_ptr->LWEVENT_BITS & set_bits)
                            == td_ptr->LWEVENT_BITS)) || ((!(td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED))
                            && (td_ptr->LWEVENT_BITS & set_bits)))
            {
                _QUEUE_REMOVE(&event_ptr->WAITING_TASKS, q_ptr);
   11450:	6032      	str	r2, [r6, #0]
   11452:	6056      	str	r6, [r2, #4]
   11454:	8a06      	ldrh	r6, [r0, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:779
                _TIME_DEQUEUE(td_ptr, kernel_data);
   11456:	007f      	lsls	r7, r7, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:778
            next_q_ptr = q_ptr->NEXT;
            if (((td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED) && ((td_ptr->LWEVENT_BITS & set_bits)
                            == td_ptr->LWEVENT_BITS)) || ((!(td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED))
                            && (td_ptr->LWEVENT_BITS & set_bits)))
            {
                _QUEUE_REMOVE(&event_ptr->WAITING_TASKS, q_ptr);
   11458:	3e01      	subs	r6, #1
   1145a:	8206      	strh	r6, [r0, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:779
                _TIME_DEQUEUE(td_ptr, kernel_data);
   1145c:	689e      	ldr	r6, [r3, #8]
   1145e:	9601      	str	r6, [sp, #4]
   11460:	423e      	tst	r6, r7
   11462:	d012      	beq.n	1148a <_lwevent_set+0xb2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:779 (discriminator 1)
   11464:	685e      	ldr	r6, [r3, #4]
   11466:	681f      	ldr	r7, [r3, #0]
   11468:	6037      	str	r7, [r6, #0]
   1146a:	607e      	str	r6, [r7, #4]
   1146c:	9e03      	ldr	r6, [sp, #12]
   1146e:	2701      	movs	r7, #1
   11470:	8936      	ldrh	r6, [r6, #8]
   11472:	427f      	negs	r7, r7
   11474:	46b4      	mov	ip, r6
   11476:	44bc      	add	ip, r7
   11478:	9e03      	ldr	r6, [sp, #12]
   1147a:	4667      	mov	r7, ip
   1147c:	8137      	strh	r7, [r6, #8]
   1147e:	4f1f      	ldr	r7, [pc, #124]	; (114fc <_lwevent_set+0x124>)
   11480:	9e01      	ldr	r6, [sp, #4]
   11482:	403e      	ands	r6, r7
   11484:	2703      	movs	r7, #3
   11486:	433e      	orrs	r6, r7
   11488:	609e      	str	r6, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:780
                td_ptr->INFO = 0;
   1148a:	2600      	movs	r6, #0
   1148c:	639e      	str	r6, [r3, #56]	; 0x38
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:781
                _TASK_READY(td_ptr, kernel_data);
   1148e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   11490:	69de      	ldr	r6, [r3, #28]
   11492:	42be      	cmp	r6, r7
   11494:	d900      	bls.n	11498 <_lwevent_set+0xc0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:781 (discriminator 1)
   11496:	626e      	str	r6, [r5, #36]	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:781 (discriminator 2)
   11498:	69df      	ldr	r7, [r3, #28]
   1149a:	2602      	movs	r6, #2
   1149c:	609e      	str	r6, [r3, #8]
   1149e:	687e      	ldr	r6, [r7, #4]
   114a0:	46bc      	mov	ip, r7
   114a2:	6837      	ldr	r7, [r6, #0]
   114a4:	605e      	str	r6, [r3, #4]
   114a6:	601f      	str	r7, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:785 (discriminator 2)

                /* store information about which bits caused task to be unblocked */
                td_ptr->LWEVENT_BITS &= set_bits;
                set_bits &= ~(event_ptr->AUTO & td_ptr->LWEVENT_BITS);
   114a8:	6a07      	ldr	r7, [r0, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:781 (discriminator 2)
                            && (td_ptr->LWEVENT_BITS & set_bits)))
            {
                _QUEUE_REMOVE(&event_ptr->WAITING_TASKS, q_ptr);
                _TIME_DEQUEUE(td_ptr, kernel_data);
                td_ptr->INFO = 0;
                _TASK_READY(td_ptr, kernel_data);
   114aa:	6033      	str	r3, [r6, #0]
   114ac:	4666      	mov	r6, ip
   114ae:	6073      	str	r3, [r6, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:784 (discriminator 2)

                /* store information about which bits caused task to be unblocked */
                td_ptr->LWEVENT_BITS &= set_bits;
   114b0:	679c      	str	r4, [r3, #120]	; 0x78
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:785 (discriminator 2)
                set_bits &= ~(event_ptr->AUTO & td_ptr->LWEVENT_BITS);
   114b2:	403c      	ands	r4, r7
   114b4:	43a1      	bics	r1, r4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:734 (discriminator 1)
_mqx_uint _lwevent_set
(
    LWEVENT_STRUCT_PTR  event_ptr,
    _mqx_uint           bit_mask
)
{
   114b6:	1c16      	adds	r6, r2, #0
   114b8:	9a00      	ldr	r2, [sp, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:769 (discriminator 1)
    if (_QUEUE_GET_SIZE(&event_ptr->WAITING_TASKS))
    {
        /* Schedule waiting task(s) to run if bits ok */

        q_ptr = event_ptr->WAITING_TASKS.NEXT;
        while (q_ptr != (QUEUE_ELEMENT_STRUCT_PTR) ((pointer) &event_ptr->WAITING_TASKS))
   114ba:	4296      	cmp	r6, r2
   114bc:	d00c      	beq.n	114d8 <_lwevent_set+0x100>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:774
        {
            td_ptr = (pointer) q_ptr;
            _BACKUP_POINTER(td_ptr, TD_STRUCT, AUX_QUEUE);
            next_q_ptr = q_ptr->NEXT;
            if (((td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED) && ((td_ptr->LWEVENT_BITS & set_bits)
   114be:	1c33      	adds	r3, r6, #0
   114c0:	3b3c      	subs	r3, #60	; 0x3c
   114c2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   114c4:	465f      	mov	r7, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:773
        q_ptr = event_ptr->WAITING_TASKS.NEXT;
        while (q_ptr != (QUEUE_ELEMENT_STRUCT_PTR) ((pointer) &event_ptr->WAITING_TASKS))
        {
            td_ptr = (pointer) q_ptr;
            _BACKUP_POINTER(td_ptr, TD_STRUCT, AUX_QUEUE);
            next_q_ptr = q_ptr->NEXT;
   114c6:	6832      	ldr	r2, [r6, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:774
            if (((td_ptr->FLAGS & TASK_LWEVENT_ALL_BITS_WANTED) && ((td_ptr->LWEVENT_BITS & set_bits)
   114c8:	423c      	tst	r4, r7
   114ca:	d0bc      	beq.n	11446 <_lwevent_set+0x6e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:774 (discriminator 1)
   114cc:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   114ce:	6f9f      	ldr	r7, [r3, #120]	; 0x78
   114d0:	400c      	ands	r4, r1
   114d2:	42a7      	cmp	r7, r4
   114d4:	d1ef      	bne.n	114b6 <_lwevent_set+0xde>
   114d6:	e7b9      	b.n	1144c <_lwevent_set+0x74>
   114d8:	4656      	mov	r6, sl
   114da:	464d      	mov	r5, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:793
            q_ptr = next_q_ptr;
        } /* Endwhile */
    } /* Endif */

    event_ptr->VALUE = set_bits;
    _INT_ENABLE();
   114dc:	4643      	mov	r3, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:792
            } /* Endif */
            q_ptr = next_q_ptr;
        } /* Endwhile */
    } /* Endif */

    event_ptr->VALUE = set_bits;
   114de:	6181      	str	r1, [r0, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:793
    _INT_ENABLE();
   114e0:	2b00      	cmp	r3, #0
   114e2:	d003      	beq.n	114ec <_lwevent_set+0x114>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:793 (discriminator 1)
   114e4:	6575      	str	r5, [r6, #84]	; 0x54
   114e6:	2d00      	cmp	r5, #0
   114e8:	d100      	bne.n	114ec <_lwevent_set+0x114>
   114ea:	b662      	cpsie	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:796

    /* May need to let higher priority task run */
    _CHECK_RUN_SCHEDULER();
   114ec:	f004 f924 	bl	15738 <_sched_check_scheduler_internal>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:799

    _KLOGX2(KLOG_lwevent_set, MQX_OK);
    return (MQX_OK);
   114f0:	2000      	movs	r0, #0
   114f2:	e78a      	b.n	1140a <_lwevent_set+0x32>
   114f4:	1fffe000 	.word	0x1fffe000
   114f8:	6c65766e 	.word	0x6c65766e
   114fc:	fffffeff 	.word	0xfffffeff

00011500 <_lwevent_wait_for>:
_lwevent_wait_for():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1025
    LWEVENT_STRUCT_PTR  event_ptr,
    _mqx_uint           bit_mask,
    boolean             all,
    MQX_TICK_STRUCT_PTR tick_ptr
)
{
   11500:	b5f0      	push	{r4, r5, r6, r7, lr}
   11502:	4647      	mov	r7, r8
   11504:	b480      	push	{r7}
_lwevent_wait_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1142
{
    KERNEL_DATA_STRUCT_PTR  kernel_data;
    TD_STRUCT_PTR           td_ptr;
    _mqx_uint               result;

    _GET_KERNEL_DATA(kernel_data);
   11506:	4c3a      	ldr	r4, [pc, #232]	; (115f0 <_lwevent_wait_for+0xf0>)
_lwevent_wait_for():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1025
    LWEVENT_STRUCT_PTR  event_ptr,
    _mqx_uint           bit_mask,
    boolean             all,
    MQX_TICK_STRUCT_PTR tick_ptr
)
{
   11508:	1c06      	adds	r6, r0, #0
_lwevent_wait_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1142
{
    KERNEL_DATA_STRUCT_PTR  kernel_data;
    TD_STRUCT_PTR           td_ptr;
    _mqx_uint               result;

    _GET_KERNEL_DATA(kernel_data);
   1150a:	6824      	ldr	r4, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1147

#if MQX_CHECK_ERRORS
    if (kernel_data->IN_ISR)
    {
        return (MQX_CANNOT_CALL_FUNCTION_FROM_ISR);
   1150c:	200d      	movs	r0, #13
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1145
    _mqx_uint               result;

    _GET_KERNEL_DATA(kernel_data);

#if MQX_CHECK_ERRORS
    if (kernel_data->IN_ISR)
   1150e:	8b25      	ldrh	r5, [r4, #24]
   11510:	2d00      	cmp	r5, #0
   11512:	d002      	beq.n	1151a <_lwevent_wait_for+0x1a>
_lwevent_wait_for():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1045
    result = _lwevent_wait_internal(event_ptr, bit_mask, all, tick_ptr, FALSE);

    _KLOGX2(KLOG_lwevent_wait_for, result);
    return (result);

}
   11514:	bc04      	pop	{r2}
   11516:	4690      	mov	r8, r2
   11518:	bdf0      	pop	{r4, r5, r6, r7, pc}
_lwevent_wait_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1152
        return (MQX_CANNOT_CALL_FUNCTION_FROM_ISR);
    } /* Endif */
#endif

    result = MQX_OK;
    td_ptr = kernel_data->ACTIVE_PTR;
   1151a:	69e5      	ldr	r5, [r4, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1153
    _INT_DISABLE();
   1151c:	6d68      	ldr	r0, [r5, #84]	; 0x54
   1151e:	2800      	cmp	r0, #0
   11520:	d00b      	beq.n	1153a <_lwevent_wait_for+0x3a>
   11522:	1c47      	adds	r7, r0, #1
   11524:	46b8      	mov	r8, r7
   11526:	656f      	str	r7, [r5, #84]	; 0x54
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1156

#if MQX_CHECK_VALIDITY
    if (event_ptr->VALID != LWEVENT_VALID)
   11528:	4f32      	ldr	r7, [pc, #200]	; (115f4 <_lwevent_wait_for+0xf4>)
   1152a:	46bc      	mov	ip, r7
   1152c:	6977      	ldr	r7, [r6, #20]
   1152e:	4567      	cmp	r7, ip
   11530:	d00c      	beq.n	1154c <_lwevent_wait_for+0x4c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1158
    {
        _int_enable();
   11532:	f7ff fe89 	bl	11248 <_int_enable>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1159
        return (MQX_LWEVENT_INVALID);
   11536:	2039      	movs	r0, #57	; 0x39
   11538:	e7ec      	b.n	11514 <_lwevent_wait_for+0x14>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1153
    } /* Endif */
#endif

    result = MQX_OK;
    td_ptr = kernel_data->ACTIVE_PTR;
    _INT_DISABLE();
   1153a:	b672      	cpsid	i
   1153c:	1c47      	adds	r7, r0, #1
   1153e:	46b8      	mov	r8, r7
   11540:	656f      	str	r7, [r5, #84]	; 0x54
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1156

#if MQX_CHECK_VALIDITY
    if (event_ptr->VALID != LWEVENT_VALID)
   11542:	4f2c      	ldr	r7, [pc, #176]	; (115f4 <_lwevent_wait_for+0xf4>)
   11544:	46bc      	mov	ip, r7
   11546:	6977      	ldr	r7, [r6, #20]
   11548:	4567      	cmp	r7, ip
   1154a:	d1f2      	bne.n	11532 <_lwevent_wait_for+0x32>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1163
        _int_enable();
        return (MQX_LWEVENT_INVALID);
    } /* Endif */
#endif

    if (    (all &&  (event_ptr->VALUE & bit_mask) == bit_mask)
   1154c:	2a00      	cmp	r2, #0
   1154e:	d112      	bne.n	11576 <_lwevent_wait_for+0x76>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1164
         || (!all && (event_ptr->VALUE & bit_mask)))
   11550:	69b2      	ldr	r2, [r6, #24]
   11552:	1c17      	adds	r7, r2, #0
   11554:	400f      	ands	r7, r1
   11556:	46bc      	mov	ip, r7
   11558:	d040      	beq.n	115dc <_lwevent_wait_for+0xdc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1169
    {
        /* store information about which bits caused task to be unblocked */
        td_ptr->LWEVENT_BITS = event_ptr->VALUE & bit_mask;
        /* clear used automatic events */
        event_ptr->VALUE &= ~(event_ptr->AUTO & bit_mask);
   1155a:	6a37      	ldr	r7, [r6, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1167

    if (    (all &&  (event_ptr->VALUE & bit_mask) == bit_mask)
         || (!all && (event_ptr->VALUE & bit_mask)))
    {
        /* store information about which bits caused task to be unblocked */
        td_ptr->LWEVENT_BITS = event_ptr->VALUE & bit_mask;
   1155c:	4663      	mov	r3, ip
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1169
        /* clear used automatic events */
        event_ptr->VALUE &= ~(event_ptr->AUTO & bit_mask);
   1155e:	4039      	ands	r1, r7
   11560:	438a      	bics	r2, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1171

        _INT_ENABLE();
   11562:	4641      	mov	r1, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1167

    if (    (all &&  (event_ptr->VALUE & bit_mask) == bit_mask)
         || (!all && (event_ptr->VALUE & bit_mask)))
    {
        /* store information about which bits caused task to be unblocked */
        td_ptr->LWEVENT_BITS = event_ptr->VALUE & bit_mask;
   11564:	67ab      	str	r3, [r5, #120]	; 0x78
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1169
        /* clear used automatic events */
        event_ptr->VALUE &= ~(event_ptr->AUTO & bit_mask);
   11566:	61b2      	str	r2, [r6, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1171

        _INT_ENABLE();
   11568:	2900      	cmp	r1, #0
   1156a:	d002      	beq.n	11572 <_lwevent_wait_for+0x72>
   1156c:	6568      	str	r0, [r5, #84]	; 0x54
   1156e:	2800      	cmp	r0, #0
   11570:	d032      	beq.n	115d8 <_lwevent_wait_for+0xd8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1172
        return (result);
   11572:	2000      	movs	r0, #0
   11574:	e7ce      	b.n	11514 <_lwevent_wait_for+0x14>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1163
        _int_enable();
        return (MQX_LWEVENT_INVALID);
    } /* Endif */
#endif

    if (    (all &&  (event_ptr->VALUE & bit_mask) == bit_mask)
   11576:	69b2      	ldr	r2, [r6, #24]
   11578:	1c17      	adds	r7, r2, #0
   1157a:	400f      	ands	r7, r1
   1157c:	46bc      	mov	ip, r7
   1157e:	42b9      	cmp	r1, r7
   11580:	d0eb      	beq.n	1155a <_lwevent_wait_for+0x5a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1180
    /* Must wait for a event to become available */

    td_ptr->LWEVENT_BITS = bit_mask;
    if (all)
    {
        td_ptr->FLAGS |= TASK_LWEVENT_ALL_BITS_WANTED;
   11582:	6aaf      	ldr	r7, [r5, #40]	; 0x28
   11584:	2280      	movs	r2, #128	; 0x80
   11586:	433a      	orrs	r2, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1177
        return (result);
    } /* Endif */

    /* Must wait for a event to become available */

    td_ptr->LWEVENT_BITS = bit_mask;
   11588:	67a9      	str	r1, [r5, #120]	; 0x78
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1180
    if (all)
    {
        td_ptr->FLAGS |= TASK_LWEVENT_ALL_BITS_WANTED;
   1158a:	62aa      	str	r2, [r5, #40]	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1188
    {
        td_ptr->FLAGS &= ~TASK_LWEVENT_ALL_BITS_WANTED;
    } /* Endif */

    /* Enqueue at end */
    _QUEUE_ENQUEUE(&event_ptr->WAITING_TASKS, &td_ptr->AUX_QUEUE);
   1158c:	68f2      	ldr	r2, [r6, #12]
   1158e:	1c28      	adds	r0, r5, #0
   11590:	6811      	ldr	r1, [r2, #0]
   11592:	303c      	adds	r0, #60	; 0x3c
   11594:	63e9      	str	r1, [r5, #60]	; 0x3c
   11596:	6010      	str	r0, [r2, #0]
   11598:	642a      	str	r2, [r5, #64]	; 0x40
   1159a:	6048      	str	r0, [r1, #4]
   1159c:	8a32      	ldrh	r2, [r6, #16]
   1159e:	3201      	adds	r2, #1
   115a0:	8232      	strh	r2, [r6, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1191

    /* Now put the task to sleep */
    td_ptr->STATE = LWEVENT_BLOCKED;
   115a2:	4a15      	ldr	r2, [pc, #84]	; (115f8 <_lwevent_wait_for+0xf8>)
   115a4:	60aa      	str	r2, [r5, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1192
    td_ptr->INFO = (_mqx_uint) &event_ptr->WAITING_TASKS;
   115a6:	1c32      	adds	r2, r6, #0
   115a8:	3208      	adds	r2, #8
   115aa:	63aa      	str	r2, [r5, #56]	; 0x38
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1193
    if (tick_ptr)
   115ac:	2b00      	cmp	r3, #0
   115ae:	d01b      	beq.n	115e8 <_lwevent_wait_for+0xe8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1201
        {
            _time_delay_until(tick_ptr);
        }
        else
        {
            _time_delay_for(tick_ptr);
   115b0:	1c18      	adds	r0, r3, #0
   115b2:	f000 fddf 	bl	12174 <_time_delay_for>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1203
        } /* Endif */
        if (td_ptr->INFO)
   115b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   115b8:	2b00      	cmp	r3, #0
   115ba:	d017      	beq.n	115ec <_lwevent_wait_for+0xec>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1207
        {
            /* Must have timed out */
            /*_QUEUE_REMOVE(&event_ptr->WAITING_TASKS, &td_ptr->AUX_QUEUE);*/
            result = LWEVENT_WAIT_TIMEOUT;
   115bc:	20c4      	movs	r0, #196	; 0xc4
   115be:	0080      	lsls	r0, r0, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1216
    {
        _task_block();
    } /* Endif */

#if MQX_COMPONENT_DESTRUCTION
    if (event_ptr->VALID == 0)
   115c0:	6973      	ldr	r3, [r6, #20]
   115c2:	2b00      	cmp	r3, #0
   115c4:	d100      	bne.n	115c8 <_lwevent_wait_for+0xc8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1218
    { /* We've been deleted */
        result = MQX_LWEVENT_INVALID;
   115c6:	2039      	movs	r0, #57	; 0x39
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1222
    } /* Endif */
#endif

    _INT_ENABLE();
   115c8:	69e3      	ldr	r3, [r4, #28]
   115ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   115cc:	2a00      	cmp	r2, #0
   115ce:	d0a1      	beq.n	11514 <_lwevent_wait_for+0x14>
   115d0:	3a01      	subs	r2, #1
   115d2:	655a      	str	r2, [r3, #84]	; 0x54
   115d4:	2a00      	cmp	r2, #0
   115d6:	d19d      	bne.n	11514 <_lwevent_wait_for+0x14>
   115d8:	b662      	cpsie	i
   115da:	e79b      	b.n	11514 <_lwevent_wait_for+0x14>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1177
        return (result);
    } /* Endif */

    /* Must wait for a event to become available */

    td_ptr->LWEVENT_BITS = bit_mask;
   115dc:	67a9      	str	r1, [r5, #120]	; 0x78
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1184
    {
        td_ptr->FLAGS |= TASK_LWEVENT_ALL_BITS_WANTED;
    }
    else
    {
        td_ptr->FLAGS &= ~TASK_LWEVENT_ALL_BITS_WANTED;
   115de:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   115e0:	2280      	movs	r2, #128	; 0x80
   115e2:	4391      	bics	r1, r2
   115e4:	62a9      	str	r1, [r5, #40]	; 0x28
   115e6:	e7d1      	b.n	1158c <_lwevent_wait_for+0x8c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1212
            result = LWEVENT_WAIT_TIMEOUT;
        } /* Endif */
    }
    else
    {
        _task_block();
   115e8:	f004 f917 	bl	1581a <_task_block>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwevent.c:1151
    {
        return (MQX_CANNOT_CALL_FUNCTION_FROM_ISR);
    } /* Endif */
#endif

    result = MQX_OK;
   115ec:	2000      	movs	r0, #0
   115ee:	e7e7      	b.n	115c0 <_lwevent_wait_for+0xc0>
   115f0:	1fffe000 	.word	0x1fffe000
   115f4:	6c65766e 	.word	0x6c65766e
   115f8:	0000042d 	.word	0x0000042d

000115fc <_lwsem_create>:
_lwsem_create():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:173
_mqx_uint _lwsem_create
(
    LWSEM_STRUCT_PTR sem_ptr,
    _mqx_int         initial_number
)
{
   115fc:	b538      	push	{r3, r4, r5, lr}
_lwsem_create_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:78
    {
        return MQX_INVALID_LWSEM;
    }
#endif /* MQX_ENABLE_USER_MODE */

    _GET_KERNEL_DATA(kernel_data);
   115fe:	4b16      	ldr	r3, [pc, #88]	; (11658 <_lwsem_create+0x5c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:82

    _KLOGE2(KLOG_lwsem_create, initial_number);

    sem_ptr->VALUE = initial_number;
   11600:	6181      	str	r1, [r0, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:78
    {
        return MQX_INVALID_LWSEM;
    }
#endif /* MQX_ENABLE_USER_MODE */

    _GET_KERNEL_DATA(kernel_data);
   11602:	681d      	ldr	r5, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:83

    _KLOGE2(KLOG_lwsem_create, initial_number);

    sem_ptr->VALUE = initial_number;
    _QUEUE_INIT(&sem_ptr->TD_QUEUE, 0);
   11604:	1c03      	adds	r3, r0, #0
   11606:	3308      	adds	r3, #8
   11608:	6083      	str	r3, [r0, #8]
   1160a:	60c3      	str	r3, [r0, #12]
   1160c:	2300      	movs	r3, #0
   1160e:	8203      	strh	r3, [r0, #16]
   11610:	8243      	strh	r3, [r0, #18]
_lwsem_create():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:173
_mqx_uint _lwsem_create
(
    LWSEM_STRUCT_PTR sem_ptr,
    _mqx_int         initial_number
)
{
   11612:	1c04      	adds	r4, r0, #0
_lwsem_create_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:84

    _KLOGE2(KLOG_lwsem_create, initial_number);

    sem_ptr->VALUE = initial_number;
    _QUEUE_INIT(&sem_ptr->TD_QUEUE, 0);
    _int_disable();
   11614:	f7ff fe0c 	bl	11230 <_int_disable>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:109
            }
        }
        else
#endif /* MQX_ENABLE_USER_MODE */
        {
            sem_chk_ptr = (LWSEM_STRUCT_PTR) ((pointer) kernel_data->LWSEM.NEXT);
   11618:	23f4      	movs	r3, #244	; 0xf4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:110
            while (sem_chk_ptr != (LWSEM_STRUCT_PTR) ((pointer) &kernel_data->LWSEM))
   1161a:	1c2a      	adds	r2, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:109
            }
        }
        else
#endif /* MQX_ENABLE_USER_MODE */
        {
            sem_chk_ptr = (LWSEM_STRUCT_PTR) ((pointer) kernel_data->LWSEM.NEXT);
   1161c:	58eb      	ldr	r3, [r5, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:110
            while (sem_chk_ptr != (LWSEM_STRUCT_PTR) ((pointer) &kernel_data->LWSEM))
   1161e:	32f4      	adds	r2, #244	; 0xf4
   11620:	4293      	cmp	r3, r2
   11622:	d103      	bne.n	1162c <_lwsem_create+0x30>
   11624:	e009      	b.n	1163a <_lwsem_create+0x3e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:119
                    _int_enable();
                    _KLOGX2(KLOG_lwsem_create, MQX_EINVAL);
                    return (MQX_EINVAL);
                }

                sem_chk_ptr = (LWSEM_STRUCT_PTR) ((pointer) sem_chk_ptr->NEXT);
   11626:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:110
        }
        else
#endif /* MQX_ENABLE_USER_MODE */
        {
            sem_chk_ptr = (LWSEM_STRUCT_PTR) ((pointer) kernel_data->LWSEM.NEXT);
            while (sem_chk_ptr != (LWSEM_STRUCT_PTR) ((pointer) &kernel_data->LWSEM))
   11628:	4293      	cmp	r3, r2
   1162a:	d006      	beq.n	1163a <_lwsem_create+0x3e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:112
            {
                if (sem_chk_ptr == sem_ptr)
   1162c:	429c      	cmp	r4, r3
   1162e:	d1fa      	bne.n	11626 <_lwsem_create+0x2a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:114
                {
                    _int_enable();
   11630:	f7ff fe0a 	bl	11248 <_int_enable>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:116
                    _KLOGX2(KLOG_lwsem_create, MQX_EINVAL);
                    return (MQX_EINVAL);
   11634:	2082      	movs	r0, #130	; 0x82
   11636:	00c0      	lsls	r0, r0, #3
   11638:	e00d      	b.n	11656 <_lwsem_create+0x5a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:132
            _QUEUE_ENQUEUE(&kernel_data->USR_LWSEM, sem_ptr);
        }
        else
#endif /* MQX_ENABLE_USER_MODE */
        {
            _QUEUE_ENQUEUE(&kernel_data->LWSEM, sem_ptr);
   1163a:	6853      	ldr	r3, [r2, #4]
   1163c:	6819      	ldr	r1, [r3, #0]
   1163e:	6021      	str	r1, [r4, #0]
   11640:	601c      	str	r4, [r3, #0]
   11642:	6063      	str	r3, [r4, #4]
   11644:	604c      	str	r4, [r1, #4]
   11646:	8913      	ldrh	r3, [r2, #8]
   11648:	3301      	adds	r3, #1
   1164a:	8113      	strh	r3, [r2, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:136
        }
    }

    sem_ptr->VALID = LWSEM_VALID;
   1164c:	4b03      	ldr	r3, [pc, #12]	; (1165c <_lwsem_create+0x60>)
   1164e:	6163      	str	r3, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:137
    _int_enable();
   11650:	f7ff fdfa 	bl	11248 <_int_enable>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:141

    _KLOGX2(KLOG_lwsem_create, MQX_OK);

    return (MQX_OK);
   11654:	2000      	movs	r0, #0
_lwsem_create():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:182
        return _usr_lwsem_create(sem_ptr, initial_number);
    }
#endif

    return _lwsem_create_internal(sem_ptr, initial_number, FALSE, FALSE);
}
   11656:	bd38      	pop	{r3, r4, r5, pc}
   11658:	1fffe000 	.word	0x1fffe000
   1165c:	6c77736d 	.word	0x6c77736d

00011660 <_lwsem_post>:
_lwsem_post():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:535
    {
        return _usr_lwsem_post(sem_ptr);
    }
#endif

    _GET_KERNEL_DATA(kernel_data);
   11660:	4a29      	ldr	r2, [pc, #164]	; (11708 <_lwsem_post+0xa8>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:524
 */
_mqx_uint _lwsem_post
(
    LWSEM_STRUCT_PTR sem_ptr
)
{ /* Body */
   11662:	b538      	push	{r3, r4, r5, lr}
   11664:	1c03      	adds	r3, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:535
    {
        return _usr_lwsem_post(sem_ptr);
    }
#endif

    _GET_KERNEL_DATA(kernel_data);
   11666:	6814      	ldr	r4, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:540

    _KLOGE2(KLOG_lwsem_post, sem_ptr);

#if MQX_CHECK_VALIDITY
    if (sem_ptr->VALID != LWSEM_VALID)
   11668:	6959      	ldr	r1, [r3, #20]
   1166a:	4a28      	ldr	r2, [pc, #160]	; (1170c <_lwsem_post+0xac>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:543
    {
        _KLOGX2(KLOG_lwsem_post, MQX_INVALID_LWSEM);
        return (MQX_INVALID_LWSEM);
   1166c:	201f      	movs	r0, #31
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:540
    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_lwsem_post, sem_ptr);

#if MQX_CHECK_VALIDITY
    if (sem_ptr->VALID != LWSEM_VALID)
   1166e:	4291      	cmp	r1, r2
   11670:	d000      	beq.n	11674 <_lwsem_post+0x14>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:567

    _KLOGX2(KLOG_lwsem_post, MQX_OK);

    return (MQX_OK);

}
   11672:	bd38      	pop	{r3, r4, r5, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:547
        _KLOGX2(KLOG_lwsem_post, MQX_INVALID_LWSEM);
        return (MQX_INVALID_LWSEM);
    } /* Endif */
#endif /* MQX_CHECK_VALIDITY */

    _INT_DISABLE();
   11674:	69e2      	ldr	r2, [r4, #28]
   11676:	6d50      	ldr	r0, [r2, #84]	; 0x54
   11678:	2800      	cmp	r0, #0
   1167a:	d100      	bne.n	1167e <_lwsem_post+0x1e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:547 (discriminator 1)
   1167c:	b672      	cpsid	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:548 (discriminator 2)
    if ((sem_ptr->VALUE >= 0) && (_QUEUE_GET_SIZE(&sem_ptr->TD_QUEUE)))
   1167e:	6999      	ldr	r1, [r3, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:547 (discriminator 2)
        _KLOGX2(KLOG_lwsem_post, MQX_INVALID_LWSEM);
        return (MQX_INVALID_LWSEM);
    } /* Endif */
#endif /* MQX_CHECK_VALIDITY */

    _INT_DISABLE();
   11680:	3001      	adds	r0, #1
   11682:	6550      	str	r0, [r2, #84]	; 0x54
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:548 (discriminator 2)
    if ((sem_ptr->VALUE >= 0) && (_QUEUE_GET_SIZE(&sem_ptr->TD_QUEUE)))
   11684:	2900      	cmp	r1, #0
   11686:	db37      	blt.n	116f8 <_lwsem_post+0x98>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:548 (discriminator 1)
   11688:	8a1d      	ldrh	r5, [r3, #16]
   1168a:	2d00      	cmp	r5, #0
   1168c:	d034      	beq.n	116f8 <_lwsem_post+0x98>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:550
    {
        _QUEUE_DEQUEUE(&sem_ptr->TD_QUEUE, td_ptr);
   1168e:	689a      	ldr	r2, [r3, #8]
   11690:	3d01      	subs	r5, #1
   11692:	6850      	ldr	r0, [r2, #4]
   11694:	6811      	ldr	r1, [r2, #0]
   11696:	6001      	str	r1, [r0, #0]
   11698:	6048      	str	r0, [r1, #4]
   1169a:	821d      	strh	r5, [r3, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:551
        _BACKUP_POINTER(td_ptr, TD_STRUCT, AUX_QUEUE);
   1169c:	1c13      	adds	r3, r2, #0
   1169e:	3b3c      	subs	r3, #60	; 0x3c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:552
        _TIME_DEQUEUE(td_ptr, kernel_data);
   116a0:	689a      	ldr	r2, [r3, #8]
   116a2:	05d0      	lsls	r0, r2, #23
   116a4:	d50e      	bpl.n	116c4 <_lwsem_post+0x64>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:552 (discriminator 1)
   116a6:	6858      	ldr	r0, [r3, #4]
   116a8:	6819      	ldr	r1, [r3, #0]
   116aa:	6001      	str	r1, [r0, #0]
   116ac:	6048      	str	r0, [r1, #4]
   116ae:	209a      	movs	r0, #154	; 0x9a
   116b0:	0040      	lsls	r0, r0, #1
   116b2:	1821      	adds	r1, r4, r0
   116b4:	8908      	ldrh	r0, [r1, #8]
   116b6:	3801      	subs	r0, #1
   116b8:	8108      	strh	r0, [r1, #8]
   116ba:	4915      	ldr	r1, [pc, #84]	; (11710 <_lwsem_post+0xb0>)
   116bc:	400a      	ands	r2, r1
   116be:	2103      	movs	r1, #3
   116c0:	430a      	orrs	r2, r1
   116c2:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:553
        td_ptr->INFO = 0; /* Signal that post is activating the task */
   116c4:	2200      	movs	r2, #0
   116c6:	639a      	str	r2, [r3, #56]	; 0x38
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:554
        _TASK_READY(td_ptr, kernel_data);
   116c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   116ca:	69da      	ldr	r2, [r3, #28]
   116cc:	428a      	cmp	r2, r1
   116ce:	d818      	bhi.n	11702 <_lwsem_post+0xa2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:554 (discriminator 2)
   116d0:	2102      	movs	r1, #2
   116d2:	6099      	str	r1, [r3, #8]
   116d4:	6851      	ldr	r1, [r2, #4]
   116d6:	6808      	ldr	r0, [r1, #0]
   116d8:	6059      	str	r1, [r3, #4]
   116da:	6018      	str	r0, [r3, #0]
   116dc:	600b      	str	r3, [r1, #0]
   116de:	6053      	str	r3, [r2, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:555 (discriminator 2)
        _CHECK_RUN_SCHEDULER(); /* Let higher priority task run */
   116e0:	f004 f82a 	bl	15738 <_sched_check_scheduler_internal>
   116e4:	69e2      	ldr	r2, [r4, #28]
   116e6:	6d50      	ldr	r0, [r2, #84]	; 0x54
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:561
    }
    else
    {
        ++sem_ptr->VALUE;
    } /* Endif */
    _INT_ENABLE();
   116e8:	2800      	cmp	r0, #0
   116ea:	d008      	beq.n	116fe <_lwsem_post+0x9e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:561 (discriminator 1)
   116ec:	3801      	subs	r0, #1
   116ee:	6550      	str	r0, [r2, #84]	; 0x54
   116f0:	2800      	cmp	r0, #0
   116f2:	d104      	bne.n	116fe <_lwsem_post+0x9e>
   116f4:	b662      	cpsie	i
   116f6:	e7bc      	b.n	11672 <_lwsem_post+0x12>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:559
        _TASK_READY(td_ptr, kernel_data);
        _CHECK_RUN_SCHEDULER(); /* Let higher priority task run */
    }
    else
    {
        ++sem_ptr->VALUE;
   116f8:	3101      	adds	r1, #1
   116fa:	6199      	str	r1, [r3, #24]
   116fc:	e7f4      	b.n	116e8 <_lwsem_post+0x88>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:565
    } /* Endif */
    _INT_ENABLE();

    _KLOGX2(KLOG_lwsem_post, MQX_OK);

    return (MQX_OK);
   116fe:	2000      	movs	r0, #0
   11700:	e7b7      	b.n	11672 <_lwsem_post+0x12>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:554 (discriminator 1)
    {
        _QUEUE_DEQUEUE(&sem_ptr->TD_QUEUE, td_ptr);
        _BACKUP_POINTER(td_ptr, TD_STRUCT, AUX_QUEUE);
        _TIME_DEQUEUE(td_ptr, kernel_data);
        td_ptr->INFO = 0; /* Signal that post is activating the task */
        _TASK_READY(td_ptr, kernel_data);
   11702:	6262      	str	r2, [r4, #36]	; 0x24
   11704:	e7e4      	b.n	116d0 <_lwsem_post+0x70>
   11706:	46c0      	nop			; (mov r8, r8)
   11708:	1fffe000 	.word	0x1fffe000
   1170c:	6c77736d 	.word	0x6c77736d
   11710:	fffffeff 	.word	0xfffffeff

00011714 <_lwsem_wait>:
_lwsem_wait():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:765
 */
_mqx_uint _lwsem_wait
(
    LWSEM_STRUCT_PTR sem_ptr
)
{ /* Body */
   11714:	b538      	push	{r3, r4, r5, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:776
    {
        return _usr_lwsem_wait(sem_ptr);
    }
#endif

    _GET_KERNEL_DATA(kernel_data);
   11716:	4b22      	ldr	r3, [pc, #136]	; (117a0 <_lwsem_wait+0x8c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:765
 */
_mqx_uint _lwsem_wait
(
    LWSEM_STRUCT_PTR sem_ptr
)
{ /* Body */
   11718:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:776
    {
        return _usr_lwsem_wait(sem_ptr);
    }
#endif

    _GET_KERNEL_DATA(kernel_data);
   1171a:	681c      	ldr	r4, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:784

#if MQX_CHECK_ERRORS
    if (kernel_data->IN_ISR)
    {
        _KLOGX2(KLOG_lwsem_wait, MQX_CANNOT_CALL_FUNCTION_FROM_ISR);
        return (MQX_CANNOT_CALL_FUNCTION_FROM_ISR);
   1171c:	200d      	movs	r0, #13
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:781
    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_lwsem_wait, sem_ptr);

#if MQX_CHECK_ERRORS
    if (kernel_data->IN_ISR)
   1171e:	8b22      	ldrh	r2, [r4, #24]
   11720:	2a00      	cmp	r2, #0
   11722:	d000      	beq.n	11726 <_lwsem_wait+0x12>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:828
    _INT_ENABLE();

    _KLOGX2(KLOG_lwsem_wait, MQX_OK);

    return (MQX_OK);
}
   11724:	bd38      	pop	{r3, r4, r5, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:789
        return (MQX_CANNOT_CALL_FUNCTION_FROM_ISR);
    }
#endif

#if MQX_CHECK_VALIDITY
    if (sem_ptr->VALID != LWSEM_VALID)
   11726:	4a1f      	ldr	r2, [pc, #124]	; (117a4 <_lwsem_wait+0x90>)
   11728:	696b      	ldr	r3, [r5, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:792
    {
        _KLOGX2(KLOG_lwsem_wait, MQX_INVALID_LWSEM);
        return (MQX_INVALID_LWSEM);
   1172a:	201f      	movs	r0, #31
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:789
        return (MQX_CANNOT_CALL_FUNCTION_FROM_ISR);
    }
#endif

#if MQX_CHECK_VALIDITY
    if (sem_ptr->VALID != LWSEM_VALID)
   1172c:	4293      	cmp	r3, r2
   1172e:	d1f9      	bne.n	11724 <_lwsem_wait+0x10>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:796
        _KLOGX2(KLOG_lwsem_wait, MQX_INVALID_LWSEM);
        return (MQX_INVALID_LWSEM);
    }
#endif

    _INT_DISABLE();
   11730:	69e2      	ldr	r2, [r4, #28]
   11732:	6d53      	ldr	r3, [r2, #84]	; 0x54
   11734:	2b00      	cmp	r3, #0
   11736:	d100      	bne.n	1173a <_lwsem_wait+0x26>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:796 (discriminator 1)
   11738:	b672      	cpsid	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:796 (discriminator 2)
   1173a:	3301      	adds	r3, #1
   1173c:	6553      	str	r3, [r2, #84]	; 0x54
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:797 (discriminator 2)
    if (sem_ptr->VALUE <= 0)
   1173e:	69ab      	ldr	r3, [r5, #24]
   11740:	2b00      	cmp	r3, #0
   11742:	dd0a      	ble.n	1175a <_lwsem_wait+0x46>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:811
         ** task.
         */
    }
    else
    {
        --sem_ptr->VALUE;
   11744:	3b01      	subs	r3, #1
   11746:	61ab      	str	r3, [r5, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:823
        /* The semaphore has been deleted */
        _KLOGX2(KLOG_lwsem_wait, MQX_INVALID_LWSEM);
        return (MQX_INVALID_LWSEM);
    } /* Endif */

    _INT_ENABLE();
   11748:	6d53      	ldr	r3, [r2, #84]	; 0x54
   1174a:	2b00      	cmp	r3, #0
   1174c:	d023      	beq.n	11796 <_lwsem_wait+0x82>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:823 (discriminator 1)
   1174e:	1e58      	subs	r0, r3, #1
   11750:	6550      	str	r0, [r2, #84]	; 0x54
   11752:	2800      	cmp	r0, #0
   11754:	d11f      	bne.n	11796 <_lwsem_wait+0x82>
   11756:	b662      	cpsie	i
   11758:	e7e4      	b.n	11724 <_lwsem_wait+0x10>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:800

    _INT_DISABLE();
    if (sem_ptr->VALUE <= 0)
    {
        td_ptr = kernel_data->ACTIVE_PTR;
        td_ptr->STATE = LWSEM_BLOCKED;
   1175a:	4b13      	ldr	r3, [pc, #76]	; (117a8 <_lwsem_wait+0x94>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:802
        td_ptr->INFO = (_mqx_uint) &sem_ptr->TD_QUEUE;
        _QUEUE_UNLINK(td_ptr);
   1175c:	6851      	ldr	r1, [r2, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:800

    _INT_DISABLE();
    if (sem_ptr->VALUE <= 0)
    {
        td_ptr = kernel_data->ACTIVE_PTR;
        td_ptr->STATE = LWSEM_BLOCKED;
   1175e:	6093      	str	r3, [r2, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:801
        td_ptr->INFO = (_mqx_uint) &sem_ptr->TD_QUEUE;
   11760:	1c2b      	adds	r3, r5, #0
   11762:	3308      	adds	r3, #8
   11764:	6393      	str	r3, [r2, #56]	; 0x38
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:802
        _QUEUE_UNLINK(td_ptr);
   11766:	6813      	ldr	r3, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:803
        _QUEUE_ENQUEUE(&sem_ptr->TD_QUEUE, &td_ptr->AUX_QUEUE);
   11768:	1c10      	adds	r0, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:802
    if (sem_ptr->VALUE <= 0)
    {
        td_ptr = kernel_data->ACTIVE_PTR;
        td_ptr->STATE = LWSEM_BLOCKED;
        td_ptr->INFO = (_mqx_uint) &sem_ptr->TD_QUEUE;
        _QUEUE_UNLINK(td_ptr);
   1176a:	600b      	str	r3, [r1, #0]
   1176c:	6059      	str	r1, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:803
        _QUEUE_ENQUEUE(&sem_ptr->TD_QUEUE, &td_ptr->AUX_QUEUE);
   1176e:	68eb      	ldr	r3, [r5, #12]
   11770:	303c      	adds	r0, #60	; 0x3c
   11772:	6819      	ldr	r1, [r3, #0]
   11774:	63d1      	str	r1, [r2, #60]	; 0x3c
   11776:	6018      	str	r0, [r3, #0]
   11778:	6413      	str	r3, [r2, #64]	; 0x40
   1177a:	6048      	str	r0, [r1, #4]
   1177c:	8a2b      	ldrh	r3, [r5, #16]
   1177e:	3301      	adds	r3, #1
   11780:	822b      	strh	r3, [r5, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:804
        _sched_execute_scheduler_internal(); /* Let the other tasks run */
   11782:	f003 ffe5 	bl	15750 <_sched_execute_scheduler_internal>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:815
    {
        --sem_ptr->VALUE;
    }

    /* We must check for component destruction */
    if (sem_ptr->VALID != LWSEM_VALID)
   11786:	696a      	ldr	r2, [r5, #20]
   11788:	4b06      	ldr	r3, [pc, #24]	; (117a4 <_lwsem_wait+0x90>)
   1178a:	429a      	cmp	r2, r3
   1178c:	d005      	beq.n	1179a <_lwsem_wait+0x86>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:817
    {
        _int_enable();
   1178e:	f7ff fd5b 	bl	11248 <_int_enable>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:820
        /* The semaphore has been deleted */
        _KLOGX2(KLOG_lwsem_wait, MQX_INVALID_LWSEM);
        return (MQX_INVALID_LWSEM);
   11792:	201f      	movs	r0, #31
   11794:	e7c6      	b.n	11724 <_lwsem_wait+0x10>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/lwsem.c:827

    _INT_ENABLE();

    _KLOGX2(KLOG_lwsem_wait, MQX_OK);

    return (MQX_OK);
   11796:	2000      	movs	r0, #0
   11798:	e7c4      	b.n	11724 <_lwsem_wait+0x10>
   1179a:	69e2      	ldr	r2, [r4, #28]
   1179c:	e7d4      	b.n	11748 <_lwsem_wait+0x34>
   1179e:	46c0      	nop			; (mov r8, r8)
   117a0:	1fffe000 	.word	0x1fffe000
   117a4:	6c77736d 	.word	0x6c77736d
   117a8:	0000042b 	.word	0x0000042b

000117ac <_mqx_set_cpu_type>:
_mqx_set_cpu_type():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:178
)
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);
    kernel_data->CPU_TYPE = cpu_type;
   117ac:	4b01      	ldr	r3, [pc, #4]	; (117b4 <_mqx_set_cpu_type+0x8>)
   117ae:	681b      	ldr	r3, [r3, #0]
   117b0:	8118      	strh	r0, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:180

} /* Endbody */
   117b2:	4770      	bx	lr
   117b4:	1fffe000 	.word	0x1fffe000

000117b8 <_mqx_init_kernel_data_internal>:
_mqx_init_kernel_data_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:290
    TASK_TEMPLATE_STRUCT_PTR    task_template_ptr;
    TD_STRUCT_PTR               td_ptr;
    _mqx_uint                   priority_levels;
    _mqx_uint                   i;

    _GET_KERNEL_DATA(kernel_data);
   117b8:	4b37      	ldr	r3, [pc, #220]	; (11898 <_mqx_init_kernel_data_internal+0xe0>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:282
 */
void _mqx_init_kernel_data_internal
(
    void
)
{ /* Body */
   117ba:	b510      	push	{r4, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:290
    TASK_TEMPLATE_STRUCT_PTR    task_template_ptr;
    TD_STRUCT_PTR               td_ptr;
    _mqx_uint                   priority_levels;
    _mqx_uint                   i;

    _GET_KERNEL_DATA(kernel_data);
   117bc:	681c      	ldr	r4, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:293

    /* Store the configuration used when the kernel was compiled */
    kernel_data->CONFIG1 = MQX_CNFG1;
   117be:	4b37      	ldr	r3, [pc, #220]	; (1189c <_mqx_init_kernel_data_internal+0xe4>)
   117c0:	8223      	strh	r3, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:294
    kernel_data->CONFIG2 = MQX_CNFG2;
   117c2:	23e4      	movs	r3, #228	; 0xe4
   117c4:	005b      	lsls	r3, r3, #1
   117c6:	8263      	strh	r3, [r4, #18]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:297

    /* Store the addressability of the processor. How many bits in a byte. */
    kernel_data->ADDRESSING_CAPABILITY = PSP_MEMORY_ADDRESSING_CAPABILITY;
   117c8:	2308      	movs	r3, #8
   117ca:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:300

    /* Indicate the endianess of the target */
    kernel_data->ENDIANESS = PSP_ENDIAN;
   117cc:	2301      	movs	r3, #1
   117ce:	6063      	str	r3, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:305

    /* Store PSP memory alignment information */

#if PSP_MEM_STOREBLOCK_ALIGNMENT != 0
    kernel_data->PSP_CFG_MEM_STOREBLOCK_ALIGNMENT = PSP_MEM_STOREBLOCK_ALIGNMENT;
   117d0:	2302      	movs	r3, #2
   117d2:	81e3      	strh	r3, [r4, #14]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:308
#endif

    kernel_data->PSP_CFG_MEMORY_ALIGNMENT = PSP_MEMORY_ALIGNMENT;
   117d4:	230f      	movs	r3, #15
   117d6:	8163      	strh	r3, [r4, #10]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:309
    kernel_data->PSP_CFG_STACK_ALIGNMENT = PSP_STACK_ALIGNMENT;
   117d8:	81a3      	strh	r3, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:322
#if MQX_EXIT_ENABLED
    kernel_data->USERS_VBR = (_mqx_max_type)_int_get_vector_table();
#endif

#if MQX_CHECK_ERRORS
    if (kernel_data->INIT.TASK_TEMPLATE_LIST == NULL) {
   117da:	23be      	movs	r3, #190	; 0xbe
   117dc:	005b      	lsls	r3, r3, #1
   117de:	58e3      	ldr	r3, [r4, r3]
   117e0:	2b00      	cmp	r3, #0
   117e2:	d052      	beq.n	1188a <_mqx_init_kernel_data_internal+0xd2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:338
    /* Initialize the kernel counter. */
    kernel_data->COUNTER = 1U;
#endif

    /* Set up the disable and enable priority levels */
    _psp_set_kernel_disable_level();
   117e4:	f7ff fc54 	bl	11090 <_psp_set_kernel_disable_level>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:349
     * during initialization, and for storage of memory blocks assigned
     * to the system.
     */
    td_ptr = (TD_STRUCT_PTR) & kernel_data->SYSTEM_TD;
    kernel_data->ACTIVE_PTR = td_ptr;
    kernel_data->ACTIVE_SR = kernel_data->DISABLE_SR;
   117e8:	8ae2      	ldrh	r2, [r4, #22]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:347
     * task error code can be called.
     * The system task never runs, but it's TD is used for error codes
     * during initialization, and for storage of memory blocks assigned
     * to the system.
     */
    td_ptr = (TD_STRUCT_PTR) & kernel_data->SYSTEM_TD;
   117ea:	1c23      	adds	r3, r4, #0
   117ec:	3348      	adds	r3, #72	; 0x48
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:348
    kernel_data->ACTIVE_PTR = td_ptr;
   117ee:	61e3      	str	r3, [r4, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:349
    kernel_data->ACTIVE_SR = kernel_data->DISABLE_SR;
   117f0:	8362      	strh	r2, [r4, #26]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:350
    td_ptr->TASK_SR = kernel_data->DISABLE_SR;
   117f2:	849a      	strh	r2, [r3, #36]	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:351
    td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, SYSTEM_TASK_NUMBER);
   117f4:	23ae      	movs	r3, #174	; 0xae
   117f6:	005b      	lsls	r3, r3, #1
   117f8:	58e3      	ldr	r3, [r4, r3]
   117fa:	4a29      	ldr	r2, [pc, #164]	; (118a0 <_mqx_init_kernel_data_internal+0xe8>)
   117fc:	041b      	lsls	r3, r3, #16
   117fe:	4313      	orrs	r3, r2
   11800:	6563      	str	r3, [r4, #84]	; 0x54
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:352
    td_ptr->STATE = BLOCKED;
   11802:	2303      	movs	r3, #3
   11804:	6523      	str	r3, [r4, #80]	; 0x50
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:355

    /* Initialize the light weight semaphores queue */
    _QUEUE_INIT(&kernel_data->LWSEM, 0);
   11806:	1c23      	adds	r3, r4, #0
   11808:	33f4      	adds	r3, #244	; 0xf4
   1180a:	22f4      	movs	r2, #244	; 0xf4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:363
    _QUEUE_INIT(&kernel_data->USR_LWSEM, 0);
#endif

#if MQX_HAS_TICK
    /* Set up the timeout queue */
    _QUEUE_INIT(&kernel_data->TIMEOUT_QUEUE, 0);
   1180c:	219a      	movs	r1, #154	; 0x9a
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:355
    td_ptr->TASK_SR = kernel_data->DISABLE_SR;
    td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, SYSTEM_TASK_NUMBER);
    td_ptr->STATE = BLOCKED;

    /* Initialize the light weight semaphores queue */
    _QUEUE_INIT(&kernel_data->LWSEM, 0);
   1180e:	50a3      	str	r3, [r4, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:363
    _QUEUE_INIT(&kernel_data->USR_LWSEM, 0);
#endif

#if MQX_HAS_TICK
    /* Set up the timeout queue */
    _QUEUE_INIT(&kernel_data->TIMEOUT_QUEUE, 0);
   11810:	0049      	lsls	r1, r1, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:355
    td_ptr->TASK_SR = kernel_data->DISABLE_SR;
    td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, SYSTEM_TASK_NUMBER);
    td_ptr->STATE = BLOCKED;

    /* Initialize the light weight semaphores queue */
    _QUEUE_INIT(&kernel_data->LWSEM, 0);
   11812:	2200      	movs	r2, #0
   11814:	605b      	str	r3, [r3, #4]
   11816:	811a      	strh	r2, [r3, #8]
   11818:	815a      	strh	r2, [r3, #10]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:363
    _QUEUE_INIT(&kernel_data->USR_LWSEM, 0);
#endif

#if MQX_HAS_TICK
    /* Set up the timeout queue */
    _QUEUE_INIT(&kernel_data->TIMEOUT_QUEUE, 0);
   1181a:	1863      	adds	r3, r4, r1
   1181c:	5063      	str	r3, [r4, r1]
   1181e:	605b      	str	r3, [r3, #4]
   11820:	811a      	strh	r2, [r3, #8]
   11822:	815a      	strh	r2, [r3, #10]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:372
     * Compute the number of MQX priority levels needed. This is done
     * by determining the task that has the lowest priority (highest number)
     */
    priority_levels = 0;

    task_template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;
   11824:	23be      	movs	r3, #190	; 0xbe
   11826:	005b      	lsls	r3, r3, #1
   11828:	58e3      	ldr	r3, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:374

    for (i = 0; task_template_ptr->TASK_TEMPLATE_INDEX && (i < MQX_MAXIMUM_NUMBER_OF_TASK_TEMPLATES); ++i, ++task_template_ptr) {
   1182a:	6818      	ldr	r0, [r3, #0]
   1182c:	2800      	cmp	r0, #0
   1182e:	d030      	beq.n	11892 <_mqx_init_kernel_data_internal+0xda>
   11830:	4a1c      	ldr	r2, [pc, #112]	; (118a4 <_mqx_init_kernel_data_internal+0xec>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:370

    /*
     * Compute the number of MQX priority levels needed. This is done
     * by determining the task that has the lowest priority (highest number)
     */
    priority_levels = 0;
   11832:	2100      	movs	r1, #0
   11834:	1898      	adds	r0, r3, r2
   11836:	e001      	b.n	1183c <_mqx_init_kernel_data_internal+0x84>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:374 (discriminator 2)

    task_template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;

    for (i = 0; task_template_ptr->TASK_TEMPLATE_INDEX && (i < MQX_MAXIMUM_NUMBER_OF_TASK_TEMPLATES); ++i, ++task_template_ptr) {
   11838:	4283      	cmp	r3, r0
   1183a:	d007      	beq.n	1184c <_mqx_init_kernel_data_internal+0x94>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:375
        if (priority_levels < task_template_ptr->TASK_PRIORITY) {
   1183c:	68da      	ldr	r2, [r3, #12]
   1183e:	4291      	cmp	r1, r2
   11840:	d200      	bcs.n	11844 <_mqx_init_kernel_data_internal+0x8c>
   11842:	1c11      	adds	r1, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:374
     */
    priority_levels = 0;

    task_template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;

    for (i = 0; task_template_ptr->TASK_TEMPLATE_INDEX && (i < MQX_MAXIMUM_NUMBER_OF_TASK_TEMPLATES); ++i, ++task_template_ptr) {
   11844:	331c      	adds	r3, #28
   11846:	681a      	ldr	r2, [r3, #0]
   11848:	2a00      	cmp	r2, #0
   1184a:	d1f5      	bne.n	11838 <_mqx_init_kernel_data_internal+0x80>
   1184c:	1c48      	adds	r0, r1, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:379
        if (priority_levels < task_template_ptr->TASK_PRIORITY) {
            priority_levels = task_template_ptr->TASK_PRIORITY;
        } /* Endif */
    } /* Endfor */
    kernel_data->LOWEST_TASK_PRIORITY = priority_levels;
   1184e:	23d0      	movs	r3, #208	; 0xd0
   11850:	50e1      	str	r1, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:387
    /*
     * Initialize the task template for the IDLE Task.
     * NOTE that the idle task runs at 1 level lower than any user task.
     */
    task_template_ptr = (TASK_TEMPLATE_STRUCT_PTR)&kernel_data->IDLE_TASK_TEMPLATE;
    task_template_ptr->TASK_TEMPLATE_INDEX  = IDLE_TASK;
   11852:	4a15      	ldr	r2, [pc, #84]	; (118a8 <_mqx_init_kernel_data_internal+0xf0>)
   11854:	2387      	movs	r3, #135	; 0x87
   11856:	009b      	lsls	r3, r3, #2
   11858:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:388
    task_template_ptr->TASK_STACKSIZE       = kernel_data->INIT.IDLE_TASK_STACK_SIZE;
   1185a:	22ba      	movs	r2, #186	; 0xba
   1185c:	2387      	movs	r3, #135	; 0x87
   1185e:	0052      	lsls	r2, r2, #1
   11860:	58a2      	ldr	r2, [r4, r2]
   11862:	009b      	lsls	r3, r3, #2
   11864:	18e3      	adds	r3, r4, r3
   11866:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:389
    task_template_ptr->TASK_NAME            = "_mqx_idle_task";
   11868:	4a10      	ldr	r2, [pc, #64]	; (118ac <_mqx_init_kernel_data_internal+0xf4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:391
    task_template_ptr->TASK_ADDRESS         = _mqx_idle_task;
    task_template_ptr->TASK_PRIORITY        = priority_levels + 1;
   1186a:	60d8      	str	r0, [r3, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:389
     * NOTE that the idle task runs at 1 level lower than any user task.
     */
    task_template_ptr = (TASK_TEMPLATE_STRUCT_PTR)&kernel_data->IDLE_TASK_TEMPLATE;
    task_template_ptr->TASK_TEMPLATE_INDEX  = IDLE_TASK;
    task_template_ptr->TASK_STACKSIZE       = kernel_data->INIT.IDLE_TASK_STACK_SIZE;
    task_template_ptr->TASK_NAME            = "_mqx_idle_task";
   1186c:	611a      	str	r2, [r3, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:390
    task_template_ptr->TASK_ADDRESS         = _mqx_idle_task;
   1186e:	4a10      	ldr	r2, [pc, #64]	; (118b0 <_mqx_init_kernel_data_internal+0xf8>)
   11870:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:398

    /*
     * Initialize the linked list of all TDs in the system.
     * Initially zero. Not including system TD
     */
    _QUEUE_INIT(&kernel_data->TD_LIST, 0);
   11872:	3b49      	subs	r3, #73	; 0x49
   11874:	3bff      	subs	r3, #255	; 0xff
   11876:	22d4      	movs	r2, #212	; 0xd4
   11878:	50a3      	str	r3, [r4, r2]
   1187a:	2200      	movs	r2, #0
   1187c:	811a      	strh	r2, [r3, #8]
   1187e:	815a      	strh	r2, [r3, #10]
   11880:	605b      	str	r3, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:401

    /* Set the TD counter */
    kernel_data->TASK_NUMBER = 1;
   11882:	2201      	movs	r2, #1
   11884:	23e0      	movs	r3, #224	; 0xe0
   11886:	50e2      	str	r2, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:403

} /* Endbody */
   11888:	bd10      	pop	{r4, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:323
    kernel_data->USERS_VBR = (_mqx_max_type)_int_get_vector_table();
#endif

#if MQX_CHECK_ERRORS
    if (kernel_data->INIT.TASK_TEMPLATE_LIST == NULL) {
        _mqx_exit(MQX_INVALID_POINTER);
   1188a:	2001      	movs	r0, #1
   1188c:	f000 f8be 	bl	11a0c <_mqx_exit>
   11890:	e7a8      	b.n	117e4 <_mqx_init_kernel_data_internal+0x2c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:374
     */
    priority_levels = 0;

    task_template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;

    for (i = 0; task_template_ptr->TASK_TEMPLATE_INDEX && (i < MQX_MAXIMUM_NUMBER_OF_TASK_TEMPLATES); ++i, ++task_template_ptr) {
   11892:	2001      	movs	r0, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqx_utils.c:370

    /*
     * Compute the number of MQX priority levels needed. This is done
     * by determining the task that has the lowest priority (highest number)
     */
    priority_levels = 0;
   11894:	2100      	movs	r1, #0
   11896:	e7da      	b.n	1184e <_mqx_init_kernel_data_internal+0x96>
   11898:	1fffe000 	.word	0x1fffe000
   1189c:	000029fa 	.word	0x000029fa
   118a0:	0000ffff 	.word	0x0000ffff
   118a4:	001bffe4 	.word	0x001bffe4
   118a8:	80000003 	.word	0x80000003
   118ac:	000150cc 	.word	0x000150cc
   118b0:	000111d5 	.word	0x000111d5

000118b4 <_mqxlite_init>:
_mqxlite_init():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:106
 */
_mqx_uint _mqxlite_init
(
    MQXLITE_INITIALIZATION_STRUCT const * mqx_init
)
{ /* Body */
   118b4:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:119
     * specified is aligned
     */
    kernel_data = (KERNEL_DATA_STRUCT_PTR) (mqx_init->START_OF_KERNEL_MEMORY);

    /* Set the global pointer to the kernel data structure */
    _SET_KERNEL_DATA(kernel_data);
   118b6:	4b29      	ldr	r3, [pc, #164]	; (1195c <_mqxlite_init+0xa8>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:116
    /*
     * The kernel data structure starts at the start of kernel memory,
     * as specified in the initialization structure. Make sure address
     * specified is aligned
     */
    kernel_data = (KERNEL_DATA_STRUCT_PTR) (mqx_init->START_OF_KERNEL_MEMORY);
   118b8:	6844      	ldr	r4, [r0, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:106
 */
_mqx_uint _mqxlite_init
(
    MQXLITE_INITIALIZATION_STRUCT const * mqx_init
)
{ /* Body */
   118ba:	b082      	sub	sp, #8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:119
     * specified is aligned
     */
    kernel_data = (KERNEL_DATA_STRUCT_PTR) (mqx_init->START_OF_KERNEL_MEMORY);

    /* Set the global pointer to the kernel data structure */
    _SET_KERNEL_DATA(kernel_data);
   118bc:	601c      	str	r4, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:130
     * Note that counter will be immediately reset to zero on the subsequent
     * _mem_zero call. */
    {
        MQX_INITIALIZATION_STRUCT  * MQX_init_struct_ptr;

        *(volatile pointer*) kernel_data = (pointer) & _mqx_version_number;
   118be:	4b28      	ldr	r3, [pc, #160]	; (11960 <_mqxlite_init+0xac>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:137
        *(volatile pointer*) kernel_data = (pointer) & _mqx_path;
        *(volatile pointer*) kernel_data = (pointer) & _mqxlite_version_number;
        *(volatile pointer*) kernel_data = (pointer) & MQX_init_struct_ptr;
    }
    /* Initialize the kernel data to zero. */
    _mem_zero((pointer) kernel_data, (_mem_size) sizeof(KERNEL_DATA_STRUCT));
   118c0:	2195      	movs	r1, #149	; 0x95
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:130
     * Note that counter will be immediately reset to zero on the subsequent
     * _mem_zero call. */
    {
        MQX_INITIALIZATION_STRUCT  * MQX_init_struct_ptr;

        *(volatile pointer*) kernel_data = (pointer) & _mqx_version_number;
   118c2:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:131
        *(volatile pointer*) kernel_data = (pointer) & _mqx_vendor;
   118c4:	4b27      	ldr	r3, [pc, #156]	; (11964 <_mqxlite_init+0xb0>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:106
 */
_mqx_uint _mqxlite_init
(
    MQXLITE_INITIALIZATION_STRUCT const * mqx_init
)
{ /* Body */
   118c6:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:131
     * _mem_zero call. */
    {
        MQX_INITIALIZATION_STRUCT  * MQX_init_struct_ptr;

        *(volatile pointer*) kernel_data = (pointer) & _mqx_version_number;
        *(volatile pointer*) kernel_data = (pointer) & _mqx_vendor;
   118c8:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:132
        *(volatile pointer*) kernel_data = (pointer) & _mqx_path;
   118ca:	4b27      	ldr	r3, [pc, #156]	; (11968 <_mqxlite_init+0xb4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:137
        *(volatile pointer*) kernel_data = (pointer) & _mqxlite_version_number;
        *(volatile pointer*) kernel_data = (pointer) & MQX_init_struct_ptr;
    }
    /* Initialize the kernel data to zero. */
    _mem_zero((pointer) kernel_data, (_mem_size) sizeof(KERNEL_DATA_STRUCT));
   118cc:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:132
    {
        MQX_INITIALIZATION_STRUCT  * MQX_init_struct_ptr;

        *(volatile pointer*) kernel_data = (pointer) & _mqx_version_number;
        *(volatile pointer*) kernel_data = (pointer) & _mqx_vendor;
        *(volatile pointer*) kernel_data = (pointer) & _mqx_path;
   118ce:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:133
        *(volatile pointer*) kernel_data = (pointer) & _mqxlite_version_number;
   118d0:	4b26      	ldr	r3, [pc, #152]	; (1196c <_mqxlite_init+0xb8>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:137
        *(volatile pointer*) kernel_data = (pointer) & MQX_init_struct_ptr;
    }
    /* Initialize the kernel data to zero. */
    _mem_zero((pointer) kernel_data, (_mem_size) sizeof(KERNEL_DATA_STRUCT));
   118d2:	0089      	lsls	r1, r1, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:133
        MQX_INITIALIZATION_STRUCT  * MQX_init_struct_ptr;

        *(volatile pointer*) kernel_data = (pointer) & _mqx_version_number;
        *(volatile pointer*) kernel_data = (pointer) & _mqx_vendor;
        *(volatile pointer*) kernel_data = (pointer) & _mqx_path;
        *(volatile pointer*) kernel_data = (pointer) & _mqxlite_version_number;
   118d4:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:134
        *(volatile pointer*) kernel_data = (pointer) & MQX_init_struct_ptr;
   118d6:	ab01      	add	r3, sp, #4
   118d8:	6023      	str	r3, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:137
    }
    /* Initialize the kernel data to zero. */
    _mem_zero((pointer) kernel_data, (_mem_size) sizeof(KERNEL_DATA_STRUCT));
   118da:	f7ff fb1b 	bl	10f14 <_mem_zero>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:159
            return (result); /* RETURN TO USER */
        }
    }
#endif /* MQX_CHECK_ERRORS && MQX_VERIFY_KERNEL_DATA */
    /* Copy the MQX initialization structure into kernel data. */
    kernel_data->INIT = *mqx_init;
   118de:	21ae      	movs	r1, #174	; 0xae
   118e0:	0049      	lsls	r1, r1, #1
   118e2:	1c28      	adds	r0, r5, #0
   118e4:	1863      	adds	r3, r4, r1
   118e6:	c846      	ldmia	r0!, {r1, r2, r6}
   118e8:	c346      	stmia	r3!, {r1, r2, r6}
   118ea:	c864      	ldmia	r0!, {r2, r5, r6}
   118ec:	c364      	stmia	r3!, {r2, r5, r6}
   118ee:	c826      	ldmia	r0!, {r1, r2, r5}
   118f0:	c326      	stmia	r3!, {r1, r2, r5}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:162

    /* init kernel data structures */
    _mqx_init_kernel_data_internal();
   118f2:	f7ff ff61 	bl	117b8 <_mqx_init_kernel_data_internal>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:176


#if MQX_USE_INTERRUPTS

    /* Now obtain the interrupt stack */
    if (kernel_data->INIT.INTERRUPT_STACK_LOCATION) {
   118f6:	23b8      	movs	r3, #184	; 0xb8
   118f8:	005b      	lsls	r3, r3, #1
   118fa:	58e6      	ldr	r6, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:182
        stack_ptr = kernel_data->INIT.INTERRUPT_STACK_LOCATION;
        result = kernel_data->INIT.INTERRUPT_STACK_SIZE;
    }
    else
    {
        return (MQX_INVALID_PARAMETER);
   118fc:	250c      	movs	r5, #12
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:176


#if MQX_USE_INTERRUPTS

    /* Now obtain the interrupt stack */
    if (kernel_data->INIT.INTERRUPT_STACK_LOCATION) {
   118fe:	2e00      	cmp	r6, #0
   11900:	d022      	beq.n	11948 <_mqxlite_init+0x94>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:178
        stack_ptr = kernel_data->INIT.INTERRUPT_STACK_LOCATION;
        result = kernel_data->INIT.INTERRUPT_STACK_SIZE;
   11902:	23b6      	movs	r3, #182	; 0xb6
   11904:	005b      	lsls	r3, r3, #1
   11906:	58e5      	ldr	r5, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:186
    {
        return (MQX_INVALID_PARAMETER);
    } /* Endif */

#if MQX_MONITOR_STACK
    _task_fill_stack_internal((_mqx_uint_ptr)stack_ptr, result);
   11908:	1c30      	adds	r0, r6, #0
   1190a:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:189
#endif

    kernel_data->INTERRUPT_STACK_PTR = _GET_STACK_BASE(stack_ptr, result);
   1190c:	3d01      	subs	r5, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:186
    {
        return (MQX_INVALID_PARAMETER);
    } /* Endif */

#if MQX_MONITOR_STACK
    _task_fill_stack_internal((_mqx_uint_ptr)stack_ptr, result);
   1190e:	f000 fc0b 	bl	12128 <_task_fill_stack_internal>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:189
#endif

    kernel_data->INTERRUPT_STACK_PTR = _GET_STACK_BASE(stack_ptr, result);
   11912:	1976      	adds	r6, r6, r5
   11914:	230f      	movs	r3, #15
   11916:	439e      	bics	r6, r3
   11918:	63e6      	str	r6, [r4, #60]	; 0x3c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:223
    } /* Endif */
#endif

#if MQX_USE_COMPONENTS
    /* Create a light wait semaphore for component creation */
    _lwsem_create((LWSEM_STRUCT_PTR)&kernel_data->COMPONENT_CREATE_LWSEM, 1);
   1191a:	26c0      	movs	r6, #192	; 0xc0
   1191c:	0076      	lsls	r6, r6, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:214
        _mqx_system_stack   = td_ptr->STACK_PTR;
    }
#endif /* MQX_USE_IDLE_TASK */

    /* Build the MQX ready to run queues */
    result = _psp_init_readyqs();
   1191e:	f7ff fbf3 	bl	11108 <_psp_init_readyqs>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:223
    } /* Endif */
#endif

#if MQX_USE_COMPONENTS
    /* Create a light wait semaphore for component creation */
    _lwsem_create((LWSEM_STRUCT_PTR)&kernel_data->COMPONENT_CREATE_LWSEM, 1);
   11922:	2101      	movs	r1, #1
   11924:	19a0      	adds	r0, r4, r6
   11926:	f7ff fe69 	bl	115fc <_lwsem_create>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:227
#endif

    /* Create a light wait semaphore for task creation/destruction creation */
    _lwsem_create((LWSEM_STRUCT_PTR) & kernel_data->TASK_CREATE_LWSEM, 1);
   1192a:	1c60      	adds	r0, r4, #1
   1192c:	2101      	movs	r1, #1
   1192e:	30ff      	adds	r0, #255	; 0xff
   11930:	f7ff fe64 	bl	115fc <_lwsem_create>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:230

    /* Set the CPU type */
    _mqx_set_cpu_type(MQX_CPU);
   11934:	2080      	movs	r0, #128	; 0x80
   11936:	01c0      	lsls	r0, r0, #7
   11938:	f7ff ff38 	bl	117ac <_mqx_set_cpu_type>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:232

    result = _psp_int_init(FIRST_INTERRUPT_VECTOR_USED, LAST_INTERRUPT_VECTOR_USED);
   1193c:	200f      	movs	r0, #15
   1193e:	212c      	movs	r1, #44	; 0x2c
   11940:	f7ff fb5e 	bl	11000 <_psp_int_init>
   11944:	1e05      	subs	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:233
    if (result != MQX_OK) {
   11946:	d002      	beq.n	1194e <_mqxlite_init+0x9a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:250
     */
    system_timer_init(NULL);

    return MQX_OK; /* To satisfy lint */

} /* Endbody */
   11948:	1c28      	adds	r0, r5, #0
   1194a:	b002      	add	sp, #8
   1194c:	bd70      	pop	{r4, r5, r6, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:241

    /* set possible new interrupt vector table
     * if MQX_ROM_VECTORS = 0 switch to ram interrupt table which
     * was initialized in _psp_int_init)
     */
    _int_set_vector_table((uint32_t)(&__vect_table));
   1194e:	4808      	ldr	r0, [pc, #32]	; (11970 <_mqxlite_init+0xbc>)
   11950:	f7ff fad6 	bl	10f00 <_int_set_vector_table>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:246

    /*
     * Initialize System Timer and Ticks parameters in kernel_data structure
     */
    system_timer_init(NULL);
   11954:	2000      	movs	r0, #0
   11956:	f001 f917 	bl	12b88 <system_timer_init>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:248

    return MQX_OK; /* To satisfy lint */
   1195a:	e7f5      	b.n	11948 <_mqxlite_init+0x94>
   1195c:	1fffe000 	.word	0x1fffe000
   11960:	000150e8 	.word	0x000150e8
   11964:	000150e0 	.word	0x000150e0
   11968:	000150dc 	.word	0x000150dc
   1196c:	000150e4 	.word	0x000150e4
   11970:	00000000 	.word	0x00000000

00011974 <_mqxlite>:
_mqxlite():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:288
        return kernel_data->USERS_ERROR;
    } /* Endif */
#endif


    _GET_KERNEL_DATA(kernel_data);
   11974:	4b23      	ldr	r3, [pc, #140]	; (11a04 <_mqxlite+0x90>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:269
 *
 * \see _mqxlite_init
 * \see _mqx_exit
 */
_mqx_uint _mqxlite(void)
{ /* Body */
   11976:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:288
        return kernel_data->USERS_ERROR;
    } /* Endif */
#endif


    _GET_KERNEL_DATA(kernel_data);
   11978:	681e      	ldr	r6, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:293


    /* Create the idle task */
#if MQX_USE_IDLE_TASK
    td_ptr = _task_init_internal((TASK_TEMPLATE_STRUCT_PTR)&kernel_data->IDLE_TASK_TEMPLATE,
   1197a:	2387      	movs	r3, #135	; 0x87
   1197c:	009b      	lsls	r3, r3, #2
   1197e:	18f0      	adds	r0, r6, r3
   11980:	69f3      	ldr	r3, [r6, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:269
 *
 * \see _mqxlite_init
 * \see _mqx_exit
 */
_mqx_uint _mqxlite(void)
{ /* Body */
   11982:	b083      	sub	sp, #12
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:293
    _GET_KERNEL_DATA(kernel_data);


    /* Create the idle task */
#if MQX_USE_IDLE_TASK
    td_ptr = _task_init_internal((TASK_TEMPLATE_STRUCT_PTR)&kernel_data->IDLE_TASK_TEMPLATE,
   11984:	68d9      	ldr	r1, [r3, #12]
   11986:	23bc      	movs	r3, #188	; 0xbc
   11988:	005b      	lsls	r3, r3, #1
   1198a:	58f3      	ldr	r3, [r6, r3]
   1198c:	2200      	movs	r2, #0
   1198e:	9300      	str	r3, [sp, #0]
   11990:	2389      	movs	r3, #137	; 0x89
   11992:	009b      	lsls	r3, r3, #2
   11994:	58f3      	ldr	r3, [r6, r3]
   11996:	9301      	str	r3, [sp, #4]
   11998:	2300      	movs	r3, #0
   1199a:	f000 f9d3 	bl	11d44 <_task_init_internal>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:304
                                #endif
                                 FALSE,
                                 kernel_data->INIT.IDLE_TASK_STACK_LOCATION,
                                 kernel_data->IDLE_TASK_TEMPLATE.TASK_STACKSIZE);
    #if MQX_CHECK_ERRORS
        if (td_ptr == NULL) {
   1199e:	2800      	cmp	r0, #0
   119a0:	d02c      	beq.n	119fc <_mqxlite+0x88>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:308
            _mqx_exit(MQX_OUT_OF_MEMORY);
        } /* Endif */
    #endif
    _task_ready_internal(td_ptr);
   119a2:	f000 fbcb 	bl	1213c <_task_ready_internal>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:316
    /* Check here for auto-create tasks, and create them here */
    {
        TASK_TEMPLATE_STRUCT_PTR    template_ptr;
        int                         task_index = 0;

        template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;
   119a6:	23be      	movs	r3, #190	; 0xbe
   119a8:	005b      	lsls	r3, r3, #1
   119aa:	58f4      	ldr	r4, [r6, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:318

        while (template_ptr->TASK_TEMPLATE_INDEX) {
   119ac:	6823      	ldr	r3, [r4, #0]
   119ae:	2b00      	cmp	r3, #0
   119b0:	d01c      	beq.n	119ec <_mqxlite+0x78>
   119b2:	4d15      	ldr	r5, [pc, #84]	; (11a08 <_mqxlite+0x94>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:319
            if (template_ptr->TASK_ATTRIBUTES & MQX_AUTO_START_TASK) {
   119b4:	2701      	movs	r7, #1
   119b6:	e004      	b.n	119c2 <_mqxlite+0x4e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:333
                    _mqx_exit(MQX_OUT_OF_MEMORY);
                } /* Endif */
    #endif
                _task_ready_internal(td_ptr);
            } /* Endif */
            ++template_ptr;
   119b8:	341c      	adds	r4, #28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:318
        TASK_TEMPLATE_STRUCT_PTR    template_ptr;
        int                         task_index = 0;

        template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;

        while (template_ptr->TASK_TEMPLATE_INDEX) {
   119ba:	6823      	ldr	r3, [r4, #0]
   119bc:	3504      	adds	r5, #4
   119be:	2b00      	cmp	r3, #0
   119c0:	d014      	beq.n	119ec <_mqxlite+0x78>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:319
            if (template_ptr->TASK_ATTRIBUTES & MQX_AUTO_START_TASK) {
   119c2:	6963      	ldr	r3, [r4, #20]
   119c4:	423b      	tst	r3, r7
   119c6:	d0f7      	beq.n	119b8 <_mqxlite+0x44>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:320
                td_ptr = _task_init_internal(template_ptr,
   119c8:	69f3      	ldr	r3, [r6, #28]
   119ca:	69a2      	ldr	r2, [r4, #24]
   119cc:	68d9      	ldr	r1, [r3, #12]
   119ce:	682b      	ldr	r3, [r5, #0]
   119d0:	1c20      	adds	r0, r4, #0
   119d2:	9300      	str	r3, [sp, #0]
   119d4:	68a3      	ldr	r3, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:333
                    _mqx_exit(MQX_OUT_OF_MEMORY);
                } /* Endif */
    #endif
                _task_ready_internal(td_ptr);
            } /* Endif */
            ++template_ptr;
   119d6:	341c      	adds	r4, #28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:320

        template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;

        while (template_ptr->TASK_TEMPLATE_INDEX) {
            if (template_ptr->TASK_ATTRIBUTES & MQX_AUTO_START_TASK) {
                td_ptr = _task_init_internal(template_ptr,
   119d8:	9301      	str	r3, [sp, #4]
   119da:	2300      	movs	r3, #0
   119dc:	f000 f9b2 	bl	11d44 <_task_init_internal>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:331
    #if MQX_CHECK_MEMORY_ALLOCATION_ERRORS
                if (td_ptr == NULL) {
                    _mqx_exit(MQX_OUT_OF_MEMORY);
                } /* Endif */
    #endif
                _task_ready_internal(td_ptr);
   119e0:	f000 fbac 	bl	1213c <_task_ready_internal>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:318
        TASK_TEMPLATE_STRUCT_PTR    template_ptr;
        int                         task_index = 0;

        template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;

        while (template_ptr->TASK_TEMPLATE_INDEX) {
   119e4:	6823      	ldr	r3, [r4, #0]
   119e6:	3504      	adds	r5, #4
   119e8:	2b00      	cmp	r3, #0
   119ea:	d1ea      	bne.n	119c2 <_mqxlite+0x4e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:339
            ++task_index;
        } /* Endwhile */
    }

    /* System timer start */
    system_timer_start(NULL);
   119ec:	2000      	movs	r0, #0
   119ee:	f001 f8f5 	bl	12bdc <system_timer_start>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:341

    _sched_start_internal(); /* WILL NEVER RETURN FROM HERE */
   119f2:	f003 fe9b 	bl	1572c <_sched_start_internal>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:344

    return MQX_OK; /* To satisfy lint */
} /* Endbody */
   119f6:	2000      	movs	r0, #0
   119f8:	b003      	add	sp, #12
   119fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
_mqx_exit():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:377
    _mqx_uint error
)
{ /* Body */
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _int_disable();
   119fc:	f7ff fc18 	bl	11230 <_int_disable>
   11a00:	e7fe      	b.n	11a00 <_mqxlite+0x8c>
   11a02:	46c0      	nop			; (mov r8, r8)
   11a04:	1fffe000 	.word	0x1fffe000
   11a08:	1fffe004 	.word	0x1fffe004

00011a0c <_mqx_exit>:
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:374
 */
void _mqx_exit
(
    _mqx_uint error
)
{ /* Body */
   11a0c:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/mqxlite.c:377
    KERNEL_DATA_STRUCT_PTR kernel_data;

    _int_disable();
   11a0e:	f7ff fc0f 	bl	11230 <_int_disable>
   11a12:	e7fe      	b.n	11a12 <_mqx_exit+0x6>

00011a14 <_task_exit_function_internal>:
_task_exit_function_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3007
 * \private
 *
 * \brief Executes the exit handler for the current task, then destroys the current task.
 */
void _task_exit_function_internal(void)
{
   11a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
_task_destroy_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:785
    TD_STRUCT_PTR            victim_ptr;
    TD_STRUCT_PTR            td_ptr;
    _processor_number        processor;
    uint16_t                  task_num;

    _GET_KERNEL_DATA(kernel_data);
   11a16:	4b4d      	ldr	r3, [pc, #308]	; (11b4c <_task_exit_function_internal+0x138>)
_task_exit_function_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3007
 * \private
 *
 * \brief Executes the exit handler for the current task, then destroys the current task.
 */
void _task_exit_function_internal(void)
{
   11a18:	4646      	mov	r6, r8
   11a1a:	464f      	mov	r7, r9
   11a1c:	b4c0      	push	{r6, r7}
_task_destroy_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:785
    TD_STRUCT_PTR            victim_ptr;
    TD_STRUCT_PTR            td_ptr;
    _processor_number        processor;
    uint16_t                  task_num;

    _GET_KERNEL_DATA(kernel_data);
   11a1e:	681e      	ldr	r6, [r3, #0]
_task_get_td():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2720
#endif

    _GET_KERNEL_DATA(kernel_data);
    if (task_id == MQX_NULL_TASK_ID)
    {
        return((pointer)kernel_data->ACTIVE_PTR);
   11a20:	69f5      	ldr	r5, [r6, #28]
_task_destroy_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:819
    }
#endif

    /* Make sure we are not trying to destroy the system task */
#if MQX_CHECK_ERRORS
    if ((victim_ptr == NULL) || (victim_ptr == SYSTEM_TD_PTR(kernel_data))) {
   11a22:	2d00      	cmp	r5, #0
   11a24:	d055      	beq.n	11ad2 <_task_exit_function_internal+0xbe>
   11a26:	1c33      	adds	r3, r6, #0
   11a28:	3348      	adds	r3, #72	; 0x48
   11a2a:	429d      	cmp	r5, r3
   11a2c:	d051      	beq.n	11ad2 <_task_exit_function_internal+0xbe>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:826
        return MQX_INVALID_TASK_ID;
    } /* Endif */
#endif

    /* First, serialize task creation/destruction */
    _lwsem_wait((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
   11a2e:	1c77      	adds	r7, r6, #1
   11a30:	37ff      	adds	r7, #255	; 0xff
   11a32:	1c38      	adds	r0, r7, #0
   11a34:	f7ff fe6e 	bl	11714 <_lwsem_wait>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:828

    _int_disable();
   11a38:	f7ff fbfa 	bl	11230 <_int_disable>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:830

    if (victim_ptr->STATE == DYING) {
   11a3c:	68ab      	ldr	r3, [r5, #8]
   11a3e:	2b09      	cmp	r3, #9
   11a40:	d100      	bne.n	11a44 <_task_exit_function_internal+0x30>
   11a42:	e071      	b.n	11b28 <_task_exit_function_internal+0x114>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:841
        _KLOGX2(KLOG_task_destroy, MQX_OK);
        return MQX_OK;
    } /* Endif */

    /* remove the victim from any queues it may be in. */
    if (victim_ptr->STATE == READY) {
   11a44:	2b02      	cmp	r3, #2
   11a46:	d067      	beq.n	11b18 <_task_exit_function_internal+0x104>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:846
        if (victim_ptr != kernel_data->ACTIVE_PTR) {
            /* Remove other task from ready queue */
            _QUEUE_UNLINK(victim_ptr);
        } /* Endif */
    } else if (victim_ptr->STATE & IS_ON_TIMEOUT_Q) {
   11a48:	05d9      	lsls	r1, r3, #23
   11a4a:	d446      	bmi.n	11ada <_task_exit_function_internal+0xc6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:849
        /* Remove from time queue (uses NEXT, PREV field) */
        _TIME_DEQUEUE(victim_ptr, kernel_data);
    } else if (victim_ptr->STATE & TD_IS_ON_QUEUE) {
   11a4c:	0598      	lsls	r0, r3, #22
   11a4e:	d507      	bpl.n	11a60 <_task_exit_function_internal+0x4c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:855
        /*
         * Remove from queue, where suspended
         * eg, MUTEX_BLOCKED, IO_BLOCKED, TASKQ_BLOCKED
         * (uses NEXT, PREV field)
         */
        _QUEUE_REMOVE(victim_ptr->INFO, victim_ptr);
   11a50:	6869      	ldr	r1, [r5, #4]
   11a52:	682a      	ldr	r2, [r5, #0]
   11a54:	600a      	str	r2, [r1, #0]
   11a56:	6051      	str	r1, [r2, #4]
   11a58:	6baa      	ldr	r2, [r5, #56]	; 0x38
   11a5a:	8911      	ldrh	r1, [r2, #8]
   11a5c:	3901      	subs	r1, #1
   11a5e:	8111      	strh	r1, [r2, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:858
    } /* Endif */

    if (victim_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
   11a60:	0559      	lsls	r1, r3, #21
   11a62:	d507      	bpl.n	11a74 <_task_exit_function_internal+0x60>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:864
        /*
         * Remove from queue, where suspended
         * eg, LWSEM_BLOCKED
         * (uses AUX_QUEUE field)
         */
        _QUEUE_REMOVE(victim_ptr->INFO, &victim_ptr->AUX_QUEUE);
   11a64:	6c2a      	ldr	r2, [r5, #64]	; 0x40
   11a66:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   11a68:	6013      	str	r3, [r2, #0]
   11a6a:	605a      	str	r2, [r3, #4]
   11a6c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   11a6e:	891a      	ldrh	r2, [r3, #8]
   11a70:	3a01      	subs	r2, #1
   11a72:	811a      	strh	r2, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:867
    } /* Endif */

    victim_ptr->STATE   = DYING;
   11a74:	2309      	movs	r3, #9
   11a76:	60ab      	str	r3, [r5, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:883
    if (kernel_data->DSP_ACTIVE_PTR == victim_ptr) {
        kernel_data->DSP_ACTIVE_PTR = NULL;
    }/* Endif */
#endif

    _int_enable();
   11a78:	f7ff fbe6 	bl	11248 <_int_enable>
   11a7c:	2400      	movs	r4, #0
   11a7e:	1933      	adds	r3, r6, r4
   11a80:	33dd      	adds	r3, #221	; 0xdd
   11a82:	33ff      	adds	r3, #255	; 0xff
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:889

#if MQX_COMPONENT_DESTRUCTION
    {
        _mqx_uint i;
        for (i = 0; i < MAX_KERNEL_COMPONENTS; ++i) {
            if (kernel_data->COMPONENT_CLEANUP[i] != NULL) {
   11a84:	681b      	ldr	r3, [r3, #0]
   11a86:	2b00      	cmp	r3, #0
   11a88:	d001      	beq.n	11a8e <_task_exit_function_internal+0x7a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:890
                (*kernel_data->COMPONENT_CLEANUP[i])(victim_ptr);
   11a8a:	1c28      	adds	r0, r5, #0
   11a8c:	4798      	blx	r3
   11a8e:	3404      	adds	r4, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:888
    _int_enable();

#if MQX_COMPONENT_DESTRUCTION
    {
        _mqx_uint i;
        for (i = 0; i < MAX_KERNEL_COMPONENTS; ++i) {
   11a90:	2c40      	cmp	r4, #64	; 0x40
   11a92:	d1f4      	bne.n	11a7e <_task_exit_function_internal+0x6a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:929
            block_ptr = next_block_ptr;
        }
    }
#endif /* MQX_LITE_VERSION_NUMBER */

    victim_ptr->TASK_ID = TASK_ID_DYING;
   11a94:	2380      	movs	r3, #128	; 0x80
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:900


    /* Save the task number */
    task_num = TASK_NUMBER_FROM_TASKID(victim_ptr->TASK_ID);

    td_ptr = kernel_data->ACTIVE_PTR;
   11a96:	69f2      	ldr	r2, [r6, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:929
            block_ptr = next_block_ptr;
        }
    }
#endif /* MQX_LITE_VERSION_NUMBER */

    victim_ptr->TASK_ID = TASK_ID_DYING;
   11a98:	061b      	lsls	r3, r3, #24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:933

    /* Start SPR P171-0017-01                */
    /* Remove td from linked list of all tds */
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
   11a9a:	1c31      	adds	r1, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:898
    }
#endif


    /* Save the task number */
    task_num = TASK_NUMBER_FROM_TASKID(victim_ptr->TASK_ID);
   11a9c:	68e8      	ldr	r0, [r5, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:933

    victim_ptr->TASK_ID = TASK_ID_DYING;

    /* Start SPR P171-0017-01                */
    /* Remove td from linked list of all tds */
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
   11a9e:	31d4      	adds	r1, #212	; 0xd4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:929
            block_ptr = next_block_ptr;
        }
    }
#endif /* MQX_LITE_VERSION_NUMBER */

    victim_ptr->TASK_ID = TASK_ID_DYING;
   11aa0:	60eb      	str	r3, [r5, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:900


    /* Save the task number */
    task_num = TASK_NUMBER_FROM_TASKID(victim_ptr->TASK_ID);

    td_ptr = kernel_data->ACTIVE_PTR;
   11aa2:	4691      	mov	r9, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:933

    victim_ptr->TASK_ID = TASK_ID_DYING;

    /* Start SPR P171-0017-01                */
    /* Remove td from linked list of all tds */
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
   11aa4:	890a      	ldrh	r2, [r1, #8]
   11aa6:	2a01      	cmp	r2, #1
   11aa8:	d02f      	beq.n	11b0a <_task_exit_function_internal+0xf6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:937
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
        kernel_data->INSERT_TD_PTR = NULL;
    } else if (kernel_data->TASK_NUMBER > task_num) {
   11aaa:	23e0      	movs	r3, #224	; 0xe0
   11aac:	58f4      	ldr	r4, [r6, r3]
   11aae:	0400      	lsls	r0, r0, #16
   11ab0:	0c00      	lsrs	r0, r0, #16
   11ab2:	4284      	cmp	r4, r0
   11ab4:	d821      	bhi.n	11afa <_task_exit_function_internal+0xe6>
   11ab6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:943
        kernel_data->TASK_NUMBER   = task_num;
        kernel_data->INSERT_TD_PTR =
                        (TD_STRUCT_PTR)((unsigned char *)victim_ptr->TD_LIST_INFO.PREV -
                                        FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
    } /* Endif */
    _QUEUE_REMOVE(&kernel_data->TD_LIST, &victim_ptr->TD_LIST_INFO);
   11ab8:	6ea8      	ldr	r0, [r5, #104]	; 0x68
   11aba:	3a01      	subs	r2, #1
   11abc:	6018      	str	r0, [r3, #0]
   11abe:	6043      	str	r3, [r0, #4]
   11ac0:	810a      	strh	r2, [r1, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:947
    /* End SPR P171-0017-01                  */

    /* Free up create/destroy for other tasks */
    _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
   11ac2:	1c38      	adds	r0, r7, #0
   11ac4:	f7ff fdcc 	bl	11660 <_lwsem_post>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:949

    if (victim_ptr == td_ptr) {
   11ac8:	45a9      	cmp	r9, r5
   11aca:	d033      	beq.n	11b34 <_task_exit_function_internal+0x120>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:988
            victim_ptr->FLOAT_CONTEXT_PTR = NULL;
        }
    }
#endif /* MQX_LITE_VERSION_NUMBER */

    _psp_destroy_stack_frame(victim_ptr);
   11acc:	1c28      	adds	r0, r5, #0
   11ace:	f7ff fb7f 	bl	111d0 <_psp_destroy_stack_frame>
_task_exit_function_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3031
    while(TRUE)
    {
        _task_block();
    }
#endif /* MQX_TASK_DESTRUCTION */
}
   11ad2:	bc0c      	pop	{r2, r3}
   11ad4:	4690      	mov	r8, r2
   11ad6:	4699      	mov	r9, r3
   11ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_task_destroy_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:848
            /* Remove other task from ready queue */
            _QUEUE_UNLINK(victim_ptr);
        } /* Endif */
    } else if (victim_ptr->STATE & IS_ON_TIMEOUT_Q) {
        /* Remove from time queue (uses NEXT, PREV field) */
        _TIME_DEQUEUE(victim_ptr, kernel_data);
   11ada:	6869      	ldr	r1, [r5, #4]
   11adc:	682a      	ldr	r2, [r5, #0]
   11ade:	249a      	movs	r4, #154	; 0x9a
   11ae0:	0064      	lsls	r4, r4, #1
   11ae2:	600a      	str	r2, [r1, #0]
   11ae4:	6051      	str	r1, [r2, #4]
   11ae6:	1932      	adds	r2, r6, r4
   11ae8:	8911      	ldrh	r1, [r2, #8]
   11aea:	3901      	subs	r1, #1
   11aec:	8111      	strh	r1, [r2, #8]
   11aee:	4a18      	ldr	r2, [pc, #96]	; (11b50 <_task_exit_function_internal+0x13c>)
   11af0:	4013      	ands	r3, r2
   11af2:	2203      	movs	r2, #3
   11af4:	4313      	orrs	r3, r2
   11af6:	60ab      	str	r3, [r5, #8]
   11af8:	e7b2      	b.n	11a60 <_task_exit_function_internal+0x4c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:938
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
        kernel_data->INSERT_TD_PTR = NULL;
    } else if (kernel_data->TASK_NUMBER > task_num) {
        kernel_data->TASK_NUMBER   = task_num;
   11afa:	50f0      	str	r0, [r6, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:940
        kernel_data->INSERT_TD_PTR =
                        (TD_STRUCT_PTR)((unsigned char *)victim_ptr->TD_LIST_INFO.PREV -
   11afc:	2468      	movs	r4, #104	; 0x68
   11afe:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   11b00:	4264      	negs	r4, r4
   11b02:	18e4      	adds	r4, r4, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:939
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
        kernel_data->INSERT_TD_PTR = NULL;
    } else if (kernel_data->TASK_NUMBER > task_num) {
        kernel_data->TASK_NUMBER   = task_num;
        kernel_data->INSERT_TD_PTR =
   11b04:	20e4      	movs	r0, #228	; 0xe4
   11b06:	5034      	str	r4, [r6, r0]
   11b08:	e7d6      	b.n	11ab8 <_task_exit_function_internal+0xa4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:935

    /* Start SPR P171-0017-01                */
    /* Remove td from linked list of all tds */
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
   11b0a:	23e0      	movs	r3, #224	; 0xe0
   11b0c:	50f2      	str	r2, [r6, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:936
        kernel_data->INSERT_TD_PTR = NULL;
   11b0e:	2000      	movs	r0, #0
   11b10:	23e4      	movs	r3, #228	; 0xe4
   11b12:	50f0      	str	r0, [r6, r3]
   11b14:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   11b16:	e7cf      	b.n	11ab8 <_task_exit_function_internal+0xa4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:842
        return MQX_OK;
    } /* Endif */

    /* remove the victim from any queues it may be in. */
    if (victim_ptr->STATE == READY) {
        if (victim_ptr != kernel_data->ACTIVE_PTR) {
   11b18:	69f0      	ldr	r0, [r6, #28]
   11b1a:	42a8      	cmp	r0, r5
   11b1c:	d0aa      	beq.n	11a74 <_task_exit_function_internal+0x60>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:844
            /* Remove other task from ready queue */
            _QUEUE_UNLINK(victim_ptr);
   11b1e:	686a      	ldr	r2, [r5, #4]
   11b20:	682b      	ldr	r3, [r5, #0]
   11b22:	6013      	str	r3, [r2, #0]
   11b24:	605a      	str	r2, [r3, #4]
   11b26:	e7a5      	b.n	11a74 <_task_exit_function_internal+0x60>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:833
    _int_disable();

    if (victim_ptr->STATE == DYING) {
        /* Task is already being destroyed */
        /* SPR P171-0021-01 re-enable interrupts */
        _int_enable();
   11b28:	f7ff fb8e 	bl	11248 <_int_enable>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:835
        /* END SPR */
        _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
   11b2c:	1c38      	adds	r0, r7, #0
   11b2e:	f7ff fd97 	bl	11660 <_lwsem_post>
   11b32:	e7ce      	b.n	11ad2 <_task_exit_function_internal+0xbe>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:951
    /* Free up create/destroy for other tasks */
    _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);

    if (victim_ptr == td_ptr) {
        /* We are destroying the current task */
        _int_disable();
   11b34:	f7ff fb7c 	bl	11230 <_int_disable>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:952
        _QUEUE_UNLINK(victim_ptr);  /* Remove myself from the ready queue */
   11b38:	686a      	ldr	r2, [r5, #4]
   11b3a:	682b      	ldr	r3, [r5, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:963
                _mem_free(victim_ptr->FLOAT_CONTEXT_PTR);
                victim_ptr->FLOAT_CONTEXT_PTR = NULL;
            }
        }
#endif /* MQX_LITE_VERSION_NUMBER */
        _psp_destroy_stack_frame(victim_ptr);
   11b3c:	1c28      	adds	r0, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:952
    _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);

    if (victim_ptr == td_ptr) {
        /* We are destroying the current task */
        _int_disable();
        _QUEUE_UNLINK(victim_ptr);  /* Remove myself from the ready queue */
   11b3e:	6013      	str	r3, [r2, #0]
   11b40:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:963
                _mem_free(victim_ptr->FLOAT_CONTEXT_PTR);
                victim_ptr->FLOAT_CONTEXT_PTR = NULL;
            }
        }
#endif /* MQX_LITE_VERSION_NUMBER */
        _psp_destroy_stack_frame(victim_ptr);
   11b42:	f7ff fb45 	bl	111d0 <_psp_destroy_stack_frame>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:976
            _mem_transfer_internal(victim_ptr, SYSTEM_TD_PTR(kernel_data));
            _mem_free(victim_ptr);   /* Free the task descriptor */
        } /* Endif */
#endif /* MQX_LITE_VERSION_NUMBER */
        /* Now we must jump to the scheduler */
        _sched_run_internal();   /* WILL NEVER RETURN FROM HERE */
   11b46:	f003 fdf4 	bl	15732 <_sched_run_internal>
   11b4a:	e7bf      	b.n	11acc <_task_exit_function_internal+0xb8>
   11b4c:	1fffe000 	.word	0x1fffe000
   11b50:	fffffeff 	.word	0xfffffeff

00011b54 <_task_destroy>:
_task_destroy():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:1049
 */
_mqx_uint _task_destroy
(
    _task_id task_id
)
{
   11b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
_task_destroy_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:785
    TD_STRUCT_PTR            victim_ptr;
    TD_STRUCT_PTR            td_ptr;
    _processor_number        processor;
    uint16_t                  task_num;

    _GET_KERNEL_DATA(kernel_data);
   11b56:	4b6c      	ldr	r3, [pc, #432]	; (11d08 <_task_destroy+0x1b4>)
_task_destroy():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:1049
 */
_mqx_uint _task_destroy
(
    _task_id task_id
)
{
   11b58:	464f      	mov	r7, r9
   11b5a:	4646      	mov	r6, r8
   11b5c:	b4c0      	push	{r6, r7}
_task_destroy_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:785
    TD_STRUCT_PTR            victim_ptr;
    TD_STRUCT_PTR            td_ptr;
    _processor_number        processor;
    uint16_t                  task_num;

    _GET_KERNEL_DATA(kernel_data);
   11b5e:	681d      	ldr	r5, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:788
    _KLOGE2(KLOG_task_destroy, task_id);

    if (task_id != MQX_NULL_TASK_ID) {
   11b60:	2800      	cmp	r0, #0
   11b62:	d00a      	beq.n	11b7a <_task_destroy+0x26>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:790
        processor = PROC_NUMBER_FROM_TASKID(task_id);
        if (processor != (_processor_number)kernel_data->INIT.PROCESSOR_NUMBER ) {
   11b64:	23ae      	movs	r3, #174	; 0xae
   11b66:	005b      	lsls	r3, r3, #1
   11b68:	5aea      	ldrh	r2, [r5, r3]
   11b6a:	0c03      	lsrs	r3, r0, #16
   11b6c:	429a      	cmp	r2, r3
   11b6e:	d065      	beq.n	11c3c <_task_destroy+0xe8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:821

    /* Make sure we are not trying to destroy the system task */
#if MQX_CHECK_ERRORS
    if ((victim_ptr == NULL) || (victim_ptr == SYSTEM_TD_PTR(kernel_data))) {
        _KLOGX2(KLOG_task_destroy, MQX_INVALID_TASK_ID);
        return MQX_INVALID_TASK_ID;
   11b70:	2012      	movs	r0, #18
_task_destroy():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:1058
        return _usr_task_destroy(task_id);
    }
#endif

    return _task_destroy_internal(task_id, FALSE);
}
   11b72:	bc0c      	pop	{r2, r3}
   11b74:	4690      	mov	r8, r2
   11b76:	4699      	mov	r9, r3
   11b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_task_get_td():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2720
#endif

    _GET_KERNEL_DATA(kernel_data);
    if (task_id == MQX_NULL_TASK_ID)
    {
        return((pointer)kernel_data->ACTIVE_PTR);
   11b7a:	69ee      	ldr	r6, [r5, #28]
   11b7c:	1c2a      	adds	r2, r5, #0
   11b7e:	3248      	adds	r2, #72	; 0x48
_task_destroy_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:819
    }
#endif

    /* Make sure we are not trying to destroy the system task */
#if MQX_CHECK_ERRORS
    if ((victim_ptr == NULL) || (victim_ptr == SYSTEM_TD_PTR(kernel_data))) {
   11b80:	2e00      	cmp	r6, #0
   11b82:	d0f5      	beq.n	11b70 <_task_destroy+0x1c>
   11b84:	42b2      	cmp	r2, r6
   11b86:	d0f3      	beq.n	11b70 <_task_destroy+0x1c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:826
        return MQX_INVALID_TASK_ID;
    } /* Endif */
#endif

    /* First, serialize task creation/destruction */
    _lwsem_wait((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
   11b88:	1c6f      	adds	r7, r5, #1
   11b8a:	37ff      	adds	r7, #255	; 0xff
   11b8c:	1c38      	adds	r0, r7, #0
   11b8e:	f7ff fdc1 	bl	11714 <_lwsem_wait>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:828

    _int_disable();
   11b92:	f7ff fb4d 	bl	11230 <_int_disable>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:830

    if (victim_ptr->STATE == DYING) {
   11b96:	68b3      	ldr	r3, [r6, #8]
   11b98:	2b09      	cmp	r3, #9
   11b9a:	d100      	bne.n	11b9e <_task_destroy+0x4a>
   11b9c:	e0a0      	b.n	11ce0 <_task_destroy+0x18c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:841
        _KLOGX2(KLOG_task_destroy, MQX_OK);
        return MQX_OK;
    } /* Endif */

    /* remove the victim from any queues it may be in. */
    if (victim_ptr->STATE == READY) {
   11b9e:	2b02      	cmp	r3, #2
   11ba0:	d100      	bne.n	11ba4 <_task_destroy+0x50>
   11ba2:	e08e      	b.n	11cc2 <_task_destroy+0x16e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:846
        if (victim_ptr != kernel_data->ACTIVE_PTR) {
            /* Remove other task from ready queue */
            _QUEUE_UNLINK(victim_ptr);
        } /* Endif */
    } else if (victim_ptr->STATE & IS_ON_TIMEOUT_Q) {
   11ba4:	05d9      	lsls	r1, r3, #23
   11ba6:	d575      	bpl.n	11c94 <_task_destroy+0x140>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:848
        /* Remove from time queue (uses NEXT, PREV field) */
        _TIME_DEQUEUE(victim_ptr, kernel_data);
   11ba8:	6871      	ldr	r1, [r6, #4]
   11baa:	6832      	ldr	r2, [r6, #0]
   11bac:	249a      	movs	r4, #154	; 0x9a
   11bae:	0064      	lsls	r4, r4, #1
   11bb0:	600a      	str	r2, [r1, #0]
   11bb2:	6051      	str	r1, [r2, #4]
   11bb4:	192a      	adds	r2, r5, r4
   11bb6:	8911      	ldrh	r1, [r2, #8]
   11bb8:	3901      	subs	r1, #1
   11bba:	8111      	strh	r1, [r2, #8]
   11bbc:	4a53      	ldr	r2, [pc, #332]	; (11d0c <_task_destroy+0x1b8>)
   11bbe:	4013      	ands	r3, r2
   11bc0:	2203      	movs	r2, #3
   11bc2:	4313      	orrs	r3, r2
   11bc4:	60b3      	str	r3, [r6, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:858
         * (uses NEXT, PREV field)
         */
        _QUEUE_REMOVE(victim_ptr->INFO, victim_ptr);
    } /* Endif */

    if (victim_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
   11bc6:	0559      	lsls	r1, r3, #21
   11bc8:	d507      	bpl.n	11bda <_task_destroy+0x86>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:864
        /*
         * Remove from queue, where suspended
         * eg, LWSEM_BLOCKED
         * (uses AUX_QUEUE field)
         */
        _QUEUE_REMOVE(victim_ptr->INFO, &victim_ptr->AUX_QUEUE);
   11bca:	6c32      	ldr	r2, [r6, #64]	; 0x40
   11bcc:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   11bce:	6013      	str	r3, [r2, #0]
   11bd0:	605a      	str	r2, [r3, #4]
   11bd2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   11bd4:	891a      	ldrh	r2, [r3, #8]
   11bd6:	3a01      	subs	r2, #1
   11bd8:	811a      	strh	r2, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:867
    } /* Endif */

    victim_ptr->STATE   = DYING;
   11bda:	2309      	movs	r3, #9
   11bdc:	60b3      	str	r3, [r6, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:883
    if (kernel_data->DSP_ACTIVE_PTR == victim_ptr) {
        kernel_data->DSP_ACTIVE_PTR = NULL;
    }/* Endif */
#endif

    _int_enable();
   11bde:	f7ff fb33 	bl	11248 <_int_enable>
   11be2:	2400      	movs	r4, #0
   11be4:	192a      	adds	r2, r5, r4
   11be6:	32dd      	adds	r2, #221	; 0xdd
   11be8:	32ff      	adds	r2, #255	; 0xff
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:889

#if MQX_COMPONENT_DESTRUCTION
    {
        _mqx_uint i;
        for (i = 0; i < MAX_KERNEL_COMPONENTS; ++i) {
            if (kernel_data->COMPONENT_CLEANUP[i] != NULL) {
   11bea:	6812      	ldr	r2, [r2, #0]
   11bec:	2a00      	cmp	r2, #0
   11bee:	d001      	beq.n	11bf4 <_task_destroy+0xa0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:890
                (*kernel_data->COMPONENT_CLEANUP[i])(victim_ptr);
   11bf0:	1c30      	adds	r0, r6, #0
   11bf2:	4790      	blx	r2
   11bf4:	3404      	adds	r4, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:888
    _int_enable();

#if MQX_COMPONENT_DESTRUCTION
    {
        _mqx_uint i;
        for (i = 0; i < MAX_KERNEL_COMPONENTS; ++i) {
   11bf6:	2c40      	cmp	r4, #64	; 0x40
   11bf8:	d1f4      	bne.n	11be4 <_task_destroy+0x90>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:929
            block_ptr = next_block_ptr;
        }
    }
#endif /* MQX_LITE_VERSION_NUMBER */

    victim_ptr->TASK_ID = TASK_ID_DYING;
   11bfa:	2380      	movs	r3, #128	; 0x80
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:900


    /* Save the task number */
    task_num = TASK_NUMBER_FROM_TASKID(victim_ptr->TASK_ID);

    td_ptr = kernel_data->ACTIVE_PTR;
   11bfc:	69ea      	ldr	r2, [r5, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:929
            block_ptr = next_block_ptr;
        }
    }
#endif /* MQX_LITE_VERSION_NUMBER */

    victim_ptr->TASK_ID = TASK_ID_DYING;
   11bfe:	061b      	lsls	r3, r3, #24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:933

    /* Start SPR P171-0017-01                */
    /* Remove td from linked list of all tds */
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
   11c00:	1c29      	adds	r1, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:898
    }
#endif


    /* Save the task number */
    task_num = TASK_NUMBER_FROM_TASKID(victim_ptr->TASK_ID);
   11c02:	68f0      	ldr	r0, [r6, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:933

    victim_ptr->TASK_ID = TASK_ID_DYING;

    /* Start SPR P171-0017-01                */
    /* Remove td from linked list of all tds */
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
   11c04:	31d4      	adds	r1, #212	; 0xd4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:929
            block_ptr = next_block_ptr;
        }
    }
#endif /* MQX_LITE_VERSION_NUMBER */

    victim_ptr->TASK_ID = TASK_ID_DYING;
   11c06:	60f3      	str	r3, [r6, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:900


    /* Save the task number */
    task_num = TASK_NUMBER_FROM_TASKID(victim_ptr->TASK_ID);

    td_ptr = kernel_data->ACTIVE_PTR;
   11c08:	4691      	mov	r9, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:933

    victim_ptr->TASK_ID = TASK_ID_DYING;

    /* Start SPR P171-0017-01                */
    /* Remove td from linked list of all tds */
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
   11c0a:	890a      	ldrh	r2, [r1, #8]
   11c0c:	2a01      	cmp	r2, #1
   11c0e:	d060      	beq.n	11cd2 <_task_destroy+0x17e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:937
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
        kernel_data->INSERT_TD_PTR = NULL;
    } else if (kernel_data->TASK_NUMBER > task_num) {
   11c10:	23e0      	movs	r3, #224	; 0xe0
   11c12:	58ec      	ldr	r4, [r5, r3]
   11c14:	0400      	lsls	r0, r0, #16
   11c16:	0c00      	lsrs	r0, r0, #16
   11c18:	4284      	cmp	r4, r0
   11c1a:	d846      	bhi.n	11caa <_task_destroy+0x156>
   11c1c:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:943
        kernel_data->TASK_NUMBER   = task_num;
        kernel_data->INSERT_TD_PTR =
                        (TD_STRUCT_PTR)((unsigned char *)victim_ptr->TD_LIST_INFO.PREV -
                                        FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
    } /* Endif */
    _QUEUE_REMOVE(&kernel_data->TD_LIST, &victim_ptr->TD_LIST_INFO);
   11c1e:	6eb0      	ldr	r0, [r6, #104]	; 0x68
   11c20:	3a01      	subs	r2, #1
   11c22:	6018      	str	r0, [r3, #0]
   11c24:	6043      	str	r3, [r0, #4]
   11c26:	810a      	strh	r2, [r1, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:947
    /* End SPR P171-0017-01                  */

    /* Free up create/destroy for other tasks */
    _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
   11c28:	1c38      	adds	r0, r7, #0
   11c2a:	f7ff fd19 	bl	11660 <_lwsem_post>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:949

    if (victim_ptr == td_ptr) {
   11c2e:	45b1      	cmp	r9, r6
   11c30:	d05d      	beq.n	11cee <_task_destroy+0x19a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:988
            victim_ptr->FLOAT_CONTEXT_PTR = NULL;
        }
    }
#endif /* MQX_LITE_VERSION_NUMBER */

    _psp_destroy_stack_frame(victim_ptr);
   11c32:	1c30      	adds	r0, r6, #0
   11c34:	f7ff facc 	bl	111d0 <_psp_destroy_stack_frame>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:1009
        _int_enable();
    }
#endif /* MQX_ENABLE_USER_MODE */

    _KLOGX2(KLOG_task_destroy, MQX_OK);
    return(MQX_OK);
   11c38:	2000      	movs	r0, #0
   11c3a:	e79a      	b.n	11b72 <_task_destroy+0x1e>
_task_get_td():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2724
    {
        return((pointer)kernel_data->ACTIVE_PTR);
    }

    /* check task_id for SYSTEM_TASK_ID */
    if (task_id == kernel_data->SYSTEM_TD.TASK_ID)
   11c3c:	6d69      	ldr	r1, [r5, #84]	; 0x54
   11c3e:	4288      	cmp	r0, r1
   11c40:	d03b      	beq.n	11cba <_task_destroy+0x166>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2730
    {
        return((void *)&(kernel_data->SYSTEM_TD));
    }

    /* SPR P171-0022-01 Use int disable, not a semaphore */
    _INT_DISABLE();
   11c42:	69ec      	ldr	r4, [r5, #28]
   11c44:	6d61      	ldr	r1, [r4, #84]	; 0x54
   11c46:	2900      	cmp	r1, #0
   11c48:	d100      	bne.n	11c4c <_task_destroy+0xf8>
   11c4a:	b672      	cpsid	i
   11c4c:	1c4e      	adds	r6, r1, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2735
    /* END SPR */

    td_ptr = (TD_STRUCT_PTR)((unsigned char *)kernel_data->TD_LIST.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));

    size   = _QUEUE_GET_SIZE(&kernel_data->TD_LIST);
   11c4e:	1c2a      	adds	r2, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2730
    {
        return((void *)&(kernel_data->SYSTEM_TD));
    }

    /* SPR P171-0022-01 Use int disable, not a semaphore */
    _INT_DISABLE();
   11c50:	6566      	str	r6, [r4, #84]	; 0x54
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2733
    /* END SPR */

    td_ptr = (TD_STRUCT_PTR)((unsigned char *)kernel_data->TD_LIST.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
   11c52:	23d4      	movs	r3, #212	; 0xd4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2735

    size   = _QUEUE_GET_SIZE(&kernel_data->TD_LIST);
   11c54:	32d4      	adds	r2, #212	; 0xd4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2733

    /* SPR P171-0022-01 Use int disable, not a semaphore */
    _INT_DISABLE();
    /* END SPR */

    td_ptr = (TD_STRUCT_PTR)((unsigned char *)kernel_data->TD_LIST.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
   11c56:	58eb      	ldr	r3, [r5, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2735

    size   = _QUEUE_GET_SIZE(&kernel_data->TD_LIST);
   11c58:	8912      	ldrh	r2, [r2, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2733

    /* SPR P171-0022-01 Use int disable, not a semaphore */
    _INT_DISABLE();
    /* END SPR */

    td_ptr = (TD_STRUCT_PTR)((unsigned char *)kernel_data->TD_LIST.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
   11c5a:	3b68      	subs	r3, #104	; 0x68
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2736

    size   = _QUEUE_GET_SIZE(&kernel_data->TD_LIST);
    while (size--)
   11c5c:	2a00      	cmp	r2, #0
   11c5e:	d00c      	beq.n	11c7a <_task_destroy+0x126>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2739
    {
        /* END SPR */
        if (td_ptr->TASK_ID == task_id)
   11c60:	68df      	ldr	r7, [r3, #12]
   11c62:	3a02      	subs	r2, #2
   11c64:	42b8      	cmp	r0, r7
   11c66:	d104      	bne.n	11c72 <_task_destroy+0x11e>
   11c68:	e00a      	b.n	11c80 <_task_destroy+0x12c>
   11c6a:	68df      	ldr	r7, [r3, #12]
   11c6c:	3a01      	subs	r2, #1
   11c6e:	42b8      	cmp	r0, r7
   11c70:	d006      	beq.n	11c80 <_task_destroy+0x12c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2746
            /* SPR P171-0022-01 Use int disable, not a semaphore */
            _INT_ENABLE();
            /* END SPR */
            return (void *)td_ptr;
        } /* Endif */
        td_ptr = (TD_STRUCT_PTR)((unsigned char *)td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
   11c72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   11c74:	3b68      	subs	r3, #104	; 0x68
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2736
    /* END SPR */

    td_ptr = (TD_STRUCT_PTR)((unsigned char *)kernel_data->TD_LIST.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));

    size   = _QUEUE_GET_SIZE(&kernel_data->TD_LIST);
    while (size--)
   11c76:	1c57      	adds	r7, r2, #1
   11c78:	d1f7      	bne.n	11c6a <_task_destroy+0x116>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2750
        } /* Endif */
        td_ptr = (TD_STRUCT_PTR)((unsigned char *)td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
    } /* Endwhile */

    /* SPR P171-0022-01 Use int disable, not a semaphore */
    _int_enable();
   11c7a:	f7ff fae5 	bl	11248 <_int_enable>
   11c7e:	e777      	b.n	11b70 <_task_destroy+0x1c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2742
    {
        /* END SPR */
        if (td_ptr->TASK_ID == task_id)
        {
            /* SPR P171-0022-01 Use int disable, not a semaphore */
            _INT_ENABLE();
   11c80:	2e00      	cmp	r6, #0
   11c82:	d003      	beq.n	11c8c <_task_destroy+0x138>
   11c84:	6561      	str	r1, [r4, #84]	; 0x54
   11c86:	2900      	cmp	r1, #0
   11c88:	d100      	bne.n	11c8c <_task_destroy+0x138>
   11c8a:	b662      	cpsie	i
   11c8c:	1c2a      	adds	r2, r5, #0
   11c8e:	3248      	adds	r2, #72	; 0x48
   11c90:	1c1e      	adds	r6, r3, #0
   11c92:	e777      	b.n	11b84 <_task_destroy+0x30>
_task_destroy_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:849
            _QUEUE_UNLINK(victim_ptr);
        } /* Endif */
    } else if (victim_ptr->STATE & IS_ON_TIMEOUT_Q) {
        /* Remove from time queue (uses NEXT, PREV field) */
        _TIME_DEQUEUE(victim_ptr, kernel_data);
    } else if (victim_ptr->STATE & TD_IS_ON_QUEUE) {
   11c94:	0598      	lsls	r0, r3, #22
   11c96:	d596      	bpl.n	11bc6 <_task_destroy+0x72>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:855
        /*
         * Remove from queue, where suspended
         * eg, MUTEX_BLOCKED, IO_BLOCKED, TASKQ_BLOCKED
         * (uses NEXT, PREV field)
         */
        _QUEUE_REMOVE(victim_ptr->INFO, victim_ptr);
   11c98:	6871      	ldr	r1, [r6, #4]
   11c9a:	6832      	ldr	r2, [r6, #0]
   11c9c:	600a      	str	r2, [r1, #0]
   11c9e:	6051      	str	r1, [r2, #4]
   11ca0:	6bb2      	ldr	r2, [r6, #56]	; 0x38
   11ca2:	8911      	ldrh	r1, [r2, #8]
   11ca4:	3901      	subs	r1, #1
   11ca6:	8111      	strh	r1, [r2, #8]
   11ca8:	e78d      	b.n	11bc6 <_task_destroy+0x72>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:938
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
        kernel_data->INSERT_TD_PTR = NULL;
    } else if (kernel_data->TASK_NUMBER > task_num) {
        kernel_data->TASK_NUMBER   = task_num;
   11caa:	50e8      	str	r0, [r5, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:940
        kernel_data->INSERT_TD_PTR =
                        (TD_STRUCT_PTR)((unsigned char *)victim_ptr->TD_LIST_INFO.PREV -
   11cac:	2468      	movs	r4, #104	; 0x68
   11cae:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
   11cb0:	4264      	negs	r4, r4
   11cb2:	18e4      	adds	r4, r4, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:939
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
        kernel_data->INSERT_TD_PTR = NULL;
    } else if (kernel_data->TASK_NUMBER > task_num) {
        kernel_data->TASK_NUMBER   = task_num;
        kernel_data->INSERT_TD_PTR =
   11cb4:	20e4      	movs	r0, #228	; 0xe4
   11cb6:	502c      	str	r4, [r5, r0]
   11cb8:	e7b1      	b.n	11c1e <_task_destroy+0xca>
_task_get_td():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2726
    }

    /* check task_id for SYSTEM_TASK_ID */
    if (task_id == kernel_data->SYSTEM_TD.TASK_ID)
    {
        return((void *)&(kernel_data->SYSTEM_TD));
   11cba:	1c2e      	adds	r6, r5, #0
   11cbc:	3648      	adds	r6, #72	; 0x48
   11cbe:	1c32      	adds	r2, r6, #0
   11cc0:	e760      	b.n	11b84 <_task_destroy+0x30>
_task_destroy_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:842
        return MQX_OK;
    } /* Endif */

    /* remove the victim from any queues it may be in. */
    if (victim_ptr->STATE == READY) {
        if (victim_ptr != kernel_data->ACTIVE_PTR) {
   11cc2:	69e8      	ldr	r0, [r5, #28]
   11cc4:	42b0      	cmp	r0, r6
   11cc6:	d088      	beq.n	11bda <_task_destroy+0x86>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:844
            /* Remove other task from ready queue */
            _QUEUE_UNLINK(victim_ptr);
   11cc8:	6872      	ldr	r2, [r6, #4]
   11cca:	6833      	ldr	r3, [r6, #0]
   11ccc:	6013      	str	r3, [r2, #0]
   11cce:	605a      	str	r2, [r3, #4]
   11cd0:	e783      	b.n	11bda <_task_destroy+0x86>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:935

    /* Start SPR P171-0017-01                */
    /* Remove td from linked list of all tds */
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
        /* Destroying the last task */
        kernel_data->TASK_NUMBER   = 1;
   11cd2:	23e0      	movs	r3, #224	; 0xe0
   11cd4:	50ea      	str	r2, [r5, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:936
        kernel_data->INSERT_TD_PTR = NULL;
   11cd6:	2000      	movs	r0, #0
   11cd8:	23e4      	movs	r3, #228	; 0xe4
   11cda:	50e8      	str	r0, [r5, r3]
   11cdc:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
   11cde:	e79e      	b.n	11c1e <_task_destroy+0xca>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:833
    _int_disable();

    if (victim_ptr->STATE == DYING) {
        /* Task is already being destroyed */
        /* SPR P171-0021-01 re-enable interrupts */
        _int_enable();
   11ce0:	f7ff fab2 	bl	11248 <_int_enable>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:835
        /* END SPR */
        _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
   11ce4:	1c38      	adds	r0, r7, #0
   11ce6:	f7ff fcbb 	bl	11660 <_lwsem_post>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:837
        _KLOGX2(KLOG_task_destroy, MQX_OK);
        return MQX_OK;
   11cea:	2000      	movs	r0, #0
   11cec:	e741      	b.n	11b72 <_task_destroy+0x1e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:951
    /* Free up create/destroy for other tasks */
    _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);

    if (victim_ptr == td_ptr) {
        /* We are destroying the current task */
        _int_disable();
   11cee:	f7ff fa9f 	bl	11230 <_int_disable>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:952
        _QUEUE_UNLINK(victim_ptr);  /* Remove myself from the ready queue */
   11cf2:	6872      	ldr	r2, [r6, #4]
   11cf4:	6833      	ldr	r3, [r6, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:963
                _mem_free(victim_ptr->FLOAT_CONTEXT_PTR);
                victim_ptr->FLOAT_CONTEXT_PTR = NULL;
            }
        }
#endif /* MQX_LITE_VERSION_NUMBER */
        _psp_destroy_stack_frame(victim_ptr);
   11cf6:	1c30      	adds	r0, r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:952
    _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);

    if (victim_ptr == td_ptr) {
        /* We are destroying the current task */
        _int_disable();
        _QUEUE_UNLINK(victim_ptr);  /* Remove myself from the ready queue */
   11cf8:	6013      	str	r3, [r2, #0]
   11cfa:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:963
                _mem_free(victim_ptr->FLOAT_CONTEXT_PTR);
                victim_ptr->FLOAT_CONTEXT_PTR = NULL;
            }
        }
#endif /* MQX_LITE_VERSION_NUMBER */
        _psp_destroy_stack_frame(victim_ptr);
   11cfc:	f7ff fa68 	bl	111d0 <_psp_destroy_stack_frame>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:976
            _mem_transfer_internal(victim_ptr, SYSTEM_TD_PTR(kernel_data));
            _mem_free(victim_ptr);   /* Free the task descriptor */
        } /* Endif */
#endif /* MQX_LITE_VERSION_NUMBER */
        /* Now we must jump to the scheduler */
        _sched_run_internal();   /* WILL NEVER RETURN FROM HERE */
   11d00:	f003 fd17 	bl	15732 <_sched_run_internal>
   11d04:	e795      	b.n	11c32 <_task_destroy+0xde>
   11d06:	46c0      	nop			; (mov r8, r8)
   11d08:	1fffe000 	.word	0x1fffe000
   11d0c:	fffffeff 	.word	0xfffffeff

00011d10 <_task_set_error>:
_task_set_error():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2830
{ /* Body */
#if MQX_TD_HAS_ERROR_CODE
    register KERNEL_DATA_STRUCT_PTR  kernel_data;
    register _mqx_uint               old_error_code;

    _GET_KERNEL_DATA(kernel_data);
   11d10:	4b0b      	ldr	r3, [pc, #44]	; (11d40 <_task_set_error+0x30>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2825
 */
_mqx_uint _task_set_error
(
    _mqx_uint new_error_code
)
{ /* Body */
   11d12:	1c01      	adds	r1, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2830
#if MQX_TD_HAS_ERROR_CODE
    register KERNEL_DATA_STRUCT_PTR  kernel_data;
    register _mqx_uint               old_error_code;

    _GET_KERNEL_DATA(kernel_data);
   11d14:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2835

    _KLOGE2(KLOG_task_set_error, new_error_code);

    /* get the old value */
    if (kernel_data->IN_ISR)
   11d16:	8b1a      	ldrh	r2, [r3, #24]
   11d18:	2a00      	cmp	r2, #0
   11d1a:	d00a      	beq.n	11d32 <_task_set_error+0x22>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2837
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
   11d1c:	6b58      	ldr	r0, [r3, #52]	; 0x34
   11d1e:	68c0      	ldr	r0, [r0, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   11d20:	2900      	cmp	r1, #0
   11d22:	d001      	beq.n	11d28 <_task_set_error+0x18>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844 (discriminator 1)
   11d24:	2800      	cmp	r0, #0
   11d26:	d103      	bne.n	11d30 <_task_set_error+0x20>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2846
    {
        if (kernel_data->IN_ISR)
   11d28:	2a00      	cmp	r2, #0
   11d2a:	d105      	bne.n	11d38 <_task_set_error+0x28>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2852
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
        }
        else
        {
            kernel_data->ACTIVE_PTR->TASK_ERROR_CODE = new_error_code;
   11d2c:	69db      	ldr	r3, [r3, #28]
   11d2e:	6599      	str	r1, [r3, #88]	; 0x58
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2862
    return( old_error_code );
#else
    return MQX_OK;
#endif

}
   11d30:	4770      	bx	lr
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2841
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
    }
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
   11d32:	69d8      	ldr	r0, [r3, #28]
   11d34:	6d80      	ldr	r0, [r0, #88]	; 0x58
   11d36:	e7f3      	b.n	11d20 <_task_set_error+0x10>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2848

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
    {
        if (kernel_data->IN_ISR)
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
   11d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   11d3a:	60d9      	str	r1, [r3, #12]
   11d3c:	e7f8      	b.n	11d30 <_task_set_error+0x20>
   11d3e:	46c0      	nop			; (mov r8, r8)
   11d40:	1fffe000 	.word	0x1fffe000

00011d44 <_task_init_internal>:
_task_init_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3087
    uint_32                  create_parameter,
    boolean                  dynamic,
    pointer                  input_stack_ptr,
    _mem_size                input_stack_size
)
{ /* Body */
   11d44:	b5f0      	push	{r4, r5, r6, r7, lr}
   11d46:	4656      	mov	r6, sl
   11d48:	465f      	mov	r7, fp
   11d4a:	464d      	mov	r5, r9
   11d4c:	4644      	mov	r4, r8
   11d4e:	b4f0      	push	{r4, r5, r6, r7}
   11d50:	4698      	mov	r8, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3100

    char_ptr                 stack_ptr;
    _mqx_uint                stack_size;
    _mqx_uint                td_size;

    _GET_KERNEL_DATA(kernel_data);
   11d52:	4b9c      	ldr	r3, [pc, #624]	; (11fc4 <_task_init_internal+0x280>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3087
    uint_32                  create_parameter,
    boolean                  dynamic,
    pointer                  input_stack_ptr,
    _mem_size                input_stack_size
)
{ /* Body */
   11d54:	b089      	sub	sp, #36	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3100

    char_ptr                 stack_ptr;
    _mqx_uint                stack_size;
    _mqx_uint                td_size;

    _GET_KERNEL_DATA(kernel_data);
   11d56:	681e      	ldr	r6, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3103

#if MQX_CHECK_ERRORS
    if (template_ptr->TASK_PRIORITY > kernel_data->LOWEST_TASK_PRIORITY)
   11d58:	23d0      	movs	r3, #208	; 0xd0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3087
    uint_32                  create_parameter,
    boolean                  dynamic,
    pointer                  input_stack_ptr,
    _mem_size                input_stack_size
)
{ /* Body */
   11d5a:	9005      	str	r0, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3103
    _mqx_uint                td_size;

    _GET_KERNEL_DATA(kernel_data);

#if MQX_CHECK_ERRORS
    if (template_ptr->TASK_PRIORITY > kernel_data->LOWEST_TASK_PRIORITY)
   11d5c:	58f3      	ldr	r3, [r6, r3]
   11d5e:	68c0      	ldr	r0, [r0, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3087
    uint_32                  create_parameter,
    boolean                  dynamic,
    pointer                  input_stack_ptr,
    _mem_size                input_stack_size
)
{ /* Body */
   11d60:	468a      	mov	sl, r1
   11d62:	4691      	mov	r9, r2
   11d64:	9f12      	ldr	r7, [sp, #72]	; 0x48
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3103
    _mqx_uint                td_size;

    _GET_KERNEL_DATA(kernel_data);

#if MQX_CHECK_ERRORS
    if (template_ptr->TASK_PRIORITY > kernel_data->LOWEST_TASK_PRIORITY)
   11d66:	4298      	cmp	r0, r3
   11d68:	d906      	bls.n	11d78 <_task_init_internal+0x34>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3106
    {
#if MQX_USE_IDLE_TASK
        if (template_ptr != &kernel_data->IDLE_TASK_TEMPLATE)
   11d6a:	2187      	movs	r1, #135	; 0x87
   11d6c:	0089      	lsls	r1, r1, #2
   11d6e:	9d05      	ldr	r5, [sp, #20]
   11d70:	1873      	adds	r3, r6, r1
   11d72:	429d      	cmp	r5, r3
   11d74:	d000      	beq.n	11d78 <_task_init_internal+0x34>
   11d76:	e0ab      	b.n	11ed0 <_task_init_internal+0x18c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3127
     * must be no smaller than a specified minimum, and it
     * is made to be a multiple of longwords. The space allocated
     * for the stack includes the specified stacksize and the
     * overhead required by the kernel.
     */
    if (input_stack_ptr)
   11d78:	2f00      	cmp	r7, #0
   11d7a:	d100      	bne.n	11d7e <_task_init_internal+0x3a>
   11d7c:	e0bd      	b.n	11efa <_task_init_internal+0x1b6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3132
    {
        /* force stack size, ignore stack size from template */
        stack_size = input_stack_size;
#if MQX_CHECK_ERRORS
        if (stack_size <= (PSP_MINSTACKSIZE+sizeof(TD_STRUCT)))
   11d7e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11d80:	238c      	movs	r3, #140	; 0x8c
   11d82:	005b      	lsls	r3, r3, #1
   11d84:	429a      	cmp	r2, r3
   11d86:	d800      	bhi.n	11d8a <_task_init_internal+0x46>
   11d88:	e102      	b.n	11f90 <_task_init_internal+0x24c>
_task_alloc_td_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3525
    uint_16                  task_num;

    _GET_KERNEL_DATA(kernel_data);

#if MQX_CHECK_ERRORS
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) >= (MAX_UINT_16-1))
   11d8a:	1c34      	adds	r4, r6, #0
   11d8c:	34d4      	adds	r4, #212	; 0xd4
   11d8e:	8922      	ldrh	r2, [r4, #8]
   11d90:	4b8d      	ldr	r3, [pc, #564]	; (11fc8 <_task_init_internal+0x284>)
   11d92:	429a      	cmp	r2, r3
   11d94:	d900      	bls.n	11d98 <_task_init_internal+0x54>
   11d96:	e106      	b.n	11fa6 <_task_init_internal+0x262>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3549


    if (input_stack_ptr)
    {
        new_td_ptr = (TD_STRUCT_PTR)input_stack_ptr;
        _mem_zero((pointer)new_td_ptr, extra);
   11d98:	1c38      	adds	r0, r7, #0
   11d9a:	217c      	movs	r1, #124	; 0x7c
   11d9c:	f7ff f8ba 	bl	10f14 <_mem_zero>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3600
        new_td_ptr->TOS_RESERVED = ((uchar_ptr) new_td_ptr) + tos_offset;
    } /* Endif */
#endif

    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
   11da0:	23e0      	movs	r3, #224	; 0xe0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3602
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);
   11da2:	20ae      	movs	r0, #174	; 0xae
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3600
        new_td_ptr->TOS_RESERVED = ((uchar_ptr) new_td_ptr) + tos_offset;
    } /* Endif */
#endif

    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
   11da4:	58f3      	ldr	r3, [r6, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3602
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);
   11da6:	0040      	lsls	r0, r0, #1
   11da8:	5830      	ldr	r0, [r6, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3600
        new_td_ptr->TOS_RESERVED = ((uchar_ptr) new_td_ptr) + tos_offset;
    } /* Endif */
#endif

    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
   11daa:	b299      	uxth	r1, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3601
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
   11dac:	22e4      	movs	r2, #228	; 0xe4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3602
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);
   11dae:	041b      	lsls	r3, r3, #16
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3601
    } /* Endif */
#endif

    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
   11db0:	58b2      	ldr	r2, [r6, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3602
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);
   11db2:	0c1b      	lsrs	r3, r3, #16
   11db4:	0400      	lsls	r0, r0, #16
   11db6:	4303      	orrs	r3, r0
   11db8:	60fb      	str	r3, [r7, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3610
    {
        q_ptr = (QUEUE_ELEMENT_STRUCT_PTR)((pointer)&kernel_data->TD_LIST);
    }
    else
    {
        q_ptr = &insert_td_ptr->TD_LIST_INFO;
   11dba:	1c13      	adds	r3, r2, #0
   11dbc:	3368      	adds	r3, #104	; 0x68
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3604
    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);

    if (!insert_td_ptr)
   11dbe:	2a00      	cmp	r2, #0
   11dc0:	d100      	bne.n	11dc4 <_task_init_internal+0x80>
   11dc2:	e090      	b.n	11ee6 <_task_init_internal+0x1a2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3613
    else
    {
        q_ptr = &insert_td_ptr->TD_LIST_INFO;
    } /* Endif */

    _QUEUE_INSERT(&kernel_data->TD_LIST, q_ptr, &new_td_ptr->TD_LIST_INFO);
   11dc4:	681a      	ldr	r2, [r3, #0]
   11dc6:	1c38      	adds	r0, r7, #0
   11dc8:	3068      	adds	r0, #104	; 0x68
   11dca:	66ba      	str	r2, [r7, #104]	; 0x68
   11dcc:	6018      	str	r0, [r3, #0]
   11dce:	66fb      	str	r3, [r7, #108]	; 0x6c
   11dd0:	6050      	str	r0, [r2, #4]
   11dd2:	8923      	ldrh	r3, [r4, #8]
   11dd4:	1c38      	adds	r0, r7, #0
   11dd6:	3301      	adds	r3, #1
   11dd8:	8123      	strh	r3, [r4, #8]
   11dda:	9d05      	ldr	r5, [sp, #20]
   11ddc:	e003      	b.n	11de6 <_task_init_internal+0xa2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3627
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
        prev_td_ptr   = next_td_ptr;
        INC_TASK_NUMBER(task_num);
    } while( ((pointer)next_td_ptr != ((pointer)&kernel_data->TD_LIST)) &&
                    (TASK_NUMBER_FROM_TASKID(next_td_ptr->TASK_ID) == task_num) );
   11dde:	8999      	ldrh	r1, [r3, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3626
    {
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
        prev_td_ptr   = next_td_ptr;
        INC_TASK_NUMBER(task_num);
    } while( ((pointer)next_td_ptr != ((pointer)&kernel_data->TD_LIST)) &&
   11de0:	4291      	cmp	r1, r2
   11de2:	d109      	bne.n	11df8 <_task_init_internal+0xb4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3624
    prev_td_ptr = new_td_ptr;
    do
    {
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
        prev_td_ptr   = next_td_ptr;
   11de4:	1c18      	adds	r0, r3, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3623
     */
    prev_td_ptr = new_td_ptr;
    do
    {
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
   11de6:	6e83      	ldr	r3, [r0, #104]	; 0x68
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3625
        prev_td_ptr   = next_td_ptr;
        INC_TASK_NUMBER(task_num);
   11de8:	1c4a      	adds	r2, r1, #1
   11dea:	b292      	uxth	r2, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3623
     */
    prev_td_ptr = new_td_ptr;
    do
    {
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
   11dec:	3b68      	subs	r3, #104	; 0x68
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3625
        prev_td_ptr   = next_td_ptr;
        INC_TASK_NUMBER(task_num);
   11dee:	2a00      	cmp	r2, #0
   11df0:	d100      	bne.n	11df4 <_task_init_internal+0xb0>
   11df2:	2201      	movs	r2, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3627
    } while( ((pointer)next_td_ptr != ((pointer)&kernel_data->TD_LIST)) &&
                    (TASK_NUMBER_FROM_TASKID(next_td_ptr->TASK_ID) == task_num) );
   11df4:	42a3      	cmp	r3, r4
   11df6:	d1f2      	bne.n	11dde <_task_init_internal+0x9a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3629

    kernel_data->INSERT_TD_PTR = insert_td_ptr;
   11df8:	23e4      	movs	r3, #228	; 0xe4
   11dfa:	50f0      	str	r0, [r6, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3630
    kernel_data->TASK_NUMBER   = task_num;
   11dfc:	23e0      	movs	r3, #224	; 0xe0
   11dfe:	9505      	str	r5, [sp, #20]
   11e00:	50f2      	str	r2, [r6, r3]
   11e02:	1c3c      	adds	r4, r7, #0
_task_init_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3139
            _task_set_error(MQX_INVALID_SIZE);
            return(NULL);
        } /* Endif */
#endif
        td_ptr = _task_alloc_td_internal(stack_size, &td_size, input_stack_ptr, template_ptr->TASK_ATTRIBUTES & MQX_USER_TASK);
        stack_size -= td_size;
   11e04:	9913      	ldr	r1, [sp, #76]	; 0x4c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3141

        if (dynamic)
   11e06:	4642      	mov	r2, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3139
            _task_set_error(MQX_INVALID_SIZE);
            return(NULL);
        } /* Endif */
#endif
        td_ptr = _task_alloc_td_internal(stack_size, &td_size, input_stack_ptr, template_ptr->TASK_ATTRIBUTES & MQX_USER_TASK);
        stack_size -= td_size;
   11e08:	397c      	subs	r1, #124	; 0x7c
   11e0a:	9102      	str	r1, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3141

        if (dynamic)
   11e0c:	2a00      	cmp	r2, #0
   11e0e:	d151      	bne.n	11eb4 <_task_init_internal+0x170>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3188
    } /* Endif */
#endif
    td_ptr->STATE = BLOCKED;

    /* get begin of new stack */
    if (td_ptr->STACK_ALLOC_BLOCK)
   11e10:	6f62      	ldr	r2, [r4, #116]	; 0x74
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3185
    {
        _task_set_error(MQX_OUT_OF_TASK_DESCRIPTORS);
        return (NULL);
    } /* Endif */
#endif
    td_ptr->STATE = BLOCKED;
   11e12:	2303      	movs	r3, #3
   11e14:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3188

    /* get begin of new stack */
    if (td_ptr->STACK_ALLOC_BLOCK)
   11e16:	4694      	mov	ip, r2
   11e18:	2a00      	cmp	r2, #0
   11e1a:	d054      	beq.n	11ec6 <_task_init_internal+0x182>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3202
        /* stack start in provided block behind TD */
        stack_ptr = (char *)td_ptr + td_size;
        td_ptr->STACK_ALLOC_BLOCK = stack_ptr;
    }

    if (dynamic)
   11e1c:	4640      	mov	r0, r8
   11e1e:	2800      	cmp	r0, #0
   11e20:	d135      	bne.n	11e8e <_task_init_internal+0x14a>
_task_fill_stack_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3339
    _mqx_uint_ptr addr_ptr,
    _mqx_uint     size
)
{ /* Body */

    size = (size/sizeof(_mqx_uint)) + 1;  /* Calculate # _mqx_uints */
   11e22:	9a02      	ldr	r2, [sp, #8]
   11e24:	4660      	mov	r0, ip
   11e26:	0893      	lsrs	r3, r2, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3340
    while (--size)
   11e28:	d007      	beq.n	11e3a <_task_init_internal+0xf6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3342
    {
        *addr_ptr++ = MQX_STACK_MONITOR_VALUE;
   11e2a:	4968      	ldr	r1, [pc, #416]	; (11fcc <_task_init_internal+0x288>)
   11e2c:	9d05      	ldr	r5, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3340
    _mqx_uint     size
)
{ /* Body */

    size = (size/sizeof(_mqx_uint)) + 1;  /* Calculate # _mqx_uints */
    while (--size)
   11e2e:	3b01      	subs	r3, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3342
    {
        *addr_ptr++ = MQX_STACK_MONITOR_VALUE;
   11e30:	c002      	stmia	r0!, {r1}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3340
    _mqx_uint     size
)
{ /* Body */

    size = (size/sizeof(_mqx_uint)) + 1;  /* Calculate # _mqx_uints */
    while (--size)
   11e32:	2b00      	cmp	r3, #0
   11e34:	d1fb      	bne.n	11e2e <_task_init_internal+0xea>
   11e36:	9202      	str	r2, [sp, #8]
   11e38:	9505      	str	r5, [sp, #20]
_task_init_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3226
     *                          8
     *                        ...
     *     highest priority     0
     * With the READY_Q_LIST pointer pointing to the highest priority queue
     */
    ready_q_ptr = kernel_data->READY_Q_LIST - template_ptr->TASK_PRIORITY;
   11e3a:	9b05      	ldr	r3, [sp, #20]
   11e3c:	6a31      	ldr	r1, [r6, #32]
   11e3e:	68db      	ldr	r3, [r3, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3232
    td_ptr->MY_QUEUE = ready_q_ptr;
#if MQX_HAS_DYNAMIC_PRIORITIES
    td_ptr->HOME_QUEUE  = ready_q_ptr;
#endif
    td_ptr->TASK_SR     = ready_q_ptr->ENABLE_SR;
    td_ptr->FLAGS       = template_ptr->TASK_ATTRIBUTES;
   11e40:	9d05      	ldr	r5, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3226
     *                          8
     *                        ...
     *     highest priority     0
     * With the READY_Q_LIST pointer pointing to the highest priority queue
     */
    ready_q_ptr = kernel_data->READY_Q_LIST - template_ptr->TASK_PRIORITY;
   11e42:	9303      	str	r3, [sp, #12]
   11e44:	011b      	lsls	r3, r3, #4
   11e46:	1acb      	subs	r3, r1, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3227
    td_ptr->MY_QUEUE = ready_q_ptr;
   11e48:	61e3      	str	r3, [r4, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3229
#if MQX_HAS_DYNAMIC_PRIORITIES
    td_ptr->HOME_QUEUE  = ready_q_ptr;
   11e4a:	6223      	str	r3, [r4, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3231
#endif
    td_ptr->TASK_SR     = ready_q_ptr->ENABLE_SR;
   11e4c:	899b      	ldrh	r3, [r3, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3232
    td_ptr->FLAGS       = template_ptr->TASK_ATTRIBUTES;
   11e4e:	6969      	ldr	r1, [r5, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3231
    ready_q_ptr = kernel_data->READY_Q_LIST - template_ptr->TASK_PRIORITY;
    td_ptr->MY_QUEUE = ready_q_ptr;
#if MQX_HAS_DYNAMIC_PRIORITIES
    td_ptr->HOME_QUEUE  = ready_q_ptr;
#endif
    td_ptr->TASK_SR     = ready_q_ptr->ENABLE_SR;
   11e50:	84a3      	strh	r3, [r4, #36]	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3245

#if MQX_SAVE_FP_ALWAYS
    td_ptr->FLAGS |= MQX_FLOATING_POINT_TASK;
#endif /* MQX_SAVE_FP_ALWAYS */

    if (input_stack_ptr)
   11e52:	2f00      	cmp	r7, #0
   11e54:	d001      	beq.n	11e5a <_task_init_internal+0x116>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3247
    {
        td_ptr->FLAGS |= TASK_STACK_PREALLOCATED;
   11e56:	2020      	movs	r0, #32
   11e58:	4301      	orrs	r1, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3251
    } /* Endif */

    /* create stack frame - initialize stack parameters in TD and stack itself (registers required by scheduller, etc.) */
    if (FALSE == _psp_build_stack_frame(td_ptr, stack_ptr, stack_size, template_ptr, (_mqx_uint)ready_q_ptr->ENABLE_SR, create_parameter))
   11e5a:	4648      	mov	r0, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3247
    td_ptr->FLAGS |= MQX_FLOATING_POINT_TASK;
#endif /* MQX_SAVE_FP_ALWAYS */

    if (input_stack_ptr)
    {
        td_ptr->FLAGS |= TASK_STACK_PREALLOCATED;
   11e5c:	62a1      	str	r1, [r4, #40]	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3251
    } /* Endif */

    /* create stack frame - initialize stack parameters in TD and stack itself (registers required by scheduller, etc.) */
    if (FALSE == _psp_build_stack_frame(td_ptr, stack_ptr, stack_size, template_ptr, (_mqx_uint)ready_q_ptr->ENABLE_SR, create_parameter))
   11e5e:	9a02      	ldr	r2, [sp, #8]
   11e60:	9300      	str	r3, [sp, #0]
   11e62:	9001      	str	r0, [sp, #4]
   11e64:	4661      	mov	r1, ip
   11e66:	1c20      	adds	r0, r4, #0
   11e68:	9b05      	ldr	r3, [sp, #20]
   11e6a:	f7ff f98f 	bl	1118c <_psp_build_stack_frame>
   11e6e:	2800      	cmp	r0, #0
   11e70:	d041      	beq.n	11ef6 <_task_init_internal+0x1b2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3260
    }


    /* Initialize the task's task descriptor. */
#if MQX_TD_HAS_TASK_TEMPLATE_PTR
    td_ptr->TASK_TEMPLATE_PTR = template_ptr;
   11e72:	9d05      	ldr	r5, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3299
    td_ptr->STDOUT_STREAM = kernel_data->PROCESSOR_STDOUT;
    td_ptr->STDERR_STREAM = kernel_data->PROCESSOR_STDERR;
#endif

#if MQX_TD_HAS_PARENT
    td_ptr->PARENT = creator_task_id;
   11e74:	4651      	mov	r1, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3263
    /* Initialize the task's task descriptor. */
#if MQX_TD_HAS_TASK_TEMPLATE_PTR
    td_ptr->TASK_TEMPLATE_PTR = template_ptr;
#endif
#if MQX_TD_HAS_TEMPLATE_INDEX
    td_ptr->TEMPLATE_INDEX    = template_ptr->TASK_TEMPLATE_INDEX;
   11e76:	6828      	ldr	r0, [r5, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3260
    }


    /* Initialize the task's task descriptor. */
#if MQX_TD_HAS_TASK_TEMPLATE_PTR
    td_ptr->TASK_TEMPLATE_PTR = template_ptr;
   11e78:	6665      	str	r5, [r4, #100]	; 0x64
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3263
#endif
#if MQX_TD_HAS_TEMPLATE_INDEX
    td_ptr->TEMPLATE_INDEX    = template_ptr->TASK_TEMPLATE_INDEX;
   11e7a:	6620      	str	r0, [r4, #96]	; 0x60
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3299
    td_ptr->STDOUT_STREAM = kernel_data->PROCESSOR_STDOUT;
    td_ptr->STDERR_STREAM = kernel_data->PROCESSOR_STDERR;
#endif

#if MQX_TD_HAS_PARENT
    td_ptr->PARENT = creator_task_id;
   11e7c:	65e1      	str	r1, [r4, #92]	; 0x5c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3319
        _mem_transfer_internal(td_ptr, td_ptr);
        _mem_transfer_internal(td_ptr->STACK_ALLOC_BLOCK, td_ptr);
    } /* Endif */
#endif /* MQX_LITE_VERSION_NUMBER */

    return (td_ptr);
   11e7e:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3321

} /* Endbody */
   11e80:	b009      	add	sp, #36	; 0x24
   11e82:	bc3c      	pop	{r2, r3, r4, r5}
   11e84:	4690      	mov	r8, r2
   11e86:	4699      	mov	r9, r3
   11e88:	46a2      	mov	sl, r4
   11e8a:	46ab      	mov	fp, r5
   11e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3207
    if (dynamic)
    {
        /* task is creating from temporary template, store template before stack (in stack allocated memory) */
        new_template_ptr = (pointer)stack_ptr;
        stack_ptr +=  sizeof(TASK_TEMPLATE_STRUCT);
        *new_template_ptr = *template_ptr;
   11e8e:	9d05      	ldr	r5, [sp, #20]
   11e90:	4663      	mov	r3, ip
   11e92:	cd07      	ldmia	r5!, {r0, r1, r2}
   11e94:	c307      	stmia	r3!, {r0, r1, r2}
   11e96:	cd07      	ldmia	r5!, {r0, r1, r2}
   11e98:	c307      	stmia	r3!, {r0, r1, r2}
   11e9a:	682d      	ldr	r5, [r5, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3209
        template_ptr = new_template_ptr;
        template_ptr->TASK_TEMPLATE_INDEX |= SYSTEM_TASK_FLAG;
   11e9c:	4660      	mov	r0, ip
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3207
    if (dynamic)
    {
        /* task is creating from temporary template, store template before stack (in stack allocated memory) */
        new_template_ptr = (pointer)stack_ptr;
        stack_ptr +=  sizeof(TASK_TEMPLATE_STRUCT);
        *new_template_ptr = *template_ptr;
   11e9e:	601d      	str	r5, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3209
        template_ptr = new_template_ptr;
        template_ptr->TASK_TEMPLATE_INDEX |= SYSTEM_TASK_FLAG;
   11ea0:	6800      	ldr	r0, [r0, #0]
   11ea2:	2380      	movs	r3, #128	; 0x80
   11ea4:	061b      	lsls	r3, r3, #24
   11ea6:	4661      	mov	r1, ip
   11ea8:	4303      	orrs	r3, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3206

    if (dynamic)
    {
        /* task is creating from temporary template, store template before stack (in stack allocated memory) */
        new_template_ptr = (pointer)stack_ptr;
        stack_ptr +=  sizeof(TASK_TEMPLATE_STRUCT);
   11eaa:	201c      	movs	r0, #28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3209
        *new_template_ptr = *template_ptr;
        template_ptr = new_template_ptr;
        template_ptr->TASK_TEMPLATE_INDEX |= SYSTEM_TASK_FLAG;
   11eac:	600b      	str	r3, [r1, #0]
   11eae:	9105      	str	r1, [sp, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3206

    if (dynamic)
    {
        /* task is creating from temporary template, store template before stack (in stack allocated memory) */
        new_template_ptr = (pointer)stack_ptr;
        stack_ptr +=  sizeof(TASK_TEMPLATE_STRUCT);
   11eb0:	4484      	add	ip, r0
   11eb2:	e7b6      	b.n	11e22 <_task_init_internal+0xde>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3143
        td_ptr = _task_alloc_td_internal(stack_size, &td_size, input_stack_ptr, template_ptr->TASK_ATTRIBUTES & MQX_USER_TASK);
        stack_size -= td_size;

        if (dynamic)
        {
            stack_size -=  sizeof(TASK_TEMPLATE_STRUCT);
   11eb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3188
    } /* Endif */
#endif
    td_ptr->STATE = BLOCKED;

    /* get begin of new stack */
    if (td_ptr->STACK_ALLOC_BLOCK)
   11eb6:	6f62      	ldr	r2, [r4, #116]	; 0x74
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3143
        td_ptr = _task_alloc_td_internal(stack_size, &td_size, input_stack_ptr, template_ptr->TASK_ATTRIBUTES & MQX_USER_TASK);
        stack_size -= td_size;

        if (dynamic)
        {
            stack_size -=  sizeof(TASK_TEMPLATE_STRUCT);
   11eb8:	3b98      	subs	r3, #152	; 0x98
   11eba:	9302      	str	r3, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3185
    {
        _task_set_error(MQX_OUT_OF_TASK_DESCRIPTORS);
        return (NULL);
    } /* Endif */
#endif
    td_ptr->STATE = BLOCKED;
   11ebc:	2303      	movs	r3, #3
   11ebe:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3188

    /* get begin of new stack */
    if (td_ptr->STACK_ALLOC_BLOCK)
   11ec0:	4694      	mov	ip, r2
   11ec2:	2a00      	cmp	r2, #0
   11ec4:	d1aa      	bne.n	11e1c <_task_init_internal+0xd8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3198
    }
    else
    {
        /* (this will be executed if user provide input_stack_size) */
        /* stack start in provided block behind TD */
        stack_ptr = (char *)td_ptr + td_size;
   11ec6:	257c      	movs	r5, #124	; 0x7c
   11ec8:	192d      	adds	r5, r5, r4
   11eca:	46ac      	mov	ip, r5
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3199
        td_ptr->STACK_ALLOC_BLOCK = stack_ptr;
   11ecc:	6765      	str	r5, [r4, #116]	; 0x74
   11ece:	e7a5      	b.n	11e1c <_task_init_internal+0xd8>
_task_set_error():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2835
    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_task_set_error, new_error_code);

    /* get the old value */
    if (kernel_data->IN_ISR)
   11ed0:	8b33      	ldrh	r3, [r6, #24]
   11ed2:	2b00      	cmp	r3, #0
   11ed4:	d009      	beq.n	11eea <_task_init_internal+0x1a6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2837
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
   11ed6:	6b73      	ldr	r3, [r6, #52]	; 0x34
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   11ed8:	68d8      	ldr	r0, [r3, #12]
   11eda:	2800      	cmp	r0, #0
   11edc:	d10b      	bne.n	11ef6 <_task_init_internal+0x1b2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2848
    {
        if (kernel_data->IN_ISR)
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
   11ede:	220e      	movs	r2, #14
   11ee0:	60da      	str	r2, [r3, #12]
_task_init_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3111
        if (template_ptr != &kernel_data->IDLE_TASK_TEMPLATE)
        {
#endif /* MQX_USE_IDLE_TASK */

            _task_set_error(MQX_INVALID_TASK_PRIORITY);
            return (NULL);
   11ee2:	2000      	movs	r0, #0
   11ee4:	e7cc      	b.n	11e80 <_task_init_internal+0x13c>
_task_alloc_td_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3606
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);

    if (!insert_td_ptr)
    {
        q_ptr = (QUEUE_ELEMENT_STRUCT_PTR)((pointer)&kernel_data->TD_LIST);
   11ee6:	1c23      	adds	r3, r4, #0
   11ee8:	e76c      	b.n	11dc4 <_task_init_internal+0x80>
_task_set_error():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2841
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
    }
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
   11eea:	69f3      	ldr	r3, [r6, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   11eec:	6d99      	ldr	r1, [r3, #88]	; 0x58
   11eee:	2900      	cmp	r1, #0
   11ef0:	d101      	bne.n	11ef6 <_task_init_internal+0x1b2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2852
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
        }
        else
        {
            kernel_data->ACTIVE_PTR->TASK_ERROR_CODE = new_error_code;
   11ef2:	220e      	movs	r2, #14
   11ef4:	659a      	str	r2, [r3, #88]	; 0x58
_task_init_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3111
        if (template_ptr != &kernel_data->IDLE_TASK_TEMPLATE)
        {
#endif /* MQX_USE_IDLE_TASK */

            _task_set_error(MQX_INVALID_TASK_PRIORITY);
            return (NULL);
   11ef6:	2000      	movs	r0, #0
   11ef8:	e7c2      	b.n	11e80 <_task_init_internal+0x13c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3150

    }
    else
    {
        /* take stack size from template */
        stack_size = template_ptr->TASK_STACKSIZE;
   11efa:	9d05      	ldr	r5, [sp, #20]
   11efc:	68aa      	ldr	r2, [r5, #8]
   11efe:	2a9c      	cmp	r2, #156	; 0x9c
   11f00:	d200      	bcs.n	11f04 <_task_init_internal+0x1c0>
   11f02:	229c      	movs	r2, #156	; 0x9c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3158
        {
            stack_size = PSP_MINSTACKSIZE;
        } /* Endif */
#endif
        /* Make the size a multiple of the memory alignment */
        _STACK_ALIGN_VAL_LARGER(stack_size);
   11f04:	230f      	movs	r3, #15
   11f06:	320f      	adds	r2, #15
   11f08:	439a      	bics	r2, r3
_task_alloc_td_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3525
    uint_16                  task_num;

    _GET_KERNEL_DATA(kernel_data);

#if MQX_CHECK_ERRORS
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) >= (MAX_UINT_16-1))
   11f0a:	1c34      	adds	r4, r6, #0
_task_init_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3158
        {
            stack_size = PSP_MINSTACKSIZE;
        } /* Endif */
#endif
        /* Make the size a multiple of the memory alignment */
        _STACK_ALIGN_VAL_LARGER(stack_size);
   11f0c:	9202      	str	r2, [sp, #8]
_task_alloc_td_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3525
    uint_16                  task_num;

    _GET_KERNEL_DATA(kernel_data);

#if MQX_CHECK_ERRORS
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) >= (MAX_UINT_16-1))
   11f0e:	34d4      	adds	r4, #212	; 0xd4
   11f10:	8920      	ldrh	r0, [r4, #8]
   11f12:	4b2d      	ldr	r3, [pc, #180]	; (11fc8 <_task_init_internal+0x284>)
   11f14:	4683      	mov	fp, r0
   11f16:	4298      	cmp	r0, r3
   11f18:	d851      	bhi.n	11fbe <_task_init_internal+0x27a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3600
        new_td_ptr->TOS_RESERVED = ((uchar_ptr) new_td_ptr) + tos_offset;
    } /* Endif */
#endif

    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
   11f1a:	23e0      	movs	r3, #224	; 0xe0
   11f1c:	58f3      	ldr	r3, [r6, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3601
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
   11f1e:	20e4      	movs	r0, #228	; 0xe4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3600
        new_td_ptr->TOS_RESERVED = ((uchar_ptr) new_td_ptr) + tos_offset;
    } /* Endif */
#endif

    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
   11f20:	b299      	uxth	r1, r3
   11f22:	9106      	str	r1, [sp, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3602
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);
   11f24:	21ae      	movs	r1, #174	; 0xae
   11f26:	0049      	lsls	r1, r1, #1
   11f28:	5871      	ldr	r1, [r6, r1]
   11f2a:	041b      	lsls	r3, r3, #16
   11f2c:	0c1b      	lsrs	r3, r3, #16
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3601
    } /* Endif */
#endif

    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
   11f2e:	5832      	ldr	r2, [r6, r0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3602
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);
   11f30:	0409      	lsls	r1, r1, #16
   11f32:	4319      	orrs	r1, r3
   11f34:	2300      	movs	r3, #0
   11f36:	60d9      	str	r1, [r3, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3610
    {
        q_ptr = (QUEUE_ELEMENT_STRUCT_PTR)((pointer)&kernel_data->TD_LIST);
    }
    else
    {
        q_ptr = &insert_td_ptr->TD_LIST_INFO;
   11f38:	1c11      	adds	r1, r2, #0
   11f3a:	3168      	adds	r1, #104	; 0x68
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3604
    /* Add new task to list */
    task_num = kernel_data->TASK_NUMBER;
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);

    if (!insert_td_ptr)
   11f3c:	2a00      	cmp	r2, #0
   11f3e:	d03c      	beq.n	11fba <_task_init_internal+0x276>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3613
    else
    {
        q_ptr = &insert_td_ptr->TD_LIST_INFO;
    } /* Endif */

    _QUEUE_INSERT(&kernel_data->TD_LIST, q_ptr, &new_td_ptr->TD_LIST_INFO);
   11f40:	680d      	ldr	r5, [r1, #0]
   11f42:	2300      	movs	r3, #0
   11f44:	1c28      	adds	r0, r5, #0
   11f46:	669d      	str	r5, [r3, #104]	; 0x68
   11f48:	1c1d      	adds	r5, r3, #0
   11f4a:	3568      	adds	r5, #104	; 0x68
   11f4c:	600d      	str	r5, [r1, #0]
   11f4e:	66d9      	str	r1, [r3, #108]	; 0x6c
   11f50:	4659      	mov	r1, fp
   11f52:	3101      	adds	r1, #1
   11f54:	6045      	str	r5, [r0, #4]
   11f56:	8121      	strh	r1, [r4, #8]
   11f58:	9902      	ldr	r1, [sp, #8]
   11f5a:	1c22      	adds	r2, r4, #0
   11f5c:	468c      	mov	ip, r1
   11f5e:	9d05      	ldr	r5, [sp, #20]
   11f60:	9c06      	ldr	r4, [sp, #24]
   11f62:	e003      	b.n	11f6c <_task_init_internal+0x228>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3627
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
        prev_td_ptr   = next_td_ptr;
        INC_TASK_NUMBER(task_num);
    } while( ((pointer)next_td_ptr != ((pointer)&kernel_data->TD_LIST)) &&
                    (TASK_NUMBER_FROM_TASKID(next_td_ptr->TASK_ID) == task_num) );
   11f64:	898c      	ldrh	r4, [r1, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3626
    {
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
        prev_td_ptr   = next_td_ptr;
        INC_TASK_NUMBER(task_num);
    } while( ((pointer)next_td_ptr != ((pointer)&kernel_data->TD_LIST)) &&
   11f66:	4284      	cmp	r4, r0
   11f68:	d109      	bne.n	11f7e <_task_init_internal+0x23a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3624
    prev_td_ptr = new_td_ptr;
    do
    {
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
        prev_td_ptr   = next_td_ptr;
   11f6a:	1c0b      	adds	r3, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3623
     */
    prev_td_ptr = new_td_ptr;
    do
    {
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
   11f6c:	6e99      	ldr	r1, [r3, #104]	; 0x68
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3625
        prev_td_ptr   = next_td_ptr;
        INC_TASK_NUMBER(task_num);
   11f6e:	1c60      	adds	r0, r4, #1
   11f70:	b280      	uxth	r0, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3623
     */
    prev_td_ptr = new_td_ptr;
    do
    {
        insert_td_ptr = prev_td_ptr;
        next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
   11f72:	3968      	subs	r1, #104	; 0x68
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3625
        prev_td_ptr   = next_td_ptr;
        INC_TASK_NUMBER(task_num);
   11f74:	2800      	cmp	r0, #0
   11f76:	d100      	bne.n	11f7a <_task_init_internal+0x236>
   11f78:	2001      	movs	r0, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3627
    } while( ((pointer)next_td_ptr != ((pointer)&kernel_data->TD_LIST)) &&
                    (TASK_NUMBER_FROM_TASKID(next_td_ptr->TASK_ID) == task_num) );
   11f7a:	4291      	cmp	r1, r2
   11f7c:	d1f2      	bne.n	11f64 <_task_init_internal+0x220>
   11f7e:	4661      	mov	r1, ip
   11f80:	9102      	str	r1, [sp, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3629

    kernel_data->INSERT_TD_PTR = insert_td_ptr;
   11f82:	21e4      	movs	r1, #228	; 0xe4
   11f84:	5073      	str	r3, [r6, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3630
    kernel_data->TASK_NUMBER   = task_num;
   11f86:	23e0      	movs	r3, #224	; 0xe0
   11f88:	9505      	str	r5, [sp, #20]
   11f8a:	50f0      	str	r0, [r6, r3]
_task_init_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3173
         * Allocate space for a task descriptor and stack.
         * If there is none available,
         * then indicate that the create failed.
         */
        /* function allocate task descriptor, stack and optionally increase stack block size by size required for task template (dynamic = nonzero) */
        td_ptr = _task_alloc_td_internal(dynamic ? (stack_size +  sizeof(TASK_TEMPLATE_STRUCT)) : stack_size,
   11f8c:	2400      	movs	r4, #0
   11f8e:	e73f      	b.n	11e10 <_task_init_internal+0xcc>
_task_set_error():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2835
    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_task_set_error, new_error_code);

    /* get the old value */
    if (kernel_data->IN_ISR)
   11f90:	8b33      	ldrh	r3, [r6, #24]
   11f92:	2b00      	cmp	r3, #0
   11f94:	d009      	beq.n	11faa <_task_init_internal+0x266>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2837
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
   11f96:	6b73      	ldr	r3, [r6, #52]	; 0x34
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   11f98:	68dd      	ldr	r5, [r3, #12]
   11f9a:	2d00      	cmp	r5, #0
   11f9c:	d1ab      	bne.n	11ef6 <_task_init_internal+0x1b2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2848
    {
        if (kernel_data->IN_ISR)
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
   11f9e:	2202      	movs	r2, #2
   11fa0:	60da      	str	r2, [r3, #12]
_task_init_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3135
        stack_size = input_stack_size;
#if MQX_CHECK_ERRORS
        if (stack_size <= (PSP_MINSTACKSIZE+sizeof(TD_STRUCT)))
        {
            _task_set_error(MQX_INVALID_SIZE);
            return(NULL);
   11fa2:	2000      	movs	r0, #0
   11fa4:	e76c      	b.n	11e80 <_task_init_internal+0x13c>
_task_alloc_td_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3528

#if MQX_CHECK_ERRORS
    if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) >= (MAX_UINT_16-1))
    {
        /* We already have maximum number of tasks in system */
        return NULL;
   11fa6:	2400      	movs	r4, #0
   11fa8:	e72c      	b.n	11e04 <_task_init_internal+0xc0>
_task_set_error():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2841
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
    }
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
   11faa:	69f3      	ldr	r3, [r6, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   11fac:	6d98      	ldr	r0, [r3, #88]	; 0x58
   11fae:	2800      	cmp	r0, #0
   11fb0:	d1a1      	bne.n	11ef6 <_task_init_internal+0x1b2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2852
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
        }
        else
        {
            kernel_data->ACTIVE_PTR->TASK_ERROR_CODE = new_error_code;
   11fb2:	2202      	movs	r2, #2
   11fb4:	659a      	str	r2, [r3, #88]	; 0x58
_task_init_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3135
        stack_size = input_stack_size;
#if MQX_CHECK_ERRORS
        if (stack_size <= (PSP_MINSTACKSIZE+sizeof(TD_STRUCT)))
        {
            _task_set_error(MQX_INVALID_SIZE);
            return(NULL);
   11fb6:	2000      	movs	r0, #0
   11fb8:	e762      	b.n	11e80 <_task_init_internal+0x13c>
_task_alloc_td_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3606
    insert_td_ptr = kernel_data->INSERT_TD_PTR;
    new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);

    if (!insert_td_ptr)
    {
        q_ptr = (QUEUE_ELEMENT_STRUCT_PTR)((pointer)&kernel_data->TD_LIST);
   11fba:	1c21      	adds	r1, r4, #0
   11fbc:	e7c0      	b.n	11f40 <_task_init_internal+0x1fc>
_task_init_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3173
         * Allocate space for a task descriptor and stack.
         * If there is none available,
         * then indicate that the create failed.
         */
        /* function allocate task descriptor, stack and optionally increase stack block size by size required for task template (dynamic = nonzero) */
        td_ptr = _task_alloc_td_internal(dynamic ? (stack_size +  sizeof(TASK_TEMPLATE_STRUCT)) : stack_size,
   11fbe:	2400      	movs	r4, #0
   11fc0:	e726      	b.n	11e10 <_task_init_internal+0xcc>
   11fc2:	46c0      	nop			; (mov r8, r8)
   11fc4:	1fffe000 	.word	0x1fffe000
   11fc8:	0000fffd 	.word	0x0000fffd
   11fcc:	7374616b 	.word	0x7374616b

00011fd0 <_task_create_at>:
_task_create_at():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:704
    _mqx_uint           template_index,
    uint_32             parameter,
    pointer             stack_ptr,
    _mem_size           stack_size
)
{ /* Body */
   11fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   11fd2:	4645      	mov	r5, r8
   11fd4:	4657      	mov	r7, sl
   11fd6:	464e      	mov	r6, r9
   11fd8:	b4e0      	push	{r5, r6, r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:709
    KERNEL_DATA_STRUCT_PTR kernel_data;
    TD_STRUCT_PTR          td_ptr;
    _task_id               result;

    _GET_KERNEL_DATA(kernel_data);
   11fda:	4e51      	ldr	r6, [pc, #324]	; (12120 <_task_create_at+0x150>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:704
    _mqx_uint           template_index,
    uint_32             parameter,
    pointer             stack_ptr,
    _mem_size           stack_size
)
{ /* Body */
   11fdc:	b082      	sub	sp, #8
   11fde:	1c17      	adds	r7, r2, #0
   11fe0:	4698      	mov	r8, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:709
    KERNEL_DATA_STRUCT_PTR kernel_data;
    TD_STRUCT_PTR          td_ptr;
    _task_id               result;

    _GET_KERNEL_DATA(kernel_data);
   11fe2:	6835      	ldr	r5, [r6, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:714
    _KLOGE5(KLOG_task_create_at, processor_number, template_index, parameter,
                    stack_ptr);

#if MQX_CHECK_ERRORS
    if (template_index & SYSTEM_TASK_FLAG)
   11fe4:	2900      	cmp	r1, #0
   11fe6:	da00      	bge.n	11fea <_task_create_at+0x1a>
   11fe8:	e07c      	b.n	120e4 <_task_create_at+0x114>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:724
        return MQX_NULL_TASK_ID;
    } /* Endif */
#endif

#if MQX_CHECK_ERRORS
    if (processor_number != 0)
   11fea:	2800      	cmp	r0, #0
   11fec:	d162      	bne.n	120b4 <_task_create_at+0xe4>
_task_build_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2924
    boolean                  dynamic;
    uint_32                  create_parameter;

    _GET_KERNEL_DATA(kernel_data);

    if ( template_index )
   11fee:	2900      	cmp	r1, #0
   11ff0:	d145      	bne.n	1207e <_task_create_at+0xae>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2947
    }
    else
    {
        task_template_ptr = (TASK_TEMPLATE_STRUCT_PTR)parameter;
        create_parameter  = task_template_ptr->CREATION_PARAMETER;
        dynamic = TRUE;
   11ff2:	2301      	movs	r3, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2946
        } /* Endif */
    }
    else
    {
        task_template_ptr = (TASK_TEMPLATE_STRUCT_PTR)parameter;
        create_parameter  = task_template_ptr->CREATION_PARAMETER;
   11ff4:	6997      	ldr	r7, [r2, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2945
            task_template_ptr = NULL;
        } /* Endif */
    }
    else
    {
        task_template_ptr = (TASK_TEMPLATE_STRUCT_PTR)parameter;
   11ff6:	1c14      	adds	r4, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2947
        create_parameter  = task_template_ptr->CREATION_PARAMETER;
        dynamic = TRUE;
   11ff8:	469a      	mov	sl, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2978
        }
    }
#endif

    /* serialize task creation/destruction */
    _lwsem_wait((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
   11ffa:	1c6b      	adds	r3, r5, #1
   11ffc:	33ff      	adds	r3, #255	; 0xff
   11ffe:	1c18      	adds	r0, r3, #0
   12000:	4699      	mov	r9, r3
   12002:	f7ff fb87 	bl	11714 <_lwsem_wait>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2981

    /* Create the task, but do not ready it */
    td_ptr = _task_init_internal(task_template_ptr, kernel_data->ACTIVE_PTR->TASK_ID, \
   12006:	69eb      	ldr	r3, [r5, #28]
   12008:	4642      	mov	r2, r8
   1200a:	68d9      	ldr	r1, [r3, #12]
   1200c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1200e:	9200      	str	r2, [sp, #0]
   12010:	9301      	str	r3, [sp, #4]
   12012:	1c20      	adds	r0, r4, #0
   12014:	1c3a      	adds	r2, r7, #0
   12016:	4653      	mov	r3, sl
   12018:	f7ff fe94 	bl	11d44 <_task_init_internal>
   1201c:	1c04      	adds	r4, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2985
                    create_parameter, dynamic, stack_ptr, stack_size);

    /* Allow other tasks to create */
    _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
   1201e:	4648      	mov	r0, r9
   12020:	f7ff fb1e 	bl	11660 <_lwsem_post>
_task_create_at():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:734
        return MQX_NULL_TASK_ID;
    } /* Endif */
#endif

    td_ptr = _task_build_internal(template_index, parameter, stack_ptr, stack_size, FALSE);
    if (td_ptr != NULL)
   12024:	2c00      	cmp	r4, #0
   12026:	d068      	beq.n	120fa <_task_create_at+0x12a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:737
    {
        result = td_ptr->TASK_ID;
        _INT_DISABLE();
   12028:	69e8      	ldr	r0, [r5, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:736
#endif

    td_ptr = _task_build_internal(template_index, parameter, stack_ptr, stack_size, FALSE);
    if (td_ptr != NULL)
    {
        result = td_ptr->TASK_ID;
   1202a:	68e2      	ldr	r2, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:737
        _INT_DISABLE();
   1202c:	6d41      	ldr	r1, [r0, #84]	; 0x54
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:736
#endif

    td_ptr = _task_build_internal(template_index, parameter, stack_ptr, stack_size, FALSE);
    if (td_ptr != NULL)
    {
        result = td_ptr->TASK_ID;
   1202e:	4690      	mov	r8, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:737
        _INT_DISABLE();
   12030:	2900      	cmp	r1, #0
   12032:	d100      	bne.n	12036 <_task_create_at+0x66>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:737 (discriminator 1)
   12034:	b672      	cpsid	i
_task_ready_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3368 (discriminator 2)
{ /* Body */
    KERNEL_DATA_STRUCT_PTR       kernel_data;
    register READY_Q_STRUCT_PTR  ready_q_ptr;
    register TD_STRUCT_PTR       old_tail_ptr;

    _GET_KERNEL_DATA(kernel_data);
   12036:	6836      	ldr	r6, [r6, #0]
_task_create_at():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:737 (discriminator 2)

    td_ptr = _task_build_internal(template_index, parameter, stack_ptr, stack_size, FALSE);
    if (td_ptr != NULL)
    {
        result = td_ptr->TASK_ID;
        _INT_DISABLE();
   12038:	1c4b      	adds	r3, r1, #1
   1203a:	469c      	mov	ip, r3
   1203c:	6543      	str	r3, [r0, #84]	; 0x54
_task_ready_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3380 (discriminator 2)
     * Ready queues are ALWAYS allocated with higher priority queues in higher
     * memory, thus we need to update the CURRENT_READY_Q field (which
     * always points to the highest priority ready queue with a task
     * on it.
     */
    if ( (uchar_ptr)ready_q_ptr > (uchar_ptr)(kernel_data->CURRENT_READY_Q) )
   1203e:	6a77      	ldr	r7, [r6, #36]	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3372 (discriminator 2)

    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_task_ready, td_ptr);

    ready_q_ptr   = td_ptr->MY_QUEUE;
   12040:	69e3      	ldr	r3, [r4, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3373 (discriminator 2)
    old_tail_ptr  = ready_q_ptr->TAIL_READY_Q;
   12042:	685a      	ldr	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3380 (discriminator 2)
     * Ready queues are ALWAYS allocated with higher priority queues in higher
     * memory, thus we need to update the CURRENT_READY_Q field (which
     * always points to the highest priority ready queue with a task
     * on it.
     */
    if ( (uchar_ptr)ready_q_ptr > (uchar_ptr)(kernel_data->CURRENT_READY_Q) )
   12044:	42bb      	cmp	r3, r7
   12046:	d900      	bls.n	1204a <_task_create_at+0x7a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3382
    {
        kernel_data->CURRENT_READY_Q = ready_q_ptr;
   12048:	6273      	str	r3, [r6, #36]	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3385
    } /* Endif */

    td_ptr->STATE              = READY;
   1204a:	2602      	movs	r6, #2
   1204c:	60a6      	str	r6, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3387
    td_ptr->TD_PREV            = old_tail_ptr;
    td_ptr->TD_NEXT            = old_tail_ptr->TD_NEXT;
   1204e:	6816      	ldr	r6, [r2, #0]
_task_create_at():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:739
    if (td_ptr != NULL)
    {
        result = td_ptr->TASK_ID;
        _INT_DISABLE();
        _task_ready_internal(td_ptr);
        _INT_ENABLE();
   12050:	4667      	mov	r7, ip
_task_ready_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3386
    {
        kernel_data->CURRENT_READY_Q = ready_q_ptr;
    } /* Endif */

    td_ptr->STATE              = READY;
    td_ptr->TD_PREV            = old_tail_ptr;
   12052:	6062      	str	r2, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3387
    td_ptr->TD_NEXT            = old_tail_ptr->TD_NEXT;
   12054:	6026      	str	r6, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3388
    old_tail_ptr->TD_NEXT      = td_ptr;
   12056:	6014      	str	r4, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3389
    ready_q_ptr->TAIL_READY_Q  = td_ptr;
   12058:	605c      	str	r4, [r3, #4]
_task_create_at():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:739
    if (td_ptr != NULL)
    {
        result = td_ptr->TASK_ID;
        _INT_DISABLE();
        _task_ready_internal(td_ptr);
        _INT_ENABLE();
   1205a:	2f00      	cmp	r7, #0
   1205c:	d002      	beq.n	12064 <_task_create_at+0x94>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:739 (discriminator 1)
   1205e:	6541      	str	r1, [r0, #84]	; 0x54
   12060:	2900      	cmp	r1, #0
   12062:	d03a      	beq.n	120da <_task_create_at+0x10a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:740 (discriminator 1)
        _CHECK_RUN_SCHEDULER(); /* Let a higher priority task run */
   12064:	f003 fb68 	bl	15738 <_sched_check_scheduler_internal>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:751

#if MQX_TD_HAS_ERROR_CODE
    _KLOGX3(KLOG_task_create_at, result,
                    kernel_data->ACTIVE_PTR->TASK_ERROR_CODE);
#endif
    _tad_task_at_flag++;
   12068:	4b2e      	ldr	r3, [pc, #184]	; (12124 <_task_create_at+0x154>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:753

    return (result);
   1206a:	4640      	mov	r0, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:751

#if MQX_TD_HAS_ERROR_CODE
    _KLOGX3(KLOG_task_create_at, result,
                    kernel_data->ACTIVE_PTR->TASK_ERROR_CODE);
#endif
    _tad_task_at_flag++;
   1206c:	681a      	ldr	r2, [r3, #0]
   1206e:	3201      	adds	r2, #1
   12070:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:755

    return (result);

} /* Endbody */
   12072:	b002      	add	sp, #8
   12074:	bc1c      	pop	{r2, r3, r4}
   12076:	4690      	mov	r8, r2
   12078:	4699      	mov	r9, r3
   1207a:	46a2      	mov	sl, r4
   1207c:	bdf0      	pop	{r4, r5, r6, r7, pc}
_task_build_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2930
    {
        dynamic = FALSE;
        create_parameter = parameter;

        /* Search all the local task templates for one whose index matches */
        task_template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;
   1207e:	23be      	movs	r3, #190	; 0xbe
   12080:	005b      	lsls	r3, r3, #1
   12082:	58ec      	ldr	r4, [r5, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2932

        while ( task_template_ptr->TASK_TEMPLATE_INDEX &&
   12084:	6823      	ldr	r3, [r4, #0]
   12086:	2b00      	cmp	r3, #0
   12088:	d008      	beq.n	1209c <_task_create_at+0xcc>
   1208a:	4299      	cmp	r1, r3
   1208c:	d102      	bne.n	12094 <_task_create_at+0xc4>
   1208e:	e026      	b.n	120de <_task_create_at+0x10e>
   12090:	4281      	cmp	r1, r0
   12092:	d024      	beq.n	120de <_task_create_at+0x10e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2935
                        (task_template_ptr->TASK_TEMPLATE_INDEX != template_index) )
        {
            ++task_template_ptr;
   12094:	341c      	adds	r4, #28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2932
        create_parameter = parameter;

        /* Search all the local task templates for one whose index matches */
        task_template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;

        while ( task_template_ptr->TASK_TEMPLATE_INDEX &&
   12096:	6820      	ldr	r0, [r4, #0]
   12098:	2800      	cmp	r0, #0
   1209a:	d1f9      	bne.n	12090 <_task_create_at+0xc0>
_task_set_error():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2835
    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_task_set_error, new_error_code);

    /* get the old value */
    if (kernel_data->IN_ISR)
   1209c:	8b2b      	ldrh	r3, [r5, #24]
   1209e:	2b00      	cmp	r3, #0
   120a0:	d036      	beq.n	12110 <_task_create_at+0x140>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2837
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
   120a2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   120a4:	68de      	ldr	r6, [r3, #12]
   120a6:	2e00      	cmp	r6, #0
   120a8:	d101      	bne.n	120ae <_task_create_at+0xde>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2848
    {
        if (kernel_data->IN_ISR)
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
   120aa:	2210      	movs	r2, #16
   120ac:	60da      	str	r2, [r3, #12]
_task_create_at():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:744
        _INT_ENABLE();
        _CHECK_RUN_SCHEDULER(); /* Let a higher priority task run */
    }
    else
    {
        result = MQX_NULL_TASK_ID;
   120ae:	2700      	movs	r7, #0
   120b0:	46b8      	mov	r8, r7
   120b2:	e7d9      	b.n	12068 <_task_create_at+0x98>
_task_set_error():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2835
    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_task_set_error, new_error_code);

    /* get the old value */
    if (kernel_data->IN_ISR)
   120b4:	8b2b      	ldrh	r3, [r5, #24]
   120b6:	2b00      	cmp	r3, #0
   120b8:	d007      	beq.n	120ca <_task_create_at+0xfa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2837
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
   120ba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   120bc:	68df      	ldr	r7, [r3, #12]
   120be:	2f00      	cmp	r7, #0
   120c0:	d109      	bne.n	120d6 <_task_create_at+0x106>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2848
    {
        if (kernel_data->IN_ISR)
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
   120c2:	2213      	movs	r2, #19
   120c4:	60da      	str	r2, [r3, #12]
_task_create_at():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:729
    if (processor_number != 0)
    {
        _task_set_error(MQX_INVALID_PROCESSOR_NUMBER);

        _KLOGX3(KLOG_task_create_at, MQX_NULL_TASK_ID, MQX_INVALID_PROCESSOR_NUMBER);
        return MQX_NULL_TASK_ID;
   120c6:	2000      	movs	r0, #0
   120c8:	e7d3      	b.n	12072 <_task_create_at+0xa2>
_task_set_error():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2841
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
    }
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
   120ca:	69eb      	ldr	r3, [r5, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   120cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   120ce:	2a00      	cmp	r2, #0
   120d0:	d101      	bne.n	120d6 <_task_create_at+0x106>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2852
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
        }
        else
        {
            kernel_data->ACTIVE_PTR->TASK_ERROR_CODE = new_error_code;
   120d2:	2213      	movs	r2, #19
   120d4:	659a      	str	r2, [r3, #88]	; 0x58
_task_create_at():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:729
    if (processor_number != 0)
    {
        _task_set_error(MQX_INVALID_PROCESSOR_NUMBER);

        _KLOGX3(KLOG_task_create_at, MQX_NULL_TASK_ID, MQX_INVALID_PROCESSOR_NUMBER);
        return MQX_NULL_TASK_ID;
   120d6:	2000      	movs	r0, #0
   120d8:	e7cb      	b.n	12072 <_task_create_at+0xa2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:739 (discriminator 1)
    if (td_ptr != NULL)
    {
        result = td_ptr->TASK_ID;
        _INT_DISABLE();
        _task_ready_internal(td_ptr);
        _INT_ENABLE();
   120da:	b662      	cpsie	i
   120dc:	e7c2      	b.n	12064 <_task_create_at+0x94>
_task_build_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2926

    _GET_KERNEL_DATA(kernel_data);

    if ( template_index )
    {
        dynamic = FALSE;
   120de:	2200      	movs	r2, #0
   120e0:	4692      	mov	sl, r2
   120e2:	e78a      	b.n	11ffa <_task_create_at+0x2a>
_task_set_error():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2835
    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_task_set_error, new_error_code);

    /* get the old value */
    if (kernel_data->IN_ISR)
   120e4:	8b2b      	ldrh	r3, [r5, #24]
   120e6:	2b00      	cmp	r3, #0
   120e8:	d00a      	beq.n	12100 <_task_create_at+0x130>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2837
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
   120ea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   120ec:	68da      	ldr	r2, [r3, #12]
   120ee:	2a00      	cmp	r2, #0
   120f0:	d1f1      	bne.n	120d6 <_task_create_at+0x106>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2848
    {
        if (kernel_data->IN_ISR)
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
   120f2:	2215      	movs	r2, #21
   120f4:	60da      	str	r2, [r3, #12]
_task_create_at():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:719
    if (template_index & SYSTEM_TASK_FLAG)
    {
        _task_set_error(MQX_INVALID_TEMPLATE_INDEX);
        _KLOGX3(KLOG_task_create_at, MQX_NULL_TASK_ID,
                        MQX_INVALID_TEMPLATE_INDEX);
        return MQX_NULL_TASK_ID;
   120f6:	2000      	movs	r0, #0
   120f8:	e7bb      	b.n	12072 <_task_create_at+0xa2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:744
        _INT_ENABLE();
        _CHECK_RUN_SCHEDULER(); /* Let a higher priority task run */
    }
    else
    {
        result = MQX_NULL_TASK_ID;
   120fa:	2600      	movs	r6, #0
   120fc:	46b0      	mov	r8, r6
   120fe:	e7b3      	b.n	12068 <_task_create_at+0x98>
_task_set_error():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2841
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
    }
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
   12100:	69eb      	ldr	r3, [r5, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   12102:	6d9e      	ldr	r6, [r3, #88]	; 0x58
   12104:	2e00      	cmp	r6, #0
   12106:	d1e6      	bne.n	120d6 <_task_create_at+0x106>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2852
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
        }
        else
        {
            kernel_data->ACTIVE_PTR->TASK_ERROR_CODE = new_error_code;
   12108:	2215      	movs	r2, #21
   1210a:	659a      	str	r2, [r3, #88]	; 0x58
_task_create_at():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:719
    if (template_index & SYSTEM_TASK_FLAG)
    {
        _task_set_error(MQX_INVALID_TEMPLATE_INDEX);
        _KLOGX3(KLOG_task_create_at, MQX_NULL_TASK_ID,
                        MQX_INVALID_TEMPLATE_INDEX);
        return MQX_NULL_TASK_ID;
   1210c:	2000      	movs	r0, #0
   1210e:	e7b0      	b.n	12072 <_task_create_at+0xa2>
_task_set_error():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2841
    {
        old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
    }
    else
    {
        old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
   12110:	69eb      	ldr	r3, [r5, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2844
    } /* Endif */

    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   12112:	6d9f      	ldr	r7, [r3, #88]	; 0x58
   12114:	2f00      	cmp	r7, #0
   12116:	d1ca      	bne.n	120ae <_task_create_at+0xde>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:2852
        {
            kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
        }
        else
        {
            kernel_data->ACTIVE_PTR->TASK_ERROR_CODE = new_error_code;
   12118:	2210      	movs	r2, #16
   1211a:	659a      	str	r2, [r3, #88]	; 0x58
   1211c:	e7c7      	b.n	120ae <_task_create_at+0xde>
   1211e:	46c0      	nop			; (mov r8, r8)
   12120:	1fffe000 	.word	0x1fffe000
   12124:	200002e0 	.word	0x200002e0

00012128 <_task_fill_stack_internal>:
_task_fill_stack_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3339
    _mqx_uint_ptr addr_ptr,
    _mqx_uint     size
)
{ /* Body */

    size = (size/sizeof(_mqx_uint)) + 1;  /* Calculate # _mqx_uints */
   12128:	0889      	lsrs	r1, r1, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3340
    while (--size)
   1212a:	d004      	beq.n	12136 <_task_fill_stack_internal+0xe>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3342
    {
        *addr_ptr++ = MQX_STACK_MONITOR_VALUE;
   1212c:	4b02      	ldr	r3, [pc, #8]	; (12138 <_task_fill_stack_internal+0x10>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3340
    _mqx_uint     size
)
{ /* Body */

    size = (size/sizeof(_mqx_uint)) + 1;  /* Calculate # _mqx_uints */
    while (--size)
   1212e:	3901      	subs	r1, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3342
    {
        *addr_ptr++ = MQX_STACK_MONITOR_VALUE;
   12130:	c008      	stmia	r0!, {r3}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3340
    _mqx_uint     size
)
{ /* Body */

    size = (size/sizeof(_mqx_uint)) + 1;  /* Calculate # _mqx_uints */
    while (--size)
   12132:	2900      	cmp	r1, #0
   12134:	d1fb      	bne.n	1212e <_task_fill_stack_internal+0x6>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3345
    {
        *addr_ptr++ = MQX_STACK_MONITOR_VALUE;
    } /* Endwhile */

} /* Endbody */
   12136:	4770      	bx	lr
   12138:	7374616b 	.word	0x7374616b

0001213c <_task_ready_internal>:
_task_ready_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3368
{ /* Body */
    KERNEL_DATA_STRUCT_PTR       kernel_data;
    register READY_Q_STRUCT_PTR  ready_q_ptr;
    register TD_STRUCT_PTR       old_tail_ptr;

    _GET_KERNEL_DATA(kernel_data);
   1213c:	4b08      	ldr	r3, [pc, #32]	; (12160 <_task_ready_internal+0x24>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3363
 */
void _task_ready_internal
(
    TD_STRUCT_PTR td_ptr
)
{ /* Body */
   1213e:	b510      	push	{r4, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3368
    KERNEL_DATA_STRUCT_PTR       kernel_data;
    register READY_Q_STRUCT_PTR  ready_q_ptr;
    register TD_STRUCT_PTR       old_tail_ptr;

    _GET_KERNEL_DATA(kernel_data);
   12140:	6819      	ldr	r1, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3372

    _KLOGE2(KLOG_task_ready, td_ptr);

    ready_q_ptr   = td_ptr->MY_QUEUE;
   12142:	69c3      	ldr	r3, [r0, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3380
     * Ready queues are ALWAYS allocated with higher priority queues in higher
     * memory, thus we need to update the CURRENT_READY_Q field (which
     * always points to the highest priority ready queue with a task
     * on it.
     */
    if ( (uchar_ptr)ready_q_ptr > (uchar_ptr)(kernel_data->CURRENT_READY_Q) )
   12144:	6a4c      	ldr	r4, [r1, #36]	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3373
    _GET_KERNEL_DATA(kernel_data);

    _KLOGE2(KLOG_task_ready, td_ptr);

    ready_q_ptr   = td_ptr->MY_QUEUE;
    old_tail_ptr  = ready_q_ptr->TAIL_READY_Q;
   12146:	685a      	ldr	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3380
     * Ready queues are ALWAYS allocated with higher priority queues in higher
     * memory, thus we need to update the CURRENT_READY_Q field (which
     * always points to the highest priority ready queue with a task
     * on it.
     */
    if ( (uchar_ptr)ready_q_ptr > (uchar_ptr)(kernel_data->CURRENT_READY_Q) )
   12148:	42a3      	cmp	r3, r4
   1214a:	d900      	bls.n	1214e <_task_ready_internal+0x12>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3382
    {
        kernel_data->CURRENT_READY_Q = ready_q_ptr;
   1214c:	624b      	str	r3, [r1, #36]	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3385
    } /* Endif */

    td_ptr->STATE              = READY;
   1214e:	2102      	movs	r1, #2
   12150:	6081      	str	r1, [r0, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3387
    td_ptr->TD_PREV            = old_tail_ptr;
    td_ptr->TD_NEXT            = old_tail_ptr->TD_NEXT;
   12152:	6811      	ldr	r1, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3386
    {
        kernel_data->CURRENT_READY_Q = ready_q_ptr;
    } /* Endif */

    td_ptr->STATE              = READY;
    td_ptr->TD_PREV            = old_tail_ptr;
   12154:	6042      	str	r2, [r0, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3387
    td_ptr->TD_NEXT            = old_tail_ptr->TD_NEXT;
   12156:	6001      	str	r1, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3388
    old_tail_ptr->TD_NEXT      = td_ptr;
   12158:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3389
    ready_q_ptr->TAIL_READY_Q  = td_ptr;
   1215a:	6058      	str	r0, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3397
    MQX_ZERO_TICK_STRUCT(&td_ptr->CURRENT_TIME_SLICE);
#endif
    /* END SPR */
    _KLOGX1(KLOG_task_ready);

} /* Endbody */
   1215c:	bd10      	pop	{r4, pc}
   1215e:	46c0      	nop			; (mov r8, r8)
   12160:	1fffe000 	.word	0x1fffe000

00012164 <_task_set_error_td_internal>:
_task_set_error_td_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3660
_mqx_uint _task_set_error_td_internal
(
    TD_STRUCT_PTR td_ptr,
    _mqx_uint new_error_code
)
{ /* Body */
   12164:	1c03      	adds	r3, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3670
    _KLOGM(_GET_KERNEL_DATA(kernel_data);)

    _KLOGE2(KLOG_task_set_error, new_error_code);

    /* get the old value */
    old_error_code = td_ptr->TASK_ERROR_CODE;
   12166:	6d80      	ldr	r0, [r0, #88]	; 0x58
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3671
    if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
   12168:	2900      	cmp	r1, #0
   1216a:	d001      	beq.n	12170 <_task_set_error_td_internal+0xc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3671 (discriminator 1)
   1216c:	2800      	cmp	r0, #0
   1216e:	d100      	bne.n	12172 <_task_set_error_td_internal+0xe>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3673
    {
        td_ptr->TASK_ERROR_CODE = new_error_code;
   12170:	6599      	str	r1, [r3, #88]	; 0x58
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/task.c:3682
    return( old_error_code );
#else
    return MQX_OK;
#endif

} /* Endbody */
   12172:	4770      	bx	lr

00012174 <_time_delay_for>:
_time_delay_for():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:88
 */
void _time_delay_for
(
    register MQX_TICK_STRUCT_PTR ticks
)
{ /* Body */
   12174:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:92
    register KERNEL_DATA_STRUCT_PTR kernel_data;
    register TD_STRUCT_PTR td_ptr;

    _GET_KERNEL_DATA(kernel_data);
   12176:	4d2f      	ldr	r5, [pc, #188]	; (12234 <_time_delay_for+0xc0>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:88
 */
void _time_delay_for
(
    register MQX_TICK_STRUCT_PTR ticks
)
{ /* Body */
   12178:	4647      	mov	r7, r8
   1217a:	b480      	push	{r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:92
    register KERNEL_DATA_STRUCT_PTR kernel_data;
    register TD_STRUCT_PTR td_ptr;

    _GET_KERNEL_DATA(kernel_data);
   1217c:	682e      	ldr	r6, [r5, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:97

    _KLOGE2(KLOG_time_delay_for, ticks);

#if MQX_CHECK_ERRORS
    if (ticks == NULL) {
   1217e:	2800      	cmp	r0, #0
   12180:	d054      	beq.n	1222c <_time_delay_for+0xb8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:104
        _KLOGX2(KLOG_time_delay_for, MQX_INVALID_PARAMETER);
        return;
    } /* Endif */
#endif

    td_ptr = kernel_data->ACTIVE_PTR;
   12182:	69f4      	ldr	r4, [r6, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:106

    _INT_DISABLE();
   12184:	6d63      	ldr	r3, [r4, #84]	; 0x54
   12186:	2b00      	cmp	r3, #0
   12188:	d046      	beq.n	12218 <_time_delay_for+0xa4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:109 (discriminator 2)

    /* Calculate time to wake up the task */
    PSP_ADD_TICKS(ticks, &kernel_data->TIME, &td_ptr->TIMEOUT);
   1218a:	228e      	movs	r2, #142	; 0x8e
   1218c:	0052      	lsls	r2, r2, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:106 (discriminator 2)
    } /* Endif */
#endif

    td_ptr = kernel_data->ACTIVE_PTR;

    _INT_DISABLE();
   1218e:	3301      	adds	r3, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:109 (discriminator 2)

    /* Calculate time to wake up the task */
    PSP_ADD_TICKS(ticks, &kernel_data->TIME, &td_ptr->TIMEOUT);
   12190:	18b1      	adds	r1, r6, r2
   12192:	1c22      	adds	r2, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:106 (discriminator 2)
    } /* Endif */
#endif

    td_ptr = kernel_data->ACTIVE_PTR;

    _INT_DISABLE();
   12194:	6563      	str	r3, [r4, #84]	; 0x54
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:109 (discriminator 2)

    /* Calculate time to wake up the task */
    PSP_ADD_TICKS(ticks, &kernel_data->TIME, &td_ptr->TIMEOUT);
   12196:	3244      	adds	r2, #68	; 0x44
   12198:	f7fe ff3c 	bl	11014 <_psp_add_ticks>
_time_delay_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:145 (discriminator 2)
   register TD_STRUCT_PTR           td2_ptr;
   register TD_STRUCT_PTR           tdprev_ptr;
   register _mqx_uint               count;
   register _mqx_int                result;

   _GET_KERNEL_DATA(kernel_data);
   1219c:	682b      	ldr	r3, [r5, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:148 (discriminator 2)

   /* Remove task from ready to run queue */
   tdprev_ptr = (TD_STRUCT_PTR)((pointer)&kernel_data->TIMEOUT_QUEUE);
   1219e:	229a      	movs	r2, #154	; 0x9a
   121a0:	0052      	lsls	r2, r2, #1
   121a2:	189f      	adds	r7, r3, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:149 (discriminator 2)
   if ( _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE) ) {
   121a4:	893a      	ldrh	r2, [r7, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:148 (discriminator 2)
   register _mqx_int                result;

   _GET_KERNEL_DATA(kernel_data);

   /* Remove task from ready to run queue */
   tdprev_ptr = (TD_STRUCT_PTR)((pointer)&kernel_data->TIMEOUT_QUEUE);
   121a6:	1c38      	adds	r0, r7, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:149 (discriminator 2)
   if ( _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE) ) {
   121a8:	4694      	mov	ip, r2
   121aa:	2a00      	cmp	r2, #0
   121ac:	d015      	beq.n	121da <_time_delay_for+0x66>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:152

      /* Perform insertion sort by time */
      td2_ptr    = (TD_STRUCT_PTR)((pointer)kernel_data->TIMEOUT_QUEUE.NEXT);
   121ae:	229a      	movs	r2, #154	; 0x9a
   121b0:	0052      	lsls	r2, r2, #1
   121b2:	589b      	ldr	r3, [r3, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:158

      /* SPR P171-0023-01 use pre-decrement on while loop */
      count      = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE) + 1;
      while ( --count ) {
      /* END SPR */
         result = PSP_CMP_TICKS(&td2_ptr->TIMEOUT, &td_ptr->TIMEOUT);
   121b4:	6c62      	ldr	r2, [r4, #68]	; 0x44
   121b6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   121b8:	4690      	mov	r8, r2
   121ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:156
      /* Perform insertion sort by time */
      td2_ptr    = (TD_STRUCT_PTR)((pointer)kernel_data->TIMEOUT_QUEUE.NEXT);

      /* SPR P171-0023-01 use pre-decrement on while loop */
      count      = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE) + 1;
      while ( --count ) {
   121bc:	4665      	mov	r5, ip
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:158
      /* END SPR */
         result = PSP_CMP_TICKS(&td2_ptr->TIMEOUT, &td_ptr->TIMEOUT);
   121be:	428a      	cmp	r2, r1
   121c0:	d22c      	bcs.n	1221c <_time_delay_for+0xa8>
   121c2:	1c18      	adds	r0, r3, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:156
      /* Perform insertion sort by time */
      td2_ptr    = (TD_STRUCT_PTR)((pointer)kernel_data->TIMEOUT_QUEUE.NEXT);

      /* SPR P171-0023-01 use pre-decrement on while loop */
      count      = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE) + 1;
      while ( --count ) {
   121c4:	3d01      	subs	r5, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:165
            /* Enqueue before td2_ptr */
            break;
         } /* Endif */

         tdprev_ptr = td2_ptr;
         td2_ptr    = td2_ptr->TD_NEXT;
   121c6:	6802      	ldr	r2, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:156
      /* Perform insertion sort by time */
      td2_ptr    = (TD_STRUCT_PTR)((pointer)kernel_data->TIMEOUT_QUEUE.NEXT);

      /* SPR P171-0023-01 use pre-decrement on while loop */
      count      = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE) + 1;
      while ( --count ) {
   121c8:	2d00      	cmp	r5, #0
   121ca:	d006      	beq.n	121da <_time_delay_for+0x66>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:158
      /* END SPR */
         result = PSP_CMP_TICKS(&td2_ptr->TIMEOUT, &td_ptr->TIMEOUT);
   121cc:	6c93      	ldr	r3, [r2, #72]	; 0x48
   121ce:	428b      	cmp	r3, r1
   121d0:	d32a      	bcc.n	12228 <_time_delay_for+0xb4>
   121d2:	d102      	bne.n	121da <_time_delay_for+0x66>
   121d4:	6c53      	ldr	r3, [r2, #68]	; 0x44
   121d6:	4543      	cmp	r3, r8
   121d8:	d326      	bcc.n	12228 <_time_delay_for+0xb4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:171
      } /* Endwhile */

   } /* Endif */

   /* Remove from ready queue */
   _QUEUE_UNLINK(td_ptr);
   121da:	6862      	ldr	r2, [r4, #4]
   121dc:	6823      	ldr	r3, [r4, #0]
   121de:	6013      	str	r3, [r2, #0]
   121e0:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:174

   /* Insert into timeout queue */
   _QUEUE_INSERT(&kernel_data->TIMEOUT_QUEUE,tdprev_ptr,td_ptr);
   121e2:	6803      	ldr	r3, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:176

   td_ptr->STATE |= IS_ON_TIMEOUT_Q;
   121e4:	68a2      	ldr	r2, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:174

   /* Remove from ready queue */
   _QUEUE_UNLINK(td_ptr);

   /* Insert into timeout queue */
   _QUEUE_INSERT(&kernel_data->TIMEOUT_QUEUE,tdprev_ptr,td_ptr);
   121e6:	6023      	str	r3, [r4, #0]
   121e8:	6004      	str	r4, [r0, #0]
   121ea:	6060      	str	r0, [r4, #4]
   121ec:	605c      	str	r4, [r3, #4]
   121ee:	4663      	mov	r3, ip
   121f0:	3301      	adds	r3, #1
   121f2:	813b      	strh	r3, [r7, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:176

   td_ptr->STATE |= IS_ON_TIMEOUT_Q;
   121f4:	2380      	movs	r3, #128	; 0x80
   121f6:	005b      	lsls	r3, r3, #1
   121f8:	4313      	orrs	r3, r2
   121fa:	60a3      	str	r3, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:178

   _sched_execute_scheduler_internal();
   121fc:	f003 faa8 	bl	15750 <_sched_execute_scheduler_internal>
_time_delay_for():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:113
    /* Calculate time to wake up the task */
    PSP_ADD_TICKS(ticks, &kernel_data->TIME, &td_ptr->TIMEOUT);

    _time_delay_internal(td_ptr);

    _INT_ENABLE();
   12200:	69f3      	ldr	r3, [r6, #28]
   12202:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   12204:	2a00      	cmp	r2, #0
   12206:	d004      	beq.n	12212 <_time_delay_for+0x9e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:113 (discriminator 1)
   12208:	3a01      	subs	r2, #1
   1220a:	655a      	str	r2, [r3, #84]	; 0x54
   1220c:	2a00      	cmp	r2, #0
   1220e:	d100      	bne.n	12212 <_time_delay_for+0x9e>
   12210:	b662      	cpsie	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:117

    _KLOGX1( KLOG_time_delay_for);

} /* Endbody */
   12212:	bc04      	pop	{r2}
   12214:	4690      	mov	r8, r2
   12216:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:106 (discriminator 1)
    } /* Endif */
#endif

    td_ptr = kernel_data->ACTIVE_PTR;

    _INT_DISABLE();
   12218:	b672      	cpsid	i
   1221a:	e7b6      	b.n	1218a <_time_delay_for+0x16>
_time_delay_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:158

      /* SPR P171-0023-01 use pre-decrement on while loop */
      count      = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE) + 1;
      while ( --count ) {
      /* END SPR */
         result = PSP_CMP_TICKS(&td2_ptr->TIMEOUT, &td_ptr->TIMEOUT);
   1221c:	428a      	cmp	r2, r1
   1221e:	d1dc      	bne.n	121da <_time_delay_for+0x66>
   12220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   12222:	4542      	cmp	r2, r8
   12224:	d3cd      	bcc.n	121c2 <_time_delay_for+0x4e>
   12226:	e7d8      	b.n	121da <_time_delay_for+0x66>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:165
            /* Enqueue before td2_ptr */
            break;
         } /* Endif */

         tdprev_ptr = td2_ptr;
         td2_ptr    = td2_ptr->TD_NEXT;
   12228:	1c10      	adds	r0, r2, #0
   1222a:	e7cb      	b.n	121c4 <_time_delay_for+0x50>
_time_delay_for():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:98

    _KLOGE2(KLOG_time_delay_for, ticks);

#if MQX_CHECK_ERRORS
    if (ticks == NULL) {
        _task_set_error(MQX_INVALID_PARAMETER);
   1222c:	200c      	movs	r0, #12
   1222e:	f7ff fd6f 	bl	11d10 <_task_set_error>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:100
        _KLOGX2(KLOG_time_delay_for, MQX_INVALID_PARAMETER);
        return;
   12232:	e7ee      	b.n	12212 <_time_delay_for+0x9e>
   12234:	1fffe000 	.word	0x1fffe000

00012238 <_time_notify_kernel>:
_time_notify_kernel():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:823
 */
void _time_notify_kernel
(
    void
)
{ /* Body */
   12238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:830
    register TD_STRUCT_PTR td_ptr;
    register TD_STRUCT_PTR next_td_ptr;
    register _mqx_uint count;
    register _mqx_int result;

    _GET_KERNEL_DATA(kernel_data);
   1223a:	4b4a      	ldr	r3, [pc, #296]	; (12364 <_time_notify_kernel+0x12c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:823
 */
void _time_notify_kernel
(
    void
)
{ /* Body */
   1223c:	465f      	mov	r7, fp
   1223e:	4656      	mov	r6, sl
   12240:	464d      	mov	r5, r9
   12242:	4644      	mov	r4, r8
   12244:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:835
    _GET_KERNEL_DATA(kernel_data);

    /*
     * Update the current time.
     */
    PSP_INC_TICKS(&kernel_data->TIME);
   12246:	208e      	movs	r0, #142	; 0x8e
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:830
    register TD_STRUCT_PTR td_ptr;
    register TD_STRUCT_PTR next_td_ptr;
    register _mqx_uint count;
    register _mqx_int result;

    _GET_KERNEL_DATA(kernel_data);
   12248:	681c      	ldr	r4, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:835

    /*
     * Update the current time.
     */
    PSP_INC_TICKS(&kernel_data->TIME);
   1224a:	0040      	lsls	r0, r0, #1
   1224c:	1825      	adds	r5, r4, r0
   1224e:	2201      	movs	r2, #1
   12250:	2300      	movs	r3, #0
   12252:	682e      	ldr	r6, [r5, #0]
   12254:	686f      	ldr	r7, [r5, #4]
   12256:	1992      	adds	r2, r2, r6
   12258:	417b      	adcs	r3, r7
   1225a:	602a      	str	r2, [r5, #0]
   1225c:	606b      	str	r3, [r5, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:837

    _INT_DISABLE();
   1225e:	69e3      	ldr	r3, [r4, #28]
   12260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   12262:	2a00      	cmp	r2, #0
   12264:	d100      	bne.n	12268 <_time_notify_kernel+0x30>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:837 (discriminator 1)
   12266:	b672      	cpsid	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:837 (discriminator 2)
   12268:	3201      	adds	r2, #1
   1226a:	655a      	str	r2, [r3, #84]	; 0x54
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:839 (discriminator 2)

    if (kernel_data->GET_HWTICKS) {
   1226c:	23aa      	movs	r3, #170	; 0xaa
   1226e:	005b      	lsls	r3, r3, #1
   12270:	58e3      	ldr	r3, [r4, r3]
   12272:	2b00      	cmp	r3, #0
   12274:	d006      	beq.n	12284 <_time_notify_kernel+0x4c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:845
        /* The hardware clock may have counted passed it's reference
         * and have an interrupt pending.  Thus, HW_TICKS may exceed
         * kernel_data->HW_TICKS_PER_TICK and this tick_ptr may need
         * normalizing.  This is done in a moment.
         */
        kernel_data->TIME.HW_TICKS = (*kernel_data->GET_HWTICKS)(kernel_data->GET_HWTICKS_PARAM);
   12276:	22ac      	movs	r2, #172	; 0xac
   12278:	0052      	lsls	r2, r2, #1
   1227a:	58a0      	ldr	r0, [r4, r2]
   1227c:	4798      	blx	r3
   1227e:	2392      	movs	r3, #146	; 0x92
   12280:	005b      	lsls	r3, r3, #1
   12282:	50e0      	str	r0, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:858

    /*
     * Check for tasks on the timeout queue, and wake the appropriate
     * ones up.  The timeout queue is a time-priority queue.
     */
    count = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE);
   12284:	279a      	movs	r7, #154	; 0x9a
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:852

    /* The tick_ptr->HW_TICKS value might exceed the
     * kernel_data->HW_TICKS_PER_TICK and need to be
     * normalized for the PSP.
     */
    PSP_NORMALIZE_TICKS(&kernel_data->TIME);
   12286:	1c28      	adds	r0, r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:858

    /*
     * Check for tasks on the timeout queue, and wake the appropriate
     * ones up.  The timeout queue is a time-priority queue.
     */
    count = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE);
   12288:	007f      	lsls	r7, r7, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:852

    /* The tick_ptr->HW_TICKS value might exceed the
     * kernel_data->HW_TICKS_PER_TICK and need to be
     * normalized for the PSP.
     */
    PSP_NORMALIZE_TICKS(&kernel_data->TIME);
   1228a:	f7fe fee3 	bl	11054 <_psp_normalize_ticks>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:858

    /*
     * Check for tasks on the timeout queue, and wake the appropriate
     * ones up.  The timeout queue is a time-priority queue.
     */
    count = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE);
   1228e:	19e3      	adds	r3, r4, r7
   12290:	8919      	ldrh	r1, [r3, #8]
   12292:	1e08      	subs	r0, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:859
    if (count) {
   12294:	d009      	beq.n	122aa <_time_notify_kernel+0x72>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:860
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
   12296:	239a      	movs	r3, #154	; 0x9a
   12298:	005b      	lsls	r3, r3, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:864
        ++count;
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
   1229a:	682e      	ldr	r6, [r5, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:860
     * Check for tasks on the timeout queue, and wake the appropriate
     * ones up.  The timeout queue is a time-priority queue.
     */
    count = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE);
    if (count) {
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
   1229c:	58e3      	ldr	r3, [r4, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:864
        ++count;
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
   1229e:	46b1      	mov	r9, r6
   122a0:	686d      	ldr	r5, [r5, #4]
   122a2:	6c9e      	ldr	r6, [r3, #72]	; 0x48
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:863
    count = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE);
    if (count) {
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
        ++count;
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
   122a4:	681a      	ldr	r2, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:864
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
   122a6:	42ae      	cmp	r6, r5
   122a8:	d915      	bls.n	122d6 <_time_notify_kernel+0x9e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:900
            } /* Endif */
        } /* Endif */
    } /* Endif */
#endif

    _INT_ENABLE();
   122aa:	69e3      	ldr	r3, [r4, #28]
   122ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   122ae:	2a00      	cmp	r2, #0
   122b0:	d003      	beq.n	122ba <_time_notify_kernel+0x82>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:900 (discriminator 1)
   122b2:	3a01      	subs	r2, #1
   122b4:	655a      	str	r2, [r3, #84]	; 0x54
   122b6:	2a00      	cmp	r2, #0
   122b8:	d00b      	beq.n	122d2 <_time_notify_kernel+0x9a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:910
    }/* Endif */
#endif

#if MQX_USE_LWTIMER
    /* If the lwtimer needs servicing, call its ISR function */
    if (kernel_data->LWTIMER_ISR != NULL) {
   122ba:	2394      	movs	r3, #148	; 0x94
   122bc:	009b      	lsls	r3, r3, #2
   122be:	58e3      	ldr	r3, [r4, r3]
   122c0:	2b00      	cmp	r3, #0
   122c2:	d000      	beq.n	122c6 <_time_notify_kernel+0x8e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:911
        (*kernel_data->LWTIMER_ISR)();
   122c4:	4798      	blx	r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:915
    }/* Endif */
#endif

} /* Endbody */
   122c6:	bc3c      	pop	{r2, r3, r4, r5}
   122c8:	4690      	mov	r8, r2
   122ca:	4699      	mov	r9, r3
   122cc:	46a2      	mov	sl, r4
   122ce:	46ab      	mov	fp, r5
   122d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:900 (discriminator 1)
            } /* Endif */
        } /* Endif */
    } /* Endif */
#endif

    _INT_ENABLE();
   122d2:	b662      	cpsie	i
   122d4:	e7f1      	b.n	122ba <_time_notify_kernel+0x82>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:864
    if (count) {
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
        ++count;
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
   122d6:	42ae      	cmp	r6, r5
   122d8:	d040      	beq.n	1235c <_time_notify_kernel+0x124>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:869
            if (result >= 0) {
                --kernel_data->TIMEOUT_QUEUE.SIZE;
                _QUEUE_UNLINK(td_ptr);
                td_ptr->STATE &= ~IS_ON_TIMEOUT_Q;
                if (td_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
   122da:	2780      	movs	r7, #128	; 0x80
   122dc:	00ff      	lsls	r7, r7, #3
   122de:	46bc      	mov	ip, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:868
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
            if (result >= 0) {
                --kernel_data->TIMEOUT_QUEUE.SIZE;
                _QUEUE_UNLINK(td_ptr);
                td_ptr->STATE &= ~IS_ON_TIMEOUT_Q;
   122e0:	4f21      	ldr	r7, [pc, #132]	; (12368 <_time_notify_kernel+0x130>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:870
                if (td_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
                    td_ptr->STATE &= ~TD_IS_ON_AUX_QUEUE;
   122e2:	4e22      	ldr	r6, [pc, #136]	; (1236c <_time_notify_kernel+0x134>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:868
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
            if (result >= 0) {
                --kernel_data->TIMEOUT_QUEUE.SIZE;
                _QUEUE_UNLINK(td_ptr);
                td_ptr->STATE &= ~IS_ON_TIMEOUT_Q;
   122e4:	46ba      	mov	sl, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:873
                if (td_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
                    td_ptr->STATE &= ~TD_IS_ON_AUX_QUEUE;
                    _QUEUE_REMOVE(td_ptr->INFO, &td_ptr->AUX_QUEUE);
                } /* Endif */
                _TASK_READY(td_ptr, kernel_data);
   122e6:	2702      	movs	r7, #2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:870
            if (result >= 0) {
                --kernel_data->TIMEOUT_QUEUE.SIZE;
                _QUEUE_UNLINK(td_ptr);
                td_ptr->STATE &= ~IS_ON_TIMEOUT_Q;
                if (td_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
                    td_ptr->STATE &= ~TD_IS_ON_AUX_QUEUE;
   122e8:	46b0      	mov	r8, r6
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:873
                    _QUEUE_REMOVE(td_ptr->INFO, &td_ptr->AUX_QUEUE);
                } /* Endif */
                _TASK_READY(td_ptr, kernel_data);
   122ea:	46bb      	mov	fp, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:866
        ++count;
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
            if (result >= 0) {
                --kernel_data->TIMEOUT_QUEUE.SIZE;
   122ec:	269e      	movs	r6, #158	; 0x9e
   122ee:	3901      	subs	r1, #1
   122f0:	0076      	lsls	r6, r6, #1
   122f2:	53a1      	strh	r1, [r4, r6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:867
                _QUEUE_UNLINK(td_ptr);
   122f4:	6859      	ldr	r1, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:869
                td_ptr->STATE &= ~IS_ON_TIMEOUT_Q;
                if (td_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
   122f6:	4667      	mov	r7, ip
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:867
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
            if (result >= 0) {
                --kernel_data->TIMEOUT_QUEUE.SIZE;
                _QUEUE_UNLINK(td_ptr);
   122f8:	600a      	str	r2, [r1, #0]
   122fa:	6051      	str	r1, [r2, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:868
                td_ptr->STATE &= ~IS_ON_TIMEOUT_Q;
   122fc:	6899      	ldr	r1, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:869
                if (td_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
   122fe:	4239      	tst	r1, r7
   12300:	d120      	bne.n	12344 <_time_notify_kernel+0x10c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:868
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
            if (result >= 0) {
                --kernel_data->TIMEOUT_QUEUE.SIZE;
                _QUEUE_UNLINK(td_ptr);
                td_ptr->STATE &= ~IS_ON_TIMEOUT_Q;
   12302:	4656      	mov	r6, sl
   12304:	4031      	ands	r1, r6
   12306:	6099      	str	r1, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:873
                if (td_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
                    td_ptr->STATE &= ~TD_IS_ON_AUX_QUEUE;
                    _QUEUE_REMOVE(td_ptr->INFO, &td_ptr->AUX_QUEUE);
                } /* Endif */
                _TASK_READY(td_ptr, kernel_data);
   12308:	69d9      	ldr	r1, [r3, #28]
   1230a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1230c:	42b9      	cmp	r1, r7
   1230e:	d900      	bls.n	12312 <_time_notify_kernel+0xda>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:873 (discriminator 1)
   12310:	6261      	str	r1, [r4, #36]	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:873 (discriminator 2)
   12312:	684f      	ldr	r7, [r1, #4]
   12314:	465e      	mov	r6, fp
   12316:	609e      	str	r6, [r3, #8]
   12318:	683e      	ldr	r6, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:862 (discriminator 2)
     */
    count = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE);
    if (count) {
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
        ++count;
        while (--count) {
   1231a:	3801      	subs	r0, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:873 (discriminator 2)
                td_ptr->STATE &= ~IS_ON_TIMEOUT_Q;
                if (td_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
                    td_ptr->STATE &= ~TD_IS_ON_AUX_QUEUE;
                    _QUEUE_REMOVE(td_ptr->INFO, &td_ptr->AUX_QUEUE);
                } /* Endif */
                _TASK_READY(td_ptr, kernel_data);
   1231c:	605f      	str	r7, [r3, #4]
   1231e:	601e      	str	r6, [r3, #0]
   12320:	603b      	str	r3, [r7, #0]
   12322:	604b      	str	r3, [r1, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:862 (discriminator 2)
     */
    count = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE);
    if (count) {
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
        ++count;
        while (--count) {
   12324:	2800      	cmp	r0, #0
   12326:	d0c0      	beq.n	122aa <_time_notify_kernel+0x72>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:864
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
   12328:	6c93      	ldr	r3, [r2, #72]	; 0x48
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:863
    count = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE);
    if (count) {
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
        ++count;
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
   1232a:	6817      	ldr	r7, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:864
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
   1232c:	42ab      	cmp	r3, r5
   1232e:	d8bc      	bhi.n	122aa <_time_notify_kernel+0x72>
   12330:	d102      	bne.n	12338 <_time_notify_kernel+0x100>
   12332:	6c51      	ldr	r1, [r2, #68]	; 0x44
   12334:	4549      	cmp	r1, r9
   12336:	d8b8      	bhi.n	122aa <_time_notify_kernel+0x72>
   12338:	239e      	movs	r3, #158	; 0x9e
   1233a:	005b      	lsls	r3, r3, #1
   1233c:	5ae1      	ldrh	r1, [r4, r3]
   1233e:	1c13      	adds	r3, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:863
    count = _QUEUE_GET_SIZE(&kernel_data->TIMEOUT_QUEUE);
    if (count) {
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
        ++count;
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
   12340:	1c3a      	adds	r2, r7, #0
   12342:	e7d3      	b.n	122ec <_time_notify_kernel+0xb4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:870
            if (result >= 0) {
                --kernel_data->TIMEOUT_QUEUE.SIZE;
                _QUEUE_UNLINK(td_ptr);
                td_ptr->STATE &= ~IS_ON_TIMEOUT_Q;
                if (td_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
                    td_ptr->STATE &= ~TD_IS_ON_AUX_QUEUE;
   12344:	4646      	mov	r6, r8
   12346:	4031      	ands	r1, r6
   12348:	6099      	str	r1, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:871
                    _QUEUE_REMOVE(td_ptr->INFO, &td_ptr->AUX_QUEUE);
   1234a:	6c1f      	ldr	r7, [r3, #64]	; 0x40
   1234c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1234e:	6039      	str	r1, [r7, #0]
   12350:	604f      	str	r7, [r1, #4]
   12352:	6b9f      	ldr	r7, [r3, #56]	; 0x38
   12354:	8939      	ldrh	r1, [r7, #8]
   12356:	3901      	subs	r1, #1
   12358:	8139      	strh	r1, [r7, #8]
   1235a:	e7d5      	b.n	12308 <_time_notify_kernel+0xd0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:864
    if (count) {
        td_ptr = (TD_STRUCT_PTR)((pointer) kernel_data->TIMEOUT_QUEUE.NEXT);
        ++count;
        while (--count) {
            next_td_ptr = td_ptr->TD_NEXT;
            result = PSP_CMP_TICKS(&kernel_data->TIME, &td_ptr->TIMEOUT);
   1235c:	6c5f      	ldr	r7, [r3, #68]	; 0x44
   1235e:	454f      	cmp	r7, r9
   12360:	d8a3      	bhi.n	122aa <_time_notify_kernel+0x72>
   12362:	e7ba      	b.n	122da <_time_notify_kernel+0xa2>
   12364:	1fffe000 	.word	0x1fffe000
   12368:	fffffeff 	.word	0xfffffeff
   1236c:	fffffaff 	.word	0xfffffaff

00012370 <_time_set_hwtick_function>:
_time_set_hwtick_function():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:1005
    pointer              parameter
)
{ /* Body */
    register KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);
   12370:	4b04      	ldr	r3, [pc, #16]	; (12384 <_time_set_hwtick_function+0x14>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:1007

    kernel_data->GET_HWTICKS = hwtick_function_ptr;
   12372:	22aa      	movs	r2, #170	; 0xaa
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:1005
    pointer              parameter
)
{ /* Body */
    register KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);
   12374:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:1007

    kernel_data->GET_HWTICKS = hwtick_function_ptr;
   12376:	0052      	lsls	r2, r2, #1
   12378:	5098      	str	r0, [r3, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:1008
    kernel_data->GET_HWTICKS_PARAM = parameter;
   1237a:	22ac      	movs	r2, #172	; 0xac
   1237c:	0052      	lsls	r2, r2, #1
   1237e:	5099      	str	r1, [r3, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:1010

} /* Endbody */
   12380:	4770      	bx	lr
   12382:	46c0      	nop			; (mov r8, r8)
   12384:	1fffe000 	.word	0x1fffe000

00012388 <_time_set_hwticks_per_tick>:
_time_set_hwticks_per_tick():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:1031
{ /* Body */
    register KERNEL_DATA_STRUCT_PTR kernel_data;

    _GET_KERNEL_DATA(kernel_data);

    kernel_data->HW_TICKS_PER_TICK = new_val;
   12388:	4b02      	ldr	r3, [pc, #8]	; (12394 <_time_set_hwticks_per_tick+0xc>)
   1238a:	681a      	ldr	r2, [r3, #0]
   1238c:	23a8      	movs	r3, #168	; 0xa8
   1238e:	005b      	lsls	r3, r3, #1
   12390:	50d0      	str	r0, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/kernel/time_ticks.c:1033

} /* Endbody */
   12392:	4770      	bx	lr
   12394:	1fffe000 	.word	0x1fffe000

00012398 <Cpu_Interrupt>:
Cpu_Interrupt():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:301
** ===================================================================
*/
PE_ISR(Cpu_Interrupt)
{
  /* This code can be changed using the CPU component property "Build Options / Unhandled int code" */
  PE_DEBUGHALT();
   12398:	beff      	bkpt	0x00ff
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:302
}
   1239a:	4770      	bx	lr

0001239c <__init_hardware>:
__init_hardware():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:316

  /*** !!! Here you can place your own code before PE initialization using property "User code before PE initialization" on the build options tab. !!! ***/

  /*** ### MKL46Z256VMC4 "Cpu" init code ... ***/
  /*** PE initialization code after reset ***/
  SCB_VTOR = (uint32_t)(&__vect_table); /* Set the interrupt vector table position */
   1239c:	4b39      	ldr	r3, [pc, #228]	; (12484 <__init_hardware+0xe8>)
   1239e:	4a3a      	ldr	r2, [pc, #232]	; (12488 <__init_hardware+0xec>)
   123a0:	493a      	ldr	r1, [pc, #232]	; (1248c <__init_hardware+0xf0>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:310
/*** !!! Here you can place your own code using property "User data declarations" on the build options tab. !!! ***/

/*lint -esym(765,__init_hardware) Disable MISRA rule (8.10) checking for symbols (__init_hardware). The function is linked to the EWL library */
/*lint -esym(765,Cpu_Interrupt) Disable MISRA rule (8.10) checking for symbols (Cpu_Interrupt). */
void __init_hardware(void)
{
   123a2:	b510      	push	{r4, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:316

  /*** !!! Here you can place your own code before PE initialization using property "User code before PE initialization" on the build options tab. !!! ***/

  /*** ### MKL46Z256VMC4 "Cpu" init code ... ***/
  /*** PE initialization code after reset ***/
  SCB_VTOR = (uint32_t)(&__vect_table); /* Set the interrupt vector table position */
   123a4:	50d1      	str	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:319
  /* Disable the WDOG module */
  /* SIM_COPC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COPT=0,COPCLKS=0,COPW=0 */
  SIM_COPC = SIM_COPC_COPT(0x00);
   123a6:	4b3a      	ldr	r3, [pc, #232]	; (12490 <__init_hardware+0xf4>)
   123a8:	2288      	movs	r2, #136	; 0x88
   123aa:	2100      	movs	r1, #0
   123ac:	0152      	lsls	r2, r2, #5
   123ae:	5099      	str	r1, [r3, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:323

  /* System clock initialization */
  /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=3,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
  SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x03)); /* Set the system prescalers to safe value */
   123b0:	4a38      	ldr	r2, [pc, #224]	; (12494 <__init_hardware+0xf8>)
   123b2:	21c0      	movs	r1, #192	; 0xc0
   123b4:	0289      	lsls	r1, r1, #10
   123b6:	5099      	str	r1, [r3, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:325
  /* SIM_SCGC5: PORTE=1,PORTD=1,PORTC=1,PORTA=1 */
  SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK |
   123b8:	4a37      	ldr	r2, [pc, #220]	; (12498 <__init_hardware+0xfc>)
   123ba:	21e8      	movs	r1, #232	; 0xe8
   123bc:	5898      	ldr	r0, [r3, r2]
   123be:	0189      	lsls	r1, r1, #6
   123c0:	4301      	orrs	r1, r0
   123c2:	5099      	str	r1, [r3, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:330
               SIM_SCGC5_PORTD_MASK |
               SIM_SCGC5_PORTC_MASK |
               SIM_SCGC5_PORTA_MASK;   /* Enable clock gate for ports to enable pin routing */
  /* SIM_SCGC5: LPTMR=1 */
  SIM_SCGC5 |= SIM_SCGC5_LPTMR_MASK;
   123c4:	5898      	ldr	r0, [r3, r2]
   123c6:	2101      	movs	r1, #1
   123c8:	4301      	orrs	r1, r0
   123ca:	5099      	str	r1, [r3, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:331
  if ((PMC_REGSC & PMC_REGSC_ACKISO_MASK) != 0x0U) {
   123cc:	4b33      	ldr	r3, [pc, #204]	; (1249c <__init_hardware+0x100>)
   123ce:	789a      	ldrb	r2, [r3, #2]
   123d0:	0711      	lsls	r1, r2, #28
   123d2:	d504      	bpl.n	123de <__init_hardware+0x42>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:333
    /* PMC_REGSC: ACKISO=1 */
    PMC_REGSC |= PMC_REGSC_ACKISO_MASK; /* Release IO pads after wakeup from VLLS mode. */
   123d4:	7899      	ldrb	r1, [r3, #2]
   123d6:	2208      	movs	r2, #8
   123d8:	430a      	orrs	r2, r1
   123da:	b2d2      	uxtb	r2, r2
   123dc:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:336
  }
  /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=1,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
  SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x01)); /* Update system prescalers */
   123de:	4b2c      	ldr	r3, [pc, #176]	; (12490 <__init_hardware+0xf4>)
   123e0:	4a2c      	ldr	r2, [pc, #176]	; (12494 <__init_hardware+0xf8>)
   123e2:	2180      	movs	r1, #128	; 0x80
   123e4:	0249      	lsls	r1, r1, #9
   123e6:	5099      	str	r1, [r3, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:338
  /* SIM_SOPT2: ??=0,PLLFLLSEL=1 */
  SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
   123e8:	4a2d      	ldr	r2, [pc, #180]	; (124a0 <__init_hardware+0x104>)
   123ea:	482e      	ldr	r0, [pc, #184]	; (124a4 <__init_hardware+0x108>)
   123ec:	589c      	ldr	r4, [r3, r2]
   123ee:	4020      	ands	r0, r4
   123f0:	4301      	orrs	r1, r0
   123f2:	5099      	str	r1, [r3, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:344
               0x00020000U
              )) | (uint32_t)(
               SIM_SOPT2_PLLFLLSEL_MASK
              ));                      /* Select PLL as a clock source for various peripherals */
  /* SIM_SOPT1: OSC32KSEL=3 */
  SIM_SOPT1 |= SIM_SOPT1_OSC32KSEL(0x03); /* LPO 1kHz oscillator drives 32 kHz clock for various peripherals */
   123f4:	6818      	ldr	r0, [r3, #0]
   123f6:	21c0      	movs	r1, #192	; 0xc0
   123f8:	0309      	lsls	r1, r1, #12
   123fa:	4301      	orrs	r1, r0
   123fc:	6019      	str	r1, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:346
  /* SIM_SOPT2: TPMSRC=1 */
  SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
   123fe:	5898      	ldr	r0, [r3, r2]
   12400:	4929      	ldr	r1, [pc, #164]	; (124a8 <__init_hardware+0x10c>)
   12402:	4001      	ands	r1, r0
   12404:	2080      	movs	r0, #128	; 0x80
   12406:	0440      	lsls	r0, r0, #17
   12408:	4301      	orrs	r1, r0
   1240a:	5099      	str	r1, [r3, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:352
               SIM_SOPT2_TPMSRC(0x02)
              )) | (uint32_t)(
               SIM_SOPT2_TPMSRC(0x01)
              ));                      /* Set the TPM clock */
  /* PORTA_PCR18: ISF=0,MUX=0 */
  PORTA_PCR18 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
   1240c:	4b27      	ldr	r3, [pc, #156]	; (124ac <__init_hardware+0x110>)
   1240e:	4a28      	ldr	r2, [pc, #160]	; (124b0 <__init_hardware+0x114>)
   12410:	6c99      	ldr	r1, [r3, #72]	; 0x48
   12412:	4011      	ands	r1, r2
   12414:	6499      	str	r1, [r3, #72]	; 0x48
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:354
  /* PORTA_PCR19: ISF=0,MUX=0 */
  PORTA_PCR19 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
   12416:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   12418:	400a      	ands	r2, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:357
  /* Switch to FBE Mode */
  /* MCG_C2: LOCRE0=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=0 */
  MCG_C2 = (uint8_t)((MCG_C2 & (uint8_t)~(uint8_t)(
   1241a:	4926      	ldr	r1, [pc, #152]	; (124b4 <__init_hardware+0x118>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:354
               SIM_SOPT2_TPMSRC(0x01)
              ));                      /* Set the TPM clock */
  /* PORTA_PCR18: ISF=0,MUX=0 */
  PORTA_PCR18 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
  /* PORTA_PCR19: ISF=0,MUX=0 */
  PORTA_PCR19 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
   1241c:	64da      	str	r2, [r3, #76]	; 0x4c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:357
  /* Switch to FBE Mode */
  /* MCG_C2: LOCRE0=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=0 */
  MCG_C2 = (uint8_t)((MCG_C2 & (uint8_t)~(uint8_t)(
   1241e:	784b      	ldrb	r3, [r1, #1]
   12420:	2240      	movs	r2, #64	; 0x40
   12422:	4013      	ands	r3, r2
   12424:	2224      	movs	r2, #36	; 0x24
   12426:	4313      	orrs	r3, r2
   12428:	704b      	strb	r3, [r1, #1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:368
           )) | (uint8_t)(
            MCG_C2_RANGE0(0x02) |
            MCG_C2_EREFS0_MASK
           ));
  /* OSC0_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
  OSC0_CR = OSC_CR_ERCLKEN_MASK;
   1242a:	4b23      	ldr	r3, [pc, #140]	; (124b8 <__init_hardware+0x11c>)
   1242c:	2280      	movs	r2, #128	; 0x80
   1242e:	701a      	strb	r2, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:370
  /* MCG_C1: CLKS=2,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
  MCG_C1 = (MCG_C1_CLKS(0x02) | MCG_C1_FRDIV(0x03) | MCG_C1_IRCLKEN_MASK);
   12430:	239a      	movs	r3, #154	; 0x9a
   12432:	700b      	strb	r3, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:372
  /* MCG_C4: DMX32=0,DRST_DRS=0 */
  MCG_C4 &= (uint8_t)~(uint8_t)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));
   12434:	78cb      	ldrb	r3, [r1, #3]
   12436:	221f      	movs	r2, #31
   12438:	4013      	ands	r3, r2
   1243a:	70cb      	strb	r3, [r1, #3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:374
  /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=3 */
  MCG_C5 = MCG_C5_PRDIV0(0x03);
   1243c:	2303      	movs	r3, #3
   1243e:	710b      	strb	r3, [r1, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:376
  /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
  MCG_C6 = MCG_C6_VDIV0(0x00);
   12440:	2300      	movs	r3, #0
   12442:	714b      	strb	r3, [r1, #5]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:377
  while((MCG_S & MCG_S_IREFST_MASK) != 0x00U) { /* Check that the source of the FLL reference clock is the external reference clock. */
   12444:	2210      	movs	r2, #16
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:377 (discriminator 1)
   12446:	798b      	ldrb	r3, [r1, #6]
   12448:	421a      	tst	r2, r3
   1244a:	d1fc      	bne.n	12446 <__init_hardware+0xaa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:379
  }
  while((MCG_S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG output */
   1244c:	4819      	ldr	r0, [pc, #100]	; (124b4 <__init_hardware+0x118>)
   1244e:	210c      	movs	r1, #12
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:379 (discriminator 1)
   12450:	7983      	ldrb	r3, [r0, #6]
   12452:	4a18      	ldr	r2, [pc, #96]	; (124b4 <__init_hardware+0x118>)
   12454:	400b      	ands	r3, r1
   12456:	2b08      	cmp	r3, #8
   12458:	d1fa      	bne.n	12450 <__init_hardware+0xb4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:383
  }
  /* Switch to PBE Mode */
  /* MCG_C6: LOLIE0=0,PLLS=1,CME0=0,VDIV0=0 */
  MCG_C6 = (MCG_C6_PLLS_MASK | MCG_C6_VDIV0(0x00));
   1245a:	2340      	movs	r3, #64	; 0x40
   1245c:	7153      	strb	r3, [r2, #5]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:384
  while((MCG_S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG output */
   1245e:	210c      	movs	r1, #12
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:384 (discriminator 1)
   12460:	7993      	ldrb	r3, [r2, #6]
   12462:	400b      	ands	r3, r1
   12464:	2b08      	cmp	r3, #8
   12466:	d1fb      	bne.n	12460 <__init_hardware+0xc4>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:386
  }
  while((MCG_S & MCG_S_LOCK0_MASK) == 0x00U) { /* Wait until locked */
   12468:	4812      	ldr	r0, [pc, #72]	; (124b4 <__init_hardware+0x118>)
   1246a:	2140      	movs	r1, #64	; 0x40
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:386 (discriminator 1)
   1246c:	7983      	ldrb	r3, [r0, #6]
   1246e:	4a11      	ldr	r2, [pc, #68]	; (124b4 <__init_hardware+0x118>)
   12470:	4219      	tst	r1, r3
   12472:	d0fb      	beq.n	1246c <__init_hardware+0xd0>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:390
  }
  /* Switch to PEE Mode */
  /* MCG_C1: CLKS=0,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
  MCG_C1 = (MCG_C1_CLKS(0x00) | MCG_C1_FRDIV(0x03) | MCG_C1_IRCLKEN_MASK);
   12474:	231a      	movs	r3, #26
   12476:	7013      	strb	r3, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:391
  while((MCG_S & 0x0CU) != 0x0CU) {    /* Wait until output of the PLL is selected */
   12478:	210c      	movs	r1, #12
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:391 (discriminator 1)
   1247a:	7993      	ldrb	r3, [r2, #6]
   1247c:	400b      	ands	r3, r1
   1247e:	2b0c      	cmp	r3, #12
   12480:	d1fb      	bne.n	1247a <__init_hardware+0xde>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:397
  }
  /*** End of PE initialization code after reset ***/

  /*** !!! Here you can place your own code after PE initialization using property "User code after PE initialization" on the build options tab. !!! ***/

}
   12482:	bd10      	pop	{r4, pc}
   12484:	00000d08 	.word	0x00000d08
   12488:	e000e000 	.word	0xe000e000
   1248c:	00000000 	.word	0x00000000
   12490:	40047000 	.word	0x40047000
   12494:	00001044 	.word	0x00001044
   12498:	00001038 	.word	0x00001038
   1249c:	4007d000 	.word	0x4007d000
   124a0:	00001004 	.word	0x00001004
   124a4:	fffcffff 	.word	0xfffcffff
   124a8:	fcffffff 	.word	0xfcffffff
   124ac:	40049000 	.word	0x40049000
   124b0:	fefff8ff 	.word	0xfefff8ff
   124b4:	40064000 	.word	0x40064000
   124b8:	40065000 	.word	0x40065000

000124bc <PE_low_level_init>:
PE_low_level_init():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:413
**         application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void PE_low_level_init(void)
{
   124bc:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:415
  #ifdef PEX_RTOS_INIT
    PEX_RTOS_INIT();                   /* Initialization of the selected RTOS. Macro is defined by the RTOS component. */
   124be:	4825      	ldr	r0, [pc, #148]	; (12554 <PE_low_level_init+0x98>)
   124c0:	f7ff f9f8 	bl	118b4 <_mqxlite_init>
   124c4:	2800      	cmp	r0, #0
   124c6:	d000      	beq.n	124ca <PE_low_level_init+0xe>
   124c8:	e7fe      	b.n	124c8 <PE_low_level_init+0xc>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:420
  #endif
      /* Initialization of the SIM module */
        /* Initialization of the RCM module */
  /* RCM_RPFW: RSTFLTSEL=0 */
  RCM_RPFW &= (uint8_t)~(uint8_t)(RCM_RPFW_RSTFLTSEL(0x1F));
   124ca:	4b23      	ldr	r3, [pc, #140]	; (12558 <PE_low_level_init+0x9c>)
   124cc:	211f      	movs	r1, #31
   124ce:	795a      	ldrb	r2, [r3, #5]
   124d0:	438a      	bics	r2, r1
   124d2:	715a      	strb	r2, [r3, #5]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:422
  /* RCM_RPFC: RSTFLTSS=0,RSTFLTSRW=0 */
  RCM_RPFC &= (uint8_t)~(uint8_t)(
   124d4:	791a      	ldrb	r2, [r3, #4]
   124d6:	2107      	movs	r1, #7
   124d8:	438a      	bics	r2, r1
   124da:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:429
               RCM_RPFC_RSTFLTSRW(0x03)
              );
        /* Initialization of the FTFL_FlashConfig module */
      /* Initialization of the PMC module */
  /* PMC_LVDSC1: LVDACK=1,LVDIE=0,LVDRE=1,LVDV=0 */
  PMC_LVDSC1 = (uint8_t)((PMC_LVDSC1 & (uint8_t)~(uint8_t)(
   124dc:	4b1f      	ldr	r3, [pc, #124]	; (1255c <PE_low_level_init+0xa0>)
   124de:	2273      	movs	r2, #115	; 0x73
   124e0:	7819      	ldrb	r1, [r3, #0]
   124e2:	4391      	bics	r1, r2
   124e4:	2250      	movs	r2, #80	; 0x50
   124e6:	430a      	orrs	r2, r1
   124e8:	701a      	strb	r2, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:437
               )) | (uint8_t)(
                PMC_LVDSC1_LVDACK_MASK |
                PMC_LVDSC1_LVDRE_MASK
               ));
  /* PMC_LVDSC2: LVWACK=1,LVWIE=0,LVWV=0 */
  PMC_LVDSC2 = (uint8_t)((PMC_LVDSC2 & (uint8_t)~(uint8_t)(
   124ea:	7859      	ldrb	r1, [r3, #1]
   124ec:	2263      	movs	r2, #99	; 0x63
   124ee:	4391      	bics	r1, r2
   124f0:	2240      	movs	r2, #64	; 0x40
   124f2:	430a      	orrs	r2, r1
   124f4:	705a      	strb	r2, [r3, #1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:444
                PMC_LVDSC2_LVWV(0x03)
               )) | (uint8_t)(
                PMC_LVDSC2_LVWACK_MASK
               ));
  /* PMC_REGSC: BGEN=0,ACKISO=0,BGBE=0 */
  PMC_REGSC &= (uint8_t)~(uint8_t)(
   124f6:	789a      	ldrb	r2, [r3, #2]
   124f8:	2119      	movs	r1, #25
   124fa:	438a      	bics	r2, r1
   124fc:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:450
                PMC_REGSC_BGEN_MASK |
                PMC_REGSC_ACKISO_MASK |
                PMC_REGSC_BGBE_MASK
               );
  /* SMC_PMPROT: ??=0,??=0,AVLP=0,??=0,ALLS=0,??=0,AVLLS=0,??=0 */
  SMC_PMPROT = 0x00U;                  /* Setup Power mode protection register */
   124fe:	4b18      	ldr	r3, [pc, #96]	; (12560 <PE_low_level_init+0xa4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:453
  /* Common initialization of the CPU registers */
  /* PORTA_PCR20: ISF=0,MUX=7 */
  PORTA_PCR20 = (uint32_t)((PORTA_PCR20 & (uint32_t)~(uint32_t)(
   12500:	4a18      	ldr	r2, [pc, #96]	; (12564 <PE_low_level_init+0xa8>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:450
                PMC_REGSC_BGEN_MASK |
                PMC_REGSC_ACKISO_MASK |
                PMC_REGSC_BGBE_MASK
               );
  /* SMC_PMPROT: ??=0,??=0,AVLP=0,??=0,ALLS=0,??=0,AVLLS=0,??=0 */
  SMC_PMPROT = 0x00U;                  /* Setup Power mode protection register */
   12502:	7018      	strb	r0, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:453
  /* Common initialization of the CPU registers */
  /* PORTA_PCR20: ISF=0,MUX=7 */
  PORTA_PCR20 = (uint32_t)((PORTA_PCR20 & (uint32_t)~(uint32_t)(
   12504:	4b18      	ldr	r3, [pc, #96]	; (12568 <PE_low_level_init+0xac>)
   12506:	6d19      	ldr	r1, [r3, #80]	; 0x50
   12508:	4011      	ands	r1, r2
   1250a:	22e0      	movs	r2, #224	; 0xe0
   1250c:	00d2      	lsls	r2, r2, #3
   1250e:	430a      	orrs	r2, r1
   12510:	651a      	str	r2, [r3, #80]	; 0x50
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:459
                 PORT_PCR_ISF_MASK
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x07)
                ));
  /* NVIC_IPR1: PRI_6=0 */
  NVIC_IPR1 &= (uint32_t)~(uint32_t)(NVIC_IP_PRI_6(0xFF));
   12512:	4a16      	ldr	r2, [pc, #88]	; (1256c <PE_low_level_init+0xb0>)
   12514:	23c1      	movs	r3, #193	; 0xc1
   12516:	009b      	lsls	r3, r3, #2
   12518:	58d0      	ldr	r0, [r2, r3]
   1251a:	4915      	ldr	r1, [pc, #84]	; (12570 <PE_low_level_init+0xb4>)
   1251c:	4001      	ands	r1, r0
   1251e:	50d1      	str	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:461
  /* ### BitIO_LDD "LED_RED" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)LED_RED_Init(NULL);
   12520:	2000      	movs	r0, #0
   12522:	f000 fafb 	bl	12b1c <LED_RED_Init>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:463
  /* ### BitIO_LDD "LED_GREEN" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)LED_GREEN_Init(NULL);
   12526:	2000      	movs	r0, #0
   12528:	f000 facc 	bl	12ac4 <LED_GREEN_Init>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:465
  /* ### BitIO_LDD "LED_BLUE" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)LED_BLUE_Init(NULL);
   1252c:	2000      	movs	r0, #0
   1252e:	f000 fa9f 	bl	12a70 <LED_BLUE_Init>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:467
  /* ### TimerUnit_LDD "FTM" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)FTM_Init(NULL);
   12532:	2000      	movs	r0, #0
   12534:	f000 f82a 	bl	1258c <FTM_Init>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:469
  /* ### Serial_LDD "UART" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)UART_Init(NULL);
   12538:	2000      	movs	r0, #0
   1253a:	f000 fc87 	bl	12e4c <UART_Init>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:471
  /* ### I2C_LDD "I2C" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)I2C_Init(NULL);
   1253e:	2000      	movs	r0, #0
   12540:	f000 f926 	bl	12790 <I2C_Init>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:473
  /* ### BitIO_LDD "TestPin_KF_Time" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)TestPin_KF_Time_Init(NULL);
   12544:	2000      	movs	r0, #0
   12546:	f000 fbaf 	bl	12ca8 <TestPin_KF_Time_Init>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:475
  /* ### BitIO_LDD "TestPin_MagCal_Time" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)TestPin_MagCal_Time_Init(NULL);
   1254a:	2000      	movs	r0, #0
   1254c:	f000 fbe0 	bl	12d10 <TestPin_MagCal_Time_Init>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/Cpu.c:476
}
   12550:	bd08      	pop	{r3, pc}
   12552:	46c0      	nop			; (mov r8, r8)
   12554:	00015278 	.word	0x00015278
   12558:	4007f000 	.word	0x4007f000
   1255c:	4007d000 	.word	0x4007d000
   12560:	4007e000 	.word	0x4007e000
   12564:	fefff8ff 	.word	0xfefff8ff
   12568:	40049000 	.word	0x40049000
   1256c:	e000e100 	.word	0xe000e100
   12570:	ff00ffff 	.word	0xff00ffff

00012574 <FTM_Interrupt>:
FTM_Interrupt():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:294
**         and eventually invokes event(s) of the component.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void FTM_Interrupt(LDD_RTOS_TISRParameter _isrParameter)
{
   12574:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:298
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  FTM_TDeviceDataPtr DeviceDataPrv = (FTM_TDeviceDataPtr)_isrParameter;

  LPTMR_PDD_ClearInterruptFlag(LPTMR0_BASE_PTR); /* Clear interrupt flag */
   12576:	4b04      	ldr	r3, [pc, #16]	; (12588 <FTM_Interrupt+0x14>)
   12578:	2280      	movs	r2, #128	; 0x80
   1257a:	6819      	ldr	r1, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:299
  FTM_OnCounterRestart(DeviceDataPrv->UserDataPtr); /* Invoke OnCounterRestart event */
   1257c:	6880      	ldr	r0, [r0, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:298
void FTM_Interrupt(LDD_RTOS_TISRParameter _isrParameter)
{
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  FTM_TDeviceDataPtr DeviceDataPrv = (FTM_TDeviceDataPtr)_isrParameter;

  LPTMR_PDD_ClearInterruptFlag(LPTMR0_BASE_PTR); /* Clear interrupt flag */
   1257e:	430a      	orrs	r2, r1
   12580:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:299
  FTM_OnCounterRestart(DeviceDataPrv->UserDataPtr); /* Invoke OnCounterRestart event */
   12582:	f7f0 fadf 	bl	2b44 <FTM_OnCounterRestart>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:300
}
   12586:	bd08      	pop	{r3, pc}
   12588:	40040000 	.word	0x40040000

0001258c <FTM_Init>:
FTM_Init():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:153
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* FTM_Init(LDD_TUserData *UserDataPtr)
{
   1258c:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:158
  /* Allocate device structure */
  FTM_TDeviceData *DeviceDataPrv;
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   1258e:	4c16      	ldr	r4, [pc, #88]	; (125e8 <FTM_Init+0x5c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:173
  /* LPTMR0_CMR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COMPARE=0x1387 */
  LPTMR0_CMR = LPTMR_CMR_COMPARE(0x1387); /* Set up compare register */
  /* LPTMR0_PSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,PRESCALE=2,PBYP=0,PCS=3 */
  LPTMR0_PSR = (LPTMR_PSR_PRESCALE(0x02) | LPTMR_PSR_PCS(0x03)); /* Set up prescaler register */
  /* NVIC_IPR7: PRI_28=0x80 */
  NVIC_IPR7 = (uint32_t)((NVIC_IPR7 & (uint32_t)~(uint32_t)(
   12590:	26ff      	movs	r6, #255	; 0xff
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:158
{
  /* Allocate device structure */
  FTM_TDeviceData *DeviceDataPrv;
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   12592:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:162
  /* Interrupt vector(s) allocation */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrData = _int_get_isr_data(LDD_ivIndex_INT_LPTimer);
   12594:	202c      	movs	r0, #44	; 0x2c
   12596:	f7fe fe65 	bl	11264 <_int_get_isr_data>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:163
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrFunction = _int_install_isr(LDD_ivIndex_INT_LPTimer, FTM_Interrupt, DeviceDataPrv);
   1259a:	1c22      	adds	r2, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:162
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Interrupt vector(s) allocation */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrData = _int_get_isr_data(LDD_ivIndex_INT_LPTimer);
   1259c:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:163
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrFunction = _int_install_isr(LDD_ivIndex_INT_LPTimer, FTM_Interrupt, DeviceDataPrv);
   1259e:	4913      	ldr	r1, [pc, #76]	; (125ec <FTM_Init+0x60>)
   125a0:	202c      	movs	r0, #44	; 0x2c
   125a2:	f7fe fe7f 	bl	112a4 <_int_install_isr>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:165
  /* SIM_SCGC5: LPTMR=1 */
  SIM_SCGC5 |= SIM_SCGC5_LPTMR_MASK;
   125a6:	4a12      	ldr	r2, [pc, #72]	; (125f0 <FTM_Init+0x64>)
   125a8:	4b12      	ldr	r3, [pc, #72]	; (125f4 <FTM_Init+0x68>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:163
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Interrupt vector(s) allocation */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrData = _int_get_isr_data(LDD_ivIndex_INT_LPTimer);
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrFunction = _int_install_isr(LDD_ivIndex_INT_LPTimer, FTM_Interrupt, DeviceDataPrv);
   125aa:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:165
  /* SIM_SCGC5: LPTMR=1 */
  SIM_SCGC5 |= SIM_SCGC5_LPTMR_MASK;
   125ac:	58d0      	ldr	r0, [r2, r3]
   125ae:	2101      	movs	r1, #1
   125b0:	4301      	orrs	r1, r0
   125b2:	50d1      	str	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:167
  /* LPTMR0_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,TCF=1,TIE=0,TPS=0,TPP=0,TFC=0,TMS=0,TEN=0 */
  LPTMR0_CSR = (LPTMR_CSR_TCF_MASK | LPTMR_CSR_TPS(0x00)); /* Clear control register */
   125b4:	4b10      	ldr	r3, [pc, #64]	; (125f8 <FTM_Init+0x6c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:169
  /* LPTMR0_CMR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COMPARE=0x1387 */
  LPTMR0_CMR = LPTMR_CMR_COMPARE(0x1387); /* Set up compare register */
   125b6:	4a11      	ldr	r2, [pc, #68]	; (125fc <FTM_Init+0x70>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:167
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrData = _int_get_isr_data(LDD_ivIndex_INT_LPTimer);
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrFunction = _int_install_isr(LDD_ivIndex_INT_LPTimer, FTM_Interrupt, DeviceDataPrv);
  /* SIM_SCGC5: LPTMR=1 */
  SIM_SCGC5 |= SIM_SCGC5_LPTMR_MASK;
  /* LPTMR0_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,TCF=1,TIE=0,TPS=0,TPP=0,TFC=0,TMS=0,TEN=0 */
  LPTMR0_CSR = (LPTMR_CSR_TCF_MASK | LPTMR_CSR_TPS(0x00)); /* Clear control register */
   125b8:	2080      	movs	r0, #128	; 0x80
   125ba:	6018      	str	r0, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:169
  /* LPTMR0_CMR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COMPARE=0x1387 */
  LPTMR0_CMR = LPTMR_CMR_COMPARE(0x1387); /* Set up compare register */
   125bc:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:171
  /* LPTMR0_PSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,PRESCALE=2,PBYP=0,PCS=3 */
  LPTMR0_PSR = (LPTMR_PSR_PRESCALE(0x02) | LPTMR_PSR_PCS(0x03)); /* Set up prescaler register */
   125be:	2213      	movs	r2, #19
   125c0:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:173
  /* NVIC_IPR7: PRI_28=0x80 */
  NVIC_IPR7 = (uint32_t)((NVIC_IPR7 & (uint32_t)~(uint32_t)(
   125c2:	21c7      	movs	r1, #199	; 0xc7
   125c4:	4a0e      	ldr	r2, [pc, #56]	; (12600 <FTM_Init+0x74>)
   125c6:	0089      	lsls	r1, r1, #2
   125c8:	5855      	ldr	r5, [r2, r1]
   125ca:	43b5      	bics	r5, r6
   125cc:	4328      	orrs	r0, r5
   125ce:	5050      	str	r0, [r2, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:179
               NVIC_IP_PRI_28(0x7F)
              )) | (uint32_t)(
               NVIC_IP_PRI_28(0x80)
              ));
  /* NVIC_ISER: SETENA|=0x10000000 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x10000000);
   125d0:	6810      	ldr	r0, [r2, #0]
   125d2:	2180      	movs	r1, #128	; 0x80
   125d4:	0549      	lsls	r1, r1, #21
   125d6:	4301      	orrs	r1, r0
   125d8:	6011      	str	r1, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:181
  /* LPTMR0_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,TCF=0,TIE=1,TPS=0,TPP=0,TFC=0,TMS=0,TEN=1 */
  LPTMR0_CSR = (LPTMR_CSR_TIE_MASK | LPTMR_CSR_TPS(0x00) | LPTMR_CSR_TEN_MASK); /* Set up control register */
   125da:	2241      	movs	r2, #65	; 0x41
   125dc:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:183
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_FTM_ID,DeviceDataPrv);
   125de:	4b09      	ldr	r3, [pc, #36]	; (12604 <FTM_Init+0x78>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:185
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
}
   125e0:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:183
  /* NVIC_ISER: SETENA|=0x10000000 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x10000000);
  /* LPTMR0_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,TCF=0,TIE=1,TPS=0,TPP=0,TFC=0,TMS=0,TEN=1 */
  LPTMR0_CSR = (LPTMR_CSR_TIE_MASK | LPTMR_CSR_TPS(0x00) | LPTMR_CSR_TEN_MASK); /* Set up control register */
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_FTM_ID,DeviceDataPrv);
   125e2:	611c      	str	r4, [r3, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:185
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
}
   125e4:	bd70      	pop	{r4, r5, r6, pc}
   125e6:	46c0      	nop			; (mov r8, r8)
   125e8:	1fffe0c8 	.word	0x1fffe0c8
   125ec:	00012575 	.word	0x00012575
   125f0:	40047000 	.word	0x40047000
   125f4:	00001038 	.word	0x00001038
   125f8:	40040000 	.word	0x40040000
   125fc:	00001387 	.word	0x00001387
   12600:	e000e100 	.word	0xe000e100
   12604:	1fffe108 	.word	0x1fffe108

00012608 <FTM_SetPeriodTicks>:
FTM_SetPeriodTicks():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:219
LDD_TError FTM_SetPeriodTicks(LDD_TDeviceData *DeviceDataPtr, FTM_TValueType Ticks)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  /* Parameter test - this test can be disabled by setting the "Ignore range checking"
     property to the "yes" value in the "Configuration inspector" */
  if (Ticks > 65535U) {                /* Is the given value out of range? */
   12608:	4b05      	ldr	r3, [pc, #20]	; (12620 <FTM_SetPeriodTicks+0x18>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:220
    return ERR_PARAM_TICKS;            /* If yes then error */
   1260a:	2098      	movs	r0, #152	; 0x98
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:219
LDD_TError FTM_SetPeriodTicks(LDD_TDeviceData *DeviceDataPtr, FTM_TValueType Ticks)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  /* Parameter test - this test can be disabled by setting the "Ignore range checking"
     property to the "yes" value in the "Configuration inspector" */
  if (Ticks > 65535U) {                /* Is the given value out of range? */
   1260c:	4299      	cmp	r1, r3
   1260e:	d900      	bls.n	12612 <FTM_SetPeriodTicks+0xa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:224
    return ERR_PARAM_TICKS;            /* If yes then error */
  }
  LPTMR_PDD_WriteCompareReg(LPTMR0_BASE_PTR, (uint16_t)(--Ticks));
  return ERR_OK;                       /* OK */
}
   12610:	4770      	bx	lr
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:222
  /* Parameter test - this test can be disabled by setting the "Ignore range checking"
     property to the "yes" value in the "Configuration inspector" */
  if (Ticks > 65535U) {                /* Is the given value out of range? */
    return ERR_PARAM_TICKS;            /* If yes then error */
  }
  LPTMR_PDD_WriteCompareReg(LPTMR0_BASE_PTR, (uint16_t)(--Ticks));
   12612:	3901      	subs	r1, #1
   12614:	0409      	lsls	r1, r1, #16
   12616:	4b03      	ldr	r3, [pc, #12]	; (12624 <FTM_SetPeriodTicks+0x1c>)
   12618:	0c09      	lsrs	r1, r1, #16
   1261a:	6099      	str	r1, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/FTM.c:223
  return ERR_OK;                       /* OK */
   1261c:	2000      	movs	r0, #0
   1261e:	e7f7      	b.n	12610 <FTM_SetPeriodTicks+0x8>
   12620:	0000ffff 	.word	0x0000ffff
   12624:	40040000 	.word	0x40040000

00012628 <I2C_Interrupt>:
I2C_Interrupt():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:222
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

void I2C_Interrupt(LDD_RTOS_TISRParameter _isrParameter)
{
   12628:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:228
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  I2C_TDeviceDataPtr DeviceDataPrv = (I2C_TDeviceDataPtr)_isrParameter;
  LDD_I2C_TErrorMask ErrorMask = 0x00U; /* Temporary variable for error mask */
  register uint8_t Status;             /* Temporary variable for status register */

  Status = I2C_PDD_ReadStatusReg(I2C1_BASE_PTR); /* Safe status register */
   1262a:	4b58      	ldr	r3, [pc, #352]	; (1278c <I2C_Interrupt+0x164>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:229
  I2C_PDD_ClearInterruptFlags(I2C1_BASE_PTR, (Status)); /* Clear interrupt flag */
   1262c:	2412      	movs	r4, #18
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:228
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  I2C_TDeviceDataPtr DeviceDataPrv = (I2C_TDeviceDataPtr)_isrParameter;
  LDD_I2C_TErrorMask ErrorMask = 0x00U; /* Temporary variable for error mask */
  register uint8_t Status;             /* Temporary variable for status register */

  Status = I2C_PDD_ReadStatusReg(I2C1_BASE_PTR); /* Safe status register */
   1262e:	78da      	ldrb	r2, [r3, #3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:229
  I2C_PDD_ClearInterruptFlags(I2C1_BASE_PTR, (Status)); /* Clear interrupt flag */
   12630:	78d9      	ldrb	r1, [r3, #3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:228
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  I2C_TDeviceDataPtr DeviceDataPrv = (I2C_TDeviceDataPtr)_isrParameter;
  LDD_I2C_TErrorMask ErrorMask = 0x00U; /* Temporary variable for error mask */
  register uint8_t Status;             /* Temporary variable for status register */

  Status = I2C_PDD_ReadStatusReg(I2C1_BASE_PTR); /* Safe status register */
   12632:	b2d2      	uxtb	r2, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:229
  I2C_PDD_ClearInterruptFlags(I2C1_BASE_PTR, (Status)); /* Clear interrupt flag */
   12634:	43a1      	bics	r1, r4
   12636:	4311      	orrs	r1, r2
   12638:	70d9      	strb	r1, [r3, #3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:230
  if (I2C_PDD_GetMasterMode(I2C1_BASE_PTR) == I2C_PDD_MASTER_MODE) { /* Is device in master mode? */
   1263a:	7899      	ldrb	r1, [r3, #2]
   1263c:	2420      	movs	r4, #32
   1263e:	4021      	ands	r1, r4
   12640:	d023      	beq.n	1268a <I2C_Interrupt+0x62>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:231
    if (I2C_PDD_GetTransmitMode(I2C1_BASE_PTR) == I2C_PDD_TX_DIRECTION) { /* Is device in Tx mode? */
   12642:	789d      	ldrb	r5, [r3, #2]
   12644:	2110      	movs	r1, #16
   12646:	4229      	tst	r1, r5
   12648:	d031      	beq.n	126ae <I2C_Interrupt+0x86>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:232
      if ((Status & I2C_PDD_RX_ACKNOWLEDGE) != 0x00U){ /* NACK received? */
   1264a:	2501      	movs	r5, #1
   1264c:	4215      	tst	r5, r2
   1264e:	d150      	bne.n	126f2 <I2C_Interrupt+0xca>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:241
        DeviceDataPrv->InpLenM = 0x00U; /* No character for reception */
        DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* No character for sending or reception */
        DeviceDataPrv->SerFlag |= (ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Set the flag */
        ErrorMask |= LDD_I2C_MASTER_NACK; /* Set the Master Nack error mask */
      } else {
        if ((DeviceDataPrv->SerFlag & ADDR_COMPLETE) != 0x00U) { /* If 10-bit addr has been completed */
   12650:	7802      	ldrb	r2, [r0, #0]
   12652:	0796      	lsls	r6, r2, #30
   12654:	d564      	bpl.n	12720 <I2C_Interrupt+0xf8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:242
          if (DeviceDataPrv->OutLenM != 0x00U) { /* Is any char. for transmitting? */
   12656:	8a06      	ldrh	r6, [r0, #16]
   12658:	2e00      	cmp	r6, #0
   1265a:	d000      	beq.n	1265e <I2C_Interrupt+0x36>
   1265c:	e067      	b.n	1272e <I2C_Interrupt+0x106>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:246
            DeviceDataPrv->OutLenM--;  /* Decrease number of chars for the transmit */
            I2C_PDD_WriteDataReg(I2C1_BASE_PTR, *(DeviceDataPrv->OutPtrM)++); /* Send character */
          } else {
            if (DeviceDataPrv->InpLenM != 0x00U) { /* Is any char. for reception? */
   1265e:	8906      	ldrh	r6, [r0, #8]
   12660:	2e00      	cmp	r6, #0
   12662:	d100      	bne.n	12666 <I2C_Interrupt+0x3e>
   12664:	e06b      	b.n	1273e <I2C_Interrupt+0x116>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:247
              if ((DeviceDataPrv->SerFlag & REP_ADDR_COMPLETE) != 0x00U) { /* If repeated start and addr tx has been completed for 10-bit mode ?*/
   12666:	2104      	movs	r1, #4
   12668:	0754      	lsls	r4, r2, #29
   1266a:	d400      	bmi.n	1266e <I2C_Interrupt+0x46>
   1266c:	e074      	b.n	12758 <I2C_Interrupt+0x130>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:248
                if (DeviceDataPrv->InpLenM == 0x01U) { /* If only one char to receive */
   1266e:	2e01      	cmp	r6, #1
   12670:	d100      	bne.n	12674 <I2C_Interrupt+0x4c>
   12672:	e085      	b.n	12780 <I2C_Interrupt+0x158>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:251
                  I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_DISABLE); /* then transmit ACK disable */
                } else {
                  I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_ENABLE); /* else transmit ACK enable */
   12674:	789a      	ldrb	r2, [r3, #2]
   12676:	2108      	movs	r1, #8
   12678:	438a      	bics	r2, r1
   1267a:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:253 (discriminator 3)
                }
                I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_RX_DIRECTION); /* Switch to Rx mode */
   1267c:	4b43      	ldr	r3, [pc, #268]	; (1278c <I2C_Interrupt+0x164>)
   1267e:	2110      	movs	r1, #16
   12680:	789a      	ldrb	r2, [r3, #2]
   12682:	438a      	bics	r2, r1
   12684:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:254 (discriminator 3)
                (void)I2C_PDD_ReadDataReg(I2C1_BASE_PTR); /* Dummy read character */
   12686:	791b      	ldrb	r3, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:305
    }
  }
  if (ErrorMask != 0x00U) {            /* Is any error mask set? */
    DeviceDataPrv->ErrorMask |= ErrorMask; /* Update list of error mask value */
  }
}
   12688:	bd70      	pop	{r4, r5, r6, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:293
        DeviceDataPrv->StatusFlag |= MASTER_BLOCK_RECEIVED; /* Set data block received flag */
        I2C_OnMasterBlockReceived(DeviceDataPrv->UserData); /* Invoke OnMasterBlockReceived event */
      }
    }
  } else {
    if ((Status & I2C_PDD_ARBIT_LOST) != 0x00U) { /* Arbitration lost? */
   1268a:	2410      	movs	r4, #16
   1268c:	4214      	tst	r4, r2
   1268e:	d0fb      	beq.n	12688 <I2C_Interrupt+0x60>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:294
      DeviceDataPrv->OutLenM = 0x00U;  /* Any character is not for sent */
   12690:	8201      	strh	r1, [r0, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:295
      DeviceDataPrv->InpLenM = 0x00U;  /* Any character is not for reception */
   12692:	8101      	strh	r1, [r0, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:297
      DeviceDataPrv->SendStop = LDD_I2C_SEND_STOP; /* Set variable for sending stop condition (for master mode) */
      DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* Any character is not for sent or reception*/
   12694:	7801      	ldrb	r1, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:296
    }
  } else {
    if ((Status & I2C_PDD_ARBIT_LOST) != 0x00U) { /* Arbitration lost? */
      DeviceDataPrv->OutLenM = 0x00U;  /* Any character is not for sent */
      DeviceDataPrv->InpLenM = 0x00U;  /* Any character is not for reception */
      DeviceDataPrv->SendStop = LDD_I2C_SEND_STOP; /* Set variable for sending stop condition (for master mode) */
   12696:	2201      	movs	r2, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:297
      DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* Any character is not for sent or reception*/
   12698:	4391      	bics	r1, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:296
    }
  } else {
    if ((Status & I2C_PDD_ARBIT_LOST) != 0x00U) { /* Arbitration lost? */
      DeviceDataPrv->OutLenM = 0x00U;  /* Any character is not for sent */
      DeviceDataPrv->InpLenM = 0x00U;  /* Any character is not for reception */
      DeviceDataPrv->SendStop = LDD_I2C_SEND_STOP; /* Set variable for sending stop condition (for master mode) */
   1269a:	7082      	strb	r2, [r0, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:297
      DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* Any character is not for sent or reception*/
   1269c:	7001      	strb	r1, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:298
      I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_RX_DIRECTION); /* Switch to Rx mode */
   1269e:	789a      	ldrb	r2, [r3, #2]
   126a0:	43a2      	bics	r2, r4
   126a2:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:299
      ErrorMask |= LDD_I2C_ARBIT_LOST; /* Set the ArbitLost error mask */
   126a4:	2204      	movs	r2, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:303
    }
  }
  if (ErrorMask != 0x00U) {            /* Is any error mask set? */
    DeviceDataPrv->ErrorMask |= ErrorMask; /* Update list of error mask value */
   126a6:	8883      	ldrh	r3, [r0, #4]
   126a8:	4313      	orrs	r3, r2
   126aa:	8083      	strh	r3, [r0, #4]
   126ac:	e7ec      	b.n	12688 <I2C_Interrupt+0x60>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:276
          I2C_PDD_WriteDataReg(I2C1_BASE_PTR, DeviceDataPrv->SlaveAddr); /* Send second part of the 10-bit addres */
          DeviceDataPrv->SerFlag |= (ADDR_COMPLETE); /* Address complete */
        }
      }
    } else {
      DeviceDataPrv->InpLenM--;        /* Decrease number of chars for the receive */
   126ae:	8902      	ldrh	r2, [r0, #8]
   126b0:	3a01      	subs	r2, #1
   126b2:	b292      	uxth	r2, r2
   126b4:	8102      	strh	r2, [r0, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:277
      if (DeviceDataPrv->InpLenM != 0x00U) { /* Is any char. for reception? */
   126b6:	2a00      	cmp	r2, #0
   126b8:	d12b      	bne.n	12712 <I2C_Interrupt+0xea>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:282
        if (DeviceDataPrv->InpLenM == 0x01U) {
          I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_DISABLE); /* Transmit NACK */
        }
      } else {
        DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* Clear flag "busy" */
   126ba:	7802      	ldrb	r2, [r0, #0]
   126bc:	2101      	movs	r1, #1
   126be:	438a      	bics	r2, r1
   126c0:	7002      	strb	r2, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:283
        I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_SLAVE_MODE); /* If no, switch device to slave mode (stop signal sent) */
   126c2:	789a      	ldrb	r2, [r3, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:284
        I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_ENABLE); /* Transmit ACK */
   126c4:	2108      	movs	r1, #8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:283
        if (DeviceDataPrv->InpLenM == 0x01U) {
          I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_DISABLE); /* Transmit NACK */
        }
      } else {
        DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* Clear flag "busy" */
        I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_SLAVE_MODE); /* If no, switch device to slave mode (stop signal sent) */
   126c6:	43a2      	bics	r2, r4
   126c8:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:284
        I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_ENABLE); /* Transmit ACK */
   126ca:	789a      	ldrb	r2, [r3, #2]
   126cc:	438a      	bics	r2, r1
   126ce:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:286
      }
      *(DeviceDataPrv->InpPtrM)++ = I2C_PDD_ReadDataReg(I2C1_BASE_PTR); /* Receive character */
   126d0:	68c3      	ldr	r3, [r0, #12]
   126d2:	1c5a      	adds	r2, r3, #1
   126d4:	60c2      	str	r2, [r0, #12]
   126d6:	4a2d      	ldr	r2, [pc, #180]	; (1278c <I2C_Interrupt+0x164>)
   126d8:	7912      	ldrb	r2, [r2, #4]
   126da:	701a      	strb	r2, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:287
      if (DeviceDataPrv->InpLenM == 0x00U) { /* Is any char. for reception? */
   126dc:	8903      	ldrh	r3, [r0, #8]
   126de:	2b00      	cmp	r3, #0
   126e0:	d1d2      	bne.n	12688 <I2C_Interrupt+0x60>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:288
        DeviceDataPrv->StatusFlag |= MASTER_BLOCK_RECEIVED; /* Set data block received flag */
   126e2:	7842      	ldrb	r2, [r0, #1]
   126e4:	2302      	movs	r3, #2
   126e6:	4313      	orrs	r3, r2
   126e8:	7043      	strb	r3, [r0, #1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:289
        I2C_OnMasterBlockReceived(DeviceDataPrv->UserData); /* Invoke OnMasterBlockReceived event */
   126ea:	6a00      	ldr	r0, [r0, #32]
   126ec:	f7f0 fa44 	bl	2b78 <I2C_OnMasterBlockReceived>
   126f0:	e7ca      	b.n	12688 <I2C_Interrupt+0x60>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:233
  Status = I2C_PDD_ReadStatusReg(I2C1_BASE_PTR); /* Safe status register */
  I2C_PDD_ClearInterruptFlags(I2C1_BASE_PTR, (Status)); /* Clear interrupt flag */
  if (I2C_PDD_GetMasterMode(I2C1_BASE_PTR) == I2C_PDD_MASTER_MODE) { /* Is device in master mode? */
    if (I2C_PDD_GetTransmitMode(I2C1_BASE_PTR) == I2C_PDD_TX_DIRECTION) { /* Is device in Tx mode? */
      if ((Status & I2C_PDD_RX_ACKNOWLEDGE) != 0x00U){ /* NACK received? */
        I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_SLAVE_MODE); /* Switch device to slave mode (stop signal sent) */
   126f2:	789a      	ldrb	r2, [r3, #2]
   126f4:	43a2      	bics	r2, r4
   126f6:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:234
        I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_RX_DIRECTION); /* Switch to Rx mode */
   126f8:	789a      	ldrb	r2, [r3, #2]
   126fa:	438a      	bics	r2, r1
   126fc:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:235
        DeviceDataPrv->OutLenM = 0x00U; /* No character for sending */
   126fe:	2300      	movs	r3, #0
   12700:	8203      	strh	r3, [r0, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:236
        DeviceDataPrv->InpLenM = 0x00U; /* No character for reception */
   12702:	8103      	strh	r3, [r0, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:237
        DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* No character for sending or reception */
   12704:	7803      	ldrb	r3, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:238
        DeviceDataPrv->SerFlag |= (ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Set the flag */
   12706:	2206      	movs	r2, #6
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:237
      if ((Status & I2C_PDD_RX_ACKNOWLEDGE) != 0x00U){ /* NACK received? */
        I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_SLAVE_MODE); /* Switch device to slave mode (stop signal sent) */
        I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_RX_DIRECTION); /* Switch to Rx mode */
        DeviceDataPrv->OutLenM = 0x00U; /* No character for sending */
        DeviceDataPrv->InpLenM = 0x00U; /* No character for reception */
        DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* No character for sending or reception */
   12708:	43ab      	bics	r3, r5
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:238
        DeviceDataPrv->SerFlag |= (ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Set the flag */
   1270a:	4313      	orrs	r3, r2
   1270c:	7003      	strb	r3, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:239
        ErrorMask |= LDD_I2C_MASTER_NACK; /* Set the Master Nack error mask */
   1270e:	2208      	movs	r2, #8
   12710:	e7c9      	b.n	126a6 <I2C_Interrupt+0x7e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:278
        }
      }
    } else {
      DeviceDataPrv->InpLenM--;        /* Decrease number of chars for the receive */
      if (DeviceDataPrv->InpLenM != 0x00U) { /* Is any char. for reception? */
        if (DeviceDataPrv->InpLenM == 0x01U) {
   12712:	2a01      	cmp	r2, #1
   12714:	d1dc      	bne.n	126d0 <I2C_Interrupt+0xa8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:279
          I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_DISABLE); /* Transmit NACK */
   12716:	7899      	ldrb	r1, [r3, #2]
   12718:	2208      	movs	r2, #8
   1271a:	430a      	orrs	r2, r1
   1271c:	709a      	strb	r2, [r3, #2]
   1271e:	e7d7      	b.n	126d0 <I2C_Interrupt+0xa8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:271
              DeviceDataPrv->StatusFlag |= MASTER_BLOCK_SENT; /* Set data block sent flag */
              I2C_OnMasterBlockSent(DeviceDataPrv->UserData); /* Invoke OnMasterBlockSent event */
            }
          }
        } else {
          I2C_PDD_WriteDataReg(I2C1_BASE_PTR, DeviceDataPrv->SlaveAddr); /* Send second part of the 10-bit addres */
   12720:	7982      	ldrb	r2, [r0, #6]
   12722:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:272
          DeviceDataPrv->SerFlag |= (ADDR_COMPLETE); /* Address complete */
   12724:	7802      	ldrb	r2, [r0, #0]
   12726:	2302      	movs	r3, #2
   12728:	4313      	orrs	r3, r2
   1272a:	7003      	strb	r3, [r0, #0]
   1272c:	e7ac      	b.n	12688 <I2C_Interrupt+0x60>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:244
        ErrorMask |= LDD_I2C_MASTER_NACK; /* Set the Master Nack error mask */
      } else {
        if ((DeviceDataPrv->SerFlag & ADDR_COMPLETE) != 0x00U) { /* If 10-bit addr has been completed */
          if (DeviceDataPrv->OutLenM != 0x00U) { /* Is any char. for transmitting? */
            DeviceDataPrv->OutLenM--;  /* Decrease number of chars for the transmit */
            I2C_PDD_WriteDataReg(I2C1_BASE_PTR, *(DeviceDataPrv->OutPtrM)++); /* Send character */
   1272e:	6942      	ldr	r2, [r0, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:243
        DeviceDataPrv->SerFlag |= (ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Set the flag */
        ErrorMask |= LDD_I2C_MASTER_NACK; /* Set the Master Nack error mask */
      } else {
        if ((DeviceDataPrv->SerFlag & ADDR_COMPLETE) != 0x00U) { /* If 10-bit addr has been completed */
          if (DeviceDataPrv->OutLenM != 0x00U) { /* Is any char. for transmitting? */
            DeviceDataPrv->OutLenM--;  /* Decrease number of chars for the transmit */
   12730:	3e01      	subs	r6, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:244
            I2C_PDD_WriteDataReg(I2C1_BASE_PTR, *(DeviceDataPrv->OutPtrM)++); /* Send character */
   12732:	1c51      	adds	r1, r2, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:243
        DeviceDataPrv->SerFlag |= (ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Set the flag */
        ErrorMask |= LDD_I2C_MASTER_NACK; /* Set the Master Nack error mask */
      } else {
        if ((DeviceDataPrv->SerFlag & ADDR_COMPLETE) != 0x00U) { /* If 10-bit addr has been completed */
          if (DeviceDataPrv->OutLenM != 0x00U) { /* Is any char. for transmitting? */
            DeviceDataPrv->OutLenM--;  /* Decrease number of chars for the transmit */
   12734:	8206      	strh	r6, [r0, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:244
            I2C_PDD_WriteDataReg(I2C1_BASE_PTR, *(DeviceDataPrv->OutPtrM)++); /* Send character */
   12736:	6141      	str	r1, [r0, #20]
   12738:	7812      	ldrb	r2, [r2, #0]
   1273a:	711a      	strb	r2, [r3, #4]
   1273c:	e7a4      	b.n	12688 <I2C_Interrupt+0x60>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:261
                I2C_PDD_RepeatStart(I2C1_BASE_PTR); /* Repeat start cycle generated */
                I2C_PDD_WriteDataReg(I2C1_BASE_PTR, (uint8_t)(DeviceDataPrv->SlaveAddrHigh | 0x01U)); /* Send slave address high byte*/
                DeviceDataPrv->SerFlag |= REP_ADDR_COMPLETE;
              }
            } else {
              DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* Clear flag "busy" */
   1273e:	43aa      	bics	r2, r5
   12740:	7002      	strb	r2, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:262
              if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
   12742:	7882      	ldrb	r2, [r0, #2]
   12744:	2a01      	cmp	r2, #1
   12746:	d014      	beq.n	12772 <I2C_Interrupt+0x14a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:266
                I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_SLAVE_MODE); /* Switch device to slave mode (stop signal sent) */
                I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_RX_DIRECTION); /* Switch to Rx mode */
              }
              DeviceDataPrv->StatusFlag |= MASTER_BLOCK_SENT; /* Set data block sent flag */
   12748:	7842      	ldrb	r2, [r0, #1]
   1274a:	2301      	movs	r3, #1
   1274c:	4313      	orrs	r3, r2
   1274e:	7043      	strb	r3, [r0, #1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:267
              I2C_OnMasterBlockSent(DeviceDataPrv->UserData); /* Invoke OnMasterBlockSent event */
   12750:	6a00      	ldr	r0, [r0, #32]
   12752:	f7f0 fa07 	bl	2b64 <I2C_OnMasterBlockSent>
   12756:	e797      	b.n	12688 <I2C_Interrupt+0x60>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:256
                  I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_ENABLE); /* else transmit ACK enable */
                }
                I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_RX_DIRECTION); /* Switch to Rx mode */
                (void)I2C_PDD_ReadDataReg(I2C1_BASE_PTR); /* Dummy read character */
              } else {                 /* Repeated address has not been completed for 10-bit addressing mode */
                I2C_PDD_RepeatStart(I2C1_BASE_PTR); /* Repeat start cycle generated */
   12758:	789a      	ldrb	r2, [r3, #2]
   1275a:	430a      	orrs	r2, r1
   1275c:	b2d2      	uxtb	r2, r2
   1275e:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:257
                I2C_PDD_WriteDataReg(I2C1_BASE_PTR, (uint8_t)(DeviceDataPrv->SlaveAddrHigh | 0x01U)); /* Send slave address high byte*/
   12760:	79c4      	ldrb	r4, [r0, #7]
   12762:	2201      	movs	r2, #1
   12764:	4322      	orrs	r2, r4
   12766:	b2d2      	uxtb	r2, r2
   12768:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:258
                DeviceDataPrv->SerFlag |= REP_ADDR_COMPLETE;
   1276a:	7803      	ldrb	r3, [r0, #0]
   1276c:	4319      	orrs	r1, r3
   1276e:	7001      	strb	r1, [r0, #0]
   12770:	e78a      	b.n	12688 <I2C_Interrupt+0x60>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:263
              }
            } else {
              DeviceDataPrv->SerFlag &= (uint8_t)~(MASTER_IN_PROGRES); /* Clear flag "busy" */
              if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
                I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_SLAVE_MODE); /* Switch device to slave mode (stop signal sent) */
   12772:	789a      	ldrb	r2, [r3, #2]
   12774:	43a2      	bics	r2, r4
   12776:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:264
                I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_RX_DIRECTION); /* Switch to Rx mode */
   12778:	789a      	ldrb	r2, [r3, #2]
   1277a:	438a      	bics	r2, r1
   1277c:	709a      	strb	r2, [r3, #2]
   1277e:	e7e3      	b.n	12748 <I2C_Interrupt+0x120>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:249
            I2C_PDD_WriteDataReg(I2C1_BASE_PTR, *(DeviceDataPrv->OutPtrM)++); /* Send character */
          } else {
            if (DeviceDataPrv->InpLenM != 0x00U) { /* Is any char. for reception? */
              if ((DeviceDataPrv->SerFlag & REP_ADDR_COMPLETE) != 0x00U) { /* If repeated start and addr tx has been completed for 10-bit mode ?*/
                if (DeviceDataPrv->InpLenM == 0x01U) { /* If only one char to receive */
                  I2C_PDD_EnableTransmitAcknowledge(I2C1_BASE_PTR, PDD_DISABLE); /* then transmit ACK disable */
   12780:	7899      	ldrb	r1, [r3, #2]
   12782:	2208      	movs	r2, #8
   12784:	430a      	orrs	r2, r1
   12786:	709a      	strb	r2, [r3, #2]
   12788:	e778      	b.n	1267c <I2C_Interrupt+0x54>
   1278a:	46c0      	nop			; (mov r8, r8)
   1278c:	40067000 	.word	0x40067000

00012790 <I2C_Init>:
I2C_Init():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:331
**     @return
**                         - Pointer to the device data structure. 
*/
/* ===================================================================*/
LDD_TDeviceData* I2C_Init(LDD_TUserData *UserDataPtr)
{
   12790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:337
  /* Allocate HAL device structure */
  I2C_TDeviceData *DeviceDataPrv;
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;

  DeviceDataPrv->UserData = UserDataPtr; /* Store the RTOS device structure */
   12792:	4c27      	ldr	r4, [pc, #156]	; (12830 <I2C_Init+0xa0>)
   12794:	6220      	str	r0, [r4, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:342

  /* Allocate interrupt vector */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_I2C1);
   12796:	2019      	movs	r0, #25
   12798:	f7fe fd64 	bl	11264 <_int_get_isr_data>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:343
  DeviceDataPrv->SavedISRSettings.isrFunction = _int_install_isr(LDD_ivIndex_INT_I2C1, I2C_Interrupt, DeviceDataPrv);
   1279c:	1c22      	adds	r2, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:342
  DeviceDataPrv->UserData = UserDataPtr; /* Store the RTOS device structure */

  /* Allocate interrupt vector */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_I2C1);
   1279e:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:343
  DeviceDataPrv->SavedISRSettings.isrFunction = _int_install_isr(LDD_ivIndex_INT_I2C1, I2C_Interrupt, DeviceDataPrv);
   127a0:	4924      	ldr	r1, [pc, #144]	; (12834 <I2C_Init+0xa4>)
   127a2:	2019      	movs	r0, #25
   127a4:	f7fe fd7e 	bl	112a4 <_int_install_isr>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:344
  DeviceDataPrv->SerFlag = ADDR_7;     /* Reset all flags start with 7-bit address mode */
   127a8:	2320      	movs	r3, #32
   127aa:	7023      	strb	r3, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:345
  DeviceDataPrv->SlaveAddr = 0x3CU;    /* Set variable for slave address */
   127ac:	233c      	movs	r3, #60	; 0x3c
   127ae:	71a3      	strb	r3, [r4, #6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:346
  DeviceDataPrv->SendStop = LDD_I2C_SEND_STOP; /* Set variable for sending stop condition (for master mode) */
   127b0:	2301      	movs	r3, #1
   127b2:	70a3      	strb	r3, [r4, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:347
  DeviceDataPrv->InpLenM = 0x00U;      /* Set zero counter of data of reception */
   127b4:	2300      	movs	r3, #0
   127b6:	8123      	strh	r3, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:348
  DeviceDataPrv->OutLenM = 0x00U;      /* Set zero counter of data of transmission */
   127b8:	8223      	strh	r3, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:350
  DeviceDataPrv->StatusFlag = 0x00U;   /* Clear data block transfer complete flags */
  DeviceDataPrv->ErrorMask = 0x00U;    /* Clear variable for errors mask value */
   127ba:	80a3      	strh	r3, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:347
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_I2C1);
  DeviceDataPrv->SavedISRSettings.isrFunction = _int_install_isr(LDD_ivIndex_INT_I2C1, I2C_Interrupt, DeviceDataPrv);
  DeviceDataPrv->SerFlag = ADDR_7;     /* Reset all flags start with 7-bit address mode */
  DeviceDataPrv->SlaveAddr = 0x3CU;    /* Set variable for slave address */
  DeviceDataPrv->SendStop = LDD_I2C_SEND_STOP; /* Set variable for sending stop condition (for master mode) */
  DeviceDataPrv->InpLenM = 0x00U;      /* Set zero counter of data of reception */
   127bc:	2200      	movs	r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:352
  DeviceDataPrv->OutLenM = 0x00U;      /* Set zero counter of data of transmission */
  DeviceDataPrv->StatusFlag = 0x00U;   /* Clear data block transfer complete flags */
  DeviceDataPrv->ErrorMask = 0x00U;    /* Clear variable for errors mask value */
  /* SIM_SCGC4: I2C1=1 */
  SIM_SCGC4 |= SIM_SCGC4_I2C1_MASK;
   127be:	491e      	ldr	r1, [pc, #120]	; (12838 <I2C_Init+0xa8>)
   127c0:	4b1e      	ldr	r3, [pc, #120]	; (1283c <I2C_Init+0xac>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:349
  DeviceDataPrv->SerFlag = ADDR_7;     /* Reset all flags start with 7-bit address mode */
  DeviceDataPrv->SlaveAddr = 0x3CU;    /* Set variable for slave address */
  DeviceDataPrv->SendStop = LDD_I2C_SEND_STOP; /* Set variable for sending stop condition (for master mode) */
  DeviceDataPrv->InpLenM = 0x00U;      /* Set zero counter of data of reception */
  DeviceDataPrv->OutLenM = 0x00U;      /* Set zero counter of data of transmission */
  DeviceDataPrv->StatusFlag = 0x00U;   /* Clear data block transfer complete flags */
   127c2:	7062      	strb	r2, [r4, #1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:352
  DeviceDataPrv->ErrorMask = 0x00U;    /* Clear variable for errors mask value */
  /* SIM_SCGC4: I2C1=1 */
  SIM_SCGC4 |= SIM_SCGC4_I2C1_MASK;
   127c4:	58cd      	ldr	r5, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:343

  /* Allocate interrupt vector */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_I2C1);
  DeviceDataPrv->SavedISRSettings.isrFunction = _int_install_isr(LDD_ivIndex_INT_I2C1, I2C_Interrupt, DeviceDataPrv);
   127c6:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:352
  DeviceDataPrv->InpLenM = 0x00U;      /* Set zero counter of data of reception */
  DeviceDataPrv->OutLenM = 0x00U;      /* Set zero counter of data of transmission */
  DeviceDataPrv->StatusFlag = 0x00U;   /* Clear data block transfer complete flags */
  DeviceDataPrv->ErrorMask = 0x00U;    /* Clear variable for errors mask value */
  /* SIM_SCGC4: I2C1=1 */
  SIM_SCGC4 |= SIM_SCGC4_I2C1_MASK;
   127c8:	2080      	movs	r0, #128	; 0x80
   127ca:	4328      	orrs	r0, r5
   127cc:	50c8      	str	r0, [r1, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:354
  /* I2C1_C1: IICEN=0,IICIE=0,MST=0,TX=0,TXAK=0,RSTA=0,WUEN=0,DMAEN=0 */
  I2C1_C1 = 0x00U;                     /* Clear control register */
   127ce:	4b1c      	ldr	r3, [pc, #112]	; (12840 <I2C_Init+0xb0>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:356
  /* I2C1_FLT: SHEN=0,STOPF=1,SSIE=0,STARTF=1,FLT=0 */
  I2C1_FLT = (I2C_FLT_STOPF_MASK | I2C_FLT_STARTF_MASK | I2C_FLT_FLT(0x00)); /* Clear bus status interrupt flags */
   127d0:	2150      	movs	r1, #80	; 0x50
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:354
  DeviceDataPrv->StatusFlag = 0x00U;   /* Clear data block transfer complete flags */
  DeviceDataPrv->ErrorMask = 0x00U;    /* Clear variable for errors mask value */
  /* SIM_SCGC4: I2C1=1 */
  SIM_SCGC4 |= SIM_SCGC4_I2C1_MASK;
  /* I2C1_C1: IICEN=0,IICIE=0,MST=0,TX=0,TXAK=0,RSTA=0,WUEN=0,DMAEN=0 */
  I2C1_C1 = 0x00U;                     /* Clear control register */
   127d2:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:356
  /* I2C1_FLT: SHEN=0,STOPF=1,SSIE=0,STARTF=1,FLT=0 */
  I2C1_FLT = (I2C_FLT_STOPF_MASK | I2C_FLT_STARTF_MASK | I2C_FLT_FLT(0x00)); /* Clear bus status interrupt flags */
   127d4:	7199      	strb	r1, [r3, #6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:358
  /* I2C1_S: TCF=0,IAAS=0,BUSY=0,ARBL=0,RAM=0,SRW=0,IICIF=1,RXAK=0 */
  I2C1_S = I2C_S_IICIF_MASK;           /* Clear interrupt flag */
   127d6:	2102      	movs	r1, #2
   127d8:	70d9      	strb	r1, [r3, #3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:360
  /* PORTC_PCR2: ISF=0,MUX=2 */
  PORTC_PCR2 = (uint32_t)((PORTC_PCR2 & (uint32_t)~(uint32_t)(
   127da:	491a      	ldr	r1, [pc, #104]	; (12844 <I2C_Init+0xb4>)
   127dc:	4d1a      	ldr	r5, [pc, #104]	; (12848 <I2C_Init+0xb8>)
   127de:	688e      	ldr	r6, [r1, #8]
   127e0:	2080      	movs	r0, #128	; 0x80
   127e2:	0080      	lsls	r0, r0, #2
   127e4:	402e      	ands	r6, r5
   127e6:	4306      	orrs	r6, r0
   127e8:	608e      	str	r6, [r1, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:367
                PORT_PCR_MUX(0x05)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x02)
               ));
  /* PORTC_PCR1: ISF=0,MUX=2 */
  PORTC_PCR1 = (uint32_t)((PORTC_PCR1 & (uint32_t)~(uint32_t)(
   127ea:	684e      	ldr	r6, [r1, #4]
   127ec:	4035      	ands	r5, r6
   127ee:	4305      	orrs	r5, r0
   127f0:	604d      	str	r5, [r1, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:374
                PORT_PCR_MUX(0x05)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x02)
               ));
  /* NVIC_IPR2: PRI_9=0x80 */
  NVIC_IPR2 = (uint32_t)((NVIC_IPR2 & (uint32_t)~(uint32_t)(
   127f2:	4916      	ldr	r1, [pc, #88]	; (1284c <I2C_Init+0xbc>)
   127f4:	25c2      	movs	r5, #194	; 0xc2
   127f6:	00ad      	lsls	r5, r5, #2
   127f8:	594f      	ldr	r7, [r1, r5]
   127fa:	4e15      	ldr	r6, [pc, #84]	; (12850 <I2C_Init+0xc0>)
   127fc:	403e      	ands	r6, r7
   127fe:	2780      	movs	r7, #128	; 0x80
   12800:	023f      	lsls	r7, r7, #8
   12802:	433e      	orrs	r6, r7
   12804:	514e      	str	r6, [r1, r5]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:380
               NVIC_IP_PRI_9(0x7F)
              )) | (uint32_t)(
               NVIC_IP_PRI_9(0x80)
              ));
  /* NVIC_ISER: SETENA|=0x0200 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x0200);
   12806:	680d      	ldr	r5, [r1, #0]
   12808:	4328      	orrs	r0, r5
   1280a:	6008      	str	r0, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:382
  /* I2C1_C2: GCAEN=0,ADEXT=0,HDRS=0,SBRC=0,RMEN=0,AD=0 */
  I2C1_C2 = I2C_C2_AD(0x00);
   1280c:	715a      	strb	r2, [r3, #5]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:384
  /* I2C1_FLT: SHEN=0,STOPF=0,SSIE=0,STARTF=0,FLT=0 */
  I2C1_FLT = I2C_FLT_FLT(0x00);        /* Set glitch filter register */
   1280e:	719a      	strb	r2, [r3, #6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:386
  /* I2C1_SMB: FACK=0,ALERTEN=0,SIICAEN=0,TCKSEL=0,SLTF=1,SHTF1=0,SHTF2=0,SHTF2IE=0 */
  I2C1_SMB = I2C_SMB_SLTF_MASK;
   12810:	2208      	movs	r2, #8
   12812:	721a      	strb	r2, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:388
  /* I2C1_F: MULT=1,ICR=0x12 */
  I2C1_F = (I2C_F_MULT(0x01) | I2C_F_ICR(0x12)); /* Set prescaler bits */
   12814:	2252      	movs	r2, #82	; 0x52
   12816:	705a      	strb	r2, [r3, #1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:389
  I2C_PDD_EnableDevice(I2C1_BASE_PTR, PDD_ENABLE); /* Enable device */
   12818:	7899      	ldrb	r1, [r3, #2]
   1281a:	2280      	movs	r2, #128	; 0x80
   1281c:	430a      	orrs	r2, r1
   1281e:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:390
  I2C_PDD_EnableInterrupt(I2C1_BASE_PTR); /* Enable interrupt */
   12820:	7899      	ldrb	r1, [r3, #2]
   12822:	2240      	movs	r2, #64	; 0x40
   12824:	430a      	orrs	r2, r1
   12826:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:392
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_I2C_ID,DeviceDataPrv);
   12828:	4b0a      	ldr	r3, [pc, #40]	; (12854 <I2C_Init+0xc4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:394
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the data data structure */
}
   1282a:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:392
  /* I2C1_F: MULT=1,ICR=0x12 */
  I2C1_F = (I2C_F_MULT(0x01) | I2C_F_ICR(0x12)); /* Set prescaler bits */
  I2C_PDD_EnableDevice(I2C1_BASE_PTR, PDD_ENABLE); /* Enable device */
  I2C_PDD_EnableInterrupt(I2C1_BASE_PTR); /* Enable interrupt */
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_I2C_ID,DeviceDataPrv);
   1282c:	619c      	str	r4, [r3, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:394
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the data data structure */
}
   1282e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12830:	1fffe0d4 	.word	0x1fffe0d4
   12834:	00012629 	.word	0x00012629
   12838:	40047000 	.word	0x40047000
   1283c:	00001034 	.word	0x00001034
   12840:	40067000 	.word	0x40067000
   12844:	4004b000 	.word	0x4004b000
   12848:	fefff8ff 	.word	0xfefff8ff
   1284c:	e000e100 	.word	0xe000e100
   12850:	ffff00ff 	.word	0xffff00ff
   12854:	1fffe108 	.word	0x1fffe108

00012858 <I2C_MasterSendBlock>:
I2C_MasterSendBlock():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:473
**                           the active clock configuration
**                           ERR_BUSY - The I2C device is now running
*/
/* ===================================================================*/
LDD_TError I2C_MasterSendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, LDD_I2C_TSize Size, LDD_I2C_TSendStop SendStop)
{
   12858:	b5f0      	push	{r4, r5, r6, r7, lr}
   1285a:	4647      	mov	r7, r8
   1285c:	b480      	push	{r7}
   1285e:	1c05      	adds	r5, r0, #0
   12860:	4688      	mov	r8, r1
   12862:	1c16      	adds	r6, r2, #0
   12864:	1c1f      	adds	r7, r3, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:477
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  if (Size == 0x00U) {                 /* Test variable Size on zero */
    return ERR_OK;                     /* If zero then OK */
   12866:	2400      	movs	r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:476
/* ===================================================================*/
LDD_TError I2C_MasterSendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, LDD_I2C_TSize Size, LDD_I2C_TSendStop SendStop)
{
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  if (Size == 0x00U) {                 /* Test variable Size on zero */
   12868:	2a00      	cmp	r2, #0
   1286a:	d006      	beq.n	1287a <I2C_MasterSendBlock+0x22>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:479
    return ERR_OK;                     /* If zero then OK */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
   1286c:	7882      	ldrb	r2, [r0, #2]
   1286e:	2a01      	cmp	r2, #1
   12870:	d007      	beq.n	12882 <I2C_MasterSendBlock+0x2a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:486
       ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
       (DeviceDataPrv->OutLenM != 0x00U))  {
      return ERR_BUSY;                 /* If yes then error */
    }
  } else {
    if (((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || /* Is the bus busy? */  \
   12872:	7803      	ldrb	r3, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:483
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
       ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
       (DeviceDataPrv->OutLenM != 0x00U))  {
      return ERR_BUSY;                 /* If yes then error */
   12874:	2408      	movs	r4, #8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:486
    }
  } else {
    if (((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || /* Is the bus busy? */  \
   12876:	07da      	lsls	r2, r3, #31
   12878:	d50b      	bpl.n	12892 <I2C_MasterSendBlock+0x3a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:520
    }
  }
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
  return ERR_OK;                       /* OK */
}
   1287a:	1c20      	adds	r0, r4, #0
   1287c:	bc04      	pop	{r2}
   1287e:	4690      	mov	r8, r2
   12880:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:480

  if (Size == 0x00U) {                 /* Test variable Size on zero */
    return ERR_OK;                     /* If zero then OK */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
   12882:	4b23      	ldr	r3, [pc, #140]	; (12910 <I2C_MasterSendBlock+0xb8>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:483
       ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
       (DeviceDataPrv->OutLenM != 0x00U))  {
      return ERR_BUSY;                 /* If yes then error */
   12884:	2408      	movs	r4, #8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:480

  if (Size == 0x00U) {                 /* Test variable Size on zero */
    return ERR_OK;                     /* If zero then OK */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
   12886:	78db      	ldrb	r3, [r3, #3]
   12888:	0699      	lsls	r1, r3, #26
   1288a:	d4f6      	bmi.n	1287a <I2C_MasterSendBlock+0x22>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:481 (discriminator 1)
       ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
   1288c:	7803      	ldrb	r3, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:480 (discriminator 1)

  if (Size == 0x00U) {                 /* Test variable Size on zero */
    return ERR_OK;                     /* If zero then OK */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
   1288e:	421a      	tst	r2, r3
   12890:	d1f3      	bne.n	1287a <I2C_MasterSendBlock+0x22>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:482
       ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
       (DeviceDataPrv->OutLenM != 0x00U))  {
   12892:	8a2c      	ldrh	r4, [r5, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:481
  if (Size == 0x00U) {                 /* Test variable Size on zero */
    return ERR_OK;                     /* If zero then OK */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
       ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
   12894:	2c00      	cmp	r4, #0
   12896:	d001      	beq.n	1289c <I2C_MasterSendBlock+0x44>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:483
       (DeviceDataPrv->OutLenM != 0x00U))  {
      return ERR_BUSY;                 /* If yes then error */
   12898:	2408      	movs	r4, #8
   1289a:	e7ee      	b.n	1287a <I2C_MasterSendBlock+0x22>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:492
      (DeviceDataPrv->OutLenM != 0x00U))  {
      return ERR_BUSY;                 /* If yes then error */
    }
  }
  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
   1289c:	f7fe fcc8 	bl	11230 <_int_disable>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:493
  DeviceDataPrv->SerFlag |= MASTER_IN_PROGRES; /* Set flag "busy" */
   128a0:	782a      	ldrb	r2, [r5, #0]
   128a2:	2301      	movs	r3, #1
   128a4:	4313      	orrs	r3, r2
   128a6:	702b      	strb	r3, [r5, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:494
  DeviceDataPrv->OutPtrM = (uint8_t *)BufferPtr; /* Save pointer to data for transmitting */
   128a8:	4643      	mov	r3, r8
   128aa:	616b      	str	r3, [r5, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:497
  DeviceDataPrv->OutLenM = Size;       /* Set the counter of output bufer's content */
  DeviceDataPrv->SendStop = SendStop;  /* Set generating stop condition */
  I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_TX_DIRECTION); /* Set TX mode */
   128ac:	4b18      	ldr	r3, [pc, #96]	; (12910 <I2C_MasterSendBlock+0xb8>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:495
  }
  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
  DeviceDataPrv->SerFlag |= MASTER_IN_PROGRES; /* Set flag "busy" */
  DeviceDataPrv->OutPtrM = (uint8_t *)BufferPtr; /* Save pointer to data for transmitting */
  DeviceDataPrv->OutLenM = Size;       /* Set the counter of output bufer's content */
   128ae:	822e      	strh	r6, [r5, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:496
  DeviceDataPrv->SendStop = SendStop;  /* Set generating stop condition */
   128b0:	70af      	strb	r7, [r5, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:497
  I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_TX_DIRECTION); /* Set TX mode */
   128b2:	7899      	ldrb	r1, [r3, #2]
   128b4:	2210      	movs	r2, #16
   128b6:	430a      	orrs	r2, r1
   128b8:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:498
  if (I2C_PDD_GetMasterMode(I2C1_BASE_PTR) == I2C_PDD_MASTER_MODE) { /* Is device in master mode? */
   128ba:	789a      	ldrb	r2, [r3, #2]
   128bc:	0691      	lsls	r1, r2, #26
   128be:	d410      	bmi.n	128e2 <I2C_MasterSendBlock+0x8a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:501
    I2C_PDD_RepeatStart(I2C1_BASE_PTR); /* If yes then repeat start cycle generated */
  } else {
    I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_MASTER_MODE); /* If no then start signal generated */
   128c0:	7899      	ldrb	r1, [r3, #2]
   128c2:	2220      	movs	r2, #32
   128c4:	430a      	orrs	r2, r1
   128c6:	b2d2      	uxtb	r2, r2
   128c8:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:503
  }
  if ((DeviceDataPrv->SerFlag & ADDR_7) != 0x00U) { /* Is 7-bit addressing set ? */
   128ca:	782b      	ldrb	r3, [r5, #0]
   128cc:	069a      	lsls	r2, r3, #26
   128ce:	d50d      	bpl.n	128ec <I2C_MasterSendBlock+0x94>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:504
    DeviceDataPrv->SerFlag |= (ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Only one byte of address will be sent 7-bit address mode*/
   128d0:	2206      	movs	r2, #6
   128d2:	4313      	orrs	r3, r2
   128d4:	702b      	strb	r3, [r5, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:505
    I2C_PDD_WriteDataReg(I2C1_BASE_PTR, DeviceDataPrv->SlaveAddr); /* Send slave address */
   128d6:	79aa      	ldrb	r2, [r5, #6]
   128d8:	4b0d      	ldr	r3, [pc, #52]	; (12910 <I2C_MasterSendBlock+0xb8>)
   128da:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:518
        I2C_PDD_WriteDataReg(I2C1_BASE_PTR, 0x00U); /* Send general call address */
      }
    }
  }
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
   128dc:	f7fe fcb4 	bl	11248 <_int_enable>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:519
  return ERR_OK;                       /* OK */
   128e0:	e7cb      	b.n	1287a <I2C_MasterSendBlock+0x22>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:499
  DeviceDataPrv->OutPtrM = (uint8_t *)BufferPtr; /* Save pointer to data for transmitting */
  DeviceDataPrv->OutLenM = Size;       /* Set the counter of output bufer's content */
  DeviceDataPrv->SendStop = SendStop;  /* Set generating stop condition */
  I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_TX_DIRECTION); /* Set TX mode */
  if (I2C_PDD_GetMasterMode(I2C1_BASE_PTR) == I2C_PDD_MASTER_MODE) { /* Is device in master mode? */
    I2C_PDD_RepeatStart(I2C1_BASE_PTR); /* If yes then repeat start cycle generated */
   128e2:	7899      	ldrb	r1, [r3, #2]
   128e4:	2204      	movs	r2, #4
   128e6:	430a      	orrs	r2, r1
   128e8:	709a      	strb	r2, [r3, #2]
   128ea:	e7ee      	b.n	128ca <I2C_MasterSendBlock+0x72>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:507
  }
  if ((DeviceDataPrv->SerFlag & ADDR_7) != 0x00U) { /* Is 7-bit addressing set ? */
    DeviceDataPrv->SerFlag |= (ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Only one byte of address will be sent 7-bit address mode*/
    I2C_PDD_WriteDataReg(I2C1_BASE_PTR, DeviceDataPrv->SlaveAddr); /* Send slave address */
  } else {
    if ((DeviceDataPrv->SerFlag & ADDR_10) != 0x00U) { /* Is 10-bit addressing set ? */
   128ec:	2210      	movs	r2, #16
   128ee:	401a      	ands	r2, r3
   128f0:	d006      	beq.n	12900 <I2C_MasterSendBlock+0xa8>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:508
      DeviceDataPrv->SerFlag &= (uint8_t)~(ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Second byte of address will be sent later */
   128f2:	2206      	movs	r2, #6
   128f4:	4393      	bics	r3, r2
   128f6:	702b      	strb	r3, [r5, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:509
      I2C_PDD_WriteDataReg(I2C1_BASE_PTR, DeviceDataPrv->SlaveAddrHigh); /* Send slave address - high byte */
   128f8:	79ea      	ldrb	r2, [r5, #7]
   128fa:	4b05      	ldr	r3, [pc, #20]	; (12910 <I2C_MasterSendBlock+0xb8>)
   128fc:	711a      	strb	r2, [r3, #4]
   128fe:	e7ed      	b.n	128dc <I2C_MasterSendBlock+0x84>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:511
    } else {
      if ((DeviceDataPrv->SerFlag & GENERAL_CALL) != 0x00U) { /* Is general call command required ? */
   12900:	0719      	lsls	r1, r3, #28
   12902:	d5eb      	bpl.n	128dc <I2C_MasterSendBlock+0x84>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:512
        DeviceDataPrv->SerFlag |= ADDR_COMPLETE; /* Only one byte of address will be sent in general call address mode*/
   12904:	2102      	movs	r1, #2
   12906:	430b      	orrs	r3, r1
   12908:	702b      	strb	r3, [r5, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:513
        I2C_PDD_WriteDataReg(I2C1_BASE_PTR, 0x00U); /* Send general call address */
   1290a:	4b01      	ldr	r3, [pc, #4]	; (12910 <I2C_MasterSendBlock+0xb8>)
   1290c:	711a      	strb	r2, [r3, #4]
   1290e:	e7e5      	b.n	128dc <I2C_MasterSendBlock+0x84>
   12910:	40067000 	.word	0x40067000

00012914 <I2C_MasterReceiveBlock>:
I2C_MasterReceiveBlock():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:605
**                           ERR_PARAM_MODE -  Stop condition isn't
**                           possible generated on end transmission.
*/
/* ===================================================================*/
LDD_TError I2C_MasterReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, LDD_I2C_TSize Size, LDD_I2C_TSendStop SendStop)
{
   12914:	b5f0      	push	{r4, r5, r6, r7, lr}
   12916:	4647      	mov	r7, r8
   12918:	b480      	push	{r7}
   1291a:	4688      	mov	r8, r1
   1291c:	1c07      	adds	r7, r0, #0
   1291e:	1c15      	adds	r5, r2, #0
   12920:	1c1e      	adds	r6, r3, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:609
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  if (Size == 0x00U) {                 /* Test variable Size on zero */
    return ERR_OK;                     /* If zero then OK */
   12922:	2400      	movs	r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:608
/* ===================================================================*/
LDD_TError I2C_MasterReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, LDD_I2C_TSize Size, LDD_I2C_TSendStop SendStop)
{
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  if (Size == 0x00U) {                 /* Test variable Size on zero */
   12924:	2a00      	cmp	r2, #0
   12926:	d002      	beq.n	1292e <I2C_MasterReceiveBlock+0x1a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:612
    return ERR_OK;                     /* If zero then OK */
  }
  if (SendStop == LDD_I2C_NO_SEND_STOP) { /* Test variable SendStop on supported value */
    return ERR_PARAM_MODE;             /* If not supported value then error */
   12928:	2481      	movs	r4, #129	; 0x81
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:611
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  if (Size == 0x00U) {                 /* Test variable Size on zero */
    return ERR_OK;                     /* If zero then OK */
  }
  if (SendStop == LDD_I2C_NO_SEND_STOP) { /* Test variable SendStop on supported value */
   1292a:	2b00      	cmp	r3, #0
   1292c:	d103      	bne.n	12936 <I2C_MasterReceiveBlock+0x22>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:653
    }
  }
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
  return ERR_OK;                       /* OK */
}
   1292e:	1c20      	adds	r0, r4, #0
   12930:	bc04      	pop	{r2}
   12932:	4690      	mov	r8, r2
   12934:	bdf0      	pop	{r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:614
    return ERR_OK;                     /* If zero then OK */
  }
  if (SendStop == LDD_I2C_NO_SEND_STOP) { /* Test variable SendStop on supported value */
    return ERR_PARAM_MODE;             /* If not supported value then error */
  }
  if ((DeviceDataPrv->SerFlag & GENERAL_CALL) != 0x00U) { /* Is the general call flag set (SelectSlaveDevice - address type is general call) ? */
   12936:	7803      	ldrb	r3, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:615
    return ERR_NOTAVAIL;               /* It is not possible to receive data - Call SelectSlaveDevice method */
   12938:	2409      	movs	r4, #9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:614
    return ERR_OK;                     /* If zero then OK */
  }
  if (SendStop == LDD_I2C_NO_SEND_STOP) { /* Test variable SendStop on supported value */
    return ERR_PARAM_MODE;             /* If not supported value then error */
  }
  if ((DeviceDataPrv->SerFlag & GENERAL_CALL) != 0x00U) { /* Is the general call flag set (SelectSlaveDevice - address type is general call) ? */
   1293a:	0718      	lsls	r0, r3, #28
   1293c:	d4f7      	bmi.n	1292e <I2C_MasterReceiveBlock+0x1a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:617
    return ERR_NOTAVAIL;               /* It is not possible to receive data - Call SelectSlaveDevice method */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
   1293e:	78ba      	ldrb	r2, [r7, #2]
   12940:	2a01      	cmp	r2, #1
   12942:	d007      	beq.n	12954 <I2C_MasterReceiveBlock+0x40>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:621
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
      ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
      (DeviceDataPrv->InpLenM != 0x00U)) {
      return ERR_BUSY;                 /* If yes then error */
   12944:	2408      	movs	r4, #8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:624
    }
  } else {
    if(((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || /* Is the bus busy? */  \
   12946:	07d9      	lsls	r1, r3, #31
   12948:	d4f1      	bmi.n	1292e <I2C_MasterReceiveBlock+0x1a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:620
    return ERR_NOTAVAIL;               /* It is not possible to receive data - Call SelectSlaveDevice method */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
      ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
      (DeviceDataPrv->InpLenM != 0x00U)) {
   1294a:	893c      	ldrh	r4, [r7, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:619
  if ((DeviceDataPrv->SerFlag & GENERAL_CALL) != 0x00U) { /* Is the general call flag set (SelectSlaveDevice - address type is general call) ? */
    return ERR_NOTAVAIL;               /* It is not possible to receive data - Call SelectSlaveDevice method */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
      ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
   1294c:	2c00      	cmp	r4, #0
   1294e:	d009      	beq.n	12964 <I2C_MasterReceiveBlock+0x50>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:621
      (DeviceDataPrv->InpLenM != 0x00U)) {
      return ERR_BUSY;                 /* If yes then error */
   12950:	2408      	movs	r4, #8
   12952:	e7ec      	b.n	1292e <I2C_MasterReceiveBlock+0x1a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:618
  }
  if ((DeviceDataPrv->SerFlag & GENERAL_CALL) != 0x00U) { /* Is the general call flag set (SelectSlaveDevice - address type is general call) ? */
    return ERR_NOTAVAIL;               /* It is not possible to receive data - Call SelectSlaveDevice method */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
   12954:	491c      	ldr	r1, [pc, #112]	; (129c8 <I2C_MasterReceiveBlock+0xb4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:621
      ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) || \
      (DeviceDataPrv->InpLenM != 0x00U)) {
      return ERR_BUSY;                 /* If yes then error */
   12956:	2408      	movs	r4, #8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:618
  }
  if ((DeviceDataPrv->SerFlag & GENERAL_CALL) != 0x00U) { /* Is the general call flag set (SelectSlaveDevice - address type is general call) ? */
    return ERR_NOTAVAIL;               /* It is not possible to receive data - Call SelectSlaveDevice method */
  }
  if (DeviceDataPrv->SendStop == LDD_I2C_SEND_STOP) {
    if ((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY) || /* Is the bus busy? */  \
   12958:	78c9      	ldrb	r1, [r1, #3]
   1295a:	0688      	lsls	r0, r1, #26
   1295c:	d4e7      	bmi.n	1292e <I2C_MasterReceiveBlock+0x1a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:618 (discriminator 1)
   1295e:	421a      	tst	r2, r3
   12960:	d1e5      	bne.n	1292e <I2C_MasterReceiveBlock+0x1a>
   12962:	e7f2      	b.n	1294a <I2C_MasterReceiveBlock+0x36>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:630
      (DeviceDataPrv->InpLenM != 0x00U)) {
      return ERR_BUSY;               /* If yes then error */
    }
  }
  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
   12964:	f7fe fc64 	bl	11230 <_int_disable>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:631
  DeviceDataPrv->SerFlag |= MASTER_IN_PROGRES; /* Set flag "busy" */
   12968:	783a      	ldrb	r2, [r7, #0]
   1296a:	2301      	movs	r3, #1
   1296c:	4313      	orrs	r3, r2
   1296e:	703b      	strb	r3, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:632
  DeviceDataPrv->InpPtrM = (uint8_t *)BufferPtr; /* Save pointer to data for reception */
   12970:	4642      	mov	r2, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:635
  DeviceDataPrv->InpLenM = Size;       /* Set the counter of input bufer's content */
  DeviceDataPrv->SendStop = SendStop;  /* Set generating stop condition */
  I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_TX_DIRECTION); /* Set TX mode */
   12972:	4b15      	ldr	r3, [pc, #84]	; (129c8 <I2C_MasterReceiveBlock+0xb4>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:632
    }
  }
  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
  DeviceDataPrv->SerFlag |= MASTER_IN_PROGRES; /* Set flag "busy" */
  DeviceDataPrv->InpPtrM = (uint8_t *)BufferPtr; /* Save pointer to data for reception */
   12974:	60fa      	str	r2, [r7, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:633
  DeviceDataPrv->InpLenM = Size;       /* Set the counter of input bufer's content */
   12976:	813d      	strh	r5, [r7, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:634
  DeviceDataPrv->SendStop = SendStop;  /* Set generating stop condition */
   12978:	70be      	strb	r6, [r7, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:635
  I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_TX_DIRECTION); /* Set TX mode */
   1297a:	7899      	ldrb	r1, [r3, #2]
   1297c:	2210      	movs	r2, #16
   1297e:	430a      	orrs	r2, r1
   12980:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:636
  if (I2C_PDD_GetMasterMode(I2C1_BASE_PTR) == I2C_PDD_MASTER_MODE) { /* Is device in master mode? */
   12982:	789a      	ldrb	r2, [r3, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:637
    I2C_PDD_RepeatStart(I2C1_BASE_PTR); /* If yes then repeat start cycle generated */
   12984:	7899      	ldrb	r1, [r3, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:636
  DeviceDataPrv->SerFlag |= MASTER_IN_PROGRES; /* Set flag "busy" */
  DeviceDataPrv->InpPtrM = (uint8_t *)BufferPtr; /* Save pointer to data for reception */
  DeviceDataPrv->InpLenM = Size;       /* Set the counter of input bufer's content */
  DeviceDataPrv->SendStop = SendStop;  /* Set generating stop condition */
  I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_TX_DIRECTION); /* Set TX mode */
  if (I2C_PDD_GetMasterMode(I2C1_BASE_PTR) == I2C_PDD_MASTER_MODE) { /* Is device in master mode? */
   12986:	0690      	lsls	r0, r2, #26
   12988:	d510      	bpl.n	129ac <I2C_MasterReceiveBlock+0x98>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:637
    I2C_PDD_RepeatStart(I2C1_BASE_PTR); /* If yes then repeat start cycle generated */
   1298a:	2204      	movs	r2, #4
   1298c:	430a      	orrs	r2, r1
   1298e:	709a      	strb	r2, [r3, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:641
  } else {
    I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_MASTER_MODE); /* If no then start signal generated */
  }
  if ((DeviceDataPrv->SerFlag & ADDR_7) != 0x00U) { /* Is 7-bit addressing set ? */
   12990:	783b      	ldrb	r3, [r7, #0]
   12992:	0699      	lsls	r1, r3, #26
   12994:	d50f      	bpl.n	129b6 <I2C_MasterReceiveBlock+0xa2>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:642
    DeviceDataPrv->SerFlag |= (ADDR_COMPLETE|REP_ADDR_COMPLETE); /* Only one byte of address will be sent 7-bit address mode*/
   12996:	2206      	movs	r2, #6
   12998:	4313      	orrs	r3, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:643
    I2C_PDD_WriteDataReg(I2C1_BASE_PTR, (uint8_t)(DeviceDataPrv->SlaveAddr | 0x01U)); /* Send slave address */
   1299a:	79ba      	ldrb	r2, [r7, #6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:642
    I2C_PDD_RepeatStart(I2C1_BASE_PTR); /* If yes then repeat start cycle generated */
  } else {
    I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_MASTER_MODE); /* If no then start signal generated */
  }
  if ((DeviceDataPrv->SerFlag & ADDR_7) != 0x00U) { /* Is 7-bit addressing set ? */
    DeviceDataPrv->SerFlag |= (ADDR_COMPLETE|REP_ADDR_COMPLETE); /* Only one byte of address will be sent 7-bit address mode*/
   1299c:	703b      	strb	r3, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:643
    I2C_PDD_WriteDataReg(I2C1_BASE_PTR, (uint8_t)(DeviceDataPrv->SlaveAddr | 0x01U)); /* Send slave address */
   1299e:	2301      	movs	r3, #1
   129a0:	431a      	orrs	r2, r3
   129a2:	4b09      	ldr	r3, [pc, #36]	; (129c8 <I2C_MasterReceiveBlock+0xb4>)
   129a4:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:651
      DeviceDataPrv->SerFlag &= (uint8_t)~(ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Second byte of address will be sent later */
      I2C_PDD_WriteDataReg(I2C1_BASE_PTR, DeviceDataPrv->SlaveAddrHigh); /* Send slave address - high byte */
    }
  }
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
   129a6:	f7fe fc4f 	bl	11248 <_int_enable>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:652
  return ERR_OK;                       /* OK */
   129aa:	e7c0      	b.n	1292e <I2C_MasterReceiveBlock+0x1a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:639
  DeviceDataPrv->SendStop = SendStop;  /* Set generating stop condition */
  I2C_PDD_SetTransmitMode(I2C1_BASE_PTR, I2C_PDD_TX_DIRECTION); /* Set TX mode */
  if (I2C_PDD_GetMasterMode(I2C1_BASE_PTR) == I2C_PDD_MASTER_MODE) { /* Is device in master mode? */
    I2C_PDD_RepeatStart(I2C1_BASE_PTR); /* If yes then repeat start cycle generated */
  } else {
    I2C_PDD_SetMasterMode(I2C1_BASE_PTR, I2C_PDD_MASTER_MODE); /* If no then start signal generated */
   129ac:	2220      	movs	r2, #32
   129ae:	430a      	orrs	r2, r1
   129b0:	b2d2      	uxtb	r2, r2
   129b2:	709a      	strb	r2, [r3, #2]
   129b4:	e7ec      	b.n	12990 <I2C_MasterReceiveBlock+0x7c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:645
  }
  if ((DeviceDataPrv->SerFlag & ADDR_7) != 0x00U) { /* Is 7-bit addressing set ? */
    DeviceDataPrv->SerFlag |= (ADDR_COMPLETE|REP_ADDR_COMPLETE); /* Only one byte of address will be sent 7-bit address mode*/
    I2C_PDD_WriteDataReg(I2C1_BASE_PTR, (uint8_t)(DeviceDataPrv->SlaveAddr | 0x01U)); /* Send slave address */
  } else {
    if ((DeviceDataPrv->SerFlag & ADDR_10) != 0x00U) { /* Is 10-bit addressing set ? */
   129b6:	06da      	lsls	r2, r3, #27
   129b8:	d5f5      	bpl.n	129a6 <I2C_MasterReceiveBlock+0x92>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:646
      DeviceDataPrv->SerFlag &= (uint8_t)~(ADDR_COMPLETE | REP_ADDR_COMPLETE); /* Second byte of address will be sent later */
   129ba:	2206      	movs	r2, #6
   129bc:	4393      	bics	r3, r2
   129be:	703b      	strb	r3, [r7, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:647
      I2C_PDD_WriteDataReg(I2C1_BASE_PTR, DeviceDataPrv->SlaveAddrHigh); /* Send slave address - high byte */
   129c0:	79fa      	ldrb	r2, [r7, #7]
   129c2:	4b01      	ldr	r3, [pc, #4]	; (129c8 <I2C_MasterReceiveBlock+0xb4>)
   129c4:	711a      	strb	r2, [r3, #4]
   129c6:	e7ee      	b.n	129a6 <I2C_MasterReceiveBlock+0x92>
   129c8:	40067000 	.word	0x40067000

000129cc <I2C_SelectSlaveDevice>:
I2C_SelectSlaveDevice():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:721
**                           type.
**                           ERR_PARAM_ADDRESS -  Invalid address value.
*/
/* ===================================================================*/
LDD_TError I2C_SelectSlaveDevice(LDD_TDeviceData *DeviceDataPtr, LDD_I2C_TAddrType AddrType, LDD_I2C_TAddr Addr)
{
   129cc:	b530      	push	{r4, r5, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:724
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  if ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) { /* Is the device in the active state? */
   129ce:	7804      	ldrb	r4, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:725
    return ERR_BUSY;                   /* If yes then error */
   129d0:	2308      	movs	r3, #8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:724
/* ===================================================================*/
LDD_TError I2C_SelectSlaveDevice(LDD_TDeviceData *DeviceDataPtr, LDD_I2C_TAddrType AddrType, LDD_I2C_TAddr Addr)
{
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  if ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) { /* Is the device in the active state? */
   129d2:	07e5      	lsls	r5, r4, #31
   129d4:	d501      	bpl.n	129da <I2C_SelectSlaveDevice+0xe>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:755
    break;
    default:
      return ERR_PARAM_ADDRESS_TYPE;   /* If value of address type is invalid, return error */
  }
  return ERR_OK;                       /* OK */
}
   129d6:	1c18      	adds	r0, r3, #0
   129d8:	bd30      	pop	{r4, r5, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:727
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  if ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) { /* Is the device in the active state? */
    return ERR_BUSY;                   /* If yes then error */
  }
  switch (AddrType) {
   129da:	2901      	cmp	r1, #1
   129dc:	d016      	beq.n	12a0c <I2C_SelectSlaveDevice+0x40>
   129de:	2900      	cmp	r1, #0
   129e0:	d008      	beq.n	129f4 <I2C_SelectSlaveDevice+0x28>
   129e2:	2902      	cmp	r1, #2
   129e4:	d125      	bne.n	12a32 <I2C_SelectSlaveDevice+0x66>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:748
      DeviceDataPrv->SlaveAddrHigh |= 0xF0U;
      DeviceDataPrv->SerFlag &= (uint8_t)~(GENERAL_CALL | ADDR_7); /* Clear the general call flag and 7-bit address mode flag */
      DeviceDataPrv->SerFlag |= ADDR_10; /* Set 10-bit address mode flag */
    break;
    case LDD_I2C_ADDRTYPE_GENERAL_CALL:
      DeviceDataPrv->SerFlag &= (uint8_t)~(ADDR_7 | ADDR_10); /* Clear the 7-bit address flag and 10-bit address mode flag */
   129e6:	2330      	movs	r3, #48	; 0x30
   129e8:	439c      	bics	r4, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:749
      DeviceDataPrv->SerFlag |= GENERAL_CALL; /* Set general call mode flag */
   129ea:	2308      	movs	r3, #8
   129ec:	431c      	orrs	r4, r3
   129ee:	7004      	strb	r4, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:754
    break;
    default:
      return ERR_PARAM_ADDRESS_TYPE;   /* If value of address type is invalid, return error */
  }
  return ERR_OK;                       /* OK */
   129f0:	2300      	movs	r3, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:750
      DeviceDataPrv->SerFlag |= ADDR_10; /* Set 10-bit address mode flag */
    break;
    case LDD_I2C_ADDRTYPE_GENERAL_CALL:
      DeviceDataPrv->SerFlag &= (uint8_t)~(ADDR_7 | ADDR_10); /* Clear the 7-bit address flag and 10-bit address mode flag */
      DeviceDataPrv->SerFlag |= GENERAL_CALL; /* Set general call mode flag */
    break;
   129f2:	e7f0      	b.n	129d6 <I2C_SelectSlaveDevice+0xa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:730
    return ERR_BUSY;                   /* If yes then error */
  }
  switch (AddrType) {
    case LDD_I2C_ADDRTYPE_7BITS:
      if (Addr > 0x7FU) {              /* Test address value */
        return ERR_PARAM_ADDRESS;      /* If value of address is invalid, return error */
   129f4:	2389      	movs	r3, #137	; 0x89
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:729
  if ((DeviceDataPrv->SerFlag & MASTER_IN_PROGRES) != 0x00U) { /* Is the device in the active state? */
    return ERR_BUSY;                   /* If yes then error */
  }
  switch (AddrType) {
    case LDD_I2C_ADDRTYPE_7BITS:
      if (Addr > 0x7FU) {              /* Test address value */
   129f6:	2a7f      	cmp	r2, #127	; 0x7f
   129f8:	d8ed      	bhi.n	129d6 <I2C_SelectSlaveDevice+0xa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:733
        return ERR_PARAM_ADDRESS;      /* If value of address is invalid, return error */
      }
      DeviceDataPrv->SlaveAddr = (uint8_t)((uint8_t)Addr << 0x01U); /* Set slave address */
      DeviceDataPrv->SerFlag &= (uint8_t)~(GENERAL_CALL | ADDR_10); /* Clear the general call flag and 10-bit address mode flag */
   129fa:	2318      	movs	r3, #24
   129fc:	439c      	bics	r4, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:734
      DeviceDataPrv->SerFlag |= ADDR_7; /* Set 7-bit address mode flag */
   129fe:	2320      	movs	r3, #32
   12a00:	431c      	orrs	r4, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:732
  switch (AddrType) {
    case LDD_I2C_ADDRTYPE_7BITS:
      if (Addr > 0x7FU) {              /* Test address value */
        return ERR_PARAM_ADDRESS;      /* If value of address is invalid, return error */
      }
      DeviceDataPrv->SlaveAddr = (uint8_t)((uint8_t)Addr << 0x01U); /* Set slave address */
   12a02:	0052      	lsls	r2, r2, #1
   12a04:	7182      	strb	r2, [r0, #6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:734
      DeviceDataPrv->SerFlag &= (uint8_t)~(GENERAL_CALL | ADDR_10); /* Clear the general call flag and 10-bit address mode flag */
      DeviceDataPrv->SerFlag |= ADDR_7; /* Set 7-bit address mode flag */
   12a06:	7004      	strb	r4, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:754
      DeviceDataPrv->SerFlag |= GENERAL_CALL; /* Set general call mode flag */
    break;
    default:
      return ERR_PARAM_ADDRESS_TYPE;   /* If value of address type is invalid, return error */
  }
  return ERR_OK;                       /* OK */
   12a08:	2300      	movs	r3, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:735
        return ERR_PARAM_ADDRESS;      /* If value of address is invalid, return error */
      }
      DeviceDataPrv->SlaveAddr = (uint8_t)((uint8_t)Addr << 0x01U); /* Set slave address */
      DeviceDataPrv->SerFlag &= (uint8_t)~(GENERAL_CALL | ADDR_10); /* Clear the general call flag and 10-bit address mode flag */
      DeviceDataPrv->SerFlag |= ADDR_7; /* Set 7-bit address mode flag */
    break;
   12a0a:	e7e4      	b.n	129d6 <I2C_SelectSlaveDevice+0xa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:737
    case LDD_I2C_ADDRTYPE_10BITS:
      if (Addr > 0x03FFU) {            /* Test address value */
   12a0c:	490a      	ldr	r1, [pc, #40]	; (12a38 <I2C_SelectSlaveDevice+0x6c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:730
    return ERR_BUSY;                   /* If yes then error */
  }
  switch (AddrType) {
    case LDD_I2C_ADDRTYPE_7BITS:
      if (Addr > 0x7FU) {              /* Test address value */
        return ERR_PARAM_ADDRESS;      /* If value of address is invalid, return error */
   12a0e:	2389      	movs	r3, #137	; 0x89
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:737
      DeviceDataPrv->SlaveAddr = (uint8_t)((uint8_t)Addr << 0x01U); /* Set slave address */
      DeviceDataPrv->SerFlag &= (uint8_t)~(GENERAL_CALL | ADDR_10); /* Clear the general call flag and 10-bit address mode flag */
      DeviceDataPrv->SerFlag |= ADDR_7; /* Set 7-bit address mode flag */
    break;
    case LDD_I2C_ADDRTYPE_10BITS:
      if (Addr > 0x03FFU) {            /* Test address value */
   12a10:	428a      	cmp	r2, r1
   12a12:	d8e0      	bhi.n	129d6 <I2C_SelectSlaveDevice+0xa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:742
        return ERR_PARAM_ADDRESS;      /* If value of address is invalid, return error */
      }
      DeviceDataPrv->SlaveAddr = (uint8_t)Addr; /* Set slave address - low byte */
      DeviceDataPrv->SlaveAddrHigh = (uint8_t)((uint16_t)Addr >> 0x07U); /* Set slave address - high byte*/
      DeviceDataPrv->SlaveAddrHigh &= 0x06U; /* Format address to 11110xx0 */
   12a14:	2306      	movs	r3, #6
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:740
    break;
    case LDD_I2C_ADDRTYPE_10BITS:
      if (Addr > 0x03FFU) {            /* Test address value */
        return ERR_PARAM_ADDRESS;      /* If value of address is invalid, return error */
      }
      DeviceDataPrv->SlaveAddr = (uint8_t)Addr; /* Set slave address - low byte */
   12a16:	7182      	strb	r2, [r0, #6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:741
      DeviceDataPrv->SlaveAddrHigh = (uint8_t)((uint16_t)Addr >> 0x07U); /* Set slave address - high byte*/
   12a18:	09d2      	lsrs	r2, r2, #7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:742
      DeviceDataPrv->SlaveAddrHigh &= 0x06U; /* Format address to 11110xx0 */
   12a1a:	401a      	ands	r2, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:743
      DeviceDataPrv->SlaveAddrHigh |= 0xF0U;
   12a1c:	2310      	movs	r3, #16
   12a1e:	425b      	negs	r3, r3
   12a20:	431a      	orrs	r2, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:744
      DeviceDataPrv->SerFlag &= (uint8_t)~(GENERAL_CALL | ADDR_7); /* Clear the general call flag and 7-bit address mode flag */
   12a22:	2328      	movs	r3, #40	; 0x28
   12a24:	439c      	bics	r4, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:745
      DeviceDataPrv->SerFlag |= ADDR_10; /* Set 10-bit address mode flag */
   12a26:	2310      	movs	r3, #16
   12a28:	431c      	orrs	r4, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:743
        return ERR_PARAM_ADDRESS;      /* If value of address is invalid, return error */
      }
      DeviceDataPrv->SlaveAddr = (uint8_t)Addr; /* Set slave address - low byte */
      DeviceDataPrv->SlaveAddrHigh = (uint8_t)((uint16_t)Addr >> 0x07U); /* Set slave address - high byte*/
      DeviceDataPrv->SlaveAddrHigh &= 0x06U; /* Format address to 11110xx0 */
      DeviceDataPrv->SlaveAddrHigh |= 0xF0U;
   12a2a:	71c2      	strb	r2, [r0, #7]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:745
      DeviceDataPrv->SerFlag &= (uint8_t)~(GENERAL_CALL | ADDR_7); /* Clear the general call flag and 7-bit address mode flag */
      DeviceDataPrv->SerFlag |= ADDR_10; /* Set 10-bit address mode flag */
   12a2c:	7004      	strb	r4, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:754
      DeviceDataPrv->SerFlag |= GENERAL_CALL; /* Set general call mode flag */
    break;
    default:
      return ERR_PARAM_ADDRESS_TYPE;   /* If value of address type is invalid, return error */
  }
  return ERR_OK;                       /* OK */
   12a2e:	2300      	movs	r3, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:746
      DeviceDataPrv->SlaveAddrHigh = (uint8_t)((uint16_t)Addr >> 0x07U); /* Set slave address - high byte*/
      DeviceDataPrv->SlaveAddrHigh &= 0x06U; /* Format address to 11110xx0 */
      DeviceDataPrv->SlaveAddrHigh |= 0xF0U;
      DeviceDataPrv->SerFlag &= (uint8_t)~(GENERAL_CALL | ADDR_7); /* Clear the general call flag and 7-bit address mode flag */
      DeviceDataPrv->SerFlag |= ADDR_10; /* Set 10-bit address mode flag */
    break;
   12a30:	e7d1      	b.n	129d6 <I2C_SelectSlaveDevice+0xa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:752
    case LDD_I2C_ADDRTYPE_GENERAL_CALL:
      DeviceDataPrv->SerFlag &= (uint8_t)~(ADDR_7 | ADDR_10); /* Clear the 7-bit address flag and 10-bit address mode flag */
      DeviceDataPrv->SerFlag |= GENERAL_CALL; /* Set general call mode flag */
    break;
    default:
      return ERR_PARAM_ADDRESS_TYPE;   /* If value of address type is invalid, return error */
   12a32:	238d      	movs	r3, #141	; 0x8d
   12a34:	e7cf      	b.n	129d6 <I2C_SelectSlaveDevice+0xa>
   12a36:	46c0      	nop			; (mov r8, r8)
   12a38:	000003ff 	.word	0x000003ff

00012a3c <I2C_GetError>:
I2C_GetError():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:779
**                           ERR_SPEED - This device does not work in
**                           the active clock configuration
*/
/* ===================================================================*/
LDD_TError I2C_GetError(LDD_TDeviceData *DeviceDataPtr, LDD_I2C_TErrorMask *ErrorMaskPtr)
{
   12a3c:	b538      	push	{r3, r4, r5, lr}
   12a3e:	1c04      	adds	r4, r0, #0
   12a40:	1c0d      	adds	r5, r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:783
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
   12a42:	f7fe fbf5 	bl	11230 <_int_disable>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:784
  *ErrorMaskPtr = DeviceDataPrv->ErrorMask; /* Return last value of error mask */
   12a46:	88a3      	ldrh	r3, [r4, #4]
   12a48:	802b      	strh	r3, [r5, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:785
  DeviceDataPrv->ErrorMask = 0x00U;
   12a4a:	2300      	movs	r3, #0
   12a4c:	80a3      	strh	r3, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:787
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
   12a4e:	f7fe fbfb 	bl	11248 <_int_enable>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:789
  return ERR_OK;
}
   12a52:	2000      	movs	r0, #0
   12a54:	bd38      	pop	{r3, r4, r5, pc}
   12a56:	46c0      	nop			; (mov r8, r8)

00012a58 <I2C_CheckBus>:
I2C_CheckBus():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:820
LDD_TError I2C_CheckBus(LDD_TDeviceData *DeviceDataPtr, LDD_I2C_TBusState *BusStatePtr)
{
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  (void)DeviceDataPrv;                 /* Suppress unused variable warning if needed */
  *BusStatePtr = (LDD_I2C_TBusState)((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY)?LDD_I2C_BUSY:LDD_I2C_IDLE); /* Return value of Busy bit in status register */
   12a58:	4b04      	ldr	r3, [pc, #16]	; (12a6c <I2C_CheckBus+0x14>)
   12a5a:	2201      	movs	r2, #1
   12a5c:	78db      	ldrb	r3, [r3, #3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:822
  return ERR_OK;
}
   12a5e:	2000      	movs	r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:820
LDD_TError I2C_CheckBus(LDD_TDeviceData *DeviceDataPtr, LDD_I2C_TBusState *BusStatePtr)
{
  I2C_TDeviceData *DeviceDataPrv = (I2C_TDeviceData *)DeviceDataPtr;

  (void)DeviceDataPrv;                 /* Suppress unused variable warning if needed */
  *BusStatePtr = (LDD_I2C_TBusState)((I2C_PDD_GetBusStatus(I2C1_BASE_PTR) == I2C_PDD_BUS_BUSY)?LDD_I2C_BUSY:LDD_I2C_IDLE); /* Return value of Busy bit in status register */
   12a60:	095b      	lsrs	r3, r3, #5
   12a62:	4053      	eors	r3, r2
   12a64:	2201      	movs	r2, #1
   12a66:	4013      	ands	r3, r2
   12a68:	700b      	strb	r3, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/I2C.c:822
  return ERR_OK;
}
   12a6a:	4770      	bx	lr
   12a6c:	40067000 	.word	0x40067000

00012a70 <LED_BLUE_Init>:
LED_BLUE_Init():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:134
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Configure pin as output */
  /* GPIOE_PDDR: PDD|=0x80000000 */
  GPIOE_PDDR |= GPIO_PDDR_PDD(0x80000000);
   12a70:	4b0b      	ldr	r3, [pc, #44]	; (12aa0 <LED_BLUE_Init+0x30>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:131
  /* Allocate device structure */
  LED_BLUE_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   12a72:	4a0c      	ldr	r2, [pc, #48]	; (12aa4 <LED_BLUE_Init+0x34>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:134
  /* Configure pin as output */
  /* GPIOE_PDDR: PDD|=0x80000000 */
  GPIOE_PDDR |= GPIO_PDDR_PDD(0x80000000);
   12a74:	2180      	movs	r1, #128	; 0x80
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:131
  /* Allocate device structure */
  LED_BLUE_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   12a76:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:134
  /* Configure pin as output */
  /* GPIOE_PDDR: PDD|=0x80000000 */
  GPIOE_PDDR |= GPIO_PDDR_PDD(0x80000000);
   12a78:	6958      	ldr	r0, [r3, #20]
   12a7a:	0609      	lsls	r1, r1, #24
   12a7c:	4308      	orrs	r0, r1
   12a7e:	6158      	str	r0, [r3, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:137
  /* Set initialization value */
  /* GPIOE_PDOR: PDO|=0x80000000 */
  GPIOE_PDOR |= GPIO_PDOR_PDO(0x80000000);
   12a80:	6818      	ldr	r0, [r3, #0]
   12a82:	4301      	orrs	r1, r0
   12a84:	6019      	str	r1, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:140
  /* Initialization of Port Control register */
  /* PORTE_PCR31: ISF=0,MUX=1 */
  PORTE_PCR31 = (uint32_t)((PORTE_PCR31 & (uint32_t)~(uint32_t)(
   12a86:	4b08      	ldr	r3, [pc, #32]	; (12aa8 <LED_BLUE_Init+0x38>)
   12a88:	4908      	ldr	r1, [pc, #32]	; (12aac <LED_BLUE_Init+0x3c>)
   12a8a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   12a8c:	4001      	ands	r1, r0
   12a8e:	2080      	movs	r0, #128	; 0x80
   12a90:	0040      	lsls	r0, r0, #1
   12a92:	4301      	orrs	r1, r0
   12a94:	67d9      	str	r1, [r3, #124]	; 0x7c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:147
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_LED_BLUE_ID,DeviceDataPrv);
   12a96:	4b06      	ldr	r3, [pc, #24]	; (12ab0 <LED_BLUE_Init+0x40>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:149
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   12a98:	1c10      	adds	r0, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:147
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_LED_BLUE_ID,DeviceDataPrv);
   12a9a:	60da      	str	r2, [r3, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:149
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   12a9c:	4770      	bx	lr
   12a9e:	46c0      	nop			; (mov r8, r8)
   12aa0:	400ff100 	.word	0x400ff100
   12aa4:	1fffe0f8 	.word	0x1fffe0f8
   12aa8:	4004d000 	.word	0x4004d000
   12aac:	fefff8ff 	.word	0xfefff8ff
   12ab0:	1fffe108 	.word	0x1fffe108

00012ab4 <LED_BLUE_SetVal>:
LED_BLUE_SetVal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:250
*/
/* ===================================================================*/
void LED_BLUE_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(LED_BLUE_MODULE_BASE_ADDRESS, LED_BLUE_PORT_MASK);
   12ab4:	4b02      	ldr	r3, [pc, #8]	; (12ac0 <LED_BLUE_SetVal+0xc>)
   12ab6:	2280      	movs	r2, #128	; 0x80
   12ab8:	0612      	lsls	r2, r2, #24
   12aba:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_BLUE.c:251
}
   12abc:	4770      	bx	lr
   12abe:	46c0      	nop			; (mov r8, r8)
   12ac0:	f8000100 	.word	0xf8000100

00012ac4 <LED_GREEN_Init>:
LED_GREEN_Init():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:134
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Configure pin as output */
  /* GPIOD_PDDR: PDD|=0x20 */
  GPIOD_PDDR |= GPIO_PDDR_PDD(0x20);
   12ac4:	4b0a      	ldr	r3, [pc, #40]	; (12af0 <LED_GREEN_Init+0x2c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:131
  /* Allocate device structure */
  LED_GREEN_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   12ac6:	4a0b      	ldr	r2, [pc, #44]	; (12af4 <LED_GREEN_Init+0x30>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:134
  /* Configure pin as output */
  /* GPIOD_PDDR: PDD|=0x20 */
  GPIOD_PDDR |= GPIO_PDDR_PDD(0x20);
   12ac8:	2120      	movs	r1, #32
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:131
  /* Allocate device structure */
  LED_GREEN_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   12aca:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:134
  /* Configure pin as output */
  /* GPIOD_PDDR: PDD|=0x20 */
  GPIOD_PDDR |= GPIO_PDDR_PDD(0x20);
   12acc:	6958      	ldr	r0, [r3, #20]
   12ace:	4308      	orrs	r0, r1
   12ad0:	6158      	str	r0, [r3, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:137
  /* Set initialization value */
  /* GPIOD_PDOR: PDO|=0x20 */
  GPIOD_PDOR |= GPIO_PDOR_PDO(0x20);
   12ad2:	6818      	ldr	r0, [r3, #0]
   12ad4:	4301      	orrs	r1, r0
   12ad6:	6019      	str	r1, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:140
  /* Initialization of Port Control register */
  /* PORTD_PCR5: ISF=0,MUX=1 */
  PORTD_PCR5 = (uint32_t)((PORTD_PCR5 & (uint32_t)~(uint32_t)(
   12ad8:	4b07      	ldr	r3, [pc, #28]	; (12af8 <LED_GREEN_Init+0x34>)
   12ada:	4908      	ldr	r1, [pc, #32]	; (12afc <LED_GREEN_Init+0x38>)
   12adc:	6958      	ldr	r0, [r3, #20]
   12ade:	4001      	ands	r1, r0
   12ae0:	2080      	movs	r0, #128	; 0x80
   12ae2:	0040      	lsls	r0, r0, #1
   12ae4:	4301      	orrs	r1, r0
   12ae6:	6159      	str	r1, [r3, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:147
                PORT_PCR_MUX(0x06)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01)
               ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_LED_GREEN_ID,DeviceDataPrv);
   12ae8:	4b05      	ldr	r3, [pc, #20]	; (12b00 <LED_GREEN_Init+0x3c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:149
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   12aea:	1c10      	adds	r0, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:147
                PORT_PCR_MUX(0x06)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x01)
               ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_LED_GREEN_ID,DeviceDataPrv);
   12aec:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:149
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   12aee:	4770      	bx	lr
   12af0:	400ff0c0 	.word	0x400ff0c0
   12af4:	1fffe0fc 	.word	0x1fffe0fc
   12af8:	4004c000 	.word	0x4004c000
   12afc:	fefff8ff 	.word	0xfefff8ff
   12b00:	1fffe108 	.word	0x1fffe108

00012b04 <LED_GREEN_SetVal>:
LED_GREEN_SetVal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:250
*/
/* ===================================================================*/
void LED_GREEN_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(LED_GREEN_MODULE_BASE_ADDRESS, LED_GREEN_PORT_MASK);
   12b04:	4b01      	ldr	r3, [pc, #4]	; (12b0c <LED_GREEN_SetVal+0x8>)
   12b06:	2220      	movs	r2, #32
   12b08:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:251
}
   12b0a:	4770      	bx	lr
   12b0c:	f80000c0 	.word	0xf80000c0

00012b10 <LED_GREEN_NegVal>:
LED_GREEN_NegVal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:270
*/
/* ===================================================================*/
void LED_GREEN_NegVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_TogglePortDataOutputMask(LED_GREEN_MODULE_BASE_ADDRESS, LED_GREEN_PORT_MASK);
   12b10:	4b01      	ldr	r3, [pc, #4]	; (12b18 <LED_GREEN_NegVal+0x8>)
   12b12:	2220      	movs	r2, #32
   12b14:	60da      	str	r2, [r3, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_GREEN.c:271
}
   12b16:	4770      	bx	lr
   12b18:	f80000c0 	.word	0xf80000c0

00012b1c <LED_RED_Init>:
LED_RED_Init():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:134
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Configure pin as output */
  /* GPIOE_PDDR: PDD|=0x20000000 */
  GPIOE_PDDR |= GPIO_PDDR_PDD(0x20000000);
   12b1c:	4b0b      	ldr	r3, [pc, #44]	; (12b4c <LED_RED_Init+0x30>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:131
  /* Allocate device structure */
  LED_RED_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   12b1e:	4a0c      	ldr	r2, [pc, #48]	; (12b50 <LED_RED_Init+0x34>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:134
  /* Configure pin as output */
  /* GPIOE_PDDR: PDD|=0x20000000 */
  GPIOE_PDDR |= GPIO_PDDR_PDD(0x20000000);
   12b20:	2180      	movs	r1, #128	; 0x80
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:131
  /* Allocate device structure */
  LED_RED_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   12b22:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:134
  /* Configure pin as output */
  /* GPIOE_PDDR: PDD|=0x20000000 */
  GPIOE_PDDR |= GPIO_PDDR_PDD(0x20000000);
   12b24:	6958      	ldr	r0, [r3, #20]
   12b26:	0589      	lsls	r1, r1, #22
   12b28:	4308      	orrs	r0, r1
   12b2a:	6158      	str	r0, [r3, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:137
  /* Set initialization value */
  /* GPIOE_PDOR: PDO|=0x20000000 */
  GPIOE_PDOR |= GPIO_PDOR_PDO(0x20000000);
   12b2c:	6818      	ldr	r0, [r3, #0]
   12b2e:	4301      	orrs	r1, r0
   12b30:	6019      	str	r1, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:140
  /* Initialization of Port Control register */
  /* PORTE_PCR29: ISF=0,MUX=1 */
  PORTE_PCR29 = (uint32_t)((PORTE_PCR29 & (uint32_t)~(uint32_t)(
   12b32:	4b08      	ldr	r3, [pc, #32]	; (12b54 <LED_RED_Init+0x38>)
   12b34:	4908      	ldr	r1, [pc, #32]	; (12b58 <LED_RED_Init+0x3c>)
   12b36:	6f58      	ldr	r0, [r3, #116]	; 0x74
   12b38:	4001      	ands	r1, r0
   12b3a:	2080      	movs	r0, #128	; 0x80
   12b3c:	0040      	lsls	r0, r0, #1
   12b3e:	4301      	orrs	r1, r0
   12b40:	6759      	str	r1, [r3, #116]	; 0x74
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:147
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_LED_RED_ID,DeviceDataPrv);
   12b42:	4b06      	ldr	r3, [pc, #24]	; (12b5c <LED_RED_Init+0x40>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:149
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   12b44:	1c10      	adds	r0, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:147
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_LED_RED_ID,DeviceDataPrv);
   12b46:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:149
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   12b48:	4770      	bx	lr
   12b4a:	46c0      	nop			; (mov r8, r8)
   12b4c:	400ff100 	.word	0x400ff100
   12b50:	1fffe100 	.word	0x1fffe100
   12b54:	4004d000 	.word	0x4004d000
   12b58:	fefff8ff 	.word	0xfefff8ff
   12b5c:	1fffe108 	.word	0x1fffe108

00012b60 <LED_RED_ClrVal>:
LED_RED_ClrVal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:230
*/
/* ===================================================================*/
void LED_RED_ClrVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_ClearPortDataOutputMask(LED_RED_MODULE_BASE_ADDRESS, LED_RED_PORT_MASK);
   12b60:	4b02      	ldr	r3, [pc, #8]	; (12b6c <LED_RED_ClrVal+0xc>)
   12b62:	2280      	movs	r2, #128	; 0x80
   12b64:	0592      	lsls	r2, r2, #22
   12b66:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:231
}
   12b68:	4770      	bx	lr
   12b6a:	46c0      	nop			; (mov r8, r8)
   12b6c:	f8000100 	.word	0xf8000100

00012b70 <LED_RED_SetVal>:
LED_RED_SetVal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:250
*/
/* ===================================================================*/
void LED_RED_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(LED_RED_MODULE_BASE_ADDRESS, LED_RED_PORT_MASK);
   12b70:	4b02      	ldr	r3, [pc, #8]	; (12b7c <LED_RED_SetVal+0xc>)
   12b72:	2280      	movs	r2, #128	; 0x80
   12b74:	0592      	lsls	r2, r2, #22
   12b76:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/LED_RED.c:251
}
   12b78:	4770      	bx	lr
   12b7a:	46c0      	nop			; (mov r8, r8)
   12b7c:	f8000100 	.word	0xf8000100

00012b80 <SystemTimer1_OnCounterRestart>:
SystemTimer1_OnCounterRestart():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:118
**     Description :
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void SystemTimer1_OnCounterRestart(LDD_TUserData *UserDataPtr)
{
   12b80:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:119
    _time_notify_kernel();
   12b82:	f7ff fb59 	bl	12238 <_time_notify_kernel>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:120
}
   12b86:	bd08      	pop	{r3, pc}

00012b88 <system_timer_init>:
system_timer_init():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:136


static LDD_TDeviceDataPtr SystemTimerDeviceDataPtr;

uint32_t system_timer_init(const void * timer_data_ptr)
{
   12b88:	b570      	push	{r4, r5, r6, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:138
    uint32_t hw_ticks_per_tick;
    KERNEL_DATA_STRUCT_PTR kernel_data = _mqx_kernel_data;
   12b8a:	4b11      	ldr	r3, [pc, #68]	; (12bd0 <system_timer_init+0x48>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:136


static LDD_TDeviceDataPtr SystemTimerDeviceDataPtr;

uint32_t system_timer_init(const void * timer_data_ptr)
{
   12b8c:	b082      	sub	sp, #8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:143
    KERNEL_DATA_STRUCT_PTR kernel_data = _mqx_kernel_data;

    /* Parameter is not used, suppress unused argument warning */
    (void)timer_data_ptr;

    SystemTimerDeviceDataPtr  = SystemTimer1_Init(NULL);
   12b8e:	2000      	movs	r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:138
static LDD_TDeviceDataPtr SystemTimerDeviceDataPtr;

uint32_t system_timer_init(const void * timer_data_ptr)
{
    uint32_t hw_ticks_per_tick;
    KERNEL_DATA_STRUCT_PTR kernel_data = _mqx_kernel_data;
   12b90:	681e      	ldr	r6, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:143

    /* Parameter is not used, suppress unused argument warning */
    (void)timer_data_ptr;

    SystemTimerDeviceDataPtr  = SystemTimer1_Init(NULL);
   12b92:	f000 f83b 	bl	12c0c <SystemTimer1_Init>
   12b96:	4c0f      	ldr	r4, [pc, #60]	; (12bd4 <system_timer_init+0x4c>)
SystemTimer1_GetTicsPerSecond():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:128
/* Function returns number of ticks per second for system timer */
uint32_t  SystemTimer1_GetTicsPerSecond(LDD_TDeviceData *DeviceDataPtr)
{
    uint32_t period_ticks;

    SystemTimer1_GetPeriodTicks(DeviceDataPtr, &period_ticks);
   12b98:	a901      	add	r1, sp, #4
system_timer_init():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:143
    KERNEL_DATA_STRUCT_PTR kernel_data = _mqx_kernel_data;

    /* Parameter is not used, suppress unused argument warning */
    (void)timer_data_ptr;

    SystemTimerDeviceDataPtr  = SystemTimer1_Init(NULL);
   12b9a:	1c05      	adds	r5, r0, #0
   12b9c:	6020      	str	r0, [r4, #0]
SystemTimer1_GetTicsPerSecond():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:128
/* Function returns number of ticks per second for system timer */
uint32_t  SystemTimer1_GetTicsPerSecond(LDD_TDeviceData *DeviceDataPtr)
{
    uint32_t period_ticks;

    SystemTimer1_GetPeriodTicks(DeviceDataPtr, &period_ticks);
   12b9e:	f000 f873 	bl	12c88 <SystemTimer1_GetPeriodTicks>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:129
    return SystemTimer1_GetInputFrequency(DeviceDataPtr) / period_ticks;
   12ba2:	1c28      	adds	r0, r5, #0
   12ba4:	f000 f86c 	bl	12c80 <SystemTimer1_GetInputFrequency>
   12ba8:	9901      	ldr	r1, [sp, #4]
   12baa:	f7ed fc7b 	bl	4a4 <__aeabi_uidiv>
system_timer_init():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:146
    (void)timer_data_ptr;

    SystemTimerDeviceDataPtr  = SystemTimer1_Init(NULL);

    /* Set number of system ticks per second */
    kernel_data->TICKS_PER_SECOND = SystemTimer1_GetTicsPerSecond(SystemTimerDeviceDataPtr);
   12bae:	23a4      	movs	r3, #164	; 0xa4
   12bb0:	005b      	lsls	r3, r3, #1
   12bb2:	50f0      	str	r0, [r6, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:148

    _time_set_hwtick_function((MQX_GET_HWTICKS_FPTR)&SystemTimer1_GetCounterValue, (pointer)SystemTimerDeviceDataPtr);
   12bb4:	6821      	ldr	r1, [r4, #0]
   12bb6:	4808      	ldr	r0, [pc, #32]	; (12bd8 <system_timer_init+0x50>)
   12bb8:	f7ff fbda 	bl	12370 <_time_set_hwtick_function>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:151

    /* Set number of hardware ticks per system tick */
    SystemTimer1_GetPeriodTicks(SystemTimerDeviceDataPtr, &hw_ticks_per_tick);
   12bbc:	a901      	add	r1, sp, #4
   12bbe:	6820      	ldr	r0, [r4, #0]
   12bc0:	f000 f862 	bl	12c88 <SystemTimer1_GetPeriodTicks>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:152
    _time_set_hwticks_per_tick(hw_ticks_per_tick);
   12bc4:	9801      	ldr	r0, [sp, #4]
   12bc6:	f7ff fbdf 	bl	12388 <_time_set_hwticks_per_tick>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:155
    
    return MQX_OK;
}
   12bca:	2000      	movs	r0, #0
   12bcc:	b002      	add	sp, #8
   12bce:	bd70      	pop	{r4, r5, r6, pc}
   12bd0:	1fffe000 	.word	0x1fffe000
   12bd4:	1fffe104 	.word	0x1fffe104
   12bd8:	00012c9d 	.word	0x00012c9d

00012bdc <system_timer_start>:
system_timer_start():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:158

uint32_t system_timer_start(const void * timer_data_ptr)
{
   12bdc:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:162
    /* Parameter is not used, suppress unused argument warning */
    (void)timer_data_ptr;                 
    
    SystemTimer1_Enable(SystemTimerDeviceDataPtr);
   12bde:	4b03      	ldr	r3, [pc, #12]	; (12bec <system_timer_start+0x10>)
   12be0:	6818      	ldr	r0, [r3, #0]
   12be2:	f000 f843 	bl	12c6c <SystemTimer1_Enable>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/MQX1.c:165
    
    return MQX_OK;
}
   12be6:	2000      	movs	r0, #0
   12be8:	bd08      	pop	{r3, pc}
   12bea:	46c0      	nop			; (mov r8, r8)
   12bec:	1fffe104 	.word	0x1fffe104

00012bf0 <SystemTimer1_Interrupt>:
SystemTimer1_Interrupt():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:394
**         and eventually invokes event(s) of the component.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void SystemTimer1_Interrupt(LDD_RTOS_TISRParameter _isrParameter)
{
   12bf0:	b508      	push	{r3, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:398
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  SystemTimer1_TDeviceDataPtr DeviceDataPrv = (SystemTimer1_TDeviceDataPtr)_isrParameter;

  SysTick_PDD_ClearInterruptFlag(SysTick_BASE_PTR); /* Clear interrupt flag */
   12bf2:	4b04      	ldr	r3, [pc, #16]	; (12c04 <SystemTimer1_Interrupt+0x14>)
   12bf4:	4a04      	ldr	r2, [pc, #16]	; (12c08 <SystemTimer1_Interrupt+0x18>)
   12bf6:	6819      	ldr	r1, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:399
  SystemTimer1_OnCounterRestart(DeviceDataPrv->UserDataPtr); /* Invoke OnCounterRestart event */
   12bf8:	6880      	ldr	r0, [r0, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:398
void SystemTimer1_Interrupt(LDD_RTOS_TISRParameter _isrParameter)
{
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  SystemTimer1_TDeviceDataPtr DeviceDataPrv = (SystemTimer1_TDeviceDataPtr)_isrParameter;

  SysTick_PDD_ClearInterruptFlag(SysTick_BASE_PTR); /* Clear interrupt flag */
   12bfa:	400a      	ands	r2, r1
   12bfc:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:399
  SystemTimer1_OnCounterRestart(DeviceDataPrv->UserDataPtr); /* Invoke OnCounterRestart event */
   12bfe:	f7ff ffbf 	bl	12b80 <SystemTimer1_OnCounterRestart>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:400
}
   12c02:	bd08      	pop	{r3, pc}
   12c04:	e000e010 	.word	0xe000e010
   12c08:	fffeffff 	.word	0xfffeffff

00012c0c <SystemTimer1_Init>:
SystemTimer1_Init():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:157
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* SystemTimer1_Init(LDD_TUserData *UserDataPtr)
{
   12c0c:	b538      	push	{r3, r4, r5, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:162
  /* Allocate device structure */
  SystemTimer1_TDeviceData *DeviceDataPrv;
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   12c0e:	4c11      	ldr	r4, [pc, #68]	; (12c54 <SystemTimer1_Init+0x48>)
   12c10:	60a0      	str	r0, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:166
  /* Interrupt vector(s) allocation */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrData = _int_get_isr_data(LDD_ivIndex_INT_SysTick);
   12c12:	200f      	movs	r0, #15
   12c14:	f7fe fb26 	bl	11264 <_int_get_isr_data>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:167
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrFunction = _int_install_isr(LDD_ivIndex_INT_SysTick, SystemTimer1_Interrupt, DeviceDataPrv);
   12c18:	1c22      	adds	r2, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:166
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Interrupt vector(s) allocation */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrData = _int_get_isr_data(LDD_ivIndex_INT_SysTick);
   12c1a:	6060      	str	r0, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:167
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrFunction = _int_install_isr(LDD_ivIndex_INT_SysTick, SystemTimer1_Interrupt, DeviceDataPrv);
   12c1c:	490e      	ldr	r1, [pc, #56]	; (12c58 <SystemTimer1_Init+0x4c>)
   12c1e:	200f      	movs	r0, #15
   12c20:	f7fe fb40 	bl	112a4 <_int_install_isr>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:169
  /* SYST_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COUNTFLAG=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CLKSOURCE=0,TICKINT=0,ENABLE=0 */
  SYST_CSR = 0x00U;                    /* Clear control register */
   12c24:	4b0d      	ldr	r3, [pc, #52]	; (12c5c <SystemTimer1_Init+0x50>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:171
  /* SYST_RVR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,RELOAD=0x00493DFF */
  SYST_RVR = SysTick_RVR_RELOAD(0x00493DFF); /* Setup reload value */
   12c26:	490e      	ldr	r1, [pc, #56]	; (12c60 <SystemTimer1_Init+0x54>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:169
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrData = _int_get_isr_data(LDD_ivIndex_INT_SysTick);
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrFunction = _int_install_isr(LDD_ivIndex_INT_SysTick, SystemTimer1_Interrupt, DeviceDataPrv);
  /* SYST_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COUNTFLAG=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CLKSOURCE=0,TICKINT=0,ENABLE=0 */
  SYST_CSR = 0x00U;                    /* Clear control register */
   12c28:	2200      	movs	r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:167
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Interrupt vector(s) allocation */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrData = _int_get_isr_data(LDD_ivIndex_INT_SysTick);
  DeviceDataPrv->SavedISRSettings_TUInterrupt.isrFunction = _int_install_isr(LDD_ivIndex_INT_SysTick, SystemTimer1_Interrupt, DeviceDataPrv);
   12c2a:	6020      	str	r0, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:169
  /* SYST_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COUNTFLAG=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CLKSOURCE=0,TICKINT=0,ENABLE=0 */
  SYST_CSR = 0x00U;                    /* Clear control register */
   12c2c:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:171
  /* SYST_RVR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,RELOAD=0x00493DFF */
  SYST_RVR = SysTick_RVR_RELOAD(0x00493DFF); /* Setup reload value */
   12c2e:	6059      	str	r1, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:173
  /* SYST_CVR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CURRENT=0 */
  SYST_CVR = SysTick_CVR_CURRENT(0x00); /* Clear current value */
   12c30:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:175
  /* SCB_SHPR3: PRI_15=0x80 */
  SCB_SHPR3 = (uint32_t)((SCB_SHPR3 & (uint32_t)~(uint32_t)(
   12c32:	490c      	ldr	r1, [pc, #48]	; (12c64 <SystemTimer1_Init+0x58>)
   12c34:	22d2      	movs	r2, #210	; 0xd2
   12c36:	0112      	lsls	r2, r2, #4
   12c38:	588d      	ldr	r5, [r1, r2]
   12c3a:	2080      	movs	r0, #128	; 0x80
   12c3c:	022d      	lsls	r5, r5, #8
   12c3e:	0a2d      	lsrs	r5, r5, #8
   12c40:	0600      	lsls	r0, r0, #24
   12c42:	4328      	orrs	r0, r5
   12c44:	5088      	str	r0, [r1, r2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:181
               SCB_SHPR3_PRI_15(0x7F)
              )) | (uint32_t)(
               SCB_SHPR3_PRI_15(0x80)
              ));
  /* SYST_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COUNTFLAG=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CLKSOURCE=1,TICKINT=1,ENABLE=0 */
  SYST_CSR = (SysTick_CSR_CLKSOURCE_MASK | SysTick_CSR_TICKINT_MASK); /* Set up control register */
   12c46:	2206      	movs	r2, #6
   12c48:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:183
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_SystemTimer1_ID,DeviceDataPrv);
   12c4a:	4b07      	ldr	r3, [pc, #28]	; (12c68 <SystemTimer1_Init+0x5c>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:185
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
}
   12c4c:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:183
               SCB_SHPR3_PRI_15(0x80)
              ));
  /* SYST_CSR: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COUNTFLAG=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,CLKSOURCE=1,TICKINT=1,ENABLE=0 */
  SYST_CSR = (SysTick_CSR_CLKSOURCE_MASK | SysTick_CSR_TICKINT_MASK); /* Set up control register */
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_SystemTimer1_ID,DeviceDataPrv);
   12c4e:	601c      	str	r4, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:185
  return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
}
   12c50:	bd38      	pop	{r3, r4, r5, pc}
   12c52:	46c0      	nop			; (mov r8, r8)
   12c54:	1fffe12c 	.word	0x1fffe12c
   12c58:	00012bf1 	.word	0x00012bf1
   12c5c:	e000e010 	.word	0xe000e010
   12c60:	00493dff 	.word	0x00493dff
   12c64:	e000e000 	.word	0xe000e000
   12c68:	1fffe108 	.word	0x1fffe108

00012c6c <SystemTimer1_Enable>:
SystemTimer1_Enable():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:238
*/
/* ===================================================================*/
LDD_TError SystemTimer1_Enable(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  SysTick_PDD_EnableDevice(SysTick_BASE_PTR, PDD_ENABLE); /* Enable the device */
   12c6c:	4b03      	ldr	r3, [pc, #12]	; (12c7c <SystemTimer1_Enable+0x10>)
   12c6e:	2201      	movs	r2, #1
   12c70:	6819      	ldr	r1, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:240
  return ERR_OK;
}
   12c72:	2000      	movs	r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:238
*/
/* ===================================================================*/
LDD_TError SystemTimer1_Enable(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  SysTick_PDD_EnableDevice(SysTick_BASE_PTR, PDD_ENABLE); /* Enable the device */
   12c74:	430a      	orrs	r2, r1
   12c76:	601a      	str	r2, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:240
  return ERR_OK;
}
   12c78:	4770      	bx	lr
   12c7a:	46c0      	nop			; (mov r8, r8)
   12c7c:	e000e010 	.word	0xe000e010

00012c80 <SystemTimer1_GetInputFrequency>:
SystemTimer1_GetInputFrequency():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:288
/* ===================================================================*/
uint32_t SystemTimer1_GetInputFrequency(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  return SystemTimer1_CNT_INP_FREQ_U_0;
}
   12c80:	4800      	ldr	r0, [pc, #0]	; (12c84 <SystemTimer1_GetInputFrequency+0x4>)
   12c82:	4770      	bx	lr
   12c84:	02dc6c00 	.word	0x02dc6c00

00012c88 <SystemTimer1_GetPeriodTicks>:
SystemTimer1_GetPeriodTicks():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:319
LDD_TError SystemTimer1_GetPeriodTicks(LDD_TDeviceData *DeviceDataPtr, SystemTimer1_TValueType *TicksPtr)
{
  uint32_t tmp;

  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  tmp = (SystemTimer1_TValueType)(SysTick_PDD_ReadReloadValueReg(SysTick_BASE_PTR));
   12c88:	4b03      	ldr	r3, [pc, #12]	; (12c98 <SystemTimer1_GetPeriodTicks+0x10>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:323
  *TicksPtr = (SystemTimer1_TValueType)++tmp;
  *TicksPtr &= 0x00FFFFFFUL;
  return ERR_OK;                       /* OK */
}
   12c8a:	2000      	movs	r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:319
LDD_TError SystemTimer1_GetPeriodTicks(LDD_TDeviceData *DeviceDataPtr, SystemTimer1_TValueType *TicksPtr)
{
  uint32_t tmp;

  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  tmp = (SystemTimer1_TValueType)(SysTick_PDD_ReadReloadValueReg(SysTick_BASE_PTR));
   12c8c:	685b      	ldr	r3, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:320
  *TicksPtr = (SystemTimer1_TValueType)++tmp;
   12c8e:	3301      	adds	r3, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:321
  *TicksPtr &= 0x00FFFFFFUL;
   12c90:	021b      	lsls	r3, r3, #8
   12c92:	0a1b      	lsrs	r3, r3, #8
   12c94:	600b      	str	r3, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:323
  return ERR_OK;                       /* OK */
}
   12c96:	4770      	bx	lr
   12c98:	e000e010 	.word	0xe000e010

00012c9c <SystemTimer1_GetCounterValue>:
SystemTimer1_GetCounterValue():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:380
*/
/* ===================================================================*/
SystemTimer1_TValueType SystemTimer1_GetCounterValue(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  return (SystemTimer1_TValueType)SysTick_PDD_ReadCurrentValueReg(SysTick_BASE_PTR);
   12c9c:	4b01      	ldr	r3, [pc, #4]	; (12ca4 <SystemTimer1_GetCounterValue+0x8>)
   12c9e:	6898      	ldr	r0, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/SystemTimer1.c:381
}
   12ca0:	4770      	bx	lr
   12ca2:	46c0      	nop			; (mov r8, r8)
   12ca4:	e000e010 	.word	0xe000e010

00012ca8 <TestPin_KF_Time_Init>:
TestPin_KF_Time_Init():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:133
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Configure pin as output */
  /* GPIOC_PDDR: PDD|=0x0400 */
  GPIOC_PDDR |= GPIO_PDDR_PDD(0x0400);
   12ca8:	4b0b      	ldr	r3, [pc, #44]	; (12cd8 <TestPin_KF_Time_Init+0x30>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:130
  /* Allocate device structure */
  TestPin_KF_Time_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   12caa:	4a0c      	ldr	r2, [pc, #48]	; (12cdc <TestPin_KF_Time_Init+0x34>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:133
  /* Configure pin as output */
  /* GPIOC_PDDR: PDD|=0x0400 */
  GPIOC_PDDR |= GPIO_PDDR_PDD(0x0400);
   12cac:	2180      	movs	r1, #128	; 0x80
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:130
  /* Allocate device structure */
  TestPin_KF_Time_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   12cae:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:133
  /* Configure pin as output */
  /* GPIOC_PDDR: PDD|=0x0400 */
  GPIOC_PDDR |= GPIO_PDDR_PDD(0x0400);
   12cb0:	6958      	ldr	r0, [r3, #20]
   12cb2:	00c9      	lsls	r1, r1, #3
   12cb4:	4301      	orrs	r1, r0
   12cb6:	6159      	str	r1, [r3, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:136
  /* Set initialization value */
  /* GPIOC_PDOR: PDO&=~0x0400 */
  GPIOC_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x0400));
   12cb8:	6818      	ldr	r0, [r3, #0]
   12cba:	4909      	ldr	r1, [pc, #36]	; (12ce0 <TestPin_KF_Time_Init+0x38>)
   12cbc:	4001      	ands	r1, r0
   12cbe:	6019      	str	r1, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:139
  /* Initialization of Port Control register */
  /* PORTC_PCR10: ISF=0,MUX=1 */
  PORTC_PCR10 = (uint32_t)((PORTC_PCR10 & (uint32_t)~(uint32_t)(
   12cc0:	4b08      	ldr	r3, [pc, #32]	; (12ce4 <TestPin_KF_Time_Init+0x3c>)
   12cc2:	4909      	ldr	r1, [pc, #36]	; (12ce8 <TestPin_KF_Time_Init+0x40>)
   12cc4:	6a98      	ldr	r0, [r3, #40]	; 0x28
   12cc6:	4001      	ands	r1, r0
   12cc8:	2080      	movs	r0, #128	; 0x80
   12cca:	0040      	lsls	r0, r0, #1
   12ccc:	4301      	orrs	r1, r0
   12cce:	6299      	str	r1, [r3, #40]	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:146
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TestPin_KF_Time_ID,DeviceDataPrv);
   12cd0:	4b06      	ldr	r3, [pc, #24]	; (12cec <TestPin_KF_Time_Init+0x44>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:148
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   12cd2:	1c10      	adds	r0, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:146
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TestPin_KF_Time_ID,DeviceDataPrv);
   12cd4:	61da      	str	r2, [r3, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:148
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   12cd6:	4770      	bx	lr
   12cd8:	400ff080 	.word	0x400ff080
   12cdc:	1fffe138 	.word	0x1fffe138
   12ce0:	fffffbff 	.word	0xfffffbff
   12ce4:	4004b000 	.word	0x4004b000
   12ce8:	fefff8ff 	.word	0xfefff8ff
   12cec:	1fffe108 	.word	0x1fffe108

00012cf0 <TestPin_KF_Time_ClrVal>:
TestPin_KF_Time_ClrVal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:229
*/
/* ===================================================================*/
void TestPin_KF_Time_ClrVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_ClearPortDataOutputMask(TestPin_KF_Time_MODULE_BASE_ADDRESS, TestPin_KF_Time_PORT_MASK);
   12cf0:	4b02      	ldr	r3, [pc, #8]	; (12cfc <TestPin_KF_Time_ClrVal+0xc>)
   12cf2:	2280      	movs	r2, #128	; 0x80
   12cf4:	00d2      	lsls	r2, r2, #3
   12cf6:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:230
}
   12cf8:	4770      	bx	lr
   12cfa:	46c0      	nop			; (mov r8, r8)
   12cfc:	f8000080 	.word	0xf8000080

00012d00 <TestPin_KF_Time_SetVal>:
TestPin_KF_Time_SetVal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:249
*/
/* ===================================================================*/
void TestPin_KF_Time_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(TestPin_KF_Time_MODULE_BASE_ADDRESS, TestPin_KF_Time_PORT_MASK);
   12d00:	4b02      	ldr	r3, [pc, #8]	; (12d0c <TestPin_KF_Time_SetVal+0xc>)
   12d02:	2280      	movs	r2, #128	; 0x80
   12d04:	00d2      	lsls	r2, r2, #3
   12d06:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_KF_Time.c:250
}
   12d08:	4770      	bx	lr
   12d0a:	46c0      	nop			; (mov r8, r8)
   12d0c:	f8000080 	.word	0xf8000080

00012d10 <TestPin_MagCal_Time_Init>:
TestPin_MagCal_Time_Init():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:133
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Configure pin as output */
  /* GPIOC_PDDR: PDD|=0x0800 */
  GPIOC_PDDR |= GPIO_PDDR_PDD(0x0800);
   12d10:	4b0b      	ldr	r3, [pc, #44]	; (12d40 <TestPin_MagCal_Time_Init+0x30>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:130
  /* Allocate device structure */
  TestPin_MagCal_Time_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   12d12:	4a0c      	ldr	r2, [pc, #48]	; (12d44 <TestPin_MagCal_Time_Init+0x34>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:133
  /* Configure pin as output */
  /* GPIOC_PDDR: PDD|=0x0800 */
  GPIOC_PDDR |= GPIO_PDDR_PDD(0x0800);
   12d14:	2180      	movs	r1, #128	; 0x80
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:130
  /* Allocate device structure */
  TestPin_MagCal_Time_TDeviceDataPtr DeviceDataPrv;

  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   12d16:	6010      	str	r0, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:133
  /* Configure pin as output */
  /* GPIOC_PDDR: PDD|=0x0800 */
  GPIOC_PDDR |= GPIO_PDDR_PDD(0x0800);
   12d18:	6958      	ldr	r0, [r3, #20]
   12d1a:	0109      	lsls	r1, r1, #4
   12d1c:	4301      	orrs	r1, r0
   12d1e:	6159      	str	r1, [r3, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:136
  /* Set initialization value */
  /* GPIOC_PDOR: PDO&=~0x0800 */
  GPIOC_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x0800));
   12d20:	6818      	ldr	r0, [r3, #0]
   12d22:	4909      	ldr	r1, [pc, #36]	; (12d48 <TestPin_MagCal_Time_Init+0x38>)
   12d24:	4001      	ands	r1, r0
   12d26:	6019      	str	r1, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:139
  /* Initialization of Port Control register */
  /* PORTC_PCR11: ISF=0,MUX=1 */
  PORTC_PCR11 = (uint32_t)((PORTC_PCR11 & (uint32_t)~(uint32_t)(
   12d28:	4b08      	ldr	r3, [pc, #32]	; (12d4c <TestPin_MagCal_Time_Init+0x3c>)
   12d2a:	4909      	ldr	r1, [pc, #36]	; (12d50 <TestPin_MagCal_Time_Init+0x40>)
   12d2c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   12d2e:	4001      	ands	r1, r0
   12d30:	2080      	movs	r0, #128	; 0x80
   12d32:	0040      	lsls	r0, r0, #1
   12d34:	4301      	orrs	r1, r0
   12d36:	62d9      	str	r1, [r3, #44]	; 0x2c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:146
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TestPin_MagCal_Time_ID,DeviceDataPrv);
   12d38:	4b06      	ldr	r3, [pc, #24]	; (12d54 <TestPin_MagCal_Time_Init+0x44>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:148
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   12d3a:	1c10      	adds	r0, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:146
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TestPin_MagCal_Time_ID,DeviceDataPrv);
   12d3c:	621a      	str	r2, [r3, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:148
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   12d3e:	4770      	bx	lr
   12d40:	400ff080 	.word	0x400ff080
   12d44:	1fffe13c 	.word	0x1fffe13c
   12d48:	fffff7ff 	.word	0xfffff7ff
   12d4c:	4004b000 	.word	0x4004b000
   12d50:	fefff8ff 	.word	0xfefff8ff
   12d54:	1fffe108 	.word	0x1fffe108

00012d58 <TestPin_MagCal_Time_ClrVal>:
TestPin_MagCal_Time_ClrVal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:229
*/
/* ===================================================================*/
void TestPin_MagCal_Time_ClrVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_ClearPortDataOutputMask(TestPin_MagCal_Time_MODULE_BASE_ADDRESS, TestPin_MagCal_Time_PORT_MASK);
   12d58:	4b02      	ldr	r3, [pc, #8]	; (12d64 <TestPin_MagCal_Time_ClrVal+0xc>)
   12d5a:	2280      	movs	r2, #128	; 0x80
   12d5c:	0112      	lsls	r2, r2, #4
   12d5e:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:230
}
   12d60:	4770      	bx	lr
   12d62:	46c0      	nop			; (mov r8, r8)
   12d64:	f8000080 	.word	0xf8000080

00012d68 <TestPin_MagCal_Time_SetVal>:
TestPin_MagCal_Time_SetVal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:249
*/
/* ===================================================================*/
void TestPin_MagCal_Time_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(TestPin_MagCal_Time_MODULE_BASE_ADDRESS, TestPin_MagCal_Time_PORT_MASK);
   12d68:	4b02      	ldr	r3, [pc, #8]	; (12d74 <TestPin_MagCal_Time_SetVal+0xc>)
   12d6a:	2280      	movs	r2, #128	; 0x80
   12d6c:	0112      	lsls	r2, r2, #4
   12d6e:	605a      	str	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/TestPin_MagCal_Time.c:250
}
   12d70:	4770      	bx	lr
   12d72:	46c0      	nop			; (mov r8, r8)
   12d74:	f8000080 	.word	0xf8000080

00012d78 <UART_Interrupt>:
UART_Interrupt():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:462
**         interrupt. Calls InterruptTX/InterruptRX methods.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void UART_Interrupt(LDD_RTOS_TISRParameter _isrParameter)
{
   12d78:	b538      	push	{r3, r4, r5, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:465
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)_isrParameter;
  register uint32_t StatReg = UART0_PDD_ReadInterruptStatusReg(UART0_BASE_PTR); /* Read status register */
   12d7a:	4b33      	ldr	r3, [pc, #204]	; (12e48 <UART_Interrupt+0xd0>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:467

  if (StatReg & (UART0_S1_NF_MASK | UART0_S1_OR_MASK | UART0_S1_FE_MASK | UART0_S1_PF_MASK)) { /* Is any error flag set? */
   12d7c:	220f      	movs	r2, #15
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:465
*/
void UART_Interrupt(LDD_RTOS_TISRParameter _isrParameter)
{
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)_isrParameter;
  register uint32_t StatReg = UART0_PDD_ReadInterruptStatusReg(UART0_BASE_PTR); /* Read status register */
   12d7e:	791c      	ldrb	r4, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:462
**         interrupt. Calls InterruptTX/InterruptRX methods.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void UART_Interrupt(LDD_RTOS_TISRParameter _isrParameter)
{
   12d80:	1c05      	adds	r5, r0, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:465
  /* {MQXLite RTOS Adapter} ISR parameter is passed as parameter from RTOS interrupt dispatcher */
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)_isrParameter;
  register uint32_t StatReg = UART0_PDD_ReadInterruptStatusReg(UART0_BASE_PTR); /* Read status register */
   12d82:	b2e4      	uxtb	r4, r4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:467

  if (StatReg & (UART0_S1_NF_MASK | UART0_S1_OR_MASK | UART0_S1_FE_MASK | UART0_S1_PF_MASK)) { /* Is any error flag set? */
   12d84:	4222      	tst	r2, r4
   12d86:	d003      	beq.n	12d90 <UART_Interrupt+0x18>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:468
    UART0_PDD_ClearInterruptFlags(UART0_BASE_PTR, (UART0_S1_NF_MASK | UART0_S1_OR_MASK | UART0_S1_FE_MASK | UART0_S1_PF_MASK));
   12d88:	711a      	strb	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:469
    (void)UART0_PDD_GetChar8(UART0_BASE_PTR); /* Dummy read 8-bit character from receiver */
   12d8a:	79db      	ldrb	r3, [r3, #7]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:470
    StatReg &= (uint32_t)(~(uint32_t)UART0_S1_RDRF_MASK); /* Clear the receive data flag to discard the errorneous data */
   12d8c:	2320      	movs	r3, #32
   12d8e:	439c      	bics	r4, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:472
  }
  if (StatReg & UART0_S1_RDRF_MASK) {  /* Is the receiver's interrupt flag set? */
   12d90:	06a3      	lsls	r3, r4, #26
   12d92:	d418      	bmi.n	12dc6 <UART_Interrupt+0x4e>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:475
    InterruptRx(DeviceDataPrv);        /* If yes, then invoke the internal service routine. This routine is inlined. */
  }
  if (DeviceDataPrv->SerFlag & ENABLED_TX_INT) { /* Is the transmitter interrupt enabled? */
   12d94:	882a      	ldrh	r2, [r5, #0]
   12d96:	2301      	movs	r3, #1
   12d98:	4213      	tst	r3, r2
   12d9a:	d002      	beq.n	12da2 <UART_Interrupt+0x2a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:476
    if (StatReg & UART0_S1_TDRE_MASK) { /* Is the transmitter empty? */
   12d9c:	2280      	movs	r2, #128	; 0x80
   12d9e:	4222      	tst	r2, r4
   12da0:	d128      	bne.n	12df4 <UART_Interrupt+0x7c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:480
      InterruptTx(DeviceDataPrv);      /* If yes, then invoke the internal service routine. This routine is inlined. */
    }
  }
  if ((UART0_PDD_GetTxCompleteInterruptMask(UART0_BASE_PTR) != 0U)  && (StatReg & UART0_S1_TC_MASK)) { /* Is a transmission completed? */
   12da2:	4b29      	ldr	r3, [pc, #164]	; (12e48 <UART_Interrupt+0xd0>)
   12da4:	2240      	movs	r2, #64	; 0x40
   12da6:	78d9      	ldrb	r1, [r3, #3]
   12da8:	420a      	tst	r2, r1
   12daa:	d001      	beq.n	12db0 <UART_Interrupt+0x38>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:480 (discriminator 1)
   12dac:	4222      	tst	r2, r4
   12dae:	d100      	bne.n	12db2 <UART_Interrupt+0x3a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:484
    UART0_PDD_DisableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER_COMPLETE); /* If yes then disable TX complete interrupt */
    UART_OnTxComplete(DeviceDataPrv->UserDataPtr); /* If yes then invoke user event */
  }
}
   12db0:	bd38      	pop	{r3, r4, r5, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:481
    if (StatReg & UART0_S1_TDRE_MASK) { /* Is the transmitter empty? */
      InterruptTx(DeviceDataPrv);      /* If yes, then invoke the internal service routine. This routine is inlined. */
    }
  }
  if ((UART0_PDD_GetTxCompleteInterruptMask(UART0_BASE_PTR) != 0U)  && (StatReg & UART0_S1_TC_MASK)) { /* Is a transmission completed? */
    UART0_PDD_DisableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER_COMPLETE); /* If yes then disable TX complete interrupt */
   12db2:	78d9      	ldrb	r1, [r3, #3]
   12db4:	4391      	bics	r1, r2
   12db6:	70d9      	strb	r1, [r3, #3]
   12db8:	799a      	ldrb	r2, [r3, #6]
   12dba:	b2d2      	uxtb	r2, r2
   12dbc:	719a      	strb	r2, [r3, #6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:482
    UART_OnTxComplete(DeviceDataPrv->UserDataPtr); /* If yes then invoke user event */
   12dbe:	69e8      	ldr	r0, [r5, #28]
   12dc0:	f7ef fee4 	bl	2b8c <UART_OnTxComplete>
   12dc4:	e7f4      	b.n	12db0 <UART_Interrupt+0x38>
InterruptRx():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:413
*/
static void InterruptRx(UART_TDeviceDataPtr DeviceDataPrv)
{
  register uint16_t Data;              /* Temporary variable for data */

  Data = (uint16_t)UART0_PDD_GetChar8(UART0_BASE_PTR); /* Read an 8-bit character from the receiver */
   12dc6:	4b20      	ldr	r3, [pc, #128]	; (12e48 <UART_Interrupt+0xd0>)
   12dc8:	79db      	ldrb	r3, [r3, #7]
   12dca:	b2d9      	uxtb	r1, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:414
  if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the receive block operation pending? */
   12dcc:	892b      	ldrh	r3, [r5, #8]
   12dce:	2b00      	cmp	r3, #0
   12dd0:	d0e0      	beq.n	12d94 <UART_Interrupt+0x1c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:415
    *(DeviceDataPrv->InpDataPtr++) = (uint8_t)Data; /* Put an 8-bit character to the receive buffer */
   12dd2:	686a      	ldr	r2, [r5, #4]
   12dd4:	1c53      	adds	r3, r2, #1
   12dd6:	606b      	str	r3, [r5, #4]
   12dd8:	7011      	strb	r1, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:416
    DeviceDataPrv->InpRecvDataNum++;   /* Increment received char. counter */
   12dda:	886b      	ldrh	r3, [r5, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:417
    if (DeviceDataPrv->InpRecvDataNum == DeviceDataPrv->InpDataNumReq) { /* Is the requested number of characters received? */
   12ddc:	892a      	ldrh	r2, [r5, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:416
  register uint16_t Data;              /* Temporary variable for data */

  Data = (uint16_t)UART0_PDD_GetChar8(UART0_BASE_PTR); /* Read an 8-bit character from the receiver */
  if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the receive block operation pending? */
    *(DeviceDataPrv->InpDataPtr++) = (uint8_t)Data; /* Put an 8-bit character to the receive buffer */
    DeviceDataPrv->InpRecvDataNum++;   /* Increment received char. counter */
   12dde:	3301      	adds	r3, #1
   12de0:	b29b      	uxth	r3, r3
   12de2:	806b      	strh	r3, [r5, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:417
    if (DeviceDataPrv->InpRecvDataNum == DeviceDataPrv->InpDataNumReq) { /* Is the requested number of characters received? */
   12de4:	429a      	cmp	r2, r3
   12de6:	d1d5      	bne.n	12d94 <UART_Interrupt+0x1c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:418
      DeviceDataPrv->InpDataNumReq = 0x00U; /* If yes then clear number of requested characters to be received. */
   12de8:	2300      	movs	r3, #0
   12dea:	812b      	strh	r3, [r5, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:419
      UART_OnBlockReceived(DeviceDataPrv->UserDataPtr);
   12dec:	69e8      	ldr	r0, [r5, #28]
   12dee:	f7ef fecf 	bl	2b90 <UART_OnBlockReceived>
   12df2:	e7cf      	b.n	12d94 <UART_Interrupt+0x1c>
InterruptTx():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:437
** ===================================================================
*/
static void InterruptTx(UART_TDeviceDataPtr DeviceDataPrv)
{

  if (DeviceDataPrv->OutSentDataNum < DeviceDataPrv->OutDataNumReq) { /* Is number of sent characters less than the number of requested incoming characters? */
   12df4:	8969      	ldrh	r1, [r5, #10]
   12df6:	8a2a      	ldrh	r2, [r5, #16]
   12df8:	4291      	cmp	r1, r2
   12dfa:	d212      	bcs.n	12e22 <UART_Interrupt+0xaa>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:438
    UART0_PDD_PutChar8(UART0_BASE_PTR, *(DeviceDataPrv->OutDataPtr++)); /* Put a 8-bit character to the transmit register */
   12dfc:	68eb      	ldr	r3, [r5, #12]
   12dfe:	1c5a      	adds	r2, r3, #1
   12e00:	60ea      	str	r2, [r5, #12]
   12e02:	781a      	ldrb	r2, [r3, #0]
   12e04:	4b10      	ldr	r3, [pc, #64]	; (12e48 <UART_Interrupt+0xd0>)
   12e06:	71da      	strb	r2, [r3, #7]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:439
    DeviceDataPrv->OutSentDataNum++;   /* Increment the counter of sent characters. */
   12e08:	896b      	ldrh	r3, [r5, #10]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:440
    if (DeviceDataPrv->OutSentDataNum == DeviceDataPrv->OutDataNumReq) {
   12e0a:	8a2a      	ldrh	r2, [r5, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:439
static void InterruptTx(UART_TDeviceDataPtr DeviceDataPrv)
{

  if (DeviceDataPrv->OutSentDataNum < DeviceDataPrv->OutDataNumReq) { /* Is number of sent characters less than the number of requested incoming characters? */
    UART0_PDD_PutChar8(UART0_BASE_PTR, *(DeviceDataPrv->OutDataPtr++)); /* Put a 8-bit character to the transmit register */
    DeviceDataPrv->OutSentDataNum++;   /* Increment the counter of sent characters. */
   12e0c:	3301      	adds	r3, #1
   12e0e:	b29b      	uxth	r3, r3
   12e10:	816b      	strh	r3, [r5, #10]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:440
    if (DeviceDataPrv->OutSentDataNum == DeviceDataPrv->OutDataNumReq) {
   12e12:	429a      	cmp	r2, r3
   12e14:	d1c5      	bne.n	12da2 <UART_Interrupt+0x2a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:441
      DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBlock() */
   12e16:	2300      	movs	r3, #0
   12e18:	822b      	strh	r3, [r5, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:442
      UART_OnBlockSent(DeviceDataPrv->UserDataPtr);
   12e1a:	69e8      	ldr	r0, [r5, #28]
   12e1c:	f7ef fea0 	bl	2b60 <UART_OnBlockSent>
   12e20:	e7bf      	b.n	12da2 <UART_Interrupt+0x2a>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:445
    }
  } else {
    UART0_PDD_DisableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER); /* Disable TX interrupt */
   12e22:	4a09      	ldr	r2, [pc, #36]	; (12e48 <UART_Interrupt+0xd0>)
   12e24:	207f      	movs	r0, #127	; 0x7f
   12e26:	78d1      	ldrb	r1, [r2, #3]
   12e28:	4001      	ands	r1, r0
   12e2a:	70d1      	strb	r1, [r2, #3]
   12e2c:	7991      	ldrb	r1, [r2, #6]
   12e2e:	b2c9      	uxtb	r1, r1
   12e30:	7191      	strb	r1, [r2, #6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:446
    UART0_PDD_EnableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER_COMPLETE); /* Enable TX complete interrupt */
   12e32:	78d0      	ldrb	r0, [r2, #3]
   12e34:	2140      	movs	r1, #64	; 0x40
   12e36:	4301      	orrs	r1, r0
   12e38:	70d1      	strb	r1, [r2, #3]
   12e3a:	7991      	ldrb	r1, [r2, #6]
   12e3c:	b2c9      	uxtb	r1, r1
   12e3e:	7191      	strb	r1, [r2, #6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:447
    DeviceDataPrv->SerFlag &= (uint16_t)(~(uint16_t)ENABLED_TX_INT); /* Clear the flag ENABLED_TX_INT */
   12e40:	882a      	ldrh	r2, [r5, #0]
   12e42:	439a      	bics	r2, r3
   12e44:	802a      	strh	r2, [r5, #0]
   12e46:	e7ac      	b.n	12da2 <UART_Interrupt+0x2a>
   12e48:	4006a000 	.word	0x4006a000

00012e4c <UART_Init>:
UART_Init():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:162
**     @return
**                         - Device data structure pointer.
*/
/* ===================================================================*/
LDD_TDeviceData* UART_Init(LDD_TUserData *UserDataPtr)
{
   12e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:169
  UART_TDeviceDataPtr DeviceDataPrv;
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;

  /* Clear the receive counters and pointer */
  DeviceDataPrv->InpRecvDataNum = 0x00U; /* Clear the counter of received characters */
   12e4e:	4c37      	ldr	r4, [pc, #220]	; (12f2c <UART_Init+0xe0>)
   12e50:	2500      	movs	r5, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:176
  DeviceDataPrv->InpDataPtr = NULL;    /* Clear the buffer pointer for received characters */
  /* Clear the transmit counters and pointer */
  DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters */
  DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBlock() */
  DeviceDataPrv->OutDataPtr = NULL;    /* Clear the buffer pointer for data to be transmitted */
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
   12e52:	61e0      	str	r0, [r4, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:180
  /* Allocate interrupt vectors */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_UART0);
   12e54:	201c      	movs	r0, #28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:169
  UART_TDeviceDataPtr DeviceDataPrv;
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;

  /* Clear the receive counters and pointer */
  DeviceDataPrv->InpRecvDataNum = 0x00U; /* Clear the counter of received characters */
   12e56:	8065      	strh	r5, [r4, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:170
  DeviceDataPrv->InpDataNumReq = 0x00U; /* Clear the counter of characters to receive by ReceiveBlock() */
   12e58:	8125      	strh	r5, [r4, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:171
  DeviceDataPrv->InpDataPtr = NULL;    /* Clear the buffer pointer for received characters */
   12e5a:	6065      	str	r5, [r4, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:173
  /* Clear the transmit counters and pointer */
  DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters */
   12e5c:	8165      	strh	r5, [r4, #10]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:174
  DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBlock() */
   12e5e:	8225      	strh	r5, [r4, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:175
  DeviceDataPrv->OutDataPtr = NULL;    /* Clear the buffer pointer for data to be transmitted */
   12e60:	60e5      	str	r5, [r4, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:180
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Allocate interrupt vectors */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_UART0);
   12e62:	f7fe f9ff 	bl	11264 <_int_get_isr_data>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:181
  DeviceDataPrv->SavedISRSettings.isrFunction = _int_install_isr(LDD_ivIndex_INT_UART0, UART_Interrupt, DeviceDataPrv);
   12e66:	1c22      	adds	r2, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:180
  DeviceDataPrv->OutDataPtr = NULL;    /* Clear the buffer pointer for data to be transmitted */
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Allocate interrupt vectors */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_UART0);
   12e68:	61a0      	str	r0, [r4, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:181
  DeviceDataPrv->SavedISRSettings.isrFunction = _int_install_isr(LDD_ivIndex_INT_UART0, UART_Interrupt, DeviceDataPrv);
   12e6a:	4931      	ldr	r1, [pc, #196]	; (12f30 <UART_Init+0xe4>)
   12e6c:	201c      	movs	r0, #28
   12e6e:	f7fe fa19 	bl	112a4 <_int_install_isr>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:183
  /* SIM_SCGC4: UART0=1 */
  SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
   12e72:	4a30      	ldr	r2, [pc, #192]	; (12f34 <UART_Init+0xe8>)
   12e74:	4b30      	ldr	r3, [pc, #192]	; (12f38 <UART_Init+0xec>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:181
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  /* Allocate interrupt vectors */
  /* {MQXLite RTOS Adapter} Save old and set new interrupt vector (function handler and ISR parameter) */
  /* Note: Exception handler for interrupt is not saved, because it is not modified */
  DeviceDataPrv->SavedISRSettings.isrData = _int_get_isr_data(LDD_ivIndex_INT_UART0);
  DeviceDataPrv->SavedISRSettings.isrFunction = _int_install_isr(LDD_ivIndex_INT_UART0, UART_Interrupt, DeviceDataPrv);
   12e76:	6160      	str	r0, [r4, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:183
  /* SIM_SCGC4: UART0=1 */
  SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
   12e78:	2180      	movs	r1, #128	; 0x80
   12e7a:	58d0      	ldr	r0, [r2, r3]
   12e7c:	00c9      	lsls	r1, r1, #3
   12e7e:	4301      	orrs	r1, r0
   12e80:	50d1      	str	r1, [r2, r3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:185
  /* PORTA_PCR1: ISF=0,MUX=2 */
  PORTA_PCR1 = (uint32_t)((PORTA_PCR1 & (uint32_t)~(uint32_t)(
   12e82:	4b2e      	ldr	r3, [pc, #184]	; (12f3c <UART_Init+0xf0>)
   12e84:	482e      	ldr	r0, [pc, #184]	; (12f40 <UART_Init+0xf4>)
   12e86:	685f      	ldr	r7, [r3, #4]
   12e88:	2180      	movs	r1, #128	; 0x80
   12e8a:	4007      	ands	r7, r0
   12e8c:	0089      	lsls	r1, r1, #2
   12e8e:	430f      	orrs	r7, r1
   12e90:	605f      	str	r7, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:192
                PORT_PCR_MUX(0x05)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x02)
               ));
  /* PORTA_PCR2: ISF=0,MUX=2 */
  PORTA_PCR2 = (uint32_t)((PORTA_PCR2 & (uint32_t)~(uint32_t)(
   12e92:	689f      	ldr	r7, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:169
  UART_TDeviceDataPtr DeviceDataPrv;
  /* {MQXLite RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;

  /* Clear the receive counters and pointer */
  DeviceDataPrv->InpRecvDataNum = 0x00U; /* Clear the counter of received characters */
   12e94:	2600      	movs	r6, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:192
                PORT_PCR_MUX(0x05)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x02)
               ));
  /* PORTA_PCR2: ISF=0,MUX=2 */
  PORTA_PCR2 = (uint32_t)((PORTA_PCR2 & (uint32_t)~(uint32_t)(
   12e96:	4038      	ands	r0, r7
   12e98:	4301      	orrs	r1, r0
   12e9a:	6099      	str	r1, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:199
                PORT_PCR_MUX(0x05)
               )) | (uint32_t)(
                PORT_PCR_MUX(0x02)
               ));
  /* NVIC_IPR3: PRI_12=0x80 */
  NVIC_IPR3 = (uint32_t)((NVIC_IPR3 & (uint32_t)~(uint32_t)(
   12e9c:	4b29      	ldr	r3, [pc, #164]	; (12f44 <UART_Init+0xf8>)
   12e9e:	21c3      	movs	r1, #195	; 0xc3
   12ea0:	0089      	lsls	r1, r1, #2
   12ea2:	5858      	ldr	r0, [r3, r1]
   12ea4:	27ff      	movs	r7, #255	; 0xff
   12ea6:	43b8      	bics	r0, r7
   12ea8:	2780      	movs	r7, #128	; 0x80
   12eaa:	4338      	orrs	r0, r7
   12eac:	5058      	str	r0, [r3, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:205
               NVIC_IP_PRI_12(0x7F)
              )) | (uint32_t)(
               NVIC_IP_PRI_12(0x80)
              ));
  /* NVIC_ISER: SETENA|=0x1000 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x1000);
   12eae:	6818      	ldr	r0, [r3, #0]
   12eb0:	2180      	movs	r1, #128	; 0x80
   12eb2:	0149      	lsls	r1, r1, #5
   12eb4:	4301      	orrs	r1, r0
   12eb6:	6019      	str	r1, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:206
  UART0_PDD_EnableTransmitter(UART0_BASE_PTR, PDD_DISABLE); /* Disable transmitter. */
   12eb8:	4b23      	ldr	r3, [pc, #140]	; (12f48 <UART_Init+0xfc>)
   12eba:	2008      	movs	r0, #8
   12ebc:	78d9      	ldrb	r1, [r3, #3]
   12ebe:	4381      	bics	r1, r0
   12ec0:	70d9      	strb	r1, [r3, #3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:207
  UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_DISABLE); /* Disable receiver. */
   12ec2:	78d9      	ldrb	r1, [r3, #3]
   12ec4:	2004      	movs	r0, #4
   12ec6:	4381      	bics	r1, r0
   12ec8:	70d9      	strb	r1, [r3, #3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:217
  UART0_C3 = 0x00U;                    /*  Set the C3 register */
  /* UART0_C4: MAEN1=0,MAEN2=0,M10=0,OSR=0 */
  UART0_C4 = UART0_C4_OSR(0x00);       /*  Set the C4 register */
  /* UART0_S2: LBKDIF=0,RXEDGIF=0,MSBF=0,RXINV=0,RWUID=0,BRK13=0,LBKDE=0,RAF=0 */
  UART0_S2 = 0x00U;                    /*  Set the S2 register */
  SIM_PDD_SetClockSourceUART0(SIM_BASE_PTR, SIM_PDD_UART0_PLL_FLL_CLOCK);
   12eca:	4920      	ldr	r1, [pc, #128]	; (12f4c <UART_Init+0x100>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:208
              ));
  /* NVIC_ISER: SETENA|=0x1000 */
  NVIC_ISER |= NVIC_ISER_SETENA(0x1000);
  UART0_PDD_EnableTransmitter(UART0_BASE_PTR, PDD_DISABLE); /* Disable transmitter. */
  UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_DISABLE); /* Disable receiver. */
  DeviceDataPrv->SerFlag = 0x00U;      /* Reset flags */
   12ecc:	8025      	strh	r5, [r4, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:210
  /* UART0_C1: LOOPS=0,DOZEEN=0,RSRC=0,M=0,WAKE=0,ILT=0,PE=0,PT=0 */
  UART0_C1 = 0x00U;                    /*  Set the C1 register */
   12ece:	709e      	strb	r6, [r3, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:212
  /* UART0_C3: R8T9=0,R9T8=0,TXDIR=0,TXINV=0,ORIE=0,NEIE=0,FEIE=0,PEIE=0 */
  UART0_C3 = 0x00U;                    /*  Set the C3 register */
   12ed0:	719e      	strb	r6, [r3, #6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:214
  /* UART0_C4: MAEN1=0,MAEN2=0,M10=0,OSR=0 */
  UART0_C4 = UART0_C4_OSR(0x00);       /*  Set the C4 register */
   12ed2:	729e      	strb	r6, [r3, #10]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:216
  /* UART0_S2: LBKDIF=0,RXEDGIF=0,MSBF=0,RXINV=0,RWUID=0,BRK13=0,LBKDE=0,RAF=0 */
  UART0_S2 = 0x00U;                    /*  Set the S2 register */
   12ed4:	715e      	strb	r6, [r3, #5]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:217
  SIM_PDD_SetClockSourceUART0(SIM_BASE_PTR, SIM_PDD_UART0_PLL_FLL_CLOCK);
   12ed6:	5855      	ldr	r5, [r2, r1]
   12ed8:	481d      	ldr	r0, [pc, #116]	; (12f50 <UART_Init+0x104>)
   12eda:	4028      	ands	r0, r5
   12edc:	2580      	movs	r5, #128	; 0x80
   12ede:	04ed      	lsls	r5, r5, #19
   12ee0:	4328      	orrs	r0, r5
   12ee2:	5050      	str	r0, [r2, r1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:218
  UART0_PDD_SetBaudRate(UART0_BASE_PTR, 52U); /* Set the baud rate register. */
   12ee4:	7819      	ldrb	r1, [r3, #0]
   12ee6:	221f      	movs	r2, #31
   12ee8:	4391      	bics	r1, r2
   12eea:	7019      	strb	r1, [r3, #0]
   12eec:	2134      	movs	r1, #52	; 0x34
   12eee:	7059      	strb	r1, [r3, #1]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:219
  UART0_PDD_SetOversamplingRatio(UART0_BASE_PTR, 3U);
   12ef0:	7a99      	ldrb	r1, [r3, #10]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:227
  UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_ENABLE); /* Enable receiver */
  UART0_PDD_EnableInterrupt(UART0_BASE_PTR, ( UART0_PDD_INTERRUPT_RECEIVER )); /* Enable interrupts */
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_UART_ID,DeviceDataPrv);
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   12ef2:	1c20      	adds	r0, r4, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:219
  UART0_C4 = UART0_C4_OSR(0x00);       /*  Set the C4 register */
  /* UART0_S2: LBKDIF=0,RXEDGIF=0,MSBF=0,RXINV=0,RWUID=0,BRK13=0,LBKDE=0,RAF=0 */
  UART0_S2 = 0x00U;                    /*  Set the S2 register */
  SIM_PDD_SetClockSourceUART0(SIM_BASE_PTR, SIM_PDD_UART0_PLL_FLL_CLOCK);
  UART0_PDD_SetBaudRate(UART0_BASE_PTR, 52U); /* Set the baud rate register. */
  UART0_PDD_SetOversamplingRatio(UART0_BASE_PTR, 3U);
   12ef4:	4391      	bics	r1, r2
   12ef6:	1c0a      	adds	r2, r1, #0
   12ef8:	2103      	movs	r1, #3
   12efa:	430a      	orrs	r2, r1
   12efc:	729a      	strb	r2, [r3, #10]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:220
  UART0_PDD_EnableSamplingOnBothEdges(UART0_BASE_PTR, PDD_ENABLE);
   12efe:	7ad9      	ldrb	r1, [r3, #11]
   12f00:	2202      	movs	r2, #2
   12f02:	430a      	orrs	r2, r1
   12f04:	72da      	strb	r2, [r3, #11]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:221
  UART0_PDD_EnableTransmitter(UART0_BASE_PTR, PDD_ENABLE); /* Enable transmitter */
   12f06:	78d9      	ldrb	r1, [r3, #3]
   12f08:	2208      	movs	r2, #8
   12f0a:	430a      	orrs	r2, r1
   12f0c:	70da      	strb	r2, [r3, #3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:222
  UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_ENABLE); /* Enable receiver */
   12f0e:	78d9      	ldrb	r1, [r3, #3]
   12f10:	2204      	movs	r2, #4
   12f12:	430a      	orrs	r2, r1
   12f14:	70da      	strb	r2, [r3, #3]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:223
  UART0_PDD_EnableInterrupt(UART0_BASE_PTR, ( UART0_PDD_INTERRUPT_RECEIVER )); /* Enable interrupts */
   12f16:	78d9      	ldrb	r1, [r3, #3]
   12f18:	2220      	movs	r2, #32
   12f1a:	430a      	orrs	r2, r1
   12f1c:	70da      	strb	r2, [r3, #3]
   12f1e:	799a      	ldrb	r2, [r3, #6]
   12f20:	b2d2      	uxtb	r2, r2
   12f22:	719a      	strb	r2, [r3, #6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:225
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_UART_ID,DeviceDataPrv);
   12f24:	4b0b      	ldr	r3, [pc, #44]	; (12f54 <UART_Init+0x108>)
   12f26:	615c      	str	r4, [r3, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:227
  return ((LDD_TDeviceData *)DeviceDataPrv);
}
   12f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12f2a:	46c0      	nop			; (mov r8, r8)
   12f2c:	1fffe140 	.word	0x1fffe140
   12f30:	00012d79 	.word	0x00012d79
   12f34:	40047000 	.word	0x40047000
   12f38:	00001034 	.word	0x00001034
   12f3c:	40049000 	.word	0x40049000
   12f40:	fefff8ff 	.word	0xfefff8ff
   12f44:	e000e100 	.word	0xe000e100
   12f48:	4006a000 	.word	0x4006a000
   12f4c:	00001004 	.word	0x00001004
   12f50:	f3ffffff 	.word	0xf3ffffff
   12f54:	1fffe108 	.word	0x1fffe108

00012f58 <UART_ReceiveBlock>:
UART_ReceiveBlock():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:274
**                           ERR_BUSY - The previous receive request is
**                           pending.
*/
/* ===================================================================*/
LDD_TError UART_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
{
   12f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12f5a:	1c06      	adds	r6, r0, #0
   12f5c:	1c0f      	adds	r7, r1, #0
   12f5e:	1c15      	adds	r5, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:278
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)DeviceDataPtr;

  if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
    return ERR_PARAM_SIZE;             /* If no then error */
   12f60:	2484      	movs	r4, #132	; 0x84
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:277
/* ===================================================================*/
LDD_TError UART_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
{
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)DeviceDataPtr;

  if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
   12f62:	2a00      	cmp	r2, #0
   12f64:	d101      	bne.n	12f6a <UART_ReceiveBlock+0x12>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:291
  DeviceDataPrv->InpDataNumReq = Size; /* Store a number of characters to be received. */
  DeviceDataPrv->InpRecvDataNum = 0x00U; /* Set number of received characters to zero. */
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
  return ERR_OK;                       /* OK */
}
   12f66:	1c20      	adds	r0, r4, #0
   12f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:280
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)DeviceDataPtr;

  if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
    return ERR_PARAM_SIZE;             /* If no then error */
  }
  if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the previous receive operation pending? */
   12f6a:	8904      	ldrh	r4, [r0, #8]
   12f6c:	2c00      	cmp	r4, #0
   12f6e:	d001      	beq.n	12f74 <UART_ReceiveBlock+0x1c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:281
    return ERR_BUSY;                   /* If yes then error */
   12f70:	2408      	movs	r4, #8
   12f72:	e7f8      	b.n	12f66 <UART_ReceiveBlock+0xe>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:284
  }
  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
   12f74:	f7fe f95c 	bl	11230 <_int_disable>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:285
  DeviceDataPrv->InpDataPtr = (uint8_t*)BufferPtr; /* Store a pointer to the input data. */
   12f78:	6077      	str	r7, [r6, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:286
  DeviceDataPrv->InpDataNumReq = Size; /* Store a number of characters to be received. */
   12f7a:	8135      	strh	r5, [r6, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:287
  DeviceDataPrv->InpRecvDataNum = 0x00U; /* Set number of received characters to zero. */
   12f7c:	8074      	strh	r4, [r6, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:289
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
   12f7e:	f7fe f963 	bl	11248 <_int_enable>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:290
  return ERR_OK;                       /* OK */
   12f82:	e7f0      	b.n	12f66 <UART_ReceiveBlock+0xe>

00012f84 <UART_SendBlock>:
UART_SendBlock():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:334
**                           ERR_BUSY - The previous transmit request is
**                           pending.
*/
/* ===================================================================*/
LDD_TError UART_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
{
   12f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12f86:	1c06      	adds	r6, r0, #0
   12f88:	1c0f      	adds	r7, r1, #0
   12f8a:	1c15      	adds	r5, r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:338
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)DeviceDataPtr;

  if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
    return ERR_PARAM_SIZE;             /* If no then error */
   12f8c:	2484      	movs	r4, #132	; 0x84
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:337
/* ===================================================================*/
LDD_TError UART_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size)
{
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)DeviceDataPtr;

  if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
   12f8e:	2a00      	cmp	r2, #0
   12f90:	d101      	bne.n	12f96 <UART_SendBlock+0x12>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:353
  DeviceDataPrv->SerFlag |= ENABLED_TX_INT; /* Set the flag ENABLED_TX_INT */
  UART0_PDD_EnableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER); /* Enable TX interrupt */
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
  return ERR_OK;                       /* OK */
}
   12f92:	1c20      	adds	r0, r4, #0
   12f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:340
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)DeviceDataPtr;

  if (Size == 0U) {                    /* Is the parameter Size within an expected range? */
    return ERR_PARAM_SIZE;             /* If no then error */
  }
  if (DeviceDataPrv->OutDataNumReq != 0x00U) { /* Is the previous transmit operation pending? */
   12f96:	8a04      	ldrh	r4, [r0, #16]
   12f98:	2c00      	cmp	r4, #0
   12f9a:	d001      	beq.n	12fa0 <UART_SendBlock+0x1c>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:341
    return ERR_BUSY;                   /* If yes then error */
   12f9c:	2408      	movs	r4, #8
   12f9e:	e7f8      	b.n	12f92 <UART_SendBlock+0xe>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:344
  }
  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
   12fa0:	f7fe f946 	bl	11230 <_int_disable>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:348
  DeviceDataPrv->OutDataPtr = (uint8_t*)BufferPtr; /* Set a pointer to the output data. */
  DeviceDataPrv->OutDataNumReq = Size; /* Set the counter of characters to be sent. */
  DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters. */
  DeviceDataPrv->SerFlag |= ENABLED_TX_INT; /* Set the flag ENABLED_TX_INT */
   12fa4:	8832      	ldrh	r2, [r6, #0]
   12fa6:	2301      	movs	r3, #1
   12fa8:	4313      	orrs	r3, r2
   12faa:	8033      	strh	r3, [r6, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:349
  UART0_PDD_EnableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER); /* Enable TX interrupt */
   12fac:	4b06      	ldr	r3, [pc, #24]	; (12fc8 <UART_SendBlock+0x44>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:345
  if (DeviceDataPrv->OutDataNumReq != 0x00U) { /* Is the previous transmit operation pending? */
    return ERR_BUSY;                   /* If yes then error */
  }
  /* {MQXLite RTOS Adapter} Critical section begin (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_disable();
  DeviceDataPrv->OutDataPtr = (uint8_t*)BufferPtr; /* Set a pointer to the output data. */
   12fae:	60f7      	str	r7, [r6, #12]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:346
  DeviceDataPrv->OutDataNumReq = Size; /* Set the counter of characters to be sent. */
   12fb0:	8235      	strh	r5, [r6, #16]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:347
  DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters. */
   12fb2:	8174      	strh	r4, [r6, #10]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:349
  DeviceDataPrv->SerFlag |= ENABLED_TX_INT; /* Set the flag ENABLED_TX_INT */
  UART0_PDD_EnableInterrupt(UART0_BASE_PTR, UART0_PDD_INTERRUPT_TRANSMITTER); /* Enable TX interrupt */
   12fb4:	78d9      	ldrb	r1, [r3, #3]
   12fb6:	2280      	movs	r2, #128	; 0x80
   12fb8:	430a      	orrs	r2, r1
   12fba:	70da      	strb	r2, [r3, #3]
   12fbc:	799a      	ldrb	r2, [r3, #6]
   12fbe:	b2d2      	uxtb	r2, r2
   12fc0:	719a      	strb	r2, [r3, #6]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:351
  /* {MQXLite RTOS Adapter} Critical section ends (RTOS function call is defined by MQXLite RTOS Adapter property) */
  _int_enable();
   12fc2:	f7fe f941 	bl	11248 <_int_enable>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:352
  return ERR_OK;                       /* OK */
   12fc6:	e7e4      	b.n	12f92 <UART_SendBlock+0xe>
   12fc8:	4006a000 	.word	0x4006a000

00012fcc <UART_GetReceivedDataNum>:
UART_GetReceivedDataNum():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:375
/* ===================================================================*/
uint16_t UART_GetReceivedDataNum(LDD_TDeviceData *DeviceDataPtr)
{
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)DeviceDataPtr;

  return (DeviceDataPrv->InpRecvDataNum); /* Return the number of received characters. */
   12fcc:	8840      	ldrh	r0, [r0, #2]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:376
}
   12fce:	4770      	bx	lr

00012fd0 <UART_GetSentDataNum>:
UART_GetSentDataNum():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:396
/* ===================================================================*/
uint16_t UART_GetSentDataNum(LDD_TDeviceData *DeviceDataPtr)
{
  UART_TDeviceDataPtr DeviceDataPrv = (UART_TDeviceDataPtr)DeviceDataPtr;

  return (DeviceDataPrv->OutSentDataNum); /* Return the number of sent characters. */
   12fd0:	8940      	ldrh	r0, [r0, #10]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../Generated_Code/UART.c:397
}
   12fd2:	4770      	bx	lr

00012fd4 <sinf>:
sinf():
   12fd4:	b500      	push	{lr}
   12fd6:	4a1d      	ldr	r2, [pc, #116]	; (1304c <sinf+0x78>)
   12fd8:	0043      	lsls	r3, r0, #1
   12fda:	b083      	sub	sp, #12
   12fdc:	1c01      	adds	r1, r0, #0
   12fde:	085b      	lsrs	r3, r3, #1
   12fe0:	4293      	cmp	r3, r2
   12fe2:	dd19      	ble.n	13018 <sinf+0x44>
   12fe4:	4a1a      	ldr	r2, [pc, #104]	; (13050 <sinf+0x7c>)
   12fe6:	4293      	cmp	r3, r2
   12fe8:	dd03      	ble.n	12ff2 <sinf+0x1e>
   12fea:	f7ed fffd 	bl	fe8 <__aeabi_fsub>
   12fee:	b003      	add	sp, #12
   12ff0:	bd00      	pop	{pc}
   12ff2:	4669      	mov	r1, sp
   12ff4:	f000 ff9c 	bl	13f30 <__ieee754_rem_pio2f>
   12ff8:	2303      	movs	r3, #3
   12ffa:	4018      	ands	r0, r3
   12ffc:	2801      	cmp	r0, #1
   12ffe:	d019      	beq.n	13034 <sinf+0x60>
   13000:	2802      	cmp	r0, #2
   13002:	d00e      	beq.n	13022 <sinf+0x4e>
   13004:	2800      	cmp	r0, #0
   13006:	d01a      	beq.n	1303e <sinf+0x6a>
   13008:	9800      	ldr	r0, [sp, #0]
   1300a:	9901      	ldr	r1, [sp, #4]
   1300c:	f001 f96a 	bl	142e4 <__kernel_cosf>
   13010:	2380      	movs	r3, #128	; 0x80
   13012:	061b      	lsls	r3, r3, #24
   13014:	18c0      	adds	r0, r0, r3
   13016:	e7ea      	b.n	12fee <sinf+0x1a>
   13018:	2100      	movs	r1, #0
   1301a:	2200      	movs	r2, #0
   1301c:	f001 fd8a 	bl	14b34 <__kernel_sinf>
   13020:	e7e5      	b.n	12fee <sinf+0x1a>
   13022:	9800      	ldr	r0, [sp, #0]
   13024:	9901      	ldr	r1, [sp, #4]
   13026:	2201      	movs	r2, #1
   13028:	f001 fd84 	bl	14b34 <__kernel_sinf>
   1302c:	2380      	movs	r3, #128	; 0x80
   1302e:	061b      	lsls	r3, r3, #24
   13030:	18c0      	adds	r0, r0, r3
   13032:	e7dc      	b.n	12fee <sinf+0x1a>
   13034:	9901      	ldr	r1, [sp, #4]
   13036:	9800      	ldr	r0, [sp, #0]
   13038:	f001 f954 	bl	142e4 <__kernel_cosf>
   1303c:	e7d7      	b.n	12fee <sinf+0x1a>
   1303e:	9800      	ldr	r0, [sp, #0]
   13040:	9901      	ldr	r1, [sp, #4]
   13042:	2201      	movs	r2, #1
   13044:	f001 fd76 	bl	14b34 <__kernel_sinf>
   13048:	e7d1      	b.n	12fee <sinf+0x1a>
   1304a:	46c0      	nop			; (mov r8, r8)
   1304c:	3f490fd8 	.word	0x3f490fd8
   13050:	7f7fffff 	.word	0x7f7fffff

00013054 <acosf>:
acosf():
   13054:	b570      	push	{r4, r5, r6, lr}
   13056:	b08a      	sub	sp, #40	; 0x28
   13058:	1c04      	adds	r4, r0, #0
   1305a:	f000 fa71 	bl	13540 <__ieee754_acosf>
   1305e:	4e22      	ldr	r6, [pc, #136]	; (130e8 <acosf+0x94>)
   13060:	2300      	movs	r3, #0
   13062:	56f3      	ldrsb	r3, [r6, r3]
   13064:	1c05      	adds	r5, r0, #0
   13066:	3301      	adds	r3, #1
   13068:	d004      	beq.n	13074 <acosf+0x20>
   1306a:	1c20      	adds	r0, r4, #0
   1306c:	f001 feec 	bl	14e48 <__fpclassifyf>
   13070:	2800      	cmp	r0, #0
   13072:	d102      	bne.n	1307a <acosf+0x26>
   13074:	1c28      	adds	r0, r5, #0
   13076:	b00a      	add	sp, #40	; 0x28
   13078:	bd70      	pop	{r4, r5, r6, pc}
   1307a:	1c20      	adds	r0, r4, #0
   1307c:	f001 fe8a 	bl	14d94 <fabsf>
   13080:	21fe      	movs	r1, #254	; 0xfe
   13082:	0589      	lsls	r1, r1, #22
   13084:	f7ed fb22 	bl	6cc <__aeabi_fcmpgt>
   13088:	2800      	cmp	r0, #0
   1308a:	d0f3      	beq.n	13074 <acosf+0x20>
   1308c:	2301      	movs	r3, #1
   1308e:	9300      	str	r3, [sp, #0]
   13090:	4b16      	ldr	r3, [pc, #88]	; (130ec <acosf+0x98>)
   13092:	1c20      	adds	r0, r4, #0
   13094:	9301      	str	r3, [sp, #4]
   13096:	2300      	movs	r3, #0
   13098:	9308      	str	r3, [sp, #32]
   1309a:	f7ef fc57 	bl	294c <__aeabi_f2d>
   1309e:	9004      	str	r0, [sp, #16]
   130a0:	9105      	str	r1, [sp, #20]
   130a2:	9002      	str	r0, [sp, #8]
   130a4:	9103      	str	r1, [sp, #12]
   130a6:	4812      	ldr	r0, [pc, #72]	; (130f0 <acosf+0x9c>)
   130a8:	f001 fdc2 	bl	14c30 <nan>
   130ac:	2300      	movs	r3, #0
   130ae:	56f3      	ldrsb	r3, [r6, r3]
   130b0:	9006      	str	r0, [sp, #24]
   130b2:	9107      	str	r1, [sp, #28]
   130b4:	2b02      	cmp	r3, #2
   130b6:	d00d      	beq.n	130d4 <acosf+0x80>
   130b8:	4668      	mov	r0, sp
   130ba:	f001 fdb5 	bl	14c28 <matherr>
   130be:	2800      	cmp	r0, #0
   130c0:	d008      	beq.n	130d4 <acosf+0x80>
   130c2:	9b08      	ldr	r3, [sp, #32]
   130c4:	2b00      	cmp	r3, #0
   130c6:	d10a      	bne.n	130de <acosf+0x8a>
   130c8:	9806      	ldr	r0, [sp, #24]
   130ca:	9907      	ldr	r1, [sp, #28]
   130cc:	f7ef fc90 	bl	29f0 <__aeabi_d2f>
   130d0:	1c05      	adds	r5, r0, #0
   130d2:	e7cf      	b.n	13074 <acosf+0x20>
   130d4:	f001 ff46 	bl	14f64 <__errno>
   130d8:	2321      	movs	r3, #33	; 0x21
   130da:	6003      	str	r3, [r0, #0]
   130dc:	e7f1      	b.n	130c2 <acosf+0x6e>
   130de:	f001 ff41 	bl	14f64 <__errno>
   130e2:	9b08      	ldr	r3, [sp, #32]
   130e4:	6003      	str	r3, [r0, #0]
   130e6:	e7ef      	b.n	130c8 <acosf+0x74>
   130e8:	1fffe018 	.word	0x1fffe018
   130ec:	0001529c 	.word	0x0001529c
   130f0:	00015160 	.word	0x00015160
$d():
   130f4:	00000000 	.word	0x00000000

000130f8 <powf>:
powf():
   130f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   130fa:	4646      	mov	r6, r8
   130fc:	464f      	mov	r7, r9
   130fe:	b4c0      	push	{r6, r7}
   13100:	b08b      	sub	sp, #44	; 0x2c
   13102:	1c05      	adds	r5, r0, #0
   13104:	1c0c      	adds	r4, r1, #0
   13106:	f000 fb85 	bl	13814 <__ieee754_powf>
   1310a:	4ebb      	ldr	r6, [pc, #748]	; (133f8 <powf+0x300>)
   1310c:	2300      	movs	r3, #0
   1310e:	56f3      	ldrsb	r3, [r6, r3]
   13110:	4680      	mov	r8, r0
   13112:	1c07      	adds	r7, r0, #0
   13114:	3301      	adds	r3, #1
   13116:	d004      	beq.n	13122 <powf+0x2a>
   13118:	1c20      	adds	r0, r4, #0
   1311a:	f001 fe95 	bl	14e48 <__fpclassifyf>
   1311e:	2800      	cmp	r0, #0
   13120:	d105      	bne.n	1312e <powf+0x36>
   13122:	1c38      	adds	r0, r7, #0
   13124:	b00b      	add	sp, #44	; 0x2c
   13126:	bc0c      	pop	{r2, r3}
   13128:	4690      	mov	r8, r2
   1312a:	4699      	mov	r9, r3
   1312c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1312e:	1c28      	adds	r0, r5, #0
   13130:	f001 fe8a 	bl	14e48 <__fpclassifyf>
   13134:	4681      	mov	r9, r0
   13136:	2800      	cmp	r0, #0
   13138:	d133      	bne.n	131a2 <powf+0xaa>
   1313a:	1c20      	adds	r0, r4, #0
   1313c:	2100      	movs	r1, #0
   1313e:	f7ed faab 	bl	698 <__aeabi_fcmpeq>
   13142:	2800      	cmp	r0, #0
   13144:	d0ed      	beq.n	13122 <powf+0x2a>
   13146:	2301      	movs	r3, #1
   13148:	9300      	str	r3, [sp, #0]
   1314a:	4bac      	ldr	r3, [pc, #688]	; (133fc <powf+0x304>)
   1314c:	464a      	mov	r2, r9
   1314e:	1c28      	adds	r0, r5, #0
   13150:	9301      	str	r3, [sp, #4]
   13152:	9208      	str	r2, [sp, #32]
   13154:	f7ef fbfa 	bl	294c <__aeabi_f2d>
   13158:	466f      	mov	r7, sp
   1315a:	60b8      	str	r0, [r7, #8]
   1315c:	60f9      	str	r1, [r7, #12]
   1315e:	1c20      	adds	r0, r4, #0
   13160:	f7ef fbf4 	bl	294c <__aeabi_f2d>
   13164:	4b9d      	ldr	r3, [pc, #628]	; (133dc <powf+0x2e4>)
   13166:	4a9c      	ldr	r2, [pc, #624]	; (133d8 <powf+0x2e0>)
   13168:	61ba      	str	r2, [r7, #24]
   1316a:	61fb      	str	r3, [r7, #28]
   1316c:	2300      	movs	r3, #0
   1316e:	56f3      	ldrsb	r3, [r6, r3]
   13170:	6138      	str	r0, [r7, #16]
   13172:	6179      	str	r1, [r7, #20]
   13174:	1c5a      	adds	r2, r3, #1
   13176:	d00e      	beq.n	13196 <powf+0x9e>
   13178:	2b02      	cmp	r3, #2
   1317a:	d00c      	beq.n	13196 <powf+0x9e>
   1317c:	4668      	mov	r0, sp
   1317e:	f001 fd53 	bl	14c28 <matherr>
   13182:	2800      	cmp	r0, #0
   13184:	d100      	bne.n	13188 <powf+0x90>
   13186:	e0e5      	b.n	13354 <powf+0x25c>
   13188:	6a3b      	ldr	r3, [r7, #32]
   1318a:	2b00      	cmp	r3, #0
   1318c:	d003      	beq.n	13196 <powf+0x9e>
   1318e:	f001 fee9 	bl	14f64 <__errno>
   13192:	6a3b      	ldr	r3, [r7, #32]
   13194:	6003      	str	r3, [r0, #0]
   13196:	69b8      	ldr	r0, [r7, #24]
   13198:	69f9      	ldr	r1, [r7, #28]
   1319a:	f7ef fc29 	bl	29f0 <__aeabi_d2f>
   1319e:	1c07      	adds	r7, r0, #0
   131a0:	e7bf      	b.n	13122 <powf+0x2a>
   131a2:	1c28      	adds	r0, r5, #0
   131a4:	2100      	movs	r1, #0
   131a6:	f7ed fa77 	bl	698 <__aeabi_fcmpeq>
   131aa:	2800      	cmp	r0, #0
   131ac:	d032      	beq.n	13214 <powf+0x11c>
   131ae:	1c20      	adds	r0, r4, #0
   131b0:	2100      	movs	r1, #0
   131b2:	f7ed fa71 	bl	698 <__aeabi_fcmpeq>
   131b6:	4680      	mov	r8, r0
   131b8:	2800      	cmp	r0, #0
   131ba:	d069      	beq.n	13290 <powf+0x198>
   131bc:	2301      	movs	r3, #1
   131be:	9300      	str	r3, [sp, #0]
   131c0:	4b8e      	ldr	r3, [pc, #568]	; (133fc <powf+0x304>)
   131c2:	1c28      	adds	r0, r5, #0
   131c4:	9301      	str	r3, [sp, #4]
   131c6:	2300      	movs	r3, #0
   131c8:	9308      	str	r3, [sp, #32]
   131ca:	f7ef fbbf 	bl	294c <__aeabi_f2d>
   131ce:	466f      	mov	r7, sp
   131d0:	60b8      	str	r0, [r7, #8]
   131d2:	60f9      	str	r1, [r7, #12]
   131d4:	1c20      	adds	r0, r4, #0
   131d6:	f7ef fbb9 	bl	294c <__aeabi_f2d>
   131da:	4a81      	ldr	r2, [pc, #516]	; (133e0 <powf+0x2e8>)
   131dc:	4b81      	ldr	r3, [pc, #516]	; (133e4 <powf+0x2ec>)
   131de:	61ba      	str	r2, [r7, #24]
   131e0:	61fb      	str	r3, [r7, #28]
   131e2:	2300      	movs	r3, #0
   131e4:	56f3      	ldrsb	r3, [r6, r3]
   131e6:	6138      	str	r0, [r7, #16]
   131e8:	6179      	str	r1, [r7, #20]
   131ea:	2b00      	cmp	r3, #0
   131ec:	d004      	beq.n	131f8 <powf+0x100>
   131ee:	4b7b      	ldr	r3, [pc, #492]	; (133dc <powf+0x2e4>)
   131f0:	4a79      	ldr	r2, [pc, #484]	; (133d8 <powf+0x2e0>)
   131f2:	61ba      	str	r2, [r7, #24]
   131f4:	61fb      	str	r3, [r7, #28]
   131f6:	e7ce      	b.n	13196 <powf+0x9e>
   131f8:	4668      	mov	r0, sp
   131fa:	f001 fd15 	bl	14c28 <matherr>
   131fe:	2800      	cmp	r0, #0
   13200:	d100      	bne.n	13204 <powf+0x10c>
   13202:	e0ac      	b.n	1335e <powf+0x266>
   13204:	6a3b      	ldr	r3, [r7, #32]
   13206:	2b00      	cmp	r3, #0
   13208:	d0c5      	beq.n	13196 <powf+0x9e>
   1320a:	f001 feab 	bl	14f64 <__errno>
   1320e:	6a3a      	ldr	r2, [r7, #32]
   13210:	6002      	str	r2, [r0, #0]
   13212:	e7c0      	b.n	13196 <powf+0x9e>
   13214:	4640      	mov	r0, r8
   13216:	f001 fdc1 	bl	14d9c <finitef>
   1321a:	4681      	mov	r9, r0
   1321c:	2800      	cmp	r0, #0
   1321e:	d067      	beq.n	132f0 <powf+0x1f8>
   13220:	4640      	mov	r0, r8
   13222:	2100      	movs	r1, #0
   13224:	f7ed fa38 	bl	698 <__aeabi_fcmpeq>
   13228:	4647      	mov	r7, r8
   1322a:	2800      	cmp	r0, #0
   1322c:	d100      	bne.n	13230 <powf+0x138>
   1322e:	e778      	b.n	13122 <powf+0x2a>
   13230:	1c28      	adds	r0, r5, #0
   13232:	f001 fdb3 	bl	14d9c <finitef>
   13236:	4647      	mov	r7, r8
   13238:	2800      	cmp	r0, #0
   1323a:	d100      	bne.n	1323e <powf+0x146>
   1323c:	e771      	b.n	13122 <powf+0x2a>
   1323e:	1c20      	adds	r0, r4, #0
   13240:	f001 fdac 	bl	14d9c <finitef>
   13244:	2800      	cmp	r0, #0
   13246:	d100      	bne.n	1324a <powf+0x152>
   13248:	e76b      	b.n	13122 <powf+0x2a>
   1324a:	2304      	movs	r3, #4
   1324c:	9300      	str	r3, [sp, #0]
   1324e:	4b6b      	ldr	r3, [pc, #428]	; (133fc <powf+0x304>)
   13250:	1c28      	adds	r0, r5, #0
   13252:	9301      	str	r3, [sp, #4]
   13254:	2300      	movs	r3, #0
   13256:	9308      	str	r3, [sp, #32]
   13258:	f7ef fb78 	bl	294c <__aeabi_f2d>
   1325c:	466f      	mov	r7, sp
   1325e:	60b8      	str	r0, [r7, #8]
   13260:	60f9      	str	r1, [r7, #12]
   13262:	1c20      	adds	r0, r4, #0
   13264:	f7ef fb72 	bl	294c <__aeabi_f2d>
   13268:	4a5d      	ldr	r2, [pc, #372]	; (133e0 <powf+0x2e8>)
   1326a:	4b5e      	ldr	r3, [pc, #376]	; (133e4 <powf+0x2ec>)
   1326c:	61ba      	str	r2, [r7, #24]
   1326e:	61fb      	str	r3, [r7, #28]
   13270:	2300      	movs	r3, #0
   13272:	56f3      	ldrsb	r3, [r6, r3]
   13274:	6138      	str	r0, [r7, #16]
   13276:	6179      	str	r1, [r7, #20]
   13278:	2b02      	cmp	r3, #2
   1327a:	d07a      	beq.n	13372 <powf+0x27a>
   1327c:	4668      	mov	r0, sp
   1327e:	f001 fcd3 	bl	14c28 <matherr>
   13282:	2800      	cmp	r0, #0
   13284:	d075      	beq.n	13372 <powf+0x27a>
   13286:	6a3b      	ldr	r3, [r7, #32]
   13288:	2b00      	cmp	r3, #0
   1328a:	d100      	bne.n	1328e <powf+0x196>
   1328c:	e783      	b.n	13196 <powf+0x9e>
   1328e:	e7bc      	b.n	1320a <powf+0x112>
   13290:	1c20      	adds	r0, r4, #0
   13292:	f001 fd83 	bl	14d9c <finitef>
   13296:	2800      	cmp	r0, #0
   13298:	d100      	bne.n	1329c <powf+0x1a4>
   1329a:	e742      	b.n	13122 <powf+0x2a>
   1329c:	1c20      	adds	r0, r4, #0
   1329e:	2100      	movs	r1, #0
   132a0:	f7ed fa00 	bl	6a4 <__aeabi_fcmplt>
   132a4:	2800      	cmp	r0, #0
   132a6:	d100      	bne.n	132aa <powf+0x1b2>
   132a8:	e73b      	b.n	13122 <powf+0x2a>
   132aa:	2301      	movs	r3, #1
   132ac:	9300      	str	r3, [sp, #0]
   132ae:	4b53      	ldr	r3, [pc, #332]	; (133fc <powf+0x304>)
   132b0:	1c28      	adds	r0, r5, #0
   132b2:	9301      	str	r3, [sp, #4]
   132b4:	4643      	mov	r3, r8
   132b6:	9308      	str	r3, [sp, #32]
   132b8:	f7ef fb48 	bl	294c <__aeabi_f2d>
   132bc:	466f      	mov	r7, sp
   132be:	60b8      	str	r0, [r7, #8]
   132c0:	60f9      	str	r1, [r7, #12]
   132c2:	1c20      	adds	r0, r4, #0
   132c4:	f7ef fb42 	bl	294c <__aeabi_f2d>
   132c8:	6138      	str	r0, [r7, #16]
   132ca:	6179      	str	r1, [r7, #20]
   132cc:	7831      	ldrb	r1, [r6, #0]
   132ce:	2900      	cmp	r1, #0
   132d0:	d04a      	beq.n	13368 <powf+0x270>
   132d2:	4a45      	ldr	r2, [pc, #276]	; (133e8 <powf+0x2f0>)
   132d4:	4b45      	ldr	r3, [pc, #276]	; (133ec <powf+0x2f4>)
   132d6:	61ba      	str	r2, [r7, #24]
   132d8:	61fb      	str	r3, [r7, #28]
   132da:	2902      	cmp	r1, #2
   132dc:	d134      	bne.n	13348 <powf+0x250>
   132de:	f001 fe41 	bl	14f64 <__errno>
   132e2:	2321      	movs	r3, #33	; 0x21
   132e4:	6003      	str	r3, [r0, #0]
   132e6:	6a3a      	ldr	r2, [r7, #32]
   132e8:	2a00      	cmp	r2, #0
   132ea:	d100      	bne.n	132ee <powf+0x1f6>
   132ec:	e753      	b.n	13196 <powf+0x9e>
   132ee:	e74e      	b.n	1318e <powf+0x96>
   132f0:	1c28      	adds	r0, r5, #0
   132f2:	f001 fd53 	bl	14d9c <finitef>
   132f6:	2800      	cmp	r0, #0
   132f8:	d092      	beq.n	13220 <powf+0x128>
   132fa:	1c20      	adds	r0, r4, #0
   132fc:	f001 fd4e 	bl	14d9c <finitef>
   13300:	2800      	cmp	r0, #0
   13302:	d08d      	beq.n	13220 <powf+0x128>
   13304:	4640      	mov	r0, r8
   13306:	f001 fd9f 	bl	14e48 <__fpclassifyf>
   1330a:	466f      	mov	r7, sp
   1330c:	2800      	cmp	r0, #0
   1330e:	d135      	bne.n	1337c <powf+0x284>
   13310:	2301      	movs	r3, #1
   13312:	9300      	str	r3, [sp, #0]
   13314:	4b39      	ldr	r3, [pc, #228]	; (133fc <powf+0x304>)
   13316:	9008      	str	r0, [sp, #32]
   13318:	1c28      	adds	r0, r5, #0
   1331a:	9301      	str	r3, [sp, #4]
   1331c:	f7ef fb16 	bl	294c <__aeabi_f2d>
   13320:	60b8      	str	r0, [r7, #8]
   13322:	60f9      	str	r1, [r7, #12]
   13324:	1c20      	adds	r0, r4, #0
   13326:	f7ef fb11 	bl	294c <__aeabi_f2d>
   1332a:	7834      	ldrb	r4, [r6, #0]
   1332c:	6138      	str	r0, [r7, #16]
   1332e:	6179      	str	r1, [r7, #20]
   13330:	2c00      	cmp	r4, #0
   13332:	d019      	beq.n	13368 <powf+0x270>
   13334:	482a      	ldr	r0, [pc, #168]	; (133e0 <powf+0x2e8>)
   13336:	492b      	ldr	r1, [pc, #172]	; (133e4 <powf+0x2ec>)
   13338:	1c02      	adds	r2, r0, #0
   1333a:	1c0b      	adds	r3, r1, #0
   1333c:	f7ee fb68 	bl	1a10 <__aeabi_ddiv>
   13340:	61b8      	str	r0, [r7, #24]
   13342:	61f9      	str	r1, [r7, #28]
   13344:	2c02      	cmp	r4, #2
   13346:	d0ca      	beq.n	132de <powf+0x1e6>
   13348:	4668      	mov	r0, sp
   1334a:	f001 fc6d 	bl	14c28 <matherr>
   1334e:	2800      	cmp	r0, #0
   13350:	d1c9      	bne.n	132e6 <powf+0x1ee>
   13352:	e7c4      	b.n	132de <powf+0x1e6>
   13354:	f001 fe06 	bl	14f64 <__errno>
   13358:	2321      	movs	r3, #33	; 0x21
   1335a:	6003      	str	r3, [r0, #0]
   1335c:	e714      	b.n	13188 <powf+0x90>
   1335e:	f001 fe01 	bl	14f64 <__errno>
   13362:	2321      	movs	r3, #33	; 0x21
   13364:	6003      	str	r3, [r0, #0]
   13366:	e74d      	b.n	13204 <powf+0x10c>
   13368:	4a1d      	ldr	r2, [pc, #116]	; (133e0 <powf+0x2e8>)
   1336a:	4b1e      	ldr	r3, [pc, #120]	; (133e4 <powf+0x2ec>)
   1336c:	61ba      	str	r2, [r7, #24]
   1336e:	61fb      	str	r3, [r7, #28]
   13370:	e7ea      	b.n	13348 <powf+0x250>
   13372:	f001 fdf7 	bl	14f64 <__errno>
   13376:	2322      	movs	r3, #34	; 0x22
   13378:	6003      	str	r3, [r0, #0]
   1337a:	e784      	b.n	13286 <powf+0x18e>
   1337c:	2303      	movs	r3, #3
   1337e:	9300      	str	r3, [sp, #0]
   13380:	4b1e      	ldr	r3, [pc, #120]	; (133fc <powf+0x304>)
   13382:	464a      	mov	r2, r9
   13384:	1c28      	adds	r0, r5, #0
   13386:	9301      	str	r3, [sp, #4]
   13388:	9208      	str	r2, [sp, #32]
   1338a:	f7ef fadf 	bl	294c <__aeabi_f2d>
   1338e:	60b8      	str	r0, [r7, #8]
   13390:	60f9      	str	r1, [r7, #12]
   13392:	1c20      	adds	r0, r4, #0
   13394:	f7ef fada 	bl	294c <__aeabi_f2d>
   13398:	2300      	movs	r3, #0
   1339a:	56f3      	ldrsb	r3, [r6, r3]
   1339c:	6138      	str	r0, [r7, #16]
   1339e:	6179      	str	r1, [r7, #20]
   133a0:	2b00      	cmp	r3, #0
   133a2:	d12d      	bne.n	13400 <powf+0x308>
   133a4:	4a12      	ldr	r2, [pc, #72]	; (133f0 <powf+0x2f8>)
   133a6:	4b13      	ldr	r3, [pc, #76]	; (133f4 <powf+0x2fc>)
   133a8:	1c28      	adds	r0, r5, #0
   133aa:	61ba      	str	r2, [r7, #24]
   133ac:	61fb      	str	r3, [r7, #28]
   133ae:	2100      	movs	r1, #0
   133b0:	f7ed f978 	bl	6a4 <__aeabi_fcmplt>
   133b4:	2800      	cmp	r0, #0
   133b6:	d145      	bne.n	13444 <powf+0x34c>
   133b8:	2300      	movs	r3, #0
   133ba:	56f3      	ldrsb	r3, [r6, r3]
   133bc:	2b02      	cmp	r3, #2
   133be:	d005      	beq.n	133cc <powf+0x2d4>
   133c0:	4668      	mov	r0, sp
   133c2:	f001 fc31 	bl	14c28 <matherr>
   133c6:	2800      	cmp	r0, #0
   133c8:	d000      	beq.n	133cc <powf+0x2d4>
   133ca:	e71b      	b.n	13204 <powf+0x10c>
   133cc:	f001 fdca 	bl	14f64 <__errno>
   133d0:	2322      	movs	r3, #34	; 0x22
   133d2:	6003      	str	r3, [r0, #0]
   133d4:	e716      	b.n	13204 <powf+0x10c>
   133d6:	46c0      	nop			; (mov r8, r8)
   133d8:	00000000 	.word	0x00000000
   133dc:	3ff00000 	.word	0x3ff00000
	...
   133ec:	fff00000 	.word	0xfff00000
   133f0:	e0000000 	.word	0xe0000000
   133f4:	47efffff 	.word	0x47efffff
   133f8:	1fffe018 	.word	0x1fffe018
   133fc:	000152a4 	.word	0x000152a4
   13400:	4b1e      	ldr	r3, [pc, #120]	; (1347c <powf+0x384>)
   13402:	4a1d      	ldr	r2, [pc, #116]	; (13478 <powf+0x380>)
   13404:	1c28      	adds	r0, r5, #0
   13406:	61ba      	str	r2, [r7, #24]
   13408:	61fb      	str	r3, [r7, #28]
   1340a:	2100      	movs	r1, #0
   1340c:	f7ed f94a 	bl	6a4 <__aeabi_fcmplt>
   13410:	2800      	cmp	r0, #0
   13412:	d0d1      	beq.n	133b8 <powf+0x2c0>
   13414:	21fc      	movs	r1, #252	; 0xfc
   13416:	1c20      	adds	r0, r4, #0
   13418:	0589      	lsls	r1, r1, #22
   1341a:	f7ed fcbb 	bl	d94 <__aeabi_fmul>
   1341e:	f7ef fa95 	bl	294c <__aeabi_f2d>
   13422:	1c04      	adds	r4, r0, #0
   13424:	1c0d      	adds	r5, r1, #0
   13426:	f001 fc0b 	bl	14c40 <rint>
   1342a:	1c02      	adds	r2, r0, #0
   1342c:	1c0b      	adds	r3, r1, #0
   1342e:	1c20      	adds	r0, r4, #0
   13430:	1c29      	adds	r1, r5, #0
   13432:	f7ed f8f7 	bl	624 <__aeabi_dcmpeq>
   13436:	2800      	cmp	r0, #0
   13438:	d1be      	bne.n	133b8 <powf+0x2c0>
   1343a:	4a11      	ldr	r2, [pc, #68]	; (13480 <powf+0x388>)
   1343c:	4b11      	ldr	r3, [pc, #68]	; (13484 <powf+0x38c>)
   1343e:	61ba      	str	r2, [r7, #24]
   13440:	61fb      	str	r3, [r7, #28]
   13442:	e7b9      	b.n	133b8 <powf+0x2c0>
   13444:	21fc      	movs	r1, #252	; 0xfc
   13446:	1c20      	adds	r0, r4, #0
   13448:	0589      	lsls	r1, r1, #22
   1344a:	f7ed fca3 	bl	d94 <__aeabi_fmul>
   1344e:	f7ef fa7d 	bl	294c <__aeabi_f2d>
   13452:	1c04      	adds	r4, r0, #0
   13454:	1c0d      	adds	r5, r1, #0
   13456:	f001 fbf3 	bl	14c40 <rint>
   1345a:	1c02      	adds	r2, r0, #0
   1345c:	1c0b      	adds	r3, r1, #0
   1345e:	1c20      	adds	r0, r4, #0
   13460:	1c29      	adds	r1, r5, #0
   13462:	f7ed f8df 	bl	624 <__aeabi_dcmpeq>
   13466:	2800      	cmp	r0, #0
   13468:	d1a6      	bne.n	133b8 <powf+0x2c0>
   1346a:	4a07      	ldr	r2, [pc, #28]	; (13488 <powf+0x390>)
   1346c:	4b07      	ldr	r3, [pc, #28]	; (1348c <powf+0x394>)
   1346e:	61ba      	str	r2, [r7, #24]
   13470:	61fb      	str	r3, [r7, #28]
   13472:	e7a1      	b.n	133b8 <powf+0x2c0>
   13474:	46c0      	nop			; (mov r8, r8)
   13476:	46c0      	nop			; (mov r8, r8)
   13478:	00000000 	.word	0x00000000
   1347c:	7ff00000 	.word	0x7ff00000
   13480:	00000000 	.word	0x00000000
   13484:	fff00000 	.word	0xfff00000
   13488:	e0000000 	.word	0xe0000000
   1348c:	c7efffff 	.word	0xc7efffff

00013490 <sqrtf>:
sqrtf():
   13490:	b570      	push	{r4, r5, r6, lr}
   13492:	b08a      	sub	sp, #40	; 0x28
   13494:	1c04      	adds	r4, r0, #0
   13496:	f000 fec7 	bl	14228 <__ieee754_sqrtf>
   1349a:	4e27      	ldr	r6, [pc, #156]	; (13538 <sqrtf+0xa8>)
   1349c:	2300      	movs	r3, #0
   1349e:	56f3      	ldrsb	r3, [r6, r3]
   134a0:	1c05      	adds	r5, r0, #0
   134a2:	3301      	adds	r3, #1
   134a4:	d00a      	beq.n	134bc <sqrtf+0x2c>
   134a6:	1c20      	adds	r0, r4, #0
   134a8:	f001 fcce 	bl	14e48 <__fpclassifyf>
   134ac:	2800      	cmp	r0, #0
   134ae:	d005      	beq.n	134bc <sqrtf+0x2c>
   134b0:	1c20      	adds	r0, r4, #0
   134b2:	2100      	movs	r1, #0
   134b4:	f7ed f8f6 	bl	6a4 <__aeabi_fcmplt>
   134b8:	2800      	cmp	r0, #0
   134ba:	d102      	bne.n	134c2 <sqrtf+0x32>
   134bc:	1c28      	adds	r0, r5, #0
   134be:	b00a      	add	sp, #40	; 0x28
   134c0:	bd70      	pop	{r4, r5, r6, pc}
   134c2:	2301      	movs	r3, #1
   134c4:	9300      	str	r3, [sp, #0]
   134c6:	4b1d      	ldr	r3, [pc, #116]	; (1353c <sqrtf+0xac>)
   134c8:	1c20      	adds	r0, r4, #0
   134ca:	9301      	str	r3, [sp, #4]
   134cc:	2300      	movs	r3, #0
   134ce:	9308      	str	r3, [sp, #32]
   134d0:	f7ef fa3c 	bl	294c <__aeabi_f2d>
   134d4:	7834      	ldrb	r4, [r6, #0]
   134d6:	9004      	str	r0, [sp, #16]
   134d8:	9105      	str	r1, [sp, #20]
   134da:	9002      	str	r0, [sp, #8]
   134dc:	9103      	str	r1, [sp, #12]
   134de:	2c00      	cmp	r4, #0
   134e0:	d111      	bne.n	13506 <sqrtf+0x76>
   134e2:	4b14      	ldr	r3, [pc, #80]	; (13534 <sqrtf+0xa4>)
   134e4:	4a12      	ldr	r2, [pc, #72]	; (13530 <sqrtf+0xa0>)
   134e6:	9206      	str	r2, [sp, #24]
   134e8:	9307      	str	r3, [sp, #28]
   134ea:	4668      	mov	r0, sp
   134ec:	f001 fb9c 	bl	14c28 <matherr>
   134f0:	2800      	cmp	r0, #0
   134f2:	d012      	beq.n	1351a <sqrtf+0x8a>
   134f4:	9b08      	ldr	r3, [sp, #32]
   134f6:	2b00      	cmp	r3, #0
   134f8:	d114      	bne.n	13524 <sqrtf+0x94>
   134fa:	9806      	ldr	r0, [sp, #24]
   134fc:	9907      	ldr	r1, [sp, #28]
   134fe:	f7ef fa77 	bl	29f0 <__aeabi_d2f>
   13502:	1c05      	adds	r5, r0, #0
   13504:	e7da      	b.n	134bc <sqrtf+0x2c>
   13506:	490b      	ldr	r1, [pc, #44]	; (13534 <sqrtf+0xa4>)
   13508:	4809      	ldr	r0, [pc, #36]	; (13530 <sqrtf+0xa0>)
   1350a:	1c02      	adds	r2, r0, #0
   1350c:	1c0b      	adds	r3, r1, #0
   1350e:	f7ee fa7f 	bl	1a10 <__aeabi_ddiv>
   13512:	9006      	str	r0, [sp, #24]
   13514:	9107      	str	r1, [sp, #28]
   13516:	2c02      	cmp	r4, #2
   13518:	d1e7      	bne.n	134ea <sqrtf+0x5a>
   1351a:	f001 fd23 	bl	14f64 <__errno>
   1351e:	2321      	movs	r3, #33	; 0x21
   13520:	6003      	str	r3, [r0, #0]
   13522:	e7e7      	b.n	134f4 <sqrtf+0x64>
   13524:	f001 fd1e 	bl	14f64 <__errno>
   13528:	9b08      	ldr	r3, [sp, #32]
   1352a:	6003      	str	r3, [r0, #0]
   1352c:	e7e5      	b.n	134fa <sqrtf+0x6a>
   1352e:	46c0      	nop			; (mov r8, r8)
	...
   13538:	1fffe018 	.word	0x1fffe018
   1353c:	000152ac 	.word	0x000152ac

00013540 <__ieee754_acosf>:
__ieee754_acosf():
   13540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13542:	22fe      	movs	r2, #254	; 0xfe
   13544:	0043      	lsls	r3, r0, #1
   13546:	1c04      	adds	r4, r0, #0
   13548:	085b      	lsrs	r3, r3, #1
   1354a:	0592      	lsls	r2, r2, #22
   1354c:	4293      	cmp	r3, r2
   1354e:	d011      	beq.n	13574 <__ieee754_acosf+0x34>
   13550:	dc09      	bgt.n	13566 <__ieee754_acosf+0x26>
   13552:	4aa0      	ldr	r2, [pc, #640]	; (137d4 <__ieee754_acosf+0x294>)
   13554:	4293      	cmp	r3, r2
   13556:	dc12      	bgt.n	1357e <__ieee754_acosf+0x3e>
   13558:	228c      	movs	r2, #140	; 0x8c
   1355a:	0592      	lsls	r2, r2, #22
   1355c:	4293      	cmp	r3, r2
   1355e:	dd00      	ble.n	13562 <__ieee754_acosf+0x22>
   13560:	e081      	b.n	13666 <__ieee754_acosf+0x126>
   13562:	489d      	ldr	r0, [pc, #628]	; (137d8 <__ieee754_acosf+0x298>)
   13564:	e005      	b.n	13572 <__ieee754_acosf+0x32>
   13566:	1c21      	adds	r1, r4, #0
   13568:	f7ed fd3e 	bl	fe8 <__aeabi_fsub>
   1356c:	1c01      	adds	r1, r0, #0
   1356e:	f7ed fa2d 	bl	9cc <__aeabi_fdiv>
   13572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13574:	2800      	cmp	r0, #0
   13576:	dc00      	bgt.n	1357a <__ieee754_acosf+0x3a>
   13578:	e0ca      	b.n	13710 <__ieee754_acosf+0x1d0>
   1357a:	2000      	movs	r0, #0
   1357c:	e7f9      	b.n	13572 <__ieee754_acosf+0x32>
   1357e:	2800      	cmp	r0, #0
   13580:	da00      	bge.n	13584 <__ieee754_acosf+0x44>
   13582:	e0c7      	b.n	13714 <__ieee754_acosf+0x1d4>
   13584:	20fe      	movs	r0, #254	; 0xfe
   13586:	1c21      	adds	r1, r4, #0
   13588:	0580      	lsls	r0, r0, #22
   1358a:	f7ed fd2d 	bl	fe8 <__aeabi_fsub>
   1358e:	21fc      	movs	r1, #252	; 0xfc
   13590:	0589      	lsls	r1, r1, #22
   13592:	f7ed fbff 	bl	d94 <__aeabi_fmul>
   13596:	1c04      	adds	r4, r0, #0
   13598:	f000 fe46 	bl	14228 <__ieee754_sqrtf>
   1359c:	498f      	ldr	r1, [pc, #572]	; (137dc <__ieee754_acosf+0x29c>)
   1359e:	1c06      	adds	r6, r0, #0
   135a0:	0b05      	lsrs	r5, r0, #12
   135a2:	1c20      	adds	r0, r4, #0
   135a4:	f7ed fbf6 	bl	d94 <__aeabi_fmul>
   135a8:	498d      	ldr	r1, [pc, #564]	; (137e0 <__ieee754_acosf+0x2a0>)
   135aa:	f7ed f8a3 	bl	6f4 <__aeabi_fadd>
   135ae:	1c21      	adds	r1, r4, #0
   135b0:	f7ed fbf0 	bl	d94 <__aeabi_fmul>
   135b4:	498b      	ldr	r1, [pc, #556]	; (137e4 <__ieee754_acosf+0x2a4>)
   135b6:	f7ed fd17 	bl	fe8 <__aeabi_fsub>
   135ba:	1c21      	adds	r1, r4, #0
   135bc:	f7ed fbea 	bl	d94 <__aeabi_fmul>
   135c0:	4989      	ldr	r1, [pc, #548]	; (137e8 <__ieee754_acosf+0x2a8>)
   135c2:	f7ed f897 	bl	6f4 <__aeabi_fadd>
   135c6:	1c21      	adds	r1, r4, #0
   135c8:	f7ed fbe4 	bl	d94 <__aeabi_fmul>
   135cc:	4987      	ldr	r1, [pc, #540]	; (137ec <__ieee754_acosf+0x2ac>)
   135ce:	f7ed fd0b 	bl	fe8 <__aeabi_fsub>
   135d2:	1c21      	adds	r1, r4, #0
   135d4:	f7ed fbde 	bl	d94 <__aeabi_fmul>
   135d8:	4985      	ldr	r1, [pc, #532]	; (137f0 <__ieee754_acosf+0x2b0>)
   135da:	f7ed f88b 	bl	6f4 <__aeabi_fadd>
   135de:	1c21      	adds	r1, r4, #0
   135e0:	f7ed fbd8 	bl	d94 <__aeabi_fmul>
   135e4:	4983      	ldr	r1, [pc, #524]	; (137f4 <__ieee754_acosf+0x2b4>)
   135e6:	1c07      	adds	r7, r0, #0
   135e8:	1c20      	adds	r0, r4, #0
   135ea:	f7ed fbd3 	bl	d94 <__aeabi_fmul>
   135ee:	4982      	ldr	r1, [pc, #520]	; (137f8 <__ieee754_acosf+0x2b8>)
   135f0:	f7ed fcfa 	bl	fe8 <__aeabi_fsub>
   135f4:	1c21      	adds	r1, r4, #0
   135f6:	f7ed fbcd 	bl	d94 <__aeabi_fmul>
   135fa:	4980      	ldr	r1, [pc, #512]	; (137fc <__ieee754_acosf+0x2bc>)
   135fc:	f7ed f87a 	bl	6f4 <__aeabi_fadd>
   13600:	1c21      	adds	r1, r4, #0
   13602:	f7ed fbc7 	bl	d94 <__aeabi_fmul>
   13606:	497e      	ldr	r1, [pc, #504]	; (13800 <__ieee754_acosf+0x2c0>)
   13608:	f7ed fcee 	bl	fe8 <__aeabi_fsub>
   1360c:	1c21      	adds	r1, r4, #0
   1360e:	f7ed fbc1 	bl	d94 <__aeabi_fmul>
   13612:	21fe      	movs	r1, #254	; 0xfe
   13614:	0589      	lsls	r1, r1, #22
   13616:	f7ed f86d 	bl	6f4 <__aeabi_fadd>
   1361a:	1c01      	adds	r1, r0, #0
   1361c:	1c38      	adds	r0, r7, #0
   1361e:	f7ed f9d5 	bl	9cc <__aeabi_fdiv>
   13622:	1c31      	adds	r1, r6, #0
   13624:	f7ed fbb6 	bl	d94 <__aeabi_fmul>
   13628:	032d      	lsls	r5, r5, #12
   1362a:	1c07      	adds	r7, r0, #0
   1362c:	1c29      	adds	r1, r5, #0
   1362e:	1c28      	adds	r0, r5, #0
   13630:	f7ed fbb0 	bl	d94 <__aeabi_fmul>
   13634:	1c01      	adds	r1, r0, #0
   13636:	1c20      	adds	r0, r4, #0
   13638:	f7ed fcd6 	bl	fe8 <__aeabi_fsub>
   1363c:	1c29      	adds	r1, r5, #0
   1363e:	1c04      	adds	r4, r0, #0
   13640:	1c30      	adds	r0, r6, #0
   13642:	f7ed f857 	bl	6f4 <__aeabi_fadd>
   13646:	1c01      	adds	r1, r0, #0
   13648:	1c20      	adds	r0, r4, #0
   1364a:	f7ed f9bf 	bl	9cc <__aeabi_fdiv>
   1364e:	1c01      	adds	r1, r0, #0
   13650:	1c38      	adds	r0, r7, #0
   13652:	f7ed f84f 	bl	6f4 <__aeabi_fadd>
   13656:	1c01      	adds	r1, r0, #0
   13658:	1c28      	adds	r0, r5, #0
   1365a:	f7ed f84b 	bl	6f4 <__aeabi_fadd>
   1365e:	1c01      	adds	r1, r0, #0
   13660:	f7ed f848 	bl	6f4 <__aeabi_fadd>
   13664:	e785      	b.n	13572 <__ieee754_acosf+0x32>
   13666:	1c21      	adds	r1, r4, #0
   13668:	f7ed fb94 	bl	d94 <__aeabi_fmul>
   1366c:	495b      	ldr	r1, [pc, #364]	; (137dc <__ieee754_acosf+0x29c>)
   1366e:	1c05      	adds	r5, r0, #0
   13670:	f7ed fb90 	bl	d94 <__aeabi_fmul>
   13674:	495a      	ldr	r1, [pc, #360]	; (137e0 <__ieee754_acosf+0x2a0>)
   13676:	f7ed f83d 	bl	6f4 <__aeabi_fadd>
   1367a:	1c29      	adds	r1, r5, #0
   1367c:	f7ed fb8a 	bl	d94 <__aeabi_fmul>
   13680:	4958      	ldr	r1, [pc, #352]	; (137e4 <__ieee754_acosf+0x2a4>)
   13682:	f7ed fcb1 	bl	fe8 <__aeabi_fsub>
   13686:	1c29      	adds	r1, r5, #0
   13688:	f7ed fb84 	bl	d94 <__aeabi_fmul>
   1368c:	4956      	ldr	r1, [pc, #344]	; (137e8 <__ieee754_acosf+0x2a8>)
   1368e:	f7ed f831 	bl	6f4 <__aeabi_fadd>
   13692:	1c29      	adds	r1, r5, #0
   13694:	f7ed fb7e 	bl	d94 <__aeabi_fmul>
   13698:	4954      	ldr	r1, [pc, #336]	; (137ec <__ieee754_acosf+0x2ac>)
   1369a:	f7ed fca5 	bl	fe8 <__aeabi_fsub>
   1369e:	1c29      	adds	r1, r5, #0
   136a0:	f7ed fb78 	bl	d94 <__aeabi_fmul>
   136a4:	4952      	ldr	r1, [pc, #328]	; (137f0 <__ieee754_acosf+0x2b0>)
   136a6:	f7ed f825 	bl	6f4 <__aeabi_fadd>
   136aa:	1c29      	adds	r1, r5, #0
   136ac:	f7ed fb72 	bl	d94 <__aeabi_fmul>
   136b0:	4950      	ldr	r1, [pc, #320]	; (137f4 <__ieee754_acosf+0x2b4>)
   136b2:	1c06      	adds	r6, r0, #0
   136b4:	1c28      	adds	r0, r5, #0
   136b6:	f7ed fb6d 	bl	d94 <__aeabi_fmul>
   136ba:	494f      	ldr	r1, [pc, #316]	; (137f8 <__ieee754_acosf+0x2b8>)
   136bc:	f7ed fc94 	bl	fe8 <__aeabi_fsub>
   136c0:	1c29      	adds	r1, r5, #0
   136c2:	f7ed fb67 	bl	d94 <__aeabi_fmul>
   136c6:	494d      	ldr	r1, [pc, #308]	; (137fc <__ieee754_acosf+0x2bc>)
   136c8:	f7ed f814 	bl	6f4 <__aeabi_fadd>
   136cc:	1c29      	adds	r1, r5, #0
   136ce:	f7ed fb61 	bl	d94 <__aeabi_fmul>
   136d2:	494b      	ldr	r1, [pc, #300]	; (13800 <__ieee754_acosf+0x2c0>)
   136d4:	f7ed fc88 	bl	fe8 <__aeabi_fsub>
   136d8:	1c29      	adds	r1, r5, #0
   136da:	f7ed fb5b 	bl	d94 <__aeabi_fmul>
   136de:	21fe      	movs	r1, #254	; 0xfe
   136e0:	0589      	lsls	r1, r1, #22
   136e2:	f7ed f807 	bl	6f4 <__aeabi_fadd>
   136e6:	1c01      	adds	r1, r0, #0
   136e8:	1c30      	adds	r0, r6, #0
   136ea:	f7ed f96f 	bl	9cc <__aeabi_fdiv>
   136ee:	1c01      	adds	r1, r0, #0
   136f0:	1c20      	adds	r0, r4, #0
   136f2:	f7ed fb4f 	bl	d94 <__aeabi_fmul>
   136f6:	1c01      	adds	r1, r0, #0
   136f8:	4842      	ldr	r0, [pc, #264]	; (13804 <__ieee754_acosf+0x2c4>)
   136fa:	f7ed fc75 	bl	fe8 <__aeabi_fsub>
   136fe:	1c01      	adds	r1, r0, #0
   13700:	1c20      	adds	r0, r4, #0
   13702:	f7ed fc71 	bl	fe8 <__aeabi_fsub>
   13706:	1c01      	adds	r1, r0, #0
   13708:	483f      	ldr	r0, [pc, #252]	; (13808 <__ieee754_acosf+0x2c8>)
   1370a:	f7ed fc6d 	bl	fe8 <__aeabi_fsub>
   1370e:	e730      	b.n	13572 <__ieee754_acosf+0x32>
   13710:	483e      	ldr	r0, [pc, #248]	; (1380c <__ieee754_acosf+0x2cc>)
   13712:	e72e      	b.n	13572 <__ieee754_acosf+0x32>
   13714:	21fe      	movs	r1, #254	; 0xfe
   13716:	0589      	lsls	r1, r1, #22
   13718:	f7ec ffec 	bl	6f4 <__aeabi_fadd>
   1371c:	21fc      	movs	r1, #252	; 0xfc
   1371e:	0589      	lsls	r1, r1, #22
   13720:	f7ed fb38 	bl	d94 <__aeabi_fmul>
   13724:	492d      	ldr	r1, [pc, #180]	; (137dc <__ieee754_acosf+0x29c>)
   13726:	1c04      	adds	r4, r0, #0
   13728:	f7ed fb34 	bl	d94 <__aeabi_fmul>
   1372c:	492c      	ldr	r1, [pc, #176]	; (137e0 <__ieee754_acosf+0x2a0>)
   1372e:	f7ec ffe1 	bl	6f4 <__aeabi_fadd>
   13732:	1c21      	adds	r1, r4, #0
   13734:	f7ed fb2e 	bl	d94 <__aeabi_fmul>
   13738:	492a      	ldr	r1, [pc, #168]	; (137e4 <__ieee754_acosf+0x2a4>)
   1373a:	f7ed fc55 	bl	fe8 <__aeabi_fsub>
   1373e:	1c21      	adds	r1, r4, #0
   13740:	f7ed fb28 	bl	d94 <__aeabi_fmul>
   13744:	4928      	ldr	r1, [pc, #160]	; (137e8 <__ieee754_acosf+0x2a8>)
   13746:	f7ec ffd5 	bl	6f4 <__aeabi_fadd>
   1374a:	1c21      	adds	r1, r4, #0
   1374c:	f7ed fb22 	bl	d94 <__aeabi_fmul>
   13750:	4926      	ldr	r1, [pc, #152]	; (137ec <__ieee754_acosf+0x2ac>)
   13752:	f7ed fc49 	bl	fe8 <__aeabi_fsub>
   13756:	1c21      	adds	r1, r4, #0
   13758:	f7ed fb1c 	bl	d94 <__aeabi_fmul>
   1375c:	4924      	ldr	r1, [pc, #144]	; (137f0 <__ieee754_acosf+0x2b0>)
   1375e:	f7ec ffc9 	bl	6f4 <__aeabi_fadd>
   13762:	1c21      	adds	r1, r4, #0
   13764:	f7ed fb16 	bl	d94 <__aeabi_fmul>
   13768:	1c06      	adds	r6, r0, #0
   1376a:	1c20      	adds	r0, r4, #0
   1376c:	f000 fd5c 	bl	14228 <__ieee754_sqrtf>
   13770:	4920      	ldr	r1, [pc, #128]	; (137f4 <__ieee754_acosf+0x2b4>)
   13772:	1c05      	adds	r5, r0, #0
   13774:	1c20      	adds	r0, r4, #0
   13776:	f7ed fb0d 	bl	d94 <__aeabi_fmul>
   1377a:	491f      	ldr	r1, [pc, #124]	; (137f8 <__ieee754_acosf+0x2b8>)
   1377c:	f7ed fc34 	bl	fe8 <__aeabi_fsub>
   13780:	1c21      	adds	r1, r4, #0
   13782:	f7ed fb07 	bl	d94 <__aeabi_fmul>
   13786:	491d      	ldr	r1, [pc, #116]	; (137fc <__ieee754_acosf+0x2bc>)
   13788:	f7ec ffb4 	bl	6f4 <__aeabi_fadd>
   1378c:	1c21      	adds	r1, r4, #0
   1378e:	f7ed fb01 	bl	d94 <__aeabi_fmul>
   13792:	491b      	ldr	r1, [pc, #108]	; (13800 <__ieee754_acosf+0x2c0>)
   13794:	f7ed fc28 	bl	fe8 <__aeabi_fsub>
   13798:	1c21      	adds	r1, r4, #0
   1379a:	f7ed fafb 	bl	d94 <__aeabi_fmul>
   1379e:	21fe      	movs	r1, #254	; 0xfe
   137a0:	0589      	lsls	r1, r1, #22
   137a2:	f7ec ffa7 	bl	6f4 <__aeabi_fadd>
   137a6:	1c01      	adds	r1, r0, #0
   137a8:	1c30      	adds	r0, r6, #0
   137aa:	f7ed f90f 	bl	9cc <__aeabi_fdiv>
   137ae:	1c29      	adds	r1, r5, #0
   137b0:	f7ed faf0 	bl	d94 <__aeabi_fmul>
   137b4:	4913      	ldr	r1, [pc, #76]	; (13804 <__ieee754_acosf+0x2c4>)
   137b6:	f7ed fc17 	bl	fe8 <__aeabi_fsub>
   137ba:	1c01      	adds	r1, r0, #0
   137bc:	1c28      	adds	r0, r5, #0
   137be:	f7ec ff99 	bl	6f4 <__aeabi_fadd>
   137c2:	1c01      	adds	r1, r0, #0
   137c4:	f7ec ff96 	bl	6f4 <__aeabi_fadd>
   137c8:	1c01      	adds	r1, r0, #0
   137ca:	4811      	ldr	r0, [pc, #68]	; (13810 <__ieee754_acosf+0x2d0>)
   137cc:	f7ed fc0c 	bl	fe8 <__aeabi_fsub>
   137d0:	e6cf      	b.n	13572 <__ieee754_acosf+0x32>
   137d2:	46c0      	nop			; (mov r8, r8)
   137d4:	3effffff 	.word	0x3effffff
   137d8:	3fc90fdb 	.word	0x3fc90fdb
   137dc:	3811ef08 	.word	0x3811ef08
   137e0:	3a4f7f04 	.word	0x3a4f7f04
   137e4:	3d241146 	.word	0x3d241146
   137e8:	3e4e0aa8 	.word	0x3e4e0aa8
   137ec:	3ea6b090 	.word	0x3ea6b090
   137f0:	3e2aaaab 	.word	0x3e2aaaab
   137f4:	3d9dc62e 	.word	0x3d9dc62e
   137f8:	3f303361 	.word	0x3f303361
   137fc:	4001572d 	.word	0x4001572d
   13800:	4019d139 	.word	0x4019d139
   13804:	33a22168 	.word	0x33a22168
   13808:	3fc90fda 	.word	0x3fc90fda
   1380c:	40490fdb 	.word	0x40490fdb
   13810:	40490fda 	.word	0x40490fda

00013814 <__ieee754_powf>:
__ieee754_powf():
   13814:	b5f0      	push	{r4, r5, r6, r7, lr}
   13816:	465f      	mov	r7, fp
   13818:	4656      	mov	r6, sl
   1381a:	464d      	mov	r5, r9
   1381c:	4644      	mov	r4, r8
   1381e:	b4f0      	push	{r4, r5, r6, r7}
   13820:	004e      	lsls	r6, r1, #1
   13822:	b087      	sub	sp, #28
   13824:	1c07      	adds	r7, r0, #0
   13826:	1c0c      	adds	r4, r1, #0
   13828:	4689      	mov	r9, r1
   1382a:	0876      	lsrs	r6, r6, #1
   1382c:	d011      	beq.n	13852 <__ieee754_powf+0x3e>
   1382e:	0043      	lsls	r3, r0, #1
   13830:	085d      	lsrs	r5, r3, #1
   13832:	23ff      	movs	r3, #255	; 0xff
   13834:	4682      	mov	sl, r0
   13836:	05db      	lsls	r3, r3, #23
   13838:	429d      	cmp	r5, r3
   1383a:	dd04      	ble.n	13846 <__ieee754_powf+0x32>
   1383c:	485d      	ldr	r0, [pc, #372]	; (139b4 <__ieee754_powf+0x1a0>)
   1383e:	f001 fb21 	bl	14e84 <nanf>
   13842:	1c01      	adds	r1, r0, #0
   13844:	e007      	b.n	13856 <__ieee754_powf+0x42>
   13846:	429e      	cmp	r6, r3
   13848:	dd0d      	ble.n	13866 <__ieee754_powf+0x52>
   1384a:	23fe      	movs	r3, #254	; 0xfe
   1384c:	059b      	lsls	r3, r3, #22
   1384e:	429d      	cmp	r5, r3
   13850:	d1f4      	bne.n	1383c <__ieee754_powf+0x28>
   13852:	21fe      	movs	r1, #254	; 0xfe
   13854:	0589      	lsls	r1, r1, #22
   13856:	1c08      	adds	r0, r1, #0
   13858:	b007      	add	sp, #28
   1385a:	bc3c      	pop	{r2, r3, r4, r5}
   1385c:	4690      	mov	r8, r2
   1385e:	4699      	mov	r9, r3
   13860:	46a2      	mov	sl, r4
   13862:	46ab      	mov	fp, r5
   13864:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13866:	2100      	movs	r1, #0
   13868:	9100      	str	r1, [sp, #0]
   1386a:	2800      	cmp	r0, #0
   1386c:	db62      	blt.n	13934 <__ieee754_powf+0x120>
   1386e:	23ff      	movs	r3, #255	; 0xff
   13870:	05db      	lsls	r3, r3, #23
   13872:	429e      	cmp	r6, r3
   13874:	d053      	beq.n	1391e <__ieee754_powf+0x10a>
   13876:	23fe      	movs	r3, #254	; 0xfe
   13878:	059b      	lsls	r3, r3, #22
   1387a:	429e      	cmp	r6, r3
   1387c:	d06f      	beq.n	1395e <__ieee754_powf+0x14a>
   1387e:	2380      	movs	r3, #128	; 0x80
   13880:	05db      	lsls	r3, r3, #23
   13882:	4599      	cmp	r9, r3
   13884:	d100      	bne.n	13888 <__ieee754_powf+0x74>
   13886:	e07f      	b.n	13988 <__ieee754_powf+0x174>
   13888:	23fc      	movs	r3, #252	; 0xfc
   1388a:	059b      	lsls	r3, r3, #22
   1388c:	1c38      	adds	r0, r7, #0
   1388e:	4599      	cmp	r9, r3
   13890:	d018      	beq.n	138c4 <__ieee754_powf+0xb0>
   13892:	f001 fa7f 	bl	14d94 <fabsf>
   13896:	1c01      	adds	r1, r0, #0
   13898:	2d00      	cmp	r5, #0
   1389a:	d11a      	bne.n	138d2 <__ieee754_powf+0xbe>
   1389c:	464a      	mov	r2, r9
   1389e:	2a00      	cmp	r2, #0
   138a0:	da00      	bge.n	138a4 <__ieee754_powf+0x90>
   138a2:	e080      	b.n	139a6 <__ieee754_powf+0x192>
   138a4:	4653      	mov	r3, sl
   138a6:	2b00      	cmp	r3, #0
   138a8:	dad5      	bge.n	13856 <__ieee754_powf+0x42>
   138aa:	4a43      	ldr	r2, [pc, #268]	; (139b8 <__ieee754_powf+0x1a4>)
   138ac:	1c08      	adds	r0, r1, #0
   138ae:	18ab      	adds	r3, r5, r2
   138b0:	9d00      	ldr	r5, [sp, #0]
   138b2:	432b      	orrs	r3, r5
   138b4:	d070      	beq.n	13998 <__ieee754_powf+0x184>
   138b6:	9d00      	ldr	r5, [sp, #0]
   138b8:	2d01      	cmp	r5, #1
   138ba:	d1cc      	bne.n	13856 <__ieee754_powf+0x42>
   138bc:	2280      	movs	r2, #128	; 0x80
   138be:	0612      	lsls	r2, r2, #24
   138c0:	1889      	adds	r1, r1, r2
   138c2:	e7c8      	b.n	13856 <__ieee754_powf+0x42>
   138c4:	4651      	mov	r1, sl
   138c6:	2900      	cmp	r1, #0
   138c8:	dbe3      	blt.n	13892 <__ieee754_powf+0x7e>
   138ca:	f000 fcad 	bl	14228 <__ieee754_sqrtf>
   138ce:	1c01      	adds	r1, r0, #0
   138d0:	e7c1      	b.n	13856 <__ieee754_powf+0x42>
   138d2:	00ba      	lsls	r2, r7, #2
   138d4:	23fe      	movs	r3, #254	; 0xfe
   138d6:	0892      	lsrs	r2, r2, #2
   138d8:	059b      	lsls	r3, r3, #22
   138da:	429a      	cmp	r2, r3
   138dc:	d0de      	beq.n	1389c <__ieee754_powf+0x88>
   138de:	0ffb      	lsrs	r3, r7, #31
   138e0:	3b01      	subs	r3, #1
   138e2:	9301      	str	r3, [sp, #4]
   138e4:	9a01      	ldr	r2, [sp, #4]
   138e6:	9b00      	ldr	r3, [sp, #0]
   138e8:	4313      	orrs	r3, r2
   138ea:	d053      	beq.n	13994 <__ieee754_powf+0x180>
   138ec:	239a      	movs	r3, #154	; 0x9a
   138ee:	05db      	lsls	r3, r3, #23
   138f0:	429e      	cmp	r6, r3
   138f2:	dd6d      	ble.n	139d0 <__ieee754_powf+0x1bc>
   138f4:	4b31      	ldr	r3, [pc, #196]	; (139bc <__ieee754_powf+0x1a8>)
   138f6:	429d      	cmp	r5, r3
   138f8:	dc04      	bgt.n	13904 <__ieee754_powf+0xf0>
   138fa:	464b      	mov	r3, r9
   138fc:	2b00      	cmp	r3, #0
   138fe:	db08      	blt.n	13912 <__ieee754_powf+0xfe>
   13900:	2100      	movs	r1, #0
   13902:	e7a8      	b.n	13856 <__ieee754_powf+0x42>
   13904:	4b2e      	ldr	r3, [pc, #184]	; (139c0 <__ieee754_powf+0x1ac>)
   13906:	429d      	cmp	r5, r3
   13908:	dc00      	bgt.n	1390c <__ieee754_powf+0xf8>
   1390a:	e2c2      	b.n	13e92 <__ieee754_powf+0x67e>
   1390c:	464d      	mov	r5, r9
   1390e:	2d00      	cmp	r5, #0
   13910:	ddf6      	ble.n	13900 <__ieee754_powf+0xec>
   13912:	482c      	ldr	r0, [pc, #176]	; (139c4 <__ieee754_powf+0x1b0>)
   13914:	1c01      	adds	r1, r0, #0
   13916:	f7ed fa3d 	bl	d94 <__aeabi_fmul>
   1391a:	1c01      	adds	r1, r0, #0
   1391c:	e79b      	b.n	13856 <__ieee754_powf+0x42>
   1391e:	23fe      	movs	r3, #254	; 0xfe
   13920:	059b      	lsls	r3, r3, #22
   13922:	429d      	cmp	r5, r3
   13924:	d095      	beq.n	13852 <__ieee754_powf+0x3e>
   13926:	dd28      	ble.n	1397a <__ieee754_powf+0x166>
   13928:	464b      	mov	r3, r9
   1392a:	1c21      	adds	r1, r4, #0
   1392c:	2b00      	cmp	r3, #0
   1392e:	db00      	blt.n	13932 <__ieee754_powf+0x11e>
   13930:	e791      	b.n	13856 <__ieee754_powf+0x42>
   13932:	e7e5      	b.n	13900 <__ieee754_powf+0xec>
   13934:	4b24      	ldr	r3, [pc, #144]	; (139c8 <__ieee754_powf+0x1b4>)
   13936:	429e      	cmp	r6, r3
   13938:	dc1c      	bgt.n	13974 <__ieee754_powf+0x160>
   1393a:	4b24      	ldr	r3, [pc, #144]	; (139cc <__ieee754_powf+0x1b8>)
   1393c:	429e      	cmp	r6, r3
   1393e:	dd9a      	ble.n	13876 <__ieee754_powf+0x62>
   13940:	2296      	movs	r2, #150	; 0x96
   13942:	15f3      	asrs	r3, r6, #23
   13944:	1ad3      	subs	r3, r2, r3
   13946:	1c32      	adds	r2, r6, #0
   13948:	411a      	asrs	r2, r3
   1394a:	1c11      	adds	r1, r2, #0
   1394c:	4099      	lsls	r1, r3
   1394e:	42b1      	cmp	r1, r6
   13950:	d191      	bne.n	13876 <__ieee754_powf+0x62>
   13952:	2301      	movs	r3, #1
   13954:	401a      	ands	r2, r3
   13956:	2302      	movs	r3, #2
   13958:	1a9b      	subs	r3, r3, r2
   1395a:	9300      	str	r3, [sp, #0]
   1395c:	e78b      	b.n	13876 <__ieee754_powf+0x62>
   1395e:	464b      	mov	r3, r9
   13960:	1c39      	adds	r1, r7, #0
   13962:	2b00      	cmp	r3, #0
   13964:	db00      	blt.n	13968 <__ieee754_powf+0x154>
   13966:	e776      	b.n	13856 <__ieee754_powf+0x42>
   13968:	20fe      	movs	r0, #254	; 0xfe
   1396a:	0580      	lsls	r0, r0, #22
   1396c:	f7ed f82e 	bl	9cc <__aeabi_fdiv>
   13970:	1c01      	adds	r1, r0, #0
   13972:	e770      	b.n	13856 <__ieee754_powf+0x42>
   13974:	2202      	movs	r2, #2
   13976:	9200      	str	r2, [sp, #0]
   13978:	e779      	b.n	1386e <__ieee754_powf+0x5a>
   1397a:	464d      	mov	r5, r9
   1397c:	2d00      	cmp	r5, #0
   1397e:	dabf      	bge.n	13900 <__ieee754_powf+0xec>
   13980:	2280      	movs	r2, #128	; 0x80
   13982:	0612      	lsls	r2, r2, #24
   13984:	18a1      	adds	r1, r4, r2
   13986:	e766      	b.n	13856 <__ieee754_powf+0x42>
   13988:	1c39      	adds	r1, r7, #0
   1398a:	1c38      	adds	r0, r7, #0
   1398c:	f7ed fa02 	bl	d94 <__aeabi_fmul>
   13990:	1c01      	adds	r1, r0, #0
   13992:	e760      	b.n	13856 <__ieee754_powf+0x42>
   13994:	1c38      	adds	r0, r7, #0
   13996:	1c39      	adds	r1, r7, #0
   13998:	f7ed fb26 	bl	fe8 <__aeabi_fsub>
   1399c:	1c01      	adds	r1, r0, #0
   1399e:	f7ed f815 	bl	9cc <__aeabi_fdiv>
   139a2:	1c01      	adds	r1, r0, #0
   139a4:	e757      	b.n	13856 <__ieee754_powf+0x42>
   139a6:	20fe      	movs	r0, #254	; 0xfe
   139a8:	0580      	lsls	r0, r0, #22
   139aa:	f7ed f80f 	bl	9cc <__aeabi_fdiv>
   139ae:	1c01      	adds	r1, r0, #0
   139b0:	e778      	b.n	138a4 <__ieee754_powf+0x90>
   139b2:	46c0      	nop			; (mov r8, r8)
   139b4:	00015160 	.word	0x00015160
   139b8:	c0800000 	.word	0xc0800000
   139bc:	3f7ffff7 	.word	0x3f7ffff7
   139c0:	3f800007 	.word	0x3f800007
   139c4:	7149f2ca 	.word	0x7149f2ca
   139c8:	4b7fffff 	.word	0x4b7fffff
   139cc:	3f7fffff 	.word	0x3f7fffff
   139d0:	4af2      	ldr	r2, [pc, #968]	; (13d9c <__ieee754_powf+0x588>)
   139d2:	2300      	movs	r3, #0
   139d4:	4295      	cmp	r5, r2
   139d6:	dc06      	bgt.n	139e6 <__ieee754_powf+0x1d2>
   139d8:	2197      	movs	r1, #151	; 0x97
   139da:	05c9      	lsls	r1, r1, #23
   139dc:	f7ed f9da 	bl	d94 <__aeabi_fmul>
   139e0:	2318      	movs	r3, #24
   139e2:	1c05      	adds	r5, r0, #0
   139e4:	425b      	negs	r3, r3
   139e6:	15ea      	asrs	r2, r5, #23
   139e8:	3a7f      	subs	r2, #127	; 0x7f
   139ea:	18d2      	adds	r2, r2, r3
   139ec:	9205      	str	r2, [sp, #20]
   139ee:	026b      	lsls	r3, r5, #9
   139f0:	22fe      	movs	r2, #254	; 0xfe
   139f2:	0a5b      	lsrs	r3, r3, #9
   139f4:	0592      	lsls	r2, r2, #22
   139f6:	431a      	orrs	r2, r3
   139f8:	4692      	mov	sl, r2
   139fa:	4ae9      	ldr	r2, [pc, #932]	; (13da0 <__ieee754_powf+0x58c>)
   139fc:	4293      	cmp	r3, r2
   139fe:	dc00      	bgt.n	13a02 <__ieee754_powf+0x1ee>
   13a00:	e1b1      	b.n	13d66 <__ieee754_powf+0x552>
   13a02:	4ae8      	ldr	r2, [pc, #928]	; (13da4 <__ieee754_powf+0x590>)
   13a04:	4293      	cmp	r3, r2
   13a06:	dc00      	bgt.n	13a0a <__ieee754_powf+0x1f6>
   13a08:	e23e      	b.n	13e88 <__ieee754_powf+0x674>
   13a0a:	9d05      	ldr	r5, [sp, #20]
   13a0c:	49e6      	ldr	r1, [pc, #920]	; (13da8 <__ieee754_powf+0x594>)
   13a0e:	3501      	adds	r5, #1
   13a10:	2200      	movs	r2, #0
   13a12:	9505      	str	r5, [sp, #20]
   13a14:	448a      	add	sl, r1
   13a16:	4691      	mov	r9, r2
   13a18:	2300      	movs	r3, #0
   13a1a:	009b      	lsls	r3, r3, #2
   13a1c:	9302      	str	r3, [sp, #8]
   13a1e:	9d02      	ldr	r5, [sp, #8]
   13a20:	4be2      	ldr	r3, [pc, #904]	; (13dac <__ieee754_powf+0x598>)
   13a22:	4650      	mov	r0, sl
   13a24:	58eb      	ldr	r3, [r5, r3]
   13a26:	46d3      	mov	fp, sl
   13a28:	1c19      	adds	r1, r3, #0
   13a2a:	4698      	mov	r8, r3
   13a2c:	f7ed fadc 	bl	fe8 <__aeabi_fsub>
   13a30:	4641      	mov	r1, r8
   13a32:	9003      	str	r0, [sp, #12]
   13a34:	4650      	mov	r0, sl
   13a36:	f7ec fe5d 	bl	6f4 <__aeabi_fadd>
   13a3a:	1c01      	adds	r1, r0, #0
   13a3c:	20fe      	movs	r0, #254	; 0xfe
   13a3e:	0580      	lsls	r0, r0, #22
   13a40:	f7ec ffc4 	bl	9cc <__aeabi_fdiv>
   13a44:	9004      	str	r0, [sp, #16]
   13a46:	9904      	ldr	r1, [sp, #16]
   13a48:	9803      	ldr	r0, [sp, #12]
   13a4a:	f7ed f9a3 	bl	d94 <__aeabi_fmul>
   13a4e:	4651      	mov	r1, sl
   13a50:	2380      	movs	r3, #128	; 0x80
   13a52:	104a      	asrs	r2, r1, #1
   13a54:	059b      	lsls	r3, r3, #22
   13a56:	4313      	orrs	r3, r2
   13a58:	2280      	movs	r2, #128	; 0x80
   13a5a:	02d2      	lsls	r2, r2, #11
   13a5c:	189b      	adds	r3, r3, r2
   13a5e:	0b06      	lsrs	r6, r0, #12
   13a60:	4499      	add	r9, r3
   13a62:	0336      	lsls	r6, r6, #12
   13a64:	1c07      	adds	r7, r0, #0
   13a66:	4649      	mov	r1, r9
   13a68:	1c30      	adds	r0, r6, #0
   13a6a:	f7ed f993 	bl	d94 <__aeabi_fmul>
   13a6e:	1c01      	adds	r1, r0, #0
   13a70:	9803      	ldr	r0, [sp, #12]
   13a72:	f7ed fab9 	bl	fe8 <__aeabi_fsub>
   13a76:	4641      	mov	r1, r8
   13a78:	4682      	mov	sl, r0
   13a7a:	4648      	mov	r0, r9
   13a7c:	f7ed fab4 	bl	fe8 <__aeabi_fsub>
   13a80:	1c01      	adds	r1, r0, #0
   13a82:	4658      	mov	r0, fp
   13a84:	f7ed fab0 	bl	fe8 <__aeabi_fsub>
   13a88:	1c01      	adds	r1, r0, #0
   13a8a:	1c30      	adds	r0, r6, #0
   13a8c:	f7ed f982 	bl	d94 <__aeabi_fmul>
   13a90:	1c01      	adds	r1, r0, #0
   13a92:	4650      	mov	r0, sl
   13a94:	f7ed faa8 	bl	fe8 <__aeabi_fsub>
   13a98:	9904      	ldr	r1, [sp, #16]
   13a9a:	f7ed f97b 	bl	d94 <__aeabi_fmul>
   13a9e:	1c39      	adds	r1, r7, #0
   13aa0:	4683      	mov	fp, r0
   13aa2:	1c38      	adds	r0, r7, #0
   13aa4:	f7ed f976 	bl	d94 <__aeabi_fmul>
   13aa8:	4680      	mov	r8, r0
   13aaa:	4641      	mov	r1, r8
   13aac:	f7ed f972 	bl	d94 <__aeabi_fmul>
   13ab0:	49bf      	ldr	r1, [pc, #764]	; (13db0 <__ieee754_powf+0x59c>)
   13ab2:	4681      	mov	r9, r0
   13ab4:	4640      	mov	r0, r8
   13ab6:	f7ed f96d 	bl	d94 <__aeabi_fmul>
   13aba:	49be      	ldr	r1, [pc, #760]	; (13db4 <__ieee754_powf+0x5a0>)
   13abc:	f7ec fe1a 	bl	6f4 <__aeabi_fadd>
   13ac0:	4641      	mov	r1, r8
   13ac2:	f7ed f967 	bl	d94 <__aeabi_fmul>
   13ac6:	49bc      	ldr	r1, [pc, #752]	; (13db8 <__ieee754_powf+0x5a4>)
   13ac8:	f7ec fe14 	bl	6f4 <__aeabi_fadd>
   13acc:	4641      	mov	r1, r8
   13ace:	f7ed f961 	bl	d94 <__aeabi_fmul>
   13ad2:	49ba      	ldr	r1, [pc, #744]	; (13dbc <__ieee754_powf+0x5a8>)
   13ad4:	f7ec fe0e 	bl	6f4 <__aeabi_fadd>
   13ad8:	4641      	mov	r1, r8
   13ada:	f7ed f95b 	bl	d94 <__aeabi_fmul>
   13ade:	49b8      	ldr	r1, [pc, #736]	; (13dc0 <__ieee754_powf+0x5ac>)
   13ae0:	f7ec fe08 	bl	6f4 <__aeabi_fadd>
   13ae4:	4641      	mov	r1, r8
   13ae6:	f7ed f955 	bl	d94 <__aeabi_fmul>
   13aea:	49b6      	ldr	r1, [pc, #728]	; (13dc4 <__ieee754_powf+0x5b0>)
   13aec:	f7ec fe02 	bl	6f4 <__aeabi_fadd>
   13af0:	1c01      	adds	r1, r0, #0
   13af2:	4648      	mov	r0, r9
   13af4:	f7ed f94e 	bl	d94 <__aeabi_fmul>
   13af8:	1c31      	adds	r1, r6, #0
   13afa:	4680      	mov	r8, r0
   13afc:	1c38      	adds	r0, r7, #0
   13afe:	f7ec fdf9 	bl	6f4 <__aeabi_fadd>
   13b02:	4659      	mov	r1, fp
   13b04:	f7ed f946 	bl	d94 <__aeabi_fmul>
   13b08:	4641      	mov	r1, r8
   13b0a:	f7ec fdf3 	bl	6f4 <__aeabi_fadd>
   13b0e:	1c31      	adds	r1, r6, #0
   13b10:	4681      	mov	r9, r0
   13b12:	1c30      	adds	r0, r6, #0
   13b14:	f7ed f93e 	bl	d94 <__aeabi_fmul>
   13b18:	49ab      	ldr	r1, [pc, #684]	; (13dc8 <__ieee754_powf+0x5b4>)
   13b1a:	4682      	mov	sl, r0
   13b1c:	f7ec fdea 	bl	6f4 <__aeabi_fadd>
   13b20:	4649      	mov	r1, r9
   13b22:	f7ec fde7 	bl	6f4 <__aeabi_fadd>
   13b26:	0b00      	lsrs	r0, r0, #12
   13b28:	0300      	lsls	r0, r0, #12
   13b2a:	4680      	mov	r8, r0
   13b2c:	4641      	mov	r1, r8
   13b2e:	1c30      	adds	r0, r6, #0
   13b30:	f7ed f930 	bl	d94 <__aeabi_fmul>
   13b34:	4641      	mov	r1, r8
   13b36:	1c06      	adds	r6, r0, #0
   13b38:	4658      	mov	r0, fp
   13b3a:	f7ed f92b 	bl	d94 <__aeabi_fmul>
   13b3e:	49a2      	ldr	r1, [pc, #648]	; (13dc8 <__ieee754_powf+0x5b4>)
   13b40:	4683      	mov	fp, r0
   13b42:	4640      	mov	r0, r8
   13b44:	f7ed fa50 	bl	fe8 <__aeabi_fsub>
   13b48:	4651      	mov	r1, sl
   13b4a:	f7ed fa4d 	bl	fe8 <__aeabi_fsub>
   13b4e:	1c01      	adds	r1, r0, #0
   13b50:	4648      	mov	r0, r9
   13b52:	f7ed fa49 	bl	fe8 <__aeabi_fsub>
   13b56:	1c39      	adds	r1, r7, #0
   13b58:	f7ed f91c 	bl	d94 <__aeabi_fmul>
   13b5c:	1c01      	adds	r1, r0, #0
   13b5e:	4658      	mov	r0, fp
   13b60:	f7ec fdc8 	bl	6f4 <__aeabi_fadd>
   13b64:	4681      	mov	r9, r0
   13b66:	4649      	mov	r1, r9
   13b68:	1c30      	adds	r0, r6, #0
   13b6a:	f7ec fdc3 	bl	6f4 <__aeabi_fadd>
   13b6e:	0b07      	lsrs	r7, r0, #12
   13b70:	033f      	lsls	r7, r7, #12
   13b72:	1c38      	adds	r0, r7, #0
   13b74:	4995      	ldr	r1, [pc, #596]	; (13dcc <__ieee754_powf+0x5b8>)
   13b76:	f7ed f90d 	bl	d94 <__aeabi_fmul>
   13b7a:	4995      	ldr	r1, [pc, #596]	; (13dd0 <__ieee754_powf+0x5bc>)
   13b7c:	4680      	mov	r8, r0
   13b7e:	1c38      	adds	r0, r7, #0
   13b80:	f7ed f908 	bl	d94 <__aeabi_fmul>
   13b84:	1c31      	adds	r1, r6, #0
   13b86:	4682      	mov	sl, r0
   13b88:	1c38      	adds	r0, r7, #0
   13b8a:	f7ed fa2d 	bl	fe8 <__aeabi_fsub>
   13b8e:	1c01      	adds	r1, r0, #0
   13b90:	4648      	mov	r0, r9
   13b92:	f7ed fa29 	bl	fe8 <__aeabi_fsub>
   13b96:	498f      	ldr	r1, [pc, #572]	; (13dd4 <__ieee754_powf+0x5c0>)
   13b98:	f7ed f8fc 	bl	d94 <__aeabi_fmul>
   13b9c:	1c01      	adds	r1, r0, #0
   13b9e:	4650      	mov	r0, sl
   13ba0:	f7ec fda8 	bl	6f4 <__aeabi_fadd>
   13ba4:	4b8c      	ldr	r3, [pc, #560]	; (13dd8 <__ieee754_powf+0x5c4>)
   13ba6:	58e9      	ldr	r1, [r5, r3]
   13ba8:	f7ec fda4 	bl	6f4 <__aeabi_fadd>
   13bac:	1c07      	adds	r7, r0, #0
   13bae:	9805      	ldr	r0, [sp, #20]
   13bb0:	f7ed fbb0 	bl	1314 <__aeabi_i2f>
   13bb4:	4b89      	ldr	r3, [pc, #548]	; (13ddc <__ieee754_powf+0x5c8>)
   13bb6:	4681      	mov	r9, r0
   13bb8:	58eb      	ldr	r3, [r5, r3]
   13bba:	1c39      	adds	r1, r7, #0
   13bbc:	469a      	mov	sl, r3
   13bbe:	4640      	mov	r0, r8
   13bc0:	f7ec fd98 	bl	6f4 <__aeabi_fadd>
   13bc4:	4651      	mov	r1, sl
   13bc6:	f7ec fd95 	bl	6f4 <__aeabi_fadd>
   13bca:	4649      	mov	r1, r9
   13bcc:	f7ec fd92 	bl	6f4 <__aeabi_fadd>
   13bd0:	0b06      	lsrs	r6, r0, #12
   13bd2:	0336      	lsls	r6, r6, #12
   13bd4:	4649      	mov	r1, r9
   13bd6:	1c30      	adds	r0, r6, #0
   13bd8:	f7ed fa06 	bl	fe8 <__aeabi_fsub>
   13bdc:	4651      	mov	r1, sl
   13bde:	f7ed fa03 	bl	fe8 <__aeabi_fsub>
   13be2:	4641      	mov	r1, r8
   13be4:	f7ed fa00 	bl	fe8 <__aeabi_fsub>
   13be8:	1c01      	adds	r1, r0, #0
   13bea:	1c38      	adds	r0, r7, #0
   13bec:	f7ed f9fc 	bl	fe8 <__aeabi_fsub>
   13bf0:	9d00      	ldr	r5, [sp, #0]
   13bf2:	9b01      	ldr	r3, [sp, #4]
   13bf4:	3d01      	subs	r5, #1
   13bf6:	4681      	mov	r9, r0
   13bf8:	431d      	orrs	r5, r3
   13bfa:	d000      	beq.n	13bfe <__ieee754_powf+0x3ea>
   13bfc:	e0af      	b.n	13d5e <__ieee754_powf+0x54a>
   13bfe:	4d78      	ldr	r5, [pc, #480]	; (13de0 <__ieee754_powf+0x5cc>)
   13c00:	46a8      	mov	r8, r5
   13c02:	0b25      	lsrs	r5, r4, #12
   13c04:	032d      	lsls	r5, r5, #12
   13c06:	1c29      	adds	r1, r5, #0
   13c08:	1c20      	adds	r0, r4, #0
   13c0a:	f7ed f9ed 	bl	fe8 <__aeabi_fsub>
   13c0e:	1c31      	adds	r1, r6, #0
   13c10:	f7ed f8c0 	bl	d94 <__aeabi_fmul>
   13c14:	4649      	mov	r1, r9
   13c16:	1c07      	adds	r7, r0, #0
   13c18:	1c20      	adds	r0, r4, #0
   13c1a:	f7ed f8bb 	bl	d94 <__aeabi_fmul>
   13c1e:	1c01      	adds	r1, r0, #0
   13c20:	1c38      	adds	r0, r7, #0
   13c22:	f7ec fd67 	bl	6f4 <__aeabi_fadd>
   13c26:	1c29      	adds	r1, r5, #0
   13c28:	4681      	mov	r9, r0
   13c2a:	1c30      	adds	r0, r6, #0
   13c2c:	f7ed f8b2 	bl	d94 <__aeabi_fmul>
   13c30:	1c04      	adds	r4, r0, #0
   13c32:	4682      	mov	sl, r0
   13c34:	1c21      	adds	r1, r4, #0
   13c36:	4648      	mov	r0, r9
   13c38:	f7ec fd5c 	bl	6f4 <__aeabi_fadd>
   13c3c:	0046      	lsls	r6, r0, #1
   13c3e:	1c05      	adds	r5, r0, #0
   13c40:	1c07      	adds	r7, r0, #0
   13c42:	0876      	lsrs	r6, r6, #1
   13c44:	2800      	cmp	r0, #0
   13c46:	dc00      	bgt.n	13c4a <__ieee754_powf+0x436>
   13c48:	e107      	b.n	13e5a <__ieee754_powf+0x646>
   13c4a:	2386      	movs	r3, #134	; 0x86
   13c4c:	05db      	lsls	r3, r3, #23
   13c4e:	429e      	cmp	r6, r3
   13c50:	dd00      	ble.n	13c54 <__ieee754_powf+0x440>
   13c52:	e09a      	b.n	13d8a <__ieee754_powf+0x576>
   13c54:	d100      	bne.n	13c58 <__ieee754_powf+0x444>
   13c56:	e089      	b.n	13d6c <__ieee754_powf+0x558>
   13c58:	23fc      	movs	r3, #252	; 0xfc
   13c5a:	059b      	lsls	r3, r3, #22
   13c5c:	429e      	cmp	r6, r3
   13c5e:	dd00      	ble.n	13c62 <__ieee754_powf+0x44e>
   13c60:	e0d4      	b.n	13e0c <__ieee754_powf+0x5f8>
   13c62:	2200      	movs	r2, #0
   13c64:	4693      	mov	fp, r2
   13c66:	2600      	movs	r6, #0
   13c68:	0b3f      	lsrs	r7, r7, #12
   13c6a:	033f      	lsls	r7, r7, #12
   13c6c:	1c38      	adds	r0, r7, #0
   13c6e:	495d      	ldr	r1, [pc, #372]	; (13de4 <__ieee754_powf+0x5d0>)
   13c70:	f7ed f890 	bl	d94 <__aeabi_fmul>
   13c74:	4651      	mov	r1, sl
   13c76:	1c05      	adds	r5, r0, #0
   13c78:	1c38      	adds	r0, r7, #0
   13c7a:	f7ed f9b5 	bl	fe8 <__aeabi_fsub>
   13c7e:	1c01      	adds	r1, r0, #0
   13c80:	4648      	mov	r0, r9
   13c82:	f7ed f9b1 	bl	fe8 <__aeabi_fsub>
   13c86:	4958      	ldr	r1, [pc, #352]	; (13de8 <__ieee754_powf+0x5d4>)
   13c88:	f7ed f884 	bl	d94 <__aeabi_fmul>
   13c8c:	4957      	ldr	r1, [pc, #348]	; (13dec <__ieee754_powf+0x5d8>)
   13c8e:	1c04      	adds	r4, r0, #0
   13c90:	1c38      	adds	r0, r7, #0
   13c92:	f7ed f87f 	bl	d94 <__aeabi_fmul>
   13c96:	1c01      	adds	r1, r0, #0
   13c98:	1c20      	adds	r0, r4, #0
   13c9a:	f7ec fd2b 	bl	6f4 <__aeabi_fadd>
   13c9e:	1c07      	adds	r7, r0, #0
   13ca0:	1c39      	adds	r1, r7, #0
   13ca2:	1c28      	adds	r0, r5, #0
   13ca4:	f7ec fd26 	bl	6f4 <__aeabi_fadd>
   13ca8:	1c29      	adds	r1, r5, #0
   13caa:	1c04      	adds	r4, r0, #0
   13cac:	f7ed f99c 	bl	fe8 <__aeabi_fsub>
   13cb0:	1c01      	adds	r1, r0, #0
   13cb2:	1c38      	adds	r0, r7, #0
   13cb4:	f7ed f998 	bl	fe8 <__aeabi_fsub>
   13cb8:	1c21      	adds	r1, r4, #0
   13cba:	1c07      	adds	r7, r0, #0
   13cbc:	1c20      	adds	r0, r4, #0
   13cbe:	f7ed f869 	bl	d94 <__aeabi_fmul>
   13cc2:	494b      	ldr	r1, [pc, #300]	; (13df0 <__ieee754_powf+0x5dc>)
   13cc4:	1c05      	adds	r5, r0, #0
   13cc6:	f7ed f865 	bl	d94 <__aeabi_fmul>
   13cca:	494a      	ldr	r1, [pc, #296]	; (13df4 <__ieee754_powf+0x5e0>)
   13ccc:	f7ed f98c 	bl	fe8 <__aeabi_fsub>
   13cd0:	1c29      	adds	r1, r5, #0
   13cd2:	f7ed f85f 	bl	d94 <__aeabi_fmul>
   13cd6:	4948      	ldr	r1, [pc, #288]	; (13df8 <__ieee754_powf+0x5e4>)
   13cd8:	f7ec fd0c 	bl	6f4 <__aeabi_fadd>
   13cdc:	1c29      	adds	r1, r5, #0
   13cde:	f7ed f859 	bl	d94 <__aeabi_fmul>
   13ce2:	4946      	ldr	r1, [pc, #280]	; (13dfc <__ieee754_powf+0x5e8>)
   13ce4:	f7ed f980 	bl	fe8 <__aeabi_fsub>
   13ce8:	1c29      	adds	r1, r5, #0
   13cea:	f7ed f853 	bl	d94 <__aeabi_fmul>
   13cee:	4944      	ldr	r1, [pc, #272]	; (13e00 <__ieee754_powf+0x5ec>)
   13cf0:	f7ec fd00 	bl	6f4 <__aeabi_fadd>
   13cf4:	1c29      	adds	r1, r5, #0
   13cf6:	f7ed f84d 	bl	d94 <__aeabi_fmul>
   13cfa:	1c01      	adds	r1, r0, #0
   13cfc:	1c20      	adds	r0, r4, #0
   13cfe:	f7ed f973 	bl	fe8 <__aeabi_fsub>
   13d02:	1c05      	adds	r5, r0, #0
   13d04:	1c29      	adds	r1, r5, #0
   13d06:	1c20      	adds	r0, r4, #0
   13d08:	f7ed f844 	bl	d94 <__aeabi_fmul>
   13d0c:	2180      	movs	r1, #128	; 0x80
   13d0e:	4681      	mov	r9, r0
   13d10:	05c9      	lsls	r1, r1, #23
   13d12:	1c28      	adds	r0, r5, #0
   13d14:	f7ed f968 	bl	fe8 <__aeabi_fsub>
   13d18:	1c01      	adds	r1, r0, #0
   13d1a:	4648      	mov	r0, r9
   13d1c:	f7ec fe56 	bl	9cc <__aeabi_fdiv>
   13d20:	1c39      	adds	r1, r7, #0
   13d22:	1c05      	adds	r5, r0, #0
   13d24:	1c20      	adds	r0, r4, #0
   13d26:	f7ed f835 	bl	d94 <__aeabi_fmul>
   13d2a:	1c39      	adds	r1, r7, #0
   13d2c:	f7ec fce2 	bl	6f4 <__aeabi_fadd>
   13d30:	1c01      	adds	r1, r0, #0
   13d32:	1c28      	adds	r0, r5, #0
   13d34:	f7ed f958 	bl	fe8 <__aeabi_fsub>
   13d38:	1c21      	adds	r1, r4, #0
   13d3a:	f7ed f955 	bl	fe8 <__aeabi_fsub>
   13d3e:	1c01      	adds	r1, r0, #0
   13d40:	20fe      	movs	r0, #254	; 0xfe
   13d42:	0580      	lsls	r0, r0, #22
   13d44:	f7ed f950 	bl	fe8 <__aeabi_fsub>
   13d48:	465b      	mov	r3, fp
   13d4a:	1819      	adds	r1, r3, r0
   13d4c:	15cb      	asrs	r3, r1, #23
   13d4e:	2b00      	cmp	r3, #0
   13d50:	dc00      	bgt.n	13d54 <__ieee754_powf+0x540>
   13d52:	e0d9      	b.n	13f08 <__ieee754_powf+0x6f4>
   13d54:	4640      	mov	r0, r8
   13d56:	f7ed f81d 	bl	d94 <__aeabi_fmul>
   13d5a:	1c01      	adds	r1, r0, #0
   13d5c:	e57b      	b.n	13856 <__ieee754_powf+0x42>
   13d5e:	21fe      	movs	r1, #254	; 0xfe
   13d60:	0589      	lsls	r1, r1, #22
   13d62:	4688      	mov	r8, r1
   13d64:	e74d      	b.n	13c02 <__ieee754_powf+0x3ee>
   13d66:	2300      	movs	r3, #0
   13d68:	4699      	mov	r9, r3
   13d6a:	e656      	b.n	13a1a <__ieee754_powf+0x206>
   13d6c:	4925      	ldr	r1, [pc, #148]	; (13e04 <__ieee754_powf+0x5f0>)
   13d6e:	4648      	mov	r0, r9
   13d70:	f7ec fcc0 	bl	6f4 <__aeabi_fadd>
   13d74:	1c21      	adds	r1, r4, #0
   13d76:	4682      	mov	sl, r0
   13d78:	1c28      	adds	r0, r5, #0
   13d7a:	f7ed f935 	bl	fe8 <__aeabi_fsub>
   13d7e:	1c01      	adds	r1, r0, #0
   13d80:	4650      	mov	r0, sl
   13d82:	f7ec fca3 	bl	6cc <__aeabi_fcmpgt>
   13d86:	2800      	cmp	r0, #0
   13d88:	d040      	beq.n	13e0c <__ieee754_powf+0x5f8>
   13d8a:	491f      	ldr	r1, [pc, #124]	; (13e08 <__ieee754_powf+0x5f4>)
   13d8c:	4640      	mov	r0, r8
   13d8e:	f7ed f801 	bl	d94 <__aeabi_fmul>
   13d92:	491d      	ldr	r1, [pc, #116]	; (13e08 <__ieee754_powf+0x5f4>)
   13d94:	f7ec fffe 	bl	d94 <__aeabi_fmul>
   13d98:	1c01      	adds	r1, r0, #0
   13d9a:	e55c      	b.n	13856 <__ieee754_powf+0x42>
   13d9c:	007fffff 	.word	0x007fffff
   13da0:	001cc471 	.word	0x001cc471
   13da4:	005db3d6 	.word	0x005db3d6
   13da8:	ff800000 	.word	0xff800000
   13dac:	000152c4 	.word	0x000152c4
   13db0:	3e53f142 	.word	0x3e53f142
   13db4:	3e6c3255 	.word	0x3e6c3255
   13db8:	3e8ba305 	.word	0x3e8ba305
   13dbc:	3eaaaaab 	.word	0x3eaaaaab
   13dc0:	3edb6db7 	.word	0x3edb6db7
   13dc4:	3f19999a 	.word	0x3f19999a
   13dc8:	40400000 	.word	0x40400000
   13dcc:	3f763800 	.word	0x3f763800
   13dd0:	369dc3a0 	.word	0x369dc3a0
   13dd4:	3f76384f 	.word	0x3f76384f
   13dd8:	000152bc 	.word	0x000152bc
   13ddc:	000152b4 	.word	0x000152b4
   13de0:	bf800000 	.word	0xbf800000
   13de4:	3f317200 	.word	0x3f317200
   13de8:	3f317218 	.word	0x3f317218
   13dec:	35bfbe8c 	.word	0x35bfbe8c
   13df0:	3331bb4c 	.word	0x3331bb4c
   13df4:	35ddea0e 	.word	0x35ddea0e
   13df8:	388ab355 	.word	0x388ab355
   13dfc:	3b360b61 	.word	0x3b360b61
   13e00:	3e2aaaab 	.word	0x3e2aaaab
   13e04:	3338aa3c 	.word	0x3338aa3c
   13e08:	7149f2ca 	.word	0x7149f2ca
   13e0c:	15f6      	asrs	r6, r6, #23
   13e0e:	2080      	movs	r0, #128	; 0x80
   13e10:	1c33      	adds	r3, r6, #0
   13e12:	0400      	lsls	r0, r0, #16
   13e14:	3b7e      	subs	r3, #126	; 0x7e
   13e16:	1c02      	adds	r2, r0, #0
   13e18:	411a      	asrs	r2, r3
   13e1a:	19d3      	adds	r3, r2, r7
   13e1c:	005a      	lsls	r2, r3, #1
   13e1e:	0e12      	lsrs	r2, r2, #24
   13e20:	1c11      	adds	r1, r2, #0
   13e22:	4d3c      	ldr	r5, [pc, #240]	; (13f14 <__ieee754_powf+0x700>)
   13e24:	397f      	subs	r1, #127	; 0x7f
   13e26:	410d      	asrs	r5, r1
   13e28:	1c29      	adds	r1, r5, #0
   13e2a:	1c1d      	adds	r5, r3, #0
   13e2c:	025b      	lsls	r3, r3, #9
   13e2e:	0a5b      	lsrs	r3, r3, #9
   13e30:	2696      	movs	r6, #150	; 0x96
   13e32:	4318      	orrs	r0, r3
   13e34:	1ab2      	subs	r2, r6, r2
   13e36:	438d      	bics	r5, r1
   13e38:	1c06      	adds	r6, r0, #0
   13e3a:	1c29      	adds	r1, r5, #0
   13e3c:	4116      	asrs	r6, r2
   13e3e:	2f00      	cmp	r7, #0
   13e40:	db60      	blt.n	13f04 <__ieee754_powf+0x6f0>
   13e42:	1c20      	adds	r0, r4, #0
   13e44:	f7ed f8d0 	bl	fe8 <__aeabi_fsub>
   13e48:	4682      	mov	sl, r0
   13e4a:	4651      	mov	r1, sl
   13e4c:	4648      	mov	r0, r9
   13e4e:	f7ec fc51 	bl	6f4 <__aeabi_fadd>
   13e52:	05f1      	lsls	r1, r6, #23
   13e54:	1c07      	adds	r7, r0, #0
   13e56:	468b      	mov	fp, r1
   13e58:	e706      	b.n	13c68 <__ieee754_powf+0x454>
   13e5a:	4b2f      	ldr	r3, [pc, #188]	; (13f18 <__ieee754_powf+0x704>)
   13e5c:	429e      	cmp	r6, r3
   13e5e:	dc0a      	bgt.n	13e76 <__ieee754_powf+0x662>
   13e60:	d000      	beq.n	13e64 <__ieee754_powf+0x650>
   13e62:	e6f9      	b.n	13c58 <__ieee754_powf+0x444>
   13e64:	1c21      	adds	r1, r4, #0
   13e66:	f7ed f8bf 	bl	fe8 <__aeabi_fsub>
   13e6a:	1c01      	adds	r1, r0, #0
   13e6c:	4648      	mov	r0, r9
   13e6e:	f7ec fc23 	bl	6b8 <__aeabi_fcmple>
   13e72:	2800      	cmp	r0, #0
   13e74:	d0ca      	beq.n	13e0c <__ieee754_powf+0x5f8>
   13e76:	4929      	ldr	r1, [pc, #164]	; (13f1c <__ieee754_powf+0x708>)
   13e78:	4640      	mov	r0, r8
   13e7a:	f7ec ff8b 	bl	d94 <__aeabi_fmul>
   13e7e:	4927      	ldr	r1, [pc, #156]	; (13f1c <__ieee754_powf+0x708>)
   13e80:	f7ec ff88 	bl	d94 <__aeabi_fmul>
   13e84:	1c01      	adds	r1, r0, #0
   13e86:	e4e6      	b.n	13856 <__ieee754_powf+0x42>
   13e88:	2380      	movs	r3, #128	; 0x80
   13e8a:	039b      	lsls	r3, r3, #14
   13e8c:	4699      	mov	r9, r3
   13e8e:	2301      	movs	r3, #1
   13e90:	e5c3      	b.n	13a1a <__ieee754_powf+0x206>
   13e92:	21fe      	movs	r1, #254	; 0xfe
   13e94:	0589      	lsls	r1, r1, #22
   13e96:	f7ed f8a7 	bl	fe8 <__aeabi_fsub>
   13e9a:	4921      	ldr	r1, [pc, #132]	; (13f20 <__ieee754_powf+0x70c>)
   13e9c:	1c06      	adds	r6, r0, #0
   13e9e:	f7ec ff79 	bl	d94 <__aeabi_fmul>
   13ea2:	4920      	ldr	r1, [pc, #128]	; (13f24 <__ieee754_powf+0x710>)
   13ea4:	1c05      	adds	r5, r0, #0
   13ea6:	1c30      	adds	r0, r6, #0
   13ea8:	f7ec ff74 	bl	d94 <__aeabi_fmul>
   13eac:	1c31      	adds	r1, r6, #0
   13eae:	1c07      	adds	r7, r0, #0
   13eb0:	1c30      	adds	r0, r6, #0
   13eb2:	f7ec ff6f 	bl	d94 <__aeabi_fmul>
   13eb6:	21fa      	movs	r1, #250	; 0xfa
   13eb8:	4681      	mov	r9, r0
   13eba:	0589      	lsls	r1, r1, #22
   13ebc:	1c30      	adds	r0, r6, #0
   13ebe:	f7ec ff69 	bl	d94 <__aeabi_fmul>
   13ec2:	1c01      	adds	r1, r0, #0
   13ec4:	4818      	ldr	r0, [pc, #96]	; (13f28 <__ieee754_powf+0x714>)
   13ec6:	f7ed f88f 	bl	fe8 <__aeabi_fsub>
   13eca:	1c31      	adds	r1, r6, #0
   13ecc:	f7ec ff62 	bl	d94 <__aeabi_fmul>
   13ed0:	1c01      	adds	r1, r0, #0
   13ed2:	20fc      	movs	r0, #252	; 0xfc
   13ed4:	0580      	lsls	r0, r0, #22
   13ed6:	f7ed f887 	bl	fe8 <__aeabi_fsub>
   13eda:	1c01      	adds	r1, r0, #0
   13edc:	4648      	mov	r0, r9
   13ede:	f7ec ff59 	bl	d94 <__aeabi_fmul>
   13ee2:	4912      	ldr	r1, [pc, #72]	; (13f2c <__ieee754_powf+0x718>)
   13ee4:	f7ec ff56 	bl	d94 <__aeabi_fmul>
   13ee8:	1c01      	adds	r1, r0, #0
   13eea:	1c38      	adds	r0, r7, #0
   13eec:	f7ed f87c 	bl	fe8 <__aeabi_fsub>
   13ef0:	1c07      	adds	r7, r0, #0
   13ef2:	1c39      	adds	r1, r7, #0
   13ef4:	1c28      	adds	r0, r5, #0
   13ef6:	f7ec fbfd 	bl	6f4 <__aeabi_fadd>
   13efa:	0b06      	lsrs	r6, r0, #12
   13efc:	0336      	lsls	r6, r6, #12
   13efe:	1c30      	adds	r0, r6, #0
   13f00:	1c29      	adds	r1, r5, #0
   13f02:	e66f      	b.n	13be4 <__ieee754_powf+0x3d0>
   13f04:	4276      	negs	r6, r6
   13f06:	e79c      	b.n	13e42 <__ieee754_powf+0x62e>
   13f08:	1c31      	adds	r1, r6, #0
   13f0a:	f000 ffbf 	bl	14e8c <scalbnf>
   13f0e:	1c01      	adds	r1, r0, #0
   13f10:	e720      	b.n	13d54 <__ieee754_powf+0x540>
   13f12:	46c0      	nop			; (mov r8, r8)
   13f14:	007fffff 	.word	0x007fffff
   13f18:	43160000 	.word	0x43160000
   13f1c:	0da24260 	.word	0x0da24260
   13f20:	3fb8aa00 	.word	0x3fb8aa00
   13f24:	36eca570 	.word	0x36eca570
   13f28:	3eaaaaab 	.word	0x3eaaaaab
   13f2c:	3fb8aa3b 	.word	0x3fb8aa3b

00013f30 <__ieee754_rem_pio2f>:
__ieee754_rem_pio2f():
   13f30:	b5f0      	push	{r4, r5, r6, r7, lr}
   13f32:	4656      	mov	r6, sl
   13f34:	464d      	mov	r5, r9
   13f36:	4644      	mov	r4, r8
   13f38:	465f      	mov	r7, fp
   13f3a:	b4f0      	push	{r4, r5, r6, r7}
   13f3c:	0042      	lsls	r2, r0, #1
   13f3e:	0856      	lsrs	r6, r2, #1
   13f40:	4aab      	ldr	r2, [pc, #684]	; (141f0 <__ieee754_rem_pio2f+0x2c0>)
   13f42:	b089      	sub	sp, #36	; 0x24
   13f44:	1c03      	adds	r3, r0, #0
   13f46:	1c0c      	adds	r4, r1, #0
   13f48:	1c05      	adds	r5, r0, #0
   13f4a:	4296      	cmp	r6, r2
   13f4c:	dd68      	ble.n	14020 <__ieee754_rem_pio2f+0xf0>
   13f4e:	4aa9      	ldr	r2, [pc, #676]	; (141f4 <__ieee754_rem_pio2f+0x2c4>)
   13f50:	4296      	cmp	r6, r2
   13f52:	dc1a      	bgt.n	13f8a <__ieee754_rem_pio2f+0x5a>
   13f54:	49a8      	ldr	r1, [pc, #672]	; (141f8 <__ieee754_rem_pio2f+0x2c8>)
   13f56:	2b00      	cmp	r3, #0
   13f58:	dc00      	bgt.n	13f5c <__ieee754_rem_pio2f+0x2c>
   13f5a:	e0fe      	b.n	1415a <__ieee754_rem_pio2f+0x22a>
   13f5c:	f7ed f844 	bl	fe8 <__aeabi_fsub>
   13f60:	230f      	movs	r3, #15
   13f62:	1c32      	adds	r2, r6, #0
   13f64:	439a      	bics	r2, r3
   13f66:	4ba5      	ldr	r3, [pc, #660]	; (141fc <__ieee754_rem_pio2f+0x2cc>)
   13f68:	1c05      	adds	r5, r0, #0
   13f6a:	429a      	cmp	r2, r3
   13f6c:	d06a      	beq.n	14044 <__ieee754_rem_pio2f+0x114>
   13f6e:	49a4      	ldr	r1, [pc, #656]	; (14200 <__ieee754_rem_pio2f+0x2d0>)
   13f70:	f7ed f83a 	bl	fe8 <__aeabi_fsub>
   13f74:	1c01      	adds	r1, r0, #0
   13f76:	6020      	str	r0, [r4, #0]
   13f78:	1c28      	adds	r0, r5, #0
   13f7a:	f7ed f835 	bl	fe8 <__aeabi_fsub>
   13f7e:	49a0      	ldr	r1, [pc, #640]	; (14200 <__ieee754_rem_pio2f+0x2d0>)
   13f80:	f7ed f832 	bl	fe8 <__aeabi_fsub>
   13f84:	6060      	str	r0, [r4, #4]
   13f86:	2001      	movs	r0, #1
   13f88:	e04e      	b.n	14028 <__ieee754_rem_pio2f+0xf8>
   13f8a:	4a9e      	ldr	r2, [pc, #632]	; (14204 <__ieee754_rem_pio2f+0x2d4>)
   13f8c:	4296      	cmp	r6, r2
   13f8e:	dd6b      	ble.n	14068 <__ieee754_rem_pio2f+0x138>
   13f90:	4a9d      	ldr	r2, [pc, #628]	; (14208 <__ieee754_rem_pio2f+0x2d8>)
   13f92:	4296      	cmp	r6, r2
   13f94:	dc4f      	bgt.n	14036 <__ieee754_rem_pio2f+0x106>
   13f96:	15f7      	asrs	r7, r6, #23
   13f98:	3f86      	subs	r7, #134	; 0x86
   13f9a:	05fb      	lsls	r3, r7, #23
   13f9c:	1af6      	subs	r6, r6, r3
   13f9e:	1c30      	adds	r0, r6, #0
   13fa0:	f7ed f998 	bl	12d4 <__aeabi_f2iz>
   13fa4:	f7ed f9b6 	bl	1314 <__aeabi_i2f>
   13fa8:	1c01      	adds	r1, r0, #0
   13faa:	9005      	str	r0, [sp, #20]
   13fac:	1c30      	adds	r0, r6, #0
   13fae:	f7ed f81b 	bl	fe8 <__aeabi_fsub>
   13fb2:	2187      	movs	r1, #135	; 0x87
   13fb4:	05c9      	lsls	r1, r1, #23
   13fb6:	f7ec feed 	bl	d94 <__aeabi_fmul>
   13fba:	4680      	mov	r8, r0
   13fbc:	f7ed f98a 	bl	12d4 <__aeabi_f2iz>
   13fc0:	f7ed f9a8 	bl	1314 <__aeabi_i2f>
   13fc4:	1c06      	adds	r6, r0, #0
   13fc6:	9006      	str	r0, [sp, #24]
   13fc8:	1c31      	adds	r1, r6, #0
   13fca:	4640      	mov	r0, r8
   13fcc:	f7ed f80c 	bl	fe8 <__aeabi_fsub>
   13fd0:	2187      	movs	r1, #135	; 0x87
   13fd2:	05c9      	lsls	r1, r1, #23
   13fd4:	f7ec fede 	bl	d94 <__aeabi_fmul>
   13fd8:	2100      	movs	r1, #0
   13fda:	9007      	str	r0, [sp, #28]
   13fdc:	f7ec fb5c 	bl	698 <__aeabi_fcmpeq>
   13fe0:	2800      	cmp	r0, #0
   13fe2:	d100      	bne.n	13fe6 <__ieee754_rem_pio2f+0xb6>
   13fe4:	e0d3      	b.n	1418e <__ieee754_rem_pio2f+0x25e>
   13fe6:	1c30      	adds	r0, r6, #0
   13fe8:	2100      	movs	r1, #0
   13fea:	f7ec fb55 	bl	698 <__aeabi_fcmpeq>
   13fee:	1e43      	subs	r3, r0, #1
   13ff0:	4198      	sbcs	r0, r3
   13ff2:	2302      	movs	r3, #2
   13ff4:	1a1b      	subs	r3, r3, r0
   13ff6:	2202      	movs	r2, #2
   13ff8:	9200      	str	r2, [sp, #0]
   13ffa:	4a84      	ldr	r2, [pc, #528]	; (1420c <__ieee754_rem_pio2f+0x2dc>)
   13ffc:	a805      	add	r0, sp, #20
   13ffe:	9201      	str	r2, [sp, #4]
   14000:	1c21      	adds	r1, r4, #0
   14002:	1c3a      	adds	r2, r7, #0
   14004:	f000 fa36 	bl	14474 <__kernel_rem_pio2f>
   14008:	2d00      	cmp	r5, #0
   1400a:	da0d      	bge.n	14028 <__ieee754_rem_pio2f+0xf8>
   1400c:	6822      	ldr	r2, [r4, #0]
   1400e:	2180      	movs	r1, #128	; 0x80
   14010:	0609      	lsls	r1, r1, #24
   14012:	1853      	adds	r3, r2, r1
   14014:	6862      	ldr	r2, [r4, #4]
   14016:	6023      	str	r3, [r4, #0]
   14018:	1853      	adds	r3, r2, r1
   1401a:	6063      	str	r3, [r4, #4]
   1401c:	4240      	negs	r0, r0
   1401e:	e003      	b.n	14028 <__ieee754_rem_pio2f+0xf8>
   14020:	2300      	movs	r3, #0
   14022:	6020      	str	r0, [r4, #0]
   14024:	604b      	str	r3, [r1, #4]
   14026:	2000      	movs	r0, #0
   14028:	b009      	add	sp, #36	; 0x24
   1402a:	bc3c      	pop	{r2, r3, r4, r5}
   1402c:	4690      	mov	r8, r2
   1402e:	4699      	mov	r9, r3
   14030:	46a2      	mov	sl, r4
   14032:	46ab      	mov	fp, r5
   14034:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14036:	1c19      	adds	r1, r3, #0
   14038:	f7ec ffd6 	bl	fe8 <__aeabi_fsub>
   1403c:	6060      	str	r0, [r4, #4]
   1403e:	6020      	str	r0, [r4, #0]
   14040:	2000      	movs	r0, #0
   14042:	e7f1      	b.n	14028 <__ieee754_rem_pio2f+0xf8>
   14044:	4972      	ldr	r1, [pc, #456]	; (14210 <__ieee754_rem_pio2f+0x2e0>)
   14046:	f7ec ffcf 	bl	fe8 <__aeabi_fsub>
   1404a:	4972      	ldr	r1, [pc, #456]	; (14214 <__ieee754_rem_pio2f+0x2e4>)
   1404c:	1c05      	adds	r5, r0, #0
   1404e:	f7ec ffcb 	bl	fe8 <__aeabi_fsub>
   14052:	1c01      	adds	r1, r0, #0
   14054:	6020      	str	r0, [r4, #0]
   14056:	1c28      	adds	r0, r5, #0
   14058:	f7ec ffc6 	bl	fe8 <__aeabi_fsub>
   1405c:	496d      	ldr	r1, [pc, #436]	; (14214 <__ieee754_rem_pio2f+0x2e4>)
   1405e:	f7ec ffc3 	bl	fe8 <__aeabi_fsub>
   14062:	6060      	str	r0, [r4, #4]
   14064:	2001      	movs	r0, #1
   14066:	e7df      	b.n	14028 <__ieee754_rem_pio2f+0xf8>
   14068:	f000 fe94 	bl	14d94 <fabsf>
   1406c:	496a      	ldr	r1, [pc, #424]	; (14218 <__ieee754_rem_pio2f+0x2e8>)
   1406e:	4680      	mov	r8, r0
   14070:	f7ec fe90 	bl	d94 <__aeabi_fmul>
   14074:	21fc      	movs	r1, #252	; 0xfc
   14076:	0589      	lsls	r1, r1, #22
   14078:	f7ec fb3c 	bl	6f4 <__aeabi_fadd>
   1407c:	f7ed f92a 	bl	12d4 <__aeabi_f2iz>
   14080:	1c07      	adds	r7, r0, #0
   14082:	f7ed f947 	bl	1314 <__aeabi_i2f>
   14086:	495c      	ldr	r1, [pc, #368]	; (141f8 <__ieee754_rem_pio2f+0x2c8>)
   14088:	4681      	mov	r9, r0
   1408a:	f7ec fe83 	bl	d94 <__aeabi_fmul>
   1408e:	1c01      	adds	r1, r0, #0
   14090:	4640      	mov	r0, r8
   14092:	f7ec ffa9 	bl	fe8 <__aeabi_fsub>
   14096:	495a      	ldr	r1, [pc, #360]	; (14200 <__ieee754_rem_pio2f+0x2d0>)
   14098:	4680      	mov	r8, r0
   1409a:	4648      	mov	r0, r9
   1409c:	f7ec fe7a 	bl	d94 <__aeabi_fmul>
   140a0:	4682      	mov	sl, r0
   140a2:	4640      	mov	r0, r8
   140a4:	2f1f      	cmp	r7, #31
   140a6:	dc22      	bgt.n	140ee <__ieee754_rem_pio2f+0x1be>
   140a8:	23ff      	movs	r3, #255	; 0xff
   140aa:	1c32      	adds	r2, r6, #0
   140ac:	439a      	bics	r2, r3
   140ae:	1e79      	subs	r1, r7, #1
   140b0:	4b5a      	ldr	r3, [pc, #360]	; (1421c <__ieee754_rem_pio2f+0x2ec>)
   140b2:	0089      	lsls	r1, r1, #2
   140b4:	58cb      	ldr	r3, [r1, r3]
   140b6:	429a      	cmp	r2, r3
   140b8:	d019      	beq.n	140ee <__ieee754_rem_pio2f+0x1be>
   140ba:	4651      	mov	r1, sl
   140bc:	f7ec ff94 	bl	fe8 <__aeabi_fsub>
   140c0:	4683      	mov	fp, r0
   140c2:	6020      	str	r0, [r4, #0]
   140c4:	4659      	mov	r1, fp
   140c6:	4640      	mov	r0, r8
   140c8:	f7ec ff8e 	bl	fe8 <__aeabi_fsub>
   140cc:	4651      	mov	r1, sl
   140ce:	f7ec ff8b 	bl	fe8 <__aeabi_fsub>
   140d2:	1c03      	adds	r3, r0, #0
   140d4:	6060      	str	r0, [r4, #4]
   140d6:	1c38      	adds	r0, r7, #0
   140d8:	2d00      	cmp	r5, #0
   140da:	daa5      	bge.n	14028 <__ieee754_rem_pio2f+0xf8>
   140dc:	2180      	movs	r1, #128	; 0x80
   140de:	0609      	lsls	r1, r1, #24
   140e0:	1c0e      	adds	r6, r1, #0
   140e2:	445e      	add	r6, fp
   140e4:	185b      	adds	r3, r3, r1
   140e6:	6026      	str	r6, [r4, #0]
   140e8:	6063      	str	r3, [r4, #4]
   140ea:	4278      	negs	r0, r7
   140ec:	e79c      	b.n	14028 <__ieee754_rem_pio2f+0xf8>
   140ee:	4651      	mov	r1, sl
   140f0:	f7ec ff7a 	bl	fe8 <__aeabi_fsub>
   140f4:	22ff      	movs	r2, #255	; 0xff
   140f6:	0dc3      	lsrs	r3, r0, #23
   140f8:	15f6      	asrs	r6, r6, #23
   140fa:	4013      	ands	r3, r2
   140fc:	4683      	mov	fp, r0
   140fe:	9602      	str	r6, [sp, #8]
   14100:	1af3      	subs	r3, r6, r3
   14102:	2b08      	cmp	r3, #8
   14104:	dd41      	ble.n	1418a <__ieee754_rem_pio2f+0x25a>
   14106:	4942      	ldr	r1, [pc, #264]	; (14210 <__ieee754_rem_pio2f+0x2e0>)
   14108:	4648      	mov	r0, r9
   1410a:	f7ec fe43 	bl	d94 <__aeabi_fmul>
   1410e:	1c06      	adds	r6, r0, #0
   14110:	1c31      	adds	r1, r6, #0
   14112:	4640      	mov	r0, r8
   14114:	f7ec ff68 	bl	fe8 <__aeabi_fsub>
   14118:	9003      	str	r0, [sp, #12]
   1411a:	9903      	ldr	r1, [sp, #12]
   1411c:	4640      	mov	r0, r8
   1411e:	f7ec ff63 	bl	fe8 <__aeabi_fsub>
   14122:	1c31      	adds	r1, r6, #0
   14124:	f7ec ff60 	bl	fe8 <__aeabi_fsub>
   14128:	493a      	ldr	r1, [pc, #232]	; (14214 <__ieee754_rem_pio2f+0x2e4>)
   1412a:	1c06      	adds	r6, r0, #0
   1412c:	4648      	mov	r0, r9
   1412e:	f7ec fe31 	bl	d94 <__aeabi_fmul>
   14132:	1c31      	adds	r1, r6, #0
   14134:	f7ec ff58 	bl	fe8 <__aeabi_fsub>
   14138:	4682      	mov	sl, r0
   1413a:	4651      	mov	r1, sl
   1413c:	9803      	ldr	r0, [sp, #12]
   1413e:	f7ec ff53 	bl	fe8 <__aeabi_fsub>
   14142:	22ff      	movs	r2, #255	; 0xff
   14144:	0dc3      	lsrs	r3, r0, #23
   14146:	9902      	ldr	r1, [sp, #8]
   14148:	4013      	ands	r3, r2
   1414a:	4683      	mov	fp, r0
   1414c:	1acb      	subs	r3, r1, r3
   1414e:	2b19      	cmp	r3, #25
   14150:	dc32      	bgt.n	141b8 <__ieee754_rem_pio2f+0x288>
   14152:	9b03      	ldr	r3, [sp, #12]
   14154:	6020      	str	r0, [r4, #0]
   14156:	4698      	mov	r8, r3
   14158:	e7b4      	b.n	140c4 <__ieee754_rem_pio2f+0x194>
   1415a:	f7ec facb 	bl	6f4 <__aeabi_fadd>
   1415e:	230f      	movs	r3, #15
   14160:	1c32      	adds	r2, r6, #0
   14162:	439a      	bics	r2, r3
   14164:	4b25      	ldr	r3, [pc, #148]	; (141fc <__ieee754_rem_pio2f+0x2cc>)
   14166:	1c05      	adds	r5, r0, #0
   14168:	429a      	cmp	r2, r3
   1416a:	d012      	beq.n	14192 <__ieee754_rem_pio2f+0x262>
   1416c:	4924      	ldr	r1, [pc, #144]	; (14200 <__ieee754_rem_pio2f+0x2d0>)
   1416e:	f7ec fac1 	bl	6f4 <__aeabi_fadd>
   14172:	1c01      	adds	r1, r0, #0
   14174:	6020      	str	r0, [r4, #0]
   14176:	1c28      	adds	r0, r5, #0
   14178:	f7ec ff36 	bl	fe8 <__aeabi_fsub>
   1417c:	4920      	ldr	r1, [pc, #128]	; (14200 <__ieee754_rem_pio2f+0x2d0>)
   1417e:	f7ec fab9 	bl	6f4 <__aeabi_fadd>
   14182:	6060      	str	r0, [r4, #4]
   14184:	2001      	movs	r0, #1
   14186:	4240      	negs	r0, r0
   14188:	e74e      	b.n	14028 <__ieee754_rem_pio2f+0xf8>
   1418a:	6020      	str	r0, [r4, #0]
   1418c:	e79a      	b.n	140c4 <__ieee754_rem_pio2f+0x194>
   1418e:	2303      	movs	r3, #3
   14190:	e731      	b.n	13ff6 <__ieee754_rem_pio2f+0xc6>
   14192:	491f      	ldr	r1, [pc, #124]	; (14210 <__ieee754_rem_pio2f+0x2e0>)
   14194:	f7ec faae 	bl	6f4 <__aeabi_fadd>
   14198:	491e      	ldr	r1, [pc, #120]	; (14214 <__ieee754_rem_pio2f+0x2e4>)
   1419a:	1c05      	adds	r5, r0, #0
   1419c:	f7ec faaa 	bl	6f4 <__aeabi_fadd>
   141a0:	1c01      	adds	r1, r0, #0
   141a2:	6020      	str	r0, [r4, #0]
   141a4:	1c28      	adds	r0, r5, #0
   141a6:	f7ec ff1f 	bl	fe8 <__aeabi_fsub>
   141aa:	491a      	ldr	r1, [pc, #104]	; (14214 <__ieee754_rem_pio2f+0x2e4>)
   141ac:	f7ec faa2 	bl	6f4 <__aeabi_fadd>
   141b0:	6060      	str	r0, [r4, #4]
   141b2:	2001      	movs	r0, #1
   141b4:	4240      	negs	r0, r0
   141b6:	e737      	b.n	14028 <__ieee754_rem_pio2f+0xf8>
   141b8:	4919      	ldr	r1, [pc, #100]	; (14220 <__ieee754_rem_pio2f+0x2f0>)
   141ba:	4648      	mov	r0, r9
   141bc:	f7ec fdea 	bl	d94 <__aeabi_fmul>
   141c0:	1c06      	adds	r6, r0, #0
   141c2:	1c31      	adds	r1, r6, #0
   141c4:	9803      	ldr	r0, [sp, #12]
   141c6:	f7ec ff0f 	bl	fe8 <__aeabi_fsub>
   141ca:	4680      	mov	r8, r0
   141cc:	4641      	mov	r1, r8
   141ce:	9803      	ldr	r0, [sp, #12]
   141d0:	f7ec ff0a 	bl	fe8 <__aeabi_fsub>
   141d4:	1c31      	adds	r1, r6, #0
   141d6:	f7ec ff07 	bl	fe8 <__aeabi_fsub>
   141da:	4912      	ldr	r1, [pc, #72]	; (14224 <__ieee754_rem_pio2f+0x2f4>)
   141dc:	1c06      	adds	r6, r0, #0
   141de:	4648      	mov	r0, r9
   141e0:	f7ec fdd8 	bl	d94 <__aeabi_fmul>
   141e4:	1c31      	adds	r1, r6, #0
   141e6:	f7ec feff 	bl	fe8 <__aeabi_fsub>
   141ea:	4682      	mov	sl, r0
   141ec:	4640      	mov	r0, r8
   141ee:	e764      	b.n	140ba <__ieee754_rem_pio2f+0x18a>
   141f0:	3f490fd8 	.word	0x3f490fd8
   141f4:	4016cbe3 	.word	0x4016cbe3
   141f8:	3fc90f80 	.word	0x3fc90f80
   141fc:	3fc90fd0 	.word	0x3fc90fd0
   14200:	37354443 	.word	0x37354443
   14204:	43490f80 	.word	0x43490f80
   14208:	7f7fffff 	.word	0x7f7fffff
   1420c:	0001534c 	.word	0x0001534c
   14210:	37354400 	.word	0x37354400
   14214:	2e85a308 	.word	0x2e85a308
   14218:	3f22f984 	.word	0x3f22f984
   1421c:	000152cc 	.word	0x000152cc
   14220:	2e85a300 	.word	0x2e85a300
   14224:	248d3132 	.word	0x248d3132

00014228 <__ieee754_sqrtf>:
__ieee754_sqrtf():
   14228:	492c      	ldr	r1, [pc, #176]	; (142dc <__ieee754_sqrtf+0xb4>)
   1422a:	0042      	lsls	r2, r0, #1
   1422c:	b570      	push	{r4, r5, r6, lr}
   1422e:	1c03      	adds	r3, r0, #0
   14230:	1c04      	adds	r4, r0, #0
   14232:	0852      	lsrs	r2, r2, #1
   14234:	428a      	cmp	r2, r1
   14236:	d83c      	bhi.n	142b2 <__ieee754_sqrtf+0x8a>
   14238:	1c01      	adds	r1, r0, #0
   1423a:	2a00      	cmp	r2, #0
   1423c:	d037      	beq.n	142ae <__ieee754_sqrtf+0x86>
   1423e:	2800      	cmp	r0, #0
   14240:	db41      	blt.n	142c6 <__ieee754_sqrtf+0x9e>
   14242:	4927      	ldr	r1, [pc, #156]	; (142e0 <__ieee754_sqrtf+0xb8>)
   14244:	15c0      	asrs	r0, r0, #23
   14246:	428a      	cmp	r2, r1
   14248:	d80b      	bhi.n	14262 <__ieee754_sqrtf+0x3a>
   1424a:	2180      	movs	r1, #128	; 0x80
   1424c:	0409      	lsls	r1, r1, #16
   1424e:	4221      	tst	r1, r4
   14250:	d140      	bne.n	142d4 <__ieee754_sqrtf+0xac>
   14252:	2200      	movs	r2, #0
   14254:	005b      	lsls	r3, r3, #1
   14256:	3201      	adds	r2, #1
   14258:	420b      	tst	r3, r1
   1425a:	d0fb      	beq.n	14254 <__ieee754_sqrtf+0x2c>
   1425c:	2101      	movs	r1, #1
   1425e:	1a8a      	subs	r2, r1, r2
   14260:	1880      	adds	r0, r0, r2
   14262:	025b      	lsls	r3, r3, #9
   14264:	0a5a      	lsrs	r2, r3, #9
   14266:	1c01      	adds	r1, r0, #0
   14268:	2380      	movs	r3, #128	; 0x80
   1426a:	041b      	lsls	r3, r3, #16
   1426c:	397f      	subs	r1, #127	; 0x7f
   1426e:	4313      	orrs	r3, r2
   14270:	07ca      	lsls	r2, r1, #31
   14272:	d426      	bmi.n	142c2 <__ieee754_sqrtf+0x9a>
   14274:	2280      	movs	r2, #128	; 0x80
   14276:	1048      	asrs	r0, r1, #1
   14278:	005b      	lsls	r3, r3, #1
   1427a:	2119      	movs	r1, #25
   1427c:	2600      	movs	r6, #0
   1427e:	2500      	movs	r5, #0
   14280:	0452      	lsls	r2, r2, #17
   14282:	18ac      	adds	r4, r5, r2
   14284:	429c      	cmp	r4, r3
   14286:	dc02      	bgt.n	1428e <__ieee754_sqrtf+0x66>
   14288:	18a5      	adds	r5, r4, r2
   1428a:	1b1b      	subs	r3, r3, r4
   1428c:	18b6      	adds	r6, r6, r2
   1428e:	3901      	subs	r1, #1
   14290:	005b      	lsls	r3, r3, #1
   14292:	0852      	lsrs	r2, r2, #1
   14294:	2900      	cmp	r1, #0
   14296:	d1f4      	bne.n	14282 <__ieee754_sqrtf+0x5a>
   14298:	2b00      	cmp	r3, #0
   1429a:	d002      	beq.n	142a2 <__ieee754_sqrtf+0x7a>
   1429c:	2301      	movs	r3, #1
   1429e:	4033      	ands	r3, r6
   142a0:	18f6      	adds	r6, r6, r3
   142a2:	23fc      	movs	r3, #252	; 0xfc
   142a4:	1076      	asrs	r6, r6, #1
   142a6:	059b      	lsls	r3, r3, #22
   142a8:	18f6      	adds	r6, r6, r3
   142aa:	05c1      	lsls	r1, r0, #23
   142ac:	1989      	adds	r1, r1, r6
   142ae:	1c08      	adds	r0, r1, #0
   142b0:	bd70      	pop	{r4, r5, r6, pc}
   142b2:	1c21      	adds	r1, r4, #0
   142b4:	f7ec fd6e 	bl	d94 <__aeabi_fmul>
   142b8:	1c21      	adds	r1, r4, #0
   142ba:	f7ec fa1b 	bl	6f4 <__aeabi_fadd>
   142be:	1c01      	adds	r1, r0, #0
   142c0:	e7f5      	b.n	142ae <__ieee754_sqrtf+0x86>
   142c2:	005b      	lsls	r3, r3, #1
   142c4:	e7d6      	b.n	14274 <__ieee754_sqrtf+0x4c>
   142c6:	f7ec fe8f 	bl	fe8 <__aeabi_fsub>
   142ca:	1c01      	adds	r1, r0, #0
   142cc:	f7ec fb7e 	bl	9cc <__aeabi_fdiv>
   142d0:	1c01      	adds	r1, r0, #0
   142d2:	e7ec      	b.n	142ae <__ieee754_sqrtf+0x86>
   142d4:	2201      	movs	r2, #1
   142d6:	1880      	adds	r0, r0, r2
   142d8:	e7c3      	b.n	14262 <__ieee754_sqrtf+0x3a>
   142da:	46c0      	nop			; (mov r8, r8)
   142dc:	7f7fffff 	.word	0x7f7fffff
   142e0:	007fffff 	.word	0x007fffff

000142e4 <__kernel_cosf>:
__kernel_cosf():
   142e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   142e6:	464f      	mov	r7, r9
   142e8:	4646      	mov	r6, r8
   142ea:	4b57      	ldr	r3, [pc, #348]	; (14448 <__kernel_cosf+0x164>)
   142ec:	b4c0      	push	{r6, r7}
   142ee:	0046      	lsls	r6, r0, #1
   142f0:	1c05      	adds	r5, r0, #0
   142f2:	1c0f      	adds	r7, r1, #0
   142f4:	0876      	lsrs	r6, r6, #1
   142f6:	429e      	cmp	r6, r3
   142f8:	dc48      	bgt.n	1438c <__kernel_cosf+0xa8>
   142fa:	f7ec ffeb 	bl	12d4 <__aeabi_f2iz>
   142fe:	2800      	cmp	r0, #0
   14300:	d100      	bne.n	14304 <__kernel_cosf+0x20>
   14302:	e09e      	b.n	14442 <__kernel_cosf+0x15e>
   14304:	1c29      	adds	r1, r5, #0
   14306:	1c28      	adds	r0, r5, #0
   14308:	f7ec fd44 	bl	d94 <__aeabi_fmul>
   1430c:	494f      	ldr	r1, [pc, #316]	; (1444c <__kernel_cosf+0x168>)
   1430e:	1c04      	adds	r4, r0, #0
   14310:	f7ec fd40 	bl	d94 <__aeabi_fmul>
   14314:	494e      	ldr	r1, [pc, #312]	; (14450 <__kernel_cosf+0x16c>)
   14316:	f7ec f9ed 	bl	6f4 <__aeabi_fadd>
   1431a:	1c21      	adds	r1, r4, #0
   1431c:	f7ec fd3a 	bl	d94 <__aeabi_fmul>
   14320:	494c      	ldr	r1, [pc, #304]	; (14454 <__kernel_cosf+0x170>)
   14322:	f7ec fe61 	bl	fe8 <__aeabi_fsub>
   14326:	1c21      	adds	r1, r4, #0
   14328:	f7ec fd34 	bl	d94 <__aeabi_fmul>
   1432c:	494a      	ldr	r1, [pc, #296]	; (14458 <__kernel_cosf+0x174>)
   1432e:	f7ec f9e1 	bl	6f4 <__aeabi_fadd>
   14332:	1c21      	adds	r1, r4, #0
   14334:	f7ec fd2e 	bl	d94 <__aeabi_fmul>
   14338:	4948      	ldr	r1, [pc, #288]	; (1445c <__kernel_cosf+0x178>)
   1433a:	f7ec fe55 	bl	fe8 <__aeabi_fsub>
   1433e:	1c21      	adds	r1, r4, #0
   14340:	f7ec fd28 	bl	d94 <__aeabi_fmul>
   14344:	4946      	ldr	r1, [pc, #280]	; (14460 <__kernel_cosf+0x17c>)
   14346:	f7ec f9d5 	bl	6f4 <__aeabi_fadd>
   1434a:	1c21      	adds	r1, r4, #0
   1434c:	f7ec fd22 	bl	d94 <__aeabi_fmul>
   14350:	4680      	mov	r8, r0
   14352:	21fc      	movs	r1, #252	; 0xfc
   14354:	1c20      	adds	r0, r4, #0
   14356:	0589      	lsls	r1, r1, #22
   14358:	f7ec fd1c 	bl	d94 <__aeabi_fmul>
   1435c:	4641      	mov	r1, r8
   1435e:	1c06      	adds	r6, r0, #0
   14360:	1c20      	adds	r0, r4, #0
   14362:	f7ec fd17 	bl	d94 <__aeabi_fmul>
   14366:	1c39      	adds	r1, r7, #0
   14368:	1c04      	adds	r4, r0, #0
   1436a:	1c28      	adds	r0, r5, #0
   1436c:	f7ec fd12 	bl	d94 <__aeabi_fmul>
   14370:	1c01      	adds	r1, r0, #0
   14372:	1c20      	adds	r0, r4, #0
   14374:	f7ec fe38 	bl	fe8 <__aeabi_fsub>
   14378:	1c01      	adds	r1, r0, #0
   1437a:	1c30      	adds	r0, r6, #0
   1437c:	f7ec fe34 	bl	fe8 <__aeabi_fsub>
   14380:	1c01      	adds	r1, r0, #0
   14382:	20fe      	movs	r0, #254	; 0xfe
   14384:	0580      	lsls	r0, r0, #22
   14386:	f7ec fe2f 	bl	fe8 <__aeabi_fsub>
   1438a:	e052      	b.n	14432 <__kernel_cosf+0x14e>
   1438c:	1c29      	adds	r1, r5, #0
   1438e:	f7ec fd01 	bl	d94 <__aeabi_fmul>
   14392:	492e      	ldr	r1, [pc, #184]	; (1444c <__kernel_cosf+0x168>)
   14394:	1c04      	adds	r4, r0, #0
   14396:	f7ec fcfd 	bl	d94 <__aeabi_fmul>
   1439a:	492d      	ldr	r1, [pc, #180]	; (14450 <__kernel_cosf+0x16c>)
   1439c:	f7ec f9aa 	bl	6f4 <__aeabi_fadd>
   143a0:	1c21      	adds	r1, r4, #0
   143a2:	f7ec fcf7 	bl	d94 <__aeabi_fmul>
   143a6:	492b      	ldr	r1, [pc, #172]	; (14454 <__kernel_cosf+0x170>)
   143a8:	f7ec fe1e 	bl	fe8 <__aeabi_fsub>
   143ac:	1c21      	adds	r1, r4, #0
   143ae:	f7ec fcf1 	bl	d94 <__aeabi_fmul>
   143b2:	4929      	ldr	r1, [pc, #164]	; (14458 <__kernel_cosf+0x174>)
   143b4:	f7ec f99e 	bl	6f4 <__aeabi_fadd>
   143b8:	1c21      	adds	r1, r4, #0
   143ba:	f7ec fceb 	bl	d94 <__aeabi_fmul>
   143be:	4927      	ldr	r1, [pc, #156]	; (1445c <__kernel_cosf+0x178>)
   143c0:	f7ec fe12 	bl	fe8 <__aeabi_fsub>
   143c4:	1c21      	adds	r1, r4, #0
   143c6:	f7ec fce5 	bl	d94 <__aeabi_fmul>
   143ca:	4925      	ldr	r1, [pc, #148]	; (14460 <__kernel_cosf+0x17c>)
   143cc:	f7ec f992 	bl	6f4 <__aeabi_fadd>
   143d0:	1c21      	adds	r1, r4, #0
   143d2:	f7ec fcdf 	bl	d94 <__aeabi_fmul>
   143d6:	4b23      	ldr	r3, [pc, #140]	; (14464 <__kernel_cosf+0x180>)
   143d8:	4680      	mov	r8, r0
   143da:	429e      	cmp	r6, r3
   143dc:	ddb9      	ble.n	14352 <__kernel_cosf+0x6e>
   143de:	4b22      	ldr	r3, [pc, #136]	; (14468 <__kernel_cosf+0x184>)
   143e0:	429e      	cmp	r6, r3
   143e2:	dc2a      	bgt.n	1443a <__kernel_cosf+0x156>
   143e4:	23ff      	movs	r3, #255	; 0xff
   143e6:	061b      	lsls	r3, r3, #24
   143e8:	18f6      	adds	r6, r6, r3
   143ea:	20fe      	movs	r0, #254	; 0xfe
   143ec:	0580      	lsls	r0, r0, #22
   143ee:	1c31      	adds	r1, r6, #0
   143f0:	f7ec fdfa 	bl	fe8 <__aeabi_fsub>
   143f4:	4681      	mov	r9, r0
   143f6:	21fc      	movs	r1, #252	; 0xfc
   143f8:	1c20      	adds	r0, r4, #0
   143fa:	0589      	lsls	r1, r1, #22
   143fc:	f7ec fcca 	bl	d94 <__aeabi_fmul>
   14400:	1c31      	adds	r1, r6, #0
   14402:	f7ec fdf1 	bl	fe8 <__aeabi_fsub>
   14406:	4641      	mov	r1, r8
   14408:	1c06      	adds	r6, r0, #0
   1440a:	1c20      	adds	r0, r4, #0
   1440c:	f7ec fcc2 	bl	d94 <__aeabi_fmul>
   14410:	1c39      	adds	r1, r7, #0
   14412:	1c04      	adds	r4, r0, #0
   14414:	1c28      	adds	r0, r5, #0
   14416:	f7ec fcbd 	bl	d94 <__aeabi_fmul>
   1441a:	1c01      	adds	r1, r0, #0
   1441c:	1c20      	adds	r0, r4, #0
   1441e:	f7ec fde3 	bl	fe8 <__aeabi_fsub>
   14422:	1c01      	adds	r1, r0, #0
   14424:	1c30      	adds	r0, r6, #0
   14426:	f7ec fddf 	bl	fe8 <__aeabi_fsub>
   1442a:	1c01      	adds	r1, r0, #0
   1442c:	4648      	mov	r0, r9
   1442e:	f7ec fddb 	bl	fe8 <__aeabi_fsub>
   14432:	bc0c      	pop	{r2, r3}
   14434:	4690      	mov	r8, r2
   14436:	4699      	mov	r9, r3
   14438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1443a:	4b0c      	ldr	r3, [pc, #48]	; (1446c <__kernel_cosf+0x188>)
   1443c:	4e0c      	ldr	r6, [pc, #48]	; (14470 <__kernel_cosf+0x18c>)
   1443e:	4699      	mov	r9, r3
   14440:	e7d9      	b.n	143f6 <__kernel_cosf+0x112>
   14442:	20fe      	movs	r0, #254	; 0xfe
   14444:	0580      	lsls	r0, r0, #22
   14446:	e7f4      	b.n	14432 <__kernel_cosf+0x14e>
   14448:	31ffffff 	.word	0x31ffffff
   1444c:	ad47d74e 	.word	0xad47d74e
   14450:	310f74f6 	.word	0x310f74f6
   14454:	3493f27c 	.word	0x3493f27c
   14458:	37d00d01 	.word	0x37d00d01
   1445c:	3ab60b61 	.word	0x3ab60b61
   14460:	3d2aaaab 	.word	0x3d2aaaab
   14464:	3e999999 	.word	0x3e999999
   14468:	3f480000 	.word	0x3f480000
   1446c:	3f380000 	.word	0x3f380000
   14470:	3e900000 	.word	0x3e900000

00014474 <__kernel_rem_pio2f>:
__kernel_rem_pio2f():
   14474:	b5f0      	push	{r4, r5, r6, r7, lr}
   14476:	4656      	mov	r6, sl
   14478:	464d      	mov	r5, r9
   1447a:	4644      	mov	r4, r8
   1447c:	465f      	mov	r7, fp
   1447e:	b4f0      	push	{r4, r5, r6, r7}
   14480:	b0df      	sub	sp, #380	; 0x17c
   14482:	9c68      	ldr	r4, [sp, #416]	; 0x1a0
   14484:	930c      	str	r3, [sp, #48]	; 0x30
   14486:	4bc1      	ldr	r3, [pc, #772]	; (1478c <__kernel_rem_pio2f+0x318>)
   14488:	910a      	str	r1, [sp, #40]	; 0x28
   1448a:	00a1      	lsls	r1, r4, #2
   1448c:	58c9      	ldr	r1, [r1, r3]
   1448e:	1ed3      	subs	r3, r2, #3
   14490:	9107      	str	r1, [sp, #28]
   14492:	17d9      	asrs	r1, r3, #31
   14494:	0f49      	lsrs	r1, r1, #29
   14496:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   14498:	18cb      	adds	r3, r1, r3
   1449a:	10db      	asrs	r3, r3, #3
   1449c:	930b      	str	r3, [sp, #44]	; 0x2c
   1449e:	3c01      	subs	r4, #1
   144a0:	9404      	str	r4, [sp, #16]
   144a2:	43db      	mvns	r3, r3
   144a4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   144a6:	17db      	asrs	r3, r3, #31
   144a8:	401c      	ands	r4, r3
   144aa:	4682      	mov	sl, r0
   144ac:	9804      	ldr	r0, [sp, #16]
   144ae:	43e3      	mvns	r3, r4
   144b0:	940b      	str	r4, [sp, #44]	; 0x2c
   144b2:	00db      	lsls	r3, r3, #3
   144b4:	1a25      	subs	r5, r4, r0
   144b6:	9c07      	ldr	r4, [sp, #28]
   144b8:	189b      	adds	r3, r3, r2
   144ba:	9306      	str	r3, [sp, #24]
   144bc:	1907      	adds	r7, r0, r4
   144be:	d419      	bmi.n	144f4 <__kernel_rem_pio2f+0x80>
   144c0:	9c69      	ldr	r4, [sp, #420]	; 0x1a4
   144c2:	00ab      	lsls	r3, r5, #2
   144c4:	18e4      	adds	r4, r4, r3
   144c6:	197f      	adds	r7, r7, r5
   144c8:	46a0      	mov	r8, r4
   144ca:	3701      	adds	r7, #1
   144cc:	2600      	movs	r6, #0
   144ce:	ac22      	add	r4, sp, #136	; 0x88
   144d0:	e008      	b.n	144e4 <__kernel_rem_pio2f+0x70>
   144d2:	4641      	mov	r1, r8
   144d4:	5988      	ldr	r0, [r1, r6]
   144d6:	f7ec ff1d 	bl	1314 <__aeabi_i2f>
   144da:	3501      	adds	r5, #1
   144dc:	51a0      	str	r0, [r4, r6]
   144de:	3604      	adds	r6, #4
   144e0:	42bd      	cmp	r5, r7
   144e2:	d007      	beq.n	144f4 <__kernel_rem_pio2f+0x80>
   144e4:	2d00      	cmp	r5, #0
   144e6:	daf4      	bge.n	144d2 <__kernel_rem_pio2f+0x5e>
   144e8:	2000      	movs	r0, #0
   144ea:	3501      	adds	r5, #1
   144ec:	51a0      	str	r0, [r4, r6]
   144ee:	3604      	adds	r6, #4
   144f0:	42bd      	cmp	r5, r7
   144f2:	d1f7      	bne.n	144e4 <__kernel_rem_pio2f+0x70>
   144f4:	9c07      	ldr	r4, [sp, #28]
   144f6:	2c00      	cmp	r4, #0
   144f8:	da00      	bge.n	144fc <__kernel_rem_pio2f+0x88>
   144fa:	e2fc      	b.n	14af6 <__kernel_rem_pio2f+0x682>
   144fc:	9b07      	ldr	r3, [sp, #28]
   144fe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   14500:	3301      	adds	r3, #1
   14502:	00a7      	lsls	r7, r4, #2
   14504:	009b      	lsls	r3, r3, #2
   14506:	a85e      	add	r0, sp, #376	; 0x178
   14508:	4698      	mov	r8, r3
   1450a:	19c3      	adds	r3, r0, r7
   1450c:	3bf4      	subs	r3, #244	; 0xf4
   1450e:	2100      	movs	r1, #0
   14510:	ac4a      	add	r4, sp, #296	; 0x128
   14512:	4699      	mov	r9, r3
   14514:	1c3b      	adds	r3, r7, #0
   14516:	468b      	mov	fp, r1
   14518:	4657      	mov	r7, sl
   1451a:	9408      	str	r4, [sp, #32]
   1451c:	469a      	mov	sl, r3
   1451e:	9c04      	ldr	r4, [sp, #16]
   14520:	2c00      	cmp	r4, #0
   14522:	da00      	bge.n	14526 <__kernel_rem_pio2f+0xb2>
   14524:	e21e      	b.n	14964 <__kernel_rem_pio2f+0x4f0>
   14526:	464d      	mov	r5, r9
   14528:	445d      	add	r5, fp
   1452a:	2400      	movs	r4, #0
   1452c:	2600      	movs	r6, #0
   1452e:	6829      	ldr	r1, [r5, #0]
   14530:	5938      	ldr	r0, [r7, r4]
   14532:	f7ec fc2f 	bl	d94 <__aeabi_fmul>
   14536:	1c01      	adds	r1, r0, #0
   14538:	1c30      	adds	r0, r6, #0
   1453a:	f7ec f8db 	bl	6f4 <__aeabi_fadd>
   1453e:	3404      	adds	r4, #4
   14540:	1c06      	adds	r6, r0, #0
   14542:	3d04      	subs	r5, #4
   14544:	4554      	cmp	r4, sl
   14546:	d1f2      	bne.n	1452e <__kernel_rem_pio2f+0xba>
   14548:	9c08      	ldr	r4, [sp, #32]
   1454a:	2104      	movs	r1, #4
   1454c:	4658      	mov	r0, fp
   1454e:	448b      	add	fp, r1
   14550:	5026      	str	r6, [r4, r0]
   14552:	45c3      	cmp	fp, r8
   14554:	d1e3      	bne.n	1451e <__kernel_rem_pio2f+0xaa>
   14556:	4653      	mov	r3, sl
   14558:	46ba      	mov	sl, r7
   1455a:	1c1f      	adds	r7, r3, #0
   1455c:	9c07      	ldr	r4, [sp, #28]
   1455e:	9807      	ldr	r0, [sp, #28]
   14560:	00a3      	lsls	r3, r4, #2
   14562:	ac0d      	add	r4, sp, #52	; 0x34
   14564:	18e4      	adds	r4, r4, r3
   14566:	46b8      	mov	r8, r7
   14568:	940d      	str	r4, [sp, #52]	; 0x34
   1456a:	4683      	mov	fp, r0
   1456c:	4657      	mov	r7, sl
   1456e:	465c      	mov	r4, fp
   14570:	9808      	ldr	r0, [sp, #32]
   14572:	00a4      	lsls	r4, r4, #2
   14574:	4659      	mov	r1, fp
   14576:	9403      	str	r4, [sp, #12]
   14578:	5904      	ldr	r4, [r0, r4]
   1457a:	2900      	cmp	r1, #0
   1457c:	dd26      	ble.n	145cc <__kernel_rem_pio2f+0x158>
   1457e:	465d      	mov	r5, fp
   14580:	ae0e      	add	r6, sp, #56	; 0x38
   14582:	3d01      	subs	r5, #1
   14584:	9a03      	ldr	r2, [sp, #12]
   14586:	00ad      	lsls	r5, r5, #2
   14588:	46b2      	mov	sl, r6
   1458a:	1945      	adds	r5, r0, r5
   1458c:	4492      	add	sl, r2
   1458e:	46b9      	mov	r9, r7
   14590:	21ee      	movs	r1, #238	; 0xee
   14592:	0589      	lsls	r1, r1, #22
   14594:	1c20      	adds	r0, r4, #0
   14596:	f7ec fbfd 	bl	d94 <__aeabi_fmul>
   1459a:	f7ec fe9b 	bl	12d4 <__aeabi_f2iz>
   1459e:	f7ec feb9 	bl	1314 <__aeabi_i2f>
   145a2:	2187      	movs	r1, #135	; 0x87
   145a4:	05c9      	lsls	r1, r1, #23
   145a6:	1c07      	adds	r7, r0, #0
   145a8:	f7ec fbf4 	bl	d94 <__aeabi_fmul>
   145ac:	1c01      	adds	r1, r0, #0
   145ae:	1c20      	adds	r0, r4, #0
   145b0:	f7ec fd1a 	bl	fe8 <__aeabi_fsub>
   145b4:	f7ec fe8e 	bl	12d4 <__aeabi_f2iz>
   145b8:	6829      	ldr	r1, [r5, #0]
   145ba:	c601      	stmia	r6!, {r0}
   145bc:	1c38      	adds	r0, r7, #0
   145be:	f7ec f899 	bl	6f4 <__aeabi_fadd>
   145c2:	3d04      	subs	r5, #4
   145c4:	1c04      	adds	r4, r0, #0
   145c6:	4556      	cmp	r6, sl
   145c8:	d1e2      	bne.n	14590 <__kernel_rem_pio2f+0x11c>
   145ca:	464f      	mov	r7, r9
   145cc:	1c20      	adds	r0, r4, #0
   145ce:	9906      	ldr	r1, [sp, #24]
   145d0:	f000 fc5c 	bl	14e8c <scalbnf>
   145d4:	21f8      	movs	r1, #248	; 0xf8
   145d6:	0589      	lsls	r1, r1, #22
   145d8:	1c04      	adds	r4, r0, #0
   145da:	f7ec fbdb 	bl	d94 <__aeabi_fmul>
   145de:	f000 fbe7 	bl	14db0 <floorf>
   145e2:	2182      	movs	r1, #130	; 0x82
   145e4:	05c9      	lsls	r1, r1, #23
   145e6:	f7ec fbd5 	bl	d94 <__aeabi_fmul>
   145ea:	1c01      	adds	r1, r0, #0
   145ec:	1c20      	adds	r0, r4, #0
   145ee:	f7ec fcfb 	bl	fe8 <__aeabi_fsub>
   145f2:	1c04      	adds	r4, r0, #0
   145f4:	f7ec fe6e 	bl	12d4 <__aeabi_f2iz>
   145f8:	1c06      	adds	r6, r0, #0
   145fa:	f7ec fe8b 	bl	1314 <__aeabi_i2f>
   145fe:	1c01      	adds	r1, r0, #0
   14600:	1c20      	adds	r0, r4, #0
   14602:	f7ec fcf1 	bl	fe8 <__aeabi_fsub>
   14606:	9c06      	ldr	r4, [sp, #24]
   14608:	1c05      	adds	r5, r0, #0
   1460a:	2c00      	cmp	r4, #0
   1460c:	dc00      	bgt.n	14610 <__kernel_rem_pio2f+0x19c>
   1460e:	e18b      	b.n	14928 <__kernel_rem_pio2f+0x4b4>
   14610:	465a      	mov	r2, fp
   14612:	3a01      	subs	r2, #1
   14614:	0092      	lsls	r2, r2, #2
   14616:	a80e      	add	r0, sp, #56	; 0x38
   14618:	5883      	ldr	r3, [r0, r2]
   1461a:	2108      	movs	r1, #8
   1461c:	1b09      	subs	r1, r1, r4
   1461e:	1c18      	adds	r0, r3, #0
   14620:	4108      	asrs	r0, r1
   14622:	1836      	adds	r6, r6, r0
   14624:	4088      	lsls	r0, r1
   14626:	1a1b      	subs	r3, r3, r0
   14628:	a90e      	add	r1, sp, #56	; 0x38
   1462a:	508b      	str	r3, [r1, r2]
   1462c:	2207      	movs	r2, #7
   1462e:	1b12      	subs	r2, r2, r4
   14630:	4113      	asrs	r3, r2
   14632:	9305      	str	r3, [sp, #20]
   14634:	9c05      	ldr	r4, [sp, #20]
   14636:	2c00      	cmp	r4, #0
   14638:	dd33      	ble.n	146a2 <__kernel_rem_pio2f+0x22e>
   1463a:	4658      	mov	r0, fp
   1463c:	3601      	adds	r6, #1
   1463e:	2800      	cmp	r0, #0
   14640:	dc00      	bgt.n	14644 <__kernel_rem_pio2f+0x1d0>
   14642:	e1a0      	b.n	14986 <__kernel_rem_pio2f+0x512>
   14644:	9c03      	ldr	r4, [sp, #12]
   14646:	2280      	movs	r2, #128	; 0x80
   14648:	ab0e      	add	r3, sp, #56	; 0x38
   1464a:	0052      	lsls	r2, r2, #1
   1464c:	1919      	adds	r1, r3, r4
   1464e:	20ff      	movs	r0, #255	; 0xff
   14650:	2400      	movs	r4, #0
   14652:	4694      	mov	ip, r2
   14654:	e008      	b.n	14668 <__kernel_rem_pio2f+0x1f4>
   14656:	2a00      	cmp	r2, #0
   14658:	d003      	beq.n	14662 <__kernel_rem_pio2f+0x1ee>
   1465a:	4664      	mov	r4, ip
   1465c:	1aa2      	subs	r2, r4, r2
   1465e:	601a      	str	r2, [r3, #0]
   14660:	2401      	movs	r4, #1
   14662:	3304      	adds	r3, #4
   14664:	428b      	cmp	r3, r1
   14666:	d008      	beq.n	1467a <__kernel_rem_pio2f+0x206>
   14668:	681a      	ldr	r2, [r3, #0]
   1466a:	2c00      	cmp	r4, #0
   1466c:	d0f3      	beq.n	14656 <__kernel_rem_pio2f+0x1e2>
   1466e:	1a82      	subs	r2, r0, r2
   14670:	601a      	str	r2, [r3, #0]
   14672:	3304      	adds	r3, #4
   14674:	2401      	movs	r4, #1
   14676:	428b      	cmp	r3, r1
   14678:	d1f6      	bne.n	14668 <__kernel_rem_pio2f+0x1f4>
   1467a:	9806      	ldr	r0, [sp, #24]
   1467c:	2800      	cmp	r0, #0
   1467e:	dd0d      	ble.n	1469c <__kernel_rem_pio2f+0x228>
   14680:	2801      	cmp	r0, #1
   14682:	d100      	bne.n	14686 <__kernel_rem_pio2f+0x212>
   14684:	e15b      	b.n	1493e <__kernel_rem_pio2f+0x4ca>
   14686:	2802      	cmp	r0, #2
   14688:	d108      	bne.n	1469c <__kernel_rem_pio2f+0x228>
   1468a:	465b      	mov	r3, fp
   1468c:	3b01      	subs	r3, #1
   1468e:	009b      	lsls	r3, r3, #2
   14690:	a90e      	add	r1, sp, #56	; 0x38
   14692:	58c9      	ldr	r1, [r1, r3]
   14694:	223f      	movs	r2, #63	; 0x3f
   14696:	400a      	ands	r2, r1
   14698:	a80e      	add	r0, sp, #56	; 0x38
   1469a:	50c2      	str	r2, [r0, r3]
   1469c:	9905      	ldr	r1, [sp, #20]
   1469e:	2902      	cmp	r1, #2
   146a0:	d076      	beq.n	14790 <__kernel_rem_pio2f+0x31c>
   146a2:	1c28      	adds	r0, r5, #0
   146a4:	2100      	movs	r1, #0
   146a6:	f7eb fff7 	bl	698 <__aeabi_fcmpeq>
   146aa:	2800      	cmp	r0, #0
   146ac:	d100      	bne.n	146b0 <__kernel_rem_pio2f+0x23c>
   146ae:	e089      	b.n	147c4 <__kernel_rem_pio2f+0x350>
   146b0:	4659      	mov	r1, fp
   146b2:	9c07      	ldr	r4, [sp, #28]
   146b4:	3901      	subs	r1, #1
   146b6:	428c      	cmp	r4, r1
   146b8:	dc0c      	bgt.n	146d4 <__kernel_rem_pio2f+0x260>
   146ba:	a80e      	add	r0, sp, #56	; 0x38
   146bc:	008d      	lsls	r5, r1, #2
   146be:	1943      	adds	r3, r0, r5
   146c0:	980d      	ldr	r0, [sp, #52]	; 0x34
   146c2:	2200      	movs	r2, #0
   146c4:	681c      	ldr	r4, [r3, #0]
   146c6:	3b04      	subs	r3, #4
   146c8:	4322      	orrs	r2, r4
   146ca:	4283      	cmp	r3, r0
   146cc:	d1fa      	bne.n	146c4 <__kernel_rem_pio2f+0x250>
   146ce:	2a00      	cmp	r2, #0
   146d0:	d000      	beq.n	146d4 <__kernel_rem_pio2f+0x260>
   146d2:	e1f5      	b.n	14ac0 <__kernel_rem_pio2f+0x64c>
   146d4:	9b07      	ldr	r3, [sp, #28]
   146d6:	a80e      	add	r0, sp, #56	; 0x38
   146d8:	3b01      	subs	r3, #1
   146da:	009b      	lsls	r3, r3, #2
   146dc:	58c3      	ldr	r3, [r0, r3]
   146de:	2b00      	cmp	r3, #0
   146e0:	d000      	beq.n	146e4 <__kernel_rem_pio2f+0x270>
   146e2:	e206      	b.n	14af2 <__kernel_rem_pio2f+0x67e>
   146e4:	9b07      	ldr	r3, [sp, #28]
   146e6:	2201      	movs	r2, #1
   146e8:	3b02      	subs	r3, #2
   146ea:	009b      	lsls	r3, r3, #2
   146ec:	18c3      	adds	r3, r0, r3
   146ee:	3b04      	subs	r3, #4
   146f0:	6859      	ldr	r1, [r3, #4]
   146f2:	3201      	adds	r2, #1
   146f4:	2900      	cmp	r1, #0
   146f6:	d0fa      	beq.n	146ee <__kernel_rem_pio2f+0x27a>
   146f8:	465b      	mov	r3, fp
   146fa:	445a      	add	r2, fp
   146fc:	3301      	adds	r3, #1
   146fe:	9209      	str	r2, [sp, #36]	; 0x24
   14700:	4293      	cmp	r3, r2
   14702:	dc3d      	bgt.n	14780 <__kernel_rem_pio2f+0x30c>
   14704:	9c08      	ldr	r4, [sp, #32]
   14706:	4658      	mov	r0, fp
   14708:	009b      	lsls	r3, r3, #2
   1470a:	18e4      	adds	r4, r4, r3
   1470c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1470e:	1a13      	subs	r3, r2, r0
   14710:	009b      	lsls	r3, r3, #2
   14712:	9305      	str	r3, [sp, #20]
   14714:	1c0b      	adds	r3, r1, #0
   14716:	445b      	add	r3, fp
   14718:	46a2      	mov	sl, r4
   1471a:	9c69      	ldr	r4, [sp, #420]	; 0x1a4
   1471c:	009b      	lsls	r3, r3, #2
   1471e:	980c      	ldr	r0, [sp, #48]	; 0x30
   14720:	18e3      	adds	r3, r4, r3
   14722:	9303      	str	r3, [sp, #12]
   14724:	1c03      	adds	r3, r0, #0
   14726:	445b      	add	r3, fp
   14728:	009b      	lsls	r3, r3, #2
   1472a:	a922      	add	r1, sp, #136	; 0x88
   1472c:	18c9      	adds	r1, r1, r3
   1472e:	2200      	movs	r2, #0
   14730:	468b      	mov	fp, r1
   14732:	4691      	mov	r9, r2
   14734:	9c03      	ldr	r4, [sp, #12]
   14736:	1c23      	adds	r3, r4, #0
   14738:	444b      	add	r3, r9
   1473a:	6858      	ldr	r0, [r3, #4]
   1473c:	f7ec fdea 	bl	1314 <__aeabi_i2f>
   14740:	4659      	mov	r1, fp
   14742:	9c04      	ldr	r4, [sp, #16]
   14744:	4449      	add	r1, r9
   14746:	6008      	str	r0, [r1, #0]
   14748:	2c00      	cmp	r4, #0
   1474a:	db1c      	blt.n	14786 <__kernel_rem_pio2f+0x312>
   1474c:	1c0d      	adds	r5, r1, #0
   1474e:	2400      	movs	r4, #0
   14750:	2600      	movs	r6, #0
   14752:	6829      	ldr	r1, [r5, #0]
   14754:	5938      	ldr	r0, [r7, r4]
   14756:	f7ec fb1d 	bl	d94 <__aeabi_fmul>
   1475a:	1c01      	adds	r1, r0, #0
   1475c:	1c30      	adds	r0, r6, #0
   1475e:	f7eb ffc9 	bl	6f4 <__aeabi_fadd>
   14762:	3404      	adds	r4, #4
   14764:	1c06      	adds	r6, r0, #0
   14766:	3d04      	subs	r5, #4
   14768:	4544      	cmp	r4, r8
   1476a:	d1f2      	bne.n	14752 <__kernel_rem_pio2f+0x2de>
   1476c:	4651      	mov	r1, sl
   1476e:	3104      	adds	r1, #4
   14770:	2204      	movs	r2, #4
   14772:	9c05      	ldr	r4, [sp, #20]
   14774:	468a      	mov	sl, r1
   14776:	4491      	add	r9, r2
   14778:	3904      	subs	r1, #4
   1477a:	c140      	stmia	r1!, {r6}
   1477c:	45a1      	cmp	r9, r4
   1477e:	d1d9      	bne.n	14734 <__kernel_rem_pio2f+0x2c0>
   14780:	9809      	ldr	r0, [sp, #36]	; 0x24
   14782:	4683      	mov	fp, r0
   14784:	e6f3      	b.n	1456e <__kernel_rem_pio2f+0xfa>
   14786:	2600      	movs	r6, #0
   14788:	e7f0      	b.n	1476c <__kernel_rem_pio2f+0x2f8>
   1478a:	46c0      	nop			; (mov r8, r8)
   1478c:	00015664 	.word	0x00015664
   14790:	20fe      	movs	r0, #254	; 0xfe
   14792:	1c29      	adds	r1, r5, #0
   14794:	0580      	lsls	r0, r0, #22
   14796:	f7ec fc27 	bl	fe8 <__aeabi_fsub>
   1479a:	1c05      	adds	r5, r0, #0
   1479c:	2c00      	cmp	r4, #0
   1479e:	d100      	bne.n	147a2 <__kernel_rem_pio2f+0x32e>
   147a0:	e77f      	b.n	146a2 <__kernel_rem_pio2f+0x22e>
   147a2:	20fe      	movs	r0, #254	; 0xfe
   147a4:	9906      	ldr	r1, [sp, #24]
   147a6:	0580      	lsls	r0, r0, #22
   147a8:	f000 fb70 	bl	14e8c <scalbnf>
   147ac:	1c01      	adds	r1, r0, #0
   147ae:	1c28      	adds	r0, r5, #0
   147b0:	f7ec fc1a 	bl	fe8 <__aeabi_fsub>
   147b4:	1c05      	adds	r5, r0, #0
   147b6:	1c28      	adds	r0, r5, #0
   147b8:	2100      	movs	r1, #0
   147ba:	f7eb ff6d 	bl	698 <__aeabi_fcmpeq>
   147be:	2800      	cmp	r0, #0
   147c0:	d000      	beq.n	147c4 <__kernel_rem_pio2f+0x350>
   147c2:	e775      	b.n	146b0 <__kernel_rem_pio2f+0x23c>
   147c4:	9c06      	ldr	r4, [sp, #24]
   147c6:	1c28      	adds	r0, r5, #0
   147c8:	4261      	negs	r1, r4
   147ca:	f000 fb5f 	bl	14e8c <scalbnf>
   147ce:	2187      	movs	r1, #135	; 0x87
   147d0:	05c9      	lsls	r1, r1, #23
   147d2:	46d9      	mov	r9, fp
   147d4:	1c05      	adds	r5, r0, #0
   147d6:	46b3      	mov	fp, r6
   147d8:	f7eb ff82 	bl	6e0 <__aeabi_fcmpge>
   147dc:	2800      	cmp	r0, #0
   147de:	d100      	bne.n	147e2 <__kernel_rem_pio2f+0x36e>
   147e0:	e18e      	b.n	14b00 <__kernel_rem_pio2f+0x68c>
   147e2:	21ee      	movs	r1, #238	; 0xee
   147e4:	0589      	lsls	r1, r1, #22
   147e6:	1c28      	adds	r0, r5, #0
   147e8:	f7ec fad4 	bl	d94 <__aeabi_fmul>
   147ec:	f7ec fd72 	bl	12d4 <__aeabi_f2iz>
   147f0:	f7ec fd90 	bl	1314 <__aeabi_i2f>
   147f4:	2187      	movs	r1, #135	; 0x87
   147f6:	05c9      	lsls	r1, r1, #23
   147f8:	1c04      	adds	r4, r0, #0
   147fa:	f7ec facb 	bl	d94 <__aeabi_fmul>
   147fe:	1c01      	adds	r1, r0, #0
   14800:	1c28      	adds	r0, r5, #0
   14802:	f7ec fbf1 	bl	fe8 <__aeabi_fsub>
   14806:	f7ec fd65 	bl	12d4 <__aeabi_f2iz>
   1480a:	9a03      	ldr	r2, [sp, #12]
   1480c:	a90e      	add	r1, sp, #56	; 0x38
   1480e:	5088      	str	r0, [r1, r2]
   14810:	9806      	ldr	r0, [sp, #24]
   14812:	464b      	mov	r3, r9
   14814:	3008      	adds	r0, #8
   14816:	3301      	adds	r3, #1
   14818:	9006      	str	r0, [sp, #24]
   1481a:	1c20      	adds	r0, r4, #0
   1481c:	009d      	lsls	r5, r3, #2
   1481e:	9303      	str	r3, [sp, #12]
   14820:	f7ec fd58 	bl	12d4 <__aeabi_f2iz>
   14824:	a90e      	add	r1, sp, #56	; 0x38
   14826:	5148      	str	r0, [r1, r5]
   14828:	20fe      	movs	r0, #254	; 0xfe
   1482a:	0580      	lsls	r0, r0, #22
   1482c:	9906      	ldr	r1, [sp, #24]
   1482e:	f000 fb2d 	bl	14e8c <scalbnf>
   14832:	9c03      	ldr	r4, [sp, #12]
   14834:	1c05      	adds	r5, r0, #0
   14836:	2c00      	cmp	r4, #0
   14838:	db4e      	blt.n	148d8 <__kernel_rem_pio2f+0x464>
   1483a:	46a2      	mov	sl, r4
   1483c:	2001      	movs	r0, #1
   1483e:	00a3      	lsls	r3, r4, #2
   14840:	4482      	add	sl, r0
   14842:	9c08      	ldr	r4, [sp, #32]
   14844:	4651      	mov	r1, sl
   14846:	18e4      	adds	r4, r4, r3
   14848:	008f      	lsls	r7, r1, #2
   1484a:	aa0e      	add	r2, sp, #56	; 0x38
   1484c:	427f      	negs	r7, r7
   1484e:	18d6      	adds	r6, r2, r3
   14850:	46a1      	mov	r9, r4
   14852:	46b8      	mov	r8, r7
   14854:	2400      	movs	r4, #0
   14856:	1c37      	adds	r7, r6, #0
   14858:	464e      	mov	r6, r9
   1485a:	5938      	ldr	r0, [r7, r4]
   1485c:	f7ec fd5a 	bl	1314 <__aeabi_i2f>
   14860:	1c29      	adds	r1, r5, #0
   14862:	f7ec fa97 	bl	d94 <__aeabi_fmul>
   14866:	21ee      	movs	r1, #238	; 0xee
   14868:	5130      	str	r0, [r6, r4]
   1486a:	0589      	lsls	r1, r1, #22
   1486c:	1c28      	adds	r0, r5, #0
   1486e:	f7ec fa91 	bl	d94 <__aeabi_fmul>
   14872:	3c04      	subs	r4, #4
   14874:	1c05      	adds	r5, r0, #0
   14876:	4544      	cmp	r4, r8
   14878:	d1ef      	bne.n	1485a <__kernel_rem_pio2f+0x3e6>
   1487a:	ac36      	add	r4, sp, #216	; 0xd8
   1487c:	9a07      	ldr	r2, [sp, #28]
   1487e:	4659      	mov	r1, fp
   14880:	2000      	movs	r0, #0
   14882:	9404      	str	r4, [sp, #16]
   14884:	4caa      	ldr	r4, [pc, #680]	; (14b30 <__kernel_rem_pio2f+0x6bc>)
   14886:	46b1      	mov	r9, r6
   14888:	4680      	mov	r8, r0
   1488a:	9106      	str	r1, [sp, #24]
   1488c:	4693      	mov	fp, r2
   1488e:	4658      	mov	r0, fp
   14890:	2700      	movs	r7, #0
   14892:	2800      	cmp	r0, #0
   14894:	db13      	blt.n	148be <__kernel_rem_pio2f+0x44a>
   14896:	2600      	movs	r6, #0
   14898:	2700      	movs	r7, #0
   1489a:	2500      	movs	r5, #0
   1489c:	e002      	b.n	148a4 <__kernel_rem_pio2f+0x430>
   1489e:	3604      	adds	r6, #4
   148a0:	4545      	cmp	r5, r8
   148a2:	dc0c      	bgt.n	148be <__kernel_rem_pio2f+0x44a>
   148a4:	464b      	mov	r3, r9
   148a6:	5999      	ldr	r1, [r3, r6]
   148a8:	59a0      	ldr	r0, [r4, r6]
   148aa:	f7ec fa73 	bl	d94 <__aeabi_fmul>
   148ae:	1c01      	adds	r1, r0, #0
   148b0:	1c38      	adds	r0, r7, #0
   148b2:	f7eb ff1f 	bl	6f4 <__aeabi_fadd>
   148b6:	3501      	adds	r5, #1
   148b8:	1c07      	adds	r7, r0, #0
   148ba:	45ab      	cmp	fp, r5
   148bc:	daef      	bge.n	1489e <__kernel_rem_pio2f+0x42a>
   148be:	4640      	mov	r0, r8
   148c0:	9904      	ldr	r1, [sp, #16]
   148c2:	0083      	lsls	r3, r0, #2
   148c4:	50cf      	str	r7, [r1, r3]
   148c6:	2201      	movs	r2, #1
   148c8:	2304      	movs	r3, #4
   148ca:	425b      	negs	r3, r3
   148cc:	4490      	add	r8, r2
   148ce:	4499      	add	r9, r3
   148d0:	45c2      	cmp	sl, r8
   148d2:	d1dc      	bne.n	1488e <__kernel_rem_pio2f+0x41a>
   148d4:	9906      	ldr	r1, [sp, #24]
   148d6:	468b      	mov	fp, r1
   148d8:	9c68      	ldr	r4, [sp, #416]	; 0x1a0
   148da:	2c02      	cmp	r4, #2
   148dc:	dd00      	ble.n	148e0 <__kernel_rem_pio2f+0x46c>
   148de:	e087      	b.n	149f0 <__kernel_rem_pio2f+0x57c>
   148e0:	2c00      	cmp	r4, #0
   148e2:	dc52      	bgt.n	1498a <__kernel_rem_pio2f+0x516>
   148e4:	d116      	bne.n	14914 <__kernel_rem_pio2f+0x4a0>
   148e6:	9c03      	ldr	r4, [sp, #12]
   148e8:	2c00      	cmp	r4, #0
   148ea:	da00      	bge.n	148ee <__kernel_rem_pio2f+0x47a>
   148ec:	e11e      	b.n	14b2c <__kernel_rem_pio2f+0x6b8>
   148ee:	a836      	add	r0, sp, #216	; 0xd8
   148f0:	00a4      	lsls	r4, r4, #2
   148f2:	1904      	adds	r4, r0, r4
   148f4:	ad35      	add	r5, sp, #212	; 0xd4
   148f6:	2000      	movs	r0, #0
   148f8:	6821      	ldr	r1, [r4, #0]
   148fa:	3c04      	subs	r4, #4
   148fc:	f7eb fefa 	bl	6f4 <__aeabi_fadd>
   14900:	42ac      	cmp	r4, r5
   14902:	d1f9      	bne.n	148f8 <__kernel_rem_pio2f+0x484>
   14904:	9c05      	ldr	r4, [sp, #20]
   14906:	2c00      	cmp	r4, #0
   14908:	d002      	beq.n	14910 <__kernel_rem_pio2f+0x49c>
   1490a:	2180      	movs	r1, #128	; 0x80
   1490c:	0609      	lsls	r1, r1, #24
   1490e:	1840      	adds	r0, r0, r1
   14910:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   14912:	6020      	str	r0, [r4, #0]
   14914:	4659      	mov	r1, fp
   14916:	2007      	movs	r0, #7
   14918:	4008      	ands	r0, r1
   1491a:	b05f      	add	sp, #380	; 0x17c
   1491c:	bc3c      	pop	{r2, r3, r4, r5}
   1491e:	4690      	mov	r8, r2
   14920:	4699      	mov	r9, r3
   14922:	46a2      	mov	sl, r4
   14924:	46ab      	mov	fp, r5
   14926:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14928:	9c06      	ldr	r4, [sp, #24]
   1492a:	2c00      	cmp	r4, #0
   1492c:	d111      	bne.n	14952 <__kernel_rem_pio2f+0x4de>
   1492e:	465b      	mov	r3, fp
   14930:	3b01      	subs	r3, #1
   14932:	009b      	lsls	r3, r3, #2
   14934:	a80e      	add	r0, sp, #56	; 0x38
   14936:	58c3      	ldr	r3, [r0, r3]
   14938:	121b      	asrs	r3, r3, #8
   1493a:	9305      	str	r3, [sp, #20]
   1493c:	e67a      	b.n	14634 <__kernel_rem_pio2f+0x1c0>
   1493e:	465b      	mov	r3, fp
   14940:	3b01      	subs	r3, #1
   14942:	009b      	lsls	r3, r3, #2
   14944:	a90e      	add	r1, sp, #56	; 0x38
   14946:	58c9      	ldr	r1, [r1, r3]
   14948:	227f      	movs	r2, #127	; 0x7f
   1494a:	400a      	ands	r2, r1
   1494c:	a80e      	add	r0, sp, #56	; 0x38
   1494e:	50c2      	str	r2, [r0, r3]
   14950:	e6a4      	b.n	1469c <__kernel_rem_pio2f+0x228>
   14952:	21fc      	movs	r1, #252	; 0xfc
   14954:	0589      	lsls	r1, r1, #22
   14956:	f7eb fec3 	bl	6e0 <__aeabi_fcmpge>
   1495a:	2800      	cmp	r0, #0
   1495c:	d10c      	bne.n	14978 <__kernel_rem_pio2f+0x504>
   1495e:	2400      	movs	r4, #0
   14960:	9405      	str	r4, [sp, #20]
   14962:	e69e      	b.n	146a2 <__kernel_rem_pio2f+0x22e>
   14964:	9c08      	ldr	r4, [sp, #32]
   14966:	2104      	movs	r1, #4
   14968:	4658      	mov	r0, fp
   1496a:	2600      	movs	r6, #0
   1496c:	448b      	add	fp, r1
   1496e:	5026      	str	r6, [r4, r0]
   14970:	45c3      	cmp	fp, r8
   14972:	d000      	beq.n	14976 <__kernel_rem_pio2f+0x502>
   14974:	e5d3      	b.n	1451e <__kernel_rem_pio2f+0xaa>
   14976:	e5ee      	b.n	14556 <__kernel_rem_pio2f+0xe2>
   14978:	2402      	movs	r4, #2
   1497a:	4658      	mov	r0, fp
   1497c:	9405      	str	r4, [sp, #20]
   1497e:	3601      	adds	r6, #1
   14980:	2800      	cmp	r0, #0
   14982:	dd00      	ble.n	14986 <__kernel_rem_pio2f+0x512>
   14984:	e65e      	b.n	14644 <__kernel_rem_pio2f+0x1d0>
   14986:	2400      	movs	r4, #0
   14988:	e677      	b.n	1467a <__kernel_rem_pio2f+0x206>
   1498a:	9c03      	ldr	r4, [sp, #12]
   1498c:	2100      	movs	r1, #0
   1498e:	2c00      	cmp	r4, #0
   14990:	db0d      	blt.n	149ae <__kernel_rem_pio2f+0x53a>
   14992:	9c03      	ldr	r4, [sp, #12]
   14994:	a836      	add	r0, sp, #216	; 0xd8
   14996:	00a3      	lsls	r3, r4, #2
   14998:	2100      	movs	r1, #0
   1499a:	18c4      	adds	r4, r0, r3
   1499c:	ad35      	add	r5, sp, #212	; 0xd4
   1499e:	1c08      	adds	r0, r1, #0
   149a0:	6821      	ldr	r1, [r4, #0]
   149a2:	3c04      	subs	r4, #4
   149a4:	f7eb fea6 	bl	6f4 <__aeabi_fadd>
   149a8:	42ac      	cmp	r4, r5
   149aa:	d1f9      	bne.n	149a0 <__kernel_rem_pio2f+0x52c>
   149ac:	1c01      	adds	r1, r0, #0
   149ae:	9c05      	ldr	r4, [sp, #20]
   149b0:	1c0b      	adds	r3, r1, #0
   149b2:	2c00      	cmp	r4, #0
   149b4:	d002      	beq.n	149bc <__kernel_rem_pio2f+0x548>
   149b6:	2080      	movs	r0, #128	; 0x80
   149b8:	0600      	lsls	r0, r0, #24
   149ba:	180b      	adds	r3, r1, r0
   149bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   149be:	9836      	ldr	r0, [sp, #216]	; 0xd8
   149c0:	6023      	str	r3, [r4, #0]
   149c2:	f7ec fb11 	bl	fe8 <__aeabi_fsub>
   149c6:	9c03      	ldr	r4, [sp, #12]
   149c8:	2c00      	cmp	r4, #0
   149ca:	dd08      	ble.n	149de <__kernel_rem_pio2f+0x56a>
   149cc:	9903      	ldr	r1, [sp, #12]
   149ce:	ac37      	add	r4, sp, #220	; 0xdc
   149d0:	008d      	lsls	r5, r1, #2
   149d2:	1965      	adds	r5, r4, r5
   149d4:	cc02      	ldmia	r4!, {r1}
   149d6:	f7eb fe8d 	bl	6f4 <__aeabi_fadd>
   149da:	42ac      	cmp	r4, r5
   149dc:	d1fa      	bne.n	149d4 <__kernel_rem_pio2f+0x560>
   149de:	9c05      	ldr	r4, [sp, #20]
   149e0:	2c00      	cmp	r4, #0
   149e2:	d002      	beq.n	149ea <__kernel_rem_pio2f+0x576>
   149e4:	2180      	movs	r1, #128	; 0x80
   149e6:	0609      	lsls	r1, r1, #24
   149e8:	1840      	adds	r0, r0, r1
   149ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   149ec:	6060      	str	r0, [r4, #4]
   149ee:	e791      	b.n	14914 <__kernel_rem_pio2f+0x4a0>
   149f0:	9c68      	ldr	r4, [sp, #416]	; 0x1a0
   149f2:	2c03      	cmp	r4, #3
   149f4:	d000      	beq.n	149f8 <__kernel_rem_pio2f+0x584>
   149f6:	e78d      	b.n	14914 <__kernel_rem_pio2f+0x4a0>
   149f8:	9c03      	ldr	r4, [sp, #12]
   149fa:	2c00      	cmp	r4, #0
   149fc:	dc00      	bgt.n	14a00 <__kernel_rem_pio2f+0x58c>
   149fe:	e091      	b.n	14b24 <__kernel_rem_pio2f+0x6b0>
   14a00:	ac36      	add	r4, sp, #216	; 0xd8
   14a02:	9404      	str	r4, [sp, #16]
   14a04:	9b03      	ldr	r3, [sp, #12]
   14a06:	9c03      	ldr	r4, [sp, #12]
   14a08:	3b01      	subs	r3, #1
   14a0a:	00a5      	lsls	r5, r4, #2
   14a0c:	9c04      	ldr	r4, [sp, #16]
   14a0e:	009b      	lsls	r3, r3, #2
   14a10:	5967      	ldr	r7, [r4, r5]
   14a12:	a835      	add	r0, sp, #212	; 0xd4
   14a14:	18e4      	adds	r4, r4, r3
   14a16:	46a1      	mov	r9, r4
   14a18:	4680      	mov	r8, r0
   14a1a:	1c26      	adds	r6, r4, #0
   14a1c:	46aa      	mov	sl, r5
   14a1e:	e000      	b.n	14a22 <__kernel_rem_pio2f+0x5ae>
   14a20:	1c27      	adds	r7, r4, #0
   14a22:	6835      	ldr	r5, [r6, #0]
   14a24:	1c39      	adds	r1, r7, #0
   14a26:	1c28      	adds	r0, r5, #0
   14a28:	f7eb fe64 	bl	6f4 <__aeabi_fadd>
   14a2c:	1c04      	adds	r4, r0, #0
   14a2e:	1c21      	adds	r1, r4, #0
   14a30:	1c28      	adds	r0, r5, #0
   14a32:	f7ec fad9 	bl	fe8 <__aeabi_fsub>
   14a36:	1c39      	adds	r1, r7, #0
   14a38:	f7eb fe5c 	bl	6f4 <__aeabi_fadd>
   14a3c:	3e04      	subs	r6, #4
   14a3e:	60b0      	str	r0, [r6, #8]
   14a40:	6074      	str	r4, [r6, #4]
   14a42:	4546      	cmp	r6, r8
   14a44:	d1ec      	bne.n	14a20 <__kernel_rem_pio2f+0x5ac>
   14a46:	9c03      	ldr	r4, [sp, #12]
   14a48:	4655      	mov	r5, sl
   14a4a:	2000      	movs	r0, #0
   14a4c:	2c01      	cmp	r4, #1
   14a4e:	dd24      	ble.n	14a9a <__kernel_rem_pio2f+0x626>
   14a50:	9c04      	ldr	r4, [sp, #16]
   14a52:	464e      	mov	r6, r9
   14a54:	5967      	ldr	r7, [r4, r5]
   14a56:	46d0      	mov	r8, sl
   14a58:	e000      	b.n	14a5c <__kernel_rem_pio2f+0x5e8>
   14a5a:	1c27      	adds	r7, r4, #0
   14a5c:	6835      	ldr	r5, [r6, #0]
   14a5e:	1c39      	adds	r1, r7, #0
   14a60:	1c28      	adds	r0, r5, #0
   14a62:	f7eb fe47 	bl	6f4 <__aeabi_fadd>
   14a66:	1c04      	adds	r4, r0, #0
   14a68:	1c21      	adds	r1, r4, #0
   14a6a:	1c28      	adds	r0, r5, #0
   14a6c:	f7ec fabc 	bl	fe8 <__aeabi_fsub>
   14a70:	1c39      	adds	r1, r7, #0
   14a72:	f7eb fe3f 	bl	6f4 <__aeabi_fadd>
   14a76:	6070      	str	r0, [r6, #4]
   14a78:	9804      	ldr	r0, [sp, #16]
   14a7a:	6034      	str	r4, [r6, #0]
   14a7c:	3e04      	subs	r6, #4
   14a7e:	42b0      	cmp	r0, r6
   14a80:	d1eb      	bne.n	14a5a <__kernel_rem_pio2f+0x5e6>
   14a82:	9c04      	ldr	r4, [sp, #16]
   14a84:	4645      	mov	r5, r8
   14a86:	1c26      	adds	r6, r4, #0
   14a88:	1965      	adds	r5, r4, r5
   14a8a:	3604      	adds	r6, #4
   14a8c:	2000      	movs	r0, #0
   14a8e:	6829      	ldr	r1, [r5, #0]
   14a90:	3d04      	subs	r5, #4
   14a92:	f7eb fe2f 	bl	6f4 <__aeabi_fadd>
   14a96:	42b5      	cmp	r5, r6
   14a98:	d1f9      	bne.n	14a8e <__kernel_rem_pio2f+0x61a>
   14a9a:	9c05      	ldr	r4, [sp, #20]
   14a9c:	2c00      	cmp	r4, #0
   14a9e:	d038      	beq.n	14b12 <__kernel_rem_pio2f+0x69e>
   14aa0:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   14aa2:	2480      	movs	r4, #128	; 0x80
   14aa4:	0624      	lsls	r4, r4, #24
   14aa6:	1913      	adds	r3, r2, r4
   14aa8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   14aaa:	2180      	movs	r1, #128	; 0x80
   14aac:	6023      	str	r3, [r4, #0]
   14aae:	9c04      	ldr	r4, [sp, #16]
   14ab0:	0609      	lsls	r1, r1, #24
   14ab2:	6863      	ldr	r3, [r4, #4]
   14ab4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   14ab6:	185b      	adds	r3, r3, r1
   14ab8:	1840      	adds	r0, r0, r1
   14aba:	6063      	str	r3, [r4, #4]
   14abc:	60a0      	str	r0, [r4, #8]
   14abe:	e729      	b.n	14914 <__kernel_rem_pio2f+0x4a0>
   14ac0:	9c06      	ldr	r4, [sp, #24]
   14ac2:	a80e      	add	r0, sp, #56	; 0x38
   14ac4:	5943      	ldr	r3, [r0, r5]
   14ac6:	3c08      	subs	r4, #8
   14ac8:	46b3      	mov	fp, r6
   14aca:	9103      	str	r1, [sp, #12]
   14acc:	9406      	str	r4, [sp, #24]
   14ace:	2b00      	cmp	r3, #0
   14ad0:	d000      	beq.n	14ad4 <__kernel_rem_pio2f+0x660>
   14ad2:	e6a9      	b.n	14828 <__kernel_rem_pio2f+0x3b4>
   14ad4:	1c0a      	adds	r2, r1, #0
   14ad6:	3a01      	subs	r2, #1
   14ad8:	0093      	lsls	r3, r2, #2
   14ada:	18c3      	adds	r3, r0, r3
   14adc:	1c21      	adds	r1, r4, #0
   14ade:	e000      	b.n	14ae2 <__kernel_rem_pio2f+0x66e>
   14ae0:	3a01      	subs	r2, #1
   14ae2:	3b04      	subs	r3, #4
   14ae4:	685c      	ldr	r4, [r3, #4]
   14ae6:	9203      	str	r2, [sp, #12]
   14ae8:	3908      	subs	r1, #8
   14aea:	2c00      	cmp	r4, #0
   14aec:	d0f8      	beq.n	14ae0 <__kernel_rem_pio2f+0x66c>
   14aee:	9106      	str	r1, [sp, #24]
   14af0:	e69a      	b.n	14828 <__kernel_rem_pio2f+0x3b4>
   14af2:	2201      	movs	r2, #1
   14af4:	e600      	b.n	146f8 <__kernel_rem_pio2f+0x284>
   14af6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   14af8:	00a7      	lsls	r7, r4, #2
   14afa:	ac4a      	add	r4, sp, #296	; 0x128
   14afc:	9408      	str	r4, [sp, #32]
   14afe:	e52d      	b.n	1455c <__kernel_rem_pio2f+0xe8>
   14b00:	1c28      	adds	r0, r5, #0
   14b02:	f7ec fbe7 	bl	12d4 <__aeabi_f2iz>
   14b06:	9c03      	ldr	r4, [sp, #12]
   14b08:	aa0e      	add	r2, sp, #56	; 0x38
   14b0a:	5110      	str	r0, [r2, r4]
   14b0c:	464c      	mov	r4, r9
   14b0e:	9403      	str	r4, [sp, #12]
   14b10:	e68a      	b.n	14828 <__kernel_rem_pio2f+0x3b4>
   14b12:	9936      	ldr	r1, [sp, #216]	; 0xd8
   14b14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   14b16:	6021      	str	r1, [r4, #0]
   14b18:	9c04      	ldr	r4, [sp, #16]
   14b1a:	990a      	ldr	r1, [sp, #40]	; 0x28
   14b1c:	6864      	ldr	r4, [r4, #4]
   14b1e:	6088      	str	r0, [r1, #8]
   14b20:	604c      	str	r4, [r1, #4]
   14b22:	e6f7      	b.n	14914 <__kernel_rem_pio2f+0x4a0>
   14b24:	ac36      	add	r4, sp, #216	; 0xd8
   14b26:	2000      	movs	r0, #0
   14b28:	9404      	str	r4, [sp, #16]
   14b2a:	e7b6      	b.n	14a9a <__kernel_rem_pio2f+0x626>
   14b2c:	2000      	movs	r0, #0
   14b2e:	e6e9      	b.n	14904 <__kernel_rem_pio2f+0x490>
   14b30:	00015670 	.word	0x00015670

00014b34 <__kernel_sinf>:
__kernel_sinf():
   14b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14b36:	4b35      	ldr	r3, [pc, #212]	; (14c0c <__kernel_sinf+0xd8>)
   14b38:	464f      	mov	r7, r9
   14b3a:	4646      	mov	r6, r8
   14b3c:	0045      	lsls	r5, r0, #1
   14b3e:	b4c0      	push	{r6, r7}
   14b40:	1c04      	adds	r4, r0, #0
   14b42:	1c0f      	adds	r7, r1, #0
   14b44:	4690      	mov	r8, r2
   14b46:	086d      	lsrs	r5, r5, #1
   14b48:	429d      	cmp	r5, r3
   14b4a:	dc05      	bgt.n	14b58 <__kernel_sinf+0x24>
   14b4c:	f7ec fbc2 	bl	12d4 <__aeabi_f2iz>
   14b50:	1c03      	adds	r3, r0, #0
   14b52:	1c20      	adds	r0, r4, #0
   14b54:	2b00      	cmp	r3, #0
   14b56:	d046      	beq.n	14be6 <__kernel_sinf+0xb2>
   14b58:	1c21      	adds	r1, r4, #0
   14b5a:	1c20      	adds	r0, r4, #0
   14b5c:	f7ec f91a 	bl	d94 <__aeabi_fmul>
   14b60:	1c21      	adds	r1, r4, #0
   14b62:	1c05      	adds	r5, r0, #0
   14b64:	f7ec f916 	bl	d94 <__aeabi_fmul>
   14b68:	4929      	ldr	r1, [pc, #164]	; (14c10 <__kernel_sinf+0xdc>)
   14b6a:	1c06      	adds	r6, r0, #0
   14b6c:	1c28      	adds	r0, r5, #0
   14b6e:	f7ec f911 	bl	d94 <__aeabi_fmul>
   14b72:	4928      	ldr	r1, [pc, #160]	; (14c14 <__kernel_sinf+0xe0>)
   14b74:	f7ec fa38 	bl	fe8 <__aeabi_fsub>
   14b78:	1c29      	adds	r1, r5, #0
   14b7a:	f7ec f90b 	bl	d94 <__aeabi_fmul>
   14b7e:	4926      	ldr	r1, [pc, #152]	; (14c18 <__kernel_sinf+0xe4>)
   14b80:	f7eb fdb8 	bl	6f4 <__aeabi_fadd>
   14b84:	1c29      	adds	r1, r5, #0
   14b86:	f7ec f905 	bl	d94 <__aeabi_fmul>
   14b8a:	4924      	ldr	r1, [pc, #144]	; (14c1c <__kernel_sinf+0xe8>)
   14b8c:	f7ec fa2c 	bl	fe8 <__aeabi_fsub>
   14b90:	1c29      	adds	r1, r5, #0
   14b92:	f7ec f8ff 	bl	d94 <__aeabi_fmul>
   14b96:	4922      	ldr	r1, [pc, #136]	; (14c20 <__kernel_sinf+0xec>)
   14b98:	f7eb fdac 	bl	6f4 <__aeabi_fadd>
   14b9c:	4643      	mov	r3, r8
   14b9e:	4681      	mov	r9, r0
   14ba0:	2b00      	cmp	r3, #0
   14ba2:	d024      	beq.n	14bee <__kernel_sinf+0xba>
   14ba4:	21fc      	movs	r1, #252	; 0xfc
   14ba6:	0589      	lsls	r1, r1, #22
   14ba8:	1c38      	adds	r0, r7, #0
   14baa:	f7ec f8f3 	bl	d94 <__aeabi_fmul>
   14bae:	4649      	mov	r1, r9
   14bb0:	4680      	mov	r8, r0
   14bb2:	1c30      	adds	r0, r6, #0
   14bb4:	f7ec f8ee 	bl	d94 <__aeabi_fmul>
   14bb8:	1c01      	adds	r1, r0, #0
   14bba:	4640      	mov	r0, r8
   14bbc:	f7ec fa14 	bl	fe8 <__aeabi_fsub>
   14bc0:	1c29      	adds	r1, r5, #0
   14bc2:	f7ec f8e7 	bl	d94 <__aeabi_fmul>
   14bc6:	1c39      	adds	r1, r7, #0
   14bc8:	f7ec fa0e 	bl	fe8 <__aeabi_fsub>
   14bcc:	4915      	ldr	r1, [pc, #84]	; (14c24 <__kernel_sinf+0xf0>)
   14bce:	1c05      	adds	r5, r0, #0
   14bd0:	1c30      	adds	r0, r6, #0
   14bd2:	f7ec f8df 	bl	d94 <__aeabi_fmul>
   14bd6:	1c01      	adds	r1, r0, #0
   14bd8:	1c28      	adds	r0, r5, #0
   14bda:	f7eb fd8b 	bl	6f4 <__aeabi_fadd>
   14bde:	1c01      	adds	r1, r0, #0
   14be0:	1c20      	adds	r0, r4, #0
   14be2:	f7ec fa01 	bl	fe8 <__aeabi_fsub>
   14be6:	bc0c      	pop	{r2, r3}
   14be8:	4690      	mov	r8, r2
   14bea:	4699      	mov	r9, r3
   14bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14bee:	4649      	mov	r1, r9
   14bf0:	1c28      	adds	r0, r5, #0
   14bf2:	f7ec f8cf 	bl	d94 <__aeabi_fmul>
   14bf6:	490b      	ldr	r1, [pc, #44]	; (14c24 <__kernel_sinf+0xf0>)
   14bf8:	f7ec f9f6 	bl	fe8 <__aeabi_fsub>
   14bfc:	1c31      	adds	r1, r6, #0
   14bfe:	f7ec f8c9 	bl	d94 <__aeabi_fmul>
   14c02:	1c21      	adds	r1, r4, #0
   14c04:	f7eb fd76 	bl	6f4 <__aeabi_fadd>
   14c08:	e7ed      	b.n	14be6 <__kernel_sinf+0xb2>
   14c0a:	46c0      	nop			; (mov r8, r8)
   14c0c:	31ffffff 	.word	0x31ffffff
   14c10:	2f2ec9d3 	.word	0x2f2ec9d3
   14c14:	32d72f34 	.word	0x32d72f34
   14c18:	3638ef1b 	.word	0x3638ef1b
   14c1c:	39500d01 	.word	0x39500d01
   14c20:	3c088889 	.word	0x3c088889
   14c24:	3e2aaaab 	.word	0x3e2aaaab

00014c28 <matherr>:
matherr():
   14c28:	2000      	movs	r0, #0
   14c2a:	4770      	bx	lr
   14c2c:	0000      	movs	r0, r0
	...

00014c30 <nan>:
nan():
   14c30:	4902      	ldr	r1, [pc, #8]	; (14c3c <nan+0xc>)
   14c32:	4801      	ldr	r0, [pc, #4]	; (14c38 <nan+0x8>)
   14c34:	4770      	bx	lr
   14c36:	46c0      	nop			; (mov r8, r8)
   14c38:	00000000 	.word	0x00000000
   14c3c:	7ff80000 	.word	0x7ff80000

00014c40 <rint>:
rint():
   14c40:	b5f0      	push	{r4, r5, r6, r7, lr}
   14c42:	4646      	mov	r6, r8
   14c44:	464f      	mov	r7, r9
   14c46:	b4c0      	push	{r6, r7}
   14c48:	0fca      	lsrs	r2, r1, #31
   14c4a:	4690      	mov	r8, r2
   14c4c:	004b      	lsls	r3, r1, #1
   14c4e:	4a4d      	ldr	r2, [pc, #308]	; (14d84 <rint+0x144>)
   14c50:	0d5b      	lsrs	r3, r3, #21
   14c52:	189e      	adds	r6, r3, r2
   14c54:	b083      	sub	sp, #12
   14c56:	1c04      	adds	r4, r0, #0
   14c58:	1c0d      	adds	r5, r1, #0
   14c5a:	468c      	mov	ip, r1
   14c5c:	1c07      	adds	r7, r0, #0
   14c5e:	2e13      	cmp	r6, #19
   14c60:	dc3b      	bgt.n	14cda <rint+0x9a>
   14c62:	2e00      	cmp	r6, #0
   14c64:	db5c      	blt.n	14d20 <rint+0xe0>
   14c66:	4f48      	ldr	r7, [pc, #288]	; (14d88 <rint+0x148>)
   14c68:	1c02      	adds	r2, r0, #0
   14c6a:	4137      	asrs	r7, r6
   14c6c:	1c3b      	adds	r3, r7, #0
   14c6e:	400b      	ands	r3, r1
   14c70:	4303      	orrs	r3, r0
   14c72:	4699      	mov	r9, r3
   14c74:	4648      	mov	r0, r9
   14c76:	1c0b      	adds	r3, r1, #0
   14c78:	2800      	cmp	r0, #0
   14c7a:	d027      	beq.n	14ccc <rint+0x8c>
   14c7c:	087b      	lsrs	r3, r7, #1
   14c7e:	1c1a      	adds	r2, r3, #0
   14c80:	400a      	ands	r2, r1
   14c82:	4322      	orrs	r2, r4
   14c84:	2700      	movs	r7, #0
   14c86:	2a00      	cmp	r2, #0
   14c88:	d00a      	beq.n	14ca0 <rint+0x60>
   14c8a:	2e13      	cmp	r6, #19
   14c8c:	d100      	bne.n	14c90 <rint+0x50>
   14c8e:	e076      	b.n	14d7e <rint+0x13e>
   14c90:	1c29      	adds	r1, r5, #0
   14c92:	2280      	movs	r2, #128	; 0x80
   14c94:	4399      	bics	r1, r3
   14c96:	02d2      	lsls	r2, r2, #11
   14c98:	1c0b      	adds	r3, r1, #0
   14c9a:	4132      	asrs	r2, r6
   14c9c:	4313      	orrs	r3, r2
   14c9e:	469c      	mov	ip, r3
   14ca0:	4640      	mov	r0, r8
   14ca2:	00c1      	lsls	r1, r0, #3
   14ca4:	4839      	ldr	r0, [pc, #228]	; (14d8c <rint+0x14c>)
   14ca6:	4663      	mov	r3, ip
   14ca8:	1841      	adds	r1, r0, r1
   14caa:	680c      	ldr	r4, [r1, #0]
   14cac:	684d      	ldr	r5, [r1, #4]
   14cae:	1c3a      	adds	r2, r7, #0
   14cb0:	1c20      	adds	r0, r4, #0
   14cb2:	1c29      	adds	r1, r5, #0
   14cb4:	f7ec fb8a 	bl	13cc <__aeabi_dadd>
   14cb8:	9000      	str	r0, [sp, #0]
   14cba:	9101      	str	r1, [sp, #4]
   14cbc:	9800      	ldr	r0, [sp, #0]
   14cbe:	9901      	ldr	r1, [sp, #4]
   14cc0:	1c22      	adds	r2, r4, #0
   14cc2:	1c2b      	adds	r3, r5, #0
   14cc4:	f7ed fb0e 	bl	22e4 <__aeabi_dsub>
   14cc8:	1c02      	adds	r2, r0, #0
   14cca:	1c0b      	adds	r3, r1, #0
   14ccc:	1c10      	adds	r0, r2, #0
   14cce:	1c19      	adds	r1, r3, #0
   14cd0:	b003      	add	sp, #12
   14cd2:	bc0c      	pop	{r2, r3}
   14cd4:	4690      	mov	r8, r2
   14cd6:	4699      	mov	r9, r3
   14cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14cda:	2e33      	cmp	r6, #51	; 0x33
   14cdc:	dd0b      	ble.n	14cf6 <rint+0xb6>
   14cde:	1c0b      	adds	r3, r1, #0
   14ce0:	2180      	movs	r1, #128	; 0x80
   14ce2:	1c02      	adds	r2, r0, #0
   14ce4:	00c9      	lsls	r1, r1, #3
   14ce6:	428e      	cmp	r6, r1
   14ce8:	d1f0      	bne.n	14ccc <rint+0x8c>
   14cea:	1c29      	adds	r1, r5, #0
   14cec:	f7ec fb6e 	bl	13cc <__aeabi_dadd>
   14cf0:	1c02      	adds	r2, r0, #0
   14cf2:	1c0b      	adds	r3, r1, #0
   14cf4:	e7ea      	b.n	14ccc <rint+0x8c>
   14cf6:	4a26      	ldr	r2, [pc, #152]	; (14d90 <rint+0x150>)
   14cf8:	2601      	movs	r6, #1
   14cfa:	18d2      	adds	r2, r2, r3
   14cfc:	4276      	negs	r6, r6
   14cfe:	40d6      	lsrs	r6, r2
   14d00:	4691      	mov	r9, r2
   14d02:	1c0b      	adds	r3, r1, #0
   14d04:	1c02      	adds	r2, r0, #0
   14d06:	4206      	tst	r6, r0
   14d08:	d0e0      	beq.n	14ccc <rint+0x8c>
   14d0a:	0876      	lsrs	r6, r6, #1
   14d0c:	4206      	tst	r6, r0
   14d0e:	d0c7      	beq.n	14ca0 <rint+0x60>
   14d10:	2380      	movs	r3, #128	; 0x80
   14d12:	43b4      	bics	r4, r6
   14d14:	05db      	lsls	r3, r3, #23
   14d16:	4648      	mov	r0, r9
   14d18:	4103      	asrs	r3, r0
   14d1a:	1c27      	adds	r7, r4, #0
   14d1c:	431f      	orrs	r7, r3
   14d1e:	e7bf      	b.n	14ca0 <rint+0x60>
   14d20:	004e      	lsls	r6, r1, #1
   14d22:	0876      	lsrs	r6, r6, #1
   14d24:	4306      	orrs	r6, r0
   14d26:	1c02      	adds	r2, r0, #0
   14d28:	1c0b      	adds	r3, r1, #0
   14d2a:	2e00      	cmp	r6, #0
   14d2c:	d0ce      	beq.n	14ccc <rint+0x8c>
   14d2e:	0309      	lsls	r1, r1, #12
   14d30:	0b09      	lsrs	r1, r1, #12
   14d32:	4301      	orrs	r1, r0
   14d34:	4248      	negs	r0, r1
   14d36:	4301      	orrs	r1, r0
   14d38:	2080      	movs	r0, #128	; 0x80
   14d3a:	0300      	lsls	r0, r0, #12
   14d3c:	0b09      	lsrs	r1, r1, #12
   14d3e:	4001      	ands	r1, r0
   14d40:	0c68      	lsrs	r0, r5, #17
   14d42:	0440      	lsls	r0, r0, #17
   14d44:	1c0b      	adds	r3, r1, #0
   14d46:	4303      	orrs	r3, r0
   14d48:	4640      	mov	r0, r8
   14d4a:	00c1      	lsls	r1, r0, #3
   14d4c:	480f      	ldr	r0, [pc, #60]	; (14d8c <rint+0x14c>)
   14d4e:	1841      	adds	r1, r0, r1
   14d50:	680c      	ldr	r4, [r1, #0]
   14d52:	684d      	ldr	r5, [r1, #4]
   14d54:	1c29      	adds	r1, r5, #0
   14d56:	1c20      	adds	r0, r4, #0
   14d58:	f7ec fb38 	bl	13cc <__aeabi_dadd>
   14d5c:	9000      	str	r0, [sp, #0]
   14d5e:	9101      	str	r1, [sp, #4]
   14d60:	9800      	ldr	r0, [sp, #0]
   14d62:	9901      	ldr	r1, [sp, #4]
   14d64:	1c2b      	adds	r3, r5, #0
   14d66:	1c22      	adds	r2, r4, #0
   14d68:	f7ed fabc 	bl	22e4 <__aeabi_dsub>
   14d6c:	1c0d      	adds	r5, r1, #0
   14d6e:	4641      	mov	r1, r8
   14d70:	1c02      	adds	r2, r0, #0
   14d72:	07c8      	lsls	r0, r1, #31
   14d74:	0069      	lsls	r1, r5, #1
   14d76:	0849      	lsrs	r1, r1, #1
   14d78:	1c03      	adds	r3, r0, #0
   14d7a:	430b      	orrs	r3, r1
   14d7c:	e7a6      	b.n	14ccc <rint+0x8c>
   14d7e:	2780      	movs	r7, #128	; 0x80
   14d80:	063f      	lsls	r7, r7, #24
   14d82:	e785      	b.n	14c90 <rint+0x50>
   14d84:	fffffc01 	.word	0xfffffc01
   14d88:	000fffff 	.word	0x000fffff
   14d8c:	000156a0 	.word	0x000156a0
   14d90:	fffffbed 	.word	0xfffffbed

00014d94 <fabsf>:
fabsf():
   14d94:	0040      	lsls	r0, r0, #1
   14d96:	0840      	lsrs	r0, r0, #1
   14d98:	4770      	bx	lr
   14d9a:	46c0      	nop			; (mov r8, r8)

00014d9c <finitef>:
finitef():
   14d9c:	0043      	lsls	r3, r0, #1
   14d9e:	4a03      	ldr	r2, [pc, #12]	; (14dac <finitef+0x10>)
   14da0:	085b      	lsrs	r3, r3, #1
   14da2:	2000      	movs	r0, #0
   14da4:	429a      	cmp	r2, r3
   14da6:	4140      	adcs	r0, r0
   14da8:	4770      	bx	lr
   14daa:	46c0      	nop			; (mov r8, r8)
   14dac:	7f7fffff 	.word	0x7f7fffff

00014db0 <floorf>:
floorf():
   14db0:	b5f0      	push	{r4, r5, r6, r7, lr}
   14db2:	0043      	lsls	r3, r0, #1
   14db4:	4647      	mov	r7, r8
   14db6:	b480      	push	{r7}
   14db8:	085f      	lsrs	r7, r3, #1
   14dba:	0e1b      	lsrs	r3, r3, #24
   14dbc:	1c1e      	adds	r6, r3, #0
   14dbe:	3e7f      	subs	r6, #127	; 0x7f
   14dc0:	1c04      	adds	r4, r0, #0
   14dc2:	2e16      	cmp	r6, #22
   14dc4:	dc17      	bgt.n	14df6 <floorf+0x46>
   14dc6:	4680      	mov	r8, r0
   14dc8:	2e00      	cmp	r6, #0
   14dca:	db1d      	blt.n	14e08 <floorf+0x58>
   14dcc:	4f1a      	ldr	r7, [pc, #104]	; (14e38 <floorf+0x88>)
   14dce:	1c05      	adds	r5, r0, #0
   14dd0:	4137      	asrs	r7, r6
   14dd2:	4207      	tst	r7, r0
   14dd4:	d00b      	beq.n	14dee <floorf+0x3e>
   14dd6:	4919      	ldr	r1, [pc, #100]	; (14e3c <floorf+0x8c>)
   14dd8:	f7eb fc8c 	bl	6f4 <__aeabi_fadd>
   14ddc:	2100      	movs	r1, #0
   14dde:	f7eb fc75 	bl	6cc <__aeabi_fcmpgt>
   14de2:	2800      	cmp	r0, #0
   14de4:	d003      	beq.n	14dee <floorf+0x3e>
   14de6:	2c00      	cmp	r4, #0
   14de8:	db1c      	blt.n	14e24 <floorf+0x74>
   14dea:	4645      	mov	r5, r8
   14dec:	43bd      	bics	r5, r7
   14dee:	1c28      	adds	r0, r5, #0
   14df0:	bc04      	pop	{r2}
   14df2:	4690      	mov	r8, r2
   14df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14df6:	4b12      	ldr	r3, [pc, #72]	; (14e40 <floorf+0x90>)
   14df8:	1c05      	adds	r5, r0, #0
   14dfa:	429f      	cmp	r7, r3
   14dfc:	d9f7      	bls.n	14dee <floorf+0x3e>
   14dfe:	1c21      	adds	r1, r4, #0
   14e00:	f7eb fc78 	bl	6f4 <__aeabi_fadd>
   14e04:	1c05      	adds	r5, r0, #0
   14e06:	e7f2      	b.n	14dee <floorf+0x3e>
   14e08:	490c      	ldr	r1, [pc, #48]	; (14e3c <floorf+0x8c>)
   14e0a:	f7eb fc73 	bl	6f4 <__aeabi_fadd>
   14e0e:	2100      	movs	r1, #0
   14e10:	f7eb fc5c 	bl	6cc <__aeabi_fcmpgt>
   14e14:	2800      	cmp	r0, #0
   14e16:	d003      	beq.n	14e20 <floorf+0x70>
   14e18:	2c00      	cmp	r4, #0
   14e1a:	db09      	blt.n	14e30 <floorf+0x80>
   14e1c:	2500      	movs	r5, #0
   14e1e:	e7e6      	b.n	14dee <floorf+0x3e>
   14e20:	1c25      	adds	r5, r4, #0
   14e22:	e7e4      	b.n	14dee <floorf+0x3e>
   14e24:	2380      	movs	r3, #128	; 0x80
   14e26:	041b      	lsls	r3, r3, #16
   14e28:	4133      	asrs	r3, r6
   14e2a:	191e      	adds	r6, r3, r4
   14e2c:	46b0      	mov	r8, r6
   14e2e:	e7dc      	b.n	14dea <floorf+0x3a>
   14e30:	2f00      	cmp	r7, #0
   14e32:	d0f5      	beq.n	14e20 <floorf+0x70>
   14e34:	4d03      	ldr	r5, [pc, #12]	; (14e44 <floorf+0x94>)
   14e36:	e7da      	b.n	14dee <floorf+0x3e>
   14e38:	007fffff 	.word	0x007fffff
   14e3c:	7149f2ca 	.word	0x7149f2ca
   14e40:	7f7fffff 	.word	0x7f7fffff
   14e44:	bf800000 	.word	0xbf800000

00014e48 <__fpclassifyf>:
__fpclassifyf():
   14e48:	0043      	lsls	r3, r0, #1
   14e4a:	085b      	lsrs	r3, r3, #1
   14e4c:	2002      	movs	r0, #2
   14e4e:	2b00      	cmp	r3, #0
   14e50:	d100      	bne.n	14e54 <__fpclassifyf+0xc>
   14e52:	4770      	bx	lr
   14e54:	4a07      	ldr	r2, [pc, #28]	; (14e74 <__fpclassifyf+0x2c>)
   14e56:	2004      	movs	r0, #4
   14e58:	1899      	adds	r1, r3, r2
   14e5a:	4a07      	ldr	r2, [pc, #28]	; (14e78 <__fpclassifyf+0x30>)
   14e5c:	4291      	cmp	r1, r2
   14e5e:	d9f8      	bls.n	14e52 <__fpclassifyf+0xa>
   14e60:	4a06      	ldr	r2, [pc, #24]	; (14e7c <__fpclassifyf+0x34>)
   14e62:	1e59      	subs	r1, r3, #1
   14e64:	2003      	movs	r0, #3
   14e66:	4291      	cmp	r1, r2
   14e68:	d9f3      	bls.n	14e52 <__fpclassifyf+0xa>
   14e6a:	4a05      	ldr	r2, [pc, #20]	; (14e80 <__fpclassifyf+0x38>)
   14e6c:	189b      	adds	r3, r3, r2
   14e6e:	4258      	negs	r0, r3
   14e70:	4158      	adcs	r0, r3
   14e72:	e7ee      	b.n	14e52 <__fpclassifyf+0xa>
   14e74:	ff800000 	.word	0xff800000
   14e78:	7effffff 	.word	0x7effffff
   14e7c:	007ffffe 	.word	0x007ffffe
   14e80:	80800000 	.word	0x80800000

00014e84 <nanf>:
nanf():
   14e84:	4800      	ldr	r0, [pc, #0]	; (14e88 <nanf+0x4>)
   14e86:	4770      	bx	lr
   14e88:	7fc00000 	.word	0x7fc00000

00014e8c <scalbnf>:
scalbnf():
   14e8c:	b570      	push	{r4, r5, r6, lr}
   14e8e:	1c03      	adds	r3, r0, #0
   14e90:	0044      	lsls	r4, r0, #1
   14e92:	1c06      	adds	r6, r0, #0
   14e94:	1c0d      	adds	r5, r1, #0
   14e96:	0860      	lsrs	r0, r4, #1
   14e98:	1c1a      	adds	r2, r3, #0
   14e9a:	2800      	cmp	r0, #0
   14e9c:	d00f      	beq.n	14ebe <scalbnf+0x32>
   14e9e:	4927      	ldr	r1, [pc, #156]	; (14f3c <scalbnf+0xb0>)
   14ea0:	4288      	cmp	r0, r1
   14ea2:	d80e      	bhi.n	14ec2 <scalbnf+0x36>
   14ea4:	4a26      	ldr	r2, [pc, #152]	; (14f40 <scalbnf+0xb4>)
   14ea6:	4290      	cmp	r0, r2
   14ea8:	d911      	bls.n	14ece <scalbnf+0x42>
   14eaa:	0e24      	lsrs	r4, r4, #24
   14eac:	1964      	adds	r4, r4, r5
   14eae:	2cfe      	cmp	r4, #254	; 0xfe
   14eb0:	dc2a      	bgt.n	14f08 <scalbnf+0x7c>
   14eb2:	2c00      	cmp	r4, #0
   14eb4:	dd19      	ble.n	14eea <scalbnf+0x5e>
   14eb6:	4b23      	ldr	r3, [pc, #140]	; (14f44 <scalbnf+0xb8>)
   14eb8:	05e2      	lsls	r2, r4, #23
   14eba:	401e      	ands	r6, r3
   14ebc:	4332      	orrs	r2, r6
   14ebe:	1c10      	adds	r0, r2, #0
   14ec0:	bd70      	pop	{r4, r5, r6, pc}
   14ec2:	1c18      	adds	r0, r3, #0
   14ec4:	1c19      	adds	r1, r3, #0
   14ec6:	f7eb fc15 	bl	6f4 <__aeabi_fadd>
   14eca:	1c02      	adds	r2, r0, #0
   14ecc:	e7f7      	b.n	14ebe <scalbnf+0x32>
   14ece:	2198      	movs	r1, #152	; 0x98
   14ed0:	1c18      	adds	r0, r3, #0
   14ed2:	05c9      	lsls	r1, r1, #23
   14ed4:	f7eb ff5e 	bl	d94 <__aeabi_fmul>
   14ed8:	4a1b      	ldr	r2, [pc, #108]	; (14f48 <scalbnf+0xbc>)
   14eda:	1c03      	adds	r3, r0, #0
   14edc:	4295      	cmp	r5, r2
   14ede:	db1c      	blt.n	14f1a <scalbnf+0x8e>
   14ee0:	0044      	lsls	r4, r0, #1
   14ee2:	0e24      	lsrs	r4, r4, #24
   14ee4:	1c06      	adds	r6, r0, #0
   14ee6:	3c19      	subs	r4, #25
   14ee8:	e7e0      	b.n	14eac <scalbnf+0x20>
   14eea:	1c22      	adds	r2, r4, #0
   14eec:	3216      	adds	r2, #22
   14eee:	da19      	bge.n	14f24 <scalbnf+0x98>
   14ef0:	4a16      	ldr	r2, [pc, #88]	; (14f4c <scalbnf+0xc0>)
   14ef2:	4295      	cmp	r5, r2
   14ef4:	dc08      	bgt.n	14f08 <scalbnf+0x7c>
   14ef6:	1c19      	adds	r1, r3, #0
   14ef8:	4815      	ldr	r0, [pc, #84]	; (14f50 <scalbnf+0xc4>)
   14efa:	f000 f82d 	bl	14f58 <copysignf>
   14efe:	4914      	ldr	r1, [pc, #80]	; (14f50 <scalbnf+0xc4>)
   14f00:	f7eb ff48 	bl	d94 <__aeabi_fmul>
   14f04:	1c02      	adds	r2, r0, #0
   14f06:	e7da      	b.n	14ebe <scalbnf+0x32>
   14f08:	1c19      	adds	r1, r3, #0
   14f0a:	4812      	ldr	r0, [pc, #72]	; (14f54 <scalbnf+0xc8>)
   14f0c:	f000 f824 	bl	14f58 <copysignf>
   14f10:	4910      	ldr	r1, [pc, #64]	; (14f54 <scalbnf+0xc8>)
   14f12:	f7eb ff3f 	bl	d94 <__aeabi_fmul>
   14f16:	1c02      	adds	r2, r0, #0
   14f18:	e7d1      	b.n	14ebe <scalbnf+0x32>
   14f1a:	490d      	ldr	r1, [pc, #52]	; (14f50 <scalbnf+0xc4>)
   14f1c:	f7eb ff3a 	bl	d94 <__aeabi_fmul>
   14f20:	1c02      	adds	r2, r0, #0
   14f22:	e7cc      	b.n	14ebe <scalbnf+0x32>
   14f24:	4a07      	ldr	r2, [pc, #28]	; (14f44 <scalbnf+0xb8>)
   14f26:	1c20      	adds	r0, r4, #0
   14f28:	3019      	adds	r0, #25
   14f2a:	4016      	ands	r6, r2
   14f2c:	05c0      	lsls	r0, r0, #23
   14f2e:	21cc      	movs	r1, #204	; 0xcc
   14f30:	4330      	orrs	r0, r6
   14f32:	0589      	lsls	r1, r1, #22
   14f34:	f7eb ff2e 	bl	d94 <__aeabi_fmul>
   14f38:	1c02      	adds	r2, r0, #0
   14f3a:	e7c0      	b.n	14ebe <scalbnf+0x32>
   14f3c:	7f7fffff 	.word	0x7f7fffff
   14f40:	007fffff 	.word	0x007fffff
   14f44:	807fffff 	.word	0x807fffff
   14f48:	ffff3cb0 	.word	0xffff3cb0
   14f4c:	0000c350 	.word	0x0000c350
   14f50:	0da24260 	.word	0x0da24260
   14f54:	7149f2ca 	.word	0x7149f2ca

00014f58 <copysignf>:
copysignf():
   14f58:	0040      	lsls	r0, r0, #1
   14f5a:	0fc9      	lsrs	r1, r1, #31
   14f5c:	07c9      	lsls	r1, r1, #31
   14f5e:	0840      	lsrs	r0, r0, #1
   14f60:	4308      	orrs	r0, r1
   14f62:	4770      	bx	lr

00014f64 <__errno>:
__errno():
   14f64:	4b01      	ldr	r3, [pc, #4]	; (14f6c <__errno+0x8>)
   14f66:	6818      	ldr	r0, [r3, #0]
   14f68:	4770      	bx	lr
   14f6a:	46c0      	nop			; (mov r8, r8)
   14f6c:	1fffe07c 	.word	0x1fffe07c

00014f70 <memset>:
memset():
   14f70:	1c03      	adds	r3, r0, #0
   14f72:	1882      	adds	r2, r0, r2
   14f74:	4293      	cmp	r3, r2
   14f76:	d002      	beq.n	14f7e <memset+0xe>
   14f78:	7019      	strb	r1, [r3, #0]
   14f7a:	3301      	adds	r3, #1
   14f7c:	e7fa      	b.n	14f74 <memset+0x4>
   14f7e:	4770      	bx	lr
$d():
   14f80:	00000b18 	.word	0x00000b18
   14f84:	00000aca 	.word	0x00000aca
   14f88:	00000af8 	.word	0x00000af8
   14f8c:	00000a52 	.word	0x00000a52
   14f90:	00000af8 	.word	0x00000af8
   14f94:	00000aee 	.word	0x00000aee
   14f98:	00000af8 	.word	0x00000af8
   14f9c:	00000a52 	.word	0x00000a52
   14fa0:	00000aca 	.word	0x00000aca
   14fa4:	00000aca 	.word	0x00000aca
   14fa8:	00000aee 	.word	0x00000aee
   14fac:	00000a52 	.word	0x00000a52
   14fb0:	00000a4a 	.word	0x00000a4a
   14fb4:	00000a4a 	.word	0x00000a4a
   14fb8:	00000a4a 	.word	0x00000a4a
   14fbc:	00000afe 	.word	0x00000afe
   14fc0:	00000ebc 	.word	0x00000ebc
   14fc4:	00000eb6 	.word	0x00000eb6
   14fc8:	00000eb6 	.word	0x00000eb6
   14fcc:	00000eac 	.word	0x00000eac
   14fd0:	00000e0c 	.word	0x00000e0c
   14fd4:	00000e0c 	.word	0x00000e0c
   14fd8:	00000ea2 	.word	0x00000ea2
   14fdc:	00000eac 	.word	0x00000eac
   14fe0:	00000e0c 	.word	0x00000e0c
   14fe4:	00000ea2 	.word	0x00000ea2
   14fe8:	00000e0c 	.word	0x00000e0c
   14fec:	00000eac 	.word	0x00000eac
   14ff0:	00000e0a 	.word	0x00000e0a
   14ff4:	00000e0a 	.word	0x00000e0a
   14ff8:	00000e0a 	.word	0x00000e0a
   14ffc:	00000f44 	.word	0x00000f44
   15000:	00001bf8 	.word	0x00001bf8
   15004:	00001b94 	.word	0x00001b94
   15008:	00001bdc 	.word	0x00001bdc
   1500c:	00001ac2 	.word	0x00001ac2
   15010:	00001bdc 	.word	0x00001bdc
   15014:	00001bd0 	.word	0x00001bd0
   15018:	00001bdc 	.word	0x00001bdc
   1501c:	00001ac2 	.word	0x00001ac2
   15020:	00001b94 	.word	0x00001b94
   15024:	00001b94 	.word	0x00001b94
   15028:	00001bd0 	.word	0x00001bd0
   1502c:	00001ac2 	.word	0x00001ac2
   15030:	00001ab8 	.word	0x00001ab8
   15034:	00001ab8 	.word	0x00001ab8
   15038:	00001ab8 	.word	0x00001ab8
   1503c:	00001e1c 	.word	0x00001e1c
   15040:	0000496a 	.word	0x0000496a
   15044:	00004a2c 	.word	0x00004a2c
   15048:	00004aee 	.word	0x00004aee
   1504c:	00004bcc 	.word	0x00004bcc
   15050:	00004124 	.word	0x00004124
   15054:	000047d4 	.word	0x000047d4
   15058:	000046a4 	.word	0x000046a4
   1505c:	00004622 	.word	0x00004622
   15060:	00004568 	.word	0x00004568
   15064:	0000446c 	.word	0x0000446c
   15068:	0000474e 	.word	0x0000474e
   1506c:	0000474e 	.word	0x0000474e
   15070:	0000474e 	.word	0x0000474e
   15074:	0000474e 	.word	0x0000474e
   15078:	0000474e 	.word	0x0000474e
   1507c:	0000474e 	.word	0x0000474e
   15080:	52535441 	.word	0x52535441
   15084:	2c322c4d 	.word	0x2c322c4d
   15088:	00000d30 	.word	0x00000d30
   1508c:	00010fcc 	.word	0x00010fcc
   15090:	00010fe0 	.word	0x00010fe0
   15094:	00010ff0 	.word	0x00010ff0
   15098:	00010fba 	.word	0x00010fba
   1509c:	00010fec 	.word	0x00010fec
   150a0:	00010fae 	.word	0x00010fae
   150a4:	00010fe4 	.word	0x00010fe4
   150a8:	00010fa2 	.word	0x00010fa2
   150ac:	00010fe8 	.word	0x00010fe8
   150b0:	00010f96 	.word	0x00010f96
   150b4:	00010ff4 	.word	0x00010ff4
   150b8:	00010f8a 	.word	0x00010f8a
   150bc:	00010ff8 	.word	0x00010ff8
   150c0:	00010f7e 	.word	0x00010f7e
   150c4:	00010f78 	.word	0x00010f78
   150c8:	00010f72 	.word	0x00010f72
   150cc:	78716d5f 	.word	0x78716d5f
   150d0:	6c64695f 	.word	0x6c64695f
   150d4:	61745f65 	.word	0x61745f65
   150d8:	00006b73 	.word	0x00006b73

000150dc <_mqx_path>:
   150dc:	00015164                                dQ..

000150e0 <_mqx_vendor>:
   150e0:	000151a8                                .Q..

000150e4 <_mqxlite_version_number>:
   150e4:	01010001                                ....

000150e8 <_mqx_version_number>:
   150e8:	04000000 312e3156 0000312e 20677541     ....V1.1.1..Aug 
   150f8:	32203032 20353130 31207461 36343a37     20 2015 at 17:46
   15108:	0031343a 20296328 31313032 65724620     :41.(c) 2011 Fre
   15118:	61637365 5320656c 63696d65 75646e6f     escale Semicondu
   15128:	726f7463 6c41202e 6972206c 73746867     ctor. All rights
   15138:	73657220 65767265 00002e64 5f505350      reserved...PSP_
   15148:	49564552 4e4f4953 00000000 5f4e4547     REVISION....GEN_
   15158:	49564552 4e4f4953 00000000 462f3a43     REVISION....C:/F
   15168:	73656572 656c6163 53444b2f 302e335f     reescale/KDS_3.0
   15178:	652f302e 70696c63 502f6573 65636f72     .0/eclipse/Proce
   15188:	726f7373 65707845 6c2f7472 6d2f6269     ssorExpert/lib/m
   15198:	696c7871 562f6574 2e312e31 00002f31     qxlite/V1.1.1/..
   151a8:	65657246 6c616373 72462f65 63736565     Freescale/Freesc
   151b8:	20656c61 0058514d 2e302e34 00000030     ale MQX.4.0.0...
   151c8:	6e69616d 00000000 65736472 6164736e     main....rdsensda
   151d8:	00006174 69737566 00006e6f 6367616d     ta..fusion..magc
   151e8:	00006c61                                al..

000151ec <MQX_template_list>:
   151ec:	00000001 0000e559 0000028c 00000008     ....Y...........
   151fc:	000151c8 00000001 00000000 00000002     .Q..............
   1520c:	0000e631 0000048c 00000009 000151d0     1............Q..
	...
   15224:	00000003 0000e671 0000048c 0000000a     ....q...........
   15234:	000151dc 00000000 00000000 00000004     .Q..............
   15244:	0000e701 0000038c 0000000b 000151e4     .............Q..
	...

00015278 <MQX_init_struct>:
   15278:	00000001 200009fc 20000c50 00000001     ....... P.. ....
   15288:	00000110 20000c50 00000130 20000f98     ....P.. 0...... 
   15298:	000151ec 736f6361 00000066 66776f70     .Q..acosf...powf
   152a8:	00000000 74727173 00000066              ....sqrtf...

000152b4 <dp_h>:
   152b4:	00000000 3f15c000                       .......?

000152bc <dp_l>:
   152bc:	00000000 35d1cfdc                       .......5

000152c4 <bp>:
   152c4:	3f800000 3fc00000                       ...?...?

000152cc <npio2_hw>:
   152cc:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
   152dc:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
   152ec:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
   152fc:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
   1530c:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
   1531c:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
   1532c:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
   1533c:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

0001534c <two_over_pi>:
   1534c:	000000a2 000000f9 00000083 0000006e     ............n...
   1535c:	0000004e 00000044 00000015 00000029     N...D.......)...
   1536c:	000000fc 00000027 00000057 000000d1     ....'...W.......
   1537c:	000000f5 00000034 000000dd 000000c0     ....4...........
   1538c:	000000db 00000062 00000095 00000099     ....b...........
   1539c:	0000003c 00000043 00000090 00000041     <...C.......A...
   153ac:	000000fe 00000051 00000063 000000ab     ....Q...c.......
   153bc:	000000de 000000bb 000000c5 00000061     ............a...
   153cc:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
   153dc:	00000042 0000004d 000000d2 000000e0     B...M...........
   153ec:	00000006 00000049 0000002e 000000ea     ....I...........
   153fc:	00000009 000000d1 00000092 0000001c     ................
   1540c:	000000fe 0000001d 000000eb 0000001c     ................
   1541c:	000000b1 00000029 000000a7 0000003e     ....).......>...
   1542c:	000000e8 00000082 00000035 000000f5     ........5.......
   1543c:	0000002e 000000bb 00000044 00000084     ........D.......
   1544c:	000000e9 0000009c 00000070 00000026     ........p...&...
   1545c:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
   1546c:	00000039 00000091 000000d6 00000039     9...........9...
   1547c:	00000083 00000053 00000039 000000f4     ....S...9.......
   1548c:	0000009c 00000084 0000005f 0000008b     ........_.......
   1549c:	000000bd 000000f9 00000028 0000003b     ........(...;...
   154ac:	0000001f 000000f8 00000097 000000ff     ................
   154bc:	000000de 00000005 00000098 0000000f     ................
   154cc:	000000ef 0000002f 00000011 0000008b     ..../...........
   154dc:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
   154ec:	0000006d 00000036 0000007e 000000cf     m...6...~.......
   154fc:	00000027 000000cb 00000009 000000b7     '...............
   1550c:	0000004f 00000046 0000003f 00000066     O...F...?...f...
   1551c:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
   1552c:	00000075 00000027 000000ba 000000c7     u...'...........
   1553c:	000000eb 000000e5 000000f1 0000007b     ............{...
   1554c:	0000003d 00000007 00000039 000000f7     =.......9.......
   1555c:	0000008a 00000052 00000092 000000ea     ....R...........
   1556c:	0000006b 000000fb 0000005f 000000b1     k......._.......
   1557c:	0000001f 0000008d 0000005d 00000008     ........].......
   1558c:	00000056 00000003 00000030 00000046     V.......0...F...
   1559c:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
   155ac:	000000f0 000000cf 000000bc 00000020     ............ ...
   155bc:	0000009a 000000f4 00000036 0000001d     ........6.......
   155cc:	000000a9 000000e3 00000091 00000061     ............a...
   155dc:	0000005e 000000e6 0000001b 00000008     ^...............
   155ec:	00000065 00000099 00000085 0000005f     e..........._...
   155fc:	00000014 000000a0 00000068 00000040     ........h...@...
   1560c:	0000008d 000000ff 000000d8 00000080     ................
   1561c:	0000004d 00000073 00000027 00000031     M...s...'...1...
   1562c:	00000006 00000006 00000015 00000056     ............V...
   1563c:	000000ca 00000073 000000a8 000000c9     ....s...........
   1564c:	00000060 000000e2 0000007b 000000c0     `.......{.......
   1565c:	0000008c 0000006b                       ....k...

00015664 <init_jk>:
   15664:	00000004 00000007 00000009              ............

00015670 <PIo2>:
   15670:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
   15680:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
   15690:	1fc40000 1bc60000 17440000 00000000     ..........D.....

000156a0 <TWO52>:
   156a0:	00000000 43300000 00000000 c3300000     ......0C......0.
   156b0:	00000043                                C...

000156b4 <__sf_fake_stdin>:
	...

000156d4 <__sf_fake_stdout>:
	...

000156f4 <__sf_fake_stderr>:
	...

00015714 <_init>:
$t():
   15714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15716:	46c0      	nop			; (mov r8, r8)
   15718:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1571a:	bc08      	pop	{r3}
   1571c:	469e      	mov	lr, r3
   1571e:	4770      	bx	lr

00015720 <_fini>:
   15720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15722:	46c0      	nop			; (mov r8, r8)
   15724:	bcf8      	pop	{r3, r4, r5, r6, r7}
   15726:	bc08      	pop	{r3}
   15728:	469e      	mov	lr, r3
   1572a:	4770      	bx	lr

0001572c <_sched_start_internal>:
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:90
 *END*----------------------------------------------------------------------*/

 ASM_PUBLIC_BEGIN(_sched_start_internal)
 ASM_PUBLIC_FUNC(_sched_start_internal)
ASM_LABEL(_sched_start_internal)
                GET_KERNEL_DATA r0
   1572c:	4896      	ldr	r0, [pc, #600]	; (15988 <__get_CONTROL+0x6>)
   1572e:	6800      	ldr	r0, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:91
                b sched_internal
   15730:	e029      	b.n	15786 <sched_internal>

00015732 <_sched_run_internal>:
_sched_run_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:99
//-------------------------------------------------------------------------------

 ASM_PUBLIC_BEGIN(_sched_run_internal)
 ASM_PUBLIC_FUNC(_sched_run_internal)
ASM_LABEL(_sched_run_internal)
                GET_KERNEL_DATA r0
   15732:	4895      	ldr	r0, [pc, #596]	; (15988 <__get_CONTROL+0x6>)
   15734:	6800      	ldr	r0, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:100
                b sched_internal
   15736:	e026      	b.n	15786 <sched_internal>

00015738 <_sched_check_scheduler_internal>:
_sched_check_scheduler_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:108
//-------------------------------------------------------------------------------

 ASM_PUBLIC_BEGIN(_sched_check_scheduler_internal)
 ASM_PUBLIC_FUNC(_sched_check_scheduler_internal)
ASM_LABEL(_sched_check_scheduler_internal)
                GET_KERNEL_DATA r0
   15738:	4893      	ldr	r0, [pc, #588]	; (15988 <__get_CONTROL+0x6>)
   1573a:	6800      	ldr	r0, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:110

                ldrh r1, [r0, #KD_IN_ISR]
   1573c:	8b01      	ldrh	r1, [r0, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:111
                cmp r1, #0
   1573e:	2900      	cmp	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:112
                bne _sched_check_scheduler_internal_end
   15740:	d105      	bne.n	1574e <_sched_check_scheduler_internal_end>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:114

                ldr r1, [r0, #KD_CURRENT_READY_Q]
   15742:	6a41      	ldr	r1, [r0, #36]	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:115
                ldr r2, [r0, #KD_ACTIVE_PTR]
   15744:	69c2      	ldr	r2, [r0, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:116
                ldr r3, [r2, #TD_MY_QUEUE]
   15746:	69d3      	ldr	r3, [r2, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:117
                cmp r1, r3
   15748:	4299      	cmp	r1, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:120

                // current task is still the active task
                beq _sched_check_scheduler_internal_end
   1574a:	d000      	beq.n	1574e <_sched_check_scheduler_internal_end>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:135
                //bl _set_pend_sv
                cpsie i
                pop {pc}
ASM_LABEL(_sched_check_scheduler_internal2)
#endif
                b _sched_execute_scheduler_internal
   1574c:	e000      	b.n	15750 <_sched_execute_scheduler_internal>

0001574e <_sched_check_scheduler_internal_end>:
_sched_check_scheduler_internal_end():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:138

ASM_LABEL(_sched_check_scheduler_internal_end)
                bx lr
   1574e:	4770      	bx	lr

00015750 <_sched_execute_scheduler_internal>:
_sched_execute_scheduler_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:168
ASM_LABEL(_sched_execute_scheduler_internal2)
                cpsie i
#endif

                // store active task registers
                STORE_ALL_REGISTERS
   15750:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
   15752:	4640      	mov	r0, r8
   15754:	4649      	mov	r1, r9
   15756:	4652      	mov	r2, sl
   15758:	465b      	mov	r3, fp
   1575a:	b40f      	push	{r0, r1, r2, r3}
   1575c:	b4f0      	push	{r4, r5, r6, r7}
   1575e:	f3ef 8410 	mrs	r4, PRIMASK
   15762:	b410      	push	{r4}
   15764:	f3ef 8109 	mrs	r1, PSP
   15768:	f3ef 8500 	mrs	r5, CPSR
   1576c:	4e87      	ldr	r6, [pc, #540]	; (1598c <__get_CONTROL+0xa>)
   1576e:	4335      	orrs	r5, r6
   15770:	4662      	mov	r2, ip
   15772:	4673      	mov	r3, lr
   15774:	4674      	mov	r4, lr
   15776:	4608      	mov	r0, r1
   15778:	3034      	adds	r0, #52	; 0x34
   1577a:	c03c      	stmia	r0!, {r2, r3, r4, r5}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:170
                // disable interrupts
                cpsid i
   1577c:	b672      	cpsid	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:172

                GET_KERNEL_DATA r0
   1577e:	4882      	ldr	r0, [pc, #520]	; (15988 <__get_CONTROL+0x6>)
   15780:	6800      	ldr	r0, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:173
                ldr r3, [r0, #KD_ACTIVE_PTR]        // get active task descriptor
   15782:	69c3      	ldr	r3, [r0, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:174
                str r1, [r3, #TD_STACK_PTR]         // store task SP to task descriptor td
   15784:	6159      	str	r1, [r3, #20]

00015786 <sched_internal>:
sched_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:181
#if MQX_KERNEL_LOGGING
                KLOG r0, ASM_PREFIX(_klog_execute_scheduler_internal)  // kernel log this function
#endif

ASM_LABEL(sched_internal)
                ldr r1, [r0, #KD_CURRENT_READY_Q]   // get current ready q
   15786:	6a41      	ldr	r1, [r0, #36]	; 0x24

00015788 <find_noempty_que>:
find_noempty_que():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:183
ASM_LABEL(find_noempty_que)
                ldr r2, [r1, #0]                    // address of first td
   15788:	680a      	ldr	r2, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:184
                cmp r2, r1                          // ready_q structure itself?
   1578a:	428a      	cmp	r2, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:185
                bne switch_task
   1578c:	d107      	bne.n	1579e <switch_task>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:186
                ldr r1, [r1, #RQ_NEXT_Q]            // try next queue
   1578e:	6889      	ldr	r1, [r1, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:187
                movs r1, r1
   15790:	0009      	movs	r1, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:188
                bne find_noempty_que
   15792:	d1f9      	bne.n	15788 <find_noempty_que>

00015794 <no_one_to_run>:
no_one_to_run():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:193

                // r1 is 0 -> empty
ASM_LABEL(no_one_to_run)
                // wait for interrupt
                cpsie i
   15794:	b662      	cpsie	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:194
                wfi
   15796:	bf30      	wfi
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:195
                cpsid i
   15798:	b672      	cpsid	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:198

                // TODO check r0, must be kernel data
                ldr r1, [r0, #KD_READY_Q_LIST]      // get first queue from ready list
   1579a:	6a01      	ldr	r1, [r0, #32]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:199
                b find_noempty_que
   1579c:	e7f4      	b.n	15788 <find_noempty_que>

0001579e <switch_task>:
switch_task():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:203

ASM_LABEL(switch_task)
                // update kernel structures
                str r1, [r0, #KD_CURRENT_READY_Q]   // store addr for active que
   1579e:	6241      	str	r1, [r0, #36]	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:204
                str r2, [r0, #KD_ACTIVE_PTR]        // active task descriptor
   157a0:	61c2      	str	r2, [r0, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:206

                ldrh r3, [r2, #TD_TASK_SR]
   157a2:	8c93      	ldrh	r3, [r2, #36]	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:207
                strh r3, [r0, #KD_ACTIVE_SR]        // restore priority mask for enabled interrupt for active task
   157a4:	8343      	strh	r3, [r0, #26]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:219
                KLOG r0, ASM_PREFIX(_klog_context_switch_internal)  // do kernel logging
#endif

                // activate task, restore registers stacked in the following order (from higher addresses to lower addresses):
                // xPSR, PC, LR, R12, R3, R2, R1, R0, R11, R10, R9, R8, R7, R6, R5, R4, PRIMASK
                ldr r0, [r2, #TD_STACK_PTR]         // get task SP
   157a6:	6950      	ldr	r0, [r2, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:220
                mov r1, r0
   157a8:	4601      	mov	r1, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:221
                adds r1, r1, #36
   157aa:	3124      	adds	r1, #36	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:222
                mov r12, r1
   157ac:	468c      	mov	ip, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:224
                //load r4-r10
                adds r0, r0, #4
   157ae:	3004      	adds	r0, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:225
                ldm r0!, {r1-r7}
   157b0:	c8fe      	ldmia	r0!, {r1, r2, r3, r4, r5, r6, r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:226
                mov r10, r7
   157b2:	46ba      	mov	sl, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:227
                mov r9, r6
   157b4:	46b1      	mov	r9, r6
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:228
                mov r8, r5
   157b6:	46a8      	mov	r8, r5
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:229
                mov r7, r4
   157b8:	4627      	mov	r7, r4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:230
                mov r6, r3
   157ba:	461e      	mov	r6, r3
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:231
                mov r5, r2
   157bc:	4615      	mov	r5, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:232
                mov r4, r1
   157be:	460c      	mov	r4, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:234
                //load r11
                ldm r0!, {r1}
   157c0:	c802      	ldmia	r0!, {r1}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:235
                mov r11, r1
   157c2:	468b      	mov	fp, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:237
                //check if we are returning from the ISR or not
                mrs r1, CONTROL
   157c4:	f3ef 8114 	mrs	r1, CONTROL
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:238
                cmp r1, #0
   157c8:	2900      	cmp	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:239
                bne rest_of_stack_frame_restore
   157ca:	d107      	bne.n	157dc <rest_of_stack_frame_restore>

000157cc <return_from_interrupt>:
return_from_interrupt():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:242
ASM_LABEL(return_from_interrupt)
                // returning from ISR - rest of stack frame will be loaded automatickly by HW when returning from the ISR
                mov r1, r12
   157cc:	4661      	mov	r1, ip
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:243
                msr PSP, r1
   157ce:	f381 8809 	msr	PSP, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:245
                //load PRIMASK
                subs r1, r1, #36
   157d2:	3924      	subs	r1, #36	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:246
                ldm r1!, {r2}
   157d4:	c904      	ldmia	r1!, {r2}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:247
                msr PRIMASK, r2
   157d6:	f382 8810 	msr	PRIMASK, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:249
                //load lr from the main stack
                pop {pc}
   157da:	bd00      	pop	{pc}

000157dc <rest_of_stack_frame_restore>:
rest_of_stack_frame_restore():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:253

ASM_LABEL(rest_of_stack_frame_restore)
                // returning from task, restore xPSR, PC, LR, R12, R3-R0 and also the PRIMASK
                mov r1, r12
   157dc:	4661      	mov	r1, ip
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:254
                adds r1, r1, #32
   157de:	3120      	adds	r1, #32
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:255
                msr PSP, r1
   157e0:	f381 8809 	msr	PSP, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:256
                adds r0, r0, #16
   157e4:	3010      	adds	r0, #16
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:258
                //restore R12, LR, PC
                ldm r0!, {r1-r3}
   157e6:	c80e      	ldmia	r0!, {r1, r2, r3}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:259
                mov r12, r1
   157e8:	468c      	mov	ip, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:260
                mov lr, r2
   157ea:	4696      	mov	lr, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:262
                //read stacked xPSR value
                ldm r0!, {r1}
   157ec:	c802      	ldmia	r0!, {r1}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:263
                subs r0, r0, #32
   157ee:	3820      	subs	r0, #32
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:266

                //bit 9 of the xPSR indicates the stack alignment on exception entry, if set SP has to be moved by 4 bytes
                ldr r2, =0x200
   157f0:	4a67      	ldr	r2, [pc, #412]	; (15990 <__get_CONTROL+0xe>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:267
                ands r2, r1, r2
   157f2:	400a      	ands	r2, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:268
                beq move_pc_at_the_start_of_stackframe
   157f4:	d004      	beq.n	15800 <move_pc_at_the_start_of_stackframe>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:269
                mrs r2, PSP
   157f6:	f3ef 8209 	mrs	r2, PSP
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:270
                adds r2, r2, #4
   157fa:	3204      	adds	r2, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:271
                msr PSP, r2
   157fc:	f382 8809 	msr	PSP, r2

00015800 <move_pc_at_the_start_of_stackframe>:
move_pc_at_the_start_of_stackframe():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:273
ASM_LABEL(move_pc_at_the_start_of_stackframe)
                mov r2, r0
   15800:	4602      	mov	r2, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:274
                subs r2, r2, #36
   15802:	3a24      	subs	r2, #36	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:277
                //restore xPSR register, do not execute any instruction that updates flags after that point
            #ifdef __GNUC__
                msr APSR_nzcvq, r1
   15804:	f381 8800 	msr	CPSR_f, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:282
            #else
                msr APSR, r1
            #endif
                //store stacked pc value (currently in r3) at the beginning of the stack frame to be later poped directly into the PC register
                push {r3}
   15808:	b408      	push	{r3}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:283
                push {r4}
   1580a:	b410      	push	{r4}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:284
                ldm r2!, {r4}
   1580c:	ca10      	ldmia	r2!, {r4}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:286
                //restore R3-R0
                ldm r0, {r0-r3}
   1580e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:300
                movs r0, #1                         // user mode
ASM_LABEL(_load_control)
                msr CONTROL, r0
#endif

                msr PRIMASK, r4
   15810:	f384 8810 	msr	PRIMASK, r4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:301
                pop {r4}
   15814:	bc10      	pop	{r4}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:302
                pop {pc}
   15816:	bd00      	pop	{pc}

00015818 <_mqx_api_call>:
_mqx_api_call_end():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:324
#if MQX_ENABLE_USER_MODE
                push {lr}
                svc SVC_MQX_FN
#endif
ASM_LABEL(_mqx_api_call_end)
                b _mqx_api_call_end
   15818:	e7fe      	b.n	15818 <_mqx_api_call>

0001581a <_task_block>:
_task_block():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:399
 ASM_PUBLIC_BEGIN(_task_block)
 ASM_PUBLIC_FUNC(_task_block)
ASM_LABEL(_task_block)

                // store active task registers
                STORE_ALL_REGISTERS
   1581a:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
   1581c:	4640      	mov	r0, r8
   1581e:	4649      	mov	r1, r9
   15820:	4652      	mov	r2, sl
   15822:	465b      	mov	r3, fp
   15824:	b40f      	push	{r0, r1, r2, r3}
   15826:	b4f0      	push	{r4, r5, r6, r7}
   15828:	f3ef 8410 	mrs	r4, PRIMASK
   1582c:	b410      	push	{r4}
   1582e:	f3ef 8109 	mrs	r1, PSP
   15832:	f3ef 8500 	mrs	r5, CPSR
   15836:	4e55      	ldr	r6, [pc, #340]	; (1598c <__get_CONTROL+0xa>)
   15838:	4335      	orrs	r5, r6
   1583a:	4662      	mov	r2, ip
   1583c:	4673      	mov	r3, lr
   1583e:	4674      	mov	r4, lr
   15840:	4608      	mov	r0, r1
   15842:	3034      	adds	r0, #52	; 0x34
   15844:	c03c      	stmia	r0!, {r2, r3, r4, r5}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:401
                //disable interrupts
                cpsid i
   15846:	b672      	cpsid	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:403

                GET_KERNEL_DATA r0
   15848:	484f      	ldr	r0, [pc, #316]	; (15988 <__get_CONTROL+0x6>)
   1584a:	6800      	ldr	r0, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:404
                ldr r3, [r0, #KD_ACTIVE_PTR]        // get active task descriptor
   1584c:	69c3      	ldr	r3, [r0, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:405
                str r1, [r3, #TD_STACK_PTR]         // store task SP to task descriptor td
   1584e:	6159      	str	r1, [r3, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:409


                // set task block bit
                ldr r2, [r3, #TD_STATE]
   15850:	689a      	ldr	r2, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:410
                movs r1, #1                        // TODO change from number to define
   15852:	2101      	movs	r1, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:411
                orrs r2, r2, r1
   15854:	430a      	orrs	r2, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:412
                str r2, [r3, #TD_STATE]
   15856:	609a      	str	r2, [r3, #8]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:418

#if MQX_KERNEL_LOGGING
                KLOG r0, ASM_PREFIX(_klog_block_internal)        // kernel log this function
#endif // MQX_KERNEL_LOGGING
                // remove active task from ready queue
                ldr r2, [r3, #TD_TD_PREV]           // get ptr to ready_q structure
   15858:	685a      	ldr	r2, [r3, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:419
                ldr r1, [r3, #TD_TD_NEXT]
   1585a:	6819      	ldr	r1, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:420
                str r1, [r2, #RQ_HEAD_READY_Q]
   1585c:	6011      	str	r1, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:421
                str r2, [r1, #TD_TD_PREV]
   1585e:	604a      	str	r2, [r1, #4]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:423

                b sched_internal   // Search for the next task in the ready queue.
   15860:	e791      	b.n	15786 <sched_internal>

00015862 <_int_kernel_isr>:
_int_kernel_isr():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:441

// kernel interrupt handler
 ASM_PUBLIC_BEGIN(_int_kernel_isr)
 ASM_PUBLIC_FUNC(_int_kernel_isr)
ASM_LABEL(_int_kernel_isr)
                mrs  r0, PRIMASK
   15862:	f3ef 8010 	mrs	r0, PRIMASK
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:442
                cpsid i
   15866:	b672      	cpsid	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:443
                push {lr}
   15868:	b500      	push	{lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:444
                push {r0}
   1586a:	b401      	push	{r0}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:446

                GET_KERNEL_DATA r3              // get the kernel data address
   1586c:	4b46      	ldr	r3, [pc, #280]	; (15988 <__get_CONTROL+0x6>)
   1586e:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:449

                // increment in interrupt counter
                ldrh r1, [r3, #KD_IN_ISR]
   15870:	8b19      	ldrh	r1, [r3, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:450
                adds r1, r1, #1
   15872:	3101      	adds	r1, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:451
                strh r1, [r3, #KD_IN_ISR]
   15874:	8319      	strh	r1, [r3, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:454

                // create interrupt content
                ldr r0, =0                      // error code (set 0)
   15876:	4847      	ldr	r0, [pc, #284]	; (15994 <__get_CONTROL+0x12>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:455
                push {r0}                       // store in stack
   15878:	b401      	push	{r0}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:456
                mrs r1, IPSR                    // exception number
   1587a:	f3ef 8105 	mrs	r1, IPSR
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:457
                ldr r0, [r3, #KD_INTERRUPT_CONTEXT_PTR] // previous interrupt content
   1587e:	6b58      	ldr	r0, [r3, #52]	; 0x34
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:458
                push {r0-r1}                    // store in stack
   15880:	b403      	push	{r0, r1}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:460

                mrs r0, MSP                     // get address of interrupt content
   15882:	f3ef 8008 	mrs	r0, MSP
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:461
                str r0, [r3, #KD_INTERRUPT_CONTEXT_PTR] // store address of actual interrupt content in kernel data
   15886:	6358      	str	r0, [r3, #52]	; 0x34
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:463

                mov r0, r1
   15888:	4608      	mov	r0, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:480
#endif // MQX_KERNEL_LOGGING
                // get C function address from MQX interrupt table
                // r0 - interrupt number

                // check if isr is in table range
                ldr r2, [r3, #KD_LAST_USER_ISR_VECTOR]
   1588a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:483

                // cbz r2, _isr_run_default       // isr not used (cbz not working in CW)
                cmp r2, #0
   1588c:	2a00      	cmp	r2, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:484
                bne _isr_skip_run_default1       // isr not used (this is CW workaround)
   1588e:	d100      	bne.n	15892 <_isr_skip_run_default1>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:485
                b _isr_run_default
   15890:	e03a      	b.n	15908 <_isr_run_default>

00015892 <_isr_skip_run_default1>:
_isr_skip_run_default1():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:488
ASM_LABEL(_isr_skip_run_default1)

                cmp r0, r2
   15892:	4290      	cmp	r0, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:489
                bhi _isr_run_default
   15894:	d838      	bhi.n	15908 <_isr_run_default>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:491

                ldr r2, [r3, #KD_FIRST_USER_ISR_VECTOR]
   15896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:492
                subs r1, r0, r2                         // r1 = actual exception number in table
   15898:	1a81      	subs	r1, r0, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:493
                blt _isr_run_default
   1589a:	db35      	blt.n	15908 <_isr_run_default>

0001589c <_int_kernel_isr_vect_ok>:
_int_kernel_isr_vect_ok():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:535
#else /* MQX_SPARSE_ISR_TABLE */

ASM_LABEL(_int_kernel_isr_vect_ok)
                // calculate offset in table
                // each table entry is 12 bytes in size
                movs r2, #12
   1589c:	220c      	movs	r2, #12
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:536
                muls r1, r2, r1
   1589e:	4351      	muls	r1, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:538

                ldr r2, [r3, #KD_INTERRUPT_TABLE_PTR]       // pointer to interrupt table begin
   158a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:539
                add r1, r1, r2                              // get address of entry in table
   158a2:	4411      	add	r1, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:540
                ldr r2, [r1, #0]
   158a4:	680a      	ldr	r2, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:541
                ldr r0, [r1, #IT_APP_ISR_DATA]              // move notifier data into r0 = first parameter in C func
   158a6:	6888      	ldr	r0, [r1, #8]

000158a8 <_isr_execute>:
_isr_execute():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:548

ASM_LABEL(_isr_execute)
                // r0 = first parameter in C func
                // r2 contain interrupt function address

                cpsie i
   158a8:	b662      	cpsie	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:550
                //MSR PRIMASK, R11
                push {r3}
   158aa:	b408      	push	{r3}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:552

                blx r2
   158ac:	4790      	blx	r2

000158ae <_int_kernel_isr_epilog>:
_int_kernel_isr_epilog():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:556

ASM_LABEL(_int_kernel_isr_epilog)

                pop {r3}
   158ae:	bc08      	pop	{r3}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:558
                //MRS  R11, PRIMASK
                cpsid i
   158b0:	b672      	cpsid	i

000158b2 <_int_kernel_isr_return_internal>:
_int_kernel_isr_return_internal():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:577
                pop {r0-r3}
ASM_LABEL(_isr_return_no_logging)
#endif /* MQX_KERNEL_LOGGING */

                // remove interrupt content
                pop {r0-r1}
   158b2:	bc03      	pop	{r0, r1}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:578
                str r0, [r3, #KD_INTERRUPT_CONTEXT_PTR] // update pointer to interrupt content
   158b4:	6358      	str	r0, [r3, #52]	; 0x34
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:580

                pop {r0}                                // error code
   158b6:	bc01      	pop	{r0}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:583

                // decrement interrupt counter
                ldrh r1, [r3, #KD_IN_ISR]
   158b8:	8b19      	ldrh	r1, [r3, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:584
                subs r1, r1, #1
   158ba:	3901      	subs	r1, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:585
                strh r1, [r3, #KD_IN_ISR]
   158bc:	8319      	strh	r1, [r3, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:587

                cmp r1, #0
   158be:	2900      	cmp	r1, #0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:588
                bne _isr_return_end        // waiting another isr, do not reschedule
   158c0:	d11e      	bne.n	15900 <_isr_return_end>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:592

                // check for reschedule
                // check preemtion
                ldr r2, [r3, #KD_ACTIVE_PTR]    // TD pointer
   158c2:	69da      	ldr	r2, [r3, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:593
                ldr r0, [r2, #TD_FLAGS]
   158c4:	6a90      	ldr	r0, [r2, #40]	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:594
                ldr r1, =TASK_PREEMPTION_DISABLED
   158c6:	4934      	ldr	r1, [pc, #208]	; (15998 <__get_CONTROL+0x16>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:595
                tst r0, r1
   158c8:	4208      	tst	r0, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:596
                bne _isr_return_end
   158ca:	d119      	bne.n	15900 <_isr_return_end>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:600

                // if a different TD at head of current readyq, then we need to run the scheduler
                // check for reschedule
                ldr r1, [r3, #KD_CURRENT_READY_Q]
   158cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:601
                ldr r1, [r1]
   158ce:	6809      	ldr	r1, [r1, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:602
                cmp r1, r2
   158d0:	4291      	cmp	r1, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:604

                beq _isr_return_end
   158d2:	d015      	beq.n	15900 <_isr_return_end>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:608

                // store rest of stack frame that is not stacked automatically by the HW when entering an exception
                // i.e. R11, R10, R9, R8, R7, R6, R5, R4, PRIMASK
                mrs r1, PSP
   158d4:	f3ef 8109 	mrs	r1, PSP
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:610
                // get PC and increment it by 1
                adds r1, r1, #24
   158d8:	3118      	adds	r1, #24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:611
                ldm r1!, {r0}
   158da:	c901      	ldmia	r1!, {r0}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:612
                adds r0, r0, #1
   158dc:	3001      	adds	r0, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:613
                subs r1, r1, #4
   158de:	3904      	subs	r1, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:614
                stm r1!, {r0}
   158e0:	c101      	stmia	r1!, {r0}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:615
                subs r1, r1, #64
   158e2:	3940      	subs	r1, #64	; 0x40
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:617
                //get PRIMASK from the main stack and store it in the process stack
                pop {r0}
   158e4:	bc01      	pop	{r0}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:618
                stm r1!, {r0}
   158e6:	c101      	stmia	r1!, {r0}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:619
                stm r1!, {r4-r7}
   158e8:	c1f0      	stmia	r1!, {r4, r5, r6, r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:620
                mov r2, r8
   158ea:	4642      	mov	r2, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:621
                mov r3, r9
   158ec:	464b      	mov	r3, r9
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:622
                mov r4, r10
   158ee:	4654      	mov	r4, sl
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:623
                mov r5, r11
   158f0:	465d      	mov	r5, fp
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:624
                stm r1!, {r2-r5}
   158f2:	c13c      	stmia	r1!, {r2, r3, r4, r5}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:625
                subs r1, r1, #36
   158f4:	3924      	subs	r1, #36	; 0x24
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:628

                //store new PSP value into TD
                GET_KERNEL_DATA r0
   158f6:	4824      	ldr	r0, [pc, #144]	; (15988 <__get_CONTROL+0x6>)
   158f8:	6800      	ldr	r0, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:629
                ldr r3, [r0, #KD_ACTIVE_PTR]        // get active task descriptor
   158fa:	69c3      	ldr	r3, [r0, #28]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:630
                str r1, [r3, #TD_STACK_PTR]         // store task SP to task descriptor td
   158fc:	6159      	str	r1, [r3, #20]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:632

                b sched_internal
   158fe:	e742      	b.n	15786 <sched_internal>

00015900 <_isr_return_end>:
_isr_return_end():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:635

ASM_LABEL(_isr_return_end)
                pop {r0}
   15900:	bc01      	pop	{r0}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:636
                msr PRIMASK, r0
   15902:	f380 8810 	msr	PRIMASK, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:637
                pop {pc}
   15906:	bd00      	pop	{pc}

00015908 <_isr_run_default>:
_isr_run_default():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:642

ASM_LABEL(_isr_run_default)
                // r0 - interrupt number

                ldr r2, [r3, #KD_DEFAULT_ISR]
   15908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:644

                b _isr_execute
   1590a:	e7cd      	b.n	158a8 <_isr_execute>

0001590c <_psp_exception_return>:
_psp_exception_return():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:658
 *END*----------------------------------------------------------------------*/

 ASM_PUBLIC_BEGIN(_psp_exception_return)
 ASM_PUBLIC_FUNC(_psp_exception_return)
ASM_LABEL(_psp_exception_return)
                cpsid i
   1590c:	b672      	cpsid	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:659
                push {r0, r1, r2, r4-r7}    // store parameter and registers which are used for copy and cpu do not store if
   1590e:	b4f7      	push	{r0, r1, r2, r4, r5, r6, r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:661

                GET_KERNEL_DATA r3
   15910:	4b1d      	ldr	r3, [pc, #116]	; (15988 <__get_CONTROL+0x6>)
   15912:	681b      	ldr	r3, [r3, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:664

                // copy actual int context + 4WORDS -> prev int context - (1 + 8)WORDS
                ldr r2, [r3, #KD_INTERRUPT_CONTEXT_PTR]    // get actual int context
   15914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:665
                adds r2, r2, #16               // calculate source address
   15916:	3210      	adds	r2, #16
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:667

                ldr r1, [r2]
   15918:	6811      	ldr	r1, [r2, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:668
                mov lr, r1                     // lr - return from exception... (0xfffffff1)
   1591a:	468e      	mov	lr, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:669
                adds r2, r2, #4                // increment r2 by 4
   1591c:	3204      	adds	r2, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:672

                // modify return address (PC) in exception stack frame (kernel isr epilog)
                ldr r0, =_int_kernel_isr_epilog
   1591e:	481f      	ldr	r0, [pc, #124]	; (1599c <__get_CONTROL+0x1a>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:673
                movs r1, #1
   15920:	2101      	movs	r1, #1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:674
                bics r0, r0, r1
   15922:	4388      	bics	r0, r1
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:675
                str r0, [r2, #24]
   15924:	6190      	str	r0, [r2, #24]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:677

                ldmia r2, {r0-r7}              // read exception stack frame
   15926:	caff      	ldmia	r2, {r0, r1, r2, r3, r4, r5, r6, r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:678
                mov r8, r7
   15928:	46b8      	mov	r8, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:680

                pop {r7}                       // get prev int context address (function parameter - r0)
   1592a:	bc80      	pop	{r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:683

                // destination stack address (4B + 32B - exception stack frame)
                subs r7, r7, #4    //#36
   1592c:	3f04      	subs	r7, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:684
                stm r7!, {r0-r6} //stmdb??
   1592e:	c77f      	stmia	r7!, {r0, r1, r2, r3, r4, r5, r6}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:685
                subs r7, r7, #28
   15930:	3f1c      	subs	r7, #28
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:686
                mov r0, r7
   15932:	4638      	mov	r0, r7
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:687
                mov r7, r8
   15934:	4647      	mov	r7, r8
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:688
                stm r0!, {r7} //stmdb??
   15936:	c080      	stmia	r0!, {r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:689
                subs r0, r0, #4
   15938:	3804      	subs	r0, #4
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:692

                // restore modified registers which are not restored by cpu
                pop {r1, r2, r4-r7}
   1593a:	bcf6      	pop	{r1, r2, r4, r5, r6, r7}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:694

                msr MSP, r0                    // update MSP (main stack pointer)
   1593c:	f380 8808 	msr	MSP, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:696

                cpsie i
   15940:	b662      	cpsie	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:698

                bx lr
   15942:	4770      	bx	lr

00015944 <_mem_test_and_set>:
_mem_test_and_set():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:717
 *END*----------------------------------------------------------------------*/

 ASM_PUBLIC_BEGIN(_mem_test_and_set)
 ASM_PUBLIC_FUNC(_mem_test_and_set)
ASM_LABEL(_mem_test_and_set)
                push {r1, r2, lr}
   15944:	b506      	push	{r1, r2, lr}
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:719

                ldrb r1, [r0]
   15946:	7801      	ldrb	r1, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:720
                ldr r2, =0x80
   15948:	4a15      	ldr	r2, [pc, #84]	; (159a0 <__get_CONTROL+0x1e>)
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:721
                tst r1, r2
   1594a:	4211      	tst	r1, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:722
                bne _mem_test_and_set_0x80
   1594c:	d103      	bne.n	15956 <_mem_test_and_set_0x80>
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:723
                orrs r1, r1, r2
   1594e:	4311      	orrs	r1, r2
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:724
                strb r1, [r0]
   15950:	7001      	strb	r1, [r0, #0]
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:725
                eors r0, r0
   15952:	4040      	eors	r0, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:726
                b _mem_test_and_set_pop
   15954:	e000      	b.n	15958 <_mem_test_and_set_pop>

00015956 <_mem_test_and_set_0x80>:
_mem_test_and_set_0x80():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:728
ASM_LABEL(_mem_test_and_set_0x80)
                movs r0, #0x80
   15956:	2080      	movs	r0, #128	; 0x80

00015958 <_mem_test_and_set_pop>:
_mem_test_and_set_pop():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:731

ASM_LABEL(_mem_test_and_set_pop)
                pop {r1, r2, pc}
   15958:	bd06      	pop	{r1, r2, pc}

0001595a <__get_PSP>:
__get_PSP():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:745
 *END*----------------------------------------------------------------------*/

 ASM_PUBLIC_BEGIN(__get_PSP)
 ASM_PUBLIC_FUNC(__get_PSP)
ASM_LABEL(__get_PSP)
                mrs r0, PSP
   1595a:	f3ef 8009 	mrs	r0, PSP
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:746
                bx lr
   1595e:	4770      	bx	lr

00015960 <__get_MSP>:
__get_MSP():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:760
 *END*----------------------------------------------------------------------*/

 ASM_PUBLIC_BEGIN(__get_MSP)
 ASM_PUBLIC_FUNC(__get_MSP)
ASM_LABEL(__get_MSP)
                mrs r0, MSP
   15960:	f3ef 8008 	mrs	r0, MSP
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:761
                bx lr
   15964:	4770      	bx	lr

00015966 <__set_MSP>:
__set_MSP():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:775
 *END*----------------------------------------------------------------------*/

 ASM_PUBLIC_BEGIN(__set_MSP)
 ASM_PUBLIC_FUNC(__set_MSP)
ASM_LABEL(__set_MSP)
                msr MSP, r0
   15966:	f380 8808 	msr	MSP, r0
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:776
                bx lr
   1596a:	4770      	bx	lr

0001596c <__get_PSR>:
__get_PSR():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:793
 ASM_PUBLIC_FUNC(__get_PSR)
ASM_LABEL(__get_PSR)
        #ifdef __CWARM__
                 mrs r0, XPSR
        #else
                 mrs r0, PSR
   1596c:	f3ef 8003 	mrs	r0, PSR
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:795
        #endif
                 bx lr
   15970:	4770      	bx	lr

00015972 <__enable_interrupt>:
__enable_interrupt():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:812
 *END*----------------------------------------------------------------------*/

 ASM_PUBLIC_BEGIN(__enable_interrupt)
 ASM_PUBLIC_FUNC(__enable_interrupt)
ASM_LABEL(__enable_interrupt)
                 cpsie i
   15972:	b662      	cpsie	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:813
                 bx lr
   15974:	4770      	bx	lr

00015976 <__disable_interrupt>:
__disable_interrupt():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:828
 *END*----------------------------------------------------------------------*/

 ASM_PUBLIC_BEGIN(__disable_interrupt)
 ASM_PUBLIC_FUNC(__disable_interrupt)
ASM_LABEL(__disable_interrupt)
                 cpsid i
   15976:	b672      	cpsid	i
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:829
                 bx lr
   15978:	4770      	bx	lr

0001597a <__get_LR>:
__get_LR():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:849
 *END*----------------------------------------------------------------------*/

 ASM_PUBLIC_BEGIN(__get_LR)
 ASM_PUBLIC_FUNC(__get_LR)
ASM_LABEL(__get_LR)
                mov r0, lr
   1597a:	4670      	mov	r0, lr
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:850
                bx lr
   1597c:	4770      	bx	lr

0001597e <__get_PC>:
__get_PC():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:865
 *END*----------------------------------------------------------------------*/

 ASM_PUBLIC_BEGIN(__get_PC)
 ASM_PUBLIC_FUNC(__get_PC)
ASM_LABEL(__get_PC)
                mov r0, PC
   1597e:	4678      	mov	r0, pc
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:866
                bx lr
   15980:	4770      	bx	lr

00015982 <__get_CONTROL>:
__get_CONTROL():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:880
 *END*----------------------------------------------------------------------*/
 ASM_PUBLIC(__get_CONTROL)
 ASM_PUBLIC_BEGIN(__get_CONTROL)
 ASM_PUBLIC_FUNC(__get_CONTROL)
ASM_LABEL(__get_CONTROL)
                mrs r0, CONTROL
   15982:	f3ef 8014 	mrs	r0, CONTROL
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:881
                bx lr
   15986:	4770      	bx	lr
$d():
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:90
 *END*----------------------------------------------------------------------*/

 ASM_PUBLIC_BEGIN(_sched_start_internal)
 ASM_PUBLIC_FUNC(_sched_start_internal)
ASM_LABEL(_sched_start_internal)
                GET_KERNEL_DATA r0
   15988:	1fffe000 	.word	0x1fffe000
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:168
ASM_LABEL(_sched_execute_scheduler_internal2)
                cpsie i
#endif

                // store active task registers
                STORE_ALL_REGISTERS
   1598c:	01000000 	.word	0x01000000
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:266
                //read stacked xPSR value
                ldm r0!, {r1}
                subs r0, r0, #32

                //bit 9 of the xPSR indicates the stack alignment on exception entry, if set SP has to be moved by 4 bytes
                ldr r2, =0x200
   15990:	00000200 	.word	0x00000200
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:454
                ldrh r1, [r3, #KD_IN_ISR]
                adds r1, r1, #1
                strh r1, [r3, #KD_IN_ISR]

                // create interrupt content
                ldr r0, =0                      // error code (set 0)
   15994:	00000000 	.word	0x00000000
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:594

                // check for reschedule
                // check preemtion
                ldr r2, [r3, #KD_ACTIVE_PTR]    // TD pointer
                ldr r0, [r2, #TD_FLAGS]
                ldr r1, =TASK_PREEMPTION_DISABLED
   15998:	00001000 	.word	0x00001000
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:672
                ldr r1, [r2]
                mov lr, r1                     // lr - return from exception... (0xfffffff1)
                adds r2, r2, #4                // increment r2 by 4

                // modify return address (PC) in exception stack frame (kernel isr epilog)
                ldr r0, =_int_kernel_isr_epilog
   1599c:	000158ae 	.word	0x000158ae
C:\Users\B48923\Documents\KDSWorkspace\FSFK_KL46Z\FLASH/../MQXLITE/psp/cortex_m/core/M0/dispatch.S:720
 ASM_PUBLIC_FUNC(_mem_test_and_set)
ASM_LABEL(_mem_test_and_set)
                push {r1, r2, lr}

                ldrb r1, [r0]
                ldr r2, =0x80
   159a0:	00000080 	.word	0x00000080
